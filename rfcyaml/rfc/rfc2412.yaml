- title: __initial_text__
  contents:
  - '                 The OAKLEY Key Determination Protocol

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a protocol, named OAKLEY, by which two\n\
    \   authenticated parties can agree on secure and secret keying material.\n  \
    \ The basic mechanism is the Diffie-Hellman key exchange algorithm.\n   The OAKLEY\
    \ protocol supports Perfect Forward Secrecy, compatibility\n   with the ISAKMP\
    \ protocol for managing security associations, user-\n   defined abstract group\
    \ structures for use with the Diffie-Hellman\n   algorithm, key updates, and incorporation\
    \ of keys distributed via\n   out-of-band mechanisms.\n"
- title: 1. INTRODUCTION
  contents:
  - "1. INTRODUCTION\n   Key establishment is the heart of data protection that relies\
    \ on\n   cryptography, and it is an essential component of the packet\n   protection\
    \ mechanisms described in [RFC2401], for example.  A\n   scalable and secure key\
    \ distribution mechanism for the Internet is a\n   necessity.  The goal of this\
    \ protocol is to provide that mechanism,\n   coupled with a great deal of cryptographic\
    \ strength.\n   The Diffie-Hellman key exchange algorithm provides such a mechanism.\n\
    \   It allows two parties to agree on a shared value without requiring\n   encryption.\
    \  The shared value is immediately available for use in\n   encrypting subsequent\
    \ conversation, e.g. data transmission and/or\n   authentication.  The STS protocol\
    \ [STS] provides a demonstration of\n   how to embed the algorithm in a secure\
    \ protocol, one that ensures\n   that in addition to securely sharing a secret,\
    \ the two parties can be\n   sure of each other's identities, even when an active\
    \ attacker exists.\n   Because OAKLEY is a generic key exchange protocol, and\
    \ because the\n   keys that it generates might be used for encrypting data with\
    \ a long\n   privacy lifetime, 20 years or more, it is important that the\n  \
    \ algorithms underlying the protocol be able to ensure the security of\n   the\
    \ keys for that period of time, based on the best prediction\n   capabilities\
    \ available for seeing into the mathematical future.  The\n   protocol therefore\
    \ has two options for adding to the difficulties\n   faced by an attacker who\
    \ has a large amount of recorded key exchange\n   traffic at his disposal (a passive\
    \ attacker).  These options are\n   useful for deriving keys which will be used\
    \ for encryption.\n   The OAKLEY protocol is related to STS, sharing the similarity\
    \ of\n   authenticating the Diffie-Hellman exponentials and using them for\n \
    \  determining a shared key, and also of achieving Perfect Forward\n   Secrecy\
    \ for the shared key, but it differs from the STS protocol in\n   several ways.\n\
    \      The first is the addition of a weak address validation mechanism\n    \
    \  (\"cookies\", described by Phil Karn in the Photuris key exchange\n      protocol\
    \ work in progress) to help avoid denial of service\n      attacks.\n      The\
    \ second extension is to allow the two parties to select\n      mutually agreeable\
    \ supporting algorithms for the protocol: the\n      encryption method, the key\
    \ derivation method, and the\n      authentication method.\n      Thirdly, the\
    \ authentication does not depend on encryption using\n      the Diffie-Hellman\
    \ exponentials; instead, the authentication\n      validates the binding of the\
    \ exponentials to the identities of the\n      parties.\n      The protocol does\
    \ not require the two parties compute the shared\n      exponentials prior to\
    \ authentication.\n      This protocol adds additional security to the derivation\
    \ of keys\n      meant for use with encryption (as opposed to authentication)\
    \ by\n      including a dependence on an additional algorithm.  The derivation\n\
    \      of keys for encryption is made to depend not only on the Diffie-\n    \
    \  Hellman algorithm, but also on the cryptographic method used to\n      securely\
    \ authenticate the communicating parties to each other.\n      Finally, this protocol\
    \ explicitly defines how the two parties can\n      select the mathematical structures\
    \ (group representation and\n      operation) for performing the Diffie-Hellman\
    \ algorithm; they can\n      use standard groups or define their own.  User-defined\
    \ groups\n      provide an additional degree of long-term security.\n   OAKLEY\
    \ has several options for distributing keys.  In addition to the\n   classic Diffie-Hellman\
    \ exchange, this protocol can be used to derive\n   a new key from an existing\
    \ key and to distribute an externally\n   derived key by encrypting it.\n   The\
    \ protocol allows two parties to use all or some of the anti-\n   clogging and\
    \ perfect forward secrecy features.  It also permits the\n   use of authentication\
    \ based on symmetric encryption or non-encryption\n   algorithms.  This flexibility\
    \ is included in order to allow the\n   parties to use the features that are best\
    \ suited to their security\n   and performance requirements.\n   This document\
    \ draws extensively in spirit and approach from the\n   Photuris work in progress\
    \ by Karn and Simpson (and from discussions\n   with the authors), specifics of\
    \ the ISAKMP document by Schertler et\n   al. the ISAKMP protocol document, and\
    \ it was also influenced by\n   papers by Paul van Oorschot and Hugo Krawcyzk.\n"
- title: 2. The Protocol Outline
  contents:
  - '2. The Protocol Outline

    '
- title: 2.1  General Remarks
  contents:
  - "2.1  General Remarks\n   The OAKLEY protocol is used to establish a shared key\
    \ with an\n   assigned identifier and associated authenticated identities for\
    \ the\n   two parties.  The name of the key can be used later to derive\n   security\
    \ associations for the RFC 2402 and RFC 2406 protocols (AH and\n   ESP) or to\
    \ achieve other network security goals.\n   Each key is associated with algorithms\
    \ that are used for\n   authentication, privacy, and one-way functions.  These\
    \ are ancillary\n   algorithms for OAKLEY; their appearance in subsequent security\n\
    \   association definitions derived with other protocols is neither\n   required\
    \ nor prohibited.\n   The specification of the details of how to apply an algorithm\
    \ to data\n   is called a transform.  This document does not supply the transform\n\
    \   definitions; they will be in separate RFC's.\n   The anti-clogging tokens,\
    \ or \"cookies\", provide a weak form of source\n   address identification for\
    \ both parties; the cookie exchange can be\n   completed before they perform the\
    \ computationally expensive part of\n   the protocol (large integer exponentiations).\n\
    \   It is important to note that OAKLEY uses the cookies for two\n   purposes:\
    \  anti-clogging and key naming.  The two parties to the\n   protocol each contribute\
    \ one cookie at the initiation of key\n   establishment; the pair of cookies becomes\
    \ the key identifier\n   (KEYID), a reusable name for the keying material.  Because\
    \ of this\n   dual role, we will use the notation for the concatenation of the\n\
    \   cookies (\"COOKIE-I, COOKIE-R\") interchangeably with the symbol\n   \"KEYID\"\
    .\n   OAKLEY is designed to be a compatible component of the ISAKMP\n   protocol\
    \ [ISAKMP], which runs over the UDP protocol using a well-\n   known port (see\
    \ the RFC on port assignments, STD02-RFC-1700).  The\n   only technical requirement\
    \ for the protocol environment is that the\n   underlying protocol stack must\
    \ be able to supply the Internet address\n   of the remote party for each message.\
    \  Thus, OAKLEY could, in theory,\n   be used directly over the IP protocol or\
    \ over UDP, if suitable\n   protocol or port number assignments were available.\n\
    \   The machine running OAKLEY must provide a good random number\n   generator,\
    \ as described in [RANDOM], as the source of random numbers\n   required in this\
    \ protocol description.  Any mention of a \"nonce\"\n   implies that the nonce\
    \ value is generated by such a generator.  The\n   same is true for \"pseudorandom\"\
    \ values.\n"
- title: 2.2  Notation
  contents:
  - "2.2  Notation\n   The section describes the notation used in this document for\
    \ message\n   sequences and content.\n"
- title: 2.2.1  Message descriptions
  contents:
  - "2.2.1  Message descriptions\n   The protocol exchanges below are written in an\
    \ abbreviated notation\n   that is intended to convey the essential elements of\
    \ the exchange in\n   a clear manner.  A brief guide to the notation follows.\
    \  The detailed\n   formats and assigned values are given in the appendices.\n\
    \   In order to represent message exchanges succinctly, this document\n   uses\
    \ an abbreviated notation that describes each message in terms of\n   its source\
    \ and destination and relevant fields.\n   Arrows (\"->\") indicate whether the\
    \ message is sent from the initiator\n   to the responder, or vice versa (\"<-\"\
    ).\n   The fields in the message are named and comma separated.  The\n   protocol\
    \ uses the convention that the first several fields constitute\n   a fixed header\
    \ format for all messages.\n   For example, consider a HYPOTHETICAL exchange of\
    \ messages involving a\n   fixed format message, the four fixed fields being two\
    \ \"cookies\", the\n   third field being a message type name, the fourth field\
    \ being a\n   multi-precision integer representing a power of a number:\n    \
    \    Initiator                                       Responder\n            ->\
    \    Cookie-I, 0, OK_KEYX, g^x                    ->\n            <-    Cookie-R,\
    \ Cookie-I, OK_KEYX, g^y            <-\n   The notation describes a two message\
    \ sequence.  The initiator begins\n   by sending a message with 4 fields to the\
    \ responder; the first field\n   has the unspecified value \"Cookie-I\", second\
    \ field has the numeric\n   value 0, the third field indicates the message type\
    \ is OK_KEYX, the\n   fourth value is an abstract group element g to the x'th\
    \ power.\n   The second line indicates that the responder replies with value\n\
    \   \"Cookie-R\" in the first field, a copy of the \"Cookie-I\" value in the\n\
    \   second field, message type OK_KEYX, and the number g raised to the\n   y'th\
    \ power.\n   The value OK_KEYX is in capitals to indicate that it is a unique\n\
    \   constant (constants are defined in the appendices).\n   Variable precision\
    \ integers with length zero are null values for the\n   protocol.\n   Sometimes\
    \ the protocol will indicate that an entire payload (usually\n   the Key Exchange\
    \ Payload) has null values.  The payload is still\n   present in the message,\
    \ for the purpose of simplifying parsing.\n"
- title: 2.2.2 Guide to symbols
  contents:
  - "2.2.2 Guide to symbols\n   Cookie-I and Cookie-R (or CKY-I and CKY-R) are 64-bit\
    \ pseudo-random\n   numbers.  The generation method must ensure with high probability\n\
    \   that the numbers used for each IP remote address are unique over some\n  \
    \ time period, such as one hour.\n   KEYID is the concatenation of the initiator\
    \ and responder cookies and\n   the domain of interpretation; it is the name of\
    \ keying material.\n   sKEYID is used to denote the keying material named by the\
    \ KEYID.  It\n   is never transmitted, but it is used in various calculations\n\
    \   performed by the two parties.\n   OK_KEYX and OK_NEWGRP are distinct message\
    \ types.\n   IDP is a bit indicating whether or not material after the encryption\n\
    \   boundary (see appendix B), is encrypted.  NIDP means not encrypted.\n   g^x\
    \ and g^y are encodings of group elements, where g is a special\n   group element\
    \ indicated in the group description (see Appendix A) and\n   g^x indicates that\
    \ element raised to the x'th power.  The type of the\n   encoding is either a\
    \ variable precision integer or a pair of such\n   integers, as indicated in the\
    \ group operation in the group\n   description.  Note that we will write g^xy\
    \ as a short-hand for\n   g^(xy).  See Appendix F for references that describe\
    \ implementing\n   large integer computations and the relationship between various\
    \ group\n   definitions and basic arithmetic operations.\n   EHAO is a list of\
    \ encryption/hash/authentication choices.  Each item\n   is a pair of values:\
    \ a class name and an algorithm name.\n   EHAS is a set of three items selected\
    \ from the EHAO list, one from\n   each of the classes for encryption, hash, authentication.\n\
    \   GRP is a name (32-bit value) for the group and its relevant\n   parameters:\
    \ the size of the integers, the arithmetic operation, and\n   the generator element.\
    \  There are a few pre-defined GRP's (for 768\n   bit modular exponentiation groups,\
    \ 1024 bit modexp, 2048 bit modexp,\n   155-bit and 210-bit elliptic curves, see\
    \ Appendix E), but\n   participants can share other group descriptions in a later\
    \ protocol\n   stage (see the section NEW GROUP).  It is important to separate\n\
    \   notion of the GRP from the group descriptor (Appendix A); the former\n   is\
    \ a name for the latter.\n   The symbol vertical bar \"|\" is used to denote concatenation\
    \ of bit\n   strings.  Fields are concatenated using their encoded form as they\n\
    \   appear in their payload.\n   Ni and Nr are nonces selected by the initiator\
    \ and responder,\n   respectively.\n   ID(I) and ID(R) are the identities to be\
    \ used in authenticating the\n   initiator and responder respectively.\n   E{x}Ki\
    \ indicates the encryption of x using the public key of the\n   initiator.  Encryption\
    \ is done using the algorithm associated with\n   the authentication method; usually\
    \ this will be RSA.\n   S{x}Ki indicates the signature over x using the private\
    \ key (signing\n   key) of the initiator.  Signing is done using the algorithm\n\
    \   associated with the authentication method; usually this will be RSA\n   or\
    \ DSS.\n   prf(a, b) denotes the result of applying pseudo-random function \"\
    a\"\n   to data \"b\".  One may think of \"a\" as a key or as a value that\n \
    \  characterizes the function prf; in the latter case it is the index\n   into\
    \ a family of functions.  Each function in the family provides a\n   \"hash\"\
    \ or one-way mixing of the input.\n   prf(0, b) denotes the application of a one-way\
    \ function to data \"b\".\n   The similarity with the previous notation is deliberate\
    \ and indicates\n   that a single algorithm, e.g. MD5, might will used for both\
    \ purposes.\n   In the first case a \"keyed\" MD5 transform would be used with\
    \ key \"a\";\n   in the second case the transform would have the fixed key value\
    \ zero,\n   resulting in a one-way function.\n   The term \"transform\" is used\
    \ to refer to functions defined in\n   auxiliary RFC's.  The transform RFC's will\
    \ be drawn from those\n   defined for IPSEC AH and ESP (see RFC 2401 for the overall\n\
    \   architecture encompassing these protocols).\n"
- title: 2.3 The Key Exchange Message Overview
  contents:
  - "2.3 The Key Exchange Message Overview\n   The goal of key exchange processing\
    \ is the secure establishment of\n   common keying information state in the two\
    \ parties.  This state\n   information is a key name, secret keying material,\
    \ the identification\n   of the two parties, and three algorithms for use during\n\
    \   authentication: encryption (for privacy of the identities of the two\n   parties),\
    \ hashing (a pseudorandom function for protecting the\n   integrity of the messages\
    \ and for authenticating message fields), and\n   authentication (the algorithm\
    \ on which the mutual authentication of\n   the two parties is based).  The encodings\
    \ and meanings for these\n   choices are presented in Appendix B.\n   The main\
    \ mode exchange has five optional features: stateless cookie\n   exchange, perfect\
    \ forward secrecy for the keying material, secrecy\n   for the identities, perfect\
    \ forward secrecy for identity secrecy, use\n   of signatures (for non-repudiation).\
    \  The two parties can use any\n   combination of these features.\n   The general\
    \ outline of processing is that the Initiator of the\n   exchange begins by specifying\
    \ as much information as he wishes in his\n   first message.  The Responder replies,\
    \ supplying as much information\n   as he wishes.  The two sides exchange messages,\
    \ supplying more\n   information each time, until their requirements are satisfied.\n\
    \   The choice of how much information to include in each message depends\n  \
    \ on which options are desirable.  For example, if stateless cookies\n   are not\
    \ a requirement, and identity secrecy and perfect forward\n   secrecy for the\
    \ keying material are not requirements, and if non-\n   repudiatable signatures\
    \ are acceptable, then the exchange can be\n   completed in three messages.\n\
    \   Additional features may increase the number of roundtrips needed for\n   the\
    \ keying material determination.\n   ISAKMP provides fields for specifying the\
    \ security association\n   parameters for use with the AH and ESP protocols. \
    \ These security\n   association payload types are specified in the ISAKMP memo;\
    \ the\n   payload types can be protected with OAKLEY keying material and\n   algorithms,\
    \ but this document does not discuss their use.\n"
- title: 2.3.1 The Essential Key Exchange Message Fields
  contents:
  - "2.3.1 The Essential Key Exchange Message Fields\n   There are 12 fields in an\
    \ OAKLEY key exchange message.  Not all the\n   fields are relevant in every message;\
    \ if a field is not relevant it\n   can have a null value or not be present (no\
    \ payload).\n      CKY-I            originator cookie.\n      CKY-R          \
    \  responder cookie.\n      MSGTYPE          for key exchange, will be ISA_KE&AUTH_REQ\
    \ or\n                       ISA_KE&AUTH_REP; for new group definitions,\n   \
    \                    will be ISA_NEW_GROUP_REQ or ISA_NEW_GROUP_REP\n      GRP\
    \              the name of the Diffie-Hellman group used for\n               \
    \        the exchange\n      g^x (or g^y)     variable length integer representing\
    \ a power of\n                       group generator\n      EHAO or EHAS     encryption,\
    \ hash, authentication functions,\n                       offered and selectedj,\
    \ respectively\n      IDP              an indicator as to whether or not encryption\
    \ with\n                       g^xy follows (perfect forward secrecy for ID's)\n\
    \      ID(I)            the identity for the Initiator\n      ID(R)          \
    \  the identity for the Responder\n      Ni               nonce supplied by the\
    \ Initiator\n      Nr               nonce supplied by the Responder\n   The construction\
    \ of the cookies is implementation dependent.  Phil\n   Karn has recommended making\
    \ them the result of a one-way function\n   applied to a secret value (changed\
    \ periodically), the local and\n   remote IP address, and the local and remote\
    \ UDP port.  In this way,\n   the cookies remain stateless and expire periodically.\
    \  Note that with\n   OAKLEY, this would cause the KEYID's derived from the secret\
    \ value to\n   also expire, necessitating the removal of any state information\n\
    \   associated with it.\n   In order to support pre-distributed keys, we recommend\
    \ that\n   implementations reserve some portion of their cookie space to\n   permanent\
    \ keys.  The encoding of these depends only on the local\n   implementation.\n\
    \   The encryption functions used with OAKLEY must be cryptographic\n   transforms\
    \ which guarantee privacy and integrity for the message\n   data.  Merely using\
    \ DES in CBC mode is not permissible.  The\n   MANDATORY and OPTIONAL transforms\
    \ will include any that satisfy this\n   criteria and are defined for use with\
    \ RFC 2406 (ESP).\n   The one-way (hash) functions used with OAKLEY must be cryptographic\n\
    \   transforms which can be used as either keyed hash (pseudo-random) or\n   non-keyed\
    \ transforms.  The MANDATORY and OPTIONAL transforms will\n   include any that\
    \ are defined for use with RFC 2406 (AH).\n   Where nonces are indicated, they\
    \ will be variable precision integers\n   with an entropy value that matches the\
    \ \"strength\" attribute of the\n   GRP used with the exchange.  If no GRP is\
    \ indicated, the nonces must\n   be at least 90 bits long.  The pseudo-random\
    \ generator for the nonce\n   material should start with initial data that has\
    \ at least 90 bits of\n   entropy; see RFC 1750.\n"
- title: 2.3.1.1 Exponent Advice
  contents:
  - "2.3.1.1 Exponent Advice\n   Ideally, the exponents will have at least 180 bits\
    \ of entropy for\n   every key exchange.  This ensures complete independence of\
    \ keying\n   material between two exchanges (note that this applies if only one\
    \ of\n   the parties chooses a random exponent).  In practice, implementors\n\
    \   may wish to base several key exchanges on a single base value with\n   180\
    \ bits of entropy and use one-way hash functions to guarantee that\n   exposure\
    \ of one key will not compromise others.  In this case, a good\n   recommendation\
    \ is to keep the base values for nonces and cookies\n   separate from the base\
    \ value for exponents, and to replace the base\n   value with a full 180 bits\
    \ of entropy as frequently as possible.\n   The values 0 and p-1 should not be\
    \ used as exponent values;\n   implementors should be sure to check for these\
    \ values, and they\n   should also refuse to accept the values 1 and p-1 from\
    \ remote parties\n   (where p is the prime used to define a modular exponentiation\
    \ group).\n"
- title: 2.3.2 Mapping to ISAKMP Message Structures
  contents:
  - "2.3.2 Mapping to ISAKMP Message Structures\n   All the OAKLEY message fields\
    \ correspond to ISAKMP message payloads\n   or payload components.  The relevant\
    \ payload fields are the SA\n   payload, the AUTH payload, the Certificate Payload,\
    \ the Key Exchange\n   Payload.  The ISAKMP protocol framwork is a work in progress\
    \ at this\n   time, and the exact mapping of Oakley message fields to ISAKMP\n\
    \   payloads is also in progress (to be known as the Resolution\n   document).\n\
    \   Some of the ISAKMP header and payload fields will have constant\n   values\
    \ when used with OAKLEY.  The exact values to be used will be\n   published in\
    \ a Domain of Interpretation document accompanying the\n   Resolution document.\n\
    \   In the following we indicate where each OAKLEY field appears in the\n   ISAKMP\
    \ message structure.  These are recommended only; the Resolution\n   document\
    \ will be the final authority on this mapping.\n      CKY-I            ISAKMP\
    \ header\n      CKY-R            ISAKMP header\n      MSGTYPE          Message\
    \ Type in ISAKMP header\n      GRP              SA payload, Proposal section\n\
    \      g^x (or g^y)     Key Exchange Payload, encoded as a variable\n        \
    \               precision integer\n      EHAO and EHAS    SA payload, Proposal\
    \ section\n      IDP              A bit in the RESERVED field in the AUTH header\n\
    \      ID(I)            AUTH payload, Identity field\n      ID(R)            AUTH\
    \ payload, Identity field\n      Ni               AUTH payload, Nonce Field\n\
    \      Nr               AUTH payload, Nonce Field\n      S{...}Kx         AUTH\
    \ payload, Data Field\n      prf{K,...}       AUTH payload, Data Field\n"
- title: 2.4 The Key Exchange Protocol
  contents:
  - "2.4 The Key Exchange Protocol\n   The exact number and content of messages exchanged\
    \ during an OAKLEY\n   key exchange depends on which options the Initiator and\
    \ Responder\n   want to use.  A key exchange can be completed with three or more\n\
    \   messages, depending on those options.\n   The three components of the key\
    \ determination protocol are the\n      1. cookie exchange (optionally stateless)\n\
    \      2. Diffie-Hellman half-key exchange (optional, but essential for\n    \
    \     perfect forward secrecy)\n      3. authentication (options: privacy for\
    \ ID's, privacy for ID's\n         with PFS, non-repudiatable)\n   The initiator\
    \ can supply as little information as a bare exchange\n   request, carrying no\
    \ additional information.  On the other hand the\n   initiator can begin by supplying\
    \ all of the information necessary for\n   the responder to authenticate the request\
    \ and complete the key\n   determination quickly, if the responder chooses to\
    \ accept this\n   method.  If not, the responder can reply with a minimal amount\
    \ of\n   information (at the minimum, a cookie).\n   The method of authentication\
    \ can be digital signatures, public key\n   encryption, or an out-of-band symmetric\
    \ key.  The three different\n   methods lead to slight variations in the messages,\
    \ and the variations\n   are illustrated by examples in this section.\n   The\
    \ Initiator is responsible for retransmitting messages if the\n   protocol does\
    \ not terminate in a timely fashion.  The Responder must\n   therefore avoid discarding\
    \ reply information until it is acknowledged\n   by Initiator in the course of\
    \ continuing the protocol.\n   The remainder of this section contains examples\
    \ demonstrating how to\n   use OAKLEY options.\n"
- title: 2.4.1 An Aggressive Example
  contents:
  - "2.4.1 An Aggressive Example\n   The following example indicates how two parties\
    \ can complete a key\n   exchange in three messages.  The identities are not secret,\
    \ the\n   derived keying material is protected by PFS.\n   By using digital signatures,\
    \ the two parties will have a proof of\n   communication that can be recorded\
    \ and presented later to a third\n   party.\n   The keying material implied by\
    \ the group exponentials is not needed\n   for completing the exchange.  If it\
    \ is desirable to defer the\n   computation, the implementation can save the \"\
    x\" and \"g^y\" values and\n   mark the keying material as \"uncomputed\".  It\
    \ can be computed from\n   this information later.\n   Initiator             \
    \                                      Responder\n   ---------               \
    \                                    ---------\n     -> CKY-I, 0,     OK_KEYX,\
    \ GRP, g^x, EHAO, NIDP,               ->\n        ID(I), ID(R), Ni, 0,\n     \
    \   S{ID(I) | ID(R) | Ni | 0 | GRP | g^x | 0 | EHAO}Ki\n    <-  CKY-R, CKY-I,\
    \ OK_KEYX, GRP, g^y, EHAS, NIDP,\n        ID(R), ID(I), Nr, Ni,\n        S{ID(R)\
    \ | ID(I) | Nr | Ni | GRP | g^y | g^x | EHAS}Kr      <-\n     -> CKY-I, CKY-R,\
    \ OK_KEYX, GRP, g^x, EHAS, NIDP,               ->\n        ID(I), ID(R), Ni, Nr,\n\
    \        S{ID(I) | ID(R) | Ni | Nr | GRP | g^x | g^y | EHAS}Ki\n   NB \"NIDP\"\
    \ means that the PFS option for hiding identities is not used.\n      i.e., the\
    \ identities are not encrypted using a key based on g^xy\n   NB Fields are shown\
    \ separated by commas in this document; they are\n   concatenated in the actual\
    \ protocol messages using their encoded\n   forms as specified in the ISAKMP/Oakley\
    \ Resolution document.\n   The result of this exchange is a key with KEYID = CKY-I|CKY-R\
    \ and\n   value\n   sKEYID = prf(Ni | Nr, g^xy | CKY-I | CKY-R).\n   The processing\
    \ outline for this exchange is as follows:\n   Initiation\n      The Initiator\
    \ generates a unique cookie and associates it with the\n      expected IP address\
    \ of the responder, and its chosen state\n      information: GRP (the group identifier),\
    \ a pseudo-randomly\n      selected exponent x, g^x, EHAO list, nonce, identities.\
    \  The first\n      authentication choice in the EHAO list is an algorithm that\n\
    \      supports digital signatures, and this is used to sign the ID's and\n  \
    \    the nonce and group id.  The Initiator further\n      notes that the key\
    \ is in the initial state of \"unauthenticated\",\n      and\n      sets a timer\
    \ for possible retransmission and/or termination of the\n      request.\n   When\
    \ the Responder receives the message, he may choose to ignore all\n   the information\
    \ and treat it as merely a request for a cookie,\n   creating no state.  If CKY-I\
    \ is not already in use by the source\n   address in the IP header, the responder\
    \ generates a unique cookie,\n   CKY-R.  The next steps depend on the Responder's\
    \ preferences.  The\n   minimal required response is to reply with the first cookie\
    \ field set\n   to zero and CKY-R in the second field.  For this example we will\n\
    \   assume that the responder is more aggressive (for the alternatives,\n   see\
    \ section 6) and accepts the following:\n      group with identifier GRP,\n  \
    \    first authentication choice (which must be the digital signature\n      method\
    \ used to sign the Initiator message),\n      lack of perfect forward secrecy\
    \ for protecting the identities,\n      identity ID(I) and identity ID(R)\n  \
    \ In this example the Responder decides to accept all the information\n   offered\
    \ by the initiator.  It validates the signature over the signed\n   portion of\
    \ the message, and associate the pair (CKY-I, CKY-R) with\n   the following state\
    \ information:\n      the source and destination network addresses of the message\n\
    \      key state of \"unauthenticated\"\n      the first algorithm from the authentication\
    \ offer\n      group GRP, a \"y\" exponent value in group GRP, and g^x from the\n\
    \      message\n      the nonce Ni and a pseudorandomly selected value Nr\n  \
    \    a timer for possible destruction of the state.\n   The Responder computes\
    \ g^y, forms the reply message, and then signs\n   the ID and nonce information\
    \ with the private key of ID(R) and sends\n   it to the Initiator.  In all exchanges,\
    \ each party should make sure\n   that he neither offers nor accepts 1 or g^(p-1)\
    \ as an exponential.\n   In this example, to expedite the protocol, the Responder\
    \ implicitly\n   accepts the first algorithm in the Authentication class of the\
    \ EHAO\n   list.  This because he cannot validate the Initiator signature\n  \
    \ without accepting the algorithm for doing the signature.  The\n   Responder's\
    \ EHAS list will also reflect his acceptance.\n   The Initiator receives the reply\
    \ message and\n      validates that CKY-I is a valid association for the network\n\
    \      address of the incoming message,\n      adds the CKY-R value to the state\
    \ for the pair (CKY-I, network\n      address), and associates all state information\
    \ with the pair\n      (CKY-I, CKY-R),\n      validates the signature of the responder\
    \ over the state\n      information (should validation fail, the message is discarded)\n\
    \      adds g^y to its state information,\n      saves the EHA selections in the\
    \ state,\n      optionally computes (g^y)^x (= g^xy) (this can be deferred until\n\
    \      after sending the reply message),\n      sends the reply message, signed\
    \ with the public key of ID(I),\n      marks the KEYID (CKY-I|CKY-R) as authenticated,\n\
    \      and composes the reply message and signature.\n   When the Responder receives\
    \ the Initiator message, and if the\n   signature is valid, it marks the key as\
    \ being in the authenticated\n   state.  It should compute g^xy and associate\
    \ it with the KEYID.\n   Note that although PFS for identity protection is not\
    \ used, PFS for\n   the derived keying material is still present because the Diffie-\n\
    \   Hellman half-keys g^x and g^y are exchanged.\n   Even if the Responder only\
    \ accepts some of the Initiator information,\n   the Initiator will consider the\
    \ protocol to be progressing.  The\n   Initiator should assume that fields that\
    \ were not accepted by the\n   Responder were not recorded by the Responder.\n\
    \   If the Responder does not accept the aggressive exchange and selects\n   another\
    \ algorithm for the A function, then the protocol will not\n   continue using\
    \ the signature algorithm or the signature value from\n   the first message.\n"
- title: 2.4.1.1 Fields Not Present
  contents:
  - "2.4.1.1 Fields Not Present\n   If the Responder does not accept all the fields\
    \ offered by the\n   Initiator, he should include null values for those fields\
    \ in his\n   response.  Section 6 has guidelines on how to select fields in a\n\
    \   \"left-to-right\" manner.  If a field is not accepted, then it and all\n \
    \  following fields must have null values.\n   The Responder should not record\
    \ any information that it does not\n   accept.  If the ID's and nonces have null\
    \ values, there will not be a\n   signature over these null values.\n"
- title: 2.4.1.2 Signature via Pseudo-Random Functions
  contents:
  - "2.4.1.2 Signature via Pseudo-Random Functions\n   The aggressive example is written\
    \ to suggest that public key\n   technology is used for the signatures.  However,\
    \ a pseudorandom\n   function can be used, if the parties have previously agreed\
    \ to such a\n   scheme and have a shared key.\n   If the first proposal in the\
    \ EHAO list is an \"existing key\" method,\n   then the KEYID named in that proposal\
    \ will supply the keying material\n   for the \"signature\" which is computed\
    \ using the \"H\" algorithm\n   associated with the KEYID.\n   Suppose the first\
    \ proposal in EHAO is\n      EXISTING-KEY, 32\n   and the \"H\" algorithm for\
    \ KEYID 32 is MD5-HMAC, by prior negotiation.\n   The keying material is some\
    \ string of bits, call it sK32.  Then in\n   the first message in the aggressive\
    \ exchange, where the signature\n           S{ID(I), ID(R), Ni, 0, GRP, g^x, EHAO}Ki\n\
    \   is indicated, the signature computation would be performed by\n       MD5-HMAC_func(KEY=sK32,\
    \ DATA = ID(I) | ID(R) | Ni | 0 | GRP | g^x\n      | g^y | EHAO) (The exact definition\
    \ of the algorithm corresponding\n   to \"MD5-HMAC- func\" will appear in the\
    \ RFC defining that transform).\n   The result of this computation appears in\
    \ the Authentication payload.\n"
- title: 2.4.2 An Aggressive Example With Hidden Identities
  contents:
  - "2.4.2 An Aggressive Example With Hidden Identities\n   The following example\
    \ indicates how two parties can complete a key\n   exchange without using digital\
    \ signatures.  Public key cryptography\n   hides the identities during authentication.\
    \  The group exponentials\n   are exchanged and authenticated, but the implied\
    \ keying material\n   (g^xy) is not needed during the exchange.\n   This exchange\
    \ has an important difference from the previous signature\n   scheme --- in the\
    \ first message, an identity for the responder is\n   indicated as cleartext:\
    \ ID(R').  However, the identity hidden with\n   the public key cryptography is\
    \ different: ID(R).  This happens\n   because the Initiator must somehow tell\
    \ the Responder which\n   public/private key pair to use for the decryption, but\
    \ at the same\n   time, the identity is hidden by encryption with that public\
    \ key.\n   The Initiator might elect to forgo secrecy of the Responder identity,\n\
    \   but this is undesirable.  Instead, if there is a well-known identity\n   for\
    \ the Responder node, the public key for that identity can be used\n   to encrypt\
    \ the actual Responder identity.\n   Initiator                               \
    \                    Responder\n   ---------                                 \
    \                  ---------\n     -> CKY-I, 0,     OK_KEYX, GRP, g^x, EHAO, NIDP,\
    \                ->\n        ID(R'), E{ID(I), ID(R), E{Ni}Kr}Kr'\n    <-  CKY-R,\
    \ CKY-I, OK_KEYX, GRP, g^y, EHAS, NIDP,\n        E{ID(R), ID(I), Nr}Ki,\n    \
    \    prf(Kir, ID(R) | ID(I) | GRP | g^y | g^x | EHAS) <-\n     -> CKY-I, CKY-R,\
    \ OK_KEYX, GRP, 0, 0, NIDP,\n        prf(Kir, ID(I) | ID(R) | GRP | g^x | g^y\
    \ | EHAS)    ->\n   Kir = prf(0, Ni | Nr)\n   NB \"NIDP\" means that the PFS option\
    \ for hiding identities is not used.\n   NB  The ID(R') value is included in the\
    \ Authentication payload as\n       described in Appendix B.\n   The result of\
    \ this exchange is a key with KEYID = CKY-I|CKY-R and\n   value sKEYID = prf(Ni\
    \ | Nr, g^xy | CKY-I | CKY-R).\n   The processing outline for this exchange is\
    \ as follows:\n   Initiation\n      The Initiator generates a unique cookie and\
    \ associates it with the\n      expected IP address of the responder, and its\
    \ chosen state\n      information: GRP, g^x, EHAO list.  The first authentication\
    \ choice\n      in the EHAO list is an algorithm that supports public key\n  \
    \    encryption.  The Initiator also names the two identities to be\n      used\
    \ for the connection and enters these into the state.  A well-\n      known identity\
    \ for the responder machine is also chosen, and the\n      public key for this\
    \ identity is used to encrypt the nonce Ni and\n      the two connection identities.\
    \  The Initiator further\n      notes that the key is in the initial state of\
    \ \"unauthenticated\",\n      and\n      sets a timer for possible retransmission\
    \ and/or termination of the\n      request.\n   When the Responder receives the\
    \ message, he may choose to ignore all\n   the information and treat it as merely\
    \ a request for a cookie,\n   creating no state.\n   If CKY-I is not already in\
    \ use by the source address in the IP\n   header, the Responder generates a unique\
    \ cookie, CKY-R.  As before,\n   the next steps depend on the responder's preferences.\
    \  The minimal\n   required response is a message with the first cookie field\
    \ set to\n   zero and CKY-R in the second field.  For this example we will assume\n\
    \   that responder is more aggressive and accepts the following:\n      group\
    \ GRP, first authentication choice (which must be the public\n      key encryption\
    \ algorithm used to encrypt the payload), lack of\n      perfect forward secrecy\
    \ for protecting the identities, identity\n      ID(I), identity ID(R)\n   The\
    \ Responder must decrypt the ID and nonce information, using the\n   private key\
    \ for the R' ID.  After this, the private key for the R ID\n   will be used to\
    \ decrypt the nonce field.\n   The Responder now associates the pair (CKY-I, CKY-R)\
    \ with the\n   following state information:\n      the source and destination\
    \ network addresses of the message\n      key state of \"unauthenticated\"\n \
    \     the first algorithm from each class in the EHAO (encryption-hash-\n    \
    \  authentication algorithm offers) list\n      group GRP and a y and g^y value\
    \ in group GRP\n      the nonce Ni and a pseudorandomly selected value Nr\n  \
    \    a timer for possible destruction of the state.\n   The Responder then encrypts\
    \ the state information with the public key\n   of ID(I), forms the prf value,\
    \ and sends it to the Initiator.\n   The Initiator receives the reply message\
    \ and\n      validates that CKY-I is a valid association for the network\n   \
    \   address of the incoming message,\n      adds the CKY-R value to the state\
    \ for the pair (CKY-I, network\n      address), and associates all state information\
    \ with the pair\n      (CKY-I, CKY-R),\n      decrypts the ID and nonce information\n\
    \      checks the prf calculation (should this fail, the message is\n      discarded)\n\
    \      adds g^y to its state information,\n      saves the EHA selections in the\
    \ state,\n      optionally computes (g^x)^y (= g^xy) (this may be deferred), and\n\
    \      sends the reply message, encrypted with the public key of ID(R),\n    \
    \  and marks the KEYID (CKY-I|CKY-R) as authenticated.\n   When the Responder\
    \ receives this message, it marks the key as being\n   in the authenticated state.\
    \  If it has not already done so, it should\n   compute g^xy and associate it\
    \ with the KEYID.\n   The secret keying material sKEYID = prf(Ni | Nr,  g^xy |\
    \ CKY-I |\n   CKY-R)\n   Note that although PFS for identity protection is not\
    \ used, PFS for\n   the derived keying material is still present because the Diffie-\n\
    \   Hellman half-keys g^x and g^y are exchanged.\n"
- title: 2.4.3 An Aggressive Example With Private Identities and Without Diffie-
  contents:
  - "2.4.3 An Aggressive Example With Private Identities and Without Diffie-\n   \
    \   Hellman\n   Considerable computational expense can be avoided if perfect forward\n\
    \   secrecy is not a requirement for the session key derivation.  The two\n  \
    \ parties can exchange nonces and secret key parts to achieve the\n   authentication\
    \ and derive keying material.  The long-term privacy of\n   data protected with\
    \ derived keying material is dependent on the\n   private keys of each of the\
    \ parties.\n   In this exchange, the GRP has the value 0 and the field for the\
    \ group\n   exponential is used to hold a nonce value instead.\n   As in the previous\
    \ section, the first proposed algorithm must be a\n   public key encryption system;\
    \ by responding with a cookie and a non-\n   zero exponential field, the Responder\
    \ implicitly accepts the first\n   proposal and the lack of perfect forward secrecy\
    \ for the identities\n   and derived keying material.\n   Initiator          \
    \                                         Responder\n   ---------            \
    \                                       ---------\n     -> CKY-I, 0,     OK_KEYX,\
    \ 0, 0, EHAO, NIDP,                  ->\n        ID(R'), E{ID(I), ID(R), sKi}Kr',\
    \ Ni\n    <-  CKY-R, CKY-I, OK_KEYX, 0, 0, EHAS, NIDP,\n        E{ID(R), ID(I),\
    \ sKr}Ki, Nr,\n        prf(Kir, ID(R) | ID(I) | Nr | Ni | EHAS)              \
    \   <-\n     -> CKY-I, CKY-R, OK_KEYX, EHAS, NIDP,\n        prf(Kir, ID(I) | ID(R)\
    \ | Ni | Nr | EHAS)                  ->\n   Kir = prf(0, sKi | sKr)\n   NB  The\
    \ sKi and sKr values go into the nonce fields.  The change in\n   notation is\
    \ meant to emphasize that their entropy is critical to\n   setting the keying\
    \ material.\n   NB \"NIDP\" means that the PFS option for hiding identities is\
    \ not\n   used.\n   The result of this exchange is a key with KEYID = CKY-I|CKY-R\
    \ and\n   value sKEYID = prf(Kir, CKY-I | CKY-R).\n"
- title: 2.4.3 A Conservative Example
  contents:
  - "2.4.3 A Conservative Example\n   In this example the two parties are minimally\
    \ aggressive; they use\n   the cookie exchange to delay creation of state, and\
    \ they use perfect\n   forward secrecy to protect the identities.  For this example,\
    \ they\n   use public key encryption for authentication; digital signatures or\n\
    \   pre-shared keys can also be used, as illustrated previously.  The\n   conservative\
    \ example here does not change the use of nonces, prf's,\n   etc., but it does\
    \ change how much information is transmitted in each\n   message.\n   The responder\
    \ considers the ability of the initiator to repeat CKY-R\n   as weak evidence\
    \ that the message originates from a \"live\"\n   correspondent on the network\
    \ and the correspondent is associated with\n   the initiator's network address.\
    \  The initiator makes similar\n   assumptions when CKY-I is repeated to the initiator.\n\
    \   All messages must have either valid cookies or at least one zero\n   cookie.\
    \ If both cookies are zero, this indicates a request for a\n   cookie; if only\
    \ the initiator cookie is zero, it is a response to a\n   cookie request.\n  \
    \ Information in messages violating the cookie rules cannot be used for\n   any\
    \ OAKLEY operations.\n   Note that the Initiator and Responder must agree on one\
    \ set of EHA\n   algorithms; there is not one set for the Responder and one for\
    \ the\n   Initiator.  The Initiator must include at least MD5 and DES in the\n\
    \   initial offer.\n   Fields not indicated have null values.\n   Initiator  \
    \                                                 Responder\n   ---------    \
    \                                               ---------\n     ->     0, 0, OK_KEYX\
    \                                          ->\n    <-      0, CKY-R, OK_KEYX \
    \                                    <-\n     ->     CKY-I, CKY-R, OK_KEYX, GRP,\
    \ g^x, EHAO                  ->\n    <-      CKY-R, CKY-I, OK_KEYX, GRP, g^y,\
    \ EHAS                 <-\n     ->     CKY-I, CKY-R, OK_KEYX, GRP, g^x, IDP*,\n\
    \            ID(I), ID(R), E{Ni}Kr,                                 ->\n    <-\
    \      CKY-R, CKY-I, OK_KEYX, GRP, 0  , 0, IDP,              <-\n            E{Nr,\
    \ Ni}Ki, ID(R), ID(I),\n            prf(Kir, ID(R) | ID(I) | GRP | g^y | g^x |\
    \ EHAS )\n     ->     CKY-I, CKY-R, OK_KEYX, GRP, 0  , 0, IDP,\n            prf(Kir,\
    \ ID(I) | ID(R) | GRP | g^x | g^y | EHAS ) ->\n   Kir = prf(0, Ni | Nr)\n   *\
    \ when IDP is in effect, authentication payloads are encrypted with\n     the\
    \ selected encryption algorithm using the keying material prf(0,\n     g^xy).\
    \  (The transform defining the encryption algorithm will\n     define how to select\
    \ key bits from the keying material.) This\n     encryption is in addition to\
    \ and after any  public key encryption.\n     See Appendix B.\n     Note that\
    \ in the first messages, several fields are omitted from\n     the description.\
    \  These fields are present as null values.\n   The first exchange allows the\
    \ Responder to use stateless cookies; if\n   the responder generates cookies in\
    \ a manner that allows him to\n   validate them without saving them, as in Photuris,\
    \ then this is\n   possible.  Even if the Initiator includes a cookie in his initial\n\
    \   request, the responder can still use stateless cookies by merely\n   omitting\
    \ the CKY-I from his reply and by declining to record the\n   Initiator cookie\
    \ until it appears in a later message.\n   After the exchange is complete, both\
    \ parties compute the shared key\n   material sKEYID as prf(Ni | Nr, g^xy | CKY-I\
    \ | CKY-R) where \"prf\" is\n   the pseudo-random function in class \"hash\" selected\
    \ in the EHA list.\n   As with the cookies, each party considers the ability of\
    \ the remote\n   side to repeat the Ni or Nr value as a proof that Ka, the public\
    \ key\n   of party a, speaks for the remote party and establishes its identity.\n\
    \   In analyzing this exchange, it is important to note that although the\n  \
    \ IDP option ensures that the identities are protected with an\n   ephemeral key\
    \ g^xy, the authentication itself does not depend on\n   g^xy.  It is essential\
    \ that the authentication steps validate the g^x\n   and g^y values, and it is\
    \ thus imperative that the authentication not\n   involve a circular dependency\
    \ on them.  A third party could intervene\n   with a \"man-in-middle\" scheme\
    \ to convince the initiator and responder\n   to use different g^xy values; although\
    \ such an attack might result in\n   revealing the identities to the eavesdropper,\
    \ the authentication\n   would fail.\n"
- title: 2.4.4 Extra Strength for Protection of Encryption Keys
  contents:
  - "2.4.4 Extra Strength for Protection of Encryption Keys\n   The nonces Ni and\
    \ Nr are used to provide an extra dimension of\n   secrecy in deriving session\
    \ keys.  This makes the secrecy of the key\n   depend on two different problems:\
    \ the discrete logarithm problem in\n   the group G, and the problem of breaking\
    \ the nonce encryption scheme.\n   If RSA encryption is used, then this second\
    \ problem is roughly\n   equivalent to factoring the RSA public keys of both the\
    \ initiator and\n   responder.\n   For authentication, the key type, the validation\
    \ method, and the\n   certification requirement must be indicated.\n"
- title: 2.5 Identity and Authentication
  contents:
  - '2.5 Identity and Authentication

    '
- title: 2.5.1 Identity
  contents:
  - "2.5.1 Identity\n   In OAKLEY exchanges the Initiator offers Initiator and Responder\
    \ ID's\n   -- the former is the claimed identity for the Initiator, and the\n\
    \   latter is the requested ID for the Responder.\n   If neither ID is specified,\
    \ the ID's are taken from the IP header\n   source and destination addresses.\n\
    \   If the Initiator doesn't supply a responder ID, the Responder can\n   reply\
    \ by naming any identity that the local policy allows.  The\n   Initiator can\
    \ refuse acceptance by terminating the exchange.\n   The Responder can also reply\
    \ with a different ID than the Initiator\n   suggested; the Initiator can accept\
    \ this implicitly by continuing the\n   exchange or refuse it by terminating (not\
    \ replying).\n"
- title: 2.5.2 Authentication
  contents:
  - "2.5.2 Authentication\n   The authentication of principals to one another is at\
    \ the heart of\n   any key exchange scheme.  The Internet community must decide\
    \ on a\n   scalable standard for solving this problem, and OAKLEY must make use\n\
    \   of that standard.  At the time of this writing, there is no such\n   standard,\
    \ though several are emerging.  This document attempts to\n   describe how a handful\
    \ of standards could be incorporated into\n   OAKLEY, without attempting to pick\
    \ and choose among them.\n   The following methods can appear in OAKLEY offers:\n\
    \   a. Pre-shared Keys\n      When two parties have arranged for a trusted method\
    \ of\n      distributing secret keys for their mutual authentication, they can\n\
    \      be used for authentication.  This has obvious scaling problems for\n  \
    \    large systems, but it is an acceptable interim solution for some\n      situations.\
    \  Support for pre-shared keys is REQUIRED.\n      The encryption, hash, and authentication\
    \ algorithm for use with a\n      pre-shared key must be part of the state information\
    \ distributed\n      with the key itself.\n      The pre-shared keys have a KEYID\
    \ and keying material sKEYID; the\n      KEYID is used in a pre-shared key authentication\
    \ option offer.\n      There can be more than one pre-shared key offer in a list.\n\
    \      Because the KEYID persists over different invocations of OAKLEY\n     \
    \ (after a crash, etc.), it must occupy a reserved part of the KEYID\n      space\
    \ for the two parties.  A few bits can be set aside in each\n      party's \"\
    cookie space\" to accommodate this.\n      There is no certification authority\
    \ for pre-shared keys.  When a\n      pre-shared key is used to generate an authentication\
    \ payload, the\n      certification authority is \"None\", the Authentication\
    \ Type is\n      \"Preshared\", and the payload contains\n         the KEYID,\
    \ encoded as two 64-bit quantities, and the result of\n         applying the pseudorandom\
    \ hash function to the message body\n         with the sKEYID forming the key\
    \ for the function\n   b. DNS public keys\n      Security extensions to the DNS\
    \ protocol [DNSSEC] provide a\n      convenient way to access public key information,\
    \ especially for\n      public keys associated with hosts.  RSA keys are a requirement\
    \ for\n      secure DNS implementations; extensions to allow optional DSS keys\n\
    \      are a near-term possibility.\n      DNS KEY records have associated SIG\
    \ records that are signed by a\n      zone authority, and a hierarchy of signatures\
    \ back to the root\n      server establishes a foundation for trust.  The SIG\
    \ records\n      indicate the algorithm used for forming the signature.\n    \
    \  OAKLEY implementations must support the use of DNS KEY and SIG\n      records\
    \ for authenticating with respect to IPv4 and IPv6 addresses\n      and fully\
    \ qualified domain names.  However, implementations are\n      not required to\
    \ support any particular algorithm (RSA, DSS, etc.).\n   c. RSA public keys w/o\
    \ certification authority signature PGP\n      [Zimmerman] uses public keys with\
    \ an informal method for\n      establishing trust.  The format of PGP public\
    \ keys and naming\n      methods will be described in a separate RFC.  The RSA\
    \ algorithm\n      can be used with PGP keys for either signing or encryption;\
    \ the\n      authentication option should indicate either RSA-SIG or RSA-ENC,\n\
    \      respectively.  Support for this is OPTIONAL.\n   d.1 RSA public keys w/\
    \ certificates There are various formats and\n      naming conventions for public\
    \ keys that are signed by one or more\n      certification authorities.  The Public\
    \ Key Interchange Protocol\n      discusses X.509 encodings and validation.  Support\
    \ for this is\n      OPTIONAL.\n   d.2 DSS keys w/ certificates Encoding for the\
    \ Digital Signature\n      Standard with X.509 is described in draft-ietf-ipsec-dss-cert-\n\
    \      00.txt.  Support for this is OPTIONAL; an ISAKMP Authentication\n     \
    \ Type will be assigned.\n"
- title: 2.5.3 Validating Authentication Keys
  contents:
  - "2.5.3 Validating Authentication Keys\n   The combination of the Authentication\
    \ algorithm, the Authentication\n   Authority, the Authentication Type, and a\
    \ key (usually public) define\n   how to validate the messages with respect to\
    \ the claimed identity.\n   The key information will be available either from\
    \ a pre-shared key,\n   or from some kind of certification authority.\n   Generally\
    \ the certification authority produces a certificate binding\n   the entity name\
    \ to a public key.  OAKLEY implementations must be\n   prepared to fetch and validate\
    \ certificates before using the public\n   key for OAKLEY authentication purposes.\n\
    \   The ISAKMP Authentication Payload defines the Authentication\n   Authority\
    \ field for specifying the authority that must be apparent in\n   the trust hierarchy\
    \ for authentication.\n   Once an appropriate certificate is obtained (see 2.4.3),\
    \ the\n   validation method will depend on the Authentication Type; if it is\n\
    \   PGP then the PGP signature validation routines can be called to\n   satisfy\
    \ the local web-of-trust predicates; if it is RSA with X.509\n   certificates,\
    \ the certificate must be examined to see if the\n   certification authority signature\
    \ can be validated, and if the\n   hierarchy is recognized by the local policy.\n"
- title: 2.5.4 Fetching Identity Objects
  contents:
  - "2.5.4 Fetching Identity Objects\n   In addition to interpreting the certificate\
    \ or other data structure\n   that contains an identity, users of OAKLEY must\
    \ face the task of\n   retrieving certificates that bind a public key to an identifier\
    \ and\n   also retrieving auxiliary certificates for certifying authorities or\n\
    \   co-signers (as in the PGP web of trust).\n   The ISAKMP Credentials Payload\
    \ can be used to attach useful\n   certificates to OAKLEY messages.  The Credentials\
    \ Payload is defined\n   in Appendix B.\n   Support for accessing and revoking\
    \ public key certificates via the\n   Secure DNS protocol [SECDNS] is MANDATORY\
    \ for OAKLEY implementations.\n   Other retrieval methods can be used when the\
    \ AUTH class indicates a\n   preference.\n   The Public Key Interchange Protocol\
    \ discusses a full protocol that\n   might be used with X.509 encoded certificates.\n"
- title: 2.6 Interface to Cryptographic Transforms
  contents:
  - "2.6 Interface to Cryptographic Transforms\n   The keying material computed by\
    \ the key exchange should have at least\n   90 bits of entropy, which means that\
    \ it must be at least 90 bits in\n   length.  This may be more or less than is\
    \ required for keying the\n   encryption and/or pseudorandom function transforms.\n\
    \   The transforms used with OAKLEY should have auxiliary algorithms\n   which\
    \ take a variable precision integer and turn it into keying\n   material of the\
    \ appropriate length.  For example, a DES algorithm\n   could take the low order\
    \ 56 bits, a triple DES algorithm might use\n   the following:\n             \
    \ K1 = low 56 bits of md5(0|sKEYID)\n              K2 = low 56 bits of md5(1|sKEYID)\n\
    \              K3 = low 56 bits of md5(2|sKEYID)\n   The transforms will be called\
    \ with the keying material encoded as a\n   variable precision integer, the length\
    \ of the data, and the block of\n   memory with the data.  Conversion of the keying\
    \ material to a\n   transform key is the responsibility of the transform.\n"
- title: 2.7 Retransmission, Timeouts, and Error Messages
  contents:
  - "2.7 Retransmission, Timeouts, and Error Messages\n   If a response from the Responder\
    \ is not elicited in an appropriate\n   amount of time, the message should be\
    \ retransmitted by the Initiator.\n   These retransmissions must be handled gracefully\
    \ by both parties; the\n   Responder must retain information for retransmitting\
    \ until the\n   Initiator moves to the next message in the protocol or completes\
    \ the\n   exchange.\n   Informational error messages present a problem because\
    \ they cannot be\n   authenticated using only the information present in an incomplete\n\
    \   exchange; for this reason, the parties may wish to establish a\n   default\
    \ key for OAKLEY error messages.  A possible method for\n   establishing such\
    \ a key is described in Appendix B, under the use of\n   ISA_INIT message types.\n\
    \   In the following the message type is OAKLEY Error, the KEYID supplies\n  \
    \ the H algorithm and key for authenticating the message contents; this\n   value\
    \ is carried in the Sig/Prf payload.\n   The Error payload contains the error\
    \ code and the contents of the\n   rejected message.\n                       \
    \      1                   2                   3\n         0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \        !                                                               !\n \
    \       ~                       Initiator-Cookie                        ~\n  \
    \   /  !                                                               !\n"
- title: KEYID   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  contents:
  - "KEYID   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n \
    \   \\  !                                                               !\n  \
    \      ~                       Responder-Cookie                        ~\n   \
    \     !                                                               !\n    \
    \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     \
    \   !                  Domain of Interpretation                     !\n      \
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       \
    \ ! Message Type  ! Exch  ! Vers  !          Length               !\n        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \        !                 SPI (unused)                                  !\n \
    \       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  \
    \      !                 SPI (unused)                                  !\n   \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \    !                 Error Payload                                 !\n     \
    \   ~                                                               ~\n      \
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       \
    \ !                 Sig/prf Payload\n        ~                               \
    \                                ~\n        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The error message will contain the cookies as presented in the\n   offending\
    \ message, the message type OAKLEY_ERROR, and the reason for\n   the error, followed\
    \ by the rejected message.\n   Error messages are informational only, and the\
    \ correctness of the\n   protocol does not depend on them.\n   Error reasons:\n\
    \   TIMEOUT                   exchange has taken too long, state destroyed\n \
    \  AEH_ERROR                 an unknown algorithm appears in an offer\n   GROUP_NOT_SUPPORTED\
    \       GRP named is not supported\n   EXPONENTIAL_UNACCEPTABLE  exponential too\
    \ large/small or is +-1\n   SELECTION_NOT_OFFERED     selection does not occur\
    \ in offer\n   NO_ACCEPTABLE_OFFERS      no offer meets host requirements\n  \
    \ AUTHENTICATION_FAILURE    signature or hash function fails\n   RESOURCE_EXCEEDED\
    \         too many exchanges or too much state info\n   NO_EXCHANGE_IN_PROGRESS\
    \   a reply received with no request in progress\n"
- title: '2.8 Additional Security for Privacy Keys: Private Groups'
  contents:
  - "2.8 Additional Security for Privacy Keys: Private Groups\n   If the two parties\
    \ have need to use a Diffie-Hellman key\n   determination scheme that does not\
    \ depend on the standard group\n   definitions, they have the option of establishing\
    \ a private group.\n   The authentication need not be repeated, because this stage\
    \ of the\n   protocol will be protected by a pre-existing authentication key.\
    \  As\n   an extra security measure, the two parties will establish a private\n\
    \   name for the shared keying material, so even if they use exactly the\n   same\
    \ group to communicate with other parties, the re-use will not be\n   apparent\
    \ to passive attackers.\n   Private groups have the advantage of making a widespread\
    \ passive\n   attack much harder by increasing the number of groups that would\
    \ have\n   to be exhaustively analyzed in order to recover a large number of\n\
    \   session keys.  This contrasts with the case when only one or two\n   groups\
    \ are ever used; in that case, one would expect that years and\n   years of session\
    \ keys would be compromised.\n   There are two technical challenges to face: how\
    \ can a particular user\n   create a unique and appropriate group, and how can\
    \ a second party\n   assure himself that the proposed group is reasonably secure?\n\
    \   The security of a modular exponentiation group depends on the largest\n  \
    \ prime factor of the group size.  In order to maximize this, one can\n   choose\
    \ \"strong\" or Sophie Germaine primes, P = 2Q + 1, where P and Q\n   are prime.\
    \  However, if P = kQ + 1, where k is small, then the\n   strength of the group\
    \ is still considerable.  These groups are known\n   as Schnorr subgroups, and\
    \ they can be found with much less\n   computational effort than Sophie-Germaine\
    \ primes.\n   Schnorr subgroups can also be validated efficiently by using probable\n\
    \   prime tests.\n   It is also fairly easy to find P, k, and Q such that the\
    \ largest\n   prime factor can be easily proven to be Q.\n   We estimate that\
    \ it would take about 10 minutes to find a new group\n   of about 2^1024 elements,\
    \ and this could be done once a day by a\n   scheduled process; validating a group\
    \ proposed by a remote party\n   would take perhaps a minute on a 25 MHz RISC\
    \ machine or a 66 MHz CISC\n   machine.\n   We note that validation is done only\
    \ between previously mutually\n   authenticated parties, and that a new group\
    \ definition always follows\n   and is protected by a key established using a\
    \ well-known group.\n   There are five points to keep in mind:\n      a. The description\
    \ and public identifier for the new group are\n      protected by the well-known\
    \ group.\n      b. The responder can reject the attempt to establish the new\n\
    \      group, either because he is too busy or because he cannot validate\n  \
    \    the largest prime factor as being sufficiently large.\n      c. The new modulus\
    \ and generator can be cached for long periods of\n      time; they are not security\
    \ critical and need not be associated\n      with ongoing activity.\n      d.\
    \ Generating a new g^x value periodically will be more expensive\n      if there\
    \ are many groups cached; however, the importance of\n      frequently generating\
    \ new g^x values is reduced, so the time\n      period can be lengthened correspondingly.\n\
    \      e. All modular exponentiation groups have subgroups that are\n      weaker\
    \ than the main group.  For Sophie Germain primes, if the\n      generator is\
    \ a square, then there are only two elements in the\n      subgroup: 1 and g^(-1)\
    \ (same as g^(p-1)) which we have already\n      recommended avoiding.  For Schnorr\
    \ subgroups with k not equal to\n      2, the subgroup can be avoided by checking\
    \ that the exponential is\n      not a kth root of 1 (e^k != 1 mod p).\n"
- title: 2.8.1 Defining a New Group
  contents:
  - "2.8.1 Defining a New Group\n   This section describes how to define a new group.\
    \  The description of\n   the group is hidden from eavesdroppers, and the identifier\
    \ assigned\n   to the group is unique to the two parties.  Use of the new group\
    \ for\n   Diffie-Hellman key exchanges is described in the next section.\n   The\
    \ secrecy of the description and the identifier increases the\n   difficulty of\
    \ a passive attack, because if the group descriptor is\n   not known to the attacker,\
    \ there is no straightforward and efficient\n   way to gain information about\
    \ keys calculated using the group.\n   Only the description of the new group need\
    \ be encrypted in this\n   exchange.  The hash algorithm is implied by the OAKLEY\
    \ session named\n   by the group.  The encryption is the encryption function of\
    \ the\n   OAKLEY session.\n   The descriptor of the new group is encoded in the\
    \ new group payload.\n   The nonces are encoded in the Authentication Payload.\n\
    \   Data beyond the encryption boundary is encrypted using the transform\n   named\
    \ by the KEYID.\n   The following messages use the ISAKMP Key Exchange Identifier\
    \ OAKLEY\n   New Group.\n   To define a new modular exponentiation group:\n  \
    \   Initiator                                        Responder\n     ---------\
    \                                       ----------\n      ->   KEYID,        \
    \                                ->\n           INEWGRP,\n           Desc(New\
    \ Group), Na\n           prf(sKEYID, Desc(New Group) | Na)\n      <-   KEYID,\n\
    \           INEWGRPRS,\n           Na, Nb\n           prf(sKEYID, Na | Nb | Desc(New\
    \ Group))       <-\n       ->  KEYID,\n           INEWGRPACK\n           prf(sKEYID,\
    \ Nb | Na | Desc(New Group))        ->\n   These messages are encrypted at the\
    \ encryption boundary using the key\n   indicated.  The hash value is placed in\
    \ the \"digital signature\" field\n   (see Appendix B).\n      New GRP identifier\
    \ = trunc16(Na) | trunc16(Nb)\n      (trunc16 indicates truncation to 16 bits;\
    \ the initiator and\n      responder must use nonces that have distinct upper\
    \ bits from any\n      used for current GRPID's)\n      Desc(G) is the encoding\
    \ of the descriptor for the group descriptor\n      (see Appendix A for the format\
    \ of a group descriptor)\n   The two parties must store the mapping between the\
    \ new group\n   identifier GRP and the group descriptor Desc(New Group).  They\
    \ must\n   also note the identities used for the KEYID and copy these to the\n\
    \   state for the new group.\n   Note that one could have the same group descriptor\
    \ associated with\n   several KEYID's.   Pre-calculation of g^x values may be\
    \ done based\n   only on the group descriptor, not the private group name.\n"
- title: 2.8.2 Deriving a Key Using a Private Group
  contents:
  - "2.8.2 Deriving a Key Using a Private Group\n   Once a private group has been\
    \ established, its group id can be used\n   in the key exchange messages in the\
    \ GRP position.  No changes to the\n   protocol are required.\n"
- title: '2.9 Quick Mode: New Keys From Old,'
  contents:
  - "2.9 Quick Mode: New Keys From Old,\n   When an authenticated KEYID and associated\
    \ keying material sKEYID\n   already exist, it is easy to derive additional KEYID's\
    \ and keys\n   sharing similar attributes (GRP, EHA, etc.)  using only hashing\n\
    \   functions.  The KEYID might be one that was derived in Main Mode, for\n  \
    \ example.\n   On the other hand, the authenticated key may be a manually\n  \
    \ distributed key, one that is shared by the initiator and responder\n   via some\
    \ means external to OAKLEY.  If the distribution method has\n   formed the KEYID\
    \ using appropriately unique values for the two halves\n   (CKY-I and CKY-R),\
    \ then this method is applicable.\n   In the following, the Key Exchange Identifier\
    \ is OAKLEY Quick Mode.\n   The nonces are carried in the Authentication Payload,\
    \ and the prf\n   value is carried in the Authentication Payload; the Authentication\n\
    \   Authority is \"None\" and the type is \"Pre-Shared\".\n   The protocol is:\n\
    \     Initiator                                           Responder\n     ---------\
    \                                           ---------\n     -> KEYID, INEWKRQ,\
    \ Ni, prf(sKEYID, Ni)                ->\n    <-  KEYID, INEWKRS, Nr, prf(sKEYID,\
    \ 1 | Nr | Ni)      <-\n     -> KEYID, INEWKRP, 0, prf(sKEYID,  0 | Ni | Nr) \
    \      ->\n   The New KEYID, NKEYID, is Ni | Nr\n   sNKEYID = prf(sKEYID, Ni |\
    \ Nr )\n   The identities and EHA values associated with NKEYID are the same as\n\
    \   those associated with KEYID.\n   Each party must validate the hash values\
    \ before using the new key for\n   any purpose.\n"
- title: 2.10 Defining and Using Pre-Distributed Keys
  contents:
  - "2.10 Defining and Using Pre-Distributed Keys\n   If a key and an associated key\
    \ identifier and state information have\n   been distributed manually, then the\
    \ key can be used for any OAKLEY\n   purpose.  The key must be associated with\
    \ the usual state\n   information:  ID's and EHA algorithms.\n   Local policy\
    \ dictates when a manual key can be included in the OAKLEY\n   database.  For\
    \ example, only privileged users would be permitted to\n   introduce keys associated\
    \ with privileged ID's, an unprivileged user\n   could only introduce keys associated\
    \ with her own ID.\n"
- title: 2.11 Distribution of an External Key
  contents:
  - "2.11 Distribution of an External Key\n   Once an OAKLEY session key and ancillary\
    \ algorithms are established,\n   the keying material and the \"H\" algorithm\
    \ can be used to distribute\n   an externally generated key and to assign a KEYID\
    \ to it.\n   In the following, KEYID represents an existing, authenticated OAKLEY\n\
    \   session key, and sNEWKEYID represents the externally generated keying\n  \
    \ material.\n   In the following, the Key Exchange Identifier is OAKLEY External\n\
    \   Mode.  The Key Exchange Payload contains the new key, which is\n   protected\n\
    \  Initiator                                                     Responder\n \
    \ ---------                                                     ---------\n  ->\
    \ KEYID, IEXTKEY, Ni, prf(sKEYID, Ni)                               ->\n <-  KEYID,\
    \ IEXTKEY, Nr, prf(sKEYID, 1 | Nr | Ni)                     <-\n  -> KEYID, IEXTKEY,\
    \ Kir xor sNEWKEYID*, prf(Kir, sNEWKEYID | Ni | Nr) ->\n   Kir = prf(sKEYID, Ni\
    \ | Nr)\n   * this field is carried in the Key Exchange Payload.\n   Each party\
    \ must validate the hash values using the \"H\" function in\n   the KEYID state\
    \ before changing any key state information.\n   The new key is recovered by the\
    \ Responder by calculating the xor of\n   the field in the Authentication Payload\
    \ with the Kir value.\n   The new key identifier, naming the keying material sNEWKEYID,\
    \ is\n   prf(sKEYID, 1 | Ni | Nr).\n   Note that this exchange does not require\
    \ encryption.  Hugo Krawcyzk\n   suggested the method and noted its advantage.\n"
- title: 2.11.1 Cryptographic Strength Considerations
  contents:
  - "2.11.1 Cryptographic Strength Considerations\n   The strength of the key used\
    \ to distribute the external key must be\n   at least equal to the strength of\
    \ the external key.  Generally, this\n   means that the length of the sKEYID material\
    \ must be greater than or\n   equal to the length of the sNEWKEYID material.\n\
    \   The derivation of the external key, its strength or intended use are\n   not\
    \ addressed by this protocol; the parties using the key must have\n   some other\
    \ method for determining these properties.\n   As of early 1996, it appears that\
    \ for 90 bits of cryptographic\n   strength, one should use a modular exponentiation\
    \ group modulus of\n   2000 bits.  For 128 bits of strength, a 3000 bit modulus\
    \ is required.\n"
- title: 3. Specifying and Deriving Security Associations
  contents:
  - "3. Specifying and Deriving Security Associations\n   When a security association\
    \ is defined, only the KEYID need be given.\n   The responder should be able to\
    \ look up the state associated with the\n   KEYID value and find the appropriate\
    \ keying material, sKEYID.\n   Deriving keys for use with IPSEC protocols such\
    \ as ESP or AH is a\n   subject covered in the ISAKMP/Oakley Resolution document.\
    \  That\n   document also describes how to negotiate acceptable parameter sets\n\
    \   and identifiers for ESP and AH, and how to exactly calculate the\n   keying\
    \ material for each instance of the protocols.  Because the\n   basic keying material\
    \ defined here (g^xy) may be used to derive keys\n   for several instances of\
    \ ESP and AH, the exact mechanics of using\n   one-way functions to turn g^xy\
    \ into several unique keys is essential\n   to correct usage.\n"
- title: 4. ISAKMP Compatibility
  contents:
  - "4. ISAKMP Compatibility\n   OAKLEY uses ISAKMP header and payload formats, as\
    \ described in the\n   text and in Appendix B.  There are particular noteworthy\
    \ extensions\n   beyond the version 4 draft.\n"
- title: 4.1 Authentication with Existing Keys
  contents:
  - "4.1 Authentication with Existing Keys\n   In the case that two parties do not\
    \ have suitable public key\n   mechanisms in place for authenticating each other,\
    \ they can use keys\n   that were distributed manually.  After establishment of\
    \ these keys\n   and their associated state in OAKLEY, they can be used for\n\
    \   authentication modes that depend on signatures, e.g. Aggressive Mode.\n  \
    \ When an existing key is to appear in an offer list, it should be\n   indicated\
    \ with an Authentication Algorithm of ISAKMP_EXISTING.  This\n   value will be\
    \ assigned in the ISAKMP RFC.\n   When the authentication method is ISAKMP_EXISTING,\
    \ the authentication\n   authority will have the value ISAKMP_AUTH_EXISTING; the\
    \ value for\n   this field must not conflict with any authentication authority\n\
    \   registered with IANA and is defined in the ISAKMP RFC.\n   The authentication\
    \ payload will have two parts:\n       the KEYID for the pre-existing key\n  \
    \     the identifier for the party to be authenticated by the pre-\n       existing\
    \ key.\n   The pseudo-random function \"H\" in the state information for that\n\
    \   KEYID will be the signature algorithm, and it will use the keying\n   material\
    \ for that key (sKEYID) when generating or checking the\n   validity of message\
    \ data.\n   E.g. if the existing key has an KEYID denoted by KID and 128 bits\
    \ of\n   keying material denoted by sKID and \"H\" algorithm a transform named\n\
    \   HMAC, then to generate a \"signature\" for a data block, the output of\n \
    \  HMAC(sKID, data) will be the corresponding signature payload.\n   The KEYID\
    \ state will have the identities of the local and remote\n   parties for which\
    \ the KEYID was assigned; it is up to the local\n   policy implementation to decide\
    \ when it is appropriate to use such a\n   key for authenticating other parties.\
    \  For example, a key distributed\n   for use between two Internet hosts A and\
    \ B may be suitable for\n   authenticating all identities of the form \"alice@A\"\
    \ and \"bob@B\".\n"
- title: 4.2 Third Party Authentication
  contents:
  - "4.2 Third Party Authentication\n   A local security policy might restrict key\
    \ negotiation to trusted\n   parties.  For example, two OAKLEY daemons running\
    \ with equal\n   sensitivity labels on two machines might wish to be the sole\
    \ arbiters\n   of key exchanges between users with that same sensitivity label.\
    \  In\n   this case, some way of authenticating the provenance of key exchange\n\
    \   requests is needed.  I.e., the identities of the two daemons should\n   be\
    \ bound to a key, and that key will be used to form a \"signature\"\n   for the\
    \ key exchange messages.\n   The Signature Payload, in Appendix B, is for this\
    \ purpose.  This\n   payload names a KEYID that is in existence before the start\
    \ of the\n   current exchange.  The \"H\" transform for that KEYID is used to\n\
    \   calculate an integrity/authentication value for all payloads\n   preceding\
    \ the signature.\n   Local policy can dictate which KEYID's are appropriate for\
    \ signing\n   further exchanges.\n"
- title: 4.3 New Group Mode
  contents:
  - "4.3 New Group Mode\n   OAKLEY uses a new KEI for the exchange that defines a\
    \ new group.\n"
- title: 5. Security Implementation Notes
  contents:
  - "5. Security Implementation Notes\n   Timing attacks that are capable of recovering\
    \ the exponent value used\n   in Diffie-Hellman calculations have been described\
    \ by Paul Kocher\n   [Kocher].  In order to nullify the attack, implementors must\
    \ take\n   pains to obscure the sequence of operations involved in carrying out\n\
    \   modular exponentiations.\n   A \"blinding factor\" can accomplish this goal.\
    \  A group element, r, is\n   chosen at random.  When an exponent x is chosen,\
    \ the value r^(-x) is\n   also calculated.  Then, when calculating (g^y)^x, the\
    \ implementation\n   will calculate this sequence:\n           A = (rg^y)\n  \
    \         B = A^x = (rg^y)^x = (r^x)(g^(xy))\n           C = B*r^(-x) = (r^x)(r^-(x))(g^(xy))\
    \ = g^(xy)\n   The blinding factor is only necessary if the exponent x is used\
    \ more\n   than 100 times (estimate by Richard Schroeppel).\n"
- title: 6. OAKLEY Parsing and State Machine
  contents:
  - "6. OAKLEY Parsing and State Machine\n   There are many pathways through OAKLEY,\
    \ but they follow a left-to-\n   right parsing pattern of the message fields.\n\
    \   The initiator decides on an initial message in the following order:\n    \
    \  1. Offer a cookie.  This is not necessary but it helps with\n      aggressive\
    \ exchanges.\n      2. Pick a group.  The choices are the well-known groups or\
    \ any\n      private groups that may have been negotiated.  The very first\n \
    \     exchange between two Oakley daemons with no common state must\n      involve\
    \ a well-known group (0, meaning no group, is a well-known\n      group).  Note\
    \ that the group identifier, not the group descriptor,\n      is used in the message.\n\
    \      If a non-null group will be used, it must be included with the\n      first\
    \ message specifying EHAO.  It need not be specified until\n      then.\n    \
    \  3. If PFS will be used, pick an exponent x and present g^x.\n      4. Offer\
    \ Encryption, Hash, and Authentication lists.\n      5. Use PFS for hiding the\
    \ identities\n      If identity hiding is not used, then the initiator has this\n\
    \      option:\n      6. Name the identities and include authentication information\n\
    \   The information in the authentication section depends on the first\n   authentication\
    \ offer.  In this aggressive exchange, the Initiator\n   hopes that the Responder\
    \ will accept all the offered information and\n   the first authentication method.\
    \  The authentication method\n   determines the authentication payload as follows:\n\
    \      1. Signing method.  The signature will be applied to all the\n      offered\
    \ information.\n      2. A public key encryption method.  The algorithm will be\
    \ used to\n      encrypt a nonce in the public key of the requested Responder\n\
    \      identity.  There are two cases possible, depending on whether or\n    \
    \  not identity hiding is used:\n         a. No identity hiding.  The ID's will\
    \ appear as plaintext.\n         b. Identity hiding.  A well-known ID, call it\
    \ R', will appear\n         as plaintext in the authentication payload.  It will\
    \ be\n         followed by two ID's and a nonce; these will be encrypted using\n\
    \         the public key for R'.\n      3. A pre-existing key method.  The pre-existing\
    \ key will be used\n      to encrypt a nonce.  If identity hiding is used, the\
    \ ID's will be\n      encrypted in place in the payload, using the \"E\" algorithm\n\
    \      associated with the pre-existing key.\n   The Responder can accept all,\
    \ part or none of the initial message.\n   The Responder accepts as many of the\
    \ fields as he wishes, using the\n   same decision order as the initiator.  At\
    \ any step he can stop,\n   implicitly rejecting further fields (which will have\
    \ null values in\n   his response message).  The minimum response is a cookie\
    \ and the GRP.\n      1. Accept cookie.  The Responder may elect to record no\
    \ state\n      information until the Initiator successfully replies with a cookie\n\
    \      chosen by the responder.  If so, the Responder replies with a\n      cookie,\
    \ the GRP, and no other information.\n      2. Accept GRP.  If the group is not\
    \ acceptable, the Responder will\n      not reply.  The Responder may send an\
    \ error message indicating the\n      the group is not acceptable (modulus too\
    \ small, unknown\n      identifier, etc.)  Note that \"no group\" has two meanings\
    \ during\n      the protocol: it may mean the group is not yet specified, or it\n\
    \      may mean that no group will be used (and thus PFS is not\n      possible).\n\
    \      3. Accept the g^x value.  The Responder indicates his acceptance\n    \
    \  of the g^x value by including his own g^y value in his reply.  He\n      can\
    \ postpone this by ignoring g^x and putting a zero length g^y\n      value in\
    \ his reply.  He can also reject the g^x value with an\n      error message.\n\
    \      4. Accept one element from each of the EHA lists.  The acceptance\n   \
    \   is indicated by a non-zero proposal.\n      5. If PFS for identity hiding\
    \ is requested, then no further data\n      will follow.\n      6. If the authentication\
    \ payload is present, and if the first item\n      in the offered authentication\
    \ class is acceptable, then the\n      Responder must validate/decrypt the information\
    \ in the\n      authentication payload and signature payload, if present. The\n\
    \      Responder should choose a nonce and reply using the same\n      authentication/hash\
    \ algorithm as the Initiator used.\n   The Initiator notes which information the\
    \ Responder has accepted,\n   validates/decrypts any signed, hashed, or encrypted\
    \ fields, and if\n   the data is acceptable, replies in accordance to the EHA\
    \ methods\n   selected by the Responder.  The Initiator replies are distinguished\n\
    \   from his initial message by the presence of the non-zero value for\n   the\
    \ Responder cookie.\n   The output of the signature or prf function will be encoded\
    \ as a\n   variable precision integer as described in Appendix C.  The KEYID\n\
    \   will indicate KEYID that names keying material and the Hash or\n   Signature\
    \ function.\n"
- title: 7. The Credential Payload
  contents:
  - "7. The Credential Payload\n   Useful certificates with public key information\
    \ can be attached to\n   OAKLEY messages using Credential Payloads as defined\
    \ in the ISAKMP\n   document.  It should be noted that the identity protection\
    \ option\n   applies to the credentials as well as the identities.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   The focus of this document is security; hence security\
    \ considerations\n   permeate this memo.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Hilarie K. Orman\n   Department of Computer Science\n  \
    \ University of Arizona\n   EMail: ho@darpa.mil\n"
- title: APPENDIX A Group Descriptors
  contents:
  - "APPENDIX A Group Descriptors\n   Three distinct group representations can be\
    \ used with OAKLEY.  Each\n   group is defined by its group operation and the\
    \ kind of underlying\n   field used to represent group elements.  The three types\
    \ are modular\n   exponentiation groups (named MODP herein), elliptic curve groups\
    \ over\n   the field GF[2^N] (named EC2N herein), and elliptic curve groups over\n\
    \   GF[P] (named ECP herein) For each representation, many distinct\n   realizations\
    \ are possible, depending on parameter selection.\n   With a few exceptions, all\
    \ the parameters are transmitted as if they\n   were non-negative multi-precision\
    \ integers, using the format defined\n   in this appendix (note, this is distinct\
    \ from the encoding in\n   Appendix C).  Every multi-precision integer has a prefixed\
    \ length\n   field, even where this information is redundant.\n   For the group\
    \ type EC2N, the parameters are more properly thought of\n   as very long bit\
    \ fields, but they are represented as multi-precision\n   integers, (with length\
    \ fields, and right-justified).  This is the\n   natural encoding.\n   MODP means\
    \ the classical modular exponentiation group, where the\n   operation is to calculate\
    \ G^X (mod P).  The group is defined by the\n   numeric parameters P and G.  P\
    \ must be a prime.  G is often 2, but\n   may be a larger number.  2 <= G <= P-2.\n\
    \   ECP is an elliptic curve group, modulo a prime number P.  The\n   defining\
    \ equation for this kind of group is\n    Y^2 = X^3 + AX + B The group operation\
    \ is taking a multiple of an\n   elliptic-curve point.  The group is defined by\
    \ 5 numeric parameters:\n   The prime P, two curve parameters A and B, and a generator\
    \ (X,Y).\n   A,B,X,Y are all interpreted mod P, and must be (non-negative)\n \
    \  integers less than P.  They must satisfy the defining equation,\n   modulo\
    \ P.\n   EC2N is an elliptic curve group, over the finite field F[2^N].  The\n\
    \   defining equation for this kind of group is\n    Y^2 + XY = X^3 + AX^2 + B\
    \ (This equation differs slightly from the\n   mod P case:  it has an XY term,\
    \ and an AX^2 term instead of an AX\n   term.)\n   We must specify the field representation,\
    \ and then the elliptic\n   curve.  The field is specified by giving an irreducible\
    \ polynomial\n   (mod 2) of degree N.  This polynomial is represented as an integer\
    \ of\n   size between 2^N and 2^(N+1), as if the defining polynomial were\n  \
    \ evaluated at the value U=2.\n   For example, the field defined by the polynomial\
    \ U^155 + U^62 + 1 is\n   represented by the integer 2^155 + 2^62 + 1.  The group\
    \ is defined by\n   4 more parameters, A,B,X,Y.  These parameters are elements\
    \ of the\n   field GF[2^N], and can be thought of as polynomials of degree < N,\n\
    \   with (mod 2) coefficients.  They fit in N-bit fields, and are\n   represented\
    \ as integers < 2^N, as if the polynomial were evaluated at\n   U=2.  For example,\
    \ the field element U^2 + 1 would be represented by\n   the integer 2^2+1, which\
    \ is 5.  The two parameters A and B define the\n   curve.  A is frequently 0.\
    \  B must not be 0.  The parameters X and Y\n   select a point on the curve. \
    \ The parameters A,B,X,Y must satisfy the\n   defining equation, modulo the defining\
    \ polynomial, and mod 2.\n   Group descriptor formats:\n   Type of group: A two-byte\
    \ field,\n           assigned values for the types \"MODP\", \"ECP\", \"EC2N\"\
    \n           will be defined (see ISAKMP-04).\n   Size of a field element, in\
    \ bits.  This is either Ceiling(log2 P)\n      or the degree of the irreducible\
    \ polynomial: a 32-bit integer.\n   The prime P or the irreducible field polynomial:\
    \ a multi-precision\n      integer.\n   The generator: 1 or 2 values, multi-precision\
    \ integers.\n   EC only:  The parameters of the curve:  2 values, multi-precision\n\
    \      integers.\n   The following parameters are Optional (each of these may\
    \ appear\n   independently):\n     a value of 0 may be used as a place-holder\
    \ to represent an unspecified\n     parameter; any number of the parameters may\
    \ be sent, from 0 to 3.\n   The largest prime factor: the encoded value that is\
    \ the LPF of the\n     group size, a multi-precision integer.\n   EC only:  The\
    \ order of the group: multi-precision integer.\n     (The group size for MODP\
    \ is always P-1.)\n   Strength of group: 32-bit integer.\n     The strength of\
    \ the group is approximately the number of key-bits\n     protected.\n       \
    \ It is determined by the log2 of the effort to attack the group.\n        It\
    \ may change as we learn more about cryptography.\n   This is a generic example\
    \ for a \"classic\" modular exponentiation group:\n     Group type: \"MODP\"\n\
    \     Size of a field element in bits:  Log2 (P) rounded *up*.  A 32bit\n    \
    \    integer.\n     Defining prime P: a multi-precision integer.\n     Generator\
    \ G: a multi-precision integer.  2 <= G <= P-2.\n     <optional>\n     Largest\
    \ prime factor of P-1: the multi-precision integer Q\n     Strength of group:\
    \ a 32-bit integer.  We will specify a formula\n       for calculating this number\
    \ (TBD).\n   This is a generic example for an elliptic curve group, mod P:\n \
    \     Group type: \"ECP\"\n      Size of a field element in bits:  Log2 (P) rounded\
    \ *up*,\n          a 32 bit integer.\n      Defining prime P: a multi-precision\
    \ integer.\n      Generator (X,Y): 2 multi-precision integers, each < P.\n   \
    \   Parameters of the curve A,B: 2 multi-precision integers, each < P.\n     \
    \ <optional>\n      Largest prime factor of the group order: a multi-precision\
    \ integer.\n      Order of the group: a multi-precision integer.\n      Strength\
    \ of group:  a 32-bit integer.  Formula TBD.\n   This is a specific example for\
    \ an elliptic curve group:\n      Group type: \"EC2N\"\n      Degree of the irreducible\
    \ polynomial: 155\n      Irreducible polynomial:  U^155 + U^62 + 1, represented\
    \ as the\n        multi-precision integer 2^155 + 2^62 + 1.\n      Generator (X,Y)\
    \ : represented as 2 multi-precision integers, each\n        < 2^155.\n      For\
    \ our present curve, these are (decimal) 123 and 456.  Each is\n        represented\
    \ as a multi-precision integer.\n      Parameters of the curve A,B: represented\
    \ as 2 multi-precision\n        integers,  each < 2^155.\n      For our present\
    \ curve these are 0 and (decimal) 471951, represented\n        as two multi-precision\
    \ integers.\n      <optional>\n      Largest prime factor of the group order:\n\
    \       3805993847215893016155463826195386266397436443,\n      represented as\
    \ a multi-precision integer.\n      The order of the group:\n        45671926166590716193865565914344635196769237316\n\
    \      represented as a multi-precision integer.\n      Strength of group: 76,\
    \ represented as a 32-bit integer.\n   The variable precision integer encoding\
    \ for group descriptor fields\n   is the following.  This is a slight variation\
    \ on the format defined\n   in Appendix C in that a fixed 16-bit value is used\
    \ first, and the\n   length is limited to 16 bits.  However, the interpretation\
    \ is\n   otherwise identical.\n                             1                \
    \   2                   3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    !   Fixed value (TBD)           !             Length            !\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    .                                                               .\n    .\
    \                  Integer                                      .\n    .     \
    \                                                          .\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The format of a group descriptor is:\n                             1     \
    \              2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   !1!1!     Group Description     !             MODP              !\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   !1!0!        Field Size         !            Length             !\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   !                              MPI                              !\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   !1!0!          Prime            !            Length             !\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   !                              MPI                              !\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   !1!0!       Generator1          !            Length             !\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   !                              MPI                              !\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   !1!0!       Generator2          !            Length             !\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   !                              MPI                              !\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   !1!0!         Curve-p1          !            Length             !\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   !                              MPI                              !\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   !1!0!         Curve-p2          !            Length             !\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   !                              MPI                              !\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   !1!0!   Largest Prime Factor    !            Length             !\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   !                              MPI                              !\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   !1!0!      Order of Group       !            Length             !\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   !                              MPI                              !\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   !0!0!    Strength of Group      !            Length             !\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   !                              MPI                              !\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: APPENDIX B  Message formats
  contents:
  - "APPENDIX B  Message formats\n   The encodings of Oakley messages into ISAKMP\
    \ payloads is deferred to\n   the ISAKMP/Oakley Resolution document.\n"
- title: APPENDIX C Encoding a variable precision integer.
  contents:
  - "APPENDIX C Encoding a variable precision integer.\n   Variable precision integers\
    \ will be encoded as a 32-bit length field\n   followed by one or more 32-bit\
    \ quantities containing the\n   representation of the integer, aligned with the\
    \ most significant bit\n   in the first 32-bit item.\n                       \
    \    1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      !    length                                                     !\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      !\
    \    first value word (most significant bits)                   !\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      !                                                               !\n   \
    \   ~     additional value words                                    ~\n      !\
    \                                                               !\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   An example of such an encoding is given below, for a number with 51\n   bits\
    \ of significance.  The length field indicates that 2 32-bit\n   quantities follow.\
    \  The most significant non-zero bit of the number\n   is in bit 13 of the first\
    \ 32-bit quantity, the low order bits are in\n   the second 32-bit quantity.\n\
    \                            1                   2                   3\n     \
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       !                                                            1 0!\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   !0 0 0 0 0 0 0 0 0 0 0 0 0 1 x x x x x x x x x x x x x x x x x x!\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       !x\
    \ x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x!\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: APPENDIX D Cryptographic strengths
  contents:
  - "APPENDIX D Cryptographic strengths\n   The Diffie-Hellman algorithm is used to\
    \ compute keys that will be\n   used with symmetric algorithms.  It should be\
    \ no easier to break the\n   Diffie-Hellman computation than it is to do an exhaustive\
    \ search over\n   the symmetric key space.  A recent recommendation by an group\
    \ of\n   cryptographers [Blaze] has recommended a symmetric key size of 75\n \
    \  bits for a practical level of security.  For 20 year security, they\n   recommend\
    \ 90 bits.\n   Based on that report, a conservative strategy for OAKLEY users\
    \ would\n   be to ensure that their Diffie-Hellman computations were as secure\
    \ as\n   at least a 90-bit key space.  In order to accomplish this for modular\n\
    \   exponentiation groups, the size of the largest prime factor of the\n   modulus\
    \ should be at least 180 bits, and the size of the modulus\n   should be at least\
    \ 1400 bits.  For elliptic curve groups, the LPF\n   should be at least 180 bits.\n\
    \   If long-term secrecy of the encryption key is not an issue, then the\n   following\
    \ parameters may be used for the modular exponentiation\n   group: 150 bits for\
    \ the LPF, 980 bits for the modulus size.\n   The modulus size alone does not\
    \ determine the strength of the\n   Diffie-Hellman calculation; the size of the\
    \ exponent used in\n   computing powers within the group is also important.  The\
    \ size of the\n   exponent in bits should be at least twice the size of any symmetric\n\
    \   key that will be derived from it.  We recommend that ISAKMP\n   implementors\
    \ use at least 180 bits of exponent (twice the size of a\n   20-year symmetric\
    \ key).\n   The mathematical justification for these estimates can be found in\n\
    \   texts that estimate the effort for solving the discrete log problem,\n   a\
    \ task that is strongly related to the efficiency of using the Number\n   Field\
    \ Sieve for factoring large integers.  Readers are referred to\n   [Stinson] and\
    \ [Schneier].\n"
- title: APPENDIX E The Well-Known Groups
  contents:
  - "APPENDIX E The Well-Known Groups\n   The group identifiers:\n      0   No group\
    \ (used as a placeholder and for non-DH exchanges)\n      1   A modular exponentiation\
    \ group with a 768 bit modulus\n      2   A modular exponentiation group with\
    \ a 1024 bit modulus\n      3   A modular exponentiation group with a 1536 bit\
    \ modulus (TBD)\n      4   An elliptic curve group over GF[2^155]\n      5   An\
    \ elliptic curve group over GF[2^185]\n      values 2^31 and higher are used for\
    \ private group identifiers\n   Richard Schroeppel performed all the mathematical\
    \ and computational\n   work for this appendix.\n   Classical Diffie-Hellman Modular\
    \ Exponentiation Groups\n   The primes for groups 1 and 2 were selected to have\
    \ certain\n   properties.  The high order 64 bits are forced to 1.  This helps\
    \ the\n   classical remainder algorithm, because the trial quotient digit can\n\
    \   always be taken as the high order word of the dividend, possibly +1.\n   The\
    \ low order 64 bits are forced to 1.  This helps the Montgomery-\n   style remainder\
    \ algorithms, because the multiplier digit can always\n   be taken to be the low\
    \ order word of the dividend.  The middle bits\n   are taken from the binary expansion\
    \ of pi.  This guarantees that they\n   are effectively random, while avoiding\
    \ any suspicion that the primes\n   have secretly been selected to be weak.\n\
    \   Because both primes are based on pi, there is a large section of\n   overlap\
    \ in the hexadecimal representations of the two primes.  The\n   primes are chosen\
    \ to be Sophie Germain primes (i.e., (P-1)/2 is also\n   prime), to have the maximum\
    \ strength against the square-root attack\n   on the discrete logarithm problem.\n\
    \   The starting trial numbers were repeatedly incremented by 2^64 until\n   suitable\
    \ primes were located.\n   Because these two primes are congruent to 7 (mod 8),\
    \ 2 is a quadratic\n   residue of each prime.  All powers of 2 will also be quadratic\n\
    \   residues.  This prevents an opponent from learning the low order bit\n   of\
    \ the Diffie-Hellman exponent (AKA the subgroup confinement\n   problem).  Using\
    \ 2 as a generator is efficient for some modular\n   exponentiation algorithms.\
    \  [Note that 2 is technically not a\n   generator in the number theory sense,\
    \ because it omits half of the\n   possible residues mod P.  From a cryptographic\
    \ viewpoint, this is a\n   virtue.]\n"
- title: 'E.1. Well-Known Group 1:  A 768 bit prime'
  contents:
  - "E.1. Well-Known Group 1:  A 768 bit prime\n   The prime is 2^768 - 2^704 - 1\
    \ + 2^64 * { [2^638 pi] + 149686 }.  Its\n   decimal value is\n          155251809230070893513091813125848175563133404943451431320235\n\
    \          119490296623994910210725866945387659164244291000768028886422\n    \
    \      915080371891804634263272761303128298374438082089019628850917\n        \
    \  0691316593175367469551763119843371637221007210577919\n   This has been rigorously\
    \ verified as a prime.\n   The representation of the group in OAKLEY is\n    \
    \  Type of group:                    \"MODP\"\n      Size of field element (bits):\
    \      768\n      Prime modulus:                     21 (decimal)\n         Length\
    \ (32 bit words):          24\n         Data (hex):\n            FFFFFFFF FFFFFFFF\
    \ C90FDAA2 2168C234 C4C6628B 80DC1CD1\n            29024E08 8A67CC74 020BBEA6\
    \ 3B139B22 514A0879 8E3404DD\n            EF9519B3 CD3A431B 302B0A6D F25F1437\
    \ 4FE1356D 6D51C245\n            E485B576 625E7EC6 F44C42E9 A63A3620 FFFFFFFF\
    \ FFFFFFFF\n      Generator:                         22 (decimal)\n         Length\
    \ (32 bit words):          1\n         Data (hex):                     2\n   \
    \   Optional Parameters:\n      Group order largest prime factor:  24 (decimal)\n\
    \         Length (32 bit words):          24\n         Data (hex):\n         \
    \   7FFFFFFF FFFFFFFF E487ED51 10B4611A 62633145 C06E0E68\n            94812704\
    \ 4533E63A 0105DF53 1D89CD91 28A5043C C71A026E\n            F7CA8CD9 E69D218D\
    \ 98158536 F92F8A1B A7F09AB6 B6A8E122\n            F242DABB 312F3F63 7A262174\
    \ D31D1B10 7FFFFFFF FFFFFFFF\n      Strength of group:                 26 (decimal)\n\
    \         Length (32 bit words)            1\n         Data (hex):\n         \
    \   00000042\n"
- title: 'E.2. Well-Known Group 2:  A 1024 bit prime'
  contents:
  - "E.2. Well-Known Group 2:  A 1024 bit prime\n   The prime is 2^1024 - 2^960 -\
    \ 1 + 2^64 * { [2^894 pi] + 129093 }.\n   Its decimal value is\n         179769313486231590770839156793787453197860296048756011706444\n\
    \         423684197180216158519368947833795864925541502180565485980503\n     \
    \    646440548199239100050792877003355816639229553136239076508735\n         759914822574862575007425302077447712589550957937778424442426\n\
    \         617334727629299387668709205606050270810842907692932019128194\n     \
    \    467627007\n   The primality of the number has been rigorously proven.\n \
    \  The representation of the group in OAKLEY is\n      Type of group:        \
    \            \"MODP\"\n      Size of field element (bits):      1024\n      Prime\
    \ modulus:                     21 (decimal)\n         Length (32 bit words): \
    \         32\n         Data (hex):\n            FFFFFFFF FFFFFFFF C90FDAA2 2168C234\
    \ C4C6628B 80DC1CD1\n            29024E08 8A67CC74 020BBEA6 3B139B22 514A0879\
    \ 8E3404DD\n            EF9519B3 CD3A431B 302B0A6D F25F1437 4FE1356D 6D51C245\n\
    \            E485B576 625E7EC6 F44C42E9 A637ED6B 0BFF5CB6 F406B7ED\n         \
    \   EE386BFB 5A899FA5 AE9F2411 7C4B1FE6 49286651 ECE65381\n            FFFFFFFF\
    \ FFFFFFFF\n      Generator:                         22 (decimal)\n         Length\
    \ (32 bit words):          1\n         Data (hex):                     2\n   \
    \   Optional Parameters:\n      Group order largest prime factor:  24 (decimal)\n\
    \         Length (32 bit words):          32\n         Data (hex):\n         \
    \   7FFFFFFF FFFFFFFF E487ED51 10B4611A 62633145 C06E0E68\n            94812704\
    \ 4533E63A 0105DF53 1D89CD91 28A5043C C71A026E\n            F7CA8CD9 E69D218D\
    \ 98158536 F92F8A1B A7F09AB6 B6A8E122\n            F242DABB 312F3F63 7A262174\
    \ D31BF6B5 85FFAE5B 7A035BF6\n            F71C35FD AD44CFD2 D74F9208 BE258FF3\
    \ 24943328 F67329C0\n            FFFFFFFF FFFFFFFF\n      Strength of group: \
    \                26 (decimal)\n         Length (32 bit words)            1\n \
    \        Data (hex):\n            0000004D\n"
- title: 'E.3. Well-Known Group 3:  An Elliptic Curve Group Definition'
  contents:
  - "E.3. Well-Known Group 3:  An Elliptic Curve Group Definition\n   The curve is\
    \ based on the Galois field GF[2^155] with 2^155 field\n   elements.  The irreducible\
    \ polynomial for the field is u^155 + u^62 +\n   1.  The equation for the elliptic\
    \ curve is\n   Y^2 + X Y = X^3 + A X + B\n   X, Y, A, B are elements of the field.\n\
    \   For the curve specified, A = 0 and\n    B = u^18 + u^17 + u^16 + u^13 + u^12\
    \ + u^9 + u^8 + u^7 + u^3 + u^2 +\n   u + 1.\n   B is represented in binary as\
    \ the bit string 1110011001110001111; in\n   decimal this is 471951, and in hex\
    \ 7338F.\n   The generator is a point (X,Y) on the curve (satisfying the curve\n\
    \   equation, mod 2 and modulo the field polynomial).\n   X = u^6 + u^5 + u^4\
    \ + u^3 + u + 1\n   and\n   Y = u^8 + u^7 + u^6 + u^3.\n   The binary bit strings\
    \ for X and Y are 1111011 and 111001000; in\n   decimal they are 123 and 456.\n\
    \   The group order (the number of curve points) is\n        45671926166590716193865565914344635196769237316\n\
    \   which is 12 times the prime\n         3805993847215893016155463826195386266397436443.\n\
    \   (This prime has been rigorously proven.)  The generating point (X,Y)\n   has\
    \ order 4 times the prime; the generator is the triple of some\n   curve point.\n\
    \   OAKLEY representation of this group:\n      Type of group:               \
    \     \"EC2N\"\n      Size of field element (bits):      155\n      Irreducible\
    \ field polynomial:      21 (decimal)\n         Length (32 bit words):       \
    \   5\n         Data (hex):\n            08000000 00000000 00000000 40000000 00000001\n\
    \      Generator:\n         X coordinate:                   22 (decimal)\n   \
    \          Length (32 bit words):      1\n             Data (hex):           \
    \      7B\n         Y coordinate:                   22 (decimal)\n           \
    \  Length (32 bit words):      1\n             Data (hex):                 1C8\n\
    \      Elliptic curve parameters:\n         A parameter:                    23\
    \ (decimal)\n             Length (32 bit words):      1\n             Data (hex):\
    \                 0\n         B parameter:                    23 (decimal)\n \
    \            Length (32 bit words):      1\n             Data (hex):         \
    \        7338F\n      Optional Parameters:\n      Group order largest prime factor:\
    \  24 (decimal)\n         Length (32 bit words):          5\n         Data (hex):\n\
    \            00AAAAAA AAAAAAAA AAAAB1FC F1E206F4 21A3EA1B\n      Group order:\
    \                       25 (decimal)\n         Length (32 bit words):        \
    \  5\n         Data (hex):\n            08000000 00000000 000057DB 56985371 93AEF944\n\
    \      Strength of group:                 26 (decimal)\n         Length (32 bit\
    \ words)            1\n         Data (hex):\n            0000004C\n"
- title: 'E.4. Well-Known Group 4:  A Large Elliptic Curve Group Definition'
  contents:
  - "E.4. Well-Known Group 4:  A Large Elliptic Curve Group Definition\n   This curve\
    \ is based on the Galois field GF[2^185] with 2^185 field\n   elements.  The irreducible\
    \ polynomial for the field is\n   u^185 + u^69 + 1.\n   The equation for the elliptic\
    \ curve is\n   Y^2 + X Y = X^3 + A X + B.\n   X, Y, A, B are elements of the field.\
    \  For the curve specified, A = 0\n   and\n   B = u^12 + u^11 + u^10 + u^9 + u^7\
    \ + u^6 + u^5 + u^3 + 1.\n   B is represented in binary as the bit string 1111011101001;\
    \ in\n   decimal this is 7913, and in hex 1EE9.\n   The generator is a point (X,Y)\
    \ on the curve (satisfying the curve\n   equation, mod 2 and modulo the field\
    \ polynomial);\n   X = u^4 + u^3 and Y = u^3 + u^2 + 1.\n   The binary bit strings\
    \ for X and Y are 11000 and 1101; in decimal\n   they are 24 and 13.  The group\
    \ order (the number of curve points) is\n        49039857307708443467467104857652682248052385001045053116,\n\
    \   which is 4 times the prime\n        12259964326927110866866776214413170562013096250261263279.\n\
    \   (This prime has been rigorously proven.)\n   The generating point (X,Y) has\
    \ order 2 times the prime; the generator\n   is the double of some curve point.\n\
    \   OAKLEY representation of this group:\n      Type of group:               \
    \     \"EC2N\"\n      Size of field element (bits):      185\n      Irreducible\
    \ field polynomial:      21 (decimal)\n         Length (32 bit words):       \
    \   6\n         Data (hex):\n            02000000 00000000 00000000 00000020 00000000\
    \ 00000001\n      Generator:\n         X coordinate:                   22 (decimal)\n\
    \             Length (32 bit words):      1\n             Data (hex):        \
    \         18\n         Y coordinate:                   22 (decimal)\n        \
    \     Length (32 bit words):      1\n             Data (hex):                \
    \ D\n      Elliptic curve parameters:\n         A parameter:                 \
    \   23 (decimal)\n             Length (32 bit words):      1\n             Data\
    \ (hex):                 0\n         B parameter:                    23 (decimal)\n\
    \             Length (32 bit words):      1\n             Data (hex):        \
    \         1EE9\n      Optional parameters:\n      Group order largest prime factor:\
    \  24 (decimal)\n         Length (32 bit words):          6\n         Data (hex):\n\
    \            007FFFFF FFFFFFFF FFFFFFFF F6FCBE22 6DCF9210 5D7E53AF\n      Group\
    \ order:                       25 (decimal)\n         Length (32 bit words): \
    \         6\n         Data (hex):\n            01FFFFFF FFFFFFFF FFFFFFFF DBF2F889\
    \ B73E4841 75F94EBC\n      Strength of group:                 26 (decimal)\n \
    \        Length (32 bit words)            1\n         Data (hex):\n          \
    \  0000005B\n"
- title: 'E.5. Well-Known Group 5:  A 1536 bit prime'
  contents:
  - "E.5. Well-Known Group 5:  A 1536 bit prime\n      The prime is 2^1536 - 2^1472\
    \ - 1 + 2^64 * { [2^1406 pi] +  741804\n   }.\n      Its decimal value is\n  \
    \          241031242692103258855207602219756607485695054850245994265411\n    \
    \        694195810883168261222889009385826134161467322714147790401219\n      \
    \      650364895705058263194273070680500922306273474534107340669624\n        \
    \    601458936165977404102716924945320037872943417032584377865919\n          \
    \  814376319377685986952408894019557734611984354530154704374720\n            774996976375008430892633929555996888245787241299381012913029\n\
    \            459299994792636526405928464720973038494721168143446471443848\n  \
    \          8520940127459844288859336526896320919633919\n      The primality of\
    \ the number has been rigorously proven.\n      The representation of the group\
    \ in OAKLEY is\n         Type of group:                    \"MODP\"\n        \
    \ Size of field element (bits):      1536\n         Prime modulus:           \
    \          21 (decimal)\n            Length (32 bit words):          48\n    \
    \        Data (hex):\n               FFFFFFFF FFFFFFFF C90FDAA2 2168C234 C4C6628B\
    \ 80DC1CD1\n               29024E08 8A67CC74 020BBEA6 3B139B22 514A0879 8E3404DD\n\
    \               EF9519B3 CD3A431B 302B0A6D F25F1437 4FE1356D 6D51C245\n      \
    \         E485B576 625E7EC6 F44C42E9 A637ED6B 0BFF5CB6 F406B7ED\n            \
    \   EE386BFB 5A899FA5 AE9F2411 7C4B1FE6 49286651 ECE45B3D\n               C2007CB8\
    \ A163BF05 98DA4836 1C55D39A 69163FA8 FD24CF5F\n               83655D23 DCA3AD96\
    \ 1C62F356 208552BB 9ED52907 7096966D\n               670C354E 4ABC9804 F1746C08\
    \ CA237327 FFFFFFFF FFFFFFFF\n         Generator:                         22 (decimal)\n\
    \            Length (32 bit words):          1\n            Data (hex):      \
    \               2\n         Optional Parameters:\n         Group order largest\
    \ prime factor:  24 (decimal)\n            Length (32 bit words):          48\n\
    \            Data (hex):\n               7FFFFFFF FFFFFFFF E487ED51 10B4611A 62633145\
    \ C06E0E68\n               94812704 4533E63A 0105DF53 1D89CD91 28A5043C C71A026E\n\
    \               F7CA8CD9 E69D218D 98158536 F92F8A1B A7F09AB6 B6A8E122\n      \
    \         F242DABB 312F3F63 7A262174 D31BF6B5 85FFAE5B 7A035BF6\n            \
    \   F71C35FD AD44CFD2 D74F9208 BE258FF3 24943328 F6722D9E\n               E1003E5C\
    \ 50B1DF82 CC6D241B 0E2AE9CD 348B1FD4 7E9267AF\n               C1B2AE91 EE51D6CB\
    \ 0E3179AB 1042A95D CF6A9483 B84B4B36\n               B3861AA7 255E4C02 78BA3604\
    \ 6511B993 FFFFFFFF FFFFFFFF\n         Strength of group:                 26 (decimal)\n\
    \            Length (32 bit words)            1\n            Data (hex):\n   \
    \            0000005B\n"
- title: Appendix F  Implementing Group Operations
  contents:
  - "Appendix F  Implementing Group Operations\n   The group operation must be implemented\
    \ as a sequence of arithmetic\n   operations; the exact operations depend on the\
    \ type of group.  For\n   modular exponentiation groups, the operation is multi-precision\n\
    \   integer multiplication and remainders by the group modulus.  See\n   Knuth\
    \ Vol. 2 [Knuth] for a discussion of how to implement these for\n   large integers.\
    \  Implementation recommendations for elliptic curve\n   group operations over\
    \ GF[2^N] are described in [Schroeppel].\n"
- title: BIBLIOGRAPHY
  contents:
  - "BIBLIOGRAPHY\n   [RFC2401]    Atkinson, R., \"Security Architecture for the\n\
    \                Internet Protocol\", RFC 2401, November 1998.\n   [RFC2406] \
    \   Atkinson, R., \"IP Encapsulating Security Payload (ESP)\",\n             \
    \   RFC 2406, November 1998.\n   [RFC2402]    Atkinson, R., \"IP Authentication\
    \ Header\", RFC 2402,\n                November 1998.\n   [Blaze]      Blaze,\
    \ Matt et al., MINIMAL KEY LENGTHS FOR SYMMETRIC\n                CIPHERS TO PROVIDE\
    \ ADEQUATE COMMERCIAL SECURITY. A\n                REPORT BY AN AD HOC GROUP OF\
    \ CRYPTOGRAPHERS AND COMPUTER\n                SCIENTISTS...  --\n           \
    \     http://www.bsa.org/policy/encryption/cryptographers.html\n   [STS]     \
    \   W. Diffie, P.C. Van Oorschot, and M.J. Wiener,\n                \"Authentication\
    \ and Authenticated Key Exchanges,\" in\n                Designs, Codes and Cryptography,\
    \ Kluwer Academic\n                Publishers, 1992, pp. 107\n   [SECDNS]    \
    \ Eastlake, D. and C. Kaufman, \"Domain Name System\n                Security\
    \ Extensions\", RFC 2065, January 1997.\n   [Random]     Eastlake, D., Crocker,\
    \ S. and J. Schiller, \"Randomness\n                Recommendations for Security\"\
    , RFC 1750, December 1994.\n   [Kocher]     Kocher, Paul, Timing Attack,\n   \
    \             http://www.cryptography.com/timingattack.old/timingattack.html\n\
    \   [Knuth]      Knuth, Donald E., The Art of Computer Programming, Vol.\n   \
    \             2, Seminumerical Algorithms, Addison Wesley, 1969.\n   [Krawcyzk]\
    \   Krawcyzk, Hugo, SKEME: A Versatile Secure Key Exchange\n                Mechanism\
    \ for Internet, ISOC Secure Networks and\n                Distributed Systems\
    \ Symposium, San Diego, 1996\n   [Schneier]   Schneier, Bruce, Applied cryptography:\
    \ protocols,\n                algorithms, and source code in C, Second edition,\
    \ John\n                Wiley & Sons, Inc. 1995, ISBN 0-471-12845-7, hardcover.\n\
    \                ISBN 0-471-11709-9, softcover.\n   [Schroeppel] Schroeppel, Richard,\
    \ et al.; Fast Key Exchange with\n                Elliptic Curve Systems, Crypto\
    \ '95, Santa Barbara, 1995.\n                Available on-line as\n          \
    \      ftp://ftp.cs.arizona.edu/reports/1995/TR95-03.ps (and\n               \
    \ .Z).\n   [Stinson]    Stinson, Douglas, Cryptography Theory and Practice. CRC\n\
    \                Press, Inc., 2000, Corporate Blvd., Boca Raton, FL,\n       \
    \         33431-9868, ISBN 0-8493-8521-0, 1995\n   [Zimmerman]  Philip Zimmermann,\
    \ The Official Pgp User's Guide,\n                Published by MIT Press Trade,\
    \ Publication date: June\n                1995, ISBN: 0262740176\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1998).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
