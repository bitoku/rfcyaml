- title: __initial_text__
  contents:
  - ' Memorandum for Multi-Domain Public Key Infrastructure Interoperability

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The objective of this document is to establish a terminology\n \
    \  framework and to suggest the operational requirements of Public Key\n   Infrastructure\
    \ (PKI) domain for interoperability of multi-domain\n   Public Key Infrastructure,\
    \ where each PKI domain is operated under a\n   distinct policy.  This document\
    \ describes the relationships between\n   Certification Authorities (CAs), provides\
    \ the definition and\n   requirements for PKI domains, and discusses typical models\
    \ of multi-\n   domain PKI.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n     1.1.  Objective  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  3\n     1.2.  Document Outline . . . . . . . . . . . . . . . . .\
    \ . . . .  3\n   2.  Public Key Infrastructure (PKI) Basics . . . . . . . . .\
    \ . . .  3\n     2.1.  Basic Terms  . . . . . . . . . . . . . . . . . . . . .\
    \ . .  3\n     2.2.  Relationships between Certification Authorities  . . . .\
    \ .  4\n       2.2.1.  Hierarchical CA Relationships  . . . . . . . . . . . .\
    \  5\n       2.2.2.  Peer-to-Peer CA Relationships  . . . . . . . . . . . .  6\n\
    \     2.3.  Public Key Infrastructure (PKI) Architectures  . . . . . .  7\n  \
    \     2.3.1.  Single CA Architecture . . . . . . . . . . . . . . . .  7\n    \
    \   2.3.2.  Multiple CA Architectures  . . . . . . . . . . . . . .  8\n     2.4.\
    \  Relationships between PKIs and Relying Parties . . . . . . 12\n   3.  PKI Domain\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . 12\n     3.1.  PKI Domain\
    \ Properties  . . . . . . . . . . . . . . . . . . 13\n     3.2.  Requirements\
    \ for Establishing and Participating in PKI\n           Domains  . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . 13\n       3.2.1.  PKI Requirements . .\
    \ . . . . . . . . . . . . . . . . . 13\n       3.2.2.  PKI Domain Documentation\
    \ . . . . . . . . . . . . . . . 14\n       3.2.3.  PKI Domain Membership Notification\
    \ . . . . . . . . . . 15\n       3.2.4.  Considerations for PKIs and PKI Domains\
    \ with\n               Multiple Policies  . . . . . . . . . . . . . . . . . .\
    \ 16\n     3.3.  PKI Domain Models  . . . . . . . . . . . . . . . . . . . . 16\n\
    \       3.3.1.  Unifying Trust Point (Unifying Domain) Model . . . . . 16\n  \
    \     3.3.2.  Independent Trust Point Models . . . . . . . . . . . . 17\n    \
    \ 3.4.  Operational Considerations . . . . . . . . . . . . . . . . 21\n   4. \
    \ Trust Models External to PKI Relationships . . . . . . . . . . 22\n     4.1.\
    \  Trust List Models  . . . . . . . . . . . . . . . . . . . . 22\n       4.1.1.\
    \  Local Trust List Model . . . . . . . . . . . . . . . . 22\n       4.1.2.  Trust\
    \ Authority Model  . . . . . . . . . . . . . . . . 23\n     4.2.  Trust List Considerations\
    \  . . . . . . . . . . . . . . . . 24\n       4.2.1.  Considerations for a PKI\
    \ . . . . . . . . . . . . . . . 24\n       4.2.2.  Considerations for Relying\
    \ Parties and Trust\n               Authorities  . . . . . . . . . . . . . . .\
    \ . . . . . . 24\n       4.2.3.  Additional Considerations for Trust Authorities\
    \  . . . 25\n   5.  Abbreviations  . . . . . . . . . . . . . . . . . . . . . .\
    \ . . 25\n   6.  Security Considerations  . . . . . . . . . . . . . . . . . .\
    \ . 25\n     6.1.  PKI Domain Models  . . . . . . . . . . . . . . . . . . . .\
    \ 25\n     6.2.  Trust List Models  . . . . . . . . . . . . . . . . . . . . 26\n\
    \   7.  References . . . . . . . . . . . . . . . . . . . . . . . . . . 27\n  \
    \   7.1.  Normative References . . . . . . . . . . . . . . . . . . . 27\n    \
    \ 7.2.  Informative References . . . . . . . . . . . . . . . . . . 27\n"
- title: 1.  Introduction
  contents:
  - '1.  Introduction

    '
- title: 1.1.  Objective
  contents:
  - "1.1.  Objective\n   The objective of this document is to establish a terminology\n\
    \   framework and to provide the operational requirements, which can be\n   used\
    \ by different Public Key Infrastructure (PKI) authorities who are\n   considering\
    \ establishing trust relationships with each other.  The\n   document defines\
    \ different types of possible trust relationships,\n   identifies design and implementation\
    \ considerations that PKIs should\n   implement to facilitate trust relationships\
    \ across PKIs, and\n   identifies issues that should be considered when implementing\
    \ trust\n   relationships.  This document defines terminology and\n   interoperability\
    \ requirements for multi-domain PKIs from one\n   perspective.  A PKI domain can\
    \ achieve multi-domain PKI\n   interoperability by complying with the requirements\
    \ in this document.\n   However, there are other ways to define and realize multi-domain\
    \ PKI\n   interoperability.\n"
- title: 1.2.  Document Outline
  contents:
  - "1.2.  Document Outline\n   Section 2 introduces the PKI basics, which provide\
    \ a background for\n   multi-domain PKI.  Section 3 provides the definitions and\n\
    \   requirements of 'PKI domain' and describes the typical models of\n   multi-domain\
    \ PKI.  Section 4 considers the Trust List Models\n   depending on relying party-CA\
    \ relationships (not CA-CA trust\n   relationships, as they are not a focus of\
    \ this document).  Section 5\n   identifies abbreviations used in the document.\n"
- title: 2.  Public Key Infrastructure (PKI) Basics
  contents:
  - '2.  Public Key Infrastructure (PKI) Basics

    '
- title: 2.1.  Basic Terms
  contents:
  - "2.1.  Basic Terms\n   The following terms are used throughout this document.\
    \  Where\n   possible, definitions found in RFC 4949 [RFC4949] have been used.\n\
    \   Certificate:  A digitally signed data structure that attests to the\n    \
    \  binding of a system entity's identity to a public key value (based\n      on\
    \ the definition of public key certificate in RFC 4949\n      [RFC4949]).\n  \
    \ Certificate Policy:  A named set of rules that indicates the\n      applicability\
    \ of a certificate to a particular community and/or\n      class of application\
    \ with common security requirements (X.509\n      [CCITT.X509.2000]).  Note that\
    \ to avoid confusion, this document\n      uses the terminology \"Certificate\
    \ Policy Document\" to refer to the\n      document that defines the rules and\
    \ \"Policy Object Identifier\n      (OID)\" to specify a particular rule set.\n\
    \   Certificate Policy Document:  A document that defines the rules for\n    \
    \  the issuance and management of certificates and identifies Policy\n      Object\
    \ Identifiers (OIDs) for these rules.  A Certificate Policy\n      Document may\
    \ define more than one Policy OID.\n   Policy Object Identifier (Policy OID):\
    \  An identifier applied to a\n      set of rules governing the issuance and management\
    \ of\n      certificates.  Policy OIDs are defined in the Certificate Policy\n\
    \      Documents.\n   Certification Authority (CA):  An entity that issues certificates\n\
    \      (especially X.509 certificates) and vouches for the binding\n      between\
    \ the data items in a certificate (RFC 4949 [RFC4949]).\n   End Entity (EE): \
    \ A system entity that is the subject of a\n      certificate and that is using,\
    \ or is permitted and able to use,\n      the matching private key only for a\
    \ purpose or purposes other than\n      signing a certificate; i.e., an entity\
    \ that is not a CA (RFC 4949\n      [RFC4949]).\n   Relying party:  A system entity\
    \ that depends on the validity of\n      information (such as another entity's\
    \ public key value) provided\n      by a certificate (from the RFC 4949 [RFC4949]\
    \ definition of\n      certificate user).\n"
- title: 2.2.  Relationships between Certification Authorities
  contents:
  - "2.2.  Relationships between Certification Authorities\n   CAs establish trust\
    \ relationships by issuing certificates to other\n   CAs.  CA relationships are\
    \ divided into 'certification hierarchy'\n   [RFC4949] and 'cross-certification'\
    \ [RFC4949].\n   In a certification hierarchy, there are two types of CAs: 'superior\n\
    \   CA' and 'subordinate CA', as described in RFC 4949 [RFC4949].\n   Superior\
    \ CA:  A CA that is an issuer of a subordinate CA certificate.\n   A cross-certification\
    \ can be either unilateral or bilateral.\n   Unilateral cross-certification: \
    \ Cross-certification of one CA (CA1)\n      by another CA (CA2) but no cross-certification\
    \ of CA2 by CA1.\n   Bilateral cross-certification:  Cross-certification of one\
    \ CA (CA1)\n      by another CA (CA2) and cross-certification of CA2 by CA1.\n"
- title: 2.2.1.  Hierarchical CA Relationships
  contents:
  - "2.2.1.  Hierarchical CA Relationships\n   In a hierarchical relationship, as\
    \ shown in Figure 1, one CA assumes\n   a parent relationship to the other CA.\n\
    \                                   +----+\n                                 \
    \  | CA |\n                                   +----+\n                       \
    \              |\n                                     v\n                   \
    \                +----+\n                                   | CA |\n         \
    \                          +----+\n                  Figure 1: Hierarchical CA\
    \ Relationship\n   There are two types of hierarchical relationships, depending\
    \ on\n   whether a subordinate CA certificate or a unilateral cross-\n   certificate\
    \ is used.  In the case where one (superior) CA issues a\n   subordinate CA certificate\
    \ to another, the CA at the top of the\n   hierarchy, which must itself have a\
    \ self-signed certificate, is\n   called a root CA.  In the case where one CA\
    \ issues unilateral cross-\n   certificates to other CAs, the CA issuing unilateral\
    \ cross-\n   certificates is called a Unifying CA.  Unifying CAs use only\n  \
    \ unilateral cross-certificates.\n   NOTE: In this document, the definition of\
    \ root CA is according to the\n   second definition (context for hierarchical\
    \ PKI) of 'root CA' in RFC\n   4949 [RFC4949].  This document uses the terminology\
    \ 'trust anchor CA'\n   for the first definition (context for PKI) of 'root CA'\
    \ in RFC 4949.\n   Root CA:  A CA that is at the top of a hierarchy, and itself\
    \ should\n      not issue certificates to end entities (except those required\
    \ for\n      its own operation) but issues subordinate CA certificates to one\n\
    \      or more CAs.\n   Subordinate CA:  A CA whose public key certificate is\
    \ issued by\n      another superior CA, and itself must not be used as a trust\
    \ anchor\n      CA.\n   Unifying CA:  A CA that is at the top of a hierarchy,\
    \ and itself\n      should not issue certificates to end entities (except those\n\
    \      required for its own operation) but establishes unilateral cross-\n   \
    \   certification with other CAs.  A Unifying CA must permit CAs to\n      which\
    \ it issues cross-certificates to have self-signed\n      certificates.\n"
- title: 2.2.2.  Peer-to-Peer CA Relationships
  contents:
  - "2.2.2.  Peer-to-Peer CA Relationships\n   In a peer relationship, no parent-child\
    \ relationship is created.  To\n   establish peer relationships, only cross-certificates\
    \ are used.  Peer\n   relationships can be either unilateral or bilateral, as\
    \ shown in\n   Figure 2.\n                                              Bilateral\n\
    \                    Unilateral           Cross-Certification\n              \
    \  Cross-Certification      +----+      +----+\n                +----+      +----+\
    \       |    | ---> |    |\n                | CA | ---> | CA |       | CA |  \
    \    | CA |\n                +----+      +----+       |    | <--- |    |\n   \
    \                                      +----+      +----+\n                  Figure\
    \ 2: Peer-to-Peer CA Relationships\n   In the case where a CA exists only to manage\
    \ cross-certificates, that\n   CA is called a Bridge CA.  CAs can establish unilateral\
    \ or bilateral\n   cross-certification with a Bridge CA, as shown in Figure 3.\n\
    \   Bridge CA:  A CA that, itself, does not issue certificates to end\n      entities\
    \ (except those required for its own operation) but\n      establishes unilateral\
    \ or bilateral cross-certification with other\n      CAs.\n                  \
    \                Bilateral\n                             Cross-Certification\n\
    \                  +----+ ----------+    +--------- +----+\n                 \
    \ | CA |           |    |          | CA |\n                  +----+ <-------+\
    \ |    | +------> +----+\n                                 | v    v |\n      \
    \                         +-----------+\n                               | Bridge\
    \ CA |\n                               +-----------+\n                  +----+\
    \         |       |         +----+\n                  | CA | <-------+       +------->\
    \ | CA |\n                  +----+         Unilateral        +----+\n        \
    \                    Cross-Certification\n                            Figure 3:\
    \ Bridge CA\n"
- title: 2.3.  Public Key Infrastructure (PKI) Architectures
  contents:
  - "2.3.  Public Key Infrastructure (PKI) Architectures\n   Public Key Infrastructure\
    \ (PKI):  A system of CAs that perform some\n      set of certificate management,\
    \ archive management, key management,\n      and token management functions for\
    \ a community of users in an\n      application of asymmetric cryptography and\
    \ share trust\n      relationships, operate under the same Certificate Policy\
    \ Document\n      specifying a shared set of Policy OID(s), and are either operated\n\
    \      by a single organization or under the direction of a single\n      organization.\n\
    \   In addition, a PKI that intends to enter into trust relationships\n   with\
    \ other PKIs must designate a Principal CA (PCA) that will manage\n   all trust\
    \ relationships.  This Principal CA should also be the trust\n   anchor CA for\
    \ relying parties of that PKI.\n   Principal CA (PCA):  A CA that should have\
    \ a self-signed certificate\n      is designated as the CA that will issue cross-certificates\
    \ to\n      Principal CAs in other PKIs, and may be the subject of cross-\n  \
    \    certificates issued by Principal CAs in other PKIs.\n   In discussing different\
    \ possible architectures for PKI, the concept\n   of a certification path is necessary.\
    \  A certification path is built\n   based on trust relationships between CAs.\n\
    \   Certification Path:  An ordered sequence of certificates where the\n     \
    \ subject of each certificate in the path is the issuer of the next\n      certificate\
    \ in the path.  A certification path begins with a trust\n      anchor certificate\
    \ and ends with an end entity certificate.\n"
- title: 2.3.1.  Single CA Architecture
  contents:
  - "2.3.1.  Single CA Architecture\n   Definition:  A simple PKI consists of a single\
    \ CA with a self-signed\n      certificate that issues certificates to End Entities\
    \ (EEs), as\n      shown in Figure 4.\n                                   +----+\n\
    \                                   | CA |\n                                 \
    \  +----+\n                                      |\n                         \
    \      +------+-----+\n                               v      v     v\n       \
    \                     +----+ +----+ +----+\n                            | EE |\
    \ | EE | | EE |\n                            +----+ +----+ +----+\n          \
    \           Figure 4: Simple PKI Architecture\n   Trust anchor CA:  The trust\
    \ anchor CA must be the CA that has a self-\n      signed certificate.\n   Principal\
    \ CA:  Since this PKI architecture has one CA, the Principal\n      CA must be\
    \ that CA.\n"
- title: 2.3.2.  Multiple CA Architectures
  contents:
  - '2.3.2.  Multiple CA Architectures

    '
- title: 2.3.2.1.  Hierarchical PKI Architecture
  contents:
  - "2.3.2.1.  Hierarchical PKI Architecture\n   Definition:  A hierarchical PKI consists\
    \ of a single root CA and one\n      or more subordinate CAs that issue certificates\
    \ to EEs.  A\n      hierarchical PKI may have intermediate CAs, which are subordinate\n\
    \      CAs that themselves have subordinate CAs.  The root CA must\n      distribute\
    \ a trust anchor (public key and associated data), but\n      the format and protocol\
    \ are irrelevant for this specification.\n      And all subordinate CAs must have\
    \ subordinate CA certificates, as\n      shown in Figure 5.\n   Trust anchor CA:\
    \  The trust anchor CA must be the root CA.\n   Principal CA:  The Principal CA\
    \ must be the root CA.\n                            +---------+\n            \
    \                | Root CA |\n                            +---------+\n      \
    \                           |\n                    +------------+------------+\n\
    \                    v                         v\n                  +----+   \
    \                 +----+\n                  | CA |                    | CA |\n\
    \                  +----+                    +----+\n                    |   \
    \                      |\n             +------+------+         +--------+-------+\n\
    \             v      v      v         v                v\n           +----+ +----+\
    \ +----+    +----+           +----+\n           | EE | | EE | | EE |    | CA |\
    \           | CA |\n           +----+ +----+ +----+    +----+           +----+\n\
    \                                     |                |\n                   \
    \              +---+--+      +------+------+\n                               \
    \  v      v      v      v      v\n                               +----+ +----+\
    \ +----+ +----+ +----+\n                               | EE | | EE | | EE | |\
    \ EE | | EE |\n                               +----+ +----+ +----+ +----+ +----+\n\
    \                  Figure 5: Hierarchical PKI Architecture\n"
- title: 2.3.2.2.  Mesh PKI Architectures
  contents:
  - "2.3.2.2.  Mesh PKI Architectures\n   Definition:  A mesh PKI consists of multiple\
    \ CAs with self-signed\n      certificates that issue certificates to EEs and\
    \ issue cross-\n      certificates to each other.  A mesh PKI may be a full mesh,\
    \ where\n      all CAs issue cross-certificates to all other CAs, as shown in\n\
    \      Figure 6.  A mesh PKI may also be a partial mesh, where all CAs do\n  \
    \    not issue cross-certificates to all other CAs.  In a partial mesh\n     \
    \ PKI, certification paths may not exist from all CAs to all other\n      CAs,\
    \ as shown in Figure 7.\n                     +--------- +-----+ <--------+\n\
    \                     |          | CA1 |          |\n                     | +------>\
    \ +-----+ -------+ |\n                     | |           |           | |\n   \
    \                  | |       +---+--+        | |\n                     | |   \
    \    v      v        | |\n                     | |     +----+ +----+     | |\n\
    \                     | |     | EE | | EE |     | |\n                     | |\
    \     +----+ +----+     | |\n                     v |                       v\
    \ |\n                   +-----+ ----------------> +-----+\n                  \
    \ | CA2 |                   | CA3 |\n                   +-----+ <----------------\
    \ +-----+\n                      |                         |\n               \
    \   +---+--+               +------+------+\n                  v      v       \
    \        v      v      v\n                +----+ +----+          +----+ +----+\
    \ +----+\n                | EE | | EE |          | EE | | EE | | EE |\n      \
    \          +----+ +----+          +----+ +----+ +----+\n                   Figure\
    \ 6: Full Mesh PKI Architecture\n                     +--------- +-----+\n   \
    \                  |          | CA1 | --------+\n                     | +------>\
    \ +-----+         |\n                     | |           |            |\n     \
    \                | |       +---+--+         |\n                     | |      \
    \ v      v         |\n                     | |     +----+ +----+      |\n    \
    \                 | |     | EE | | EE |      |\n                     | |     +----+\
    \ +----+      |\n                     v |                        v\n         \
    \          +-----+                   +-----+\n                   | CA2 | ---------------->\
    \ | CA3 |\n                   +-----+                   +-----+\n            \
    \          |                         |\n                  +---+--+           \
    \    +------+------+\n                  v      v               v      v      v\n\
    \                +----+ +----+          +----+ +----+ +----+\n               \
    \ | EE | | EE |          | EE | | EE | | EE |\n                +----+ +----+ \
    \         +----+ +----+ +----+\n                  Figure 7: Partial Mesh PKI Architecture\n\
    \   Trust anchor CA:  The trust anchor CA for an end entity is usually\n     \
    \ the CA that issued the end entity's certificate.  The trust anchor\n      CA\
    \ for an end entity that is not issued a certificate from the\n      mesh PKI\
    \ may be any CA in the PKI.  In a partial mesh, selection\n      of the trust\
    \ anchor may result in no certification path from the\n      trust anchor to one\
    \ or more CAs in the mesh.  For example, in\n      Figure 7 above, the selection\
    \ of CA1 or CA2 as the trust anchor CA\n      will result in paths from all end\
    \ entities in the figure.\n      However, the selection of CA3 as the trust anchor\
    \ CA will result\n      in certification paths only for those EEs whose certificates\
    \ were\n      issued by CA3.  No certification path exists to CA1 or CA2.\n  \
    \ Principal CA:  The Principal CA may be any CA within the mesh PKI.\n      However,\
    \ the mesh PKI must have only one Principal CA, and a\n      certification path\
    \ should exist from the Principal CA to all other\n      CAs within the mesh PKI.\n\
    \   Considerations:  This model should be used sparingly, especially the\n   \
    \   partial mesh model, because of the complexity of determining trust\n     \
    \ anchors and building certification paths.  A full mesh PKI may be\n      useful\
    \ for certification path building because paths of length one\n      exist from\
    \ all CAs to all other CAs in the mesh.\n"
- title: 2.3.2.3.  Hybrid PKI Architectures
  contents:
  - "2.3.2.3.  Hybrid PKI Architectures\n   Definition:  A hybrid PKI is a PKI that\
    \ uses a combination of the\n      pure hierarchical model using subordinate CA\
    \ certificates and the\n      pure mesh model using cross-certificates.\n    \
    \                +-----+ <----- +-----+\n                    | CA2 |        |\
    \ CA1 |\n                    +-----+ -----> +-----+\n                       |\
    \              |\n                   +---+--+       +---+--+-------+\n       \
    \            v      v       v      v       v\n                +----+ +----+  \
    \ +----+ +----+ +-----+\n                | EE | | EE |   | EE | | EE | | CA3 |\n\
    \                +----+ +----+   +----+ +----+ +-----+\n                     \
    \                            |\n                                          +------+------+\n\
    \                                          v      v      v\n                 \
    \                       +----+ +----+ +----+\n                               \
    \         | EE | | EE | | EE |\n                                        +----+\
    \ +----+ +----+\n                      Figure 8: Hybrid PKI Architecture\n   Trust\
    \ anchor CA:  The trust anchor CA for a hybrid PKI may be any CA\n      with self-issued\
    \ certificates in the hybrid PKI.  However, because\n      of the potential complexity\
    \ of a hybrid PKI, the PKI should\n      provide guidance regarding the selection\
    \ of the trust anchor to\n      relying parties because a relying party may fail\
    \ to build an\n      appropriate certification path to a subscriber if they choose\
    \ an\n      inappropriate trust anchor.\n   Principal CA:  The Principal CA may\
    \ be any CA within the hybrid PKI\n      and should have a self-signed certificate\
    \ for cross-certification\n      with other PKI domains.  However, the hybrid\
    \ PKI must have only\n      one Principal CA and a certification path must exist\
    \ from the\n      Principal CA to every CA within the PKI.\n   Considerations:\
    \  This model should be used sparingly because of the\n      complexity of determining\
    \ trust anchors and building certification\n      paths.  However, hybrid PKIs\
    \ may occur as a result of the\n      evolution of a PKI over time, such as CAs\
    \ within an organization\n      joining together to become a single PKI.\n"
- title: 2.4.  Relationships between PKIs and Relying Parties
  contents:
  - "2.4.  Relationships between PKIs and Relying Parties\n   Relying Parties establish\
    \ trust relationships by trust anchor to a\n   PKI.  Relying Parties may use a\
    \ Trust List for establishing trust\n   relationships to one or more PKIs.  A\
    \ Trust List is a set of one or\n   more trust anchors for trusting one or more\
    \ PKIs.\n   There are two types of maintenance models of Trust List, Local Trust\n\
    \   List Model and Trust Authority Model.  The two models are described\n   in\
    \ detail in Section 4.1.\n"
- title: 3.  PKI Domain
  contents:
  - "3.  PKI Domain\n   Two or more PKIs may choose to enter into trust relationships\
    \ with\n   each other.  For these relationships, each PKI retains its own set\
    \ of\n   Certificate Policy OIDs and its own Principal CA.  In addition to\n \
    \  making a business decision to consider a trust relationship, each PKI\n   determines\
    \ the level of trust of each external PKI by reviewing\n   external PKI Certificate\
    \ Policy Document(s) and any other PKI\n   governance documentation through a\
    \ process known as policy mapping.\n   Trust relationships are technically formalized\
    \ through the issuance\n   of cross-certificates.  Such a collection of two or\
    \ more PKIs is\n   known as a PKI domain.\n   PKI domain:  A set of two or more\
    \ PKIs that have chosen to enter into\n      trust relationships with each other\
    \ through the use of cross-\n      certificates.  Each PKI that has entered into\
    \ the PKI domain is\n      considered a member of that PKI domain.\n      NOTE:\
    \  This definition specifies a PKI domain recursively in terms\n         of its\
    \ constituent domains and associated trust relationships;\n         this is different\
    \ to the definition in RFC 4949 [RFC4949] that\n         gives PKI domain as a\
    \ synonym for CA domain and defines it in\n         terms of a CA and its subject\
    \ entities.\n   Domain Policy Object Identifier:  A domain Policy Object Identifier\n\
    \      (OID) is a Policy OID that is shared across a PKI domain.  Each CA\n  \
    \    in the PKI domain must be operated under the domain Policy OID.\n      Each\
    \ CA may also have its own Policy OID(s) in addition to the\n      domain Policy\
    \ OID.  In such a case, the CA must comply with both\n      policies.  The domain\
    \ Policy OID is used to identify the PKI\n      domain.\n   Policy Mapping:  A\
    \ process by which members of a PKI domain evaluate\n      the Certificate Policies\
    \ (CPs) and other governance documentation\n      of other potential PKI domain\
    \ members to determine the level of\n      trust that each PKI in the PKI domain\
    \ places on certificates\n      issued by each other PKI in the PKI domain.\n"
- title: 3.1.  PKI Domain Properties
  contents:
  - "3.1.  PKI Domain Properties\n   o  A PKI domain may operate a Bridge CA or a\
    \ Unifying CA that defines\n      members of the domain by issuing cross-certificates\
    \ to those\n      members.\n   o  A single PKI may simultaneously belong to two\
    \ or more PKI domains.\n   o  A PKI domain may contain PKI domains within its\
    \ own membership.\n   o  Two or more PKI domains may enter into a trust relationship\
    \ with\n      each other, creating a new PKI domain.  They may choose to retain\n\
    \      the existing PKI domains in addition to the new PKI domain or\n      collapse\
    \ the existing PKI domains into the new PKI domain.\n   o  A member of a PKI domain\
    \ may choose to participate in the PKI\n      domain but restrict or deny trust\
    \ in one or more other member PKIs\n      of that same PKI domain.\n"
- title: 3.2.  Requirements for Establishing and Participating in PKI Domains
  contents:
  - "3.2.  Requirements for Establishing and Participating in PKI Domains\n   The\
    \ establishment of trust relationships has a direct impact on the\n   trust model\
    \ of relying parties.  As a result, consideration must be\n   taken in the creation\
    \ and maintenance of PKI domains to prevent\n   creating inadvertent trust relationships.\n"
- title: 3.2.1.  PKI Requirements
  contents:
  - "3.2.1.  PKI Requirements\n   In order for a PKI to participate in one or more\
    \ PKI domains, that\n   PKI must have the following:\n   o  A Certificate Policy\
    \ Document documenting the requirements for\n      operation of that PKI.  The\
    \ Certificate Policy Document should be\n      in RFC 3647 [RFC3647] format.\n\
    \   o  One or more Policy OIDs defined in the Certificate Policy Document\n  \
    \    that are also asserted in all certificates issued by that PKI.\n   o  A defined\
    \ Principal CA.\n   PKI domains may also impose additional technical, documentation,\
    \ or\n   policy requirements for membership in the PKI domain.\n   When participating\
    \ in a PKI domain, the domain Policy OID(s) must be\n   asserted at least in cross-certificates\
    \ issued by a participating\n   PKI.  After the participation, the PKI can assert\
    \ the domain Policy\n   OID(s) in certificates issued by that PKI, or may map\
    \ the domain\n   Policy OID(s) to the Policy OID(s) asserted in certificates issued\
    \ by\n   that PKI.\n"
- title: 3.2.2.  PKI Domain Documentation
  contents:
  - "3.2.2.  PKI Domain Documentation\n   PKI domains must be formally defined and\
    \ documented.  This\n   documentation may vary greatly depending on the PKI domain.\
    \  However,\n   it must:\n   o  Establish the existence of the PKI domain;\n \
    \  o  Define the authority for maintaining the PKI domain;\n         Examples\
    \ of PKI domain Authorities are (1) Representatives from\n         two PKIs that\
    \ agree to form a simple PKI domain, (2) A single\n         entity that may or\
    \ may not be related to any of the PKIs in the\n         PKI domain, (3) A governance\
    \ board made up of representatives\n         from each PKI domain member.\n  \
    \ o  Define how the PKI domain is governed;\n   o  Define the purpose and community\
    \ of interest of the PKI domain;\n      and\n         Examples of PKI domain intents\
    \ are (1) allow relying parties of\n         one PKI to trust certificates issued\
    \ by another PKI, (2) allow\n         PKIs that support similar subscriber communities\
    \ of interest to\n         interact with each other, and (3) allow relying parties\
    \ to\n         trust certificates issued by a number of PKIs that all meet a\n\
    \         set of requirements.\n   o  Unless the PKI domain has a predetermined\
    \ membership, describe the\n      requirements and methods for joining the PKI\
    \ domain, such as\n      FPKIMETHOD [FPKIMETHOD].\n   Examples of governance documents\
    \ that PKI domains may choose to use\n   are:\n   o  Statement of intent between\
    \ two or more parties;\n   o  Memorandum of Agreement between two or more parties;\n\
    \   o  Certificate Policy Document for the PKI domain;\n   o  Charter for the\
    \ PKI domain; or\n   o  Methodology for PKI domain membership.\n"
- title: 3.2.3.  PKI Domain Membership Notification
  contents:
  - "3.2.3.  PKI Domain Membership Notification\n   A cross-certificate from the Principal\
    \ CA of one PKI to the Principal\n   CA of another PKI indicates a mapping between\
    \ one or more policies of\n   the first PKI and one or more policies of the second\
    \ PKI.  When a\n   relying party is determining if a certificate can be validated,\
    \ it\n   builds a certification path from the certificate being presented to a\n\
    \   trust anchor.  To prevent creating inadvertent trust relationships\n   across\
    \ PKI domains when a single PKI is a member of two or more\n   disparate PKI domains,\
    \ each PKI domain must be cognizant of what PKI\n   domains in which its member\
    \ PKIs participate.  Figure 9 illustrates\n   this concept.\n                \
    \              +-----------------------------+\n                             \
    \ |                PKI domain 2 |\n               +----------------------------+\
    \               |\n               |              |             |             \
    \  |\n               | +------+ <------ +------+ <------ +------+ |\n        \
    \       | | PKI1 |     |   | PKI2 |  |      | PKI3 | |\n               | +------+\
    \ ------> +------+ ------> +------+ |\n               |              |       \
    \      |               |\n               |              +-----------------------------+\n\
    \               | PKI domain 1               |\n               +----------------------------+\n\
    \              Figure 9: Participation in Multiple PKI Domains\n   As shown in\
    \ Figure 9, PKI2 is a member of both PKI domain 1 and PKI\n   domain 2.  Since\
    \ a certification path exists from PKI1 to PKI2, and\n   from PKI2 to PKI3, a\
    \ certification path also exists from PKI1 to\n   PKI3.  However, PKI1 does not\
    \ share domain membership with PKI3, so\n   the certification path validation\
    \ from PKI1 to PKI3 with a validation\n   policy for PKI domain 1 must not succeed.\
    \  To ensure correct\n   certification path validation and policy mapping, the\
    \ cross-\n   certificates issued by both PKI1 and PKI3 to PKI2 must contain\n\
    \   constraints such as policy mapping or name constraints disallowing\n   the\
    \ validation of certification paths outside their respective\n   domains.\n  \
    \ To fully prevent inadvertent trust, any PKI that is a member of one\n   or more\
    \ PKI domains must inform all those PKI domains of its\n   membership in all other\
    \ PKI domains.  In addition, that PKI must\n   inform all those PKI domains of\
    \ which it is a member, any time its\n   membership status changes with regards\
    \ to any other PKI domain.  If a\n   PKI domain is informed of the change in status\
    \ of one of its member\n   PKIs with regards to other PKI domains, that PKI domain\
    \ must review\n   the constraints in any cross-certificate issued to that PKI.\
    \  If the\n   change in membership would result in a change to the allowed or\n\
    \   disallowed certification paths, the PKI domain must ensure that all\n   such\
    \ cross-certificates are revoked and re-issued with correct\n   constraints.\n"
- title: 3.2.4.  Considerations for PKIs and PKI Domains with Multiple Policies
  contents:
  - "3.2.4.  Considerations for PKIs and PKI Domains with Multiple Policies\n   In\
    \ some cases, a single PKI may issue certificates at more than one\n   assurance\
    \ level.  If so, the Certificate Policy Document must define\n   separate Policy\
    \ OIDs for each assurance level, and must define the\n   differences between certificates\
    \ of different assurance levels.\n   A PKI domain may also support more than one\
    \ assurance level.  If so,\n   the PKI domain must also define separate Policy\
    \ OIDs for each\n   assurance level, and must define the differences in requirements\
    \ for\n   each level.\n   When PKIs and PKI domains choose to establish trust\
    \ relationships,\n   these trust relationships may exist for only one defined\
    \ assurance\n   level, may have a one-to-one relationship between PKI assurance\n\
    \   levels and PKI domain assurance levels, or may have many-to-one or\n   one-to-many\
    \ relationships between assurance levels.  These\n   relationships must be defined\
    \ in cross-certificates issued between\n   PKIs in the PKI domain.\n"
- title: 3.3.  PKI Domain Models
  contents:
  - "3.3.  PKI Domain Models\n   Two or more PKI domains may choose to enter into\
    \ trust relationships\n   with each other.  In that case, they may form a larger\
    \ PKI domain by\n   establishing a new Unifying or Bridge CA or by issuing cross-\n\
    \   certificates between their Principal CAs.\n"
- title: 3.3.1.  Unifying Trust Point (Unifying Domain) Model
  contents:
  - "3.3.1.  Unifying Trust Point (Unifying Domain) Model\n   In the Unifying Trust\
    \ Point Model, a PKI domain is created by\n   establishing a joint, superior CA\
    \ that issues unilateral cross-\n   certificates to each PKI domain, as shown\
    \ in Figure 10.  Such a\n   joint, superior CA is defined as a Unifying CA, and\
    \ the Principal CAs\n   in each PKI domain have the hierarchical CA relationship\
    \ with that\n   Unifying CA.  In this model, any relying party from any of the\
    \ PKI\n   domains must specify the Unifying CA as its trust anchor CA in order\n\
    \   to validate a subscriber in the other PKI domains.  If the relying\n   party\
    \ does not desire to validate subscribers in other PKI domains,\n   the relying\
    \ party may continue to use the Principal CA from the old\n   PKI domain as its\
    \ trust anchor CA.\n   This model may be used for merging multiple PKI domains\
    \ into a single\n   PKI domain with less change to existing PKI domains, or may\
    \ be used\n   to combine multiple PKI domains into one PKI domain for relying\n\
    \   parties.  The unilateral cross-certificate issued by the Unifying CA\n   to\
    \ the Principal CAs in each PKI domain may include any policy\n   mapping.\n \
    \             Cross-certified                   Cross-certified\n            \
    \   Unifying CA                       Unifying CA\n              to PKI domain\
    \ 1 +--------------+  to PKI domain 3\n                    +---------|  Unifying\
    \ CA |---+\n                    |         +--------------+   |\n             \
    \       |                 |          |\n                    |  Cross-certified|\
    \          |\n                    |   Unifying CA   |          |\n           \
    \         |  to PKI domain 2|          |\n        +-----------|---+ +-----------|---+\
    \ +----|-----------------+\n        |    PKI    |   | |    PKI    |   | |    |\
    \    PKI          |\n        |  domain 1 |   | |  domain 2 |   | |    |  domain\
    \ 3       |\n        |           v   | |           v   | |    v              \
    \   |\n        |       +-----+ | |       +-----+ | | +-----+ ----+        |\n\
    \        |   +---| PCA | | |       | PCA | | | | PCA |     |        |\n      \
    \  |   |   +-----+ | |       +-----+ | | +-----+ <-+ |        |\n        |   |\
    \      |    | |          |    | |   | ^     | v        |\n        |   |      |\
    \    | |          |    | |   | |   +----+       |\n        |   |      |    | |\
    \          |    | |   | |   | CA |---+   |\n        |   |      |    | |      \
    \    |    | |   | |   +----+   |   |\n        |   |      |    | |          v \
    \   | |   v |    ^ |     |   |\n        |   |      |    | |       +----+  | |\
    \ +----+   | |     |   |\n        |   |      |    | |   +---| CA |  | | | CA |---+\
    \ |     |   |\n        |   |      |    | |   |   +----+  | | +----+     |    \
    \ |   |\n        |   |      |    | |   |      |    | |   |        |     |   |\n\
    \        |   v      v    | |   v      v    | |   v        v     v   |\n      \
    \  | +----+ +----+ | | +----+ +----+ | | +----+ +----+ +----+ |\n        | | EE\
    \ | | EE | | | | EE | | EE | | | | EE | | EE | | EE | |\n        | +----+ +----+\
    \ | | +----+ +----+ | | +----+ +----+ +----+ |\n        +---------------+ +---------------+\
    \ +----------------------+\n          Figure 10: Unifying Trust Point (Unifying\
    \ Domain) Model\n"
- title: 3.3.2.  Independent Trust Point Models
  contents:
  - "3.3.2.  Independent Trust Point Models\n   In Independent Trust Point Models,\
    \ relying parties continue to use\n   only the trust anchor of their PKI domain.\
    \  A relying party in the\n   individual trust point model can continue to use\
    \ the trust anchor of\n   its PKI domain.\n"
- title: 3.3.2.1.  Direct Cross-Certification Model
  contents:
  - "3.3.2.1.  Direct Cross-Certification Model\n   In this model, each PKI domain\
    \ trusts each other by issuing a cross-\n   certificate directly between each\
    \ Principal CA, as shown in\n   Figure 11.  This model may be used for shortening\
    \ a certification\n   path or establishing a trust relationship expeditiously.\n\
    \   Considerations:  A PKI domain in this model needs to take into\n      account\
    \ that the other PKI domain may cross-certify with any other\n      PKI domains.\
    \  If a PKI domain wants to restrict a certification\n      path, the PKI domain\
    \ should not rely on the validation policy of\n      the relying party, but should\
    \ include the constraints in the\n      cross-certificate explicitly.  A PKI domain\
    \ that relies on the\n      validation policy of the relying party about such\
    \ constraints\n      cannot guarantee that the constraints will be recognized\
    \ and\n      followed.\n        +---------------+                 +------------------------+\n\
    \        |    PKI        | cross-certified |         PKI            |\n      \
    \  |  domain 1     |    each other   |       domain 2         |\n        |   \
    \   +-----+ --------------------> +-----+ ----+         |\n        |      | PCA\
    \ |  |                 |  | PCA |     |         |\n        |      +-----+ <--------------------\
    \ +-----+ <-+ |         |\n        |         |     |                 |     ^ \
    \     | v         |\n        |         |     |                 |     |    +----+\
    \        |\n        |         |     |                 |     |    | CA |---+  \
    \  |\n        |         |     |                 |     |    +----+   |    |\n \
    \       |         v     |                 |     v     ^ |     |    |\n       \
    \ |       +----+  |                 |   +----+  | |     |    |\n        |   +---|\
    \ CA |  |                 |   | CA |--+ |     |    |\n        |   |   +----+ \
    \ |                 |   +----+    |     |    |\n        |   |      |    |    \
    \             |     |       |     |    |\n        |   v      v    |          \
    \       |     v       v     v    |\n        | +----+ +----+ |                \
    \ |   +----+ +----+ +----+ |\n        | | EE | | EE | |                 |   |\
    \ EE | | EE | | EE | |\n        | +----+ +----+ |                 |   +----+ +----+\
    \ +----+ |\n        +---------------+                 +------------------------+\n\
    \                Figure 11: Direct Cross-Certification Model\n"
- title: 3.3.2.2.  Bridge Model
  contents:
  - "3.3.2.2.  Bridge Model\n   In this model, every PKI domain trusts each other\
    \ through a Bridge CA\n   by cross-certification, as shown in Figure 12.  The\
    \ trust\n   relationship is not established between a subscriber domain and a\n\
    \   relying party domain directly, but established from the Principal CA\n   of\
    \ the relying party's PKI domain via a Bridge CA.  This model is\n   useful in\
    \ reducing the number of cross-certifications required for a\n   PKI domain to\
    \ interoperate with other PKI domains.\n   Requirements for Bridge model:\n  \
    \ o  The Bridge CA must not be used as the trust anchor CA in any PKI\n      domain.\n\
    \   o  The Bridge CA should issue cross-certificates with other PKI\n      domains\
    \ mutually or may issue cross-certificates unilaterally.\n   o  The Bridge CA\
    \ must not issue End Entity (EE) certificates except\n      when it is necessary\
    \ for the CA's operation.\n   o  The Bridge CA must use its own domain Policy\
    \ OID, not other PKI\n      domain Policy OID(s), for the policy mapping.\n  \
    \ o  The Bridge CA should be a neutral position to all PKI domains,\n      which\
    \ trust through the Bridge CA.  For example, in Figure 12, in\n      the case\
    \ that a relying party who trusts the PCA of PKI domain 1\n      as its trust\
    \ anchor CA builds the certification path to a\n      subscriber in PKI domain\
    \ 3:\n         Cross-Certificate from PKI domain 1 to the Bridge CA:\n       \
    \     issuerDomainPolicy ::= domain Policy OID of PKI domain 1\n            subjectDomainPolicy\
    \ := domain Policy OID of the Bridge CA\n         Cross-Certificate from the Bridge\
    \ CA to PKI domain 3:\n            issuerDomainPolicy ::= domain Policy OID of\
    \ the Bridge CA\n            subjectDomainPolicy ::= domain Policy OID of PKI\
    \ domain 3\n   o  Cross-certificates issued by the Bridge CA and cross-certificate\n\
    \      issued to the Bridge CA should include the requireExplicitPolicy\n    \
    \  with a value that is greater than zero in the policyConstraints\n      extension\
    \ because a relying party may not set the initial-\n      explicit-policy to TRUE.\n\
    \   o  PKI domains cross-certified with the Bridge CA should not cross-\n    \
    \  certify directly to other PKI domains cross-certified with the\n      same\
    \ Bridge CA.\n   o  The Bridge CA should clarify the method for the policy mapping\
    \ of\n      cross-certification to keep its transparency.\n   Considerations:\
    \  The Bridge CA should be operated by an independent\n      third party agreed\
    \ upon by the PKI domains or a consortium\n      consisting of representatives\
    \ from the PKI domain members.  The\n      Bridge CA should do policy mapping\
    \ in a well-documented and\n      agreed-upon manner with all PKI domains.  When\
    \ applying the name\n      constraints, the Bridge CA needs to avoid creating\
    \ conflicts\n      between the name spaces of the cross-certified PKI domains.\
    \  The\n      PKI domains that perform cross-certification with the Bridge CA\n\
    \      should confirm the following:\n      *  Does the Bridge CA perform the\
    \ policy mapping via its own\n         domain Policy OID?\n      *  Does the Bridge\
    \ CA clarify the method of policy mapping in the\n         cross-certification?\n\
    \      *  Is the Bridge CA able to accept the domain policy that the PKI\n   \
    \      domain desires?\n         +  If the domain policy is mapped to one with\
    \ a lower security\n            level, the PKI domain should not accept it.  Otherwise,\
    \ the\n            PKI domain must carefully consider the risks involved with\n\
    \            accepting certificates with a lower security level.\n          cross-certified\
    \                      cross-certified\n        PKI domain 1 with BCA        \
    \       PKI domain 3 with BCA\n                  +---------> +-----------+ -----+\n\
    \                  |           | Bridge CA |      |\n                  | +--------\
    \ +-----------+ <--+ |\n                  | |                 ^ |      | |\n \
    \                 | | cross-certified | |      | |\n                  | |   PKI\
    \ domain 2  | |      | |\n                  | |     with BCA    | |      | |\n\
    \        +---------|-|---+ +-----------|-|-+ +--|-|-----------------+\n      \
    \  |  PKI    | |   | |   PKI     | | | |  | |    PKI          |\n        |domain\
    \ 1 | v   | | domain 2  | v | |  | v  domain 3       |\n        |       +-----+\
    \ | |       +-----+ | | +-----+ ----+        |\n        |   +---| PCA | | |  \
    \     | PCA | | | | PCA |     |        |\n        |   |   +-----+ | |       +-----+\
    \ | | +-----+ <-+ |        |\n        |   |      |    | |          |    | |  \
    \ | ^     | v        |\n        |   |      |    | |          |    | |   | |  \
    \ +----+       |\n        |   |      |    | |          |    | |   | |   | CA |---+\
    \   |\n        |   |      |    | |          |    | |   | |   +----+   |   |\n\
    \        |   |      |    | |          v    | |   v |    ^ |     |   |\n      \
    \  |   |      |    | |       +----+  | | +----+   | |     |   |\n        |   |\
    \      |    | |   +---| CA |  | | | CA |---+ |     |   |\n        |   |      |\
    \    | |   |   +----+  | | +----+     |     |   |\n        |   |      |    | |\
    \   |      |    | |   |        |     |   |\n        |   v      v    | |   v  \
    \    v    | |   v        v     v   |\n        | +----+ +----+ | | +----+ +----+\
    \ | | +----+ +----+ +----+ |\n        | | EE | | EE | | | | EE | | EE | | | |\
    \ EE | | EE | | EE | |\n        | +----+ +----+ | | +----+ +----+ | | +----+ +----+\
    \ +----+ |\n        +---------------+ +---------------+ +----------------------+\n\
    \                          Figure 12: Bridge Model\n"
- title: 3.4.  Operational Considerations
  contents:
  - "3.4.  Operational Considerations\n   Each PKI domain may use policy mapping for\
    \ crossing different PKI\n   domains.  If a PKI domain wants to restrict a certification\
    \ path, the\n   PKI domain should not rely on the validation policy of the relying\n\
    \   party, but should include the constraints in the cross-certificate\n   explicitly.\n\
    \   For example, when each PKI domain wants to affect the constraints to\n   a\
    \ certification path, it should set the requireExplicitPolicy to zero\n   in the\
    \ policyConstraints extension of any cross-certificates.  A PKI\n   domain that\
    \ relies on the validation policy of the relying party\n   about such constraints\
    \ cannot guarantee the constraints will be\n   recognized and followed.\n"
- title: 4.  Trust Models External to PKI Relationships
  contents:
  - "4.  Trust Models External to PKI Relationships\n   As opposed to PKI domain trust\
    \ relationships entered into by PKIs\n   themselves, trust across multiple PKIs\
    \ can be created by entities\n   external to the PKIs through locally configured\
    \ lists of trust\n   anchors.\n   Trust List:  A set of one or more trust anchors\
    \ used by a relying\n      party to explicitly trust one or more PKIs.\n   Note\
    \ that Trust Lists are often created without the knowledge of the\n   PKIs that\
    \ are included in the list.\n"
- title: 4.1.  Trust List Models
  contents:
  - '4.1.  Trust List Models

    '
- title: 4.1.1.  Local Trust List Model
  contents:
  - "4.1.1.  Local Trust List Model\n   A Trust List can be created and maintained\
    \ by a single relying party\n   for its own use.\n   Local Trust List:  A Trust\
    \ List installed and maintained by a single\n      relying party for its own use.\
    \  NOTE: This definition is similar\n      to \"trust-file PKI\" defined in RFC\
    \ 4949 [RFC4949].  However, this\n      document prefers the term \"Local Trust\
    \ List\" contrasting with\n      \"Trust Authority\" defined below.\n   Figure\
    \ 13 illustrates a Local Trust List.\n      +-------------------------------------------------------------+\n\
    \      |  Relying party                                              |\n     \
    \ | +---------------------------------------------------------+ |\n      | | Trust\
    \ List                                              | |\n      | | +--------------+\
    \  +--------------+     +--------------+ | |\n      | | | PKI 1        |  | PKI\
    \ 2        | ... | PKI n        | | |\n      | | | Trust anchor |  | Trust anchor\
    \ |     | Trust anchor | | |\n      | | +--------------+  +--------------+   \
    \  +--------------+ | |\n      | +---------------------------------------------------------+\
    \ |\n      +-------------------------------------------------------------+\n \
    \             Figure 13: Relying Party Local Trust List Model\n   Creating a Local\
    \ Trust List is the simplest method for relying\n   parties to trust EE certificates.\
    \  Using Local Trust Lists does not\n   require cross-certification between the\
    \ PKI that issued the relying\n   party's own certificate and the PKI that issued\
    \ the EE's\n   certificate,nor does it require implementing mechanisms for\n \
    \  processing complex certification paths, as all CAs in a path can be\n   included\
    \ in the Local Trust List.  As a result, Local Trust Lists are\n   the most common\
    \ model in use today.  However, because Local Trust\n   Lists are created and\
    \ managed independently by each relying party,\n   the use of Local Trust Lists\
    \ can be difficult for an enterprise to\n   manage.\n"
- title: 4.1.2.  Trust Authority Model
  contents:
  - "4.1.2.  Trust Authority Model\n   Alternatively, a Trust List can be created\
    \ and maintained for using\n   by multiple relying parties.  In this case, the\
    \ entity responsible\n   for the Trust List is known as a Trust Authority.\n \
    \  Trust Authority:  An entity that manages a Trust List for use by one\n    \
    \  or more relying parties.\n   Figure 14 illustrates a Trust Authority and how\
    \ it is used by Relying\n   Parties.  Note that the Trust Authority replaces the\
    \ PKI trust\n   anchor(s) in the Local Trust List for each participating relying\n\
    \   party.\n      +-------------------------------------------------------------+\n\
    \      |  Trust Authority                                            |\n     \
    \ | +---------------------------------------------------------+ |\n      | | Trust\
    \ List                                              | |\n      | | +--------------+\
    \  +--------------+     +--------------+ | |\n      | | | PKI 1        |  | PKI\
    \ 2        | ... | PKI n        | | |\n      | | | Trust anchor |  | Trust anchor\
    \ |     | Trust anchor | | |\n      | | +--------------+  +--------------+   \
    \  +--------------+ | |\n      | +---------------------------------------------------------+\
    \ |\n      +-------------------------------------------------------------+\n \
    \          +---------------------+  +---------------------+\n           |   Relying\
    \ party 1   |  |   Relying party 2   |\n           | +-----------------+ |  |\
    \ +-----------------+ | ...\n           | | Trust Authority | |  | | Trust Authority\
    \ | |\n           | +-----------------+ |  | +-----------------+ |\n         \
    \  +---------------------+  +---------------------+\n                     Figure\
    \ 14: Trust Authority Model\n   A Trust Authority may be operated by a PKI, a\
    \ collection of relying\n   parties that share a common set of users, an enterprise\
    \ on behalf of\n   all of its relying parties, or an independent entity.  Although\
    \ PKIs\n   generally establish trust relationships through cross-certificates,\
    \ a\n   PKI may choose to provide a Trust Authority to support relying\n   parties\
    \ that do not support processing of certification paths.  A\n   collection of\
    \ relying parties that share a common set of users may\n   choose to maintain\
    \ a single Trust Authority to simplify the\n   management of Trust Lists.  An\
    \ enterprise may choose to provide a\n   Trust Authority to implement enterprise\
    \ policies and direct all\n   Relying Parties within the enterprise to use its\
    \ Trust Authority.\n   Finally, an independent entity may choose to operate a\
    \ Trust\n   Authority as a managed service.\n"
- title: 4.2.  Trust List Considerations
  contents:
  - '4.2.  Trust List Considerations

    '
- title: 4.2.1.  Considerations for a PKI
  contents:
  - "4.2.1.  Considerations for a PKI\n   A PKI should publish its Certificate Policy\
    \ Document so that Relying\n   Parties and Trust Authorities can determine what,\
    \ if any, warranties\n   are provided by the PKI regarding reliance on EE certificates.\n\
    \   A PKI should broadly publicize information regarding revocation or\n   compromise\
    \ of a trust anchor CA or Principal CA certificate through\n   notice on a web\
    \ page, press release, and/or other appropriate\n   mechanisms so that Relying\
    \ Parties and Trust Authorities can\n   determine if a trust anchor CA or Principal\
    \ CA certificate installed\n   in a Trust List should be removed.\n   A PKI should\
    \ publish Certificate Revocation Lists (CRLs) or other\n   information regarding\
    \ the revocation status of EE certificates to a\n   repository that can be accessed\
    \ by any party that desires to rely on\n   the EE certificates.\n"
- title: 4.2.2.  Considerations for Relying Parties and Trust Authorities
  contents:
  - "4.2.2.  Considerations for Relying Parties and Trust Authorities\n   Relying\
    \ Parties and Trust Authorities are responsible for the\n   following prior to\
    \ including a PKI in the Trust List:\n   o  Reviewing the Certificate Policy Document\
    \ of each PKI to determine\n      that the PKI is operated to an acceptable level\
    \ of assurance;\n   o  Reviewing the Certificate Policy Document of each PKI to\
    \ ensure\n      any requirements imposed on Relying Parties are met;\n   o  Determining\
    \ if the PKI provides any warranties regarding reliance\n      on EE certificates,\
    \ and if these warranties are acceptable for the\n      intended reliance on the\
    \ EE certificates.  Reliance may be at the\n      relying party's own risk; and\n\
    \   o  Periodically reviewing information published by the PKI to its\n      repository,\
    \ including Certificate Policy Document updates or\n      notice of CA revocation\
    \ or compromise.\n   A PKI can choose to join or leave PKI domains in accordance\
    \ with its\n   Certificate Policy Document.  If the relying party or Trust Authority\n\
    \   does not wish to inherit trust in other members of these PKI domains,\n  \
    \ it is the responsibility of the relying party or Trust Authority to\n   inhibit\
    \ policy mapping.\n"
- title: 4.2.3.  Additional Considerations for Trust Authorities
  contents:
  - "4.2.3.  Additional Considerations for Trust Authorities\n   A Trust Authority\
    \ should establish a Trust Authority Policy that\n   identifies the following:\n\
    \   o  The intended community of Relying Parties that will use the Trust\n   \
    \   Authority;\n   o  The process by which trust anchors are added or removed\
    \ from the\n      Trust List;\n   o  Any warranties provided by the Trust Authority\
    \ for reliance on EE\n      certificates.  These warranties may be those provided\
    \ by the PKIs\n      themselves or may be additional warranties provided by the\
    \ Trust\n      Authority;\n   o  Information regarding how the Trust Authority\
    \ protects the\n      integrity of its Trust List; and\n   o  Information regarding\
    \ how Relying Parties interact with the Trust\n      Authority to obtain information\
    \ as to whether an EE certificate is\n      trusted.\n"
- title: 5.  Abbreviations
  contents:
  - "5.  Abbreviations\n   CA:  Certification Authority\n   EE:  End Entity\n   OID:\
    \  Object Identifier\n   PCA:  Principal Certification Authority\n   PKI:  Public\
    \ Key Infrastructure\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This section highlights security considerations\
    \ related to\n   establishing PKI domains.\n"
- title: 6.1.  PKI Domain Models
  contents:
  - "6.1.  PKI Domain Models\n   For all PKI domain models described in Section 3.3\
    \ created through\n   the issuance of cross-certificates, standard threats including\n\
    \   message insertion, modification, and man-in-the-middle are not\n   applicable\
    \ because all information created by CAs, including policy\n   mapping and constraints,\
    \ is digitally signed by the CA generating the\n   cross-certificate.\n   Verifying\
    \ that a given certificate was issued by a member of a PKI\n   domain may be a\
    \ time-critical determination.  If cross-certificates\n   and revocation status\
    \ information cannot be obtained in a timely\n   manner, a denial of service may\
    \ be experienced by the end entity.  In\n   situations where such verification\
    \ is critical, caching of cross-\n   certificates and revocation status information\
    \ may be warranted.\n   An additional security consideration for PKI domains is\
    \ creating\n   inadvertent trust relationships, which can occur if a single PKI\
    \ is a\n   member of multiple PKI domains.  See Section 3.2.3 for a discussion\n\
    \   of creating inadvertent trust relationships and mechanisms to prevent\n  \
    \ it.\n   Finally, members of PKI domains must participate in domain\n   governance,\
    \ or at a minimum, be informed anytime a PKI joins or\n   leaves the domain, so\
    \ that domain members can make appropriate\n   decisions for maintaining their\
    \ own membership in the domain or\n   choosing to restrict or deny trust in the\
    \ new member PKI.\n"
- title: 6.2.  Trust List Models
  contents:
  - "6.2.  Trust List Models\n   In these models, many standard attacks are not applicable\
    \ since\n   certificates are digitally signed.  Additional security\n   considerations\
    \ apply when trust is created through a Trust List.\n   A variation of the modification\
    \ attack is possible in Trust List\n   Models.  If an attacker is able to add\
    \ or remove CAs from the relying\n   party or Trust Authority Trust List, the\
    \ attacker can affect which\n   certificates will or will not be accepted.  To\
    \ prevent this attack,\n   access to Trust Lists must be adequately protected\
    \ against\n   unauthorized modification.  This protection is especially important\n\
    \   for trust anchors that are used by multiple applications, as it is a\n   key\
    \ vulnerability of this model.  This attack may result in\n   unauthorized usage\
    \ if a CA is added to a Trust List, or denial of\n   service if a CA is removed\
    \ from a Trust List.\n   For Trust Authority models, a denial-of-service attack\
    \ is also\n   possible if the application cannot obtain timely information from\
    \ the\n   trust anchor.  Applications should specify service-level agreements\n\
    \   with Trust Authority.  In addition, applications may choose to\n   locally\
    \ cache the list of CAs maintained by the Trust Authority as a\n   backup in the\
    \ event that the trust anchor's repository (e.g.,\n   Lightweight Directory Access\
    \ Protocol (LDAP) directory) is not\n   available.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC5280]          Cooper, D., Santesson, S.,\
    \ Farrell, S., Boeyen,\n                      S., Housley, R., and W. Polk, \"\
    Internet X.509\n                      Public Key Infrastructure Certificate and\n\
    \                      Certificate Revocation List (CRL) Profile\",\n        \
    \              RFC 5280, May 2008.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [CCITT.X509.2000]  International Telephone and\
    \ Telegraph Consultative\n                      Committee, \"Information Technology\
    \ - Open Systems\n                      Interconnection - The Directory: Authentication\n\
    \                      Framework\", CCITT Recommendation X.509,\n            \
    \          March 2000.\n   [FPKIMETHOD]       \"US Government PKI Cross-Certification\
    \ Criteria\n                      and Methodology\", January 2006, <http://\n\
    \                      www.cio.gov/fpkia/documents/\n                      crosscert_method_criteria.pdf>.\n\
    \   [RFC3647]          Chokhani, S., Ford, W., Sabett, R., Merrill, C.,\n    \
    \                  and S. Wu, \"Internet X.509 Public Key\n                  \
    \    Infrastructure Certificate Policy and\n                      Certification\
    \ Practices Framework\", RFC 3647,\n                      November 2003.\n   [RFC4949]\
    \          Shirey, R., \"Internet Security Glossary, Version\n               \
    \       2\", RFC 4949, August 2007.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Masaki Shimaoka (editor)\n   SECOM Co., Ltd. Intelligent\
    \ System Laboratory\n   SECOM SC Center, 8-10-16 Shimorenjaku\n   Mitaka, Tokyo\
    \  181-8528\n   JP\n   EMail: m-shimaoka@secom.co.jp\n   Nelson Hastings\n   National\
    \ Institute of Standard and Technology\n   100 Bureau Drive, Stop 8930\n   Gaithersburg,\
    \ MD  20899-8930\n   US\n   EMail: nelson.hastings@nist.gov\n   Rebecca Nielsen\n\
    \   Booz Allen Hamilton\n   8283 Greensboro Drive\n   McLean, VA  22102\n   US\n\
    \   EMail: nielsen_rebecca@bah.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
