Abstract The purpose of this document is to make the Advanced Encryption Standard (AES)
Key Wrap algorithm conveniently available to the Internet community.
The United States of America has adopted AES as the new encryption standard.
The AES Key Wrap algorithm will probably be adopted by the USA for encryption of AES keys.
The authors took most of the text in this document from the draft AES Key Wrap posted by NIST.
Most of the following text is taken from [AES WRAP], and the assertions regarding the security of the AES Key Wrap algorithm are made by the US Government, not by the authors of this document.
This specification is intended to satisfy the National Institute of Standards and Technology (NIST)
Key Wrap requirement to:  Design a cryptographic algorithm called a Key Wrap that uses the Advanced Encryption Standard (AES) as a primitive to securely encrypt plaintext key(s) with any associated integrity information and data, such that the combination could be longer than the width of the AES block size (128 bits).
Each ciphertext bit should be a highly non  linear function of each plaintext bit, and (when unwrapping) each plaintext bit should be a highly non linear function of each ciphertext bit.
It is sufficient to approximate an ideal pseudorandom permutation to the degree that exploitation of undesirable phenomena is as unlikely as guessing the AES engine key.
This key wrap algorithm needs to provide ample security to protect keys in the context of prudently designed key management architecture.
Throughout this document, any data being wrapped will be referred to as the key data.
It makes no difference to the algorithm whether the data being wrapped is a key; in fact there is often good reason to include other data with the key, to wrap multiple keys together, or to wrap data that isn't strictly a key.
So, the term "key data" is used broadly to mean any data being wrapped, but particularly keys, since this is primarily a key wrap algorithm.
The key used to do the wrapping will be referred to as the key encryption key (KEK).
In this document a KEK can be any valid key supported by the AES codebook.
That is, a KEK can be a 128 bit key, a 192 bit key, or a 256 bit key.
The AES key wrap algorithm is designed to wrap or encrypt key data.
The key wrap operates on blocks of 64 bits.
Before being wrapped, the key data is parsed into n blocks of 64 bits.
The only restriction the key wrap algorithm places on n is that n be at least two.
(For key data with length less than or equal to 64 bits, the constant field used in this specification and the key data form a single 128 bit codebook input making this key wrap unnecessary.)
The key wrap algorithm accommodates all supported AES key sizes.
However, other cryptographic values often need to be wrapped.
One such value is the seed of the random number generator for DSS.
This seed value requires n to be greater than four.
Undoubtedly other values require this type of protection.
Therefore, no upper bound is imposed on n.
The AES key wrap can be configured to use any of the three key sizes supported by the AES codebook.
The choice of a key size affects the overall security provided by the key wrap, but it does not alter the description of the key wrap algorithm.
Therefore, in the description that follows, the key wrap is described generically; no key size is specified for the KEK.
The following notation is used in the description of the key wrapping algorithms:
Encrypt W using the AES codebook with key K AES 1(K, W)
Return the least significant j bits of W B1
The key encryption key K n
The number of 64 bit key data blocks s
The number of steps in the wrapping process, s
The ith plaintext key data block C[i]
The ith ciphertext data block
The contents of registers A and R[i]
after encryption step t. IV
The 64 bit initial value used during the wrapping process.
In the key wrap algorithm, the concatenation function will be used to concatenate 64 bit quantities to form the 128 bit input to the AES codebook.
The extraction functions will be used to split the 128 bit output from the AES codebook into two 64 bit quantities.
The specification of the key wrap algorithm requires the use of the AES codebook [AES].
The next three sections will describe the key wrap algorithm, the key unwrap algorithm, and the inherent data integrity check.
The inputs to the key wrapping process are the KEK and the plaintext to be wrapped.
The plaintext consists of n 64 bit blocks, containing the key data being wrapped.
The key wrapping process is described below.
Set A0 to an initial value (see 2.2.3)
For i   1 to n R[0][i]
P[i] 2) Calculate intermediate values.
For t   1 to s, where s   6n
MSB(64, AES(K, A[t 1]   R[t 1][1]))
For i   1 to n 1 R[t][i]
LSB(64, AES(K, A[t 1]   R[t 1][1])) 3) Output the results.
For i   1 to n C[i]
An alternative description of the key wrap algorithm involves indexing rather than shifting.
This approach allows one to calculate the wrapped key in place, avoiding the rotation in the previous description.
This produces identical results and is more easily implemented in software.
Set A   IV, an initial value (see 2.2.3)
For i   1 to n R[i]
P[i] 2) Calculate intermediate values.
For j   0 to 5
For i 1 to n B   AES(K, A   R[i])
t where t   (n j)
For i   1 to n C[i]   R[i]
The inputs to the unwrap process are the KEK and (n 1) 64 bit blocks of ciphertext consisting of previously wrapped key.
It returns n blocks of plaintext consisting of the n 64 bit blocks of the decrypted key data.
For i   1 to n R[s][i]
2) Calculate the intermediate values.
For t   s to 1 A[t 1]   MSB(64, AES 1(K, ((A[t]
For i   2 to n R[t 1][i]
R[t][i 1] 3) Output the results.
If A[0] is an appropriate initial value (see 2.2.3), Then For i   1 to n P[i]
Else Return an error The unwrap algorithm can also be specified as an index based operation, allowing the calculations to be carried out in place.
Again, this produces the same results as the register shifting approach.
64 bit values {P0, P1, K, Pn}.
For i   1 to n R[i]
For j   5 to 0
For i   n to 1 B   AES 1(K, (
If A is an appropriate initial value (see 2.2.3), Then For i   1 to n P[i]   R[i]
Else Return an error 2.2.3 Key Data Integrity   the Initial Value
The initial value (IV) refers to the value assigned to A[0]
in the first step of the wrapping process.
This value is used to obtain an integrity check on the key data.
In the final step of the unwrapping process, the recovered value of A[0] is compared to the expected value of A[0].
If there is a match, the key is accepted as valid, and the unwrapping algorithm returns it.
If there is not a match, then the key is rejected, and the unwrapping algorithm returns an error.
The exact properties achieved by this integrity check depend on the definition of the initial value.
Different applications may call for somewhat different properties; for example, whether there is need to determine the integrity of key data throughout its lifecycle or just when it is unwrapped.
This specification defines a default initial value that supports integrity of the key data during the period it is wrapped (2.2.3.1).
Provision is also made to support alternative initial values (in 2.2.3.2).
The default initial value (IV) is defined to be the hexadecimal constant:
The use of a constant as the IV supports a strong integrity check on the key data during the period that it is wrapped.
A6A6A6A6A6A6A6A6, then the chance that the key data is corrupt is 2^ 64.
any other value, then the unwrap must return an error and not return any key data.
When the key wrap is used as part of a larger key management protocol or system, the desired scope for data integrity may be more than just the key data or the desired duration for more than just the period that it is wrapped.
Also, if the key data is not just an AES key, it may not always be a multiple of 64 bits.
Alternative definitions of the initial value can be used to address such problems.
NIST will define alternative initial values in future key management publications as needed.
In order to accommodate a set of alternatives that may evolve over time, key wrap implementations that are not application specific will require some flexibility in the way that the initial value is set and tested.
Object Identifiers NIST has assigned the following object identifiers to identify the key wrap algorithm with the default initial value specified in 2.2.3.1.
One object identifier is assigned for use with each of the KEK AES key sizes.
} id aes128 wrap  OBJECT
The examples in this section were generated using the index based implementation of the key wrap algorithm.
The use of this approach allows a straightforward software implementation of the key wrap algorithm.
4.1 Wrap 128 bits of Key Data with a 128 bit
8899AABBCCDDEEFF Enc  F4740052E82A2251 74CE86FBD7B805E7 8899AABBCCDDEEFF
F4740052E82A2250 74CE86FBD7B805E7 8899AABBCCDDEEFF Enc  06BA4EBDE7768D0B 74CE86FBD7B805E7
FE6E8D679C5D3460 D132EE38147E76F8 Enc  5896EA9028EE203B FE6E8D679C5D3460
XorT 5896EA9028EE203F FE6E8D679C5D3460 07B2BD973E36A6FC 5
XorT 93AEA71B258D90C6 25F5A3ADC2195401 07B2BD973E36A6FC 6
Dec  5896EA9028EE203F FE6E8D679C5D3460 07B2BD973E36A6FC 4
In   06BA4EBDE7768D09 74CE86FBD7B805E7 D132EE38147E76F8 XorT 06BA4EBDE7768D0B
4.2 Wrap 128 bits of Key Data with a 192 bit KEK Input:
8899AABBCCDDEEFF Enc  DFE8FD5D1A3786A7 351D385096CCFB29 8899AABBCCDDEEFF
Enc  5933A9195B5F5E21 D40B091CDBAC0340 89F0D6C06F8CA9B4 XorT 5933A9195B5F5E29 D40B091CDBAC0340 89F0D6C06F8CA9B4 9
EB24CCFA52EA9078 XorT BF17BD6A9BC80169 4D5B3DFE7C04ABBA EB24CCFA52EA9078 11
In   BF17BD6A9BC80169 4D5B3DFE7C04ABBA EB24CCFA52EA9078 Enc  B68BF270AE81544F F92B5B97C050AED2 EB24CCFA52EA9078 XorT B68BF270AE815444 F92B5B97C050AED2 EB24CCFA52EA9078 12
In   B68BF270AE815444 F92B5B97C050AED2 EB24CCFA52EA9078 Enc  96778B25AE6CA439 F92B5B97C050AED2 468AB8A17AD84E5D XorT
Ciphertext:  96778B25AE6CA435 F92B5B97C050AED2 468AB8A17AD84E5D Unwrap: Step t
96778B25AE6CA435 F92B5B97C050AED2 468AB8A17AD84E5D XorT 96778B25AE6CA439 F92B5B97C050AED2
468AB8A17AD84E5D Dec  B68BF270AE815444 F92B5B97C050AED2 EB24CCFA52EA9078 11
In   B68BF270AE815444 F92B5B97C050AED2 EB24CCFA52EA9078 XorT B68BF270AE81544F F92B5B97C050AED2
Dec  5933A9195B5F5E29 D40B091CDBAC0340 89F0D6C06F8CA9B4 8
In   5933A9195B5F5E29 D40B091CDBAC0340 89F0D6C06F8CA9B4 XorT 5933A9195B5F5E21 D40B091CDBAC0340
4.3 Wrap 128 bits of Key Data with a 256 bit KEK Input:
Enc  2656A02DFFF054DC F4DF378183E3D5B2 58924F777C3F678C XorT 2656A02DFFF054D9
Enc  DDFD0C0E8B52A63A F4DF378183E3D5B2 91AC1D36A964F41B XorT
4.4 Wrap 192 bits of Key Data with a 192 bit KEK Input:
In   A6A6A6A6A6A6A6A6 0011223344556677 8899AABBCCDDEEFF 0001020304050607
Enc  DFE8FD5D1A3786A7 351D385096CCFB29 8899AABBCCDDEEFF 0001020304050607
9D9B32B9ED742E00 351D385096CCFB29 51F22F3286758A2D 0001020304050607 2
XorT 9D9B32B9ED742E02 351D385096CCFB29 51F22F3286758A2D 0001020304050607
DFE8FD5D1A3786A6 351D385096CCFB29 8899AABBCCDDEEFF 0001020304050607 1
Key Data:  00112233445566778899AABBCCDDEEFF0001020304050607 4.5 Wrap 192 bits of Key Data with a 256 bit
In   A6A6A6A6A6A6A6A6 0011223344556677 8899AABBCCDDEEFF 0001020304050607
Enc  82F597607784A33C FB1F2965FCE1E783 73EDC8CB9322C34E 0B08CFDF48020F0D
Enc  D48E5E83B7C906DB FB1F2965FCE1E783 D36F4FFBA2C82ED9 0B08CFDF48020F0D
XorT D48E5E83B7C906D5 FB1F2965FCE1E783 D36F4FFBA2C82ED9 0B08CFDF48020F0D 15
In   D48E5E83B7C906D5 FB1F2965FCE1E783 D36F4FFBA2C82ED9 0B08CFDF48020F0D
D36F4FFBA2C82ED9 C490C33642717146 XorT C9F5F26A378011CE F6E6F4FBE30E71E4
In   C9F5F26A378011CE F6E6F4FBE30E71E4 D36F4FFBA2C82ED9 C490C33642717146
Dec  D48E5E83B7C906D5 FB1F2965FCE1E783 D36F4FFBA2C82ED9 0B08CFDF48020F0D 14
In   D48E5E83B7C906D5 FB1F2965FCE1E783 D36F4FFBA2C82ED9 0B08CFDF48020F0D
XorT D48E5E83B7C906DB FB1F2965FCE1E783 D36F4FFBA2C82ED9 0B08CFDF48020F0D
6CA405593A3B5154 Dec  F1D28EA6295891E8 0CC86A4D9B9C6A31 F60E0CDB7F429FE8 6CA405593A3B5154 4
Dec  D450EA5C5BBCB563 F661BD9F31FBFA31 F60E0CDB7F429FE8 0001020304050607 2
Key Data:  00112233445566778899AABBCCDDEEFF0001020304050607 4.6 Wrap 256 bits of Key Data with a 256 bit
In   A6A6A6A6A6A6A6A6 0011223344556677 8899AABBCCDDEEFF 0001020304050607 08090A0B0C0D0E0F
F661BD9F31FBFA31 8899AABBCCDDEEFF 0001020304050607 08090A0B0C0D0E0F 2
F661BD9F31FBFA31 F60E0CDB7F429FE8 0001020304050607 08090A0B0C0D0E0F 3
Enc  4EF02EDD3146AFBB E7D1194D853E53F8 F60E0CDB7F429FE8 6CA405593A3B5154
XorT 4EF02EDD3146AFBE E7D1194D853E53F8 F60E0CDB7F429FE8 6CA405593A3B5154
In   4EF02EDD3146AFBE E7D1194D853E53F8 F60E0CDB7F429FE8 6CA405593A3B5154
In   963AAFFD96B223EA E7D1194D853E53F8 EFD48BA304945576 6CA405593A3B5154
EFD48BA304945576 C365B66943E2D760 E5923CB9FDB56FBC Enc  C58B9D3AC6D5B94E E7D1194D853E53F8
DBA417FB51F9E3CB D6AE29ECE7192D43 FBEC169FA5C0F6BA C365B66943E2D760 73E3B6CBE5D05D74
XorT DBA417FB51F9E3C1 D6AE29ECE7192D43 FBEC169FA5C0F6BA C365B66943E2D760 73E3B6CBE5D05D74 11
FBEC169FA5C0F6BA C365B66943E2D760 73E3B6CBE5D05D74 Enc  0629EB29A42E4FD9
FBEC169FA5C0F6BA F56701DAF0388216 73E3B6CBE5D05D74 XorT 0629EB29A42E4FD2
D6AE29ECE7192D43 FBEC169FA5C0F6BA F56701DAF0388216 73E3B6CBE5D05D74 12
D6AE29ECE7192D43 FBEC169FA5C0F6BA F56701DAF0388216 73E3B6CBE5D05D74 Enc  F9ED8A1429515665 D6AE29ECE7192D43 FBEC169FA5C0F6BA F56701DAF0388216 3CF149E90E8C04D9 XorT F9ED8A1429515669
15342443CB95ADBF 4745856AF333F01F BCA418BBF7DCE60B F56701DAF0388216 3CF149E90E8C04D9
C272E9466AAE98F9 40F68C91DB49702C XorT 5075496800978B5A 4745856AF333F01F
Enc  C89A96CA7B163ECC CBCCB35CFB87F826 F7EDAD518C960D36 1CFBF6B4C24CB982
CBCCB35CFB87F826 3F5786E2D80ED326 CBC7F0E71A99F43B 07DFE775B9687E73 24
Enc  28C9F404C4B810EC CBCCB35CFB87F826 3F5786E2D80ED326 CBC7F0E71A99F43B
Dec  0AEB82AE3146A90C CBCCB35CFB87F826 3F5786E2D80ED326 CBC7F0E71A99F43B 07DFE775B9687E73 23
XorT C89A96CA7B163ECC CBCCB35CFB87F826 F7EDAD518C960D36 1CFBF6B4C24CB982
1BB8C765A84195E7 F7EDAD518C960D36 C272E9466AAE98F9 40F68C91DB49702C XorT F19D80D437EFE8F9 1BB8C765A84195E7 F7EDAD518C960D36
D6AE29ECE7192D43 FBEC169FA5C0F6BA F56701DAF0388216 3CF149E90E8C04D9 Dec  0629EB29A42E4FD2
D6AE29ECE7192D43 FBEC169FA5C0F6BA C365B66943E2D760 73E3B6CBE5D05D74 10
EFD48BA304945576 C365B66943E2D760 73E3B6CBE5D05D74 XorT 1A681354E84C41F8
66D7A8ADD086B9DA E7D1194D853E53F8 EFD48BA304945576 C365B66943E2D760 E5923CB9FDB56FBC 7
Dec  963AAFFD96B223EA E7D1194D853E53F8 EFD48BA304945576 6CA405593A3B5154
In   963AAFFD96B223EA E7D1194D853E53F8 EFD48BA304945576 6CA405593A3B5154
Dec  4EF02EDD3146AFBE E7D1194D853E53F8 F60E0CDB7F429FE8 6CA405593A3B5154
In   4EF02EDD3146AFBE E7D1194D853E53F8 F60E0CDB7F429FE8 6CA405593A3B5154
XorT 4EF02EDD3146AFBB E7D1194D853E53F8 F60E0CDB7F429FE8 6CA405593A3B5154
F661BD9F31FBFA31 8899AABBCCDDEEFF 0001020304050607 08090A0B0C0D0E0F 1
The key wrap algorithm includes a strong integrity check on the key data.
If unwrapping produces the expected check value in A[0], then the chance that the key data is corrupt is 2^ 64.
If unwrapping produces an unexpected value, then the algorithm implementation MUST return an error, and it MUST NOT return any key data.
Implementations must protect the KEK from disclosure.
Compromise of the KEK may result in the disclosure of all key data protected with that KEK.
