- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                        S. Deering
  contents:
  - "Independent Submission                                        S. Deering\n  \
    \            Simple Internet Protocol (SIP) Specification\n"
- title: Abstract
  contents:
  - "Abstract\n   This document is published for the historical record.  The Simple\n\
    \   Internet Protocol was the basis for one of the candidates for the\n   IETF's\
    \ Next Generation (IPng) work that became IPv6.\n   The publication date of the\
    \ original Internet-Draft was November 10,\n   1992.  It is presented here substantially\
    \ unchanged and is neither a\n   complete document nor intended to be implementable.\n\
    \   The paragraph that follows is the Abstract from the original draft.\n   This\
    \ document specifies a new version of IP called SIP, the Simple\n   Internet Protocol.\
    \  It also describes the changes needed to ICMP,\n   IGMP, and transport protocols\
    \ such as TCP and UDP, in order to work\n   with SIP.  A companion document [SIP-ADDR]\
    \ describes the addressing\n   and routing aspects of SIP, including issues of\
    \ auto-configuration,\n   host and subnet mobility, and multicast.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for the historical record.\n   This document defines a Historic\
    \ Document for the Internet community.\n   This is a contribution to the RFC Series,\
    \ independently of any other\n   RFC stream.  The RFC Editor has chosen to publish\
    \ this document at\n   its discretion and makes no statement about its value for\n\
    \   implementation or deployment.  Documents approved for publication by\n   the\
    \ RFC Editor are not candidates for any level of Internet Standard;\n   see Section\
    \ 2 of RFC 7841.\n   Information about the current status of this document, any\
    \ errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8507.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Preface .........................................................3\n\
    \   2. Introduction ....................................................3\n  \
    \ 3. Terminology .....................................................4\n   4.\
    \ SIP Header Format ...............................................5\n   5. Addresses\
    \ .......................................................6\n      5.1. Text Representation\
    \ of Addresses ...........................6\n      5.2. Unicast Addresses ..........................................6\n\
    \      5.3. Multicast Addresses ........................................8\n  \
    \    5.4. Special Addresses ..........................................9\n   6.\
    \ Packet Size Issues .............................................12\n   7. Source\
    \ Routing Header ..........................................13\n   8. Fragmentation\
    \ Header ...........................................14\n   9. Changes to Other\
    \ Protocols .....................................16\n      9.1. Changes to ICMP\
    \ ...........................................16\n      9.2. Changes to IGMP ...........................................20\n\
    \      9.3. Changes to Transport Protocols ............................21\n  \
    \    9.4. Changes to Link-Layer Protocols ...........................22\n   10.\
    \ Security Considerations .......................................22\n   11. Acknowledgments\
    \ ...............................................23\n   12. Informative References\
    \ ........................................23\n   Appendix A. SIP Design Rationale\
    \ ..................................25\n   Appendix B. Future Directions .....................................25\n\
    \   Authors' Addresses ................................................26\n"
- title: 1.  Preface
  contents:
  - "1.  Preface\n   This document is published for the historical record.\n   Simple\
    \ IP (SIP) was the basis for one of the candidates for the\n   IETF's Next Generation\
    \ (IPng) work; see \"The Recommendation for the\n   IP Next Generation Protocol\"\
    \ [RFC1752].  The original 1992\n   Internet-Draft describing SIP is published\
    \ here as part of the record\n   of that work.\n   SIP evolved into SIP Plus [RFC1710],\
    \ which was assessed as a\n   candidate for IPng [RFC1752] and led eventually\
    \ to the development of\n   IPv6, first published as [RFC1883].  The current specification\
    \ for\n   IPv6 is [RFC8200].\n   The original Internet-Draft describing the Simple\
    \ Internet Protocol\n   was written by Steve Deering, and the Internet-Draft was\
    \ posted on\n   November 10, 1992.  The contents of this document are unchanged\
    \ from\n   that Internet-Draft, except for clarifications in the Abstract, the\n\
    \   addition of this section, modifications to the authors' information,\n   the\
    \ updating of references, removal of the IANA considerations, and\n   minor formatting\
    \ changes.\n   It should be noted that the original draft was not complete and\
    \ that\n   no attempt has been made to complete it.  This document is not\n  \
    \ intended to be implementable.\n"
- title: 2.  Introduction
  contents:
  - "2.  Introduction\n   SIP is a new version of IP.  Its salient differences from\
    \ IP\n   version 4 [RFC791], subsequently referred to as \"IPv4\", are:\n    \
    \   o  expansion of addresses to 64 bits,\n       o  simplification of the IP\
    \ header by eliminating some\n          inessential fields, and\n       o  relaxation\
    \ of length restrictions on optional data, such as\n          source-routing information.\n\
    \   SIP retains the IP model of globally-unique addresses,\n   hierarchically-structured\
    \ for efficient routing.  Increasing the\n   address size from 32 to 64 bits allows\
    \ more levels of hierarchy to be\n   encoded in the addresses, enough to enable\
    \ efficient routing in an\n   internet with tens of thousands of addressable devices\
    \ in every\n   office, every residence, and every vehicle in the world.  Keeping\
    \ the\n   addresses fixed-length and relatively compact facilitates\n   high-performance\
    \ router and host implementation, and keeps the\n   bandwidth overhead of the\
    \ SIP headers almost as low as IPv4.\n   The elimination of inessential fields\
    \ also contributes to\n   high-performance implementation, and to the likelihood\
    \ of correct\n   implementation.  A change in the way that optional data, such\
    \ as\n   source-routing information, is encoded allows for more efficient\n  \
    \ forwarding and less stringent limits on the length of such data.\n   Despite\
    \ these changes, SIP remains very similar to IPv4.  This\n   similarity makes\
    \ it easy to understand SIP (for those who already\n   understand IPv4), makes\
    \ it possible to reuse much of the code and\n   data structures from IPv4 in an\
    \ implementation of SIP (including\n   almost all of ICMP and IGMP), and makes\
    \ it straightforward to\n   translate between SIP packets and IPv4 packets for\
    \ transition\n   purposes [IPAE].\n   The subsequent sections of this document\
    \ specify SIP and its\n   associated protocols without much explanation of why\
    \ the design\n   choices were made the way they were.  Appendix A presents the\n\
    \   rationale for those aspects of SIP that differ from IPv4.\n"
- title: 3.  Terminology
  contents:
  - "3.  Terminology\n    system      - a device that implements SIP.\n    router\
    \      - a system that forwards SIP packets.\n    host        - any system that\
    \ is not a router.\n    link        - a communication facility or medium over\
    \ which systems\n                  can communicate at the link layer, i.e., the\
    \ layer\n                  immediately below SIP.\n    interface   - a system's\
    \ attachment point to a link.\n    address     - a SIP-layer identifier for an\
    \ interface or a group of\n                  interfaces.\n    subnet      - in\
    \ the SIP unicast addressing hierarchy, a\n                  lowest-level (finest-grain)\
    \ cluster of addresses,\n                  sharing a common address prefix (i.e.,\
    \ high-order\n                  address bits).  Typically, all interfaces attached\
    \ to\n                  the same link have addresses in the same subnet;\n   \
    \               however, in some cases, a single link may support more\n     \
    \             than one subnet, or a single subnet may span more than\n       \
    \           one link.\n    link MTU    - the maximum transmission unit, i.e.,\
    \ maximum packet\n                  size in octets, that can be conveyed in one\
    \ piece over\n                  a link (where a packet is a SIP header plus payload).\n\
    \    path MTU    - the minimum link MTU of all the links in a path\n         \
    \         between a source system and a destination system.\n    packetization\n\
    \    layer       - any protocol layer above SIP that is responsible for\n    \
    \              packetizing data to fit within outgoing SIP packets.\n        \
    \          Typically, transport-layer protocols, such as TCP, are\n          \
    \        packetization protocols, but there may also be\n                  higher-layer\
    \ packetization protocols, such as\n                  protocols implemented on\
    \ top of UDP.\n"
- title: 4.  SIP Header Format
  contents:
  - "4.  SIP Header Format\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |Version|                        Reserved                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Payload Length        |  Payload Type |   Hop Limit   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   +  \
    \                       Source Address                        +\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   +  \
    \                    Destination Address                      +\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Version              4-bit IP version number = decimal 6.\n              \
    \          <to be confirmed>\n   Reserved             28-bit reserved field. \
    \ Initialized to zero\n                        for transmission; ignored on reception.\n\
    \   Payload Length       16-bit unsigned integer.  Length of payload,\n      \
    \                  i.e., the rest of the packet following the\n              \
    \          SIP header, in octets.\n   Payload Type         8-bit selector.  Identifies\
    \ the type of\n                        payload, e.g., TCP.\n   Hop Limit     \
    \       8-bit unsigned integer.  Decremented by 1\n                        by\
    \ each system that forwards the packet.\n                        The packet is\
    \ discarded if Hop Limit is\n                        decremented to zero.\n  \
    \ Source Address       64 bits.  See \"Addresses\" section, following.\n   Destination\
    \ Address  64 bits.  See \"Addresses\" section, following.\n"
- title: 5.  Addresses
  contents:
  - '5.  Addresses

    '
- title: 5.1.  Text Representation of Addresses
  contents:
  - "5.1.  Text Representation of Addresses\n   SIP addresses are 64 bits (8 octets)\
    \ long.  The text representation\n   of a SIP addresses is 16 hexadecimal digits,\
    \ with a colon between the\n   4th and 5th digits, and optional colons between\
    \ any subsequent pair\n   of digits.  Leading zeros must not be dropped.  Examples:\n\
    \          0123:4567:89AB:CDEF\n          0123:456789ABCDEF\n          0123:456789AB:CDE:F\n\
    \   Programs that read the text representation of SIP addresses must be\n   insensitive\
    \ to the presence or absence of optional colons.  Programs\n   that write the\
    \ text representation of a SIP address should use the\n   first format above (i.e.,\
    \ colons after the 4th, 8th, and 12th\n   digits), in the absence of any knowledge\
    \ of the structure or\n   preferred format of the address, such as knowledge of\
    \ the format in\n   which it was originally read.\n   The presence of at least\
    \ one colon in the text representation allows\n   SIP addresses to be easily distinguished\
    \ from both domain names and\n   the text representation of IPv4 addresses.\n"
- title: 5.2.  Unicast Addresses
  contents:
  - "5.2.  Unicast Addresses\n   A SIP unicast address is a globally-unique identifier\
    \ for a single\n   interface, i.e., no two interfaces in a SIP internet may have\
    \ the\n   same unicast address.  A single interface may, however, have more\n\
    \   than one unicast address.\n   A system considers its own unicast address(es)\
    \ to have the following\n   structure, where different addresses may have different\
    \ values for n:\n    |                         n bits                     |  64-n\
    \ bits |\n    +----------------------------------------------------+------------+\n\
    \    |                     subnet prefix                  |interface ID|\n   \
    \ +----------------------------------------------------+------------+\n   To know\
    \ the length of the subnet prefix, the system is required to\n   associate with\
    \ each of its addresses a 'subnet mask' of the following\n   form:\n    |    \
    \                     n bits                     |  64-n bits |\n    +----------------------------------------------------+------------+\n\
    \    |1111111111111111111111111111111111111111111111111111|000000000000|\n   \
    \ +----------------------------------------------------+------------+\n   A system\
    \ may have a subnet mask of all-ones, which means that the\n   system belongs\
    \ to a subnet containing exactly one system -- itself.\n   A system acquires its\
    \ subnet mask(s) at the same time, and by the\n   same mechanism, as it acquires\
    \ its address(es), for example, by\n   manual configuration or by a dynamic configuration\
    \ protocol such as\n   BOOTP [RFC951].\n   Hosts are ignorant of any further structure\
    \ in a unicast address.\n   Routers may acquire, through manual configuration\
    \ or the operation of\n   routing protocols, additional masks that identify higher-level\n\
    \   clusters in a hierarchical addressing plan.  For example, the routers\n  \
    \ within a single site would typically have a 'site mask', such as the\n   following:\n\
    \    |                  m bits                 |       64-m bits       |\n   \
    \ +-----------------------------------------+-----------------------+\n    |11111111111111111111111111111111111111111|00000000000000000000000|\n\
    \    +-----------------------------------------+-----------------------+\n   by\
    \ which they could deduce the following structure in the site's\n   addresses:\n\
    \    |                  m bits                 |  p bits  | 64-m-p bits|\n   \
    \ +-----------------------------------------+----------+------------+\n    | \
    \               site prefix              |subnet  ID|interface ID|\n    +-----------------------------------------+----------+------------+\n\
    \   All knowledge by SIP systems of the structure of unicast addresses is\n  \
    \ based on possession of such masks -- there is no \"wired-in\" knowledge\n  \
    \ of unicast address formats.\n   The SIP Addressing and Routing document [SIP-ADDR]\
    \ proposes two\n   hierarchical addressing plans, one based on a hierarchy of\
    \ SIP\n   service providers, and one based on a geographic hierarchy.\n"
- title: 5.3.  Multicast Addresses
  contents:
  - "5.3.  Multicast Addresses\n   A SIP multicast address is an identifier for a\
    \ group of interfaces.\n   An interface may belong to any number of multicast\
    \ groups.  Multicast\n   addresses have the following format:\n    |1|   7   |\
    \  4 |  4 |                  48 bits                    |\n    +-+-------+----+----+---------------------------------------------+\n\
    \    |C|1111111|flgs|scop|                  group ID                   |\n   \
    \ +-+-------+----+----+---------------------------------------------+\n   where:\n\
    \     C = IPv4 compatibility flag; see [IPAE].\n     1111111 in the rest of the\
    \ first octet identifies the address as\n             being a multicast address.\n\
    \                                 +-+-+-+-+\n     flgs is a set of 4 flags:  \
    \ |0|0|0|T|\n                                 +-+-+-+-+\n       the high-order\
    \ 3 flags are reserved, and must be initialized\n       to 0.\n       T = 0 indicates\
    \ a permanently-assigned (\"well-known\") multicast\n             address, assigned\
    \ by the global internet numbering\n             authority.\n       T = 1 indicates\
    \ a non-permanently-assigned (\"transient\")\n             multicast address.\n\
    \     scop is a 4-bit multicast scope value:\n       0 reserved\n       1 intra-system\
    \ scope\n       2 intra-link scope\n       3 (unassigned)\n       4 (unassigned)\n\
    \       5 intra-site scope\n       6 (unassigned)\n       7 (unassigned)\n   \
    \    8 intra-metro scope\n       9 (unassigned)\n       A (unassigned)\n     \
    \  B intra-country scope\n       C (unassigned)\n       D (unassigned)\n     \
    \  E global scope\n       F reserved\n     group ID identifies the multicast group,\
    \ either permanent or\n     transient, within the given scope.\n   The \"meaning\"\
    \ of a permanently-assigned multicast address is\n   independent of the scope\
    \ value.  For example, if the \"NTP servers\n   group\" is assigned a permanent\
    \ multicast address with a group ID of\n   43 (hex), then:\n     7F01:000000000043\
    \ means all NTP servers on the same system as the\n     sender.\n     7F02:000000000043\
    \ means all NTP servers on the same link as the\n     sender.\n     7F05:000000000043\
    \ means all NTP servers at the same site as the\n     sender.\n     7F0E:000000000043\
    \ means all NTP servers in the internet.\n   Non-permanently-assigned multicast\
    \ addresses are meaningful only\n   within a given scope.  For example, a group\
    \ identified by the\n   non-permanent, intra-site multicast address 7F15:000000000043\
    \ at one\n   site bears no relationship to a group using the same address at a\n\
    \   different site, nor to a non-permanent group using the same group ID\n   with\
    \ different scope, nor to a permanent group with the same\n   group ID.\n"
- title: 5.4.  Special Addresses
  contents:
  - "5.4.  Special Addresses\n   There are a number of \"special purpose\" SIP addresses:\n\
    \     The Unspecified Address: 0000:0000:0000:0000\n       This address shall\
    \ never be assigned to any system.  It may be\n       used wherever an address\
    \ appears, to indicate the absence of an\n       address.  One example of its\
    \ use is in the Source Address field\n       of a SIP packet sent by an initializing\
    \ host, before it has\n       learned its own address.\n     The Loopback Address:\
    \ 0000:0000:0000:0001\n       This address may be used by a system to send a SIP\
    \ packet to\n       itself.\n     Anyone Addresses: <prefix><zero>\n       Addresses\
    \ of this form may be used to send to the \"nearest\"\n       system (according\
    \ the routing protocols' measure of distance)\n       that \"knows\" it has a\
    \ unicast address prefix of <prefix>.\n       Since hosts know only their subnet\
    \ prefix(es), and no\n       higher-level prefixes, a host with the following\
    \ address:\n       +----------------------------------------------+----------------+\n\
    \       |               subnet prefix = A              |interface ID = B|\n  \
    \     +----------------------------------------------+----------------+\n    \
    \   shall recognize only the following Anyone address as identifying\n       itself:\n\
    \       +----------------------------------------------+----------------+\n  \
    \     |               subnet prefix = A              |0000000000000000|\n    \
    \   +----------------------------------------------+----------------+\n      \
    \ An intra-site router that knows that one of its addresses has the\n       format:\n\
    \       +-------------------------------+--------------+----------------+\n  \
    \     |         site prefix = X       |subnet  ID = Y|interface ID = Z|\n    \
    \   +-------------------------------+--------------+----------------+\n      \
    \ shall accept packets sent to either of the following two Anyone\n       addresses\
    \ as if they had been sent to the router's own address:\n       +-------------------------------+-------------------------------+\n\
    \       |         site prefix = X       |0000000000000000000000000000000|\n  \
    \     +-------------------------------+-------------------------------+\n    \
    \   +-------------------------------+--------------+----------------+\n      \
    \ |         site prefix = X       |subnet  ID = Y|0000000000000000|\n       +-------------------------------+--------------+----------------+\n\
    \       Anyone Addresses work as follows:\n         If any system belonging to\
    \ subnet A sends a packet to\n         subnet A's Anyone address, the packet shall\
    \ be looped-back\n         within the sending system itself, since it is the nearest\n\
    \         system to itself with the subnet A prefix.  If a system outside\n  \
    \       of subnet A sends a packet to subnet A's Anyone address, the\n       \
    \  packet shall be accepted by the first router on subnet A that\n         the\
    \ packet reaches.\n         Similarly, a packet sent to site X's Anyone address\
    \ from\n         outside of site X shall be accepted by the first encountered\n\
    \         router belonging to site X, i.e., one of site X's boundary\n       \
    \  routers.  If a higher-level prefix P identifies, say, a\n         particular\
    \ service provider, then a packet sent to <P> <zero>\n         from outside of\
    \ provider P's facilities shall be delivered to\n         the nearest entry router\
    \ into P's facilities.\n       Anyone addresses are most commonly used in conjunction\
    \ with the\n       SIP source routing header, to cause a packet to be routed via\
    \ one\n       or more specified \"transit domains\", without the need to identify\n\
    \       individual routers in those domains.\n       The value zero is reserved\
    \ at each level of every unicast address\n       hierarchy, to serve as an Anyone\
    \ address for that level.\n     The Reserved Multicast Address:   7F0s:0000:0000:0000\n\
    \       This multicast address (with any scope value, s) is reserved, and\n  \
    \     shall never be assigned to any multicast group.\n     The All Systems Addresses:\
    \   7F01:0000:0000:0001\n                                  7F02:0000:0000:0001\n\
    \       These multicast addresses identify the group of all SIP systems,\n   \
    \    within scope 1 (intra-system) or 2 (intra-link).\n     The All Hosts Addresses:\
    \   7F01:0000:0000:0002\n                                7F02:0000:0000:0002\n\
    \       These multicast addresses identify the group of all SIP hosts,\n     \
    \  within scope 1 (intra-system) or 2 (intra-link).\n     The All Routers Addresses:\
    \   7F01:0000:0000:0003\n                                  7F02:0000:0000:0003\n\
    \       These multicast addresses identify the group of all SIP routers,\n   \
    \    within scope 1 (intra-system) or 2 (intra-link).\n   A host is required to\
    \ recognize the following addresses as\n   identifying itself: its own unicast\
    \ addresses, the Anyone addresses\n   with the same subnet prefixes as its unicast\
    \ addresses, the Loopback\n   address, the All Systems and All Hosts addresses,\
    \ and any other\n   multicast addresses to which the host belongs.\n   A router\
    \ is required to recognize the following addresses as\n   identifying itself:\
    \ its own unicast addresses, the Anyone addresses\n   with the same subnet or\
    \ higher-level prefixes as its unicast\n   addresses, the Loopback address, the\
    \ All Systems and All Routers\n   addresses, and any other multicast addresses\
    \ to which the host\n   belongs.\n"
- title: 6.  Packet Size Issues
  contents:
  - "6.  Packet Size Issues\n   SIP requires that every link in the internet have\
    \ an MTU of 576\n   octets or greater.  On any link that cannot convey a 576-octet\
    \ packet\n   in one piece, link-specific fragmentation and reassembly must be\n\
    \   provided at a layer below SIP.\n       (Note: this minimum link MTU is NOT\
    \ the same as the one in IPv4.\n       In IPv4, the minimum link MTU is 68 octets\
    \ [ [RFC791], page 25 ];\n       576 octets is the minimum reassembly buffer size\
    \ required in an\n       IPv4 system, which has nothing to do with link MTUs.)\n\
    \   From each link to which a system is directly attached, the system\n   must\
    \ be able to accept packets as large as that link's MTU.  Links\n   that have\
    \ a configurable MTU, such as PPP links [RFC1661], should be\n   configured with\
    \ an MTU of 600 octets or greater.\n   SIP systems are expected to implement Path\
    \ MTU Discovery [RFC1191],\n   in order to discover and take advantage of paths\
    \ with MTU greater\n   than 576 octets.  However, a minimal SIP implementation\
    \ (e.g., in a\n   boot ROM) may simply restrict itself to sending packets no larger\n\
    \   than 576 octets, and omit implementation of Path MTU Discovery.\n   Path MTU\
    \ Discovery requires support both in the SIP layer and in the\n   packetization\
    \ layers.  A system that supports Path MTU Discovery at\n   the SIP layer may\
    \ serve packetization layers that are unable to adapt\n   to changes of the path\
    \ MTU.  Such packetization layers must limit\n   themselves to sending packets\
    \ no longer than 576 octets, even when\n   sending to destinations that belong\
    \ to the same subnet.\n       (Note: Unlike IPv4, it is unnecessary in SIP to\
    \ set a \"Don't\n       Fragment\" flag in the packet header in order to perform\
    \ Path MTU\n       Discovery; that is an implicit attribute of every SIP packet.\n\
    \       Also, those parts of the RFC-1191 procedures that involve use of\n   \
    \    a table of MTU \"plateaus\" do not apply to SIP, because the SIP\n      \
    \ version of the \"Datagram Too Big\" message always identifies the\n       exact\
    \ MTU to be used.)\n"
- title: 7.  Source Routing Header
  contents:
  - "7.  Source Routing Header\n   A Payload Type of <TBD> in the immediately preceding\
    \ header indicates\n   the presence of this Source Routing header:\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                            Reserved                           |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \   Num Addrs   |   Next Addr   |  Payload Type |    Reserved   |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   +                           Address[0]                          +\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   +                           Address[1]                          +\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      .                               .                               .\n   \
    \   .                               .                               .\n      .\
    \                               .                               .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   +                     Address[Num Addrs - 1]                    +\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      Reserved             Initialized to zero for transmission; ignored\n  \
    \                         on reception.\n      Num Addrs            Number of\
    \ addresses in the Source Routing\n                           header.\n      Next\
    \ Addr            Index of next address to be processed;\n                   \
    \        initialized to 0 by the originating system.\n      Payload Type     \
    \    Identifies the type of payload following the\n                          \
    \ Source Routing header.\n   A Source Routing header is not examined or processed\
    \ until it reaches\n   the system identified in the Destination Address field\
    \ of the SIP\n   header.  In that system, dispatching on the Payload Type of the\
    \ SIP\n   (or subsequent) header causes the Source Routing module to be\n   invoked,\
    \ which performs the following algorithm:\n       o  If Next Addr < Num Addrs,\
    \ swap the SIP Destination Address and\n          Address[Next Addr], increment\
    \ Next Addr by one, and re-submit\n          the packet to the SIP module for\
    \ forwarding to the next\n          destination.\n       o  If Next Addr = Num\
    \ Addrs, dispatch to the local protocol\n          module identified by the Payload\
    \ Type field in the Source\n          Routing header.\n       o  If Next Addr\
    \ > Num Addrs, send an ICMP Parameter Problem\n          message to the Source\
    \ Address, pointing to the Num Addrs\n          field.\n"
- title: 8.  Fragmentation Header
  contents:
  - "8.  Fragmentation Header\n   A Payload Type of <TBD> in the immediately preceding\
    \ header indicates\n   the presence of this Fragmentation header:\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                         Identification                        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |0\
    \ 0 M|      Fragment Offset    |  Payload Type |    Reserved   |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      Identification       A value that changes on each packet sent with\n  \
    \                         the same Source Address, Destination Address,\n    \
    \                       and preceding Payload Type.\n      M flag            \
    \   1 = more fragments; 0 = last fragment.\n      Fragment Offset      The offset,\
    \ in 8-octet chunks, of the\n                           following payload, relative\
    \ to the original,\n                           unfragmented payload.\n      Payload\
    \ Type         Identifies the type of payload following the\n                \
    \           Fragmentation header.\n      Reserved             Initialized to zero\
    \ for transmission; ignored\n                           on reception.\n   The\
    \ Fragmentation header is NOT intended to support general,\n   SIP-layer fragmentation.\
    \  In particular, SIP routers shall not\n   fragment a SIP packet that is too\
    \ big for the MTU of its next hop,\n   except in the special cases described below;\
    \ in the normal case, such\n   a packet results in an ICMP Packet Too Big message\
    \ being sent back to\n   its source, for use by the source system's Path MTU Discovery\n\
    \   algorithm.\n   The special cases for which the Fragmentation header is intended\
    \ are\n   the following:\n       o  A SIP packet that is \"tunneled\", either\
    \ by encapsulation\n          within another SIP packet or by insertion of a Source\
    \ Routing\n          header en-route, may, after the addition of the extra header\n\
    \          fields, exceed the MTU of the tunnel's path; if the original\n    \
    \      packet is 576 octets or less in length, the tunnel entry\n          system\
    \ cannot respond to the source with a Packet Too Big\n          message, and therefore\
    \ must insert a Fragmentation header and\n          fragment the packet to fit\
    \ within the tunnel's MTU.\n       o  An IPv4 fragment that is translated into\
    \ a SIP packet, or an\n          unfragmented IPv4 packet that is translated into\
    \ too long a\n          SIP packet to fit in the remaining path MTU, must include\
    \ the\n          SIP Fragmentation header, so that it may be properly\n      \
    \    reassembled at the destination SIP system.\n   Every SIP system must support\
    \ SIP fragmentation and reassembly, since\n   any system may be configured to\
    \ serve as a tunnel entry or exit\n   point, and any SIP system may be destination\
    \ of IPv4 fragments.  All\n   SIP systems must be capable of reassembling, from\
    \ fragments, a SIP\n   packet of up to 1024 octets in length, including the SIP\
    \ header; a\n   system may be capable of assembling packets longer than 1024 octets.\n\
    \   Routers do not examine or process Fragmentation headers of packets\n   that\
    \ they forward; only at the destination system is the\n   Fragmentation header\
    \ acted upon (i.e., reassembly performed), as a\n   result of dispatching on the\
    \ Payload Type of the preceding header.\n   Fragmentation and reassembly employ\
    \ the same algorithm as IPv4, with\n   the following exceptions:\n       o  All\
    \ headers up to and including the Fragmentation header are\n          repeated\
    \ in each fragment; no headers or data following the\n          Fragmentation\
    \ header are repeated in each fragment.\n       o  the Identification field is\
    \ increased to 32 bits, to decrease\n          the risk of wraparound of that\
    \ field within the maximum packet\n          lifetime over very high-throughput\
    \ paths.\n   The similarity of the algorithm and the field layout to that of IPv4\n\
    \   enables existing IPv4 fragmentation and reassembly code and data\n   structures\
    \ to be re-used with little modification.\n"
- title: 9.  Changes to Other Protocols
  contents:
  - "9.  Changes to Other Protocols\n   Upgrading IPv4 to SIP entails changes to the\
    \ associated control\n   protocols, ICMP and IGMP, as well as to the transport\
    \ layer, above,\n   and possibly to the link-layer, below.  This section identifies\
    \ those\n   changes.\n"
- title: 9.1.  Changes to ICMP
  contents:
  - "9.1.  Changes to ICMP\n   SIP uses a subset of ICMP [[RFC792], [RFC950], [RFC1122],\
    \ [RFC1191],\n   [RFC1256]], with a few minor changes and some additions.  The\n\
    \   presence of an ICMP header is indicated by a Payload Type of 1.\n   One change\
    \ to all ICMP messages is that, when used with SIP, the ICMP\n   checksum includes\
    \ a pseudo-header, like TCP and UDP, consisting of\n   the SIP Source Address,\
    \ Destination Address, Payload Length, and\n   Payload Type (see section 8.3).\n\
    \   There are a set of ICMP messages called \"error messages\", each of\n   which,\
    \ for IPv4, carries the IPv4 header plus 64 bits or more of data\n   from the\
    \ packet that invoked the error message.  When used with SIP,\n   ICMP error messages\
    \ carry the first 256 octets of the invoking SIP\n   packet, or the entire invoking\
    \ packet if it is shorter than\n   256 octets.\n   For most of the ICMP message\
    \ types, the packets retain the same\n   format and semantics as with IPv4; however,\
    \ some of the fields are\n   given new names to match SIP terminology.\n   The\
    \ changes to specific message types are as follows:\n     Destination Unreachable\n\
    \       The following Codes have different names when used with SIP:\n       \
    \  1 - destination address unreachable (IPv4 \"host unreachable\")\n         7\
    \ - destination address unknown (IPv4 \"dest. host unknown\")\n         2 - payload\
    \ type unknown (IPv4 \"protocol unreachable\")\n         4 - packet too big (IPv4\
    \ \"fragmentation needed and DF set\")\n       The following Codes retain the\
    \ same names when used with SIP:\n         3 - port unreachable\n         5 -\
    \ source route failed\n         8 - source host isolated\n        13 - communication\
    \ administratively prohibited\n       The following Codes are not used with SIP:\n\
    \         0 - net unreachable\n         6 - destination network unknown\n    \
    \     9 - comm. with dest. network administratively prohibited\n        10 - comm.\
    \ with dest. host administratively prohibited\n        11 - network unreachable\
    \ for type of service\n        12 - host unreachable for type of service\n   \
    \    For \"packet too big\" messages (Code 4), the minimum legal value\n     \
    \  in the Next-Hop MTU field [RFC1191] is 576.\n     Time Exceeded\n       The\
    \ name of Code 0 is changed to \"hop limit exceeded in transit\".\n     Parameter\
    \ Problem\n       The Pointer field is extended to 16 bits and moved to the\n\
    \       low-order end of the second 32-bit word, as follows:\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |    Type     |      Code     |            Checksum         |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |    \
    \      Reserved           |            Pointer          |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                                                           |\n      \
    \ |           first 256 octets of the invoking packet         |\n       |    \
    \                                                       |\n     Redirect\n   \
    \    Only Code 1 is used for SIP, meaning \"redirect packets for the\n       destination\
    \ address\".\n       The Redirect header is modified for SIP, to accommodate the\n\
    \       64-bit address of the \"preferred router\" and to retain 64-bit\n    \
    \   alignment, as follows:\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |      Type     |      Code     |            Checksum         |\n    \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                            Reserved                         |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                                                             |\n    \
    \   +                        Preferred Router                     +\n       |\
    \                                                             |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                                                             |\n    \
    \   |             first 256 octets of the invoking packet         |\n       |\
    \                                                             |\n     Router Advertisement\n\
    \       The format of the Router Advertisement message is changed to:\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |  \
    \   Type      |     Code      |           Checksum          |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |   Num Addrs   |Addr Entry Size|           Lifetime          |\n    \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                                                             |\n       +    \
    \                   Router Address[0]                     +\n       |        \
    \                                                     |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                      Preference Level[0]                    |\n    \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                          Reserved[0]                        |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                                                             |\n    \
    \   +                       Router Address[1]                     +\n       |\
    \                                                             |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                      Preference Level[1]                    |\n    \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                          Reserved[1]                        |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                               .                             |\n    \
    \   |                               .                             |\n       |\
    \                               .                             |\n       The value\
    \ in the Addr Entry Size field is 4, and all of the\n       Reserved fields are\
    \ initialized to zero by senders and ignored by\n       receivers.\n     Router\
    \ Solicitation\n       No changes.\n     Echo and Echo Reply\n       No changes.\n\
    \     The following ICMP message types are not used with SIP:\n       Source Quench\n\
    \       Timestamp\n       Timestamp Reply\n       Information Request\n      \
    \ Information Reply\n       Address Mask Request\n       Address Mask Reply\n"
- title: 9.2.  Changes to IGMP
  contents:
  - "9.2.  Changes to IGMP\n   SIP uses the Internet Group Management Protocol, IGMP\
    \ [RFC1112].  The\n   presence of an IGMP header is indicated by a Payload Type\
    \ of 2.\n   When used with SIP, the IGMP checksum includes a pseudo-header, like\n\
    \   TCP and UDP, consisting of the SIP Source Address, Destination\n   Address,\
    \ Payload Length, and Payload Type (see section 8.3).\n   The format of an IGMP\
    \ Host Membership Query message becomes:\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |Version| Type  |    Reserved   |           Checksum            |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                            Reserved                           |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   The format\
    \ of an IGMP Host Membership Report message becomes:\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |Version| Type  |    Reserved   |           Checksum            |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                            Reserved                           |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                                                               |\n       +  \
    \                     Multicast Address                       +\n       |    \
    \                                                           |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   For both message types, the Version number remains 1, and the\n   Reserved\
    \ fields are set to zero by senders and ignored by receivers.\n"
- title: 9.3.  Changes to Transport Protocols
  contents:
  - "9.3.  Changes to Transport Protocols\n   The service interface to SIP has some\
    \ differences from IPv4's service\n   interface.  Existing transport protocols\
    \ that use IPv4 must be\n   changed to operate over SIP's service interface. \
    \ The differences\n   from IPv4 are:\n       o  Any addresses passed across the\
    \ interface are 64 bits long,\n          rather than 32 bits.\n       o  The following\
    \ IPv4 variables are not passed across the\n          interface: Precedence, Type-of-Service,\
    \ Identifier,\n          Don't Fragment Flag\n       o  SIP options have a different\
    \ format than IPv4 options.  (For\n          SIP, \"options\" are all headers\
    \ between, and not including, the\n          SIP header and the transport header.\
    \  The only IPv4 option\n          currently specified for SIP is Loose Source\
    \ Routing.\n       o  ICMP error messages for SIP that are passed up to the\n\
    \          transport layer carry the first 256 octets of the invoking SIP\n  \
    \        packet.\n   Transport protocols that use IPv4 addresses for their own\
    \ purposes,\n   such as identifying connection state or inclusion in a pseudo-header\n\
    \   checksum, must be changed to use 64-bit SIP addresses for those\n   purposes\
    \ instead.\n   For SIP, the pseudo-header checksums of TCP, UDP, ICMP, and IGMP\n\
    \   include the SIP Source Address, Destination Address, Payload Length,\n   and\
    \ Payload Type, with the following caveats:\n       o  If the packet contains\
    \ a Source Routing header, the\n          destination address used in the pseudo-header\
    \ checksum is that\n          of the final destination.\n       o  The Payload\
    \ Length used in the pseudo-header checksum is the\n          length of the transport-layer\
    \ packet, including the transport\n          header.\n       o  The Payload Type\
    \ used in the pseudo-header checksum is the\n          Payload Type from the header\
    \ immediately preceding the\n          transport header.\n       o  When added\
    \ to the pseudo-header checksum, the Payload Type is\n          treated as the\
    \ left octet of a 16-bit word, with zeros in the\n          the right octet, when\
    \ viewed in IP standard octet order.\n       o  If either of the two addresses\
    \ used in the pseudo-header\n          checksum has its high-order bit set to\
    \ 1, only the low-order\n          32-bits of that address shall be used in the\
    \ sum.  The\n          high-order bit is used to indicate that the addressed system\n\
    \          is an IPv4 system, and that the low-order 32-bits of the\n        \
    \  address contain that system's IPv4 address [IPAE].\n   The semantics of SIP\
    \ service differ from IPv4 service in three ways\n   that may affect some transport\
    \ protocols:\n     (1)  SIP does not enforce maximum packet lifetime.  Any transport\n\
    \          protocol that relies on IPv4 to limit packet lifetime must\n      \
    \    take this change into account, for example, by providing its\n          own\
    \ mechanisms for detecting and discarding obsolete packets.\n     (2)  SIP does\
    \ not checksum its own header fields.  Any transport\n          protocol that\
    \ relies on IPv4 to assure the integrity of the\n          source and destinations\
    \ addresses, packet length, and\n          transport protocol identifier must\
    \ take this change into\n          account.  In particular, when used with SIP,\
    \ the UDP checksum\n          is mandatory, and ICMP and IGMP are changed to use\
    \ a\n          pseudo-header checksum.\n     (3)  SIP does not (except in special\
    \ cases) fragment packets that\n          exceed the MTU of their delivery paths.\
    \  Therefore, a\n          transport protocol must not send packets longer than\n\
    \          576 octets unless it implements Path MTU Discovery [RFC1191]\n    \
    \      and is capable of adapting its transmitted packet size in\n          response\
    \ to changes of the path MTU.\n"
- title: 9.4.  Changes to Link-Layer Protocols
  contents:
  - "9.4.  Changes to Link-Layer Protocols\n   Link-layer media that have an MTU less\
    \ than 576 must be enhanced\n   with a link-specific fragmentation and reassembly\
    \ mechanism, to\n   support SIP.\n   For links on which ARP is used by IPv4, the\
    \ identical ARP protocol is\n   used for SIP.  The low-order 32-bits of SIP addresses\
    \ are used\n   wherever IPv4 addresses would appear; since ARP is used only among\n\
    \   systems on the same subnet, the high-order 32-bits of the SIP\n   addresses\
    \ may be inferred from the subnet prefix (assuming the subnet\n   prefix is at\
    \ least 32 bits long).  [This is subject to change -- see\n   Appendix B.]\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   <to be done>\n"
- title: 11.  Acknowledgments
  contents:
  - "11.  Acknowledgments\n   The author acknowledges the many helpful suggestions\
    \ and the words of\n   encouragement from Dave Clark, Dave Crocker, Deborah Estrin,\
    \ Bob\n   Hinden, Christian Huitema, Van Jacobson, Jeff Mogul, Dave Nichols,\n\
    \   Erik Nordmark, Dave Oran, Craig Partridge, Scott Shenker, Paul\n   Tsuchiya,\
    \ Lixia Zhang, the members of End-to-End Research Group and\n   the IPAE Working\
    \ Group, and the participants in the big-internet and\n   sip mailing lists. \
    \ He apologizes to those whose names he has not\n   explicitly listed.  [If you\
    \ want to be on the list in the next draft,\n   just let him know!]\n   Editor's\
    \ note: Steve Deering was employed by the Xerox Palo Alto\n   Research Center\
    \ in Palo Alto, CA USA when this work was done.\n"
- title: 12.  Informative References
  contents:
  - "12.  Informative References\n   [IPAE]     Crocker, D. and R. Hinden, \"IP Address\
    \ Encapsulation\n              (IPAE): A Mechanism for Introducing a New IP\"\
    , Work in\n              Progress, draft-crocker-ip-encaps-01, November 1992.\n\
    \   [RFC791]   Postel, J., \"Internet Protocol\", STD 5, RFC 791,\n          \
    \    DOI 10.17487/RFC0791, September 1981,\n              <https://www.rfc-editor.org/info/rfc791>.\n\
    \   [RFC792]  Postel, J., \"Internet Control Message Protocol\", STD 5,\n    \
    \          RFC 792, DOI 10.17487/RFC0792, September 1981,\n              <https://www.rfc-editor.org/info/rfc792>.\n\
    \   [RFC950]  Mogul, J. and J. Postel, \"Internet Standard Subnetting\n      \
    \        Procedure\", STD 5, RFC 950, DOI 10.17487/RFC0950,\n              August\
    \ 1985, <https://www.rfc-editor.org/info/rfc950>.\n   [RFC951]  Croft, W. and\
    \ J. Gilmore, \"Bootstrap Protocol\", RFC 951,\n              DOI 10.17487/RFC0951,\
    \ September 1985,\n              <https://www.rfc-editor.org/info/rfc951>.\n \
    \  [RFC1112]  Deering, S., \"Host extensions for IP multicasting\", STD 5,\n \
    \             RFC 1112, DOI 10.17487/RFC1112, August 1989,\n              <https://www.rfc-editor.org/info/rfc1112>.\n\
    \   [RFC1122]  Braden, R., Ed., \"Requirements for Internet Hosts -\n        \
    \      Communication Layers\", STD 3, RFC 1122,\n              DOI 10.17487/RFC1122,\
    \ October 1989,\n              <https://www.rfc-editor.org/info/rfc1122>.\n  \
    \ [RFC1191]  Mogul, J. and S. Deering, \"Path MTU discovery\", RFC 1191,\n   \
    \           DOI 10.17487/RFC1191, November 1990,\n              <https://www.rfc-editor.org/info/rfc1191>.\n\
    \   [RFC1256]  Deering, S., Ed., \"ICMP Router Discovery Messages\",\n       \
    \       RFC 1256, DOI 10.17487/RFC1256, September 1991,\n              <https://www.rfc-editor.org/info/rfc1256>.\n\
    \   [RFC1661]  Simpson, W., Ed., \"The Point-to-Point Protocol (PPP)\",\n    \
    \          STD 51, RFC 1661, DOI 10.17487/RFC1661, July 1994,\n              <https://www.rfc-editor.org/info/rfc1661>.\n\
    \   [RFC1710]  Hinden, R., \"Simple Internet Protocol Plus White Paper\",\n  \
    \            RFC 1710, DOI 10.17487/RFC1710, October 1994,\n              <https://www.rfc-editor.org/info/rfc1710>.\n\
    \   [RFC1752]  Bradner, S. and A. Mankin, \"The Recommendation for the IP\n  \
    \            Next Generation Protocol\", RFC 1752, DOI 10.17487/RFC1752,\n   \
    \           January 1995, <https://www.rfc-editor.org/info/rfc1752>.\n   [RFC1883]\
    \  Deering, S. and R. Hinden, \"Internet Protocol, Version 6\n              (IPv6)\
    \ Specification\", RFC 1883, DOI 10.17487/RFC1883,\n              December 1995,\
    \ <https://www.rfc-editor.org/info/rfc1883>.\n   [RFC8200]  Deering, S. and R.\
    \ Hinden, \"Internet Protocol, Version 6\n              (IPv6) Specification\"\
    , STD 86, RFC 8200,\n              DOI 10.17487/RFC8200, July 2017,\n        \
    \      <https://www.rfc-editor.org/info/rfc8200>.\n   [SIP-ADDR] Deering, S.,\
    \ \"Simple Internet Protocol (SIP) Addressing\n              and Routing\", Work\
    \ in Progress, November 1992.\n"
- title: Appendix A.  SIP Design Rationale
  contents:
  - "Appendix A.  SIP Design Rationale\n   <this section still to be done>\n   Fields\
    \ present in IPv4, but absent in SIP:\n     Header Length    Not needed; SIP header\
    \ length is fixed.\n     Precedence &\n     Type of Service  Not used; transport-layer\
    \ Port fields (or perhaps\n                      a to-be-defined value in the\
    \ Reserved field of the\n                      SIP header) may be used for classifying\
    \ packets at\n                      a granularity finer than host-to-host, as\
    \ required\n                      for special handling.\n     Header Checksum\
    \  Not used; transport pseudo-header checksum\n                      protects\
    \ destinations from accepting corrupted\n                      packets.\n   Need\
    \ to justify:\n     change of Total Length -> Payload Length, excluding header\n\
    \     change of Protocol -> Payload Type\n     change of Time to Live -> Hop Limit\n\
    \     movement of fragmentation fields out of fixed header\n     bigger minimum\
    \ MTU, and reliance on PMTU Discovery\n"
- title: Appendix B.  Future Directions
  contents:
  - "Appendix B.  Future Directions\n   SIP as specified above is a fully functional\
    \ replacement for IPv4,\n   with a number of improvements, particularly in the\
    \ areas of\n   scalability of routing and addressing, and performance.  Some\n\
    \   additional improvements are still under consideration:\n       o  ARP may\
    \ be modified to carry full 64-bit addresses, and to use\n          link-layer\
    \ multicast addresses, rather than broadcast\n          addresses.\n       o \
    \ The 28-bit Reserved field in the SIP header may be defined as\n          a \"\
    Flow ID\", or partitioned into a Type of Service field and a\n          Flow ID\
    \ field, for classifying packets deserving of special\n          handling, e.g.,\
    \ non-default quality of service or real-time\n          service.  On the other\
    \ hand, the transport-layer port fields\n          may be adequate for performing\
    \ any such classification.  (One\n          possibility would be simply to remove\
    \ the port fields from TCP\n          & UDP and append them to the SIP header,\
    \ as in XNS.)\n       o  A new ICMP \"destination has moved\" message may defined,\
    \ for\n          re-routing to mobile hosts or subnets, and to domains that\n\
    \          have changed their address prefixes.\n       o  An explicit Trace Route\
    \ message or option may be defined; the\n          current IPv4 traceroute scheme\
    \ will work fine with SIP, but it\n          does not work for multicast, for\
    \ which it has become very\n          apparent that management and debugging tools\
    \ are needed.\n       o  A new Host-to-Router protocol may be specified, encompassing\n\
    \          the requirements of router discovery, black-hole detection,\n     \
    \     auto- configuration of subnet prefixes, \"beaconing\" for mobile\n     \
    \     hosts, and, possibly, address resolution.  The OSI End System\n        \
    \  To Intermediate System Protocol may serve as a good model for\n          such\
    \ a protocol.\n       o  The requirement that SIP addresses be strictly bound\
    \ to\n          interfaces may be relaxed, so that, for example, a system\n  \
    \        might have fewer addresses than interfaces.  There is some\n        \
    \  experience with this approach in the current Internet, with\n          the\
    \ use of \"unnumbered links\" in routing protocols such as\n          OSPF.\n\
    \       o  Authentication and integrity-assurance mechanisms for all\n       \
    \   clients of SIP, including ICMP and IGMP, may be specified,\n          possibly\
    \ based on the Secure Data Network System (SNDS) SP-3\n          or SP-4 protocol.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Stephen E. Deering\n   Retired\n   Vancouver, British\
    \ Columbia\n   Canada\n   Robert M. Hinden (editor)\n   Check Point Software\n\
    \   959 Skyway Road\n   San Carlos, CA  94070\n   USA\n   Email: bob.hinden@gmail.com\n"
