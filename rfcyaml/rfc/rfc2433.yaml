- title: __initial_text__
  contents:
  - '                     Microsoft PPP CHAP Extensions

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
- title: IESG Note
  contents:
  - "IESG Note\n   The protocol described here has significant vulnerabilities.  People\n\
    \   planning on implementing or using this protocol should read section\n   12,\
    \ \"Security Considerations\".\n"
- title: 1.  Abstract
  contents:
  - "1.  Abstract\n   The Point-to-Point Protocol (PPP) [1] provides a standard method\
    \ for\n   transporting multi-protocol datagrams over point-to-point links.  PPP\n\
    \   defines an extensible Link Control Protocol and a family of Network\n   Control\
    \ Protocols (NCPs) for establishing and configuring different\n   network-layer\
    \ protocols.\n   This document describes Microsoft's PPP CHAP dialect (MS-CHAP),\
    \ which\n   extends the user authentication functionality provided on Windows\n\
    \   networks to remote workstations.  MS-CHAP is closely derived from the\n  \
    \ PPP Challenge Handshake Authentication Protocol described in RFC 1994\n   [2],\
    \ which the reader should have at hand.\n   The algorithms used in the generation\
    \ of various MS-CHAP protocol\n   fields are described in an appendix.\n"
- title: 2.  Introduction
  contents:
  - "2.  Introduction\n   Microsoft created MS-CHAP to authenticate remote Windows\n\
    \   workstations, providing the functionality to which LAN-based users\n   are\
    \ accustomed while integrating the encryption and hashing\n   algorithms used\
    \ on Windows networks.\n   Where possible, MS-CHAP is consistent with standard\
    \ CHAP.  Briefly,\n   the differences between MS-CHAP and standard CHAP are:\n\
    \      * MS-CHAP is enabled by negotiating CHAP Algorithm 0x80 in LCP\n      \
    \  option 3, Authentication Protocol.\n      * The MS-CHAP Response packet is\
    \ in a format designed for\n        compatibility with Microsoft's Windows NT\
    \ 3.5, 3.51 and 4.0, and\n        Windows95 networking products.  The MS-CHAP\
    \ format does not\n        require the authenticator to store a clear-text or\
    \ reversibly\n        encrypted password.\n      * MS-CHAP provides authenticator-controlled\
    \ authentication retry\n        and password changing mechanisms.\n      * MS-CHAP\
    \ defines a set of reason-for-failure codes returned in\n        the Failure packet\
    \ Message field.\n"
- title: 3.  Specification of Requirements
  contents:
  - "3.  Specification of Requirements\n   In this document, the key words \"MAY\"\
    , \"MUST, \"MUST NOT\", \"optional\",\n   \"recommended\", \"SHOULD\", and \"\
    SHOULD NOT\" are to be interpreted as\n   described in [2].\n"
- title: 4.  LCP Configuration
  contents:
  - "4.  LCP Configuration\n   The LCP configuration for MS-CHAP is identical to that\
    \ for standard\n   CHAP, except that the Algorithm field has value 0x80, rather\
    \ than the\n   MD5 value 0x05.  PPP implementations which do not support MS-CHAP,\n\
    \   but correctly implement LCP Config-Rej, should have no problem\n   dealing\
    \ with this non-standard option.\n"
- title: 5.  Challenge Packet
  contents:
  - "5.  Challenge Packet\n   The MS-CHAP Challenge packet is identical in format\
    \ to the standard\n   CHAP Challenge packet.\n   MS-CHAP authenticators send an\
    \ 8-octet challenge Value field.  Peers\n   need not duplicate Microsoft's algorithm\
    \ for selecting the 8-octet\n   value, but the standard guidelines on randomness\
    \ [1,2,7] SHOULD be\n   observed.\n   Microsoft authenticators do not currently\
    \ provide information in the\n   Name field.  This may change in the future.\n"
- title: 6.  Response Packet
  contents:
  - "6.  Response Packet\n   The MS-CHAP Response packet is identical in format to\
    \ the standard\n   CHAP Response packet.  However, the Value field is sub-formatted\n\
    \   differently as follows:\n      24 octets: LAN Manager compatible challenge\
    \ response\n      24 octets: Windows NT compatible challenge response\n      \
    \ 1 octet : \"Use Windows NT compatible challenge response\" flag\n   The LAN\
    \ Manager compatible challenge response is an encoded function\n   of the password\
    \ and the received challenge as output by the routine\n   LmChallengeResponse()\
    \ (see section A.1, below).  LAN Manager\n   passwords are limited to 14 case-insensitive\
    \ OEM characters.  Note\n   that use of the LAN Manager compatible challenge response\
    \ has been\n   deprecated; peers SHOULD NOT generate it, and the sub-field SHOULD\
    \ be\n   zero-filled.  The algorithm used in the generation of the LAN Manager\n\
    \   compatible challenge response is described here for informational\n   purposes\
    \ only.\n   The Windows NT compatible challenge response is an encoded function\n\
    \   of the password and the received challenge as output by the routine\n   NTChallengeResponse()\
    \ (see section A.5, below).  The Windows NT\n   password is a string of 0 to (theoretically)\
    \ 256 case-sensitive\n   Unicode [8] characters.  Current versions of Windows\
    \ NT limit\n   passwords to 14 characters, mainly for compatibility reasons; this\n\
    \   may change in the future.\n   The \"use Windows NT compatible challenge response\"\
    \ flag, if 1,\n   indicates that the Windows NT response is provided and should\
    \ be used\n   in preference to the LAN Manager response.  The LAN Manager response\n\
    \   will still be used if the account does not have a Windows NT password\n  \
    \ hash, e.g.  if the password has not been changed since the account\n   was uploaded\
    \ from a LAN Manager 2.x account database.  If the flag is\n   0, the Windows\
    \ NT response is ignored and the LAN Manager response is\n   used.  Since the\
    \ use of LAN Manager authentication has been\n   deprecated, this flag SHOULD\
    \ always be set (1) and the LAN Manager\n   compatible challenge response field\
    \ SHOULD be zero-filled.\n   The Name field identifies the peer's user account\
    \ name.  The Windows\n   NT domain name may prefix the user's account name (e.g.\n\
    \   \"BIGCO\\johndoe\" where \"BIGCO\" is a Windows NT domain containing the\n\
    \   user account \"john-doe\").  If a domain is not provided, the backslash\n\
    \   should also be omitted, (e.g. \"johndoe\").\n"
- title: 7.  Success Packet
  contents:
  - "7.  Success Packet\n   The Success packet is identical in format to the standard\
    \ CHAP\n   Success packet.\n"
- title: 8.  Failure Packet
  contents:
  - "8.  Failure Packet\n   The Failure packet is identical in format to the standard\
    \ CHAP\n   Failure packet.  There is, however, formatted text stored in the\n\
    \   Message field which, contrary to the standard CHAP rules, affects the\n  \
    \ protocol.  The Message field format is:\n         \"E=eeeeeeeeee R=r C=cccccccccccccccc\
    \ V=vvvvvvvvvv\"\n      where\n         The \"eeeeeeeeee\" is the decimal error\
    \ code (need not be 10\n         digits) corresponding to one of those listed\
    \ below, though\n         implementations should deal with codes not on this list\n\
    \         gracefully.\n            646 ERROR_RESTRICTED_LOGON_HOURS\n        \
    \    647 ERROR_ACCT_DISABLED\n            648 ERROR_PASSWD_EXPIRED\n         \
    \   649 ERROR_NO_DIALIN_PERMISSION\n            691 ERROR_AUTHENTICATION_FAILURE\n\
    \            709 ERROR_CHANGING_PASSWORD\n         The \"r\" is a flag set to\
    \ \"1\" if a retry is allowed, and \"0\" if\n         not.  When the authenticator\
    \ sets this flag to \"1\" it disables\n         short timeouts, expecting the\
    \ peer to prompt the user for new\n         credentials and resubmit the response.\n\
    \         The \"cccccccccccccccc\" is 16 hexadecimal digits representing an\n\
    \         ASCII representation of a new challenge value.  This field is\n    \
    \     optional.  If it is not sent, the authenticator expects the\n         resubmitted\
    \ response to be calculated based on the previous\n         challenge value plus\
    \ decimal 23 in the first octet, i.e. the\n         one immediately following\
    \ the Value Size field.  Windows 95\n         authenticators may send this field.\
    \  Windows NT authenticators\n         do not, but may in the future.  Both systems\
    \ implement peer\n         support of this field.\n         The \"vvvvvvvvvv\"\
    \ is the decimal version code (need not be 10\n         digits) indicating the\
    \ MS-CHAP protocol version supported on\n         the server.  Currently, this\
    \ is interesting only in selecting a\n         Change Password packet type.  If\
    \ the field is not present the\n         version should be assumed to be 1; since\
    \ use of the version 1\n         Change Password packet has been deprecated, this\
    \ field SHOULD\n         always contain a value greater than or equal to 2.\n\
    \   Implementations should accept but ignore additional text they do not\n   recognize.\n"
- title: 9.  Change Password Packet (version 1)
  contents:
  - "9.  Change Password Packet (version 1)\n   The version 1 Change Password packet\
    \ does not appear in standard\n   CHAP.  It allows the peer to change the password\
    \ on the account\n   specified in the previous Response packet.  The version 1\
    \ Change\n   Password packet should be sent only if the authenticator reports\n\
    \   ERROR_PASSWD_EXPIRED (E=648) and V is either missing or equal to one\n   in\
    \ the Message field of the Failure packet.\n   The use of the Change Password\
    \ Packet (version 1) has been\n   deprecated; the format of the packet is described\
    \ here for\n   informational purposes, but peers SHOULD NOT transmit it.\n   The\
    \ format of this packet is as follows:\n       1 octet : Code (=5)\n       1 octet\
    \ : Identifier\n       2 octets: Length (=72)\n      16 octets: Encrypted LAN\
    \ Manager Old password Hash\n      16 octets: Encrypted LAN Manager New Password\
    \ Hash\n      16 octets: Encrypted Windows NT Old Password Hash\n      16 octets:\
    \ Encrypted Windows NT New Password Hash\n       2 octets: Password Length\n \
    \      2 octets: Flags\n      Code\n         5\n      Identifier\n         The\
    \ Identifier field is one octet and aids in matching requests\n         and replies.\
    \  The value is the Identifier of the received\n         Failure packet to which\
    \ this packet responds plus 1.\n      Length\n         72\n      Encrypted LAN\
    \ Manager New Password Hash\n      Encrypted LAN Manager Old Password Hash\n \
    \        These fields contain the LAN Manager password hash of the new\n     \
    \    and old passwords encrypted with the last received challenge\n         value,\
    \ as output by the routine LmEncryptedPasswordHash() (see\n         section A.8,\
    \ below).\n      Encrypted Windows NT New Password Hash\n      Encrypted Windows\
    \ NT Old Password Hash\n         These fields contain the Windows NT password\
    \ hash of the new\n         and old passwords encrypted with the last received\
    \ challenge\n         value, as output by the pseudo-code routine\n         NtEncryptedPasswordHash()\
    \ (see section A.10, below).\n      Password Length\n         The length in octets\
    \ of the LAN Manager compatible form of the\n         new password.  If this value\
    \ is greater than or equal to zero\n         and less than or equal to 14 it is\
    \ assumed that the encrypted\n         LAN Manager password hash fields are valid.\
    \  Otherwise, it is\n         assumed these fields are not valid, in which case\
    \ the Windows\n         NT compatible passwords MUST be provided.\n      Flags\n\
    \         This field is two octets in length.  It is a bit field of\n        \
    \ option flags where 0 is the least significant bit of the 16-bit\n         quantity:\n\
    \            Bit 0\n               If this bit is set (1), it indicates that the\
    \ encrypted\n               Windows NT hashed passwords are valid and should be\
    \ used.\n               If this bit is cleared (0), the Windows NT fields are\
    \ not\n               used and the LAN Manager fields must be provided.\n    \
    \        Bits 1-15\n               Reserved, always clear (0).\n"
- title: 10.  Change Password Packet (version 2)
  contents:
  - "10.  Change Password Packet (version 2)\n   The version 2 Change Password packet\
    \ does not appear in standard\n   CHAP.  It allows the peer to change the password\
    \ on the account\n   specified in the preceding Response packet.  The version\
    \ 2 Change\n   Password packet should be sent only if the authenticator reports\n\
    \   ERROR_PASSWD_EXPIRED (E=648) and a version of 2 or greater in the\n   Message\
    \ field of the Failure packet.\n   This packet type is supported by Windows NT\
    \ 3.51, 4.0 and recent\n   versions of Windows 95.  It is not supported by Windows\
    \ NT 3.5 or\n   early versions of Windows 95.\n      The format of this packet\
    \ is as follows:\n           1 octet  : Code\n           1 octet  : Identifier\n\
    \           2 octets : Length\n         516 octets : Password Encrypted with Old\
    \ NT Hash\n          16 octets : Old NT Hash Encrypted with New NT Hash\n    \
    \     516 octets : Password Encrypted with Old LM Hash\n          16 octets :\
    \ Old LM Hash Encrypted With New NT Hash\n          24 octets : LAN Manager compatible\
    \ challenge response\n          24 octets : Windows NT compatible challenge response\n\
    \           2-octet  : Flags\n      Code\n         6\n      Identifier\n     \
    \    The Identifier field is one octet and aids in matching requests\n       \
    \  and replies.  The value is the Identifier of the received\n         Failure\
    \ packet to which this packet responds plus 1.\n      Length\n         1118\n\
    \      Password Encrypted with Old NT Hash\n         This field contains the PWBLOCK\
    \ form of the new Windows NT\n         password encrypted with the old Windows\
    \ NT password hash, as\n         output by the NewPasswordEncryptedWithOldNtPasswordHash()\n\
    \         routine (see section A.11, below).\n      Old NT Hash Encrypted with\
    \ New NT Hash\n         This field contains the old Windows NT password hash encrypted\n\
    \         with the new Windows NT password hash, as output by the\n         OldNtPasswordHashEncryptedWithNewNtPasswordHash()\
    \ routine (see\n         section A.14, below).\n      Password Encrypted with\
    \ Old LM Hash\n         This field contains the PWBLOCK form of the new Windows\
    \ NT\n         password encrypted with the old LAN Manager password hash, as\n\
    \         output by the NewPasswordEncryptedWithOldLmPasswordHash()\n        \
    \ routine described in section A.15, below.  Note, however, that\n         the\
    \ use of this field has been deprecated: peers SHOULD NOT\n         generate it,\
    \ and this field SHOULD be zero-filled.\n      Old LM Hash Encrypted With New\
    \ NT Hash\n         This field contains the old LAN Manager password hash encrypted\n\
    \         with the new Windows NT password hash, as output by the\n         OldLmPasswordHashEncryptedWithNewNtPasswordHash()\
    \ routine (see\n         section A.16, below).  Note, however, that the use of\
    \ this\n         field has been deprecated: peers SHOULD NOT generate it, and\n\
    \         this field SHOULD be zero-filled.\n      LAN Manager compatible challenge\
    \ response\n      Windows NT compatible challenge response\n         The challenge\
    \ response field (as described in the Response\n         packet description),\
    \ but calculated on the new password and the\n         same challenge used in\
    \ the last response.  Note that use of the\n         LAN Manager compatible challenge\
    \ response has been deprecated;\n         peers SHOULD NOT generate it, and the\
    \ field SHOULD be zero-\n         filled.\n      Flags\n         This field is\
    \ two octets in length.  It is a bit field of\n         option flags where 0 is\
    \ the least significant bit of the 16-bit\n         quantity.  The format of this\
    \ field is illustrated in the\n         following diagram:\n                 \
    \  1\n         5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0\n         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \         |                           | |\n         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \            Bit 0\n               The \"use Windows NT compatible challenge response\"\
    \ flag\n               as described in the Response packet.\n            Bit 1\n\
    \               Set (1) indicates that the \"Password Encrypted with Old\n   \
    \            LM Hash\" and \"Old LM Hash Encrypted With New NT Hash\"\n      \
    \         fields are valid and should be used.  Clear (0) indicates\n        \
    \       these fields are not valid.  This bit SHOULD always be\n             \
    \  clear (0).\n            Bits 2-15\n               Reserved, always clear (0).\n"
- title: 11.  Security Considerations
  contents:
  - "11.  Security Considerations\n   As an implementation detail, the authenticator\
    \ SHOULD limit the\n   number of password retries allowed to make brute-force\
    \ password\n   guessing attacks more difficult.\n   Because the challenge value\
    \ is encrypted using the password hash to\n   form the response and the challenge\
    \ is transmitted in clear-text\n   form, both passive known-plaintext and active\
    \ chosen-plaintext\n   attacks against the password hash are possible.  Suitable\
    \ precautions\n   (i.e., frequent password changes) SHOULD be taken in environments\n\
    \   where eavesdropping is likely.\n   The Change Password (version 1) packet\
    \ is vulnerable to a passive\n   eavesdropping attack which can easily reveal\
    \ the new password hash.\n   For this reason, it MUST NOT be sent if eavesdropping\
    \ is possible.\n"
- title: 12.  References
  contents:
  - "12.  References\n   [1] Simpson, W., \"The Point-to-Point Protocol (PPP)\", STD\
    \ 51, RFC\n       1661, July 1994.\n   [2] Simpson, W., \"PPP Challenge Handshake\
    \ Authentication Protocol\n       (CHAP)\", RFC 1994, August 1996.\n   [3] Bradner,\
    \ S., \"Key words for use in RFCs to Indicate Requirement\n       Levels\", BCP\
    \ 14, RFC 2119, March 1997.\n   [4] \"Data Encryption Standard (DES)\", Federal\
    \ Information Processing\n       Standard Publication 46-2, National Institute\
    \ of Standards and\n       Technology, December 1993.\n   [5] Rivest, R., \"MD4\
    \ Message Digest Algorithm\", RFC 1320, April 1992.\n   [6] RC4 is a proprietary\
    \ encryption algorithm available under license\n       from RSA Data Security\
    \ Inc.  For licensing information, contact:\n       RSA Data Security, Inc.\n\
    \       100 Marine Parkway\n       Redwood City, CA 94065-1031\n   [7] Eastlake,\
    \ D., Crocker, S., and J. Schiller, \"Randomness\n       Recomnendations for Security\"\
    , RFC 1750, December 1994.\n   [8] \"The Unicode Standard, Version 2.0\", The\
    \ Unicode Consortium,\n       Addison-Wesley, 1996. ISBN 0-201-48345-9.\n   [9]\
    \ \"DES Modes of Operation\", Federal Information Processing\n       Standards\
    \ Publication 81, National Institute of Standards and\n       Technology, December\
    \ 1980\n"
- title: 13.  Acknowledgements
  contents:
  - "13.  Acknowledgements\n   Thanks (in no particular order) to Jeff Haag (Jeff_Haag@3com.com),\n\
    \   Bill Palter (palter@network-alchemy.com), Bruce Johnson\n   (bjohnson@microsoft.com),\
    \ Tony Bell (tonybe@microsoft.com), Benoit\n   Martin (ehlija@vircom.com), and\
    \ Joe Davies (josephd@microsoft.com)\n   for useful suggestions and feedback.\n"
- title: 14.  Chair's Address
  contents:
  - "14.  Chair's Address\n   The PPP Extensions Working Group can be contacted via\
    \ the current\n   chair:\n   Karl Fox\n   Ascend Communications\n   3518 Riverside\
    \ Drive\n   Suite 101\n   Columbus, OH 43221\n   Phone: +1 614 326 6841\n   EMail:\
    \ karl@ascend.com\n"
- title: 15.  Authors' Addresses
  contents:
  - "15.  Authors' Addresses\n   Questions about this memo can also be directed to:\n\
    \   Glen Zorn\n   Microsoft Corporation\n   One Microsoft Way\n   Redmond, Washington\
    \ 98052\n   Phone: +1 425 703 1559\n   Fax:   +1 425 936 7329\n   EMail: glennz@microsoft.com\n\
    \   Steve Cobb\n   Microsoft Corporation\n   One Microsoft Way\n   Redmond, Washington\
    \ 98052\n   EMail: stevec@microsoft.com\n"
- title: Appendix A - Pseudocode
  contents:
  - "Appendix A - Pseudocode\n   The routines mentioned in the text are described\
    \ in pseudocode below.\n"
- title: A.1 LmChallengeResponse()
  contents:
  - "A.1 LmChallengeResponse()\n   LmChallengeResponse(\n   IN  8-octet          Challenge,\n\
    \   IN  0-to-14-oem-char Password,\n   OUT 24-octet         Response )\n   {\n\
    \      LmPasswordHash( Password, giving PasswordHash )\n      ChallengeResponse(\
    \ Challenge, PasswordHash, giving Response )\n   }\n"
- title: A.2 LmPasswordHash()
  contents:
  - "A.2 LmPasswordHash()\n   LmPasswordHash(\n   IN  0-to-14-oem-char Password,\n\
    \   OUT 16-octet         PasswordHash )\n   {\n      Set UcasePassword to the\
    \ uppercased Password\n      Zero pad UcasePassword to 14 characters\n      DesHash(\
    \ 1st 7-octets of UcasePassword,\n               giving 1st 8-octets of PasswordHash\
    \ )\n      DesHash( 2nd 7-octets of UcasePassword,\n               giving 2nd\
    \ 8-octets of PasswordHash )\n   }\n"
- title: A.3 DesHash()
  contents:
  - "A.3 DesHash()\n   DesHash(\n   IN  7-octet Clear,\n   OUT 8-octet Cypher )\n\
    \   {\n      /*\n       * Make Cypher an irreversibly encrypted form of Clear\
    \ by\n       * encrypting known text using Clear as the secret key.\n       *\
    \ The known text consists of the string\n       *\n       *              KGS!@#$%\n\
    \       */\n      Set StdText to \"KGS!@#$%\"\n      DesEncrypt( StdText, Clear,\
    \ giving Cypher )\n   }\n"
- title: A.4 DesEncrypt()
  contents:
  - "A.4 DesEncrypt()\n   DesEncrypt(\n   IN  8-octet Clear,\n   IN  7-octet Key,\n\
    \   OUT 8-octet Cypher )\n   {\n      /*\n       * Use the DES encryption algorithm\
    \ [4] in ECB mode [9]\n       * to encrypt Clear into Cypher such that Cypher\
    \ can\n       * only be decrypted back to Clear by providing Key.\n       * Note\
    \ that the DES algorithm takes as input a 64-bit\n       * stream where the 8th,\
    \ 16th, 24th, etc.  bits are\n       * parity bits ignored by the encrypting algorithm.\n\
    \       * Unless you write your own DES to accept 56-bit input\n       * without\
    \ parity, you will need to insert the parity bits\n       * yourself.\n      \
    \ */\n   }\n"
- title: A.5 NtChallengeResponse()
  contents:
  - "A.5 NtChallengeResponse()\n   NtChallengeResponse(\n   IN  8-octet          \
    \     Challenge,\n   IN  0-to-256-unicode-char Password,\n   OUT 24-octet    \
    \          Response )\n   {\n      NtPasswordHash( Password, giving PasswordHash\
    \ )\n      ChallengeResponse( Challenge, PasswordHash, giving Response )\n   }\n"
- title: A.6 NtPasswordHash()
  contents:
  - "A.6 NtPasswordHash()\n   NtPasswordHash(\n   IN  0-to-256-unicode-char Password,\n\
    \   OUT 16-octet              PasswordHash )\n   {\n      /*\n       * Use the\
    \ MD4 algorithm [5] to irreversibly hash Password\n       * into PasswordHash.\
    \  Only the password is hashed without\n       * including any terminating 0.\n\
    \       */\n   }\n"
- title: A.7 ChallengeResponse()
  contents:
  - "A.7 ChallengeResponse()\n   ChallengeResponse(\n   IN  8-octet  Challenge,\n\
    \   IN  16-octet PasswordHash,\n   OUT 24-octet Response )\n   {\n      Set ZPasswordHash\
    \ to PasswordHash zero-padded to 21 octets\n      DesEncrypt( Challenge,\n   \
    \               1st 7-octets of ZPasswordHash,\n                  giving 1st 8-octets\
    \ of Response )\n      DesEncrypt( Challenge,\n                  2nd 7-octets\
    \ of ZPasswordHash,\n                  giving 2nd 8-octets of Response )\n   \
    \   DesEncrypt( Challenge,\n                  3rd 7-octets of ZPasswordHash,\n\
    \                  giving 3rd 8-octets of Response )\n   }\n"
- title: A.8 LmEncryptedPasswordHash()
  contents:
  - "A.8 LmEncryptedPasswordHash()\n   LmEncryptedPasswordHash(\n   IN  0-to-14-oem-char\
    \ Password,\n   IN  8-octet          KeyValue,\n   OUT 16-octet         Cypher\
    \ )\n   {\n      LmPasswordHash( Password, giving PasswordHash )\n      PasswordHashEncryptedWithBlock(\
    \ PasswordHash,\n                                      KeyValue,\n           \
    \                           giving Cypher )\n   }\n"
- title: A.9 PasswordHashEncryptedWithBlock()
  contents:
  - "A.9 PasswordHashEncryptedWithBlock()\n   PasswordHashEncryptedWithBlock(\n  \
    \ IN  16-octet PasswordHash,\n   IN  8-octet  Block,\n   OUT 16-octet Cypher )\n\
    \   {\n      DesEncrypt( 1st 8-octets PasswordHash,\n                  1st 7-octets\
    \ Block,\n                  giving 1st 8-octets Cypher )\n      DesEncrypt( 2nd\
    \ 8-octets PasswordHash,\n                  1st 7-octets Block,\n            \
    \      giving 2nd 8-octets Cypher )\n   }\n"
- title: A.10 NtEncryptedPasswordHash()
  contents:
  - "A.10 NtEncryptedPasswordHash()\n   NtEncryptedPasswordHash(  IN   0-to-14-oem-char\
    \  Password IN  8-octet\n   Challenge OUT 16-octet         Cypher ) {\n      NtPasswordHash(\
    \ Password, giving PasswordHash )\n      PasswordHashEncryptedWithBlock( PasswordHash,\n\
    \                                      Challenge,\n                          \
    \            giving Cypher )\n   }\n"
- title: A.11 NewPasswordEncryptedWithOldNtPasswordHash()
  contents:
  - "A.11 NewPasswordEncryptedWithOldNtPasswordHash()\n   datatype-PWBLOCK\n   {\n\
    \      256-unicode-char Password\n      4-octets         PasswordLength\n   }\n\
    \   NewPasswordEncryptedWithOldNtPasswordHash(\n   IN  0-to-256-unicode-char NewPassword,\n\
    \   IN  0-to-256-unicode-char OldPassword,\n   OUT datatype-PWBLOCK      EncryptedPwBlock\
    \ )\n   {\n      NtPasswordHash( OldPassword, giving PasswordHash )\n      EncryptPwBlockWithPasswordHash(\
    \ NewPassword,\n                                      PasswordHash,\n        \
    \                              giving EncryptedPwBlock )\n   }\n"
- title: A.12 EncryptPwBlockWithPasswordHash()
  contents:
  - "A.12 EncryptPwBlockWithPasswordHash()\n   EncryptPwBlockWithPasswordHash(\n \
    \  IN  0-to-256-unicode-char Password,\n   IN  16-octet              PasswordHash,\n\
    \   OUT datatype-PWBLOCK      PwBlock )\n   {\n      Fill ClearPwBlock with random\
    \ octet values\n      PwSize = lstrlenW( Password ) * sizeof( unicode-char )\n\
    \      PwOffset = sizeof( ClearPwBlock.Password ) - PwSize\n      Move PwSize\
    \ octets to (ClearPwBlock.Password + PwOffset ) from Password\n      ClearPwBlock.PasswordLength\
    \ = PwSize\n      Rc4Encrypt( ClearPwBlock,\n                  sizeof( ClearPwBlock\
    \ ),\n                  PasswordHash,\n                  sizeof( PasswordHash\
    \ ),\n                  giving PwBlock )\n   }\n"
- title: A.13 Rc4Encrypt()
  contents:
  - "A.13 Rc4Encrypt()\n   Rc4Encrypt(\n   IN  x-octet Clear,\n   IN  integer ClearLength,\n\
    \   IN  y-octet Key,\n   IN  integer KeyLength,\n   OUT x-octet Cypher )\n   {\n\
    \      /*\n       * Use the RC4 encryption algorithm [6] to encrypt Clear of\n\
    \       * length ClearLength octets into a Cypher of the same length\n       *\
    \ such that the Cypher can only be decrypted back to Clear\n       * by providing\
    \ a Key of length KeyLength octets.\n       */\n   }\n"
- title: A.14 OldNtPasswordHashEncryptedWithNewNtPasswordHash()
  contents:
  - "A.14 OldNtPasswordHashEncryptedWithNewNtPasswordHash()\n   OldNtPasswordHashEncryptedWithNewNtPasswordHash(\n\
    \   IN  0-to-256-unicode-char NewPassword,\n   IN  0-to-256-unicode-char OldPassword,\n\
    \   OUT 16-octet              EncryptedPasswordHash )\n   {\n      NtPasswordHash(\
    \ OldPassword, giving OldPasswordHash )\n      NtPasswordHash( NewPassword, giving\
    \ NewPasswordHash )\n      NtPasswordHashEncryptedWithBlock( OldPasswordHash,\n\
    \                                        NewPasswordHash,\n                  \
    \                      giving EncryptedPasswordHash )\n   }\n"
- title: A.15 NewPasswordEncryptedWithOldLmPasswordHash()
  contents:
  - "A.15 NewPasswordEncryptedWithOldLmPasswordHash()\n   NewPasswordEncryptedWithOldLmPasswordHash(\n\
    \   IN  0-to-256-unicode-char NewPassword,\n   IN  0-to-256-unicode-char OldPassword,\n\
    \   OUT datatype-PWBLOCK      EncryptedPwBlock )\n   {\n      LmPasswordHash(\
    \ OldPassword, giving PasswordHash )\n      EncryptPwBlockWithPasswordHash( NewPassword,\
    \ PasswordHash,\n                                      giving EncryptedPwBlock\
    \ )\n   }\n"
- title: A.16 OldLmPasswordHashEncryptedWithNewNtPasswordHash()
  contents:
  - "A.16 OldLmPasswordHashEncryptedWithNewNtPasswordHash()\n   OldLmPasswordHashEncryptedWithNewNtPasswordHash(\n\
    \   IN  0-to-256-unicode-char NewPassword,\n   IN  0-to-256-unicode-char OldPassword,\n\
    \   OUT 16-octet              EncryptedPasswordHash )\n   {\n      LmPasswordHash(\
    \ OldPassword, giving OldPasswordHash )\n      NtPasswordHash( NewPassword, giving\
    \ NewPasswordHash )\n      NtPasswordHashEncryptedWithBlock( OldPasswordHash,\
    \ NewPasswordHash,\n                                      giving EncrytptedPasswordHash\
    \ )\n   }\n"
- title: A.17 NtPasswordHashEncryptedWithBlock()
  contents:
  - "A.17 NtPasswordHashEncryptedWithBlock()\n   NtPasswordHashEncryptedWithBlock(\n\
    \   IN  16-octet PasswordHash,\n   IN  16-octet Block,\n   OUT 16-octet Cypher\
    \ )\n   {\n      DesEncrypt( 1st 8-octets PasswordHash,\n                  1st\
    \ 7-octets Block,\n                  giving 1st 8-octets Cypher )\n      DesEncrypt(\
    \ 2nd 8-octets PasswordHash,\n                  2nd 7-octets Block,\n        \
    \          giving 2nd 8-octets Cypher )\n   }\n"
- title: Appendix B - Examples
  contents:
  - 'Appendix B - Examples

    '
- title: B.1 Negotiation Examples
  contents:
  - "B.1 Negotiation Examples\n   Here are some examples of typical negotiations.\
    \  The peer is on the\n   left and the authenticator is on the right.\n   The\
    \ packet sequence ID is incremented on each authentication retry\n   Response\
    \ and on the change password response.  All cases where the\n   packet sequence\
    \ ID is updated are noted below.\n   Response retry is never allowed after Change\
    \ Password.  Change\n   Password may occur after Response retry.  The implied\
    \ challenge form\n   is shown in the examples, though all cases of \"first challenge+23\"\
    \n   should be replaced by the \"C=cccccccccccccccc\" challenge if\n   authenticator\
    \ supplies it in the Failure packet.\n"
- title: B.1.1 Successful authentication
  contents:
  - "B.1.1 Successful authentication\n            <- Challenge\n        Response ->\n\
    \            <- Success\n"
- title: B.1.2 Failed authentication with no retry allowed
  contents:
  - "B.1.2 Failed authentication with no retry allowed\n            <- Challenge\n\
    \        Response ->\n            <- Failure (E=691 R=0)\n"
- title: B.1.3 Successful authentication after retry
  contents:
  - "B.1.3 Successful authentication after retry\n            <- Challenge\n     \
    \   Response ->\n            <- Failure (E=691 R=1), disable short timeout\n \
    \       Response (++ID) to first challenge+23 ->\n            <- Success\n"
- title: B.1.4 Failed hack attack with 3 attempts allowed
  contents:
  - "B.1.4 Failed hack attack with 3 attempts allowed\n            <- Challenge\n\
    \        Response ->\n            <- Failure (E=691 R=1), disable short timeout\n\
    \        Response (++ID) to first challenge+23 ->\n            <- Failure (E=691\
    \ R=1), disable short timeout\n        Response (++ID) to first challenge+23+23\
    \ ->\n            <- Failure (E=691 R=0)\n"
- title: B.1.5 Successful authentication with password change
  contents:
  - "B.1.5 Successful authentication with password change\n            <- Challenge\n\
    \        Response ->\n            <- Failure (E=648 R=0 V=2), disable short timeout\n\
    \        ChangePassword (++ID) to first challenge ->\n            <- Success\n"
- title: B.1.6 Successful authentication with retry and password change
  contents:
  - "B.1.6 Successful authentication with retry and password change\n            <-\
    \ Challenge\n        Response ->\n            <- Failure (E=691 R=1), disable\
    \ short timeout\n        Response (++ID) to first challenge+23 ->\n          \
    \  <- Failure (E=648 R=0 V=2), disable short timeout\n        ChangePassword (++ID)\
    \ to first challenge+23 ->\n            <- Success\n"
- title: B.2 Hash Example
  contents:
  - 'B.2 Hash Example

    '
- title: Intermediate values for password "MyPw".
  contents:
  - "Intermediate values for password \"MyPw\".\n   8-octet Challenge:\n   10 2D B5\
    \ DF 08 5D 30 41\n   0-to-256-unicode-char NtPassword:\n   4D 00 79 00 50 00 77\
    \ 00\n   16-octet NtPasswordHash:\n   FC 15 6A F7 ED CD 6C 0E DD E3 33 7D 42 7F\
    \ 4E AC\n   24-octet NtChallengeResponse:\n   4E 9D 3C 8F 9C FD 38 5D 5B F4 D3\
    \ 24 67 91 95 6C\n   A4 C3 51 AB 40 9A 3D 61\n"
- title: B.3 Example of DES Key Generation
  contents:
  - 'B.3 Example of DES Key Generation

    '
- title: DES uses 56-bit keys, expanded to 64 bits by the insertion of parity
  contents:
  - 'DES uses 56-bit keys, expanded to 64 bits by the insertion of parity

    '
- title: bits.  After the parity of the key has been fixed, every eighth bit is a
  contents:
  - 'bits.  After the parity of the key has been fixed, every eighth bit is a

    '
- title: parity bit and the number of bits that are set (1) in each octet is odd;
  contents:
  - 'parity bit and the number of bits that are set (1) in each octet is odd;

    '
- title: i.e., odd parity.  Note that many DES engines do not check parity,
  contents:
  - 'i.e., odd parity.  Note that many DES engines do not check parity,

    '
- title: however, simply stripping the parity bits.  The following example
  contents:
  - 'however, simply stripping the parity bits.  The following example

    '
- title: illustrates the values resulting from the use of the 16-octet
  contents:
  - 'illustrates the values resulting from the use of the 16-octet

    '
- title: NTPasswordHash shown in Appendix B.2 to generate a pair of DES keys
  contents:
  - 'NTPasswordHash shown in Appendix B.2 to generate a pair of DES keys

    '
- title: (e.g., for use in the NtPasswordHashEncryptedWithBlock() described in
  contents:
  - '(e.g., for use in the NtPasswordHashEncryptedWithBlock() described in

    '
- title: Appendix A.17).
  contents:
  - "Appendix A.17).\n   16-octet NtPasswordHash:\n   FC 15 6A F7 ED CD 6C 0E DD E3\
    \ 33 7D 42 7F 4E AC\n   First \"raw\" DES key (initial 7 octets of password hash):\n\
    \   FC 15 6A F7 ED CD 6C\n   First parity-corrected DES key (eight octets):\n\
    \   FD 0B 5B 5E 7F 6E 34 D9\n   Second \"raw\" DES key (second 7 octets of password\
    \ hash)\n   0E DD E3 33 7D 42 7F\n   Second parity-corrected DES key (eight octets):\n\
    \   0E 6E 79 67 37 EA 08 FE\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1998).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
