- title: __initial_text__
  contents:
  - '             Network Element Service Specification Template

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines a framework for specifying services provided\
    \ by\n   network elements, and available to applications, in an internetwork\n\
    \   which offers multiple qualities of service. The document first\n   provides\
    \ some necessary context -- including relevant definitions and\n   suggested data\
    \ formats -- and then specifies a \"template\" which\n   service specification\
    \ documents should follow. The specification\n   template includes per-element\
    \ requirements such as the service's\n   packet handling behavior, parameters\
    \ required and made available by\n   the service, traffic specification and policing\
    \ requirements, and\n   traffic ordering relationships.  It also includes evaluation\
    \ criteria\n   for elements providing the service, and examples of how the service\n\
    \   might be implemented (by network elements) and used (by\n   applications).\n"
- title: Introduction
  contents:
  - "Introduction\n   This document defines the framework used to specify the functionality\n\
    \   of internetwork system components which support the the ability to\n   provide\
    \ multiple, dynamically selectable qualities of service to\n   applications using\
    \ an internetwork. The behavior of individual\n   routers and subnetworks is captured\
    \ as a set of \"services\", some or\n   all of which may be offered by each element.\
    \ The concatenation of\n   these services along the end-to-end data paths used\
    \ by an application\n   provides overall quality of service control.\n   The definition\
    \ of a service states what is required of a router (or,\n   more generally, any\
    \ network element; a router, switch, subnet, etc.)\n   which supports a particular\
    \ service. The service definition also\n   specifies parameters used to invoke\
    \ the service, the relationship\n   between those parameters and the service delivered,\
    \ and the end-to-\n   end behavior obtained by concatenating several instances\
    \ of the\n   service.\n   Each service definition also specifies the interface\
    \ between that\n   service and the environment. This includes the parameters needed\
    \ to\n   invoke the service, informational parameters which the service must\n\
    \   make available for use by setup, routing, and management mechanisms,\n   and\
    \ information which should be carried between end-nodes and network\n   elements\
    \ by those mechanisms in order to achieve the desired end-to-\n   end behavior.\
    \ However, a service definition does not describe the\n   specific protocols or\
    \ mechanisms used to establish state in the\n   network elements for flows that\
    \ use the described service.\n   Services defined following the guidelines of\
    \ this document are\n   intended for use both within the global Internet and private\
    \ IP\n   networks. In certain cases a concatenation of network element\n   services\
    \ may be used to provide a range of end-to-end behaviors, some\n   more suited\
    \ to a decentralized internet and some more appropriate for\n   a tightly managed\
    \ private network. This document points out places\n   where such distinction\
    \ may be appropriate.\n   This document is comprised of three parts.  The first\
    \ defines some\n   terms used both in this document and in the various service\n\
    \   specification documents.  The second discusses data formats and\n   representations.\
    \  The third portion of the document describes the\n   various components of the\
    \ service specification template.\n"
- title: Definitions
  contents:
  - "Definitions\n   The following terms are used throughout this document. Service\n\
    \   specification documents should employ the same terms to express these\n  \
    \ concepts.\n o Quality of Service (QoS)\n   In the context of this document,\
    \ quality of service refers to the\n   nature of the packet delivery service provided,\
    \ as described by\n   parameters such as achieved bandwidth, packet delay, and\
    \ packet loss\n   rates. Traditionally, the Internet has offered a single quality\
    \ of\n   service, best-effort delivery, with available bandwidth and delay\n \
    \  characteristics dependent on instantaneous load. Control over the\n   quality\
    \ of service seen by applications is exercised by adequate\n   provisioning of\
    \ the network infrastructure. In contrast, a network\n   with dynamically controllable\
    \ quality of service allows individual\n   application sessions to request network\
    \ packet delivery\n   characteristics according to their perceived needs, and\
    \ may provide\n   different qualities of service to different applications. It\
    \ should\n   be understood that there is a range of useful possibilities between\n\
    \   the two endpoints of providing no dynamic QoS control at all and\n   providing\
    \ extremely precise and accurate control of QoS parameters.\n o Network Element\n\
    \   A \"Network Element\" (or the equivalent shorter form \"Element\"), is\n \
    \  any component of an internetwork which directly handles data packets\n   and\
    \ thus is potentially capable of exercising QoS control over data\n   flowing\
    \ through it. Network elements include routers, subnetworks,\n   and end-node\
    \ operating systems. A QoS-capable network element is one\n   which offers one\
    \ or more of the services defined according to the\n   rules given in this document.\
    \  Note that this definition, by itself,\n   preclude QoS-capable network elements\
    \ that meet performance goals\n   purely through adequate provisioning rather\
    \ than active admission and\n   traffic control mechanisms.  A \"QoS-aware\" network\
    \ element is one\n   which supports the interfaces (described below) required\
    \ by the\n   service definitions.  Thus, a QoS-aware network element need not\n\
    \   actually offer any of the services defined according to the format of\n  \
    \ this document; it merely needs to know how to deny service requests.\n o Flow\n\
    \   For the purposes of this document a flow is a set of packets\n   traversing\
    \ a network element all of which are covered by the same\n   request for control\
    \ of quality of service. At a given network element\n   a flow may consist of\
    \ the packets from a single application session,\n   or it may be an aggregation\
    \ comprising the combined data traffic from\n   a number of application sessions.\n\
    \      NOTE: this definition of a flow is different from that used in\n      IPv6,\
    \ where a flow is defined as those packets with the same\n      source address\
    \ and FlowID.\n   Mechanisms used to associate a request for quality of service\
    \ control\n   with the packets covered by that request are beyond the scope of\
    \ this\n   document.\n o Service\n   The phrase \"service\" or \"QoS Control Service\"\
    \ describes a named,\n   coordinated set of QoS control capabilities provided\
    \ by a single\n   network element.  The definition of a service includes a\n \
    \  specification of the functions to be performed by the network\n   element,\
    \ the information required by the element to perform these\n   functions, and\
    \ the information made available by the element to other\n   elements of the system.\
    \  A service is conceptually implemented within\n   the \"service module\" contained\
    \ within the network element.\n      NOTE: The above defines a precise meaning\
    \ for the word \"service\".\n      Service is a word which has a variety of meanings\
    \ throughout the\n      networking community;  the definition of \"service\" given\
    \ here\n      refers specifically to the actions and responses of a single\n \
    \     network element such as a router or subnet. This contrasts with\n      the\
    \ more end-to-end oriented definition of the same word seen in\n      some other\
    \ networking contexts.\n o Behavior\n   A \"behavior\" is the QoS-related end-to-end\
    \ performance seen by an\n   application session. This behavior is the end result\
    \ of composing the\n   services offered by each network element along the path\
    \ of the\n   application's data flow.\n   When each network element along a data\
    \ flow path offers the same\n   service, it is frequently possible to explain\
    \ the resulting end-to-\n   end behavior in a straightforward fashion. The behavior\
    \ of a data\n   flow path comprised of elements using different services is more\n\
    \   complicated, and may in fact be undefined. A future version of this\n   document\
    \ may impose additional requirements on the service\n   specification relating\
    \ to multi-service concatenation.\n o Characterization\n   A characterization\
    \ is a computed approximation of the actual end-to-\n   end behavior which would\
    \ be seen by a flow requesting specific QoS\n   services from the network.  By\
    \ providing additional information to\n   the end-nodes before a flow is established,\
    \ characterizations assist\n   the end-nodes in choosing the services to be requested\
    \ from the\n   network.\n o Characterization Parameters\n   Characterizations\
    \ are computed from a set of characterization\n   parameters provided by each\
    \ network element on the flow's path, and a\n   composition function which computes\
    \ the end-to-end characterization\n   from those parameters. The composition function\
    \ may in practice be\n   executed in a distributed fashion by the setup or routing\
    \ protocol,\n   or the characterization parameters may be gathered to a single\
    \ point\n   and the characterization computed at that point.\n   Several characterizations\
    \ may be computed for a single candidate data\n   flow. Conversely, a service\
    \ may provide no characterizations, and\n   under some conditions no characterizations\
    \ may be available to the\n   end-nodes requesting QoS services.\n o Composition\
    \ Function\n   A composition function accepts characterization parameters as input\n\
    \   and computes a characterization, as described above.\n o Traffic Specification\
    \ (TSpec)\n   A Traffic Specification, or TSpec, is a description of the traffic\n\
    \   pattern for which service is being requested. In general, the TSpec\n   forms\
    \ one side of a \"contract\" between the data flow and the service.\n   Once a\
    \ service request is accepted, the service module has agreed to\n   provide a\
    \ specific QoS as long as the flow's data traffic continues\n   to be accurately\
    \ described by the TSpec.\n   As examples, this specification might take the form\
    \ of a token bucket\n   filter (defined below) or an upper bound on the peak rate.\
    \ Note that\n   the traffic specification specifies the flow's *allowed* traffic\n\
    \   pattern, not the flows *actual* traffic pattern. The behavior of a\n   service\
    \ when a flow's actual traffic does not conform to the traffic\n   specification\
    \ must be defined by the service (see \"Policing\" below).\n o Service Request\
    \ Specification (RSpec)\n   A Service Request Specification, or RSpec, is a specification\
    \ of the\n   quality of service a flow wishes to request from a network element.\n\
    \   The contents of a service request specification is highly specific to\n  \
    \ a particular service. As examples, these specifications might contain\n   information\
    \ about bandwidth allocated to the flow, maximum delays, or\n   packet loss rates.\n\
    \ o Setup Protocol\n   A setup protocol is used to carry QoS-related information\
    \ from the\n   end-nodes requesting QoS control to network elements which must\n\
    \   exercise that control, and to install and maintain to required QoS\n   control\
    \ state in those network elements.  A setup protocol may also\n   be used to collect\
    \ QoS-related information from interior network\n   elements along an application's\
    \ data flow path for ultimate delivery\n   to end nodes. Examples of protocols\
    \ which perform setup functions are\n   RSVP [RFC 2205], ST-II [RFC 1819], and\
    \ Q.2931.\n   Note that other mechanisms, such as network management protocols,\
    \ may\n   also perform this function. The phrase \"setup protocol\"\n   conventionally\
    \ refers to a protocol with this function as its primary\n   purpose.\n o Token\
    \ Bucket\n   A Token Bucket is a particular form of traffic specification\n  \
    \ consisting of a \"token rate\" r and a \"bucket size\" b. Essentially,\n   the\
    \ r parameter specifies the continually sustainable data rate,\n   while the b\
    \ parameter specifies the extent to which the data rate can\n   exceed the sustainable\
    \ level for short periods of time.  More\n   specifically, the traffic must obey\
    \ the rule that over all time\n   periods, the amount of data sent cannot exceed\
    \ rT+b, where T is the\n   length of the time period.\n   Token buckets are further\
    \ discussed in [PARTRIDGE].\n o Token Bucket Filter\n   A Token Bucket Filter\
    \ is a filtering or policing function which\n   differentiates those packets in\
    \ a traffic flow which conform to a\n   particular token bucket specification\
    \ from those packets which do\n   not. The specific treatment accorded nonconforming\
    \ packets is not\n   specified in this definition; common actions are relegating\
    \ the\n   packet to best effort service, discarding the packet, or marking the\n\
    \   packet in some fashion.\n  o Admission Control\n   Admission control is the\
    \ process of deciding whether a newly arriving\n   request for service from a\
    \ network element can be granted. This\n   action must be performed by any service\
    \ which wishes to offer\n   absolute quantitative bounds on overall performance.\
    \ It is not\n   necessary for services which provide only relative statements\
    \ about\n   performance, such as the Internet's current best-effort service. The\n\
    \   precise criteria for making the admission control decision are a\n   specific\
    \ to each particular service.\n o Policing\n   Policing is the set of actions\
    \ triggered when a flow's actual data\n   traffic characteristics exceed the expected\
    \ values given in the\n   flow's traffic specification. Services which require\
    \ policing\n   functions to operate correctly must specify both the action to\
    \ be\n   taken when such discrepancies occur and the locations in the network\n\
    \   where discrepancies are to be detected.  Examples of such actions\n   might\
    \ include relegating the packet to best effort service, dropping\n   packets,\
    \ reshaping the traffic, or marking non-conforming traffic in\n   some fashion.\n\
    \  o Interfaces\n   The service module conceptually interacts with other portions\
    \ of the\n   network element through a number of interfaces.  The service\n  \
    \ specification document should clearly define the specific data,\n   including\
    \ formats, which moves across each conceptual interface, and\n   ensure that the\
    \ mapping between conceptual interfaces and the\n   specific mechanisms of the\
    \ service being defined are clear.\n Data Format and Representation\n   A service\
    \ module will import and export a variety of data according\n   to the specific\
    \ requirements of the services the network element\n   supports. Each service\
    \ definition MUST specify the format of each\n   such data item in an abstract\
    \ manner. The information specified must\n   be sufficient for the designer of\
    \ a setup protocol to correctly\n   select an appropriate concrete (packet) format\
    \ for variables\n   containing this data. At minimum, the following information\
    \ must be\n   given:\n     - Type: whether the quantity is an enumeration, a numerical\
    \ value,\n     etc.\n     - Range: for numerical quantities, the minimum and maximum\
    \ values\n     the quantity must be able to represent. For enumerated quantities,\n\
    \     an estimate of the maximum number of items which may need be\n     enumerated\
    \ in the future, even if many of the values are currently\n     unused.\n    \
    \ - Precision: the precision with which a numerical quantity must be\n     represented,\
    \ and whether that precision is absolute (calling for an\n     integer quantity)\
    \ or a percentage of the value (allowing for a\n     floating point quantity).\n\
    \   The service definition SHOULD additionally specify a preferred\n   concrete\
    \ format for each data field, in the usual packet-layout\n   format used in current\
    \ Internet Standard documents or in some other\n   accepted specification format.\
    \ If the service definition contains\n   these concrete definitions, they should\
    \ be sufficiently complete and\n   detailed to allow the service definition to\
    \ be incorporated by\n   reference into the specifications for setup protocols\
    \ and other users\n   of the specified data.\n      NOTE: The wording above is\
    \ intended to encourage the use of common\n      data formats by all protocols\
    \ carrying data related to a specific\n      service, while not mandating this\
    \ common format or infringing on\n      the freedom of protocol specification\
    \ designers to define data\n      representations using alternative mechanisms\
    \ such as ASN.1 or XDR.\n"
- title: Service and Data Element Naming
  contents:
  - "Service and Data Element Naming\n   End-nodes, network elements, setup protocols,\
    \ and management entities\n   within an integrated services internetwork need\
    \ to exchange\n   information about services, service invocation parameters,\n\
    \   characterization parameters, and the intermediate variables and end\n   results\
    \ of composition functions.  To support this requirement, a\n   single uniform\
    \ namespace is established for services and their\n   parameters.\n   The namespace\
    \ is a two-level hierarchy:\n     <service_name>.<parameter_name>.\n   Each of\
    \ these elements is a integer numerical quantity.\n   <Service Name> is an integer\
    \ in the range 1 to 254. The number space\n   is broken into three regions.\n\
    \   Service number 1 is used to indicate that the associated parameter is\n  \
    \ generic\", and is not associated with a specific service. This use of\n   generic\
    \ parameters is described more fully in [RFC 2215].\n   The range from 2 to 127\
    \ used to name services defined by the IETF.\n   Procedures for allocating service\
    \ numbers in this region will be\n   established by the IETF INT-SERV WG and the\
    \ IANA. Services designed\n   for public use should obtain a number from this\
    \ space. The minimum\n   requirement for doing so is a published RFC following\
    \ the format\n   described in this note.\n   Service numbers in the region above\
    \ 127 are reserved for experimental\n   or private services. Service designers\
    \ may allocate numbers from this\n   space at random for local experimental use.\
    \ A policy for global but\n   temporary allocation of these numbers may be established\
    \ in the\n   future if necessary.\n   The value 0 is left unused to allow the\
    \ direct mapping of parameter\n   names to MIB object names, as described below.\n\
    \   The value 255 is reserved to facilitate future expansion of the\n   service\
    \ number space, if required.\n   <Parameter_name> is a number in the range 1 to\
    \ 254, allocated on a\n   per-service basis.  Within this range, the values 1\
    \ to 127 are\n   reserved for assignment to parameters with a common, shared meaning\n\
    \   across all services. These parameters are defined in [RFC 2215].\n   Numbers\
    \ for parameters specific to a service are assigned from the\n   range 128-254\
    \ by the author of the service specification document.\n   The value 0 is left\
    \ unused to allow the direct mapping of parameter\n   names to MIB object names,\
    \ as described below.\n   The value 255 is reserved to facilitate future expansion\
    \ of the\n   parameter number space, if required.\n   In addition to their uses\
    \ within the integrated services framework,\n   these <service_number>.<parameter_number>\
    \ pairs should be used as\n   last two levels of the MIB name when the corresponding\
    \ values are\n   made available to network management protocols.\n"
- title: Specification Document Format
  contents:
  - "Specification Document Format\n   The following portion of this document describes\
    \ the layout and\n   contents of a service specification. Each service specification\n\
    \   document MUST contain the sections marked [required] below, in the\n   order\
    \ listed. Each document SHOULD contain each of the remaining\n   sections in the\
    \ list below, unless there is a compelling argument\n   that the presence of the\
    \ section is not beneficial. Additional\n   material, including references, should\
    \ be included at the end of the\n   document.\n   Some of these sections are normative,\
    \ in that they describe specific\n   requirements to which conformant implementations\
    \ must adhere.  Other\n   sections are informational in nature, in that they describe\
    \ necessary\n   context and technical considerations important to the implementor\
    \ of\n   a service. The sections, and their nature (required or optional, and\n\
    \   informational or normative) are listed below:\n o Components\n   The body\
    \ of a service specification document incorporates the\n   following sections:\n\
    \     - End-to-End Behavior [required] [informational]\n     - Motivation [required]\
    \  [informational]\n     - Network Element Data Handling Requirements [required]\
    \ [normative]\n     - Invocation Information [required] [normative]\n     - Exported\
    \ Information [required] [normative]\n     - Policing [required] [normative]\n\
    \     - Ordering and Merging [required] [normative]\n     - Guidelines for Implementors\
    \  [optional] [informational]\n     - Evaluation Criteria [required] [informational]\n\
    \     - Examples of Implementation [optional] [informational]\n     - Examples\
    \ of Use [optional] [informational]\n o End-to-end Behavior\n   This is a description\
    \ of the behavior that results if all network\n   elements along the path offer\
    \ the same service, invoked with a\n   defined set of parameters.\n   In private\
    \ networks it will generally be the case that the required\n   end-to-end behavior\
    \ is obtained by concatenation of network elements\n   utilizing the same service\
    \ and making significant use of\n   characterizations.\n   In the global Internet,\
    \ this will not always be true. End-to-end\n   behaviors will frequently be obtained\
    \ through a concatenation of\n   network elements supporting different services,\
    \ including in some\n   cases elements which exercise no QoS control at all. Mechanisms\
    \ to\n   characterize end-to-end behavior in this circumstance are not fully\n\
    \   established at this time. Future versions of this document may impose\n  \
    \ additional requirements on service specifications to facilitate\n   inter-service\
    \ composition.\n   This section is for informational purposes only.\n o Motivation\n\
    \   This section discusses why this service is being defined. It\n   describes\
    \ what kinds of applications might make use of this service,\n   and why this\
    \ service might be more appropriate for those applications\n   than other possible\
    \ choices. This section is for informational\n   purposes only.\n o Network Element\
    \ Data Handling Requirements\n   This section contains a description of the QoS\
    \ properties seen by\n   data packets processed by a network element using this\
    \ service. The\n   description must clearly explain what variables are controlled,\
    \ the\n   degree of control exercised, and what aspects of the service's\n   handling\
    \ model are fixed or assumed. Examples of degree of control\n   information include\
    \ \"this property must be mathematically assured\"\n   and \"this property should\
    \ be met under most conditions\". An example\n   of a stated assumption is \"\
    this service is assumed to have extremely\n   low packet loss; delay targets must\
    \ be met using admission control\n   rather than by discarding packets when overloaded\"\
    .\n   Requirements on packet handling SHOULD, when at all possible, be\n   expressed\
    \ as performance requirements rather than by specifying a a\n   particular packet\
    \ scheduling algorithm. The performance requirements\n   might, for example, be\
    \ a specification of the maximal packet delays\n   or the minimal bandwidth share\
    \ given to a flow.\n   This section also specifies actions which the packet handling\
    \ path is\n   required to take to actively provide feedback to end-nodes about\n\
    \   conditions at the network element. Such actions might include\n   explicitly\
    \ generated congestion feedback, indicated either as bits\n   set in the header\
    \ of data packets or separate control messages sent.\n   When writing this section\
    \ of the service specification document, the\n   authors' goal should be to specify\
    \ the required behavior as precisely\n   as necessary while still leaving adequate\
    \ room for the implementation\n   and architectural tradeoffs appropriate to different\
    \ circumstances\n   and classes of network elements. Successfully achieving this\
    \ balance\n   may require some care.\n o Invocation Information\n   This section\
    \ describes the set of parameters required by a service\n   module to invoke the\
    \ service, and a description of how the parameter\n   values are used by the service\
    \ module.  For example, a hypothetical\n   \"bounded delay\" service might be\
    \ described as accepting a request\n   indicating a delay target for the network\
    \ element and the set of\n   packets subject to that delay target, and processing\
    \ packets in the\n   given set with a delay of the target value or less.\n   Necessary\
    \ invocation information for most services can be broken into\n   two parts, the\
    \ Traffic Specification (TSpec) and the Service Request\n   Specification (RSpec).\
    \ The TSpec gives characteristics of the data\n   traffic to be handled, while\
    \ the Rspec specifies the properties\n   desired from the service. For example,\
    \ a service offering a\n   mathematical bound on delay might accept a TSpec giving\
    \ the traffic\n   flow's bandwidth and burstiness specified as a Token Bucket,\
    \ and an\n   RSpec giving the maximum tolerable queueing delay.\n   A service\
    \ accepting an invocation request may be thought of as\n   entering into a \"\
    contract\" to provide the service described by the\n   RSpec as long as the flow's\
    \ traffic continues to be described by the\n   TSpec. If the flow's traffic pattern\
    \ falls outside the bounds of the\n   TSpec, the QoS provided to the flow may\
    \ change. The precise nature of\n   this change is also described by the service\
    \ specification (see\n   \"Policing\" below).\n   The RSPec and TSpec components\
    \ of the invocation information should\n   be specified separately and independently,\
    \ as they will often be\n   generated by different elements of the internetwork\n\
    \   All quantitative information specifications in this section should\n   follow\
    \ the guidelines given in the Data Formats section of this\n   document, above.\n\
    \ o Exported Information and Characterization Parameters\n   This section describes\
    \ information which must be collected and\n   exported by the service module.\
    \ Exported information is available to\n   other modules of the network element,\
    \ and by extension to setup\n   protocols, routing protocols, network management\
    \ tools, and the like.\n   Information exported by service modules may be used\
    \ in several ways.\n   For example, quantities such as the amount of link bandwidth\n\
    \   dedicated to the service and the set of data flows currently\n   receiving\
    \ the service are appropriate pieces of information to make\n   available as network\
    \ management variables.\n   A service definition may identify a particular subset\
    \ of the\n   information exported by a service module as characterization\n  \
    \ parameters. These characterization parameters may be used to compute\n   or\
    \ estimate the end-to-end behavior of a data flow traversing a\n   concatenation\
    \ of network service elements. They may also be used to\n   characterize portions\
    \ of the path for use by network elements (e.g.,\n   in computing the buffer necessary,\
    \ an element may need to know\n   something about the service characteristics\
    \ of the upstream portion\n   of the path). A service which defines characterization\
    \ parameters\n   also specifies the characterizations they are used to generate\
    \ and\n   the composition functions used to generate the characterizations.\n\
    \      NOTE: Characterization parameters are identified as such by virtue\n  \
    \    of being the inputs to a service's defined composition functions.\n     \
    \ Because characterization parameters are part of a service's\n      overall exported\
    \ data set, they are also available to other\n      functions, such as network\
    \ management. The discussion below\n      relates solely to their use as characterization\
    \ parameters, and is\n      not intended to limit other uses.\n   Characterization\
    \ parameters may be relatively static quantities, such\n   as the bandwidth available\
    \ on a specific link, or relatively dynamic\n   quantities, such as a running\
    \ estimation of current packet delay.\n   Support for a service's defined characterization\
    \ parameters is\n   mandatory. Any network element offering this service must\
    \ be able to\n   measure, compute, or, if allowed by the specification, estimate\
    \ the\n   service's characterization parameters. Service designers are\n   encouraged\
    \ to understand the implications of specifying\n   characterization parameters\
    \ for a service, particularly with respect\n   to not unduly restricting the choice\
    \ of hardware and software\n   architectures used to implement the network element.\n\
    \   Characterization parameters are used by composing the values exported\n  \
    \ by each network element along a data flow's path according to a\n   composition\
    \ rule. For each parameter or set of parameters used to\n   develop a characterization,\
    \ the service specification must specify\n   the composition rule to be used.\
    \ These composition rules should\n   result in characterizations that are independent\
    \ of the order in\n   which the element are composed; commutativity and associativity\
    \ are\n   sufficient but not necessary conditions for this.\n   Characterization\
    \ parameters are available through a general\n   interface, and are provided in\
    \ response to a request from some other\n   module, such as a setup protocol or\
    \ the routing protocol. The\n   question of exactly how, or if, a specific protocol\
    \ (e.g., RSVP) uses\n   characterization parameters to generate characterizations\
    \ is\n   described in the specification of that specific protocol.\n   The correct\
    \ use of characterization parameters supplied by service\n   modules is a function\
    \ of the setup, routing, or management protocol\n   controlling the module. There\
    \ is no absolute guarantee that\n   characterizations will be available to end-nodes\
    \ desiring to use a\n   QoS control service. Service designers targeting services\
    \ for the\n   global Internet may wish to ensure that a service is useful even\
    \ in\n   the absence of characterizations, and to exhibit such uses in the\n \
    \  \"Examples\" sections of the service description document.\n   Conversely,\
    \ the availability of characterizations may be mandatory in\n   certain circumstances,\
    \ particularly for private IP networks providing\n   tightly controlled qualities\
    \ of service for specific applications.\n   Service designers targeting this environment\
    \ should particularly\n   ensure that the service provides adequate characterization\
    \ parameters\n   and composition functions to meet the needs of target audiences.\
    \ It\n   may be appropriate to specify the same basic service with additional\n\
    \   characterizations for meeting specific requirements beyond those of\n   the\
    \ global Internet.\n   Some useful \"general\" characterization parameters and\
    \ corresponding\n   composition rules are not associated with any specific service.\n\
    \   These include the speed-of-light latency of communication links and\n   available\
    \ link bandwidth. These general characterization parameters\n   are defined in\
    \ [RFC 2215].\n   Although every conformant implementation of a service is required\
    \ to\n   provide that service's characterization parameters, it is still\n   possible\
    \ that the desired characterization parameters will not be\n   available for composition\
    \ at all network elements in a path. This\n   situation may arise when different\
    \ network element services are used\n   at different points in the end-to-end\
    \ path, as may be required in a\n   heterogeneous internetworking environment.\
    \ For this reason,\n   characterization parameters and composition function results\n\
    \   conceptually include a \"validity flag\". A network element which is\n   unable\
    \ to provide the characterization parameter must set this flag,\n   and otherwise\
    \ leave parameter or composed value unchanged. Once set,\n   the flag is preserved\
    \ by the composition function, and serves as an\n   indicator of the validity\
    \ of the data when the final composed result\n   is delivered to its destination.\n\
    \   Protocols which transport characterization parameters and composition\n  \
    \ data must define and support a concrete representation for this\n   validity\
    \ flag, as well as for the characterization parameters\n   themselves.\n   NOTE:\
    \ This service specification template does not allow a service\n   definition\
    \ to *require* that a setup or invocation mechanism used\n   with the service\
    \ perform any function other than transport of\n   invocation parameters to the\
    \ network elements and signalling of\n   errors generated by the network elements\
    \ to the end nodes. A notable\n   example of this is that service specification\
    \ documents may not\n   require or assume that characterizations defined in the\
    \ specification\n   are actually computed or presented to the end nodes.\n   That\
    \ point notwithstanding, the practical usefulness of a specific\n   service may\
    \ be highly dependent on the presence of some additional\n   behavior in the networked\
    \ system, such as the computation and\n   presentation of characterizations to\
    \ end-nodes or the reliable\n   assurance that every network element in the path\
    \ from sender to\n   receivers supports the given service. Service specification\
    \ authors\n   are strongly encouraged to clearly explain the situation of their\n\
    \   service in this regard. Statements such as:\n      The characterizations defined\
    \ by this service serve as useful\n      hints to the application. However, the\
    \ service is specifically\n      intended to be useful even if characterizations\
    \ are not available.\n   or\n      The usefulness of this service depends strongly\
    \ on the delivery of\n      both characterizations and the knowledge that all\
    \ network elements\n      on the path support the service. Requests for this service\
    \ when\n      characterizations are not available are likely to lead to\n    \
    \  incorrect or misleading results.\n   are appropriate. It may also be useful\
    \ to consider this point in the\n   \"Examples of Use\" section described below.\n\
    \   NOTE: The possibility of modifying the overall architecture to\n   provide\
    \ information about the invoking protocol in a service request,\n   and to allow\
    \ a service to require that the invocation protocol\n   support specific additional\
    \ functionality, is an area of active\n   study.\n o Policing\n   This portion\
    \ of the service description describes the nature of\n   policing used to enforce\
    \ adherence to a flow's Traffic Specification.\n   The specification document\
    \ must specify the following points\n     - Expected policing action. This is\
    \ the action taken when packets\n     not conforming to the TSpec are detected.\
    \  Example actions include\n     relegating nonconforming packets to best effort,\
    \ immediately\n     dropping nonconforming packets, delaying these packets until\
    \ they\n     once again \"fit\" into the TSpec, or \"marking\" nonconforming packets\n\
    \     in some way.\n     - Legality of alternative policing actions. The section\
    \ must\n     specify whether actions not specifically mentioned in\n     specification's\
    \ description of policing behavior are legal. For\n     example, a service description\
    \ which specifies that nonconforming\n     packets are to be dropped should state\
    \ whether an alternate action,\n     such as delaying these packets, is acceptable.\n\
    \     - Location of policing actions in the internetwork. The description\n  \
    \   of policing must specify where that policing is done. Possibilities\n    \
    \ include \"at the edges of the network only\", \"at every hop\",\n     \"heterogeneous\
    \ branch points\" (points where the branches of a\n     multicast tree converge\
    \ and have different TSpecs reserved\n     downstream), and \"source merge points\"\
    \ (points where multiple data\n     streams covered by a single resource reservation\
    \ converge). The\n     specification should clearly state requirements about topology\n\
    \     information (for example \"this is an edge node\" or \"this is a\n     source\
    \ merge point\") which must be available from the setup\n     protocol or another\
    \ source.\n     In this section the specification should also specify the legality\n\
    \     of policing at additional points in the network, beyond those\n     listed\
    \ above.  This is important due to technical effects such as\n     are described\
    \ in the next paragraph.\n     Applicable additional technical considerations.\
    \ If policing of data\n     flows is required or legal at points other than the\
    \ flow's first\n     entry into the network, the service definition should describe\
    \ any\n     additional technical considerations which affect the design of such\n\
    \     policing. For example, many potential services will allow a data\n     flow\
    \ to become more bursty as it progresses through the network. If\n     such a\
    \ service allows policing at points other than the network\n     edge, the traffic\
    \ specification describing the flow will have to be\n     modified from that given\
    \ by the application to the network to\n     account for this growing burstiness.\
    \ Otherwise, it is likely that\n     the flow will be overpoliced, with packets\
    \ being penalized\n     unnecessarily.\n o Ordering and Merging\n   Ordering and\
    \ merging come into play when a network element receives\n   several invocation\
    \ requests covering the same data flow. As examples,\n   this could occur if several\
    \ receivers of a multicast data flow\n   requested QoS services for that flow\
    \ using the RSVP setup protocol,\n   or if a flow was subject to both a statically\
    \ installed permanent\n   invocation request and a dynamic request from a resource\
    \ setup\n   protocol.\n   In this situation the service module must be able to\
    \ answer questions\n   about the ordering between different invocation requests,\
    \ and must be\n   able to generate a single new invocation request which meets\
    \ the\n   semantics of the setup protocol and the requirements of all the\n  \
    \ original requesters. Operationally, this is achieved by having the\n   invoking\
    \ protocol ask the service module, given a set of invocation\n   requests I1...In,\
    \ to compute a new request which results in the\n   desired behavior.\n   Five\
    \ operations must be defined in this section. These are:\n     - Ordering. The\
    \ section must define an ordering relationship\n     between the service's TSpecs\
    \ and RSpecs. This may be a partial\n     ordering, in that some TSpecs or RSpecs\
    \ may be unordered with\n     respect to each other.\n     - Summation. This function\
    \ computes an invocation request which\n     represents the sum of N input invocation\
    \ requests. Typically this\n     function is used to compute the size of a service\
    \ request adequate\n     for a shared reservation for N different flows. It is\
    \ desirable but\n     not required that this function compute the \"least possible\
    \ sum\".\n     - Minimum. This function computes the minimum of two TSpecs.\n\
    \     Typically this function is used to compute the TSpec for an actual\n   \
    \  service invocation given a target TSpec for the service request and\n     a\
    \ TSpec for the flow's actual traffic pattern. The minimum function\n     must\
    \ compute the smallest TSpec adequate to describe the minimum of\n     the requested\
    \ TSpec and the flow's actual traffic.\n     - RSVP-Merge function. This function\
    \ computes the invocation\n     request used to request service at an RSVP [RFC\
    \ 2205] merge point.\n     The function must a) compute an appropriate invocation\
    \ request for\n     a set of downstream reservations being merged, and b) generate\n\
    \     appropriate reservation parameters to be passed upstream by RSVP.\n    \
    \ This function is described further below and in [RFC 2210].\n     - Least Common\
    \ Request function. This function computes an\n     invocation request sufficient\
    \ to provide service at least\n     equivalent to any one of the original requests\
    \ passed to the\n     function. This function differs from the RSVP-merge function\
    \ in\n     that it simply computes an upper bound. It does not need to compute\n\
    \     new invocation parameters to be passed upstream by RSVP and cannot\n   \
    \  utilize the second option discussed in \"Notes on RSVP Merging\"\n     below.\n\
    \ oo Notes on Ordering\n   Typically the ordering relation will be described separately\
    \ for the\n   service's TSpec and RSpec.  An invocation request is ordered with\n\
    \   respect to another if and only if both its TSpec and its RSpec are\n   similarly\
    \ ordered with respect to each other.\n   For TSpecs, the basic ordering relation\
    \ is well defined.  TSpec A is\n   substitutable for TSpec B if and only any flow\
    \ that is compliant with\n   TSpec B is also compliant with TSpec A. The service\
    \ specification\n   must explain how to compare two TSpecs to determine whether\
    \ this is\n   true.\n   For RSpecs, the ordering relation is dependent on the\
    \ service. RSpec\n   A is substitutable for RSpec B if the quality of service\
    \ invoked by\n   RSpec A is at least as good as the quality of service invoked\
    \ by\n   RSpec B.  Since there is no precise mathematical description of\n   \"\
    goodness\" of quality of service, these ordering relations must be\n   spelled\
    \ out explicitly in the service description.\n oo Notes on RSVP Merging\n   The\
    \ purpose of the RSVP merging function is to compute an invocation\n   request\
    \ which will provide service to the merged flow at least\n   equivalent to that\
    \ which any of the original requests would obtain\n   for its corresponding unmerged\
    \ flow. This equivalence may be obtained\n   in two ways\n     1) The merged request\
    \ may be computed as an upper bound on the set\n     of original (unmerged) invocation\
    \ requests. In this case, the\n     service offered by the merged request to any\
    \ particular traffic\n     flow is identical to that offered by the largest unmerged\
    \ request,\n     by definition.\n     2) The merged request may be computed as\
    \ a value smaller than the\n     upper bound on the set of original requests,\
    \ but the results passed\n     upstream may restrict the traffic sources to behavior\
    \ which makes\n     the merged and unmerged requests behave identically.\n   Note\
    \ that the merging rules for a particular service may apply either\n   option\
    \ 1 or option 2 to the different components of a TSpec, as\n   appropriate.  The\
    \ decision is typically made as follows:\n     When a downstream service module\
    \ instance can tolerate a flow which\n     exceeds the parameter, the upper bound\
    \ should be used. For example,\n     if the service supports policing to protect\
    \ itself against excess\n     traffic, the traffic rate supported by a merged\
    \ reservation might\n     be an upper bound across the traffic rates supported\
    \ by each\n     unmerged reservation. The effect of this will be to install the\n\
    \     merged reservation at the local node and to inform each traffic\n     source\
    \ of the largest traffic rate protected by reservation along\n     any *one* distribution\
    \ path from the source to a receiver.\n     When a downstream service module instance\
    \ will not function\n     properly if the parameter is exceeded, the merged function\
    \ should\n     select the least agressive value of the parameter to install and\n\
    \     pass upstream. In this case, the traffic sources will be informed\n    \
    \ of a parameter value which is appropriate for *all* distribution\n     paths\
    \ traversed by the traffic flow. For example, services which\n     can handle\
    \ packets of only limited size can incorporate packet size\n     in the TSpec,\
    \ and treat the parmeter as described in option 2. The\n     effect of this will\
    \ be to limit packet sizes in the flow to those\n     which can be handled by\
    \ every instance of the service along the\n     flow's path.\n   This merging\
    \ calculation must be performed by the service module\n   because it is specific\
    \ to a particular service.\n oo Notes on Calculating Upper Bounds\n   Both the\
    \ RSVP-Merge function and the Least Common Request function\n   may make use of\
    \ calculated upper bounds on TSpec and RSpec\n   parameters.\n   The calculated\
    \ upper bound need not be a least upper bound, nor do\n   the various network\
    \ elements along the path need to all use the same\n   choice of upper bound.\
    \  Any selection of invocation parameters Iu is\n   compliant as long as it substitutable\
    \ for each of the parameters\n   I1...In from which it is calculated.  Intuitively,\
    \ one set of\n   parameters is substitutable for another if the resulting quality\
    \ of\n   service is at least as desirable to all applications. A precise\n   definition\
    \ of this \"substitutable for\" function; the ordering\n   relation, must be specified\
    \ in the service definition. (It may be\n   specified as the empty set, in which\
    \ case merging of dissimilar\n   requests will not be allowed). If the ordering\
    \ function specified in\n   this section gives a partial order (if it is possible\
    \ for two RSpecs\n   or TSpecs to be unordered), then a separate upper bound computation\n\
    \   for the parmeter must be given as well.\n oo Notes on Service Substitution\n\
    \   This portion of the service description may also note any\n   relationships\
    \ with other services which are strictly ordered with\n   respect to the service\
    \ being defined. Two services A and B are\n   strictly ordered if it is always\
    \ possible to substitute service B for\n   the service A given a set of invocation\
    \ parameters for service A.\n   This ordering information may be used to allow\
    \ network elements which\n   provide service B to respond to requests for service\
    \ A, even if the\n   element does not provide service A directly. If the service\n\
    \   specification describes such an inter-service ordering, it MUST also\n   include\
    \ a description of the invocation parameter mapping function\n   for that ordering.\n\
    \   Substitution of of one service for another in cases where they are\n   not\
    \ strictly ordered is currently not supported. A future version of\n   this document\
    \ may augment the service specification format to support\n   this capability.\n\
    \ o Guidelines for Implementors\n   Many services may be defined in a manner which\
    \ allows the range of\n   behavior of a compliant network element to be rather\
    \ broad.  This\n   section should provide some guidance as to what range of behaviors\n\
    \   the author of the service specification expects the community to\n   desire\
    \ in their implementations.  Because these guidelines depend on\n   such imprecise\
    \ and undefinable notions at \"typical loads\", these\n   guidelines cannot be\
    \ incorporated as part of a strict compliance\n   test. Instead, they are for\
    \ informational purposes only.\n o Evaluation Criteria\n   Specific functional\
    \ behaviors required of an implementation for\n   conformance to a service specification\
    \ is detailed in the previous\n   sections.  However, the service specifications\
    \ are intended to allow\n   a wide range of implementations, and these implementations\
    \ will\n   differ in performance. This section describes tests that can be used\n\
    \   to evaluate a network element's implementation of a given service.\n   Implementors\
    \ of service modules face a number of tradeoffs, and it is\n   unlikely that a\
    \ single implementation would be considered \"best\"\n   under all circumstances.\
    \ For instance, given the same service\n   specification, an implementation appropriate\
    \ for a low-speed link\n   might target extremely high link utilization, while\
    \ a different\n   implementation might attempt to reduce non-loaded packet forwarding\n\
    \   delay to the minimum at the expense of somewhat lower utilization of\n   the\
    \ link. The intention of the tests specified in this section should\n   be to\
    \ probe the tradeoffs made by the implementation designer, and to\n   provide\
    \ metrics useful to guide the customer's choice of an\n   appropriate implementation\
    \ for her needs.\n   The tests specified in this section should be designed to\
    \ operate on\n   a single network element in isolation. This enables their use\
    \ in a\n   comparative rating system for QoS-aware network elements. In\n   production\
    \ networks, users will be more concerned with the end-to-end\n   behavior obtained,\
    \ which will depend not just on the particular\n   network elements selected,\
    \ but also on other factors such as the\n   setup protocol and the bandwidth of\
    \ the links. Some user-relevant\n   performance factors are the rate of admission\
    \ control rejections, the\n   range of services offered, and the packet delay\
    \ and drop rates in the\n   various service classes.  The form of any standardized\
    \ end-to-end\n   metrics and measurement tools for integrated service internetworks\
    \ is\n   not specified by this document or by service specification document\n\
    \   which follow the format given here.\n   This section is for informational\
    \ purposes only.\n o Examples of Implementation\n   This section describes example\
    \ instantiations of the service.  Often\n   these will just be references to the\
    \ literature, or brief sketches of\n   how the service could be implemented. \
    \ The purposes of the section\n   are to to provide a more concrete sense of the\
    \ service being\n   specified and to provide pointers and hints to aid the implementor.\n\
    \   However, the descriptions in this section are specifically not\n   intended\
    \ to exclude other implementation strategies.\n   This section is for informational\
    \ purposes only.\n o Examples of Use\n   In order to provide more a more concrete\
    \ sense of how this service\n   might be used, this section describes some example\
    \ uses of the\n   service, for informational purposes only.  The examples here\
    \ are not\n   meant to be exhaustive, and do not exclude in any way other uses\
    \ of\n   the service.\n   This section is for informational purposes only.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security considerations are not discussed in this\
    \ memo.\n"
- title: References
  contents:
  - "References\n   [PARTRIDGE] C. Partridge, Gigabit Networking, Addison Wesley\n\
    \   Publishers (1994).\n   [RFC 2215] Shenker, S., and J. Wroclawski, \"General\
    \ Characterization\n   Parameters for Integrated Service Network Elements\", RFC\
    \ 2215,\n   September 1997.\n   [RFC 2205] Braden, R., Ed., et. al., \"Resource\
    \ Reservation Protocol\n   (RSVP) - Version 1 Functional Specification\", RFC\
    \ 2205, September\n   1997.\n   [RFC 2212] Shenker, S., Partridge, C., and R.\
    \ Guerin, \"Specification\n   of Guaranteed Quality of Service\", RFC 2212, September\
    \ 1997.\n   [RFC 2211] Wroclawski, J., \"Specification of the Controlled Load\n\
    \   Quality of Service\", RFC 2211, September 1997.\n   [RFC 1819] Delgrossi,\
    \ L.,  and L. Berger, Editors, \"Internet Stream\n   Protocol Version 2 (ST2)\
    \ Protocol Specification - Version ST2+\", RFC\n   1819, August 1995.\n   [RFC\
    \ 2210] Wroclawski, J., \"The Use of RSVP with IETF Integrated\n   Services\"\
    , RFC 2210, September 1997.\n"
- title: 'Authors'' Address:'
  contents:
  - "Authors' Address:\n   Scott Shenker\n   Xerox PARC\n   3333 Coyote Hill Road\n\
    \   Palo Alto, CA  94304-1314\n   Phone: 415-812-4840\n   Fax:   415-812-4471\n\
    \   EMail: shenker@parc.xerox.com\n   John Wroclawski\n   MIT Laboratory for Computer\
    \ Science\n   545 Technology Sq.\n   Cambridge, MA  02139\n   Phone: 617-253-7885\n\
    \   Fax:   617-253-2673\n   EMail: jtw@lcs.mit.edu\n"
