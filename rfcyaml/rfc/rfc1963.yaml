- title: __initial_text__
  contents:
  - '               PPP Serial Data Transport Protocol (SDTP)

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Point-to-Point Protocol (PPP) [1] provides a standard method\
    \ for\n   transporting multi-protocol datagrams over point-to-point links.  PPP\n\
    \   defines an extensible Link Control Protocol, and proposes a family of\n  \
    \ Network Control Protocols for establishing and configuring different\n   network-layer\
    \ protocols.\n   This document describes a new Network level protocol (from the\
    \ PPP\n   point of view), PPP Serial Data Transport Protocol, that provides\n\
    \   encapsulation and an associated control protocol for transporting\n   serial\
    \ data streams over a PPP link.  This protocol was developed for\n   the purpose\
    \ of using PPP's many features to provide a standard method\n   for synchronous\
    \ data compression.  The encapsulation uses a header\n   structure based on that\
    \ of the ITU-T Recommendation V.120 [2].\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n     1.     Introduction ..........................................\
    \    2\n     2.     SDTP Packets ..........................................  \
    \  3\n        2.1       Padding .........................................    4\n\
    \        2.2       Packet Formats ..................................    4\n  \
    \   3.     Serial Data Control Protocol ..........................   11\n    \
    \ 4.     SDCP Configuration Option Format ......................   12\n      \
    \  4.1       Packet-Format ...................................   13\n        4.2\
    \       Header-Type .....................................   13\n        4.3  \
    \     Length-Field-Present ............................   14\n        4.4    \
    \   Multi-Port ......................................   14\n        4.5      \
    \ Transport-Mode ..................................   15\n        4.6       Maximum-Frame-Size\
    \ ..............................   16\n        4.7       Allow-Odd-Frames ................................\
    \   16\n        4.8       FCS-Type ........................................  \
    \ 17\n        4.9       Flow-Expiration-Time ............................   18\n\
    \     SECURITY CONSIDERATIONS ......................................   19\n  \
    \   REFERENCES ...................................................   19\n    \
    \ CHAIR'S ADDRESS ..............................................   20\n     AUTHORS'\
    \ ADDRESSES ...........................................   20\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document is a product of the TR30.1 ad hoc committee\
    \ on\n   compression of synchronous data.  It represents a component of a\n  \
    \ proposal to use PPP to provide compression of synchronous data in\n   DSU/CSUs.\n\
    \   In addition to providing support for multi-protocol datagrams, the\n   Point-to-Point\
    \ Protocol (PPP) [1] has defined an effective and robust\n   negotiating mechanism\
    \ that can be used on point to point links.  When\n   used in conjunction with\
    \ the PPP Compression Control Protocol [3] and\n   one of the PPP Compression\
    \ Protocols [4-10], PPP provides an\n   interoperable method of employing data\
    \ compression on a point-to-\n   point link.\n   This document provides a PPP\
    \ encapsulation for serial data,\n   specifying a transport protocol, PPP Serial\
    \ Data Transport Protocol\n   (PPP-SDTP), and an associated control protocol,\
    \ PPP Serial Data\n   Control Protocol (PPP-SDCP).  When these protocols are added\
    \ to above\n   mentioned PPP protocols, PPP can be used to provide compression\
    \ of\n   serial data on a point-to-point link.\n   This first edition of PPP-SDTP/SDCP\
    \ covers HDLC-like synchronous\n   serial data and asynchronous serial data. \
    \ It does this by using a\n   terminal adaption header based on that of ITU-T\
    \ Recommendation V.120\n   [2].  Support may be added in the future for other\
    \ synchronous\n   protocols as the marketplace demands.\n   The V.120 terminal\
    \ adaption header allows transported data frames to\n   be split over several\
    \ packets, supports the transport of DTE port\n   idle and error information,\
    \ and optionally supports the transport of\n   DTE control state information.\n\
    \   In addition to the V.120 Header, fields can be added to the packet\n   format\
    \ through negotiation to provide support for features not\n   included in the\
    \ V.120 header.  The extra fields are: a Length Field,\n   which is used to distinguish\
    \ packets in compound frames, and a Port\n   field, which is used to provide multi-port\
    \ multiplexing capability.\n   The protocol also allows reserved bits in the V.120\
    \ header to be used\n   to transport non-octet aligned frames and to provide a\
    \ flow control\n   mechanism.\n   To provide these features, PPP-SDTP permits\
    \ a single frame format to\n   be selected from several possible formats by using\
    \ PPP-SDCP\n   negotiation.  The terminal adaption header can be either fixed\
    \ length\n   or variable length, to allow either simplicity or flexibility.\n\
    \   The default frame format places the terminal adaption header at the\n   end\
    \ of the packet.  This permits optimal transmitter timelines when\n   user frames\
    \ are segmented and compression is also used in conjunction\n   with this protocol.\n"
- title: 2.  SDTP Packets
  contents:
  - "2.  SDTP Packets\n   Before any SDTP packets may be communicated, PPP must reach\
    \ the\n   Network-Layer Protocol phase, and the SDTP Control Protocol must\n \
    \  reach the Opened state.\n   By default, exactly one SDTP packet is encapsulated\
    \ in the PPP\n   Information field, where the PPP Protocol field indicates type\
    \ hex\n   0049 (PPP-SDTP).  If the Length-Field-Present Configuration Option\n\
    \   and the LCP Compound-Frames Configuration Option are successfully\n   negotiated,\
    \ multiple SDTP packets may be placed in the PPP\n   Information field, and they\
    \ are distinguished by the presence of\n   Length fields in each packet.\n   The\
    \ maximum length of the SDTP datagram transmitted over a PPP link\n   is limited\
    \ only by the negotiated Maximum-Frame-Size and the maximum\n   length of the\
    \ Information field of a PPP encapsulated packet.  Note\n   that if compression\
    \ is used on the PPP link, this the maximum length\n   of the SDTP datagram  may\
    \ be larger or smaller than the maximum\n   length of the Information field of\
    \ a PPP encapsulated packet,\n   depending on the particular compression algorithm\
    \ and protocol used.\n   ITU-T Recommendation V.120 [2] defines an adaption header\
    \ that is\n   used with its asynchronous and synchronous modes of operation. \
    \ SDTP\n   packets include this header as a Header field to provide the protocol\n\
    \   adaption function.  Using negotiation, additional fields can be added\n  \
    \ to the packet to provide sequencing and multiplexing capability\n   within SDTP.\
    \ SDTP also has an option of using the reserved bits of\n   the header to provide\
    \ a flow control mechanism and support for\n   transporting non-octet aligned\
    \ data frames.\n   The default SDTP packet format is designed to allow the efficient\
    \ use\n   of the protocol's segmentation feature when combined with a PPP\n  \
    \ Compression Protocol [4-10].  This format is a little different from\n   other\
    \ PPP NCP's in that data is read from both ends of the packet.\n   The Header\
    \ field is placed at the end of the SDTP packet, with the\n   order of the octets\
    \ reversed.  This somewhat unique format has been\n   selected to allow optimal\
    \ transmitter timelines when compression is\n   used and transported data frames\
    \ are split into multiple SDTP\n   packets.  In such a situation, the Header field\
    \ contains the\n   information about whether the data is split into multiple packets\
    \ or\n   not, so if it is located at the end of a packet, the decision can be\n\
    \   made after observing the compressed size of the packet.  The Header\n   field\
    \ can then simply be run through the compressor after the\n   decision has been\
    \ made.\n   When the Header field is placed before the data, as in the optional\n\
    \   packet format, the transmitter must make the decision about whether\n   to\
    \ split a frame over multiple packets without knowing about the\n   compressibility\
    \ of the frame.  Therefore the optional format is\n   designed to be used when\
    \ transported frames are not split into\n   multiple SDTP packets or where SDTP\
    \ is not coupled with compression.\n   It is believed that this format may be\
    \ useful for some hardware\n   implementations.\n"
- title: 2.1.  Padding
  contents:
  - "2.1.  Padding\n   If padding is used, SDTP packets require the use of the Length\
    \ Field\n   or the previous negotiation of the LCP Self-Describing-Padding\n \
    \  Configuration Option [11].\n"
- title: 2.2.  Packet Formats
  contents:
  - "2.2.  Packet Formats\n   The default SDTP packet format is shown below. The fields\
    \ are\n   transmitted from left to right.\n    0                   1         \
    \          2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |        PPP Protocol ID        |    Transported Data ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Header -  H   |\n   +-+-+-+-+-+-+-+-+\n   The two complete frame formats\
    \ are shown below:  Header-Last and\n   Header-First.  Header-Last is the default\
    \ packet format. The\n   additional fields provided support for:  Control State\
    \ Information\n   (CS), multiple packets and multi-port multiplexing.  Again,\
    \ the\n   fields are transmitted from left to right.  Descriptions of the\n  \
    \ fields follow the packet formats.\n   Header-Last\n    0                   1\
    \                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |        PPP Protocol ID        |          (Length)             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    (Port)     |  Transported Data / (Odd-Pad) ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Header - (CS) :       H       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Header-First\n    0                   1                   2              \
    \     3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  \
    \      PPP Protocol ID        |          (Length)             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    (Port)     | Header  -  H  :     (CS)      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Transported Data / (Odd-Pad) ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   PPP Protocol ID\n      The PPP Protocol ID field is described in the Point-to-Point\n\
    \      Protocol Encapsulation [1].\n      When the SDTP Protocol is successfully\
    \ negotiated by the SDTP\n      Control Protocol (SDCP), the value is 0049 hex.\
    \  This value may be\n      compressed to one octet when Protocol-Field-Compression\
    \ is\n      negotiated, or if one of the PPP compression protocols [4-10] is\n\
    \      used.\n   Length\n      The optional Length field is present in every SDTP\
    \ packet upon\n      successful negotiation of the Length-Field-Present Configuration\n\
    \      Option.\n      The value of the Length field is the combined lengths of\
    \ the\n      Length, Port (if present), Header, Transmitted Data, and Odd-Pad\n\
    \      (if present) fields in octets.\n      The length of the Length field defaults\
    \ to one octet.  Valid\n      lengths are from 2 to 255 octets, since each packet\
    \ must include\n      at least a one octet Header field.\n      If desired, the\
    \ length field can be negotiated to be two octets in\n      length.  In that case,\
    \ valid lengths are from 2 to 65535 octets,\n      and the field is transmitted\
    \ most significant octet first.\n      In either case, a length of 0 means that\
    \ the combined length is\n      the same as the length of the remainder of the\
    \ PPP Information\n      Field.\n   Port\n      The optional Port field is present\
    \ in every SDTP packet upon\n      successful negotiation of the Multi-Port Option.\n\
    \      The length of the Port field is one octet. Valid Port numbers are\n   \
    \   0 to 254.  Port number 255 is reserved for control purposes (see\n      section\
    \ on flow control).\n   Header\n      The Header field is the terminal adaption\
    \ header from ITU-T\n      Recommendation V.120.  As specified in that document,\
    \ it contains\n      up to two octets: The terminal adaption header octet (H),\
    \ and the\n      optional header extension for control state information (CS).\n\
    \      SDTP only supports the protocol sensitive operation of V.120; bit\n   \
    \   transparent operation is not supported.  The descriptions of the\n      header\
    \ bits provided below are derived from the descriptions\n      provided in Recommendation\
    \ V.120.  In addition to the bit\n      definitions of V.120, SDTP optionally\
    \ permits the use of reserved\n      bits to be used for flow control and to provide\
    \ support for non-\n      octet aligned frames.\n      The length of the Header\
    \ field is either one or two octets, and is\n      determined by the value of\
    \ the E bit in the first octet.  By\n      default, the E-bit must be set in the\
    \ H octet and the CS octet is\n      not present.  A Configuration Option may\
    \ be negotiated to allow\n      the use of the CS octet, or even to require its\
    \ presence in every\n      packet.\n      H (V.120 Terminal Adaption Header)\n\
    \         The format of the first octet of the Header field is shown\n       \
    \  below:\n            0     1     2     3     4     5     6     7\n         +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \         |  E  | BR  | Res | FC  | C2  | C1  |  B  |  F  |\n         +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \         E - Extension Bit\n            The E bit is the extension bit.  If set\
    \ to 0, it indicates\n            that the Control-2 field is present.\n     \
    \    BR - Break / HDLC Idle Bit\n            In asynchronous mode, the BR bit\
    \ indicates the invocation of\n            the BREAK function by the DTE.  A value\
    \ of 1 indicates\n            BREAK.\n            In synchronous HDLC mode, the\
    \ BR bit is used to indicate\n            that DTE port is receiving HDLC idle\
    \ condition.  A value of\n            1 indicates this idle condition.\n     \
    \    Res - Reserved\n            This bit is reserved and MUST be set to 0.  (This\
    \ is a\n            reserved bit in V.120.)\n         FC - Flow Control\n    \
    \        This bit can be used for flow control of SDTP traffic on the\n      \
    \      network, for applications which require it.  When SDTP is\n           \
    \ used in conjunction with data compression, flow control may\n            be\
    \ needed.  Reasons for this could be that the DTE port uses\n            an X.21\
    \ interface (and therefore does not have independent\n            control of DTE\
    \ transmit and receive clocks), or simply that\n            the underlying link\
    \ layer (such as PPP in HDLC-like Framing)\n            does not include a mechanism\
    \ for network flow control, so\n            some flow control mechanism is needed.\n\
    \            This bit set to a value of 0 indicates that the receiver is\n   \
    \         ready to receive data (Flow-On). A value of 1 indicates that\n     \
    \       the receiver does not wish to receive data and the\n            transmitting\
    \ peer should stop sending it (Flow-Off).  Flow\n            control operates\
    \ on a per port basis.  Flow control messages\n            on Port 255 affect\
    \ all ports.\n            To ensure that a missed Flow-On message cannot cause\
    \ a\n            hangup condition, a Flow-Off is defined to expire after a\n \
    \           time of T1 seconds.  If a unit desires to keep its peer in\n     \
    \       the Flow-Off state for more than T1 seconds, it MUST\n            transmit\
    \ another Flow-Off message after every period of T1\n            seconds.  A unit\
    \ that receives a Flow-Off message may resume\n            transmitting T1 seconds\
    \ after the last Flow-Off was\n            received.  The value of T1 is controlled\
    \ by the Flow-\n            Expiration-Time Configuration Option.  The default\
    \ value is\n            10 seconds.  There is not a separate value for T1 for\
    \ each\n            port; all ports use the same T1 value.\n            (This\
    \ bit is a reserved bit in V.120, which requires the bit\n            to be set\
    \ to a value of zero.  The above definition of flow\n            control provides\
    \ compatibility with this definition when\n            flow control is not used.)\n\
    \         C1, C2 - Error Control Bits\n            The C1 and C2 bits are used\
    \ for DTE port Error detection and\n            transmission.  Their meaning is\
    \ defined in the following\n            table:\n            +----+----+--------------+--------------+\n\
    \            |         |           Meaning           |\n            +----+----+--------------+--------------+\n\
    \            | C1 | C2 | Synchronous  | Asynchronous |\n            +----+----+--------------+--------------+\n\
    \            |  0 |  0 | No Error     | No Error     |\n            |    |   \
    \ |     Detected |     Detected |\n            +----+----+--------------+--------------+\n\
    \            |  0 |  1 | FCS Error    | Stop-bit     |\n            |    |   \
    \ |      (DTE)   |     Error    |\n            +----+----+--------------+--------------+\n\
    \            |  1 |  0 | Abort        | Parity Error |\n            |    |   \
    \ |              | on the Last  |\n            |    |    |              | Character\
    \ in |\n            |    |    |              | Frame        |\n            +----+----+--------------+--------------+\n\
    \            |  1 |  1 | DTE Overrun* | Stop-bit and |\n            |    |   \
    \ |              | Parity Error |\n            +----+----+--------------+--------------+\n\
    \            Appropriate responses to these bits are provided in Sections\n  \
    \          2.2.1 and 2.2.2 of the V.120 standard (where R reference\n        \
    \    point is translated to mean DTE port.)\n         B, F - Segmentation Bits\n\
    \            The B and F bits are used for segmenting and reassembly of\n    \
    \        the transported frames in synchronous HDLC mode.  Setting\n         \
    \   the B bit to 1 indicates that the packet contains the\n            beginning\
    \ of a transported frame or a Begin Frame.  Setting\n            the F bit indicates\
    \ that the packet contains the final\n            portion of a transported frame,\
    \ or a Final Frame. A packet\n            that contains neither the beginning\
    \ of a frame nor the end\n            is said to contain a Middle Frame.  For\
    \ asynchronous mode\n            and bit transparent mode operation both bits\
    \ MUST be set to\n            1.  The following table summarizes the use of these\
    \ bits:\n            +---+---+--------------+----------------+\n            |\
    \       |         Application           |\n            +---+---+--------------+----------------+\n\
    \            | B | F | Synchronous  | Asynchronous   |\n            +---+---+--------------+----------------+\n\
    \            | 1 | 0 | Begin Frame  | Not Applicable |\n            +---+---+--------------+----------------+\n\
    \            | 0 | 0 | Middle Frame | Not Applicable |\n            +---+---+--------------+----------------+\n\
    \            | 1 | 0 | Final Frame  | Not Applicable |\n            +---+---+--------------+----------------+\n\
    \            | 1 | 1 | Single Frame | Required       |\n            +---+---+--------------+----------------+\n\
    \      CS (V.120 optional Header Extension for Control State Information)\n  \
    \       The format of the second Header octet (CS) is shown below:\n         \
    \   0     1     2     3     4     5     6     7\n         +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \         |  E  | DR  | SR  | RR  | Res |(Odd-Pad Length) |\n         +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \         E - Extension Bit\n            The E bit is the extension bit, and allows\
    \ further extension\n            of the Header field.  It is set to 1, to indicate\
    \ no further\n            extension of the Header field.\n         DR - Data Ready\n\
    \            This bit set to 1 indicates that the DTE port is activated.\n   \
    \      SR - Send Ready\n            This bit set to 1 indicates that the DTE is\
    \ ready to send\n            data.\n         RR - Receive Ready\n            This\
    \ bit set to 1 indicates that the DTE is ready to receive\n            data. \
    \ It can be used for DTE flow control in half-duplex\n            transmissions.\n\
    \         Res - Reserved\n            This bit is reserved and set to 0. (This\
    \ is a V.120 reserved\n            bit.)\n         Odd-Pad Length (Optional)\n\
    \            The Odd-Pad Length field is used when non-octet aligned HDLC\n  \
    \          frames are allowed.  It is a 3-bit field, that can take on\n      \
    \      the values of 0 through 7.  Its value is the length of the\n          \
    \  Odd-Pad field in bits.  This value is determined as the\n            number\
    \ of bits necessary to have the combined length of the\n            Transported\
    \ Data Field and the Odd-Pad Field be aligned with\n            an octet boundary.\n\
    \            If non-octet aligned frames are not allowed, this field is\n    \
    \        not used and all bits are set to the value of 0.  (These\n          \
    \  bits are reserved in V.120.)\n   Transported Data\n      The transported data\
    \ field contains the transported serial data.\n      When the serial data type\
    \ has been negotiated to be HDLC-like\n      synchronous, this field will contain\
    \ all or part of a transported\n      HDLC-like frame.\n      A sample transported\
    \ HDLC frame is shown below.  The figure does\n      not show bits inserted for\
    \ transparency.\n       0                   1                   2            \
    \       3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Flag:01111110 | (Address, Control and Information Fields) ...\n     \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      | \
    \            (FCS)                                             |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\
    \ - - - - - - - - - - - - - - -+\n      | Flag:01111110 |\n      +-+-+-+-+-+-+-+-+\n\
    \      Only the data between the flags is transported.  The flags are not\n  \
    \    transported.  The FCS is tranported unless the FCS-Mode\n      Configuration\
    \ Option has been successfully negotiated otherwise.\n   Odd-Pad\n      The optional\
    \ Odd-Pad (Odd Frame Pad) field is used when the\n      transported data frame\
    \ is non-octet aligned, and the Allow-Odd-\n      Frames Option has been successfully\
    \ negotiated.  It contains the\n      bits that are required to pad the Transported\
    \ Data field out to an\n      octet boundary.  The Odd-Pad field is in the high\
    \ order bits of\n      the last octet of the Transported Data field.  The values\
    \ of these\n      bits are all zero.\n"
- title: 3.  Serial Data Control Protocol
  contents:
  - "3.  Serial Data Control Protocol\n   The Serial Data Control Protocol (SDCP)\
    \ is responsible for\n   configuring, enabling and disabling the SDTP modules\
    \ on both ends of\n   the point-to-point link.  SDCP uses the same packet exchange\n\
    \   mechanism and state machine as the Link Control Protocol.  SDCP\n   packets\
    \ may not be exchanged until PPP has reached the Network-Layer\n   Protocol phase.\
    \  SDCP packets received before this phase is reached\n   SHOULD be silently discarded.\n\
    \   The Serial Data Control Protocol is exactly the same as the Link\n   Control\
    \ Protocol [1] with the following exceptions:\n   Frame Modifications\n      The\
    \ packet may utilize any modifications to the basic frame format\n      which\
    \ have been negotiated during the Link Establishment phase.\n   Data Link Layer\
    \ Protocol Field\n      Exactly one SDCP packet is encapsulated in the PPP Information\n\
    \      field, where the PPP Protocol field indicates type hex 8049 (PPP-\n   \
    \   SDCP).\n   Code Field\n      Only Codes 1 through 7 (Configure-Request, Configure-Ack,\n\
    \      Configure-Nak, Configure-Reject, Terminate-Request, Terminate-Ack,\n  \
    \    and Code-Reject) are used.  other Codes SHOULD be treated as\n      unrecognized\
    \ and SHOULD result in Code-Rejects.\n   Timeouts\n      SDCP packets may not\
    \ be exchanged until PPP has reached the\n      Network-Layer Protocol phase.\
    \  An implementation SHOULD be\n      prepared to wait for Authentication and\
    \ Link Quality Determination\n      to finish before timing out waiting for a\
    \ Configure-Ack or other\n      response.  It is suggested that an implementation\
    \ give up only\n      after user intervention or a configurable amount of time.\n\
    \   Configuration Option Types\n      SDCP has a distinct set of Configuration\
    \ Options which are defined\n      in this document.\n"
- title: 4.  SDCP Configuration Option Format
  contents:
  - "4.  SDCP Configuration Option Format\n   SDCP Configuration Options allow modifications\
    \ to the default SDCP\n   characteristics to be negotiated.  If a Configuration\
    \ Option is not\n   included in a Configure-Request packet, the default value\
    \ for that\n   Configuration Option is assumed.\n   SDCP uses the same Configuration\
    \ Option format defined in LCP [1],\n   with a separate set of Options.\n   The\
    \ Option Types are:\n      1   Packet-Format\n      2   Header-Type\n      3 \
    \  Length-Field-Present\n      4   Multi-Port\n      5   Transport-Mode\n    \
    \  6   Maximum-Frame-Size\n      7   Allow-Odd-Frames\n      8   FCS-Type\n  \
    \    9   Flow-Expiration-Time\n   Note that Option Types 5-8 are specific to a\
    \ single port and require\n   port numbers in their format.  Option Types 6-8\
    \ are specific to the\n   HDLC-Synchronous Transport-Mode.\n"
- title: 4.1.  Packet-Format
  contents:
  - "4.1.  Packet-Format\n   This option selects whether the Header field precedes\
    \ or follows the\n   data field.  When the Header field follows the data field,\
    \ the order\n   of its octets are reversed.\n    0                   1       \
    \            2\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |    Length     |     Format    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Type\n      1\n   Length\n      3\n   Format\n      0   Header-Last   (default)\n\
    \      1   Header-First\n"
- title: 4.2.  Header-Type
  contents:
  - "4.2.  Header-Type\n   This option selects the type of the Header field.  The\
    \ Header-Type of\n   H-and-CS means that the CS octet will be present if indicated\
    \ by the\n   E-bit in the H-octet.  The Header-Type of H-and-CS-Always signifies\n\
    \   that both the H and CS octets are present in every packet.\n    0        \
    \           1                   2\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |     Type\
    \      |    Length     |  Header-Type  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Type\n      2\n   Length\n      3\n   Header-Type\n      0   H-Only (default)\n\
    \      1   H-and-CS\n      2   H-and-CS-Always\n"
- title: 4.3.  Length-Field-Present
  contents:
  - "4.3.  Length-Field-Present\n   By default, a PPP Information Field contains only\
    \ a single SDTP\n   packet, and an SDTP Packet does not contain a length field.\n\
    \   Successful negotiation of this option causes all SDTP packets to\n   contain\
    \ the length field, and allows SDTP packets to be contained in\n   compound frames\
    \ (see LCP Compound-Frames Configuration Option [11]).\n   This option is required\
    \ if the LCP Length-Field-Present Configuration\n   option has been negotiated.\n\
    \   The size of the Length field is negotiated via the Length-Size\n   parameter.\n\
    \    0                   1                   2\n    0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |    Length     |  Length-Size  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Type\n      3\n   Length\n      3\n   Length-Size\n      0   No Length Field\
    \ (default)\n      1   Length field of 1 octet\n      2   Length field of 2 octets\n"
- title: 4.4.  Multi-Port
  contents:
  - "4.4.  Multi-Port\n   By default, packets do not contain a port number and all\
    \ packets are\n   sent to the default port, Port 0.  The Successful negotiation\
    \ of the\n   Multi-Port configuration option means that every packet will contain\n\
    \   a port number.  The maximum port number, and hence the number of\n   ports,\
    \ is negotiated by using the Max-Port-Num field.  A value of 0\n   specifies that\
    \ a single port is to be used and no port field will be\n   present in an SDTP\
    \ packet.  (This is the same as not negotiating or\n   rejecting this option.)\
    \ Port numbers begin with 0 and range to 254.\n   Port number 255 is reserved\
    \ for control purposes (see section on flow\n   control).\n   Protocol Specific\
    \ negotiations which are on a per port basis, require\n   the port number to be\
    \ specified as part of the configuration\n   negotiation.\n    0             \
    \      1                   2\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |     Type   \
    \   |    Length     | Max-Port-Num  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Type\n      4\n   Length\n      3\n   Max-Port-Num\n      The maximum port\
    \ number that can be used.  The number of ports\n      present is Max-Port-Num\
    \ + 1.  The value can range from 0 to 254.\n"
- title: 4.5.  Transport-Mode
  contents:
  - "4.5.  Transport-Mode\n   This parameter selects the mode of transport for the\
    \ specified port.\n    0                   1                   2             \
    \      3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  \
    \   Type      |    Length     |      Port     |     Mode      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Type\n      5\n   Length\n      4\n   Port\n      The port for which this\
    \ option applies.\n   Mode\n      The transport mode to be used for this port.\n\
    \         0   HDLC Synchronous (default)\n         1   Asynchronous\n"
- title: 4.6.  Maximum-Frame-Size
  contents:
  - "4.6.  Maximum-Frame-Size\n   This parameter specifies the maximum number of octets\
    \ allowed in a\n   transported data frame.\n    0                   1        \
    \           2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |    Length     |      Port     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       Maximum-Frame-Size                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Type\n      6\n   Length\n      7\n   Port\n      The port for which this\
    \ option applies.\n   Maximum-Frame-Size\n      The maximum allowed length of\
    \ a transported data frame in octets.\n      Default is 10,000.  Negotiable range\
    \ is 1 to 2**31 - 1. The value\n      0 is reserved to mean no limit.  This field\
    \ is transmitted most\n      significant octet first.\n"
- title: 4.7.  Allow-Odd-Frames
  contents:
  - "4.7.  Allow-Odd-Frames\n   By default, only octet-aligned data frames are allowed\
    \ for transport.\n   Successful negotiation of this option allows the transport\
    \ of non-\n   octet aligned frames.  The size of the padding required to align\
    \ the\n   frames is carried in the CS Header octet.\n   Use of Header-Type H-Only\
    \ is not permitted in conjunction with this\n   option.\n    0               \
    \    1                   2\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |     Type     \
    \ |    Length     |      Port     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Type\n      7\n   Length\n      3\n   Port\n      The port for which this\
    \ option applies.\n"
- title: 4.8.  FCS-Type
  contents:
  - "4.8.  FCS-Type\n   By default, the transported data frame FCS is transported.\
    \  This\n   option allows the FCS to be removed by the transmitter and\n   regenerated\
    \ by the receiver.\n   It is important that implementations not use regeneration\
    \ unless they\n   are using PPP Reliable Transmission [12] or operating over some\
    \ other\n   layer that will provide reliable notification of a dropped packet.\n\
    \   Implementations are not permitted to send a incomplete or bad frame\n   to\
    \ the user with a good (regenerated) FCS.\n   This option also selects the type\
    \ of user FCS that will be\n   regenerated.\n    0                   1       \
    \            2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |    Length     |      Port     |    FCS-Type   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Type\n      8\n   Length\n      4\n   Port\n      The port for which this\
    \ option applies.\n   FCS-Type\n         0   Transparent-Transport (Default)\n\
    \         1   16-bit ITU-T CRC\n         2   32-bit ITU-T CRC\n"
- title: 4.9.  Flow-Expiration-Time
  contents:
  - "4.9.  Flow-Expiration-Time\n   As described in section 2.2, Flow-Off messages\
    \ expire after T1\n   seconds.  By default, T1 is 10 seconds.  This configuration\
    \ option\n   allows the value of T1 to be changed.\n    0                   1\n\
    \    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n \
    \  |     Type      |    Length     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n \
    \  |     Flow-Expiration-Time      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n \
    \  Type\n      9\n   Length\n      5\n   Flow-Expiration-Time\n      The Flow-Expiration-Time\
    \ field contains a 16 bit unsigned integer\n      which is used to specify the\
    \ value to be assigned to T1 as\n      follows: T1 = Flow-Expiration-Time / 10\
    \ seconds.  Therefore this\n      value is in units of 1/10 of a second, with\
    \ allowable values from\n      1 to 2^16-1 (0.1 to 6553.5 seconds).  It is transmitted\
    \ most\n      significant octet first.  The default value is 100 (10 seconds),\n\
    \      which all must support.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: References
  contents:
  - "References\n   [1]    Simpson, W., ed., \"The Point-to-Point Protocol (PPP)\"\
    , STD\n          51, RFC 1661, July 1994.\n   [2]    CCITT Recommendation V.120\
    \ (09/92), \"Support by an ISDN of\n          Data Terminal Equipment with V-Series\
    \ Type Interfaces with\n          Provision for Statistical Multiplexing\", 1993.\n\
    \   [3]    Rand, D., \"The PPP Compression Control Protocol (CCP)\", RFC\n   \
    \       1962, June 1996.\n   [4]    Friend, R., and W. Simpson, \"PPP Stac LZS\
    \ Compression\n          Protocol\", RFC 1974, August 1996.\n   [5]    Rand, D.,\
    \ \"PPP Predictor Compression Protocol\", RFC 1978,\n          August 1996.\n\
    \   [6]    Petty, J., \"PPP Hewlett-Packard Packet-by-Packet Compression\n   \
    \       (HP PPC) Protocol\", Work in Progress.\n   [7]    Carr, D., \"PPP Gandalf\
    \ FZA Compression Protocol\", Work in\n          Progress.\n   [8]    Schryver,\
    \ V., \"PPP BSD Compression Protocol\", RFC 1977,\n          August 1996.\n  \
    \ [9]    Schremp, et. al., \"PPP Magnalink Variable Resource\n          Compression\"\
    , RFC 1975, August 1996.\n   [10]   Schneider, K., \"PPP Stacker LZS Compression\
    \ Protocol using a\n          DCP Header (LZS-DCP)\", RFC 1967, August 1996.\n\
    \   [11]   Simpson, W.A., \"PPP LCP Extensions\", RFC 1570, January 1994.\n  \
    \ [12]   Rand, D., \"PPP Reliable Transmission\", RFC 1663, July 1994.\n"
- title: Chair's Address
  contents:
  - "Chair's Address\n   The working group can be contacted via the current chair:\n\
    \   Karl Fox\n   Ascend Communications\n   3518 Riverside Drive, Suite 101\n \
    \  Columbus, Ohio 43221\n   EMail: karl@ascend.com\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Questions about this memo should be directed to:\n   Kevin\
    \ Schneider\n   Adtran, Inc.\n   901 Explorer Blvd.\n   Huntsville, AL 35806-2807\n\
    \   Phone: (205) 971-8000\n   EMail:  kevin@adtran.com\n   Stuart Venters\n  \
    \ Adtran, Inc.\n   901 Explorer Blvd.\n   Huntsville, AL 35806-2807\n   Phone:\
    \ (205) 971-8000\n   EMail: sventers@adtran.com\n"
