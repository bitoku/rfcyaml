- title: __initial_text__
  contents:
  - "                   NAME, ADDRESSES, PORTS, AND ROUTES\n                     \
    \        David D. Clark\n                  MIT Laboratory for Computer Science\n\
    \               Computer Systems and Communications Group\n                  \
    \             July, 1982\n     1.  Introduction\n     It has been said that the\
    \ principal function of an operating system\nis to define a number of different\
    \ names for the same object, so that it\ncan  busy  itself  keeping  track of\
    \ the relationship between all of the\ndifferent names.  Network protocols  seem\
    \  to  have  somewhat  the  same\ncharacteristic.    In  TCP/IP,  there  are \
    \ several ways of referring to\nthings.  At the human visible  interface,  there\
    \  are  character  string\n\"names\"  to  identify  networks,  hosts,  and  services.\
    \  Host names are\ntranslated into network \"addresses\", 32-bit  values  that\
    \  identify  the\nnetwork  to  which  a  host is attached, and the location of\
    \ the host on\nthat net.  Service names are translated into a \"port identifier\"\
    ,  which\nin  TCP  is  a  16-bit  value.    Finally, addresses are translated\
    \ into\n\"routes\", which are the sequence of steps a packet must  take  to  reach\n\
    the  specified  addresses.  Routes show up explicitly in the form of the\ninternet\
    \ routing options, and also implicitly in the  address  to  route\ntranslation\
    \ tables which all hosts and gateways maintain.\n     This  RFC  gives  suggestions\
    \  and  guidance  for the design of the\n     2.  The Scope of the Problem\n \
    \    One  of the first questions one can ask about a naming mechanism is\nhow\
    \ many names one can expect to encounter.  In order to answer this, it\nis necessary\
    \ to know something about the expected maximum  size  of  the\ninternet.  Currently,\
    \ the internet is fairly small.  It contains no more\nthan  25  active  networks,\
    \  and no more than a few hundred hosts.  This\nmakes it possible to install tables\
    \ which exhaustively list all of these\nelements.  However, any implementation\
    \ undertaken now should be based on\nan assumption of a much  larger  internet.\
    \    The  guidelines  currently\nrecommended  are  an upper limit of about 1,000\
    \ networks.  If we imagine\nan average number of 25 hosts per net,  this  would\
    \  suggest  a  maximum\nnumber  of 25,000 hosts.  It is quite unclear whether\
    \ this host estimate\nis high or low, but even if it is off by several  factors\
    \  of  two,  the\nresulting  number  is  still  large enough to suggest that current\
    \ table\nmanagement strategies are unacceptable.  Some fresh techniques  will\
    \  be\nrequired to deal with the internet of the future.\n     3.  Names\n   \
    \  As the previous section suggests, the internet will eventually have\na  sufficient\
    \  number  of  names  that a host cannot have a static table\nwhich provides a\
    \ translation from every name to its associated  address.\nThere  are  several\
    \  reasons  other than sheer size why a host would not\nwish to have such a table.\
    \  First, with that many names, we  can  expect\nnames  to  be  added  and deleted\
    \ at such a rate that an installer might\nexchanged.  In fact, there may be whole\
    \ networks with which a particular\nhost will never have any traffic.\n     To\
    \  cope  with  this  large  and  somewhat dynamic environment, the\ninternet is\
    \ moving from its current position  in  which  a  single  name\ntable  is  maintained\
    \  by  the  NIC  and  distributed to all hosts, to a\ndistributed approach in\
    \ which each network (or  group  of  networks)  is\nresponsible  for maintaining\
    \ its own names and providing a \"name server\"\nto translate between the names\
    \ and the addresses in that network.   Each\nhost   is   assumed   to  store \
    \ not  a  complete  set  of  name-address\ntranslations, but only a cache of recently\
    \ used names.  When a  name  is\nprovided  by  a  user for translation to an address,\
    \ the host will first\nexamine its local cache, and if  the  name  is  not  found\
    \  there,  will\ncommunicate  with  an appropriate name server to obtain the information,\n\
    which it may then insert into its cache for future reference.\n     Unfortunately,\
    \ the name server mechanism is not totally in place in\nthe internet yet, so for\
    \ the moment, it is necessary to continue to  use\nthe  old  strategy of maintaining\
    \ a complete table of all names in every\nhost.  Implementors, however, should\
    \ structure this table in such a  way\nthat  it  is  easy  to  convert  later\
    \  to  a  name server approach.  In\nparticular, a reasonable programming strategy\
    \ would be to make the  name\ntable  accessible  only  through  a subroutine interface,\
    \ rather than by\nscattering direct references to the table all through the code.\
    \  In this\nway, it will be possible, at a later date,  to  replace  the  subroutine\n\
    with one capable of making calls on remote name servers.\nthe information in a\
    \ local host table is out of date, because a host has\nmoved,  and a revision\
    \ of the host table has not yet been installed from\nthe NIC.  In this case, one\
    \ attempts to connect to a particular host and\ndiscovers an unexpected machine\
    \ at the address obtained from  the  local\ntable.    If  a  human is directly\
    \ observing the connection attempt, the\nerror  is  usually  detected  immediately.\
    \    However,  for   unattended\noperations  such as the sending of queued mail,\
    \ this sort of problem can\nlead to a great deal of confusion.\n     The nameserver\
    \ scheme will only make this problem worse,  if  hosts\ncache  locally  the  address\
    \ associated with names that have been looked\nup, because the host has no way\
    \ of knowing when the address has  changed\nand the cache entry should be removed.\
    \  To solve this problem, plans are\ncurrently  under  way  to  define  a simple\
    \ facility by which a host can\nquery a foreign address to determine what name\
    \  is  actually  associated\nwith  it.    SMTP already defines a verification\
    \ technique based on this\napproach.\n     4.  Addresses\n     The IP layer must\
    \ know something about addresses.   In  particular,\nwhen  a datagram is being\
    \ sent out from a host, the IP layer must decide\nwhere to send it on the immediately\
    \  connected  network,  based  on  the\ninternet address.  Mechanically, the IP\
    \ first tests the internet address\nto  see  whether  the network number of the\
    \ recipient is the same as the\nnetwork number of the sender.  If so, the packet\
    \ can be sent directly to\nmade, as there may be more than one gateway available\
    \ on the immediately\nattached network.\n     When  the  internet address format\
    \ was first specified, 8 bits were\nreserved  to  identify  the  network.    \
    \ Early   implementations   thus\nimplemented  the  above  algorithm by means\
    \ of a table with 256 entries,\none for each possible net, that specified the\
    \ gateway of choice for that\nnet, with a special case entry for those nets  to\
    \  which  the  host  was\nimmediately connected.  Such tables were sometimes statically\
    \ filled in,\nwhich caused confusion and malfunctions when gateways and networks\
    \ moved\n(or crashed).\n     The  current  definition  of  the  internet  address\
    \ provides three\ndifferent options for network numbering, with the  goal  of\
    \  allowing  a\nvery  large  number of networks to be part of the internet.  Thus,\
    \ it is\nno longer possible to imagine having an exhaustive  table  to  select\
    \  a\ngateway  for any foreign net.  Again, current implementations must use a\n\
    strategy based on a local cache of  routing  information  for  addresses\ncurrently\
    \ being used.\n     The  recommended  strategy  for  address to route translation\
    \ is as\nfollows.    When  the  IP  layer  receives  an  outbound  datagram  \
    \ for\ntransmission,  it  extracts  the  network  number  from  the destination\n\
    address, and queries its local table to determine  whether  it  knows  a\nsuitable\
    \  gateway to which to send the datagram.  If it does, the job is\ndone.    (But\
    \  see  RFC  816  on  Fault  Isolation  and  Recovery,   for\naccessible  gateway\
    \ at random, insert that as an entry in the table, and\nuse it to send the packet.\
    \  Either the guess will be right or wrong.  If\nit is wrong, the gateway to which\
    \ the packet was  sent  will  return  an\nICMP  redirect message to report that\
    \ there is a better gateway to reach\nthe net in question.  The arrival  of  this\
    \  redirect  should  cause  an\nupdate of the local table.\n     The  number \
    \ of  entries in the local table should be determined by\nthe maximum number of\
    \ active connections which this particular host  can\nsupport  at  any  one  time.\
    \  For a large time sharing system, one might\nimagine a table with 100 or more\
    \ entries.  For a personal computer being\nused to support a single user telnet\
    \ connection,  only  one  address  to\ngateway association need be maintained\
    \ at once.\n     The  above strategy actually does not completely solve the problem,\n\
    but only pushes it down one level, where the problem then arises of  how\na  new\
    \  host,  freshly  arriving  on  the  internet,  finds  all  of its\naccessible\
    \ gateways.  Intentionally, this problem is not  solved  within\nthe  internetwork\
    \  architecture.   The reason is that different networks\nhave drastically different\
    \ strategies for allowing a host  to  find  out\nabout  other  hosts  on  its\
    \  immediate  network.    Some  nets permit a\nbroadcast mechanism.  In this case,\
    \ a host can send out  a  message  and\nexpect  an  answer  back  from  all  of\
    \ the attached gateways.  In other\ncases, where a particular network  is  richly\
    \  provided  with  tools  to\nsupport  the  internet, there may be a special network\
    \ mechanism which a\nleast  one  accessible  gateway.  Once a host has discovered\
    \ the name of\none gateway, it can build up a table of all other available gateways,\
    \ by\nkeeping track of every gateway that has been reported back to it  in  an\n\
    ICMP message.\n     5.  Advanced Topics in Addressing and Routing\n     The  preceding\
    \  discussion  describes  the  mechanism required in a\nminimal implementation,\
    \  an  implementation  intended  only  to  provide\noperational  service  access\
    \  today to the various networks that make up\nthe internet.  For any host which\
    \ will participate in  future  research,\nas  contrasted  with  service,  some\
    \  additional  features are required.\nThese features will also be helpful for\
    \ service hosts if  they  wish  to\nobtain access to some of the more exotic networks\
    \ which will become part\nof  the internet over the next few years.  All implementors\
    \ are urged to\nat least provide a structure into which these features  could\
    \  be  later\nintegrated.\n     There   are   several  features,  either  already\
    \  a  part  of  the\narchitecture or now under development,  which  are  used\
    \  to  modify  or\nexpand  the  relationships  between addresses and routes. \
    \ The IP source\nroute options allow a host to explicitly direct  a  datagram\
    \  through  a\nseries of gateways to its foreign host.  An alternative form of\
    \ the ICMP\nredirect  packet  has  been  proposed,  which  would  return information\n\
    specific to a  particular  destination  host,  not  a  destination  net.\nFinally,\
    \ additional IP options have been proposed to identify particular\nentirely within\
    \ the bounds of IP.  All the mechanisms above are designed\nto apply to a particular\
    \ connection, so that their use must be specified\nat  the  TCP level.  Thus,\
    \ the interface between IP and the layers above\nit must include mechanisms to\
    \ allow passing this  information  back  and\nforth,  and TCP (or any other protocol\
    \ at this level, such as UDP), must\nbe prepared to store this  information. \
    \   The  passing  of  information\nbetween IP and TCP is made more complicated\
    \ by the fact that some of the\ninformation,  in  particular  ICMP packets, may\
    \ arrive at any time.  The\nnormal interface envisioned between TCP  and  IP \
    \ is  one  across  which\npackets  can  be  sent  or received.  The existence\
    \ of asynchronous ICMP\nmessages implies that there must be an additional  channel\
    \  between  the\ntwo,  unrelated  to the actual sending and receiving of data.\
    \  (In fact,\nthere are many other ICMP messages which arrive asynchronously and\
    \ which\nmust be passed from IP  up  to  higher  layers.    See  RFC  816,  Fault\n\
    Isolation and Recovery.)\n     Source  routes  are  already  in  use  in  the\
    \  internet,  and many\nimplementations will wish to be able to take advantage\
    \  of  them.    The\nfollowing  sorts  of  usages  should  be permitted.  First,\
    \ a user, when\ninitiating a TCP connection, should be able to hand a source route\
    \  into\nTCP,  which in turn must hand the source route to IP with every outgoing\n\
    datagram.  The user might initially obtain the source route by  querying\na  different\
    \  sort  of  name  server,  which would return a source route\ninstead of an address,\
    \ or the user may have fabricated the source  route\nmanually.    A  TCP  which\
    \  is  listening  for a connection, rather than\nattempting to open one, must\
    \ be prepared to  receive  a  datagram  which\n     6.  Ports and Service Identifiers\n\
    \     The  IP  layer of the architecture contains the address information\nwhich\
    \ specifies the destination host to  which  the  datagram  is  being\nsent.  \
    \  In  fact, datagrams are not intended just for particular hosts,\nbut for particular\
    \ agents within a host,  processes  or  other  entities\nthat  are  the  actual\
    \  source and sink of the data.  IP performs only a\nvery simple dispatching once\
    \ the datagram  has  arrived  at  the  target\nhost,   it   dispatches  it  to\
    \  a  particular  protocol.    It  is  the\nresponsibility of that protocol handler,\
    \  for  example  TCP,  to  finish\ndispatching  the  datagram  to the particular\
    \ connection for which it is\ndestined.    This  next  layer  of  dispatching\
    \  is  done  using   \"port\nidentifiers\",  which  are  a  part  of  the  header\
    \  of the higher level\nprotocol, and not the IP layer.\n     This two-layer dispatching\
    \ architecture has caused  a  problem  for\ncertain  implementations.    In  particular,\
    \  some  implementations have\nwished to put the IP layer within the kernel of\
    \  the  operating  system,\nand  the  TCP  layer  as  a  user  domain  application\
    \  program.  Strict\nadherence to this partitioning can lead to grave  performance\
    \  problems,\nfor  the  datagram  must  first  be  dispatched from the kernel\
    \ to a TCP\nprocess, which then dispatches the datagram  to  its  final  destination\n\
    process.   The overhead of scheduling this dispatch process can severely\nlimit\
    \ the achievable throughput of the implementation.\n     As is discussed in RFC\
    \ 817, Modularity and Efficiency  in  Protocol\nlevel  dispatching.   However,\
    \ there is an acceptable shortcut which can\nbe taken to move the higher  level\
    \  dispatching  function  into  the  IP\nlayer, if this makes the implementation\
    \ substantially easier.\n     In  principle,  every  higher level protocol could\
    \ have a different\ndispatching  algorithm.    The  reason  for  this  is  discussed\
    \  below.\nHowever,  for  the  protocols  involved  in  the  service offering\
    \ being\nimplemented today, TCP and UDP, the dispatching algorithm is exactly\
    \ the\nsame, and the port field is located in precisely the same place  in  the\n\
    header.  Therefore, unless one is interested in participating in further\nprotocol\
    \  research,  there  is only one higher level dispatch algorithm.\nThis algorithm\
    \ takes into account the internet  level  foreign  address,\nthe protocol number,\
    \ and the local port and foreign port from the higher\nlevel  protocol  header.\
    \  This algorithm can be implemented as a sort of\nadjunct to the IP layer implementation,\
    \ as long as no other higher level\nprotocols are to be implemented.  (Actually,\
    \ the above statement is only\npartially true, in that the UDP dispatch function\
    \ is subset of  the  TCP\ndispatch  function.  UDP dispatch depends only protocol\
    \ number and local\nport.  However, there is an occasion within TCP  when  this\
    \  exact  same\nsubset comes into play, when a process wishes to listen for a\
    \ connection\nfrom  any  foreign  host.    Thus,  the range of mechanisms necessary\
    \ to\nsupport TCP dispatch are also sufficient to support  precisely  the  UDP\n\
    requirement.)\n     The decision to remove port level dispatching from IP to the\
    \ higher\nthen IP could do all of the packet dispatching function within the host,\n\
    which  would  lead  to  a  simpler  modularity.    Three  problems  were\nidentified\
    \ with this.  First, not all protocol implementors could  agree\non  the  size\
    \  of the port identifier.  TCP selected a fairly short port\nidentifier, 16 bits,\
    \ to reduce  header  size.    Other  protocols  being\ndesigned,  however, wanted\
    \ a larger port identifier, perhaps 32 bits, so\nthat the port identifier, if\
    \  properly  selected,  could  be  considered\nprobabilistically  unique.    Thus,\
    \  constraining  the  port  id  to one\nparticular IP level mechanism would prevent\
    \ certain  fruitful  lines  of\nresearch.    Second,  ports  serve  a  special\
    \  function  in addition to\ndatagram delivery:   certain  port  numbers  are\
    \  reserved  to  identify\nparticular services.  Thus, TCP port 23 is the remote\
    \ login service.  If\nports  were  implemented  at  the  IP level, then the assignment\
    \ of well\nknown ports could not be done on a protocol basis, but would have to\
    \  be\ndone  in a centralized manner for all of the IP architecture.  Third, IP\n\
    was designed with a very simple layering role:    IP  contained  exactly\nthose\
    \ functions that the gateways must understand.  If the port idea had\nbeen  made\
    \ a part of the IP layer, it would have suggested that gateways\nneeded to know\
    \ about ports, which is not the case.\n     There are, of course, other ways \
    \ to  avoid  these  problems.    In\nparticular,  the  \"well-known  port\" problem\
    \ can be solved by devising a\nsecond mechanism, distinct from port  dispatching,\
    \  to  name  well-known\nports.   Several protocols have settled on the idea of\
    \ including, in the\npacket which sets up a  connection  to  a  particular  service,\
    \  a  more\nservice,  are  routed on arrival to a special server, sometimes called\
    \ a\n\"rendezvous server\", which  examines  the  service  request,  selects \
    \ a\nrandom  port  which  is to be used for this instance of the service, and\n\
    then passes the packet along to  the  service  itself  to  commence  the\ninteraction.\n\
    \     For  the  internet architecture, this strategy had the serious flaw\nthat\
    \ it presumed all protocols would fit into the same service paradigm:\nan initial\
    \ setup phase, which might contain a certain overhead  such  as\nindirect routing\
    \ through a rendezvous server, followed by the packets of\nthe  interaction  itself,\
    \  which  would  flow  directly  to  the process\nproviding the service.  Unfortunately,\
    \ not all high level  protocols  in\ninternet  were  expected to fit this model.\
    \  The best example of this is\nisolated datagram exchange using UDP.  The simplest\
    \ exchange in  UDP  is\none process sending a single datagram to another.  Especially\
    \ on a local\nnet,  where  the  net  related overhead is very low, this kind of\
    \ simple\nsingle datagram interchange can be extremely efficient,  with  very\
    \  low\noverhead  in  the  hosts.  However, since these individual packets would\n\
    not be part of an established connection, if  IP  supported  a  strategy\nbased\
    \  on  a  rendezvous  server and service descriptors, every isolated\ndatagram\
    \ would have to  be  routed  indirectly  in  the  receiving  host\nthrough  the\
    \  rendezvous  server, which would substantially increase the\noverhead of processing,\
    \ and every datagram would have to carry the  full\nservice  request  field, \
    \ which  would  increase  the size of the packet\nheader.\nor  things similar\
    \ to that, then using a special high overhead mechanism\nfor circuit setup makes\
    \ sense.  However, current directions in  research\nare  leading  away  from \
    \ this  class  of  protocol,  so  once again the\narchitecture  was  designed\
    \  not  to   preclude   alternative   protocol\nstructures.    The  only  rational\
    \  position  was  that  the  particular\ndispatching strategy used should be part\
    \ of the  higher  level  protocol\ndesign, not the IP layer.\n     This  same\
    \  argument about circuit setup mechanisms also applies to\nthe design of the\
    \ IP address structure.  Many protocols do not  transmit\na  full  address  field\
    \  as  part of every packet, but rather transmit a\nshort identifier which is\
    \ created as part of a circuit setup from source\nto destination.  If the full\
    \ address needs to be  carried  in  only  the\nfirst  packet  of  a long exchange,\
    \ then the overhead of carrying a very\nlong address field can easily be justified.\
    \  Under these  circumstances,\none  can  create  truly extravagant address fields,\
    \ which are capable of\nextending to address almost  any  conceivable  entity.\
    \    However,  this\nstrategy  is  useable  only  in a virtual circuit net, where\
    \ the packets\nbeing transmitted are part of a  established  sequence,  otherwise\
    \  this\nlarge  extravagant  address  must be transported on every packet.  Since\n\
    Internet explicitly rejected this restriction on  the  architecture,  it\nwas\
    \  necessary  to come up with an address field that was compact enough\nto be\
    \ sent in every datagram, but general enough to correctly route  the\ndatagram\
    \  through  the  catanet  without a previous setup phase.  The IP\naddress of\
    \ 32 bits is the compromise that results.  Clearly it  requires\naddress  field\
    \  become  much  bigger,  IP would have been susceptible to\nanother criticism,\
    \ which is that the header had grown unworkably  large.\nAgain, the fundamental\
    \ design decision was that the protocol be designed\nin  such  a way that it supported\
    \ research in new and different sorts of\nprotocol architectures.\n     There\
    \ are some limited restrictions imposed by the IP design on the\nport mechanism\
    \ selected by the higher level  process.    In  particular,\nwhen  a packet goes\
    \ awry somewhere on the internet, the offending packet\nis returned, along with\
    \ an error indication, as part of an ICMP  packet.\nAn  ICMP  packet  returns\
    \ only the IP layer, and the next 64 bits of the\noriginal datagram.  Thus, any\
    \ higher level protocol which wishes to sort\nout from which port a particular\
    \ offending datagram came must make  sure\nthat  the  port information is contained\
    \ within the first 64 bits of the\nnext level header.  This also means, in most\
    \ cases, that it is  possible\nto  imagine,  as  part  of the IP layer, a port\
    \ dispatch mechanism which\nworks by masking and matching on the  first  64  bits\
    \  of  the  incoming\n"
