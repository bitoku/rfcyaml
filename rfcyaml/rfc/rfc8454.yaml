- title: __initial_text__
  contents:
  - '  Information Model for Abstraction and Control of TE Networks (ACTN)

    '
- title: Abstract
  contents:
  - "Abstract\n   This document provides an information model for Abstraction and\n\
    \   Control of TE Networks (ACTN).\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are candidates for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   https://www.rfc-editor.org/info/rfc8454.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   4\n     1.1.  Terminology . . . . . . . . . . . . . . . . . . .\
    \ . . . .   4\n   2.  ACTN Common Interfaces Information Model  . . . . . . .\
    \ . . .   5\n   3.  Virtual Network Primitives  . . . . . . . . . . . . . . .\
    \ . .   6\n     3.1.  VN Instantiate  . . . . . . . . . . . . . . . . . . . .\
    \ .   7\n     3.2.  VN Modify . . . . . . . . . . . . . . . . . . . . . . . .\
    \   7\n     3.3.  VN Delete . . . . . . . . . . . . . . . . . . . . . . . .  \
    \ 7\n     3.4.  VN Update . . . . . . . . . . . . . . . . . . . . . . . .   7\n\
    \     3.5.  VN Compute  . . . . . . . . . . . . . . . . . . . . . . .   8\n  \
    \   3.6.  VN Query  . . . . . . . . . . . . . . . . . . . . . . . .   8\n   4.\
    \  TE Primitives . . . . . . . . . . . . . . . . . . . . . . . .   8\n     4.1.\
    \  TE Instantiate  . . . . . . . . . . . . . . . . . . . . .   9\n     4.2.  TE\
    \ Modify . . . . . . . . . . . . . . . . . . . . . . . .   9\n     4.3.  TE Delete\
    \ . . . . . . . . . . . . . . . . . . . . . . . .   9\n     4.4.  TE Topology\
    \ Update (for TE Resources) . . . . . . . . . .   9\n     4.5.  Path Compute \
    \ . . . . . . . . . . . . . . . . . . . . . .  10\n   5.  VN Objects  . . . .\
    \ . . . . . . . . . . . . . . . . . . . . .  10\n     5.1.  VN Identifier . .\
    \ . . . . . . . . . . . . . . . . . . . .  11\n     5.2.  VN Service Characteristics\
    \  . . . . . . . . . . . . . . .  11\n     5.3.  VN Endpoint . . . . . . . . .\
    \ . . . . . . . . . . . . . .  13\n     5.4.  VN Objective Function . . . . .\
    \ . . . . . . . . . . . . .  14\n     5.5.  VN Action Status  . . . . . . . .\
    \ . . . . . . . . . . . .  14\n     5.6.  VN Topology . . . . . . . . . . . .\
    \ . . . . . . . . . . .  15\n     5.7.  VN Member . . . . . . . . . . . . . .\
    \ . . . . . . . . . .  15\n       5.7.1.  VN Computed Path  . . . . . . . . .\
    \ . . . . . . . . .  15\n       5.7.2.  VN Service Preference . . . . . . . .\
    \ . . . . . . . .  16\n   6.  TE Objects  . . . . . . . . . . . . . . . . . .\
    \ . . . . . . .  17\n     6.1.  TE Tunnel Characteristics . . . . . . . . . .\
    \ . . . . . .  17\n   7.  Mapping of VN Primitives with VN Objects  . . . . .\
    \ . . . . .  19\n   8.  Mapping of TE Primitives with TE Objects  . . . . . .\
    \ . . . .  20\n   9.  Security Considerations . . . . . . . . . . . . . . . .\
    \ . . .  20\n   10. IANA Considerations . . . . . . . . . . . . . . . . . . .\
    \ . .  21\n   11. References  . . . . . . . . . . . . . . . . . . . . . . . .\
    \ .  21\n     11.1.  Normative References . . . . . . . . . . . . . . . . . .\
    \  21\n     11.2.  Informative References . . . . . . . . . . . . . . . . .  21\n\
    \   Contributors  . . . . . . . . . . . . . . . . . . . . . . . . . .  22\n  \
    \ Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  23\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document provides an information model for Abstraction\
    \ and\n   Control of TE Networks (ACTN).  The information model described in\n\
    \   this document covers the interface requirements identified in the\n   ACTN\
    \ Framework document [RFC8453].\n   The ACTN reference architecture [RFC8453]\
    \ identifies a three-tier\n   control hierarchy comprising the following as depicted\
    \ in Figure 1:\n      o Customer Network Controllers (CNCs)\n      o Multi-Domain\
    \ Service Coordinator (MDSC)\n      o Provisioning Network Controllers (PNCs)\n\
    \   +-------+                 +-------+                   +-------+\n   | CNC-A\
    \ |                 | CNC-B |                   | CNC-C |\n   +-------+      \
    \           +-------+                   +-------+\n        \\                \
    \        |                          /\n         ------------            | CMI\
    \         -------------\n                     \\           |            /\n  \
    \                    +----------------------+\n                      |       \
    \  MDSC         |\n                      +----------------------+\n          \
    \           /           |            \\\n         ------------            | MPI\
    \         -------------\n        /                        |                  \
    \        \\\n   +-------+                 +-------+                   +-------+\n\
    \   |  PNC  |                 |  PNC  |                   |  PNC  |\n   +-------+\
    \                 +-------+                   +-------+\n               Figure\
    \ 1: A Three-Tier ACTN Control Hierarchy\n   The two interfaces with respect to\
    \ the MDSC, one north of the MDSC\n   and the other south of the MDSC, are referred\
    \ to as \"CMI\" (CNC-MDSC\n   Interface) and \"MPI\" (MDSC-PNC Interface), respectively.\
    \  This\n   document models these two interfaces and derivative interfaces\n \
    \  thereof (e.g., MDSC-to-MDSC in a hierarchy of MDSCs) as a single\n   common\
    \ interface.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The terms \"Virtual Network (VN)\" and \"Virtual Network\
    \ Service (VNS)\"\n   are defined in [RFC8453].  Other key terms and concepts,\
    \ for example,\n   \"abstraction\", can be found in [RFC7926].\n"
- title: 2.  ACTN Common Interfaces Information Model
  contents:
  - "2.  ACTN Common Interfaces Information Model\n   This section provides an ACTN\
    \ common interface information model to\n   describe primitives, objects, their\
    \ properties (represented as\n   attributes), their relationships, and the resources\
    \ for the service\n   applications needed in the ACTN context.\n   The standard\
    \ interface is described between a client controller and a\n   server controller.\
    \  A client-server relationship is recursive between\n   a CNC and an MDSC and\
    \ between an MDSC and a PNC.  In the CMI, the\n   client is a CNC while the server\
    \ is an MDSC.  In the MPI, the client\n   is an MDSC and the server is a PNC.\
    \  There may also be MDSC-MDSC\n   interfaces that need to be supported.  This\
    \ may arise in a hierarchy\n   of MDSCs in which workloads may need to be partitioned\
    \ to multiple\n   MDSCs.\n   Basic primitives (messages) are required between\
    \ the CNC-MDSC and\n   MDSC-PNC controllers.  These primitives can then be used\
    \ to support\n   different ACTN network control functions like network topology\n\
    \   requests/queries, VN service requests, path computation and\n   connection\
    \ control, VN service policy negotiation, enforcement,\n   routing options, etc.\n\
    \   There are two different types of primitives depending on the type of\n   interface:\n\
    \   o  Virtual Network primitives at CMI\n   o  Traffic Engineering primitives\
    \ at MPI\n   As well described in [RFC8453], at the CMI level, there is no need\n\
    \   for detailed TE information since the basic functionality is to\n   translate\
    \ customer service information into VNS operation.\n   At the MPI level, MDSC\
    \ has the main scope for multi-domain\n   coordination and creation of a single\
    \ end-to-end (E2E) abstracted\n   network view that is strictly related to TE\
    \ information.\n   As for topology, this document employs two types of topology.\n\
    \   o  The first type is referred to as \"virtual network topology\" and is\n\
    \      associated with a VN.  Virtual network topology is a customized\n     \
    \ topology for view and control by the customer.  See Section 3.1\n      for details.\n\
    \   o  The second type is referred to as \"TE topology\" and is associated\n \
    \     with provider network operation on which we can apply policy to\n      obtain\
    \ the required level of abstraction to represent the\n      underlying physical\
    \ network topology.\n"
- title: 3.  Virtual Network Primitives
  contents:
  - "3.  Virtual Network Primitives\n   This section provides a list of main VN primitives\
    \ related to VNs and\n   that are necessary to satisfy the ACTN requirements specified\
    \ in\n   [ACTN-REQ].\n   The following VN Action primitives are supported:\n \
    \  o  VN Instantiate\n   o  VN Modify\n   o  VN Delete\n   o  VN Update\n   o\
    \  VN Path Compute\n   o  VN Query\n   VN Action is an object describing the main\
    \ VN primitives.\n   VN Action can assume one of the mentioned above primitives\
    \ values.\n   <VN Action> ::= <VN Instantiate> |\n                   <VN Modify>\
    \ |\n                   <VN Delete> |\n                   <VN Update> |\n    \
    \               <VN Path Compute> |\n                   <VN Query>\n   All these\
    \ actions will solely happen at CMI level between CNC and\n   MDSC.\n"
- title: 3.1.  VN Instantiate
  contents:
  - "3.1.  VN Instantiate\n   VN Instantiate refers to an action from customers/applications\
    \ to\n   request the creation of VNs.  VN Instantiate is for CNC-to-MDSC\n   communication.\
    \  Depending on the agreement between client and\n   provider, VN instantiate\
    \ can imply different VN operations.  There\n   are two types of VN instantiation:\n\
    \   VN Type 1:  VN is viewed as a set of edge-to-edge links (VN members).\n  \
    \ VN Type 2:  VN is viewed as a VN-topology comprising virtual nodes\n       \
    \        and virtual links.\n   Please see [RFC8453] for full details regarding\
    \ the types of VN.\n"
- title: 3.2.  VN Modify
  contents:
  - "3.2.  VN Modify\n   VN Modify refers to an action issued from customers/applications\
    \ to\n   modify an existing VN (i.e., an instantiated VN).  VN Modify is for\n\
    \   CNC-to-MDSC communication.\n   VN Modify, depending of the type of VN instantiated,\
    \ can be:\n   1.  a modification of the characteristics of VN members (edge-to-edge\n\
    \       links) in the case of VN Type 1, or\n   2.  a modification of an existing\
    \ virtual topology (e.g., adding/\n       deleting virtual nodes/links) in the\
    \ case of VN Type 2.\n"
- title: 3.3.  VN Delete
  contents:
  - "3.3.  VN Delete\n   VN Delete refers to an action issued from customers/applications\
    \ to\n   delete an existing VN.  VN Delete is for CNC-to-MDSC communication.\n"
- title: 3.4.  VN Update
  contents:
  - "3.4.  VN Update\n   \"VN Update\" refers to any update to the VN that needs to\
    \ be updated\n   to the customers.  VN Update is MDSC-to-CNC communication.  VN\
    \ Update\n   fulfills a push model at the CMI level, making customers aware of\
    \ any\n   specific changes in the topology details related to the instantiated\n\
    \   VN.\n   VN Update, depending of the type of VN instantiated, can be:\n   1.\
    \  an update of VN members (edge-to-edge links) in case of VN Type\n       1,\
    \ or\n   2.  an update of virtual topology in case of VN Type 2.\n   The connection-related\
    \ information (e.g., Label Switched Paths\n   (LSPs)) update association with\
    \ VNs will be part of the \"translation\"\n   function that happens in MDSC to\
    \ map/translate VN request into TE\n   semantics.  This information will be provided\
    \ in case the customer\n   optionally wants to have more-detailed TE information\
    \ associated with\n   the instantiated VN.\n"
- title: 3.5.  VN Compute
  contents:
  - "3.5.  VN Compute\n   VN Compute consists of a Request and Reply.  \"VN Compute\
    \ Request\"\n   refers to an action from customers/applications to request a VN\n\
    \   computation.\n   \"VN Compute Reply\" refers to the reply in response to VN\
    \ Compute\n   Request.\n   A VN Compute Request/Reply is to be differentiated\
    \ from a VN\n   Instantiate.  The purpose of VN Compute is a priori exploration\
    \ to\n   compute network resources availability and getting a possible VN view\n\
    \   in which path details can be specified matching customer/applications\n  \
    \ constraints.  This a priori exploration may not guarantee the\n   availability\
    \ of the computed network resources at the time of\n   instantiation.\n"
- title: 3.6.  VN Query
  contents:
  - "3.6.  VN Query\n   \"VN Query\" refers to an inquiry pertaining to a VN that\
    \ has already\n   been instantiated.  VN Query fulfills a pull model that permits\n\
    \   getting a topology view.\n   \"VN Query Reply\" refers to the reply in response\
    \ to a VN Query.  The\n   topology view returned by a VN Query Reply would be\
    \ consistent with\n   the topology type instantiated for any specific VN.\n"
- title: 4.  TE Primitives
  contents:
  - "4.  TE Primitives\n   This section provides a list of the main TE primitives\
    \ necessary to\n   satisfy ACTN requirements specified in [ACTN-REQ] related to\
    \ typical\n   TE operations supported at the MPI level.\n   The TE action primitives\
    \ defined in this section should be supported\n   at the MPI consistently with\
    \ the type of topology defined at the CMI.\n   The following TE action primitives\
    \ are supported:\n   o  TE Instantiate/Modify/Delete\n   o  TE Topology Update\
    \ (see Section 4.4. for the description)\n   o  Path Compute\n   TE Action is\
    \ an object describing the main TE primitives.\n   TE Action can assume one of\
    \ the mentioned above primitives values.\n   <TE Action> ::= <TE Instantiate>\
    \ |\n                   <TE Modify> |\n                   <TE Delete> |\n    \
    \               <TE Topology Update> |\n                   <Path Compute> |\n\
    \   All these actions will solely happen at MPI level between MDSC and\n   PNC.\n"
- title: 4.1.  TE Instantiate
  contents:
  - "4.1.  TE Instantiate\n   \"TE Instantiate\" refers to an action issued from MDSC\
    \ to PNC to\n   instantiate new TE tunnels.\n"
- title: 4.2.  TE Modify
  contents:
  - "4.2.  TE Modify\n   \"TE Modify\" refers to an action issued from MDSC to PNC\
    \ to modify\n   existing TE tunnels.\n"
- title: 4.3.  TE Delete
  contents:
  - "4.3.  TE Delete\n   \"TE Delete\" refers to an action issued from MDSC to PNC\
    \ to delete\n   existing TE tunnels.\n"
- title: 4.4.  TE Topology Update (for TE Resources)
  contents:
  - "4.4.  TE Topology Update (for TE Resources)\n   TE Topology Update is a primitive\
    \ specifically related to MPI used to\n   provide a TE resource update between\
    \ any domain controller and MDSC\n   regarding the entire content of any actual\
    \ TE topology of a domain\n   controller or an abstracted filtered view of TE\
    \ topology depending on\n   negotiated policy.\n   See [TE-TOPO] for detailed\
    \ YANG implementation of TE topology update.\n   <TE Topology Update> ::= <TE-topology-list>\n\
    \   <TE-topology-list> ::= <TE-topology> [<TE-topology-list>]\n   <TE-topology>\
    \ ::= [<Abstraction>] <TE-Topology-identifier> <Node-\n   list> <Link-list>\n\
    \   <Node-list> ::= <Node>[<Node-list>]\n   <Node> ::= <Node> <TE Termination\
    \ Point-list>\n   <TE Termination Point-list> ::= <TE Termination Point> [<TE-\n\
    \   Termination Point-list>]\n   <Link-list> ::= <Link>[<Link-list>]\n   Where\n\
    \   Abstraction provides information on the level of abstraction (as\n   determined\
    \ a priori).\n   TE-topology-identifier is an identifier that identifies a specific\n\
    \   te-topology, e.g., te-types:te-topology-id [TE-TOPO].\n   Node-list is detailed\
    \ information related to a specific node\n   belonging to a te-topology, e.g.,\
    \ te-node-attributes [TE-TOPO].\n   Link-list is information related to the specific\
    \ link related\n   belonging to a te-topology, e.g., te-link-attributes [TE-TOPO].\n\
    \   TE Termination Point-list is detailed information associated with the\n  \
    \ termination points of a te-link related to a specific node, e.g.,\n   interface-switching-capability\
    \ [TE-TOPO].\n"
- title: 4.5.  Path Compute
  contents:
  - "4.5.  Path Compute\n   Path Compute consists of Request and Reply.  \"Path Compute\
    \ Request\"\n   refers to an action from MDSC to PNC to request a path computation.\n\
    \   \"Path Compute Reply\" refers to the reply in response to the Path\n   Compute\
    \ Request.\n   The context of Path Compute is described in [Path-Compute].\n"
- title: 5.  VN Objects
  contents:
  - "5.  VN Objects\n   This section provides a list of objects associated to VN action\n\
    \   primitives.\n"
- title: 5.1.  VN Identifier
  contents:
  - "5.1.  VN Identifier\n   A VN Identifier is a unique identifier of the VN.\n"
- title: 5.2.  VN Service Characteristics
  contents:
  - "5.2.  VN Service Characteristics\n   VN Service Characteristics describes the\
    \ customer/application\n   requirements against the VNs to be instantiated.\n\
    \   <VN Service Characteristics> ::= <VN Connectivity Type>\n                \
    \                    <VN Directionality>\n                                   \
    \ (<VN Traffic Matrix>...)\n                                    <VN Survivability>\n\
    \   Where\n   <VN Connectivity Type> ::= <P2P>|<P2MP>|<MP2MP>|<MP2P>|<Multi-\n\
    \   destination>\n   The Connectivity Type identifies the type of required VN\
    \ Service.  In\n   addition to the classical types of services (e.g., P2P/P2MP,\
    \ etc.),\n   ACTN defines the \"multi-destination\" service that is a new P2P\n\
    \   service where the endpoints are not fixed.  They can be chosen among\n   a\
    \ list of preconfigured endpoints or dynamically provided by the CNC.\n   VN Directionality\
    \ indicates if a VN is unidirectional or\n   bidirectional.  This implies that\
    \ each VN member that belongs to the\n   VN has the same directionality as the\
    \ VN.\n   <VN Traffic Matrix> ::= <Bandwidth>\n                           [<VN\
    \ Constraints>]\n   The VN Traffic Matrix represents the traffic matrix parameters\
    \ for\n   the required service connectivity.  Bandwidth is a mandatory\n   parameter,\
    \ and a number of optional constraints can be specified in\n   the VN Constraints\
    \ (e.g., diversity, cost).  They can include\n   objective functions and TE metric\
    \ bounds as specified in [RFC5541].\n   Further details on the VN constraints\
    \ are specified below:\n         <VN Constraints> ::= [<Layer Protocol>]\n   \
    \                           [<Diversity>]\n                              ( <Metric>\
    \ | <VN Objective Function> )\n      Where:\n      Layer Protocol identifies the\
    \ layer topology at which the VN\n      service is requested.  It could be, for\
    \ example, MPLS, Optical\n      Data Unit (ODU), and Optical Channel (OCh).\n\
    \      Diversity allows asking for diversity constraints for a VN\n      Instantiate/Modify\
    \ or a VN Path Compute.  For example, a new VN or\n      a path is requested in\
    \ total diversity from an existing one (e.g.,\n      diversity exclusion).\n \
    \           <Diversity> ::= (<VN-exclusion> (<VN-id>...)) |\n                \
    \     (<VN-Member-exclusion> (<VN-Member-id>...))\n      Metric can include all\
    \ the Metrics (cost, delay, delay variation,\n      latency) and bandwidth utilization\
    \ parameters defined and\n      referenced by [RFC3630] and [RFC7471].\n     \
    \ As for VN Objective Function, see Section 5.4.\n   VN Survivability describes\
    \ all attributes related to the VN recovery\n   level and its survivability policy\
    \ enforced by the customers/\n   applications.\n      <VN Survivability> ::= <VN\
    \ Recovery Level>\n                              [<VN Tunnel Recovery Level>]\n\
    \                              [<VN Survivability Policy>]\n         Where:\n\
    \         VN Recovery Level is a value representing the requested level\n    \
    \     of resiliency required against the VN.  The following values\n         are\
    \ defined:\n         o  Unprotected VN\n         o  VN with per tunnel recovery:\
    \ The recovery level is defined\n            against the tunnels composing the\
    \ VN, and it is specified in\n            the VN Tunnel Recovery Level.\n    \
    \     <VN Tunnel Recovery Level> ::= <0:1>|<1+1>|<1:1>|<1:N>|<M:N>|\n        \
    \                      <On the fly restoration>\n         The VN Tunnel Recovery\
    \ Level indicates the type of protection\n         or restoration mechanism applied\
    \ to the VN.  It augments the\n         recovery types defined in [RFC4427].\n\
    \         <VN Survivability Policy> ::= [<Local Reroute Allowed>]\n          \
    \                             [<Domain Preference>]\n                        \
    \               [<Push Allowed>]\n                                       [<Incremental\
    \ Update>]\n         Where:\n         Local Reroute Allowed is a delegation policy\
    \ to the Server on\n         whether or not to allow a local reroute fix upon\
    \ a failure of\n         the primary LSP.\n         Domain Preference is only\
    \ applied on the MPI where the MDSC\n         (client) provides a domain preference\
    \ to each PNC (server),\n         e.g., when an inter-domain link fails, then\
    \ PNC can choose the\n         alternative peering with this info.\n         Push\
    \ Allowed is a policy that allows a server to trigger an\n         updated VN\
    \ topology upon failure without an explicit request\n         from the client.\
    \  Push action can be set as default unless\n         otherwise specified.\n \
    \        Incremental Update is another policy that triggers an\n         incremental\
    \ update from the server since the last period of\n         update.  Incremental\
    \ update can be set as default unless\n         otherwise specified.\n"
- title: 5.3.  VN Endpoint
  contents:
  - "5.3.  VN Endpoint\n   VN End-Point Object describes the VN's customer endpoint\n\
    \   characteristics.\n   <VN End-Point> ::= (<Access Point Identifier>\n     \
    \                 [<Access Link Capability>]\n                      [<Source Indicator>])...\n\
    \      Where:\n     Access Point Identifier represents a unique identifier of\
    \ the\n     client endpoint.  They are used by the customer to ask for the\n \
    \    setup of a virtual network instantiation.  A VN End-Point is\n     defined\
    \ against each AP in the network and is shared between\n     customer and provider.\
    \  Both the customer and the provider will map\n     it against their own physical\
    \ resources.\n     Access Link Capability identifies the capabilities of the access\n\
    \     link related to the given access point (e.g., max-bandwidth,\n     bandwidth\
    \ availability, etc.).\n     Source Indicator indicates whether or not an endpoint\
    \ is the\n     source.\n"
- title: 5.4.  VN Objective Function
  contents:
  - "5.4.  VN Objective Function\n   The VN Objective Function applies to each VN\
    \ member (i.e., each E2E\n   tunnel) of a VN.\n   The VN Objective Function can\
    \ reuse objective functions defined in\n   Section 4 of [RFC5541].\n   For a single\
    \ path computation, the following objective functions are\n   defined:\n   o \
    \ MCP is the Minimum Cost Path with respect to a specific metric\n      (e.g.,\
    \ shortest path).\n   o  MLP is the Minimum Load Path, meaning find a path composted\
    \ by te-\n      link least loaded.\n   o  MBP is the Maximum residual Bandwidth\
    \ Path.\n   For a concurrent path computation, the following objective functions\n\
    \   are defined:\n   o  MBC is to Minimize aggregate Bandwidth Consumption.\n\
    \   o  MLL is to Minimize the Load of the most loaded Link.\n   o  MCC is to Minimize\
    \ the Cumulative Cost of a set of paths.\n"
- title: 5.5.  VN Action Status
  contents:
  - "5.5.  VN Action Status\n   VN Action Status is the status indicator whether or\
    \ not the VN has\n   been successfully instantiated, modified, or deleted in the\
    \ server\n   network in response to a particular VN action.\n   Note that this\
    \ action status object can be implicitly indicated and,\n   thus, not included\
    \ in any of the VN primitives discussed in\n   Section 3.\n"
- title: 5.6.  VN Topology
  contents:
  - "5.6.  VN Topology\n   When a VN is seen by the customer as a topology, it is\
    \ referred to as\n   \"VN topology\".  This is associated with VN Type 2, which\
    \ is composed\n   of virtual nodes and virtual links.\n   <VN Topology> ::= <Virtual\
    \ node list> <Virtual link list>\n   <Virtual node list> ::= <Virtual node> [<Virtual\
    \ node list>]\n   <Virtual link list> :: = <Virtual link>  [<Virtual link list>]\n"
- title: 5.7.  VN Member
  contents:
  - "5.7.  VN Member\n   VN Member describes details of a VN Member that is a list\
    \ of a set of\n   VN Members represented as VN_Member_List.\n   <VN_Member_List>\
    \ ::= <VN Member> [<VN_Member_List>]\n   Where <VN Member> ::= <Ingress VN End-Point>\n\
    \                         [<VN Associated LSP>]\n                         <Egress\
    \ VN End-Point>\n   Ingress VN End-Point is the VN End-Point information for the\
    \ ingress\n   portion of the AP.  See Section 5.3 for VN End-Point details.\n\
    \   Egress VN End-Point is the VN End-Point information for the egress\n   portion\
    \ of the AP.  See Section 5.3 for VN End-Point details.\n   VN Associated LSP\
    \ describes the instantiated LSPs in the Provider's\n   network for the VN Type\
    \ 1.  It describes the instantiated LSPs over\n   the VN topology for VN Type\
    \ 2.\n"
- title: 5.7.1.  VN Computed Path
  contents:
  - "5.7.1.  VN Computed Path\n   The VN Computed Path is the list of paths obtained\
    \ after the VN path\n   computation request from a higher controller.  Note that\
    \ the computed\n   path is to be distinguished from the LSP.  When the computed\
    \ path is\n   signaled in the network (and thus the resource is reserved for that\n\
    \   path), it becomes an LSP.\n   <VN Computed Path> ::= (<Path>...)\n"
- title: 5.7.2.  VN Service Preference
  contents:
  - "5.7.2.  VN Service Preference\n   This section provides the VN Service preference.\
    \  VN Service is\n   defined in Section 2.\n   <VN Service Preference> ::= [<Location\
    \ Service Preference >]\n                           [<Client-specific Preference\
    \ >]\n                           [<End-Point Dynamic Selection Preference >]\n\
    \   Where\n      Location Service Preference describes the End-Point Location's\n\
    \      (e.g., data centers (DCs)) support for certain Virtual Network\n      Functions\
    \ (VNFs) (e.g., security function, firewall capability,\n      etc.) and is used\
    \ to find the path that satisfies the VNF\n      constraint.\n      Client-specific\
    \ Preference describes any preference related to VNS\n      that an application/client\
    \ can enforce via CNC towards lower-level\n      controllers.  For example, CNC\
    \ can enforce client-specific\n      preferences, e.g., selection of a destination\
    \ DC from the set of\n      candidate DCs based on some criteria in the context\
    \ of Virtual\n      Machine (VM) migration.  MSDC/PNC should then provide the\
    \ DC\n      interconnection that supports the Client-specific Preference.\n  \
    \    End-Point Dynamic Selection Preference describes if the endpoint\n      (e.g.,\
    \ DC) can support load-balancing, disaster recovery, or VM\n      migration and\
    \ so can be part of the selection by MDSC following\n      service Preference\
    \ enforcement by CNC.\n"
- title: 6.  TE Objects
  contents:
  - '6.  TE Objects

    '
- title: 6.1.  TE Tunnel Characteristics
  contents:
  - "6.1.  TE Tunnel Characteristics\n   Tunnel Characteristics describes the parameters\
    \ needed to configure\n   TE tunnel.\n   <TE Tunnel Characteristics> ::= [<Tunnel\
    \ Type>]\n                                   <Tunnel Id>\n                   \
    \                [<Tunnel Layer>]\n                                   [<Tunnel\
    \ end-point>]\n                                   [<Tunnel protection-restoration>]\n\
    \                                   <Tunnel Constraints>\n                   \
    \               [<Tunnel Optimization>]\n   Where\n   <Tunnel Type> ::= <P2P>|<P2MP>|<MP2MP>|<MP2P>\n\
    \   The Tunnel Type identifies the type of required tunnel.  In this\n   document,\
    \ only the P2P model is provided.\n   Tunnel Id is the TE tunnel identifier\n\
    \   Tunnel Layer represents the layer technology of the LSPs supporting\n   the\
    \ tunnel\n   <Tunnel End Points> ::= <Source> <Destination>\n   <Tunnel protection-restoration>\
    \ ::= <prot 0:1>|<prot 1+1>|<prot\n   1:1>|<prot 1:N>|prot <M:N>|<restoration>\n\
    \   Tunnel Constraints are the base tunnel configuration constraints\n   parameters.\n\
    \   Where <Tunnel Constraints> ::= [<Topology Id>]\n                         \
    \         [<Bandwidth>]\n                                  [<Disjointness>]\n\
    \                                  [<SRLG>]\n                                \
    \  [<Priority>]\n                                  [<Affinities>]\n          \
    \                        [<Tunnel Optimization>]\n                           \
    \       [<Objective Function>]\n   Topology Id references the topology used to\
    \ compute the tunnel path.\n   Bandwidth is the bandwidth used as a parameter\
    \ in path computation.\n   <Disjointness> ::= <node> | <link> | <srlg>\n   Disjointness\
    \ provides the type of resources from which the tunnel has\n   to be disjointed.\n\
    \   Shared Risk Link Group (SRLG) is a group of physical resources\n   impacted\
    \ by the same risk from which an E2E tunnel is required to be\n   disjointed.\n\
    \   <Priority> ::= <Holding Priority> <Setup Priority>\n   where\n   Setup Priority\
    \ indicates the level of priority for taking resources\n   from another tunnel\
    \ [RFC3209].\n   Holding Priority indicates the level of priority to hold resources\n\
    \   avoiding preemption from another tunnel [RFC3209].\n   Affinities represents\
    \ the structure to validate a link belonging to\n   the path of the tunnel [RFC3209].\n\
    \   <Tunnel Optimization> ::= <Metric> | <Objective Function>\n   Metric can include\
    \ all the Metrics (cost, delay, delay variation,\n   latency) and bandwidth utilization\
    \ parameters defined and referenced\n   by [RFC3630] and [RFC7471].\n   <Objective\
    \ Function> ::= <objective function type>\n   <objective function type> ::= <MCP>\
    \ | <MLP> | <MBP> | <MBC> | <MLL>\n   | <MCC>\n   See Section 5.4 for a description\
    \ of objective function type.\n"
- title: 7.  Mapping of VN Primitives with VN Objects
  contents:
  - "7.  Mapping of VN Primitives with VN Objects\n   This section describes the mapping\
    \ of VN primitives with VN Objects\n   based on Section 5.\n   <VN Instantiate>\
    \ ::= <VN Service Characteristics>\n                        <VN Member-List>\n\
    \                        [<VN Service Preference>]\n                        [<VN\
    \ Topology>]\n   <VN Modify> ::= <VN identifier>\n                   <VN Service\
    \ Characteristics>\n                   <VN Member-List>\n                   [<VN\
    \ Service Preference>]\n                   [<VN Topology>]\n   <VN Delete> ::=\
    \ <VN Identifier>\n   <VN Update> :: = <VN Identifier>\n                    [<VN\
    \ Member-List>]\n                    [<VN Topology>]\n   <VN Path Compute Request>\
    \ ::= <VN Service Characteristics>\n                                 <VN Member-List>\n\
    \                                 [<VN Service Preference>]\n   <VN Path Compute\
    \ Reply> ::= <VN Computed Path>\n   <VN Query> ::= <VN Identifier>\n   <VN Query\
    \ Reply> ::= <VN Identifier>\n                        <VN Associated LSP>\n  \
    \                      [<TE Topology Reference>]\n"
- title: 8.  Mapping of TE Primitives with TE Objects
  contents:
  - "8.  Mapping of TE Primitives with TE Objects\n   This section describes the mapping\
    \ of TE primitives with TE Objects\n   based on Section 6.\n   <TE Instantiate>\
    \ ::= <TE Tunnel Characteristics>\n   <TE Modify> ::=  <TE Tunnel Characteristics>\n\
    \   <TE Delete> ::= <Tunnel Id>\n   <TE Topology Update> ::= <TE-topology-list>\n\
    \   <Path Compute Request> ::= <TE Tunnel Characteristics>\n   <Path Compute Reply>\
    \ ::= <TE Computed Path>\n                            <TE Tunnel Characteristics>\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   The ACTN information model is not directly relevant\
    \ when considering\n   potential security issues.  Rather, it defines a set of\
    \ interfaces\n   for TE networks.  The underlying protocols, procedures, and\n\
    \   implementations used to exchange the information model described in\n   this\
    \ document will need to secure the request and control of\n   resources with proper\
    \ authentication and authorization mechanisms.\n   In addition, the data exchanged\
    \ over the ACTN interfaces discussed in\n   this document requires verification\
    \ of data integrity.  Backup or\n   redundancies should also be available to restore\
    \ the affected data to\n   its correct state.\n   Implementations of the ACTN\
    \ framework will have distributed\n   functional components that will exchange\
    \ an instantiation that\n   adheres to this information model.  Implementations\
    \ should encrypt\n   data that flows between them, especially when they are implemented\
    \ at\n   remote nodes and irrespective of whether these data flows are on\n  \
    \ external or internal network interfaces.  The information model may\n   contain\
    \ customer, application, and network data that, for business or\n   privacy reasons,\
    \ may be considered sensitive.  It should be stored\n   only in an encrypted data\
    \ store.\n   The ACTN security discussion is further split into two specific\n\
    \   interfaces:\n   o  Interface between the CNC and MDSC, CNC-MDSC Interface\
    \ (CMI)\n   o  Interface between the MDSC and PNC, MDSC-PNC Interface (MPI).\n\
    \   See the detailed discussion of the CMI and MPI in Sections 9.1 and\n   9.2\
    \ (respectively) in [RFC8453].\n   The conclusion is that all data models and\
    \ protocols used to realize\n   the ACTN information model should have rich security\
    \ features, as\n   discussed in this section.  Additional security risks may still\n\
    \   exist.  Therefore, discussion and applicability of specific security\n   functions\
    \ and protocols will be better described in documents that\n   are use case and\
    \ environment specific.\n"
- title: 10.  IANA Considerations
  contents:
  - "10.  IANA Considerations\n   This document has no IANA actions.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC8453]  Ceccarelli, D., Ed. and Y. Lee, Ed.,\
    \ \"Framework for\n              Abstraction and Control of TE Networks (ACTN)\"\
    , RFC 8453,\n              DOI 10.17487/RFC8453, August 2018,\n              <https://www.rfc-editor.org/info/rfc8453>.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [ACTN-REQ]\n              Lee, Y., Ceccarelli,\
    \ D., Miyasaka, T., Shin, J., and K.\n              Lee, \"Requirements for Abstraction\
    \ and Control of TE\n              Networks\", Work in Progress,\n           \
    \   draft-ietf-teas-actn-requirements-09, March 2018.\n   [Path-Compute]\n   \
    \           Busi, I., Belotti, S., Lopezalvarez, V., Dios, O., Sharma,\n     \
    \         A., Shi, Y., Vilata, R., and K. Sethuraman, \"Yang model\n         \
    \     for requesting Path Computation\", Work in Progress,\n              draft-ietf-teas-yang-path-computation-02,\
    \ June 2018.\n   [RFC3209]  Awduche, D., Berger, L., Gan, D., Li, T., Srinivasan,\
    \ V.,\n              and G. Swallow, \"RSVP-TE: Extensions to RSVP for LSP\n \
    \             Tunnels\", RFC 3209, DOI 10.17487/RFC3209, December 2001,\n    \
    \          <https://www.rfc-editor.org/info/rfc3209>.\n   [RFC3630]  Katz, D.,\
    \ Kompella, K., and D. Yeung, \"Traffic Engineering\n              (TE) Extensions\
    \ to OSPF Version 2\", RFC 3630,\n              DOI 10.17487/RFC3630, September\
    \ 2003,\n              <https://www.rfc-editor.org/info/rfc3630>.\n   [RFC4427]\
    \  Mannie, E., Ed. and D. Papadimitriou, Ed., \"Recovery\n              (Protection\
    \ and Restoration) Terminology for Generalized\n              Multi-Protocol Label\
    \ Switching (GMPLS)\", RFC 4427,\n              DOI 10.17487/RFC4427, March 2006,\n\
    \              <https://www.rfc-editor.org/info/rfc4427>.\n   [RFC5541]  Le Roux,\
    \ JL., Vasseur, JP., and Y. Lee, \"Encoding of\n              Objective Functions\
    \ in the Path Computation Element\n              Communication Protocol (PCEP)\"\
    , RFC 5541,\n              DOI 10.17487/RFC5541, June 2009,\n              <https://www.rfc-editor.org/info/rfc5541>.\n\
    \   [RFC7471]  Giacalone, S., Ward, D., Drake, J., Atlas, A., and S.\n       \
    \       Previdi, \"OSPF Traffic Engineering (TE) Metric\n              Extensions\"\
    , RFC 7471, DOI 10.17487/RFC7471, March 2015,\n              <https://www.rfc-editor.org/info/rfc7471>.\n\
    \   [RFC7926]  Farrel, A., Ed., Drake, J., Bitar, N., Swallow, G.,\n         \
    \     Ceccarelli, D., and X. Zhang, \"Problem Statement and\n              Architecture\
    \ for Information Exchange between\n              Interconnected Traffic-Engineered\
    \ Networks\", BCP 206,\n              RFC 7926, DOI 10.17487/RFC7926, July 2016,\n\
    \              <https://www.rfc-editor.org/info/rfc7926>.\n   [TE-TOPO]  Liu,\
    \ X., Bryskin, I., Beeram, V., Saad, T., Shah, H., and\n              O. Dios,\
    \ \"YANG Data Model for Traffic Engineering (TE)\n              Topologies\",\
    \ Work in Progress,\n              draft-ietf-teas-yang-te-topo-18, June 2018.\n"
- title: Contributors
  contents:
  - "Contributors\n   Haomian Zheng\n   Huawei Technologies\n   Email: zhenghaomian@huawei.com\n\
    \   Xian Zhang\n   Huawei Technologies\n   Email: zhang.xian@huawei.com\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Young Lee (Editor)\n   Huawei Technologies\n   5340 Legacy\
    \ Drive\n   Plano, TX 75023, USA\n   Phone: (469)277-5838\n   Email: leeyoung@huawei.com\n\
    \   Sergio Belotti (Editor)\n   Nokia\n   Via Trento, 30\n   Vimercate, Italy\n\
    \   Email: sergio.belotti@nokia.com\n   Dhruv Dhody\n   Huawei Technologies,\n\
    \   Divyashree Technopark, Whitefield\n   Bangalore, India\n   Email: dhruv.ietf@gmail.com\n\
    \   Daniele Ceccarelli\n   Ericsson\n   Torshamnsgatan,48\n   Stockholm, Sweden\n\
    \   Email: daniele.ceccarelli@ericsson.com\n   Bin Yeong Yoon\n   ETRI\n   Email:\
    \ byyun@etri.re.kr\n"
