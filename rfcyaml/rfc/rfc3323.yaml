- contents:
  - '     A Privacy Mechanism for the Session Initiation Protocol (SIP)

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document defines new mechanisms for the Session Initiation\n
    \  Protocol (SIP) in support of privacy.  Specifically, guidelines are\n   provided
    for the creation of messages that do not divulge personal\n   identity information.
    \ A new \"privacy service\" logical role for\n   intermediaries is defined to
    answer some privacy requirements that\n   user agents cannot satisfy themselves.
    \ Finally, means are presented\n   by which a user can request particular functions
    from a privacy\n   service.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.      Introduction . . . . . . . . . . . . . . . . .
    . . . . . .  2\n   2.      Terminology  . . . . . . . . . . . . . . . . . . .
    . . . .  3\n   3.      Varieties of Privacy . . . . . . . . . . . . . . . . .
    . .  4\n   3.1     When is Privacy Necessary? . . . . . . . . . . . . . . . .
    \ 5\n   3.2     User-Provided Privacy  . . . . . . . . . . . . . . . . . .  6\n
    \  3.3     Network-Provided Privacy . . . . . . . . . . . . . . . . .  7\n   4.
    \     User Agent Behavior  . . . . . . . . . . . . . . . . . . .  7\n   4.1     Constructing
    Private Messages  . . . . . . . . . . . . . .  8\n   4.1.1   URIs, Display-Names
    and Privacy  . . . . . . . . . . . . .  8\n   4.1.1.1 Display-Names  . . . . .
    . . . . . . . . . . . . . . . . .  9\n   4.1.1.2 URI Usernames  . . . . . . .
    . . . . . . . . . . . . . . .  9\n   4.1.1.3 URI Hostnames and IP Addresses .
    . . . . . . . . . . . . .  9\n   4.2     Expressing Privacy Preferences . . .
    . . . . . . . . . . . 11\n   4.3     Routing Requests to Privacy Services . .
    . . . . . . . . . 12\n   4.4     Routing Responses to Privacy Services  . . .
    . . . . . . . 13\n   5.      Privacy Service Behavior . . . . . . . . . . . .
    . . . . . 14\n   5.1     Header Privacy . . . . . . . . . . . . . . . . . . .
    . . . 16\n   5.2     Session Privacy  . . . . . . . . . . . . . . . . . . . .
    . 17\n   5.3     Applying User-Level Privacy Functions. . . . . . . . . . . 18\n
    \  6.      Security Considerations  . . . . . . . . . . . . . . . . . 19\n   7.
    \     IANA Considerations  . . . . . . . . . . . . . . . . . . . 19\n           Normative
    References . . . . . . . . . . . . . . . . . . . 20\n           Informative References
    . . . . . . . . . . . . . . . . . . 20\n           Author's Address . . . . .
    . . . . . . . . . . . . . . . . 21\n           Acknowledgments  . . . . . . .
    . . . . . . . . . . . . . . 21\n           Full Copyright Statement . . . . .
    . . . . . . . . . . . . 22\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document provides privacy requirements and mechanisms
    for the\n   Session Initiation Protocol (SIP).\n   Privacy is defined in this
    document as the withholding of the\n   identity of a person (and related personal
    information) from one or\n   more parties in an exchange of communications, specifically
    a SIP\n   dialog.  These parties potentially include the intended\n   destination(s)
    of messages and/or any intermediaries handling these\n   messages.  As identity
    is defined in this document, withholding the\n   identity of a user will, among
    other things, render the other parties\n   in the dialog unable to send new SIP
    requests to the user outside of\n   the context of the current dialog.\n   In
    SIP, identity is most commonly carried in the form of a SIP URI\n   and an optional
    display-name.  A SIP address-of-record has a form\n   similar to an email address
    with a SIP URI scheme (for example,\n   sip:alice@atlanta.com).  A display-name
    is a string containing a name\n   for the identified user (for example, \"Alice\").
    \ SIP identities of\n   this form commonly appear in the To and From header fields
    of SIP\n   requests and responses.  A user may have many identities that they\n
    \  use in different contexts.\n   There are numerous other places in SIP messages
    in which identity-\n   related information can be revealed.  For example, the
    Contact header\n   field contains a SIP URI, one that is commonly as revealing
    as the\n   address-of-record in the From.  In some headers, the originating user\n
    \  agent can conceal identity information as a matter of local policy\n   without
    affecting the operation of the SIP protocol.  However,\n   certain headers are
    used in the routing of subsequent messages in a\n   dialog, and must therefore
    be populated with functional data.\n   The privacy problem is further complicated
    by proxy servers (also\n   referred to in this document as \"intermediaries\"
    or \"the network\")\n   that add headers of their own, such as the Record-Route
    and Via\n   headers.  Information in these headers could inadvertently reveal\n
    \  something about the originator of a message; for example, a Via\n   header
    might reveal the service provider through whom the user sends\n   requests, which
    might in turn strongly hint at the user's identity to\n   some recipients.  For
    these reasons, the participation of\n   intermediaries is also crucial to providing
    privacy in SIP.\n   Two complimentary principles have guided the design of this
    privacy\n   mechanism: Users are empowered to hide their identity and related\n
    \  personal information when they issue requests, but intermediaries and\n   designated
    recipients of requests are entitled to reject requests\n   whose originator cannot
    be identified.\n   The privacy properties of only those specific headers enumerated
    in\n   the core SIP specification ([1]), as opposed to headers defined by\n   any
    existing or planned extension, are discussed in this document -\n   however, the
    privacy mechanisms described in this document can be\n   extended to support extensions.\n
    \  There are other aspects of the general privacy problem for SIP that\n   are
    not addressed by this document.  Most significantly, the\n   mechanisms for managing
    the confidentiality of SIP headers and\n   bodies, as well the security of session
    traffic, are not reconsidered\n   here.  These problems are sufficiently well
    addressed in the baseline\n   SIP specification and related documents, and that
    no new mechanisms\n   are required.\n   This document begins with a section that
    provides a general framework\n   and architecture for privacy in SIP (Section
    3), followed by sections\n   that detail user agent behavior (Section 4) and privacy
    service\n   behavior (Section 5).\n"
  title: 1.  Introduction
- contents:
  - "2. Terminology\n   In this document, the key words \"MUST\", \"MUST NOT\", \"REQUIRED\",\n
    \  \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT\n
    \  RECOMMENDED\", \"MAY\", and \"OPTIONAL\" are to be interpreted as\n   described
    in BCP 14, RFC 2119 [2] and indicate requirement levels for\n   compliant SIP
    implementations.\n"
  title: 2. Terminology
- contents:
  - "3. Varieties of Privacy\n   A user may possess many identities that are used
    in various contexts;\n   generally, identities are addresses-of-record which are
    bound to\n   particular registrars (operated by the administrators of a domain)\n
    \  with whom SIP user agents register.  The operators of these domains\n   may
    be employers, service providers, or unaffiliated users\n   themselves.\n   When
    a user voluntarily asserts an identity in a request, they are\n   claiming that
    they can receive requests sent to that identity in that\n   domain.  Strictly
    speaking, privacy entails the restriction of the\n   distribution of a specific
    identity and related personal information\n   from some particular party or parties
    that are potentially recipients\n   of the message.  In particular, there are
    scenarios in which a party\n   desiring anonymity may:\n      send a message and
    withhold an identity from the final\n      destination(s) while still communicating
    an identity to one or\n      more intermediaries\n      send a message and withhold
    their identity from some or all\n      intermediaries, but still communicate an
    identity end-to-end to\n      the final destination(s)\n      withhold identity
    from both intermediaries and final\n      destination(s)\n   The result of withholding
    an identity is that the parties in question\n   would be unable, for example,
    to attempt to initiate a new dialog\n   with the anonymous party at a later time.
    \ However, the anonymous\n   party still must be capable of receiving responses
    and new requests\n   during the dialog in which it is participating.\n   It may
    be desirable to restrict identity information on both requests\n   and responses.
    \ Initially, it might seem unusual to suggest that a\n   response has privacy
    concerns - presumably, the originator of the\n   request knows who they were attempting
    to contact, so the identity of\n   the respondent can hardly be confidential.
    \ However, some personal\n   information in responses (such as the contact address
    at which the\n   respondent is currently registered) is subject to privacy concerns\n
    \  and can be addressed by these mechanisms.\n"
  - contents:
    - "3.1 When is Privacy Necessary?\n   Users may wish for identity information
      to be withheld from a given\n   party for any number of reasons, for example:\n
      \     Users might want to contact a particular party without revealing\n      their
      identity in order to impart information with which they\n      would not like
      to be associated\n      Users might fear that the exposure of their identity
      or personal\n      information to some networks or destinations will make them
      a\n      target for unsolicited advertising, legal censure or other\n      undesirable
      consequences\n      Users might want to withhold from participants in a session
      the\n      identity by which they are known to network intermediaries for the\n
      \     purposes of billing and accounting\n   When a user agent decides to send
      a request through a proxy server,\n   it may be difficult for the originator
      to anticipate the final\n   destination of that message.  For that reason, users
      are advised not\n   to base their estimation of their privacy needs on where
      they expect\n   a message will go.  For example, if a user sends a request to\n
      \  telephone number, they may believe that the final destination of the\n   request
      will be a station in the public switched telephone network\n   (PSTN) that is
      unable to inspect, say, SIP Contact headers, and\n   therefore assume that it
      is safe to leave such headers in the clear;\n   however, such a request might
      very well end up being retargeted by\n   the network to a native SIP endpoint
      to which Contact headers are\n   quite legible.\n   This document describes
      three degrees of privacy - one level of\n   user-provided privacy, and two levels
      of network-provided privacy\n   (header privacy and session privacy).  How much
      privacy does a user\n   need for any given session? Generally, if a user is
      seeking privacy,\n   they're going to need as much of it as they can get.  However,
      if a\n   user knows of no privacy service, they must be content with user-\n
      \  provided privacy alone.  Similarly, if a user knows of an\n   anonymization
      service that can provide session privacy, but is unable\n   to secure session
      traffic to prevent the anonymizer from possibly\n   eavesdropping on the session,
      they might judge the loss of session\n   privacy to be the lesser evil.  The
      user might also be aware of\n   exceptional conditions about the architecture
      in which the user agent\n   is deployed that may obviate one or more privacy
      concerns.\n   A user may not always be the best judge of when privacy is required\n
      \  even under ideal circumstances, and thus privacy may in some\n   architectures
      by applied by intermediaries without the user's\n   explicit per-message request.
      \ By sending a request through\n   intermediaries that can provide a privacy
      role, the user tacitly\n   permits privacy functions to be invoked as needed.\n
      \  It is also important that users understand that intermediaries may be\n   unable
      to provide privacy functions requested by users.  Requests for\n   privacy may
      not be honored due to legal constraints, unimplemented or\n   misconfigured
      features, or other exceptional conditions.\n   Note that just as it is the prerogative
      of a user to conceal their\n   identity, so it must also be the prerogative
      of proxy servers and\n   other users to refuse to process requests from users
      whom they cannot\n   identify.  Therefore users should not just automatically
      withhold\n   their identity for all requests and responses - inability to\n
      \  ascertain the identity of the originator of the request will\n   frequently
      be grounds for rejection.  Privacy should only be\n   requested when the user
      has a need for it.\n   Further to this point, withholding some information in
      signaling\n   might not be necessary for all user agents to ensure privacy.
      \ For\n   example, user agents may acquire their IP addresses and hostnames\n
      \  dynamically, and these dynamic addresses may not reveal any\n   information
      about the user whatsoever.  In these cases, restricting\n   access to hostnames
      (as described in Section 4.1.1.3) is unnecessary.\n"
    title: 3.1 When is Privacy Necessary?
  - contents:
    - "3.2 User-Provided Privacy\n   There is a certain amount of privacy that a user
      agent can provide\n   itself.  For example, the baseline SIP specification permits
      a user\n   agent to populate the From header field of a request with an\n   anonymous
      value.  Users can take similar steps to avoid revealing any\n   other unnecessarily
      identity information in related SIP headers (this\n   is discussed further in
      Section 4.1.1).\n   A user may have different privacy needs for a message if
      it traverses\n   intermediaries rather than going directly end-to-end.  A user
      may\n   attempt to conceal things from intermediaries which are not concealed\n
      \  from the final destination, and vice versa.  For example, using\n   baseline
      SIP mechanisms, a user agent can encrypt SIP bodies end-to-\n   end in order
      to prevent intermediaries from inspecting them. If a SIP\n   message will not
      pass through intermediaries, however, this step\n   might not be necessary (i.e.,
      lower-layer security, without the\n   addition of security for SIP bodies, could
      be sufficient).\n   Also note that if a dialog goes directly end-to-end between\n
      \  participants, however, it will not be possible to conceal the network\n   addresses
      of the participants.\n"
    title: 3.2 User-Provided Privacy
  - contents:
    - "3.3 Network-Provided Privacy\n   If a user is sending a request through intermediaries,
      a user agent\n   can conceal its identity to only a limited extent without the\n
      \  intermediaries' cooperation.  Also, some information can only be\n   concealed
      from destination endpoints if an intermediary is entrusted\n   to remove it.\n
      \  For these reasons a user must have a way to request privacy from\n   intermediaries,
      a means that allows users both to signal some\n   indications of the desired
      privacy services, and to ensure that their\n   call is routed to an intermediary
      that is capable of providing these\n   services.  A user may be aware of a specific
      third-party anonymizing\n   host, one with which they have a pre-existing relationship,
      or a user\n   may request that their local administrative domain provide privacy\n
      \  services.\n   Intermediaries may also be empowered to apply privacy to a
      message\n   without any explicit signaling from the originating user, since
      user\n   agents may not always be cognizant or capable of requesting privacy\n
      \  when it is necessary.\n"
    title: 3.3 Network-Provided Privacy
  title: 3. Varieties of Privacy
- contents:
  - "4. User Agent Behavior\n   There are three different ways that a user agent can
    contribute to\n   the privacy of a request - by populating headers with values
    that\n   reflect privacy requirements, by requesting further privacy services\n
    \  from the network, and by using cryptographic confidentiality to\n   secure
    headers and bodies.  Note that the last of these is outside\n   the scope of this
    document.\n   The mechanisms provided in this section assume that a user agent
    is\n   sufficiently configurable that a user can select header values and\n   provision
    privacy preferences (ideally on a per-call basis).  If this\n   isn't the case,
    it is possible that a user can route their call\n   through a privacy service
    that is configured to groom signaling from\n   this user agent in order to provide
    some of the function described\n   below (see Section 5).\n"
  - contents:
    - "4.1 Constructing Private Messages\n   Privacy starts with the user agent.  The
      bulk of the steps that are\n   required to conceal private information about
      the sender of a message\n   are, appropriately enough, the sender's responsibility.\n
      \  The following SIP headers, when generated by a user agent, can\n   directly
      or indirectly reveal identity information about the\n   originator of a message:
      From, Contact, Reply-To, Via, Call-Info,\n   User-Agent, Organization, Server,
      Subject, Call-ID, In-Reply-To and\n   Warning.  Note that the use of an authentication
      system (such as the\n   SIP Digest authentication method described in [1]) also
      usually\n   entails revealing identity to one or more parties; for more\n   information
      see Section 6.\n   The first and most obvious step is that user agents SHOULD
      not\n   include any optional headers that might divulge personal information;\n
      \  there's certainly no reason for a user seeking privacy to include a\n   Call-Info.
      \ Secondly, the user SHOULD populate URIs throughout the\n   message in accordance
      with the guidelines given in Section 4.1.1.\n   For example, users SHOULD create
      an anonymous From header field for\n   the request.  Finally, users MAY also
      need to request certain privacy\n   functions from the network, as described
      in Section 4.2.\n   The Call-ID header, which is frequently constructed in a
      manner that\n   reveals the IP address or hostname of the originating client,\n
      \  requires special mention.  User agents SHOULD substitute for the IP\n   address
      or hostname that is frequently appended to the Call-ID value\n   a suitably
      long random value (the value used as the 'tag' for the\n   From header of the
      request might even be reused).\n   Note that if the user wants to conceal any
      of the above headers from\n   intermediaries alone, without withholding them
      from the final\n   destination of the message, users MAY also place legitimate
      values\n   for these headers in encapsulated 'message/sip' S/MIME bodies as\n
      \  described in Section 23 of [1].\n"
    - contents:
      - "4.1.1 URIs, Display-Names and Privacy\n   A certain amount of privacy can
        be afforded by choosing to populate\n   SIP headers with URIs and display-names
        that do not reveal any\n   identity information.  In some of the header fields
        (for example, the\n   Reply-To and From headers), URIs are not used in further
        signaling\n   within the current dialog.  In others, like the Contact header,
        an\n   inaccurate URI will result in a failure to route subsequent requests\n
        \  within the dialog.\n"
      - contents:
        - "4.1.1.1 Display-Names\n   It is a relatively common practice in email and
          other applications to\n   use an assumed name in the display-name component
          of the From header\n   field.  Outside of a business context (especially
          in applications\n   such as instant messaging or Internet gaming) the use
          of such aliases\n   is unlikely to provide a cause for distrust.\n   It
          is RECOMMENDED that user agents seeking anonymity use a display-\n   name
          of \"Anonymous\".\n"
        title: 4.1.1.1 Display-Names
      - contents:
        - "4.1.1.2 URI Usernames\n   The structure of a URI itself can reveal or conceal
          a considerable\n   amount of personal information.  Consider the difference
          between:\n   sip:jon.peterson@neustar.biz\n   and\n   sip:a0017@anonymous-sip.com\n
          \  From the former, the full name and employer of the party in question\n
          \  can easily be guessed.  From the latter, you learn nothing other than\n
          \  that the party desires anonymity.  In some cases, sufficient\n   anonymity
          can be achieved by selecting an oblique URI.  Today, the\n   SIP specification
          recommends a URI with \"anonymous\" in the user\n   portion of the From
          header.\n   In some URIs, such as those that appear in Contact headers,
          it MAY\n   also make sense to omit the username altogether, and provide
          only a\n   hostname, like:  sip:anonymous-sip.com\n"
        title: 4.1.1.2 URI Usernames
      - contents:
        - "4.1.1.3 URI Hostnames and IP Addresses\n   It is assumed by this document
          that the user that requests privacy\n   wishes to receive future requests
          and responses within this dialog,\n   but does not wish to reveal an identity
          that could be used to send\n   new requests to him outside the scope of
          this dialog.  For that\n   reason, different treatment must be recommended
          for URIs that are\n   used in the context of routing further requests in
          the dialog, as\n   opposed to routing new requests outside the context of
          the dialog.\n   For headers indicating how the user would like to be contacted
          for\n   future sessions (such as the From header), it might not immediately\n
          \  be obvious why changing the hostname would be necessary - if the\n   username
          is 'anonymous', requests will not be routable to the\n   anonymous user.\n
          \  Sometimes, merely changing the username will not be enough to conceal\n
          \  a user's identity.  A user's SIP service provider might decisively\n
          \  reveal a user's identity (if it reflected something like a small\n   company
          or a personal domain).  So in this case, even though the URI\n   in the
          From header would not dereference  to the anonymous user,\n   humans might
          easily guess the user's identity and know the proper\n   form of their address-of-record.\n
          \  For these reasons, the hostname value 'anonymous.invalid' SHOULD be\n
          \  used for anonymous URIs (see [3] for more information about the\n   reserved
          'invalid' DNS TLD).  The full recommended form of the From\n   header for
          anonymity is (note that this From header, like all others,\n   MUST contain
          a valid and unique 'tag=' parameter):\n   From: \"Anonymous\" <sip:anonymous@anonymous.invalid>;tag=1928301774\n
          \  For headers indicating how further requests in the current dialog\n   should
          be routed (namely the Contact header, Via header, and session\n   information
          in the SDP), there seems to be little that a user can do\n   to disguise
          the existing URI, because users MUST provide a value that\n   will allow
          them to receive further requests.  In some cases,\n   disguising or failing
          to provide the username, as described above,\n   may create some level of
          privacy, but the hostname provides a more\n   significant obstacle.\n   Is
          there much additional privacy in using an IP address rather than a\n   hostname?
          It does prevent someone who casually inspects a message\n   from gathering
          information that they might see otherwise.  However,\n   reverse-resolving
          such addresses is generally trivial, and\n   substituting an IP address
          for a hostname could introduce some\n   complications, for example due to
          NAT and firewall traversal\n   concerns.  Headers used in routing may also
          rely on certain DNS\n   practices to provide services that would be lost
          if an IP address is\n   used in place of a hostname.\n   This document thus
          recommends that the host portion of URIs that are\n   used in the routing
          of subsequent requests, such as URIs appearing in\n   the Contact header,
          SHOULD NOT be altered by the user agent due to\n   privacy considerations.
          \ If these headers require anonymization, the\n   user requests that service
          from an intermediary, namely a privacy\n   service.\n   Note that many of
          the considerations regarding the Contact header\n   above apply equal well
          to SIP headers in which a hostname, rather\n   than a URI, is used for some
          routing purpose (namely the Via header).\n"
        title: 4.1.1.3 URI Hostnames and IP Addresses
      title: 4.1.1 URIs, Display-Names and Privacy
    title: 4.1 Constructing Private Messages
  - contents:
    - "4.2 Expressing Privacy Preferences\n   There are some headers that a user agent
      cannot conceal itself,\n   because they are used in routing, that could be concealed
      by an\n   intermediary that subsequently takes responsibility for directing\n
      \  messages to and from the anonymous user.  The user agent must have\n   some
      way to request such privacy services from the network.  For that\n   purpose,
      this document defines a new SIP header, Privacy, that can be\n   used to specify
      privacy handling for requests and responses.\n   Privacy-hdr  =  \"Privacy\"
      HCOLON priv-value *(\";\" priv-value)\n   priv-value   =   \"header\" / \"session\"
      / \"user\" / \"none\" / \"critical\"\n                    / token\n   User agents
      SHOULD include a Privacy header when network-provided\n   privacy (as described
      in Section 3.3) is required.  Note that some\n   intermediaries may also add
      the Privacy header to messages, including\n   privacy services.  However, such
      intermediaries SHOULD only do so if\n   they are operating at a user's behest,
      for example if a user has an\n   administrative arrangement with the operator
      of the intermediary that\n   it will add such a Privacy header.  An intermediary
      MUST NOT modify\n   the Privacy header in any way if the 'none' priv-value is
      already\n   specified.\n   The values of priv-value today are restricted to
      the above options,\n   although further options can be defined as appropriate
      (see Section\n   7).  Each legitimate priv-value can appear zero or one times
      in a\n   Privacy header.  The current values are:\n      header: The user requests
      that a privacy service obscure those\n      headers which cannot be completely
      expunged of identifying\n      information without the assistance of intermediaries
      (such as Via\n      and Contact).  Also, no unnecessary headers should be added
      by the\n      service that might reveal personal information about the\n      originator
      of the request.\n      session: The user requests that a privacy service provide\n
      \     anonymization for the session(s) (described, for example, in a\n      Session
      Description Protocol [5] body) initiated by this message.\n      This will mask
      the IP address from which the session traffic would\n      ordinarily appear
      to originate.  When session privacy is\n      requested, user agents MUST NOT
      encrypt SDP bodies in messages.\n      Note that requesting session privacy
      in the absence of any end-\n      to-end session encryption raises some serious
      security concerns\n      (see Section 5.2).\n      user: This privacy level
      is usually set only by intermediaries, in\n      order to communicate that user
      level privacy functions (as\n      discussed in Section 5.3) must be provided
      by the network,\n      presumably because the user agent is unable to provide
      them. User\n      agents MAY however set this privacy level for REGISTER requests,\n
      \     but SHOULD NOT set 'user' level privacy for other requests.\n      none:
      The user requests that a privacy service apply no privacy\n      functions to
      this message, regardless of any pre-provisioned\n      profile for the user
      or default behavior of the service.  User\n      agents can specify this option
      when they are forced to route a\n      message through a privacy service which
      will, if no Privacy header\n      is present, apply some privacy functions which
      the user does not\n      desire for this message.  Intermediaries MUST NOT remove
      or alter\n      a Privacy header whose priv-value is 'none'.  User agents MUST
      NOT\n      populate any other priv-values (including 'critical') in a Privacy\n
      \     header that contains a value of 'none'.\n      critical: The user asserts
      that the privacy services requested for\n      this message are critical, and
      that therefore, if these privacy\n      services cannot be provided by the network,
      this request should be\n      rejected.  Criticality cannot be managed appropriately
      for\n      responses.\n   When a Privacy header is constructed, it MUST consist
      of either the\n   value 'none', or one or more of the values 'user', 'header'
      and\n   'session' (each of which MUST appear at most once) which MAY in turn\n
      \  be followed by the 'critical' indicator.\n   The following table specifies
      extensions to Table 2 in [1].\n   Header field          where   proxy ACK BYE
      CAN INV OPT REG\n   ___________________________________________________________\n
      \  Privacy                        amrd  o   o   o   o   o   o\n   Header field
      \                       SUB NOT PRK IFO UPD MSG\n   ___________________________________________________________\n
      \  Privacy                              o   o   o   o   o   o\n"
    title: 4.2 Expressing Privacy Preferences
  - contents:
    - "4.3 Routing Requests to Privacy Services\n   The most obvious way for a user
      agent to invoke the privacy function\n   is to direct a request through an intermediary
      known to act as a\n   privacy service.  Doing so traditionally entails the configuration
      of\n   pre-loaded Route headers that designate the privacy service.\n   It is
      RECOMMENDED that service providers couple the privacy service\n   function with
      a local outbound proxy.  Users can thereby send their\n   messages that request
      privacy through their usual outbound route.\n   Users should not assume, however,
      that the administrative domain that\n   is the destination of the request would
      be willing and able to\n   perform the privacy service function on their behalf.
      \ If the\n   originating user wishes to keep their local administrative domain
      a\n   secret, then they must use a third-party anonymization service\n   outside
      of any of the principal administrative domains associated\n   with the session.\n
      \  It is highly RECOMMENDED that user agents use network or transport\n   layer
      security, such as TLS, when contacting a privacy service.\n   Ideally, users
      SHOULD establish a direct (i.e., single pre-loaded\n   Route header) connection
      to a privacy service; this will both allow\n   the user to inspect a certificate
      presented by the privacy service,\n   and it will provide confidentiality for
      requests that will reduce the\n   chances that the information that the privacy
      service will obscures\n   is revealed before a message arrives at the privacy
      service.  By\n   establishing a direct connection to a privacy service, the
      user also\n   eliminates the possibility that intermediaries could remove requests\n
      \  for privacy.  If a direct connection is impossible, users SHOULD use\n   a
      mechanism like SIPS to guarantee the use of lower-layer security\n   all the
      way to the privacy service.\n   If a user agent believes that it is sending
      a request directly to a\n   privacy service, it SHOULD include a Proxy-Require
      header containing\n   a new option-tag, 'privacy', especially when the 'critical'
      priv-\n   value is present in the Privacy header.  That way, in the unlikely\n
      \  event that the user agent sends a request to an intermediary that\n   does
      not support the extensions described in this document, the\n   request will
      fail.  Note that because of special privacy service\n   behavior (described
      in Section 5), no subsequent intermediaries in\n   the signaling path of the
      request will also need to the support the\n   'privacy' option-tag - once the
      privacy service has fulfilled all the\n   required privacy functions, the 'privacy'
      option-tag is removed from\n   the Proxy-Require header.\n"
    title: 4.3 Routing Requests to Privacy Services
  - contents:
    - "4.4 Routing Responses to Privacy Services\n   Making sure that responses will
      go through a privacy service is a\n   little bit trickier.  The path traversed
      by SIP responses is the same\n   as the path over which the request traveled.
      \ Thus, the responding\n   user agent, for example, cannot force a privacy service
      to be\n   injected in the response path after it has received a request.\n   What
      a responding user agent can do, however, is ensure that the path\n   by which
      requests reach them traverses their privacy service.  In\n   some architectures,
      the privacy service function will be fulfilled by\n   the same server to which
      requests for the local administrative domain\n   are sent, and hence it will
      automatically be in the path of incoming\n   requests.  However, if this is
      not the case, the user will have to\n   ensure that requests are directed through
      a third-party privacy\n   service.\n   One way to accomplish this is to procure
      an 'anonymous callback' URI\n   from the third-party service and to distribute
      this as an address-\n   of-record.  A privacy service provider might offer these
      anonymous\n   callback URIs to users in the same way that an ordinary SIP service\n
      \  provider grants addresses-of-record. The user would then register\n   their
      normal address-of-record as a contact address with the third-\n   party service.\n
      \  Alternatively, a user agent could send REGISTER requests through a\n   privacy
      service with a request for 'user' level privacy.  This will\n   allow the privacy
      service to insert anonymous Contact header URIs.\n   Requests sent to the user's
      conventional address-of-record would then\n   reach the user's devices without
      revealing any usable contact\n   addresses.\n   Finally, a user might generate
      a CPL ([7]) script that will direct\n   requests to an anonymization service.\n
      \  Users are also advised to use transport or network layer security in\n   the
      response path.  This may involve registering a SIPS URI and/or\n   maintaining
      persistent TLS connections over which their user agent\n   receives requests.\n
      \  Privacy services MAY in turn route requests through other privacy\n   services.
      \ This may be necessary if a privacy service does not\n   support a particular
      privacy function, but it knows of a peer that\n   does.  Privacy services may
      also cluster themselves into networks\n   that exchange session traffic between
      one another in order to further\n   disguise the participants in a session,
      although no specific\n   architecture or method for doing so is described in
      this document.\n"
    title: 4.4 Routing Responses to Privacy Services
  title: 4. User Agent Behavior
- contents:
  - "5. Privacy Service Behavior\n   This document defines a new SIP logical role
    called a \"privacy\n   service\".  The privacy service role is instantiated by
    a network\n   intermediary, frequently by entities that can act as SIP proxy\n
    \  servers.  The function of a privacy service is to supply privacy\n   functions
    for SIP messages that cannot be provided by user agents\n   themselves.\n   When
    a message arrives at a server that can act as a privacy service,\n   the service
    SHOULD evaluate the level of privacy requested in a\n   Privacy header.  Usually,
    only the services explicitly requested\n   should be applied.  However, privacy
    services MAY have some means\n   outside SIP of ascertaining the preferences of
    the user (such as a\n   pre-arranged user profile) and therefore they MAY perform
    such other\n   privacy functions without an explicit Privacy header.  Performing\n
    \  even a user-level privacy function in a privacy service could be\n   useful,
    for example, when a user is sending messages from a legacy\n   client that does
    support the Privacy header, or a user agent that\n   does not allow the user to
    configure the values of headers that could\n   reveal personal information.  However,
    if the Privacy header value of\n   'none' is specified in a message, privacy services
    MUST NOT perform\n   any privacy function and MUST NOT remove or modify the Privacy\n
    \  header.\n   Privacy services MUST implement support for the 'none' and 'critical'\n
    \  privacy tokens, and MAY implement any of other privacy levels\n   described
    in Section 4.2 as well as any extensions that are not\n   detailed in this document.
    \ In some cases, the privacy service will\n   not be capable of fulfilling the
    requested level of privacy. If the\n   'critical' privacy level is present in
    the Privacy header of a\n   request, then if the privacy service is incapable
    of performing all\n   of the levels of privacy specified in the Privacy header
    then it MUST\n   fail the request with a 500 (Server Error) response code.  The
    reason\n   phrase of the status line of the response SHOULD contain appropriate\n
    \  text indicating that there has been a privacy failure as well as an\n   enumeration
    of the priv-value(s) which were not supported by the\n   privacy service (the
    reason phrase SHOULD also respect any Accept-\n   Language header in the request
    if possible).\n   When a privacy service performs one of the functions corresponding
    to\n   a privacy level listed in the Privacy header, it SHOULD remove the\n   corresponding
    priv-value from the Privacy header - otherwise, any\n   other privacy service
    involved with routing this message might\n   unnecessarily apply the same function,
    which in many cases would be\n   undesirable.  When the last priv-value (not counting
    'critical') has\n   been removed from the Privacy header, the entire Privacy header
    MUST\n   be removed from a message.\n   When the privacy service removes the entire
    Privacy header, if the\n   message is a request, the privacy service MUST also
    remove any\n   'privacy' option-tag from the Proxy-Require header field of the\n
    \  request.\n"
  - contents:
    - "5.1 Header Privacy\n   If a privacy level of 'header' is requested, then the
      originating\n   user has asked the privacy service to help to obscure headers
      that\n   might otherwise reveal information about the originator of the\n   request.
      \ However, the values that have been so obscured must be\n   recoverable when
      further messages in the dialog need to be routed to\n   the originating user
      agent.  In order to provide these functions the\n   privacy service must frequently
      act as a transparent back-to-back\n   user agent (B2BUA).\n   Firstly, a request
      for header privacy entails that the server SHOULD\n   NOT add any headers to
      the message that reveal any identity or\n   personal information, including
      the following: Call-Info, Server, and\n   Organization.  All of these provide
      optional information that could\n   reveal facts about the user that has request
      anonymity.\n   Privacy services operating on requests SHOULD remove all Via
      headers\n   that have been added to the request prior to its arrival at the\n
      \  privacy service (a practice referred to as \"Via stripping\") and then\n
      \  SHOULD add a single Via header representing themselves.  Note that\n   the
      bottommost such Via header field value in a request contains an\n   IP address
      or hostname that designates the originating client, and\n   subsequent Via header
      field values may indicate hosts in the same\n   administrative domain as the
      client.  No Via stripping is required\n   when handling responses.\n   Contact
      headers are added by user agents to both requests and\n   responses.  A privacy
      service SHOULD replace the value of the Contact\n   header in a message with
      a URI that does not dereference to the\n   originator of the message (such as
      the anonymous URI described in\n   Section 4.1.1.3).  The URI that replaces
      the existing Contact header\n   field value MUST dereference to the privacy
      service.\n   In a manner similar to Via stripping, a privacy service SHOULD
      also\n   strip any Record-Route headers that have been added to a request\n
      \  before it reaches the privacy service - though note that no such\n   headers
      will be present if there is only one hop between the\n   originating user agent
      and the privacy service, as is recommended\n   above.  Such Record-Route headers
      might also divulge information\n   about the administrative domain of the client.\n
      \  For the purposes of this document, it is assumed that the privacy\n   service
      has locally persisted the values of any of the above headers\n   that are so
      removed, which requires the privacy service to keep a\n   pretty significant
      amount of state on a per-dialog basis.  When\n   further requests or responses
      associated with the dialog reach the\n   privacy service, it MUST restore values
      for the Via, Record-\n   Route/Route or Contact headers that it has previously
      removed in the\n   interests of privacy.  There may be alternative ways (outside
      the\n   scope of this document) to perform this function that do not require\n
      \  keeping state in the privacy service (usually means that involve\n   encrypting
      and persisting the values in the signaling somehow).\n   The following procedures
      are RECOMMENDED for handling the Record-\n   Route header field of requests
      and responses, which provides\n   specialchallenges to a privacy service:\n
      \  When a privacy service is processing (on behalf of the originator) a\n   request
      that contains one or more Record-Route header field values,\n   the privacy
      service must strip these values from the request and\n   remember both the dialog
      identifiers and the ordered Record-Route\n   header field values.  As described
      above, it must also replace the\n   Contact header field with a URI indicating
      itself.  When a response\n   with the same dialog identifiers arrives at the
      privacy service, the\n   privacy service must reapply any Record-Route header
      field values to\n   the response in the same order, and it must then add a URI\n
      \  representing itself to the Record-Route header field of the response.\n   If
      the response contains Record-Route header field values of its own,\n   these
      must also be included (in order) in the Record-Route header\n   field after
      the URI representing the privacy service.\n   Note that when a privacy service
      is handling a request and providing\n   privacy on behalf of the destination
      of the request, providing\n   privacy for Record-Route headers downstream of
      the privacy service is\n   significantly more complicated.  This document recommends
      no way of\n   statefully restoring those headers if they are stripped.\n"
    title: 5.1 Header Privacy
  - contents:
    - "5.2 Session Privacy\n   If a privacy level of 'session' is requested, then
      the user has\n   requested that the privacy service anonymize the session traffic\n
      \  (e.g., for SIP telephony calls, the audio media) associated with this\n   dialog.\n
      \  The SIP specification dictates that intermediaries such as proxy\n   servers
      cannot inspect and modify message bodies.  The privacy\n   service logical role
      MUST therefore act as a back-to-back user agent\n   in order to provide media
      privacy, effectively terminating and re-\n   originating the messages that initiate
      a session (although in support\n   of session privacy the privacy service does
      not need to alter headers\n   characterizing the originator or destination when
      the request is re-\n   originated).  In order to introduce an anonymizer for
      session\n   traffic, the privacy service needs to control a middlebox [8] that\n
      \  can provide an apparent source and sink for session traffic.  The\n   details
      of the implementation of an anonymizer, and the modifications\n   that must
      be made to the Session Description Protocol (SDP [5])\n   bodies in the messages
      that initiate a session are outside the scope\n   of this document.\n   The
      risk, of course, of using such an anonymizer is that the\n   anonymizer itself
      is party to your communications.  For that reason,\n   requesting session-level
      privacy without resort to some sort of end-\n   to-end security for the session
      traffic (with RTP [6] media, for\n   example, SRTP [4]) is NOT RECOMMENDED.\n"
    title: 5.2 Session Privacy
  - contents:
    - "5.3 Applying User-Level Privacy Functions at a Privacy Service\n   If a privacy
      level of 'user' is requested, then the originating user\n   has requested that
      privacy services perform the user-level privacy\n   functions described in Section
      4.1.\n   Note that the privacy service MUST remove any non-essential\n   informational
      headers that have been added by the user agent,\n   including the Subject, Call-Info,
      Organization, User-Agent, Reply-To\n   and In-Reply-To.\n   Significantly, user-level
      privacy could entail the modification of\n   the From header, changing it from
      its original value to an anonymous\n   value.  Prior to the current issue of
      the SIP specification, the\n   modification of the values of the To and From
      headers by\n   intermediaries was not permitted, and would result in improper
      dialog\n   matching by the endpoints.  Currently, dialog matching uses only
      the\n   tags in the To and From headers, rather than the whole header fields.\n
      \  Thus, under the new rules the URI values in the To and From headers\n   themselves
      could be altered by intermediaries.  However, some legacy\n   clients might
      consider it an error condition if the value of the URI\n   in the From header
      altered between the request and the response.\n   Also, performing user-level
      privacy functions MAY entail the\n   modification of the Call-ID header, since
      the Call-ID commonly\n   contains a hostname or IP address corresponding to
      the originating\n   client.  This field is essential to dialog matching, and
      it cannot be\n   altered by intermediaries.\n   Therefore, any time that a privacy
      service needs to modify any\n   dialog-matching headers for privacy reasons,
      it SHOULD act as a\n   transparent back-to-back user agent, and it MUST persist
      the former\n   values of the dialog-matching headers.  These values MUST be
      restored\n   in any messages that are sent to the originating user agent.\n"
    title: 5.3 Applying User-Level Privacy Functions at a Privacy Service
  title: 5. Privacy Service Behavior
- contents:
  - "6. Security Considerations\n   Messages that request privacy require confidentiality
    and integrity.\n   Without integrity, the requested privacy functions could be\n
    \  downgraded or eliminated, potentially exposing identity information.\n   Without
    confidentiality, eavesdroppers on the network (or any\n   intermediaries between
    the user and the privacy service) could see\n   the very personal information
    that the user has asked the privacy\n   service to obscure.\n   All of the network-provided
    privacy functions in this document entail\n   a good deal of trust for the privacy
    service.  Users should only\n   trust privacy services that are somehow accountable
    to them.\n   Operators of privacy services should be aware that in the eyes of\n
    \  downstream entities, a privacy service will be the only source to\n   which
    anonymous messages can be traced.\n   Note that authentication mechanisms, including
    the Digest\n   authentication method described in the SIP specification, are outside\n
    \  the scope of the privacy considerations in this document.  Revealing\n   identity
    through authentication is highly selective, and may not\n   result in the compromise
    of any private information.  Obviously,\n   users that do not wish to reveal their
    identity to servers that issue\n   authentication challenges MAY elect not to
    respond to such\n   challenges.\n"
  title: 6. Security Considerations
- contents:
  - "7. IANA Considerations\n   This document defines a new SIP header field called
    \"Privacy\" that\n   allows a user agent to request a certain degree of privacy
    for a\n   message.  This behavior associated with this header is specified in\n
    \  Section 4.2.  This header has been added to the header sub-registry\n   under
    http://www.iana.org/assignments/sip-parameters.\n    Header name: Privacy\n   Compact
    form: none defined\n   This document also creates an IANA registry for values
    that populate\n   the Privacy header.  This registry should be indexed by priv-value\n
    \  tokens and should contain a short semantic description of the new\n   value.
    \ The current values of the \"Privacy\" header are as follows:\n   o  user: Request
    that privacy services provide a user-level privacy\n      function\n   o  header:
    Request that privacy services modify headers that cannot\n      be set arbitrarily
    by the user (Contact/Via).\n   o  session: Request that privacy services provide
    privacy for session\n      media\n   o  none: Privacy services must not perform
    any privacy function\n   o  critical: Privacy service must perform the specified
    services or\n      fail the request\n   New values for the \"Privacy\" header
    can only be defined by IETF\n   Consensus including RFC publication (RFC 2434).
    \ IANA registration\n   for the \"Privacy\" header field values is required along
    with the RFC\n   publication.\n   Authors of extensions to the SIP protocol that
    expose personal\n   information about the participants in sessions are advised
    against\n   extending the \"Privacy\" header - rather, it is preferable to create\n
    \  new identity mechanisms whose privacy can be managed by the user\n   agent
    without the agency of intermediaries.\n   This document also defines a new SIP
    option-tag, 'privacy', that\n   represents support for the extension defined in
    this document.\n"
  title: 7. IANA Considerations
- contents:
  - "Normative References\n   [1]  Rosenberg, J., Schulzrinne, H., Camarillo, G.,
    Johnston, A.,\n        Peterson, J., Sparks, R., Handley, M. and E. Schooler,
    \"SIP:\n        Session Initiation Protocol\", RFC 3261, June 2002.\n   [2]  Bradner,
    S., \"Key words for use in RFCs to indicate requirement\n        levels\", BCP
    14, RFC 2119, March 1997.\n   [3]  Eastlake, D. and A. Panitz, \"Reserved Top
    Level DNS Names\", RFC\n        2606, June 1999.\n"
  title: Normative References
- contents:
  - "Informative References\n   [4]  Baugher, M., McGrew, D., Oran, D., Blom, R.,
    Carrara, E.,\n        Naslund, M. and K. Normann, \"The Secure Real Time Transport\n
    \       Protocol\", Work in Progress.\n   [5]  Handley, M. and V. Jacobson, \"SDP:
    Session Description\n        Protocol\", RFC 2327, April 1998.\n   [6]  Schulzrinne,
    H., Casner, S., Frederick, R. and V. Jacobson,\n        \"RTP: A Transport Protocol
    for Real-Time Applications\", RFC\n        1889, January 1996.\n   [7]  Lennox,
    J. and H. Schulzrinne, \"CPL: A Language for User Control\n        of Internet
    Telephony Services\", Work in Progress\n   [8]  Srisuresh, P., Kuthan, J., Rosenberg,
    J., Molitor, A. and A.\n        Rayhan, \"Middlebox communication architecture
    and framework\",\n        RFC 3303, August 2002.\n"
  title: Informative References
- contents:
  - "Author's Address\n   Jon Peterson\n   NeuStar, Inc.\n   1800 Sutter St\n   Suite
    570\n   Concord, CA  94520 US\n   Phone: +1 925/363-8720\n   EMail: jon.peterson@neustar.biz\n
    \  URI:   http://www.neustar.biz/\n"
  title: Author's Address
- contents:
  - "Acknowledgments\n   The author would like to thank Allison Mankin, Rohan Mahy,
    Eric\n   Rescorla, Mark Watson, Cullen Jennings, Robert Sparks, Jonathan\n   Rosenberg,
    Ben Campbell, Tom Gray and John Elwell for their comments.\n"
  title: Acknowledgments
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2002).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
