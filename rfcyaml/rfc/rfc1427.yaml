- title: __initial_text__
  contents:
  - "                         SMTP Service Extension\n                      for Message\
    \ Size Declaration\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This RFC specifies an IAB standards track protocol for\
    \ the Internet\n   community, and requests discussion and suggestions for improvements.\n\
    \   Please refer to the current edition of the \"IAB Official Protocol\n   Standards\"\
    \ for the standardization state and status of this protocol.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: 1.  Abstract
  contents:
  - "1.  Abstract\n   This memo defines an extension to the SMTP service whereby an\
    \ SMTP\n   client and server may interact to give the server an opportunity to\n\
    \   decline to accept a message (perhaps temporarily) based on the\n   client's\
    \ estimate of the message size.\n"
- title: 2.  Introduction
  contents:
  - "2.  Introduction\n   The MIME extensions to the Internet message protocol provide\
    \ for the\n   transmission of many kinds of data which were previously unsupported\n\
    \   in Internet mail.  One expected result of the use of MIME is that\n   SMTP\
    \ will be expected to carry a much wider range of message sizes\n   than was previously\
    \ the case.  This has an impact on the amount of\n   resources (e.g., disk space)\
    \ required by a system acting as a server.\n   This memo uses the mechanism defined\
    \ in [5] to define extensions to\n   the SMTP service whereby a client (\"sender-SMTP\"\
    ) may declare the\n   size of a particular message to a server (\"receiver-SMTP\"\
    ), after\n   which the server may indicate to the client that it is or is not\n\
    \   willing to accept the message based on the declared message size and\n   whereby\
    \ a server (\"receiver-SMTP\") may declare the maximum message\n   size it is\
    \ willing to accept to a client (\"sender-SMTP\").\n"
- title: 3.  Framework for the Size Declaration Extension
  contents:
  - "3.  Framework for the Size Declaration Extension\n   The following service extension\
    \ is therefore defined:\n"
- title: (1) the name of the SMTP service extension is "Message Size
  contents:
  - "(1) the name of the SMTP service extension is \"Message Size\n    Declaration\"\
    ;\n"
- title: (2) the EHLO keyword value associated with this extension is "SIZE";
  contents:
  - '(2) the EHLO keyword value associated with this extension is "SIZE";

    '
- title: (3) one optional parameter is allowed with this EHLO keyword value, a
  contents:
  - "(3) one optional parameter is allowed with this EHLO keyword value, a\n    decimal\
    \ number indicating the fixed maximum message size in bytes\n    that the server\
    \ will accept.  The syntax of the parameter is as\n    follows, using the augmented\
    \ BNF notation of [2]:\n        size-param ::= [1*DIGIT]\n    A parameter value\
    \ of 0 (zero) indicates that no fixed maximum\n    message size is in force. \
    \ If the parameter is omitted no\n    information is conveyed about the server's\
    \ fixed maximum message\n    size;\n"
- title: (4) one optional parameter using the keyword "SIZE" is added to the MAIL
  contents:
  - "(4) one optional parameter using the keyword \"SIZE\" is added to the MAIL\n\
    \    FROM command.  The value associated with this parameter is a decimal\n  \
    \  number indicating the size of the message that is to be transmitted.\n    The\
    \ syntax of the value is as follows, using the augmented BNF\n    notation of\
    \ [2]:\n        size-value ::= 1*DIGIT\n"
- title: (5) no additional SMTP verbs are defined by this extension.
  contents:
  - "(5) no additional SMTP verbs are defined by this extension.\n   The remainder\
    \ of this memo specifies how support for the extension\n   affects the behavior\
    \ of an SMTP client and server.\n"
- title: 4.  The Message Size Declaration service extension
  contents:
  - "4.  The Message Size Declaration service extension\n   An SMTP server may have\
    \ a fixed upper limit on message size.  Any\n   attempt by a client to transfer\
    \ a message which is larger than this\n   fixed upper limit will fail.  In addition,\
    \ a server normally has\n   limited space with which to store incoming messages.\
    \  Transfer of a\n   message may therefore also fail due to a lack of storage\
    \ space, but\n   might succeed at a later time.\n   A client using the unextended\
    \ SMTP protocol defined in [1], can only\n   be informed of such failures after\
    \ transmitting the entire message to\n   the server (which discards the transferred\
    \ message).  If, however,\n   both client and server support the Message Size\
    \ Declaration service\n   extension, such conditions may be detected before any\
    \ transfer is\n   attempted.\n   An SMTP client wishing to relay a large content\
    \ may issue the EHLO\n   command to start an SMTP session, to determine if the\
    \ server supports\n   any of several service extensions.  If the server responds\
    \ with code\n   250 to the EHLO command, and the response includes the EHLO keyword\n\
    \   value SIZE, then the Message Size Declaration extension is supported.\n  \
    \ If a numeric parameter follows the SIZE keyword value of the EHLO\n   response,\
    \ it indicates the size of the largest message that the\n   server is willing\
    \ to accept.  Any attempt by a client to transfer a\n   message which is larger\
    \ than this limit will be rejected with a\n   permanent failure (552) reply code.\n\
    \   A server that supports the Message Size Declaration extension will\n   accept\
    \ the extended version of the MAIL command described below.\n   When supported\
    \ by the server, a client may use the extended MAIL\n   command (instead of the\
    \ MAIL command as defined in [1]) to declare an\n   estimate of the size of a\
    \ message it wishes to transfer.  The server\n   may then return an appropriate\
    \ error code if it determines that an\n   attempt to transfer a message of that\
    \ size would fail.\n"
- title: 5.  Definitions
  contents:
  - "5.  Definitions\n   The message size is defined as the number of octets, including\
    \ CR-LF\n   pairs, but not the SMTP DATA command's terminating dot or doubled\n\
    \   quoting dots, to be transmitted by the SMTP client after receiving\n   reply\
    \ code 354 to the DATA command.\n   The fixed maximum message size is defined\
    \ as the message size of the\n   largest message that a server is ever willing\
    \ to accept.  An attempt\n   to transfer any message larger than the fixed maximum\
    \ message size\n   will always fail.  The fixed maximum message size may be an\n\
    \   implementation artifact of the SMTP server, or it may be chosen by\n   the\
    \ administrator of the server.\n   The declared message size is defined as a client's\
    \ estimate of the\n   message size for a particular message.\n"
- title: 6.  The extended MAIL command
  contents:
  - "6.  The extended MAIL command\n   The extended MAIL command is issued by a client\
    \ when it wishes to\n   inform a server of the size of the message to be sent.\
    \  The extended\n   MAIL command is identical to the MAIL command as defined in\
    \ [1],\n   except that a SIZE parameter appears after the address.\n   The complete\
    \ syntax of this extended command is defined in [5]. The\n   esmtp-keyword is\
    \ \"SIZE\" and the syntax for esmtp-value is given by\n   the syntax for size-value\
    \ shown above.\n   The value associated with the SIZE parameter is a decimal\n\
    \   representation of the declared message size in octets.  This number\n   should\
    \ include the message header, body, and the CR-LF sequences\n   between lines,\
    \ but not the SMTP DATA command's terminating dot or\n   doubled quoting dots.\n\
    \   Ideally, the declared message size is equal to the true message size.\n  \
    \ However, since exact computation of the message size may be\n   infeasable,\
    \ the client may use a heuristically-derived estimate.\n   Such heuristics should\
    \ be chosen so that the declared message size is\n   usually larger than the actual\
    \ message size. (This has the effect of\n   making the counting or non-counting\
    \ of SMTP DATA dots largely an\n   academic point.)\n   NOTE: Servers MUST NOT\
    \ use the SIZE parameter to determine end of\n   content in the DATA command.\n"
- title: 6.1  Server action on receipt of the extended MAIL command
  contents:
  - "6.1  Server action on receipt of the extended MAIL command\n   Upon receipt of\
    \ an extended MAIL command containing a SIZE parameter,\n   a server should determine\
    \ whether the declared message size exceeds\n   its fixed maximum message size.\
    \  If the declared message size is\n   smaller than the fixed maximum message\
    \ size, the server may also wish\n   to determine whether sufficient resources\
    \ are available to buffer a\n   message of the declared message size and to maintain\
    \ it in stable\n   storage, until the message can be delivered or relayed to each\
    \ of its\n   recipients.\n   A server may respond to the extended MAIL command\
    \ with any of the\n   error codes defined in [1] for the MAIL command.  In addition,\
    \ one of\n   the following error codes may be returned:\n"
- title: (1) If the server currently lacks sufficient resources to accept a
  contents:
  - "(1) If the server currently lacks sufficient resources to accept a\n    message\
    \ of the indicated size, but may be able to accept the message\n    at a later\
    \ time, it responds with code \"452 insufficient system\n    storage\".\n"
- title: (2) If the indicated size is larger than the server's fixed maximum
  contents:
  - "(2) If the indicated size is larger than the server's fixed maximum\n    message\
    \ size, the server responds with code \"552 message size\n    exceeds fixed maximium\
    \ message size\".\n   A server is permitted, but not required, to accept a message\
    \ which\n   is, in fact, larger than declared in the extended MAIL command, such\n\
    \   as might occur if the client employed a size-estimation heuristic\n   which\
    \ was inaccurate.\n"
- title: 6.2  Client action on receiving response to extended MAIL command
  contents:
  - "6.2  Client action on receiving response to extended MAIL command\n   The client,\
    \ upon receiving the server's response to the extended MAIL\n   command, acts\
    \ as follows:\n"
- title: (1) If the code "452 insufficient system storage" is returned, the
  contents:
  - "(1) If the code \"452 insufficient system storage\" is returned, the\n    client\
    \ should next send either a RSET command (if it wishes to\n    attempt to send\
    \ other messages) or a QUIT command. The client should\n    then repeat the attempt\
    \ to send the message to the server at a later\n    time.\n"
- title: (2) If the code "552 message exceeds fixed maximum message size" is
  contents:
  - "(2) If the code \"552 message exceeds fixed maximum message size\" is\n    received,\
    \ the client should immediately send either a RSET command\n    (if it wishes\
    \ to attempt to send additional messages), or a QUIT\n    command.  The client\
    \ should then declare the message undeliverable\n    and return appropriate notification\
    \ to the sender (if a sender\n    address was present in the MAIL command).\n\
    \   A successful (250) reply code in response to the extended MAIL\n   command\
    \ does not constitute an absolute guarantee that the message\n   transfer will\
    \ succeed.  SMTP clients using the extended MAIL command\n   must still be prepared\
    \ to handle both temporary and permanent error\n   reply codes (including codes\
    \ 452 and 552), either immediately after\n   issuing the DATA command, or after\
    \ transfer of the message.\n"
- title: 6.3  Messages larger than the declared size.
  contents:
  - "6.3  Messages larger than the declared size.\n   Once a server has agreed (via\
    \ the extended MAIL command) to accept a\n   message of a particular size, it\
    \ should not return a 552 reply code\n   after the transfer phase of the DATA\
    \ command, unless the actual size\n   of the message transferred is greater than\
    \ the declared message size.\n   A server may also choose to accept a message\
    \ which is somewhat larger\n   than the declared message size.\n   A client is\
    \ permitted to declare a message to be smaller than its\n   actual size.  However,\
    \ in this case, a successful (250) reply code is\n   no assurance that the server\
    \ will accept the message or has\n   sufficient resources to do so.  The server\
    \ may reject such a message\n   after its DATA transfer.\n"
- title: 6.4  Per-recipient rejection based on message size.
  contents:
  - "6.4  Per-recipient rejection based on message size.\n   A server that implements\
    \ this extension may return a 452 or 552 reply\n   code in response to a RCPT\
    \ command, based on its unwillingness to\n   accept a message of the declared\
    \ size for a particular recipient.\n   (1) If a 452 code is returned, the client\
    \ may requeue the message for\n       later delivery to the same recipient.\n\
    \   (2) If a 552 code is returned, the client may not requeue the message\n  \
    \     for later delivery to the same recipient.\n"
- title: 7.  Minimal usage
  contents:
  - "7.  Minimal usage\n   A \"minimal\" client may use this extension to simply compare\
    \ its\n   (perhaps estimated) size of the message that it wishes to relay, with\n\
    \   the server's fixed maximum message size (from the parameter to the\n   SIZE\
    \ keyword in the EHLO response), to determine whether the server\n   will ever\
    \ accept the message.  Such an implementation need not\n   declare message sizes\
    \ via the extended MAIL command.  However,\n   neither will it be able to discover\
    \ temporary limits on message size\n   due to server resource limitations, nor\
    \ per-recipient limitations on\n   message size.\n   A minimal server that employs\
    \ this service extension may simply use\n   the SIZE keyword value to inform the\
    \ client of the size of the\n   largest message it will accept, or to inform the\
    \ client that there is\n   no fixed limit on message size.  Such a server must\
    \ accept the\n   extended MAIL command and return a 552 reply code if the client's\n\
    \   declared size exceeds its fixed size limit (if any), but it need not\n   detect\
    \ \"temporary\" limitations on message size.\n   The numeric parameter to the\
    \ EHLO SIZE keyword is optional.  If the\n   parameter is omitted entirely it\
    \ indicates that the server does not\n   advertise a fixed maximum message size.\
    \  A server that returns the\n   SIZE keyword with no parameter in response to\
    \ the EHLO command may\n   not issue a positive (250) response to an extended\
    \ MAIL command\n   containing a SIZE specification without first checking to see\
    \ if\n   sufficient resources are available to transfer a message of the\n   declared\
    \ size, and to retain it in stable storage until it can be\n   relayed or delivered\
    \ to its recipients.  If possible, the server\n   should actually reserve sufficient\
    \ storage space to transfer the\n   message.\n"
- title: 8. Example
  contents:
  - "8. Example\n   The following example illustrates the use of size declaration\
    \ with\n   some permanent and temporary failures.\n      S: <wait for connection\
    \ on TCP port 25>\n      C: <open connection to server>\n      S: 220 sigurd.innosoft.com\
    \ -- Server SMTP (PMDF V4.2-6 #1992)\n      C: EHLO ymir.claremont.edu\n     \
    \ S: 250-sigurd.innosoft.com\n      S: 250-EXPN\n      S: 250-HELP\n      S: 250\
    \ SIZE 1000000\n      C: MAIL FROM:<ned@thor.innosoft.com> SIZE=500000\n     \
    \ S: 250 Address Ok.\n      C: RCPT TO:<ned@innosoft.com>\n      S: 250 ned@innosoft.com\
    \ OK; can accomodate 500000 byte message\n      C: RCPT TO:<ned@ymir.claremont.edu>\n\
    \      S: 552 channel size limit exceeded: ned@YMIR.CLAREMONT.EDU\n      C: RCPT\
    \ TO:<ned@hmcvax.claremont.edu>\n      S: 452 insufficient channel storage: ned@hmcvax.CLAREMONT.EDU\n\
    \      C: DATA\n      S: 354 Send message, ending in CRLF.CRLF.\n       ...\n\
    \      C: .\n      S: 250 Some recipients OK\n      C: QUIT\n      S: 250 Goodbye\n"
- title: 9. Security considerations
  contents:
  - "9. Security considerations\n   The size declaration extensions described in this\
    \ memo can\n   conceivably be used to facilitate crude service denial attacks.\n\
    \   Specifically, both the information contained in the SIZE parameter\n   and\
    \ use of the extended MAIL command make it somewhat quicker and\n   easier to\
    \ devise an efficacious service denial attack.  However,\n   unless implementations\
    \ are very weak, these extensions do not create\n   any vulnerability that has\
    \ not always existed with SMTP. In addition,\n   no issues are addressed involving\
    \ trusted systems and possible\n   release of information via the mechanisms described\
    \ in this RFC.\n"
- title: 10.  Acknowledgements
  contents:
  - "10.  Acknowledgements\n   This document was derived from an earlier Working Group\
    \ draft\n   contribution.  Jim Conklin, Dave Crocker, Neil Katin, Eliot Lear,\n\
    \   Marshall T. Rose, and Einar Stefferud provided extensive comments in\n   response\
    \ to earlier drafts of both this and the previous memo.\n"
- title: 11.  References
  contents:
  - "11.  References\n   [1] Postel, J., \"Simple Mail Transfer Protocol\", STD 10,\
    \ RFC 821,\n       USC/Information Sciences Institute, August 1982.\n   [2] Crocker,\
    \ D., \"Standard for the Format of ARPA Internet Text\n       Messages\", STD\
    \ 11, RFC 822, UDEL, August 1982.\n   [3] Borenstein, N., and N. Freed, \"Multipurpose\
    \ Internet Mail\n       Extensions\", RFC 1341, Bellcore, Innosoft, June 1992.\n\
    \   [4] Moore, K., \"Representation of Non-ASCII Text in Internet Message\n  \
    \     Headers\", RFC 1342, University of Tennessee, June 1992.\n   [5] Klensin,\
    \ J., WG Chair, Freed, N., Editor, Rose, M., Stefferud,\n       E., and D. Crocker,\
    \ \"SMTP Service Extensions\" RFC 1425, United\n       Nations University, Innosoft\
    \ International, Inc., Dover Beach\n       Consulting, Inc., Network Management\
    \ Associates, Inc., The Branch\n       Office, February 1993.\n   [6] Partridge,\
    \ C., \"Mail Routing and the Domain System\", RFC 974,\n       BBN, January 1986.\n"
- title: 12.  Chair, Editor, and Author's Addresses
  contents:
  - "12.  Chair, Editor, and Author's Addresses\n       John Klensin, WG Chair\n \
    \      United Nations University\n       PO Box 500, Charles Street Station\n\
    \       Boston, MA 02114-0500  USA\n       Phone: +1 617 227 8747\n       Fax:\
    \ +1 617 491 6266\n       Email: klensin@infoods.unu.edu\n       Ned Freed, Editor\n\
    \       Innosoft International, Inc.\n       250 West First Street, Suite 240\n\
    \       Claremont, CA 91711  USA\n       Phone: +1 909 624 7907\n       Fax: +1\
    \ 909 621 5319\n       Email: ned@innosoft.com\n       Keith Moore\n       Computer\
    \ Science Dept.\n       University of Tennessee\n       107 Ayres Hall\n     \
    \  Knoxville, TN 37996-1301  USA\n       Email: moore@cs.utk.edu\n"
