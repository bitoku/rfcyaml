- title: __initial_text__
  contents:
  - '                   Abstract Syntax Notation X (ASN.X)

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2007).\n"
- title: Abstract
  contents:
  - "Abstract\n   Abstract Syntax Notation X (ASN.X) is a semantically equivalent\n\
    \   Extensible Markup Language (XML) representation for Abstract Syntax\n   Notation\
    \ One (ASN.1) specifications.  ASN.X completely avoids the\n   numerous ambiguities\
    \ inherent in the ASN.1 language; therefore,\n   specifications written in ASN.X\
    \ are much easier to parse and manage\n   than original ASN.1 specifications.\
    \  ASN.X, together with the Robust\n   XML Encoding Rules (RXER), constitutes\
    \ a schema language for XML\n   documents that offers, through other ASN.1 encoding\
    \ rules,\n   alternative compact binary encodings for XML instance documents.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \   2. Conventions .....................................................5\n  \
    \ 3. General Considerations ..........................................6\n    \
    \  3.1. Annotations ................................................7\n   4. ModuleDefinition\
    \ Translation ....................................8\n   5. Translation of Assignments\
    \ .....................................11\n      5.1. Referencing Named Constructs\
    \ ..............................11\n      5.2. Importing Namespaces ......................................12\n\
    \      5.3. TypeAssignment Translation ................................14\n  \
    \    5.4. ValueAssignment and XMLValueAssignment Translation ........14\n    \
    \  5.5. ValueSetTypeAssignment Translation ........................15\n      5.6.\
    \ ObjectClassAssignment Translation .........................15\n      5.7. ObjectAssignment\
    \ Translation ..............................16\n      5.8. ObjectSetAssignment\
    \ Translation ...........................16\n      5.9. ParameterizedAssignment\
    \ Translation .......................17\n   6. Translation of Types ...........................................17\n\
    \      6.1. Identifier Replacement ....................................17\n  \
    \    6.2. DefinedType Translation ...................................18\n    \
    \  6.3. Translation of Built-in Types .............................20\n      6.4.\
    \ BitStringType Translation .................................21\n      6.5. IntegerType\
    \ Translation ...................................22\n      6.6. EnumeratedType\
    \ Translation ................................24\n      6.7. PrefixedType Translation\
    \ ..................................25\n           6.7.1. Short Form TaggedType\
    \ Translation ..................28\n           6.7.2. Long Form TaggedType Translation\
    \ ...................29\n      6.8. SelectionType Translation .................................30\n\
    \      6.9. InstanceOfType Translation ................................31\n  \
    \    6.10. ObjectClassFieldType Translation .........................31\n    \
    \  6.11. TypeFromObject and ValueSetFromObjects Translation .......32\n      6.12.\
    \ Translation of Combining Types ...........................32\n           6.12.1.\
    \ NamedType Translation .............................32\n           6.12.2. SequenceType\
    \ Translation ..........................36\n           6.12.3. SetType Translation\
    \ ...............................38\n           6.12.4. ChoiceType Translation\
    \ ............................39\n           6.12.5. Translation of UNION Types\
    \ ........................40\n           6.12.6. SequenceOfType Translation ........................41\n\
    \           6.12.7. Translation of LIST Types .........................42\n  \
    \         6.12.8. SetOfType Translation .............................42\n    \
    \       6.12.9. Effect of Insertion Encoding Instructions .........43\n      6.13.\
    \ Translation of Constrained Types .........................43\n           6.13.1.\
    \ Constraint Translation ............................46\n           6.13.2. UserDefinedConstraint\
    \ Translation .................46\n           6.13.3. TableConstraint Translation\
    \ .......................47\n           6.13.4. ContentsConstraint Translation\
    \ ....................49\n           6.13.5. ExceptionSpec Translation .........................50\n\
    \   7. Translation of Values ..........................................51\n  \
    \    7.1. Translation of Literal Values .............................53\n    \
    \  7.2. Translation of Notational Values ..........................54\n      \
    \     7.2.1. DefinedValue Translation ...........................56\n        \
    \   7.2.2. BuiltinValue Translation ...........................57\n          \
    \ 7.2.3. ValueFromObject Translation ........................60\n           7.2.4.\
    \ ObjectClassFieldValue Translation ..................60\n   8. Translation of\
    \ Value Sets ......................................61\n      8.1. ElementSetSpecs\
    \ Translation ...............................62\n      8.2. ElementSetSpec Translation\
    \ ................................62\n      8.3. SubtypeElements Translation ...............................63\n\
    \           8.3.1. ValueRange Translation .............................64\n  \
    \         8.3.2. InnerTypeConstraints Translation ...................65\n   9.\
    \ Translation of Object Classes ..................................66\n      9.1.\
    \ DefinedObjectClass Translation ............................66\n      9.2. ObjectClassDefn\
    \ Translation ...............................68\n           9.2.1. TypeFieldSpec\
    \ Translation ..........................68\n           9.2.2. FixedTypeValueFieldSpec\
    \ Translation ................69\n           9.2.3. FixedTypeValueSetFieldSpec\
    \ Translation .............70\n           9.2.4. VariableTypeValueFieldSpec Translation\
    \ .............71\n           9.2.5. VariableTypeValueSetFieldSpec Translation\
    \ ..........73\n           9.2.6. FieldName Translation ..............................74\n\
    \           9.2.7. ObjectFieldSpec Translation ........................75\n  \
    \         9.2.8. ObjectSetFieldSpec Translation .....................76\n   10.\
    \ Translation of Objects ........................................77\n      10.1.\
    \ DefinedObject Translation ................................77\n      10.2. ObjectDefn\
    \ Translation ...................................78\n      10.3. ObjectFromObject\
    \ Translation .............................80\n   11. Translation of Object Sets\
    \ ....................................80\n      11.1. DefinedObjectSet Translation\
    \ .............................81\n      11.2. ObjectSetElements Translation ............................82\n\
    \           11.2.1. ObjectSetFromObjects Translation ..................83\n  \
    \ 12. Translation of Information From Objects .......................83\n   13.\
    \ Translation of Parameterized Definitions ......................83\n   14. EncodingControlSections\
    \ Translation ...........................93\n   15. Security Considerations .......................................94\n\
    \   16. Acknowledgements ..............................................94\n  \
    \ 17. References ....................................................95\n    \
    \  17.1. Normative References .....................................95\n      17.2.\
    \ Informative References ...................................97\n   Appendix A.\
    \ ASN.1 for ASN.X .......................................95\n   Appendix B. ASN.X\
    \ for ASN.X ......................................115\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   A full parser for the Abstract Syntax Notation One (ASN.1)\
    \ language\n   [X.680][X.680-1][X.681][X.682][X.683] is difficult to implement\
    \ due\n   to numerous ambiguities in the notation.  For example, certain\n   notations\
    \ for a Value are syntactically indistinguishable from\n   notation for a ValueSet,\
    \ Object, ObjectSet, DummyReference, or\n   SimpleTableConstraint.  An ObjectClassAssignment,\
    \ ObjectAssignment,\n   or ObjectSetAssignment resembles respectively a TypeAssignment,\n\
    \   ValueAssignment, or ValueSetTypeAssignment.  A\n   FixedTypeValueFieldSpec\
    \ or FixedTypeValueSetFieldSpec resembles\n   respectively an ObjectFieldSpec\
    \ or ObjectSetFieldSpec, and an\n   ObjectClassFieldType resembles InformationFromObjects\
    \ notation.  In\n   general, such ambiguities can only be resolved once the entire\n\
    \   specification has been parsed.  There are other notations that are\n   not\
    \ mutually ambiguous but still require several lexical tokens to be\n   scanned\
    \ before they can be distinguished from each other.  The\n   difficulty of parsing\
    \ ASN.1 is an impediment to its wider adoption.\n   This document defines a semantically\
    \ equivalent Extensible Markup\n   Language (XML) [XML10][XML11] representation\
    \ for ASN.1 specifications\n   called Abstract Syntax Notation X (ASN.X).  An\
    \ ASN.X module is a\n   well-formed and valid XML document conforming to XML namespaces\n\
    \   [XMLNS10][XMLNS11].  ASN.X completely avoids the inherent ambiguities\n  \
    \ of the ASN.1 language; therefore, specifications written in ASN.X are\n   much\
    \ easier to parse and manage than original ASN.1 specifications.\n   For example,\
    \ any conformant XML processor forms the basis of an ASN.1\n   toolkit.\n   ASN.X,\
    \ together with the Robust XML Encoding Rules (RXER) [RXER],\n   constitutes a\
    \ schema language for XML documents that offers, through\n   other ASN.1 encoding\
    \ rules, alternative compact binary encodings for\n   XML instance documents conforming\
    \ to an ASN.X specification.  ASN.X\n   definitions can also incorporate type,\
    \ element, and attribute\n   definitions from XML Schema [XSD1] documents, RELAX\
    \ NG [RNG]\n   documents, or Document Type Definitions (DTDs) [XML10][XML11].\n\
    \   ASN.X is defined in terms of rules for translating from an ASN.1\n   specification.\
    \  This does not preclude an ASN.X module being written\n   directly without a\
    \ pre-existing ASN.1 module; however, such an ASN.X\n   module is considered valid\
    \ if and only if there exists, in principle,\n   an ASN.1 module that when translated\
    \ would yield the ASN.X module.\n   The format for ASN.X has also been designed\
    \ so that the content of an\n   ASN.X module conforms to the RXER encoding of\
    \ an abstract value of an\n   ASN.1 type, the ModuleDefinition type, presented\
    \ in Appendix A.  This\n   means that it is possible to decode an ASN.X module\
    \ using an RXER\n   decoder and then re-encode the abstract value (for storage\
    \ or\n   transmission) using any of the other encoding rules for ASN.1.  Thus,\n\
    \   the \"X\" in ASN.X can be regarded as standing for either XML or RXER,\n \
    \  or more generally, for any set of ASN.1 encoding rules.\n   The ASN.X translation\
    \ of the ASN.1 module in Appendix A is presented\n   in Appendix B.\n"
- title: 2.  Conventions
  contents:
  - "2.  Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", and \"MAY\"\
    \ in this document are\n   to be interpreted as described in BCP 14, RFC 2119\
    \ [BCP14].  The key\n   word \"OPTIONAL\" is exclusively used with its ASN.1 meaning.\n\
    \   Throughout this document \"type\" shall be taken to mean an ASN.1 type,\n\
    \   and \"value\" shall be taken to mean an ASN.1 abstract value.\n   A reference\
    \ to an ASN.1 production [X.680] (e.g., Type, NamedType) is\n   a reference to\
    \ the text in an ASN.1 specification corresponding to\n   that production.\n \
    \  The description of the translation of an ASN.1 module into an ASN.X\n   module\
    \ makes use of definitions from the XML Information Set\n   (Infoset) [INFOSET].\
    \  In particular, information item property names\n   follow the Infoset convention\
    \ of being shown in square brackets,\n   e.g., [local name].  Literal values of\
    \ Infoset properties are\n   enclosed in double quotes; however, the double quotes\
    \ are not part of\n   the property values.  In the sections that follow, \"information\
    \ item\"\n   will be abbreviated to \"item\", e.g., \"element information item\"\
    \ is\n   abbreviated to \"element item\".  Element items will be referred to by\n\
    \   their [local name] in angle brackets, e.g., \"the <type> element item\"\n\
    \   means the element item with the [local name] \"type\".  Attribute items\n\
    \   will be referred to by their [local name], e.g., \"the type attribute\n  \
    \ item\" means the attribute item with the [local name] \"type\".\n   This document\
    \ uses the namespace prefix \"asnx:\" to stand for the\n   namespace name \"urn:ietf:params:xml:ns:asnx\"\
    , though in practice any\n   valid namespace prefix is permitted in ASN.X.\n \
    \  Encoding instructions [X.680-1] referenced by name in this\n   specification\
    \ are encoding instructions for RXER [RXEREI].  The\n   associated provisions\
    \ do not apply to encoding instructions for other\n   encoding rules that happen\
    \ to have the same name.\n   Code points for characters [UNICODE] are expressed\
    \ using the Unicode\n   convention U+n, where n is four to six hexadecimal digits,\
    \ e.g., the\n   space character is U+0020.\n"
- title: 3.  General Considerations
  contents:
  - "3.  General Considerations\n   ASN.X is defined in terms of rules for translating\
    \ an ASN.1 module\n   into a synthetic Infoset.  This synthetic Infoset is then\
    \ serialized\n   into a well-formed and valid XML document (the ASN.X module)\
    \ in the\n   same manner that the synthetic Infoset for a non-canonical RXER\n\
    \   encoding is serialized into an XML document (see Section 6.12 of the\n   specification\
    \ for RXER [RXER]).\n      Aside: The serialization permits CDATA sections, character\n\
    \      references, and parsed entity references.  However, note that an\n    \
    \  ASN.X module may be transferred as data in a protocol and that\n      some\
    \ protocols disallow entity references.\n   Apart from the [document element]\
    \ of the document item for an ASN.X\n   module, the translation of some ASN.1\
    \ construct belongs to the\n   [children] or [attributes] of an enclosing element\
    \ item.\n   Where the translation of the construct is an element item, it is\n\
    \   appended to the [children] of the enclosing element item.  Elements\n   MUST\
    \ be appended to the [children] of the enclosing element item in\n   the order\
    \ described.  Translators MAY add white space character items\n   (i.e., U+0020,\
    \ U+0009, U+000D and U+000A) to the [children] of any\n   element item (to improve\
    \ the layout) except element items with the\n   [local name] \"literalValue\"\
    , \"fieldName\", or \"restrictBy\".\n      Aside: White space in the [children]\
    \ of <fieldName> and\n      <restrictBy> element items is explicitly covered under\
    \ their\n      respective descriptions.\n   Where the translation of the construct\
    \ is an attribute item, it is\n   added to the [attributes] of the enclosing element\
    \ item.  The order\n   of attribute items is not significant.  Translators MAY\
    \ add leading\n   and trailing white space characters to the [normalized value]\
    \ of any\n   attribute item except an attribute item with the [local name]\n \
    \  \"literalValue\".\n      Aside: An attribute or element item with the [local\
    \ name]\n      \"literalValue\" holds an RXER Infoset translation of an abstract\n\
    \      value, and white space characters may be significant in that\n      abstract\
    \ value.  In most cases, RXER itself permits optional\n      leading and trailing\
    \ white space characters in the Infoset\n      translation.\n   Translators MAY\
    \ add comment and processing instruction (PI) items to\n   the [children] of any\
    \ element item except an element item with the\n   [local name] \"literalValue\"\
    .\n      Aside: In most cases, RXER itself permits comment and PI items in\n \
    \     the [children] of the element items with the [local name]\n      \"literalValue\"\
    .\n      Aside: Note that an ASN.X module may be transferred as data in a\n  \
    \    protocol and that some protocols disallow processing instructions.\n   The\
    \ [in-scope namespaces] and [namespace attributes] for\n   <literalValue> and\
    \ <restrictBy> element items are determined\n   according to Section 6.10 of the\
    \ specification for RXER [RXER].  The\n   [in-scope namespaces] and [namespace\
    \ attributes] for other element\n   items in the translation are determined according\
    \ to Section 6.2.2.1\n   of the specification for RXER.\n   The [namespace name]\
    \ of any element item or attribute item generated\n   by the translation from\
    \ an ASN.1 specification has no value unless\n   specified otherwise.  In those\
    \ cases where the [namespace name] of an\n   element item has a value, the [prefix]\
    \ of the element item is\n   determined according to Section 6.2.2.2 of the specification\
    \ for\n   RXER.  In those cases where the [namespace name] of an attribute item\n\
    \   has a value, the [prefix] of the attribute item is determined\n   according\
    \ to Section 6.2.3.1 of the specification for RXER.\n      Aside: Non-canonical\
    \ RXER allows all valid namespace prefixes and\n      all valid placements for\
    \ their corresponding namespace declaration\n      attributes.\n   Whenever an\
    \ element item is added to the [children] of an enclosing\n   element item, the\
    \ enclosing element item becomes the [parent] of the\n   element item.\n   Whenever\
    \ an attribute item is added to the [attributes] of an element\n   item, the element\
    \ item becomes the [owner element] of the attribute\n   item.  For each attribute\
    \ item, the [specified] property is set to\n   true, the [attribute type] has\
    \ no value, and the value of the\n   [references] property is set to unknown.\n"
- title: 3.1.  Annotations
  contents:
  - "3.1.  Annotations\n   In a number of places, as indicated in subsequent sections,\
    \ the\n   translator is permitted to add an element item with the [local name]\n\
    \   \"annotation\".  The [children] and [attributes] of the <annotation>\n   element\
    \ item are at the discretion of the translator.\n   Typical uses of the <annotation>\
    \ element item would be to hold\n   comments from the ASN.1 specification that\
    \ are normative in nature,\n   e.g., a comment in a user-defined constraint, or\
    \ to hold directives\n   for an ASN.1 compiler.\n   Free text or XML comments\
    \ in an <annotation> element will be\n   preserved in a Canonical RXER (CRXER)\
    \ encoding [RXER] (because the\n   corresponding ASN.1 type for the <annotation>\
    \ element item is the\n   Markup type [RXER]), while XML comments outside <annotation>\
    \ elements\n   will not be preserved.\n   Vendors using the <annotation> element\
    \ items to hold ASN.1 compiler\n   directives (as attributes or child elements\
    \ of the <annotation>\n   element) SHOULD use element or attribute names that\
    \ are qualified\n   with a namespace name specific to the vendor.\n"
- title: 4.  ModuleDefinition Translation
  contents:
  - "4.  ModuleDefinition Translation\n   The translation of a ModuleDefinition [X.680]\
    \ (an ASN.1 module) is an\n   element item with the [local name] \"module\" and\
    \ the [namespace name]\n   \"urn:ietf:params:xml:ns:asnx\" (i.e., an <asnx:module>\
    \ element item).\n   The element item is typically the [document element] of a\
    \ document\n   item.\n   An attribute item with the [local name] \"format\" and\n\
    \   [normalized value] \"1.0\" MAY be added to the [attributes] of the\n   <asnx:module>\
    \ element item.\n   An ASN.1 module has a schema identity URI if it contains a\n\
    \   SCHEMA-IDENTITY encoding instruction, in which case the schema\n   identity\
    \ URI is the character string specified by the AnyURIValue of\n   the SCHEMA-IDENTITY\
    \ encoding instruction.\n   If the ASN.1 module being translated has a schema\
    \ identity URI, then\n   an attribute item with the [local name] \"schemaIdentity\"\
    \ SHALL be\n   added to the [attributes] of the <asnx:module> element item.  The\n\
    \   [normalized value] of this attribute item is the schema identity URI\n   of\
    \ the module.\n   If the target namespace [RXEREI] for the ASN.1 module is not\
    \ absent,\n   then an attribute item with the [local name] \"targetNamespace\"\
    \ SHALL\n   be added to the [attributes] of the <asnx:module> element item.  The\n\
    \   [normalized value] of this attribute item is the target namespace of\n   the\
    \ module.\n      Aside: An ASN.1 module has a target namespace if it contains\
    \ a\n      TARGET-NAMESPACE encoding instruction.\n   If the ASN.1 module contains\
    \ a TARGET-NAMESPACE encoding instruction\n   that specifies a Prefix, then an\
    \ attribute item with the [local name]\n   \"targetPrefix\" SHALL be added to\
    \ the [attributes] of the\n   <asnx:module> element item.  The [normalized value]\
    \ of this attribute\n   item is the character string specified by the NCNameValue\
    \ in the\n   Prefix.\n   In examples in the remainder of this document, the namespace\
    \ prefix\n   \"tns:\" is used to stand for the target namespace of the module\
    \ being\n   translated.\n   An attribute item with the [local name] \"name\" SHALL\
    \ be added to the\n   [attributes] of the <asnx:module> element item.  The\n \
    \  [normalized value] of this attribute item is the modulereference in\n   the\
    \ ModuleIdentifier in the ModuleDefinition.\n   If the DefinitiveIdentifier in\
    \ the ModuleIdentifier in the\n   ModuleDefinition is not empty, then an attribute\
    \ item with the\n   [local name] \"identifier\" SHALL be added to the [attributes]\
    \ of the\n   <asnx:module> element item.  The [normalized value] of this attribute\n\
    \   item is the RXER character data translation [RXER] of the\n   DefinitiveIdentifier.\n\
    \   If the TagDefault in the ModuleDefinition is empty, then an attribute\n  \
    \ item with the [local name] \"tagDefault\" and [normalized value]\n   \"explicit\"\
    \ SHALL be added to the [attributes] of the <asnx:module>\n   element item.\n\
    \   If the TagDefault in the ModuleDefinition is not empty and the first\n   keyword\
    \ in the TagDefault is not \"AUTOMATIC\", then an attribute item\n   with the\
    \ [local name] \"tagDefault\" SHALL be added to the [attributes]\n   of the <asnx:module>\
    \ element item.  The [normalized value] of this\n   attribute item is the first\
    \ keyword in the TagDefault with all\n   letters downcased, i.e., \"explicit\"\
    \ or \"implicit\".\n   If the TagDefault in the ModuleDefinition is not empty\
    \ and the first\n   keyword in the TagDefault is \"AUTOMATIC\", then an attribute\
    \ item with\n   the [local name] \"tagDefault\" and [normalized value] \"automatic\"\
    \ MAY\n   be added to the [attributes] of the <asnx:module> element item.\n  \
    \ If the ExtensionDefault in the ModuleDefinition is not empty, then an\n   attribute\
    \ item with the [local name] \"extensibilityImplied\" and\n   [normalized value]\
    \ \"true\" or \"1\" SHALL be added to the [attributes]\n   of the <asnx:module>\
    \ element item.\n   If the ExtensionDefault in the ModuleDefinition is empty,\
    \ then an\n   attribute item with the [local name] \"extensibilityImplied\" and\n\
    \   [normalized value] \"false\" or \"0\" MAY be added to the [attributes] of\n\
    \   the <asnx:module> element item.\n   An element item with the [local name]\
    \ \"annotation\" MAY be added to\n   the [children] of the <asnx:module> element\
    \ item.\n   The translation of each Assignment in the AssignmentList in the\n\
    \   ModuleBody in the ModuleDefinition of the module being translated\n   SHALL\
    \ be appended to the [children] of the <asnx:module> element\n   item.\n   If\
    \ the EncodingControlSections instance in the ModuleDefinition\n   contains an\
    \ EncodingControlSection for RXER, then the translation of\n   each NamedType\
    \ in a TopLevelComponent [RXEREI] nested in the\n   EncodingInstructionAssignmentList\
    \ SHALL be added to the [children] of\n   the <asnx:module> element item.  The\
    \ relative order of the top-level\n   components [RXEREI] SHOULD be preserved\
    \ in the translation; however,\n   the translations of the top-level components\
    \ MAY be interspersed with\n   the translations of the assignments in the AssignmentList.\n\
    \   The translation of the EncodingControlSections instance in the\n   ModuleDefinition\
    \ of the module being translated SHALL be appended to\n   the [children] of the\
    \ <asnx:module> element item.\n   Example\n      MyModule DEFINITIONS\n      IMPLICIT\
    \ TAGS\n      EXTENSIBILITY IMPLIED ::=\n      BEGIN\n      MyType ::= INTEGER\n\
    \      ENCODING-CONTROL RXER\n          SCHEMA-IDENTITY  \"http://example.com/id/MyModule\"\
    \n          TARGET-NAMESPACE \"http://example.com/ns/MyModule\"\n          COMPONENT\
    \ myElement INTEGER\n      END\n      <asnx:module xmlns:asnx=\"urn:ietf:params:xml:ns:asnx\"\
    \n                   name=\"MyModule\"\n                   schemaIdentity=\"http://example.com/id/MyModule\"\
    \n                   targetNamespace=\"http://example.com/ns/MyModule\"\n    \
    \               tagDefault=\"implicit\"\n                   extensibilityImplied=\"\
    true\">\n       <namedType name=\"MyType\" type=\"asnx:INTEGER\"/>\n       <element\
    \ name=\"myElement\" type=\"asnx:INTEGER\"/>\n      </asnx:module>\n"
- title: 5.  Translation of Assignments
  contents:
  - '5.  Translation of Assignments

    '
- title: 5.1.  Referencing Named Constructs
  contents:
  - "5.1.  Referencing Named Constructs\n   An Assignment in ASN.1 associates a reference\
    \ name with a Type,\n   Value, ValueSet, ObjectClass, Object, or ObjectSet.  For\
    \ ASN.X, an\n   Assignment is also regarded as associating an expanded name\n\
    \   [XMLNS10][XMLNS11] with the Type, Value, ValueSet, ObjectClass,\n   Object,\
    \ or ObjectSet.  ASN.X uses these expanded names, rendered as\n   qualified names\
    \ [XMLNS10][XMLNS11], in place of the references in an\n   ASN.1 specification.\n\
    \   In every case, the local name of the expanded name is the\n   typereference,\
    \ valuereference, objectclassreference, objectreference,\n   or objectsetreference\
    \ in the Assignment (i.e., the [normalized value]\n   of the name attribute item\
    \ in the translation of the Assignment,\n   ignoring white space characters).\
    \  If the target namespace of the\n   ASN.1 module in which the Assignment is\
    \ defined is not absent, then\n   the namespace name of the expanded name is that\
    \ target namespace;\n   otherwise, the namespace name of the expanded name has\
    \ no value.\n   When the expanded name is rendered as a qualified name, the namespace\n\
    \   prefix is determined according to Section 6.7.11.1 of the\n   specification\
    \ for RXER [RXER].\n   If an ASN.1 specification contains two or more modules\
    \ where the\n   target namespace is absent, then there exists the possibility\
    \ that\n   the expanded names defined by the ASN.X translations of those modules\n\
    \   are not distinct.  The expanded names are not distinct if:\n   (1) two or\
    \ more type or value set assignments define the same\n       typereference, or\n\
    \   (2) two or more value assignments define the same valuereference, or\n   (3)\
    \ two or more object class assignments define the same\n       objectclassreference,\
    \ or\n   (4) two or more object assignments define the same objectreference,\n\
    \       or\n   (5) two or more object set assignments define the same\n      \
    \ objectsetreference, or\n   (6) two or more top-level element components [RXEREI]\
    \ have the same\n       local name, or\n   (7) two or more top-level attribute\
    \ components [RXEREI] have the same\n       local name.\n   If the expanded names\
    \ are not distinct, then an unambiguous\n   translation into ASN.X does not exist\
    \ unless each of the modules has\n   a SCHEMA-IDENTITY encoding instruction. \
    \ Consequently, if two or more\n   modules where the target namespace is absent\
    \ are being translated\n   into ASN.X and the reference names defined in those\
    \ modules will not\n   be distinct, then as a local action prior to the translation,\
    \ a\n   SCHEMA-IDENTITY encoding instruction MUST be added to each of the\n  \
    \ modules that defines one or more of the indistinct expanded names and\n   that\
    \ does not already have a SCHEMA-IDENTITY encoding instruction.\n   The character\
    \ string (a URI) specified by the AnyURIValue of each\n   added SCHEMA-IDENTITY\
    \ encoding instruction is freely chosen by the\n   translator, subject to the\
    \ condition that these character strings are\n   distinct [RXEREI].\n      Aside:\
    \ Although this means that different translators might\n      produce ASN.X modules\
    \ that are syntactically different for any\n      given ASN.1 module, those ASN.X\
    \ modules will be semantically\n      equivalent to each other and to the original\
    \ ASN.1 module.\n   TARGET-NAMESPACE and SCHEMA-IDENTITY encoding instructions\
    \ are\n   RECOMMENDED for every ASN.1 module.\n"
- title: 5.2.  Importing Namespaces
  contents:
  - "5.2.  Importing Namespaces\n   An Assignment is referenced from an ASN.X module\
    \ if its associated\n   expanded name appears as a qualified name in the [normalized\
    \ value]\n   of an attribute item with the [local name] \"type\", \"value\", \"\
    class\",\n   \"object\", or \"objectSet\".  These references are categorized as\
    \ direct\n   references.  An Assignment or top-level component is also referenced\n\
    \   from an ASN.X module if its expanded name appears as a qualified name\n  \
    \ in the [normalized value] of an attribute item with the [local name]\n   \"\
    ref\".  This reference is only categorized as direct if the ref\n   attribute\
    \ is not the result of the translation of a DefinedType\n   subject to a TYPE-REF\
    \ encoding instruction or a NamedType subject to\n   an ATTRIBUTE-REF or ELEMENT-REF\
    \ encoding instruction.\n      Aside: In the case of an indirect reference, an\
    \ attribute item\n      with the [local name] \"embedded\" and [normalized value]\
    \ \"true\" or\n      \"1\" will also be present.\n   Definition (external module):\
    \ An external module is any module other\n   than the module being translated\
    \ and the AdditionalBasicDefinitions\n   module [RXER].\n      Aside: The AdditionalBasicDefinitions\
    \ module is always assumed to\n      be imported, as are all the built-in types\
    \ and object classes of\n      ASN.1.\n   An element item with the [local name]\
    \ \"import\" SHALL be added to the\n   [children] of the <asnx:module> element\
    \ item for each external module\n   containing Assignments or top-level components\
    \ that are directly\n   referenced from the ASN.X module.  An <import> element\
    \ item MAY be\n   added to the [children] of the <asnx:module> element item for\
    \ any\n   other external module.\n   An attribute item with the [local name] \"\
    name\" SHOULD be added to the\n   [attributes] of the <import> element item. \
    \ The [normalized value] of\n   this attribute item is the modulereference in\
    \ the ModuleIdentifier in\n   the ModuleDefinition of the external module.\n \
    \  If the DefinitiveIdentifier in the ModuleIdentifier in the\n   ModuleDefinition\
    \ of the external module is not empty, then an\n   attribute item with the [local\
    \ name] \"identifier\" SHALL be added to\n   the [attributes] of the <import>\
    \ element item.  The\n   [normalized value] of this attribute item is the RXER\
    \ character data\n   translation of the DefinitiveIdentifier.\n   If the external\
    \ module has a schema identity URI, then an attribute\n   item with the [local\
    \ name] \"schemaIdentity\" SHALL be added to the\n   [attributes] of the <import>\
    \ element item.  The [normalized value] of\n   this attribute item is the schema\
    \ identity URI of the external\n   module.\n   If the target namespace of the\
    \ external module is not absent, then an\n   attribute item with the [local name]\
    \ \"namespace\" SHALL be added to\n   the [attributes] of the <import> element\
    \ item.  The\n   [normalized value] of this attribute item is the target namespace\
    \ of\n   the external module.\n   An attribute item with the [local name] \"schemaLocation\"\
    \ MAY be added\n   to the [attributes] of the <import> element item.  The\n  \
    \ [normalized value] of this attribute item is a URI [URI] indicating\n   the\
    \ physical location of the ASN.X translation of the external\n   module.\n   The\
    \ <import> element items MUST follow an <annotation> element item\n   (if present)\
    \ and MUST precede any other element items in the\n   [children] of the <asnx:module>\
    \ element item.\n   Note that because of the way parameterized references are\
    \ expanded in\n   ASN.X (see Section 13), the modules in the Imports in the ModuleBody\n\
    \   in the ModuleDefinition may not correspond exactly to the <import>\n   element\
    \ items.\n"
- title: 5.3.  TypeAssignment Translation
  contents:
  - "5.3.  TypeAssignment Translation\n   The translation of a TypeAssignment is an\
    \ element item with the\n   [local name] \"namedType\".  An attribute item with\
    \ the [local name]\n   \"name\" SHALL be added to the [attributes] of the <namedType>\
    \ element\n   item.  The [normalized value] of this attribute item is the\n  \
    \ typereference on the left-hand side of the assignment.\n   An element item with\
    \ the [local name] \"annotation\" MAY be added to\n   the [children] of the <namedType>\
    \ element item.  The translation of\n   the Type on the right-hand side of the\
    \ assignment SHALL be added to\n   the [children] or [attributes] of the <namedType>\
    \ element item.\n   Example\n      MyType ::= INTEGER\n      <namedType name=\"\
    MyType\" type=\"asnx:INTEGER\"/>\n"
- title: 5.4.  ValueAssignment and XMLValueAssignment Translation
  contents:
  - "5.4.  ValueAssignment and XMLValueAssignment Translation\n   The translation\
    \ of a ValueAssignment is an element item with the\n   [local name] \"namedValue\"\
    .  An attribute item with the [local name]\n   \"name\" SHALL be added to the\
    \ [attributes] of the <namedValue> element\n   item.  The [normalized value] of\
    \ this attribute item is the\n   valuereference on the left-hand side of the assignment.\n\
    \   An element item with the [local name] \"annotation\" MAY be added to\n   the\
    \ [children] of the <namedValue> element item.  The translation of\n   the Type\
    \ on the left-hand side of the assignment SHALL be added to\n   the [children]\
    \ or [attributes] of the <namedValue> element item.  The\n   translation of the\
    \ Value on the right-hand side of the assignment\n   SHALL be added to the [children]\
    \ or [attributes] of the <namedValue>\n   element item.\n   Example\n      myValue\
    \ INTEGER ::= 10\n      <namedValue name=\"myValue\" type=\"asnx:INTEGER\" literalValue=\"\
    10\"/>\n   An XMLValueAssignment is converted into the equivalent\n   ValueAssignment\
    \ and then translated as a ValueAssignment.  Note that\n   the ASN.X representation\
    \ for a Value is unrelated to XMLTypedValue.\n"
- title: 5.5.  ValueSetTypeAssignment Translation
  contents:
  - "5.5.  ValueSetTypeAssignment Translation\n   The translation of a ValueSetTypeAssignment\
    \ is an element item with\n   the [local name] \"namedValueSet\".  An attribute\
    \ item with the\n   [local name] \"name\" SHALL be added to the [attributes] of\
    \ the\n   <namedValueSet> element item.  The [normalized value] of this\n   attribute\
    \ item is the typereference on the left-hand side of the\n   assignment.\n   An\
    \ element item with the [local name] \"annotation\" MAY be added to\n   the [children]\
    \ of the <namedValueSet> element item.  The translation\n   of the Type on the\
    \ left-hand side of the assignment SHALL be added to\n   the [children] or [attributes]\
    \ of the <namedValueSet> element item.\n   The translation of the ValueSet on\
    \ the right-hand side of the\n   assignment SHALL be added to the [children] of\
    \ the <namedValueSet>\n   element item.\n   Example\n      MyValueSet INTEGER\
    \ ::= { 10 }\n      <namedValueSet name=\"MyValueSet\" type=\"asnx:INTEGER\">\n\
    \       <valueSet>\n        <literalValue>10</literalValue>\n       </valueSet>\n\
    \      </namedValueSet>\n"
- title: 5.6.  ObjectClassAssignment Translation
  contents:
  - "5.6.  ObjectClassAssignment Translation\n   The translation of an ObjectClassAssignment\
    \ is an element item with\n   the [local name] \"namedClass\".  An attribute item\
    \ with the\n   [local name] \"name\" SHALL be added to the [attributes] of the\n\
    \   <namedClass> element item.  The [normalized value] of this attribute\n   item\
    \ is the objectclassreference on the left-hand side of the\n   assignment.\n \
    \  An element item with the [local name] \"annotation\" MAY be added to\n   the\
    \ [children] of the <namedClass> element item.  The translation of\n   the ObjectClass\
    \ on the right-hand side of the assignment SHALL be\n   added to the [children]\
    \ or [attributes] of the <namedClass> element\n   item.\n   Example\n      MY-CLASS\
    \ ::= TYPE-IDENTIFIER\n      <namedClass name=\"MY-CLASS\" class=\"asnx:TYPE-IDENTIFIER\"\
    />\n"
- title: 5.7.  ObjectAssignment Translation
  contents:
  - "5.7.  ObjectAssignment Translation\n   The translation of an ObjectAssignment\
    \ is an element item with the\n   [local name] \"namedObject\".  An attribute\
    \ item with the [local name]\n   \"name\" SHALL be added to the [attributes] of\
    \ the <namedObject>\n   element item.  The [normalized value] of this attribute\
    \ item is the\n   objectreference on the left-hand side of the assignment.\n \
    \  An element item with the [local name] \"annotation\" MAY be added to\n   the\
    \ [children] of the <namedObject> element item.  The translation of\n   the DefinedObjectClass\
    \ on the left-hand side of the assignment SHALL\n   be added to the [children]\
    \ or [attributes] of the <namedObject>\n   element item.  The translation of the\
    \ Object on the right-hand side\n   of the assignment SHALL be added to the [children]\
    \ or [attributes] of\n   the <namedObject> element item.\n   Example\n      myObject\
    \ TYPE-IDENTIFIER ::=\n          { NULL IDENTIFIED BY { 1 3 14 3 2 26 } }\n  \
    \    <namedObject name=\"myObject\" class=\"asnx:TYPE-IDENTIFIER\">\n       <object>\n\
    \        <field name=\"id\" literalValue=\"1.3.14.3.2.26\"/>\n        <field name=\"\
    Type\" type=\"asnx:NULL\"/>\n       </object>\n      </namedObject>\n"
- title: 5.8.  ObjectSetAssignment Translation
  contents:
  - "5.8.  ObjectSetAssignment Translation\n   The translation of an ObjectSetAssignment\
    \ is an element item with the\n   [local name] \"namedObjectSet\".  An attribute\
    \ item with the\n   [local name] \"name\" SHALL be added to the [attributes] of\
    \ the\n   <namedObjectSet> element item.  The [normalized value] of this\n   attribute\
    \ item is the objectsetreference on the left-hand side of the\n   assignment.\n\
    \   An element item with the [local name] \"annotation\" MAY be added to\n   the\
    \ [children] of the <namedObjectSet> element item.  The translation\n   of the\
    \ DefinedObjectClass on the left-hand side of the assignment\n   SHALL be added\
    \ to the [children] or [attributes] of the\n   <namedObjectSet> element item.\
    \  The translation of the ObjectSet on\n   the right-hand side of the assignment\
    \ SHALL be added to the\n   [children] or [attributes] of the <namedObjectSet>\
    \ element item.\n   Example\n      MyObjectSet TYPE-IDENTIFIER ::= { myObject\
    \ }\n      <namedObjectSet name=\"MyObjectSet\" class=\"asnx:TYPE-IDENTIFIER\"\
    >\n       <objectSet>\n        <object ref=\"tns:myObject\"/>\n       </objectSet>\n\
    \      </namedObjectSet>\n"
- title: 5.9.  ParameterizedAssignment Translation
  contents:
  - "5.9.  ParameterizedAssignment Translation\n   The translation of an ASN.1 specification\
    \ into ASN.X replaces any\n   reference to a parameterized definition [X.683]\
    \ with the definition\n   expanded in-line.  Consequently, there is no direct\
    \ translation for a\n   ParameterizedAssignment, though its definition may come\
    \ into play in\n   the translation of references to the parameterized definition\
    \ (see\n   Section 13).\n"
- title: 6.  Translation of Types
  contents:
  - "6.  Translation of Types\n   The rules for translating the different varieties\
    \ of Type are\n   detailed in this section.\n   Note that the notation of ASN.1\
    \ is ambiguous where a Type is both\n   prefixed [X.680-1] (e.g., tagged) and\
    \ constrained.  For example, the\n   notation \"[0] INTEGER (0..10)\" could be\
    \ interpreted as either a\n   tagged ConstrainedType or a constrained TaggedType.\
    \  For the purposes\n   of the translation into ASN.X, the constraint is assumed\
    \ to have\n   higher precedence than the prefix, so the above notation would be\n\
    \   taken to be a tagged ConstrainedType.\n"
- title: 6.1.  Identifier Replacement
  contents:
  - "6.1.  Identifier Replacement\n   Various RXER encoding instructions can be used\
    \ to override an\n   identifier in an ASN.1 specification with an NCName [XMLNS10].\
    \  The\n   NCName is given preeminence in the ASN.X representation, and the\n\
    \   identifier is not explicitly given if it is algorithmically related\n   to\
    \ the NCName.  The cases where an NCName overrides an identifier are\n   covered\
    \ individually in other parts of this specification and make\n   use of the following\
    \ definition.\n   Definition (reduction): The reduction of an NCName is the string\
    \ of\n   characters resulting from the following operations performed in order\n\
    \   on the NCName:\n   (1) replace each full stop ('.', U+002E) and low line ('_',\
    \ U+005F)\n       character with a hyphen character ('-', U+002D),\n   (2) remove\
    \ every character except Latin letters (U+0041-U+005A,\n       U+0061-U+007A),\
    \ decimal digits (U+0030-U+0039), and hyphens\n       (U+002D),\n   (3) remove\
    \ leading and trailing hyphen characters,\n   (4) replace sequences of two or\
    \ more hyphen characters with a single\n       hyphen, and\n   (5) convert the\
    \ first character to lowercase if it is an uppercase\n       letter.\n      Aside:\
    \ If the reduction of an NCName is not the same as the\n      identifier that\
    \ the NCName replaces, then the identifier will be\n      explicitly given in\
    \ the translation into ASN.X.\n"
- title: 6.2.  DefinedType Translation
  contents:
  - "6.2.  DefinedType Translation\n   If a Type is a DefinedType in a ReferencedType,\
    \ then the translation\n   of the Type is the translation of the DefinedType.\n\
    \   If a DefinedType is not a ParameterizedType,\n   ParameterizedValueSetType,\
    \ or DummyReference and is not subject to a\n   TYPE-REF or REF-AS-TYPE encoding\
    \ instruction, then the translation of\n   the DefinedType is either the attribute\
    \ form translation of a type\n   reference, or the element form translation of\
    \ a type reference.\n   The attribute form translation of a type reference is\
    \ an attribute\n   item with the [local name] \"type\".  The [normalized value]\
    \ of this\n   attribute item is a qualified name for the expanded name of the\n\
    \   referenced type definition (see Section 5.1).  The attribute form\n   translation\
    \ SHALL NOT be used if this expanded name is not distinct\n   with respect to\
    \ the current module and the modules referenced by its\n   <import> element items\
    \ (see Section 5.1).\n   The element form translation of a type reference is an\
    \ element item\n   with the [local name] \"type\".  An element item with the [local\
    \ name]\n   \"annotation\" MAY be added to the [children] of the <type> element\n\
    \   item.  An attribute item with the [local name] \"ref\" SHALL be added\n  \
    \ to the [attributes] of the <type> element item.  The\n   [normalized value]\
    \ of this attribute item is a qualified name for the\n   expanded name of the\
    \ referenced type definition.  If this expanded\n   name is not distinct with\
    \ respect to the current module and the\n   modules referenced by its <import>\
    \ element items, then an attribute\n   item with the [local name] \"context\"\
    \ SHALL be added to the\n   [attributes] of the <type> element item; otherwise,\
    \ if the module\n   containing the referenced type definition has a schema identity\
    \ URI,\n   then an attribute item with the [local name] \"context\" MAY be added\n\
    \   to the [attributes] of the <type> element item.  The\n   [normalized value]\
    \ of this attribute item is the schema identity URI\n   of the module containing\
    \ the type definition referenced by the\n   DefinedType.\n      Aside: If a reference\
    \ name is not distinct, then the module\n      containing the referenced definition\
    \ must have a schema identity\n      URI (see Section 5.1).\n   An attribute item\
    \ with the [local name] \"embedded\" and\n   [normalized value] \"false\" or \"\
    0\" MAY be added to the [attributes] of\n   the <type> element item.\n   The translation\
    \ of the DefinedType is the same whether the type\n   definition is referenced\
    \ by a typereference or an\n   ExternalTypeReference.\n   If a DefinedType is\
    \ subject to a TYPE-REF encoding instruction, then\n   the translation of the\
    \ DefinedType is an element item with the\n   [local name] \"type\".  An element\
    \ item with the [local name]\n   \"annotation\" MAY be added to the [children]\
    \ of the <type> element\n   item.  An attribute item with the [local name] \"\
    ref\" SHALL be added\n   to the [attributes] of the <type> element item.  The\n\
    \   [normalized value] of this attribute item is the RXER character data\n   translation\
    \ of the QNameValue in the TYPE-REF encoding instruction.\n   If a ContextParameter\
    \ is present in the RefParameters in the TYPE-REF\n   encoding instruction, then\
    \ an attribute item with the [local name]\n   \"context\" SHALL be added to the\
    \ [attributes] of the <type> element\n   item.  The [normalized value] of this\
    \ attribute item is the string\n   value of the AnyURIValue in the ContextParameter.\
    \  An attribute item\n   with the [local name] \"embedded\" and [normalized value]\
    \ \"true\" or \"1\"\n   SHALL be added to the [attributes] of the <type> element\
    \ item.\n      Aside: The embedded attribute item indicates whether a type is\n\
    \      directly referenced as a DefinedType or indirectly referenced\n      through\
    \ a TYPE-REF encoding instruction.  An ASN.1 type can be\n      referenced either\
    \ way.  Type definitions in other schema languages\n      cannot be directly referenced.\n\
    \   If a DefinedType is subject to a REF-AS-TYPE encoding instruction,\n   then\
    \ the translation of the DefinedType is an element item with the\n   [local name]\
    \ \"type\".  An element item with the [local name]\n   \"annotation\" MAY be added\
    \ to the [children] of the <type> element\n   item.  An attribute item with the\
    \ [local name] \"elementType\" SHALL be\n   added to the [attributes] of the <type>\
    \ element item.  The\n   [normalized value] of this attribute item is the RXER\
    \ character data\n   translation of the NameValue in the REF-AS-TYPE encoding\
    \ instruction.\n   If a ContextParameter is present in the RefParameters in the\n\
    \   REF-AS-TYPE encoding instruction, then an attribute item with the\n   [local\
    \ name] \"context\" SHALL be added to the [attributes] of the\n   <type> element\
    \ item.  The [normalized value] of this attribute item\n   is the string value\
    \ of the AnyURIValue in the ContextParameter.\n   Example\n      CHOICE {\n  \
    \        one    Foo,\n          two    [RXER:TYPE-REF\n                     {\
    \ namespace-name \"http://www.example.com/PO1\",\n                       local-name\
    \ \"PurchaseOrderType\" }]\n                 Markup,\n          three  [RXER:REF-AS-TYPE\
    \ \"product\"\n                     CONTEXT \"http://www.example.com/inventory\"\
    ]\n                 Markup\n      }\n      <type>\n       <choice>\n        <element\
    \ name=\"one\" type=\"tns:Foo\"/>\n        <element name=\"two\" xmlns:po=\"http://www.example.com/PO1\"\
    >\n         <type ref=\"po:PurchaseOrderType\" embedded=\"true\"/>\n        </element>\n\
    \        <element name=\"three\">\n         <type elementType=\"product\"\n  \
    \             context=\"http://www.example.com/inventory\"/>\n        </element>\n\
    \       </choice>\n      </type>\n   If a DefinedType is a DummyReference, ParameterizedType,\
    \ or\n   ParameterizedValueSetType, then the translation of the Type is the\n\
    \   translation of that DummyReference, ParameterizedType, or\n   ParameterizedValueSetType\
    \ (see Section 13).\n"
- title: 6.3.  Translation of Built-in Types
  contents:
  - "6.3.  Translation of Built-in Types\n   If a Type is a BuiltinType or ReferencedType\
    \ that is one of the\n   productions in Table 1 in Section 5 of the specification\
    \ for RXER\n   [RXER], then the translation of the Type is either the attribute\
    \ form\n   or element form translation of that type.\n   The attribute form translation\
    \ of a Type that is a BuiltinType or\n   ReferencedType that is one of the productions\
    \ in Table 1 is an\n   attribute item with the [local name] \"type\".  The [normalized\
    \ value]\n   of this attribute item is a qualified name for the expanded name\
    \ of\n   the built-in type (see Section 5 of the specification for RXER\n   [RXER]).\n\
    \   The element form translation of a Type that is a BuiltinType or\n   ReferencedType\
    \ that is one of the productions in Table 1 is an\n   element item with the [local\
    \ name] \"type\".  An element item with the\n   [local name] \"annotation\" MAY\
    \ be added to the [children] of the\n   <type> element item.  An attribute item\
    \ with the [local name] \"ref\"\n   SHALL be added to the [attributes] of the\
    \ <type> element item.  The\n   [normalized value] of this attribute item is a\
    \ qualified name for the\n   expanded name of the built-in type.\n   Example\n\
    \      BOOLEAN\n      <type ref=\"asnx:BOOLEAN\"/>\n   Usually the translator\
    \ is free to choose either the attribute form or\n   element form translation\
    \ for a Type; however, in some contexts\n   attribute forms for a Type are explicitly\
    \ disallowed.\n"
- title: 6.4.  BitStringType Translation
  contents:
  - "6.4.  BitStringType Translation\n   The translation of a BitStringType with a\
    \ NamedBitList is an element\n   item with the [local name] \"type\".  An element\
    \ item with the\n   [local name] \"annotation\" MAY be added to the [children]\
    \ of the\n   <type> element item.  An element item with the [local name]\n   \"\
    namedBitList\" SHALL be appended to the [children] of the <type>\n   element item.\
    \  The translation of each NamedBit in the NamedBitList\n   SHALL be appended\
    \ to the [children] of the <namedBitList> element\n   item.\n   The translation\
    \ of a NamedBit is an element item with the\n   [local name] \"namedBit\".  An\
    \ attribute item with the [local name]\n   \"name\" SHALL be added to the [attributes]\
    \ of the <namedBit> element\n   item.  If the BitStringType is subject to a VALUES\
    \ encoding\n   instruction, then the [normalized value] of this attribute item\
    \ is\n   the replacement name [RXEREI] for the identifier in the NamedBit;\n \
    \  otherwise, it is the identifier in the NamedBit.  If the\n   BitStringType\
    \ is subject to a VALUES encoding instruction and the\n   reduction of the replacement\
    \ name (see Section 6.1) is not the same\n   as the identifier, then an attribute\
    \ item with the [local name]\n   \"identifier\" SHALL be added to the [attributes]\
    \ of the <namedBit>\n   element item; otherwise, an attribute item with the [local\
    \ name]\n   \"identifier\" MAY be added to the [attributes] of the <namedBit>\n\
    \   element item.  The [normalized value] of this attribute item is the\n   identifier\
    \ in the NamedBit.  An attribute item with the [local name]\n   \"bit\" SHALL\
    \ be added to the [attributes] of the <namedBit> element\n   item.  The [normalized\
    \ value] of this attribute item is the digit\n   string representation of the\
    \ integer value of the number or\n   DefinedValue in the NamedBit.\n   Examples\n\
    \      BIT STRING { zero(0), one(1), two(2) }\n      <type>\n       <namedBitList>\n\
    \        <namedBit name=\"zero\" bit=\"0\"/>\n        <namedBit name=\"one\" bit=\"\
    1\"/>\n        <namedBit name=\"two\" bit=\"2\"/>\n       </namedBitList>\n  \
    \    </type>\n      [RXER:VALUES ALL CAPITALIZED, wednesday AS \"Midweek\"]\n\
    \          BIT STRING {\n              monday(0), tuesday(1), wednesday(2),\n\
    \              thursday(3), friday(4)\n          }\n      <type>\n       <namedBitList>\n\
    \        <namedBit name=\"Monday\" bit=\"0\"/>\n        <namedBit name=\"Tuesday\"\
    \ bit=\"1\"/>\n        <namedBit name=\"Midweek\" identifier=\"wednesday\" bit=\"\
    2\"/>\n        <namedBit name=\"Thursday\" bit=\"3\"/>\n        <namedBit name=\"\
    Friday\" bit=\"4\"/>\n       </namedBitList>\n      </type>\n"
- title: 6.5.  IntegerType Translation
  contents:
  - "6.5.  IntegerType Translation\n   The translation of an IntegerType with a NamedNumberList\
    \ is an\n   element item with the [local name] \"type\".  An element item with\
    \ the\n   [local name] \"annotation\" MAY be added to the [children] of the\n\
    \   <type> element item.  An element item with the [local name]\n   \"namedNumberList\"\
    \ SHALL be appended to the [children] of the <type>\n   element item.  The translation\
    \ of each NamedNumber in the\n   NamedNumberList SHALL be appended to the [children]\
    \ of the\n   <namedNumberList> element item.\n   The translation of a NamedNumber\
    \ is an element item with the\n   [local name] \"namedNumber\".  An attribute\
    \ item with the [local name]\n   \"name\" SHALL be added to the [attributes] of\
    \ the <namedNumber>\n   element item.  If the IntegerType is subject to a VALUES\
    \ encoding\n   instruction, then the [normalized value] of this attribute item\
    \ is\n   the replacement name [RXEREI] for the identifier in the NamedNumber;\n\
    \   otherwise, it is the identifier in the NamedNumber.  If the\n   IntegerType\
    \ is subject to a VALUES encoding instruction and the\n   reduction of the replacement\
    \ name (see Section 6.1) is not the same\n   as the identifier, then an attribute\
    \ item with the [local name]\n   \"identifier\" SHALL be added to the [attributes]\
    \ of the <namedNumber>\n   element item; otherwise, an attribute item with the\
    \ [local name]\n   \"identifier\" MAY be added to the [attributes] of the <namedNumber>\n\
    \   element item.  The [normalized value] of this attribute item is the\n   identifier\
    \ in the NamedNumber.  An attribute item with the\n   [local name] \"number\"\
    \ SHALL be added to the [attributes] of the\n   <namedNumber> element item.  The\
    \ [normalized value] of this attribute\n   item is the digit string representation\
    \ of the integer value of the\n   SignedNumber or DefinedValue in the NamedNumber.\n\
    \   Examples\n      INTEGER { nothing(0), a-little(1), a-lot(100) }\n      <type>\n\
    \       <namedNumberList>\n        <namedNumber name=\"nothing\" number=\"0\"\
    />\n        <namedNumber name=\"a-little\" number=\"1\"/>\n        <namedNumber\
    \ name=\"a-lot\" number=\"100\"/>\n       </namedNumberList>\n      </type>\n\
    \      [RXER:VALUES ALL CAPITALIZED, very-high AS \"DANGEROUS\"]\n          INTEGER\
    \ { low(25), medium(50), high(75), very-high(100) }\n      <type>\n       <namedNumberList>\n\
    \        <namedNumber name=\"Low\" number=\"25\"/>\n        <namedNumber name=\"\
    Medium\" number=\"50\"/>\n        <namedNumber name=\"High\" number=\"75\"/>\n\
    \        <namedNumber name=\"DANGEROUS\" identifier=\"very-high\"\n          \
    \           number=\"100\"/>\n       </namedNumberList>\n      </type>\n"
- title: 6.6.  EnumeratedType Translation
  contents:
  - "6.6.  EnumeratedType Translation\n   The translation of an EnumeratedType is\
    \ an element item with the\n   [local name] \"type\".  An element item with the\
    \ [local name]\n   \"annotation\" MAY be added to the [children] of the <type>\
    \ element\n   item.  An element item with the [local name] \"enumerated\" SHALL\
    \ be\n   appended to the [children] of the <type> element item.  The\n   translation\
    \ of each EnumerationItem nested in the RootEnumeration in\n   the Enumerations\
    \ instance in the EnumeratedType SHALL be appended to\n   the [children] of the\
    \ <enumerated> element item.\n   If an ellipsis (\"...\") is present in the Enumerations\
    \ instance, then\n   an element item with the [local name] \"extension\" SHALL\
    \ be appended\n   to the [children] of the <enumerated> element item and the\n\
    \   translation of the ExceptionSpec (possibly empty) SHALL be added to\n   the\
    \ [children] of the <extension> element item.  If an\n   AdditionalEnumeration\
    \ is present in the Enumerations instance, then\n   the translation of each EnumerationItem\
    \ nested in the\n   AdditionalEnumeration SHALL be appended to the [children]\
    \ of the\n   <extension> element item.\n   The translation of an EnumerationItem\
    \ is an element item with the\n   [local name] \"enumeration\".\n   If the EnumerationItem\
    \ is of the \"identifier\" form, then an attribute\n   item with the [local name]\
    \ \"name\" SHALL be added to the [attributes]\n   of the <enumeration> element\
    \ item.  If the EnumeratedType is subject\n   to a VALUES encoding instruction,\
    \ then the [normalized value] of this\n   attribute item is the replacement name\
    \ [RXEREI] for the identifier;\n   otherwise, it is the identifier.  If the EnumeratedType\
    \ is subject to\n   a VALUES encoding instruction and the reduction of the replacement\n\
    \   name (see Section 6.1) is not the same as the identifier, then an\n   attribute\
    \ item with the [local name] \"identifier\" SHALL be added to\n   the [attributes]\
    \ of the <enumeration> element item; otherwise, an\n   attribute item with the\
    \ [local name] \"identifier\" MAY be added to the\n   [attributes] of the <enumeration>\
    \ element item.  The\n   [normalized value] of this attribute item is the identifier.\n\
    \   If the EnumerationItem is of the \"NamedNumber\" form, then an\n   attribute\
    \ item with the [local name] \"name\" SHALL be added to the\n   [attributes] of\
    \ the <enumeration> element item.  If the\n   EnumeratedType is subject to a VALUES\
    \ encoding instruction, then the\n   [normalized value] of this attribute item\
    \ is the replacement name\n   [RXEREI] for the identifier in the NamedNumber;\
    \ otherwise, it is the\n   identifier in the NamedNumber.  If the EnumeratedType\
    \ is subject to a\n   VALUES encoding instruction and the reduction of the replacement\
    \ name\n   is not the same as the identifier, then an attribute item with the\n\
    \   [local name] \"identifier\" SHALL be added to the [attributes] of the\n  \
    \ <enumeration> element item; otherwise, an attribute item with the\n   [local\
    \ name] \"identifier\" MAY be added to the [attributes] of the\n   <enumeration>\
    \ element item.  The [normalized value] of this attribute\n   item is the identifier\
    \ in the NamedNumber.  An attribute item with\n   the [local name] \"number\"\
    \ SHALL be added to the [attributes] of the\n   <enumeration> element item.  The\
    \ [normalized value] of this attribute\n   item is the digit string representation\
    \ of the integer value of the\n   SignedNumber or DefinedValue in the NamedNumber.\n\
    \   Examples\n      ENUMERATED { red(0), green(1), ..., blue(2) }\n      <type>\n\
    \       <enumerated>\n        <enumeration name=\"red\" number=\"0\"/>\n     \
    \   <enumeration name=\"green\" number=\"1\"/>\n        <extension>\n        \
    \ <enumeration name=\"blue\" number=\"2\"/>\n        </extension>\n       </enumerated>\n\
    \      </type>\n      [RXER:VALUES ALL CAPITALIZED, red AS \"Crimson\"]\n    \
    \      ENUMERATED { red, yellow, green, blue }\n      <type>\n       <enumerated>\n\
    \        <enumeration name=\"Crimson\" identifier=\"red\"/>\n        <enumeration\
    \ name=\"Yellow\"/>\n        <enumeration name=\"Green\"/>\n        <enumeration\
    \ name=\"Blue\"/>\n       </enumerated>\n      </type>\n"
- title: 6.7.  PrefixedType Translation
  contents:
  - "6.7.  PrefixedType Translation\n   The translation of a PrefixedType [X.680-1]\
    \ that is a TaggedType is\n   either the short form translation (Section 6.7.1)\
    \ or long form\n   translation (Section 6.7.2) of the TaggedType.\n      Aside:\
    \ The short form translation is provided because TaggedType\n      notation is\
    \ heavily used in existing ASN.1 specifications.  The\n      long form translation\
    \ has the same structure as the translation of\n      an EncodingPrefixedType\
    \ and can be simplified where there is a\n      series of nested PrefixedType\
    \ instances.\n   If a PrefixedType is an EncodingPrefixedType and the\n   EncodingReference\
    \ is RXER, or the EncodingReference is empty and the\n   default encoding reference\
    \ [X.680-1] for the module is RXER, then the\n   translation of the PrefixedType\
    \ is the translation of the Type in the\n   EncodingPrefixedType.\n      Aside:\
    \ This is not suggesting that RXER encoding instructions are\n      ignored. \
    \ Encoding instructions for RXER are not explicitly\n      represented in ASN.X,\
    \ but rather affect how an ASN.1 module is\n      translated into an ASN.X module\
    \ (since the content of an ASN.X\n      module is also the RXER encoding of an\
    \ abstract value of the\n      ModuleDefinition ASN.1 type in Appendix A).  The\
    \ individual\n      effects of RXER encoding instructions on the translation are\n\
    \      addressed in other parts of this specification.  Encoding\n      instructions\
    \ for other encoding rules have explicit\n      representations in ASN.X.\n  \
    \ If a PrefixedType is an EncodingPrefixedType and the\n   EncodingReference is\
    \ not RXER, or the EncodingReference is empty and\n   the default encoding reference\
    \ for the module is not RXER, then the\n   translation of the PrefixedType is\
    \ an element item with the\n   [local name] \"prefixed\".  The translation of\
    \ the EncodingPrefix in\n   the EncodingPrefixedType SHALL be added to the [children]\
    \ of the\n   <prefixed> element item.\n   If the EncodingReference of an EncodingPrefix\
    \ is not empty, then the\n   translation of the EncodingPrefix is an element item\
    \ with the\n   encodingreference in the EncodingReference as the [local name].\
    \  The\n   translation of the EncodingInstruction in the EncodingPrefix SHALL\
    \ be\n   added to the [children] of this element item.\n   If the EncodingReference\
    \ of an EncodingPrefix is empty, then the\n   translation of the EncodingPrefix\
    \ is an element item with the default\n   encoding reference for the module as\
    \ the [local name].  The\n   translation of the EncodingInstruction in the EncodingPrefix\
    \ SHALL be\n   added to the [children] of this element item.\n   The EncodingInstruction\
    \ notation is different for each set of\n   encoding instructions, and their translations\
    \ into ASN.X are\n   specified in separate documents [GSEREIT][XEREIT].  At the\
    \ time of\n   writing, only three sets of encoding instructions have been defined\n\
    \   (for RXER [RXEREI], GSER [GSEREI], and EXTENDED-XER [X.693-1]).\n   If the\
    \ child <type> element item of a <prefixed> element item has no\n   attribute\
    \ items and has a child <prefixed> element item, then that\n   child <type> element\
    \ item MAY be replaced by the [children] and\n   [attributes] of the inner <prefixed>\
    \ element item.  Note that the\n   long form translation of a TaggedType is also\
    \ eligible for this\n   rewriting step.  This rewriting step MAY be applied to\
    \ the result of\n   a previous rewriting step if the necessary condition still\
    \ holds.\n   Example\n      These three definitions are equivalent.\n      [XER:ATTRIBUTE]\
    \ [XER:USE-UNION] [GSER:CHOICE-OF-STRINGS] CHOICE {\n          one  PrintableString,\n\
    \          two  UTF8String\n      }\n      <type>\n       <prefixed>\n       \
    \ <XER><attribute/></XER>\n        <type>\n         <prefixed>\n          <XER><useUnion/></XER>\n\
    \          <type>\n           <prefixed>\n            <GSER><choiceOfStrings/></GSER>\n\
    \            <type>\n             <choice>\n              <element name=\"one\"\
    \ type=\"asnx:PrintableString\"/>\n              <element name=\"two\" type=\"\
    asnx:UTF8String\"/>\n             </choice>\n            </type>\n           </prefixed>\n\
    \          </type>\n         </prefixed>\n        </type>\n       </prefixed>\n\
    \      </type>\n      <type>\n       <prefixed>\n        <XER><attribute/></XER>\n\
    \        <XER><useUnion/></XER>\n        <GSER><choiceOfStrings/></GSER>\n   \
    \     <type>\n         <choice>\n          <element name=\"one\" type=\"asnx:PrintableString\"\
    />\n          <element name=\"two\" type=\"asnx:UTF8String\"/>\n         </choice>\n\
    \        </type>\n       </prefixed>\n      </type>\n"
- title: 6.7.1.  Short Form TaggedType Translation
  contents:
  - "6.7.1.  Short Form TaggedType Translation\n   The short form translation of a\
    \ TaggedType is an element item with\n   the [local name] \"type\".  An element\
    \ item with the [local name]\n   \"annotation\" MAY be added to the [children]\
    \ of the <type> element\n   item.  An element item with the [local name] \"tagged\"\
    \ SHALL be\n   appended to the [children] of the <type> element item.\n   If the\
    \ Class in the Tag in the TaggedType is not empty, then an\n   attribute item\
    \ with the [local name] \"tagClass\" SHALL be added to the\n   [attributes] of\
    \ the <tagged> element item.  The [normalized value] of\n   this attribute item\
    \ is the Class of the Tag with all letters\n   downcased, i.e., either \"universal\"\
    , \"application\", or \"private\".\n   An attribute item with the [local name]\
    \ \"number\" SHALL be added to\n   the [attributes] of the <tagged> element item.\
    \  The\n   [normalized value] of this attribute item is the digit string\n   representation\
    \ of the integer value of the number or DefinedValue in\n   the ClassNumber in\
    \ the Tag.\n   If the Tag is immediately followed by the \"IMPLICIT\" keyword,\
    \ then an\n   attribute item with the [local name] \"tagging\" and [normalized\
    \ value]\n   \"implicit\" SHALL be added to the [attributes] of the <tagged> element\n\
    \   item.\n   If the Tag is immediately followed by the \"EXPLICIT\" keyword,\
    \ then an\n   attribute item with the [local name] \"tagging\" and [normalized\
    \ value]\n   \"explicit\" SHALL be added to the [attributes] of the <tagged> element\n\
    \   item.\n   The translation of the Type in the TaggedType SHALL be added to\
    \ the\n   [children] or [attributes] of the <tagged> element item.\n   Examples\n\
    \      [0] INTEGER\n      <type>\n       <tagged number=\"0\" type=\"asnx:INTEGER\"\
    />\n      </type>\n      [APPLICATION 10] IMPLICIT BOOLEAN\n      <type>\n   \
    \    <tagged tagClass=\"application\" number=\"10\" tagging=\"implicit\"\n   \
    \            type=\"asnx:BOOLEAN\"/>\n      </type>\n"
- title: 6.7.2.  Long Form TaggedType Translation
  contents:
  - "6.7.2.  Long Form TaggedType Translation\n   The long form translation of a TaggedType\
    \ is an element item with the\n   [local name] \"type\".  An element item with\
    \ the [local name]\n   \"annotation\" MAY be added to the [children] of the <type>\
    \ element\n   item.  An element item with the [local name] \"prefixed\" SHALL\
    \ be\n   appended to the [children] of the <type> element item.  The\n   translation\
    \ of the Tag in the TaggedType SHALL be added to the\n   [children] of the <prefixed>\
    \ element item.\n   The translation of a Tag is an element item with the [local\
    \ name]\n   \"TAG\".\n   If the Class of the Tag is not empty, then an attribute\
    \ item with the\n   [local name] \"tagClass\" SHALL be added to the [attributes]\
    \ of the\n   <TAG> element item.  The [normalized value] of this attribute item\
    \ is\n   the Class of the Tag with all letters downcased, i.e., either\n   \"\
    universal\", \"application\", or \"private\".\n   An attribute item with the [local\
    \ name] \"number\" SHALL be added to\n   the [attributes] of the <TAG> element\
    \ item.  The [normalized value]\n   of this attribute item is the digit string\
    \ representation of the\n   integer value of the number or DefinedValue in the\
    \ ClassNumber in the\n   Tag.\n   If the Tag is immediately followed by the \"\
    IMPLICIT\" keyword, then an\n   attribute item with the [local name] \"tagging\"\
    \ and [normalized value]\n   \"implicit\" SHALL be added to the [attributes] of\
    \ the <TAG> element\n   item.\n   If the Tag is immediately followed by the \"\
    EXPLICIT\" keyword, then an\n   attribute item with the [local name] \"tagging\"\
    \ and [normalized value]\n   \"explicit\" SHALL be added to the [attributes] of\
    \ the <TAG> element\n   item.\n   The translation of the Type in the TaggedType\
    \ SHALL be added to the\n   [children] or [attributes] of the <prefixed> element\
    \ item.\n   Examples\n      [0] INTEGER\n      <type>\n       <prefixed type=\"\
    asnx:INTEGER\">\n        <TAG number=\"0\"/>\n       </prefixed>\n      </type>\n\
    \      [APPLICATION 10] IMPLICIT BOOLEAN\n      <type>\n       <prefixed type=\"\
    asnx:BOOLEAN\">\n        <TAG tagClass=\"application\" number=\"10\" tagging=\"\
    implicit\"/>\n       </prefixed>\n      </type>\n"
- title: 6.8.  SelectionType Translation
  contents:
  - "6.8.  SelectionType Translation\n   The translation of a SelectionType is an\
    \ element item with the\n   [local name] \"type\".  An element item with the [local\
    \ name]\n   \"annotation\" MAY be added to the [children] of the <type> element\n\
    \   item.  An element item with the [local name] \"selection\" SHALL be\n   appended\
    \ to the [children] of the <type> element item.\n   The identifier in a SelectionType\
    \ identifies a NamedType in the\n   definition of the Type in the SelectionType.\
    \  The translation of that\n   NamedType will be an element item with the [local\
    \ name] either\n   \"attribute\", \"element\", \"component\", \"group\", or \"\
    member\".  An\n   attribute item with the same [local name] as the translation\
    \ of the\n   NamedType SHALL be added to the [attributes] of the <selection>\n\
    \   element item.  The [normalized value] of this attribute item is a\n   qualified\
    \ name for the expanded name of the NamedType [RXEREI].\n   The translation of\
    \ the Type in the SelectionType SHALL be added to\n   the [children] or [attributes]\
    \ of the <selection> element item.\n   Examples\n      field1 < MyChoiceType\n\
    \      <type>\n       <selection element=\"field1\" type=\"tns:MyChoiceType\"\
    />\n      </type>\n      field2 < CHOICE {\n          field2  [RXER:ATTRIBUTE][RXER:NAME\
    \ AS \"field-two\"] INTEGER\n      }\n      <type>\n       <selection attribute=\"\
    field-two\">\n        <type>\n         <choice>\n          <attribute name=\"\
    field-two\" identifier=\"field2\"\n                     type=\"asnx:INTEGER\"\
    />\n         </choice>\n        </type>\n       </selection>\n      </type>\n"
- title: 6.9.  InstanceOfType Translation
  contents:
  - "6.9.  InstanceOfType Translation\n   The translation of an InstanceOfType is\
    \ an element item with the\n   [local name] \"type\".  An element item with the\
    \ [local name]\n   \"annotation\" MAY be added to the [children] of the <type>\
    \ element\n   item.  An element item with the [local name] \"instanceOf\" SHALL\
    \ be\n   appended to the [children] of the <type> element item.  The\n   translation\
    \ of the DefinedObjectClass in the InstanceOfType SHALL be\n   added to the [children]\
    \ or [attributes] of the <instanceOf> element\n   item.\n   Example\n      INSTANCE\
    \ OF TYPE-IDENTIFIER\n      <type>\n       <instanceOf class=\"asnx:TYPE-IDENTIFIER\"\
    />\n      </type>\n"
- title: 6.10.  ObjectClassFieldType Translation
  contents:
  - "6.10.  ObjectClassFieldType Translation\n   The translation of an ObjectClassFieldType\
    \ is an element item with\n   the [local name] \"type\".  An element item with\
    \ the [local name]\n   \"annotation\" MAY be added to the [children] of the <type>\
    \ element\n   item.  An element item with the [local name] \"fromClass\" SHALL\
    \ be\n   appended to the [children] of the <type> element item.  The\n   translation\
    \ of the DefinedObjectClass in the ObjectClassFieldType\n   SHALL be added to\
    \ the [children] or [attributes] of the <fromClass>\n   element item.  The translation\
    \ of the FieldName (see Section 9.2.6)\n   in the ObjectClassFieldType SHALL be\
    \ added to the [children] or\n   [attributes] of the <fromClass> element item.\n\
    \   Example\n      OPERATION.&Linked.&ArgumentType\n      <type>\n       <fromClass\
    \ class=\"tns:OPERATION\"\n                  fieldName=\"Linked/ArgumentType\"\
    />\n      </type>\n"
- title: 6.11.  TypeFromObject and ValueSetFromObjects Translation
  contents:
  - "6.11.  TypeFromObject and ValueSetFromObjects Translation\n   The translation\
    \ of a TypeFromObject or ValueSetFromObjects is an\n   element item with the [local\
    \ name] \"type\".  An element item with the\n   [local name] \"annotation\" MAY\
    \ be added to the [children] of the\n   <type> element item.  An element item\
    \ with the [local name]\n   \"fromObjects\" SHALL be appended to the [children]\
    \ of the <type>\n   element item.\n   The translation of the ReferencedObjects\
    \ instance in the\n   TypeFromObject or ValueSetFromObjects SHALL be added to\
    \ the\n   [children] or [attributes] of the <fromObjects> element item.\n   The\
    \ translation of the FieldName in the TypeFromObject or\n   ValueSetFromObjects\
    \ SHALL be added to the [children] or [attributes]\n   of the <fromObjects> element\
    \ item.\n   Example\n      invertMatrix.&Errors.&errorCode\n      <type>\n   \
    \    <fromObjects object=\"tns:invertMatrix\"\n                    fieldName=\"\
    Errors/errorCode\"/>\n      </type>\n"
- title: 6.12.  Translation of Combining Types
  contents:
  - "6.12.  Translation of Combining Types\n   This section details the translation\
    \ of the ASN.1 combining types:\n   SET, SEQUENCE, CHOICE, SET OF, and SEQUENCE\
    \ OF.  The combining type\n   definitions all make use of the NamedType notation.\n"
- title: 6.12.1.  NamedType Translation
  contents:
  - "6.12.1.  NamedType Translation\n   A NamedType is translated in one of three\
    \ ways depending on the\n   context.  These are the normal translation, the member\
    \ translation,\n   and the item translation.  These translations are not\n   interchangeable.\
    \  One of the three will be explicitly invoked as part\n   of the translation\
    \ of an enclosing combining type.\n   The normal translation of a NamedType is\
    \ an element item with the\n   [local name] determined as follows:\n   (1) if\
    \ the NamedType is subject to an ATTRIBUTE or ATTRIBUTE-REF\n       encoding instruction,\
    \ or subject to a COMPONENT-REF encoding\n       instruction that references a\
    \ top-level NamedType that is subject\n       to an ATTRIBUTE encoding instruction,\
    \ then the [local name] is\n       \"attribute\",\n   (2) else if the NamedType\
    \ is subject to a GROUP encoding instruction,\n       then the [local name] is\
    \ \"group\",\n   (3) else if the NamedType is subject to a SIMPLE-CONTENT encoding\n\
    \       instruction, then the [local name] is \"simpleContent\",\n   (4) otherwise,\
    \ the [local name] is \"element\" or \"component\"\n       (translator's choice).\n\
    \      Aside: The local names \"element\" and \"component\" are synonymous.\n\
    \      The \"component\" alternative is offered for specifying applications\n\
    \      that don't use RXER (except for the ASN.X specification itself, of\n  \
    \    course), where referring to parts of an encoding as elements would\n    \
    \  seem incongruous.\n   The member translation of a NamedType is an element item\
    \ with the\n   [local name] \"member\".\n   The item translation of a NamedType\
    \ is an element item with the\n   [local name] \"item\".\n      Aside: A Namedtype\
    \ for which the member or item translation is\n      invoked will never be subject\
    \ to an ATTRIBUTE, ATTRIBUTE-REF,\n      COMPONENT-REF, GROUP, SIMPLE-CONTENT,\
    \ or TYPE-AS-VERSION encoding\n      instruction.  These encoding instructions\
    \ are also mutually\n      exclusive [RXEREI].\n   An element item with the [local\
    \ name] \"annotation\" MAY be added to\n   the [children] of the <attribute>,\
    \ <element>, <component>, <group>,\n   <item>, <member>, or <simpleContent> element\
    \ item.\n   If a NamedType is subject to a TYPE-AS-VERSION encoding instruction,\n\
    \   then an attribute item with the [local name] \"typeAsVersion\" and\n   [normalized\
    \ value] \"true\" or \"1\" SHALL be added to the <element> or\n   <component>\
    \ element item.  For the normal translation, if a NamedType\n   is not subject\
    \ to an ATTRIBUTE, ATTRIBUTE-REF, COMPONENT-REF, GROUP,\n   SIMPLE-CONTENT, or\
    \ TYPE-AS-VERSION encoding instruction, then an\n   attribute item with the [local\
    \ name] \"typeAsVersion\" and\n   [normalized value] \"false\" or \"0\" MAY be\
    \ added to the <element> or\n   <component> element item.\n   For the normal,\
    \ member, and item translations, if a NamedType is not\n   subject to an ATTRIBUTE-REF,\
    \ COMPONENT-REF, ELEMENT-REF, or\n   REF-AS-ELEMENT encoding instruction, then\
    \ an attribute item with the\n   [local name] \"name\" SHALL be added to the [attributes]\
    \ of the\n   <attribute>, <element>, <component>, <group>, <item>, <member>, or\n\
    \   <simpleContent> element item.  The [normalized value] of this\n   attribute\
    \ item is the local name of the expanded name of the\n   NamedType [RXEREI].\n\
    \      Aside: If there are no NAME, ATTRIBUTE-REF, COMPONENT_REF,\n      ELEMENT-REF\
    \ or REF-AS-ELEMENT encoding instructions, then the\n      local name of the expanded\
    \ name of a NamedType is the same as the\n      identifier in the NamedType.\n\
    \   If the reduction of the local name (an NCName) of the expanded name\n   of\
    \ a NamedType is not the same as the identifier in the NamedType,\n   then an\
    \ attribute item with the [local name] \"identifier\" SHALL be\n   added to the\
    \ [attributes] of the <attribute>, <element>, <component>,\n   <group>, <item>,\
    \ <member>, or <simpleContent> element item;\n   otherwise, an attribute item\
    \ with the [local name] \"identifier\" MAY\n   be added to the [attributes] of\
    \ the aforementioned element item.  The\n   [normalized value] of this attribute\
    \ item is the identifier in the\n   NamedType.\n      Aside: The identifier attribute\
    \ is not contingent on there being a\n      name attribute.  That is, an element\
    \ item can have an identifier\n      attribute item without having a name attribute\
    \ item.\n   If a NamedType is subject to a COMPONENT-REF encoding instruction,\n\
    \   then an attribute item with the [local name] \"ref\" SHALL be added to\n \
    \  the [attributes] of the <attribute>, <element>, or <component>\n   element\
    \ item.  The [normalized value] of this attribute item is a\n   qualified name\
    \ for the expanded name of the top-level NamedType\n   referenced by the encoding\
    \ instruction.  If the expanded name is not\n   distinct with respect to the current\
    \ module and the modules\n   referenced by its <import> element items (see Section\
    \ 5.1), then an\n   attribute item with the [local name] \"context\" SHALL be\
    \ added to the\n   [attributes] of the <attribute>, <element>, or <component>\
    \ element\n   item; otherwise, if the module containing the referenced top-level\n\
    \   NamedType has a schema identity URI, then an attribute item with the\n   [local\
    \ name] \"context\" MAY be added to the [attributes] of the\n   <attribute>, <element>,\
    \ or <component> element item.  The\n   [normalized value] of this attribute item\
    \ is the schema identity URI\n   of the module containing the referenced top-level\
    \ NamedType.\n      Aside: If an expanded name is not distinct, then the module\n\
    \      containing the referenced top-level NamedType must have a schema\n    \
    \  identity URI (see Section 5.1).\n   If a NamedType is subject to a COMPONENT-REF\
    \ encoding instruction,\n   then an attribute item with the [local name] \"embedded\"\
    \ and\n   [normalized value] \"false\" or \"0\" MAY be added to the [attributes]\
    \ of\n   the <attribute>, <element>, or <component> element item.\n   If a NamedType\
    \ is subject to an ATTRIBUTE-REF or ELEMENT-REF encoding\n   instruction, then\
    \ an attribute item with the [local name] \"ref\" SHALL\n   be added to the [attributes]\
    \ of the <attribute>, <element>, or\n   <component> element item.  The [normalized\
    \ value] of this attribute\n   item is the RXER character data translation of\
    \ the QNameValue in the\n   encoding instruction.  An attribute item with the\
    \ [local name]\n   \"embedded\" and [normalized value] \"true\" or \"1\" SHALL\
    \ be added to the\n   [attributes] of the <attribute>, <element>, or <component>\
    \ element\n   item.\n   If a NamedType is subject to a REF-AS-ELEMENT encoding\
    \ instruction,\n   then an attribute item with the [local name] \"elementType\"\
    \ SHALL be\n   added to the [attributes] of the <element> or <component> element\n\
    \   item.  The [normalized value] of this attribute item is the RXER\n   character\
    \ data translation of the NameValue in the REF-AS-ELEMENT\n   encoding instruction.\
    \  If a Namespace is present in the\n   REF-AS-ELEMENT encoding instruction, then\
    \ an attribute item with the\n   [local name] \"namespace\" SHALL be added to\
    \ the [attributes] of the\n   <element> or <component> element item.  The [normalized\
    \ value] of\n   this attribute item is the string value of the AnyURIValue in\
    \ the\n   Namespace.\n   If a ContextParameter is present in the RefParameters\
    \ in the\n   ATTRIBUTE-REF, ELEMENT-REF, or REF-AS-ELEMENT encoding instruction,\n\
    \   then an attribute item with the [local name] \"context\" SHALL be added\n\
    \   to the [attributes] of the <attribute>, <element>, or <component>\n   element\
    \ item.  The [normalized value] of this attribute item is the\n   string value\
    \ of the AnyURIValue in the ContextParameter.\n   If a NamedType is subject to\
    \ both an ATTRIBUTE encoding instruction\n   and a VERSION-INDICATOR encoding\
    \ instruction, then an attribute item\n   with the [local name] \"versionIndicator\"\
    \ and [normalized value]\n   \"true\" or \"1\" SHALL be added to the <attribute>\
    \ element item.  If a\n   NamedType is subject to an ATTRIBUTE encoding instruction\
    \ and not\n   subject to a VERSION-INDICATOR encoding instruction, then an\n \
    \  attribute item with the [local name] \"versionIndicator\" and\n   [normalized\
    \ value] \"false\" or \"0\" MAY be added to the <attribute>\n   element item.\n\
    \   If a NamedType is not subject to an ATTRIBUTE-REF, COMPONENT-REF,\n   ELEMENT-REF,\
    \ or REF-AS-ELEMENT encoding instruction, then the\n   translation of the Type\
    \ in the NamedType SHALL be added to the\n   [children] or [attributes] of the\
    \ <attribute>, <element>,\n   <component>, <group>, <item>, <member>, or <simpleContent>\
    \ element\n   item.\n   If a NamedType is subject to an ATTRIBUTE-REF, COMPONENT-REF,\n\
    \   ELEMENT-REF, or REF-AS-ELEMENT encoding instruction, then the\n   translation\
    \ of each EncodingPrefix (Section 6.7) and Tag\n   (Section 6.7.2) textually within\
    \ the NamedType SHALL be added in\n   order to the [children] of the <attribute>,\
    \ <element>, or <component>\n   element item.\n   Example\n      CHOICE {\n  \
    \        one    INTEGER,\n          two    [RXER:ATTRIBUTE] BOOLEAN,\n       \
    \   three  [RXER:ATTRIBUTE-REF\n                     { namespace-name \"http://www.example.com/schema\"\
    ,\n                       local-name \"foo\" }]\n                 UTF8String,\n\
    \          bar    [RXER:ELEMENT-REF\n                     { namespace-name \"\
    http://www.example.com/schema\",\n                       local-name \"bar\" }]\n\
    \                 Markup,\n          five   [0] [RXER:REF-AS-ELEMENT \"product\"\
    \n                     CONTEXT \"http://www.example.com/inventory\"]\n       \
    \          Markup,\n          six    [RXER:GROUP] MySequence\n      }\n      <type>\n\
    \       <choice xmlns:ex=\"http://www.example.com/schema\">\n        <element\
    \ name=\"one\" type=\"asnx:INTEGER\"/>\n        <attribute name=\"two\" type=\"\
    asnx:BOOLEAN\"/>\n        <attribute ref=\"ex:foo\" identifier=\"three\" embedded=\"\
    true\"/>\n        <element ref=\"ex:bar\" embedded=\"true\"/>\n        <element\
    \ elementType=\"product\"\n                 context=\"http://www.example.com/inventory\"\
    \n                 identifier=\"five\">\n         <TAG number=\"0\"/>\n      \
    \  </element>\n        <group name=\"six\" type=\"tns:MySequence\"/>\n       </choice>\n\
    \      </type>\n"
- title: 6.12.2.  SequenceType Translation
  contents:
  - "6.12.2.  SequenceType Translation\n   The translation of a SequenceType is an\
    \ element item with the\n   [local name] \"type\".  An element item with the [local\
    \ name]\n   \"annotation\" MAY be added to the [children] of the <type> element\n\
    \   item.  An element item with the [local name] \"sequence\" SHALL be\n   appended\
    \ to the [children] of the <type> element item.  The\n   translation of each ComponentType\
    \ nested in the ComponentTypeList in\n   the initial RootComponentTypeList, if\
    \ present, SHALL be appended to\n   the [children] of the <sequence> element item.\n\
    \   If an ExtensionAndException is present, then an element item with the\n  \
    \ [local name] \"extension\" SHALL be appended to the [children] of the\n   <sequence>\
    \ element item.  If an ExceptionSpec is present in the\n   ExtensionAndException,\
    \ then the translation of the ExceptionSpec\n   (possibly empty) SHALL be added\
    \ to the [children] of the <extension>\n   element item.\n   If an ExtensionAdditions\
    \ instance is present, then the translation of\n   each ExtensionAdditionGroup\
    \ or ComponentType nested in the\n   ExtensionAdditions (if any) SHALL be appended\
    \ to the [children] of\n   the <extension> element item.\n   If an ExtensionEndMarker\
    \ is present, then the translation of each\n   ComponentType nested in the ComponentTypeList\
    \ in the final\n   RootComponentTypeList SHALL be appended to the [children] of\
    \ the\n   <sequence> element item.\n   The translation of an ExtensionAdditionGroup\
    \ is an element item with\n   the [local name] \"extensionGroup\".  If the VersionNumber\
    \ in the\n   ExtensionAdditionGroup is not empty, then an attribute item with\
    \ the\n   [local name] \"version\" SHALL be added to the [attributes] of the\n\
    \   <extensionGroup> element item.  The [normalized value] of this\n   attribute\
    \ item is the number in the VersionNumber.  The translation\n   of each ComponentType\
    \ nested in the ExtensionAdditionGroup SHALL be\n   appended to the [children]\
    \ of the <extensionGroup> element item.\n   The translation of a ComponentType\
    \ of the \"NamedType\" form is the\n   normal translation of the NamedType.\n\
    \   The translation of a ComponentType of the \"NamedType OPTIONAL\" form\n  \
    \ is an element item with the [local name] \"optional\".  The normal\n   translation\
    \ of the NamedType SHALL be added to the [children] of the\n   <optional> element\
    \ item.\n   The translation of a ComponentType of the \"NamedType DEFAULT Value\"\
    \n   form is an element item with the [local name] \"optional\".  The normal\n\
    \   translation of the NamedType SHALL be added to the [children] of the\n   <optional>\
    \ element item.  An element item with the [local name]\n   \"default\" SHALL be\
    \ appended to the [children] of the <optional>\n   element item.  The translation\
    \ of the Value SHALL be added to the\n   [children] or [attributes] of the <default>\
    \ element item.\n   The translation of a ComponentType of the \"COMPONENTS OF\
    \ Type\" form\n   is an element item with the [local name] \"componentsOf\". \
    \ The\n   translation of the Type SHALL be added to the [children] or\n   [attributes]\
    \ of the <componentsOf> element item.\n   Example\n      SEQUENCE {\n        \
    \  one    INTEGER,\n          two    [RXER:ATTRIBUTE] BOOLEAN OPTIONAL,\n    \
    \      ...,\n          [[ 2:\n              four   NULL\n          ]],\n     \
    \     COMPONENTS OF MySequence,\n          ...,\n          three   PrintableString\
    \ DEFAULT \"third\"\n      }\n      <type>\n       <sequence>\n        <element\
    \ name=\"one\" type=\"asnx:INTEGER\"/>\n        <optional>\n         <attribute\
    \ name=\"two\" type=\"asnx:BOOLEAN\"/>\n        </optional>\n        <extension>\n\
    \         <extensionGroup version=\"2\">\n          <element name=\"four\" type=\"\
    asnx:NULL\"/>\n         </extensionGroup>\n         <componentsOf type=\"tns:MySequence\"\
    />\n        </extension>\n        <optional>\n         <element name=\"three\"\
    \ type=\"asnx:PrintableString\"/>\n         <default literalValue=\"third\"/>\n\
    \        </optional>\n       </sequence>\n      </type>\n"
- title: 6.12.3.  SetType Translation
  contents:
  - "6.12.3.  SetType Translation\n   The translation of a SetType follows the same\
    \ procedure as the\n   translation of a SequenceType except that SetType replaces\n\
    \   SequenceType, \"SET\" replaces \"SEQUENCE\", and the [local name] \"set\"\n\
    \   is used instead of \"sequence\".\n"
- title: 6.12.4.  ChoiceType Translation
  contents:
  - "6.12.4.  ChoiceType Translation\n   The translation of a ChoiceType that is not\
    \ subject to a UNION\n   encoding instruction is an element item with the [local\
    \ name] \"type\".\n   An element item with the [local name] \"annotation\" MAY\
    \ be added to\n   the [children] of the <type> element item.  An element item\
    \ with the\n   [local name] \"choice\" SHALL be appended to the [children] of\
    \ the\n   <type> element item.  The normal translation of each NamedType nested\n\
    \   in the AlternativeTypeList in the RootAlternativeTypeList in the\n   AlternativeTypeLists\
    \ SHALL be appended to the [children] of the\n   <choice> element item.\n   If\
    \ an ExtensionAndException is present in the AlternativeTypeLists,\n   then an\
    \ element item with the [local name] \"extension\" SHALL be\n   appended to the\
    \ [children] of the <choice> element item.  If an\n   ExceptionSpec is present\
    \ in the ExtensionAndException, then the\n   translation of the ExceptionSpec\
    \ (possibly empty) is added to the\n   [children] of the <extension> element item.\n\
    \   If an ExtensionAdditionAlternatives instance is present in the\n   AlternativeTypeLists,\
    \ then the translation of each\n   ExtensionAdditionAlternativesGroup or NamedType\
    \ (if any) nested in\n   the ExtensionAdditionAlternatives SHALL be appended in\
    \ order to the\n   [children] of the <extension> element item.  The normal translation\n\
    \   of the NamedType is used.\n   The translation of an ExtensionAdditionAlternativesGroup\
    \ is an\n   element item with the [local name] \"extensionGroup\".  If the\n \
    \  VersionNumber in the ExtensionAdditionAlternativesGroup is not empty,\n   then\
    \ an attribute item with the [local name] \"version\" SHALL be added\n   to the\
    \ [attributes] of the <extensionGroup> element item.  The\n   [normalized value]\
    \ of this attribute item is the number in the\n   VersionNumber.  The normal translation\
    \ of each NamedType nested in\n   the AlternativeTypeList in the ExtensionAdditionAlternativesGroup\n\
    \   SHALL be appended to the [children] of the <extensionGroup> element\n   item.\n\
    \   Example\n      CHOICE {\n          one  INTEGER,\n          two  [RXER:NAME\
    \ AS \"Two\"] BOOLEAN,\n          ...,\n          [[ 2:\n              three \
    \ NULL\n          ]],\n          four  PrintableString,\n          ...\n     \
    \ }\n      <type>\n       <choice>\n        <element name=\"one\" type=\"asnx:INTEGER\"\
    />\n        <element name=\"Two\" type=\"asnx:BOOLEAN\"/>\n        <extension>\n\
    \         <extensionGroup version=\"2\">\n          <element name=\"three\" type=\"\
    asnx:NULL\"/>\n         </extensionGroup>\n         <element name=\"four\" type=\"\
    asnx:PrintableString\"/>\n        </extension>\n       </choice>\n      </type>\n"
- title: 6.12.5.  Translation of UNION Types
  contents:
  - "6.12.5.  Translation of UNION Types\n   The translation of a ChoiceType that\
    \ is subject to a UNION encoding\n   instruction follows the same procedure as\
    \ the translation of a\n   ChoiceType that is not subject to a UNION encoding\
    \ instruction except\n   that the [local name] \"union\" is used instead of \"\
    choice\", and the\n   member translation of each NamedType is used instead of\
    \ the normal\n   translation.\n   In addition, if the UNION encoding instruction\
    \ has a PrecedenceList,\n   then an attribute item with the [local name] \"precedence\"\
    \ SHALL be\n   added to the [attributes] of the <union> element item.  The\n \
    \  [normalized value] of this attribute item is the white space\n   separated\
    \ list of qualified names for the expanded names of the\n   NamedType instances\
    \ [RXEREI] corresponding to the identifiers in the\n   PrecedenceList.  A white\
    \ space separator is one or more of the white\n   space characters.\n   Example\n\
    \      [RXER:UNION PRECEDENCE utf8 visible] CHOICE {\n          printable  PrintableString,\n\
    \          teletex    TeletexString,\n          visible    [RXER:NAME AS \"ascii\"\
    ] VisibleString,\n          ...,\n          utf8       UTF8String\n      }\n \
    \     <type>\n       <union precedence=\"utf8 ascii\">\n        <member name=\"\
    printable\" type=\"asnx:PrintableString\"/>\n        <member name=\"teletex\"\
    \ type=\"asnx:TeletexString\"/>\n        <member name=\"ascii\" identifier=\"\
    visible\"\n                type=\"asnx:VisibleString\"/>\n        <extension>\n\
    \         <member name=\"utf8\" type=\"asnx:UTF8String\"/>\n        </extension>\n\
    \       </union>\n      </type>\n"
- title: 6.12.6.  SequenceOfType Translation
  contents:
  - "6.12.6.  SequenceOfType Translation\n   The translation of a SequenceOfType that\
    \ is not subject to a LIST\n   encoding instruction is an element item with the\
    \ [local name] \"type\".\n   An element item with the [local name] \"annotation\"\
    \ MAY be added to\n   the [children] of the <type> element item.  An element item\
    \ with the\n   [local name] \"sequenceOf\" SHALL be appended to the [children]\
    \ of the\n   <type> element item.\n   If the SequenceOfType is of the \"SEQUENCE\
    \ OF NamedType\" form, then\n   the normal translation of the NamedType SHALL\
    \ be added to the\n   [children] of the <sequenceOf> element item.\n   If the\
    \ SequenceOfType is of the \"SEQUENCE OF Type\" form, then an\n   element item\
    \ with the [local name] \"element\" or \"component\"\n   (translator's choice)\
    \ SHALL be added to the [children] of the\n   <sequenceOf> element item.  An attribute\
    \ item with the [local name]\n   \"name\" and [normalized value] \"item\" SHALL\
    \ be added to the\n   [attributes] of the <element> or <component> element item.\
    \  An\n   attribute item with the [local name] \"identifier\" and empty\n   [normalized\
    \ value] SHALL be added to the [attributes] of the\n   <element> or <component>\
    \ element item.  The translation of the Type\n   SHALL be added to the [children]\
    \ or [attributes] of the <element> or\n   <component> element item.\n   Examples\n\
    \      SEQUENCE OF INTEGER\n      <type>\n       <sequenceOf>\n        <element\
    \ name=\"item\" identifier=\"\" type=\"asnx:INTEGER\"/>\n       </sequenceOf>\n\
    \      </type>\n      SEQUENCE OF counter INTEGER\n      <type>\n       <sequenceOf>\n\
    \        <element name=\"counter\" type=\"asnx:INTEGER\"/>\n       </sequenceOf>\n\
    \      </type>\n"
- title: 6.12.7.  Translation of LIST Types
  contents:
  - "6.12.7.  Translation of LIST Types\n   The translation of a SequenceOfType that\
    \ is subject to a LIST\n   encoding instruction is an element item with the [local\
    \ name] \"type\".\n   An element item with the [local name] \"annotation\" MAY\
    \ be added to\n   the [children] of the <type> element item.  An element item\
    \ with the\n   [local name] \"list\" SHALL be appended to the [children] of the\
    \ <type>\n   element item.  The item translation of the NamedType in the\n   SequenceOfType\
    \ SHALL be added to the [children] of the <list> element\n   item.\n      Aside:\
    \ A SequenceOfType is necessarily of the\n      \"SEQUENCE OF NamedType\" form\
    \ for a LIST encoding instruction.\n   Example\n      [RXER:LIST] SEQUENCE OF\
    \ number INTEGER\n      <type>\n       <list>\n        <item name=\"number\" type=\"\
    asnx:INTEGER\"/>\n       </list>\n      </type>\n"
- title: 6.12.8.  SetOfType Translation
  contents:
  - "6.12.8.  SetOfType Translation\n   The translation of a SetOfType follows the\
    \ same procedure as the\n   translation of a SequenceOfType except that SetOfType\
    \ replaces\n   SequenceOfType, \"SET\" replaces \"SEQUENCE\", and the [local name]\n\
    \   \"setOf\" is used instead of \"sequenceOf\".\n"
- title: 6.12.9.  Effect of Insertion Encoding Instructions
  contents:
  - "6.12.9.  Effect of Insertion Encoding Instructions\n   If a Type is subject to\
    \ a NO-INSERTIONS, HOLLOW-INSERTIONS,\n   SINGULAR-INSERTIONS, UNIFORM-INSERTIONS,\
    \ or MULTIFORM-INSERTIONS\n   encoding instruction, then an attribute item with\
    \ the [local name]\n   \"insertions\" SHALL be added to the [attributes] of the\
    \ <choice>,\n   <sequence> or <set> element item in the [children] of the <type>\n\
    \   element item resulting from the translation of the Type.  The\n   [normalized\
    \ value] of this attribute item is \"none\" in the case of a\n   NO-INSERTIONS\
    \ encoding instruction, \"hollow\" in the case of a\n   HOLLOW-INSERTIONS encoding\
    \ instruction, \"singular\" in the case of a\n   SINGULAR-INSERTIONS encoding\
    \ instruction, \"uniform\" in the case of a\n   UNIFORM-INSERTIONS encoding instruction,\
    \ and \"multiform\" in the case\n   of a MULTIFORM-INSERTIONS encoding instruction.\n\
    \   Example\n      [NO-INSERTIONS] CHOICE {\n          one  [RXER:GROUP] [RXER:SINGULAR-INSERTIONS]\
    \ CHOICE {\n              two  INTEGER,\n              ...\n          },\n   \
    \       ...\n      }\n      <type>\n       <choice insertions=\"none\">\n    \
    \    <group name=\"one\">\n         <type>\n          <choice insertions=\"singular\"\
    >\n           <element name=\"two\" type=\"asnx:INTEGER\"/>\n           <extension/>\n\
    \          </choice>\n         </type>\n        </group>\n        <extension/>\n\
    \       </choice>\n      </type>\n"
- title: 6.13.  Translation of Constrained Types
  contents:
  - "6.13.  Translation of Constrained Types\n   If a ConstrainedType is of the \"\
    Type Constraint\" form, then the\n   translation of the ConstrainedType is an\
    \ element item with the\n   [local name] \"type\".  An element item with the [local\
    \ name]\n   \"annotation\" MAY be added to the [children] of the <type> element\n\
    \   item.  An element item with the [local name] \"constrained\" SHALL be\n  \
    \ appended to the [children] of the <type> element item.  The\n   translation\
    \ of the Type SHALL be added to the [children] or\n   [attributes] of the <constrained>\
    \ element item.  The translation of\n   the Constraint SHALL be added to the [children]\
    \ of the <constrained>\n   element item.\n   The translation of a ContainedType\
    \ that is a TypeWithConstraint is\n   the translation of the TypeWithConstraint.\n\
    \   Definition (simple endpoint):  A LowerEndpoint or UpperEndpoint is a\n   simple\
    \ endpoint if it is closed and its value is \"MIN\", \"MAX\", or a\n   SignedNumber\
    \ in an IntegerValue in a BuiltinValue in the Value of the\n   endpoint.\n   Definition\
    \ (simple range SizeConstraint): A SizeConstraint is a\n   simple range if the\
    \ Constraint in the SizeConstraint contains only a\n   ValueRange (i.e., a ValueRange\
    \ in a SubtypeElements instance in an\n   Elements instance in a lone IntersectionElements\
    \ instance in a lone\n   Intersections instance in a Unions instance in an ElementSetSpec\
    \ in a\n   RootElementSetSpec in an ElementSetSpecs instance without an\n   AdditionalElementSetSpec\
    \ in a SubtypeConstraint in a ConstraintSpec\n   in the Constraint) and both endpoints\
    \ are simple.\n   Definition (simple range Constraint): A Constraint is a simple\
    \ range\n   if contains only a SizeConstraint that is a simple range (i.e., a\n\
    \   simple range SizeConstraint in a SubtypeElements instance in an\n   Elements\
    \ instance in a lone IntersectionElements instance in a lone\n   Intersections\
    \ instance in a Unions instance in an ElementSetSpec in a\n   RootElementSetSpec\
    \ in an ElementSetSpecs instance without an\n   AdditionalElementSetSpec in a\
    \ SubtypeConstraint in a ConstraintSpec\n   in the Constraint).\n   If the Constraint\
    \ or SizeConstraint in a TypeWithConstraint is a\n   simple range, then the compact\
    \ translation of the TypeWithConstraint\n   MAY be used; otherwise, the full translation\
    \ of the\n   TypeWithConstraint is used.\n   The compact translation of a TypeWithConstraint\
    \ is initially the\n   translation of its notional parent type.  If the value\
    \ of the lower\n   endpoint is not \"MIN\" or \"0\", then an attribute item with\
    \ the\n   [local name] \"minSize\" SHALL be added to the [attributes] of the\n\
    \   <sequenceOf>, <setOf>, or <list> element item resulting from the\n   translation\
    \ of the parent type.  The [normalized value] of this\n   attribute item is the\
    \ value of the lower endpoint.  If the value of\n   the lower endpoint is \"MIN\"\
    \ or \"0\", then an attribute item with the\n   [local name] \"minSize\" and [normalized\
    \ value] \"0\" MAY be added to the\n   [attributes] of the <sequenceOf>, <setOf>,\
    \ or <list> element item.\n   If the value of the upper endpoint is not \"MAX\"\
    , then an attribute\n   item with the [local name] \"maxSize\" SHALL be added\
    \ to the\n   [attributes] of the <sequenceOf>, <setOf>, or <list> element item.\n\
    \   The [normalized value] of this attribute item is the value of the\n   upper\
    \ endpoint.\n   The full translation of a TypeWithConstraint is an element item\
    \ with\n   the [local name] \"type\".  An element item with the [local name]\n\
    \   \"annotation\" MAY be added to the [children] of the <type> element\n   item.\
    \  An element item with the [local name] \"constrained\" SHALL be\n   appended\
    \ to the [children] of the <type> element item.  The\n   translation of the notional\
    \ parent type of the TypeWithConstraint\n   SHALL be added to the [children] or\
    \ [attributes] of the <constrained>\n   element item.  The translation of the\
    \ Constraint or SizeConstraint in\n   the TypeWithConstraint SHALL be added to\
    \ the [children] of the\n   <constrained> element item.\n   Examples\n      SEQUENCE\
    \ (SIZE(1..MAX)) OF number INTEGER\n      <type>\n       <sequenceOf minSize=\"\
    1\">\n        <element name=\"number\" type=\"asnx:INTEGER\"/>\n       </sequenceOf>\n\
    \      </type>\n      SEQUENCE SIZE(0..10) OF number INTEGER\n      <type>\n \
    \      <sequenceOf maxSize=\"10\">\n        <element name=\"number\" type=\"asnx:INTEGER\"\
    />\n       </sequenceOf>\n      </type>\n      SEQUENCE SIZE(1..limit) OF number\
    \ INTEGER\n      <type>\n       <constrained>\n        <type>\n         <sequenceOf>\n\
    \          <element name=\"number\" type=\"asnx:INTEGER\"/>\n         </sequenceOf>\n\
    \        </type>\n        <size>\n         <range>\n          <minInclusive literalValue=\"\
    1\"/>\n          <maxInclusive value=\"tns:limit\"/>\n         </range>\n    \
    \    </size>\n       </constrained>\n      </type>\n"
- title: 6.13.1.  Constraint Translation
  contents:
  - "6.13.1.  Constraint Translation\n   The translation of a Constraint is the translation\
    \ of the\n   ConstraintSpec in the Constraint followed by the translation of the\n\
    \   ExceptionSpec (possibly empty) in the Constraint.\n   The translation of a\
    \ ConstraintSpec is the translation of the\n   SubtypeConstraint or GeneralConstraint\
    \ in the ConstraintSpec.\n   The translation of a SubtypeConstraint is the translation\
    \ of the\n   ElementSetSpecs in the SubtypeConstraint.\n   The translation of\
    \ a GeneralConstraint [X.682] is the translation of\n   the UserDefinedConstraint,\
    \ TableConstraint, or ContentsConstraint in\n   the GeneralConstraint.\n"
- title: 6.13.2.  UserDefinedConstraint Translation
  contents:
  - "6.13.2.  UserDefinedConstraint Translation\n   The translation of a UserDefinedConstraint\
    \ is an element item with\n   the [local name] \"constrainedBy\".  An element\
    \ item with the\n   [local name] \"annotation\" MAY be added to the [children]\
    \ of the\n   <constrainedBy> element item.  The translation of each\n   UserDefinedConstraintParameter\
    \ in the UserDefinedConstraint SHALL be\n   appended to the [children] of the\
    \ <constrainedBy> element item.\n   The translation of a UserDefinedConstraintParameter\
    \ of the\n   \"Governor : Value\" form is an element item with the [local name]\n\
    \   \"valueParameter\".  The translation of the Type in the Governor SHALL\n \
    \  be added to the [children] or [attributes] of the <valueParameter>\n   element\
    \ item.  The translation of the Value SHALL be added to the\n   [children] or\
    \ [attributes] of the <valueParameter> element item.\n   The translation of a\
    \ UserDefinedConstraintParameter of the\n   \"Governor : ValueSet\" form is an\
    \ element item with the [local name]\n   \"valueSetParameter\".  The translation\
    \ of the Type in the Governor\n   SHALL be added to the [children] or [attributes]\
    \ of the\n   <valueSetParameter> element item.  The translation of the ValueSet\n\
    \   SHALL be added to the [children] of the <valueSetParameter> element\n   item.\n\
    \   The translation of a UserDefinedConstraintParameter of the\n   \"Governor\
    \ : Object\" form is an element item with the [local name]\n   \"objectParameter\"\
    .  The translation of the DefinedObjectClass in the\n   Governor SHALL be added\
    \ to the [children] or [attributes] of the\n   <objectParameter> element item.\
    \  The translation of the Object SHALL\n   be added to the [children] or [attributes]\
    \ of the <objectParameter>\n   element item.\n   The translation of a UserDefinedConstraintParameter\
    \ of the\n   \"Governor : ObjectSet\" form is an element item with the [local\
    \ name]\n   \"objectSetParameter\".  The translation of the DefinedObjectClass\
    \ in\n   the Governor SHALL be added to the [children] or [attributes] of the\n\
    \   <objectSetParameter> element item.  The translation of the ObjectSet\n   SHALL\
    \ be added to the [children] or [attributes] of the\n   <objectSetParameter> element\
    \ item.\n   The translation of a UserDefinedConstraintParameter that is a Type\
    \ is\n   an element item with the [local name] \"typeParameter\".  The\n   translation\
    \ of the Type SHALL be added to the [children] or\n   [attributes] of the <typeParameter>\
    \ element item.\n   The translation of a UserDefinedConstraintParameter that is\
    \ a\n   DefinedObjectClass is an element item with the [local name]\n   \"classParameter\"\
    .  The translation of the DefinedObjectClass SHALL be\n   added to the [children]\
    \ or [attributes] of the <classParameter>\n   element item.\n   Example\n    \
    \  OCTET STRING\n          (CONSTRAINED BY {\n              -- contains the hash\
    \ of the value -- MyType:myValue })\n      <type>\n       <constrained type=\"\
    asnx:OCTET-STRING\">\n        <constrainedBy>\n         <annotation> contains\
    \ the hash of the value </annotation>\n         <valueParameter type=\"tns:MyType\"\
    \ value=\"tns:myValue\"/>\n        </constrainedBy>\n       </constrained>\n \
    \     </type>\n"
- title: 6.13.3.  TableConstraint Translation
  contents:
  - "6.13.3.  TableConstraint Translation\n   The translation of a TableConstraint\
    \ that is a SimpleTableConstraint\n   is an element item with the [local name]\
    \ \"table\".  The translation of\n   the ObjectSet in the SimpleTableConstraint\
    \ SHALL be added to the\n   [children] or [attributes] of the <table> element\
    \ item.\n   The translation of a TableConstraint that is a\n   ComponentRelationConstraint\
    \ is an element item with the [local name]\n   \"table\".  The translation of\
    \ the DefinedObjectSet in the\n   ComponentRelationConstraint SHALL be added to\
    \ the [children] or\n   [attributes] of the <table> element item.  The translation\
    \ of each\n   AtNotation in the ComponentRelationConstraint SHALL be appended\
    \ to\n   the [children] of the <table> element item.\n   The translation of an\
    \ AtNotation is an element item with the\n   [local name] \"restrictBy\".  The\
    \ [children] property of the\n   <restrictBy> element item is set to the sequence\
    \ of character items\n   for the character string formed by the concatenation\
    \ of zero, one, or\n   more \"../\" strings, one for each Level in the AtNotation\
    \ (including\n   the empty one), followed by a solidus ('/', U+002F) separated\
    \ list of\n   qualified names for the expanded names of the NamedType instances\n\
    \   [RXEREI] identified by the identifiers in the ComponentIdList in the\n   AtNotation.\
    \  If a NamedType is subject to an ATTRIBUTE or\n   ATTRIBUTE-REF encoding instruction,\
    \ or subject to a COMPONENT-REF\n   encoding instruction that references a top-level\
    \ NamedType that is\n   subject to an ATTRIBUTE encoding instruction, then the\
    \ qualified name\n   for the expanded name is prefixed with the commercial at\
    \ character\n   ('@', U+0040).  Leading and/or trailing white space character\
    \ items\n   MAY be added to the [children] of the <restrictBy> element item.\n\
    \   White space character items MAY be added immediately before and/or\n   after\
    \ any character item for the solidus character ('/', U+002F).\n   Examples\n \
    \     ERROR.&Type({Errors}{@severity,@...errorId})\n      <type>\n       <constrained>\n\
    \        <type>\n         <fromClass class=\"tns:ERROR\" fieldName=\"Type\"/>\n\
    \        </type>\n        <table objectset=\"tns:Errors\">\n         <restrictBy>severity</restrictBy>\n\
    \         <restrictBy>../../../errorId</restrictBy>\n        </table>\n      \
    \ </constrained>\n      </type>\n      SEQUENCE {\n          id-att  [RXER:NAME\
    \ AS \"ID\"] [RXER:ATTRIBUTE]\n                      TYPE-IDENTIFIER.&id({AllTypes}),\n\
    \          value   TYPE-IDENTIFIER.&Type({AllTypes}{@id-att})\n      }\n     \
    \ <type>\n       <sequence>\n        <attribute name=\"ID\" identifier=\"id-att\"\
    >\n         <type>\n          <constrained>\n           <type>\n            <fromClass\
    \ class=\"asnx:TYPE-IDENTIFIER\" fieldName=\"id\"/>\n           </type>\n    \
    \       <table objectset=\"tns:AllTypes\"/>\n          </constrained>\n      \
    \   </type>\n        </attribute>\n        <element name=\"value\">\n        \
    \ <type>\n          <constrained>\n           <type>\n            <fromClass class=\"\
    asnx:TYPE-IDENTIFIER\" fieldName=\"Type\"/>\n           </type>\n           <table\
    \ objectset=\"tns:AllTypes\">\n            <restrictBy>@ID</restrictBy>\n    \
    \       </table>\n          </constrained>\n         </type>\n        </element>\n\
    \       </sequence>\n      </type>\n   The <restrictBy> element item is required\
    \ to be self-contained\n   [RXER].\n      Aside: An element item is self-contained\
    \ if all namespace prefixes\n      used by the element item and its contents are\
    \ declared within the\n      element item.\n"
- title: 6.13.4.  ContentsConstraint Translation
  contents:
  - "6.13.4.  ContentsConstraint Translation\n   The translation of a ContentsConstraint\
    \ is an element item with the\n   [local name] \"contents\".\n   If the ContentsConstraint\
    \ is of the \"CONTAINING Type\" form, then an\n   element item with the [local\
    \ name] \"containing\" SHALL be added to the\n   [children] of the <contents>\
    \ element item.  The translation of the\n   Type SHALL be added to the [children]\
    \ or [attributes] of the\n   <containing> element item.\n   If the ContentsConstraint\
    \ is of the \"ENCODED BY Value\" form, then an\n   element item with the [local\
    \ name] \"encodedBy\" SHALL be added to the\n   [children] of the <contents> element\
    \ item.  The translation of the\n   Value SHALL be added to the [children] or\
    \ [attributes] of the\n   <encodedBy> element item.\n   If the ContentsConstraint\
    \ is of the\n   \"CONTAINING Type ENCODED BY Value\" form, then an element item\
    \ with\n   the [local name] \"containing\" and an element item with the\n   [local\
    \ name] \"encodedBy\" SHALL be added to the [children] of the\n   <contents> element\
    \ item.  The translation of the Type SHALL be added\n   to the [children] or [attributes]\
    \ of the <containing> element item.\n   The translation of the Value SHALL be\
    \ added to the [children] or\n   [attributes] of the <encodedBy> element item.\n\
    \   Example\n      OCTET STRING\n          (CONTAINING MyType\n           ENCODED\
    \ BY { joint-iso-itu-t asn1(1) basic-encoding(1) })\n      <type>\n       <constrained\
    \ type=\"asnx:OCTET-STRING\">\n        <contents>\n         <containing type=\"\
    tns:MyType\"/>\n         <encodedBy literalValue=\"2.1.1\"/>\n        </contents>\n\
    \       </constrained>\n      </type>\n"
- title: 6.13.5.  ExceptionSpec Translation
  contents:
  - "6.13.5.  ExceptionSpec Translation\n   The translation of an empty ExceptionSpec\
    \ is empty.\n   The translation of a non-empty ExceptionSpec is an element item\
    \ with\n   the [local name] \"exception\".\n   If the ExceptionIdentification\
    \ in a non-empty ExceptionSpec is a\n   SignedNumber, then the translation of\
    \ a notional INTEGER Type SHALL\n   be added to the [children] or [attributes]\
    \ of the <exception> element\n   item, and the translation of a notional Value\
    \ of the INTEGER type\n   with the SignedNumber as its IntegerValue SHALL be added\
    \ to the\n   [children] or [attributes] of the <exception> element item.\n   If\
    \ the ExceptionIdentification in a non-empty ExceptionSpec is a\n   DefinedValue,\
    \ then the translation of a notional INTEGER Type SHALL\n   be added to the [children]\
    \ or [attributes] of the <exception> element\n   item, and the translation of\
    \ the DefinedValue SHALL be added to the\n   [children] or [attributes] of the\
    \ <exception> element item.\n   If the ExceptionIdentification in a non-empty\
    \ ExceptionSpec is of the\n   \"Type : Value\" form, then the translation of the\
    \ Type SHALL be added\n   to the [children] or [attributes] of the <exception>\
    \ element item,\n   and the translation of the Value SHALL be added to the [children]\
    \ or\n   [attributes] of the <exception> element item.\n   Examples\n      !10\n\
    \      <exception type=\"asnx:INTEGER\" literalValue=\"10\"/>\n      !myValue\n\
    \      <exception type=\"asnx:INTEGER\" value=\"tns:myValue\"/>\n      !PrintableString:\"\
    failure\"\n      <exception type=\"asnx:PrintableString\" literalValue=\"failure\"\
    />\n"
- title: 7.  Translation of Values
  contents:
  - "7.  Translation of Values\n   A Value in an ASN.1 specification is a mix of literal\
    \ values (e.g.,\n   numbers and character strings) and notations for referencing\
    \ defined\n   values.  Likewise, the ASN.X translation of a Value is a mix of\n\
    \   markup for literal values and markup for referencing notations\n   (notational\
    \ values).  A Value is categorized by the following\n   definitions.\n   Definition\
    \ (literal value): A Value is a literal value if and only if\n   it is not a notational\
    \ value.\n   Definition (notational value): A Value is a notational value if and\n\
    \   only if:\n   (1) the Value is a BuiltinValue, and\n       (a) the BuiltinValue\
    \ is a TaggedValue and the Value in the\n           TaggedValue is a notational\
    \ value, or\n       (b) the BuiltinValue is a SequenceValue or SetValue with a\n\
    \           ComponentValueList that contains a NamedValue where the Value\n  \
    \         in the NamedValue is a notational value and the translation\n      \
    \     of the corresponding NamedType (from the governing type of\n           the\
    \ outer Value) is not an <element> or <component> element\n           item, or\n\
    \       (c) the BuiltinValue is a ChoiceValue where the Value of the\n       \
    \    ChoiceValue is a notational value and the translation of the\n          \
    \ NamedType corresponding to the identifier in the ChoiceValue\n           is\
    \ not an <element> or <component> element item, or\n       (d) the BuiltinValue\
    \ is a SequenceOfValue or SetOfValue with a\n           NamedValueList that contains\
    \ a NamedValue where the Value of\n           the NamedValue is a notational value\
    \ and the translation of\n           the corresponding NamedType (from the governing\
    \ type of the\n           outer Value) is not an <element> or <component> element\
    \ item,\n           or\n   (2) the Value is a ReferencedValue, and\n       (a)\
    \ the ReferencedValue is a ValueFromObject, or\n       (b) the ReferencedValue\
    \ is a DefinedValue, and\n           (i)   the DefinedValue is a valuereference\
    \ (not a\n                 DummyReference) or an ExternalValueReference, or\n\
    \           (ii)  the DefinedValue is a DummyReference or\n                 ParameterizedValue\
    \ and the substitute definition for\n                 the DummyReference or ParameterizedValue\
    \ (see\n                 Section 13) is a notational value, or\n           (iii)\
    \ the DefinedValue is a DummyReference or\n                 ParameterizedValue\
    \ where the translation of the\n                 DummyReference or ParameterizedValue\
    \ will use a fully\n                 expanded reference (see Section 13), or\n\
    \   (3) the Value is an ObjectClassFieldValue, and\n       (a) the ObjectClassFieldValue\
    \ is an OpenTypeFieldVal, or\n       (b) the ObjectClassFieldValue is a FixedTypeFieldVal,\
    \ and\n           (i)  the FixedTypeFieldVal is a BuiltinValue that satisfies\n\
    \                case (1), or\n           (ii) the FixedTypeFieldVal is a ReferencedValue\
    \ that\n                satisfies case (2).\n   A literal value that is a BuiltinValue\
    \ that is a SequenceValue,\n   SetValue, ChoiceValue, SequenceOfValue, or SetOfValue\
    \ MAY be\n   translated as a notational value.\n   Definition (directly nested):\
    \  A notational value is directly nested\n   (within a literal value) if the innermost\
    \ enclosing Value is a\n   literal value.\n"
- title: 7.1.  Translation of Literal Values
  contents:
  - "7.1.  Translation of Literal Values\n   The translation of a literal value is\
    \ either the attribute form\n   translation of a literal value, or the element\
    \ form translation of a\n   literal value.\n   The attribute form translation\
    \ of a literal value is an attribute\n   item with the [local name] \"literalValue\"\
    .  The [normalized value] of\n   this attribute item is the RXER character data\
    \ translation [RXER] of\n   the literal value.\n   The attribute form translation\
    \ of a literal value SHALL NOT be used\n   if:\n   (1) the RXER Infoset translation\
    \ of the literal value is not a\n       character data translation [RXER] or is\
    \ a character data\n       translation that contains qualified names [XMLNS10][XMLNS11],\
    \ or\n   (2) attribute form translations of Value have been explicitly\n     \
    \  disallowed in the context where the literal value appears, or\n   (3) the literal\
    \ value has a nested notational value.\n   The element form translation of a literal\
    \ value is an element item\n   with the [local name] \"literalValue\".  The [children]\
    \ and\n   [attributes] of the <literalValue> element item are set to the RXER\n\
    \   Infoset translation of the literal value, except that a value of the\n   EXTERNAL\
    \ type (or a subtype thereof) is translated according to the\n   associated type\
    \ defined in Clause 34.5 of X.680 [X.680].  In\n   addition, where the [children]\
    \ and [attributes] of an element item in\n   the translation correspond to a directly\
    \ nested notational value, the\n   translation specified in Section 7.2 MUST be\
    \ used for the [children]\n   and [attributes] of that element item, and an attribute\
    \ item with the\n   [local name] \"literal\", [namespace name]\n   \"urn:ietf:params:xml:ns:asnx\"\
    , and [normalized value] \"false\" or \"0\"\n   (i.e., asnx:literal=\"false\"\
    ) MUST be added to the [attributes] of\n   that element item.\n   Each outermost\
    \ <literalValue> element item is required to be\n   self-contained [RXER].\n \
    \     Aside: An element item is self-contained if all namespace prefixes\n   \
    \   used by the element item and its contents are declared within the\n      element\
    \ item.\n      Aside: A <literalValue> element item nested within another\n  \
    \    <literalValue> element item is not required to be self-contained.\n   An\
    \ attribute item with the [local name] \"literal\", [namespace name]\n   \"urn:ietf:params:xml:ns:asnx\"\
    \ and [normalized value] \"true\" or \"1\"\n   (i.e., asnx:literal=\"true\") MAY\
    \ be added to the [attributes] of the\n   <literalValue> element item and/or any\
    \ nested element item with\n   content and attributes that correspond to a literal\
    \ value.\n      Aside: The asnx:literal attribute operates as a switch that\n\
    \      indicates whether the content and other attributes of the element\n   \
    \   containing the attribute are interpreted as ASN.X notation (a\n      notational\
    \ value) or as an RXER encoding (a literal value).\n   Example\n      zero INTEGER\
    \ ::= 0\n      <namedValue name=\"zero\" type=\"asnx:INTEGER\" literalValue=\"\
    0\"/>\n          OR\n      <namedValue name=\"zero\" type=\"asnx:INTEGER\">\n\
    \       <literalValue>0</literalValue>\n      </namedValue>\n   From the perspective\
    \ of an ASN.X module as the RXER encoding of an\n   ASN.1 value (an abstract value\
    \ of the ModuleDefinition type in\n   Appendix A), the type of the <literalValue>\
    \ element is the\n   unconstrained Markup type [RXER], not the governing type\
    \ of the Value\n   according to the ASN.1 specification.  This means that the\
    \ Infoset\n   representation of the <literalValue> element must be preserved in\n\
    \   re-encodings of the ASN.X module.\n   Similarly, the type of the literalValue\
    \ attribute is a UTF8String,\n   not the governing type of the Value according\
    \ to the ASN.1\n   specification.  This means that the exact characters of the\n\
    \   [normalized value] of the attribute must be preserved in re-encodings\n  \
    \ of the ASN.X module.\n"
- title: 7.2.  Translation of Notational Values
  contents:
  - "7.2.  Translation of Notational Values\n   The translation of a notational value\
    \ is the translation of the\n   BuiltinValue, ReferencedValue, or ObjectClassFieldValue\
    \ in the\n   notational value.\n   The translation of a ReferencedValue is the\
    \ translation of the\n   DefinedValue or ValueFromObject in the ReferencedValue.\n\
    \   The translation for each of these cases is described as creating an\n   element\
    \ item with the [local name] \"value\", which is appropriate for\n   a notational\
    \ value that stands on its own.  However, a notational\n   value may also be directly\
    \ nested within a literal value, in which\n   case the [local name] will be determined\
    \ according to RXER and the\n   governing ASN.1 type of the enclosing literal\
    \ value.\n      Aside: In the latter case, the element item will also have a\n\
    \      literal attribute item with the [normalized value] \"false\" or \"0\".\n\
    \   A notational value that is not directly nested within a literal value\n  \
    \ MAY instead have the [local name] \"literalValue\" provided an\n   attribute\
    \ item with the [local name] \"literal\", [namespace name]\n   \"urn:ietf:params:xml:ns:asnx\"\
    , and [normalized value] \"false\" or \"0\"\n   is added to the [attributes] of\
    \ the <literalValue> element item.\n   Examples\n      nothing INTEGER ::= zero\n\
    \      <namedValue name=\"nothing\" type=\"asnx:INTEGER\" value=\"tns:zero\"/>\n\
    \          OR\n      <namedValue name=\"nothing\" type=\"asnx:INTEGER\">\n   \
    \    <value ref=\"tns:zero\"/><!-- A notational value. -->\n      </namedValue>\n\
    \          OR\n      <namedValue name=\"nothing\" type=\"asnx:INTEGER\">\n   \
    \    <literalValue xmlns:asnx=\"urn:ietf:params:xml:ns:asnx\"\n              \
    \       xmlns:tns=\"http://example.com/ns/MyModule\"\n                     asnx:literal=\"\
    false\"\n                     ref=\"tns:zero\"/><!-- A notational value. -->\n\
    \      </namedValue>\n      integerList SEQUENCE OF number INTEGER ::= { zero,\
    \ 3, 7 }\n      <namedValue name=\"integerList\">\n       <type>\n        <sequenceOf>\n\
    \         <element name=\"number\" type=\"asnx:INTEGER\"/>\n        </sequenceOf>\n\
    \       </type>\n       <literalValue xmlns:asnx=\"urn:ietf:params:xml:ns:asnx\"\
    \n                     xmlns:tns=\"http://example.com/ns/MyModule\">\n       \
    \ <number asnx:literal=\"false\"\n                ref=\"tns:zero\"/><!-- A notational\
    \ value. -->\n        <number>3</number><!-- A literal value. -->\n        <number>7</number><!--\
    \ A literal value. -->\n       </literalValue>\n      </namedValue>\n"
- title: 7.2.1.  DefinedValue Translation
  contents:
  - "7.2.1.  DefinedValue Translation\n   If a DefinedValue is a valuereference (not\
    \ a DummyReference) or an\n   ExternalValueReference, then the translation of\
    \ the DefinedValue is\n   either the attribute form translation of a value reference,\
    \ or the\n   element form translation of a value reference.\n   The attribute\
    \ form translation of a value reference is an attribute\n   item with the [local\
    \ name] \"value\".  The [normalized value] of this\n   attribute item is a qualified\
    \ name for the expanded name of the\n   referenced value definition (see Section\
    \ 5.1).  The attribute form\n   translation SHALL NOT be used if this expanded\
    \ name is not distinct\n   with respect to the current module and the modules\
    \ referenced by its\n   <import> element items (see Section 5.1).\n   The element\
    \ form translation of a value reference is an element item\n   with the [local\
    \ name] \"value\".  An element item with the [local name]\n   \"annotation\" MAY\
    \ be added to the [children] of the <value> element\n   item.  An attribute item\
    \ with the [local name] \"ref\" SHALL be added\n   to the [attributes] of the\
    \ <value> element item.  The\n   [normalized value] of this attribute item is\
    \ a qualified name for the\n   expanded name of the referenced value definition.\
    \  If this expanded\n   name is not distinct with respect to the current module\
    \ and the\n   modules referenced by its <import> element items, then an attribute\n\
    \   item with the [local name] \"context\" SHALL be added to the\n   [attributes]\
    \ of the <value> element item; otherwise, if the module\n   containing the referenced\
    \ value definition has a schema identity URI,\n   then an attribute item with\
    \ the [local name] \"context\" MAY be added\n   to the [attributes] of the <value>\
    \ element item.  The\n   [normalized value] of this attribute item is the schema\
    \ identity URI\n   of the module containing the value definition referenced by\
    \ the\n   DefinedValue.\n      Aside: If a reference name is not distinct, then\
    \ the module\n      containing the referenced definition must have a schema identity\n\
    \      URI (see Section 5.1).\n   Usually the translator is free to choose either\
    \ an attribute form or\n   element form translation for a DefinedValue; however,\
    \ in some\n   contexts attribute forms of Value are explicitly disallowed.  In\n\
    \   particular, the attribute form translation SHALL NOT be used for a\n   DefinedValue\
    \ in a ReferencedValue in a Value that is directly nested\n   in a literal value.\n\
    \   If a DefinedValue is a DummyReference or ParameterizedValue, then the\n  \
    \ translation of the DefinedValue is the translation of that\n   DummyReference\
    \ or ParameterizedValue (see Section 13).\n"
- title: 7.2.2.  BuiltinValue Translation
  contents:
  - "7.2.2.  BuiltinValue Translation\n   The translation of a BuiltinValue is the\
    \ translation of the\n   ChoiceValue, SequenceValue, SetValue, SequenceOfValue,\
    \ SetOfValue, or\n   TaggedValue in the BuiltinValue.\n      Aside: There are\
    \ other possibilities for a BuiltinValue, but these\n      will all be literal\
    \ values.  This section applies to a\n      BuiltinValue that is a notational\
    \ value.\n   The translation of a TaggedValue is the translation of the Value\
    \ in\n   the TaggedValue (which is necessarily a notational value).\n   The translation\
    \ of a ChoiceValue is an element item with the\n   [local name] \"value\".  An\
    \ element item with the [local name]\n   \"annotation\" MAY be added to the [children]\
    \ of the <value> element\n   item.  An element item with the same [local name]\
    \ (i.e., \"attribute\",\n   \"element\", \"component\", \"group\", or \"member\"\
    ) as the translation of\n   the NamedType corresponding to the identifier in the\
    \ ChoiceValue\n   SHALL be appended to the [children] of the <value> element item.\
    \  An\n   attribute item with the [local name] \"name\" SHALL be added to the\n\
    \   [attributes] of the <attribute>, <element>, <component>, <group>, or\n   <member>\
    \ element item.  The [normalized value] of this attribute item\n   is a qualified\
    \ name for the expanded name of the NamedType.  The\n   translation of the Value\
    \ in the ChoiceValue SHALL be added to the\n   [children] or [attributes] of the\
    \ <attribute>, <element>,\n   <component>, <group>, or <member> element item.\n\
    \   The translation of a SequenceValue or SetValue is an element item\n   with\
    \ the [local name] \"value\".  An element item with the [local name]\n   \"annotation\"\
    \ MAY be added to the [children] of the <value> element\n   item.  If the SequenceValue\
    \ or SetValue has a ComponentValueList,\n   then the translation of each NamedValue\
    \ nested in the\n   ComponentValueList SHALL be appended to the [children] of\
    \ the <value>\n   element item in the order in which their corresponding NamedType\n\
    \   instances appear in the definition of the governing type.\n   The translation\
    \ of a SequenceOfValue or SetOfValue is an element item\n   with the [local name]\
    \ \"value\".  An element item with the [local name]\n   \"annotation\" MAY be\
    \ added to the [children] of the <value> element\n   item.\n   If the SequenceOfValue\
    \ or SetOfValue has a NamedValueList, then the\n   translation of each NamedValue\
    \ nested in the NamedValueList SHALL be\n   appended to the [children] of the\
    \ <value> element item.\n   If the SequenceOfValue or SetOfValue has a ValueList,\
    \ then an element\n   item with the same [local name] (i.e., \"element\" or \"\
    component\") as\n   the element item in the [children] of the <sequenceOf> or\
    \ <setOf>\n   element item in the translation of the governing type SHALL be\n\
    \   appended to the [children] of the <value> element item for each Value\n  \
    \ nested in the ValueList.  An attribute item with the [local name]\n   \"name\"\
    \ and [normalized value] \"item\" SHALL be added to the\n   [attributes] of the\
    \ <element> or <component> element item.  The\n   translation of the Value (from\
    \ the ValueList) SHALL be added to the\n   [children] or [attributes] of the <element>\
    \ or <component> element\n   item.\n   The translation of a NamedValue is an element\
    \ item with the same\n   [local name] as the translation of the corresponding\
    \ NamedType, i.e.,\n   \"attribute\", \"element\", \"component\", \"group\", \"\
    item\", or\n   \"simpleContent\".  An attribute item with the [local name] \"\
    name\"\n   SHALL be added to the [attributes] of the element item.  The\n   [normalized\
    \ value] of this attribute item is a qualified name for the\n   expanded name\
    \ of the NamedType.  The translation of the Value in the\n   NamedValue SHALL\
    \ be added to the [children] or [attributes] of the\n   element item.\n   Examples\n\
    \      -- This is the governing type.\n      MyType ::= SEQUENCE {\n         \
    \  one    [ATTRIBUTE] INTEGER,\n           two    INTEGER,\n           three \
    \ [ATTRIBUTE][LIST] SEQUENCE OF number INTEGER\n      }\n      <namedType name=\"\
    MyType\">\n       <type>\n        <sequence>\n         <attribute name=\"one\"\
    \ type=\"asnx:INTEGER\"/>\n         <element name=\"two\" type=\"asnx:INTEGER\"\
    />\n         <attribute name=\"three\">\n          <type>\n           <list>\n\
    \            <item name=\"number\" type=\"asnx:INTEGER\"/>\n           </list>\n\
    \          </type>\n         </attribute>\n        </sequence>\n       </type>\n\
    \      </namedType>\n      myValue1 MyType ::= {\n          one     456,\n   \
    \       two     123,\n          three   { number 123, number 456 }\n      }\n\
    \      -- All literal values.\n      <namedValue name=\"myValue1\" type=\"tns:MyType\"\
    >\n       <literalValue one=\"456\" three=\"123 456\">\n        <two>123</two>\n\
    \       </literalValue>\n      </namedValue>\n      myValue2 MyType ::= {\n  \
    \        one     456,\n          two     myObject.&number,\n            -- only\
    \ the value for component \"two\" is a notational value\n          three   { number\
    \ 123, number 456 }\n      }\n      <namedValue name=\"myValue2\" type=\"tns:MyType\"\
    >\n       <literalValue xmlns:asnx=\"urn:ietf:params:xml:ns:asnx\"\n         \
    \            xmlns:tns=\"http://example.com/ns/MyModule\"\n                  \
    \   one=\"456\" three=\"123 456\">\n        <two asnx:literal=\"false\">\n   \
    \      <fromObjects object=\"tns:myObject\" fieldName=\"number\"/>\n        </two>\n\
    \       </literalValue>\n      </namedValue>\n      myValue3 MyType ::= {\n  \
    \        one     myObject.&number,\n          two     123,\n          three  \
    \ { number 123, number myObject.&number }\n      }\n      <namedValue name=\"\
    myValue3\" type=\"tns:MyType\">\n       <value>\n        <attribute name=\"one\"\
    >\n         <value>\n          <fromObjects object=\"tns:myObject\" fieldName=\"\
    number\"/>\n         </value>\n        </attribute>\n        <element name=\"\
    two\" literalValue=\"123\"/>\n        <attribute name=\"three\">\n         <value>\n\
    \          <item name=\"number\" literalValue=\"123\"/>\n          <item name=\"\
    number\">\n           <value>\n            <fromObjects object=\"tns:myObject\"\
    \ fieldName=\"number\"/>\n           </value>\n          </item>\n         </value>\n\
    \        </attribute>\n       </value>\n      </namedValue>\n"
- title: 7.2.3.  ValueFromObject Translation
  contents:
  - "7.2.3.  ValueFromObject Translation\n   The translation of a ValueFromObject\
    \ is an element item with the\n   [local name] \"value\".  An element item with\
    \ the [local name]\n   \"annotation\" MAY be added to the [children] of the <value>\
    \ element\n   item.  An element item with the [local name] \"fromObjects\" SHALL\
    \ be\n   appended to the [children] of the <value> element item.\n   The translation\
    \ of the ReferencedObjects instance in the\n   ValueFromObject SHALL be added\
    \ to the [children] or [attributes] of\n   the <fromObjects> element item.\n \
    \  The translation of the FieldName in the ValueFromObject SHALL be\n   added\
    \ to the [children] or [attributes] of the <fromObjects> element\n   item.\n"
- title: 7.2.4.  ObjectClassFieldValue Translation
  contents:
  - "7.2.4.  ObjectClassFieldValue Translation\n   If an ObjectClassFieldValue is\
    \ a BuiltinValue in a FixedTypeFieldVal,\n   then the translation of the ObjectClassFieldValue\
    \ is the translation\n   of the BuiltinValue.\n   If an ObjectClassFieldValue\
    \ is a ReferencedValue in a\n   FixedTypeFieldVal, then the translation of the\
    \ ObjectClassFieldValue\n   is the translation of the ReferencedValue.\n   If\
    \ an ObjectClassFieldValue is an OpenTypeFieldVal, then the\n   translation of\
    \ the ObjectClassFieldValue is an element item with the\n   [local name] \"value\"\
    .  An element item with the [local name]\n   \"annotation\" MAY be added to the\
    \ [children] of the <value> element\n   item.  An element item with the [local\
    \ name] \"openTypeValue\" SHALL be\n   appended to the [children] of the <value>\
    \ element item.  The\n   translation of the Type in the OpenTypeFieldVal SHALL\
    \ be added to the\n   [children] or [attributes] of the <openTypeValue> element\
    \ item.  The\n   translation of the Value in the OpenTypeFieldVal SHALL be added\
    \ to\n   the [children] or [attributes] of the <openTypeValue> element item.\n\
    \   Example\n      myValue TYPE-IDENTIFIER.&Type ::= INTEGER:123\n      <namedValue\
    \ name=\"myValue\">\n       <type>\n        <fromClass class=\"asnx:TYPE-IDENTIFIER\"\
    \ fieldName=\"Type\"/>\n       </type>\n       <value>\n        <openTypeValue\
    \ type=\"asnx:INTEGER\" literalValue=\"123\"/>\n       </value>\n      </namedValue>\n"
- title: 8.  Translation of Value Sets
  contents:
  - "8.  Translation of Value Sets\n   The translation of a ValueSet is an element\
    \ item with the\n   [local name] \"valueSet\".  An element item with the [local\
    \ name]\n   \"annotation\" MAY be added to the [children] of the <valueSet> element\n\
    \   item.  The translation of the ElementSetSpecs instance in the\n   ValueSet\
    \ SHALL be appended to the [children] of the <valueSet>\n   element item.\n  \
    \ Example\n      { 1 | 3..7, ..., 9..19 EXCEPT ( 11 | 12 ) }\n      <valueSet>\n\
    \       <union>\n        <literalValue>1</literalValue>\n        <range>\n   \
    \      <minInclusive literalValue=\"3\"/>\n         <maxInclusive literalValue=\"\
    7\"/>\n        </range>\n       </union>\n       <extension>\n        <all>\n\
    \         <range>\n          <minInclusive literalValue=\"9\"/>\n          <maxInclusive\
    \ literalValue=\"19\"/>\n         </range>\n         <except>\n          <union>\n\
    \           <literalValue>11</literalValue>\n           <literalValue>12</literalValue>\n\
    \          </union>\n         </except>\n        </all>\n       </extension>\n\
    \      </valueSet>\n"
- title: 8.1.  ElementSetSpecs Translation
  contents:
  - "8.1.  ElementSetSpecs Translation\n   The translation of an ElementSetSpecs instance\
    \ where the ellipsis\n   (\"...\") is not present is the translation of the ElementSetSpec\
    \ in\n   the RootElementSetSpec.\n   The translation of an ElementSetSpecs instance\
    \ where the ellipsis\n   (\"...\") is present is the translation of the ElementSetSpec\
    \ in the\n   RootElementSetSpec followed by an element item with the [local name]\n\
    \   \"extension\".  If an AdditionalElementSetSpec is present in the\n   ElementSetSpecs,\
    \ then the translation of the ElementSetSpec in the\n   AdditionalElementSetSpec\
    \ SHALL be added to the [children] of the\n   <extension> element item.\n"
- title: 8.2.  ElementSetSpec Translation
  contents:
  - "8.2.  ElementSetSpec Translation\n   If an ElementSetSpec is of the \"ALL Exclusions\"\
    \ form, then the\n   translation of the ElementSetSpec is an element item with\
    \ the\n   [local name] \"all\".  An element item with the [local name] \"except\"\
    \n   SHALL be added to the [children] of the <all> element item.  The\n   translation\
    \ of the Elements instance in the Exclusions SHALL be added\n   to the [children]\
    \ of the <except> element item.\n   If an ElementSetSpec is a Unions instance,\
    \ then the translation of\n   the ElementSetSpec is the translation of the Unions\
    \ instance.\n   If a Unions instance has only one nested Intersections instance,\
    \ then\n   the translation of the Unions instance is the translation of that\n\
    \   Intersections instance; otherwise, the translation of the Unions\n   instance\
    \ is an element item with the [local name] \"union\".  In the\n   latter case,\
    \ the translation of each nested Intersections instance\n   SHALL be appended\
    \ to the [children] of the <union> element item.\n   If an Intersections instance\
    \ has only one nested IntersectionElements\n   instance, then the translation\
    \ of the Intersections instance is the\n   translation of that IntersectionElements\
    \ instance; otherwise, the\n   translation of the Intersections instance is an\
    \ element item with the\n   [local name] \"intersection\".  In the latter case,\
    \ the translation of\n   each nested IntersectionElements instance SHALL be appended\
    \ to the\n   [children] of the <intersection> element item.\n   If an IntersectionElements\
    \ instance is of the \"Elems Exclusions\"\n   form, then the translation of the\
    \ IntersectionElements instance is an\n   element item with the [local name] \"\
    all\".  The translation of the\n   Elements instance in the Elems SHALL be added\
    \ to the [children] of\n   the <all> element item.  An element item with the [local\
    \ name]\n   \"except\" SHALL be appended to the [children] of the <all> element\n\
    \   item.  The translation of the Elements instance in the Exclusions\n   SHALL\
    \ be added to the [children] of the <except> element item.\n   If an IntersectionElements\
    \ instance is an Elements instance, then the\n   translation of the IntersectionElements\
    \ instance is the translation\n   of the Elements instance.\n   The translation\
    \ of an Elements instance is the translation of the\n   SubtypeElements, ObjectSetElements,\
    \ or ElementSetSpec in the Elements\n   instance.\n"
- title: 8.3.  SubtypeElements Translation
  contents:
  - "8.3.  SubtypeElements Translation\n   If a SubtypeElements instance is a SingleValue,\
    \ then the translation\n   of the SubtypeElements instance is the translation\
    \ of the Value in\n   the SingleValue, except that an attribute form of the Value\n\
    \   translation SHALL NOT be used.\n   If a SubtypeElements instance is a ContainedSubtype,\
    \ then the\n   translation of the SubtypeElements instance is an element item\
    \ with\n   the [local name] \"includes\".  The translation of the Type in the\n\
    \   ContainedSubtype SHALL be added to the [children] or [attributes] of\n   the\
    \ <includes> element item.\n   If a SubtypeElements instance is a ValueRange,\
    \ then the translation\n   of the SubtypeElements instance is the translation\
    \ of the ValueRange.\n   If a SubtypeElements instance is a SizeConstraint, then\
    \ the\n   translation of the SubtypeElements instance is an element item with\n\
    \   the [local name] \"size\".  The translation of the Constraint in the\n   SizeConstraint\
    \ SHALL be added to the [children] of the <size> element\n   item.\n   If a SubtypeElements\
    \ instance is a TypeConstraint, then the\n   translation of the SubtypeElements\
    \ instance is an element item with\n   the [local name] \"typeConstraint\".  The\
    \ translation of the Type in\n   the TypeConstraint SHALL be added to the [children]\
    \ or [attributes]\n   of the <typeConstraint> element item.\n   If a SubtypeElements\
    \ instance is a PermittedAlphabet, then the\n   translation of the SubtypeElements\
    \ instance is an element item with\n   the [local name] \"from\".  The translation\
    \ of the Constraint in the\n   PermittedAlphabet SHALL be added to the [children]\
    \ of the <from>\n   element item.\n   If a SubtypeElements instance is an InnerTypeConstraints\
    \ instance,\n   then the translation of the SubtypeElements instance is the\n\
    \   translation of the InnerTypeConstraints instance.\n   If a SubtypeElements\
    \ instance is a PatternConstraint, then the\n   translation of the SubtypeElements\
    \ instance is an element item with\n   the [local name] \"pattern\".  The translation\
    \ of the Value in the\n   PatternConstraint SHALL be added to the [children] or\
    \ [attributes] of\n   the <pattern> element item.\n"
- title: 8.3.1.  ValueRange Translation
  contents:
  - "8.3.1.  ValueRange Translation\n   The translation of a ValueRange is an element\
    \ item with the\n   [local name] \"range\".\n   If the LowerEndpoint in the ValueRange\
    \ is of the \"LowerEndValue <\"\n   form, then an element item with the [local\
    \ name] \"minExclusive\" SHALL\n   be added to the [children] of the <range> element\
    \ item.  If the\n   LowerEndValue is a Value, then the translation of the Value\
    \ SHALL be\n   added to the [children] or [attributes] of the <minExclusive> element\n\
    \   item.\n   If the LowerEndpoint in the ValueRange is of the \"LowerEndValue\"\
    \ form\n   and the LowerEndValue is a Value, then an element item with the\n \
    \  [local name] \"minInclusive\" SHALL be added to the [children] of the\n   <range>\
    \ element item.  The translation of the Value in the\n   LowerEndValue SHALL be\
    \ added to the [children] or [attributes] of the\n   <minInclusive> element item.\n\
    \   If the LowerEndpoint in the ValueRange is of the \"LowerEndValue\" form\n\
    \   and the LowerEndValue is \"MIN\", then an element item with the\n   [local\
    \ name] \"minInclusive\" MAY be added to the [children] of the\n   <range> element\
    \ item.\n   If the UpperEndpoint in the ValueRange is of the \"< UpperEndValue\"\
    \n   form, then an element item with the [local name] \"maxExclusive\" SHALL\n\
    \   be added to the [children] of the <range> element item.  If the\n   UpperEndValue\
    \ is a Value, then the translation of the Value SHALL be\n   added to the [children]\
    \ or [attributes] of the <maxExclusive> element\n   item.\n   If the UpperEndpoint\
    \ in the ValueRange is of the \"UpperEndValue\" form\n   and the UpperEndValue\
    \ is a Value, then an element item with the\n   [local name] \"maxInclusive\"\
    \ SHALL be added to the [children] of the\n   <range> element item.  The translation\
    \ of the Value in the\n   UpperEndValue SHALL be added to the [children] or [attributes]\
    \ of the\n   <maxInclusive> element item.\n   If the UpperEndpoint in the ValueRange\
    \ is of the \"UpperEndValue\" form\n   and the UpperEndValue is \"MAX\", then\
    \ an element item with the\n   [local name] \"maxInclusive\" MAY be added to the\
    \ [children] of the\n   <range> element item.\n   Examples\n      1..10\n    \
    \  <range>\n       <minInclusive literalValue=\"1\"/>\n       <maxInclusive literalValue=\"\
    10\"/>\n      </range>\n      0..MAX\n      <range>\n       <minInclusive literalValue=\"\
    0\"/>\n      </range>\n      0<..<MAX\n      <range>\n       <minExclusive literalValue=\"\
    0\"/>\n       <maxExclusive/>\n      </range>\n"
- title: 8.3.2.  InnerTypeConstraints Translation
  contents:
  - "8.3.2.  InnerTypeConstraints Translation\n   The translation of an InnerTypeConstraints\
    \ instance that has a\n   SingleTypeConstraint is an element item with the [local\
    \ name]\n   \"withComponent\".  The translation of the Constraint in the\n   SingleTypeConstraint\
    \ SHALL be added to the [children] of the\n   <withComponent> element item.\n\
    \   The translation of an InnerTypeConstraints instance that has a\n   MultipleTypeConstraints\
    \ instance is an element item with the\n   [local name] \"withComponents\".  If\
    \ the MultipleTypeConstraints\n   instance is a PartialSpecification, then an\
    \ attribute item with the\n   [local name] \"partial\" and the [normalized value]\
    \ \"true\" or \"1\" SHALL\n   be added to the [attributes] of the <withComponents>\
    \ element item.\n   If the MultipleTypeConstraints instance is a FullSpecification,\
    \ then\n   an attribute item with the [local name] \"partial\" and the\n   [normalized\
    \ value] \"false\" or \"0\" MAY be added to the [attributes] of\n   the <withComponents>\
    \ element item.  The translation of each\n   NamedConstraint nested in the TypeConstraints\
    \ instance in the\n   FullSpecification or PartialSpecification SHALL be appended\
    \ to the\n   [children] of the <withComponents> element item.\n   The translation\
    \ of a NamedConstraint is an element item with the same\n   [local name] (i.e.,\
    \ \"attribute\", \"element\", \"component\", \"group\",\n   \"member\", or \"\
    simpleContent\") as the translation of the NamedType\n   corresponding to the\
    \ identifier in the NamedConstraint.  An attribute\n   item with the [local name]\
    \ \"name\" SHALL be added to the [attributes]\n   of the <attribute>, <element>,\
    \ <component>, <group>, <member>, or\n   <simpleContent> element item.  The [normalized\
    \ value] of this\n   attribute item is a qualified name for the expanded name\
    \ of the\n   NamedType corresponding to the identifier in the NamedConstraint.\n\
    \   If the PresenceConstraint in the ComponentConstraint in the\n   NamedConstraint\
    \ is not empty, then an attribute item with the\n   [local name] \"use\" SHALL\
    \ be added to the [attributes] of the\n   <attribute>, <element>, <component>,\
    \ <group>, <member>, or\n   <simpleContent> element item.  The [normalized value]\
    \ of this\n   attribute item is the text of the PresenceConstraint with all letters\n\
    \   downcased, i.e., either \"present\", \"absent\", or \"optional\".\n   If the\
    \ ValueConstraint in the ComponentConstraint in the\n   NamedConstraint is not\
    \ empty, then the translation of the Constraint\n   in the ValueConstraint SHALL\
    \ be added to the [children] of the\n   <attribute>, <element>, <component>, <group>,\
    \ <member>, or\n   <simpleContent> element item.\n"
- title: 9.  Translation of Object Classes
  contents:
  - "9.  Translation of Object Classes\n   The translation of an ObjectClass is the\
    \ translation of the\n   DefinedObjectClass, ObjectClassDefn, or ParameterizedObjectClass\
    \ in\n   the ObjectClass.\n   The translation of a ParameterizedObjectClass is\
    \ described in\n   Section 13.\n"
- title: 9.1.  DefinedObjectClass Translation
  contents:
  - "9.1.  DefinedObjectClass Translation\n   If a DefinedObjectClass is an objectclassreference\
    \ (not a\n   DummyReference), an ExternalObjectClassReference, or a\n   UsefulObjectClassReference,\
    \ then the translation of the\n   DefinedObjectClass is either the attribute form\
    \ translation of an\n   object class reference, or the element form translation\
    \ of an object\n   class reference.\n   The attribute form translation of an object\
    \ class reference is an\n   attribute item with the [local name] \"class\".  The\
    \ [normalized value]\n   of this attribute item is a qualified name for the expanded\
    \ name of\n   the referenced object class definition (see Section 5.1).  In the\n\
    \   case of a UsefulObjectClassReference, the namespace name of the\n   expanded\
    \ name is \"urn:ietf:params:xml:ns:asnx\", and the local name is\n   either \"\
    TYPE-IDENTIFIER\" or \"ABSTRACT-SYNTAX\", as the case may be.\n   The attribute\
    \ form translation SHALL NOT be used if the expanded name\n   is not distinct\
    \ with respect to the current module and the modules\n   referenced by its <import>\
    \ element items (see Section 5.1).\n   Otherwise, the translator is free to choose\
    \ either the attribute form\n   or element form translation for an object class\
    \ reference.\n   The element form translation of an object class reference is\
    \ an\n   element item with the [local name] \"class\".  An element item with the\n\
    \   [local name] \"annotation\" MAY be added to the [children] of the\n   <class>\
    \ element item.  An attribute item with the [local name] \"ref\"\n   SHALL be\
    \ added to the [attributes] of the <class> element item.  The\n   [normalized\
    \ value] of this attribute item is a qualified name for the\n   expanded name\
    \ of the referenced object class definition.  In the case\n   of a UsefulObjectClassReference,\
    \ the namespace name of the expanded\n   name is \"urn:ietf:params:xml:ns:asnx\"\
    \ and the local name is either\n   \"TYPE-IDENTIFIER\" or \"ABSTRACT-SYNTAX\"\
    , as the case may be.  If the\n   expanded name is not distinct with respect to\
    \ the current module and\n   the modules referenced by its <import> element items,\
    \ then an\n   attribute item with the [local name] \"context\" SHALL be added\
    \ to the\n   [attributes] of the <class> element item; otherwise, if the module\n\
    \   containing the referenced object class definition has a schema\n   identity\
    \ URI, then an attribute item with the [local name] \"context\"\n   MAY be added\
    \ to the [attributes] of the <class> element item.  The\n   [normalized value]\
    \ of this attribute item is the schema identity URI\n   of the module containing\
    \ the referenced object class definition.\n      Aside: If a reference name is\
    \ not distinct, then the module\n      containing the referenced definition must\
    \ have a schema identity\n      URI (see Section 5.1).\n   The translation of\
    \ the DefinedObjectClass is the same whether the\n   object class definition is\
    \ referenced by an objectclassreference or\n   an ExternalObjectClassReference.\n\
    \   If a DefinedObjectClass is a DummyReference, then the translation of\n   the\
    \ DefinedObjectClass is the translation of the DummyReference (see\n   Section\
    \ 13).\n"
- title: 9.2.  ObjectClassDefn Translation
  contents:
  - "9.2.  ObjectClassDefn Translation\n   The translation of an ObjectClassDefn is\
    \ an element item with the\n   [local name] \"class\".  An element item with the\
    \ [local name]\n   \"annotation\" MAY be added to the [children] of the <class>\
    \ element\n   item.  The translation of each FieldSpec in the ObjectClassDefn\
    \ SHALL\n   be appended to the [children] of the <class> element item.\n   The\
    \ translation of a FieldSpec is the translation of the\n   TypeFieldSpec, FixedTypeValueFieldSpec,\
    \ VariableTypeValueFieldSpec,\n   FixedTypeValueSetFieldSpec, VariableTypeValueSetFieldSpec,\n\
    \   ObjectFieldSpec, or ObjectSetFieldSpec in the FieldSpec.\n"
- title: 9.2.1.  TypeFieldSpec Translation
  contents:
  - "9.2.1.  TypeFieldSpec Translation\n   The translation of a TypeFieldSpec where\
    \ the TypeOptionalitySpec is\n   absent is an element item with the [local name]\
    \ \"typeField\".\n   The translation of a TypeFieldSpec with a TypeOptionalitySpec\
    \ of the\n   \"OPTIONAL\" form is an element item with the [local name] \"optional\"\
    .\n   An element item with the [local name] \"typeField\" SHALL be added to\n\
    \   the [children] of the <optional> element item.\n   The translation of a TypeFieldSpec\
    \ with a TypeOptionalitySpec of the\n   \"DEFAULT Type\" form is an element item\
    \ with the [local name]\n   \"optional\".  An element item with the [local name]\
    \ \"typeField\" SHALL\n   be added to the [children] of the <optional> element\
    \ item.  An\n   element item with the [local name] \"default\" SHALL be appended\
    \ to the\n   [children] of the <optional> element item.  The translation of the\n\
    \   Type in the TypeOptionalitySpec SHALL be added to the [children] or\n   [attributes]\
    \ of the <default> element item.\n   An attribute item with the [local name] \"\
    name\" SHALL be added to the\n   [attributes] of the <typeField> element item.\
    \  The [normalized value]\n   of this attribute item is the typefieldreference\
    \ in the\n   TypeFieldSpec, without the ampersand character ('&', U+0026).  An\n\
    \   element item with the [local name] \"annotation\" MAY be added to the\n  \
    \ [children] of the <typeField> element item.\n   Example\n      CLASS {\n   \
    \       &One,\n          &Two    OPTIONAL,\n          &Three  DEFAULT OBJECT IDENTIFIER\n\
    \      }\n      <class>\n       <typeField name=\"One\"/>\n       <optional>\n\
    \        <typeField name=\"Two\"/>\n       </optional>\n       <optional>\n  \
    \      <typeField name=\"Three\"/>\n        <default type=\"asnx:OBJECT-IDENTIFIER\"\
    />\n       </optional>\n      </class>\n"
- title: 9.2.2.  FixedTypeValueFieldSpec Translation
  contents:
  - "9.2.2.  FixedTypeValueFieldSpec Translation\n   The translation of a FixedTypeValueFieldSpec\
    \ where the\n   ValueOptionalitySpec is absent is an element item with the\n \
    \  [local name] \"valueField\".\n   The translation of a FixedTypeValueFieldSpec\
    \ with a\n   ValueOptionalitySpec of the \"OPTIONAL\" form is an element item\
    \ with\n   the [local name] \"optional\".  An element item with the [local name]\n\
    \   \"valueField\" SHALL be added to the [children] of the <optional>\n   element\
    \ item.\n   The translation of a FixedTypeValueFieldSpec with a\n   ValueOptionalitySpec\
    \ of the \"DEFAULT Value\" form is an element item\n   with the [local name] \"\
    optional\".  An element item with the\n   [local name] \"valueField\" SHALL be\
    \ added to the [children] of the\n   <optional> element item.  An element item\
    \ with the [local name]\n   \"default\" SHALL be appended to the [children] of\
    \ the <optional>\n   element item.  The translation of the Value in the\n   ValueOptionalitySpec\
    \ SHALL be added to the [children] or [attributes]\n   of the <default> element\
    \ item.\n   An attribute item with the [local name] \"name\" SHALL be added to\
    \ the\n   [attributes] of the <valueField> element item.  The\n   [normalized\
    \ value] of this attribute item is the valuefieldreference\n   in the FixedTypeValueFieldSpec,\
    \ without the ampersand character ('&',\n   U+0026).  If the \"UNIQUE\" keyword\
    \ is present, then an attribute item\n   with the [local name] \"unique\" and\
    \ [normalized value] \"true\" or \"1\"\n   SHALL be added to the [attributes]\
    \ of the <valueField> element item;\n   otherwise, an attribute item with the\
    \ [local name] \"unique\" and\n   [normalized value] \"false\" or \"0\" MAY be\
    \ added to the [attributes] of\n   the <valueField> element item.  An element\
    \ item with the [local name]\n   \"annotation\" MAY be added to the [children]\
    \ of the <valueField>\n   element item.  The translation of the Type in the\n\
    \   FixedTypeValueFieldSpec SHALL be added to the [children] or\n   [attributes]\
    \ of the <valueField> element item.\n   Example\n      CLASS {\n          &one\
    \    OBJECT IDENTIFIER UNIQUE,\n          &two    BOOLEAN OPTIONAL,\n        \
    \  &three  INTEGER DEFAULT 0\n      }\n      <class>\n       <valueField name=\"\
    one\" unique=\"true\"\n                   type=\"asnx:OBJECT-IDENTIFIER\"/>\n\
    \       <optional>\n        <valueField name=\"two\" type=\"asnx:BOOLEAN\"/>\n\
    \       </optional>\n       <optional>\n        <valueField name=\"three\" type=\"\
    asnx:INTEGER\"/>\n        <default literalValue=\"0\"/>\n       </optional>\n\
    \      </class>\n"
- title: 9.2.3.  FixedTypeValueSetFieldSpec Translation
  contents:
  - "9.2.3.  FixedTypeValueSetFieldSpec Translation\n   The translation of a FixedTypeValueSetFieldSpec\
    \ where the\n   ValueSetOptionalitySpec is absent is an element item with the\n\
    \   [local name] \"valueSetField\".\n   The translation of a FixedTypeValueSetFieldSpec\
    \ with a\n   ValueSetOptionalitySpec of the \"OPTIONAL\" form is an element item\n\
    \   with the [local name] \"optional\".  An element item with the\n   [local name]\
    \ \"valueSetField\" SHALL be added to the [children] of the\n   <optional> element\
    \ item.\n   The translation of a FixedTypeValueSetFieldSpec with a\n   ValueSetOptionalitySpec\
    \ of the \"DEFAULT ValueSet\" form is an element\n   item with the [local name]\
    \ \"optional\".  An element item with the\n   [local name] \"valueSetField\" SHALL\
    \ be added to the [children] of the\n   <optional> element item.  An element item\
    \ with the [local name]\n   \"default\" SHALL be appended to the [children] of\
    \ the <optional>\n   element item.  The translation of the ValueSet in the\n \
    \  ValueSetOptionalitySpec SHALL be added to the [children] of the\n   <default>\
    \ element item.\n   An attribute item with the [local name] \"name\" SHALL be\
    \ added to the\n   [attributes] of the <valueSetField> element item.  The\n  \
    \ [normalized value] of this attribute item is the\n   valuesetfieldreference\
    \ in the FixedTypeValueSetFieldSpec, without the\n   ampersand character ('&',\
    \ U+0026).  An element item with the\n   [local name] \"annotation\" MAY be added\
    \ to the [children] of the\n   <valueSetField> element item.  The translation\
    \ of the Type in the\n   FixedTypeValueSetFieldSpec SHALL be added to the [children]\
    \ or\n   [attributes] of the <valueSetField> element item.\n   Example\n     \
    \ CLASS {\n          &One    UTF8String,\n          &Two    BOOLEAN OPTIONAL,\n\
    \          &Three  INTEGER DEFAULT { 1 | 2 }\n      }\n      <class>\n       <valueSetField\
    \ name=\"One\" type=\"asnx:UTF8String\"/>\n       <optional>\n        <valueSetField\
    \ name=\"Two\" type=\"asnx:BOOLEAN\"/>\n       </optional>\n       <optional>\n\
    \        <valueSetField name=\"Three\" type=\"asnx:INTEGER\"/>\n        <default>\n\
    \         <valueSet>\n          <union>\n           <literalValue>1</literalValue>\n\
    \           <literalValue>2</literalValue>\n          </union>\n         </valueSet>\n\
    \        </default>\n       </optional>\n      </class>\n"
- title: 9.2.4.  VariableTypeValueFieldSpec Translation
  contents:
  - "9.2.4.  VariableTypeValueFieldSpec Translation\n   The translation of a VariableTypeValueFieldSpec\
    \ where the\n   ValueOptionalitySpec is absent is an element item with the\n \
    \  [local name] \"valueField\".\n   The translation of a VariableTypeValueFieldSpec\
    \ with a\n   ValueOptionalitySpec of the \"OPTIONAL\" form is an element item\
    \ with\n   the [local name] \"optional\".  An element item with the [local name]\n\
    \   \"valueField\" SHALL be added to the [children] of the <optional>\n   element\
    \ item.\n   The translation of a VariableTypeValueFieldSpec with a\n   ValueOptionalitySpec\
    \ of the \"DEFAULT Value\" form is an element item\n   with the [local name] \"\
    optional\".  An element item with the\n   [local name] \"valueField\" SHALL be\
    \ added to the [children] of the\n   <optional> element item.  An element item\
    \ with the [local name]\n   \"default\" SHALL be appended to the [children] of\
    \ the <optional>\n   element item.  The translation of the Value in the\n   ValueOptionalitySpec\
    \ SHALL be added to the [children] or [attributes]\n   of the <default> element\
    \ item.\n   An attribute item with the [local name] \"name\" SHALL be added to\
    \ the\n   [attributes] of the <valueField> element item.  The\n   [normalized\
    \ value] of this attribute item is the valuefieldreference\n   in the VariableTypeValueFieldSpec,\
    \ without the ampersand character\n   ('&', U+0026).  An element item with the\
    \ [local name] \"annotation\"\n   MAY be added to the [children] of the <valueField>\
    \ element item.  An\n   element item with the [local name] \"typeFromField\" SHALL\
    \ be appended\n   to the [children] of the <valueField> element item.  The translation\n\
    \   of the FieldName in the VariableTypeValueFieldSpec SHALL be added to\n   the\
    \ [children] or [attributes] of the <typeFromField> element item.\n   Example\n\
    \      CLASS {\n          &Syntax DEFAULT INTEGER,\n          &one    &Syntax,\n\
    \          &two    &Syntax OPTIONAL,\n          &three  &Syntax DEFAULT 0\n  \
    \    }\n      <class>\n       <optional>\n        <typeField name=\"Syntax\"/>\n\
    \        <default type=\"asnx:INTEGER\"/>\n       </optional>\n       <valueField\
    \ name=\"one\">\n        <typeFromField fieldName=\"Syntax\"/>\n       </valueField>\n\
    \       <optional>\n        <valueField name=\"two\">\n         <typeFromField\
    \ fieldName=\"Syntax\"/>\n        </valueField>\n       </optional>\n       <optional>\n\
    \        <valueField name=\"three\">\n         <typeFromField fieldName=\"Syntax\"\
    />\n        </valueField>\n        <default literalValue=\"0\"/>\n       </optional>\n\
    \      </class>\n"
- title: 9.2.5.  VariableTypeValueSetFieldSpec Translation
  contents:
  - "9.2.5.  VariableTypeValueSetFieldSpec Translation\n   The translation of a VariableTypeValueSetFieldSpec\
    \ where the\n   ValueSetOptionalitySpec is absent is an element item with the\n\
    \   [local name] \"valueSetField\".\n   The translation of a VariableTypeValueSetFieldSpec\
    \ with a\n   ValueSetOptionalitySpec of the \"OPTIONAL\" form is an element item\n\
    \   with the [local name] \"optional\".  An element item with the\n   [local name]\
    \ \"valueSetField\" SHALL be added to the [children] of the\n   <optional> element\
    \ item.\n   The translation of a VariableTypeValueSetFieldSpec with a\n   ValueSetOptionalitySpec\
    \ of the \"DEFAULT ValueSet\" form is an element\n   item with the [local name]\
    \ \"optional\".  An element item with the\n   [local name] \"valueSetField\" SHALL\
    \ be added to the [children] of the\n   <optional> element item.  An element item\
    \ with the [local name]\n   \"default\" SHALL be appended to the [children] of\
    \ the <optional>\n   element item.  The translation of the ValueSet in the\n \
    \  ValueSetOptionalitySpec SHALL be added to the [children] of the\n   <default>\
    \ element item.\n   An attribute item with the [local name] \"name\" SHALL be\
    \ added to the\n   [attributes] of the <valueSetField> element item.  The\n  \
    \ [normalized value] of this attribute item is the\n   valuesetfieldreference\
    \ in the VariableTypeValueSetFieldSpec, without\n   the ampersand character ('&',\
    \ U+0026).  An element item with the\n   [local name] \"annotation\" MAY be added\
    \ to the [children] of the\n   <valueSetField> element item.  An element item\
    \ with the [local name]\n   \"typeFromField\" SHALL be appended to the [children]\
    \ of the\n   <valueSetField> element item.  The translation of the FieldName in\n\
    \   the VariableTypeValueSetFieldSpec SHALL be added to the [children] or\n  \
    \ [attributes] of the <typeFromField> element item.\n   Example\n      CLASS {\n\
    \          &Syntax DEFAULT INTEGER,\n          &One    &Syntax,\n          &Two\
    \    &Syntax OPTIONAL,\n          &Three  &Syntax DEFAULT { 1 | 2 }\n      }\n\
    \      <class>\n       <optional>\n        <typeField name=\"Syntax\"/>\n    \
    \    <default type=\"asnx:INTEGER\"/>\n       </optional>\n       <valueSetField\
    \ name=\"One\">\n        <typeFromField fieldName=\"Syntax\"/>\n       </valueSetField>\n\
    \       <optional>\n        <valueSetField name=\"Two\">\n         <typeFromField\
    \ fieldName=\"Syntax\"/>\n        </valueSetField>\n       </optional>\n     \
    \  <optional>\n        <valueSetField name=\"Three\">\n         <typeFromField\
    \ fieldName=\"Syntax\"/>\n        </valueSetField>\n        <default>\n      \
    \   <valueSet>\n          <union>\n           <literalValue>1</literalValue>\n\
    \           <literalValue>2</literalValue>\n          </union>\n         </valueSet>\n\
    \        </default>\n       </optional>\n      </class>\n"
- title: 9.2.6.  FieldName Translation
  contents:
  - "9.2.6.  FieldName Translation\n   The translation of a FieldName is either, at\
    \ the translator's option,\n   an attribute item with the [local name] \"fieldName\"\
    \ added to the\n   [attributes] of the enclosing element item, or an element item\
    \ with\n   the [local name] \"fieldName\" appended to the [children] of the\n\
    \   enclosing element item.\n   The [normalized value] of the fieldName attribute\
    \ item is a solidus\n   ('/', U+002F) separated list of the PrimitiveFieldName\
    \ instances in\n   the FieldName, without the ampersand characters ('&', U+0026).\n\
    \   Leading and/or trailing white space characters MAY be added to the\n   [normalized\
    \ value] of the attribute item.  White space characters MAY\n   be added immediately\
    \ before and/or after any solidus character ('/',\n   U+002F) in the [normalized\
    \ value].\n   The [children] property of the <fieldName> element item is set to\
    \ the\n   sequence of character items for a solidus ('/', U+002F) separated\n\
    \   list of the PrimitiveFieldName instances in the FieldName, without\n   the\
    \ ampersand characters ('&', U+0026).  Leading and/or trailing\n   white space\
    \ character items MAY be added to the [children] of the\n   <fieldName> element\
    \ item.  White space character items MAY be added\n   immediately before and/or\
    \ after any character item for the solidus\n   character ('/', U+002F).\n   Example\n\
    \      &Linked.&ArgumentType\n      <fieldName>Linked/ArgumentType</fieldName>\n"
- title: 9.2.7.  ObjectFieldSpec Translation
  contents:
  - "9.2.7.  ObjectFieldSpec Translation\n   The translation of an ObjectFieldSpec\
    \ where the ObjectOptionalitySpec\n   is absent is an element item with the [local\
    \ name] \"objectField\".\n   The translation of an ObjectFieldSpec with an ObjectOptionalitySpec\n\
    \   of the \"OPTIONAL\" form is an element item with the [local name]\n   \"optional\"\
    .  An element item with the [local name] \"objectField\"\n   SHALL be added to\
    \ the [children] of the <optional> element item.\n   The translation of an ObjectFieldSpec\
    \ with an ObjectOptionalitySpec\n   of the \"DEFAULT Object\" form is an element\
    \ item with the [local name]\n   \"optional\".  An element item with the [local\
    \ name] \"objectField\"\n   SHALL be added to the [children] of the <optional>\
    \ element item.  An\n   element item with the [local name] \"default\" SHALL be\
    \ appended to the\n   [children] of the <optional> element item.  The translation\
    \ of the\n   Object in the ObjectOptionalitySpec SHALL be added to the [children]\n\
    \   or [attributes] of the <default> element item.\n   An attribute item with\
    \ the [local name] \"name\" SHALL be added to the\n   [attributes] of the <objectField>\
    \ element item.  The\n   [normalized value] of this attribute item is the objectfieldreference\n\
    \   in the ObjectFieldSpec, without the ampersand character ('&',\n   U+0026).\
    \  An element item with the [local name] \"annotation\" MAY be\n   added to the\
    \ [children] of the <objectField> element item.  The\n   translation of the DefinedObjectClass\
    \ in the ObjectFieldSpec SHALL be\n   added to the [children] or [attributes]\
    \ of the <objectField> element\n   item.\n   Example\n      CLASS {\n        \
    \  &one    TYPE-IDENTIFIER,\n          &two    ABSTRACT-SYNTAX OPTIONAL,\n   \
    \       &three  TYPE-IDENTIFIER DEFAULT myObject\n      }\n      <class>\n   \
    \    <objectField name=\"one\" class=\"asnx:TYPE-IDENTIFIER\"/>\n       <optional>\n\
    \        <objectField name=\"two\" class=\"asnx:ABSTRACT-SYNTAX\"/>\n       </optional>\n\
    \       <optional>\n        <objectField name=\"three\" class=\"asnx:TYPE-IDENTIFIER\"\
    />\n        <default object=\"tns:myObject\"/>\n       </optional>\n      </class>\n"
- title: 9.2.8.  ObjectSetFieldSpec Translation
  contents:
  - "9.2.8.  ObjectSetFieldSpec Translation\n   The translation of an ObjectSetFieldSpec\
    \ where the\n   ObjectSetOptionalitySpec is absent is an element item with the\n\
    \   [local name] \"objectSetField\".\n   The translation of an ObjectSetFieldSpec\
    \ with an\n   ObjectSetOptionalitySpec of the \"OPTIONAL\" form is an element\
    \ item\n   with the [local name] \"optional\".  An element item with the\n   [local\
    \ name] \"objectSetField\" SHALL be added to the [children] of the\n   <optional>\
    \ element item.\n   The translation of an ObjectSetFieldSpec with an\n   ObjectSetOptionalitySpec\
    \ of the \"DEFAULT ObjectSet\" form is an\n   element item with the [local name]\
    \ \"optional\".  An element item with\n   the [local name] \"objectSetField\"\
    \ SHALL be added to the [children] of\n   the <optional> element item.  An element\
    \ item with the [local name]\n   \"default\" SHALL be appended to the [children]\
    \ of the <optional>\n   element item.  The translation of the ObjectSet in the\n\
    \   ObjectSetOptionalitySpec SHALL be added to the [children] or\n   [attributes]\
    \ of the <default> element item.\n   An attribute item with the [local name] \"\
    name\" SHALL be added to the\n   [attributes] of the <objectSetField> element\
    \ item.  The\n   [normalized value] of this attribute item is the\n   objectsetfieldreference\
    \ in the ObjectSetFieldSpec, without the\n   ampersand character ('&', U+0026).\
    \  An element item with the\n   [local name] \"annotation\" MAY be added to the\
    \ [children] of the\n   <objectSetField> element item.  The translation of the\n\
    \   DefinedObjectClass in the ObjectSetFieldSpec SHALL be added to the\n   [children]\
    \ or [attributes] of the <objectSetField> element item.\n   Example\n      CLASS\
    \ {\n          &One    TYPE-IDENTIFIER,\n          &Two    ABSTRACT-SYNTAX OPTIONAL,\n\
    \          &Three  TYPE-IDENTIFIER DEFAULT { myObject }\n      }\n      <class>\n\
    \       <objectSetField name=\"One\" class=\"asnx:TYPE-IDENTIFIER\"/>\n      \
    \ <optional>\n        <objectSetField name=\"Two\" class=\"asnx:ABSTRACT-SYNTAX\"\
    />\n       </optional>\n       <optional>\n        <objectSetField name=\"Three\"\
    \ class=\"asnx:TYPE-IDENTIFIER\"/>\n        <default>\n         <objectSet>\n\
    \          <object ref=\"tns:myObject\"/>\n         </objectSet>\n        </default>\n\
    \       </optional>\n      </class>\n"
- title: 10.  Translation of Objects
  contents:
  - "10.  Translation of Objects\n   The translation of an Object is the translation\
    \ of the DefinedObject,\n   ObjectDefn, ObjectFromObject, or ParameterizedObject\
    \ in the Object.\n   The translation of a ParameterizedObject is described in\
    \ Section 13.\n"
- title: 10.1.  DefinedObject Translation
  contents:
  - "10.1.  DefinedObject Translation\n   If a DefinedObject is an objectreference\
    \ (not a DummyReference) or an\n   ExternalObjectReference, then the translation\
    \ of the DefinedObject is\n   either the attribute form translation of an object\
    \ reference, or the\n   element form translation of an object reference.\n   The\
    \ attribute form translation of an object reference is an attribute\n   item with\
    \ the [local name] \"object\".  The [normalized value] of this\n   attribute item\
    \ is a qualified name for the expanded name of the\n   referenced object definition\
    \ (see Section 5.1).  The attribute form\n   translation SHALL NOT be used if\
    \ this expanded name is not distinct\n   with respect to the current module and\
    \ the modules referenced by its\n   <import> element items (see Section 5.1).\n\
    \   The element form translation of an object reference is an element\n   item\
    \ with the [local name] \"object\".  An element item with the\n   [local name]\
    \ \"annotation\" MAY be added to the [children] of the\n   <object> element item.\
    \  An attribute item with the [local name] \"ref\"\n   SHALL be added to the [attributes]\
    \ of the <object> element item.  The\n   [normalized value] of this attribute\
    \ item is a qualified name for the\n   expanded name of the referenced object\
    \ definition.  If this expanded\n   name is not distinct with respect to the current\
    \ module and the\n   modules referenced by its <import> element items, then an\
    \ attribute\n   item with the [local name] \"context\" SHALL be added to the\n\
    \   [attributes] of the <object> element item; otherwise, if the module\n   containing\
    \ the referenced object definition has a schema identity\n   URI, then an attribute\
    \ item with the [local name] \"context\" MAY be\n   added to the [attributes]\
    \ of the <object> element item.  The\n   [normalized value] of this attribute\
    \ item is the schema identity URI\n   of the module containing the referenced\
    \ object definition.\n      Aside: If a reference name is not distinct, then the\
    \ module\n      containing the referenced definition must have a schema identity\n\
    \      URI (see Section 5.1).\n   The translation of the DefinedObject is the\
    \ same whether the object\n   definition is referenced by an objectreference or\
    \ an\n   ExternalObjectReference.\n   Usually the translator is free to choose\
    \ either the attribute form or\n   element form translation for an object reference;\
    \ however, in some\n   contexts the attribute form is explicitly disallowed.\n\
    \   If a DefinedObject is a DummyReference, then the translation of the\n   DefinedObject\
    \ is the translation of the DummyReference (see\n   Section 13).\n"
- title: 10.2.  ObjectDefn Translation
  contents:
  - "10.2.  ObjectDefn Translation\n   An ObjectDefn that is a DefinedSyntax is first\
    \ converted to the\n   equivalent DefaultSyntax and then translated.\n   The translation\
    \ of an ObjectDefn is an element item with the\n   [local name] \"object\".  An\
    \ element item with the [local name]\n   \"annotation\" MAY be added to the [children]\
    \ of the <object> element\n   item.  The translation of each FieldSetting in the\
    \ DefaultSyntax in\n   the ObjectClassDefn SHALL be appended to the [children]\
    \ of the\n   <object> element item.\n   The translation of a FieldSetting is an\
    \ element item with the\n   [local name] \"field\".  An attribute item with the\
    \ [local name] \"name\"\n   SHALL be added to the [attributes] of the <field>\
    \ element item.  The\n   [normalized value] of this attribute item is the PrimitiveFieldName\n\
    \   in the FieldSetting, without the ampersand character ('&', U+0026).\n   The\
    \ translation of the Type, Value, ValueSet, Object, or ObjectSet in\n   the Setting\
    \ in the FieldSetting SHALL be added to the [children] or\n   [attributes] of\
    \ the <field> element item.\n   Example\n      -- This is the governing object\
    \ class.\n      ONE-OF-EVERYTHING ::= CLASS {\n          &One,\n          &two\
    \    INTEGER,\n          &Three  INTEGER,\n          &four   TYPE-IDENTIFIER,\n\
    \          &Five   TYPE-IDENTIFIER\n      }\n      <namedClass name=\"ONE-OF-EVERYTHING\"\
    >\n       <class>\n        <typeField name=\"One\"/>\n        <valueField name=\"\
    two\" type=\"asnx:INTEGER\"/>\n        <valueSetField name=\"Three\" type=\"asnx:INTEGER\"\
    />\n        <objectField name=\"four\" class=\"asnx:TYPE-IDENTIFIER\"/>\n    \
    \    <objectSetField name=\"Five\" class=\"asnx:TYPE-IDENTIFIER\"/>\n       </class>\n\
    \      </namedClass>\n      mixedBag ONE-OF-EVERYTHING ::= {\n          &One \
    \   BOOLEAN,\n          &two    99,\n          &Three  { 1 | 2 },\n          &four\
    \   myObject,\n          &Five   { myObject }\n      }\n      <namedObject name=\"\
    mixedBag\" class=\"tns:ONE-OF-EVERYTHING\">\n       <object>\n        <field name=\"\
    One\" type=\"asnx:BOOLEAN\"/>\n        <field name=\"two\" literalValue=\"99\"\
    />\n        <field name=\"Three\">\n         <valueSet>\n          <union>\n \
    \          <literalValue>1</literalValue>\n           <literalValue>2</literalValue>\n\
    \          </union>\n         </valueSet>\n        </field>\n        <field name=\"\
    four\" object=\"tns:myObject\"/>\n        <field name=\"Five\">\n         <objectSet>\n\
    \          <object ref=\"tns:myObject\"/>\n         </objectSet>\n        </field>\n\
    \       </object>\n      </namedObject>\n"
- title: 10.3.  ObjectFromObject Translation
  contents:
  - "10.3.  ObjectFromObject Translation\n   The translation of an ObjectFromObject\
    \ is an element item with the\n   [local name] \"object\".  An element item with\
    \ the [local name]\n   \"annotation\" MAY be added to the [children] of the <object>\
    \ element\n   item.  An element item with the [local name] \"fromObjects\" SHALL\
    \ be\n   appended to the [children] of the <object> element item.\n   The translation\
    \ of the ReferencedObjects instance in the\n   ObjectFromObject SHALL be added\
    \ to the [children] or [attributes] of\n   the <fromObjects> element item.\n \
    \  The translation of the FieldName in the ObjectFromObject SHALL be\n   added\
    \ to the [children] or [attributes] of the <fromObjects> element\n   item.\n"
- title: 11.  Translation of Object Sets
  contents:
  - "11.  Translation of Object Sets\n   If an ObjectSet matches the form \"{ DefinedObjectSet\
    \ }\" (i.e., a\n   DefinedObjectSet in an ObjectSetElements instance in an Elements\n\
    \   instance in a lone IntersectionElements instance in a lone\n   Intersections\
    \ instance in a Unions instance in an ElementSetSpec in a\n   RootElementSetSpec\
    \ in an ObjectSetSpec without an\n   AdditionalElementSetSpec), then the translator\
    \ MAY use the\n   translation of the DefinedObjectSet as the translation of the\n\
    \   ObjectSet; otherwise, the translation of an ObjectSet is an element\n   item\
    \ with the [local name] \"objectSet\".  An element item with the\n   [local name]\
    \ \"annotation\" MAY be added to the [children] of the\n   <objectSet> element\
    \ item.  The translation of the ObjectSetSpec in\n   the ObjectSet SHALL be appended\
    \ to the [children] of the <objectSet>\n   element item.\n      Aside: An ObjectSet\
    \ that is directly a DefinedObjectSet is a\n      notational capability that does\
    \ not exist in ASN.1, but is allowed\n      in ASN.X to avoid excessive nesting\
    \ of <objectSet> element items\n      in the expansion of parameterized definitions.\n\
    \   If an ObjectSetSpec contains only a RootElementSetSpec, then the\n   translation\
    \ of the ObjectSetSpec is the translation of the\n   ElementSetSpec in the RootElementSetSpec.\n\
    \   If an ObjectSetSpec contains a RootElementSetSpec and an ellipsis\n   (\"\
    ...\"), then the translation of the ObjectSetSpec is the translation\n   of the\
    \ ElementSetSpec in the RootElementSetSpec followed by an\n   element item with\
    \ the [local name] \"extension\".  If an\n   AdditionalElementSetSpec is present,\
    \ then the translation of the\n   ElementSetSpec in the AdditionalElementSetSpec\
    \ SHALL be added to the\n   [children] of the <extension> element item.\n   If\
    \ an ObjectSetSpec does not contain a RootElementSetSpec, then the\n   translation\
    \ of the ObjectSetSpec is an element item with the\n   [local name] \"extension\"\
    .  If an AdditionalElementSetSpec is present,\n   then the translation of the\
    \ ElementSetSpec in the\n   AdditionalElementSetSpec SHALL be added to the [children]\
    \ of the\n   <extension> element item.\n   Nested within the ElementSetSpec will\
    \ be one or more\n   ObjectSetElements instances.\n"
- title: 11.1.  DefinedObjectSet Translation
  contents:
  - "11.1.  DefinedObjectSet Translation\n   If a DefinedObjectSet is an objectsetreference\
    \ (not a DummyReference)\n   or an ExternalObjectSetReference, then the translation\
    \ of the\n   DefinedObjectSet is either the attribute form translation of an\n\
    \   object set reference, or the element form translation of an object\n   set\
    \ reference.\n   The attribute form translation of an object set reference is\
    \ an\n   attribute item with the [local name] \"objectSet\".  The\n   [normalized\
    \ value] of this attribute item is a qualified name for the\n   expanded name\
    \ of the referenced object set definition (see\n   Section 5.1).  The attribute\
    \ form translation SHALL NOT be used if\n   this expanded name is not distinct\
    \ with respect to the current module\n   and the modules referenced by its <import>\
    \ element items (see\n   Section 5.1).\n   The element form translation of an\
    \ object set reference is an element\n   item with the [local name] \"objectSet\"\
    .  An element item with the\n   [local name] \"annotation\" MAY be added to the\
    \ [children] of the\n   <objectSet> element item.  An attribute item with the\
    \ [local name]\n   \"ref\" SHALL be added to the [attributes] of the <objectSet>\
    \ element\n   item.  The [normalized value] of this attribute item is a qualified\n\
    \   name for the expanded name of the referenced object set definition.\n   If\
    \ this expanded name is not distinct with respect to the current\n   module and\
    \ the modules referenced by its <import> element items, then\n   an attribute\
    \ item with the [local name] \"context\" SHALL be added to\n   the [attributes]\
    \ of the <objectSet> element item; otherwise, if the\n   module containing the\
    \ referenced object set definition has a schema\n   identity URI, then an attribute\
    \ item with the [local name] \"context\"\n   MAY be added to the [attributes]\
    \ of the <objectSet> element item.\n   The [normalized value] of this attribute\
    \ item is the schema identity\n   URI of the module containing the referenced\
    \ object set definition.\n      Aside: If a reference name is not distinct, then\
    \ the module\n      containing the referenced definition must have a schema identity\n\
    \      URI (see Section 5.1).\n   The translation of the DefinedObjectSet is the\
    \ same whether the\n   object definition is referenced by an objectsetreference\
    \ or an\n   ExternalObjectSetReference.\n   Usually the translator is free to\
    \ choose either the attribute form or\n   element form translation for an object\
    \ set reference; however, in\n   some contexts the attribute form is explicitly\
    \ disallowed.\n   If a DefinedObjectSet is a DummyReference, then the translation\
    \ of\n   the DefinedObjectSet is the translation of the DummyReference (see\n\
    \   Section 13).\n"
- title: 11.2.  ObjectSetElements Translation
  contents:
  - "11.2.  ObjectSetElements Translation\n   If an ObjectSetElements instance is\
    \ an Object, then the translation\n   of the ObjectSetElements instance is the\
    \ translation of the Object,\n   except that the attribute form of the DefinedObject\
    \ translation SHALL\n   NOT be used if the Object is a DefinedObject.\n   If an\
    \ ObjectSetElements instance is a DefinedObjectSet, then the\n   translation of\
    \ the ObjectSetElements instance is the translation of\n   the DefinedObjectSet,\
    \ except that the attribute form of the\n   DefinedObjectSet translation SHALL\
    \ NOT be used.\n   If an ObjectSetElements instance is an ObjectSetFromObjects,\
    \ then the\n   translation of the ObjectSetElements instance is the translation\
    \ of\n   the ObjectSetFromObjects.\n   If an ObjectSetElements instance is a ParameterizedObjectSet,\
    \ then\n   the translation of the ObjectSetElements instance is the translation\n\
    \   of the ParameterizedObjectSet (see Section 13).\n      Aside: The in-line\
    \ expansion of a ParameterizedObjectSet results\n      in an ObjectSet.  An ObjectSetElements\
    \ instance that is an\n      ObjectSet is a notational capability that does not\
    \ exist in ASN.1,\n      but is allowed in ASN.X to avoid the need to manufacture\
    \ a\n      reference name for the expanded parameterized definition.\n"
- title: 11.2.1.  ObjectSetFromObjects Translation
  contents:
  - "11.2.1.  ObjectSetFromObjects Translation\n   The translation of an ObjectSetFromObjects\
    \ instance is an element\n   item with the [local name] \"objectSet\".  An element\
    \ item with the\n   [local name] \"annotation\" MAY be added to the [children]\
    \ of the\n   <objectSet> element item.  An element item with the [local name]\n\
    \   \"fromObjects\" SHALL be appended to the [children] of the <objectSet>\n \
    \  element item.\n   The translation of the ReferencedObjects instance in the\n\
    \   ObjectSetFromObjects SHALL be added to the [children] or [attributes]\n  \
    \ of the <fromObjects> element item.\n   The translation of the FieldName in the\
    \ ObjectSetFromObjects SHALL be\n   added to the [children] or [attributes] of\
    \ the <fromObjects> element\n   item.\n"
- title: 12.  Translation of Information From Objects
  contents:
  - "12.  Translation of Information From Objects\n   If a ReferencedObjects instance\
    \ is a DefinedObject (not a\n   DummyReference), then the translation of the ReferencedObjects\n\
    \   instance is the translation of the DefinedObject.\n   If a ReferencedObjects\
    \ instance is a DefinedObjectSet (not a\n   DummyReference), then the translation\
    \ of the ReferencedObjects\n   instance is the translation of the DefinedObjectSet.\n\
    \   If a ReferencedObjects instance is a DummyReference,\n   ParameterizedObject,\
    \ or ParameterizedObjectSet, then the translation\n   of the ReferencedObjects\
    \ instance is the translation of that\n   DummyReference, ParameterizedObject,\
    \ or ParameterizedObjectSet (see\n   Section 13).\n      Aside: The in-line expansion\
    \ of a ParameterizedObject or\n      ParameterizedObjectSet results in an Object\
    \ or ObjectSet,\n      respectively.  A ReferencedObjects instance that is an\
    \ Object or\n      ObjectSet is a notational capability that does not exist in\
    \ ASN.1,\n      but is allowed in ASN.X to avoid the need to manufacture a\n \
    \     reference name for an expanded parameterized definition.\n"
- title: 13.  Translation of Parameterized Definitions
  contents:
  - "13.  Translation of Parameterized Definitions\n   The translation of an ASN.1\
    \ specification into ASN.X replaces any\n   DummyReference [X.683] or reference\
    \ to a parameterized definition\n   [X.683] with the definition expanded in-line\
    \ (except for a special\n   case involving recursive parameterized types).  For\
    \ example, a\n   ParameterizedObject is replaced by the Object on the right-hand\
    \ side\n   of the referenced ParameterizedObjectAssignment.\n   The definition\
    \ that substitutes for a DummyReference or parameterized\n   reference (e.g.,\
    \ the Object that substitutes for a\n   ParameterizedObject) potentially comes\
    \ from a different module from\n   the reference.  Expanding a DummyReference\
    \ or parameterized reference\n   in-line puts the substitute definition into the\
    \ context of the module\n   containing the reference, which could therefore alter\
    \ the\n   interpretation of the substitute definition.\n   A type definition is\
    \ potentially dependent on the TagDefault and\n   ExtensionDefault of the module\
    \ in which it appears, and may also be\n   affected by encoding instructions in\
    \ an XML Encoding Rules (XER)\n   [X.693] encoding control section [X.693-1].\
    \  Other kinds of\n   definitions are not dependent on the module context; however,\
    \ type\n   definitions can be nested within the other kinds of definitions, so\
    \ a\n   change of context can still be significant.\n      Aside: Type definitions\
    \ are not dependent on their module's RXER\n      or Generic String Encoding Rules\
    \ (GSER) [GSER] encoding control\n      section [RXEREI][GSEREI] (as they are\
    \ currently defined), so the\n      presence of an encoding control section for\
    \ RXER or GSER is not\n      significant in a change of context.\n   The remainder\
    \ of this section describes how and when a change of\n   context is indicated\
    \ in the ASN.X translation of a DummyReference or\n   parameterized reference.\n\
    \   In any instance of use, the module containing the DummyReference or\n   parameterized\
    \ reference is the referencing module, and the module\n   providing the substitute\
    \ definition is the referenced module.  The\n   referenced and referencing modules\
    \ may be the same module.\n   In the case of a ParameterizedType, the substitute\
    \ definition is the\n   Type on the right-hand side of the referenced\n   ParameterizedTypeAssignment.\n\
    \   In the case of a ParameterizedValueSetType, the substitute definition\n  \
    \ is the constrained type on the right-hand side of the notional\n   ParameterizedTypeAssignment\
    \ equivalent to the referenced\n   ParameterizedValueSetTypeAssignment (see Clause\
    \ 15.8 of X.680\n   [X.680]).\n   In the case of a ParameterizedValue, the substitute\
    \ definition is the\n   Value on the right-hand side of the referenced\n   ParameterizedValueAssignment.\n\
    \   In the case of a ParameterizedObjectClass, the substitute definition\n   is\
    \ the ObjectClass on the right-hand side of the referenced\n   ParameterizedObjectClassAssignment.\n\
    \   In the case of a ParameterizedObject, the substitute definition is\n   the\
    \ Object on the right-hand side of the referenced\n   ParameterizedObjectAssignment.\n\
    \   In the case of a ParameterizedObjectSet, the substitute definition is\n  \
    \ the ObjectSet on the right-hand side of the referenced\n   ParameterizedObjectSetAssignment.\n\
    \   If the ActualParameter corresponding to a DummyReference is not a\n   ValueSet,\
    \ then the substitute definition for that DummyReference is\n   the Type, Value,\
    \ DefinedObjectClass, Object, or ObjectSet in the\n   ActualParameter.\n   If\
    \ the ActualParameter corresponding to a DummyReference is a\n   ValueSet, then\
    \ the substitute definition for that DummyReference is\n   the notional constrained\
    \ type equivalent to the ValueSet; the\n   ElementSetSpecs of the ValueSet contributes\
    \ to the constraint of the\n   constrained type, and the governor of the Parameter\
    \ corresponding to\n   the ActualParameter is used as the parent type that is\
    \ constrained.\n   Definition (interchangeable):  The contexts of the referencing\
    \ and\n   referenced modules are interchangeable with respect to interpreting\n\
    \   the substitute definition if:\n   (1) the referenced module is the referencing\
    \ module and does not\n       contain an XER encoding control section, or\n  \
    \ (2) the referenced module and referencing module have the same\n       TagDefault\
    \ (where an absent TagDefault is taken to be equivalent\n       to \"EXPLICIT\
    \ TAGS\"), the referenced module and referencing module\n       have the same\
    \ ExtensionDefault, and neither module has an XER\n       encoding control section.\n\
    \      Aside: A module with an XER encoding control section is not\n      considered\
    \ to have a context interchangeable with another module,\n      including itself,\
    \ because the typereference by which a substitute\n      type definition is identified\
    \ may appear in a TargetList in the\n      XER encoding control section of the\
    \ referenced module, and because\n      the in-line expansion of a substitute\
    \ definition may cause its\n      text to come within the scope of a TargetList\
    \ in the XER encoding\n      control section of the referencing module that would\
    \ not apply\n      otherwise.\n   Definition (recursively contained):  A ParameterizedType\
    \ is\n   recursively contained if its translation will be nested within the\n\
    \   translation (i.e., in-line expansion) of another ParameterizedType to\n  \
    \ which it is equivalent.  A ParameterizedValueSetType is recursively\n   contained\
    \ if its translation will be nested within the translation of\n   another ParameterizedValueSetType\
    \ to which it is equivalent.\n      Aside: ASN.1 does not permit the other kinds\
    \ of parameterized\n      reference to be recursive.\n   The translation of a\
    \ DummyReference, a ParameterizedType that is not\n   recursively contained, a\
    \ ParameterizedValue, a\n   ParameterizedValueSetType that is not recursively\
    \ contained, a\n   ParameterizedObjectClass, a ParameterizedObject, or a\n   ParameterizedObjectSet\
    \ is either:\n   (a) the translation of the substitute definition, or\n   (b)\
    \ an element item with the [local name] \"type\" if the substitute\n       definition\
    \ is a Type, \"value\" if the substitute definition is a\n       Value, \"class\"\
    \ if the substitute definition is an ObjectClass or\n       DefinedObjectClass,\
    \ \"object\" if the substitute definition is an\n       Object, or \"objectSet\"\
    \ if the substitute definition is an\n       ObjectSet.  A fully expanded reference\
    \ (described shortly) SHALL\n       be added to the [children] of the element\
    \ item.\n   The translation in case (b) is always allowed and provides\n   information\
    \ to identify the referenced module and the referenced\n   definition.\n   The\
    \ translation in case (a) MAY be used instead if and only if the\n   contexts\
    \ of the referencing and referenced modules are\n   interchangeable, or the contexts\
    \ of the referencing and referenced\n   modules are not interchangeable, but the\
    \ difference between them does\n   not affect how the substitute definition is\
    \ interpreted.\n      Aside: There are many ways in which the substitute definition\
    \ can\n      be unaffected by a difference between the contexts of the\n     \
    \ referencing and referenced modules.  One example would be where\n      the referencing\
    \ and referenced modules differ only in their\n      TagDefault, but the substitute\
    \ definition does not contain any\n      TaggedType notation.\n   Note that if\
    \ the translation in case (a) is used, then the\n   referencing module is still\
    \ the referencing module when considering a\n   nested in-line expansion.  If\
    \ the translation in case (b) is used,\n   then the referenced module becomes\
    \ the referencing module when\n   considering a nested in-line expansion.\n  \
    \ If case (a) is used for the translation of a DummyReference where the\n   substitute\
    \ definition is a Type, then an attribute form translation\n   of the substitute\
    \ definition SHALL NOT be used, and an attribute item\n   with the [local name]\
    \ \"explicit\" and [normalized value] \"true\" or \"1\"\n   SHALL be added to\
    \ the [attributes] of the <type> element item\n   resulting from the translation\
    \ of the substitute definition.  Where\n   the automatic tagging transformation\
    \ applies [X.680], this attribute\n   item indicates that explicit tagging applies\
    \ to the type instead of\n   the usual implicit tagging.\n   If case (b) is used\
    \ for the translation of a DummyReference where the\n   substitute definition\
    \ is a Type, then an attribute item with the\n   [local name] \"explicit\" and\
    \ [normalized value] \"true\" or \"1\" SHALL be\n   added to the [attributes]\
    \ of the <type> element item generated by\n   case (b).\n   A fully expanded reference\
    \ is an element item with the [local name]\n   \"expanded\".  Except in the case\
    \ of a DummyReference, the reference\n   name is indicated by an attribute item\
    \ with the [local name] \"name\"\n   added to the [attributes] of the <expanded>\
    \ element item.\n   In the case of a ParameterizedType or ParameterizedValueSetType,\
    \ the\n   [normalized value] of this attribute item is the typereference of the\n\
    \   ParameterizedType or ParameterizedValueSetType.\n   In the case of a ParameterizedValue,\
    \ the [normalized value] of this\n   attribute item is the valuereference of the\
    \ ParameterizedValue.\n   In the case of a ParameterizedObjectClass, the [normalized\
    \ value] of\n   this attribute item is the objectclassreference of the\n   ParameterizedObjectClass.\n\
    \   In the case of a ParameterizedObject, the [normalized value] of this\n   attribute\
    \ item is the objectreference of the ParameterizedObject.\n   In the case of a\
    \ ParameterizedObjectSet, the [normalized value] of\n   this attribute item is\
    \ the objectsetreference of the\n   ParameterizedObjectSet.\n   The \"name\" attribute\
    \ item MAY be omitted if:\n   (1) the conditions permitting the use of the translation\
    \ in case (a)\n       are satisfied, or\n   (2) the reference is not a typereference,\
    \ or\n   (3) the reference is a typereference that does not appear in any\n  \
    \     TargetList in an XER encoding control section of the referenced\n      \
    \ module.\n   The \"name\" attribute SHALL NOT appear in the translation of a\n\
    \   DummyReference.\n   The referenced module is indicated by an element item\
    \ with the\n   [local name] \"module\" added to the [children] of the <expanded>\n\
    \   element item.  The <module> element item MAY be omitted if the\n   conditions\
    \ permitting the use of the translation in case (a) are\n   satisfied, or if the\
    \ referencing module is the referenced module.\n   When the <module> element item\
    \ is present:\n   (1) An attribute item with the [local name] \"name\" SHOULD\
    \ be added to\n       the [attributes] of the <module> element item.  The\n  \
    \     [normalized value] of this attribute item is the modulereference\n     \
    \  in the ModuleIdentifier in the ModuleDefinition of the referenced\n       module.\n\
    \   (2) If the DefinitiveIdentifier in the ModuleIdentifier in the\n       ModuleDefinition\
    \ of the referenced module is not empty, then an\n       attribute item with the\
    \ [local name] \"identifier\" SHALL be added\n       to the [attributes] of the\
    \ <module> element item.  The\n       [normalized value] of this attribute item\
    \ is the RXER character\n       data translation of the DefinitiveIdentifier.\n\
    \   (3) If the referenced module has a schema identity URI, then an\n       attribute\
    \ item with the [local name] \"schemaIdentity\" SHALL be\n       added to the\
    \ [attributes] of the <module> element item.  The\n       [normalized value] of\
    \ this attribute item is the schema identity\n       URI of the referenced module.\n\
    \   The [attributes] of the <module> element item MUST contain at least\n   one\
    \ of the attribute items specified in cases (1), (2), and (3).\n   The translation\
    \ of the substitute definition SHALL be added to the\n   [children] or [attributes]\
    \ of the <expanded> element item.\n   Example\n      Consider these module definitions:\n\
    \         Templates\n         DEFINITIONS\n         AUTOMATIC TAGS ::=\n     \
    \    BEGIN\n         CollectionOfThings { Thing } ::= SEQUENCE OF thing Thing\n\
    \             -- the Thing on the right-hand side of the assignment is\n     \
    \        -- a DummyReference\n         END\n         ProtocolDefinitions\n   \
    \      DEFINITIONS\n         AUTOMATIC TAGS ::=\n         BEGIN\n         IMPORTS\n\
    \             CollectionOfThings{}\n                 FROM Templates\n        \
    \     ;\n         CollectionOfIntegers ::= CollectionOfThings { INTEGER }\n  \
    \           -- the right-hand side of the assignment is\n             -- a ParameterizedType\n\
    \         END\n      Without using the translation in case (a), the translations\
    \ of\n      these modules are:\n         <asnx:module name=\"Templates\"/>\n \
    \        <asnx:module xmlns:asnx=\"urn:ietf:params:xml:ns:asnx\"\n           \
    \           name=\"ProtocolDefinitions\">\n          <namedType name=\"CollectionOfIntegers\"\
    >\n           <type>\n            <expanded name=\"CollectionOfThings\">\n   \
    \          <module name=\"Templates\"/>\n             <type>\n              <sequenceOf>\n\
    \               <element name=\"thing\">\n                <type>\n           \
    \      <expanded>\n                  <module name=\"ProtocolDefinitions\"/>\n\
    \                  <type ref=\"asnx:INTEGER\"/>\n                 </expanded>\n\
    \                </type>\n               </element>\n              </sequenceOf>\n\
    \             </type>\n            </expanded>\n           </type>\n         \
    \ </namedType>\n         </asnx:module>\n      The translation of the Templates\
    \ module is empty because the\n      module contains only a parameterized assignment.\n\
    \      Since the contexts of the Templates and ProtocolDefinitions\n      modules\
    \ are interchangeable, a simpler translation of the\n      ProtocolDefinitions\
    \ module is permitted:\n         <asnx:module xmlns:asnx=\"urn:ietf:params:xml:ns:asnx\"\
    \n                      name=\"ProtocolDefinitions\">\n          <namedType name=\"\
    CollectionOfIntegers\">\n           <type>\n            <sequenceOf>\n       \
    \      <element name=\"thing\">\n              <type ref=\"asnx:INTEGER\" explicit=\"\
    true\"/>\n             </element>\n            </sequenceOf>\n           </type>\n\
    \          </namedType>\n         </asnx:module>\n   If a ParameterizedType or\
    \ ParameterizedValueSetType is recursively\n   contained, then its translation\
    \ is an element item with the\n   [local name] \"type\".  An attribute item with\
    \ the [local name]\n   \"ancestor\" SHALL be added to the [attributes] of the\
    \ <type> element\n   item.  The [normalized value] of this attribute item is the\
    \ decimal\n   digit string representing the integer value of one plus the number\
    \ of\n   intermediate enclosing <type> element items between the <type>\n   element\
    \ items resulting from the translations of the two equivalent\n   instances of\
    \ ParameterizedType or ParameterizedValueSetType.  An\n   element item with the\
    \ [local name] \"annotation\" MAY be added to the\n   [children] of the <type>\
    \ element item.\n   A <type> element item with an ancestor attribute item is a\
    \ reference\n   to an ancestor <type> element item.  This form for a <type> element\n\
    \   item SHOULD NOT be used in original specifications written in ASN.X.\n   \
    \   Aside: The form is only intended for the purpose of handling\n      recursive\
    \ parameterized type definitions in an ASN.1 specification\n      being translated\
    \ into ASN.X.  Such definitions are\n      self-referencing, but have no obvious\
    \ name.  It is also not easy\n      to construct a suitable name from the surrounding\
    \ context because\n      recursive parameterized types can be embedded in other\
    \ constructs,\n      such as information objects, that are themselves unnamed.\n\
    \   Example\n      Consider these type definitions, assumed to be defined in a\
    \ module\n      that does not have an XER encoding control section:\n        \
    \ Tree { ValueType } ::= SEQUENCE {\n             value          [0] ValueType,\n\
    \             left-subtree   [1] Tree { ValueType } OPTIONAL,\n             right-subtree\
    \  [2] Tree { ValueType } OPTIONAL\n         }\n         NumberTree ::= [APPLICATION\
    \ 13] Tree { INTEGER }\n      The assignment for \"Tree\" is not directly translated\
    \ because it is\n      a ParameterizedAssignment.  The translation for the \"\
    NumberTree\"\n      assignment, up to but not yet including the Type in the\n\
    \      TaggedType, is as follows:\n         <namedType name=\"NumberTree\">\n\
    \          <type>\n           <tagged tagClass=\"application\" number=\"13\"/>\n\
    \          </type>\n         </namedType>\n      The Type in the TaggedType is\
    \ a ParameterizedType.  Since the\n      ParameterizedType is not recursively\
    \ contained, the translation of\n      the ParameterizedType (using the translation\
    \ in case (a) above) is\n      the translation of the Type on the right-hand side\
    \ of the\n      referenced ParameterizedTypeAssignment, namely this type:\n  \
    \       SEQUENCE {\n             value          [0] ValueType,\n             left-subtree\
    \   [1] Tree { ValueType } OPTIONAL,\n             right-subtree  [2] Tree { ValueType\
    \ } OPTIONAL\n         }\n      ValueType is a DummyReference.  The translation\
    \ of the actual\n      parameter substitutes for the DummyReference.  In this\
    \ case, the\n      actual parameter is the INTEGER type.\n      The translation\
    \ for the SEQUENCE type, up to the first component,\n      is added to the <tagged>\
    \ element:\n         <namedType name=\"NumberTree\">\n          <type>\n     \
    \      <tagged tagClass=\"application\" number=\"13\">\n            <type><!--\
    \ Tree { INTEGER } -->\n             <sequence>\n              <element name=\"\
    value\">\n               <type>\n                <tagged number=\"0\">\n     \
    \            <type ref=\"asnx:INTEGER\"\n                       explicit=\"true\"\
    /><!-- ValueType -->\n                </tagged>\n               </type>\n    \
    \          </element>\n             </sequence>\n            </type>\n       \
    \    </tagged>\n          </type>\n         </namedType>\n      The Type in the\
    \ TaggedType for the second component is a\n      ParameterizedType.  Since this\
    \ ParameterizedType is recursively\n      contained, its translation is a <type>\
    \ element with the ancestor\n      attribute.  The value of the ancestor attribute\
    \ is \"2\" because\n      there is one intermediate <type> element (for a TaggedType).\
    \  Put\n      another way, the translations of the equivalent instances of\n \
    \     ParameterizedType are two <type> steps apart.\n      The translation of\
    \ the third component of the SEQUENCE type\n      follows the same pattern as\
    \ the second component.  The completed\n      translation is as follows:\n   \
    \      <namedType name=\"NumberTree\">\n          <type>\n           <tagged tagClass=\"\
    application\" number=\"13\">\n            <type><!-- Tree { INTEGER } -->\n  \
    \           <sequence>\n              <element name=\"value\">\n             \
    \  <type>\n                <tagged number=\"0\">\n                 <type ref=\"\
    asnx:INTEGER\"\n                       explicit=\"true\"/><!-- ValueType -->\n\
    \                </tagged>\n               </type>\n              </element>\n\
    \              <optional>\n               <element name=\"left-subtree\">\n  \
    \              <type>\n                 <tagged number=\"1\">\n              \
    \    <type ancestor=\"2\"/><!-- Tree { ValueType } -->\n                 </tagged>\n\
    \                </type>\n               </element>\n              </optional>\n\
    \              <optional>\n               <element name=\"right-subtree\">\n \
    \               <type>\n                 <tagged number=\"2\">\n             \
    \     <type ancestor=\"2\"/><!-- Tree { ValueType } -->\n                 </tagged>\n\
    \                </type>\n               </element>\n              </optional>\n\
    \             </sequence>\n            </type>\n           </tagged>\n       \
    \   </type>\n         </namedType>\n"
- title: 14.  EncodingControlSections Translation
  contents:
  - "14.  EncodingControlSections Translation\n   If an EncodingControlSections instance\
    \ contains at least one\n   EncodingControlSection with an encodingreference that\
    \ is not RXER,\n   then the translation of the EncodingControlSections instance\
    \ is an\n   element item with the [local name] \"encodingControls\".  The\n  \
    \ translation of each EncodingControlSection with an encodingreference\n   that\
    \ is not RXER SHALL be appended to the [children] of the\n   <encodingControls>\
    \ element item.\n      Aside: This is not suggesting that RXER encoding control\
    \ sections\n      are ignored.  Encoding control sections for RXER are not\n \
    \     explicitly represented in ASN.X, but rather affect how an ASN.1\n      module\
    \ is translated into an ASN.X module.  The effect of an RXER\n      encoding control\
    \ section on the translation is addressed in other\n      parts of this specification.\n\
    \      Encoding control sections for other encoding rules will have\n      explicit\
    \ representations in ASN.X.\n   If the encodingreference in an EncodingControlSection\
    \ is GSER, then\n   the translation of the EncodingControlSection is an element\
    \ item with\n   the [local name] \"GSER\".  The translation of the\n   EncodingInstructionAssignmentList\
    \ in the EncodingControlSection SHALL\n   be added to the [children] of the <GSER>\
    \ element item.\n   The EncodingInstructionAssignmentList notation is different\
    \ for each\n   set of encoding instructions.  The translation into ASN.X of an\n\
    \   EncodingInstructionAssignmentList for GSER is specified in a separate\n  \
    \ document [GSEREIT].\n      Aside: The translation of an EncodingInstructionAssignmentList\
    \ for\n      GSER, as it is currently defined, is always empty.\n   If the encodingreference\
    \ in an EncodingControlSection is XER, then\n   the translation of the EncodingControlSection\
    \ is an element item with\n   the [local name] \"XER\".  The translation of the\n\
    \   EncodingInstructionAssignmentList in the EncodingControlSection SHALL\n  \
    \ be added to the [children] of the <XER> element item.  The\n   translation into\
    \ ASN.X of an EncodingInstructionAssignmentList for\n   XER is specified in a\
    \ separate document [XEREIT].\n"
- title: 15.  Security Considerations
  contents:
  - "15.  Security Considerations\n   The ASN.X translation of an ASN.1 specification\
    \ is semantically\n   equivalent to the original ASN.1 specification.  The security\n\
    \   considerations that apply to an application built from the original\n   ASN.1\
    \ specification apply equally to an application built from the\n   ASN.X translation.\n\
    \   Syntax-based canonicalization for XML documents (e.g., Canonical XML\n   [CXML])\
    \ depends on the Infoset of an XML document being preserved.\n   However, the\
    \ Infoset representation of an ASN.X module potentially\n   changes if it is decoded\
    \ and re-encoded (though its ASN.1 value is\n   preserved), disrupting the Canonical\
    \ XML representation.  To avoid\n   this problem, ASN.X modules MUST be normalized\
    \ prior to the\n   application of syntax-based canonicalization.  The normalization\n\
    \   rules can be found in Section 6.13 of the specification for RXER\n   [RXER].\n"
- title: 16.  Acknowledgements
  contents:
  - "16.  Acknowledgements\n   The technology described in this document is the product\
    \ of a\n   research project begun jointly by Adacel Technologies Limited and\n\
    \   Deakin University, and subsequently refined and completed by eB2Bcom.\n"
- title: 17.  References
  contents:
  - '17.  References

    '
- title: 17.1.  Normative References
  contents:
  - "17.1.  Normative References\n   [BCP14]    Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [URI]      Berners-Lee, T., Fielding, R. and L. Masinter, \"Uniform\n\
    \              Resource Identifiers (URI): Generic Syntax\", STD 66, RFC\n   \
    \           3986, January 2005.\n   [GSER]     Legg, S., \"Generic String Encoding\
    \ Rules (GSER) for ASN.1\n              Types\", RFC 3641, October 2003.\n   [GSEREI]\
    \   Legg, S., \"Encoding Instructions for the Generic String\n              Encoding\
    \ Rules (GSER)\", RFC 4792, January 2007.\n   [RXER]     Legg, S. and D. Prager,\
    \ \"Robust XML Encoding Rules (RXER)\n              for Abstract Syntax Notation\
    \ One (ASN.1)\",\n               RFC 4910, July 2007.\n   [RXEREI]   Legg, S.,\
    \ \"Encoding Instructions for the Robust XML\n              Encoding Rules (RXER)\"\
    ,\n               RFC 4911, July 2007.\n   [GSEREIT]  Legg, S., \"Abstract Syntax\
    \ Notation X (ASN.X)\n              Representation of Encoding Instructions for\
    \ the Generic\n              String Encoding Rules (GSER)\",\n               RFC\
    \ 4913, July 2007.\n   [XEREIT]   Legg, S., \"Abstract Syntax Notation X (ASN.X)\n\
    \              Representation of Encoding Instructions for the XML\n         \
    \     Encoding Rules (XER)\",\n               RFC 4914, July 2007.\n   [X.680]\
    \    ITU-T Recommendation X.680 (07/02) | ISO/IEC 8824-1,\n              Information\
    \ technology - Abstract Syntax Notation One\n              (ASN.1):  Specification\
    \ of basic notation.\n   [X.680-1]  ITU-T Recommendation X.680 (2002) Amendment\
    \ 1 (10/03) |\n              ISO/IEC 8824-1:2002/Amd 1:2004, Support for EXTENDED-XER.\n\
    \   [X.681]    ITU-T Recommendation X.681 (07/02) | ISO/IEC 8824-2,\n        \
    \      Information technology - Abstract Syntax Notation One\n              (ASN.1):\
    \  Information object specification.\n   [X.682]    ITU-T Recommendation X.682\
    \ (07/02) | ISO/IEC 8824-3,\n              Information technology - Abstract Syntax\
    \ Notation One\n              (ASN.1):  Constraint specification.\n   [X.683]\
    \    ITU-T Recommendation X.683 (07/02) | ISO/IEC 8824-4,\n              Information\
    \ technology - Abstract Syntax Notation One\n              (ASN.1):  Parameterization\
    \ of ASN.1 specifications.\n   [X.693]    ITU-T Recommendation X.693 (12/01) |\
    \ ISO/IEC 8825-4:2002,\n              Information technology - ASN.1 encoding\
    \ rules: XML\n              encoding rules (XER).\n   [X.693-1]  Amendment 1:\
    \ (to ITU-T Rec. X.693 | ISO/IEC 8825-4) XER\n              encoding instructions\
    \ and EXTENDED-XER.\n   [XML10]    Bray, T., Paoli, J., Sperberg-McQueen, C.,\
    \ Maler, E. and\n              F. Yergeau, \"Extensible Markup Language (XML)\
    \ 1.0 (Fourth\n              Edition)\", W3C Recommendation,\n              http://www.w3.org/TR/2006/REC-xml-20060816,\
    \ August 2006.\n   [XML11]    Bray, T., Paoli, J., Sperberg-McQueen, C., Maler,\
    \ E.,\n              Yergeau, F., and J. Cowan, \"Extensible Markup Language\n\
    \              (XML) 1.1 (Second Edition)\", W3C Recommendation,\n           \
    \   http://www.w3.org/TR/2006/REC-xml11-20060816, August 2006.\n   [XMLNS10] \
    \ Bray, T., Hollander, D., Layman, A., and R. Tobin,\n              \"Namespaces\
    \ in XML 1.0 (Second Edition)\", W3C\n              Recommendation,\n        \
    \      http://www.w3.org/TR/2006/REC-xml-names-20060816, August\n            \
    \  2006.\n   [XMLNS11]  Bray, T., Hollander, D., Layman, A. and R. Tobin,\n  \
    \            \"Namespaces in XML 1.1 (Second Edition)\", W3C\n              Recommendation,\n\
    \              http://www.w3.org/TR/2006/REC-xml-names11-20060816, August\n  \
    \            2006.\n   [INFOSET]  Cowan, J. and R. Tobin, \"XML Information Set\
    \ (Second\n              Edition)\", W3C Recommendation,\n              http://www.w3.org/TR/2004/REC-xml-infoset-20040204,\n\
    \              February 2004.\n   [UNICODE]  The Unicode Consortium, \"The Unicode\
    \ Standard, Version\n              4.0\", Boston, MA, Addison-Wesley Developers\
    \ Press, 2003.\n              ISBN 0-321-18578-1.\n"
- title: 17.2.  Informative References
  contents:
  - "17.2.  Informative References\n   [CXML]     Boyer, J., \"Canonical XML Version\
    \ 1.0\", W3C\n              Recommendation,\n              http://www.w3.org/TR/2001/REC-xml-c14n-20010315,\
    \ March\n              2001.\n   [XSD1]     Thompson, H., Beech, D., Maloney,\
    \ M. and N. Mendelsohn,\n              \"XML Schema Part 1: Structures Second\
    \ Edition\", W3C\n              Recommendation,\n              http://www.w3.org/TR/2004/REC-xmlschema-1-20041028/,\n\
    \              October 2004.\n   [RNG]      Clark, J. and M. Makoto, \"RELAX NG\
    \ Tutorial\", OASIS\n              Committee Specification, http://www.oasis-open.org/\n\
    \              committees/relax-ng/tutorial-20011203.html, December 2001.\n"
- title: Appendix A.  ASN.1 for ASN.X
  contents:
  - "Appendix A.  ASN.1 for ASN.X\n   This appendix is normative.\n   AbstractSyntaxNotation-X\n\
    \       { iso(1) identified-organization(3) dod(6)\n         internet(1) private(4)\
    \ enterprise(1)\n         xmled(21472) asnx(1) module(0) notation(1) }\n   --\
    \ Copyright (C) The IETF Trust (2007).  This version of\n   -- this ASN.1 module\
    \ is part of RFC 4912; see the RFC itself\n   -- for full legal notices.\n   --\n\
    \   -- Regarding this ASN.1 module or any portion of it, the author\n   -- makes\
    \ no guarantees and is not responsible for any damage\n   -- resulting from its\
    \ use.  The author grants irrevocable permission\n   -- to anyone to use, modify,\
    \ and distribute it in any way that does\n   -- not diminish the rights of anyone\
    \ else to use, modify, and\n   -- distribute it, provided that redistributed derivative\
    \ works do\n   -- not contain misleading author or version information.\n   --\
    \ Derivative works need not be licensed under similar terms.\n   DEFINITIONS\n\
    \   RXER INSTRUCTIONS\n   AUTOMATIC TAGS\n   EXTENSIBILITY IMPLIED ::= BEGIN\n\
    \   IMPORTS\n       Markup,\n       AnyURI,\n       NCName,\n       Name,\n  \
    \     QName\n           FROM AdditionalBasicDefinitions\n               { iso(1)\
    \ identified-organization(3) dod(6)\n                 internet(1) private(4) enterprise(1)\n\
    \                 xmled(21472) asnx(1) module(0) basic(0) }\n       GSER-EncodingInstruction,\n\
    \       GSER-EncodingInstructionAssignmentList\n           FROM GSER-EncodingInstructionNotation\n\
    \               { iso(1) identified-organization(3) dod(6)\n                 internet(1)\
    \ private(4) enterprise(1)\n                 xmled(21472) asnx(1) module(0) gser-ei-notation(2)\
    \ }\n       XER-EncodingInstruction,\n       XER-EncodingInstructionAssignmentList\n\
    \           FROM XER-EncodingInstructionNotation\n               { iso(1) identified-organization(3)\
    \ dod(6)\n                 internet(1) private(4) enterprise(1)\n            \
    \     xmled(21472) asnx(1) module(0) xer-ei-notation(3) }\n       ;\n   ModuleDefinition\
    \ ::= [HOLLOW-INSERTIONS] SEQUENCE {\n       annotation            Annotation\
    \ OPTIONAL,\n       format                [ATTRIBUTE] [VERSION-INDICATOR]\n  \
    \                               UTF8String (\"1.0\", ...) DEFAULT \"1.0\",\n \
    \      name                  [ATTRIBUTE] ModuleReference,\n       identifier \
    \           [ATTRIBUTE] DefinitiveIdentifier OPTIONAL,\n       schemaIdentity\
    \        [ATTRIBUTE] AnyURI OPTIONAL,\n       targetNamespace       [ATTRIBUTE]\
    \ AnyURI OPTIONAL,\n       targetPrefix          [ATTRIBUTE] NCName OPTIONAL,\n\
    \       tagDefault            [ATTRIBUTE] TagDefault DEFAULT automatic,\n    \
    \   extensibilityImplied  [ATTRIBUTE] BOOLEAN DEFAULT FALSE,\n       export  \
    \              SEQUENCE { } OPTIONAL,\n           -- export is not used in this\
    \ version\n       imports               [GROUP] ImportList OPTIONAL,\n       assignments\
    \           [GROUP] AssignmentList OPTIONAL,\n       encodingControls      EncodingControlSections\
    \ OPTIONAL\n   }\n   ModuleReference ::= TypeReference\n   DefinitiveIdentifier\
    \ ::= OBJECT IDENTIFIER\n   TagDefault ::= ENUMERATED { explicit, implicit, automatic\
    \ }\n   Annotation ::= Markup\n   ImportList ::= SEQUENCE SIZE (1..MAX) OF import\
    \ Import\n   Import ::= SEQUENCE {\n       name            [ATTRIBUTE] ModuleReference\
    \ OPTIONAL,\n       identifier      [ATTRIBUTE] DefinitiveIdentifier OPTIONAL,\n\
    \       schemaIdentity  [ATTRIBUTE] AnyURI OPTIONAL,\n       namespace       [ATTRIBUTE]\
    \ AnyURI OPTIONAL,\n       schemaLocation  [ATTRIBUTE] AnyURI OPTIONAL\n   }\n\
    \   AssignmentList ::= SEQUENCE SIZE (1..MAX) OF\n       assignment [GROUP] Assignment\n\
    \   Assignment ::= [NO-INSERTIONS] CHOICE {\n       namedType       TypeAssignment,\n\
    \       namedValue      ValueAssignment,\n       namedValueSet   ValueSetTypeAssignment,\n\
    \       namedClass      ObjectClassAssignment,\n       namedObject     ObjectAssignment,\n\
    \       namedObjectSet  ObjectSetAssignment,\n       component       [GROUP] TopLevelNamedType\n\
    \   }\n   TypeAssignment ::= SEQUENCE {\n       annotation  Annotation OPTIONAL,\n\
    \       name        [ATTRIBUTE] TypeReference,\n       type        [GROUP] Type\n\
    \   }\n   TypeReference ::= UTF8String (PATTERN \"[A-Z]\\w*(-\\w+)*\")\n     \
    \                            -- \\w is equivalent to [a-zA-Z0-9]\n   ValueAssignment\
    \ ::= SEQUENCE {\n       annotation  Annotation OPTIONAL,\n       name       \
    \ [ATTRIBUTE] ValueReference,\n       type        [GROUP] Type,\n       value\
    \       [GROUP] Value\n   }\n   ValueReference ::= Identifier\n   Identifier ::=\
    \ UTF8String (PATTERN \"[a-z]\\w(-\\w+)*\")\n   ValueSetTypeAssignment ::= SEQUENCE\
    \ {\n       annotation  Annotation OPTIONAL,\n       name        [ATTRIBUTE] TypeReference,\n\
    \       type        [GROUP] Type,\n       valueSet    [GROUP] ValueSet\n   }\n\
    \   ObjectClassAssignment ::= SEQUENCE {\n       annotation   Annotation OPTIONAL,\n\
    \       name         [ATTRIBUTE] ObjectClassReference,\n       objectClass  [GROUP]\
    \ ObjectClass\n   }\n   ObjectClassReference ::= UTF8String\n                \
    \                (PATTERN \"[A-Z][A-Z0-9]*(-[A-Z0-9]+)*\")\n   ObjectAssignment\
    \ ::= SEQUENCE {\n       annotation   Annotation OPTIONAL,\n       name      \
    \   [ATTRIBUTE] ObjectReference,\n       objectClass  [GROUP] DefinedObjectClass,\n\
    \       object       [GROUP] Object\n   }\n   ObjectReference ::= ValueReference\n\
    \   ObjectSetAssignment ::= SEQUENCE {\n       annotation   Annotation OPTIONAL,\n\
    \       name         [ATTRIBUTE] ObjectSetReference,\n       objectClass  [GROUP]\
    \ DefinedObjectClass,\n       objectSet    [GROUP] ObjectSet\n   }\n   ObjectSetReference\
    \ ::= TypeReference\n   TopLevelNamedType ::= NamedType\n       (WITH COMPONENTS\
    \ { ...,\n           component (WITH COMPONENTS { ...,\n               definition\
    \ (WITH COMPONENTS { ..., reference ABSENT })\n           }),\n           element\
    \   (WITH COMPONENTS { ...,\n               definition (WITH COMPONENTS { ...,\
    \ reference ABSENT })\n           }),\n           attribute (WITH COMPONENTS {\
    \ ...,\n               definition (WITH COMPONENTS { ..., reference ABSENT })\n\
    \           }),\n           group         ABSENT,\n           member        ABSENT,\n\
    \           item          ABSENT,\n           simpleContent ABSENT })\n   NamedType\
    \ ::= [SINGULAR-INSERTIONS] CHOICE {\n       component      Element,\n       element\
    \        Element,\n       attribute      Attribute,\n       group          InvisibleNamedType,\n\
    \       member         InvisibleNamedType,\n       item           InvisibleNamedType,\n\
    \       simpleContent  InvisibleNamedType\n   }\n   Attribute ::= GenericNamedType\n\
    \       (WITH COMPONENTS { ...,\n           definition (WITH COMPONENTS { ...,\n\
    \               local (WITH COMPONENTS { ...,\n                   typeAsVersion\
    \ ABSENT }) }) })\n   Element ::= GenericNamedType\n       (WITH COMPONENTS {\
    \ ...,\n           definition (WITH COMPONENTS { ...,\n               local (WITH\
    \ COMPONENTS { ...,\n                   versionIndicator ABSENT }) }) })\n   InvisibleNamedType\
    \ ::= GenericNamedType\n       (WITH COMPONENTS { ...,\n           definition\
    \ (WITH COMPONENTS { ...,\n               reference  ABSENT,\n               local\
    \ (WITH COMPONENTS { ...,\n                   typeAsVersion ABSENT,\n        \
    \           versionIndicator ABSENT }) }) })\n   GenericNamedType ::= [HOLLOW-INSERTIONS]\
    \ SEQUENCE {\n       annotation  Annotation OPTIONAL,\n       identifier  [ATTRIBUTE]\
    \ IdentifierOrEmpty OPTIONAL,\n       definition  [GROUP] CHOICE {\n         \
    \  reference   [GROUP] DefinedComponent,\n           local       [GROUP] LocalComponent\n\
    \       }\n   }\n   IdentifierOrEmpty ::= UTF8String (INCLUDES Identifier | \"\
    \")\n   DefinedComponent ::= [HOLLOW-INSERTIONS] SEQUENCE {\n       name     \
    \    [GROUP] [NO-INSERTIONS] CHOICE {\n           ref          [ATTRIBUTE] QName,\n\
    \           elementType  [ATTRIBUTE] Name\n       },\n       namespace    [ATTRIBUTE]\
    \ AnyURI OPTIONAL,\n       context      [ATTRIBUTE] AnyURI OPTIONAL,\n       embedded\
    \     [ATTRIBUTE] BOOLEAN OPTIONAL,\n       prefixes     [GROUP] EncodingPrefixes\
    \ OPTIONAL\n   }\n   (WITH COMPONENTS { ...,\n        name (WITH COMPONENTS {\
    \ ref PRESENT }),\n        namespace ABSENT } |\n    WITH COMPONENTS { ...,\n\
    \        name (WITH COMPONENTS { elementType PRESENT }),\n        embedded ABSENT\
    \ })\n   LocalComponent ::= SEQUENCE {\n       name              [ATTRIBUTE] NCName,\n\
    \       typeAsVersion     [ATTRIBUTE] BOOLEAN OPTIONAL,\n       versionIndicator\
    \  [ATTRIBUTE] BOOLEAN OPTIONAL,\n       type              [GROUP] Type\n   }\n\
    \   Type ::= [NO-INSERTIONS] CHOICE {\n       typeRef  [NAME AS \"type\"] [ATTRIBUTE]\
    \ QName,\n       type     ElementFormType\n   }\n   ElementFormType ::= [HOLLOW-INSERTIONS]\
    \ SEQUENCE {\n       annotation  Annotation OPTIONAL,\n       explicit    [ATTRIBUTE]\
    \ BOOLEAN OPTIONAL,\n       definition  [GROUP] CHOICE {\n           reference\
    \        [GROUP] DefinedType,\n           expanded         ExpandedType,\n   \
    \        ancestor         [ATTRIBUTE] INTEGER (1..MAX),\n           namedBitList\
    \     NamedBitList,\n           namedNumberList  NamedNumberList,\n          \
    \ enumerated       EnumeratedType,\n           tagged           TaggedType,\n\
    \           prefixed         EncodingPrefixedType,\n           selection     \
    \   SelectionType,\n           instanceOf       InstanceOfType,\n           fromClass\
    \        ObjectClassFieldType,\n           fromObjects      InformationFromObjects,\n\
    \           sequence         SequenceType,\n           set              SetType,\n\
    \           choice           ChoiceType,\n           union            UnionType,\n\
    \           sequenceOf       SequenceOfType,\n           setOf            SetOfType,\n\
    \           list             ListType,\n           constrained      ConstrainedType\n\
    \       }\n   }\n   DefinedType ::= SEQUENCE {\n       name       [GROUP] [NO-INSERTIONS]\
    \ CHOICE {\n           ref          [ATTRIBUTE] QName,\n           elementType\
    \  [ATTRIBUTE] Name\n       },\n       context    [ATTRIBUTE] AnyURI OPTIONAL,\n\
    \       embedded   [ATTRIBUTE] BOOLEAN OPTIONAL\n   }\n   (WITH COMPONENTS { ...,\n\
    \        name (WITH COMPONENTS { ref PRESENT }) } |\n    WITH COMPONENTS { ...,\n\
    \        name (WITH COMPONENTS { elementType PRESENT }),\n        embedded ABSENT\
    \ })\n   ExpandedType ::= SEQUENCE {\n       name    [ATTRIBUTE] NCName OPTIONAL,\n\
    \       module  ReferencedModule OPTIONAL,\n       type    [GROUP] Type\n   }\n\
    \   ReferencedModule ::= SEQUENCE {\n       name            [ATTRIBUTE] ModuleReference\
    \ OPTIONAL,\n       identifier      [ATTRIBUTE] DefinitiveIdentifier OPTIONAL,\n\
    \       schemaIdentity  [ATTRIBUTE] AnyURI OPTIONAL\n   }\n   NamedBitList ::=\
    \ SEQUENCE SIZE (1..MAX) OF namedBit NamedBit\n   NamedBit ::= SEQUENCE {\n  \
    \     name        [ATTRIBUTE] NCName,\n       identifier  [ATTRIBUTE] Identifier\
    \ OPTIONAL,\n       bit         [ATTRIBUTE] INTEGER (0..MAX)\n   }\n   NamedNumberList\
    \ ::= SEQUENCE SIZE (1..MAX) OF\n       namedNumber NamedNumber\n   NamedNumber\
    \ ::= SEQUENCE {\n       name        [ATTRIBUTE] NCName,\n       identifier  [ATTRIBUTE]\
    \ Identifier OPTIONAL,\n       number      [ATTRIBUTE] INTEGER\n   }\n   EnumeratedType\
    \ ::= SEQUENCE {\n       root       [GROUP] Enumeration,\n       extension  SEQUENCE\
    \ {\n           exception  ExceptionSpec OPTIONAL,\n           additions  [GROUP]\
    \ Enumeration OPTIONAL\n       } OPTIONAL\n   }\n   Enumeration ::= SEQUENCE SIZE\
    \ (1..MAX) OF\n       enumeration EnumerationItem\n   EnumerationItem ::= SEQUENCE\
    \ {\n       name        [ATTRIBUTE] NCName,\n       identifier  [ATTRIBUTE] Identifier\
    \ OPTIONAL,\n       number      [ATTRIBUTE] INTEGER OPTIONAL\n   }\n   Tag ::=\
    \ SEQUENCE {\n       tagClass  [ATTRIBUTE] TagClass OPTIONAL,\n       number \
    \   [ATTRIBUTE] INTEGER (0..MAX),\n       tagging   [ATTRIBUTE] Tagging OPTIONAL\n\
    \   }\n   TaggedType ::= SEQUENCE {\n       COMPONENTS OF Tag,\n       type  [GROUP]\
    \ Type\n   }\n   TagClass ::= ENUMERATED { universal, application, private }\n\
    \   Tagging ::= ENUMERATED { explicit, implicit }\n   EncodingPrefixedType ::=\
    \ [HOLLOW-INSERTIONS] SEQUENCE {\n       prefixes  [GROUP] EncodingPrefixes,\n\
    \       type      [GROUP] Type\n   }\n   EncodingPrefixes ::= SEQUENCE SIZE (1..MAX)\
    \ OF\n       prefix [GROUP] EncodingPrefix\n   EncodingPrefix ::= [SINGULAR-INSERTIONS]\
    \ CHOICE {\n       tag   [NAME AS \"TAG\"] Tag,\n       gser  [NAME AS \"GSER\"\
    ] GSER-EncodingInstruction,\n       xer   [NAME AS \"XER\"] XER-EncodingInstruction\n\
    \       -- plus encoding instructions\n       -- for other encoding rules in the\
    \ future\n   }\n   SelectionType ::= SEQUENCE {\n       alternative  [GROUP] [SINGULAR-INSERTIONS]\
    \ CHOICE {\n           component    [ATTRIBUTE] QName,\n           element   \
    \   [ATTRIBUTE] QName,\n           attribute    [ATTRIBUTE] QName,\n         \
    \  group        [ATTRIBUTE] QName,\n           member       [ATTRIBUTE] QName\n\
    \       },\n       type         [GROUP] Type\n   }\n   InstanceOfType ::= DefinedObjectClass\n\
    \   ObjectClassFieldType ::= SEQUENCE {\n       objectClass  [GROUP] DefinedObjectClass,\n\
    \       fieldName    [GROUP] FieldName\n   }\n   FieldName ::= [SINGULAR-INSERTIONS]\
    \ CHOICE {\n       fieldNameAtt  [NAME AS \"fieldName\"]\n                   \
    \      [ATTRIBUTE] PrimitiveFieldNames,\n       fieldName     PrimitiveFieldNames\n\
    \   }\n   PrimitiveFieldNames ::= UTF8String\n   InformationFromObjects ::= [HOLLOW-INSERTIONS]\
    \ SEQUENCE {\n       referencedObjects  [GROUP] ReferencedObjects,\n       fieldName\
    \          [GROUP] FieldName\n   }\n   ReferencedObjects ::= [SINGULAR-INSERTIONS]\
    \ CHOICE {\n       object     [GROUP] Object,\n       objectSet  [GROUP] ObjectSet\n\
    \   }\n   Insertions ::=\n       ENUMERATED { none, hollow, singular, uniform,\
    \ multiform }\n   SequenceType ::= [HOLLOW-INSERTIONS] SEQUENCE {\n       insertions\
    \         [ATTRIBUTE] Insertions OPTIONAL,\n       root               [GROUP]\
    \ ComponentTypeList OPTIONAL,\n       extensionAndFinal  [GROUP] [HOLLOW-INSERTIONS]\
    \ SEQUENCE {\n           extension          [HOLLOW-INSERTIONS] SEQUENCE {\n \
    \              exception          ExceptionSpec OPTIONAL,\n               additions\
    \          [GROUP] ExtensionAdditions OPTIONAL\n           },\n           root\
    \               [GROUP] ComponentTypeList OPTIONAL\n       } OPTIONAL\n   }\n\
    \   ComponentTypeList ::= SEQUENCE SIZE (1..MAX) OF\n       componentType [GROUP]\
    \ ComponentType\n   ComponentType ::= [NO-INSERTIONS] CHOICE {\n       component\
    \     [GROUP] SequenceNamedType,\n       optional      SEQUENCE {\n          \
    \ component     [GROUP] SequenceNamedType,\n           default       Value OPTIONAL\n\
    \       },\n       componentsOf  Type\n   }\n   SequenceNamedType ::= NamedType\n\
    \       (WITH COMPONENTS { ..., member ABSENT, item ABSENT })\n   ExtensionAdditions\
    \ ::= SEQUENCE SIZE (1..MAX) OF\n       addition [GROUP] ExtensionAddition\n \
    \  ExtensionAddition ::= [NO-INSERTIONS] CHOICE {\n       extensionGroup  ExtensionAdditionGroup,\n\
    \       componentType   [GROUP] ComponentType\n   }\n   ExtensionAdditionGroup\
    \ ::= [HOLLOW-INSERTIONS] SEQUENCE {\n       version         [ATTRIBUTE] VersionNumber\
    \ OPTIONAL,\n       componentTypes  [GROUP] ComponentTypeList\n   }\n   VersionNumber\
    \ ::= INTEGER (2..MAX)\n   SetType ::= SequenceType\n   ChoiceOrUnionType ::=\
    \ [HOLLOW-INSERTIONS] SEQUENCE {\n       insertions  [ATTRIBUTE] Insertions OPTIONAL,\n\
    \       precedence  [ATTRIBUTE] PrecedenceList OPTIONAL,\n       root        [GROUP]\
    \ AlternativeTypeList,\n       extension   [HOLLOW-INSERTIONS] SEQUENCE {\n  \
    \         exception   ExceptionSpec OPTIONAL,\n           additions   [GROUP]\
    \ ExtensionAdditionAlternatives OPTIONAL\n       } OPTIONAL\n   }\n   PrecedenceList\
    \ ::= [LIST] SEQUENCE SIZE (1..MAX) OF member QName\n   AlternativeTypeList ::=\
    \ SEQUENCE SIZE (1..MAX) OF\n       component [GROUP] ChoiceOrUnionNamedType\n\
    \   ChoiceOrUnionNamedType ::= NamedType\n       (WITH COMPONENTS { ..., item\
    \ ABSENT, simpleContent ABSENT })\n   ExtensionAdditionAlternatives ::= SEQUENCE\
    \ SIZE (1..MAX) OF\n       addition [GROUP] ExtensionAdditionAlternative\n   ExtensionAdditionAlternative\
    \ ::= [NO-INSERTIONS] CHOICE {\n       extensionGroup  ExtensionAdditionAlternativesGroup,\n\
    \       component       [GROUP] ChoiceOrUnionNamedType\n   }\n   ExtensionAdditionAlternativesGroup\
    \ ::= [HOLLOW-INSERTIONS] SEQUENCE {\n       version       [ATTRIBUTE] VersionNumber\
    \ OPTIONAL,\n       alternatives  [GROUP] AlternativeTypeList\n   }\n   ChoiceType\
    \ ::= ChoiceOrUnionType\n       (WITH COMPONENTS { ...,\n           precedence\
    \ ABSENT,\n           root (WITH COMPONENT (INCLUDES ChoiceNamedType)),\n    \
    \       extension (WITH COMPONENTS { ...,\n               additions (WITH COMPONENT\
    \ (WITH COMPONENTS { ...,\n                   extensionGroup (WITH COMPONENTS\
    \ { ...,\n                       alternatives (WITH COMPONENT\n              \
    \             (INCLUDES ChoiceNamedType)) }),\n                   component (INCLUDES\
    \ ChoiceNamedType) })) }) })\n   ChoiceNamedType ::= ChoiceOrUnionNamedType\n\
    \       (WITH COMPONENTS { ..., member ABSENT })\n   UnionType ::= ChoiceOrUnionType\n\
    \       (WITH COMPONENTS { ...,\n           insertions ABSENT,\n           root\
    \ (WITH COMPONENT (INCLUDES UnionNamedType)),\n           extension (WITH COMPONENTS\
    \ { ...,\n               additions (WITH COMPONENT (WITH COMPONENTS { ...,\n \
    \                  extensionGroup (WITH COMPONENTS { ...,\n                  \
    \     alternatives (WITH COMPONENT\n                           (INCLUDES UnionNamedType))\
    \ }),\n                   component (INCLUDES UnionNamedType) })) }) })\n   UnionNamedType\
    \ ::= ChoiceOrUnionNamedType\n       (WITH COMPONENTS { ...,\n           component\
    \ ABSENT,\n           element   ABSENT,\n           attribute ABSENT,\n      \
    \     group     ABSENT })\n   SequenceOfOrListType ::= SEQUENCE {\n       minSize\
    \    [ATTRIBUTE] INTEGER (0..MAX) OPTIONAL,\n       maxSize    [ATTRIBUTE] INTEGER\
    \ (0..MAX) OPTIONAL,\n       component  [GROUP] NamedType\n                  \
    \    (WITH COMPONENTS { ...,\n                          attribute     ABSENT,\n\
    \                          member        ABSENT,\n                          simpleContent\
    \ ABSENT })\n   }\n   SequenceOfType ::= SequenceOfOrListType\n       (WITH COMPONENTS\
    \ { ...,\n           component (WITH COMPONENTS { ..., item ABSENT }) })\n   SetOfType\
    \ ::= SequenceOfType\n   ListType ::= SequenceOfOrListType\n       (WITH COMPONENTS\
    \ { ...,\n           component (WITH COMPONENTS { ...,\n                     \
    \    component ABSENT,\n                         element   ABSENT,\n         \
    \                group     ABSENT }) })\n   ConstrainedType ::= [HOLLOW-INSERTIONS]\
    \ SEQUENCE {\n       type        [GROUP] Type,\n       constraint  [GROUP] Constraint\n\
    \   }\n   Constraint ::= SEQUENCE {\n       constraintSpec  [GROUP] [NO-INSERTIONS]\
    \ CHOICE {\n           subtype         [GROUP] ElementSetSpecs,\n           constrainedBy\
    \   UserDefinedConstraint,\n           table           TableConstraint,\n    \
    \       contents        ContentsConstraint\n       },\n       exception      \
    \ ExceptionSpec OPTIONAL\n   }\n   UserDefinedConstraint ::= [HOLLOW-INSERTIONS]\
    \ SEQUENCE {\n       annotation  Annotation OPTIONAL,\n       parameters  [GROUP]\
    \ ConstraintParameters OPTIONAL\n   }\n   ConstraintParameters ::= SEQUENCE SIZE\
    \ (1..MAX) OF\n       parameter [GROUP] UserDefinedConstraintParameter\n   UserDefinedConstraintParameter\
    \ ::= [SINGULAR-INSERTIONS] CHOICE {\n       valueParameter      SEQUENCE {\n\
    \           type                [GROUP] Type,\n           value              \
    \ [GROUP] Value\n       },\n       valueSetParameter   SEQUENCE {\n          \
    \ type                [GROUP] Type,\n           valueSet            [GROUP] ValueSet\n\
    \       },\n       objectParameter     SEQUENCE {\n           objectClass    \
    \     [GROUP] DefinedObjectClass,\n           object              [GROUP] Object\n\
    \       },\n       objectSetParameter  SEQUENCE {\n           objectClass    \
    \     [GROUP] DefinedObjectClass,\n           objectSet           [GROUP] ObjectSet\n\
    \       },\n       typeParameter       SEQUENCE {\n           type           \
    \     [GROUP] Type\n       },\n       classParameter      SEQUENCE {\n       \
    \    objectClass         [GROUP] DefinedObjectClass\n       }\n   }\n   TableConstraint\
    \ ::= SEQUENCE {\n       objectSet          [GROUP] ObjectSet,\n       componentRelation\
    \  [GROUP] AtNotations OPTIONAL\n   }\n   AtNotations ::= SEQUENCE SIZE (1..MAX)\
    \ OF\n       restrictBy AtNotation\n   AtNotation ::= Markup\n   ContentsConstraint\
    \ ::= SEQUENCE {\n       containing  Type OPTIONAL,\n       encodedBy   Value\
    \ OPTIONAL\n   } ((WITH COMPONENTS { ..., containing PRESENT }) |\n      (WITH\
    \ COMPONENTS { ..., encodedBy PRESENT }))\n   ExceptionSpec ::= SEQUENCE {\n \
    \      type   [GROUP] Type,\n       value  [GROUP] Value\n   }\n   Value ::= [NO-INSERTIONS]\
    \ CHOICE {\n       literalValueAtt  [NAME AS \"literalValue\"] [ATTRIBUTE] UTF8String,\n\
    \       literalValue     ElementFormLiteralValue,\n       valueRef         [NAME\
    \ AS \"value\"] [ATTRIBUTE] QName,\n       value            ElementFormNotationalValue\n\
    \   }\n   ElementFormLiteralValue ::= Markup\n   -- If asnx:literal=\"false\"\
    \ then the governing type of\n   -- ElementFormLiteralValue is ElementFormNotationalValue.\n\
    \   ElementFormNotationalValue ::= [HOLLOW-INSERTIONS] SEQUENCE {\n       annotation\
    \  Annotation OPTIONAL,\n       definition  [GROUP] [NO-INSERTIONS] CHOICE {\n\
    \           reference      [GROUP] Reference,\n           expanded       ExpandedValue,\n\
    \           fromObjects    InformationFromObjects,\n           openTypeValue \
    \ SEQUENCE {\n               type           [GROUP] Type,\n               value\
    \          [GROUP] Value\n           },\n           components     [GROUP] ComponentValueList\n\
    \       }\n   }\n   Reference ::= SEQUENCE {\n       ref      [ATTRIBUTE] QName,\n\
    \       context  [ATTRIBUTE] AnyURI OPTIONAL\n   }\n   ExpandedValue ::= SEQUENCE\
    \ {\n       name    [ATTRIBUTE] NCName OPTIONAL,\n       module  ReferencedModule\
    \ OPTIONAL,\n       value   [GROUP] Value\n   }\n   ComponentValueList ::= SEQUENCE\
    \ SIZE (1..MAX) OF\n       component [GROUP] NamedValue\n   NamedValue ::= [SINGULAR-INSERTIONS]\
    \ CHOICE {\n       component      GenericNamedValue,\n       element        GenericNamedValue,\n\
    \       attribute      GenericNamedValue,\n       group          GenericNamedValue,\n\
    \       member         GenericNamedValue,\n       item           GenericNamedValue,\n\
    \       simpleContent  GenericNamedValue\n   }\n   GenericNamedValue ::= SEQUENCE\
    \ {\n       name   [ATTRIBUTE] QName,\n       value  [GROUP] Value\n   }\n   ValueSet\
    \ ::= [NO-INSERTIONS] CHOICE {\n       valueSetRef  [NAME AS \"valueSet\"] [ATTRIBUTE]\
    \ QName,\n           -- valueSetRef is not used in this version\n       valueSet\
    \     ElementFormValueSet\n   }\n   ElementFormValueSet ::= [HOLLOW-INSERTIONS]\
    \ SEQUENCE {\n       annotation  Annotation OPTIONAL,\n       definition  [GROUP]\
    \ [NO-INSERTIONS] CHOICE {\n           elementSetSpecs  [GROUP] ElementSetSpecs\n\
    \       }\n   }\n   ElementSetSpecs ::= [HOLLOW-INSERTIONS] SEQUENCE {\n     \
    \  root       [GROUP] ValueElementSetSpec,\n       extension  [HOLLOW-INSERTIONS]\
    \ SEQUENCE {\n           additions  [GROUP] ValueElementSetSpec OPTIONAL\n   \
    \    } OPTIONAL\n   }\n   ValueElementSetSpec ::= ElementSetSpec\n   (WITH COMPONENTS\
    \ { ...,\n       object        ABSENT,\n       objectSet     ABSENT,\n       union\
    \         (WITH COMPONENT (INCLUDES ValueElementSetSpec)),\n       intersection\
    \  (WITH COMPONENT (INCLUDES ValueElementSetSpec)),\n       all           (WITH\
    \ COMPONENTS { ...,\n           elements      (INCLUDES ValueElementSetSpec),\n\
    \           except        (INCLUDES ValueElementSetSpec) }) })\n   ElementSetSpec\
    \ ::= [SINGULAR-INSERTIONS] CHOICE {\n       literalValue    ElementFormLiteralValue,\n\
    \       value           ElementFormNotationalValue,\n       includes        Type,\n\
    \       range           ValueRange,\n       size            Constraint,\n    \
    \   typeConstraint  Type,\n       from            Constraint,\n       withComponent\
    \   Constraint,\n       withComponents  MultipleTypeConstraints,\n       pattern\
    \         Value,\n       object          ElementFormObject,\n       objectSet\
    \       ElementFormObjectSet,\n       union           ElementSetSpecList,\n  \
    \     intersection    ElementSetSpecList,\n       all             SEQUENCE {\n\
    \           elements        [GROUP] ElementSetSpec OPTIONAL,\n           except\
    \          ElementSetSpec\n       }\n   }\n   ElementSetSpecList ::= SEQUENCE\
    \ SIZE (2..MAX) OF\n       elements [GROUP] ElementSetSpec\n   ValueRange ::=\
    \ SEQUENCE {\n       minimum  [GROUP] [NO-INSERTIONS] CHOICE {\n           minInclusive\
    \  EndValue,\n           minExclusive  EndValue\n       } DEFAULT minInclusive:{},\n\
    \       maximum  [GROUP] [NO-INSERTIONS] CHOICE {\n           maxInclusive  EndValue,\n\
    \           maxExclusive  EndValue\n       } DEFAULT maxInclusive:{}\n   }\n \
    \  EndValue ::= [HOLLOW-INSERTIONS] SEQUENCE {\n       value  [GROUP] Value OPTIONAL\n\
    \   }\n   MultipleTypeConstraints ::= [HOLLOW-INSERTIONS] SEQUENCE {\n       partial\
    \          [ATTRIBUTE] BOOLEAN DEFAULT FALSE,\n       typeConstraints  [GROUP]\
    \ TypeConstraints\n   }\n   TypeConstraints ::= SEQUENCE SIZE (1..MAX) OF\n  \
    \     namedConstraint [GROUP] NamedConstraint\n   NamedConstraint ::= [SINGULAR-INSERTIONS]\
    \ CHOICE {\n       component      GenericNamedConstraint,\n       element    \
    \    GenericNamedConstraint,\n       attribute      GenericNamedConstraint,\n\
    \       group          GenericNamedConstraint,\n       member         GenericNamedConstraint,\n\
    \       item           GenericNamedConstraint,\n       simpleContent  GenericNamedConstraint\n\
    \   }\n   GenericNamedConstraint ::= [HOLLOW-INSERTIONS] SEQUENCE {\n       name\
    \        [ATTRIBUTE] QName,\n       use         [ATTRIBUTE] PresenceConstraint\
    \ OPTIONAL,\n       constraint  [GROUP] Constraint OPTIONAL\n   }\n   PresenceConstraint\
    \ ::= ENUMERATED { present, absent, optional }\n   ObjectClass ::= [SINGULAR-INSERTIONS]\
    \ CHOICE {\n       classRef  [NAME AS \"class\"] [ATTRIBUTE] QName,\n       class\
    \     ElementFormObjectClass\n   }\n   DefinedObjectClass ::= ObjectClass\n  \
    \     (WITH COMPONENTS { ...,\n           class (WITH COMPONENTS { ...,\n    \
    \           definition (WITH COMPONENTS { ...,\n                   objectClassDefn\
    \ ABSENT }) }) })\n   ElementFormObjectClass ::= [HOLLOW-INSERTIONS] SEQUENCE\
    \ {\n       annotation  Annotation OPTIONAL,\n       definition  [GROUP] [NO-INSERTIONS]\
    \ CHOICE {\n           reference        [GROUP] Reference,\n           expanded\
    \         ExpandedObjectClass,\n           objectClassDefn  [GROUP] ObjectClassDefn\n\
    \       }\n   }\n   ExpandedObjectClass ::= SEQUENCE {\n       name         [ATTRIBUTE]\
    \ NCName OPTIONAL,\n       module       ReferencedModule OPTIONAL,\n       objectClass\
    \  [GROUP] ObjectClass\n   }\n   ObjectClassDefn ::= SEQUENCE SIZE (1..MAX) OF\n\
    \       fieldSpec [GROUP] FieldSpec\n   FieldSpec ::= [SINGULAR-INSERTIONS] CHOICE\
    \ {\n       typeField       TypeField,\n       valueField      ValueField,\n \
    \      valueSetField   ValueSetField,\n       objectField     ObjectField,\n \
    \      objectSetField  ObjectSetField,\n       optional        OptionalField\n\
    \   }\n   OptionalField ::= SEQUENCE {\n       field    [GROUP] [SINGULAR-INSERTIONS]\
    \ CHOICE {\n           typeField       TypeField,\n           valueField     \
    \ ValueField,\n           valueSetField   ValueSetField,\n           objectField\
    \     ObjectField,\n           objectSetField  ObjectSetField\n       },\n   \
    \    default  Setting OPTIONAL\n   } (WITH COMPONENTS { ...,\n         field (WITH\
    \ COMPONENTS { typeField PRESENT }),\n         default (WITH COMPONENTS { ...,\n\
    \             value ABSENT,\n             valueSet ABSENT,\n             object\
    \ ABSENT,\n             objectSet ABSENT }) } |\n      WITH COMPONENTS { ...,\n\
    \         field (WITH COMPONENTS { valueField PRESENT }),\n         default (WITH\
    \ COMPONENTS { ...,\n             type ABSENT,\n             valueSet ABSENT,\n\
    \             object ABSENT,\n             objectSet ABSENT }) } |\n      WITH\
    \ COMPONENTS { ...,\n         field (WITH COMPONENTS { valueSetField PRESENT }),\n\
    \         default (WITH COMPONENTS { ...,\n             type ABSENT,\n       \
    \      value ABSENT,\n             object ABSENT,\n             objectSet ABSENT\
    \ }) } |\n      WITH COMPONENTS { ...,\n         field (WITH COMPONENTS { objectField\
    \ PRESENT }),\n         default (WITH COMPONENTS { ...,\n             type ABSENT,\n\
    \             value ABSENT,\n             valueSet ABSENT,\n             objectSet\
    \ ABSENT }) } |\n      WITH COMPONENTS { ...,\n         field (WITH COMPONENTS\
    \ { objectSetField PRESENT }),\n         default (WITH COMPONENTS { ...,\n   \
    \          type ABSENT,\n             value ABSENT,\n             valueSet ABSENT,\n\
    \             object ABSENT }) })\n   TypeField ::= SEQUENCE {\n       annotation\
    \  Annotation OPTIONAL,\n       name        [ATTRIBUTE] TypeFieldReference\n \
    \  }\n   TypeFieldReference ::= TypeReference\n   ValueField ::= SEQUENCE {\n\
    \       annotation  Annotation OPTIONAL,\n       name        [ATTRIBUTE] ValueFieldReference,\n\
    \       unique      [ATTRIBUTE] BOOLEAN OPTIONAL,\n       governor    [GROUP]\
    \ [SINGULAR-INSERTIONS] CHOICE {\n           type           [GROUP] Type,\n  \
    \         typeFromField  FieldName\n       }\n   } ((WITH COMPONENTS { ..., unique\
    \ ABSENT }) |\n      (WITH COMPONENTS { ...,\n          governor (WITH COMPONENTS\
    \ { ..., typeFromField ABSENT }) }))\n   ValueFieldReference ::= ValueReference\n\
    \   ValueSetField ::= SEQUENCE {\n       annotation  Annotation OPTIONAL,\n  \
    \     name        [ATTRIBUTE] ValueSetFieldReference,\n       governor    [GROUP]\
    \ [SINGULAR-INSERTIONS] CHOICE {\n           type           [GROUP] Type,\n  \
    \         typeFromField  FieldName\n       }\n   }\n   ValueSetFieldReference\
    \ ::= TypeReference\n   ObjectField ::= SEQUENCE {\n       annotation   Annotation\
    \ OPTIONAL,\n       name         [ATTRIBUTE] ObjectFieldReference,\n       objectClass\
    \  [GROUP] DefinedObjectClass\n   }\n   ObjectFieldReference ::= ObjectReference\n\
    \   ObjectSetField ::= SEQUENCE {\n       annotation   Annotation OPTIONAL,\n\
    \       name         [ATTRIBUTE] ObjectSetFieldReference,\n       objectClass\
    \  [GROUP] DefinedObjectClass\n   }\n   ObjectSetFieldReference ::= ObjectSetReference\n\
    \   Object ::= [NO-INSERTIONS] CHOICE {\n       objectRef  [NAME AS \"object\"\
    ] [ATTRIBUTE] QName,\n       object     ElementFormObject\n   }\n   ElementFormObject\
    \ ::= [HOLLOW-INSERTIONS] SEQUENCE {\n       annotation  Annotation OPTIONAL,\n\
    \       definition  [GROUP] [SINGULAR-INSERTIONS] CHOICE {\n           reference\
    \    [GROUP] Reference,\n           expanded     ExpandedObject,\n           fromObjects\
    \  InformationFromObjects,\n           fields       [GROUP] ObjectDefn\n     \
    \  }\n   }\n   ExpandedObject ::= SEQUENCE {\n       name    [ATTRIBUTE] NCName\
    \ OPTIONAL,\n       module  ReferencedModule OPTIONAL,\n       object  [GROUP]\
    \ Object\n   }\n   ObjectDefn ::= SEQUENCE OF field FieldSetting\n   FieldSetting\
    \ ::= [HOLLOW-INSERTIONS] SEQUENCE {\n       name     [ATTRIBUTE] NCName,\n  \
    \     setting  [GROUP] Setting\n   }\n   Setting ::= CHOICE {\n       type   \
    \    [GROUP] Type,\n       value      [GROUP] Value,\n       valueSet   [GROUP]\
    \ ValueSet,\n       object     [GROUP] Object,\n       objectSet  [GROUP] ObjectSet\n\
    \   }\n   ObjectSet ::= [NO-INSERTIONS] CHOICE {\n       objectSetRef  [NAME AS\
    \ \"objectSet\"] [ATTRIBUTE] QName,\n       objectSet     ElementFormObjectSet\n\
    \   }\n   ElementFormObjectSet ::= [HOLLOW-INSERTIONS] SEQUENCE {\n       annotation\
    \  Annotation OPTIONAL,\n       definition  [GROUP] [NO-INSERTIONS] CHOICE {\n\
    \           reference      [GROUP] Reference,\n           expanded       ExpandedObjectSet,\n\
    \           objectSetSpec  [GROUP] ObjectSetSpec,\n           fromObjects    InformationFromObjects\n\
    \       }\n   }\n   ExpandedObjectSet ::= SEQUENCE {\n       name       [ATTRIBUTE]\
    \ NCName OPTIONAL,\n       module     ReferencedModule OPTIONAL,\n       objectSet\
    \  [GROUP] ObjectSet\n   }\n   ObjectSetSpec ::= [HOLLOW-INSERTIONS] SEQUENCE\
    \ {\n       root       [GROUP] ObjectElementSetSpec OPTIONAL,\n       extension\
    \  [HOLLOW-INSERTIONS] SEQUENCE {\n           additions  [GROUP] ObjectElementSetSpec\
    \ OPTIONAL\n       } OPTIONAL\n   } ((WITH COMPONENTS { ..., root PRESENT }) |\n\
    \      (WITH COMPONENTS { ..., extension PRESENT }))\n   ObjectElementSetSpec\
    \ ::= ElementSetSpec\n   (WITH COMPONENTS { ...,\n       literalValue    ABSENT,\n\
    \       value           ABSENT,\n       includes        ABSENT,\n       range\
    \           ABSENT,\n       size            ABSENT,\n       typeConstraint  ABSENT,\n\
    \       from            ABSENT,\n       withComponent   ABSENT,\n       withComponents\
    \  ABSENT,\n       pattern         ABSENT,\n       union           (WITH COMPONENT\
    \ (INCLUDES ObjectElementSetSpec)),\n       intersection    (WITH COMPONENT (INCLUDES\
    \ ObjectElementSetSpec)),\n       all             (WITH COMPONENTS { ...,\n  \
    \         elements        (INCLUDES ObjectElementSetSpec),\n           except\
    \          (INCLUDES ObjectElementSetSpec) }) })\n   EncodingControlSections ::=\
    \ SEQUENCE SIZE (1..MAX) OF\n       section [GROUP] EncodingControlSection\n \
    \  EncodingControlSection ::= [SINGULAR-INSERTIONS] CHOICE {\n       gser  [NAME\
    \ AS \"GSER\"] GSER-EncodingInstructionAssignmentList,\n       xer   [NAME AS\
    \ \"XER\"] XER-EncodingInstructionAssignmentList\n       -- plus encoding control\
    \ sections\n       -- for other encoding rules in the future\n   }\n   ENCODING-CONTROL\
    \ RXER\n       SCHEMA-IDENTITY  \"urn:oid:1.3.6.1.4.1.21472.1.0.1\"\n       TARGET-NAMESPACE\
    \ \"urn:ietf:params:xml:ns:asnx\" PREFIX \"asnx\"\n       COMPONENT module ModuleDefinition\n\
    \       COMPONENT literal [ATTRIBUTE] BOOLEAN\n   END\n"
- title: Appendix B.  ASN.X for ASN.X
  contents:
  - "Appendix B.  ASN.X for ASN.X\n   This appendix is non-normative.\n   <?xml version=\"\
    1.0\"?>\n   <asnx:module xmlns:asnx=\"urn:ietf:params:xml:ns:asnx\"\n        \
    \        name=\"AbstractSyntaxNotation-X\"\n                identifier=\"1.3.6.1.4.1.21472.1.0.1\"\
    \n                schemaIdentity=\"urn:oid:1.3.6.1.4.1.21472.1.0.1\"\n       \
    \         targetNamespace=\"urn:ietf:params:xml:ns:asnx\"\n                targetPrefix=\"\
    asnx\"\n                extensibilityImplied=\"true\">\n    <annotation>\n   \
    \  Copyright (C) The IETF Trust (2007).  This version of\n     this ASN.X module\
    \ is part of RFC 4912; see the RFC itself\n     for full legal notices.\n    \
    \ Regarding this ASN.X module or any portion of it, the author\n     makes no\
    \ guarantees and is not responsible for any damage\n     resulting from its use.\
    \  The author grants irrevocable permission\n     to anyone to use, modify, and\
    \ distribute it in any way that does\n     not diminish the rights of anyone else\
    \ to use, modify, and\n     distribute it, provided that redistributed derivative\
    \ works do\n     not contain misleading author or version information.\n     Derivative\
    \ works need not be licensed under similar terms.\n    </annotation>\n    <import\
    \ name=\"GSER-EncodingInstructionNotation\"\n            identifier=\"1.3.6.1.4.1.21472.1.0.2\"\
    \n            schemaIdentity=\"urn:oid:1.3.6.1.4.1.21472.1.0.2\"\n           \
    \ namespace=\"urn:ietf:params:xml:ns:asnx\"/>\n    <import name=\"XER-EncodingInstructionNotation\"\
    \n            identifier=\"1.3.6.1.4.1.21472.1.0.3\"\n            schemaIdentity=\"\
    urn:oid:1.3.6.1.4.1.21472.1.0.3\"\n            namespace=\"urn:ietf:params:xml:ns:asnx\"\
    />\n    <namedType name=\"ModuleDefinition\">\n     <type>\n      <sequence insertions=\"\
    hollow\">\n       <optional>\n        <element name=\"annotation\" type=\"asnx:Annotation\"\
    />\n       </optional>\n       <optional>\n        <attribute name=\"format\"\
    \ versionIndicator=\"true\">\n         <type>\n          <constrained type=\"\
    asnx:UTF8String\">\n           <literalValue>1.0</literalValue>\n           <extension/>\n\
    \          </constrained>\n         </type>\n        </attribute>\n        <default\
    \ literalValue=\"1.0\"/>\n       </optional>\n       <attribute name=\"name\"\
    \ type=\"asnx:ModuleReference\"/>\n       <optional>\n        <attribute name=\"\
    identifier\" type=\"asnx:DefinitiveIdentifier\"/>\n       </optional>\n      \
    \ <optional>\n        <attribute name=\"schemaIdentity\" type=\"asnx:AnyURI\"\
    />\n       </optional>\n       <optional>\n        <attribute name=\"targetNamespace\"\
    \ type=\"asnx:AnyURI\"/>\n       </optional>\n       <optional>\n        <attribute\
    \ name=\"targetPrefix\" type=\"asnx:NCName\"/>\n       </optional>\n       <optional>\n\
    \        <attribute name=\"tagDefault\" type=\"asnx:TagDefault\"/>\n        <default\
    \ literalValue=\"automatic\"/>\n       </optional>\n       <optional>\n      \
    \  <attribute name=\"extensibilityImplied\" type=\"asnx:BOOLEAN\"/>\n        <default\
    \ literalValue=\"false\"/>\n       </optional>\n       <optional>\n        <element\
    \ name=\"export\">\n         <annotation> export is not used in this version </annotation>\n\
    \         <type>\n          <sequence/>\n         </type>\n        </element>\n\
    \       </optional>\n       <optional>\n        <group name=\"imports\" type=\"\
    asnx:ImportList\"/>\n       </optional>\n       <optional>\n        <group name=\"\
    assignments\" type=\"asnx:AssignmentList\"/>\n       </optional>\n       <optional>\n\
    \        <element name=\"encodingControls\"\n                 type=\"asnx:EncodingControlSections\"\
    />\n       </optional>\n      </sequence>\n     </type>\n    </namedType>\n  \
    \  <namedType name=\"ModuleReference\" type=\"asnx:TypeReference\"/>\n    <namedType\
    \ name=\"DefinitiveIdentifier\"\n               type=\"asnx:OBJECT-IDENTIFIER\"\
    />\n    <namedType name=\"TagDefault\">\n     <type>\n      <enumerated>\n   \
    \    <enumeration name=\"explicit\"/>\n       <enumeration name=\"implicit\"/>\n\
    \       <enumeration name=\"automatic\"/>\n      </enumerated>\n     </type>\n\
    \    </namedType>\n    <namedType name=\"Annotation\" type=\"asnx:Markup\"/>\n\
    \    <namedType name=\"ImportList\">\n     <type>\n      <sequenceOf minSize=\"\
    1\">\n       <element name=\"import\" type=\"asnx:Import\"/>\n      </sequenceOf>\n\
    \     </type>\n    </namedType>\n    <namedType name=\"Import\">\n     <type>\n\
    \      <sequence>\n       <optional>\n        <attribute name=\"name\" type=\"\
    asnx:ModuleReference\"/>\n       </optional>\n       <optional>\n        <attribute\
    \ name=\"identifier\" type=\"asnx:DefinitiveIdentifier\"/>\n       </optional>\n\
    \       <optional>\n        <attribute name=\"schemaIdentity\" type=\"asnx:AnyURI\"\
    />\n       </optional>\n       <optional>\n        <attribute name=\"namespace\"\
    \ type=\"asnx:AnyURI\"/>\n       </optional>\n       <optional>\n        <attribute\
    \ name=\"schemaLocation\" type=\"asnx:AnyURI\"/>\n       </optional>\n      </sequence>\n\
    \     </type>\n    </namedType>\n    <namedType name=\"AssignmentList\">\n   \
    \  <type>\n      <sequenceOf minSize=\"1\">\n       <group name=\"assignment\"\
    \ type=\"asnx:Assignment\"/>\n      </sequenceOf>\n     </type>\n    </namedType>\n\
    \    <namedType name=\"Assignment\">\n     <type>\n      <choice insertions=\"\
    none\">\n       <element name=\"namedType\" type=\"asnx:TypeAssignment\"/>\n \
    \      <element name=\"namedValue\" type=\"asnx:ValueAssignment\"/>\n       <element\
    \ name=\"namedValueSet\"\n                type=\"asnx:ValueSetTypeAssignment\"\
    />\n       <element name=\"namedClass\" type=\"asnx:ObjectClassAssignment\"/>\n\
    \       <element name=\"namedObject\" type=\"asnx:ObjectAssignment\"/>\n     \
    \  <element name=\"namedObjectSet\" type=\"asnx:ObjectSetAssignment\"/>\n    \
    \   <group name=\"component\" type=\"asnx:TopLevelNamedType\"/>\n      </choice>\n\
    \     </type>\n    </namedType>\n    <namedType name=\"TypeAssignment\">\n   \
    \  <type>\n      <sequence>\n       <optional>\n        <element name=\"annotation\"\
    \ type=\"asnx:Annotation\"/>\n       </optional>\n       <attribute name=\"name\"\
    \ type=\"asnx:TypeReference\"/>\n       <group name=\"type\" type=\"asnx:Type\"\
    />\n      </sequence>\n     </type>\n    </namedType>\n    <namedType name=\"\
    TypeReference\">\n     <type>\n      <constrained type=\"asnx:UTF8String\">\n\
    \       <pattern literalValue=\"[A-Z]\\w*(-\\w+)*\"/>\n       <!-- \\w is equivalent\
    \ to [a-zA-Z0-9] -->\n      </constrained>\n     </type>\n    </namedType>\n \
    \   <namedType name=\"ValueAssignment\">\n     <type>\n      <sequence>\n    \
    \   <optional>\n        <element name=\"annotation\" type=\"asnx:Annotation\"\
    />\n       </optional>\n       <attribute name=\"name\" type=\"asnx:ValueReference\"\
    />\n       <group name=\"type\" type=\"asnx:Type\"/>\n       <group name=\"value\"\
    \ type=\"asnx:Value\"/>\n      </sequence>\n     </type>\n    </namedType>\n \
    \   <namedType name=\"ValueReference\" type=\"asnx:Identifier\"/>\n    <namedType\
    \ name=\"Identifier\">\n     <type>\n      <constrained type=\"asnx:UTF8String\"\
    >\n       <pattern literalValue=\"[a-z]\\w(-\\w+)*\"/>\n      </constrained>\n\
    \     </type>\n    </namedType>\n    <namedType name=\"ValueSetTypeAssignment\"\
    >\n     <type>\n      <sequence>\n       <optional>\n        <element name=\"\
    annotation\" type=\"asnx:Annotation\"/>\n       </optional>\n       <attribute\
    \ name=\"name\" type=\"asnx:TypeReference\"/>\n       <group name=\"type\" type=\"\
    asnx:Type\"/>\n       <group name=\"valueSet\" type=\"asnx:ValueSet\"/>\n    \
    \  </sequence>\n     </type>\n    </namedType>\n    <namedType name=\"ObjectClassAssignment\"\
    >\n     <type>\n      <sequence>\n       <optional>\n        <element name=\"\
    annotation\" type=\"asnx:Annotation\"/>\n       </optional>\n       <attribute\
    \ name=\"name\" type=\"asnx:ObjectClassReference\"/>\n       <group name=\"objectClass\"\
    \ type=\"asnx:ObjectClass\"/>\n      </sequence>\n     </type>\n    </namedType>\n\
    \    <namedType name=\"ObjectClassReference\">\n     <type>\n      <constrained\
    \ type=\"asnx:UTF8String\">\n       <pattern literalValue=\"[A-Z][A-Z0-9]*(-[A-Z0-9]+)*\"\
    />\n      </constrained>\n     </type>\n    </namedType>\n    <namedType name=\"\
    ObjectAssignment\">\n     <type>\n      <sequence>\n       <optional>\n      \
    \  <element name=\"annotation\" type=\"asnx:Annotation\"/>\n       </optional>\n\
    \       <attribute name=\"name\" type=\"asnx:ObjectReference\"/>\n       <group\
    \ name=\"objectClass\" type=\"asnx:DefinedObjectClass\"/>\n       <group name=\"\
    object\" type=\"asnx:Object\"/>\n      </sequence>\n     </type>\n    </namedType>\n\
    \    <namedType name=\"ObjectReference\" type=\"asnx:ValueReference\"/>\n    <namedType\
    \ name=\"ObjectSetAssignment\">\n     <type>\n      <sequence>\n       <optional>\n\
    \        <element name=\"annotation\" type=\"asnx:Annotation\"/>\n       </optional>\n\
    \       <attribute name=\"name\" type=\"asnx:ObjectSetReference\"/>\n       <group\
    \ name=\"objectClass\" type=\"asnx:DefinedObjectClass\"/>\n       <group name=\"\
    objectSet\" type=\"asnx:ObjectSet\"/>\n      </sequence>\n     </type>\n    </namedType>\n\
    \    <namedType name=\"ObjectSetReference\" type=\"asnx:TypeReference\"/>\n  \
    \  <namedType name=\"TopLevelNamedType\">\n     <type>\n      <constrained type=\"\
    asnx:NamedType\">\n       <withComponents partial=\"true\">\n        <element\
    \ name=\"component\">\n         <withComponents partial=\"true\">\n          <group\
    \ name=\"definition\">\n           <withComponents partial=\"true\">\n       \
    \     <group name=\"reference\" use=\"absent\"/>\n           </withComponents>\n\
    \          </group>\n         </withComponents>\n        </element>\n        <element\
    \ name=\"element\">\n         <withComponents partial=\"true\">\n          <group\
    \ name=\"definition\">\n           <withComponents partial=\"true\">\n       \
    \     <group name=\"reference\" use=\"absent\"/>\n           </withComponents>\n\
    \          </group>\n         </withComponents>\n        </element>\n        <element\
    \ name=\"attribute\">\n         <withComponents partial=\"true\">\n          <group\
    \ name=\"definition\">\n           <withComponents partial=\"true\">\n       \
    \     <group name=\"reference\" use=\"absent\"/>\n           </withComponents>\n\
    \          </group>\n         </withComponents>\n        </element>\n        <element\
    \ name=\"group\" use=\"absent\"/>\n        <element name=\"member\" use=\"absent\"\
    />\n        <element name=\"item\" use=\"absent\"/>\n        <element name=\"\
    simpleContent\" use=\"absent\"/>\n       </withComponents>\n      </constrained>\n\
    \     </type>\n    </namedType>\n    <namedType name=\"NamedType\">\n     <type>\n\
    \      <choice insertions=\"singular\">\n       <element name=\"component\" type=\"\
    asnx:Element\"/>\n       <element name=\"element\" type=\"asnx:Element\"/>\n \
    \      <element name=\"attribute\" type=\"asnx:Attribute\"/>\n       <element\
    \ name=\"group\" type=\"asnx:InvisibleNamedType\"/>\n       <element name=\"member\"\
    \ type=\"asnx:InvisibleNamedType\"/>\n       <element name=\"item\" type=\"asnx:InvisibleNamedType\"\
    />\n       <element name=\"simpleContent\" type=\"asnx:InvisibleNamedType\"/>\n\
    \      </choice>\n     </type>\n    </namedType>\n    <namedType name=\"Attribute\"\
    >\n     <type>\n      <constrained type=\"asnx:GenericNamedType\">\n       <withComponents\
    \ partial=\"true\">\n        <group name=\"definition\">\n         <withComponents\
    \ partial=\"true\">\n          <group name=\"local\">\n           <withComponents\
    \ partial=\"true\">\n            <attribute name=\"typeAsVersion\" use=\"absent\"\
    />\n           </withComponents>\n          </group>\n         </withComponents>\n\
    \        </group>\n       </withComponents>\n      </constrained>\n     </type>\n\
    \    </namedType>\n    <namedType name=\"Element\">\n     <type>\n      <constrained\
    \ type=\"asnx:GenericNamedType\">\n       <withComponents partial=\"true\">\n\
    \        <group name=\"definition\">\n         <withComponents partial=\"true\"\
    >\n          <group name=\"local\">\n           <withComponents partial=\"true\"\
    >\n            <attribute name=\"versionIndicator\" use=\"absent\"/>\n       \
    \    </withComponents>\n          </group>\n         </withComponents>\n     \
    \   </group>\n       </withComponents>\n      </constrained>\n     </type>\n \
    \   </namedType>\n    <namedType name=\"InvisibleNamedType\">\n     <type>\n \
    \     <constrained type=\"asnx:GenericNamedType\">\n       <withComponents partial=\"\
    true\">\n        <group name=\"definition\">\n         <withComponents partial=\"\
    true\">\n          <group name=\"reference\" use=\"absent\"/>\n          <group\
    \ name=\"local\">\n           <withComponents partial=\"true\">\n            <attribute\
    \ name=\"typeAsVersion\" use=\"absent\"/>\n            <attribute name=\"versionIndicator\"\
    \ use=\"absent\"/>\n           </withComponents>\n          </group>\n       \
    \  </withComponents>\n        </group>\n       </withComponents>\n      </constrained>\n\
    \     </type>\n    </namedType>\n    <namedType name=\"GenericNamedType\">\n \
    \    <type>\n      <sequence insertions=\"hollow\">\n       <optional>\n     \
    \   <element name=\"annotation\" type=\"asnx:Annotation\"/>\n       </optional>\n\
    \       <optional>\n        <attribute name=\"identifier\" type=\"asnx:IdentifierOrEmpty\"\
    />\n       </optional>\n       <group name=\"definition\">\n        <type>\n \
    \        <choice>\n          <group name=\"reference\" type=\"asnx:DefinedComponent\"\
    />\n          <group name=\"local\" type=\"asnx:LocalComponent\"/>\n         </choice>\n\
    \        </type>\n       </group>\n      </sequence>\n     </type>\n    </namedType>\n\
    \    <namedType name=\"IdentifierOrEmpty\">\n     <type>\n      <constrained type=\"\
    asnx:UTF8String\">\n       <union>\n        <includes type=\"asnx:Identifier\"\
    />\n        <literalValue></literalValue>\n       </union>\n      </constrained>\n\
    \     </type>\n    </namedType>\n    <namedType name=\"DefinedComponent\">\n \
    \    <type>\n      <constrained>\n       <type>\n        <sequence insertions=\"\
    hollow\">\n         <group name=\"name\">\n          <type>\n           <choice\
    \ insertions=\"none\">\n            <attribute name=\"ref\" type=\"asnx:QName\"\
    />\n            <attribute name=\"elementType\" type=\"asnx:Name\"/>\n       \
    \    </choice>\n          </type>\n         </group>\n         <optional>\n  \
    \        <attribute name=\"namespace\" type=\"asnx:AnyURI\"/>\n         </optional>\n\
    \         <optional>\n          <attribute name=\"context\" type=\"asnx:AnyURI\"\
    />\n         </optional>\n         <optional>\n          <attribute name=\"embedded\"\
    \ type=\"asnx:BOOLEAN\"/>\n         </optional>\n         <optional>\n       \
    \   <group name=\"prefixes\" type=\"asnx:EncodingPrefixes\"/>\n         </optional>\n\
    \        </sequence>\n       </type>\n       <union>\n        <withComponents\
    \ partial=\"true\">\n         <group name=\"name\">\n          <withComponents>\n\
    \           <attribute name=\"ref\" use=\"present\"/>\n          </withComponents>\n\
    \         </group>\n         <attribute name=\"namespace\" use=\"absent\"/>\n\
    \        </withComponents>\n        <withComponents partial=\"true\">\n      \
    \   <group name=\"name\">\n          <withComponents>\n           <attribute name=\"\
    elementType\" use=\"present\"/>\n          </withComponents>\n         </group>\n\
    \         <attribute name=\"embedded\" use=\"absent\"/>\n        </withComponents>\n\
    \       </union>\n      </constrained>\n     </type>\n    </namedType>\n    <namedType\
    \ name=\"LocalComponent\">\n     <type>\n      <sequence>\n       <attribute name=\"\
    name\" type=\"asnx:NCName\"/>\n       <optional>\n        <attribute name=\"typeAsVersion\"\
    \ type=\"asnx:BOOLEAN\"/>\n       </optional>\n       <optional>\n        <attribute\
    \ name=\"versionIndicator\" type=\"asnx:BOOLEAN\"/>\n       </optional>\n    \
    \   <group name=\"type\" type=\"asnx:Type\"/>\n      </sequence>\n     </type>\n\
    \    </namedType>\n    <namedType name=\"Type\">\n     <type>\n      <choice insertions=\"\
    none\">\n       <attribute name=\"type\" identifier=\"typeRef\" type=\"asnx:QName\"\
    />\n       <element name=\"type\" type=\"asnx:ElementFormType\"/>\n      </choice>\n\
    \     </type>\n    </namedType>\n    <namedType name=\"ElementFormType\">\n  \
    \   <type>\n      <sequence insertions=\"hollow\">\n       <optional>\n      \
    \  <element name=\"annotation\" type=\"asnx:Annotation\"/>\n       </optional>\n\
    \       <optional>\n        <attribute name=\"explicit\" type=\"asnx:BOOLEAN\"\
    />\n       </optional>\n       <group name=\"definition\">\n        <type>\n \
    \        <choice>\n          <group name=\"reference\" type=\"asnx:DefinedType\"\
    />\n          <element name=\"expanded\" type=\"asnx:ExpandedType\"/>\n      \
    \    <attribute name=\"ancestor\">\n           <type>\n            <constrained\
    \ type=\"asnx:INTEGER\">\n             <range>\n              <minInclusive literalValue=\"\
    1\"/>\n             </range>\n            </constrained>\n           </type>\n\
    \          </attribute>\n          <element name=\"namedBitList\" type=\"asnx:NamedBitList\"\
    />\n          <element name=\"namedNumberList\" type=\"asnx:NamedNumberList\"\
    />\n          <element name=\"enumerated\" type=\"asnx:EnumeratedType\"/>\n  \
    \        <element name=\"tagged\" type=\"asnx:TaggedType\"/>\n          <element\
    \ name=\"prefixed\" type=\"asnx:EncodingPrefixedType\"/>\n          <element name=\"\
    selection\" type=\"asnx:SelectionType\"/>\n          <element name=\"instanceOf\"\
    \ type=\"asnx:InstanceOfType\"/>\n          <element name=\"fromClass\" type=\"\
    asnx:ObjectClassFieldType\"/>\n          <element name=\"fromObjects\"\n     \
    \              type=\"asnx:InformationFromObjects\"/>\n          <element name=\"\
    sequence\" type=\"asnx:SequenceType\"/>\n          <element name=\"set\" type=\"\
    asnx:SetType\"/>\n          <element name=\"choice\" type=\"asnx:ChoiceType\"\
    />\n          <element name=\"union\" type=\"asnx:UnionType\"/>\n          <element\
    \ name=\"sequenceOf\" type=\"asnx:SequenceOfType\"/>\n          <element name=\"\
    setOf\" type=\"asnx:SetOfType\"/>\n          <element name=\"list\" type=\"asnx:ListType\"\
    />\n          <element name=\"constrained\" type=\"asnx:ConstrainedType\"/>\n\
    \         </choice>\n        </type>\n       </group>\n      </sequence>\n   \
    \  </type>\n    </namedType>\n    <namedType name=\"DefinedType\">\n     <type>\n\
    \      <constrained>\n       <type>\n        <sequence>\n         <group name=\"\
    name\">\n          <type>\n           <choice insertions=\"none\">\n         \
    \   <attribute name=\"ref\" type=\"asnx:QName\"/>\n            <attribute name=\"\
    elementType\" type=\"asnx:Name\"/>\n           </choice>\n          </type>\n\
    \         </group>\n         <optional>\n          <attribute name=\"context\"\
    \ type=\"asnx:AnyURI\"/>\n         </optional>\n         <optional>\n        \
    \  <attribute name=\"embedded\" type=\"asnx:BOOLEAN\"/>\n         </optional>\n\
    \        </sequence>\n       </type>\n       <union>\n        <withComponents\
    \ partial=\"true\">\n         <group name=\"name\">\n          <withComponents>\n\
    \           <attribute name=\"ref\" use=\"present\"/>\n          </withComponents>\n\
    \         </group>\n        </withComponents>\n        <withComponents partial=\"\
    true\">\n         <group name=\"name\">\n          <withComponents>\n        \
    \   <attribute name=\"elementType\" use=\"present\"/>\n          </withComponents>\n\
    \         </group>\n         <attribute name=\"embedded\" use=\"absent\"/>\n \
    \       </withComponents>\n       </union>\n      </constrained>\n     </type>\n\
    \    </namedType>\n    <namedType name=\"ExpandedType\">\n     <type>\n      <sequence>\n\
    \       <optional>\n        <attribute name=\"name\" type=\"asnx:NCName\"/>\n\
    \       </optional>\n       <optional>\n        <element name=\"module\" type=\"\
    asnx:ReferencedModule\"/>\n       </optional>\n       <group name=\"type\" type=\"\
    asnx:Type\"/>\n      </sequence>\n     </type>\n    </namedType>\n    <namedType\
    \ name=\"ReferencedModule\">\n     <type>\n      <sequence>\n       <optional>\n\
    \        <attribute name=\"name\" type=\"asnx:ModuleReference\"/>\n       </optional>\n\
    \       <optional>\n        <attribute name=\"identifier\" type=\"asnx:DefinitiveIdentifier\"\
    />\n       </optional>\n       <optional>\n        <attribute name=\"schemaIdentity\"\
    \ type=\"asnx:AnyURI\"/>\n       </optional>\n      </sequence>\n     </type>\n\
    \    </namedType>\n    <namedType name=\"NamedBitList\">\n     <type>\n      <sequenceOf\
    \ minSize=\"1\">\n       <element name=\"namedBit\" type=\"asnx:NamedBit\"/>\n\
    \      </sequenceOf>\n     </type>\n    </namedType>\n    <namedType name=\"NamedBit\"\
    >\n     <type>\n      <sequence>\n       <attribute name=\"name\" type=\"asnx:NCName\"\
    />\n       <optional>\n        <attribute name=\"identifier\" type=\"asnx:Identifier\"\
    />\n       </optional>\n       <attribute name=\"bit\">\n        <type>\n    \
    \     <constrained type=\"asnx:INTEGER\">\n          <range>\n           <minInclusive\
    \ literalValue=\"0\"/>\n          </range>\n         </constrained>\n        </type>\n\
    \       </attribute>\n      </sequence>\n     </type>\n    </namedType>\n    <namedType\
    \ name=\"NamedNumberList\">\n     <type>\n      <sequenceOf minSize=\"1\">\n \
    \      <element name=\"namedNumber\" type=\"asnx:NamedNumber\"/>\n      </sequenceOf>\n\
    \     </type>\n    </namedType>\n    <namedType name=\"NamedNumber\">\n     <type>\n\
    \      <sequence>\n       <attribute name=\"name\" type=\"asnx:NCName\"/>\n  \
    \     <optional>\n        <attribute name=\"identifier\" type=\"asnx:Identifier\"\
    />\n       </optional>\n       <attribute name=\"number\" type=\"asnx:INTEGER\"\
    />\n      </sequence>\n     </type>\n    </namedType>\n    <namedType name=\"\
    EnumeratedType\">\n     <type>\n      <sequence>\n       <group name=\"root\"\
    \ type=\"asnx:Enumeration\"/>\n       <optional>\n        <element name=\"extension\"\
    >\n         <type>\n          <sequence>\n           <optional>\n            <element\
    \ name=\"exception\" type=\"asnx:ExceptionSpec\"/>\n           </optional>\n \
    \          <optional>\n            <group name=\"additions\" type=\"asnx:Enumeration\"\
    />\n           </optional>\n          </sequence>\n         </type>\n        </element>\n\
    \       </optional>\n      </sequence>\n     </type>\n    </namedType>\n    <namedType\
    \ name=\"Enumeration\">\n     <type>\n      <sequenceOf minSize=\"1\">\n     \
    \  <element name=\"enumeration\" type=\"asnx:EnumerationItem\"/>\n      </sequenceOf>\n\
    \     </type>\n    </namedType>\n    <namedType name=\"EnumerationItem\">\n  \
    \   <type>\n      <sequence>\n       <attribute name=\"name\" type=\"asnx:NCName\"\
    />\n       <optional>\n        <attribute name=\"identifier\" type=\"asnx:Identifier\"\
    />\n       </optional>\n       <optional>\n        <attribute name=\"number\"\
    \ type=\"asnx:INTEGER\"/>\n       </optional>\n      </sequence>\n     </type>\n\
    \    </namedType>\n    <namedType name=\"Tag\">\n     <type>\n      <sequence>\n\
    \       <optional>\n        <attribute name=\"tagClass\" type=\"asnx:TagClass\"\
    />\n       </optional>\n       <attribute name=\"number\">\n        <type>\n \
    \        <constrained type=\"asnx:INTEGER\">\n          <range>\n           <minInclusive\
    \ literalValue=\"0\"/>\n          </range>\n         </constrained>\n        </type>\n\
    \       </attribute>\n       <optional>\n        <attribute name=\"tagging\" type=\"\
    asnx:Tagging\"/>\n       </optional>\n      </sequence>\n     </type>\n    </namedType>\n\
    \    <namedType name=\"TaggedType\">\n     <type>\n      <sequence>\n       <componentsOf\
    \ type=\"asnx:Tag\"/>\n       <group name=\"type\" type=\"asnx:Type\"/>\n    \
    \  </sequence>\n     </type>\n    </namedType>\n    <namedType name=\"TagClass\"\
    >\n     <type>\n      <enumerated>\n       <enumeration name=\"universal\"/>\n\
    \       <enumeration name=\"application\"/>\n       <enumeration name=\"private\"\
    />\n      </enumerated>\n     </type>\n    </namedType>\n    <namedType name=\"\
    Tagging\">\n     <type>\n      <enumerated>\n       <enumeration name=\"explicit\"\
    />\n       <enumeration name=\"implicit\"/>\n      </enumerated>\n     </type>\n\
    \    </namedType>\n    <namedType name=\"EncodingPrefixedType\">\n     <type>\n\
    \      <sequence insertions=\"hollow\">\n       <group name=\"prefixes\" type=\"\
    asnx:EncodingPrefixes\"/>\n       <group name=\"type\" type=\"asnx:Type\"/>\n\
    \      </sequence>\n     </type>\n    </namedType>\n    <namedType name=\"EncodingPrefixes\"\
    >\n     <type>\n      <sequenceOf minSize=\"1\">\n       <group name=\"prefix\"\
    \ type=\"asnx:EncodingPrefix\"/>\n      </sequenceOf>\n     </type>\n    </namedType>\n\
    \    <namedType name=\"EncodingPrefix\">\n     <type>\n      <choice insertions=\"\
    singular\">\n       <element name=\"TAG\" identifier=\"tag\" type=\"asnx:Tag\"\
    />\n       <element name=\"GSER\" identifier=\"gser\"\n                type=\"\
    asnx:GSER-EncodingInstruction\"/>\n       <element name=\"XER\" identifier=\"\
    xer\"\n                type=\"asnx:XER-EncodingInstruction\"/>\n       <!-- plus\
    \ encoding instructions\n            for other encoding rules in the future -->\n\
    \      </choice>\n     </type>\n    </namedType>\n    <namedType name=\"SelectionType\"\
    >\n     <type>\n      <sequence>\n       <group name=\"alternative\">\n      \
    \  <type>\n         <choice insertions=\"singular\">\n          <attribute name=\"\
    component\" type=\"asnx:QName\"/>\n          <attribute name=\"element\" type=\"\
    asnx:QName\"/>\n          <attribute name=\"attribute\" type=\"asnx:QName\"/>\n\
    \          <attribute name=\"group\" type=\"asnx:QName\"/>\n          <attribute\
    \ name=\"member\" type=\"asnx:QName\"/>\n         </choice>\n        </type>\n\
    \       </group>\n       <group name=\"type\" type=\"asnx:Type\"/>\n      </sequence>\n\
    \     </type>\n    </namedType>\n    <namedType name=\"InstanceOfType\" type=\"\
    asnx:DefinedObjectClass\"/>\n    <namedType name=\"ObjectClassFieldType\">\n \
    \    <type>\n      <sequence>\n       <group name=\"objectClass\" type=\"asnx:DefinedObjectClass\"\
    />\n       <group name=\"fieldName\" type=\"asnx:FieldName\"/>\n      </sequence>\n\
    \     </type>\n    </namedType>\n    <namedType name=\"FieldName\">\n     <type>\n\
    \      <choice insertions=\"singular\">\n       <attribute name=\"fieldName\"\
    \ identifier=\"fieldNameAtt\"\n                  type=\"asnx:PrimitiveFieldNames\"\
    />\n       <element name=\"fieldName\" type=\"asnx:PrimitiveFieldNames\"/>\n \
    \     </choice>\n     </type>\n    </namedType>\n    <namedType name=\"PrimitiveFieldNames\"\
    \ type=\"asnx:UTF8String\"/>\n    <namedType name=\"InformationFromObjects\">\n\
    \     <type>\n      <sequence insertions=\"hollow\">\n       <group name=\"referencedObjects\"\
    \ type=\"asnx:ReferencedObjects\"/>\n       <group name=\"fieldName\" type=\"\
    asnx:FieldName\"/>\n      </sequence>\n     </type>\n    </namedType>\n    <namedType\
    \ name=\"ReferencedObjects\">\n     <type>\n      <choice insertions=\"singular\"\
    >\n       <group name=\"object\" type=\"asnx:Object\"/>\n       <group name=\"\
    objectSet\" type=\"asnx:ObjectSet\"/>\n      </choice>\n     </type>\n    </namedType>\n\
    \    <namedType name=\"Insertions\">\n     <type>\n      <enumerated>\n      \
    \ <enumeration name=\"none\"/>\n       <enumeration name=\"hollow\"/>\n      \
    \ <enumeration name=\"singular\"/>\n       <enumeration name=\"uniform\"/>\n \
    \      <enumeration name=\"multiform\"/>\n      </enumerated>\n     </type>\n\
    \    </namedType>\n    <namedType name=\"SequenceType\">\n     <type>\n      <sequence\
    \ insertions=\"hollow\">\n       <optional>\n        <attribute name=\"insertions\"\
    \ type=\"asnx:Insertions\"/>\n       </optional>\n       <optional>\n        <group\
    \ name=\"root\" type=\"asnx:ComponentTypeList\"/>\n       </optional>\n      \
    \ <optional>\n        <group name=\"extensionAndFinal\">\n         <type>\n  \
    \        <sequence insertions=\"hollow\">\n           <element name=\"extension\"\
    >\n            <type>\n             <sequence insertions=\"hollow\">\n       \
    \       <optional>\n               <element name=\"exception\" type=\"asnx:ExceptionSpec\"\
    />\n              </optional>\n              <optional>\n               <group\
    \ name=\"additions\" type=\"asnx:ExtensionAdditions\"/>\n              </optional>\n\
    \             </sequence>\n            </type>\n           </element>\n      \
    \     <optional>\n            <group name=\"root\" type=\"asnx:ComponentTypeList\"\
    />\n           </optional>\n          </sequence>\n         </type>\n        </group>\n\
    \       </optional>\n      </sequence>\n     </type>\n    </namedType>\n    <namedType\
    \ name=\"ComponentTypeList\">\n     <type>\n      <sequenceOf minSize=\"1\">\n\
    \       <group name=\"componentType\" type=\"asnx:ComponentType\"/>\n      </sequenceOf>\n\
    \     </type>\n    </namedType>\n    <namedType name=\"ComponentType\">\n    \
    \ <type>\n      <choice insertions=\"none\">\n       <group name=\"component\"\
    \ type=\"asnx:SequenceNamedType\"/>\n       <element name=\"optional\">\n    \
    \    <type>\n         <sequence>\n          <group name=\"component\" type=\"\
    asnx:SequenceNamedType\"/>\n          <optional>\n           <element name=\"\
    default\" type=\"asnx:Value\"/>\n          </optional>\n         </sequence>\n\
    \        </type>\n       </element>\n       <element name=\"componentsOf\" type=\"\
    asnx:Type\"/>\n      </choice>\n     </type>\n    </namedType>\n    <namedType\
    \ name=\"SequenceNamedType\">\n     <type>\n      <constrained type=\"asnx:NamedType\"\
    >\n       <withComponents partial=\"true\">\n        <element name=\"member\"\
    \ use=\"absent\"/>\n        <element name=\"item\" use=\"absent\"/>\n       </withComponents>\n\
    \      </constrained>\n     </type>\n    </namedType>\n    <namedType name=\"\
    ExtensionAdditions\">\n     <type>\n      <sequenceOf minSize=\"1\">\n       <group\
    \ name=\"addition\" type=\"asnx:ExtensionAddition\"/>\n      </sequenceOf>\n \
    \    </type>\n    </namedType>\n    <namedType name=\"ExtensionAddition\">\n \
    \    <type>\n      <choice insertions=\"none\">\n       <element name=\"extensionGroup\"\
    \n                type=\"asnx:ExtensionAdditionGroup\"/>\n       <group name=\"\
    componentType\" type=\"asnx:ComponentType\"/>\n      </choice>\n     </type>\n\
    \    </namedType>\n    <namedType name=\"ExtensionAdditionGroup\">\n     <type>\n\
    \      <sequence insertions=\"hollow\">\n       <optional>\n        <attribute\
    \ name=\"version\" type=\"asnx:VersionNumber\"/>\n       </optional>\n       <group\
    \ name=\"componentTypes\" type=\"asnx:ComponentTypeList\"/>\n      </sequence>\n\
    \     </type>\n    </namedType>\n    <namedType name=\"VersionNumber\">\n    \
    \ <type>\n      <constrained type=\"asnx:INTEGER\">\n       <range>\n        <minInclusive\
    \ literalValue=\"2\"/>\n       </range>\n      </constrained>\n     </type>\n\
    \    </namedType>\n    <namedType name=\"SetType\" type=\"asnx:SequenceType\"\
    />\n    <namedType name=\"ChoiceOrUnionType\">\n     <type>\n      <sequence insertions=\"\
    hollow\">\n       <optional>\n        <attribute name=\"insertions\" type=\"asnx:Insertions\"\
    />\n       </optional>\n       <optional>\n        <attribute name=\"precedence\"\
    \ type=\"asnx:PrecedenceList\"/>\n       </optional>\n       <group name=\"root\"\
    \ type=\"asnx:AlternativeTypeList\"/>\n       <optional>\n        <element name=\"\
    extension\">\n         <type>\n          <sequence insertions=\"hollow\">\n  \
    \         <optional>\n            <element name=\"exception\" type=\"asnx:ExceptionSpec\"\
    />\n           </optional>\n           <optional>\n            <group name=\"\
    additions\"\n                   type=\"asnx:ExtensionAdditionAlternatives\"/>\n\
    \           </optional>\n          </sequence>\n         </type>\n        </element>\n\
    \       </optional>\n      </sequence>\n     </type>\n    </namedType>\n    <namedType\
    \ name=\"PrecedenceList\">\n     <type>\n      <list minSize=\"1\">\n       <item\
    \ name=\"member\" type=\"asnx:QName\"/>\n      </list>\n     </type>\n    </namedType>\n\
    \    <namedType name=\"AlternativeTypeList\">\n     <type>\n      <sequenceOf\
    \ minSize=\"1\">\n       <group name=\"component\" type=\"asnx:ChoiceOrUnionNamedType\"\
    />\n      </sequenceOf>\n     </type>\n    </namedType>\n    <namedType name=\"\
    ChoiceOrUnionNamedType\">\n     <type>\n      <constrained type=\"asnx:NamedType\"\
    >\n       <withComponents partial=\"true\">\n        <element name=\"item\" use=\"\
    absent\"/>\n        <element name=\"simpleContent\" use=\"absent\"/>\n       </withComponents>\n\
    \      </constrained>\n     </type>\n    </namedType>\n    <namedType name=\"\
    ExtensionAdditionAlternatives\">\n     <type>\n      <sequenceOf minSize=\"1\"\
    >\n       <group name=\"addition\" type=\"asnx:ExtensionAdditionAlternative\"\
    />\n      </sequenceOf>\n     </type>\n    </namedType>\n    <namedType name=\"\
    ExtensionAdditionAlternative\">\n     <type>\n      <choice insertions=\"none\"\
    >\n       <element name=\"extensionGroup\"\n                type=\"asnx:ExtensionAdditionAlternativesGroup\"\
    />\n       <group name=\"component\" type=\"asnx:ChoiceOrUnionNamedType\"/>\n\
    \      </choice>\n     </type>\n    </namedType>\n    <namedType name=\"ExtensionAdditionAlternativesGroup\"\
    >\n     <type>\n      <sequence insertions=\"hollow\">\n       <optional>\n  \
    \      <attribute name=\"version\" type=\"asnx:VersionNumber\"/>\n       </optional>\n\
    \       <group name=\"alternatives\" type=\"asnx:AlternativeTypeList\"/>\n   \
    \   </sequence>\n     </type>\n    </namedType>\n    <namedType name=\"ChoiceType\"\
    >\n     <type>\n      <constrained type=\"asnx:ChoiceOrUnionType\">\n       <withComponents\
    \ partial=\"true\">\n        <attribute name=\"precedence\" use=\"absent\"/>\n\
    \        <group name=\"root\">\n         <withComponent>\n          <includes\
    \ type=\"asnx:ChoiceNamedType\"/>\n         </withComponent>\n        </group>\n\
    \        <element name=\"extension\">\n         <withComponents partial=\"true\"\
    >\n          <group name=\"additions\">\n           <withComponent>\n        \
    \    <withComponents partial=\"true\">\n             <element name=\"extensionGroup\"\
    >\n              <withComponents partial=\"true\">\n               <group name=\"\
    alternatives\">\n                <withComponent>\n                 <includes type=\"\
    asnx:ChoiceNamedType\"/>\n                </withComponent>\n               </group>\n\
    \              </withComponents>\n             </element>\n             <group\
    \ name=\"component\">\n              <includes type=\"asnx:ChoiceNamedType\"/>\n\
    \             </group>\n            </withComponents>\n           </withComponent>\n\
    \          </group>\n         </withComponents>\n        </element>\n       </withComponents>\n\
    \      </constrained>\n     </type>\n    </namedType>\n    <namedType name=\"\
    ChoiceNamedType\">\n     <type>\n      <constrained type=\"asnx:ChoiceOrUnionNamedType\"\
    >\n       <withComponents partial=\"true\">\n        <element name=\"member\"\
    \ use=\"absent\"/>\n       </withComponents>\n      </constrained>\n     </type>\n\
    \    </namedType>\n    <namedType name=\"UnionType\">\n     <type>\n      <constrained\
    \ type=\"asnx:ChoiceOrUnionType\">\n       <withComponents partial=\"true\">\n\
    \        <attribute name=\"insertions\" use=\"absent\"/>\n        <group name=\"\
    root\">\n         <withComponent>\n          <includes type=\"asnx:UnionNamedType\"\
    />\n         </withComponent>\n        </group>\n        <element name=\"extension\"\
    >\n         <withComponents partial=\"true\">\n          <group name=\"additions\"\
    >\n           <withComponent>\n            <withComponents partial=\"true\">\n\
    \             <element name=\"extensionGroup\">\n              <withComponents\
    \ partial=\"true\">\n               <group name=\"alternatives\">\n          \
    \      <withComponent>\n                 <includes type=\"asnx:UnionNamedType\"\
    />\n                </withComponent>\n               </group>\n              </withComponents>\n\
    \             </element>\n             <group name=\"component\">\n          \
    \    <includes type=\"asnx:UnionNamedType\"/>\n             </group>\n       \
    \     </withComponents>\n           </withComponent>\n          </group>\n   \
    \      </withComponents>\n        </element>\n       </withComponents>\n     \
    \ </constrained>\n     </type>\n    </namedType>\n    <namedType name=\"UnionNamedType\"\
    >\n     <type>\n      <constrained type=\"asnx:ChoiceOrUnionNamedType\">\n   \
    \    <withComponents partial=\"true\">\n        <element name=\"component\" use=\"\
    absent\"/>\n        <element name=\"element\" use=\"absent\"/>\n        <element\
    \ name=\"attribute\" use=\"absent\"/>\n        <element name=\"group\" use=\"\
    absent\"/>\n       </withComponents>\n      </constrained>\n     </type>\n   \
    \ </namedType>\n    <namedType name=\"SequenceOfOrListType\">\n     <type>\n \
    \     <sequence>\n       <optional>\n        <attribute name=\"minSize\">\n  \
    \       <type>\n          <constrained type=\"asnx:INTEGER\">\n           <range>\n\
    \            <minInclusive literalValue=\"0\"/>\n           </range>\n       \
    \   </constrained>\n         </type>\n        </attribute>\n       </optional>\n\
    \       <optional>\n        <attribute name=\"maxSize\">\n         <type>\n  \
    \        <constrained type=\"asnx:INTEGER\">\n           <range>\n           \
    \ <minInclusive literalValue=\"0\"/>\n           </range>\n          </constrained>\n\
    \         </type>\n        </attribute>\n       </optional>\n       <group name=\"\
    component\">\n        <type>\n         <constrained type=\"asnx:NamedType\">\n\
    \          <withComponents partial=\"true\">\n           <element name=\"attribute\"\
    \ use=\"absent\"/>\n           <element name=\"member\" use=\"absent\"/>\n   \
    \        <element name=\"simpleContent\" use=\"absent\"/>\n          </withComponents>\n\
    \         </constrained>\n        </type>\n       </group>\n      </sequence>\n\
    \     </type>\n    </namedType>\n    <namedType name=\"SequenceOfType\">\n   \
    \  <type>\n      <constrained type=\"asnx:SequenceOfOrListType\">\n       <withComponents\
    \ partial=\"true\">\n        <group name=\"component\">\n         <withComponents\
    \ partial=\"true\">\n          <element name=\"item\" use=\"absent\"/>\n     \
    \    </withComponents>\n        </group>\n       </withComponents>\n      </constrained>\n\
    \     </type>\n    </namedType>\n    <namedType name=\"SetOfType\" type=\"asnx:SequenceOfType\"\
    />\n    <namedType name=\"ListType\">\n     <type>\n      <constrained type=\"\
    asnx:SequenceOfOrListType\">\n       <withComponents partial=\"true\">\n     \
    \   <group name=\"component\">\n         <withComponents partial=\"true\">\n \
    \         <element name=\"component\" use=\"absent\"/>\n          <element name=\"\
    element\" use=\"absent\"/>\n          <element name=\"group\" use=\"absent\"/>\n\
    \         </withComponents>\n        </group>\n       </withComponents>\n    \
    \  </constrained>\n     </type>\n    </namedType>\n    <namedType name=\"ConstrainedType\"\
    >\n     <type>\n      <sequence insertions=\"hollow\">\n       <group name=\"\
    type\" type=\"asnx:Type\"/>\n       <group name=\"constraint\" type=\"asnx:Constraint\"\
    />\n      </sequence>\n     </type>\n    </namedType>\n    <namedType name=\"\
    Constraint\">\n     <type>\n      <sequence>\n       <group name=\"constraintSpec\"\
    >\n        <type>\n         <choice insertions=\"none\">\n          <group name=\"\
    subtype\" type=\"asnx:ElementSetSpecs\"/>\n          <element name=\"constrainedBy\"\
    \n                   type=\"asnx:UserDefinedConstraint\"/>\n          <element\
    \ name=\"table\" type=\"asnx:TableConstraint\"/>\n          <element name=\"contents\"\
    \ type=\"asnx:ContentsConstraint\"/>\n         </choice>\n        </type>\n  \
    \     </group>\n       <optional>\n        <element name=\"exception\" type=\"\
    asnx:ExceptionSpec\"/>\n       </optional>\n      </sequence>\n     </type>\n\
    \    </namedType>\n    <namedType name=\"UserDefinedConstraint\">\n     <type>\n\
    \      <sequence insertions=\"hollow\">\n       <optional>\n        <element name=\"\
    annotation\" type=\"asnx:Annotation\"/>\n       </optional>\n       <optional>\n\
    \        <group name=\"parameters\" type=\"asnx:ConstraintParameters\"/>\n   \
    \    </optional>\n      </sequence>\n     </type>\n    </namedType>\n    <namedType\
    \ name=\"ConstraintParameters\">\n     <type>\n      <sequenceOf minSize=\"1\"\
    >\n       <group name=\"parameter\"\n              type=\"asnx:UserDefinedConstraintParameter\"\
    />\n      </sequenceOf>\n     </type>\n    </namedType>\n    <namedType name=\"\
    UserDefinedConstraintParameter\">\n     <type>\n      <choice insertions=\"singular\"\
    >\n       <element name=\"valueParameter\">\n        <type>\n         <sequence>\n\
    \          <group name=\"type\" type=\"asnx:Type\"/>\n          <group name=\"\
    value\" type=\"asnx:Value\"/>\n         </sequence>\n        </type>\n       </element>\n\
    \       <element name=\"valueSetParameter\">\n        <type>\n         <sequence>\n\
    \          <group name=\"type\" type=\"asnx:Type\"/>\n          <group name=\"\
    valueSet\" type=\"asnx:ValueSet\"/>\n         </sequence>\n        </type>\n \
    \      </element>\n       <element name=\"objectParameter\">\n        <type>\n\
    \         <sequence>\n          <group name=\"objectClass\" type=\"asnx:DefinedObjectClass\"\
    />\n          <group name=\"object\" type=\"asnx:Object\"/>\n         </sequence>\n\
    \        </type>\n       </element>\n       <element name=\"objectSetParameter\"\
    >\n        <type>\n         <sequence>\n          <group name=\"objectClass\"\
    \ type=\"asnx:DefinedObjectClass\"/>\n          <group name=\"objectSet\" type=\"\
    asnx:ObjectSet\"/>\n         </sequence>\n        </type>\n       </element>\n\
    \       <element name=\"typeParameter\">\n        <type>\n         <sequence>\n\
    \          <group name=\"type\" type=\"asnx:Type\"/>\n         </sequence>\n \
    \       </type>\n       </element>\n       <element name=\"classParameter\">\n\
    \        <type>\n         <sequence>\n          <group name=\"objectClass\" type=\"\
    asnx:DefinedObjectClass\"/>\n         </sequence>\n        </type>\n       </element>\n\
    \      </choice>\n     </type>\n    </namedType>\n    <namedType name=\"TableConstraint\"\
    >\n     <type>\n      <sequence>\n       <group name=\"objectSet\" type=\"asnx:ObjectSet\"\
    />\n       <optional>\n        <group name=\"componentRelation\" type=\"asnx:AtNotations\"\
    />\n       </optional>\n      </sequence>\n     </type>\n    </namedType>\n  \
    \  <namedType name=\"AtNotations\">\n     <type>\n      <sequenceOf minSize=\"\
    1\">\n       <element name=\"restrictBy\" type=\"asnx:AtNotation\"/>\n      </sequenceOf>\n\
    \     </type>\n    </namedType>\n    <namedType name=\"AtNotation\" type=\"asnx:Markup\"\
    />\n    <namedType name=\"ContentsConstraint\">\n     <type>\n      <constrained>\n\
    \       <type>\n        <sequence>\n         <optional>\n          <element name=\"\
    containing\" type=\"asnx:Type\"/>\n         </optional>\n         <optional>\n\
    \          <element name=\"encodedBy\" type=\"asnx:Value\"/>\n         </optional>\n\
    \        </sequence>\n       </type>\n       <union>\n        <withComponents\
    \ partial=\"true\">\n         <element name=\"containing\" use=\"present\"/>\n\
    \        </withComponents>\n        <withComponents partial=\"true\">\n      \
    \   <element name=\"encodedBy\" use=\"present\"/>\n        </withComponents>\n\
    \       </union>\n      </constrained>\n     </type>\n    </namedType>\n    <namedType\
    \ name=\"ExceptionSpec\">\n     <type>\n      <sequence>\n       <group name=\"\
    type\" type=\"asnx:Type\"/>\n       <group name=\"value\" type=\"asnx:Value\"\
    />\n      </sequence>\n     </type>\n    </namedType>\n    <namedType name=\"\
    Value\">\n     <type>\n      <choice insertions=\"none\">\n       <attribute name=\"\
    literalValue\" identifier=\"literalValueAtt\"\n                  type=\"asnx:UTF8String\"\
    />\n       <element name=\"literalValue\"\n                type=\"asnx:ElementFormLiteralValue\"\
    />\n       <attribute name=\"value\" identifier=\"valueRef\" type=\"asnx:QName\"\
    />\n       <element name=\"value\" type=\"asnx:ElementFormNotationalValue\"/>\n\
    \      </choice>\n     </type>\n    </namedType>\n    <namedType name=\"ElementFormLiteralValue\"\
    \ type=\"asnx:Markup\">\n     <annotation>\n      If asnx:literal=\"false\" then\
    \ the governing type of\n      ElementFormLiteralValue is ElementFormNotationalValue.\n\
    \     </annotation>\n    </namedType>\n    <namedType name=\"ElementFormNotationalValue\"\
    >\n     <type>\n      <sequence insertions=\"hollow\">\n       <optional>\n  \
    \      <element name=\"annotation\" type=\"asnx:Annotation\"/>\n       </optional>\n\
    \       <group name=\"definition\">\n        <type>\n         <choice insertions=\"\
    none\">\n          <group name=\"reference\" type=\"asnx:Reference\"/>\n     \
    \     <element name=\"expanded\" type=\"asnx:ExpandedValue\"/>\n          <element\
    \ name=\"fromObjects\"\n                   type=\"asnx:InformationFromObjects\"\
    />\n          <element name=\"openTypeValue\">\n           <type>\n          \
    \  <sequence>\n             <group name=\"type\" type=\"asnx:Type\"/>\n      \
    \       <group name=\"value\" type=\"asnx:Value\"/>\n            </sequence>\n\
    \           </type>\n          </element>\n          <group name=\"components\"\
    \ type=\"asnx:ComponentValueList\"/>\n         </choice>\n        </type>\n  \
    \     </group>\n      </sequence>\n     </type>\n    </namedType>\n    <namedType\
    \ name=\"Reference\">\n     <type>\n      <sequence>\n       <attribute name=\"\
    ref\" type=\"asnx:QName\"/>\n       <optional>\n        <attribute name=\"context\"\
    \ type=\"asnx:AnyURI\"/>\n       </optional>\n      </sequence>\n     </type>\n\
    \    </namedType>\n    <namedType name=\"ExpandedValue\">\n     <type>\n     \
    \ <sequence>\n       <optional>\n        <attribute name=\"name\" type=\"asnx:NCName\"\
    />\n       </optional>\n       <optional>\n        <element name=\"module\" type=\"\
    asnx:ReferencedModule\"/>\n       </optional>\n       <group name=\"value\" type=\"\
    asnx:Value\"/>\n      </sequence>\n     </type>\n    </namedType>\n    <namedType\
    \ name=\"ComponentValueList\">\n     <type>\n      <sequenceOf minSize=\"1\">\n\
    \       <group name=\"component\" type=\"asnx:NamedValue\"/>\n      </sequenceOf>\n\
    \     </type>\n    </namedType>\n    <namedType name=\"NamedValue\">\n     <type>\n\
    \      <choice insertions=\"singular\">\n       <element name=\"component\" type=\"\
    asnx:GenericNamedValue\"/>\n       <element name=\"element\" type=\"asnx:GenericNamedValue\"\
    />\n       <element name=\"attribute\" type=\"asnx:GenericNamedValue\"/>\n   \
    \    <element name=\"group\" type=\"asnx:GenericNamedValue\"/>\n       <element\
    \ name=\"member\" type=\"asnx:GenericNamedValue\"/>\n       <element name=\"item\"\
    \ type=\"asnx:GenericNamedValue\"/>\n       <element name=\"simpleContent\" type=\"\
    asnx:GenericNamedValue\"/>\n      </choice>\n     </type>\n    </namedType>\n\
    \    <namedType name=\"GenericNamedValue\">\n     <type>\n      <sequence>\n \
    \      <attribute name=\"name\" type=\"asnx:QName\"/>\n       <group name=\"value\"\
    \ type=\"asnx:Value\"/>\n      </sequence>\n     </type>\n    </namedType>\n \
    \   <namedType name=\"ValueSet\">\n     <type>\n      <choice insertions=\"none\"\
    >\n       <attribute name=\"valueSet\" identifier=\"valueSetRef\"\n          \
    \        type=\"asnx:QName\">\n        <annotation>\n         valueSet attribute\
    \ is not used in this version\n        </annotation>\n       </attribute>\n  \
    \     <element name=\"valueSet\" type=\"asnx:ElementFormValueSet\"/>\n      </choice>\n\
    \     </type>\n    </namedType>\n    <namedType name=\"ElementFormValueSet\">\n\
    \     <type>\n      <sequence insertions=\"hollow\">\n       <optional>\n    \
    \    <element name=\"annotation\" type=\"asnx:Annotation\"/>\n       </optional>\n\
    \       <group name=\"definition\">\n        <type>\n         <choice insertions=\"\
    none\">\n          <group name=\"elementSetSpecs\" type=\"asnx:ElementSetSpecs\"\
    />\n         </choice>\n        </type>\n       </group>\n      </sequence>\n\
    \     </type>\n    </namedType>\n    <namedType name=\"ElementSetSpecs\">\n  \
    \   <type>\n      <sequence insertions=\"hollow\">\n       <group name=\"root\"\
    \ type=\"asnx:ValueElementSetSpec\"/>\n       <optional>\n        <element name=\"\
    extension\">\n         <type>\n          <sequence insertions=\"hollow\">\n  \
    \         <optional>\n            <group name=\"additions\" type=\"asnx:ValueElementSetSpec\"\
    />\n           </optional>\n          </sequence>\n         </type>\n        </element>\n\
    \       </optional>\n      </sequence>\n     </type>\n    </namedType>\n    <namedType\
    \ name=\"ValueElementSetSpec\">\n     <type>\n      <constrained type=\"asnx:ElementSetSpec\"\
    >\n       <withComponents partial=\"true\">\n        <element name=\"object\"\
    \ use=\"absent\"/>\n        <element name=\"objectSet\" use=\"absent\"/>\n   \
    \     <element name=\"union\">\n         <withComponent>\n          <includes\
    \ type=\"asnx:ValueElementSetSpec\"/>\n         </withComponent>\n        </element>\n\
    \        <element name=\"intersection\">\n         <withComponent>\n         \
    \ <includes type=\"asnx:ValueElementSetSpec\"/>\n         </withComponent>\n \
    \       </element>\n        <element name=\"all\">\n         <withComponents partial=\"\
    true\">\n          <group name=\"elements\">\n           <includes type=\"asnx:ValueElementSetSpec\"\
    />\n          </group>\n          <element name=\"except\">\n           <includes\
    \ type=\"asnx:ValueElementSetSpec\"/>\n          </element>\n         </withComponents>\n\
    \        </element>\n       </withComponents>\n      </constrained>\n     </type>\n\
    \    </namedType>\n    <namedType name=\"ElementSetSpec\">\n     <type>\n    \
    \  <choice insertions=\"singular\">\n       <element name=\"literalValue\"\n \
    \               type=\"asnx:ElementFormLiteralValue\"/>\n       <element name=\"\
    value\" type=\"asnx:ElementFormNotationalValue\"/>\n       <element name=\"includes\"\
    \ type=\"asnx:Type\"/>\n       <element name=\"range\" type=\"asnx:ValueRange\"\
    />\n       <element name=\"size\" type=\"asnx:Constraint\"/>\n       <element\
    \ name=\"typeConstraint\" type=\"asnx:Type\"/>\n       <element name=\"from\"\
    \ type=\"asnx:Constraint\"/>\n       <element name=\"withComponent\" type=\"asnx:Constraint\"\
    />\n       <element name=\"withComponents\"\n                type=\"asnx:MultipleTypeConstraints\"\
    />\n       <element name=\"pattern\" type=\"asnx:Value\"/>\n       <element name=\"\
    object\" type=\"asnx:ElementFormObject\"/>\n       <element name=\"objectSet\"\
    \ type=\"asnx:ElementFormObjectSet\"/>\n       <element name=\"union\" type=\"\
    asnx:ElementSetSpecList\"/>\n       <element name=\"intersection\" type=\"asnx:ElementSetSpecList\"\
    />\n       <element name=\"all\">\n        <type>\n         <sequence>\n     \
    \     <optional>\n           <group name=\"elements\" type=\"asnx:ElementSetSpec\"\
    />\n          </optional>\n          <element name=\"except\" type=\"asnx:ElementSetSpec\"\
    />\n         </sequence>\n        </type>\n       </element>\n      </choice>\n\
    \     </type>\n    </namedType>\n    <namedType name=\"ElementSetSpecList\">\n\
    \     <type>\n      <sequenceOf minSize=\"2\">\n       <group name=\"elements\"\
    \ type=\"asnx:ElementSetSpec\"/>\n      </sequenceOf>\n     </type>\n    </namedType>\n\
    \    <namedType name=\"ValueRange\">\n     <type>\n      <sequence>\n       <optional>\n\
    \        <group name=\"minimum\">\n         <type>\n          <choice insertions=\"\
    none\">\n           <element name=\"minInclusive\" type=\"asnx:EndValue\"/>\n\
    \           <element name=\"minExclusive\" type=\"asnx:EndValue\"/>\n        \
    \  </choice>\n         </type>\n        </group>\n        <default>\n        \
    \ <literalValue>\n          <minInclusive/>\n         </literalValue>\n      \
    \  </default>\n       </optional>\n       <optional>\n        <group name=\"maximum\"\
    >\n         <type>\n          <choice insertions=\"none\">\n           <element\
    \ name=\"maxInclusive\" type=\"asnx:EndValue\"/>\n           <element name=\"\
    maxExclusive\" type=\"asnx:EndValue\"/>\n          </choice>\n         </type>\n\
    \        </group>\n        <default>\n         <literalValue>\n          <maxInclusive/>\n\
    \         </literalValue>\n        </default>\n       </optional>\n      </sequence>\n\
    \     </type>\n    </namedType>\n    <namedType name=\"EndValue\">\n     <type>\n\
    \      <sequence insertions=\"hollow\">\n       <optional>\n        <group name=\"\
    value\" type=\"asnx:Value\"/>\n       </optional>\n      </sequence>\n     </type>\n\
    \    </namedType>\n    <namedType name=\"MultipleTypeConstraints\">\n     <type>\n\
    \      <sequence insertions=\"hollow\">\n       <optional>\n        <attribute\
    \ name=\"partial\" type=\"asnx:BOOLEAN\"/>\n        <default literalValue=\"false\"\
    />\n       </optional>\n       <group name=\"typeConstraints\" type=\"asnx:TypeConstraints\"\
    />\n      </sequence>\n     </type>\n    </namedType>\n    <namedType name=\"\
    TypeConstraints\">\n     <type>\n      <sequenceOf minSize=\"1\">\n       <group\
    \ name=\"namedConstraint\" type=\"asnx:NamedConstraint\"/>\n      </sequenceOf>\n\
    \     </type>\n    </namedType>\n    <namedType name=\"NamedConstraint\">\n  \
    \   <type>\n      <choice insertions=\"singular\">\n       <element name=\"component\"\
    \ type=\"asnx:GenericNamedConstraint\"/>\n       <element name=\"element\" type=\"\
    asnx:GenericNamedConstraint\"/>\n       <element name=\"attribute\" type=\"asnx:GenericNamedConstraint\"\
    />\n       <element name=\"group\" type=\"asnx:GenericNamedConstraint\"/>\n  \
    \     <element name=\"member\" type=\"asnx:GenericNamedConstraint\"/>\n      \
    \ <element name=\"item\" type=\"asnx:GenericNamedConstraint\"/>\n       <element\
    \ name=\"simpleContent\"\n                type=\"asnx:GenericNamedConstraint\"\
    />\n      </choice>\n     </type>\n    </namedType>\n    <namedType name=\"GenericNamedConstraint\"\
    >\n     <type>\n      <sequence insertions=\"hollow\">\n       <attribute name=\"\
    name\" type=\"asnx:QName\"/>\n       <optional>\n        <attribute name=\"use\"\
    \ type=\"asnx:PresenceConstraint\"/>\n       </optional>\n       <optional>\n\
    \        <group name=\"constraint\" type=\"asnx:Constraint\"/>\n       </optional>\n\
    \      </sequence>\n     </type>\n    </namedType>\n    <namedType name=\"PresenceConstraint\"\
    >\n     <type>\n      <enumerated>\n       <enumeration name=\"present\"/>\n \
    \      <enumeration name=\"absent\"/>\n       <enumeration name=\"optional\"/>\n\
    \      </enumerated>\n     </type>\n    </namedType>\n    <namedType name=\"ObjectClass\"\
    >\n     <type>\n      <choice insertions=\"singular\">\n       <attribute name=\"\
    class\" identifier=\"classRef\" type=\"asnx:QName\"/>\n       <element name=\"\
    class\" type=\"asnx:ElementFormObjectClass\"/>\n      </choice>\n     </type>\n\
    \    </namedType>\n    <namedType name=\"DefinedObjectClass\">\n     <type>\n\
    \      <constrained type=\"asnx:ObjectClass\">\n       <withComponents partial=\"\
    true\">\n        <element name=\"class\">\n         <withComponents partial=\"\
    true\">\n          <group name=\"definition\">\n           <withComponents partial=\"\
    true\">\n            <group name=\"objectClassDefn\" use=\"absent\"/>\n      \
    \     </withComponents>\n          </group>\n         </withComponents>\n    \
    \    </element>\n       </withComponents>\n      </constrained>\n     </type>\n\
    \    </namedType>\n    <namedType name=\"ElementFormObjectClass\">\n     <type>\n\
    \      <sequence insertions=\"hollow\">\n       <optional>\n        <element name=\"\
    annotation\" type=\"asnx:Annotation\"/>\n       </optional>\n       <group name=\"\
    definition\">\n        <type>\n         <choice insertions=\"none\">\n       \
    \   <group name=\"reference\" type=\"asnx:Reference\"/>\n          <element name=\"\
    expanded\" type=\"asnx:ExpandedObjectClass\"/>\n          <group name=\"objectClassDefn\"\
    \ type=\"asnx:ObjectClassDefn\"/>\n         </choice>\n        </type>\n     \
    \  </group>\n      </sequence>\n     </type>\n    </namedType>\n    <namedType\
    \ name=\"ExpandedObjectClass\">\n     <type>\n      <sequence>\n       <optional>\n\
    \        <attribute name=\"name\" type=\"asnx:NCName\"/>\n       </optional>\n\
    \       <optional>\n        <element name=\"module\" type=\"asnx:ReferencedModule\"\
    />\n       </optional>\n       <group name=\"objectClass\" type=\"asnx:ObjectClass\"\
    />\n      </sequence>\n     </type>\n    </namedType>\n    <namedType name=\"\
    ObjectClassDefn\">\n     <type>\n      <sequenceOf minSize=\"1\">\n       <group\
    \ name=\"fieldSpec\" type=\"asnx:FieldSpec\"/>\n      </sequenceOf>\n     </type>\n\
    \    </namedType>\n    <namedType name=\"FieldSpec\">\n     <type>\n      <choice\
    \ insertions=\"singular\">\n       <element name=\"typeField\" type=\"asnx:TypeField\"\
    />\n       <element name=\"valueField\" type=\"asnx:ValueField\"/>\n       <element\
    \ name=\"valueSetField\" type=\"asnx:ValueSetField\"/>\n       <element name=\"\
    objectField\" type=\"asnx:ObjectField\"/>\n       <element name=\"objectSetField\"\
    \ type=\"asnx:ObjectSetField\"/>\n       <element name=\"optional\" type=\"asnx:OptionalField\"\
    />\n      </choice>\n     </type>\n    </namedType>\n    <namedType name=\"OptionalField\"\
    >\n     <type>\n      <constrained>\n       <type>\n        <sequence>\n     \
    \    <group name=\"field\">\n          <type>\n           <choice insertions=\"\
    singular\">\n            <element name=\"typeField\" type=\"asnx:TypeField\"/>\n\
    \            <element name=\"valueField\" type=\"asnx:ValueField\"/>\n       \
    \     <element name=\"valueSetField\" type=\"asnx:ValueSetField\"/>\n        \
    \    <element name=\"objectField\" type=\"asnx:ObjectField\"/>\n            <element\
    \ name=\"objectSetField\" type=\"asnx:ObjectSetField\"/>\n           </choice>\n\
    \          </type>\n         </group>\n         <optional>\n          <element\
    \ name=\"default\" type=\"asnx:Setting\"/>\n         </optional>\n        </sequence>\n\
    \       </type>\n       <union>\n        <withComponents partial=\"true\">\n \
    \        <group name=\"field\">\n          <withComponents>\n           <element\
    \ name=\"typeField\" use=\"present\"/>\n          </withComponents>\n        \
    \ </group>\n         <element name=\"default\">\n          <withComponents partial=\"\
    true\">\n           <group name=\"value\" use=\"absent\"/>\n           <group\
    \ name=\"valueSet\" use=\"absent\"/>\n           <group name=\"object\" use=\"\
    absent\"/>\n           <group name=\"objectSet\" use=\"absent\"/>\n          </withComponents>\n\
    \         </element>\n        </withComponents>\n        <withComponents partial=\"\
    true\">\n         <group name=\"field\">\n          <withComponents>\n       \
    \    <element name=\"valueField\" use=\"present\"/>\n          </withComponents>\n\
    \         </group>\n         <element name=\"default\">\n          <withComponents\
    \ partial=\"true\">\n           <group name=\"type\" use=\"absent\"/>\n      \
    \     <group name=\"valueSet\" use=\"absent\"/>\n           <group name=\"object\"\
    \ use=\"absent\"/>\n           <group name=\"objectSet\" use=\"absent\"/>\n  \
    \        </withComponents>\n         </element>\n        </withComponents>\n \
    \       <withComponents partial=\"true\">\n         <group name=\"field\">\n \
    \         <withComponents>\n           <element name=\"valueSetField\" use=\"\
    present\"/>\n          </withComponents>\n         </group>\n         <element\
    \ name=\"default\">\n          <withComponents partial=\"true\">\n           <group\
    \ name=\"type\" use=\"absent\"/>\n           <group name=\"value\" use=\"absent\"\
    />\n           <group name=\"object\" use=\"absent\"/>\n           <group name=\"\
    objectSet\" use=\"absent\"/>\n          </withComponents>\n         </element>\n\
    \        </withComponents>\n        <withComponents partial=\"true\">\n      \
    \   <group name=\"field\">\n          <withComponents>\n           <element name=\"\
    objectField\" use=\"present\"/>\n          </withComponents>\n         </group>\n\
    \         <element name=\"default\">\n          <withComponents partial=\"true\"\
    >\n           <group name=\"type\" use=\"absent\"/>\n           <group name=\"\
    value\" use=\"absent\"/>\n           <group name=\"valueSet\" use=\"absent\"/>\n\
    \           <group name=\"objectSet\" use=\"absent\"/>\n          </withComponents>\n\
    \         </element>\n        </withComponents>\n        <withComponents partial=\"\
    true\">\n         <group name=\"field\">\n          <withComponents>\n       \
    \    <element name=\"objectSetField\" use=\"present\"/>\n          </withComponents>\n\
    \         </group>\n         <element name=\"default\">\n          <withComponents\
    \ partial=\"true\">\n           <group name=\"type\" use=\"absent\"/>\n      \
    \     <group name=\"value\" use=\"absent\"/>\n           <group name=\"valueSet\"\
    \ use=\"absent\"/>\n           <group name=\"object\" use=\"absent\"/>\n     \
    \     </withComponents>\n         </element>\n        </withComponents>\n    \
    \   </union>\n      </constrained>\n     </type>\n    </namedType>\n    <namedType\
    \ name=\"TypeField\">\n     <type>\n      <sequence>\n       <optional>\n    \
    \    <element name=\"annotation\" type=\"asnx:Annotation\"/>\n       </optional>\n\
    \       <attribute name=\"name\" type=\"asnx:TypeFieldReference\"/>\n      </sequence>\n\
    \     </type>\n    </namedType>\n    <namedType name=\"TypeFieldReference\" type=\"\
    asnx:TypeReference\"/>\n    <namedType name=\"ValueField\">\n     <type>\n   \
    \   <constrained>\n       <type>\n        <sequence>\n         <optional>\n  \
    \        <element name=\"annotation\" type=\"asnx:Annotation\"/>\n         </optional>\n\
    \         <attribute name=\"name\" type=\"asnx:ValueFieldReference\"/>\n     \
    \    <optional>\n          <attribute name=\"unique\" type=\"asnx:BOOLEAN\"/>\n\
    \         </optional>\n         <group name=\"governor\">\n          <type>\n\
    \           <choice insertions=\"singular\">\n            <group name=\"type\"\
    \ type=\"asnx:Type\"/>\n            <element name=\"typeFromField\" type=\"asnx:FieldName\"\
    />\n           </choice>\n          </type>\n         </group>\n        </sequence>\n\
    \       </type>\n       <union>\n        <withComponents partial=\"true\">\n \
    \        <attribute name=\"unique\" use=\"absent\"/>\n        </withComponents>\n\
    \        <withComponents partial=\"true\">\n         <group name=\"governor\"\
    >\n          <withComponents partial=\"true\">\n           <element name=\"typeFromField\"\
    \ use=\"absent\"/>\n          </withComponents>\n         </group>\n        </withComponents>\n\
    \       </union>\n      </constrained>\n     </type>\n    </namedType>\n    <namedType\
    \ name=\"ValueFieldReference\" type=\"asnx:ValueReference\"/>\n    <namedType\
    \ name=\"ValueSetField\">\n     <type>\n      <sequence>\n       <optional>\n\
    \        <element name=\"annotation\" type=\"asnx:Annotation\"/>\n       </optional>\n\
    \       <attribute name=\"name\" type=\"asnx:ValueSetFieldReference\"/>\n    \
    \   <group name=\"governor\">\n        <type>\n         <choice insertions=\"\
    singular\">\n          <group name=\"type\" type=\"asnx:Type\"/>\n          <element\
    \ name=\"typeFromField\" type=\"asnx:FieldName\"/>\n         </choice>\n     \
    \   </type>\n       </group>\n      </sequence>\n     </type>\n    </namedType>\n\
    \    <namedType name=\"ValueSetFieldReference\" type=\"asnx:TypeReference\"/>\n\
    \    <namedType name=\"ObjectField\">\n     <type>\n      <sequence>\n       <optional>\n\
    \        <element name=\"annotation\" type=\"asnx:Annotation\"/>\n       </optional>\n\
    \       <attribute name=\"name\" type=\"asnx:ObjectFieldReference\"/>\n      \
    \ <group name=\"objectClass\" type=\"asnx:DefinedObjectClass\"/>\n      </sequence>\n\
    \     </type>\n    </namedType>\n    <namedType name=\"ObjectFieldReference\"\
    \ type=\"asnx:ObjectReference\"/>\n    <namedType name=\"ObjectSetField\">\n \
    \    <type>\n      <sequence>\n       <optional>\n        <element name=\"annotation\"\
    \ type=\"asnx:Annotation\"/>\n       </optional>\n       <attribute name=\"name\"\
    \ type=\"asnx:ObjectSetFieldReference\"/>\n       <group name=\"objectClass\"\
    \ type=\"asnx:DefinedObjectClass\"/>\n      </sequence>\n     </type>\n    </namedType>\n\
    \    <namedType name=\"ObjectSetFieldReference\"\n               type=\"asnx:ObjectSetReference\"\
    />\n    <namedType name=\"Object\">\n     <type>\n      <choice insertions=\"\
    none\">\n       <attribute name=\"object\" identifier=\"objectRef\"\n        \
    \          type=\"asnx:QName\"/>\n       <element name=\"object\" type=\"asnx:ElementFormObject\"\
    />\n      </choice>\n     </type>\n    </namedType>\n    <namedType name=\"ElementFormObject\"\
    >\n     <type>\n      <sequence insertions=\"hollow\">\n       <optional>\n  \
    \      <element name=\"annotation\" type=\"asnx:Annotation\"/>\n       </optional>\n\
    \       <group name=\"definition\">\n        <type>\n         <choice insertions=\"\
    singular\">\n          <group name=\"reference\" type=\"asnx:Reference\"/>\n \
    \         <element name=\"expanded\" type=\"asnx:ExpandedObject\"/>\n        \
    \  <element name=\"fromObjects\"\n                   type=\"asnx:InformationFromObjects\"\
    />\n          <group name=\"fields\" type=\"asnx:ObjectDefn\"/>\n         </choice>\n\
    \        </type>\n       </group>\n      </sequence>\n     </type>\n    </namedType>\n\
    \    <namedType name=\"ExpandedObject\">\n     <type>\n      <sequence>\n    \
    \   <optional>\n        <attribute name=\"name\" type=\"asnx:NCName\"/>\n    \
    \   </optional>\n       <optional>\n        <element name=\"module\" type=\"asnx:ReferencedModule\"\
    />\n       </optional>\n       <group name=\"object\" type=\"asnx:Object\"/>\n\
    \      </sequence>\n     </type>\n    </namedType>\n    <namedType name=\"ObjectDefn\"\
    >\n     <type>\n      <sequenceOf>\n       <element name=\"field\" type=\"asnx:FieldSetting\"\
    />\n      </sequenceOf>\n     </type>\n    </namedType>\n    <namedType name=\"\
    FieldSetting\">\n     <type>\n      <sequence insertions=\"hollow\">\n       <attribute\
    \ name=\"name\" type=\"asnx:NCName\"/>\n       <group name=\"setting\" type=\"\
    asnx:Setting\"/>\n      </sequence>\n     </type>\n    </namedType>\n    <namedType\
    \ name=\"Setting\">\n     <type>\n      <choice>\n       <group name=\"type\"\
    \ type=\"asnx:Type\"/>\n       <group name=\"value\" type=\"asnx:Value\"/>\n \
    \      <group name=\"valueSet\" type=\"asnx:ValueSet\"/>\n       <group name=\"\
    object\" type=\"asnx:Object\"/>\n       <group name=\"objectSet\" type=\"asnx:ObjectSet\"\
    />\n      </choice>\n     </type>\n    </namedType>\n    <namedType name=\"ObjectSet\"\
    >\n     <type>\n      <choice insertions=\"none\">\n       <attribute name=\"\
    objectSet\" identifier=\"objectSetRef\"\n                  type=\"asnx:QName\"\
    />\n       <element name=\"objectSet\" type=\"asnx:ElementFormObjectSet\"/>\n\
    \      </choice>\n     </type>\n    </namedType>\n    <namedType name=\"ElementFormObjectSet\"\
    >\n     <type>\n      <sequence insertions=\"hollow\">\n       <optional>\n  \
    \      <element name=\"annotation\" type=\"asnx:Annotation\"/>\n       </optional>\n\
    \       <group name=\"definition\">\n        <type>\n         <choice insertions=\"\
    none\">\n          <group name=\"reference\" type=\"asnx:Reference\"/>\n     \
    \     <element name=\"expanded\" type=\"asnx:ExpandedObjectSet\"/>\n         \
    \ <group name=\"objectSetSpec\" type=\"asnx:ObjectSetSpec\"/>\n          <element\
    \ name=\"fromObjects\"\n                   type=\"asnx:InformationFromObjects\"\
    />\n         </choice>\n        </type>\n       </group>\n      </sequence>\n\
    \     </type>\n    </namedType>\n    <namedType name=\"ExpandedObjectSet\">\n\
    \     <type>\n      <sequence>\n       <optional>\n        <attribute name=\"\
    name\" type=\"asnx:NCName\"/>\n       </optional>\n       <optional>\n       \
    \ <element name=\"module\" type=\"asnx:ReferencedModule\"/>\n       </optional>\n\
    \       <group name=\"objectSet\" type=\"asnx:ObjectSet\"/>\n      </sequence>\n\
    \     </type>\n    </namedType>\n    <namedType name=\"ObjectSetSpec\">\n    \
    \ <type>\n      <constrained>\n       <type>\n        <sequence insertions=\"\
    hollow\">\n         <optional>\n          <group name=\"root\" type=\"asnx:ObjectElementSetSpec\"\
    />\n         </optional>\n         <optional>\n          <element name=\"extension\"\
    >\n           <type>\n            <sequence insertions=\"hollow\">\n         \
    \    <optional>\n              <group name=\"additions\" type=\"asnx:ObjectElementSetSpec\"\
    />\n             </optional>\n            </sequence>\n           </type>\n  \
    \        </element>\n         </optional>\n        </sequence>\n       </type>\n\
    \       <union>\n        <withComponents partial=\"true\">\n         <group name=\"\
    root\" use=\"present\"/>\n        </withComponents>\n        <withComponents partial=\"\
    true\">\n         <element name=\"extension\" use=\"present\"/>\n        </withComponents>\n\
    \       </union>\n      </constrained>\n     </type>\n    </namedType>\n    <namedType\
    \ name=\"ObjectElementSetSpec\">\n     <type>\n      <constrained type=\"asnx:ElementSetSpec\"\
    >\n       <withComponents partial=\"true\">\n        <element name=\"literalValue\"\
    \ use=\"absent\"/>\n        <element name=\"value\" use=\"absent\"/>\n       \
    \ <element name=\"includes\" use=\"absent\"/>\n        <element name=\"range\"\
    \ use=\"absent\"/>\n        <element name=\"size\" use=\"absent\"/>\n        <element\
    \ name=\"typeConstraint\" use=\"absent\"/>\n        <element name=\"from\" use=\"\
    absent\"/>\n        <element name=\"withComponent\" use=\"absent\"/>\n       \
    \ <element name=\"withComponents\" use=\"absent\"/>\n        <element name=\"\
    pattern\" use=\"absent\"/>\n        <element name=\"union\">\n         <withComponent>\n\
    \          <includes type=\"asnx:ObjectElementSetSpec\"/>\n         </withComponent>\n\
    \        </element>\n        <element name=\"intersection\">\n         <withComponent>\n\
    \          <includes type=\"asnx:ObjectElementSetSpec\"/>\n         </withComponent>\n\
    \        </element>\n        <element name=\"all\">\n         <withComponents\
    \ partial=\"true\">\n          <group name=\"elements\">\n           <includes\
    \ type=\"asnx:ObjectElementSetSpec\"/>\n          </group>\n          <element\
    \ name=\"except\">\n           <includes type=\"asnx:ObjectElementSetSpec\"/>\n\
    \          </element>\n         </withComponents>\n        </element>\n      \
    \ </withComponents>\n      </constrained>\n     </type>\n    </namedType>\n  \
    \  <namedType name=\"EncodingControlSections\">\n     <type>\n      <sequenceOf\
    \ minSize=\"1\">\n       <group name=\"section\" type=\"asnx:EncodingControlSection\"\
    />\n      </sequenceOf>\n     </type>\n    </namedType>\n    <namedType name=\"\
    EncodingControlSection\">\n     <type>\n      <choice insertions=\"singular\"\
    >\n       <element name=\"GSER\" identifier=\"gser\"\n                type=\"\
    asnx:GSER-EncodingInstructionAssignmentList\"/>\n       <element name=\"XER\"\
    \ identifier=\"xer\"\n                type=\"asnx:XER-EncodingInstructionAssignmentList\"\
    />\n       <!-- plus encoding control sections\n            for other encoding\
    \ rules in the future -->\n      </choice>\n     </type>\n    </namedType>\n \
    \   <element name=\"module\" type=\"asnx:ModuleDefinition\"/>\n    <attribute\
    \ name=\"literal\" type=\"asnx:BOOLEAN\"/>\n   </asnx:module>\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Dr. Steven Legg\n   eB2Bcom\n   Suite 3, Woodhouse Corporate\
    \ Centre\n   935 Station Street\n   Box Hill North, Victoria 3129\n   AUSTRALIA\n\
    \   Phone: +61 3 9896 7830\n   Fax:   +61 3 9896 7801\n   EMail: steven.legg@eb2bcom.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
