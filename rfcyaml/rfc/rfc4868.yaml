- contents:
  - '     Using HMAC-SHA-256, HMAC-SHA-384, and HMAC-SHA-512 with IPsec

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2007).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This specification describes the use of Hashed Message Authentication\n
    \  Mode (HMAC) in conjunction with the SHA-256, SHA-384, and SHA-512\n   algorithms
    in IPsec.  These algorithms may be used as the basis for\n   data origin authentication
    and integrity verification mechanisms for\n   the Authentication Header (AH),
    Encapsulating Security Payload (ESP),\n   Internet Key Exchange Protocol (IKE),
    and IKEv2 protocols, and also\n   as Pseudo-Random Functions (PRFs) for IKE and
    IKEv2.  Truncated\n   output lengths are specified for the authentication-related
    variants,\n   with the corresponding algorithms designated as HMAC-SHA-256-128,\n
    \  HMAC-SHA-384-192, and HMAC-SHA-512-256.  The PRF variants are not\n   truncated,
    and are called PRF-HMAC-SHA-256, PRF-HMAC-SHA-384, and\n   PRF-HMAC-SHA-512.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  3\n   2.  The HMAC-SHA-256+ Algorithms . . . . . . . . . . . . .
    . . . .  3\n     2.1.  Keying Material  . . . . . . . . . . . . . . . . . . .
    . .  3\n       2.1.1.  Data Origin Authentication and Integrity\n               Verification
    Usage . . . . . . . . . . . . . . . . . .  4\n       2.1.2.  Pseudo-Random Function
    (PRF) Usage . . . . . . . . . .  4\n       2.1.3.  Randomness and Key Strength
    \ . . . . . . . . . . . . .  5\n       2.1.4.  Key Distribution . . . . . . .
    . . . . . . . . . . . .  5\n       2.1.5.  Refreshing Keys  . . . . . . . . .
    . . . . . . . . . .  5\n     2.2.  Padding  . . . . . . . . . . . . . . . . .
    . . . . . . . .  6\n     2.3.  Truncation . . . . . . . . . . . . . . . . . .
    . . . . . .  6\n     2.4.  Using HMAC-SHA-256+ as PRFs in IKE and IKEv2 . . .
    . . . .  7\n     2.5.  Interactions with the ESP, IKE, or IKEv2 Cipher\n           Mechanisms
    . . . . . . . . . . . . . . . . . . . . . . . .  7\n     2.6.  HMAC-SHA-256+ Parameter
    Summary  . . . . . . . . . . . . .  7\n     2.7.  Test Vectors . . . . . . . .
    . . . . . . . . . . . . . . .  7\n       2.7.1.  PRF Test Vectors . . . . . .
    . . . . . . . . . . . . .  8\n       2.7.2.  Authenticator Test Vectors . . .
    . . . . . . . . . . . 11\n   3.  Security Considerations  . . . . . . . . . .
    . . . . . . . . . 17\n     3.1.  HMAC Key Length vs Truncation Length . . . .
    . . . . . . . 17\n   4.  IANA Considerations  . . . . . . . . . . . . . . . .
    . . . . . 18\n   5.  Acknowledgements . . . . . . . . . . . . . . . . . . . .
    . . . 19\n   6.  References . . . . . . . . . . . . . . . . . . . . . . . . .
    . 19\n     6.1.  Normative References . . . . . . . . . . . . . . . . . . . 19\n
    \    6.2.  Informative References . . . . . . . . . . . . . . . . . . 20\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document specifies the use of SHA-256, SHA-384, and
    SHA-512\n   [SHA2-1] combined with HMAC [HMAC] as data origin authentication and\n
    \  integrity verification mechanisms for the IPsec AH [AH], ESP [ESP],\n   IKE
    [IKE], and IKEv2 [IKEv2] protocol.  Output truncation is\n   specified for these
    variants, with the corresponding algorithms\n   designated as HMAC-SHA-256-128,
    HMAC-SHA-384-192, and HMAC-SHA-512-\n   256.  These truncation lengths are chosen
    in accordance with the\n   birthday bound for each algorithm.\n   This specification
    also describes untruncated variants of these\n   algorithms as Pseudo-Random Functions
    (PRFs) for use with IKE and\n   IKEv2, and those algorithms are called PRF-HMAC-SHA-256,
    PRF-HMAC-\n   SHA-384, and PRF-HMAC-SHA-512.  For ease of reference, these PRF\n
    \  algorithms and the authentication variants described above are\n   collectively
    referred to below as \"the HMAC-SHA-256+ algorithms\".\n   The goal of the PRF
    variants are to provide secure pseudo-random\n   functions suitable for generation
    of keying material and other\n   protocol-specific numeric quantities, while the
    goal of the\n   authentication variants is to ensure that packets are authentic
    and\n   cannot be modified in transit.  The relative security of HMAC-SHA-\n   256+
    when used in either case is dependent on the distribution scope\n   and unpredictability
    of the associated secret key.  If the key is\n   unpredictable and known only
    by the sender and recipient, these\n   algorithms ensure that only parties holding
    an identical key can\n   derive the associated values.\n"
  title: 1.  Introduction
- contents:
  - "2.  The HMAC-SHA-256+ Algorithms\n   [SHA2-1] and [SHA2-2] describe the underlying
    SHA-256, SHA-384, and\n   SHA-512 algorithms, while [HMAC] describes the HMAC
    algorithm.  The\n   HMAC algorithm provides a framework for inserting various
    hashing\n   algorithms such as SHA-256, and [SHA256+] describes combined usage
    of\n   these algorithms.  The following sections describe the various\n   characteristics
    and requirements of the HMAC-SHA-256+ algorithms when\n   used with IPsec.\n"
  - contents:
    - "2.1.  Keying Material\n   Requirements for keying material vary depending on
      whether the\n   algorithm is functioning as a PRF or as an authentication/integrity\n
      \  mechanism.  In the case of authentication/integrity, key lengths are\n   fixed
      according to the output length of the algorithm in use.  In the\n   case of
      PRFs, key lengths are variable, but guidance is given to\n   ensure interoperability.
      \ These distinctions are described further\n   below.\n   Before describing
      key requirements for each usage, it is important to\n   clarify some terms we
      use below:\n   Block size:  the size of the data block the underlying hash algorithm\n
      \     operates upon.  For SHA-256, this is 512 bits, for SHA-384 and\n      SHA-512,
      this is 1024 bits.\n   Output length:  the size of the hash value produced by
      the underlying\n      hash algorithm.  For SHA-256, this is 256 bits, for SHA-384
      this\n      is 384 bits, and for SHA-512, this is 512 bits.\n   Authenticator
      length:  the size of the \"authenticator\" in bits.  This\n      only applies
      to authentication/integrity related algorithms, and\n      refers to the bit
      length remaining after truncation.  In this\n      specification, this is always
      half the output length of the\n      underlying hash algorithm.\n"
    - contents:
      - "2.1.1.  Data Origin Authentication and Integrity Verification Usage\n   HMAC-SHA-256+
        are secret key algorithms.  While no fixed key length\n   is specified in
        [HMAC], this specification requires that when used as\n   an integrity/authentication
        algorithm, a fixed key length equal to\n   the output length of the hash functions
        MUST be supported, and key\n   lengths other than the output length of the
        associated hash function\n   MUST NOT be supported.\n   These key length restrictions
        are based in part on the\n   recommendations in [HMAC] (key lengths less than
        the output length\n   decrease security strength, and keys longer than the
        output length do\n   not significantly increase security strength), and in
        part because\n   allowing variable length keys for IPsec authenticator functions
        would\n   create interoperability issues.\n"
      title: 2.1.1.  Data Origin Authentication and Integrity Verification Usage
    - contents:
      - "2.1.2.  Pseudo-Random Function (PRF) Usage\n   IKE and IKEv2 use PRFs for
        generating keying material and for\n   authentication of the IKE Security
        Association.  The IKEv2\n   specification differentiates between PRFs with
        fixed key sizes and\n   those with variable key sizes, and so we give some
        special guidance\n   for this below.\n   When a PRF described in this document
        is used with IKE or IKEv2, it\n   is considered to have a variable key length,
        and keys are derived in\n   the following ways (note that we simply reiterate
        that which is\n   specified in [HMAC]):\n   o  If the length of the key is
        exactly the algorithm block size, use\n      it as-is.\n   o  If the key is
        shorter than the block size, lengthen it to exactly\n      the block size
        by padding it on the right with zero bits.\n      However, note that [HMAC]
        strongly discourages a key length less\n      than the output length.  Nonetheless,
        we describe handling of\n      shorter lengths here in recognition of shorter
        lengths typically\n      chosen for IKE or IKEv2 pre-shared keys.\n   o  If
        the key is longer than the block size, shorten it by computing\n      the
        corresponding hash algorithm output over the entire key value,\n      and
        treat the resulting output value as your HMAC key.  Note that\n      this
        will always result in a key that is less than the block size\n      in length,
        and this key value will therefore require zero-padding\n      (as described
        above) prior to use.\n"
      title: 2.1.2.  Pseudo-Random Function (PRF) Usage
    - contents:
      - "2.1.3.  Randomness and Key Strength\n   [HMAC] discusses requirements for
        key material, including a\n   requirement for strong randomness.  Therefore,
        a strong pseudo-random\n   function MUST be used to generate the required
        key for use with HMAC-\n   SHA-256+.  At the time of this writing there are
        no published weak\n   keys for use with any HMAC-SHA-256+ algorithms.\n"
      title: 2.1.3.  Randomness and Key Strength
    - contents:
      - "2.1.4.  Key Distribution\n   [ARCH] describes the general mechanism for obtaining
        keying material\n   when multiple keys are required for a single SA (e.g.,
        when an ESP SA\n   requires a key for confidentiality and a key for authentication).
        \ In\n   order to provide data origin authentication and integrity\n   verification,
        the key distribution mechanism must ensure that unique\n   keys are allocated
        and that they are distributed only to the parties\n   participating in the
        communication.\n"
      title: 2.1.4.  Key Distribution
    - contents:
      - "2.1.5.  Refreshing Keys\n   Currently, there are no practical attacks against
        the algorithms\n   recommended here, and especially against the key sizes
        recommended\n   here.  However, as noted in [HMAC] \"...periodic key refreshment
        is a\n   fundamental security practice that helps against potential weaknesses\n
        \  of the function and keys, and limits the damage of an exposed key\".\n
        \  Putting this into perspective, this specification requires 256, 384,\n
        \  or 512-bit keys produced by a strong PRF for use as a MAC.  A brute\n   force
        attack on such keys would take longer to mount than the\n   universe has been
        in existence.  On the other hand, weak keys (e.g.,\n   dictionary words) would
        be dramatically less resistant to attack.  It\n   is important to take these
        points, along with the specific threat\n   model for your particular application
        and the current state of the\n   art with respect to attacks on SHA-256, SHA-384,
        and SHA-512 into\n   account when determining an appropriate upper bound for
        HMAC key\n   lifetimes.\n"
      title: 2.1.5.  Refreshing Keys
    title: 2.1.  Keying Material
  - contents:
    - "2.2.  Padding\n   The HMAC-SHA-256 algorithms operate on 512-bit blocks of
      data, while\n   the HMAC-SHA-384 and HMAC-SHA-512 algorithms operate on 1024-bit\n
      \  blocks of data.  Padding requirements are specified in [SHA2-1] as\n   part
      of the underlying SHA-256, SHA-384, and SHA-512 algorithms, so\n   if you implement
      according to [SHA2-1], you do not need to add any\n   additional padding as
      far as the HMAC-SHA-256+ algorithms specified\n   here are concerned.  With
      regard to \"implicit packet padding\" as\n   defined in [AH], no implicit packet
      padding is required.\n"
    title: 2.2.  Padding
  - contents:
    - "2.3.  Truncation\n   The HMAC-SHA-256+ algorithms each produce an nnn-bit value,
      where nnn\n   corresponds to the output bit length of the algorithm, e.g., HMAC-\n
      \  SHA-nnn.  For use as an authenticator, this nnn-bit value can be\n   truncated
      as described in [HMAC].  When used as a data origin\n   authentication and integrity
      verification algorithm in ESP, AH, IKE,\n   or IKEv2, a truncated value using
      the first nnn/2 bits -- exactly\n   half the algorithm output size -- MUST be
      supported.  No other\n   authenticator value lengths are supported by this specification.\n
      \  Upon sending, the truncated value is stored within the authenticator\n   field.
      \ Upon receipt, the entire nnn-bit value is computed and the\n   first nnn/2
      bits are compared to the value stored in the\n   authenticator field, with the
      value of 'nnn' depending on the\n   negotiated algorithm.\n   [HMAC] discusses
      potential security benefits resulting from\n   truncation of the output MAC
      value, and in general, encourages HMAC\n   users to perform MAC truncation.
      \ In the context of IPsec, a\n   truncation length of nnn/2 bits is selected
      because it corresponds to\n   the birthday attack bound for each of the HMAC-SHA-256+
      algorithms,\n   and it simultaneously serves to minimize the additional bits
      on the\n   wire resulting from use of this facility.\n"
    title: 2.3.  Truncation
  - contents:
    - "2.4.  Using HMAC-SHA-256+ as PRFs in IKE and IKEv2\n   The PRF-HMAC-SHA-256
      algorithm is identical to HMAC-SHA-256-128,\n   except that variable-length
      keys are permitted, and the truncation\n   step is NOT performed.  Likewise,
      the implementations of PRF-HMAC-\n   SHA-384 and PRF-HMAC-SHA-512 are identical
      to those of HMAC-SHA-384-\n   192 and HMAC-SHA-512-256 respectively, except
      that again, variable-\n   length keys are permitted, and truncation is NOT performed.\n"
    title: 2.4.  Using HMAC-SHA-256+ as PRFs in IKE and IKEv2
  - contents:
    - "2.5.  Interactions with the ESP, IKE, or IKEv2 Cipher Mechanisms\n   As of
      this writing, there are no known issues that preclude the use\n   of the HMAC-SHA-256+
      algorithms with any specific cipher algorithm.\n"
    title: 2.5.  Interactions with the ESP, IKE, or IKEv2 Cipher Mechanisms
  - contents:
    - "2.6.  HMAC-SHA-256+ Parameter Summary\n   The following table serves to summarize
      the various quantities\n   associated with the HMAC-SHA-256+ algorithms.  In
      this table, \"var\"\n   stands for \"variable\".\n   +------------------+--------+--------+--------+--------+------------+\n
      \  |    Algorithm     | Block  | Output | Trunc. |  Key   | Algorithm  |\n   |
      \      ID         |  Size  | Length | Length | Length |   Type     |\n   +==================+========+========+========+========+============+\n
      \  | HMAC-SHA-256-128 |   512  |   256  |  128   |  256   | auth/integ |\n   +------------------+--------+--------+--------+--------+------------+\n
      \  | HMAC-SHA-384-192 |  1024  |   384  |  192   |  384   | auth/integ |\n   +------------------+--------+--------+--------+--------+------------+\n
      \  | HMAC-SHA-512-256 |  1024  |   512  |  256   |  512   | auth/integ |\n   +------------------+--------+--------+--------+--------+------------+\n
      \  | PRF-HMAC-SHA-256 |   512  |   256  | (none) |  var   |     PRF    |\n   +------------------+--------+--------+--------+--------+------------+\n
      \  | PRF-HMAC-SHA-384 |  1024  |   384  | (none) |  var   |     PRF    |\n   +------------------+--------+--------+--------+--------+------------+\n
      \  | PRF-HMAC-SHA-512 |  1024  |   512  | (none) |  var   |     PRF    |\n   +------------------+--------+--------+--------+--------+------------+\n"
    title: 2.6.  HMAC-SHA-256+ Parameter Summary
  - contents:
    - "2.7.  Test Vectors\n   The following test cases include the key, the data,
      and the resulting\n   authenticator, and/or PRF values for each algorithm.  The
      values of\n   keys and data are either ASCII character strings (surrounded by\n
      \  double quotes) or hexadecimal numbers.  If a value is an ASCII\n   character
      string, then the HMAC computation for the corresponding\n   test case DOES NOT
      include the trailing null character ('\\0') of the\n   string.  The computed
      HMAC values are all hexadecimal numbers.\n"
    - contents:
      - "2.7.1.  PRF Test Vectors\n   These test cases were borrowed from RFC 4231
        [HMAC-TEST].  For\n   reference implementations of the underlying hash algorithms,
        see\n   [SHA256+].  Note that for testing purposes, PRF output is considered\n
        \  to be simply the untruncated algorithm output.\n   Test Case PRF-1:\n   Key
        =          0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b\n                  0b0b0b0b                          (20
        bytes)\n   Data =         4869205468657265                  (\"Hi There\")\n
        \  PRF-HMAC-SHA-256 = b0344c61d8db38535ca8afceaf0bf12b\n                      881dc200c9833da726e9376c2e32cff7\n
        \  PRF-HMAC-SHA-384 = afd03944d84895626b0825f4ab46907f\n                      15f9dadbe4101ec682aa034c7cebc59c\n
        \                     faea9ea9076ede7f4af152e8b2fa9cb6\n   PRF-HMAC-SHA-512
        = 87aa7cdea5ef619d4ff0b4241a1d6cb0\n                      2379f4e2ce4ec2787ad0b30545e17cde\n
        \                     daa833b7d6b8a702038b274eaea3f4e4\n                      be9d914eeb61f1702e696c203a126854\n
        \  Test Case PRF-2:\n   Key =          4a656665                          (\"Jefe\")\n
        \  Data =         7768617420646f2079612077616e7420  (\"what do ya want \")\n
        \                 666f72206e6f7468696e673f          (\"for nothing?\")\n   PRF-HMAC-SHA-256
        = 5bdcc146bf60754e6a042426089575c7\n                      5a003f089d2739839dec58b964ec3843\n
        \  PRF-HMAC-SHA-384 = af45d2e376484031617f78d2b58a6b1b\n                      9c7ef464f5a01b47e42ec3736322445e\n
        \                     8e2240ca5e69e2c78b3239ecfab21649\n   PRF-HMAC-SHA-512
        = 164b7a7bfcf819e2e395fbe73b56e0a3\n                      87bd64222e831fd610270cd7ea250554\n
        \                     9758bf75c05a994a6d034f65f8f0e6fd\n                      caeab1a34d4a6b4b636e070a38bce737\n
        \  Test Case PRF-3:\n   Key            aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n
        \                 aaaaaaaa                          (20 bytes)\n   Data =
        \        dddddddddddddddddddddddddddddddd\n                  dddddddddddddddddddddddddddddddd\n
        \                 dddddddddddddddddddddddddddddddd\n                  dddd
        \                             (50 bytes)\n   PRF-HMAC-SHA-256 = 773ea91e36800e46854db8ebd09181a7\n
        \                     2959098b3ef8c122d9635514ced565fe\n   PRF-HMAC-SHA-384
        = 88062608d3e6ad8a0aa2ace014c8a86f\n                      0aa635d947ac9febe83ef4e55966144b\n
        \                     2a5ab39dc13814b94e3ab6e101a34f27\n   PRF-HMAC-SHA-512
        = fa73b0089d56a284efb0f0756c890be9\n                      b1b5dbdd8ee81a3655f83e33b2279d39\n
        \                     bf3e848279a722c806b485a47e67c807\n                      b946a337bee8942674278859e13292fb\n
        \  Test Case PRF-4:\n   Key =          0102030405060708090a0b0c0d0e0f10\n
        \                 111213141516171819                (25 bytes)\n   Data =
        \        cdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcd\n                  cdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcd\n
        \                 cdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcd\n                  cdcd
        \                             (50 bytes)\n   PRF-HMAC-SHA-256 = 82558a389a443c0ea4cc819899f2083a\n
        \                     85f0faa3e578f8077a2e3ff46729665b\n   PRF-HMAC-SHA-384
        = 3e8a69b7783c25851933ab6290af6ca7\n                      7a9981480850009cc5577c6e1f573b4e\n
        \                     6801dd23c4a7d679ccf8a386c674cffb\n   PRF-HMAC-SHA-512
        = b0ba465637458c6990e5a8c5f61d4af7\n                      e576d97ff94b872de76f8050361ee3db\n
        \                     a91ca5c11aa25eb4d679275cc5788063\n                      a5f19741120c4f2de2adebeb10a298dd\n
        \  Test Case PRF-5:\n   Key =          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n
        \                 aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n                  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n
        \                 aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n                  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n
        \                 aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n                  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n
        \                 aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n                  aaaaaa
        \                           (131 bytes)\n   Data =         54657374205573696e67204c61726765
        \ (\"Test Using Large\")\n                  72205468616e20426c6f636b2d53697a
        \ (\"r Than Block-Siz\")\n                  65204b6579202d2048617368204b6579
        \ (\"e Key - Hash Key\")\n                  204669727374                      (\"
        First\")\n   PRF-HMAC-SHA-256 = 60e431591ee0b67f0d8a26aacbf5b77f\n                      8e0bc6213728c5140546040f0ee37f54\n
        \  PRF-HMAC-SHA-384 = 4ece084485813e9088d2c63a041bc5b4\n                      4f9ef1012a2b588f3cd11f05033ac4c6\n
        \                     0c2ef6ab4030fe8296248df163f44952\n   PRF-HMAC-SHA-512
        = 80b24263c7c1a3ebb71493c1dd7be8b4\n                      9b46d1f41b4aeec1121b013783f8f352\n
        \                     6b56d037e05f2598bd0fd2215d6a1e52\n                      95e64f73f63f0aec8b915a985d786598\n
        \  Test Case PRF-6:\n   Key =          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n
        \                 aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n                  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n
        \                 aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n                  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n
        \                 aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n                  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n
        \                 aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n                  aaaaaa
        \                           (131 bytes)\n   Data =         54686973206973206120746573742075
        \ (\"This is a test u\")\n                  73696e672061206c6172676572207468
        \ (\"sing a larger th\")\n                  616e20626c6f636b2d73697a65206b65
        \ (\"an block-size ke\")\n                  7920616e642061206c61726765722074
        \ (\"y and a larger t\")\n                  68616e20626c6f636b2d73697a652064
        \ (\"han block-size d\")\n                  6174612e20546865206b6579206e6565
        \ (\"ata. The key nee\")\n                  647320746f2062652068617368656420
        \ (\"ds to be hashed \")\n                  6265666f7265206265696e6720757365
        \ (\"before being use\")\n                  642062792074686520484d414320616c
        \ (\"d by the HMAC al\")\n                  676f726974686d2e                  (\"gorithm.\")\n
        \  PRF-HMAC-SHA-256 = 9b09ffa71b942fcb27635fbcd5b0e944\n                      bfdc63644f0713938a7f51535c3a35e2\n
        \  PRF-HMAC-SHA-384 = 6617178e941f020d351e2f254e8fd32c\n                      602420feb0b8fb9adccebb82461e99c5\n
        \                     a678cc31e799176d3860e6110c46523e\n   PRF-HMAC-SHA-512
        = e37b6a775dc87dbaa4dfa9f96e5e3ffd\n                      debd71f8867289865df5a32d20cdc944\n
        \                     b6022cac3c4982b10d5eeb55c3e4de15\n                      134676fb6de0446065c97440fa8c6a58\n"
      title: 2.7.1.  PRF Test Vectors
    - contents:
      - "2.7.2.  Authenticator Test Vectors\n   The following sections are test cases
        for HMAC-SHA256-128, HMAC-\n   SHA384-192, and HMAC-SHA512-256.  PRF outputs
        are also included for\n   convenience.  These test cases were generated using
        the SHA256+\n   reference code provided in [SHA256+].\n"
      - contents:
        - "2.7.2.1.  SHA256 Authentication Test Vectors\n   Test Case AUTH256-1:\n
          \  Key =          0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b\n                  0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b
          \ (32 bytes)\n   Data =         4869205468657265                  (\"Hi
          There\")\n   PRF-HMAC-SHA-256 = 198a607eb44bfbc69903a0f1cf2bbdc5\n                      ba0aa3f3d9ae3c1c7a3b1696a0b68cf7\n
          \  HMAC-SHA-256-128 = 198a607eb44bfbc69903a0f1cf2bbdc5\n   Test Case AUTH256-2:\n
          \  Key =          4a6566654a6566654a6566654a656665  (\"JefeJefeJefeJefe\")\n
          \                 4a6566654a6566654a6566654a656665  (\"JefeJefeJefeJefe\")\n
          \  Data =         7768617420646f2079612077616e7420  (\"what do ya want \")\n
          \                 666f72206e6f7468696e673f          (\"for nothing?\")\n
          \  PRF-HMAC-SHA-256 = 167f928588c5cc2eef8e3093caa0e87c\n                      9ff566a14794aa61648d81621a2a40c6\n
          \  HMAC-SHA-256-128 = 167f928588c5cc2eef8e3093caa0e87c\n   Test Case AUTH256-3:\n
          \  Key =          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n                  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
          \ (32 bytes)\n   Data =         dddddddddddddddddddddddddddddddd\n                  dddddddddddddddddddddddddddddddd\n
          \                 dddddddddddddddddddddddddddddddd\n                  dddd
          \                             (50 bytes)\n   PRF-HMAC-SHA-256 = cdcb1220d1ecccea91e53aba3092f962\n
          \                     e549fe6ce9ed7fdc43191fbde45c30b0\n   HMAC-SHA-256-128
          = cdcb1220d1ecccea91e53aba3092f962\n   Test Case AUTH256-4:\n   Key =          0102030405060708090a0b0c0d0e0f10\n
          \                 1112131415161718191a1b1c1d1e1f20  (32 bytes)\n   Data
          =         cdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcd\n                  cdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcd\n
          \                 cdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcd\n                  cdcd
          \                             (50 bytes)\n   PRF-HMAC-SHA-256 = 372efcf9b40b35c2115b1346903d2ef4\n
          \                     2fced46f0846e7257bb156d3d7b30d3f\n   HMAC-SHA-256-128
          = 372efcf9b40b35c2115b1346903d2ef4\n"
        title: 2.7.2.1.  SHA256 Authentication Test Vectors
      - contents:
        - "2.7.2.2.  SHA384 Authentication Test Vectors\n   Test Case AUTH384-1:\n
          \  Key =          0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b\n                  0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b\n
          \                 0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b  (48 bytes)\n   Data
          =         4869205468657265                  (\"Hi There\")\n   PRF-HMAC-SHA-384
          = b6a8d5636f5c6a7224f9977dcf7ee6c7\n                      fb6d0c48cbdee9737a959796489bddbc\n
          \                     4c5df61d5b3297b4fb68dab9f1b582c2\n   HMAC-SHA-384-128
          = b6a8d5636f5c6a7224f9977dcf7ee6c7\n                      fb6d0c48cbdee973\n
          \  Test Case AUTH384-2:\n   Key =          4a6566654a6566654a6566654a656665
          \ (\"JefeJefeJefeJefe\")\n                  4a6566654a6566654a6566654a656665
          \ (\"JefeJefeJefeJefe\")\n                  4a6566654a6566654a6566654a656665
          \ (\"JefeJefeJefeJefe\")\n   Data =         7768617420646f2079612077616e7420
          \ (\"what do ya want \")\n                  666f72206e6f7468696e673f          (\"for
          nothing?\")\n   PRF-HMAC-SHA-384 = 2c7353974f1842fd66d53c452ca42122\n                      b28c0b594cfb184da86a368e9b8e16f5\n
          \                     349524ca4e82400cbde0686d403371c9\n   HMAC-SHA-384-192
          = 2c7353974f1842fd66d53c452ca42122\n                      b28c0b594cfb184d\n
          \  Test Case AUTH384-3:\n   Key =          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n
          \                 aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n                  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
          \ (48 bytes)\n   Data =         dddddddddddddddddddddddddddddddd\n                  dddddddddddddddddddddddddddddddd\n
          \                 dddddddddddddddddddddddddddddddd\n                  dddd
          \                             (50 bytes)\n   PRF-HMAC-SHA-384 = 809f439be00274321d4a538652164b53\n
          \                     554a508184a0c3160353e3428597003d\n                      35914a18770f9443987054944b7c4b4a\n
          \  HMAC-SHA-384-192 = 809f439be00274321d4a538652164b53\n                      554a508184a0c316\n
          \  Test Case AUTH384-4:\n   Key =          0102030405060708090a0b0c0d0e0f10\n
          \                 1112131415161718191a1b1c1d1e1f20\n                  0a0b0c0d0e0f10111213141516171819
          \ (48 bytes)\n   Data =         cdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcd\n                  cdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcd\n
          \                 cdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcd\n                  cdcd
          \                             (50 bytes)\n   PRF-HMAC-SHA-384 = 5b540085c6e6358096532b2493609ed1\n
          \                     cb298f774f87bb5c2ebf182c83cc7428\n                      707fb92eab2536a5812258228bc96687\n
          \  HMAC-SHA-384-192 = 5b540085c6e6358096532b2493609ed1\n                      cb298f774f87bb5c\n"
        title: 2.7.2.2.  SHA384 Authentication Test Vectors
      - contents:
        - "2.7.2.3.  SHA512 Authentication Test Vectors\n   Test Case AUTH512-1:\n
          \  Key =          0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b\n                  0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b\n
          \                 0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b\n                  0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b
          \ (64 bytes)\n   Data =         4869205468657265                  (\"Hi
          There\")\n   PRF-HMAC-SHA-512 = 637edc6e01dce7e6742a99451aae82df\n                      23da3e92439e590e43e761b33e910fb8\n
          \                     ac2878ebd5803f6f0b61dbce5e251ff8\n                      789a4722c1be65aea45fd464e89f8f5b\n
          \  HMAC-SHA-512-256 = 637edc6e01dce7e6742a99451aae82df\n                      23da3e92439e590e43e761b33e910fb8\n
          \  Test Case AUTH512-2:\n   Key =          4a6566654a6566654a6566654a656665
          \ (\"JefeJefeJefeJefe\")\n                  4a6566654a6566654a6566654a656665
          \ (\"JefeJefeJefeJefe\")\n                  4a6566654a6566654a6566654a656665
          \ (\"JefeJefeJefeJefe\")\n                  4a6566654a6566654a6566654a656665
          \ (\"JefeJefeJefeJefe\")\n   Data =         7768617420646f2079612077616e7420
          \ (\"what do ya want \")\n                  666f72206e6f7468696e673f          (\"for
          nothing?\")\n   PRF-HMAC-SHA-512 = cb370917ae8a7ce28cfd1d8f4705d614\n                      1c173b2a9362c15df235dfb251b15454\n
          \                     6aa334ae9fb9afc2184932d8695e397b\n                      fa0ffb93466cfcceaae38c833b7dba38\n
          \  HMAC-SHA-512-256 = cb370917ae8a7ce28cfd1d8f4705d614\n                      1c173b2a9362c15df235dfb251b15454\n
          \  Test Case AUTH512-3:\n   Key =          aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n
          \                 aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n                  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n
          \                 aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa  (64 bytes)\n   Data
          =         dddddddddddddddddddddddddddddddd\n                  dddddddddddddddddddddddddddddddd\n
          \                 dddddddddddddddddddddddddddddddd\n                  dddd
          \                             (50 bytes)\n   PRF-HMAC-SHA-512 = 2ee7acd783624ca9398710f3ee05ae41\n
          \                     b9f9b0510c87e49e586cc9bf961733d8\n                      623c7b55cebefccf02d5581acc1c9d5f\n
          \                     b1ff68a1de45509fbe4da9a433922655\n   HMAC-SHA-512-256
          = 2ee7acd783624ca9398710f3ee05ae41\n                      b9f9b0510c87e49e586cc9bf961733d8\n
          \  Test Case AUTH512-4:\n   Key =          0a0b0c0d0e0f10111213141516171819\n
          \                 0102030405060708090a0b0c0d0e0f10\n                  1112131415161718191a1b1c1d1e1f20\n
          \                 2122232425262728292a2b2c2d2e2f30\n                  3132333435363738393a3b3c3d3e3f40
          \ (64 bytes)\n   Data =         cdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcd\n                  cdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcd\n
          \                 cdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcd\n                  cdcd
          \                             (50 bytes)\n   PRF-HMAC-SHA-512 = 5e6688e5a3daec826ca32eaea224eff5\n
          \                     e700628947470e13ad01302561bab108\n                      b8c48cbc6b807dcfbd850521a685babc\n
          \                     7eae4a2a2e660dc0e86b931d65503fd2\n   HMAC-SHA-512-256
          = 5e6688e5a3daec826ca32eaea224eff5\n                      e700628947470e13ad01302561bab108\n"
        title: 2.7.2.3.  SHA512 Authentication Test Vectors
      title: 2.7.2.  Authenticator Test Vectors
    title: 2.7.  Test Vectors
  title: 2.  The HMAC-SHA-256+ Algorithms
- contents:
  - "3.  Security Considerations\n   In a general sense, the security provided by
    the HMAC-SHA-256+\n   algorithms is based both upon the strength of the underlying
    hash\n   algorithm, and upon the additional strength derived from the HMAC\n   construct.
    \ At the time of this writing, there are no practical\n   cryptographic attacks
    against SHA-256, SHA-384, SHA-512, or HMAC.\n   However, as with any cryptographic
    algorithm, an important component\n   of these algorithms' strength lies in the
    correctness of the\n   algorithm implementation, the security of the key management\n
    \  mechanism, the strength of the associated secret key, and upon the\n   correctness
    of the implementation in all of the participating\n   systems.  This specification
    contains test vectors to assist in\n   verifying the correctness of the algorithm
    implementation, but these\n   in no way verify the correctness (or security) of
    the surrounding\n   security infrastructure.\n"
  - contents:
    - "3.1.  HMAC Key Length vs Truncation Length\n   There are important differences
      between the security levels afforded\n   by HMAC-SHA1-96 [HMAC-SHA1] and the
      HMAC-SHA-256+ algorithms, but\n   there are also considerations that are somewhat
      counter-intuitive.\n   There are two different axes along which we gauge the
      security of\n   these algorithms: HMAC output length and HMAC key length.  If
      we\n   assume the HMAC key is a well-guarded secret that can only be\n   determined
      through offline attacks on observed values, and that its\n   length is less
      than or equal to the output length of the underlying\n   hash algorithm, then
      the key's strength is directly proportional to\n   its length.  And if we assume
      an adversary has no knowledge of the\n   HMAC key, then the probability of guessing
      a correct MAC value for\n   any given packet is directly proportional to the
      HMAC output length.\n   This specification defines truncation to output lengths
      of either 128\n   192, or 256 bits.  It is important to note that at this time,
      it is\n   not clear that HMAC-SHA-256 with a truncation length of 128 bits is\n
      \  any more secure than HMAC-SHA1 with the same truncation length,\n   assuming
      the adversary has no knowledge of the HMAC key.  This is\n   because in such
      cases, the adversary must predict only those bits\n   that remain after truncation.
      \ Since in both cases that output length\n   is the same (128 bits), the adversary's
      odds of correctly guessing\n   the value are also the same in either case: 1
      in 2^128.  Again, if we\n   assume the HMAC key remains unknown to the attacker,
      then only a bias\n   in one of the algorithms would distinguish one from the
      other.\n   Currently, no such bias is known to exist in either HMAC-SHA1 or\n
      \  HMAC-SHA-256+.\n   If, on the other hand, the attacker is focused on guessing
      the HMAC\n   key, and we assume that the hash algorithms are indistinguishable\n
      \  when viewed as PRF's, then the HMAC key length provides a direct\n   measure
      of the underlying security: the longer the key, the harder it\n   is to guess.
      \ This means that with respect to passive attacks on the\n   HMAC key, size
      matters - and the HMAC-SHA-256+ algorithms provide\n   more security in this
      regard than HMAC-SHA1-96.\n"
    title: 3.1.  HMAC Key Length vs Truncation Length
  title: 3.  Security Considerations
- contents:
  - "4.  IANA Considerations\n   This document does not specify the conventions for
    using SHA256+ for\n   IKE Phase 1 negotiations, except to note that IANA has made
    the\n   following IKE hash algorithm attribute assignments:\n   SHA2-256:  4\n
    \  SHA2-384:  5\n   SHA2-512:  6\n   For IKE Phase 2 negotiations, IANA has assigned
    the following\n   authentication algorithm identifiers:\n   HMAC-SHA2-256:  5\n
    \  HMAC-SHA2-384:  6\n   HMAC-SHA2-512:  7\n   For use of HMAC-SHA-256+ as a PRF
    in IKEv2, IANA has assigned the\n   following IKEv2 Pseudo-random function (type
    2) transform\n   identifiers:\n   PRF_HMAC_SHA2_256  5\n   PRF_HMAC_SHA2_384  6\n
    \  PRF_HMAC_SHA2_512  7\n   For the use of HMAC-SHA-256+ algorithms for data origin\n
    \  authentication and integrity verification in IKEv2, ESP, or AH, IANA\n   has
    assigned the following IKEv2 integrity (type 3) transform\n   identifiers:\n   AUTH_HMAC_SHA2_256_128
    \ 12\n   AUTH_HMAC_SHA2_384_192  13\n   AUTH_HMAC_SHA2_512_256  14\n"
  title: 4.  IANA Considerations
- contents:
  - "5.  Acknowledgements\n   Portions of this text were unabashedly borrowed from
    [HMAC-SHA1] and\n   [HMAC-TEST].  Thanks to Hugo Krawczyk for comments and\n   recommendations
    on early revisions of this document, and thanks also\n   to Russ Housley and Steve
    Bellovin for various security-related\n   comments and recommendations.\n"
  title: 5.  Acknowledgements
- contents:
  - '6.  References

    '
  - contents:
    - "6.1.  Normative References\n   [AH]         Kent, S., \"IP Authentication Header\",
      RFC 4302,\n                December 2005.\n   [ARCH]       Kent, S. and K. Seo,
      \"Security Architecture for the\n                Internet Protocol\", RFC 4301,
      December 2005.\n   [ESP]        Kent, S., \"IP Encapsulating Security Payload
      (ESP)\",\n                RFC 4303, December 2005.\n   [HMAC]       Krawczyk,
      H., Bellare, M., and R. Canetti, \"HMAC: Keyed-\n                Hashing for
      Message Authentication\", RFC 2104,\n                February 1997.\n   [HMAC-SHA1]
      \ Madsen, C. and R. Glenn, \"The Use of HMAC-SHA-1-96\n                within
      ESP and AH\", RFC 2404, November 1998.\n   [HMAC-TEST]  Nystrom, M., \"Identifiers
      and Test Vectors for HMAC-SHA-\n                224, HMAC-SHA-256, HMAC-SHA-384,
      and HMAC-SHA-512\",\n                RFC 4231, December 2005.\n   [IKE]        Harkins,
      D. and D. Carrel, \"The Internet Key Exchange\n                (IKE)\", RFC
      2409, November 1998.\n   [IKEv2]      Kaufman, C., \"Internet Key Exchange (IKEv2)
      Protocol\",\n                RFC 4306, December 2005.\n   [SHA2-1]     NIST,
      \"FIPS PUB 180-2 'Specifications for the Secure\n                Hash Standard'\",
      2004 FEB, <http://csrc.nist.gov/\n                publications/fips/fips180-2/\n
      \               fips180-2withchangenotice.pdf>.\n   [SHA256+]    Eastlake, D.
      and T. Hansen, \"US Secure Hash Algorithms\n                (SHA and HMAC-SHA)\",
      RFC 4634, July 2006.\n"
    title: 6.1.  Normative References
  - contents:
    - "6.2.  Informative References\n   [SHA2-2]     NIST, \"Descriptions of SHA-256,
      SHA-384, and SHA-512\",\n                2001 MAY,\n                <http://csrc.nist.gov/cryptval/shs/sha256-384-512.pdf>.\n"
    title: 6.2.  Informative References
  title: 6.  References
- contents:
  - "Authors' Addresses\n   Scott G. Kelly\n   Aruba Networks\n   1322 Crossman Ave\n
    \  Sunnyvale, CA  94089\n   US\n   EMail: scott@hyperthought.com\n   Sheila Frankel\n
    \  NIST\n   Bldg. 222 Room B264\n   Gaithersburg, MD  20899\n   US\n   EMail:
    sheila.frankel@nist.gov\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document
    is subject to the rights, licenses and restrictions\n   contained in BCP 78, and
    except as set forth therein, the authors\n   retain all their rights.\n   This
    document and the information contained herein are provided on an\n   \"AS IS\"
    basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE INTERNET ENGINEERING
    TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE
    ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
