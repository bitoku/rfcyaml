- title: __initial_text__
  contents:
  - "                Architecture for Information Brokerage\n                    \
    \    in the ACTS Project GAIA\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo introduces a domain and supplier independent generic\n\
    \   architecture for information brokerage, designed as part of the ACTS\n   project\
    \ GAIA (Generic Architecture for Information Availability).\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   Today a huge number of goods and services are offered on\
    \ the\n   electronic market by a large, and ever-increasing, number of\n   suppliers.\
    \  However, there is still no efficient way for a customer\n   to find a product\
    \ or information, he/she is interested in and a\n   supplier that can provide\
    \ that product.  Customers and suppliers\n   already can not deal with the quantity\
    \ of available information by\n   themselves.  The high heterogeneity of existing\
    \ protocols, formats,\n   and underlying networks also limits development of the\
    \ electronic\n   market.\n   This results in a demand for brokerage systems that\
    \ can work as\n   intermediary entities between customers and content suppliers.\n\
    \   Brokerage systems assist a customer during the trading process and\n   hide\
    \ the heterogeneity and distribution of information from the\n   customer.  The\
    \ design of domain and supplier independent generic\n   architecture for such\
    \ brokerage systems is an objective of the\n   project GAIA (Generic Architecture\
    \ for Information Availability).\n   GAIA received part funding from the EU ACTS\
    \ programme for Research\n   and Technological Development.  The GAIA brokerage\
    \ system allows a\n   customer to\n   - search for a particular \"product\" (information,\
    \ content or\n     services) that he/she is interested in\n   - locate the product,\
    \ i.e. find supplier(s) from whom the product is\n     available\n   - order the\
    \ product from the supplier\n   - receive delivery of the product by digital means\n\
    \   All these actions are carried out by the broker in response to\n   requests\
    \ from the customer.  Broker services are accessible to the\n   customer through\
    \ the unified user interface.  The customer system\n   does not have to support\
    \ all the protocols involved in the trading\n   process.\n   Full specification\
    \ of the GAIA Architecture is available in the GAIA\n   Standard [1].  The GAIA\
    \ Standard includes a description of the GAIA\n   Reference Model, GAIA Functional\
    \ Architecture, GAIA Standard\n   Profiles, and specification of the GAIA interfaces.\n\
    \   This memo does not aim to include the whole text of the GAIA\n   Standard,\
    \ but to present the basic ideas and concepts of this\n   standard.\n   The structure\
    \ of this memo follows the structure of the GAIA\n   Standard:\n   1.  The GAIA\
    \ Reference Model provides a common basis for the\n       description and specification\
    \ of brokerage systems, including the\n       GAIA system.\n   2.  The GAIA Functional\
    \ Architecture defines functional elements of\n       the GAIA Broker, their roles\
    \ and relationships.\n   3.  The GAIA Brokerage System Interfaces describes internal\
    \ and\n       external interfaces of the GAIA brokerage system.\n   4.  The GAIA\
    \ Standard Profiles specifies mandatory and optional\n       profiles to which\
    \ brokerage systems may conform.\n"
- title: 2.  The GAIA Reference Model
  contents:
  - "2.  The GAIA Reference Model\n   The Generic Architecture for Information Availability\
    \ (GAIA)\n   Reference Model outlines the operations and actors involved in\n\
    \   finding, ordering, and delivering physical and digital objects and\n   services\
    \ (\"Products\") in a global brokered distributed information\n   environment.\
    \  It provides an overall view of the GAIA environment,\n   and illustrates the\
    \ respective roles of and relationships between its\n   components.  Further work\
    \ on standards and frameworks for individual\n   components of the GAIA environment\
    \ uses the model and terminology\n   provided by the Reference Model.\n   The\
    \ GAIA environment is a collection of actors and functions that are\n   combined\
    \ to support a procedure for information and services\n   discovery, order, and\
    \ delivery.  The actors play roles in the\n   procedure, including initiation\
    \ and execution of the Actions which\n   are combined to make up the overall transaction.\
    \  The GAIA\n   architecture provides a standardised and widely applicable framework\n\
    \   for the provision and implementation of the brokered search and\n   retrieve\
    \ applications in a large-scale networked environment.\n"
- title: 2.1.  GAIA Roles
  contents:
  - "2.1.  GAIA Roles\n   The GAIA model considers three principal roles that can\
    \ be played by\n   the GAIA actors.  These are the Customer, the Broker and the\n\
    \   Supplier.  These Roles are shown in Figure 1 below.  It also\n   considers\
    \ a further class of active entities who play supporting\n   roles in the Actions.\
    \  This latter class is known as GAIA \"Helpers\"\n   and includes, for example,\
    \ authentication and payment.  The actors\n   are organisations and individuals\
    \ in the supply chain.  Every GAIA\n   actor plays at least one role at any given\
    \ time.\n"
- title: 2.1.1.  The Customer
  contents:
  - "2.1.1.  The Customer\n   The aim of the Customer is to obtain some Products or\
    \ information\n   about some Products.  The Customer role initiates the GAIA\n\
    \   transaction by requesting one or more GAIA Actions, and receives the\n   results\
    \ of the transaction.  The Customer may deal with actors\n   playing either of\
    \ the other two roles: the Broker or the Supplier.\n   These actors may themselves\
    \ play the role of the Customer while\n   requesting further services from other\
    \ Brokers.\n"
- title: 2.1.2.  The Broker
  contents:
  - "2.1.2.  The Broker\n   The Broker provides brokerage services to the Customer\
    \ and the\n   Supplier.  It responds to requests from the Customer to provide\n\
    \   Products, or information about Products.  The Products that the\n   Broker\
    \ supplies to the Customer may originate from one or more\n   Suppliers and/or\
    \ Brokers.  The Broker's primary role is to act as a\n   collector and collator\
    \ of information from a number of different\n   Suppliers, and to supply this\
    \ information to the Customer, thus\n   obviating the need for the Customer to\
    \ deal with a variety of\n   Suppliers.  A Broker can also be considered to act\
    \ on behalf of a\n   Supplier, distributing information about the Products available.\
    \  The\n   actor playing the role of the Broker may play the role of a Supplier\n\
    \   to a Customer or other Broker at the same time.  The Broker may play\n   the\
    \ role of a Customer while interacting with another Broker or with\n   a Supplier.\n"
- title: 2.1.3.  The Supplier
  contents:
  - "2.1.3.  The Supplier\n   The Supplier is the source of the Product supplied to\
    \ the Customer.\n   The Supplier provides the Broker with information about the\
    \ Product\n   that it can supply.  The Supplier may supply its Product directly\
    \ to\n   the Customer, or to the Broker for forwarding to the Customer.  An\n\
    \   actor playing the role of a Supplier may also play the role of a\n   Broker.\
    \  A Supplier may deal with a large number of Brokers and\n   Customers over a\
    \ number of GAIA transactions.\n"
- title: 2.1.4.  Helpers
  contents:
  - "2.1.4.  Helpers\n   A Helper is an application layer entity playing a supporting\
    \ role in\n   a GAIA transaction.  Helpers provide some service needed in the\n\
    \   supply chain, but outside the core functionality of the Broker.\n   Examples\
    \ include a global directory service, payment service, or\n   authentication service.\n\
    \   The authentication Helper is concerned with facilitating the\n   authentication\
    \ of one actor to another.\n   The payment Helper is concerned with supporting\
    \ a mechanism for\n   payment to one actor by another.\n   In any given GAIA transaction,\
    \ there will be one or more Customers\n   (usually one), one or more Brokers,\
    \ and one or more Suppliers.  A\n   description of the Product sought by the Customer\
    \ is provided by the\n   Customer to the Broker.  The Broker may involve other\
    \ Brokers in the\n   search for the Product.  When a Supplier of the Product is\
    \ discovered\n   by the Broker, this information is included in the response of\
    \ the\n   Broker to the Customer.  During the course of the Action, it may be\n\
    \   necessary to call upon the services of one or more Helpers.\n"
- title: 2.2.  GAIA Actions
  contents:
  - "2.2.  GAIA Actions\n   Each GAIA transaction is made up of one or more Actions.\
    \  These\n   Actions are requests by the Customer to the Broker or the Supplier\
    \ to\n   carry out some operation and to return a response.  Four Actions are\n\
    \   defined:\n   - Search\n   - Locate\n   - Order\n   - Deliver\n   These Actions\
    \ are shown in Figure 1.\n   +--------+    .   .    +--------+    .   .    +-----------+\n\
    \   |        |-- Search -->|        |-- Search -->|           |+\n   |       \
    \ |    :   :    |        |    :   :    |           ||\n   |        |-- Locate\
    \ -->|        |-- Locate -->|           ||\n   |Customer|    :   :    | Broker\
    \ |    :   :    |Supplier(s)||\n   |        |-- Order --->|        |-- Order --->|\
    \           ||\n   |        |    :   :    |        |    :   :    |           ||\n\
    \   |        |<- Deliver --|        |<- Deliver --|           ||\n   +--------+\
    \    :   :    +--------+    :   :    +-----------+|\n                 :   :  \
    \                :   :     +-----------+\n                Helpers            \
    \    Helpers\n             <Authentication> <Payment> <Security>\n   Figure 1\
    \ GAIA Roles and Actions\n"
- title: 2.2.1.  Search
  contents:
  - "2.2.1.  Search\n   The Search Action is carried out when the Customer asks the\
    \ Broker to\n   find some information on its behalf.  To do this, the Customer\n\
    \   provides the Broker with some description of the Product it requires.\n  \
    \ On the basis of this description, the Broker carries out a search on\n   behalf\
    \ of the Customer and returns the result.  The result of a\n   Search Action is\
    \ a set of unique identifiers referencing the Products\n   matching the description\
    \ provided by the Customer.\n"
- title: 2.2.2.  Locate
  contents:
  - "2.2.2.  Locate\n   The Locate Action is carried out when the Customer asks the\
    \ Broker to\n   provide it with information regarding the location and source\
    \ of some\n   Product.  To allow the Broker to do this, the Customer provides\
    \ an\n   unambiguous identification of the Product, which may be the result of\n\
    \   a Search Action.  The Broker returns information to the Customer\n   about\
    \ a source or sources for the Product.  These data include the\n   Terms of Availability\
    \ information such as available methods of\n   delivery, time of delivery, costs,\
    \ etc.  However, this information\n   can not be considered final since some special\
    \ terms and conditions\n   may apply, e.g. discounts for some categories of Customers.\
    \  The\n   final version of the Terms of Availability is established during the\n\
    \   negotiation phase of the Order Action.\n"
- title: 2.2.3.  Order
  contents:
  - "2.2.3.  Order\n   The Order Action is carried out when the Customer asks the\
    \ Broker to\n   obtain a Product on its behalf, or asks the Supplier to sell the\n\
    \   Product directly to the Customer.  To enable an Order, the Customer\n   provides\
    \ the Broker/Supplier with Product source information, which\n   may be a result\
    \ of a Locate Action.  The Order Action consists of a\n   negotiation phase and\
    \ (possibly) a purchase phase.  During the\n   negotiation phase the Customer\
    \ obtains the quotation that contains\n   the final version of the Terms of Availability\
    \ for the (batch of)\n   Products he is considering purchasing.  If the Customer\
    \ finds these\n   conditions satisfactory, he commits to the purchase.  Alternatively,\n\
    \   if the Broker or Supplier supports telepresence services for the\n   human\
    \ interaction with the Supplier or Broker representatives, these\n   may be used\
    \ during the negotiations.\n"
- title: 2.2.4.  Deliver
  contents:
  - "2.2.4.  Deliver\n   The Deliver Action is carried out when the Broker provides\
    \ the\n   Customer with some requested Product.  The Product may be\n   information,\
    \ some physical object, or metadata.  The Deliver Action\n   may be in response\
    \ to an Order Action, a Search Action, or a Locate\n   Action.\n   While the Actions\
    \ presented in this section may logically be taken to\n   form an integrated sequence,\
    \ this is not necessarily the case.\n   Actions may take place independently,\
    \ rather than as a part of a\n   four-Action whole.  For example, Order and Deliver\
    \ Actions may occur\n   on the basis of information obtained by the Customer using\
    \ some other\n   mechanism than GAIA Search and Locate Actions.\n"
- title: 2.3.  GAIA Helper Events
  contents:
  - "2.3.  GAIA Helper Events\n   During any of the GAIA Actions outlined above, it\
    \ may be necessary to\n   carry out some supporting activity.  These activities\
    \ are called GAIA\n   Helper events.  They include, for example, authentication\
    \ and\n   payment.  The Helper entities are involved in the GAIA events to\n \
    \  provide services, additional to the GAIA Actions, to the GAIA actors.\n   Authentication\n\
    \   In order to verify the identity of one GAIA actor to another, an\n   authentication\
    \ exchange may need to take place.  This may occur\n   during any of the GAIA\
    \ Actions.  The manner or method of\n   authentication is outside the scope of\
    \ this document.\n   Payment\n   It may be necessary for payment to take place\
    \ during a GAIA\n   transaction.  In this situation, one GAIA actor pays one or\
    \ more\n   other GAIA actors.  The manner or method of payment is outside the\n\
    \   scope of this document.\n   Security\n   As part of any GAIA Action, it may\
    \ be necessary to carry out some\n   security operations, such as encryption of\
    \ data, verification of\n   source and content integrity of Product, or digital\
    \ signature of some\n   data entity or entities.  The particular security services\
    \ and\n   mechanisms which may be required, or the manner in which they may be\n\
    \   provided, is outside the scope of this document.\n"
- title: 3.  The GAIA Functional Architecture
  contents:
  - '3.  The GAIA Functional Architecture

    '
- title: 3.1.  The Concept
  contents:
  - "3.1.  The Concept\n   The GAIA Functional Architecture decomposes the overall\
    \ functionality\n   of the GAIA Broker into a number of components and describes\
    \ the\n   roles and relationships of these components, and the manner in which\n\
    \   they interoperate.\n   To work in a heterogeneous environment the GAIA Functional\n\
    \   Architecture introduces three levels of abstract elements of the\n   Broker:\
    \ the Kernel, Functional Unit Managers (FUMs), and Functional\n   Units (FUs)\
    \ (see Figure 2).\n       GAIA Broker:\n       ------------\n                \
    \      [  Kernel  ]                Kernel\n                        /       \\\
    \                 level\n                       /         \\\n        [Functional\
    \ Unit]     [Functional Unit]   Technology-independent\n        [    Manager \
    \   ]     [    Manager    ]   action-dependent\n             /    \\         \
    \        /    \\        level\n            /      \\               /      \\\n\
    \    [Functional][Functional] [Functional][Functional]  Technology\n    [Unit\
    \      ][Unit      ] [Unit      ][Unit      ]  dependent\n                   \
    \                                    level\n    Figure 2 Levels of the architecture\n\
    \   Functional Units are the technology dependent parts of the\n   architecture.\
    \  They perform required transactions in terms of a\n   particular protocol. \
    \ All FUs are covered by a technology independent\n   interface.  FUs are grouped\
    \ according to the trading action they\n   participate in, e.g. search FUs or\
    \ locate FUs.  Each group of FUs is\n   governed by the corresponding Functional\
    \ Unit Manager.\n   Functional Unit Managers contain technology independent functions\
    \ for\n   particular actions.  To use a particular technology an FUM uses the\n\
    \   services of attached FUs.  There may be several FUs associated with\n   an\
    \ FUM, allowing the FUM to operate in different technology contexts.\n   There\
    \ is one FUM in the system for every area of functionality, e.g.\n   search, locate,\
    \ and order.  The Kernel is responsible for managing\n   the activity of different\
    \ FUMs (corresponding to different actions)\n   and synchronising events between\
    \ them.\n   The GAIA Functional Architecture establishes relationships between\n\
    \   the existing technologies (standards and protocols) that are combined\n  \
    \ in the GAIA Standard, in the context of a brokerage system.  It is to\n   be\
    \ expected that new technologies will evolve which will be viable\n   alternatives\
    \ to those selected.  The abstract and modular nature of\n   the Functional Architecture\
    \ allows the replacement of one technology\n   with a new one without disruption\
    \ to the rest of the brokerage\n   system.\n"
- title: 3.2.  Functional Units
  contents:
  - "3.2.  Functional Units\n   The brokerage system provides a number of services\
    \ to its users.\n   These services are supported by the functions of the brokerage\n\
    \   system.  These include, for example,\n   - searching\n   - ordering\n   -\
    \ payment\n   Each of these functions can be provided by a number of different\n\
    \   candidate technologies.  However, the operations that are required to\n  \
    \ be carried out remain the same.  Regardless of the selected\n   technologies,\
    \ the functional requirements do not change.  The\n   required operations are\
    \ described in terms of abstract primitives,\n   which can be mapped to the protocol\
    \ instructions of the technology\n   selected to support the function.  A mapping\
    \ component, called a\n   Functional Unit (FU), is defined for each candidate\
    \ technology, and\n   converts calls to abstract primitives into protocol instructions.\n\
    \   The FU acts as an adaptor between its particular technology and the\n   rest\
    \ of the brokerage system.\n   Functional Units are defined for each candidate\
    \ technology that can\n   be used to fulfil a particular functional need of the\
    \ brokerage\n   system.  A Functional Unit accepts abstract primitive invocations,\n\
    \   and maps them to calls to the particular technology to which it is\n   dedicated.\
    \  The results of these calls are translated into the\n   corresponding abstract\
    \ primitives and returned by the FU, as shown in\n   Figure 3.\n             *\
    \ The rest of the Broker *\n                    ^\n                    |  -abstract\
    \ primitives\n                    v\n                 +------------+\n       \
    \          | Functional |\n                 |    Unit    |\n                 +------------+\n\
    \                    ^\n                    |  -technology-specific commands\n\
    \                    v\n             * Technology functions *\n   Figure 3 GAIA\
    \ Functional Unit\n"
- title: 3.3.  Functional Unit Managers
  contents:
  - "3.3.  Functional Unit Managers\n   As noted above, a number of different candidate\
    \ technologies can be\n   used to fulfil a particular functional requirement of\
    \ the brokerage\n   system.  Depending on the details of the GAIA transaction\
    \ (underlying\n   network, Customer system capabilities, etc.), different technologies\n\
    \   may be more useful during different transactions.  As a result, each\n   candidate\
    \ technology has its own Functional Unit, which is invoked\n   when that particular\
    \ technology is required.\n   A number of different Functional Units can exist\
    \ which fulfil the\n   same functional requirement of the brokerage system.  To\
    \ select the\n   most appropriate FU (and technology), the brokerage system needs\
    \ to\n   know which is the most useful at any particular time; in general this\n\
    \   is the technology supported by the target Supplier system.  This is\n   the\
    \ responsibility of the Functional Unit Manager, or FUM.  Each\n   function of\
    \ the brokerage system has a single FUM, which is invoked\n   using abstract primitives\
    \ by the Broker Kernel.  This FUM selects the\n   most appropriate of the candidate\
    \ technologies, and calls the\n   corresponding FU (see Figure 4).\n   The interface\
    \ between the FUM and the corresponding FUs is defined\n   for every FUM in an\
    \ open, platform independent, and programming\n   language independent manner.\
    \  These interfaces do not depend on any\n   particular technology.  It allows\
    \ for configuring the set of\n   technologies supported by the Broker, by attaching\
    \ different subsets\n   of FUs.  If a new technology is to be supported by a Broker,\
    \ a new FU\n   implementing this technology can be created according to the\n\
    \   specification of the interface, and attached to the corresponding\n   FUM.\n\
    \             +--------------------------------------+\n             |       Functional\
    \ Unit Manager        |\n             +--------------------------------------+\n\
    \                    ^                       ^\n                    | -abstract\
    \ primitives- |\n                    v                       v\n             \
    \  +------------+        +------------+\n               | Functional |       \
    \ | Functional |\n               |    Unit    |        |    Unit    |\n      \
    \         +------------+        +------------+\n                ^            \
    \                    ^\n                | -technology-specific commands- |\n \
    \               v                                v\n              * Technology\
    \ *          * Technology *\n              * functions  *          * functions\
    \  *\n   Figure 4 Functional Unit Manager\n"
- title: 3.4.  The Kernel
  contents:
  - "3.4.  The Kernel\n   The Kernel of the brokerage system acts as a bus for the\
    \ transmission\n   of abstract primitives between FUMs.  Each FUM imports a set\
    \ of\n   abstract primitives representing those services which the FUM expects\n\
    \   to receive from some other part of the system.  The services that the\n  \
    \ FUM is prepared to provide to other elements of the brokerage system\n   are\
    \ presented in the form of exported abstract primitives.  All these\n   abstract\
    \ primitives are imported from, and exported to, the Kernel\n   (see Figure 5).\n\
    \   The Kernel is also responsible for synchronisation of different\n   actions\
    \ within a transaction and for maintaining a common context\n   between actions.\n\
    \             +-------------------------------------+\n             |        \
    \   Broker Kernel             |\n             +-------------------------------------+\n\
    \                  ^            ^              ^\n                  | -abstract-\
    \ | -primitives- |\n                  v            v              v\n        \
    \      +-------+     +-------+     +-------+\n              |  FUM  |     |  FUM\
    \  |     |  FUM  |\n              +-------+     +-------+     +-------+\n   Figure\
    \ 5 Broker Kernel\n"
- title: 3.5.  Description of FUMs
  contents:
  - "3.5.  Description of FUMs\n   The core activities of the brokerage system include:\n\
    \   1.  searching for Products that fit a user description\n   2.  sourcing Products\
    \ the identification of which is known\n   3.  allowing users to order Products\n\
    \   4.  delivering information in item format\n   5.  delivering information as\
    \ a continuous media stream\n   6.  providing a user interface to the brokerage\
    \ services\n   7.  alerting users as to the availability of information\n   8.\
    \  interacting with external directory services\n   9.  authentication of other\
    \ actors\n   10.  payment operations\n   Each of these activities is carried out\
    \ by the corresponding FUM as\n   described below and shown in Figure 6.\n   Search\
    \ FUM\n   The Search FUM accepts requests to carry out a search for Products\n\
    \   that fit a particular user description.  It returns lists of\n   identifiers\
    \ of Products that fit the description.\n   Locate FUM\n   The Locate FUM accepts\
    \ Product identifiers and discovers where they\n   may be obtained.  It returns\
    \ lists of Suppliers and locations for the\n   Product.\n   Order FUM\n   The\
    \ Order FUM manages negotiations between a Customer and a Supplier\n   in order\
    \ that agreement may be reached on the terms of availability\n   of a particular\
    \ Product or group of Products.  Following the\n   negotiation phase, the Order\
    \ FUM accepts purchase commitments from\n   the Customer and forwards them to\
    \ the Supplier.  It returns a\n   notification of the status of the Order Action.\n\
    \                        The GAIA Broker:\n                        ----------------\n\
    \   (Customer))   (Alerting))  (  DS   ))  (Auth))  (Payment))\n   (   FUs  ))\
    \   (   FUs  ))  (  FUs  ))  ( FUs))  (  FUs  ))\n   (e.g.HTTP))   (e.g. SMS))\
    \  (eg LDAP))  (    ))  (e.g.SET))\n       \\/            \\/           \\/  \
    \      \\/        \\/\n   [Customer]     [Alerting]    [ DS  ]  [ Auth ]  [Payment]\n\
    \   [  FUM   ]     [  FUM   ]    [ FUM ]  [  FUM ]  [  FUM  ]\n       |      \
    \        |            |         |         |\n    +----------------------------------------------------------+\n\
    \    |                  Broker Kernel                           |\n    +----------------------------------------------------------+\n\
    \       |             |            |            |            |\n   [ Search ]\
    \    [ Locate ]    [ Order ]   [ Stream ]   [Discrete]\n   [  FUM   ]    [  FUM\
    \   ]    [  FUM  ]   [Delivery]   [Delivery]\n   [        ]    [        ]    [\
    \       ]   [  FUM   ]   [  FUM   ]\n       /\\            /\\           /\\ \
    \          /\\           /\\\n   ( Search  ))  ( Locate  ))  (  Order   ))  (\
    \ SD   ))  ( DD   ))\n   (   FUs   ))  (   FUs   ))  (  FUs     ))  ( FUs  ))\
    \  ( FUs  ))\n   (eg Z39.50))  (eg Z39.50))  (eg ISO ILL))  (eg RTP))  (eg FTP))\n\
    \   Figure 6 GAIA Functional Architecture\n   Discrete Delivery FUM\n   The Discrete\
    \ Delivery FUM manages the delivery of discrete items to\n   the Customer.\n \
    \  Stream Delivery FUM\n   The Stream Delivery FUM manages the delivery of real-time\
    \ multimedia\n   data streams to the Customer.\n   Customer FUM\n   The Customer\
    \ FUM provides an interface to support the Customer's\n   systems interaction\
    \ with the brokerage system.\n   Alerting FUM\n   The Alerting FUM notifies Customers\
    \ about changes that may interest\n   them.\n   Directory Services FUM\n   The\
    \ Directory Services FUM provides an interface between an external\n   directory\
    \ service and the brokerage system.\n   Authentication FUM\n   The Authentication\
    \ FUM provides a mechanism that allows a user to\n   prove his identity to the\
    \ brokerage system.\n   Payment FUM\n   The Payment FUM provides a mechanism for\
    \ payment from one actor to\n   another.\n"
- title: 4.  GAIA Brokerage System Interfaces
  contents:
  - "4.  GAIA Brokerage System Interfaces\n   This Chapter describes the internal\
    \ and external interfaces of the\n   GAIA brokerage system.\n"
- title: 4.1.  Internal Interfaces
  contents:
  - "4.1.  Internal Interfaces\n   The definition of communication between functional\
    \ components within\n   the GAIA Broker is based on the OMG CORBA model [2]. \
    \ Interfaces\n   between components are defined in the IDL language specified\
    \ by OMG.\n   Interface calls are passed between components by the Object Request\n\
    \   Broker (ORB).\n   The advantage of this approach is that the specifications\
    \ of the\n   interfaces are platform and programming language independent.  These\n\
    \   interfaces can be implemented using different programming languages\n   on\
    \ different platforms.  All necessary conversions during interface\n   invocations\
    \ are transparently performed by an ORB.  The CORBA model\n   also allows installing\
    \ different functional components of the GAIA\n   Broker on different computers\
    \ connected by a network.  Interface\n   calls will be transferred over the network\
    \ by an ORB transparently\n   for the application.\n   The specification of the\
    \ interfaces between the Kernel and FUMs and\n   between each FUM and corresponding\
    \ FUs is presented in the GAIA\n   Standard [1].\n"
- title: 4.2.  External protocols
  contents:
  - "4.2.  External protocols\n   The GAIA Broker can use existing protocols to communicate\
    \ with other\n   actors.  For example, it can use HTTP for interactions with\n\
    \   Customers, Z39.50 for search, etc.  As described in the GAIA\n   Functional\
    \ Architecture, support for particular technologies is\n   provided by FUs.  A\
    \ set of supported protocols can be extended by\n   attaching the corresponding\
    \ new FUs to a Broker.  The GAIA Broker can\n   support several protocols for\
    \ each action.  The FUMs will select the\n   most appropriate protocol for a transaction.\
    \  The more protocols\n   supported by the Broker, the better service it can provide\
    \ to\n   Customers and Suppliers.\n   The GAIA Standard does not limit the set\
    \ of protocols supported by\n   the Broker.  However, for the purpose of interoperability,\
    \ it\n   specifies several GAIA profiles.  These profiles define a common\n  \
    \ subset of protocols (and a common range of protocol parameters) that\n   Brokers\
    \ are encouraged to support in order to make communication\n   between GAIA Brokers,\
    \ and with GAIA-aware Suppliers and Customers,\n   possible.\n   Existing protocols\
    \ are not the only way to contact the GAIA Broker.\n   The GAIA interfaces have\
    \ been designed as a generalisation of\n   existing interfaces and protocols,\
    \ so they provide more functionality\n   than any particular protocol.  To give\
    \ access to the full\n   functionality of the GAIA Broker, the GAIA Standard allows\
    \ users\n   (Customers and other Brokers) to directly use the CORBA-defined\n\
    \   Customer interface of the GAIA Broker (interface between the Customer\n  \
    \ FUM and FUs) as shown in Figure 7.  In this case, the Customer system\n   gets\
    \ access to the Customer interface of the Broker using the service\n   of an underlying\
    \ ORB, and can request operations by calling the\n   corresponding methods of\
    \ the interface.  The Customer interface of\n   the GAIA Broker is specified in\
    \ the GAIA Standard [1].\n   Where Customer and Supplier systems are not CORBA-aware,\
    \ they can\n   communicate with a GAIA Broker using existing protocols.  If,\n\
    \   however, they can use the service of an ORB, they are encouraged to\n   communicate\
    \ with a Broker by connecting to its Customer interface.\n   This method allows\
    \ for avoiding convergence between a particular\n   protocol and the GAIA interface.\
    \  The former method makes\n   interactions with all existing types of Customers\
    \ and Suppliers\n   possible using existing and widespread protocols.  The later\
    \ method\n   has been designed to achieve maximum functionality by using native\n\
    \   GAIA methods for communication with Customers and Suppliers.\n           \
    \                   +----------------+\n                              |Broker\
    \          |\n                              |                |\n             \
    \                 |   --------     |\n      +-----------+           |  [ Kernel\
    \ ]    |\n      |  Broker   |           |   --------     |\n      |    or    \
    \ |           |  [Customer]    |\n      | Customer  |           |  [  FUM   ]\
    \    |\n      |           |           |  ========== <-GAIA Customer\n      | \
    \       *  |           |  *       *     | \\interface\n      | { O R B *}* * *\
    \ * * * *{* O  R  B * }  |\n      +-----------+    iiop   |            *   | \
    \        +----------+\n                              |     (Customer) |      \
    \   | Customer |\n                              |     (   FU   ) |         | \
    \         |\n                              +------------I---+         +----I-----+\n\
    \                                            \\      HTTP      /\n           \
    \                                  - - -      - - -\n      Figure 7 External protocols\
    \ and the GAIA Customer interface\n"
- title: 5.  GAIA Standard Profiles
  contents:
  - "5.  GAIA Standard Profiles\n   The GAIA Standard defines a number of profiles,\
    \ which a Broker may\n   support in order to achieve interoperability with other\
    \ GAIA actors\n   (Customers, Suppliers and other Brokers).  The complexity of\
    \ the\n   profile chosen by a Broker depends on the level and type of service\n\
    \   which the Broker wishes to deliver in a GAIA-conformant manner.  The\n   higher\
    \ the level of service that a Broker provides to a Customer, and\n   the greater\
    \ the length of the supply chain which the Broker wishes to\n   support, the more\
    \ advanced the profile and/or the greater the number\n   of extension modules\
    \ the Broker must support.\n"
- title: 5.1.  Supply Chains
  contents:
  - "5.1.  Supply Chains\n   The GAIA profile definition approach is based on the\
    \ possible types\n   of supply chain that a brokerage system can be a part of.\n\
    \   The operations of a brokerage system can be broken into three\n   categories:\n\
    \   - interactions with the Customer\n   - interactions with other Brokers\n \
    \  - interactions with Suppliers\n   The first and last of these occur at the\
    \ two ends of a supply chain,\n   while interbroker operations take place at other\
    \ points in the chain.\n   The supply chain may take a number of different forms:\n\
    \   - a minimal chain, where the Customer and the Broker are the ends of\n   \
    \  the chain and there are no intervening links.  In this case, the\n     Broker\
    \ plays the role of Supplier to the Customer.\n   - a three-piece chain, where\
    \ the Broker deals with the Customer and\n     the Supplier but not with any other\
    \ Broker.\n   - a longer chain, with one or more interbroker operations.\n   \
    \   Minimal Supply Chain:\n          +--------+         +-------------+\n    \
    \      |Customer| <=====> | Broker      |\n          +--------+         |(as Supplier)|\n\
    \                             +-------------+\n      3-piece Supply Chain:\n \
    \         +--------+       +--------+       +--------+\n          |Customer| <===>\
    \ | Broker | <===> |Supplier|\n          +--------+       +--------+       +--------+\n\
    \      Longer Supply Chain:\n          +--------+       +--------+   +--------+\
    \       +--------+\n          |Customer| <===> | Broker |<=>| Broker | <===> |Supplier|\n\
    \          +--------+       +--------+   +--------+       +--------+\n      Figure\
    \ 8 Supply Chains\n"
- title: 5.1.1.  Minimal Supply Chains
  contents:
  - "5.1.1.  Minimal Supply Chains\n   As discussed in the GAIA Reference Model, a\
    \ GAIA transaction is\n   composed of a number of actions, such as search, order,\
    \ and delivery.\n   Each transaction is initiated by the Customer who makes a\
    \ request to\n   the Broker.  In the event that the Broker is able to fulfil the\n\
    \   request, the transaction involves no other actors.\n   In this simple case,\
    \ the GAIA transaction involves the Customer and\n   the Broker.  The only protocol\
    \ which needs to be standardised is that\n   between the Customer and the Broker.\
    \  This is specified in the GAIA\n   Standard Minimal profile below.\n"
- title: 5.1.2.  Longer Supply Chains
  contents:
  - "5.1.2.  Longer Supply Chains\n   In the event that the Broker is not able to\
    \ fulfil a request, the\n   action may be propagated on to other Brokers, with\
    \ the original\n   Broker playing the Customer role.  Each of these Brokers may\
    \ in turn\n   propagate the request if they cannot fulfil it.\n   Eventually,\
    \ if the action is successful, a Supplier will be found who\n   can fulfil the\
    \ request.  The supply chain is thus made up a single\n   Customer, one or more\
    \ Suppliers, and one or more Brokers.\n   In order to propagate an action from\
    \ one Broker to another, a\n   standardised communication protocol must be defined\
    \ for broker-broker\n   interaction.  This is specified in the Basic profile,\
    \ below.  This\n   profile is based on CORBA.\n   Supplier and Brokers, however,\
    \ are not obliged to support the Basic\n   profile of the GAIA Standard.  They\
    \ may instead use another, more\n   traditional, protocol such as Z39.50 for discovery,\
    \ or ISO ILL for\n   ordering.  The Extension Modules to the GAIA Standard specify\
    \ the\n   profiles to be used for various brokerage functions.\n"
- title: 5.2.  Introduction to the GAIA Standard Profiles and Modules
  contents:
  - "5.2.  Introduction to the GAIA Standard Profiles and Modules\n   The profiles\
    \ specified are\n   - The Minimal profile, which is the very least to which a\
    \ GAIA Broker\n     must conform\n   - The Basic Profile, which allows inter-broker\
    \ communication\n   - A number of Extension Modules, which allow the Broker to\
    \ provide\n     various services, and to interoperate with Suppliers, Brokers\
    \ and\n     Customers using protocols specified in the modules\n   - A set of\
    \ Interface Modules, that defines which particular\n     Functional Unit CORBA\
    \ interfaces are supported by the Broker\n   Each Broker must conform at least\
    \ to the Minimal profile to provide a\n   web-based user interface.  In addition,\
    \ to take part in inter-broker\n   communications, the Basic profile is recommended.\
    \  For interaction\n   with non-CORBA-aware entities, and for the use of advanced\
    \ services,\n   there are other modules of the standard to which the Broker may\n\
    \   conform.  These are denoted \"Extension Modules\", and they\n   characterise\
    \ the protocols and standards in a particular area of\n   functionality.  A Broker\
    \ can choose an appropriate set of Extension\n   Modules to conform to according\
    \ to the functionality it wishes to\n   achieve.\n   The GAIA Standard specifies\
    \ all interfaces between FUM and FUs for\n   the GAIA Broker.  However, it would\
    \ be too much to require every\n   Broker to implement all of them.  The GAIA\
    \ Standard decomposes all\n   interfaces into a number of Interface Modules. \
    \ A Broker can choose a\n   subset of Interface Modules that are more important\
    \ in its area of\n   operation, and implement interfaces defined in these modules.\
    \  These\n   interfaces are important only inside the broker system and do not\n\
    \   play any role in communication with other GAIA actors.  However, a\n   declaration\
    \ of supported interfaces is important for the\n   administrator to find the areas\
    \ in which the functionality of the\n   Broker can be extended by attaching GAIA-conformant\
    \ FUs.\n"
- title: 5.3.  Minimal Profile
  contents:
  - "5.3.  Minimal Profile\n   The minimum functionality that a Broker must support\
    \ will allow it to\n   provide services to the Customer as a part of a minimal\
    \ chain.  In\n   this case, what is required of the Broker is simply a user interface\n\
    \   for the Customer.  Any further operations take place within the\n   Broker,\
    \ and so do not come within the scope of the standard.\n   The Minimal profile\
    \ requires the Broker to implement a user interface\n   based on the HTTP 1.1\
    \ protocol, defined in RFC 2068 [3], and HTML\n   2.0, defined in RFC 1866 [4].\
    \  It means that a Customer should be\n   able to access the basic functionality\
    \ of the GAIA Broker by using a\n   HTTP 1.1 and HTML 2.0 conformant web-browser.\n\
    \   It should be possible for Customers to locate a GAIA Broker.  Thus a\n   GAIA\
    \ Broker should be registered in a Directory Service using a\n   schema specified\
    \ in the GAIA Standard [1].\n   +-------------------------------------------------+\n\
    \   | Minimal Profile                                 |\n   +------------------------+------------------------+\n\
    \   | Customer               | HTTP 1.1 (server),     |\n   |                \
    \        | HTML 2.0               |\n   +------------------------+------------------------+\n"
- title: 5.4.  Basic Profile
  contents:
  - "5.4.  Basic Profile\n   While the minimal functionality is sufficient to allow\
    \ a Broker to\n   function, an important aspect of any GAIA Broker functionality\
    \ is\n   dealing with other Brokers.  The goal of the Basic profile is to\n  \
    \ achieve federation between Brokers.  Every GAIA Broker can use the\n   service\
    \ of other GAIA Brokers in order to fulfil a request of a\n   Customer.  That\
    \ Broker in turn can use the service of the third GAIA\n   Broker.  So every request\
    \ can be chained by several Brokers.  This\n   extends the abilities of every\
    \ GAIA action (Search, Locate, Order,\n   etc.).  Chained transactions are particularly\
    \ important in the\n   discovery phase of a transaction, where a Broker unable\
    \ to fulfil a\n   particular information requirement passes on the search to another\n\
    \   Broker.\n   The Basic profile requires the Broker to implement the GAIA Customer\n\
    \   interface defined in terms of CORBA.  This interface is described in\n   more\
    \ detail in Section 4.2 above.  The Basic profile also requires\n   the Broker\
    \ to implement interface requestor procedures, i.e. to be\n   able to connect\
    \ to the Customer interfaces of other Brokers.  The ORB\n   used by the Broker\
    \ should be conformant to the CORBA 2.0\n   specification [2] and use IIOP protocol\
    \ for inter-ORB communications\n   [2].\n   A full specification of the GAIA Customer\
    \ interface is presented in\n   the GAIA Standard [1].\n   A GAIA Broker should\
    \ be able to find other Brokers and Suppliers.  It\n   should also allow other\
    \ participants to find it.  Thus a GAIA Broker\n   should support a directory\
    \ service.  The Basic profile includes a\n   directory access protocol for this\
    \ purpose.  The actual choice of\n   protocol is not standardised, because the\
    \ choice does not influence\n   the success of the Broker's inter-operation with\
    \ other Brokers.  The\n   directory schema, which should be used, is specified\
    \ in the GAIA\n   Standard.\n   The Basic profile suggested for a Broker to allow\
    \ it to interoperate\n   with other GAIA Brokers is as follows.\n   +----------------------------------------------------------------+\n\
    \   | Basic Profile                                                  |\n   +------------------------+---------------------------------------+\n\
    \   | Customer               | GAIA Customer interface/IIOP (server) |\n   | Search\
    \ and Locate      | GAIA Customer interface/IIOP (client) |\n   |        (Discovery)\
    \     |                                       |\n   | Order                  |\
    \ GAIA Customer interface/IIOP (client) |\n   | Directory              | Some\
    \ directory access protocol,       |\n   |                        | such as LDAP\
    \                          |\n   +------------------------+---------------------------------------+\n"
- title: 5.5.  Extension Modules
  contents:
  - "5.5.  Extension Modules\n   In order to allow Brokers to interoperate with other\
    \ Brokers that do\n   not support the Basic profile, and to allow Brokers to deal\
    \ with\n   Suppliers and Customers who are not CORBA-aware, as well as to allow\n\
    \   delivery of items and data streams via the Broker, other open\n   technologies\
    \ are suggested as extensions to the Basic and Minimal\n   profiles.  These technologies\
    \ reflect the results of the technology\n   evaluation carried out as part of\
    \ the project GAIA.\n   The extra protocols are grouped into Extension Modules.\
    \  Support of\n   these Extension Modules is optional.  A Broker can choose an\n\
    \   appropriate set of Extension Modules to conform to according to the\n   functionality\
    \ it wishes to achieve.  There is one Extension Module\n   for each of the functional\
    \ areas which are not covered by the Basic\n   and Minimal Profiles, and also\
    \ one Extension Module for each of the\n   existing areas (Customer, Discovery,\
    \ and Order) to allow the use of\n   protocols other than GAIA abstract primitives.\n\
    \   The following Extension Modules are defined.\n   - Discovery Extension Module\n\
    \   - Order Extension Module\n   - Discrete Delivery Extension Module\n   - Stream\
    \ Delivery Extension Module\n   - Security Extension Module\n   - Payment Extension\
    \ Module\n   - Alerting Extension Module\n   - Customer Discovery Extension Module\n"
- title: 5.5.1.  Discovery Extension Module
  contents:
  - "5.5.1.  Discovery Extension Module\n   The Discovery Extension Module specifies\
    \ the technologies to be used\n   in searching for and locating products and services.\n\
    \   This Extension Module requires the Broker to support the client part\n   of\
    \ the Z39.50 protocol, as defined in [5].  The following subset of\n   the protocol\
    \ is required:\n   - Init, Search, and Present services\n   - GRS-1 record syntax\n\
    \   Z39.50 protocol PDUs should be carried using TCP/IP network\n   protocols.\n\
    \   +-------------------------------------------------+\n   | Discovery Extension\
    \ Module                      |\n   +------------------------+------------------------+\n\
    \   | Searching,             | Z39.50 (client)        |\n   | Locating       \
    \        |                        |\n   +------------------------+------------------------+\n"
- title: 5.5.2.  Order Extension Module
  contents:
  - "5.5.2.  Order Extension Module\n   The Order Extension Module specifies the protocols\
    \ to be used to\n   order products and services from a Supplier.\n   This Extension\
    \ Module requires the Broker to support all mandatory\n   services of the client\
    \ part of the ISO ILL protocol [6].  Basic\n   conformance criteria should be\
    \ adhered to.  ISO ILL protocol PDUs\n   should be carried using TCP/IP network\
    \ protocols.\n   +-------------------------------------------------+\n   | Order\
    \ Extension Module                          |\n   +------------------------+------------------------+\n\
    \   | Order                  | ISO ILL (client)       |\n   +------------------------+------------------------+\n"
- title: 5.5.3.  Discrete Delivery Extension Module
  contents:
  - "5.5.3.  Discrete Delivery Extension Module\n   The Discrete Delivery Extension\
    \ Module specifies the protocols and\n   standards to be used for the delivery\
    \ of on-line products and\n   services to the Customer.  There are two delivery\
    \ scenarios\n   considered\n   - Direct Supplier to Customer delivery\n     The\
    \ delivery may be a single-step operation, with the Supplier\n     supplying his\
    \ product directly to the Customer without the\n     involvement of any Broker\
    \ in the delivery process.  The Broker may\n     have acted to refer the Customer\
    \ to the Supplier.  In this case,\n     where the Broker is not involved in delivery,\
    \ the Discrete Delivery\n     Extension Module does not apply.\n   - Delivery\
    \ over a supply chain with one or more Brokers involved\n     In the event of\
    \ the Broker being the central link in a supply chain\n     of the form of Supplier-Broker-Customer,\
    \ the Broker will use the\n     protocols specified in the Discrete Delivery Extension\
    \ Module to\n     receive the product from the Supplier, and to provide the product\n\
    \     to the Customer.\n   The Discrete Delivery Extension Module requires the\
    \ Broker to provide\n   both FTP client and FTP server functionality [7], to allow\
    \ the Broker\n   to receive and to transmit files using FTP.\n   The Discrete\
    \ Delivery Extension Module also requires the GAIA Broker\n   to be able to accept\
    \ and to generate e-mail messages.  The e-mail\n   protocol specified is Internet\
    \ e-mail, based on the SMTP protocol [8]\n   and mail data formats specified in\
    \ RFC 822 [9].  This protocol is\n   sufficient for the creation, transmission,\
    \ and management of textual\n   e-mail messages.  However, for the transmission\
    \ of data files of\n   various types, extensions to the SMTP/RFC822 protocols\
    \ are required.\n   The mail extensions specified by the Discrete Delivery Extension\n\
    \   Module are based on MIME (Multipurpose Internet Mail Extensions),\n   defined\
    \ in RFCs 2045-2049 [10].  Thus a GAIA Broker must be able to\n   send and receive\
    \ \"simple\" SMTP/RFC822 mail, and also be able to deal\n   with RFC 2045-2049\
    \ MIME mail extensions.\n   For electronic document delivery the Discrete Delivery\
    \ Extension\n   Module requires the support of GEDI version 3.0.\n   +--------------------------------------------------------+\n\
    \   | Discrete Delivery Extension Module                     |\n   +------------------------+-------------------------------+\n\
    \   | FTP profile            | FTP (client+server)           |\n   | Email profile\
    \          | Internet e-mail [SMTP,RFC822] |\n   |                        |  \
    \ (receiver+sender),          |\n   |                        | MIME          \
    \                |\n   | Document delivery      | GEDI version 3.0           \
    \   |\n   +------------------------+-------------------------------+\n"
- title: 5.5.4.  Stream Delivery Extension Module
  contents:
  - "5.5.4.  Stream Delivery Extension Module\n   This Extension Module is intended\
    \ to support real-time delivery of\n   multimedia by the GAIA Broker.\n   Several\
    \ scenarios of stream delivery are considered.  A stream can be\n   delivered\n\
    \   - directly from a Supplier to a Customer\n     The Broker does not take part\
    \ in the stream delivery process; this\n     scenario is out of scope of this\
    \ standard.\n   - from a Supplier to a Customer via a Broker\n     The Broker\
    \ can add value to the stream delivery process by\n     implementing cache algorithms,\
    \ mixing streams, branching one stream\n     to several Customers, etc.\n   -\
    \ from a Broker to a Customer\n     The Broker can keep a small amount of multimedia\
    \ data (e.g. audio\n     examples) in its own database and deliver it to a Customer\
    \ upon\n     request.\n   The Stream Delivery Extension Module is recommended\
    \ to be implemented\n   by a Broker in order to provide the last two scenarios\
    \ of real-time\n   multimedia delivery.\n   The Stream Delivery Extension Module\
    \ requires the Broker to support\n   the following technologies:\n   - Compression\n\
    \     MPEG-2 Audio Layer 3, specified in ISO/IEC 13818-3 [11].  Only\n     support\
    \ of constrained parameter streams (CSPS) is required.\n   - Data transfer protocol\n\
    \     RTP protocol over UDP/IP, defined in RFC 1889 [12] (both client and\n  \
    \   server parts).  It is recommended that the full behaviour of an RTP\n    \
    \ application service entity (\"translator\" or \"mixer\") is supported\n    \
    \ but it is not required.\n   - Mapping\n     RTP payload format for MPEG Audio\
    \ (MPA), defined in RFC 2250 [13].\n   - Session control protocol\n     RTCP,\
    \ specified in RFC 1889 [12].\n   This profile provides delivery of high quality\
    \ audio over networks\n   with non-guaranteed quality of service such as the Internet.\n\
    \   +----------------------------------------------------+\n   | Stream Delivery\
    \ Extension Module                   |\n   +--------------------------+-------------------------+\n\
    \   | Compression              | MPEG-2 Audio Layer 3    |\n   | Data transfer\
    \            | RTP (client+server)     |\n   | Mapping                  | RFC\
    \ 2250                |\n   | Session control protocol | RTCP                \
    \    |\n   +--------------------------+-------------------------+\n"
- title: 5.5.5.  Security Extension Module
  contents:
  - "5.5.5.  Security Extension Module\n   The basic security services required for\
    \ GAIA are\n   - Authentication of users, remote servers (both as entity\n   \
    \  authentication and as bilateral peer-to-peer authentication),\n     senders\
    \ and receivers in network transactions, as well as the\n     authentication of\
    \ documents.  Authentication is required for three\n     situations: authentication\
    \ at the user workstation when starting\n     the session, authentication in a\
    \ local environment (client/server\n     authentication) and authentication in\
    \ a global, open network\n     (Internet).\n   - Confidentiality and integrity\
    \ of all resources transferred over the\n     network or handled locally at application\
    \ servers and user\n     workstations.\n   - Control of access to services and\
    \ resources.\n   - Non-repudiation of transactions, participants, and sensitive\n\
    \     documents.\n   This module allows a Broker to secure communications with\
    \ other\n   participants.  It provides channel security, authentication, and\n\
    \   certificate exchange.\n   The Security Extension Module specifies the following\
    \ protocols and\n   algorithms:\n   - Privacy, integrity, non-repudiation\n  \
    \   SSL v3.0 protocol, defined in [14].\n     PKCS #7, defined in [15].\n   -\
    \ Remote, client/server authentication\n     GSS v5, specified in RFC 1508 [16].\n\
    \   - Certification services\n     PKIX certification protocol, specified in [17].\n\
    \   +-----------------------------------------------------------+\n   | Security\
    \ Extension Module                                 |\n   +--------------------------------------+--------------------+\n\
    \   | Privacy, integrity, non-repudiation  | SSL v 3.0, PKCS #7 |\n   | Remote,\
    \ client/server authentication | GSS v5             |\n   | Certification services\
    \               | PKIX certification |\n   |                                 \
    \     |      protocol      |\n   +--------------------------------------+--------------------+\n"
- title: 5.5.6.  Payment Extension Module
  contents:
  - "5.5.6.  Payment Extension Module\n   This module allows a Broker to perform electronic\
    \ payment operations\n   with Customers, Suppliers, and other Brokers.  Such operations\
    \ may take\n   place at any stage during a GAIA transaction, during a Search,\
    \ Locate,\n   Order, or Deliver Action.\n   The GAIA Standard does not specify\
    \ the tariffing or charging model to\n   be used by a Broker; this is considered\
    \ to be an internal matter.\n   However, when a bill has been agreed, payment\
    \ must take place in a\n   secure and mutually acceptable manner.  The payment\
    \ procedure specified\n   in the GAIA Standard makes use of the SET specification.\n\
    \   The Payment Extension Module requires a Broker to support SET v1.0\n   merchant's\
    \ server and SET certification protocol, specified in [18].\n   +----------------------------------------------------+\n\
    \   | Payment Extension Module                           |\n   +------------------------+---------------------------+\n\
    \   | Payment                | SET v 1.0 :               |\n   |             \
    \           | 1) CA server for banks    |\n   |                        | 2) Cardholder\
    \ wallet      |\n   |                        | 3) Merchant Server        |\n \
    \  |                        | 4) Payment Gateway server |\n   +------------------------+---------------------------+\n"
- title: 5.5.7.  Alerting Extension Module
  contents:
  - "5.5.7.  Alerting Extension Module\n   The Alerting Extension Module specifies\
    \ the protocols to notify\n   Customers about changes that can be interesting\
    \ for them.\n   This Extension Module requires the support of the following\n\
    \   technologies:\n   - Internet e-mail, based on SMTP protocol [8],\n     and\
    \ mail data formats specified in RFC 822 [9].\n     The Broker should be able\
    \ to generate and send e-mail messages.\n   - SMS (Short Message Service), specified\
    \ in [19].\n   +-----------------------------------------------------+\n   | Alerting\
    \ Extension Module                           |\n   +-----------+-----------------------------------------+\n\
    \   | Alerting  | Internet e-mail [SMTP,RFC822] (sender), |\n   |           |\
    \ SMS                                     |\n   +-----------+-----------------------------------------+\n"
- title: 5.5.8.  Customer Discovery Extension Module
  contents:
  - "5.5.8.  Customer Discovery Extension Module\n   The Customer Discovery Extension\
    \ Module allows Z39.50 clients to use\n   the service of the GAIA Broker.\n  \
    \ This Extension Module requires the Broker to support the server part\n   of\
    \ the Z39.50 protocol, as defined in [5].  The following subset of\n   the protocol\
    \ is required:\n   - Init, Search, and Present services\n   - GRS-1 record syntax\n\
    \   Z39.50 protocol PDUs should be carried using TCP/IP network\n   protocols.\n\
    \   +----------------------------------------------------+\n   | Discovery Extension\
    \ Module                         |\n   +------------------------+---------------------------+\n\
    \   | Searching,             | Z39.50 (server)           |\n   | Locating    \
    \           |                           |\n   +------------------------+---------------------------+\n"
- title: 5.6.  Interface Modules
  contents:
  - "5.6.  Interface Modules\n   For the purpose of conformance, all interfaces between\
    \ FUMs and FUs,\n   specified by the GAIA Standard, are grouped into GAIA Interface\n\
    \   Modules.  These modules are recommended to be supported by a GAIA\n   Broker,\
    \ but they are not mandatory.  A Broker can choose a subset of\n   Interface Modules\
    \ that are more important in its area of operation,\n   and implement interfaces\
    \ defined in these modules.\n   A full specification of the Functional Unit interfaces\
    \ is presented\n   in the GAIA Standard [1].\n   The following table defines Interface\
    \ Modules and specifies which\n   interfaces have to be supported in each of them.\n\
    \   +--------------------+------------------------------------+\n   | Interface\
    \ Module   | Interfaces that are required to be |\n   |                    | supported\
    \ in this module           |\n   +--------------------+------------------------------------+\n\
    \   | Search             | Search FU interface                |\n   | Locate \
    \            | Locate FU interface                |\n   | Order              |\
    \ Order FU interface                 |\n   | Discrete Delivery  | Discrete Delivery\
    \ FU interface     |\n   | Stream Delivery    | Stream Delivery FU interface \
    \      |\n   | Customer           | Customer FU interface              |\n   |\
    \ Alerting           | Alerting FU interface              |\n   | Directory Services\
    \ | Directory Services FU interface    |\n   | Authentication     | Authentication\
    \ FU interface        |\n   | Payment            | Payment FU interface      \
    \         |\n   +--------------------+------------------------------------+\n"
- title: 6.  Acknowledgement
  contents:
  - "6.  Acknowledgement\n   We wish to express our gratitude to all members of the\
    \ GAIA\n   Consortium for a very lively discussion and their valuable direct and\n\
    \   indirect input in the design process of the GAIA Standard.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   Security issues related to the electronic brokerage\
    \ are discussed in\n   Sections 2.1.4, 2.3 and 5.4.5.\n"
- title: 8.  References
  contents:
  - "8.  References\n   [1]  GAIA Consortium, Deliverable 0403, \"GAIA Standard (Final)\"\
    ,\n        December 1998, see also <http://www.syspace.co.uk/GAIA/>.\n   [2] \
    \ Object Management Group, \"CORBA 2.0 Specification\", July 1996,\n        See\
    \ <ftp://ftp.omg.org/pub/docs/formal/97-02-25.pdf>.\n   [3]  Fielding, R., Gettys,\
    \ J., Mogul, J., Frystyk, H. and T.\n        Berners-Lee, \"Hypertext Transfer\
    \ Protocol -- HTTP/1.1\", RFC\n        2068, January 1997.\n   [4]  Berners-Lee,\
    \ T. and D. Connolly, \"Hypertext Markup Language -\n        2.0\", RFC 1866,\
    \ November 1995.\n   [5]  ANSI/NISO Z39.50-1995 or ISO 23950 \"Information Retrieval:\n\
    \        Application Service Definition and Protocol Specification\".\n   [6]\
    \  ISO 10161:1997 \"Information and documentation -- Open Systems\n        Interconnection\
    \ -- Interlibrary Loan Application Protocol\n        Specification\".\n   [7]\
    \  Postel, J. and J. Reynolds, \"File Transfer Protocol\", STD 9, RFC\n      \
    \  959, October 1985.\n   [8]  Postel, J., \"Simple Mail Transfer Protocol\",\
    \ STD 10, RFC 821,\n        August 1982.\n   [9]  Crocker, D., \"Standard for\
    \ the format of ARPA Internet text\n        messages\", STD 11, RFC 822, August\
    \ 1982.\n   [10] Freed, N., and N. Borenstein, \"Multipurpose Internet Mail\n\
    \        Extensions (MIME) Part One: Format of Internet Message Bodies\",\n  \
    \      RFC 2045, November 1996.\n        Freed, N., and N. Borenstein, \"Multipurpose\
    \ Internet Mail\n        Extensions (MIME) Part Two: Media Types\", RFC 2046,\
    \ November\n        1996.\n        Moore, K., \"MIME (Multipurpose Internet Mail\
    \ Extensions) Part\n        Three: Message Header Extensions for Non-ASCII Text\"\
    , RFC 2047,\n        November 1996.\n        Freed, N., Klensin, J., and J. Postel,\
    \ \"Multipurpose Internet\n        Mail Extensions (MIME) Part Four: Registration\
    \ Procedures\", RFC\n        2048, November 1996.\n        Freed, N., and N. Borenstein,\
    \ \"Multipurpose Internet Mail\n        Extensions (MIME) Part Five: Conformance\
    \ Criteria and Examples\",\n        RFC 2049, November 1996.\n   [11] ISO/IEC\
    \ IS 13818 \"Information technology -- Coding of moving\n        pictures and\
    \ associated audio information\"\n        Part 1: Systems\n        Part 2: Video\n\
    \        Part 3: Audio\n        Part 4: Conformance testing\n        Part 5: Software\
    \ simulation\n   [12] Schulzrinne, H., Casner, S., Frederick, R., and V. Jacobson,\n\
    \        \"RTP: A Transport Protocol for Real-Time Applications\", RFC\n     \
    \   1889, January 1996.\n   [13] Hoffman, D., Fernando, G., Goyal, V. and M. Civanlar,\
    \ \"RTP\n        Payload Format for MPEG1/MPEG2 Video\", RFC 2250, January 1998.\n\
    \   [14] Freier, A., Karlton, P. and P. Kocher, \"The SSL Protocol -\n       \
    \ Version 3.0\", Work in Progress, Transport Layer Security Working\n        Group,\
    \ November 1996, See\n        <http://home.netscape.com/eng/ssl3/index.html>.\n\
    \   [15] PKCS #7: Cryptographic Message Syntax Standard.  Version 1.5,\n     \
    \   November 1993.\n   [16] Linn, J., \"Generic Security Service Application Program\n\
    \        Interface\", RFC 1508, Geer Zolot Associate, September 1993.\n   [17]\
    \ Public-Key Infrastructure (X.509) IETF Working Group,\n        <http://www.ietf.org/html.charters/pkix-charter.html>,\
    \ July 98.\n   [18] \"SET Secure Electronic Transaction Specification\", Version\
    \ 1.0,\n        MasterCard and Visa, May 97.\n   [19] Digital Cellular Telecommunications\
    \ System (Phase 2+): Technical\n        Realization of the Short Message Service\
    \ (SMS) Point-to-Point\n        (PP) (GSM 3.40).  Version 5.2.0.  European Telecommunications\n\
    \        Standards Institute.  May 1996.\n"
- title: 9.  Authors' Addresses
  contents:
  - "9.  Authors' Addresses\n   Mikhail Blinov\n   Computer Science Department\n \
    \  University College Dublin\n   Belfield, Dublin 4, Ireland\n   Phone: +353 1-706-2488\n\
    \   Fax:   +353 1-269-7262\n   EMail: mch@net-cs.ucd.ie\n   Mikhail Bessonov\n\
    \   Computer Science Department\n   University College Dublin\n   Belfield, Dublin\
    \ 4, Ireland\n   Phone: +353 1-706-2488\n   Fax:   +353 1-269-7262\n   EMail:\
    \ mikeb@net-cs.ucd.ie\n   Ciaran Clissmann\n   Computer Science Department\n \
    \  University College Dublin\n   Belfield, Dublin 4, Ireland\n   Phone: +353 1-706-2488\n\
    \   Fax:   +353 1-269-7262\n   EMail: ciaranc@net-cs.ucd.ie\n"
- title: 10.  Full Copyright Statement
  contents:
  - "10.  Full Copyright Statement\n   Copyright (C) The Internet Society (1999).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
