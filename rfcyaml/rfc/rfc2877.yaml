- title: __initial_text__
  contents:
  - '                        5250 Telnet Enhancements

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo describes the interface to the IBM 5250 Telnet server\
    \ that\n   allows client Telnet to request a Telnet terminal or printer session\n\
    \   using a specific device name.  If a requested device name is not\n   available,\
    \ a method to retry the request using a new device name is\n   described.  Methods\
    \ to request specific Telnet session settings and\n   auto-signon function are\
    \ also described.\n   By allowing a Telnet client to select the device name, the\
    \ 5250\n   Telnet server opens the door for applications to set and/or extract\n\
    \   useful information about the Telnet client.  Some possibilities are\n   1)\
    \ selecting a customized device name associated with a particular\n   user profile\
    \ name for National Language Support or subsystem routing,\n   2) connecting PC\
    \ and network printers as clients and 3) auto-signon\n   using clear-text or DES-encrypted\
    \ password exchange.\n   Applications may need to use system API's on the AS/400\
    \ in order to\n   extract Telnet session settings from the device name description.\n\
    \   Refer to the Retrieve Device Description (QDCRDEVD) API described in\n   the\
    \ AS/400 System API book [3] on how to extract information using\n   the DEVD0600\
    \ and DEVD1100 templates.\n   This memo describes how the IBM 5250 Telnet server\
    \ supports Work\n   Station Function (WSF) printers using 5250 Display Station\
    \ Pass-\n   Through.  A response code is returned by the Telnet server to\n  \
    \ indicate success or failure of the WSF printer session.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n    1.  Enhancing Telnet Negotiations......................\
    \   3\n    2.  Standard Telnet Option Negotiation.................   3\n    3.\
    \  Enhanced Telnet Option Negotiation.................   4\n    4.  Enhanced Display\
    \ Emulation Support.................   7\n    5.  Enhanced Display Auto-Signon\
    \ and Password\n        Encryption.........................................  \
    \ 8\n        5.1   Password Substitutes Processing..............  12\n       \
    \ 5.2   Handling passwords of length 9 and 10........  14\n        5.3   Example\
    \ Password Substitute Calculation......  15\n    6.  Device Name Collision Processing...................\
    \  15\n    7.  Enhanced Printer Emulation Support.................  16\n    8.\
    \  Telnet Printer Terminal Types......................  18\n    9.  Telnet Printer\
    \ Startup Response Record for Printer\n        Emulators..........................................\
    \  20\n        9.1  Example of a Success Response Record.........   20\n     \
    \   9.2  Example of an Error Response Record..........   21\n        9.3  Response\
    \ Codes...............................   22\n   10.  Printer Steady-State Pass-Through\
    \ Interface........  23\n        10.1  Example of a Print Record....................\
    \  25\n        10.2  Example of a Print Complete Record...........  27\n     \
    \   10.3  Example of a Null Print Record...............  27\n   11.  End-to-End\
    \ Print Example...........................  28\n   12.  Authors' Note......................................\
    \  33\n   13.  References.........................................  33\n   14.\
    \  Security Considerations............................  35\n   15.  Authors' Addresses.................................\
    \  35\n   16.  Relation to Other RFC's............................  35\n   17.\
    \  Full Copyright Statement...........................  36\n"
- title: LIST OF FIGURES
  contents:
  - "LIST OF FIGURES\n   Figure 1.  Example of a success status response\n       \
    \       record.......................................  20\n   Figure 2.  Example\
    \ of an error response record..........  21\n   Figure 3.  Layout of the printer\
    \ pass-through\n              header.......................................  23\n\
    \   Figure 4.  Server sending client data with a print\n              record.......................................\
    \  26\n   Figure 5.  Client sending server a print complete\n              record.......................................\
    \  27\n   Figure 6.  Server sending client a null print\n              record.......................................\
    \  28\n"
- title: 1. Enhancing Telnet Negotiations
  contents:
  - "1. Enhancing Telnet Negotiations\n   The 5250 Telnet server enables clients to\
    \ negotiate both terminal and\n   printer device names through Telnet Environment\
    \ Options Negotiations,\n   defined in the Standards Track RFC 1572 [13].\n  \
    \ The purpose of RFC 1572 is to exchange environment information using\n   a set\
    \ of standard or custom variables.  By using a combination of\n   both standard\
    \ VAR's and custom USERVAR's, the 5250 Telnet server\n   allows client Telnet\
    \ to request a pre-defined specific device by\n   name.\n   If no pre-defined\
    \ device exists then the device will be created, with\n   client Telnet having\
    \ the option to negotiate device attributes, such\n   as the code page, character\
    \ set, keyboard type, etc.\n   Since printers can now be negotiated as a device\
    \ name, new terminal\n   types have been defined to request printers.  For example,\
    \ you can\n   now negotiate \"IBM-3812-1\" and \"IBM-5553-B01\" as valid TERMINAL-TYPE\n\
    \   options [11].\n   Finally, the 5250 Telnet server will allow exchange of user\
    \ profile\n   and password information, where the password may be in either clear-\n\
    \   text or encrypted form.  If a valid combination of profile and\n   password\
    \ is received, then the client is allowed to bypass the sign-\n   on panel.  The\
    \ setting of the QRMTSIGN system value must be either\n   *VERIFY or *SAMEPRF\
    \ for the bypass of the sign-on panel to succeed.\n"
- title: 2. Standard Telnet Option Negotiation
  contents:
  - "2. Standard Telnet Option Negotiation\n   Telnet server option negotiation typically\
    \ begins with the issuance,\n   by the server, of an invitation to engage in terminal\
    \ type\n   negotiation with the Telnet client (DO TERMINAL-TYPE) [11].  The\n\
    \   client and server then enter into a series of sub-negotiations to\n   determine\
    \ the level of terminal support that will be used.  After the\n   terminal type\
    \ is agreed upon, the client and server will normally\n   negotiate a required\
    \ set of additional options (EOR [12], BINARY\n   [10], SGA [15]) that are required\
    \ to support \"transparent mode\" or\n   full screen 5250/3270 block mode support.\
    \  As soon as the required\n   options have been negotiated, the server will suspend\
    \ further\n   negotiations, and begin with initializing the actual virtual device\n\
    \   on the AS/400.  A typical exchange might start like the following:\n   AS/400\
    \ Telnet server              Enhanced Telnet client\n   --------------------------\
    \        -------------------------\n   IAC DO TERMINAL-TYPE        -->\n     \
    \                          <--   IAC WILL TERMINAL-TYPE\n   IAC SB TERMINAL-TYPE\
    \ SEND\n   IAC SE                      -->\n                                 \
    \    IAC SB TERMINAL-TYPE IS\n                               <--   IBM-5555-C01\
    \ IAC SE\n   IAC DO EOR                  -->\n                               <--\
    \   IAC WILL EOR\n                               <--   IAC DO EOR\n   IAC WILL\
    \ EOR                -->\n                                .\n                \
    \                .\n   (other negotiations)         .\n   Actual bytes transmitted\
    \ in the above example are shown in hex below.\n   AS/400 Telnet server      \
    \        Enhanced Telnet client\n   --------------------------        -------------------------\n\
    \   FF FD 18                    -->\n                               <--   FF FB\
    \ 18\n   FF FA 18 01 FF F0           -->\n                                   \
    \  FF FA 18 00 49 42 4D 2D\n                                     35 35 35 35 2D\
    \ 43 30 31\n                               <--   FF F0\n   FF FD 19          \
    \          -->\n                               <--   FF FB 19\n              \
    \                 <--   FF FD 19\n   FF FB 19                    -->\n       \
    \                         .\n                                .\n   (other negotiations)\
    \         .\n   Some negotiations are symmetrical between client and server and\
    \ some\n   are negotiated in one direction only.  Also, it is permissible and\n\
    \   common practice to bundle more than one response or request, or\n   combine\
    \ a request with a response, so the actual exchange may look\n   different in\
    \ practice to what is shown above.\n"
- title: 3. Enhanced Telnet Option Negotiation
  contents:
  - "3. Enhanced Telnet Option Negotiation\n   In order to accommodate the new environment\
    \ option negotiations, the\n   server will bundle an environment option invitation\
    \ along with the\n   standard terminal type invitation request to the client.\n\
    \   A client should either send a negative acknowledgment (WONT NEW-\n   ENVIRON),\
    \ or at some point after completing terminal-type\n   negotiations, but before\
    \ completing the full set of negotiations\n   required for 5250 transparent mode,\
    \ engage in environment option\n   sub-negotiation with the server.  A maximum\
    \ of 1024 bytes of\n   environment strings may be sent to the server.  A recommended\n\
    \   sequence might look like the following:\n   AS/400 Telnet server         \
    \     Enhanced Telnet client\n   --------------------------        -------------------------\n\
    \   IAC DO NEW-ENVIRON\n   IAC DO TERMINAL-TYPE        -->\n   (2 requests bundled)\n\
    \                               <--   IAC WILL NEW-ENVIRON\n   IAC SB NEW-ENVIRON\
    \ SEND\n   VAR IAC SE                  -->\n                                 \
    \    IAC SB NEW-ENVIRON IS\n                                     VAR \"USER\"\
    \ VALUE \"JONES\"\n                                     USERVAR \"DEVNAME\"\n\
    \                                     VALUE \"MYDEVICE07\"\n                 \
    \              <--   IAC SE\n                               <--   IAC WILL TERMINAL-TYPE\n\
    \                                     (do the terminal type\n                \
    \                     sequence first)\n   IAC SB TERMINAL-TYPE SEND\n   IAC SE\
    \                      -->\n                                     IAC SB TERMINAL-TYPE\
    \ IS\n                               <--   IBM-5555-C01 IAC SE\n             \
    \                        (terminal type negotiations\n                       \
    \              completed)\n   IAC DO EOR                  -->\n   (server will\
    \ continue\n   with normal transparent\n   mode negotiations)\n              \
    \                 <--   IAC WILL EOR\n                                .\n    \
    \                            .\n     (other negotiations)       .\n   Actual bytes\
    \ transmitted in the above example are shown in hex below.\n   AS/400 Telnet server\
    \              Enhanced Telnet client\n   --------------------------        -------------------------\n\
    \   FF FD 27\n   FF FD 18                    -->\n   (2 requests bundled)\n  \
    \                             <--   FF FB 27\n   FF FA 27 01 00 FF F0        -->\n\
    \                                     FF FA 27 00 00 55 53 45\n              \
    \                       52 01 4A 4F 4E 45 53 03\n                            \
    \         44 45 56 4E 41 4D 45 01\n                                     4D 59\
    \ 44 45 56 49 43 45\n                               <--   30 37 FF F0\n      \
    \                         <--   FF FB 18\n                                   \
    \  (do the terminal type\n                                     sequence first)\n\
    \   FF FA 18 01 FF F0           -->\n                                     FF FA\
    \ 18 00 49 42 4D 2D\n                                     35 35 35 35 2D 43 30\
    \ 31\n                               <--   FF F0\n   FF FD 19                \
    \    -->\n   (server will continue\n   with normal transparent\n   mode negotiations)\n\
    \                               <--   FF FB 19\n                             \
    \   .\n                                .\n   (other negotiations)         .\n\
    \   RFC 1572 defines 6 standard VAR's: USER, JOB, ACCT, PRINTER,\n   SYSTEMTYPE,\
    \ and DISPLAY.  The USER standard VAR will hold the value\n   of the AS/400 user\
    \ profile name to be used in auto-signon requests.\n   The Telnet server will\
    \ make no direct use of the additional 5 VAR's,\n   nor are any of them required\
    \ to be sent.  All standard VAR's and\n   their values that are received by the\
    \ Telnet server will be placed in\n   a buffer, along with any USERVAR's received\
    \ (described below), and\n   made available to a registered initialization exit\
    \ program to be used\n   for any purpose desired.\n   There are some reasons you\
    \ may want to send NEW-ENVIRON negotiations\n   prior to TERMINAL-TYPE negotiations.\
    \  With AS/400 TELNET server,\n   several virtual device modes can be negotiated:\
    \ 1) VTxxx device 2)\n   3270 device 3) 5250 device (includes Network Station).\
    \  The virtual\n   device mode selected depends on the TERMINAL-TYPE negotiated\
    \ plus any\n   other TELNET option negotiations necessary to support those modes.\n\
    \   The AS/400 TELNET server will create the desired virtual device at\n   the\
    \ first opportunity it thinks it has all the requested attributes\n   needed to\
    \ create the device.  This can be as early as completion of\n   the TERMINAL-TYPE\
    \ negotiations.\n   For the case of Transparent mode (5250 device), then the moment\n\
    \   TERMINAL-TYPE, BINARY, and EOR options are negotiated the TELNET\n   server\
    \ will go create the virtual device.  Receiving any NEW-ENVIRON\n   negotiations\
    \ after these option negotiations are complete will result\n   in the NEW-ENVIRON\
    \ negotiations having no effect on device\n   attributes, as the virtual device\
    \ will have already been created.\n   So, for Transparent mode, NEW-ENVIRON negotiations\
    \ are effectively\n   closed once EOR is negotiated, since EOR is generally the\
    \ last option\n   done.\n   For other devices modes (such as VTxxx or 3270), you\
    \ cannot be sure\n   when the AS/400 TELNET server thinks it has all the attributes\
    \ to\n   create the device.  Recall that NEW-ENVIRON negotiations are\n   optional,\
    \ and therefore the AS/400 TELNET server need not wait for\n   any NEW-ENVIRON\
    \ options prior to creating the virtual device.  It is\n   in the clients best\
    \ interest to send NEW-ENVIRON negotiations as soon\n   as possible, preferably\
    \ before TERMINAL-TYPE is negotiated.  That\n   way, the client can be sure the\
    \ requested attributes were received\n   before the virtual device is created.\n"
- title: 4. Enhanced Display Emulation Support
  contents:
  - "4. Enhanced Display Emulation Support\n   RFC 1572 style USERVAR variables have\
    \ been defined to allow a\n   compliant Telnet client more control over the Telnet\
    \ server virtual\n   device on the AS/400.  These USERVAR's allow the client Telnet\
    \ to\n   create or select a previously created virtual device.  If the virtual\n\
    \   device does not exist and must be created, then the USERVAR variables\n  \
    \ are used to create and initialize the device attributes.  If the\n   virtual\
    \ device already exists, the device attributes are modified.\n   The USERVAR's\
    \ defined to accomplish this are:\n   USERVAR    VALUE              EXAMPLE  \
    \         DESCRIPTION\n   --------   ----------------   ----------------  -------------------\n\
    \   DEVNAME    us-ascii char(x)   MYDEVICE07        Display device name\n   KBDTYPE\
    \    us-ascii char(3)   USB               Keyboard type\n   CODEPAGE   us-ascii\
    \ char(y)   437               Code page\n   CHARSET    us-ascii char(y)   1212\
    \              Character set\n   x - up to a maximum of 10 characters\n   y -\
    \ up to a maximum of 5 characters\n   For a description of the KBDTYPE, CODEPAGE\
    \ and CHARSET parameters and\n   their permissible values, refer to Chapter 8\
    \ in the Communications\n   Configuration Reference [5] and also to Appendix C\
    \ in National\n   Language Support [16].\n   The CODEPAGE and CHARSET USERVAR's\
    \ must be associated with a KBDTYPE\n   USERVAR.  If either CODEPAGE or CHARSET\
    \ are sent without KBDTYPE,\n   they will default to system values.  A default\
    \ value for KBDTYPE can\n   be sent to force CODEPAGE and CHARSET values to be\
    \ used.\n   AS/400 system objects such as device names, user profiles, clear-text\n\
    \   passwords, programs, libraries, etc. are required to be specified in\n   English\
    \ Upper Case (EUC).  This includes:\n     Any letter (A-Z), any number (0-9),\
    \ special characters (# $ _ @)\n   Therefore, where us-ascii is specified for\
    \ VAR or USERVAR values, it\n   is recommended that upper-cased ASCII values be\
    \ sent, which will be\n   converted to EBCDIC by the Telnet server.\n   A special\
    \ case occurs for encrypted passwords (described in the next\n   section), where\
    \ both the initial password and user profile used to\n   build the encrypted password\
    \ must be EBCDIC English Upper Case, in\n   order to be properly authenticated\
    \ by the Telnet server.\n"
- title: 5. Enhanced Display Auto-Signon and Password Encryption
  contents:
  - "5. Enhanced Display Auto-Signon and Password Encryption\n   Several 5250 Telnet\
    \ server specific USERVAR's will be defined.  One\n   will carry a random seed\
    \ to be used in Data Encryption Standard (DES)\n   password encryption, and another\
    \ will carry the encrypted copy of the\n   password.  This would use the same\
    \ 7-step DES-based password\n   substitution scheme as APPC and Client Access.\
    \  For a description of\n   DES encryption, refer to Federal Information Processing\
    \ Standards\n   Publications (FIPS) 46-2 [17] and 81 [18], which can be found\
    \ at the\n   Federal Information Processing Standards Publications link:\n   http://www.itl.nist.gov/div897/pubs/by-num.htm\n\
    \   For a description of the 7-step password substitution scheme, refer\n   to\
    \ these IBM Customer Support FTP Server links:\n   ftp://ftp.networking.ibm.com/pub/standards/ciw/sig/sec/pwsubciw.ps\n\
    \   ftp://ftp.networking.ibm.com/pub/standards/ciw/sig/sec/pwsubciw.ps.Z\n   ftp://ftp.networking.ibm.com/pub/standards/ciw/sig/sec/pwsubciw.zip\n\
    \   If encrypted password exchange is not required, clear-text password\n   exchange\
    \ is permitted using the same USERVAR's defined for\n   encryption.  For this\
    \ case, the random client seed should be set to\n   either an empty value (RFC\
    \ 1572 preferred method) or to hexadecimal\n   zeros to indicate the password\
    \ is not encrypted, but is clear-text.\n   It should be noted that security of\
    \ clear-text password exchange\n   cannot be guaranteed unless the network is\
    \ physically protected or a\n   trusted network (such as an intranet).  If your\
    \ network is vulnerable\n   to IP address spoofing or directly connected to the\
    \ Internet, you\n   should engage in encrypted password exchange to validate a\
    \ clients\n   identity.\n   Additional VAR's and USERVAR's have also been defined\
    \ to allow an\n   auto-signon user greater control over their startup environment,\n\
    \   similar to what is supported using the Open Virtual Terminal\n   (QTVOPNVT)\
    \ API [3].\n   The standard VAR's supported to accomplish this are:\n   VAR  \
    \      VALUE              EXAMPLE           DESCRIPTION\n   --------   ----------------\
    \   ----------------  -------------------\n   USER       us-ascii char(x)   USERXYZ\
    \           User profile name\n   x - up to a maximum of 10 characters\n   The\
    \ custom USERVAR's defined to accomplish this are:\n   USERVAR       VALUE   \
    \           EXAMPLE           DESCRIPTION\n   --------      ---------------- \
    \  ----------------  -------------------\n   IBMRSEED      binary(8)         \
    \ 8-byte hex field  Random client seed\n   IBMSUBSPW     binary(10)         10-byte\
    \ hex field Substitute password\n   IBMCURLIB     us-ascii char(x)   QGPL    \
    \          Current library\n   IBMIMENU      us-ascii char(x)   MAIN         \
    \     Initial menu\n   IBMPROGRAM    us-ascii char(x)   QCMD              Program\
    \ to call\n   x - up to a maximum of 10 characters\n   In order to communicate\
    \ the server random seed value to the client,\n   the server will request a USERVAR\
    \ name made up of a fixed part (the 8\n   characters \"IBMRSEED\" immediately\
    \ followed by an 8-byte hexadecimal\n   variable part, which is the server random\
    \ seed.  The client generates\n   its own 8-byte random seed value, and uses both\
    \ seeds to encrypt the\n   password.  Both the encrypted password and the client\
    \ random seed\n   value are then sent to the server for authentication.  RFC 1572\
    \ rules\n   will need to be adhered to when transmitting the client random seed\n\
    \   and substituted password values to the server.  Specifically, since a\n  \
    \ typical environment string is a variable length hexadecimal field,\n   the hexadecimal\
    \ fields are required to be escaped and/or byte stuffed\n   according to the RFC\
    \ 854 [8], where any single byte could be mis-\n   construed as a Telnet IAC or\
    \ other Telnet option negotiation control\n   character.  The client must escape\
    \ and/or byte stuff any bytes which\n   could be seen as a RFC 1572 [13] option,\
    \ specifically VAR, VALUE, ESC\n   and USERVAR.\n   The following illustrates\
    \ the encrypted case:\n   AS/400 Telnet server             Enhanced Telnet client\n\
    \   --------------------------       -------------------------------\n   IAC DO\
    \ NEW-ENVIRON          -->\n                               <--  IAC WILL NEW-ENVIRON\n\
    \   IAC SB NEW-ENVIRON SEND\n   USERVAR \"IBMRSEEDxxxxxxxx\"\n   USERVAR \"IBMSUBSPW\"\
    \n   VAR USERVAR IAC SE          -->\n                                    IAC\
    \ SB NEW-ENVIRON IS\n                                    VAR \"USER\" VALUE \"\
    DUMMYUSR\"\n                                    USERVAR \"IBMRSEED\" VALUE \"\
    yyyyyyyy\"\n                                    USERVAR \"IBMSUBSPW\" VALUE \"\
    zzzzzzzz\"\n                               <--  IAC SE\n                     \
    \           .\n                                .\n   (other negotiations)    \
    \     .\n   In this example, \"xxxxxxxx\" is an 8-byte hexadecimal random server\n\
    \   seed, \"yyyyyyyy\" is an 8-byte hexadecimal random client seed and\n   \"\
    zzzzzzzz\" is an 8-byte hexadecimal encrypted password.  If the\n   password is\
    \ not valid, then the sign-on panel is displayed.  If the\n   password is expired,\
    \ then the Change Password panel is displayed.\n   Actual bytes transmitted in\
    \ the above example are shown in hex below,\n   where the server seed is \"7D3E488F18080404\"\
    , the client seed is\n   \"4E4142334E414233\" and the encrypted password is \"\
    DFB0402F22ABA3BA\".\n   The user profile used to generate the encrypted password\
    \ is\n   \"44554D4D59555352\" (DUMMYUSR), with a clear-text password of\n   \"\
    44554D4D595057\" (DUMMYPW).\n   AS/400 Telnet server             Enhanced Telnet\
    \ client\n   --------------------------       -------------------------\n   FF\
    \ FD 27                    -->\n                               <--  FF FB 27\n\
    \   FF FA 27 01 03 49 42 4D\n   52 53 45 45 44 7D 3E 48\n   8F 18 08 04 04 03\
    \ 49 42\n   4D 53 55 42 53 50 57 03\n   00 FF F0                    -->\n    \
    \                                FF FA 27 00 00 55 53 45\n                   \
    \                 52 01 44 55 4D 4D 59 55\n                                  \
    \  53 52 03 49 42 4D 52 53\n                                    45 45 44 01 4E\
    \ 41 42 33\n                                    4E 41 42 33 03 49 42 4D\n    \
    \                                53 55 42 53 50 57 01 DF\n                   \
    \                 B0 40 2F 22 AB A3 BA FF\n                               <--\
    \  F0\n   The following illustrates the clear-text case:\n   AS/400 Telnet server\
    \             Enhanced Telnet client\n   --------------------------       -------------------------\n\
    \   IAC DO NEW-ENVIRON          -->\n                               <--  IAC WILL\
    \ NEW-ENVIRON\n   IAC SB NEW-ENVIRON SEND\n   USERVAR \"IBMRSEEDxxxxxxxx\"\n \
    \  USERVAR \"IBMSUBSPW\"\n   VAR USERVAR IAC SE          -->\n               \
    \                     IAC SB NEW-ENVIRON IS\n                                \
    \    VAR \"USER\" VALUE \"DUMMYUSR\"\n                                    USERVAR\
    \ \"IBMRSEED\" VALUE\n                                    USERVAR \"IBMSUBSPW\"\
    \ VALUE \"yyyyyyyy\"\n                               <--  IAC SE\n           \
    \                     .\n                                .\n   (other negotiations)\
    \         .\n   In this example, \"xxxxxxxx\" is an 8-byte hexadecimal random\
    \ server\n   seed, \"yyyyyyyyyy\" is a 10-byte us-ascii client clear-text password.\n\
    \   If the password has expired, then the sign-on panel is displayed.\n   Actual\
    \ bytes transmitted in the above example are shown in hex below,\n   where the\
    \ server seed is \"7D3E488F18080404\", the client seed is empty\n   and the clear-text\
    \ password is \"44554D4D595057\" (DUMMYPW).  The user\n   profile used is \"44554D4D59555352\"\
    \ (DUMMYUSR).\n   AS/400 Telnet server             Enhanced Telnet client\n  \
    \ --------------------------       -------------------------\n   FF FD 27    \
    \                -->\n                               <--  FF FB 27\n   FF FA 27\
    \ 01 03 49 42 4D\n   52 53 45 45 44 7D 3E 48\n   8F 18 08 04 04 03 49 42\n   4D\
    \ 53 55 42 53 50 57 03\n   00 FF F0                    -->\n                 \
    \                   FF FA 27 00 00 55 53 45\n                                \
    \    52 01 44 55 4D 4D 59 55\n                                    53 52 03 49\
    \ 42 4D 52 53\n                                    45 45 44 01 03 49 42 4D\n \
    \                                   53 55 42 53 50 57 01 44\n                \
    \               <--  55 4D 4D 59 50 57 FF F0\n"
- title: 5.1 Password Substitutes Processing
  contents:
  - "5.1 Password Substitutes Processing\n   Both APPC and Client Access use well-known\
    \ DES encryption algorithms\n   to create encrypted passwords.  A Network Station\
    \ or Enhanced Client\n   can generate compatible encrypted passwords if they follow\
    \ these\n   steps, details of which can be found in the Federal Information\n\
    \   Processing Standards 46-2 [17].\n   1. Padded_PW = Left justified user password\
    \ padded to the right with\n      '40'X to 8 bytes.\n      The users password\
    \ must be left justified in an 8 byte variable\n      and padded to the right\
    \ with '40'X up to an 8 byte length.  If the\n      users password is 8 bytes\
    \ in length, no padding would occur.  For\n      computing password substitutes\
    \ for passwords of length 9 and 10\n      see section \"Handling passwords of\
    \ length 9 and 10\" below.\n      Passwords less than 1 byte or greater than 10\
    \ bytes in length are\n      not valid.  Please note, if password is not in EBCDIC,\
    \ it must be\n      converted to EBCDIC uppercase.\n   2. XOR_PW = Padded_PW xor\
    \ '5555555555555555'X\n      The padded password is Exclusive OR'ed with 8 bytes\
    \ of '55'X.\n   3. SHIFT_RESULT = XOR_PW << 1\n      The entire 8 byte result\
    \ is shifted 1 bit to the left; the\n      leftmost bit value is discarded, and\
    \ the rightmost bit value is\n      cleared to 0.\n   4. PW_TOKEN = DES_ECB_mode(SHIFT_RESULT,\
    \              /* key  */\n                              userID_in_EBCDIC_uppercase\
    \ /* data */ )\n      This shifted result is used as key to the Data Encryption\
    \ Standard\n      (Federal Information Processing Standards 46-2 [17]) to encipher\n\
    \      the user identifier.  When the user identifier is less than 8\n      bytes,\
    \ it is left justified in an 8 byte variable and padded to\n      the right with\
    \ '40'X.  When the user identifier is 9 or 10 bytes,\n      it is first padded\
    \ to the right with '40'X to a length of 10\n      bytes.  Then bytes 9 and 10\
    \ are \"folded\" into bytes 1-8 using the\n      following algorithm:\n      \
    \  Bit 0 is the high-order bit (i.e. has value of '80'X).\n        Byte 1, bits\
    \ 0 and 1 are replaced with byte 1, bits 0 and 1\n        Exclusive OR'ed with\
    \ byte 9, bits 0 and 1.\n        Byte 2, bits 0 and 1 are replaced with byte 2,\
    \ bits 0 and 1\n        Exclusive OR'ed with byte 9, bits 2 and 3.\n        Byte\
    \ 3, bits 0 and 1 are replaced with byte 3, bits 0 and 1\n        Exclusive OR'ed\
    \ with byte 9, bits 4 and 5.\n        Byte 4, bits 0 and 1 are replaced with byte\
    \ 4, bits 0 and 1\n        Exclusive OR'ed with byte 9, bits 6 and 7.\n      \
    \  Byte 5, bits 0 and 1 are replaced with byte 5, bits 0 and 1\n        Exclusive\
    \ OR'ed with byte 10, bits 0 and 1.\n        Byte 6, bits 0 and 1 are replaced\
    \ with byte 6, bits 0 and 1\n        Exclusive OR'ed with byte 10, bits 2 and\
    \ 3.\n        Byte 7, bits 0 and 1 are replaced with byte 7, bits 0 and 1\n  \
    \      Exclusive OR'ed with byte 10, bits 4 and 5.\n        Byte 8, bits 0 and\
    \ 1 are replaced with byte 8, bits 0 and 1\n        Exclusive OR'ed with byte\
    \ 10, bits 6 and 7.\n      User identifier greater than 10 bytes or less than\
    \ 1 byte are not\n      the result of this encryption id known as PW_TOKEN in\
    \ the paper.\n   5. Increment PWSEQs and store it.\n      Each LU must maintain\
    \ a pair of sequence numbers for ATTACHs sent\n      and received on each session.\
    \  Each time an ATTACH is generated,\n      (and password substitutes are in use\
    \ on the session) the sending\n      sequence number, PWSEQs, is incremented and\
    \ saved for the next\n      time.  Both values are set to zero at BIND time. \
    \ So the first use\n      of PWSEQs has the value of 1, and increases by one with\
    \ each use.\n      A new field is added to the ATTACH to carry this sequence number.\n\
    \      However, in certain error conditions, it is possible for the\n      sending\
    \ side to increment the sequence number and the receiver may\n      not increment\
    \ it.  When the sender sends a subsequent ATTACH, the\n      receiver will detect\
    \ a missing sequence.  This is allowed.\n      However the sequence number received\
    \ must always be larger than\n      the previous one, even if some are missing.\n\
    \      The maximum number of consecutive missing sequence numbers allowed\n  \
    \    is 16.  If this is exceeded, the session is unbound with a\n      protocol\
    \ violation.\n      Note: The sequence number must be incremented for every ATTACH\n\
    \      sent.  However, the sequence number field is only required to be\n    \
    \  included in the FMH5 if a password substitute is sent (byte 4, bit\n      3\
    \ on).\n   6. RDrSEQ = RDr + PWSEQs  /* RDr is server seed. */\n      The current\
    \ value of PWSEQs is added to RDr, the random value\n      received from the partner\
    \ LU on this session, yielding RDrSEQ,\n      essentially a predictably modified\
    \ value of the random value\n      received from the partner LU at BIND time.\n\
    \   7. PW_SUB = DES_CBC_mode(PW_TOKEN,        /* key      */\n               \
    \             (RDrSEQ,         /* 8 bytes  */\n                             RDs,\
    \            /* 8 bytes  */\n                             ID xor RDrSEQ,  /* 16\
    \ bytes */\n                             PWSEQs,         /* 8 bytes  */\n    \
    \                         )               /* data     */\n                   \
    \         )\n       The PW_TOKEN is used as a key to the DES function to generate\n\
    \       a 8 bytes value for the following string of inputs.  The DES\n       CBC\
    \ mode Initialization Vector (IV) used is 8 bytes of '00'X.\n         RDrSEQ:\
    \ the random data value received from the partner LU\n                 plus the\
    \ sequence number.\n         RDs:    the random data value sent to the partner\
    \ LU on BIND\n                 for this session.\n         A 16 byte value created\
    \ by:\n                 - padding the user identifier with '40'X to a\n      \
    \             length of 16 bytes.\n                 - Exclusive OR the two 8 byte\
    \ halves of the padded\n                   user identifier with the RDrSEQ value.\n\
    \                 Note: User ID must first be converted to EBCDIC\n          \
    \       upper case.\n         PWSEQs: the sequence number.\n      This is similar\
    \ to the process used on LU-LU verification as\n      described in the Enhanced\
    \ LU-LU Bind Security.  The resulting\n      enciphered random data is the 'password\
    \ substitute'.\n"
- title: 5.2 Handling passwords of length 9 and 10
  contents:
  - "5.2 Handling passwords of length 9 and 10\n   1. Generate PW_TOKENa by using\
    \ characters 1 to 8 of the password and\n      steps 1-4 from the previous section.\n\
    \   2. Generate PW_TOKENb by using characters 9 and 10 and steps 1-4 from\n  \
    \    the previous section.  In this case Padded_PW from step 1 will be\n     \
    \ characters 9 and 10 padded to the right with '40'X, for a total\n      length\
    \ of 8.\n   3. PW_TOKEN = PW_TOKENa xor PW_TOKENb\n   4. Now compute PW_SUB by\
    \ performing steps 5-7 from the previous\n      section.\n"
- title: 5.3 Example Password Substitute Calculation
  contents:
  - "5.3 Example Password Substitute Calculation\n   ID:           USER123\n   Password:\
    \     ABCDEFG\n   Server seed:  '7D4C2319F28004B2'X\n   Client seed:  '08BEF662D851F4B1'X\n\
    \   PWSEQs:       1     (PWSEQs is a sequence number needed in the\n         \
    \               7-step encryption, and it is always one)\n   Encrypted Password\
    \ should be : '5A58BD50E4DD9B5F'X\n"
- title: 6. Device Name Collision Processing
  contents:
  - "6. Device Name Collision Processing\n   Device name collision occurs when a Telnet\
    \ client sends the Telnet\n   server a virtual device name that it wants to use,\
    \ but that device is\n   already in use on the server.  When this occurs, the\
    \ Telnet server\n   sends a request to the client asking it to try another device\
    \ name.\n   The environment option negotiation uses the USERVAR name of DEVNAME\n\
    \   to communicate the virtual device name.  The following shows how the\n   Telnet\
    \ server will request the Telnet client to send a different\n   DEVNAME when device\
    \ name collision occurs.\n   AS/400 Telnet server             Enhanced Telnet\
    \ client\n   --------------------------       -------------------------\n   IAC\
    \ SB NEW-ENVIRON SEND\n   VAR USERVAR IAC SE         -->\n   Server requests all\
    \ environment variables be sent.\n                                    IAC SB NEW-ENVIRON\
    \ IS USERVAR\n                                    \"DEVNAME\" VALUE \"MYDEVICE1\"\
    \n                                    USERVAR \"xxxxx\" VALUE \"xxx\"\n      \
    \                              ...\n                              <--   IAC SE\n\
    \   Client sends all environment variables, including DEVNAME.  Server\n   tries\
    \ to select device MYDEVICE1.  If the device is already in use,\n   server requests\
    \ DEVNAME be sent again.\n   IAC SB NEW-ENVIRON SEND\n   USERVAR \"DEVNAME\" IAC\
    \ SE   -->\n   Server sends a request for a single environment variable: DEVNAME\n\
    \                                    IAC SB NEW-ENVIRON IS USERVAR\n         \
    \                     <--   \"DEVNAME\" VALUE \"MYDEVICE2\" IAC SE\n   Client\
    \ sends one environment variable, calculating a new value of\n   MYDEVICE2.  If\
    \ MYDEVICE2 is different from the last request, then\n   server tries to select\
    \ device MYDEVICE2, else server disconnects\n   client.  If MYDEVICE2 is also\
    \ in use, server will send DEVNAME\n   request again, and keep doing so until\
    \ it receives a device that is\n   not in use, or the same device name twice in\
    \ row.\n"
- title: 7. Enhanced Printer Emulation Support
  contents:
  - "7. Enhanced Printer Emulation Support\n   RFC 1572 style USERVAR variables have\
    \ been defined to allow a\n   compliant Telnet client more control over the Telnet\
    \ server virtual\n   device on the AS/400.  These USERVAR's allow the client Telnet\
    \ to\n   select a previously created virtual device or auto-create a new\n   virtual\
    \ device with requested attributes.\n   This makes the enhancements available\
    \ to any Telnet client that\n   chonoses to support the new negotiations.\n  \
    \ The USERVAR's defined to accomplish this are:\n   USERVAR       VALUE      \
    \      EXAMPLE           DESCRIPTION\n   ------------- ---------------- ----------------\
    \  -------------------\n   DEVNAME       us-ascii char(x) PRINTER1          Printer\
    \ device name\n   IBMIGCFEAT    us-ascii char(6) 2424J0            IGC feature\
    \ (DBCS)\n   IBMMSGQNAME   us-ascii char(x) QSYSOPR           *MSGQ name\n   IBMMSGQLIB\
    \    us-ascii char(x) QSYS              *MSGQ library\n   IBMFONT       us-ascii\
    \ char(x) 12                Font\n   IBMFORMFEED   us-ascii char(1) C | U | A\
    \         Formfeed\n   IBMTRANSFORM  us-ascii char(1) 1 | 0             Transform\n\
    \   IBMMFRTYPMDL  us-ascii char(x) *IBM42023         Mfg. type and model\n   IBMPPRSRC1\
    \    binary(1)        1-byte hex field  Paper source 1\n   IBMPPRSRC2    binary(1)\
    \        1-byte hex field  Paper source 2\n   IBMENVELOPE   binary(1)        1-byte\
    \ hex field  Envelope hopper\n   IBMASCII899   us-ascii char(1) 1 | 0        \
    \     ASCII 899 support\n   IBMWSCSTNAME  us-ascii char(x) *NONE             WSCST\
    \ name\n   IBMWSCSTLIB   us-ascii char(x) *LIBL             WSCST library\n  \
    \ x - up to a maximum of 10 characters\n   The \"IBM\" prefix on the USERVAR's\
    \ denotes AS/400 specific attributes.\n   The DEVNAME USERVAR is used both for\
    \ displays and printers.  The\n   IBMFONT and IBMASCII899 are used only for SBCS\
    \ environments.\n   For a description of most of these parameters (drop the \"\
    IBM\" from\n   the USERVAR) and their permissible values, refer to Chapter 8 in\
    \ the\n   Communications Configuration Reference [5].\n   The IBMIGCFEAT supports\
    \ the following variable DBCS language\n   identifiers in position 5 (positions\
    \ 1-4 must be '2424', position 6\n   must be '0'):\n        'J' = Japanese   \
    \           'K' = Korean\n        'C' = Traditional Chinese   'S' = Simplified\
    \ Chinese\n   The IBMTRANSFORM and IBMASCII899 values correspond to:\n       \
    \ '1' = Yes  '2' = No\n   The IBMFORMFEED values correspond to:\n        'C' =\
    \ Continuous  'U' = Cut  'A' = Autocut\n   The IBMPPRSRC1, IBMPPRSRC2 and IBMENVELOPE\
    \ custom USERVAR's do not\n   map directly to their descriptions in Chapter 8\
    \ in the Communications\n   Configuration Reference [5].  To map these, use the\
    \ index listed\n   here:\n   IBMPPRSRC1    HEX     IBMPPRSRC2    HEX     IBMENVELOPE\
    \    HEX\n   ----------   -----    ----------   -----    -----------   -----\n\
    \   *NONE        'FF'X    *NONE        'FF'X    *NONE         'FF'X\n   *MFRTYPMDL\
    \   '00'X    *MFRTYPMDL   '00'X    *MFRTYPMDL    '00'X\n   *LETTER      '01'X\
    \    *LETTER      '01'X    *B5           '06'X\n   *LEGAL       '02'X    *LEGAL\
    \       '02'X    *MONARCH      '09'X\n   *EXECUTIVE   '03'X    *EXECUTIVE   '03'X\
    \    *NUMBER9      '0A'X\n   *A4          '04'X    *A4          '04'X    *NUMBER10\
    \     '0B'X\n   *A5          '05'X    *A5          '05'X    *C5           '0C'X\n\
    \   *B5          '06'X    *B5          '06'X    *DL           '0D'X\n   *CONT80\
    \      '07'X    *CONT80      '07'X\n   *CONT132     '08'X    *CONT132     '08'X\n\
    \   *A3          '0E'X    *A3          '0E'X\n   *B4          '0F'X    *B4   \
    \       '0F'X\n   *LEDGER      '10'X    *LEDGER      '10'X\n   Note 1:  For IBMPPRSRC2,\
    \ *CONT80 and *CONT132 support starts at V3R7.\n   Note 2:  For IBMPPRSRC1 and\
    \ IBMPPRSRC2, *A3, *B4 and *LEDGER support\n   starts at V3R7.\n"
- title: 8. Telnet Printer Terminal Types
  contents:
  - "8. Telnet Printer Terminal Types\n   New Telnet options are defined for the printer\
    \ pass-through mode of\n   operation.  To enable printer pass-through mode, both\
    \ the client and\n   server must agree to at least support the Transmit-Binary,\
    \ End-Of-\n   Record, and Terminal-Type Telnet options.  The following are new\n\
    \   terminal types for printers:\n   TERMINAL-TYPE  DESCRIPTION\n   -------------\
    \  -------------------\n   IBM-5553-B01   Double-Byte printer\n   IBM-3812-1 \
    \    Single-Byte printer\n   Specific characteristics of the IBM-5553-B01 or IBM-3812-1\
    \ printers\n   are specified through the USERVAR IBMMFRTYPMDL, which specifies\
    \ the\n   manufacturer type and model.\n   An example of a typical negotiation\
    \ process to establish printer\n   pass-through mode of operation is shown below.\
    \  In this example, the\n   server initiates the negotiation by sending the DO\
    \ TERMINAL-TYPE\n   request.\n   For DBCS environments, if IBMTRANSFORM is set\
    \ to 1 (use Host Print\n   Transform), then the virtual device created is 3812,\
    \ not 5553.\n   Therefore, IBM-3812-1 should be negotiated for TERMINAL-TYPE,\
    \ and not\n   IBM-5553-B01.\n   AS/400 Telnet server            Enhanced Telnet\
    \ client\n   --------------------------      --------------------------\n   IAC\
    \ DO NEW-ENVIRON         -->\n                              <--  IAC WILL NEW-ENVIRON\n\
    \   IAC SB NEW-ENVIRON SEND\n   VAR USERVAR IAC SE         -->\n             \
    \                      IAC SB NEW-ENVIRON IS\n                               \
    \    USERVAR \"DEVNAME\" VALUE \"PCPRINTER\"\n                               \
    \    USERVAR \"IBMMSGQNAME\" VALUE \"QSYSOPR\"\n                             \
    \      USERVAR \"IBMMSGQLIB\" VALUE \"*LIBL\"\n                              \
    \     USERVAR \"IBMTRANSFORM\" VALUE \"0\"\n                                 \
    \  USERVAR \"IBMFONT\" VALUE \"12\"\n                                   USERVAR\
    \ \"IBMFORMFEED\" VALUE \"C\"\n                                   USERVAR \"IBMPPRSRC1\"\
    \ VALUE ESC '01'X\n                                   USERVAR \"IBMPPRSRC2\" VALUE\
    \ '04'X\n                                   USERVAR \"IBMENVELOPE\" VALUE IAC\
    \ 'FF'X\n                              <--  IAC SE\n   IAC DO TERMINAL-TYPE  \
    \     -->\n                              <--  IAC WILL TERMINAL-TYPE\n   IAC SB\
    \ TERMINAL-TYPE SEND\n   IAC SE                     -->\n                    \
    \               IAC SB TERMINAL-TYPE IS IBM-3812-1\n                         \
    \     <--  IAC SE\n   IAC DO BINARY              -->\n                       \
    \       <--  IAC WILL BINARY\n   IAC DO EOR                 -->\n            \
    \                  <--  IAC WILL EOR\n   Some points about the above example.\
    \  The IBMPPRSRC1 value requires\n   escaping the value using ESC according to\
    \ RFC 1572 [13].  The\n   IBMPPRSRC2 does not require an ESC character since '04'X\
    \ has no\n   conflict with RFC 1572 options.  Finally, to send 'FF'X for the\n\
    \   IBMENVELOPE value, escape the 'FF'X value by using another 'FF'X\n   (called\
    \ \"doubling\"), so as not to have the value interpreted as a\n   Telnet character\
    \ per RFC 854 [8].\n   Actual bytes transmitted in the above example are shown\
    \ in hex below.\n   AS/400 Telnet server             Enhanced Telnet client\n\
    \   --------------------------       --------------------------\n   FF FD 27 \
    \                   -->\n                               <--  FF FB 27\n   FF FA\
    \ 27 01 00 03 FF F0     -->\n                                    FF FA 27 00 03\
    \ 44 45 56\n                                    4E 41 4D 45 01 50 43 50\n    \
    \                                52 49 4E 54 45 52 03 49\n                   \
    \                 42 4D 4D 53 47 51 4E 41\n                                  \
    \  4D 45 01 51 53 59 53 4F\n                                    50 52 03 49 42\
    \ 4D 4D 53\n                                    47 51 4C 49 42 01 2A 4C\n    \
    \                                49 42 4C 03 49 42 4D 54\n                   \
    \                 52 41 4E 53 46 4F 52 4D\n                                  \
    \  01 30 03 49 42 4D 46 4F\n                                    4E 54 01 31 32\
    \ 03 49 42\n                                    4D 46 4F 52 4D 46 45 45\n    \
    \                                44 01 43 03 49 42 4D 50\n                   \
    \                 50 52 53 52 43 31 01 02\n                                  \
    \  01 03 49 42 4D 50 50 52\n                                    53 52 43 32 01\
    \ 04 03 49\n                                    42 4D 45 4E 56 45 4C 4F\n    \
    \                           <--  50 45 01 FF FF FF F0\n   FF FD 18           \
    \         -->\n                               <--  FF FB 18\n   FF FA 18 01 FF\
    \ F0           -->\n                                    FF FA 18 00 49 42 4D 2D\n\
    \                               <--  33 38 31 32 2D 31 FF F0\n   FF FD 00    \
    \                -->\n                               <--  FF FB 00\n   FF FD 19\
    \                    -->\n                                    FF FB 19\n"
- title: 9. Telnet Printer Startup Response Record for Printer Emulators
  contents:
  - "9. Telnet Printer Startup Response Record for Printer Emulators\n   Once Telnet\
    \ negotiation for a 5250 pass-through mode is completed,\n   the 5250 Telnet server\
    \ will initiate a virtual printer power-on\n   sequence on behalf of the Telnet\
    \ client.  The Telnet server will\n   supply a Startup Response Record to the\
    \ Telnet client with the status\n   of the printer power-on sequence, indicating\
    \ success or failure of\n   the virtual printer power-on sequence.\n   This section\
    \ shows an example of two Startup Response Records.  The\n   source device is\
    \ a type 3812 model 01 printer with name \"PCPRINTER\"\n   on the target system\
    \ \"TARGET\".\n   Figure 1 shows an example of a successful response; Figure 2\
    \ shows an\n   example of an error response.\n"
- title: 9.1 Example of a Success Response Record
  contents:
  - "9.1 Example of a Success Response Record\n   The response record in Figure 1\
    \ was sent by an AS/400 at Release\n   V4R2.  It is an example of the target sending\
    \ back a successful\n   Startup Response Record.\n   +------------------------------------------------------------------+\n\
    \   |       +-----  Pass-Through header                                |\n   |\
    \       |          +---  Response data                             |\n   |   \
    \    |          |            +----  Start diagnostic information|\n   |      \
    \ |          |            |                                  |\n   | +----------++----------++---------------------------------------\
    \ |\n   | |          ||          ||                                        |\n\
    \   | 004912A090000560060020C0003D0000C9F9F0F2E3C1D9C7C5E34040D7C3D7D9 |\n   |\
    \                                 |      | T A R G E T     P C P R |\n   |   \
    \                              +------+                         |\n   |      \
    \                     Response Code (I902)                   |\n   |         \
    \                                                         |\n   | ----------------------------------------------------------------\
    \ |\n   |                                                                  |\n\
    \   | C9D5E3C5D9400000000000000000000000000000000000000000000000000000 |\n   |\
    \  I N T E R                                                       |\n   |   \
    \                                                               |\n   |      \
    \            +------- End of diagnostic information          |\n   |         \
    \         |                                               |\n   | -----------------+\
    \                                               |\n   |                  |   \
    \                                            |\n   | 000000000000000000      \
    \                                         |\n   +------------------------------------------------------------------+\n\
    \    Figure 1. Example of a success response record.\n   - '0049'X = Length pass-through\
    \ data, including this length field\n   - '12A0'X = GDS LU6.2 header\n   - '90000560060020C0003D0000'X\
    \ = Fixed value fields\n   - 'C9F9F0F2'X                 = Response Code (I902)\n\
    \   - 'E3C1D9C7C5E34040'X         = System Name (TARGET)\n   - 'D7C3D7D9C9D5E3C5D940'X\
    \     = Object Name (PCPRINTER)\n"
- title: 9.2 Example of an Error Response Record
  contents:
  - "9.2 Example of an Error Response Record\n   The response record in Figure 2 is\
    \ one that reports an error.  The\n   virtual device named \"PCPRINTER\", is not\
    \ available on the target\n   system \"TARGET\", because the device is not available.\
    \  You would\n   normally see this error if the printer was already assigned to\n\
    \   another Telnet session.\n   +------------------------------------------------------------------+\n\
    \   |       +-----  Pass-Through header                                |\n   |\
    \       |          +---  Response data                             |\n   |   \
    \    |          |            +----  Start diagnostic information|\n   |      \
    \ |          |            |                                  |\n   | +----------++----------++---------------------------------------\
    \ |\n   | |          ||          ||                                        |\n\
    \   | 004912A09000056006008200003D0000F8F9F0F2E3C1D9C7C5E34040D7C3D7D9 |\n   |\
    \                                 |      | T A R G E T     P C P R |\n   |   \
    \                              +------+                         |\n   |      \
    \                     Response Code (8902)                   |\n   |         \
    \                                                         |\n   | ----------------------------------------------------------------\
    \ |\n   |                                                                  |\n\
    \   | C9D5E3C5D9400000000000000000000000000000000000000000000000000000 |\n   |\
    \  I N T E R                                                       |\n   |   \
    \                                                               |\n   |      \
    \            +------- End of diagnostic information          |\n   |         \
    \         |                                               |\n   | -----------------+\
    \                                               |\n   |                  |   \
    \                                            |\n   | 000000000000000000      \
    \                                         |\n   +------------------------------------------------------------------+\n\
    \    Figure 2. Example of an error response record.\n   - '0049'X = Length pass-through\
    \ data, including this length field\n   - '12A0'X = GDS LU6.2 header\n   - '90000560060020C0003D0000'X\
    \ = Fixed value fields\n   - 'F8F9F0F2'X                 = Response Code (8902)\n\
    \   - 'E3C1D9C7C5E34040'X         = System Name (TARGET)\n   - 'D7C3D7D9C9D5E3C5D940'X\
    \     = Object Name (PCPRINTER)\n"
- title: 9.3 Response Codes
  contents:
  - "9.3 Response Codes\n   The Start-Up Response Record success response codes:\n\
    \   CODE    DESCRIPTION\n   ----    ------------------------------------------------------\n\
    \   I901    Virtual device has less function than source device\n   I902    Session\
    \ successfully started\n   I906    Automatic sign-on requested, but not allowed.\n\
    \           Session still allowed; a sign-on screen will be\n           coming.\n\
    \   The Start-Up Response Record error response codes:\n   CODE    DESCRIPTION\n\
    \   ----    ------------------------------------------------------\n   2702  \
    \  Device description not found.\n   2703    Controller description not found.\n\
    \   2777    Damaged device description.\n   8901    Device not varied on.\n  \
    \ 8902    Device not available.\n   8903    Device not valid for session.\n  \
    \ 8906    Session initiation failed.\n   8907    Session failure.\n   8910   \
    \ Controller not valid for session.\n   8916    No matching device found.\n  \
    \ 8917    Not authorized to object.\n   8918    Job canceled.\n   8920    Object\
    \ partially damaged.\n   8921    Communications error.\n   8922    Negative response\
    \ received.\n   8923    Start-up record built incorrectly.\n   8925    Creation\
    \ of device failed.\n   8928    Change of device failed.\n   8929    Vary on or\
    \ vary off failed.\n   8930    Message queue does not exist.\n   8934    Start-up\
    \ for S/36 WSF received.\n   8935    Session rejected.\n   8936    Security failure\
    \ on session attempt.\n   8937    Automatic sign-on rejected.\n   8940    Automatic\
    \ configuration failed or not allowed.\n   I904    Source system at incompatible\
    \ release.\n"
- title: 10. Printer Steady-State Pass-Through Interface
  contents:
  - "10. Printer Steady-State Pass-Through Interface\n   The information in this section\
    \ applies to the passthrough session\n   after the receipt of startup confirmation\
    \ records is complete.\n   Following is the printer header interface used by Telnet.\n\
    \   +------------------------------------------------------------------+\n   |\
    \   +-- Length of structure (LLLL)                                 |\n   |   |\
    \                                                              |\n   |   |   \
    \ +-- GDS identifier                                        |\n   |   |    | \
    \                                                        |\n   |   |    |    +--\
    \ Data flow record                                 |\n   |   |    |    |     \
    \                                               |\n   |   |    |    |   +-- Length\
    \ of pass-through specific header (LL)  |\n   |   |    |    |   |            \
    \                                    |\n   |   |    |    |   |   +-- Flags   \
    \                                 |\n   |   |    |    |   |   |              \
    \                              |\n   |   |    |    |   |   |   +-- Printer operation\
    \ code               |\n   |   |    |    |   |   |   |                       \
    \                 |\n   |   |    |    |   |   |   |      +-- Diagnostic field\
    \ - zero pad to|\n   |   |    |    |   |   |   |      |   LL specified       \
    \           |\n   |   |    |    |   |   |   |      |                         \
    \        |\n   |   |    |    |   |   |   |      |            +-- Printer data\
    \     |\n   |   |    |    |   |   |   |      |            |                  \
    \  |\n   | +--+ +--+ +--+ ++ +--+ ++ +----------+ +----------------+        |\n\
    \   | |  | |  | |  | || |  | || |          | |                |        |\n   |\
    \ xxxx 12A0 xxxx xx xxxx xx xxxxxxxxxxxx ... print data ...        |\n   |   \
    \                                                               |\n   +------------------------------------------------------------------+\n\
    \    Figure 3. Layout of the printer pass-through header\n   BYTES 0-1:   Length\
    \ of structure including this field (LLLL)\n   BYTES 2-3:   GDS Identifier ('12A0'X)\n\
    \   BYTE 4-5:    Data flow record\n                This field contains flags that\
    \ describe what type of\n                data pass-through should expect to find\
    \ following this\n                header.  Generally, bits 0-2 in the first byte\
    \ are\n                mutually exclusive (that is, if one of them is set to '\n\
    \                1'B, the rest will be set to '0'B.) The bits, and their\n   \
    \             meanings follow.\n                BIT       DESCRIPTION\n      \
    \          0         Start-Up confirmation\n                1         Termination\
    \ record\n                2         Start-Up Record\n                3       \
    \  Diagnostic information included\n                4 - 5     Reserved\n     \
    \           6         Reserved\n                7         Printer record\n   \
    \             8 - 13    Reserved\n                14        Client-originated\
    \ (inbound) printer record\n                15        Server-originated (outbound)\
    \ printer record\n   BYTE 6:      Length printer pass-through header including\
    \ this\n                field (LL)\n   BYTES 7-8:   Flags\n     BYTE 7 BITS: \
    \ xxxx x111 --> Reserved\n                   xxxx 1xxx --> Last of chain\n   \
    \                xxx1 xxxx --> First of chain\n                   xx1x xxxx -->\
    \ Printer now ready\n                   x1xx xxxx --> Intervention Required\n\
    \                   1xxx xxxx --> Error Indicator\n     BYTE 8 BITS:  xxxx xxxx\
    \ --> Reserved\n   BYTE 9:      Printer operation code\n                '01'X\
    \  Print/Print complete\n                '02'X  Clear Print Buffers\n   BYTE 10-LL:\
    \  Diagnostic information (1)\n     If BYTE 7 = xx1x xxxx then bytes 10-LL may\
    \ contain:\n        Printer ready                C9 00 00 00 02\n     If BYTE\
    \ 7 = x1xx xxxx then bytes 10-LL may contain: (2)\n        Command/parameter not\
    \ valid  C9 00 03 02 2x\n        Print check                  C9 00 03 02 3x\n\
    \        Forms check                  C9 00 03 02 4x\n        Normal periodic\
    \ condition    C9 00 03 02 5x\n        Data stream error            C9 00 03 02\
    \ 6x\n        Machine/print/ribbon check   C9 00 03 02 8x\n     If BYTE 7 = 1xxx\
    \ xxxx then bytes 10-LL may contain: (3)\n        Cancel                     \
    \  08 11 02 00\n        Invalid print parameter      08 11 02 29\n        Invalid\
    \ print command        08 11 02 28\n   Diagnostic information notes:\n   1.  LL\
    \ is the length of the structure defined in Byte 6.  If no\n       additional\
    \ data is present, the remainder of the structure must\n       be padded with\
    \ zeroes.\n   2.  These are printer SIGNAL commands.  Further information on these\n\
    \       commands may be obtained from the 5494 Remote Control Unit\n       Functions\
    \ Reference guide [2].  Refer to your AS/400 printer\n       documentation for\
    \ more specific information on these data stream\n       exceptions.  Some 3812\
    \ and 5553 errors that may be seen:\n       Machine check              C9 00 03\
    \ 02 11\n       Graphics check             C9 00 03 02 26\n       Print check\
    \                C9 00 03 02 31\n       Form jam                   C9 00 03 02\
    \ 41\n       Paper jam                  C9 00 03 02 47\n       End of forms  \
    \             C9 00 03 02 50\n       Printer not ready          C9 00 03 02 51\n\
    \       Data stream - class 1      C9 00 03 02 66 loss of text\n       Data stream\
    \ - class 2      C9 00 03 02 67 text appearance\n       Data stream - class 3\
    \      C9 00 03 02 68 multibyte control error\n       Data stream - class 4  \
    \    C9 00 03 02 69 multibyte control parm\n       Cover unexpectedly open   \
    \ C9 00 03 02 81\n       Machine check              C9 00 03 02 86\n       Machine\
    \ check              C9 00 03 02 87\n       Ribbon check               C9 00 03\
    \ 02 88\n   3.  These are printer negative responses.  Further information on\n\
    \       these commands may be obtained from the 5494 Remote Control Unit\n   \
    \    Functions Reference guide [2].\n       The print data will start in byte\
    \ LL+1.\n"
- title: 10.1 Example of a Print Record
  contents:
  - "10.1 Example of a Print Record\n   Figure 4 shows the server sending the client\
    \ data with a print\n   record.  This is normally seen following receipt of a\
    \ Success\n   Response Record, such as the example in Figure 1.\n  +--------------------------------------------------------------------+\n\
    \  |   +-- Length of structure (LLLL)                                   |\n  |\
    \   |    +-- GDS identifier                                          |\n  |  \
    \ |    |    +-- Data flow record                                   |\n  |   |\
    \    |    |   +-- Length of pass-through specific header (LL)    |\n  |   |  \
    \  |    |   |   +-- Flags                                      |\n  |   |    |\
    \    |   |   |   +-- Printer operation code                 |\n  |   |    |  \
    \  |   |   |   |      +-- Zero pad to LL specified (0A)   |\n  |   |    |    |\
    \   |   |   |      |            +-- Printer data       |\n  |   |    |    |  \
    \ |   |   |      |            |                      |\n  | +--+ +--+ +--+ ++\
    \ +--+ ++ +----------+ +---------------------------|\n  | |  | |  | |  | || |\
    \  | || |          | |                           |\n  | 0085 12A0 0101 0A 1800\
    \ 01 000000000000 34C4012BD20345FF2BD2044C0002|\n  |                         \
    \                                           |\n  | ------------------------------------------------------------\
    \       |\n  |                                                               \
    \     |\n  | 2BD2040D00002BD20A8501010201030204022BD20309022BD2061100014A    \
    \   |\n  |                                                                   \
    \ |\n  | ------------------------------------------------------------       |\n\
    \  |                                                                    |\n  |\
    \ 402BD20601010000012BD306F60000FFFF2BD20A48000001000000010100       |\n  |  \
    \                                                                  |\n  | ------------------------------------------------------------\
    \       |\n  |                                                               \
    \     |\n  | 2BD10705000B0090012BD2044900F02BD206404A403DE02BD2041500F034    \
    \   |\n  |                                                                   \
    \ |\n  |    end of printer data                                             |\n\
    \  | -------------------------+                                         |\n  |\
    \                          |                                         |\n  | C4012BD10381FF002BC8034001\
    \                                         |\n  +--------------------------------------------------------------------+\n\
    \   Figure 4. Server sending client data with a print record\n   - '0085'X   \
    \      = Logical record length, including this byte (LLLL)\n   - '12A0'X     \
    \    = GDS LU6.2 header\n   - '0101'X         = Data flow record (server to client)\n\
    \   - '0A'X           = Length of pass-through specific header (LL)\n   - '1800'X\
    \         = First of chain / Last of chain indicators\n   - '01'X           =\
    \ Print\n   - '000000000000'X = Zero pad header to LL specified\n   - '34C401'X\
    \       = First piece of data for spooled data\n   - Remainder is printer data/commands/orders\n"
- title: 10.2 Example of a Print Complete Record
  contents:
  - "10.2 Example of a Print Complete Record\n   Figure 5 shows the client sending\
    \ the server a print complete record.\n   This would normally follow receipt of\
    \ a print record, such as the\n   example in Figure 4.  This indicates successful\
    \ completion of a print\n   request.\n   +-------------------------------------------------------------------+\n\
    \   |   +-- Length of structure (LLLL)                                  |\n  \
    \ |   |    +-- GDS identifier                                         |\n   |\
    \   |    |    +-- Data flow record                                  |\n   |  \
    \ |    |    |   +-- Length of pass-through specific header (LL)   |\n   |   |\
    \    |    |   |   +-- Flags                                     |\n   |   |  \
    \  |    |   |   |   +-- Printer operation code                |\n   |   |    |\
    \    |   |   |   |                                         |\n   | +--+ +--+ +--+\
    \ ++ +--+ ++                                         |\n   | |  | |  | |  | ||\
    \ |  | ||                                         |\n   | 000A 12A0 0102 04 0000\
    \ 01                                         |\n   +-------------------------------------------------------------------+\n\
    \    Figure 5. Client sending server a print complete record\n   - '000A'X = Logical\
    \ record length, including this byte (LLLL)\n   - '12A0'X = GDS LU6.2 header\n\
    \   - '0102'X = Data flow response record (client to server)\n   - '04'X   = Length\
    \ of pass-through specific header (LL)\n   - '0000'X = Good Response\n   - '01'X\
    \   = Print Complete\n"
- title: 10.3 Example of a Null Print Record
  contents:
  - "10.3 Example of a Null Print Record\n   Figure 6 shows the server sending the\
    \ client a null print record.\n   The null print record is the last print command\
    \ the server sends to\n   the client for a print job, and indicates to the printer\
    \ there is no\n   more data.  The null data byte '00'X is optional, and in some\
    \ cases\n   may be omitted (in particular, this scenario occurs in DBCS print\n\
    \   streams).\n   This example would normally follow any number of print records,\
    \ such\n   as the example in Figure 4.  This indicates successful completion of\n\
    \   a print job.  The client normally responds to this null print record\n   with\
    \ another print complete record, such as in Figure 5.\n   +------------------------------------------------------------------+\n\
    \   |   +-- Length of structure (LLLL)                                 |\n   |\
    \   |    +-- GDS identifier                                        |\n   |   |\
    \    |    +-- Data flow record                                 |\n   |   |   \
    \ |    |   +-- Length of pass-through specific header (LL)  |\n   |   |    | \
    \   |   |   +-- Flags                                    |\n   |   |    |    |\
    \   |   |   +-- Printer operation code               |\n   |   |    |    |   |\
    \   |   |      +-- Zero pad to LL specified (0A) |\n   |   |    |    |   |   |\
    \   |      |        +-- Printer data         |\n   |   |    |    |   |   |   |\
    \      |        |                        |\n   | +--+ +--+ +--+ ++ +--+ ++ +----------+\
    \ ++                        |\n   | |  | |  | |  | || |  | || |          | ||\
    \                        |\n   | 0011 12A0 0101 0A 0800 01 000000000000 00   \
    \                     |\n   +------------------------------------------------------------------+\n\
    \    Figure 6. Server sending client a null print record\n   - '0011'X       \
    \  = Logical record length, including this byte\n   - '12A0'X         = GDS LU6.2\
    \ header\n   - '0101'X         = Data flow record\n   - '0A'X           = Length\
    \ of pass-through specific header (LL)\n   - '0800'X         = Last of Chain\n\
    \   - '01'X           = Print\n   - '000000000000'X = Zero pad header to LL specified\n\
    \   - '00'X           = Null data byte\n"
- title: 11. End-to-End Print Example
  contents:
  - "11. End-to-End Print Example\n   The next example shows a full print exchange\
    \ between a Telnet client\n   and server for a 526 byte spooled file.  Selective\
    \ translation of the\n   hexadecimal streams into 1) Telnet negotiations and 2)\
    \ ASCII/EBCDIC\n   characters are done to aid readability.  Telnet negotiations\
    \ are\n   delimited by '(' and ')' parenthesis characters; ASCII/EBCDIC\n   conversions\
    \ are bracketed by '|' vertical bar characters.\n AS/400 Telnet server       \
    \         Enhanced Telnet client\n -------------------------------     ---------------------------------\n\
    \ FFFD27                          -->\n (IAC DO NEW-ENVIRON)\n               \
    \                  <-- FFFB27\n                                     (IAC WILL\
    \ NEW-ENVIRON)\n FFFD18FFFA270103 49424D5253454544\n 7EA5DFDDFD300404 0003FFF0\
    \       -->\n (IAC DO TERMINAL-TYPE\n IAC SB NEW-ENVIRON SEND USERVAR\n IBMRSEED\
    \ xxxxxxxx VAR USERVAR\n IAC SE)\n                                 <-- FFFB18\n\
    \                                     (IAC WILL TERMINAL-TYPE)\n FFFA1801FFF0\
    \                    -->\n (IAC SB TERMINAL-TYPE SEND IAC\n  SE)\n           \
    \                          FFFA27000349424D 52534545447EA5DF\n               \
    \                      DDFD300404000344 45564E414D450144\n                   \
    \                  554D4D5950525403 49424D4D5347514E\n                       \
    \              414D450151535953 4F50520349424D4D\n                           \
    \          5347514C4942012A 4C49424C0349424D\n                               \
    \      464F4E5401313103 49424D5452414E53\n                                   \
    \  464F524D01310349 424D4D4652545950\n                                     4D444C012A485049\
    \ 490349424D505052\n                                     5352433101020103 49424D5050525352\n\
    \                                     433201040349424D 454E56454C4F5045\n    \
    \                                 01FFFF0349424D41 5343494938393901\n        \
    \                         <-- 30FFF0\n                                     (IAC\
    \ SB NEW-ENVIRON IS USERVAR\n                                      IBMRSEED xxxxxxxx\
    \ VAR\n                                      USERVAR DEVNAME VALUE DUMMYPRT\n\
    \                                      USERVAR IBMMSGQNAME VALUE QSYSOPR\n   \
    \                                   USERVAR IBMMSGQLIB VALUE *LIBL\n         \
    \                             USERVAR IBMFONT VALUE 11\n                     \
    \                 USERVAR IBMTRANSFORM VALUE 1\n                             \
    \         USERVAR IBMMFRTYPMDL VALUE *HPII\n                                 \
    \     USERVAR IBMPPRSRC1 VALUE ESC '01'X\n                                   \
    \   USERVAR IBMPPRSRC2 VALUE '04'X\n                                      USERVAR\
    \ IBMENVELOPE VALUE IAC\n                                      USERVAR IBMASCII899\
    \ VALUE 0\n                                      IAC SE)\n                   \
    \              <-- FFFA180049424D2D 333831322D31FFF0\n                       \
    \              (IAC SB TERMINAL-TYPE IS\n                                    \
    \  IBM-3812-1 IAC SE)\n FFFD19                          -->\n (IAC DO EOR)\n \
    \                                <-- FFFB19\n                                \
    \     (IAC WILL EOR)\n FFFB19                          -->\n (IAC WILL EOR)\n\
    \                                 <-- FFFD19\n                               \
    \      (IAC DO EOR)\n FFFD00                          -->\n (IAC DO BINARY)\n\
    \                                 <-- FFFB00\n                               \
    \      (IAC WILL BINARY)\n FFFB00                          -->\n (IAC WILL BINARY)\n\
    \                                 <-- FFFD00\n                               \
    \      (IAC DO BINARY)\n 004912A090000560 060020C0003D0000     |       -   { \
    \   |\n C9F9F0F2C5D3C3D9 E3D7F0F6C4E4D4D4     |I902ELCRTP06DUMM| (EBCDIC)\n E8D7D9E340400000\
    \ 0000000000000000     |YPRT            |\n 0000000000000000 0000000000000000\
    \     |                |\n 0000000000000000 00FFEF           --> |           \
    \     |\n (73-byte startup success response\n  record ... IAC EOR)\n 00DF12A001010A18\
    \ 0001000000000000     |                |\n 03CD1B451B283130 551B287330703130\
    \     |   E (10U (s0p10| (ASCII)\n 2E30306831327630 733062303033541B     |.00h12v0s0b003T\
    \ |\n 287330421B266440 1B266C304F1B266C     |(s0B &d@ &l0O &l|\n 303038431B266C30\
    \ 3035431B28733070     |008C &l005C (s0p|\n 31372E3130683130 7630733062303030\
    \     |17.10h10v0s0b000|\n 541B283130551B28 73307031372E3130     |T (10U (s0p17.10|\n\
    \ 6831307630733062 303030541B287330     |h10v0s0b000T (s0|\n 421B2664401B266C\
    \ 314F1B266C303035     |B &d@ &l1O &l005|\n 431B287330703137 2E31306831307630\
    \     |C (s0p17.10h10v0|\n 733062303030541B 266C314F1B287330     |s0b000T &l1O\
    \ (s0|\n 7031372E31306831 3076307330623030     |p17.10h10v0s0b00|\n 30541B2873307031\
    \ 372E313068313076     |0T (s0p17.10h10v|\n 3073306230303054 1B266C30303543FF\
    \     |0s0b000T &l005C |\n EF                                --> |           \
    \     |\n (... 223-byte print record ...\n  ... first of chain ...\n  ... last\
    \ of chain ... IAC EOR)\n                                   <-- 000A12A001020400\
    \ 0001FFEF\n                                       (10-byte print complete header)\n\
    \ 031012A001010A10 0001000000000000     |                |\n 03FFFF1B451B2831\
    \ 30551B2873307031     |    E (10U (s0p1| (ASCII)\n 372E313068313076 3073306230303054\
    \     |7.10h10v0s0b000T|\n 1B287330421B2664 401B266C314F1B26     | (s0B &d@ &l1O\
    \ &|\n 6C303035431B266C 31481B266C314F1B     |l005C &l1H &l1O |\n 266C3032411B266C\
    \ 31431B266C303030     |&l02A &l1C &l000|\n 38451B266C303038 431B266C30303439\
    \     |8E &l008C &l0049|\n 461B266130521B26 6C303035430A0A0A     |F &a0R &l005C\
    \   |\n 0A0A0A0A1B26612B 3030303130561B26     |     &a+00010V &|\n 6C303035431B2661\
    \ 2B30303231364820     |l005C &a+00216H |\n 2020202020202020 2020202020202020\
    \     |                |\n 2020202020205072 696E74204B657920     |      Print\
    \ Key |\n 4F75747075742020 2020202020202020     |Output          |\n 2020202020202020\
    \ 2020202020202020     |                |\n 2020202020205061 6765202020310D0A\
    \     |      Page   1  |\n 1B26612B30303231 3648202020203537     | &a+00216H \
    \   57|\n 3639535331205634 52334D3020393830     |69SS1 V4R3M0 980|\n 373203FFFF392020\
    \ 2020202020202020     |72   9          |\n 202020202020454C 4352545030362020\
    \     |      ELCRTP06  |\n 2020202020202020 202030332F33312F     |          03/31/|\n\
    \ 3939202031363A33 303A34350D0A1B26     |99  16:30:45   &|\n 612B303032313648\
    \ 0D0A1B26612B3030     |a+00216H   &a+00|\n 3231364820202020 446973706C617920\
    \     |216H    Display |\n 4465766963652020 2E202E202E202E20     |Device  . .\
    \ . . |\n 2E203A2020515041 444556303033510D     |. :  QPADEV003Q |\n 0A1B26612B303032\
    \ 3136482020202055     |  &a+00216H    U|\n 73657220202E202E 202E202E202E202E\
    \     |ser  . . . . . .|\n 202E202E202E202E 203A202052434153     | . . . . : \
    \ RCAS|\n 54524F0D0A1B2661 2B3030323136480D     |TRO   &a+00216H |\n 0A1B26612B303032\
    \ 313648204D41494E     |  &a+00216H MAIN|\n 2020202020202020 2020202020202020\
    \     |                |\n 2020202020202020 20202041532F3430     |           AS/40|\n\
    \ 30204D61696E204D 656E750D0A1B2661     |0 Main Menu   &a|\n 2B30303203FFFF31\
    \ 3648202020202020     |+002   16H      |\n 2020202020202020 2020202020202020\
    \     |                |\n 2020202020202020 2020202020202020     |           \
    \     |\n 2020202020202020 2020202020202020     |                |\n 2020202020202053\
    \ 797374656D3A2020     |       System:  |\n 20454C4352545030 360D0A1B26612B30\
    \     | ELCRTP06   &a+0|\n 3032313648205365 6C656374206F6E65     |0216H Select\
    \ one|\n 206F662074686520 666F6C6C6F77696E     | of the followin|\n 673A0D0A1B26612B\
    \ 3030323136480D0A     |g:   &a+00216H  |\n 1B26612B30303231 3648202020202020\
    \     | &a+00216H      |\n 312E205573657220 7461736B730D0A1B     |1. User tasks\
    \   |\n 26612B3030323136 4820202020202032     |&a+00216H      2|\n 2E204F6666696365\
    \ 207461736B730D0A     |. Office tasks  |\n 1B26612B30303231 36480D0A1B26612B\
    \     | &a+00216H   &a+|\n 3030323136482020 20202020342E2046     |00216H     \
    \ 4. F|\n 696C65732C206C69 627261726965732C     |iles, libraries,|\n 20616EFFEF\
    \                            | an             |\n (... 784-byte print record ...\n\
    \  ... first of chain ... IAC EOR)\n                                   <-- 000A12A001020400\
    \ 0001FFEF\n                                       (10-byte print complete header)\n\
    \ 020312A001010A00 0001000000000000     |                |\n 64206603FFFF6F6C\
    \ 646572730D0A1B26     |d f   olders   &| (ASCII)\n 612B303032313648 0D0A1B26612B3030\
    \     |a+00216H   &a+00|\n 3231364820202020 2020362E20436F6D     |216H      6.\
    \ Com|\n 6D756E6963617469 6F6E730D0A1B2661     |munications   &a|\n 2B3030323136480D\
    \ 0A1B26612B303032     |+00216H   &a+002|\n 3136482020202020 20382E2050726F62\
    \     |16H      8. Prob|\n 6C656D2068616E64 6C696E670D0A1B26     |lem handling\
    \   &|\n 612B303032313648 202020202020392E     |a+00216H      9.|\n 20446973706C6179\
    \ 2061206D656E750D     | Display a menu |\n 0A1B26612B303032 3136482020202020\
    \     |  &a+00216H     |\n 31302E20496E666F 726D6174696F6E20     |10. Information\
    \ |\n 417373697374616E 74206F7074696F6E     |Assistant option|\n 730D0A1B26612B30\
    \ 3032313648202020     |s   &a+00216H   |\n 202031312E20436C 69656E7420416363\
    \     |  11. Client Acc|\n 6573732F34303020 7461736B730D0A1B     |ess/400 tasks\
    \   |\n 26612B3030323136 480D0A1B26612B30     |&a+00216H   &a+0|\n 303231364803ED20\
    \ 2020202039302E20     |0216H       90. |\n 5369676E206F6666 0D0A1B26612B3030\
    \     |Sign off   &a+00|\n 323136480D0A1B26 612B303032313648     |216H   &a+00216H|\n\
    \ 2053656C65637469 6F6E206F7220636F     | Selection or co|\n 6D6D616E640D0A1B\
    \ 26612B3030323136     |mmand   &a+00216|\n 48203D3D3D3E0D0A 1B26612B30303231\
    \     |H ===>   &a+0021|\n 36480D0A1B26612B 3030323136482046     |6H   &a+00216H\
    \ F|\n 333D457869742020 2046343D50726F6D     |3=Exit   F4=Prom|\n 707420202046393D\
    \ 5265747269657665     |pt   F9=Retrieve|\n 2020204631323D43 616E63656C202020\
    \     |   F12=Cancel   |\n 4631333D496E666F 726D6174696F6E20     |F13=Information\
    \ |\n 417373697374616E 740D0A1B26612B30     |Assistant   &a+0|\n 3032313648204632\
    \ 333D53657420696E     |0216H F23=Set in|\n 697469616C206D65 6E750D0A1B26612B\
    \     |itial menu   &a+|\n 3030323136480D0A 1B26612B30303231     |00216H   &a+0021|\n\
    \ 36480D0CFFEF                          |6H              |\n (... 515-byte print\
    \ record ...\n  IAC EOR)\n                                   <-- 000A12A001020400\
    \ 0001FFEF\n                                       (10-byte print complete header)\n\
    \ 001412A001010A00 0001000000000000     |                |\n 03021B45FFEF    \
    \                      |   E            |  (ASCII)\n (... 20-byte print record\
    \ ...\n  IAC EOR)\n                                   <-- 000A12A001020400 0001FFEF\n\
    \                                       (10-byte print complete header)\n 001112A001010A08\
    \ 0001000000000000\n 00FFEF                            -->\n (... 17-byte NULL\
    \ print record ...\n  ... last of chain ... IAC EOR)\n                       \
    \            <-- 000A12A001020400 0001FFEF\n                                 \
    \      (10-byte print complete header)\n"
- title: 12. Authors' Note
  contents:
  - "12. Authors' Note\n   Discussion of this memo should occur in one of these mailing\
    \ lists:\n      TN3270E List (Roger Fajman raf@cu.nih.gov).  Send subscription\n\
    \      requests as e-mail with \"subscribe tn3270e your_full_name\" to\n     \
    \ listserv@list.nih.gov.\n      Midrange-L List (David Gibbs david@midrange.com).\
    \  Send\n      subscription requests as email with \"subscribe midrange-l\n  \
    \    your_internet_address\" to majordomo@midrange.com.\n      Telnet Working\
    \ Group Mailing List:  Send subscription requests as\n      email with \"subscribe\
    \ telnet-ietf\" to telnet-ietf-\n      request@bsdi.com.\n"
- title: 13. References
  contents:
  - "13. References\n   [1]   IBM, \"IBM 5250 Information Display System, Functions\
    \ Reference\n         Manual\", SA21-9247-6, March 1987.\n   [2]   IBM, \"5494\
    \ Remote Control Unit, Functions Reference\", SC30-\n         3533-04, August\
    \ 1995.\n   [3]   IBM, \"AS/400 System API Reference\", SC41-5801-01, February\n\
    \         1998.\n   [4]   IBM, \"AS/400 TCP/IP Configuration and Reference\",\
    \ SC41-5420-02,\n         September 1998.\n   [5]   IBM, \"AS/400 Communications\
    \ Configuration\", SC41-5401-00,\n         August 1997.\n   [6]   IBM, \"SNA Formats\"\
    , GA27-3136-13, November 1993.\n   [7]   IBM, \"Using the Pageprinter 3812 with\
    \ System/36 or System/38\",\n         S544-3343-01, September 1997.\n   [8]  \
    \ Postel, J. and J. Reynolds, \"Telnet Protocol Specification\",\n         STD\
    \ 8, RFC 854, May 1983.\n   [9]   Postel, J. and J. Reynolds, \"Telnet Option\
    \ Specifications\", STD\n         8, RFC 855, May 1983.\n   [10]  Postel, J. and\
    \ J. Reynolds, \"Telnet Binary Transmission\", STD\n         27, RFC 856, May\
    \ 1983.\n   [11]  VanBokkeln, J., \"Telnet Terminal-Type Option\", RFC 1091,\n\
    \         February 1989.\n   [12]  Postel, J. and J. Reynolds, \"Telnet End of\
    \ Record Option\", RFC\n         885, December 1983.\n   [13]  Alexander, S.,\
    \ \"Telnet Environment Option\", RFC 1572, January\n         1994.\n   [14]  Chmielewski,\
    \ P., \"5250 Telnet Interface\", RFC 1205, February\n         1991.\n   [15] \
    \ Postel, J. and J. Reynolds, \"Telnet Supress Go Ahead Option\",\n         STD\
    \ 29, RFC 858, May 1983.\n   [16]  IBM, \"AS/400 National Language Support\",\
    \ SC41-5101-01, February\n         1998.\n   [17]  Data Encryption Standard (DES),\
    \ Federal Information Processing\n         Standards Publication 46-2, January\
    \ 22, 1988.\n   [18]  DES Modes of Operation, Federal Information Processing\n\
    \         Standards Publication 81, December 1980.\n   [19]  Reynolds, J. and\
    \ J. Postel, \"Assigned Numbers\", STD 2, RFC\n         1700, October 1994.\n\
    \   [20]  IBM, \"IBM Pageprinter 3812 Programming Reference\", S544-3268.\n"
- title: 14. Security Considerations
  contents:
  - "14. Security Considerations\n   Security considerations of passwords are discussed\
    \ in Section 6.\n"
- title: 15. Authors' Addresses
  contents:
  - "15. Authors' Addresses\n   Thomas E. Murphy, Jr.\n   IBM Corporation\n   1701\
    \ North Street\n   Endicott, NY 13760\n   Phone:  (607) 752-5482\n   Fax:    (607)\
    \ 752-5421\n   EMail:  murphyte@us.ibm.com\n   Paul F. Rieth\n   IBM Corporation\n\
    \   1701 North Street\n   Endicott, NY 13760\n   Phone:  (607) 752-5474\n   Fax:\
    \    (607) 752-5421\n   EMail:  rieth@us.ibm.com\n   Jeffrey S. Stevens\n   IBM\
    \ Corporation\n   1701 North Street\n   Endicott, NY 13760\n   Phone:  (607) 752-5488\n\
    \   Fax:    (607) 752-5421\n   EMail:  jssteven@us.ibm.com\n"
- title: 16. Relation to Other RFC's
  contents:
  - "16. Relation to Other RFC's\n   UPDATES\n      This memo is an update to RFC\
    \ 1205 [14], which describes the 5250\n      Telnet Interface.  This update enhances\
    \ that description to\n      include device negotiation as well as printer support.\n\
    \      This memo makes use of RFC 1572 [13] to enhance communications\n      with\
    \ 5250 Telnet clients.  RFC 1572 is currently on the Standards\n      Track as\
    \ a Proposed Standard, and is listed in Assigned Numbers\n      [19].\n"
- title: 17.  Full Copyright Statement
  contents:
  - "17.  Full Copyright Statement\n   Copyright (C) The Internet Society (2000).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
