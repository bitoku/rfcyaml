- contents:
  - ' Transmission of IPv6 over Master-Slave/Token-Passing (MS/TP) Networks

    '
  title: __initial_text__
- contents:
  - "Abstract\n   Master-Slave/Token-Passing (MS/TP) is a medium access control method\n
    \  for the RS-485 physical layer and is used primarily in building\n   automation
    networks.  This specification defines the frame format for\n   transmission of
    IPv6 packets and the method of forming link-local and\n   statelessly autoconfigured
    IPv6 addresses on MS/TP networks.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8163.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   3\n   2.  Profile for IPv6 over MS/TP . . . . . . . . . . . . . .
    . . .   6\n   3.  Addressing Modes  . . . . . . . . . . . . . . . . . . . . .
    .   7\n   4.  Maximum Transmission Unit (MTU) . . . . . . . . . . . . . . .   8\n
    \  5.  LoBAC Adaptation Layer  . . . . . . . . . . . . . . . . . . .   8\n   6.
    \ Stateless Address Autoconfiguration . . . . . . . . . . . . .   9\n   7.  IPv6
    Link-Local Address . . . . . . . . . . . . . . . . . . .  10\n   8.  Unicast Address
    Mapping . . . . . . . . . . . . . . . . . . .  10\n   9.  Multicast Address Mapping
    . . . . . . . . . . . . . . . . . .  11\n   10. Header Compression  . . . . .
    . . . . . . . . . . . . . . . .  11\n   11. IANA Considerations . . . . . . .
    . . . . . . . . . . . . . .  11\n   12. Security Considerations . . . . . . .
    . . . . . . . . . . . .  12\n   13. References  . . . . . . . . . . . . . . .
    . . . . . . . . . .  12\n   Appendix A.  Abstract MAC Interface . . . . . . .
    . . . . . . . .  15\n   Appendix B.  Consistent Overhead Byte Stuffing (COBS)
    . . . . . .  17\n   Appendix C.  Encoded CRC-32K (CRC32K) . . . . . . . . . .
    . . . .  20\n   Appendix D.  Example 6LoBAC Frame Decode  . . . . . . . . . .
    . .  22\n   Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . . .
    \ 27\n   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  27\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Master-Slave/Token-Passing (MS/TP) is a Medium Access Control
    (MAC)\n   protocol for the RS-485 [TIA-485-A] physical layer and is used\n   primarily
    in building automation networks.  This specification\n   defines the frame format
    for transmission of IPv6 [RFC2460] packets\n   and the method of forming link-local
    and statelessly autoconfigured\n   IPv6 addresses on MS/TP networks.  The general
    approach is to adapt\n   elements of the 6LoWPAN specifications ([RFC4944], [RFC6282],
    and\n   [RFC6775]) to constrained wired networks, as noted below.\n   An MS/TP
    device is typically based on a low-cost microcontroller with\n   limited processing
    power and memory.  These constraints, together\n   with low data rates and a small
    MAC address space, are similar to\n   those faced in 6LoWPAN networks.  MS/TP
    differs significantly from\n   6LoWPAN in at least three respects: a) MS/TP devices
    are typically\n   mains powered, b) all MS/TP devices on a segment can communicate\n
    \  directly so there are no hidden node or mesh routing issues, and c)\n   the
    latest MS/TP specification provides support for large payloads,\n   eliminating
    the need for fragmentation and reassembly below IPv6.\n   The following sections
    provide a brief overview of MS/TP and then\n   describe how to form IPv6 addresses
    and encapsulate IPv6 packets in\n   MS/TP frames.  This specification (subsequently
    referred to as\n   \"6LoBAC\") includes a REQUIRED header compression mechanism
    that is\n   based on LOWPAN_IPHC [RFC6282] and improves MS/TP link utilization.\n"
  - contents:
    - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
      and \"OPTIONAL\" in this\n   document are to be interpreted as described in
      [RFC2119].\n"
    title: 1.1.  Requirements Language
  - contents:
    - "1.2.  Abbreviations Used\n   ASHRAE:  American Society of Heating, Refrigerating,
      and Air-\n            Conditioning Engineers <http://www.ashrae.org>\n   BACnet:
      \ An ISO/ANSI/ASHRAE Standard Data Communication Protocol for\n            Building
      Automation and Control Networks\n   CRC:     Cyclic Redundancy Code\n   MAC:
      \    Medium Access Control\n   MSDU:    MAC Service Data Unit (MAC client data)\n
      \  MTU:     Maximum Transmission Unit; the size of the largest data unit\n            at
      the network-layer protocol that can be communicated in a\n            single
      network transaction\n   UART:    Universal Asynchronous Transmitter/Receiver\n"
    title: 1.2.  Abbreviations Used
  - contents:
    - "1.3.  MS/TP Overview\n   This section provides a brief overview of MS/TP, as
      specified in\n   Clause 9 of the ANSI/ASHRAE Standard 135-2016 [BACnet].  The
      latest\n   version of [BACnet] integrates changes to legacy MS/TP (approved
      as\n   [Addendum_an]) that provide support for larger frame sizes and\n   improved
      error handling.  [BACnet], Clause 9 also covers physical-\n   layer deployment
      options.\n   MS/TP is designed to enable multidrop networks over shielded twisted\n
      \  pair wiring.  It can support network segments up to 1000 meters in\n   length
      at a data rate of 115.2 kbit/s or segments up to 1200 meters\n   in length at
      lower bit rates.  An MS/TP interface requires only a\n   UART, an RS-485 [TIA-485-A]
      transceiver with a driver that can be\n   disabled, and a 5 ms resolution timer.
      \ The MS/TP MAC is typically\n   implemented in software.\n   The differential
      signaling used by [TIA-485-A] requires a contention-\n   free MAC.  MS/TP uses
      a token to control access to a multidrop bus.\n   Only an MS/TP master node
      can initiate the unsolicited transfer of\n   data, and only when it holds the
      token.  After sending at most a\n   configured maximum number of data frames,
      a master node passes the\n   token to the next master node (as determined by
      the MAC address).  If\n   present on the link, legacy MS/TP implementations
      (including any\n   slave nodes) ignore the frame format defined in this specification.\n
      \  [BACnet], Clause 9 defines a range of Frame Type values used to\n   designate
      frames that contain Data and Data CRC fields encoded using\n   Consistent Overhead
      Byte Stuffing [COBS] (see Appendix B).  The\n   purpose of COBS encoding is
      to eliminate preamble sequences from the\n   Encoded Data and Encoded CRC-32K
      fields.  The Encoded Data field is\n   covered by a 32-bit CRC [CRC32K] (see
      Appendix C) that is also COBS\n   encoded.\n   MS/TP COBS-encoded frames have
      the following format:\n   0                   1                   2                   3\n
      \  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |      0x55     |      0xFF     |  Frame Type   |      DA       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |      SA       |    Length (MS octet first)    |   Header CRC  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  .                                                               .\n   .                Encoded
      Data (2 - 1506 octets)                 .\n   .                                                               .\n
      \  +                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                               |
      \ Encoded CRC-32K (5 octets)   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+               +-+-+-+-+-+-+-+-+\n
      \  |                                               | optional 0xFF |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \                Figure 1: MS/TP COBS-Encoded Frame Format\n   MS/TP COBS-encoded
      frame fields are defined as follows:\n    Preamble              two octet preamble:
      0x55, 0xFF\n    Frame Type            one octet\n    Destination Address   one
      octet address\n    Source Address        one octet address\n    Length                two
      octets, most significant octet first\n    Header CRC            one octet\n
      \   Encoded Data          2 - 1506 octets (see Section 4 and Appendix B)\n    Encoded
      CRC-32K       five octets (see Appendix C)\n    (pad)                 (optional)
      at most one octet of trailer: 0xFF\n   The Frame Type is used to distinguish
      between different types of MAC\n   frames.  The types relevant to this specification
      (in decimal) are:\n      0  Token\n      1  Poll For Master\n      2  Reply
      To Poll For Master\n      3  Test_Request\n      4  Test_Response\n         ...\n
      \    34  IPv6 over MS/TP (LoBAC) Encapsulation\n   Frame Types 8 - 31 and 35
      - 127 are reserved for assignment by\n   ASHRAE.  Frame Types 32 - 127 designate
      COBS-encoded frames that\n   convey Encoded Data and Encoded CRC-32K fields.
      \ See Section 2 for\n   additional details.\n   The Destination and Source Addresses
      are each one octet in length.\n   See Section 3 for additional details.\n   For
      COBS-encoded frames, the Length field indicates the size of the\n   [COBS] Encoded
      Data field in octets, plus three.  (This adjustment is\n   required in order
      for legacy MS/TP devices to ignore COBS-encoded\n   frames.)  See Section 4
      and the Appendices for additional details.\n   The Header CRC field covers the
      Frame Type, Destination Address,\n   Source Address, and Length fields.  The
      Header CRC generation and\n   check procedures are specified in [BACnet], Annex
      G.1.\n   Use of the optional 0xFF trailer octet is discussed in [BACnet],\n
      \  Clause 9.\n"
    title: 1.3.  MS/TP Overview
  - contents:
    - "1.4.  Goals and Constraints\n   The main goals of this specification are a)
      to enable IPv6 directly\n   on wired end devices in building automation and
      control networks by\n   leveraging existing standards to the greatest extent
      possible, and b)\n   to co-exist with legacy MS/TP implementations.  Co-existence
      allows\n   MS/TP networks to be incrementally upgraded to support IPv6.\n   In
      order to co-exist with legacy devices, no changes are permitted to\n   the MS/TP
      addressing modes, frame header format, control frames, or\n   Master Node state
      machine as specified in [BACnet], Clause 9.\n"
    title: 1.4.  Goals and Constraints
  title: 1.  Introduction
- contents:
  - "2.  Profile for IPv6 over MS/TP\n   ASHRAE has assigned an MS/TP Frame Type value
    of 34 to indicate IPv6\n   over MS/TP (LoBAC) Encapsulation.  This falls within
    the range of\n   values that designate COBS-encoded data frames.\n"
  - contents:
    - "2.1.  Mandatory Features\n   [BACnet], Clause 9 specifies mandatory-to-implement
      features of MS/TP\n   devices.  For example, it is mandatory that all MS/TP
      nodes respond\n   to a Test_Request with a Test_Response frame.  All MS/TP master
      nodes\n   must implement the Master Node state machine and handle Token, Poll\n
      \  For Master, and Reply To Poll For Master control frames.  6LoBAC\n   nodes
      are MS/TP master nodes that implement a Receive Frame state\n   machine capable
      of handling COBS-encoded frames.\n   6LoBAC nodes must support a data rate of
      115.2 kbit/s and may support\n   lower data rates as specified in [BACnet],
      Clause 9.  The method of\n   selecting the data rate is outside the scope of
      this specification.\n"
    title: 2.1.  Mandatory Features
  - contents:
    - "2.2.  Configuration Constants\n   The following constants are used by the Receive
      Frame state machine.\n   Nmin_COBS_length  The minimum valid Length value of
      any LoBAC-\n                     encapsulated frame: 5\n   Nmax_COBS_length
      \ The maximum valid Length value of any LoBAC-\n                     encapsulated
      frame: 1509\n"
    title: 2.2.  Configuration Constants
  - contents:
    - "2.3.  Configuration Parameters\n   The following parameters are used by the
      Master Node state machine.\n   Nmax_info_frames  The default maximum number
      of information frames\n                     the node may send before it must
      pass the token: 1\n   Nmax_master       The default highest allowable address
      for master\n                     nodes: 127\n   The mechanisms for setting parameters
      or monitoring MS/TP performance\n   are outside the scope of this specification.\n"
    title: 2.3.  Configuration Parameters
  title: 2.  Profile for IPv6 over MS/TP
- contents:
  - "3.  Addressing Modes\n   MS/TP node (MAC) addresses are one octet in length and
    are assigned\n   dynamically.  The method of assigning MAC addresses is outside
    the\n   scope of this specification.  However, each MS/TP node on the link\n   MUST
    have a unique address in order to ensure correct MAC operation.\n   [BACnet],
    Clause 9 specifies that addresses 0 through 127 are valid\n   for master nodes.
    \ The method specified in Section 6 for creating a\n   MAC-address-derived Interface
    Identifier (IID) ensures that an IID of\n   all zeros can never be generated.\n
    \  A Destination Address of 255 (all nodes) indicates a MAC-layer\n   broadcast.
    \ MS/TP does not support multicast; therefore, all IPv6\n   multicast packets
    MUST be broadcast at the MAC layer and filtered at\n   the IPv6 layer.  A Source
    Address of 255 MUST NOT be used.\n   Hosts learn IPv6 prefixes via router advertisements
    according to\n   [RFC4861].\n"
  title: 3.  Addressing Modes
- contents:
  - "4.  Maximum Transmission Unit (MTU)\n   Upon transmission, the network-layer
    MTU is formatted according to\n   Section 5 and becomes the MAC service data unit
    (MSDU).  The MSDU is\n   then COBS encoded by MS/TP.  Upon reception, the steps
    are reversed.\n   [BACnet], Clause 9 supports MSDUs up to 2032 octets in length.\n
    \  IPv6 [RFC2460] requires that every link in an internet have an MTU of\n   1280
    octets or greater.  Additionally, a node must be able to accept\n   a fragmented
    packet that, after reassembly, is as large as 1500\n   octets.  This specification
    defines an MTU length of at least 1280\n   octets and at most 1500 octets.  Support
    for an MTU length of 1500\n   octets is RECOMMENDED.\n"
  title: 4.  Maximum Transmission Unit (MTU)
- contents:
  - "5.  LoBAC Adaptation Layer\n   This section specifies an adaptation layer to
    support compressed IPv6\n   headers as specified in Section 10.  IPv6 header compression
    MUST be\n   implemented on all 6LoBAC nodes.  Implementations MAY also support\n
    \  Generic Header Compression [RFC7400] for transport layer headers.\n   The LoBAC
    encapsulation format defined in this section describes the\n   MSDU of an IPv6
    over MS/TP frame.  The LoBAC payload (i.e., an IPv6\n   packet) follows an encapsulation
    header stack.  LoBAC is a subset of\n   the LoWPAN encapsulation defined in [RFC4944],
    as updated by\n   [RFC6282], so the use of \"LOWPAN\" in literals below is intentional.\n
    \  The primary difference between LoWPAN and LoBAC encapsulation is\n   omission
    of the Mesh, Broadcast, Fragmentation, and LOWPAN_HC1\n   headers in the latter.\n
    \  All LoBAC-encapsulated datagrams transmitted over MS/TP are prefixed\n   by
    an encapsulation header stack consisting of a Dispatch value\n   followed by zero
    or more header fields.  The only sequence currently\n   defined for LoBAC is the
    LOWPAN_IPHC header followed by payload, as\n   shown below:\n             +---------------+---------------+------...-----+\n
    \            | IPHC Dispatch |  IPHC Header  |    Payload   |\n             +---------------+---------------+------...-----+\n
    \   Figure 2: A LoBAC-Encapsulated LOWPAN_IPHC Compressed IPv6 Datagram\n   The
    Dispatch value is treated as an unstructured namespace.  Only a\n   single pattern
    is used to represent current LoBAC functionality.\n     Pattern      Header Type\n
    \  +------------+-----------------------------------------------------+\n   |
    01  1xxxxx | LOWPAN_IPHC - LOWPAN_IPHC compressed IPv6 [RFC6282] |\n   +------------+-----------------------------------------------------+\n
    \               Figure 3: LoBAC Dispatch Value Bit Pattern\n   Other IANA-assigned
    6LoWPAN Dispatch values do not apply to 6LoBAC\n   unless otherwise specified.\n"
  title: 5.  LoBAC Adaptation Layer
- contents:
  - "6.  Stateless Address Autoconfiguration\n   This section defines how to obtain
    an IPv6 Interface Identifier.\n   This specification distinguishes between two
    types of IIDs, MAC-\n   address-derived and semantically opaque.\n   A MAC-address-derived
    IID is the RECOMMENDED type for use in forming\n   a link-local address, as it
    affords the most efficient header\n   compression provided by the LOWPAN_IPHC
    [RFC6282] format specified in\n   Section 10.  The general procedure for creating
    a MAC-address-derived\n   IID is described in Appendix A of [RFC4291], \"Creating
    Modified\n   EUI-64 Format Interface Identifiers\", as updated by [RFC7136].\n
    \  The Interface Identifier for link-local addresses SHOULD be formed by\n   concatenating
    the node's 8-bit MS/TP MAC address to the seven octets\n   0x00, 0x00, 0x00, 0xFF,
    0xFE, 0x00, and 0x00.  For example, an MS/TP\n   MAC address of hexadecimal value
    0x4F results in the following IID:\n   |0              1|1              3|3              4|4
    \             6|\n   |0              5|6              1|2              7|8              3|\n
    \  +----------------+----------------+----------------+----------------+\n   |0000000000000000|0000000011111111|1111111000000000|0000000001001111|\n
    \  +----------------+----------------+----------------+----------------+\n   A
    semantically opaque IID having 64 bits of entropy is RECOMMENDED\n   for each
    globally scoped address and MAY be locally generated\n   according to one of the
    methods cited in Section 12.  A node that\n   generates a 64-bit semantically
    opaque IID MUST register the IID with\n   its local router(s) by sending a Neighbor
    Solicitation (NS) message\n   with the Address Registration Option (ARO) and process
    Neighbor\n   Advertisements (NAs) according to [RFC6775].\n   An IPv6 address
    prefix used for stateless autoconfiguration [RFC4862]\n   of an MS/TP interface
    MUST have a length of 64 bits.\n"
  title: 6.  Stateless Address Autoconfiguration
- contents:
  - "7.  IPv6 Link-Local Address\n   The IPv6 link-local address [RFC4291] for an
    MS/TP interface is\n   formed by appending the Interface Identifier, as defined
    above, to\n   the prefix FE80::/64.\n     10 bits           54 bits                   64
    bits\n   +----------+-----------------------+----------------------------+\n   |1111111010|
    \       (zeros)        |    Interface Identifier    |\n   +----------+-----------------------+----------------------------+\n"
  title: 7.  IPv6 Link-Local Address
- contents:
  - "8.  Unicast Address Mapping\n   The address resolution procedure for mapping
    IPv6 non-multicast\n   addresses into MS/TP MAC-layer addresses follows the general\n
    \  description in Section 7.2 of [RFC4861], unless otherwise specified.\n   The
    Source/Target Link-Layer Address option has the following form\n   when the addresses
    are 8-bit MS/TP MAC-layer (node) addresses.\n    0                   1\n    0
    1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |     Type
    \     |    Length=1   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |     0x00      |
    MS/TP Address |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                               |\n
    \  +      Padding (all zeros)      +\n   |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  Option fields:\n   Type:\n      1: for Source Link-Layer address.\n      2:
    for Target Link-Layer address.\n   Length:  This is the length of this option
    (including the Type and\n         Length fields) in units of 8 octets.  The value
    of this field\n         is 1 for 8-bit MS/TP MAC addresses.\n   MS/TP Address:
    \ The 8-bit address in canonical bit order [RFC2469].\n         This is the unicast
    address the interface currently responds\n         to.\n"
  title: 8.  Unicast Address Mapping
- contents:
  - "9.  Multicast Address Mapping\n   All IPv6 multicast packets MUST be sent to
    MS/TP Destination Address\n   255 (broadcast) and filtered at the IPv6 layer.
    \ When represented as\n   a 16-bit address in a compressed header (see Section
    10), it MUST be\n   formed by padding on the left with a zero octet:\n    0                   1\n
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |
    \    0x00      |     0xFF      |\n   +-+-+-+-+-+-+-+-+---------------+\n"
  title: 9.  Multicast Address Mapping
- contents:
  - "10.  Header Compression\n   6LoBAC REQUIRES LOWPAN_IPHC IPv6 compression, which
    is specified in\n   [RFC6282] and included herein by reference.  This section
    will simply\n   identify substitutions that should be made when interpreting the
    text\n   of [RFC6282].\n   In general, the following substitutions should be made:\n
    \  - Replace instances of \"6LoWPAN\" with \"MS/TP network\"\n   - Replace instances
    of \"IEEE 802.15.4 address\" with \"MS/TP address\"\n   When a 16-bit address
    is called for (i.e., an IEEE 802.15.4 \"short\n   address\"), it MUST be formed
    by padding the MS/TP address to the left\n   with a zero octet:\n    0                   1\n
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |
    \    0x00      | MS/TP address |\n   +-+-+-+-+-+-+-+-+---------------+\n   If
    LOWPAN_IPHC compression [RFC6282] is used with context, the\n   router(s) directly
    attached to the MS/TP segment MUST disseminate the\n   6LoWPAN Context Option
    (6CO) according to Section 7.2 of [RFC6775].\n"
  title: 10.  Header Compression
- contents:
  - "11.  IANA Considerations\n   This document uses values previously reserved by
    [RFC4944] and\n   [RFC6282]; it does not require any IANA actions.\n"
  title: 11.  IANA Considerations
- contents:
  - "12.  Security Considerations\n   See [RFC8065] for a general discussion of privacy
    threats faced by\n   constrained nodes.\n   [RFC8065] makes a distinction between
    \"stable\" and \"temporary\"\n   addresses.  The former are long-lived and typically
    advertised by\n   servers.  The latter are typically used by clients and SHOULD
    be\n   changed frequently to mitigate correlation of activities over time.\n   Nodes
    that engage in both activities SHOULD support simultaneous use\n   of multiple
    addresses per device.\n   Globally scoped addresses that contain MAC-address-derived
    IIDs may\n   expose a network to address-scanning attacks.  For this reason, it
    is\n   RECOMMENDED that a 64-bit semantically opaque IID be generated for\n   each
    globally scoped address in use according to, for example,\n   [RFC3315], [RFC3972],
    [RFC4941], [RFC5535], or [RFC7217].\n"
  title: 12.  Security Considerations
- contents:
  - '13.  References

    '
  - contents:
    - "13.1.  Normative References\n   [BACnet]   ASHRAE, \"BACnet-A Data Communication
      Protocol for Building\n              Automation and Control Networks\", ANSI/ASHRAE
      Standard\n              135-2016, January 2016,\n              <http://www.techstreet.com/ashrae/standards/\n
      \             ashrae-135-2016?product_id=1918140#jumps>.\n   [RFC2119]  Bradner,
      S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\",
      BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC2460]  Deering, S. and R. Hinden, \"Internet Protocol, Version 6\n              (IPv6)
      Specification\", RFC 2460, DOI 10.17487/RFC2460,\n              December 1998,
      <http://www.rfc-editor.org/info/rfc2460>.\n   [RFC3315]  Droms, R., Ed., Bound,
      J., Volz, B., Lemon, T., Perkins,\n              C., and M. Carney, \"Dynamic
      Host Configuration Protocol\n              for IPv6 (DHCPv6)\", RFC 3315, DOI
      10.17487/RFC3315, July\n              2003, <http://www.rfc-editor.org/info/rfc3315>.\n
      \  [RFC3972]  Aura, T., \"Cryptographically Generated Addresses (CGA)\",\n              RFC
      3972, DOI 10.17487/RFC3972, March 2005,\n              <http://www.rfc-editor.org/info/rfc3972>.\n
      \  [RFC4291]  Hinden, R. and S. Deering, \"IP Version 6 Addressing\n              Architecture\",
      RFC 4291, DOI 10.17487/RFC4291, February\n              2006, <http://www.rfc-editor.org/info/rfc4291>.\n
      \  [RFC4861]  Narten, T., Nordmark, E., Simpson, W., and H. Soliman,\n              \"Neighbor
      Discovery for IP version 6 (IPv6)\", RFC 4861,\n              DOI 10.17487/RFC4861,
      September 2007,\n              <http://www.rfc-editor.org/info/rfc4861>.\n   [RFC4862]
      \ Thomson, S., Narten, T., and T. Jinmei, \"IPv6 Stateless\n              Address
      Autoconfiguration\", RFC 4862,\n              DOI 10.17487/RFC4862, September
      2007,\n              <http://www.rfc-editor.org/info/rfc4862>.\n   [RFC4941]
      \ Narten, T., Draves, R., and S. Krishnan, \"Privacy\n              Extensions
      for Stateless Address Autoconfiguration in\n              IPv6\", RFC 4941,
      DOI 10.17487/RFC4941, September 2007,\n              <http://www.rfc-editor.org/info/rfc4941>.\n
      \  [RFC4944]  Montenegro, G., Kushalnagar, N., Hui, J., and D. Culler,\n              \"Transmission
      of IPv6 Packets over IEEE 802.15.4\n              Networks\", RFC 4944, DOI
      10.17487/RFC4944, September 2007,\n              <http://www.rfc-editor.org/info/rfc4944>.\n
      \  [RFC5535]  Bagnulo, M., \"Hash-Based Addresses (HBA)\", RFC 5535,\n              DOI
      10.17487/RFC5535, June 2009,\n              <http://www.rfc-editor.org/info/rfc5535>.\n
      \  [RFC6282]  Hui, J., Ed. and P. Thubert, \"Compression Format for IPv6\n              Datagrams
      over IEEE 802.15.4-Based Networks\", RFC 6282,\n              DOI 10.17487/RFC6282,
      September 2011,\n              <http://www.rfc-editor.org/info/rfc6282>.\n   [RFC6775]
      \ Shelby, Z., Ed., Chakrabarti, S., Nordmark, E., and C.\n              Bormann,
      \"Neighbor Discovery Optimization for IPv6 over\n              Low-Power Wireless
      Personal Area Networks (6LoWPANs)\",\n              RFC 6775, DOI 10.17487/RFC6775,
      November 2012,\n              <http://www.rfc-editor.org/info/rfc6775>.\n   [RFC7136]
      \ Carpenter, B. and S. Jiang, \"Significance of IPv6\n              Interface
      Identifiers\", RFC 7136, DOI 10.17487/RFC7136,\n              February 2014,
      <http://www.rfc-editor.org/info/rfc7136>.\n   [RFC7217]  Gont, F., \"A Method
      for Generating Semantically Opaque\n              Interface Identifiers with
      IPv6 Stateless Address\n              Autoconfiguration (SLAAC)\", RFC 7217,\n
      \             DOI 10.17487/RFC7217, April 2014,\n              <http://www.rfc-editor.org/info/rfc7217>.\n
      \  [RFC7400]  Bormann, C., \"6LoWPAN-GHC: Generic Header Compression for\n              IPv6
      over Low-Power Wireless Personal Area Networks\n              (6LoWPANs)\",
      RFC 7400, DOI 10.17487/RFC7400, November\n              2014, <http://www.rfc-editor.org/info/rfc7400>.\n"
    title: 13.1.  Normative References
  - contents:
    - "13.2.  Informative References\n   [Addendum_an]\n              ANSI/ASHRAE,
      \"Addenda: BACnet -- A Data Communication\n              Protocol for Building
      Automation and Control Networks\",\n              ANSI/ASHRAE Addenda an, at,
      au, av, aw, ax, and az\n              to ANSI/ASHRAE Standard 135-2012, July
      2014,\n              <https://www.ashrae.org/File%20Library/docLib/StdsAddenda/\n
      \             07-31-2014_135_2012_an_at_au_av_aw_ax_az_Final.pdf>.\n   [COBS]
      \    Cheshire, S. and M. Baker, \"Consistent Overhead Byte\n              Stuffing\",
      IEEE/ACM Transactions on Networking, Volume 7,\n              Issue 2, DOI 10.1109/90.769765,
      April 1999,\n              <http://www.stuartcheshire.org/papers/COBSforToN.pdf>.\n
      \  [CRC32K]   Koopman, P., \"32-Bit Cyclic Redundancy Codes for Internet\n              Applications\",
      Proceedings of the International Conference\n              on Dependable Systems
      and Networks (DSN 2002), June 2002,\n              <https://users.ece.cmu.edu/~koopman/networks/dsn02/\n
      \             dsn02_koopman.pdf>.\n   [IEEE.802.3]\n              IEEE, \"IEEE
      Standard for Ethernet\", IEEE 802.3-2015, DOI\n              10.1109/IEEESTD.2016.7428776,\n
      \             <http://standards.ieee.org/getieee802/\n              download/802.3-2015.zip>.\n
      \  [RFC2469]  Narten, T. and C. Burton, \"A Caution On The Canonical\n              Ordering
      Of Link-Layer Addresses\", RFC 2469,\n              DOI 10.17487/RFC2469, December
      1998,\n              <http://www.rfc-editor.org/info/rfc2469>.\n   [RFC8065]
      \ Thaler, D., \"Privacy Considerations for IPv6 Adaptation-\n              Layer
      Mechanisms\", RFC 8065, DOI 10.17487/RFC8065,\n              February 2017,
      <http://www.rfc-editor.org/info/rfc8065>.\n   [TIA-485-A]\n              TIA,
      \"Electrical Characteristics of Generators and\n              Receivers for
      Use in Balanced Digital Multipoint Systems\",\n              TIA-485-A (Revision
      of TIA-485), March 2003,\n              <https://global.ihs.com/\n              doc_detail.cfm?item_s_key=00032964>.\n"
    title: 13.2.  Informative References
  title: 13.  References
- contents:
  - "Appendix A.  Abstract MAC Interface\n   This Appendix is informative and not
    part of the standard.\n   [BACnet], Clause 9 provides support for MAC-layer clients
    through its\n   SendFrame and ReceivedDataNoReply procedures.  However, it does
    not\n   define a network-protocol independent abstract interface for the MAC.\n
    \  This is provided below as an aid to implementation.\n"
  - contents:
    - 'A.1.  MA-DATA.request

      '
    - contents:
      - "A.1.1.  Function\n   This primitive defines the transfer of data from a MAC
        client entity\n   to a single peer entity or multiple peer entities in the
        case of a\n   broadcast address.\n"
      title: A.1.1.  Function
    - contents:
      - "A.1.2.  Semantics of the Service Primitive\n   The semantics of the primitive
        are as follows:\n     MA-DATA.request (\n                      destination_address,\n
        \                     source_address,\n                      data,\n                      type\n
        \                    )\n   The 'destination_address' parameter may specify
        either an individual\n   or a broadcast MAC entity address.  It must contain
        sufficient\n   information to create the Destination Address field (see Section
        1.3)\n   that is prepended to the frame by the local MAC sublayer entity.
        \ The\n   'source_address' parameter, if present, must specify an individual\n
        \  MAC address.  If the source_address parameter is omitted, the local\n   MAC
        sublayer entity will insert a value associated with that entity.\n   The 'data'
        parameter specifies the MAC service data unit (MSDU) to be\n   transferred
        by the MAC sublayer entity.  There is sufficient\n   information associated
        with the MSDU for the MAC sublayer entity to\n   determine the length of the
        data unit.\n   The 'type' parameter specifies the value of the MS/TP Frame
        Type\n   field that is prepended to the frame by the local MAC sublayer\n
        \  entity.\n"
      title: A.1.2.  Semantics of the Service Primitive
    - contents:
      - "A.1.3.  When Generated\n   This primitive is generated by the MAC client
        entity whenever data\n   shall be transferred to a peer entity or entities.
        \ This can be in\n   response to a request from higher protocol layers or
        from data\n   generated internally to the MAC client, such as a Token frame.\n"
      title: A.1.3.  When Generated
    - contents:
      - "A.1.4.  Effect on Receipt\n   Receipt of this primitive will cause the MAC
        entity to insert all\n   MAC-specific fields, including Destination Address,
        Source Address,\n   Frame Type, and any fields that are unique to the particular
        media\n   access method, and pass the properly formed frame to the lower\n
        \  protocol layers for transfer to the peer MAC sublayer entity or\n   entities.\n"
      title: A.1.4.  Effect on Receipt
    title: A.1.  MA-DATA.request
  - contents:
    - 'A.2.  MA-DATA.indication

      '
    - contents:
      - "A.2.1.  Function\n   This primitive defines the transfer of data from the
        MAC sublayer\n   entity to the MAC client entity or entities in the case of
        a\n   broadcast address.\n"
      title: A.2.1.  Function
    - contents:
      - "A.2.2.  Semantics of the Service Primitive\n   The semantics of the primitive
        are as follows:\n     MA-DATA.indication (\n                         destination_address,\n
        \                        source_address,\n                         data,\n
        \                        type\n                        )\n   The 'destination_address'
        parameter may be either an individual or a\n   broadcast address as specified
        by the Destination Address field of\n   the incoming frame.  The 'source_address'
        parameter is an individual\n   address as specified by the Source Address
        field of the incoming\n   frame.\n   The 'data' parameter specifies the MAC
        service data unit (MSDU) as\n   received by the local MAC entity.  There is
        sufficient information\n   associated with the MSDU for the MAC sublayer client
        to determine the\n   length of the data unit.\n   The 'type' parameter is
        the value of the MS/TP Frame Type field of\n   the incoming frame.\n"
      title: A.2.2.  Semantics of the Service Primitive
    - contents:
      - "A.2.3.  When Generated\n   The MA_DATA.indication is passed from the MAC
        sublayer entity to the\n   MAC client entity or entities to indicate the arrival
        of a frame to\n   the local MAC sublayer entity that is destined for the MAC
        client.\n   Such frames are reported only if they are validly formed and received\n
        \  without error, and their Destination Address designates the local MAC\n
        \  entity.  Frames destined for the MAC Control sublayer are not passed\n
        \  to the MAC client.\n"
      title: A.2.3.  When Generated
    - contents:
      - "A.2.4.  Effect on Receipt\n   The effect of receipt of this primitive by
        the MAC client is\n   unspecified.\n"
      title: A.2.4.  Effect on Receipt
    title: A.2.  MA-DATA.indication
  title: Appendix A.  Abstract MAC Interface
- contents:
  - "Appendix B.  Consistent Overhead Byte Stuffing (COBS)\n   This Appendix is informative
    and not part of the standard.\n   [BACnet], Clause 9 corrects a long-standing
    issue with the MS/TP\n   specification, namely that preamble sequences were not
    escaped\n   whenever they appeared in the Data or Data CRC fields.  In rare\n
    \  cases, this resulted in dropped frames due to loss-of-frame\n   synchronization.
    \ The solution is to encode the Data and 32-bit Data\n   CRC fields before transmission
    using Consistent Overhead Byte\n   Stuffing [COBS] and decode these fields upon
    reception.\n   COBS is a run-length encoding method that nominally removes '0x00'\n
    \  octets from its input.  Any selected octet value may be removed by\n   XOR'ing
    that value with each octet of the COBS output.  [BACnet],\n   Clause 9 specifies
    the preamble octet '0x55' for removal.\n   The minimum overhead of COBS is one
    octet per encoded field.  The\n   worst-case overhead in long fields is bounded
    to one octet per 254 as\n   described in [COBS].\n   Frame encoding proceeds logically
    in two passes.  The Encoded Data\n   field is prepared by passing the MSDU through
    the COBS encoder and\n   XOR'ing the preamble octet '0x55' with each octet of
    the output.  The\n   Encoded CRC-32K field is then prepared by calculating a CRC-32K
    over\n   the Encoded Data field and formatting it for transmission as\n   described
    in Appendix C.  The combined length of these fields, minus\n   two octets for
    compatibility with legacy MS/TP devices, is placed in\n   the MS/TP header Length
    field before transmission.\n   Example COBS encoder and decoder functions are
    shown below for\n   illustration.  Complete examples of use and test vectors are
    provided\n   in [BACnet], Annex T.\n   <CODE BEGINS>\n   #include <stddef.h>\n
    \  #include <stdint.h>\n   /*\n    * Encodes 'length' octets of data located at
    'from' and\n    * writes one or more COBS code blocks at 'to', removing any\n
    \   * 'mask' octets that may be present in the encoded data.\n    * Returns the
    length of the encoded data.\n    */\n   size_t\n   cobs_encode (uint8_t *to, const
    uint8_t *from, size_t length,\n                uint8_t mask)\n   {\n     size_t
    code_index = 0;\n     size_t read_index = 0;\n     size_t write_index = 1;\n     uint8_t
    code = 1;\n     uint8_t data, last_code;\n     while (read_index < length) {\n
    \      data = from[read_index++];\n       /*\n        * In the case of encountering
    a non-zero octet in the data,\n        * simply copy input to output and increment
    the code octet.\n        */\n       if (data != 0) {\n         to[write_index++]
    = data ^ mask;\n         code++;\n         if (code != 255)\n           continue;\n
    \      }\n       /*\n        * In the case of encountering a zero in the data
    or having\n        * copied the maximum number (254) of non-zero octets, store\n
    \       * the code octet and reset the encoder state variables.\n        */\n
    \      last_code = code;\n       to[code_index] = code ^ mask;\n       code_index
    = write_index++;\n       code = 1;\n     }\n     /*\n      * If the last chunk
    contains exactly 254 non-zero octets, then\n      * this exception is handled
    above (and the returned length must\n      * be adjusted). Otherwise, encode the
    last chunk normally, as if\n      * a \"phantom zero\" is appended to the data.\n
    \     */\n     if ((last_code == 255) && (code == 1))\n       write_index--;\n
    \    else\n       to[code_index] = code ^ mask;\n     return write_index;\n   }\n
    \  #include <stddef.h>\n   #include <stdint.h>\n   /*\n    * Decodes 'length'
    octets of data located at 'from' and\n    * writes the original client data at
    'to', restoring any\n    * 'mask' octets that may present in the encoded data.\n
    \   * Returns the length of the encoded data or zero if error.\n    */\n   size_t\n
    \  cobs_decode (uint8_t *to, const uint8_t *from, size_t length,\n                uint8_t
    mask)\n   {\n     size_t read_index = 0;\n     size_t write_index = 0;\n     uint8_t
    code, last_code;\n     while (read_index < length) {\n       code = from[read_index]
    ^ mask;\n       last_code = code;\n       /*\n        * Sanity check the encoding
    to prevent the while() loop below\n        * from overrunning the output buffer.\n
    \       */\n       if (read_index + code > length)\n         return 0;\n       read_index++;\n
    \      while (--code > 0)\n         to[write_index++] = from[read_index++] ^ mask;\n
    \      /*\n        * Restore the implicit zero at the end of each decoded block\n
    \       * except when it contains exactly 254 non-zero octets or the\n        *
    end of data has been reached.\n        */\n       if ((last_code != 255) && (read_index
    < length))\n         to[write_index++] = 0;\n     }\n     return write_index;\n
    \  }\n   <CODE ENDS>\n"
  title: Appendix B.  Consistent Overhead Byte Stuffing (COBS)
- contents:
  - "Appendix C.  Encoded CRC-32K (CRC32K)\n   This Appendix is informative and not
    part of the standard.\n   Extending the payload of MS/TP to 1500 octets requires
    upgrading the\n   Data CRC from 16 bits to 32 bits.  P. Koopman has authored several\n
    \  papers on evaluating CRC polynomials for network applications.  In\n   [CRC32K],
    he surveyed the entire 32-bit polynomial space and noted\n   some that exceed
    the [IEEE.802.3] polynomial in performance.\n   [BACnet], Clause 9 specifies one
    of these, the CRC-32K (Koopman)\n   polynomial.\n   The specified use of the calc_crc32K()
    function is as follows.\n   Before a frame is transmitted, 'crc_value' is initialized
    to all\n   ones.  After passing each octet of the [COBS] Encoded Data field\n
    \  through the function, the ones complement of the resulting\n   'crc_value'
    is arranged in LSB-first order and is itself [COBS]\n   encoded.  The length of
    the resulting Encoded CRC-32K field is always\n   five octets.\n   Upon reception
    of a frame, 'crc_value' is initialized to all ones.\n   The octets of the Encoded
    Data field are accumulated by the\n   calc_crc32K() function before decoding.
    \ The Encoded CRC-32K field is\n   then decoded and the resulting four octets
    are accumulated by the\n   calc_crc32K() function.  If the result is the expected
    residue value\n   'CRC32K_RESIDUE', then the frame was received correctly.\n   An
    example CRC-32K function is shown below for illustration.\n   Complete examples
    of use and test vectors are provided in [BACnet],\n   Annex G.3.\n   <CODE BEGINS>\n
    \  #include <stdint.h>\n   /* See ANSI/ASHRAE Standard 135-2016 [BACnet], Section
    G.3.2 */\n   #define CRC32K_INITIAL_VALUE (0xFFFFFFFF)\n   #define CRC32K_RESIDUE
    (0x0843323B)\n   /* CRC-32K polynomial, 1 + x**1 + ... + x**30 (+ x**32) */\n
    \  #define CRC32K_POLY (0xEB31D82E)\n   /*\n    * Accumulate 'data_value' into
    the CRC in 'crc_value'.\n    * Return updated CRC.\n    *\n    * Note: crc_value
    must be set to CRC32K_INITIAL_VALUE\n    * before initial call.\n    */\n   uint32_t\n
    \  calc_crc32K (uint8_t data_value, uint32_t crc_value)\n   {\n     int b;\n     for
    (b = 0; b < 8; b++) {\n       if ((data_value & 1) ^ (crc_value & 1)) {\n         crc_value
    >>= 1;\n         crc_value ^= CRC32K_POLY;\n       } else {\n         crc_value
    >>= 1;\n       }\n       data_value >>= 1;\n     }\n     return crc_value;\n   }\n
    \  <CODE ENDS>\n"
  title: Appendix C.  Encoded CRC-32K (CRC32K)
- contents:
  - "Appendix D.  Example 6LoBAC Frame Decode\n   This Appendix is informative and
    not part of the standard.\n   BACnet MS/TP, Src (2), Dst (1), IPv6 Encapsulation\n
    \      Preamble 55: 0x55\n       Preamble FF: 0xff\n       Frame Type: IPv6 Encapsulation
    (34)\n       Destination Address: 1\n       Source Address: 2\n       Length:
    537\n       Header CRC: 0x1c [correct]\n       Extended Data CRC: 0x9e7259e2 [correct]\n
    \  6LoWPAN\n       IPHC Header\n           011. .... = Pattern: IP header compression
    (0x03)\n           ...1 1... .... .... = Traffic class and flow label:\n                                 Version,
    traffic class, and flow label\n                                 compressed (0x0003)\n
    \          .... .0.. .... .... = Next header: Inline\n           .... ..00 ....
    .... = Hop limit: Inline (0x0000)\n           .... .... 1... .... = Context identifier
    extension: True\n           .... .... .1.. .... = Source address compression:
    Stateful\n           .... .... ..01 .... = Source address mode:\n                                 64-bits
    inline (0x0001)\n           .... .... .... 0... = Multicast address compression:
    False\n           .... .... .... .1.. = Destination address compression:\n                                 Stateful\n
    \          .... .... .... ..10 = Destination address mode:\n                                 16-bits
    inline (0x0002)\n           0000 .... = Source context identifier: 0x00\n           ....
    0000 = Destination context identifier: 0x00\n           [Source context: aaaa::
    (aaaa::)]\n           [Destination context: aaaa:: (aaaa::)]\n       Next header:
    ICMPv6 (0x3a)\n       Hop limit: 63\n       Source: aaaa::1 (aaaa::1)\n       Destination:
    aaaa::ff:fe00:1 (aaaa::ff:fe00:1)\n   Internet Protocol Version 6, Src: aaaa::1
    (aaaa::1),\n                                Dst: aaaa::ff:fe00:1 (aaaa::ff:fe00:1)\n
    \      0110 .... .... .... .... .... .... .... = Version: 6\n       .... 0000
    0000 .... .... .... .... .... = Traffic class:\n                                                 0x00000000\n
    \      .... 0000 00.. .... .... .... .... .... = Differentiated\n                                                 Services
    Field:\n                                                 Default (0x00000000)\n
    \      .... .... ..0. .... .... .... .... .... = ECN-Capable Transport\n                                                 (ECT):
    Not set\n       .... .... ...0 .... .... .... .... .... = ECN-CE: Not set\n       ....
    .... .... 0000 0000 0000 0000 0000 = Flowlabel: 0x00000000\n       Payload length:
    518\n       Next header: ICMPv6 (58)\n       Hop limit: 63\n       Source: aaaa::1
    (aaaa::1)\n       Destination: aaaa::ff:fe00:1 (aaaa::ff:fe00:1)\n   Internet
    Control Message Protocol v6\n       Type: Echo (ping) request (128)\n       Code:
    0\n       Checksum: 0x783f [correct]\n       Identifier: 0x2ee5\n       Sequence:
    2\n       [Response In: 5165]\n       Data (510 bytes)\n           Data: e4dbe8553ba0040008090a0b0c0d0e0f1011121314151617...\n
    \          [Length: 510]\n   Frame (547 bytes):\n   55 ff 22 01 02 02 19 1c 56
    2d 83 56 6f 6a 54 54   U.\".....V-.VojTT\n   54 54 54 54 57 54 56 54 d5 50 2d
    6a 7b b0 5c 57   TTTTWTVT.P-j{.\\W\n   b1 8e bd 00 6e f5 51 ac 5d 5c 5f 5e 59
    58 5b 5a   ....n.Q.]\\_^YX[Z\n   45 44 47 46 41 40 43 42 4d 4c 4f 4e 49 48 4b
    4a   EDGFA@CBMLONIHKJ\n   75 74 77 76 71 70 73 72 7d 7c 7f 7e 79 78 7b 7a   utwvqpsr}|.~yx{z\n
    \  65 64 67 66 61 60 63 62 6d 6c 6f 6e 69 68 6b 6a   edgfa`cbmlonihkj\n   15 14
    17 16 11 10 13 12 1d 1c 1f 1e 19 18 1b 1a   ................\n   05 04 07 06 01
    00 03 02 0d 0c 0f 0e 09 08 0b 0a   ................\n   35 34 37 36 31 30 33 32
    3d 3c 3f 3e 39 38 3b 3a   54761032=<?>98;:\n   25 24 27 26 21 20 23 22 2d 2c 2f
    2e 29 28 2b 2a   %$'&! #\"-,/.)(+*\n   d5 d4 d7 d6 d1 d0 d3 d2 dd dc df de d9
    d8 db da   ................\n   c5 c4 c7 c6 c1 c0 c3 c2 cd cc cf ce c9 c8 cb ca
    \  ................\n   f5 f4 f7 f6 f1 f0 f3 f2 fd fc ff fe f9 f8 fb fa   ................\n
    \  e5 e4 e7 e6 e1 e0 e3 e2 ed ec ef ee e9 e8 eb ea   ................\n   95 94
    97 96 91 90 93 92 9d 9c 9f 9e 99 98 9b 9a   ................\n   85 84 87 86 81
    80 83 82 8d 8c 8f 8e 89 88 8b 8a   ................\n   b5 b4 b7 b6 b1 b0 b3 b2
    bd bc bf be b9 b8 bb ba   ................\n   a5 a4 a7 a6 a1 a0 a3 a2 ad ac af
    ae a9 a8 ab aa   ................\n   ab 54 57 56 51 50 53 52 5d 5c 5f 5e 59 58
    5b 5a   .TWVQPSR]\\_^YX[Z\n   45 44 47 46 41 40 43 42 4d 4c 4f 4e 49 48 4b 4a
    \  EDGFA@CBMLONIHKJ\n   75 74 77 76 71 70 73 72 7d 7c 7f 7e 79 78 7b 7a   utwvqpsr}|.~yx{z\n
    \  65 64 67 66 61 60 63 62 6d 6c 6f 6e 69 68 6b 6a   edgfa`cbmlonihkj\n   15 14
    17 16 11 10 13 12 1d 1c 1f 1e 19 18 1b 1a   ................\n   05 04 07 06 01
    00 03 02 0d 0c 0f 0e 09 08 0b 0a   ................\n   35 34 37 36 31 30 33 32
    3d 3c 3f 3e 39 38 3b 3a   54761032=<?>98;:\n   25 24 27 26 21 20 23 22 2d 2c 2f
    2e 29 28 2b 2a   %$'&! #\"-,/.)(+*\n   d5 d4 d7 d6 d1 d0 d3 d2 dd dc df de d9
    d8 db da   ................\n   c5 c4 c7 c6 c1 c0 c3 c2 cd cc cf ce c9 c8 cb ca
    \  ................\n   f5 f4 f7 f6 f1 f0 f3 f2 fd fc ff fe f9 f8 fb fa   ................\n
    \  e5 e4 e7 e6 e1 e0 e3 e2 ed ec ef ee e9 e8 eb ea   ................\n   95 94
    97 96 91 90 93 92 9d 9c 9f 9e 99 98 9b 9a   ................\n   85 84 87 86 81
    80 83 82 8d 8c 8f 8e 89 88 8b 8a   ................\n   b5 b4 b7 b6 b1 b0 b3 b2
    bd bc bf be b9 b8 bb ba   ................\n   a5 a4 a7 a6 a1 a0 a3 a2 ad ac af
    ae a9 a8 50 cb   ..............P.\n   27 0c b7                                          '..\n
    \  Decoded Data and CRC32K (537 bytes):\n   78 d6 00 3a 3f 00 00 00 00 00 00 00
    01 00 01 80   x..:?...........\n   00 78 3f 2e e5 00 02 e4 db e8 55 3b a0 04 00
    08   .x?.......U;....\n   09 0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17 18   ................\n
    \  19 1a 1b 1c 1d 1e 1f 20 21 22 23 24 25 26 27 28   ....... !\"#$%&'(\n   29
    2a 2b 2c 2d 2e 2f 30 31 32 33 34 35 36 37 38   )*+,-./012345678\n   39 3a 3b 3c
    3d 3e 3f 40 41 42 43 44 45 46 47 48   9:;<=>?@ABCDEFGH\n   49 4a 4b 4c 4d 4e 4f
    50 51 52 53 54 55 56 57 58   IJKLMNOPQRSTUVWX\n   59 5a 5b 5c 5d 5e 5f 60 61 62
    63 64 65 66 67 68   YZ[\\]^_`abcdefgh\n   69 6a 6b 6c 6d 6e 6f 70 71 72 73 74
    75 76 77 78   ijklmnopqrstuvwx\n   79 7a 7b 7c 7d 7e 7f 80 81 82 83 84 85 86 87
    88   yz{|}~..........\n   89 8a 8b 8c 8d 8e 8f 90 91 92 93 94 95 96 97 98   ................\n
    \  99 9a 9b 9c 9d 9e 9f a0 a1 a2 a3 a4 a5 a6 a7 a8   ................\n   a9 aa
    ab ac ad ae af b0 b1 b2 b3 b4 b5 b6 b7 b8   ................\n   b9 ba bb bc bd
    be bf c0 c1 c2 c3 c4 c5 c6 c7 c8   ................\n   c9 ca cb cc cd ce cf d0
    d1 d2 d3 d4 d5 d6 d7 d8   ................\n   d9 da db dc dd de df e0 e1 e2 e3
    e4 e5 e6 e7 e8   ................\n   e9 ea eb ec ed ee ef f0 f1 f2 f3 f4 f5 f6
    f7 f8   ................\n   f9 fa fb fc fd fe ff 00 01 02 03 04 05 06 07 08   ................\n
    \  09 0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17 18   ................\n   19 1a
    1b 1c 1d 1e 1f 20 21 22 23 24 25 26 27 28   ....... !\"#$%&'(\n   29 2a 2b 2c
    2d 2e 2f 30 31 32 33 34 35 36 37 38   )*+,-./012345678\n   39 3a 3b 3c 3d 3e 3f
    40 41 42 43 44 45 46 47 48   9:;<=>?@ABCDEFGH\n   49 4a 4b 4c 4d 4e 4f 50 51 52
    53 54 55 56 57 58   IJKLMNOPQRSTUVWX\n   59 5a 5b 5c 5d 5e 5f 60 61 62 63 64 65
    66 67 68   YZ[\\]^_`abcdefgh\n   69 6a 6b 6c 6d 6e 6f 70 71 72 73 74 75 76 77
    78   ijklmnopqrstuvwx\n   79 7a 7b 7c 7d 7e 7f 80 81 82 83 84 85 86 87 88   yz{|}~..........\n
    \  89 8a 8b 8c 8d 8e 8f 90 91 92 93 94 95 96 97 98   ................\n   99 9a
    9b 9c 9d 9e 9f a0 a1 a2 a3 a4 a5 a6 a7 a8   ................\n   a9 aa ab ac ad
    ae af b0 b1 b2 b3 b4 b5 b6 b7 b8   ................\n   b9 ba bb bc bd be bf c0
    c1 c2 c3 c4 c5 c6 c7 c8   ................\n   c9 ca cb cc cd ce cf d0 d1 d2 d3
    d4 d5 d6 d7 d8   ................\n   d9 da db dc dd de df e0 e1 e2 e3 e4 e5 e6
    e7 e8   ................\n   e9 ea eb ec ed ee ef f0 f1 f2 f3 f4 f5 f6 f7 f8   ................\n
    \  f9 fa fb fc fd 9e 72 59 e2                        ......rY.\n   Decompressed
    6LoWPAN IPHC (558 bytes):\n   60 00 00 00 02 06 3a 3f aa aa 00 00 00 00 00 00
    \  `.....:?........\n   00 00 00 00 00 00 00 01 aa aa 00 00 00 00 00 00   ................\n
    \  00 00 00 ff fe 00 00 01 80 00 78 3f 2e e5 00 02   ..........x?....\n   e4 db
    e8 55 3b a0 04 00 08 09 0a 0b 0c 0d 0e 0f   ...U;...........\n   10 11 12 13 14
    15 16 17 18 19 1a 1b 1c 1d 1e 1f   ................\n   20 21 22 23 24 25 26 27
    28 29 2a 2b 2c 2d 2e 2f    !\"#$%&'()*+,-./\n   30 31 32 33 34 35 36 37 38 39
    3a 3b 3c 3d 3e 3f   0123456789:;<=>?\n   40 41 42 43 44 45 46 47 48 49 4a 4b 4c
    4d 4e 4f   @ABCDEFGHIJKLMNO\n   50 51 52 53 54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
    \  PQRSTUVWXYZ[\\]^_\n   60 61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f   `abcdefghijklmno\n
    \  70 71 72 73 74 75 76 77 78 79 7a 7b 7c 7d 7e 7f   pqrstuvwxyz{|}~.\n   80 81
    82 83 84 85 86 87 88 89 8a 8b 8c 8d 8e 8f   ................\n   90 91 92 93 94
    95 96 97 98 99 9a 9b 9c 9d 9e 9f   ................\n   a0 a1 a2 a3 a4 a5 a6 a7
    a8 a9 aa ab ac ad ae af   ................\n   b0 b1 b2 b3 b4 b5 b6 b7 b8 b9 ba
    bb bc bd be bf   ................\n   c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 ca cb cc cd
    ce cf   ................\n   d0 d1 d2 d3 d4 d5 d6 d7 d8 d9 da db dc dd de df   ................\n
    \  e0 e1 e2 e3 e4 e5 e6 e7 e8 e9 ea eb ec ed ee ef   ................\n   f0 f1
    f2 f3 f4 f5 f6 f7 f8 f9 fa fb fc fd fe ff   ................\n   00 01 02 03 04
    05 06 07 08 09 0a 0b 0c 0d 0e 0f   ................\n   10 11 12 13 14 15 16 17
    18 19 1a 1b 1c 1d 1e 1f   ................\n   20 21 22 23 24 25 26 27 28 29 2a
    2b 2c 2d 2e 2f    !\"#$%&'()*+,-./\n   30 31 32 33 34 35 36 37 38 39 3a 3b 3c
    3d 3e 3f   0123456789:;<=>?\n   40 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
    \  @ABCDEFGHIJKLMNO\n   50 51 52 53 54 55 56 57 58 59 5a 5b 5c 5d 5e 5f   PQRSTUVWXYZ[\\]^_\n
    \  60 61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f   `abcdefghijklmno\n   70 71
    72 73 74 75 76 77 78 79 7a 7b 7c 7d 7e 7f   pqrstuvwxyz{|}~.\n   80 81 82 83 84
    85 86 87 88 89 8a 8b 8c 8d 8e 8f   ................\n   90 91 92 93 94 95 96 97
    98 99 9a 9b 9c 9d 9e 9f   ................\n   a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 aa
    ab ac ad ae af   ................\n   b0 b1 b2 b3 b4 b5 b6 b7 b8 b9 ba bb bc bd
    be bf   ................\n   c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 ca cb cc cd ce cf   ................\n
    \  d0 d1 d2 d3 d4 d5 d6 d7 d8 d9 da db dc dd de df   ................\n   e0 e1
    e2 e3 e4 e5 e6 e7 e8 e9 ea eb ec ed ee ef   ................\n   f0 f1 f2 f3 f4
    f5 f6 f7 f8 f9 fa fb fc fd         ..............\n"
  title: Appendix D.  Example 6LoBAC Frame Decode
- contents:
  - "Acknowledgements\n   We are grateful to the authors of [RFC4944] and members
    of the IETF\n   6LoWPAN working group; this document borrows liberally from their\n
    \  work.  Ralph Droms and Brian Haberman provided indispensable guidance\n   and
    support from the outset.  Peter van der Stok, James Woodyatt,\n   Carsten Bormann,
    and Dale Worley provided detailed reviews.  Stuart\n   Cheshire invented the very
    clever COBS encoding.  Michael Osborne\n   made the critical observation that
    encoding the data and CRC32K\n   fields separately would allow the CRC to be calculated
    on the fly.\n   Alexandru Petrescu, Brian Frank, Geoff Mulligan, and Don Sturek\n
    \  offered valuable comments.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Kerry Lynn (editor)\n   Verizon Labs\n   50 Sylvan Rd\n
    \  Waltham, MA  02451\n   United States of America\n   Phone: +1 781 296 9722\n
    \  Email: kerlyn@ieee.org\n   Jerry Martocci\n   Johnson Controls, Inc.\n   507
    E. Michigan St\n   Milwaukee, WI  53202\n   United States of America\n   Email:
    jpmartocci@sbcglobal.net\n   Carl Neilson\n   Delta Controls, Inc.\n   17850 56th
    Ave\n   Surrey, BC  V3S 1C7\n   Canada\n   Phone: +1 604 575 5913\n   Email: cneilson@deltacontrols.com\n
    \  Stuart Donaldson\n   Honeywell Automation & Control Solutions\n   6670 185th
    Ave NE\n   Redmond, WA  98052\n   United States of America\n   Email: stuart.donaldson@honeywell.com\n"
  title: Authors' Addresses
