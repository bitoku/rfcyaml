- contents:
  - '     MIME Object Definitions for the Common Indexing Protocol (CIP)

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   The Common Indexing Protocol (CIP) is used to pass indexing\n   information
    from server to server in order to facilitate query\n   routing. The protocol is
    comprised of several MIME objects being\n   passed from server to server. This
    document describes the definitions\n   of those objects as well as the methods
    and requirements needed to\n   define a new index type.\n"
  title: Abstract
- contents:
  - "1. Introduction\n   The Common Indexing Protocol (CIP) is used to pass indexes
    between\n   servers that combine multiple indexes and/or route queries based on\n
    \  those indexes. The overall framework for the protocol is specified in\n   the
    CIP Framework document [FRAMEWORK]. This document should be read\n   within the
    context of that document as there are fundamental concepts\n   contained in the
    framework that are not fully explained here.\n   Since there are several different
    ways to index a given database\n   there will be multiple types of indexes to
    pass.  These indexes may\n   have different transport requirements, different
    ways of specifying\n   parameters, and different referral rules. These different\n
    \  requirements are handled by encapsulating the indexes within MIME\n   wrappers
    in order to have a standardized way to specify those\n   different parameters.\n
    \  Appendix A contains the actual MIME [RFC2046] registration templates\n   sent
    to the IANA for registration [RFC2048].\n   This document uses language like SHOULD
    and SHALL that have special\n   meaning as specified in \"Key words for use in
    RFCs to Indicate\n   Requirement Levels\" [RFC2119].\n"
  - contents:
    - "2.0 CIP Transactions\n   Messages passed by CIP implementations over reliable
      transport\n   mechanisms fall into three categories: requests, responses and\n
      \  results. All requests result in either a response or a result. A\n   result
      sent in response to a request must be interpreted as a\n   successful operation.\n
      \  Requests, responses and results are formatted as MIME [RFC2046]\n   messages.
      The specific MIME types involved are defined below.\n   As with all MIME objects,
      CIP messages may be wrapped in a security\n   multipart package to provide authentication
      and privacy. The security\n   policy with respect to all messages is implementation
      defined, when\n   not explicitly discussed below. CIP implementors are strongly
      urged\n   to allow server administrators maximum configurability to secure\n
      \  their servers against maliciously sent anonymous CIP messages. In\n   general,
      operations which can permanently change the server's state\n   in a harmful
      way should only take place upon receipt of a properly\n   signed message from
      a trusted CIP peer or administrator. Implementors\n   should provide appropriate
      auditing capabilities so that both\n   successful and failed requests can be
      tracked by the server\n   administrator.\n   Since these MIME objects can and
      will be sent over several different\n   protocols, body termination is specified
      by the transfer protocol.\n   New protocols are encouraged to use SMTP [RFC821]
      style body\n   termination.\n   Finally, since MIME objects can specify their
      own encoding, the\n   line-breaks contained within each body are defined by
      the encoding.\n   Thus, instead of specifying them as carriage-return and/or
      linefeed,\n   the identifier <linebreak> is used. Linebreaks in the headers
      and\n   separating the body from the headers follow existing standards.\n"
    title: 2.0 CIP Transactions
  - contents:
    - "2.1 Common syntactic definitions\n   There are certain syntactic elements common
      to all of the CIP\n   transactions. These include type, DSI and the Base-URI.\n"
    - contents:
      - "2.1.1 The \"application/index\" MIME type tree\n   Due to requirements in
        RFC2048 concerning objects that have the same\n   type but different syntaxes,
        CIP objects will use the\n   application/index tree but include \"facets\"
        [RFC2048] which extend it\n   as other types have done with respect to global
        elements and vendor\n   specific enhancements. Thus the tree is divided up
        into the following\n   branches:\n      application/index.cmd._command_\n
        \     application/index.response\n      application/index.obj._type_\n      application/index.vnd._xxx_\n
        \     _command_ is a command as specified here. It contains commands and\n
        \     their arguments.\n      _type_ identifies what type of CIP index object
        is contained\n      within the body. It is unique among all other reserved
        types.\n      Reserved types are those previously documented by other CIP
        index\n      object specifications, according to standard IETF processes.\n
        \     _xxx_ is an identifier specified by a vendor for use by that\n      vendor
        in operations specifically to do with indexes.\n   All of the above identifiers
        follow the rules in RFC2048 for valid\n   MIME types. In addition commands,
        responses and types are limited by\n   this document to consist of from 1
        to 20 characters from the set [a-\n   zA-Z0-9-]; that is, all upper and lower
        case letters, all digits, and\n   the ASCII minus character (decimal 45).
        Though type names may be\n   specified case sensitively, they must be compared
        and otherwise\n   processed case insensitively.\n   Appendix A contains the
        registration template for the\n   application/index tree.\n"
      title: 2.1.1 The "application/index" MIME type tree
    - contents:
      - "2.1.2 DSI\n   A dataset identifier is an identifier chosen from any part
        of the\n   ISO/CCITT OID space. The DSI uniquely identifies a given dataset\n
        \  among all datasets indexed by CIP.\n   As currently defined, OID's are
        an unbounded sequence of unbounded\n   integers. While this creates an infinite
        numbering space, it presents\n   problems for implementors dealing with machines
        with finite\n   resources. To ease implementation, this document specifies
        an ASCII\n   encoding of the OID, and specifies limits which make implementation\n
        \  easier.\n   For the purposes of interchange in CIP messages, an OID must
        conform\n   to the following rules:\n      dsi          = integer *( \".\"
        integer)\n      integer      = all-digits / (one-to-nine *all-digits)\n      one-to-nine
        \ = \"1\" / \"2\" / \"3\" / \"4\" / \"5\" / \"6\" / \"7\" /\n                     \"8\"
        / \"9\"\n      all-digits   = \"0\" / one-to-nine\n   Under no circumstances
        shall the total length of the resulting string\n   exceed 255 characters.
        OID's which cannot, due to their length,\n   conform to these rules must not
        be used as CIP dataset identifiers.\n   An implementation must not attempt
        to parse the individual integers\n   unless it is prepared to handle arbitrary-length
        integers. Treating\n   the DSI as anything other than an opaque string of
        US-ASCII\n   characters is not recommended.\n   Two CIP DSI's are considered
        to match if both conform to the above\n   rules and every number matches.\n"
      title: 2.1.2 DSI
    - contents:
      - "2.1.3. Base-URI\n   CIP index objects carry base-URI's to facilitate referral
        generation\n   based on the index object. The base-URI parameter carries a\n
        \  whitespace-delimited list of URL's. URL's are defined in RFC-1738.\n   The
        exact rules are as follows:\n      base-uri    = genericurl *( 1*whitespace
        genericurl )\n      whitespace  = \"<space>\" (decimal 32) /\n                    \"<tab>\"
        \  (decimal 9)  /\n                    \"<cr>\"    (decimal 13) /\n                    \"<lf>\"
        \   (decimal 10)\n      genericurl = { as specified in RFC-1738, section 5
        }\n"
      title: 2.1.3. Base-URI
    title: 2.1 Common syntactic definitions
  - contents:
    - "2.2 Response format\n   All requests must be followed by a response code, except
      in the cases\n   where a return path is unavailable.\n   The definition for
      this MIME type is:\n      MIME type name:          application\n      MIME subtype
      name:       index.response\n      Required parameters:      code\n      Optional
      parameters:     charset\n      Security considerations: (See Section 4)\n   The
      code parameter contains a 3 digit return code that denotes the\n   status of
      the last command.\n   The format of the body is such that the first line is
      interpreted as\n   the comment corresponding to the code. As with most response
      codes\n   this comment is intended for human consumption and may not exist and\n
      \  must not be depended on by the protocol. Subsequent lines in the body\n   are
      reserved for each response to define.  In the case where the\n   comment is
      not given the first must be an empty line.\n      body = comment linebreak payload\n
      \     comment = { any text }\n      linebreak = (decimal 13) (decimal 10)\n
      \     payload = { any text }\n   The charset parameter has its normal MIME meaning.
      Below are several\n   examples:\n   [begin MIME]\n   Content-type: application/index.response;
      code=220\n   CIP Server v1.0 ready!<linebreak>\n   [end MIME]\n   [begin MIME]\n
      \  Content-type: application/index.response; code=500\n   MIME formatting problem<linebreak>\n
      \  [end MIME]\n   [begin MIME]\n   Content-type: application/index.response;
      code=520\n   <linebreak>\n   [end MIME]\n   While the responses described in
      this document do not utilize the\n   rest of the lines in the body of a response
      implementors should take\n   care to not disallow it in the future. A good example
      would be a\n   message specifying that a poll request did not contain required\n
      \  attributes. This message might look like this:\n   [begin MIME]\n   Content-type:
      application/index.response; code=502\n   Request is missing required CIP attributes\n
      \  Missing-Attribute: attribute1\n   Missing-Attribute: attribute2\n   Missing-Attribute:
      attribute3\n   [end MIME]\n   The meaning of the various digits in the response
      codes is discussed\n   in RFC-821, Appendix E.\n   See Appendix B for a list
      of the valid response codes.\n"
    title: 2.2 Response format
  - contents:
    - "2.3 Command format\n   A CIP command either initiates an index transfer, interrogates
      the\n   state of the receiver-CIP (or the server's participation in the\n   mesh),
      or changes the state of the server (or the server's place in\n   the mesh).\n
      \  CIP commands are sent as a MIME message of type\n   \"application/index.cmd._command_\".
      The definition for this MIME type\n   tree follows:\n      MIME type name:          application\n
      \     MIME subtype name:       index.cmd._command_\n      Optional parameters:
      \    type, dsi\n      Security considerations: (See Section 4)\n   The format
      of the body is defined by each command. A general\n   attribute/value pair orientation
      is preserved throughout the\n   following specified commands. Those developing
      future command should\n   attempt to maintain that orientation but are not required
      to do so.\n   In the following sections, the server's response for each possible\n
      \  value for \"command\" is defined. Note that the parameters listed as\n   optional
      above are only optional with respect to the generic MIME\n   form. The optional
      parameters are only optional with respect to MIME\n   parsing. If one or more
      of the parameters needed to fulfill a command\n   is missing, a response code
      of 502 is returned.\n   Extra optional parameters which are unrecognized must
      be silently\n   ignored.\n"
    - contents:
      - "2.3.1 No-operation\n      Command Name:        application/index.cmd.noop\n
        \     Required parameters: (none)\n   A CIP command with the \"command\" parameter
        set to \"noop\" must be\n   acknowledged with response type code 200 (command
        OK, no response\n   forthcoming).\n   This command must not require a signed
        MIME object. Implementations\n   should accept commands which have been validly
        signed.\n   Example:\n   [begin MIME]\n   Content-type: application/index.cmd.noop\n
        \  [end MIME]\n   Note the lack of a body but how the <linebreak> pair is
        still\n   preserved after the Content-type header.\n"
      title: 2.3.1 No-operation
    - contents:
      - "2.3.2 Poll\n      Request Name:        application/index.cmd.poll\n      Required
        parameters: type, dsi\n   The \"poll\" command is used by a poller to request
        the transfer of an\n   index object. It requires the following parameters:\n
        \     type:      The index object type requested\n      dsi:       The dataset
        which the index should cover\n   If there are no index objects available for
        a given DSI, or the\n   receiver-CIP does not support a given index object
        type, the\n   receiver-CIP must respond with response code 200, (successful,
        no\n   response forthcoming).  Otherwise, the response code must be 201\n
        \  (successful, response is forthcoming).\n   The security policy for polling
        commands is wholly implementation\n   defined. Implementations may be configured
        to accept or reject\n   anonymous poll commands.\n   Example:\n   [begin MIME]\n
        \  Content-type: application/index.cmd.poll; type=\"simple\";\n           dsi=
        \"1.3.5.7.9\"\n   Template: contact name address phone<linebreak>\n   Start-time:
        Fri May 30 14:25:30 EDT 1997<linebreak>\n   End-time: Sat May 31 14:25:30
        EDT 1997<linebreak>\n   [end MIME]\n"
      title: 2.3.2 Poll
    - contents:
      - "2.3.3 DataChanged\n      Request Name:        application/index.cmd.datachanged\n
        \     Required parameters: type, dsi\n   The \"datachanged\" command is used
        by a pollee to notify a poller that\n   the data within an index has changed.
        It requires the following\n   parameters:\n      type:      The index object
        type requested\n      dsi:       The dataset which the index should cover\n
        \  If there are no index objects available for a given DSI, or the\n   receiver-CIP
        does not support a given index object type, the\n   receiver-CIP must respond
        with response code 200, (successful, no\n   response forthcoming).  Otherwise,
        the response code must be 201\n   (successful, response is forthcoming).\n
        \  The body of a DataChanged command is formatted as a simple set of\n   attribute
        value pairs following the rules of RFC822. The actual\n   attributes and values
        allowed are defined by the index type\n   specification.\n   The security
        policy for DataChanged commands is wholly implementation\n   defined. Implementations
        may be configured to accept or reject\n   anonymous DataChanged commands.\n
        \  Example:\n   [begin MIME]\n   Content-type: application/index.cmd.datachanged;\n
        \          type=\"simple\"; dsi= \"1.3.5.7.9\"<linebreak>\n   Time-of-latest-change:
        Fri May 30 14:25:30 EDT 1997<linebreak>\n   Time-of-message-generation: Fri
        May 30 14:25:30 EDT 1997<linebreak>\n   Host-Name: cip.rwhois.net<linebreak>\n
        \  Host-Port: 4322<linebreak>\n   Protocol: RWhois2.0<linebreak>\n   [end
        MIME]\n"
      title: 2.3.3 DataChanged
    - contents:
      - "2.3.4 Additional Requests\n   The requests specified above are those required
        to implement a simple\n   mesh. It is expected that other requests will be
        developed to handle\n   issues of mesh-management and statistics gathering
        requests. At this\n   point this is an area of additional work. Specifically
        more work is\n   needed in the area of mesh management as meshes will tend
        to be\n   organized around the characteristics of their index type.\n"
      title: 2.3.4 Additional Requests
    title: 2.3 Command format
  - contents:
    - "2.4. Index Object format\n   In reply to the \"poll\" command, a server may
      choose to send one or\n   more index objects. Regardless of the number of index
      objects\n   returned, the response must take the form of a MIME multipart/mixed\n
      \  message. Each part must itself be a MIME object of type\n   \"application/index.obj._type_\".
      The definition for this type follows:\n      MIME type name:          application\n
      \     MIME subtype name:       index.obj._type_\n      Required parameters:
      \    dsi, base-uri\n      Optional parameters:     none\n      Security considerations:
      (See Section 4)\n      As previously described, each index object is of a particular\n
      \     type.  This type is specified in the MIME subtype name since some\n      types
      may have a different syntax.\n      The required parameters are to be used as
      follows:\n      DSI:       The DSI is a string which globally uniquely identifies\n
      \                the dataset from which the index was created.\n      base-URI:
      \ One or more URI's will form the base of any referrals\n                 created
      based upon this index object.\n"
    title: 2.4. Index Object format
  title: 1. Introduction
- contents:
  - "3. Index Type Definition Requirements\n   Because of the need for application
    domain specific indices, CIP\n   index objects are abstract; they must be defined
    by a separate\n   specification. The basic protocols for moving index objects
    are\n   widely applicable, but the specific design of the index, and the\n   structure
    of the mesh of servers which pass a particular type of\n   index is dependent
    on the application domain. While companion\n   documents will describe index objects,
    there is a set of base\n   requirements and questions those documents must address.
    This is to\n   ensure that the base assumptions that the CIP protocol makes about\n
    \  its indexes are actually expressible within the index.\n   Since each type
    is a MIME type all its own, registration of new types\n   follows the standard
    registration policies specified in RFC2048.\n"
  - contents:
    - "3.1 Type specific requests\n   Any index type definition must address the type
      specific bodies of\n   the Poll and DataChanged requests. All parameters included
      in the\n   body must be specified.\n"
    title: 3.1 Type specific requests
  - contents:
    - '3.2 The index.obj parameters

      '
    - contents:
      - "3.2.1 Type\n   See the above definitions for allowed values for type.\n   A
        new name must be assigned when any changes to the document\n   describing
        the index object type are not completely backwards\n   compatible.\n"
      title: 3.2.1 Type
    - contents:
      - "3.2.2 DSI\n   Another attribute is the \"DSI\", or Dataset Identifier, which
        uniquely\n   identifies the dataset from which the index was created. The
        index\n   specification should define the policies for how the DSI is\n   generated.
        This includes the concept of what a data-set means for the\n   given index.\n"
      title: 3.2.2 DSI
    - contents:
      - "3.2.3. Base-URI\n   An attribute of the index object which is crucial for
        generating\n   referrals is the \"Base-URI\". The URI (or URI's) contained
        in this\n   attribute form the basis of any referrals generated based on this\n
        \  index block. The URI is also used as input during the index\n   aggregation
        process to constrain the possible types of aggregation.\n   This use of the
        Base-URI is used to deal with meshes that support\n   multiple protocols.\n
        \  Thus, an index specification should define how the Base-URI applies\n   to
        the underlying index and how it is changed during the aggregation\n   process.\n"
      title: 3.2.3. Base-URI
    title: 3.2 The index.obj parameters
  - contents:
    - "3.3 Aggregation\n   All index object specifications must address the issue
      of\n   aggregation.  This is the method by which an index server takes two\n
      \  or more indexes and combines them into one index to be passed on. It\n   is
      not required that a given index-type aggregate. If it does not it\n   must explicitly
      address the reasons why and what affect that has on\n   scalability.\n   If
      a given index does aggregate, the algorithm for that aggregation\n   must be
      given. It must also address how that algorithm affects mesh\n   organization
      and scalability.\n   Index object document authors should remember that any
      kind of\n   aggregation should be performed without compromising the ability
      to\n   correctly route queries while avoiding excessive numbers of missed\n
      \  results. The acceptable likelihood of false negatives must be\n   established
      on a per-application-domain basis, and is controlled by\n   the granularity
      of the index and the aggregation rules defined for it\n   by the particular
      specification.\n   Nothing in these documents specifically disallows aggregation
      rules\n   that deal with different index object types. This type of\n   heterogeneous
      mesh is difficult to formulate at best and thus is not\n   covered by these
      documents. If document authors wish to attempt such\n   a mesh they should be
      aware that it is considered an ill understood\n   concept that contains many
      pitfalls for the mesh builder.\n"
    title: 3.3 Aggregation
  - contents:
    - "3.4 Referral Generation Semantics\n   Since the method by which a client navigates
      the mesh is by\n   referrals, the document must address how a given access protocol\n
      \  generates a referral from the index. Authors should pay particular\n   attention
      to the case where an index is accessed by different\n   protocols and the interaction
      between them. For example, an index\n   that supports referrals being generated
      for both RWhois and LDAP must\n   understand that one uses a Distinguished Name
      while the other\n   doesn't. The impacts of these differences on the referral
      should be\n   clear.\n"
    title: 3.4 Referral Generation Semantics
  - contents:
    - "3.5 Matching Semantics\n   In order to generate a referral the decision of
      whether or not to do\n   so must be handled by the access protocol. The semantics
      surrounding\n   this decision have a large impact on the efficiency of searches
      as\n   well as the requirements on aggregation. Thus, index specification\n
      \  authors must be very clear about how a match is determined.\n"
    title: 3.5 Matching Semantics
  - contents:
    - "3.6 Security Considerations\n   As is customary with Internet protocol documentation,
      a brief review\n   of security implications of the proposed object must be included.\n
      \  This section may need to do little more than echo the considerations\n   expressed
      in this document's Security Considerations section.\n"
    title: 3.6 Security Considerations
  - contents:
    - "3.7 Optional Coverage\n   Because indexing algorithms, stop-lists, and data
      reduction\n   technologies are considered by some index object designers to
      be\n   proprietary, it is not necessary to discuss the process used to\n   derive
      indexing information from a body of source material. When\n   proprietary indexing
      technologies are used in a public mesh, all CIP\n   servers in the mesh should
      be able to parse the index object (and\n   perform aggregation operations, if
      necessary), though not all of them\n   need to be able to create these proprietary
      indices from source data.\n   Thus, index object designers may choose to remain
      silent on the\n   algorithms used for the generation of indices, as long as
      they\n   adequately document how to participate in a mesh of servers passing\n
      \  these proprietary indices.\n   Designers should also seriously consider including
      useful examples of\n   source data, the generated index, and the expected results
      from\n   example matches. When the aggregation algorithm is complex, it is\n
      \  recommended that a table showing two indices and the resultant\n   aggregate
      index be included.\n"
    title: 3.7 Optional Coverage
  title: 3. Index Type Definition Requirements
- contents:
  - "4. Security Considerations\n   Security considerations come into play in at least
    the following two\n   scenarios.  Indexing information can leak undesirable amounts
    of\n   proprietary information, unless carefully controlled. At a more\n   fundamental
    level, the CIP protocol itself requires external security\n   services to operate
    in a safe manner. Both topics are covered below.\n"
  - contents:
    - "4.1 Secure Indexing\n   CIP is designed to index all kinds of data. Some of
      this data might\n   be considered valuable, proprietary, or even highly sensitive
      by the\n   data maintainer. Take, for example, a human resources database.\n
      \  Certain bits of data, in moderation, can be very helpful for a\n   company
      to make public. However, the database in its entirety is a\n   very valuable
      asset, which the company must protect. Much experience\n   has been gained in
      the directory service community over the years as\n   to how best to walk this
      fine line between completely revealing the\n   database and making useful pieces
      of it available.\n   Another example where security becomes a problem is for
      a data\n   publisher who would like to participate in a CIP mesh. The data that\n
      \  publisher creates and manages is the prime asset of the company.\n   There
      is a financial incentive to participate in a CIP mesh, since\n   exporting indices
      of the data will make it more likely that people\n   will search your database.
      (Making profit off of the search activity\n   is left as an exercise to the
      entrepreneur.) Once again, the index\n   must be designed carefully to protect
      the database while providing a\n   useful synopsis of the data.\n   One of the
      basic premises of CIP is that data providers will be\n   willing to provide
      indices of their data to peer indexing servers.\n   Unless they are carefully
      constructed, these indices could constitute\n   a threat to the security of
      the database. Thus, security of the data\n   must be a prime consideration when
      developing a new index object\n   type. The risk of reverse engineering a database
      based only on the\n   index exported from it must be kept to a level consistent
      with the\n   value of the data and the need for fine-grained indexing.\n   Since
      CIP is encoded as MIME objects, MIME security solutions should\n   be used whenever
      possible. Specifically when dealing with security\n   between index servers.\n"
    title: 4.1 Secure Indexing
  - contents:
    - "4.2 Protocol Security\n   CIP protocol exchanges, taking the form of MIME messages,
      can be\n   secured using any technology available for securing MIME objects.
      In\n   particular, use of RFC-1847's Security Multiparts are recommended.  A\n
      \  solid application of RFC-1847 using widely available encryption\n   software
      is PGP/MIME, RFC-2016. Implementors are encouraged to\n   support PGP/MIME,
      as it is the first viable application of the MIME\n   Security Multiparts architecture.
      As other technologies become\n   available, they may be incorporated into the
      CIP mesh.\n   If an incoming request does not have a valid signature, it must
      be\n   considered anonymous for the purposes of access control. Servers may\n
      \  choose to allow certain requests from anonymous peers, especially\n   when
      the request cannot cause permanent damage to the local server.\n   In particular,
      answering anonymous poll requests encourages index\n   builders to poll a server,
      making the server's resources better\n   known.\n   The explicit security policy
      with respect to incoming requests is\n   outside the scope of this specification.
      Implementors are free to\n   accept or reject any request based on the security
      attributes of the\n   incoming message. When a request is rejected due to authentication\n
      \  reasons, a response code from the 530 series must be issued.\n"
    - "Acknowledgments\n   Thanks to the many helpful members of the FIND working
      group for\n   discussions leading to this specification.\n   Specific acknowledgment
      is given to Jeff Allen formerly of Bunyip\n   Information Systems. His original
      version of these documents helped\n   enormously in crystallizing the debate
      and consensus. Most of the\n   actual text in this document was originally authored
      by Jeff.\n"
    - "Authors' Addresses\n   Jeff R. Allen\n   246 Hawthorne St.\n   Palo Alto, CA
      94301\n   EMail: jeff.allen@acm.org\n   Michael Mealling\n   Network Solutions,
      Inc.\n   505 Huntmar Park Drive\n   Herndon, VA 22070\n   Phone: +1-703-742-0400\n
      \  EMail: michael.mealling@RWhois.net\n"
    - "References\n   [FRAMEWORK]  Allen, J. and M. Mealling, \"The Architecture of
      the\n                Common Indexing Protocol (CIP)\", RFC 2651, August 1999.\n
      \  [RFC2046]    Freed, N. and N. Borenstein, \"Multipurpose Internet Mail\n
      \               Extensions (MIME) Part Two: Media Types\", RFC 2046,\n                January
      1996.\n   [RFC2048]    Freed, N., Klensin, J. and J. Postel, \"Multipurpose\n
      \               Internet Mail Extensions (MIME) Part Four: MIME\n                Registration
      Procedures\", RFC 2048, January 1996.\n   [RFC2119]    Bradner, S., \"Key words
      for use in RFCs to Indicate\n                Requirement Levels\", BCP 14, RFC
      2119, March 1997.\n   [RFC821]     Postel, J., \"Simple Mail Transfer Protocol\",
      STD 10, RFC\n                821, August 1992.\n"
    title: 4.2 Protocol Security
  title: 4. Security Considerations
- contents:
  - "Appendix A: Media Type Registration Templates\n   The following templates have
    been registered with the IANA:\n"
  - "Index tree\n   To: ietf-types@iana.org\n   Subject: Registration of MIME media
    type tree application/index\n   MIME media type name: application\n   MIME subtype
    name: index\n   Required parameters: none\n   Optional parameters: none\n   Encoding
    considerations: none\n   Security considerations:\n      Security considerations
    come into play in at least the following\n      two scenarios.  Indexing information
    can leak undesirable amounts\n      of proprietary information, unless carefully
    controlled. At a more\n      fundamental level, the CIP protocol itself requires
    external\n      security services to operate in a safe manner. Both topics are\n
    \     covered below.\n   Interoperability considerations:\n   Published specification:\n
    \     RFC 2652\n   Applications which use this media type:\n      This media type
    is used to contain information about indices and\n      how they inter-operate
    to form meshes of index servers.\n   Additional information:\n      This media
    type is not a standalone type. It is the top level of a\n      tree similar to
    the vnd or prs trees specified in Section 2.1 of\n      RFC2048. There are four
    specified branches to this tree:\n            application/index.cmd\n            application/index.response\n
    \           application/index.obj\n            application/index.vnd\n      Each
    of these branches is a tree in its own right with types\n      registered below
    them. See those registrations for more\n      information on the types allowed
    below those branches.\n   Person & email address to contact for further information:\n
    \  Intended usage: LIMITED USE\n   Author/Change controller:\n"
  - "Command tree\n   To: ietf-types@iana.org\n   Subject: Registration of MIME media
    type application/index.cmd\n   MIME media type name: application\n   MIME subtype
    name: index.cmd\n   Required parameters: none\n   Optional parameters: none\n
    \  Encoding considerations: none\n   Security considerations:\n      Security
    considerations come into play in at least the following\n      two scenarios.
    \ Indexing information can leak undesirable amounts\n      of proprietary information,
    unless carefully controlled. At a more\n      fundamental level, the CIP protocol
    itself requires external\n      security services to operate in a safe manner.
    Both topics are\n      covered below.\n   Interoperability considerations:\n      Implementors
    should handle unknown commands gracefully.\n   Published specification:\n      RFC
    2652\n   Applications which use this media type:\n      This media type is the
    top of a tree of media types that express\n      commands between hosts that exchange
    indices for the purpose of\n      routing referrals.\n   Additional information:\n
    \     This media type is not a standalone type. It is the top of a tree\n      similar
    to the vnd and prs trees specified in Section 2.1 of\n      RFC2048. Types registered
    within this tree are limited to being\n      commands as specified in the document(s)
    referenced in the\n      \"Published specifications\" section.\n   Person & email
    address to contact for further information:\n   Intended usage: LIMITED USE\n
    \  Author/Change controller:\n"
  - "Response tree\n   To: ietf-types@iana.org\n   Subject: Registration of MIME media
    type application/index.response\n   MIME media type name: application\n   MIME
    subtype name: index.response\n   Required parameters: code\n   Optional parameters:
    none\n   Encoding considerations: none\n   Security considerations:\n      Security
    considerations come into play in at least the following\n      two scenarios.
    \ Indexing information can leak undesirable amounts\n      of proprietary information,
    unless carefully controlled. At a more\n      fundamental level, the CIP protocol
    itself requires external\n      security services to operate in a safe manner.
    Both topics are\n      covered below.\n   Interoperability considerations:\n      Implementors
    should handle unknown responses gracefully.\n   Published specification:\n      RFC
    2652\n   Applications which use this media type:\n      This media type is used
    to encode responses to CIP commands passed\n      between hosts that exchange
    indices for the purpose of routing\n      referrals.\n   Additional information:\n
    \     This media type _is_ a standalone type. The code parameter\n      contains
    the specific response code as specified by Appendix B of\n      the specification
    document.\n   Person & email address to contact for further information:\n   Intended
    usage: LIMITED USE\n   Author/Change controller:\n"
  - "Index Object tree\n   To: ietf-types@iana.org\n   Subject: Registration of MIME
    media type application/index.obj\n   MIME media type name: application\n   MIME
    subtype name: index.obj\n   Required parameters: type, dsi, base-uri\n   Optional
    parameters: none\n   Encoding considerations: none\n   Security considerations:\n
    \     Security considerations come into play in at least the following\n      two
    scenarios.  Indexing information can leak undesirable amounts\n      of proprietary
    information, unless carefully controlled. At a more\n      fundamental level,
    the CIP protocol itself requires external\n      security services to operate
    in a safe manner. Both topics are\n      covered below.\n   Interoperability considerations:\n
    \     Implementors should handle unknown index objects according to\n      rules
    specified in the published specification.\n   Published specification:\n      RFC
    2652\n   Applications which use this media type:\n      This media type is the
    top of a tree of media types that express\n      indexes that are exchanged between
    hosts that operate within a\n      referral mesh.\n   Additional information:\n
    \     This media type is not a standalone type. It is the top of a tree\n      similar
    to the vnd and prs trees specified in Section 2.1 of\n      RFC2048. Types registered
    within this tree are limited to being\n      representations of indexes that contain
    some summary of the data\n      found in some database and is used to generate
    referrals as\n      specified in the above specified publication.\n   Person &
    email address to contact for further information:\n   Intended usage: LIMITED
    USE\n   Author/Change controller:\n"
  - "Vendor tree\n   To: ietf-types@iana.org\n   Subject: Registration of MIME media
    type application/index.vnd\n   MIME media type name: application\n   MIME subtype
    name: index.vnd\n   Required parameters: none\n   Optional parameters: none\n
    \  Encoding considerations: none\n   Security considerations:\n      Security
    considerations come into play in at least the following\n      two scenarios.
    \ Indexing information can leak undesirable amounts\n      of proprietary information,
    unless carefully controlled. At a more\n      fundamental level, the CIP protocol
    itself requires external\n      security services to operate in a safe manner.
    Both topics are\n      covered below.\n   Interoperability considerations:\n      Implementors
    should handle unknown objects gracefully.\n   Published specification:\n      RFC
    2652\n   Applications which use this media type:\n      This media type is the
    top of a tree of media types that express\n      vendor specific extensions to
    the framework specified in the\n      published specifications.\n   Additional
    information:\n      This media type is not a standalone type. It is the top of
    a tree\n      similar to the vnd and prs trees specified in Section 2.1 of\n      RFC2048.
    Types registered within this tree are limited to being\n      vendor specific
    extensions to the CIP framework as specified in\n      the publications. Any registrations
    within this tree are still\n      limited to dealing with indexes, meshes and
    referrals.\n   Person & email address to contact for further information:\n   Intended
    usage: LIMITED USE\n"
  title: 'Appendix A: Media Type Registration Templates'
- contents:
  - "Appendix B: Response Codes\n   The meaning of the various digits in the response
    codes is discussed\n   in RFC-821, Appendix E.\n   The following response codes
    are defined for use by CIPv3 servers.\n   Implementors must use these exact codes;
    undefined codes should be\n   interpreted by CIP servers as fatal protocol errors.
    \ Instead of\n   defining new codes for unforeseen situations, implementors must
    adapt\n   one of the given codes. The implementation should attach a useful\n
    \  alternative comment to the reused response code.\n      Code    Suggested description
    text\n              Sender-CIP action\n      --------------------------------------------------------\n
    \     220     Initial server banner message\n      300     Requested CIP version
    accepted\n              Continue with CIP transaction, in the specified\n              version.\n
    \     222     Connection closing (in response to sender-CIP close)\n              Done
    with transaction.\n      200     MIME request received and processed\n              Expect
    no output, continue session (or close)\n      201     MIME request received and
    processed, output follows\n              Read a response, delimited by SMTP-style
    message\n              delimiter.\n      400     Temporarily unable to process
    request\n              Retry at a later time. May be used to indicate\n              that
    the server does not currently have the\n              resources available to accept
    an index.\n      500     Bad MIME message format\n              Retry with correctly
    formatted MIME request.\n      501     Unknown or missing request in application/index.cmd\n
    \             Retry with correct CIP command.\n      502     Request is missing
    required CIP attributes\n              Retry with correct CIP attributes.\n      520
    \    Aborting connection for some unexpected reason\n              Retry and/or
    alert local administrator.\n      530     Request requires valid signature\n              Sign
    the request, if possible, and retry.\n              Otherwise, report problem
    to the administrator.\n      531     Request has invalid signature\n              Report
    problem to the administrator.\n      532     Cannot check signature\n              Alert
    local administrator, who should cooperate with\n              remote administrator
    to diagnose and resolve the\n              problem. (Probably missing a public
    key.)\n"
  title: 'Appendix B: Response Codes'
- contents:
  - "5.  Full Copyright Statement\n   Copyright (C) The Internet Society (1999).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
