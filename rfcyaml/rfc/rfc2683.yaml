- title: __initial_text__
  contents:
  - '                  IMAP4 Implementation Recommendations

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: 1. Abstract
  contents:
  - "1. Abstract\n   The IMAP4 specification [RFC-2060] describes a rich protocol\
    \ for use\n   in building clients and servers for storage, retrieval, and\n  \
    \ manipulation of electronic mail.  Because the protocol is so rich and\n   has\
    \ so many implementation choices, there are often trade-offs that\n   must be\
    \ made and issues that must be considered when designing such\n   clients and\
    \ servers.  This document attempts to outline these issues\n   and to make recommendations\
    \ in order to make the end products as\n   interoperable as possible.\n"
- title: 2. Conventions used in this document
  contents:
  - "2. Conventions used in this document\n   In examples, \"C:\" indicates lines\
    \ sent by a client that is connected\n   to a server.  \"S:\" indicates lines\
    \ sent by the server to the client.\n   The words \"must\", \"must not\", \"should\"\
    , \"should not\", and \"may\" are\n   used with specific meaning in this document;\
    \ since their meaning is\n   somewhat different from that specified in RFC 2119,\
    \ we do not put\n   them in all caps here.  Their meaning is as follows:\n   must\
    \ --       This word means that the action described is necessary\n          \
    \       to ensure interoperability.  The recommendation should\n             \
    \    not be ignored.\n   must not --   This phrase means that the action described\
    \ will be\n                 almost certain to hurt interoperability.  The\n  \
    \               recommendation should not be ignored.\n   should --     This word\
    \ means that the action described is strongly\n                 recommended and\
    \ will enhance interoperability or\n                 usability.  The recommendation\
    \ should not be ignored\n                 without careful consideration.\n   should\
    \ not -- This phrase means that the action described is strongly\n           \
    \      recommended against, and might hurt interoperability or\n             \
    \    usability.  The recommendation should not be ignored\n                 without\
    \ careful consideration.\n   may --        This word means that the action described\
    \ is an\n                 acceptable implementation choice.  No specific\n   \
    \              recommendation is implied; this word is used to point\n       \
    \          out a choice that might not be obvious, or to let\n               \
    \  implementors know what choices have been made by\n                 existing\
    \ implementations.\n"
- title: 3. Interoperability Issues and Recommendations
  contents:
  - '3. Interoperability Issues and Recommendations

    '
- title: 3.1.   Accessibility
  contents:
  - "3.1.   Accessibility\n   This section describes the issues related to access\
    \ to servers and\n   server resources.  Concerns here include data sharing and\
    \ maintenance\n   of client/server connections.\n"
- title: 3.1.1. Multiple Accesses of the Same Mailbox
  contents:
  - "3.1.1. Multiple Accesses of the Same Mailbox\n   One strong point of IMAP4 is\
    \ that, unlike POP3, it allows for\n   multiple simultaneous access to a single\
    \ mailbox.  A user can, thus,\n   read mail from a client at home while the client\
    \ in the office is\n   still connected; or the help desk staff can all work out\
    \ of the same\n   inbox, all seeing the same pool of questions.  An important\
    \ point\n   about this capability, though is that NO SERVER IS GUARANTEED TO\n\
    \   SUPPORT THIS.  If you are selecting an IMAP server and this facility\n   is\
    \ important to you, be sure that the server you choose to install,\n   in the\
    \ configuration you choose to use, supports it.\n   If you are designing a client,\
    \ you must not assume that you can\n   access the same mailbox more than once\
    \ at a time.  That means\n   1. you must handle gracefully the failure of a SELECT\
    \ command if the\n      server refuses the second SELECT,\n   2. you must handle\
    \ reasonably the severing of your connection (see\n      \"Severed Connections\"\
    , below) if the server chooses to allow the\n      second SELECT by forcing the\
    \ first off,\n   3. you must avoid making multiple connections to the same mailbox\
    \ in\n      your own client (for load balancing or other such reasons), and\n\
    \   4. you must avoid using the STATUS command on a mailbox that you have\n  \
    \    selected (with some server implementations the STATUS command has\n     \
    \ the same problems with multiple access as do the SELECT and\n      EXAMINE commands).\n\
    \   A further note about STATUS: The STATUS command is sometimes used to\n   check\
    \ a non-selected mailbox for new mail.  This mechanism must not\n   be used to\
    \ check for new mail in the selected mailbox; section 5.2 of\n   [RFC-2060] specifically\
    \ forbids this in its last paragraph.  Further,\n   since STATUS takes a mailbox\
    \ name it is an independent operation, not\n   operating on the selected mailbox.\
    \  Because of this, the information\n   it returns is not necessarily in synchronization\
    \ with the selected\n   mailbox state.\n"
- title: 3.1.2. Severed Connections
  contents:
  - "3.1.2. Severed Connections\n   The client/server connection may be severed for\
    \ one of three reasons:\n   the client severs the connection, the server severs\
    \ the connection,\n   or the connection is severed by outside forces beyond the\
    \ control of\n   the client and the server (a telephone line drops, for example).\n\
    \   Clients and servers must both deal with these situations.\n   When the client\
    \ wants to sever a connection, it's usually because it\n   has finished the work\
    \ it needed to do on that connection.  The client\n   should send a LOGOUT command,\
    \ wait for the tagged response, and then\n   close the socket.  But note that,\
    \ while this is what's intended in\n   the protocol design, there isn't universal\
    \ agreement here.  Some\n   contend that sending the LOGOUT and waiting for the\
    \ two responses\n   (untagged BYE and tagged OK) is wasteful and unnecessary,\
    \ and that\n   the client can simply close the socket.  The server should interpret\n\
    \   the closed socket as a log out by the client.  The counterargument is\n  \
    \ that it's useful from the standpoint of cleanup, problem\n   determination,\
    \ and the like, to have an explicit client log out,\n   because otherwise there\
    \ is no way for the server to tell the\n   difference between \"closed socket\
    \ because of log out\" and \"closed\n   socket because communication was disrupted\"\
    .  If there is a\n   client/server interaction problem, a client which routinely\n\
    \   terminates a session by breaking the connection without a LOGOUT will\n  \
    \ make it much more difficult to determine the problem.\n   Because of this disagreement,\
    \ server designers must be aware that\n   some clients might close the socket\
    \ without sending a LOGOUT.  In any\n   case, whether or not a LOGOUT was sent,\
    \ the server should not\n   implicitly expunge any messages from the selected\
    \ mailbox.  If a\n   client wants the server to do so, it must send a CLOSE or\
    \ EXPUNGE\n   command explicitly.\n   When the server wants to sever a connection\
    \ it's usually due to an\n   inactivity timeout or is because a situation has\
    \ arisen that has\n   changed the state of the mail store in a way that the server\
    \ can not\n   communicate to the client.  The server should send an untagged BYE\n\
    \   response to the client and then close the socket.  Sending an\n   untagged\
    \ BYE response before severing allows the server to send a\n   human-readable\
    \ explanation of the problem to the client, which the\n   client may then log,\
    \ display to the user, or both (see section 7.1.5\n   of [RFC-2060]).\n   Regarding\
    \ inactivity timeouts, there is some controversy.  Unlike\n   POP, for which the\
    \ design is for a client to connect, retrieve mail,\n   and log out, IMAP's design\
    \ encourages long-lived (and mostly\n   inactive) client/server sessions.  As\
    \ the number of users grows, this\n   can use up a lot of server resources, especially\
    \ with clients that\n   are designed to maintain sessions for mailboxes that the\
    \ user has\n   finished accessing.  To alleviate this, a server may implement\
    \ an\n   inactivity timeout, unilaterally closing a session (after first\n   sending\
    \ an untagged BYE, as noted above).  Some server operators have\n   reported dramatic\
    \ improvements in server performance after doing\n   this.  As specified in [RFC-2060],\
    \ if such a timeout is done it must\n   not be until at least 30 minutes of inactivity.\
    \  The reason for this\n   specification is to prevent clients from sending commands\
    \ (such as\n   NOOP) to the server at frequent intervals simply to avert a too-early\n\
    \   timeout.  If the client knows that the server may not time out the\n   session\
    \ for at least 30 minutes, then the client need not poll at\n   intervals more\
    \ frequent than, say, 25 minutes.\n"
- title: 3.2.   Scaling
  contents:
  - "3.2.   Scaling\n   IMAP4 has many features that allow for scalability, as mail\
    \ stores\n   become larger and more numerous.  Large numbers of users, mailboxes,\n\
    \   and messages, and very large messages require thought to handle\n   efficiently.\
    \  This document will not address the administrative\n   issues involved in large\
    \ numbers of users, but we will look at the\n   other items.\n"
- title: 3.2.1. Flood Control
  contents:
  - "3.2.1. Flood Control\n   There are three situations when a client can make a\
    \ request that will\n   result in a very large response - too large for the client\
    \ reasonably\n   to deal with: there are a great many mailboxes available, there\
    \ are a\n   great many messages in the selected mailbox, or there is a very large\n\
    \   message part.  The danger here is that the end user will be stuck\n   waiting\
    \ while the server sends (and the client processes) an enormous\n   response.\
    \  In all of these cases there are things a client can do to\n   reduce that danger.\n\
    \   There is also the case where a client can flood a server, by sending\n   an\
    \ arbitratily long command.  We'll discuss that issue, too, in this\n   section.\n"
- title: 3.2.1.1.  Listing Mailboxes
  contents:
  - "3.2.1.1.  Listing Mailboxes\n   Some servers present Usenet newsgroups to IMAP\
    \ users.  Newsgroups,\n   and other such hierarchical mailbox structures, can\
    \ be very numerous\n   but may have only a few entries at the top level of hierarchy.\
    \  Also,\n   some servers are built against mail stores that can, unbeknownst\
    \ to\n   the server, have circular hierarchies - that is, it's possible for\n\
    \   \"a/b/c/d\" to resolve to the same file structure as \"a\", which would\n\
    \   then mean that \"a/b/c/d/b\" is the same as \"a/b\", and the hierarchy\n \
    \  will never end.  The LIST response in this case will be unlimited.\n   Clients\
    \ that will have trouble with this are those that use\n       C: 001 LIST \"\"\
    \ *\n   to determine the mailbox list.  Because of this, clients should not\n\
    \   use an unqualified \"*\" that way in the LIST command.  A safer\n   approach\
    \ is to list each level of hierarchy individually, allowing\n   the user to traverse\
    \ the tree one limb at a time, thus:\n       C: 001 LIST \"\" %\n       S: * LIST\
    \ () \"/\" Banana\n       S: * LIST ...etc...\n       S: 001 OK done\n   and then\n\
    \       C: 002 LIST \"\" Banana/%\n       S: * LIST () \"/\" Banana/Apple\n  \
    \     S: * LIST ...etc...\n       S: 002 OK done\n   Using this technique the\
    \ client's user interface can give the user\n   full flexibility without choking\
    \ on the voluminous reply to \"LIST *\".\n   Of course, it is still possible that\
    \ the reply to\n       C: 005 LIST \"\" alt.fan.celebrity.%\n   may be thousands\
    \ of entries long, and there is, unfortunately,\n   nothing the client can do\
    \ to protect itself from that.  This has not\n   yet been a notable problem.\n\
    \   Servers that may export circular hierarchies (any server that\n   directly\
    \ presents a UNIX file system, for instance) should limit the\n   hierarchy depth\
    \ to prevent unlimited LIST responses.  A suggested\n   depth limit is 20 hierarchy\
    \ levels.\n"
- title: 3.2.1.2.  Fetching the List of Messages
  contents:
  - "3.2.1.2.  Fetching the List of Messages\n   When a client selects a mailbox,\
    \ it is given a count, in the untagged\n   EXISTS response, of the messages in\
    \ the mailbox.  This number can be\n   very large.  In such a case it might be\
    \ unwise to use\n       C: 004 FETCH 1:* ALL\n   to populate the user's view of\
    \ the mailbox.  One good method to avoid\n   problems with this is to batch the\
    \ requests, thus:\n       C: 004 FETCH 1:50 ALL\n       S: * 1 FETCH ...etc...\n\
    \       S: 004 OK done\n       C: 005 FETCH 51:100 ALL\n       S: * 51 FETCH ...etc...\n\
    \       S: 005 OK done\n       C: 006 FETCH 101:150 ALL\n       ...etc...\n  \
    \ Using this method, another command, such as \"FETCH 6 BODY[1]\" can be\n   inserted\
    \ as necessary, and the client will not have its access to the\n   server blocked\
    \ by a storm of FETCH replies.  (Such a method could be\n   reversed to fetch\
    \ the LAST 50 messages first, then the 50 prior to\n   that, and so on.)\n   As\
    \ a smart extension of this, a well designed client, prepared for\n   very large\
    \ mailboxes, will not automatically fetch data for all\n   messages AT ALL.  Rather,\
    \ the client will populate the user's view\n   only as the user sees it, possibly\
    \ pre-fetching selected information,\n   and only fetching other information as\
    \ the user scrolls to it.  For\n   example, to select only those messages beginning\
    \ with the first\n   unseen one:\n       C: 003 SELECT INBOX\n       S: * 10000\
    \ EXISTS\n       S: * 80 RECENT\n       S: * FLAGS (\\Answered \\Flagged \\Deleted\
    \ \\Draft \\Seen)\n       S: * OK [UIDVALIDITY 824708485] UID validity status\n\
    \       S: * OK [UNSEEN 9921] First unseen message\n       S: 003 OK [READ-WRITE]\
    \ SELECT completed\n       C: 004 FETCH 9921:* ALL\n       ... etc...\n   If the\
    \ server does not return an OK [UNSEEN] response, the client may\n   use SEARCH\
    \ UNSEEN to obtain that value.\n   This mechanism is good as a default presentation\
    \ method, but only\n   works well if the default message order is acceptable.\
    \  A client may\n   want to present various sort orders to the user (by subject,\
    \ by date\n   sent, by sender, and so on) and in that case (lacking a SORT\n \
    \  extension on the server side) the client WILL have to retrieve all\n   message\
    \ descriptors.  A client that provides this service should not\n   do it by default\
    \ and should inform the user of the costs of choosing\n   this option for large\
    \ mailboxes.\n"
- title: 3.2.1.3.  Fetching a Large Body Part
  contents:
  - "3.2.1.3.  Fetching a Large Body Part\n   The issue here is similar to the one\
    \ for a list of messages.  In the\n   BODYSTRUCTURE response the client knows\
    \ the size, in bytes, of the\n   body part it plans to fetch.  Suppose this is\
    \ a 70 MB video clip. The\n   client can use partial fetches to retrieve the body\
    \ part in pieces,\n   avoiding the problem of an uninterruptible 70 MB literal\
    \ coming back\n   from the server:\n       C: 022 FETCH 3 BODY[1]<0.20000>\n \
    \      S: * 3 FETCH (FLAGS(\\Seen) BODY[1]<0> {20000}\n       S: ...data...)\n\
    \       S: 022 OK done\n       C: 023 FETCH 3 BODY[1]<20001.20000>\n       S:\
    \ * 3 FETCH (BODY[1]<20001> {20000}\n       S: ...data...)\n       S: 023 OK done\n\
    \       C: 024 FETCH 3 BODY[1]<40001.20000>\n       ...etc...\n"
- title: 3.2.1.4.  BODYSTRUCTURE vs. Entire Messages
  contents:
  - "3.2.1.4.  BODYSTRUCTURE vs. Entire Messages\n   Because FETCH BODYSTRUCTURE is\
    \ necessary in order to determine the\n   number of body parts, and, thus, whether\
    \ a message has \"attachments\",\n   clients often use FETCH FULL as their normal\
    \ method of populating the\n   user's view of a mailbox.  The benefit is that\
    \ the client can display\n   a paperclip icon or some such indication along with\
    \ the normal\n   message summary.  However, this comes at a significant cost with\
    \ some\n   server configurations.  The parsing needed to generate the FETCH\n\
    \   BODYSTRUCTURE response may be time-consuming compared with that\n   needed\
    \ for FETCH ENVELOPE.  The client developer should consider this\n   issue when\
    \ deciding whether the ability to add a paperclip icon is\n   worth the tradeoff\
    \ in performance, especially with large mailboxes.\n   Some clients, rather than\
    \ using FETCH BODYSTRUCTURE, use FETCH BODY[]\n   (or the equivalent FETCH RFC822)\
    \ to retrieve the entire message.\n   They then do the MIME parsing in the client.\
    \  This may give the\n   client slightly more flexibility in some areas (access,\
    \ for instance,\n   to header fields that aren't returned in the BODYSTRUCTURE\
    \ and\n   ENVELOPE responses), but it can cause severe performance problems by\n\
    \   forcing the transfer of all body parts when the user might only want\n   to\
    \ see some of them - a user logged on by modem and reading a small\n   text message\
    \ with a large ZIP file attached may prefer to read the\n   text only and save\
    \ the ZIP file for later.  Therefore, a client\n   should not normally retrieve\
    \ entire messages and should retrieve\n   message body parts selectively.\n"
- title: 3.2.1.5.  Long Command Lines
  contents:
  - "3.2.1.5.  Long Command Lines\n   A client can wind up building a very long command\
    \ line in an effort to\n   try to be efficient about requesting information from\
    \ a server.  This\n   can typically happen when a client builds a message set\
    \ from selected\n   messages and doesn't recognise that contiguous blocks of messages\
    \ may\n   be group in a range.  Suppose a user selects all 10,000 messages in\
    \ a\n   large mailbox and then unselects message 287.  The client could build\n\
    \   that message set as \"1:286,288:10000\", but a client that doesn't\n   handle\
    \ that might try to enumerate each message individually and build\n   \"1,2,3,4,\
    \ [and so on] ,9999,10000\".  Adding that to the fetch command\n   results in\
    \ a command line that's almost 49,000 octets long, and,\n   clearly, one can construct\
    \ a command line that's even longer.\n   A client should limit the length of the\
    \ command lines it generates to\n   approximately 1000 octets (including all quoted\
    \ strings but not\n   including literals).  If the client is unable to group things\
    \ into\n   ranges so that the command line is within that length, it should\n\
    \   split the request into multiple commands.  The client should use\n   literals\
    \ instead of long quoted strings, in order to keep the command\n   length down.\n\
    \   For its part, a server should allow for a command line of at least\n   8000\
    \ octets.  This provides plenty of leeway for accepting reasonable\n   length\
    \ commands from clients.  The server should send a BAD response\n   to a command\
    \ that does not end within the server's maximum accepted\n   command length.\n"
- title: 3.2.2. Subscriptions
  contents:
  - "3.2.2. Subscriptions\n   The client isn't the only entity that can get flooded:\
    \ the end user,\n   too, may need some flood control.  The IMAP4 protocol provides\
    \ such\n   control in the form of subscriptions.  Most servers support the\n \
    \  SUBSCRIBE, UNSUBSCRIBE, and LSUB commands, and many users choose to\n   narrow\
    \ down a large list of available mailboxes by subscribing to the\n   ones that\
    \ they usually want to see.  Clients, with this in mind,\n   should give the user\
    \ a way to see only subscribed mailboxes.  A\n   client that never uses the LSUB\
    \ command takes a significant usability\n   feature away from the user.  Of course,\
    \ the client would not want to\n   hide the LIST command completely; the user\
    \ needs to have a way to\n   choose between LIST and LSUB.  The usual way to do\
    \ this is to provide\n   a setting like \"show which mailboxes?:  [] all  [] subscribed\
    \ only\".\n"
- title: 3.2.3. Searching
  contents:
  - "3.2.3. Searching\n   IMAP SEARCH commands can become particularly troublesome\
    \ (that is,\n   slow) on mailboxes containing a large number of messages.  So\
    \ let's\n   put a few things in perspective in that regard.\n   The flag searches\
    \ should be fast.  The flag searches (ALL, [UN]SEEN,\n   [UN]ANSWERED, [UN]DELETED,\
    \ [UN]DRAFT, [UN]FLAGGED, NEW, OLD, RECENT)\n   are known to be used by clients\
    \ for the client's own use (for\n   instance, some clients use \"SEARCH UNSEEN\"\
    \ to find unseen mail and\n   \"SEARCH DELETED\" to warn the user before expunging\
    \ messages).\n   Other searches, particularly the text searches (HEADER, TEXT,\
    \ BODY)\n   are initiated by the user, rather than by the client itself, and\n\
    \   somewhat slower performance can be tolerated, since the user is aware\n  \
    \ that the search is being done (and is probably aware that it might be\n   time-consuming).\
    \  A smart server might use dynamic indexing to speed\n   commonly used text searches.\n\
    \   The client may allow other commands to be sent to the server while a\n   SEARCH\
    \ is in progress, but at the time of this writing there is\n   little or no server\
    \ support for parallel processing of multiple\n   commands in the same session\
    \ (and see \"Multiple Accesses of the Same\n   Mailbox\" above for a description\
    \ of the dangers of trying to work\n   around this by doing your SEARCH in another\
    \ session).\n   Another word about text searches: some servers, built on database\n\
    \   back-ends with indexed search capabilities, may return search results\n  \
    \ that do not match the IMAP spec's \"case-insensitive substring\"\n   requirements.\
    \  While these servers are in violation of the protocol,\n   there is little harm\
    \ in the violation as long as the search results\n   are used only in response\
    \ to a user's request.  Still, developers of\n   such servers should be aware\
    \ that they ARE violating the protocol,\n   should think carefully about that\
    \ behaviour, and must be certain that\n   their servers respond accurately to\
    \ the flag searches for the reasons\n   outlined above.\n   In addition, servers\
    \ should support CHARSET UTF-8 [UTF-8] in\n   searches.\n"
- title: 3.3    Avoiding Invalid Requests
  contents:
  - "3.3    Avoiding Invalid Requests\n   IMAP4 provides ways for a server to tell\
    \ a client in advance what is\n   and isn't permitted in some circumstances. \
    \ Clients should use these\n   features to avoid sending requests that a well\
    \ designed client would\n   know to be invalid.  This section explains this in\
    \ more detail.\n"
- title: 3.3.1. The CAPABILITY Command
  contents:
  - "3.3.1. The CAPABILITY Command\n   All IMAP4 clients should use the CAPABILITY\
    \ command to determine what\n   version of IMAP and what optional features a server\
    \ supports.  The\n   client should not send IMAP4rev1 commands and arguments to\
    \ a server\n   that does not advertize IMAP4rev1 in its CAPABILITY response.\n\
    \   Similarly, the client should not send IMAP4 commands that no longer\n   exist\
    \ in IMAP4rev1 to a server that does not advertize IMAP4 in its\n   CAPABILITY\
    \ response.  An IMAP4rev1 server is NOT required to support\n   obsolete IMAP4\
    \ or IMAP2bis commands (though some do; do not let this\n   fact lull you into\
    \ thinking that it's valid to send such commands to\n   an IMAP4rev1 server).\n\
    \   A client should not send commands to probe for the existance of\n   certain\
    \ extensions.  All standard and standards-track extensions\n   include CAPABILITY\
    \ tokens indicating their presense.  All private and\n   experimental extensions\
    \ should do the same, and clients that take\n   advantage of them should use the\
    \ CAPABILITY response to determine\n   whether they may be used or not.\n"
- title: 3.3.2. Don't Do What the Server Says You Can't
  contents:
  - "3.3.2. Don't Do What the Server Says You Can't\n   In many cases, the server,\
    \ in response to a command, will tell the\n   client something about what can\
    \ and can't be done with a particular\n   mailbox.  The client should pay attention\
    \ to this information and\n   should not try to do things that it's been told\
    \ it can't do.\n   Examples:\n   *  Do not try to SELECT a mailbox that has the\
    \ \\Noselect flag set.\n   *  Do not try to CREATE a sub-mailbox in a mailbox\
    \ that has the\n      \\Noinferiors flag set.\n   *  Do not respond to a failing\
    \ COPY or APPEND command by trying to\n      CREATE the target mailbox if the\
    \ server does not respond with a\n      [TRYCREATE] response code.\n   *  Do not\
    \ try to expunge a mailbox that has been selected with the\n      [READ-ONLY]\
    \ response code.\n"
- title: 3.4.   Miscellaneous Protocol Considerations
  contents:
  - "3.4.   Miscellaneous Protocol Considerations\n   We describe here a number of\
    \ important protocol-related issues, the\n   misunderstanding of which has caused\
    \ significant interoperability\n   problems in IMAP4 implementations.  One general\
    \ item is that every\n   implementer should be certain to take note of and to\
    \ understand\n   section 2.2.2 and the preamble to section 7 of the IMAP4rev1\
    \ spec\n   [RFC-2060].\n"
- title: 3.4.1. Well Formed Protocol
  contents:
  - "3.4.1. Well Formed Protocol\n   We cannot stress enough the importance of adhering\
    \ strictly to the\n   protocol grammar.  The specification of the protocol is\
    \ quite rigid;\n   do not assume that you can insert blank space for \"readability\"\
    \ if\n   none is called for.  Keep in mind that there are parsers out there\n\
    \   that will crash if there are protocol errors.  There are clients that\n  \
    \ will report every parser burp to the user.  And in any case,\n   information\
    \ that cannot be parsed is information that is lost.  Be\n   careful in your protocol\
    \ generation.  And see \"A Word About Testing\",\n   below.\n   In particular,\
    \ note that the string in the INTERNALDATE response is\n   NOT an RFC-822 date\
    \ string - that is, it is not in the same format as\n   the first string in the\
    \ ENVELOPE response.  Since most clients will,\n   in fact, accept an RFC-822\
    \ date string in the INTERNALDATE response,\n   it's easy to miss this in your\
    \ interoperability testing.  But it will\n   cause a problem with some client,\
    \ so be sure to generate the correct\n   string for this field.\n"
- title: 3.4.2. Special Characters
  contents:
  - "3.4.2. Special Characters\n   Certain characters, currently the double-quote\
    \ and the backslash, may\n   not be sent as-is inside a quoted string.  These\
    \ characters must be\n   preceded by the escape character if they are in a quoted\
    \ string, or\n   else the string must be sent as a literal.  Both clients and\
    \ servers\n   must handle this, both on output (they must send these characters\n\
    \   properly) and on input (they must be able to receive escaped\n   characters\
    \ in quoted strings).  Example:\n       C: 001 LIST \"\" %\n       S: * LIST ()\
    \ \"\" INBOX\n       S: * LIST () \"\\\\\" TEST\n       S: * LIST () \"\\\\\"\
    \ {12}\n       S: \"My\" mailbox\n       S: 001 OK done\n       C: 002 LIST \"\
    \" \"\\\"My\\\" mailbox\\\\%\"\n       S: * LIST () \"\\\\\" {17}\n       S: \"\
    My\" mailbox\\Junk\n       S: 002 OK done\n   Note that in the example the server\
    \ sent the hierarchy delimiter as\n   an escaped character in the quoted string\
    \ and sent the mailbox name\n   containing imbedded double-quotes as a literal.\
    \  The client used only\n   quoted strings, escaping both the backslash and the\
    \ double-quote\n   characters.\n   The CR and LF characters may be sent ONLY in\
    \ literals; they are not\n   allowed, even if escaped, inside quoted strings.\n\
    \   And while we're talking about special characters: the IMAP spec, in\n   the\
    \ section titled \"Mailbox International Naming Convention\",\n   describes how\
    \ to encode mailbox names in modified UTF-7 [UTF-7 and\n   RFC-2060].  Implementations\
    \ must adhere to this in order to be\n   interoperable in the international market,\
    \ and servers should\n   validate mailbox names sent by client and reject names\
    \ that do not\n   conform.\n   As to special characters in userids and passwords:\
    \ clients must not\n   restrict what a user may type in for a userid or a password.\
    \  The\n   formal grammar specifies that these are \"astrings\", and an astring\n\
    \   can be a literal.  A literal, in turn can contain any 8-bit\n   character,\
    \ and clients must allow users to enter all 8-bit characters\n   here, and must\
    \ pass them, unchanged, to the server (being careful to\n   send them as literals\
    \ when necessary).  In particular, some server\n   configurations use \"@\" in\
    \ user names, and some clients do not allow\n   that character to be entered;\
    \ this creates a severe interoperability\n   problem.\n"
- title: 3.4.3. UIDs and UIDVALIDITY
  contents:
  - "3.4.3. UIDs and UIDVALIDITY\n   Servers that support existing back-end mail stores\
    \ often have no good\n   place to save UIDs for messages.  Often the existing\
    \ mail store will\n   not have the concept of UIDs in the sense that IMAP has:\
    \ strictly\n   increasing, never re-issued, 32-bit integers.  Some servers solve\n\
    \   this by storing the UIDs in a place that's accessible to end users,\n   allowing\
    \ for the possibility that the users will delete them.  Others\n   solve it by\
    \ re-assigning UIDs every time a mailbox is selected.\n   The server should maintain\
    \ UIDs permanently for all messages if it\n   can.  If that's not possible, the\
    \ server must change the UIDVALIDITY\n   value for the mailbox whenever any of\
    \ the UIDs may have become\n   invalid.  Clients must recognize that the UIDVALIDITY\
    \ has changed and\n   must respond to that condition by throwing away any information\
    \ that\n   they have saved about UIDs in that mailbox.  There have been many\n\
    \   problems in this area when clients have failed to do this; in the\n   worst\
    \ case it will result in loss of mail when a client deletes the\n   wrong piece\
    \ of mail by using a stale UID.\n   It seems to be a common misunderstanding that\
    \ \"the UIDVALIDITY and\n   the UID, taken together, form a 64-bit identifier\
    \ that uniquely\n   identifies a message on a server\".  This is absolutely NOT\
    \ TRUE.\n   There is no assurance that the UIDVALIDITY values of two mailboxes\
    \ be\n   different, so the UIDVALIDITY in no way identifies a mailbox.  The\n\
    \   ONLY purpose of UIDVALIDITY is, as its name indicates, to give the\n   client\
    \ a way to check the validity of the UIDs it has cached.  While\n   it is a valid\
    \ implementation choice to put these values together to\n   make a 64-bit identifier\
    \ for the message, the important concept here\n   is that UIDs are not unique\
    \ between mailboxes; they are only unique\n   WITHIN a given mailbox.\n   Some\
    \ server implementations have attempted to make UIDs unique across\n   the entire\
    \ server.  This is inadvisable, in that it limits the life\n   of UIDs unnecessarily.\
    \  The UID is a 32-bit number and will run out\n   in reasonably finite time if\
    \ it's global across the server.  If you\n   assign UIDs sequentially in one mailbox,\
    \ you will not have to start\n   re-using them until you have had, at one time\
    \ or another, 2**32\n   different messages in that mailbox.  In the global case,\
    \ you will\n   have to reuse them once you have had, at one time or another, 2**32\n\
    \   different messages in the entire mail store.  Suppose your server has\n  \
    \ around 8000 users registered (2**13).  That gives an average of 2**19\n   UIDs\
    \ per user.  Suppose each user gets 32 messages (2**5) per day.\n   That gives\
    \ you 2**14 days (16000+ days = about 45 years) before you\n   run out.  That\
    \ may seem like enough, but multiply the usage just a\n   little (a lot of spam,\
    \ a lot of mailing list subscriptions, more\n   users) and you limit yourself\
    \ too much.\n   What's worse is that if you have to wrap the UIDs, and, thus,\
    \ you\n   have to change UIDVALIDITY and invalidate the UIDs in the mailbox,\n\
    \   you have to do it for EVERY mailbox in the system, since they all\n   share\
    \ the same UID pool.  If you assign UIDs per mailbox and you have\n   a problem,\
    \ you only have to kill the UIDs for that one mailbox.\n   Under extreme circumstances\
    \ (and this is extreme, indeed), the server\n   may have to invalidate UIDs while\
    \ a mailbox is in use by a client -\n   that is, the UIDs that the client knows\
    \ about in its active mailbox\n   are no longer valid.  In that case, the server\
    \ must immediately\n   change the UIDVALIDITY and must communicate this to the\
    \ client.  The\n   server may do this by sending an unsolicited UIDVALIDITY message,\
    \ in\n   the same form as in response to the SELECT command.  Clients must be\n\
    \   prepared to handle such a message and the possibly coincident failure\n  \
    \ of the command in process.  For example:\n       C: 032 UID STORE 382 +Flags.silent\
    \ \\Deleted\n       S: * OK [UIDVALIDITY 12345] New UIDVALIDITY value!\n     \
    \  S: 032 NO UID command rejected because UIDVALIDITY changed!\n       C: ...invalidates\
    \ local information and re-fetches...\n       C: 033 FETCH 1:* UID\n       ...etc...\n\
    \   At the time of the writing of this document, the only server known to\n  \
    \ do this does so only under the following condition: the client\n   selects INBOX,\
    \ but there is not yet a physical INBOX file created.\n   Nonetheless, the SELECT\
    \ succeeds, exporting an empty INBOX with a\n   temporary UIDVALIDITY of 1.  While\
    \ the INBOX remains selected, mail\n   is delivered to the user, which creates\
    \ the real INBOX file and\n   assigns a permanent UIDVALIDITY (that is likely\
    \ not to be 1).  The\n   server reports the change of UIDVALIDITY, but as there\
    \ were no\n   messages before, so no UIDs have actually changed, all the client\n\
    \   must do is accept the change in UIDVALIDITY.\n   Alternatively, a server may\
    \ force the client to re-select the\n   mailbox, at which time it will obtain\
    \ a new UIDVALIDITY value.  To do\n   this, the server closes this client session\
    \ (see \"Severed\n   Connections\" above) and the client then reconnects and gets\
    \ back in\n   synch.  Clients must be prepared for either of these behaviours.\n\
    \   We do not know of, nor do we anticipate the future existance of, a\n   server\
    \ that changes UIDVALIDITY while there are existing messages,\n   but clients\
    \ must be prepared to handle this eventuality.\n"
- title: 3.4.4. FETCH Responses
  contents:
  - "3.4.4. FETCH Responses\n   When a client asks for certain information in a FETCH\
    \ command, the\n   server may return the requested information in any order, not\n\
    \   necessarily in the order that it was requested.  Further, the server\n   may\
    \ return the information in separate FETCH responses and may also\n   return information\
    \ that was not explicitly requested (to reflect to\n   the client changes in the\
    \ state of the subject message).  Some\n   examples:\n       C: 001 FETCH 1 UID\
    \ FLAGS INTERNALDATE\n       S: * 5 FETCH (FLAGS (\\Deleted))\n       S: * 1 FETCH\
    \ (FLAGS (\\Seen) INTERNALDATE \"...\" UID 345)\n       S: 001 OK done\n   (In\
    \ this case, the responses are in a different order.  Also, the\n   server returned\
    \ a flag update for message 5, which wasn't part of the\n   client's request.)\n\
    \       C: 002 FETCH 2 UID FLAGS INTERNALDATE\n       S: * 2 FETCH (INTERNALDATE\
    \ \"...\")\n       S: * 2 FETCH (UID 399)\n       S: * 2 FETCH (FLAGS ())\n  \
    \     S: 002 OK done\n   (In this case, the responses are in a different order\
    \ and were\n   returned in separate responses.)\n       C: 003 FETCH 2 BODY[1]\n\
    \       S: * 2 FETCH (FLAGS (\\Seen) BODY[1] {14}\n       S: Hello world!\n  \
    \     S: )\n       S: 003 OK done\n   (In this case, the FLAGS response was added\
    \ by the server, since\n   fetching the body part caused the server to set the\
    \ \\Seen flag.)\n   Because of this characteristic a client must be ready to receive\
    \ any\n   FETCH response at any time and should use that information to update\n\
    \   its local information about the message to which the FETCH response\n   refers.\
    \  A client must not assume that any FETCH responses will come\n   in any particular\
    \ order, or even that any will come at all.  If after\n   receiving the tagged\
    \ response for a FETCH command the client finds\n   that it did not get all of\
    \ the information requested, the client\n   should send a NOOP command to the\
    \ server to ensure that the server\n   has an opportunity to send any pending\
    \ EXPUNGE responses to the\n   client (see [RFC-2180]).\n"
- title: 3.4.5. RFC822.SIZE
  contents:
  - "3.4.5. RFC822.SIZE\n   Some back-end mail stores keep the mail in a canonical\
    \ form, rather\n   than retaining the original MIME format of the messages.  This\
    \ means\n   that the server must reassemble the message to produce a MIME stream\n\
    \   when a client does a fetch such as RFC822 or BODY[], requesting the\n   entire\
    \ message.  It also may mean that the server has no convenient\n   way to know\
    \ the RFC822.SIZE of the message.  Often, such a server\n   will actually have\
    \ to build the MIME stream to compute the size, only\n   to throw the stream away\
    \ and report the size to the client.\n   When this is the case, some servers have\
    \ chosen to estimate the size,\n   rather than to compute it precisely.  Such\
    \ an estimate allows the\n   client to display an approximate size to the user\
    \ and to use the\n   estimate in flood control considerations (q.v.), but requires\
    \ that\n   the client not use the size for things such as allocation of buffers,\n\
    \   because those buffers might then be too small to hold the actual MIME\n  \
    \ stream.  Instead, a client should use the size that's returned in the\n   literal\
    \ when you fetch the data.\n   The protocol requires that the RFC822.SIZE value\
    \ returned by the\n   server be EXACT.  Estimating the size is a protocol violation,\
    \ and\n   server designers must be aware that, despite the performance savings\n\
    \   they might realize in using an estimate, this practice will cause\n   some\
    \ clients to fail in various ways.  If possible, the server should\n   compute\
    \ the RFC822.SIZE for a particular message once, and then save\n   it for later\
    \ retrieval.  If that's not possible, the server must\n   compute the value exactly\
    \ every time.  Incorrect estimates do cause\n   severe interoperability problems\
    \ with some clients.\n"
- title: 3.4.6. Expunged Messages
  contents:
  - "3.4.6. Expunged Messages\n   If the server allows multiple connections to the\
    \ same mailbox, it is\n   often possible for messages to be expunged in one client\
    \ unbeknownst\n   to another client.  Since the server is not allowed to tell\
    \ the\n   client about these expunged messages in response to a FETCH command,\n\
    \   the server may have to deal with the issue of how to return\n   information\
    \ about an expunged message.  There was extensive\n   discussion about this issue,\
    \ and the results of that discussion are\n   summarized in [RFC-2180].  See that\
    \ reference for a detailed\n   explanation and for recommendations.\n"
- title: 3.4.7. The Namespace Issue
  contents:
  - "3.4.7. The Namespace Issue\n   Namespaces are a very muddy area in IMAP4 implementation\
    \ right now\n   (see [NAMESPACE] for a proposal to clear the water a bit).  Until\
    \ the\n   issue is resolved, the important thing for client developers to\n  \
    \ understand is that some servers provide access through IMAP to more\n   than\
    \ just the user's personal mailboxes, and, in fact, the user's\n   personal mailboxes\
    \ may be \"hidden\" somewhere in the user's default\n   hierarchy.  The client,\
    \ therefore, should provide a setting wherein\n   the user can specify a prefix\
    \ to be used when accessing mailboxes. If\n   the user's mailboxes are all in\
    \ \"~/mail/\", for instance, then the\n   user can put that string in the prefix.\
    \  The client would then put\n   the prefix in front of any name pattern in the\
    \ LIST and LSUB\n   commands:\n       C: 001 LIST \"\" ~/mail/%\n   (See also\
    \ \"Reference Names in the LIST Command\" below.)\n"
- title: 3.4.8. Creating Special-Use Mailboxes
  contents:
  - "3.4.8. Creating Special-Use Mailboxes\n   It may seem at first that this is part\
    \ of the namespace issue; it is\n   not, and is only indirectly related to it.\
    \  A number of clients like\n   to create special-use mailboxes with particular\
    \ names.  Most\n   commonly, clients with a \"trash folder\" model of message\
    \ deletion\n   want to create a mailbox with the name \"Trash\" or \"Deleted\"\
    .  Some\n   clients want to create a \"Drafts\" mailbox, an \"Outbox\" mailbox,\
    \ or a\n   \"Sent Mail\" mailbox.  And so on.  There are two major\n   interoperability\
    \ problems with this practice:\n   1. different clients may use different names\
    \ for mailboxes with\n      similar functions (such as \"Trash\" and \"Deleted\"\
    ), or may manage\n      the same mailboxes in different ways, causing problems\
    \ if a user\n      switches between clients and\n   2. there is no guarantee that\
    \ the server will allow the creation of\n      the desired mailbox.\n   The client\
    \ developer is, therefore, well advised to consider\n   carefully the creation\
    \ of any special-use mailboxes on the server,\n   and, further, the client must\
    \ not require such mailbox creation -\n   that is, if you do decide to do this,\
    \ you must handle gracefully the\n   failure of the CREATE command and behave\
    \ reasonably when your\n   special-use mailboxes do not exist and can not be created.\n\
    \   In addition, the client developer should provide a convenient way for\n  \
    \ the user to select the names for any special-use mailboxes, allowing\n   the\
    \ user to make these names the same in all clients used and to put\n   them where\
    \ the user wants them.\n"
- title: 3.4.9. Reference Names in the LIST Command
  contents:
  - "3.4.9. Reference Names in the LIST Command\n   Many implementers of both clients\
    \ and servers are confused by the\n   \"reference name\" on the LIST command.\
    \  The reference name is intended\n   to be used in much the way a \"cd\" (change\
    \ directory) command is used\n   on Unix, PC DOS, Windows, and OS/2 systems. \
    \ That is, the mailbox\n   name is interpreted in much the same way as a file\
    \ of that name would\n   be found if one had done a \"cd\" command into the directory\
    \ specified\n   by the reference name.  For example, in Unix we have the following:\n\
    \       > cd /u/jones/junk\n       > vi banana        [file is \"/u/jones/junk/banana\"\
    ]\n       > vi stuff/banana  [file is \"/u/jones/junk/stuff/banana\"]\n      \
    \ > vi /etc/hosts    [file is \"/etc/hosts\"]\n   In the past, there have been\
    \ several interoperability problems with\n   this.  First, while some IMAP servers\
    \ are built on Unix or PC file\n   systems, many others are not, and the file\
    \ system semantics do not\n   make sense in those configurations.  Second, while\
    \ some IMAP servers\n   expose the underlying file system to the clients, others\
    \ allow access\n   only to the user's personal mailboxes, or to some other limited\
    \ set\n   of files, making such file-system-like semantics less meaningful.\n\
    \   Third, because the IMAP spec leaves the interpretation of the\n   reference\
    \ name as \"implementation-dependent\", in the past the various\n   server implementations\
    \ handled it in vastly differing ways.\n   The following recommendations are the\
    \ result of significant\n   operational experience, and are intended to maximize\n\
    \   interoperability.\n   Server implementations must implement the reference\
    \ argument in a way\n   that matches the intended \"change directory\" operation\
    \ as closely as\n   possible.  As a minimum implementation, the reference argument\
    \ may be\n   prepended to the mailbox name (while suppressing double delimiters;\n\
    \   see the next paragraph).  Even servers that do not provide a way to\n   break\
    \ out of the current hierarchy (see \"breakout facility\" below)\n   must provide\
    \ a reasonable implementation of the reference argument,\n   as described here,\
    \ so that they will interoperate with clients that\n   use it.\n   Server implementations\
    \ that prepend the reference argument to the\n   mailbox name should insert a\
    \ hierarchy delimiter between them, and\n   must not insert a second if one is\
    \ already present:\n       C: A001 LIST ABC DEF\n       S: * LIST () \"/\" ABC/DEF\
    \   <=== should do this\n       S: A001 OK done\n       C: A002 LIST ABC/ /DEF\n\
    \       S: * LIST () \"/\" ABC//DEF     <=== must not do this\n       S: A002\
    \ OK done\n   On clients, the reference argument is chiefly used to implement\
    \ a\n   \"breakout facility\", wherein the user may directly access a mailbox\n\
    \   outside the \"current directory\" hierarchy.  Client implementations\n   should\
    \ have an operational mode that does not use the reference\n   argument.  This\
    \ is to interoperate with older servers that did not\n   implement the reference\
    \ argument properly.  While it's a good idea to\n   give the user access to a\
    \ breakout facility, clients that do not\n   intend to do so should not use the\
    \ reference argument at all.\n   Client implementations should always place a\
    \ trailing hierarchy\n   delimiter on the reference argument.  This is because\
    \ some servers\n   prepend the reference argument to the mailbox name without\
    \ inserting\n   a hierarchy delimiter, while others do insert a hierarchy delimiter\n\
    \   if one is not already present.  A client that puts the delimiter in\n   will\
    \ work with both varieties of server.\n   Client implementations that implement\
    \ a breakout facility should\n   allow the user to choose whether or not to use\
    \ a leading hierarchy\n   delimiter on the mailbox argument.  This is because\
    \ the handling of a\n   leading mailbox hierarchy delimiter also varies from server\
    \ to\n   server, and even between different mailstores on the same server.  In\n\
    \   some cases, a leading hierarchy delimiter means \"discard the\n   reference\
    \ argument\" (implementing the intended breakout facility),\n   thus:\n      \
    \ C: A001 LIST ABC/ /DEF\n       S: * LIST () \"/\" /DEF\n       S: A001 OK done\n\
    \   In other cases, however, the two are catenated and the extra\n   hierarchy\
    \ delimiter is discarded, thus:\n       C: A001 LIST ABC/ /DEF\n       S: * LIST\
    \ () \"/\" ABC/DEF\n       S: A001 OK done\n   Client implementations must not\
    \ assume that the server supports a\n   breakout facility, but may provide a way\
    \ for the user to use one if\n   it is available.  Any breakout facility should\
    \ be exported to the\n   user interface.  Note that there may be other \"breakout\"\
    \ characters\n   besides the hierarchy delimiter (for instance, UNIX filesystem\n\
    \   servers are likely to use a leading \"~\" as well), and that their\n   interpretation\
    \ is server-dependent.\n"
- title: 3.4.10.   Mailbox Hierarchy Delimiters
  contents:
  - "3.4.10.   Mailbox Hierarchy Delimiters\n   The server's selection of what to\
    \ use as a mailbox hierarchy\n   delimiter is a difficult one, involving several\
    \ issues: What\n   characters do users expect to see?  What characters can they\
    \ enter\n   for a hierarchy delimiter if it is desired (or required) that the\n\
    \   user enter it?  What character can be used for the hierarchy\n   delimiter,\
    \ noting that the chosen character can not otherwise be used\n   in the mailbox\
    \ name?\n   Because some interfaces show users the hierarchy delimiters or allow\n\
    \   users to enter qualified mailbox names containing them, server\n   implementations\
    \ should use delimiter characters that users generally\n   expect to see as name\
    \ separators.  The most common characters used\n   for this are \"/\" (as in Unix\
    \ file names), \"\\\" (as in OS/2 and Windows\n   file names), and \".\" (as in\
    \ news groups).  There is little to choose\n   among these apart from what users\
    \ may expect or what is dictated by\n   the underlying file system, if any.  One\
    \ consideration about using\n   \"\\\" is that it's also a special character in\
    \ the IMAP protocol. While\n   the use of other hierarchy delimiter characters\
    \ is permissible, A\n   DESIGNER IS WELL ADVISED TO STAY WITH ONE FROM THIS SET\
    \ unless the\n   server is intended for special purposes only.  Implementers might\
    \ be\n   thinking about using characters such as \"-\", \"_\", \";\", \"&\", \"\
    #\", \"@\",\n   and \"!\", but they should be aware of the surprise to the user\
    \ as well\n   as of the effect on URLs and other external specifications (since\n\
    \   some of these characters have special meanings there).  Also, a\n   server\
    \ that uses \"\\\" (and clients of such a server) must remember to\n   escape\
    \ that character in quoted strings or to send literals instead.\n   Literals are\
    \ recommended over escaped characters in quoted strings in\n   order to maintain\
    \ compatibility with older IMAP versions that did not\n   allow escaped characters\
    \ in quoted strings (but check the grammar to\n   see where literals are allowed):\n\
    \       C: 001 LIST \"\" {13}\n       S: + send literal\n       C: this\\%\\%\\\
    %\\h*\n       S: * LIST () \"\\\\\" {27}\n       S: this\\is\\a\\mailbox\\hierarchy\n\
    \       S: 001 OK LIST complete\n   In any case, a server should not use normal\
    \ alpha-numeric characters\n   (such as \"X\" or \"0\") as delimiters; a user\
    \ would be very surprised to\n   find that \"EXPENDITURES\" actually represented\
    \ a two-level hierarchy.\n   And a server should not use characters that are non-printable\
    \ or\n   difficult or impossible to enter on a standard US keyboard.  Control\n\
    \   characters, box-drawing characters, and characters from non-US\n   alphabets\
    \ fit into this category.  Their use presents\n   interoperability problems that\
    \ are best avoided.\n   The UTF-7 encoding of mailbox names also raises questions\
    \ about what\n   to do with the hierarchy delimiters in encoded names: do we encode\n\
    \   each hierarchy level and separate them with delimiters, or do we\n   encode\
    \ the fully qualified name, delimiters and all?  The answer for\n   IMAP is the\
    \ former: encode each hierarchy level separately, and\n   insert delimiters between.\
    \  This makes it particularly important not\n   to use as a hierarchy delimiter\
    \ a character that might cause\n   confusion with IMAP's modified UTF-7 [UTF-7\
    \ and RFC-2060] encoding.\n   To repeat: a server should use \"/\", \"\\\", or\
    \ \".\" as its hierarchy\n   delimiter.  The use of any other character is likely\
    \ to cause\n   problems and is STRONGLY DISCOURAGED.\n"
- title: 3.4.11.   ALERT Response Codes
  contents:
  - "3.4.11.   ALERT Response Codes\n   The protocol spec is very clear on the matter\
    \ of what to do with\n   ALERT response codes, and yet there are many clients\
    \ that violate it\n   so it needs to be said anyway: \"The human-readable text\
    \ contains a\n   special alert that must be presented to the user in a fashion\
    \ that\n   calls the user's attention to the message.\"  That should be clear\n\
    \   enough, but I'll repeat it here: Clients must present ALERT text\n   clearly\
    \ to the user.\n"
- title: 3.4.12.   Deleting Mailboxes
  contents:
  - "3.4.12.   Deleting Mailboxes\n   The protocol does not guarantee that a client\
    \ may delete a mailbox\n   that is not empty, though on some servers it is permissible\
    \ and is,\n   in fact, much faster than the alternative or deleting all the\n\
    \   messages from the client.  If the client chooses to try to take\n   advantage\
    \ of this possibility it must be prepared to use the other\n   method in the even\
    \ that the more convenient one fails.  Further, a\n   client should not try to\
    \ delete the mailbox that it has selected, but\n   should first close that mailbox;\
    \ some servers do not permit the\n   deletion of the selected mailbox.\n   That\
    \ said, a server should permit the deletion of a non-empty\n   mailbox; there's\
    \ little reason to pass this work on to the client.\n   Moreover, forbidding this\
    \ prevents the deletion of a mailbox that for\n   some reason can not be opened\
    \ or expunged, leading to possible\n   denial-of-service problems.\n   Example:\n\
    \       [User tells the client to delete mailbox BANANA, which is\n       currently\
    \ selected...]\n       C: 008 CLOSE\n       S: 008 OK done\n       C: 009 DELETE\
    \ BANANA\n       S: 009 NO Delete failed; mailbox is not empty.\n       C: 010\
    \ SELECT BANANA\n       S: * ... untagged SELECT responses\n       S: 010 OK done\n\
    \       C: 011 STORE 1:* +FLAGS.SILENT \\DELETED\n       S: 011 OK done\n    \
    \   C: 012 CLOSE\n       S: 012 OK done\n       C: 013 DELETE BANANA\n       S:\
    \ 013 OK done\n"
- title: 3.5.   A Word About Testing
  contents:
  - "3.5.   A Word About Testing\n   Since the whole point of IMAP is interoperability,\
    \ and since\n   interoperability can not be tested in a vacuum, the final\n  \
    \ recommendation of this treatise is, \"Test against EVERYTHING.\"  Test\n   your\
    \ client against every server you can get an account on.  Test\n   your server\
    \ with every client you can get your hands on.  Many\n   clients make limited\
    \ test versions available on the Web for the\n   downloading.  Many server owners\
    \ will give serious client developers\n   guest accounts for testing.  Contact\
    \ them and ask.  NEVER assume that\n   because your client works with one or two\
    \ servers, or because your\n   server does fine with one or two clients, you will\
    \ interoperate well\n   in general.\n   In particular, in addition to everything\
    \ else, be sure to test\n   against the reference implementations: the PINE client,\
    \ the\n   University of Washington server, and the Cyrus server.\n   See the following\
    \ URLs on the web for more information here:\n       IMAP Products and Sources:\
    \ http://www.imap.org/products.html\n       IMC MailConnect: http://www.imc.org/imc-mailconnect\n"
- title: 4. Security Considerations
  contents:
  - "4. Security Considerations\n   This document describes behaviour of clients and\
    \ servers that use the\n   IMAP4 protocol, and as such, has the same security\
    \ considerations as\n   described in [RFC-2060].\n"
- title: 5. References
  contents:
  - "5. References\n   [RFC-2060]  Crispin, M., \"Internet Message Access Protocol\
    \ - Version\n               4rev1\", RFC 2060, December 1996.\n   [RFC-2119] \
    \ Bradner, S., \"Key words for use in RFCs to Indicate\n               Requirement\
    \ Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC-2180]  Gahrns, M., \"IMAP4\
    \ Multi-Accessed Mailbox Practice\", RFC\n               2180, July 1997.\n  \
    \ [UTF-8]     Yergeau, F., \" UTF-8, a transformation format of Unicode\n    \
    \           and ISO 10646\", RFC 2044, October 1996.\n   [UTF-7]     Goldsmith,\
    \ D. and M. Davis, \"UTF-7, a Mail-Safe\n               Transformation Format\
    \ of Unicode\", RFC 2152, May 1997.\n   [NAMESPACE] Gahrns, M. and C. Newman,\
    \ \"IMAP4 Namespace\", Work in\n               Progress.\n"
- title: 6. Author's Address
  contents:
  - "6. Author's Address\n   Barry Leiba\n   IBM T.J. Watson Research Center\n   30\
    \ Saw Mill River Road\n   Hawthorne, NY  10532\n   Phone: 1-914-784-7941\n   EMail:\
    \ leiba@watson.ibm.com\n"
- title: 7. Full Copyright Statement
  contents:
  - "7. Full Copyright Statement\n   Copyright (C) The Internet Society (1999).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
