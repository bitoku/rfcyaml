- contents:
  - "                   Internet Printing Protocol (IPP):\n               Job and
    Printer Administrative Operations\n"
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document specifies the following 16 additional OPTIONAL system\n
    \  administration operations for use with the Internet Printing\n   Protocol/1.1
    (IPP), plus a few associated attributes, values, and\n   status codes, and using
    the IPP Printer object to manage printer\n   fan-out and fan-in.\n      Printer
    operations:                       Job operations:\n      Enable-Printer and Disable-Printer
    \       Reprocess-Job\n      Pause-Printer-After-Current-Job           Cancel-Current-Job\n
    \     Hold-New-Jobs and Release-Held-New-Jobs   Suspend-Current-Job\n      Deactivate-Printer
    and Activate-Printer   Resume-Job\n      Restart-Printer                           Promote-Job\n
    \     Shutdown-Printer and Startup-Printer      Schedule-Job-After\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction..................................................
    \ 4\n   2.  Terminology...................................................  4\n
    \      2.1.  Conformance Terminology.................................  4\n       2.2.
    \ Other Terminology.......................................  5\n   3.  Definition
    of the Printer Operations..........................  6\n       3.1.  The Disable
    and Enable Printer Operations...............  7\n             3.1.1.  Disable-Printer
    Operation.......................  7\n             3.1.2.  Enable-Printer Operation........................
    \ 8\n       3.2.  The Pause and Resume Printer Operations.................  8\n
    \            3.2.1.  Pause-Printer-After-Current-Job Operation.......  9\n       3.3.
    \ Hold and Release New Jobs Operations.................... 11\n             3.3.1.
    \ Hold-New-Jobs Operation......................... 11\n             3.3.2.  Release-Held-New-Jobs
    Operation................. 12\n       3.4.  Deactivate and Activate Printer Operations..............
    12\n             3.4.1.  Deactivate-Printer Operation.................... 13\n
    \            3.4.2.  Activate-Printer Operation...................... 13\n       3.5.
    \ Restart-Printer, Shutdown-Printer,\n             and Startup-Printer Operations..........................
    14\n             3.5.1.  Restart-Printer Operation....................... 14\n
    \            3.5.2.  Shutdown-Printer Operation...................... 14\n             3.5.3.
    \ Startup-Printer Operation....................... 15\n   4.  Definition of the
    Job Operations.............................. 16\n       4.1.  Reprocess-Job Operation.................................
    17\n       4.2.  Cancel-Current-Job Operation............................ 17\n
    \      4.3.  Suspend and Resume Job Operations....................... 18\n             4.3.1.
    \ Suspend-Current-Job Operation................... 19\n             4.3.2.  Resume-Job
    Operation............................ 20\n       4.4.  Job Scheduling Operations...............................
    20\n             4.4.1.  Promote-Job Operation........................... 20\n
    \            4.4.2.  Schedule-Job-After Operation.................... 21\n   5.
    \ Additional Status Codes....................................... 23\n       5.1.
    \ 'server-error-printer-is-deactivated' (0x050A).......... 23\n   6.  Use of Operation
    Attributes\n       That Are Messages from the Operator...........................
    23\n   7.  New Printer Description Attributes............................ 26\n
    \      7.1.  subordinate-printers-supported (1setOf uri)............. 26\n       7.2.
    \ parent-printers-supported (1setOf uri).................. 26\n   8.  Additional
    Values for\n       the \"printer-state-reasons\" Printer Description Attribute.....
    26\n       8.1.  'hold-new-jobs' Value................................... 27\n
    \      8.2.  'deactivated' Value..................................... 27\n   9.
    \ Additional Values for\n       the \"job-state-reasons\" Job Description attribute.............
    27\n       9.1.  'job-suspended' Value................................... 27\n
    \  10. Use of the Printer Object to Represent\n       IPP Printer Fan-Out and
    IPP Printer Fan-In.................... 27\n       10.1. IPP Printer Fan-Out.....................................
    28\n       10.2. IPP Printer Fan-In...................................... 28\n
    \      10.3. Printer Object Attributes Used\n             to Represent Printer
    Fan-Out and Printer Fan-In......... 29\n       10.4. Subordinate Printer URI.................................
    29\n       10.5. Printer Object Attributes Used\n             to Represent Output
    Device Fan-Out...................... 30\n       10.6. Figures to Show All Possible
    Configurations............. 30\n       10.7. Forwarding Requests.....................................
    33\n             10.7.1. Forwarding Requests\n                     that Affect
    Printer Objects..................... 33\n             10.7.2. Forwarding Requests
    that Affect Jobs............ 35\n       10.8. Additional Attributes to Help with
    Fan-Out.............. 37\n             10.8.1. output-device-assigned (name(127))\n
    \                    Job Description Attribute - from [RFC2911]...... 37\n             10.8.2.
    original-requesting-user-name (name(MAX))\n                     Operation and
    Job Description Attribute......... 37\n             10.8.3. requesting-user-name
    (name(MAX))\n                     Operation Attribute - Additional Semantics......
    38\n             10.8.4. job-originating-user-name (name(MAX))\n                     Job
    Description Attribute -\n                     Additional Semantics............................
    38\n   11. Conformance Requirements...................................... 38\n
    \  12. Normative References.......................................... 39\n   13.
    Informative References........................................ 40\n   14. IANA
    Considerations........................................... 40\n       14.1. Attribute
    Registrations................................. 41\n       14.2. Attribute Value
    Registrations........................... 41\n       14.3. Additional Enum Attribute
    Value Registrations........... 41\n       14.4. Operation Registrations.................................
    42\n       14.5. Status Code Registrations............................... 43\n
    \  15. Internationalization Considerations........................... 43\n   16.
    Security Considerations....................................... 43\n   17. Summary
    of Base IPP Documents................................. 44\n   Authors' Addresses................................................
    45\n   Full Copyright Statement.......................................... 46\n"
  title: Table of Contents
- contents:
  - "List of Tables\n   Table 1.  Printer Operation Operation-Id Assignments..............
    \ 6\n   Table 2.  Pause and Resume Printer Operations.....................  9\n
    \  Table 3.  State Transition Table for\n             Pause-Printer-After-Current-Job
    Operation............... 10\n   Table 4.  Job Operation Operation-Id Assignments..................
    16\n   Table 5.  Operation Attribute Support for Printer Operations...... 24\n
    \  Table 6.  Operation Attribute Support for Job Operations.......... 25\n   Table
    7.  Forwarding Operations that Affect Printer Objects....... 34\n   Table 8.  Forwarding
    Operations that Affect Jobs Objects.......... 36\n   Table 9.  Conformance Requirement
    Dependencies for Operations..... 38\n   Table 10. Conformance Requirement Dependencies\n
    \            for \"printer-state-reasons\" Values...................... 39\n   Table
    11. Conformance Requirement Dependencies\n             for \"job-state-reasons\"
    Values.......................... 39\n"
  title: List of Tables
- contents:
  - "List of Figures\n   Figure 1.  Embedded Printer Object................................
    31\n   Figure 2.  Hosted Printer Object.................................. 31\n
    \  Figure 3.  Output Device Fan-Out.................................. 31\n   Figure
    4.  Chained IPP Printer Objects............................ 32\n   Figure 5.  IPP
    Printer Object Fan-Out............................. 32\n   Figure 6.  IPP Printer
    Object Fan-In.............................. 33\n"
  title: List of Figures
- contents:
  - "1.  Introduction\n   The Internet Printing Protocol (IPP) is an application level
    protocol\n   that can be used for distributed printing using Internet tools and\n
    \  technologies.  IPP version 1.1 ([RFC2911, RFC2910]) focuses on end-\n   user
    functionality, with a few administrative operations included.\n   This document
    defines additional OPTIONAL end user, operator, and\n   administrator operations
    used to control Jobs and Printers.  In\n   addition, this document extends the
    semantic model of the Printer\n   object by allowing them to be configured into
    trees and/or inverted\n   trees that represent Printer object Fan-Out and Printer
    object Fan-\n   In, respectively.  The special case of a tree with only a single\n
    \  Subordinate node represents Chained Printers.  This document is a\n   registration
    proposal for an extension to IPP/1.0 and IPP/1.1\n   following the registration
    procedures in those documents.\n   The requirements and use cases for this document
    are defined in\n   [RFC3239].\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   This section defines the terminology used throughout this
    document.\n"
  - contents:
    - "2.1.  Conformance Terminology\n   Capitalized terms such as MUST, MUST NOT,
      REQUIRED, SHOULD, SHOULD\n   NOT, MAY, NEED NOT, and OPTIONAL have special meaning
      relating to\n   conformance as defined in RFC 2119 [RFC2119] and [RFC2911],
      section\n   12.1.  If an implementation supports the extension defined in this\n
      \  document, then these terms apply; otherwise, they do not.  These\n   terms
      define conformance to this document only; they do not affect\n   conformance
      to other documents, unless explicitly stated otherwise.\n"
    title: 2.1.  Conformance Terminology
  - contents:
    - "2.2.  Other Terminology\n   This document uses terms such as \"client\", \"Printer\",
      \"Job\",\n   \"attributes\", \"keywords\", \"operation\", and \"support\".  These
      terms\n   have special meaning and are defined in the model terminology\n   ([RFC2911],
      section 12.2).\n   In addition, the following capitalized terms are defined:\n
      \  IPP Printer object (or Printer for short) - A software abstraction\n   defined
      by [RFC2911].\n   Printer Operation - An operation whose target is an IPP Printer\n
      \  object and whose effect is on the Printer object.\n   Output Device - The
      physical imaging mechanism that an IPP Printer\n   controls.  Note: although
      this term is capitalized in this\n   specification (but not in [RFC2911]), there
      is no formal object\n   called an Output Device defined in this document (or
      in [RFC2911]).\n   Output Device Fan-Out - A configuration in which an IPP Printer\n
      \  controls more than one Output Device.\n   Printer Fan-Out - A configuration
      in which an IPP Printer object\n   controls more than one Subordinate IPP Printer
      object.\n   Printer Fan-In - A configuration in which an IPP Printer object
      is\n   controlled by more than one IPP Printer object.\n   Subordinate Printer
      - An IPP Printer object that is controlled by\n   another IPP Printer object.
      \ Such a Subordinate Printer MAY have zero\n   or more Subordinate Printers.\n
      \  Leaf Printer - An IPP Printer object that has no Subordinate\n   Printers.\n
      \  Non-Leaf Printer - An IPP Printer object that has one or more\n   Subordinate
      Printers.  A Non-Leaf Printer is also called a Parent\n   Printer.\n   Chained
      Printer - a Non-Leaf Printer that has exactly one Subordinate\n   Printer.\n
      \  Job Creation operations - IPP operations that create a Job object:\n   Print-Job,
      Print-URI, and Create-Job.\n"
    title: 2.2.  Other Terminology
  title: 2.  Terminology
- contents:
  - "3.  Definition of the Printer Operations\n   All Printer Operations are directed
    at Printer objects.  A client\n   MUST always supply the \"printer-uri\" operation
    attribute in order to\n   identify the correct target of the operation.  These
    descriptions\n   assume all of the common semantics of the IPP/1.1 Model and Semantics\n
    \  document ([RFC2911], section 3.1).\n   The Printer Operations defined in this
    document are summarized in\n   Table 1.\n   Table 1.  Printer Operation Operation-Id
    Assignments\n   Operation Name  Operation-Id  Brief Description\n   --------------------------------------------------------------------\n
    \  Enable-Printer      0x22      Allows the target Printer to accept\n                                 Job
    Creation operations.\n   Disable-Printer     0x23      Prevents the target Printer
    from\n                                 accepting Job Creation operations.\n   Pause-Printer-
    \     0x24      Pauses the Printer after the current\n   After-Current-                job
    has been sent to the Output\n   Job                           Device.\n   Hold-New-Jobs
    \      0x25      Finishes processing all currently\n                                 pending
    jobs.  Any new jobs are\n                                 placed in the 'pending-held'
    state.\n   Release-Held-       0x26      Releases all jobs to the 'pending'\n
    \  New-Jobs                      state that had been held by the\n                                 effect
    of a previous Hold-New-Jobs\n                                 operation and condition
    the Printer\n                                 so that it no longer holds new jobs.\n
    \  Deactivate-         0x27      Puts the Printer into a read-only\n   Printer
    \                      deactivated state.\n   Activate-           0x28      Restores
    the Printer to normal\n   Printer                       activity.\n   Restart-Printer
    \    0x29      Restarts the target Printer and re-\n                                 initializes
    the software.\n   Shutdown-           0x2A      Shuts down the target Printer
    so that\n   Printer                       it cannot be restarted or queried.\n
    \  Startup-Printer     0x2B      Starts up the instance of the Printer\n                                 object.\n
    \  All of the operations in this document are OPTIONAL for an IPP object\n   to
    support.  Unless the specification of an OPTIONAL operation\n   requires support
    of another OPTIONAL operation, conforming\n   implementations may support any
    combination of these operations.\n   Many of the operations come in pairs, so
    both are REQUIRED if either\n   one is implemented.\n"
  - contents:
    - "3.1.  The Disable and Enable Printer Operations\n   This section defines the
      OPTIONAL Disable-Printer and Enable-Printer\n   operations that stop and start
      the IPP Printer object from accepting\n   new IPP jobs.  If either of these
      operations are supported, both MUST\n   be supported.\n   These operations allow
      the operator to control whether the Printer\n   will accept new Job Creation
      (Print-Job, Print-URI, and Create-Job)\n   operations.  These operations have
      no other effect on the Printer, so\n   the Printer continues to accept all other
      operations and continues to\n   schedule and process jobs normally.  In other
      words, these operations\n   control the \"input of new jobs\" to the IPP Printer,
      and the Pause and\n   Resume operations (see section 3.2) independently control
      the \"output\n   of new jobs\" from the IPP Printer to the Output Device.\n"
    - contents:
      - "3.1.1.  Disable-Printer Operation\n   This OPTIONAL operation allows a client
        to stop the Printer object\n   from accepting new jobs; i.e., it causes the
        Printer to reject\n   subsequent Job Creation operations and return the 'server-error-not-\n
        \  accepting-jobs' status code.  The Printer still accepts all other\n   operations,
        including Validate-Job, Send-Document, and Send-URI\n   operations.  Thus
        a Disable-Printer operation allows a client to\n   continue submitting multiple
        documents of a multiple document job if\n   the Create-Job operation had already
        been accepted.  All previously\n   created or submitted Jobs and all Jobs
        currently processing continue\n   unaffected.\n   The IPP Printer MUST accept
        the request in any state.  The Printer\n   sets the value of its \"printer-is-accepting-jobs\"
        READ-ONLY Printer\n   Description attribute to 'false' (see [RFC2911], section
        4.4.20), no\n   matter what the previous value was.  This operation has no
        immediate\n   or direct effect on the Printer's \"printer-state\" and \"printer-\n
        \  state-reasons\" attributes.\n   Access Rights: The authenticated user (see
        [RFC2911], section 8.3)\n   performing this operation must be an operator
        or administrator of the\n   Printer object (see [RFC2911] sections 1 and 8.5).\n
        \  The Disable-Printer Request and Disable-Printer Response have the\n   same
        attribute groups and attributes as do the Pause-Printer\n   operation (see
        [RFC2911], sections 3.2.7.1 and 3.2.7.2), including\n   the new \"printer-message-from-operator\"
        operation attribute (see\n   section 6).\n"
      title: 3.1.1.  Disable-Printer Operation
    - contents:
      - "3.1.2.  Enable-Printer Operation\n   This OPTIONAL operation allows a client
        to start the Printer object\n   accepting jobs; i.e., it causes the Printer
        to accept subsequent Job\n   Creation operations.  The Printer still accepts
        all other operations.\n   All previously submitted and currently processing
        Jobs continue\n   unaffected.\n   The IPP Printer MUST accept the request
        in any state.  The Printer\n   sets the value of its \"printer-is-accepting-jobs\"
        READ-ONLY Printer\n   Description attribute to 'true' (see [RFC2911], section
        4.4.20), no\n   matter what the previous value was.  This operation has no
        immediate\n   or direct effect on the Printer's \"printer-state\" and \"printer-\n
        \  state-reasons\" attributes.\n   Access Rights: The authenticated user (see
        [RFC2911], section 8.3)\n   performing this operation must be an operator
        or administrator of the\n   Printer object (see [RFC2911] sections 1 and 8.5).\n
        \  The Enable-Printer Request and Enable-Printer Response have the same\n
        \  attribute groups and attributes as does the Pause-Printer operation\n   (see
        [RFC2911], sections 3.2.8.1 and 3.2.8.2), including the new\n   \"printer-message-from-operator\"
        operation attribute (see section 6).\n"
      title: 3.1.2.  Enable-Printer Operation
    title: 3.1.  The Disable and Enable Printer Operations
  - contents:
    - "3.2.  The Pause and Resume Printer Operations\n   This section leaves the OPTIONAL
      IPP/1.1 Pause-Printer (see\n   [RFC2911], sections 3.2.7) ambiguous as to whether
      it stops the\n   Printer immediately or after the current job.  It also defines
      the\n   OPTIONAL Pause-Printer-After-Current-Job operation as following the\n
      \  current job.  These operations affect the scheduling of IPP jobs.  If\n   either
      of these Pause Printer operations are supported, then the\n   Resume-Printer
      operation MUST be supported.\n   These operations allow the operator to control
      whether the Printer\n   will send new IPP jobs to the associated Output Device(s)
      that the\n   IPP Printer object represents.  These operations have no other
      effect\n   on the Printer, so the Printer continues to accept all operations.\n
      \  In other words, these operations control the \"output of new jobs\" to\n
      \  the Output Device(s), and the Disable and Enable Printer Operations\n   (see
      section 3.1) independently control the \"input of new jobs\" to\n   the IPP
      Printer.\n   Table 2.  Pause and Resume Printer Operations\n   Pause and Resume
      Printers  Description\n   --------------------------------------------------------------------\n
      \  IPP/1.1 Pause Printer      Stops the IPP Printer from sending\n                              new
      IPP Jobs to the Output Device(s)\n                              either immediately
      or after the\n                              current job completes, depending
      on\n                              implementation, as defined in\n                              [RFC2911].\n
      \  Pause-Printer-After-       Stops the IPP Printer from sending\n   Current-Job
      \               new IPP Jobs to the Output Device(s)\n                              after
      the current jobs finish.\n   Resume-Printer             Starts the IPP Printer
      sending IPP\n                              Jobs to the Output Device again.\n"
    - contents:
      - "3.2.1.  Pause-Printer-After-Current-Job Operation\n   This OPTIONAL operation
        allows a client to stop the Printer object\n   from sending IPP jobs to any
        of its Output Devices or Subordinate\n   Printers.  If the IPP Printer is
        in the middle of sending an IPP job\n   to an Output Device or Subordinate
        Printer, the IPP Printer MUST\n   complete sending that Job.  However, after
        receiving this operation,\n   the IPP Printer MUST NOT send any additional
        IPP jobs to any of its\n   Output Devices or Subordinate Printers.  In addition,
        after having\n   received this operation, the IPP Printer MUST NOT start processing\n
        \  any more jobs, so additional jobs MUST NOT enter the 'processing'\n   state.\n
        \  If the IPP Printer is not sending an IPP Job to the Output Device or\n
        \  Subordinate Printer (whether or not the Output Device or Subordinate\n
        \  Printer is busy processing any jobs), the IPP Printer object\n   transitions
        immediately to the 'stopped' state by setting its\n   \"printer-state\" attribute
        to 'stopped', removing the 'moving-to-\n   paused' value, if present, from
        its \"printer-state-reasons\"\n   attribute, and adding the 'paused' value
        to its \"printer-state-\n   reasons\" attribute.\n   If the implementation
        will take appreciable time to complete sending\n   an IPP job that it has
        started sending to an Output Device or\n   Subordinate Printer, the IPP Printer
        adds the 'moving-to-paused'\n   value to the Printer object's \"printer-state-reasons\"
        attribute (see\n   section [RFC2911], 4.4.12).  When the IPP Printer has completed\n
        \  sending IPP jobs that it was in the process of sending, the Printer\n   object
        transitions to the 'stopped' state by setting its \"printer-\n   state\" attribute
        to 'stopped', removing the 'moving-to-paused' value,\n   if present, from
        its \"printer-state-reasons\" attribute, and adding\n   the 'paused' value
        to its \"printer-state-reasons\" attribute.\n   This operation MUST NOT affect
        the acceptance of Job Creation\n   requests (see Disable-Printer Operation,
        section 3.1.1).\n   For any jobs that are 'pending' or 'pending-held', the
        'printer-\n   stopped' values of the jobs' \"job-state-reasons\" attribute
        also\n   apply.  However, the IPP Printer NEED NOT update those jobs' \"job-\n
        \  state-reasons\" attributes and only have to return the 'printer-\n   stopped'
        value when those jobs are queried by using the Get-Job-\n   Attributes or
        Get-Jobs operations (so-called \"lazy evaluation\").\n   The IPP Printer MUST
        accept the request in any state and transition\n   the Printer to the indicated
        new \"printer-state\", and it MUST add the\n   indicated value to \"printer-state-reasons\"
        attribute before returning\n   as follows:\n   Table 3.  State Transition
        Table for Pause-Printer-After-Current-Job\n             Operation\n   Current
        \     New          \"printer  IPP Printer's response status\n   \"printer-
        \   \"printer-    -state-   code and action (REQUIRED/\n   state\"       state\"
        \      reasons\"  OPTIONAL state transition for\n                                       a
        Printer to support):\n  --------------------------------------------------------------------\n
        \  'idle'       'stopped'    'paused'  REQUIRED:  'successful-ok'\n   'processing'
        'processing' 'moving-  OPTIONAL:  'successful-ok';\n                              to-
        \     Later, when the IPP Printer\n                              paused'  has
        finished sending IPP jobs\n                                       to an Output
        Device, the\n                                       \"printer-state\" becomes\n
        \                                      'stopped', and the 'paused'\n                                       value
        replaces the 'moving-to-\n                                       paused' value
        in the \"printer-\n                                       state-reasons\"
        attribute\n   'processing' 'stopped'    'paused'  REQUIRED:  'successful-ok';\n
        \                                      the IPP Printer wasn't in the\n                                       middle
        of sending an IPP job\n                                       to an Output
        Device\n   'stopped'    'stopped'    'paused'  REQUIRED:  'successful-ok'\n
        \  Access Rights: The authenticated user (see [RFC2911], section 8.3)\n   performing
        this operation must be an operator or administrator of the\n   Printer object
        (see [RFC2911], sections 1 and 8.5).\n   The Pause-Printer-After-Current-Job
        Request and Pause-Printer-After-\n   Current-Job Response have the same attribute
        groups and attributes as\n   does the Pause-Printer operation (see [RFC2911],
        sections 3.2.7.1 and\n   3.2.7.2), including the new \"printer-message-from-operator\"
        operation\n   attribute (see section 6).\n"
      title: 3.2.1.  Pause-Printer-After-Current-Job Operation
    title: 3.2.  The Pause and Resume Printer Operations
  - contents:
    - "3.3.  Hold and Release New Jobs Operations\n   This section defines operations
      to condition the Printer to hold any\n   new jobs and to release them.\n"
    - contents:
      - "3.3.1.  Hold-New-Jobs Operation\n   This OPTIONAL operation allows a client
        to condition the Printer to\n   complete the current 'pending' and 'processing'
        IPP Jobs but not to\n   start processing any subsequently created IPP Jobs.
        \ If the IPP\n   Printer is in the middle of sending an IPP job to an Output
        Device or\n   Subordinate Printer, the IPP Printer MUST complete sending that
        Job.\n   Furthermore, the IPP Printer MUST send all of the current 'pending'\n
        \  IPP Jobs to the Output Device(s) or Subordinate IPP Printer\n   object(s).
        \ Any subsequently received Job Creation operations will\n   cause the IPP
        Printer to put the Job into the 'pending-held' state,\n   with the 'job-held-on-create'
        value being added to the job's \"job-\n   state-reasons\" attribute.  Thus
        all newly accepted jobs will be\n   automatically held by the Printer.\n   When
        the Printer completes all the 'pending' and 'processing' jobs,\n   it enters
        the 'idle' state as usual.  An operator monitoring Printer\n   state changes
        will know when the Printer has completed all current\n   jobs because the
        Printer enters the 'idle' state.\n   This operation MUST NOT affect the acceptance
        of Job Creation\n   requests (see Disable-Printer Operation, section 3.1.1),
        except to\n   put the Jobs into the 'pending-held' state, instead of the 'pending'\n
        \  or 'processing' state.\n   The IPP Printer MUST accept the request in any
        state, MUST NOT\n   transition the Printer to any other \"printer-state\",
        and MUST add the\n   'hold-new-jobs' value to the Printer's \"printer-state-reasons\"\n
        \  attribute (whether the value was present or not).\n   Access Rights: The
        authenticated user (see [RFC2911], section 8.3)\n   performing this operation
        must be an operator or administrator of the\n   Printer object (see [RFC2911],
        sections 1 and 8.5).\n   The Hold-New-Jobs Request and Hold-New-Jobs Response
        have the same\n   attribute groups and attributes as does the Pause-Printer
        operation\n   (see [RFC2911], sections 3.2.7.1 and 3.2.7.2), including the
        new\n   \"printer-message-from-operator\" operation attribute (see section
        6).\n"
      title: 3.3.1.  Hold-New-Jobs Operation
    - contents:
      - "3.3.2.  Release-Held-New-Jobs Operation\n   This OPTIONAL operation allows
        a client to undo the effect of a\n   previous Hold-New-Jobs operation.  In
        particular, the Printer\n   releases all the jobs that it held as a consequence
        of a Hold-New-\n   Jobs operations; i.e., while the 'hold-new-jobs' value
        was present in\n   the Printer's \"printer-state-reasons\" attribute.  In
        addition, the\n   Printer MUST accept this request in any state, MUST NOT
        transition\n   the Printer to any other \"printer-state\", and MUST remove
        the 'hold-\n   new-jobs' value from its \"printer-state-reasons\" attribute
        (whether\n   the value was present or not) so that the Printer no longer holds\n
        \  newly created jobs.\n   Access Rights: The authenticated user (see [RFC2911],
        section 8.3)\n   performing this operation must be an operator or administrator
        of the\n   Printer object (see [RFC2911], sections 1 and 8.5).\n   The Release-Held-New-Jobs
        Request and Release-Held-New-Jobs Response\n   have the same attribute groups
        and attributes as the Pause-Printer\n   operation (see [RFC2911], sections
        3.2.7.1 and 3.2.7.2), including\n   the new \"printer-message-from-operator\"
        operation attribute (see\n   section 6).\n"
      title: 3.3.2.  Release-Held-New-Jobs Operation
    title: 3.3.  Hold and Release New Jobs Operations
  - contents:
    - "3.4.  Deactivate and Activate Printer Operations\n   This section defines the
      OPTIONAL Deactivate-Printer and Activate-\n   Printer operations that stop and
      start the IPP Printer object from\n   accepting all requests except queries
      and performing work.  If either\n   of these operations are supported, both
      MUST be supported.\n   These operations allow the operator to put the Printer
      into a dormant\n   read-only condition and to take it out of this condition.\n"
    - contents:
      - "3.4.1.  Deactivate-Printer Operation\n   This OPTIONAL operation allows a
        client to stop the Printer object\n   from sending IPP jobs to any of its
        Output Devices or Subordinate\n   Printers (Pause-Printer-After-Current-Job)
        and to stop the Printer\n   object from accepting any requests but query requests.
        \ The Printer\n   performs a Disable-Printer and a Pause-Printer-After-Current-Job\n
        \  operation immediately.  If these two operations cannot be completed\n   immediately,
        it includes use of all of the \"printer-state-reasons\".\n   In addition,
        the Printer MUST immediately reject all requests, except\n   for Activate-Printer,
        queries (Get-Printer-Attributes, Get-Job-\n   Attributes, Get-Jobs, etc.),
        Send-Document, and Send-URI (so that\n   partial job submission can be completed,
        see section 3.1.1).  The\n   Printer MUST then return the 'server-error-service-unavailable'\n
        \  status code.\n   The IPP Printer MUST accept the request in any state.
        \ Immediately,\n   the Printer MUST set the 'deactivated' value in its \"printer-state-\n
        \  reasons\" attribute.  Note: neither the Disable-Printer nor the\n   Pause-Printer-After-Current-Job
        set the 'deactivated' value.\n   Access Rights: The authenticated user (see
        [RFC2911], section 8.3)\n   performing this operation must be an operator
        or administrator of the\n   Printer object (see [RFC2911], sections 1 and
        8.5).\n   The Deactivate-Printer Request and Deactivate-Printer Response have\n
        \  the same attribute groups and attributes as does the Pause-Printer\n   operation
        (see [RFC2911], sections 3.2.7.1 and 3.2.7.2), including\n   the new \"printer-message-from-operator\"
        operation attribute (see\n   section 6).\n"
      title: 3.4.1.  Deactivate-Printer Operation
    - contents:
      - "3.4.2.  Activate-Printer Operation\n   This OPTIONAL operation allows a client
        to undo the effects of the\n   Deactivate-Printer; i.e., it allows the Printer
        object to start\n   sending IPP jobs to any of its Output Devices or Subordinate
        Printers\n   (Pause-Printer-After-Current-Job) and starts the Printer object
        from\n   accepting any requests.  The Printer performs an Enable-Printer and
        a\n   Resume-Printer operation immediately.  In addition, the Printer MUST\n
        \  immediately start accepting all requests.\n   The IPP Printer MUST accept
        the request in any state.  The Printer\n   MUST immediately remove the 'deactivated'
        value from its \"printer-\n   state-reasons\" attribute (whether it is present
        or not).\n   Access Rights: The authenticated user (see [RFC2911], section
        8.3)\n   performing this operation must be an operator or administrator of
        the\n   Printer object (see [RFC2911], sections 1 and 8.5).\n   The Activate-Printer
        Request and Activate-Printer Response have the\n   same attribute groups and
        attributes as the Pause-Printer operation\n   (see [RFC2911], sections 3.2.7.1
        and 3.2.7.2), including the new\n   \"printer-message-from-operator\" operation
        attribute (see section 6).\n"
      title: 3.4.2.  Activate-Printer Operation
    title: 3.4.  Deactivate and Activate Printer Operations
  - contents:
    - "3.5.  Restart-Printer, Shutdown-Printer, and Startup-Printer Operations\n   This
      section defines the OPTIONAL Restart-Printer, Shutdown-Printer,\n   and Startup-Printer
      operations that initialize, shutdown, and start\n   up the Printer object, respectively.
      \ Each of these operations is\n   OPTIONAL, and any combination MAY be supported.\n"
    - contents:
      - "3.5.1.  Restart-Printer Operation\n   This OPTIONAL operation allows a client
        to restart a Printer object\n   whose operation is in need of initialization
        because of incorrect or\n   erratic behavior; i.e., perform the effect of
        a software re-boot.\n   The implementation MUST attempt to save any information
        about Jobs\n   and the Printer object before re-initializing.  However, this\n
        \  operation MAY have drastic consequences on the running system, so the\n
        \  client SHOULD first try the Deactivate-Printer operation to minimize\n
        \  the effect on the current state of the system.  The effects of\n   previous
        Disable-Printer, Pause Printer, and Deactivate-Printer\n   operations are
        lost.\n   The IPP Printer MUST accept the request in any state.  The Printer\n
        \  object MUST initialize its Printer's \"printer-state\" to 'idle',\n   remove
        the state reasons from its \"printer-state-reasons\" attribute,\n   and change
        its \"printer-is-accepting-jobs\" attribute to 'true'.\n   Access Rights:
        The authenticated user (see [RFC2911], section 8.3)\n   performing this operation
        must be an operator or administrator of the\n   Printer object (see [RFC2911],
        sections 1 and 8.5).\n   The Restart-Printer Request and Restart-Printer Response
        have the\n   same attribute groups and attributes as does the Pause-Printer\n
        \  operation (see [RFC2911], sections 3.2.8.1 and 3.2.8.2), including\n   the
        new \"printer-message-from-operator\" operation attribute (see\n   section
        6).\n"
      title: 3.5.1.  Restart-Printer Operation
    - contents:
      - "3.5.2.  Shutdown-Printer Operation\n   This OPTIONAL operation allows a client
        to shutdown a Printer; i.e.,\n   to stop processing jobs without losing any
        jobs and to make the\n   Printer object unavailable for any operations using
        the IPP protocol.\n   There is no way to bring the instance of the Printer
        object back to\n   being used, except for the Startup-Printer (see section
        3.5.3), which\n   starts up a new instance of the Printer object for hosted\n
        \  implementations.  The purpose of Shutdown-Printer is to shutdown the\n
        \  Printer for an extended period, not to reset the device(s) or modify\n
        \  a Printer attribute.  See Restart-Printer (section 3.5.1) and\n   Startup-Printer
        (section 3.5.3) for the way to initialize the\n   software.  See the Disable-Printer
        operation (section 3.1) for a way\n   for the client to stop the Printer from
        accepting Job Creation\n   requests without stopping processing or shutting
        down.\n   The Printer MUST add the 'shutdown' value (see [RFC2911], section\n
        \  4.4.11) immediately to its \"printer-state-reasons\" Printer\n   Description
        attribute.  It then performs a Deactivate-Printer\n   operation (see section
        3.4.1), which in turn performs Disable-Printer\n   and Pause-Printer-After-Current-Job
        operations).\n   Note:  To shutdown the Printer after all the currently submitted
        jobs\n   have completed, the operator issues a Disable-Printer operation (see\n
        \  section 3.1.1) and then waits until all the jobs have completed.  The\n
        \  Printer goes into the 'idle' state before issuing the Shutdown-\n   Printer
        operation.\n   The Printer object MUST accept this operation in any state
        and\n   transition the Printer object through the \"printer-states\" and\n
        \  \"printer-state-reasons\" defined for the Pause-Printer-After-Current-\n
        \  Job operation until the activity is completed and the Printer object\n
        \  disappears.\n   Access Rights: The authenticated user (see [RFC2911], section
        8.3)\n   performing this operation must be an operator or administrator of
        the\n   Printer object (see [RFC2911], sections 1 and 8.5).\n   The Shutdown-Printer
        Request and Shutdown-Printer Response have the\n   same attribute groups and
        attributes as does the Pause-Printer\n   operation (see [RFC2911], sections
        3.2.7.1 and 3.2.7.2), including\n   the new \"printer-message-from-operator\"
        operation attribute (see\n   section 6).\n"
      title: 3.5.2.  Shutdown-Printer Operation
    - contents:
      - "3.5.3.  Startup-Printer operation\n   This OPTIONAL operation allows a client
        to start up an instance of a\n   Printer object, provided that there isn't
        one already initiated.  The\n   purpose of Startup-Printer is to allow a hosted
        implementation of the\n   IPP Printer object (i.e., a Server that implements
        an IPP Printer on\n   behalf of a networked or local Output Device) to be
        started after the\n   host is available (by means outside this document).
        \ See section\n   3.5.1 for the way to initialize the software or reset the
        Output\n   Device(s) when the IPP Printer object has already been initiated.\n
        \  The host MUST accept this operation only when the Printer object has\n
        \  not been initiated.  If the Printer object already exists, the host\n   must
        return the 'client-error-not-possible' status code.\n   The result of this
        operation MUST be with the Printer object's\n   \"printer-state\" set to 'idle',
        the state reasons removed from its\n   \"printer-state-reasons\" attribute,
        and its \"printer-is-accepting-\n   jobs\" attribute set to 'false'.  Then
        the operator can reconfigure\n   the Printer before performing an Enable-Printer
        operation.  However,\n   when a Printer is first powered up, it is RECOMMENDED
        that its\n   \"printer-is-accepting-jobs\" attribute be set to 'true' in order
        to\n   achieve easy \"out of the box\" operation.\n   Access Rights: The authenticated
        user (see [RFC2911], section 8.3)\n   performing this operation must be an
        operator or administrator of the\n   Printer object (see [RFC2911], sections
        1 and 8.5).\n   The Shutdown-Printer Request and Shutdown-Printer Response
        have the\n   same attribute groups and attributes as does the Pause-Printer\n
        \  operation (see [RFC2911] sections 3.2.7.1 and 3.2.7.2), including the\n
        \  new \"printer-message-from-operator\" operation attribute (see section\n
        \  6).\n"
      title: 3.5.3.  Startup-Printer operation
    title: 3.5.  Restart-Printer, Shutdown-Printer, and Startup-Printer Operations
  title: 3.  Definition of the Printer Operations
- contents:
  - "4.  Definition of the Job Operations\n   All Job operations are directed at Job
    objects.  A client MUST always\n   supply some means to identify the Job object
    in order to select the\n   correct target of the operation.  That job identification
    MAY either\n   be a single Job URI or a combination of a Printer URI and a Job
    ID.\n   The IPP object implementation MUST support both forms of\n   identification
    for every job.\n   The Job Operations defined in this document are summarized
    in Table\n   4.\n   Table 4.  Job Operation Operation-Id Assignments\n   Operation
    Name  Operation-Id  Brief description\n   --------------------------------------------------------------------\n
    \  Reprocess-Job       0x2C      Creates a copy of a completed target\n                                 job
    with a new Job ID and processes it.\n   Cancel-Current-     0x2D      Cancels
    the current job on the target\n   Job                           Printer or the
    specified job if it is\n                                 the current job.\n   Suspend-
    \           0x2E      Suspends the current processing job on\n   Current-Job                   the
    target Printer or the specified\n                                 job if it is
    the current job, allowing\n                                 other jobs to be processed
    instead.\n   Resume-Job          0x2F      Resumes the suspended target job.\n
    \  Promote-Job         0x30      Promotes the pending target job to be\n                                 next
    after the current job(s) complete.\n   Schedule-Job-       0x31      Schedules
    the target job immediately\n   After                         after the specified
    job, all other\n                                 scheduling factors being equal.\n"
  - contents:
    - "4.1.  Reprocess-Job Operation\n   This OPTIONAL operation is a create job operation
      that allows a\n   client to re-process a copy of a job that had been retained
      in the\n   queue after processing was completed, canceled, or aborted (see\n
      \  [RFC2911], section 4.3.7.2).  This operation is the same as the\n   Restart-Job
      operation (see [RFC2911], section 3.3.7), except that the\n   Printer creates
      a new job that is a copy of the target job and the\n   target job is unchanged.
      \ New values are assigned to the \"job-uri\"\n   and \"job-id\" attributes.
      \ The new job's Job Description attributes\n   that track job progress, such
      as \"job-impressions-completed\", \"job-\n   media-sheets-completed\", and \"job-k-octets-processed\",
      are\n   initialized to 0, as with any create job operation.  The target job\n
      \  moves to the Job History after a suitable period, independent of\n   whether
      one or more Reprocess-Job operations have been performed upon\n   it.\n   If
      the Set-Job-Attributes operation is supported, then the \"job-\n   hold-until\"
      operation attribute MUST be supported with at least the\n   'indefinite' value,
      so that a client can modify the new job before it\n   is scheduled for processing
      by using the Set-Job-Attributes\n   operation.  After modifying the job, the
      client can release the job\n   for processing by using the Release-Job operation
      specifying the\n   newly assigned \"job-uri\" or \"job-id\" for the new job.\n"
    title: 4.1.  Reprocess-Job Operation
  - contents:
    - "4.2.  Cancel-Current-Job Operation\n   This OPTIONAL operation allows a client
      to cancel the current job on\n   the target Printer or the specified job if
      it is the current job on\n   the Printer.  See [RFC2911], section 3.3.3, for
      the semantics of\n   canceling a job.  Since a Job might already be marking
      by the time a\n   Cancel-Current-Job is received, some media sheet pages might
      print\n   before the job is actually terminated.\n   If the client does not
      supply a \"job-id\" operation attribute, the\n   Printer MUST accept the request
      and cancel the current job if there\n   is a current job in the 'processing'
      or 'processing-stopped' state;\n   otherwise, it MUST reject the request and
      return the 'client-error-\n   not-possible' status code.  If more than one job
      is in the\n   'processing' or 'processing-stopped' state, the one that is marking\n
      \  is canceled, and the others are unaffected.\n   Warning:  On a shared printer,
      there is a race condition.  Between\n   the time when a user issues this operation
      and the time of its\n   acceptance, the current job might change to a different
      job.  If the\n   user or operator is authenticated to cancel the new job, the
      wrong\n   job is canceled.  To prevent this race from canceling the wrong job,\n
      \  the client MAY supply the \"job-id\" operation attribute, which is\n   checked
      against the current job's job-id.  If the job identified by\n   the \"job-id\"
      attribute is not the current job on the Printer (i.e.,\n   is not in the 'processing'
      or 'processing-stopped' state), the\n   Printer MUST reject this operation and
      return the 'client-error-not-\n   possible' status code.  Otherwise, the Printer
      cancels the specified\n   job.\n   Access Rights: The authenticated user (see
      [RFC2911], section 8.3)\n   performing this operation must either be the job
      owner (as determined\n   in the Job Creation operation) or an operator or administrator
      of the\n   Printer object (see [RFC2911], sections 1 and 8.5).\n   The Cancel-Current-Job
      Request and Cancel-Current-Job Response have\n   the same attribute groups and
      attributes as does the Resume-Printer\n   operation (see [RFC2911], section
      3.2.8), including the new \"job-\n   message-from-operator\" operation attribute
      (see section 6), with the\n   addition of the following Group 1 Operation attribute
      in the request:\n   \"job-id\" (integer(1:MAX)):\n      The client OPTIONALLY
      supplies this Operation attribute to verify\n      that the identified job is
      still the current job on the target\n      Printer object.  The IPP object MUST
      support this operation\n      attribute if it supports this operation.\n"
    title: 4.2.  Cancel-Current-Job Operation
  - contents:
    - "4.3.  Suspend and Resume Job Operations\n   This section defines the Suspend-Current-Job
      and Resume-Job\n   operations.  These operations allow an operator or user to
      suspend a\n   job while it is processing, allowing other jobs to be processed,
      and\n   to resume the suspended job at a later point without losing any of\n
      \  the output.\n   If either of these operations is supported, both MUST be
      supported.\n   The Hold-Job and Release-Job operations ([RFC2911], section 3.3.5)\n
      \  are for holding and releasing held jobs, not suspending and resuming\n   suspended
      jobs.\n"
    - contents:
      - "4.3.1.  Suspend-Current-Job Operation\n   This OPTIONAL operation allows
        a client to stop the current job on\n   the target Printer or the specified
        job if it is the current job on\n   the Printer, to allow other jobs to be
        processed instead.  The\n   Printer moves the current job or the target job
        to the 'processing-\n   stopped' state and sets the 'job-suspended' value
        (see section 9.1)\n   in the job's \"job-state-reasons\" attribute and processes
        other jobs.\n   If the client does not supply a \"job-id\" operation attribute,
        the\n   Printer MUST accept the request and suspend the current job if there\n
        \  is a current job in the 'processing' or 'processing-stopped' state.\n   Otherwise,
        it MUST reject the request and return the 'client-error-\n   not-possible'
        status code.  If more than one job is in the\n   'processing' or 'processing-stopped'
        state, all of them are\n   suspended.\n   Warning:  On a shared printer, there
        is a race condition.  Between\n   the time when a user issues this operation
        and the time of its\n   acceptance, the current job might change to a different
        job.  If the\n   user or operator is authenticated to suspend the new job,
        the wrong\n   job is suspended.  To prevent this race from pausing the wrong
        job,\n   the client MAY supply the \"job-id\" operation attribute, which is\n
        \  checked against the current job's job-id.  If the job identified by\n   the
        \"job-id\" attribute is not the current job on the Printer (i.e.,\n   is not
        in the 'processing' or 'processing-stopped' state), the\n   Printer MUST reject
        this operation and return the 'client-error-not-\n   possible' status code.
        \ Otherwise, the Printer suspends the specified\n   job and processed other
        jobs.\n   The Printer MUST reject a Suspend-Current-Job request (and return
        the\n   'client-error-not-possible') for a job that has been suspended, i.e.,\n
        \  for a job in the 'processing-stopped' state, with the 'job-suspended'\n
        \  value in its \"job-state-reasons\" attribute.\n   Access Rights: The authenticated
        user (see [RFC2911], section 8.3)\n   performing this operation must be either
        the job owner (as determined\n   in the Job Creation operation) or an operator
        or administrator of the\n   Printer object (see [RFC2911], sections 1 and
        8.5).\n   The Suspend-Current-Job Request and Suspend-Current-Job Response
        have\n   the same attribute groups and attributes as does the Pause-Printer\n
        \  operation (see [RFC2911], section 3.2.8 ), including the new \"job-\n   message-from-operator\"
        operation attribute (see section 6), with the\n   addition of the following
        Group 1 Operation attribute in the request:\n   \"job-id\" (integer(1:MAX)):\n
        \     The client OPTIONALLY supplies this Operation attribute to verify\n
        \     that the identified job is still the current job on the target\n      Printer
        object.  The IPP object MUST support this operation\n      attribute if it
        supports this operation.\n"
      title: 4.3.1.  Suspend-Current-Job Operation
    - contents:
      - "4.3.2.  Resume-Job Operation\n   This OPTIONAL operation allows a client
        to resume the target job at\n   the point where it was suspended.  The Printer
        moves the target job\n   to the 'pending' state and removes the 'job-suspended'
        value from the\n   job's \"job-state-reasons\" attribute.\n   If the target
        job is not in the 'processing-stopped' state, with the\n   'job-suspended'
        value in the job's \"job-state-reasons\" attribute, the\n   Printer MUST reject
        the request and return the 'client-error-not-\n   possible' status code, since
        the job was not suspended.\n   Access Rights: The authenticated user (see
        [RFC2911], section 8.3)\n   performing this operation must be either the job
        owner (as determined\n   in the Job Creation operation) or an operator or
        administrator of the\n   Printer object (see [RFC2911], sections 1 and 8.5).\n
        \  The Resume-Job Request and Resume-Job Response have the same\n   attribute
        groups and attributes as the Release-Job operation (see\n   [RFC2911], section
        3.3.6), including the new \"job-message-from-\n   operator\" operation attribute
        (see section 6).\n"
      title: 4.3.2.  Resume-Job Operation
    title: 4.3.  Suspend and Resume Job Operations
  - contents:
    - "4.4.  Job Scheduling Operations\n   This section defines jobs that allow an
      operator to control the\n   scheduling of jobs.\n"
    - contents:
      - "4.4.1.  Promote-Job Operation\n   This OPTIONAL operation allows a client
        to make the pending target\n   job be processed next after the current job
        completes.  This\n   operation is especially useful in a production printing
        environment\n   where the operator is involved in job scheduling.\n   If the
        target job is in the 'pending' state, this operation does not\n   change the
        job's state but causes the job to be processed after the\n   current job(s)
        complete.  If the target job is not in the 'pending'\n   state, the Printer
        MUST reject the request and return the 'client-\n   error-not-possible' status
        code.\n   If the Printer implements the \"job-priority\" Job Template attribute\n
        \  (see [RFC2911], section 4.2.1), the Printer sets the job's \"job-\n   priority\"
        to the highest value supported (so that the job will print\n   before any
        of the other pending jobs).  The Printer returns the\n   target job immediately
        after the current job(s) in a Get-Jobs\n   response (see [RFC2911], section
        3.2.6) for the 'not-completed' jobs.\n   When the current job is completed,
        canceled, suspended (see section\n   4.3.1), or aborted, the target of this
        operation is processed next.\n   If a client issues this request (again) before
        the target of the\n   operation of the original request started processing,
        the target of\n   this new request is processed first.\n   IPP is specified
        not to require queues for job scheduling, as there\n   are other implementation
        techniques for scheduling multiple jobs,\n   such as re-evaluating a criteria
        function for each job on a\n   scheduling cycle.  However, if an implementation
        does implement\n   queues for jobs, then the Promote-Job operation puts the
        specified\n   job at the front of the queue.  A subsequent Promote-Job operation\n
        \  prior to the processing of the first job puts that specified job at\n   the
        front of the queue, so that it is \"in front\" of the previously\n   promoted
        job.\n   Access Rights: The authenticated user (see [RFC2911], section 8.3)\n
        \  performing this operation must be an operator or administrator of the\n
        \  Printer object (see [RFC2911], sections 1 and 8.5).\n   The Promote-Job
        Request and Promote-Job Response have the same\n   attribute groups and attributes
        as does the Cancel-Job operation (see\n   [RFC2911], section 3.3.3), including
        the new \"job-message-from-\n   operator\" operation attribute (see section
        6).\n"
      title: 4.4.1.  Promote-Job Operation
    - contents:
      - "4.4.2.  Schedule-Job-After Operation\n   This OPTIONAL operation allows a
        client to request that the Printer\n   schedule the target job so that it
        will be processed immediately\n   after the specified predecessor job, all
        other scheduling factors\n   being equal.  This operation is specially useful
        in a production\n   printing environment where the operator is involved in
        job\n   scheduling.\n   If the target job is in the 'pending' state, this
        operation does not\n   change the job's state but causes the job to be processed
        after the\n   preceding job completes.  The preceding job can be in the target\n
        \  'pending', 'processing', or 'processing-stopped' state.  If the\n   target
        job is not in the 'pending' state, or if the predecessor job\n   is not in
        the 'pending', 'processing', or 'processing-stopped' state,\n   the Printer
        MUST reject the request, and it returns the 'client-\n   error-not-possible'
        status code, as the job cannot have its position\n   changed.\n   If the Printer
        implements the \"job-priority\" Job Template attribute\n   (see [RFC2911],
        section 4.2.1), the Printer sets the job's \"job-\n   priority\" to that of
        the predecessor job (so that the job will print\n   after the predecessor
        job).  The Printer returns the target job\n   immediately after the predecessor
        in a Get-Jobs response (see\n   [RFC2911], section 3.2.6) for the 'not-completed'
        jobs.\n   When the predecessor job completes processing or is canceled or\n
        \  aborted while processing, the target of this operation is processed\n   next.\n
        \  If the client does not supply a predecessor job, this operation has\n   the
        same semantics as Promote-Job (see section 4.4).\n   IPP is specified not
        to require queues for job scheduling, as there\n   are other implementation
        techniques for scheduling multiple jobs,\n   such as re-evaluating a criteria
        function for each job on a\n   scheduling cycle.  However, if an implementation
        does implement\n   queues for jobs, then the Schedule-Job-After operation
        puts the\n   specified job immediately after the specified job in the queue.
        \ A\n   subsequent Schedule-Job-After operation specifying the same job will\n
        \  cause its target job to be placed after that job, even though it is\n   between
        the first target job and the specified job.  For example,\n   suppose the
        job queue consisted of jobs A, B, C, D, and E, in that\n   order.  A Schedule-Job-After
        with job E as the target and B as the\n   specified job would result in the
        following queue:  A, B, E, C, D.  A\n   subsequent Schedule-Job-After with
        Job D as the target and B as the\n   specified job would result in the following
        queue:  A, B, D, E, C.\n   In other words, the link between the two jobs in
        a Schedule-Job-After\n   operation is not retained; i.e., there is no attribute
        on either job\n   that points to the other job as a result of this operation.\n
        \  Access Rights: The authenticated user (see [RFC2911], section 8.3)\n   performing
        this operation must be an operator or administrator of the\n   Printer object
        (see [RFC2911], sections 1 and 8.5).\n   The Schedule-Job-After Request have
        the same attribute groups and\n   attributes as does the Cancel-Job operation
        (see [RFC2911], section\n   3.3.3), plus the new \"job-message-from-operator\"
        operation attribute\n   (see section 6).  In addition, the following operation
        attribute is\n   defined:\n   \"predecessor-job-id\":\n      The client OPTIONALLY
        supplies this attribute.  The Printer MUST\n      support it, if it supports
        this operation.  This attribute\n      specifies the job after which the target
        job is to be processed.\n      If the client omits this attribute, the Printer
        MUST process the\n      target job next, i.e., after the current job, if there
        is one.\n   The Schedule-Job-After Response has the same attribute groups,\n
        \  attributes, and status codes as does the Cancel-Job operation (see\n   [RFC2911],
        section 3.3.3).  The following status codes have\n   particular meaning for
        this operation:\n   'client-error-not-possible' - The target job was not in
        the 'pending'\n   state, or the predecessor job was not in the 'pending',
        'processing',\n   or 'processing-stopped' state.\n   'client-error-not-found'
        - Either the target job or the predecessor\n   job was not found.\n"
      title: 4.4.2.  Schedule-Job-After Operation
    title: 4.4.  Job Scheduling Operations
  title: 4.  Definition of the Job Operations
- contents:
  - "5.  Additional Status Codes\n   This section defines new status codes used by
    the operations defined\n   in this document.\n"
  - contents:
    - "5.1.  'server-error-printer-is-deactivated' (0x050A)\n   The Printer has been
      deactivated by the Deactivate-Printer operation\n   and is only accepting the
      Activate-Printer (see section 3.5.1), Get-\n   Job-Attributes, Get-Jobs, Get-Printer-Attributes,
      and any other Get-\n   Xxxx operations.  An operator can perform the Activate-Printer\n
      \  operation to allow the Printer to accept other operations.\n"
    title: 5.1.  'server-error-printer-is-deactivated' (0x050A)
  title: 5.  Additional Status Codes
- contents:
  - "6.  Use of Operation Attributes That Are Messages from the Operator\n   This
    section summarizes the usage of the \"printer-message-from-\n   operator\" and
    \"job-message-from-operator\" operation attributes\n   [RFC3380] that set the
    corresponding Printer and Job Description\n   attributes (see [RFC2911] for the
    definition of these).  These\n   operation attributes are defined for most of
    the Printer and Job\n   operations that operators are likely to perform, respectively,
    so\n   that operators can indicate the reasons for their actions.\n   Table 5
    shows the operation attributes defined for use with the\n   Printer Operations.\n
    \  Table 5.  Operation Attribute Support for Printer Operations\n      Operation
    Attribute                 A      B\n      ---------------------------------------------\n
    \     attributes-charset                 REQ    REQ\n      attributes-natural-language
    \       REQ    REQ\n      printer-uri                        REQ    REQ\n      requesting-user-name
    \              REQ    REQ\n      printer-message-from-operator      Note   OPT\n
    \     Legend:\n      A: Get-Printer-Attributes, Set-Printer-Attributes\n      B:
    All other Printer administrative operations, including, but\n         not limited
    to, Pause-Printer, Pause-Printer-After-Current-\n         Job, Resume-Printer,
    Hold-New-Jobs, Release-Held-New-Jobs,\n         Purge-Jobs, Enable-Print, Disable-Printer,
    Restart-\n         Printer, Shutdown-Printer, and Startup-Printer.\n    REQ: REQUIRED
    for a Printer to support.\n    OPT: OPTIONAL for a Printer to support; the Printer
    ignores the\n         attribute if it is not supported.\n   Note: According to
    [RFC3380], the Client MUST NOT supply the\n         \"printer-message-from-operator\"
    operation attribute in a\n         Get-Printer-Attributes or Set-Printer-Attributes
    operation;\n         the Printer MUST ignore this operation attribute in these\n
    \        two operations.  Instead, when it is used by an\n         operator, the
    client MUST supply the\n         \"printer-message-from-operator\" as (one of
    the) explicit\n         attributes being set on the Printer object with the\n
    \        Set-Printer-Attributes operation.\n   Table 6 shows the operation attributes
    defined for use with the Job\n   operations.\n   Table 6.  Operation Attribute
    Support for Job Operations\n      Operation Attribute                 A     B
    \    C     F\n      ---------------------------------------------------------\n
    \     attributes-charset                 REQ   REQ   REQ   REQ\n      attributes-natural-language
    \       REQ   REQ   REQ   REQ\n      printer-uri                        REQ   REQ
    \  REQ   REQ\n      job-uri                            REQ         REQ   REQ\n
    \     job-id                             REQ   REQ   REQ   REQ\n      requesting-user-name
    \              REQ   REQ   REQ   REQ\n      job-message-from-operator          OPT
    \  OPT   OPT   Note\n      message**                          OPT   OPT   OPT
    \  n/a\n      job-hold-until                     n/a   n/a   OPT*  n/a\n      Legend:\n
    \     A: Cancel-Job, Resume-Job, Restart-Job, Promote-Job, Schedule-Job-\n         After\n
    \     B: Cancel-Current-Job, Suspend-Current-Job\n      C: Hold-Job, Release-Job,
    Reprocess-Job\n      F: Get-Job-Attributes, Set-Job-Attributes\n    REQ; REQUIRED
    for a Printer to support.\n    OPT: OPTIONAL for a Printer to support; the Printer
    ignores the\n         attribute if it is supplied, but not supported.\n    n/a:
    not applicable for use with the operation; the Printer ignores\n         the attribute.\n
    \  Note: According to [RFC3380], the Client MUST NOT supply the \"job-\n         message-from-operator\"
    operation attribute in a Get-Job-\n         Attributes or Set-Job-Attributes operation;
    the Printer MUST\n         ignore this operation attribute in these two operations.\n
    \        Instead, when used by an operator, the client MUST supply the\n         \"job-message-from-operator\"
    as (one of the) explicit attributes\n         being set on the Job object with
    the Set-Job-Attributes\n         operation.\n      *: The Printer MUST support
    the \"job-hold-until\" operation\n         attribute if it supports the \"job-hold-until\"
    Job Template\n         attribute.  For the Reprocess-Job operation, the client
    can\n         hold the job and then modify the job before releasing it to\n         be
    processed.\n     **: In [RFC2911], the \"message\" operation attribute is defined
    to\n         contain a message to the operator, but [RFC2911] does not\n         define
    a Job Description attribute to store the message.\n"
  title: 6.  Use of Operation Attributes That Are Messages from the Operator
- contents:
  - "7.  New Printer Description Attributes\n   The following new Printer Description
    attributes are needed to\n   support the new operations defined in this document
    and the concepts\n   of Printer Fan-Out (see section 10).\n"
  - contents:
    - "7.1.  subordinate-printers-supported (1setOf uri)\n   This Printer attribute
      is REQUIRED if an implementation supports\n   Subordinate Printers (see section
      10) and contains the URIs of the\n   immediate Subordinate Printer object(s)
      associated with this Printer\n   object.  Each Non-Leaf Printer object MUST
      support this Printer\n   Description attribute.  A Leaf Printer object either
      does not support\n   the \"subordinate-printers-supported\" attribute or does
      so with the\n   'no-value' out-of-band value (see [RFC2911], section 4.1), depending\n
      \  on the implementation.\n   The precise format of the Subordinate Printer
      URIs is implementation\n   dependent (see section 10.4).\n   If the Printer
      object does not have an associated Output Device, the\n   Printer MAY automatically
      copy the value of the Subordinate Printer\n   object's \"printer-name\" attribute
      to the Job object's \"output-\n   device-assigned\" attribute (see [RFC2911],
      section 4.3.13).  The\n   \"output-device-assigned\" Job attribute identifies
      the Output Device\n   to which the Printer object has assigned a job; for example,
      when a\n   single Printer object is supporting Device Fan-Out or Printer Fan-\n
      \  Out.\n"
    title: 7.1.  subordinate-printers-supported (1setOf uri)
  - contents:
    - "7.2.  parent-printers-supported (1setOf uri)\n   This Printer attribute is
      REQUIRED if an implementation supports\n   Subordinate Printers (see section
      10) and contains the URI of the\n   Non-Leaf printer object(s) for which this
      Printer object is the\n   immediate Subordinate; i.e., this Printer's immediate
      \"parent\" or\n   \"parents\".  Each Subordinate Printer object MUST support
      this Printer\n   Description attribute.  A Printer that has no parents either
      does not\n   support the \"parent-printers-supported\" attribute or does so
      with the\n   'no-value' out-of-band value (see [RFC2911], section 4.1), depending\n
      \  on the implementation.\n"
    title: 7.2.  parent-printers-supported (1setOf uri)
  title: 7.  New Printer Description Attributes
- contents:
  - "8.  Additional Values for the \"printer-state-reasons\" Printer\n    Description
    Attribute\n   This section defines additional values for the \"printer-state-\n
    \  reasons\" Printer Description attribute.\n"
  - contents:
    - "8.1.  'hold-new-jobs' Value\n   'hold-new-jobs': The operator has issued the
      Hold-New-Jobs operation\n      (see section 3.3.1) or other means, but the output-device(s)
      are\n      taking an appreciable time to stop.  Later, when all output has\n
      \     stopped, the \"printer-state\" becomes 'stopped', and the 'paused'\n      value
      replaces the 'moving-to-paused' value in the \"printer-\n      state-reasons\"
      attribute.  This value MUST be supported if the\n      Hold-New-Jobs operation
      is supported and the implementation takes\n      significant time to pause a
      device in certain circumstances.\n"
    title: 8.1.  'hold-new-jobs' Value
  - contents:
    - "8.2.  'deactivated' Value\n   'deactivated':  A client has issued a Deactivate-Printer
      operation\n      for the Printer object (see section 3.4.1), and the Printer
      is in\n      the process of becoming deactivated or has become deactivated.\n
      \     The Printer MUST reject all requests except for Activate-Printer,\n      queries
      (Get-Printer-Attributes, Get-Job-Attributes, Get-Jobs,\n      etc.), Send-Document,
      and Send-URI (so that partial job submission\n      can be completed; see section
      3.1.1), and then return the\n      'server-error-service-unavailable' status
      code.\n"
    title: 8.2.  'deactivated' Value
  title: 8.  Additional Values for the "printer-state-reasons" Printer
- contents:
  - "9.  Additional Values for the \"job-state-reasons\" Job Description\n    Attribute\n
    \  This section defines additional values for the \"job-state-reasons\"\n   Job
    Description attribute.\n"
  - contents:
    - "9.1.  'job-suspended' Value\n   'job-suspended':  While job processing has
      been suspended by the\n      Suspend-Current-Job operation, other jobs can be
      processed on the\n      Printer.  The Job can be resumed with the Resume-Job
      operation,\n      which removes this value.\n"
    title: 9.1.  'job-suspended' Value
  title: 9.  Additional Values for the "job-state-reasons" Job Description
- contents:
  - "10.  Use of the Printer Object to Represent IPP Printer Fan-Out and IPP\n     Printer
    Fan-In\n   This section defines how the Printer object MAY be used to represent\n
    \  IPP Printer Fan-Out and IPP Printer Fan-In.  In Fan-Out, an IPP\n   Printer
    is used to represent other IPP Printer objects.  In Fan-In,\n   several IPP Printer
    objects are used to represent another IPP Printer\n   object.\n"
  - contents:
    - "10.1.  IPP Printer Fan-Out\n   The IPP/1.1 Model and Semantics introduces the
      semantic concept of an\n   IPP Printer object that represents more than one
      Output Device (see\n   [RFC2911], section 2.1).  This concept is called \"Output
      Device Fan-\n   Out\".  However, with Fan-Out there was no way to represent
      the\n   individual states of the Output Devices or to perform operations on
      a\n   specific Output Device.  This document generalizes the semantics of\n
      \  the Printer object to represent Subordinate Fan-Out Output Devices\n   such
      as IPP Printer objects.  This concept is called \"Printer object\n   Fan-Out\".
      \ A Printer object that has a Subordinate Printer object is\n   called a Non-Leaf
      Printer object.  Thus, a Non-Leaf Printer object\n   supports one or more Subordinate
      Printer objects in order to\n   represent Printer object Fan-Out.  A Printer
      object that does not\n   have any Subordinate Printer objects is called a Leaf
      Printer object.\n   Each Non-Leaf Printer object submits jobs to its immediate\n
      \  Subordinate Printers and otherwise controls the Subordinate Printers\n   by
      using IPP or other protocols.  Whether pending jobs are kept in\n   the Non-Leaf
      Printer until a Subordinate Printer can accept them or\n   are kept in the Subordinate
      Printers depends on implementation and/or\n   configuration policy.  Furthermore,
      a Subordinate Printer object MAY,\n   in turn, have Subordinate Printer objects.
      \ Thus a Printer object can\n   be both a Non-Leaf Printer and a Subordinate
      Printer.\n   A Subordinate Printer object MUST be a conforming Printer object,
      so\n   it MUST support all of the REQUIRED [RFC2911] operations and\n   attributes.
      \ However, with access control, the Subordinate Printer\n   MAY be configured
      so that end-user clients are not permitted to\n   perform any operations (or
      just Get-Printer-Attributes) while one or\n   more Non-Leaf Printer object(s)
      are permitted to perform any\n   operation.\n"
    title: 10.1.  IPP Printer Fan-Out
  - contents:
    - "10.2.  IPP Printer Fan-In\n   The IPP/1.1 Model and Semantics did not preclude
      the semantic concept\n   of multiple IPP Printer objects that represent a single
      Output Device\n   (see [RFC2911], section 2.1).  However, there was no way for
      the\n   client to determine whether there was a Fan-In configuration; nor was\n
      \  there a way to perform operations on the Subordinate device.  This\n   specification
      generalizes the semantics of the Printer object to\n   allow several Non-Leaf
      IPP Printer objects to represent a single\n   Subordinate Printer object.  Thus
      a Non-Leaf Printer object MAY share\n   a Subordinate Printer object with one
      or more other Non-Leaf Printer\n   objects in order to represent IPP Printer
      Fan-In.\n   As with Fan-Out (see section 10.1), when a Printer object is a Non-\n
      \  Leaf Printer, it MUST NOT have an associated Output Device.  As with\n   Fan-Out,
      a Leaf Printer object has one or more associated Output\n   Devices.  As with
      Fan-Out, the Non-Leaf Printer objects submit jobs\n   to their Subordinate Printer
      objects and otherwise control the\n   Subordinate Printer.  As with Fan-Out,
      whether pending jobs are kept\n   in the Non-Leaf Printers until the Subordinate
      Printer can accept\n   them or are kept in the Subordinate Printer depends on
      the\n   implementation and/or configuration policy.\n"
    title: 10.2.  IPP Printer Fan-In
  - contents:
    - "10.3.  Printer Object Attributes Used to Represent Printer Fan-Out and\n       Printer
      Fan-In\n   The following Printer Description attributes are defined to represent\n
      \  the relationship between Printer object(s) and their Subordinate\n   Printer
      object(s):\n      1. \"subordinate-printers-supported\" (1setOf uri) - Contains
      the\n         URI of the immediate Subordinate Printer object(s).\n      2.
      \"parent-printers-supported (1setOf uri) - Contains the URI of\n         the
      Non-Leaf printer object(s) for which this Printer object is\n         the immediate
      Subordinate; i.e., this Printer's immediate\n         \"parent\" or \"parents\".\n"
    title: 10.3.  Printer Object Attributes Used to Represent Printer Fan-Out and
  - contents:
    - "10.4.  Subordinate Printer URI\n   Each Subordinate Printer object has a URI
      used as the target of each\n   operation on the Subordinate Printer.  The means
      to configure URIs\n   for Subordinate Printer objects is implementation-dependent,
      as are\n   all URIs.  However, there are two distinct approaches:\n      a.
      When the implementation seeks to make sure that no operation on\n         a
      Subordinate Printer object \"sneaks by\" the parent Printer\n         object
      (or that no Subordinate Printer is fronting for a device\n         that is not
      networked), the host part of the URI specifies the\n         host of the parent
      Printer.  Then the parent Printer object can\n         easily reflect the state
      of the Subordinate Printer objects in\n         the parent's Printer object
      state and state reasons as the\n         operation passes \"through\" the parent
      Printer object.\n      b. When the Subordinate Printer is networked and the\n
      \        implementation allows operations to go directly to the\n         Subordinate
      Printer (with proper access control) without\n         knowledge of the parent
      Printer object, the host part of the\n         URI is different from the host
      part of the parent Printer\n         object.  In this a case, the parent Printer
      object MAY keep its\n         \"printer-state\" and \"printer-state-reasons\"
      up to date, either\n         by polling the Subordinate Printer object or by
      subscribing to\n         events with the Subordinate Printer object (see [RFC3995]
      for\n         means to subscribe to event notification when the Subordinate\n
      \        Printer object supports IPP notification).  Alternatively, the\n         parent
      Printer MAY wait until its \"printer-state\" and\n         \"printer-state-reasons\"
      attributes are queried and then query\n         all its Subordinate Printers
      in order to return the correct\n         values.\n"
    title: 10.4.  Subordinate Printer URI
  - contents:
    - "10.5.  Printer Object Attributes Used to Represent Output Device Fan-Out\n
      \  Only Leaf IPP Printer objects are allowed to have one or more\n   associated
      Output Devices.  Each Leaf Printer object MAY support the\n   \"output-devices-supported\"
      (1setOf name(127)) to indicate the user-\n   friendly name(s) of the Output
      Device(s) that the Leaf Printer object\n   represents.  It is RECOMMENDED that
      each Leaf Printer object have\n   only one associated Output Device, so that
      the individual Output\n   Devices can be represented completely and controlled
      completely by\n   clients.  In other words, the Leaf Printer's \"output-devices-\n
      \  supported\" attribute SHOULD have only one value.\n   Non-Leaf Printer MUST
      NOT have associated Output Devices.  However, a\n   Non-Leaf Printer SHOULD
      support an \"output-devices-supported\" (1setOf\n   name(127)) Printer Description
      attribute that contains all the values\n   of its immediate Subordinate Printers.
      \ As these Subordinate Printers\n   MAY be Leaf or Non-Leaf, the same rules
      apply to them.  Thus any\n   Non-Leaf Printer SHOULD have an \"output-devices-supported\"
      (1setOf\n   name(127)) attribute that contains all the values of the Output\n
      \  Devices associated with Leaf Printers of its complete sub-tree.\n   When
      a configuration of Printers and Output Devices is added, moved,\n   or changed,
      there can be moments when the tree structure is not\n   consistent; i.e., times
      when a Non-Leaf Printer's \"subordinate-\n   printers-supported\" does not agree
      with the Subordinate Printer's\n   \"parent-printers-supported\".  Therefore,
      the operator SHOULD first\n   Deactivate all Printers being configured in this
      way, update all\n   pointer attributes, and then reactivate them.  A useful
      client tool\n   would validate a tree structure before Activating the Printers\n
      \  involved.\n"
    title: 10.5.  Printer Object Attributes Used to Represent Output Device Fan-Out
  - contents:
    - "10.6.  Figures to Show All Possible Configurations\n   Figures 1, 2, and 3
      are taken from [RFC2911] to show the\n   configurations possible with IPP/1.0
      and IPP/1.1 where all Printer\n   objects are Leaf Printer objects.  The remaining
      figures show\n   additional configurations using Non-Leaf and Leaf Printer objects.\n
      \  Legend:\n   ----> indicates a network protocol with the direction of its
      requests\n   ##### indicates a Printer object that is either\n         embedded
      in an Output Device, or\n         hosted in a server.\n         The Printer
      object might or might not be capable\n         of queuing/spooling.\n   any
      \  indicates any network protocol or direct\n         connect, including IPP.\n
      \                                                 Output Device\n                                                +---------------+\n
      \                                               |  ###########  |\n    O   +--------+
      \                             |  # (Leaf)  #  |\n   /|\\  | client |------------IPP----------------->#
      Printer #  |\n   / \\  +--------+                              |  # Object  #
      \ |\n                                                |  ###########  |\n                                                +---------------+\n
      \                  Figure 1.  Embedded Printer Object\n                             ###########
      \         Output Device\n    O   +--------+           # (Leaf)  #        +---------------+\n
      \  /|\\  | client |---IPP----># Printer #---any->|               |\n   / \\
      \ +--------+           # object  #        |               |\n                             ###########
      \       +---------------+\n                   Figure 2.  Hosted Printer Object\n
      \                                               +---------------+\n                                                |
      \              |\n                                             +->| Output Device
      |\n                             ########### any/   |               |\n    O
      \  +--------+           # (Leaf)  #   /    +---------------+\n   /|\\  | client
      |---IPP----># Printer #--*\n   / \\  +--------+           # Object  #   \\    +---------------+\n
      \                            ########### any\\   |               |\n                                             +->|
      Output Device |\n                                                |               |\n
      \                                               +---------------+\n                   Figure
      3.  Output Device Fan-Out\n                             ###########           ###########\n
      \   O   +--------+           # Non-Leaf#           # subord. #\n   /|\\  | client
      |---IPP----># Printer #---IPP----># Printer #\n   / \\  +--------+           #
      object  #           # object  #\n                             ###########           ###########\n
      \  The Subordinate Printer can be a Non-Leaf Printer, as in Figures 4\n   through
      6, or can be a Leaf Printer, as in Figures 1 through 3.\n                   Figure
      4.  Chained IPP Printer Objects\n                   +------IPP--------------------->###########\n
      \                 /                           +---># subord. #\n                 /
      \                          /     # Printer #\n                /            ###########
      \  IPP     # object  #\n    O   +--------+           # Non-Leaf#   /       ###########\n
      \  /|\\  | client |---IPP----># Printer #--*\n   / \\  +--------+           #
      object  #   \\\n                \\            ###########   IPP     ###########\n
      \                \\                           \\     # subord. #\n                  \\
      \                          +---># Printer #\n                   +------IPP--------------------->#
      object  #\n                                                   ###########\n
      \  The Subordinate Printer can be a Non-Leaf Printer, as in Figures 4\n   through
      6, or can be a Leaf Printer, as in Figures 1 through 3.\n                   Figure
      5.  IPP Printer Object Fan-Out\n                             ###########\n                             #
      Non-Leaf#\n                        +---># Printer #-+\n                       /
      \    # object  #  \\\n                     IPP     ###########   \\       ###########\n
      \   O   +--------+   /                      +-IPP-># subord. #\n   /|\\  | client
      |--+-----------IPP---------------># Printer #\n   / \\  +--------+   \\                      +-IPP->#
      object  #\n                     IPP     ###########   /       ###########\n
      \                      \\     # Non-Leaf#  /\n                        +--->#
      Printer #-+\n                             # object  #\n                             ###########\n
      \  The Subordinate Printer can be a Non-Leaf Printer, as in Figures 4\n   through
      6, or can be a Leaf Printer, as in Figures 1 through 3.\n                    Figure
      6.  IPP Printer Object Fan-In\n"
    title: 10.6.  Figures to Show All Possible Configurations
  - contents:
    - "10.7.  Forwarding Requests\n   This section describes the forwarding of Job
      and Printer requests to\n   Subordinate Printer objects.\n"
    - contents:
      - "10.7.1.  Forwarding Requests that Affect Printer Objects\n   In Printer Fan-Out,
        Printer Fan-In, and Chained Printers, the Non-\n   Leaf IPP Printer object
        MUST NOT forward the operations that affect\n   Printer objects to its Subordinate
        Printer objects.  If a client\n   seeks to explicitly target a Subordinate
        Printer, the client MUST\n   specify the URI of the Subordinate Printer.  The
        client can determine\n   the URI of any Subordinate Printers by querying the
        Printer's\n   \"subordinate-printers-supported (1setOf uri) attribute (see
        section\n   7.1).\n   Table 7 lists the operations that affect Printer objects
        and the\n   forwarding behavior that a Non-Leaf Printer MUST exhibit to its\n
        \  immediate Subordinate Printers.  Operations that affect jobs have a\n   different
        forwarding rule (see section 10.7.2 and Table 8):\n   Table 7.  Forwarding
        Operations that Affect Printer Objects\n      Printer Operation     Non-Leaf
        Printer Action\n     ---------------------------------------------------------------\n
        \   Printer Operations:\n      Enable-Printer      MUST NOT forward to any
        of its Subordinate\n                          Printers\n      Disable-Printer
        \    MUST NOT forward to any of its Subordinate\n                          Printers\n
        \     Hold-New-Jobs       MUST NOT forward to any of its Subordinate\n                          Printers\n
        \     Release-Held-New-   MUST NOT forward to any of its Subordinate\n      Jobs
        \               Printers\n      Deactivate-Printer  MUST NOT forward to any
        of its Subordinate\n                          Printers\n      Activate-Printer
        \   MUST NOT forward to any of its Subordinate\n                          Printers\n
        \     Restart-Printer     MUST NOT forward to any of its Subordinate\n                          Printers\n
        \     Shutdown-Printer    MUST NOT forward to any of its Subordinate\n                          Printers\n
        \     Startup-Printer     MUST NOT forward to any of its Subordinate\n                          Printers\n
        \   IPP/1.1 Printer       See [RFC2911]\n    Operations:\n      Get-Printer-
        \       MUST NOT forward to any of its Subordinate\n      Attributes          Printers\n
        \     Pause-Printer       MUST NOT forward to any of its Subordinate\n                          Printers\n
        \     Resume-Printer      MUST NOT forward to any of its Subordinate\n                          Printers\n
        \   Set Operations:       See [RFC3380]\n      Set-Printer-        MUST NOT
        forward to any of its Subordinate\n      Attributes          Printers\n"
      title: 10.7.1.  Forwarding Requests that Affect Printer Objects
    - contents:
      - "10.7.2.  Forwarding Requests that Affect Jobs\n   Unlike Printer Operations
        that only affect Printer objects (see\n   section 10.7.1), a Non-Leaf Printer
        object MUST forward operations\n   that directly affect jobs to the appropriate
        Job object(s) in one or\n   more of its immediate Subordinate Printer objects.
        \ Forwarding is\n   REQUIRED since the purpose of this Job operation is to
        affect the\n   indicated job, which may have been forwarded itself.  This
        forwarding\n   MAY be immediate or queued, depending on the operation and
        the\n   implementation.  For example, a Non-Leaf Printer object MAY\n   queue/spool
        jobs, feeding a job at a time to its Subordinate\n   Printer(s), or MAY forward
        jobs immediately to one of its Subordinate\n   Printers.  In either case,
        the Non-Leaf Printer object forwards Job\n   Creation operations to one of
        its Subordinate Printers.  Only the\n   time of forwarding of the Job Creation
        operations depends on whether\n   the policy is to queue/spool jobs in the
        Non-Leaf Printer or the\n   Subordinate Printer.\n   When a Non-Leaf Printer
        object creates a Job object in its\n   Subordinate Printer, whether that Non-Leaf
        Printer object keeps a\n   fully formed Job object or just keeps a mapping
        from the \"job-ids\"\n   that it assigned to those assigned by its Subordinate
        Printer object\n   is IMPLEMENTATION-DEPENDENT.  In either case, the Non-Leaf
        Printer\n   MUST be able to accept and carry out future Job operations that\n
        \  specify the \"job-id\" that the Non-Leaf Printer assigned and returned\n
        \  to the job submitting client.\n   Table 8 lists the operations that directly
        affect jobs and the\n   forwarding behavior that a Non-Leaf Printer MUST exhibit
        to its\n   Subordinate Printers.\n   Table 8.  Forwarding Operations that
        Affect Jobs Objects\n      Operation         Non-Leaf Printer action\n    ---------------------------------------------------------------\n
        \   Job operations:\n      Reprocess-Job     MUST forward to the appropriate
        Job in one of\n                        its Subordinate Printers\n      Cancel-Current-
        \  MUST NOT forward\n      Job\n      Resume-Job        MUST forward to the
        appropriate Job in one of\n                        its Subordinate Printers\n
        \     Promote-Job       MUST forward to the appropriate Job in one of\n                        its
        Subordinate Printers\n    IPP/1.1 Printer\n    operations:\n      Print-Job
        \        MUST forward immediately or queue to the\n                        appropriate
        Subordinate Printer\n      Print-URI         MUST forward immediately or queue
        to the\n                        appropriate Subordinate Printer\n      Validate-Job
        \     MUST forward to the appropriate Subordinate\n                        Printer\n
        \     Create-Job        MUST forward immediately or queue to the\n                        appropriate
        Subordinate Printer\n      Get-Jobs          MUST forward to all its Subordinate
        Printers\n      Purge-Jobs        MUST forward to all its Subordinate Printers\n
        \   IPP/1.1 Job\n    operations:\n      Send-Document     MUST forward immediately
        or queue to the\n                        appropriate Job in one of its Subordinate\n
        \                       Printers\n      Send-URI          MUST forward immediately
        or queue to the\n                        appropriate Job in one of its Subordinate\n
        \                       Printers\n      Cancel-Job        MUST forward to
        the appropriate Job in one of\n                        its Subordinate Printers\n
        \     Get-Job-          MUST forward to the appropriate Job in one of\n      Attributes
        \       its Subordinate Printers if the Non-Leaf\n                        Printer
        doesn't know the complete status of the\n                        Job object\n
        \     Hold-Job          MUST forward to the appropriate Job in one of\n                        its
        Subordinate Printers\n      Release-Job       MUST forward to the appropriate
        Job in one of\n                        its Subordinate Printers\n      Restart-Job
        \      MUST forward to the appropriate Job in one of\n                        its
        Subordinate Printers\n    IPP Set operations: See [RFC3380]\n      Set-Job-
        \         MUST forward to the appropriate Job in one of\n      Attributes
        \       its Subordinate Printers\n   When a Printer receives a request that
        REQUIRES forwarding, it does\n   so on a \"best efforts basis\" and returns
        a response to its client\n   without waiting for responses from any of its
        Subordinate Printers.\n   Such forwarded requests could fail.\n"
      title: 10.7.2.  Forwarding Requests that Affect Jobs
    title: 10.7.  Forwarding Requests
  - contents:
    - "10.8.  Additional Attributes to Help with Fan-Out\n   The following operation
      and Job Description attributes are defined to\n   help represent Job relationships
      for Fan-Out and forwarding of jobs.\n"
    - contents:
      - "10.8.1.  output-device-assigned (name(127)) Job Description Attribute -\n
        \        from [RFC2911]\n   [RFC2911] defines \"output-device-assigned\" as
        follows:  \"This\n   attribute identifies the Output Device to which the Printer
        object\n   has assigned this job.  If an Output Device implements an embedded\n
        \  Printer object, the Printer object NEED NOT set this attribute.  If a\n
        \  print server implements a Printer object, the value MAY be empty\n   (zero-length
        string) or not returned until the Printer object assigns\n   an Output Device
        to the job.  This attribute is particularly useful\n   when a single Printer
        object supports multiple devices (so called\n   \"Device Fan-Out\" see [RFC2911]
        section 2.1).\"  See also section 10.1\n   in this specification.\n"
      title: 10.8.1.  output-device-assigned (name(127)) Job Description Attribute
        -
    - contents:
      - "10.8.2.  original-requesting-user-name (name(MAX)) Operation and Job\n         Description
        Attribute\n   The operation attribute containing the user name of the original\n
        \  user; i.e., corresponding to the \"requesting-user-name\" operation\n   attribute
        (see [RFC2911], section 3.2.1.1) that the original client\n   supplied to
        the first Printer object.  The Printer copies the\n   \"original-requesting-user-name\"
        operation attribute to the\n   corresponding Job Description attribute.\n"
      title: 10.8.2.  original-requesting-user-name (name(MAX)) Operation and Job
    - contents:
      - "10.8.3.  requesting-user-name (name(MAX)) Operation Attribute -\n         Additional
        Semantics\n   The IPP/1.1 \"requesting-user-name\" operation attribute (see
        [RFC2911]\n   section 3.2.1.1) is updated by each client to be itself on each
        hop;\n   i.e., the \"requesting-user-name\" represents the client forwarding
        the\n   request, not the original client.\n"
      title: 10.8.3.  requesting-user-name (name(MAX)) Operation Attribute -
    - contents:
      - "10.8.4.  job-originating-user-name (name(MAX)) Job Description Attribute\n
        \        - Additional Semantics\n   The \"job-originating-user-name\" Job
        Description attribute (see\n   [RFC2911], section 4.3.6) remains as the authenticated
        original user,\n   not the parent Printer's authenticated host, and is forwarded
        by each\n   client without changing the value.\n"
      title: 10.8.4.  job-originating-user-name (name(MAX)) Job Description Attribute
    title: 10.8.  Additional Attributes to Help with Fan-Out
  title: 10.  Use of the Printer Object to Represent IPP Printer Fan-Out and IPP
- contents:
  - "11.  Conformance Requirements\n   The Job and Printer Administrative operations
    defined in this\n   document are OPTIONAL operations.  However, some operations
    MUST be\n   implemented if others are implemented, as shown in Table 9.\n   Table
    9.  Conformance Requirement Dependencies for Operations\n   Operations REQUIRED
    \            If any of these operations are\n                                   supported:\n
    \  --------------------------------------------------------------------\n   Enable-Printer
    \                 Disable-Printer\n   Disable-Printer                 Enable-Printer\n
    \  Pause-Printer                   Resume-Printer\n   Resume-Printer                  Pause-Printer,\n
    \                                    Pause-Printer-After-Current-Job\n   Hold-New-Jobs
    \                  Release-Held-New-Jobs\n   Release-Held-New-Jobs           Hold-New-Jobs\n
    \  Activate-Printer,               Deactivate-Printer\n     Disable-Printer,\n
    \    Pause-Printer-After-Current-Job\n   Deactivate-Printer,             Activate-Printer\n
    \    Enable-Printer,\n     Resume-Printer\n   Restart-Printer                 none\n
    \  Shutdown-Printer                none\n   Startup-Printer                 none\n
    \  Reprocess-Job                   none\n   Cancel-Current-Job              none\n
    \  Resume-Job                      Suspend-Current-Job\n   Suspend-Current-Job
    \            Resume-Job\n   Promote-Job                     none\n   Schedule-Job-After
    \             Promote-Job\n   Tables 10 and 11 list the \"printer-state-reasons\"
    and \"job-state-\n   reasons\" values that are REQUIRED if the indicated operations
    are\n   supported.\n   Table 10.  Conformance Requirement Dependencies for\n              \"printer-state-reasons\"
    Values\n   \"printer-state-       Conformance   If any of the following Printer\n
    \  reasons\" values:      Requirement   Operations are supported:\n   --------------------------------------------------------------------\n
    \  'paused'              REQUIRED      Pause-Printer,\n                                       Pause-Printer-After-Current-Job,\n
    \                                      or Deactivate-Printer\n   'hold-new-jobs'
    \      REQUIRED      Hold-New-Jobs\n   'moving-to-paused'    OPTIONAL      Pause-Printer,\n
    \                                      Pause-Printer-After-Current-Job,\n                                       Deactivate-Printer\n
    \  'deactivated'         REQUIRED      Deactivate-Printer\n   Table 11.  Conformance
    Requirement Dependencies for \"job-state-\n              reasons\" Values\n   \"job-state-reasons\"
    \  Conformance   If any of the following Job\n   values:               Requirement
    \  operations are supported:\n   'job-suspended'       REQUIRED      Suspend-Current-Job\n
    \  'printer-stopped'     REQUIRED      Always REQUIRED\n"
  title: 11.  Conformance Requirements
- contents:
  - "12.  Normative References\n   [RFC2119] Bradner, S., \"Key words for use in RFCs
    to Indicate\n             Requirement Levels\", BCP 14, RFC 2119, March 1997.\n
    \  [RFC2246] Dierks, T. and C. Allen, \"The TLS Protocol Version 1.0\",\n             RFC
    2246, January 1999.\n   [RFC2616] Fielding,  R., Gettys, J., Mogul, J., Frystyk,
    H.,\n             Masinter, L., Leach, P., and T. Berners-Lee, \"Hypertext\n             Transfer
    Protocol -- HTTP/1.1\", RFC 2616, June 1999.\n   [RFC2910] Herriot, R., Butler,
    S., Moore, P., Turner, R., and J.\n             Wenn, \"Internet Printing Protocol/1.1:
    Encoding and\n             Transport\", RFC 2910, September 2000.\n   [RFC2911]
    Hastings, T., Herriot, R., deBry, R., Isaacson, S., and P.\n             Powell,
    \"Internet Printing Protocol/1.1: Model and\n             Semantics\", RFC 2911,
    September 2000.\n   [RFC3380] Hastings, T., Herriot, R., Kugler, C., and H. Lewis,\n
    \            \"Internet Printing Protocol (IPP): Job and Printer Set\n             Operations\",
    RFC 3380, September 2002.\n"
  title: 12.  Normative References
- contents:
  - "13.  Informative References\n   [RFC2567] Wright, F., \"Design Goals for an Internet
    Printing\n             Protocol\", RFC 2567, April 1999.\n   [RFC2568] Zilles,
    S., \"Rationale for the Structure of the Model and\n             Protocol for
    the Internet Printing Protocol\", RFC 2568,\n             April 1999.\n   [RFC2569]
    Herriot, R., Hastings, T., Jacobs, N., and J. Martin,\n             \"Mapping
    between LPD and IPP Protocols\", RFC 2569, April\n             1999.\n   [RFC3196]
    Hastings, T., Manros, C., Zehler, P., Kugler, C., and H.\n             Holst,
    \"Internet Printing Protocol/1.1: Implementor's\n             Guide\", RFC 3196,
    November 2001.\n   [RFC3239] Kugler, C., Lewis, H., and T. Hastings, \"Internet
    Printing\n             Protocol (IPP): Requirements for Job, Printer, and Device\n
    \            Administrative Operations\", RFC 3239, February 2002.\n   [RFC3995]
    Herriot, R. and T. Hastings, \"Internet Printing Protocol\n             (IPP):
    Event Notifications and Subscriptions\", RFC 3995,\n             February 2005.\n"
  title: 13.  Informative References
- contents:
  - "14.  IANA Considerations\n   This section contains the registration information
    that IANA added to\n   the IPP Registry according to the procedures defined in
    [RFC2911],\n   section 6, to cover the definitions in this document.  The resulting\n
    \  registrations have been published as additions to the\n   http://www.iana.org/assignments/ipp-registrations
    file.\n"
  - contents:
    - "14.1.  Attribute Registrations\n   The following table lists all the attributes
      defined in this\n   document.  These have been registered according to the procedures
      in\n   [RFC2911], section 6.2.\n   Name                                          Reference
      \ Section\n   --------------------------------------        ---------  -------\n
      \  Job Description attributes:\n   original-requesting-user-name (name(MAX))
      \    [RFC3998]  10.8.2\n   Printer Description attributes:\n   subordinate-printers-supported
      (1setOf uri)   [RFC3998]  7.1\n   parent-printers-supported (1setOf uri)        [RFC3998]
      \ 7.2\n   Operation attributes:\n   original-requesting-user-name (name(MAX))
      \    [RFC3998]  10.8.2\n"
    title: 14.1.  Attribute Registrations
  - contents:
    - "14.2.  Attribute Value Registrations\n   This section lists the additional
      values defined in this document for\n   existing attributes.\n   Attribute\n
      \    Value                                       Reference  Section\n     ---------------------
      \                      ---------  -------\n   job-state-reasons (1setOf type2
      keyword)\n     job-suspended                               [RFC3998]  9.1\n
      \  printer-state-reasons (1setOf type2 keyword)\n     hold-new-jobs                               [RFC3998]
      \ 8.1\n     deactivated                                 [RFC3998]  8.2\n"
    title: 14.2.  Attribute Value Registrations
  - contents:
    - "14.3.  Additional Enum Attribute Value Registrations\n   The following table
      lists all the new enum attribute values defined\n   in this document.  These
      have been registered according to the\n   procedures in [RFC2911], section 6.1.\n
      \  Attribute (attribute syntax)\n     Value    Name                                  Reference
      \  Section\n   -------    --------------------                  ---------   -------\n
      \  operations-supported (1setOf type2 enum)         [RFC2911]   4.4.1\n     0x0022
      \  Enable-Printer                        [RFC3998]   3\n     0x0023   Disable-Printer
      \                      [RFC3998]   3\n     0x0024   Pause-Printer-After-Current-Job
      \      [RFC3998]   3\n     0x0025   Hold-New-Jobs                         [RFC3998]
      \  3\n     0x0026   Release-Held-New-Jobs                 [RFC3998]   3\n     0x0027
      \  Deactivate-Printer                    [RFC3998]   3\n     0x0028   Activate-Printer
      \                     [RFC3998]   3\n     0x0029   Restart-Printer                       [RFC3998]
      \  3\n     0x002A   Shutdown-Printer                      [RFC3998]   3\n     0x002B
      \  Startup-Printer                       [RFC3998]   3\n     0x002C   Reprocess-Job
      \                        [RFC3998]   4\n     0x002D   Cancel-Current-Job                    [RFC3998]
      \  4\n     0x002E   Suspend-Current-Job                   [RFC3998]   4\n     0x002F
      \  Resume-Job                            [RFC3998]   4\n     0x0030   Promote-Job
      \                          [RFC3998]   4\n     0x0031   Schedule-Job-After                    [RFC3998]
      \  4\n"
    title: 14.3.  Additional Enum Attribute Value Registrations
  - contents:
    - "14.4.  Operation Registrations\n   The following table lists all the operations
      defined in this\n   document.  These have been registered according to the procedures
      in\n   [RFC2911], section 6.4.\n   Name                                         Reference
      \  Section\n   -----------------------------                ---------   -------\n
      \  Activate-Printer                             [RFC3998]   3.4.2\n   Cancel-Current-Job
      \                          [RFC3998]   4.2\n   Deactivate-Printer                           [RFC3998]
      \  3.4.1\n   Disable-Printer                              [RFC3998]   3.1.1\n
      \  Enable-Printer                               [RFC3998]   3.1.2\n   Hold-New-Jobs
      \                               [RFC3998]   3.3.1\n   Pause-Printer-After-Current-Job
      \             [RFC3998]   3.2.1\n   Promote-Job                                  [RFC3998]
      \  4.4.1\n   Release-Held-New-Jobs                        [RFC3998]   3.3.2\n
      \  Reprocess-Job                                [RFC3998]   4.1\n   Restart-Printer
      \                             [RFC3998]   3.5.1\n   Resume-Job                                   [RFC3998]
      \  4.3.2\n   Schedule-Job-After                           [RFC3998]   4.4.2\n
      \  Shutdown-Printer                             [RFC3998]   3.5.2\n   Startup-Printer
      \                             [RFC3998]   3.5.3\n   Suspend-Current-Job                          [RFC3998]
      \  4.3.1\n"
    title: 14.4.  Operation Registrations
  - contents:
    - "14.5.  Status Code Registrations\n   The following table lists the status code
      defined in this document.\n   This has been registered according to the procedures
      in [RFC2911],\n   section 6.6.\n   Value   Name                                  Reference
      \ Section\n   ------  ------------------------              ---------  -------\n
      \  0x0000:0x00FF - \"successful\"\n   none at this time\n   0x0100:0x01FF -
      \"informational\"\n   none at this time\n   0x0300:0x03FF - \"redirection\"
      \                See RFC 2911 Errata\n   none at this time\n   0x0400:0x04FF
      - \"client-error\"\n   none at this time\n   0x0500:0x05FF - \"server-error\"\n
      \  0x050A  server-error-printer-is-deactivated   [RFC3998]  5.1\n"
    title: 14.5.  Status Code Registrations
  title: 14.  IANA Considerations
- contents:
  - "15.  Internationalization Considerations\n   This document has the same localization
    considerations as [RFC2911].\n"
  title: 15.  Internationalization Considerations
- contents:
  - "16.  Security Considerations\n   The IPP Model and Semantics document [RFC2911]
    discusses high level\n   security requirements (Client Authentication, Server
    Authentication,\n   and Operation Privacy).  Client Authentication is the mechanism
    by\n   which the client proves its identity to the server in a secure\n   manner.
    \ Server Authentication is the mechanism by which the server\n   proves its identity
    to the client in a secure manner.  Operation\n   Privacy is defined as a mechanism
    for protecting operations from\n   eavesdropping.\n   Printer operations defined
    in this specification (see section 3), as\n   well as Pause-Printer, Resume-Printer,
    and Purge-Job (defined in\n   [RFC2911]) are intended for use by an operator and/or
    administrator.\n   Job operations defined in this specification (see section 4)
    and\n   Cancel-Job, Hold-Job, and Release-Job (defined in [RFC2911]) are\n   intended
    for use by the job owner, operator, or administrator of the\n   Printer object.
    \ These operator and administrator operations affect\n   service for all users.\n
    \  Inappropriate use of an administrative operation by an\n   unauthenticated
    end user can affect the quality of service for all\n   users.  Therefore, IPP
    Printer implementations MUST support both\n   successful certificate-based TLS
    [RFC2246] client authentication and\n   successful operator/administrator authorization
    (see [RFC2911],\n   sections 5.2.7 and 8, and [RFC2910]) to perform the administrative\n
    \  operations defined in this document.  [RFC2910] requires the IPP\n   Printer
    to support the minimum cipher suite specified for TLS/1.0.\n   The means for authorizing
    an operator or administrator of the Printer\n   object are outside the scope of
    this specification, RFC 2910, and RFC\n   2911.\n   The use of TLS and Client
    Authentication solves the Denial of\n   Service, Man in the Middle, and Masquerading
    security threats.\n"
  title: 16.  Security Considerations
- contents:
  - "17.  Summary of Base IPP Documents\n   The base set of IPP documents includes
    the following:\n      Design Goals for an Internet Printing Protocol [RFC2567]\n
    \     Rationale for the Structure and Model and Protocol for the\n      Internet
    Printing Protocol [RFC2568]\n      Internet Printing Protocol/1.1: Model and Semantics
    [RFC2911]\n      Internet Printing Protocol/1.1: Encoding and Transport [RFC2910]\n
    \     Internet Printing Protocol/1.1: Implementer's Guide [RFC3196]\n      Mapping
    between LPD and IPP Protocols [RFC2569]\n   \"Design Goals for an Internet Printing
    Protocol\" takes a broad look\n   at distributed printing functionality, and it
    enumerates real-life\n   scenarios that help clarify the features that have to
    be included in\n   a printing protocol for the Internet.  It identifies requirements
    for\n   three types of users: end users, operators, and administrators.  It\n
    \  calls out a subset of end user requirements that are satisfied in\n   IPP/1.0.
    \ A few OPTIONAL operator operations have been added to\n   IPP/1.1.\n   \"Rationale
    for the Structure and Model and Protocol for the Internet\n   Printing Protocol\"
    describes IPP from a high level view, defines a\n   roadmap for the various documents
    that form the suite of IPP\n   specification documents, and gives background and
    rationale for the\n   IETF working group's major decisions.\n   \"Internet Printing
    Protocol/1.1: Model and Semantics\" describes a\n   simplified model with abstract
    objects, their attributes, and their\n   operations that are independent of encoding
    and transport.  It\n   introduces a Printer and a Job object.  The Job object
    optionally\n   supports multiple documents per Job.  It also addresses security,\n
    \  internationalization, and directory issues.\n   \"Internet Printing Protocol/1.1:
    Encoding and Transport\" is a formal\n   mapping of the abstract operations and
    attributes defined in the\n   model document onto HTTP/1.1 [RFC2616].  It defines
    the encoding\n   rules for a new Internet MIME media type called \"application/ipp\".\n
    \  This document also defines the rules for transporting over HTTP a\n   message
    body whose Content-Type is \"application/ipp\".  This document\n   defines the
    'ippget' scheme for identifying IPP printers and jobs.\n   \"Internet Printing
    Protocol/1.1: Implementer's Guide\" gives insight\n   and advice to implementers
    of IPP clients and IPP objects.  It is\n   intended to help them understand IPP/1.1
    and some of the\n   considerations that may assist them in the design of their
    client\n   and/or IPP object implementations.  For example, a typical order of\n
    \  processing requests is given, including error checking.  Motivation\n   for
    some of the specification decisions is also included.\n   \"Mapping between LPD
    and IPP Protocols\" gives some advice to\n   implementers of gateways between
    IPP and LPD (Line Printer Daemon)\n   implementations.\n"
  title: 17.  Summary of Base IPP Documents
- contents:
  - "Authors' Addresses\n   Carl Kugler\n   IBM Corporation, 003G\n   6300 Diagonal
    Hwy\n   Boulder, CO 80301\n   Phone: (303) 924-5060\n   EMail:  kugler@us.ibm.com\n
    \  Tom Hastings, editor\n   Xerox Corporation\n   701 S Aviation Blvd.  ESAE 242\n
    \  El Segundo, CA  90245\n   Phone: 310-333-6413\n   Fax: 310-333-6342\n   EMail:
    hastings@cp10.es.xerox.com\n   Harry Lewis\n   IBM Corporation\n   6300 Diagonal
    Hwy\n   Boulder, CO 80301\n   Phone: (303) 924-5337\n   EMail: harryl@us.ibm.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This
    document is subject to the rights, licenses and restrictions\n   contained in
    BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at ietf-\n   ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
