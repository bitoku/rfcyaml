- title: __initial_text__
  contents:
  - "                        Early Retransmit for TCP\n            and Stream Control\
    \ Transmission Protocol (SCTP)\n"
- title: Abstract
  contents:
  - "Abstract\n   This document proposes a new mechanism for TCP and Stream Control\n\
    \   Transmission Protocol (SCTP) that can be used to recover lost\n   segments\
    \ when a connection's congestion window is small.  The \"Early\n   Retransmit\"\
    \ mechanism allows the transport to reduce, in certain\n   special circumstances,\
    \ the number of duplicate acknowledgments\n   required to trigger a fast retransmission.\
    \  This allows the transport\n   to use fast retransmit to recover segment losses\
    \ that would otherwise\n   require a lengthy retransmission timeout.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc5827.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Many researchers have studied the problems with TCP's loss\
    \ recovery\n   [RFC793, RFC5681] when the congestion window is small, and they\
    \ have\n   outlined possible mechanisms to mitigate these problems\n   [Mor97,\
    \ BPS+98, Bal98, LK98, RFC3150, AA02].  SCTP's [RFC4960] loss\n   recovery and\
    \ congestion control mechanisms are based on TCP, and\n   therefore the same problems\
    \ impact the performance of SCTP\n   connections.  When the transport detects\
    \ a missing segment, the\n   connection enters a loss recovery phase.  There are\
    \ several variants\n   of the loss recovery phase depending on the TCP implementation.\
    \  TCP\n   can use slow-start-based recovery or fast recovery [RFC5681], NewReno\n\
    \   [RFC3782], and loss recovery, based on selective acknowledgments\n   (SACKs)\
    \ [RFC2018, FF96, RFC3517].  SCTP's loss recovery is not as\n   varied due to\
    \ the built-in selective acknowledgments.\n   All of the above variants have two\
    \ methods for invoking loss\n   recovery.  First, if an acknowledgment (ACK) for\
    \ a given segment is\n   not received in a certain amount of time, a retransmission\
    \ timer\n   fires, and the segment is resent [RFC2988, RFC4960].  Second, the\n\
    \   \"fast retransmit\" algorithm resends a segment when three duplicate\n   ACKs\
    \ arrive at the sender [Jac88, RFC5681].  Duplicate ACKs are\n   triggered by\
    \ out-of-order arrivals at the receiver.  However, because\n   duplicate ACKs\
    \ from the receiver are triggered by both segment loss\n   and segment reordering\
    \ in the network path, the sender waits for\n   three duplicate ACKs in an attempt\
    \ to disambiguate segment loss from\n   segment reordering.  When the congestion\
    \ window is small, it may not\n   be possible to generate the required number\
    \ of duplicate ACKs to\n   trigger fast retransmit when a loss does happen.\n\
    \   Small congestion windows can occur in a number of situations, such\n   as:\n\
    \   (1) The connection is constrained by end-to-end congestion control\n     \
    \  when the connection's share of the path is small, the path has a\n       small\
    \ bandwidth-delay product, or the transport is ascertaining\n       the available\
    \ bandwidth in the first few round-trip times of slow\n       start.\n   (2) The\
    \ connection is \"application limited\" and has only a limited\n       amount\
    \ of data to send.  This can happen any time the application\n       does not\
    \ produce enough data to fill the congestion window.  A\n       particular case\
    \ when all connections become application limited\n       is as the connection\
    \ ends.\n   (3) The connection is limited by the receiver's advertised window.\n\
    \   The transport's retransmission timeout (RTO) is based on measured\n   round-trip\
    \ times (RTT) between the sender and receiver, as specified\n   in [RFC2988] (for\
    \ TCP) and [RFC4960] (for SCTP).  To prevent spurious\n   retransmissions of segments\
    \ that are only delayed and not lost, the\n   minimum RTO is conservatively chosen\
    \ to be 1 second.  Therefore, it\n   behooves TCP senders to detect and recover\
    \ from as many losses as\n   possible without incurring a lengthy timeout during\
    \ which the\n   connection remains idle.  However, if not enough duplicate ACKs\n\
    \   arrive from the receiver, the fast retransmit algorithm is never\n   triggered\
    \ -- this situation occurs when the congestion window is\n   small, if a large\
    \ number of segments in a window are lost, or at the\n   end of a transfer as\
    \ data drains from the network.  For instance,\n   consider a congestion window\
    \ of three segments' worth of data.  If\n   one segment is dropped by the network,\
    \ then at most two duplicate\n   ACKs will arrive at the sender.  Since three\
    \ duplicate ACKs are\n   required to trigger fast retransmit, a timeout will be\
    \ required to\n   resend the dropped segment.  Note that delayed ACKs [RFC5681]\
    \ may\n   further reduce the number of duplicate ACKs a receiver sends.\n   However,\
    \ we assume that receivers send immediate ACKs when there is a\n   gap in the\
    \ received sequence space per [RFC5681].\n   [BPS+98] shows that roughly 56% of\
    \ retransmissions sent by a busy Web\n   server are sent after the RTO timer expires,\
    \ while only 44% are\n   handled by fast retransmit.  In addition, only 4% of\
    \ the RTO timer-\n   based retransmissions could have been avoided with SACK,\
    \ which has to\n   continue to disambiguate reordering from genuine loss.  Furthermore,\n\
    \   [All00] shows that for one particular Web server, the median number\n   of\
    \ bytes carried by a connection is less than four segments,\n   indicating that\
    \ more than half of the connections will be forced to\n   rely on the RTO timer\
    \ to recover from any losses that occur.  Thus,\n   loss recovery that does not\
    \ rely on the conservative RTO is likely to\n   be beneficial for short TCP transfers.\n\
    \   The limited transmit mechanism introduced in [RFC3042] and currently\n   codified\
    \ in [RFC5681] allows a TCP sender to transmit previously\n   unsent data upon\
    \ receipt of each of the two duplicate ACKs that\n   precede a fast retransmit.\
    \  SCTP [RFC4960] uses SACK information to\n   calculate the number of outstanding\
    \ segments in the network.  Hence,\n   when the first two duplicate ACKs arrive\
    \ at the sender, they will\n   indicate that data has left the network, and they\
    \ will allow the\n   sender to transmit new data (if available), similar to TCP's\
    \ limited\n   transmit algorithm.  In the remainder of this document, we use\n\
    \   \"limited transmit\" to include both TCP and SCTP mechanisms for\n   sending\
    \ in response to the first two duplicate ACKs.  By sending\n   these two new segments,\
    \ the sender is attempting to induce additional\n   duplicate ACKs (if appropriate),\
    \ so that fast retransmit will be\n   triggered before the retransmission timeout\
    \ expires.  The sender-side\n   \"Early Retransmit\" mechanism outlined in this\
    \ document covers the\n   case when previously unsent data is not available for\
    \ transmission\n   (case (2) above) or cannot be transmitted due to an advertised\
    \ window\n   limitation (case (3) above).\n   Note: This document is being published\
    \ as an experimental RFC, as\n   part of the process for the TCPM working group\
    \ and the IETF to assess\n   whether the proposed change is useful and safe in\
    \ the heterogeneous\n   environments, including which variants of the mechanism\
    \ are the most\n   effective.  In the future, this specification may be updated\
    \ and put\n   on the standards track if its safeness and efficacy can be\n   demonstrated.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119 [RFC2119].\n   The reader is expected to be familiar with the definitions\
    \ given in\n   [RFC5681].\n"
- title: 3.  Early Retransmit Algorithm
  contents:
  - "3.  Early Retransmit Algorithm\n   The Early Retransmit algorithm calls for lowering\
    \ the threshold for\n   triggering fast retransmit when the amount of outstanding\
    \ data is\n   small and when no previously unsent data can be transmitted (such\n\
    \   that limited transmit could be used).  Duplicate ACKs are triggered\n   by\
    \ each arriving out-of-order segment.  Therefore, fast retransmit\n   will not\
    \ be invoked when there are less than four outstanding\n   segments (assuming\
    \ only one segment loss in the window).  However,\n   TCP and SCTP are not required\
    \ to track the number of outstanding\n   segments, but rather the number of outstanding\
    \ bytes or messages.\n   (Note that SCTP's message boundaries do not necessarily\
    \ correspond to\n   segment boundaries.)  Therefore, applying the intuitive notion\
    \ of a\n   transport with less than four segments outstanding is more\n   complicated\
    \ than it first appears.  In Section 3.1, we describe a\n   \"byte-based\" variant\
    \ of Early Retransmit that attempts to roughly map\n   the number of outstanding\
    \ bytes to a number of outstanding segments\n   that is then used when deciding\
    \ whether to trigger Early Retransmit.\n   In Section 3.2, we describe a \"segment-based\"\
    \ variant that represents\n   a more precise algorithm for triggering Early Retransmit.\
    \  This\n   precision comes at the cost of requiring additional state to be kept\n\
    \   by the TCP sender.  In both cases, we describe SACK-based and non-\n   SACK-based\
    \ versions of the scheme (of course, the non-SACK version\n   will not apply to\
    \ SCTP).  This document explicitly does not prefer\n   one variant over the other,\
    \ but leaves the choice to the implementer.\n"
- title: 3.1.  Byte-Based Early Retransmit
  contents:
  - "3.1.  Byte-Based Early Retransmit\n   A TCP or SCTP sender MAY use byte-based\
    \ Early Retransmit.\n   Upon the arrival of an ACK, a sender employing byte-based\
    \ Early\n   Retransmit MUST use the following two conditions to determine when\
    \ an\n   Early Retransmit is sent:\n   (2.a) The amount of outstanding data (ownd)\
    \ -- data sent but not yet\n         acknowledged -- is less than 4*SMSS bytes\
    \ (as defined in\n         [RFC5681]).\n         Note that in the byte-based variant\
    \ of Early Retransmit, \"ownd\"\n         is equivalent to \"FlightSize\" (defined\
    \ in [RFC5681]).  We use\n         different notation, because \"ownd\" is not\
    \ consistent with\n         FlightSize throughout this document.\n         Also\
    \ note that in SCTP, messages will have to be converted to\n         bytes to\
    \ make this variant of Early Retransmit work.\n   (2.b) There is either no unsent\
    \ data ready for transmission at the\n         sender, or the advertised receive\
    \ window does not permit new\n         segments to be transmitted.\n   When the\
    \ above two conditions hold and a TCP connection does not\n   support SACK, the\
    \ duplicate ACK threshold used to trigger a\n   retransmission MUST be reduced\
    \ to:\n                ER_thresh = ceiling (ownd/SMSS) - 1                 (1)\n\
    \   duplicate ACKs, where ownd is expressed in terms of bytes.  We call\n   this\
    \ reduced ACK threshold enabling \"Early Retransmission\".\n   When conditions\
    \ (2.a) and (2.b) hold and a TCP connection does\n   support SACK or SCTP is in\
    \ use, Early Retransmit MUST be used only\n   when \"ownd - SMSS\" bytes have\
    \ been SACKed.\n   If either (or both) condition (2.a) and/or (2.b) does not hold,\
    \ the\n   transport MUST NOT use Early Retransmit, but rather prefer the\n   standard\
    \ mechanisms, including fast retransmit and limited transmit.\n   As noted above,\
    \ the drawback of this byte-based variant is precision\n   [HB08].  We illustrate\
    \ this with two examples:\n      + Consider a non-SACK TCP sender that uses an\
    \ SMSS of 1460 bytes\n        and transmits three segments, each with 400 bytes\
    \ of payload.\n        This is a case where Early Retransmit could aid loss recovery\
    \ if\n        one segment is lost.  However, in this case, ER_thresh will\n  \
    \      become zero, per Equation (1), because the number of outstanding\n    \
    \    bytes is a poor estimate of the number of outstanding segments.\n       \
    \ A similar problem occurs for senders that employ SACK, as the\n        expression\
    \ \"ownd - SMSS\" will become negative.\n      + Next, consider a non-SACK TCP\
    \ sender that uses an SMSS of\n        1460 bytes and transmits 10 segments, each\
    \ with 400 bytes of\n        payload.  In this case, ER_thresh will be 2 per Equation\
    \ (1).\n        Thus, even though there are enough segments outstanding to\n \
    \       trigger fast retransmit with the standard duplicate ACK\n        threshold,\
    \ Early Retransmit will be triggered.  This could cause\n        or exacerbate\
    \ performance problems caused by segment reordering\n        in the network.\n"
- title: 3.2.  Segment-Based Early Retransmit
  contents:
  - "3.2.  Segment-Based Early Retransmit\n   A TCP or SCTP sender MAY use segment-based\
    \ Early Retransmit.\n   Upon the arrival of an ACK, a sender employing segment-based\
    \ Early\n   Retransmit MUST use the following two conditions to determine when\
    \ an\n   Early Retransmit is sent:\n   (3.a) The number of outstanding segments\
    \ (oseg) -- segments sent but\n         not yet acknowledged -- is less than four.\n\
    \   (3.b) There is either no unsent data ready for transmission at the\n     \
    \    sender, or the advertised receive window does not permit new\n         segments\
    \ to be transmitted.\n   When the above two conditions hold and a TCP connection\
    \ does not\n   support SACK, the duplicate ACK threshold used to trigger a\n \
    \  retransmission MUST be reduced to:\n                  ER_thresh = oseg - 1\
    \                              (2)\n   duplicate ACKs, where oseg represents the\
    \ number of outstanding\n   segments.  (We discuss tracking the number of outstanding\
    \ segments\n   below.)  We call this reduced ACK threshold enabling \"Early\n\
    \   Retransmission\".\n   When conditions (3.a) and (3.b) hold and a TCP connection\
    \ does\n   support SACK or SCTP is in use, Early Retransmit MUST be used only\n\
    \   when \"oseg - 1\" segments have been SACKed.  A segment is considered\n  \
    \ to be SACKed when all of its data bytes (TCP) or data chunks (SCTP)\n   have\
    \ been indicated as arrived by the receiver.\n   If either (or both) condition\
    \ (3.a) and/or (3.b) does not hold, the\n   transport MUST NOT use Early Retransmit,\
    \ but rather prefer the\n   standard mechanisms, including fast retransmit and\
    \ limited transmit.\n   This version of Early Retransmit solves the precision\
    \ issues\n   discussed in the previous section.  As noted previously, the cost\
    \ is\n   that the implementation will have to track segment boundaries to form\n\
    \   an understanding as to how many actual segments have been\n   transmitted,\
    \ but not acknowledged.  This can be done by the sender\n   tracking the boundaries\
    \ of the three segments on the right side of\n   the current window (which involves\
    \ tracking four sequence numbers in\n   TCP).  This could be done by keeping a\
    \ circular list of the segment\n   boundaries, for instance.  Cumulative ACKs\
    \ that do not fall within\n   this region indicate that at least four segments\
    \ are outstanding, and\n   therefore Early Retransmit MUST NOT be used.  When\
    \ the outstanding\n   window becomes small enough that Early Retransmit can be\
    \ invoked, a\n   full understanding of the number of outstanding segments will\
    \ be\n   available from the four sequence numbers retained.  (Note: the\n   implicit\
    \ sequence number consumed by the TCP FIN bit can also be\n   included in the\
    \ tracking of segment boundaries.)\n"
- title: 4.  Discussion
  contents:
  - "4.  Discussion\n   In this section, we discuss a number of issues surrounding\
    \ the Early\n   Retransmit algorithm.\n"
- title: 4.1.  SACK vs. Non-SACK
  contents:
  - "4.1.  SACK vs. Non-SACK\n   The SACK variant of the Early Retransmit algorithm\
    \ is preferred to\n   the non-SACK variant in TCP due to its robustness in the\
    \ face of ACK\n   loss (since SACKs are sent redundantly), and due to interactions\
    \ with\n   the delayed ACK timer (SCTP does not have a non-SACK mode and\n   therefore\
    \ naturally supports SACK-based Early Retransmit).  Consider\n   a flight of three\
    \ segments, S1...S3, with S2 being dropped by the\n   network.  When S1 arrives,\
    \ it is in order, and so the receiver may or\n   may not delay the ACK, leading\
    \ to two scenarios:\n   (A) The ACK for S1 is delayed: In this case, the arrival\
    \ of S3 will\n       trigger an ACK to be transmitted, covering S1 (which was\n\
    \       previously unacknowledged).  In this case, Early Retransmit\n       without\
    \ SACK will not prevent an RTO because no duplicate ACKs\n       will arrive.\
    \  However, with SACK, the ACK for S1 will also\n       include SACK information\
    \ indicating that S3 has arrived at the\n       receiver.  The sender can then\
    \ invoke Early Retransmit on this\n       ACK because only one segment remains\
    \ outstanding.\n   (B) The ACK for S1 is not delayed: In this case, the arrival\
    \ of S1\n       triggers an ACK of previously unacknowledged data.  The arrival\n\
    \       of S3 triggers a duplicate ACK (because it is out of order).\n       Both\
    \ ACKs will cover the same segment (S1).  Therefore,\n       regardless of whether\
    \ SACK is used, Early Retransmit can be\n       performed by the sender (assuming\
    \ no ACK loss).\n"
- title: 4.2.  Segment Reordering
  contents:
  - "4.2.  Segment Reordering\n   Early Retransmit is less robust in the face of reordered\
    \ segments\n   than when using the standard fast retransmit threshold.  Research\n\
    \   shows that a general reduction in the number of duplicate ACKs\n   required\
    \ to trigger fast retransmit to two (rather than three) leads\n   to a reduction\
    \ in the ratio of good to bad retransmits by a factor of\n   three [Pax97].  However,\
    \ this analysis did not include the additional\n   conditioning on the event that\
    \ the ownd was smaller than four\n   segments and that no new data was available\
    \ for transmission.\n   A number of studies have shown that network reordering\
    \ is not a rare\n   event across some network paths.  Various measurement studies\
    \ have\n   shown that reordering along most paths is negligible, but along\n \
    \  certain paths can be quite prevalent [Pax97, BPS99, BS02, Pir05].\n   Evaluating\
    \ Early Retransmit in the face of real segment reordering is\n   part of the experiment\
    \ we hope to instigate with this document.\n"
- title: 4.3.  Worst Case
  contents:
  - "4.3.  Worst Case\n   Next, we note two \"worst case\" scenarios for Early Retransmit:\n\
    \   (1) Persistent reordering of segments coupled with an application\n      \
    \ that does not constantly send data can result in large numbers of\n       needless\
    \ retransmissions when using Early Retransmit.  For\n       instance, consider\
    \ an application that sends data two segments at\n       a time, followed by an\
    \ idle period when no data is queued for\n       delivery.  If the network consistently\
    \ reorders the two segments,\n       the sender will needlessly retransmit one\
    \ out of every two unique\n       segments transmitted when using the above algorithm\
    \ (meaning that\n       one-third of all segments sent are needless retransmissions).\n\
    \       However, this would only be a problem for long-lived connections\n   \
    \    from applications that transmit in spurts.\n   (2) Similar to the above,\
    \ consider the case of that consist of two\n       segment each and always experience\
    \ reordering.  Just as in (1)\n       above, one out of every two unique data\
    \ segments will be\n       retransmitted needlessly; therefore, one-third of the\
    \ traffic\n       will be spurious.\n   Currently, this document offers no suggestion\
    \ on how to mitigate the\n   above problems.  However, the worst cases are likely\
    \ pathological.\n   Part of the experiments that this document hopes to trigger\
    \ would\n   involve better understanding of whether such theoretical worst-case\n\
    \   scenarios are prevalent in the network, and in general, to explore\n   the\
    \ trade-off between spurious fast retransmits and the delay imposed\n   by the\
    \ RTO.  Appendix A does offer a survey of possible mitigations\n   that call for\
    \ curtailing the use of Early Retransmit when it is\n   making poor retransmission\
    \ decisions.\n"
- title: 5.  Related Work
  contents:
  - "5.  Related Work\n   There are a number of similar proposals in the literature\
    \ that\n   attempt to mitigate the same problem that Early Retransmit addresses.\n\
    \   Deployment of Explicit Congestion Notification (ECN) [Flo94, RFC3168]\n  \
    \ may benefit connections with small congestion window sizes [RFC2884].\n   ECN\
    \ provides a method for indicating congestion to the end-host\n   without dropping\
    \ segments.  While some segment drops may still occur,\n   ECN may allow a transport\
    \ to perform better with small congestion\n   window sizes because the sender\
    \ will be required to detect less\n   segment loss [RFC2884].\n   [Bal98] outlines\
    \ another solution to the problem of having no new\n   segments to transmit into\
    \ the network when the first two duplicate\n   ACKs arrive.  In response to these\
    \ duplicate ACKs, a TCP sender\n   transmits zero-byte segments to induce additional\
    \ duplicate ACKs.\n   This method preserves the robustness of the standard fast\
    \ retransmit\n   algorithm at the cost of injecting segments into the network\
    \ that do\n   not deliver any data, and therefore are potentially wasting network\n\
    \   resources (at a time when there is a reasonable chance that the\n   resources\
    \ are scarce).\n   [RFC4653] also defines an orthogonal method for altering the\n\
    \   duplicate ACK threshold.  The mechanisms proposed in this document\n   decrease\
    \ the duplicate ACK threshold when a small amount of data is\n   outstanding.\
    \  Meanwhile, the mechanisms in [RFC4653] increase the\n   duplicate ACK threshold\
    \ (over the standard of 3) when the congestion\n   window is large in an effort\
    \ to increase robustness to segment\n   reordering.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   The security considerations found in [RFC5681]\
    \ apply to this\n   document.  No additional security problems have been identified\
    \ with\n   Early Retransmit at this time.\n"
- title: 7.  Acknowledgments
  contents:
  - "7.  Acknowledgments\n   We thank Sally Floyd for her feedback in discussions\
    \ about Early\n   Retransmit.  The notion of Early Retransmit was originally sketched\n\
    \   in an Internet-Draft co-authored by Sally Floyd and Hari\n   Balakrishnan.\
    \  Armando Caro, Joe Touch, Alexander Zimmermann, and\n   many members of the\
    \ TSVWG and TCPM working groups provided good\n   discussions that helped shape\
    \ this document.  Our thanks to all!\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC793]    Postel, J., \"Transmission Control\
    \ Protocol\", STD 7,\n               RFC 793, September 1981.\n   [RFC2018]  \
    \ Mathis, M., Mahdavi, J., Floyd, S., and A. Romanow, \"TCP\n               Selective\
    \ Acknowledgment Options\", RFC 2018,\n               October 1996.\n   [RFC2119]\
    \   Bradner, S., \"Key words for use in RFCs to Indicate\n               Requirement\
    \ Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2883]   Floyd, S., Mahdavi,\
    \ J., Mathis, M., and M. Podolsky, \"An\n               Extension to the Selective\
    \ Acknowledgement (SACK) Option\n               for TCP\", RFC 2883, July 2000.\n\
    \   [RFC2988]   Paxson, V. and M. Allman, \"Computing TCP's Retransmission\n \
    \              Timer\", RFC 2988, November 2000.\n   [RFC3042]   Allman, M., Balakrishnan,\
    \ H., and S. Floyd, \"Enhancing\n               TCP's Loss Recovery Using Limited\
    \ Transmit\", RFC 3042,\n               January 2001.\n   [RFC4960]   Stewart,\
    \ R., Ed., \"Stream Control Transmission Protocol\",\n               RFC 4960,\
    \ September 2007.\n   [RFC5681]   Allman, M., Paxson, V., and E. Blanton, \"TCP\
    \ Congestion\n               Control\", RFC 5681, September 2009.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [AA02]      Urtzi Ayesta, Konstantin Avrachenkov,\
    \ \"The Effect of the\n               Initial Window Size and Limited Transmit\
    \ Algorithm on the\n               Transient Behavior of TCP Transfers\", In Proc.\
    \ of the\n               15th ITC Internet Specialist Seminar, Wurzburg,\n   \
    \            July 2002.\n   [All00]     Mark Allman.  A Web Server's View of the\
    \ Transport Layer.\n               ACM Computer Communication Review, October\
    \ 2000.\n   [Bal98]     Hari Balakrishnan.  Challenges to Reliable Data Transport\n\
    \               over Heterogeneous Wireless Networks.  Ph.D. Thesis,\n       \
    \        University of California at Berkeley, August 1998.\n   [BPS+98]    Hari\
    \ Balakrishnan, Venkata Padmanabhan,\n               Srinivasan Seshan, Mark Stemm,\
    \ and Randy Katz.  TCP\n               Behavior of a Busy Web Server: Analysis\
    \ and Improvements.\n               Proc. IEEE INFOCOM Conf., San Francisco, CA,\
    \ March 1998.\n   [BPS99]     Jon Bennett, Craig Partridge, Nicholas Shectman.\
    \  Packet\n               Reordering is Not Pathological Network Behavior.\n \
    \              IEEE/ACM Transactions on Networking, December 1999.\n   [BS02]\
    \      John Bellardo, Stefan Savage.  Measuring Packet\n               Reordering,\
    \ ACM/USENIX Internet Measurement Workshop,\n               November 2002.\n \
    \  [FF96]      Kevin Fall, Sally Floyd.  Simulation-based Comparisons of\n   \
    \            Tahoe, Reno, and SACK TCP.  ACM Computer Communication\n        \
    \       Review, July 1996.\n   [Flo94]     Sally Floyd.  TCP and Explicit Congestion\
    \ Notification.\n               ACM Computer Communication Review, October 1994.\n\
    \   [HB08]      Per Hurtig, Anna Brunstrom.  Enhancing SCTP Loss\n           \
    \    Recovery: An Experimental Evaluation of Early Retransmit.\n             \
    \  Elsevier Computer Communications, Vol. 31(16),\n               October 2008,\
    \ pp. 3778-3788.\n   [Jac88]     Van Jacobson.  Congestion Avoidance and Control.\
    \  ACM\n               SIGCOMM 1988.\n   [LK98]      Dong Lin, H.T. Kung.  TCP\
    \ Fast Recovery Strategies:\n               Analysis and Improvements.  Proc.\
    \ IEEE INFOCOM Conf.,\n               San Francisco, CA, March 1998.\n   [Mor97]\
    \     Robert Morris.  TCP Behavior with Many Flows.  Proc.\n               Fifth\
    \ IEEE International Conference on Network Protocols,\n               October\
    \ 1997.\n   [Pax97]     Vern Paxson.  End-to-End Internet Packet Dynamics.  ACM\n\
    \               SIGCOMM, September 1997.\n   [Pir05]     N. M. Piratla, \"A Theoretical\
    \ Foundation, Metrics and\n               Modeling of Packet Reordering and Methodology\
    \ of Delay\n               Modeling using Inter-packet Gaps,\" Ph.D. Dissertation,\n\
    \               Department of Electrical and Computer Engineering,\n         \
    \      Colorado State University, Fort Collins, CO, Fall 2005.\n   [RFC2884] \
    \  Hadi Salim, J. and U. Ahmed, \"Performance Evaluation of\n               Explicit\
    \ Congestion Notification (ECN) in IP Networks\",\n               RFC 2884, July\
    \ 2000.\n   [RFC3150]   Dawkins, S., Montenegro, G., Kojo, M., and V. Magret,\n\
    \               \"End-to-end Performance Implications of Slow Links\",\n     \
    \          BCP 48, RFC 3150, July 2001.\n   [RFC3168]   Ramakrishnan, K., Floyd,\
    \ S., and D. Black, \"The Addition\n               of Explicit Congestion Notification\
    \ (ECN) to IP\",\n               RFC 3168, September 2001.\n   [RFC3517]   Blanton,\
    \ E., Allman, M., Fall, K., and L. Wang, \"A\n               Conservative Selective\
    \ Acknowledgment (SACK)-based Loss\n               Recovery Algorithm for TCP\"\
    , RFC 3517, April 2003.\n   [RFC3522]   Ludwig, R. and M. Meyer, \"The Eifel Detection\
    \ Algorithm\n               for TCP\", RFC 3522, April 2003.\n   [RFC3782]   Floyd,\
    \ S., Henderson, T., and A. Gurtov, \"The NewReno\n               Modification\
    \ to TCP's Fast Recovery Algorithm\", RFC 3782,\n               April 2004.\n\
    \   [RFC4653]   Bhandarkar, S., Reddy, A., Allman, M., and E. Blanton,\n     \
    \          \"Improving the Robustness of TCP to Non-Congestion\n             \
    \  Events\", RFC 4653, August 2006.\n"
- title: Appendix A.  Research Issues in Adjusting the Duplicate ACK Threshold
  contents:
  - "Appendix A.  Research Issues in Adjusting the Duplicate ACK Threshold\n   Decreasing\
    \ the number of duplicate ACKs required to trigger fast\n   retransmit, as suggested\
    \ in Section 3, has the drawback of making\n   fast retransmit less robust in\
    \ the face of minor network reordering.\n   Two egregious examples of problems\
    \ caused by reordering are given in\n   Section 4.  This appendix outlines several\
    \ schemes that have been\n   suggested to mitigate the problems caused by Early\
    \ Retransmit in the\n   face of segment reordering.  These methods need further\
    \ research\n   before they are suggested for general use (and current consensus\
    \ is\n   that the cases that make Early Retransmit unnecessarily retransmit a\n\
    \   large amount of data are pathological, and therefore, these\n   mitigations\
    \ are not generally required).\n   MITIGATION A.1: Allow a connection to use Early\
    \ Retransmit as long as\n      the algorithm is not injecting \"too much\" spurious\
    \ data into the\n      network.  For instance, using the information provided\
    \ by TCP's\n      D-SACK option [RFC2883] or SCTP's Duplicate Transmission Sequence\n\
    \      Number (Duplicate-TSN) notification, a sender can determine when\n    \
    \  segments sent via Early Retransmit are needless.  Likewise, using\n      Eifel\
    \ [RFC3522], the sender can detect spurious Early Retransmits.\n      Once spurious\
    \ Early Retransmits are detected, the sender can\n      either eliminate the use\
    \ of Early Retransmit, or limit the use of\n      the algorithm to ensure that\
    \ an acceptably small fraction of the\n      connection's transmissions are not\
    \ spurious.  For example, a\n      connection could stop using Early Retransmit\
    \ after the first\n      spurious retransmit is detected.\n   MITIGATION A.2:\
    \ If a sender cannot reliably determine whether an\n      Early-Retransmitted\
    \ segment is spurious or not, the sender could\n      simply limit Early Retransmits,\
    \ either to some fixed number per\n      connection (e.g., Early Retransmit is\
    \ allowed only once per\n      connection), or to some small percentage of the\
    \ total traffic\n      being transmitted.\n   MITIGATION A.3: Allow a connection\
    \ to trigger Early Retransmit using\n      the criteria given in Section 3, in\
    \ addition to a \"small\" timeout\n      [Pax97].  For instance, a sender may\
    \ have to wait for two\n      duplicate ACKs and then T msec before Early Retransmit\
    \ is invoked.\n      The added time gives reordered acknowledgments time to arrive\
    \ at\n      the sender and avoid a needless retransmit.  Designing a method\n\
    \      for choosing an appropriate timeout is part of the research that\n    \
    \  would need to be involved in this scheme.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Mark Allman\n   International Computer Science Institute\n\
    \   1947 Center Street, Suite 600\n   Berkeley, CA 94704-1198\n   USA\n   Phone:\
    \ 440-235-1792\n   EMail: mallman@icir.org\n   http://www.icir.org/mallman/\n\
    \   Konstantin Avrachenkov\n   INRIA\n   2004 route des Lucioles, B.P.93\n   06902,\
    \ Sophia Antipolis\n   France\n   Phone: 00 33 492 38 7751\n   EMail: k.avrachenkov@sophia.inria.fr\n\
    \   http://www-sop.inria.fr/members/Konstantin.Avratchenkov/me.html\n   Urtzi\
    \ Ayesta\n   BCAM-IKERBASQUE                         LAAS-CNRS\n   Bizkaia Technology\
    \ Park, Building 500   7 Avenue Colonel Roche\n   48160 Derio                \
    \             31077, Toulouse\n   Spain                                   France\n\
    \                                           EMail: urtzi@laas.fr\n           \
    \                                http://www.laas.fr/~urtzi\n   Josh Blanton\n\
    \   Ohio University\n   301 Stocker Center\n   Athens, OH  45701\n   USA\n   EMail:\
    \ jblanton@irg.cs.ohiou.edu\n   Per Hurtig\n   Karlstad University\n   Department\
    \ of Computer Science\n   Universitetsgatan 2 651 88\n   Karlstad\n   Sweden\n\
    \   EMail: per.hurtig@kau.se\n"
