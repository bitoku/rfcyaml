- title: __initial_text__
  contents:
  - '                      Cryptographic Message Syntax

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the Cryptographic Message Syntax.  This\n\
    \   syntax is used to digitally sign, digest, authenticate, or encrypt\n   arbitrary\
    \ messages.\n   The Cryptographic Message Syntax is derived from PKCS #7 version\
    \ 1.5\n   as specified in RFC 2315 [PKCS#7].  Wherever possible, backward\n  \
    \ compatibility is preserved; however, changes were necessary to\n   accommodate\
    \ attribute certificate transfer and key agreement\n   techniques for key management.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1   Introduction .................................................\
    \  4\n   2   General Overview .............................................  4\n\
    \   3   General Syntax ...............................................  5\n  \
    \ 4   Data Content Type ............................................  5\n   5\
    \   Signed-data Content Type .....................................  6\n      \
    \ 5.1  SignedData Type .........................................  7\n       5.2\
    \  EncapsulatedContentInfo Type ............................  8\n       5.3  SignerInfo\
    \ Type .........................................  9\n       5.4  Message Digest\
    \ Calculation Process ...................... 11\n       5.5  Message Signature\
    \ Generation Process .................... 12\n       5.6  Message Signature Verification\
    \ Process .................. 12\n   6   Enveloped-data Content Type ..................................\
    \ 12\n       6.1  EnvelopedData Type ...................................... 14\n\
    \       6.2  RecipientInfo Type ...................................... 15\n  \
    \          6.2.1  KeyTransRecipientInfo Type ....................... 16\n    \
    \        6.2.2  KeyAgreeRecipientInfo Type ....................... 17\n      \
    \      6.2.3  KEKRecipientInfo Type ............................ 19\n       6.3\
    \  Content-encryption Process .............................. 20\n       6.4  Key-encryption\
    \ Process .................................. 20\n   7   Digested-data Content\
    \ Type ................................... 21\n   8   Encrypted-data Content Type\
    \ .................................. 22\n   9   Authenticated-data Content Type\
    \ .............................. 23\n       9.1  AuthenticatedData Type ..................................\
    \ 23\n       9.2  MAC Generation .......................................... 25\n\
    \       9.3  MAC Verification ........................................ 26\n  \
    \ 10  Useful Types ................................................. 27\n    \
    \   10.1  Algorithm Identifier Types ............................. 27\n      \
    \       10.1.1  DigestAlgorithmIdentifier ...................... 27\n        \
    \     10.1.2  SignatureAlgorithmIdentifier ................... 27\n          \
    \   10.1.3  KeyEncryptionAlgorithmIdentifier ............... 28\n            \
    \ 10.1.4  ContentEncryptionAlgorithmIdentifier ........... 28\n             10.1.5\
    \  MessageAuthenticationCodeAlgorithm ............. 28\n       10.2  Other Useful\
    \ Types ..................................... 28\n             10.2.1  CertificateRevocationLists\
    \ ..................... 28\n             10.2.2  CertificateChoices .............................\
    \ 29\n             10.2.3  CertificateSet ................................. 29\n\
    \             10.2.4  IssuerAndSerialNumber .......................... 30\n  \
    \           10.2.5  CMSVersion ..................................... 30\n    \
    \         10.2.6  UserKeyingMaterial ............................. 30\n      \
    \       10.2.7  OtherKeyAttribute .............................. 30\n   11  Useful\
    \ Attributes ............................................ 31\n       11.1  Content\
    \ Type ........................................... 31\n       11.2  Message Digest\
    \ ......................................... 32\n       11.3  Signing Time ...........................................\
    \ 32\n       11.4  Countersignature ....................................... 34\n\
    \   12  Supported Algorithms ......................................... 35\n  \
    \     12.1  Digest Algorithms ...................................... 35\n    \
    \         12.1.1  SHA-1 .......................................... 35\n      \
    \       12.1.2  MD5 ............................................ 35\n       12.2\
    \  Signature Algorithms ................................... 36\n             12.2.1\
    \  DSA ............................................ 36\n             12.2.2  RSA\
    \ ............................................ 36\n       12.3  Key Management\
    \ Algorithms .............................. 36\n             12.3.1  Key Agreement\
    \ Algorithms ....................... 36\n                     12.3.1.1  X9.42\
    \ Ephemeral-Static Diffie-Hellman. 37\n             12.3.2  Key Transport Algorithms\
    \ ....................... 38\n                     12.3.2.1  RSA ..................................\
    \ 39\n             12.3.3  Symmetric Key-Encryption Key Algorithms ........ 39\n\
    \                     12.3.3.1  Triple-DES Key Wrap .................. 40\n  \
    \                   12.3.3.2  RC2 Key Wrap ......................... 41\n    \
    \  12.4  Content Encryption Algorithms ........................... 41\n      \
    \      12.4.1  Triple-DES CBC .................................. 42\n        \
    \    12.4.2  RC2 CBC ......................................... 42\n      12.5\
    \  Message Authentication Code Algorithms .................. 42\n            12.5.1\
    \  HMAC with SHA-1 ................................. 43\n      12.6  Triple-DES\
    \ and RC2 Key Wrap Algorithms .................. 43\n            12.6.1  Key Checksum\
    \ .................................... 44\n            12.6.2  Triple-DES Key\
    \ Wrap ............................. 44\n            12.6.3  Triple-DES Key Unwrap\
    \ ........................... 44\n            12.6.4  RC2 Key Wrap ....................................\
    \ 45\n            12.6.5  RC2 Key Unwrap .................................. 46\n\
    \   Appendix A:  ASN.1 Module ........................................ 47\n  \
    \ References ....................................................... 55\n   Security\
    \ Considerations .......................................... 56\n   Acknowledgments\
    \ .................................................. 58\n   Author's Address .................................................\
    \ 59\n   Full Copyright Statement ......................................... 60\n"
- title: 1  Introduction
  contents:
  - "1  Introduction\n   This document describes the Cryptographic Message Syntax.\
    \  This\n   syntax is used to digitally sign, digest, authenticate, or encrypt\n\
    \   arbitrary messages.\n   The Cryptographic Message Syntax describes an encapsulation\
    \ syntax\n   for data protection.  It supports digital signatures, message\n \
    \  authentication codes, and encryption.  The syntax allows multiple\n   encapsulation,\
    \ so one encapsulation envelope can be nested inside\n   another.  Likewise, one\
    \ party can digitally sign some previously\n   encapsulated data.  It also allows\
    \ arbitrary attributes, such as\n   signing time, to be signed along with the\
    \ message content, and\n   provides for other attributes such as countersignatures\
    \ to be\n   associated with a signature.\n   The Cryptographic Message Syntax\
    \ can support a variety of\n   architectures for certificate-based key management,\
    \ such as the one\n   defined by the PKIX working group.\n   The Cryptographic\
    \ Message Syntax values are generated using ASN.1\n   [X.208-88], using BER-encoding\
    \ [X.209-88].  Values are typically\n   represented as octet strings.  While many\
    \ systems are capable of\n   transmitting arbitrary octet strings reliably, it\
    \ is well known that\n   many electronic-mail systems are not.  This document\
    \ does not address\n   mechanisms for encoding octet strings for reliable transmission\
    \ in\n   such environments.\n"
- title: 2  General Overview
  contents:
  - "2  General Overview\n   The Cryptographic Message Syntax (CMS) is general enough\
    \ to support\n   many different content types.  This document defines one protection\n\
    \   content, ContentInfo.  ContentInfo encapsulates a single identified\n   content\
    \ type, and the identified type may provide further\n   encapsulation.  This document\
    \ defines six content types: data,\n   signed-data, enveloped-data, digested-data,\
    \ encrypted-data, and\n   authenticated-data.  Additional content types can be\
    \ defined outside\n   this document.\n   An implementation that conforms to this\
    \ specification must implement\n   the protection content, ContentInfo, and must\
    \ implement the data,\n   signed-data, and enveloped-data content types.  The\
    \ other content\n   types may be implemented if desired.\n   As a general design\
    \ philosophy, each content type permits single pass\n   processing using indefinite-length\
    \ Basic Encoding Rules (BER)\n   encoding.  Single-pass operation is especially\
    \ helpful if content is\n   large, stored on tapes, or is \"piped\" from another\
    \ process.  Single-\n   pass operation has one significant drawback: it is difficult\
    \ to\n   perform encode operations using the Distinguished Encoding Rules\n  \
    \ (DER) [X.509-88] encoding in a single pass since the lengths of the\n   various\
    \ components may not be known in advance.  However, signed\n   attributes within\
    \ the signed-data content type and authenticated\n   attributes within the authenticated-data\
    \ content type require DER\n   encoding.  Signed attributes and authenticated\
    \ attributes must be\n   transmitted in DER form to ensure that recipients can\
    \ verify a\n   content that contains one or more unrecognized attributes.  Signed\n\
    \   attributes and authenticated attributes are the only CMS data types\n   that\
    \ require DER encoding.\n"
- title: 3  General Syntax
  contents:
  - "3  General Syntax\n   The Cryptographic Message Syntax (CMS) associates a content\
    \ type\n   identifier with a content.  The syntax shall have ASN.1 type\n   ContentInfo:\n\
    \      ContentInfo ::= SEQUENCE {\n        contentType ContentType,\n        content\
    \ [0] EXPLICIT ANY DEFINED BY contentType }\n      ContentType ::= OBJECT IDENTIFIER\n\
    \   The fields of ContentInfo have the following meanings:\n      contentType\
    \ indicates the type of the associated content.  It is\n      an object identifier;\
    \ it is a unique string of integers assigned\n      by an authority that defines\
    \ the content type.\n      content is the associated content.  The type of content\
    \ can be\n      determined uniquely by contentType.  Content types for data,\n\
    \      signed-data, enveloped-data, digested-data, encrypted-data, and\n     \
    \ authenticated-data are defined in this document.  If additional\n      content\
    \ types are defined in other documents, the ASN.1 type\n      defined should not\
    \ be a CHOICE type.\n"
- title: 4  Data Content Type
  contents:
  - "4  Data Content Type\n   The following object identifier identifies the data\
    \ content type:\n      id-data OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n\
    \          us(840) rsadsi(113549) pkcs(1) pkcs7(7) 1 }\n   The data content type\
    \ is intended to refer to arbitrary octet\n   strings, such as ASCII text files;\
    \ the interpretation is left to the\n   application.  Such strings need not have\
    \ any internal structure\n   (although they could have their own ASN.1 definition\
    \ or other\n   structure).\n   The data content type is generally encapsulated\
    \ in the signed-data,\n   enveloped-data, digested-data, encrypted-data, or authenticated-data\n\
    \   content type.\n"
- title: 5  Signed-data Content Type
  contents:
  - "5  Signed-data Content Type\n   The signed-data content type consists of a content\
    \ of any type and\n   zero or more signature values.  Any number of signers in\
    \ parallel can\n   sign any type of content.\n   The typical application of the\
    \ signed-data content type represents\n   one signer's digital signature on content\
    \ of the data content type.\n   Another typical application disseminates certificates\
    \ and certificate\n   revocation lists (CRLs).\n   The process by which signed-data\
    \ is constructed involves the\n   following steps:\n      1.  For each signer,\
    \ a message digest, or hash value, is computed\n      on the content with a signer-specific\
    \ message-digest algorithm.\n      If the signer is signing any information other\
    \ than the content,\n      the message digest of the content and the other information\
    \ are\n      digested with the signer's message digest algorithm (see Section\n\
    \      5.4), and the result becomes the \"message digest.\"\n      2.  For each\
    \ signer, the message digest is digitally signed using\n      the signer's private\
    \ key.\n      3.  For each signer, the signature value and other signer-specific\n\
    \      information are collected into a SignerInfo value, as defined in\n    \
    \  Section 5.3.  Certificates and CRLs for each signer, and those not\n      corresponding\
    \ to any signer, are collected in this step.\n      4.  The message digest algorithms\
    \ for all the signers and the\n      SignerInfo values for all the signers are\
    \ collected together with\n      the content into a SignedData value, as defined\
    \ in Section 5.1.\n   A recipient independently computes the message digest. \
    \ This message\n   digest and the signer's public key are used to verify the signature\n\
    \   value.  The signer's public key is referenced either by an issuer\n   distinguished\
    \ name along with an issuer-specific serial number or by\n   a subject key identifier\
    \ that uniquely identifies the certificate\n   containing the public key.  The\
    \ signer's certificate may be included\n   in the SignedData certificates field.\n\
    \   This section is divided into six parts.  The first part describes the\n  \
    \ top-level type SignedData, the second part describes\n   EncapsulatedContentInfo,\
    \ the third part describes the per-signer\n   information type SignerInfo, and\
    \ the fourth, fifth, and sixth parts\n   describe the message digest calculation,\
    \ signature generation, and\n   signature verification processes, respectively.\n"
- title: 5.1  SignedData Type
  contents:
  - "5.1  SignedData Type\n   The following object identifier identifies the signed-data\
    \ content\n   type:\n      id-signedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n\
    \          us(840) rsadsi(113549) pkcs(1) pkcs7(7) 2 }\n   The signed-data content\
    \ type shall have ASN.1 type SignedData:\n      SignedData ::= SEQUENCE {\n  \
    \      version CMSVersion,\n        digestAlgorithms DigestAlgorithmIdentifiers,\n\
    \        encapContentInfo EncapsulatedContentInfo,\n        certificates [0] IMPLICIT\
    \ CertificateSet OPTIONAL,\n        crls [1] IMPLICIT CertificateRevocationLists\
    \ OPTIONAL,\n        signerInfos SignerInfos }\n      DigestAlgorithmIdentifiers\
    \ ::= SET OF DigestAlgorithmIdentifier\n      SignerInfos ::= SET OF SignerInfo\n\
    \   The fields of type SignedData have the following meanings:\n      version\
    \ is the syntax version number.  If no attribute\n      certificates are present\
    \ in the certificates field, the\n      encapsulated content type is id-data,\
    \ and all of the elements of\n      SignerInfos are version 1, then the value\
    \ of version shall be 1.\n      Alternatively, if attribute certificates are present,\
    \ the\n      encapsulated content type is other than id-data, or any of the\n\
    \      elements of SignerInfos are version 3, then the value of version\n    \
    \  shall be 3.\n      digestAlgorithms is a collection of message digest algorithm\n\
    \      identifiers.  There may be any number of elements in the\n      collection,\
    \ including zero.  Each element identifies the message\n      digest algorithm,\
    \ along with any associated parameters, used by\n      one or more signer.  The\
    \ collection is intended to list the\n      message digest algorithms employed\
    \ by all of the signers, in any\n      order, to facilitate one-pass signature\
    \ verification.  The message\n      digesting process is described in Section\
    \ 5.4.\n      encapContentInfo is the signed content, consisting of a content\n\
    \      type identifier and the content itself.  Details of the\n      EncapsulatedContentInfo\
    \ type are discussed in section 5.2.\n      certificates is a collection of certificates.\
    \  It is intended that\n      the set of certificates be sufficient to contain\
    \ chains from a\n      recognized \"root\" or \"top-level certification authority\"\
    \ to all of\n      the signers in the signerInfos field.  There may be more\n\
    \      certificates than necessary, and there may be certificates\n      sufficient\
    \ to contain chains from two or more independent top-\n      level certification\
    \ authorities.  There may also be fewer\n      certificates than necessary, if\
    \ it is expected that recipients\n      have an alternate means of obtaining necessary\
    \ certificates (e.g.,\n      from a previous set of certificates).  As discussed\
    \ above, if\n      attribute certificates are present, then the value of version\n\
    \      shall be 3.\n      crls is a collection of certificate revocation lists\
    \ (CRLs).  It\n      is intended that the set contain information sufficient to\n\
    \      determine whether or not the certificates in the certificates\n      field\
    \ are valid, but such correspondence is not necessary.  There\n      may be more\
    \ CRLs than necessary, and there may also be fewer CRLs\n      than necessary.\n\
    \      signerInfos is a collection of per-signer information.  There may\n   \
    \   be any number of elements in the collection, including zero.  The\n      details\
    \ of the SignerInfo type are discussed in section 5.3.\n"
- title: 5.2  EncapsulatedContentInfo Type
  contents:
  - "5.2  EncapsulatedContentInfo Type\n   The content is represented in the type\
    \ EncapsulatedContentInfo:\n      EncapsulatedContentInfo ::= SEQUENCE {\n   \
    \     eContentType ContentType,\n        eContent [0] EXPLICIT OCTET STRING OPTIONAL\
    \ }\n      ContentType ::= OBJECT IDENTIFIER\n   The fields of type EncapsulatedContentInfo\
    \ have the following\n   meanings:\n      eContentType is an object identifier\
    \ that uniquely specifies the\n      content type.\n      eContent is the content\
    \ itself, carried as an octet string.  The\n      eContent need not be DER encoded.\n\
    \   The optional omission of the eContent within the\n   EncapsulatedContentInfo\
    \ field makes it possible to construct\n   \"external signatures.\"  In the case\
    \ of external signatures, the\n   content being signed is absent from the EncapsulatedContentInfo\
    \ value\n   included in the signed-data content type.  If the eContent value\n\
    \   within EncapsulatedContentInfo is absent, then the signatureValue is\n   calculated\
    \ and the eContentType is assigned as though the eContent\n   value was present.\n\
    \   In the degenerate case where there are no signers, the\n   EncapsulatedContentInfo\
    \ value being \"signed\" is irrelevant.  In this\n   case, the content type within\
    \ the EncapsulatedContentInfo value being\n   \"signed\" should be id-data (as\
    \ defined in section 4), and the content\n   field of the EncapsulatedContentInfo\
    \ value should be omitted.\n"
- title: 5.3  SignerInfo Type
  contents:
  - "5.3  SignerInfo Type\n   Per-signer information is represented in the type SignerInfo:\n\
    \      SignerInfo ::= SEQUENCE {\n        version CMSVersion,\n        sid SignerIdentifier,\n\
    \        digestAlgorithm DigestAlgorithmIdentifier,\n        signedAttrs [0] IMPLICIT\
    \ SignedAttributes OPTIONAL,\n        signatureAlgorithm SignatureAlgorithmIdentifier,\n\
    \        signature SignatureValue,\n        unsignedAttrs [1] IMPLICIT UnsignedAttributes\
    \ OPTIONAL }\n      SignerIdentifier ::= CHOICE {\n        issuerAndSerialNumber\
    \ IssuerAndSerialNumber,\n        subjectKeyIdentifier [0] SubjectKeyIdentifier\
    \ }\n      SignedAttributes ::= SET SIZE (1..MAX) OF Attribute\n      UnsignedAttributes\
    \ ::= SET SIZE (1..MAX) OF Attribute\n      Attribute ::= SEQUENCE {\n       \
    \ attrType OBJECT IDENTIFIER,\n        attrValues SET OF AttributeValue }\n  \
    \    AttributeValue ::= ANY\n      SignatureValue ::= OCTET STRING\n   The fields\
    \ of type SignerInfo have the following meanings:\n      version is the syntax\
    \ version number.  If the SignerIdentifier is\n      the CHOICE issuerAndSerialNumber,\
    \ then the version shall be 1.  If\n      the SignerIdentifier is subjectKeyIdentifier,\
    \ then the version\n      shall be 3.\n      sid specifies the signer's certificate\
    \ (and thereby the signer's\n      public key).  The signer's public key is needed\
    \ by the recipient\n      to verify the signature.  SignerIdentifier provides\
    \ two\n      alternatives for specifying the signer's public key.  The\n     \
    \ issuerAndSerialNumber alternative identifies the signer's\n      certificate\
    \ by the issuer's distinguished name and the certificate\n      serial number;\
    \ the subjectKeyIdentifier identifies the signer's\n      certificate by the X.509\
    \ subjectKeyIdentifier extension value.\n      digestAlgorithm identifies the\
    \ message digest algorithm, and any\n      associated parameters, used by the\
    \ signer.  The message digest is\n      computed on either the content being signed\
    \ or the content\n      together with the signed attributes using the process\
    \ described in\n      section 5.4.  The message digest algorithm should be among\
    \ those\n      listed in the digestAlgorithms field of the associated SignerData.\n\
    \      signedAttributes is a collection of attributes that are signed.\n     \
    \ The field is optional, but it must be present if the content type\n      of\
    \ the EncapsulatedContentInfo value being signed is not id-data.\n      Each SignedAttribute\
    \ in the SET must be DER encoded.  Useful\n      attribute types, such as signing\
    \ time, are defined in Section 11.\n      If the field is present, it must contain,\
    \ at a minimum, the\n      following two attributes:\n         A content-type\
    \ attribute having as its value the content type\n         of the EncapsulatedContentInfo\
    \ value being signed.  Section\n         11.1 defines the content-type attribute.\
    \  The content-type\n         attribute is not required when used as part of a\n\
    \         countersignature unsigned attribute as defined in section 11.4.\n  \
    \       A message-digest attribute, having as its value the message\n        \
    \ digest of the content.  Section 11.2 defines the message-digest\n         attribute.\n\
    \      signatureAlgorithm identifies the signature algorithm, and any\n      associated\
    \ parameters, used by the signer to generate the digital\n      signature.\n \
    \     signature is the result of digital signature generation, using the\n   \
    \   message digest and the signer's private key.\n      unsignedAttributes is\
    \ a collection of attributes that are not\n      signed.  The field is optional.\
    \  Useful attribute types, such as\n      countersignatures, are defined in Section\
    \ 11.\n   The fields of type SignedAttribute and UnsignedAttribute have the\n\
    \   following meanings:\n      attrType indicates the type of attribute.  It is\
    \ an object\n      identifier.\n      attrValues is a set of values that comprise\
    \ the attribute.  The\n      type of each value in the set can be determined uniquely\
    \ by\n      attrType.\n"
- title: 5.4  Message Digest Calculation Process
  contents:
  - "5.4  Message Digest Calculation Process\n   The message digest calculation process\
    \ computes a message digest on\n   either the content being signed or the content\
    \ together with the\n   signed attributes.  In either case, the initial input\
    \ to the message\n   digest calculation process is the \"value\" of the encapsulated\
    \ content\n   being signed.  Specifically, the initial input is the\n   encapContentInfo\
    \ eContent OCTET STRING to which the signing process\n   is applied.  Only the\
    \ octets comprising the value of the eContent\n   OCTET STRING are input to the\
    \ message digest algorithm, not the tag\n   or the length octets.\n   The result\
    \ of the message digest calculation process depends on\n   whether the signedAttributes\
    \ field is present.  When the field is\n   absent, the result is just the message\
    \ digest of the content as\n   described above.  When the field is present, however,\
    \ the result is\n   the message digest of the complete DER encoding of the\n \
    \  SignedAttributes value contained in the signedAttributes field.\n   Since the\
    \ SignedAttributes value, when present, must contain the\n   content type and\
    \ the content message digest attributes, those values\n   are indirectly included\
    \ in the result.  The content type attribute is\n   not required when used as\
    \ part of a countersignature unsigned\n   attribute as defined in section 11.4.\
    \  A separate encoding of the\n   signedAttributes field is performed for message\
    \ digest calculation.\n   The IMPLICIT [0] tag in the signedAttributes field is\
    \ not used for\n   the DER encoding, rather an EXPLICIT SET OF tag is used.  That\
    \ is,\n   the DER encoding of the SET OF tag, rather than of the IMPLICIT [0]\n\
    \   tag, is to be included in the message digest calculation along with\n   the\
    \ length and content octets of the SignedAttributes value.\n   When the signedAttributes\
    \ field is absent, then only the octets\n   comprising the value of the signedData\
    \ encapContentInfo eContent\n   OCTET STRING (e.g., the contents of a file) are\
    \ input to the message\n   digest calculation.  This has the advantage that the\
    \ length of the\n   content being signed need not be known in advance of the signature\n\
    \   generation process.\n   Although the encapContentInfo eContent OCTET STRING\
    \ tag and length\n   octets are not included in the message digest calculation,\
    \ they are\n   still protected by other means.  The length octets are protected\
    \ by\n   the nature of the message digest algorithm since it is\n   computationally\
    \ infeasible to find any two distinct messages of any\n   length that have the\
    \ same message digest.\n"
- title: 5.5  Message Signature Generation Process
  contents:
  - "5.5  Message Signature Generation Process\n   The input to the signature generation\
    \ process includes the result of\n   the message digest calculation process and\
    \ the signer's private key.\n   The details of the signature generation depend\
    \ on the signature\n   algorithm employed.  The object identifier, along with\
    \ any\n   parameters, that specifies the signature algorithm employed by the\n\
    \   signer is carried in the signatureAlgorithm field.  The signature\n   value\
    \ generated by the signer is encoded as an OCTET STRING and\n   carried in the\
    \ signature field.\n"
- title: 5.6  Message Signature Verification Process
  contents:
  - "5.6  Message Signature Verification Process\n   The input to the signature verification\
    \ process includes the result\n   of the message digest calculation process and\
    \ the signer's public\n   key.  The recipient may obtain the correct public key\
    \ for the signer\n   by any means, but the preferred method is from a certificate\
    \ obtained\n   from the SignedData certificates field.  The selection and validation\n\
    \   of the signer's public key may be based on certification path\n   validation\
    \ (see [PROFILE]) as well as other external context, but is\n   beyond the scope\
    \ of this document.  The details of the signature\n   verification depend on the\
    \ signature algorithm employed.\n   The recipient may not rely on any message\
    \ digest values computed by\n   the originator.  If the signedData signerInfo\
    \ includes\n   signedAttributes, then the content message digest must be calculated\n\
    \   as described in section 5.4.  For the signature to be valid, the\n   message\
    \ digest value calculated by the recipient must be the same as\n   the value of\
    \ the messageDigest attribute included in the\n   signedAttributes of the signedData\
    \ signerInfo.\n"
- title: 6  Enveloped-data Content Type
  contents:
  - "6  Enveloped-data Content Type\n   The enveloped-data content type consists of\
    \ an encrypted content of\n   any type and encrypted content-encryption keys for\
    \ one or more\n   recipients.  The combination of the encrypted content and one\n\
    \   encrypted content-encryption key for a recipient is a \"digital\n   envelope\"\
    \ for that recipient.  Any type of content can be enveloped\n   for an arbitrary\
    \ number of recipients using any of the three key\n   management techniques for\
    \ each recipient.\n   The typical application of the enveloped-data content type\
    \ will\n   represent one or more recipients' digital envelopes on content of the\n\
    \   data or signed-data content types.\n   Enveloped-data is constructed by the\
    \ following steps:\n      1.  A content-encryption key for a particular content-encryption\n\
    \      algorithm is generated at random.\n      2.  The content-encryption key\
    \ is encrypted for each recipient.\n      The details of this encryption depend\
    \ on the key management\n      algorithm used, but three general techniques are\
    \ supported:\n         key transport:  the content-encryption key is encrypted\
    \ in the\n         recipient's public key;\n         key agreement:  the recipient's\
    \ public key and the sender's\n         private key are used to generate a pairwise\
    \ symmetric key, then\n         the content-encryption key is encrypted in the\
    \ pairwise\n         symmetric key; and\n         symmetric key-encryption keys:\
    \  the content-encryption key is\n         encrypted in a previously distributed\
    \ symmetric key-encryption\n         key.\n      3.  For each recipient, the encrypted\
    \ content-encryption key and\n      other recipient-specific information are collected\
    \ into a\n      RecipientInfo value, defined in Section 6.2.\n      4.  The content\
    \ is encrypted with the content-encryption key.\n      Content encryption may\
    \ require that the content be padded to a\n      multiple of some block size;\
    \ see Section 6.3.\n      5.  The RecipientInfo values for all the recipients\
    \ are collected\n      together with the encrypted content to form an EnvelopedData\
    \ value\n      as defined in Section 6.1.\n   A recipient opens the digital envelope\
    \ by decrypting one of the\n   encrypted content-encryption keys and then decrypting\
    \ the encrypted\n   content with the recovered content-encryption key.\n   This\
    \ section is divided into four parts.  The first part describes\n   the top-level\
    \ type EnvelopedData, the second part describes the per-\n   recipient information\
    \ type RecipientInfo, and the third and fourth\n   parts describe the content-encryption\
    \ and key-encryption processes.\n"
- title: 6.1  EnvelopedData Type
  contents:
  - "6.1  EnvelopedData Type\n   The following object identifier identifies the enveloped-data\
    \ content\n   type:\n      id-envelopedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n\
    \          us(840) rsadsi(113549) pkcs(1) pkcs7(7) 3 }\n   The enveloped-data\
    \ content type shall have ASN.1 type EnvelopedData:\n      EnvelopedData ::= SEQUENCE\
    \ {\n        version CMSVersion,\n        originatorInfo [0] IMPLICIT OriginatorInfo\
    \ OPTIONAL,\n        recipientInfos RecipientInfos,\n        encryptedContentInfo\
    \ EncryptedContentInfo,\n        unprotectedAttrs [1] IMPLICIT UnprotectedAttributes\
    \ OPTIONAL }\n      OriginatorInfo ::= SEQUENCE {\n        certs [0] IMPLICIT\
    \ CertificateSet OPTIONAL,\n        crls [1] IMPLICIT CertificateRevocationLists\
    \ OPTIONAL }\n      RecipientInfos ::= SET OF RecipientInfo\n      EncryptedContentInfo\
    \ ::= SEQUENCE {\n        contentType ContentType,\n        contentEncryptionAlgorithm\
    \ ContentEncryptionAlgorithmIdentifier,\n        encryptedContent [0] IMPLICIT\
    \ EncryptedContent OPTIONAL }\n      EncryptedContent ::= OCTET STRING\n     \
    \ UnprotectedAttributes ::= SET SIZE (1..MAX) OF Attribute\n   The fields of type\
    \ EnvelopedData have the following meanings:\n      version is the syntax version\
    \ number.  If originatorInfo is\n      present, then version shall be 2.  If any\
    \ of the RecipientInfo\n      structures included have a version other than 0,\
    \ then the version\n      shall be 2.  If unprotectedAttrs is present, then version\
    \ shall be\n      2.  If originatorInfo is absent, all of the RecipientInfo\n\
    \      structures are version 0, and unprotectedAttrs is absent, then\n      version\
    \ shall be 0.\n      originatorInfo optionally provides information about the\n\
    \      originator.  It is present only if required by the key management\n   \
    \   algorithm.  It may contain certificates and CRLs:\n         certs is a collection\
    \ of certificates.  certs may contain\n         originator certificates associated\
    \ with several different key\n         management algorithms.  certs may also\
    \ contain attribute\n         certificates associated with the originator.  The\
    \ certificates\n         contained in certs are intended to be sufficient to make\
    \ chains\n         from a recognized \"root\" or \"top-level certification authority\"\
    \n         to all recipients.  However, certs may contain more\n         certificates\
    \ than necessary, and there may be certificates\n         sufficient to make chains\
    \ from two or more independent top-\n         level certification authorities.\
    \  Alternatively, certs may\n         contain fewer certificates than necessary,\
    \ if it is expected\n         that recipients have an alternate means of obtaining\
    \ necessary\n         certificates (e.g., from a previous set of certificates).\n\
    \         crls is a collection of CRLs.  It is intended that the set\n       \
    \  contain information sufficient to determine whether or not the\n         certificates\
    \ in the certs field are valid, but such\n         correspondence is not necessary.\
    \  There may be more CRLs than\n         necessary, and there may also be fewer\
    \ CRLs than necessary.\n      recipientInfos is a collection of per-recipient\
    \ information.\n      There must be at least one element in the collection.\n\
    \      encryptedContentInfo is the encrypted content information.\n      unprotectedAttrs\
    \ is a collection of attributes that are not\n      encrypted.  The field is optional.\
    \  Useful attribute types are\n      defined in Section 11.\n   The fields of\
    \ type EncryptedContentInfo have the following meanings:\n      contentType indicates\
    \ the type of content.\n      contentEncryptionAlgorithm identifies the content-encryption\n\
    \      algorithm, and any associated parameters, used to encrypt the\n      content.\
    \  The content-encryption process is described in Section\n      6.3.  The same\
    \ content-encryption algorithm and content-encryption\n      key is used for all\
    \ recipients.\n      encryptedContent is the result of encrypting the content.\
    \  The\n      field is optional, and if the field is not present, its intended\n\
    \      value must be supplied by other means.\n   The recipientInfos field comes\
    \ before the encryptedContentInfo field\n   so that an EnvelopedData value may\
    \ be processed in a single pass.\n"
- title: 6.2  RecipientInfo Type
  contents:
  - "6.2  RecipientInfo Type\n   Per-recipient information is represented in the type\
    \ RecipientInfo.\n   RecipientInfo has a different format for the three key management\n\
    \   techniques that are supported: key transport, key agreement, and\n   previously\
    \ distributed symmetric key-encryption keys.  Any of the\n   three key management\
    \ techniques can be used for each recipient of the\n   same encrypted content.\
    \  In all cases, the content-encryption key is\n   transferred to one or more\
    \ recipient in encrypted form.\n      RecipientInfo ::= CHOICE {\n        ktri\
    \ KeyTransRecipientInfo,\n        kari [1] KeyAgreeRecipientInfo,\n        kekri\
    \ [2] KEKRecipientInfo }\n      EncryptedKey ::= OCTET STRING\n"
- title: 6.2.1  KeyTransRecipientInfo Type
  contents:
  - "6.2.1  KeyTransRecipientInfo Type\n   Per-recipient information using key transport\
    \ is represented in the\n   type KeyTransRecipientInfo.  Each instance of KeyTransRecipientInfo\n\
    \   transfers the content-encryption key to one recipient.\n      KeyTransRecipientInfo\
    \ ::= SEQUENCE {\n        version CMSVersion,  -- always set to 0 or 2\n     \
    \   rid RecipientIdentifier,\n        keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\n\
    \        encryptedKey EncryptedKey }\n      RecipientIdentifier ::= CHOICE {\n\
    \        issuerAndSerialNumber IssuerAndSerialNumber,\n        subjectKeyIdentifier\
    \ [0] SubjectKeyIdentifier }\n   The fields of type KeyTransRecipientInfo have\
    \ the following meanings:\n      version is the syntax version number.  If the\
    \ RecipientIdentifier\n      is the CHOICE issuerAndSerialNumber, then the version\
    \ shall be 0.\n      If the RecipientIdentifier is subjectKeyIdentifier, then\
    \ the\n      version shall be 2.\n      rid specifies the recipient's certificate\
    \ or key that was used by\n      the sender to protect the content-encryption\
    \ key.  The\n      RecipientIdentifier provides two alternatives for specifying\
    \ the\n      recipient's certificate, and thereby the recipient's public key.\n\
    \      The recipient's certificate must contain a key transport public\n     \
    \ key.  The content-encryption key is encrypted with the recipient's\n      public\
    \ key.  The issuerAndSerialNumber alternative identifies the\n      recipient's\
    \ certificate by the issuer's distinguished name and the\n      certificate serial\
    \ number; the subjectKeyIdentifier identifies the\n      recipient's certificate\
    \ by the X.509 subjectKeyIdentifier\n      extension value.\n      keyEncryptionAlgorithm\
    \ identifies the key-encryption algorithm,\n      and any associated parameters,\
    \ used to encrypt the content-\n      encryption key for the recipient.  The key-encryption\
    \ process is\n      described in Section 6.4.\n      encryptedKey is the result\
    \ of encrypting the content-encryption\n      key for the recipient.\n"
- title: 6.2.2  KeyAgreeRecipientInfo Type
  contents:
  - "6.2.2  KeyAgreeRecipientInfo Type\n   Recipient information using key agreement\
    \ is represented in the type\n   KeyAgreeRecipientInfo.  Each instance of KeyAgreeRecipientInfo\
    \ will\n   transfer the content-encryption key to one or more recipient that\n\
    \   uses the same key agreement algorithm and domain parameters for that\n   algorithm.\n\
    \      KeyAgreeRecipientInfo ::= SEQUENCE {\n        version CMSVersion,  -- always\
    \ set to 3\n        originator [0] EXPLICIT OriginatorIdentifierOrKey,\n     \
    \   ukm [1] EXPLICIT UserKeyingMaterial OPTIONAL,\n        keyEncryptionAlgorithm\
    \ KeyEncryptionAlgorithmIdentifier,\n        recipientEncryptedKeys RecipientEncryptedKeys\
    \ }\n      OriginatorIdentifierOrKey ::= CHOICE {\n        issuerAndSerialNumber\
    \ IssuerAndSerialNumber,\n        subjectKeyIdentifier [0] SubjectKeyIdentifier,\n\
    \        originatorKey [1] OriginatorPublicKey }\n      OriginatorPublicKey ::=\
    \ SEQUENCE {\n        algorithm AlgorithmIdentifier,\n        publicKey BIT STRING\
    \ }\n      RecipientEncryptedKeys ::= SEQUENCE OF RecipientEncryptedKey\n    \
    \  RecipientEncryptedKey ::= SEQUENCE {\n        rid KeyAgreeRecipientIdentifier,\n\
    \        encryptedKey EncryptedKey }\n      KeyAgreeRecipientIdentifier ::= CHOICE\
    \ {\n        issuerAndSerialNumber IssuerAndSerialNumber,\n        rKeyId [0]\
    \ IMPLICIT RecipientKeyIdentifier }\n      RecipientKeyIdentifier ::= SEQUENCE\
    \ {\n        subjectKeyIdentifier SubjectKeyIdentifier,\n        date GeneralizedTime\
    \ OPTIONAL,\n        other OtherKeyAttribute OPTIONAL }\n      SubjectKeyIdentifier\
    \ ::= OCTET STRING\n   The fields of type KeyAgreeRecipientInfo have the following\
    \ meanings:\n      version is the syntax version number.  It shall always be 3.\n\
    \      originator is a CHOICE with three alternatives specifying the\n      sender's\
    \ key agreement public key.  The sender uses the\n      corresponding private\
    \ key and the recipient's public key to\n      generate a pairwise key.  The content-encryption\
    \ key is encrypted\n      in the pairwise key.  The issuerAndSerialNumber alternative\n\
    \      identifies the sender's certificate, and thereby the sender's\n      public\
    \ key, by the issuer's distinguished name and the certificate\n      serial number.\
    \  The subjectKeyIdentifier alternative identifies\n      the sender's certificate,\
    \ and thereby the sender's public key, by\n      the X.509 subjectKeyIdentifier\
    \ extension value.  The originatorKey\n      alternative includes the algorithm\
    \ identifier and sender's key\n      agreement public key. Permitting originator\
    \ anonymity since the\n      public key is not certified.\n      ukm is optional.\
    \  With some key agreement algorithms, the sender\n      provides a User Keying\
    \ Material (UKM) to ensure that a different\n      key is generated each time\
    \ the same two parties generate a\n      pairwise key.\n      keyEncryptionAlgorithm\
    \ identifies the key-encryption algorithm,\n      and any associated parameters,\
    \ used to encrypt the content-\n      encryption key in the key-encryption key.\
    \  The key-encryption\n      process is described in Section 6.4.\n      recipientEncryptedKeys\
    \ includes a recipient identifier and\n      encrypted key for one or more recipients.\
    \  The\n      KeyAgreeRecipientIdentifier is a CHOICE with two alternatives\n\
    \      specifying the recipient's certificate, and thereby the\n      recipient's\
    \ public key, that was used by the sender to generate a\n      pairwise key-encryption\
    \ key.  The recipient's certificate must\n      contain a key agreement public\
    \ key.  The content-encryption key is\n      encrypted in the pairwise key-encryption\
    \ key.  The\n      issuerAndSerialNumber alternative identifies the recipient's\n\
    \      certificate by the issuer's distinguished name and the certificate\n  \
    \    serial number; the RecipientKeyIdentifier is described below.  The\n    \
    \  encryptedKey is the result of encrypting the content-encryption\n      key\
    \ in the pairwise key-encryption key generated using the key\n      agreement\
    \ algorithm.\n   The fields of type RecipientKeyIdentifier have the following\n\
    \   meanings:\n      subjectKeyIdentifier identifies the recipient's certificate\
    \ by the\n      X.509 subjectKeyIdentifier extension value.\n      date is optional.\
    \  When present, the date specifies which of the\n      recipient's previously\
    \ distributed UKMs was used by the sender.\n      other is optional.  When present,\
    \ this field contains additional\n      information used by the recipient to locate\
    \ the public keying\n      material used by the sender.\n"
- title: 6.2.3  KEKRecipientInfo Type
  contents:
  - "6.2.3  KEKRecipientInfo Type\n   Recipient information using previously distributed\
    \ symmetric keys is\n   represented in the type KEKRecipientInfo.  Each instance\
    \ of\n   KEKRecipientInfo will transfer the content-encryption key to one or\n\
    \   more recipients who have the previously distributed key-encryption\n   key.\n\
    \      KEKRecipientInfo ::= SEQUENCE {\n        version CMSVersion,  -- always\
    \ set to 4\n        kekid KEKIdentifier,\n        keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\n\
    \        encryptedKey EncryptedKey }\n      KEKIdentifier ::= SEQUENCE {\n   \
    \     keyIdentifier OCTET STRING,\n        date GeneralizedTime OPTIONAL,\n  \
    \      other OtherKeyAttribute OPTIONAL }\n   The fields of type KEKRecipientInfo\
    \ have the following meanings:\n      version is the syntax version number.  It\
    \ shall always be 4.\n      kekid specifies a symmetric key-encryption key that\
    \ was previously\n      distributed to the sender and one or more recipients.\n\
    \      keyEncryptionAlgorithm identifies the key-encryption algorithm,\n     \
    \ and any associated parameters, used to encrypt the content-\n      encryption\
    \ key with the key-encryption key.  The key-encryption\n      process is described\
    \ in Section 6.4.\n      encryptedKey is the result of encrypting the content-encryption\n\
    \      key in the key-encryption key.\n   The fields of type KEKIdentifier have\
    \ the following meanings:\n      keyIdentifier identifies the key-encryption key\
    \ that was\n      previously distributed to the sender and one or more recipients.\n\
    \      date is optional.  When present, the date specifies a single key-\n   \
    \   encryption key from a set that was previously distributed.\n      other is\
    \ optional.  When present, this field contains additional\n      information used\
    \ by the recipient to determine the key-encryption\n      key used by the sender.\n"
- title: 6.3  Content-encryption Process
  contents:
  - "6.3  Content-encryption Process\n   The content-encryption key for the desired\
    \ content-encryption\n   algorithm is randomly generated.  The data to be protected\
    \ is padded\n   as described below, then the padded data is encrypted using the\n\
    \   content-encryption key.  The encryption operation maps an arbitrary\n   string\
    \ of octets (the data) to another string of octets (the\n   ciphertext) under\
    \ control of a content-encryption key.  The encrypted\n   data is included in\
    \ the envelopedData encryptedContentInfo\n   encryptedContent OCTET STRING.\n\
    \   The input to the content-encryption process is the \"value\" of the\n   content\
    \ being enveloped.  Only the value octets of the envelopedData\n   encryptedContentInfo\
    \ encryptedContent OCTET STRING are encrypted; the\n   OCTET STRING tag and length\
    \ octets are not encrypted.\n   Some content-encryption algorithms assume the\
    \ input length is a\n   multiple of k octets, where k is greater than one.  For\
    \ such\n   algorithms, the input shall be padded at the trailing end with\n  \
    \ k-(lth mod k) octets all having value k-(lth mod k), where lth is\n   the length\
    \ of the input.  In other words, the input is padded at\n   the trailing end with\
    \ one of the following strings:\n                     01 -- if lth mod k = k-1\n\
    \                  02 02 -- if lth mod k = k-2\n                      .\n    \
    \                  .\n                      .\n            k k ... k k -- if lth\
    \ mod k = 0\n   The padding can be removed unambiguously since all input is padded,\n\
    \   including input values that are already a multiple of the block size,\n  \
    \ and no padding string is a suffix of another.  This padding method is\n   well\
    \ defined if and only if k is less than 256.\n"
- title: 6.4  Key-encryption Process
  contents:
  - "6.4  Key-encryption Process\n   The input to the key-encryption process -- the\
    \ value supplied to the\n   recipient's key-encryption algorithm -- is just the\
    \ \"value\" of the\n   content-encryption key.\n   Any of the three key management\
    \ techniques can be used for each\n   recipient of the same encrypted content.\n"
- title: 7  Digested-data Content Type
  contents:
  - "7  Digested-data Content Type\n   The digested-data content type consists of\
    \ content of any type and a\n   message digest of the content.\n   Typically,\
    \ the digested-data content type is used to provide content\n   integrity, and\
    \ the result generally becomes an input to the\n   enveloped-data content type.\n\
    \   The following steps construct digested-data:\n      1.  A message digest is\
    \ computed on the content with a message-\n      digest algorithm.\n      2. \
    \ The message-digest algorithm and the message digest are\n      collected together\
    \ with the content into a DigestedData value.\n   A recipient verifies the message\
    \ digest by comparing the message\n   digest to an independently computed message\
    \ digest.\n   The following object identifier identifies the digested-data content\n\
    \   type:\n      id-digestedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n\
    \          us(840) rsadsi(113549) pkcs(1) pkcs7(7) 5 }\n   The digested-data content\
    \ type shall have ASN.1 type DigestedData:\n      DigestedData ::= SEQUENCE {\n\
    \        version CMSVersion,\n        digestAlgorithm DigestAlgorithmIdentifier,\n\
    \        encapContentInfo EncapsulatedContentInfo,\n        digest Digest }\n\
    \      Digest ::= OCTET STRING\n   The fields of type DigestedData have the following\
    \ meanings:\n      version is the syntax version number.  If the encapsulated\
    \ content\n      type is id-data, then the value of version shall be 0; however,\
    \ if\n      the encapsulated content type is other than id-data, then the\n  \
    \    value of version shall be 2.\n      digestAlgorithm identifies the message\
    \ digest algorithm, and any\n      associated parameters, under which the content\
    \ is digested.  The\n      message-digesting process is the same as in Section\
    \ 5.4 in the\n      case when there are no signed attributes.\n      encapContentInfo\
    \ is the content that is digested, as defined in\n      section 5.2.\n      digest\
    \ is the result of the message-digesting process.\n   The ordering of the digestAlgorithm\
    \ field, the encapContentInfo\n   field, and the digest field makes it possible\
    \ to process a\n   DigestedData value in a single pass.\n"
- title: 8  Encrypted-data Content Type
  contents:
  - "8  Encrypted-data Content Type\n   The encrypted-data content type consists of\
    \ encrypted content of any\n   type.  Unlike the enveloped-data content type,\
    \ the encrypted-data\n   content type has neither recipients nor encrypted content-encryption\n\
    \   keys.  Keys must be managed by other means.\n   The typical application of\
    \ the encrypted-data content type will be to\n   encrypt the content of the data\
    \ content type for local storage,\n   perhaps where the encryption key is a password.\n\
    \   The following object identifier identifies the encrypted-data content\n  \
    \ type:\n      id-encryptedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n\
    \          us(840) rsadsi(113549) pkcs(1) pkcs7(7) 6 }\n   The encrypted-data\
    \ content type shall have ASN.1 type EncryptedData:\n      EncryptedData ::= SEQUENCE\
    \ {\n        version CMSVersion,\n        encryptedContentInfo EncryptedContentInfo,\n\
    \        unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL }\n   The\
    \ fields of type EncryptedData have the following meanings:\n      version is\
    \ the syntax version number.  If unprotectedAttrs is\n      present, then version\
    \ shall be 2.  If unprotectedAttrs is absent,\n      then version shall be 0.\n\
    \      encryptedContentInfo is the encrypted content information, as\n      defined\
    \ in Section 6.1.\n      unprotectedAttrs is a collection of attributes that are\
    \ not\n      encrypted.  The field is optional.  Useful attribute types are\n\
    \      defined in Section 11.\n"
- title: 9  Authenticated-data Content Type
  contents:
  - "9  Authenticated-data Content Type\n   The authenticated-data content type consists\
    \ of content of any type,\n   a message authentication code (MAC), and encrypted\
    \ authentication\n   keys for one or more recipients.  The combination of the\
    \ MAC and one\n   encrypted authentication key for a recipient is necessary for\
    \ that\n   recipient to verify the integrity of the content.  Any type of\n  \
    \ content can be integrity protected for an arbitrary number of\n   recipients.\n\
    \   The process by which authenticated-data is constructed involves the\n   following\
    \ steps:\n      1.  A message-authentication key for a particular message-\n \
    \     authentication algorithm is generated at random.\n      2.  The message-authentication\
    \ key is encrypted for each\n      recipient.  The details of this encryption\
    \ depend on the key\n      management algorithm used.\n      3.  For each recipient,\
    \ the encrypted message-authentication key\n      and other recipient-specific\
    \ information are collected into a\n      RecipientInfo value, defined in Section\
    \ 6.2.\n      4.  Using the message-authentication key, the originator computes\n\
    \      a MAC value on the content.  If the originator is authenticating\n    \
    \  any information in addition to the content (see Section 9.2), a\n      message\
    \ digest is calculated on the content, the message digest of\n      the content\
    \ and the other information are authenticated using the\n      message-authentication\
    \ key, and the result becomes the \"MAC\n      value.\"\n"
- title: 9.1  AuthenticatedData Type
  contents:
  - "9.1  AuthenticatedData Type\n   The following object identifier identifies the\
    \ authenticated-data\n   content type:\n      id-ct-authData OBJECT IDENTIFIER\
    \ ::= { iso(1) member-body(2)\n          us(840) rsadsi(113549) pkcs(1) pkcs-9(9)\
    \ smime(16)\n          ct(1) 2 }\n   The authenticated-data content type shall\
    \ have ASN.1 type\n   AuthenticatedData:\n      AuthenticatedData ::= SEQUENCE\
    \ {\n        version CMSVersion,\n        originatorInfo [0] IMPLICIT OriginatorInfo\
    \ OPTIONAL,\n        recipientInfos RecipientInfos,\n        macAlgorithm MessageAuthenticationCodeAlgorithm,\n\
    \        digestAlgorithm [1] DigestAlgorithmIdentifier OPTIONAL,\n        encapContentInfo\
    \ EncapsulatedContentInfo,\n        authenticatedAttributes [2] IMPLICIT AuthAttributes\
    \ OPTIONAL,\n        mac MessageAuthenticationCode,\n        unauthenticatedAttributes\
    \ [3] IMPLICIT UnauthAttributes OPTIONAL }\n      AuthAttributes ::= SET SIZE\
    \ (1..MAX) OF Attribute\n      UnauthAttributes ::= SET SIZE (1..MAX) OF Attribute\n\
    \      MessageAuthenticationCode ::= OCTET STRING\n   The fields of type AuthenticatedData\
    \ have the following meanings:\n      version is the syntax version number.  It\
    \ shall be 0.\n      originatorInfo optionally provides information about the\n\
    \      originator.  It is present only if required by the key management\n   \
    \   algorithm.  It may contain certificates, attribute certificates,\n      and\
    \ CRLs, as defined in Section 6.1.\n      recipientInfos is a collection of per-recipient\
    \ information, as\n      defined in Section 6.1.  There must be at least one element\
    \ in the\n      collection.\n      macAlgorithm is a message authentication code\
    \ (MAC) algorithm\n      identifier.  It identifies the MAC algorithm, along with\
    \ any\n      associated parameters, used by the originator.  Placement of the\n\
    \      macAlgorithm field facilitates one-pass processing by the\n      recipient.\n\
    \      digestAlgorithm identifies the message digest algorithm, and any\n    \
    \  associated parameters, used to compute a message digest on the\n      encapsulated\
    \ content if authenticated attributes are present.  The\n      message digesting\
    \ process is described in Section 9.2.  Placement\n      of the digestAlgorithm\
    \ field facilitates one-pass processing by\n      the recipient.  If the digestAlgorithm\
    \ field is present, then the\n      authenticatedAttributes field must also be\
    \ present.\n      encapContentInfo is the content that is authenticated, as defined\n\
    \      in section 5.2.\n      authenticatedAttributes is a collection of authenticated\n\
    \      attributes.  The authenticatedAttributes structure is optional,\n     \
    \ but it must be present if the content type of the\n      EncapsulatedContentInfo\
    \ value being authenticated is not id-data.\n      If the authenticatedAttributes\
    \ field is present, then the\n      digestAlgorithm field must also be present.\
    \  Each\n      AuthenticatedAttribute in the SET must be DER encoded.  Useful\n\
    \      attribute types are defined in Section 11.  If the\n      authenticatedAttributes\
    \ field is present, it must contain, at a\n      minimum, the following two attributes:\n\
    \         A content-type attribute having as its value the content type\n    \
    \     of the EncapsulatedContentInfo value being authenticated.\n         Section\
    \ 11.1 defines the content-type attribute.\n         A message-digest attribute,\
    \ having as its value the message\n         digest of the content.  Section 11.2\
    \ defines the message-digest\n         attribute.\n      mac is the message authentication\
    \ code.\n      unauthenticatedAttributes is a collection of attributes that are\n\
    \      not authenticated.  The field is optional.  To date, no attributes\n  \
    \    have been defined for use as unauthenticated attributes, but other\n    \
    \  useful attribute types are defined in Section 11.\n"
- title: 9.2  MAC Generation
  contents:
  - "9.2  MAC Generation\n   The MAC calculation process computes a message authentication\
    \ code\n   (MAC) on either the message being authenticated or a message digest\n\
    \   of message being authenticated together with the originator's\n   authenticated\
    \ attributes.\n   If authenticatedAttributes field is absent, the input to the\
    \ MAC\n   calculation process is the value of the encapContentInfo eContent\n\
    \   OCTET STRING.  Only the octets comprising the value of the eContent\n   OCTET\
    \ STRING are input to the MAC algorithm; the tag and the length\n   octets are\
    \ omitted.  This has the advantage that the length of the\n   content being authenticated\
    \ need not be known in advance of the MAC\n   generation process.\n   If authenticatedAttributes\
    \ field is present, the content-type\n   attribute (as described in Section 11.1)\
    \ and the message-digest\n   attribute (as described in section 11.2) must be\
    \ included, and the\n   input to the MAC calculation process is the DER encoding\
    \ of\n   authenticatedAttributes.  A separate encoding of the\n   authenticatedAttributes\
    \ field is performed for message digest\n   calculation.  The IMPLICIT [2] tag\
    \ in the authenticatedAttributes\n   field is not used for the DER encoding, rather\
    \ an EXPLICIT SET OF tag\n   is used.  That is, the DER encoding of the SET OF\
    \ tag, rather than of\n   the IMPLICIT [2] tag, is to be included in the message\
    \ digest\n   calculation along with the length and content octets of the\n   authenticatedAttributes\
    \ value.\n   The message digest calculation process computes a message digest\
    \ on\n   the content being authenticated.  The initial input to the message\n\
    \   digest calculation process is the \"value\" of the encapsulated content\n\
    \   being authenticated.  Specifically, the input is the encapContentInfo\n  \
    \ eContent OCTET STRING to which the authentication process is applied.\n   Only\
    \ the octets comprising the value of the encapContentInfo eContent\n   OCTET STRING\
    \ are input to the message digest algorithm, not the tag\n   or the length octets.\
    \  This has the advantage that the length of the\n   content being authenticated\
    \ need not be known in advance.  Although\n   the encapContentInfo eContent OCTET\
    \ STRING tag and length octets are\n   not included in the message digest calculation,\
    \ they are still\n   protected by other means.  The length octets are protected\
    \ by the\n   nature of the message digest algorithm since it is computationally\n\
    \   infeasible to find any two distinct messages of any length that have\n   the\
    \ same message digest.\n   The input to the MAC calculation process includes the\
    \ MAC input data,\n   defined above, and an authentication key conveyed in a recipientInfo\n\
    \   structure.  The details of MAC calculation depend on the MAC\n   algorithm\
    \ employed (e.g., HMAC).  The object identifier, along with\n   any parameters,\
    \ that specifies the MAC algorithm employed by the\n   originator is carried in\
    \ the macAlgorithm field.  The MAC value\n   generated by the originator is encoded\
    \ as an OCTET STRING and carried\n   in the mac field.\n"
- title: 9.3  MAC Verification
  contents:
  - "9.3  MAC Verification\n   The input to the MAC verification process includes\
    \ the input data\n   (determined based on the presence or absence of the\n   authenticatedAttributes\
    \ field, as defined in 9.2), and the\n   authentication key conveyed in recipientInfo.\
    \  The details of the MAC\n   verification process depend on the MAC algorithm\
    \ employed.\n   The recipient may not rely on any MAC values or message digest\
    \ values\n   computed by the originator.  The content is authenticated as\n  \
    \ described in section 9.2.  If the originator includes authenticated\n   attributes,\
    \ then the content of the authenticatedAttributes is\n   authenticated as described\
    \ in section 9.2.  For authentication to\n   succeed, the message MAC value calculated\
    \ by the recipient must be\n   the same as the value of the mac field.  Similarly,\
    \ for\n   authentication to succeed when the authenticatedAttributes field is\n\
    \   present, the content message digest value calculated by the recipient\n  \
    \ must be the same as the message digest value included in the\n   authenticatedAttributes\
    \ message-digest attribute.\n"
- title: 10  Useful Types
  contents:
  - "10  Useful Types\n   This section is divided into two parts.  The first part\
    \ defines\n   algorithm identifiers, and the second part defines other useful\n\
    \   types.\n"
- title: 10.1  Algorithm Identifier Types
  contents:
  - "10.1  Algorithm Identifier Types\n   All of the algorithm identifiers have the\
    \ same type:\n   AlgorithmIdentifier.  The definition of AlgorithmIdentifier is\n\
    \   imported from X.509 [X.509-88].\n   There are many alternatives for each type\
    \ of algorithm listed.  For\n   each of these five types, Section 12 lists the\
    \ algorithms that must\n   be included in a CMS implementation.\n"
- title: 10.1.1  DigestAlgorithmIdentifier
  contents:
  - "10.1.1  DigestAlgorithmIdentifier\n   The DigestAlgorithmIdentifier type identifies\
    \ a message-digest\n   algorithm.  Examples include SHA-1, MD2, and MD5.  A message-digest\n\
    \   algorithm maps an octet string (the message) to another octet string\n   (the\
    \ message digest).\n      DigestAlgorithmIdentifier ::= AlgorithmIdentifier\n"
- title: 10.1.2  SignatureAlgorithmIdentifier
  contents:
  - "10.1.2  SignatureAlgorithmIdentifier\n   The SignatureAlgorithmIdentifier type\
    \ identifies a signature\n   algorithm.  Examples include DSS and RSA.  A signature\
    \ algorithm\n   supports signature generation and verification operations.  The\n\
    \   signature generation operation uses the message digest and the\n   signer's\
    \ private key to generate a signature value.  The signature\n   verification operation\
    \ uses the message digest and the signer's\n   public key to determine whether\
    \ or not a signature value is valid.\n   Context determines which operation is\
    \ intended.\n      SignatureAlgorithmIdentifier ::= AlgorithmIdentifier\n"
- title: 10.1.3  KeyEncryptionAlgorithmIdentifier
  contents:
  - "10.1.3  KeyEncryptionAlgorithmIdentifier\n   The KeyEncryptionAlgorithmIdentifier\
    \ type identifies a key-encryption\n   algorithm used to encrypt a content-encryption\
    \ key.  The encryption\n   operation maps an octet string (the key) to another\
    \ octet string (the\n   encrypted key) under control of a key-encryption key.\
    \  The decryption\n   operation is the inverse of the encryption operation.  Context\n\
    \   determines which operation is intended.\n   The details of encryption and\
    \ decryption depend on the key management\n   algorithm used.  Key transport,\
    \ key agreement, and previously\n   distributed symmetric key-encrypting keys\
    \ are supported.\n      KeyEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier\n"
- title: 10.1.4  ContentEncryptionAlgorithmIdentifier
  contents:
  - "10.1.4  ContentEncryptionAlgorithmIdentifier\n   The ContentEncryptionAlgorithmIdentifier\
    \ type identifies a content-\n   encryption algorithm.  Examples include Triple-DES\
    \ and RC2.  A\n   content-encryption algorithm supports encryption and decryption\n\
    \   operations.  The encryption operation maps an octet string (the\n   message)\
    \ to another octet string (the ciphertext) under control of a\n   content-encryption\
    \ key.  The decryption operation is the inverse of\n   the encryption operation.\
    \  Context determines which operation is\n   intended.\n      ContentEncryptionAlgorithmIdentifier\
    \ ::= AlgorithmIdentifier\n"
- title: 10.1.5  MessageAuthenticationCodeAlgorithm
  contents:
  - "10.1.5  MessageAuthenticationCodeAlgorithm\n   The MessageAuthenticationCodeAlgorithm\
    \ type identifies a message\n   authentication code (MAC) algorithm.  Examples\
    \ include DES-MAC and\n   HMAC.  A MAC algorithm supports generation and verification\n\
    \   operations.  The MAC generation and verification operations use the\n   same\
    \ symmetric key.  Context determines which operation is intended.\n      MessageAuthenticationCodeAlgorithm\
    \ ::= AlgorithmIdentifier\n"
- title: 10.2  Other Useful Types
  contents:
  - "10.2  Other Useful Types\n   This section defines types that are used other places\
    \ in the\n   document.  The types are not listed in any particular order.\n"
- title: 10.2.1  CertificateRevocationLists
  contents:
  - "10.2.1  CertificateRevocationLists\n   The CertificateRevocationLists type gives\
    \ a set of certificate\n   revocation lists (CRLs). It is intended that the set\
    \ contain\n   information sufficient to determine whether the certificates and\n\
    \   attribute certificates with which the set is associated are revoked\n   or\
    \ not.  However, there may be more CRLs than necessary or there may\n   be fewer\
    \ CRLs than necessary.\n   The CertificateList may contain a CRL, an Authority\
    \ Revocation List\n   (ARL), a Delta Revocation List, or an Attribute Certificate\n\
    \   Revocation List.  All of these lists share a common syntax.\n   CRLs are specified\
    \ in X.509 [X.509-97], and they are profiled for use\n   in the Internet in RFC\
    \ 2459 [PROFILE].\n   The definition of CertificateList is imported from X.509.\n\
    \      CertificateRevocationLists ::= SET OF CertificateList\n"
- title: 10.2.2  CertificateChoices
  contents:
  - "10.2.2  CertificateChoices\n   The CertificateChoices type gives either a PKCS\
    \ #6 extended\n   certificate [PKCS#6], an X.509 certificate, or an X.509 attribute\n\
    \   certificate [X.509-97].  The PKCS #6 extended certificate is\n   obsolete.\
    \  PKCS #6 certificates are included for backward\n   compatibility, and their\
    \ use should be avoided.  The Internet profile\n   of X.509 certificates is specified\
    \ in the \"Internet X.509 Public Key\n   Infrastructure: Certificate and CRL Profile\"\
    \ [PROFILE].\n   The definitions of Certificate and AttributeCertificate are imported\n\
    \   from X.509.\n      CertificateChoices ::= CHOICE {\n         certificate Certificate,\
    \                 -- See X.509\n         extendedCertificate [0] IMPLICIT ExtendedCertificate,\n\
    \                                                  -- Obsolete\n         attrCert\
    \ [1] IMPLICIT AttributeCertificate }\n                                      \
    \            -- See X.509 and X9.57\n"
- title: 10.2.3  CertificateSet
  contents:
  - "10.2.3  CertificateSet\n   The CertificateSet type provides a set of certificates.\
    \  It is\n   intended that the set be sufficient to contain chains from a\n  \
    \ recognized \"root\" or \"top-level certification authority\" to all of\n   the\
    \ sender certificates with which the set is associated.  However,\n   there may\
    \ be more certificates than necessary, or there may be fewer\n   than necessary.\n\
    \   The precise meaning of a \"chain\" is outside the scope of this\n   document.\
    \  Some applications may impose upper limits on the length of\n   a chain; others\
    \ may enforce certain relationships between the\n   subjects and issuers of certificates\
    \ within a chain.\n      CertificateSet ::= SET OF CertificateChoices\n"
- title: 10.2.4  IssuerAndSerialNumber
  contents:
  - "10.2.4  IssuerAndSerialNumber\n   The IssuerAndSerialNumber type identifies a\
    \ certificate, and thereby\n   an entity and a public key, by the distinguished\
    \ name of the\n   certificate issuer and an issuer-specific certificate serial\
    \ number.\n   The definition of Name is imported from X.501 [X.501-88], and the\n\
    \   definition of CertificateSerialNumber is imported from X.509\n   [X.509-97].\n\
    \      IssuerAndSerialNumber ::= SEQUENCE {\n        issuer Name,\n        serialNumber\
    \ CertificateSerialNumber }\n      CertificateSerialNumber ::= INTEGER\n"
- title: 10.2.5  CMSVersion
  contents:
  - "10.2.5  CMSVersion\n   The Version type gives a syntax version number, for compatibility\n\
    \   with future revisions of this document.\n      CMSVersion ::= INTEGER  { v0(0),\
    \ v1(1), v2(2), v3(3), v4(4) }\n"
- title: 10.2.6  UserKeyingMaterial
  contents:
  - "10.2.6  UserKeyingMaterial\n   The UserKeyingMaterial type gives a syntax for\
    \ user keying material\n   (UKM).  Some key agreement algorithms require UKMs\
    \ to ensure that a\n   different key is generated each time the same two parties\
    \ generate a\n   pairwise key.  The sender provides a UKM for use with a specific\
    \ key\n   agreement algorithm.\n      UserKeyingMaterial ::= OCTET STRING\n"
- title: 10.2.7  OtherKeyAttribute
  contents:
  - "10.2.7  OtherKeyAttribute\n   The OtherKeyAttribute type gives a syntax for the\
    \ inclusion of other\n   key attributes that permit the recipient to select the\
    \ key used by\n   the sender.  The attribute object identifier must be registered\
    \ along\n   with the syntax of the attribute itself.  Use of this structure\n\
    \   should be avoided since it may impede interoperability.\n      OtherKeyAttribute\
    \ ::= SEQUENCE {\n        keyAttrId OBJECT IDENTIFIER,\n        keyAttr ANY DEFINED\
    \ BY keyAttrId OPTIONAL }\n"
- title: 11  Useful Attributes
  contents:
  - "11  Useful Attributes\n   This section defines attributes that may be used with\
    \ signed-data,\n   enveloped-data, encrypted-data, or authenticated-data.  The\
    \ syntax of\n   Attribute is compatible with X.501 [X.501-88] and RFC 2459 [PROFILE].\n\
    \   Some of the attributes defined in this section were originally\n   defined\
    \ in PKCS #9 [PKCS#9], others were not previously defined.  The\n   attributes\
    \ are not listed in any particular order.\n   Additional attributes are defined\
    \ in many places, notably the S/MIME\n   Version 3 Message Specification [MSG]\
    \ and the Enhanced Security\n   Services for S/MIME [ESS], which also include\
    \ recommendations on the\n   placement of these attributes.\n"
- title: 11.1  Content Type
  contents:
  - "11.1  Content Type\n   The content-type attribute type specifies the content\
    \ type of the\n   ContentInfo value being signed in signed-data.  The content-type\n\
    \   attribute type is required if there are any authenticated attributes\n   present.\n\
    \   The content-type attribute must be a signed attribute or an\n   authenticated\
    \ attribute; it cannot be an unsigned attribute, an\n   unauthenticated attribute,\
    \ or an unprotectedAttribute.\n   The following object identifier identifies the\
    \ content-type\n   attribute:\n      id-contentType OBJECT IDENTIFIER ::= { iso(1)\
    \ member-body(2)\n          us(840) rsadsi(113549) pkcs(1) pkcs9(9) 3 }\n   Content-type\
    \ attribute values have ASN.1 type ContentType:\n      ContentType ::= OBJECT\
    \ IDENTIFIER\n   A content-type attribute must have a single attribute value,\
    \ even\n   though the syntax is defined as a SET OF AttributeValue.  There must\n\
    \   not be zero or multiple instances of AttributeValue present.\n   The SignedAttributes\
    \ and AuthAttributes syntaxes are each defined as\n   a SET OF Attributes.  The\
    \ SignedAttributes in a signerInfo must not\n   include multiple instances of\
    \ the content-type attribute.  Similarly,\n   the AuthAttributes in an AuthenticatedData\
    \ must not include multiple\n   instances of the content-type attribute.\n"
- title: 11.2  Message Digest
  contents:
  - "11.2  Message Digest\n   The message-digest attribute type specifies the message\
    \ digest of the\n   encapContentInfo eContent OCTET STRING being signed in signed-data\n\
    \   (see section 5.4) or authenticated in authenticated-data (see section\n  \
    \ 9.2).  For signed-data, the message digest is computed using the\n   signer's\
    \ message digest algorithm.  For authenticated-data, the\n   message digest is\
    \ computed using the originator's message digest\n   algorithm.\n   Within signed-data,\
    \ the message-digest signed attribute type is\n   required if there are any attributes\
    \ present.  Within authenticated-\n   data, the message-digest authenticated attribute\
    \ type is required if\n   there are any attributes present.\n   The message-digest\
    \ attribute must be a signed attribute or an\n   authenticated attribute; it cannot\
    \ be an unsigned attribute or an\n   unauthenticated attribute.\n   The following\
    \ object identifier identifies the message-digest\n   attribute:\n      id-messageDigest\
    \ OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n          us(840) rsadsi(113549)\
    \ pkcs(1) pkcs9(9) 4 }\n   Message-digest attribute values have ASN.1 type MessageDigest:\n\
    \      MessageDigest ::= OCTET STRING\n   A message-digest attribute must have\
    \ a single attribute value, even\n   though the syntax is defined as a SET OF\
    \ AttributeValue.  There must\n   not be zero or multiple instances of AttributeValue\
    \ present.\n   The SignedAttributes syntax is defined as a SET OF Attributes.\
    \  The\n   SignedAttributes in a signerInfo must not include multiple instances\n\
    \   of the message-digest attribute.\n"
- title: 11.3  Signing Time
  contents:
  - "11.3  Signing Time\n   The signing-time attribute type specifies the time at\
    \ which the\n   signer (purportedly) performed the signing process.  The signing-time\n\
    \   attribute type is intended for use in signed-data.\n   The signing-time attribute\
    \ may be a signed attribute; it cannot be an\n   unsigned attribute, an authenticated\
    \ attribute, or an unauthenticated\n   attribute.\n   The following object identifier\
    \ identifies the signing-time\n   attribute:\n      id-signingTime OBJECT IDENTIFIER\
    \ ::= { iso(1) member-body(2)\n          us(840) rsadsi(113549) pkcs(1) pkcs9(9)\
    \ 5 }\n   Signing-time attribute values have ASN.1 type SigningTime:\n      SigningTime\
    \ ::= Time\n      Time ::= CHOICE {\n        utcTime          UTCTime,\n     \
    \   generalizedTime  GeneralizedTime }\n   Note: The definition of Time matches\
    \ the one specified in the 1997\n   version of X.509 [X.509-97].\n   Dates between\
    \ 1 January 1950 and 31 December 2049 (inclusive) must be\n   encoded as UTCTime.\
    \  Any dates with year values before 1950 or after\n   2049 must be encoded as\
    \ GeneralizedTime.\n   UTCTime values must be expressed in Greenwich Mean Time\
    \ (Zulu) and\n   must include seconds (i.e., times are YYMMDDHHMMSSZ), even where\
    \ the\n   number of seconds is zero.  Midnight (GMT) must be represented as\n\
    \   \"YYMMDD000000Z\".  Century information is implicit, and the century\n   must\
    \ be determined as follows:\n      Where YY is greater than or equal to 50, the\
    \ year shall be\n      interpreted as 19YY; and\n      Where YY is less than 50,\
    \ the year shall be interpreted as 20YY.\n   GeneralizedTime values shall be expressed\
    \ in Greenwich Mean Time\n   (Zulu) and must include seconds (i.e., times are\
    \ YYYYMMDDHHMMSSZ),\n   even where the number of seconds is zero.  GeneralizedTime\
    \ values\n   must not include fractional seconds.\n   A signing-time attribute\
    \ must have a single attribute value, even\n   though the syntax is defined as\
    \ a SET OF AttributeValue.  There must\n   not be zero or multiple instances of\
    \ AttributeValue present.\n   The SignedAttributes syntax is defined as a SET\
    \ OF Attributes.  The\n   SignedAttributes in a signerInfo must not include multiple\
    \ instances\n   of the signing-time attribute.\n   No requirement is imposed concerning\
    \ the correctness of the signing\n   time, and acceptance of a purported signing\
    \ time is a matter of a\n   recipient's discretion.  It is expected, however,\
    \ that some signers,\n   such as time-stamp servers, will be trusted implicitly.\n"
- title: 11.4  Countersignature
  contents:
  - "11.4  Countersignature\n   The countersignature attribute type specifies one\
    \ or more signatures\n   on the contents octets of the DER encoding of the signatureValue\n\
    \   field of a SignerInfo value in signed-data.  Thus, the\n   countersignature\
    \ attribute type countersigns (signs in serial)\n   another signature.\n   The\
    \ countersignature attribute must be an unsigned attribute; it\n   cannot be a\
    \ signed attribute, an authenticated attribute, or an\n   unauthenticated attribute.\n\
    \   The following object identifier identifies the countersignature\n   attribute:\n\
    \      id-countersignature OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n   \
    \       us(840) rsadsi(113549) pkcs(1) pkcs9(9) 6 }\n   Countersignature attribute\
    \ values have ASN.1 type Countersignature:\n      Countersignature ::= SignerInfo\n\
    \   Countersignature values have the same meaning as SignerInfo values\n   for\
    \ ordinary signatures, except that:\n      1.  The signedAttributes field must\
    \ contain a message-digest\n      attribute if it contains any other attributes,\
    \ but need not\n      contain a content-type attribute, as there is no content\
    \ type for\n      countersignatures.\n      2.  The input to the message-digesting\
    \ process is the contents\n      octets of the DER encoding of the signatureValue\
    \ field of the\n      SignerInfo value with which the attribute is associated.\n\
    \   A countersignature attribute can have multiple attribute values.  The\n  \
    \ syntax is defined as a SET OF AttributeValue, and there must be one\n   or more\
    \ instances of AttributeValue present.\n   The UnsignedAttributes syntax is defined\
    \ as a SET OF Attributes.  The\n   UnsignedAttributes in a signerInfo may include\
    \ multiple instances of\n   the countersignature attribute.\n   A countersignature,\
    \ since it has type SignerInfo, can itself contain\n   a countersignature attribute.\
    \  Thus it is possible to construct\n   arbitrarily long series of countersignatures.\n"
- title: 12  Supported Algorithms
  contents:
  - "12  Supported Algorithms\n   This section lists the algorithms that must be implemented.\n\
    \   Additional algorithms that should be implemented are also included.\n"
- title: 12.1  Digest Algorithms
  contents:
  - "12.1  Digest Algorithms\n   CMS implementations must include SHA-1.  CMS implementations\
    \ should\n   include MD5.\n   Digest algorithm identifiers are located in the\
    \ SignedData\n   digestAlgorithms field, the SignerInfo digestAlgorithm field,\
    \ the\n   DigestedData digestAlgorithm field, and the AuthenticatedData\n   digestAlgorithm\
    \ field.\n   Digest values are located in the DigestedData digest field, and\n\
    \   digest values are located in the Message Digest authenticated\n   attribute.\
    \  In addition, digest values are input to signature\n   algorithms.\n"
- title: 12.1.1  SHA-1
  contents:
  - "12.1.1  SHA-1\n   The SHA-1 digest algorithm is defined in FIPS Pub 180-1 [SHA1].\
    \ The\n   algorithm identifier for SHA-1 is:\n      sha-1 OBJECT IDENTIFIER ::=\
    \ { iso(1) identified-organization(3)\n          oiw(14) secsig(3) algorithm(2)\
    \ 26 }\n   The AlgorithmIdentifier parameters field is optional.  If present,\n\
    \   the parameters field must contain an ASN.1 NULL.  Implementations\n   should\
    \ accept SHA-1 AlgorithmIdentifiers with absent parameters as\n   well as NULL\
    \ parameters.  Implementations should generate SHA-1\n   AlgorithmIdentifiers\
    \ with NULL parameters.\n"
- title: 12.1.2  MD5
  contents:
  - "12.1.2  MD5\n   The MD5 digest algorithm is defined in RFC 1321 [MD5].  The algorithm\n\
    \   identifier for MD5 is:\n      md5 OBJECT IDENTIFIER ::= { iso(1) member-body(2)\
    \ us(840)\n          rsadsi(113549) digestAlgorithm(2) 5 }\n   The AlgorithmIdentifier\
    \ parameters field must be present, and the\n   parameters field must contain\
    \ NULL.  Implementations may accept the\n   MD5 AlgorithmIdentifiers with absent\
    \ parameters as well as NULL\n   parameters.\n"
- title: 12.2  Signature Algorithms
  contents:
  - "12.2  Signature Algorithms\n   CMS implementations must include DSA.  CMS implementations\
    \ may\n   include RSA.\n   Signature algorithm identifiers are located in the\
    \ SignerInfo\n   signatureAlgorithm field.  Also, signature algorithm identifiers\
    \ are\n   located in the SignerInfo signatureAlgorithm field of\n   countersignature\
    \ attributes.\n   Signature values are located in the SignerInfo signature field.\n\
    \   Also, signature values are located in the SignerInfo signature field\n   of\
    \ countersignature attributes.\n"
- title: 12.2.1  DSA
  contents:
  - "12.2.1  DSA\n   The DSA signature algorithm is defined in FIPS Pub 186 [DSS].\
    \  DSA is\n   always used with the SHA-1 message digest algorithm.  The algorithm\n\
    \   identifier for DSA is:\n      id-dsa-with-sha1 OBJECT IDENTIFIER ::=  { iso(1)\
    \ member-body(2)\n          us(840) x9-57 (10040) x9cm(4) 3 }\n   The AlgorithmIdentifier\
    \ parameters field must not be present.\n"
- title: 12.2.2  RSA
  contents:
  - "12.2.2  RSA\n   The RSA signature algorithm is defined in RFC 2347 [NEWPKCS#1].\
    \ RFC\n   2347 specifies the use of the RSA signature algorithm with the SHA-1\n\
    \   and MD5 message digest algorithms.  The algorithm identifier for RSA\n   is:\n\
    \      rsaEncryption OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n         \
    \ us(840) rsadsi(113549) pkcs(1) pkcs-1(1) 1 }\n"
- title: 12.3  Key Management Algorithms
  contents:
  - "12.3  Key Management Algorithms\n   CMS accommodates three general key management\
    \ techniques: key\n   agreement, key transport, and previously distributed symmetric\
    \ key-\n   encryption keys.\n"
- title: 12.3.1  Key Agreement Algorithms
  contents:
  - "12.3.1  Key Agreement Algorithms\n   CMS implementations must include key agreement\
    \ using X9.42\n   Ephemeral-Static Diffie-Hellman.\n   Any symmetric encryption\
    \ algorithm that a CMS implementation includes\n   as a content-encryption algorithm\
    \ must also be included as a key-\n   encryption algorithm.  CMS implementations\
    \ must include key agreement\n   of Triple-DES pairwise key-encryption keys and\
    \ Triple-DES wrapping of\n   Triple-DES content-encryption keys.  CMS implementations\
    \ should\n   include key agreement of RC2 pairwise key-encryption keys and RC2\n\
    \   wrapping of RC2 content-encryption keys.  The key wrap algorithm for\n   Triple-DES\
    \ and RC2 is described in section 12.3.3.\n   A CMS implementation may support\
    \ mixed key-encryption and content-\n   encryption algorithms.  For example, a\
    \ 128-bit RC2 content-encryption\n   key may be wrapped with 168-bit Triple-DES\
    \ key-encryption key.\n   Similarly, a 40-bit RC2 content-encryption key may be\
    \ wrapped with\n   128-bit RC2 key-encryption key.\n   For key agreement of RC2\
    \ key-encryption keys, 128 bits must be\n   generated as input to the key expansion\
    \ process used to compute the\n   RC2 effective key [RC2].\n   Key agreement algorithm\
    \ identifiers are located in the EnvelopedData\n   RecipientInfos KeyAgreeRecipientInfo\
    \ keyEncryptionAlgorithm and\n   AuthenticatedData RecipientInfos KeyAgreeRecipientInfo\n\
    \   keyEncryptionAlgorithm fields.\n   Key wrap algorithm identifiers are located\
    \ in the KeyWrapAlgorithm\n   parameters within the EnvelopedData RecipientInfos\n\
    \   KeyAgreeRecipientInfo keyEncryptionAlgorithm and AuthenticatedData\n   RecipientInfos\
    \ KeyAgreeRecipientInfo keyEncryptionAlgorithm fields.\n   Wrapped content-encryption\
    \ keys are located in the EnvelopedData\n   RecipientInfos KeyAgreeRecipientInfo\
    \ RecipientEncryptedKeys\n   encryptedKey field.  Wrapped message-authentication\
    \ keys are located\n   in the AuthenticatedData RecipientInfos KeyAgreeRecipientInfo\n\
    \   RecipientEncryptedKeys encryptedKey field.\n"
- title: 12.3.1.1  X9.42 Ephemeral-Static Diffie-Hellman
  contents:
  - "12.3.1.1  X9.42 Ephemeral-Static Diffie-Hellman\n   Ephemeral-Static Diffie-Hellman\
    \ key agreement is defined in RFC 2631\n   [DH-X9.42].  When using Ephemeral-Static\
    \ Diffie-Hellman, the\n   EnvelopedData RecipientInfos KeyAgreeRecipientInfo and\n\
    \   AuthenticatedData RecipientInfos KeyAgreeRecipientInfo fields are\n   used\
    \ as follows:\n      version must be 3.\n      originator must be the originatorKey\
    \ alternative.  The\n      originatorKey algorithm fields must contain the dh-public-number\n\
    \      object identifier with absent parameters.  The originatorKey\n      publicKey\
    \ field must contain the sender's ephemeral public key.\n      The dh-public-number\
    \ object identifier is:\n         dh-public-number OBJECT IDENTIFIER ::= { iso(1)\
    \ member-body(2)\n             us(840) ansi-x942(10046) number-type(2) 1 }\n \
    \     ukm may be absent.  When present, the ukm is used to ensure that a\n   \
    \   different key-encryption key is generated when the ephemeral\n      private\
    \ key might be used more than once.\n      keyEncryptionAlgorithm must be the\
    \ id-alg-ESDH algorithm\n      identifier.  The algorithm identifier parameter\
    \ field for id-alg-\n      ESDH is KeyWrapAlgorihtm, and this parameter must be\
    \ present.  The\n      KeyWrapAlgorithm denotes the symmetric encryption algorithm\
    \ used\n      to encrypt the content-encryption key with the pairwise key-\n \
    \     encryption key generated using the Ephemeral-Static Diffie-Hellman\n   \
    \   key agreement algorithm.  Triple-DES and RC2 key wrap algorithms\n      are\
    \ discussed in section 12.3.3.  The id-alg-ESDH algorithm\n      identifier and\
    \ parameter syntax is:\n       id-alg-ESDH OBJECT IDENTIFIER ::= { iso(1) member-body(2)\
    \ us(840)\n           rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) alg(3) 5 }\n\
    \       KeyWrapAlgorithm ::= AlgorithmIdentifier\n      recipientEncryptedKeys\
    \ contains an identifier and an encrypted key\n      for each recipient.  The\
    \ RecipientEncryptedKey\n      KeyAgreeRecipientIdentifier must contain either\
    \ the\n      issuerAndSerialNumber identifying the recipient's certificate or\n\
    \      the RecipientKeyIdentifier containing the subject key identifier\n    \
    \  from the recipient's certificate.  In both cases, the recipient's\n      certificate\
    \ contains the recipient's static public key.\n      RecipientEncryptedKey EncryptedKey\
    \ must contain the content-\n      encryption key encrypted with the Ephemeral-Static\
    \ Diffie-Hellman\n      generated pairwise key-encryption key using the algorithm\n\
    \      specified by the KeyWrapAlgortihm.\n"
- title: 12.3.2  Key Transport Algorithms
  contents:
  - "12.3.2  Key Transport Algorithms\n   CMS implementations should include key transport\
    \ using RSA.  RSA\n   implementations must include key transport of Triple-DES\
    \ content-\n   encryption keys.  RSA implementations should include key transport\
    \ of\n   RC2 content-encryption keys.\n   Key transport algorithm identifiers\
    \ are located in the EnvelopedData\n   RecipientInfos KeyTransRecipientInfo keyEncryptionAlgorithm\
    \ and\n   AuthenticatedData RecipientInfos KeyTransRecipientInfo\n   keyEncryptionAlgorithm\
    \ fields.\n   Key transport encrypted content-encryption keys are located in the\n\
    \   EnvelopedData RecipientInfos KeyTransRecipientInfo encryptedKey\n   field.\
    \  Key transport encrypted message-authentication keys are\n   located in the\
    \ AuthenticatedData RecipientInfos KeyTransRecipientInfo\n   encryptedKey field.\n"
- title: 12.3.2.1  RSA
  contents:
  - "12.3.2.1  RSA\n   The RSA key transport algorithm is the RSA encryption scheme\
    \ defined\n   in RFC 2313 [PKCS#1], block type is 02, where the message to be\n\
    \   encrypted is the content-encryption key.  The algorithm identifier\n   for\
    \ RSA is:\n      rsaEncryption OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n\
    \          us(840) rsadsi(113549) pkcs(1) pkcs-1(1) 1 }\n   The AlgorithmIdentifier\
    \ parameters field must be present, and the\n   parameters field must contain\
    \ NULL.\n   When using a Triple-DES content-encryption key, adjust the parity\n\
    \   bits for each DES key comprising the Triple-DES key prior to RSA\n   encryption.\n\
    \   The use of RSA encryption, as defined in RFC 2313 [PKCS#1], to\n   provide\
    \ confidentiality has a known vulnerability concerns.  The\n   vulnerability is\
    \ primarily relevant to usage in interactive\n   applications rather than to store-and-forward\
    \ environments.  Further\n   information and proposed countermeasures are discussed\
    \ in the\n   Security Considerations section of this document.\n   Note that the\
    \ same encryption scheme is also defined in RFC 2437\n   [NEWPKCS#1].  Within\
    \ RFC 2437, this scheme is called\n   RSAES-PKCS1-v1_5.\n"
- title: 12.3.3  Symmetric Key-Encryption Key Algorithms
  contents:
  - "12.3.3  Symmetric Key-Encryption Key Algorithms\n   CMS implementations may include\
    \ symmetric key-encryption key\n   management.  Such CMS implementations must\
    \ include Triple-DES key-\n   encryption keys wrapping Triple-DES content-encryption\
    \ keys, and such\n   CMS implementations should include RC2 key-encryption keys\
    \ wrapping\n   RC2 content-encryption keys.  Only 128-bit RC2 keys may be used\
    \ as\n   key-encryption keys, and they must be used with the\n   RC2ParameterVersion\
    \ parameter set to 58.  A CMS implementation may\n   support mixed key-encryption\
    \ and content-encryption algorithms.  For\n   example, a 40-bit RC2 content-encryption\
    \ key may be wrapped with\n   168-bit Triple-DES key-encryption key or with a\
    \ 128-bit RC2 key-\n   encryption key.\n   Key wrap algorithm identifiers are\
    \ located in the EnvelopedData\n   RecipientInfos KEKRecipientInfo keyEncryptionAlgorithm\
    \ and\n   AuthenticatedData RecipientInfos KEKRecipientInfo\n   keyEncryptionAlgorithm\
    \ fields.\n   Wrapped content-encryption keys are located in the EnvelopedData\n\
    \   RecipientInfos KEKRecipientInfo encryptedKey field.  Wrapped\n   message-authentication\
    \ keys are located in the AuthenticatedData\n   RecipientInfos KEKRecipientInfo\
    \ encryptedKey field.\n   The output of a key agreement algorithm is a key-encryption\
    \ key, and\n   this key-encryption key is used to encrypt the content-encryption\n\
    \   key.  In conjunction with key agreement algorithms, CMS\n   implementations\
    \ must include encryption of content-encryption keys\n   with the pairwise key-encryption\
    \ key generated using a key agreement\n   algorithm.  To support key agreement,\
    \ key wrap algorithm identifiers\n   are located in the KeyWrapAlgorithm parameter\
    \ of the EnvelopedData\n   RecipientInfos KeyAgreeRecipientInfo keyEncryptionAlgorithm\
    \ and\n   AuthenticatedData RecipientInfos KeyAgreeRecipientInfo\n   keyEncryptionAlgorithm\
    \ fields.  Wrapped content-encryption keys are\n   located in the EnvelopedData\
    \ RecipientInfos KeyAgreeRecipientInfo\n   RecipientEncryptedKeys encryptedKey\
    \ field, wrapped message-\n   authentication keys are located in the AuthenticatedData\n\
    \   RecipientInfos KeyAgreeRecipientInfo RecipientEncryptedKeys\n   encryptedKey\
    \ field.\n"
- title: 12.3.3.1  Triple-DES Key Wrap
  contents:
  - "12.3.3.1  Triple-DES Key Wrap\n   Triple-DES key encryption has the algorithm\
    \ identifier:\n      id-alg-CMS3DESwrap OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n\
    \          us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) alg(3) 6 }\n   The\
    \ AlgorithmIdentifier parameter field must be NULL.\n   The key wrap algorithm\
    \ used to encrypt a Triple-DES content-\n   encryption key with a Triple-DES key-encryption\
    \ key is specified in\n   section 12.6.\n   Out-of-band distribution of the Triple-DES\
    \ key-encryption key used to\n   encrypt the Triple-DES content-encryption key\
    \ is beyond of the scope\n   of this document.\n"
- title: 12.3.3.2  RC2 Key Wrap
  contents:
  - "12.3.3.2  RC2 Key Wrap\n   RC2 key encryption has the algorithm identifier:\n\
    \      id-alg-CMSRC2wrap OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n     \
    \     us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) alg(3) 7 }\n   The AlgorithmIdentifier\
    \ parameter field must be RC2wrapParameter:\n      RC2wrapParameter ::= RC2ParameterVersion\n\
    \      RC2ParameterVersion ::= INTEGER\n   The RC2 effective-key-bits (key size)\
    \ greater than 32 and less than\n   256 is encoded in the RC2ParameterVersion.\
    \  For the effective-key-\n   bits of 40, 64, and 128, the rc2ParameterVersion\
    \ values are 160, 120,\n   and 58 respectively.  These values are not simply the\
    \ RC2 key length.\n   Note that the value 160 must be encoded as two octets (00\
    \ A0),\n   because the one octet (A0) encoding represents a negative number.\n\
    \   Only 128-bit RC2 keys may be used as key-encryption keys, and they\n   must\
    \ be used with the RC2ParameterVersion parameter set to 58.\n   The key wrap algorithm\
    \ used to encrypt a RC2 content-encryption key\n   with a RC2 key-encryption key\
    \ is specified in section 12.6.\n   Out-of-band distribution of the RC2 key-encryption\
    \ key used to\n   encrypt the RC2 content-encryption key is beyond of the scope\
    \ of this\n   document.\n"
- title: 12.4  Content Encryption Algorithms
  contents:
  - "12.4  Content Encryption Algorithms\n   CMS implementations must include Triple-DES\
    \ in CBC mode.  CMS\n   implementations should include RC2 in CBC mode.\n   Content\
    \ encryption algorithms identifiers are located in the\n   EnvelopedData EncryptedContentInfo\
    \ contentEncryptionAlgorithm and the\n   EncryptedData EncryptedContentInfo contentEncryptionAlgorithm\
    \ fields.\n   Content encryption algorithms are used to encipher the content\n\
    \   located in the EnvelopedData EncryptedContentInfo encryptedContent\n   field\
    \ and the EncryptedData EncryptedContentInfo encryptedContent\n   field.\n"
- title: 12.4.1  Triple-DES CBC
  contents:
  - "12.4.1  Triple-DES CBC\n   The Triple-DES algorithm is described in ANSI X9.52\
    \ [3DES].  The\n   Triple-DES is composed from three sequential DES [DES] operations:\n\
    \   encrypt, decrypt, and encrypt.  Three-Key Triple-DES uses a different\n  \
    \ key for each DES operation.  Two-Key Triple-DES uses one key for the\n   two\
    \ encrypt operations and different key for the decrypt operation.\n   The same\
    \ algorithm identifiers are used for Three-Key Triple-DES and\n   Two-Key Triple-DES.\
    \  The algorithm identifier for Triple-DES in\n   Cipher Block Chaining (CBC)\
    \ mode is:\n      des-ede3-cbc OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n\
    \          us(840) rsadsi(113549) encryptionAlgorithm(3) 7 }\n   The AlgorithmIdentifier\
    \ parameters field must be present, and the\n   parameters field must contain\
    \ a CBCParameter:\n      CBCParameter ::= IV\n      IV ::= OCTET STRING  -- exactly\
    \ 8 octets\n"
- title: 12.4.2  RC2 CBC
  contents:
  - "12.4.2  RC2 CBC\n   The RC2 algorithm is described in RFC 2268 [RC2].  The algorithm\n\
    \   identifier for RC2 in CBC mode is:\n      rc2-cbc OBJECT IDENTIFIER ::= {\
    \ iso(1) member-body(2) us(840)\n          rsadsi(113549) encryptionAlgorithm(3)\
    \ 2 }\n   The AlgorithmIdentifier parameters field must be present, and the\n\
    \   parameters field must contain a RC2CBCParameter:\n      RC2CBCParameter ::=\
    \ SEQUENCE {\n        rc2ParameterVersion INTEGER,\n        iv OCTET STRING  }\
    \  -- exactly 8 octets\n   The RC2 effective-key-bits (key size) greater than\
    \ 32 and less than\n   256 is encoded in the rc2ParameterVersion.  For the effective-key-\n\
    \   bits of 40, 64, and 128, the rc2ParameterVersion values are 160, 120,\n  \
    \ and 58 respectively.  These values are not simply the RC2 key length.\n   Note\
    \ that the value 160 must be encoded as two octets (00 A0), since\n   the one\
    \ octet (A0) encoding represents a negative number.\n"
- title: 12.5  Message Authentication Code Algorithms
  contents:
  - "12.5  Message Authentication Code Algorithms\n   CMS implementations that support\
    \ authenticatedData must include HMAC\n   with SHA-1.\n   MAC algorithm identifiers\
    \ are located in the AuthenticatedData\n   macAlgorithm field.\n   MAC values\
    \ are located in the AuthenticatedData mac field.\n"
- title: 12.5.1  HMAC with SHA-1
  contents:
  - "12.5.1  HMAC with SHA-1\n   The HMAC with SHA-1 algorithm is described in RFC\
    \ 2104 [HMAC].  The\n   algorithm identifier for HMAC with SHA-1 is:\n      hMAC-SHA1\
    \ OBJECT IDENTIFIER ::= { iso(1) identified-organization(3)\n          dod(6)\
    \ internet(1) security(5) mechanisms(5) 8 1 2 }\n   The AlgorithmIdentifier parameters\
    \ field must be absent.\n"
- title: 12.6  Triple-DES and RC2 Key Wrap Algorithms
  contents:
  - "12.6  Triple-DES and RC2 Key Wrap Algorithms\n   CMS implementations must include\
    \ encryption of a Triple-DES content-\n   encryption key with a Triple-DES key-encryption\
    \ key using the\n   algorithm specified in Sections 12.6.2 and 12.6.3.  CMS\n\
    \   implementations should include encryption of a RC2 content-encryption\n  \
    \ key with a RC2 key-encryption key using the algorithm specified in\n   Sections\
    \ 12.6.4 and 12.6.5.  Triple-DES and RC2 content-encryption\n   keys are encrypted\
    \ in Cipher Block Chaining (CBC) mode [MODES].\n   Key Transport algorithms allow\
    \ for the content-encryption key to be\n   directly encrypted; however, key agreement\
    \ and symmetric key-\n   encryption key algorithms encrypt the content-encryption\
    \ key with a\n   second symmetric encryption algorithm.  This section describes\
    \ how\n   the Triple-DES or RC2 content-encryption key is formatted and\n   encrypted.\n\
    \   Key agreement algorithms generate a pairwise key-encryption key, and\n   a\
    \ key wrap algorithm is used to encrypt the content-encryption key\n   with the\
    \ pairwise key-encryption key.  Similarly, a key wrap\n   algorithm is used to\
    \ encrypt the content-encryption key in a\n   previously distributed key-encryption\
    \ key.\n   The key-encryption key is generated by the key agreement algorithm\
    \ or\n   distributed out of band.  For key agreement of RC2 key-encryption\n \
    \  keys, 128 bits must be generated as input to the key expansion\n   process\
    \ used to compute the RC2 effective key [RC2].\n   The same algorithm identifier\
    \ is used for both 2-key and 3-key\n   Triple-DES.  When the length of the content-encryption\
    \ key to be\n   wrapped is a 2-key Triple-DES key, a third key with the same value\
    \ as\n   the first key is created.  Thus, all Triple-DES content-encryption\n\
    \   keys are wrapped like 3-key Triple-DES keys.\n"
- title: 12.6.1  Key Checksum
  contents:
  - "12.6.1  Key Checksum\n   The CMS Checksum Algorithm is used to provide a content-encryption\n\
    \   key integrity check value.  The algorithm is:\n   1.  Compute a 20 octet SHA-1\
    \ [SHA1] message digest on the\n       content-encryption key.\n   2.  Use the\
    \ most significant (first) eight octets of the message\n       digest value as\
    \ the checksum value.\n"
- title: 12.6.2  Triple-DES Key Wrap
  contents:
  - "12.6.2  Triple-DES Key Wrap\n   The Triple-DES key wrap algorithm encrypts a\
    \ Triple-DES content-\n   encryption key with a Triple-DES key-encryption key.\
    \  The Triple-DES\n   key wrap algorithm is:\n   1.  Set odd parity for each of\
    \ the DES key octets comprising\n       the content-encryption key, call the result\
    \ CEK.\n   2.  Compute an 8 octet key checksum value on CEK as described above\n\
    \       in Section 12.6.1, call the result ICV.\n   3.  Let CEKICV = CEK || ICV.\n\
    \   4.  Generate 8 octets at random, call the result IV.\n   5.  Encrypt CEKICV\
    \ in CBC mode using the key-encryption key.  Use\n       the random value generated\
    \ in the previous step as the\n       initialization vector (IV).  Call the ciphertext\
    \ TEMP1.\n   6.  Let TEMP2 = IV || TEMP1.\n   7.  Reverse the order of the octets\
    \ in TEMP2.  That is, the most\n       significant (first) octet is swapped with\
    \ the least significant\n       (last) octet, and so on.  Call the result TEMP3.\n\
    \   8.  Encrypt TEMP3 in CBC mode using the key-encryption key.  Use\n       an\
    \ initialization vector (IV) of 0x4adda22c79e82105.\n       The ciphertext is\
    \ 40 octets long.\n   Note:  When the same content-encryption key is wrapped in\
    \ different\n   key-encryption keys, a fresh initialization vector (IV) must be\n\
    \   generated for each invocation of the key wrap algorithm.\n"
- title: 12.6.3  Triple-DES Key Unwrap
  contents:
  - "12.6.3  Triple-DES Key Unwrap\n   The Triple-DES key unwrap algorithm decrypts\
    \ a Triple-DES content-\n   encryption key using a Triple-DES key-encryption key.\
    \  The Triple-DES\n   key unwrap algorithm is:\n   1.  If the wrapped content-encryption\
    \ key is not 40 octets, then\n       error.\n   2.  Decrypt the wrapped content-encryption\
    \ key in CBC mode using\n       the key-encryption key.  Use an initialization\
    \ vector (IV)\n       of 0x4adda22c79e82105.  Call the output TEMP3.\n   3.  Reverse\
    \ the order of the octets in TEMP3.  That is, the most\n       significant (first)\
    \ octet is swapped with the least significant\n       (last) octet, and so on.\
    \  Call the result TEMP2.\n   4.  Decompose the TEMP2 into IV and TEMP1.  IV is\
    \ the most\n       significant (first) 8 octets, and TEMP1 is the least significant\n\
    \       (last) 32 octets.\n   5.  Decrypt TEMP1 in CBC mode using the key-encryption\
    \ key.  Use\n       the IV value from the previous step as the initialization\
    \ vector.\n       Call the ciphertext CEKICV.\n   6.  Decompose the CEKICV into\
    \ CEK and ICV. CEK is the most significant\n       (first) 24 octets, and ICV\
    \ is the least significant (last) 8 octets.\n   7.  Compute an 8 octet key checksum\
    \ value on CEK as described above\n       in Section 12.6.1.  If the computed\
    \ key checksum value does not\n       match the decrypted key checksum value,\
    \ ICV, then error.\n   8.  Check for odd parity each of the DES key octets comprising\
    \ CEK.\n       If parity is incorrect, then there is an error.\n   9.  Use CEK\
    \ as the content-encryption key.\n"
- title: 12.6.4  RC2 Key Wrap
  contents:
  - "12.6.4  RC2 Key Wrap\n   The RC2 key wrap algorithm encrypts a RC2 content-encryption\
    \ key with\n   a RC2 key-encryption key.  The RC2 key wrap algorithm is:\n   1.\
    \  Let the content-encryption key be called CEK, and let the length\n       of\
    \ the content-encryption key in octets be called LENGTH.  LENGTH\n       is a\
    \ single octet.\n   2.  Let LCEK = LENGTH || CEK.\n   3.  Let LCEKPAD = LCEK ||\
    \ PAD.  If the length of LCEK is a multiple\n       of 8, the PAD has a length\
    \ of zero.  If the length of LCEK is\n       not a multiple of 8, then PAD contains\
    \ the fewest number of\n       random octets to make the length of LCEKPAD a multiple\
    \ of 8.\n   4.  Compute an 8 octet key checksum value on LCEKPAD as described\n\
    \       above in Section 12.6.1, call the result ICV.\n   5.  Let LCEKPADICV =\
    \ LCEKPAD || ICV.\n   6.  Generate 8 octets at random, call the result IV.\n \
    \  7.  Encrypt LCEKPADICV in CBC mode using the key-encryption key.\n       Use\
    \ the random value generated in the previous step as the\n       initialization\
    \ vector (IV).  Call the ciphertext TEMP1.\n   8.  Let TEMP2 = IV || TEMP1.\n\
    \   9.  Reverse the order of the octets in TEMP2.  That is, the most\n       significant\
    \ (first) octet is swapped with the least significant\n       (last) octet, and\
    \ so on.  Call the result TEMP3.\n   10. Encrypt TEMP3 in CBC mode using the key-encryption\
    \ key.  Use\n       an initialization vector (IV) of 0x4adda22c79e82105.\n   Note:\
    \  When the same content-encryption key is wrapped in different\n   key-encryption\
    \ keys, a fresh initialization vector (IV) must be\n   generated for each invocation\
    \ of the key wrap algorithm.\n"
- title: 12.6.5  RC2 Key Unwrap
  contents:
  - "12.6.5  RC2 Key Unwrap\n   The RC2 key unwrap algorithm decrypts a RC2 content-encryption\
    \ key\n   using a RC2 key-encryption key.  The RC2 key unwrap algorithm is:\n\
    \   1.  If the wrapped content-encryption key is not a multiple of 8\n       octets,\
    \ then error.\n   2.  Decrypt the wrapped content-encryption key in CBC mode using\n\
    \       the key-encryption key.  Use an initialization vector (IV)\n       of\
    \ 0x4adda22c79e82105.  Call the output TEMP3.\n   3.  Reverse the order of the\
    \ octets in TEMP3.  That is, the most\n       significant (first) octet is swapped\
    \ with the least significant\n       (last) octet, and so on.  Call the result\
    \ TEMP2.\n   4.  Decompose the TEMP2 into IV and TEMP1.  IV is the most\n    \
    \   significant (first) 8 octets, and TEMP1 is the remaining octets.\n   5.  Decrypt\
    \ TEMP1 in CBC mode using the key-encryption key.  Use\n       the IV value from\
    \ the previous step as the initialization vector.\n       Call the plaintext LCEKPADICV.\n\
    \   6.  Decompose the LCEKPADICV into LCEKPAD, and ICV.  ICV is the\n       least\
    \ significant (last) octet 8 octets.  LCEKPAD is the\n       remaining octets.\n\
    \   7.  Compute an 8 octet key checksum value on LCEKPAD as described\n      \
    \ above in Section 12.6.1.  If the computed key checksum value\n       does not\
    \ match the decrypted key checksum value, ICV, then error.\n   8.  Decompose the\
    \ LCEKPAD into LENGTH, CEK, and PAD.  LENGTH is the\n       most significant (first)\
    \ octet.  CEK is the following LENGTH\n       octets.  PAD is the remaining octets,\
    \ if any.\n   9.  If the length of PAD is more than 7 octets, then error.\n  \
    \ 10. Use CEK as the content-encryption key.\n"
- title: 'Appendix A:  ASN.1 Module'
  contents:
  - 'Appendix A:  ASN.1 Module

    '
- title: CryptographicMessageSyntax
  contents:
  - "CryptographicMessageSyntax\n    { iso(1) member-body(2) us(840) rsadsi(113549)\n\
    \      pkcs(1) pkcs-9(9) smime(16) modules(0) cms(1) }\n"
- title: DEFINITIONS IMPLICIT TAGS ::=
  contents:
  - 'DEFINITIONS IMPLICIT TAGS ::=

    '
- title: BEGIN
  contents:
  - 'BEGIN

    '
- title: -- EXPORTS All
  contents:
  - '-- EXPORTS All

    '
- title: -- The types and values defined in this module are exported for use in
  contents:
  - '-- The types and values defined in this module are exported for use in

    '
- title: -- the other ASN.1 modules.  Other applications may use them for their
  contents:
  - '-- the other ASN.1 modules.  Other applications may use them for their

    '
- title: -- own purposes.
  contents:
  - '-- own purposes.

    '
- title: IMPORTS
  contents:
  - "IMPORTS\n  -- Directory Information Framework (X.501)\n        Name\n       \
    \    FROM InformationFramework { joint-iso-itu-t ds(5) modules(1)\n          \
    \      informationFramework(1) 3 }\n  -- Directory Authentication Framework (X.509)\n\
    \        AlgorithmIdentifier, AttributeCertificate, Certificate,\n        CertificateList,\
    \ CertificateSerialNumber\n           FROM AuthenticationFramework { joint-iso-itu-t\
    \ ds(5)\n                module(1) authenticationFramework(7) 3 } ;\n"
- title: -- Cryptographic Message Syntax
  contents:
  - '-- Cryptographic Message Syntax

    '
- title: ContentInfo ::= SEQUENCE {
  contents:
  - "ContentInfo ::= SEQUENCE {\n  contentType ContentType,\n  content [0] EXPLICIT\
    \ ANY DEFINED BY contentType }\n"
- title: ContentType ::= OBJECT IDENTIFIER
  contents:
  - 'ContentType ::= OBJECT IDENTIFIER

    '
- title: SignedData ::= SEQUENCE {
  contents:
  - "SignedData ::= SEQUENCE {\n  version CMSVersion,\n  digestAlgorithms DigestAlgorithmIdentifiers,\n\
    \  encapContentInfo EncapsulatedContentInfo,\n  certificates [0] IMPLICIT CertificateSet\
    \ OPTIONAL,\n  crls [1] IMPLICIT CertificateRevocationLists OPTIONAL,\n  signerInfos\
    \ SignerInfos }\n"
- title: DigestAlgorithmIdentifiers ::= SET OF DigestAlgorithmIdentifier
  contents:
  - 'DigestAlgorithmIdentifiers ::= SET OF DigestAlgorithmIdentifier

    '
- title: SignerInfos ::= SET OF SignerInfo
  contents:
  - 'SignerInfos ::= SET OF SignerInfo

    '
- title: EncapsulatedContentInfo ::= SEQUENCE {
  contents:
  - "EncapsulatedContentInfo ::= SEQUENCE {\n  eContentType ContentType,\n  eContent\
    \ [0] EXPLICIT OCTET STRING OPTIONAL }\n"
- title: SignerInfo ::= SEQUENCE {
  contents:
  - "SignerInfo ::= SEQUENCE {\n  version CMSVersion,\n  sid SignerIdentifier,\n \
    \ digestAlgorithm DigestAlgorithmIdentifier,\n  signedAttrs [0] IMPLICIT SignedAttributes\
    \ OPTIONAL,\n  signatureAlgorithm SignatureAlgorithmIdentifier,\n  signature SignatureValue,\n\
    \  unsignedAttrs [1] IMPLICIT UnsignedAttributes OPTIONAL }\n"
- title: SignerIdentifier ::= CHOICE {
  contents:
  - "SignerIdentifier ::= CHOICE {\n  issuerAndSerialNumber IssuerAndSerialNumber,\n\
    \  subjectKeyIdentifier [0] SubjectKeyIdentifier }\n"
- title: SignedAttributes ::= SET SIZE (1..MAX) OF Attribute
  contents:
  - 'SignedAttributes ::= SET SIZE (1..MAX) OF Attribute

    '
- title: UnsignedAttributes ::= SET SIZE (1..MAX) OF Attribute
  contents:
  - 'UnsignedAttributes ::= SET SIZE (1..MAX) OF Attribute

    '
- title: Attribute ::= SEQUENCE {
  contents:
  - "Attribute ::= SEQUENCE {\n  attrType OBJECT IDENTIFIER,\n  attrValues SET OF\
    \ AttributeValue }\n"
- title: AttributeValue ::= ANY
  contents:
  - 'AttributeValue ::= ANY

    '
- title: SignatureValue ::= OCTET STRING
  contents:
  - 'SignatureValue ::= OCTET STRING

    '
- title: EnvelopedData ::= SEQUENCE {
  contents:
  - "EnvelopedData ::= SEQUENCE {\n  version CMSVersion,\n  originatorInfo [0] IMPLICIT\
    \ OriginatorInfo OPTIONAL,\n  recipientInfos RecipientInfos,\n  encryptedContentInfo\
    \ EncryptedContentInfo,\n  unprotectedAttrs [1] IMPLICIT UnprotectedAttributes\
    \ OPTIONAL }\n"
- title: OriginatorInfo ::= SEQUENCE {
  contents:
  - "OriginatorInfo ::= SEQUENCE {\n  certs [0] IMPLICIT CertificateSet OPTIONAL,\n\
    \  crls [1] IMPLICIT CertificateRevocationLists OPTIONAL }\n"
- title: RecipientInfos ::= SET OF RecipientInfo
  contents:
  - 'RecipientInfos ::= SET OF RecipientInfo

    '
- title: EncryptedContentInfo ::= SEQUENCE {
  contents:
  - "EncryptedContentInfo ::= SEQUENCE {\n  contentType ContentType,\n  contentEncryptionAlgorithm\
    \ ContentEncryptionAlgorithmIdentifier,\n  encryptedContent [0] IMPLICIT EncryptedContent\
    \ OPTIONAL }\n"
- title: EncryptedContent ::= OCTET STRING
  contents:
  - 'EncryptedContent ::= OCTET STRING

    '
- title: UnprotectedAttributes ::= SET SIZE (1..MAX) OF Attribute
  contents:
  - 'UnprotectedAttributes ::= SET SIZE (1..MAX) OF Attribute

    '
- title: RecipientInfo ::= CHOICE {
  contents:
  - "RecipientInfo ::= CHOICE {\n  ktri KeyTransRecipientInfo,\n  kari [1] KeyAgreeRecipientInfo,\n\
    \  kekri [2] KEKRecipientInfo }\n"
- title: EncryptedKey ::= OCTET STRING
  contents:
  - 'EncryptedKey ::= OCTET STRING

    '
- title: KeyTransRecipientInfo ::= SEQUENCE {
  contents:
  - "KeyTransRecipientInfo ::= SEQUENCE {\n  version CMSVersion,  -- always set to\
    \ 0 or 2\n  rid RecipientIdentifier,\n  keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\n\
    \  encryptedKey EncryptedKey }\n"
- title: RecipientIdentifier ::= CHOICE {
  contents:
  - "RecipientIdentifier ::= CHOICE {\n  issuerAndSerialNumber IssuerAndSerialNumber,\n\
    \  subjectKeyIdentifier [0] SubjectKeyIdentifier }\n"
- title: KeyAgreeRecipientInfo ::= SEQUENCE {
  contents:
  - "KeyAgreeRecipientInfo ::= SEQUENCE {\n  version CMSVersion,  -- always set to\
    \ 3\n  originator [0] EXPLICIT OriginatorIdentifierOrKey,\n  ukm [1] EXPLICIT\
    \ UserKeyingMaterial OPTIONAL,\n  keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\n\
    \  recipientEncryptedKeys RecipientEncryptedKeys }\n"
- title: OriginatorIdentifierOrKey ::= CHOICE {
  contents:
  - "OriginatorIdentifierOrKey ::= CHOICE {\n  issuerAndSerialNumber IssuerAndSerialNumber,\n\
    \  subjectKeyIdentifier [0] SubjectKeyIdentifier,\n  originatorKey [1] OriginatorPublicKey\
    \ }\n"
- title: OriginatorPublicKey ::= SEQUENCE {
  contents:
  - "OriginatorPublicKey ::= SEQUENCE {\n  algorithm AlgorithmIdentifier,\n  publicKey\
    \ BIT STRING }\n"
- title: RecipientEncryptedKeys ::= SEQUENCE OF RecipientEncryptedKey
  contents:
  - 'RecipientEncryptedKeys ::= SEQUENCE OF RecipientEncryptedKey

    '
- title: RecipientEncryptedKey ::= SEQUENCE {
  contents:
  - "RecipientEncryptedKey ::= SEQUENCE {\n  rid KeyAgreeRecipientIdentifier,\n  encryptedKey\
    \ EncryptedKey }\n"
- title: KeyAgreeRecipientIdentifier ::= CHOICE {
  contents:
  - "KeyAgreeRecipientIdentifier ::= CHOICE {\n  issuerAndSerialNumber IssuerAndSerialNumber,\n\
    \  rKeyId [0] IMPLICIT RecipientKeyIdentifier }\n"
- title: RecipientKeyIdentifier ::= SEQUENCE {
  contents:
  - "RecipientKeyIdentifier ::= SEQUENCE {\n  subjectKeyIdentifier SubjectKeyIdentifier,\n\
    \  date GeneralizedTime OPTIONAL,\n  other OtherKeyAttribute OPTIONAL }\n"
- title: SubjectKeyIdentifier ::= OCTET STRING
  contents:
  - 'SubjectKeyIdentifier ::= OCTET STRING

    '
- title: KEKRecipientInfo ::= SEQUENCE {
  contents:
  - "KEKRecipientInfo ::= SEQUENCE {\n  version CMSVersion,  -- always set to 4\n\
    \  kekid KEKIdentifier,\n  keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\n\
    \  encryptedKey EncryptedKey }\n"
- title: KEKIdentifier ::= SEQUENCE {
  contents:
  - "KEKIdentifier ::= SEQUENCE {\n  keyIdentifier OCTET STRING,\n  date GeneralizedTime\
    \ OPTIONAL,\n  other OtherKeyAttribute OPTIONAL }\n"
- title: DigestedData ::= SEQUENCE {
  contents:
  - "DigestedData ::= SEQUENCE {\n  version CMSVersion,\n  digestAlgorithm DigestAlgorithmIdentifier,\n\
    \  encapContentInfo EncapsulatedContentInfo,\n  digest Digest }\n"
- title: Digest ::= OCTET STRING
  contents:
  - 'Digest ::= OCTET STRING

    '
- title: EncryptedData ::= SEQUENCE {
  contents:
  - "EncryptedData ::= SEQUENCE {\n  version CMSVersion,\n  encryptedContentInfo EncryptedContentInfo,\n\
    \  unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL }\n"
- title: AuthenticatedData ::= SEQUENCE {
  contents:
  - "AuthenticatedData ::= SEQUENCE {\n  version CMSVersion,\n  originatorInfo [0]\
    \ IMPLICIT OriginatorInfo OPTIONAL,\n  recipientInfos RecipientInfos,\n  macAlgorithm\
    \ MessageAuthenticationCodeAlgorithm,\n  digestAlgorithm [1] DigestAlgorithmIdentifier\
    \ OPTIONAL,\n  encapContentInfo EncapsulatedContentInfo,\n  authenticatedAttributes\
    \ [2] IMPLICIT AuthAttributes OPTIONAL,\n  mac MessageAuthenticationCode,\n  unauthenticatedAttributes\
    \ [3] IMPLICIT UnauthAttributes OPTIONAL }\n"
- title: AuthAttributes ::= SET SIZE (1..MAX) OF Attribute
  contents:
  - 'AuthAttributes ::= SET SIZE (1..MAX) OF Attribute

    '
- title: UnauthAttributes ::= SET SIZE (1..MAX) OF Attribute
  contents:
  - 'UnauthAttributes ::= SET SIZE (1..MAX) OF Attribute

    '
- title: MessageAuthenticationCode ::= OCTET STRING
  contents:
  - 'MessageAuthenticationCode ::= OCTET STRING

    '
- title: DigestAlgorithmIdentifier ::= AlgorithmIdentifier
  contents:
  - 'DigestAlgorithmIdentifier ::= AlgorithmIdentifier

    '
- title: SignatureAlgorithmIdentifier ::= AlgorithmIdentifier
  contents:
  - 'SignatureAlgorithmIdentifier ::= AlgorithmIdentifier

    '
- title: KeyEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
  contents:
  - 'KeyEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier

    '
- title: ContentEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
  contents:
  - 'ContentEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier

    '
- title: MessageAuthenticationCodeAlgorithm ::= AlgorithmIdentifier
  contents:
  - 'MessageAuthenticationCodeAlgorithm ::= AlgorithmIdentifier

    '
- title: CertificateRevocationLists ::= SET OF CertificateList
  contents:
  - 'CertificateRevocationLists ::= SET OF CertificateList

    '
- title: CertificateChoices ::= CHOICE {
  contents:
  - "CertificateChoices ::= CHOICE {\n  certificate Certificate,  -- See X.509\n \
    \ extendedCertificate [0] IMPLICIT ExtendedCertificate,  -- Obsolete\n  attrCert\
    \ [1] IMPLICIT AttributeCertificate }  -- See X.509 & X9.57\n"
- title: CertificateSet ::= SET OF CertificateChoices
  contents:
  - 'CertificateSet ::= SET OF CertificateChoices

    '
- title: IssuerAndSerialNumber ::= SEQUENCE {
  contents:
  - "IssuerAndSerialNumber ::= SEQUENCE {\n  issuer Name,\n  serialNumber CertificateSerialNumber\
    \ }\n"
- title: CMSVersion ::= INTEGER  { v0(0), v1(1), v2(2), v3(3), v4(4) }
  contents:
  - 'CMSVersion ::= INTEGER  { v0(0), v1(1), v2(2), v3(3), v4(4) }

    '
- title: UserKeyingMaterial ::= OCTET STRING
  contents:
  - 'UserKeyingMaterial ::= OCTET STRING

    '
- title: OtherKeyAttribute ::= SEQUENCE {
  contents:
  - "OtherKeyAttribute ::= SEQUENCE {\n  keyAttrId OBJECT IDENTIFIER,\n  keyAttr ANY\
    \ DEFINED BY keyAttrId OPTIONAL }\n"
- title: -- CMS Attributes
  contents:
  - '-- CMS Attributes

    '
- title: MessageDigest ::= OCTET STRING
  contents:
  - 'MessageDigest ::= OCTET STRING

    '
- title: SigningTime  ::= Time
  contents:
  - 'SigningTime  ::= Time

    '
- title: Time ::= CHOICE {
  contents:
  - "Time ::= CHOICE {\n  utcTime UTCTime,\n  generalTime GeneralizedTime }\n"
- title: Countersignature ::= SignerInfo
  contents:
  - 'Countersignature ::= SignerInfo

    '
- title: -- Algorithm Identifiers
  contents:
  - '-- Algorithm Identifiers

    '
- title: sha-1 OBJECT IDENTIFIER ::= { iso(1) identified-organization(3)
  contents:
  - "sha-1 OBJECT IDENTIFIER ::= { iso(1) identified-organization(3)\n    oiw(14)\
    \ secsig(3) algorithm(2) 26 }\n"
- title: md5 OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)
  contents:
  - "md5 OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)\n    rsadsi(113549)\
    \ digestAlgorithm(2) 5 }\n"
- title: id-dsa-with-sha1 OBJECT IDENTIFIER ::=  { iso(1) member-body(2)
  contents:
  - "id-dsa-with-sha1 OBJECT IDENTIFIER ::=  { iso(1) member-body(2)\n    us(840)\
    \ x9-57 (10040) x9cm(4) 3 }\n"
- title: rsaEncryption OBJECT IDENTIFIER ::= { iso(1) member-body(2)
  contents:
  - "rsaEncryption OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549)\
    \ pkcs(1) pkcs-1(1) 1 }\n"
- title: dh-public-number OBJECT IDENTIFIER ::= { iso(1) member-body(2)
  contents:
  - "dh-public-number OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) ansi-x942(10046)\
    \ number-type(2) 1 }\n"
- title: id-alg-ESDH OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)
  contents:
  - "id-alg-ESDH OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)\n    rsadsi(113549)\
    \ pkcs(1) pkcs-9(9) smime(16) alg(3) 5 }\n"
- title: id-alg-CMS3DESwrap OBJECT IDENTIFIER ::= { iso(1) member-body(2)
  contents:
  - "id-alg-CMS3DESwrap OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840)\
    \ rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) alg(3) 6 }\n"
- title: id-alg-CMSRC2wrap OBJECT IDENTIFIER ::= { iso(1) member-body(2)
  contents:
  - "id-alg-CMSRC2wrap OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840)\
    \ rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) alg(3) 7 }\n"
- title: des-ede3-cbc OBJECT IDENTIFIER ::= { iso(1) member-body(2)
  contents:
  - "des-ede3-cbc OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549)\
    \ encryptionAlgorithm(3) 7 }\n"
- title: rc2-cbc OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)
  contents:
  - "rc2-cbc OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)\n    rsadsi(113549)\
    \ encryptionAlgorithm(3) 2 }\n"
- title: hMAC-SHA1 OBJECT IDENTIFIER ::= { iso(1) identified-organization(3)
  contents:
  - "hMAC-SHA1 OBJECT IDENTIFIER ::= { iso(1) identified-organization(3)\n    dod(6)\
    \ internet(1) security(5) mechanisms(5) 8 1 2 }\n"
- title: -- Algorithm Parameters
  contents:
  - '-- Algorithm Parameters

    '
- title: KeyWrapAlgorithm ::= AlgorithmIdentifier
  contents:
  - 'KeyWrapAlgorithm ::= AlgorithmIdentifier

    '
- title: RC2wrapParameter ::= RC2ParameterVersion
  contents:
  - 'RC2wrapParameter ::= RC2ParameterVersion

    '
- title: RC2ParameterVersion ::= INTEGER
  contents:
  - 'RC2ParameterVersion ::= INTEGER

    '
- title: CBCParameter ::= IV
  contents:
  - 'CBCParameter ::= IV

    '
- title: IV ::= OCTET STRING  -- exactly 8 octets
  contents:
  - 'IV ::= OCTET STRING  -- exactly 8 octets

    '
- title: RC2CBCParameter ::= SEQUENCE {
  contents:
  - "RC2CBCParameter ::= SEQUENCE {\n  rc2ParameterVersion INTEGER,\n  iv OCTET STRING\
    \  }  -- exactly 8 octets\n"
- title: -- Content Type Object Identifiers
  contents:
  - '-- Content Type Object Identifiers

    '
- title: id-ct-contentInfo OBJECT IDENTIFIER ::= { iso(1) member-body(2)
  contents:
  - "id-ct-contentInfo OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840)\
    \ rsadsi(113549) pkcs(1) pkcs-9(9) smime(16)\n    ct(1) 6 }\n"
- title: id-data OBJECT IDENTIFIER ::= { iso(1) member-body(2)
  contents:
  - "id-data OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549)\
    \ pkcs(1) pkcs7(7) 1 }\n"
- title: id-signedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)
  contents:
  - "id-signedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549)\
    \ pkcs(1) pkcs7(7) 2 }\n"
- title: id-envelopedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)
  contents:
  - "id-envelopedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549)\
    \ pkcs(1) pkcs7(7) 3 }\n"
- title: id-digestedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)
  contents:
  - "id-digestedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549)\
    \ pkcs(1) pkcs7(7) 5 }\n"
- title: id-encryptedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)
  contents:
  - "id-encryptedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549)\
    \ pkcs(1) pkcs7(7) 6 }\n"
- title: id-ct-authData OBJECT IDENTIFIER ::= { iso(1) member-body(2)
  contents:
  - "id-ct-authData OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549)\
    \ pkcs(1) pkcs-9(9) smime(16)\n    ct(1) 2 }\n"
- title: -- Attribute Object Identifiers
  contents:
  - '-- Attribute Object Identifiers

    '
- title: id-contentType OBJECT IDENTIFIER ::= { iso(1) member-body(2)
  contents:
  - "id-contentType OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549)\
    \ pkcs(1) pkcs9(9) 3 }\n"
- title: id-messageDigest OBJECT IDENTIFIER ::= { iso(1) member-body(2)
  contents:
  - "id-messageDigest OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549)\
    \ pkcs(1) pkcs9(9) 4 }\n"
- title: id-signingTime OBJECT IDENTIFIER ::= { iso(1) member-body(2)
  contents:
  - "id-signingTime OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840) rsadsi(113549)\
    \ pkcs(1) pkcs9(9) 5 }\n"
- title: id-countersignature OBJECT IDENTIFIER ::= { iso(1) member-body(2)
  contents:
  - "id-countersignature OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n    us(840)\
    \ rsadsi(113549) pkcs(1) pkcs9(9) 6 }\n"
- title: -- Obsolete Extended Certificate syntax from PKCS#6
  contents:
  - '-- Obsolete Extended Certificate syntax from PKCS#6

    '
- title: ExtendedCertificate ::= SEQUENCE {
  contents:
  - "ExtendedCertificate ::= SEQUENCE {\n  extendedCertificateInfo ExtendedCertificateInfo,\n\
    \  signatureAlgorithm SignatureAlgorithmIdentifier,\n  signature Signature }\n"
- title: ExtendedCertificateInfo ::= SEQUENCE {
  contents:
  - "ExtendedCertificateInfo ::= SEQUENCE {\n  version CMSVersion,\n  certificate\
    \ Certificate,\n  attributes UnauthAttributes }\n"
- title: Signature ::= BIT STRING
  contents:
  - 'Signature ::= BIT STRING

    '
- title: END -- of CryptographicMessageSyntax
  contents:
  - 'END -- of CryptographicMessageSyntax

    '
- title: References
  contents:
  - "References\n   3DES       American National Standards Institute.  ANSI X9.52-1998,\n\
    \              Triple Data Encryption Algorithm Modes of Operation. 1998.\n  \
    \ DES        American National Standards Institute.  ANSI X3.106,\n          \
    \    \"American National Standard for Information Systems - Data\n           \
    \   Link Encryption\".  1983.\n   DH-X9.42   Rescorla, E., \"Diffie-Hellman Key\
    \ Agreement Method\",\n              RFC 2631, June 1999.\n   DSS        National\
    \ Institute of Standards and Technology.\n              FIPS Pub 186: Digital\
    \ Signature Standard.  19 May 1994.\n   ESS        Hoffman, P., Editor, \"Enhanced\
    \ Security Services for\n              S/MIME\", RFC 2634, June 1999.\n   HMAC\
    \       Krawczyk, H., \"HMAC: Keyed-Hashing for Message\n              Authentication\"\
    , RFC 2104, February 1997.\n   MD5        Rivest, R., \"The MD5 Message-Digest\
    \ Algorithm\", RFC 1321,\n              April 1992.\n   MODES      National Institute\
    \ of Standards and Technology.\n              FIPS Pub 81: DES Modes of Operation.\
    \  2 December 1980.\n   MSG        Ramsdell, B., Editor, \"S/MIME Version 3 Message\n\
    \              Specification\", RFC 2633, June 1999.\n   NEWPKCS#1  Kaliski, B.,\
    \ \"PKCS #1: RSA Encryption, Version 2.0\",\n              RFC 2347, October 1998.\n\
    \   PROFILE    Housley, R., Ford, W., Polk, W. and D. Solo, \"Internet\n     \
    \         X.509 Public Key Infrastructure: Certificate and CRL\n             \
    \ Profile\", RFC 2459, January 1999.\n   PKCS#1     Kaliski, B., \"PKCS #1: RSA\
    \ Encryption, Version 1.5.\",\n              RFC 2313, March 1998.\n   PKCS#6\
    \     RSA Laboratories.  PKCS #6: Extended-Certificate Syntax\n              Standard,\
    \ Version 1.5.  November 1993.\n   PKCS#7     Kaliski, B., \"PKCS #7: Cryptographic\
    \ Message Syntax,\n              Version 1.5.\", RFC 2315, March 1998.\n   PKCS#9\
    \     RSA Laboratories.  PKCS #9: Selected Attribute Types,\n              Version\
    \ 1.1.  November 1993.\n   RANDOM     Eastlake, D., Crocker, S. and J. Schiller,\
    \ \"Randomness\n              Recommendations for Security\", RFC 1750, December\
    \ 1994.\n   RC2        Rivest, R., \"A Description of the RC2 (r) Encryption\n\
    \              Algorithm\", RFC 2268, March 1998.\n   SHA1       National Institute\
    \ of Standards and Technology.\n              FIPS Pub 180-1: Secure Hash Standard.\
    \  17 April 1995.\n   X.208-88   CCITT.  Recommendation X.208: Specification of\
    \ Abstract\n              Syntax Notation One (ASN.1).  1988.\n   X.209-88   CCITT.\
    \  Recommendation X.209: Specification of Basic\n              Encoding Rules\
    \ for Abstract Syntax Notation One (ASN.1).\n              1988.\n   X.501-88\
    \   CCITT.  Recommendation X.501: The Directory - Models.\n              1988.\n\
    \   X.509-88   CCITT.  Recommendation X.509: The Directory -\n              Authentication\
    \ Framework.  1988.\n   X.509-97   ITU-T.  Recommendation X.509: The Directory\
    \ -\n              Authentication Framework.  1997.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   The Cryptographic Message Syntax provides a method\
    \ for digitally\n   signing data, digesting data, encrypting data, and authenticating\n\
    \   data.\n   Implementations must protect the signer's private key.  Compromise\
    \ of\n   the signer's private key permits masquerade.\n   Implementations must\
    \ protect the key management private key, the\n   key-encryption key, and the\
    \ content-encryption key.  Compromise of\n   the key management private key or\
    \ the key-encryption key may result\n   in the disclosure of all messages protected\
    \ with that key.\n   Similarly, compromise of the content-encryption key may result\
    \ in\n   disclosure of the associated encrypted content.\n   Implementations must\
    \ protect the key management private key and the\n   message-authentication key.\
    \  Compromise of the key management private\n   key permits masquerade of authenticated\
    \ data.  Similarly, compromise\n   of the message-authentication key may result\
    \ in undetectable\n   modification of the authenticated content.\n   Implementations\
    \ must randomly generate content-encryption keys,\n   message-authentication keys,\
    \ initialization vectors (IVs), and\n   padding.  Also, the generation of public/private\
    \ key pairs relies on\n   a random numbers.  The use of inadequate pseudo-random\
    \ number\n   generators (PRNGs) to generate cryptographic keys can result in\n\
    \   little or no security.  An attacker may find it much easier to\n   reproduce\
    \ the PRNG environment that produced the keys, searching the\n   resulting small\
    \ set of possibilities, rather than brute force\n   searching the whole key space.\
    \  The generation of quality random\n   numbers is difficult.  RFC 1750 [RANDOM]\
    \ offers important guidance in\n   this area, and Appendix 3 of FIPS Pub 186 [DSS]\
    \ provides one quality\n   PRNG technique.\n   When using key agreement algorithms\
    \ or previously distributed\n   symmetric key-encryption keys, a key-encryption\
    \ key is used to\n   encrypt the content-encryption key.  If the key-encryption\
    \ and\n   content-encryption algorithms are different, the effective security\n\
    \   is determined by the weaker of the two algorithms.  If, for example,\n   a\
    \ message content is encrypted with 168-bit Triple-DES and the\n   Triple-DES\
    \ content-encryption key is wrapped with a 40-bit RC2 key,\n   then at most 40\
    \ bits of protection is provided.  A trivial search to\n   determine the value\
    \ of the 40-bit RC2 key can recover Triple-DES key,\n   and then the Triple-DES\
    \ key can be used to decrypt the content.\n   Therefore, implementers must ensure\
    \ that key-encryption algorithms\n   are as strong or stronger than content-encryption\
    \ algorithms.\n   Section 12.6 specifies key wrap algorithms used to encrypt a\
    \ Triple-\n   DES [3DES] content-encryption key with a Triple-DES key-encryption\n\
    \   key or to encrypt a RC2 [RC2] content-encryption key with a RC2 key-\n   encryption\
    \ key.  The key wrap algorithms make use of CBC mode\n   [MODES].  These key wrap\
    \ algorithms have been reviewed for use with\n   Triple and RC2.  They have not\
    \ been reviewed for use with other\n   cryptographic modes or other encryption\
    \ algorithms.  Therefore, if a\n   CMS implementation wishes to support ciphers\
    \ in addition to Triple-\n   DES or RC2, then additional key wrap algorithms need\
    \ to be defined to\n   support the additional ciphers.\n   Implementers should\
    \ be aware that cryptographic algorithms become\n   weaker with time.  As new\
    \ cryptoanalysis techniques are developed and\n   computing performance improves,\
    \ the work factor to break a particular\n   cryptographic algorithm will reduce.\
    \  Therefore, cryptographic\n   algorithm implementations should be modular allowing\
    \ new algorithms\n   to be readily inserted.  That is, implementers should be\
    \ prepared for\n   the set of mandatory to implement algorithms to change over\
    \ time.\n   The countersignature unauthenticated attribute includes a digital\n\
    \   signature that is computed on the content signature value, thus the\n   countersigning\
    \ process need not know the original signed content.\n   This structure permits\
    \ implementation efficiency advantages; however,\n   this structure may also permit\
    \ the countersigning of an inappropriate\n   signature value.  Therefore, implementations\
    \ that perform\n   countersignatures should either verify the original signature\
    \ value\n   prior to countersigning it (this verification requires processing\
    \ of\n   the original content), or implementations should perform\n   countersigning\
    \ in a context that ensures that only appropriate\n   signature values are countersigned.\n\
    \   Users of CMS, particularly those employing CMS to support interactive\n  \
    \ applications, should be aware that PKCS #1 Version 1.5 as specified\n   in RFC\
    \ 2313 [PKCS#1] is vulnerable to adaptive chosen ciphertext\n   attacks when applied\
    \ for encryption purposes.  Exploitation of this\n   identified vulnerability,\
    \ revealing the result of a particular RSA\n   decryption, requires access to\
    \ an oracle which will respond to a\n   large number of ciphertexts (based on\
    \ currently available results,\n   hundreds of thousands or more), which are constructed\
    \ adaptively in\n   response to previously-received replies providing information\
    \ on the\n   successes or failures of attempted decryption operations.  As a\n\
    \   result, the attack appears significantly less feasible to perpetrate\n   for\
    \ store-and-forward S/MIME environments than for directly\n   interactive protocols.\
    \  Where CMS constructs are applied as an\n   intermediate encryption layer within\
    \ an interactive request-response\n   communications environment, exploitation\
    \ could be more feasible.\n   An updated version of PKCS #1 has been published,\
    \ PKCS #1 Version 2.0\n   [NEWPKCS#1].  This new document will supersede RFC 2313.\
    \  PKCS #1\n   Version 2.0 preserves support for the encryption padding format\n\
    \   defined in PKCS #1 Version 1.5 [PKCS#1], and it also defines a new\n   alternative.\
    \  To resolve the adaptive chosen ciphertext\n   vulnerability, the PKCS #1 Version\
    \ 2.0 specifies and recommends use\n   of Optimal Asymmetric Encryption Padding\
    \ (OAEP) when RSA encryption\n   is used to provide confidentiality.  Designers\
    \ of protocols and\n   systems employing CMS for interactive environments should\
    \ either\n   consider usage of OAEP, or should ensure that information which could\n\
    \   reveal the success or failure of attempted PKCS #1 Version 1.5\n   decryption\
    \ operations is not provided.  Support for OAEP will likely\n   be added to a\
    \ future version of the CMS specification.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   This document is the result of contributions from many professionals.\n\
    \   I appreciate the hard work of all members of the IETF S/MIME Working\n   Group.\
    \  I extend a special thanks to Rich Ankney, Tim Dean, Steve\n   Dusse, Carl Ellison,\
    \ Peter Gutmann, Bob Jueneman, Stephen Henson,\n   Paul Hoffman, Scott Hollenbeck,\
    \ Don Johnson, Burt Kaliski, John Linn,\n   John Pawling, Blake Ramsdell, Francois\
    \ Rousseau, Jim Schaad, and Dave\n   Solo for their efforts and support.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Russell Housley\n   SPYRUS\n   381 Elden Street\n   Suite\
    \ 1120\n   Herndon, VA 20170\n   USA\n   EMail: housley@spyrus.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1999).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
