- title: __initial_text__
  contents:
  - '          Host Identity Protocol (HIP) Registration Extension

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies a registration mechanism for the Host\n\
    \   Identity Protocol (HIP) that allows hosts to register with services,\n   such\
    \ as HIP rendezvous servers or middleboxes.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document specifies an extension to the Host Identity\
    \ Protocol\n   (HIP) [RFC5201].  The extension provides a generic means for a\
    \ host\n   to register with a service.  The service may, for example, be a HIP\n\
    \   rendezvous server [RFC5204] or a middlebox [RFC3234].\n   This document makes\
    \ no further assumptions about the exact type of\n   service.  Likewise, this\
    \ document does not specify any mechanisms to\n   discover the presence of specific\
    \ services or means to interact with\n   them after registration.  Future documents\
    \ may describe those\n   operations.\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   In addition to the terminology defined in the HIP Architecture\n\
    \   [RFC4423], the HIP specification [RFC5201], and the HIP Rendezvous\n   Extension\
    \ [RFC5204], this document defines and uses the following\n   terms:\n   Requester:\n\
    \      a HIP node registering with a HIP registrar to request\n      registration\
    \ for a service.\n   Registrar:\n      a HIP node offering registration for one\
    \ or more services.\n   Service:\n      a facility that provides requesters with\
    \ new capabilities or\n      functionalities operating at the HIP layer.  Examples\
    \ include\n      firewalls that support HIP traversal or HIP rendezvous servers.\n\
    \   Registration:\n      shared state stored by a requester and a registrar, allowing\
    \ the\n      requester to benefit from one or more HIP services offered by the\n\
    \      registrar.  Each registration has an associated finite lifetime.\n    \
    \  Requesters can extend established registrations through re-\n      registration\
    \ (i.e., perform a refresh).\n   Registration Type:\n      an identifier for a\
    \ given service in the registration protocol.\n      For example, the rendezvous\
    \ service is identified by a specific\n      registration type.\n"
- title: 3.  HIP Registration Extension Overview
  contents:
  - "3.  HIP Registration Extension Overview\n   This document does not specify the\
    \ means by which a requester\n   discovers the availability of a service, or how\
    \ a requester locates a\n   registrar.  After a requester has discovered a registrar,\
    \ it either\n   initiates HIP base exchange or uses an existing HIP association\
    \ with\n   the registrar.  In both cases, registrars use additional parameters,\n\
    \   which the remainder of this document defines, to announce their\n   quality\
    \ and grant or refuse registration.  Requesters use\n   corresponding parameters\
    \ to register with the service.  Both the\n   registrar and the requester MAY\
    \ also include in the messages\n   exchanged additional HIP parameters specific\
    \ to the registration type\n   implicated.  Other documents will define parameters\
    \ and how they\n   shall be used.  The following sections describe the differences\n\
    \   between this registration handshake and the standard HIP base\n   exchange\
    \ [RFC5201].\n"
- title: 3.1.  Registrar Announcing Its Ability
  contents:
  - "3.1.  Registrar Announcing Its Ability\n   A host that is capable and willing\
    \ to act as a registrar SHOULD\n   include a REG_INFO parameter in the R1 packets\
    \ it sends during all\n   base exchanges.  If it is currently unable to provide\
    \ services due to\n   transient conditions, it SHOULD include an empty REG_INFO,\
    \ i.e., one\n   with no services listed.  If services can be provided later, it\n\
    \   SHOULD send UPDATE packets indicating the current set of services\n   available\
    \ in a new REG_INFO parameter to all hosts it is associated\n   with.\n"
- title: 3.2.  Requester Requesting Registration
  contents:
  - "3.2.  Requester Requesting Registration\n   To request registration with a service,\
    \ a requester constructs and\n   includes a corresponding REG_REQUEST parameter\
    \ in an I2 or UPDATE\n   packet it sends to the registrar.\n   If the requester\
    \ has no HIP association established with the\n   registrar, it SHOULD send the\
    \ REG_REQUEST at the earliest\n   possibility, i.e., in the I2 packet.  This minimizes\
    \ the number of\n   packets that need to be exchanged with the registrar.  A registrar\n\
    \   MAY end a HIP association that does not carry a REG_REQUEST by\n   including\
    \ a NOTIFY with the type REG_REQUIRED in the R2.  In this\n   case, no HIP association\
    \ is created between the hosts.  The\n   REG_REQUIRED notification error type\
    \ is 51.\n"
- title: 3.3.  Registrar Granting or Refusing Service(s) Registration
  contents:
  - "3.3.  Registrar Granting or Refusing Service(s) Registration\n   Once registration\
    \ has been requested, the registrar is able to\n   authenticate the requester\
    \ based on the host identity included in I2.\n   It then verifies that the host\
    \ identity is authorized to register\n   with the requested service(s), based\
    \ on local policies.  The details\n   of this authorization procedure depend on\
    \ the type of requested\n   service(s) and on the local policies of the registrar,\
    \ and are\n   therefore not further specified in this document.\n   After authorization,\
    \ the registrar includes a REG_RESPONSE parameter\n   in its response, which contains\
    \ the service type(s) for which it has\n   authorized registration, and zero or\
    \ more REG_FAILED parameters\n   containing the service type(s) for which it has\
    \ not authorized\n   registration or registration has failed for other reasons.\
    \  This\n   response can be either an R2 or an UPDATE message, respectively,\n\
    \   depending on whether the registration was requested during the base\n   exchange,\
    \ or using an existing association.  In particular,\n   REG_FAILED with a failure\
    \ type of zero indicates the service(s)\n   type(s) that require further credentials\
    \ for registration.\n   If the registrar requires further authorization and the\
    \ requester has\n   additional credentials available, the requester SHOULD try\
    \ to\n   register again with the service after the HIP association has been\n\
    \   established.  The precise means of establishing and verifying\n   credentials\
    \ are beyond the scope of this document and are expected to\n   be defined in\
    \ other documents.\n   Successful processing of a REG_RESPONSE parameter creates\n\
    \   registration state at the requester.  In a similar manner, successful\n  \
    \ processing of a REG_REQUEST parameter creates registration state at\n   the\
    \ registrar and possibly at the service.  Both the requester and\n   registrar\
    \ can cancel a registration before it expires, if the\n   services afforded by\
    \ a registration are no longer needed by the\n   requester, or cannot be provided\
    \ any longer by the registrar (for\n   instance, because its configuration has\
    \ changed).\n                 +-----+          I1          +-----+-----+\n   \
    \              |     |--------------------->|     |  S1 |\n                 |\
    \     |<---------------------|     |     |\n                 |     |  R1(REG_INFO:S1,S2)\
    \  |     +-----+\n                 | RQ  |                      |  R  |  S2 |\n\
    \                 |     |    I2(REG_REQ:S1)    |     |     |\n               \
    \  |     |--------------------->|     +-----+\n                 |     |<---------------------|\
    \     |  S3 |\n                 |     |    R2(REG_RESP:S1)   |     |     |\n \
    \                +-----+                      +-----+-----+\n   A requester (RQ)\
    \ registers with a registrar (R) of services (S1) and\n            (S2), with\
    \ which it has no current HIP association.\n                 +-----+         \
    \             +-----+-----+\n                 |     |  UPDATE(REG_INFO:S)  | \
    \    |     |\n                 |     |<---------------------|     |     |\n  \
    \               | RQ  |--------------------->|  R  |  S  |\n                 |\
    \     |  UPDATE(REG_REQ:S)   |     |     |\n                 |     |  UPDATE(REG_RESP:S)\
    \  |     |     |\n                 |     |<---------------------|     |     |\n\
    \                 +-----+                      +-----+-----+\n   A requester (RQ)\
    \ registers with a registrar (R) of services (S), with\n           which it currently\
    \ has a HIP association established.\n"
- title: 4.  Parameter Formats and Processing
  contents:
  - "4.  Parameter Formats and Processing\n   This section describes the format and\
    \ processing of the new\n   parameters introduced by the HIP registration extension.\n"
- title: 4.1.  Encoding Registration Lifetimes with Exponents
  contents:
  - "4.1.  Encoding Registration Lifetimes with Exponents\n   The HIP registration\
    \ uses an exponential encoding of registration\n   lifetimes.  This allows compact\
    \ encoding of 255 different lifetime\n   values ranging from 4 ms to 178 days\
    \ into an 8-bit integer field.\n   The lifetime exponent field used throughout\
    \ this document MUST be\n   interpreted as representing the lifetime value 2^((lifetime\
    \ - 64)/8)\n   seconds.\n"
- title: 4.2.  REG_INFO
  contents:
  - "4.2.  REG_INFO\n    0                   1                   2               \
    \    3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  \
    \           Type              |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Min Lifetime  | Max Lifetime  |  Reg Type #1  |  Reg Type #2  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      ...      |     ...       |  Reg Type #n  |               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \    Padding    +\n   |                                                      \
    \         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Type           930\n   Length         Length in octets, excluding Type, Length,\
    \ and Padding.\n   Min Lifetime   Minimum registration lifetime.\n   Max Lifetime\
    \   Maximum registration lifetime.\n   Reg Type       The registration types offered\
    \ by the registrar.\n   Other documents will define specific values for registration\
    \ types.\n   See Section 7 for more information.\n   Registrars include the parameter\
    \ in R1 packets in order to announce\n   their registration capabilities.  The\
    \ registrar SHOULD include the\n   parameter in UPDATE packets when its service\
    \ offering has changed.\n   HIP_SIGNATURE_2 protects the parameter within the\
    \ R1 packets.\n"
- title: 4.3.  REG_REQUEST
  contents:
  - "4.3.  REG_REQUEST\n    0                   1                   2            \
    \       3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  \
    \           Type              |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Lifetime    |  Reg Type #1  |  Reg Type #2  |  Reg Type #3  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      ...      |     ...       |  Reg Type #n  |               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \    Padding    +\n   |                                                      \
    \         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Type        932\n   Length      Length in octets, excluding Type, Length,\
    \ and Padding.\n   Lifetime    Requested registration lifetime.\n   Reg Type \
    \   The preferred registration types in order of preference.\n   Other documents\
    \ will define specific values for registration types.\n   See Section 7 for more\
    \ information.\n   A requester includes the REG_REQUEST parameter in I2 or UPDATE\n\
    \   packets to register with a registrar's service(s).  If the\n   REG_REQUEST\
    \ parameter is in an UPDATE packet, the registrar MUST NOT\n   modify the registrations\
    \ of registration types that are not listed in\n   the parameter.  Moreover, the\
    \ requester MUST NOT include the\n   parameter unless the registrar's R1 packet\
    \ or latest received UPDATE\n   packet has contained a REG_INFO parameter with\
    \ the requested\n   registration types.\n   The requester MUST NOT include more\
    \ than one REG_REQUEST parameter in\n   its I2 or UPDATE packets, while the registrar\
    \ MUST be able to process\n   one or more REG_REQUEST parameters in received I2\
    \ or UPDATE packets.\n   When the registrar receives a registration with a lifetime\
    \ that is\n   either smaller or greater than the minimum or maximum lifetime,\n\
    \   respectively, then it SHOULD grant the registration for the minimum\n   or\
    \ maximum lifetime, respectively.\n   HIP_SIGNATURE protects the parameter within\
    \ the I2 and UPDATE\n   packets.\n"
- title: 4.4.  REG_RESPONSE
  contents:
  - "4.4.  REG_RESPONSE\n    0                   1                   2           \
    \        3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  \
    \ |             Type              |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Lifetime    |  Reg Type #1  |  Reg Type #2  |  Reg Type #3  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |      ...      |     ...       |  Reg Type #n  |               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \    Padding    +\n   |                                                      \
    \         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Type        934\n   Length      Length in octets, excluding Type, Length,\
    \ and Padding.\n   Lifetime    Granted registration lifetime.\n   Reg Type   \
    \ The granted registration types in order of preference.\n   Other documents will\
    \ define specific values for registration types.\n   See Section 7 for more information.\n\
    \   The registrar SHOULD includes an REG_RESPONSE parameter in its R2 or\n   UPDATE\
    \ packet only if a registration has successfully completed.\n   The registrar\
    \ MUST NOT include more than one REG_RESPONSE parameter\n   in its R2 or UPDATE\
    \ packets, while the requester MUST be able to\n   process one or more REG_RESPONSE\
    \ parameters in received R2 or UPDATE\n   packets.\n   The requester MUST be prepared\
    \ to receive any registration lifetime,\n   including ones beyond the minimum\
    \ and maximum lifetime indicated in\n   the REG_INFO parameter.  It MUST NOT expect\
    \ that the returned\n   lifetime will be the requested one, even when the requested\
    \ lifetime\n   falls within the announced minimum and maximum.\n   HIP_SIGNATURE\
    \ protects the parameter within the R2 and UPDATE\n   packets.\n"
- title: 4.5.  REG_FAILED
  contents:
  - "4.5.  REG_FAILED\n     0                   1                   2            \
    \       3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n \
    \   |             Type              |             Length            |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    | Failure Type  |  Reg Type #1  |  Reg Type #2  |  Reg Type #3  |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |      ...      |     ...       |  Reg Type #n  |               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \    Padding    +\n    |                                                     \
    \          |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    Type          936\n    Length        Length in octets, excluding Type, Length,\
    \ and Padding.\n    Failure Type  Reason for failure.\n    Reg Type      The registration\
    \ types that failed with the specified\n                  reason.\n    Failure\
    \ Type    Reason\n    ------------    --------------------------------------------\n\
    \    0               Registration requires additional credentials\n    1     \
    \          Registration type unavailable\n    2-200           Unassigned\n   \
    \ 201-255         Reserved by IANA for private use\n   Other documents will define\
    \ specific values for registration types.\n   See Section 7 for more information.\n\
    \   A failure type of zero means a registrar requires additional\n   credentials\
    \ to authorize a requester to register with the\n   registration types listed\
    \ in the parameter.  A failure type of one\n   means that the requested service\
    \ type is unavailable at the\n   registrar.  Failure types other than zero (0)\
    \ and one (1) have not\n   been defined.\n   The registrar SHOULD include the\
    \ REG_FAILED parameter in its R2 or\n   UPDATE packet, if registration with the\
    \ registration types listed has\n   not completed successfully and a requester\
    \ is asked to try again with\n   additional credentials.\n   HIP_SIGNATURE protects\
    \ the parameter within the R2 and UPDATE\n   packets.\n"
- title: 5.  Establishing and Maintaining Registrations
  contents:
  - "5.  Establishing and Maintaining Registrations\n   Establishing and/or maintaining\
    \ a registration may require additional\n   information not available in the transmitted\
    \ REG_REQUEST or\n   REG_RESPONSE parameters.  Therefore, registration type definitions\n\
    \   MAY define dependencies for HIP parameters that are not defined in\n   this\
    \ document.  Their semantics are subject to the specific\n   registration type\
    \ specifications.\n   The minimum lifetime both registrars and requesters MUST\
    \ support is\n   10 seconds, while they SHOULD support a maximum lifetime of 120\n\
    \   seconds, at least.  These values define a baseline for the\n   specification\
    \ of services based on the registration system.  They\n   were chosen to be neither\
    \ too short nor too long, and to accommodate\n   for existing timeouts of state\
    \ established in middleboxes (e.g., NATs\n   and firewalls.)\n   A zero lifetime\
    \ is reserved for canceling purposes.  Requesting a\n   zero lifetime for a registration\
    \ type is equal to canceling the\n   registration of that type.  A requester MAY\
    \ cancel a registration\n   before it expires by sending a REG_REQ to the registrar\
    \ with a zero\n   lifetime.  A registrar SHOULD respond and grant a registration\
    \ with a\n   zero lifetime.  A registrar (and an attached service) MAY cancel\
    \ a\n   registration before it expires, at its own discretion.  However, if\n\
    \   it does so, it SHOULD send a REG_RESPONSE with a zero lifetime to all\n  \
    \ registered requesters.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This section discusses the threats on the HIP\
    \ registration protocol,\n   and their implications on the overall security of\
    \ HIP.  In\n   particular, it argues that the extensions described in this document\n\
    \   do not introduce additional threats to HIP.\n   The extensions described in\
    \ this document rely on the HIP base\n   exchange and do not modify its security\
    \ characteristics, e.g.,\n   digital signatures or HMAC.  Hence, the only threat\
    \ introduced by\n   these extensions is related to the creation of soft registration\n\
    \   state at the registrar.\n   Registrars act on a voluntary basis and are willing\
    \ to accept being a\n   responder and then to create HIP associations with a number\
    \ of\n   previously unknown hosts.  Because they have to store HIP association\n\
    \   state anyway, adding a certain amount of time-limited HIP\n   registration\
    \ state should not introduce any serious additional\n   threats, especially because\
    \ HIP registrars may cancel registrations\n   at any time at their own discretion,\
    \ e.g., because of resource\n   constraints during an attack.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   This section is to be interpreted according to the\
    \ Guidelines for\n   Writing an IANA Considerations Section in RFCs [RFC2434].\n\
    \   This document updates the IANA Registry for HIP Parameter Types by\n   assigning\
    \ new HIP Parameter Types values for the new HIP Parameters\n   defined in this\
    \ document:\n   o  REG_INFO (defined in Section 4.2)\n   o  REG_REQUEST (defined\
    \ in Section 4.3)\n   o  REG_RESPONSE (defined in Section 4.4)\n   o  REG_FAILED\
    \ (defined in Section 4.5)\n   IANA has allocated the Notify Message Type code\
    \ 51 for the\n   REG_REQUIRED notification error type in the Notify Message Type\n\
    \   registry.\n   IANA has opened a new registry for registration types.  This\
    \ document\n   does not define registration types but makes the following\n  \
    \ reservations:\n   Reg Type        Service\n   --------        -------\n   0-200\
    \           Unassigned\n   201-255         Reserved by IANA for private use\n\
    \   Adding a new type requires new IETF specifications.\n   IANA has opened a\
    \ new registry for registration failure types.  This\n   document makes the following\
    \ failure type definitions and\n   reservations:\n   Failure Type    Reason\n\
    \   ------------    --------------------------------------------\n   0       \
    \        Registration requires additional credentials\n   1               Registration\
    \ type unavailable\n   2-200           Unassigned\n   201-255         Reserved\
    \ by IANA for private use\n   Adding a new type requires new IETF specifications.\n"
- title: 8.  Acknowledgments
  contents:
  - "8.  Acknowledgments\n   The following people (in alphabetical order) have provided\
    \ thoughtful\n   and helpful discussions and/or suggestions that have helped to\n\
    \   improve this document: Jeffrey Ahrenholz, Miriam Esteban, Mika Kousa,\n  \
    \ Pekka Nikander, and Hannes Tschofenig.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC2434]  Narten, T. and H. Alvestrand, \"Guidelines for Writing\
    \ an\n              IANA Considerations Section in RFCs\", BCP 26, RFC 2434,\n\
    \              October 1998.\n   [RFC5201]  Moskowitz, R., Nikander, P., Jokela,\
    \ P., Ed., and T.\n              Henderson, \"Host Identity Protocol\", RFC 5201,\
    \ April 2008.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [RFC3234]  Carpenter, B. and S. Brim, \"Middleboxes:\
    \ Taxonomy and\n              Issues\", RFC 3234, February 2002.\n   [RFC4423]\
    \  Moskowitz, R. and P. Nikander, \"Host Identity Protocol\n              (HIP)\
    \ Architecture\", RFC 4423, May 2006.\n   [RFC5204]  Laganier, J. and L. Eggert,\
    \ \"Host Identity Protocol (HIP)\n              Rendezvous Extension\", RFC 5204,\
    \ April 2008.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Julien Laganier\n   DoCoMo Communications Laboratories\
    \ Europe GmbH\n   Landsberger Strasse 312\n   Munich  80687\n   Germany\n   Phone:\
    \ +49 89 56824 231\n   EMail: julien.ietf@laposte.net\n   URI:   http://www.docomolab-euro.com/\n\
    \   Teemu Koponen\n   Helsinki Institute for Information Technology\n   Advanced\
    \ Research Unit (ARU)\n   P.O. Box 9800\n   Helsinki  FIN-02015-HUT\n   Finland\n\
    \   Phone: +358 9 45 1\n   EMail: teemu.koponen@iki.fi\n   URI:   http://www.hiit.fi/\n\
    \   Lars Eggert\n   Nokia Research Center\n   P.O. Box 407\n   Nokia Group  00045\n\
    \   Finland\n   Phone: +358 50 48 24461\n   EMail: lars.eggert@nokia.com\n   URI:\
    \   http://research.nokia.com/people/lars_eggert/\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
