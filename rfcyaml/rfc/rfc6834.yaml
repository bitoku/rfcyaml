- title: __initial_text__
  contents:
  - '          Locator/ID Separation Protocol (LISP) Map-Versioning

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes the LISP (Locator/ID Separation Protocol)\n\
    \   Map-Versioning mechanism, which provides in-packet information about\n   Endpoint\
    \ ID to Routing Locator (EID-to-RLOC) mappings used to\n   encapsulate LISP data\
    \ packets.  The proposed approach is based on\n   associating a version number\
    \ to EID-to-RLOC mappings and the\n   transport of such a version number in the\
    \ LISP-specific header of\n   LISP-encapsulated packets.  LISP Map-Versioning\
    \ is particularly\n   useful to inform communicating Ingress Tunnel Routers (ITRs)\
    \ and\n   Egress Tunnel Routers (ETRs) about modifications of the mappings used\n\
    \   to encapsulate packets.  The mechanism is transparent to\n   implementations\
    \ not supporting this feature, since in the LISP-\n   specific header and in the\
    \ Map Records, bits used for Map-Versioning\n   can be safely ignored by ITRs\
    \ and ETRs that do not support the\n   mechanism.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6834.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Requirements Notation ...........................................4\n  \
    \ 3. Definitions of Terms ............................................4\n   4.\
    \ EID-to-RLOC Map-Version Number ..................................4\n      4.1.\
    \ The Null Map-Version .......................................5\n   5. Dealing\
    \ with Map-Version Numbers ................................6\n      5.1. Handling\
    \ Destination Map-Version Number ....................7\n      5.2. Handling Source\
    \ Map-Version Number .........................9\n   6. LISP Header and Map-Version\
    \ Numbers ............................10\n   7. Map Record and Map-Version .....................................11\n\
    \   8. Benefits and Case Studies for Map-Versioning ...................12\n  \
    \    8.1. Map-Versioning and Unidirectional Traffic .................12\n    \
    \  8.2. Map-Versioning and Interworking ...........................12\n      \
    \     8.2.1. Map-Versioning and Proxy-ITRs ......................13\n        \
    \   8.2.2. Map-Versioning and LISP-NAT ........................13\n          \
    \ 8.2.3. Map-Versioning and Proxy-ETRs ......................14\n      8.3. RLOC\
    \ Shutdown/Withdraw ....................................14\n      8.4. Map-Version\
    \ for Lightweight LISP Implementation ...........15\n   9. Incremental Deployment\
    \ and Implementation Status ...............15\n   10. Security Considerations\
    \ .......................................16\n      10.1. Map-Versioning against\
    \ Traffic Disruption ................16\n      10.2. Map-Versioning against Reachability\
    \ Information DoS ......17\n   11. Open Issues and Considerations ................................17\n\
    \      11.1. Lack of Synchronization among ETRs .......................17\n  \
    \ 12. Acknowledgments ...............................................19\n   13.\
    \ References ....................................................19\n      13.1.\
    \ Normative References .....................................19\n      13.2. Informative\
    \ References ...................................19\n   Appendix A. Estimation\
    \ of Time before Map-Version Wrap-Around .....21\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document describes the Map-Versioning mechanism used\
    \ to provide\n   information on changes in the EID-to-RLOC (Endpoint ID to Routing\n\
    \   Locator) mappings used in the LISP (Locator/ID Separation Protocol\n   [RFC6830])\
    \ context to perform packet encapsulation.  The mechanism is\n   totally transparent\
    \ to xTRs (Ingress and Egress Tunnel Routers) not\n   supporting such functionality.\
    \  It is not meant to replace any\n   existing LISP mechanisms but rather to extend\
    \ them by providing new\n   functionalities.  If for any unforeseen reason a normative\
    \ conflict\n   between this document and the LISP main specifications is found,\
    \ the\n   latter ([RFC6830]) has precedence over this document.\n   The basic\
    \ mechanism is to associate a Map-Version number to each LISP\n   EID-to-RLOC\
    \ mapping and transport such a version number in the LISP-\n   specific header.\
    \  When a mapping changes, a new version number is\n   assigned to the updated\
    \ mapping.  A change in an EID-to-RLOC mapping\n   can be a change in the RLOCs\
    \ set, by adding or removing one or more\n   RLOCs, but it can also be a change\
    \ in the priority or weight of one\n   or more RLOCs.\n   When Map-Versioning\
    \ is used, LISP-encapsulated data packets contain\n   the version number of the\
    \ two mappings used to select the RLOCs in\n   the outer header (i.e., both source\
    \ and destination).  These version\n   numbers are encoded in the 24 low-order\
    \ bits of the first longword of\n   the LISP header and indicated by a specific\
    \ bit in the flags (first 8\n   high-order bits of the first longword of the LISP\
    \ header).  Note that\n   not all packets need to carry version numbers.\n   When\
    \ an ITR (Ingress Tunnel Router) encapsulates a data packet, with\n   a LISP header\
    \ containing the Map-Version numbers, it puts in the\n   LISP-specific header\
    \ two version numbers:\n   1.  The version number assigned to the mapping (contained\
    \ in the\n       EID-to-RLOC Database) used to select the source RLOC.\n   2.\
    \  The version number assigned to the mapping (contained in the\n       EID-to-RLOC\
    \ Cache) used to select the destination RLOC.\n   This operation is two-fold.\
    \  On the one hand, it enables the ETR\n   (Egress Tunnel Router) receiving the\
    \ packet to know if the ITR has\n   the latest version number that any ETR at\
    \ the destination EID site\n   has provided to the ITR in a Map-Reply.  If this\
    \ is not the case, the\n   ETR can send to the ITR a Map-Request containing the\
    \ updated mapping\n   or solicit a Map-Request from the ITR (both cases are already\
    \ defined\n   in [RFC6830]).  In this way, the ITR can update its EID-to-RLOC\n\
    \   Cache.  On the other hand, it enables an ETR receiving such a packet\n   to\
    \ know if it has in its EID-to-RLOC Cache the latest mapping for the\n   source\
    \ EID (in the case of bidirectional traffic).  If this is not\n   the case, a\
    \ Map-Request can be sent.\n   Issues and concerns about the deployment of LISP\
    \ for Internet traffic\n   are discussed in [RFC6830].  Section 11 provides additional\
    \ issues\n   and concerns raised by this document.  In particular, Section 11.1\n\
    \   provides details about the ETRs' synchronization issue in the context\n  \
    \ of Map-Versioning.\n"
- title: 2.  Requirements Notation
  contents:
  - "2.  Requirements Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 3.  Definitions of Terms
  contents:
  - "3.  Definitions of Terms\n   This document uses terms already defined in the\
    \ main LISP\n   specification [RFC6830].  Here, we define the terms that are specific\n\
    \   to the Map-Versioning mechanism.  Throughout the whole document, Big\n   Endian\
    \ bit ordering is used.\n   Map-Version number:  An unsigned 12-bit integer is\
    \ assigned to an\n      EID-to-RLOC mapping, not including the value 0 (0x000).\n\
    \   Null Map-Version:  The 12-bit null value of 0 (0x000) is not used as\n   \
    \   a Map-Version number.  It is used to signal that no Map-Version\n      number\
    \ is assigned to the EID-to-RLOC mapping.\n   Source Map-Version number:  This\
    \ Map-Version number of the\n      EID-to-RLOC mapping is used to select the source\
    \ address (RLOC)\n      of the outer IP header of LISP-encapsulated packets.\n\
    \   Destination Map-Version number:  This Map-Version number of the\n      EID-to-RLOC\
    \ mapping is used to select the destination address\n      (RLOC) of the outer\
    \ IP header of LISP-encapsulated packets.\n"
- title: 4.  EID-to-RLOC Map-Version Number
  contents:
  - "4.  EID-to-RLOC Map-Version Number\n   The EID-to-RLOC Map-Version number consists\
    \ of an unsigned 12-bit\n   integer.  The version number is assigned on a per-mapping\
    \ basis,\n   meaning that different mappings have a different version number,\n\
    \   which is also updated independently.  An update in the version number\n  \
    \ (i.e., a newer version) consists of incrementing by one the older\n   version\
    \ number.  Appendix A contains a rough estimation of the\n   wrap-around time\
    \ for the Map-Version number.\n   The space of version numbers has a circular\
    \ order where half of the\n   version numbers are greater (i.e., newer) than the\
    \ current\n   Map-Version number and the other half of the version numbers are\n\
    \   smaller (i.e., older) than the current Map-Version number.  In a more\n  \
    \ formal way, assuming that we have two version numbers V1 and V2 and\n   that\
    \ the numbers are expressed in N bits, the following steps MUST be\n   performed\
    \ (in the same order as shown below) to strictly define their\n   order:\n   1.\
    \  V1 = V2 : The Map-Version numbers are the same.\n   2.  V2 > V1 : if and only\
    \ if\n          V2 > V1 AND (V2 - V1) <= 2**(N-1)\n          OR\n          V1\
    \ > V2 AND (V1 - V2) > 2**(N-1)\n   3.  V1 > V2 : otherwise.\n   Using 12 bits,\
    \ as defined in this document, and assuming a\n   Map-Version value of 69, Map-Version\
    \ numbers in the range\n   [70; 69 + 2048] are greater than 69, while Map-Version\
    \ numbers in the\n   range [69 + 2049; (69 + 4096) mod 4096] are smaller than\
    \ 69.\n   Map-Version numbers are assigned to mappings by configuration.  The\n\
    \   initial Map-Version number of a new EID-to-RLOC mapping SHOULD be\n   assigned\
    \ randomly, but it MUST NOT be set to the Null Map-Version\n   value (0x000),\
    \ because the Null Map-Version number has a special\n   meaning (see Section 4.1).\n\
    \   Upon reboot, an ETR will use mappings configured in its EID-to-RLOC\n   Database.\
    \  If those mappings have a Map-Version number, it will be\n   used according\
    \ to the mechanisms described in this document.  ETRs\n   MUST NOT automatically\
    \ generate and assign Map-Version numbers to\n   mappings in the EID-to-RLOC Database.\n"
- title: 4.1.  The Null Map-Version
  contents:
  - "4.1.  The Null Map-Version\n   The value 0x000 (zero) is not a valid Map-Version\
    \ number indicating\n   the version of the EID-to-RLOC mapping.  Such a value\
    \ is used for\n   special purposes and is named the Null Map-Version number.\n\
    \   The Null Map-Version MAY appear in the LISP-specific header as either\n  \
    \ a Source Map-Version number (cf. Section 5.2) or a Destination\n   Map-Version\
    \ number (cf. Section 5.1).  When the Source Map-Version\n   number is set to\
    \ the Null Map-Version value, it means that no map\n   version information is\
    \ conveyed for the source site.  This means that\n   if a mapping exists for the\
    \ source EID in the EID-to-RLOC Cache, then\n   the ETR MUST NOT compare the received\
    \ Null Map-Version with the\n   content of the EID-to-RLOC Cache.  When the Destination\
    \ Map-Version\n   number is set to the Null Map-Version value, it means that no\
    \ map\n   version information is conveyed for the destination site.  This means\n\
    \   that the ETR MUST NOT compare the value with the Map-Version number\n   of\
    \ the mapping for the destination EID present in the EID-to-RLOC\n   Database.\n\
    \   The other use of the Null Map-Version number is in the Map Records,\n   which\
    \ are part of the Map-Request, Map-Reply, and Map-Register\n   messages (defined\
    \ in [RFC6830]).  Map Records that have a Null\n   Map-Version number indicate\
    \ that there is no Map-Version number\n   associated with the mapping.  This means\
    \ that LISP-encapsulated\n   packets destined to the EID-Prefix referred to by\
    \ the Map Record MUST\n   either not contain any Map-Version numbers (V-bit set\
    \ to 0) or, if\n   they contain Map-Version numbers (V-bit set to 1), then the\n\
    \   destination Map-Version number MUST be set to the Null Map-Version\n   number.\
    \  Any value different from zero means that Map-Versioning is\n   supported and\
    \ MAY be used.\n   The fact that the 0 value has a special meaning for the Map-Version\n\
    \   number implies that, when updating a Map-Version number because of a\n   change\
    \ in the mapping, if the next value is 0, then the Map-Version\n   number MUST\
    \ be incremented by 2 (i.e., set to 1, which is the next\n   valid value).\n"
- title: 5.  Dealing with Map-Version Numbers
  contents:
  - "5.  Dealing with Map-Version Numbers\n   The main idea of using Map-Version numbers\
    \ is that whenever there is\n   a change in the mapping (e.g., adding/removing\
    \ RLOCs, a change in the\n   weights due to Traffic Engineering policies, or a\
    \ change in the\n   priorities) or a LISP site realizes that one or more of its\
    \ own RLOCs\n   are not reachable anymore from a local perspective (e.g., through\n\
    \   IGP, or policy changes) the LISP site updates the mapping, also\n   assigning\
    \ a new Map-Version number.\n   To each mapping, a version number is associated\
    \ and changes each time\n   the mapping is changed.  Note that Map-Versioning\
    \ does not introduce\n   new problems concerning the coordination of different\
    \ ETRs of a\n   domain.  Indeed, ETRs belonging to the same LISP site must return\
    \ for\n   a specific EID-Prefix the same mapping, including the same\n   Map-Version\
    \ number.  In principle, this is orthogonal to whether or\n   not Map-Versioning\
    \ is used.  The synchronization problem and its\n   implication on the traffic\
    \ are out of the scope of this document (see\n   Section 11).\n   In order to\
    \ announce in a data-driven fashion that the mapping has\n   been updated, Map-Version\
    \ numbers used to create the outer IP header\n   of the LISP-encapsulated packet\
    \ are embedded in the LISP-specific\n   header.  This means that the header needs\
    \ to contain two Map-Version\n   numbers:\n   o  The Source Map-Version number\
    \ of the EID-to-RLOC mapping in the\n      EID-to-RLOC Database used to select\
    \ the source RLOC.\n   o  The Destination Map-Version number of the EID-to-RLOC\
    \ mapping in\n      the EID-to-RLOC Cache used to select the destination RLOC.\n\
    \   By embedding both the Source Map-Version number and the Destination\n   Map-Version\
    \ number, an ETR receiving a LISP packet with Map-Version\n   numbers can perform\
    \ the following checks:\n   1.  The ITR that has sent the packet has an up-to-date\
    \ mapping in its\n       EID-to-RLOC Cache for the destination EID and is performing\n\
    \       encapsulation correctly.\n   2.  In the case of bidirectional traffic,\
    \ the mapping in the local\n       ETR EID-to-RLOC Cache for the source EID is\
    \ up to date.\n   If one or both of the above conditions do not hold, the ETR\
    \ can send\n   a Map-Request either to make the ITR aware that a new mapping is\n\
    \   available (see Section 5.1) or to update the mapping in the local\n   EID-to-RLOC\
    \ Cache (see Section 5.2).\n"
- title: 5.1.  Handling Destination Map-Version Number
  contents:
  - "5.1.  Handling Destination Map-Version Number\n   When an ETR receives a packet,\
    \ the Destination Map-Version number\n   relates to the mapping for the destination\
    \ EID for which the ETR is\n   an RLOC.  This mapping is part of the ETR EID-to-RLOC\
    \ Database.\n   Since the ETR is authoritative for the mapping, it has the correct\n\
    \   and up-to-date Destination Map-Version number.  A check on this\n   version\
    \ number can be done, where the following cases can arise:\n   1.  The packet\
    \ arrives with the same Destination Map-Version number\n       stored in the EID-to-RLOC\
    \ Database.  This is the regular case.\n       The ITR sending the packet has\
    \ in its EID-to-RLOC Cache an\n       up-to-date mapping.  No further actions\
    \ are needed.\n   2.  The packet arrives with a Destination Map-Version number\
    \ greater\n       (i.e., newer) than the one stored in the EID-to-RLOC Database.\n\
    \       Since the ETR is authoritative on the mapping, meaning that the\n    \
    \   Map-Version number of its mapping is the correct one, this\n       implies\
    \ that someone is not behaving correctly with respect to\n       the specifications.\
    \  In this case, the packet carries a version\n       number that is not valid;\
    \ otherwise, the ETR would have the same\n       number, and the packet SHOULD\
    \ be silently dropped.\n   3.  The packets arrive with a Destination Map-Version\
    \ number smaller\n       (i.e., older) than the one stored in the EID-to-RLOC\
    \ Database.\n       This means that the ITR sending the packet has an old mapping\
    \ in\n       its EID-to-RLOC Cache containing stale information.  The ETR MAY\n\
    \       choose to normally process the encapsulated datagram according to\n  \
    \     [RFC6830]; however, the ITR sending the packet has to be informed\n    \
    \   that a newer mapping is available.  This is done with a\n       Map-Request\
    \ message sent back to the ITR.  The Map-Request will\n       either trigger a\
    \ Map-Request back using the Solicit-Map-Request\n       (SMR) bit or it will\
    \ piggyback the newer mapping.  These are not\n       new mechanisms; how to use\
    \ the SMR bit or how to piggyback\n       mappings in Map-Request messages is\
    \ already described in\n       [RFC6830], while their security is discussed in\
    \ [LISP-THREATS].\n       These Map-Request messages should be rate-limited\n\
    \       (rate-limitation policies are also described in [RFC6830]).  The\n   \
    \    feature introduced by Map-Version numbers is the possibility of\n       blocking\
    \ traffic not using the latest mapping.  Indeed, after a\n       certain number\
    \ of retries, if the Destination Map-Version number\n       in the packets is\
    \ not updated, the ETR MAY drop packets with a\n       stale Map-Version number\
    \ while strongly reducing the rate of\n       Map-Request messages.  This is because\
    \ either the ITR is refusing\n       to use the mapping for which the ETR is authoritative,\
    \ or (worse)\n       it might be some form of attack.  Another case might be that\
    \ the\n       control plane is experiencing transient failures, so the\n     \
    \  Map-Requests cannot reach that ITR.  By continually sending\n       Map-Requests\
    \ at a very low rate, it is possible to recover from\n       this situation.\n\
    \   The rule in the third case MAY be more restrictive.  If the mapping\n   has\
    \ been the same for a period of time as long as the Time to Live\n   (TTL) (defined\
    \ in [RFC6830]) of the previous version of the mapping,\n   all packets arriving\
    \ with an old Map-Version SHOULD be silently\n   dropped right away without issuing\
    \ any Map-Request.  Such action is\n   permitted because if the new mapping with\
    \ the updated version number\n   has been unchanged for at least the same time\
    \ as the TTL of the older\n   mapping, all the entries in the EID-to-RLOC Caches\
    \ of ITRs must have\n   expired.  Hence, all ITRs sending traffic should have\
    \ refreshed the\n   mapping according to [RFC6830].  If packets with old Map-Version\n\
    \   numbers are still received, then either someone has not respected the\n  \
    \ TTL or it is a form of spoof/attack.  In both cases, this is not\n   valid behavior\
    \ with respect to the specifications and the packet\n   SHOULD be silently dropped.\n\
    \   LISP-encapsulated packets with the V-bit set, when the original\n   mapping\
    \ in the EID-to-RLOC Database has the version number set to the\n   Null Map-Version\
    \ value, MAY be silently dropped.  As explained in\n   Section 4.1, if an EID-to-RLOC\
    \ mapping has a Null Map-Version, it\n   means that ITRs, using the mapping for\
    \ encapsulation, MUST NOT use a\n   Map-Version number in the LISP-specific header.\n\
    \   For LISP-encapsulated packets with the V-bit set, when the original\n   mapping\
    \ in the EID-to-RLOC Database has the version number set to a\n   value different\
    \ from the Null Map-Version value, a Destination\n   Map-Version number equal\
    \ to the Null Map-Version value means that the\n   Destination Map-Version number\
    \ MUST be ignored.\n"
- title: 5.2.  Handling Source Map-Version Number
  contents:
  - "5.2.  Handling Source Map-Version Number\n   When an ETR receives a packet, the\
    \ Source Map-Version number relates\n   to the mapping for the source EID for\
    \ which the ITR that sent the\n   packet is authoritative.  If the ETR has an\
    \ entry in its EID-to-RLOC\n   Cache for the source EID, then a check can be performed\
    \ and the\n   following cases can arise:\n   1.  The packet arrives with the same\
    \ Source Map-Version number as\n       that stored in the EID-to-RLOC Cache. \
    \ This is the correct\n       regular case.  The ITR has in its EID-to-RLOC Cache\
    \ an up-to-date\n       copy of the mapping.  No further actions are needed.\n\
    \   2.  The packet arrives with a Source Map-Version number greater\n       (i.e.,\
    \ newer) than the one stored in the local EID-to-RLOC Cache.\n       This means\
    \ that the ETR has in its EID-to-RLOC Cache a mapping\n       that is stale and\
    \ needs to be updated.  A Map-Request SHOULD be\n       sent to get the new mapping\
    \ for the source EID.  This is a normal\n       Map-Request message sent through\
    \ the mapping system and MUST\n       respect the specifications in [RFC6830],\
    \ including rate-\n       limitation policies.\n   3.  The packet arrives with\
    \ a Source Map-Version number smaller\n       (i.e., older) than the one stored\
    \ in the local EID-to-RLOC Cache.\n       Such a case is not valid with respect\
    \ to the specifications.\n       Indeed, if the mapping is already present in\
    \ the EID-to-RLOC\n       Cache, this means that an explicit Map-Request has been\
    \ sent and\n       a Map-Reply has been received from an authoritative source.\n\
    \       Assuming that the mapping system is not corrupted, the\n       Map-Version\
    \ in the EID-to-RLOC Cache is the correct one, while\n       the one carried by\
    \ the packet is stale.  In this situation, the\n       packet MAY be silently\
    \ dropped.\n   If the ETR does not have an entry in the EID-to-RLOC Cache for\
    \ the\n   source EID (e.g., in the case of unidirectional traffic), then the\n\
    \   Source Map-Version number can be safely ignored.\n   For LISP-encapsulated\
    \ packets with the V-bit set, if the Source\n   Map-Version number is the Null\
    \ Map-Version value, it means that the\n   Source Map-Version number MUST be ignored.\n"
- title: 6.  LISP Header and Map-Version Numbers
  contents:
  - "6.  LISP Header and Map-Version Numbers\n   In order for the versioning approach\
    \ to work, the LISP-specific\n   header has to carry both the Source Map-Version\
    \ number and\n   Destination Map-Version number.  This is done by setting the\
    \ V-bit in\n   the LISP-specific header as defined in [RFC6830] Section 5.3. \
    \ When\n   the V-bit is set, the low-order 24 bits of the first longword are\n\
    \   used to transport both the source and destination Map-Version\n   numbers.\
    \  In particular, the first 12 bits are used for the Source\n   Map-Version number\
    \ and the second 12 bits for the Destination\n   Map-Version number.\n   Below\
    \ is an example of a LISP header carrying version numbers in the\n   case of IPv4-in-IPv4\
    \ encapsulation.  The same setting can be used for\n   any other case (IPv4-in-IPv6,\
    \ IPv6-in-IPv4, and IPv6-in-IPv6).\n        0                   1            \
    \       2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     / |N|L|E|V|I|flags|  Source Map-Version   |Destination Map-Version|\n  \
    \ LISP+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \ \\ |                 Instance ID/Locator-Status-Bits               |\n     \
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Source\
    \ Map-Version number (12 bits):  Map-Version of the mapping used\n      by the\
    \ ITR to select the RLOC present in the 'Source Routing\n      Locator' field.\
    \  Section 5.2 describes how to set this value on\n      transmission and handle\
    \ it on reception.\n   Destination Map-Version number (12 bits):  Map-Version\
    \ of the mapping\n      used by the ITR to select the RLOC present in the 'Destination\n\
    \      Routing Locator' field.  Section 5.1 describes how to set this\n      value\
    \ on transmission and handle it on reception.\n   This document only specifies\
    \ how to use the low-order 24 bits of the\n   first longword of the LISP-specific\
    \ header when the V-bit is set to\n   1.  All other cases, including the bit fields\
    \ of the rest of the\n   LISP-specific header and the whole LISP packet format,\
    \ are specified\n   in [RFC6830].  Not all of the LISP-encapsulated packets need\
    \ to carry\n   version numbers.  When Map-Version numbers are carried in these\n\
    \   packets, the V-bit MUST be set to 1.  All permissible combinations of\n  \
    \ the flags when the V-bit is set to 1 are described in [RFC6830].\n"
- title: 7.  Map Record and Map-Version
  contents:
  - "7.  Map Record and Map-Version\n   To accommodate the proposed mechanism, the\
    \ Map Records that are\n   transported in Map-Request/Map-Reply/Map-Register messages\
    \ need to\n   carry the Map-Version number as well.  For this purpose, the 12\
    \ bits\n   before the 'EID-Prefix-AFI' field in the Record that describes a\n\
    \   mapping are used.  This is defined in Section 6.1.4 of [RFC6830] and\n   reported\
    \ here as an example.\n        0                   1                   2     \
    \              3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1\n   +-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   |                          Record  TTL                          |\n  \
    \ |   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   R\
    \   | Locator Count | EID mask-len  | ACT |A|      Reserved         |\n   e  \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   c   |\
    \ Rsvd  |  Map-Version Number   |       EID-Prefix-AFI          |\n   o   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   r   |                          EID-Prefix                           |\n  \
    \ d   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |\
    \  /|    Priority   |    Weight     |  M Priority   |   M Weight    |\n   | L\
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   | o |\
    \        Unused Flags     |L|p|R|           Loc-AFI             |\n   | c +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  \\|                             Locator                           |\n \
    \  +-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Map-Version\
    \ Number:  Map-Version of the mapping contained in the\n      Record.  As explained\
    \ in Section 4.1, this field can be zero (0),\n      meaning that no Map-Version\
    \ is associated to the mapping; hence,\n      packets that are LISP encapsulated\
    \ using this mapping MUST NOT\n      contain Map-Version numbers in the LISP-specific\
    \ header, and the\n      V-bit MUST be set to 0.\n   This packet format works\
    \ perfectly with xTRs that do not support\n   Map-Versioning, since they can simply\
    \ ignore those bits.\n"
- title: 8.  Benefits and Case Studies for Map-Versioning
  contents:
  - "8.  Benefits and Case Studies for Map-Versioning\n   In the following sections,\
    \ we provide more discussion on various\n   aspects and uses of Map-Versioning.\
    \  Security observations are\n   grouped in Section 10.\n"
- title: 8.1.  Map-Versioning and Unidirectional Traffic
  contents:
  - "8.1.  Map-Versioning and Unidirectional Traffic\n   When using Map-Versioning,\
    \ the LISP-specific header carries two\n   Map-Version numbers, for both source\
    \ and destination mappings.  This\n   can raise the question on what will happen\
    \ in the case of\n   unidirectional flows, for instance, in the case presented\
    \ in\n   Figure 1, since the LISP specification does not mandate that the ETR\n\
    \   have a mapping for the source EID.\n             +-----------------+     \
    \       +-----------------+\n             | Domain A        |            | Domain\
    \ B        |\n             |       +---------+            +---------+       |\n\
    \             |       | ITR A   |----------->| ETR B   |       |\n           \
    \  |       +---------+            +---------+       |\n             |        \
    \         |            |                 |\n             +-----------------+ \
    \           +-----------------+\n           Figure 1: Unidirectional Traffic between\
    \ LISP Domains\n   In the case of the ITR, the ITR is able to put both the source\
    \ and\n   destination version number in the LISP header, since the Source\n  \
    \ Map-Version number is in the ITR's database, while the Destination\n   Map-Version\
    \ number is in the ITR's cache.\n   In the case of the ETR, the ETR simply checks\
    \ only the Destination\n   Map-Version number in the same way as that described\
    \ in Section 5,\n   ignoring the Source Map-Version number.\n"
- title: 8.2.  Map-Versioning and Interworking
  contents:
  - "8.2.  Map-Versioning and Interworking\n   Map-Versioning is compatible with the\
    \ LISP interworking between LISP\n   and non-LISP sites as defined in [RFC6832].\
    \  LISP interworking\n   defines three techniques to make LISP sites and non-LISP\
    \ sites,\n   namely Proxy-ITR, LISP-NAT, and Proxy-ETR.  The following text\n\
    \   describes how Map-Versioning relates to these three mechanisms.\n"
- title: 8.2.1.  Map-Versioning and Proxy-ITRs
  contents:
  - "8.2.1.  Map-Versioning and Proxy-ITRs\n   The purpose of the Proxy-ITR (PITR)\
    \ is to encapsulate traffic\n   originating in a non-LISP site in order to deliver\
    \ the packet to one\n   of the ETRs of the LISP site (cf. Figure 2).  This case\
    \ is very\n   similar to the unidirectional traffic case described in Section\
    \ 8.1;\n   hence, similar rules apply.\n        +----------+                 \
    \            +-------------+\n        | LISP     |                           \
    \  | non-LISP    |\n        | Domain A |                             | Domain\
    \ B    |\n        |  +-------+        +-----------+        |             |\n \
    \       |  | ETR A |<-------| Proxy-ITR |<-------|             |\n        |  +-------+\
    \        +-----------+        |             |\n        |          |          \
    \                   |             |\n        +----------+                    \
    \         +-------------+\n   Figure 2: Unidirectional Traffic from Non-LISP Domain\
    \ to LISP Domain\n   The main difference is that a Proxy-ITR does not have any\
    \ mapping,\n   since it just encapsulates packets arriving from the non-LISP site\n\
    \   and thus cannot provide a Source Map-Version.  In this case, the\n   Proxy-ITR\
    \ will just put the Null Map-Version value as the Source\n   Map-Version number,\
    \ while the receiving ETR will ignore the field.\n   With this setup, LISP Domain\
    \ A is able to check whether or not the\n   PITR is using the latest mapping.\
    \  If this is not the case, the\n   mapping for LISP Domain A on the PITR can\
    \ be updated using one of the\n   mechanisms defined in [RFC6830] and [RFC6832].\n"
- title: 8.2.2.  Map-Versioning and LISP-NAT
  contents:
  - "8.2.2.  Map-Versioning and LISP-NAT\n   The LISP-NAT mechanism is based on address\
    \ translation from\n   non-routable EIDs to routable EIDs and does not involve\
    \ any form of\n   encapsulation.  As such, Map-Versioning does not apply in this\
    \ case.\n"
- title: 8.2.3.  Map-Versioning and Proxy-ETRs
  contents:
  - "8.2.3.  Map-Versioning and Proxy-ETRs\n   The purpose of the Proxy-ETR (PETR)\
    \ is to decapsulate traffic\n   originating in a LISP site in order to deliver\
    \ the packet to the\n   non-LISP site (cf. Figure 3).  One of the main reasons\
    \ to deploy\n   PETRs is to bypass uRPF (Unicast Reverse Path Forwarding) checks\
    \ on\n   the provider edge.\n         +----------+                           \
    \  +-------------+\n         | LISP     |                             | non-LISP\
    \    |\n         | Domain A |                             | Domain B    |\n  \
    \       |  +-------+        +-----------+        |             |\n         | \
    \ | ITR A |------->| Proxy-ETR |------->|             |\n         |  +-------+\
    \        +-----------+        |             |\n         |          |         \
    \                    |             |\n         +----------+                  \
    \           +-------------+\n   Figure 3: Unidirectional Traffic from LISP Domain\
    \ to Non-LISP Domain\n   A Proxy-ETR does not have any mapping, since it just\
    \ decapsulates\n   packets arriving from the LISP site.  In this case, the ITR\
    \ will just\n   put the Null Map-Version value as the Destination Map-Version\
    \ number,\n   while the receiving Proxy-ETR will ignore the field.\n   With this\
    \ setup, the Proxy-ETR is able to check whether or not the\n   mapping has changed.\
    \  If this is the case, the mapping for LISP\n   Domain A on the PETR can be updated\
    \ using one of the mechanisms\n   defined in [RFC6830] and [RFC6832].\n"
- title: 8.3.  RLOC Shutdown/Withdraw
  contents:
  - "8.3.  RLOC Shutdown/Withdraw\n   Map-Versioning can also be used to perform a\
    \ graceful shutdown or\n   withdraw of a specific RLOC.  This is achieved by simply\
    \ issuing a\n   new mapping, with an updated Map-Version number where the specific\n\
    \   RLOC to be shut down is withdrawn or announced as unreachable (via\n   the\
    \ R-bit in the Map Record; see [RFC6830]), but without actually\n   turning it\
    \ off.\n   Once no more traffic is received by the RLOC, it can be shut down\n\
    \   gracefully, because all sites actively using the mapping have\n   updated\
    \ it.\n   It should be pointed out that for frequent up/down changes such a\n\
    \   mechanism should not be used, since this can generate excessive load\n   on\
    \ the mapping system.\n"
- title: 8.4.  Map-Version for Lightweight LISP Implementation
  contents:
  - "8.4.  Map-Version for Lightweight LISP Implementation\n   The use of Map-Versioning\
    \ can help in developing a lightweight\n   implementation of LISP.  However, this\
    \ comes with the price of not\n   supporting the Locator-Status-Bit, which is\
    \ useful in some contexts.\n   In the current LISP specifications, the set of\
    \ RLOCs must always be\n   maintained ordered and consistent with the content\
    \ of the\n   Locator-Status-Bits (see Section 6.5 of [RFC6830]).  With\n   Map-Versioning,\
    \ such types of mechanisms can be avoided.  When a new\n   RLOC is added to a\
    \ mapping, it is not necessary to \"append\" new\n   Locators to the existing\
    \ ones as explained in Section 6.5 of\n   [RFC6830].  A new mapping with a new\
    \ Map-Version number will be\n   issued, and since the old Locators are still\
    \ valid, the transition\n   will occur with no disruptions.  The same applies\
    \ for the case where\n   an RLOC is withdrawn.  There is no need to maintain holes\
    \ in the list\n   of Locators, as is the case when using Locator-Status-Bits,\
    \ for sites\n   that are not using the RLOC that has been withdrawn; in this case,\n\
    \   the transition will occur with no disruptions.\n   All of these operations,\
    \ as already stated, do not need to maintain\n   any consistency among Locator-Status-Bits\
    \ and in the way that the\n   RLOCs are stored in the EID-to-RLOC Cache.\n   Further,\
    \ Map-Versioning can be used as a substitute for the \"clock\n   sweep\" operation\
    \ described in Section 6.6.1 of [RFC6830].  Indeed,\n   every LISP site communicating\
    \ to a specific LISP site that has\n   updated the mapping will be informed of\
    \ the available new mapping in\n   a data-driven manner.\n   Note that what is\
    \ proposed in this section is just an example and\n   MUST NOT be considered as\
    \ specifications for a lightweight LISP\n   implementation.  If the IETF decides\
    \ to undertake such work, it will\n   be documented elsewhere.\n"
- title: 9.  Incremental Deployment and Implementation Status
  contents:
  - "9.  Incremental Deployment and Implementation Status\n   Map-Versioning can be\
    \ incrementally deployed without any negative\n   impact on existing LISP elements\
    \ (e.g., xTRs, Map-Servers,\n   Proxy-ITRs, etc.).  Any LISP element that does\
    \ not support\n   Map-Versioning can safely ignore Map-Version numbers carried\
    \ in the\n   LISP header.  Further, there is no need of any specific mechanism\
    \ to\n   discover whether or not an xTR supports Map-Versioning.  This\n   information\
    \ is already included in the Map Record.\n   Map-Versioning is currently implemented\
    \ in OpenLISP [OPENLISP].\n   Note that the reference document for LISP implementations\
    \ and\n   interoperability tests remains [RFC6830].\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   Map-Versioning does not introduce any security\
    \ issues concerning both\n   the data plane and the control plane.  On the contrary,\
    \ as described\n   below, if Map-Versioning may also be used to update mappings\
    \ in the\n   case of change in the reachability information (i.e., instead of\
    \ the\n   Locator-Status-Bits), it is possible to reduce the effects of some\n\
    \   DoS or spoofing attacks that can happen in an untrusted environment.\n   Robustness\
    \ of the Map-Versioning mechanism leverages on a trusted\n   Mapping Distribution\
    \ System.  A thorough security analysis of LISP is\n   documented in [LISP-THREATS].\n"
- title: 10.1.  Map-Versioning against Traffic Disruption
  contents:
  - "10.1.  Map-Versioning against Traffic Disruption\n   An attacker can try to disrupt\
    \ ongoing communications by creating\n   LISP-encapsulated packets with wrong\
    \ Locator-Status-Bits.  If the xTR\n   blindly trusts the Locator-Status-Bits,\
    \ it will change the\n   encapsulation accordingly, which can result in traffic\
    \ disruption.\n   This does not happen in the case of Map-Versioning.  As described\
    \ in\n   Section 5, upon a version number change the xTR first issues a\n   Map-Request.\
    \  The assumption is that the mapping distribution system\n   is sufficiently\
    \ secure that Map-Request and Map-Reply messages and\n   their content can be\
    \ trusted.  Security issues concerning specific\n   mapping distribution systems\
    \ are out of the scope of this document.\n   In the case of Map-Versioning, the\
    \ attacker should \"guess\" a valid\n   version number that triggers a Map-Request\
    \ as described in Section 5;\n   otherwise, the packet is simply dropped.  Nevertheless,\
    \ guessing a\n   version number that generates a Map-Request is easy; hence, it\
    \ is\n   important to follow the rate-limitation policies described in\n   [RFC6830]\
    \ in order to avoid DoS attacks.\n   Note that a similar level of security can\
    \ be obtained with\n   Locator-Status-Bits by simply making it mandatory to verify\
    \ any\n   change through a Map-Request.  However, in this case\n   Locator-Status-Bits\
    \ lose their meaning, because it does not matter\n   anymore which specific bits\
    \ have changed; the xTR will query the\n   mapping system and trust the content\
    \ of the received Map-Reply.\n   Furthermore, there is no way to perform filtering\
    \ as in\n   Map-Versioning in order to drop packets that do not carry a valid\n\
    \   Map-Version number.  In the case of Locator-Status-Bits, any random\n   change\
    \ can trigger a Map-Request (unless rate limitation is enabled,\n   which raises\
    \ another type of attack as discussed in Section 10.2).\n"
- title: 10.2.  Map-Versioning against Reachability Information DoS
  contents:
  - "10.2.  Map-Versioning against Reachability Information DoS\n   Attackers can\
    \ try to trigger a large amount of Map-Requests by simply\n   forging packets\
    \ with random Map-Versions or random\n   Locator-Status-Bits.  In both cases,\
    \ the Map-Requests are\n   rate-limited as described in [RFC6830].  However, in\
    \ contrast to the\n   Locator-Status-Bit, where there is no filtering possible,\
    \ in the case\n   of Map-Versioning it is possible to filter invalid version numbers\n\
    \   before triggering a Map-Request, thus helping to reduce the effects\n   of\
    \ DoS attacks.  In other words, the use of Map-Versioning enables a\n   fine control\
    \ on when to update a mapping or when to notify someone\n   that a mapping has\
    \ been updated.\n   It is clear that Map-Versioning does not protect against DoS\
    \ and DDoS\n   attacks, where an xTR loses processing power when doing checks\
    \ on the\n   LISP header of packets sent by attackers.  This is independent of\n\
    \   Map-Versioning and is the same for Locator-Status-Bits.\n"
- title: 11.  Open Issues and Considerations
  contents:
  - "11.  Open Issues and Considerations\n   There are a number of implications of\
    \ the use of Map-Versioning that\n   are not yet completely explored.  Among these\
    \ are:\n   o  Performance of the convergence time when an EID-to-RLOC mapping\n\
    \      changes, i.e., how much time is needed to update mappings in the\n    \
    \  EID-to-RLOC Cache of the ITRs currently sending traffic to ETRs\n      for\
    \ the EID whose mapping has been changed.\n   o  Support for ETR synchronization.\
    \  The implications that a\n      temporary lack of synchronization may have on\
    \ the traffic are yet\n      to be fully explored.  Details on how to maintain\
    \ synchronization\n      are presented in Section 6.6 of [RFC6830].  Section 11.1\
    \ discusses\n      the issue in further detail with respect to the Map-Versioning\n\
    \      mechanism.\n   The authors expect that experimentation will help assess\
    \ the\n   performance and limitations of the Map-Versioning mechanism.  Issues\n\
    \   and concerns about the deployment of LISP for Internet traffic are\n   discussed\
    \ in [RFC6830].\n"
- title: 11.1.  Lack of Synchronization among ETRs
  contents:
  - "11.1.  Lack of Synchronization among ETRs\n   Even without Map-Versioning, LISP\
    \ ([RFC6830]) requires ETRs to\n   announce the same mapping for the same EID-Prefix\
    \ to a requester.\n   The implications that a temporary lack of synchronization\
    \ may have on\n   the traffic are yet to be fully explored.\n   Map-Versioning\
    \ does not require additional synchronization mechanisms\n   as compared to the\
    \ normal functioning of LISP without Map-Versioning.\n   Clearly, all the ETRs\
    \ have to reply with the same Map-Version number;\n   otherwise, there can be\
    \ an inconsistency that creates additional\n   control traffic, instabilities,\
    \ and traffic disruptions.  It is the\n   same without Map-Versioning, with ETRs\
    \ that have to reply with the\n   same mapping; otherwise, the same problems can\
    \ arise.\n   There are two ways Map-Versioning is helpful with respect to the\n\
    \   synchronization problem.  On the one hand, assigning version numbers\n   to\
    \ mappings helps in debugging, since quick checks on the consistency\n   of the\
    \ mappings on different ETRs can be done by looking at the\n   Map-Version number.\
    \  On the other hand, Map-Versioning can be used to\n   control the traffic toward\
    \ ETRs that announce the latest mapping.\n   As an example, let's consider the\
    \ topology of Figure 4 where ITR A.1\n   of Domain A is sending unidirectional\
    \ traffic to Domain B, while A.2\n   of Domain A exchanges bidirectional traffic\
    \ with Domain B.  In\n   particular, ITR A.2 sends traffic to ETR B, and ETR A.2\
    \ receives\n   traffic from ITR B.\n            +-----------------+          \
    \    +-----------------+\n            | Domain A        |              | Domain\
    \ B        |\n            |       +---------+              |                 |\n\
    \            |       | ITR A.1 |---           |                 |\n          \
    \  |       +---------+    \\         +---------+       |\n            |      \
    \           |      ------->| ETR B   |       |\n            |                \
    \ |      ------->|         |       |\n            |       +---------+    /   \
    \      |         |       |\n            |       | ITR A.2 |---      -----| ITR\
    \ B   |       |\n            |       |         |       /      +---------+    \
    \   |\n            |       | ETR A.2 |<-----        |                 |\n    \
    \        |       +---------+              |                 |\n            | \
    \                |              |                 |\n            +-----------------+\
    \              +-----------------+\n                        Figure 4: Example\
    \ Topology\n   Obviously, in the case of Map-Versioning, both ITR A.1 and ITR\
    \ A.2 of\n   Domain A must use the same value; otherwise, the ETR of Domain B\
    \ will\n   start to send Map-Requests.\n   The same problem can, however, arise\
    \ without Map-Versioning, for\n   instance, if the two ITRs of Domain A send different\n\
    \   Locator-Status-Bits.  In this case, either the traffic is disrupted\n   if\
    \ ETR B trusts the Locator-Status-Bits, or if ETR B does not trust\n   the Locator-Status-Bits\
    \ it will start sending Map-Requests to confirm\n   each change in reachability.\n\
    \   So far, LISP does not provide any specific synchronization mechanism\n   but\
    \ assumes that synchronization is provided by configuring the\n   different xTRs\
    \ consistently (see Section 6.6 in [RFC6830]).  The same\n   applies for Map-Versioning.\
    \  If in the future any synchronization\n   mechanism is provided, Map-Versioning\
    \ will take advantage of it\n   automatically, since it is included in the Record\
    \ format, as\n   described in Section 7.\n"
- title: 12.  Acknowledgments
  contents:
  - "12.  Acknowledgments\n   The authors would like to thank Alia Atlas, Jesper Skriver,\
    \ Pierre\n   Francois, Noel Chiappa, and Dino Farinacci for their comments and\n\
    \   review.\n   This work has been partially supported by the INFSO-ICT-216372\n\
    \   TRILOGY Project (http://www.trilogy-project.org).\n"
- title: 13.  References
  contents:
  - '13.  References

    '
- title: 13.1.  Normative References
  contents:
  - "13.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC6830]  Farinacci, D., Fuller, V., Meyer, D., and D. Lewis, \"\
    The\n              Locator/ID Separation Protocol (LISP)\", RFC 6830,\n      \
    \        January 2013.\n   [RFC6832]  Lewis, D., Meyer, D., Farinacci, D., and\
    \ V. Fuller,\n              \"Interworking between Locator/ID Separation Protocol\n\
    \              (LISP) and Non-LISP Sites\", RFC 6832, January 2013.\n"
- title: 13.2.  Informative References
  contents:
  - "13.2.  Informative References\n   [LISP-THREATS]\n              Saucez, D., Iannone,\
    \ L., and O. Bonaventure, \"LISP Threats\n              Analysis\", Work in Progress,\
    \ October 2012.\n   [OPENLISP] Iannone, L., Saucez, D., and O. Bonaventure, \"\
    Implementing\n              the Locator/ID Separation Protocol: Design and\n \
    \             experience\", Computer Networks Vol. 55, Number 4,\n           \
    \   Pages 948-958, March 2011.\n"
- title: Appendix A.  Estimation of Time before Map-Version Wrap-Around
  contents:
  - "Appendix A.  Estimation of Time before Map-Version Wrap-Around\n   This section\
    \ proposes an estimation of the wrap-around time for the\n   12-bit size of the\
    \ Map-Version number.\n   Using a granularity of seconds and assuming as worst\
    \ case that a new\n   version is issued each second, it takes slightly more than\
    \ 1 hour\n   before the version wraps around.  Note that the granularity of\n\
    \   seconds is in line with the rate-limitation policy for Map-Request\n   messages,\
    \ as proposed in the LISP main specifications ([RFC6830]).\n   Alternatively,\
    \ a granularity of minutes can also be used, as for the\n   TTL of the Map-Reply\
    \ ([RFC6830]).  In this case, the worst-case\n   scenario is when a new version\
    \ is issued every minute, leading to a\n   much longer time before wrap-around.\
    \  In particular, when using\n   12 bits, the wrap-around time is almost 3 days.\n\
    \   For general information, Figure 5 below provides a rough estimation\n   of\
    \ the time before wrap-around in the worst-case scenario,\n   considering different\
    \ sizes (length in bits) of the Map-Version\n   number and different time granularities.\n\
    \   Since even in the case of a high mapping change rate (1 per second)\n   the\
    \ wrap-around time using 12 bits is far larger than any reasonable\n   Round-Trip\
    \ Time (RTT), there is no risk of race conditions.\n      +---------------+--------------------------------------------+\n\
    \      |Version Number |           Time before Wrap-Around          |\n      |\
    \  Size (bits)  +---------------------+----------------------+\n      |      \
    \         |Granularity: Minutes | Granularity: Seconds |\n      |            \
    \   | (mapping changes    | (mapping changes     |\n      |               |  every\
    \ 1 minute)    |  every 1 second)     |\n      +-------------------------------------+----------------------+\n\
    \      |          32   |   8171   years      |  136   years         |\n      |\
    \          30   |   2042   years      |   34   years         |\n      |      \
    \    24   |     31   years      |  194   days          |\n      |          16\
    \   |     45   days       |   18   hours         |\n      |          15   |  \
    \   22   days       |    9   hours         |\n      |          14   |     11 \
    \  days       |    4   hours         |\n      |          13   |      5.6 days\
    \       |    2.2 hours         |\n      |          12   |      2.8 days      \
    \ |    1.1 hours         |\n      +---------------+---------------------+----------------------+\n\
    \              Figure 5: Estimation of Time before Wrap-Around\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Luigi Iannone\n   Telecom ParisTech\n   EMail: luigi.iannone@telecom-paristech.fr\n\
    \   Damien Saucez\n   INRIA Sophia Antipolis\n   2004 route des Lucioles - BP\
    \ 93\n   Sophia Antipolis\n   France\n   EMail: damien.saucez@inria.fr\n   Olivier\
    \ Bonaventure\n   Universite catholique de Louvain\n   Place St. Barbe 2\n   Louvain-la-Neuve\n\
    \   Belgium\n   EMail: olivier.bonaventure@uclouvain.be\n"
