- title: __initial_text__
  contents:
  - '            Information Model for IP Flow Information Export

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo defines an information model for the IP Flow Information\n\
    \   eXport (IPFIX) protocol.  It is used by the IPFIX protocol for\n   encoding\
    \ measured traffic information and information related to the\n   traffic Observation\
    \ Point, the traffic Metering Process, and the\n   Exporting Process.  Although\
    \ developed for the IPFIX protocol, the\n   model is defined in an open way that\
    \ easily allows using it in other\n   protocols, interfaces, and applications.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................6\n\
    \   2. Properties of IPFIX Protocol Information Elements ...............7\n  \
    \    2.1. Information Elements Specification Template ................7\n    \
    \  2.2. Scope of Information Elements ..............................9\n      2.3.\
    \ Naming Conventions for Information Elements ................9\n   3. Type Space\
    \ .....................................................10\n      3.1. Abstract\
    \ Data Types .......................................10\n           3.1.1. unsigned8\
    \ ..........................................10\n           3.1.2. unsigned16 .........................................11\n\
    \           3.1.3. unsigned32 .........................................11\n  \
    \         3.1.4. unsigned64 .........................................11\n    \
    \       3.1.5. signed8 ............................................11\n      \
    \     3.1.6. signed16 ...........................................11\n        \
    \   3.1.7. signed32 ...........................................11\n          \
    \ 3.1.8. signed64 ...........................................11\n           3.1.9.\
    \ float32 ............................................11\n           3.1.10. float64\
    \ ...........................................11\n           3.1.11. boolean ...........................................12\n\
    \           3.1.12. macAddress ........................................12\n  \
    \         3.1.13. octetArray ........................................12\n    \
    \       3.1.14. string ............................................12\n      \
    \     3.1.15. dateTimeSeconds ...................................12\n        \
    \   3.1.16. dateTimeMilliseconds ..............................12\n          \
    \ 3.1.17. dateTimeMicroseconds ..............................12\n           3.1.18.\
    \ dateTimeNanoseconds ...............................13\n           3.1.19. ipv4Address\
    \ .......................................13\n           3.1.20. ipv6Address .......................................13\n\
    \      3.2. Data Type Semantics .......................................13\n  \
    \         3.2.1. quantity ...........................................13\n    \
    \       3.2.2. totalCounter .......................................13\n      \
    \     3.2.3. deltaCounter .......................................14\n        \
    \   3.2.4. identifier .........................................14\n          \
    \ 3.2.5. flags ..............................................14\n   4. Information\
    \ Element Identifiers ................................14\n   5. Information Elements\
    \ ...........................................18\n      5.1. Identifiers ...............................................19\n\
    \           5.1.1. lineCardId .........................................20\n  \
    \         5.1.2. portId .............................................20\n    \
    \       5.1.3. ingressInterface ...................................20\n      \
    \     5.1.4. egressInterface ....................................21\n        \
    \   5.1.5. meteringProcessId ..................................21\n          \
    \ 5.1.6. exportingProcessId .................................21\n           5.1.7.\
    \ flowId .............................................22\n           5.1.8. templateId\
    \ .........................................22\n           5.1.9. observationDomainId\
    \ ................................22\n           5.1.10. observationPointId ................................23\n\
    \           5.1.11. commonPropertiesId ................................23\n  \
    \    5.2. Metering and Exporting Process Configuration ..............23\n    \
    \       5.2.1. exporterIPv4Address ................................24\n      \
    \     5.2.2. exporterIPv6Address ................................24\n        \
    \   5.2.3. exporterTransportPort ..............................24\n          \
    \ 5.2.4. collectorIPv4Address ...............................25\n           5.2.5.\
    \ collectorIPv6Address ...............................25\n           5.2.6. exportInterface\
    \ ....................................25\n           5.2.7. exportProtocolVersion\
    \ ..............................26\n           5.2.8. exportTransportProtocol\
    \ ............................26\n           5.2.9. collectorTransportPort .............................27\n\
    \           5.2.10. flowKeyIndicator ..................................27\n  \
    \    5.3. Metering and Exporting Process Statistics .................28\n    \
    \       5.3.1. exportedMessageTotalCount ..........................28\n      \
    \     5.3.2. exportedOctetTotalCount ............................28\n        \
    \   5.3.3. exportedFlowRecordTotalCount .......................29\n          \
    \ 5.3.4. observedFlowTotalCount .............................29\n           5.3.5.\
    \ ignoredPacketTotalCount ............................29\n           5.3.6. ignoredOctetTotalCount\
    \ .............................30\n           5.3.7. notSentFlowTotalCount ..............................30\n\
    \           5.3.8. notSentPacketTotalCount ............................30\n  \
    \         5.3.9. notSentOctetTotalCount .............................31\n    \
    \  5.4. IP Header Fields ..........................................31\n      \
    \     5.4.1. ipVersion ..........................................31\n        \
    \   5.4.2. sourceIPv4Address ..................................32\n          \
    \ 5.4.3. sourceIPv6Address ..................................32\n           5.4.4.\
    \ sourceIPv4PrefixLength .............................32\n           5.4.5. sourceIPv6PrefixLength\
    \ .............................33\n           5.4.6. sourceIPv4Prefix ...................................33\n\
    \           5.4.7. sourceIPv6Prefix ...................................33\n  \
    \         5.4.8. destinationIPv4Address .............................33\n    \
    \       5.4.9. destinationIPv6Address .............................34\n      \
    \     5.4.10. destinationIPv4PrefixLength .......................34\n        \
    \   5.4.11. destinationIPv6PrefixLength .......................34\n          \
    \ 5.4.12. destinationIPv4Prefix .............................34\n           5.4.13.\
    \ destinationIPv6Prefix .............................35\n           5.4.14. ipTTL\
    \ .............................................35\n           5.4.15. protocolIdentifier\
    \ ................................35\n           5.4.16. nextHeaderIPv6 ....................................36\n\
    \           5.4.17. ipDiffServCodePoint ...............................36\n  \
    \         5.4.18. ipPrecedence ......................................36\n    \
    \       5.4.19. ipClassOfService ..................................37\n      \
    \     5.4.20. postIpClassOfService ..............................37\n        \
    \   5.4.21. flowLabelIPv6 .....................................38\n          \
    \ 5.4.22. isMulticast .......................................38\n           5.4.23.\
    \ fragmentIdentification ............................39\n           5.4.24. fragmentOffset\
    \ ....................................39\n           5.4.25. fragmentFlags .....................................39\n\
    \           5.4.26. ipHeaderLength ....................................40\n  \
    \         5.4.27. ipv4IHL ...........................................40\n    \
    \       5.4.28. totalLengthIPv4 ...................................41\n      \
    \     5.4.29. ipTotalLength .....................................41\n        \
    \   5.4.30. payloadLengthIPv6 .................................41\n      5.5.\
    \ Transport Header Fields ...................................42\n           5.5.1.\
    \ sourceTransportPort ................................42\n           5.5.2. destinationTransportPort\
    \ ...........................42\n           5.5.3. udpSourcePort ......................................43\n\
    \           5.5.4. udpDestinationPort .................................43\n  \
    \         5.5.5. udpMessageLength ...................................43\n    \
    \       5.5.6. tcpSourcePort ......................................44\n      \
    \     5.5.7. tcpDestinationPort .................................44\n        \
    \   5.5.8. tcpSequenceNumber ..................................44\n          \
    \ 5.5.9. tcpAcknowledgementNumber ...........................44\n           5.5.10.\
    \ tcpWindowSize .....................................45\n           5.5.11. tcpWindowScale\
    \ ....................................45\n           5.5.12. tcpUrgentPointer\
    \ ..................................45\n           5.5.13. tcpHeaderLength ...................................45\n\
    \           5.5.14. icmpTypeCodeIPv4 ..................................46\n  \
    \         5.5.15. icmpTypeIPv4 ......................................46\n    \
    \       5.5.16. icmpCodeIPv4 ......................................46\n      \
    \     5.5.17. icmpTypeCodeIPv6 ..................................46\n        \
    \   5.5.18. icmpTypeIPv6 ......................................47\n          \
    \ 5.5.19. icmpCodeIPv6 ......................................47\n           5.5.20.\
    \ igmpType ..........................................47\n      5.6. Sub-IP Header\
    \ Fields ......................................48\n           5.6.1. sourceMacAddress\
    \ ...................................48\n           5.6.2. postSourceMacAddress\
    \ ...............................48\n           5.6.3. vlanId .............................................49\n\
    \           5.6.4. postVlanId .........................................49\n  \
    \         5.6.5. destinationMacAddress ..............................49\n    \
    \       5.6.6. postDestinationMacAddress ..........................49\n      \
    \     5.6.7. wlanChannelId ......................................50\n        \
    \   5.6.8. wlanSSID ...........................................50\n          \
    \ 5.6.9. mplsTopLabelTTL ....................................50\n           5.6.10.\
    \ mplsTopLabelExp ...................................51\n           5.6.11. postMplsTopLabelExp\
    \ ...............................51\n           5.6.12. mplsLabelStackDepth ...............................51\n\
    \           5.6.13. mplsLabelStackLength ..............................52\n  \
    \         5.6.14. mplsPayloadLength .................................52\n    \
    \       5.6.15. mplsTopLabelStackSection ..........................52\n      \
    \     5.6.16. mplsLabelStackSection2 ............................53\n        \
    \   5.6.17. mplsLabelStackSection3 ............................53\n          \
    \ 5.6.18. mplsLabelStackSection4 ............................53\n           5.6.19.\
    \ mplsLabelStackSection5 ............................54\n           5.6.20. mplsLabelStackSection6\
    \ ............................54\n           5.6.21. mplsLabelStackSection7 ............................54\n\
    \           5.6.22. mplsLabelStackSection8 ............................55\n  \
    \         5.6.23. mplsLabelStackSection9 ............................55\n    \
    \       5.6.24. mplsLabelStackSection10 ...........................55\n      5.7.\
    \ Derived Packet Properties .................................56\n           5.7.1.\
    \ ipPayloadLength ....................................56\n           5.7.2. ipNextHopIPv4Address\
    \ ...............................56\n           5.7.3. ipNextHopIPv6Address ...............................57\n\
    \           5.7.4. bgpSourceAsNumber ..................................57\n  \
    \         5.7.5. bgpDestinationAsNumber .............................57\n    \
    \       5.7.6. bgpNextAdjacentAsNumber ............................57\n      \
    \     5.7.7. bgpPrevAdjacentAsNumber ............................58\n        \
    \   5.7.8. bgpNextHopIPv4Address ..............................58\n          \
    \ 5.7.9. bgpNextHopIPv6Address ..............................58\n           5.7.10.\
    \ mplsTopLabelType ..................................59\n           5.7.11. mplsTopLabelIPv4Address\
    \ ...........................59\n           5.7.12. mplsTopLabelIPv6Address ...........................60\n\
    \           5.7.13. mplsVpnRouteDistinguisher .........................60\n  \
    \    5.8. Min/Max Flow Properties ...................................61\n    \
    \       5.8.1. minimumIpTotalLength ...............................61\n      \
    \     5.8.2. maximumIpTotalLength ...............................61\n        \
    \   5.8.3. minimumTTL .........................................61\n          \
    \ 5.8.4. maximumTTL .........................................62\n           5.8.5.\
    \ ipv4Options ........................................62\n           5.8.6. ipv6ExtensionHeaders\
    \ ...............................64\n           5.8.7. tcpControlBits .....................................65\n\
    \           5.8.8. tcpOptions .........................................66\n  \
    \    5.9. Flow Timestamps ...........................................67\n    \
    \       5.9.1. flowStartSeconds ...................................67\n      \
    \     5.9.2. flowEndSeconds .....................................68\n        \
    \   5.9.3. flowStartMilliseconds ..............................68\n          \
    \ 5.9.4. flowEndMilliseconds ................................68\n           5.9.5.\
    \ flowStartMicroseconds ..............................68\n           5.9.6. flowEndMicroseconds\
    \ ................................68\n           5.9.7. flowStartNanoseconds ...............................69\n\
    \           5.9.8. flowEndNanoseconds .................................69\n  \
    \         5.9.9. flowStartDeltaMicroseconds .........................69\n    \
    \       5.9.10. flowEndDeltaMicroseconds ..........................69\n      \
    \     5.9.11. systemInitTimeMilliseconds ........................70\n        \
    \   5.9.12. flowStartSysUpTime ................................70\n          \
    \ 5.9.13. flowEndSysUpTime ..................................70\n      5.10. Per-Flow\
    \ Counters ........................................70\n           5.10.1. octetDeltaCount\
    \ ...................................71\n           5.10.2. postOctetDeltaCount\
    \ ...............................71\n           5.10.3. octetDeltaSumOfSquares\
    \ ............................72\n           5.10.4. octetTotalCount ...................................72\n\
    \           5.10.5. postOctetTotalCount ...............................72\n  \
    \         5.10.6. octetTotalSumOfSquares ............................72\n    \
    \       5.10.7. packetDeltaCount ..................................73\n      \
    \     5.10.8. postPacketDeltaCount ..............................73\n        \
    \   5.10.9. packetTotalCount ..................................73\n          \
    \ 5.10.10. postPacketTotalCount .............................74\n           5.10.11.\
    \ droppedOctetDeltaCount ...........................74\n           5.10.12. droppedPacketDeltaCount\
    \ ..........................74\n           5.10.13. droppedOctetTotalCount ...........................74\n\
    \           5.10.14. droppedPacketTotalCount ..........................75\n  \
    \         5.10.15. postMCastPacketDeltaCount ........................75\n    \
    \       5.10.16. postMCastOctetDeltaCount .........................75\n      \
    \     5.10.17. postMCastPacketTotalCount ........................76\n        \
    \   5.10.18. postMCastOctetTotalCount .........................76\n          \
    \ 5.10.19. tcpSynTotalCount .................................76\n           5.10.20.\
    \ tcpFinTotalCount .................................77\n           5.10.21. tcpRstTotalCount\
    \ .................................77\n           5.10.22. tcpPshTotalCount .................................77\n\
    \           5.10.23. tcpAckTotalCount .................................78\n  \
    \         5.10.24. tcpUrgTotalCount .................................78\n    \
    \  5.11. Miscellaneous Flow Properties ............................78\n      \
    \     5.11.1. flowActiveTimeout .................................79\n        \
    \   5.11.2. flowIdleTimeout ...................................79\n          \
    \ 5.11.3. flowEndReason .....................................79\n           5.11.4.\
    \ flowDurationMilliseconds ..........................80\n           5.11.5. flowDurationMicroseconds\
    \ ..........................80\n           5.11.6. flowDirection .....................................80\n\
    \      5.12. Padding ..................................................80\n  \
    \         5.12.1. paddingOctets .....................................81\n   6.\
    \ Extending the Information Model ................................81\n   7. IANA\
    \ Considerations ............................................82\n      7.1. IPFIX\
    \ Information Elements ................................82\n      7.2. MPLS Label\
    \ Type Identifier ................................82\n      7.3. XML Namespace\
    \ and Schema ..................................83\n   8. Security Considerations\
    \ ........................................83\n   9. Acknowledgements ...............................................84\n\
    \   10. References ....................................................84\n  \
    \    10.1. Normative References .....................................84\n    \
    \  10.2. Informative References ...................................84\n   Appendix\
    \ A. XML Specification of IPFIX Information Elements .......88\n   Appendix B.\
    \ XML Specification of Abstract Data Types .............157\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The IP Flow Information eXport (IPFIX) protocol serves for\n\
    \   transmitting information related to measured IP traffic over the\n   Internet.\
    \  The protocol specification in [RFC5101] defines how\n   Information Elements\
    \ are transmitted.  For Information Elements, it\n   specifies the encoding of\
    \ a set of basic data types.  However, the\n   list of Information Elements that\
    \ can be transmitted by the protocol,\n   such as Flow attributes (source IP address,\
    \ number of packets, etc.)\n   and information about the Metering and Exporting\
    \ Process (packet\n   Observation Point, sampling rate, Flow timeout interval,\
    \ etc.), is\n   not specified in [RFC5101].\n   This document complements the\
    \ IPFIX protocol specification by\n   providing the IPFIX information model. \
    \ IPFIX-specific terminology\n   used in this document is defined in Section 2\
    \ of [RFC5101].  As in\n   [RFC5101], these IPFIX-specific terms have the first\
    \ letter of a word\n   capitalized when used in this document.\n   The use of\
    \ the term 'information model' is not fully in line with the\n   definition of\
    \ this term in [RFC3444].  The IPFIX information model\n   does not specify relationships\
    \ between Information Elements, but also\n   it does not specify a concrete encoding\
    \ of Information Elements.\n   Besides the encoding used by the IPFIX protocol,\
    \ other encodings of\n   IPFIX Information Elements can be applied, for example,\
    \ XML-based\n   encodings.\n   The main part of this document is Section 5, which\
    \ defines the\n   (extensible) list of Information Elements to be transmitted\
    \ by the\n   IPFIX protocol.  Section 2 defines a template for specifying IPFIX\n\
    \   Information Elements in Section 5.  Section 3 defines the set of\n   abstract\
    \ data types that are available for IPFIX Information\n   Elements.  Section 6\
    \ discusses extensibility of the IPFIX information\n   model.\n   The main bodies\
    \ of Sections 2, 3, and 5 were generated from XML\n   documents.  The XML-based\
    \ specification of template, abstract data\n   types, and IPFIX Information Elements\
    \ can be used for automatically\n   checking syntactical correctness of the specification\
    \ of IPFIX\n   Information Elements.  It can further be used for generating IPFIX\n\
    \   protocol implementation code that deals with processing IPFIX\n   Information\
    \ Elements.  Also, code for applications that further\n   process traffic information\
    \ transmitted via the IPFIX protocol can be\n   generated with the XML specification\
    \ of IPFIX Information Elements.\n   For that reason, the XML document that served\
    \ as a source for Section\n   5 and the XML schema that served as source for Sections\
    \ 2 and 3 are\n   attached to this document in Appendices A and B.\n   Note that\
    \ although partially generated from the attached XML\n   documents, the main body\
    \ of this document is normative while the\n   appendices are informational.\n\
    \   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\"\
    ,\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in\
    \ this\n   document are to be interpreted as described in [RFC2119].\n"
- title: 2.  Properties of IPFIX Protocol Information Elements
  contents:
  - '2.  Properties of IPFIX Protocol Information Elements

    '
- title: 2.1.  Information Elements Specification Template
  contents:
  - "2.1.  Information Elements Specification Template\n   Information in messages\
    \ of the IPFIX protocol is modeled in terms of\n   Information Elements of the\
    \ IPFIX information model.  IPFIX\n   Information Elements are specified in Section\
    \ 5.  For specifying\n   these Information Elements, a template is used that is\
    \ described\n   below.\n   All Information Elements specified for the IPFIX protocol\
    \ either in\n   this document or by any future extension MUST have the following\n\
    \   properties defined:\n   name - A unique and meaningful name for the Information\
    \ Element.\n   elementId - A numeric identifier of the Information Element.  If\
    \ this\n      identifier is used without an enterprise identifier (see [RFC5101]\n\
    \      and enterpriseId below), then it is globally unique and the list\n    \
    \  of allowed values is administered by IANA.  It is used for compact\n      identification\
    \ of an Information Element when encoding Templates\n      in the protocol.\n\
    \   description - The semantics of this Information Element.  Describes\n    \
    \  how this Information Element is derived from the Flow or other\n      information\
    \ available to the observer.\n   dataType - One of the types listed in Section\
    \ 3.1 of this document or\n      in a future extension of the information model.\
    \  The type space\n      for attributes is constrained to facilitate implementation.\
    \  The\n      existing type space does however encompass most basic types used\n\
    \      in modern programming languages, as well as some derived types\n      (such\
    \ as ipv4Address) that are common to this domain and useful to\n      distinguish.\n\
    \   status - The status of the specification of this Information Element.\n  \
    \    Allowed values are 'current', 'deprecated', and 'obsolete'.\n   Enterprise-specific\
    \ Information Elements MUST have the following\n   property defined:\n   enterpriseId\
    \ - Enterprises may wish to define Information Elements\n      without registering\
    \ them with IANA, for example, for\n      enterprise-internal purposes.  For such\
    \ Information Elements, the\n      Information Element identifier described above\
    \ is not sufficient\n      when the Information Element is used outside the enterprise.\
    \  If\n      specifications of enterprise-specific Information Elements are\n\
    \      made public and/or if enterprise-specific identifiers are used by\n   \
    \   the IPFIX protocol outside the enterprise, then the\n      enterprise-specific\
    \ identifier MUST be made globally unique by\n      combining it with an enterprise\
    \ identifier.  Valid values for the\n      enterpriseId are defined by IANA as\
    \ Structure of Management\n      Information (SMI) network management private\
    \ enterprise codes.\n      They are defined at http://www.iana.org/assignments/enterprise-\n\
    \      numbers.\n   All Information Elements specified for the IPFIX protocol\
    \ either in\n   this document or by any future extension MAY have the following\n\
    \   properties defined:\n   dataTypeSemantics - The integral types may be qualified\
    \ by additional\n      semantic details.  Valid values for the data type semantics\
    \ are\n      specified in Section 3.2 of this document or in a future extension\n\
    \      of the information model.\n   units - If the Information Element is a measure\
    \ of some kind, the\n      units identify what the measure is.\n   range - Some\
    \ Information Elements may only be able to take on a\n      restricted set of\
    \ values that can be expressed as a range (e.g., 0\n      through 511 inclusive).\
    \  If this is the case, the valid inclusive\n      range should be specified.\n\
    \   reference - Identifies additional specifications that more precisely\n   \
    \   define this item or provide additional context for its use.\n"
- title: 2.2.  Scope of Information Elements
  contents:
  - "2.2.  Scope of Information Elements\n   By default, most Information Elements\
    \ have a scope specified in their\n   definitions.\n   o  The Information Elements\
    \ defined in Sections 5.2 and 5.3 have a\n      default of \"a specific Metering\
    \ Process\" or of \"a specific\n      Exporting Process\", respectively.\n   o\
    \  The Information Elements defined in Sections 5.4-5.11 have a scope\n      of\
    \ \"a specific Flow\".\n   Within Data Records defined by Option Templates, the\
    \ IPFIX protocol\n   allows further limiting of the Information Element scope.\
    \  The new\n   scope is specified by one or more scope fields and defined as the\n\
    \   combination of all specified scope values; see Section 3.4.2.1 on\n   IPFIX\
    \ scopes in [RFC5101].\n"
- title: 2.3.  Naming Conventions for Information Elements
  contents:
  - "2.3.  Naming Conventions for Information Elements\n    The following naming conventions\
    \ were used for naming Information\n    Elements in this document.  It is recommended\
    \ that extensions of the\n    model use the same conventions.\n   o  Names of\
    \ Information Elements should be descriptive.\n   o  Names of Information Elements\
    \ that are not enterprise-specific\n      MUST be unique within the IPFIX information\
    \ model.\n      Enterprise-specific Information Elements SHOULD be prefixed with\
    \ a\n      vendor name.\n   o  Names of Information Elements start with non-capitalized\
    \ letters.\n   o  Composed names use capital letters for the first letter of each\n\
    \      component (except for the first one).  All other letters are\n      non-capitalized,\
    \ even for acronyms.  Exceptions are made for\n      acronyms containing non-capitalized\
    \ letter, such as 'IPv4' and\n      'IPv6'.  Examples are sourceMacAddress and\
    \ destinationIPv4Address.\n   o  Middleboxes [RFC3234] may change Flow properties,\
    \ such as the\n      Differentiated Service Code Point (DSCP) value or the source\
    \ IP\n      address.  If an IPFIX Observation Point is located in the path of\n\
    \      a Flow before one or more middleboxes that potentially modify\n      packets\
    \ of the Flow, then it may be desirable to also report Flow\n      properties\
    \ after the modification performed by the middleboxes.\n      An example is an\
    \ Observation Point before a packet marker changing\n      a packet's IPv4 Type\
    \ of Service (TOS) field that is encoded in\n      Information Element classOfServiceIPv4.\
    \  Then the value observed\n      and reported by Information Element classOfServiceIPv4\
    \ is valid at\n      the Observation Point, but not after the packet passed the\
    \ packet\n      marker.  For reporting the change value of the TOS field, the\n\
    \      IPFIX information model uses Information Elements that have a name\n  \
    \    prefix \"post\", for example, \"postClassOfServiceIPv4\".  Information\n\
    \      Elements with prefix \"post\" report on Flow properties that are not\n\
    \      necessarily observed at the Observation Point, but which are\n      obtained\
    \ within the Flow's Observation Domain by other means\n      considered to be\
    \ sufficiently reliable, for example, by analyzing\n      the packet marker's\
    \ marking tables.\n"
- title: 3.  Type Space
  contents:
  - "3.  Type Space\n   This section describes the abstract data types that can be\
    \ used for\n   the specification of IPFIX Information Elements in Section 4.\n\
    \   Section 3.1 describes the set of abstract data types.\n   Abstract data types\
    \ unsigned8, unsigned16, unsigned32, unsigned64,\n   signed8, signed16, signed32,\
    \ and signed64 are integral data types.\n   As described in Section 3.2, their\
    \ data type semantics can be further\n   specified, for example, by 'totalCounter',\
    \ 'deltaCounter',\n   'identifier', or 'flags'.\n"
- title: 3.1.  Abstract Data Types
  contents:
  - "3.1.  Abstract Data Types\n   This section describes the set of valid abstract\
    \ data types of the\n   IPFIX information model.  Note that further abstract data\
    \ types may\n   be specified by future extensions of the IPFIX information model.\n"
- title: 3.1.1.  unsigned8
  contents:
  - "3.1.1.  unsigned8\n   The type \"unsigned8\" represents a non-negative integer\
    \ value in the\n   range of 0 to 255.\n"
- title: 3.1.2.  unsigned16
  contents:
  - "3.1.2.  unsigned16\n   The type \"unsigned16\" represents a non-negative integer\
    \ value in the\n   range of 0 to 65535.\n"
- title: 3.1.3.  unsigned32
  contents:
  - "3.1.3.  unsigned32\n   The type \"unsigned32\" represents a non-negative integer\
    \ value in the\n   range of 0 to 4294967295.\n"
- title: 3.1.4.  unsigned64
  contents:
  - "3.1.4.  unsigned64\n   The type \"unsigned64\" represents a non-negative integer\
    \ value in the\n   range of 0 to 18446744073709551615.\n"
- title: 3.1.5.  signed8
  contents:
  - "3.1.5.  signed8\n   The type \"signed8\" represents an integer value in the range\
    \ of -128\n   to 127.\n"
- title: 3.1.6.  signed16
  contents:
  - "3.1.6.  signed16\n   The type \"signed16\" represents an integer value in the\
    \ range of\n   -32768 to 32767.\n"
- title: 3.1.7.  signed32
  contents:
  - "3.1.7.  signed32\n   The type \"signed32\" represents an integer value in the\
    \ range of\n   -2147483648 to 2147483647.\n"
- title: 3.1.8.  signed64
  contents:
  - "3.1.8.  signed64\n   The type \"signed64\" represents an integer value in the\
    \ range of\n   -9223372036854775808 to 9223372036854775807.\n"
- title: 3.1.9.  float32
  contents:
  - "3.1.9.  float32\n   The type \"float32\" corresponds to an IEEE single-precision\
    \ 32-bit\n   floating point type as defined in [IEEE.754.1985].\n"
- title: 3.1.10.  float64
  contents:
  - "3.1.10.  float64\n   The type \"float64\" corresponds to an IEEE double-precision\
    \ 64-bit\n   floating point type as defined in [IEEE.754.1985].\n"
- title: 3.1.11.  boolean
  contents:
  - "3.1.11.  boolean\n   The type \"boolean\" represents a binary value.  The only\
    \ allowed\n   values are \"true\" and \"false\".\n"
- title: 3.1.12.  macAddress
  contents:
  - "3.1.12.  macAddress\n   The type \"macAddress\" represents a string of 6 octets.\n"
- title: 3.1.13.  octetArray
  contents:
  - "3.1.13.  octetArray\n   The type \"octetArray\" represents a finite-length string\
    \ of octets.\n"
- title: 3.1.14.  string
  contents:
  - "3.1.14.  string\n   The type \"string\" represents a finite-length string of\
    \ valid\n   characters from the Unicode character encoding set [ISO.10646-\n \
    \  1.1993].  Unicode allows for ASCII [ISO.646.1991] and many other\n   international\
    \ character sets to be used.\n"
- title: 3.1.15.  dateTimeSeconds
  contents:
  - "3.1.15.  dateTimeSeconds\n   The type \"dateTimeSeconds\" represents a time value\
    \ in units of\n   seconds based on coordinated universal time (UTC).  The choice\
    \ of an\n   epoch, for example, 00:00 UTC, January 1, 1970, is left to\n   corresponding\
    \ encoding specifications for this type, for example, the\n   IPFIX protocol specification.\
    \  Leap seconds are excluded.  Note that\n   transformation of values might be\
    \ required between different\n   encodings if different epoch values are used.\n"
- title: 3.1.16.  dateTimeMilliseconds
  contents:
  - "3.1.16.  dateTimeMilliseconds\n   The type \"dateTimeMilliseconds\" represents\
    \ a time value in units of\n   milliseconds based on coordinated universal time\
    \ (UTC).  The choice\n   of an epoch, for example, 00:00 UTC, January 1, 1970,\
    \ is left to\n   corresponding encoding specifications for this type, for example,\
    \ the\n   IPFIX protocol specification.  Leap seconds are excluded.  Note that\n\
    \   transformation of values might be required between different\n   encodings\
    \ if different epoch values are used.\n"
- title: 3.1.17.  dateTimeMicroseconds
  contents:
  - "3.1.17.  dateTimeMicroseconds\n   The type \"dateTimeMicroseconds\" represents\
    \ a time value in units of\n   microseconds based on coordinated universal time\
    \ (UTC).  The choice\n   of an epoch, for example, 00:00 UTC, January 1, 1970,\
    \ is left to\n   corresponding encoding specifications for this type, for example,\
    \ the\n   IPFIX protocol specification.  Leap seconds are excluded.  Note that\n\
    \   transformation of values might be required between different\n   encodings\
    \ if different epoch values are used.\n"
- title: 3.1.18.  dateTimeNanoseconds
  contents:
  - "3.1.18.  dateTimeNanoseconds\n   The type \"dateTimeNanoseconds\" represents\
    \ a time value in units of\n   nanoseconds based on coordinated universal time\
    \ (UTC).  The choice of\n   an epoch, for example, 00:00 UTC, January 1, 1970,\
    \ is left to\n   corresponding encoding specifications for this type, for example,\
    \ the\n   IPFIX protocol specification.  Leap seconds are excluded.  Note that\n\
    \   transformation of values might be required between different\n   encodings\
    \ if different epoch values are used.\n"
- title: 3.1.19.  ipv4Address
  contents:
  - "3.1.19.  ipv4Address\n   The type \"ipv4Address\" represents a value of an IPv4\
    \ address.\n"
- title: 3.1.20.  ipv6Address
  contents:
  - "3.1.20.  ipv6Address\n   The type \"ipv6Address\" represents a value of an IPv6\
    \ address.\n"
- title: 3.2.  Data Type Semantics
  contents:
  - "3.2.  Data Type Semantics\n   This section describes the set of valid data type\
    \ semantics of the\n   IPFIX information model.  Note that further data type semantics\
    \ may\n   be specified by future extensions of the IPFIX information model.\n"
- title: 3.2.1.  quantity
  contents:
  - "3.2.1.  quantity\n   A quantity value represents a discrete measured value pertaining\
    \ to\n   the record.  This is distinguished from counters that represent an\n\
    \   ongoing measured value whose \"odometer\" reading is captured as part\n  \
    \ of a given record.  If no semantic qualifier is given, the\n   Information Elements\
    \ that have an integral data type should behave as\n   a quantity.\n"
- title: 3.2.2.  totalCounter
  contents:
  - "3.2.2.  totalCounter\n   An integral value reporting the value of a counter.\
    \  Counters are\n   unsigned and wrap back to zero after reaching the limit of\
    \ the type.\n   For example, an unsigned64 with counter semantics will continue\
    \ to\n   increment until reaching the value of 2**64 - 1.  At this point, the\n\
    \   next increment will wrap its value to zero and continue counting from\n  \
    \ zero.  The semantics of a total counter is similar to the semantics\n   of counters\
    \ used in SNMP, such as Counter32 defined in RFC 2578\n   [RFC2578].  The only\
    \ difference between total counters and counters\n   used in SNMP is that the\
    \ total counters have an initial value of 0.\n   A total counter counts independently\
    \ of the export of its value.\n"
- title: 3.2.3.  deltaCounter
  contents:
  - "3.2.3.  deltaCounter\n   An integral value reporting the value of a counter.\
    \  Counters are\n   unsigned and wrap back to zero after reaching the limit of\
    \ the type.\n   For example, an unsigned64 with counter semantics will continue\
    \ to\n   increment until reaching the value of 2**64 - 1.  At this point, the\n\
    \   next increment will wrap its value to zero and continue counting from\n  \
    \ zero.  The semantics of a delta counter is similar to the semantics\n   of counters\
    \ used in SNMP, such as Counter32 defined in RFC 2578\n   [RFC2578].  The only\
    \ difference between delta counters and counters\n   used in SNMP is that the\
    \ delta counters have an initial value of 0.\n   A delta counter is reset to 0\
    \ each time its value is exported.\n"
- title: 3.2.4.  identifier
  contents:
  - "3.2.4.  identifier\n   An integral value that serves as an identifier.  Specifically,\n\
    \   mathematical operations on two identifiers (aside from the equality\n   operation)\
    \ are meaningless.  For example, Autonomous System ID 1 *\n   Autonomous System\
    \ ID 2 is meaningless.\n"
- title: 3.2.5.  flags
  contents:
  - "3.2.5.  flags\n   An integral value that actually represents a set of bit fields.\n\
    \   Logical operations are appropriate on such values, but not other\n   mathematical\
    \ operations.  Flags should always be of an unsigned type.\n"
- title: 4.  Information Element Identifiers
  contents:
  - "4.  Information Element Identifiers\n   All Information Elements defined in Section\
    \ 5 of this document or in\n   future extensions of the IPFIX information model\
    \ have their\n   identifiers assigned by IANA.  Their identifiers can be retrieved\
    \ at\n   http://www.iana.org/assignments/ipfix.\n   The value of these identifiers\
    \ is in the range of 1-32767.  Within\n   this range, Information Element identifier\
    \ values in the sub-range of\n   1-127 are compatible with field types used by\
    \ NetFlow version 9\n   [RFC3954].\n   +---------------------------------+---------------------------------+\n\
    \   | Range of IANA-assigned          | Description                     |\n  \
    \ | Information Element identifiers |                                 |\n   +---------------------------------+---------------------------------+\n\
    \   | 0                               | Reserved.                       |\n  \
    \ | 1-127                           | Information Element identifiers |\n   |\
    \                                 | compatible with NetFlow version |\n   |  \
    \                               | 9 field types [RFC3954].        |\n   | 128-32767\
    \                       | Further Information Element     |\n   |            \
    \                     | identifiers.                    |\n   +---------------------------------+---------------------------------+\n\
    \   Enterprise-specific Information Element identifiers have the same\n   range\
    \ of 1-32767, but they are coupled with an additional enterprise\n   identifier.\
    \  For enterprise-specific Information Elements,\n   Information Element identifier\
    \ 0 is also reserved.\n   Enterprise-specific Information Element identifiers\
    \ can be chosen by\n   an enterprise arbitrarily within the range of 1-32767.\
    \  The same\n   identifier may be assigned by other enterprises for different\n\
    \   purposes.\n   Still, Collecting Processes can distinguish these Information\n\
    \   Elements because the Information Element identifier is coupled with\n   an\
    \ enterprise identifier.\n   Enterprise identifiers MUST be registered as SMI\
    \ network management\n   private enterprise code numbers with IANA.  The registry\
    \ can be found\n   at http://www.iana.org/assignments/enterprise-numbers.\n  \
    \ The following list gives an overview of the Information Element\n   identifiers\
    \ that are specified in Section 5 and are compatible with\n   field types used\
    \ by NetFlow version 9 [RFC3954].\n   +----+----------------------------+-------+-------------------------+\n\
    \   | ID | Name                       |    ID | Name                    |\n  \
    \ +----+----------------------------+-------+-------------------------+\n   |\
    \  1 | octetDeltaCount            |    43 | RESERVED                |\n   |  2\
    \ | packetDeltaCount           |    44 | sourceIPv4Prefix        |\n   |  3 |\
    \ RESERVED                   |    45 | destinationIPv4Prefix   |\n   |  4 | protocolIdentifier\
    \         |    46 | mplsTopLabelType        |\n   |  5 | ipClassOfService    \
    \       |    47 | mplsTopLabelIPv4Address |\n   |  6 | tcpControlBits        \
    \     | 48-51 | RESERVED                |\n   |  7 | sourceTransportPort     \
    \   |    52 | minimumTTL              |\n   |  8 | sourceIPv4Address         \
    \ |    53 | maximumTTL              |\n   |  9 | sourceIPv4PrefixLength     |\
    \    54 | fragmentIdentification  |\n   | 10 | ingressInterface           |  \
    \  55 | postIpClassOfService    |\n   | 11 | destinationTransportPort   |    56\
    \ | sourceMacAddress        |\n   | 12 | destinationIPv4Address     |    57 |postDestinationMacAddress|\n\
    \   | 13 | destinationIPv4PrefixLength|    58 | vlanId                  |\n  \
    \ | 14 | egressInterface            |    59 | postVlanId              |\n   |\
    \ 15 | ipNextHopIPv4Address       |    60 | ipVersion               |\n   | 16\
    \ | bgpSourceAsNumber          |    61 | flowDirection           |\n   | 17 |\
    \ bgpDestinationAsNumber     |    62 | ipNextHopIPv6Address    |\n   | 18 | bgpNexthopIPv4Address\
    \      |    63 | bgpNexthopIPv6Address   |\n   | 19 | postMCastPacketDeltaCount\
    \  |    64 | ipv6ExtensionHeaders    |\n   | 20 | postMCastOctetDeltaCount   |\
    \ 65-69 | RESERVED                |\n   | 21 | flowEndSysUpTime           |  \
    \  70 | mplsTopLabelStackSection|\n   | 22 | flowStartSysUpTime         |    71\
    \ | mplsLabelStackSection2  |\n   | 23 | postOctetDeltaCount        |    72 |\
    \ mplsLabelStackSection3  |\n   | 24 | postPacketDeltaCount       |    73 | mplsLabelStackSection4\
    \  |\n   | 25 | minimumIpTotalLength       |    74 | mplsLabelStackSection5  |\n\
    \   | 26 | maximumIpTotalLength       |    75 | mplsLabelStackSection6  |\n  \
    \ | 27 | sourceIPv6Address          |    76 | mplsLabelStackSection7  |\n   |\
    \ 28 | destinationIPv6Address     |    77 | mplsLabelStackSection8  |\n   | 29\
    \ | sourceIPv6PrefixLength     |    78 | mplsLabelStackSection9  |\n   | 30 |\
    \ destinationIPv6PrefixLength|    79 | mplsLabelStackSection10 |\n   | 31 | flowLabelIPv6\
    \              |    80 | destinationMacAddress   |\n   | 32 | icmpTypeCodeIPv4\
    \           |    81 | postSourceMacAddress    |\n   | 33 | igmpType          \
    \         | 82-84 | RESERVED                |\n   | 34 | RESERVED            \
    \       |    85 | octetTotalCount         |\n   | 35 | RESERVED              \
    \     |    86 | packetTotalCount        |\n   | 36 | flowActiveTimeout       \
    \   |    87 | RESERVED                |\n   | 37 | flowIdleTimeout           \
    \ |    88 | fragmentOffset          |\n   | 38 | RESERVED                   |\
    \    89 | RESERVED                |\n   | 39 | RESERVED                   |  \
    \  90 |mplsVpnRouteDistinguisher|\n   | 40 | exportedOctetTotalCount    |91-127\
    \ | RESERVED                |\n   | 41 | exportedMessageTotalCount  |       |\
    \                         |\n   | 42 |exportedFlowRecordTotalCount|       |  \
    \                       |\n   +----+----------------------------+-------+-------------------------+\n\
    \   The following list gives an overview of the Information Element\n   identifiers\
    \ that are specified in Section 5 and extends the list of\n   Information Element\
    \ identifiers specified already in [RFC3954].\n   +-----+---------------------------+-----+---------------------------+\n\
    \   |  ID | Name                      |  ID | Name                      |\n  \
    \ +-----+---------------------------+-----+---------------------------+\n   |\
    \ 128 | bgpNextAdjacentAsNumber   | 169 | destinationIPv6Prefix     |\n   | 129\
    \ | bgpPrevAdjacentAsNumber   | 170 | sourceIPv6Prefix          |\n   | 130 |\
    \ exporterIPv4Address       | 171 | postOctetTotalCount       |\n   | 131 | exporterIPv6Address\
    \       | 172 | postPacketTotalCount      |\n   | 132 | droppedOctetDeltaCount\
    \    | 173 | flowKeyIndicator          |\n   | 133 | droppedPacketDeltaCount \
    \  | 174 | postMCastPacketTotalCount |\n   | 134 | droppedOctetTotalCount    |\
    \ 175 | postMCastOctetTotalCount  |\n   | 135 | droppedPacketTotalCount   | 176\
    \ | icmpTypeIPv4              |\n   | 136 | flowEndReason             | 177 |\
    \ icmpCodeIPv4              |\n   | 137 | commonPropertiesId        | 178 | icmpTypeIPv6\
    \              |\n   | 138 | observationPointId        | 179 | icmpCodeIPv6  \
    \            |\n   | 139 | icmpTypeCodeIPv6          | 180 | udpSourcePort   \
    \          |\n   | 140 | mplsTopLabelIPv6Address   | 181 | udpDestinationPort\
    \        |\n   | 141 | lineCardId                | 182 | tcpSourcePort       \
    \      |\n   | 142 | portId                    | 183 | tcpDestinationPort    \
    \    |\n   | 143 | meteringProcessId         | 184 | tcpSequenceNumber       \
    \  |\n   | 144 | exportingProcessId        | 185 | tcpAcknowledgementNumber  |\n\
    \   | 145 | templateId                | 186 | tcpWindowSize             |\n  \
    \ | 146 | wlanChannelId             | 187 | tcpUrgentPointer          |\n   |\
    \ 147 | wlanSSID                  | 188 | tcpHeaderLength           |\n   | 148\
    \ | flowId                    | 189 | ipHeaderLength            |\n   | 149 |\
    \ observationDomainId       | 190 | totalLengthIPv4           |\n   | 150 | flowStartSeconds\
    \          | 191 | payloadLengthIPv6         |\n   | 151 | flowEndSeconds    \
    \        | 192 | ipTTL                     |\n   | 152 | flowStartMilliseconds\
    \     | 193 | nextHeaderIPv6            |\n   | 153 | flowEndMilliseconds    \
    \   | 194 | mplsPayloadLength         |\n   | 154 | flowStartMicroseconds    \
    \ | 195 | ipDiffServCodePoint       |\n   | 155 | flowEndMicroseconds       |\
    \ 196 | ipPrecedence              |\n   | 156 | flowStartNanoseconds      | 197\
    \ | fragmentFlags             |\n   | 157 | flowEndNanoseconds        | 198 |\
    \ octetDeltaSumOfSquares    |\n   | 158 | flowStartDeltaMicroseconds| 199 | octetTotalSumOfSquares\
    \    |\n   | 159 | flowEndDeltaMicroseconds  | 200 | mplsTopLabelTTL         \
    \  |\n   | 160 | systemInitTimeMilliseconds| 201 | mplsLabelStackLength      |\n\
    \   | 161 | flowDurationMilliseconds  | 202 | mplsLabelStackDepth       |\n  \
    \ | 162 | flowDurationMicroseconds  | 203 | mplsTopLabelExp           |\n   |\
    \ 163 | observedFlowTotalCount    | 204 | ipPayloadLength           |\n   | 164\
    \ | ignoredPacketTotalCount   | 205 | udpMessageLength          |\n   | 165 |\
    \ ignoredOctetTotalCount    | 206 | isMulticast               |\n   | 166 | notSentFlowTotalCount\
    \     | 207 | ipv4IHL                   |\n   | 167 | notSentPacketTotalCount\
    \   | 208 | ipv4Options               |\n   | 168 | notSentOctetTotalCount   \
    \ | 209 | tcpOptions                |\n   +-----+---------------------------+-----+---------------------------+\n\
    \   |  ID | Name                      |  ID | Name                      |\n  \
    \ +-----+---------------------------+-----+---------------------------+\n   |\
    \ 210 | paddingOctets             | 218 | tcpSynTotalCount          |\n   | 211\
    \ | collectorIPv4Address      | 219 | tcpFinTotalCount          |\n   | 212 |\
    \ collectorIPv6Address      | 220 | tcpRstTotalCount          |\n   | 213 | exportInterface\
    \           | 221 | tcpPshTotalCount          |\n   | 214 | exportProtocolVersion\
    \     | 222 | tcpAckTotalCount          |\n   | 215 | exportTransportProtocol\
    \   | 223 | tcpUrgTotalCount          |\n   | 216 | collectorTransportPort   \
    \ | 224 | ipTotalLength             |\n   | 217 | exporterTransportPort     |\
    \ 237 | postMplsTopLabelExp       |\n   |     |                           | 238\
    \ | tcpWindowScale            |\n   +-----+---------------------------+-----+---------------------------+\n"
- title: 5.  Information Elements
  contents:
  - "5.  Information Elements\n   This section describes the Information Elements\
    \ of the IPFIX\n   information model.  The elements are grouped into 12 groups\
    \ according\n   to their semantics and their applicability:\n   1.   Identifiers\n\
    \   2.   Metering and Exporting Process Configuration\n   3.   Metering and Exporting\
    \ Process Statistics\n   4.   IP Header Fields\n   5.   Transport Header Fields\n\
    \   6.   Sub-IP Header Fields\n   7.   Derived Packet Properties\n   8.   Min/Max\
    \ Flow Properties\n   9.   Flow Timestamps\n   10.  Per-Flow Counters\n   11.\
    \  Miscellaneous Flow Properties\n   12.  Padding\n   The Information Elements\
    \ that are derived from fields of packets or\n   from packet treatment, such as\
    \ the Information Elements in groups\n   4-7, can typically serve as Flow Keys\
    \ used for mapping packets to\n   Flows.\n   If they do not serve as Flow Keys,\
    \ their value may change from packet\n   to packet within a single Flow.  For\
    \ Information Elements with values\n   that are derived from fields of packets\
    \ or from packet treatment and\n   for which the value may change from packet\
    \ to packet within a single\n   Flow, the IPFIX information model defines that\
    \ their value is\n   determined by the first packet observed for the corresponding\
    \ Flow,\n   unless the description of the Information Element explicitly\n   specifies\
    \ a different semantics.  This simple rule allows writing all\n   Information\
    \ Elements related to header fields once when the first\n   packet of the Flow\
    \ is observed.  For further observed packets of the\n   same Flow, only Flow properties\
    \ that depend on more than one packet,\n   such as the Information Elements in\
    \ groups 8-11, need to be updated.\n   Information Elements with a name having\
    \ the \"post\" prefix, for\n   example, \"postClassOfServiceIPv4\", do not report\
    \ properties that were\n   actually observed at the Observation Point, but retrieved\
    \ by other\n   means within the Observation Domain.  These Information Elements\
    \ can\n   be used if there are middlebox functions within the Observation\n  \
    \ Domain changing Flow properties after packets passed the Observation\n   Point.\n\
    \   Information Elements in this section use the reference property to\n   reference\
    \ [RFC0768], [RFC0791], [RFC0792], [RFC0793], [RFC1108],\n   [RFC1112], [RFC1191],\
    \ [RFC1323], [RFC1385], [RFC1812], [RFC1930],\n   [RFC2113], [RFC2119], [RFC2460],\
    \ [RFC2675], [RFC2863], [RFC3031],\n   [RFC3032], [RFC3193], [RFC3234], [RFC3260],\
    \ [RFC3270], [RFC3376],\n   [RFC3954], [RFC4271], [RFC4291], [RFC4302], [RFC4303],\
    \ [RFC4364],\n   [RFC4382], [RFC4443], [RFC4960], [RFC5036], [IEEE.802-11.1999],\n\
    \   [IEEE.802-1Q.2003], and [IEEE.802-3.2002].\n"
- title: 5.1.  Identifiers
  contents:
  - "5.1.  Identifiers\n   Information Elements grouped in the table below are identifying\n\
    \   components of the IPFIX architecture, of an IPFIX Device, or of the\n   IPFIX\
    \ protocol.  All of them have an integral abstract data type and\n   data type\
    \ semantics \"identifier\" as described in Section 3.2.4.\n   Typically, some\
    \ of them are used for limiting scopes of other\n   Information Elements.  However,\
    \ other Information Elements MAY be\n   used for limiting scopes.  Note also that\
    \ all Information Elements\n   listed below MAY be used for other purposes than\
    \ limiting scopes.\n   +-----+---------------------------+-----+---------------------------+\n\
    \   |  ID | Name                      |  ID | Name                      |\n  \
    \ +-----+---------------------------+-----+---------------------------+\n   |\
    \ 141 | lineCardId                | 148 | flowId                    |\n   | 142\
    \ | portId                    | 145 | templateId                |\n   |  10 |\
    \ ingressInterface          | 149 | observationDomainId       |\n   |  14 | egressInterface\
    \           | 138 | observationPointId        |\n   | 143 | meteringProcessId\
    \         | 137 | commonPropertiesId        |\n   | 144 | exportingProcessId \
    \       |     |                           |\n   +-----+---------------------------+-----+---------------------------+\n"
- title: 5.1.1.  lineCardId
  contents:
  - "5.1.1.  lineCardId\n   Description:\n      An identifier of a line card that\
    \ is unique per IPFIX Device\n      hosting an Observation Point.  Typically,\
    \ this Information Element\n      is used for limiting the scope of other Information\
    \ Elements.\n   Abstract Data Type: unsigned32\n   Data Type Semantics: identifier\n\
    \   ElementId: 141\n   Status: current\n"
- title: 5.1.2.  portId
  contents:
  - "5.1.2.  portId\n   Description:\n      An identifier of a line port that is unique\
    \ per IPFIX Device\n      hosting an Observation Point.  Typically, this Information\
    \ Element\n      is used for limiting the scope of other Information Elements.\n\
    \   Abstract Data Type: unsigned32\n   Data Type Semantics: identifier\n   ElementId:\
    \ 142\n   Status: current\n"
- title: 5.1.3.  ingressInterface
  contents:
  - "5.1.3.  ingressInterface\n   Description:\n      The index of the IP interface\
    \ where packets of this Flow are being\n      received.  The value matches the\
    \ value of managed object 'ifIndex'\n      as defined in RFC 2863.  Note that\
    \ ifIndex values are not assigned\n      statically to an interface and that the\
    \ interfaces may be\n      renumbered every time the device's management system\
    \ is\n      re-initialized, as specified in RFC 2863.\n   Abstract Data Type:\
    \ unsigned32\n   Data Type Semantics: identifier\n   ElementId: 10\n   Status:\
    \ current\n   Reference:\n      See RFC 2863 for the definition of the ifIndex\
    \ object.\n"
- title: 5.1.4.  egressInterface
  contents:
  - "5.1.4.  egressInterface\n   Description:\n      The index of the IP interface\
    \ where packets of this Flow are being\n      sent.  The value matches the value\
    \ of managed object 'ifIndex' as\n      defined in RFC 2863.  Note that ifIndex\
    \ values are not assigned\n      statically to an interface and that the interfaces\
    \ may be\n      renumbered every time the device's management system is\n    \
    \  re-initialized, as specified in RFC 2863.\n   Abstract Data Type: unsigned32\n\
    \   Data Type Semantics: identifier\n   ElementId: 14\n   Status: current\n  \
    \ Reference:\n      See RFC 2863 for the definition of the ifIndex object.\n"
- title: 5.1.5.  meteringProcessId
  contents:
  - "5.1.5.  meteringProcessId\n   Description:\n      An identifier of a Metering\
    \ Process that is unique per IPFIX\n      Device.  Typically, this Information\
    \ Element is used for limiting\n      the scope of other Information Elements.\
    \  Note that process\n      identifiers are typically assigned dynamically.  The\
    \ Metering\n      Process may be re-started with a different ID.\n   Abstract\
    \ Data Type: unsigned32\n   Data Type Semantics: identifier\n   ElementId: 143\n\
    \   Status: current\n"
- title: 5.1.6.  exportingProcessId
  contents:
  - "5.1.6.  exportingProcessId\n   Description:\n      An identifier of an Exporting\
    \ Process that is unique per IPFIX\n      Device.  Typically, this Information\
    \ Element is used for limiting\n      the scope of other Information Elements.\
    \  Note that process\n      identifiers are typically assigned dynamically.  The\
    \ Exporting\n      Process may be re-started with a different ID.\n   Abstract\
    \ Data Type: unsigned32\n   Data Type Semantics: identifier\n   ElementId: 144\n\
    \   Status: current\n"
- title: 5.1.7.  flowId
  contents:
  - "5.1.7.  flowId\n   Description:\n      An identifier of a Flow that is unique\
    \ within an Observation\n      Domain.  This Information Element can be used to\
    \ distinguish\n      between different Flows if Flow Keys such as IP addresses\
    \ and port\n      numbers are not reported or are reported in separate records.\n\
    \   Abstract Data Type: unsigned64\n   Data Type Semantics: identifier\n   ElementId:\
    \ 148\n   Status: current\n"
- title: 5.1.8.  templateId
  contents:
  - "5.1.8.  templateId\n   Description:\n      An identifier of a Template that is\
    \ locally unique within a\n      combination of a Transport session and an Observation\
    \ Domain.\n      Template IDs 0-255 are reserved for Template Sets, Options\n\
    \      Template Sets, and other reserved Sets yet to be created.\n      Template\
    \ IDs of Data Sets are numbered from 256 to 65535.\n      Typically, this Information\
    \ Element is used for limiting the scope\n      of other Information Elements.\
    \  Note that after a re-start of the\n      Exporting Process Template identifiers\
    \ may be re-assigned.\n   Abstract Data Type: unsigned16\n   Data Type Semantics:\
    \ identifier\n   ElementId: 145\n   Status: current\n"
- title: 5.1.9.  observationDomainId
  contents:
  - "5.1.9.  observationDomainId\n   Description:\n      An identifier of an Observation\
    \ Domain that is locally unique to\n      an Exporting Process.  The Exporting\
    \ Process uses the Observation\n      Domain ID to uniquely identify to the Collecting\
    \ Process the\n      Observation Domain where Flows were metered.  It is RECOMMENDED\n\
    \      that this identifier is also unique per IPFIX Device.  A value of\n   \
    \   0 indicates that no specific Observation Domain is identified by\n      this\
    \ Information Element.  Typically, this Information Element is\n      used for\
    \ limiting the scope of other Information Elements.\n   Abstract Data Type: unsigned32\n\
    \   Data Type Semantics: identifier\n   ElementId: 149\n   Status: current\n"
- title: 5.1.10.  observationPointId
  contents:
  - "5.1.10.  observationPointId\n   Description:\n      An identifier of an Observation\
    \ Point that is unique per\n      Observation Domain.  It is RECOMMENDED that\
    \ this identifier is\n      also unique per IPFIX Device.  Typically, this Information\
    \ Element\n      is used for limiting the scope of other Information Elements.\n\
    \   Abstract Data Type: unsigned32\n   Data Type Semantics: identifier\n   ElementId:\
    \ 138\n   Status: current\n"
- title: 5.1.11.  commonPropertiesId
  contents:
  - "5.1.11.  commonPropertiesId\n   Description:\n      An identifier of a set of\
    \ common properties that is unique per\n      Observation Domain and Transport\
    \ Session.  Typically, this\n      Information Element is used to link to information\
    \ reported in\n      separate Data Records.\n   Abstract Data Type: unsigned64\n\
    \   Data Type Semantics: identifier\n   ElementId: 137\n   Status: current\n"
- title: 5.2.  Metering and Exporting Process Configuration
  contents:
  - "5.2.  Metering and Exporting Process Configuration\n   Information Elements in\
    \ this section describe the configuration of\n   the Metering Process or the Exporting\
    \ Process.  The set of these\n   Information Elements is listed in the table below.\n\
    \   +-----+--------------------------+-----+----------------------------+\n  \
    \ |  ID | Name                     |  ID | Name                       |\n   +-----+--------------------------+-----+----------------------------+\n\
    \   | 130 | exporterIPv4Address      | 213 | exportInterface            |\n  \
    \ | 131 | exporterIPv6Address      | 214 | exportProtocolVersion      |\n   |\
    \ 217 | exporterTransportPort    | 215 | exportTransportProtocol    |\n   | 211\
    \ | collectorIPv4Address     | 216 | collectorTransportPort     |\n   | 212 |\
    \ collectorIPv6Address     | 173 | flowKeyIndicator           |\n   +-----+--------------------------+-----+----------------------------+\n"
- title: 5.2.1.  exporterIPv4Address
  contents:
  - "5.2.1.  exporterIPv4Address\n   Description:\n      The IPv4 address used by\
    \ the Exporting Process.  This is used by\n      the Collector to identify the\
    \ Exporter in cases where the identity\n      of the Exporter may have been obscured\
    \ by the use of a proxy.\n   Abstract Data Type: ipv4Address\n   Data Type Semantics:\
    \ identifier\n   ElementId: 130\n   Status: current\n"
- title: 5.2.2.  exporterIPv6Address
  contents:
  - "5.2.2.  exporterIPv6Address\n   Description:\n      The IPv6 address used by\
    \ the Exporting Process.  This is used by\n      the Collector to identify the\
    \ Exporter in cases where the identity\n      of the Exporter may have been obscured\
    \ by the use of a proxy.\n   Abstract Data Type: ipv6Address\n   Data Type Semantics:\
    \ identifier\n   ElementId: 131\n   Status: current\n"
- title: 5.2.3.  exporterTransportPort
  contents:
  - "5.2.3.  exporterTransportPort\n   Description:\n      The source port identifier\
    \ from which the Exporting Process sends\n      Flow information.  For the transport\
    \ protocols UDP, TCP, and SCTP,\n      this is the source port number.  This field\
    \ MAY also be used for\n      future transport protocols that have 16-bit source\
    \ port\n      identifiers.  This field may be useful for distinguishing multiple\n\
    \      Exporting Processes that use the same IP address.\n   Abstract Data Type:\
    \ unsigned16\n   Data Type Semantics: identifier\n   ElementId: 217\n   Status:\
    \ current\n   Reference:\n      See RFC 768 for the definition of the UDP source\
    \ port field.  See\n      RFC 793 for the definition of the TCP source port field.\
    \  See RFC\n      4960 for the definition of SCTP.  Additional information on\n\
    \      defined UDP and TCP port numbers can be found at\n      http://www.iana.org/assignments/port-numbers.\n"
- title: 5.2.4.  collectorIPv4Address
  contents:
  - "5.2.4.  collectorIPv4Address\n   Description:\n      An IPv4 address to which\
    \ the Exporting Process sends Flow\n      information.\n   Abstract Data Type:\
    \ ipv4Address\n   Data Type Semantics: identifier\n   ElementId: 211\n   Status:\
    \ current\n"
- title: 5.2.5.  collectorIPv6Address
  contents:
  - "5.2.5.  collectorIPv6Address\n   Description:\n      An IPv6 address to which\
    \ the Exporting Process sends Flow\n      information.\n   Abstract Data Type:\
    \ ipv6Address\n   Data Type Semantics: identifier\n   ElementId: 212\n   Status:\
    \ current\n"
- title: 5.2.6.  exportInterface
  contents:
  - "5.2.6.  exportInterface\n   Description:\n      The index of the interface from\
    \ which IPFIX Messages sent by the\n      Exporting Process to a Collector leave\
    \ the IPFIX Device.  The\n      value matches the value of managed object 'ifIndex'\
    \ as defined in\n      RFC 2863.  Note that ifIndex values are not assigned statically\
    \ to\n      an interface and that the interfaces may be renumbered every time\n\
    \      the device's management system is re-initialized, as specified in\n   \
    \   RFC 2863.\n   Abstract Data Type: unsigned32\n   Data Type Semantics: identifier\n\
    \   ElementId: 213\n   Status: current\n   Reference:\n      See RFC 2863 for\
    \ the definition of the ifIndex object.\n"
- title: 5.2.7.  exportProtocolVersion
  contents:
  - "5.2.7.  exportProtocolVersion\n   Description:\n      The protocol version used\
    \ by the Exporting Process for sending\n      Flow information.  The protocol\
    \ version is given by the value of\n      the Version Number field in the Message\
    \ Header.  The protocol\n      version is 10 for IPFIX and 9 for NetFlow version\
    \ 9.  A value of 0\n      indicates that no export protocol is in use.\n   Abstract\
    \ Data Type: unsigned8\n   Data Type Semantics: identifier\n   ElementId: 214\n\
    \   Status: current\n   Reference:\n      See the IPFIX protocol specification\
    \ [RFC5101] for the definition\n      of the IPFIX Message Header.\n      See\
    \ RFC 3954 for the definition of the NetFlow version 9 message\n      header.\n"
- title: 5.2.8.  exportTransportProtocol
  contents:
  - "5.2.8.  exportTransportProtocol\n   Description:\n      The value of the protocol\
    \ number used by the Exporting Process for\n      sending Flow information.  The\
    \ protocol number identifies the IP\n      packet payload type.  Protocol numbers\
    \ are defined in the IANA\n      Protocol Numbers registry.\n      In Internet\
    \ Protocol version 4 (IPv4), this is carried in the\n      Protocol field.  In\
    \ Internet Protocol version 6 (IPv6), this is\n      carried in the Next Header\
    \ field in the last extension header of\n      the packet.\n   Abstract Data Type:\
    \ unsigned8\n   Data Type Semantics: identifier\n   ElementId: 215\n   Status:\
    \ current\n   Reference:\n      See RFC 791 for the specification of the IPv4\
    \ protocol field.  See\n      RFC 2460 for the specification of the IPv6 protocol\
    \ field.  See\n      the list of protocol numbers assigned by IANA at\n      http://www.iana.org/assignments/protocol-numbers.\n"
- title: 5.2.9.  collectorTransportPort
  contents:
  - "5.2.9.  collectorTransportPort\n   Description:\n      The destination port identifier\
    \ to which the Exporting Process\n      sends Flow information.  For the transport\
    \ protocols UDP, TCP, and\n      SCTP, this is the destination port number.  This\
    \ field MAY also be\n      used for future transport protocols that have 16-bit\
    \ source port\n      identifiers.\n   Abstract Data Type: unsigned16\n   Data\
    \ Type Semantics: identifier\n   ElementId: 216\n   Status: current\n   Reference:\n\
    \      See RFC 768 for the definition of the UDP destination port field.\n   \
    \   See RFC 793 for the definition of the TCP destination port field.\n      See\
    \ RFC 4960 for the definition of SCTP.\n      Additional information on defined\
    \ UDP and TCP port numbers can be\n      found at http://www.iana.org/assignments/port-numbers.\n"
- title: 5.2.10.  flowKeyIndicator
  contents:
  - "5.2.10.  flowKeyIndicator\n   Description:\n      This set of bit fields is used\
    \ for marking the Information\n      Elements of a Data Record that serve as Flow\
    \ Key.  Each bit\n      represents an Information Element in the Data Record with\
    \ the n-th\n      bit representing the n-th Information Element.  A bit set to\
    \ value\n      1 indicates that the corresponding Information Element is a Flow\n\
    \      Key of the reported Flow.  A bit set to value 0 indicates that\n      this\
    \ is not the case.\n      If the Data Record contains more than 64 Information\
    \ Elements, the\n      corresponding Template SHOULD be designed such that all\
    \ Flow Keys\n      are among the first 64 Information Elements, because the\n\
    \      flowKeyIndicator only contains 64 bits.  If the Data Record\n      contains\
    \ less than 64 Information Elements, then the bits in the\n      flowKeyIndicator\
    \ for which no corresponding Information Element\n      exists MUST have the value\
    \ 0.\n   Abstract Data Type: unsigned64\n   Data Type Semantics: flags\n   ElementId:\
    \ 173\n   Status: current\n"
- title: 5.3.  Metering and Exporting Process Statistics
  contents:
  - "5.3.  Metering and Exporting Process Statistics\n   Information Elements in this\
    \ section describe statistics of the\n   Metering Process and/or the Exporting\
    \ Process.  The set of these\n   Information Elements is listed in the table below.\n\
    \   +-----+-----------------------------+-----+-------------------------+\n  \
    \ |  ID | Name                        |  ID | Name                    |\n   +-----+-----------------------------+-----+-------------------------+\n\
    \   |  41 | exportedMessageTotalCount   | 165 | ignoredOctetTotalCount  |\n  \
    \ |  40 | exportedOctetTotalCount     | 166 | notSentFlowTotalCount   |\n   |\
    \  42 | exportedFlowRecordTotalCount| 167 | notSentPacketTotalCount |\n   | 163\
    \ | observedFlowTotalCount      | 168 | notSentOctetTotalCount  |\n   | 164 |\
    \ ignoredPacketTotalCount     |     |                         |\n   +-----+-----------------------------+-----+-------------------------+\n"
- title: 5.3.1.  exportedMessageTotalCount
  contents:
  - "5.3.1.  exportedMessageTotalCount\n   Description:\n      The total number of\
    \ IPFIX Messages that the Exporting Process has\n      sent since the Exporting\
    \ Process (re-)initialization to a\n      particular Collecting Process.  The\
    \ reported number excludes the\n      IPFIX Message that carries the counter value.\
    \  If this Information\n      Element is sent to a particular Collecting Process,\
    \ then by\n      default it specifies the number of IPFIX Messages sent to this\n\
    \      Collecting Process.\n   Abstract Data Type: unsigned64\n   Data Type Semantics:\
    \ totalCounter\n   ElementId: 41\n   Status: current\n   Units: messages\n"
- title: 5.3.2.  exportedOctetTotalCount
  contents:
  - "5.3.2.  exportedOctetTotalCount\n   Description:\n      The total number of octets\
    \ that the Exporting Process has sent\n      since the Exporting Process (re-)initialization\
    \ to a particular\n      Collecting Process.  The value of this Information Element\
    \ is\n      calculated by summing up the IPFIX Message Header length values of\n\
    \      all IPFIX Messages that were successfully sent to the Collecting\n    \
    \  Process.  The reported number excludes octets in the IPFIX Message\n      that\
    \ carries the counter value.  If this Information Element is\n      sent to a\
    \ particular Collecting Process, then by default it\n      specifies the number\
    \ of octets sent to this Collecting Process.\n   Abstract Data Type: unsigned64\n\
    \   Data Type Semantics: totalCounter\n   ElementId: 40\n   Status: current\n\
    \   Units: octets\n"
- title: 5.3.3.  exportedFlowRecordTotalCount
  contents:
  - "5.3.3.  exportedFlowRecordTotalCount\n   Description:\n      The total number\
    \ of Flow Records that the Exporting Process has\n      sent as Data Records since\
    \ the Exporting Process\n      (re-)initialization to a particular Collecting\
    \ Process.  The\n      reported number excludes Flow Records in the IPFIX Message\
    \ that\n      carries the counter value.  If this Information Element is sent\
    \ to\n      a particular Collecting Process, then by default it specifies the\n\
    \      number of Flow Records sent to this process.\n   Abstract Data Type: unsigned64\n\
    \   Data Type Semantics: totalCounter\n   ElementId: 42\n   Status: current\n\
    \   Units: flows\n"
- title: 5.3.4.  observedFlowTotalCount
  contents:
  - "5.3.4.  observedFlowTotalCount\n   Description:\n      The total number of Flows\
    \ observed in the Observation Domain since\n      the Metering Process (re-)initialization\
    \ for this Observation\n      Point.\n   Abstract Data Type: unsigned64\n   Data\
    \ Type Semantics: totalCounter\n   ElementId: 163\n   Status: current\n   Units:\
    \ flows\n"
- title: 5.3.5.  ignoredPacketTotalCount
  contents:
  - "5.3.5.  ignoredPacketTotalCount\n   Description:\n      The total number of observed\
    \ IP packets that the Metering Process\n      did not process since the (re-)initialization\
    \ of the Metering\n      Process.\n   Abstract Data Type: unsigned64\n   Data\
    \ Type Semantics: totalCounter\n   ElementId: 164\n   Status: current\n   Units:\
    \ packets\n"
- title: 5.3.6.  ignoredOctetTotalCount
  contents:
  - "5.3.6.  ignoredOctetTotalCount\n   Description:\n      The total number of octets\
    \ in observed IP packets (including the\n      IP header) that the Metering Process\
    \ did not process since the\n      (re-)initialization of the Metering Process.\n\
    \   Abstract Data Type: unsigned64\n   Data Type Semantics: totalCounter\n   ElementId:\
    \ 165\n   Status: current\n   Units: octets\n"
- title: 5.3.7.  notSentFlowTotalCount
  contents:
  - "5.3.7.  notSentFlowTotalCount\n   Description:\n      The total number of Flow\
    \ Records that were generated by the\n      Metering Process and dropped by the\
    \ Metering Process or by the\n      Exporting Process instead of being sent to\
    \ the Collecting Process.\n      There are several potential reasons for this\
    \ including resource\n      shortage and special Flow export policies.\n   Abstract\
    \ Data Type: unsigned64\n   Data Type Semantics: totalCounter\n   ElementId: 166\n\
    \   Status: current\n   Units: flows\n"
- title: 5.3.8.  notSentPacketTotalCount
  contents:
  - "5.3.8.  notSentPacketTotalCount\n   Description:\n      The total number of packets\
    \ in Flow Records that were generated by\n      the Metering Process and dropped\
    \ by the Metering Process or by the\n      Exporting Process instead of being\
    \ sent to the Collecting Process.\n      There are several potential reasons for\
    \ this including resource\n      shortage and special Flow export policies.\n\
    \   Abstract Data Type: unsigned64\n   Data Type Semantics: totalCounter\n   ElementId:\
    \ 167\n   Status: current\n   Units: packets\n"
- title: 5.3.9.  notSentOctetTotalCount
  contents:
  - "5.3.9.  notSentOctetTotalCount\n   Description:\n      The total number of octets\
    \ in packets in Flow Records that were\n      generated by the Metering Process\
    \ and dropped by the Metering\n      Process or by the Exporting Process instead\
    \ of being sent to the\n      Collecting Process.  There are several potential\
    \ reasons for this\n      including resource shortage and special Flow export\
    \ policies.\n   Abstract Data Type: unsigned64\n   Data Type Semantics: totalCounter\n\
    \   ElementId: 168\n   Status: current\n   Units: octets\n"
- title: 5.4.  IP Header Fields
  contents:
  - "5.4.  IP Header Fields\n   Information Elements in this section indicate values\
    \ of IP header\n   fields or are derived from IP header field values in combination\
    \ with\n   further information.\n   +-----+----------------------------+-----+--------------------------+\n\
    \   |  ID | Name                       |  ID | Name                     |\n  \
    \ +-----+----------------------------+-----+--------------------------+\n   |\
    \  60 | ipVersion                  | 193 | nextHeaderIPv6           |\n   |  \
    \ 8 | sourceIPv4Address          | 195 | ipDiffServCodePoint      |\n   |  27\
    \ | sourceIPv6Address          | 196 | ipPrecedence             |\n   |   9 |\
    \ sourceIPv4PrefixLength     |   5 | ipClassOfService         |\n   |  29 | sourceIPv6PrefixLength\
    \     |  55 | postIpClassOfService     |\n   |  44 | sourceIPv4Prefix        \
    \   |  31 | flowLabelIPv6            |\n   | 170 | sourceIPv6Prefix          \
    \ | 206 | isMulticast              |\n   |  12 | destinationIPv4Address     |\
    \  54 | fragmentIdentification   |\n   |  28 | destinationIPv6Address     |  88\
    \ | fragmentOffset           |\n   |  13 | destinationIPv4PrefixLength| 197 |\
    \ fragmentFlags            |\n   |  30 | destinationIPv6PrefixLength| 189 | ipHeaderLength\
    \           |\n   |  45 | destinationIPv4Prefix      | 207 | ipv4IHL         \
    \         |\n   | 169 | destinationIPv6Prefix      | 190 | totalLengthIPv4   \
    \       |\n   | 192 | ipTTL                      | 224 | ipTotalLength       \
    \     |\n   |   4 | protocolIdentifier         | 191 | payloadLengthIPv6     \
    \   |\n   +-----+----------------------------+-----+--------------------------+\n"
- title: 5.4.1.  ipVersion
  contents:
  - "5.4.1.  ipVersion\n   Description:\n      The IP version field in the IP packet\
    \ header.\n   Abstract Data Type: unsigned8\n   Data Type Semantics: identifier\n\
    \   ElementId: 60\n   Status: current\n   Reference:\n      See RFC 791 for the\
    \ definition of the version field in the IPv4\n      packet header.  See RFC 2460\
    \ for the definition of the version\n      field in the IPv6 packet header.  Additional\
    \ information on\n      defined version numbers can be found at\n      http://www.iana.org/assignments/version-numbers.\n"
- title: 5.4.2.  sourceIPv4Address
  contents:
  - "5.4.2.  sourceIPv4Address\n   Description:\n      The IPv4 source address in\
    \ the IP packet header.\n   Abstract Data Type: ipv4Address\n   Data Type Semantics:\
    \ identifier\n   ElementId: 8\n   Status: current\n   Reference:\n      See RFC\
    \ 791 for the definition of the IPv4 source address field.\n"
- title: 5.4.3.  sourceIPv6Address
  contents:
  - "5.4.3.  sourceIPv6Address\n   Description:\n      The IPv6 source address in\
    \ the IP packet header.\n   Abstract Data Type: ipv6Address\n   Data Type Semantics:\
    \ identifier\n   ElementId: 27\n   Status: current\n   Reference:\n      See RFC\
    \ 2460 for the definition of the Source Address field in the\n      IPv6 header.\n"
- title: 5.4.4.  sourceIPv4PrefixLength
  contents:
  - "5.4.4.  sourceIPv4PrefixLength\n   Description:\n      The number of contiguous\
    \ bits that are relevant in the\n      sourceIPv4Prefix Information Element.\n\
    \   Abstract Data Type: unsigned8\n   ElementId: 9\n   Status: current\n   Units:\
    \ bits\n   Range: The valid range is 0-32.\n"
- title: 5.4.5.  sourceIPv6PrefixLength
  contents:
  - "5.4.5.  sourceIPv6PrefixLength\n   Description:\n      The number of contiguous\
    \ bits that are relevant in the\n      sourceIPv6Prefix Information Element.\n\
    \   Abstract Data Type: unsigned8\n   ElementId: 29\n   Status: current\n   Units:\
    \ bits\n   Range: The valid range is 0-128.\n"
- title: 5.4.6.  sourceIPv4Prefix
  contents:
  - "5.4.6.  sourceIPv4Prefix\n   Description:\n      IPv4 source address prefix.\n\
    \   Abstract Data Type: ipv4Address\n   ElementId: 44\n   Status: current\n"
- title: 5.4.7.  sourceIPv6Prefix
  contents:
  - "5.4.7.  sourceIPv6Prefix\n   Description:\n      IPv6 source address prefix.\n\
    \   Abstract Data Type: ipv6Address\n   ElementId: 170\n   Status: current\n"
- title: 5.4.8.  destinationIPv4Address
  contents:
  - "5.4.8.  destinationIPv4Address\n   Description:\n      The IPv4 destination address\
    \ in the IP packet header.\n   Abstract Data Type: ipv4Address\n   Data Type Semantics:\
    \ identifier\n   ElementId: 12\n   Status: current\n   Reference:\n      See RFC\
    \ 791 for the definition of the IPv4 destination address\n      field.\n"
- title: 5.4.9.  destinationIPv6Address
  contents:
  - "5.4.9.  destinationIPv6Address\n   Description:\n      The IPv6 destination address\
    \ in the IP packet header.\n   Abstract Data Type: ipv6Address\n   Data Type Semantics:\
    \ identifier\n   ElementId: 28\n   Status: current\n   Reference:\n      See RFC\
    \ 2460 for the definition of the Destination Address field\n      in the IPv6\
    \ header.\n"
- title: 5.4.10.  destinationIPv4PrefixLength
  contents:
  - "5.4.10.  destinationIPv4PrefixLength\n   Description:\n      The number of contiguous\
    \ bits that are relevant in the\n      destinationIPv4Prefix Information Element.\n\
    \   Abstract Data Type: unsigned8\n   ElementId: 13\n   Status: current\n   Units:\
    \ bits\n   Range: The valid range is 0-32.\n"
- title: 5.4.11.  destinationIPv6PrefixLength
  contents:
  - "5.4.11.  destinationIPv6PrefixLength\n   Description:\n      The number of contiguous\
    \ bits that are relevant in the\n      destinationIPv6Prefix Information Element.\n\
    \   Abstract Data Type: unsigned8\n   ElementId: 30\n   Status: current\n   Units:\
    \ bits\n   Range: The valid range is 0-128.\n"
- title: 5.4.12.  destinationIPv4Prefix
  contents:
  - "5.4.12.  destinationIPv4Prefix\n   Description:\n      IPv4 destination address\
    \ prefix.\n   Abstract Data Type: ipv4Address\n   ElementId: 45\n   Status: current\n"
- title: 5.4.13.  destinationIPv6Prefix
  contents:
  - "5.4.13.  destinationIPv6Prefix\n   Description:\n      IPv6 destination address\
    \ prefix.\n   Abstract Data Type: ipv6Address\n   ElementId: 169\n   Status: current\n"
- title: 5.4.14.  ipTTL
  contents:
  - "5.4.14.  ipTTL\n   Description:\n      For IPv4, the value of the Information\
    \ Element matches the value\n      of the Time to Live (TTL) field in the IPv4\
    \ packet header.  For\n      IPv6, the value of the Information Element matches\
    \ the value of\n      the Hop Limit field in the IPv6 packet header.\n   Abstract\
    \ Data Type: unsigned8\n   ElementId: 192\n   Status: current\n   Units: hops\n\
    \   Reference:\n      See RFC 791 for the definition of the IPv4 Time to Live\
    \ field.\n      See RFC 2460 for the definition of the IPv6 Hop Limit field.\n"
- title: 5.4.15.  protocolIdentifier
  contents:
  - "5.4.15.  protocolIdentifier\n   Description:\n      The value of the protocol\
    \ number in the IP packet header.  The\n      protocol number identifies the IP\
    \ packet payload type.  Protocol\n      numbers are defined in the IANA Protocol\
    \ Numbers registry.  In\n      Internet Protocol version 4 (IPv4), this is carried\
    \ in the\n      Protocol field.  In Internet Protocol version 6 (IPv6), this is\n\
    \      carried in the Next Header field in the last extension header of\n    \
    \  the packet.\n   Abstract Data Type: unsigned8\n   Data Type Semantics: identifier\n\
    \   ElementId: 4\n   Status: current\n   Reference:\n      See RFC 791 for the\
    \ specification of the IPv4 protocol field.  See\n      RFC 2460 for the specification\
    \ of the IPv6 protocol field.  See\n      the list of protocol numbers assigned\
    \ by IANA at\n      http://www.iana.org/assignments/protocol-numbers.\n"
- title: 5.4.16.  nextHeaderIPv6
  contents:
  - "5.4.16.  nextHeaderIPv6\n   Description:\n      The value of the Next Header\
    \ field of the IPv6 header.  The value\n      identifies the type of the following\
    \ IPv6 extension header or of\n      the following IP payload.  Valid values are\
    \ defined in the IANA\n      Protocol Numbers registry.\n   Abstract Data Type:\
    \ unsigned8\n   ElementId: 193\n   Status: current\n   Reference:\n      See RFC\
    \ 2460 for the definition of the IPv6 Next Header field.\n      See the list of\
    \ protocol numbers assigned by IANA at\n      http://www.iana.org/assignments/protocol-numbers.\n"
- title: 5.4.17.  ipDiffServCodePoint
  contents:
  - "5.4.17.  ipDiffServCodePoint\n   Description:\n      The value of a Differentiated\
    \ Services Code Point (DSCP) encoded\n      in the Differentiated Services field.\
    \  The Differentiated Services\n      field spans the most significant 6 bits\
    \ of the IPv4 TOS field or\n      the IPv6 Traffic Class field, respectively.\n\
    \      This Information Element encodes only the 6 bits of the\n      Differentiated\
    \ Services field.  Therefore, its value may range\n      from 0 to 63.\n   Abstract\
    \ Data Type: unsigned8\n   Data Type Semantics: identifier\n   ElementId: 195\n\
    \   Status: current\n   Range: The valid range is 0-63.\n   Reference:\n     \
    \ See RFC 3260 for the definition of the Differentiated Services\n      field.\
    \  See RFC 1812 (Section 5.3.2) and RFC 791 for the\n      definition of the IPv4\
    \ TOS field.  See RFC 2460 for the definition\n      of the IPv6 Traffic Class\
    \ field.\n"
- title: 5.4.18.  ipPrecedence
  contents:
  - "5.4.18.  ipPrecedence\n   Description:\n      The value of the IP Precedence.\
    \  The IP Precedence value is\n      encoded in the first 3 bits of the IPv4 TOS\
    \ field or the IPv6\n      Traffic Class field, respectively.  This Information\
    \ Element\n      encodes only these 3 bits.  Therefore, its value may range from\
    \ 0\n      to 7.\n   Abstract Data Type: unsigned8\n   Data Type Semantics: identifier\n\
    \   ElementId: 196\n   Status: current\n   Range: The valid range is 0-7.\n  \
    \ Reference:\n      See RFC 1812 (Section 5.3.3) and RFC 791 for the definition\
    \ of the\n      IP Precedence.  See RFC 1812 (Section 5.3.2) and RFC 791 for the\n\
    \      definition of the IPv4 TOS field.  See RFC 2460 for the definition\n  \
    \    of the IPv6 Traffic Class field.\n"
- title: 5.4.19.  ipClassOfService
  contents:
  - "5.4.19.  ipClassOfService\n   Description:\n      For IPv4 packets, this is the\
    \ value of the TOS field in the IPv4\n      packet header.  For IPv6 packets,\
    \ this is the value of the Traffic\n      Class field in the IPv6 packet header.\n\
    \   Abstract Data Type: unsigned8\n   Data Type Semantics: identifier\n   ElementId:\
    \ 5\n   Status: current\n   Reference:\n      See RFC 1812 (Section 5.3.2) and\
    \ RFC 791 for the definition of the\n      IPv4 TOS field.  See RFC 2460 for the\
    \ definition of the IPv6\n      Traffic Class field.\n"
- title: 5.4.20.  postIpClassOfService
  contents:
  - "5.4.20.  postIpClassOfService\n   Description:\n      The definition of this\
    \ Information Element is identical to the\n      definition of Information Element\
    \ 'ipClassOfService', except that\n      it reports a potentially modified value\
    \ caused by a middlebox\n      function after the packet passed the Observation\
    \ Point.\n   Abstract Data Type: unsigned8\n   Data Type Semantics: identifier\n\
    \   ElementId: 55\n   Status: current\n   Reference:\n      See RFC 791 for the\
    \ definition of the IPv4 TOS field.  See RFC\n      2460 for the definition of\
    \ the IPv6 Traffic Class field.  See RFC\n      3234 for the definition of middleboxes.\n"
- title: 5.4.21.  flowLabelIPv6
  contents:
  - "5.4.21.  flowLabelIPv6\n   Description:\n      The value of the IPv6 Flow Label\
    \ field in the IP packet header.\n   Abstract Data Type: unsigned32\n   Data Type\
    \ Semantics: identifier\n   ElementId: 31\n   Status: current\n   Reference:\n\
    \      See RFC 2460 for the definition of the Flow Label field in the\n      IPv6\
    \ packet header.\n"
- title: 5.4.22.  isMulticast
  contents:
  - "5.4.22.  isMulticast\n   Description:\n      If the IP destination address is\
    \ not a reserved multicast address,\n      then the value of all bits of the octet\
    \ (including the reserved\n      ones) is zero.\n      The first bit of this octet\
    \ is set to 1 if the Version field of\n      the IP header has the value 4 and\
    \ if the Destination Address field\n      contains a reserved multicast address\
    \ in the range from 224.0.0.0\n      to 239.255.255.255.  Otherwise, this bit\
    \ is set to 0.  The second\n      and third bits of this octet are reserved for\
    \ future use.\n      The remaining bits of the octet are only set to values other\
    \ than\n      zero if the IP Destination Address is a reserved IPv6 multicast\n\
    \      address.  Then the fourth bit of the octet is set to the value of\n   \
    \   the T flag in the IPv6 multicast address and the remaining four\n      bits\
    \ are set to the value of the scope field in the IPv6 multicast\n      address.\n\
    \            0      1      2      3      4      5      6      7\n         +------+------+------+------+------+------+------+------+\n\
    \         | MCv4 | RES. | RES. |  T   |   IPv6 multicast scope    |\n        \
    \ +------+------+------+------+------+------+------+------+\n         Bit  0:\
    \    set to 1 if IPv4 multicast\n         Bits 1-2:  reserved for future use\n\
    \         Bit  4:    set to value of T flag, if IPv6 multicast\n         Bits\
    \ 4-7:  set to value of multicast scope if IPv6 multicast\n   Abstract Data Type:\
    \ unsigned8\n   Data Type Semantics: flags\n   ElementId: 206\n   Status: current\n\
    \   Reference:\n      See RFC 1112 for the specification of reserved IPv4 multicast\n\
    \      addresses.  See RFC 4291 for the specification of reserved IPv6\n     \
    \ multicast addresses and the definition of the T flag and the IPv6\n      multicast\
    \ scope.\n"
- title: 5.4.23.  fragmentIdentification
  contents:
  - "5.4.23.  fragmentIdentification\n   Description:\n      The value of the Identification\
    \ field in the IPv4 packet header or\n      in the IPv6 Fragment header, respectively.\
    \  The value is 0 for\n      IPv6 if there is no fragment header.\n   Abstract\
    \ Data Type: unsigned32\n   Data Type Semantics: identifier\n   ElementId: 54\n\
    \   Status: current\n   Reference:\n      See RFC 791 for the definition of the\
    \ IPv4 Identification field.\n      See RFC 2460 for the definition of the Identification\
    \ field in the\n      IPv6 Fragment header.\n"
- title: 5.4.24.  fragmentOffset
  contents:
  - "5.4.24.  fragmentOffset\n   Description:\n      The value of the IP fragment\
    \ offset field in the IPv4 packet\n      header or the IPv6 Fragment header, respectively.\
    \  The value is 0\n      for IPv6 if there is no fragment header.\n   Abstract\
    \ Data Type: unsigned16\n   Data Type Semantics: identifier\n   ElementId: 88\n\
    \   Status: current\n   Reference:\n      See RFC 791 for the specification of\
    \ the fragment offset in the\n      IPv4 header.  See RFC 2460 for the specification\
    \ of the fragment\n      offset in the IPv6 Fragment header.\n"
- title: 5.4.25.  fragmentFlags
  contents:
  - "5.4.25.  fragmentFlags\n   Description:\n      Fragmentation properties indicated\
    \ by flags in the IPv4 packet\n      header or the IPv6 Fragment header, respectively.\n\
    \      Bit 0:    (RS) Reserved.\n                The value of this bit MUST be\
    \ 0 until specified\n                otherwise.\n      Bit 1:    (DF) 0 = May\
    \ Fragment,  1 = Don't Fragment.\n                Corresponds to the value of\
    \ the DF flag in the\n                IPv4 header.  Will always be 0 for IPv6\
    \ unless\n                a \"don't fragment\" feature is introduced to IPv6.\n\
    \      Bit 2:    (MF) 0 = Last Fragment, 1 = More Fragments.\n               \
    \ Corresponds to the MF flag in the IPv4 header\n                or to the M flag\
    \ in the IPv6 Fragment header,\n                respectively.  The value is 0\
    \ for IPv6 if there\n                is no fragment header.\n      Bits 3-7: (DC)\
    \ Don't Care.\n                The values of these bits are irrelevant.\n    \
    \       0   1   2   3   4   5   6   7\n         +---+---+---+---+---+---+---+---+\n\
    \         | R | D | M | D | D | D | D | D |\n         | S | F | F | C | C | C\
    \ | C | C |\n         +---+---+---+---+---+---+---+---+\n   Abstract Data Type:\
    \ unsigned8\n   Data Type Semantics: flags\n   ElementId: 197\n   Status: current\n\
    \   Reference:\n      See RFC 791 for the specification of the IPv4 fragment flags.\
    \  See\n      RFC 2460 for the specification of the IPv6 Fragment header.\n"
- title: 5.4.26.  ipHeaderLength
  contents:
  - "5.4.26.  ipHeaderLength\n   Description:\n      The length of the IP header.\
    \  For IPv6, the value of this\n      Information Element is 40.\n   Abstract\
    \ Data Type: unsigned8\n   ElementId: 189\n   Status: current\n   Units: octets\n\
    \   Reference:\n      See RFC 791 for the specification of the IPv4 header.  See\
    \ RFC\n      2460 for the specification of the IPv6 header.\n"
- title: 5.4.27.  ipv4IHL
  contents:
  - "5.4.27.  ipv4IHL\n   Description:\n      The value of the Internet Header Length\
    \ (IHL) field in the IPv4\n      header.  It specifies the length of the header\
    \ in units of 4\n      octets.  Please note that its unit is different from most\
    \ of the\n      other Information Elements reporting length values.\n   Abstract\
    \ Data Type: unsigned8\n   ElementId: 207\n   Status: current\n   Units: 4 octets\n\
    \   Reference:\n      See RFC 791 for the specification of the IPv4 header.\n"
- title: 5.4.28.  totalLengthIPv4
  contents:
  - "5.4.28.  totalLengthIPv4\n   Description:\n      The total length of the IPv4\
    \ packet.\n   Abstract Data Type: unsigned16\n   ElementId: 190\n   Status: current\n\
    \   Units: octets\n   Reference:\n      See RFC 791 for the specification of the\
    \ IPv4 total length.\n"
- title: 5.4.29.  ipTotalLength
  contents:
  - "5.4.29.  ipTotalLength\n   Description:\n      The total length of the IP packet.\n\
    \   Abstract Data Type: unsigned64\n   ElementId: 224\n   Status: current\n  \
    \ Units: octets\n   Reference:\n      See RFC 791 for the specification of the\
    \ IPv4 total length.  See\n      RFC 2460 for the specification of the IPv6 payload\
    \ length.  See\n      RFC 2675 for the specification of the IPv6 jumbo payload\
    \ length.\n"
- title: 5.4.30.  payloadLengthIPv6
  contents:
  - "5.4.30.  payloadLengthIPv6\n   Description:\n      This Information Element reports\
    \ the value of the Payload Length\n      field in the IPv6 header.  Note that\
    \ IPv6 extension headers belong\n      to the payload.  Also note that in case\
    \ of a jumbo payload option\n      the value of the Payload Length field in the\
    \ IPv6 header is zero\n      and so will be the value reported by this Information\
    \ Element.\n   Abstract Data Type: unsigned16\n   ElementId: 191\n   Status: current\n\
    \   Units: octets\n   Reference:\n      See RFC 2460 for the specification of\
    \ the IPv6 payload length.\n      See RFC 2675 for the specification of the IPv6\
    \ jumbo payload\n      option.\n"
- title: 5.5.  Transport Header Fields
  contents:
  - "5.5.  Transport Header Fields\n   The set of Information Elements related to\
    \ transport header fields\n   and length includes the Information Elements listed\
    \ in the table\n   below.\n   +-----+---------------------------+-----+---------------------------+\n\
    \   |  ID | Name                      |  ID | Name                      |\n  \
    \ +-----+---------------------------+-----+---------------------------+\n   |\
    \   7 | sourceTransportPort       | 238 | tcpWindowScale            |\n   |  11\
    \ | destinationTransportPort  | 187 | tcpUrgentPointer          |\n   | 180 |\
    \ udpSourcePort             | 188 | tcpHeaderLength           |\n   | 181 | udpDestinationPort\
    \        |  32 | icmpTypeCodeIPv4          |\n   | 205 | udpMessageLength    \
    \      | 176 | icmpTypeIPv4              |\n   | 182 | tcpSourcePort         \
    \    | 177 | icmpCodeIPv4              |\n   | 183 | tcpDestinationPort      \
    \  | 139 | icmpTypeCodeIPv6          |\n   | 184 | tcpSequenceNumber         |\
    \ 178 | icmpTypeIPv6              |\n   | 185 | tcpAcknowledgementNumber  | 179\
    \ | icmpCodeIPv6              |\n   | 186 | tcpWindowSize             |  33 |\
    \ igmpType                  |\n   +-----+---------------------------+-----+---------------------------+\n"
- title: 5.5.1.  sourceTransportPort
  contents:
  - "5.5.1.  sourceTransportPort\n   Description:\n      The source port identifier\
    \ in the transport header.  For the\n      transport protocols UDP, TCP, and SCTP,\
    \ this is the source port\n      number given in the respective header.  This\
    \ field MAY also be\n      used for future transport protocols that have 16-bit\
    \ source port\n      identifiers.\n   Abstract Data Type: unsigned16\n   Data\
    \ Type Semantics: identifier\n   ElementId: 7\n   Status: current\n   Reference:\n\
    \      See RFC 768 for the definition of the UDP source port field.  See\n   \
    \   RFC 793 for the definition of the TCP source port field.  See RFC\n      4960\
    \ for the definition of SCTP.\n      Additional information on defined UDP and\
    \ TCP port numbers can be\n      found at http://www.iana.org/assignments/port-numbers.\n"
- title: 5.5.2.  destinationTransportPort
  contents:
  - "5.5.2.  destinationTransportPort\n   Description:\n      The destination port\
    \ identifier in the transport header.  For the\n      transport protocols UDP,\
    \ TCP, and SCTP, this is the destination\n      port number given in the respective\
    \ header.  This field MAY also\n      be used for future transport protocols that\
    \ have 16-bit\n      destination port identifiers.\n   Abstract Data Type: unsigned16\n\
    \   Data Type Semantics: identifier\n   ElementId: 11\n   Status: current\n  \
    \ Reference:\n      See RFC 768 for the definition of the UDP destination port\
    \ field.\n      See RFC 793 for the definition of the TCP destination port field.\n\
    \      See RFC 4960 for the definition of SCTP.  Additional information\n    \
    \  on defined UDP and TCP port numbers can be found at\n      http://www.iana.org/assignments/port-numbers.\n"
- title: 5.5.3.  udpSourcePort
  contents:
  - "5.5.3.  udpSourcePort\n   Description:\n      The source port identifier in the\
    \ UDP header.\n   Abstract Data Type: unsigned16\n   Data Type Semantics: identifier\n\
    \   ElementId: 180\n   Status: current\n   Reference:\n      See RFC 768 for the\
    \ definition of the UDP source port field.\n      Additional information on defined\
    \ UDP port numbers can be found at\n      http://www.iana.org/assignments/port-numbers.\n"
- title: 5.5.4.  udpDestinationPort
  contents:
  - "5.5.4.  udpDestinationPort\n   Description:\n      The destination port identifier\
    \ in the UDP header.\n   Abstract Data Type: unsigned16\n   Data Type Semantics:\
    \ identifier\n   ElementId: 181\n   Status: current\n   Reference:\n      See\
    \ RFC 768 for the definition of the UDP destination port field.\n      Additional\
    \ information on defined UDP port numbers can be found at\n      http://www.iana.org/assignments/port-numbers.\n"
- title: 5.5.5.  udpMessageLength
  contents:
  - "5.5.5.  udpMessageLength\n   Description:\n      The value of the Length field\
    \ in the UDP header.\n   Abstract Data Type: unsigned16\n   ElementId: 205\n \
    \  Status: current\n   Units: octets\n   Reference:\n      See RFC 768 for the\
    \ specification of the UDP header.\n"
- title: 5.5.6.  tcpSourcePort
  contents:
  - "5.5.6.  tcpSourcePort\n   Description:\n      The source port identifier in the\
    \ TCP header.\n   Abstract Data Type: unsigned16\n   Data Type Semantics: identifier\n\
    \   ElementId: 182\n   Status: current\n   Reference:\n      See RFC 793 for the\
    \ definition of the TCP source port field.\n      Additional information on defined\
    \ TCP port numbers can be found at\n      http://www.iana.org/assignments/port-numbers.\n"
- title: 5.5.7.  tcpDestinationPort
  contents:
  - "5.5.7.  tcpDestinationPort\n   Description:\n      The destination port identifier\
    \ in the TCP header.\n   Abstract Data Type: unsigned16\n   Data Type Semantics:\
    \ identifier\n   ElementId: 183\n   Status: current\n   Reference:\n      See\
    \ RFC 793 for the definition of the TCP source port field.\n      Additional information\
    \ on defined TCP port numbers can be found at\n      http://www.iana.org/assignments/port-numbers.\n"
- title: 5.5.8.  tcpSequenceNumber
  contents:
  - "5.5.8.  tcpSequenceNumber\n   Description:\n      The sequence number in the\
    \ TCP header.\n   Abstract Data Type: unsigned32\n   ElementId: 184\n   Status:\
    \ current\n   Reference:\n      See RFC 793 for the definition of the TCP sequence\
    \ number.\n"
- title: 5.5.9.  tcpAcknowledgementNumber
  contents:
  - "5.5.9.  tcpAcknowledgementNumber\n   Description:\n      The acknowledgement\
    \ number in the TCP header.\n   Abstract Data Type: unsigned32\n   ElementId:\
    \ 185\n   Status: current\n   Reference:\n      See RFC 793 for the definition\
    \ of the TCP acknowledgement number.\n"
- title: 5.5.10.  tcpWindowSize
  contents:
  - "5.5.10.  tcpWindowSize\n   Description:\n      The window field in the TCP header.\
    \  If the TCP window scale is\n      supported, then TCP window scale must be\
    \ known to fully interpret\n      the value of this information.\n   Abstract\
    \ Data Type: unsigned16\n   ElementId: 186\n   Status: current\n   Reference:\n\
    \      See RFC 793 for the definition of the TCP window field.  See RFC\n    \
    \  1323 for the definition of the TCP window scale.\n"
- title: 5.5.11.  tcpWindowScale
  contents:
  - "5.5.11.  tcpWindowScale\n   Description:\n      The scale of the window field\
    \ in the TCP header.\n   Abstract Data Type: unsigned16\n   ElementId: 238\n \
    \  Status: current\n   Reference:\n      See RFC 1323 for the definition of the\
    \ TCP window scale.\n"
- title: 5.5.12.  tcpUrgentPointer
  contents:
  - "5.5.12.  tcpUrgentPointer\n   Description:\n      The urgent pointer in the TCP\
    \ header.\n   Abstract Data Type: unsigned16\n   ElementId: 187\n   Status: current\n\
    \   Reference:\n      See RFC 793 for the definition of the TCP urgent pointer.\n"
- title: 5.5.13.  tcpHeaderLength
  contents:
  - "5.5.13.  tcpHeaderLength\n   Description:\n      The length of the TCP header.\
    \  Note that the value of this\n      Information Element is different from the\
    \ value of the Data Offset\n      field in the TCP header.  The Data Offset field\
    \ indicates the\n      length of the TCP header in units of 4 octets.  This Information\n\
    \      Elements specifies the length of the TCP header in units of\n      octets.\n\
    \   Abstract Data Type: unsigned8\n   ElementId: 188\n   Status: current\n   Units:\
    \ octets\n   Reference:\n      See RFC 793 for the definition of the TCP header.\n"
- title: 5.5.14.  icmpTypeCodeIPv4
  contents:
  - "5.5.14.  icmpTypeCodeIPv4\n   Description:\n      Type and Code of the IPv4 ICMP\
    \ message.  The combination of both\n      values is reported as (ICMP type *\
    \ 256) + ICMP code.\n   Abstract Data Type: unsigned16\n   Data Type Semantics:\
    \ identifier\n   ElementId: 32\n   Status: current\n   Reference:\n      See RFC\
    \ 792 for the definition of the IPv4 ICMP type and code\n      fields.\n"
- title: 5.5.15.  icmpTypeIPv4
  contents:
  - "5.5.15.  icmpTypeIPv4\n   Description:\n      Type of the IPv4 ICMP message.\n\
    \   Abstract Data Type: unsigned8\n   Data Type Semantics: identifier\n   ElementId:\
    \ 176\n   Status: current\n   Reference:\n      See RFC 792 for the definition\
    \ of the IPv4 ICMP type field.\n"
- title: 5.5.16.  icmpCodeIPv4
  contents:
  - "5.5.16.  icmpCodeIPv4\n   Description:\n      Code of the IPv4 ICMP message.\n\
    \   Abstract Data Type: unsigned8\n   Data Type Semantics: identifier\n   ElementId:\
    \ 177\n   Status: current\n   Reference:\n      See RFC 792 for the definition\
    \ of the IPv4 ICMP code field.\n"
- title: 5.5.17.  icmpTypeCodeIPv6
  contents:
  - "5.5.17.  icmpTypeCodeIPv6\n   Description:\n      Type and Code of the IPv6 ICMP\
    \ message.  The combination of both\n      values is reported as (ICMP type *\
    \ 256) + ICMP code.\n   Abstract Data Type: unsigned16\n   Data Type Semantics:\
    \ identifier\n   ElementId: 139\n   Status: current\n   Reference:\n      See\
    \ RFC 4443 for the definition of the IPv6 ICMP type and code\n      fields.\n"
- title: 5.5.18.  icmpTypeIPv6
  contents:
  - "5.5.18.  icmpTypeIPv6\n   Description:\n      Type of the IPv6 ICMP message.\n\
    \   Abstract Data Type: unsigned8\n   Data Type Semantics: identifier\n   ElementId:\
    \ 178\n   Status: current\n   Reference:\n      See RFC 4443 for the definition\
    \ of the IPv6 ICMP type field.\n"
- title: 5.5.19.  icmpCodeIPv6
  contents:
  - "5.5.19.  icmpCodeIPv6\n   Description:\n      Code of the IPv6 ICMP message.\n\
    \   Abstract Data Type: unsigned8\n   Data Type Semantics: identifier\n   ElementId:\
    \ 179\n   Status: current\n   Reference:\n      See RFC 4443 for the definition\
    \ of the IPv6 ICMP code field.\n"
- title: 5.5.20.  igmpType
  contents:
  - "5.5.20.  igmpType\n   Description:\n      The type field of the IGMP message.\n\
    \   Abstract Data Type: unsigned8\n   Data Type Semantics: identifier\n   ElementId:\
    \ 33\n   Status: current\n   Reference:\n      See RFC 3376 for the definition\
    \ of the IGMP type field.\n"
- title: 5.6.  Sub-IP Header Fields
  contents:
  - "5.6.  Sub-IP Header Fields\n   The set of Information Elements related to Sub-IP\
    \ header fields\n   includes the Information Elements listed in the table below.\n\
    \   +-----+---------------------------+-----+---------------------------+\n  \
    \ |  ID | Name                      |  ID | Name                      |\n   +-----+---------------------------+-----+---------------------------+\n\
    \   |  56 | sourceMacAddress          | 201 | mplsLabelStackLength      |\n  \
    \ |  81 | postSourceMacAddress      | 194 | mplsPayloadLength         |\n   |\
    \  58 | vlanId                    |  70 | mplsTopLabelStackSection  |\n   |  59\
    \ | postVlanId                |  71 | mplsLabelStackSection2    |\n   |  80 |\
    \ destinationMacAddress     |  72 | mplsLabelStackSection3    |\n   |  57 | postDestinationMacAddress\
    \ |  73 | mplsLabelStackSection4    |\n   | 146 | wlanChannelId             |\
    \  74 | mplsLabelStackSection5    |\n   | 147 | wlanSSID                  |  75\
    \ | mplsLabelStackSection6    |\n   | 200 | mplsTopLabelTTL           |  76 |\
    \ mplsLabelStackSection7    |\n   | 203 | mplsTopLabelExp           |  77 | mplsLabelStackSection8\
    \    |\n   | 237 | postMplsTopLabelExp       |  78 | mplsLabelStackSection9  \
    \  |\n   | 202 | mplsLabelStackDepth       |  79 | mplsLabelStackSection10   |\n\
    \   +-----+---------------------------+-----+---------------------------+\n"
- title: 5.6.1.  sourceMacAddress
  contents:
  - "5.6.1.  sourceMacAddress\n   Description:\n      The IEEE 802 source MAC address\
    \ field.\n   Abstract Data Type: macAddress\n   Data Type Semantics: identifier\n\
    \   ElementId: 56\n   Status: current\n   Reference:\n      See IEEE.802-3.2002.\n"
- title: 5.6.2.  postSourceMacAddress
  contents:
  - "5.6.2.  postSourceMacAddress\n   Description:\n      The definition of this Information\
    \ Element is identical to the\n      definition of Information Element 'sourceMacAddress',\
    \ except that\n      it reports a potentially modified value caused by a middlebox\n\
    \      function after the packet passed the Observation Point.\n   Abstract Data\
    \ Type: macAddress\n   Data Type Semantics: identifier\n   ElementId: 81\n   Status:\
    \ current\n   Reference:\n      See IEEE.802-3.2002.\n"
- title: 5.6.3.  vlanId
  contents:
  - "5.6.3.  vlanId\n   Description:\n      The IEEE 802.1Q VLAN identifier (VID)\
    \ extracted from the Tag\n      Control Information field that was attached to\
    \ the IP packet.\n   Abstract Data Type: unsigned16\n   Data Type Semantics: identifier\n\
    \   ElementId: 58\n   Status: current\n   Reference:\n      See IEEE.802-1Q.2003.\n"
- title: 5.6.4.  postVlanId
  contents:
  - "5.6.4.  postVlanId\n   Description:\n      The definition of this Information\
    \ Element is identical to the\n      definition of Information Element 'vlanId',\
    \ except that it reports\n      a potentially modified value caused by a middlebox\
    \ function after\n      the packet passed the Observation Point.\n   Abstract\
    \ Data Type: unsigned16\n   Data Type Semantics: identifier\n   ElementId: 59\n\
    \   Status: current\n   Reference:\n      See IEEE.802-1Q.2003.\n"
- title: 5.6.5.  destinationMacAddress
  contents:
  - "5.6.5.  destinationMacAddress\n   Description:\n      The IEEE 802 destination\
    \ MAC address field.\n   Abstract Data Type: macAddress\n   Data Type Semantics:\
    \ identifier\n   ElementId: 80\n   Status: current\n   Reference:\n      See IEEE.802-3.2002.\n"
- title: 5.6.6.  postDestinationMacAddress
  contents:
  - "5.6.6.  postDestinationMacAddress\n   Description:\n      The definition of this\
    \ Information Element is identical to the\n      definition of Information Element\
    \ 'destinationMacAddress', except\n      that it reports a potentially modified\
    \ value caused by a middlebox\n      function after the packet passed the Observation\
    \ Point.\n   Abstract Data Type: macAddress\n   Data Type Semantics: identifier\n\
    \   ElementId: 57\n   Status: current\n   Reference:\n      See IEEE.802-3.2002.\n"
- title: 5.6.7.  wlanChannelId
  contents:
  - "5.6.7.  wlanChannelId\n   Description:\n      The identifier of the 802.11 (Wi-Fi)\
    \ channel used.\n   Abstract Data Type: unsigned8\n   Data Type Semantics: identifier\n\
    \   ElementId: 146\n   Status: current\n   Reference:\n      See IEEE.802-11.1999.\n"
- title: 5.6.8.  wlanSSID
  contents:
  - "5.6.8.  wlanSSID\n   Description:\n      The Service Set IDentifier (SSID) identifying\
    \ an 802.11 (Wi-Fi)\n      network used.  According to IEEE.802-11.1999, the SSID\
    \ is encoded\n      into a string of up to 32 characters.\n   Abstract Data Type:\
    \ string\n   ElementId: 147\n   Status: current\n   Reference:\n      See IEEE.802-11.1999.\n"
- title: 5.6.9.  mplsTopLabelTTL
  contents:
  - "5.6.9.  mplsTopLabelTTL\n   Description:\n      The TTL field from the top MPLS\
    \ label stack entry, i.e., the last\n      label that was pushed.\n   Abstract\
    \ Data Type: unsigned8\n   ElementId: 200\n   Status: current\n   Units: hops\n\
    \   Reference:\n      See RFC 3032 for the specification of the TTL field.\n"
- title: 5.6.10.  mplsTopLabelExp
  contents:
  - "5.6.10.  mplsTopLabelExp\n   Description:\n      The Exp field from the top MPLS\
    \ label stack entry, i.e., the last\n      label that was pushed.\n      Bits\
    \ 0-4:  Don't Care, value is irrelevant.\n      Bits 5-7:  MPLS Exp field.\n \
    \         0   1   2   3   4   5   6   7\n        +---+---+---+---+---+---+---+---+\n\
    \        |     don't care    |    Exp    |\n        +---+---+---+---+---+---+---+---+\n\
    \   Abstract Data Type: unsigned8\n   Data Type Semantics: flags\n   ElementId:\
    \ 203\n   Status: current\n   Reference:\n      See RFC 3032 for the specification\
    \ of the Exp field.  See RFC 3270\n      for usage of the Exp field.\n"
- title: 5.6.11.  postMplsTopLabelExp
  contents:
  - "5.6.11.  postMplsTopLabelExp\n   Description:\n      The definition of this Information\
    \ Element is identical to the\n      definition of Information Element 'mplsTopLabelExp',\
    \ except that\n      it reports a potentially modified value caused by a middlebox\n\
    \      function after the packet passed the Observation Point.\n   Abstract Data\
    \ Type: unsigned8\n   Data Type Semantics: flags\n   ElementId: 237\n   Status:\
    \ current\n   Reference:\n      See RFC 3032 for the specification of the Exp\
    \ field.  See RFC 3270\n      for usage of the Exp field.\n"
- title: 5.6.12.  mplsLabelStackDepth
  contents:
  - "5.6.12.  mplsLabelStackDepth\n   Description:\n      The number of labels in\
    \ the MPLS label stack.\n   Abstract Data Type: unsigned32\n   ElementId: 202\n\
    \   Status: current\n   Units: label stack entries\n   Reference:\n      See RFC\
    \ 3032 for the specification of the MPLS label stack.\n"
- title: 5.6.13.  mplsLabelStackLength
  contents:
  - "5.6.13.  mplsLabelStackLength\n   Description:\n      The length of the MPLS\
    \ label stack in units of octets.\n   Abstract Data Type: unsigned32\n   ElementId:\
    \ 201\n   Status: current\n   Units: octets\n   Reference:\n      See RFC 3032\
    \ for the specification of the MPLS label stack.\n"
- title: 5.6.14.  mplsPayloadLength
  contents:
  - "5.6.14.  mplsPayloadLength\n   Description:\n      The size of the MPLS packet\
    \ without the label stack.\n   Abstract Data Type: unsigned32\n   ElementId: 194\n\
    \   Status: current\n   Units: octets\n   Reference:\n      See RFC 3031 for the\
    \ specification of MPLS packets.  See RFC 3032\n      for the specification of\
    \ the MPLS label stack.\n"
- title: 5.6.15.  mplsTopLabelStackSection
  contents:
  - "5.6.15.  mplsTopLabelStackSection\n   Description:\n      The Label, Exp, and\
    \ S fields from the top MPLS label stack entry,\n      i.e., from the last label\
    \ that was pushed.  The size of this\n      Information Element is 3 octets.\n\
    \       0                   1                   2\n       0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                Label                  | Exp |S|\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      Label:  Label Value, 20 bits\n      Exp:    Experimental Use, 3 bits\n\
    \      S:      Bottom of Stack, 1 bit\n   Abstract Data Type: octetArray\n   Data\
    \ Type Semantics: identifier\n   ElementId: 70\n   Status: current\n   Reference:\n\
    \      See RFC 3032.\n"
- title: 5.6.16.  mplsLabelStackSection2
  contents:
  - "5.6.16.  mplsLabelStackSection2\n   Description:\n      The Label, Exp, and S\
    \ fields from the label stack entry that was\n      pushed immediately before\
    \ the label stack entry that would be\n      reported by mplsTopLabelStackSection.\
    \  See the definition of\n      mplsTopLabelStackSection for further details.\
    \  The size of this\n      Information Element is 3 octets.\n   Abstract Data\
    \ Type: octetArray\n   Data Type Semantics: identifier\n   ElementId: 71\n   Status:\
    \ current\n   Reference:\n      See RFC 3032.\n"
- title: 5.6.17.  mplsLabelStackSection3
  contents:
  - "5.6.17.  mplsLabelStackSection3\n   Description:\n      The Label, Exp, and S\
    \ fields from the label stack entry that was\n      pushed immediately before\
    \ the label stack entry that would be\n      reported by mplsLabelStackSection2.\
    \  See the definition of\n      mplsTopLabelStackSection for further details.\
    \  The size of this\n      Information Element is 3 octets.\n   Abstract Data\
    \ Type: octetArray\n   Data Type Semantics: identifier\n   ElementId: 72\n   Status:\
    \ current\n   Reference:\n      See RFC 3032.\n"
- title: 5.6.18.  mplsLabelStackSection4
  contents:
  - "5.6.18.  mplsLabelStackSection4\n   Description:\n      The Label, Exp, and S\
    \ fields from the label stack entry that was\n      pushed immediately before\
    \ the label stack entry that would be\n      reported by mplsLabelStackSection3.\
    \  See the definition of\n      mplsTopLabelStackSection for further details.\
    \  The size of this\n      Information Element is 3 octets.\n   Abstract Data\
    \ Type: octetArray\n   Data Type Semantics: identifier\n   ElementId: 73\n   Status:\
    \ current\n   Reference:\n      See RFC 3032.\n"
- title: 5.6.19.  mplsLabelStackSection5
  contents:
  - "5.6.19.  mplsLabelStackSection5\n   Description:\n      The Label, Exp, and S\
    \ fields from the label stack entry that was\n      pushed immediately before\
    \ the label stack entry that would be\n      reported by mplsLabelStackSection4.\
    \  See the definition of\n      mplsTopLabelStackSection for further details.\
    \  The size of this\n      Information Element is 3 octets.\n   Abstract Data\
    \ Type: octetArray\n   Data Type Semantics: identifier\n   ElementId: 74\n   Status:\
    \ current\n   Reference:\n      See RFC 3032.\n"
- title: 5.6.20.  mplsLabelStackSection6
  contents:
  - "5.6.20.  mplsLabelStackSection6\n   Description:\n      The Label, Exp, and S\
    \ fields from the label stack entry that was\n      pushed immediately before\
    \ the label stack entry that would be\n      reported by mplsLabelStackSection5.\
    \  See the definition of\n      mplsTopLabelStackSection for further details.\
    \  The size of this\n      Information Element is 3 octets.\n   Abstract Data\
    \ Type: octetArray\n   Data Type Semantics: identifier\n   ElementId: 75\n   Status:\
    \ current\n   Reference:\n      See RFC 3032.\n"
- title: 5.6.21.  mplsLabelStackSection7
  contents:
  - "5.6.21.  mplsLabelStackSection7\n   Description:\n      The Label, Exp, and S\
    \ fields from the label stack entry that was\n      pushed immediately before\
    \ the label stack entry that would be\n      reported by mplsLabelStackSection6.\
    \  See the definition of\n      mplsTopLabelStackSection for further details.\
    \  The size of this\n      Information Element is 3 octets.\n   Abstract Data\
    \ Type: octetArray\n   Data Type Semantics: identifier\n   ElementId: 76\n   Status:\
    \ current\n   Reference:\n      See RFC 3032.\n"
- title: 5.6.22.  mplsLabelStackSection8
  contents:
  - "5.6.22.  mplsLabelStackSection8\n   Description:\n      The Label, Exp, and S\
    \ fields from the label stack entry that was\n      pushed immediately before\
    \ the label stack entry that would be\n      reported by mplsLabelStackSection7.\
    \  See the definition of\n      mplsTopLabelStackSection for further details.\
    \  The size of this\n      Information Element is 3 octets.\n   Abstract Data\
    \ Type: octetArray\n   Data Type Semantics: identifier\n   ElementId: 77\n   Status:\
    \ current\n   Reference:\n      See RFC 3032.\n"
- title: 5.6.23.  mplsLabelStackSection9
  contents:
  - "5.6.23.  mplsLabelStackSection9\n   Description:\n      The Label, Exp, and S\
    \ fields from the label stack entry that was\n      pushed immediately before\
    \ the label stack entry that would be\n      reported by mplsLabelStackSection8.\
    \  See the definition of\n      mplsTopLabelStackSection for further details.\
    \  The size of this\n      Information Element is 3 octets.\n   Abstract Data\
    \ Type: octetArray\n   Data Type Semantics: identifier\n   ElementId: 78\n   Status:\
    \ current\n   Reference:\n      See RFC 3032.\n"
- title: 5.6.24.  mplsLabelStackSection10
  contents:
  - "5.6.24.  mplsLabelStackSection10\n   Description:\n      The Label, Exp, and\
    \ S fields from the label stack entry that was\n      pushed immediately before\
    \ the label stack entry that would be\n      reported by mplsLabelStackSection9.\
    \  See the definition of\n      mplsTopLabelStackSection for further details.\
    \  The size of this\n      Information Element is 3 octets.\n   Abstract Data\
    \ Type: octetArray\n   Data Type Semantics: identifier\n   ElementId: 79\n   Status:\
    \ current\n   Reference:\n      See RFC 3032.\n"
- title: 5.7.  Derived Packet Properties
  contents:
  - "5.7.  Derived Packet Properties\n   The set of Information Elements derived from\
    \ packet properties (for\n   example, values of header fields) includes the Information\
    \ Elements\n   listed in the table below.\n   +-----+---------------------------+-----+---------------------------+\n\
    \   |  ID | Name                      |  ID | Name                      |\n  \
    \ +-----+---------------------------+-----+---------------------------+\n   |\
    \ 204 | ipPayloadLength           |  18 | bgpNextHopIPv4Address     |\n   |  15\
    \ | ipNextHopIPv4Address      |  63 | bgpNextHopIPv6Address     |\n   |  62 |\
    \ ipNextHopIPv6Address      |  46 | mplsTopLabelType          |\n   |  16 | bgpSourceAsNumber\
    \         |  47 | mplsTopLabelIPv4Address   |\n   |  17 | bgpDestinationAsNumber\
    \    | 140 | mplsTopLabelIPv6Address   |\n   | 128 | bgpNextAdjacentAsNumber \
    \  |  90 | mplsVpnRouteDistinguisher |\n   | 129 | bgpPrevAdjacentAsNumber   |\
    \     |                           |\n   +-----+---------------------------+-----+---------------------------+\n"
- title: 5.7.1.  ipPayloadLength
  contents:
  - "5.7.1.  ipPayloadLength\n   Description:\n      The effective length of the IP\
    \ payload.  For IPv4 packets, the\n      value of this Information Element is\
    \ the difference between the\n      total length of the IPv4 packet (as reported\
    \ by Information\n      Element totalLengthIPv4) and the length of the IPv4 header\
    \ (as\n      reported by Information Element headerLengthIPv4).  For IPv6, the\n\
    \      value of the Payload Length field in the IPv6 header is reported\n    \
    \  except in the case that the value of this field is zero and that\n      there\
    \ is a valid jumbo payload option.  In this case, the value of\n      the Jumbo\
    \ Payload Length field in the jumbo payload option is\n      reported.\n   Abstract\
    \ Data Type: unsigned32\n   ElementId: 204\n   Status: current\n   Units: octets\n\
    \   Reference:\n      See RFC 791 for the specification of IPv4 packets.  See\
    \ RFC 2460\n      for the specification of the IPv6 payload length.  See RFC 2675\n\
    \      for the specification of the IPv6 jumbo payload length.\n"
- title: 5.7.2.  ipNextHopIPv4Address
  contents:
  - "5.7.2.  ipNextHopIPv4Address\n   Description:\n      The IPv4 address of the\
    \ next IPv4 hop.\n   Abstract Data Type: ipv4Address\n   Data Type Semantics:\
    \ identifier\n   ElementId: 15\n   Status: current\n"
- title: 5.7.3.  ipNextHopIPv6Address
  contents:
  - "5.7.3.  ipNextHopIPv6Address\n   Description:\n      The IPv6 address of the\
    \ next IPv6 hop.\n   Abstract Data Type: ipv6Address\n   Data Type Semantics:\
    \ identifier\n   ElementId: 62\n   Status: current\n"
- title: 5.7.4.  bgpSourceAsNumber
  contents:
  - "5.7.4.  bgpSourceAsNumber\n   Description:\n      The autonomous system (AS)\
    \ number of the source IP address.  If AS\n      path information for this Flow\
    \ is only available as an unordered\n      AS set (and not as an ordered AS sequence),\
    \ then the value of this\n      Information Element is 0.\n   Abstract Data Type:\
    \ unsigned32\n   Data Type Semantics: identifier\n   ElementId: 16\n   Status:\
    \ current\n   Reference:\n      See RFC 4271 for a description of BGP-4, and see\
    \ RFC 1930 for the\n      definition of the AS number.\n"
- title: 5.7.5.  bgpDestinationAsNumber
  contents:
  - "5.7.5.  bgpDestinationAsNumber\n   Description:\n      The autonomous system\
    \ (AS) number of the destination IP address.\n      If AS path information for\
    \ this Flow is only available as an\n      unordered AS set (and not as an ordered\
    \ AS sequence), then the\n      value of this Information Element is 0.\n   Abstract\
    \ Data Type: unsigned32\n   Data Type Semantics: identifier\n   ElementId: 17\n\
    \   Status: current\n   Reference:\n      See RFC 4271 for a description of BGP-4,\
    \ and see RFC 1930 for the\n      definition of the AS number.\n"
- title: 5.7.6.  bgpNextAdjacentAsNumber
  contents:
  - "5.7.6.  bgpNextAdjacentAsNumber\n   Description:\n      The autonomous system\
    \ (AS) number of the first AS in the AS path\n      to the destination IP address.\
    \  The path is deduced by looking up\n      the destination IP address of the\
    \ Flow in the BGP routing\n      information base.  If AS path information for\
    \ this Flow is only\n      available as an unordered AS set (and not as an ordered\
    \ AS\n      sequence), then the value of this Information Element is 0.\n   Abstract\
    \ Data Type: unsigned32\n   Data Type Semantics: identifier\n   ElementId: 128\n\
    \   Status: current\n   Reference:\n      See RFC 4271 for a description of BGP-4,\
    \ and see RFC 1930 for the\n      definition of the AS number.\n"
- title: 5.7.7.  bgpPrevAdjacentAsNumber
  contents:
  - "5.7.7.  bgpPrevAdjacentAsNumber\n   Description:\n      The autonomous system\
    \ (AS) number of the last AS in the AS path\n      from the source IP address.\
    \  The path is deduced by looking up the\n      source IP address of the Flow\
    \ in the BGP routing information base.\n      If AS path information for this\
    \ Flow is only available as an\n      unordered AS set (and not as an ordered\
    \ AS sequence), then the\n      value of this Information Element is 0.  In case\
    \ of BGP asymmetry,\n      the bgpPrevAdjacentAsNumber might not be able to report\
    \ the\n      correct value.\n   Abstract Data Type: unsigned32\n   Data Type Semantics:\
    \ identifier\n   ElementId: 129\n   Status: current\n   Reference:\n      See\
    \ RFC 4271 for a description of BGP-4, and see RFC 1930 for the\n      definition\
    \ of the AS number.\n"
- title: 5.7.8.  bgpNextHopIPv4Address
  contents:
  - "5.7.8.  bgpNextHopIPv4Address\n   Description:\n      The IPv4 address of the\
    \ next (adjacent) BGP hop.\n   Abstract Data Type: ipv4Address\n   Data Type Semantics:\
    \ identifier\n   ElementId: 18\n   Status: current\n   Reference:\n      See RFC\
    \ 4271 for a description of BGP-4.\n"
- title: 5.7.9.  bgpNextHopIPv6Address
  contents:
  - "5.7.9.  bgpNextHopIPv6Address\n   Description:\n      The IPv6 address of the\
    \ next (adjacent) BGP hop.\n   Abstract Data Type: ipv6Address\n   Data Type Semantics:\
    \ identifier\n   ElementId: 63\n   Status: current\n   Reference:\n      See RFC\
    \ 4271 for a description of BGP-4.\n"
- title: 5.7.10.  mplsTopLabelType
  contents:
  - "5.7.10.  mplsTopLabelType\n   Description:\n      This field identifies the control\
    \ protocol that\n      allocated the top-of-stack label.  Initial values for this\
    \ field\n      are listed below.  Further values may be assigned by IANA in the\n\
    \      MPLS label type registry.\n         -  0x01 TE-MIDPT: Any TE tunnel mid-point\
    \ or tail label\n         -  0x02 Pseudowire: Any PWE3 or Cisco AToM based label\n\
    \         -  0x03 VPN: Any label associated with VPN\n         -  0x04 BGP: Any\
    \ label associated with BGP or BGP routing\n         -  0x05 LDP: Any label associated\
    \ with dynamically assigned\n            labels using LDP\n   Abstract Data Type:\
    \ unsigned8\n   Data Type Semantics: identifier\n   ElementId: 46\n   Status:\
    \ current\n   Reference:\n      See RFC 3031 for the MPLS label structure.  See\
    \ RFC 4364 for the\n      association of MPLS labels with Virtual Private Networks\
    \ (VPNs).\n      See RFC 4271 for BGP and BGP routing.  See RFC 5036 for Label\n\
    \      Distribution Protocol (LDP).  See the list of MPLS label types\n      assigned\
    \ by IANA at\n      http://www.iana.org/assignments/mpls-label-values.\n"
- title: 5.7.11.  mplsTopLabelIPv4Address
  contents:
  - "5.7.11.  mplsTopLabelIPv4Address\n   Description:\n      The IPv4 address of\
    \ the system that the MPLS top label will cause\n      this Flow to be forwarded\
    \ to.\n   Abstract Data Type: ipv4Address\n   Data Type Semantics: identifier\n\
    \   ElementId: 47\n   Status: current\n   Reference:\n      See RFC 3031 for the\
    \ association between MPLS labels and IP\n      addresses.\n"
- title: 5.7.12.  mplsTopLabelIPv6Address
  contents:
  - "5.7.12.  mplsTopLabelIPv6Address\n   Description:\n      The IPv6 address of\
    \ the system that the MPLS top label will cause\n      this Flow to be forwarded\
    \ to.\n   Abstract Data Type: ipv6Address\n   Data Type Semantics: identifier\n\
    \   ElementId: 140\n   Status: current\n   Reference:\n      See RFC 3031 for\
    \ the association between MPLS labels and IP\n      addresses.\n"
- title: 5.7.13.  mplsVpnRouteDistinguisher
  contents:
  - "5.7.13.  mplsVpnRouteDistinguisher\n   Description:\n      The value of the VPN\
    \ route distinguisher of a corresponding entry\n      in a VPN routing and forwarding\
    \ table.  Route distinguisher\n      ensures that the same address can be used\
    \ in several different\n      MPLS VPNs and that it is possible for BGP to carry\
    \ several\n      completely different routes to that address, one for each VPN.\n\
    \      According to RFC 4364, the size of mplsVpnRouteDistinguisher is 8\n   \
    \   octets.  However, in RFC 4382 an octet string with flexible length\n     \
    \ was chosen for representing a VPN route distinguisher by object\n      MplsL3VpnRouteDistinguisher.\
    \  This choice was made in order to be\n      open to future changes of the size.\
    \  This idea was adopted when\n      choosing octetArray as abstract data type\
    \ for this Information\n      Element.  The maximum length of this Information\
    \ Element is 256\n      octets.\n   Abstract Data Type: octetArray\n   Data Type\
    \ Semantics: identifier\n   ElementId: 90\n   Status: current\n   Reference:\n\
    \      See RFC 4364 for the specification of the route distinguisher.\n      See\
    \ RFC 4382 for the specification of the MPLS/BGP Layer 3 Virtual\n      Private\
    \ Network (VPN) Management Information Base.\n"
- title: 5.8.  Min/Max Flow Properties
  contents:
  - "5.8.  Min/Max Flow Properties\n   Information Elements in this section are results\
    \ of minimum or\n   maximum operations over all packets of a Flow.\n   +-----+---------------------------+-----+---------------------------+\n\
    \   |  ID | Name                      |  ID | Name                      |\n  \
    \ +-----+---------------------------+-----+---------------------------+\n   |\
    \  25 | minimumIpTotalLength      | 208 | ipv4Options               |\n   |  26\
    \ | maximumIpTotalLength      |  64 | ipv6ExtensionHeaders      |\n   |  52 |\
    \ minimumTTL                |   6 | tcpControlBits            |\n   |  53 | maximumTTL\
    \                | 209 | tcpOptions                |\n   +-----+---------------------------+-----+---------------------------+\n"
- title: 5.8.1.  minimumIpTotalLength
  contents:
  - "5.8.1.  minimumIpTotalLength\n   Description:\n      Length of the smallest packet\
    \ observed for this Flow.  The packet\n      length includes the IP header(s)\
    \ length and the IP payload length.\n   Abstract Data Type: unsigned64\n   ElementId:\
    \ 25\n   Status: current\n   Units: octets\n   Reference:\n      See RFC 791 for\
    \ the specification of the IPv4 total length.  See\n      RFC 2460 for the specification\
    \ of the IPv6 payload length.  See\n      RFC 2675 for the specification of the\
    \ IPv6 jumbo payload length.\n"
- title: 5.8.2.  maximumIpTotalLength
  contents:
  - "5.8.2.  maximumIpTotalLength\n   Description:\n      Length of the largest packet\
    \ observed for this Flow.  The packet\n      length includes the IP header(s)\
    \ length and the IP payload length.\n   Abstract Data Type: unsigned64\n   ElementId:\
    \ 26\n   Status: current\n   Units: octets\n   Reference:\n      See RFC 791 for\
    \ the specification of the IPv4 total length.  See\n      RFC 2460 for the specification\
    \ of the IPv6 payload length.  See\n      RFC 2675 for the specification of the\
    \ IPv6 jumbo payload length.\n"
- title: 5.8.3.  minimumTTL
  contents:
  - "5.8.3.  minimumTTL\n   Description:\n      Minimum TTL value observed for any\
    \ packet in this Flow.\n   Abstract Data Type: unsigned8\n   ElementId: 52\n \
    \  Status: current\n   Units: hops\n   Reference:\n      See RFC 791 for the definition\
    \ of the IPv4 Time to Live field.\n      See RFC 2460 for the definition of the\
    \ IPv6 Hop Limit field.\n"
- title: 5.8.4.  maximumTTL
  contents:
  - "5.8.4.  maximumTTL\n   Description:\n      Maximum TTL value observed for any\
    \ packet in this Flow.\n   Abstract Data Type: unsigned8\n   ElementId: 53\n \
    \  Status: current\n   Units: hops\n   Reference:\n      See RFC 791 for the definition\
    \ of the IPv4 Time to Live field.\n      See RFC 2460 for the definition of the\
    \ IPv6 Hop Limit field.\n"
- title: 5.8.5.  ipv4Options
  contents:
  - "5.8.5.  ipv4Options\n   Description:\n      IPv4 options in packets of this Flow.\
    \  The information is encoded\n      in a set of bit fields.  For each valid IPv4\
    \ option type, there is\n      a bit in this set.  The bit is set to 1 if any\
    \ observed packet of\n      this Flow contains the corresponding IPv4 option type.\
    \  Otherwise,\n      if no observed packet of this Flow contained the respective\
    \ IPv4\n      option type, the value of the corresponding bit is 0.  The list\
    \ of\n      valid IPv4 options is maintained by IANA.  Note that for\n      identifying\
    \ an option not just the 5-bit Option Number, but all 8\n      bits of the Option\
    \ Type need to match one of the IPv4 options\n      specified at http://www.iana.org/assignments/ip-parameters.\n\
    \      Options are mapped to bits according to their option numbers.\n      Option\
    \ number X is mapped to bit X.  The mapping is illustrated by\n      the figure\
    \ below.\n           0      1      2      3      4      5      6      7\n    \
    \   +------+------+------+------+------+------+------+------+\n       | EOOL |\
    \ NOP  | SEC  | LSR  |  TS  |E-SEC |CIPSO |  RR  | ...\n       +------+------+------+------+------+------+------+------+\n\
    \           8      9     10     11     12     13     14     15\n       +------+------+------+------+------+------+------+------+\n\
    \   ... | SID  | SSR  | ZSU  | MTUP | MTUR | FINN | VISA |ENCODE| ...\n      \
    \ +------+------+------+------+------+------+------+------+\n          16    \
    \ 17     18     19     20     21     22     23\n       +------+------+------+------+------+------+------+------+\n\
    \   ... |IMITD | EIP  |  TR  |ADDEXT|RTRALT| SDB  |NSAPA | DPS  | ...\n      \
    \ +------+------+------+------+------+------+------+------+\n          24    \
    \ 25     26     27     28     29     30     31\n       +------+------+------+------+------+------+------+------+\n\
    \   ... | UMP  |  QS  |   to be assigned by IANA  |  EXP |      |\n       +------+------+------+------+------+------+------+------+\n\
    \          Type   Option\n      Bit Value  Name    Reference\n      ---+-----+-------+------------------------------------\n\
    \       0     0   EOOL    End of Options List, RFC 791\n       1     1   NOP \
    \    No Operation, RFC 791\n       2   130   SEC     Security, RFC 1108\n    \
    \   3   131   LSR     Loose Source Route, RFC 791\n       4    68   TS      Time\
    \ Stamp, RFC 791\n       5   133   E-SEC   Extended Security, RFC 1108\n     \
    \  6   134   CIPSO   Commercial Security\n       7     7   RR      Record Route,\
    \ RFC 791\n       8   136   SID     Stream ID, RFC 791\n       9   137   SSR \
    \    Strict Source Route, RFC 791\n      10    10   ZSU     Experimental Measurement\n\
    \      11    11   MTUP    (obsoleted) MTU Probe, RFC 1191\n      12    12   MTUR\
    \    (obsoleted) MTU Reply, RFC 1191\n      13   205   FINN    Experimental Flow\
    \ Control\n      14   142   VISA    Experimental Access Control\n      15    15\
    \   ENCODE\n      16   144   IMITD   IMI Traffic Descriptor\n      17   145  \
    \ EIP     Extended Internet Protocol, RFC 1385\n      18    82   TR      Traceroute,\
    \ RFC 3193\n      19   147   ADDEXT  Address Extension\n      20   148   RTRALT\
    \  Router Alert, RFC 2113\n      21   149   SDB     Selective Directed Broadcast\n\
    \      22   150   NSAPA   NSAP Address\n      23   151   DPS     Dynamic Packet\
    \ State\n      24   152   UMP     Upstream Multicast Pkt.\n      25    25   QS\
    \      Quick-Start\n      30    30   EXP     RFC3692-style Experiment\n      30\
    \    94   EXP     RFC3692-style Experiment\n      30   158   EXP     RFC3692-style\
    \ Experiment\n      30   222   EXP     RFC3692-style Experiment\n      ...  ...\
    \   ...     Further options numbers\n                         may be assigned\
    \ by IANA\n   Abstract Data Type: unsigned32\n   Data Type Semantics: flags\n\
    \   ElementId: 208\n   Status: current\n   Reference:\n      See RFC 791 for the\
    \ definition of IPv4 options.  See the list of\n      IPv4 option numbers assigned\
    \ by IANA at\n      http://www.iana.org/assignments/ip-parameters.\n"
- title: 5.8.6.  ipv6ExtensionHeaders
  contents:
  - "5.8.6.  ipv6ExtensionHeaders\n   Description:\n      IPv6 extension headers observed\
    \ in packets of this Flow.  The\n      information is encoded in a set of bit\
    \ fields.  For each IPv6\n      option header, there is a bit in this set.  The\
    \ bit is set to 1 if\n      any observed packet of this Flow contains the corresponding\
    \ IPv6\n      extension header.  Otherwise, if no observed packet of this Flow\n\
    \      contained the respective IPv6 extension header, the value of the\n    \
    \  corresponding bit is 0.\n              0     1     2     3     4     5    \
    \ 6     7\n          +-----+-----+-----+-----+-----+-----+-----+-----+\n     \
    \     | Res | FRA1| RH  | FRA0| UNK | Res | HOP | DST |  ...\n          +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \              8     9    10    11    12    13    14    15\n          +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \      ... | PAY | AH  | ESP |         Reserved            | ...\n          +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \             16    17    18    19    20    21    22    23\n          +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \      ... |                  Reserved                     | ...\n          +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \             24    25    26    27    28    29    30    31\n          +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \      ... |                  Reserved                     |\n          +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \        Bit    IPv6 Option   Description\n       0, Res               Reserved\n\
    \       1, FRA1     44       Fragmentation header - not first fragment\n     \
    \  2, RH       43       Routing header\n       3, FRA0     44       Fragment header\
    \ - first fragment\n       4, UNK               Unknown Layer 4 header\n     \
    \                       (compressed, encrypted, not supported)\n       5, Res\
    \               Reserved\n       6, HOP       0       Hop-by-hop option header\n\
    \       7, DST      60       Destination option header\n       8, PAY     108\
    \       Payload compression header\n       9, AH       51       Authentication\
    \ Header\n      10, ESP      50       Encrypted security payload\n      11 to\
    \ 31              Reserved\n   Abstract Data Type: unsigned32\n   Data Type Semantics:\
    \ flags\n   ElementId: 64\n   Status: current\n   Reference:\n      See RFC 2460\
    \ for the general definition of IPv6 extension headers\n      and for the specification\
    \ of the hop-by-hop options header, the\n      routing header, the fragment header,\
    \ and the destination options\n      header.  See RFC 4302 for the specification\
    \ of the authentication\n      header.  See RFC 4303 for the specification of\
    \ the encapsulating\n      security payload.\n"
- title: 5.8.7.  tcpControlBits
  contents:
  - "5.8.7.  tcpControlBits\n   Description:\n      TCP control bits observed for\
    \ packets of this Flow.  The\n      information is encoded in a set of bit fields.\
    \  For each TCP\n      control bit, there is a bit in this set.  A bit is set\
    \ to 1 if any\n      observed packet of this Flow has the corresponding TCP control\
    \ bit\n      set to 1.  A value of 0 for a bit indicates that the corresponding\n\
    \      bit was not set in any of the observed packets of this Flow.\n        \
    \  0     1     2     3     4     5     6     7\n      +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \      |  Reserved | URG | ACK | PSH | RST | SYN | FIN |\n      +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \      Reserved:  Reserved for future use by TCP.  Must be zero.\n           URG:\
    \  Urgent Pointer field significant\n           ACK:  Acknowledgment field significant\n\
    \           PSH:  Push Function\n           RST:  Reset the connection\n     \
    \      SYN:  Synchronize sequence numbers\n           FIN:  No more data from\
    \ sender\n   Abstract Data Type: unsigned8\n   Data Type Semantics: flags\n  \
    \ ElementId: 6\n   Status: current\n   Reference:\n      See RFC 793 for the definition\
    \ of the TCP control bits in the TCP\n      header.\n"
- title: 5.8.8.  tcpOptions
  contents:
  - "5.8.8.  tcpOptions\n   Description:\n      TCP options in packets of this Flow.\
    \  The information is encoded\n      in a set of bit fields.  For each TCP option,\
    \ there is a bit in\n      this set.  The bit is set to 1 if any observed packet\
    \ of this Flow\n      contains the corresponding TCP option.  Otherwise, if no\
    \ observed\n      packet of this Flow contained the respective TCP option, the\
    \ value\n      of the corresponding bit is 0.\n      Options are mapped to bits\
    \ according to their option numbers.\n      Option number X is mapped to bit X.\
    \  TCP option numbers are\n      maintained by IANA.\n              0     1  \
    \   2     3     4     5     6     7\n          +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \          |   0 |   1 |   2 |   3 |   4 |   5 |   6 |   7 |  ...\n          +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \              8     9    10    11    12    13    14    15\n          +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \      ... |   8 |   9 |  10 |  11 |  12 |  13 |  14 |  15 |...\n          +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \             16    17    18    19    20    21    22    23\n          +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \      ... |  16 |  17 |  18 |  19 |  20 |  21 |  22 |  23 |...\n          +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \                                . . .\n             56    57    58    59    60\
    \    61    62    63\n          +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \      ... |  56 |  57 |  58 |  59 |  60 |  61 |  62 |  63 |\n          +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \   Abstract Data Type: unsigned64\n   Data Type Semantics: flags\n   ElementId:\
    \ 209\n   Status: current\n   Reference:\n      See RFC 793 for the definition\
    \ of TCP options.  See the list of\n      TCP option numbers assigned by IANA\
    \ at\n      http://www.iana.org/assignments/tcp-parameters.\n"
- title: 5.9.  Flow Timestamps
  contents:
  - "5.9.  Flow Timestamps\n   Information Elements in this section are timestamps\
    \ of events.\n   Timestamps flowStartSeconds, flowEndSeconds, flowStartMilliseconds,\n\
    \   flowEndMilliseconds, flowStartMicroseconds, flowEndMicroseconds,\n   flowStartNanoseconds,\
    \ flowEndNanoseconds, and\n   systemInitTimeMilliseconds are absolute and have\
    \ a well-defined fixed\n   time base, such as, for example, the number of seconds\
    \ since 0000 UTC\n   Jan 1st 1970.\n   Timestamps flowStartDeltaMicroseconds and\
    \ flowEndDeltaMicroseconds\n   are relative timestamps only valid within the scope\
    \ of a single IPFIX\n   Message.  They contain the negative time offsets relative\
    \ to the\n   export time specified in the IPFIX Message Header.  The maximum time\n\
    \   offset that can be encoded by these delta counters is 1 hour, 11\n   minutes,\
    \ and 34.967295 seconds.\n   Timestamps flowStartSysUpTime and flowEndSysUpTime\
    \ are relative\n   timestamps indicating the time relative to the last (re-\n\
    \   )initialization of the IPFIX Device.  For reporting the time of the\n   last\
    \ (re-)initialization, systemInitTimeMilliseconds can be reported,\n   for example,\
    \ in Data Records defined by Option Templates.\n   +-----+---------------------------+-----+---------------------------+\n\
    \   |  ID | Name                      |  ID | Name                      |\n  \
    \ +-----+---------------------------+-----+---------------------------+\n   |\
    \ 150 | flowStartSeconds          | 156 | flowStartNanoseconds      |\n   | 151\
    \ | flowEndSeconds            | 157 | flowEndNanoseconds        |\n   | 152 |\
    \ flowStartMilliseconds     | 158 | flowStartDeltaMicroseconds|\n   | 153 | flowEndMilliseconds\
    \       | 159 | flowEndDeltaMicroseconds  |\n   | 154 | flowStartMicroseconds\
    \     | 160 | systemInitTimeMilliseconds|\n   | 155 | flowEndMicroseconds    \
    \   |  22 | flowStartSysUpTime        |\n   |     |                          \
    \ |  21 | flowEndSysUpTime          |\n   +-----+---------------------------+-----+---------------------------+\n"
- title: 5.9.1.  flowStartSeconds
  contents:
  - "5.9.1.  flowStartSeconds\n   Description:\n      The absolute timestamp of the\
    \ first packet of this Flow.\n   Abstract Data Type: dateTimeSeconds\n   ElementId:\
    \ 150\n   Status: current\n   Units: seconds\n"
- title: 5.9.2.  flowEndSeconds
  contents:
  - "5.9.2.  flowEndSeconds\n   Description:\n      The absolute timestamp of the\
    \ last packet of this Flow.\n   Abstract Data Type: dateTimeSeconds\n   ElementId:\
    \ 151\n   Status: current\n   Units: seconds\n"
- title: 5.9.3.  flowStartMilliseconds
  contents:
  - "5.9.3.  flowStartMilliseconds\n   Description:\n      The absolute timestamp\
    \ of the first packet of this Flow.\n   Abstract Data Type: dateTimeMilliseconds\n\
    \   ElementId: 152\n   Status: current\n   Units: milliseconds\n"
- title: 5.9.4.  flowEndMilliseconds
  contents:
  - "5.9.4.  flowEndMilliseconds\n   Description:\n      The absolute timestamp of\
    \ the last packet of this Flow.\n   Abstract Data Type: dateTimeMilliseconds\n\
    \   ElementId: 153\n   Status: current\n   Units: milliseconds\n"
- title: 5.9.5.  flowStartMicroseconds
  contents:
  - "5.9.5.  flowStartMicroseconds\n   Description:\n      The absolute timestamp\
    \ of the first packet of this Flow.\n   Abstract Data Type: dateTimeMicroseconds\n\
    \   ElementId: 154\n   Status: current\n   Units: microseconds\n"
- title: 5.9.6.  flowEndMicroseconds
  contents:
  - "5.9.6.  flowEndMicroseconds\n   Description:\n      The absolute timestamp of\
    \ the last packet of this Flow.\n   Abstract Data Type: dateTimeMicroseconds\n\
    \   ElementId: 155\n   Status: current\n   Units: microseconds\n"
- title: 5.9.7.  flowStartNanoseconds
  contents:
  - "5.9.7.  flowStartNanoseconds\n   Description:\n      The absolute timestamp of\
    \ the first packet of this Flow.\n   Abstract Data Type: dateTimeNanoseconds\n\
    \   ElementId: 156\n   Status: current\n   Units: nanoseconds\n"
- title: 5.9.8.  flowEndNanoseconds
  contents:
  - "5.9.8.  flowEndNanoseconds\n   Description:\n      The absolute timestamp of\
    \ the last packet of this Flow.\n   Abstract Data Type: dateTimeNanoseconds\n\
    \   ElementId: 157\n   Status: current\n   Units: nanoseconds\n"
- title: 5.9.9.  flowStartDeltaMicroseconds
  contents:
  - "5.9.9.  flowStartDeltaMicroseconds\n   Description:\n      This is a relative\
    \ timestamp only valid within the scope of a\n      single IPFIX Message.  It\
    \ contains the negative time offset of the\n      first observed packet of this\
    \ Flow relative to the export time\n      specified in the IPFIX Message Header.\n\
    \   Abstract Data Type: unsigned32\n   ElementId: 158\n   Status: current\n  \
    \ Units: microseconds\n   Reference:\n      See the IPFIX protocol specification\
    \ [RFC5101] for the definition\n      of the IPFIX Message Header.\n"
- title: 5.9.10.  flowEndDeltaMicroseconds
  contents:
  - "5.9.10.  flowEndDeltaMicroseconds\n   Description:\n      This is a relative\
    \ timestamp only valid within the scope of a\n      single IPFIX Message.  It\
    \ contains the negative time offset of the\n      last observed packet of this\
    \ Flow relative to the export time\n      specified in the IPFIX Message Header.\n\
    \   Abstract Data Type: unsigned32\n   ElementId: 159\n   Status: current\n  \
    \ Units: microseconds\n   Reference:\n      See the IPFIX protocol specification\
    \ [RFC5101] for the\n      definition of the IPFIX Message Header.\n"
- title: 5.9.11.  systemInitTimeMilliseconds
  contents:
  - "5.9.11.  systemInitTimeMilliseconds\n   Description:\n      The absolute timestamp\
    \ of the last (re-)initialization of the\n      IPFIX Device.\n   Abstract Data\
    \ Type: dateTimeMilliseconds\n   ElementId: 160\n   Status: current\n   Units:\
    \ milliseconds\n"
- title: 5.9.12.  flowStartSysUpTime
  contents:
  - "5.9.12.  flowStartSysUpTime\n   Description:\n      The relative timestamp of\
    \ the first packet of this Flow.  It\n      indicates the number of milliseconds\
    \ since the last\n      (re-)initialization of the IPFIX Device (sysUpTime).\n\
    \   Abstract Data Type: unsigned32\n   ElementId: 22\n   Status: current\n   Units:\
    \ milliseconds\n"
- title: 5.9.13.  flowEndSysUpTime
  contents:
  - "5.9.13.  flowEndSysUpTime\n   Description:\n      The relative timestamp of the\
    \ last packet of this Flow.  It\n      indicates the number of milliseconds since\
    \ the last\n      (re-)initialization of the IPFIX Device (sysUpTime).\n   Abstract\
    \ Data Type: unsigned32\n   ElementId: 21\n   Status: current\n   Units: milliseconds\n"
- title: 5.10.  Per-Flow Counters
  contents:
  - "5.10.  Per-Flow Counters\n   Information Elements in this section are counters\
    \ all having integer\n   values.  Their values may change for every report they\
    \ are used in.\n   They cannot serve as part of a Flow Key used for mapping packets\
    \ to\n   Flows.  However, potentially they can be used for selecting exported\n\
    \   Flows, for example, by only exporting Flows with more than a\n   threshold\
    \ number of observed octets.\n   There are running counters and delta counters.\
    \  Delta counters are\n   reset to zero each time their values are exported. \
    \ Running counters\n   continue counting independently of the Exporting Process.\n\
    \   There are per-Flow counters and counters related to the Metering\n   Process\
    \ and/or the Exporting Process.  Per-Flow counters are Flow\n   properties that\
    \ potentially change each time a packet belonging to\n   the Flow is observed.\
    \  The set of per-Flow counters includes the\n   Information Elements listed in\
    \ the table below.  Counters related to\n   the Metering Process and/or the Exporting\
    \ Process are described in\n   Section 5.3.\n   +-----+---------------------------+-----+---------------------------+\n\
    \   |  ID | Name                      |  ID | Name                      |\n  \
    \ +-----+---------------------------+-----+---------------------------+\n   |\
    \   1 | octetDeltaCount           | 134 | droppedOctetTotalCount    |\n   |  23\
    \ | postOctetDeltaCount       | 135 | droppedPacketTotalCount   |\n   | 198 |\
    \ octetDeltaSumOfSquares    |  19 | postMCastPacketDeltaCount |\n   |  85 | octetTotalCount\
    \           |  20 | postMCastOctetDeltaCount  |\n   | 171 | postOctetTotalCount\
    \       | 174 | postMCastPacketTotalCount |\n   | 199 | octetTotalSumOfSquares\
    \    | 175 | postMCastOctetTotalCount  |\n   |   2 | packetDeltaCount        \
    \  | 218 | tcpSynTotalCount          |\n   |  24 | postPacketDeltaCount      |\
    \ 219 | tcpFinTotalCount          |\n   |  86 | packetTotalCount          | 220\
    \ | tcpRstTotalCount          |\n   | 172 | postPacketTotalCount      | 221 |\
    \ tcpPshTotalCount          |\n   | 132 | droppedOctetDeltaCount    | 222 | tcpAckTotalCount\
    \          |\n   | 133 | droppedPacketDeltaCount   | 223 | tcpUrgTotalCount  \
    \        |\n   +-----+---------------------------+-----+---------------------------+\n"
- title: 5.10.1.  octetDeltaCount
  contents:
  - "5.10.1.  octetDeltaCount\n   Description:\n      The number of octets since the\
    \ previous report (if any) in\n      incoming packets for this Flow at the Observation\
    \ Point.  The\n      number of octets includes IP header(s) and IP payload.\n\
    \   Abstract Data Type: unsigned64\n   Data Type Semantics: deltaCounter\n   ElementId:\
    \ 1\n   Status: current\n   Units: octets\n"
- title: 5.10.2.  postOctetDeltaCount
  contents:
  - "5.10.2.  postOctetDeltaCount\n   Description:\n      The definition of this Information\
    \ Element is identical to the\n      definition of Information Element 'octetDeltaCount',\
    \ except that\n      it reports a potentially modified value caused by a middlebox\n\
    \      function after the packet passed the Observation Point.\n   Abstract Data\
    \ Type: unsigned64\n   Data Type Semantics: deltaCounter\n   ElementId: 23\n \
    \  Status: current\n   Units: octets\n"
- title: 5.10.3.  octetDeltaSumOfSquares
  contents:
  - "5.10.3.  octetDeltaSumOfSquares\n   Description:\n      The sum of the squared\
    \ numbers of octets per incoming packet since\n      the previous report (if any)\
    \ for this Flow at the Observation\n      Point.  The number of octets includes\
    \ IP header(s) and IP payload.\n   Abstract Data Type: unsigned64\n   ElementId:\
    \ 198\n   Status: current\n"
- title: 5.10.4.  octetTotalCount
  contents:
  - "5.10.4.  octetTotalCount\n   Description:\n      The total number of octets in\
    \ incoming packets for this Flow at\n      the Observation Point since the Metering\
    \ Process\n      (re-)initialization for this Observation Point.  The number\n\
    \      of octets includes IP header(s) and IP payload.\n   Abstract Data Type:\
    \ unsigned64\n   Data Type Semantics: totalCounter\n   ElementId: 85\n   Status:\
    \ current\n   Units: octets\n"
- title: 5.10.5.  postOctetTotalCount
  contents:
  - "5.10.5.  postOctetTotalCount\n   Description:\n      The definition of this Information\
    \ Element is identical to the\n      definition of Information Element 'octetTotalCount',\
    \ except that\n      it reports a potentially modified value caused by a middlebox\n\
    \      function after the packet passed the Observation Point.\n   Abstract Data\
    \ Type: unsigned64\n   Data Type Semantics: totalCounter\n   ElementId: 171\n\
    \   Status: current\n   Units: octets\n"
- title: 5.10.6.  octetTotalSumOfSquares
  contents:
  - "5.10.6.  octetTotalSumOfSquares\n   Description:\n      The total sum of the\
    \ squared numbers of octets in incoming packets\n      for this Flow at the Observation\
    \ Point since the Metering Process\n      (re-)initialization for this Observation\
    \ Point.  The number of\n      octets includes IP header(s) and IP payload.\n\
    \   Abstract Data Type: unsigned64\n   ElementId: 199\n   Status: current\n  \
    \ Units: octets\n"
- title: 5.10.7.  packetDeltaCount
  contents:
  - "5.10.7.  packetDeltaCount\n   Description:\n      The number of incoming packets\
    \ since the previous report (if any)\n      for this Flow at the Observation Point.\n\
    \   Abstract Data Type: unsigned64\n   Data Type Semantics: deltaCounter\n   ElementId:\
    \ 2\n   Status: current\n   Units: packets\n"
- title: 5.10.8.  postPacketDeltaCount
  contents:
  - "5.10.8.  postPacketDeltaCount\n   Description:\n      The definition of this\
    \ Information Element is identical to the\n      definition of Information Element\
    \ 'packetDeltaCount', except that\n      it reports a potentially modified value\
    \ caused by a middlebox\n      function after the packet passed the Observation\
    \ Point.\n   Abstract Data Type: unsigned64\n   Data Type Semantics: deltaCounter\n\
    \   ElementId: 24\n   Status: current\n   Units: packets\n"
- title: 5.10.9.  packetTotalCount
  contents:
  - "5.10.9.  packetTotalCount\n   Description:\n      The total number of incoming\
    \ packets for this Flow at the\n      Observation Point since the Metering Process\
    \ (re-)initialization\n      for this Observation Point.\n   Abstract Data Type:\
    \ unsigned64\n   Data Type Semantics: totalCounter\n   ElementId: 86\n   Status:\
    \ current\n   Units: packets\n"
- title: 5.10.10.  postPacketTotalCount
  contents:
  - "5.10.10.  postPacketTotalCount\n   Description:\n      The definition of this\
    \ Information Element is identical to the\n      definition of Information Element\
    \ 'packetTotalCount', except that\n      it reports a potentially modified value\
    \ caused by a middlebox\n      function after the packet passed the Observation\
    \ Point.\n   Abstract Data Type: unsigned64\n   Data Type Semantics: totalCounter\n\
    \   ElementId: 172\n   Status: current\n   Units: packets\n"
- title: 5.10.11.  droppedOctetDeltaCount
  contents:
  - "5.10.11.  droppedOctetDeltaCount\n   Description:\n      The number of octets\
    \ since the previous report (if any) in packets\n      of this Flow dropped by\
    \ packet treatment.  The number of octets\n      includes IP header(s) and IP\
    \ payload.\n   Abstract Data Type: unsigned64\n   Data Type Semantics: deltaCounter\n\
    \   ElementId: 132\n   Status: current\n   Units: octets\n"
- title: 5.10.12.  droppedPacketDeltaCount
  contents:
  - "5.10.12.  droppedPacketDeltaCount\n   Description:\n      The number of packets\
    \ since the previous report (if any) of this\n      Flow dropped by packet treatment.\n\
    \   Abstract Data Type: unsigned64\n   Data Type Semantics: deltaCounter\n   ElementId:\
    \ 133\n   Status: current\n   Units: packets\n"
- title: 5.10.13.  droppedOctetTotalCount
  contents:
  - "5.10.13.  droppedOctetTotalCount\n   Description:\n      The total number of\
    \ octets in packets of this Flow dropped by\n      packet treatment since the\
    \ Metering Process (re-)initialization\n      for this Observation Point.  The\
    \ number of octets includes IP\n      header(s) and IP payload.\n   Abstract Data\
    \ Type: unsigned64\n   Data Type Semantics: totalCounter\n   ElementId: 134\n\
    \   Status: current\n   Units: octets\n"
- title: 5.10.14.  droppedPacketTotalCount
  contents:
  - "5.10.14.  droppedPacketTotalCount\n   Description:\n      The number of packets\
    \ of this Flow dropped by packet treatment\n      since the Metering Process (re-)initialization\
    \ for this\n      Observation Point.\n   Abstract Data Type: unsigned64\n   Data\
    \ Type Semantics: totalCounter\n   ElementId: 135\n   Status: current\n   Units:\
    \ packets\n"
- title: 5.10.15.  postMCastPacketDeltaCount
  contents:
  - "5.10.15.  postMCastPacketDeltaCount\n   Description:\n      The number of outgoing\
    \ multicast packets since the previous report\n      (if any) sent for packets\
    \ of this Flow by a multicast daemon\n      within the Observation Domain.  This\
    \ property cannot necessarily\n      be observed at the Observation Point, but\
    \ may be retrieved by\n      other means.\n   Abstract Data Type: unsigned64\n\
    \   Data Type Semantics: deltaCounter\n   ElementId: 19\n   Status: current\n\
    \   Units: packets\n"
- title: 5.10.16.  postMCastOctetDeltaCount
  contents:
  - "5.10.16.  postMCastOctetDeltaCount\n   Description:\n      The number of octets\
    \ since the previous report (if any) in\n      outgoing multicast packets sent\
    \ for packets of this Flow by a\n      multicast daemon within the Observation\
    \ Domain.  This property\n      cannot necessarily be observed at the Observation\
    \ Point, but may\n      be retrieved by other means.  The number of octets includes\
    \ IP\n      header(s) and IP payload.\n   Abstract Data Type: unsigned64\n   Data\
    \ Type Semantics: deltaCounter\n   ElementId: 20\n   Status: current\n   Units:\
    \ octets\n"
- title: 5.10.17.  postMCastPacketTotalCount
  contents:
  - "5.10.17.  postMCastPacketTotalCount\n   Description:\n      The total number\
    \ of outgoing multicast packets sent for packets of\n      this Flow by a multicast\
    \ daemon within the Observation Domain\n      since the Metering Process (re-)initialization.\
    \  This property\n      cannot necessarily be observed at the Observation Point,\
    \ but may\n      be retrieved by other means.\n   Abstract Data Type: unsigned64\n\
    \   Data Type Semantics: totalCounter\n   ElementId: 174\n   Status: current\n\
    \   Units: packets\n"
- title: 5.10.18.  postMCastOctetTotalCount
  contents:
  - "5.10.18.  postMCastOctetTotalCount\n   Description:\n      The total number of\
    \ octets in outgoing multicast packets sent for\n      packets of this Flow by\
    \ a multicast daemon in the Observation\n      Domain since the Metering Process\
    \ (re-)initialization.  This\n      property cannot necessarily be observed at\
    \ the Observation Point,\n      but may be retrieved by other means.  The number\
    \ of octets\n      includes IP header(s) and IP payload.\n   Abstract Data Type:\
    \ unsigned64\n   Data Type Semantics: totalCounter\n   ElementId: 175\n   Status:\
    \ current\n   Units: octets\n"
- title: 5.10.19.  tcpSynTotalCount
  contents:
  - "5.10.19.  tcpSynTotalCount\n   Description:\n      The total number of packets\
    \ of this Flow with TCP \"Synchronize\n      sequence numbers\" (SYN) flag set.\n\
    \   Abstract Data Type: unsigned64\n   Data Type Semantics: totalCounter\n   ElementId:\
    \ 218\n   Status: current\n   Units: packets\n   Reference:\n      See RFC 793\
    \ for the definition of the TCP SYN flag.\n"
- title: 5.10.20.  tcpFinTotalCount
  contents:
  - "5.10.20.  tcpFinTotalCount\n   Description:\n      The total number of packets\
    \ of this Flow with TCP \"No more data\n      from sender\" (FIN) flag set.\n\
    \   Abstract Data Type: unsigned64\n   Data Type Semantics: totalCounter\n   ElementId:\
    \ 219\n   Status: current\n   Units: packets\n   Reference:\n      See RFC 793\
    \ for the definition of the TCP FIN flag.\n"
- title: 5.10.21.  tcpRstTotalCount
  contents:
  - "5.10.21.  tcpRstTotalCount\n   Description:\n      The total number of packets\
    \ of this Flow with TCP \"Reset the\n      connection\" (RST) flag set.\n   Abstract\
    \ Data Type: unsigned64\n   Data Type Semantics: totalCounter\n   ElementId: 220\n\
    \   Status: current\n   Units: packets\n   Reference:\n      See RFC 793 for the\
    \ definition of the TCP RST flag.\n"
- title: 5.10.22.  tcpPshTotalCount
  contents:
  - "5.10.22.  tcpPshTotalCount\n   Description:\n      The total number of packets\
    \ of this Flow with TCP \"Push Function\"\n      (PSH) flag set.\n   Abstract\
    \ Data Type: unsigned64\n   Data Type Semantics: totalCounter\n   ElementId: 221\n\
    \   Status: current\n   Units: packets\n   Reference:\n      See RFC 793 for the\
    \ definition of the TCP PSH flag.\n"
- title: 5.10.23.  tcpAckTotalCount
  contents:
  - "5.10.23.  tcpAckTotalCount\n   Description:\n      The total number of packets\
    \ of this Flow with TCP \"Acknowledgment\n      field significant\" (ACK) flag\
    \ set.\n   Abstract Data Type: unsigned64\n   Data Type Semantics: totalCounter\n\
    \   ElementId: 222\n   Status: current\n   Units: packets\n   Reference:\n   \
    \   See RFC 793 for the definition of the TCP ACK flag.\n"
- title: 5.10.24.  tcpUrgTotalCount
  contents:
  - "5.10.24.  tcpUrgTotalCount\n   Description:\n      The total number of packets\
    \ of this Flow with TCP \"Urgent Pointer\n      field significant\" (URG) flag\
    \ set.\n   Abstract Data Type: unsigned64\n   Data Type Semantics: totalCounter\n\
    \   ElementId: 223\n   Status: current\n   Units: packets\n   Reference:\n   \
    \   See RFC 793 for the definition of the TCP URG flag.\n"
- title: 5.11.  Miscellaneous Flow Properties
  contents:
  - "5.11.  Miscellaneous Flow Properties\n   Information Elements in this section\
    \ describe properties of Flows\n   that are related to Flow start, Flow duration,\
    \ and Flow termination,\n   but they are not timestamps as the Information Elements\
    \ in Section\n   5.9 are.\n   +-----+---------------------------+-----+---------------------------+\n\
    \   |  ID | Name                      |  ID | Name                      |\n  \
    \ +-----+---------------------------+-----+---------------------------+\n   |\
    \  36 | flowActiveTimeout         | 161 | flowDurationMilliseconds  |\n   |  37\
    \ | flowIdleTimeout           | 162 | flowDurationMicroseconds  |\n   | 136 |\
    \ flowEndReason             |  61 | flowDirection             |\n   +-----+---------------------------+-----+---------------------------+\n"
- title: 5.11.1.  flowActiveTimeout
  contents:
  - "5.11.1.  flowActiveTimeout\n   Description:\n      The number of seconds after\
    \ which an active Flow is timed out\n      anyway, even if there is still a continuous\
    \ flow of packets.\n   Abstract Data Type: unsigned16\n   ElementId: 36\n   Status:\
    \ current\n   Units: seconds\n"
- title: 5.11.2.  flowIdleTimeout
  contents:
  - "5.11.2.  flowIdleTimeout\n   Description:\n      A Flow is considered to be timed\
    \ out if no packets belonging to\n      the Flow have been observed for the number\
    \ of seconds specified by\n      this field.\n   Abstract Data Type: unsigned16\n\
    \   ElementId: 37\n   Status: current\n   Units: seconds\n"
- title: 5.11.3.  flowEndReason
  contents:
  - "5.11.3.  flowEndReason\n   Description:\n      The reason for Flow termination.\
    \  The range of values includes the\n      following:\n      0x01: idle timeout\n\
    \            The Flow was terminated because it was considered to be\n       \
    \     idle.\n      0x02: active timeout\n            The Flow was terminated for\
    \ reporting purposes while it was\n            still active, for example, after\
    \ the maximum lifetime of\n            unreported Flows was reached.\n      0x03:\
    \ end of Flow detected\n            The Flow was terminated because the Metering\
    \ Process\n            detected signals indicating the end of the Flow, for\n\
    \            example, the TCP FIN flag.\n      0x04: forced end\n            The\
    \ Flow was terminated because of some external event, for\n            example,\
    \ a shutdown of the Metering Process initiated by a\n            network management\
    \ application.\n      0x05: lack of resources\n            The Flow was terminated\
    \ because of lack of resources\n            available to the Metering Process\
    \ and/or the Exporting\n            Process.\n   Abstract Data Type: unsigned8\n\
    \   Data Type Semantics: identifier\n   ElementId: 136\n   Status: current\n"
- title: 5.11.4.  flowDurationMilliseconds
  contents:
  - "5.11.4.  flowDurationMilliseconds\n   Description:\n      The difference in time\
    \ between the first observed packet of this\n      Flow and the last observed\
    \ packet of this Flow.\n   Abstract Data Type: unsigned32\n   ElementId: 161\n\
    \   Status: current\n   Units: milliseconds\n"
- title: 5.11.5.  flowDurationMicroseconds
  contents:
  - "5.11.5.  flowDurationMicroseconds\n   Description:\n      The difference in time\
    \ between the first observed packet of this\n      Flow and the last observed\
    \ packet of this Flow.\n   Abstract Data Type: unsigned32\n   ElementId: 162\n\
    \   Status: current\n   Units: microseconds\n"
- title: 5.11.6.  flowDirection
  contents:
  - "5.11.6.  flowDirection\n   Description:\n      The direction of the Flow observed\
    \ at the Observation Point.\n      There are only two values defined.\n      0x00:\
    \ ingress flow\n      0x01: egress flow\n   Abstract Data Type: unsigned8\n  \
    \ Data Type Semantics: identifier\n   ElementId: 61\n   Status: current\n"
- title: 5.12.  Padding
  contents:
  - "5.12.  Padding\n   This section contains a single Information Element that can\
    \ be used\n   for padding of Flow Records.\n   IPFIX implementations may wish\
    \ to align Information Elements within\n   Data Records or to align entire Data\
    \ Records to 4-octet or 8-octet\n   boundaries.  This can be achieved by including\
    \ one or more\n   paddingOctets Information Elements in a Data Record.\n   +-----+---------------------------+-----+---------------------------+\n\
    \   |  ID | Name                      |  ID | Name                      |\n  \
    \ +-----+---------------------------+-----+---------------------------+\n   |\
    \ 210 | paddingOctets             |     |                           |\n   +-----+---------------------------+-----+---------------------------+\n"
- title: 5.12.1.  paddingOctets
  contents:
  - "5.12.1.  paddingOctets\n   Description:\n      The value of this Information\
    \ Element is always a sequence of 0x00\n      values.\n   Abstract Data Type:\
    \ octetArray\n   ElementId: 210\n   Status: current\n"
- title: 6.  Extending the Information Model
  contents:
  - "6.  Extending the Information Model\n   A key requirement for IPFIX is to allow\
    \ for extending the set of\n   Information Elements that are reported.  This section\
    \ defines the\n   mechanism for extending this set.\n   Extension can be done\
    \ by defining new Information Elements.  Each new\n   Information Element MUST\
    \ be assigned a unique Information Element\n   identifier as part of its definition.\
    \  These unique Information\n   Element identifiers are the connection between\
    \ the record structure\n   communicated by the protocol using Templates and a\
    \ consuming\n   application.  For generally applicable Information Elements, using\n\
    \   IETF and IANA mechanisms to extend the information model is\n   RECOMMENDED.\n\
    \   Names of new Information Elements SHOULD be chosen according to the\n   naming\
    \ conventions given in Section 2.3.\n   For extensions, the type space defined\
    \ in Section 3 can be used.  If\n   required, new abstract data types can be added.\
    \  New abstract data\n   types MUST be defined in IETF Standards Track documents.\n\
    \   Enterprises may wish to define Information Elements without\n   registering\
    \ them with IANA.  IPFIX explicitly supports\n   enterprise-specific Information\
    \ Elements.  Enterprise-specific\n   Information Elements are described in Sections\
    \ 2.1 and 4.\n   However, before creating enterprise-specific Information Elements,\n\
    \   the general applicability of such Information Elements should be\n   considered.\
    \  IPFIX does not support enterprise-specific abstract data\n   types.\n"
- title: 7.  IANA Considerations
  contents:
  - '7.  IANA Considerations

    '
- title: 7.1.  IPFIX Information Elements
  contents:
  - "7.1.  IPFIX Information Elements\n   This document specifies an initial set of\
    \ IPFIX Information Elements.\n   The list of these Information Elements with\
    \ their identifiers is\n   given in Section 4.  The Internet Assigned Numbers\
    \ Authority (IANA)\n   has created a new registry for IPFIX Information Element\
    \ identifiers\n   and filled it with the initial list in Section 4.\n   New assignments\
    \ for IPFIX Information Elements will be administered\n   by IANA through Expert\
    \ Review [RFC2434], i.e., review by one of a\n   group of experts designated by\
    \ an IETF Area Director.  The group of\n   experts MUST check the requested Information\
    \ Element for completeness\n   and accuracy of the description and for correct\
    \ naming according to\n   the naming conventions in Section 2.3.  Requests for\
    \ Information\n   Elements that duplicate the functionality of existing Information\n\
    \   Elements SHOULD be declined.  The smallest available identifier\n   SHOULD\
    \ be assigned to a new Information Element.\n   The specification of new IPFIX\
    \ Information Elements MUST use the\n   template specified in Section 2.1 and\
    \ MUST be published using a\n   well-established and persistent publication medium.\
    \  The experts will\n   initially be drawn from the Working Group Chairs and document\
    \ editors\n   of the IPFIX and PSAMP Working Groups.\n"
- title: 7.2.  MPLS Label Type Identifier
  contents:
  - "7.2.  MPLS Label Type Identifier\n   Information Element #46, named mplsTopLabelType,\
    \ carries MPLS label\n   types.  Values for 5 different types have initially been\
    \ defined.\n   For ensuring extensibility of this information, IANA has created\
    \ a\n   new registry for MPLS label types and filled it with the initial list\n\
    \   from the description Information Element #46, mplsTopLabelType.\n   New assignments\
    \ for MPLS label types will be administered by IANA\n   through Expert Review\
    \ [RFC2434], i.e., review by one of a group of\n   experts designated by an IETF\
    \ Area Director.  The group of experts\n   must double check the label type definitions\
    \ with already defined\n   label types for completeness, accuracy, and redundancy.\
    \  The\n   specification of new MPLS label types MUST be published using a\n \
    \  well-established and persistent publication medium.\n"
- title: 7.3.  XML Namespace and Schema
  contents:
  - "7.3.  XML Namespace and Schema\n   Appendix B defines an XML schema for IPFIX\
    \ Information Element\n   definitions.  All Information Elements specified in\
    \ this document are\n   defined by the XML specification in Appendix A that is\
    \ a valid XML\n   record according to the schema in Appendix B.  This schema may\
    \ also\n   be used for specifying further Information Elements in future\n   extensions\
    \ of the IPFIX information model in a machine-readable way.\n   Appendix B uses\
    \ URNs to describe an XML namespace and an XML schema\n   for IPFIX Information\
    \ Elements conforming to a registry mechanism\n   described in [RFC3688].  Two\
    \ URI assignments have been made.\n   1.  Registration for the IPFIX information\
    \ model namespace\n       *  URI: urn:ietf:params:xml:ns:ipfix-info-15\n     \
    \  *  Registrant Contact: IETF IPFIX Working Group <ipfix@ietf.org>,\n       \
    \   as designated by the IESG <iesg@ietf.org>.\n       *  XML: None.  Namespace\
    \ URIs do not represent an XML.\n   2.  Registration for the IPFIX information\
    \ model schema\n       *  URI: urn:ietf:params:xml:schema:ipfix-info-15\n    \
    \   *  Registrant Contact: IETF IPFIX Working Group <ipfix@ietf.org>,\n      \
    \    as designated by the IESG <iesg@ietf.org>.\n       *  XML: See Appendix B\
    \ of this document.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   The IPFIX information model itself does not directly\
    \ introduce\n   security issues.  Rather, it defines a set of attributes that\
    \ may for\n   privacy or business issues be considered sensitive information.\n\
    \   For example, exporting values of header fields may make attacks\n   possible\
    \ for the receiver of this information, which would otherwise\n   only be possible\
    \ for direct observers of the reported Flows along the\n   data path.\n   The\
    \ underlying protocol used to exchange the information described\n   here must\
    \ therefore apply appropriate procedures to guarantee the\n   integrity and confidentiality\
    \ of the exported information.  Such\n   protocols are defined in separate documents,\
    \ specifically the IPFIX\n   protocol document [RFC5101].\n   This document does\
    \ not specify any Information Element carrying\n   keying material.  If future\
    \ extensions will do so, then appropriate\n   precautions need to be taken for\
    \ properly protecting such sensitive\n   information.\n"
- title: 9.  Acknowledgements
  contents:
  - "9.  Acknowledgements\n   The editors thank Paul Callato for creating the initial\
    \ version of\n   this document, and Thomas Dietz for developing the XSLT scripts\
    \ that\n   generate large portions of the text part of this document from the\n\
    \   XML appendices.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC5101]  Claise, B., \"Specification of the IPFIX Protocol for the\n\
    \              Exchange\", RFC 5101, January 2008.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [IEEE.754.1985]\n              Institute of\
    \ Electrical and Electronics Engineers,\n              \"Standard for Binary Floating-Point\
    \ Arithmetic\", IEEE\n              Standard 754, August 1985.\n   [IEEE.802-11.1999]\n\
    \              \"Information technology - Telecommunications and\n           \
    \   information exchange between systems - Local and\n              metropolitan\
    \ area networks - Specific requirements - Part\n              11: Wireless LAN\
    \ Medium Access Control (MAC) and Physical\n              Layer (PHY) specifications\"\
    , IEEE Standard 802.11, 1999,\n              <http://standards.ieee.org/getieee802/download/802.11-\n\
    \              1999.pdF>.\n   [IEEE.802-1Q.2003]\n              Institute of Electrical\
    \ and Electronics Engineers, \"Local\n              and Metropolitan Area Networks:\
    \ Virtual Bridged Local Area\n              Networks\", IEEE Standard 802.1Q,\
    \ March 2003.\n   [IEEE.802-3.2002]\n              \"Information technology -\
    \ Telecommunications and\n              information exchange between systems -\
    \ Local and\n              metropolitan area networks - Specific requirements\
    \ - Part\n              3: Carrier sense multiple access with collision detection\n\
    \              (CSMA/CD) access method and physical layer\n              specifications\"\
    , IEEE Standard 802.3, September 2002.\n   [ISO.10646-1.1993]\n              International\
    \ Organization for Standardization,\n              \"Information Technology -\
    \ Universal Multiple-octet coded\n              Character Set (UCS) - Part 1:\
    \ Architecture and Basic\n              Multilingual Plane\", ISO Standard 10646-1,\
    \ May 1993.\n   [ISO.646.1991]\n              International Organization for Standardization,\n\
    \              \"Information technology - ISO 7-bit coded character set\n    \
    \          for information interchange\", ISO Standard 646, 1991.\n   [RFC0768]\
    \  Postel, J., \"User Datagram Protocol\", STD 6, RFC 768,\n              August\
    \ 1980.\n   [RFC0791]  Postel, J., \"Internet Protocol\", STD 5, RFC 791, September\n\
    \              1981.\n   [RFC0792]  Postel, J., \"Internet Control Message Protocol\"\
    , STD 5,\n              RFC 792, September 1981.\n   [RFC0793]  Postel, J., \"\
    Transmission Control Protocol\", STD 7, RFC\n              793, September 1981.\n\
    \   [RFC1108]  Kent, S., \"U.S. Department of Defense Security Options for\n \
    \             the Internet Protocol\", RFC 1108, November 1991.\n   [RFC1112]\
    \  Deering, S., \"Host extensions for IP multicasting\", STD 5,\n            \
    \  RFC 1112, August 1989.\n   [RFC1191]  Mogul, J. and S. Deering, \"Path MTU\
    \ discovery\", RFC 1191,\n              November 1990.\n   [RFC1323]  Jacobson,\
    \ V., Braden, R., and D. Borman, \"TCP Extensions\n              for High Performance\"\
    , RFC 1323, May 1992.\n   [RFC1385]  Wang, Z., \"EIP: The Extended Internet Protocol\"\
    , RFC 1385,\n              November 1992.\n   [RFC1812]  Baker, F., Ed., \"Requirements\
    \ for IP Version 4 Routers\",\n              RFC 1812, June 1995.\n   [RFC1930]\
    \  Hawkinson, J. and T. Bates, \"Guidelines for creation,\n              selection,\
    \ and registration of an Autonomous System (AS)\",\n              BCP 6, RFC 1930,\
    \ March 1996.\n   [RFC2113]  Katz, D., \"IP Router Alert Option\", RFC 2113, February\n\
    \              1997.\n   [RFC2434]  Narten, T. and H. Alvestrand, \"Guidelines\
    \ for Writing an\n              IANA Considerations Section in RFCs\", BCP 26,\
    \ RFC 2434,\n              October 1998.\n   [RFC2460]  Deering, S. and R. Hinden,\
    \ \"Internet Protocol, Version 6\n              (IPv6) Specification\", RFC 2460,\
    \ December 1998.\n   [RFC2578]  McCloghrie, K., Perkins, D., and J. Schoenwaelder,\n\
    \              \"Structure of Management Information Version 2 (SMIv2)\",\n  \
    \            STD 58, RFC 2578, April 1999.\n   [RFC2629]  Rose, M., \"Writing\
    \ I-Ds and RFCs using XML\", RFC 2629,\n              June 1999.\n   [RFC2675]\
    \  Borman, D., Deering, S., and R. Hinden, \"IPv6 Jumbograms\",\n            \
    \  RFC 2675, August 1999.\n   [RFC2863]  McCloghrie, K. and F. Kastenholz, \"\
    The Interfaces Group\n              MIB\", RFC 2863, June 2000.\n   [RFC3031]\
    \  Rosen, E., Viswanathan, A., and R. Callon, \"Multiprotocol\n              Label\
    \ Switching Architecture\", RFC 3031, January 2001.\n   [RFC3032]  Rosen, E.,\
    \ Tappan, D., Fedorkow, G., Rekhter, Y.,\n              Farinacci, D., Li, T.,\
    \ and A. Conta, \"MPLS Label Stack\n              Encoding\", RFC 3032, January\
    \ 2001.\n   [RFC3193]  Patel, B., Aboba, B., Dixon, W., Zorn, G., and S. Booth,\n\
    \              \"Securing L2TP using IPsec\", RFC 3193, November 2001.\n   [RFC3234]\
    \  Carpenter, B. and S. Brim, \"Middleboxes: Taxonomy and\n              Issues\"\
    , RFC 3234, February 2002.\n   [RFC3260]  Grossman, D., \"New Terminology and\
    \ Clarifications for\n              Diffserv\", RFC 3260, April 2002.\n   [RFC3270]\
    \  Le Faucheur, F., Wu, L., Davie, B., Davari, S., Vaananen,\n              P.,\
    \ Krishnan, R., Cheval, P., and J. Heinanen, \"Multi-\n              Protocol\
    \ Label Switching (MPLS) Support of Differentiated\n              Services\",\
    \ RFC 3270, May 2002.\n   [RFC3376]  Cain, B., Deering, S., Kouvelas, I., Fenner,\
    \ B., and A.\n              Thyagarajan, \"Internet Group Management Protocol,\
    \ Version\n              3\", RFC 3376, October 2002.\n   [RFC3444]  Pras, A.\
    \ and J. Schoenwaelder, \"On the Difference between\n              Information\
    \ Models and Data Models\", RFC 3444, January\n              2003.\n   [RFC3688]\
    \  Mealling, M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n              January\
    \ 2004.\n   [RFC3954]  Claise, B., Ed., \"Cisco Systems NetFlow Services Export\n\
    \              Version 9\", RFC 3954, October 2004.\n   [RFC4271]  Rekhter, Y.,\
    \ Ed., Li, T., Ed., and S. Hares, Ed., \"A\n              Border Gateway Protocol\
    \ 4 (BGP-4)\", RFC 4271, January\n              2006.\n   [RFC4291]  Hinden, R.\
    \ and S. Deering, \"IP Version 6 Addressing\n              Architecture\", RFC\
    \ 4291, February 2006.\n   [RFC4302]  Kent, S., \"IP Authentication Header\",\
    \ RFC 4302, December\n              2005.\n   [RFC4303]  Kent, S., \"IP Encapsulating\
    \ Security Payload (ESP)\", RFC\n              4303, December 2005.\n   [RFC4364]\
    \  Rosen, E. and Y. Rekhter, \"BGP/MPLS IP Virtual Private\n              Networks\
    \ (VPNs)\", RFC 4364, February 2006.\n   [RFC4382]  Nadeau, T., Ed., and H. van\
    \ der Linde, Ed., \"MPLS/BGP\n              Layer 3 Virtual Private Network (VPN)\
    \ Management\n              Information Base\", RFC 4382, February 2006.\n   [RFC4443]\
    \  Conta, A., Deering, S., and M. Gupta, Ed., \"Internet\n              Control\
    \ Message Protocol (ICMPv6) for the Internet\n              Protocol Version 6\
    \ (IPv6) Specification\", RFC 4443, March\n              2006.\n   [RFC4960] \
    \ Stewart, R., Ed., \"Stream Control Transmission Protocol\",\n              RFC\
    \ 4960, September 2007.\n   [RFC5036]  Andersson, L., Ed., Minei, I., Ed., and\
    \ B. Thomas, Ed.,\n              \"LDP Specification\", RFC 5036, October 2007.\n"
- title: Appendix A.  XML Specification of IPFIX Information Elements
  contents:
  - "Appendix A.  XML Specification of IPFIX Information Elements\n   This appendix\
    \ contains a machine-readable description of the IPFIX\n   information model coded\
    \ in XML.  Note that this appendix is of\n   informational nature, while the text\
    \ in Section 4 (generated from\n   this appendix) is normative.\n   Using a machine-readable\
    \ syntax for the information model enables the\n   creation of IPFIX-aware tools\
    \ that can automatically adapt to\n   extensions to the information model, by\
    \ simply reading updated\n   information model specifications.\n   The wide availability\
    \ of XML-aware tools and libraries for client\n   devices is a primary consideration\
    \ for this choice.  In particular,\n   libraries for parsing XML documents are\
    \ readily available.  Also,\n   mechanisms such as the Extensible Stylesheet Language\
    \ (XSL) allow for\n   transforming a source XML document into other documents.\
    \  This\n   document was authored in XML and transformed according to [RFC2629].\n\
    \   It should be noted that the use of XML in Exporters, Collectors, or\n   other\
    \ tools is not mandatory for the deployment of IPFIX.  In\n   particular, Exporting\
    \ Processes do not produce or consume XML as part\n   of their operation.  It\
    \ is expected that IPFIX Collectors MAY take\n   advantage of the machine readability\
    \ of the information model vs.\n   hard coding their behavior or inventing proprietary\
    \ means for\n   accommodating extensions.\n   <?xml version=\"1.0\" encoding=\"\
    UTF-8\"?>\n   <fieldDefinitions xmlns=\"urn:ietf:params:xml:ns:ipfix-info\"\n\
    \                xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n   \
    \             xsi:schemaLocation=\"urn:ietf:params:xml:ns:ipfix-info\n       \
    \         ipfix-info.xsd\">\n     <field name=\"lineCardId\" dataType=\"unsigned32\"\
    \n            group=\"scope\"\n            dataTypeSemantics=\"identifier\"\n\
    \            elementId=\"141\" applicability=\"option\" status=\"current\">\n\
    \       <description>\n         <paragraph>\n           An identifier of a line\
    \ card that is unique per IPFIX\n           Device hosting an Observation Point.\
    \  Typically, this\n           Information Element is used for limiting the scope\n\
    \           of other Information Elements.\n         </paragraph>\n       </description>\n\
    \     </field>\n     <field name=\"portId\" dataType=\"unsigned32\"\n        \
    \    group=\"scope\"\n            dataTypeSemantics=\"identifier\"\n         \
    \   elementId=\"142\" applicability=\"option\" status=\"current\">\n       <description>\n\
    \         <paragraph>\n           An identifier of a line port that is unique\
    \ per IPFIX\n           Device hosting an Observation Point.  Typically, this\n\
    \           Information Element is used for limiting the scope\n           of\
    \ other Information Elements.\n         </paragraph>\n       </description>\n\
    \     </field>\n     <field name=\"ingressInterface\" dataType=\"unsigned32\"\n\
    \            group=\"scope\"\n            dataTypeSemantics=\"identifier\"\n \
    \           elementId=\"10\" applicability=\"all\" status=\"current\">\n     \
    \  <description>\n         <paragraph>\n           The index of the IP interface\
    \ where packets of this Flow\n           are being received.  The value matches\
    \ the value of managed\n           object 'ifIndex' as defined in RFC 2863.\n\
    \           Note that ifIndex values are not assigned statically to an\n     \
    \      interface and that the interfaces may be renumbered every\n           time\
    \ the device's management system is re-initialized, as\n           specified in\
    \ RFC 2863.\n         </paragraph>\n       </description>\n       <reference>\n\
    \         <paragraph>\n         See RFC 2863 for the definition of the ifIndex\
    \ object.\n         </paragraph>\n       </reference>\n     </field>\n     <field\
    \ name=\"egressInterface\" dataType=\"unsigned32\"\n            group=\"scope\"\
    \n            dataTypeSemantics=\"identifier\"\n            elementId=\"14\" applicability=\"\
    all\" status=\"current\">\n       <description>\n         <paragraph>\n      \
    \     The index of the IP interface where packets of\n           this Flow are\
    \ being sent.  The value matches the value of\n           managed object 'ifIndex'\
    \ as defined in RFC 2863.\n           Note that ifIndex values are not assigned\
    \ statically to an\n           interface and that the interfaces may be renumbered\
    \ every\n           time the device's management system is re-initialized, as\n\
    \           specified in RFC 2863.\n         </paragraph>\n       </description>\n\
    \       <reference>\n         <paragraph>\n         See RFC 2863 for the definition\
    \ of the ifIndex object.\n         </paragraph>\n       </reference>\n     </field>\n\
    \     <field name=\"meteringProcessId\" dataType=\"unsigned32\"\n            group=\"\
    scope\"\n            dataTypeSemantics=\"identifier\"\n            elementId=\"\
    143\" applicability=\"option\" status=\"current\">\n       <description>\n   \
    \      <paragraph>\n           An identifier of a Metering Process that is unique\
    \ per\n           IPFIX Device.  Typically, this Information Element is used\n\
    \           for limiting the scope of other Information Elements.\n          \
    \ Note that process identifiers are typically assigned\n           dynamically.\n\
    \           The Metering Process may be re-started with a different ID.\n    \
    \     </paragraph>\n       </description>\n     </field>\n     <field name=\"\
    exportingProcessId\" dataType=\"unsigned32\"\n            group=\"scope\"\n  \
    \          dataTypeSemantics=\"identifier\"\n            elementId=\"144\" applicability=\"\
    option\" status=\"current\">\n       <description>\n         <paragraph>\n   \
    \        An identifier of an Exporting Process that is unique per\n          \
    \ IPFIX Device.  Typically, this Information Element is used\n           for limiting\
    \ the scope of other Information Elements.\n           Note that process identifiers\
    \ are typically assigned\n           dynamically.  The Exporting Process may be\
    \ re-started\n           with a different ID.\n         </paragraph>\n       </description>\n\
    \     </field>\n     <field name=\"flowId\" dataType=\"unsigned64\"\n        \
    \    group=\"scope\"\n            dataTypeSemantics=\"identifier\"\n         \
    \   elementId=\"148\" applicability=\"option\" status=\"current\">\n       <description>\n\
    \         <paragraph>\n           An identifier of a Flow that is unique within\
    \ an Observation\n           Domain.  This Information Element can be used to\
    \ distinguish\n           between different Flows if Flow Keys such as IP addresses\
    \ and\n           port numbers are not reported or are reported in separate\n\
    \           records.\n         </paragraph>\n       </description>\n     </field>\n\
    \     <field name=\"templateId\" dataType=\"unsigned16\"\n            group=\"\
    scope\"\n            dataTypeSemantics=\"identifier\"\n            elementId=\"\
    145\" applicability=\"option\" status=\"current\">\n       <description>\n   \
    \      <paragraph>\n           An identifier of a Template that is locally unique\
    \ within a\n           combination of a Transport session and an Observation Domain.\n\
    \         </paragraph>\n         <paragraph>\n           Template IDs 0-255 are\
    \ reserved for Template Sets, Options\n           Template Sets, and other reserved\
    \ Sets yet to be created.\n           Template IDs of Data Sets are numbered from\
    \ 256 to 65535.\n         </paragraph>\n         <paragraph>\n           Typically,\
    \ this Information Element is used for limiting\n           the scope of other\
    \ Information Elements.\n           Note that after a re-start of the Exporting\
    \ Process Template\n           identifiers may be re-assigned.\n         </paragraph>\n\
    \       </description>\n     </field>\n     <field name=\"observationDomainId\"\
    \ dataType=\"unsigned32\"\n            group=\"scope\"\n            dataTypeSemantics=\"\
    identifier\"\n            elementId=\"149\" applicability=\"option\" status=\"\
    current\">\n       <description>\n         <paragraph>\n           An identifier\
    \ of an Observation Domain that is locally\n           unique to an Exporting\
    \ Process.  The Exporting Process uses\n           the Observation Domain ID to\
    \ uniquely identify to the\n           Collecting Process the Observation Domain\
    \ where Flows\n           were metered.  It is RECOMMENDED that this identifier\
    \ is\n           also unique per IPFIX Device.\n         </paragraph>\n      \
    \   <paragraph>\n           A value of 0 indicates that no specific Observation\
    \ Domain\n           is identified by this Information Element.\n         </paragraph>\n\
    \         <paragraph>\n           Typically, this Information Element is used\
    \ for limiting\n           the scope of other Information Elements.\n        \
    \ </paragraph>\n       </description>\n     </field>\n     <field name=\"observationPointId\"\
    \ dataType=\"unsigned32\"\n            group=\"scope\"\n            dataTypeSemantics=\"\
    identifier\"\n            elementId=\"138\" applicability=\"option\" status=\"\
    current\">\n       <description>\n         <paragraph>\n         An identifier\
    \ of an Observation Point that is unique per\n         Observation Domain.  It\
    \ is RECOMMENDED that this identifier is\n         also unique per IPFIX Device.\
    \  Typically, this Information\n         Element is used for limiting the scope\
    \ of other Information\n         Elements.\n         </paragraph>\n       </description>\n\
    \     </field>\n     <field name=\"commonPropertiesId\" dataType=\"unsigned64\"\
    \n            group=\"scope\"\n            dataTypeSemantics=\"identifier\"\n\
    \            elementId=\"137\" applicability=\"option\" status=\"current\">\n\
    \       <description>\n         <paragraph>\n           An identifier of a set\
    \ of common properties that is\n           unique per Observation Domain and Transport\
    \ Session.\n           Typically, this Information Element is used to link to\n\
    \           information reported in separate Data Records.\n         </paragraph>\n\
    \       </description>\n     </field>\n     <field name=\"exporterIPv4Address\"\
    \ dataType=\"ipv4Address\"\n            dataTypeSemantics=\"identifier\"\n   \
    \         group=\"config\"\n            elementId=\"130\" applicability=\"all\"\
    \ status=\"current\">\n       <description>\n         <paragraph>\n         The\
    \ IPv4 address used by the Exporting Process.  This is used\n         by the Collector\
    \ to identify the Exporter in cases where the\n         identity of the Exporter\
    \ may have been obscured by the use of\n         a proxy.\n         </paragraph>\n\
    \       </description>\n     </field>\n     <field name=\"exporterIPv6Address\"\
    \ dataType=\"ipv6Address\"\n            dataTypeSemantics=\"identifier\"\n   \
    \         group=\"config\"\n            elementId=\"131\" applicability=\"all\"\
    \ status=\"current\">\n       <description>\n         <paragraph>\n         The\
    \ IPv6 address used by the Exporting Process.  This is used\n         by the Collector\
    \ to identify the Exporter in cases where the\n         identity of the Exporter\
    \ may have been obscured by the use of\n         a proxy.\n         </paragraph>\n\
    \       </description>\n     </field>\n     <field name=\"exporterTransportPort\"\
    \ dataType=\"unsigned16\"\n            group=\"config\"\n            dataTypeSemantics=\"\
    identifier\"\n            elementId=\"217\" applicability=\"all\" status=\"current\"\
    >\n       <description>\n         <paragraph>\n         The source port identifier\
    \ from which the Exporting\n         Process sends Flow information.  For the\
    \ transport protocols\n         UDP, TCP, and SCTP, this is the source port number.\n\
    \         This field MAY also be used for future transport protocols\n       \
    \  that have 16-bit source port identifiers.  This field may\n         be useful\
    \ for distinguishing multiple Exporting Processes\n         that use the same\
    \ IP address.\n         </paragraph>\n       </description>\n       <reference>\n\
    \         <paragraph>\n         See RFC 768 for the definition of the UDP\n  \
    \       source port field.\n         See RFC 793 for the definition of the TCP\n\
    \         source port field.\n         See RFC 4960 for the definition of SCTP.\n\
    \         </paragraph>\n         <paragraph>\n         Additional information\
    \ on defined UDP and TCP port numbers can\n         be found at http://www.iana.org/assignments/port-numbers.\n\
    \         </paragraph>\n       </reference>\n     </field>\n     <field name=\"\
    collectorIPv4Address\" dataType=\"ipv4Address\"\n            dataTypeSemantics=\"\
    identifier\"\n            group=\"config\"\n            elementId=\"211\" applicability=\"\
    all\" status=\"current\">\n       <description>\n         <paragraph>\n      \
    \   An IPv4 address to which the Exporting Process sends Flow\n         information.\n\
    \         </paragraph>\n       </description>\n     </field>\n     <field name=\"\
    collectorIPv6Address\" dataType=\"ipv6Address\"\n            dataTypeSemantics=\"\
    identifier\"\n            group=\"config\"\n            elementId=\"212\" applicability=\"\
    all\" status=\"current\">\n       <description>\n         <paragraph>\n      \
    \   An IPv6 address to which the Exporting Process sends Flow\n         information.\n\
    \         </paragraph>\n       </description>\n     </field>\n     <field name=\"\
    exportInterface\" dataType=\"unsigned32\"\n            group=\"config\"\n    \
    \        dataTypeSemantics=\"identifier\"\n            elementId=\"213\" applicability=\"\
    all\" status=\"current\">\n       <description>\n         <paragraph>\n      \
    \     The index of the interface from which IPFIX Messages sent\n           by\
    \ the Exporting Process to a Collector leave the IPFIX\n           Device.  The\
    \ value matches the value of\n           managed object 'ifIndex' as defined in\
    \ RFC 2863.\n           Note that ifIndex values are not assigned statically to\
    \ an\n           interface and that the interfaces may be renumbered every\n \
    \          time the device's management system is re-initialized, as\n       \
    \    specified in RFC 2863.\n         </paragraph>\n       </description>\n  \
    \     <reference>\n         <paragraph>\n         See RFC 2863 for the definition\
    \ of the ifIndex object.\n         </paragraph>\n       </reference>\n     </field>\n\
    \     <field name=\"exportProtocolVersion\" dataType=\"unsigned8\"\n         \
    \   dataTypeSemantics=\"identifier\"\n            group=\"config\"\n         \
    \   elementId=\"214\" applicability=\"all\" status=\"current\">\n       <description>\n\
    \         <paragraph>\n           The protocol version used by the Exporting Process\
    \ for\n           sending Flow information.  The protocol version is given\n \
    \          by the value of the Version Number field in the Message\n         \
    \  Header.\n         </paragraph>\n         <paragraph>\n           The protocol\
    \ version is 10 for IPFIX and 9 for NetFlow\n           version 9.\n         \
    \  A value of 0 indicates that no export protocol is in use.\n         </paragraph>\n\
    \       </description>\n       <reference>\n         <paragraph>\n         See\
    \ the IPFIX protocol specification [RFC5101] for the\n         definition of the\
    \ IPFIX Message Header.\n         </paragraph>\n         <paragraph>\n       \
    \  See RFC 3954 for the definition of the NetFlow\n         version 9 message\
    \ header.\n         </paragraph>\n       </reference>\n     </field>\n     <field\
    \ name=\"exportTransportProtocol\" dataType=\"unsigned8\"\n            group=\"\
    config\"\n            dataTypeSemantics=\"identifier\"\n            elementId=\"\
    215\" applicability=\"all\" status=\"current\">\n       <description>\n      \
    \   <paragraph>\n         The value of the protocol number used by the Exporting\
    \ Process\n         for sending Flow information.\n         The protocol number\
    \ identifies the IP packet payload type.\n         Protocol numbers are defined\
    \ in the IANA Protocol Numbers\n         registry.\n         </paragraph>\n  \
    \       <paragraph>\n         In Internet Protocol version 4 (IPv4), this is carried\
    \ in the\n         Protocol field.  In Internet Protocol version 6 (IPv6), this\n\
    \         is carried in the Next Header field in the last extension\n        \
    \ header of the packet.\n         </paragraph>\n       </description>\n      \
    \ <reference>\n         <paragraph>\n         See RFC 791 for the specification\
    \ of the IPv4\n         protocol field.\n         See RFC 2460 for the specification\
    \ of the IPv6\n         protocol field.\n         See the list of protocol numbers\
    \ assigned by IANA at\n         http://www.iana.org/assignments/protocol-numbers.\n\
    \         </paragraph>\n       </reference>\n     </field>\n     <field name=\"\
    collectorTransportPort\" dataType=\"unsigned16\"\n            group=\"config\"\
    \n            dataTypeSemantics=\"identifier\"\n            elementId=\"216\"\
    \ applicability=\"all\" status=\"current\">\n       <description>\n         <paragraph>\n\
    \         The destination port identifier to which the Exporting\n         Process\
    \ sends Flow information.  For the transport protocols\n         UDP, TCP, and\
    \ SCTP, this is the destination port number.\n         This field MAY also be\
    \ used for future transport protocols\n         that have 16-bit source port identifiers.\n\
    \         </paragraph>\n       </description>\n       <reference>\n         <paragraph>\n\
    \         See RFC 768 for the definition of the UDP\n         destination port\
    \ field.\n         See RFC 793 for the definition of the TCP\n         destination\
    \ port field.\n         See RFC 4960 for the definition of SCTP.\n         </paragraph>\n\
    \         <paragraph>\n         Additional information on defined UDP and TCP\
    \ port numbers can\n         be found at http://www.iana.org/assignments/port-numbers.\n\
    \         </paragraph>\n       </reference>\n     </field>\n     <field name=\"\
    flowKeyIndicator\" dataType=\"unsigned64\"\n            dataTypeSemantics=\"flags\"\
    \n            group=\"config\"\n            elementId=\"173\" applicability=\"\
    all\" status=\"current\">\n       <description>\n         <paragraph>\n      \
    \   This set of bit fields is used for marking the Information\n         Elements\
    \ of a Data Record that serve as Flow Key.  Each bit\n         represents an Information\
    \ Element in the Data Record with\n         the n-th bit representing the n-th\
    \ Information Element.\n         A bit set to value 1 indicates that the corresponding\n\
    \         Information Element is a Flow Key of the reported Flow.\n         A\
    \ bit set to value 0 indicates that this is not the case.\n         </paragraph>\n\
    \         <paragraph>\n         If the Data Record contains more than 64 Information\
    \ Elements,\n         the corresponding Template SHOULD be designed such that\
    \ all\n         Flow Keys are among the first 64 Information Elements, because\n\
    \         the flowKeyIndicator only contains 64 bits.  If the Data Record\n  \
    \       contains less than 64 Information Elements, then the bits in\n       \
    \  the flowKeyIndicator for which no corresponding Information\n         Element\
    \ exists MUST have the value 0.\n         </paragraph>\n       </description>\n\
    \     </field>\n     <field name=\"exportedMessageTotalCount\" dataType=\"unsigned64\"\
    \n            dataTypeSemantics=\"totalCounter\"\n            group=\"processCounter\"\
    \n            elementId=\"41\" applicability=\"data\" status=\"current\">\n  \
    \     <description>\n         <paragraph>\n           The total number of IPFIX\
    \ Messages that the Exporting Process\n           has sent since the Exporting\
    \ Process (re-)initialization to\n           a particular Collecting Process.\n\
    \           The reported number excludes the IPFIX Message that carries\n    \
    \       the counter value.\n           If this Information Element is sent to\
    \ a particular\n           Collecting Process, then by default it specifies the\
    \ number\n           of IPFIX Messages sent to this Collecting Process.\n    \
    \     </paragraph>\n       </description>\n       <units>messages</units>\n  \
    \   </field>\n     <field name=\"exportedOctetTotalCount\" dataType=\"unsigned64\"\
    \n            dataTypeSemantics=\"totalCounter\"\n            group=\"processCounter\"\
    \n            elementId=\"40\" applicability=\"data\" status=\"current\">\n  \
    \     <description>\n         <paragraph>\n           The total number of octets\
    \ that the Exporting Process\n           has sent since the Exporting Process\
    \ (re-)initialization\n           to a particular Collecting Process.\n      \
    \     The value of this Information Element is calculated by\n           summing\
    \ up the IPFIX Message Header length values of all\n           IPFIX Messages\
    \ that were successfully sent to the Collecting\n           Process.  The reported\
    \ number excludes octets in the IPFIX\n           Message that carries the counter\
    \ value.\n           If this Information Element is sent to a particular\n   \
    \        Collecting Process, then by default it specifies the number\n       \
    \    of octets sent to this Collecting Process.\n         </paragraph>\n     \
    \  </description>\n       <units>octets</units>\n     </field>\n     <field name=\"\
    exportedFlowRecordTotalCount\" dataType=\"unsigned64\"\n            group=\"processCounter\"\
    \n            dataTypeSemantics=\"totalCounter\"\n            elementId=\"42\"\
    \ applicability=\"data\" status=\"current\">\n       <description>\n         <paragraph>\n\
    \           The total number of Flow Records that the Exporting\n           Process\
    \ has sent as Data Records since the Exporting\n           Process (re-)initialization\
    \ to a particular Collecting\n           Process.  The reported number excludes\
    \ Flow Records in\n           the IPFIX Message that carries the counter value.\n\
    \           If this Information Element is sent to a particular\n           Collecting\
    \ Process, then by default it specifies the number\n           of Flow Records\
    \ sent to this process.\n         </paragraph>\n       </description>\n      \
    \ <units>flows</units>\n     </field>\n     <field name=\"observedFlowTotalCount\"\
    \ dataType=\"unsigned64\"\n            dataTypeSemantics=\"totalCounter\"\n  \
    \          group=\"processCounter\"\n            elementId=\"163\" applicability=\"\
    data\" status=\"current\">\n       <description>\n         <paragraph>\n     \
    \    The total number of Flows observed in the Observation Domain\n         since\
    \ the Metering Process (re-)initialization for this\n         Observation Point.\n\
    \         </paragraph>\n       </description>\n       <units>flows</units>\n \
    \    </field>\n     <field name=\"ignoredPacketTotalCount\" dataType=\"unsigned64\"\
    \n            dataTypeSemantics=\"totalCounter\"\n            group=\"processCounter\"\
    \n            elementId=\"164\" applicability=\"data\" status=\"current\">\n \
    \      <description>\n         <paragraph>\n            The total number of observed\
    \ IP packets that the\n            Metering Process did not process since the\n\
    \            (re-)initialization of the Metering Process.\n         </paragraph>\n\
    \       </description>\n       <units>packets</units>\n     </field>\n     <field\
    \ name=\"ignoredOctetTotalCount\" dataType=\"unsigned64\"\n            dataTypeSemantics=\"\
    totalCounter\"\n            group=\"processCounter\"\n            elementId=\"\
    165\" applicability=\"data\" status=\"current\">\n       <description>\n     \
    \    <paragraph>\n            The total number of octets in observed IP packets\n\
    \            (including the IP header) that the Metering Process\n           \
    \ did not process since the (re-)initialization of the\n            Metering Process.\n\
    \         </paragraph>\n       </description>\n       <units>octets</units>\n\
    \     </field>\n     <field name=\"notSentFlowTotalCount\" dataType=\"unsigned64\"\
    \n            dataTypeSemantics=\"totalCounter\"\n            group=\"processCounter\"\
    \n            elementId=\"166\" applicability=\"data\" status=\"current\">\n \
    \      <description>\n         <paragraph>\n            The total number of Flow\
    \ Records that were generated by the\n            Metering Process and dropped\
    \ by the Metering Process or\n            by the Exporting Process instead of\
    \ being sent to the\n            Collecting Process.  There are several potential\
    \ reasons for\n            this including resource shortage and special Flow export\n\
    \            policies.\n         </paragraph>\n       </description>\n       <units>flows</units>\n\
    \     </field>\n     <field name=\"notSentPacketTotalCount\" dataType=\"unsigned64\"\
    \n            dataTypeSemantics=\"totalCounter\"\n            group=\"processCounter\"\
    \n            elementId=\"167\" applicability=\"data\" status=\"current\">\n \
    \      <description>\n         <paragraph>\n            The total number of packets\
    \ in Flow Records that were\n            generated by the Metering Process and\
    \ dropped\n            by the Metering Process or by the Exporting Process\n \
    \           instead of being sent to the Collecting Process.\n            There\
    \ are several potential reasons for this including\n            resource shortage\
    \ and special Flow export policies.\n         </paragraph>\n       </description>\n\
    \       <units>packets</units>\n     </field>\n     <field name=\"notSentOctetTotalCount\"\
    \ dataType=\"unsigned64\"\n            dataTypeSemantics=\"totalCounter\"\n  \
    \          group=\"processCounter\"\n            elementId=\"168\" applicability=\"\
    data\" status=\"current\">\n       <description>\n         <paragraph>\n     \
    \       The total number of octets in packets in Flow Records\n            that\
    \ were generated by the Metering Process and\n            dropped by the Metering\
    \ Process or by the Exporting\n            Process instead of being sent to the\
    \ Collecting Process.\n            There are several potential reasons for this\
    \ including\n            resource shortage and special Flow export policies.\n\
    \         </paragraph>\n       </description>\n       <units>octets</units>\n\
    \     </field>\n     <field name=\"ipVersion\" dataType=\"unsigned8\"\n      \
    \      group=\"ipHeader\"\n            dataTypeSemantics=\"identifier\"\n    \
    \        elementId=\"60\" applicability=\"all\" status=\"current\">\n       <description>\n\
    \         <paragraph>\n         The IP version field in the IP packet header.\n\
    \         </paragraph>\n       </description>\n       <reference>\n         <paragraph>\n\
    \         See RFC 791 for the definition of the version field\n         in the\
    \ IPv4 packet header.\n         See RFC 2460 for the definition of the version\
    \ field\n         in the IPv6 packet header.\n         Additional information\
    \ on defined version numbers\n         can be found at\n         http://www.iana.org/assignments/version-numbers.\n\
    \         </paragraph>\n       </reference>\n     </field>\n     <field name=\"\
    sourceIPv4Address\" dataType=\"ipv4Address\"\n            group=\"ipHeader\"\n\
    \            dataTypeSemantics=\"identifier\"\n            elementId=\"8\" applicability=\"\
    all\" status=\"current\">\n       <description>\n         <paragraph>\n      \
    \   The IPv4 source address in the IP packet header.\n         </paragraph>\n\
    \       </description>\n       <reference>\n         <paragraph>\n         See\
    \ RFC 791 for the definition of the IPv4 source\n         address field.\n   \
    \      </paragraph>\n       </reference>\n     </field>\n     <field name=\"sourceIPv6Address\"\
    \ dataType=\"ipv6Address\"\n            group=\"ipHeader\"\n            dataTypeSemantics=\"\
    identifier\"\n            elementId=\"27\" applicability=\"all\" status=\"current\"\
    >\n       <description>\n         <paragraph>\n         The IPv6 source address\
    \ in the IP packet header.\n         </paragraph>\n       </description>\n   \
    \    <reference>\n         <paragraph>\n         See RFC 2460 for the definition\
    \ of the\n         Source Address field in the IPv6 header.\n         </paragraph>\n\
    \       </reference>\n     </field>\n     <field name=\"sourceIPv4PrefixLength\"\
    \ dataType=\"unsigned8\"\n            group=\"ipHeader\"\n            elementId=\"\
    9\" applicability=\"option\" status=\"current\">\n       <description>\n     \
    \    <paragraph>\n         The number of contiguous bits that are relevant in\
    \ the\n         sourceIPv4Prefix Information Element.\n         </paragraph>\n\
    \       </description>\n       <units>bits</units>\n       <range>0-32</range>\n\
    \     </field>\n     <field name=\"sourceIPv6PrefixLength\" dataType=\"unsigned8\"\
    \n            group=\"ipHeader\"\n            elementId=\"29\" applicability=\"\
    option\" status=\"current\">\n       <description>\n         <paragraph>\n   \
    \      The number of contiguous bits that are relevant in the\n         sourceIPv6Prefix\
    \ Information Element.\n         </paragraph>\n       </description>\n       <units>bits</units>\n\
    \       <range>0-128</range>\n     </field>\n     <field name=\"sourceIPv4Prefix\"\
    \ dataType=\"ipv4Address\"\n            group=\"ipHeader\"\n            elementId=\"\
    44\" applicability=\"data\" status=\"current\">\n       <description>\n      \
    \   <paragraph>\n         IPv4 source address prefix.\n         </paragraph>\n\
    \       </description>\n     </field>\n     <field name=\"sourceIPv6Prefix\" dataType=\"\
    ipv6Address\"\n            group=\"ipHeader\"\n            elementId=\"170\" applicability=\"\
    data\" status=\"current\">\n       <description>\n         <paragraph>\n     \
    \    IPv6 source address prefix.\n         </paragraph>\n       </description>\n\
    \     </field>\n     <field name=\"destinationIPv4Address\" dataType=\"ipv4Address\"\
    \n            group=\"ipHeader\"\n            dataTypeSemantics=\"identifier\"\
    \n            elementId=\"12\" applicability=\"all\" status=\"current\">\n   \
    \    <description>\n         <paragraph>\n         The IPv4 destination address\
    \ in the IP packet header.\n         </paragraph>\n       </description>\n   \
    \    <reference>\n         <paragraph>\n         See RFC 791 for the definition\
    \ of the IPv4\n         destination address field.\n         </paragraph>\n  \
    \     </reference>\n     </field>\n     <field name=\"destinationIPv6Address\"\
    \ dataType=\"ipv6Address\"\n            group=\"ipHeader\"\n            dataTypeSemantics=\"\
    identifier\"\n            elementId=\"28\" applicability=\"all\" status=\"current\"\
    >\n       <description>\n         <paragraph>\n         The IPv6 destination address\
    \ in the IP packet header.\n         </paragraph>\n       </description>\n   \
    \    <reference>\n         <paragraph>\n         See RFC 2460 for the definition\
    \ of the\n         Destination Address field in the IPv6 header.\n         </paragraph>\n\
    \       </reference>\n     </field>\n     <field name=\"destinationIPv4PrefixLength\"\
    \ dataType=\"unsigned8\"\n            group=\"ipHeader\"\n            elementId=\"\
    13\" applicability=\"option\" status=\"current\">\n       <description>\n    \
    \     <paragraph>\n         The number of contiguous bits that are relevant in\
    \ the\n         destinationIPv4Prefix Information Element.\n         </paragraph>\n\
    \       </description>\n       <units>bits</units>\n       <range>0-32</range>\n\
    \     </field>\n     <field name=\"destinationIPv6PrefixLength\" dataType=\"unsigned8\"\
    \n            group=\"ipHeader\"\n            elementId=\"30\" applicability=\"\
    option\" status=\"current\">\n       <description>\n         <paragraph>\n   \
    \      The number of contiguous bits that are relevant in the\n         destinationIPv6Prefix\
    \ Information Element.\n         </paragraph>\n       </description>\n       <units>bits</units>\n\
    \       <range>0-128</range>\n     </field>\n     <field name=\"destinationIPv4Prefix\"\
    \ dataType=\"ipv4Address\"\n            group=\"ipHeader\"\n            elementId=\"\
    45\" applicability=\"data\" status=\"current\">\n       <description>\n      \
    \   <paragraph> IPv4 destination address prefix. </paragraph>\n       </description>\n\
    \     </field>\n     <field name=\"destinationIPv6Prefix\" dataType=\"ipv6Address\"\
    \n            group=\"ipHeader\"\n            elementId=\"169\" applicability=\"\
    data\" status=\"current\">\n       <description>\n         <paragraph> IPv6 destination\
    \ address prefix. </paragraph>\n       </description>\n     </field>\n     <field\
    \ name=\"ipTTL\" dataType=\"unsigned8\"\n            group=\"ipHeader\"\n    \
    \        elementId=\"192\" applicability=\"all\" status=\"current\">\n       <description>\n\
    \         <paragraph>\n         For IPv4, the value of the Information Element\
    \ matches\n         the value of the Time to Live (TTL) field in the IPv4 packet\n\
    \         header.  For IPv6, the value of the Information Element\n         matches\
    \ the value of the Hop Limit field in the IPv6\n         packet header.\n    \
    \     </paragraph>\n       </description>\n       <reference>\n         <paragraph>\n\
    \         See RFC 791 for the definition of the IPv4\n         Time to Live field.\n\
    \         See RFC 2460 for the definition of the IPv6\n         Hop Limit field.\n\
    \         </paragraph>\n       </reference>\n       <units>hops</units>\n    \
    \ </field>\n     <field name=\"protocolIdentifier\" dataType=\"unsigned8\"\n \
    \           group=\"ipHeader\"\n            dataTypeSemantics=\"identifier\"\n\
    \            elementId=\"4\" applicability=\"all\" status=\"current\">\n     \
    \  <description>\n         <paragraph>\n         The value of the protocol number\
    \ in the IP packet header.\n         The protocol number identifies the IP packet\
    \ payload type.\n         Protocol numbers are defined in the IANA Protocol Numbers\n\
    \         registry.\n            </paragraph>\n         <paragraph>\n        \
    \ In Internet Protocol version 4 (IPv4), this is carried in the\n         Protocol\
    \ field.  In Internet Protocol version 6 (IPv6), this\n         is carried in\
    \ the Next Header field in the last extension\n         header of the packet.\n\
    \            </paragraph>\n       </description>\n       <reference>\n       \
    \  <paragraph>\n         See RFC 791 for the specification of the IPv4\n     \
    \    protocol field.\n         See RFC 2460 for the specification of the IPv6\n\
    \         protocol field.\n         See the list of protocol numbers assigned\
    \ by IANA at\n         http://www.iana.org/assignments/protocol-numbers.\n   \
    \      </paragraph>\n       </reference>\n     </field>\n     <field name=\"nextHeaderIPv6\"\
    \ dataType=\"unsigned8\"\n            group=\"ipHeader\"\n            elementId=\"\
    193\" applicability=\"all\" status=\"current\">\n       <description>\n      \
    \   <paragraph>\n         The value of the Next Header field of the IPv6 header.\n\
    \         The value identifies the type of the following IPv6\n         extension\
    \ header or of the following IP payload.\n         Valid values are defined in\
    \ the IANA\n         Protocol Numbers registry.\n         </paragraph>\n     \
    \  </description>\n       <reference>\n         <paragraph>\n         See RFC\
    \ 2460 for the definition of the IPv6\n         Next Header field.\n         See\
    \ the list of protocol numbers assigned by IANA at\n         http://www.iana.org/assignments/protocol-numbers.\n\
    \         </paragraph>\n       </reference>\n     </field>\n     <field name=\"\
    ipDiffServCodePoint\" dataType=\"unsigned8\"\n            group=\"ipHeader\"\n\
    \            dataTypeSemantics=\"identifier\"\n            elementId=\"195\" applicability=\"\
    all\" status=\"current\">\n       <description>\n         <paragraph>\n      \
    \   The value of a Differentiated Services Code Point (DSCP)\n         encoded\
    \ in the Differentiated Services field.  The\n         Differentiated Services\
    \ field spans the most significant\n         6 bits of the IPv4 TOS field or the\
    \ IPv6 Traffic Class\n         field, respectively.\n         </paragraph>\n \
    \        <paragraph>\n         This Information Element encodes only the 6 bits\
    \ of the\n         Differentiated Services field.  Therefore, its value may\n\
    \         range from 0 to 63.\n         </paragraph>\n       </description>\n\
    \       <reference>\n         <paragraph>\n         See RFC 3260 for the definition\
    \ of the\n         Differentiated Services field.\n         See RFC 1812 (Section\
    \ 5.3.2) and RFC 791 for the definition\n         of the IPv4 TOS field.  See\
    \ RFC 2460 for the definition of\n         the IPv6 Traffic Class field.\n   \
    \      </paragraph>\n       </reference>\n       <range>0-63</range>\n     </field>\n\
    \     <field name=\"ipPrecedence\" dataType=\"unsigned8\"\n            group=\"\
    ipHeader\"\n            dataTypeSemantics=\"identifier\"\n            elementId=\"\
    196\" applicability=\"all\" status=\"current\">\n       <description>\n      \
    \   <paragraph>\n         The value of the IP Precedence.  The IP Precedence value\n\
    \         is encoded in the first 3 bits of the IPv4 TOS field\n         or the\
    \ IPv6 Traffic Class field, respectively.\n         </paragraph>\n         <paragraph>\n\
    \         This Information Element encodes only these 3 bits.\n         Therefore,\
    \ its value may range from 0 to 7.\n         </paragraph>\n       </description>\n\
    \       <reference>\n         <paragraph>\n         See RFC 1812 (Section 5.3.3)\
    \ and RFC 791\n         for the definition of the IP Precedence.\n         See\
    \ RFC 1812 (Section 5.3.2) and RFC 791\n         for the definition of the IPv4\
    \ TOS field.\n         See RFC 2460 for the definition of the IPv6\n         Traffic\
    \ Class field.\n         </paragraph>\n       </reference>\n       <range>0-7</range>\n\
    \     </field>\n     <field name=\"ipClassOfService\" dataType=\"unsigned8\"\n\
    \            group=\"ipHeader\"\n            dataTypeSemantics=\"identifier\"\n\
    \            elementId=\"5\" applicability=\"all\" status=\"current\">\n     \
    \  <description>\n         <paragraph>\n         For IPv4 packets, this is the\
    \ value of the TOS field in\n         the IPv4 packet header.  For IPv6 packets,\
    \ this is the\n         value of the Traffic Class field in the IPv6 packet header.\n\
    \         </paragraph>\n       </description>\n       <reference>\n         <paragraph>\n\
    \         See RFC 1812 (Section 5.3.2) and RFC 791\n         for the definition\
    \ of the IPv4 TOS field.\n         See RFC 2460 for the definition of the IPv6\n\
    \         Traffic Class field.\n         </paragraph>\n       </reference>\n \
    \    </field>\n     <field name=\"postIpClassOfService\" dataType=\"unsigned8\"\
    \n            group=\"ipHeader\"\n            dataTypeSemantics=\"identifier\"\
    \n            elementId=\"55\" applicability=\"all\" status=\"current\">\n   \
    \    <description>\n         <paragraph>\n         The definition of this Information\
    \ Element is identical\n         to the definition of Information Element\n  \
    \       'ipClassOfService', except that it reports a\n         potentially modified\
    \ value caused by a middlebox\n         function after the packet passed the Observation\
    \ Point.\n         </paragraph>\n       </description>\n       <reference>\n \
    \        <paragraph>\n         See RFC 791 for the definition of the IPv4\n  \
    \       TOS field.\n         See RFC 2460 for the definition of the IPv6\n   \
    \      Traffic Class field.\n         See RFC 3234 for the definition of middleboxes.\n\
    \         </paragraph>\n       </reference>\n     </field>\n     <field name=\"\
    flowLabelIPv6\" dataType=\"unsigned32\"\n            group=\"ipHeader\"\n    \
    \        dataTypeSemantics=\"identifier\"\n            elementId=\"31\" applicability=\"\
    all\" status=\"current\">\n       <description>\n         <paragraph>\n      \
    \   The value of the IPv6 Flow Label field in the IP packet header.\n        \
    \ </paragraph>\n       </description>\n       <reference>\n         <paragraph>\n\
    \         See RFC 2460 for the definition of the\n         Flow Label field in\
    \ the IPv6 packet header.\n         </paragraph>\n       </reference>\n     </field>\n\
    \     <field name=\"isMulticast\" dataType=\"unsigned8\"\n            group=\"\
    ipHeader\"\n            dataTypeSemantics=\"flags\"\n            elementId=\"\
    206\" applicability=\"data\" status=\"current\">\n       <description>\n     \
    \    <paragraph>\n           If the IP destination address is not a reserved multicast\n\
    \           address, then the value of all bits of the octet (including\n    \
    \       the reserved ones) is zero.\n         </paragraph>\n         <paragraph>\n\
    \           The first bit of this octet is set to 1 if the Version\n         \
    \  field of the IP header has the value 4 and if the\n           Destination Address\
    \ field contains a reserved multicast\n           address in the range from 224.0.0.0\
    \ to 239.255.255.255.\n           Otherwise, this bit is set to 0.\n         </paragraph>\n\
    \         <paragraph>\n           The second and third bits of this octet are\
    \ reserved for\n           future use.\n         </paragraph>\n         <paragraph>\n\
    \           The remaining bits of the octet are only set to values\n         \
    \  other than zero if the IP Destination Address is a\n           reserved IPv6\
    \ multicast address.  Then the fourth bit\n           of the octet is set to the\
    \ value of the T flag in the\n           IPv6 multicast address and the remaining\
    \ four bits are\n           set to the value of the scope field in the IPv6\n\
    \           multicast address.\n         </paragraph>\n         <artwork>\n  \
    \           0      1      2      3      4      5      6      7\n          +------+------+------+------+------+------+------+------+\n\
    \          | MCv4 | RES. | RES. |  T   |   IPv6 multicast scope    |\n       \
    \   +------+------+------+------+------+------+------+------+\n          Bit \
    \ 0:    set to 1 if IPv4 multicast\n          Bits 1-2:  reserved for future use\n\
    \          Bit  4:    set to value of T flag, if IPv6 multicast\n          Bits\
    \ 4-7:  set to value of multicast scope if IPv6 multicast\n         </artwork>\n\
    \       </description>\n       <reference>\n         <paragraph>\n         See\
    \ RFC 1112 for the specification of reserved\n         IPv4 multicast addresses.\n\
    \         See RFC 4291 for the specification of reserved\n         IPv6 multicast\
    \ addresses and the definition of the T flag\n         and the IPv6 multicast\
    \ scope.\n         </paragraph>\n       </reference>\n     </field>\n     <field\
    \ name=\"fragmentIdentification\" dataType=\"unsigned32\"\n            group=\"\
    ipHeader\"\n            dataTypeSemantics=\"identifier\"\n            elementId=\"\
    54\" applicability=\"data\" status=\"current\">\n       <description>\n      \
    \   <paragraph>\n         The value of the Identification field\n         in the\
    \ IPv4 packet header or in the IPv6 Fragment header,\n         respectively. \
    \ The value is 0 for IPv6 if there is\n         no fragment header.\n        \
    \ </paragraph>\n       </description>\n       <reference>\n         <paragraph>\n\
    \         See RFC 791 for the definition of the IPv4\n         Identification\
    \ field.\n         See RFC 2460 for the definition of the\n         Identification\
    \ field in the IPv6 Fragment header.\n         </paragraph>\n       </reference>\n\
    \     </field>\n     <field name=\"fragmentOffset\" dataType=\"unsigned16\"\n\
    \            group=\"ipHeader\"\n            dataTypeSemantics=\"identifier\"\n\
    \            elementId=\"88\" applicability=\"all\" status=\"current\">\n    \
    \   <description>\n         <paragraph>\n         The value of the IP fragment\
    \ offset field in the\n         IPv4 packet header or the IPv6 Fragment header,\n\
    \         respectively.  The value is 0 for IPv6 if there is\n         no fragment\
    \ header.\n         </paragraph>\n       </description>\n       <reference>\n\
    \         <paragraph>\n         See RFC 791 for the specification of the\n   \
    \      fragment offset in the IPv4 header.\n         See RFC 2460 for the specification\
    \ of the\n         fragment offset in the IPv6 Fragment header.\n         </paragraph>\n\
    \       </reference>\n     </field>\n     <field name=\"fragmentFlags\" dataType=\"\
    unsigned8\"\n            group=\"ipHeader\"\n            dataTypeSemantics=\"\
    flags\"\n            elementId=\"197\" applicability=\"all\" status=\"current\"\
    >\n       <description>\n         <paragraph>\n           Fragmentation properties\
    \ indicated by flags in the IPv4\n           packet header or the IPv6 Fragment\
    \ header, respectively.\n         </paragraph>\n         <artwork>\n         Bit\
    \ 0:    (RS) Reserved.\n                   The value of this bit MUST be 0 until\
    \ specified\n                   otherwise.\n         Bit 1:    (DF) 0 = May Fragment,\
    \  1 = Don't Fragment.\n                   Corresponds to the value of the DF\
    \ flag in the\n                   IPv4 header.  Will always be 0 for IPv6 unless\n\
    \                   a \"don't fragment\" feature is introduced to IPv6.\n    \
    \     Bit 2:    (MF) 0 = Last Fragment, 1 = More Fragments.\n                \
    \   Corresponds to the MF flag in the IPv4 header\n                   or to the\
    \ M flag in the IPv6 Fragment header,\n                   respectively.  The value\
    \ is 0 for IPv6 if there\n                   is no fragment header.\n        \
    \ Bits 3-7: (DC) Don't Care.\n                   The values of these bits are\
    \ irrelevant.\n             0   1   2   3   4   5   6   7\n           +---+---+---+---+---+---+---+---+\n\
    \           | R | D | M | D | D | D | D | D |\n           | S | F | F | C | C\
    \ | C | C | C |\n           +---+---+---+---+---+---+---+---+\n         </artwork>\n\
    \       </description>\n       <reference>\n         <paragraph>\n         See\
    \ RFC 791 for the specification of the IPv4\n         fragment flags.\n      \
    \   See RFC 2460 for the specification of the IPv6\n         Fragment header.\n\
    \         </paragraph>\n       </reference>\n     </field>\n     <field name=\"\
    ipHeaderLength\" dataType=\"unsigned8\"\n            group=\"ipHeader\"\n    \
    \        elementId=\"189\" applicability=\"all\" status=\"current\">\n       <description>\n\
    \         <paragraph>\n         The length of the IP header.  For IPv6, the value\
    \ of this\n         Information Element is 40.\n         </paragraph>\n      \
    \ </description>\n       <reference>\n         <paragraph>\n         See RFC 791\
    \ for the specification of the\n         IPv4 header.\n         See RFC 2460 for\
    \ the specification of the\n         IPv6 header.\n         </paragraph>\n   \
    \    </reference>\n       <units>octets</units>\n     </field>\n     <field name=\"\
    ipv4IHL\" dataType=\"unsigned8\"\n            group=\"ipHeader\"\n           \
    \ elementId=\"207\" applicability=\"all\" status=\"current\">\n       <description>\n\
    \         <paragraph>\n         The value of the Internet Header Length (IHL)\
    \ field in\n         the IPv4 header.  It specifies the length of the header\n\
    \         in units of 4 octets.  Please note that its unit is\n         different\
    \ from most of the other Information Elements\n         reporting length values.\n\
    \         </paragraph>\n       </description>\n       <reference>\n         <paragraph>\n\
    \         See RFC 791 for the specification of the\n         IPv4 header.\n  \
    \       </paragraph>\n       </reference>\n       <units>4 octets</units>\n  \
    \   </field>\n     <field name=\"totalLengthIPv4\" dataType=\"unsigned16\"\n \
    \           group=\"ipHeader\"\n            elementId=\"190\" applicability=\"\
    all\" status=\"current\">\n       <description>\n         <paragraph>\n      \
    \   The total length of the IPv4 packet.\n         </paragraph>\n       </description>\n\
    \       <reference>\n         <paragraph>\n         See RFC 791 for the specification\
    \ of the\n         IPv4 total length.\n         </paragraph>\n       </reference>\n\
    \       <units>octets</units>\n     </field>\n     <field name=\"ipTotalLength\"\
    \ dataType=\"unsigned64\"\n            group=\"ipHeader\"\n            elementId=\"\
    224\" applicability=\"all\" status=\"current\">\n       <description>\n      \
    \   <paragraph>\n         The total length of the IP packet.\n         </paragraph>\n\
    \       </description>\n       <reference>\n         <paragraph>\n         See\
    \ RFC 791 for the specification of the\n         IPv4 total length.\n        \
    \ See RFC 2460 for the specification of the\n         IPv6 payload length.\n \
    \        See RFC 2675 for the specification of the\n         IPv6 jumbo payload\
    \ length.\n         </paragraph>\n       </reference>\n       <units>octets</units>\n\
    \     </field>\n     <field name=\"payloadLengthIPv6\" dataType=\"unsigned16\"\
    \n            group=\"ipHeader\"\n            elementId=\"191\" applicability=\"\
    all\" status=\"current\">\n       <description>\n         <paragraph>\n      \
    \   This Information Element reports the value of the Payload\n         Length\
    \ field in the IPv6 header.  Note that IPv6 extension\n         headers belong\
    \ to the payload.  Also note that in case of a\n         jumbo payload option\
    \ the value of the Payload Length field in\n         the IPv6 header is zero and\
    \ so will be the value reported\n         by this Information Element.\n     \
    \    </paragraph>\n       </description>\n       <reference>\n         <paragraph>\n\
    \         See RFC 2460 for the specification of the\n         IPv6 payload length.\n\
    \         See RFC 2675 for the specification of the\n         IPv6 jumbo payload\
    \ option.\n         </paragraph>\n       </reference>\n       <units>octets</units>\n\
    \     </field>\n     <field name=\"sourceTransportPort\" dataType=\"unsigned16\"\
    \n            group=\"transportHeader\"\n            dataTypeSemantics=\"identifier\"\
    \n            elementId=\"7\" applicability=\"all\" status=\"current\">\n    \
    \   <description>\n         <paragraph>\n         The source port identifier in\
    \ the transport header.\n         For the transport protocols UDP, TCP, and SCTP,\
    \ this is the\n         source port number given in the respective header.  This\n\
    \         field MAY also be used for future transport protocols that\n       \
    \  have 16-bit source port identifiers.\n         </paragraph>\n       </description>\n\
    \       <reference>\n         <paragraph>\n         See RFC 768 for the definition\
    \ of the UDP\n         source port field.\n         See RFC 793 for the definition\
    \ of the TCP\n         source port field.\n         See RFC 4960 for the definition\
    \ of SCTP.\n         </paragraph>\n         <paragraph>\n         Additional information\
    \ on defined UDP and TCP port numbers can\n         be found at http://www.iana.org/assignments/port-numbers.\n\
    \         </paragraph>\n       </reference>\n     </field>\n     <field name=\"\
    destinationTransportPort\" dataType=\"unsigned16\"\n            group=\"transportHeader\"\
    \n            dataTypeSemantics=\"identifier\"\n            elementId=\"11\" applicability=\"\
    all\" status=\"current\">\n       <description>\n         <paragraph>\n      \
    \   The destination port identifier in the transport header.\n         For the\
    \ transport protocols UDP, TCP, and SCTP, this is the\n         destination port\
    \ number given in the respective header.\n         This field MAY also be used\
    \ for future transport protocols\n         that have 16-bit destination port identifiers.\n\
    \         </paragraph>\n       </description>\n       <reference>\n         <paragraph>\n\
    \         See RFC 768 for the definition of the UDP\n         destination port\
    \ field.\n         See RFC 793 for the definition of the TCP\n         destination\
    \ port field.\n         See RFC 4960 for the definition of SCTP.\n         </paragraph>\n\
    \         <paragraph>\n         Additional information on defined UDP and TCP\
    \ port numbers can\n         be found at http://www.iana.org/assignments/port-numbers.\n\
    \         </paragraph>\n       </reference>\n     </field>\n     <field name=\"\
    udpSourcePort\" dataType=\"unsigned16\"\n            group=\"transportHeader\"\
    \n            dataTypeSemantics=\"identifier\"\n            elementId=\"180\"\
    \ applicability=\"all\" status=\"current\">\n       <description>\n         <paragraph>\n\
    \         The source port identifier in the UDP header.\n         </paragraph>\n\
    \       </description>\n       <reference>\n         <paragraph>\n         See\
    \ RFC 768 for the definition of the\n         UDP source port field.\n       \
    \  Additional information on defined UDP port numbers can\n         be found at\
    \ http://www.iana.org/assignments/port-numbers.\n         </paragraph>\n     \
    \  </reference>\n     </field>\n     <field name=\"udpDestinationPort\" dataType=\"\
    unsigned16\"\n            group=\"transportHeader\"\n            dataTypeSemantics=\"\
    identifier\"\n            elementId=\"181\" applicability=\"all\" status=\"current\"\
    >\n       <description>\n         <paragraph>\n         The destination port identifier\
    \ in the UDP header.\n         </paragraph>\n       </description>\n       <reference>\n\
    \         <paragraph>\n         See RFC 768 for the definition of the\n      \
    \   UDP destination port field.\n         Additional information on defined UDP\
    \ port numbers can\n         be found at http://www.iana.org/assignments/port-numbers.\n\
    \         </paragraph>\n       </reference>\n     </field>\n     <field name=\"\
    udpMessageLength\" dataType=\"unsigned16\"\n            group=\"transportHeader\"\
    \n            elementId=\"205\" applicability=\"all\" status=\"current\">\n  \
    \     <description>\n         <paragraph>\n         The value of the Length field\
    \ in the UDP header.\n         </paragraph>\n       </description>\n       <reference>\n\
    \         <paragraph>\n         See RFC 768 for the specification of the\n   \
    \      UDP header.\n         </paragraph>\n       </reference>\n       <units>octets</units>\n\
    \     </field>\n     <field name=\"tcpSourcePort\" dataType=\"unsigned16\"\n \
    \           group=\"transportHeader\"\n            dataTypeSemantics=\"identifier\"\
    \n            elementId=\"182\" applicability=\"all\" status=\"current\">\n  \
    \     <description>\n         <paragraph>\n         The source port identifier\
    \ in the TCP header.\n         </paragraph>\n       </description>\n       <reference>\n\
    \         <paragraph>\n         See RFC 793 for the definition of the TCP\n  \
    \       source port field.\n         Additional information on defined TCP port\
    \ numbers can\n         be found at http://www.iana.org/assignments/port-numbers.\n\
    \         </paragraph>\n       </reference>\n     </field>\n     <field name=\"\
    tcpDestinationPort\" dataType=\"unsigned16\"\n            group=\"transportHeader\"\
    \n            dataTypeSemantics=\"identifier\"\n            elementId=\"183\"\
    \ applicability=\"all\" status=\"current\">\n       <description>\n         <paragraph>\n\
    \         The destination port identifier in the TCP header.\n         </paragraph>\n\
    \       </description>\n       <reference>\n         <paragraph>\n         See\
    \ RFC 793 for the definition of the TCP\n         source port field.\n       \
    \  Additional information on defined TCP port numbers can\n         be found at\
    \ http://www.iana.org/assignments/port-numbers.\n         </paragraph>\n     \
    \  </reference>\n     </field>\n     <field name=\"tcpSequenceNumber\" dataType=\"\
    unsigned32\"\n            group=\"transportHeader\"\n            elementId=\"\
    184\" applicability=\"all\" status=\"current\">\n       <description>\n      \
    \   <paragraph>\n         The sequence number in the TCP header.\n         </paragraph>\n\
    \       </description>\n       <reference>\n         <paragraph>\n         See\
    \ RFC 793 for the definition of the TCP\n         sequence number.\n         </paragraph>\n\
    \       </reference>\n     </field>\n     <field name=\"tcpAcknowledgementNumber\"\
    \ dataType=\"unsigned32\"\n            group=\"transportHeader\"\n           \
    \ elementId=\"185\" applicability=\"all\" status=\"current\">\n       <description>\n\
    \         <paragraph>\n         The acknowledgement number in the TCP header.\n\
    \         </paragraph>\n       </description>\n       <reference>\n         <paragraph>\n\
    \         See RFC 793 for the definition of the TCP\n         acknowledgement\
    \ number.\n         </paragraph>\n       </reference>\n     </field>\n     <field\
    \ name=\"tcpWindowSize\" dataType=\"unsigned16\"\n            group=\"transportHeader\"\
    \n            elementId=\"186\" applicability=\"all\" status=\"current\">\n  \
    \     <description>\n         <paragraph>\n         The window field in the TCP\
    \ header.\n         If the TCP window scale is supported,\n         then TCP window\
    \ scale must be known\n         to fully interpret the value of this information.\n\
    \         </paragraph>\n       </description>\n       <reference>\n         <paragraph>\n\
    \         See RFC 793 for the definition of the TCP window field.\n         See\
    \ RFC 1323 for the definition of the TCP window scale.\n         </paragraph>\n\
    \       </reference>\n     </field>\n     <field name=\"tcpWindowScale\" dataType=\"\
    unsigned16\"\n            group=\"transportHeader\"\n            elementId=\"\
    238\" applicability=\"all\" status=\"current\">\n       <description>\n      \
    \   <paragraph>\n         The scale of the window field in the TCP header.\n \
    \        </paragraph>\n       </description>\n       <reference>\n         <paragraph>\n\
    \         See RFC 1323 for the definition of the TCP window scale.\n         </paragraph>\n\
    \       </reference>\n     </field>\n     <field name=\"tcpUrgentPointer\" dataType=\"\
    unsigned16\"\n            group=\"transportHeader\"\n            elementId=\"\
    187\" applicability=\"all\" status=\"current\">\n       <description>\n      \
    \   <paragraph>\n         The urgent pointer in the TCP header.\n         </paragraph>\n\
    \       </description>\n       <reference>\n         <paragraph>\n         See\
    \ RFC 793 for the definition of the TCP\n         urgent pointer.\n         </paragraph>\n\
    \       </reference>\n     </field>\n     <field name=\"tcpHeaderLength\" dataType=\"\
    unsigned8\"\n            group=\"transportHeader\"\n            elementId=\"188\"\
    \ applicability=\"all\" status=\"current\">\n       <description>\n         <paragraph>\n\
    \         The length of the TCP header.  Note that the value of this\n       \
    \  Information Element is different from the value of the Data\n         Offset\
    \ field in the TCP header.  The Data Offset field\n         indicates the length\
    \ of the TCP header in units of 4 octets.\n         This Information Elements\
    \ specifies the length of the TCP\n         header in units of octets.\n     \
    \    </paragraph>\n       </description>\n       <reference>\n         <paragraph>\n\
    \         See RFC 793 for the definition of the\n         TCP header.\n      \
    \   </paragraph>\n       </reference>\n       <units>octets</units>\n     </field>\n\
    \     <field name=\"icmpTypeCodeIPv4\" dataType=\"unsigned16\"\n            group=\"\
    transportHeader\"\n            dataTypeSemantics=\"identifier\"\n            elementId=\"\
    32\" applicability=\"all\" status=\"current\">\n       <description>\n       \
    \  <paragraph>\n         Type and Code of the IPv4 ICMP message.  The combination\
    \ of\n         both values is reported as (ICMP type * 256) + ICMP code.\n   \
    \      </paragraph>\n       </description>\n       <reference>\n         <paragraph>\n\
    \         See RFC 792 for the definition of the IPv4 ICMP\n            type and\
    \ code fields.\n         </paragraph>\n       </reference>\n     </field>\n  \
    \   <field name=\"icmpTypeIPv4\" dataType=\"unsigned8\"\n            group=\"\
    transportHeader\"\n            dataTypeSemantics=\"identifier\"\n            elementId=\"\
    176\" applicability=\"all\" status=\"current\">\n       <description>\n      \
    \   <paragraph>\n         Type of the IPv4 ICMP message.\n         </paragraph>\n\
    \       </description>\n       <reference>\n         <paragraph>\n         See\
    \ RFC 792 for the definition of the IPv4 ICMP\n         type field.\n        \
    \ </paragraph>\n       </reference>\n     </field>\n     <field name=\"icmpCodeIPv4\"\
    \ dataType=\"unsigned8\"\n            group=\"transportHeader\"\n            dataTypeSemantics=\"\
    identifier\"\n            elementId=\"177\" applicability=\"all\" status=\"current\"\
    >\n       <description>\n         <paragraph>\n         Code of the IPv4 ICMP\
    \ message.\n         </paragraph>\n       </description>\n       <reference>\n\
    \         <paragraph>\n         See RFC 792 for the definition of the IPv4\n \
    \        ICMP code field.\n         </paragraph>\n       </reference>\n     </field>\n\
    \     <field name=\"icmpTypeCodeIPv6\" dataType=\"unsigned16\"\n            group=\"\
    transportHeader\"\n            dataTypeSemantics=\"identifier\"\n            elementId=\"\
    139\" applicability=\"all\" status=\"current\">\n       <description>\n      \
    \   <paragraph>\n         Type and Code of the IPv6 ICMP message.  The combination\
    \ of\n         both values is reported as (ICMP type * 256) + ICMP code.\n   \
    \      </paragraph>\n       </description>\n       <reference>\n         <paragraph>\n\
    \         See RFC 4443 for the definition of the IPv6\n         ICMP type and\
    \ code fields.\n         </paragraph>\n       </reference>\n     </field>\n  \
    \   <field name=\"icmpTypeIPv6\" dataType=\"unsigned8\"\n            group=\"\
    transportHeader\"\n            dataTypeSemantics=\"identifier\"\n            elementId=\"\
    178\" applicability=\"all\" status=\"current\">\n       <description>\n      \
    \   <paragraph>\n         Type of the IPv6 ICMP message.\n         </paragraph>\n\
    \       </description>\n       <reference>\n         <paragraph>\n         See\
    \ RFC 4443 for the definition of the IPv6\n         ICMP type field.\n       \
    \  </paragraph>\n       </reference>\n     </field>\n     <field name=\"icmpCodeIPv6\"\
    \ dataType=\"unsigned8\"\n            group=\"transportHeader\"\n            dataTypeSemantics=\"\
    identifier\"\n            elementId=\"179\" applicability=\"all\" status=\"current\"\
    >\n       <description>\n         <paragraph>\n         Code of the IPv6 ICMP\
    \ message.\n         </paragraph>\n       </description>\n       <reference>\n\
    \         <paragraph>\n         See RFC 4443 for the definition of the IPv6\n\
    \         ICMP code field.\n         </paragraph>\n       </reference>\n     </field>\n\
    \     <field name=\"igmpType\" dataType=\"unsigned8\"\n            group=\"transportHeader\"\
    \n            dataTypeSemantics=\"identifier\"\n            elementId=\"33\" applicability=\"\
    all\" status=\"current\">\n       <description>\n         <paragraph>\n      \
    \   The type field of the IGMP message.\n         </paragraph>\n       </description>\n\
    \       <reference>\n         <paragraph>\n         See RFC 3376 for the definition\
    \ of the IGMP\n         type field.\n         </paragraph>\n       </reference>\n\
    \     </field>\n     <field name=\"sourceMacAddress\" dataType=\"macAddress\"\n\
    \            group=\"subIpHeader\"\n            dataTypeSemantics=\"identifier\"\
    \n            elementId=\"56\" applicability=\"data\" status=\"current\">\n  \
    \     <description>\n         <paragraph>\n           The IEEE 802 source MAC\
    \ address field.\n         </paragraph>\n       </description>\n       <reference>\n\
    \         <paragraph>\n         See IEEE.802-3.2002.\n         </paragraph>\n\
    \       </reference>\n     </field>\n     <field name=\"postSourceMacAddress\"\
    \ dataType=\"macAddress\"\n            group=\"subIpHeader\"\n            dataTypeSemantics=\"\
    identifier\"\n            elementId=\"81\" applicability=\"data\" status=\"current\"\
    >\n       <description>\n         <paragraph>\n         The definition of this\
    \ Information Element is identical\n         to the definition of Information\
    \ Element\n         'sourceMacAddress', except that it reports a\n         potentially\
    \ modified value caused by a middlebox\n         function after the packet passed\
    \ the Observation Point.\n         </paragraph>\n       </description>\n     \
    \  <reference>\n         <paragraph>\n         See IEEE.802-3.2002.\n        \
    \ </paragraph>\n       </reference>\n     </field>\n     <field name=\"vlanId\"\
    \ dataType=\"unsigned16\"\n            group=\"subIpHeader\"\n            dataTypeSemantics=\"\
    identifier\"\n            elementId=\"58\" applicability=\"data\" status=\"current\"\
    >\n       <description>\n         <paragraph>\n           The IEEE 802.1Q VLAN\
    \ identifier (VID) extracted from the Tag\n           Control Information field\
    \ that was attached to the IP packet.\n         </paragraph>\n       </description>\n\
    \       <reference>\n         <paragraph>\n         See IEEE.802-1Q.2003.\n  \
    \       </paragraph>\n       </reference>\n     </field>\n     <field name=\"\
    postVlanId\" dataType=\"unsigned16\"\n            group=\"subIpHeader\"\n    \
    \        dataTypeSemantics=\"identifier\"\n            elementId=\"59\" applicability=\"\
    data\" status=\"current\">\n       <description>\n         <paragraph>\n     \
    \    The definition of this Information Element is identical\n         to the\
    \ definition of Information Element\n         'vlanId', except that it reports\
    \ a\n         potentially modified value caused by a middlebox\n         function\
    \ after the packet passed the Observation Point.\n         </paragraph>\n    \
    \   </description>\n       <reference>\n         <paragraph>\n         See IEEE.802-1Q.2003.\n\
    \         </paragraph>\n       </reference>\n     </field>\n     <field name=\"\
    destinationMacAddress\" dataType=\"macAddress\"\n            group=\"subIpHeader\"\
    \n            dataTypeSemantics=\"identifier\"\n            elementId=\"80\" applicability=\"\
    data\" status=\"current\">\n       <description>\n         <paragraph>\n     \
    \      The IEEE 802 destination MAC address field.\n         </paragraph>\n  \
    \     </description>\n       <reference>\n         <paragraph>\n         See IEEE.802-3.2002.\n\
    \         </paragraph>\n       </reference>\n     </field>\n     <field name=\"\
    postDestinationMacAddress\" dataType=\"macAddress\"\n            group=\"subIpHeader\"\
    \n            dataTypeSemantics=\"identifier\"\n            elementId=\"57\" applicability=\"\
    data\" status=\"current\">\n       <description>\n         <paragraph>\n     \
    \    The definition of this Information Element is identical\n         to the\
    \ definition of Information Element\n         'destinationMacAddress', except\
    \ that it reports a\n         potentially modified value caused by a middlebox\n\
    \         function after the packet passed the Observation Point.\n         </paragraph>\n\
    \       </description>\n       <reference>\n         <paragraph>\n         See\
    \ IEEE.802-3.2002.\n         </paragraph>\n       </reference>\n     </field>\n\
    \     <field name=\"wlanChannelId\" dataType=\"unsigned8\"\n            group=\"\
    subIpHeader\"\n            dataTypeSemantics=\"identifier\"\n            elementId=\"\
    146\" applicability=\"data\" status=\"current\">\n       <description>\n     \
    \    <paragraph>\n           The identifier of the 802.11 (Wi-Fi) channel used.\n\
    \         </paragraph>\n       </description>\n       <reference>\n         <paragraph>\n\
    \         See IEEE.802-11.1999.\n         </paragraph>\n       </reference>\n\
    \     </field>\n     <field name=\"wlanSSID\" dataType=\"string\"\n          \
    \  group=\"subIpHeader\"\n            elementId=\"147\" applicability=\"data\"\
    \ status=\"current\">\n       <description>\n         <paragraph>\n          \
    \ The Service Set IDentifier (SSID) identifying an 802.11\n           (Wi-Fi)\
    \ network used.  According to IEEE.802-11.1999, the\n           SSID is encoded\
    \ into a string of up to 32 characters.\n         </paragraph>\n       </description>\n\
    \       <reference>\n         <paragraph>\n         See IEEE.802-11.1999.\n  \
    \       </paragraph>\n       </reference>\n     </field>\n     <field name=\"\
    mplsTopLabelTTL\" dataType=\"unsigned8\"\n            group=\"subIpHeader\"\n\
    \            elementId=\"200\" applicability=\"all\" status=\"current\">\n   \
    \    <description>\n         <paragraph>\n         The TTL field from the top\
    \ MPLS label stack entry,\n         i.e., the last label that was pushed.\n  \
    \       </paragraph>\n       </description>\n       <reference>\n         <paragraph>\n\
    \         See RFC 3032 for the specification of the\n         TTL field.\n   \
    \      </paragraph>\n       </reference>\n       <units>hops</units>\n     </field>\n\
    \     <field name=\"mplsTopLabelExp\" dataType=\"unsigned8\"\n            group=\"\
    subIpHeader\"\n            dataTypeSemantics=\"flags\"\n            elementId=\"\
    203\" applicability=\"all\" status=\"current\">\n       <description>\n      \
    \   <paragraph>\n         The Exp field from the top MPLS label stack entry,\n\
    \         i.e., the last label that was pushed.\n         </paragraph>\n     \
    \    <artwork>\n         Bits 0-4:  Don't Care, value is irrelevant.\n       \
    \  Bits 5-7:  MPLS Exp field.\n             0   1   2   3   4   5   6   7\n  \
    \         +---+---+---+---+---+---+---+---+\n           |     don't care    |\
    \    Exp    |\n           +---+---+---+---+---+---+---+---+\n         </artwork>\n\
    \       </description>\n       <reference>\n         <paragraph>\n         See\
    \ RFC 3032 for the specification of the Exp field.\n         See RFC 3270 for\
    \ usage of the Exp field.\n         </paragraph>\n       </reference>\n     </field>\n\
    \     <field name=\"postMplsTopLabelExp\" dataType=\"unsigned8\"\n           \
    \ group=\"subIpHeader\"\n            dataTypeSemantics=\"flags\"\n           \
    \ elementId=\"237\" applicability=\"all\" status=\"current\">\n       <description>\n\
    \         <paragraph>\n         The definition of this Information Element is\
    \ identical to the\n         definition of Information Element 'mplsTopLabelExp',\
    \ except\n         that it reports a potentially modified value caused by a\n\
    \         middlebox function after the packet passed the Observation\n       \
    \  Point.\n         </paragraph>\n       </description>\n       <reference>\n\
    \         <paragraph>\n         See RFC 3032 for the specification of the Exp\
    \ field.\n         See RFC 3270 for usage of the Exp field.\n         </paragraph>\n\
    \       </reference>\n     </field>\n     <field name=\"mplsLabelStackDepth\"\
    \ dataType=\"unsigned32\"\n            group=\"subIpHeader\"\n            elementId=\"\
    202\" applicability=\"all\" status=\"current\">\n       <description>\n      \
    \   <paragraph>\n         The number of labels in the MPLS label stack.\n    \
    \     </paragraph>\n       </description>\n       <reference>\n         <paragraph>\n\
    \         See RFC 3032 for the specification of\n         the MPLS label stack.\n\
    \         </paragraph>\n       </reference>\n       <units>label stack entries</units>\n\
    \     </field>\n     <field name=\"mplsLabelStackLength\" dataType=\"unsigned32\"\
    \n            group=\"subIpHeader\"\n            elementId=\"201\" applicability=\"\
    all\" status=\"current\">\n       <description>\n         <paragraph>\n      \
    \   The length of the MPLS label stack in units of octets.\n         </paragraph>\n\
    \       </description>\n       <reference>\n         <paragraph>\n         See\
    \ RFC 3032 for the specification of\n         the MPLS label stack.\n        \
    \ </paragraph>\n       </reference>\n       <units>octets</units>\n     </field>\n\
    \     <field name=\"mplsPayloadLength\" dataType=\"unsigned32\"\n            group=\"\
    subIpHeader\"\n            elementId=\"194\" applicability=\"all\" status=\"current\"\
    >\n       <description>\n         <paragraph>\n         The size of the MPLS packet\
    \ without the label stack.\n         </paragraph>\n       </description>\n   \
    \    <reference>\n         <paragraph>\n         See RFC 3031 for the specification\
    \ of\n         MPLS packets.\n         See RFC 3032 for the specification of\n\
    \         the MPLS label stack.\n         </paragraph>\n       </reference>\n\
    \       <units>octets</units>\n     </field>\n     <field name=\"mplsTopLabelStackSection\"\
    \ dataType=\"octetArray\"\n            group=\"subIpHeader\"\n            dataTypeSemantics=\"\
    identifier\"\n            elementId=\"70\" applicability=\"all\" status=\"current\"\
    >\n       <description>\n         <paragraph>\n         The Label, Exp, and S\
    \ fields from the top MPLS label\n         stack entry, i.e., from the last label\
    \ that was pushed.\n         </paragraph>\n         <paragraph>\n         The\
    \ size of this Information Element is 3 octets.\n         </paragraph>\n     \
    \    <artwork>\n       0                   1                   2\n       0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                Label                  | Exp |S|\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      Label:  Label Value, 20 bits\n      Exp:    Experimental Use, 3 bits\n\
    \      S:      Bottom of Stack, 1 bit\n         </artwork>\n       </description>\n\
    \       <reference>\n         <paragraph>\n         See RFC 3032.\n         </paragraph>\n\
    \       </reference>\n     </field>\n     <field name=\"mplsLabelStackSection2\"\
    \ dataType=\"octetArray\"\n            group=\"subIpHeader\"\n            dataTypeSemantics=\"\
    identifier\"\n            elementId=\"71\" applicability=\"all\" status=\"current\"\
    >\n       <description>\n         <paragraph>\n         The Label, Exp, and S\
    \ fields from the label stack entry that\n         was pushed immediately before\
    \ the label stack entry that would\n         be reported by mplsTopLabelStackSection.\
    \  See the definition of\n         mplsTopLabelStackSection for further details.\n\
    \         </paragraph>\n         <paragraph>\n         The size of this Information\
    \ Element is 3 octets.\n         </paragraph>\n       </description>\n       <reference>\n\
    \         <paragraph>\n         See RFC 3032.\n         </paragraph>\n       </reference>\n\
    \     </field>\n     <field name=\"mplsLabelStackSection3\" dataType=\"octetArray\"\
    \n            group=\"subIpHeader\"\n            dataTypeSemantics=\"identifier\"\
    \n            elementId=\"72\" applicability=\"all\" status=\"current\">\n   \
    \    <description>\n         <paragraph>\n         The Label, Exp, and S fields\
    \ from the label stack entry that\n         was pushed immediately before the\
    \ label stack entry that would\n         be reported by mplsLabelStackSection2.\
    \  See the definition of\n         mplsTopLabelStackSection for further details.\n\
    \         </paragraph>\n         <paragraph>\n         The size of this Information\
    \ Element is 3 octets.\n         </paragraph>\n       </description>\n       <reference>\n\
    \         <paragraph>\n         See RFC 3032.\n         </paragraph>\n       </reference>\n\
    \     </field>\n     <field name=\"mplsLabelStackSection4\" dataType=\"octetArray\"\
    \n            group=\"subIpHeader\"\n            dataTypeSemantics=\"identifier\"\
    \n            elementId=\"73\" applicability=\"all\" status=\"current\">\n   \
    \    <description>\n         <paragraph>\n         The Label, Exp, and S fields\
    \ from the label stack entry that\n         was pushed immediately before the\
    \ label stack entry that would\n         be reported by mplsLabelStackSection3.\
    \  See the definition of\n         mplsTopLabelStackSection for further details.\n\
    \         </paragraph>\n         <paragraph>\n         The size of this Information\
    \ Element is 3 octets.\n         </paragraph>\n       </description>\n       <reference>\n\
    \         <paragraph>\n         See RFC 3032.\n         </paragraph>\n       </reference>\n\
    \     </field>\n     <field name=\"mplsLabelStackSection5\" dataType=\"octetArray\"\
    \n            group=\"subIpHeader\"\n            dataTypeSemantics=\"identifier\"\
    \n            elementId=\"74\" applicability=\"all\" status=\"current\">\n   \
    \    <description>\n         <paragraph>\n         The Label, Exp, and S fields\
    \ from the label stack entry that\n         was pushed immediately before the\
    \ label stack entry that would\n         be reported by mplsLabelStackSection4.\
    \  See the definition of\n         mplsTopLabelStackSection for further details.\n\
    \         </paragraph>\n         <paragraph>\n         The size of this Information\
    \ Element is 3 octets.\n         </paragraph>\n       </description>\n       <reference>\n\
    \         <paragraph>\n         See RFC 3032.\n         </paragraph>\n       </reference>\n\
    \     </field>\n     <field name=\"mplsLabelStackSection6\" dataType=\"octetArray\"\
    \n            group=\"subIpHeader\"\n            dataTypeSemantics=\"identifier\"\
    \n            elementId=\"75\" applicability=\"all\" status=\"current\">\n   \
    \    <description>\n         <paragraph>\n         The Label, Exp, and S fields\
    \ from the label stack entry that\n         was pushed immediately before the\
    \ label stack entry that would\n         be reported by mplsLabelStackSection5.\
    \  See the definition of\n         mplsTopLabelStackSection for further details.\n\
    \         </paragraph>\n         <paragraph>\n         The size of this Information\
    \ Element is 3 octets.\n         </paragraph>\n       </description>\n       <reference>\n\
    \         <paragraph>\n         See RFC 3032.\n         </paragraph>\n       </reference>\n\
    \     </field>\n     <field name=\"mplsLabelStackSection7\" dataType=\"octetArray\"\
    \n            group=\"subIpHeader\"\n            dataTypeSemantics=\"identifier\"\
    \n            elementId=\"76\" applicability=\"all\" status=\"current\">\n   \
    \    <description>\n         <paragraph>\n         The Label, Exp, and S fields\
    \ from the label stack entry that\n         was pushed immediately before the\
    \ label stack entry that would\n         be reported by mplsLabelStackSection6.\
    \  See the definition of\n         mplsTopLabelStackSection for further details.\n\
    \         </paragraph>\n         <paragraph>\n         The size of this Information\
    \ Element is 3 octets.\n         </paragraph>\n       </description>\n       <reference>\n\
    \         <paragraph>\n         See RFC 3032.\n         </paragraph>\n       </reference>\n\
    \     </field>\n     <field name=\"mplsLabelStackSection8\" dataType=\"octetArray\"\
    \n            group=\"subIpHeader\"\n            dataTypeSemantics=\"identifier\"\
    \n            elementId=\"77\" applicability=\"all\" status=\"current\">\n   \
    \    <description>\n         <paragraph>\n         The Label, Exp, and S fields\
    \ from the label stack entry that\n         was pushed immediately before the\
    \ label stack entry that would\n         be reported by mplsLabelStackSection7.\
    \  See the definition of\n         mplsTopLabelStackSection for further details.\n\
    \         </paragraph>\n         <paragraph>\n         The size of this Information\
    \ Element is 3 octets.\n         </paragraph>\n       </description>\n       <reference>\n\
    \         <paragraph>\n         See RFC 3032.\n         </paragraph>\n       </reference>\n\
    \     </field>\n     <field name=\"mplsLabelStackSection9\" dataType=\"octetArray\"\
    \n            group=\"subIpHeader\"\n            dataTypeSemantics=\"identifier\"\
    \n            elementId=\"78\" applicability=\"all\" status=\"current\">\n   \
    \    <description>\n         <paragraph>\n         The Label, Exp, and S fields\
    \ from the label stack entry that\n         was pushed immediately before the\
    \ label stack entry that would\n         be reported by mplsLabelStackSection8.\
    \  See the definition of\n         mplsTopLabelStackSection for further details.\n\
    \         </paragraph>\n         <paragraph>\n         The size of this Information\
    \ Element is 3 octets.\n         </paragraph>\n       </description>\n       <reference>\n\
    \         <paragraph>\n         See RFC 3032.\n         </paragraph>\n       </reference>\n\
    \     </field>\n     <field name=\"mplsLabelStackSection10\" dataType=\"octetArray\"\
    \n            group=\"subIpHeader\"\n            dataTypeSemantics=\"identifier\"\
    \n            elementId=\"79\" applicability=\"all\" status=\"current\">\n   \
    \    <description>\n         <paragraph>\n         The Label, Exp, and S fields\
    \ from the label stack entry that\n         was pushed immediately before the\
    \ label stack entry that would\n         be reported by mplsLabelStackSection9.\
    \  See the definition of\n         mplsTopLabelStackSection for further details.\n\
    \         </paragraph>\n         <paragraph>\n         The size of this Information\
    \ Element is 3 octets.\n         </paragraph>\n       </description>\n       <reference>\n\
    \         <paragraph>\n         See RFC 3032.\n         </paragraph>\n       </reference>\n\
    \     </field>\n     <field name=\"ipPayloadLength\" dataType=\"unsigned32\"\n\
    \            group=\"derived\"\n            elementId=\"204\" applicability=\"\
    all\" status=\"current\">\n       <description>\n         <paragraph>\n      \
    \   The effective length of the IP payload.\n         </paragraph>\n         <paragraph>\n\
    \         For IPv4 packets, the value of this Information Element is\n       \
    \  the difference between the total length of the IPv4 packet\n         (as reported\
    \ by Information Element totalLengthIPv4) and the\n         length of the IPv4\
    \ header (as reported by Information Element\n         headerLengthIPv4).\n  \
    \       </paragraph>\n         <paragraph>\n         For IPv6, the value of the\
    \ Payload Length field\n         in the IPv6 header is reported except in the\
    \ case that\n         the value of this field is zero and that there is a valid\n\
    \         jumbo payload option.  In this case, the value of the\n         Jumbo\
    \ Payload Length field in the jumbo payload option\n         is reported.\n  \
    \       </paragraph>\n       </description>\n       <reference>\n         <paragraph>\n\
    \         See RFC 791 for the specification of\n         IPv4 packets.\n     \
    \    See RFC 2460 for the specification of the\n         IPv6 payload length.\n\
    \         See RFC 2675 for the specification of the\n         IPv6 jumbo payload\
    \ length.\n         </paragraph>\n       </reference>\n       <units>octets</units>\n\
    \     </field>\n     <field name=\"ipNextHopIPv4Address\" dataType=\"ipv4Address\"\
    \n            group=\"derived\"\n            dataTypeSemantics=\"identifier\"\n\
    \            elementId=\"15\" applicability=\"data\" status=\"current\">\n   \
    \    <description>\n         <paragraph>\n         The IPv4 address of the next\
    \ IPv4 hop.\n         </paragraph>\n       </description>\n     </field>\n   \
    \  <field name=\"ipNextHopIPv6Address\" dataType=\"ipv6Address\"\n           \
    \ group=\"derived\"\n            dataTypeSemantics=\"identifier\"\n          \
    \  elementId=\"62\" applicability=\"data\" status=\"current\">\n       <description>\n\
    \         <paragraph>\n         The IPv6 address of the next IPv6 hop.\n     \
    \    </paragraph>\n       </description>\n     </field>\n     <field name=\"bgpSourceAsNumber\"\
    \ dataType=\"unsigned32\"\n            group=\"derived\"\n            dataTypeSemantics=\"\
    identifier\"\n            elementId=\"16\" applicability=\"all\" status=\"current\"\
    >\n       <description>\n         <paragraph>\n         The autonomous system\
    \ (AS) number of the source IP address.\n         If AS path information for this\
    \ Flow is only available as\n         an unordered AS set (and not as an ordered\
    \ AS sequence),\n         then the value of this Information Element is 0.\n \
    \        </paragraph>\n       </description>\n       <reference>\n         <paragraph>\n\
    \         See RFC 4271 for a description of BGP-4, and see RFC 1930\n        \
    \ for the definition of the AS number.\n         </paragraph>\n       </reference>\n\
    \     </field>\n     <field name=\"bgpDestinationAsNumber\" dataType=\"unsigned32\"\
    \n            group=\"derived\"\n            dataTypeSemantics=\"identifier\"\n\
    \            elementId=\"17\" applicability=\"all\" status=\"current\">\n    \
    \   <description>\n         <paragraph>\n         The autonomous system (AS) number\
    \ of the destination IP\n         address.  If AS path information for this Flow\
    \ is only\n         available as an unordered AS set (and not as an ordered AS\n\
    \         sequence), then the value of this Information Element is 0.\n      \
    \   </paragraph>\n       </description>\n       <reference>\n         <paragraph>\n\
    \         See RFC 4271 for a description of BGP-4, and see RFC 1930 for\n    \
    \        the definition of the AS number.\n         </paragraph>\n       </reference>\n\
    \     </field>\n     <field name=\"bgpNextAdjacentAsNumber\" dataType=\"unsigned32\"\
    \n            group=\"derived\"\n            dataTypeSemantics=\"identifier\"\n\
    \            elementId=\"128\" applicability=\"all\" status=\"current\">\n   \
    \    <description>\n         <paragraph>\n         The autonomous system (AS)\
    \ number of the first AS in the AS\n         path to the destination IP address.\
    \  The path is deduced\n         by looking up the destination IP address of the\
    \ Flow in the\n         BGP routing information base.  If AS path information\
    \ for\n         this Flow is only available as an unordered AS set (and not\n\
    \         as an ordered AS sequence), then the value of this Information\n   \
    \      Element is 0.\n       </paragraph>\n       </description>\n       <reference>\n\
    \         <paragraph>\n         See RFC 4271 for a description of BGP-4, and\n\
    \         see RFC 1930 for the definition of the AS number.\n         </paragraph>\n\
    \       </reference>\n     </field>\n     <field name=\"bgpPrevAdjacentAsNumber\"\
    \ dataType=\"unsigned32\"\n            group=\"derived\"\n            dataTypeSemantics=\"\
    identifier\"\n            elementId=\"129\" applicability=\"all\" status=\"current\"\
    >\n       <description>\n         <paragraph>\n         The autonomous system\
    \ (AS) number of the last AS in the AS\n         path from the source IP address.\
    \  The path is deduced\n         by looking up the source IP address of the Flow\
    \ in the BGP\n         routing information base.  If AS path information for this\n\
    \         Flow is only available as an unordered AS set (and not as\n        \
    \ an ordered AS sequence), then the value of this Information\n         Element\
    \ is 0.  In case of BGP asymmetry, the\n         bgpPrevAdjacentAsNumber might\
    \ not be able to report the correct\n         value.\n       </paragraph>\n  \
    \     </description>\n       <reference>\n         <paragraph>\n         See RFC\
    \ 4271 for a description of BGP-4, and\n         see RFC 1930 for the definition\
    \ of the AS number.\n         </paragraph>\n       </reference>\n     </field>\n\
    \     <field name=\"bgpNextHopIPv4Address\" dataType=\"ipv4Address\"\n       \
    \     group=\"derived\"\n            dataTypeSemantics=\"identifier\"\n      \
    \      elementId=\"18\" applicability=\"all\" status=\"current\">\n       <description>\n\
    \         <paragraph>\n         The IPv4 address of the next (adjacent) BGP hop.\n\
    \         </paragraph>\n       </description>\n       <reference>\n         <paragraph>\n\
    \         See RFC 4271 for a description of BGP-4.\n         </paragraph>\n  \
    \     </reference>\n     </field>\n     <field name=\"bgpNextHopIPv6Address\"\
    \ dataType=\"ipv6Address\"\n            group=\"derived\"\n            dataTypeSemantics=\"\
    identifier\"\n            elementId=\"63\" applicability=\"all\" status=\"current\"\
    >\n       <description>\n         <paragraph>\n         The IPv6 address of the\
    \ next (adjacent) BGP hop.\n         </paragraph>\n       </description>\n   \
    \    <reference>\n         <paragraph>\n         See RFC 4271 for a description\
    \ of BGP-4.\n         </paragraph>\n       </reference>\n     </field>\n     <field\
    \ name=\"mplsTopLabelType\" dataType=\"unsigned8\"\n            group=\"derived\"\
    \n            dataTypeSemantics=\"identifier\"\n            elementId=\"46\" applicability=\"\
    data\" status=\"current\">\n       <description>\n         <paragraph>\n     \
    \    This field identifies the control protocol that allocated the\n         top-of-stack\
    \ label.  Initial values for this field are\n         listed below.  Further values\
    \ may be assigned by IANA in\n         the MPLS label type registry.\n       \
    \  </paragraph>\n         <artwork>\n        - 0x01 TE-MIDPT: Any TE tunnel mid-point\
    \ or tail label\n        - 0x02 Pseudowire: Any PWE3 or Cisco AToM based label\n\
    \        - 0x03 VPN: Any label associated with VPN\n        - 0x04 BGP: Any label\
    \ associated with BGP or BGP routing\n        - 0x05 LDP: Any label associated\
    \ with dynamically assigned\n                    labels using LDP\n         </artwork>\n\
    \       </description>\n       <reference>\n         <paragraph>\n         See\
    \ RFC 3031 for the MPLS label structure.\n         See RFC 4364 for the association\
    \ of MPLS labels\n         with Virtual Private Networks (VPNs).\n         See\
    \ RFC 4271 for BGP and BGP routing.\n         See RFC 5036 for Label Distribution\
    \ Protocol (LDP).\n         See the list of MPLS label types assigned by IANA\
    \ at\n         http://www.iana.org/assignments/mpls-label-values.\n         </paragraph>\n\
    \       </reference>\n     </field>\n     <field name=\"mplsTopLabelIPv4Address\"\
    \ dataType=\"ipv4Address\"\n            group=\"derived\"\n            dataTypeSemantics=\"\
    identifier\"\n            elementId=\"47\" applicability=\"data\" status=\"current\"\
    >\n       <description>\n         <paragraph>\n           The IPv4 address of\
    \ the system that the MPLS top label will\n           cause this Flow to be forwarded\
    \ to.\n         </paragraph>\n       </description>\n       <reference>\n    \
    \     <paragraph>\n         See RFC 3031 for the association between\n       \
    \  MPLS labels and IP addresses.\n         </paragraph>\n       </reference>\n\
    \     </field>\n     <field name=\"mplsTopLabelIPv6Address\" dataType=\"ipv6Address\"\
    \n            group=\"derived\"\n            dataTypeSemantics=\"identifier\"\n\
    \            elementId=\"140\" applicability=\"data\" status=\"current\">\n  \
    \     <description>\n         <paragraph>\n           The IPv6 address of the\
    \ system that the MPLS top label will\n           cause this Flow to be forwarded\
    \ to.\n         </paragraph>\n       </description>\n       <reference>\n    \
    \     <paragraph>\n         See RFC 3031 for the association between\n       \
    \  MPLS labels and IP addresses.\n         </paragraph>\n       </reference>\n\
    \     </field>\n     <field name=\"mplsVpnRouteDistinguisher\" dataType=\"octetArray\"\
    \n            group=\"derived\"\n            dataTypeSemantics=\"identifier\"\n\
    \            elementId=\"90\" applicability=\"all\" status=\"current\">\n    \
    \   <description>\n         <paragraph>\n         The value of the VPN route distinguisher\
    \ of a corresponding\n         entry in a VPN routing and forwarding table.  Route\n\
    \         distinguisher ensures that the same address can be used in\n       \
    \  several different MPLS VPNs and that it is possible for BGP to\n         carry\
    \ several completely different routes to that address, one\n         for each\
    \ VPN.  According to RFC 4364, the size of\n         mplsVpnRouteDistinguisher\
    \ is 8 octets.  However, in RFC 4382 an\n         octet string with flexible length\
    \ was chosen for representing a\n         VPN route distinguisher by object MplsL3VpnRouteDistinguisher.\n\
    \         This choice was made in order to be open to future changes of\n    \
    \     the size.  This idea was adopted when choosing octetArray as\n         abstract\
    \ data type for this Information Element.  The maximum\n         length of this\
    \ Information Element is 256 octets.\n         </paragraph>\n       </description>\n\
    \       <reference>\n         <paragraph>\n         See RFC 4364 for the specification\
    \ of the route\n         distinguisher.  See RFC 4382 for the specification\n\
    \         of the MPLS/BGP Layer 3 Virtual Private Network (VPN)\n         Management\
    \ Information Base.\n         </paragraph>\n       </reference>\n     </field>\n\
    \     <field name=\"minimumIpTotalLength\" dataType=\"unsigned64\"\n         \
    \   group=\"minMax\"\n            elementId=\"25\" applicability=\"all\" status=\"\
    current\">\n       <description>\n         <paragraph>\n         Length of the\
    \ smallest packet observed for this Flow.\n         The packet length includes\
    \ the IP header(s) length and\n         the IP payload length.\n         </paragraph>\n\
    \       </description>\n       <reference>\n         <paragraph>\n         See\
    \ RFC 791 for the specification of the\n         IPv4 total length.\n        \
    \ See RFC 2460 for the specification of the\n         IPv6 payload length.\n \
    \        See RFC 2675 for the specification of the\n         IPv6 jumbo payload\
    \ length.\n         </paragraph>\n       </reference>\n       <units>octets</units>\n\
    \     </field>\n     <field name=\"maximumIpTotalLength\" dataType=\"unsigned64\"\
    \n            group=\"minMax\"\n            elementId=\"26\" applicability=\"\
    all\" status=\"current\">\n       <description>\n         <paragraph>\n      \
    \   Length of the largest packet observed for this Flow.\n         The packet\
    \ length includes the IP header(s) length and\n         the IP payload length.\n\
    \         </paragraph>\n       </description>\n       <reference>\n         <paragraph>\n\
    \         See RFC 791 for the specification of the\n         IPv4 total length.\n\
    \         See RFC 2460 for the specification of the\n         IPv6 payload length.\n\
    \         See RFC 2675 for the specification of the\n         IPv6 jumbo payload\
    \ length.\n         </paragraph>\n       </reference>\n       <units>octets</units>\n\
    \     </field>\n     <field name=\"minimumTTL\" dataType=\"unsigned8\"\n     \
    \       group=\"minMax\"\n            elementId=\"52\" applicability=\"data\"\
    \ status=\"current\">\n       <description>\n         <paragraph>\n          \
    \ Minimum TTL value observed for any packet in this Flow.\n         </paragraph>\n\
    \       </description>\n       <reference>\n         <paragraph>\n         See\
    \ RFC 791 for the definition of the IPv4\n         Time to Live field.\n     \
    \    See RFC 2460 for the definition of the IPv6\n         Hop Limit field.\n\
    \         </paragraph>\n       </reference>\n       <units>hops</units>\n    \
    \ </field>\n     <field name=\"maximumTTL\" dataType=\"unsigned8\"\n         \
    \   group=\"minMax\"\n            elementId=\"53\" applicability=\"data\" status=\"\
    current\">\n       <description>\n         <paragraph>\n           Maximum TTL\
    \ value observed for any packet in this Flow.\n         </paragraph>\n       </description>\n\
    \       <reference>\n        <paragraph>\n        See RFC 791 for the definition\
    \ of the IPv4\n        Time to Live field.\n        See RFC 2460 for the definition\
    \ of the IPv6\n        Hop Limit field.\n        </paragraph>\n       </reference>\n\
    \       <units>hops</units>\n     </field>\n     <field name=\"ipv4Options\" dataType=\"\
    unsigned32\"\n            dataTypeSemantics=\"flags\"\n            group=\"minMax\"\
    \n            elementId=\"208\" applicability=\"all\" status=\"current\">\n  \
    \     <description>\n         <paragraph>\n         IPv4 options in packets of\
    \ this Flow.\n         The information is encoded in a set of bit fields.  For\n\
    \         each valid IPv4 option type, there is a bit in this set.\n         The\
    \ bit is set to 1 if any observed packet of this Flow\n         contains the corresponding\
    \ IPv4 option type.  Otherwise,\n         if no observed packet of this Flow contained\
    \ the\n         respective IPv4 option type, the value of the\n         corresponding\
    \ bit is 0.\n         </paragraph>\n         <paragraph>\n         The list of\
    \ valid IPv4 options is maintained by IANA.\n         Note that for identifying\
    \ an option not just the 5-bit\n         Option Number, but all 8 bits of the\
    \ Option Type need to\n         match one of the IPv4 options specified at\n \
    \        http://www.iana.org/assignments/ip-parameters.\n         </paragraph>\n\
    \         <paragraph>\n         Options are mapped to bits according to their\
    \ option numbers.\n         Option number X is mapped to bit X.\n         The\
    \ mapping is illustrated by the figure below.\n         </paragraph>\n       \
    \  <artwork>\n           0      1      2      3      4      5      6      7\n\
    \       +------+------+------+------+------+------+------+------+\n       | EOOL\
    \ | NOP  | SEC  | LSR  |  TS  |E-SEC |CIPSO |  RR  | ...\n       +------+------+------+------+------+------+------+------+\n\
    \           8      9     10     11     12     13     14     15\n       +------+------+------+------+------+------+------+------+\n\
    \   ... | SID  | SSR  | ZSU  | MTUP | MTUR | FINN | VISA |ENCODE| ...\n      \
    \ +------+------+------+------+------+------+------+------+\n          16    \
    \ 17     18     19     20     21     22     23\n       +------+------+------+------+------+------+------+------+\n\
    \   ... |IMITD | EIP  |  TR  |ADDEXT|RTRALT| SDB  |NSAPA | DPS  | ...\n      \
    \ +------+------+------+------+------+------+------+------+\n          24    \
    \ 25     26     27     28     29     30     31\n       +------+------+------+------+------+------+------+------+\n\
    \   ... | UMP  |  QS  |   to be assigned by IANA  | EXP  |      |\n       +------+------+------+------+------+------+------+------+\n\
    \           Type   Option\n       Bit Value  Name    Reference\n       ---+-----+-------+------------------------------------\n\
    \        0     0   EOOL    End of Options List, RFC 791\n        1     1   NOP\
    \     No Operation, RFC 791\n        2   130   SEC     Security, RFC 1108\n  \
    \      3   131   LSR     Loose Source Route, RFC 791\n        4    68   TS   \
    \   Time Stamp, RFC 791\n        5   133   E-SEC   Extended Security, RFC 1108\n\
    \        6   134   CIPSO   Commercial Security\n        7     7   RR      Record\
    \ Route, RFC 791\n        8   136   SID     Stream ID, RFC 791\n        9   137\
    \   SSR     Strict Source Route, RFC 791\n       10    10   ZSU     Experimental\
    \ Measurement\n       11    11   MTUP    (obsoleted) MTU Probe, RFC 1191\n   \
    \    12    12   MTUR    (obsoleted) MTU Reply, RFC 1191\n       13   205   FINN\
    \    Experimental Flow Control\n       14   142   VISA    Experimental Access\
    \ Control\n       15    15   ENCODE\n       16   144   IMITD   IMI Traffic Descriptor\n\
    \       17   145   EIP     Extended Internet Protocol, RFC 1385\n       18   \
    \ 82   TR      Traceroute, RFC 3193\n       19   147   ADDEXT  Address Extension\n\
    \       20   148   RTRALT  Router Alert, RFC 2113\n       21   149   SDB     Selective\
    \ Directed Broadcast\n       22   150   NSAPA   NSAP Address\n       23   151\
    \   DPS     Dynamic Packet State\n       24   152   UMP     Upstream Multicast\
    \ Pkt.\n       25    25   QS      Quick-Start\n       30    30   EXP     RFC3692-style\
    \ Experiment\n       30    94   EXP     RFC3692-style Experiment\n       30  \
    \ 158   EXP     RFC3692-style Experiment\n       30   222   EXP     RFC3692-style\
    \ Experiment\n       ...  ...   ...     Further options numbers\n            \
    \              may be assigned by IANA\n         </artwork>\n       </description>\n\
    \       <reference>\n         <paragraph>\n         See RFC 791 for the definition\
    \ of IPv4 options.\n         See the list of IPv4 option numbers assigned by IANA\n\
    \         at http://www.iana.org/assignments/ip-parameters.\n         </paragraph>\n\
    \       </reference>\n     </field>\n     <field name=\"ipv6ExtensionHeaders\"\
    \ dataType=\"unsigned32\"\n            dataTypeSemantics=\"flags\"\n         \
    \   group=\"minMax\"\n            elementId=\"64\" applicability=\"all\" status=\"\
    current\">\n       <description>\n         <paragraph>\n         IPv6 extension\
    \ headers observed in packets of this Flow.\n         The information is encoded\
    \ in a set of bit fields.  For\n         each IPv6 option header, there is a bit\
    \ in this set.\n         The bit is set to 1 if any observed packet of this Flow\n\
    \         contains the corresponding IPv6 extension header.\n         Otherwise,\
    \ if no observed packet of this Flow contained\n         the respective IPv6 extension\
    \ header, the value of the\n         corresponding bit is 0.\n         </paragraph>\n\
    \         <artwork>\n              0     1     2     3     4     5     6     7\n\
    \          +-----+-----+-----+-----+-----+-----+-----+-----+\n          | Res\
    \ | FRA1| RH  | FRA0| UNK | Res | HOP | DST |  ...\n          +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \              8     9    10    11    12    13    14    15\n          +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \      ... | PAY | AH  | ESP |         Reserved            | ...\n          +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \             16    17    18    19    20    21    22    23\n          +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \      ... |                  Reserved                     | ...\n          +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \             24    25    26    27    28    29    30    31\n          +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \      ... |                  Reserved                     |\n          +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \        Bit    IPv6 Option   Description\n       0, Res               Reserved\n\
    \       1, FRA1     44       Fragmentation header - not first fragment\n     \
    \  2, RH       43       Routing header\n       3, FRA0     44       Fragment header\
    \ - first fragment\n       4, UNK               Unknown Layer 4 header\n     \
    \                       (compressed, encrypted, not supported)\n       5, Res\
    \               Reserved\n       6, HOP       0       Hop-by-hop option header\n\
    \       7, DST      60       Destination option header\n       8, PAY     108\
    \       Payload compression header\n       9, AH       51       Authentication\
    \ Header\n      10, ESP      50       Encrypted security payload\n      11 to\
    \ 31              Reserved\n         </artwork>\n       </description>\n     \
    \  <reference>\n         <paragraph>\n         See RFC 2460 for the general definition\
    \ of\n         IPv6 extension headers and for the specification of\n         the\
    \ hop-by-hop options header, the routing header,\n         the fragment header,\
    \ and the destination options header.\n         See RFC 4302 for the specification\
    \ of the\n         authentication header.\n         See RFC 4303 for the specification\
    \ of the\n         encapsulating security payload.\n         </paragraph>\n  \
    \     </reference>\n     </field>\n     <field name=\"tcpControlBits\" dataType=\"\
    unsigned8\"\n            dataTypeSemantics=\"flags\"\n            group=\"minMax\"\
    \n            elementId=\"6\" applicability=\"all\" status=\"current\">\n    \
    \   <description>\n         <paragraph>\n         TCP control bits observed for\
    \ packets of this Flow.\n         The information is encoded in a set of bit fields.\n\
    \         For each TCP control bit, there is a bit in this\n         set.  A bit\
    \ is set to 1 if any observed packet of this\n         Flow has the corresponding\
    \ TCP control bit set to 1.\n         A value of 0 for a bit indicates that the\
    \ corresponding\n         bit was not set in any of the observed packets\n   \
    \      of this Flow.\n         </paragraph>\n         <artwork>\n          0 \
    \    1     2     3     4     5     6     7\n      +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \      |  Reserved | URG | ACK | PSH | RST | SYN | FIN |\n      +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \      Reserved:  Reserved for future use by TCP.  Must be zero.\n           URG:\
    \  Urgent Pointer field significant\n           ACK:  Acknowledgment field significant\n\
    \           PSH:  Push Function\n           RST:  Reset the connection\n     \
    \      SYN:  Synchronize sequence numbers\n           FIN:  No more data from\
    \ sender\n         </artwork>\n       </description>\n       <reference>\n   \
    \      <paragraph>\n         See RFC 793 for the definition of\n         the TCP\
    \ control bits in the TCP header.\n         </paragraph>\n       </reference>\n\
    \     </field>\n     <field name=\"tcpOptions\" dataType=\"unsigned64\"\n    \
    \        dataTypeSemantics=\"flags\"\n            group=\"minMax\"\n         \
    \   elementId=\"209\" applicability=\"all\" status=\"current\">\n       <description>\n\
    \         <paragraph>\n        TCP options in packets of this Flow.\n        The\
    \ information is encoded in a set of bit fields.  For\n        each TCP option,\
    \ there is a bit in this set.\n        The bit is set to 1 if any observed packet\
    \ of this Flow\n        contains the corresponding TCP option.\n        Otherwise,\
    \ if no observed packet of this Flow contained\n        the respective TCP option,\
    \ the value of the\n        corresponding bit is 0.\n         </paragraph>\n \
    \        <paragraph>\n         Options are mapped to bits according to their option\n\
    \         numbers.  Option number X is mapped to bit X.\n         TCP option numbers\
    \ are maintained by IANA.\n         </paragraph>\n         <artwork>\n       \
    \       0     1     2     3     4     5     6     7\n          +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \          |   0 |   1 |   2 |   3 |   4 |   5 |   6 |   7 |  ...\n          +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \              8     9    10    11    12    13    14    15\n          +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \      ... |   8 |   9 |  10 |  11 |  12 |  13 |  14 |  15 |...\n          +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \             16    17    18    19    20    21    22    23\n          +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \      ... |  16 |  17 |  18 |  19 |  20 |  21 |  22 |  23 |...\n          +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \                                . . .\n             56    57    58    59    60\
    \    61    62    63\n          +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \      ... |  56 |  57 |  58 |  59 |  60 |  61 |  62 |  63 |\n          +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \         </artwork>\n       </description>\n       <reference>\n         <paragraph>\n\
    \         See RFC 793 for the definition of TCP options.\n         See the list\
    \ of TCP option numbers assigned by IANA\n         at http://www.iana.org/assignments/tcp-parameters.\n\
    \         </paragraph>\n       </reference>\n     </field>\n     <field name=\"\
    flowStartSeconds\" dataType=\"dateTimeSeconds\"\n            group=\"timestamp\"\
    \n            elementId=\"150\" applicability=\"data\" status=\"current\">\n \
    \      <description>\n         <paragraph>\n         The absolute timestamp of\
    \ the first packet of this Flow.\n         </paragraph>\n       </description>\n\
    \       <units>seconds</units>\n     </field>\n     <field name=\"flowEndSeconds\"\
    \ dataType=\"dateTimeSeconds\"\n            group=\"timestamp\"\n            elementId=\"\
    151\" applicability=\"data\" status=\"current\">\n       <description>\n     \
    \    <paragraph>\n         The absolute timestamp of the last packet of this Flow.\n\
    \         </paragraph>\n       </description>\n       <units>seconds</units>\n\
    \     </field>\n     <field name=\"flowStartMilliseconds\" dataType=\"dateTimeMilliseconds\"\
    \n            group=\"timestamp\"\n            elementId=\"152\" applicability=\"\
    data\" status=\"current\">\n       <description>\n         <paragraph>\n     \
    \    The absolute timestamp of the first packet of this Flow.\n         </paragraph>\n\
    \       </description>\n       <units>milliseconds</units>\n     </field>\n  \
    \   <field name=\"flowEndMilliseconds\" dataType=\"dateTimeMilliseconds\"\n  \
    \          group=\"timestamp\"\n            elementId=\"153\" applicability=\"\
    data\" status=\"current\">\n       <description>\n         <paragraph>\n     \
    \    The absolute timestamp of the last packet of this Flow.\n         </paragraph>\n\
    \       </description>\n       <units>milliseconds</units>\n     </field>\n  \
    \   <field name=\"flowStartMicroseconds\" dataType=\"dateTimeMicroseconds\"\n\
    \            group=\"timestamp\"\n            elementId=\"154\" applicability=\"\
    data\" status=\"current\">\n       <description>\n         <paragraph>\n     \
    \    The absolute timestamp of the first packet of this Flow.\n         </paragraph>\n\
    \       </description>\n       <units>microseconds</units>\n     </field>\n  \
    \   <field name=\"flowEndMicroseconds\" dataType=\"dateTimeMicroseconds\"\n  \
    \          group=\"timestamp\"\n            elementId=\"155\" applicability=\"\
    data\" status=\"current\">\n       <description>\n         <paragraph>\n     \
    \    The absolute timestamp of the last packet of this Flow.\n         </paragraph>\n\
    \       </description>\n       <units>microseconds</units>\n     </field>\n  \
    \   <field name=\"flowStartNanoseconds\" dataType=\"dateTimeNanoseconds\"\n  \
    \          group=\"timestamp\"\n            elementId=\"156\" applicability=\"\
    data\" status=\"current\">\n       <description>\n         <paragraph>\n     \
    \    The absolute timestamp of the first packet of this Flow.\n         </paragraph>\n\
    \       </description>\n       <units>nanoseconds</units>\n     </field>\n   \
    \  <field name=\"flowEndNanoseconds\" dataType=\"dateTimeNanoseconds\"\n     \
    \       group=\"timestamp\"\n            elementId=\"157\" applicability=\"data\"\
    \ status=\"current\">\n       <description>\n         <paragraph>\n         The\
    \ absolute timestamp of the last packet of this Flow.\n         </paragraph>\n\
    \       </description>\n       <units>nanoseconds</units>\n     </field>\n   \
    \  <field name=\"flowStartDeltaMicroseconds\" dataType=\"unsigned32\"\n      \
    \      group=\"timestamp\"\n            elementId=\"158\" applicability=\"data\"\
    \ status=\"current\">\n       <description>\n         <paragraph>\n         This\
    \ is a relative timestamp only valid within the scope\n         of a single IPFIX\
    \ Message.  It contains the negative time\n         offset of the first observed\
    \ packet of this Flow relative\n         to the export time specified in the IPFIX\
    \ Message Header.\n         </paragraph>\n       </description>\n       <reference>\n\
    \         <paragraph>\n         See the IPFIX protocol specification [RFC5101]\
    \ for the\n         definition of the IPFIX Message Header.\n         </paragraph>\n\
    \       </reference>\n       <units>microseconds</units>\n     </field>\n    \
    \ <field name=\"flowEndDeltaMicroseconds\" dataType=\"unsigned32\"\n         \
    \   group=\"timestamp\"\n            elementId=\"159\" applicability=\"data\"\
    \ status=\"current\">\n       <description>\n         <paragraph>\n         This\
    \ is a relative timestamp only valid within the scope\n         of a single IPFIX\
    \ Message.  It contains the negative time\n         offset of the last observed\
    \ packet of this Flow relative\n         to the export time specified in the IPFIX\
    \ Message Header.\n         </paragraph>\n       </description>\n       <reference>\n\
    \         <paragraph>\n         See the IPFIX protocol specification [RFC5101]\
    \ for the\n         definition of the IPFIX Message Header.\n         </paragraph>\n\
    \       </reference>\n       <units>microseconds</units>\n     </field>\n    \
    \ <field name=\"systemInitTimeMilliseconds\"\n            dataType=\"dateTimeMilliseconds\"\
    \n            group=\"timestamp\"\n            elementId=\"160\" applicability=\"\
    data\" status=\"current\">\n       <description>\n         <paragraph>\n     \
    \    The absolute timestamp of the last (re-)initialization of the\n         IPFIX\
    \ Device.\n         </paragraph>\n       </description>\n       <units>milliseconds</units>\n\
    \     </field>\n     <field name=\"flowStartSysUpTime\" dataType=\"unsigned32\"\
    \n            group=\"timestamp\"\n            elementId=\"22\" applicability=\"\
    data\" status=\"current\">\n       <description>\n         <paragraph>\n     \
    \    The relative timestamp of the first packet of this Flow.\n         It indicates\
    \ the number of milliseconds since the\n         last (re-)initialization of the\
    \ IPFIX Device (sysUpTime).\n         </paragraph>\n       </description>\n  \
    \     <units>milliseconds</units>\n     </field>\n     <field name=\"flowEndSysUpTime\"\
    \ dataType=\"unsigned32\"\n            group=\"timestamp\"\n            elementId=\"\
    21\" applicability=\"data\" status=\"current\">\n       <description>\n      \
    \   <paragraph>\n         The relative timestamp of the last packet of this Flow.\n\
    \         It indicates the number of milliseconds since the\n         last (re-)initialization\
    \ of the IPFIX Device (sysUpTime).\n         </paragraph>\n       </description>\n\
    \       <units>milliseconds</units>\n     </field>\n     <field name=\"octetDeltaCount\"\
    \ dataType=\"unsigned64\"\n            dataTypeSemantics=\"deltaCounter\"\n  \
    \          group=\"flowCounter\"\n            elementId=\"1\" applicability=\"\
    data\" status=\"current\">\n       <description>\n         <paragraph>\n     \
    \    The number of octets since the previous report (if any)\n         in incoming\
    \ packets for this Flow at the Observation Point.\n         The number of octets\
    \ includes IP header(s) and IP payload.\n         </paragraph>\n       </description>\n\
    \       <units>octets</units>\n     </field>\n     <field name=\"postOctetDeltaCount\"\
    \ dataType=\"unsigned64\"\n            dataTypeSemantics=\"deltaCounter\"\n  \
    \          group=\"flowCounter\"\n            elementId=\"23\" applicability=\"\
    data\" status=\"current\">\n       <description>\n         <paragraph>\n     \
    \    The definition of this Information Element is identical\n         to the\
    \ definition of Information Element\n         'octetDeltaCount', except that it\
    \ reports a\n         potentially modified value caused by a middlebox\n     \
    \    function after the packet passed the Observation Point.\n         </paragraph>\n\
    \       </description>\n       <units>octets</units>\n     </field>\n     <field\
    \ name=\"octetDeltaSumOfSquares\" dataType=\"unsigned64\"\n            group=\"\
    flowCounter\"\n            elementId=\"198\" applicability=\"data\" status=\"\
    current\">\n       <description>\n         <paragraph>\n         The sum of the\
    \ squared numbers of octets per incoming\n         packet since the previous report\
    \ (if any) for this\n         Flow at the Observation Point.\n         The number\
    \ of octets includes IP header(s) and IP payload.\n         </paragraph>\n   \
    \    </description>\n     </field>\n     <field name=\"octetTotalCount\" dataType=\"\
    unsigned64\"\n            dataTypeSemantics=\"totalCounter\"\n            group=\"\
    flowCounter\"\n            elementId=\"85\" applicability=\"all\" status=\"current\"\
    >\n       <description>\n         <paragraph>\n         The total number of octets\
    \ in incoming packets\n         for this Flow at the Observation Point since the\
    \ Metering\n         Process (re-)initialization for this Observation Point. \
    \ The\n         number of octets includes IP header(s) and IP payload.\n     \
    \    </paragraph>\n       </description>\n       <units>octets</units>\n     </field>\n\
    \     <field name=\"postOctetTotalCount\" dataType=\"unsigned64\"\n          \
    \  dataTypeSemantics=\"totalCounter\"\n            group=\"flowCounter\"\n   \
    \         elementId=\"171\" applicability=\"all\" status=\"current\">\n      \
    \ <description>\n         <paragraph>\n         The definition of this Information\
    \ Element is identical\n         to the definition of Information Element\n  \
    \       'octetTotalCount', except that it reports a\n         potentially modified\
    \ value caused by a middlebox\n         function after the packet passed the Observation\
    \ Point.\n         </paragraph>\n       </description>\n       <units>octets</units>\n\
    \     </field>\n     <field name=\"octetTotalSumOfSquares\" dataType=\"unsigned64\"\
    \n            group=\"flowCounter\"\n            elementId=\"199\" applicability=\"\
    all\" status=\"current\">\n       <description>\n         <paragraph>\n      \
    \   The total sum of the squared numbers of octets in incoming\n         packets\
    \ for this Flow at the Observation Point since the\n         Metering Process\
    \ (re-)initialization for this Observation\n         Point.  The number of octets\
    \ includes IP header(s) and IP\n         payload.\n         </paragraph>\n   \
    \    </description>\n       <units>octets</units>\n     </field>\n     <field\
    \ name=\"packetDeltaCount\" dataType=\"unsigned64\"\n            dataTypeSemantics=\"\
    deltaCounter\"\n            group=\"flowCounter\"\n            elementId=\"2\"\
    \ applicability=\"data\" status=\"current\">\n       <description>\n         <paragraph>\n\
    \         The number of incoming packets since the previous report\n         (if\
    \ any) for this Flow at the Observation Point.\n         </paragraph>\n      \
    \ </description>\n       <units>packets</units>\n     </field>\n     <field name=\"\
    postPacketDeltaCount\" dataType=\"unsigned64\"\n            dataTypeSemantics=\"\
    deltaCounter\"\n            group=\"flowCounter\"\n            elementId=\"24\"\
    \ applicability=\"data\" status=\"current\">\n       <description>\n         <paragraph>\n\
    \         The definition of this Information Element is identical\n         to\
    \ the definition of Information Element\n         'packetDeltaCount', except that\
    \ it reports a\n         potentially modified value caused by a middlebox\n  \
    \       function after the packet passed the Observation Point.\n         </paragraph>\n\
    \       </description>\n       <units>packets</units>\n     </field>\n     <field\
    \ name=\"packetTotalCount\" dataType=\"unsigned64\"\n            dataTypeSemantics=\"\
    totalCounter\"\n            group=\"flowCounter\"\n            elementId=\"86\"\
    \ applicability=\"all\" status=\"current\">\n       <description>\n         <paragraph>\n\
    \         The total number of incoming packets for this Flow\n         at the\
    \ Observation Point since the Metering Process\n         (re-)initialization for\
    \ this Observation Point.\n         </paragraph>\n       </description>\n    \
    \   <units>packets</units>\n     </field>\n     <field name=\"postPacketTotalCount\"\
    \ dataType=\"unsigned64\"\n            dataTypeSemantics=\"totalCounter\"\n  \
    \          group=\"flowCounter\"\n            elementId=\"172\" applicability=\"\
    all\" status=\"current\">\n       <description>\n         <paragraph>\n      \
    \   The definition of this Information Element is identical\n         to the definition\
    \ of Information Element\n         'packetTotalCount', except that it reports\
    \ a\n         potentially modified value caused by a middlebox\n         function\
    \ after the packet passed the Observation Point.\n         </paragraph>\n    \
    \   </description>\n       <units>packets</units>\n     </field>\n     <field\
    \ name=\"droppedOctetDeltaCount\" dataType=\"unsigned64\"\n            dataTypeSemantics=\"\
    deltaCounter\"\n            group=\"flowCounter\"\n            elementId=\"132\"\
    \ applicability=\"data\" status=\"current\">\n       <description>\n         <paragraph>\n\
    \         The number of octets since the previous report (if any)\n         in\
    \ packets of this Flow dropped by packet treatment.\n         The number of octets\
    \ includes IP header(s) and IP payload.\n         </paragraph>\n       </description>\n\
    \       <units>octets</units>\n     </field>\n     <field name=\"droppedPacketDeltaCount\"\
    \ dataType=\"unsigned64\"\n            dataTypeSemantics=\"deltaCounter\"\n  \
    \          group=\"flowCounter\"\n            elementId=\"133\" applicability=\"\
    data\" status=\"current\">\n       <description>\n         <paragraph>\n     \
    \    The number of packets since the previous report (if any)\n         of this\
    \ Flow dropped by packet treatment.\n         </paragraph>\n       </description>\n\
    \       <units>packets</units>\n     </field>\n     <field name=\"droppedOctetTotalCount\"\
    \ dataType=\"unsigned64\"\n            dataTypeSemantics=\"totalCounter\"\n  \
    \          group=\"flowCounter\"\n            elementId=\"134\" applicability=\"\
    data\" status=\"current\">\n       <description>\n         <paragraph>\n     \
    \    The total number of octets in packets of this Flow dropped\n         by packet\
    \ treatment since the Metering Process\n         (re-)initialization for this\
    \ Observation Point.\n         The number of octets includes IP header(s) and\
    \ IP payload.\n         </paragraph>\n       </description>\n       <units>octets</units>\n\
    \     </field>\n     <field name=\"droppedPacketTotalCount\" dataType=\"unsigned64\"\
    \n            dataTypeSemantics=\"totalCounter\"\n            group=\"flowCounter\"\
    \n            elementId=\"135\" applicability=\"data\" status=\"current\">\n \
    \      <description>\n         <paragraph>\n         The number of packets of\
    \ this Flow dropped by packet\n         treatment since the Metering Process\n\
    \         (re-)initialization for this Observation Point.\n         </paragraph>\n\
    \       </description>\n       <units>packets</units>\n     </field>\n     <field\
    \ name=\"postMCastPacketDeltaCount\" dataType=\"unsigned64\"\n            dataTypeSemantics=\"\
    deltaCounter\"\n            group=\"flowCounter\"\n            elementId=\"19\"\
    \ applicability=\"data\" status=\"current\">\n       <description>\n         <paragraph>\n\
    \         The number of outgoing multicast packets since the\n         previous\
    \ report (if any) sent for packets of this Flow\n         by a multicast daemon\
    \ within the Observation Domain.\n         This property cannot necessarily be\
    \ observed at the\n         Observation Point, but may be retrieved by other means.\n\
    \         </paragraph>\n       </description>\n       <units>packets</units>\n\
    \     </field>\n     <field name=\"postMCastOctetDeltaCount\" dataType=\"unsigned64\"\
    \n            dataTypeSemantics=\"deltaCounter\"\n            group=\"flowCounter\"\
    \n            elementId=\"20\" applicability=\"data\" status=\"current\">\n  \
    \     <description>\n         <paragraph>\n         The number of octets since\
    \ the previous report (if any)\n         in outgoing multicast packets sent for\
    \ packets of this\n         Flow by a multicast daemon within the Observation\
    \ Domain.\n         This property cannot necessarily be observed at the\n    \
    \     Observation Point, but may be retrieved by other means.\n         The number\
    \ of octets includes IP header(s) and IP payload.\n         </paragraph>\n   \
    \    </description>\n       <units>octets</units>\n     </field>\n     <field\
    \ name=\"postMCastPacketTotalCount\" dataType=\"unsigned64\"\n            dataTypeSemantics=\"\
    totalCounter\"\n            group=\"flowCounter\"\n            elementId=\"174\"\
    \ applicability=\"data\" status=\"current\">\n       <description>\n         <paragraph>\n\
    \         The total number of outgoing multicast packets sent for\n         packets\
    \ of this Flow by a multicast daemon within the\n         Observation Domain since\
    \ the Metering Process\n         (re-)initialization.  This property cannot necessarily\n\
    \         be observed at the Observation Point, but may be retrieved\n       \
    \  by other means.\n         </paragraph>\n       </description>\n       <units>packets</units>\n\
    \     </field>\n     <field name=\"postMCastOctetTotalCount\" dataType=\"unsigned64\"\
    \n            dataTypeSemantics=\"totalCounter\"\n            group=\"flowCounter\"\
    \n            elementId=\"175\" applicability=\"data\" status=\"current\">\n \
    \      <description>\n         <paragraph>\n         The total number of octets\
    \ in outgoing multicast packets\n         sent for packets of this Flow by a multicast\
    \ daemon in the\n         Observation Domain since the Metering Process\n    \
    \     (re-)initialization.  This property cannot necessarily be\n         observed\
    \ at the Observation Point, but may be retrieved by\n         other means.\n \
    \        The number of octets includes IP header(s) and IP payload.\n        \
    \ </paragraph>\n       </description>\n       <units>octets</units>\n     </field>\n\
    \     <field name=\"tcpSynTotalCount\" dataType=\"unsigned64\"\n            dataTypeSemantics=\"\
    totalCounter\"\n            group=\"flowCounter\"\n            elementId=\"218\"\
    \ applicability=\"data\" status=\"current\">\n       <description>\n         <paragraph>\n\
    \          The total number of packets of this Flow with\n          TCP \"Synchronize\
    \ sequence numbers\" (SYN) flag set.\n         </paragraph>\n       </description>\n\
    \       <reference>\n         <paragraph>\n         See RFC 793 for the definition\
    \ of the TCP SYN flag.\n         </paragraph>\n       </reference>\n       <units>packets</units>\n\
    \     </field>\n     <field name=\"tcpFinTotalCount\" dataType=\"unsigned64\"\n\
    \            dataTypeSemantics=\"totalCounter\"\n            group=\"flowCounter\"\
    \n            elementId=\"219\" applicability=\"data\" status=\"current\">\n \
    \      <description>\n         <paragraph>\n          The total number of packets\
    \ of this Flow with\n          TCP \"No more data from sender\" (FIN) flag set.\n\
    \         </paragraph>\n       </description>\n       <reference>\n         <paragraph>\n\
    \         See RFC 793 for the definition of the TCP FIN flag.\n         </paragraph>\n\
    \       </reference>\n       <units>packets</units>\n     </field>\n     <field\
    \ name=\"tcpRstTotalCount\" dataType=\"unsigned64\"\n            dataTypeSemantics=\"\
    totalCounter\"\n            group=\"flowCounter\"\n            elementId=\"220\"\
    \ applicability=\"data\" status=\"current\">\n       <description>\n         <paragraph>\n\
    \          The total number of packets of this Flow with\n          TCP \"Reset\
    \ the connection\" (RST) flag set.\n         </paragraph>\n       </description>\n\
    \       <reference>\n         <paragraph>\n         See RFC 793 for the definition\
    \ of the TCP RST flag.\n         </paragraph>\n       </reference>\n       <units>packets</units>\n\
    \     </field>\n     <field name=\"tcpPshTotalCount\" dataType=\"unsigned64\"\n\
    \            dataTypeSemantics=\"totalCounter\"\n            group=\"flowCounter\"\
    \n            elementId=\"221\" applicability=\"data\" status=\"current\">\n \
    \      <description>\n         <paragraph>\n          The total number of packets\
    \ of this Flow with\n          TCP \"Push Function\" (PSH) flag set.\n       \
    \  </paragraph>\n       </description>\n       <reference>\n         <paragraph>\n\
    \         See RFC 793 for the definition of the TCP PSH flag.\n         </paragraph>\n\
    \       </reference>\n       <units>packets</units>\n     </field>\n     <field\
    \ name=\"tcpAckTotalCount\" dataType=\"unsigned64\"\n            dataTypeSemantics=\"\
    totalCounter\"\n            group=\"flowCounter\"\n            elementId=\"222\"\
    \ applicability=\"data\" status=\"current\">\n       <description>\n         <paragraph>\n\
    \          The total number of packets of this Flow with\n          TCP \"Acknowledgment\
    \ field significant\" (ACK) flag set.\n         </paragraph>\n       </description>\n\
    \       <reference>\n         <paragraph>\n         See RFC 793 for the definition\
    \ of the TCP ACK flag.\n         </paragraph>\n       </reference>\n       <units>packets</units>\n\
    \     </field>\n     <field name=\"tcpUrgTotalCount\" dataType=\"unsigned64\"\n\
    \            dataTypeSemantics=\"totalCounter\"\n            group=\"flowCounter\"\
    \n            elementId=\"223\" applicability=\"data\" status=\"current\">\n \
    \      <description>\n         <paragraph>\n          The total number of packets\
    \ of this Flow with\n          TCP \"Urgent Pointer field significant\" (URG)\
    \ flag set.\n         </paragraph>\n       </description>\n       <reference>\n\
    \         <paragraph>\n         See RFC 793 for the definition of the TCP URG\
    \ flag.\n         </paragraph>\n       </reference>\n       <units>packets</units>\n\
    \     </field>\n     <field name=\"flowActiveTimeout\" dataType=\"unsigned16\"\
    \n            group=\"misc\"\n            elementId=\"36\" applicability=\"all\"\
    \ status=\"current\">\n       <description>\n         <paragraph>\n         The\
    \ number of seconds after which an active Flow is timed out\n         anyway,\
    \ even if there is still a continuous flow of packets.\n         </paragraph>\n\
    \       </description>\n       <units>seconds</units>\n     </field>\n     <field\
    \ name=\"flowIdleTimeout\" dataType=\"unsigned16\"\n            group=\"misc\"\
    \n            elementId=\"37\" applicability=\"all\" status=\"current\">\n   \
    \    <description>\n         <paragraph>\n          A Flow is considered to be\
    \ timed out if no packets belonging\n          to the Flow have been observed\
    \ for the number of seconds\n          specified by this field.\n         </paragraph>\n\
    \       </description>\n       <units>seconds</units>\n     </field>\n     <field\
    \ name=\"flowEndReason\" dataType=\"unsigned8\"\n            group=\"misc\"\n\
    \            dataTypeSemantics=\"identifier\"\n            elementId=\"136\" applicability=\"\
    data\" status=\"current\">\n       <description>\n         <paragraph>\n     \
    \    The reason for Flow termination.  The range of values includes\n        \
    \ the following:\n         </paragraph>\n         <artwork>\n      0x01: idle\
    \ timeout\n            The Flow was terminated because it was considered to be\n\
    \            idle.\n      0x02: active timeout\n            The Flow was terminated\
    \ for reporting purposes while it was\n            still active, for example,\
    \ after the maximum lifetime of\n            unreported Flows was reached.\n \
    \     0x03: end of Flow detected\n            The Flow was terminated because\
    \ the Metering Process\n            detected signals indicating the end of the\
    \ Flow,\n            for example, the TCP FIN flag.\n      0x04: forced end\n\
    \            The Flow was terminated because of some external event,\n       \
    \     for example, a shutdown of the Metering Process initiated\n            by\
    \ a network management application.\n      0x05: lack of resources\n         \
    \   The Flow was terminated because of lack of resources\n            available\
    \ to the Metering Process and/or the Exporting\n            Process.\n       \
    \  </artwork>\n       </description>\n     </field>\n     <field name=\"flowDurationMilliseconds\"\
    \ dataType=\"unsigned32\"\n            group=\"misc\"\n            elementId=\"\
    161\" applicability=\"data\" status=\"current\">\n       <description>\n     \
    \    <paragraph>\n         The difference in time between the first observed packet\n\
    \         of this Flow and the last observed packet of this Flow.\n         </paragraph>\n\
    \       </description>\n       <units>milliseconds</units>\n     </field>\n  \
    \   <field name=\"flowDurationMicroseconds\" dataType=\"unsigned32\"\n       \
    \     group=\"misc\"\n            elementId=\"162\" applicability=\"data\" status=\"\
    current\">\n       <description>\n         <paragraph>\n         The difference\
    \ in time between the first observed packet\n         of this Flow and the last\
    \ observed packet of this Flow.\n         </paragraph>\n       </description>\n\
    \       <units>microseconds</units>\n     </field>\n     <field name=\"flowDirection\"\
    \ dataType=\"unsigned8\"\n            dataTypeSemantics=\"identifier\"\n     \
    \       group=\"misc\"\n            elementId=\"61\" applicability=\"data\" status=\"\
    current\">\n       <description>\n         <paragraph>\n         The direction\
    \ of the Flow observed at the Observation\n         Point.  There are only two\
    \ values defined.\n         </paragraph>\n         <artwork>\n         0x00: ingress\
    \ flow\n         0x01: egress flow\n         </artwork>\n       </description>\n\
    \     </field>\n     <field name=\"paddingOctets\" dataType=\"octetArray\"\n \
    \           group=\"padding\"\n            elementId=\"210\" applicability=\"\
    option\" status=\"current\">\n       <description>\n         <paragraph>\n   \
    \        The value of this Information Element is always a sequence of\n     \
    \      0x00 values.\n         </paragraph>\n       </description>\n     </field>\n\
    \   </fieldDefinitions>\n"
- title: Appendix B.  XML Specification of Abstract Data Types
  contents:
  - "Appendix B.  XML Specification of Abstract Data Types\n   This appendix contains\
    \ a machine-readable description of the abstract\n   data types to be used for\
    \ IPFIX Information Elements and a machine-\n   readable description of the template\
    \ used for defining IPFIX\n   Information Elements.  Note that this appendix is\
    \ of informational\n   nature, while the text in Sections 2 and 3 (generated from\
    \ this\n   appendix) is normative.\n   At the same time, this appendix is also\
    \ an XML schema that was used\n   for creating the XML specification of Information\
    \ Elements in\n   Appendix A.  It may also be used for specifying further Information\n\
    \   Elements in extensions of the IPFIX information model.  This schema\n   and\
    \ its namespace are registered by IANA at\n   http://www.iana.org/assignments/xml-registry/schema/ipfix.xsd.\n\
    \   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <schema targetNamespace=\"\
    urn:ietf:params:xml:ns:ipfix-info\"\n           xmlns:ipfix=\"urn:ietf:params:xml:ns:ipfix-info\"\
    \n           xmlns=\"http://www.w3.org/2001/XMLSchema\"\n           elementFormDefault=\"\
    qualified\">\n     <simpleType name=\"dataType\">\n       <restriction base=\"\
    string\">\n         <enumeration value=\"unsigned8\">\n           <annotation>\n\
    \             <documentation>The type \"unsigned8\" represents a\n           \
    \    non-negative integer value in the range of 0 to 255.\n             </documentation>\n\
    \           </annotation>\n         </enumeration>\n         <enumeration value=\"\
    unsigned16\">\n           <annotation>\n             <documentation>The type \"\
    unsigned16\" represents a\n               non-negative integer value in the range\
    \ of 0 to 65535.\n             </documentation>\n           </annotation>\n  \
    \       </enumeration>\n         <enumeration value=\"unsigned32\">\n        \
    \   <annotation>\n             <documentation>The type \"unsigned32\" represents\
    \ a\n                non-negative integer value in the range of 0 to\n       \
    \         4294967295.\n             </documentation>\n           </annotation>\n\
    \         </enumeration>\n         <enumeration value=\"unsigned64\">\n      \
    \     <annotation>\n             <documentation>The type \"unsigned64\" represents\
    \ a\n               non-negative integer value in the range of 0 to\n        \
    \       18446744073709551615.\n             </documentation>\n           </annotation>\n\
    \         </enumeration>\n         <enumeration value=\"signed8\">\n         \
    \  <annotation>\n             <documentation>The type \"signed8\" represents\n\
    \               an integer value in the range of -128 to 127.\n             </documentation>\n\
    \           </annotation>\n         </enumeration>\n         <enumeration value=\"\
    signed16\">\n           <annotation>\n             <documentation>The type \"\
    signed16\" represents an\n               integer value in the range of -32768\
    \ to 32767.\n             </documentation>\n           </annotation>\n       \
    \  </enumeration>\n         <enumeration value=\"signed32\">\n           <annotation>\n\
    \             <documentation>The type \"signed32\" represents an\n           \
    \     integer value in the range of -2147483648 to\n                2147483647.\n\
    \             </documentation>\n           </annotation>\n         </enumeration>\n\
    \         <enumeration value=\"signed64\">\n           <annotation>\n        \
    \     <documentation>The type \"signed64\" represents an\n                integer\
    \ value in the range of -9223372036854775808\n                to 9223372036854775807.\n\
    \             </documentation>\n           </annotation>\n         </enumeration>\n\
    \         <enumeration value=\"float32\">\n           <annotation>\n         \
    \    <documentation>The type \"float32\" corresponds to an IEEE\n            \
    \   single-precision 32-bit floating point type as defined\n               in\
    \ [IEEE.754.1985].\n             </documentation>\n           </annotation>\n\
    \         </enumeration>\n         <enumeration value=\"float64\">\n         \
    \  <annotation>\n             <documentation>The type \"float64\" corresponds\
    \ to an IEEE\n               double-precision 64-bit floating point type as defined\n\
    \               in [IEEE.754.1985].\n             </documentation>\n         \
    \  </annotation>\n         </enumeration>\n         <enumeration value=\"boolean\"\
    >\n           <annotation>\n             <documentation>The type \"boolean\" represents\
    \ a binary\n               value.  The only allowed values are \"true\" and \"\
    false\".\n             </documentation>\n           </annotation>\n         </enumeration>\n\
    \         <enumeration value=\"macAddress\">\n           <annotation>\n      \
    \       <documentation>The type \"macAddress\" represents a\n               string\
    \ of 6 octets.\n             </documentation>\n           </annotation>\n    \
    \     </enumeration>\n         <enumeration value=\"octetArray\">\n          \
    \ <annotation>\n             <documentation>The type \"octetArray\" represents\
    \ a\n            finite-length string of octets.\n             </documentation>\n\
    \           </annotation>\n         </enumeration>\n         <enumeration value=\"\
    string\">\n           <annotation>\n             <documentation>\n           \
    \    The type \"string\" represents a finite-length string\n               of\
    \ valid characters from the Unicode character encoding\n               set [ISO.10646-1.1993].\
    \  Unicode allows for ASCII\n               [ISO.646.1991] and many other international\
    \ character\n               sets to be used.\n             </documentation>\n\
    \           </annotation>\n         </enumeration>\n         <enumeration value=\"\
    dateTimeSeconds\">\n           <annotation>\n             <documentation>\n  \
    \             The type \"dateTimeSeconds\" represents a time value\n         \
    \      in units of seconds based on coordinated universal time\n             \
    \  (UTC).  The choice of an epoch, for example, 00:00 UTC,\n               January\
    \ 1, 1970, is left to corresponding encoding\n               specifications for\
    \ this type, for example, the IPFIX\n               protocol specification.  Leap\
    \ seconds are excluded.\n               Note that transformation of values might\
    \ be required\n               between different encodings if different epoch values\n\
    \               are used.\n             </documentation>\n           </annotation>\n\
    \         </enumeration>\n         <enumeration value=\"dateTimeMilliseconds\"\
    >\n           <annotation>\n             <documentation>The type \"dateTimeMilliseconds\"\
    \ represents\n               a time value in units of milliseconds\n         \
    \      based on coordinated universal time (UTC).\n               The choice of\
    \ an epoch, for example,  00:00 UTC,\n               January 1, 1970, is left\
    \ to corresponding encoding\n               specifications for this type, for\
    \ example, the IPFIX\n               protocol specification.  Leap seconds are\
    \ excluded.\n               Note that transformation of values might be required\n\
    \               between different encodings if different epoch values\n      \
    \         are used.\n             </documentation>\n           </annotation>\n\
    \         </enumeration>\n         <enumeration value=\"dateTimeMicroseconds\"\
    >\n           <annotation>\n             <documentation>The type \"dateTimeMicroseconds\"\
    \ represents\n               a time value in units of microseconds\n         \
    \      based on coordinated universal time (UTC).\n               The choice of\
    \ an epoch, for example,  00:00 UTC,\n               January 1, 1970, is left\
    \ to corresponding encoding\n               specifications for this type, for\
    \ example, the IPFIX\n               protocol specification.  Leap seconds are\
    \ excluded.\n               Note that transformation of values might be required\n\
    \               between different encodings if different epoch values\n      \
    \         are used.\n             </documentation>\n           </annotation>\n\
    \         </enumeration>\n         <enumeration value=\"dateTimeNanoseconds\"\
    >\n           <annotation>\n             <documentation>The type \"dateTimeNanoseconds\"\
    \ represents\n               a time value in units of nanoseconds\n          \
    \     based on coordinated universal time (UTC).\n               The choice of\
    \ an epoch, for example,  00:00 UTC,\n               January 1, 1970, is left\
    \ to corresponding encoding\n               specifications for this type, for\
    \ example, the IPFIX\n               protocol specification.  Leap seconds are\
    \ excluded.\n               Note that transformation of values might be required\n\
    \               between different encodings if different epoch values\n      \
    \         are used.\n             </documentation>\n           </annotation>\n\
    \         </enumeration>\n         <enumeration value=\"ipv4Address\">\n     \
    \      <annotation>\n             <documentation>The type \"ipv4Address\" represents\
    \ a value\n               of an IPv4 address.\n             </documentation>\n\
    \           </annotation>\n         </enumeration>\n         <enumeration value=\"\
    ipv6Address\">\n           <annotation>\n             <documentation>The type\
    \ \"ipv6Address\" represents a value\n               of an IPv6 address.\n   \
    \          </documentation>\n           </annotation>\n         </enumeration>\n\
    \       </restriction>\n     </simpleType>\n     <simpleType name=\"dataTypeSemantics\"\
    >\n       <restriction base=\"string\">\n         <enumeration value=\"quantity\"\
    >\n           <annotation>\n             <documentation>\n               A quantity\
    \ value represents a discrete\n               measured value pertaining to the\
    \ record.  This is\n               distinguished from counters that represent\
    \ an ongoing\n               measured value whose \"odometer\" reading is captured\
    \ as\n               part of a given record.  If no semantic qualifier is\n  \
    \             given, the Information Elements that have an integral\n        \
    \       data type should behave as a quantity.\n             </documentation>\n\
    \           </annotation>\n         </enumeration>\n         <enumeration value=\"\
    totalCounter\">\n           <annotation>\n             <documentation>\n     \
    \          An integral value reporting the value of a counter.\n             \
    \  Counters are unsigned and wrap back to zero after\n               reaching\
    \ the limit of the type.  For example, an\n               unsigned64 with counter\
    \ semantics will continue to\n               increment until reaching the value\
    \ of 2**64 - 1.  At\n               this point, the next increment will wrap its\
    \ value to\n               zero and continue counting from zero.  The semantics\n\
    \               of a total counter is similar to the semantics of\n          \
    \     counters used in SNMP, such as Counter32 defined in\n               RFC\
    \ 2578 [RFC2578].  The only difference between total\n               counters\
    \ and counters used in SNMP is that the total\n               counters have an\
    \ initial value of 0.  A total counter\n               counts independently of\
    \ the export of its value.\n             </documentation>\n           </annotation>\n\
    \         </enumeration>\n         <enumeration value=\"deltaCounter\">\n    \
    \       <annotation>\n             <documentation>\n               An integral\
    \ value reporting the value of a counter.\n               Counters are unsigned\
    \ and wrap back to zero after\n               reaching the limit of the type.\
    \  For example, an\n               unsigned64 with counter semantics will continue\
    \ to\n               increment until reaching the value of 2**64 - 1.  At\n  \
    \             this point, the next increment will wrap its value to\n        \
    \       zero and continue counting from zero.  The semantics\n               of\
    \ a delta counter is similar to the semantics of\n               counters used\
    \ in SNMP, such as Counter32 defined in\n               RFC 2578 [RFC2578].  The\
    \ only difference between delta\n               counters and counters used in\
    \ SNMP is that the delta\n               counters have an initial value of 0.\
    \  A delta counter\n               is reset to 0 each time its value is exported.\n\
    \             </documentation>\n           </annotation>\n         </enumeration>\n\
    \         <enumeration value=\"identifier\">\n           <annotation>\n      \
    \       <documentation>\n               An integral value that serves as an identifier.\n\
    \               Specifically, mathematical operations on two\n               identifiers\
    \ (aside from the equality operation) are\n               meaningless.  For example,\
    \ Autonomous System ID 1 *\n               Autonomous System ID 2 is meaningless.\n\
    \             </documentation>\n           </annotation>\n         </enumeration>\n\
    \         <enumeration value=\"flags\">\n           <annotation>\n           \
    \  <documentation>\n               An integral value that actually represents\
    \ a set of\n               bit fields.  Logical operations are appropriate on\n\
    \               such values, but not other mathematical operations.\n        \
    \       Flags should always be of an unsigned type.\n             </documentation>\n\
    \           </annotation>\n         </enumeration>\n       </restriction>\n  \
    \   </simpleType>\n     <simpleType name=\"applicability\">\n       <restriction\
    \ base=\"string\">\n         <enumeration value=\"data\">\n           <annotation>\n\
    \             <documentation>\n               Used for Information Elements that\
    \ are applicable to\n               Flow Records only.\n             </documentation>\n\
    \           </annotation>\n         </enumeration>\n         <enumeration value=\"\
    option\">\n           <annotation>\n             <documentation>\n           \
    \    Used for Information Elements that are applicable to\n               option\
    \ records only.\n             </documentation>\n           </annotation>\n   \
    \      </enumeration>\n         <enumeration value=\"all\">\n           <annotation>\n\
    \             <documentation>\n               Used for Information Elements that\
    \ are applicable to\n               Flow Records as well as to option records.\n\
    \             </documentation>\n           </annotation>\n         </enumeration>\n\
    \       </restriction>\n     </simpleType>\n     <simpleType name=\"status\">\n\
    \       <restriction base=\"string\">\n         <enumeration value=\"current\"\
    >\n           <annotation>\n             <documentation>\n               Indicates\
    \ that the Information Element definition\n               is current and valid.\n\
    \             </documentation>\n           </annotation>\n         </enumeration>\n\
    \         <enumeration value=\"deprecated\">\n           <annotation>\n      \
    \       <documentation>\n               Indicates that the Information Element\
    \ definition is\n               obsolete, but it permits new/continued implementation\n\
    \               in order to foster interoperability with older/existing\n    \
    \           implementations.\n             </documentation>\n           </annotation>\n\
    \         </enumeration>\n         <enumeration value=\"obsolete\">\n        \
    \   <annotation>\n             <documentation>\n               Indicates that\
    \ the Information Element definition is\n               obsolete and should not\
    \ be implemented and/or can be\n               removed if previously implemented.\n\
    \             </documentation>\n           </annotation>\n         </enumeration>\n\
    \       </restriction>\n     </simpleType>\n     <complexType name=\"text\">\n\
    \       <choice maxOccurs=\"unbounded\" minOccurs=\"0\">\n         <element name=\"\
    paragraph\">\n           <complexType mixed=\"true\">\n             <sequence>\n\
    \                <element maxOccurs=\"unbounded\" minOccurs=\"0\"\n          \
    \        name=\"xref\">\n                  <complexType>\n                   \
    \ <attribute name=\"target\" type=\"string\"\n                      use=\"required\"\
    />\n                  </complexType>\n                </element>\n           \
    \  </sequence>\n           </complexType>\n         </element>\n         <element\
    \ name=\"artwork\">\n           <simpleType>\n             <restriction base=\"\
    string\"/>\n           </simpleType>\n         </element>\n       </choice>\n\
    \     </complexType>\n     <simpleType name=\"range\">\n       <restriction base=\"\
    string\"/>\n     </simpleType>\n     <element name=\"fieldDefinitions\">\n   \
    \    <complexType>\n         <sequence>\n           <element maxOccurs=\"unbounded\"\
    \ minOccurs=\"1\" name=\"field\">\n             <complexType>\n              \
    \ <sequence>\n                 <element maxOccurs=\"1\" minOccurs=\"1\" name=\"\
    description\"\n                          type=\"ipfix:text\">\n              \
    \     <annotation>\n                     <documentation>\n                   \
    \    The semantics of this Information Element.\n                       Describes\
    \ how this Information Element is\n                       derived from the Flow\
    \ or other information\n                       available to the observer.\n  \
    \                   </documentation>\n                   </annotation>\n     \
    \            </element>\n                 <element maxOccurs=\"1\" minOccurs=\"\
    0\" name=\"reference\"\n                          type=\"ipfix:text\">\n     \
    \              <annotation>\n                     <documentation>\n          \
    \             Identifies additional specifications that more\n               \
    \        precisely define this item or provide additional\n                  \
    \     context for its use.\n                     </documentation>\n          \
    \         </annotation>\n                 </element>\n                 <element\
    \ maxOccurs=\"1\" minOccurs=\"0\" name=\"units\"\n                          type=\"\
    string\">\n                   <annotation>\n                     <documentation>\n\
    \                       If the Information Element is a measure of some\n    \
    \                   kind, the units identify what the measure is.\n          \
    \           </documentation>\n                   </annotation>\n             \
    \    </element>\n                 <element maxOccurs=\"1\" minOccurs=\"0\" name=\"\
    range\"\n                          type=\"ipfix:range\">\n                   <annotation>\n\
    \                     <documentation>\n                       Some Information\
    \ Elements may only be able to\n                       take on a restricted set\
    \ of values that can be\n                       expressed as a range (e.g., 0\
    \ through 511\n                       inclusive).  If this is the case, the valid\n\
    \                       inclusive range should be specified.\n               \
    \      </documentation>\n                   </annotation>\n                 </element>\n\
    \               </sequence>\n               <attribute name=\"name\" type=\"string\"\
    \ use=\"required\">\n                 <annotation>\n                   <documentation>\n\
    \                     A unique and meaningful name for the Information\n     \
    \                Element.\n                   </documentation>\n             \
    \    </annotation>\n               </attribute>\n               <attribute name=\"\
    dataType\" type=\"ipfix:dataType\"\n                          use=\"required\"\
    >\n                 <annotation>\n                   <documentation>\n       \
    \              One of the types listed in Section 3.1 of this\n              \
    \       document or in a future extension of the\n                     information\
    \ model.  The type space for attributes\n                     is constrained to\
    \ facilitate implementation.  The\n                     existing type space does\
    \ however encompass most\n                     basic types used in modern programming\
    \ languages,\n                     as well as some derived types (such as ipv4Address)\n\
    \                     that are common to this domain and useful\n            \
    \         to distinguish.\n                   </documentation>\n             \
    \    </annotation>\n               </attribute>\n               <attribute name=\"\
    dataTypeSemantics\"\n                          type=\"ipfix:dataTypeSemantics\"\
    \ use=\"optional\">\n                 <annotation>\n                   <documentation>\n\
    \                     The integral types may be qualified by additional\n    \
    \                 semantic details.  Valid values for the data type\n        \
    \             semantics are specified in Section 3.2 of this\n               \
    \      document or in a future extension of the\n                     information\
    \ model.\n                   </documentation>\n                 </annotation>\n\
    \               </attribute>\n               <attribute name=\"elementId\" type=\"\
    nonNegativeInteger\"\n                          use=\"required\">\n          \
    \       <annotation>\n                   <documentation>\n                   \
    \  A numeric identifier of the Information Element.\n                     If this\
    \ identifier is used without an enterprise\n                     identifier (see\
    \ [RFC5101] and\n                     enterpriseId below), then it is globally\
    \ unique\n                     and the list of allowed values is administered\
    \ by\n                     IANA.  It is used for compact identification of an\n\
    \                     Information Element when encoding Templates in the\n   \
    \                  protocol.\n                   </documentation>\n          \
    \       </annotation>\n               </attribute>\n               <attribute\
    \ name=\"enterpriseId\" type=\"nonNegativeInteger\"\n                        \
    \  use=\"optional\">\n                 <annotation>\n                   <documentation>\n\
    \                     Enterprises may wish to define Information Elements\n  \
    \                   without registering them with IANA, for example,\n       \
    \              for enterprise-internal purposes.  For such\n                 \
    \    Information Elements, the Information Element\n                     identifier\
    \ described above is not sufficient when\n                     the Information\
    \ Element is used outside the\n                     enterprise.  If specifications\
    \ of\n                     enterprise-specific Information Elements are made\n\
    \                     public and/or if enterprise-specific identifiers\n     \
    \                are used by the IPFIX protocol outside the\n                \
    \     enterprise, then the enterprise-specific\n                     identifier\
    \ MUST be made globally unique by\n                     combining it with an enterprise\
    \ identifier.\n                     Valid values for the enterpriseId are\n  \
    \                   defined by IANA as Structure of Management\n             \
    \        Information (SMI) network management private\n                     enterprise\
    \ codes.  They are defined at\n                     http://www.iana.org/assignments/enterprise-numbers.\n\
    \                   </documentation>\n                 </annotation>\n       \
    \        </attribute>\n               <attribute name=\"applicability\"\n    \
    \                      type=\"ipfix:applicability\" use=\"optional\">\n      \
    \           <annotation>\n                   <documentation>\n               \
    \      This property of an Information\n                     Element indicates\
    \ in which kind of records the\n                     Information Element can be\
    \ used.\n                     Allowed values for this property are 'data',\n \
    \                    'option', and 'all'.\n                   </documentation>\n\
    \                 </annotation>\n               </attribute>\n               <attribute\
    \ name=\"status\" type=\"ipfix:status\"\n                          use=\"required\"\
    >\n                 <annotation>\n                   <documentation>\n       \
    \              The status of the specification of this\n                     Information\
    \ Element.  Allowed values are 'current',\n                     'deprecated',\
    \ and 'obsolete'.\n                   </documentation>\n                 </annotation>\n\
    \               </attribute>\n               <attribute name=\"group\" type=\"\
    string\"\n                          use=\"required\">\n                 <annotation>\n\
    \                   <documentation>to be done ...</documentation>\n          \
    \       </annotation>\n               </attribute>\n             </complexType>\n\
    \           </element>\n         </sequence>\n       </complexType>\n       <unique\
    \ name=\"infoElementIdUnique\">\n         <selector xpath=\"field\"/>\n      \
    \   <field xpath=\"elementId\"/>\n       </unique>\n     </element>\n   </schema>\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Juergen Quittek\n   NEC\n   Kurfuersten-Anlage 36\n  \
    \ Heidelberg 69115\n   Germany\n   Phone: +49 6221 90511-15\n   EMail: quittek@nw.neclab.eu\n\
    \   URI:   http://www.neclab.eu/\n   Stewart Bryant\n   Cisco Systems, Inc.\n\
    \   250, Longwater Ave., Green Park\n   Reading RG2 6GB\n   United Kingdom\n \
    \  EMail: stbryant@cisco.com\n   Benoit Claise\n   Cisco Systems, Inc.\n   De\
    \ Kleetlaan 6a b1\n   Diegem 1831\n   Belgium\n   Phone: +32 2 704 5622\n   EMail:\
    \ bclaise@cisco.com\n   Paul Aitken\n   Cisco Systems, Inc.\n   96 Commercial\
    \ Quay\n   Edinburgh EH6 6LX\n   Scotland\n   Phone: +44 131 561 3616\n   EMail:\
    \ paitken@cisco.com\n   Jeff Meyer\n   PayPal\n   2211 N. First St.\n   San Jose,\
    \ CA 95131-2021\n   US\n   Phone: +1 408 976-9149\n   EMail: jemeyer@paypal.com\n\
    \   URI:   http://www.paypal.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
