Abstract This memo defines a portion of the Management Information Base (MIB) for use with network management protocols in TCP/IP based internets.
In particular, this memo defines managed objects used for obtaining traffic flow information from network traffic meters.
The Internet standard Network Management Framework consists of three components.
RFC 1155 defines the SMI, the mechanisms used for describing and naming objects for the purpose of management.
STD 16, RFC 1212 defines a more concise description mechanism, which is wholly consistent with the SMI.
RFC 1156 defines MIB I, the core set of managed objects for the Internet suite of protocols.
[1] defines MIB II, an evolution of MIB
I based on implementation experience and new operational requirements.
STD 15, RFC 1157 defines the SNMP, the protocol used for network access to managed objects.
RFC 1442 [2] defines the SMI for version 2 of the Simple Network Management Protocol.
[3,4] define Textual Conventions and Conformance Statements for version 2 of the Simple Network Management Protocol.
RFC 1452 [5] describes how versions 1 and 2 of the Simple Network Management Protocol should coexist.
The Framework permits new objects to be defined for the purpose of experimentation and evaluation.
2 Objects Managed objects are accessed via a virtual information store, termed the Management Information Base or MIB.
Objects in the MIB are defined using the subset of Abstract Syntax Notation One (ASN.1)
[6] defined in the SMI.
In particular, each object has a name, a syntax, and an encoding.
The name is an object identifier, an administratively assigned name, which specifies an object type.
The object type together with an object instance serves to uniquely identify a specific instantiation of the object.
For human convenience, we often use a textual string, termed the OBJECT DESCRIPTOR, to also refer to the object type.
The syntax of an object type defines the abstract data structure corresponding to that object type.
The ASN.1 language is used for this purpose.
However, the SMI [2] purposely restricts the ASN.1 constructs which may be used.
These restrictions are explicitly made for simplicity.
The encoding of an object type is simply how that object type is represented using the object type's syntax.
Implicitly tied to the notion of an object type's syntax and encoding
is how the object type is represented when being transmitted on the network.
The SMI specifies the use of the basic encoding rules of ASN.1 [7], subject to the additional requirements imposed by the SNMP.
2.1 Format of Definitions Section 4 contains contains the specification of all object types contained in this MIB module.
These object types are defined using the conventions defined in [2] and [3].
3 Overview Traffic Flow Measurement seeks to provide a well defined method for gathering traffic flow information from networks and internetworks.
The background for this is given in "Traffic Flow Measurement: Background" [8].
The Realtime Traffic Flow Measurement (rtfm)
Working Group has produced a measurement architecture to achieve it; this is documented in "Traffic Flow Measurement:  Architecture" [9].
The architecture defines three entities: METERS, which observe network traffic flows and build up a table of flow data records for them, METER REAERS, which collect traffic flow data from meters, and MANAGERS, which oversee the operation of meters and meter readers.
This memo defines the SNMP management information for a Traffic Flow Meter (TFM).
It documents the earlier work of the Internet Accounting Working Group, and is intended to provide a starting point for the Realtime Traffic Flow Measurement Working Group.
3.1 Scope of Definitions, Textual Conventions
All objects defined in this memo are registered in a single subtree within the mib 2 namespace [1,2], and are for use in network devices which may perform a PDU forwarding or monitoring function.
For these devices, the value of the ifSpecific variable in the MIB II [1] has the OBJECT IDENTIFIER value: flowMIB OBJECT
mib 2 40 as defined below.
The RTFM Meter MIB was first produced and tested using SNMPv1.
It has been converted into SNMPv2 following the guidelines in RFC 1452 [5].
3.2 Usage of the MIB variables
The MIB breaks into four parts control, flows, rules and conformance statements.
The rules implement the minumum set of packet matching actions, as set out in the "Traffic Flow Measurment:  Architecture" document [9].
In addition they provide for BASIC style subroutines, allowing a network manager to dramatically reduce the number of rules required to monitor a big network.
Traffic flows are identified by a set of attributes for each of its end points.
Attributes include network addresses for each layer of the network protocol stack, and 'subscriber ids,' which may be used to identify an accountable entity for the flow.
The conformance statements are set out as defined in [4].
They explain what must be implemented in a meter which claims to conform to this MIB.
To retrieve flow data one could simply do a linear scan of the flow table.
This would certainly work, but would require a lot of protocol exchanges.
To reduce the overhead in retrieving flow data the flow table uses a TimeFilter variable, defined as a Textual Convention in the RMON2 MIB [10].
This, when used together with SNMPv2's GetBulk request, allows a meter reader to scan the flow table and upload a specified set of flow attributes for those rows which have changed since the last reading.
As an alternative method of reading flow data, the MIB provides an index into the flow table called flowColumnActivityTable.
This is (logically) a three dimensional array, subscripted by flow attribute, activity time and starting flow number.
This allows a meter reader to retrieve (in an opaque object) data for a column of the flow table with a minimum of SNMP overhead.
An attempt has been made to include a full ASN.1 definition of the flowColumnActivityData object.
One aspect of data collection which needs emphasis is that all the MIB variables are set up to allow multiple independent colletors to work properly, i.e.  the flow table indexes are stateless.
An alternative approach would have been to 'snapshot' the flow table, which would mean that the meter readers would have to be synchronized.
The stateless approach does mean that two meter readers will never return exactly the same set of traffic counts, but over long periods (e.g.  15 minute collections over a day)
If one really needs a snapshot, this can be achieved by switching to an identical rule set with a different RuleSet number, hence asynchronous collections may be regarded as a useful generalisation of synchronised ones.
The control variables are the minimum set required for a meter reader.
Their number has been whittled down as experience has been gained with the MIB implementation.
A few of them are 'general,' i.e.  they control the overall behaviour of the meter.
These are set by a single 'master' manager, and no other manager should attempt to change their values.
The decision as to which manager is the 'master' must be made by the network operations personnel responsible; this MIB does not attempt to provide any support for interaction between managers.
There are three other groups of control groups, arranged into tables in the same way as in the RMON MIB [10].
They are used as follows:
Before attempting to download a rule table a manager must create a row in the flowRuleSetInfo with flowRuleInfoStatus set to 'createAndWait.'
When the rule set is ready the manager must set RuleSetInfo to 'active,' indicating that the rule set is ready for use.
Any meter reader wishing to collect data reliably for all flows should first create a row in the flowReaderInfoTable with flowReaderStatus set to 'active.'
It should write that row's flowReaderLastTime object each time it starts a collection pass through the flow table.
The meter will not recover a flow's memory until every meter reader holding a row in this table has collected that flow's data.
Any manager wishing to download rule sets to the meter must create a row in the flowManagerInfo table with flowManagerStatus set to 'active.'.
Once it has a table row, the manager may set the control variables in its row so as to cause the meter to run any valid rule set held by the meter.
4 Definitions FLOW METER MIB DEFINITIONS ::
IMPORTS MODULE IDENTITY, OBJECT TYPE, Counter32,
SMI TEXTUAL CONVENTION, RowStatus, TimeStamp FROM SNMPv2 TC OBJECT GROUP, MODULE COMPLIANCE FROM SNMPv2
CONF mib 2, ifIndex FROM RFC1213 MIB OwnerString FROM RMON MIB; flowMIB MODULE IDENTITY LAST UPDATED
"9603080208Z" ORGANIZATION "IETF Realtime Traffic Flow Measurement Working Group" CONTACT INFO
TEXTUAL CONVENTION STATUS  current DESCRIPTION "Used as an index to a table.
A TimeFilter variable allows a GetNext or GetBulk request to find rows in a table for which the TimeFilter index variable is greater than or equal to a specified value.
For example, a meter reader could find all rows in the flow table which have been active at or since a specified time.
More details on TimeFilter variables, their implementation and use can be found in the RMON2 MIB [10]."
TEXTUAL CONVENTION STATUS  current DESCRIPTION "
Indicates the type of an adjacent address or peer address.
The values used are from the 'Address Family Numbers' section of the Assigned Numbers RFC [11].
SYNTAX  INTEGER { ip(1), nsap(3), ieee802(6), ipx(11), appletalk(12), decnet(13)
TEXTUAL CONVENTION STATUS  current DESCRIPTION
"Specifies the value of an adjacent address for various media.
The values used for IEEE 802 media are from the 'Network Management Parameters (ifType definitions)' section of the Assigned Numbers RFC [11].
FddiMACLongAddress, i.e. a 6 octet MAC address in 'canonical' order  (defined in the FDDI MIB [12])
6 octet 802.5 MAC address in 'canonical' order PeerAddress:  other(1)
If traffic is being metered inside a tunnel, its adjacent addresses will be the peer addresses of hosts at the ends of the tunnel " SYNTAX OCTET STRING (SIZE (6..20))
TEXTUAL CONVENTION STATUS  current DESCRIPTION
"Specifies the value of a peer address for various network protocols.
4 octet IpAddress  (defined in the SNMPv2 SMI [2])
NsapAddress  (defined in the SNMPv2 SMI [2])
4 octet Network number, 6 octet Host number (MAC address)
TEXTUAL CONVENTION STATUS  current DESCRIPTION
"Specifies the value of a transport address for various network protocols.
IP: 2 octet UDP or TCP port number Other protocols: 2 octet port number " SYNTAX OCTET STRING (SIZE (2))
TEXTUAL CONVENTION STATUS  current DESCRIPTION
"Specifies the value of an address.
Is a superset of AdjacentAddress, PeerAddress and TransportAddress."
SYNTAX OCTET STRING (SIZE (2..20)) FlowAttributeNumber ::
TEXTUAL CONVENTION STATUS  current DESCRIPTION
"Uniquely identifies an attribute within a flow data record."
SYNTAX  INTEGER { flowIndex(1), flowStatus(2), flowTimeMark(3), sourceInterface(4), sourceAdjacentType(5), sourceAdjacentAddress(6), sourceAdjacentMask(7), sourcePeerType(8), sourcePeerAddress(9), sourcePeerMask(10), sourceTransType(11), sourceTransAddress(12), sourceTransMask(13), destInterface(14), destAdjacentType(15), destAdjacentAddress(16),
TEXTUAL CONVENTION STATUS  current DESCRIPTION
"Uniquely identifies an attribute which may be tested in a rule.
These include attributes whose values come directly from the flow's packets and the five 'meter' variables used to hold an AttributeValue.
Attributes derived from the rules
e.g. address masks may not be tested."
TEXTUAL CONVENTION STATUS  current DESCRIPTION
"Uniquely identifies the action of a rule, i.e. the Pattern Matching Engine's opcode number.
Details of the opcodes are given in the 'Traffic Flow Measurement: Architecture' document [9]."
INTEGER { ignore(1), fail(2), count(3), countPkt(4), return(5), gosub(6), gosubAct(7), assign(8), assignAct(9), goto(10), gotoAct(11), pushRuleTo(12), pushRuleToAct(13), pushPktTo(14), pushPktToAct(15)
"An array of information about the rule sets held in the meter.
Rule set 1 is the meter default, used when the meter starts up.
It is built in to the meter; it may not be changed."
current DESCRIPTION "Information about a particular rule set.
current DESCRIPTION "An index which selects an entry in the flowRuleSetInfoTable.
Each such entry contains control information for a particular rule set which the meter may run."
current DESCRIPTION "Number of rules in this rule set.
Setting this variable will cause the meter to allocate space for these rules."
Identifies the manager which configured this rule set."
this rule set was last changed."
RowStatus MAX ACCESS  read create
The status of this rule set.
If this object's value is not active(1), the meter must not attempt to use this rule set."
current DESCRIPTION "Information about a particular interface."
"The parameter N for statistical counting on this interface.
Set to N to count 1/Nth of the packets appearing at this interface.
A meter should choose its own algorithm to introduce variance into the sampling so that exactly every Nth packet is not counted.
A sampling rate of 1 counts all packets.
A sampling rate of 0 results in the interface being ignored by the meter."
read only STATUS  current DESCRIPTION
"The number of packets the meter has lost for this interface.
Such losses may occur because the meter has been unable to keep up with the traffic volume."
Any meter reader wishing to collect data reliably for all flows   should first create a row in this table.
It should write that   row's flowReaderLastTime object each time
it starts a collection   pass through the flow table.
The meter will not recover a flow's memory until every meter reader   holding a row in this table has collected that flow's data.
If a meter reader does not create a row in this table, e.g. because   it failed authentication in the meter's SNMP write community,   collection can still proceed but the meter may not be able to   recover inactive flows.
current DESCRIPTION "Information about a particular meter reader.
current DESCRIPTION "Selects an entry from the array of meter reader info entries."
"Specifies the maximum time (in seconds) between flow data collections for this meter reader.
If this time elapses without a collection, the meter should assume that this meter reader has stopped collecting, and delete this row from the table."
Identifies the meter reader which created this row."
current DESCRIPTION "Time this meter reader began its most recent data collection.
This variable should be written by a meter reader as the first step in reading flow data.
The meter will set this LastTime value to sysUptime and set its PreviousTime value (below) to the old  LastTime.
This allows the meter to recover flows which have been inactive since PreviousTime, for these have been collected at least once.
If the meter fails to write flowLastReadTime, e.g. by failing authentication in the meter's SNMP write community, collection may still proceed but the meter may not be able to recover inactive flows."
read only STATUS  current DESCRIPTION "Time
this meter reader began the collection before last."
RowStatus MAX ACCESS  read create
The status of this meter reader."
Any manager wishing to download rule sets to the meter must create   a row in this table.
Once it has a table row, the manager may set   the control variables in its row so as to cause the meter to run   any valid rule set held by the meter.
SEQUENCE OF FlowManagerInfoEntry MAX ACCESS
current DESCRIPTION "Information about a particular meter reader.
current DESCRIPTION "Selects an entry from the array of manager info entries."
current DESCRIPTION "Index to the array of rule sets.
Specifies which set of rules is currently being used for accounting by this manager.
When the manager sets this variable the meter will close its current rule set and start using the new one.
Flows created by the old rule set remain in memory, orphaned until their data has been read.
Specifying rule set 0 (the empty set)
stops flow measurement by this manager."
current DESCRIPTION "Index to the array of rule sets.
After reaching HighWaterMark (see below) the manager may switch to using its standby rule set.
For this to be effective the manager should have downloaded a standby rule set which uses a coarser reporting granularity.
The manager may also need to decrease the meter reading interval so that the meter can recover flows measured by its normal rule set.
A value expressed as a percentage, interpreted by the meter as an indication of how full the flow table should be before it should switch to the standby rule set (if one has been specified) forthis manager.  Values of 0% or 100% disable the checking represented by this variable."
INTEGER { wrap(1), scale(2) }
"Specifies whether PDU and octet counters should wrap when they reach the top of their range (normal behaviour for Counter32 objects), or whether their scale factors should be used instead.
The combination of counter and scale factor allows counts to be returned as binary floating point numbers, with 32 bit mantissas and 8 bit exponents."
Identifies the manager which created this row."
current DESCRIPTION "Time this row was last changed by its manager."
RowStatus MAX ACCESS  read create
current DESCRIPTION "The status of this manager."
At present the meter only runs a single rule set  the 'current'   one and has a single 'standby' rule set.
In future it may be   developed so as to run multiple rule sets simultaneously; that would   require a more elaborate set of control variables to allow reliable   operation.
"A value expressed as a percentage, interpreted by the meter as an indication of how full the flow table should be before it should take some action to avoid running out of resources to handle new flows.
Values of 0% or 100% disable the checking represented by this variable."
The time in seconds since the last packet seen, after which the flow may be terminated.
Note that although a flow may have been terminated, its data must be collected before its memory can be recovered.
read only STATUS  current DESCRIPTION
"The numbers of flows which are currently in use, i.e. have been active since the last collection."
read only STATUS  current DESCRIPTION
"The maximum number of flows allowed in the meter's flow table.
At present this is determined when the meter is first started up."
This is a table kept by a meter, with one flow data entry for every   flow being measured.
Each flow data entry stores
the attribute   values for a traffic flow.
Details of flows and their attributes   are given in the 'Traffic Flow Measurement:
From time to time a meter reader may sweep the flow table so as   to read counts.
This is most effectively achieved by using the   TimeMark variable together with successive GetBulk requests to   retrieve the values of the desired flow attribute variables.
This scheme allows multiple meter readers to independently use the   same meter; the meter readers do not have to be synchronised and   they may use different collection intervals.
"The list of all flows being measured."
"The flow data record for a particular flow.
current DESCRIPTION "Value of this flow data record's index within the meter's flow table."
current DESCRIPTION "A TimeFilter for this entry.
Allows GetNext and GetBulk to find flow table rows which have changed since a specified value of sysUptime."
INTEGER { inactive(1), current(2), idle(3) }
current DESCRIPTION "Status of this flow data record."
current DESCRIPTION "Index of the interface associated with the source address for this flow.
It's value is one of those contained in the ifIndex field of the meter's interfaces table."
{ flowDataEntry 4 } flowDataSourceAdjacentType OBJECT TYPE SYNTAX
read only STATUS  current DESCRIPTION
"Adjacent address type of the source for this flow.
If accounting is being performed at the network level the adjacent address will probably be an 802 MAC address, and the adjacent address type will indicate the medium type."
read only STATUS  current DESCRIPTION "Address of the adjacent device on the path for the source for this flow."
read only STATUS  current DESCRIPTION "
1 bits in this mask indicate which bits must match when comparing the adjacent source address for this flow."
} flowDataSourcePeerType OBJECT TYPE SYNTAX
read only STATUS  current DESCRIPTION "Peer address type of the source for this flow."
read only STATUS  current DESCRIPTION "Address of the peer device for the source of this flow."
read only STATUS  current DESCRIPTION "
1 bits in this mask indicate which bits must match when comparing the source peer address for this flow."
MAX ACCESS  read only STATUS  current DESCRIPTION "Transport address type of the source for this flow.
The value of this attribute will depend on the peer address type."
read only STATUS  current DESCRIPTION "Transport address for the source of this flow."
{ flowDataEntry 12 } flowDataSourceTransMask OBJECT TYPE SYNTAX
read only STATUS  current DESCRIPTION "
1 bits in this mask indicate which bits must match when comparing the transport source address for this flow."
current DESCRIPTION "Index of the interface associated with the dest address for this flow.
This value is one of the values contained in the ifIndex field of the interfaces table."
read only STATUS  current DESCRIPTION "Address of the adjacent device on the path for the destination for this flow."
read only STATUS  current DESCRIPTION "
1 bits in this mask indicate which bits must match when comparing the adjacent dest address for this flow."
read only STATUS  current DESCRIPTION "Peer address type of the destination for this flow."
read only STATUS  current DESCRIPTION "Address of the peer device for the destination of this flow."
read only STATUS  current DESCRIPTION "
1 bits in this mask indicate which bits must match when comparing the dest peer type for this flow."
MAX ACCESS  read only STATUS  current DESCRIPTION "Transport address type of the destination for this flow.
The value of this attribute will depend on the peer address type."
read only STATUS  current DESCRIPTION "Transport address for the destination of this flow."
read only STATUS  current DESCRIPTION "
1 bits in this mask indicate which bits must match when comparing the transport destination address for this flow."
MAX ACCESS  read only STATUS  current DESCRIPTION
"The scale factor applied to this particular flow.
Indicates the number of bits the PDU counter values should be moved left to obtain the actual values."
MAX ACCESS  read only STATUS  current DESCRIPTION
"The scale factor applied to this particular flow.
Indicates the number of bits the octet counter values should be moved left to obtain the actual values."
} flowDataRuleSet OBJECT TYPE SYNTAX
MAX ACCESS  read only STATUS  current DESCRIPTION
"The RuleSet number of the rule set which created this flow."
read only STATUS  current DESCRIPTION
"The count of octets flowing from source to dest address and being delivered to the protocol level being metered.
In the case of IP this would count the number of octets delivered to the IP level."
read only STATUS  current DESCRIPTION
"The count of protocol packets flowing from source to dest address and being delivered to the protocol level being metered.
In the case of IP, for example, this would count the IP packets delivered to the IP protocol level."
read only STATUS  current DESCRIPTION
In the case of IP, for example, this would count the IP packets delivered to the IP protocol level."
read only STATUS  current DESCRIPTION
read only STATUS  current DESCRIPTION
"The last time this flow had activity, i.e. the time of arrival of the most recent PDU belonging to this flow."
MAX ACCESS  read only STATUS  current DESCRIPTION
"Subscriber ID associated with the source address for this flow."
MAX ACCESS  read only STATUS  current DESCRIPTION
"Subscriber ID associated with the dest address for this flow."
MAX ACCESS  read only STATUS  current DESCRIPTION
"Session ID for this flow.
Such an ID might be allocated by a network access server to distinguish a series of sessions between the same pair of addresses, which would otherwise appear to be parts of the same accounting flow."
MAX ACCESS  read only STATUS  current DESCRIPTION "Source class for this flow.
Determined by the rules, set by a PushRule action when this flow was entered in the table."
Determined by the rules, set by a PushRule action when this flow was entered in the table."
} flowDataClass OBJECT TYPE SYNTAX
MAX ACCESS  read only STATUS  current DESCRIPTION "Class for this flow.
Determined by the rules, set by a PushRule action when this flow was entered in the table."
flowDataEntry 38 } flowDataSourceKind OBJECT TYPE SYNTAX
MAX ACCESS  read only STATUS  current DESCRIPTION
"Source kind for this flow.
Determined by the rules, set by a PushRule action when this flow was entered in the table."
MAX ACCESS  read only STATUS  current DESCRIPTION
"Destination kind for this flow.
Determined by the rules, set by a PushRule action when this flow was entered in the table."
} flowDataKind OBJECT TYPE SYNTAX
MAX ACCESS  read only STATUS  current DESCRIPTION "Class for this flow.
Determined by the rules, set by a PushRule action when this flow was entered in the table."
The Activity Column Table   flowColumnActivityTable OBJECT TYPE SYNTAX
current DESCRIPTION "Index into the Flow Table.
Allows a meter reader to retrieve a list containing the flow table indeces of flows which were last active at or after a given time, together with the values of a specified attribute for each such flow."
current DESCRIPTION "The Column Activity Entry for a particular attribute, activity time and flow.
read only STATUS  current DESCRIPTION
"Specifies the attribute for which values are required from active flows."
read only STATUS  current DESCRIPTION
"This variable is a copy of flowDataLastActiveTime in the flow data record identified by the flowColumnActivityIndex value of this flowColumnActivityTable entry."
{ flowColumnActivityEntry 2 } flowColumnActivityIndex OBJECT
read only STATUS  current DESCRIPTION "Index of a flow table entry which was active at or after a specified flowColumnActivityTime."
MAX ACCESS  read only STATUS
current DESCRIPTION "Collection of attribute data for flows active after flowColumnActivityTime.
Within the OCTET STRING is a sequence of { flow index, attribute value } pairs, one for each active flow.
The end of the sequence is marked by a flow index value of 0, indicating that there are no more rows in this column.
The format of objects inside flowColumnFlowData is as follows.
Numbers and strings appear with their high order bytes leading.
Numbers are fixed size, as specified by their SYNTAX in the flow table (above), i.e. one octet for flowAddressType and small constants, and four octets for Counter and Timeticks.
Strings are variable length, with the length given in a single leading octet.
Choice depends on attribute }
flowByteValue   INTEGER (1..255), flowShortValue  INTEGER (1..65535), flowLongValue   Integer32,
This is an array of rule tables; the one in use is selected by   CurrentRuleSet.
To change the rule set the manager chooses a set   number which is not in use, downloads the new rule set there, then   writes the new set number into CurrentRuleSet.
is the   default rule set, used by the meter on start up.
Several rule sets   can be held in a meter so that the manager can change the rules   easily, for example with time of day.
Note that a manager may   not change the default rule set, nor the rules in its current rule   set!
See the 'Traffic Flow Measurement: Architecture' document [9]   for details of rules and how they are used.
SEQUENCE OF FlowRuleEntry MAX ACCESS
"Contains all the rule sets which may be used by the meter."
current DESCRIPTION "The rule record itself.
current DESCRIPTION "Selects a rule set from the array of rule sets."
The index into the Rule table.
N.B: These values will often be consecutive, given the fall through semantics of processing the table."
{ flowRuleEntry 2 } flowRuleSelector OBJECT
"Indicates the attribute to be matched.
null(0) is a special case; null rules always succeed.
v1(51), v2(52), v3(53), v4(54) and v5(55) select meter variables, each of which can hold the name (i.e. selector value) of an address attribute.
When one of these is used as a selector, its value specifies the attribute to be tested.
Variable values are set by an Assign action."
RuleAddress MAX ACCESS  read create
"The initial mask used to compute the desired value.
If the mask is zero the rule's test will always succeed."
"The resulting value to be matched for equality.
Specifically, if the attribute chosen by the flowRuleSelector
with the mask specified by the flowRuleMask equals the value specified in the flowRuleMatchedValue, then continue processing the table entry based on the action specified by the flowRuleAction entry.
Otherwise, proceed to the next entry in the rule table."
{ flowRuleEntry 5 } flowRuleAction OBJECT TYPE SYNTAX
ActionNumber MAX ACCESS  read create
"The action to be taken if this rule's test succeeds, or if the meter's 'test' flag is off.
Actions are opcodes for the meter's Packet Matching Engine; details are given in the 'Traffic Flow Measurement: Architecture' document [9]."
current DESCRIPTION "A parameter value providing extra information for the rule's action."
GROUP OBJECTS  { flowRuleInfoSize, flowRuleInfoOwner, flowRuleInfoTimeStamp, flowRuleInfoStatus, flowInterfaceRate, flowInterfaceLostPackets,
flowReaderTimeout, flowReaderOwner, flowReaderLastTime, flowReaderPreviousTime, flowReaderStatus, flowManagerCurrentRuleSet, flowManagerStandbyRuleSet, flowManagerHighWaterMark, flowManagerOwner, flowManagerTimeStamp, flowManagerStatus, flowFloodMark,
flowInactivityTimeout, flowActiveFlows, flowMaxFlows } STATUS  current DESCRIPTION
"The control group defines objects which are used to control an accounting meter."
{flowMIBGroups 1 } flowDataTableGroup OBJECT GROUP OBJECTS  { flowDataIndex, flowDataStatus, flowDataSourceInterface, flowDataSourceAdjacentType, flowDataSourceAdjacentAddress, flowDataSourceAdjacentMask, flowDataSourcePeerType, flowDataSourcePeerAddress, flowDataSourcePeerMask, flowDataSourceTransType, flowDataSourceTransAddress, flowDataSourceTransMask, flowDataDestInterface, flowDataDestAdjacentType, flowDataDestAdjacentAddress, flowDataDestAdjacentMask, flowDataDestPeerType, flowDataDestPeerAddress, flowDataDestPeerMask,
flowDataDestTransType, flowDataDestTransAddress, flowDataDestTransMask, flowDataRuleSet, flowDataToOctets, flowDataToPDUs, flowDataFromOctets, flowDataFromPDUs, flowDataFirstTime, flowDataLastActiveTime, flowDataSourceClass, flowDataDestClass, flowDataClass, flowDataSourceKind, flowDataDestKind, flowDataKind } STATUS  current DESCRIPTION
"The flow table group defines objects which provide the structure for the rule table, including the creation time and activity time indexes into it.
In addition it defines objects which provide a base set of flow attributes for the adjacent, peer and transport layers, together with a flow's counters and times.
Finally it defines a flow's class and kind attributes, which are set by rule actions."
{flowMIBGroups 2 } flowDataScaleGroup OBJECT GROUP OBJECTS  { flowManagerCounterWrap,
flowDataPDUScale, flowDataOctetScale } STATUS  current DESCRIPTION
"The flow scale group defines objects which specify scale factors for counters."
{ flowColumnActivityAttribute, flowColumnActivityTime, flowColumnActivityIndex, flowColumnActivityData } STATUS  current DESCRIPTION
{flowMIBGroups 5 } flowRuleTableGroup OBJECT GROUP OBJECTS  { flowRuleSelector, flowRuleMask, flowRuleMatchedValue, flowRuleAction,
flowRuleParameter } STATUS  current DESCRIPTION
"The rule table group defines objects which hold the set(s) of rules specifying which traffic flows are to be accounted for."
MODULE COMPLIANCE STATUS  current DESCRIPTION
"The compliance statement for a Traffic Flow Meter."
flowMIBCompliances 1 } END 7 Security Considerations Security issues are not discussed in this document.
