- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                  V. Dolmatov, Ed.
  contents:
  - "Independent Submission                                  V. Dolmatov, Ed.\n  \
    \           GOST R 34.10-2012: Digital Signature Algorithm\n"
- title: Abstract
  contents:
  - "Abstract\n   This document provides information about the Russian Federal standard\n\
    \   for digital signatures (GOST R 34.10-2012), which is one of the\n   Russian\
    \ cryptographic standard algorithms (called GOST algorithms).\n   Recently, Russian\
    \ cryptography is being used in Internet\n   applications, and this document provides\
    \ information for developers\n   and users of GOST R 34.10-2012 regarding digital\
    \ signature generation\n   and verification.  This document updates RFC 5832.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This is a contribution to\
    \ the RFC Series, independently of any other\n   RFC stream.  The RFC Editor has\
    \ chosen to publish this document at\n   its discretion and makes no statement\
    \ about its value for\n   implementation or deployment.  Documents approved for\
    \ publication by\n   the RFC Editor are not a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7091.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \      1.1. General Information ........................................2\n  \
    \    1.2. The Purpose of GOST R 34.10-2012 ...........................3\n    \
    \  1.3. Requirements Language ......................................3\n   2. Scope\
    \ ...........................................................3\n   3. Definitions\
    \ and Notations .......................................4\n      3.1. Definitions\
    \ ................................................4\n      3.2. Notations ..................................................6\n\
    \   4. General Statements ..............................................7\n  \
    \ 5. Mathematical Conventions ........................................8\n    \
    \  5.1. Mathematical Definitions ...................................9\n      5.2.\
    \ Digital Signature Parameters ..............................10\n      5.3. Binary\
    \ Vectors ............................................12\n   6. Main Processes\
    \ .................................................12\n      6.1. Digital Signature\
    \ Generation Process ......................13\n      6.2. Digital Signature Verification\
    \ ............................13\n   7. Test Examples (Appendix to GOST R 34.10-2012)\
    \ ..................14\n      7.1. The Digital Signature Scheme Parameters ...................15\n\
    \      7.2. Digital Signature Process (Algorithm I) ...................17\n  \
    \    7.3. Verification Process of Digital Signature (Algorithm II) ..18\n   8.\
    \ Security Considerations ........................................19\n   9. References\
    \ .....................................................19\n      9.1. Normative\
    \ References ......................................19\n      9.2. Informative\
    \ References ....................................20\n"
- title: 1.  Introduction
  contents:
  - '1.  Introduction

    '
- title: 1.1.  General Information
  contents:
  - "1.1.  General Information\n   1.  GOST R 34.10-2012 [GOST3410-2012] was developed\
    \ by the Center for\n       Information Protection and Special Communications\
    \ of the Federal\n       Security Service of the Russian Federation with participation\
    \ of\n       the open joint-stock company \"Information Technologies and\n   \
    \    Communication Systems\" (InfoTeCS JSC).\n   2.  GOST R 34.10-2012 was approved\
    \ and introduced by Decree #215 of\n       the Federal Agency on Technical Regulating\
    \ and Metrology on\n       07.08.2012.\n   3.  GOST R 34.10-2012 replaces GOST\
    \ R 34.10-2001 [GOST3410-2001], a\n       national standard of the Russian Federation.\n\
    \   GOST R 34.10-2001 is superseded by GOST R 34.10-2012 from 1 January\n   2013.\
    \  That means that all new systems that are presented for\n   certification MUST\
    \ use GOST R 34.10-2012 and MAY use\n   GOST R 34.10-2001 also for maintaining\
    \ compatibility with existing\n   systems.  Usage of GOST R 34.10-2001 in current\
    \ systems is allowed at\n   least for a 5-year period.\n   This document updates\
    \ RFC 5832 [RFC5832].\n   This document is an English translation of GOST R 34.10-2012;\n\
    \   [RFC6986] is an English translation of GOST R 34.11-2012; and\n   [RFC5832]\
    \ is an English translation of GOST R 34.10-2001.\n   Terms and conceptions of\
    \ this standard comply with the following\n   international standards:\n   o \
    \ ISO 2382-2 [ISO2382-2],\n   o  ISO/IEC 9796 [ISO9796-2][ISO9796-3],\n   o  series\
    \ of standards ISO/IEC 14888 [ISO14888-1] [ISO14888-2]\n      [ISO14888-3] [ISO14888-4],\
    \ and\n   o  series of standards ISO/IEC 10118 [ISO10118-1] [ISO10118-2]\n   \
    \   [ISO10118-3] [ISO10118-4].\n"
- title: 1.2.  The Purpose of GOST R 34.10-2012
  contents:
  - "1.2.  The Purpose of GOST R 34.10-2012\n   GOST R 34.10-2012 describes the generation\
    \ and verification processes\n   for digital signatures, based on operations with\
    \ an elliptic curve\n   points group, defined over a prime finite field.\n   The\
    \ necessity for developing this standard is caused by the need to\n   implement\
    \ digital signatures of varying resistance due to growth of\n   computer technology.\
    \  Digital signature security is based on the\n   complexity of discrete logarithm\
    \ calculation in an elliptic curve\n   points group and also on the security of\
    \ the hash function used\n   (according to GOST R 34.11-2012 [GOST3411-2012]).\n"
- title: 1.3.  Requirements Language
  contents:
  - "1.3.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \
    \ \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: 2.  Scope
  contents:
  - "2.  Scope\n   GOST R 34.10-2012 defines an electronic digital signature (or simply\n\
    \   digital signature) scheme, digital signature generation and\n   verification\
    \ processes for a given message (document), meant for\n   transmission via insecure\
    \ public telecommunication channels in data\n   processing systems of different\
    \ purposes.\n   Use of a digital signature based on GOST R 34.10-2012 makes\n\
    \   transmitted messages more resistant to forgery and loss of integrity,\n  \
    \ in comparison with the digital signature scheme prescribed by the\n   previous\
    \ standard.\n   GOST R 34.10-2012 is recommended for the creation, operation,\
    \ and\n   modernization of data processing systems of various purposes.\n"
- title: 3.  Definitions and Notations
  contents:
  - '3.  Definitions and Notations

    '
- title: 3.1.  Definitions
  contents:
  - "3.1.  Definitions\n   The following terms are used in the standard:\n   appendix:\
    \ bit string that is formed by a digital signature and by the\n      arbitrary\
    \ text field [ISO14888-1].\n   signature key: element of secret data that is specific\
    \ to the subject\n      and used only by this subject during the signature generation\n\
    \      process [ISO14888-1].\n   verification key: element of data mathematically\
    \ linked to the\n      signature key data element that is used by the verifier\
    \ during the\n      digital signature verification process [ISO14888-1].\n   domain\
    \ parameter: element of data that is common for all the subjects\n      of the\
    \ digital signature scheme, known or accessible to all the\n      subjects [ISO14888-1].\n\
    \   signed message: a set of data elements that consists of the message\n    \
    \  and the appendix, which is a part of the message [ISO14888-1].\n   pseudorandom\
    \ number sequence: a sequence of numbers that is obtained\n      during some arithmetic\
    \ (calculation) process, used in a specific\n      case instead of a true random\
    \ number sequence.\n   random number sequence: a sequence of numbers of which\
    \ none can be\n      predicted (calculated) using only the preceding numbers of\
    \ the\n      same sequence.\n   verification process: a process that uses the\
    \ signed message, the\n      verification key, and the digital signature scheme\
    \ parameters as\n      initial data and that gives the conclusion about digital\
    \ signature\n      validity or invalidity as a result [ISO14888-1].\n   signature\
    \ generation process: a process that uses the message, the\n      signature key,\
    \ and the digital signature scheme parameters as\n      initial data and that\
    \ generates the digital signature as the\n      result [ISO14888-1].\n   witness:\
    \ element of data that states to the verifier whether the\n      digital signature\
    \ is valid or invalid.\n   random number: a number chosen from the definite number\
    \ set in such a\n      way that every number from the set can be chosen with equal\n\
    \      probability.\n   message: string of bits of a limited length [ISO14888-1].\n\
    \   hash code: string of bits that is a result of the hash function\n      [ISO14888-1].\n\
    \   hash function: the function that maps bit strings onto bit strings of\n  \
    \    fixed length observing the following properties:\n      1.  it is difficult\
    \ to calculate the input data that is the pre-\n          image of the given function\
    \ value;\n      2.  it is difficult to find another input data that is the pre-\n\
    \          image of the same function value as is the given input data;\n    \
    \      and\n      3.  it is difficult to find a pair of different input data that\n\
    \          produces the same hash function value.\n      [ISO14888-1]\n      Notes:\n\
    \      1.  Property 1 in the context of the digital signature area means\n   \
    \       that it is impossible to recover the initial message using the\n     \
    \     digital signature; property 2 means that it is difficult to\n          find\
    \ another (falsified) message that produces the same\n          digital signature\
    \ as a given message; property 3 means that it\n          is difficult to find\
    \ a pair of different messages that both\n          produce the same signature.\n\
    \      2.  In this standard, the terms \"hash function\", \"cryptographic\n  \
    \        hash function\", \"hashing function\", and \"cryptographic hashing\n\
    \          function\" are synonymous to provide terminological succession\n  \
    \        to native legal documents currently in force and scientific\n       \
    \   publications.\n   (electronic) digital signature: string of bits that are\
    \ obtained as a\n      result of the signature generation process [ISO14888-1].\n\
    \      Notes:\n      1.  A string of bits that is a signature may have an internal\n\
    \          structure depending on the specific signature generation\n        \
    \  mechanism.\n      2.  In this standard, the terms \"electronic signature\"\
    , \"digital\n          signature\", and \"electronic digital signature\" are synonymous\n\
    \          to provide terminological succession to native legal documents\n  \
    \        currently in force and scientific publications.\n"
- title: 3.2.  Notations
  contents:
  - "3.2.  Notations\n   The following notations are used in this standard:\n   V_l\
    \          set of all binary vectors of an l-bit length\n   V_all        set of\
    \ all binary vectors of an arbitrary finite length\n   Z            set of all\
    \ integers\n   p            prime number, p > 3\n   GF(p)        finite prime\
    \ field represented by a set of integers {0,\n                1, ..., p - 1}\n\
    \   b (mod p)    minimal non-negative number, congruent to b modulo p\n   M  \
    \          user's message, M belongs to V_all\n   (H1 || H2 )  concatenation of\
    \ two binary vectors\n   a, b         elliptic curve coefficients\n   m      \
    \      points of the elliptic curve group order\n   q            subgroup order\
    \ of group of points of the elliptic curve\n   O            zero point of the\
    \ elliptic curve\n   P            elliptic curve point of order q\n   d      \
    \      integer - a signature key\n   Q            elliptic curve point - a verification\
    \ key\n   zeta         digital signature for the message M\n   ^            the\
    \ power operator\n   /=           non-equality\n   sqrt         square root\n"
- title: 4.  General Statements
  contents:
  - "4.  General Statements\n   A commonly accepted digital signature scheme (model)\
    \ consists of\n   three processes:\n   -  generation of a pair of keys (for signature\
    \ generation and for\n      signature verification),\n   -  signature generation,\
    \ and\n   -  signature verification.\n   In GOST R 34.10-2012, a process for generating\
    \ a pair of keys (for\n   signature and verification) is not defined.  Characteristics\
    \ and ways\n   to realize the process are defined by involved subjects, who\n\
    \   determine corresponding parameters by their agreement.\n   The digital signature\
    \ mechanism is defined by the realization of two\n   main processes (Section 6):\n\
    \   -  signature generation (Section 6.1), and\n   -  signature verification (Section\
    \ 6.2).\n   The digital signature is meant for the authentication of the\n   signatory\
    \ of the electronic message.  Besides, digital signature\n   usage gives an opportunity\
    \ to provide the following properties during\n   signed message transmission:\n\
    \   -  realization of control of the transmitted signed message\n      integrity,\n\
    \   -  proof of the authorship of the signatory of the message, and\n   -  protection\
    \ of the message against possible forgery.\n   A schematic representation of the\
    \ signed message is shown in\n   Figure 1.\n                                 \
    \  appendix\n                                      |\n                      +-------------------------------+\n\
    \                      |                               |\n      +-----------+\
    \   +------------------------+- - - +\n      | message M |---| digital signature\
    \ zeta | text |\n      +-----------+   +------------------------+- - - +\n   \
    \                    Figure 1: Signed Message Scheme\n   The field \"digital signature\"\
    \ is supplemented by the field \"text\"\n   that can contain, for example, identifiers\
    \ of the signatory of the\n   message and/or time label.\n   The digital signature\
    \ scheme defined in GOST R 34.10-2012 must be\n   implemented using operations\
    \ of the elliptic curve points group,\n   defined over a finite prime field, and\
    \ also with the use of the hash\n   function.\n   The cryptographic security of\
    \ the digital signature scheme is based\n   on the complexity of solving the problem\
    \ of the calculation of the\n   discrete logarithm in the elliptic curve points\
    \ group and also on the\n   security of the hash function used.  The hash function\
    \ calculation\n   algorithm is defined in GOST R 34.11-2012 [GOST3411-2012].\n\
    \   The digital signature scheme parameters needed for signature\n   generation\
    \ and verification are defined in Section 5.2.  This\n   standard provides the\
    \ opportunity to select one of two options for\n   parameter requirements.\n \
    \  GOST R 34.10-2012 does not determine the process for generating the\n   parameters\
    \ needed for the digital signature scheme.  Possible sets of\n   these parameters\
    \ are defined, for example, in [RFC4357].\n   The digital signature represented\
    \ as a binary vector of a 512- or\n   1024-bit length must be calculated using\
    \ a definite set of rules, as\n   stated in Section 6.1.\n   The digital signature\
    \ of the received message is accepted or denied\n   in accordance with the set\
    \ of rules, as stated in Section 6.2.\n"
- title: 5.  Mathematical Conventions
  contents:
  - "5.  Mathematical Conventions\n   To define a digital signature scheme, it is\
    \ necessary to describe\n   basic mathematical objects used in the signature generation\
    \ and\n   verification processes.  This section lays out basic mathematical\n\
    \   definitions and requirements for the parameters of the digital\n   signature\
    \ scheme.\n"
- title: 5.1.  Mathematical Definitions
  contents:
  - "5.1.  Mathematical Definitions\n   Suppose a prime number p > 3 is given.  Then,\
    \ an elliptic curve E,\n   defined over a finite prime field GF(p), is the set\
    \ of number pairs\n   (x,y), where x and y belong to Fp, satisfying the identity:\n\
    \   y^2 = x^3 + a * x + b (mod p),                                    (1)\n  \
    \ where a, b belong to GF(p) and 4 * a^3 + 27 * b^2 is not congruent to\n   zero\
    \ modulo p.\n   An invariant of the elliptic curve is the value J(E), satisfying\
    \ the\n   equality:\n                      4 * a^3\n   J(E) = 1728 * ------------------\
    \ (mod p)                          (2)\n                 4 * a^3 + 27 * b^2\n\
    \   Elliptic curve E coefficients a, b are defined in the following way\n   using\
    \ the invariant J(E):\n   | a = 3 * k (mod p),\n   |                         \
    \                                        (3)\n   | b = 2 * k (mod p),\n      \
    \           J(E)\n   where k = ----------- (mod p), J(E) /= 0 or 1728\n      \
    \       1728 - J(E)\n   The pairs (x, y) satisfying the identity (1) are called\
    \ \"the elliptic\n   curve E points\"; x and y are called x- and y-coordinates\
    \ of the\n   point, correspondingly.\n   We will denote elliptic curve points\
    \ as Q(x, y) or just Q.  Two\n   elliptic curve points are equal if their x- and\
    \ y-coordinates are\n   equal.\n   On the set of all elliptic curve E points,\
    \ we will define the\n   addition operation, denoted by \"+\".  For two arbitrary\
    \ elliptic curve\n   E points Q1 (x1, y1) and Q2 (x2, y2), we will consider several\n\
    \   variants.\n   Suppose coordinates of points Q1 and Q2 satisfy the condition\
    \ x1 /=\n   x2.  In this case, their sum is defined as a point Q3 (x3, y3), with\n\
    \   coordinates defined by congruencies:\n   | x3 = lambda^2 - x1 - x2 (mod p),\n\
    \   |                                                                 (4)\n  \
    \ | y3 = lambda * (x1 - x3) - y1 (mod p),\n                   y1 - y2\n   where\
    \ lambda = -------- (mod p).\n                   x1 - x2\n   If x1 = x2 and y1\
    \ = y2 /= 0, then we will define point Q3 coordinates\n   in the following way:\n\
    \   | x3 = lambda^2 - x1 * 2 (mod p),\n   |                                  \
    \                               (5)\n   | y3 = lambda * (x1 - x3) - y1 (mod p),\n\
    \                  3 * x1^2 + a\n   where lambda = ------------ (mod p)\n    \
    \                 y1 * 2\n   If x1 = x2 and y1 = -y2 (mod p), then the sum of\
    \ points Q1 and Q2 is\n   called a zero point O, without determination of its\
    \ x- and y-\n   coordinates.  In this case, point Q2 is called a negative of point\n\
    \   Q1.  For the zero point, the equalities hold:\n   O + Q = Q + O = Q,     \
    \                                           (6)\n   where Q is an arbitrary point\
    \ of elliptic curve E.\n   A set of all points of elliptic curve E, including\
    \ the zero point,\n   forms a finite abelian (commutative) group of order m regarding\
    \ the\n   introduced addition operation.  For m, the following inequalities\n\
    \   hold:\n   p + 1 - 2 * sqrt(p) =< m =< p + 1 + 2 * sqrt(p)                \
    \   (7)\n   The point Q is called \"a point of multiplicity k\", or just \"a\n\
    \   multiple point of the elliptic curve E\", if for some point P, the\n   following\
    \ equality holds:\n   Q = P + ... + P = k * P                                \
    \           (8)\n       -----+-----\n            k\n"
- title: 5.2.  Digital Signature Parameters
  contents:
  - "5.2.  Digital Signature Parameters\n   The digital signature parameters are:\n\
    \   -  prime number p is an elliptic curve modulus.\n   -  elliptic curve E, defined\
    \ by its invariant J(E) or by coefficients\n      a, b belonging to GF(p).\n \
    \  -  integer m is an elliptic curve E points group order.\n   -  prime number\
    \ q is an order of a cyclic subgroup of the elliptic\n      curve E points group,\
    \ which satisfies the following conditions:\n   | m = nq, n belongs to Z, n >=\
    \ 1\n   |                                                                 (9)\n\
    \   | 2^254 < q < 2^256 or 2^508 < q < 2^512\n   -  point P /= O of an elliptic\
    \ curve E, with coordinates (x_p, y_p),\n      satisfying the equality q * P =\
    \ O.\n   -  hash function h(.):V_all -> V_l, which maps the messages\n      represented\
    \ as binary vectors of arbitrary finite length onto\n      binary vectors of an\
    \ l-bit length.  The hash function is defined\n      in GOST R 34.11-2012 [GOST3411-2012].\n\
    \      If 2^254 < q < 2^256, then l = 256.\n      If 2^508 < q < 2^512, then l\
    \ = 512.\n   Every user of the digital signature scheme must have its personal\n\
    \   keys:\n   -  signature key, which is an integer d, satisfying the inequality\
    \ 0\n      < d < q;\n   -  verification key, which is an elliptic curve point\
    \ Q with\n      coordinates (x_q, y_q), satisfying the equality d * P = Q.\n \
    \  The previously introduced digital signature parameters must satisfy\n   the\
    \ following requirements:\n   -  it is necessary that the condition p^t /= 1 (mod\
    \ q) holds for all\n      integers t = 1, 2, ..., B, where\n      B = 31  if 2^254\
    \ < q < 2^256, or\n      B = 131 if 2^508 < q < 2^512;\n   -  it is necessary\
    \ that the inequality m /= p holds;\n   -  the curve invariant must satisfy the\
    \ condition J(E) /= 0, 1728.\n"
- title: 5.3.  Binary Vectors
  contents:
  - "5.3.  Binary Vectors\n   To determine the digital signature generation and verification\n\
    \   processes, it is necessary to map the set of integers onto the set of\n  \
    \ binary vectors of an l-bit length.\n   Consider the following binary vector\
    \ of an l-bit length where low-\n   order bits are placed on the right, and high-order\
    \ ones are placed on\n   the left:\n   H = (alpha[l-1], ..., alpha[0]), H belongs\
    \ to V_l                (10)\n   where alpha[i], i = 0, ..., l-1 are equal to\
    \ 1 or to 0.  The number\n   alpha belonging to Z is mapped onto the binary vector\
    \ h, if the\n   equality holds:\n   alpha = alpha[0]*2^0 + alpha[1]*2^1 + ...\
    \ + alpha[l-1]*2^(l-1)   (11)\n   For two binary vectors H1 and H2:\n   H1 = (alpha[l-1],\
    \ ..., alpha[0]),\n                                                          \
    \          (12)\n   H2 = (beta[l-1], ..., beta[0]),\n   which correspond to integers\
    \ alpha and beta, we define a\n   concatenation (union) operation in the following\
    \ way:\n   H1||H2 = (alpha[l-1], ..., alpha[0], beta[l-1], ..., beta[0])    (13)\n\
    \   that is a binary vector of 2*l-bit length, consisting of coefficients\n  \
    \ of the vectors H1 and H2.\n   On the other hand, the introduced formulae define\
    \ a way to divide a\n   binary vector H of 2*l-bit length into two binary vectors\
    \ of l-bit\n   length, where H is the concatenation of the two.\n"
- title: 6.  Main Processes
  contents:
  - "6.  Main Processes\n   In this section, the digital signature generation and\
    \ verification\n   processes of a user's message are defined.\n   To realize the\
    \ processes, it is necessary that all users know the\n   digital signature scheme\
    \ parameters, which satisfy the requirements\n   of Section 5.2.\n   Besides,\
    \ every user must have the signature key d and the\n   verification key Q(x_q,\
    \ y_q), which also must satisfy the\n   requirements of Section 5.2.\n"
- title: 6.1.  Digital Signature Generation Process
  contents:
  - "6.1.  Digital Signature Generation Process\n   It is necessary to perform the\
    \ following actions (steps) to obtain\n   the digital signature for the message\
    \ M belonging to V_all.  This is\n   Algorithm I.\n   Step 1.  Calculate the message\
    \ hash code M:\n            H = h(M)                                         \
    \       (14)\n   Step 2.  Calculate an integer alpha, the binary representation\
    \ of\n            which is the vector H, and determine:\n            e = alpha\
    \ (mod q)                                       (15)\n            If e = 0, then\
    \ assign e = 1.\n   Step 3.  Generate a random (pseudorandom) integer k, satisfying\
    \ the\n            inequality:\n            0 < k < q                        \
    \                       (16)\n   Step 4.  Calculate the elliptic curve point C\
    \ = k * P and determine:\n            r = x_C (mod q),                       \
    \                 (17)\n            where x_C is the x-coordinate of the point\
    \ C.  If r = 0,\n            return to step 3.\n   Step 5.  Calculate the value:\n\
    \            s = (r * d + k * e) (mod q)                             (18)\n  \
    \          If s = 0, return to Step 3.\n   Step 6.  Calculate the binary vectors\
    \ R and S, corresponding to r and\n            s, and determine the digital signature\
    \ zeta = (R || S) as a\n            concatenation of these two binary vectors.\n\
    \   The initial data of this process are the signature key d and the\n   message\
    \ M to be signed.  The output result is the digital signature\n   zeta.\n"
- title: 6.2.  Digital Signature Verification
  contents:
  - "6.2.  Digital Signature Verification\n   To verify the digital signature for\
    \ the received message M, it is\n   necessary to perform the following actions\
    \ (steps).  This is\n   Algorithm II.\n   Step 1.  Calculate the integers r and\
    \ s using the received signature\n            zeta.  If the inequalities 0 < r\
    \ < q, 0 < s < q hold, go to\n            the next step.  Otherwise, the signature\
    \ is invalid.\n   Step 2.  Calculate the hash code of the received message M:\n\
    \            H = h(M)                                                (19)\n  \
    \ Step 3.  Calculate the integer alpha, the binary representation of\n       \
    \     which is the vector H, and determine if:\n            e = alpha (mod q)\
    \                                       (20)\n            If e = 0, then assign\
    \ e = 1.\n   Step 4.  Calculate the value:\n            v = e^(-1) (mod q)   \
    \                                   (21)\n   Step 5.  Calculate the values:\n\
    \            z1 = s * v (mod q), z2 = -r * v (mod q)                 (22)\n  \
    \ Step 6.  Calculate the elliptic curve point C = z1 * P + z2 * Q and\n      \
    \      determine:\n            R = x_C (mod q),                              \
    \          (23)\n            where x_C is x-coordinate of the point.\n   Step\
    \ 7.  If the equality R = r holds, then the signature is accepted.\n         \
    \   Otherwise, the signature is invalid.\n   The input data of the process are\
    \ the signed message M, the digital\n   signature zeta, and the verification key\
    \ Q.  The output result is the\n   witness of the signature validity or invalidity.\n"
- title: 7.  Test Examples (Appendix to GOST R 34.10-2012)
  contents:
  - "7.  Test Examples (Appendix to GOST R 34.10-2012)\n   This section is included\
    \ in GOST R 34.10-2012 as a reference appendix\n   but is not officially mentioned\
    \ as a part of the standard.\n   The values given here for the parameters p, a,\
    \ b, m, q, P, the\n   signature key d, and the verification key Q are recommended\
    \ only for\n   testing the correctness of actual realizations of the algorithms\n\
    \   described in GOST R 34.10-2012.\n   All numerical values are introduced in\
    \ decimal and hexadecimal\n   notations.  The numbers beginning with 0x are in\
    \ hexadecimal\n   notation.  The symbol \"\\\\\" denotes that the number continues\
    \ on the\n   next line.  For example, the notation:\n      12345\\\\\n      67890\n\
    \      0x499602D2\n   represents 1234567890 in decimal and hexadecimal number\
    \ systems,\n   respectively.\n"
- title: 7.1.  The Digital Signature Scheme Parameters
  contents:
  - "7.1.  The Digital Signature Scheme Parameters\n   The following parameters must\
    \ be used for digital signature\n   generation and verification (see Section 5.2).\n"
- title: 7.1.1.  Elliptic Curve Modulus
  contents:
  - "7.1.1.  Elliptic Curve Modulus\n   The following value is assigned to parameter\
    \ p in this example:\n   p = 57896044618658097711785492504343953926\\\\\n    \
    \   634992332820282019728792003956564821041\n   p = 0x8000000000000000000000000000\\\
    \\\n       000000000000000000000000000000000431\n"
- title: 7.1.2.  Elliptic Curve Coefficients
  contents:
  - "7.1.2.  Elliptic Curve Coefficients\n   Parameters a and b take the following\
    \ values in this example:\n   a = 7\n   a = 0x7\n   b = 43308876546767276905765904595650931995\\\
    \\\n       942111794451039583252968842033849580414\n   b = 0x5FBFF498AA938CE739B8E022FBAFEF40563\\\
    \\\n       F6E6A3472FC2A514C0CE9DAE23B7E\n"
- title: 7.1.3.  Elliptic Curve Points Group Order
  contents:
  - "7.1.3.  Elliptic Curve Points Group Order\n   Parameter m takes the following\
    \ value in this example:\n   m = 5789604461865809771178549250434395392\\\\\n \
    \      7082934583725450622380973592137631069619\n   m = 0x80000000000000000000000000000\\\
    \\\n       00150FE8A1892976154C59CFC193ACCF5B3\n"
- title: 7.1.4.  Order of Cyclic Subgroup of Elliptic Curve Points Group
  contents:
  - "7.1.4.  Order of Cyclic Subgroup of Elliptic Curve Points Group\n   Parameter\
    \ q takes the following value in this example:\n   q = 5789604461865809771178549250434395392\\\
    \\\n       7082934583725450622380973592137631069619\n   q = 0x80000000000000000000000000000001\\\
    \\\n       50FE8A1892976154C59CFC193ACCF5B3\n"
- title: 7.1.5.  Elliptic Curve Point Coordinates
  contents:
  - "7.1.5.  Elliptic Curve Point Coordinates\n   Point P coordinates take the following\
    \ values in this example:\n   x_p = 2\n   x_p = 0x2\n   y_p = 40189740565390375033354494229370597\\\
    \\\n         75635739389905545080690979365213431566280\n   y_p = 0x8E2A8A0E65147D4BD6316030E16D19\\\
    \\\n         C85C97F0A9CA267122B96ABBCEA7E8FC8\n"
- title: 7.1.6.  Signature Key
  contents:
  - "7.1.6.  Signature Key\n   It is supposed, in this example, that the user has\
    \ the following\n   signature key d:\n   d = 554411960653632461263556241303241831\\\
    \\\n       96576709222340016572108097750006097525544\n   d = 0x7A929ADE789BB9BE10ED359DD39A72C\\\
    \\\n       11B60961F49397EEE1D19CE9891EC3B28\n"
- title: 7.1.7.  Verification Key
  contents:
  - "7.1.7.  Verification Key\n   It is supposed, in this example, that the user has\
    \ the verification\n   key Q with the following coordinate values:\n   x_q = 57520216126176808443631405023338071\\\
    \\\n         176630104906313632182896741342206604859403\n   x_q = 0x7F2B49E270DB6D90D8595BEC458B5\\\
    \\\n         0C58585BA1D4E9B788F6689DBD8E56FD80B\n   y_q = 17614944419213781543809391949654080\\\
    \\\n         031942662045363639260709847859438286763994\n   y_q = 0x26F1B489D6701DD185C8413A977B3\\\
    \\\n         CBBAF64D1C593D26627DFFB101A87FF77DA\n"
- title: 7.2.  Digital Signature Process (Algorithm I)
  contents:
  - "7.2.  Digital Signature Process (Algorithm I)\n   Suppose that after Steps 1-3\
    \ in Algorithm I (Section 6.1) are\n   performed, the following numerical values\
    \ are obtained:\n   e = 2079889367447645201713406156150827013\\\\\n       0637142515379653289952617252661468872421\n\
    \   e = 0x2DFBC1B372D89A1188C09C52E0EE\\\\\n       C61FCE52032AB1022E8E67ECE6672B043EE5\n\
    \   k = 538541376773484637314038411479966192\\\\\n       41504003434302020712960838528893196233395\n\
    \   k = 0x77105C9B20BCD3122823C8CF6FCC\\\\\n       7B956DE33814E95B7FE64FED924594DCEAB3\n\
    \   And the multiple point C = k * P has the coordinates:\n   x_C = 297009809158179528743712049839382569\\\
    \\\n         90422752107994319651632687982059210933395\n   x_C = 0x41AA28D2F1AB148280CD9ED56FED\\\
    \\\n         A41974053554A42767B83AD043FD39DC0493\n   y[C] = 328425352786846634770946653225170845\\\
    \\\n          06804721032454543268132854556539274060910\n   y[C] = 0x489C375A9941A3049E33B34361DD\\\
    \\\n          204172AD98C3E5916DE27695D22A61FAE46E\n   Parameter r = x_C (mod\
    \ q) takes the value:\n   r = 297009809158179528743712049839382569\\\\\n     \
    \  90422752107994319651632687982059210933395\n   r = 0x41AA28D2F1AB148280CD9ED56FED\\\
    \\\n       A41974053554A42767B83AD043FD39DC0493\n   Parameter s = (r * d + k *\
    \ e)(mod q) takes the value:\n   s = 57497340027008465417892531001914703\\\\\n\
    \       8455227042649098563933718999175515839552\n   s = 0x1456C64BA4642A1653C235A98A602\\\
    \\\n       49BCD6D3F746B631DF928014F6C5BF9C40\n"
- title: 7.3.  Verification Process of Digital Signature (Algorithm II)
  contents:
  - "7.3.  Verification Process of Digital Signature (Algorithm II)\n   Suppose that\
    \ after Steps 1-3 in Algorithm II (Section 6.2) are\n   performed, the following\
    \ numerical value is obtained:\n   e = 2079889367447645201713406156150827013\\\
    \\\n       0637142515379653289952617252661468872421\n   e = 0x2DFBC1B372D89A1188C09C52E0EE\\\
    \\\n       C61FCE52032AB1022E8E67ECE6672B043EE5\n   And the parameter v = e^(-1)\
    \ (mod q) takes the value:\n   v = 176866836059344686773017138249002685\\\\\n\
    \       62746883080675496715288036572431145718978\n   v = 0x271A4EE429F84EBC423E388964555BB\\\
    \\\n       29D3BA53C7BF945E5FAC8F381706354C2\n   The parameters z1 = s * v (mod\
    \ q) and z2 = -r * v (mod q) take the\n   values:\n   z1 = 376991675009019385568410572935126561\\\
    \\\n        08841345190491942619304532412743720999759\n   z1 = 0x5358F8FFB38F7C09ABC782A2DF2A\\\
    \\\n        3927DA4077D07205F763682F3A76C9019B4F\n   z2 = 141719984273434721125159179695007657\\\
    \\\n        6924665583897286211449993265333367109221\n   z2 = 0x3221B4FBBF6D101074EC14AFAC2D4F7\\\
    \\\n        EFAC4CF9FEC1ED11BAE336D27D527665\n   The point C = z1 * P + z2 * Q\
    \ has the coordinates:\n   x_C = 2970098091581795287437120498393825699\\\\\n \
    \        0422752107994319651632687982059210933395\n   x_C = 0x41AA28D2F1AB148280CD9ED56FED\\\
    \\\n         A41974053554A42767B83AD043FD39DC0493\n   y[C] = 3284253527868466347709466532251708450\\\
    \\\n          6804721032454543268132854556539274060910\n   y[C] = 0x489C375A9941A3049E33B34361DD\\\
    \\\n          204172AD98C3E5916DE27695D22A61FAE46E\n   Then the parameter R =\
    \ x_C (mod q) takes the value:\n   R = 2970098091581795287437120498393825699\\\
    \\\n       0422752107994319651632687982059210933395\n   R = 0x41AA28D2F1AB148280CD9ED56FED\\\
    \\\n       A41974053554A42767B83AD043FD39DC0493\n   Since the equality R = r holds,\
    \ the digital signature is accepted.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   This entire document is about security considerations.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [GOST3410-2001]  \"Information technology.  Cryptographic\
    \ data\n                    security.  Signature and verification processes of\n\
    \                    [electronic] digital signature\", GOST R 34.10-2001,\n  \
    \                  Gosudarstvennyi Standard of Russian Federation,\n         \
    \           Government Committee of Russia for Standards, 2001.\n            \
    \        (In Russian)\n   [GOST3410-2012]  \"Information technology.  Cryptographic\
    \ data\n                    security.  Signature and verification processes of\n\
    \                    [electronic] digital signature\", GOST R 34.10-2012,\n  \
    \                  Federal Agency on Technical Regulating and\n              \
    \      Metrology, 2012.\n   [GOST3411-2012]  \"Information technology.  Cryptographic\
    \ Data\n                    Security.  Hashing function\", GOST R 34.11-2012,\n\
    \                    Federal Agency on Technical Regulating and\n            \
    \        Metrology, 2012.\n   [RFC2119]        Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n                    Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC4357]        Popov, V., Kurepkin, I., and S. Leontiev,\n\
    \                    \"Additional Cryptographic Algorithms for Use with\n    \
    \                GOST 28147-89, GOST R 34.10-94, GOST R 34.10-2001,\n        \
    \            and GOST R 34.11-94 Algorithms\", RFC 4357, January\n           \
    \         2006.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [ISO2382-2]      ISO, \"Data processing - Vocabulary\
    \ - Part 2:\n                    Arithmetic and logic operations\", ISO 2382-2,\
    \ 1976.\n   [ISO9796-2]      ISO/IEC, \"Information technology - Security\n  \
    \                  techniques - Digital signatures giving message\n          \
    \          recovery - Part 2: Integer factorization based\n                  \
    \  mechanisms\", ISO/IEC 9796-2, 2010.\n   [ISO9796-3]      ISO/IEC, \"Information\
    \ technology - Security\n                    techniques - Digital signature schemes\
    \ giving\n                    message recovery - Part 3: Discrete logarithm based\n\
    \                    mechanisms\", ISO/IEC 9796-3, 2006.\n   [ISO14888-1]    \
    \ ISO/IEC, \"Information technology - Security\n                    techniques\
    \ - Digital signatures with appendix - Part\n                    1: General\"\
    , ISO/IEC 14888-1, 2008.\n   [ISO14888-2]     ISO/IEC, \"Information technology\
    \ - Security\n                    techniques - Digital signatures with appendix\
    \ - Part\n                    2: Integer factorization based mechanisms\", ISO/IEC\n\
    \                    14888-2, 2008.\n   [ISO14888-3]     ISO/IEC, \"Information\
    \ technology - Security\n                    techniques - Digital signatures with\
    \ appendix - Part\n                    3: Discrete logarithm based mechanisms\"\
    , ISO/IEC\n                    14888-3,2006.\n   [ISO14888-4]     ISO/IEC, \"\
    Information technology - Security\n                    techniques - Digital signatures\
    \ with appendix - Part\n                    3: Discrete logarithm based mechanisms.\
    \  Amendment\n                    1.  Elliptic Curve Russian Digital Signature\n\
    \                    Algorithm, Schnorr Digital Signature Algorithm,\n       \
    \             Elliptic Curve Schnorr Digital Signature Algorithm,\n          \
    \          and Elliptic Curve Full Schnorr Digital Signature\n               \
    \     Algorithm\", ISO/IEC 14888-3:2006/Amd 1, 2010.\n   [ISO10118-1]     ISO/IEC,\
    \ \"Information technology - Security\n                    techniques - Hash-functions\
    \ - Part 1: General\",\n                    ISO/IEC 10118-1, 2000.\n   [ISO10118-2]\
    \     ISO/IEC, \"Information technology - Security\n                    techniques\
    \ - Hash-functions - Part 2: Hash-\n                    functions using an n-bit\
    \ block cipher algorithm\",\n                    ISO/IEC 10118-2, 2010.\n   [ISO10118-3]\
    \     ISO/IEC, \"Information technology - Security\n                    techniques\
    \ - Hash-functions - Part 3: Dedicated\n                    hash-functions\",\
    \ ISO/IEC 10118-3, 2004.\n   [ISO10118-4]     ISO/IEC, \"Information technology\
    \ - Security\n                    techniques - Hash-functions - Part 4: Hash-\n\
    \                    functions using modular arithmetic\", ISO/IEC\n         \
    \           10118-4, 1998.\n   [RFC5832]        Dolmatov, V., Ed., \"GOST R 34.10-2001:\
    \ Digital\n                    Signature Algorithm\", RFC 5832, March 2010.\n\
    \   [RFC6986]        Dolmatov, V., Ed., and A. Degtyarev, \"GOST R\n         \
    \           34.11-2012: Hash Function\", RFC 6986, August 2013.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Vasily Dolmatov (editor)\n   Cryptocom, Ltd.\n   14 Kedrova\
    \ St., Bldg. 2\n   Moscow, 117218\n   Russian Federation\n   EMail: dol@cryptocom.ru\n\
    \   Alexey Degtyarev\n   Cryptocom, Ltd.\n   14 Kedrova St., Bldg. 2\n   Moscow,\
    \ 117218\n   Russian Federation\n   EMail: alexey@renatasystems.org\n"
