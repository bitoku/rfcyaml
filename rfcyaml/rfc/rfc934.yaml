- title: __initial_text__
  contents:
  - '              Proposed Standard for Message Encapsulation

    '
- title: STATUS OF THIS MEMO
  contents:
  - "STATUS OF THIS MEMO\n   This RFC suggests a proposed protocol for the ARPA-Internet\n\
    \   community, and requests discussion and suggestions for improvements.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: Introduction, Scope, and Motivation
  contents:
  - "Introduction, Scope, and Motivation\n   The services that a user agent (UA) can\
    \ offer are varied.  Although\n   all outgoing mail may be thought of as going\
    \ through a single posting\n   slot to connect to the message transport system\
    \ (MTS), it is possible\n   to consider a message draft being posted as described\
    \ by one of the\n   following four types of postings:\n      Originate - a new\
    \ message is composed from scratch, which, to the\n      knowledge of the UA,\
    \ is unrelated to any message previously\n      handled by the user.\n      Reply\
    \ - a message is composed as a reply to a message previously\n      received by\
    \ the user.  In most circumstances, the UA aids the user\n      in composing the\
    \ reply by constructing the header portion of the\n      message draft, using\
    \ components extracted from the received\n      message headers.\n      Forward\
    \ - one more more messages previously received by the user\n      are formatted\
    \ by the UA as a part of the body portion of the\n      draft.  In this sense,\
    \ a \"digest\" for an interest group may be\n      considered as forwarding. \
    \ Similarly, an argument may be made that\n      \"blind-carbon-copies\" should\
    \ also be handled in this fashion.\n      Distribute - a message previously received\
    \ by the user is\n      re-posted to the MTS.  The draft being re-posted is identical\
    \ to\n      the original message with the exception that certain \"ReSent-XXX\"\
    \n      headers are appended to the headers portion of the draft, and the\n  \
    \    \"Return-Path\" header is reset to reference the re-sender's\n      address.\
    \  (See [RFC-821] for a discussion of the Return-Path\n      header.)\n   Most\
    \ user agents support the first two of these activities, many\n   support the\
    \ first three, and a few support all four.\n   This memo concerns itself only\
    \ with the third type, which is message\n   forwarding.  (For a brief treatment\
    \ of the semantics of message\n   components with respect to replies, see [RFC-822].)\
    \ In many ways,\n"
- title: RFC 934                                                     January 1985
  contents:
  - 'RFC 934                                                     January 1985

    '
- title: Message Encapsulation
  contents:
  - "Message Encapsulation\n   forwarding can be thought of as encapsulating one or\
    \ more messages\n   inside another.  Although this is useful for transfer of past\n\
    \   correspondence to new recipients, without a decapsulation process\n   (which\
    \ this memo terms \"bursting\"), the forwarded messages are of\n   little use\
    \ to the recipients because they can not be distributed,\n   forwarded, replied-to,\
    \ or otherwise processed as separate individual\n   messages.\n      NOTE: RFC-822\
    \ mistakenly refers to distribution as forwarding\n      (section 4.2).  This\
    \ memo suggests below, that these two\n      activities can and should be the\
    \ same.\n   In the case of an interest group digest, a bursting capability is\n\
    \   especially useful.  Not only does the ability to burst a digest\n   permit\
    \ a recipient of the digest to reply to an individual digested\n   message, but\
    \ it also allows the recipient to selectively process the\n   other messages encapsulated\
    \ in the digest.  For example, a single\n   digest issue usually contains more\
    \ than one topic.  A subscriber may\n   only be interested in a subset of the\
    \ topics discussed in a\n   particular issue.  With a bursting capability, the\
    \ subscriber can\n   burst the digest, scan the headers, and process those messages\
    \ which\n   are of interest.  The others can be ignored, if the user so desires.\n\
    \   This memo is motivated by three concerns:\n      In order to burst a message\
    \ it is necessary to know how the\n      component messages were encapsulated\
    \ in the draft.  At present\n      there is no unambiguous standard for interest\
    \ group digests.  This\n      memo proposes such a standard for the ARPA-Internet.\
    \  Although\n      interest group digests may appear to conform to a pseudo-standard,\n\
    \      there is a serious ambiguity in the implementations which produce\n   \
    \   digests.  By proposing this standard, the authors hope to solve\n      this\
    \ problem by specifically addressing the implementation\n      ambiguity.\n  \
    \    Next, there is much confusion as to how \"blind-carbon-copies\"\n      should\
    \ be handled by UAs.  It appears that each agent in the\n      ARPA-Internet which\
    \ supports a \"bcc:\" facility does so\n      differently. Although this memo\
    \ does not propose a standard for\n      the generation of blind-carbon-copies,\
    \ it introduces a formalism\n      which views the \"bcc:\" facility as a special\
    \ case of the\n      forwarding activity.\n      Finally, both forwarding and\
    \ distribution can be accomplished with\n      the same forwarding procedure,\
    \ if a distributed message can be\n      extracted as a separate individually\
    \ processable message.  With a\n      proper bursting agent, it will be difficult\
    \ to distinguish between\n"
- title: RFC 934                                                     January 1985
  contents:
  - 'RFC 934                                                     January 1985

    '
- title: Message Encapsulation
  contents:
  - "Message Encapsulation\n      a message which has been distributed and a message\
    \ which has been\n      extracted from a forwarded message. This memo argues that\
    \ there is\n      no valuable distinction to be made, between forwarding and\n\
    \      distribution, and that in the interests of simplicity,\n      distribution\
    \ facilities should not be generally available to the\n      ordinary users of\
    \ a message system.  However, this memo also\n      argues that such facilities\
    \ should be available to certain trusted\n      entities within the MTS.\n   \
    \      NOTE: this memo does not propose that the distribution facility\n     \
    \    be abolished.  Rather it argues the case forcefully in the hope\n       \
    \  that other interested parties in the ARPA-Internet will join\n         this\
    \ discussion.\n"
- title: Message Encapsulation
  contents:
  - "Message Encapsulation\n   This memo proposes the following encapsulation protocol:\
    \ two agents\n   act on behalf of the user, a forwarding agent, which composes\
    \ the\n   message draft prior to posting, and a bursting agent which decomposes\n\
    \   the message after delivery.\n   Definitions: a draft forwarding message consists\
    \ of a header portion\n   and a text portion.  If the text portion is present,\
    \ it is separated\n   from the header portion by a blank line.  Inside the text\
    \ portion a\n   certain character string sequence, known as an \"encapsulation\n\
    \   boundary\", has special meaning.  Currently (in existing\n   digestification\
    \ agents), an encapsulation boundary (EB) is defined as\n   a line in the message\
    \ which starts with a dash (decimal code 45,\n   \"-\").  Initially, no restriction\
    \ is placed on the length of the\n   encapsulation boundary, or on the characters\
    \ that follow the dash.\n   1. The Header Portion\n   This memo makes no restriction\
    \ on the header portion of the draft,\n   although it should conform to the RFC-822\
    \ standard.\n   2. The Text Portion\n   The text of the draft forwarding message\
    \ consists of three parts: an\n   initial text section, the encapsulated messages,\
    \ and the final text\n   section.\n      2.1. The Initial Text Section\n     \
    \ All text (if any) up to the first EB comprises the initial text\n      section\
    \ of the draft.  This memo makes no restrictions on the\n"
- title: RFC 934                                                     January 1985
  contents:
  - 'RFC 934                                                     January 1985

    '
- title: Message Encapsulation
  contents:
  - "Message Encapsulation\n      format of the initial text section of the draft.\
    \  In the case of a\n      digest, this initial text is usually the \"table of\
    \ contents\" of\n      the digest.\n      2.2. The Final Text Section\n      All\
    \ text (if any) after the last EB composes the final text\n      section of the\
    \ draft.  This memo makes no restrictions on the\n      format of the final text\
    \ section of the draft.  In the case of a\n      digest, this final text usually\
    \ contains the sign-off banner for\n      the digest (e.g., \"End of FOO Digest\"\
    ).\n      2.3. Encapsulated Messages\n      Each encapsulated message is bounded\
    \ by two EBs: a pre-EB, which\n      occurs before the message; and, a post-EB,\
    \ which occurs after the\n      message.  For two adjacent encapsulated messages,\
    \ the post-EB of\n      the first message is also the pre-EB of the second message.\n\
    \      Consistent with this, two adjacent EBs with nothing between them\n    \
    \  should be treated as enclosing a null message, and thus two or\n      more\
    \ adjacent EBs are equivalent to one EB.\n      Each encapsulated message consists\
    \ of two parts: a headers portion\n      and a text portion.  If the text portion\
    \ is present, it is\n      separated from the header portion by a blank line.\n\
    \         2.3.1. The Header Portion\n         Minimally, there must be two header\
    \ items in each message being\n         forwarded, a \"Date:\" field and a \"\
    From:\" field. This differs\n         from RFC-822, which requires at least one\
    \ destination address\n         (in a \"To:\" or \"cc:\" field) or a possibly\
    \ empty \"Bcc:\" field.\n         Any addresses occuring in the header items for\
    \ a message being\n         forwarded must be fully qualified.\n         2.3.2.\
    \ The Text Portion\n         This memo makes no restrictions on the format of\
    \ the text\n         portion of each encapsulated message.  (Actually, this memo\n\
    \         does restrict the format of the text portion of each\n         encapsulated\
    \ message, but these restrictions are discussed\n         later.)\n   Before summarizing\
    \ the generation/parsing rules for message\n   encapsulation, two issues are addressed.\n"
- title: RFC 934                                                     January 1985
  contents:
  - 'RFC 934                                                     January 1985

    '
- title: Message Encapsulation
  contents:
  - 'Message Encapsulation

    '
- title: Compatibility with Existing User Agents
  contents:
  - "Compatibility with Existing User Agents\n   The above encapsulation protocol\
    \ is presently used by many user\n   agents in the ARPA-Internet, and was specifically\
    \ designed to\n   minimize the amount of changes to existing implementations of\n\
    \   forwarding agents in the ARPA-Internet.\n   However, the protocol is not exactly\
    \ like the pseudo-standard used by\n   those forwarding agents that compose digests.\
    \  In particular, the\n   post-EB of all messages encapsulated in a digest is\
    \ preceeded and\n   followed by by a blank line.  In addition, the first message\n\
    \   encapsulated in a digest has a pre-EB that is followed by a blank\n   line,\
    \ but usually isn't preceeded by a blank line (wonderful).\n   This memo recommends\
    \ that implementors of forwarding agents wishing\n   to remain compatible with\
    \ existing bursting agents consider\n   surrounding each EB with a blank line.\
    \  It should be noted that blank\n   lines following a pre-EB for an encapsulated\
    \ message must be ignored\n   by bursting agents.  Further, this memo suggests\
    \ that blank lines\n   preceeding a post-EB also be ignored by bursting agents.\n\
    \      NOTE: This recommendation is made in the interest of\n      backwards-compatibility.\
    \  A forwarding agent wishing to strictly\n      adhere to this memo, should not\
    \ generate blank lines surrounding\n      EBs.\n"
- title: Character-Stuffing the Encapsulation Boundary
  contents:
  - "Character-Stuffing the Encapsulation Boundary\n   It should be noted that the\
    \ protocol is general enough to support\n   both general forwarding of messages\
    \ and the specific case of digests.\n   Unfortunately, there is one issue of message\
    \ encapsulation which\n   apparently is not addressed by any forwarding agent\
    \ (to the authors'\n   knowledge) in the ARPA-Internet: what action does the forwarding\n\
    \   agent take when the encapsulation boundary occurs within a the text\n   portion\
    \ of a message being forwarded?  Without exception, this\n   circumstance is ignored\
    \ by existing forwarding agents.\n   To address this issue, this memo proposes\
    \ the following\n   character-stuffing scheme: the encapsulation boundary is defined\
    \ as a\n   line which starts with a dash.  A special case is made for those\n\
    \   boundaries which start with a dash and are followed by a space\n   (decimal\
    \ code 32, \" \").\n      During forwarding, if the forwarding agent detects a\
    \ line in the\n      text portion of a message being forwarded which starts with\
    \ the\n      encapsulation boundary, the forwarding agent outputs a dash\n   \
    \   followed by a space prior to outputting the line.\n"
- title: RFC 934                                                     January 1985
  contents:
  - 'RFC 934                                                     January 1985

    '
- title: Message Encapsulation
  contents:
  - "Message Encapsulation\n      During bursting, if the bursting agent detects an\
    \ encapsulation\n      boundary which starts with a dash followed by a space,\
    \ then the\n      bursting agent does not treat the line as an encapsulation\n\
    \      boundary, and outputs the remainder of the line instead.\n   This simple\
    \ character-stuffing scheme permits recursive forwardings.\n"
- title: Generation/Parsing Rules for Message Encapsulation
  contents:
  - "Generation/Parsing Rules for Message Encapsulation\n   The rules for forwarding/bursting\
    \ are described in terms of regular\n   expressions.  The first author originally\
    \ derived simple finite-state\n   automata for the rules, but was unable to legibly\
    \ represent them in\n   this memo.  It is suggested that the implementors sketch\
    \ the automata\n   to understand the grammar.\n   The conventions used for the\
    \ grammar are simple.  Each state is\n   followed by one or more alternatives,\
    \ which are separated by the \"|\"\n   character.  Each alternative starts with\
    \ a character that is received\n   as input. (CRLF, although two characters is\
    \ treated as one character\n   herein.)  The last alternative for a state is the\
    \ character \"c\",\n   which represents any character not specified in the preceeding\n\
    \   alternatives.  Optionally following the input character is an output\n   string\
    \ enclosed by curly-braces.  Following this is the state that\n   the automata\
    \ enters.  The reader should note that these grammars are\n   extremely simple\
    \ to implement (and, in most cases, can be implemented\n   quite efficiently).\n\
    \   When the forwarding agent encapsulates a message, it should apply the\n  \
    \ following finite-state automaton.  The initial state is S1.\n      S1 ::   CRLF\
    \ {CRLF} S1\n            | \"-\" {\"- -\"} S2\n            | c {c} S2\n      S2\
    \ ::   CRLF {CRLF} S1\n            | c {c} S2\n   This simply says that anytime\
    \ a \"-\" is found at the beginning of a\n   line, a \"- \" is output prior to\
    \ outputting the line.\n"
- title: RFC 934                                                     January 1985
  contents:
  - 'RFC 934                                                     January 1985

    '
- title: Message Encapsulation
  contents:
  - "Message Encapsulation\n   When the bursting agent decapsulates the text portion\
    \ of a draft, it\n   should apply the following finite-state automaton.  The initial\
    \ state\n   is S1.\n      S1 ::   \"-\" S3\n            | CRLF {CRLF} S1\n   \
    \         | c {c} S2\n      S2 ::   CRLF {CRLF} S1\n            | c {c} S2\n \
    \     S3 ::   \" \" S2\n            | c S4\n      S4 ::   CRLF S5\n          \
    \  | c S4\n      S5 ::   CRLF S5\n            | c {c} S2\n   Although more complicated\
    \ than the grammar used by the forwarding\n   agent to encapsulate a single message,\
    \ this grammer is still quite\n   simple.  Let us make the simplifying assumption\
    \ that both the initial\n   and final text sections of the draft are messages\
    \ in addition to the\n   encapsulated messages.\n   To begin, the current message\
    \ being burst is scanned at state S1. All\n   characters are output until the\
    \ EB is found (state S3).  If \"- \" is\n   found, the automaton enters state\
    \ S2 and characters from the current\n   message are continued to be output. \
    \ Finally, a true EB is found\n   (state S4).  As the automaton traverses from\
    \ state S3 to S4, the\n   bursting agent should consider the current message ended.\
    \  The\n   remainder of the EB is discarded (states S4 and S5).  As the\n   automaton\
    \ traverses from state S5 to S2, the bursting agent should\n   consider a new\
    \ message started and output the first character.  In\n   state S2, all characters\
    \ are output until the EB is found.\n"
- title: Blind Carbon Copies
  contents:
  - "Blind Carbon Copies\n   Many user agents support a blind-carbon-copy facility.\
    \  With this\n   facility a draft has two types of addressees: visible and blind\n\
    \   recipients.  The visible recipients are listed as addresses in the\n   \"\
    To:\" and \"cc:\" fields of the draft, and the blind recipients are\n   listed\
    \ as addresses in the \"Bcc:\" fields of the draft.  The basis of\n   this facility\
    \ is that copies of the draft which are delivered to the\n   recipients list the\
    \ visible recipients only.\n"
- title: RFC 934                                                     January 1985
  contents:
  - 'RFC 934                                                     January 1985

    '
- title: Message Encapsulation
  contents:
  - "Message Encapsulation\n   One method of achieving this is to post a single draft,\
    \ which lacks\n   any \"Bcc:\" fields, and, during posting, to interact with the\
    \ MTS in\n   such a way that copies are sent to both the visible and blind\n \
    \  recipients.\n   Unfortunately, a key problem with this arrangement is that\
    \ the blind\n   recipients can accidently reply to the draft in such a way that\
    \ the\n   visible recipients are included as addressees in the reply. This is\n\
    \   socially unacceptable!  To avoid this problem, the message which the\n   visible\
    \ recipients receive must be different than the message which\n   the blind recipients\
    \ receive.\n   A second method is to post two drafts.  The first, which goes to\
    \ the\n   visible recipients, is simply the draft without any \"Bcc:\" fields.\n\
    \   The second, which goes to the blind recipients, is simply the draft\n   with\
    \ some string prepended to any \"To:\" and \"cc:\" field. For example,\n   the\
    \ user agent might prepend \"BCC-\" to these fields, so that the\n   blind recipients\
    \ get a draft with \"BCC-To:\" and \"Bcc-cc:\" fields and\n   no \"To:\" or \"\
    cc:\" fields. Unfortunately, this is often very confusing\n   to the blind recipients.\
    \  Although accidental replies are not\n   possible, it is often difficult to\
    \ tell that the draft received is\n   the result of a blind-carbon-copy.\n   The\
    \ method which this memo suggests is to post two drafts, a visible\n   draft for\
    \ the visible recipients, and a blind draft for the blind\n   recipients.  The\
    \ visible draft consists of the original draft without\n   any \"Bcc:\" fields.\
    \  The blind draft contains the visible message as a\n   forwarded message.  The\
    \ headers for the blind draft contain the\n   minimal RFC-822 headers and, if\
    \ the original draft had a \"Subject:\"\n   field, then this header field is also\
    \ included.  In addition, the\n   user agent might explicitly show that the blind\
    \ draft is the result\n   of a blind-carbon-copy, with a \"Bcc\" header or prior\
    \ to the first\n   encapsulating boundary in the body.\n"
- title: Message Distribution
  contents:
  - "Message Distribution\n   The main purpose of message distribution (often called\
    \ redistribution\n   or resending) is to provide to a secondary recipient, perhaps\
    \ not\n   included among the original addressees, with a \"true original\" copy\n\
    \   that can be treated like an original in every respect.\n   Such distribution\
    \ is most often done by discussion group moderators\n   who use automated agents\
    \ to simply repost received messages to a\n   distribution list.  The better automatic\
    \ distribution agents insert a\n   new \"Return-Path\" header field to direct\
    \ address failure notices to\n   the discussion group address list maintainer,\
    \ rather than to the\n   original author.  This form of distribution is encouraged\
    \ because it\n"
- title: RFC 934                                                     January 1985
  contents:
  - 'RFC 934                                                     January 1985

    '
- title: Message Encapsulation
  contents:
  - "Message Encapsulation\n   most simply serves to deliver messages to discussion\
    \ group recipients\n   as processable originals.  It is performed by trusted pseudo-MTS\n\
    \   agents.\n   A second kind of distribution is that done by individuals who\
    \ wish to\n   transfer a processable copy of a received message to another\n \
    \  recipient. This second form is discouraged in various new standards\n   for\
    \ message transfer.  These include the NBS Standard for Mail\n   Interchange [FIPS-98],\
    \ and the recent CCITT draft MHS (Mail Handling\n   Systems) X.400 standards [X.400].\
    \ In place of direct reposting of\n   received messages as though they are new\
    \ drafts, the recommendation\n   is to forward the received message in the body\
    \ of a new draft from\n   which is can be extracted by its secondary recipient\
    \ for further\n   processing.\n   It is in support of this recommendation that\
    \ this standard for\n   encapsulation/decapsulation is proposed.\n"
- title: RFC 934                                                     January 1985
  contents:
  - 'RFC 934                                                     January 1985

    '
- title: Message Encapsulation
  contents:
  - 'Message Encapsulation

    '
- title: References
  contents:
  - "References\n   [RFC-822]    D.H. Crocker.  \"Standard for the Format of ARPA-Internet\n\
    \                Text Messages\", University of Delaware.  (August, 1982)\n  \
    \ [RFC-821]    J.B. Postel.  \"Simple Mail Transfer Protocol\",\n            \
    \    USC/Information Sciences Institute.  (August, 1982).\n   [FIPS-98]    National\
    \ Bureau of Standards.  \"Specification for\n                Message Format for\
    \ Computer Based Message Systems.\"\n                (January, 1983).\n   [X.400]\
    \      Consultative Committee on International Telephone and\n               \
    \ Telegraph.  \"DRAFT Recommendation X.400.  Message\n                Handling\
    \ Systems: System Model-Service Elements.\"\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Marshall T. Rose\n      Department of Computer and Information\
    \ Sciences\n      University of Delaware\n      Newark, DE 19716\n      MRose@UDel.ARPA\n\
    \   Einar A. Stefferud\n      Network Management Associates, Inc.\n      17301\
    \ Drey Lane\n      Huntington Beach, CA 92647\n      Stef@UCI.ARPA\n"
