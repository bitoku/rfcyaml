- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                  V. Dolmatov, Ed.
  contents:
  - "Independent Submission                                  V. Dolmatov, Ed.\n  \
    \               GOST 28147-89: Encryption, Decryption,\n            and Message\
    \ Authentication Code (MAC) Algorithms\n"
- title: Abstract
  contents:
  - "Abstract\n   This document is intended to be a source of information about the\n\
    \   Russian Federal standard for electronic encryption, decryption, and\n   message\
    \ authentication algorithms (GOST 28147-89), which is one of\n   the Russian cryptographic\
    \ standard algorithms called GOST\n   algorithms).  Recently, Russian cryptography\
    \ is being used in\n   Internet applications, and this document has been created\
    \ as\n   information for developers and users of GOST 28147-89 for encryption,\n\
    \   decryption, and message authentication.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This is a contribution to\
    \ the RFC Series, independently of any other\n   RFC stream.  The RFC Editor has\
    \ chosen to publish this document at\n   its discretion and makes no statement\
    \ about its value for\n   implementation or deployment.  Documents approved for\
    \ publication by\n   the RFC Editor are not a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc5830.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n   This document\
    \ may not be modified, and derivative works of it may not\n   be created, except\
    \ to format it for publication as an RFC or to\n   translate it into languages\
    \ other than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. General Information ........................................3\n  \
    \ 2. Applicability ...................................................3\n   3.\
    \ Definitions and Notations .......................................3\n      3.1.\
    \ Definitions ................................................3\n      3.2. Notation\
    \ ...................................................4\n   4. General Statements\
    \ ..............................................4\n   5. The Electronic Codebook\
    \ Mode ....................................6\n      5.1. Encryption of Plain Text\
    \ in the Electronic Codebook Mode ...6\n      5.2. Decryption of the Ciphertext\
    \ in the Electronic\n           Codebook Mode ..............................................9\n\
    \   6. The Counter Encryption Mode ....................................10\n  \
    \    6.1. Encryption of Plain Text in the Counter Encryption Mode ...10\n    \
    \  6.2. Decryption of Ciphertext in the Counter Encryption Mode ...13\n   7. The\
    \ Cipher Feedback Mode .......................................13\n      7.1. Encryption\
    \ of Plain Text in the Cipher Feedback Mode ......13\n      7.2. Decryption of\
    \ Ciphertext in the Cipher Feedback Mode ......14\n   8. Message Authentication\
    \ Code (MAC) Generation Mode ..............15\n   9. Security Considerations ........................................17\n\
    \   10. Normative References ..........................................17\n  \
    \ Appendix A. Values of the Constants C1 and C2 .....................18\n   Appendix\
    \ B. Contributors ..........................................19\n"
- title: 1.  Introduction
  contents:
  - '1.  Introduction

    '
- title: 1.1.  General Information
  contents:
  - "1.1.  General Information\n   [GOST28147-89] is the unified cryptographic transformation\
    \ algorithm\n   for information processing systems of different purposes, defining\n\
    \   the encryption/decryption rules and the message authentication code\n   (MAC)\
    \ generation rules.\n   This cryptographic transformation algorithm is intended\
    \ for hardware\n   or software implementation and corresponds to the cryptographic\n\
    \   requirements.  It puts no limitations on the encrypted information\n   secrecy\
    \ level.\n"
- title: 2.  Applicability
  contents:
  - "2.  Applicability\n   GOST 28147-89 defines the encryption/decryption model and\
    \ MAC\n   generation for a given message (document) that is meant for\n   transmission\
    \ via insecure public telecommunication channels between\n   data processing systems\
    \ of different purposes.\n   GOST 28147-89 is obligatory to use in the Russian\
    \ Federation in all\n   data processing systems providing public services.\n"
- title: 3.  Definitions and Notations
  contents:
  - '3.  Definitions and Notations

    '
- title: 3.1.  Definitions
  contents:
  - "3.1.  Definitions\n   The following terms are used in the standard:\n   Running\
    \ key: a pseudo-random bit sequence generated by a given\n   algorithm for encrypting\
    \ plain texts and decrypting encrypted texts.\n   Encryption: the process of transforming\
    \ plain text to encrypted data\n   using a cipher.\n   MAC: an information string\
    \ of fixed length that is generated from\n   plain text and a key according to\
    \ some rule and added to the\n   encrypted data for protection against data falsification.\n\
    \   Key: a defined secret state of some parameters of a cryptographic\n   transformation\
    \ algorithm, that provides a choice of one\n   transformation out of all the possible\
    \ transformations.\n   Cryptographic protection: data protection using the data\n\
    \   cryptographic transformations.\n   Cryptographic transformation: data transformation\
    \ using encryption\n   and (or) MAC.\n   Decryption: the process of transforming\
    \ encrypted data to plain text\n   using a cipher.\n   Initialisation vector:\
    \ initial values of plain parameters of a\n   cryptographic transformation algorithm.\n\
    \   Encryption equation: a correlation showing the process of generating\n   encrypted\
    \ data out of plain text as a result of transformations\n   defined by the cryptographic\
    \ transformation algorithm.\n   Decryption equation: a correlation showing the\
    \ process of generating\n   plain text out of encrypted data as a result of transformations\n\
    \   defined by the cryptographic transformation algorithm.\n   Cipher: a set of\
    \ reversible transformations of the set of possible\n   plain texts onto the set\
    \ of encrypted data, made after certain rules\n   and using keys.\n"
- title: 3.2.  Notation
  contents:
  - "3.2.  Notation\n   In this document, the following notations are used:\n    ^\
    \   is a power operator.\n   (+)  is a bitwise addition of the words of the same\
    \ length modulo 2.\n   [+]  is an addition of 32-bit vectors modulo 2^32.\n  \
    \ [+]' is an addition of the 32-bit vectors modulo 2^32-1.\n   1..N is all values\
    \ from 1 to N.\n"
- title: 4.  General Statements
  contents:
  - "4.  General Statements\n   The structure model of the cryptographic transformation\
    \ algorithm (a\n   cryptographic model) contains:\n   - a 256-bit key data store\
    \ (KDS) consisting of eight 32-bit registers\n     (X0, X1, X2, X3, X4, X5, X6,\
    \ X7);\n   - four 32-bit registers (N1, N2, N3, N4);\n   - two 32-bit registers\
    \ (N5 and N6) containing constants C1 and C2;\n   - two 32-bit adders modulo 2^32\
    \ (CM1, CM3);\n   - a 32-bit adder of bitwise sums modulo 2 (CM2);\n   - a 32-bit\
    \ adder modulo (2^32-1) (CM4);\n   - an adder modulo 2 (CM5), with no limitation\
    \ to its width;\n   - a substitution box (K);\n   - a register for a cyclic shift\
    \ of 11 steps to the top digit (R).\n   A substitution box (S-box) K consists\
    \ of eight substitution points\n   K1, K2, K3, K4, K5, K6, K7, K8, with 64-bit\
    \ memory.  A 32-bit vector\n   coming to the substitution box is divided into\
    \ eight successive 4-bit\n   vectors, and each of them is transformed into a 4-bit\
    \ vector by a\n   corresponding substitution point.  A substitution point is a\
    \ table\n   consisting of 16 lines, each containing four bits.  The incoming\n\
    \   vector defines the line address in the table, and the contents of\n   that\
    \ line is the outgoing vector.  Then, these 4-bit outgoing vectors\n   are successively\
    \ combined into a 32-bit vector.\n   Remark: the standard doesn't define any S-boxes.\
    \  Some of them are\n   defined in [RFC4357].\n   When adding and cyclically shifting\
    \ binary vectors, the registers\n   with larger numbers are considered the top\
    \ digits.\n   When writing a key (W1, W2, ..., W256), Wq = 0..1, q = 1..256, in\
    \ the\n   KDS the value:\n   - W1 is written into the 1st bit of the register\
    \ X0;\n   - the value W2 is written into the 2nd bit of the register X0 (etc.);\n\
    \   - the value W32 is written into the 32nd bit of the register X0;\n   - the\
    \ value W33 is written into the 1st bit of the register X1;\n   - the value W34\
    \ is written into the 2nd bit of the register X1\n     (etc.);\n   - the value\
    \ W64 is written into the 32nd bit of the register X1;\n   - the value W65 is\
    \ written into the 1st bit of the register X2\n     (etc.);\n   - the value W256\
    \ is written into the 32nd bit of the register X7.\n   When rewriting the information,\
    \ the value of the p-th bit of one\n   register (adder) is written into the p-th\
    \ bit of another register\n   (adder).\n   The values of the constants C1 and\
    \ C2 in the registers N5 and N6 are\n   in the Appendix 1.\n   The keys defining\
    \ fillings of KDS and the substitution box K tables\n   are secret elements and\
    \ are provided in accordance with the\n   established procedure.\n   The filling\
    \ of the substitution box K is described in GOST 28147-89\n   as a long-term key\
    \ element common for a whole computer network.\n   Usually, K is used as a parameter\
    \ of algorithm, some possible sets of\n   K are described in [RFC4357].\n   The\
    \ cryptographic model contemplates four working modes:\n   - data encryption (decryption)\
    \ in the electronic codebook (ECB) mode,\n   - data encryption (decryption) in\
    \ the counter (CNT) mode,\n   - data encryption (decryption) in the cipher feedback\
    \ (CFB) mode, and\n   - the MAC generation mode.\n   [RFC4357] also describes\
    \ the CBC mode of GOST 28147-89, but this mode\n   is not a part of the standard.\n"
- title: 5.  The Electronic Codebook Mode
  contents:
  - '5.  The Electronic Codebook Mode

    '
- title: 5.1.  Encryption of Plain Text in the Electronic Codebook Mode
  contents:
  - "5.1.  Encryption of Plain Text in the Electronic Codebook Mode\n   The plain\
    \ text to be encrypted is split into 64-bit blocks.  Input of\n   a binary data\
    \ block Tp = (a1(0), a2(0), ... , a31(0), a32(0), b1(0),\n   b2(0), ..., b32(0))\
    \ into the registers N1 and N2 is done so that the\n   value of a1(0) is put into\
    \ the first bit of N1, the value of a2(0) is\n   put into the second bit of N1,\
    \ etc., and the value of a32(0) is put\n   into the 32nd bit of N1.  The value\
    \ of b1(0) is put into the first\n   bit of N2, the value of b2(0) is put into\
    \ the 2nd bit of N2, etc.,\n   and the value of b32(0) is input into the 32nd\
    \ bit of N2.\n   The result is the state (a32(0), a31(0), ..., a2(0), a1(0)) of\
    \ the\n   register N1 and the state (b32(0), b31(0), ..., b1(0)) of the\n   register\
    \ N2.\n   The 256 bits of the key are entered into the KDS.  The contents of\n\
    \   eight 32-bit registers X0, X1, ..., X7 are:\n      X0 = W32, W31, ..., W2,\
    \ W1\n      X1 = W64, W63, ..., W34, W33\n      . . . . . . . . . . . . . . .\n\
    \      X7 = W256, W255, ..., W226, W225\n   The algorithm for enciphering 64-bit\
    \ blocks of plain text in the\n   electronic codebook mode consists of 32 rounds.\n\
    \   In the first round, the initial value of register N1 is added modulo\n   2^32\
    \ in the adder CM1 to the contents of the register X0.  Note: the\n   value of\
    \ register N1 is unchanged.\n   The result of the addition is transformed in the\
    \ substitution block\n   K, and the resulting vector is put into the register\
    \ R, where it is\n   cyclically shifted by 11 steps towards the top digit.  The\
    \ result of\n   this shift is added bitwise modulo 2 in the adder CM2 to the 32-bit\n\
    \   contents of the register N2.  The result produced in CM2 is then\n   written\
    \ into N1, and the old contents of N1 are written in N2.  Thus,\n   the first\
    \ round ends.\n   The subsequent rounds are similar to the first one:\n   - in\
    \ the second round, the contents of X1 are read from the KDS;\n   - in the third\
    \ round, the contents of X2 are read from the KDS, etc.;\n   - in the 8th round,\
    \ the contents of X7 are read from the KDS.\n   - in rounds 9 through 16 and 17\
    \ through 24, the contents of the KDS\n     are read in the same order:\n    \
    \  X0, X1, X2, X3, X4, X5, X6, X7.\n   - in the last eight rounds from the 25th\
    \ to the 32nd, the contents of\n     the KDS are read backwards:\n      X7, X6,\
    \ X5, X4, X3, X2, X1, X0.\n   Thus, during the 32 rounds of encryption, the following\
    \ order of\n   choosing the registers' contents is implemented:\n      X0, X1,\
    \ X2, X3, X4, X5, X6, X7, X0, X1, X2, X3, X4, X5, X6, X7,\n      X0, X1, X2, X3,\
    \ X4, X5, X6, X7, X7, X6, X5, X4, X3, X2, X1, X0\n   In the 32nd round, the result\
    \ in the adder CM2 is written into the\n   register N2, and the old contents of\
    \ register N1 are unchanged.\n   After the 32nd round, the contents of the registers\
    \ N1 and N2 are an\n   encrypted data block corresponding to a block of plain\
    \ text.\n   The equations for enciphering in the electronic codebook mode are:\n\
    \      |a(j) = (a(j-1) [+] X(j-1)(mod 8))*K*R (+) b (j-1)\n      |           \
    \                                           j = 1..24;\n      |b(j) = a(j-1)\n\
    \      |a(j) = (a(j-1) [+] X(32-j))*K*R (+) b(j-1)\n      |                  \
    \                        j = 25..31; a32 = a31;\n      |b(j) = a(j-1)\n      b(32)\
    \ = (a(31) [+] X0)*K*R (+) b(31)                        j=32,\n   where:\n   a(0)\
    \ = (a32(0), a31(0), ..., a1(0)) constitutes the initial contents\n   of N1 before\
    \ the first round of encryption;\n   b(0) = (b32(0), b31(0), ..., b1(0)) constitutes\
    \ the initial contents\n   of N2 before the first round of encryption;\n   a(j)\
    \ = (a32(j), a31(j), ..., a1(j)) constitutes the contents of N1\n   after the\
    \ j-th round of encryption;\n   b(j) = (b32(j), b31(j), ..., b1(j)) constitutes\
    \ the contents of N2\n   after the j-th round of encryption, j = 1..32.\n   R\
    \ is the operation of cyclic shift towards the top digit by 11 steps,\n   as follows:\n\
    \      R(r32, r31, r30, r29, r28, r27, r26, r25, r24, r23, r22, r21,\n      r20,\
    \ ..., r2, r1) =\n      (r21, r20, ..., r2, r1, r32, r31, r30, r29, r28, r27,\
    \ r26, r25,\n      r24, r23, r22)\n   The 64-bit block of ciphertext Tc is taken\
    \ out of the registers N1,\n   N2 in the following order:\n   the first, second,\
    \ ..., 32nd bit of the register N1, then the first,\n   second, ..., 32nd bit\
    \ of the register N2, i.e.,\n      Tc = a1(32), a2(32), ..., a32(32), b1(32),\
    \ b2(32), ..., b32(32)).\n   The remaining blocks of the plain text in electronic\
    \ codebook mode\n   are encrypted in the same fashion.\n"
- title: 5.2.  Decryption of the Ciphertext in the Electronic Codebook Mode
  contents:
  - "5.2.  Decryption of the Ciphertext in the Electronic Codebook Mode\n   The same\
    \ 256-bit key that was used for encryption is loaded into the\n   KDS, the encrypted\
    \ data to be deciphered is divided into 64-bit\n   blocks.  The loading of any\
    \ binary information block\n      Tc = (a1(32), a2(32), ..., a32(32), b1(32),\
    \ b2(32), ..., b32(32))\n   into the registers N1 and N2 is done in such a way\
    \ that:\n   - the contents of a1(32) are written into the first bit of N1;\n \
    \  - the contents of a2(32) are written into the second bit of N1 (and\n     so\
    \ on);\n   - the contents of a32(32) are written into the 32nd bit of N1;\n  \
    \ - the contents of b1(32) are written into the first bit of N2 (and so\n    \
    \ on);\n   - and the contents of b32(32) are written into the 32nd bit of N2.\n\
    \   The decryption procedure uses the same algorithm as the encryption of\n  \
    \ plain text, with one exception: the contents of the registers X0, X1,\n   ...,\
    \ X7 are read from the KDS in the decryption rounds in the\n   following order:\n\
    \      X0,X1,X2,X3,X4,X5,X6,X7, X7,X6,X5,X4,X3,X2,X1,X0,\n      X7,X6,X5,X4,X3,X2,X1,X0,\
    \ X7,X6,X5,X4,X3,X2,X1,X0.\n   The decryption equations are:\n      |a(32-j) =\
    \ (a(32-j+1) [+] X(j-1))*K*R (+) b(32-j+1)\n      |                          \
    \                              j = 1..8;\n      |b(32-1) = a(32-j+1)\n      |a(32-j)\
    \ = (a(32-j+1) [+] X(j-1)(mod 8))*K*R (+) b(32-j+1)\n      |                 \
    \                                      j = 9..31;\n      |b(32-1) = a(32-j+1)\n\
    \      |a(0) = a(1)\n      |                                                 \
    \           j=32.\n      |b(0) = (a(1) [+] X0)*K*R (+) b1\n   The fillings of\
    \ the adders N1 and N2 after 32 working rounds are a\n   plain text block.\n \
    \     Tp = (a1(0), a2(0), ... , a32(0), b1(0), b2(0), ..., b32(0))\n   corresponding\
    \ to the encrypted data block:\n   - the value of a1(0) of the block Tp corresponds\
    \ to the contents of\n     the first bit of N1;\n   - the value of a2(0) corresponds\
    \ to the contents of the second bit of\n     N1 (etc.);\n   - the value of b1(0)\
    \ corresponds to the contents of the first bit of\n     N2;\n   - the value of\
    \ b2(0) corresponds to the contents of the second bit of\n     N2 (etc.);\n  \
    \ - the value of b32(0) corresponds to the contents of 32nd bit of N2;\n   - the\
    \ remaining blocks of encrypted data are decrypted similarly.\n   The encryption\
    \ algorithm in the electronic codebook mode of a 64-bit\n   block Tp is denoted\
    \ by A, that is:\n      A(Tp) is A(a(0), b(0)) = (a(32), b(32)) = Tc.\n"
- title: 6.  The Counter Encryption Mode
  contents:
  - '6.  The Counter Encryption Mode

    '
- title: 6.1.  Encryption of Plain Text in the Counter Encryption Mode
  contents:
  - "6.1.  Encryption of Plain Text in the Counter Encryption Mode\n   The plain text\
    \ divided into 64-bit blocks Tp(1), Tp(2), ..., Tp(M-1),\n   Tp(M) is encrypted\
    \ in the counter encryption mode by bitwise addition\n   modulo 2 in the adder\
    \ CM5 with the running key Gc produced in 64-bit\n   blocks, that is:\n      Gc\
    \ = (Gc(1), Gc(2), ..., Gc(M-1), Gc(M))\n   where M is defined by the size of\
    \ the plain text being encrypted.\n   Gc(i) is the i-th 64-bit block where i=1..M,\
    \ the number of bits in a\n   block Tp(M) can be less than 64.  In this case,\
    \ the unused part of\n   the running key block Gc(M) is discarded.\n   256 bits\
    \ of the key are put into the KDS.  The registers N1 and N2\n   accept a 64-bit\
    \ binary sequence (an initialisation vector) S = (S1,\n   S2, ..., S64), that\
    \ is, the initial filling of these registers for\n   subsequent generation of\
    \ M blocks of the running key.  The\n   initialisation vector is put into the\
    \ registers N1 and N2 so:\n   - the value of S1 is written into the first bit\
    \ of N1;\n   - the value of S2 is written into the second bit of N1 (etc.);\n\
    \   - the value of S32 is written into the 32nd bit of N1;\n   - the value of\
    \ S33 is written into the first bit of N2;\n   - the value of S34 is written into\
    \ the 33th bit of N2 (etc.);\n   - the value of S64 is written into the 32nd bit\
    \ of N2.\n   The initial filling of the registers N1 and N2 (the initialisation\n\
    \   vector S) is encrypted in the electronic codebook mode in accordance\n   with\
    \ the requirements from section 5.1.  The result of that\n   encryption A(S) =\
    \ (Y0, Z0) is rewritten into the 32-bit registers N3\n   and N4 so as the contents\
    \ of N1 are written into N3, and the contents\n   of N2 are written into N4.\n\
    \   The filling of the register N4 is added modulo (2^32-1) in the adder\n   CM4\
    \ to the 32-bit constant C1 from the register N6; the result is\n   written into\
    \ N4.  The filling of the register N3 is added modulo 2^32\n   in the adder CM3\
    \ with the 32-bit constant C2 from the register N5;\n   the result is written\
    \ into N3.\n   The filling of N3 is copied into N1, and the filling of N4 is copied\n\
    \   into N2, while the fillings of N3 and N4 are kept.\n   The filling of N1 and\
    \ N2 is encrypted in the electronic codebook mode\n   according to the requirements\
    \ of section 5.1.  The resulting\n   encrypted filling of N1 and N2 is the first\
    \ 64-bit block of the\n   running key Gc(1), this block is bitwise added modulo\
    \ 2 in the adder\n   CM5 with the first 64-bit block of the plain text:\n    \
    \  Tp(1) = (t1(1), t2(1), ..., t63(1), t64(1)).\n   The result of this addition\
    \ is a 64-bit block of the encrypted data:\n      Tc(1) = (tau1(1), tau2(1), ...,\
    \ tau63(1), tau64(1)).\n   The value of tau1(1) of the block Tc(1) is the result\
    \ of the addition\n   of modulo 2 in the CM5 the value t1(1) of the block Tp(1)\
    \ to the\n   value of the first bit of N1; the value of tau2(1) of the block Tc(1)\n\
    \   is the result of addition modulo 2 in the CM5 the value of t2(1) from\n  \
    \ the block Tp(1) to the value of the second bit of N1, etc.; the value\n   of\
    \ tau64(1) of the block Tc(1) is the result of addition modulo 2 in\n   the CM5\
    \ of the value t64(1) of the block Tp(1) to the value of the\n   32nd bit of N2.\n\
    \   To get the next 64-bit block of the running key Gc(2), the filling of\n  \
    \ N4 is added modulo (2^32-1) in the adder CM4 with the constant C1\n   from N6;\
    \ the filling of N3 is added modulo 2^32 in the adder CM3 with\n   the constant\
    \ C2 from N5.  The new filling of N3 is copied into N1;\n   the new filling of\
    \ N4 is copied into N2; the fillings of N3 and N4\n   are kept.\n   The filling\
    \ of N1 and N2 is encrypted in the electronic codebook mode\n   according to the\
    \ requirements of section 5.1.  The resulting\n   encrypted filling of N1 and\
    \ N2 is the second 64-bit block of the\n   running key Gc(2); this block is bitwise\
    \ added modulo 2 in the adder\n   CM5 with the first 64-bit block of the plain\
    \ text Tp(2).  The\n   remaining running key blocks Gc(3), Gc(4), ..., Gc(M) are\
    \ generated\n   and the plain text blocks Tp(3), Tp(4), ..., Tp(M) are encrypted\n\
    \   similarly.  If the length of the last M-th block of the plain text is\n  \
    \ less than 64 bits, then only the corresponding number of bits from\n   the last\
    \ M-th block of the running key is used; remaining bits are\n   discarded.\n \
    \  The initialisation vector S and the blocks of encrypted data Tc(1),\n   Tc(2),\
    \ ..., Tc(M) are transmitted to the telecommunication channel or\n   to the computer\
    \ memory.\n   The encryption equation is:\n      Tc(i) = A(Y[i-1] [+] C2, Z[i-1])\
    \ [+]' C1) (+) Tp(i)\n            = Gc(i) (+) Tp(i)     i=1..M\n   where:\n  \
    \    Y[i] is the contents of the register N3 after encrypting the\n      i-th\
    \ block of the plain text Tp(i);\n      Z(i) is the contents of the register N4\
    \ after encrypting the\n      i-th block of the plain text Tp(i);\n      (Y[0],\
    \ Z[0]) = A(S).\n"
- title: 6.2.  Decryption of Ciphertext in the Counter Encryption Mode
  contents:
  - "6.2.  Decryption of Ciphertext in the Counter Encryption Mode\n   256 bits of\
    \ the key that was used for encrypting the data Tp(1),\n   Tp(2), ..., Tp(M) are\
    \ put into the KDS.  The initialisation vector S\n   is put into the registers\
    \ N1 and N2 and, like in the section 6.1 M\n   blocks of the running key, Gc(1),\
    \ Gc(2), ..., Gc(M) are generated.\n   The encrypted data blocks Tc(1), Tc(2),\
    \ ..., Tc(M) are added bitwise\n   modulo 2 in the adder CM5 with the blocks of\
    \ the running key, and\n   this results in the blocks of plain text Tp(1), Tp(2),\
    \ ..., Tp(M),\n   and Tp(M) may contain less than 64 bit.\n   The decryption equation\
    \ is:\n      Tp(i) = A (Y[i-1] [+] C2, Z[i-1] [+]' C1) (+) Tc(i)\n           \
    \ = Gc(i) (+) Tc(i)     i = 1..M\n"
- title: 7.  The Cipher Feedback Mode
  contents:
  - '7.  The Cipher Feedback Mode

    '
- title: 7.1.  Encryption of Plain Text in the Cipher Feedback Mode
  contents:
  - "7.1.  Encryption of Plain Text in the Cipher Feedback Mode\n   The plain text\
    \ is divided into 64-bit blocks Tp(1), Tp(2), ..., Tp(M)\n   and encrypted in\
    \ the cipher feedback mode by bitwise addition modulo\n   2 in the adder CM5 with\
    \ the running key Gc generated in 64-bit\n   blocks, i.e., Gc(i)=(Gc(1), Gc(2),\
    \ ..., Gc(M)), where M is defined by\n                                       \
    \                            ___\n   the length of the plain text, Gc(i) is the\
    \ i-th 64-bit block, i=1,M.\n   The number of bits in the block Tp(M) may be less\
    \ than 64.\n   256 bits of the key are put into the KDS.  The 64-bit initialisation\n\
    \   vector S = (S1, S2, ..., S64) is put into N1 and N2 as described in\n   section\
    \ 6.1.\n   The initial filling of N1 and N2 is encrypted in the electronic\n \
    \  codebook mode in accordance with the requirements in section 6.1.  If\n   resulting\
    \ encrypted filling N1 and N2 is the first 64-bit block of\n   the running key\
    \ Gc(1)=A(S), then this block is added bitwise modulo 2\n   with the first 64-bit\
    \ block of plain text Tp(1) = (t1(1), t2(1), ...,\n   t64(1)).\n   The result\
    \ is a 64-bit block of encrypted data\n      Tc(1) = (tau1(1), tau2(1), ..., tau64(1)).\n\
    \   The block of encrypted data Tc(1) is simultaneously the initial state\n  \
    \ of N1 and N2 for generating the second block of the running key Gc(2)\n   and\
    \ is written on feedback in these registers.  Here:\n   - the value of tau1(1)\
    \ is written into the first bit of N1;\n   - the value of tau2(1) is written into\
    \ the second bit of N1, etc.;\n   - the value of tau32(1) is written into the\
    \ 32nd bit of N1;\n   - the value of tau33(1) is written into the first bit of\
    \ N2;\n   - the value of tau34(1) is written into the second bit of N2, etc.;\n\
    \   - the value of tau64(1) is written into the 32nd bit of N2.\n   The filling\
    \ of N1 and N2 is encrypted in the electronic codebook mode\n   in accordance\
    \ with the requirements in the section 6.1.  The\n   encrypted filling of N1 and\
    \ N2 makes the second 64-bit block of the\n   running key Gc(2), this block is\
    \ added bitwise modulo 2 in the adder\n   CM5 to the second block of the plain\
    \ text Tp(2).\n   The generation of subsequent blocks of the running key Gc(i)\
    \ and the\n   encryption of the corresponding blocks of the plain text Tp(i) (i\
    \ =\n   3..M) are performed similarly.  If the length of the last M-th block\n\
    \   of the plain text is less than 64 bits, only the corresponding number\n  \
    \ of bits of the M-th block of the running key Gc(M) is used; remaining\n   bits\
    \ are discarded.\n   The encryption equations in the cipher feedback mode are:\n\
    \      |Tc(1) = A(S) (+) Tp(1) = Gc(1) (+) Tp(1)\n      |\n      |Tc(i) = A(Tc(i-1))\
    \ (+) Tp(i) = Gc(i) + Tp(i), i = 2..M.\n   The initialisation vector S and the\
    \ blocks of encrypted data Tc(1),\n   Tc(2), ..., Tc(M) are transmitted into the\
    \ telecommunication channel\n   or to the computer memory.\n"
- title: 7.2.  Decryption of Ciphertext in the Cipher Feedback Mode
  contents:
  - "7.2.  Decryption of Ciphertext in the Cipher Feedback Mode\n   256 bits of the\
    \ key used for the encryption of Tp(1), Tp(2), ...,\n   Tp(M) are put into the\
    \ KDS.  The initialisation vector S is put into\n   N1 and N2 similar to 6.1.\n\
    \   The initial filling of N1 and N2 (the initialisation vector S) is\n   encrypted\
    \ in the electronic codebook mode in accordance with the\n   subsection 6.1. \
    \ The encrypted filling of N1, N2 is the first block\n   of the running key Gc(1)\
    \ = A(S), this block is added bitwise modulo 2\n   in the adder CM5 with the encrypted\
    \ data block Tc(1).  This results\n   in the first block of plain text Tp(1).\n\
    \   The block of encrypted data Tc(1) makes the initial filling of N1, N2\n  \
    \ for generating the second block of the running key Gc(2).  The block\n   Tc(1)\
    \ is written in N1 and N2 in accordance with the requirements in\n   the subsection\
    \ 6.1, the resulted block Gc(2) is added bitwise modulo\n   2 in the adder CM5\
    \ to the second block of the encrypted data Tc(2).\n   This results in the block\
    \ of plain text Tc(2).\n   Similarly, the blocks of encrypted data Tc(2), Tc(3),\
    \ ..., Tc(M-1)\n   are written in N1, N2 successively, and the blocks of the running\
    \ key\n   Gc(3), Gc(4), ..., Gc(M) are generated out of them in the electronic\n\
    \   codebook mode.  The blocks of the running key are added bitwise\n   modulo\
    \ 2 in the adder CM5 to the blocks of the encrypted data Tc(3),\n   Tc(4), ...,\
    \ Tc(M), this results in the blocks of plain text Tp(3),\n   Tp(4), ..., Tp(M);\
    \ here, the number of bits in the last block of the\n   plain text Tp(M) can be\
    \ less than 64 bit.\n   The decryption equations in the cipher feedback mode are:\n\
    \      |Tp(1) = A(S) (+) Tc(1) = Gc(1) (+) Tc(1)\n      |\n      |Tp(1) = A(Tc(i-1))\
    \ (+) Tc(i) = Gc(i) (+) Tc(i), i=2..M\n"
- title: 8.  Message Authentication Code (MAC) Generation Mode
  contents:
  - "8.  Message Authentication Code (MAC) Generation Mode\n   To provide the protection\
    \ from falsification of plain text consisting\n   of M 64-bit blocks Tp(1), Tp(2),\
    \ ..., Tp(M), M >= 2, an additional\n   l-bit block is generated (the message\
    \ authentication code I(l)).  The\n   process of MAC generation is the same for\
    \ all the\n   encryption/decryption modes.\n   - The first block of plain text:\n\
    \      Tp(1) = (t1(1), t1(2), ..., t64(1)) = (a1(1)[0], a2(1)[0], ...,\n     \
    \         a32(1)[0], b1(1)[0], b2(1)[0], ..., b32(1)[0])\n     is written to the\
    \ registers N1 and N2;\n   - the value of t1(1) = a1(1)[0] is written into the\
    \ first bit of N1;\n   - the value of t2(1) = a2(1)[0] is written into the second\
    \ bit of N1,\n     etc.;\n   - the value of t32(1) = a32(1)[0] is written into\
    \ the 32nd bit of N1;\n   - the value of t33(1) = b1(1)[0] is written into the\
    \ first bit of N2,\n     etc.;\n   - the value of t64(1) = b32(1)[0] is written\
    \ into the 32nd bit of N2.\n   The filling of N1 and N2 is transformed in accordance\
    \ with the first\n   16 rounds of the encryption algorithm in the electronic codebook\
    \ mode\n   (see the subsection 6.1).  In the KDS, there exists the same key that\n\
    \   is used for encrypting the blocks of plain text Tp(1), Tp(2), ...,\n   Tp(M)\
    \ in the corresponding blocks of encrypted data Tc(1), Tc(2),\n   ..., Tc(M).\n\
    \   The filling of N1 and N2 after the 16 working rounds, looking like\n   (a1(1)[16],\
    \ a2(1)[16], ..., a32(1)[16], b1(1)[16], b2(1)[16], ...,\n   b32(1)[16]), is added\
    \ in CM5 modulo 2 to the second block Tp(2) =\n   (t1(2), t2(2), ..., t64(2)).\n\
    \   The result of this addition\n       (a1(1)[16](+)t1(2), a2(1)[16](+)t2(2),\
    \ ..., a32(1)[16](+)t32(2),\n       b1(1)[16](+)t33(2), b2(1)[16](+)t34(2), ...,\
    \ b32(1)[16](+)t64(2))\n      =\n       (a1(2)[0], a2(2)[0] ..., a32(2)[0], b1(2)[0],\
    \ b2(2)[0], ...,\n       b32(2)[0])\n   is written into N1 and N2 and is transformed\
    \ in accordance with the\n   first 16 rounds of the encryption algorithm in the\
    \ electronic\n   codebook mode.\n   The resulting filling of N1 and N2 is added\
    \ in the CM5 modulo 2 with\n   the third block Tp(3), etc., the last block Tp(M)\
    \ = (t1(M), t2(M),\n   ..., t64(M)), padded if necessary to a complete 64-bit\
    \ block by\n   zeros, is added in CM5 modulo 2 with the filling N1, N2 (a1(M-1)[16],\n\
    \   a2(M-1)[16], ..., a32(M-1)[16], b1(M-1)[16], b2(M-1)[16], ...,\n   b32(M-1)[16]).\n\
    \   The result of the addition\n        (a1(M-1)[16](+)t1(M), a2(M-1)[16](+)t2(M),\
    \ ..., a32(M-1)[16](+)\n        t32(M), b1(M-1)[16](+)t33(M), b2(M-1)[16](+)t34(M),\
    \ ...,\n        b32(M-1)[16](+)t64(M))\n      =\n        (a1(M)[0], a2(M)[0] ...,\
    \ a32(M)[0], b1(M)[0], b2(M)[0], ...,\n        b32(M)[0])\n   is written into\
    \ N1, N2 and encrypted in the electronic codebook mode\n   after the first 16\
    \ rounds of the algorithm's work.  Out of the\n   resulting filling of the registers\
    \ N1 and N2:\n      (a1(M)[16], a2(M)[16] ..., a32(M)[16], b1(M)[16], b2(M)[16],\
    \ ...,\n      b32(M)[16])\n   an l-bit string I(l) (the MAC) is chosen:\n    \
    \  I(l) = [a(32-l+1)(M)[16], a(32-l+2)(M)[16], ..., a32(M)[16]].\n   The MAC I(l)\
    \ is transmitted through the telecommunication channel or\n   to the computer\
    \ memory attached to the end of the encrypted data,\n   i.e., Tc(1), Tc(2), ...,\
    \ Tc(M), I(l).\n   The encrypted data Tc(1), Tc(2), ..., Tc(M), when arriving,\
    \ are\n   decrypted, out of the resulting plain text blocks Tp(1), Tp(2), ...,\n\
    \   Tp(M).  The MAC I'(l) is generated as described in the subsection 5.3\n  \
    \ and compared with the MAC I(l) received together with the encrypted\n   data\
    \ from the telecommunication channel or from the computer memory.\n   If the MACs\
    \ are not equal, the resulting plain text blocks Tp(1),\n   Tp(2), ..., Tp(M)\
    \ are considered false.\n   The MAC I(l) (I'(l)) can be generated either before\
    \ encryption (after\n   decryption, respectively) of the whole message or simultaneously\
    \ with\n   the encryption (decryption) in blocks.  The first plain text blocks,\n\
    \   used in the MAC generation, can contain service information (the\n   address\
    \ section, a time mark, the initialisation vector, etc.)  and\n   they may be\
    \ unencrypted.\n   The parameter l value (the bit length of the MAC) is defined\
    \ by the\n   actual cryptographic requirements, while considering that the\n \
    \  possibility of imposing false data is 2^-l.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   This entire document is about security considerations.\n"
- title: 10.  Normative References
  contents:
  - "10.  Normative References\n   [GOST28147-89] \"Cryptographic Protection for Data\
    \ Processing System\",\n                  GOST 28147-89, Gosudarstvennyi Standard\
    \ of USSR,\n                  Government Committee of the USSR for Standards,\
    \ 1989.\n                  (In Russian)\n   [RFC4357]      Popov, V., Kurepkin,\
    \ I., and S. Leontiev, \"Additional\n                  Cryptographic Algorithms\
    \ for Use with GOST 28147-89,\n                  GOST R 34.10-94, GOST R 34.10-2001,\
    \ and GOST R\n                  34.11-94 Algorithms\", RFC 4357, January 2006.\n"
- title: Appendix A.  Values of the Constants C1 and C2
  contents:
  - "Appendix A.  Values of the Constants C1 and C2\n   The constant C1 is:\n    \
    \  The bit of N6   32 31 30 29 28 27 26 25 24 23 22 21 20 19 18\n      The bit\
    \ value    0  0  0  0  0  0  0  1  0  0  0  0  0  0  0\n      The bit of N6  \
    \ 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\n      The bit value    1  0 0  0\
    \  0  0  0  0  1 0 0 0 0 0 1 0 0\n   The constant C2 is:\n      The bit of N6\
    \   32 31 30 29 28 27 26 25 24 23 22 21 20 19 18\n      The bit value    0  0\
    \  0  0  0  0  0  1  0  0  0  0  0  0  0\n      The bit of N6   17 16 15 14 13\
    \ 12 11 10 9 8 7 6 5 4 3 2 1\n      The bit value    1  0 0  0  0  0  0  0  1\
    \ 0 0 0 0 0 0 0 1\n"
- title: Appendix B.  Contributors
  contents:
  - "Appendix B.  Contributors\n   Dmitry Kabelev\n   Cryptocom, Ltd.\n   14 Kedrova\
    \ St., Bldg. 2\n   Moscow, 117218\n   Russian Federation\n   EMail: kdb@cryptocom.ru\n\
    \   Igor Ustinov\n   Cryptocom, Ltd.\n   14 Kedrova St., Bldg. 2\n   Moscow, 117218\n\
    \   Russian Federation\n   EMail: igus@cryptocom.ru\n   Irene Emelianova\n   Cryptocom\
    \ Ltd.\n   14 Kedrova St., Bldg. 2\n   Moscow, 117218\n   Russian Federation\n\
    \   EMail: irene@cryptocom.ru\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Vasily Dolmatov, Ed.\n   Cryptocom, Ltd.\n   14 Kedrova\
    \ St., Bldg. 2\n   Moscow, 117218\n   Russian Federation\n   EMail: dol@cryptocom.ru\n"
