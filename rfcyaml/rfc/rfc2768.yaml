- title: __initial_text__
  contents:
  - "                     Network Policy and Services:\n                 A Report\
    \ of a Workshop on Middleware\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   An ad hoc middleware workshop was held at the International Center\n\
    \   for Advanced Internet Research in December 1998.  The Workshop was\n   organized\
    \ and sponsored by Cisco, Northwestern University's\n   International Center for\
    \ Advanced Internet Research (iCAIR), IBM, and\n   the National Science Foundation\
    \ (NSF). The goal of the workshop was\n   to identify existing middleware services\
    \ that could be leveraged for\n   new capabilities as well as identifying additional\
    \ middleware\n   services requiring research and development.  The workshop\n\
    \   participants discussed the definition of middleware in general,\n   examined\
    \ the applications perspective, detailed underlying network\n   transport capabilities\
    \ relevant to middleware services, and then\n   covered various specific examples\
    \ of middleware components. These\n   included APIs, authentication, authorization,\
    \ and accounting (AAA)\n   issues, policy framework, directories, resource management,\
    \ networked\n   information discovery and retrieval services, quality of service,\n\
    \   security, and operational tools.  The need for a more organized\n   framework\
    \ for middleware R&D was recognized, and a list of specific\n   topics needing\
    \ further work was identified.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   Introduction . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   1.0   Contextual Framework . . . . . . . . . . . . . . .\
    \ . . . . .  3\n   2.0   What is Middleware?  . . . . . . . . . . . . . . . .\
    \ . . . .  4\n   3.0   Application Perspective  . . . . . . . . . . . . . . .\
    \ . . .  6\n   4.0   Exemplary Components . . . . . . . . . . . . . . . . . .\
    \ . .  7\n   5.0   Application Programming Interfaces and Signaling . . . . .\
    \ .  8\n   6.0   IETF AAA . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \  9\n   7.0   Policy . . . . . . . . . . . . . . . . . . . . . . . . . . . 10\n\
    \   8.0   Directories  . . . . . . . . . . . . . . . . . . . . . . . . 12\n  \
    \ 9.0   Resource Management  . . . . . . . . . . . . . . . . . . . . 15\n   10.0\
    \  Networked Information Discovery and Retrieval Services . . . 17\n   11.0  Network\
    \ QOS  . . . . . . . . . . . . . . . . . . . . . . . . 18\n   12.0  Authentication,\
    \ authorization, and access management . . . . 21\n   13.0  Network Management,\
    \ Performance, and Operations  . . . . . . 22\n   14.0  Middleware to support\
    \ multicast applications . . . . . . . . 23\n   15.0  Java and Jini TM . . . .\
    \ . . . . . . . . . . . . . . . . . . 24\n   16.0  Security Considerations  .\
    \ . . . . . . . . . . . . . . . . . 24\n   17.0  Summary  . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . 24\n   18.0  Participants . . . . . . . . .\
    \ . . . . . . . . . . . . . . . 26\n   19.0  URLs/references  . . . . . . . .\
    \ . . . . . . . . . . . . . . 27\n   20.0  Authors' Addresses . . . . . . . .\
    \ . . . . . . . . . . . . . 27\n   21.0  Full Copyright Statement . . . . . .\
    \ . . . . . . . . . . . . 29\n"
- title: Introduction
  contents:
  - "Introduction\n   This document describes the term \"middleware\" as well as its\n\
    \   requirements and scope. Its purpose is to facilitate communication\n   between\
    \ developers of both collaboration based and high-performance\n   distributed\
    \ computing applications and developers of the network\n   infrastructure. Generally,\
    \ in advanced networks, middleware consists\n   of services and other resources\
    \ located between both the applications\n   and the underlying packet forwarding\
    \ and routing infrastructure,\n   although no consensus currently exists on the\
    \ precise lines of\n   demarcation that would define those domains. This document\
    \ is being\n   developed within the context of existing standards efforts.\n \
    \  Consequently, this document defines middleware core components within\n   the\
    \ framework of the current status of middleware-related standards\n   activities,\
    \ especially within the IETF and the Desktop Management\n   Task Force (DMTF).\
    \ The envisioned role of the IETF is to lead the\n   work in defining the underlying\
    \ protocols that could be used to\n   support a middleware infrastructure. In\
    \ this context, we will\n   leverage the information modeling work, as well as\
    \ the advanced XML\n   and CIM/DEN-LDAP mapping work, being done in the DMTF.\
    \ (The recently\n   constituted Grid Forum is also pursuing relevant activities.)\n\
    \   This document also addresses the impact of middleware on Internet\n   protocol\
    \ development. As part of its approach to describing\n   middleware, this document\
    \ has initially focused on the intersections\n   among middleware components and\
    \ application areas that already have\n   well defined activities underway.\n\
    \   This document is a product of an ad hoc Middleware Workshop held on\n   December\
    \ 4-5 1998. The Workshop was organized and sponsored by Cisco,\n   Northwestern\
    \ University's International Center for Advanced Internet\n   Research (iCAIR),\
    \ IBM, and the National Science Foundation (NSF).\n   The goal of the workshop\
    \ was to define the term middleware and its\n   requirements on advanced network\
    \ infrastructures as well as on\n   distributed applications. These definitions\
    \ will enable a set of core\n   middleware components to subsequently be specified,\
    \ both for\n   supporting advanced application environments as well as for providing\n\
    \   a basis for other middleware services.\n   Although this document is focused\
    \ on a greater set of issues than\n   just Internet protocols, the concepts and\
    \ issues put forth here are\n   extremely relevant to the way networks and protocols\
    \ need to evolve\n   as we move into the implementation stage of \"the network\
    \ is the\n   computer\". Therefore, this document is offered to the IETF, DMTF,\n\
    \   Internet2, Next Generation Internet (NGI), NSF Partnerships for\n   Advanced\
    \ Computational Infrastructure (PACI), the interagency\n   Information Technology\
    \ for the 21st Century (IT2) program, the Grid\n   Forum, the Worldwide Web Consortium,\
    \ and other communities for their\n   consideration.\n   This document is organized\
    \ as follows: Section 1 provides a\n   contextual framework. Section 2 defines\
    \ middleware. Section 3\n   discusses application requirements. Subsequent sections\
    \ discuss\n   requirements and capabilities for middleware as defined by\n   applications\
    \ and middleware practitioners. These sections will also\n   discuss the required\
    \ underlying transport infrastructure,\n   administrative policy and  management,\
    \ exemplary core middleware\n   components, provisioning issues, network environment\
    \ and\n   implementation issues, and research areas.\n"
- title: 1.0 Contextual Framework
  contents:
  - "1.0 Contextual Framework\n   Middleware can be defined to encompass a large set\
    \ of services. For\n   example, we chose to focus initially on the services needed\
    \ to\n   support a common set of applications based on a distributed network\n\
    \   environment.  A consensus of the Workshop was that there was really\n   no\
    \ core set of middleware services in the sense that all applications\n   required\
    \ them.  This consensus does not diminish the importance of\n   application domain-specific\
    \ middleware, or the flexibility needed in\n   determining customized approaches.\
    \ Many communities  (e.g.,\n   Internet2, NGI, and other advanced Internet constituencies)\
    \ may\n   decide on their own set of common middleware services and tools;\n \
    \  however, they should strive for interoperability whenever possible.\n   The\
    \ topics in this workshop were chosen to encourage discussion about\n   the nature\
    \ and scope of middleware per se as distinct from specific\n   types of applications;\
    \ therefore, many relevant middleware topics\n   were not discussed.\n   Another\
    \ consensus of the Workshop that helped provide focus was that,\n   although middleware\
    \ could be conceptualized as hierarchical, or\n   layered, such an approach was\
    \ not helpful, and indeed had been\n   problematic and unproductive in earlier\
    \ efforts.\n   The better approach would be to consider middleware as an\n   unstructured,\
    \ often orthogonal, collection of components (such as\n   resources and services)\
    \ that could be utilized either individually or\n   in various subsets.  This\
    \ working assumption avoided extensive\n   theological modeling discussions, and\
    \ enables work to proceed on\n   various middleware issues independently.\n  \
    \ An important goal of the Workshop was to identify any middleware or\n   network-related\
    \ research or development that would be required to\n   advance the state of the\
    \ art to support advanced application\n   environments, such as those being developed\
    \ and pursued by NGI and\n   Internet2.  Consequently, discussion focused on those\
    \ areas that had\n   the maximum opportunity for such advances.\n"
- title: 2.0  What is Middleware?
  contents:
  - "2.0  What is Middleware?\n   The Workshop participants agreed on the existence\
    \ of middleware, but\n   quickly made it clear that the definition of middleware\
    \ was dependent\n   on the subjective perspective of those trying to define it.\
    \ Perhaps\n   it was even dependent on when the question was asked, since the\n\
    \   middleware of yesterday (e.g., Domain Name Service, Public Key\n   Infrastructure,\
    \ and Event Services) may become the fundamental\n   network infrastructure of\
    \ tomorrow.  Application environment users\n   and programmers see everything\
    \ below the API as middleware.\n   Networking gurus see anything above IP as middleware.\
    \ Those working\n   on applications, tools, and mechanisms between these two extremes\
    \ see\n   it as somewhere between TCP and the API, with some even further\n  \
    \ classifying middleware into application-specific upper middleware,\n   generic\
    \ middle middleware, and resource-specific lower middleware.\n   The point was\
    \ made repeatedly that middleware often extends beyond\n   the \"network\" into\
    \ the compute, storage, and other resources that the\n   network connects.  For\
    \ example, a video serving application will want\n   to access resource discovery\
    \ and allocation services not just for\n   networks but also for the archives\
    \ and computers required to serve\n   and process the video stream.  Through the\
    \ application of general set\n   theory and rough consensus, we roughly characterize\
    \ middleware as\n   those services found above the transport (i.e., over TCP/IP)\
    \ layer\n   set of services but below the application environment (i.e., below\n\
    \   application-level APIs).\n   Some of the earliest conceptualizations of middleware\
    \ originated with\n   the distributed operating research of the late 1970s and\
    \ early 1980s,\n   and was further advanced by the I-WAY project at SC'95.  The\
    \ I-WAY\n   linked high performance computers nation-wide over high performance\n\
    \   networks such that the resulting environment functioned as a single\n   high\
    \ performance environment. As a consequence of that experiment,\n   the researchers\
    \ involved re-emphasized the fact that effective high\n   performance distributed\
    \ computing required distributed common\n   computing and networking resources,\
    \ including libraries and utilities\n   for resource discovery, scheduling and\
    \ monitoring, process creation,\n   communication and data transport.\n   Subsequent\
    \ research and development through the Globus project of\n   such middleware resources\
    \ demonstrated that their capabilities for\n   optimizing advanced application\
    \ performance in distributed domains.\n   In May 1997, a Next Generation Internet\
    \ (NGI) workshop on NGI\n   research areas resulted in a publication, \"Research\
    \ Challenges for\n   the Next Generation Internet\", which yields the following\
    \ description\n   of middleware. \"Middleware can be viewed as a reusable, expandable\n\
    \   set of services and functions that are commonly needed by many\n   applications\
    \ to function well in a networked environment\". This\n   definition could further\
    \ be refined to include persistent services,\n   such as those found within an\
    \ operating system, distributed operating\n   environments (e.g., JAVA/JINI),\
    \ the network infrastructure (e.g.,\n   DNS), and transient capabilities (e.g.,\
    \ run time support and\n   libraries) required to support client software on systems\
    \ and hosts.\n   In summary, there are many views of what is middleware. The consensus\n\
    \   of many at the workshop was that given the dynamic morphing nature of\n  \
    \ middleware, it was more important to identify some core middleware\n   services\
    \ and start working on them than it was to come to a consensus\n   on a dictionary-like\
    \ definition of the term.\n   Systems involving strong middleware components to\
    \ support networked\n   information discovery have also been active research areas\
    \ since at\n   least the late 1980s. For example, consider Archie or the Harvest\n\
    \   project, to cite two examples. One could easily argue that the site\n   logs\
    \ used by Archie or the broker system and harvest agents were an\n   important\
    \ middleware tool, and additional work in this area is\n   urgently needed in\
    \ order to improve the efficiency and scope of web-\n   based indexing services.\n\
    \   \"As long ago\" as 1994, the Internet Architecture Board held a\n   workshop\
    \ on \"Information Infrastructure for the Internet\" reported in\n   RFC 1862,\
    \ which in many ways covered similar issues. Although its\n   recommendations\
    \ were summarized as follows:\n   -  increased focus on a general caching and\
    \ replication architecture\n   -  a rapid deployment of name resolution services,\
    \ and\n   -  the articulation of a common security architecture for information\n\
    \      applications.\"\n   it is clear that this work is far from done.\n   Finally,\
    \ this workshop noted that there is a close linkage between\n   middleware as\
    \ a set of standards and protocols and the infrastructure\n   needed to make the\
    \ middleware meaningful. For example, the DNS\n   protocol would be of limited\
    \ significance without the system of DNS\n   servers, and indeed the administrative\
    \ infrastructure of name\n   registry; NTP, in order to be useful, requires the\
    \ existence of time\n   servers; newer middleware services such as naming, public\
    \ key\n   registries and certificate authorities, will require even more\n   extensive\
    \ server and administrative infrastructure in order to become\n   both useful\
    \ and usable services.\n"
- title: 3.0 Application Perspective
  contents:
  - "3.0 Application Perspective\n   From an applications perspective, the network\
    \ is just another type of\n   resource that it needs to use and manage.  The set\
    \ of middleware\n   services and requirements necessary to support advanced applications\n\
    \   are defined by a vision that includes and combines applications in\n   areas\
    \ such as: distributed computing, distributed data bases,\n   advanced video services,\
    \ teleimmersion (i.e., a capability for\n   providing a compelling real-life experience\
    \ in a virtual environment\n   based for example on CAVE technologies), extensions\
    \ with haptics,\n   electronic commerce, distance education, interactive collaborative\n\
    \   research, high-rate instrumentation (60 MByte/s and above sustained),\n  \
    \ including use of online scientific facilities (e.g. microscopes,\n   telescopes,\
    \ etc.), effectively managing large amounts of data,\n   computation and information\
    \ Grids, adaptable and morphing network\n   infrastructure, proxies and agents,\
    \ and electronic persistent\n   presence (EPP). Many of these applications are\
    \ \"bleeding edge\" with\n   respect to currently deployed applications on the\
    \ commodity Internet\n   and hence have unique requirements. Just as the Web was\
    \ an advanced\n   application in the early 1990s, many of the application areas\
    \ defined\n   above will not become commonplace in the immediate future.  However,\n\
    \   they all possess the capability to change the way the network is used\n  \
    \ as well as our definition of infrastructure, much as the Web and\n   Mosaic\
    \ changed it in the early 90s. A notable recent trend in\n   networks is the increasing\
    \ amount of HTTP, voice, and video traffic,\n   and it was noted that voice and\
    \ video particularly need some form of\n   QoS and associated middleware to manage\
    \ it.\n   A quick review of the requirements for teleimmersion highlight the\n\
    \   requirement for multiple concurrent logical network channels, each\n   with\
    \ its own latency, jitter, burst, and bandwidth QoS; yet all being\n   coordinated\
    \ through a single middleware interface to the application.\n   For security and\
    \ efficiency those using online instruments require\n   the ability to steer the\
    \ devices and change parameters as a direct\n   result of real-time analysis performed\
    \ on the data as it is received\n   from the instruments. Therefore, network requirements\
    \ encompass high\n   bandwidth, low latency, and security, which must all be coordinated\n\
    \   through middleware.  Large databases, archives, and digital libraries\n  \
    \ are becoming a mainstay for researchers and industry. The\n   requirements they\
    \ will place on the network and on middleware will be\n   extensive, including\
    \ support of authentication, authorization, access\n   management, quality of\
    \ service, networked information discovery and\n   retrieval tools, naming and\
    \ service location, to name only a few.\n   They also require middleware to support\
    \ collection building and\n   self-describing data.  Distributed computing environments\
    \ (e.g.,\n   Globus, Condor, Legion, etc.) are quickly evolving into the computing\n\
    \   and information Grids of the future. These Grids not only require\n   adaptive\
    \ and manageable network services but also require a\n   sophisticated set of\
    \ secure middleware capabilities to provide easy-\n   to-use APIs to the application.\n\
    \   Many application practitioners were adamant that they also required\n   the\
    \ capability for \"pass through\" services.  This refers to the\n   ability to\
    \ bypass the middleware and directly access the underlying\n   infrastructure\
    \ such as the operating system or network), even though\n   they were eager to\
    \ make use of middleware services and see more of it\n   developed to support\
    \ their own applications.  In addition,\n   authentication and access control,\
    \ as well as security, are required\n   for all of the applications mentioned\
    \ above, albeit at different\n   levels.\n"
- title: 4.0 Exemplary Components
  contents:
  - "4.0 Exemplary Components\n   In an attempt to describe middleware and discuss\
    \ pertinent issues\n   relating to its development and deployment, an exemplary\
    \ set of\n   services were selected for discussion. These services were chosen\
    \ to\n   stimulate discussion and not as an attempt to define an exclusive set\n\
    \   of middleware services. Also, it is the intent of this effort not to\n   duplicate\
    \ existing IETF efforts or those of other standards bodies\n   (e.g., the DMTF),\
    \ but rather to leverage those efforts, and indeed to\n   highlight areas where\
    \ work was already advanced to a stage that might\n   be approaching deployment.\n"
- title: 5.0  Application Programming Interfaces and Signaling
  contents:
  - "5.0  Application Programming Interfaces and Signaling\n   Applications require\
    \ the ability to explicitly request resources\n   based on their immediate usage\
    \ needs. These requests have associated\n   network management controls and network\
    \ resource implications;\n   however, fulfillment of these requests may require\
    \ multiple\n   intermediate steps. Given the preliminary state of middleware\n\
    \   definition, there currently is no common framework, much less a\n   method,\
    \ for an application to signal its need for a set of desired\n   network services,\
    \ including quality and priority of service as well\n   as attendant resource\
    \ requirements. However, given the utility of\n   middleware, especially with\
    \ regard to optimization for advanced\n   applications, preliminary models for\
    \ both quality and priority of\n   service and resource management exist and continue\
    \ to evolve.\n   however, without an agreed-to framework for standards in this\
    \ area,\n   there is the risk of multiple competing standards that may further\n\
    \   delay the deployment of a middleware-rich infrastructure. This\n   framework\
    \ should probably include signaling methods, access/admission\n   controls, and\
    \ a series of defined services and resources. In\n   addition, it should include\
    \ service levels, priority considerations,\n   scheduling, a Service-Level-Agreement\
    \ (SLA) function, and a feedback\n   mechanism for notifying applications or systems\
    \ when performance is\n   below the SLA specification or when an application violates\
    \ the SLA.\n   Any such mechanism implies capabilities for: 1) an interaction\
    \ with\n   some type of policy implementation and enforcement, 2) dynamic\n  \
    \ assessment of available network resources, 3) policy monitoring, 4)\n   service\
    \ guarantees, 5) conflict resolution, and 6) restitution for\n   lack of performance.\n\
    \   Application programmers are concerned with minimizing the interfaces\n   that\
    \ they must learn to access middleware services.  Thus the\n   unification of\
    \ common services behind a single API is of great\n   interest to middleware users.\
    \  Examples of common APIs that may be\n   achievable are:\n   * Environmental\
    \ discovery interface, whether for discovering hardware\n     resources, network\
    \ status and capabilities, data sets,\n     applications, remote services, or\
    \ user information.\n   * Remote execution interface, whether for distributed\
    \ metacomputing\n     applications, or for access to a digital library presentation\n\
    \     service, or a Java analysis service.\n   * Data management interface, whether\
    \ for manipulating data within\n     distributed caches, or replication of data\
    \ between file systems, or\n     archival storage of data.\n   * Process management\
    \ interface, whether for composing data movement\n     with remote execution,\
    \ or for linking together multiple processing\n     steps.\n"
- title: 6.0  IETF AAA
  contents:
  - "6.0  IETF AAA\n   The IETF AAA (authentication, authorization, and accounting)\
    \ effort\n   is but one of many IETF security initiatives. It depends heavily\
    \ on a\n   Public key infrastructure, which is intended to provide a framework\n\
    \   which will support a range of trust/hierarchy environments and a\n   range\
    \ of usage environments (RFC1422 is an example of one such\n   model).\n   The\
    \ IETF AAA working group has recently been formed. IETF AAA working\n   group\
    \ efforts are focused on many issues pertaining to middleware,\n   including defining\
    \ processes for access/admission control and\n   identification (process for determining\
    \ a unique entity),\n   authentication (process for validating that identity),\
    \ authorization\n   (process for determining an eligibility for resource\n   requests/utilization)\
    \ and accounting (at least to the degree that\n   resource utilization is recorded).\
    \ To some degree, AAA provides for\n   addressing certain levels of security,\
    \ but only at a preliminary\n   level. Currently, AAA protocols exist, although\
    \ not as an integrated\n   model or standard. One consideration for AAA is to\
    \ provide for\n   various levels of granularity. Even if we don't yet have an\n\
    \   integrated model, it is currently possible to provide for basic AAA\n   mechanisms\
    \ that can be used as a basis to support SLAs.  Any type of\n   AAA implementation\
    \ requires a policy management framework, to which\n   it must be linked. Currently,\
    \ a well-formulated linking mechanism has\n   not been defined.\n   Middleware\
    \ AAA requirements are also driven by the distributed\n   interoperation that\
    \ can occur between middleware services.  The\n   distribution of application\
    \ support across multiple autonomous\n   systems will require self-consistent\
    \ third-party mechanisms for\n   authentication as well as data movement.  Conceptually,\
    \ an\n   application may need access to data that is under control of a remote\n\
    \   collection, to support the execution of a procedure at a third site.\n   The\
    \ data flow needs to be directly from the collection to the\n   execution platform\
    \ for efficiency.  At the same time, the procedure\n   will need access permission\
    \ to the data set while it is acting on\n   behalf of the requestor.  How the\
    \ authentication is done between the\n   remote procedure and the remote data\
    \ collection entities raises\n   significant issues related to transitivity of\
    \ trust, and will require\n   establishment of a trust policy for third-party\
    \ mechanisms. This is\n   exacerbated when a collection of entities, such as is\
    \ required for\n   visualization applications, is involved.\n"
- title: 7.0 Policy
  contents:
  - "7.0 Policy\n   The IETF Policy Framework working group is addressing a policy\n\
    \   framework definition language, a policy architecture model, policy\n   terminology\
    \ and, specifically, a policy model that can be used for\n   signaled as well\
    \ as provisioned QoS. The policy meta-model links\n   high-level business requirements,\
    \ such as those that can be specified\n   in an SLA, to low-level device implementation\
    \ mechanisms, ranging\n   from specific access control and management of services,\
    \ objects and\n   other resources to configuration of mechanisms necessary to\
    \ provide a\n   given service.\n   Polices are an integral component of all middleware\
    \ services, and\n   will be found within most middleware services in one form\
    \ or another.\n   Policies are often represented as an \"if condition then action\"\
    \n   tuple. Policies can be both complex and numerous; therefore, policy\n   management\
    \ services must be able to identify and resolve policy\n   conflicts.  They also\
    \ need to support both static (i.e. loaded at\n   boot time via a configuration\
    \ file) and dynamic (i.e. the\n   configuration of a policy enforcing device may\
    \ change based on an\n   event) modes.\n   A generalized policy management architecture\
    \ (as suggested by the\n   IETF policy architecture draft) includes a policy management\
    \ service,\n   a dedicated policy repository, at least one policy decision point\n\
    \   (PDP), and at least one policy enforcement point (PEP). The policy\n   management\
    \ service supports the specification, editing, and\n   administration of policy,\
    \ through a graphical user interface as well\n   as programmatically. The policy\
    \ repository provides storage and\n   retrieval of policies as well as policy\
    \ components. These policy\n   components contain definitional information, and\
    \ may be used to build\n   more complex policies, or may be used as part of the\
    \ policy decision\n   and/or enforcement process. The PDP (e.g. resource manager,\
    \ such as a\n   bandwidth broker or an intra-domain policy server) is responsible\
    \ for\n   handling events and making decisions based on those events (e.g., at\n\
    \   time x do y) and updating the PEP configuration appropriately. In\n   addition,\
    \ it may be responsible for providing the initial\n   configuration of the PEP.\
    \ The PEP (e.g., router, firewall or host)\n   enforces policy based on the \"\
    if condition then action\" rule sets it\n   has received from the PDP.\n   Policy\
    \ information may be communicated from the PDP to the PEP\n   through a variety\
    \ of protocols, such as COPS or DIAMETER. A proxy may\n   be used to translate\
    \ information contained in these protocols to\n   forms that devices can consume\
    \ (e.g., command line interface commands\n   or SNMP sets). Additional information,\
    \ contained in Policy\n   Information Bases (PIBs), may also be used to translate\
    \ from an\n   intermediate specification to specific functions and capabilities\
    \ of\n   a device. For example, a policy may specify \"if source IP address is\n\
    \   198.10.20.132, then remark traffic with a DSCP of 5\". The PIB would\n   be\
    \ used to translate the device-specific meaning of the conditioning\n   specified\
    \ by the DiffServ code point of 5 (e.g., a specific set of\n   queue and threshold\
    \ settings).\n   Policy requires AAA functions, not only for access control, but\
    \ also\n   to establish the trust relationships that will enable distributed\n\
    \   policy interactions.  PDPs may require the requesting end systems and\n  \
    \ applications to be authenticated before the PDP will honor any\n   requests.\
    \ The PDP and PEP must be authenticated to each other to\n   reduce the probability\
    \ of spoofing. This will be true whichever\n   protocol is utilized for supporting\
    \ communications between these\n   entities. Audit trails are essential for all\
    \ of these transactions.\n   In addition, trust management policies will need\
    \ to be developed as\n   well as the supporting middleware mechanisms to enable\
    \ inter-domain\n   policy negotiation.\n   Ultimately, many policy processes link\
    \ entities to resources, And\n   therefore require interactions with entity identification\
    \ mechanisms,\n   resource identification mechanisms, and allocation mechanisms.\
    \ The\n   distributed computing community has already started efforts\n   developing\
    \ policy definition languages and systems.  Globus uses its\n   Resource Services\
    \ Language (RSL) to define the resources and policies\n   associated with them.\
    \ Condor uses a matchmaking bidding technique to\n   match those providing and\
    \ those acquiring services. Similarly, the\n   IETF has several policy definition\
    \ languages in varying stages of\n   development, including RPSL, RPCL, SPSL,\
    \ PFDL, PAX, and Keynote.\n   Ultimately, these efforts should be merged into\
    \ a single\n   specification (or at least a smaller group of specifications) to\n\
    \   enable distributed computing applications to be able to effectively\n   communicate\
    \ and utilize network resources and services.\n   Directories play a crucial role\
    \ in policy systems. Directories are\n   ideally suited for storing and retrieving\
    \ policy information, due to\n   their exceptionally high read rates, ability\
    \ to intelligently\n   replicate all or part of their information, per-attribute\
    \ access\n   control, and use of containment.  To this end, the IETF Policy\n\
    \   Framework working group (in conjunction with the DMTF) is developing\n   a\
    \ core information model and LDAP schema that can be used to\n   represent policy\
    \ information that applications can use. This core\n   model is used to provide\
    \ common representation and structure of\n   policy information. Applications\
    \ can then subclass all or part of the\n   classes in this core schema to meet\
    \ their own specific needs, while\n   retaining the ability to communicate and\
    \ interoperate with each\n   other.\n"
- title: 8.0 Directories
  contents:
  - "8.0 Directories\n   Directories are critical resource components that provide\
    \ support to\n   many other elements in the middleware environment, especially\
    \ policy.\n   As network-based environment evolves, it will no longer be viable\
    \ to\n   encode policy information directly into each individual application.\n\
    \   The prevailing model in use today is for each application to store\n   its\
    \ view of a device's data (e.g., configuration) in its own private\n   data store.These\
    \ data include relevant information concerning network\n   resources and services\
    \ as well as clients wanting to use those\n   resources (e.g., people, processes,\
    \ and applications). The same\n   resource (or aspects of that resource, such\
    \ as its physical vs.\n   logical characteristics) may be represented in several\
    \ data stores.\n   Even if the device is modeled the same way in each data store,\
    \ each\n   application only has access to its own data. This leads to\n   duplication\
    \ of data and data synchronization problems.\n   The promise of technologies like\
    \ CIM and DEN is to enable each\n   application to store data describing the resources\
    \ that they manage\n   in a single directory using a common format and access\
    \ protocol. This\n   results in the data describing the resource being represented\
    \ only\n   once. Defining a logically centralized common repository, where\n \
    \  resources and services are represented in a common way, enables\n   applications\
    \ of different types to utilize and share information\n   about resources and\
    \ services that they use.\n   Not only does this solve the data duplication and\
    \ synchronization\n   problems, it also provides inherent extensibility in describing\
    \ the\n   characteristics of an object - a single entity can be represented by\n\
    \   multiple directory objects, each representing a different aspect of\n   the\
    \ entity. Different applications can be responsible for managing\n   the different\
    \ objects that together make up a higher-level object,\n   even if the applications\
    \ themselves can not communicate with each\n   other. This enables these applications\
    \ to effectively share and reuse\n   data.  This provides significant benefits\
    \ for users and applications.\n   In the short term, users and applications will\
    \ benefit from having\n   all of the data in one place. In the long term, users\
    \ and\n   applications will be able to take advantage of data managed by other\n\
    \   applications.\n   Directories are key to supporting advanced network-based\
    \ application\n   environments. Directory purists say that the directory is not\n\
    \   middleware; rather, it is a dumb storage device that is made into an\n   intelligent\
    \ repository by encapsulating it within middleware.\n   Although a directory associates\
    \ attributes with objects, what makes\n   it different from a database are four\
    \ key things:\n   -  directory objects are essentially independent of each other,\n\
    \      whereas database objects are related to each other (sometimes in\n    \
    \  very complex ways)\n   -  directories organize their information using the\
    \ notion of\n      containment, which is not naturally implemented in databases\n\
    \   -  directory objects can have specific access controls assigned to an\n  \
    \    object and even attributes of an object\n   -  directories, unlike databases,\
    \ are optimized to perform a high\n      number of reads vs. writes.\n   Directories\
    \ use a common core schema, supporting a common set of\n   syntaxes and matching\
    \ rules, that defines the characteristics of\n   their data. This enables a common\
    \ access protocol to be used to store\n   and retrieve data.\n   Containment can\
    \ be used for many purposes, including associating\n   roles with objects. This\
    \ is critical in order to support a real world\n   environment, where people and\
    \ elements may assume different roles\n   based on time or other context.Containment\
    \ may also be used to\n   provide different naming scopes for a given set of data.\n\
    \   Directories use attribute inheritance - subclasses inherit the\n   attributes\
    \ of their superclasses. This enables one to define\n   generalized access control\
    \ at a container (e.g., a group) and then\n   refine the access control on an\
    \ individual basis for objects that are\n   inside that container (e.g., different\
    \ objects have different access\n   privileges).\n   Currently, directories are\
    \ used mostly to represent people, servers,\n   printers, and other similar objects.\
    \ CIM, DEN, and other similar\n   efforts have encouraged directories to be used\
    \ to contain common\n   objects in a managed environment. For networked applications,\
    \ this\n   enables clients of the network (e.g., users and applications) to be\n\
    \   bound to services available in the network in a transparent manner.\n   The\
    \ \"Grid\" community is making extensive use of directory services\n   for this\
    \ purpose, using them to maintain information about the\n   structure and state\
    \ of not only networks but also computers, storage\n   systems, software, and\
    \ people. The DMTF is using directories to\n   contain CIM and DEN information,\
    \ which enables a common information\n   model to be applied to objects in a managed\
    \ environment. The IETF is\n   using directories for many different purposes,\
    \ not the least of which\n   is to contain common policy information for users\
    \ and applications of\n   an environment, as well as services and configuration\
    \ information of\n   network devices.\n   CIM and DEN are conceptual information\
    \ models for describing the\n   management of entities ranging from network elements\
    \ to protocols to\n   hosts and services. CIM and DEN are platform- and technology-\n\
    \   independent. DEN is an extension of CIM that, among other things,\n   describes\
    \ how to map CIM data into a form usable by LDAP.\n   The CIM Specification describes\
    \ the meta schema, information model,\n   language, naming, and mapping techniques\
    \ to other management models,\n   such as SNMP MIBs and DMTF MIFs.  DEN provides\
    \ a good start on a\n   model that addresses the management of the network and\
    \ its elements;\n   DEN is an extension of CIM to include the management of networks\
    \ as a\n   whole and not just the individual elements. DEN addresses the\n   requirements\
    \ for abstracting a complex entity, such as a router, into\n   multiple components\
    \ that can be used to manage individual aspects of\n   that complex entity. The\
    \ DEN information model, like CIM,\n   incorporates both static and dynamic information.\
    \ DEN provides a\n   mapping to directories for the storage and retrieval of data.\
    \ DEN\n   will also rely heavily on the use of AAA services in order to\n   maintain\
    \ the integrity of the directory and its policies as well as\n   to manage the\
    \ distribution of policies among the policy repositories,\n   PDPs and PEPs. \
    \ Resource managers and applications will also rely\n   heavily on directories\
    \ for the storage of policy and security\n   information necessary for the management\
    \ and allocation of resources.\n   Since much of the information associated with\
    \ a person, agent or\n   element is stored in a directory, and access to that\
    \ information will\n   be controlled with appropriate security mechanisms, many\
    \ voiced the\n   need for a single user/process sign on.\n   Future advanced applications\
    \ (e.g., NGI, Internet2, PACI, Grids) may\n   require a variety of PDPs to manage\
    \ a variety of resource types\n   (i.e., QOS, security, etc.).  In this case,\
    \ a general model would\n   have to be developed that defines the protocols and\
    \ mechanisms used\n   by cooperating resource managers (i.e., PDPs) of different\
    \ domains\n   and different genres of resource (i.e., network, security, storage,\n\
    \   proxy agents, online facility, etc.). For policies to be implemented\n   in\
    \ a coherent fashion, it is necessary to have a mechanism that\n   discovers and\
    \ tracks resources and utilization.\n   There is an architectural issue of central\
    \ importance, which has most\n   recently surfaced in the directory area. Many\
    \ applications, and many\n   middleware components, need what is essentially a\
    \ highly scalable,\n   distributed database service. In other words, people want\
    \ to take the\n   best of what directories and databases have to offer. This would\n\
    \   result in a distributed, replicated database that can use containment\n  \
    \ to effectively organize and scope its information. It would be able\n   to have\
    \ exceptional read response time, and also offer transactional\n   and relational\
    \ integrity. It would support simple and complex\n   queries. Such a service has\
    \ never been defined as a middleware\n   component; the complexities involved\
    \ in specifying and implementing\n   such a service are certainly formidable.\
    \ However, in the absence of\n   such a general service, many middleware components\
    \ have attempted to\n   use the closest service available, which is deployed -\
    \ historically\n   first using DNS, and more recently, directory services.\n \
    \  It will be important to clarify the limitations of the appropriate\n   use\
    \ of directory services, and to consider whether a more general\n   data storage\
    \ and retrieval service may be required, or whether\n   directory services can\
    \ be seamlessly integrated (from the point-of-\n   view of the applications using\
    \ them) with other forms of storage and\n   retrieval (such as relational databases)\
    \ in order to provide an\n   integrated directory service with these capabilities.\n"
- title: 9.0 Resource Management
  contents:
  - "9.0 Resource Management\n   Policy implementation processes need to be linked\
    \ to Resource\n   Managers in a more sophisticated way than those that currently\
    \ exist.\n   Such processes must be dynamic, and able to reflect changes in their\n\
    \   environment (e.g., adjust the quality of service provided to an\n   application\
    \ based on environmental changes, such as congestion or new\n   users with higher\
    \ priorities logging onto the system). We need to\n   determine how different\
    \ types of resource managers learn about one\n   another and locate each other\
    \ - as well as deal with associated\n   cross-domain security issues.  Another\
    \ aspect of this problem is\n   developing a resource definition language that\
    \ can describe the\n   individual elements of the resource being utilized, whether\
    \ that is a\n   network, processor, agent, memory or storage. This will require\n\
    \   developing an appropriate metadata representation and underlying meta\n  \
    \ schema that can be applied to multiple resource types.\n   Some models of resource\
    \ managers are currently being used to provide\n   for the management of distributed\
    \ computing and Grid environments\n   (e.g., Condor, Globus, and Legion).  These\
    \ resource managers provide\n   languages, clients, and servers to support accessing\
    \ various types of\n   distributed computing resources (e.g. processors, memory,\
    \ storage and\n   network access).  There is a broad interest in the distributed\
    \ and\n   parallel computing communities in developing an automated access\n \
    \  control architecture, using policies, to support the evolving IETF\n   differentiated\
    \ services architecture. However, this work has not yet\n   been incorporated\
    \ into any IETF working group charter. The term\n   \"bandwidth broker\" has been\
    \ used to refer to the agents that will\n   implement this functionality through\
    \ network resource management,\n   policy control, and automated edge device configuration.\
    \  The IETF\n   Policy Framework working group is currently working on a policy\n\
    \   architecture framework, information model, and policy definition\n   language\
    \ that is targeted initially at policy management within a\n   single domain.\
    \ However, this work is fundamental in defining inter-\n   domain policy management\
    \ issues, such as those that are required in\n   implementing a network resource\
    \ manager / bandwidth broker.  Many\n   resource managers being deployed today\
    \ rely on directory services for\n   storing policy information as well as X.509\
    \ for certificate-based\n   authentication and authorization to these resources.\
    \ Middleware will\n   be required to translate the needs of distributed and parallel\n\
    \   computing applications within and across different policy domains. It\n  \
    \ is crucial that a standard means for representing and using resource\n   management\
    \ be developed.\n   Advance reservation of resources, as well as dynamic requests\
    \ for\n   resources, is a crucial aspect of any resource management system.\n\
    \   Advance reservations are more of a policy issue than a provisioning\n   issue;\
    \ however, the mechanisms for exchanging and propagating such\n   requests between\
    \ resource managers located within different\n   administrative domains is a currently\
    \ unsolved problem that needs to\n   be addressed. In addition, it is important\
    \ to address the issue of\n   possible deadlock and/or the inefficient use of\
    \ resources (i.e., the\n   time period between a request, or set of requests,\
    \ being initiated\n   and honored and resources being allocated). There is also\
    \ a need for\n   rendezvous management in resource allocation services, where\
    \ an\n   application must gather resource reservations involving multiple\n  \
    \ sites and services.\n   A mesh of cooperating resource managers, which interact\
    \ with each\n   other using standards based protocols (e.g. COPS), could be the\
    \ model\n   for a resource management infrastructure. Each of these may manage\n\
    \   different sets of resources. For example, one may be a bandwidth\n   broker\
    \ that only manages network bandwidth, while another may be a\n   general-purpose\
    \ resource manager that manages security, IP address\n   allocation, storage,\
    \ processors, agents, and other network resources.\n   There are already plans\
    \ for middleware resource managers that not\n   only allocate the resources but\
    \ also manage the composition of a\n   group of services that may include security\
    \ services, billing\n   services, shaping of multimedia composite images, etc.).\
    \ Another form\n   of resource manager may provide mapping between a set of related\n\
    \   services (i.e., mapping an IP based RSVP request to an ATM SVC, as\n   was\
    \ demonstrated in a pilot project on the vBNS).\n   Resource managers depend on\
    \ the use of locator services to find other\n   resource managers as well as to\
    \ locate the AAA server(s) for the\n   requestor and the associated directories\
    \ containing applicable policy\n   information. They may also need to query the\
    \ network to determine if\n   a policy request for bandwidth can be satisfied.\
    \ It is essential that\n   these (and other) different uses of resource management\
    \ be integrated\n   to provide an end-to-end service for applications and users\
    \ alike.\n"
- title: 10.0 Networked Information Discovery and Retrieval Services
  contents:
  - "10.0 Networked Information Discovery and Retrieval Services\n   There are a wide\
    \ range of middleware services broadly related to the\n   discovery and retrieval\
    \ of networked information. Because such a\n   broad range of applications (and\
    \ not just high-performance,\n   distributed, or parallel applications) requires\
    \ these services, this\n   area is under very active development and new requirements\
    \ are\n   constantly emerging.\n   Perhaps the most basic service in this area\
    \ is persistent naming and\n   location services (and infrastructure) that can\
    \ resolve names to\n   locations (i.e., URLs). The IETF has done considerable\
    \ work in\n   defining a syntax for Uniform Resource Identifiers (URIs), which\
    \ are\n   intended to be persistent name spaces administered by a wide range of\n\
    \   agencies. URIs are resolved to URLs using resolver services; there\n   are\
    \ a number of different proposals for such resolver services, and\n   some implementations\
    \ exist such as the CNRI Handler Service.  Many\n   organizations are beginning\
    \ to establish and manage URI namespaces,\n   notably the publishing community\
    \ with their Digital Object Identifier\n   (DOI). however, there are many unresolved\
    \ questions, such as how to\n   most effectively deal with the situation where\
    \ the resource named by\n   a URI exists in multiple places on the network (e.g.,\
    \ find the\n   \"closest\" mirror in terms of network connectivity and resource\n\
    \   availability). There is a need for an extensive set of infrastructure\n  \
    \ around resolvers, including how resources are registered and\n   identifiers\
    \ are assigned, the ongoing management of data about the\n   current location\
    \ of resources that are identified by a specific URI,\n   and the operation of\
    \ sets of resolvers for various name spaces.\n   Finally, given a URI, one needs\
    \ to locate the resolver services that\n   are connected with that namespace;\
    \ the IETF has done initial work on\n   resolution service location for URI namespaces.\n\
    \   URIs are intended to be processed primarily by machines; they are not\n  \
    \ intended to necessarily be easy to remember, though they are intended\n   to\
    \ be robust under transcription (not sensitive to whitespace, for\n   example).\
    \ More recently, the IETF has begun work on defining\n   requirements for human\
    \ friendly identifier systems that might be used\n   to register and resolve mnemonic\
    \ names.\n   Another set of issues revolves around various types of metadata -\n\
    \   descriptive, ratings, provenance, rights management, and the like,\n   that\
    \ may be associated with objects on the network. The Resource\n   Description\
    \ Framework (RDF) from the Worldwide Web Consortium (W3C)\n   provides a syntax\
    \ for attaching such descriptions to network objects\n   and for encoding  the\
    \ descriptions; additional middleware work is\n   needed to locate metadata associated\
    \ with objects that may be stored\n   in repositories, and to retrieve such  metadata.\
    \ Validation of\n   metadata is a key issue, and both IETF and W3C are working\
    \ on XML\n   canonicalization algorithms that can be used in conjunction with\n\
    \   public key infrastructure to sign metadata assertions. However, such\n   an\
    \ approach implies a complex set of trust relationships and\n   hierarchies that\
    \ will need to be managed, and policies that will need\n   to be specified for\
    \ the use of these trust relationships in\n   retrieval.\n   There is specific\
    \ work going on in defining various types of metadata\n   for applications such\
    \ as rights management; ultimately this will\n   imply the development of middleware\
    \ services. It will also impact the\n   use of directory, database, and similar\
    \ services in the storage,\n   access, and retrieval of this information. Similarly,\
    \ there will be a\n   need for services to connect descriptive metadata and identifiers\n\
    \   (URNs).\n   (See also the NSF/ERCIM report on metadata research issues at\n\
    \   http://www.ercim.org/publication/ws-proceedings/EU-NSF/metadata.html\n   http://www.ercim.org/publication/ws-proceedings/EU-NSF/metadata.ps\n\
    \   http://www.ercim.org/publication/ws-proceedings/EU-NSF/metadata.pdf\n   Finally,\
    \ there is a need for a set of middleware services which build\n   upon the research\
    \ work already integrated into services such as\n   Archie and Harvest. These\
    \ services permit the efficient extraction of\n   metadata about the contents\
    \ of network information objects and\n   services without necessarily retrieving\
    \ and inspecting those\n   services.  This includes the ability to dispatch \"\
    indexing agents\" or\n   \"knowbots\" that can run at a site to compute such indexing,\
    \ under\n   appropriate security and authentication constraints.  In addition,\
    \ a\n   set of \"push-based\" broker services which aggregate, filter and\n  \
    \ collect metadata from multiple sites and provide them to interested\n   applications\
    \ are also required.  Such services can provide a massive\n   performance, quality,\
    \ comprehensiveness and timeliness improvement\n   for today's webcrawler-based\
    \ indexing services.\n"
- title: 11.0  Network QoS
  contents:
  - "11.0  Network QoS\n   As noted earlier, applications may need to explicitly request\n\
    \   resources available in the network to meet their requirements for\n   certain\
    \ types of communication, or in order to provide service with\n   an appropriate\
    \ guarantee of one or metrics, such as bandwidth,\n   jitter, latency, and loss.\
    \ One type of request that has been the\n   focus of much effort recently is for\
    \ services beyond best effort,\n   particularly with respect to services running\
    \ over IP. This is\n   particularly important for the advanced applications noted\
    \ previously\n   (e.g., visualization and teleimmersion) as well as the emerging\n\
    \   importance of voice and video, especially voice and video operating\n   with\
    \ lower bandwidth or voice and video co-mingled with data. One\n   perspective\
    \ on this issue is to consider the effect of multiple drops\n   in a single RTT,\
    \ which is catastrophic for TCP applications but may\n   be of no special significance\
    \ for real-time traffic. Providing for\n   improved services can be accomplished\
    \ through a variety of quality of\n   service (QoS) and class of service (CoS)\
    \ mechanisms.  The first IETF\n   model was the Integrated Services (IntServ)\
    \ model, which used RSVP as\n   the signaling mechanism. Since this model requires\
    \ state in every\n   router for every session and to manage the traffic flows,\
    \ it is\n   generally recognized to have scaling limits.  However, it is very\n\
    \   appropriate for certain situations.\n   Differentiated Services, or DiffServ,\
    \ grew out of a reaction against\n   the perceived scalability problems with the\
    \ IETF IntServ model.\n   DiffServ is an architecture for implementing scalable\
    \ service\n   differentiation in the Internet. Scalability is achieved by\n  \
    \ aggregating traffic through the use of IP-layer packet marking.\n   Packets\
    \ are classified and marked to receive a particular per-hop\n   forwarding behavior\
    \ on nodes along their path.  Sophisticated\n   classification, marking, policing,\
    \ and shaping operations need only\n   be implemented at network boundaries or\
    \ hosts.  Network resources are\n   allocated to traffic streams by service provisioning\
    \ policies which\n   govern how traffic is marked and conditioned upon entry to\
    \ a\n   differentiated services-capable network, and how that traffic is\n   forwarded\
    \ within that network. These simple PHBs are combined with a\n   much larger number\
    \ of policing policies enforced at the network edge\n   to provide a broad and\
    \ flexible range of services, without requiring\n   state or complex forwarding\
    \ decisions to be performed in the core and\n   distribution layers.\n   Recently,\
    \ the idea of \"tunneling\" RSVP over a DiffServ-capable\n   network has generated\
    \ significant interest. This attempts to combine\n   the best features of both\
    \ IntServ and DiffServ while mitigating the\n   disadvantages of each. This in\
    \ turn has led the IETF to study ways to\n   ensure that Differv and Inteserv\
    \ can not only coexist, but are also\n   interoperable.\n   The practical realization\
    \ of either or both architectures depends on\n   many middleware components, some\
    \ of which are described in this\n   document. The workshop discussion mainly\
    \ focused on DiffServ\n   mechanisms and on what effect such mechanisms would\
    \ have on\n   middleware and its ability to monitor and manage the network\n \
    \  infrastructure for the benefit of the applications. Both IntServ and\n   DiffServ\
    \ only fully make sense if linked to a policy mechanism. This\n   mechanism must\
    \ be able to make policy decisions, detect and resolve\n   conflicts in policies,\
    \ and enforce and monitor policies.\n   Workshop participants almost unanimously\
    \ agreed that they also\n   required a scalable inter-domain resource manager\
    \ (e.g., a bandwidth\n   broker). Currently, if an RSVP session is run, each router\
    \ along a\n   path becomes involved, with flow policing at each hop. Bandwidth\n\
    \   Broker models include the bandwidth broker, a policy decision point\n   (which\
    \ makes admission control and policy decisions) and the policy\n   enforcement\
    \ points (i.e., edge routers) which provide for policing at\n   the first hop\
    \ and for remarking aggregate flows so that subsequent\n   routers need only deal\
    \ with the aggregate flows.\n   IETF protocols that could be used to implement\
    \ a Bandwidth Broker\n   model (e.g., COPS, Diameter, and others) were also discussed.\
    \  The\n   Diameter protocol is interesting in this context, because it provides\n\
    \   set up mechanisms for basic network resource allocations and\n   reallocations,\
    \ as well as optional allocations.- All of these can be\n   used for various types\
    \ of bandwidth broker implementations, including\n   those directed at QoS, using\
    \ RSVP type information. Diameter\n   currently does not provide path information,\
    \ but instead relies on\n   network pathway information established at ingress\
    \ and egress nodes.\n   However, the status of Diameter is still open in the IETF.\n\
    \   COPS was initially developed as a mechanism for establishing RSVP\n   policy\
    \ within a domain and remains intra-domain centric. It is a\n   useful intra-domain\
    \ mechanism for allocating bandwidth resources\n   within a policy context. Work\
    \ is now being conducted to use COPS for\n   establishing policy associated with\
    \ a DiffServ-capable network. COPS\n   is designed to facilitate communication\
    \ between the PDP and the PEP,\n   carrying policy decisions and other information.\n\
    \   To implement any type of Bandwidth Broker model, it is necessary to\n   establish\
    \ a mechanism for policy exchanges.  The Internet2's Qbone\n   working group is\
    \ currently working to define a prototype inter-domain\n   bandwidth broker signaling\
    \ protocol. This work is being coordinated\n   with IETF efforts.\n   Another\
    \ mechanism is required for traffic shaping and SLA policing\n   and enforcement.\
    \  One mechanism is fair queuing in its various forms,\n   which has been described\
    \ as TDM emulation without the time and space\n   components. Techniques have\
    \ been used for several years for fair\n   queuing for low speed lines. For DS-3\
    \ with 40 byte packets and OC-3c\n   speeds with 200-byte packets, weighted fair\
    \ queuing uses a deficit\n   round-robin algorithm that allows it to scale. It\
    \ is capable of flow\n   discrimination based on stochastically hashing the flows.\
    \ An\n   additional expansion of this technique is to preface this technique\n\
    \   with class indicators. Currently, classification techniques are based\n  \
    \ on IP precedence. However, classification will soon be achieved in\n   many\
    \ routers using Diffserv code points (DSCPs) to specify the type\n   of conditioning\
    \ to be applied.  The complete requirements of policing\n   for DiffServ implementations,\
    \ e.g., via bandwidth brokers, have not\n   yet been fully explored or defined.\n\
    \   Network monitoring capabilities (i.e., querying the network for state\n  \
    \ information on a micro and macro level) that support middleware and\n   application\
    \ services were identified as a core requirement. In fact,\n   a network instrumentation\
    \ and measurement infrastructure, upon which\n   a set of intelligent network\
    \ management middleware services can be\n   built, is absolutely critical.\n \
    \  Current mechanisms (e.g. ICMP, SNMP) were not deemed robust enough\n   for\
    \ middleware and applications developers to determine the state of\n   the network,\
    \ or to verify that they were receiving the specific type\n   of treatment they\
    \ had requested.  This was judged especially true of\n   a network providing QoS\
    \ or CoS. Indeed, it is not at all clear that\n   SNMP, for example, is even the\
    \ right architectural model for\n   middleware to use to enable applications to\
    \ determine the state of\n   the network. Other capabilities, such as OcxMon,\
    \ RTFM, new MIBs, and\n   active measurement techniques (e.g., IPPM one-way delay\
    \ metrics) need\n   to be made available to middleware services and applications.\n\
    \   The provisioning of differentiated services takes the Internet one\n   step\
    \ away from its \"dumb\" best effort status.  As the complexity of\n   the network\
    \ increases (e.g. VPNs, QoS, CoS, VoIP, etc.), more\n   attention must be paid\
    \ to providing the end-user/customer or network\n   administrator with the tools\
    \ they require to securely and dynamically\n   manage an adaptable network infrastructure.\
    \ Differentiated services\n   means that theoretically some traffic gets better\
    \ service than other\n   traffic; subsequently, one can expect to pay for better\
    \ service,\n   which means that accounting and billing services will be one of\
    \ the\n   important middleware core components that others will rely upon. The\n\
    \   model and protocols necessary to accomplish this are not developed\n   yet.\n"
- title: 12.0  Authentication, Authorization, and Accounting
  contents:
  - "12.0  Authentication, Authorization, and Accounting\n   The IETF's AAA working\
    \ group is focusing on the requirements for\n   supporting authentication, authorization,\
    \ accounting, and auditing of\n   access to and services provided by network resource\
    \ managers (e.g.,\n   bandwidth brokers). These processes constitute an important\
    \ security\n   infrastructure that will be relied upon by middleware and\n   applications.\
    \ However, these components are only basic security\n   components. A public key\
    \ infrastructure (PKI) was identified as a\n   crucial security service infrastructure\
    \ component. For example, the\n   PKI will be required to support the transitivity\
    \ of authentication,\n   authorization, and access control and, where appropriate,\
    \ accounting\n   and billing.  It was noted that, except for issues dealing with\
    \ group\n   security and possibly more efficient and simple management, there\
    \ are\n   no real technical challenges preventing the wide scale deployment of\n\
    \   a PKI support structure at this time. Instead, the main obstacles to\n   overcome\
    \ are mostly political and economic in nature. However,\n   additional middleware\
    \ may be required to better facilitate a PKI.\n   That being said, some people\
    \ believe that we do have some large\n   technical security challenges, revocation\
    \ lists and security with\n   respect to changing group memberships being two\
    \ examples.\n   Middleware and security support is also required for newer\n \
    \  applications (e.g., proxy agents that would act on a process or\n   application's\
    \ behalf and gather the necessary certificates for access\n   and using resources).\
    \ A particularly difficult example is remote\n   collaboration. Accessing a particular\
    \ resource may require a user\n   and/or application to gather certificates from\
    \ more than one policy-\n   controlling agent. It is also true that an entity\
    \ may have various\n   identities that are dependent on the task they are performing\
    \ (usage\n   or role based) or the context of the application.  In order for the\n\
    \   PKI to become truly functional on a ubiquitous level, there needs to\n   exist\
    \ a set of independent signing authorities that can vouch for the\n   top-level\
    \ certificate authorities.\n   There are also higher-level middleware services\
    \ which will build on\n   public key infrastructure, notary services and provenance\n\
    \   verification.  As we move from a relatively dumb network (e.g. best\n   effort\
    \ IP) to an Internet with embedded intelligence (e.g., DiffServ,\n   IntServ,\
    \ bandwidth brokers, directory-enabled networks, etc.), the\n   secure exchange\
    \ of information will become even more important.  In\n   addition, as we start\
    \ to provide differentiated services, accounting\n   and statistics gathering\
    \ will become much more important. We also\n   need to provide for the integrity\
    \ and security of collecting,\n   analyzing, and transporting network management\
    \ and monitoring\n   information.  And the issues of data privacy and integrity,\
    \ along\n   with addressing denial of service and non-repudiation, cannot be\n\
    \   ignored.\n"
- title: 13.0   Network Management, Performance, and Operations
  contents:
  - "13.0   Network Management, Performance, and Operations\n   Network management\
    \ capabilities were identified as being paramount to\n   the success of middleware\
    \ deployment, and subsequently to the success\n   of the application. Many of\
    \ the issues addressed here are not part of\n   standard NOC operations. In a\
    \ more complex world of QoS, CoS, and\n   micro prioritization, reactions to network\
    \ failures must be handled\n   differently than current procedures. Allocations\
    \ are more dynamic,\n   especially additions, deletions, and changes with additional\
    \ sets of\n   requirements, such as priorities and new types of inter-domain\n\
    \   interactions. These will inevitably increase the complexity of\n   network\
    \ management.\n   There are many microscopic and macroscopic network management\n\
    \   projects focusing on making both active and passive network\n   statistics\
    \ and information available to end-users. Current visual\n   debugging and analysis\
    \ capabilities (e.g., those developed by\n   NLANR/CAIDA) are crucial tools for\
    \ network administrators and\n   designers for understanding their networks. In\
    \ addition, current\n   network management techniques and mechanisms, which were\
    \ designed for\n   network designers and managers, need to be adapted to provide\
    \ a\n   dynamic and relevant set of information to the middleware or\n   application\
    \ service software. This will allow the programs to\n   dynamically adapt to the\
    \ changing state of the network infrastructure\n   while ensuring the integrity\
    \ and security of the network and other\n   resources.\n   Another aspect of network\
    \ management that has not received the\n   necessary attention, is the need for\
    \ modeling and analysis tools for\n   network and middleware designers. CIM and\
    \ DEN show great promise in\n   providing a common framework for modeling the\
    \ management of network\n   elements and services as well as users, applications,\
    \ and other\n   resources of the network. Undoubtedly, middleware designers will\n\
    \   place new requirements on CIM and DEN that will cause these\n   approaches\
    \ to evolve.\n"
- title: 14.0  Middleware to support multicast applications
  contents:
  - "14.0  Middleware to support multicast applications\n   IP multicast - that is,\
    \ the routing and forwarding of mutlicast\n   packets in an IP-based network,\
    \ is in the view of the workshop part\n   of the basic network infrastructure.\
    \ The Internet Group Multicast\n   Protocol, which manages the joining and leaving\
    \ of multicast groups,\n   could also be considered a basic network service. However,\
    \ there is a\n   tremendous need for middleware services to make multicast useable\
    \ for\n   various applications, much like TCP played a key role in making IP\n\
    \   applications useable. Specifically, one might reasonably want\n   middleware\
    \ services to provide authenticated control of multicast\n   services. Examples\
    \ of these services include the creation and joining\n   of multicast groups,\
    \ multicast address management, multicast channel\n   directories (there has already\
    \ been considerable work in this area),\n   various forms of reliable multicast\
    \ services (this has been an IRTF\n   research area), and to secure multicast\
    \ groups through various\n   cryptographic strategies. In addition, because of\
    \ the large impact\n   that multicast can have on a network, multicast management\
    \ middleware\n   services, particularly in conjunction with QoS, will be needed,\
    \ as\n   will services to link together multicasting within various networks\n\
    \   that do not directly interchange multicast routing information. It\n   should\
    \ be noted, however, that several security issues with\n   multicast, especially\
    \ groups with dynamic membership policies, still\n   need to be resolved.\n"
- title: 15.0 Java and Jini
  contents:
  - "15.0 Java and Jini\n   Java was chosen as an example of a heterogeneous runtime\
    \ support\n   system for the sake of discussion as to whether it could be qualified\n\
    \   as a development language particularly suitable for the development\n   of\
    \ middleware. The consensus was that the Java language and compilers\n   are important\
    \ in the current distributed model of the Internet and\n   for the support of\
    \ middleware (i.e., middleware written using Java).\n   Also, a virtual Java machine\
    \ located on a system can be considered\n   middleware as much as any operating\
    \ system or network operating\n   systems would be considered middleware. Jini\
    \ middleware technology\n   not only defines a set of protocols for discovery,\
    \ join, and lookup,\n   but also a leasing and transaction mechanism to provide\
    \ resilience in\n   a dynamic networked environment.  Java and Jini will be dependent\
    \ on\n   a functioning PKI, especially for signed applets. That being said,\n\
    \   there are security concerns with both Java and Jini that need to be\n   addressed,\
    \ such as allowing the downloading of applets and servlets.\n"
- title: 16.0  Security Considerations
  contents:
  - "16.0  Security Considerations\n   This document is a report of a workshop in\
    \ which security was a\n   common theme, as can be seen by the references to security\
    \ through\n   out the document; but the workshop did not reach any specific\n\
    \   recommendations for new security-related terminology.\n"
- title: 17.0 Summary
  contents:
  - "17.0 Summary\n   Middleware may have components and services that only exist\
    \ in the\n   persistent infrastructure, but it will also have components that\n\
    \   enable and support end-to-end (i.e. application to application or\n   host\
    \ to host) interaction across multiple autonomous administrative\n   domains.\
    \ A set of core persistent middleware services is required to\n   support the\
    \ development of a richer set of middleware services which\n   can be aggregated\
    \ or upon which applications will be based (e.g., an\n   onion or layered model).\
    \ This set of core middleware services will\n   help applications leverage the\
    \ services and capabilities of the\n   underlying network infrastructure, along\
    \ with enabling applications\n   to adjust in changes to the network. The particular\
    \ set of such\n   services utilized by an application or process will be a function\
    \ of\n   the requirements of the application field or affinity group (e.g.,\n\
    \   network management or high energy physics applications) wishing to\n   utilize\
    \ the network or distributed data/computation infrastructure.\n   This document\
    \ discusses some of the basic and core middleware\n   services, which include,\
    \ but are not limited to: directories,\n   name/address resolution services, security\
    \ services (i.e.,\n   authentication, authorization, accounting, and access control),\n\
    \   network management, network monitoring, time servers, and accounting.\n  \
    \ Network level capabilities, such as multicast and DiffServ, are not\n   classified\
    \ as middleware; rather, they are enabling infrastructure\n   services upon which\
    \ middleware will be built or which middleware may\n   use and manage.  A second\
    \ level of important middleware services,\n   which builds upon these core set\
    \ of services, may include\n   accounting/billing, resource managers, single sign-on\
    \ services,\n   globally unique names, metadata servers, and locators.\n   A recognized\
    \ goal is to provide a set of middleware services that\n   enable access to and\
    \ management of the underlying network\n   infrastructure and support applications\
    \ wishing to make use of that\n   network-based infrastructure. It appears necessary\
    \ to agree to a\n   framework of services for the support, provisioning and operations,\n\
    \   and management of the network. Today, we have piecemeal activities\n   already\
    \ being pursued in various standards organizations. These\n   include efforts\
    \ in the IETF and DMTF (e.g., AAA, Policy Framework,\n   DiffServ, DEN, CIM, etc.),\
    \ as well as in the advanced application\n   environments (e.g., Grid Forum, the\
    \ PACIs, NGI, Internet2, etc.).\n   Both of these efforts require the integration\
    \ and management of many\n   infrastructure components, not just networks; however,\
    \ we have no\n   overall framework that pulls all of these together, or a mechanism\
    \ to\n   coordinate all of these activities.  We are just embarking on the\n \
    \  development of a rich plan of middleware services. Consequently, we\n   have\
    \ a lot of work yet to be done. For instance, as we move into an\n   electronic\
    \ persistent presence (EPP) environment where multiple\n   instances of an identity\
    \ or person (or even their proxy agents) are\n   supported, we will require enhanced\
    \ locator and brokering services.\n   The directory (e.g., DNS or X.500) and locator\
    \ services of today may\n   not be appropriate for this task.\n   One goal of\
    \ the workshop was to identify research and development\n   areas in middleware\
    \ that federal agencies and industry may choose to\n   support. The workshop highlighted\
    \ a few areas that may benefit from\n   additional R&D support.  These areas include,\
    \ but are not limited to:\n   -  inter-domain resource management architecture\
    \ and protocols (e.g.,\n      inter-domain bandwidth brokers)\n   -  resource\
    \ languages that describe and enable the management of a\n      wide variety of\
    \ resources (e.g., networks, data bases, storage,\n      online facilities, etc.\n\
    \   -  avoiding deadlock and ensuring efficiency with resource managers\n   -\
    \  network management tools and APIs that provide macroscopic and\n      microscopic\
    \ real-time infrastructure\n   -  information to middleware services and applications\
    \ (not just MIBs\n      and SNMP access)\n   -  domain and inter-domain accounting\
    \ and billing\n   -  monitoring and verification services of contracted infrastructure\n\
    \      services\n   -  enhanced locators that can locate resources and resource\
    \ managers\n   -  cross administrative policy negotiation and authentication\n\
    \   -  middleware bypass (i.e. access to raw system or network resources\n   \
    \   metadata (i.e., data that is used to describe data found in\n      directories\
    \ or exchanged between services such as resource\n      managers, PDPs, PEPs,\
    \ directories, accounting and billing\n      services, etc.)\n   -  middleware\
    \ support for mobile or nomadic use\n   -  support for availability of resources\
    \ (i.e. replication and load\n      balancing\n   This workshop was just one small\
    \ step in identifying relevant\n   middleware topics, technologies and players.\
    \  Even though this\n   workshop did not arrive at a consensual definition of\
    \ middleware, it\n   did identify the need for additional work. Specifically,\
    \ further work\n   is needed to identify and qualify middleware services for specific\n\
    \   affinity groups (e.g. Internet2, Education, the PACIs, Grids, etc.)\n   as\
    \ well as to define a macroscopic framework that incorporates the\n   middleware\
    \ work of the IETF, DMTF and other relevant organizations\n   such as the Grid\
    \ Forum.\n"
- title: 18.0  Participants
  contents:
  - "18.0  Participants\n   Deb Agarwal <deba@george.lbl.gov>, Bob Aiken <raiken@cisco.com>,\
    \ Guy\n   Almes <almes@internet2.edu>, Chase Bailey <chase@cisco.com>, Fred\n\
    \   Baker <fred@cisco.com>, Pete Beckman <beckman@lanl.gov>, Javad\n   Boroumand\
    \ <jborouma@nsf.gov>, Scott Bradner <sob@harvard.edu>, George\n   Brett <ghbrett@mindspring.com>,\
    \ Rich Carlson <racarlson@anl.gov>,\n   Brian Carpenter <bcarpent@uk.ibm.com>,\
    \ Charlie Catlett\n   <catlett@ncsa.uiuc.edu>, Bill Cheng <wtcheng@us.ibm.com>,\
    \ Kim Claffy\n   <kc@caida.org>, Bill Decker <Wdecker@nsf.gov>, Christine Falsetti\n\
    \   <cfalsetti@arc.nasa.gov>, Ian Foster <foster@mcs.anl.gov>, Andrew\n   Grimshaw\
    \ <grimshaw@cs.virginia.edu>, Ed Grossman\n   <egrossma@ncsa.uiuc.edu>, Ted Hanss\
    \ <ted@internet2.edu>, Ron Hutchins\n   <ron@oit.gatech.edu>, Larry Jackson <jackson@ncsa.uiuc.edu>,\
    \ Bill\n   Johnston <Wejohnston@lbl.gov>, Juerg von Kaenel <jvk@us.ibm.com>,\n\
    \   Miron Livny <miron@cs.wisc.edu>, Cliff Lynch <cliff@cni.org>, Joel\n   Mambretti\
    \ <j-mambretti@nwu.edu>, Reagan Moore <moore@sdsc.edu>, Klara\n   Nahstedt <klara@cs.uiuc.edu>,\
    \ Mike Nelson <mrn@us.ibm.com>, Bill\n   Nitzberg <nitzberg@nas.nasa.gov>, Hilarie\
    \ Orman <ho@darpa.mil>, John\n   Schnizlein <jschnizl@cisco.com>, Rick Stevens\
    \ <stevens@mcs.anl.gov>,\n   John Strassner <johns@cisco.com>, Ben Teitelbaum\
    \ <ben@advanced.org>,\n   George Vanecek <g.vanecek@att.com>, Ken Klingenstein\n\
    \   <Ken.Klingenstein@Colorado.EDU>, Arvind Krishna\n   <akrishna@us.ibm.com>,\
    \ Dilip Kandlur <kandlur@us.ibm.com\n"
- title: 19.0   URLs/references
  contents:
  - "19.0   URLs/references\n   Please see http://www.mcs.anl.gov/middleware98  for\
    \ copies of the\n   slides presented at the workshop as well as a list of related\
    \ URLs on\n   applications, middleware and network services.\n"
- title: 20.0 Authors' Addresses
  contents:
  - "20.0 Authors' Addresses\n   Editor:  Bob Aiken\n            EMail: raiken@cisco.com\n\
    \   Authors:\n   Bob Aiken\n   Cisco Systems, Inc.\n   6519 Debold Rd.\n   Sabillasville,\
    \ Md.  21780 USA\n   Phone: +1 301 271 2919\n   EMail: raiken@cisco.com\n   John\
    \ Strassner\n   Cisco Systems, Inc.\n   170 West Tasman Drive\n   San Jose, CA\
    \  95134\n   Phone: +1 408 527 1069\n   EMail: johns@cisco.com\n   Brian E. Carpenter\n\
    \   IBM United Kingdom Laboratories\n   MP 185, Hursley Park\n   Winchester, Hampshire\
    \ SO21 2JN, UK\n   EMail: brian@hursley.ibm.com\n   Ian Foster\n   Argonne National\
    \ Laboratory\n   The University of Chicago\n   Argonne, IL 60439  USA\n   Phone:\
    \ +1 630 252 4619\n   EMail: foster@mcs.anl.gov\n   Clifford Lynch\n   Coalition\
    \ for Networked Information\n   21 Dupont Circle\n   Washington, DC  20036\n \
    \  Phone: +1 202 296 5098\n   EMail: cliff@cni.org\n   Joe Mambretti\n   International\
    \ Center for Advanced Internet Research\n   1890 Maple, Suite 150\n   Northwestern\
    \ University, Evanston, Illinois 60201\n   Phone: +1 847 467 3911\n   EMail: j-mambretti@nwu.edu\n\
    \   Reagan Moore\n   University of California, San Diego\n   NPACI/SDSC, MC 0505\n\
    \   9500 Gilman Drive\n   La Jolla, CA 92093-0505   USA\n   EMail: moore@sdsc.edu\n\
    \   Benjamin Teitelbaum\n   Advanced Networks & Services, Inc.\n   EMail: ben@internet2.edu\n"
- title: 21.0  Full Copyright Statement
  contents:
  - "21.0  Full Copyright Statement\n   Copyright (C) The Internet Society (2000).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
