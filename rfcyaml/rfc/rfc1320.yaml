- title: __initial_text__
  contents:
  - "                    The MD4 Message-Digest Algorithm\nStatus of thie Memo\n \
    \  This memo provides information for the Internet community.  It does\n   not\
    \ specify an Internet standard.  Distribution of this memo is\n   unlimited.\n\
    Acknowlegements\n   We would like to thank Don Coppersmith, Burt Kaliski, Ralph\
    \ Merkle,\n   and Noam Nisan for numerous helpful comments and suggestions.\n\
    Table of Contents\n   1. Executive Summary                                   \
    \             1\n   2. Terminology and Notation                              \
    \           2\n   3. MD4 Algorithm Description                               \
    \         2\n   4. Summary                                                   \
    \       6\n   References                                                     \
    \     6\n   APPENDIX A - Reference Implementation                            \
    \   6\n   Security Considerations                                            20\n\
    \   Author's Address                                                   20\n1.\
    \ Executive Summary\n   This document describes the MD4 message-digest algorithm\
    \ [1]. The\n   algorithm takes as input a message of arbitrary length and produces\n\
    \   as output a 128-bit \"fingerprint\" or \"message digest\" of the input.\n\
    \   It is conjectured that it is computationally infeasible to produce\n   two\
    \ messages having the same message digest, or to produce any\n   message having\
    \ a given prespecified target message digest. The MD4\n   algorithm is intended\
    \ for digital signature applications, where a\n   large file must be \"compressed\"\
    \ in a secure manner before being\n   encrypted with a private (secret) key under\
    \ a public-key cryptosystem\n   such as RSA.\n   The MD4 algorithm is designed\
    \ to be quite fast on 32-bit machines. In\n   addition, the MD4 algorithm does\
    \ not require any large substitution\n   tables; the algorithm can be coded quite\
    \ compactly.\n   The MD4 algorithm is being placed in the public domain for review\
    \ and\n   possible adoption as a standard.\n   This document replaces the October\
    \ 1990 RFC 1186 [2].  The main\n   difference is that the reference implementation\
    \ of MD4 in the\n   appendix is more portable.\n   For OSI-based applications,\
    \ MD4's object identifier is\n   md4 OBJECT IDENTIFIER ::=\n     {iso(1) member-body(2)\
    \ US(840) rsadsi(113549) digestAlgorithm(2) 4}\n   In the X.509 type AlgorithmIdentifier\
    \ [3], the parameters for MD4\n   should have type NULL.\n2. Terminology and Notation\n\
    \   In this document a \"word\" is a 32-bit quantity and a \"byte\" is an\n  \
    \ eight-bit quantity. A sequence of bits can be interpreted in a\n   natural manner\
    \ as a sequence of bytes, where each consecutive group\n   of eight bits is interpreted\
    \ as a byte with the high-order (most\n   significant) bit of each byte listed\
    \ first. Similarly, a sequence of\n   bytes can be interpreted as a sequence of\
    \ 32-bit words, where each\n   consecutive group of four bytes is interpreted\
    \ as a word with the\n   low-order (least significant) byte given first.\n   Let\
    \ x_i denote \"x sub i\". If the subscript is an expression, we\n   surround it\
    \ in braces, as in x_{i+1}. Similarly, we use ^ for\n   superscripts (exponentiation),\
    \ so that x^i denotes x to the i-th\n   power.\n   Let the symbol \"+\" denote\
    \ addition of words (i.e., modulo-2^32\n   addition). Let X <<< s denote the 32-bit\
    \ value obtained by circularly\n   shifting (rotating) X left by s bit positions.\
    \ Let not(X) denote the\n   bit-wise complement of X, and let X v Y denote the\
    \ bit-wise OR of X\n   and Y. Let X xor Y denote the bit-wise XOR of X and Y,\
    \ and let XY\n   denote the bit-wise AND of X and Y.\n3. MD4 Algorithm Description\n\
    \   We begin by supposing that we have a b-bit message as input, and that\n  \
    \ we wish to find its message digest. Here b is an arbitrary\n   nonnegative integer;\
    \ b may be zero, it need not be a multiple of\n   eight, and it may be arbitrarily\
    \ large. We imagine the bits of the\n   message written down as follows:\n   \
    \              m_0 m_1 ... m_{b-1}\n   The following five steps are performed\
    \ to compute the message digest\n   of the message.\n3.1 Step 1. Append Padding\
    \ Bits\n   The message is \"padded\" (extended) so that its length (in bits) is\n\
    \   congruent to 448, modulo 512. That is, the message is extended so\n   that\
    \ it is just 64 bits shy of being a multiple of 512 bits long.\n   Padding is\
    \ always performed, even if the length of the message is\n   already congruent\
    \ to 448, modulo 512.\n   Padding is performed as follows: a single \"1\" bit\
    \ is appended to the\n   message, and then \"0\" bits are appended so that the\
    \ length in bits of\n   the padded message becomes congruent to 448, modulo 512.\
    \ In all, at\n   least one bit and at most 512 bits are appended.\n3.2 Step 2.\
    \ Append Length\n   A 64-bit representation of b (the length of the message before\
    \ the\n   padding bits were added) is appended to the result of the previous\n\
    \   step. In the unlikely event that b is greater than 2^64, then only\n   the\
    \ low-order 64 bits of b are used. (These bits are appended as two\n   32-bit\
    \ words and appended low-order word first in accordance with the\n   previous\
    \ conventions.)\n   At this point the resulting message (after padding with bits\
    \ and with\n   b) has a length that is an exact multiple of 512 bits. Equivalently,\n\
    \   this message has a length that is an exact multiple of 16 (32-bit)\n   words.\
    \ Let M[0 ... N-1] denote the words of the resulting message,\n   where N is a\
    \ multiple of 16.\n3.3 Step 3. Initialize MD Buffer\n   A four-word buffer (A,B,C,D)\
    \ is used to compute the message digest.\n   Here each of A, B, C, D is a 32-bit\
    \ register. These registers are\n   initialized to the following values in hexadecimal,\
    \ low-order bytes\n   first):\n        word A: 01 23 45 67\n        word B: 89\
    \ ab cd ef\n        word C: fe dc ba 98\n        word D: 76 54 32 10\n3.4 Step\
    \ 4. Process Message in 16-Word Blocks\n   We first define three auxiliary functions\
    \ that each take as input\n   three 32-bit words and produce as output one 32-bit\
    \ word.\n        F(X,Y,Z) = XY v not(X) Z\n        G(X,Y,Z) = XY v XZ v YZ\n \
    \       H(X,Y,Z) = X xor Y xor Z\n   In each bit position F acts as a conditional:\
    \ if X then Y else Z.\n   The function F could have been defined using + instead\
    \ of v since XY\n   and not(X)Z will never have \"1\" bits in the same bit position.)\
    \  In\n   each bit position G acts as a majority function: if at least two of\n\
    \   X, Y, Z are on, then G has a \"1\" bit in that bit position, else G has\n\
    \   a \"0\" bit. It is interesting to note that if the bits of X, Y, and Z\n \
    \  are independent and unbiased, the each bit of f(X,Y,Z) will be\n   independent\
    \ and unbiased, and similarly each bit of g(X,Y,Z) will be\n   independent and\
    \ unbiased. The function H is the bit-wise XOR or\n   parity\" function; it has\
    \ properties similar to those of F and G.\n   Do the following:\n      Process\
    \ each 16-word block. */\n      For i = 0 to N/16-1 do\n        /* Copy block\
    \ i into X. */\n        For j = 0 to 15 do\n          Set X[j] to M[i*16+j].\n\
    \        end /* of loop on j */\n        /* Save A as AA, B as BB, C as CC, and\
    \ D as DD. */\n        AA = A\n        BB = B\n        CC = C\n        DD = D\n\
    \        /* Round 1. */\n        /* Let [abcd k s] denote the operation\n    \
    \         a = (a + F(b,c,d) + X[k]) <<< s. */\n        /* Do the following 16\
    \ operations. */\n        [ABCD  0  3]  [DABC  1  7]  [CDAB  2 11]  [BCDA  3 19]\n\
    \        [ABCD  4  3]  [DABC  5  7]  [CDAB  6 11]  [BCDA  7 19]\n        [ABCD\
    \  8  3]  [DABC  9  7]  [CDAB 10 11]  [BCDA 11 19]\n        [ABCD 12  3]  [DABC\
    \ 13  7]  [CDAB 14 11]  [BCDA 15 19]\n        /* Round 2. */\n        /* Let [abcd\
    \ k s] denote the operation\n             a = (a + G(b,c,d) + X[k] + 5A827999)\
    \ <<< s. */\n        /* Do the following 16 operations. */\n        [ABCD  0 \
    \ 3]  [DABC  4  5]  [CDAB  8  9]  [BCDA 12 13]\n        [ABCD  1  3]  [DABC  5\
    \  5]  [CDAB  9  9]  [BCDA 13 13]\n        [ABCD  2  3]  [DABC  6  5]  [CDAB 10\
    \  9]  [BCDA 14 13]\n        [ABCD  3  3]  [DABC  7  5]  [CDAB 11  9]  [BCDA 15\
    \ 13]\n        /* Round 3. */\n        /* Let [abcd k s] denote the operation\n\
    \             a = (a + H(b,c,d) + X[k] + 6ED9EBA1) <<< s. */\n        /* Do the\
    \ following 16 operations. */\n        [ABCD  0  3]  [DABC  8  9]  [CDAB  4 11]\
    \  [BCDA 12 15]\n        [ABCD  2  3]  [DABC 10  9]  [CDAB  6 11]  [BCDA 14 15]\n\
    \        [ABCD  1  3]  [DABC  9  9]  [CDAB  5 11]  [BCDA 13 15]\n        [ABCD\
    \  3  3]  [DABC 11  9]  [CDAB  7 11]  [BCDA 15 15]\n        /* Then perform the\
    \ following additions. (That is, increment each\n           of the four registers\
    \ by the value it had before this block\n           was started.) */\n       \
    \ A = A + AA\n        B = B + BB\n        C = C + CC\n        D = D + DD\n   \
    \   end /* of loop on i */\n   Note. The value 5A..99 is a hexadecimal 32-bit\
    \ constant, written with\n   the high-order digit first. This constant represents\
    \ the square root\n   of 2. The octal value of this constant is 013240474631.\n\
    \   The value 6E..A1 is a hexadecimal 32-bit constant, written with the\n   high-order\
    \ digit first.  This constant represents the square root of\n   3. The octal value\
    \ of this constant is 015666365641.\n   See Knuth, The Art of Programming, Volume\
    \ 2 (Seminumerical\n   Algorithms), Second Edition (1981), Addison-Wesley. Table\
    \ 2, page\n    660.\n3.5 Step 5. Output\n   The message digest produced as output\
    \ is A, B, C, D. That is, we\n   begin with the low-order byte of A, and end with\
    \ the high-order byte\n   of D.\n   This completes the description of MD4. A reference\
    \ implementation in\n   C is given in the appendix.\n4. Summary\n   The MD4 message-digest\
    \ algorithm is simple to implement, and provides\n   a \"fingerprint\" or message\
    \ digest of a message of arbitrary length.\n   It is conjectured that the difficulty\
    \ of coming up with two messages\n   having the same message digest is on the\
    \ order of 2^64 operations,\n   and that the difficulty of coming up with any\
    \ message having a given\n   message digest is on the order of 2^128 operations.\
    \ The MD4 algorithm\n   has been carefully scrutinized for weaknesses. It is,\
    \ however, a\n   relatively new algorithm and further security analysis is of\
    \ course\n   justified, as is the case with any new proposal of this sort.\nReferences\n\
    \   [1] Rivest, R., \"The MD4 message digest algorithm\", in A.J.  Menezes\n \
    \      and S.A. Vanstone, editors, Advances in Cryptology - CRYPTO '90\n     \
    \  Proceedings, pages 303-311, Springer-Verlag, 1991.\n   [2] Rivest, R., \"The\
    \ MD4 Message Digest Algorithm\", RFC 1186, MIT,\n       October 1990.\n   [3]\
    \ CCITT Recommendation X.509 (1988), \"The Directory -\n       Authentication\
    \ Framework\".\n   [4] Rivest, R., \"The MD5 Message-Digest Algorithm\", RFC 1321,\
    \ MIT and\n       RSA Data Security, Inc, April 1992.\nAPPENDIX A - Reference\
    \ Implementation\n   This appendix contains the following files:\n        global.h\
    \ -- global header file\n        md4.h -- header file for MD4\n        md4c.c\
    \ -- source code for MD4\n        mddriver.c -- test driver for MD2, MD4 and MD5\n\
    \   The driver compiles for MD5 by default but can compile for MD2 or MD4\n  \
    \ if the symbol MD is defined on the C compiler command line as 2 or 4.\n   The\
    \ implementation is portable and should work on many different\n   plaforms. However,\
    \ it is not difficult to optimize the implementation\n   on particular platforms,\
    \ an exercise left to the reader. For example,\n   on \"little-endian\" platforms\
    \ where the lowest-addressed byte in a 32-\n   bit word is the least significant\
    \ and there are no alignment\n   restrictions, the call to Decode in MD4Transform\
    \ can be replaced with\n   a typecast.\nA.1 global.h\n/* GLOBAL.H - RSAREF types\
    \ and constants\n */\n/* PROTOTYPES should be set to one if and only if the compiler\
    \ supports\n     function argument prototyping.\n   The following makes PROTOTYPES\
    \ default to 0 if it has not already\n     been defined with C compiler flags.\n\
    \ */\n#ifndef PROTOTYPES\n#define PROTOTYPES 0\n#endif\n/* POINTER defines a generic\
    \ pointer type */\ntypedef unsigned char *POINTER;\n/* UINT2 defines a two byte\
    \ word */\ntypedef unsigned short int UINT2;\n/* UINT4 defines a four byte word\
    \ */\ntypedef unsigned long int UINT4;\n/* PROTO_LIST is defined depending on\
    \ how PROTOTYPES is defined above.\n   If using PROTOTYPES, then PROTO_LIST returns\
    \ the list, otherwise it\n     returns an empty list.\n */\n#if PROTOTYPES\n#define\
    \ PROTO_LIST(list) list\n#else\n#define PROTO_LIST(list) ()\n#endif\nA.2 md4.h\n\
    /* MD4.H - header file for MD4C.C\n */\n/* Copyright (C) 1991-2, RSA Data Security,\
    \ Inc. Created 1991. All\n   rights reserved.\n   License to copy and use this\
    \ software is granted provided that it\n   is identified as the \"RSA Data Security,\
    \ Inc. MD4 Message-Digest\n   Algorithm\" in all material mentioning or referencing\
    \ this software\n   or this function.\n   License is also granted to make and\
    \ use derivative works provided\n   that such works are identified as \"derived\
    \ from the RSA Data\n   Security, Inc. MD4 Message-Digest Algorithm\" in all material\n\
    \   mentioning or referencing the derived work.\n   RSA Data Security, Inc. makes\
    \ no representations concerning either\n   the merchantability of this software\
    \ or the suitability of this\n   software for any particular purpose. It is provided\
    \ \"as is\"\n   without express or implied warranty of any kind.\n   These notices\
    \ must be retained in any copies of any part of this\n   documentation and/or\
    \ software.\n */\n/* MD4 context. */\ntypedef struct {\n  UINT4 state[4];    \
    \                               /* state (ABCD) */\n  UINT4 count[2];        /*\
    \ number of bits, modulo 2^64 (lsb first) */\n  unsigned char buffer[64];    \
    \                     /* input buffer */\n} MD4_CTX;\nvoid MD4Init PROTO_LIST\
    \ ((MD4_CTX *));\nvoid MD4Update PROTO_LIST\n  ((MD4_CTX *, unsigned char *, unsigned\
    \ int));\nvoid MD4Final PROTO_LIST ((unsigned char [16], MD4_CTX *));\nA.3 md4c.c\n\
    /* MD4C.C - RSA Data Security, Inc., MD4 message-digest algorithm\n */\n/* Copyright\
    \ (C) 1990-2, RSA Data Security, Inc. All rights reserved.\n   License to copy\
    \ and use this software is granted provided that it\n   is identified as the \"\
    RSA Data Security, Inc. MD4 Message-Digest\n   Algorithm\" in all material mentioning\
    \ or referencing this software\n   or this function.\n   License is also granted\
    \ to make and use derivative works provided\n   that such works are identified\
    \ as \"derived from the RSA Data\n   Security, Inc. MD4 Message-Digest Algorithm\"\
    \ in all material\n   mentioning or referencing the derived work.\n   RSA Data\
    \ Security, Inc. makes no representations concerning either\n   the merchantability\
    \ of this software or the suitability of this\n   software for any particular\
    \ purpose. It is provided \"as is\"\n   without express or implied warranty of\
    \ any kind.\n   These notices must be retained in any copies of any part of this\n\
    \   documentation and/or software.\n */\n#include \"global.h\"\n#include \"md4.h\"\
    \n/* Constants for MD4Transform routine.\n */\n#define S11 3\n#define S12 7\n\
    #define S13 11\n#define S14 19\n#define S21 3\n#define S22 5\n#define S23 9\n\
    #define S24 13\n#define S31 3\n#define S32 9\n#define S33 11\n#define S34 15\n\
    static void MD4Transform PROTO_LIST ((UINT4 [4], unsigned char [64]));\nstatic\
    \ void Encode PROTO_LIST\n  ((unsigned char *, UINT4 *, unsigned int));\nstatic\
    \ void Decode PROTO_LIST\n  ((UINT4 *, unsigned char *, unsigned int));\nstatic\
    \ void MD4_memcpy PROTO_LIST ((POINTER, POINTER, unsigned int));\nstatic void\
    \ MD4_memset PROTO_LIST ((POINTER, int, unsigned int));\nstatic unsigned char\
    \ PADDING[64] = {\n  0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n};\n/* F,\
    \ G and H are basic MD4 functions.\n */\n#define F(x, y, z) (((x) & (y)) | ((~x)\
    \ & (z)))\n#define G(x, y, z) (((x) & (y)) | ((x) & (z)) | ((y) & (z)))\n#define\
    \ H(x, y, z) ((x) ^ (y) ^ (z))\n/* ROTATE_LEFT rotates x left n bits.\n */\n#define\
    \ ROTATE_LEFT(x, n) (((x) << (n)) | ((x) >> (32-(n))))\n/* FF, GG and HH are transformations\
    \ for rounds 1, 2 and 3 */\n/* Rotation is separate from addition to prevent recomputation\
    \ */\n#define FF(a, b, c, d, x, s) { \\\n    (a) += F ((b), (c), (d)) + (x); \\\
    \n    (a) = ROTATE_LEFT ((a), (s)); \\\n  }\n#define GG(a, b, c, d, x, s) { \\\
    \n    (a) += G ((b), (c), (d)) + (x) + (UINT4)0x5a827999; \\\n    (a) = ROTATE_LEFT\
    \ ((a), (s)); \\\n  }\n#define HH(a, b, c, d, x, s) { \\\n    (a) += H ((b), (c),\
    \ (d)) + (x) + (UINT4)0x6ed9eba1; \\\n    (a) = ROTATE_LEFT ((a), (s)); \\\n \
    \ }\n/* MD4 initialization. Begins an MD4 operation, writing a new context.\n\
    \ */\nvoid MD4Init (context)\nMD4_CTX *context;                              \
    \          /* context */\n{\n  context->count[0] = context->count[1] = 0;\n  /*\
    \ Load magic initialization constants.\n   */\n  context->state[0] = 0x67452301;\n\
    \  context->state[1] = 0xefcdab89;\n  context->state[2] = 0x98badcfe;\n  context->state[3]\
    \ = 0x10325476;\n}\n/* MD4 block update operation. Continues an MD4 message-digest\n\
    \     operation, processing another message block, and updating the\n     context.\n\
    \ */\nvoid MD4Update (context, input, inputLen)\nMD4_CTX *context;           \
    \                             /* context */\nunsigned char *input;           \
    \                     /* input block */\nunsigned int inputLen;              \
    \       /* length of input block */\n{\n  unsigned int i, index, partLen;\n  /*\
    \ Compute number of bytes mod 64 */\n  index = (unsigned int)((context->count[0]\
    \ >> 3) & 0x3F);\n  /* Update number of bits */\n  if ((context->count[0] += ((UINT4)inputLen\
    \ << 3))\n      < ((UINT4)inputLen << 3))\n    context->count[1]++;\n  context->count[1]\
    \ += ((UINT4)inputLen >> 29);\n  partLen = 64 - index;\n  /* Transform as many\
    \ times as possible.\n   */\n  if (inputLen >= partLen) {\n    MD4_memcpy\n  \
    \    ((POINTER)&context->buffer[index], (POINTER)input, partLen);\n    MD4Transform\
    \ (context->state, context->buffer);\n    for (i = partLen; i + 63 < inputLen;\
    \ i += 64)\n      MD4Transform (context->state, &input[i]);\n    index = 0;\n\
    \  }\n  else\n    i = 0;\n  /* Buffer remaining input */\n  MD4_memcpy\n    ((POINTER)&context->buffer[index],\
    \ (POINTER)&input[i],\n     inputLen-i);\n}\n/* MD4 finalization. Ends an MD4\
    \ message-digest operation, writing the\n     the message digest and zeroizing\
    \ the context.\n */\nvoid MD4Final (digest, context)\nunsigned char digest[16];\
    \                         /* message digest */\nMD4_CTX *context;            \
    \                            /* context */\n{\n  unsigned char bits[8];\n  unsigned\
    \ int index, padLen;\n  /* Save number of bits */\n  Encode (bits, context->count,\
    \ 8);\n  /* Pad out to 56 mod 64.\n   */\n  index = (unsigned int)((context->count[0]\
    \ >> 3) & 0x3f);\n  padLen = (index < 56) ? (56 - index) : (120 - index);\n  MD4Update\
    \ (context, PADDING, padLen);\n  /* Append length (before padding) */\n  MD4Update\
    \ (context, bits, 8);\n  /* Store state in digest */\n  Encode (digest, context->state,\
    \ 16);\n  /* Zeroize sensitive information.\n   */\n  MD4_memset ((POINTER)context,\
    \ 0, sizeof (*context));\n}\n/* MD4 basic transformation. Transforms state based\
    \ on block.\n */\nstatic void MD4Transform (state, block)\nUINT4 state[4];\nunsigned\
    \ char block[64];\n{\n  UINT4 a = state[0], b = state[1], c = state[2], d = state[3],\
    \ x[16];\n  Decode (x, block, 64);\n  /* Round 1 */\n  FF (a, b, c, d, x[ 0],\
    \ S11); /* 1 */\n  FF (d, a, b, c, x[ 1], S12); /* 2 */\n  FF (c, d, a, b, x[\
    \ 2], S13); /* 3 */\n  FF (b, c, d, a, x[ 3], S14); /* 4 */\n  FF (a, b, c, d,\
    \ x[ 4], S11); /* 5 */\n  FF (d, a, b, c, x[ 5], S12); /* 6 */\n  FF (c, d, a,\
    \ b, x[ 6], S13); /* 7 */\n  FF (b, c, d, a, x[ 7], S14); /* 8 */\n  FF (a, b,\
    \ c, d, x[ 8], S11); /* 9 */\n  FF (d, a, b, c, x[ 9], S12); /* 10 */\n  FF (c,\
    \ d, a, b, x[10], S13); /* 11 */\n  FF (b, c, d, a, x[11], S14); /* 12 */\n  FF\
    \ (a, b, c, d, x[12], S11); /* 13 */\n  FF (d, a, b, c, x[13], S12); /* 14 */\n\
    \  FF (c, d, a, b, x[14], S13); /* 15 */\n  FF (b, c, d, a, x[15], S14); /* 16\
    \ */\n  /* Round 2 */\n  GG (a, b, c, d, x[ 0], S21); /* 17 */\n  GG (d, a, b,\
    \ c, x[ 4], S22); /* 18 */\n  GG (c, d, a, b, x[ 8], S23); /* 19 */\n  GG (b,\
    \ c, d, a, x[12], S24); /* 20 */\n  GG (a, b, c, d, x[ 1], S21); /* 21 */\n  GG\
    \ (d, a, b, c, x[ 5], S22); /* 22 */\n  GG (c, d, a, b, x[ 9], S23); /* 23 */\n\
    \  GG (b, c, d, a, x[13], S24); /* 24 */\n  GG (a, b, c, d, x[ 2], S21); /* 25\
    \ */\n  GG (d, a, b, c, x[ 6], S22); /* 26 */\n  GG (c, d, a, b, x[10], S23);\
    \ /* 27 */\n  GG (b, c, d, a, x[14], S24); /* 28 */\n  GG (a, b, c, d, x[ 3],\
    \ S21); /* 29 */\n  GG (d, a, b, c, x[ 7], S22); /* 30 */\n  GG (c, d, a, b, x[11],\
    \ S23); /* 31 */\n  GG (b, c, d, a, x[15], S24); /* 32 */\n  /* Round 3 */\n \
    \ HH (a, b, c, d, x[ 0], S31); /* 33 */\n  HH (d, a, b, c, x[ 8], S32); /* 34\
    \ */\n  HH (c, d, a, b, x[ 4], S33); /* 35 */\n  HH (b, c, d, a, x[12], S34);\
    \ /* 36 */\n  HH (a, b, c, d, x[ 2], S31); /* 37 */\n  HH (d, a, b, c, x[10],\
    \ S32); /* 38 */\n  HH (c, d, a, b, x[ 6], S33); /* 39 */\n  HH (b, c, d, a, x[14],\
    \ S34); /* 40 */\n  HH (a, b, c, d, x[ 1], S31); /* 41 */\n  HH (d, a, b, c, x[\
    \ 9], S32); /* 42 */\n  HH (c, d, a, b, x[ 5], S33); /* 43 */\n  HH (b, c, d,\
    \ a, x[13], S34); /* 44 */\n  HH (a, b, c, d, x[ 3], S31); /* 45 */\n  HH (d,\
    \ a, b, c, x[11], S32); /* 46 */\n  HH (c, d, a, b, x[ 7], S33); /* 47 */\n  HH\
    \ (b, c, d, a, x[15], S34); /* 48 */\n  state[0] += a;\n  state[1] += b;\n  state[2]\
    \ += c;\n  state[3] += d;\n  /* Zeroize sensitive information.\n   */\n  MD4_memset\
    \ ((POINTER)x, 0, sizeof (x));\n}\n/* Encodes input (UINT4) into output (unsigned\
    \ char). Assumes len is\n     a multiple of 4.\n */\nstatic void Encode (output,\
    \ input, len)\nunsigned char *output;\nUINT4 *input;\nunsigned int len;\n{\n \
    \ unsigned int i, j;\n  for (i = 0, j = 0; j < len; i++, j += 4) {\n    output[j]\
    \ = (unsigned char)(input[i] & 0xff);\n    output[j+1] = (unsigned char)((input[i]\
    \ >> 8) & 0xff);\n    output[j+2] = (unsigned char)((input[i] >> 16) & 0xff);\n\
    \    output[j+3] = (unsigned char)((input[i] >> 24) & 0xff);\n  }\n}\n/* Decodes\
    \ input (unsigned char) into output (UINT4). Assumes len is\n     a multiple of\
    \ 4.\n */\nstatic void Decode (output, input, len)\nUINT4 *output;\nunsigned char\
    \ *input;\nunsigned int len;\n{\n  unsigned int i, j;\n  for (i = 0, j = 0; j\
    \ < len; i++, j += 4)\n    output[i] = ((UINT4)input[j]) | (((UINT4)input[j+1])\
    \ << 8) |\n      (((UINT4)input[j+2]) << 16) | (((UINT4)input[j+3]) << 24);\n\
    }\n/* Note: Replace \"for loop\" with standard memcpy if possible.\n */\nstatic\
    \ void MD4_memcpy (output, input, len)\nPOINTER output;\nPOINTER input;\nunsigned\
    \ int len;\n{\n  unsigned int i;\n  for (i = 0; i < len; i++)\n    output[i] =\
    \ input[i];\n}\n/* Note: Replace \"for loop\" with standard memset if possible.\n\
    \ */\nstatic void MD4_memset (output, value, len)\nPOINTER output;\nint value;\n\
    unsigned int len;\n{\n  unsigned int i;\n  for (i = 0; i < len; i++)\n    ((char\
    \ *)output)[i] = (char)value;\n}\nA.4 mddriver.c\n/* MDDRIVER.C - test driver\
    \ for MD2, MD4 and MD5\n */\n/* Copyright (C) 1990-2, RSA Data Security, Inc.\
    \ Created 1990. All\n   rights reserved.\n   RSA Data Security, Inc. makes no\
    \ representations concerning either\n   the merchantability of this software or\
    \ the suitability of this\n   software for any particular purpose. It is provided\
    \ \"as is\"\n   without express or implied warranty of any kind.\n   These notices\
    \ must be retained in any copies of any part of this\n   documentation and/or\
    \ software.\n */\n/* The following makes MD default to MD5 if it has not already\
    \ been\n     defined with C compiler flags.\n */\n#ifndef MD\n#define MD MD5\n\
    #endif\n#include <stdio.h>\n#include <time.h>\n#include <string.h>\n#include \"\
    global.h\"\n#if MD == 2\n#include \"md2.h\"\n#endif\n#if MD == 4\n#include \"\
    md4.h\"\n#endif\n#if MD == 5\n#include \"md5.h\"\n#endif\n/* Length of test block,\
    \ number of test blocks.\n */\n#define TEST_BLOCK_LEN 1000\n#define TEST_BLOCK_COUNT\
    \ 1000\nstatic void MDString PROTO_LIST ((char *));\nstatic void MDTimeTrial PROTO_LIST\
    \ ((void));\nstatic void MDTestSuite PROTO_LIST ((void));\nstatic void MDFile\
    \ PROTO_LIST ((char *));\nstatic void MDFilter PROTO_LIST ((void));\nstatic void\
    \ MDPrint PROTO_LIST ((unsigned char [16]));\n#if MD == 2\n#define MD_CTX MD2_CTX\n\
    #define MDInit MD2Init\n#define MDUpdate MD2Update\n#define MDFinal MD2Final\n\
    #endif\n#if MD == 4\n#define MD_CTX MD4_CTX\n#define MDInit MD4Init\n#define MDUpdate\
    \ MD4Update\n#define MDFinal MD4Final\n#endif\n#if MD == 5\n#define MD_CTX MD5_CTX\n\
    #define MDInit MD5Init\n#define MDUpdate MD5Update\n#define MDFinal MD5Final\n\
    #endif\n/* Main driver.\n   Arguments (may be any combination):\n     -sstring\
    \ - digests string\n     -t       - runs time trial\n     -x       - runs test\
    \ script\n     filename - digests file\n     (none)   - digests standard input\n\
    \ */\nint main (argc, argv)\nint argc;\nchar *argv[];\n{\n  int i;\n  if (argc\
    \ > 1)\n    for (i = 1; i < argc; i++)\n      if (argv[i][0] == '-' && argv[i][1]\
    \ == 's')\n        MDString (argv[i] + 2);\n      else if (strcmp (argv[i], \"\
    -t\") == 0)\n        MDTimeTrial ();\n      else if (strcmp (argv[i], \"-x\")\
    \ == 0)\n        MDTestSuite ();\n      else\n        MDFile (argv[i]);\n  else\n\
    \    MDFilter ();\n  return (0);\n}\n/* Digests a string and prints the result.\n\
    \ */\nstatic void MDString (string)\nchar *string;\n{\n  MD_CTX context;\n  unsigned\
    \ char digest[16];\n  unsigned int len = strlen (string);\n  MDInit (&context);\n\
    \  MDUpdate (&context, string, len);\n  MDFinal (digest, &context);\n  printf\
    \ (\"MD%d (\\\"%s\\\") = \", MD, string);\n  MDPrint (digest);\n  printf (\"\\\
    n\");\n}\n/* Measures the time to digest TEST_BLOCK_COUNT TEST_BLOCK_LEN-byte\n\
    \     blocks.\n */\nstatic void MDTimeTrial ()\n{\n  MD_CTX context;\n  time_t\
    \ endTime, startTime;\n  unsigned char block[TEST_BLOCK_LEN], digest[16];\n  unsigned\
    \ int i;\n  printf\n    (\"MD%d time trial. Digesting %d %d-byte blocks ...\"\
    , MD,\n     TEST_BLOCK_LEN, TEST_BLOCK_COUNT);\n  /* Initialize block */\n  for\
    \ (i = 0; i < TEST_BLOCK_LEN; i++)\n    block[i] = (unsigned char)(i & 0xff);\n\
    \  /* Start timer */\n  time (&startTime);\n  /* Digest blocks */\n  MDInit (&context);\n\
    \  for (i = 0; i < TEST_BLOCK_COUNT; i++)\n    MDUpdate (&context, block, TEST_BLOCK_LEN);\n\
    \  MDFinal (digest, &context);\n  /* Stop timer */\n  time (&endTime);\n  printf\
    \ (\" done\\n\");\n  printf (\"Digest = \");\n  MDPrint (digest);\n  printf (\"\
    \\nTime = %ld seconds\\n\", (long)(endTime-startTime));\n  printf\n    (\"Speed\
    \ = %ld bytes/second\\n\",\n     (long)TEST_BLOCK_LEN * (long)TEST_BLOCK_COUNT/(endTime-startTime));\n\
    }\n/* Digests a reference suite of strings and prints the results.\n */\nstatic\
    \ void MDTestSuite ()\n{\n  printf (\"MD%d test suite:\\n\", MD);\n  MDString\
    \ (\"\");\n  MDString (\"a\");\n  MDString (\"abc\");\n  MDString (\"message digest\"\
    );\n  MDString (\"abcdefghijklmnopqrstuvwxyz\");\n  MDString\n    (\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\
    );\n  MDString\n    (\"1234567890123456789012345678901234567890\\\n1234567890123456789012345678901234567890\"\
    );\n}\n/* Digests a file and prints the result.\n */\nstatic void MDFile (filename)\n\
    char *filename;\n{\n  FILE *file;\n  MD_CTX context;\n  int len;\n  unsigned char\
    \ buffer[1024], digest[16];\n  if ((file = fopen (filename, \"rb\")) == NULL)\n\
    \    printf (\"%s can't be opened\\n\", filename);\n  else {\n    MDInit (&context);\n\
    \    while (len = fread (buffer, 1, 1024, file))\n      MDUpdate (&context, buffer,\
    \ len);\n    MDFinal (digest, &context);\n    fclose (file);\n    printf (\"MD%d\
    \ (%s) = \", MD, filename);\n    MDPrint (digest);\n    printf (\"\\n\");\n  }\n\
    }\n/* Digests the standard input and prints the result.\n */\nstatic void MDFilter\
    \ ()\n{\n  MD_CTX context;\n  int len;\n  unsigned char buffer[16], digest[16];\n\
    \  MDInit (&context);\n  while (len = fread (buffer, 1, 16, stdin))\n    MDUpdate\
    \ (&context, buffer, len);\n  MDFinal (digest, &context);\n  MDPrint (digest);\n\
    \  printf (\"\\n\");\n}\n/* Prints a message digest in hexadecimal.\n */\nstatic\
    \ void MDPrint (digest)\nunsigned char digest[16];\n{\n  unsigned int i;\n  for\
    \ (i = 0; i < 16; i++)\n    printf (\"%02x\", digest[i]);\n}\nA.5 Test suite\n\
    \   The MD4 test suite (driver option \"-x\") should print the following\n   results:\n\
    MD4 test suite:\nMD4 (\"\") = 31d6cfe0d16ae931b73c59d7e0c089c0\nMD4 (\"a\") =\
    \ bde52cb31de33e46245e05fbdbd6fb24\nMD4 (\"abc\") = a448017aaf21d8525fc10ae87aa6729d\n\
    MD4 (\"message digest\") = d9130a8164549fe818874806e1c7014b\nMD4 (\"abcdefghijklmnopqrstuvwxyz\"\
    ) = d79e1c308aa5bbcdeea8ed63df412da9\nMD4 (\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\
    ) =\n043f8582f241db351ce627e153e7f0e4\nMD4 (\"123456789012345678901234567890123456789012345678901234567890123456\n\
    78901234567890\") = e33b4ddc9c38f2199c3e7b164fcc0536\nSecurity Considerations\n\
    \   The level of security discussed in this memo is considered to be\n   sufficient\
    \ for implementing moderate security hybrid digital-\n   signature schemes based\
    \ on MD4 and a public-key cryptosystem. We do\n   not know of any reason that\
    \ MD4 would not be sufficient for\n   implementing very high security digital-signature\
    \ schemes, but\n   because MD4 was designed to be exceptionally fast, it is \"\
    at the\n   edge\" in terms of risking successful cryptanalytic attack. After\n\
    \   further critical review, it may be appropriate to consider MD4 for\n   very\
    \ high security applications. For very high security applications\n   before the\
    \ completion of that review, the MD5 algorithm [4] is\n   recommended.\nAuthor's\
    \ Address\n   Ronald L. Rivest\n   Massachusetts Institute of Technology\n   Laboratory\
    \ for Computer Science\n   NE43-324\n   545 Technology Square\n   Cambridge, MA\
    \  02139-1986\n   Phone: (617) 253-5880\n   EMail: rivest@theory.lcs.mit.edu\n"
