- title: __initial_text__
  contents:
  - "                  Octet Sequences for Upper-Layer OSI\n              to Support\
    \ Basic Communications Applications\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document states particular octet sequences that comprise the\
    \ OSI\n   upper-layer protocols (Session, Presentation and ACSE) when used to\n\
    \   support applications with \"basic communications requirements\". These\n \
    \  include OSI application protocols such as X.400 P7 and Directory\n   Access\
    \ Protocol, and \"migrant\" protocols, originally defined for use\n   over other\
    \ transports.\n   As well as the octet sequences which are the supporting layer\
    \ headers\n   (and trailers) around the application data, this document includes\n\
    \   some tutorial material on the OSI upper layers.\n   An implementation that\
    \ sends the octet sequences given here, and\n   interprets the equivalent protocol\
    \ received, will be able to\n   interwork with an implementation based on the\
    \ base standard, when\n   both are being used to support an appropriate application\
    \ protocol.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ...................................................2\n\
    \   2. General ........................................................3\n   \
    \ 2.1 Subdivisions of \"basic communication applications\" ...........3\n    2.2\
    \ Conformance and interworking .................................5\n    2.3 Relationship\
    \ to other documents ..............................5\n   3. Contexts and titles\
    \ ............................................6\n    3.1 The concepts of abstract\
    \ and transfer syntax .................6\n    3.2 Use of presentation context\
    \ by cookbook applications..........7\n    3.3 Processing Presentation-context-definition-list\
    \ ..............8\n    3.4 Application context ..........................................9\n\
    \    3.5 APtitles and AEqualifiers ....................................9\n   4.\
    \ What has to be sent and received ..............................10\n    4.1 Sequence\
    \ of OSI protocol data units used ....................10\n    4.2 Which OSI fields\
    \ are used ...................................12\n    4.3 Encoding methods and\
    \ length fields ..........................14\n    4.3.1 Session items .............................................14\n\
    \    4.3.2 ASN.1/BER items (Presentation and ACSE) ...................14\n   \
    \ 4.4 BER Encoding of values for primitive datatypes ..............15\n    4.5\
    \ Unnecessary constructed encodings ...........................16\n   5. Notation\
    \ ......................................................16\n   6. Octet sequences\
    \ ...............................................17\n    6.1 Connection request\
    \ message ..................................17\n    6.2 Successful reply to connection\
    \ setup ........................20\n    6.3 Connection rejection ........................................22\n\
    \    6.4 Data-phase TSDU .............................................23\n   \
    \ 6.5 Closedown  - release request ................................24\n    6.6\
    \ Closedown - release response ................................25\n    6.7 Deliberate\
    \ abort ............................................25\n    6.8 Provider abort\
    \ ..............................................27\n    6.9 Abort accept ................................................27\n\
    \   7. References ....................................................27\n   8.\
    \ Other notes ...................................................28\n   9. Security\
    \ Considerations .......................................29\n   10. Author's Address\
    \ .............................................29\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The upper-layer protocols of the OSI model are large and\
    \ complex,\n   mostly because the protocols they describe are rich in function\
    \ and\n   options. However, for support of most applications, only a limited\n\
    \   portion of the function is needed. An implementation that is not\n   intended\
    \ to be a completely general platform does not need to\n   implement all the features.\
    \ Further, it need not reflect the\n   structuring of the OSI specifications -\
    \ the layer of the OSI model\n   are purely abstract.\n   This document presents\
    \ the protocol elements required by the OSI\n   upper layers when supporting a\
    \ connection-oriented application with\n   only basic communication requirements\
    \ - that is to create a\n   connection, optionally negotiate the data representation,\n\
    \   send/receive data, close a connection and abort a connection.\n   Optionally,\
    \ data may be sent on the connection establishment, closing\n   and abort messages.\n\
    \   In this document, the protocol elements needed are given in terms of\n   the\
    \ octet sequences that comprise the 'envelope' around the\n   application data.\
    \ The envelope and its enclosing data form a\n   Transport Service Data Unit (TSDU)\
    \ that can be passed via the OSI\n   Transport Service [ISO8072] (which in turn\
    \ may be supported as\n   specified in [RFC1006] or any class of the OSI Transport\
    \ Protocol\n   [ISO8073]).\n   The octet sequences to be sent and the description\
    \ of the alternative\n   forms that may be received are equivalent to an informal\
    \ re-\n   specification of the relevant parts of the upper-layer protocols.\n\
    \   The \"relevant parts\" are determined by the requirements of the\n   supported\
    \ applications (this is a reflexive definition! - if\n   application Z needs something\
    \ that is not here, it is not supported).\n   The formal specifications remain\
    \ the base standards, the appropriate\n   profiles and the requirements of the\
    \ application. However, an\n   implementation based on this document will be able\
    \ to interwork with\n   an implementation based directly on the full standards\
    \ when both are\n   supporting a basic communication application. The \"full\"\
    \n   implementation will exhibit only part of its potential behaviour,\n   since\
    \ the application will only invoke part.\n   In addition to the octet sequences,\
    \ the document includes some\n   tutorial material.\n"
- title: 2.  General
  contents:
  - '2.  General

    '
- title: 2.1 Subdivisions of "basic communication applications"
  contents:
  - "2.1 Subdivisions of \"basic communication applications\"\n   Distinctions can\
    \ be made within the \"basic communication\n   applications\", as defined above,\
    \ based on how much use they make of\n   the OSI upper-layer services, and thus\
    \ how much of the protocol\n   described in this memo will be used to support\
    \ a particular\n   application. One distinction is:\n      a) whether application\
    \ data is sent on the connection\n         establishment, close and abort, or\
    \ only during \"date phase\"\n         on an established connection; OR\n    \
    \  b) whether the application data is of only one kind (abstract\n         syntax)\
    \ and one format (transfer syntax) or more than one\n         (i.e., how much\
    \ use is made of the Presentation layer syntax\n         negotiation and identification\
    \ features)\n   Further distinctions are possible, but in this memo, elements\
    \ of\n   protocol needed (or not needed) by four groups of \"basic\n   communications\
    \ application\" are identified. All groups have \"basic\n   communications requirements\"\
    \ in requiring only connection, data\n   transfer and (perhaps) orderly release\
    \ of connection. The four groups\n   are:\n      Group I: applications which send\
    \ data only on an established\n      connection, and use a single abstract and\
    \ transfer syntax.\n      Group II: applications which send data on connection\n\
    \      establishment and release and use a single abstract and transfer\n    \
    \  syntax.\n      Group III: applications that send data of only one kind (one\n\
    \      abstract syntax) on the connection, but which have more than one\n    \
    \  format (transfer syntax) specified (they use the Presentation\n      context\
    \ negotiation facility).\n      Group IV: applications that will send data of\
    \ several kinds on the\n      connection (and which much therefore distinguish\
    \ on each write\n      which kind is being sent).\n   Group III applications are\
    \ equivalent to Group I (or possibly Group\n   II) after the establishment exchange\
    \ has negotiated the particular\n   transfer syntax that will be used on the connection.\n\
    \   Possible examples of the Groups are:\n      Group I: Application protocols\
    \ designed for use over transport-\n      level protocols. Typically these are\
    \ non-OSI protocols \"migrated\"\n      to an OSI environment. X Window System\
    \ protocol is an example.\n      Group II: OSI-originated protocols with simple\
    \ requirements,\n      including many of the ROSE-based ones, such as Directory\
    \ Access\n      Protocol.\n      Group III: Protocols that can be treated as Group\
    \ I, but for\n      which more than one encoding of the data is known, such as\
    \ a\n      standardised one and a system-specific one - all implementations\n\
    \      understand the standard encoding, but Presentation layer\n      negotiation\
    \ allows like-implementations to use their internal\n      encoding for transfer,\
    \ without loss of general interworking. The\n      same could apply to OSI protocols.\n\
    \      Group IV: OSI protocols with multiple abstract syntaxes (but with\n   \
    \   each individual message from a single abstract syntax) that do\n      not\
    \ use any of the special Session functional units - X.400 P7 is\n      an example.\n\
    \   Some of the OSI protocols that are not included are those that use\n   more\
    \ than one abstract syntax in a single message (such as FTAM or\n   Transaction\
    \ Processing) or use Session functional units (RTSE-based\n   protocols, Virtual\
    \ Terminal).\n"
- title: 2.2 Conformance and interworking
  contents:
  - "2.2 Conformance and interworking\n   The protocol elements specified in this\
    \ memo correspond to the kernel\n   functional units of Session, Presentation\
    \ and ACSE, and the duplex\n   functional unit of Session.\n   The octet sequences\
    \ given below are derived from the specifications\n   in the International Standards\
    \ for the protocols Session [ISO8327],\n   Presentation [ISO8822] and ACSE [ISO8650].\
    \ The intention of this memo\n   is to summarise those specifications, as applicable\
    \ to the supported\n   application groups, so that an implementation could be\
    \ developed\n   without direct reference to the original standards, but capable\
    \ of\n   interworking with implementations that had made direct reference. The\n\
    \   OSI standards (especially Presentation) allow considerable\n   flexibility\
    \ in the encoding of the protocol data units. Accordingly,\n   this memo defines\
    \ particular octet sequences to be sent, and\n   describes the variations that\
    \ can be expected in data received from\n   an implementation based directly on\
    \ the OSI standards, rather than on\n   this cookbook. It is intended that an\
    \ implementation that sends these\n   sequences and that is capable of interpreting\
    \ the variations\n   described will be fully able to interwork with an implementation\n\
    \   based directly on the OSI standards. An implementation that is only\n   capable\
    \ of interpreting the octet sequences specified in this memo\n   for transmission\
    \ may not be able to interwork with standards-based\n   implementations.\n   The\
    \ intent is to be able to interwork with conformant implementations\n   in support\
    \ of the relevant application (or group of applications).\n   Some of the OSI\
    \ standards have conformance requirements that go\n   beyond that necessary for\
    \ successful interworking, including\n   detection of invalid protocol. Tests\
    \ for conformance sometimes go\n   beyond the strict conformance requirements\
    \ of the standard.\n   Consequently an implementation based on this memo may or\
    \ may not be\n   able to formally claim conformance to the International Standard.\
    \ It\n   may be able to legitimately claim conformance, but fail a conformance\n\
    \   test, if the test is over-specified. (Efforts are being made to\n   correct\
    \ this, but in the meantime, the target is interworking with\n   conformant implementations.)\n"
- title: 2.3 Relationship to other documents
  contents:
  - "2.3 Relationship to other documents\n   The flexibility allowed in the Session,\
    \ Presentation and ACSE\n   standards is restricted in the Common Upper-Layer\
    \ Requirements Part 1\n   [CULR-1]).  This is a proposed International Standardised\
    \ Profile\n   (pdISP 11188-1) that can be assumed to be obeyed by most\n   implementations.\
    \ This memo applies the restrictions of CULR-1,\n   especially where these concern\
    \ maximum sizes of fields and the\n   like.Points where advantage is taken of\
    \ a CULR-1 limitation are\n   noted.\n   Additional parts of CULR are under development.\
    \ Part 3 [CULR-3]\n   covers the protocol elements needed for \"basic communications\n\
    \   applications\", and is being developed in (informal) liaison with this\n \
    \  memo. CULR-3 is presented as a normal profile, largely consisting of\n   prescribed\
    \ answers to the questions in the PICS (Protocol\n   Implementation Conformance\
    \ Statement) of the three protocols.  CULR-3\n   does not make the distinction\
    \ between the four Groups.  An\n   implementation of this memo (at least if it\
    \ supported Group IV) would\n   be able to claim conformance to CULR-3, with the\
    \ possible exception\n   of any more-than-interworking conformance requirements\
    \ inherited by\n   CULR-3 from the base standards.\n   An extension [XTI/mOSI]\
    \ to the X/Open Transport Interface [XTI] is\n   shortly to be published as a\
    \ preliminary specification. This defines\n   an API to the OSI upper-layers,\
    \ again as appropriate to a basic\n   communications application. XTI/mOSI would\
    \ be usable as an interface\n   to support applications in groups I, II and III,\
    \ and possibly group\n   IV.\n"
- title: 3.  Contexts and titles
  contents:
  - '3.  Contexts and titles

    '
- title: 3.1 The concepts of abstract and transfer syntax
  contents:
  - "3.1 The concepts of abstract and transfer syntax\n   OSI includes the concepts\
    \ of \"abstract syntax\" and \"transfer syntax\".\n   These are terms for the\
    \ content (abstract syntax) and format \"on-\n   the-line\" (transfer syntax)\
    \ of the protocol elements. The combination\n   of an abstract syntax and transfer\
    \ syntax is called a presentation\n   context.\n   Application protocols devised\
    \ explicitly under OSI auspices have used\n   ASN.1 for the definition of the\
    \ abstract syntax, and nearly all use\n   the Basic Encoding Rules applied to\
    \ the ASN.1 to define the transfer\n   syntax. However, there is no such requirement\
    \ in OSI in general or in\n   OSI Presentation, and still less is there any requirement\
    \ to change\n   the representation of existing application protocols to ASN.1\
    \ (for\n   their definition) or BER (for their transmission). It is not\n   generally\
    \ realised (even in OSI circles) that all communicating\n   applications, in all\
    \ environments, are using some form of these,\n   although under different names\
    \ and without the explicit\n   identification that the OSI Presentation provides.\
    \ OSI separates the\n   identification of the content and format of the data from\
    \ the\n   addressing.\n   Formal specifications of non-OSI application protocols\
    \ (such as\n   TELNET, FTP, X Windows System) generally do not use ASN.1, but\
    \ will\n   invariably be found to define abstract and transfer syntaxes.  For\
    \ a\n   less formalised protocol used between similar systems, the abstract\n\
    \   syntax may be defined simply in programming language structures, and\n   the\
    \ transfer syntax determined by how some compiler represents this\n   in memory.\n\
    \   The OSI Presentation protocol requires that \"names\" be assigned to\n   the\
    \ abstract and transfer syntaxes of the application data that is\n   carried.\
    \  The names are always object identifiers (\"oid\"): globally\n   unique names\
    \ assigned hierarchically. Presentation supports the\n   negotiation of a transfer\
    \ syntax for a particular abstract syntax -\n   several can be offered and one\
    \ selected.\n   This transfer syntax negotiation facility may be especially useful\n\
    \   for non-ASN.1 syntaxes where there is more than one representation\n   available\
    \ (perhaps differing in byte-ordering or character code). In\n   such a case,\
    \ on the connection establishment, all of the transfer\n   syntaxes supported\
    \ by the initiator are offered, and any one of these\n   accepted by the responder,\
    \ at its own choice. If the two systems\n   share some \"native\" format they\
    \ can negotiate that, avoiding\n   transformation into and out of a more general\
    \ format that is used for\n   interworking with unlike systems. The same applies\
    \ to an ASN.1-\n   defined abstract syntax, but in practice non-BER encodings\
    \ of ASN.1\n   are rare.\n"
- title: 3.2 Use of presentation context by cookbook applications
  contents:
  - "3.2 Use of presentation context by cookbook applications\n   An application protocol\
    \ not originally specified with OSI\n   Presentation in mind (a \"migrant\" protocol)\
    \ will not normally need to\n   identify the abstract and transfer syntaxes being\
    \ used - they are\n   known by some other means (effectively inferred from the\
    \ addressing).\n   A generic (anonymous, if you like) name for both syntaxes can\
    \ be used\n   and [CULR-3] defines object identifiers for \"anonymous\" abstract\
    \ and\n   transfer syntax names (currently called \"default\", but this is\n \
    \  expected to change).\n   In some cases object identifier names will be assigned\
    \ for the\n   syntaxes of a migrant application protocol. If these exist, they\n\
    \   should be used.  However, since the processing required will be the\n   same,\
    \ it will be legitimate to offer both the generic and specific\n   names, with\
    \ the responder accepting the specific (if it knew it) and\n   the generic if\
    \ the specific were not known - this will provide a\n   migration option if names\
    \ are assigned to the syntaxes after\n   implementations are deployed using the\
    \ generic names.\n   For abstract syntaxes defined in ASN.1 object identifier\
    \ names will\n   have been assigned to the abstract syntax with the specification.\n\
    \   This name MUST be used to identify the abstract syntax. The transfer\n   syntax\
    \ will most often be the Basic Encoding Rules (BER) object id,\n   but alternatives\
    \ (e.g., Packed Encoding Rules) are possible.\n   For group III and group IV applications,\
    \ specific object identifier\n   names must be used for all the abstract and transfer\
    \ syntaxes. If\n   these names are not assigned with the specification (e.g.,\
    \ if the\n   specification not in ASN.1) they can be assigned by whoever needs\n\
    \   them - ideally the \"owner\" of the syntax specification.\n"
- title: 3.3 Processing Presentation-context-definition-list
  contents:
  - "3.3 Processing Presentation-context-definition-list\n   In Presentation context\
    \ negotiation on connection establishment the\n   initiator sends a list (the\
    \ presentation context definition list) of\n   the abstract syntaxes it intends\
    \ to use, each with a list of transfer\n   syntaxes. Each presentation context\
    \ also has an integer identifier.\n   To build the reply, a responder has to examine\
    \ this list and work out\n   which of the offered presentation contexts will be\
    \ accepted and which\n   (single) transfer syntax for each. The responder sends\
    \ back the reply\n   field, the Presentation-context-definition-result-list, in\
    \ the accept\n   message. The result list contains the same number of result items\
    \ as\n   the definition-list proposed presentation-contexts. They are matched\n\
    \   by position, not by the identifiers (which are not present in the\n   result-\
    \ list). An acceptance also includes the transfer syntax\n   accepted (as there\
    \ can be several offered). This can be copied from\n   the definition list.\n\
    \   For the group I, group II and group III cases,  only the ACSE and one\n  \
    \ application-data P-context will be used and all other contexts\n   rejected.\
    \ For the group IV case, several presentation contexts will\n   be accepted.\n\
    \   However, even for group I applications there may be synonyms for an\n   application-data\
    \ Presentation-context. Unknown synonyms are rejected.\n   The reply shown in\
    \ 6.2 includes a rejection (It can therefore not be\n   the reply to the connection\
    \ request shown in 6.1, since that has only\n   two items in the definition list.)\n\
    \   In all cases, the connection responder must identify and keep the\n   presentation\
    \ context identifiers (called pcid's here) for all the\n   accepted presentation\
    \ contexts. These are integers (odd integers, in\n   this case). CULR-1 limits\
    \ them to no greater than 32767, but they\n   will usually be <= 255 (so taking\
    \ up one octet).\n   A presentation context is sometimes used (i.e., data is sent\
    \ using\n   it) before the negotiation is complete. As will be seen in section\
    \ 6,\n   in these cases, the transfer syntax name sometimes appears with the\n\
    \   integer identifier.\n"
- title: 3.4 Application context
  contents:
  - "3.4 Application context\n   The Association Control Service Element also exchanges\
    \ the name\n   (another Object Identifier) of the application context, which\n\
    \   identifies what the communication is all about, again independently\n   of\
    \ the naming and addressing.  As for the syntaxes, although some\n   name must\
    \ be present in the protocol, a generic name can be used for\n   applications\
    \ that do not have a specific name assigned. (This will\n   almost certainly be\
    \ a group I application - if a specific name is\n   assigned, it must be used.)\
    \ The only negotiation allowed is that the\n   reply may be different from that\
    \ sent by the initiator. CULR-3\n   provides a generic application context name\
    \ (i.e., assigns an object\n   identifier).\n"
- title: 3.5 APtitles and AEqualifiers
  contents:
  - "3.5 APtitles and AEqualifiers\n   In addition to the addressing constructs (transport\
    \ address and\n   possibly session and presentation selectors), the communicating\n\
    \   application entities have names - Application-Entity titles\n   (AEtitle).\
    \  These are carried by ACSE as two fields -the\n   Application-process titles\
    \ (APtitle) and the Application-entity\n   qualifier (AEqualifier). The AEtitle\
    \ is compound, and the APtitle\n   consists of all but the last element, which\
    \ is the AEqualifier. (This\n   explanation can be run backwards). There are two\
    \ non-equivalent\n   forms. AP-titles and AE-titles can be Directory Name or an\
    \ Object\n   Identifier. AE-qualifiers can be Relative Distinguished Name (RDN)\
    \ or\n   an integer - the forms must match, since the AE-qualifier is the last\n\
    \   component of the AP-title. In practice, the Directory form is likely\n   to\
    \ be the only one seen for a while.\n   Use of the these names is rather variable.\
    \ This cookbook proposes\n   that implementations should be able to handle any\
    \ value for the\n   partner's names, and set (as initiator) its own names. This\
    \ is\n   primarily to facilitate OSI:non-OSI relaying (e.g., X/osi:X/tcp),\n \
    \  allowing the names of the end-system to be carried to the relay,\n   where\
    \ they can be converted into hostnames, and the lower-layer\n   address determined.\
    \ OSI assumes that name-to-address lookup is\n   possible (via the Directory or\
    \ other means), but does not assume\n   address-to-name will work. Thus the calling\
    \ AE-title is needed if the\n   responder is to know who the initiator is. However,\
    \ most protocols\n   work perfectly well without these names being included.\n\
    \   As for their encoding, a RDN will almost always be a single attribute\n  \
    \ value assertion, with the attribute defined either by the Directory\n   standard\
    \ [ISO9594 = X.500], or in [Internet/Cosine Schema] [RFC1274].\n   Using the notation\
    \ defined below, the encoding of an RDN using a\n   Directory-defined standard\
    \ attribute is:\n   31  80  {1         - RDN, [SET OF]\n   30  80  {2        \
    \ - AttributeValueAssertion, [SEQUENCE]\n   06  03  5504yy     -- OID identifying\
    \ an attribute named in\n                      -- the Directory standard\n   \
    \                   -- which one is determined by yy\n   13  La  xxxxxx     --\
    \ [Printable string]\n                      -- could be T61 string, with tag 14\n\
    \   00  00  }2         - end of AVA\n   00  00  }1         - end of RDN\n   The\
    \ most likely attributes for an RDN have the following hex values\n   for yy.\n\
    \        CommonName               03\n        Country                  06\n  \
    \      Locality                 07\n        State/Province           08\n    \
    \    Organisation             0A\n        OrganisationUnit         0B\n   For\
    \ non-Directory attributes, the object id name must be substituted\n   (thus changing\
    \ the immediately preceding length)\n   If there are multiple attribute value\
    \ assertions in the RDN, the\n   group between {2 and 2} is repeated (with different\
    \ attributes).\n   Order is not significant.\n   The encoding of a [Directory]\
    \ Name for the AP-titles is the RDNs\n   (high- order first) within\n   30  80\
    \  {1        - [SEQUENCE] Name\n    -- put the RDN encodings here\n   00  00 \
    \ }1\n   An Object Identifier AP-title is encoded as a primitive (see below),\n\
    \   with the \"universal\" tag for an object identifier, which is 6. The\n   integer\
    \ AE-qualifier uses the universal tag for an integer, which is\n   2.\n"
- title: 4.  What has to be sent and received
  contents:
  - '4.  What has to be sent and received

    '
- title: 4.1 Sequence of OSI protocol data units used
  contents:
  - "4.1 Sequence of OSI protocol data units used\n   OSI defines its facilities in\
    \ terms of services but these are\n   abstract constructs (they do not have to\
    \ correspond to procedure\n   calls) - the significant thing is the transmission\
    \ of the resulting\n   protocol data unit (PDU). The PDU at each layer carries\
    \ (as user\n   data) the PDU of the layer above. The different layers follow\n\
    \   different conventions for naming the pdus. This section gives an\n   overview\
    \ of the sequence of PDUs exchanged - the details of these are\n   given in section\
    \ 6.\n   The requirements of the application are to create a connection\n   (strictly\
    \ an association for the application-layer in OSI, but called\n   a connection\
    \ here), to send and receive data and to close the\n   connection.  The PDUs used\
    \ are thus:\n   To create connection:\n        First create transport-level connection\n\
    \        Initiator sends the message defined in 6.1, which is Session\n      \
    \  CONNECT carrying Presentation CONNECT request [CP] carrying\n        ACSE A-ASSOCIATE\
    \ request [AARQ] optionally carrying application\n        data.\n        Responder\
    \ replies with the message defined in 6.2, which is\n        Session ACCEPT carrying\
    \ Presentation CONNECT response [CPA]\n        carrying ACSE response [AARE] optionally\
    \ carrying application\n        data.\n     -  If the responder rejects the attempt,\
    \ the reply will be Session\n        REJECT. This is defined in 6.3, where the\
    \ REJECT carries no\n        user data. A received REJECT may carry Presentation,\
    \ ACSE and\n        application data, although 6.3 shows only how to reject at\n\
    \        Session level..\n   To send/receive data on an connection\n        send\
    \ the message defined in 6.4, which is an empty Session\n        GIVE-TOKEN followed\
    \ by Session S-DATA carrying Presentation P-\n        DATA [TD] containing the\
    \ application data (The GIVE-TOKEN is\n        just two octets required by Session\
    \ for some backwards\n        compatibility.)\n   To close connection gracefully\n\
    \        One side sends the message defined in 6.5, which is Session\n       \
    \ FINISH carrying P-RELEASE request carrying A-RELEASE request\n        [RLRQ]\
    \ optionally carrying application data (This side may now\n        receive, but\
    \ not send data.)\n        The other side replies with the message defined in\
    \ 6.6, which\n        is Session DISCONNECT carrying P-RELEASE response carrying\
    \ A-\n        RELEASE response [RLRE] optionally carrying application data\n \
    \       First side disconnects transport connection on receiving the\n       \
    \ reply\n   To close connection abruptly but also send application data\n    \
    \    Send the message defined in 6.7, which is Session ABORT\n        carrying\
    \ Presentation U-ABORT [ARU] carry ACSE U-ABORT [ABRT]\n        carrying application\
    \ data (delivery not guaranteed)\n        On receiving Session ABORT, disconnect\
    \ transport\n   To close connection abruptly\n     -  Either send the message\
    \ defined in 6.8, which is Session ABORT\n        carrying nothing;\n        Or,\
    \ just disconnect at transport level\n   A group I application is assumed (by\
    \ definition) not to send data on\n   the establishment and release exchanges,\
    \ a group II application will.\n   It would be possible to use the abort-with-data\
    \ facility with a group\n   I to send a (possibly non-standardised) error message\
    \ for diagnostic\n   purposes.\n   A special rule is used if a release collision\
    \ occurs (i.e., FINISH+P-\n   RELEASE+RLRQ received after sending the same): the\
    \ side that\n   initiated the original upper-layer connection waits and the other\n\
    \   side replies with the DISCONNECT etc.\n"
- title: 4.2 Which OSI fields are used
  contents:
  - "4.2 Which OSI fields are used\n   There are a number of fields (parameters) in\
    \ the pdus involved. These\n   can be categorised by what is needed to support\
    \ applications (of a\n   particular Group) in general - a field may  be \"useful\"\
    , \"send-only\",\n   \"fixed\", \"fixed with default\", \"internal\" or \"not\
    \ important\". Even\n   those that are not important may be received from another\n\
    \   implementation, but since the application has no use for them, they\n   can\
    \ be ignored. If an implementation is intended to support only a\n   particular\
    \ application, it may be able to downgrade the \"useful\" to\n   \"not important\"\
    .\n   The text below describes the processing that is required for each\n   category\
    \ and which fields are in each category.\n   \"Useful\" - when sending, an implementation\
    \ of general use should be\n   able to set any (legal) value of these fields (via\
    \ the upper\n   interface from the application or via some configuration or lookup\n\
    \   mechanism) and SHOULD pass received values for the Calling values to\n   the\
    \ application (for specific applications, these fields may be\n   either required\
    \ or unnecessary.)\n    AARQ:\n      Called application-process title\n      Called\
    \ application-entity qualifier\n      Calling application-process title\n    \
    \  Calling application-entity qualifier\n   \"Send-only\" - to interwork, the\
    \ implementation must be able to set\n   any value of these, but can ignore any\
    \ received value. Both are octet\n   strings.\n      Presentation selector (up\
    \ to 4 octets, limited by CULR-1)\n      Session selector (up to 16 octets, limited\
    \ by base standard)\n   \"Fixed\" (constant for all applications)\n      abstract\
    \ and transfer syntax identifiers for presentation context\n      for ACSE Version\
    \ numbers - 2 for session, 1 for Presentation\n      and ACSE\n   \"Fixed with\
    \ default\" - the value is specific to the application. For\n   non-ASN.1 abstract\
    \ syntaxes (group I or group II only) applications,\n   the anonymous values assigned\
    \ by the OIW minimal OSI profile [CULR-3]\n   can be used. The CULR-3 default\
    \ application context can be used where\n   a proper context name is neither available\
    \ nor needed.\n      Application context\n                       CULR-3  default\
    \ is {1 0 11188 3 3}\n      Abstract syntax identifier for application data\n\
    \                       CULR-3 anonymous name is {1 0 11188 3 1 1}\n      Transfer\
    \ syntax identifier for application data\n                       CULR-3 anonymous\
    \ name is {1 0 11188 3 2 1}\n   \"Internal\" - an arbitrary value can be sent;\
    \ a received value must be\n   stored for use in sending.\n      Presentation\
    \ context identifiers for ACSE and the application\n      data (always odd integers)\n\
    \   \"Not important\" - for interworking, any legal received value for the\n \
    \  other fields must be received (i.e., the pdu is parsed successfully),\n   but\
    \ can then be ignored. There is no requirement (in this cookbook)\n   to check\
    \ the existence, value or internal format of these fields.\n      All other fields\
    \ (which includes a large number of session\n      fields)\n"
- title: 4.3 Encoding methods and length fields
  contents:
  - "4.3 Encoding methods and length fields\n   Both Session and ASN.1/BER [ISO8824,\
    \ ISO8825] use a type-length-value\n   structure for their encodings, but different\
    \ ones. Presentation\n   protocol and ACSE protocol use the ASN.1/BER encoding\
    \ and\n   consequently a Presentation PDU containing an ACSE PDU can be\n   constructed\
    \ or parsed as if it were a single structure.\n   All the protocols contain pdu\
    \ fields with a compound structure. If\n   one of these is being ignored it may\
    \ be necessary (for BER, not\n   session) to determine the lengths of its components\
    \ to find the\n   length of the ignored field.\n   Many of the lengths in the\
    \ specification below will vary, dependent\n   on the values of the fields.\n"
- title: 4.3.1 Session items
  contents:
  - "4.3.1 Session items\n   The type field of a session item is always a single octet.\n\
    \   For session items, given a particular length, there is no\n   flexibility:\n\
    \      If the length is less than 255, represent as one octet\n      If the length\
    \ is greater, represent as three octets, first is\n      0xFF, next two are the\
    \ length, high-order octet first.\n   (Some \"real\" implementations are known\
    \ to use the second encoding in\n   all cases. This is wrong, but should only\
    \ concern conformance\n   testers.)\n"
- title: 4.3.2 ASN.1/BER items (Presentation and ACSE)
  contents:
  - "4.3.2 ASN.1/BER items (Presentation and ACSE)\n   The type field for ASN.1-BER\
    \ is the tag. Although it is possible for\n   large tags (>30) to be multi-octet,\
    \ there are no large tags in the\n   protocols involved in this memo. Bit 6 (0x20)\
    \ of the tag octet is 1\n   if the item is constructed (i.e., the value is itself\
    \ one or more\n   ASN.1 BER items) or 0 if it is primitive.\n   There is considerable\
    \ flexibility, at senders option, in how lengths\n   are represented in BER. There\
    \ are three forms: short, long and\n   indefinite.\n      Short (usable only if\
    \ the length is less than 127) : one octet\n      Long (usable for *any* length)\
    \ : first octet has the top bit set,\n      the rest is a count of how many octets\
    \ are holding the length\n      value; that many subsequent octets hold the length.\
    \ A long length\n      may use more than the minimum number of octets (so 0x8400000001\n\
    \      is a valid representation of length 1)\n      Indefinite (usable only for\
    \ the length of a compound field) : the\n      single octet is 0x80, then one\
    \ or more items (their tag-length-\n      values) and finally two octets of 0x00\
    \ (equivalent to tag and\n      length of zero).\n   To be able to interwork generally,\
    \ an implementation must be able to\n   handle any of these forms when receiving.\n\
    \   The encodings specified in the octet sequences below use indefinite\n   length\
    \ for all constructed items with a few exceptions. This slightly\n   increases\
    \ the number of octets sent, but means that the length of a\n   varying field\
    \ (e.g., user data, or a varying object identifier)\n   affects only the length\
    \ of the item itself, and not the enclosing\n   lengths. It is thus possible to\
    \ use the octet sequences as templates\n   interspersed by the varying fields.\n\
    \   It is important to note that this choice of indefinite (which is\n   equivalent\
    \ to the \"Canonical Encoding Rules\" variant of BER) applies\n   only to the\
    \ Presentation and ACSE protocols themselves. It does not\n   apply to ASN.1/BER\
    \ encoded application data. The processing required\n   of application data may\
    \ suggest alternative \"best\" options.\n"
- title: 4.4 BER Encoding of values for primitive datatypes
  contents:
  - "4.4 BER Encoding of values for primitive datatypes\n   The following ASN.1 primitive\
    \ datatypes are used in the thinosi\n   stack.\n   Integers are encoded in twos-complement,\
    \ high-order first. Unlike\n   lengths, they must be encoded in the minimum number\
    \ of octets (no\n   leading 00 padding).\n   Object Identifiers have a rather\
    \ peculiar, but compressed encoding:\n      Combine the first two integers of\
    \ the OID into one element by\n      multiplying the first (always 0, 1 or 2)\
    \ by 40, and add the\n      second.\n      Each element (that one, and each subsequent\
    \ integer in the OID\n      taken on its own), is a taken as a binary number and\
    \ divided into\n      7-bit \"bytes\". This is apportioned into bits 1-7 of the\
    \ minimum\n      number of octets. Bit 8 is one for all octets of the sequence\n\
    \      except the last. (This means that elements of less than 127 are\n     \
    \ single octet integers.)\n   Printable Strings - as if in ISO 646 (ASCII)\n \
    \  OCTET STRING - just put the octets there\n"
- title: 4.5 Unnecessary constructed encodings
  contents:
  - "4.5 Unnecessary constructed encodings\n   BER allows the sender to break some\
    \ items (such as OCTET STRINGS,\n   character strings) into several pieces (i.e.,\
    \ as constructed\n   encoding) or send them as primitive. CULR-1 requires that\
    \ this is\n   only done to one level. The pieces of both OCTET STRING and character\n\
    \   string are tagged as if they were OCTET STRING - they have the tag\n   04.\
    \ This memo does not include any of these optional constructions,\n   but they\
    \ may be received in interworking.\n"
- title: 5.  Notation
  contents:
  - "5.  Notation\n   The constructs are shown in their tag - length - value form.\
    \ All\n   numbers are in hexadecimal. Comments are preceded by a '-' character.\n\
    \   Multiple '-' mean the comment is more than just information.\n   The tag column\
    \ contains one of:\n      single fixed octets.\n      * in the tag field indicates\
    \ one or more pdu fields (possibly\n      constructed) that may be received but\
    \ are not sent. If received\n      they can be ignored.\n      ! indicates the\
    \ tag is defined elsewhere.\n      .  is a place holder for the column.\n    \
    \  ? preceding the tag value indicates that the field is not always\n      present\
    \ - the comment will explain.\n   The length column contains one of\n      explicit\
    \ value\n      Ls - a length according to session rules which depends on the\n\
    \      total size of the value (usually constructed)\n      La - a length according\
    \ to BER rules\n      . is a placeholder\n      yy is exactly one octet (i.e.,\
    \ one hex digit per y) holding part\n      of the length\n   The value column\
    \ contains one of\n      the hex value\n      xxxxxx - value of varying length\
    \ (sometimes constructed)\n      {n - (n = number) the start of a constructed\
    \ value\n      n - (n=number) the end of the constructed value with the\n    \
    \  corresponding number. (The number is sometimes omitted on the\n      innermost\
    \ nest of construction)\n      yy - as part of a value - a variable value, each\
    \ y represents one\n      hex digit\n      ? a value, possibly constructed that\
    \ may be received but is not\n      sent. It may be ignored if received\n   Note\
    \ that all presentation lengths may be received in one of the\n   alternative\
    \ forms. All constructed lengths are shown in indefinite\n   form. If a received\
    \ length is definite, the corresponding end item\n   (which will be shown here\
    \ as 00 00 }n)  will become  . . }n.\n   In the comments, the notation {n} refers\
    \ to the constructed item\n   bracketed by the {n, }n fields.\n"
- title: 6.  Octet sequences
  contents:
  - '6.  Octet sequences

    '
- title: 6.1 Connection request message
  contents:
  - "6.1 Connection request message\n        - CONNECT SPDU\n   0D  Ls  {1       -\
    \ \"SI\" value for CONNECT = 13\n   *   Ls  ?        - Connection Identifier\n\
    \   05  06  {2       - Connect/Accept Item\n   13  01  00       - protocol options\
    \ (probably mandatory)\n   *   Ls  ?\n   16  01  02       -- version number (bottom\
    \ bit = v1, next bit =v2.\n                    --     may get offers of either\
    \ or both\n   *   Ls  ?\n   14  02  0002     - Session User Requirements (functional\
    \ units)\n                    - Id (20), length (always 2), duplex fu only.\n\
    \                    -- On receipt, other bits may be set\n                  \
    \  -- check that the 2 bit is set\n   *   Ls  ?        - we do not send any Calling\
    \ Session Selector\n   ?34 Ls  xxxx     -- Called Session Selector (i.e., the\
    \ other end's)\n                    -- up to 16 octets - you must set what the\
    \ other\n                    -- side demands.  - May be anything characters,\n\
    \                    -- binary etc.\n                    -  {3} disappeared in\
    \ editing\n   C1  Ls  {4       -- User Data, Identifier=193. if length is > 512,\n\
    \                    -- then identifier is 194 (hex C2) instead\n   - CP - P-CONNECT-RI\
    \ PPDU. Everything below is in ASN.1 BER\n   31  80  {5       - [SET]\n      \
    \        --- Mode-selector (the {6} group) could possibly\n              --- come\
    \ after everything else {7}\n              --- This will probably only be done\
    \ by\n              --- evil-minded conformance testers\n   A0  80  {6       -\
    \ Mode-selector [0] IMPLICIT SET\n   80  01  01       - [0] IMPLICIT INTEGER {normalmode(1)}\n\
    \   00  00  }6\n   A2  La  {7       - [2] unnamed IMPLICIT SEQUENCE\n   *   La\
    \  ?\n   ?82 La  xxxx     - [2] Called-presentation-selector\n               \
    \     - CULR says maximum length is 4\n                    -- must be what the\
    \ other side wants\n   A4  80  {8       - [4] Presentation-context-definition-list\n\
    \                ---  items (the outer SEQUENCEs) within the {8} list may\n  \
    \              ---  be in any order.\n   30  80  {9       - [SEQUENCE]\n   02\
    \  01  01       -- Defines pcid for ACSE; received value will be\n           \
    \         -- a one or two octet odd integer\n   06  04  52010001 - [OID] for ACSE\
    \ abstract syntax\n   30  80  {        - [SEQUENCE]\n   06  02  5101     - [OID]\
    \ Transfer syntax name is BER\n   00  00  }        - end t-s list\n   00  00 \
    \ }9       - end acse pctx defn\n   30  80  {10      - [SEQUENCE]\n   02  01 \
    \ 03       -- [INTEGER] Defines pcid for application data;\n                 \
    \   -- received value will be a one or two octet odd\n                    -- integer\n\
    \   06  La  xxxxxx   - [OID] object identifier name of application\n         \
    \           - abstract syntax (if CULR-3 default is used, this\n             \
    \       - line is 06  06  28D734030101)\n   30  80  {11\n   06  La  xxxxxx   -\
    \ [OID] t-s name for application data\n                    - (if CULR-3 default\
    \ is used, this line is\n                    -  06  06  28D734030201)\n      \
    \          -- will be several of these if multiple t-s offered\n             \
    \   -- (application is Group III)\n                -- all will have the same tag\
    \ 06\n   00  00  }11      - end transfer syntax list for application p-ctx\n \
    \  00  00  }10      - end application pctx definition\n                -- if multiple\
    \ presentation contexts are offered, (Group\n                -- IV), the {10}\
    \ SEQUENCE will repeat appropriately\n                -- if multiple contexts\
    \ are to be accepted, all the\n                -- pcid's must be remembered\n\
    \   00  00  }8       - end of p-ctx-def-list\n   *   La  ?\n   61  80  {12   \
    \   - [APPLICATION 1] User-data - Fully-encoded\n   30  80  {13      - [SEQUENCE]\
    \ PDV-list\n   02  01  01      -- [INTEGER], value is acse pcid\n   A0  80  {14\
    \      - [0] Single-ASN1\n   - ACSE A-ASSOCIATE request APDU - AARQ\n   60  80\
    \  {15      - [APPLICATION 0] - AARQ\n   *   La  ?        -  protocol version\
    \ defaults to 1 (only one defined)\n   A1  80  {        - [1] Application-context\n\
    \   06  La  xxxxxx   -- object identifier name of application context\n      \
    \              - (if CULR-3 default is used, this line is\n                  \
    \  -  06  05  28D7340303)\n   00  00  }\n             -- Called application process\
    \ title {16} and application\n             -- entity qualifier may or may not\
    \ be needed (see 3.4)\n   ?A2 80  {16      - [2] Called Application-Process title\n\
    \   ?!  La  xxxxxx   -- see 3.5 - either a Directory Name or an oid\n   ?00 00\
    \  }16      - end Called APtitle\n   ?A3 80  {17      - [3] Called Application-Entity\
    \ Qualifier\n   ?!  La  xxxxxx   -- see 3.5\n   ?00 00  }17\n   *   La  ?\n  \
    \           Calling AP-title and AE-qualifier may or may not be needed.\n   ?A6\
    \ 80  {18      - [6] Calling Application-Process title\n   ?!  La  xxxxxx   --\
    \ see 3.5\n   ?00 00  }18\n   ?A7 80  {19      - [7] Calling Application-Entity\
    \ Qualifier\n   ?!  La  xxxxxx   -- see 3.5\n   ?00 00  }19\n   *   La  ?\n  \
    \          -- the user information field may or may not be required\n        \
    \    -- (not required for Group I)\n   ?BE 80  {20      - [30] IMPLICIT SEQUENCE\n\
    \   ?28 80  {21      - [EXTERNAL]\n   ?06 La xxxxxx   -- [OID] This is the oid\
    \ identifying the transfer\n                    -- syntax used for the user data.\n\
    \                    -- It is (almost certainly) required even if only\n     \
    \               -- one transfer syntax was proposed.\n   ?02 01  03       -  [INTEGER]\
    \ this is the pcid for the application\n                    -  data\n   ?A0 La\
    \  xxxxxx   -- [0] single-ASN.1-type - the application data\n                \
    \    --      (see paragraph at end of this section below}\n   ?00 00  }21    \
    \  - end of EXTERNAL\n            -- conceivably there may be several EXTERNALS,\
    \ probably in\n            -- different presentation contexts (different pcids)\n\
    \   ?00 00  }20      - end of user information field\n   00  00  }15      - end\
    \ of AARQ\n   00  00  }14      - end of single-ASN-type\n   00  00  }13      -\
    \ end of PDV-list\n   00  00  }12      - end of Presentation User-data\n   00\
    \  00  }7       - end of third element of CP-type SET\n   00  00  }5       - end\
    \ of CP-type\n   The application data carried in the EXTERNAL is shown (as A0\
    \ La xxxx)\n   assuming it is a single-ASN.1 type, which it often will be for\
    \ group\n   II (since these tend to be OSI applications). The xxxx will be the\n\
    \   BER encoding of the application pdu (probably something like Z-BIND\n   or\
    \ Y- INITIALIZE). The length may be indefinite.\n   If the application data is\
    \ not a single ASN.1 type, but is an octet-\n   aligned value, the A0 La xxxx\
    \ is replaced by 81 La xxxx, where xxxx\n   is the value. In this case the length\
    \ must be definite (unless an\n   \"unnecessary\" constructed encoding is used.)\n\
    \   Identical considerations apply to the other EXTERNALs carried in the\n   ACSE\
    \ pdus.\n"
- title: 6.2 Successful reply to connection setup
  contents:
  - "6.2 Successful reply to connection setup\n   If the connection attempt is successful,\
    \ the following is sent to the\n   initiator on a T-DATA.\n   0E  Ls  {1     \
    \    - ACCEPT SPDU\n   *   Ls  ?\n   05  06  {2         - Connect/Accept Item\n\
    \   13  01  00         - Protocol Options\n   *   Ls  ?\n   16  01  02       \
    \  - version number (this shows version 2 only)\n                  -- if version\
    \ 2 was not offered, omit all of {2}\n   *   Ls  ?\n   14  02  0002       - Session\
    \ User Requirements (functional units)\n                      - duplex fu only\
    \ (kernel is automatic)\n   *   Ls  ?\n   C1  Ls  {3         -- User Data.\n \
    \    - CPA - P-CONNECT response\n   31  80  {4         - [SET]\n             \
    \         -- again, Mode-selector could come at the end\n   A0  80  {        \
    \  -  Mode-selector [0]\n   80  01  01         -  normal mode - [0], length=1,\
    \ value=1\n   00  00  }\n   A2  80  {5         - [2] SEQUENCE (unnamed)\n   *\
    \   La  ?\n   A5  80  {6         - [5] P-context-definition-result-list\n    \
    \               -- following result items are in the order\n                 \
    \  -- corresponding to the pctx-definition-list in\n                   -- the\
    \ connect\n                   -- this example assumes that was ACSE, user, rubbish\n\
    \                   -- with rubbish rejected\n   30  80  {7         - [SEQUENCE]\
    \ result item for acse\n   80  01  00         -- [0] result, value 0 is acceptance\n\
    \   81  02  5101       -  [1] accepted transfer syntax name = BER\n          \
    \            - note that this has an implicit tag, not 06\n   00  00  }7     \
    \    - end result item for acse p-ctx\n   30  80  {8         - [SEQUENCE] result\
    \ item for application-data pctx\n   80  01  00         - [0] value 0 is acceptance\n\
    \   81  La  xxxxxx     - [1] oid for transfer syntax, as on definition list\n\
    \                      -- if there were several (groupIII) , the one you\n   \
    \                   -- liked most\n   00  00  }8         - end result item for\
    \ app-data p-ctx\n   00  00  }6         - end p-ctx-def-result-list\n   *   La\
    \  ?\n   61  80  {10        - [APPLICATION 1] User-data, Fully-encoded\n   30\
    \  80  {11        - [SEQUENCE] PDV-list\n   02  01  01         -- [INTEGER] value\
    \ is pcid for ACSE, as stored from\n                      -- the pctx-definition-list\
    \ on the P-CONNECT\n                      -- request\n   A0  80  {12        -\
    \ [0] single-ASN1-type\n        - A-ASSOCIATE response APDU - AARE\n   61  80\
    \  {13        - [APPLICATION 1] identifies AARE\n   *   La  ?\n   A1  80  {14\
    \        - [1] Application-context\n   06  La  xxxxxx     - [OID] name of application\
    \ context\n                      - usually the same as on AARQ, can differ\n \
    \  00  00  }14\n   A2  03  {15        - [2] result\n   02  01  00         - [INTEGER]\
    \ value 0 means accepted\n   00  00  }15\n   A3  80  {16        - [3] result-source-diagnostic\n\
    \                      - (curiously, a non-optional field)\n   A1  80  {17   \
    \     - [1] acse-service-user\n   02  01  00         - [INTEGER] value 0 = null\
    \ ! (why no implicit tag)\n   00  00  }17        - end acse-service-user\n   00\
    \  00  }16        - end result source diagnostic\n   *   La  ?\n            --\
    \ the user information field may or may not be required\n            -    (not\
    \ used for Group I)\n   ?BE 80  {20      - [30] IMPLICIT SEQUENCE\n   ?28 80 \
    \ {21      - [EXTERNAL]\n                   -- the transfer-syntax oid is not\
    \ present this time\n   ?02 01  03       - [INTEGER] this is the pcid for the\
    \ application\n                    - data\n   ?A0 La  xxxx     -- [0] single-ASN1-type\
    \ (see note at end of 6.1)\n   ?00 00  }21      - end of EXTERNAL\n          \
    \  -- conceivably there may be several EXTERNALS, probably in\n            --\
    \ different presentation contexts (different pcids)\n   ?00 00  }20      - end\
    \ of user information field\n   00  00  }13        - end AARE\n   00  00  }12\
    \        - end single-asn1-type\n   00  00  }11        - end PDV-list\n   00 \
    \ 00  }10        - end Presn user-data\n   00  00  }5         - end [2] implicit\
    \ sequence in cpa\n   00  00  }4         - end CPA-type set\n   The following\
    \ sequence are the octets need to reject a presentation\n   context that was offered\
    \ in the presentation-context-definition-list.\n   Since the result-list matches\
    \ the definition list by position, it is\n   placed at the corresponding point\
    \ within {6} (e.g., it would come\n   immediately after {8}, if the rejected context\
    \ was the third one.\n                 -- next SEQUENCE is a rejection of a pctx\n\
    \   30  80  {9         - [SEQUENCE] result item for a rejected pctx\n   80  01\
    \  02         -- [0] result, value 2 is provider rejection\n   82  01  00    \
    \     - [2] reason, value 0 is reason-not-specified\n                      --\
    \ there are other reasons, but let's keep it\n                      -- simple\n\
    \   00  00  }9         - end result item for rejected pctx\n"
- title: 6.3 Connection rejection
  contents:
  - "6.3 Connection rejection\n   Refusal is at session-level, but by session user,\
    \ with no reason\n   given.  This is a compromise avoiding making unfounded accusations\
    \ of\n   (session) protocol misbehaviour. If the implementation finds it does\n\
    \   not like the received message, it is not essential to attempt to\n   communicate\
    \ with the partner why, though this may be helpful if the\n   reason is correctly\
    \ identified. (In most cases, a wise implementor\n   will make sure an error message\
    \ goes somewhere or other).\n   0C  03  {1          - REFUSE SPDU\n   *   Ls \
    \ ?\n   32  01  00          - rejected by SS-user, no reason\n   The far-end may\
    \ send interesting things explaining why you are not\n   getting interworking.\
    \ If this is a session reason, the reason code\n   will one octet between 81 and\
    \ 86. If the rejection is higher than\n   session, this will be carried on S-REFUSE\
    \ (so first octet is still\n   0C) and the higher pdu will appear as part of the\
    \ reason code, which\n   will start with 02.  (The only remaining code is 01 =\
    \ user\n   congestion.)\n"
- title: 6.4 Data-phase TSDU
  contents:
  - "6.4 Data-phase TSDU\n   This is the core of the skinny stack. The lengths shown\
    \ use a\n   particular set of choices for indefinite and definite lengths that\n\
    \   means that the application data length only affects one field. Making\n  \
    \ the two earlier indefinite lengths definite would require more\n   calculation\
    \ - adding 4 octets after the application data is assumed\n   to be quicker. This\
    \ header is also designed to be 20 octets long,\n   thus maintaining 4-byte alignment\
    \ between transport and application\n   buffers.  Implementations are recommended\
    \ to use this encoding. It is\n   possible to rapidly match incoming data against\
    \ it - if there is no\n   mismatch until the length field, the location of the\
    \ beginning of the\n   data can be determined without further analysis.\n    \
    \         SPDUs\n   01  00  .      - S-GIVE-TOKEN - required by basic concatenation\n\
    \                  - but no parameters\n   01  00  .      - S-DATA - no parameters\
    \ - what follows is User\n                  - Information, not User Data, so is\
    \ not included in\n                  - the SPDU length fields\n     - P-DATA PPDU\
    \ - TD (why TD ? Typed-data id TTD !)\n   61  80  {1     - User-data [APPLICATION\
    \ 1]\n   30  80  {2     - [SEQUENCE] PDV-list\n   02  01  03     - [INTEGER] pcid\
    \ for application data, P-CONNECT PPDU\n                  - remembered by both\
    \ sides\n   81  83yyyyyy   xxxxxx  -- [1] octet-aligned presentation data value(s)\n\
    \                 -- length of length (3 octets) then three octets yyyyyy\n  \
    \               -- for the length of the user data xxxxxx\n   00  00  }2     \
    \ - End-of-contents for end of PDV-list\n   00  00  }1      - End-of-contents\
    \ for end of Presentation User-data\n   If the application data is in ASN.1, and\
    \ a single ASN.1 value is\n   being sent on the TSDU, the same header can be used\
    \ except for the\n   tag on the presentation data values, which becomes A0 (=\
    \ [0],\n   constructed).\n   If there are multiple data values to be sent, this\
    \ header can be\n   expanded in several ways:\n      a) if there are several ASN.1\
    \ values from the same\n         presentation context, they can be concatenated\
    \ and\n         treated as an octet-aligned value (using the header\n        \
    \ as shown above, with tag 81 (or A1 - I think its\n         primitive) or each\
    \ ASN.1 value can be an item\n         (tagged A0), one after the other\n    \
    \  b) if the data values are from different presentation\n         contexts (group\
    \ IV), each is in its own {2} group\n         within the {1}.\n   On receipt,\
    \ for the simple octet-aligned case, the data value may\n   itself have a constructed\
    \ encoding - this will make the tag A1, and\n   it will contain elements each\
    \ tagged 04 (OCTET STRING). According to\n   CULR- 1, these elements are primitive\
    \ (otherwise they would be 24 of\n   course).\n"
- title: 6.5 Closedown  - release request
  contents:
  - "6.5 Closedown  - release request\n   When all is done, and you want to close\
    \ down gracefully, send this on\n   T-DATA.\n       - FINISH SPDU\n   09  10 \
    \ {1         - 9 identifies FINISH\n   *   Ls  ?          - No Transport Disconnect\
    \ item\n                      - default is release Transport-connection\n   C1\
    \  0E  {2         - User data (code 193)\n       - P-RELEASE req/ind PPDU (has\
    \ no name)\n   61  80  {3         - [APPLICATION 1], user data, fully-encoded\n\
    \   30  80  {4         - [SEQUENCE] PDV-list\n   02  01  01         -- pcid for\
    \ ACSE, remembered from setup\n   A0  80  {5         - [0] single asn.1-type\n\
    \       - A-RELEASE request APDU - RLRQ\n   62  80  {6         - [APPLICATION\
    \ 2] identifies RLRQ\n   80  01  00         - [0] reason, value 0 means normal\n\
    \   *   La  ?\n            -- the user information field may or may not be required\n\
    \            - ( not required for Group I)\n   ?BE 80  {7       - [30] IMPLICIT\
    \ SEQUENCE\n   ?28 80  {8       - [EXTERNAL]\n                    -- the transfer-syntax\
    \ oid is not present this time\n   ?02 01  03       - [INTEGER] this is the pcid\
    \ for the application\n                    - data\n   ?A0 La  xxxxx    -- [0]\
    \ single-ASN.1-type application data\n                    -- (see note at end\
    \ of 6.1)\n   ?00 00  }8       - end of EXTERNAL\n            -- conceivably there\
    \ may be several EXTERNALS, probably in\n            -- different presentation\
    \ contexts (different pcids)\n   ?00 00  }7       - end of user information field\n\
    \   00  00  }6         - end of RLRQ\n   00  00  }5         - end of single asn.1-type\n\
    \   00  00  }4         - end of PDV-list\n   00  00  }3         - end of Presentation\
    \ User-data\n"
- title: 6.6 Closedown - release response
  contents:
  - "6.6 Closedown - release response\n   On receiving a FINISH, you send this to\
    \ tell the other end it is all\n   over\n       - Session DISCONNECT SPDU\n  \
    \ 0A  Ls  {1         - SI=10, DISCONNECT\n   C1  Ls  {2         - User data\n\
    \       - P-RELEASE rsp PPDU\n   61  80  {3         - [APPLICATION 1], user data,\
    \ fully-encoded\n   30  80  {4         - [SEQUENCE] PDV-list\n   02  01  01  \
    \       -- [INTEGER] pcid for ACSE, remembered from setup\n   A0  80  {5     \
    \    - [0] single asn.1-type\n       - A-RELEASE response APDU - RLRE\n   63 \
    \ 80  {6         - [APPLICATION 3] identifies RLRE\n   80  01  00         - [0]\
    \ reason, value 0 means normal\n   *   La  ?\n            -- the user information\
    \ field may or may not be required\n            - (not required for Group I)\n\
    \   ?BE 80  {7       - [30] IMPLICIT SEQUENCE\n   ?28 80  {8       - [EXTERNAL]\n\
    \                   -- the transfer-syntax oid is not present this time\n   ?02\
    \ 01  03       - [INTEGER] this is the pcid for the application\n            \
    \        - data\n   ?A0 La  xxxxx    -- [0] single-ASN.1-type application data\n\
    \                    -- (see note at end of 6.1)\n   ?00 00  }8       - end of\
    \ EXTERNAL\n            -- conceivably there may be several EXTERNALS, probably\
    \ in\n            -- different presentation contexts (different pcids)\n   ?00\
    \ 00  }7       - end of user information field\n   00  00  }6         - end of\
    \ RLRE\n   00  00  }5         - end of single asn.1-type\n   00  00  }4      \
    \   - end of PDV-list\n   00  00  }3         - end of Presentation userdata\n"
- title: 6.7 Deliberate abort
  contents:
  - "6.7 Deliberate abort\n   It is not clear whether this is any use - just clearing\
    \ the Transport\n   connection will be more effective. It goes on T-DATA, but\
    \ asks for\n   the far-side to close the T-connection.\n       - Session ABORT\
    \ SPDU\n   19  Ls  {1      - SI of 25 is ABORT\n   11  01  03      - Transport\
    \ Disconnect PV, code 17\n                   --  value = '...00011'b means please\n\
    \                   -- release T-conn, user abort\n   *   Ls  ?\n   C1  11  {2\
    \      - Session User Data\n       - P-U-ABORT PPDU - ARU\n   A0  80  {3     \
    \ - [0] implicit sequence for normal mode\n   A0  80  {4      - [0] presentation-context-identifier-list\n\
    \   30  80  {5      - [SEQUENCE]\n   02  01  01      - [INTEGER]pcid for ACSE\n\
    \   06  02  5101    - [OID] for acse transfer syntax = BER\n   00  00  }5\n  \
    \          -- there will be one {6} group for each application\n            --\
    \ presentation context that is used in this message\n            -- if there is\
    \ no user data, the {6} group can be\n            -- omitted\n   30  80  {6\n\
    \   02  01  03      - [INTEGER] pcid for application data\n   06  La  xxxxxx \
    \ - [OID] transfer syntax for application data\n   00  00  }6\n   00  00  }4 \
    \     - end of presentation-context-identifier-list\n   61  80  {7      - [APPLICATION\
    \ 1], user data, fully-encoded\n   30  80  {8      - [SEQUENCE] PDV-list\n   02\
    \  01  01      - [INTEGER] pcid for ACSE as on CP PPDU\n   A0  05  {9      - [0]\
    \ single asn.1-type\n       - A-ABORT APDU - ABRT\n   64  80  {10     - [APPLICATION\
    \ 4] identifies ABRT\n   80  01  01      -  [0] value 1 is acse-service-provider\n\
    \            -- the user information field may or may not be required\n   ?BE\
    \ 80  {11      - [30] IMPLICIT SEQUENCE\n   ?28 80  {12      - [EXTERNAL]\n  \
    \                 -- the transfer-syntax oid is not present this time\n      \
    \             -- (according to CULR-1)\n   ?02 01  03       - [INTEGER] this is\
    \ the pcid for the application\n                    - data\n   ?A0 La  xxxxx \
    \   -- [0] single-ASN.1-type application data\n                    -- (see note\
    \ at end of 6.1)\n   ?00 00  }12      - end of EXTERNAL\n            -- conceivably\
    \ there may be several EXTERNALS, probably in\n            -- different presentation\
    \ contexts (different pcids)\n   ?00 00  }11      - end of user information field\n\
    \   00  00  }10     - end of ABRT\n   00  00  }9      - end of single asn.1-type\n\
    \   00  00  }8      - end of PDV-list\n   00  00  }7      - end of Presentation\
    \ user-data\n   00  00  }3      - end of ARU-PPDU\n"
- title: 6.8 Provider abort
  contents:
  - "6.8 Provider abort\n   Generated when an internal error occurs (i.e., something\
    \ has gone\n   mildly (?) wrong in the cookbook implementation). Rather than accuse\n\
    \   anyone of protocol errors, we just abort at session.\n             ABORT SPDU\n\
    \   19  03  {1         - SI=25 = ABORT SPDU\n   11  01  09         - Transport\
    \ Disconnect PV, code 17\n                    -- value = '...01001'b  release\
    \ T-conn\n                    --  no reason\n   *   Ls  ?\n"
- title: 6.9 Abort accept
  contents:
  - "6.9 Abort accept\n   If a Session abort (of any kind) is sent, it is possible\
    \ that the\n   far-end will send back an abort accept. If this happens, disconnect\n\
    \   the transport. (The abort messages above do not propose that the\n   transport\
    \ connection be reused, and in this case, an abort accept is\n   just the far-end\
    \ passing the transport-disconnect initiative back.)\n   This session message\
    \ need never be sent - just disconnect transport\n   on receiving an abort.\n\
    \             ABORT ACCEPT SPDU\n   1A  00  .         - SI=26 = ABORT ACCEPT SPDU,\
    \ no parameters\n"
- title: 7.  References
  contents:
  - "7.  References\n   [CULR-1] ISO/IEC DISP 11188-1 - Information Technology -\n\
    \   International Standardised Profile - Common Upper Layer Requirements\n   -\
    \ Part 1: Basic Connection oriented requirements (DISP ballot ends\n   June 1994).\n\
    \   [CULR-3] Draft of Common Upper-layer requirements - Part 3: Minimal\n   OSI\
    \ upper layers facilities (A later draft will be proposed as ISP\n   11188/3).\n\
    \   [ISO8072] Information processing systems - Open Systems\n   Interconnection\
    \ - Transport service definition; ISO, 1986.\n   [ISO8073] Information processing\
    \ systems - Open Systems\n   Interconnection - Transport protocol specification;\
    \ ISO, 1986.\n   [ISO8326] Information processing systems - Open Systems\n   Interconnection\
    \ - Basic connection oriented session service\n   definition; ISO, 1987 (or review\
    \ copy of revised text = ISO/IEC\n   JTC1/SC21 N4657, April 1990).\n   [ISO8327]\
    \ Information processing systems - Open Systems\n   Interconnection - Basic connection\
    \ oriented session protocol\n   specification; ISO, 1987 (or review copy of revised\
    \ text = ISO/IEC\n   JTC1/SC21 N4656, April 1990).\n   [ISO8649] Information processing\
    \ systems - Open Systems\n   Interconnection - Service definition for the Association\
    \ Control\n   Service Element; ISO, 1989.\n   [ISO8650] Information processing\
    \ systems - Open Systems\n   Interconnection - Protocol specification for the\
    \ Association Control\n   Service Element; ISO, 1989.\n   [ISO8822] Information\
    \ processing systems - Open Systems\n   Interconnection - Connection-oriented\
    \ presentation service\n   definition; ISO, 1989.\n   [ISO8823] Information processing\
    \ systems - Open Systems\n   Interconnection - Connection-oriented presentation\
    \ protocol\n   specification; ISO, 1989.\n   [ISO8824] Information technology\
    \ - Open Systems Interconnection -\n   Specification of Abstract Syntax Notation\
    \ One (ASN.1), ISO/IEC 1990.\n   [ISO8825] Information technology - Open Systems\
    \ Interconnection -\n   Specification of Basic Encoding Rules for Abstract Syntax\
    \ Notation\n   One, ISO/IEC 1990.\n   [RFC1006] Rose, M., and D. Cass, \"ISO Transport\
    \ Services on Top of\n   the TCP\", STD 35, RFC 1006, Northrop Research and Technology\
    \ Center,\n   May 1987.\n   [ISO9594] Information technology - Open Systems Interconnection\
    \ - The\n   Directory; ISO/IEC, 1990.\n   [RFC 1274] Barker, P., and S. Kille,\
    \ \"The COSINE and Internet X.500\n   Schema\", RFC 1274, University College London,\
    \ November 1991.\n"
- title: 8. Other Notes
  contents:
  - "8. Other Notes\n   The Session, Presentation and ACSE standards have been the\
    \ subject of\n   considerable amendment since their first publication. The only\
    \ one\n   that is significant to this cookbook is Session addendum 2, which\n\
    \   specifies session version 2 and unlimited user data. New editions of\n   these\
    \ standards, incorporating all the amendments, will be published\n   during 1994.\n\
    \   The coding choices made in the cookbook are (nearly) those made by\n   the\
    \ \"Canonical Encoding Rules\", which are a form of Basic Encoding\n   Rules with\
    \ no optionality, specified in the new edition of ISO/IEC\n   8825. A defect report\
    \ has been proposed against Presentation and\n   ACSE, suggesting that a note\
    \ to the protocol specifications recommend\n   use of the canonical encoding options\
    \ when sending, and then\n   optimising for this on receipt.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 10.  Author's Address
  contents:
  - "10.  Author's Address\n   Peter Furniss\n   Peter Furniss Consultants\n   58\
    \ Alexandra Crescent\n   Bromley, Kent BR1 4EX\n   UK\n   Phone & Fax +44 81 313\
    \ 1833\n   EMail: P.Furniss@ulcc.ac.uk\n"
