- title: __initial_text__
  contents:
  - ''
- title: The SUPDUP Graphics Extension
  contents:
  - "The SUPDUP Graphics Extension\n   ... extends SUPDUP to permit the display of\
    \ drawings on the screen of\n   the terminal, as well as text.  We refer constantly\
    \ to the\n   documentation of the SUPDUP protocol, described by Crispin in RFC\
    \ 734\n   \"SUPDUP Protocol\".\n   Since this extension has never been implemented,\
    \ it presumably has\n   some problems.  It is being published to ask for suggestions,\
    \ and to\n   encourage someone to try to bring it up.\n"
- title: 'The major accomplishments are these:'
  contents:
  - "The major accomplishments are these:\n   *    It is easy to do simple things.\n\
    \   *    Any program on the server host can at any time begin outputting\n   \
    \     pictures.  No special preparations are needed.\n   *    No additional network\
    \ connections are needed.  Graphics commands\n        go through the normal text\
    \ output connection.\n   *    It has nothing really to do with the network.  It\
    \ is suitable\n        for use with locally connected intelligent display terminals\
    \ in\n        a terminal-independent manner, by programs which need not know\n\
    \        whether they are being used locally or remotely.  It can be used\n  \
    \      as the universal means of expression of graphics output, for\n        whatever\
    \ destination.  Programs can be written to use it for\n        non-network terminals,\
    \ with little loss of convenience, and\n        automatically be usable over the\
    \ ARPA network.\n   *    Loss of output (due, perhaps, to a \"silence\" command\
    \ typed by\n        the user) does not leave the user host confused.\n   *   \
    \ The terminal does not need to be able to remember the internal\n        \"semantic\"\
    \ structure of the picture being displayed, but just\n        the lines and points,\
    \ or even just bits in a bit matrix.\n   *    The server host need not be able\
    \ to invoke arbitrary\n        terminal-dependent software to convert a standard\
    \ language into\n        one that a terminal can use.  Instead, a standard language\
    \ is\n        defined which all programmable terminals can interpret easily.\n\
    \        Major differences between terminals are catered to by\n        conventions\
    \ for including enough redundant information in the\n        output stream that\
    \ all types of terminals will have the\n        necessary information available\
    \ when it is needed, even if they\n"
- title: The SUPDUP Graphics Extension
  contents:
  - "The SUPDUP Graphics Extension\n        are not able to remember it in usable\
    \ form from one command to\n        another.\n"
- title: Those interested in network graphics should read about the Multics
  contents:
  - 'Those interested in network graphics should read about the Multics

    '
- title: Graphics System, whose fundamental purpose is the same, but whose
  contents:
  - 'Graphics System, whose fundamental purpose is the same, but whose

    '
- title: particular assumptions are very different (although it did inspire a few
  contents:
  - 'particular assumptions are very different (although it did inspire a few

    '
- title: of the features of this proposal).
  contents:
  - 'of the features of this proposal).

    '
- title: The SUPDUP Graphics Extension
  contents:
  - 'The SUPDUP Graphics Extension

    '
- title: 'SUPDUP Initial Negotiation:'
  contents:
  - "SUPDUP Initial Negotiation:\n   One new optional variable, the SMARTS variable,\
    \ is defined.  It\n   should follow the other variables sent by the SUPDUP user\
    \ process to\n   the SUPDUP server process.  Bits and fields in the left half-word\
    \ of\n   this variable are given names starting with \"%TQ\".  Bits and fields\n\
    \   in the right half are given names starting with \"%TR\".  Not all of\n   the\
    \ SMARTS variable has to do with the graphics protocol, but most of\n   it does.\
    \  The %TQGRF bit should be 1 if the terminal supports\n   graphics output at\
    \ all.\n"
- title: 'Invoking the Graphics Protocol:'
  contents:
  - "Invoking the Graphics Protocol:\n   Graphics mode is entered by a %TDGRF (octal\
    \ 231) code in the output\n   stream.  Following characters in the range 0 - 177\
    \ are interpreted\n   according to the graphics protocol.  Any character 200 or\
    \ larger (a\n   %TD code) leaves graphics mode, and then has its normal\n   interpretation.\
    \  Thus, if the server forgets that the terminal in\n   graphics mode, the terminal\
    \ will not long remain confused.\n   Once in graphics mode, the output stream\
    \ should contain a sequence of\n   graphics protocol commands, each followed by\
    \ its arguments.  A zero\n   as a command is a no-op.  To leave graphics mode\
    \ deliberately, it is\n   best to use a %TDNOP.\n"
- title: The SUPDUP Graphics Extension
  contents:
  - 'The SUPDUP Graphics Extension

    '
- title: 'Co-ordinates:'
  contents:
  - "Co-ordinates:\n   Graphics mode uses a cursor position which is remembered from\
    \ one\n   graphics command to the next while in graphics mode.  The graphics\n\
    \   mode cursor is not the same one used by normal type-out:  Graphics\n   protocol\
    \ commands have no effect on the normal type-out cursor, and\n   normal type-out\
    \ has no effect on the graphics mode cursor.  In\n   addition, the graphics cursor's\
    \ position is measured in dots rather\n   than in characters.  The relationship\
    \ between the two units (dots,\n   and characters) is recorded by the %TQHGT and\
    \ %TQWID fields of the\n   SMARTS variable of the terminal, which contain the\
    \ height and width\n   in dots of the box occupied by a character.  The size of\
    \ the screen\n   in either dimension is assumed to be the length of a character\
    \ box\n   times the number of characters in that direction on the screen.  If\n\
    \   the screen is actually bigger than that, the excess is may or may not\n  \
    \ be part of the visible area; the program will not know that it\n   exists, in\
    \ any case.\n   Each co-ordinate of the cursor position is a 14-bit signed number,\n\
    \   where zero is at the center of the screen (if the screen dimension is\n  \
    \ an even number of dots, then the visible negative points extend one\n   unit\
    \ farther that the positive ones, in proper two's complement\n   fashion).  Excessively\
    \ large values of the co-ordinates will be off\n   the screen, but are still meaningful.\n\
    \   An alternate mode is defined, which some terminals may support, in\n   which\
    \ virtual co-ordinates are used.  The specified co-ordinates are\n   still 14-bit\
    \ signed numbers, but instead of being in units of\n   physical dots on the terminal,\
    \ it is assumed that +4000 octal is the\n   top of the screen or the right edge,\
    \ while -4000 octal is the bottom\n   of the screen or the left edge.  The terminal\
    \ is responsible for\n   scaling these virtual co-ordinates into units of screen\
    \ dots.  Not\n   all terminals need have this capability; the %TQVIR bit in the\
    \ SMARTS\n   variable indicates that it exists.  To use virtual co-ordinates,\
    \ the\n   server should send a %GOVIR; to use physical co-ordinates again, it\n\
    \   should send a %GOPHY.  These should be repeated at intervals, such as\n  \
    \ when graphics mode is entered, even though the terminal must attempt\n   to\
    \ remember the state of the switch anyway.  This repetition is so\n   that a loss\
    \ of some output will not cause unbounded confusion.\n   The virtual co-ordinates\
    \ are based on a square.  If the visible area\n   on the terminal is not a square,\
    \ then the standard virtual range\n   should correspond to a square around the\
    \ center of the screen, and\n   the rest of the visible area should correspond\
    \ to virtual\n   co-ordinates just beyond the normally visible range.\n   Graphics\
    \ protocol commands take two types of cursor position\n   arguments, absolute\
    \ ones and relative ones.  Commands that take\n   address arguments generally\
    \ have two forms, one for each type of\n"
- title: The SUPDUP Graphics Extension
  contents:
  - "The SUPDUP Graphics Extension\n   address.  A relative address consists of two\
    \ offsets, delta-X and\n   delta-Y, from the old cursor position.  Each offset\
    \ is a 7-bit two's\n   complement number occupying one character.  An absolute\
    \ address\n   consists of two co-ordinates, each 14 bits long, occupying two\n\
    \   characters, each of which conveys 7 bits.  The X co-ordinate or\n   offset\
    \ precedes the Y.  Both types of address set the running cursor\n   position which\
    \ will be used by the next address, if it is relative.\n   It is perfectly legitimate\
    \ for parts of objects to go off the screen.\n   What happens to them is not terribly\
    \ important, as long as it is not\n   disastrous, does not interfere with the\
    \ reckoning of the cursor\n   position, and does not cause later objects, drawn\
    \ after the cursor\n   moves back onto the screen, to be misdrawn.\n   Whether\
    \ a particular spot on the screen is specified with an absolute\n   or a relative\
    \ address is of no consequence.  The sequence in which\n   they are drawn is of\
    \ no consequence.  Each object is independent of\n   all others, and exists at\
    \ the place which was specified, in one way\n   or other, by the command that\
    \ created it.  Relative addresses are\n   provided for the sake of data compression.\
    \  They are not an attempt\n   to spare programs the need for the meagre intelligence\
    \ required to\n   convert between absolute and relative addresses; more intelligence\n\
    \   than that will surely be required for other aspects of the graphics\n   protocol.\
    \  Nor are relative addresses intended to cause several\n   objects to relocate\
    \ together if one is \"moved\" or erased.  Terminals\n   are not expected to remember\
    \ any relation between objects once they\n   are drawn.  Most will not be able\
    \ to.\n   Although the cursor position on entry to graphics mode remains set\n\
    \   from the last exit, it is wise to reinitialize it with a %GOMVA\n   command\
    \ before any long transfer, to limit the effects of lost\n   output.\n"
- title: The SUPDUP Graphics Extension
  contents:
  - 'The SUPDUP Graphics Extension

    '
- title: 'Commands:'
  contents:
  - "Commands:\n   Commands to draw an object always have counterparts which erase\
    \ the\n   same object.  On a bit matrix terminal, erasure and drawing are\n  \
    \ almost identical operations.  On a display list terminal, erasure\n   involves\
    \ searching the display list for an object with the specified\n   characteristics\
    \ and deleting it from the list.  It is assumed that\n   any terminal whose %TOERS\
    \ bit is set can erase graphic objects.\n   The commands to draw objects run from\
    \ 100 to 137, while those to\n   erase run in a parallel sequence from 140 to\
    \ 177.  Other sorts of\n   operations have command codes below 100.  Meanwhile,\
    \ the 20 bit in\n   the command code says which type of addresses are used as\
    \ arguments:\n   if the 20 bit is set, absolute addresses are used.  Graphics\
    \ commands\n   are given names starting with \"%GO\".\n   Graphics often uses\
    \ characters.  The %GODCH command is followed by a\n   string of characters to\
    \ be output, terminated by a zero.  The\n   characters must be single-position\
    \ printing characters.  On most\n   terminals, this limits them to ASCII graphic\
    \ characters.  Terminals\n   with %TOSAI set in the TTYOPT variable allow all\
    \ characters 0-177.\n   The characters are output at the current graphics cursor\
    \ position\n   (the lower left hand corner of the first character's rectangle\
    \ being\n   placed there), which is moved as the characters are drawn.  The\n\
    \   normal type-out cursor is not relevant and its position is not\n   changed.\
    \  The cursor position at which the characters are drawn may\n   be in between\
    \ the lines and columns used for normal type-out.  The\n   %GOECH command is similar\
    \ to %GODCH but erases the characters\n   specified in it.  To clear out a row\
    \ of character positions on a bit\n   matrix terminal without having to respecify\
    \ the text, a rectangle\n   command may be used.\n   Example:\n      The way to\
    \ send a simple line drawing is this:\n         %TDRST                 ;Reset\
    \ all graphics modes.\n         %TDGRF                 ;Enter graphics.\n    \
    \     %GOCLR                 ;Clear the screen.\n         %GOMVA xx yy       \
    \    ;Set cursor.\n         %GODLA xx yy           ;Draw line from there.\n  \
    \       << repeat last two commands for each line >>\n         %TDNOP        \
    \         ;Exit graphics.\n"
- title: The SUPDUP Graphics Extension
  contents:
  - 'The SUPDUP Graphics Extension

    '
- title: 'Graphics Input:'
  contents:
  - "Graphics Input:\n   The %TRGIN bit in the right half of the SMARTS variable indicates\n\
    \   that the terminal can supply a graphic input in the form of a cursor\n   position\
    \ on request.  Sending a %GOGIN command to the terminal asks\n   to read the cursor\
    \ position.  It should be followed by an argument\n   character that will be included\
    \ in the reply, and serve to associate\n   the reply with the particular request\
    \ for input that elicited it.\n   The reply should have the form of a Top-Y character\
    \ (code 4131),\n   followed by the reply code character as just described, followed\
    \ by\n   an absolute cursor position.  Since Top-Y is not normally meaningful\n\
    \   as input, %GOGIN replies can be distinguished reliably from keyboard\n   input.\
    \ Unsolicited graphic input should be sent using a Top-X instead\n   of a Top-Y,\
    \ so that the program can distinguish them.  Instead of a\n   reply code, for\
    \ which there is no need, the terminal should send an\n   encoding of the buttons\
    \ pressed by the user on his input device, if\n   it has more than one.\n"
- title: 'Sets:'
  contents:
  - "Sets:\n   Terminals may define the concept of a \"set\" of objects.  There are\
    \ up\n   to 200 different sets, each of which can contain arbitrarily many\n \
    \  objects.  At any time, one set is selected; objects drawn become part\n   of\
    \ that set, and objects erased are removed from it.  Objects in a\n   set other\
    \ than the selected one cannot be erased without switching to\n   the sets that\
    \ contain them.  A set can be made temporarily invisible,\n   as a whole, without\
    \ being erased or its contents forgotten; and it\n   can then be made instantly\
    \ visible again.  Also, a whole set can be\n   moved.  A set has at all times\
    \ a point identified as its \"center\",\n   and all objects in it are actually\
    \ remembered relative to that\n   center, which can be moved arbitrarily, thus\
    \ moving all the objects\n   in the set at once.  Before beginning to use a set,\
    \ therefore, one\n   should \"move\" its center to some absolute location.  Set\
    \ center\n   motion can easily cause objects in the set to move off screen.  When\n\
    \   this happens, it does not matter what happens temporarily to those\n   objects,\
    \ but their \"positions\" must not be forgotten, so that undoing\n   the set center\
    \ motion will restore them to visibility in their\n   previous positions.  Sets\
    \ are not easily implemented on bit matrix\n   terminals, which should therefore\
    \ ignore all set operations (except,\n   for a degenerate interpretation in connection\
    \ with blinking, if that\n   is implemented).  The %TQSET bit in the SMARTS variable\
    \ of the\n   terminal indicates that the terminal implements multiple sets of\n\
    \   objects.\n   On a terminal which supports multiple sets, the %GOCLR command\
    \ should\n   empty all sets and mark all sets \"visible\" (perform a %GOVIS on\
    \ each\n   one).  So should a %TDCLR SUPDUP command.  Thus, any program which\n\
    \   starts by clearing the screen will not have to worry about\n   initializing\
    \ the states of all sets.\n"
- title: The SUPDUP Graphics Extension
  contents:
  - 'The SUPDUP Graphics Extension

    '
- title: 'Blinking:'
  contents:
  - "Blinking:\n   Some terminals have the ability to blink objects on the screen.\
    \ The\n   command %GOBNK meaning make the current set blink.  All objects in it\n\
    \   already begin blinking, and any new objects also blink.  %GOVIS or\n   %TOINV\
    \ cancels the effect of a %GOBNK, making the objects of the set\n   permanently\
    \ visible or invisible.  %TQBNK indicates that the terminal\n   supports blinking\
    \ on the screen.\n   However, there is a problem:  some intelligent bit matrix\
    \ terminals\n   may be able to implement blinking a few objects, if they are told\
    \ in\n   advance, before the objects are drawn.  They will be unable to\n   support\
    \ arbitrary use of %GOBNK, however.\n   The solution to the problem is a convention\
    \ for the use of %TOBNK\n   which, together with degenerate definitions for set\
    \ operations, makes\n   it possible to give commands which reliably work on any\
    \ terminal\n   which supports blinking.\n   On a terminal which sets %TQBNK but\
    \ not %TQSET, %GOBNK is defined to\n   cause objects which are drawn after it\
    \ to be drawn blinking. %GOSET\n   cancels this, so following objects will be\
    \ drawn unblinking. This is\n   regardless of the argument to the %GOSET.\n  \
    \ Thus, the way for a program to work on all terminals with %TQBNK,\n   whether\
    \ they know about sets or not, is:  to write a bliniking\n   picture, select some\
    \ set other than your normal one (set 1 will do),\n   do %GOBNK, output the picture,\
    \ and reselect set 0.  The picture will\n   blink, while you draw things in set\
    \ 0.  To draw more blinking\n   objects, you must reselect set 1 and do another\
    \ %GOBNK.  Simply\n   reselecting set 1 will not work on terminals which don't\
    \ really\n   support sets, since they don't remember that the blinking objects\
    \ are\n   \"in set 1\" and not \"in set 0\".\n   Erasing a blinking object should\
    \ make it disappear, on any terminal\n   which implements blinking.  On bit matrix\
    \ terminals, blinking MUST\n   always be done by XORing, so that the non-blinking\
    \ background is not\n   destroyed.\n   %GOCLS, on a terminal which supports blinking\
    \ but not sets, should\n   delete all blinking objects.  Then, the convention\
    \ for deleting all\n   blinking objects is to select set 1, do a %GOCLS, and reselect\
    \ set 0.\n   This has the desired effect on all terminals.  This definition of\n\
    \   %GOCLS causes no trouble on non-set terminals, since %GOCLS would\n   otherwise\
    \ be meaningless to them.\n   To make blinking objects stop blinking but remain\
    \ visible is possible\n   with a %GOVIS on a terminal which supports sets.  But\
    \ in general the\n   only way to do it is to delete them and redraw them as permanent.\n"
- title: The SUPDUP Graphics Extension
  contents:
  - 'The SUPDUP Graphics Extension

    '
- title: Rectangles and XOR
  contents:
  - "Rectangles and XOR\n   Bit matrix terminals have their own operations that display\
    \ list\n   terminals cannot duplicate.  First of all, they have XOR mode, in\n\
    \   which objects drawn cancel existing objects when they overlap.  In\n   this\
    \ mode, drawing an object and erasing it are identical operations.\n   All %GOD..\
    \ commands act IDENTICALLY to the corresponding %GOE..'s.\n   XOR mode is entered\
    \ with a %GOXOR and left with a %GOIOR.  Display\n   list terminals will ignore\
    \ both commands.  For that reason, the\n   program should continue to distinguish\
    \ draw commands from erase\n   commands even in XOR mode.  %TQXOR indicates a\
    \ terminal which\n   implements XOR mode.  XOR mode, when set, remains set even\
    \ if\n   graphics mode is left and re-entered.  However, it is wise to\n   re-specify\
    \ it from time to time, in case output is lost.\n   Bit matrix terminals can also\
    \ draw solid rectangles.  They can thus\n   implement the commands %GODRR, %GODRA,\
    \ %GOERR, and %GOERA.  A\n   rectangle is specified by taking the current cursor\
    \ position to be\n   one corner, and providing the address of the opposite corner.\
    \  That\n   can be done with either a relative address or an absolute one.  The\n\
    \   %TQREC bit indicates that the terminal implements rectangle commands.\n  \
    \ Of course, a sufficiently intelligent bit matrix terminal can provide\n   all\
    \ the features of a display list terminal by remembering display\n   lists which\
    \ are redundant with the bit matrix, and using them to\n   update the matrix when\
    \ a %GOMSR or %GOVIS is done.  However, most bit\n   matrix terminals are not\
    \ expected to go to such lengths.\n"
- title: The SUPDUP Graphics Extension
  contents:
  - 'The SUPDUP Graphics Extension

    '
- title: How Several Process Can Draw On One Terminal Without Interfering With
  contents:
  - 'How Several Process Can Draw On One Terminal Without Interfering With

    '
- title: 'Each Other:'
  contents:
  - "Each Other:\n   If we define \"input-stream state\" information to be whatever\n\
    \   information which can affect the action of any command, other than\n   what\
    \ is contained in the command, then each of the several processes\n   must have\
    \ its own set of input-stream state variables.\n   This is accomplished by providing\
    \ the %GOPSH command.  The %GOPSH\n   command saves all such input-stream information,\
    \ to be restored when\n   graphics mode is exited.  If the processes can arrange\
    \ to output\n   blocks of characters uninterruptibly, they can begin each block\
    \ with\n   a %GOPSH followed by commands to initialize the input-stream state\n\
    \   information as they desire.  Each block of graphics output should be\n   ended\
    \ by a %TDNOP, leaving the terminal in its \"normal\" state for all\n   the other\
    \ processes, and at the same time popping the what the %GOPSH\n   pushed.\n  \
    \    The input-stream state information consists of:\n         The cursor position\n\
    \         the state of XOR mode (default is OFF)\n         the selected set (default\
    \ is 0)\n         the co-ordinate unit in use (physical dots, or virtual)\n  \
    \          (default is physical)\n         whether output is going to the display\
    \ screen or to a hardcopy\n            device (default is to the screen)\n   \
    \      what portion of the screen is in use\n            (see \"Using Only Part\
    \ of the Screen\")\n            (default is all)\n   Each unit of input-stream\
    \ status has a default value for the sake of\n   programs that do not know that\
    \ the information exists; the exception\n   is the cursor position, since all\
    \ programs must know that it exists.\n   A %TDINI or %TDRST command should set\
    \ all of the variables to their\n   default values.\n   The state of the current\
    \ set (whether it is visible, and where its\n   center is) is not part of the\
    \ input-stream state information, since\n   it would be hard to say what it would\
    \ mean if it were.  Besides, the\n   current set number is part of the input-stream\
    \ state information, so\n   different processes can use different sets.  The allocation\
    \ of sets\n   to processes is the server host's own business.\n"
- title: The SUPDUP Graphics Extension
  contents:
  - 'The SUPDUP Graphics Extension

    '
- title: 'Using Only Part of the Screen:'
  contents:
  - "Using Only Part of the Screen:\n   It is sometimes desirable to use part of the\
    \ screen for picture and\n   part for text.  Then one may wish to clear the picture\
    \ without\n   clearing the text.  On display list terminals, %GOCLR should do\
    \ this.\n   On bit matrix terminals, however, %GOCLR can't tell which bits were\n\
    \   set by graphics and which by text display.  For their sake, the\n   %GOLMT\
    \ command is provided.  This command takes two cursor positions\n   as arguments,\
    \ specifying a rectangle.  It declares that graphics will\n   be limited to that\
    \ rectangle, so %GOCLR should clear only that part\n   of the screen.  %GOLMT\
    \ need not do anything on a terminal which can\n   remember graphics output as\
    \ distinct from text output and clear the\n   former selectively, although it\
    \ would be a desirable feature to\n   process it even on those terminals.\n  \
    \ %GOLMT can be used to enable one of several processes which divide up\n   the\
    \ screen among themselves to clear only the picture that it has\n   drawn, on\
    \ a bit matrix terminal.  By using both %GOLMT and distinct\n   sets, it is possible\
    \ to deal successfully with almost any terminal,\n   since bit matrix terminals\
    \ will implement %GOLMT and display list\n   terminals almost always implement\
    \ sets.\n   The %TDCLR command should clear the whole screen, including graphics\n\
    \   output, ignoring %GOLMT.\n"
- title: 'Errors:'
  contents:
  - "Errors:\n   In general, errors in graphics commands should be ignored.\n   Since\
    \ the output and input streams are not synchronized unless\n   trouble is taken,\
    \ there is no simple way to report an error well\n   enough for the program that\
    \ caused it to identify just which command\n   was invalid.  So it is better not\
    \ to try.\n   Errors which are not the fault of any individual command, such as\n\
    \   running out of memory for display lists, should also be ignored as\n   much\
    \ as possible.  This does NOT mean completely ignoring the\n   commands that cannot\
    \ be followed; it means following them as much as\n   possible: moving the cursor,\
    \ selecting sets, etc. as they specify, so\n   that any subsequent commands which\
    \ can be executed are executed as\n   intended.\n"
- title: The SUPDUP Graphics Extension
  contents:
  - 'The SUPDUP Graphics Extension

    '
- title: 'Extensions:'
  contents:
  - "Extensions:\n   This protocol does not attempt to specify commands for dealing\
    \ with\n   every imaginable feature which a picture-drawing device can have.\n\
    \   Additional features should be left until they are needed and well\n   understood,\
    \ so that they can be done right.\n"
- title: 'Storage of Graphics Commands in Files:'
  contents:
  - "Storage of Graphics Commands in Files:\n   This can certainly be done.  Since\
    \ graphics commands are composed\n   exclusively of the ASCII characters 0 - 177,\
    \ any file that can hold\n   ASCII text can hold the commands to draw a picture.\
    \  This is less\n   useful than you might think, however.  Any program for editing,\
    \ in\n   whatever loose sense, a picture, will have its own internal data\n  \
    \ which determine the relationships between the objects depicted, and\n   control\
    \ the interpretation of the programs commands, and this data\n   will all be lost\
    \ in the SUPDUP graphics commands for displaying the\n   picture. Thus, each such\
    \ program will need to have its own format for\n   storing pictures in files,\
    \ suitable for that program's internal data\n   structure.  Inclusion of actual\
    \ graphics commands in a file will be\n   useful only when the sole purpose of\
    \ the file is to be displayed.\n"
- title: The SUPDUP Graphics Extension
  contents:
  - 'The SUPDUP Graphics Extension

    '
- title: 'Note: the values of these commands are represented as 8.-bit octal'
  contents:
  - 'Note: the values of these commands are represented as 8.-bit octal

    '
- title: bytes.  Arguments to the commands are in lower case inside angle
  contents:
  - 'bytes.  Arguments to the commands are in lower case inside angle

    '
- title: brackets.
  contents:
  - 'brackets.

    '
- title: 'The Draw commands are:'
  contents:
  - 'The Draw commands are:

    '
- title: Value   Name   Arguments
  contents:
  - 'Value   Name   Arguments

    '
- title: 101     %GODLR <p>
  contents:
  - "101     %GODLR <p>\n                Draw line relative, from the cursor to <p>.\n"
- title: 102     %GODPR <p>
  contents:
  - "102     %GODPR <p>\n                Draw point relative, at <p>.\n"
- title: 103     %GODRR <p>
  contents:
  - "103     %GODRR <p>\n                Draw rectangle relative, corners at <p> and\
    \ at the\n                current cursor position.\n"
- title: 104     %GODCH <string> <0>
  contents:
  - "104     %GODCH <string> <0>\n                Display the chars of <string> starting\
    \ at the current\n                graphics cursor position.\n"
- title: 121     %GODLA <p>
  contents:
  - "121     %GODLA <p>\n                Draw line absolute, from the cursor to <p>.\
    \ The same\n                effect as %GODLR, but the arg is an absolute address.\n"
- title: 122     %GODPA <p>
  contents:
  - "122     %GODPA <p>\n                Draw point absolute, at <p>.\n"
- title: 123     %GODRA <p>
  contents:
  - "123     %GODRA <p>\n                Draw rectangle absolute, corners at <p> and\
    \ at the\n                current cursor position.\n"
- title: 'The Erase commands are:'
  contents:
  - 'The Erase commands are:

    '
- title: Value   Name   Arguments
  contents:
  - 'Value   Name   Arguments

    '
- title: 141     %GOELR <p>
  contents:
  - "141     %GOELR <p>\n                Erase line relative, from the cursor to <p>.\n"
- title: 142     %GOEPR <p>
  contents:
  - "142     %GOEPR <p>\n                Erase point relative, at <p>.\n"
- title: 143     %GOERR <p>
  contents:
  - "143     %GOERR <p>\n                Erase rectangle relative, corners at <p>\
    \ and at the\n                current cursor position.\n"
- title: 144     %GOECH <string> <0>
  contents:
  - "144     %GOECH <string> <0>\n                Erase the chars of <string> starting\
    \ at the current\n                graphics cursor position.\n"
- title: 161     %GOELA <p>
  contents:
  - "161     %GOELA <p>\n                Erase line absolute, from the cursor to <p>.\n"
- title: 162     %GOEPA <p>
  contents:
  - "162     %GOEPA <p>\n                Erase point absolute, at <p>.\n"
- title: 163     %GOERA <p>
  contents:
  - "163     %GOERA <p>\n                Erase rectangle absolute, corners at <p>\
    \ and at the\n                current cursor position.\n"
- title: The SUPDUP Graphics Extension
  contents:
  - 'The SUPDUP Graphics Extension

    '
- title: 'The miscellaneous commands are:'
  contents:
  - 'The miscellaneous commands are:

    '
- title: Value   Name   Arguments
  contents:
  - 'Value   Name   Arguments

    '
- title: 001     %GOMVR <p>
  contents:
  - "001     %GOMVR <p>\n                Move cursor to point <p>\n"
- title: 021     %GOMVA <p>
  contents:
  - "021     %GOMVA <p>\n                Move cursor to point <p>, absolute address.\n"
- title: 002     %GOXOR
  contents:
  - "002     %GOXOR\n                Turn on XOR mode.  Bit matrix terminals only.\n"
- title: 022     %GOIOR
  contents:
  - "022     %GOIOR\n                Turn off XOR mode.\n"
- title: 003     %GOSET <n>
  contents:
  - "003     %GOSET <n>\n                Select set.  <n> is a 1-character set number,\
    \ 0 - 177.\n"
- title: 004     %GOMSR <p>
  contents:
  - "004     %GOMSR <p>\n                Move set origin to <p>.  Display list terminals\
    \ only.\n"
- title: 024     %GOMSA <p>
  contents:
  - "024     %GOMSA <p>\n                Move set origin to <p>, absolute address.\n"
- title: 006     %GOINV
  contents:
  - "006     %GOINV\n                Make current set invisible.\n"
- title: 026     %GOVIS
  contents:
  - "026     %GOVIS\n                Make current set visible.\n"
- title: 007     %GOBNK
  contents:
  - "007     %GOBNK\n                Make current set blink.  Canceled by %GOINV or\
    \ %GOVIS.\n"
- title: 010     %GOCLR
  contents:
  - "010     %GOCLR\n                Erase whole screen.\n"
- title: 030     %GOCLS
  contents:
  - "030     %GOCLS\n                Erase entire current set (display list terminals).\n"
- title: 011     %GOPSH
  contents:
  - "011     %GOPSH\n                Push all input-stream status information, to\
    \ be restored\n                when graphics mode is exited.\n"
- title: 012     %GOVIR
  contents:
  - "012     %GOVIR\n                Start using virtual co-ordinates\n"
- title: 032     %GOPHY
  contents:
  - "032     %GOPHY\n                Resume giving co-ordinates in units of dots.\n"
- title: 013     %GOHRD <n>
  contents:
  - "013     %GOHRD <n>\n                Divert output to output subdevice <n>. <n>=0\
    \ reselects\n                the main display screen.\n"
- title: 014     %GOGIN <n>
  contents:
  - "014     %GOGIN <n>\n                Request graphics input (mouse, tablet, etc).\
    \ <n> is the\n                reply code to include in the answer.\n"
- title: 015     %GOLMT <p1> <p2>
  contents:
  - "015     %GOLMT <p1> <p2>\n                Limits graphics to a subrectangle of\
    \ the screen. %GOCLR\n                will clear only that area.  This is for\
    \ those who would\n                use the rest for text.\n"
- title: The SUPDUP Graphics Extension
  contents:
  - 'The SUPDUP Graphics Extension

    '
- title: 'Bits in the SMARTS Variable Related to Graphics:'
  contents:
  - 'Bits in the SMARTS Variable Related to Graphics:

    '
- title: 'Note: the values of these bits are represented as octal 36.-bit words,'
  contents:
  - 'Note: the values of these bits are represented as octal 36.-bit words,

    '
- title: with the left and right 18.-bit halfword separated by two commas as in
  contents:
  - 'with the left and right 18.-bit halfword separated by two commas as in

    '
- title: the normal PDP-10 convention.
  contents:
  - 'the normal PDP-10 convention.

    '
- title: Name    Value      Description
  contents:
  - 'Name    Value      Description

    '
- title: '%TQGRF  000001,,0  terminal understands graphics protocol.'
  contents:
  - '%TQGRF  000001,,0  terminal understands graphics protocol.

    '
- title: '%TQSET  000002,,0  terminal supports multiple sets.'
  contents:
  - '%TQSET  000002,,0  terminal supports multiple sets.

    '
- title: '%TQREC  000004,,0  terminal implements rectangle commands.'
  contents:
  - '%TQREC  000004,,0  terminal implements rectangle commands.

    '
- title: '%TQXOR  000010,,0  terminal implements XOR mode.'
  contents:
  - '%TQXOR  000010,,0  terminal implements XOR mode.

    '
- title: '%TQBNK  000020,,0  terminal implements blinking.'
  contents:
  - '%TQBNK  000020,,0  terminal implements blinking.

    '
- title: '%TQVIR  000040,,0  terminal implements virtual co-ordinates.'
  contents:
  - '%TQVIR  000040,,0  terminal implements virtual co-ordinates.

    '
- title: '%TQWID  001700,,0  character width, in dots.'
  contents:
  - '%TQWID  001700,,0  character width, in dots.

    '
- title: '%TQHGT  076000,,0  character height, in dots.'
  contents:
  - '%TQHGT  076000,,0  character height, in dots.

    '
- title: '%TRGIN  0,,400000  terminal can provide graphics input.'
  contents:
  - '%TRGIN  0,,400000  terminal can provide graphics input.

    '
- title: '%TRGHC  0,,200000  terminal has a hard-copy device to which output can'
  contents:
  - "%TRGHC  0,,200000  terminal has a hard-copy device to which output can\n    \
    \               be diverted.\n"
