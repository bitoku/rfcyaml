- title: __initial_text__
  contents:
  - "           Privacy Enhancement for Internet Electronic Mail:\n             Part\
    \ III -- Algorithms, Modes, and Identifiers\n"
- title: STATUS OF THIS MEMO
  contents:
  - "STATUS OF THIS MEMO\n   This RFC suggests a draft standard elective protocol\
    \ for the Internet\n   community, and requests discussion and suggestions for\
    \ improvement.\n   This RFC provides definitions, references, and citations for\n\
    \   algorithms, usage modes, and associated identifiers used in RFC-1113\n   and\
    \ RFC-1114 in support of privacy-enhanced electronic mail.\n   Distribution of\
    \ this memo is unlimited.\n"
- title: ACKNOWLEDGMENT
  contents:
  - "ACKNOWLEDGMENT\n   This RFC is the outgrowth of a series of IAB Privacy Task\
    \ Force\n   meetings and of internal working papers distributed for those\n  \
    \ meetings.  I would like to thank the following Privacy Task Force\n   members\
    \ and meeting guests for their comments and contributions at\n   the meetings\
    \ which led to the preparation of this RFC: David\n   Balenson, Curt Barker, Jim\
    \ Bidzos, Matt Bishop, Morrie Gasser, Russ\n   Housley, Steve Kent (chairman),\
    \ Dan Nessett, Mike Padlipsky, Rob\n   Shirey, and Steve Wilbur.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Executive Summary                                 \
    \            2\n   2.  Symmetric Encryption Algorithms and Modes             \
    \        2\n   2.1.  DES Modes                                               \
    \    2\n   2.1.1.  DES in ECB mode (DES-ECB)                                 2\n\
    \   2.1.2.  DES in EDE mode (DES-EDE)                                 2\n   2.1.3.\
    \  DES in CBC mode (DES-CBC)                                 3\n   3.  Asymmetric\
    \ Encryption Algorithms and Modes                    3\n   3.1.  RSA         \
    \                                                3\n   4.  Integrity Check Algorithms\
    \                                    3\n   4.1.  Message Authentication Code (MAC)\
    \                           4\n   4.2.  RSA-MD2 Message Digest Algorithm     \
    \                       4\n   4.2.1.  Discussion                             \
    \                   4\n   4.2.2.  Reference Implementation                   \
    \               5\n   NOTES                                                  \
    \           7\n"
- title: 1.  Executive Summary
  contents:
  - "1.  Executive Summary\n   This RFC provides definitions, references, and citations\
    \ for algorithms,\n   usage modes, and associated identifiers used in RFC-1113\
    \ and RFC-1114\n   in support of privacy-enhanced electronic mail in the Internet\n\
    \   community.  As some parts of this material are cited by both RFC-1113\n  \
    \ and RFC-1114, and as it is anticipated that some of the definitions\n   herein\
    \ may be changed, added, or replaced without affecting the citing\n   RFCs, algorithm-specific\
    \ material has been placed into this separate\n   RFC.  The text is organized\
    \ into three primary sections; dealing with\n   symmetric encryption algorithms,\
    \ asymmetric encryption algorithms, and\n   integrity check algorithms.\n"
- title: 2.  Symmetric Encryption Algorithms and Modes
  contents:
  - "2.  Symmetric Encryption Algorithms and Modes\n   This section identifies alternative\
    \ symmetric encryption algorithms\n   and modes which may be used to encrypt DEKs,\
    \ MICs, and message text,\n   and assigns them character string identifiers to\
    \ be incorporated in\n   encapsulated header fields to indicate the choice of\
    \ algorithm\n   employed.  (Note: all alternatives presently defined in this category\n\
    \   correspond to different usage modes of the DEA-1 (DES) algorithm,\n   rather\
    \ than to other algorithms per se.)\n"
- title: 2.1.  DES Modes
  contents:
  - "2.1.  DES Modes\n   The Block Cipher Algorithm DEA-1, defined in ANSI X3.92-1981\
    \ [3] may\n   be used for message text, DEKs, and MICs.  The DEA-1 is equivalent\
    \ to\n   the Data Encryption Standard (DES), as defined in FIPS PUB 46 [4].\n\
    \   The ECB and CBC modes of operation of DEA-1 are defined in ISO IS 8372\n \
    \  [5].\n"
- title: 2.1.1.  DES in ECB mode (DES-ECB)
  contents:
  - "2.1.1.  DES in ECB mode (DES-ECB)\n   The string \"DES-ECB\" indicates use of\
    \ the DES algorithm in Electronic\n   Codebook (ECB) mode.  This algorithm/mode\
    \ combination is used for DEK\n   and MIC encryption.\n"
- title: 2.1.2.  DES in EDE mode (DES-EDE)
  contents:
  - "2.1.2.  DES in EDE mode (DES-EDE)\n   The string \"DES-EDE\" indicates use of\
    \ the DES algorithm in\n   Encrypt-Decrypt-Encrypt (EDE) mode as defined by ANSI\
    \ X9.17 [2] for\n   key encryption and decryption with pairs of 64-bit keys. \
    \ This\n   algorithm/mode combination is used for DEK and MIC encryption.\n"
- title: 2.1.3.  DES in CBC mode (DES-CBC)
  contents:
  - "2.1.3.  DES in CBC mode (DES-CBC)\n   The string \"DES-CBC\" indicates use of\
    \ the DES algorithm in Cipher\n   Block Chaining (CBC) mode.  This algorithm/mode\
    \ combination is used\n   for message text encryption only.  The CBC mode definition\
    \ in IS 8372\n   is equivalent to that provided in FIPS PUB 81 [6] and in ANSI\
    \ X3.106-\n   1983 [7].\n"
- title: 3.  Asymmetric Encryption Algorithms and Modes
  contents:
  - "3.  Asymmetric Encryption Algorithms and Modes\n   This section identifies alternative\
    \ asymmetric encryption algorithms and\n   modes which may be used to encrypt\
    \ DEKs and MICs, and assigns them\n   character string identifiers to be incorporated\
    \ in encapsulated\n   header fields to indicate the choice of algorithm employed.\
    \  (Note:\n   only one alternative is presently defined in this category.)\n"
- title: 3.1.  RSA
  contents:
  - "3.1.  RSA\n   The string \"RSA\" indicates use of the RSA public-key encryption\n\
    \   algorithm, as described in [8].  This algorithm is used for DEK and\n   MIC\
    \ encryption, in the following fashion: the product n of a\n   individual's selected\
    \ primes p and q is used as the modulus for the\n   RSA encryption algorithm,\
    \ comprising, for our purposes, the\n   individual's public key.  A recipient's\
    \ public key is used in\n   conjunction with an associated public exponent (either\
    \ 3 or 1+2**16)\n   as identified in the recipient's certificate.\n   When a MIC\
    \ must be padded for RSA encryption, the MIC will be\n   right-justified and padded\
    \ on the left with zeroes.  This is also\n   appropriate for padding of DEKs on\
    \ singly-addressed messages, and for\n   padding of DEKs on multi-addressed messages\
    \ if and only if an exponent\n   of 3 is used for no more than one recipient.\
    \  On multi-addressed\n   messages in which an exponent of 3 is used for more\
    \ than one recipient,\n   it is recommended that a separate 64-bit pseudorandom\
    \ quantity be\n   generated for each recipient, in the same manner in which IVs\
    \ are\n   generated.  (Reference [9] discusses the rationale for this\n   recommendation.)\
    \  At least one copy of the pseudorandom quantity should\n   be included in the\
    \ input to RSA encryption, placed to the left of the\n   DEK.\n"
- title: 4.  Integrity Check Algorithms
  contents:
  - "4.  Integrity Check Algorithms\n   This section identifies the alternative algorithms\
    \ which may be used\n   to compute Message Integrity Check (MIC) and Certificate\
    \ Integrity\n   Check (CIC) values, and assigns the algorithms character string\n\
    \   identifiers for use in encapsulated header fields and within\n   certificates\
    \ to indicate the choice of algorithm employed.\n   MIC algorithms which utilize\
    \ DEA-1 cryptography are computed using a key\n   which is a variant of the DEK\
    \ used for message text encryption.  The\n   variant is formed by modulo-2 addition\
    \ of the hexadecimal quantity\n   F0F0F0F0F0F0F0F0 to the encryption DEK.\n  \
    \ For compatibility with this specification, a privacy-enhanced mail\n   implementation\
    \ must be able to process both MAC (Section 2.1) and\n   RSA-MD2 (Section 2.2)\
    \ MICs on incoming messages.  It is a sender option\n   whether MAC or RSA-MD2\
    \ is employed on an outbound message addressed to\n   only one recipient.  However,\
    \ use of MAC is strongly discouraged for\n   messages sent to more than a single\
    \ recipient.  The reason for this\n   recommendation is that the use of MAC on\
    \ multi-addressed mail fails to\n   prevent other intended recipients from tampering\
    \ with a message in a\n   manner which preserves the message's appearance as an\
    \ authentic message\n   from the sender.  In other words, use of MAC on multi-addressed\
    \ mail\n   provides source authentication at the granularity of membership in\
    \ the\n   message's authorized address list (plus the sender) rather than at a\n\
    \   finer (and more desirable) granularity authenticating the individual\n   sender.\n"
- title: 4.1.  Message Authentication Code (MAC)
  contents:
  - "4.1.  Message Authentication Code (MAC)\n   A message authentication code (MAC),\
    \ denoted by the string \"MAC\", is\n   computed using the DEA-1 algorithm in\
    \ the fashion defined in FIPS PUB\n   113 [1].  This algorithm is used only as\
    \ a MIC algorithm, not as a CIC\n   algorithm.\n   As noted above, use of the\
    \ MAC is not recommended for multicast\n   messages, as it does not preserve authentication\
    \ and integrity among\n   individual recipients, i.e., it is not cryptographically\
    \ strong enough\n   for this purpose.  The message's canonically encoded text\
    \ is padded at\n   the end, per FIPS PUB 113, with zero-valued octets as needed\
    \ in order to\n   form an integral number of 8-octet encryption quanta.  These\
    \ padding\n   octets are inserted implicitly and are not transmitted with a message.\n\
    \   The result of a MAC computation is a single 64-bit value.\n"
- title: 4.2.  RSA-MD2 Message Digest Algorithm
  contents:
  - '4.2.  RSA-MD2 Message Digest Algorithm

    '
- title: 4.2.1.  Discussion
  contents:
  - "4.2.1.  Discussion\n   The RSA-MD2 Message Digest Algorithm, denoted by the string\
    \ \"RSA-MD2\",\n   is computed using an algorithm defined in this section.  It\
    \ has been\n   provided by Ron Rivest of RSA Data Security, Incorporated for use\
    \ in\n   support of privacy-enhanced electronic mail, free of licensing\n   restrictions.\
    \  This algorithm should be used as a MIC algorithm\n   whenever a message is\
    \ addressed to multiple recipients.  It is also\n   the only algorithm currently\
    \ defined for use as CIC.  While its\n   continued use as the standard CIC algorithm\
    \ is anticipated, RSA-MD2\n   may be supplanted by later recommendations for MIC\
    \ algorithm\n   selections.\n   The RSA-MD2 message digest algorithm accepts as\
    \ input a message of any\n   length and produces as output a 16-byte quantity.\
    \  The attached\n   reference implementation serves to define the algorithm; implementors\n\
    \   may choose to develop optimizations suited to their operating\n   environments.\n"
- title: 4.2.2.  Reference Implementation
  contents:
  - '4.2.2.  Reference Implementation

    '
- title: /* RSA-MD2 Message Digest algorithm in C  */
  contents:
  - '/* RSA-MD2 Message Digest algorithm in C  */

    '
- title: /*  by Ronald L. Rivest 10/1/88  */
  contents:
  - '/*  by Ronald L. Rivest 10/1/88  */

    '
- title: '#include <stdio.h>'
  contents:
  - '#include <stdio.h>

    '
- title: /**********************************************************************/
  contents:
  - '/**********************************************************************/

    '
- title: '/* Message digest routines:                                           */'
  contents:
  - '/* Message digest routines:                                           */

    '
- title: /* To form the message digest for a message M                         */
  contents:
  - '/* To form the message digest for a message M                         */

    '
- title: /*    (1) Initialize a context buffer md using MDINIT                 */
  contents:
  - '/*    (1) Initialize a context buffer md using MDINIT                 */

    '
- title: /*    (2) Call MDUPDATE on md and each character of M in turn         */
  contents:
  - '/*    (2) Call MDUPDATE on md and each character of M in turn         */

    '
- title: /*    (3) Call MDFINAL on md                                          */
  contents:
  - '/*    (3) Call MDFINAL on md                                          */

    '
- title: /* The message digest is now in md->D[0...15]                         */
  contents:
  - '/* The message digest is now in md->D[0...15]                         */

    '
- title: /**********************************************************************/
  contents:
  - '/**********************************************************************/

    '
- title: /* An MDCTX structure is a context buffer for a message digest        */
  contents:
  - '/* An MDCTX structure is a context buffer for a message digest        */

    '
- title: /*  computation; it holds the current "state" of a message digest     */
  contents:
  - '/*  computation; it holds the current "state" of a message digest     */

    '
- title: /*  computation                                                       */
  contents:
  - '/*  computation                                                       */

    '
- title: struct MDCTX
  contents:
  - 'struct MDCTX

    '
- title: '{'
  contents:
  - "{\n   unsigned char  D[48];   /* buffer for forming digest in */\n          \
    \                 /* At the end, D[0...15] form the message */\n             \
    \              /*  digest */\n   unsigned char  C[16];   /* checksum register\
    \ */\n   unsigned char  i;       /* number of bytes handled, modulo 16 */\n  \
    \ unsigned char  L;       /* last checksum char saved */\n"
- title: '};'
  contents:
  - '};

    '
- title: /* The table S given below is a permutation of 0...255 constructed    */
  contents:
  - '/* The table S given below is a permutation of 0...255 constructed    */

    '
- title: /*  from the digits of pi.  It is a ``random'' nonlinear byte         */
  contents:
  - '/*  from the digits of pi.  It is a ``random'''' nonlinear byte         */

    '
- title: /*  substitution operation.                                           */
  contents:
  - '/*  substitution operation.                                           */

    '
- title: int S[256] = {
  contents:
  - "int S[256] = {\n        41, 46, 67,201,162,216,124,  1, 61, 54, 84,161,236,240,\
    \  6, 19,\n        98,167,  5,243,192,199,115,140,152,147, 43,217,188, 76,130,202,\n\
    \        30,155, 87, 60,253,212,224, 22,103, 66,111, 24,138, 23,229, 18,\n   \
    \    190, 78,196,214,218,158,222, 73,160,251,245,142,187, 47,238,122,\n      \
    \ 169,104,121,145, 21,178,  7, 63,148,194, 16,137, 11, 34, 95, 33,\n       128,127,\
    \ 93,154, 90,144, 50, 39, 53, 62,204,231,191,247,151,  3,\n       255, 25, 48,179,\
    \ 72,165,181,209,215, 94,146, 42,172, 86,170,198,\n        79,184, 56,210,150,164,125,182,118,252,107,226,156,116,\
    \  4,241,\n        69,157,112, 89,100,113,135, 32,134, 91,207,101,230, 45,168,\
    \  2,\n        27, 96, 37,173,174,176,185,246, 28, 70, 97,105, 52, 64,126, 15,\n\
    \        85, 71,163, 35,221, 81,175, 58,195, 92,249,206,186,197,234, 38,\n   \
    \     44, 83, 13,110,133, 40,132,  9,211,223,205,244, 65,129, 77, 82,\n      \
    \ 106,220, 55,200,108,193,171,250, 36,225,123,  8, 12,189,177, 74,\n       120,136,149,139,227,\
    \ 99,232,109,233,203,213,254, 59,  0, 29, 57,\n       242,239,183, 14,102, 88,208,228,166,119,114,248,235,117,\
    \ 75, 10,\n        49, 68, 80,180,143,237, 31, 26,219,153,141, 51,159, 17,131,\
    \ 20,\n"
- title: '};'
  contents:
  - '};

    '
- title: /*The routine MDINIT initializes the message digest context buffer md.*/
  contents:
  - '/*The routine MDINIT initializes the message digest context buffer md.*/

    '
- title: /* All fields are set to zero.                                        */
  contents:
  - '/* All fields are set to zero.                                        */

    '
- title: void MDINIT(md)
  contents:
  - "void MDINIT(md)\n  struct MDCTX *md;\n  { int i;\n    for (i=0;i<16;i++) md->D[i]\
    \ = md->C[i] = 0;\n    md->i = 0;\n    md->L = 0;\n  }\n"
- title: /* The routine MDUPDATE updates the message digest context buffer to  */
  contents:
  - '/* The routine MDUPDATE updates the message digest context buffer to  */

    '
- title: /*  account for the presence of the character c in the message whose  */
  contents:
  - '/*  account for the presence of the character c in the message whose  */

    '
- title: /*  digest is being computed.  This routine will be called for each   */
  contents:
  - '/*  digest is being computed.  This routine will be called for each   */

    '
- title: /*   message byte in turn.                                            */
  contents:
  - '/*   message byte in turn.                                            */

    '
- title: void MDUPDATE(md,c)
  contents:
  - "void MDUPDATE(md,c)\n  struct MDCTX *md;\n  unsigned char c;\n  { register unsigned\
    \ char i,j,t,*p;\n    /**** Put i in a local register for efficiency ****/\n \
    \      i = md->i;\n    /**** Add new character to buffer ****/\n       md->D[16+i]\
    \ = c;\n       md->D[32+i] = c ^ md->D[i];\n    /**** Update checksum register\
    \ C and value L ****/\n       md->L = (md->C[i] ^= S[0xFF & (c ^ md->L)]);\n \
    \   /**** Increment md->i by one modulo 16 ****/\n       i = md->i = (i + 1) &\
    \ 15;\n    /**** Transform D if i=0 ****/\n       if (i == 0)\n         { t =\
    \ 0;\n           for (j=0;j<18;j++)\n             {/*The following is a more efficient\
    \ version of the loop:*/\n               /*  for (i=0;i<48;i++) t = md->D[i] =\
    \ md->D[i] ^ S[t]; */\n               p = md->D;\n               for (i=0;i<8;i++)\n\
    \                 { t = (*p++ ^= S[t]);\n                   t = (*p++ ^= S[t]);\n\
    \                   t = (*p++ ^= S[t]);\n                   t = (*p++ ^= S[t]);\n\
    \                   t = (*p++ ^= S[t]);\n                   t = (*p++ ^= S[t]);\n\
    \                 }\n               /* End of more efficient loop implementation\
    \ */\n               t = t + j;\n             }\n         }\n  }\n"
- title: /* The routine MDFINAL terminates the message digest computation and  */
  contents:
  - '/* The routine MDFINAL terminates the message digest computation and  */

    '
- title: /* ends with the desired message digest being in md->D[0...15].       */
  contents:
  - '/* ends with the desired message digest being in md->D[0...15].       */

    '
- title: void MDFINAL(md)
  contents:
  - "void MDFINAL(md)\n  struct MDCTX *md;\n  { int i,padlen;\n    /* pad out to multiple\
    \ of 16 */\n       padlen  = 16 - (md->i);\n       for (i=0;i<padlen;i++) MDUPDATE(md,(unsigned\
    \ char)padlen);\n    /* extend with checksum */\n    /* Note that although md->C\
    \ is modified by MDUPDATE, character    */\n    /* md->C[i] is modified after\
    \ it has been passed to MDUPDATE, so  */\n    /* the net effect is the same as\
    \ if md->C were not being modified.*/\n    for (i=0;i<16;i++) MDUPDATE(md,md->C[i]);\n\
    \  }\n"
- title: /**********************************************************************/
  contents:
  - '/**********************************************************************/

    '
- title: /* End of message digest implementation                               */
  contents:
  - '/* End of message digest implementation                               */

    '
- title: /**********************************************************************/
  contents:
  - '/**********************************************************************/

    '
- title: 'NOTES:'
  contents:
  - "NOTES:\n  [1]  Federal Information Processing Standards Publication 113,\n  \
    \     Computer Data Authentication, May 1985.\n  [2]  ANSI X9.17-1985, American\
    \ National Standard, Financial\n       Institution Key Management (Wholesale),\
    \ American Bankers\n       Association, April 4, 1985, Section 7.2.\n  [3]  American\
    \ National Standard Data Encryption Algorithm (ANSI\n       X3.92-1981), American\
    \ National Standards Institute, Approved 30\n       December 1980.\n  [4]  Federal\
    \ Information Processing Standards Publication 46,  Data\n       Encryption Standard,\
    \ 15 January 1977.\n  [5]  Information Processing Systems: Data Encipherment:\
    \ Modes of\n       Operation of a 64-bit Block Cipher.\n  [6]  Federal Information\
    \ Processing Standards Publication 81,\n       DES Modes of Operation, 2 December\
    \ 1980.\n  [7]  American National Standard for Information Systems - Data\n  \
    \     Encryption  Algorithm - Modes of Operation (ANSI X3.106-1983),\n       American\
    \ National Standards Institute - Approved 16 May 1983.\n  [8]  CCITT, Recommendation\
    \ X.509, \"The Directory: Authentication\n       Framework\", Annex C.\n  [9]\
    \  Moore, J., \"Protocol Failures in Cryptosystems\",\n       Proceedings of the\
    \ IEEE, Vol. 76, No. 5, Pg. 597, May 1988.\n"
- title: Author's Address
  contents:
  - "Author's Address\n       John Linn\n       Secure Systems\n       Digital Equipment\
    \ Corporation\n       85 Swanson Road, BXB1-2/D04\n       Boxborough, MA  01719-1326\n\
    \       Phone: 508-264-5491\n       EMail: Linn@ultra.enet.dec.com\n"
