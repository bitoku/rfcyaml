- title: __initial_text__
  contents:
  - ''
- title: Internet Research Task Force (IRTF)                         S. Symington
  contents:
  - "Internet Research Task Force (IRTF)                         S. Symington\n  \
    \         Delay-Tolerant Networking Metadata Extension Block\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines an extension block that may be used with the\n\
    \   Delay-Tolerant Networking (DTN) Bundle Protocol.  This Metadata\n   Extension\
    \ Block is designed to carry additional information that DTN\n   nodes can use\
    \ to make processing decisions regarding bundles, such as\n   deciding whether\
    \ to store a bundle or determining to which nodes to\n   forward a bundle.  The\
    \ metadata that is carried in a metadata block\n   must be formatted according\
    \ to the metadata type that is identified\n   in the block's metadata type field.\
    \  One specific metadata type, for\n   carrying URIs as metadata, is defined in\
    \ this document.  Other\n   metadata types may be defined in separate documents.\
    \  This document\n   is a product of the Delay Tolerant Networking Research Group\
    \ and has\n   been reviewed by that group.  No objections to its publication as\
    \ an\n   RFC were raised.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Research Task\n   Force (IRTF).\
    \  The IRTF publishes the results of Internet-related\n   research and development\
    \ activities.  These results might not be\n   suitable for deployment.  This RFC\
    \ represents the consensus of the\n   Delay-Tolerant Networking Research Group\
    \ of the Internet Research\n   Task Force (IRTF).  Documents approved for publication\
    \ by the IRSG\n   are not a candidate for any level of Internet Standard; see\
    \ Section 2\n   of RFC 5741.\n   Information about the current status of this\
    \ document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6258.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \      1.1. Requirements Language ......................................4\n  \
    \ 2. Metadata Block Format ...........................................4\n   3.\
    \ Metadata Block Processing .......................................5\n      3.1.\
    \ Bundle Transmission ........................................6\n      3.2. Bundle\
    \ Forwarding ..........................................6\n      3.3. Bundle Reception\
    \ ...........................................6\n   4. Predefined Metadata Types\
    \ .......................................6\n      4.1. URI Metadata Type ..........................................6\n\
    \      4.2. Private Metadata Types .....................................7\n  \
    \ 5. Security Considerations .........................................7\n   6.\
    \ IANA Considerations .............................................8\n      6.1.\
    \ Metadata Type Codes ........................................8\n      6.2. Block\
    \ Type Code for the Metadata Block .....................9\n   7. References ......................................................9\n\
    \      7.1. Normative References .......................................9\n  \
    \    7.2. Informative References .....................................9\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document defines an extension block that may be used\
    \ with the\n   Bundle Protocol [RFC5050] within the context of a Delay-Tolerant\n\
    \   Networking architecture [RFC4838].  The DTN Bundle Protocol [RFC5050]\n  \
    \ defines the bundle as its protocol data unit.  This document defines\n   a bundle\
    \ block called a \"metadata block\".  This block is designed to\n   carry additional\
    \ information that DTN nodes can use to make\n   processing decisions regarding\
    \ bundles.\n   The metadata block has been deliberately defined to be flexible\n\
    \   enough that it would be capable of supporting a variety of metadata\n   types\
    \ and formats.  Indeed, the only restriction imposed on the\n   metadata to be\
    \ used is that its type and format be predefined and\n   registered (if public)\
    \ so that it can be parsed and processed by DTN\n   nodes that support metadata\
    \ of that type.  Section 4 defines a\n   specific metadata type and discusses\
    \ the use of other metadata types\n   that may be defined elsewhere.  As mentioned,\
    \ it is the intention\n   that the metadata that is carried in this block be application-\n\
    \   related information.  For example, the metadata might be information\n   that\
    \ is associated with the payload of a bundle.  Additional\n   extension blocks\
    \ could be (and have been) defined for carrying\n   additional network-related\
    \ information.\n   While the bundle payload may be processed opaquely by DTN nodes,\n\
    \   metadata is intended to serve as a mechanism for providing DTN nodes\n   with\
    \ access to additional information that they can use to process\n   the bundle.\
    \  Examples of such additional information include keywords\n   found in the payload;\
    \ payload provenance information; GPS coordinates\n   (if the payload is a map,\
    \ for instance); message IDs; and artist,\n   album, and track name (if the payload\
    \ is a song).  Even though the\n   metadata is additional information related\
    \ to the application, its\n   purpose is to be used by DTN nodes to make decisions\
    \ regarding how to\n   process bundles within the network, such as whether or\
    \ not a bundle\n   should be stored or to which nodes a bundle should be forwarded.\n\
    \   Metadata that is about bundle payload, for example, might serve as a\n   content-based\
    \ index of bundles that are stored in a DTN cache.  So,\n   in response to a request\
    \ for bundles related to a certain subject or\n   related to specific GPS coordinates,\
    \ for example, the metadata of\n   stored bundles could be searched, and all bundles\
    \ with metadata\n   matching the search criteria could be retrieved and returned\
    \ to the\n   requestor.\n   This document defines the general format of and the\
    \ processing\n   required to support the metadata block.  The actual metadata\
    \ to be\n   inserted into a metadata block MUST be formatted according to the\n\
    \   metadata type that is identified in the block's metadata type field.\n   One\
    \ specific metadata type, for carrying Uniform Resource Identifiers\n   (URIs)\
    \ [RFC3986] as metadata, is defined in this document.  Other\n   metadata types\
    \ may be defined in separate documents, along with the\n   steps required to process\
    \ records of that type, if necessary.  If\n   such other metadata types are defined,\
    \ they should be registered to\n   ensure global uniqueness (see the IANA Considerations\
    \ section).\n   The capabilities described in this document are OPTIONAL for\n\
    \   deployment with the Bundle Protocol.  As defined in this document,\n   Bundle\
    \ Protocol implementations claiming to support the metadata\n   block MUST be\
    \ capable of:\n      - generating a metadata block and inserting it into a bundle,\n\
    \      - receiving bundles containing a metadata block and making the\n      information\
    \ contained in this metadata block's metadata field\n      available for use,\
    \ e.g., in bundle storage or forwarding\n      decisions, and\n      - deleting\
    \ a metadata block from a received bundle before\n      forwarding the bundle.\n\
    \   Bundle Protocol implementations claiming to support a specific\n   metadata\
    \ type must both support the metadata block as defined above\n   and be capable\
    \ of parsing and processing the metadata itself\n   according to the definition\
    \ of the metadata type in which the\n   metadata is expressed.  This metadata\
    \ type may be the URI metadata\n   type (see the URI metadata type section), or\
    \ it may be another\n   metadata type defined in a separate document.\n"
- title: 1.1.  Requirements Language
  contents:
  - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: 2.  Metadata Block Format
  contents:
  - "2.  Metadata Block Format\n   The metadata block uses the Canonical Bundle Block\
    \ Format as defined\n   in the Bundle Protocol [RFC5050].  That is, it is comprised\
    \ of the\n   following elements, which are defined as in all bundle protocol\n\
    \   blocks except the primary bundle block.  (Note that Self-Delimiting\n   Numeric\
    \ Value (SDNV) encoding is described in the Bundle Protocol.):\n      - Block-type\
    \ code (1 byte) - defined as in all bundle protocol\n      blocks except the primary\
    \ bundle block (as described in the Bundle\n      Protocol).  The block-type code\
    \ for the metadata block is 0x08.\n      - Block processing control flags (SDNV)\
    \ - defined as in all bundle\n      protocol blocks except the primary bundle\
    \ block.  SDNV encoding is\n      described in the Bundle Protocol.  There are\
    \ no constraints on the\n      use of the block processing control flags.  If\
    \ a bundle node\n      receives a bundle with a metadata block and it is capable\
    \ of\n      supporting the metadata block but it is not able to parse and\n  \
    \    process the metadata itself, either because it does not support\n      the\
    \ metadata type being used or because the metadata is not well-\n      formed\
    \ according to the metadata type definition, the bundle node\n      must process\
    \ the bundle as if it cannot process the metadata\n      block.  That is, it must\
    \ operate according to the settings of the\n      block processing control flags,\
    \ including the \"Delete bundle if\n      block can't be processed\" flag and\
    \ the \"Discard block if it can't\n      be processed\" flag.\n      - Block EID-reference\
    \ count and EID-references (optional) -\n      composite field defined in the\
    \ Bundle Protocol that is present if\n      and only if the metadata block references\
    \ EID elements in the\n      primary block's dictionary.  Presence of this field\
    \ is indicated\n      by the setting of the \"Block contains an EID-reference\
    \ field\" bit\n      of the block processing control flags.  If EIDs are referenced\
    \ in\n      the metadata block, then their interpretation is defined by the\n\
    \      particular metadata type that is being used in this metadata\n      block,\
    \ as indicated in the metadata type field.\n      - Block data length (SDNV) -\
    \ defined as in all bundle protocol\n      blocks except the primary bundle block.\
    \  SDNV encoding is\n      described in the Bundle Protocol.\n      - Block-type-specific\
    \ data fields as follows:\n         - Metadata Type field (SDNV) - indicates which\
    \ metadata type is\n         to be used to interpret both the metadata in the\
    \ metadata field\n         and the EID-references in the optional Block EID-reference\n\
    \         count and EID-references field (if present).  One metadata type\n  \
    \       is defined in this document.  Other metadata types may be\n         defined\
    \ in separate documents.\n         - Metadata field - contains the metadata itself,\
    \ formatted\n         according to the metadata type that has been specified for\
    \ this\n         block.  One metadata type is defined in Section 4.1.  Other\n\
    \         metadata types may be defined elsewhere, as discussed in\n         Section\
    \ 4.\n   The structure of a metadata block is as follows:\n   Metadata Block Format:\n\
    \   +-----+------+--------------------+------+----------+----------|\n   |Type\
    \ |Flags |EID-Reference count |Len   | Metadata | Metadata |\n   |     |(SDNV)|\
    \  and list (opt)    |(SDNV)|   Type   |          |\n   +-----+------+--------------------+------+----------+----------+\n\
    \                                 Figure 1\n"
- title: 3.  Metadata Block Processing
  contents:
  - "3.  Metadata Block Processing\n   The following are the processing steps that\
    \ a bundle node may take\n   relative to generation, reception, and processing\
    \ of metadata blocks.\n"
- title: 3.1.  Bundle Transmission
  contents:
  - "3.1.  Bundle Transmission\n   When an outbound bundle is created per the parameters\
    \ of the bundle\n   transmission request, this bundle MAY (as influenced by local\
    \ policy\n   and the metadata type being used) include one or more metadata blocks\n\
    \   (as defined in this specification).\n"
- title: 3.2.  Bundle Forwarding
  contents:
  - "3.2.  Bundle Forwarding\n   A node MAY insert one or more metadata blocks into\
    \ a bundle before\n   forwarding it; and a node MAY delete one or more metadata\
    \ blocks from\n   a bundle before forwarding it, as dictated by local policy and\
    \ the\n   metadata type being used.\n"
- title: 3.3.  Bundle Reception
  contents:
  - "3.3.  Bundle Reception\n   If the bundle includes one or more metadata blocks,\
    \ the metadata\n   information records in these blocks SHALL be made available\
    \ for use\n   at this node (e.g., in bundle storage or forwarding decisions, or,\
    \ if\n   the receiving node is the bundle-destination, the metadata\n   information\
    \ records may be provided to the receiving application).\n"
- title: 4.  Predefined Metadata Types
  contents:
  - "4.  Predefined Metadata Types\n   As mentioned in the previous section, any number\
    \ of different\n   metadata types may be defined to indicate the format of both\
    \ the\n   metadata field and the EID-references in the optional Block EID-\n \
    \  reference count and EID-references field (if present) and, if\n   necessary,\
    \ how metadata of this type should be processed.  One\n   metadata type is defined\
    \ in this document, URI metadata type (0x01).\n   In addition, a range of metadata\
    \ type values is reserved for private\n   use.\n"
- title: 4.1.  URI Metadata Type
  contents:
  - "4.1.  URI Metadata Type\n   It is believed that use of URIs will, in many cases,\
    \ be adequate for\n   encoding metadata, although it is recognized that use of\
    \ URIs may not\n   be the most efficient method for such encoding.  Because of\
    \ the\n   expected utility of using URI encoding for metadata, the metadata\n\
    \   type value of 0x01 is defined to indicate a metadata type of URI.\n   Metadata\
    \ type values other than 0x01 will be used to indicate\n   alternative metadata\
    \ types.\n   The Metadata field for metadata of metadata type URI (0x01) consists\n\
    \   of an array of bytes formed by concatenating one or more null-\n   terminated\
    \ URIs.  Unless determined by local policy, the specific\n   processing steps\
    \ that must be performed on bundles with metadata\n   blocks containing metadata\
    \ of type URI are expected to be indicated\n   as part of the URI encoding of\
    \ the metadata.  It is envisioned that\n   users might define URI schemes for\
    \ this purpose.  Metadata blocks\n   containing metadata of type URI MUST NOT\
    \ include a Block EID-\n   reference count and EID-references field.  The absence\
    \ of this field\n   MUST be indicated by a value of 0 for the \"Block contains\
    \ an EID-\n   reference field\" flag in the block processing control flags.  Support\n\
    \   for the URI metadata type is OPTIONAL.\n"
- title: 4.2.  Private Metadata Types
  contents:
  - "4.2.  Private Metadata Types\n   Metadata type values 192 through 255 are not\
    \ defined in this\n   specification and are available for private and/or experimental\
    \ use.\n   Such private metadata types are not required to be registered.  All\n\
    \   other values of the metadata type are reserved for future use and,\n   when\
    \ defined, should be registered to ensure global uniqueness (see\n   the IANA\
    \ Considerations section).  Local policy will define how\n   private metadata\
    \ types are handled.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   The DTN Bundle Security Protocol [RFC6257] defines\
    \ security-related\n   blocks to provide hop-by-hop authentication, end-to-end\n\
    \   authentication, end-to-end confidentiality of bundles or parts of\n   bundles,\
    \ and an extension security block to provide confidentiality\n   and integrity\
    \ for extension blocks, as well as a set of standard\n   ciphersuites that may\
    \ be used to calculate security-results carried\n   in these security blocks.\
    \  All ciphersuites that use the strict\n   canonicalization algorithm [RFC6257]\
    \ to calculate and verify\n   security-results (e.g., many hop-by-hop authentication\
    \ ciphersuites)\n   apply to all blocks in the bundle and so would apply to bundles\
    \ that\n   include an optional metadata block and would include that block in\n\
    \   the calculation of their security-result.  In particular, bundles\n   including\
    \ the optional metadata block would be protected in their\n   entirety for the\
    \ duration of a single hop, from a forwarding node to\n   an adjacent receiving\
    \ node (but not from source to destination over\n   multiple hops), using the\
    \ standard BAB-HMAC (Bundle Authentication\n   Block - Hashed Message Authentication\
    \ Code) ciphersuite defined in\n   the Bundle Security Protocol.\n   Ciphersuites\
    \ that use the mutable canonicalization algorithm to\n   calculate and verify\
    \ security-results (e.g., the mandatory PSH-RSA-\n   SHA256 ciphersuite and most\
    \ end-to-end authentication ciphersuites)\n   will omit the metadata block from\
    \ their calculation.  Therefore, the\n   fact that metadata in the metadata block\
    \ may be modified or that\n   metadata blocks themselves may be added to or deleted\
    \ from a bundle\n   as it transits the network will not interfere with end-to-end\n\
    \   security protection when using ciphersuites that use mutable\n   canonicalization.\n\
    \   The metadata block will not be encrypted by the mandatory CH-RSA-AES-\n  \
    \ PAYLOAD-PSH end-to-end confidentiality ciphersuite, which only allows\n   for\
    \ payload and PSH encryption.\n   In order to provide the metadata block with\
    \ end-to-end\n   confidentiality and authentication independent of any confidentiality\n\
    \   or authentication that is provided for the payload or other parts of\n   the\
    \ bundle, the extension security block may be used to encrypt and\n   authenticate\
    \ the metadata block.  A bundle may contain multiple\n   metadata extension blocks.\
    \  In some cases, multiple metadata blocks\n   may be carried in the bundle, possibly\
    \ with each being encrypted\n   separately from each other and from the payload.\
    \  Such separate\n   encryption of metadata from payload would enable bundle nodes\
    \ to\n   perform content-based searching and routing on bundle metadata that\n\
    \   they are able to decrypt, even if they are not able to decrypt the\n   bundle\
    \ payload.\n   Given that metadata can be modified by forwarding nodes, it may\
    \ be\n   desirable to eventually support the ability to audit changes to the\n\
    \   metadata at the individual record level.  No such capability has been\n  \
    \ provided in this specification as currently written.\n"
- title: 6.  IANA Considerations
  contents:
  - '6.  IANA Considerations

    '
- title: 6.1.  Metadata Type Codes
  contents:
  - "6.1.  Metadata Type Codes\n   The metadata block carried in the Metadata Extension\
    \ Block has a\n   Metadata Type Code field (see Sections 2 and 3).  An IANA registry\n\
    \   has been set up as follows.\n                 Metadata Type Codes Registry\n\
    \   The registration policy for this registry is:\n     0-191: Specification Required\n\
    \     192-255: Private and/or Experimental Use.  No assignment by IANA.\n   The\
    \ Value range is unsigned 8-bit integer.\n   +---------+---------------------------------+---------------+\n\
    \   |  Value  | Description                     | Reference     |\n   +---------+---------------------------------+---------------+\n\
    \   |       0 | Reserved                        | This document |\n   |      \
    \ 1 | URI                             | This document |\n   |   2-191 | Unassigned\
    \                      |               |\n   | 192-255 | Private and/or experimental\
    \ use | This document |\n   +---------+---------------------------------+---------------+\n"
- title: 6.2.  Block Type Code for the Metadata Block
  contents:
  - "6.2.  Block Type Code for the Metadata Block\n   This specification allocates\
    \ a codepoint from the Bundle Block Type\n   Codes registry defined in [RFC6255]\
    \ (see Section 2 of this document):\n   Additional Entry for the Bundle Block\
    \ Type Codes Registry:\n     +-------+----------------------------------------+----------------+\n\
    \     | Value | Description                            + Reference      |\n  \
    \   +-------+----------------------------------------+----------------+\n    \
    \ |     8 | Metadata Extension Block               + This document  |\n     +-------+----------------------------------------+----------------+\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n\
    \              Resource Identifier (URI): Generic Syntax\", STD 66,\n        \
    \      RFC 3986, January 2005.\n   [RFC5050]  Scott, K. and S. Burleigh, \"Bundle\
    \ Protocol\n              Specification\", RFC 5050, November 2007.\n   [RFC6255]\
    \  Blanchet, M., \"Delay-Tolerant Networking (DTN) Bundle\n              Protocol\
    \ IANA Registries\", RFC 6255, May 2010.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [RFC4838]  Cerf, V., Burleigh, S., Hooke, A.,\
    \ Torgerson, L., Durst,\n              R., Scott, K., Fall, K., and H. Weiss,\
    \ \"Delay-Tolerant\n              Networking Architecture\", RFC 4838, April 2007.\n\
    \   [RFC6257]  Symington, S., Farrell, S., Weiss, H., and P. Lovell,\n       \
    \       \"Bundle Security Protocol Specification\", RFC 6257,\n              May\
    \ 2011.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Susan Flynn Symington\n   The MITRE Corporation\n   7515\
    \ Colshire Drive\n   McLean, VA  22102\n   US\n   Phone: +1 (703) 983-7209\n \
    \  EMail: susan@mitre.org\n   URI:   http://mitre.org/\n"
