- contents:
  - "      Definitions of Managed Objects for Character Stream Devices\n                              using
    SMIv2\n"
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Table of Contents\n   1. Introduction ................................................
    \   2\n   2. The SNMPv2 Network Management Framework .....................    2\n
    \  2.1 Object Definitions .........................................    3\n   3.
    Overview ....................................................    3\n   3.1 Relationship
    to Interface MIB ..............................    4\n   4. Definitions .................................................
    \   4\n   5. Acknowledgements ............................................   17\n
    \  6. References ..................................................   17\n   7.
    Security Considerations .....................................   18\n   8. Author's
    Address ............................................   18\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This memo defines an extension to the Management Information
    Base\n   (MIB) for use with network management protocols in the Internet\n   community.
    \ In particular, it defines objects for the management of\n   character stream
    devices.\n"
  title: 1.  Introduction
- contents:
  - "2.  The SNMPv2 Network Management Framework\n   The SNMPv2 Network Management
    Framework consists of four major\n   components.  They are:\n      o    RFC 1442
    [1] which defines the SMI, the mechanisms used for\n           describing and
    naming objects for the purpose of management.\n      o    STD 17, RFC 1213 [2]
    defines MIB-II, the core set of managed\n           objects for the Internet suite
    of protocols.\n      o    RFC 1445 [3] which defines the administrative and other\n
    \          architectural aspects of the framework.\n      o    RFC 1448 [4] which
    defines the protocol used for network\n           access to managed objects.\n
    \  The Framework permits new objects to be defined for the purpose of\n   experimentation
    and evaluation.\n"
  - contents:
    - "2.1.  Object Definitions\n   Managed objects are accessed via a virtual information
      store, termed\n   the Management Information Base or MIB.  Objects in the MIB
      are\n   defined using the subset of Abstract Syntax Notation One (ASN.1)\n   defined
      in the SMI.  In particular, each object object type is named\n   by an OBJECT
      IDENTIFIER, an administratively assigned name.  The\n   object type together
      with an object instance serves to uniquely\n   identify a specific instantiation
      of the object.  For human\n   convenience, we often use a textual string, termed
      the descriptor, to\n   refer to the object type.\n"
    title: 2.1.  Object Definitions
  title: 2.  The SNMPv2 Network Management Framework
- contents:
  - "3.  Overview\n   The Character MIB applies to ports that carry a character stream,\n
    \  whether physical or virtual, serial or parallel, synchronous or\n   asynchronous.
    \ The most common example of a character stream device\n   is a hardware terminal
    port with an RS-232 interface.  Another common\n   hardware example is a parallel
    printer port, say with a Centronics\n   interface.  The concept also includes
    virtual terminal ports, such as\n   a software connection point for a remote console.\n
    \  The Character MIB is mandatory for all systems that offer character\n   stream
    ports.  This includes, for example, terminal servers,\n   general-purpose time-sharing
    hosts, and even such systems as a bridge\n   with a (virtual) console port.  It
    may or may not include character\n   ports that do not support network sessions,
    depending on the system's\n   needs.\n   The Character MIB's central abstraction
    is a port.  Physical ports\n   have a one-to-one correspondence with hardware
    ports. Virtual ports\n   are software entities analogous to physical ports, but
    with no\n   hardware connector.\n   Each port supports one or more sessions.  A
    session represents a\n   virtual connection that carries characters between the
    port and some\n   partner.  Sessions typically operate over a stack of network\n
    \  protocols.  A typical session, for example, uses Telnet over TCP.\n   The MIB
    comprises one base object and two tables, detailed in the\n   following sections.
    \ The tables contain objects for ports and\n   sessions.\n   The MIB intentionally
    contains no distinction between what is often\n   called permanent and operational
    or volatile data bases.  For the\n   purposes of this MIB, handling of such distinctions
    is implementation\n   specific.\n"
  - contents:
    - "3.1.  Relationship to Interface MIB\n   The Character MIB does not relate directly
      to the Interface MIB [1],\n   since it is not intrinsically a network interface.
      \ On the other\n   hand, in most implementations where it is present, it will
      be above a\n   physical sublayer interface, such as the RS-232-like [2] or\n
      \  Parallel-printer-like [3] MIBs.  Such physical interfaces typically\n   are
      represented by a row in the interface table (ifTable), identified\n   by a value
      of ifIndex.\n"
    title: 3.1.  Relationship to Interface MIB
  title: 3.  Overview
- contents:
  - "4.  Definitions\n   CHARACTER-MIB DEFINITIONS ::= BEGIN\n   IMPORTS\n       MODULE-IDENTITY,
    OBJECT-TYPE, NOTIFICATION-TYPE,\n       Counter32, Integer32, Gauge32, TimeTicks\n
    \          FROM SNMPv2-SMI\n       AutonomousType, InstancePointer\n           FROM
    SNMPv2-TC\n       InterfaceIndex\n           FROM IF-MIB\n       transmission,
    mib-2\n           FROM RFC1213-MIB\n       MODULE-COMPLIANCE, OBJECT-GROUP\n           FROM
    SNMPv2-CONF;\n   char MODULE-IDENTITY\n       LAST-UPDATED \"9405261700Z\"\n       ORGANIZATION
    \"IETF Character MIB Working Group\"\n       CONTACT-INFO\n               \"        Bob
    Stewart\n                Postal: Xyplex, Inc.\n                        295 Foster
    Street\n                        Littleton, MA 01460\n                   Tel: 508-952-4816\n
    \                  Fax: 508-952-4887\n                E-mail: rlstewart@eng.xyplex.com\"\n
    \      DESCRIPTION\n               \"The MIB module for character stream devices.\"\n
    \      ::= { mib-2 19 }\n   PortIndex ::= TEXTUAL-CONVENTION\n       DISPLAY-HINT
    \"d\"\n       STATUS current\n       DESCRIPTION\n               \"A unique value,
    greater than zero, for each\n               character port in the managed system.
    \ It is\n               recommended that values are assigned contiguously\n               starting
    from 1.  The value for each interface sub-\n               layer must remain constant
    at least from one re-\n               initialization of the entity's network management\n
    \              system to the next re-initialization.\n               In a system
    where the character ports are attached\n               to hardware represented
    by an ifIndex, it is\n               conventional, but not required, to make the\n
    \              character port index equal to the corresponding\n               ifIndex.\"\n
    \      SYNTAX Integer32\n   -- Generic Character information\n   charNumber OBJECT-TYPE\n
    \      SYNTAX Integer32\n       MAX-ACCESS read-only\n       STATUS current\n
    \      DESCRIPTION\n           \"The number of entries in charPortTable, regardless\n
    \          of their current state.\"\n       ::= { char 1 }\n   -- the Character
    Port table\n   charPortTable OBJECT-TYPE\n       SYNTAX SEQUENCE OF CharPortEntry\n
    \      MAX-ACCESS not-accessible\n       STATUS current\n       DESCRIPTION\n
    \          \"A list of port entries.  The number of entries is\n           given
    by the value of charNumber.\"\n       ::= { char 2 }\n   charPortEntry OBJECT-TYPE\n
    \      SYNTAX CharPortEntry\n       MAX-ACCESS not-accessible\n       STATUS current\n
    \      DESCRIPTION\n           \"Status and parameter values for a character port.\"\n
    \      INDEX { charPortIndex }\n       ::= { charPortTable 1 }\n   CharPortEntry
    ::=\n       SEQUENCE {\n           charPortIndex\n               PortIndex,\n
    \          charPortName\n               DisplayString,\n           charPortType\n
    \              INTEGER,\n           charPortHardware\n               AutonomousType,\n
    \          charPortReset\n               INTEGER,\n           charPortAdminStatus\n
    \              INTEGER,\n           charPortOperStatus\n               INTEGER,\n
    \          charPortLastChange\n               TimeTicks,\n           charPortInFlowType\n
    \              INTEGER,\n           charPortOutFlowType\n               INTEGER,\n
    \          charPortInFlowState\n               INTEGER,\n           charPortOutFlowState\n
    \              INTEGER,\n           charPortInCharacters\n               Counter32,\n
    \          charPortOutCharacters\n               Counter32,\n           charPortAdminOrigin\n
    \              INTEGER,\n           charPortSessionMaximum\n               INTEGER,\n
    \          charPortSessionNumber\n               Gauge32,\n           charPortSessionIndex\n
    \              INTEGER,\n           charPortInFlowTypes\n               OCTET
    STRING,\n           charPortOutFlowTypes\n               OCTET STRING,\n           charPortLowerIfIndex\n
    \              InterfaceIndex\n       }\n   charPortIndex OBJECT-TYPE\n       SYNTAX
    PortIndex\n       MAX-ACCESS read-only\n       STATUS current\n       DESCRIPTION\n
    \          \"A unique value for each character port, perhaps\n           corresponding
    to the same value of ifIndex when the\n           character port is associated
    with a hardware port\n           represented by an ifIndex.\"\n       ::= { charPortEntry
    1 }\n   charPortName OBJECT-TYPE\n       SYNTAX DisplayString (SIZE (0..32))\n
    \      MAX-ACCESS read-write\n       STATUS current\n       DESCRIPTION\n           \"An
    administratively assigned name for the port,\n           typically with some local
    significance.\"\n       ::= { charPortEntry 2 }\n   charPortType OBJECT-TYPE\n
    \      SYNTAX INTEGER { physical(1), virtual(2) }\n       MAX-ACCESS read-only\n
    \      STATUS current\n       DESCRIPTION\n           \"The port's type, 'physical'
    if the port represents\n           an external hardware connector, 'virtual' if
    it does\n           not.\"\n       ::= { charPortEntry 3 }\n   charPortHardware
    OBJECT-TYPE\n       SYNTAX AutonomousType\n       MAX-ACCESS read-only\n       STATUS
    current\n       DESCRIPTION\n           \"A reference to hardware MIB definitions
    specific to\n           a physical port's external connector.  For example,\n
    \          if the connector is RS-232, then the value of this\n           object
    refers to a MIB sub-tree defining objects\n           specific to RS-232.  If
    an agent is not configured\n           to have such values, the agent returns
    the object\n           identifier:\n               nullHardware OBJECT IDENTIFIER
    ::= { 0 0 }\n           \"\n       ::= { charPortEntry 4 }\n   charPortReset OBJECT-TYPE\n
    \      SYNTAX INTEGER { ready(1), execute(2) }\n       MAX-ACCESS read-write\n
    \      STATUS current\n       DESCRIPTION\n           \"A control to force the
    port into a clean, initial\n           state, both hardware and software, disconnecting
    all\n           the port's existing sessions.  In response to a\n           get-request
    or get-next-request, the agent always\n           returns 'ready' as the value.
    \ Setting the value to\n           'execute' causes a reset.\"\n       ::= { charPortEntry
    5 }\n   charPortAdminStatus OBJECT-TYPE\n       SYNTAX INTEGER { enabled(1), disabled(2),
    off(3),\n                        maintenance(4) }\n       MAX-ACCESS read-write\n
    \      STATUS current\n       DESCRIPTION\n           \"The port's desired state,
    independent of flow\n           control.  'enabled' indicates that the port is\n
    \          allowed to pass characters and form new sessions.\n           'disabled'
    indicates that the port is allowed to\n           pass characters but not form
    new sessions.  'off'\n           indicates that the port is not allowed to pass\n
    \          characters or have any sessions. 'maintenance'\n           indicates
    a maintenance mode, exclusive of normal\n           operation, such as running
    a test.\n           'enabled' corresponds to ifAdminStatus 'up'.\n           'disabled'
    and 'off' correspond to ifAdminStatus\n           'down'.  'maintenance' corresponds
    to ifAdminStatus\n           'test'.\"\n       ::= { charPortEntry 6 }\n   charPortOperStatus
    OBJECT-TYPE\n       SYNTAX INTEGER { up(1), down(2),\n                        maintenance(3),
    absent(4), active(5) }\n       MAX-ACCESS read-only\n       STATUS current\n       DESCRIPTION\n
    \          \"The port's actual, operational state, independent\n           of
    flow control.  'up' indicates able to function\n           normally.  'down' indicates
    inability to function\n           for administrative or operational reasons.\n
    \          'maintenance' indicates a maintenance mode,\n           exclusive of
    normal operation, such as running a\n           test.  'absent' indicates that
    port hardware is not\n           present.  'active' indicates up with a user present\n
    \          (e.g. logged in).\n           'up' and 'active' correspond to ifOperStatus
    'up'.\n           'down' and 'absent' correspond to ifOperStatus\n           'down'.
    \ 'maintenance' corresponds to ifOperStatus\n           'test'.\"\n       ::=
    { charPortEntry 7 }\n   charPortLastChange OBJECT-TYPE\n       SYNTAX TimeTicks\n
    \      MAX-ACCESS read-only\n       STATUS current\n       DESCRIPTION\n           \"The
    value of sysUpTime at the time the port entered\n           its current operational
    state.  If the current state\n           was entered prior to the last reinitialization
    of\n           the local network management subsystem, then this\n           object
    contains a zero value.\"\n       ::= { charPortEntry 8 }\n   -- charPortInFlowType
    is deprecated in favor of\n   -- charPortInFlowTypes\n   charPortInFlowType OBJECT-TYPE\n
    \      SYNTAX INTEGER { none(1), xonXoff(2), hardware(3),\n                        ctsRts(4),
    dsrDtr(5) }\n       MAX-ACCESS read-write\n       STATUS deprecated\n       DESCRIPTION\n
    \          \"The port's type of input flow control.  'none'\n           indicates
    no flow control at this level or below.\n           'xonXoff' indicates software
    flow control by\n           recognizing XON and XOFF characters.  'hardware'\n
    \          indicates flow control delegated to the lower level,\n           for
    example a parallel port.\n           'ctsRts' and 'dsrDtr' are specific to RS-232-like\n
    \          ports.  Although not architecturally pure, they are\n           included
    here for simplicity's sake.\"\n       ::= { charPortEntry 9 }\n   -- charPortOutFlowType
    is deprecated in favor of\n   -- charPortOutFlowTypes\n   charPortOutFlowType
    OBJECT-TYPE\n       SYNTAX INTEGER { none(1), xonXoff(2), hardware(3),\n                        ctsRts(4),
    dsrDtr(5) }\n       MAX-ACCESS read-write\n       STATUS deprecated\n       DESCRIPTION\n
    \          \"The port's type of output flow control.  'none'\n           indicates
    no flow control at this level or below.\n           'xonXoff' indicates software
    flow control by\n           recognizing XON and XOFF characters.  'hardware'\n
    \          indicates flow control delegated to the lower level,\n           for
    example a parallel port.\n           'ctsRts' and 'dsrDtr' are specific to RS-232-like\n
    \          ports.  Although not architecturally pure, they are\n           included
    here for simplicy's sake.\"\n       ::= { charPortEntry 10 }\n   charPortInFlowState
    OBJECT-TYPE\n       SYNTAX INTEGER { none(1), unknown(2), stop(3), go(4) }\n       MAX-ACCESS
    read-only\n       STATUS current\n       DESCRIPTION\n           \"The current
    operational state of input flow control\n           on the port.  'none' indicates
    not applicable.\n           'unknown' indicates this level does not know.\n           'stop'
    indicates flow not allowed.  'go' indicates\n           flow allowed.\"\n       ::=
    { charPortEntry 11 }\n   charPortOutFlowState OBJECT-TYPE\n       SYNTAX INTEGER
    { none(1), unknown(2), stop(3), go(4) }\n       MAX-ACCESS read-only\n       STATUS
    current\n       DESCRIPTION\n           \"The current operational state of output
    flow\n           control on the port.  'none' indicates not\n           applicable.
    \ 'unknown' indicates this level does not\n           know.  'stop' indicates
    flow not allowed.  'go'\n           indicates flow allowed.\"\n       ::= { charPortEntry
    12 }\n   charPortInCharacters OBJECT-TYPE\n       SYNTAX Counter32\n       MAX-ACCESS
    read-only\n       STATUS current\n       DESCRIPTION\n           \"Total number
    of characters detected as input from\n           the port since system re-initialization
    and while\n           the port operational state was 'up', 'active', or\n           'maintenance',
    including, for example, framing, flow\n           control (i.e. XON and XOFF),
    each occurrence of a\n           BREAK condition, locally-processed input, and
    input\n           sent to all sessions.\"\n       ::= { charPortEntry 13 }\n   charPortOutCharacters
    OBJECT-TYPE\n       SYNTAX Counter32\n       MAX-ACCESS read-only\n       STATUS
    current\n       DESCRIPTION\n           \"Total number of characters detected
    as output to\n           the port since system re-initialization and while\n           the
    port operational state was 'up', 'active', or\n           'maintenance', including,
    for example, framing, flow\n           control (i.e. XON and XOFF), each occurrence
    of a\n           BREAK condition, locally-created output, and output\n           received
    from all sessions.\"\n       ::= { charPortEntry 14 }\n   charPortAdminOrigin
    OBJECT-TYPE\n       SYNTAX INTEGER { dynamic(1), network(2), local(3),\n                        none(4)
    }\n       MAX-ACCESS read-write\n       STATUS current\n       DESCRIPTION\n           \"The
    administratively allowed origin for\n           establishing session on the port.
    \ 'dynamic' allows\n           'network' or 'local' session establishment. 'none'\n
    \          disallows session establishment.\"\n       ::= { charPortEntry 15 }\n
    \  charPortSessionMaximum OBJECT-TYPE\n       SYNTAX INTEGER (-1..2147483647)\n
    \      MAX-ACCESS read-write\n       STATUS current\n       DESCRIPTION\n           \"The
    maximum number of concurrent sessions allowed\n           on the port.  A value
    of -1 indicates no maximum.\n           Setting the maximum to less than the current
    number\n           of sessions has unspecified results.\"\n       ::= { charPortEntry
    16 }\n   charPortSessionNumber OBJECT-TYPE\n       SYNTAX Gauge32\n       MAX-ACCESS
    read-only\n       STATUS current\n       DESCRIPTION\n           \"The number
    of open sessions on the port that are in\n           the connecting, connected,
    or disconnecting state.\"\n       ::= { charPortEntry 17 }\n   charPortSessionIndex
    OBJECT-TYPE\n       SYNTAX INTEGER (0..2147483647)\n       MAX-ACCESS read-only\n
    \      STATUS current\n       DESCRIPTION\n           \"The value of charSessIndex
    for the port's first or\n           only active session.  If the port has no active\n
    \          session, the agent returns the value zero.\"\n       ::= { charPortEntry
    18 }\n   charPortInFlowTypes OBJECT-TYPE\n       SYNTAX OCTET STRING (SIZE (1))\n
    \      MAX-ACCESS read-write\n       STATUS current\n       DESCRIPTION\n           \"The
    port's types of input flow control at the\n           software level.  Hardware-level
    flow control is\n           independently controlled by the appropriate\n           hardware-level
    MIB.\n           A value of zero indicates no flow control.\n           Depending
    on the specific implementation, any or\n           all combinations of flow control
    may be chosen by\n           adding the values:\n           128  xonXoff, recognizing
    XON and XOFF characters\n           64   enqHost, ENQ/ACK to allow input to host\n
    \          32   enqTerm, ACK to allow output to port\n           \"\n       ::=
    { charPortEntry 19 }\n   charPortOutFlowTypes OBJECT-TYPE\n       SYNTAX OCTET
    STRING (SIZE (1))\n       MAX-ACCESS read-write\n       STATUS current\n       DESCRIPTION\n
    \          \"The port's types of output flow control at the\n           software
    level.  Hardware-level flow control is\n           independently controlled by
    the appropriate\n           hardware-level MIB.\n           A value of zero indicates
    no flow control.\n           Depending on the specific implementation, any or\n
    \          all combinations of flow control may be chosen by\n           adding
    the values:\n           128  xonXoff, recognizing XON and XOFF characters\n           64
    \  enqHost, ENQ/ACK to allow input to host\n           32   enqTerm, ACK to allow
    output to port\n           \"\n       ::= { charPortEntry 20 }\n   charPortLowerIfIndex
    OBJECT-TYPE\n       SYNTAX InterfaceIndex\n       MAX-ACCESS read-only\n       STATUS
    current\n       DESCRIPTION\n           \"The ifIndex value of the lower level
    hardware supporting\n           this character port, zero if none.\"\n       ::=
    { charPortEntry 21 }\n   -- the Character Session table\n   charSessTable OBJECT-TYPE\n
    \      SYNTAX SEQUENCE OF CharSessEntry\n       MAX-ACCESS not-accessible\n       STATUS
    current\n       DESCRIPTION\n           \"A list of port session entries.\"\n
    \      ::= { char 3 }\n   charSessEntry OBJECT-TYPE\n       SYNTAX CharSessEntry\n
    \      MAX-ACCESS not-accessible\n       STATUS current\n       DESCRIPTION\n
    \          \"Status and parameter values for a character port\n           session.\"\n
    \      INDEX { charSessPortIndex, charSessIndex }\n       ::= { charSessTable
    1 }\n   CharSessEntry ::=\n       SEQUENCE {\n           charSessPortIndex\n               PortIndex,\n
    \          charSessIndex\n               INTEGER,\n           charSessKill\n               INTEGER,\n
    \          charSessState\n               INTEGER,\n           charSessProtocol\n
    \              AutonomousType,\n           charSessOperOrigin\n               INTEGER,\n
    \          charSessInCharacters\n               Counter32,\n           charSessOutCharacters\n
    \              Counter32,\n           charSessConnectionId\n               InstancePointer,\n
    \          charSessStartTime\n               TimeTicks\n       }\n   charSessPortIndex
    OBJECT-TYPE\n       SYNTAX PortIndex\n       MAX-ACCESS read-only\n       STATUS
    current\n       DESCRIPTION\n           \"The value of charPortIndex for the port
    to which\n           this session belongs.\"\n       ::= { charSessEntry 1 }\n
    \  charSessIndex OBJECT-TYPE\n       SYNTAX INTEGER (1..2147483647)\n       MAX-ACCESS
    read-only\n       STATUS current\n       DESCRIPTION\n           \"The session
    index in the context of the port, a\n           non-zero positive integer.  Session
    indexes within a\n           port need not be sequential.  Session indexes may
    be\n           reused for different ports.  For example, port 1 and\n           port
    3 may both have a session 2 at the same time.\n           Session indexes may
    have any valid integer value,\n           with any meaning convenient to the agent\n
    \          implementation.\"\n       ::= { charSessEntry 2 }\n   charSessKill
    OBJECT-TYPE\n       SYNTAX INTEGER { ready(1), execute(2) }\n       MAX-ACCESS
    read-write\n       STATUS current\n       DESCRIPTION\n           \"A control
    to terminate the session.  In response to\n           a get-request or get-next-request,
    the agent always\n           returns 'ready' as the value.  Setting the value
    to\n           'execute' causes termination.\"\n       ::= { charSessEntry 3 }\n
    \  charSessState OBJECT-TYPE\n       SYNTAX INTEGER { connecting(1), connected(2),\n
    \                       disconnecting(3) }\n       MAX-ACCESS read-only\n       STATUS
    current\n       DESCRIPTION\n           \"The current operational state of the
    session,\n           disregarding flow control.  'connected' indicates\n           that
    character data could flow on the network side\n           of session.  'connecting'
    indicates moving from\n           nonexistent toward 'connected'.  'disconnecting'\n
    \          indicates moving from 'connected' or 'connecting' to\n           nonexistent.\"\n
    \      ::= { charSessEntry 4 }\n   charSessProtocol OBJECT-TYPE\n       SYNTAX
    AutonomousType\n       MAX-ACCESS read-only\n       STATUS current\n       DESCRIPTION\n
    \          \"The network protocol over which the session is\n           running.
    \ Other OBJECT IDENTIFIER values may be\n           defined elsewhere, in association
    with specific\n           protocols.  However, this document assigns those of\n
    \          known interest as of this writing.\"\n       ::= { charSessEntry 5
    }\n   wellKnownProtocols OBJECT IDENTIFIER ::= { char 4 }\n   protocolOther  OBJECT
    IDENTIFIER ::= { wellKnownProtocols 1 }\n   protocolTelnet OBJECT IDENTIFIER ::=
    { wellKnownProtocols 2 }\n   protocolRlogin OBJECT IDENTIFIER ::= { wellKnownProtocols
    3 }\n   protocolLat    OBJECT IDENTIFIER ::= { wellKnownProtocols 4 }\n   protocolX29
    \   OBJECT IDENTIFIER ::= { wellKnownProtocols 5 }\n   protocolVtp    OBJECT IDENTIFIER
    ::= { wellKnownProtocols 6 }\n   charSessOperOrigin OBJECT-TYPE\n       SYNTAX
    INTEGER { unknown(1), network(2), local(3) }\n       MAX-ACCESS read-only\n       STATUS
    current\n       DESCRIPTION\n           \"The session's source of establishment.\"\n
    \      ::= { charSessEntry 6 }\n   charSessInCharacters OBJECT-TYPE\n       SYNTAX
    Counter32\n       MAX-ACCESS read-only\n       STATUS current\n       DESCRIPTION\n
    \          \"This session's subset of charPortInCharacters.\"\n       ::= { charSessEntry
    7 }\n   charSessOutCharacters OBJECT-TYPE\n       SYNTAX Counter32\n       MAX-ACCESS
    read-only\n       STATUS current\n       DESCRIPTION\n           \"This session's
    subset of charPortOutCharacters.\"\n       ::= { charSessEntry 8 }\n   charSessConnectionId
    OBJECT-TYPE\n       SYNTAX InstancePointer\n       MAX-ACCESS read-only\n       STATUS
    current\n       DESCRIPTION\n           \"A reference to additional local MIB
    information.\n           This should be the highest available related MIB,\n           corresponding
    to charSessProtocol, such as Telnet.\n           For example, the value for a
    TCP connection (in the\n           absence of a Telnet MIB) is the object identifier
    of\n           tcpConnState.  If an agent is not configured to have\n           such
    values, the agent returns the object\n           identifier:\n               nullConnectionId
    OBJECT IDENTIFIER ::= { 0 0 }\n           \"\n       ::= { charSessEntry 9 }\n
    \  charSessStartTime OBJECT-TYPE\n       SYNTAX TimeTicks\n       MAX-ACCESS read-only\n
    \      STATUS current\n       DESCRIPTION\n           \"The value of sysUpTime
    in MIB-2 when the session\n           entered connecting state.\"\n       ::=
    { charSessEntry 10 }\n   -- conformance information\n   charConformance OBJECT
    IDENTIFIER ::= { char 5 }\n   charGroups      OBJECT IDENTIFIER ::= { charConformance
    1 }\n   charCompliances OBJECT IDENTIFIER ::= { charConformance 2 }\n   -- compliance
    statements\n   charCompliance MODULE-COMPLIANCE\n       STATUS  current\n       DESCRIPTION\n
    \              \"The compliance statement for SNMPv2 entities\n               which
    have Character hardware interfaces.\"\n       MODULE  -- this module\n           MANDATORY-GROUPS
    { charGroup }\n       ::= { charCompliances 1 }\n   -- units of conformance\n
    \  charGroup    OBJECT-GROUP\n       OBJECTS { charNumber, charPortIndex, charPortName,\n
    \                charPortType, charPortHardware, charPortReset,\n                 charPortAdminStatus,
    charPortOperStatus,\n                 charPortLastChange,\n                 charPortInFlowState,
    charPortOutFlowState,\n                 charPortAdminOrigin, charPortSessionMaximum,\n
    \                charPortInFlowTypes, charPortOutFlowTypes,\n                 charPortInCharacters,
    charPortOutCharacters,\n                 charPortSessionNumber, charPortSessionIndex,\n
    \                charPortLowerIfIndex,\n                 charSessPortIndex, charSessIndex,\n
    \                charSessKill, charSessState,\n                 charSessProtocol,
    charSessOperOrigin,\n                 charSessInCharacters, charSessOutCharacters,\n
    \                charSessConnectionId, charSessStartTime }\n       STATUS  current\n
    \      DESCRIPTION\n               \"A collection of objects providing information\n
    \               applicable to all Character interfaces.\"\n       ::= { charGroups
    1 }\n   END\n"
  title: 4.  Definitions
- contents:
  - "5.  Acknowledgements\n   This memo was produced by the IETF Character MIB Working
    Group.\n"
  title: 5.  Acknowledgements
- contents:
  - "6.  References\n   [1] Case, J., McCloghrie, K., Rose, M., and S. Waldbusser,
    \"Structure\n       of Management Information for version 2 of the Simple Network\n
    \      Management Protocol (SNMPv2)\", RFC 1442, SNMP Research,Inc.,\n       Hughes
    LAN Systems, Dover Beach Consulting, Inc., Carnegie Mellon\n       University,
    April 1993.\n   [2] McCloghrie, K., and M. Rose, Editors, \"Management Information\n
    \      Base for Network Management of TCP/IP-based internets: MIB-II\",\n       STD
    17, RFC 1213, Hughes LAN Systems, Performance Systems\n       International, March
    1991.\n   [3] Galvin, J., and K. McCloghrie, \"Administrative Model for version\n
    \      2 of the Simple Network Management Protocol (SNMPv2)\", RFC 1445,\n       Trusted
    Information Systems, Hughes LAN Systems, April 1993.\n   [4] Case, J., McCloghrie,
    K., Rose, M., and S. Waldbusser, \"Protocol\n       Operations for version 2 of
    the Simple Network Management\n       Protocol (SNMPv2)\", RFC 1448, SNMP Research,Inc.,
    Hughes LAN\n       Systems, Dover Beach Consulting, Inc., Carnegie Mellon\n       University,
    April 1993.\n   [5] McCloghrie, K., and F. Kastenholz, \"Evolution of the Interfaces\n
    \      Group of MIB-II\", RFC 1573, Hughes LAN Systems, FTP Software,\n       January
    1994.\n   [6] Stewart, B., \"Definitions of Managed Objects for RS-232-like\n
    \      Hardware Devices using SMIv2\", RFC 1659, Xyplex, Inc., July 1994.\n   [7]
    Stewart, B., \"Definitions of Managed Objects for Parallel-\n       printer-like
    Hardware Devices using SMIv2\", RFC 1660, Xyplex,\n       Inc., July 1994.\n"
  title: 6.  References
- contents:
  - "7.  Security Considerations\n   Security issues are not discussed in this memo.\n"
  title: 7.  Security Considerations
- contents:
  - "8.  Author's Address\n   Bob Stewart\n   Xyplex, Inc.\n   295 Foster Street\n
    \  Littleton, MA 01460\n   Phone: 508-952-4816\n   Fax: 508-952-4887\n   EMail:
    rlstewart@eng.xyplex.com\n"
  title: 8.  Author's Address
