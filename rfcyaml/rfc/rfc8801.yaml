- contents:
  - '             Discovering Provisioning Domain Names and Data

    '
  title: __initial_text__
- contents:
  - "Abstract\n   Provisioning Domains (PvDs) are defined as consistent sets of network\n
    \  configuration information.  PvDs allows hosts to manage connections\n   to
    multiple networks and interfaces simultaneously, such as when a\n   home router
    provides connectivity through both a broadband and\n   cellular network provider.\n
    \  This document defines a mechanism for explicitly identifying PvDs\n   through
    a Router Advertisement (RA) option.  This RA option announces\n   a PvD identifier,
    which hosts can compare to differentiate between\n   PvDs.  The option can directly
    carry some information about a PvD and\n   can optionally point to PvD Additional
    Information that can be\n   retrieved using HTTP over TLS.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8801.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction\n     1.1.  Specification of Requirements\n
    \  2.  Terminology\n   3.  Provisioning Domain Identification Using Router Advertisements\n
    \    3.1.  PvD Option for Router Advertisements\n     3.2.  Router Behavior\n
    \    3.3.  Non-PvD-Aware Host Behavior\n     3.4.  PvD-Aware Host Behavior\n       3.4.1.
    \ DHCPv6 Configuration Association\n       3.4.2.  DHCPv4 Configuration Association\n
    \      3.4.3.  Connection Sharing by the Host\n       3.4.4.  Usage of DNS Servers\n
    \  4.  Provisioning Domain Additional Information\n     4.1.  Retrieving the PvD
    Additional Information\n     4.2.  Operational Consideration to Providing the
    PvD Additional\n           Information\n     4.3.  PvD Additional Information
    Format\n       4.3.1.  Example\n     4.4.  Detecting Misconfiguration and Misuse\n
    \  5.  Operational Considerations\n     5.1.  Exposing Extra RA Options to PvD-Aware
    Hosts\n     5.2.  Different RAs for PvD-Aware and Non-PvD-Aware Hosts\n     5.3.
    \ Enabling Multihoming for PvD-Aware Hosts\n     5.4.  Providing Additional Information
    to PvD-Aware Hosts\n   6.  Security Considerations\n   7.  Privacy Considerations\n
    \  8.  IANA Considerations\n     8.1.  Change to IPv6 Neighbor Discovery Option
    Formats Registry\n     8.2.  New Entry in the Well-Known URIs Registry\n     8.3.
    \ New Additional Information PvD Keys Registry\n     8.4.  New PvD Option Flags
    Registry\n     8.5.  PvD JSON Media Type Registration\n   9.  References\n     9.1.
    \ Normative References\n     9.2.  Informative References\n   Acknowledgments\n
    \  Authors' Addresses\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Provisioning Domains (PvDs) are defined in [RFC7556] as
    consistent\n   sets of network configuration information.  This information includes\n
    \  properties that are traditionally associated with a single networking\n   interface,
    such as source addresses, DNS configuration, proxy\n   configuration, and gateway
    addresses.\n   Clients that are aware of PvDs can take advantage of multiple network\n
    \  interfaces simultaneously.  This enables using two PvDs in parallel\n   for
    separate connections or for multi-path transports.\n   While most PvDs today are
    discovered implicitly (such as by receiving\n   information via Router Advertisements
    from a router on a network that\n   a client host directly connects to), [RFC7556]
    also defines the\n   notion of Explicit PvDs.  IPsec Virtual Private Networks
    are\n   considered Explicit PvDs, but Explicit PvDs can also be discovered\n   via
    the local network router.  Discovering Explicit PvDs allows two\n   key advancements
    in managing multiple PvDs:\n   1.  The ability to discover and use multiple PvDs
    on a single\n       interface, such as when a local router can provide connectivity\n
    \      to two different Internet Service Providers.\n   2.  The ability to associate
    Additional Information about PvDs to\n       describe the properties of the network.\n
    \  While [RFC7556] defines the concept of Explicit PvDs, it does not\n   define
    the mechanism for discovering multiple Explicit PvDs on a\n   single network and
    their Additional Information.\n   This document specifies a way to identify PvDs
    with Fully Qualified\n   Domain Names (FQDNs), called PvD IDs.  Those identifiers
    are\n   advertised in a new Router Advertisement (RA) [RFC4861] option called\n
    \  the PvD Option, which, when present, associates the PvD ID with all\n   the
    information present in the Router Advertisement as well as any\n   configuration
    object, such as addresses, derived from it.  The PvD\n   Option may also contain
    a set of other RA options, along with an\n   optional inner Router Advertisement
    message header.  These options\n   and optional inner header are only visible
    to 'PvD-aware' hosts,\n   allowing such hosts to have a specialized view of the
    network\n   configuration.\n   Since PvD IDs are used to identify different ways
    to access the\n   Internet, multiple PvDs (with different PvD IDs) can be provisioned\n
    \  on a single host interface.  Similarly, the same PvD ID could be used\n   on
    different interfaces of a host in order to inform that those PvDs\n   ultimately
    provide equivalent services.\n   This document also introduces a mechanism for
    hosts to retrieve\n   optional Additional Information related to a specific PvD
    by means of\n   an HTTP-over-TLS query using a URI derived from the PvD ID.  The\n
    \  retrieved JSON object contains Additional Information that would\n   typically
    be considered too large to be directly included in the\n   Router Advertisement
    but might be considered useful to the\n   applications, or even sometimes users,
    when choosing which PvD should\n   be used.\n   For example, if Alice has both
    a cellular network provider and a\n   broadband provider in her home, her PvD-aware
    devices and\n   applications would be aware of both available uplinks.  These\n
    \  applications could fail-over between these networks or run\n   connections
    over both (potentially using multi-path transports).\n   Applications could also
    select specific uplinks based on the\n   properties of the network; for example,
    if the cellular network\n   provides free high-quality video streaming, a video-streaming\n
    \  application could select that network while most of the other traffic\n   on
    Alice's device uses the broadband provider.\n"
  - contents:
    - "1.1.  Specification of Requirements\n   The key words \"MUST\", \"MUST NOT\",
      \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",
      \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be
      interpreted as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when,
      they appear in all\n   capitals, as shown here.\n"
    title: 1.1.  Specification of Requirements
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   This document uses the following terminology:\n   Provisioning
    Domain (PvD):  A set of network configuration\n      information; for more information,
    see [RFC7556].\n   PvD ID:  A Fully Qualified Domain Name (FQDN) used to identify
    a PvD.\n   Explicit PvD:  A PvD uniquely identified with a PvD ID.  For more\n
    \     information, see [RFC7556].\n   Implicit PvD:  A PvD that, in the absence
    of a PvD ID, is identified\n      by the host interface to which it is attached
    and the address of\n      the advertising router.  See also [RFC7556].\n   PvD-aware
    host:  A host that supports the association of network\n      configuration information
    into PvDs and the use of these PvDs as\n      described in this document.  Also
    named \"PvD-aware node\" in\n      [RFC7556].\n"
  title: 2.  Terminology
- contents:
  - "3.  Provisioning Domain Identification Using Router Advertisements\n   Explicit
    PvDs are identified by a PvD ID.  The PvD ID is a Fully\n   Qualified Domain Name
    (FQDN) that identifies the network operator.\n   Network operators MUST use names
    that they own or manage to avoid\n   naming conflicts.  The same PvD ID MAY be
    used in several access\n   networks when they ultimately provide identical services
    (e.g., in\n   all home networks subscribed to the same service); else, the PvD
    ID\n   MUST be different to follow Section 2.4 of [RFC7556].\n"
  - contents:
    - "3.1.  PvD Option for Router Advertisements\n   This document introduces a Router
      Advertisement (RA) option called\n   the PvD Option.  It is used to convey the
      FQDN identifying a given\n   PvD (see Figure 1), bind the PvD ID with configuration
      information\n   received over DHCPv4 (see Section 3.4.2), enable the use of
      HTTP over\n   TLS to retrieve the PvD Additional Information JSON object (see\n
      \  Section 4), as well as contain any other RA options that would\n   otherwise
      be valid in the RA.\n    0                   1                   2                   3\n
      \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   |     Type
      \     |    Length     |H|L|R|     Reserved    | Delay |\n   |       Sequence
      Number         |                             ...\n   ...                         PvD
      ID FQDN                       ...\n   ...            Router Advertisement message
      header            ...\n   ...             (Only present when R-flag is set)
      \            ...\n   |   Options ...\n   +-+-+-+-+-+-+-+-+-+-+-+-\n                        Figure
      1: PvD Option Format\n   Type:  (8 bits) Set to 21.\n   Length:  (8 bits) The
      length of the option in units of 8 octets,\n      including the Type and Length
      fields, the Router Advertisement\n      message header, if any, as well as the
      RA options that are\n      included within the PvD Option.\n   H-flag:  (1 bit)
      'HTTP' flag stating whether some PvD Additional\n      Information is made available
      through HTTP over TLS, as described\n      in Section 4.\n   L-flag:  (1 bit)
      'Legacy' flag stating whether the PvD is associated\n      with IPv4 information
      assigned using DHCPv4 (see Section 3.4.2).\n   R-flag:  (1 bit) 'Router Advertisement'
      flag stating whether the PvD\n      Option header is followed (right after padding
      to the next 64-bit\n      boundary) by a Router Advertisement message header
      (see\n      Section 4.2 of [RFC4861]).  The usage of the inner message header\n
      \     is described in Section 3.4.\n   Reserved:  (9 bits) Reserved for later
      use.  It MUST be set to zero\n      by the sender and ignored by the receiver.\n
      \  Delay:  (4 bits) Unsigned integer used to delay HTTP GET queries from\n      hosts
      by a randomized backoff (see Section 4.1).  If the H-flag is\n      not set,
      senders SHOULD set the delay to zero, and receivers\n      SHOULD ignore the
      value.\n   Sequence Number:  (16 bits) Sequence number for the PvD Additional\n
      \     Information, as described in Section 4.  If the H-flag is not set,\n      senders
      SHOULD set the Sequence Number to zero, and receivers\n      SHOULD ignore the
      value.\n   PvD ID FQDN:  The FQDN used as PvD ID encoded in DNS format, as\n
      \     described in Section 3.1 of [RFC1035].  Domain name compression as\n      described
      in Section 4.1.4 of [RFC1035] MUST NOT be used.\n   Padding:  Zero or more padding
      octets to the next 8-octet boundary\n      (see Section 4.6 of [RFC4861]).  It
      MUST be set to zero by the\n      sender and ignored by the receiver.\n   RA
      message header:  (16 octets) When the R-flag is set, a full Router\n      Advertisement
      message header as specified in [RFC4861].  The\n      sender MUST set the Type
      field to 134 (the value for \"Router\n      Advertisement\") and set the Code
      field to 0.  Receivers MUST\n      ignore both of these fields.  The Checksum
      field MUST be set to 0\n      by the sender; non-zero checksums MUST be ignored
      by the receiver\n      without causing the processing of the message to fail.
      \ All other\n      fields are to be set and parsed as specified in [RFC4861]
      or any\n      updating documents.\n   Options:  Zero or more RA options that
      would otherwise be valid as\n      part of the Router Advertisement main body
      but are instead\n      included in the PvD Option so as to be ignored by hosts
      that are\n      not PvD aware.\n   Figure 2 shows an example of a PvD Option
      with \"example.org\" as the\n   PvD ID FQDN and includes both a Recursive DNS
      Server (RDNSS) option\n   and a Prefix Information Option.  It has a Sequence
      Number of 123 and\n   indicates the presence of PvD Additional Information that
      is expected\n   to be fetched with a delay factor of 1.\n    0                   1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   | Type: 21      |  Length: 12   |1|0|0|
      \    Reserved    |Delay:1|\n   |       Seq number: 123         |      7        |
      \      e       |\n   |      x        |       a       |      m        |       p
      \      |\n   |      l        |       e       |      3        |       o       |\n
      \  |      r        |       g       |      0        |   0 (padding) |\n   |   0
      (padding) |  0 (padding)  |   0 (padding) |   0 (padding) |\n   |  RDNSS option
      (RFC 8106) length: 5                          ...\n   | Prefix Information Option
      (RFC 4861) length: 4              ...\n                        Figure 2: Example
      PvD Option\n"
    title: 3.1.  PvD Option for Router Advertisements
  - contents:
    - "3.2.  Router Behavior\n   A router MAY send RAs containing one PvD Option but
      MUST NOT include\n   more than one PvD Option in each RA.  The PvD Option MUST
      NOT contain\n   further PvD Options.\n   The PvD Option MAY contain zero, one,
      or more RA options that would\n   otherwise be valid as part of the same RA.
      \ Such options are\n   processed by PvD-aware hosts and ignored by other hosts
      as per\n   Section 4.2 of [RFC4861].\n   In order to provide multiple different
      PvDs, a router MUST send\n   multiple RAs.  RAs sent from different link-local
      source addresses\n   establish distinct Implicit PvDs in the absence of a PvD
      Option.\n   Explicit PvDs MAY share link-local source addresses with an Implicit\n
      \  PvD and any number of other Explicit PvDs.\n   In other words, different
      Explicit PvDs MAY be advertised with RAs\n   using the same link-local source
      address, but different Implicit\n   PvDs, advertised by different RAs, MUST
      use different link-local\n   addresses because these Implicit PvDs are identified
      by the source\n   addresses of the RAs.  If a link-local address on the router
      is\n   changed, then any new RA will be interpreted as a different Implicit\n
      \  PvD by PvD-aware hosts.\n   As specified in [RFC4861] and [RFC6980], when
      the set of options\n   causes the size of an advertisement to exceed the link
      MTU, multiple\n   router advertisements MUST be sent to avoid fragmentation,
      each\n   containing a subset of the options.  In such cases, the PvD Option\n
      \  header (i.e., all fields except the Options field) MUST be repeated\n   in
      all the transmitted RAs.  The options within the Options field MAY\n   be transmitted
      only once, included in one of the transmitted PvD\n   Options.\n"
    title: 3.2.  Router Behavior
  - contents:
    - "3.3.  Non-PvD-Aware Host Behavior\n   As the PvD Option has a new option code,
      non-PvD-aware hosts will\n   simply ignore the PvD Option and all the options
      it contains (see\n   Section 4.2 of [RFC4861]).  This ensures the backward compatibility\n
      \  required in Section 3.3 of [RFC7556].  This behavior allows for a\n   mixed-mode
      network where a mix of PvD-aware and non-PvD-aware hosts\n   coexist.\n"
    title: 3.3.  Non-PvD-Aware Host Behavior
  - contents:
    - "3.4.  PvD-Aware Host Behavior\n   Hosts MUST associate received RAs and included
      configuration\n   information (e.g., Router Valid Lifetime, Prefix Information\n
      \  [RFC4861], Recursive DNS Server [RFC8106], and Routing Information\n   [RFC4191]
      options) with the Explicit PvD identified by the first PvD\n   Option present
      in the received RA, if any, or with the Implicit PvD\n   identified by the host
      interface and the source address of the\n   received RA otherwise.  If an RA
      message header is present both\n   within the PvD Option and outside it, the
      header within the PvD\n   Option takes precedence.\n   In case multiple PvD
      Options are found in a given RA, hosts MUST\n   ignore all but the first PvD
      Option.\n   If a host receives PvD Options flags that it does not recognize\n
      \  (currently in the Reserved field), it MUST ignore these flags.\n   Similarly,
      hosts MUST associate all network configuration objects\n   (e.g., default routers,
      addresses, more specific routes, and DNS\n   Recursive Resolvers) with the PvD
      associated with the RA that\n   provisioned the object.  For example, addresses
      that are generated\n   using a received Prefix Information Option (PIO) are
      associated with\n   the PvD of the last received RA that included the given
      PIO.\n   PvD IDs MUST be compared in a case-insensitive manner as defined by\n
      \  [RFC4343].  For example, \"pvd.example.com.\" or \"PvD.Example.coM.\"\n   would
      refer to the same PvD.\n   While performing PvD-specific operations such as
      resolving names,\n   executing the default address selection algorithm [RFC6724],
      or\n   executing the default router selection algorithm when forwarding\n   packets
      [RFC4861] [RFC4191] [RFC8028], hosts and applications MAY\n   consider only
      the configuration associated with any non-empty subset\n   of PvDs.  For example,
      a host MAY associate a given process with a\n   specific PvD, or a specific
      set of PvDs, while associating another\n   process with another PvD.  A PvD-aware
      application might also be able\n   to select, on a per-connection basis, which
      PvDs should be used.  In\n   particular, constrained devices such as small battery-operated\n
      \  devices (e.g., Internet of Things (IoT)) or devices with limited CPU\n   or
      memory resources may purposefully use a single PvD while ignoring\n   some received
      RAs containing different PvD IDs.\n   The way an application expresses its desire
      to use a given PvD, or a\n   set of PvDs, and the way this selection is enforced
      are out of the\n   scope of this document.  Useful insights about these considerations\n
      \  can be found in [MPVD-API].\n"
    - contents:
      - "3.4.1.  DHCPv6 Configuration Association\n   When a host retrieves stateless
        configuration elements using DHCPv6\n   (e.g., DNS recursive resolvers or
        DNS domain search lists [RFC3646]),\n   they MUST be associated with all the
        Explicit and Implicit PvDs\n   received on the same interface and contained
        in an RA with the O-flag\n   set [RFC4861].\n   When a host retrieves stateful
        assignments using DHCPv6, such\n   assignments MUST be associated with the
        received PvD that was\n   received with RAs with the M-flag set and including
        a matching PIO.\n   A PIO is considered to match a DHCPv6 assignment when
        the IPv6 prefix\n   from the PIO includes the assignment from DHCPv6.  For
        example, if a\n   PvD's associated PIO defines the prefix \"2001:db8:cafe::/64\",
        a\n   DHCPv6 IA_NA message that assigns the address\n   \"2001:db8:cafe::1234:4567\"
        would be considered to match.\n   In cases where an address would be assigned
        by DHCPv6 and no matching\n   PvD could be found, hosts MAY associate the
        assigned address with any\n   Implicit PvD received on the same interface
        or to multiple Implicit\n   PvDs received on the same interface.  This is
        intended to resolve\n   backward-compatibility issues with rare deployments
        choosing to\n   assign addresses with DHCPv6 while not sending any matching
        PIO.\n   Implementations are suggested to flag or log such scenarios as errors\n
        \  to help detect misconfigurations.\n"
      title: 3.4.1.  DHCPv6 Configuration Association
    - contents:
      - "3.4.2.  DHCPv4 Configuration Association\n   Associating DHCPv4 [RFC2131]
        configuration elements with Explicit\n   PvDs allows hosts to treat a set
        of IPv4 and IPv6 configurations as a\n   single PvD with shared properties.
        \ For example, consider a router\n   that provides two different uplinks.
        \ One could be a broadband\n   network that has data rate and streaming properties
        described in PvD\n   Additional Information and that provides both IPv4 and
        IPv6 network\n   access.  The other could be a cellular network that provides
        only\n   IPv6 network access and uses NAT64 [RFC6146].  The broadband network\n
        \  can be represented by an Explicit PvD that points to the Additional\n   Information
        and also marks association with DHCPv4 information.  The\n   cellular network
        can be represented by a different Explicit PvD that\n   is not associated
        with DHCPv4.\n   When a PvD-aware host retrieves configuration elements from
        DHCPv4,\n   the information is associated either with a single Explicit PvD
        on\n   that interface or else with all Implicit PvDs on the same interface.\n
        \  An Explicit PvD indicates its association with DHCPv4 information by\n
        \  setting the L-flag in the PvD Option.  If there is exactly one\n   Explicit
        PvD that sets this flag, hosts MUST associate the DHCPv4\n   information with
        that PvD.  Multiple Explicit PvDs on the same\n   interface marking this flag
        is a misconfiguration, and hosts SHOULD\n   NOT associate the DHCPv4 information
        with any Explicit PvD in this\n   case.\n   If no single Explicit PvD claims
        association with DHCPv4, the\n   configuration elements coming from DHCPv4
        MUST be associated with all\n   Implicit PvDs identified by the interface
        on which the DHCPv4\n   transaction happened.  This maintains existing host
        behavior.\n"
      title: 3.4.2.  DHCPv4 Configuration Association
    - contents:
      - "3.4.3.  Connection Sharing by the Host\n   The situation in which a host
        shares connectivity from an upstream\n   interface (e.g., cellular) to a downstream
        interface (e.g., Wi-Fi) is\n   known as 'tethering'.  Techniques such as ND
        Proxy [RFC4389], 64share\n   [RFC7278], or prefix delegation (e.g., using
        DHCPv6-PD [RFC8415]) may\n   be used for that purpose.\n   Whenever the RAs
        received from the upstream interface contain a PvD\n   Option, hosts that
        are sharing connectivity SHOULD include a PvD\n   Option within the RAs sent
        downstream with:\n   *  The same PvD ID FQDN\n   *  The same H-flag, Delay,
        and Sequence Number values\n   *  The L-flag set whenever the host is sharing
        IPv4 connectivity\n      received from the same upstream interface\n   *  The
        bits in the Reserved field set to 0\n   The values of the R-flag, Router Advertisement
        message header, and\n   Options field depend on whether or not the connectivity
        should be\n   shared only with PvD-aware hosts (see Section 3.2).  In particular,\n
        \  all options received within the upstream PvD Option and included in\n   the
        downstream RA SHOULD be included in the downstream PvD Option.\n"
      title: 3.4.3.  Connection Sharing by the Host
    - contents:
      - "3.4.4.  Usage of DNS Servers\n   PvD-aware hosts can be provisioned with
        recursive DNS servers via RA\n   options passed within an Explicit PvD, via
        RA options associated with\n   an Implicit PvD, via DHCPv6 or DHCPv4, or from
        some other\n   provisioning mechanism that creates an Explicit PvD (such as
        a VPN).\n   In all of these cases, the recursive DNS server addresses SHOULD
        be\n   associated with the corresponding PvD.  Specifically, queries sent
        to\n   a configured recursive DNS server SHOULD be sent from a local IP\n
        \  address that was provisioned for the PvD via RA or DHCP.  Answers\n   received
        from the DNS server SHOULD only be used on the same PvD.\n   PvD-aware applications
        will be able to select which PvD(s) to use for\n   DNS resolution and connections,
        which allows them to effectively use\n   multiple Explicit PvDs.  In order
        to support non-PvD-aware\n   applications, however, PvD-aware hosts SHOULD
        ensure that non-PvD-\n   aware name resolution APIs like \"getaddrinfo\" only
        use resolvers from\n   a single PvD for a given query.  Handling DNS across
        PvDs is\n   discussed in Section 5.2.1 of [RFC7556], and PvD APIs are discussed\n
        \  in Section 6 of [RFC7556].\n   Maintaining the correct usage of DNS within
        PvDs avoids various\n   practical errors such as:\n   *  A PvD associated
        with a VPN or otherwise private network may\n      provide DNS answers that
        contain addresses inaccessible over\n      another PvD.  This includes the
        DNS queries to retrieve PvD\n      Additional Information, which could otherwise
        send identifying\n      information to the recursive DNS system (see Section
        4.1).\n   *  A PvD that uses a NAT64 [RFC6146] and DNS64 [RFC6147] will\n
        \     synthesize IPv6 addresses in DNS answers that are not globally\n      routable
        and would be invalid on other PvDs.  Conversely, an IPv4\n      address resolved
        via DNS on another PvD cannot be directly used on\n      a NAT64 network.\n"
      title: 3.4.4.  Usage of DNS Servers
    title: 3.4.  PvD-Aware Host Behavior
  title: 3.  Provisioning Domain Identification Using Router Advertisements
- contents:
  - "4.  Provisioning Domain Additional Information\n   Additional information about
    the network characteristics can be\n   retrieved based on the PvD ID.  This set
    of information is called PvD\n   Additional Information and is encoded as a JSON
    object [RFC8259].\n   This JSON object is restricted to the Internet JSON (I-JSON)
    profile,\n   as defined in [RFC7493].\n   The purpose of this JSON object is to
    provide Additional Information\n   to applications on a client host about the
    connectivity that is\n   provided using a given interface and source address.
    \ It typically\n   includes data that would be considered too large, or not critical\n
    \  enough, to be provided within an RA option.  The information\n   contained
    in this object MAY be used by the operating system, network\n   libraries, applications,
    or users in order to decide which set of\n   PvDs should be used for which connection,
    as described in\n   Section 3.4.\n   The Additional Information related to a PvD
    is specifically intended\n   to be optional and is targeted at optimizing or informing
    the\n   behavior of user-facing hosts.  This information can be extended to\n
    \  provide hints for host system behavior (such as captive portal or\n   walled-garden
    PvD detection) or application behavior (describing\n   application-specific services
    offered on a given PvD).  This content\n   may not be appropriate for light-weight
    IoT devices.  IoT devices\n   might need only a subset of the information and
    would in some cases\n   prefer a smaller representation like Concise Binary Object\n
    \  Representation (CBOR) [RFC7049].  Delivering a reduced version of the\n   PvD
    Additional Information designed for such devices is not defined\n   in this document.\n"
  - contents:
    - "4.1.  Retrieving the PvD Additional Information\n   When the H-flag of the
      PvD Option is set, hosts MAY attempt to\n   retrieve the PvD Additional Information
      associated with a given PvD\n   by performing an HTTP-over-TLS [RFC2818] GET
      query to \"https://<PvD-\n   ID>/.well-known/pvd\".  Inversely, hosts MUST NOT
      do so whenever the\n   H-flag is not set.\n   Recommendations for how to use
      TLS securely can be found in\n   [RFC7525].\n   When a host retrieves the PvD
      Additional Information, it MUST verify\n   that the TLS server certificate is
      valid for the performed request,\n   specifically, that a DNS-ID [RFC6125] on
      the certificate is equal to\n   the PvD ID expressed as an FQDN.  This validation
      indicates that the\n   owner of the FQDN authorizes its use with the prefix
      advertised by\n   the router.  If this validation fails, hosts MUST close the\n
      \  connection and treat the PvD as if it has no Additional Information.\n   HTTP
      requests and responses for PvD Additional Information use the\n   \"application/pvd+json\"
      media type (see Section 8.5).  Clients SHOULD\n   include this media type as
      an Accept header field in their GET\n   requests, and servers MUST mark this
      media type as their Content-Type\n   header field in responses.\n   Note that
      the DNS name resolution of the PvD ID, any connections made\n   for certificate
      validation (such as Online Certificate Status\n   Protocol (OCSP) [RFC6960]),
      and the HTTP request itself MUST be\n   performed using the considered PvD.
      \ In other words, the name\n   resolution, PKI checks, source address selection,
      as well as the\n   next-hop router selection MUST be performed while exclusively
      using\n   the set of configuration information attached with the PvD, as\n   defined
      in Section 3.4.  In some cases, it may therefore be necessary\n   to wait for
      an address to be available for use (e.g., once the\n   Duplicate Address Detection
      or DHCPv6 processes are complete) before\n   initiating the HTTP-over-TLS query.
      \ In order to address privacy\n   concerns around linkability of the PvD HTTP
      connection with future\n   user-initiated connections, if the host has a temporary
      address per\n   [RFC4941] in this PvD, then it SHOULD use a temporary address
      to\n   fetch the PvD Additional Information and MAY deprecate the used\n   temporary
      address and generate a new temporary address afterward.\n   If the HTTP status
      of the answer is greater than or equal to 400, the\n   host MUST close its connection
      and consider that there is no PvD\n   Additional Information.  If the HTTP status
      of the answer is between\n   300 and 399, inclusive, it MUST follow the redirection(s).
      \ If the\n   HTTP status of the answer is between 200 and 299, inclusive, the\n
      \  response is expected to be a single JSON object.\n   After retrieval of the
      PvD Additional Information, hosts MUST\n   remember the last Sequence Number
      value received in an RA including\n   the same PvD ID.  Whenever a new RA for
      the same PvD is received with\n   a different Sequence Number value, or whenever
      the expiry date for\n   the additional information is reached, hosts MUST deprecate
      the\n   Additional Information and stop using it.\n   Hosts retrieving a new
      PvD Additional Information object MUST check\n   for the presence and validity
      of the mandatory fields specified in\n   Section 4.3.  A retrieved object including
      an expiration time that is\n   already past or missing a mandatory element MUST
      be ignored.\n   In order to avoid synchronized queries toward the server hosting
      the\n   PvD Additional Information when an object expires, object updates are\n
      \  delayed by a randomized backoff time.\n   *  When a host performs a JSON
      object update after it detected a\n      change in the PvD Option Sequence Number,
      it MUST add a delay\n      before sending the query.  The target time for the
      delay is\n      calculated as a random time between zero and 2^((10 + Delay))\n
      \     milliseconds, where 'Delay' corresponds to the 4-bit unsigned\n      integer
      in the last received PvD Option.\n   *  When a host last retrieved a JSON object
      at time A that includes\n      an expiry time B using the \"expires\" key, and
      the host is\n      configured to keep the PvD Additional Information up to date,
      it\n      MUST add some randomness into its calculation of the time to fetch\n
      \     the update.  The target time for fetching the updated object is\n      calculated
      as a uniformly random time in the interval [(B-A)/2,B].\n   In the example in
      Figure 2, the Delay field value is 1; this means\n   that the host calculates
      its delay by choosing a uniformly random\n   time between 0 and 2^((10 + 1))
      milliseconds, i.e., between 0 and\n   2048 milliseconds.\n   Since the Delay
      value is directly within the PvD Option rather than\n   the object itself, an
      operator may perform a push-based update by\n   incrementing the Sequence Number
      value while changing the Delay value\n   depending on the criticality of the
      update and the capacity of its\n   PvD Additional Information servers.\n   In
      addition to adding a random delay when fetching Additional\n   Information,
      hosts MUST enforce a minimum time between requesting\n   Additional Information
      for a given PvD on the same network.  This\n   minimum time is RECOMMENDED to
      be 10 seconds, in order to avoid hosts\n   causing a denial-of-service on the
      PvD server.  Hosts also MUST limit\n   the number of requests that are made
      to different PvD Additional\n   Information servers on the same network within
      a short period of\n   time.  A RECOMMENDED value is to issue no more than five
      PvD\n   Additional Information requests in total on a given network within 10\n
      \  seconds.  For more discussion, see Section 6.\n   The PvD Additional Information
      object includes a set of IPv6 prefixes\n   (under the key \"prefixes\") that
      MUST be checked against all the\n   Prefix Information Options advertised in
      the RA.  If any of the\n   prefixes included in any associated PIO is not covered
      by at least\n   one of the listed prefixes, the PvD Additional Information MUST
      be\n   considered to be a misconfiguration and MUST NOT be used by the host.\n
      \  See Section 4.4 for more discussion on handling such\n   misconfigurations.\n
      \  If the request for PvD Additional Information fails due to a TLS\n   certificate
      validation error, an HTTP error, or because the retrieved\n   file does not
      contain valid PvD JSON, hosts MUST close any connection\n   used to fetch the
      PvD Additional Information and MUST NOT request the\n   information for that
      PvD ID again for the duration of the local\n   network attachment.  If a host
      detects 10 or more such failures to\n   fetch PvD Additional Information, the
      local network is assumed to be\n   misconfigured or under attack and the host
      MUST NOT make any further\n   requests for any PvD Additional Information, belonging
      to any PvD ID,\n   for the duration of the local network attachment.  For more\n
      \  discussion, see Section 6.\n"
    title: 4.1.  Retrieving the PvD Additional Information
  - contents:
    - "4.2.  Operational Consideration to Providing the PvD Additional\n      Information\n
      \  Whenever the H-flag is set in the PvD Option, a valid PvD Additional\n   Information
      object MUST be made available to all hosts receiving the\n   RA by the network
      operator.  In particular, when a captive portal is\n   present, hosts MUST still
      be allowed to perform DNS, certificate\n   validation, and HTTP-over-TLS operations
      related to the retrieval of\n   the object, even before logging into the captive
      portal.\n   Routers SHOULD increment the PvD Option Sequence Number by one\n
      \  whenever a new PvD Additional Information object is available and\n   should
      be retrieved by hosts.  If the value exceeds what can be\n   stored in the Sequence
      Number field, it MUST wrap back to zero.\n   The server providing the JSON files
      SHOULD also check whether the\n   client address is contained by the prefixes
      listed in the Additional\n   Information and SHOULD return a 403 response code
      if there is no\n   match.\n"
    title: 4.2.  Operational Consideration to Providing the PvD Additional
  - contents:
    - "4.3.  PvD Additional Information Format\n   The PvD Additional Information
      is a JSON object.\n   The following table presents the mandatory keys, which
      MUST be\n   included in the object:\n    | JSON key   | Description   | Type
      \     | Example                |\n    | identifier | PvD ID FQDN   | String
      \   | \"pvd.example.com.\"     |\n    | expires    | Date after    | [RFC3339]
      | \"2020-05-23T06:00:00Z\" |\n    |            | which this    | Date      |
      \                       |\n    |            | object is no  |           |                        |\n
      \   |            | longer valid  |           |                        |\n    |
      prefixes   | Array of IPv6 | Array of  | [\"2001:db8:1::/48\",    |\n    |            |
      prefixes      | strings   | \"2001:db8:4::/48\"]     |\n    |            | valid
      for     |           |                        |\n    |            | this PvD
      \     |           |                        |\n   A retrieved object that does
      not include all three of these keys at\n   the root of the JSON object MUST
      be ignored.  All three keys need to\n   be validated; otherwise, the object
      MUST be ignored.  The value\n   stored for \"identifier\" MUST be matched against
      the PvD ID FQDN\n   presented in the PvD Option using the comparison mechanism
      described\n   in Section 3.4.  The value stored for \"expires\" MUST be a valid
      date\n   in the future.  If the PIO of the received RA is not covered by at\n
      \  least one of the \"prefixes\" key, the retrieved object SHOULD be\n   ignored.\n
      \  The following table presents some optional keys that MAY be included\n   in
      the object.\n   | JSON key   | Description          | Type     | Example            |\n
      \  | dnsZones   | DNS zones searchable | Array    | [\"example.com\",    |\n
      \  |            | and accessible       | of       | \"sub.example.com\"] |\n
      \  | noInternet | No Internet; set to  | Boolean  | true               |\n   |
      \           | \"true\" when the PvD  |          |                    |\n   |
      \           | is restricted        |          |                    |\n   It
      is worth noting that the JSON format allows for extensions.\n   Whenever an
      unknown key is encountered, it MUST be ignored along with\n   its associated
      elements.\n   Private-use or experimental keys MAY be used in the JSON dictionary.\n
      \  In order to avoid such keys colliding with the keys registered by\n   IANA,
      implementers or vendors defining private-use or experimental\n   keys MUST create
      sub-dictionaries.  If a set of PvD Additional\n   Information keys are defined
      by an organization that has a formal URN\n   namespace [IANA-URN], the URN namespace
      SHOULD be used as the top-\n   level JSON key for the sub-dictionary.  For other
      private uses, the\n   sub-dictionary key SHOULD follow the format of \"vendor-*\",
      where the\n   \"*\" is replaced by the implementer's or vendor's identifier.
      \ For\n   example, keys specific to the FooBar organization could use \"vendor-\n
      \  foobar\".  If a host receives a sub-dictionary with an unknown key,\n   the
      host MUST ignore the contents of the sub-dictionary.\n"
    - contents:
      - "4.3.1.  Example\n   The following two examples show how the JSON keys defined
        in this\n   document can be used:\n   {\n     \"identifier\": \"cafe.example.com.\",\n
        \    \"expires\": \"2020-05-23T06:00:00Z\",\n     \"prefixes\": [\"2001:db8:1::/48\",
        \"2001:db8:4::/48\"],\n   }\n   {\n     \"identifier\": \"company.foo.example.com.\",\n
        \    \"expires\": \"2020-05-23T06:00:00Z\",\n     \"prefixes\": [\"2001:db8:1::/48\",
        \"2001:db8:4::/48\"],\n     \"vendor-foo\":\n       {\n           \"private-key\":
        \"private-value\",\n       },\n   }\n"
      title: 4.3.1.  Example
    title: 4.3.  PvD Additional Information Format
  - contents:
    - "4.4.  Detecting Misconfiguration and Misuse\n   Hosts MUST validate the TLS
      server certificate when retrieving PvD\n   Additional Information, as detailed
      in Section 4.1.\n   Hosts MUST verify that all prefixes in all the RA PIOs are
      covered by\n   a prefix from the PvD Additional Information.  An adversarial
      router\n   attempting to spoof the definition of an Explicit PvD, without the\n
      \  ability to modify the PvD Additional Information, would need to\n   perform
      IPv6-to-IPv6 Network Prefix Translation (NPTv6) [RFC6296] in\n   order to circumvent
      this check.  Thus, this check cannot prevent all\n   spoofing, but it can detect
      misconfiguration or mismatched routers\n   that are not adding a NAT.\n   If
      NPTv6 is being added in order to spoof PvD ownership, the HTTPS\n   server for
      Additional Information can detect this misconfiguration.\n   The HTTPS server
      SHOULD validate the source addresses of incoming\n   connections (see Section
      4.1).  This check gives reasonable assurance\n   that NPTv6 was not used and
      restricts the information to the valid\n   network users.If the PvD does not
      provision IPv4 (it does not include\n   the L-flag in the RA), the server cannot
      validate the source\n   addresses of connections using IPv4.  Thus, the PvD
      ID FQDN for such\n   PvDs SHOULD NOT have a DNS A record.\n"
    title: 4.4.  Detecting Misconfiguration and Misuse
  title: 4.  Provisioning Domain Additional Information
- contents:
  - "5.  Operational Considerations\n   This section describes some example use cases
    of PvDs.  For the sake\n   of simplicity, the RA messages will not be described
    in the usual\n   ASCII art but rather in an indented list.  Values in the PvD
    Option\n   header that are not included in the example are assumed to be zero
    or\n   false (such as the H-flag, Sequence Number, and Delay fields).\n"
  - contents:
    - "5.1.  Exposing Extra RA Options to PvD-Aware Hosts\n   In this example, there
      is one RA message sent by the router.  This\n   message contains some options
      applicable to all hosts on the network\n   and also a PvD Option that also contains
      other options only visible\n   to PvD-aware hosts.\n   *  RA Header: router
      lifetime = 6000\n   *  Prefix Information Option: length = 4, prefix = 2001:db8:cafe::/64\n
      \  *  PvD Option header: length = 3 + 5 + 4, PvD ID FQDN = example.org.,\n      R-flag
      = 0 (actual length of the header with padding 24 bytes = 3\n      * 8 bytes)\n
      \     -  Recursive DNS Server: length = 5, addresses =\n         [2001:db8:cafe::53,
      2001:db8:f00d::53]\n      -  Prefix Information Option: length = 4, prefix =\n
      \        2001:db8:f00d::/64\n   Note that a PvD-aware host will receive two
      different prefixes,\n   \"2001:db8:cafe::/64\" and \"2001:db8:f00d::/64\", both
      associated with\n   the same PvD (identified by \"example.org.\").  A non-PvD-aware
      host\n   will only receive one prefix, \"2001:db8:cafe::/64\".\n"
    title: 5.1.  Exposing Extra RA Options to PvD-Aware Hosts
  - contents:
    - "5.2.  Different RAs for PvD-Aware and Non-PvD-Aware Hosts\n   It is expected
      that for some years, networks will have a mixed\n   environment of PvD-aware
      hosts and non-PvD-aware hosts.  If there is\n   a need to give specific information
      to PvD-aware hosts only, then it\n   is RECOMMENDED to send two RA messages,
      one for each class of hosts.\n   This approach allows for two distinct sets
      of configuration\n   information to be sent in a way that will not disrupt non-PvD-aware\n
      \  hosts.  It also lowers the risk that a single RA message will\n   approach
      its MTU limit due to duplicated information.\n   If two RA messages are sent
      for this reason, they MUST be sent from\n   two different link-local source
      addresses (Section 3.2).  For\n   example, here is the RA sent for non-PvD-aware
      hosts:\n   *  RA Header: router lifetime = 6000 (non-PvD-aware hosts will use\n
      \     this router as a default router)\n   *  Prefix Information Option: length
      = 4, prefix = 2001:db8:cafe::/64\n   *  Recursive DNS Server Option: length
      = 3, addresses =\n      [2001:db8:cafe::53]\n   *  PvD Option header: length
      = 3 + 2, PvD ID FQDN = foo.example.org.,\n      R-flag = 1 (actual length of
      the header 24 bytes = 3 * 8 bytes)\n      -  RA Header: router lifetime = 0
      (PvD-aware hosts will not use\n         this router as a default router), implicit
      length = 2\n   And here is the RA sent for PvD-aware hosts:\n   *  RA Header:
      router lifetime = 0 (non-PvD-aware hosts will not use\n      this router as
      a default router)\n   *  PvD Option header: length = 3 + 2 + 4 + 3, PvD ID FQDN
      =\n      bar.example.org., R-flag = 1 (actual length of the header 24 bytes\n
      \     = 3 * 8 bytes)\n      -  RA Header: router lifetime = 1600 (PvD-aware
      hosts will use\n         this router as a default router), implicit length =
      2\n      -  Prefix Information Option: length = 4, prefix =\n         2001:db8:f00d::/64\n
      \     -  Recursive DNS Server Option: length = 3, addresses =\n         [2001:db8:f00d::53]\n
      \  In the above example, non-PvD-aware hosts will only use the first\n   listed
      RA sent by their default router and use the\n   \"2001:db8:cafe::/64\" prefix.
      \ PvD-aware hosts will autonomously\n   configure addresses from both PIOs but
      will only use the source\n   address in \"2001:db8:f00d::/64\" to communicate
      past the first-hop\n   router since only the router sending the second RA will
      be used as\n   the default router; similarly, they will use the DNS server\n
      \  \"2001:db8:f00d::53\" when communicating from this address.\n"
    title: 5.2.  Different RAs for PvD-Aware and Non-PvD-Aware Hosts
  - contents:
    - "5.3.  Enabling Multihoming for PvD-Aware Hosts\n   In this example, the goal
      is to have one prefix from one RA be usable\n   by both non-PvD-aware and PvD-aware
      hosts and to have another prefix\n   usable only by PvD-aware hosts.  This allows
      PvD-aware hosts to be\n   able to effectively multihome on the network.\n   The
      first RA is usable by all hosts.  The only difference for PvD-\n   aware hosts
      is that they can explicitly identify the PvD ID\n   associated with the RA.
      \ PvD-aware hosts will also use this prefix to\n   communicate with non-PvD-aware
      hosts on the same network.\n   *  RA Header: router lifetime = 6000 (non-PvD-aware
      hosts will use\n      this router as a default router)\n   *  Prefix Information
      Option: length = 4, prefix = 2001:db8:cafe::/64\n   *  Recursive DNS Server
      Option: length = 3, addresses =\n      [2001:db8:cafe::53]\n   *  PvD Option
      header: length = 3, PvD ID FQDN = foo.example.org.,\n      R-flag = 0 (actual
      length of the header 24 bytes = 3 * 8 bytes)\n   The second RA contains a prefix
      usable only by PvD-aware hosts.  Non-\n   PvD-aware hosts will ignore this RA;
      hence, only the PvD-aware hosts\n   will be multihomed.\n   *  RA Header: router
      lifetime = 0 (non-PvD-aware hosts will not use\n      this router as a default
      router)\n   *  PvD Option header: length = 3 + 2 + 4 + 3, PvD ID FQDN =\n      bar.example.org.,
      R-flag = 1 (actual length of the header 24 bytes\n      = 3 * 8 bytes)\n      -
      \ RA Header: router lifetime = 1600 (PvD-aware hosts will use\n         this
      router as a default router), implicit length = 2\n      -  Prefix Information
      Option: length = 4, prefix =\n         2001:db8:f00d::/64\n      -  Recursive
      DNS Server Option: length = 3, addresses =\n         [2001:db8:f00d::53]\n   Note:
      the above examples assume that the router has received its PvD\n   IDs from
      upstream routers or via some other configuration mechanism.\n   Another document
      could define ways for the router to generate its own\n   PvD IDs to allow the
      above scenario in the absence of PvD ID\n   provisioning.\n"
    title: 5.3.  Enabling Multihoming for PvD-Aware Hosts
  - contents:
    - "5.4.  Providing Additional Information to PvD-Aware Hosts\n   In this example,
      the router indicates that it provides Additional\n   Information using the H-flag.
      \ The Sequence Number on the PvD Option\n   is set to 7 in this example.\n   *
      \ RA Header: router lifetime = 6000\n   *  Prefix Information Option: length
      = 4, prefix = 2001:db8:cafe::/64\n   *  Recursive DNS Server Option: length
      = 3, addresses =\n      [2001:db8:cafe::53]\n   *  PvD Option header: length
      = 3, PvD ID FQDN = cafe.example.com.,\n      Sequence Number = 7, R-flag = 0,
      H-flag = 1 (actual length of the\n      header with padding 24 bytes = 3 * 8
      bytes)\n   A PvD-aware host will fetch <https://cafe.example.com/.well-known/\n
      \  pvd> to get the additional information.  The following example shows\n   a
      GET request that the host sends, in HTTP/2 syntax [RFC7540]:\n   :method = GET\n
      \  :scheme = https\n   :authority = cafe.example.com\n   :path = /.well-known/pvd\n
      \  accept = application/pvd+json\n   The HTTP server will respond with the JSON
      Additional Information:\n   :status = 200\n   content-type = application/pvd+json\n
      \  content-length = 116\n   {\n     \"identifier\": \"cafe.example.com.\",\n
      \    \"expires\": \"2020-05-23T06:00:00Z\",\n     \"prefixes\": [\"2001:db8:cafe::/48\"],\n
      \  }\n   At this point, the host has the PvD Additional Information and knows\n
      \  the expiry time.  When either the expiry time passes or a new\n   Sequence
      Number is provided in an RA, the host will re-fetch the\n   Additional Information.\n
      \  For example, if the router sends a new RA with the Sequence Number\n   set
      to 8, the host will re-fetch the Additional Information:\n   *  PvD Option header:
      length = 3 + 5 + 4 , PvD ID FQDN =\n      cafe.example.com., Sequence Number
      = 8, R-flag = 0, H-flag = 1\n      (actual length of the header with padding
      24 bytes = 3 * 8 bytes)\n   However, if the router sends a new RA, but the Sequence
      Number has\n   not changed, the host would not re-fetch the Additional Information\n
      \  (until and unless the expiry time of the Additional Information has\n   passed).\n"
    title: 5.4.  Providing Additional Information to PvD-Aware Hosts
  title: 5.  Operational Considerations
- contents:
  - "6.  Security Considerations\n   Since the PvD Option can contain an RA header
    and other RA options,\n   any security considerations that apply for specific
    RA options\n   continue to apply when used within a PvD Option.\n   Although some
    solutions such as IPsec or SEcure Neighbor Discovery\n   (SeND) [RFC3971] can
    be used in order to secure the IPv6 Neighbor\n   Discovery Protocol, in practice,
    actual deployments largely rely on\n   link-layer or physical-layer security mechanisms
    (e.g., 802.1x\n   [IEEE8021X]) in conjunction with RA-Guard [RFC6105].\n   If
    multiple RAs are sent for a single PvD to avoid fragmentation,\n   dropping packets
    can lead to processing only part of a PvD Option,\n   which could lead to hosts
    receiving only part of the contained\n   options.  As discussed in Section 3.2,
    routers MUST include the PvD\n   Option in all fragments generated.\n   This specification
    does not improve the Neighbor Discovery Protocol\n   security model but simply
    validates that the owner of the PvD FQDN\n   authorizes its use with the prefix
    advertised by the router.  In\n   combination with implicit trust in the local
    router (if present),\n   this gives the host some level of assurance that the
    PvD is\n   authorized for use in this environment.  However, when the local\n
    \  router cannot be trusted, no such guarantee is available.\n   It must be noted
    that Section 4.4 of this document only provides\n   reasonable assurance against
    misconfiguration but does not prevent a\n   hostile network access provider from
    advertising incorrect\n   information that could lead applications or hosts to
    select a hostile\n   PvD.  However, a host that correctly implements the multiple
    PvD\n   architecture [RFC7556] using the mechanism described in this document\n
    \  will be less susceptible to some attacks than a host that does not by\n   being
    able to check for the various misconfigurations or\n   inconsistencies described
    in this document.\n   Since expiration times provided in PvD Additional Information
    use\n   absolute time, these values can be skewed due to clock skew or for\n   hosts
    without an accurate time base.  Such time values MUST NOT be\n   used for security-sensitive
    functionality or decisions.\n   An attacker generating RAs on a local network
    can use the H-flag and\n   the PvD ID to cause hosts on the network to make requests
    for PvD\n   Additional Information from servers.  This can become a denial-of-\n
    \  service attack, in which an attacker can amplify its attack by\n   triggering
    TLS connections to arbitrary servers in response to\n   sending UDP packets containing
    RA messages.  To mitigate this attack,\n   hosts MUST:\n   *  limit the rate at
    which they fetch a particular PvD's Additional\n      Information;\n   *  limit
    the rate at which they fetch any PvD Additional Information\n      on a given
    local network;\n   *  stop making requests for a PvD ID that does not respond
    with valid\n      JSON; and\n   *  stop making requests for all PvD IDs once a
    certain number of\n      failures is reached on a particular network.\n   Details
    are provided in Section 4.1.  This attack can be targeted at\n   generic web servers,
    in which case the host behavior of stopping\n   requesting for any server that
    doesn't behave like a PvD Additional\n   Information server is critical.  Limiting
    requests for a specific PvD\n   ID might not be sufficient if the attacker changes
    the PvD ID values\n   quickly, so hosts also need to stop requesting if they detect\n
    \  consistent failure when on a network that is under attack.  For cases\n   in
    which an attacker is pointing hosts at a valid PvD Additional\n   Information
    server (but one that is not actually associated with the\n   local network), the
    server SHOULD reject any requests that do not\n   originate from the expected
    IPv6 prefix as described in Section 4.2.\n"
  title: 6.  Security Considerations
- contents:
  - "7.  Privacy Considerations\n   Retrieval of the PvD Additional Information over
    HTTPS requires early\n   communications between the connecting host and a server
    that may be\n   located further than the first-hop router.  Although this server
    is\n   likely to be located within the same administrative domain as the\n   default
    router, this property can't be ensured.  To minimize the\n   leakage of identity
    information while retrieving the PvD Additional\n   Information, hosts SHOULD
    make use of an IPv6 temporary address and\n   SHOULD NOT include any privacy-sensitive
    data, such as a User-Agent\n   header field or an HTTP cookie.\n   Hosts might
    not always fetch PvD Additional Information, depending on\n   whether or not they
    expect to use the information.  However, if a\n   host allows requesting Additional
    Information for certain PvD IDs, an\n   attacker could send various PvD IDs in
    RAs to detect which PvD IDs\n   are allowed by the client.  To avoid this, hosts
    SHOULD either fetch\n   Additional Information for all eligible PvD IDs on a given
    local\n   network or fetch the information for none of them.\n   From a user privacy
    perspective, retrieving the PvD Additional\n   Information is not different from
    establishing a first connection to\n   a remote server or even performing a single
    DNS lookup.  For example,\n   most operating systems already perform early queries
    to static web\n   sites, such as <http://captive.example.com/hotspot-detect.html>,
    in\n   order to detect the presence of a captive portal.\n   The DNS queries associated
    with the PvD Additional Information MUST\n   use the DNS servers indicated by
    the associated PvD, as described in\n   Section 4.1.  This ensures the name of
    the PvD Additional Information\n   server is not unintentionally sent on another
    network, thus leaking\n   identifying information about the networks with which
    the client is\n   associated.\n   There may be some cases where hosts, for privacy
    reasons, should\n   refrain from accessing servers that are located outside a
    certain\n   network boundary.  In practice, this could be implemented as an\n
    \  allowed list of 'trusted' FQDNs and/or IP prefixes that the host is\n   allowed
    to communicate with.  In such scenarios, the host SHOULD\n   check that the provided
    PvD ID, as well as the IP address that it\n   resolves into, are part of the allowed
    list.\n   Network operators SHOULD restrict access to PvD Additional\n   Information
    to only expose it to hosts that are connected to the\n   local network, especially
    if the Additional Information would provide\n   information about local network
    configuration to attackers.  This can\n   be implemented by allowing access from
    the addresses and prefixes\n   that the router provides for the PvD, which will
    match the prefixes\n   contained in the PvD Additional Information.  This technique
    is\n   described in Section 4.2.\n"
  title: 7.  Privacy Considerations
- contents:
  - '8.  IANA Considerations

    '
  - contents:
    - "8.1.  Change to IPv6 Neighbor Discovery Option Formats Registry\n   IANA has
      removed the 'reclaimable' tag for value 21 for the PvD\n   Option in the \"IPv6
      Neighbor Discovery Option Formats\" registry.\n"
    title: 8.1.  Change to IPv6 Neighbor Discovery Option Formats Registry
  - contents:
    - "8.2.  New Entry in the Well-Known URIs Registry\n   IANA has added a new entry
      in the \"Well-Known URIs\" registry\n   [RFC8615] with the following information:\n
      \  URI suffix: pvd\n   Change controller: IETF\n   Specification document: RFC
      8801\n   Status: permanent\n   Related information: N/A\n"
    title: 8.2.  New Entry in the Well-Known URIs Registry
  - contents:
    - "8.3.  New Additional Information PvD Keys Registry\n   IANA has created and
      will maintain a new registry called \"Additional\n   Information PvD Keys\",
      which reserves JSON keys for use in PvD\n   Additional Information.  The initial
      contents of this registry are\n   given in Section 4.3 (both the table of mandatory
      keys and the table\n   of optional keys).\n   The status of a key as mandatory
      or optional is intentionally not\n   denoted in the table to allow for flexibility
      in future use cases.\n   Any new assignments of keys will be considered as optional
      for the\n   purpose of the mechanism described in this document.\n   New assignments
      in the \"Additional Information PvD Keys\" registry\n   will be administered
      by IANA through Expert Review [RFC8126].\n   Experts are requested to ensure
      that defined keys do not overlap in\n   names or semantics and that they represent
      non-vendor-specific use\n   cases.  Vendor-specific keys SHOULD use sub-dictionaries,
      as\n   described in Section 4.3.\n   IANA has placed the \"Additional Information
      PvD Keys\" registry within\n   a new registry entitled \"Provisioning Domains
      (PvDs)\".\n"
    title: 8.3.  New Additional Information PvD Keys Registry
  - contents:
    - "8.4.  New PvD Option Flags Registry\n   IANA has also created and will maintain
      a new registry entitled \"PvD\n   Option Flags\".  This new registry reserves
      bit positions from 0 to 11\n   to be used in the PvD Option bitmask.  This document
      assigns bit\n   positions 0, 1, and 2 as shown in the table below.  Future\n
      \  assignments require Standards Action [RFC8126].\n                     | Bit
      \ | Name       | Reference |\n                     | 0    | H-flag     | RFC
      8801  |\n                     | 1    | L-flag     | RFC 8801  |\n                     |
      2    | R-flag     | RFC 8801  |\n                     | 3-11 | Unassigned |
      \          |\n   Since these flags apply to an IPv6 Router Advertisement Option,
      IANA\n   has placed this registry under the existing \"Internet Control Message\n
      \  Protocol version 6 (ICMPv6) Parameters\" registry and provided a link\n   on
      the new \"Provisioning Domains (PvDs)\" registry.\n"
    title: 8.4.  New PvD Option Flags Registry
  - contents:
    - "8.5.  PvD JSON Media Type Registration\n   This document registers the media
      type for PvD JSON text,\n   \"application/pvd+json\".\n   Type name:  application\n
      \  Subtype name:  pvd+json\n   Required parameters:  N/A\n   Optional parameters:
      \ N/A\n   Encoding considerations:  Encoding considerations are identical to\n
      \     those specified for the \"application/json\" media type.\n   Security
      considerations:  See Section 6 of RFC 8801.\n   Interoperability considerations:
      \ This document specifies the format\n      of conforming messages and the interpretation
      thereof.\n   Published specification:  RFC 8801\n   Applications that use this
      media type:  This media type is intended\n      to be used by networks advertising
      additional Provisioning Domain\n      information and clients looking up such
      information.\n   Fragment identifier considerations:  N/A\n   Additional information:
      \ N/A\n   Person & email address to contact for further information:  See\n
      \     Authors' Addresses section\n   Intended usage:  COMMON\n   Restrictions
      on usage:  N/A\n   Author:  IETF\n   Change controller:  IETF\n"
    title: 8.5.  PvD JSON Media Type Registration
  title: 8.  IANA Considerations
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [RFC1035]  Mockapetris, P., \"Domain names -
      implementation and\n              specification\", STD 13, RFC 1035, DOI 10.17487/RFC1035,\n
      \             November 1987, <https://www.rfc-editor.org/info/rfc1035>.\n   [RFC2119]
      \ Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n
      \             <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC2818]  Rescorla,
      E., \"HTTP Over TLS\", RFC 2818,\n              DOI 10.17487/RFC2818, May 2000,\n
      \             <https://www.rfc-editor.org/info/rfc2818>.\n   [RFC3339]  Klyne,
      G. and C. Newman, \"Date and Time on the Internet:\n              Timestamps\",
      RFC 3339, DOI 10.17487/RFC3339, July 2002,\n              <https://www.rfc-editor.org/info/rfc3339>.\n
      \  [RFC4191]  Draves, R. and D. Thaler, \"Default Router Preferences and\n              More-Specific
      Routes\", RFC 4191, DOI 10.17487/RFC4191,\n              November 2005, <https://www.rfc-editor.org/info/rfc4191>.\n
      \  [RFC4343]  Eastlake 3rd, D., \"Domain Name System (DNS) Case\n              Insensitivity
      Clarification\", RFC 4343,\n              DOI 10.17487/RFC4343, January 2006,\n
      \             <https://www.rfc-editor.org/info/rfc4343>.\n   [RFC4861]  Narten,
      T., Nordmark, E., Simpson, W., and H. Soliman,\n              \"Neighbor Discovery
      for IP version 6 (IPv6)\", RFC 4861,\n              DOI 10.17487/RFC4861, September
      2007,\n              <https://www.rfc-editor.org/info/rfc4861>.\n   [RFC4941]
      \ Narten, T., Draves, R., and S. Krishnan, \"Privacy\n              Extensions
      for Stateless Address Autoconfiguration in\n              IPv6\", RFC 4941,
      DOI 10.17487/RFC4941, September 2007,\n              <https://www.rfc-editor.org/info/rfc4941>.\n
      \  [RFC6724]  Thaler, D., Ed., Draves, R., Matsumoto, A., and T. Chown,\n              \"Default
      Address Selection for Internet Protocol Version 6\n              (IPv6)\", RFC
      6724, DOI 10.17487/RFC6724, September 2012,\n              <https://www.rfc-editor.org/info/rfc6724>.\n
      \  [RFC6980]  Gont, F., \"Security Implications of IPv6 Fragmentation\n              with
      IPv6 Neighbor Discovery\", RFC 6980,\n              DOI 10.17487/RFC6980, August
      2013,\n              <https://www.rfc-editor.org/info/rfc6980>.\n   [RFC7493]
      \ Bray, T., Ed., \"The I-JSON Message Format\", RFC 7493,\n              DOI
      10.17487/RFC7493, March 2015,\n              <https://www.rfc-editor.org/info/rfc7493>.\n
      \  [RFC7525]  Sheffer, Y., Holz, R., and P. Saint-Andre,\n              \"Recommendations
      for Secure Use of Transport Layer\n              Security (TLS) and Datagram
      Transport Layer Security\n              (DTLS)\", BCP 195, RFC 7525, DOI 10.17487/RFC7525,
      May\n              2015, <https://www.rfc-editor.org/info/rfc7525>.\n   [RFC7556]
      \ Anipko, D., Ed., \"Multiple Provisioning Domain\n              Architecture\",
      RFC 7556, DOI 10.17487/RFC7556, June 2015,\n              <https://www.rfc-editor.org/info/rfc7556>.\n
      \  [RFC8028]  Baker, F. and B. Carpenter, \"First-Hop Router Selection by\n
      \             Hosts in a Multi-Prefix Network\", RFC 8028,\n              DOI
      10.17487/RFC8028, November 2016,\n              <https://www.rfc-editor.org/info/rfc8028>.\n
      \  [RFC8126]  Cotton, M., Leiba, B., and T. Narten, \"Guidelines for\n              Writing
      an IANA Considerations Section in RFCs\", BCP 26,\n              RFC 8126, DOI
      10.17487/RFC8126, June 2017,\n              <https://www.rfc-editor.org/info/rfc8126>.\n
      \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8259]  Bray, T., Ed., \"The
      JavaScript Object Notation (JSON) Data\n              Interchange Format\",
      STD 90, RFC 8259,\n              DOI 10.17487/RFC8259, December 2017,\n              <https://www.rfc-editor.org/info/rfc8259>.\n
      \  [RFC8615]  Nottingham, M., \"Well-Known Uniform Resource Identifiers\n              (URIs)\",
      RFC 8615, DOI 10.17487/RFC8615, May 2019,\n              <https://www.rfc-editor.org/info/rfc8615>.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [IANA-URN] IANA, \"Uniform Resource Names
      (URN) Namespaces\",\n              <https://www.iana.org/assignments/urn-namespaces/>.\n
      \  [IEEE8021X]\n              IEEE, \"IEEE Standard for Local and Metropolitan
      Area\n              Networks -- Port-Based Network Access Control\", IEEE \n
      \             802.1X-2020, DOI 10.1109/IEEESTD.2020.9018454,\n              <https://ieeexplore.ieee.org/document/9018454>.\n
      \  [MPVD-API] Kline, E., \"Multiple Provisioning Domains API\n              Requirements\",
      Work in Progress, Internet-Draft, draft-\n              kline-mif-mpvd-api-reqs-00,
      1 November 2015,\n              <https://tools.ietf.org/html/draft-kline-mif-mpvd-api-\n
      \             reqs-00>.\n   [MPVD-DNS] Stenberg, M. and S. Barth, \"Multiple
      Provisioning Domains\n              using Domain Name System\", Work in Progress,
      Internet-\n              Draft, draft-stenberg-mif-mpvd-dns-00, 15 October 2015,\n
      \             <https://tools.ietf.org/html/draft-stenberg-mif-mpvd-dns-\n              00>.\n
      \  [RFC2131]  Droms, R., \"Dynamic Host Configuration Protocol\",\n              RFC
      2131, DOI 10.17487/RFC2131, March 1997,\n              <https://www.rfc-editor.org/info/rfc2131>.\n
      \  [RFC3646]  Droms, R., Ed., \"DNS Configuration options for Dynamic\n              Host
      Configuration Protocol for IPv6 (DHCPv6)\", RFC 3646,\n              DOI 10.17487/RFC3646,
      December 2003,\n              <https://www.rfc-editor.org/info/rfc3646>.\n   [RFC3971]
      \ Arkko, J., Ed., Kempf, J., Zill, B., and P. Nikander,\n              \"SEcure
      Neighbor Discovery (SEND)\", RFC 3971,\n              DOI 10.17487/RFC3971,
      March 2005,\n              <https://www.rfc-editor.org/info/rfc3971>.\n   [RFC4389]
      \ Thaler, D., Talwar, M., and C. Patel, \"Neighbor Discovery\n              Proxies
      (ND Proxy)\", RFC 4389, DOI 10.17487/RFC4389, April\n              2006, <https://www.rfc-editor.org/info/rfc4389>.\n
      \  [RFC6105]  Levy-Abegnoli, E., Van de Velde, G., Popoviciu, C., and J.\n              Mohacsi,
      \"IPv6 Router Advertisement Guard\", RFC 6105,\n              DOI 10.17487/RFC6105,
      February 2011,\n              <https://www.rfc-editor.org/info/rfc6105>.\n   [RFC6125]
      \ Saint-Andre, P. and J. Hodges, \"Representation and\n              Verification
      of Domain-Based Application Service Identity\n              within Internet
      Public Key Infrastructure Using X.509\n              (PKIX) Certificates in
      the Context of Transport Layer\n              Security (TLS)\", RFC 6125, DOI
      10.17487/RFC6125, March\n              2011, <https://www.rfc-editor.org/info/rfc6125>.\n
      \  [RFC6146]  Bagnulo, M., Matthews, P., and I. van Beijnum, \"Stateful\n              NAT64:
      Network Address and Protocol Translation from IPv6\n              Clients to
      IPv4 Servers\", RFC 6146, DOI 10.17487/RFC6146,\n              April 2011, <https://www.rfc-editor.org/info/rfc6146>.\n
      \  [RFC6147]  Bagnulo, M., Sullivan, A., Matthews, P., and I. van\n              Beijnum,
      \"DNS64: DNS Extensions for Network Address\n              Translation from
      IPv6 Clients to IPv4 Servers\", RFC 6147,\n              DOI 10.17487/RFC6147,
      April 2011,\n              <https://www.rfc-editor.org/info/rfc6147>.\n   [RFC6296]
      \ Wasserman, M. and F. Baker, \"IPv6-to-IPv6 Network Prefix\n              Translation\",
      RFC 6296, DOI 10.17487/RFC6296, June 2011,\n              <https://www.rfc-editor.org/info/rfc6296>.\n
      \  [RFC6960]  Santesson, S., Myers, M., Ankney, R., Malpani, A.,\n              Galperin,
      S., and C. Adams, \"X.509 Internet Public Key\n              Infrastructure
      Online Certificate Status Protocol - OCSP\",\n              RFC 6960, DOI 10.17487/RFC6960,
      June 2013,\n              <https://www.rfc-editor.org/info/rfc6960>.\n   [RFC7049]
      \ Bormann, C. and P. Hoffman, \"Concise Binary Object\n              Representation
      (CBOR)\", RFC 7049, DOI 10.17487/RFC7049,\n              October 2013, <https://www.rfc-editor.org/info/rfc7049>.\n
      \  [RFC7278]  Byrne, C., Drown, D., and A. Vizdal, \"Extending an IPv6\n              /64
      Prefix from a Third Generation Partnership Project\n              (3GPP) Mobile
      Interface to a LAN Link\", RFC 7278,\n              DOI 10.17487/RFC7278, June
      2014,\n              <https://www.rfc-editor.org/info/rfc7278>.\n   [RFC7540]
      \ Belshe, M., Peon, R., and M. Thomson, Ed., \"Hypertext\n              Transfer
      Protocol Version 2 (HTTP/2)\", RFC 7540,\n              DOI 10.17487/RFC7540,
      May 2015,\n              <https://www.rfc-editor.org/info/rfc7540>.\n   [RFC8106]
      \ Jeong, J., Park, S., Beloeil, L., and S. Madanapalli,\n              \"IPv6
      Router Advertisement Options for DNS Configuration\",\n              RFC 8106,
      DOI 10.17487/RFC8106, March 2017,\n              <https://www.rfc-editor.org/info/rfc8106>.\n
      \  [RFC8415]  Mrugalski, T., Siodelski, M., Volz, B., Yourtchenko, A.,\n              Richardson,
      M., Jiang, S., Lemon, T., and T. Winters,\n              \"Dynamic Host Configuration
      Protocol for IPv6 (DHCPv6)\",\n              RFC 8415, DOI 10.17487/RFC8415,
      November 2018,\n              <https://www.rfc-editor.org/info/rfc8415>.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Acknowledgments\n   Many thanks to Markus Stenberg and Steven Barth for their
    earlier\n   work on [MPVD-DNS], as well as to Basile Bruneau, who was author of\n
    \  an early draft version of this document.\n   Thanks also to Marcus Keane, Mikael
    Abrahamsson, Ray Bellis, Zhen\n   Cao, Tim Chown, Lorenzo Colitti, Michael Di
    Bartolomeo, Ian Farrer,\n   Phillip Hallam-Baker, Bob Hinden, Tatuya Jinmei, Erik
    Kline, Ted\n   Lemon, Paul Hoffman, Dave Thaler, Suresh Krishnan, Gorry Fairhurst,\n
    \  Jen Lenkova, Veronika McKillop, Mark Townsley, and James Woodyatt for\n   useful
    and interesting discussions and reviews.\n   Finally, special thanks to Thierry
    Danis for his valuable input and\n   implementation efforts, Tom Jones for his
    integration effort into the\n   NEAT project, and Rigil Salim for his implementation
    work.\n"
  title: Acknowledgments
- contents:
  - "Authors' Addresses\n   Pierre Pfister\n   Cisco\n   11 Rue Camille Desmoulins\n
    \  92130 Issy-les-Moulineaux\n   France\n   Email: ppfister@cisco.com\n   \xC9ric
    Vyncke\n   Cisco\n   De Kleetlaan, 6\n   1831 Diegem\n   Belgium\n   Email: evyncke@cisco.com\n
    \  Tommy Pauly\n   Apple Inc.\n   One Apple Park Way\n   Cupertino, California
    95014\n   United States of America\n   Email: tpauly@apple.com\n   David Schinazi\n
    \  Google LLC\n   1600 Amphitheatre Parkway\n   Mountain\n   \t  View, California
    94043\n   United States of America\n   Email: dschinazi.ietf@gmail.com\n   Wenqin
    Shao\n   Cisco\n   11 Rue Camille Desmoulins\n   92130 Issy-les-Moulineaux\n"
  title: Authors' Addresses
