- contents:
  - "           PB-TNC: A Posture Broker (PB) Protocol Compatible\n                   with
    Trusted Network Connect (TNC)\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This document specifies PB-TNC, a Posture Broker protocol identical\n
    \  to the Trusted Computing Group's IF-TNCCS 2.0 protocol.  The document\n   then
    evaluates PB-TNC against the requirements defined in the NEA\n   Requirements
    specification.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc5793.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n   This document may contain
    material from IETF Documents or IETF\n   Contributions published or made publicly
    available before November\n   10, 2008.  The person(s) controlling the copyright
    in some of this\n   material may not have granted the IETF Trust the right to
    allow\n   modifications of such material outside the IETF Standards Process.\n
    \  Without obtaining an adequate license from the person(s) controlling\n   the
    copyright in such materials, this document may not be modified\n   outside the
    IETF Standards Process, and derivative works of it may\n   not be created outside
    the IETF Standards Process, except to format\n   it for publication as an RFC
    or to translate it into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n
    \     1.1. Prerequisites ..............................................4\n      1.2.
    Message Diagram Conventions ................................4\n      1.3. Terminology
    ................................................4\n      1.4. Conventions Used
    in This Document ..........................4\n   2. PB-TNC Design Considerations
    ....................................5\n      2.1. Message Addressing .........................................5\n
    \     2.2. Vendor IDs .................................................7\n      2.3.
    Efficiency .................................................7\n   3. PB-TNC Protocol
    Description .....................................7\n      3.1. Protocol Overview
    ..........................................7\n      3.2. PB-TNC State Machine .......................................8\n
    \     3.3. Layering on PT ............................................11\n      3.4.
    Example of PB-TNC Encapsulation ...........................12\n   4. PB-TNC Protocol
    Specification ..................................13\n      4.1. PB-TNC Header .............................................13\n
    \     4.2. PB-TNC Message ............................................16\n      4.3.
    IETF Standard PB-TNC Message Types ........................19\n      4.4. PB-Experimental
    ...........................................19\n      4.5. PB-PA .....................................................20\n
    \     4.6. PB-Assessment-Result ......................................25\n      4.7.
    PB-Access-Recommendation ..................................26\n      4.8. PB-Remediation-Parameters
    .................................28\n      4.9. PB-Error ..................................................32\n
    \     4.10. PB-Language-Preference ...................................37\n      4.11.
    PB-Reason-String .........................................38\n   5. Security Considerations
    ........................................41\n      5.1. Threat Model ..............................................41\n
    \     5.2. Countermeasures ...........................................42\n   6.
    IANA Considerations ............................................43\n      6.1.
    Designated Expert Guidelines ..............................44\n      6.2. Registry
    for PB-TNC Message Types .........................45\n      6.3. Registry for
    PA Subtypes ..................................45\n      6.4. Registry for PB-TNC
    Remediation Parameters Types ..........46\n      6.5. Registry for PB-TNC Error
    Codes ...........................46\n   7. Acknowledgments ................................................47\n
    \  8. References .....................................................47\n      8.1.
    Normative References ......................................47\n      8.2. Informative
    References ....................................48\n   Appendix A. Use Cases .............................................49\n
    \     A.1. Initial Client-Triggered Assessment .......................49\n      A.2.
    Server-Initiated Assessment with Remediation ..............54\n      A.3. Client-Triggered
    Reassessment .............................63\n   Appendix B. Evaluation against
    NEA Requirements ...................70\n      B.1. Evaluation against Requirement
    C-1 ........................70\n      B.2. Evaluation against Requirement C-2
    ........................70\n      B.3. Evaluation against Requirement C-3 ........................70\n
    \     B.4. Evaluation against Requirement C-4 ........................71\n      B.5.
    Evaluation against Requirement C-5 ........................71\n      B.6. Evaluation
    against Requirement C-6 ........................71\n      B.7. Evaluation against
    Requirement C-7 ........................72\n      B.8. Evaluation against Requirement
    C-8 ........................72\n      B.9. Evaluation against Requirement C-9
    ........................72\n      B.10. Evaluation against Requirement C-10 ......................73\n
    \     B.11. Evaluation against Requirement C-11 ......................73\n      B.12.
    Evaluation against Requirement PB-1 ......................74\n      B.13. Evaluation
    against Requirement PB-2 ......................74\n      B.14. Evaluation against
    Requirement PB-3 ......................74\n      B.15. Evaluation against Requirement
    PB-4 ......................75\n      B.16. Evaluation against Requirement PB-5
    ......................75\n      B.17. Evaluation against Requirement PB-6 ......................76\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document specifies PB-TNC, a Posture Broker (PB) protocol\n
    \  identical to the Trusted Computing Group's IF-TNCCS 2.0 protocol [7].\n   The
    document then evaluates PB-TNC against the requirements defined\n   in the Network
    Endpoint Assessment (NEA) Requirements specification\n   [8].\n"
  - contents:
    - "1.1.  Prerequisites\n   This document does not define an architecture or reference
      model.\n   Instead, it defines a protocol that works within the reference model\n
      \  described in the NEA Requirements specification [8].  The reader is\n   assumed
      to be thoroughly familiar with that document.  No familiarity\n   with TCG specifications
      is assumed.\n"
    title: 1.1.  Prerequisites
  - contents:
    - "1.2.  Message Diagram Conventions\n   This specification defines the syntax
      of PB-TNC messages using\n   diagrams.  Each diagram depicts the format and
      size of each field in\n   bits.  Implementations MUST send the bits in each
      diagram as they are\n   shown, traversing the diagram from top to bottom and
      then from left\n   to right within each line (which represents a 32-bit quantity).\n
      \  Multi-byte fields representing numeric values must be sent in network\n   (big
      endian) byte order.\n   Descriptions of bit field (e.g., flag) values are described
      referring\n   to the position of the bit within the field.  These bit positions
      are\n   numbered from the most significant bit through the least significant\n
      \  bit, so a 1-octet field with only bit 0 set has the value 0x80.\n"
    title: 1.2.  Message Diagram Conventions
  - contents:
    - "1.3.  Terminology\n   This document reuses the terminology defined in the NEA
      Requirements\n   document.  One new term is defined in this section.\n   Batch
      - A group of PB-TNC messages sent over a Posture Transport (PT)\n   protocol
      at one time.  Since the PB-TNC protocol needs to be able to\n   work over a
      half-duplex PT protocol, PB-TNC messages are grouped into\n   batches.  The
      Posture Broker Client sends one batch to the Posture\n   Broker Server, which
      responds with a batch.\n"
    title: 1.3.  Terminology
  - contents:
    - "1.4.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST
      NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\",
      \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted
      as described in RFC 2119 [1].\n"
    title: 1.4.  Conventions Used in This Document
  title: 1.  Introduction
- contents:
  - "2.  PB-TNC Design Considerations\n   The primary purpose of the PB-TNC protocol
    is to carry Posture\n   Attribute (PA) messages between Posture Collectors and
    Posture\n   Validators.  Also, PB-TNC must carry messages between the Posture\n
    \  Broker Client and the Posture Broker Server (known as PB-TNC\n   messages)
    and manage the state of the assessment.\n"
  - contents:
    - "2.1.  Message Addressing\n   The NEA Overview and Requirements document [8]
      describes in section\n   5.1.1.1 several ways that messages can be addressed
      and delivered to\n   the proper Posture Collector(s) and Posture Validator(s).
      \ Of the\n   techniques described in that section, PB-TNC supports dynamic\n
      \  identifiers and message types.\n"
    - contents:
      - "2.1.1.  Message Types\n   Message types are the simplest and most common
        way to handle message\n   delivery.  Each PA message sent via PB-TNC has an
        associated PA\n   message type, composed of a PA Message Vendor ID and a PA
        subtype.\n   The PA-TNC specification [10] provides a list of IETF Standard
        PA\n   Subtypes, which are used with a PA Message Vendor ID of 0.  These\n
        \  include values such as Operating System and Anti-Virus, which are\n   used
        for messages relating to operating system and anti-virus\n   posture.\n   Vendor-specific
        PA message types may be indicated by placing the\n   defining vendor's Structure
        of Management Information (SMI) Private\n   Enterprise Number into the PA
        Message Vendor ID field and a PA\n   Subtype value assigned by that vendor
        in the PA Subtype field.  This\n   allows each vendor to define its own set
        of PA Subtype values without\n   worrying about collisions with other vendors
        or with standard values.\n   The PA message type is somewhat analogous to
        a MIME type in that it\n   indicates the type of the PA message.  Posture
        Collectors and Posture\n   Validators can use local APIs to indicate to the
        Posture Broker\n   Client and Posture Broker Server which PA message types
        they are\n   interested in receiving.  For instance, a Posture Validator that\n
        \  evaluates anti-virus posture might indicate that it would like to\n   receive
        PA messages with a PA Message Vendor ID of 0 and a PA Subtype\n   that matches
        the IETF Standard PA Subtype for Anti-Virus.  It might\n   also indicate interest
        in some vendor-specific PA message types to\n   get additional vendor-specific
        information on anti-virus posture.\n   This type-based subscription model
        allows great flexibility in design\n   and implementation.  One Posture Validator
        may be responsible for\n   evaluating several functions: anti-virus and host-based
        firewall, for\n   instance.  Posture Collectors do not need to know which
        Posture\n   Validators are installed on the Posture Broker Server or what
        they\n   handle.  The Posture Collector simply sends PA messages with message\n
        \  types and the Posture Broker Server delivers them to the right\n   Posture
        Validators.\n   Because the Posture Broker Client and Posture Broker Server
        must have\n   access to the PA Message Vendor ID and PA Subtype fields and
        because\n   these are routing identifiers independent of the contents of the
        PA\n   messages, these fields are located in PB-TNC not inside the PA\n   messages
        themselves.\n   A similar type-based system is used to tag PB-TNC messages.
        \ In this\n   case, the extensibility benefits are not as essential as with
        PA-TNC\n   messages, but the ability to define IETF Standard PB-TNC Message\n
        \  Types and vendor-specific PB-TNC message types is still valuable.\n"
      title: 2.1.1.  Message Types
    - contents:
      - "2.1.2.  Dynamic Identifiers\n   The type-based message delivery model described
        above is not ideal\n   for all circumstances.  Sometimes it is important for
        a Posture\n   Collector to deliver a message to a particular Posture Validator.\n
        \  For example, a particular Posture Validator might send a remediation\n
        \  message and the Posture Collector might need to send a response only\n
        \  to that one Posture Validator.  To handle this circumstance, PB-TNC\n   provides
        delivery based on dynamic identifiers.\n   When a Posture Broker Server loads
        a Posture Validator, it assigns it\n   a Posture Validator ID.  Any PA messages
        sent by a Posture Validator\n   include that Posture Validator's Posture Validator
        ID in the Posture\n   Validator ID field of the PB-PA message.  A Posture
        Collector that\n   receives such a message can send a message in response
        and request\n   exclusive delivery to the Posture Validator identified by
        that\n   Posture Validator ID.\n   Dynamic identifiers avoid problems caused
        by the multicast nature of\n   message types.  Multiple Posture Collectors
        or Posture Validators may\n   be registered for the same message type, and
        this can cause confusion\n   if they all respond and the software designer
        did not consider that\n   possibility.  The dynamic identifier system allows
        more directed\n   responses, but it does not work until at least one message
        has been\n   received (so that the dynamic identifiers can be received).  Static\n
        \  identifiers were considered as another alternative but rejected\n   because
        they result in a brittle system that only works with a\n   particular set
        of Posture Collectors and Posture Validators and\n   causes problems if two
        Posture Collectors or Posture Validators with\n   the same static identifier
        are installed.\n"
      title: 2.1.2.  Dynamic Identifiers
    title: 2.1.  Message Addressing
  - contents:
    - "2.2.  Vendor IDs\n   In several places, PB-TNC needs to define a set of standard
      values\n   but also allow vendor-specific extensions.  In each of these places\n
      \  (PB-TNC Message Types, PA Subtypes, Remediation Parameters Types, and\n   Error
      Codes), the solution chosen was to preface the values with a\n   vendor ID.
      \ If a vendor ID is 0, the values in the next field are\n   registered in an
      IANA registry and their meanings defined in an RFC.\n   If a vendor ID is non-zero,
      the values in the next field are vendor\n   specific and defined by the vendor
      whose SMI Private Enterprise\n   Number matches the vendor ID.  Vendor-specific
      messages that are not\n   understood by the recipient are ignored and skipped
      unless they have\n   the NOSKIP flag set, in which case an error code is returned.\n"
    title: 2.2.  Vendor IDs
  - contents:
    - "2.3.  Efficiency\n   PB-TNC needs to work with low bandwidth transports and
      low power\n   devices.  Therefore, a simple, compact format was chosen for the
      PB-\n   TNC protocol: binary messages with a Type-Length-Value structure.\n"
    title: 2.3.  Efficiency
  title: 2.  PB-TNC Design Considerations
- contents:
  - '3.  PB-TNC Protocol Description

    '
  - contents:
    - "3.1.  Protocol Overview\n   The PB-TNC protocol carries batches of PB messages
      between a Posture\n   Broker Client and a Posture Broker Server.  It encapsulates
      PA\n   messages and manages the NEA session.  It runs over a PT protocol.\n
      \  In order to work well over half-duplex PT protocols (such as those\n   based
      on EAP [9]), PB-TNC supports half-duplex protocol operation.\n   In this mode,
      the Posture Broker Client and Posture Broker Server\n   take turns sending a
      single batch of messages to each other.  While\n   the half-duplex nature of
      PB-TNC could slow exchanges that require\n   many round trips or bidirectional
      multimedia exchanges, this is not a\n   problem in practice because endpoint
      assessments do not typically\n   involve multimedia or a large number of round
      trips.  The benefit of\n   working over half-duplex transports outweighs any
      limitations\n   imposed.\n   PB-TNC also supports full-duplex protocol operation
      so that PB-TNC\n   exchanges can be re-initialized immediately when needed (e.g.,
      if the\n   Posture Broker Server policy changes or if the Posture Broker Client\n
      \  detects a suspicious event).\n   Each PB-TNC batch consists of a header followed
      by a sequence of PB-\n   TNC messages.  Each PB-TNC message has a Type-Length-Value
      (TLV)\n   format with a few flags.  The TLV format allows a recipient to skip\n
      \  messages that it does not understand.  The TLV format also provides a\n   standard
      way to mark messages as mandatory to ensure interoperability\n   between a Posture
      Broker Client and a Posture Broker Server.\n   This specification defines certain
      standard PB-TNC message types.  It\n   also permits vendors to define their
      own vendor-specific message\n   types.  One of the most important standard PB-TNC
      message types is\n   PB-PA.  A message with this type contains a PA message
      and various\n   message routing information.  A Posture Broker Client or Posture\n
      \  Broker Server that receives such a message does not interpret the PA\n   message
      within.  Instead, it delivers the PA message to the\n   appropriate set of Posture
      Collectors or Posture Validators, as\n   determined using the message routing
      information contained in the PB-\n   PA message.\n   A Posture Broker Server
      will often need to communicate with several\n   Posture Broker Clients at once.
      \ The reverse may also be true, as\n   when an endpoint has multiple network
      interfaces connected to\n   different networks.  Each connection between a Posture
      Broker Server\n   and a Posture Broker Client is instantiated as a separate
      PB-TNC\n   session.  There may be several simultaneous sessions between a single\n
      \  Posture Broker Server and Posture Broker Client, but this is unusual.\n"
    title: 3.1.  Protocol Overview
  - contents:
    - "3.2.  PB-TNC State Machine\n   Figure 1 illustrates the PB-TNC state machine,
      showing the set of\n   states that a PB-TNC session can have and the possible
      transitions\n   among these states.  The following paragraphs describe this
      state\n   machine in more detail.\n               Receive CRETRY        SRETRY\n
      \                   or SRETRY   +----------------+\n                         +--+
      \  |                |\n                         v  |   v                |\n
      \                       +---------+  CRETRY  +---------+\n              CDATA
      \    | Server  |<---------| Decided | CLOSE\n           +----------->| Working
      |--------->|         |-------+\n           |            +---------+  RESULT
      \ +---------+       |\n           |                ^ |  |                             v\n
      \          |                | |  +---------------------->=======\n         ========
      \          | |              CLOSE       \" End \"\n         \" Init \"      CDATA|
      |SDATA                     =======\n         ========           | |                          ^
      \   ^\n           |  |             | v                          |    |\n           |
      \ | SDATA   +---------+          CLOSE       |    |\n           |  +-------->|
      Client  |----------------------+    |\n           |            | Working |                           |\n
      \          |            +---------+                           |\n           |
      \               |  ^                              |\n           |                +--+
      \                             |\n           |            Receive CRETRY                        |\n
      \          |   CLOSE                                          |\n           +--------------------------------------------------+\n
      \                        Figure 1: PB-TNC state machine\n   In this diagram,
      states are indicated by rectangular boxes.  The\n   initial and terminal states
      have double outlines (with = and \").\n   State transitions are indicated by
      unidirectional arrows marked with\n   the cause of the transition.\n   Many
      transitions (CDATA, SDATA, CRETRY, SRETRY, and RESULT) are\n   triggered by
      the transmission or reception of a PB-TNC batch of a\n   particular type.  The
      type of a PB-TNC batch is indicated by the\n   contents of the Batch Type field
      in the PB-TNC header for that batch.\n   For brevity, this document says \"a
      FOO batch\" instead of \"a PB-TNC\n   batch whose Batch Type field contains
      FOO\".  Other transitions are\n   triggered by receiving a PB-TNC batch of a
      particular type (e.g.,\n   Receive CRETRY).  The CLOSE transition may be triggered
      by sending or\n   receiving a CLOSE batch but may also be triggered by termination
      of\n   the underlying PT connection.\n   A PB-TNC session starts in the Init
      state when the underlying\n   transport protocol (PT) establishes a connection
      between a Posture\n   Broker Client and a Posture Broker Server.  If the Posture
      Broker\n   Client initiated the underlying transport session, it starts by\n
      \  sending a CDATA batch to the Posture Broker Server, thus causing a\n   transition
      to the Server Working state.  If the Posture Broker Server\n   initiated the
      transport session, it starts by sending a PB-TNC batch\n   of type SDATA to
      the Posture Broker Client, thus causing a transition\n   to the Client Working
      state.\n   The Posture Broker Client and Posture Broker Server may now alternate\n
      \  sending CDATA and SDATA batches to each other.  Only the Posture\n   Broker
      Client can send a data batch when the session is in the Client\n   Working state,
      and only the Posture Broker Server can send a data\n   batch when the session
      is in the Server Working state.\n   The most common way to end an exchange is
      for the Posture Broker\n   Server to send a RESULT batch.  This causes a transition
      into the\n   Decided state.  This is not a terminal state.  The PT session can\n
      \  remain open and another exchange can be initiated by having the\n   Posture
      Broker Client send a CRETRY batch.  This can be useful when\n   the Posture
      Broker Client (or more likely a Posture Collector)\n   discovers a suspicious
      condition on the endpoint, for example.  If\n   the underlying transport protocol
      (PT) supports full-duplex\n   operation, the Posture Broker Server can also
      initiate another\n   exchange from this state by sending a SRETRY batch.  This
      can be\n   useful when the policy changes on the server, for example.\n   Whether
      an SRETRY or CRETRY message or both are sent, the next state\n   is the Server
      Working State.  From this state, the Posture Broker\n   Server sends an SDATA
      batch and the new exchange begins.  The state\n   transitions marked Receive
      CRETRY and Receive CRETRY or SRETRY\n   indicate that it is permissible to receive
      such messages in the\n   indicated states, generally when the Posture Broker
      Client sent a\n   CRETRY message at roughly the same time as the Posture Broker
      Server\n   decided to send an SRETRY.  In that case, a CRETRY message may be\n
      \  received while in the Server Working or Client Working state.  Also,\n   an
      SRETRY message may be received while in the Server Working state.\n   These
      messages are redundant and therefore ignored, as indicated by\n   the relevant
      transitions, which don't cause a state change.\n   The only terminal state is
      the End state.  This state is reached if\n   the underlying PT connection closes.
      \ This can be caused by an action\n   of the Posture Broker Client or Posture
      Broker Server or it can be\n   caused by some external factor, such as pulling
      the network plug.\n   When possible, a CLOSE batch SHOULD be sent before the
      underlying PT\n   connection is terminated.  However, there may be cases where
      the PT\n   connection is closed without notice.  For example, a plug may be\n
      \  pulled, a software program may fail, or a Posture Broker Client or\n   Posture
      Broker Server may be unable to send a CLOSE message due to\n   half-duplex limitations
      in the underlying PT protocol.  In these\n   cases, the Posture Broker Client
      and Posture Broker Server will\n   generally receive some form of notification
      from the Posture\n   Transport Client and Posture Transport Server that the
      PT connection\n   has been closed.  This notification can trigger the CLOSE
      transition.\n   However, the notification interaction is not standardized since
      the\n   vertical interfaces in the NEA Reference Model are not standardized.\n
      \  In any case, the reception of the CLOSE batch or notification of\n   termination
      of the transport causes the transition to the End state.\n   Note that a Posture
      Broker Client and Posture Broker Server may not\n   always have exactly the
      same state for a given PB-TNC session.  For\n   example, say that a session
      is in the Client Working state and the\n   Posture Broker Client transmits a
      CDATA batch.  While this batch is\n   in transit (transmitted by the Posture
      Broker Client but not yet\n   received by the Posture Broker Server), the Posture
      Broker Client\n   will think that the session is in Server Working state but
      the\n   Posture Broker Server will think that the session is in Client\n   Working
      state.  However, this is a temporary condition and does not\n   cause problems
      in practice.  The only possible issue is that a\n   Posture Broker Client or
      Posture Broker Server does not know whether\n   the other party has received
      its message until it receives a response\n   from the other party.\n   If a
      half-duplex transport is used, note that the Posture Broker\n   Server cannot
      send a SRETRY batch when the session is in the Decided\n   state because the
      Posture Broker Server sent the most recent batch\n   (the RESULT batch) and
      this would violate the half-duplex nature of\n   the transport protocol.  Instead,
      a server that wishes to initiate a\n   new exchange in the Decided state when
      a half-duplex transport is in\n   use should close the PT connection without
      sending a CLOSE batch and\n   start a new PB-TNC session.  This limitation does
      not exist when a\n   full-duplex transport is used.\n   The Posture Broker Server
      and Posture Broker Client MUST follow the\n   state machine described in this
      section.\n"
    title: 3.2.  PB-TNC State Machine
  - contents:
    - "3.3.  Layering on PT\n   PB-TNC batches are carried over protocol bindings
      of the PT protocol,\n   which provides the interaction between a Posture Transport
      Client and\n   a Posture Transport Server.  PB-TNC counts on PT to provide a
      secure\n   transport.  In particular, PT MUST support mutual authentication
      of\n   the Posture Transport Client and the Posture Transport Server,\n   confidentiality
      and integrity protection for PB-TNC batches, and\n   protection against replay
      attacks.  PB-TNC is unaware of the\n   underlying transport protocols being
      used.  PB-TNC operates directly\n   on PT; no further layer of PB-TNC is expected.\n"
    - contents:
      - "3.3.1.  Posture Transport (PT) Protocol Requirements Addendum\n   RFC 5209
        [8] describes normative requirements for the Posture\n   Transport protocol.
        \ This section specifies additional requirements\n   for the Posture Transport
        protocol.  Candidate Posture Transport\n   protocols must indicate conformance
        to requirements specified in this\n   section as well as section 7.4 of RFC
        5209.\n   The additional requirements for candidate PT protocols are:\n   PT-6
        The PT protocol MUST be connection oriented; it MUST support\n        confirmed
        initiation and close down.\n   PT-7 The PT protocol MUST be able to carry
        binary data.\n   PT-8 The PT protocol MUST provide mechanisms for flow control
        and\n        congestion control.\n   PT-9 PT protocol specifications MUST
        describe the capabilities that\n        they provide for and limitations that
        they impose on the PB\n        protocol (e.g., half/full duplex, maximum message
        size).\n"
      title: 3.3.1.  Posture Transport (PT) Protocol Requirements Addendum
    title: 3.3.  Layering on PT
  - contents:
    - "3.4.  Example of PB-TNC Encapsulation\n   This section shows how PA messages
      can be carried inside a PB-TNC\n   batch that is inside a PT protocol.\n   Within
      the PT protocol, the PB-TNC header is packaged next, followed\n   by two PB-PA
      messages that contain PA messages meant for the Posture\n   Collectors and Posture
      Validators on the platform.\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |                           PT Protocol                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |                          PB-TNC Header                        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |                           PB-PA Message                       |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |                           PB-PA Message                       |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \             Figure 2: Example of PB-TNC message encapsulation\n   This figure
      is conceptual, of course, and not an exact byte-for-byte\n   replica.\n"
    title: 3.4.  Example of PB-TNC Encapsulation
  title: 3.  PB-TNC Protocol Description
- contents:
  - "4.  PB-TNC Protocol Specification\n   This section defines the syntax and semantics
    of the PB-TNC protocol\n   fields.  If a Posture Broker Client or Posture Broker
    Server receives\n   a batch that violates the requirements of this specification,
    it MUST\n   respond by sending a fatal Invalid Parameter error in a CLOSE batch\n
    \  unless this document specifies otherwise.\n"
  - contents:
    - "4.1.  PB-TNC Header\n   Every PB-TNC batch MUST start with the following header.
      \ A PB-TNC\n   batch MUST contain only one instance of this header followed
      by zero\n   or more PB-TNC messages.  The PB-TNC messages are defined in\n   subsequent
      sections of this specification.\n       0                   1                   2
      \                  3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |    Version    |D|     Reserved                        | B-Type|\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |                       Batch Length                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Version (8 bits)\n      This field indicates the version of the format for
      the PB-TNC\n      message.  This version is intended to allow for evolution
      of the\n      PB-TNC protocol in a manner that can easily be detected by message\n
      \     recipients.\n      This field MUST be set to 2 when the batch conforms
      to this\n      specification.  Later versions of PB-TNC may define other values\n
      \     for this field.  The values 0x00, 0x09, 0x0a, 0x0d, 0x20, and 0x3c\n      are
      reserved and cannot be used for any version of PB-TNC to\n      ensure that
      PB-TNC can be easily distinguished from earlier\n      posture broker protocols
      already in use.\n      If a Posture Broker Client or Posture Broker Server receives
      a\n      Version value that it does not support, it MUST respond with a PB-\n
      \     TNC batch with batch type CLOSE that contains only a fatal Version\n      Not
      Supported error code and whose Version header field has the\n      value 2.
      \ Implementations responding to a PB-TNC message\n      containing a supported
      version MUST use the same Version number to\n      minimize the risk of version
      incompatibility.  PB-TNC message\n      initiators that support multiple PB-TNC
      protocol versions SHOULD\n      be able to alter which version of PB-TNC message
      they send based\n      on prior message exchanges with a particular peer Posture
      Broker\n      Client or Posture Broker Server.\n   Directionality (D) (1 bit)\n
      \     When a Posture Broker Client is sending this message, the\n      Directionality
      bit MUST be set to 0.  When a Posture Broker Server\n      is sending this message,
      the Directionality bit MUST be set to 1.\n      This helps avoid any situation
      where two Posture Broker Clients or\n      two Posture Broker Servers engage
      in a dialog.  It also helps with\n      debugging.\n   Reserved (19 bits)\n
      \     This field is reserved.  For this version of this specification,\n      it
      MUST be set to 0 on transmission and ignored on reception.\n      Future versions
      of this specification may allow senders to set\n      some of these bits and
      recipients to interpret them.\n   B-Type (Batch Type) (4 bits)\n      This field
      is used to drive the state machine described in section\n      3.2.  This field
      MUST have one of the values from the following\n      table.  If any other value
      is received, the recipient MUST ignore\n      the contents of the batch and
      send a fatal Invalid Parameter error\n      code in a CLOSE batch.  If the value
      received is not permitted for\n      the current state, according to the state
      machine in section 3.2.,\n      the recipient MUST ignore the contents of the
      batch and send a\n      fatal Unexpected Batch Type error code in a CLOSE batch.\n
      \     Number   Name     Definition\n      ------   ----     ----------\n      1
      \       CDATA    The Posture Broker Client may send a batch with\n                        this
      Batch Type to convey messages to the\n                        Posture Broker
      Server.  A Posture Broker Server\n                        MUST NOT send this
      Batch Type.  A CDATA batch\n                        may be empty (contain no
      messages) if the\n                        Posture Broker Client has nothing
      to send.\n      2        SDATA    The Posture Broker Server may send a batch
      with\n                        this Batch Type to convey messages to the\n                        Posture
      Broker Client.  A Posture Broker Client\n                        MUST NOT send
      this Batch Type.  An SDATA batch\n                        may be empty (contain
      no messages) if the\n                        Posture Broker Server has nothing
      to send.\n      3        RESULT   The Posture Broker Server may send a batch
      with\n                        this Batch Type to indicate that it has\n                        completed
      its evaluation.  The batch MUST\n                        include a PB-Assessment-Result
      message and MAY\n                        include a PB-Access-Recommendation
      message.\n      4        CRETRY   The Posture Broker Client may send a batch
      with\n                        this Batch Type to indicate that it wishes to\n
      \                       restart an exchange.  A Posture Broker Server\n                        MUST
      NOT send this Batch Type.  A CRETRY batch\n                        may be empty
      (contain no messages) if the\n                        Posture Broker Client
      has nothing else to send.\n      5        SRETRY  The Posture Broker Server
      may send a batch with\n                       this Batch Type to indicate that
      it wishes to\n                       restart the exchange.  A Posture Broker
      Client\n                       MUST NOT send this Batch Type.  A SRETRY batch\n
      \                      may be empty (contain no messages) if the\n                       Posture
      Broker Server has nothing else to send.\n      6        CLOSE   The Posture
      Broker Server or Posture Broker\n                       Client may send a batch
      with this Batch Type to\n                       indicate that it is about to
      terminate the\n                       underlying PT connection.  A CLOSE batch
      may be\n                       empty (contain no messages) if there is nothing\n
      \                      to send.  However, if the termination is due to a\n                       fatal
      error, then the CLOSE batch MUST contain a\n                       PB-Error
      message.\n   Batch Length (32 bits)\n      This length field contains the size
      of the full PB-TNC batch in\n      octets.  This length includes the PB-TNC
      header and all the PB-TNC\n      messages in the batch.  In other words, it
      includes the entire\n      contents of the batch.  This field MUST contain at
      least the value\n      8 for the fixed-length fields in this header.  Any Posture
      Broker\n      Client or Posture Broker Server that receives a PB-TNC message\n
      \     with a PB-TNC Message Length field whose value is less than 8 MUST\n      respond
      with a fatal Invalid Parameter error code in a CLOSE\n      batch.\n"
    title: 4.1.  PB-TNC Header
  - contents:
    - "4.2.  PB-TNC Message\n   All PB-TNC messages have the same overall structure,
      which is\n   described in this section.  Of course, the format and semantics
      of\n   the PB-TNC Message Value field will vary, depending on the values of\n
      \  the PB-TNC Vendor ID and PB-TNC Message Type fields.\n       0                   1
      \                  2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |     Flags     |               PB-TNC Vendor ID                |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |                       PB-TNC Message Type                     |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |                      PB-TNC Message Length                    |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |               PB-TNC Message Value (Variable Length)          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Flags (8 bits)\n      This field defines flags impacting the processing of
      this message.\n      Bit 0 of this Flags field (the most significant bit) is
      known as\n      the NOSKIP flag.  If this flag is cleared (value 0), then the\n
      \     recipient (a Posture Broker Client or Posture Broker Server) may\n      skip
      (ignore) this message if the message type is not understood\n      or the recipient
      cannot or will not process the message as\n      required in the definition
      of that message.  If this flag is set\n      (value 1), then recipients MUST
      NOT skip this attribute.\n      This flag does not mean that all recipients
      must support this\n      message.  Instead, any recipient that receives a message
      with this\n      flag set to 1 but cannot or will not process it as required
      MUST\n      NOT act on any part of the PB-TNC batch.  Instead, the recipient\n
      \     MUST respond with a fatal Unsupported Mandatory Message error code\n      in
      a CLOSE batch.  In order to avoid taking action on some\n      messages in a
      batch only to later find an unsupported NOSKIP\n      flagged message, recipients
      of a PB-TNC batch might choose to scan\n      all of the messages in the batch
      prior to acting upon any of the\n      messages, checking to determine whether
      one of them is an\n      unsupported message with the NOSKIP flag set.\n      The
      other bits in this Flags field are reserved.  For this version\n      of PB-TNC,
      they MUST be set to 0 on transmission and ignored on\n      reception.\n   PB-TNC
      Vendor ID (24 bits)\n      The PB-TNC Vendor ID field identifies a vendor by
      using the SMI\n      Private Enterprise Number (PEN).  Any organization can
      receive its\n      own unique PEN from IANA, the Internet Assigned Numbers Authority.\n
      \     This Vendor ID qualifies the PB-TNC Message Type field so that\n      each
      vendor has 2^32-1 separate message types available for their\n      use.\n      Message
      types standardized by the IETF use zero (0) in this field.\n      The Vendor
      ID 0xffffff is reserved.  Posture Broker Clients and\n      Posture Broker Servers
      MUST NOT send messages in which the Vendor\n      ID has this reserved value
      (0xffffff).  If a Posture Broker Client\n      or Posture Broker Server receives
      a message in which the PB-TNC\n      Vendor ID has this reserved value (0xffffff),
      it MUST respond with\n      a fatal Invalid Parameter error code in a CLOSE
      batch.\n   PB-TNC Message Type (32 bits)\n      The PB-TNC Message Type field
      identifies the type of the PB-TNC\n      message contained in the PB-TNC Message
      Value field.  The PB-TNC\n      message type 0xffffffff is reserved.  Posture
      Broker Clients and\n      Posture Broker Servers MUST NOT send messages in which
      the PB-TNC\n      Message Type field has this reserved value (0xffffffff).  If
      a\n      Posture Broker Client or Posture Broker Server receives a message\n
      \     in which the PB-TNC Message Type field has this reserved value\n      (0xffffffff),
      it MUST respond with a fatal Invalid Parameter error\n      code in a CLOSE
      batch.  Unless otherwise prohibited in the\n      definition of a particular
      PB-TNC message type (e.g., PB-Language-\n      Preference), a single PB-TNC
      batch may contain multiple messages\n      with the same message type and/or
      vendor ID.\n      The IETF and any other organization with a PEN can define
      2^32-1\n      unique PB-TNC message types, as long as the organization's PEN
      is\n      placed in the PB-TNC Vendor ID field of the message.  Since the\n
      \     PB-TNC message type is qualified by the vendor ID, there is no\n      risk
      of conflicts as long as each organization uses its own PEN\n      for the vendor
      ID and manages its own set of 2^32-1 message type\n      values.\n      This
      document defines certain PB-TNC message types that, when used\n      with the
      IETF SMI PEN (0), have standard meanings.  These are\n      known as IETF Standard
      PB-TNC Message Types.  Some of these PB-TNC\n      message types are mandatory
      and therefore MUST be implemented by\n      all Posture Broker Client and Posture
      Broker Server\n      implementations that claim compliance with this specification.\n
      \     For details on which PB-TNC message types are mandatory, see the\n      description
      of these message types later in section 4.\n      IANA maintains a registry
      of PB-TNC message types.  Entries in\n      this registry are added by Expert
      Review with Specification\n      Required, following the guidelines in section
      6.1.\n      New vendor-specific PB-TNC message types (those used with a non-\n
      \     zero PB-TNC vendor ID) may be defined and employed by vendors\n      without
      IETF or IANA involvement.  However, Posture Broker Clients\n      and Posture
      Broker Servers MUST NOT require support for particular\n      vendor-specific
      PB-TNC message types and MUST interoperate with\n      other parties despite
      any differences in the set of vendor-\n      specific PB-TNC message types supported
      (although they MAY permit\n      administrators to configure them to require
      support for specific\n      PB-TNC message types).\n      Note that the PB-TNC
      Message Type field is completely separate\n      from the PA Subtype field.
      \ The same value (e.g., 0) may have\n      different meanings as a PB-TNC message
      type and as a PA subtype.\n   PB-TNC Message Length (32 bits)\n      This field
      specifies the length of this PB-TNC message in octets.\n      It includes this
      header (the fields Flags, PB-TNC Vendor ID, PB-\n      TNC Message Type, and
      PB-TNC Message Length).  Therefore, this\n      value MUST always be at least
      12.  Any Posture Broker Client or\n      Posture Broker Server that receives
      a message with a PB-TNC\n      Message Length field whose value is less than
      12 MUST respond with\n      a fatal Invalid Parameter error code in a CLOSE
      batch.\n   PB-TNC Message Value (variable length)\n      The syntax and semantics
      of this field vary, depending on the\n      values in the PB-TNC Vendor ID and
      PB-TNC Message Type fields.\n      The syntax and semantics of several standard
      messages are defined\n      in subsequent sections of this specification.\n"
    title: 4.2.  PB-TNC Message
  - contents:
    - "4.3.  IETF Standard PB-TNC Message Types\n   The following table provides a
      reference list with brief descriptions\n   of the IETF Standard PB-TNC Message
      Types defined in this\n   specification.  These PB-TNC message types must be
      used with a PB-TNC\n   vendor ID of zero (0).  If these PB-TNC message type
      values are used\n   with a different PB-TNC vendor ID, they have a completely
      different\n   meaning that is not defined in this specification.\n   For more
      details on these message types, see the remainder of section\n   4.  For IETF
      Standard PA Subtypes (which are completely different\n   from PB-TNC message
      types), please refer to the PA-TNC specification\n   [10].\n   Message Type
      \  Definition\n   ------------   ----------\n   0              PB-Experimental
      - reserved for experimental use\n   1              PB-PA - contains a PA message\n
      \  2              PB-Assessment-Result - the overall assessment result\n                  computed
      by the Posture Broker Server\n   3              PB-Access-Recommendation - includes
      Posture Broker\n                  Server access recommendation\n   4              PB-Remediation-Parameters
      - includes Posture Broker\n                  Server remediation parameters\n
      \  5              PB-Error - error indicator\n   6              PB-Language-Preference
      - sender's preferred\n                  language(s) for human-readable strings\n
      \  7              PB-Reason-String - string explaining reason for\n                  Posture
      Broker Server access recommendation\n"
    title: 4.3.  IETF Standard PB-TNC Message Types
  - contents:
    - "4.4.  PB-Experimental\n   The PB-Experimental PB-TNC message type is a PB-TNC
      message type\n   (value 0) that has been set aside for experimental purposes.
      \ It may\n   be used to test code or for other experimental purposes.  It MUST
      NOT\n   be used in a production environment or in a product.  This meaning\n
      \  for this PB-TNC message type only applies if the PB-TNC Vendor ID\n   field
      in the PB-TNC Message Header contains the value zero (0).  If a\n   different
      Vendor ID is contained in that field, the PB-TNC message\n   type 0 has a completely
      different meaning not defined in this\n   specification.\n   The contents of
      the PB-TNC Message Length and PB-TNC Message Value\n   fields for this PB-TNC
      message type are not specified.  They may have\n   almost any value, depending
      on what experiments are being conducted.\n   Similarly, the Flags field for
      this message may have the NOSKIP bit\n   set or cleared, depending on what experiments
      are being conducted.\n   However, note that the PB-TNC Message Length field
      must have a value\n   of at least 12 since that is the total of the length of
      the fixed-\n   length fields at the start of the PB-TNC message (the fields
      Flags,\n   PB-TNC Vendor ID, PB-TNC Message Type, and PB-TNC Message Length).\n
      \  Any Posture Broker Client or Posture Broker Server that receives a\n   message
      with a PB-TNC Message Length field whose value is invalid\n   MUST respond with
      a fatal Invalid Parameter error code in a CLOSE\n   batch.\n   A Posture Broker
      Client or Posture Broker Server implementation\n   intended for production use
      MUST NOT send a message with this Message\n   Type with the value zero (0) as
      the vendor ID.  If it receives a\n   message with this message type and with
      the value zero (0) as the\n   vendor ID, it MUST ignore the message unless the
      NOSKIP bit is set,\n   in which case it MUST respond with a fatal Unsupported
      Mandatory\n   Message error code in a CLOSE batch.\n"
    title: 4.4.  PB-Experimental
  - contents:
    - "4.5.  PB-PA\n   The PB-TNC message type named PB-PA (value 1) contains one
      PA\n   message.  Many batches will contain several PB-PA messages, but some\n
      \  batches may not contain any messages of this type.\n   All Posture Broker
      Client and Posture Broker Server implementations\n   MUST implement support
      for this PB-TNC message type.  Generally, this\n   support will consist of forwarding
      the enclosed PA message to the\n   appropriate Posture Collectors and Posture
      Validators.  Specific\n   requirements are contained later in the description
      of this message\n   type.\n   The type of the PA message contained in a PB-PA
      message is indicated\n   by the PA Message Vendor ID and PA Subtype fields,
      as described later\n   in this section.  The PA-TNC specification [10] describes
      several\n   standard PA message types that can be identified by the PA Message\n
      \  Vendor ID and PA Subtype values listed in the PA-TNC specification.\n   Other
      PA message types may also be defined, as described in the\n   description of
      the PA Subtype field later in this section.\n   The NOSKIP flag in the PB-TNC
      Message Header MUST be set for this\n   message type.  Any Posture Broker Client
      or Posture Broker Server\n   that receives a PB-PA message with the NOSKIP flag
      not set MUST\n   ignore the message and MUST respond with a fatal Invalid Parameter\n
      \  error code in a CLOSE batch.\n   For the PB-PA message type, the PB-TNC Vendor
      ID field MUST contain\n   the value zero (0) and the PB-TNC Message Type field
      MUST contain 1.\n   If a non-zero value is contained in the PB-TNC Vendor ID
      field,\n   message type 1 has a completely different meaning not defined in
      this\n   specification.\n   The PB-TNC Message Length field MUST contain the
      length of the entire\n   PB-TNC message, including the fixed-length fields at
      the start of the\n   PB-TNC message (the fields Flags, PB-TNC Vendor ID, PB-TNC
      Message\n   Type, and PB-TNC Message Length), the fixed-length fields listed\n
      \  below (Flags, PA Message Vendor ID, PA Subtype, Posture Collector\n   Identifier,
      and Posture Validator Identifier), and the PA Message\n   Body.  Since the PA
      Message Body is variable length, the value in the\n   PB-TNC Message Length
      field will vary also.  However, it MUST always\n   be at least 24 to cover the
      fixed-length fields listed in the\n   preceding sentences.  Any Posture Broker
      Client or Posture Broker\n   Server that receives a PB-PA message with a PB-TNC
      Message Length\n   field that has an invalid value MUST respond with a fatal
      Invalid\n   Parameter error code in a CLOSE batch.\n   The following diagram
      illustrates the format and contents of the PB-\n   TNC Message Value field for
      this message type.  The text after this\n   diagram describes the fields shown
      here.\n       0                   1                   2                   3\n
      \      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |    Flags      |               PA Message Vendor ID            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |                           PA Subtype                          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |  Posture Collector Identifier | Posture Validator Identifier  |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |                 PA Message Body (Variable Length)             |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Flags (8 bits)\n      This field contains flags relating to the PA message.\n
      \     Bit 0 of this flags field (the most significant bit) is known as\n      the
      EXCL flag (for exclusive).  If the EXCL bit is cleared (value\n      0), the
      Posture Broker Client or Posture Broker Server that\n      receives this PB-TNC
      message SHOULD deliver the PA message\n      contained in this PB-TNC message
      to all Posture Collectors or\n      Posture Validators that have expressed an
      interest in PA messages\n      with this PA Message Vendor ID and PA subtype.
      \ If a Posture\n      Broker Client receives a message with the EXCL flag set
      (value 1),\n      the Posture Broker Client SHOULD deliver the PA message contained\n
      \     in this PB-TNC message only to the Posture Collector identified by\n      the
      Posture Collector Identifier field.  However, if the\n      identified Posture
      Collector has not expressed an interest in PA\n      messages with this PA Message
      Vendor ID and PA subtype, the PA\n      message should be silently discarded.
      \ Analogous requirements\n      apply to a Posture Broker Server that receives
      a message with the\n      EXCL flag set.\n      The EXCL bit allows, for example,
      a Posture Validator to handle\n      the circumstance where there are two Posture
      Collectors on the\n      endpoint that are interested in a particular kind of
      PA messages\n      and the Posture Validator has remediation instructions that
      only\n      apply to one of those Posture Collectors.\n      The other bits
      in this Flags field are reserved.  For this version\n      of PB-TNC, they MUST
      be set to 0 on transmission and ignored on\n      reception.\n   PA Message
      Vendor ID (24 bits)\n      The PA Message Vendor ID field identifies a vendor
      by using the\n      SMI Private Enterprise Number (PEN).  Any organization can
      receive\n      its own unique PEN from IANA, the Internet Assigned Numbers\n
      \     Authority.  The PA Message Vendor ID qualifies the PA Subtype\n      field
      so that each vendor has 2^32-1 separate PA subtypes\n      available for its
      use.  PA subtypes standardized by the IETF are\n      always used with a PA
      Message Vendor ID of the value zero (0) in\n      this field.  The PA Message
      Vendor ID 0xffffff is reserved.  A\n      Posture Broker Client or Posture Broker
      Server MUST NOT send\n      messages in which the PA Message Vendor ID field
      has this reserved\n      value (0xffffff).  If a Posture Broker Client or Posture
      Broker\n      Server receives a message in which the PA Message Vendor ID has\n
      \     this reserved value (0xffffff), it MUST respond with a fatal\n      Invalid
      Parameter error code in a CLOSE batch.\n   PA Subtype (32 bits)\n      The PA
      Subtype field identifies the type of the PA message\n      contained in the
      PA Message Body field.  The PA subtype 0xffffffff\n      is reserved.  A Posture
      Broker Client or Posture Broker Server\n      MUST NOT send messages in which
      the PA Subtype field has this\n      reserved value (0xffffffff).  If a Posture
      Broker Client or\n      Posture Broker Server receives a message in which the
      PA Subtype\n      has this reserved value (0xffffffff), it MUST respond with
      a fatal\n      Invalid Parameter error code in a CLOSE batch.  A Posture Broker\n
      \     Client or Posture Broker Server MUST support having multiple PA\n      messages
      in a single PB-TNC batch that have the same PA subtype\n      and/or PA Message
      Vendor ID.\n      IANA maintains a registry of PA subtypes.  Entries in this\n
      \     registry are added by Expert Review with Specification Required,\n      following
      the guidelines in section 6.1.  No PA subtypes are\n      defined in this specification.
      \ Definitions of IETF Standard PA\n      Subtypes are contained in the PA-TNC
      specification [10] and other\n      specifications.  IETF Standard PA Subtypes
      are always used with a\n      PA Message Vendor ID of zero (0).\n      New vendor-specific
      PA subtypes (those used with a non-zero PA\n      Message Vendor ID) may be
      defined and employed by vendors without\n      IETF or IANA involvement.  However,
      Posture Broker Clients and\n      Posture Broker Servers MUST NOT require support
      for particular\n      vendor-specific PA subtypes and MUST interoperate with
      other\n      parties despite any differences in the set of vendor-specific PA\n
      \     subtypes supported (although they MAY permit administrators to\n      configure
      them to require support for specific PA subtypes).\n      Note that the PB-TNC
      Message Type field is completely separate\n      from the PA Subtype field.
      \ The same value (e.g., 0) may have\n      different meanings as a PB-TNC message
      type and as a PA subtype.\n   Posture Collector Identifier (16 bits)\n      The
      Posture Collector Identifier field contains the identifier of\n      the Posture
      Collector associated with this PA message.\n      The Posture Broker Client
      is responsible for assigning one or more\n      Posture Collector Identifier
      values (but not 0xffff) to each\n      Posture Collector involved in a message
      exchange.  Multiple\n      Posture Collector identifiers are required for appropriate\n
      \     correlation in cases where there are multiple components of the\n      same
      type handled by a single Posture Collector, e.g., an endpoint\n      with two
      VPN client implementations handled by a single VPN\n      Posture Collector.
      \ Please refer to section 3.3 of the PA-TNC\n      specification for an example
      that illustrates the use of multiple\n      Posture Collector Identifiers.  The
      Posture Collector Identifier\n      value(s) assigned to a Posture Collector
      by a Posture Broker\n      Client MUST NOT change during the course of a PT
      session.  This\n      identifier is used to identify a unique Posture Collector\n
      \     communicating with the Posture Broker Client on the endpoint\n      during
      a NEA exchange, and is used by the Posture Validator to\n      send response
      attributes to a specific Posture Collector component\n      if required.\n      When
      a Posture Broker Server sets the EXCL flag for a PA message,\n      the Posture
      Broker Server MUST set the Posture Collector\n      Identifier field to the
      identifier of the Posture Collector that\n      should receive the PA message.
      \ If the EXCL flag is not set, a\n      Posture Broker Server MAY still set
      the Posture Collector\n      Identifier value for PA messages that it sends
      to indicate that\n      the PA message is intended as a response to a message
      sent by the\n      Posture Collector associated with the specified Posture Collector\n
      \     Identifier.  If the Posture Broker Server does not wish to\n      indicate
      any Posture Collector in this manner, it SHOULD set this\n      field to the
      reserved value 0xffff.\n   Posture Validator Identifier (16 bits)\n      The
      Posture Validator Identifier field contains the identifier of\n      the Posture
      Validator associated with this PA message.\n      The Posture Broker Server
      MUST assign a unique Posture Validator\n      Identifier value (but not 0xffff)
      to each Posture Validator\n      involved in a message exchange and include
      this Posture Validator\n      identifier in this field for any PA messages sent
      by that Posture\n      Validator.  The Posture Validator Identifier value assigned
      to a\n      Posture Validator by a Posture Broker Server MUST NOT change\n      during
      the course of a PT session.  This identifier is used to\n      identify a unique
      Posture Validator communicating with the Posture\n      Broker Server endpoint
      during a NEA exchange, and is used by the\n      Posture Collector to send attributes
      to a specific Posture\n      Validator if required.\n      When a Posture Broker
      Client sets the EXCL flag for a PA message,\n      the Posture Broker Client
      MUST set the Posture Validator\n      Identifier field to the identifier of
      the Posture Validator that\n      should receive the PA message.  If the EXCL
      flag is not set, a\n      Posture Broker Client MAY still set the Posture Validator\n
      \     Identifier value for PA messages that it sends to indicate that\n      the
      PA message is intended as a response to a message sent by the\n      Posture
      Validator associated with the specified Posture Validator\n      Identifier.
      \ If the Posture Broker Client does not wish to\n      indicate any Posture
      Validator in this manner, it SHOULD set this\n      field to the reserved value
      0xffff.\n   PA Message Body (variable length)\n      The PA Message Body field
      contains the body of the PA message that\n      is being carried in this PB-TNC
      message.  The length of this field\n      can be determined by subtracting the
      length of the fixed-length\n      fields at the start of the PB-TNC message
      (the fields Flags, PB-\n      TNC Vendor ID, PB-TNC Message Type, and PB-TNC
      Message Length) and\n      the fixed-length fields at the start of the PB-PA
      message (Flags,\n      PA Message Vendor ID, PA Subtype, Posture Collector Identifier,\n
      \     and Posture Validator Identifier) from the message length\n      contained
      in the PB-TNC Message Length field.  The length of these\n      fixed-length
      fields is 24 octets.  Therefore, any Posture Broker\n      Client or Posture
      Broker Server that receives a PB-PA message with\n      a PB-TNC Message Length
      field whose value is less than 24 MUST\n      respond with a fatal Invalid Parameter
      error code in a CLOSE\n      batch.\n"
    title: 4.5.  PB-PA
  - contents:
    - "4.6.  PB-Assessment-Result\n   The PB-TNC message type named PB-Assessment-Result
      (value 2) is used\n   by the Posture Broker Server to provide the assessment
      result after\n   the Posture Broker Server has completed the assessment of the\n
      \  endpoint.  The Posture Broker Server will typically compute the\n   assessment
      result as a cumulative of the individual assessment\n   results received from
      the various Posture Validators; the algorithm\n   for computation of assessment
      result at the Posture Broker layer is\n   implementation specific and can also
      change based on policies in a\n   specific deployment.  The Posture Broker Server
      MUST include one\n   message of this type in any batch of type RESULT and MUST
      NOT include\n   a message of this type in any other type of batch.  The Posture\n
      \  Broker Client MUST NOT send a PB-TNC message with this message type.\n   If
      a Posture Broker Server receives a PB-TNC message with this\n   message type,
      it MUST respond with a fatal Invalid Parameter error in\n   a CLOSE batch.  The
      Posture Broker Client MUST implement and process\n   this message and MUST ignore
      any message with this message type that\n   is not part of a batch of type RESULT.\n
      \  The NOSKIP flag in the PB-TNC Message Header MUST be set for this\n   message
      type.  The PB-TNC Vendor ID field MUST contain the value zero\n   (0) and the
      PB-TNC Message Type field MUST contain 2.  If a non-zero\n   value is contained
      in the PB-TNC Vendor ID field, message type 2 has\n   a completely different
      meaning not defined in this specification.\n   The PB-TNC Message Length field
      MUST contain the value 16 since that\n   is the total of the length of the fixed-length
      fields at the start of\n   the PB-TNC message (the fields Flags, PB-TNC Vendor
      ID, PB-TNC\n   Message Type, and PB-TNC Message Length) along with the Assessment\n
      \  Result field described below.  Any Posture Broker Client or Posture\n   Broker
      Server that receives a PB-Assessment-Result message with a PB-\n   TNC Message
      Length field that does not have a value of 16 MUST\n   respond with a fatal
      Invalid Parameter error code in a CLOSE batch.\n   The following diagram illustrates
      the format and contents of the PB-\n   TNC Message Value field for this message
      type.  The text after this\n   diagram describes the fields shown here.\n                           1
      \                  2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |                       Assessment Result                       |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Assessment Result\n      This 32-bit field MUST contain one of the following
      values\n      Value   Description\n      -----   -----------\n      0       Posture
      Broker Server assessed the endpoint to be\n              compliant with policy.\n
      \     1       Posture Broker Server assessed the endpoint to be non-\n              compliant
      with policy but the difference from compliance\n              was minor.\n      2
      \      Posture Broker Server assessed the endpoint to be non-\n              compliant
      with policy and the assessed difference from\n              compliance was very
      significant.\n      3       Posture Broker Server was unable to determine policy\n
      \             compliance due to an error.\n      4       Posture Broker Server
      was unable to determine whether the\n              assessed endpoint is compliant
      with policy based on the\n              attributes provided by endpoint.\n      If
      a Posture Broker Client receives an Assessment Result value\n      other than
      the five values described above, it MUST respond with a\n      fatal Invalid
      Parameter error in a CLOSE batch.  Other values may\n      be defined in future
      versions of PB-TNC but only if the PB-TNC\n      version number is changed.
      \ Therefore, there is no need for an\n      IANA registry for Assessment Result
      values.\n"
    title: 4.6.  PB-Assessment-Result
  - contents:
    - "4.7.  PB-Access-Recommendation\n   The PB-TNC message type named PB-Access-Recommendation
      (value 3) is\n   used by the Posture Broker Server to provide an access recommendation\n
      \  after the Posture Broker Server has completed some assessment of the\n   endpoint.
      \ The PB-Assessment-Result and the PB-Access-Recommendation\n   attribute together
      constitute the global assessment decision for an\n   endpoint.  The PB-Access-Recommendation
      is not authoritative, and the\n   network and host-based access control systems
      would typically use\n   additional information to determine the network access
      that is\n   granted to the endpoint.  The Posture Broker Server MAY include
      one\n   message of this type in any batch of type RESULT and MUST NOT include\n
      \  a message of this type in any other type of batch.  Posture Broker\n   Clients
      MUST NOT send a PB-TNC message with this message type.  If a\n   Posture Broker
      Server receives a PB-TNC message with this message\n   type, it MUST respond
      with a fatal Invalid Parameter error in a CLOSE\n   batch.  The Posture Broker
      Client MUST implement and process this\n   message and MUST ignore any message
      with this message type that is\n   not part of a batch of type RESULT.\n   The
      NOSKIP flag in the PB-TNC Message Header MUST NOT be set for this\n   message
      type.  Any Posture Broker Client or Posture Broker Server\n   that receives
      a PB-Access-Recommendation message with the NOSKIP flag\n   set MUST ignore
      the message and MUST respond with a fatal Invalid\n   Parameter error code in
      a CLOSE batch.  The PB-TNC Vendor ID field\n   MUST contain the value zero (0)
      and the PB-TNC Message Type field\n   MUST contain 3.  If a non-zero value is
      contained in the PB-TNC\n   Vendor ID field, message type 3 has a completely
      different meaning\n   not defined in this specification.  The PB-TNC Message
      Length field\n   MUST contain the value 16 since that is the total of the length
      of\n   the fixed-length fields at the start of the PB-TNC message (the\n   fields
      Flags, PB-TNC Vendor ID, PB-TNC Message Type, and PB-TNC\n   Message Length)
      along with the Access Recommendation field described\n   below.  Any Posture
      Broker Client or Posture Broker Server that\n   receives a PB-Access-Recommendation
      message with a PB-TNC Message\n   Length field that does not have a value of
      16 MUST respond with a\n   fatal Invalid Parameter error code in a CLOSE batch.\n
      \  The following diagram illustrates the format and contents of the PB-\n   TNC
      Message Value field for this message type.  The text after this\n   diagram
      describes the fields shown here.\n       0                   1                   2
      \                  3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |          Reserved             |   Access Recommendation Code  |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Reserved (16 bits)\n      These Reserved bits MUST be set to 0 on transmission
      and ignored\n      on reception.\n   Access Recommendation Code (16 bits)\n
      \     The Access Recommendation Code field identifies the Access\n      Recommendation
      that the Posture Broker Server has made for this\n      Posture Broker Client
      at this time.  This field MUST have one of\n      these three values: 1 for
      Access Allowed (full access), 2 for\n      Access Denied (no access), or 3 for
      Quarantined (partial access).\n      If a Posture Broker Client receives an
      Access Recommendation Code\n      value other than these three values, it MUST
      respond with a fatal\n      Invalid Parameter error code in a CLOSE batch.  Other
      values may\n      be defined in future versions of PB-TNC but only if the PB-TNC\n
      \     version number is changed.  Therefore, there is no need for an\n      IANA
      registry for Access Recommendation Codes.\n"
    title: 4.7.  PB-Access-Recommendation
  - contents:
    - "4.8.  PB-Remediation-Parameters\n   The PB-TNC message type named PB-Remediation-Parameters
      (value 4) is\n   used by the Posture Broker Server to provide global (not Posture\n
      \  Validator-specific) remediation parameters after the Posture Broker\n   Server
      has completed some assessment of the endpoint.  The Posture\n   Broker Server
      MAY include one or more messages of this type in any\n   batch of any type,
      but this message type is most useful in batches of\n   type RESULT.\n   The
      Posture Broker Client MUST NOT send a PB-TNC message with this\n   message type.
      \ If a Posture Broker Server receives a PB-TNC message\n   with this message
      type, it MUST respond with a fatal Invalid\n   Parameter error in a CLOSE batch.
      \ The Posture Broker Client may\n   implement and process this message but is
      not required to do so.  It\n   may skip this message.  Even if the Posture Broker
      Client implements\n   this message type, it is not obligated to act on it.\n
      \  The NOSKIP flag in the PB-TNC Message Header MUST NOT be set for this\n   message
      type.  The PB-TNC Vendor ID field MUST contain the value zero\n   (0) and the
      PB-TNC Message Type field MUST contain 4.  If a non-zero\n   value is contained
      in the PB-TNC Vendor ID field, message type 4 has\n   a completely different
      meaning not defined in this specification.\n   The PB-TNC Message Length field
      MUST contain the length of the entire\n   PB-TNC message, including the fixed-length
      fields at the start of the\n   PB-TNC message (the fields Flags, PB-TNC Vendor
      ID, PB-TNC Message\n   Type, and PB-TNC Message Length), the fixed-length fields
      listed\n   below (Reserved, Remediation Parameters Vendor ID, and Remediation\n
      \  Parameters Type), and the Remediation Parameters.  Since the\n   Remediation
      Parameters field is variable length, the value in the PB-\n   TNC Message Length
      field will vary also.  However, it MUST always be\n   at least 20 to cover the
      fixed-length fields listed in the preceding\n   sentences.  Any Posture Broker
      Client that receives a PB-Remediation-\n   Parameters message with a PB-TNC
      Message Length field that contains\n   an invalid value (e.g., less than 20)
      MUST respond with a fatal\n   Invalid Parameter error code in a CLOSE batch.\n
      \  The following diagram illustrates the format and contents of the PB-\n   TNC
      Message Value field for this message type.  The text after this\n   diagram
      describes the fields shown here.\n       0                   1                   2
      \                  3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |    Reserved   |       Remediation Parameters Vendor ID        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |                  Remediation Parameters Type                  |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |            Remediation Parameters (Variable Length)           |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Reserved (8 bits)\n      These Reserved bits MUST be set to 0 on transmission
      and ignored\n      on reception.\n   Remediation Parameters Vendor ID (24 bits)\n
      \     The Remediation Parameters Vendor ID field identifies a vendor by\n      using
      the SMI Private Enterprise Number (PEN).  Any organization\n      can receive
      its own unique PEN from IANA, the Internet Assigned\n      Numbers Authority.
      \ The Remediation Parameters Vendor ID qualifies\n      the Remediation Parameters
      Type field so that each vendor has 2^32\n      separate Remediation Parameters
      Types available for its use.\n      Remediation Parameters Types standardized
      by the IETF are always\n      used with the value zero (0) in this field.\n
      \  Remediation Parameters Type (32 bits)\n      The Remediation Parameters Type
      field identifies the type of\n      remediation parameters contained in the
      Remediation Parameters\n      field.  A Posture Broker Client or Posture Broker
      Server MUST\n      support having multiple Remediation Parameters messages contained\n
      \     in a single PB-TNC batch that have the same Remediation Parameters\n      Type
      and/or Remediation Parameters Vendor ID.\n      IANA maintains a registry of
      PB-TNC Remediation Parameters Types.\n      Entries in this registry are added
      by Expert Review with\n      Specification Required, following the guidelines
      in section 6.1.\n      A list of IETF Standard PB-TNC Remediation Parameters
      Types\n      defined in this specification appears later in this section.\n
      \     New vendor-specific Remediation Parameters Types (those used with\n      a
      non-zero Remediation Parameters vendor ID) may be defined and\n      employed
      by vendors without IETF or IANA involvement.  However,\n      Posture Broker
      Clients and Posture Broker Servers MUST NOT require\n      support for particular
      vendor-specific Remediation Parameters\n      Types and MUST interoperate with
      other parties despite any\n      differences in the set of vendor-specific Remediation
      Parameters\n      Types supported (although they MAY permit administrators to\n
      \     configure them to require support for specific Remediation\n      Parameters
      Types).\n      Note that the Remediation Parameters Type is completely separate\n
      \     from the PB-TNC Message Type and the PA Subtype fields.  The same\n      value
      (e.g., 0) may have different meanings in each of these\n      fields.\n   Remediation
      Parameters (variable length)\n      The Remediation Parameters field contains
      the actual remediation\n      parameters carried in this PB-TNC message.  The
      length of this\n      field can be determined by subtracting the length of the
      fixed-\n      length fields at the start of the PB-TNC message (the fields\n
      \     Flags, PB-TNC Vendor ID, PB-TNC Message Type, and PB-TNC Message\n      Length)
      and the fixed-length fields at the start of the PB-\n      Remediation-Parameters
      message (Reserved, Remediation Parameters\n      Vendor ID, and Remediation
      Parameters Type) from the message\n      length contained in the PB-TNC Message
      Length field.  The length\n      of these fixed-length fields is 20 octets.
      \ Therefore, any Posture\n      Broker Client that receives a PB-Remediation-Parameters
      message\n      with a PB-TNC Message Length field whose value is less than 20\n
      \     MUST consider this a malformed message.  The Posture Broker Client\n      MUST
      respond with a fatal Invalid Parameter error code in a CLOSE\n      batch.\n"
    - contents:
      - "4.8.1.  IETF Standard PB-TNC Remediation Parameters Types\n      This subsection
        defines several Remediation Parameters Types that\n      have been standardized
        by the IETF.\n   Remediation-URI\n      This Remediation Parameters Type is
        employed by creating a PB-\n      Remediation-Parameters message with a Remediation
        Parameters\n      Vendor ID equal to the value zero (0) and a Remediation
        Parameters\n      Type of 1.  The Remediation Parameters field in the PB-\n
        \     Remediation-Parameters message MUST contain a URI, as described in\n
        \     RFC 3986 [2].  This URI contains instructions and resources for\n      remediation.
        \ The Posture Broker Client MAY load the URI and\n      display the resulting
        web page to the user.  The Posture Broker\n      Client MAY also ignore the
        URI or take another action with it.\n      The Posture Broker Server and any
        other parties involved in\n      configuring this remediation URI should consider
        the likely\n      capabilities of the Posture Broker Client when creating
        the URI\n      and the content referenced by the URI.  For example, they should\n
        \     consider the Posture Broker Client's language preferences as\n      expressed
        in the PB-Language-Preference message.\n   Remediation-String\n      This
        Remediation Parameters Type is employed by creating a PB-\n      Remediation-Parameters
        message with a Remediation Parameters\n      Vendor ID equal to the value
        zero (0) and a Remediation Parameters\n      Type of 2.  The Remediation Parameters
        field in the PB-\n      Remediation-Parameters message MUST contain the structure
        defined\n      below, which contains human-readable instructions for remediation.\n
        \     The Posture Broker Client MAY display the instructions to the\n      user.
        \ The Posture Broker Client MAY also ignore the instructions\n      or take
        another action with them.  The Posture Broker Server and\n      any other
        parties involved in configuring these instructions\n      should consider
        the likely capabilities of the Posture Broker\n      Client when creating
        the instructions.  For example, they should\n      consider the Posture Broker
        Client's language preferences as\n      expressed in the PB-Language-Preference
        message.\n      The following diagram illustrates the format and contents
        of the\n      Remediation Parameters field when carrying a Remediation-String\n
        \     parameter.  The text after this diagram describes the fields shown\n
        \     here.\n                          1                   2                   3\n
        \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |                   Remediation String Length                   |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |                Remediation String (Variable Length)           |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     | Lang Code Len |  Remediation String Lang Code (Variable Len)  |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Remediation String Length (32 bits)\n      The Remediation String Length
        contains the length of the\n      Remediation String field in octets.\n   Remediation
        String (variable length)\n      The Remediation String field MUST contain
        a UTF-8 [6] encoded\n      string.  This string contains human-readable instructions
        for\n      remediation that MAY be displayed to the user by the Posture\n
        \     Broker Client.  NUL termination MUST NOT be included.  If a\n      Posture
        Broker Client receives a Reason String that does contain a\n      NUL termination,
        it MUST respond with a fatal Invalid Parameter\n      error in a CLOSE batch.\n
        \  Lang Code Len (8 bits)\n      The Lang Code Len field contains the length
        of the Remediation\n      String Lang Code field in octets.  This value may
        be set to zero\n      to indicate that the language code for the Remediation
        String\n      field is not known.\n   Remediation String Lang Code (variable
        length)\n      The Remediation String Lang Code field contains a US-ASCII
        string\n      composed of a well-formed RFC 4646 [3] language tag that indicates\n
        \     the language(s) used in the Remediation String in the Remediation\n
        \     Parameters field.  A zero-length string may be sent for this field\n
        \     (essentially omitting this field) to indicate that the language\n      code
        for the Remediation String field is not known.\n"
      title: 4.8.1.  IETF Standard PB-TNC Remediation Parameters Types
    title: 4.8.  PB-Remediation-Parameters
  - contents:
    - "4.9.  PB-Error\n   The PB-TNC message type named PB-Error (value 5) is used
      by the\n   Posture Broker Client or Posture Broker Server to indicate that an\n
      \  error has occurred.  The Posture Broker Client or Posture Broker\n   Server
      MAY include one or more messages of this type in any batch of\n   any type.
      \ Other messages may also be included in the same batch.\n   The party that
      receives a PB-Error message MAY log it or take other\n   action as deemed appropriate.
      \ If the FATAL flag is set (value 1),\n   the recipient MUST terminate the PB-TNC
      session after processing the\n   batch without sending any messages in response.
      \ Every Posture Broker\n   Client and Posture Broker Server MUST implement this
      message type.\n   The NOSKIP flag in the PB-TNC Message Header MUST be set for
      this\n   message type.  The PB-TNC Vendor ID field MUST contain the value zero\n
      \  (0) and the PB-TNC Message Type field MUST contain 5.  If a non-zero\n   value
      is contained in the PB-TNC Vendor ID field, message type 5 has\n   a completely
      different meaning not defined in this specification.\n   The PB-TNC Message
      Length field MUST contain the length of the entire\n   PB-TNC message, including
      the fixed-length fields at the start of the\n   PB-TNC message (the fields Flags,
      PB-TNC Vendor ID, PB-TNC Message\n   Type, and PB-TNC Message Length), the fixed-length
      fields listed\n   below (Flags, Error Code Vendor ID, Error Code, and Reserved),
      and\n   the Error Parameters.  Since the Error Parameters field is variable\n
      \  length, the value in the PB-TNC Message Length field will vary also.\n   However,
      it MUST always be at least 20 to cover the fixed-length\n   fields listed in
      the preceding sentences.  Any Posture Broker Client\n   or Posture Broker Server
      that receives a PB-Error message with a PB-\n   TNC Message Length field that
      contains an invalid value (e.g., less\n   than 20) MUST respond with a fatal
      Invalid Parameter error code in a\n   CLOSE batch.  Any PB-Error message generated
      while processing a PB-\n   Error message MUST be a fatal error to avoid the
      chance of generating\n   an infinite loop of errors.\n   The following diagram
      illustrates the format and contents of the PB-\n   TNC Message Value field for
      this message type.  The text after this\n   diagram describes the fields shown
      here.\n       0                   1                   2                   3\n
      \      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |    Flags      |              Error Code Vendor ID             |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |           Error Code          |           Reserved            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |                Error Parameters (Variable Length)             |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Flags (8 bits)\n      This field defines flags relating to the error.\n      Bit
      0 of this flags field (the most significant bit) is known as\n      the FATAL
      flag.  If the FATAL bit is cleared (value 0), the\n      Posture Broker Client
      or Posture Broker Server that receives this\n      PB-TNC message SHOULD process
      this error and then continue with\n      the exchange.  If the FATAL flag is
      set (value 1), the Posture\n      Broker Client or Posture Broker Server that
      receives this PB-TNC\n      message MUST terminate the exchange after processing
      the error.\n      In addition, any Posture Broker Client or Posture Broker Server\n
      \     that sends a fatal error MUST NOT process the batch that caused\n      the
      error and MUST terminate the exchange after sending the batch\n      containing
      the error report.  A PB-Error message with the FATAL\n      flag set MUST always
      be sent in a CLOSE batch since the sender\n      will be terminating the exchange
      immediately after sending the\n      batch.\n      The FATAL bit allows a Posture
      Broker Client or Posture Broker\n      Server to signal a fatal error (like
      an invalid batch type) and/or\n      a non-fatal error (like an invalid language
      tag for a preferred\n      language).\n      The other bits in this Flags field
      are reserved.  For this version\n      of PB-TNC, they MUST be set to 0 on transmission
      and ignored on\n      reception.\n   Error Code Vendor ID (24 bits)\n      The
      Error Code Vendor ID field identifies a vendor by using the\n      SMI Private
      Enterprise Number (PEN).  Any organization can receive\n      its own unique
      PEN from IANA, the Internet Assigned Numbers\n      Authority.  The Error Code
      Vendor ID qualifies the Error Code\n      field so that each vendor has 2^16
      separate Error Codes available\n      for its use.  Error codes standardized
      by the IETF are always used\n      with the value zero (0) in this field.  For
      detailed descriptions\n      of those messages, see the next few subsections.\n
      \  Error Code (16 bits)\n      The Error Code field identifies the type of error
      being signaled\n      with this message.  The format of the Error Parameters
      field\n      depends on the value of the Error Code Vendor ID and the Error\n
      \     Code.  However, any recipient that does not understand a\n      particular
      error code can process the error fairly well by using\n      the FATAL flag
      to determine whether the error is fatal and the PB-\n      TNC Message Length
      to skip over the Error Parameters field (or log\n      it).\n      IANA maintains
      a registry of PB-TNC Error Codes.  Entries in this\n      registry are added
      by Expert Review with Specification Required,\n      following the guidelines
      in section 6.1.  A list of IETF Standard\n      PB-TNC Error Codes defined in
      this specification appears later in\n      section 4.9.1.\n      New vendor-specific
      error codes (those used with a non-zero error\n      code vendor ID) may be
      defined and employed by vendors without\n      IETF or IANA involvement.  Posture
      Broker Clients and Posture\n      Broker Servers that receive an unknown error
      code MUST process\n      this error code gracefully by ignoring or logging it
      if it is not\n      marked as fatal and terminating the exchange if it is marked
      as\n      fatal.\n   Reserved (16 bits)\n      The Reserved bits MUST be set
      to 0 on transmission and ignored on\n      reception.\n"
    - contents:
      - "4.9.1.  IETF Standard PB-TNC Error Codes\n   The following error codes are
        IETF Standard PB-TNC Error Codes, hence\n   the Error Code Vendor ID MUST
        be the value zero (0).  The following\n   table defines the 16-bit error code.
        \ Vendor-specific error codes may\n   be defined by setting the Error Code
        Vendor ID to the defining\n   vendor's SMI PEN and setting the Error Code
        field to whatever error\n   code(s) that vendor has defined.  The format,
        length, and meaning of\n   the Error Parameters field varies, based on the
        Error Code Vendor ID\n   and Error Code.  Subsequent sections of this document
        define the\n   format, length, and meaning of the Error Parameters for the
        IETF\n   Standard PB-TNC Error Codes defined in this section.\n   Error Code
        \ Definition\n   ----------  ----------\n   0           Unexpected Batch Type.
        \ Error Parameters are empty.\n   1           Invalid Parameter.  Error Parameters
        has offset where\n               invalid value was found.\n   2           Local
        Error.  Error Parameters are empty.\n   3           Unsupported Mandatory
        Message.  Error Parameters has\n               offset of offending PB-TNC
        Message\n   4           Version Not Supported.  Error Parameters has information\n
        \              about which versions are supported.\n"
      title: 4.9.1.  IETF Standard PB-TNC Error Codes
    - contents:
      - "4.9.2.  Error Parameters Structures for IETF Standard PB-TNC Error Codes\n
        \  This section defines the format, length, and meaning of the Error\n   Parameters
        field for the IETF Standard PB-TNC Error Codes defined in\n   this specification.\n
        \  The Error Parameters field is zero length for the IETF Standard PB-\n   TNC
        Error Code 0.  The FATAL flag MUST be set for this error code.\n   The Error
        Parameters field has the following structure for the IETF\n   Standard PB-TNC
        Error Code 1.  The Offset field is the offset in\n   octets from the start
        of the PB-TNC batch to the invalid value.  The\n   FATAL flag may be either
        set or cleared for this error code.\n       0                   1                   2
        \                  3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
        3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |                              Offset                           |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  The Error Parameters field is zero length for the IETF Standard PB-\n   TNC
        Error Code 2.  The FATAL flag MUST be set for this error code.\n   The Error
        Parameters field has the following structure for the IETF\n   Standard PB-TNC
        Error Code 3.  The Offset field is the offset in\n   octets from the start
        of the PB-TNC batch to the PB-TNC message whose\n   message type was not recognized
        (and where the NOSKIP flag was set).\n   The FATAL flag MUST be set for this
        error code.\n       0                   1                   2                   3\n
        \      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |                              Offset                           |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  The Error Parameters field has the following structure for the IETF\n   Standard
        PB-TNC Error Code 4.  The FATAL flag MUST be set for this\n   error code.\n
        \      0                   1                   2                   3\n       0
        1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     |  Bad Version  |  Max Version  |  Min Version  |   Reserved    |\n
        \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  The Bad Version field is the version number that was received and is\n
        \  not supported.  The Max Version and Min Version fields indicate which\n
        \  PB-TNC version numbers are supported by the sender of the error code.\n
        \  The sender MUST support all PB-TNC versions between the Min Version\n   and
        the Max Version, inclusive (i.e., including the Min Version and\n   the Max
        Version) but excluding the reserved versions listed in\n   section 4.1.  The
        Reserved field MUST be set to 0 on transmission and\n   ignored upon reception.
        \ When possible, recipients of this error code\n   SHOULD send future messages
        to the Posture Broker Server or Posture\n   Broker Client that originated
        this error message with a PB-TNC\n   version number within the stated range.\n
        \  Any party that is sending the Version Not Supported error code MUST\n   include
        that error code as the only PB-TNC message in a PB-TNC CLOSE\n   batch with
        version number 2.  All parties that send PB-TNC batches\n   SHOULD be able
        to properly process a batch that meets this\n   description, even if they
        cannot process any other aspect of PB-TNC\n   version 2.  This ensures that
        a PB-TNC version exchange can proceed\n   properly, no matter what versions
        of PB-TNC the parties implement.\n"
      title: 4.9.2.  Error Parameters Structures for IETF Standard PB-TNC Error Codes
    title: 4.9.  PB-Error
  - contents:
    - "4.10.  PB-Language-Preference\n   The PB-TNC message type named PB-Language-Parameters
      (value 6) is\n   used by the Posture Broker Client to indicate which language
      or\n   languages it would prefer for any human-readable strings that might\n
      \  be sent to it.  This allows the Posture Broker Server and Posture\n   Validators
      to adapt any messages they may send to the Posture Broker\n   Client's preferences
      (probably determined by the language preferences\n   of the endpoint's users).\n
      \  The Posture Broker Server may also send this message type to the\n   Posture
      Broker Client to indicate the Posture Broker Server's\n   language preferences,
      but this is not very useful since the Posture\n   Broker Client rarely sends
      human-readable strings to the Posture\n   Broker Server and, if it does, rarely
      can adapt those strings to the\n   preferences of the Posture Broker Server.\n
      \  No Posture Broker Client or Posture Broker Server is required to send\n   or
      implement this message type.  However, a Posture Broker Server\n   SHOULD attempt
      to adapt to user language preferences by implementing\n   this message type,
      passing the language preference information to\n   Posture Validators, and allowing
      administrators to configure human-\n   readable languages in whatever languages
      are preferred by their\n   users.\n   A Posture Broker Client or Posture Broker
      Server may include a\n   message of this type in any batch of any type.  However,
      it is\n   suggested that this message be included in the first batch sent by\n
      \  the Posture Broker Client or Posture Broker Server in a PB-TNC\n   session
      so that the recipient can start adapting its human-readable\n   messages as
      soon as possible.  If one PB-Language-Parameters message\n   is received and
      then another one is received in a later batch for the\n   same PB-TNC session,
      the value included in the later message should\n   be considered to replace
      the value in the earlier message.\n   A Posture Broker Client or Posture Broker
      Server MUST NOT include\n   more than one message of this type in a single batch.
      \ If a Posture\n   Broker Client or Posture Broker Server receives more than
      one message\n   of this type in a single batch, it should ignore all but the
      last\n   one.\n   The NOSKIP flag in the PB-TNC Message Header MUST NOT be set
      for this\n   message type.  The PB-TNC Vendor ID field MUST contain the value
      zero\n   (0) and the PB-TNC Message Type field MUST contain 6.  If a non-zero\n
      \  value is contained in the PB-TNC Vendor ID field, message type 6 has\n   a
      completely different meaning not defined in this specification.\n   The PB-TNC
      Message Length field MUST contain the length of the entire\n   PB-TNC message,
      including the fixed-length fields at the start of the\n   PB-TNC message (the
      fields Flags, PB-TNC Vendor ID, PB-TNC Message\n   Type, and PB-TNC Message
      Length) and the Language Preference field.\n   Since the Language Preference
      field is variable length, the value in\n   the PB-TNC Message Length field will
      vary also.  However, it MUST\n   always be at least 12 to cover the fixed-length
      fields listed in the\n   preceding sentences.\n   The following diagram illustrates
      the format and contents of the PB-\n   TNC Message Value field for this message
      type.  The text after this\n   diagram describes the fields shown here.\n       0
      \                  1                   2                   3\n       0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |              Language Preference (Variable Length)            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Language Preference (variable length)\n      The Language Preference field
      contains an Accept-Language header,\n      as described in RFC 3282 [4] (using
      the RFC 2234 ABNF definition\n      of Accept-Language included in that RFC,
      US-ASCII only, no control\n      characters allowed, no comments, no NUL termination).
      \ Any Posture\n      Broker Client or Posture Broker Server that sends a PB-Language-\n
      \     Preference message MUST ensure that the Language Preference field\n      conforms
      to this format.  For example, one acceptable value would\n      be \"Accept-Language:
      fr, en\" (without the quote marks).\n      A zero-length Language Preference
      field indicates that no language\n      preference information is available.
      \ Generally, there's no need\n      to send a PB-Language-Preference message
      with a zero-length\n      Language Preference field since this is equivalent
      to sending no\n      PB-Language-Preference message at all, but it may be useful
      to\n      send a zero-length Language Preference field if a PB-Language-\n      Preference
      message with a non-zero-length Language Preference\n      field was sent in
      an earlier batch but these preferences no longer\n      apply.\n"
    title: 4.10.  PB-Language-Preference
  - contents:
    - "4.11.  PB-Reason-String\n   The PB-TNC message type named PB-Reason-String
      (value 7) is used by\n   the Posture Broker Server to provide a human-readable
      explanation for\n   the global assessment decision conveyed in the PB-Assessment-Result
      &\n   PB-Access-Recommendation messages.  Therefore, a PB-Reason-String\n   message
      SHOULD only be included in the same batch as the PB-\n   Assessment-Result and
      PB-Access-Recommendation message.  The Posture\n   Broker Client MUST NOT ever
      send a PB-Reason-String message.\n   The Posture Broker Client is not required
      to implement this message\n   type and the Posture Broker Server is not required
      to send it.\n   However, there is some benefit to doing so since users are often\n
      \  curious about why the endpoint was considered non-compliant.  The\n   manner
      in which a Posture Broker Client uses this field is up to the\n   implementer
      and not specified here.  The Posture Broker Client MAY\n   display the message
      to the user, log it, ignore it, or take any other\n   action that is not inconsistent
      with the requirements of this\n   specification.  Since the strings contained
      in this message are\n   human-readable, the Posture Broker Server SHOULD adapt
      them to the\n   Posture Broker Client's language preferences as expressed in
      any PB-\n   Language-Preference message sent by the Posture Broker Client in
      this\n   PB-TNC session.\n   A Posture Broker Server MAY include more than one
      message of this\n   type in any batch of any type.  However, it is suggested
      that this\n   message be included in the same batch as the PB-Assessment-Result
      and\n   PB-Access-Recommendation message.  If more than one PB-Reason-String\n
      \  message is included in a single batch, the Posture Broker Client\n   SHOULD
      consider the strings included in these messages to be\n   equivalent in meaning.
      \ This allows the Posture Broker Server to\n   return multiple equivalent reason
      strings in different languages,\n   which may help if the Posture Broker Server
      is not able to\n   accommodate the Posture Broker Client's language preferences.\n
      \  The NOSKIP flag in the PB-TNC Message Header MUST NOT be set for this\n   message
      type.  The PB-TNC Vendor ID field MUST contain the value zero\n   (0) and the
      PB-TNC Message Type field MUST contain 7.  If a non-zero\n   value is contained
      in the PB-TNC Vendor ID field, message type 7 has\n   a completely different
      meaning not defined in this specification.\n   The PB-TNC Message Length field
      MUST contain the length of the entire\n   PB-TNC message, including the fixed-length
      fields at the start of the\n   PB-TNC message (the fields Flags, PB-TNC Vendor
      ID, PB-TNC Message\n   Type, and PB-TNC Message Length), the fixed-length fields
      listed\n   below (Reason String Length and Lang Code Len), and the Reason String\n
      \  and Reason String Language Code fields.  Since the Reason String and\n   Reason
      String Language Code fields are variable length, the value in\n   the PB-TNC
      Message Length field will vary also.  However, it MUST\n   always be at least
      17 to cover the fixed-length fields listed in the\n   preceding sentences.  In
      fact, the PB-TNC Message Length field MUST\n   be exactly the sum of 17 (for
      the fixed-length fields) and the values\n   of the Reason String Length and
      Lang Code Len fields.  If this is not\n   the case, the recipient MUST respond
      with a fatal Invalid Parameter\n   error code in a CLOSE batch.\n   The following
      diagram illustrates the format and contents of the PB-\n   TNC Message Value
      field for this message type.  The text after this\n   diagram describes the
      fields shown here.\n       0                   1                   2                   3\n
      \      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |                      Reason String Length                     |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |                Reason String (Variable Length)                |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     | Lang Code Len | Reason String Language Code (Variable Length) |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Reason String Length (32 bits)\n      The Reason String Length field contains
      the length of the Reason\n      String field in octets.\n   Reason String (variable
      length)\n      The Reason String field contains a UTF-8 encoded string that\n
      \     provides a human-readable reason for the Posture Broker Server's\n      assessment
      decision.  NUL termination MUST NOT be included.  If a\n      Posture Broker
      Client receives a Reason String that does contain a\n      NUL termination,
      it MUST respond with a fatal Invalid Parameter\n      error code in a CLOSE
      batch.  A zero-length string MUST NOT be\n      sent since this is the same
      as sending no reason string at all,\n      leaving the reason unspecified.\n
      \  Lang Code Len (8 bits)\n      The Lang Code Len field contains the length
      of the Reason String\n      Language Code field in octets.\n   Reason String
      Language Code (variable length)\n      The Reason String Language Code field
      contains a US-ASCII string\n      containing a well-formed RFC 4646 [3] language
      tag that indicates\n      the language(s) used in the Reason String in this
      message.  NUL\n      termination MUST NOT be included in this field.  A zero-length\n
      \     string MAY be sent for this field (essentially omitting this\n      field)
      to indicate that the language code for the reason string is\n      not known.\n"
    title: 4.11.  PB-Reason-String
  title: 4.  PB-TNC Protocol Specification
- contents:
  - "5.  Security Considerations\n   PT is required and assumed to provide reliable
    and secure transport\n   for the PB-TNC protocol (including authentication, confidentiality,\n
    \  integrity protection, and replay protection).  Still, it is useful to\n   describe
    the possible threats to PB-TNC and the countermeasures that\n   are or can be
    employed.  This section does that.\n"
  - contents:
    - "5.1.  Threat Model\n   There are several possible threats to the PB-TNC protocol.\n
      \  Untrusted intermediaries on the network between the NEA Client and\n   the
      NEA Server may attempt to observe data sent between the Posture\n   Broker Client
      and the Posture Broker Server via PB-TNC, modify this\n   data in transit, reorder
      it, or replay it.  They may also attempt to\n   mount a denial-of-service attack
      against either party or truncate the\n   exchange prematurely.  If successful,
      these attacks may result in\n   improper assessment decisions relating to the
      NEA Client, failure to\n   reassess these decisions in light of changed circumstances,
      improper\n   remediation instructions sent to the NEA Client (which could lead
      to\n   the compromise of the NEA Client), unauthorized access to\n   confidential
      information about the NEA Client's health and/or\n   identity, improper reason
      strings or other messages that might be\n   displayed to the user, access to
      reusable credentials such as posture\n   assertions, denial of service on the
      NEA Client, and even complete\n   denial of access to the network (if a denial-of-service
      attack\n   against the NEA Server was successful and the network required\n
      \  permission from the NEA Server to grant network access).\n   Trusted intermediaries
      between the Posture Broker Client and the\n   Posture Broker Server include
      the Posture Transport Client and the\n   Posture Transport Server.  These parties
      are considered trusted\n   because they are responsible for properly implementing
      the security\n   protections provided by PT.  If they fail to do so properly,
      these\n   security protections may be diminished or eliminated altogether.  The\n
      \  possible attacks are the same as those listed in the previous\n   paragraph.
      \ To give one fairly likely example, if a Posture Transport\n   Client fails
      to properly authenticate and authorize the Posture\n   Transport Server (whether
      through implementation error or through\n   user configuration to \"trust anyone\"),
      the improperly authorized\n   Posture Transport Server may mount any of the
      previously described\n   attacks against the NEA Client.\n   Compromise of any
      of the trusted parties (the Posture Broker Client,\n   the Posture Transport
      Client, the Posture Broker Server, or the\n   Posture Transport Server) may
      result in failures that are equivalent\n   to those listed in the first paragraph.
      \ These failures may be even\n   more dangerous since they will not be detectable
      by observing network\n   traffic or by examining and comparing audit logs.  Failure
      to\n   properly secure communications between the Posture Broker Client and\n
      \  the Posture Transport Client or between the Posture Broker Server and\n   the
      Posture Transport Server is usually indistinguishable from\n   compromise of
      those parties.  Compromise of the operating system or\n   other critical software,
      firmware, or hardware components on the NEA\n   Client or NEA Server will typically
      result in an equivalent result.\n   And an attacker's ability to gain privileged
      access to the NEA Client\n   or NEA Server (even for a brief time, long enough
      to disable or\n   misconfigure security settings) is generally equivalent as
      well.  If\n   the NEA Client or NEA Server are dependent on other services for\n
      \  their proper operation (including Posture Collectors, Posture\n   Validators,
      directories, and patch management services), compromise\n   of those services
      may result in compromise or failure of the\n   dependent parties.  Of course,
      compromise or failure of NEA Server\n   components is most serious since this
      would probably affect a large\n   number of NEA Clients while the effects of
      NEA Client compromise\n   might well be limited to a single machine.\n"
    title: 5.1.  Threat Model
  - contents:
    - "5.2.  Countermeasures\n   The primary countermeasure against attacks by untrusted
      network\n   intermediaries is the security provided by the PT protocol.  Any\n
      \  candidate PT protocols should be carefully examined to ensure that\n   all
      the threats described above are adequately addressed.\n   As noted above, compromise
      or erroneous operation of any of the\n   trusted parties is a serious matter
      with substantial security\n   implications.  This includes the Posture Broker
      Client, the Posture\n   Broker Server, the Posture Transport Client, and the
      Posture\n   Transport Server.  These are all security-sensitive components so\n
      \  they should be built and managed in accordance with best practices\n   for
      security devices.  This is especially important for the NEA\n   Server and its
      components since a compromise of this device would\n   affect the security and
      availability of the entire network (similar\n   to compromise of a AAA server).
      \ Communications between the trusted\n   parties must also be secured.  For
      example, if the Posture Broker\n   Server and the Posture Transport Server are
      separate components,\n   their communications must be secured.\n   Since the
      NEA Client may be a mobile device with little physical\n   security (such as
      a laptop computer or even a public telephone), it\n   should generally be assumed
      that some proportion of Access NEA\n   Clients will be compromised and therefore
      hostile.  The NEA Server\n   should be designed to be robust against hostile
      NEA Clients.  Once a\n   compromised NEA Client is detected, it can be treated
      in a manner\n   equivalent to an untrusted party and should pose no greater
      threat\n   than any other untrusted party.\n   Countermeasures against a compromised
      NEA Server (or a component\n   thereof such as a Posture Broker Server or a
      Posture Transport\n   Server) include prevention of compromise, detection of
      compromise,\n   and mitigation of the effects of compromise.  For prevention,
      the NEA\n   Server and its components and dependencies should be implemented\n
      \  using secure implementation techniques (e.g., secure coding and\n   minimization)
      and managed using secure practices (e.g., strong\n   authentication and separation
      of duty).  For detection, the behavior\n   of the NEA Server should be monitored
      (e.g., via logging especially\n   of remediation instructions, intrusion detection
      systems, and probes\n   that impersonate a valid NEA Client and record NEA Server
      behavior)\n   and any anomalies analyzed.  For mitigation, NEA Clients should
      not\n   blindly follow remediation instructions received from a trusted NEA\n
      \  Server.  At least for patches and other dangerous actions, they\n   should
      validate these actions (e.g., via user confirmation) before\n   proceeding.
      \ It should not be possible to configure a NEA Client to\n   trust all NEA Servers
      without proper authentication and\n   authorization.\n"
    title: 5.2.  Countermeasures
  title: 5.  Security Considerations
- contents:
  - "6.  IANA Considerations\n   Four new IANA registries are defined by this specification:
    PB-TNC\n   Message Types, PA Subtypes, PB-TNC Remediation Parameters Types, and\n
    \  PB-TNC Error Codes.  This section explains how these registries work.\n   All
    of these registries support IETF standard values and vendor-\n   defined values.
    \ To explain this phenomenon, we will use the PB-TNC\n   Message Type as an example
    but the other three registries work the\n   same way.  Whenever a PB-TNC Message
    Type appears on a network, it is\n   always accompanied by an SMI Private Enterprise
    Number (PEN), also\n   known as a vendor ID.  If this vendor ID is zero, the accompanying\n
    \  PB-TNC Message Type is an IETF standard value listed in the IANA\n   registry
    for PB-TNC Message Types and its meaning is defined in the\n   specification listed
    for that PB-TNC Message Type in that registry.\n   If the vendor ID is not zero,
    the meaning of the PB-TNC Message Type\n   is defined by the vendor identified
    by the vendor ID (as listed in\n   the IANA registry for SMI PENs).  The identified
    vendor is encouraged\n   but not required to register with IANA some or all of
    the PB-TNC\n   Message Types used with their vendor ID and publish a specification\n
    \  for each of these values.\n   This delegation of namespace is analogous to
    the technique used for\n   OIDs.  It can result in interoperability problems if
    vendors require\n   support for particular vendor-specific values.  However, such\n
    \  behavior is explicitly prohibited by this specification, which\n   dictates
    that \"Posture Broker Clients and Posture Broker Servers MUST\n   NOT require
    support for particular vendor-specific PB-TNC message\n   types and MUST interoperate
    with other parties despite any\n   differences in the set of vendor-specific PB-TNC
    message types\n   supported (although they MAY permit administrators to configure
    them\n   to require support for specific PB-TNC message types).\" Similar\n   requirements
    are included for PA Subtypes, Remediation Parameters\n   Types, and PB-TNC Error
    Codes.\n"
  - contents:
    - "6.1.  Designated Expert Guidelines\n   For all of the four IANA registries
      defined by this specification,\n   new values are added to the registry by Expert
      Review with\n   Specification Required, using the Designated Expert process
      defined\n   in RFC 5226 [5].\n   This section provides guidance to designated
      experts so that they may\n   make decisions using a philosophy appropriate for
      these registries.\n   The registries defined in this document have plenty of
      values.  In\n   most cases, the IETF has approximately 2^32 values available
      for it\n   to define and each vendor the same number of values for its use.
      \ The\n   only exception is the registry for PB-TNC Error Codes where 2^16\n
      \  values are available for the IETF and 2^16 values for each vendor.\n   Because
      there are so many values available, designated experts should\n   not be terribly
      concerned about exhausting the set of values.\n   Instead, designated experts
      should focus on the following\n   requirements.  All values in these IANA registries
      MUST be documented\n   in a specification that is permanently and publicly available.
      \ IETF\n   standard values MUST also be useful, not harmful to the Internet,
      and\n   defined in a manner that is clear and likely to ensure\n   interoperability.\n
      \  Designated experts should encourage vendors to avoid defining similar\n   but
      incompatible values and instead agree on a single IETF standard\n   value.  However,
      it is beneficial to document existing practice.\n   There are several ways to
      ensure that a specification is permanently\n   and publicly available.  It may
      be published as an RFC.\n   Alternatively, it may be published in another manner
      that makes it\n   freely available to anyone.  However, in this latter case,
      the vendor\n   MUST supply a copy to the IANA and authorize the IANA to archive
      this\n   copy and make it freely available to all if at some point the\n   document
      becomes no longer freely available to all through other\n   channels.\n"
    title: 6.1.  Designated Expert Guidelines
  - contents:
    - "6.2.  Registry for PB-TNC Message Types\n   The name for this registry is \"PB-TNC
      Message Types\".  Each entry in\n   this registry should include a human-readable
      name, an SMI Private\n   Enterprise Number, a decimal integer value between
      0 and 2^32-2, and\n   a reference to a specification where the contents of this
      message\n   type are defined.  This specification must define the meaning of
      this\n   PB-TNC message type and the format and semantics of the PB-TNC\n   Message
      Value field for PB-TNC messages that include the designated\n   numeric value
      in the PB-TNC Message Type field and the designated\n   Private Enterprise Number
      in the PB-TNC Vendor ID field.\n   Entries to this registry are added by Expert
      Review with\n   Specification Required, following the guidelines in section
      6.1.\n   The following entries for this registry are defined in this document.\n
      \  They are the initial entries in the registry for PB-TNC Message\n   Types.\n
      \  PEN Integer Name                         Defining Specification\n   --- -------
      ----                         ----------------------\n   0   0       PB-Experimental
      \             RFC 5793\n   0   1       PB-PA                        RFC 5793\n
      \  0   2       PB-Assessment-Result         RFC 5793\n   0   3       PB-Access-Recommendation
      \    RFC 5793\n   0   4       PB-Remediation-Parameters    RFC 5793\n   0   5
      \      PB-Error                     RFC 5793\n   0   6       PB-Language-Preference
      \      RFC 5793\n   0   7       PB-Reason-String             RFC 5793\n   0
      0xffffffff Reserved                    RFC 5793\n"
    title: 6.2.  Registry for PB-TNC Message Types
  - contents:
    - "6.3.  Registry for PA Subtypes\n   The name for this registry is \"PA Subtypes\".
      \ Each entry in this\n   registry should include a human-readable name, an SMI
      Private\n   Enterprise Number, a decimal integer value between 0 and 2^32-2,
      and\n   a reference to a specification where the contents of this PA subtype\n
      \  are defined.  This specification must define the meaning of this PA\n   subtype
      and the format and semantics of the PA Message Body field for\n   PB-TNC messages
      that have a PB-TNC Vendor ID of 0, a PB-TNC Message\n   Type of PB-PA, the designated
      numeric value in the PA Subtype field,\n   and the designated Private Enterprise
      Number in the PA Message Vendor\n   ID field.\n   Entries to this registry are
      added by Expert Review with\n   Specification Required, following the guidelines
      in section 6.1.\n   This document does not define any initial entries for this
      registry.\n   Therefore, this registry should initially be empty.  Subsequent
      RFCs\n   (such as PA-TNC) will define entries in this registry.\n"
    title: 6.3.  Registry for PA Subtypes
  - contents:
    - "6.4.  Registry for PB-TNC Remediation Parameters Types\n   The name for this
      registry is \"PB-TNC Remediation Parameters Types\".\n   Each entry in this
      registry should include a human-readable name, an\n   SMI Private Enterprise
      Number, a decimal integer value between 0 and\n   2^32-1, and a reference to
      a specification where the contents of this\n   remediation parameters type are
      defined.  This specification must\n   define the meaning of this remediation
      parameters type value and the\n   format and semantics of the Remediation Parameters
      field for PB-TNC\n   messages that have a PB-TNC Vendor ID of 0, a PB-TNC Message
      Type of\n   PB-Remediation-Parameters, the designated numeric value in the\n
      \  Remediation Parameters Type field, and the designated Private\n   Enterprise
      Number in the Remediation Parameters Vendor ID field.\n   Entries to this registry
      are added by Expert Review with\n   Specification Required, following the guidelines
      in section 6.1.\n   The following entries for this registry are defined in this
      document.\n   They are the initial entries in the registry for PB-TNC Remediation\n
      \  Parameters Types.\n   PEN Integer Name                      Defining Specification\n
      \  --- ------- ----                      ----------------------\n   0   1       Remediation-URI
      \          RFC 5793\n   0   2       Remediation-String        RFC 5793\n"
    title: 6.4.  Registry for PB-TNC Remediation Parameters Types
  - contents:
    - "6.5.  Registry for PB-TNC Error Codes\n   The name for this registry is \"PB-TNC
      Error Codes\".  Each entry in\n   this registry should include a human-readable
      name, an SMI Private\n   Enterprise Number, a decimal integer value between
      0 and 2^16-1, and\n   a reference to a specification where this error code is
      defined.\n   This specification must define the meaning of this error code and
      the\n   format and semantics of the Error Parameters field for PB-TNC\n   messages
      that have a PB-TNC Vendor ID of 0, a PB-TNC Message Type of\n   PB-Error, the
      designated numeric value in the Error Code field, and\n   the designated Private
      Enterprise Number in the Error Code Vendor ID\n   field.\n   Entries to this
      registry are added by Expert Review with\n   Specification Required, following
      the guidelines in section 6.1.\n   The following entries for this registry are
      defined in this document.\n   They are the initial entries in the registry for
      PB-TNC Error Codes.\n   PEN Integer Name                          Defining Specification\n
      \  --- ------- ----                          ----------------------\n   0   0
      \      Unexpected Batch Type         RFC 5793\n   0   1       Invalid Parameter
      \            RFC 5793\n   0   2       Local Error                   RFC 5793\n
      \  0   3       Unsupported Mandatory Message RFC 5793\n   0   4       Version
      Not Supported         RFC 5793\n"
    title: 6.5.  Registry for PB-TNC Error Codes
  title: 6.  IANA Considerations
- contents:
  - "7.  Acknowledgments\n   Thanks to the Trusted Computing Group for contributing
    the initial\n   text upon which this document was based.\n   The authors of this
    document would like to acknowledge the following\n   people who have contributed
    to or provided substantial input on the\n   preparation of this document or predecessors
    to it: Bernard Aboba,\n   Amit Agarwal, Morteza Ansari, Diana Arroyo, Stuart Bailey,
    Boris\n   Balacheff, Gene Chang, Roger Chickering, Scott Cochrane, Pasi Eronen,\n
    \  Aman Garg, Sandilya Garimella, Lauren Giroux, Mudit Goel, Charles\n   Goldberg,
    Thomas Hardjono, Chris Hessing, Hidenobu Ito, John Jerrim,\n   Meenakshi Kaushik,
    Greg Kazmierczak, Scott Kelly, Tom Kelnar, Bryan\n   Kingsford, PJ Kirner, Houcheng
    Lee, Sung Lee, Lisa Lorenzin,\n   Mahalingam Mani, Paul Mayfield, Michael McDaniels,
    Bipin Mistry, Rod\n   Murchison, Barbara Nelson, Kazuaki Nimura, Ron Pon, Ivan
    Pulleyn,\n   Alex Romanyuk, Chris Salter, Mauricio Sanchez, Paul Sangster, Dean\n
    \  Sheffield, Curtis Simonson, Jeff Six, Ned Smith, Michelle Sommerstad,\n   Joseph
    Tardo, Lee Terrell, Chris Trytten, Brad Upson, Ram Vadali,\n   Guha Prasad Venataraman,
    John Vollbrecht, Jun Wang, and Han Yin.\n"
  title: 7.  Acknowledgments
- contents:
  - '8.  References

    '
  - contents:
    - "8.1.  Normative References\n   [1]    Bradner, S., \"Key words for use in RFCs
      to Indicate\n          Requirement Levels\", BCP 14, RFC 2119, March 1997.\n
      \  [2]    Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n          Resource
      Identifier (URI): Generic Syntax\", STD 66, RFC 3986,\n          January 2005.\n
      \  [3]    Phillips, A., Ed., and M. Davis, Ed., \"Tags for Identifying\n          Languages\",
      BCP 47, RFC 5646, September 2009.\n   [4]    Alvestrand, H., \"Content Language
      Headers\", RFC 3282, May\n          2002.\n   [5]    Narten, T. and H. Alvestrand,
      \"Guidelines for Writing an IANA\n          Considerations Section in RFCs\",
      BCP 26, RFC 5226, May 2008.\n   [6]    Yergeau, F., \"UTF-8, a transformation
      format of ISO 10646\",\n          STD 63, RFC 3629, November 2003.\n"
    title: 8.1.  Normative References
  - contents:
    - "8.2.  Informative References\n   [7]    Hanna, S., Hurst, R. and R. Sahita,
      \"TNC IF-TNCCS: TLV\n          Binding\", Trusted Computing Group, February
      2008.\n   [8]    Sangster, P., Khosravi, H., Mani, M., Narayan, K., and J.\n
      \         Tardo, \"Network Endpoint Assessment (NEA): Overview and\n          Requirements\",
      RFC 5209, June 2008.\n   [9]    Aboba, B., Blunk, L., Vollbrecht, J., Carlson,
      J., and H.\n          Levkowetz, Ed., \"Extensible Authentication Protocol (EAP)\",\n
      \         RFC 3748, June 2004.\n  [10]    Sangster, P., and K. Narayan, \"PA-TNC:
      A Posture Attribute\n          (PA) Protocol Compatible with Trusted Network
      Connect (TNC)\",\n          RFC 5792, March 2010.\n"
    title: 8.2.  Informative References
  title: 8.  References
- contents:
  - 'Appendix A.  Use Cases

    '
  - contents:
    - "A.1.  Initial Client-Triggered Assessment\n   This scenario involves the assessment
      of an endpoint initiated during\n   network join.  The assessment is triggered
      by the Posture Broker\n   Client (PBC) and involves collection of patch information
      from both\n   Standard Operating System (OS) Posture Collector and vendor-specific\n
      \  Patch Posture Collector (PC).  The assessment by both the vendor-\n   specific
      Patch Posture Validator (PV) and Standard OS Posture\n   Validator result in
      a compliant assessment decision that results in a\n   compliant System Assessment
      Decision to be returned by the Posture\n   Broker Server (PBS).\n   +--------+
      +-------+ +---------+ +--------+ +-------++--------+\n   | Vndr. X| |  Std.
      | |   Std.  | |  Std.  | | Std.  || Vndr. X|\n   |Patch PC| | OS PC | |   PBC
      \  | |  PBS   | | OS PV ||Patch PV|\n   +----+---+ +---+---+ +-----+---+ +---+----+
      +---+----++---+---+\n      |         |   N/W Join|         |          |         |\n
      \     |         |     ----->|         |          |         |\n      |         |
      Req Post. |         |          |         |\n      |         +<----------+         |
      \         |         |\n      |         | Req Post. |         |          |         |\n
      \     +<--------------------|         |          |         |\n      |Vndr X
      Patch Posture |         |          |         |\n      |-------------------->|
      \        |          |         |\n      |         |OS Posture |         |          |
      \        |\n      |         |---------->|         |          |         |\n      |
      \        |           | Posture |          |         |\n      |         |           |
      Report  |          |         |\n      |         |           +-------->|          |
      \        |\n      |         |           |         |  Verify  |         |\n      |
      \        |           |         |  Posture |         |\n      |         |           |
      \        |--------->          |\n      |         |           |         |          |
      Verify  |\n      |         |           |         |          | Posture |\n      |
      \        |           |         |------------------->|\n      |         |           |
      \        | OS Reslt |         |\n      |         |           |         |<---------|
      \        |\n      |         |           |         | VndrX Patch Result |\n      |
      \        |           | Assess  |<-------------------|\n      |         |           |
      Result  |                    |\n      |         |           <---------|          |
      \        |\n      |         | OS PRslt  |         |          |         |\n      |
      \        |<----------|         |          |         |\n      | VndrX Patch PResult
      |         |          |         |\n      |<--------------------|         |          |
      \        |\n"
    - contents:
      - "A.1.1.  Message Contents\n   This section shows the contents of the key fields
        in each of the PA\n   messages exchanged in this use case.  When necessary,
        additional\n   commentary is provided to explain why certain fields contain
        the\n   shown values.  Note that many of the flows shown are between\n   components
        on the same system so no message contents are shown.\n"
      - contents:
        - "A.1.1.1.  N/W Join\n   This flow represents the event that causes the PBC
          to decide to start\n   an assessment of the endpoint in order to gain access
          to the network.\n   This is merely an event and doesn't include a message
          being sent.\n"
        title: A.1.1.1.  N/W Join
      - contents:
        - "A.1.1.2.  Request Posture (Req Post.)\n   This flow illustrates an invocation
          of the OS and Patch Posture\n   Collectors requesting particular posture
          attributes to be sent.\n   Because this use case is triggered locally, NEA
          doesn't specify the\n   contents of this flow.\n"
        title: A.1.1.2.  Request Posture (Req Post.)
      - contents:
        - "A.1.1.3.  Vendor X Patch Posture (VndrX Patch Posture)\n   This flow contains
          the PA message from the Vendor X Patch Posture\n   Collector; the message
          content is described in the PA-TNC\n   specification.\n"
        title: A.1.1.3.  Vendor X Patch Posture (VndrX Patch Posture)
      - contents:
        - "A.1.1.4.  OS Posture\n   This flow contains the PA message from the OS
          Posture Collector; the\n   message content is described in the PA-TNC specification.\n"
        title: A.1.1.4.  OS Posture
      - contents:
        - "A.1.1.5.  Posture Report\n   This flow contains the PB message containing
          the PA messages from the\n   Patch and OS Posture Collectors:\n   PB Envelope
          {\n    HDR {\n     D bit=0 (Posture Broker Client is originator)\n     Batch
          Type=CDATA\n     Batch Length\n     }\n      PB Message 1 {\n       Vendor-id=0\n
          \      Type =2 (PB-PA)\n       Length\n       Value = {\n          PA-Msg-vendor-id=0
          (Standard)\n          PA-subtype=1 (OS)\n          OS Posture PA Message\n
          \      }\n     }\n     PB Message 2 {\n       Vendor-id=0\n       Type =2
          (PB-PA)\n       Length\n       Value = {\n          PA-Msg-vendor-id=1 (Vendor
          X)\n          PA-subtype=1 (Vendor X PA sub-type for patch management)\n
          \         Vendor X Patch Posture PA Message\n        }\n      }\n   }\n"
        title: A.1.1.5.  Posture Report
      - contents:
        - "A.1.1.6.  Verify Posture\n   This flow illustrates an invocation of the
          OS and Patch Posture\n   Validators requesting verification of the posture
          attributes\n   received.  Because this flow happens locally within the NEA
          server,\n   NEA doesn't specify the message content.\n"
        title: A.1.1.6.  Verify Posture
      - contents:
        - "A.1.1.7.  OS Posture Result (OS Reslt)\n   This flow contains the PA message
          (Posture Assessment Result) from\n   the OS Posture Validator; the message
          content is described in the PA-\n   TNC specification.\n"
        title: A.1.1.7.  OS Posture Result (OS Reslt)
      - contents:
        - "A.1.1.8.  Vendor X Patch Posture Result (VndrX Patch Result)\n   This flow
          contains the PA message (Posture Assessment Result) from\n   the Vendor
          X Patch Posture Validator; the message content is\n   described in the PA-TNC
          specification.\n"
        title: A.1.1.8.  Vendor X Patch Posture Result (VndrX Patch Result)
      - contents:
        - "A.1.1.9.  Assessment Result (Assess Result)\n   This flow contains the
          PB message containing the system assessment\n   result computed by the Posture
          Broker Server and the PA messages from\n   the Patch and OS Posture Validators:\n
          \  PB Envelope {\n    HDR {\n     D bit=1 (Posture Broker Server is originator)\n
          \    Batch Type=RESULT\n     Batch Length\n     }\n      PB Message 1 {\n
          \      Vendor-id=0,\n       Type =3 (Access-Recommendation)\n       Length\n
          \      Value = {\n         System-Evaluation-Result=0 (Compliant)\n       }\n
          \    }\n     PB Message 2 {\n       Vendor-id=0,\n       Type=2 (PB-PA)\n
          \      Length\n       Value = {\n          PA-Msg-vendor-id=0\n          PA-subtype=1
          (OS)\n          OS Posture Result PA Message\n        }\n      }\n     PB
          Message 3 {\n       Vendor-id=0,\n       Type=2 (PB-PA)\n       Length\n
          \      Value = {\n          PA-Msg-vendor-id=1 (Vendor X)\n          PA-subtype=1
          (Vendor X PA sub-type for patch management)\n          Vendor X Patch Posture
          Result PA Message\n        }\n      }\n   }\n"
        title: A.1.1.9.  Assessment Result (Assess Result)
      - contents:
        - "A.1.1.10.  Posture Result (OS PRslt & Vndr X Post PResult)\n   These flows
          illustrate an invocation of the OS and Vendor X Patch\n   Posture Collectors
          to receive the posture assessment results.\n   Because this flow is triggered
          locally, NEA doesn't specify the\n   contents of this flow.\n"
        title: A.1.1.10.  Posture Result (OS PRslt & Vndr X Post PResult)
      title: A.1.1.  Message Contents
    title: A.1.  Initial Client-Triggered Assessment
  - contents:
    - "A.2.  Server-Initiated Assessment with Remediation\n   This scenario involves
      the assessment of an endpoint initiated by the\n   NEA server.  The assessment
      is triggered by the Posture Broker Server\n   and involves collection of Anti-Virus
      attributes for two Anti-Virus\n   components running on the endpoint.  The endpoint
      is assessed to be\n   compliant by one of the vendor (Vendor X) anti-virus posture\n
      \  validators and non-compliant by the other vendor (Vendor Y) anti-\n   virus
      posture validator.  This results in a non-compliant System\n   Assessment Decision
      to be returned by the Posture Broker Server.  The\n   Posture Broker Server
      also returns remediation instructions for the\n   endpoint as part of the response.\n
      \  +--------+  +-------+ +---------+ +--------+ +-------+ +--------+\n   | Vndr
      Y |  | Vndr X| |   Std.  | |  Std.  | | Vndr X| | Vndr Y |\n   |  AV PC |  |
      AV PC | |   PBC   | |  PBS   | | AV PV | |  AV PV |\n   +----+---+  +---+---+
      +-----+---+ +---+----+ +---+---+ +----+---+\n        |          |           |
      N/W Join|          |          |\n        |          |           |   ----->|
      \         |          |\n        |          |           |         |  Create  |
      \         |\n        |          |           |         |Post. Req |          |\n
      \       |          |           |         |--------->|          |\n        |
      \         |           |         |Create Posture Req   |\n        |          |
      \          |         |----------+--------->|\n        |          |           |
      \        |Vndr Y AV Posture Req|\n        |          |           |         |<---------+----------|\n
      \       |          |           |         |Vndr X AV |          |\n        |
      \         |           |         |Post. Req |          |\n        |          |
      \          | Posture |<---------|          |\n        |          |           |
      Request |          |          |\n        |          | Vndr X AV |<--------|
      \         |          |\n        |          | Post. Req |         |          |
      \         |\n        |          |<----------|         |          |          |\n
      \       |      Vndr Y AV       |         |          |          |\n        |
      \    Posture Req      |         |          |          |\n        +<---------+-----------|
      \        |          |          |\n        |  Vndr Y AV Posture   |         |
      \         |          |\n        +----------+---------->|         |          |
      \         |\n        |          | Vndr X AV |         |          |          |\n
      \       |          |  Posture  |         |          |          |\n        |
      \         |---------->| Posture |          |          |\n        |          |
      \          |Response |          |          |\n        |          |           |-------->|
      \         |          |\n        |          |           |         |  Verify  |
      \         |\n        |          |           |         |  Posture |          |\n
      \       |          |           |         |--------->|          |\n        |
      \         |           |         |     Verify Posture  |\n        |          |
      \          |         |----------+--------->|\n        |          |           |
      \        |Vndr Y Posture Result|\n        |          |           |         |<---------+----------|\n
      \       |          |           |         |Vndr X AV |          |\n        |
      \         |           |         |Post Reslt|          |\n        |          |
      \          |  Assess |<---------|          |\n        |          |           |
      \ Result |          |          |\n        |          | Vndr X AV |<--------|
      \         |          |\n        |          |Post Reslt |<--------|          |
      \         |\n        |          |<----------|         |          |          |\n
      \       | Vndr Y AV Post Reslt |         |          |          |\n        +<---------+-----------|
      \        |          |          |\n        |          |           |         |
      \         |          |\n"
    - contents:
      - "A.2.1.  Message Contents\n   This section shows the contents of the key fields
        in each of the PA\n   messages exchanged in this use case.  When necessary,
        additional\n   commentary is provided to explain why certain fields contain
        the\n   shown values.  Note that many of the flows shown are between\n   components
        on the same system so no message contents are shown.\n"
      - contents:
        - "A.2.1.1.  N/W Join\n   This flow represents the event that causes the PBS
          to decide to start\n   an assessment of the endpoint in order to gain access
          to the network.\n   This is merely an event and doesn't include a message
          being sent.\n"
        title: A.2.1.1.  N/W Join
      - contents:
        - "A.2.1.2.  Create Posture Request (Create Posture Req)\n   This flow illustrates
          an invocation of the Vendor X and Vendor Y\n   Anti-Virus posture validators
          requesting posture requests to be\n   created.  Because this use case is
          triggered locally, NEA doesn't\n   specify the contents of this flow.\n"
        title: A.2.1.2.  Create Posture Request (Create Posture Req)
      - contents:
        - "A.2.1.3.  Vendor X Anti-Virus Posture Request (Vndr X AV Post. Req)\n   This
          flow contains the PA message (Posture Request) from the Vendor X\n   Anti-Virus
          Posture Validator; the message content is described in the\n   PA-TNC specification.\n"
        title: A.2.1.3.  Vendor X Anti-Virus Posture Request (Vndr X AV Post. Req)
      - contents:
        - "A.2.1.4.  Vendor Y Anti-Virus Posture Request\n   This flow contains the
          PA message (Posture Request) from the Vendor Y\n   Anti-Virus Posture Validator;
          the message content is described in the\n   PA-TNC specification.\n"
        title: A.2.1.4.  Vendor Y Anti-Virus Posture Request
      - contents:
        - "A.2.1.5.  Posture Request\n   This flow contains the PB message containing
          the PA messages from the\n   Vendor X and Vendor Y Anti-Virus Posture Validators:\n
          \  PB Envelope {\n    HDR {\n     D bit=1 (Posture Broker Server is originator)\n
          \    Batch Type=SDATA\n     Batch Length\n    }\n     PB Message 1 {\n       Vendor-id=0\n
          \      Type =2 (PB-PA)\n       Length\n       Value = {\n          PA-Msg-vendor-id=1
          (Vendor X)\n          PA-subtype=2 (Vendor X PA sub-type for Anti-Virus)\n
          \         Vendor X AV Posture Request PA Message\n       }\n     }\n     PB
          Message 2 {\n       Vendor-id=0\n       Type =2 (PB-PA)\n       Length\n
          \      Value = {\n          PA-Msg-vendor-id=2 (Vendor Y)\n          PA-subtype=1
          (Vendor Y PA sub-type for Anti-Virus)\n          Vendor Y AV Posture Request
          PA Message\n        }\n      }\n   }\n"
        title: A.2.1.5.  Posture Request
      - contents:
        - "A.2.1.6.  Process Posture Request (Vndr X AV Post Req & Vndr Y AV\n          Posture
          Req)\n   This flow illustrates an invocation of the Vendor X and Vendor
          Y\n   Anti-Virus Posture Collectors to process the Posture Request and\n
          \  return particular posture attributes requested.  Because this use\n   case
          is triggered locally, NEA doesn't specify the contents of this\n   flow.\n"
        title: A.2.1.6.  Process Posture Request (Vndr X AV Post Req & Vndr Y AV
      - contents:
        - "A.2.1.7.  Vendor Y Anti-Virus Posture (Vndr Y AV Posture)\n   This flow
          contains the PA message (response to the Posture Request)\n   from the Vendor
          Y Anti-Virus Posture Collector; the message content\n   is described in
          the PA-TNC specification.\n"
        title: A.2.1.7.  Vendor Y Anti-Virus Posture (Vndr Y AV Posture)
      - contents:
        - "A.2.1.8.  Vendor X Anti-Virus Posture (Vndr X AV Posture)\n   This flow
          contains the PA message (response to the Posture Request)\n   from the Vendor
          X Anti-Virus Posture Collector; the message content\n   is described in
          the PA-TNC specification.\n"
        title: A.2.1.8.  Vendor X Anti-Virus Posture (Vndr X AV Posture)
      - contents:
        - "A.2.1.9.  Posture Response\n   This flow contains the PB message containing
          the PA messages from the\n   Vendor X and Vendor Y Anti-Virus Posture Collectors:\n
          \  PB Envelope {\n    HDR {\n     D bit=0 (Posture Broker Client is originator)\n
          \    Batch Type=CDATA\n     Batch Length\n    }\n     PB Message 1 {\n       Vendor-id=0\n
          \      Type =2 (PB-PA)\n       Length\n       Value = {\n           PA-Msg-vendor-id=1
          (Vendor X)\n           PA-subtype=2 (Vendor X PA sub-type for Anti-Virus)\n
          \          Vendor X AV Posture PA Message\n       }\n     }\n     PB Message
          2 {\n       Vendor-id=0\n       Type =2 (PB-PA)\n       Length\n       Value
          = {\n           PA-Msg-vendor-id=2 (Vendor Y)\n           PA-subtype=1 (Vendor
          Y PA sub-type for Anti-Virus)\n           Vendor Y AV Posture PA Message\n
          \       }\n      }\n   }\n"
        title: A.2.1.9.  Posture Response
      - contents:
        - "A.2.1.10.  Verify Posture\n   This flow illustrates an invocation of the
          Vendor X and Vendor Y\n   Anti-Virus Posture Validators requesting verification
          of the posture\n   attributes received.  Because this flow happens locally
          within the\n   NEA server, NEA doesn't specify the message contents.\n"
        title: A.2.1.10.  Verify Posture
      - contents:
        - "A.2.1.11.  Vendor Y Anti-Virus Posture Result (Vndr Y AV Post Result)\n
          \  This flow contains the PA message (Posture Assessment Result) from\n
          \  the Vendor Y Anti-Virus Posture Validator; the message content is\n   described
          in the PA-TNC specification.\n"
        title: A.2.1.11.  Vendor Y Anti-Virus Posture Result (Vndr Y AV Post Result)
      - contents:
        - "A.2.1.12.  Vendor X Anti-Virus Posture Result (Vndr Y AV Post Result)\n
          \  This flow contains the PA message (Posture Assessment Result) from\n
          \  the Vendor X Anti-Virus Posture Validator; the message content is\n   described
          in the PA-TNC specification.\n"
        title: A.2.1.12.  Vendor X Anti-Virus Posture Result (Vndr Y AV Post Result)
      - contents:
        - "A.2.1.13.  Assessment Result (Assess Result)\n   This flow contains the
          PB message containing the system assessment\n   result computed by the Posture
          Broker Server and the PA messages from\n   the Patch and OS Posture Validators:\n
          \  PB Envelope {\n    HDR {\n     D bit=1 (Posture Broker Server is originator)\n
          \    Batch Type=RESULT\n     Batch Length\n    }\n     PB Message 1 {\n
          \      Vendor-id=0,\n       Type=3 (Access-Recommendation)\n       Length\n
          \      Value = {\n         PB-Assessment-Result=1 (Non-Compliant)\n       }\n
          \    }\n     PB Message 2 {\n       Vendor-id=0,\n       Type=4 (Remediation-Parameters)\n
          \      Length\n       Value = {\n        Remediation-Param-Vendor-ID=0\n
          \       Remediation-Param-Type=1 (Remediation-URI)\n        Remediation-Param=''http://xyz''\n
          \       }\n      }\n    PB Message 3 {\n       Vendor-id=0,\n       Type=4
          (Remediation-Parameters)\n       Length\n       Value = {\n        Remediation-Param-Vendor-ID=0\n
          \       Remediation-Param-Type=2 (Remediation-String)\n        Remediation-Param=''Try
          Step1, Step2,...''\n        }\n      }\n     PB Message 4 {\n       Vendor-id=0,\n
          \      Type=2 (PB-PA)\n       Length\n       Value = {\n           PA-Msg-vendor-id=1
          (Vendor X)\n           PA-subtype=2 (Vendor X PA sub-type for Anti-Virus)\n
          \          Vendor X AV Posture Result PA Message\n        }\n      }\n     PB
          Message 5 {\n       Vendor-id=0,\n       Type=2 (PB-PA)\n       Length\n
          \      Value = {\n           PA-Msg-vendor-id=2 (Vendor Y)\n           PA-subtype=1
          (Vendor Y PA sub-type for Anti-Virus)\n           Vendor Y AV Posture Result
          PA Message\n        }\n      }\n   }\n"
        title: A.2.1.13.  Assessment Result (Assess Result)
      - contents:
        - "A.2.1.14.  Posture Result (Vndr X AV Post Reslt & Vndr Y AV Post Reslt)\n
          \  These flows illustrate an invocation of the Vendor X and Vendor Y\n   Anti-Virus
          Posture Collectors to receive the posture assessment\n   results.  Because
          this flow is triggered locally, NEA doesn't specify\n   the contents of
          this flow.\n"
        title: A.2.1.14.  Posture Result (Vndr X AV Post Reslt & Vndr Y AV Post Reslt)
      title: A.2.1.  Message Contents
    title: A.2.  Server-Initiated Assessment with Remediation
  - contents:
    - "A.3.  Client-Triggered Reassessment\n   This scenario involves the reassessment
      of an endpoint as a result of\n   enabling a software component on the endpoint.
      \ The endpoint has two\n   VPN client software components, one from vendor X
      for the user's home\n   network and other from vendor Y for the network that
      the endpoint is\n   currently accessing.  The assessment is triggered when the
      user tries\n   to use the Vendor X VPN client; this is a violation of the posture\n
      \  policy.  The Posture Broker Client triggers the posture assessment\n   when
      it receives a notification from the Standard VPN Posture\n   Collector about
      the change to the operational state of the VPN\n   component on the endpoint.
      \ Note that the VPN Posture Collector\n   supports standard attributes and some
      vendor-defined attributes from\n   vendor X's and vendor Y's namespaces.  This
      use case doesn't leverage\n   vendor-defined attributes.  The assessment involves
      verification of\n   the standard VPN posture attributes by the Standard VPN
      Posture\n   Validator that results in a non-compliant assessment result.  This\n
      \  use case relies on the use of a virtual Posture Collector concept\n   described
      in section 3.3 of the PA-TNC specification.  As illustrated\n   in this example,
      the Posture Broker Client will assign two Posture\n   Collector IDs to a single
      Posture Collector (Standard VPN PC), and\n   the Posture Collector will generate
      two separate PA messages to\n   report the posture for Vendor X and Vendor Y
      VPN Clients.  The\n   Posture Broker Client will use the assigned IDs in the
      PB message\n   sent to the NEA Server.  This entire behavior will be completely\n
      \  opaque to the NEA Server, which will handle the PB message as if\n   there
      were two VPN Posture Collectors on the NEA Client.\n   +--------+  +-------+
      +---------+ +--------+ +--------+ +--------+\n   |Vndr X  |  |Vndr Y | |Standard
      | |Standard| |Standard| |Standard|\n   |VPNClnt |  |VPNClnt| | VPN PC  | |  PBC
      \  | |   PBS  | | VPN PV |\n   +----+---+  +---+---+ +-----+---+ +---+----+
      +---+----+ +----+---+\n   Enble|          |           |         |          |
      \          |\n   ---->|          |           |         |          |           |\n
      \       |  VPN Status Change   |         |          |           |\n        |--------------------->|
      Posture |          |           |\n        |          |           | Change  |
      \         |           |\n        |          |           |-------->|          |
      \          |\n        |          |           |Req. Post|          |           |\n
      \       |          |           |<--------|          |           |\n        |
      \         |Ins/Rq Info|         |          |           |\n        |          |<----------|
      \        |          |           |\n        | Inspect/Request Info |         |
      \         |           |\n        |<---------+-----------|VPNX Post|          |
      \          |\n        |          |           |-------->|          |           |\n
      \       |          |           |VPNY Post|          |           |\n        |
      \         |           |-------->|          |           |\n        |          |
      \          |         | Posture  |           |\n        |          |           |
      \        |  Report  |           |\n        |          |           |         |--------->|
      \          |\n        |          |           |         |          |Vrfy Post.
      |\n        |          |           |         |          |---------->|\n        |
      \         |           |         |          |VPN PRslt  |\n        |          |
      \          |         |  Assess  |<----------|\n        |          |           |
      \        |  Result  |           |\n        |          |           |         |<---------|
      \          |\n        |          |           |VPN PRslt|          |           |\n
      \       |          |           |<--------|          |           |\n"
    - contents:
      - "A.3.1.  Message Contents\n   This section shows the contents of the key fields
        in each of the PA\n   messages exchanged in this use case.  When necessary,
        additional\n   commentary is provided to explain why certain fields contain
        the\n   shown values.  Note that many of the flows shown are between\n   components
        on the same system so no message contents are shown.\n"
      - contents:
        - "A.3.1.1.  Enable VPN Client (Enble)\n   This flow represents the end user
          triggered event of starting the VPN\n   Client software from Vendor X.  This
          is merely an event and doesn't\n   include a message being sent.\n"
        title: A.3.1.1.  Enable VPN Client (Enble)
      - contents:
        - "A.3.1.2.  Notify Status Change (VPN Status Change)\n   This flow represents
          the detection of the active state of the Vendor\n   X VPN Client software
          by the Standard VPN Posture Collector.  This is\n   merely an event and
          doesn't include a message being sent.\n"
        title: A.3.1.2.  Notify Status Change (VPN Status Change)
      - contents:
        - "A.3.1.3.  Notify Posture Change (Posture Change)\n   This flow represents
          the notification of the VPN Posture change sent\n   from the VPN Posture
          Collector to the Standard Posture Broker Client.\n   This is merely an event
          and doesn't include a message being sent.\n"
        title: A.3.1.3.  Notify Posture Change (Posture Change)
      - contents:
        - "A.3.1.4.  Request Posture (Req. Post)\n   This flow illustrates an invocation
          of the VPN Posture Collector\n   requesting particular posture attributes
          to be sent.  Because this\n   use case is triggered locally, the contents
          of this flow aren't\n   specified by NEA.\n"
        title: A.3.1.4.  Request Posture (Req. Post)
      - contents:
        - "A.3.1.5.  Inspect/Request Information (Ins/Rq Info)\n   This flow illustrates
          the acquisition of the posture attributes by\n   the Standard VPN Posture
          Collector from the Vendor X and Vendor Y VPN\n   Client components.  Because
          this flow is triggered locally, NEA\n   doesn't specify the message contents.\n"
        title: A.3.1.5.  Inspect/Request Information (Ins/Rq Info)
      - contents:
        - "A.3.1.6.  Vendor X VPN Posture (VPNX Post.)\n   This flow contains the
          PA message from the VPN Posture Collector for\n   Vendor X VPN Client posture;
          the message content is described in the\n   PA-TNC specification.\n"
        title: A.3.1.6.  Vendor X VPN Posture (VPNX Post.)
      - contents:
        - "A.3.1.7.  Vendor Y VPN Posture (VPNY Post.)\n   This flow contains the
          PA message from the VPN Posture Collector for\n   Vendor Y VPN Client posture;
          the message content is described in the\n   PA-TNC specification.\n"
        title: A.3.1.7.  Vendor Y VPN Posture (VPNY Post.)
      - contents:
        - "A.3.1.8.  Posture Report (Post. Rpt.)\n   This flow contains the PB message
          containing the PA message from the\n   VPN Posture Collector:\n   PB Envelope
          {\n    HDR {\n     D bit=0 (Posture Broker Client is originator)\n     Batch
          Type=CRETRY\n     Batch Length\n    }\n     PB Message 1 {\n       Vendor-id=0\n
          \      Type =2 (PB-PA)\n       Length\n       Value = {\n          PA-Msg-vendor-id=0\n
          \         PA-subtype=7 (VPN)\n          Posture-Collector-ID=1 //Virtual
          Posture Collector ID for\n   Vendor X VPN Client\n          Vendor X VPN
          Posture PA Message\n       }\n     }\n     PB Message 2 {\n       Vendor-id=0\n
          \      Type =2 (PB-PA)\n       Length\n       Value = {\n          PA-Msg-vendor-id=0\n
          \         PA-subtype=7 (VPN)\n          Posture-Collector-ID=2 //Virtual
          Posture Collector ID for\n   Vendor Y VPN Client\n          Vendor Y VPN
          Posture PA Message\n       }\n     }\n"
        title: A.3.1.8.  Posture Report (Post. Rpt.)
      - contents:
        - "A.3.1.9.  Verify Posture (Vrfy Post.)\n   This flow illustrates an invocation
          of the VPN Posture Validator\n   requesting verification of the posture
          attributes received.  Because\n   this flow happens locally within the NEA
          server, NEA doesn't specify\n   the message contents.\n"
        title: A.3.1.9.  Verify Posture (Vrfy Post.)
      - contents:
        - "A.3.1.10.  VPN Posture Result (VPN PRslt)\n   This flow contains the PA
          message (Posture Assessment Result) from\n   the VPN Posture Validator;
          the message content is described in the\n   PA-TNC specification.\n"
        title: A.3.1.10.  VPN Posture Result (VPN PRslt)
      - contents:
        - "A.3.1.11.  Assessment Result (Assess Result)\n   This flow contains the
          PB message containing the system assessment\n   result computed by the Posture
          Broker Server and the PA messages from\n   the VPN Posture Validator:\n
          \   PB Envelope {\n      HDR {\n       D bit=1 (Posture Broker Server is
          originator)\n       Batch Type=RESULT\n       Batch Length\n      }\n     PB
          Message 1 {\n       Vendor-id=0,\n       Type =3 (Access-Recommendation)\n
          \      Length\n       Value = {\n         PB-Assessment-Result=1 (Non-Compliant)\n
          \      }\n     }\n     PB Message 2 {\n       Vendor-id=0,\n       Type=2
          (PB-PA)\n       Length\n       Value = {\n          PA-Msg-vendor-id=0\n
          \         PA-subtype=7 (VPN)\n          VPN Posture Result PA Message\n
          \       }\n      }\n"
        title: A.3.1.11.  Assessment Result (Assess Result)
      - contents:
        - "A.3.1.12.  Posture Result (VPN PRslt)\n   This flow illustrate an invocation
          of the VPN Posture Collectors to\n   receive the posture assessment result.
          \ Because this flow is\n   triggered locally, NEA doesn't specify the contents
          of this flow.\n"
        title: A.3.1.12.  Posture Result (VPN PRslt)
      title: A.3.1.  Message Contents
    title: A.3.  Client-Triggered Reassessment
  title: Appendix A.  Use Cases
- contents:
  - "Appendix B.  Evaluation against NEA Requirements\n   This section evaluates the
    PB-TNC protocol against the requirements\n   defined in the NEA Requirements document.
    \ Each subsection considers\n   a separate requirement from the NEA Requirements
    document.  Only\n   common requirements (C-1 through C-11) and PB requirements
    (PB-1\n   through PB-6) are considered, since these are the only ones that\n   apply
    to PB.\n"
  - contents:
    - "B.1.  Evaluation against Requirement C-1\n   Requirement C-1 says:\n   C-1
      \  NEA protocols MUST support multiple round trips between the NEA\n         Client
      and NEA Server in a single assessment.\n   PB-TNC meets this requirement.  It
      allows an unlimited number of\n   round trips between the NEA Client and NEA
      Server.\n"
    title: B.1.  Evaluation against Requirement C-1
  - contents:
    - "B.2.  Evaluation against Requirement C-2\n   Requirement C-2 says:\n   C-2
      \  NEA protocols SHOULD provide a way for both the NEA Client and\n         the
      NEA Server to initiate a posture assessment or reassessment\n         as needed.\n
      \  PB-TNC meets this requirement.  Either the NEA Client or the NEA\n   Server
      can initiate a posture assessment or reassessment.\n   There is one limitation
      on this support.  If a NEA Server wishes to\n   initiate a reassessment after
      it has sent a RESULT batch, it must\n   close the underlying transport session
      and initiate a new assessment.\n   For half-duplex transports, this is unavoidable
      unless a constant\n   exchange of messages is maintained, which would be very
      wasteful.\n   For full-duplex transports, it would be possible to allow the
      Posture\n   Broker Server to send an SRETRY batch even in the Decided state.
      \ If\n   the NEA working group reaches consensus that this change should be\n
      \  made, it will be.\n"
    title: B.2.  Evaluation against Requirement C-2
  - contents:
    - "B.3.  Evaluation against Requirement C-3\n   Requirement C-3 says:\n   C-3
      \  NEA protocols including security capabilities MUST be capable\n         of
      protecting against active and passive attacks by\n         intermediaries and
      endpoints including prevention from replay-\n         based attacks.\n   PB-TNC
      does not include any security capabilities.  It depends on PT\n   to supply
      a secure transport.  This addresses all the necessary\n   threats without adding
      an extra layer of security.  Since this\n   requirement only applies to NEA
      protocols that include security\n   capabilities, PB-TNC meets this requirement.\n"
    title: B.3.  Evaluation against Requirement C-3
  - contents:
    - "B.4.  Evaluation against Requirement C-4\n   Requirement C-4 says:\n   C-4
      \  The PA and PB protocols MUST be capable of operating over any\n         PT
      protocol.  For example, the PB protocol must provide a\n         transport-independent
      interface allowing the PA protocol to\n         operate without change across
      a variety of network protocol\n         environments (e.g., EAP/802.1X, PANA,
      TLS, and IKE/IPsec).\n   PB-TNC meets this requirement.  PB-TNC can operate
      over any PT\n   protocol that meets the requirements for PT stated in the NEA\n
      \  Requirements document.  Also, PB-TNC insulates the PA protocol from\n   any
      specifics of the PT protocol.  With PB-TNC, all PT protocols are\n   equivalent
      from the perspective of the PA protocol.\n"
    title: B.4.  Evaluation against Requirement C-4
  - contents:
    - "B.5.  Evaluation against Requirement C-5\n   Requirement C-5 says:\n   C-5
      \  The selection process for NEA protocols MUST evaluate and\n         prefer
      the reuse of existing open standards that meet the\n         requirements before
      defining new ones.  The goal of NEA is not\n         to create additional alternative
      protocols where acceptable\n         solutions already exist.\n   Based on this
      requirement, PB-TNC should receive a strong preference.\n   PB-TNC is equivalent
      with IF-TNCCS 2.0, an open TCG specification.\n   IF-TNCCS 2.0 is an extension
      of the existing IF-TNCCS 1.X protocols,\n   which have been implemented by dozens
      of vendors and open source\n   projects.\n"
    title: B.5.  Evaluation against Requirement C-5
  - contents:
    - "B.6.  Evaluation against Requirement C-6\n   Requirement C-6 says:\n   C-6
      \  NEA protocols MUST be highly scalable; the protocols MUST\n         support
      many Posture Collectors on a large number of NEA\n         Clients to be assessed
      by numerous Posture Validators residing\n         on multiple NEA Servers.\n
      \  PB-TNC meets this requirement.  PB-TNC supports up to 2^16-1 Posture\n   Collectors
      and an equal number of Posture Validators in a given PB-\n   TNC session.  It
      also supports an unlimited number of NEA Clients and\n   NEA Servers.\n   The
      scalability of PB-TNC extends into other areas as well.  For\n   example, PB-TNC
      supports an unlimited number of batches and each\n   batch can contain up to
      2^32-1 octets and about 2^24 PA messages.\n   Each PA message can contain up
      to 2^32-1 octets.  Of course, sending\n   this much data in a NEA assessment
      is not generally advisable, but\n   the point is that PB-TNC is highly scalable.\n"
    title: B.6.  Evaluation against Requirement C-6
  - contents:
    - "B.7.  Evaluation against Requirement C-7\n   Requirement C-7 says:\n   C-7
      \  The protocols MUST support efficient transport of a large\n         number
      of attribute messages between the NEA Client and the NEA\n         Server.\n
      \  PB-TNC meets this requirement.  Each PB-TNC batch can contain about\n   2^24
      PA messages.  Since PB-TNC supports an unlimited number of\n   batches in a
      session, this number is actually unlimited (except\n   perhaps by PT protocols,
      user patience, or other external factors).\n   As for efficiency, PB-TNC adds
      only 24 octets of overhead per PA\n   message.  PA-TNC can include many attributes
      in a single PA message\n   so this overhead is diluted further.\n"
    title: B.7.  Evaluation against Requirement C-7
  - contents:
    - "B.8.  Evaluation against Requirement C-8\n   Requirement C-8 says:\n   C-8
      \  NEA protocols MUST operate efficiently over low bandwidth or\n         high
      latency links.\n   PB-TNC meets this requirement.  A minimal PB-TNC exchange
      can be as\n   small as 72 octets and one round trip.  Even if privacy policies
      or\n   other factors require multiple round trips, PB-TNC generally imposes\n
      \  an overhead of only 8 octets per batch and 24 octets per PA message.\n"
    title: B.8.  Evaluation against Requirement C-8
  - contents:
    - "B.9.  Evaluation against Requirement C-9\n   Requirement C-9 says:\n   C-9
      \  For any strings intended for display to a user, the protocols\n         MUST
      support adapting these strings to the user's language\n         preferences.\n
      \        PB-TNC meets this requirement.  It defines a standard way for\n         the
      NEA Client and NEA Server to send their language\n         preferences to each
      other, leveraging the widely implemented\n         Accept-Language format defined
      in RFC 3282.\n"
    title: B.9.  Evaluation against Requirement C-9
  - contents:
    - "B.10.  Evaluation against Requirement C-10\n   Requirement C-10 says:\n   C-10
      \ NEA protocols MUST support encoding of strings in UTF-8 format.\n   PB-TNC
      meets this requirement.  All strings in the PB-TNC protocol\n   are encoded
      in UTF-8 format.  This allows the protocol to support a\n   wide range of languages
      efficiently.\n"
    title: B.10.  Evaluation against Requirement C-10
  - contents:
    - "B.11.  Evaluation against Requirement C-11\n   Requirement C-11 says:\n   C-11
      \ Due to the potentially different transport characteristics\n         provided
      by the underlying candidate PT protocols, the NEA\n         Client and NEA Server
      MUST be capable of becoming aware of and\n         adapting to the limitations
      of the available PT protocol.  For\n         example, some PT protocol characteristics
      that might impact the\n         operation of PA and PB include restrictions
      on which end can\n         initiate a NEA connection, maximum data size in a
      message or\n         full assessment, upper bound on number of round trips,
      and\n         ordering (duplex) of messages exchanged.  The selection process\n
      \        for the PT protocols MUST consider the limitations the\n         candidate
      PT protocol would impose upon the PA and PB\n         protocols.\n   PB-TNC
      meets this requirement.  The PB-TNC protocol is designed to be\n   flexible
      enough to operate with a variety of underlying PT protocols,\n   including those
      that may have limitations on message or assessment\n   size, number of round
      trips, and duplex.  Local APIs can allow\n   Posture Collectors and Posture
      Validators to discover when they are\n   operating in a less constrained deployment
      and then make use of more\n   verbose attributes.  Similarly, Posture Collectors
      could choose not\n   to send or use smaller attributes (including assertions
      from previous\n   assessments) when faced with a very constrained network connection.\n"
    title: B.11.  Evaluation against Requirement C-11
  - contents:
    - "B.12.  Evaluation against Requirement PB-1\n   Requirement PB-1 says:\n   PB-1
      \ The PB protocol MUST be capable of carrying attributes from the\n         Posture
      Broker Server to the Posture Broker Client.  This\n         enables the Posture
      Broker Client to learn the posture\n         assessment decision and if appropriate
      to aid in remediation\n         and notification of the endpoint owner.\n   PB-TNC
      meets this requirement.  It can carry attributes from the\n   Posture Broker
      Client to the Posture Broker Server and back in an\n   unlimited number of round
      trips.  Furthermore, PB-TNC provides\n   explicit attribute support for posture
      decision and remediation aid\n   notification.\n"
    title: B.12.  Evaluation against Requirement PB-1
  - contents:
    - "B.13.  Evaluation against Requirement PB-2\n   Requirement PB-2 says:\n   PB-2
      \ The PB protocol MUST NOT interpret the contents of PA messages\n         being
      carried; i.e., the data it is carrying must be opaque to\n         it.\n   PB-TNC
      meets this requirement.  It does not parse or interpret PA\n   messages in any
      way.\n"
    title: B.13.  Evaluation against Requirement PB-2
  - contents:
    - "B.14.  Evaluation against Requirement PB-3\n   Requirement PB-3 says:\n   PB-3
      \ The PB protocol MUST carry unique identifiers that are used by\n         the
      Posture Brokers to route (deliver) PA messages between\n         Posture Collectors
      and Posture Validators.  Such message\n         routing should facilitate dynamic
      registration or\n         deregistration of Posture Collectors and Validators.
      \ For\n         example, a dynamically registered anti-virus Posture Validator\n
      \        should be able to subscribe to receive messages from its\n         respective
      anti-virus Posture Collector on NEA Clients.\n   PB-TNC meets this requirement.
      \ PB-TNC tags each PA message with a PA\n   subtype that the Posture Brokers
      can use to deliver the PA messages\n   to the proper Posture Collectors and
      Posture Validators.  By tagging\n   messages according to their content, PB-TNC
      allows Posture Collectors\n   and Posture Validators to be dynamically registered
      and deregistered,\n   ensuring that each one receives the proper data.  PB-TNC
      also\n   supports exclusive delivery, which allows messages to be targeted at\n
      \  a particular Posture Collector or Posture Validator.\n"
    title: B.14.  Evaluation against Requirement PB-3
  - contents:
    - "B.15.  Evaluation against Requirement PB-4\n   Requirement PB-4 says:\n   PB-4
      \ The PB protocol MUST be capable of supporting a half-duplex PT\n         protocol.
      \ However, this does not preclude PB from operating\n         full-duplex when
      running over a full-duplex PT.\n   PB-TNC meets this requirement.  In order
      to insulate PA from any\n   differences between half-duplex and full-duplex
      PT protocols, PB-TNC\n   always operates in a half-duplex mode, regardless of
      the capabilities\n   of the PT protocol.  While this could in theory slow assessments
      that\n   require many round trips or bidirectional multimedia exchanges, this\n
      \  is not a problem in practice because endpoint assessments do not\n   typically
      involve multimedia or a large number of round trips.\n"
    title: B.15.  Evaluation against Requirement PB-4
  - contents:
    - "B.16.  Evaluation against Requirement PB-5\n   Requirement PB-5 says:\n   PB-5
      \ The PB protocol MAY support authentication, integrity, and\n         confidentiality
      protection for the attribute messages it\n         carries between a Posture
      Broker Client and Posture Broker\n         Server.  This provides security protection
      for a message dialog\n         of the groupings of attribute messages exchanged
      between the\n         Posture Broker Client and Posture Broker Server.  Such\n
      \        protection is orthogonal to PA protections (which are end to\n         end)
      and allows for simpler Posture Collector and Validators to\n         be implemented,
      and for consolidation of cryptographic\n         operations possibly improving
      scalability and manageability.\n   PB-TNC does not address this optional requirement.
      \ It leaves\n   security to PT (which is required to address it) and PA (which
      SHOULD\n   do so).  There seems to be minimal benefit in adding a third layer
      of\n   security to the NEA protocol stack.  However, if the NEA working\n   group
      determines that PB should include support for authentication,\n   integrity
      protection, and confidentiality protection, then this could\n   be added to
      PB in a similar manner to the way that the PA-TNC\n   security is done.\n"
    title: B.16.  Evaluation against Requirement PB-5
  - contents:
    - "B.17.  Evaluation against Requirement PB-6\n   Requirement PB-6 says:\n   PB-6
      \ The PB protocol MUST support grouping of attribute messages to\n         optimize
      transport of messages and minimize round trips.\n   PB-TNC meets this requirement.
      \ Multiple attribute messages can be\n   conveyed in a single PA message.  In
      fact, that's how PA-TNC works.\n"
    title: B.17.  Evaluation against Requirement PB-6
  title: Appendix B.  Evaluation against NEA Requirements
- contents:
  - "Authors' Addresses\n   Ravi Sahita\n   Intel Corporation\n   2200 Mission College
    Blvd.\n   Santa Clara, CA 95054 USA\n   EMail: Ravi.Sahita@intel.com\n   Steve
    Hanna\n   Juniper Networks, Inc.\n   1194 North Mathilda Avenue\n   Sunnyvale,
    CA 94089 USA\n   EMail: shanna@juniper.net\n   Ryan Hurst\n   Microsoft Corporation\n
    \  One Microsoft Way\n   Redmond, WA 98052 USA\n   EMail: Ryan.Hurst@microsoft.com\n
    \  Kaushik Narayan\n   Cisco Systems Inc.\n   10 West Tasman Drive\n   San Jose,
    CA 95134 USA\n   EMail: kaushik@cisco.com\n"
  title: Authors' Addresses
