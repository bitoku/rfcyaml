- title: __initial_text__
  contents:
  - '              Algorithms for Synchronizing Network Clocks

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This RFC discussed clock synchronization algorithms for\
    \ the\n   ARPA-Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Distribution of this memo is unlimited.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.      Introduction\n   2.      Majority-Subset Algorithms\n\
    \   3.      Clustering Algorithms\n   4.      Application to Time-Synchronization\
    \ Data\n   5.      Summary and Conclusions\n   6.      References\n   Appendix\n\
    \   A.      Experimental Determination of Internet Host Clock Accuracies\n   A1.\
    \     UDP Time Protocol Experiment\n   A2.     ICMP Timestamp Message Experiment\n\
    \   A3.     Comparison of UDP and ICMP Time\n"
- title: List of Tables
  contents:
  - "List of Tables\n   Table 1.  C(n,k) for n from 2 to 20\n   Table 2.  Majority\
    \ Subsets for n = 3,4,5\n   Table 3.  Clustering Algorithm using UDP Time Protocol\
    \ Data\n   Table 4.  Clustering Algorithm using ICMP Timestamp Data\n   Table\
    \ 5.  ISI-MCON-GW Majority-Subset Algorithm\n   Table 6.  ISI-MCON-GW Clustering\
    \ Algorithm\n   Table 7.  LL-GW (a) Majority-Subset Algorithm\n   Table 8.  LL-GW\
    \ (a) Clustering Algorithm\n   Table 9.  LL-GW (b) Majority-Subset Algorithm\n\
    \   Table 10. LL-GW (b) Clustering Algorithm\n   Table A1. UDP Host Clock Offsets\
    \ for Various Internet Hosts\n   Table A2. UDP Offset Distribution < 9 sec\n \
    \  Table A3. UDP Offset Distribution < 270 sec\n   Table A4. ICMP Offset Distribution\
    \ < 9 hours\n   Table A5. ICMP Offset Distribution < 270 sec\n   Table A6. ICMP\
    \ Offset Distribution < 27 sec\n   Table A7. ICMP Offset Distribution < .9 sec\n\
    \   Table A8. Comparison of UDP and ICMP Host Clock Offsets\n"
- title: RFC 956                                                   September 1985
  contents:
  - 'RFC 956                                                   September 1985

    '
- title: Algorithms for Synchronizing Network Clocks
  contents:
  - 'Algorithms for Synchronizing Network Clocks

    '
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The recent interest within the Internet community in determining\n\
    \   accurate time from a set of mutually suspicious network clocks has\n   been\
    \ prompted by several occasions in which gross errors were found\n   in usually\
    \ reliable, highly accurate clock servers after seasonal\n   thunderstorms which\
    \ disrupted their primary power supply.  To these\n   sources of error should\
    \ be added those due to malfunctioning\n   hardware, defective software and operator\
    \ mistakes, as well as random\n   errors in the mechanism used to set and/or synchronize\
    \ the clocks via\n   Internet paths.  The results of these errors can range from\
    \ simple\n   disorientation to major disruption, depending upon the operating\n\
    \   system, when files or messages are incorrectly timestamped or the\n   order\
    \ of critical network transactions is altered.\n   This report suggests a stochastic\
    \ model based on the principles of\n   maximum-likelihood estimation, together\
    \ with algorithms for computing\n   a good estimator from a number of time-offset\
    \ samples measured\n   between one or more clocks connected via network links.\
    \  The model\n   provides a rational method for detecting and resolving errors\
    \ due to\n   faulty clocks or excessively noisy links.  Included in this report\n\
    \   are descriptions of certain experiments conducted with Internet hosts\n  \
    \ and ARPANET paths which give an indication of the effectiveness of\n   the algorithms.\n\
    \   Several mechanisms have been specified in the Internet protocol suite\n  \
    \ to record and transmit the time at which an event takes place,\n   including\
    \ the ICMP Timestamp message [6], Time Protocol [7], Daytime\n   protocol [8]\
    \ and IP Timestamp option [9].  A new Network Time\n   Protocol [12] has been\
    \ proposed as well.  Additional information on\n   network time synchronization\
    \ can be found in the References at the\n   end of this document.  Synchronization\
    \ protocols are described in [3]\n   and [12] and synchronization algorithms in\
    \ [2], [5] and [10].\n   Experimental results on measured roundtrip delays and\
    \ clock offsets\n   in the Internet are discussed in [4] and [11].  A comprehensive\n\
    \   mathematical treatment of clock synchronization can be found in [1].\n   In\
    \ [10] the problem of synchronizing a set of mutually suspicious\n   clocks is\
    \ discussed and algorithms offered which maximize in some\n   sense the expectation\
    \ that a correct set of \"good\" clocks can be\n   extracted from the population\
    \ including also \"bad\" ones.  The\n   technique is based upon overlapping, discrete\
    \ confidence intervals\n   which are assigned a-priori.  The model assumes the\
    \ reasonable\n   presumption that \"bad\" clocks display errors far outside these\n\
    \   confidence intervals, so can be easily identified and discarded from\n   the\
    \ voting process.\n"
- title: RFC 956                                                   September 1985
  contents:
  - 'RFC 956                                                   September 1985

    '
- title: Algorithms for Synchronizing Network Clocks
  contents:
  - "Algorithms for Synchronizing Network Clocks\n   As apparent from the data summarized\
    \ in Appendix A, host clocks in a\n   real network commonly indicate various degrees\
    \ of dispersion with\n   respect to each other and to a standard-time reference\
    \ such as a\n   radio clock.  The sources of dispersion include random errors\
    \ due to\n   observational phenomena and the synchronization mechanism itself,\
    \ if\n   used, as well as systematic errors due to hardware or software\n   failure,\
    \ poor radio reception conditions or operator mistakes.  In\n   general, it is\
    \ not possible to accurately quantify whether the\n   dispersion of any particular\
    \ clock qualifies the clock as \"good\" or\n   \"bad,\" except on a statistical\
    \ basis.  Thus, from a practical\n   standpoint, a statistical-estimation approach\
    \ to the problem is\n   preferred over a discrete-decision one.\n   A basic assumption\
    \ in this report is that the majority of \"good\"\n   clocks display errors clustered\
    \ around a zero offset relative to\n   standard time, as determined for example\
    \ from a radio clock, while\n   the remaining \"bad\" clocks display errors distributed\
    \ randomly over\n   the observing interval.  The problem is to select the good\
    \ clocks\n   from the bad and to estimate the correction to apply to the local\n\
    \   clock in order to display the most accurate time.  The algorithms\n   described\
    \ in this report attempt to do this using maximum-likelihood\n   techniques, which\
    \ are theory.\n   It should be noted that the algorithms discussed in [10] and\
    \ in this\n   report are are basically filtering and smoothing algorithms and\
    \ can\n   result in errors, sometimes gross ones, if the sample distribution\n\
    \   departs far from a-priori assumptions.  Thus, a significant issue in\n   the\
    \ design of these algorithms is robustness in the face of skewed\n   sample data\
    \ sets.  The approach in [10] uses theorem-proving to\n   justify the robustness\
    \ of the discrete algorithms presented;\n   however, the statistical models in\
    \ this report are not suited for\n   that.  The approach taken in this report\
    \ is based on detailed\n   observation and experiments, a summary of which is\
    \ included as an\n   appendix.  While this gives an excellent qualitative foundation\
    \ upon\n   which to judge robustness, additional quantitative confidence should\n\
    \   be developed through the use of statistical mechanics.\n"
- title: 2.  Majority-Subset Algorithms
  contents:
  - "2.  Majority-Subset Algorithms\n   A stochastic model appropriate to a system\
    \ of mutually suspicious\n   clocks can be constructed as follows.  An experiment\
    \ consists of one\n   or more measurements of time differences or offsets between\
    \ several\n   clocks in the network.  Usually, but not necessarily, one of the\n\
    \   clocks is the local clock at the observer and observations are\n   conducted\
    \ with each of several other clocks in the network.  The fact\n   that some clocks\
    \ are presumed more accurate or trusted more highly\n   than others can be expressed\
    \ by weighting the measurements\n"
- title: RFC 956                                                   September 1985
  contents:
  - 'RFC 956                                                   September 1985

    '
- title: Algorithms for Synchronizing Network Clocks
  contents:
  - "Algorithms for Synchronizing Network Clocks\n   accordingly.  The result is a\
    \ set of statistics, including means and\n   variances, from which the observer\
    \ is able to estimate the best time\n   at which to set the local clock.\n   A\
    \ maximum-likelihood estimator is a statistic that maximizes the\n   probability\
    \ that a particular outcome of an experiment is due to a\n   presumed set of assumptions\
    \ on the constraints of the experiment.\n   For example, if it is assumed that\
    \ at least k of n observations\n   include only samples from a single distribution,\
    \ then a\n   maximum-likelihood estimator for the mean of that distribution might\n\
    \   be computed as follows: Determine the variance for every k-sample\n   subset\
    \ of the n observations. Then select the subset with smallest\n   variance and\
    \ use its mean as the estimator for the distribution mean.\n   For instance, let\
    \ n be the number of clocks and k be the next largest\n   integer in n/2, that\
    \ is, the minimum majority.  A majority subset is\n   a subset consisting of k\
    \ of the n offset measurements.  Each of these\n   subsets can be represented\
    \ by a selection of k out of n\n   possibilities, with the total number of subsets\
    \ equal to C(n,k).  The\n   number of majority subsets is tallied for n from 2\
    \ to 20 in Table 1.\n     (n,k)           C(n,k)                  (n,k)      \
    \     C(n,k)\n     ----------------------                  ----------------------\n\
    \     (2,2)           1                       (11,6)          462   \n     (3,2)\
    \           3                       (12,7)          792   \n     (4,3)       \
    \    4                       (13,7)          1716  \n     (5,3)           10 \
    \                     (14,8)          3003  \n     (6,4)           15        \
    \              (15,8)          6435  \n     (7,4)           35               \
    \       (16,9)          11440 \n     (8,5)           56                      (17,9)\
    \          24310 \n     (9,5)           126                     (18,10)      \
    \   43758 \n     (10,6)          210                     (19,10)         92378\
    \ \n                                             (20,11)         167960\n    \
    \               Table 1. C(n,k) for n from 2 to 20\n   Obviously, the number of\
    \ computations required becomes awkward as n\n   increases beyond about 10.  Representative\
    \ majority subsets for n =\n   3,4,5 are shown in Table 2.\n"
- title: RFC 956                                                   September 1985
  contents:
  - 'RFC 956                                                   September 1985

    '
- title: Algorithms for Synchronizing Network Clocks
  contents:
  - "Algorithms for Synchronizing Network Clocks\n                 C(3,2)        \
    \  C(4,3)          C(5,3)\n                 ------          ------          ------\n\
    \                 1,2             1,2,3           1,2,3\n                 1,3\
    \             1,2,4           1,2,4\n                 2,3             1,3,4  \
    \         1,2,5\n                                 2,3,4           1,3,4\n    \
    \                                             1,3,5\n                        \
    \                         1,4,5\n                                            \
    \     2,3,4\n                                                 2,3,5\n        \
    \                                         2,4,5\n                            \
    \                     3,4,5\n                Table 2. Majority Subsets for n =\
    \ 3,4,5\n   Choosing n = 5, for example, requires calculation of the mean and\n\
    \   variance for ten subsets indexed as shown in Table 2.\n   A maximum-likelihood\
    \ algorithm with provision for multiple samples\n   and weights might operate\
    \ as follows:  Let n be the number of clocks\n   and w(1),w(2),...,w(n) a set\
    \ of integer weights, with w(i) the weight\n   associated with the ith clock.\
    \  For the ith clock three accumulators\n   W(i), X(i) and Y(i) are provided,\
    \ each initialized to zero.  The ith\n   clock is polled some number of times,\
    \ with each reply x causing n(i)\n   to be added to W(i), as well as the weighted\
    \ sample offset n(i)*x\n   added to X(i) and its square (n(i)*x)2 added to Y(i).\
    \  Polling is\n   continued for each of the n clocks in turn.\n   Next, using\
    \ a majority-subset table such as shown in Table 2,\n   calculate the total weight\
    \ W = sum(W(i)) and weighted sums X =\n   sum(X(i)) and Y = sum(Y(i)*Y(i)) for\
    \ each i in the jth majority\n   subset (row). From W, X and Y calculate the mean\
    \ m(j) and variance\n   s(j):\n              m(j) = X/W   and   s(j) = Y/W - m(j)*m(j)\
    \ .\n   When this is complete for all rows, select the row j with the\n   smallest\
    \ s(j) and return the associated mean m(j) as the\n   maximum-likelihood estimate\
    \ of the local-clock offset.\n"
- title: RFC 956                                                   September 1985
  contents:
  - 'RFC 956                                                   September 1985

    '
- title: Algorithms for Synchronizing Network Clocks
  contents:
  - 'Algorithms for Synchronizing Network Clocks

    '
- title: 3.  Clustering Algorithms
  contents:
  - "3.  Clustering Algorithms\n   Another method for developing a maximum-likelihood\
    \ estimator is\n   through the use of clustering algorithms.  These algorithms\
    \ operate\n   to associate points in a sample set with clusters on the basis of\n\
    \   stochastic properties and are most useful when large numbers of\n   samples\
    \ are available.  One such algorithm operates on a sample set\n   to selectively\
    \ discard points presumed outside the cluster as\n   follows:\n      1.  Start\
    \ with a sample set of n observations {x(1),x(2),...,x(n)\n      2.  Compute the\
    \ mean of the n observations in the sample set.\n          Discard the single\
    \ sample x(i) with value furthest from the\n          mean, leaving n-1 observations\
    \ in the set.\n      3.  Continue with step 2 until only a single observation\
    \ is left,\n          at which point declare its value the maximum-likelihood\n\
    \          estimator.\n   This algorithm will usually (but not necessarily) converge\
    \ to the\n   desired result if the majority of observations are the result of\n\
    \   \"good\" clocks, which by hypothesis are clustered about zero offset\n   relative\
    \ to the reference clock, with the remainder scattered\n   randomly over the observation\
    \ interval.\n   The following Table 3 summarizes the results of this algorithm\n\
    \   applied to the UDP data shown in Appendix A, which represents the\n   measured\
    \ clock offsets of 163 host clocks in the Internet system.\n   These data were\
    \ assembled using the UDP Time protocol [7], in which\n   time is represented\
    \ to a precision of one second.  Each line of the\n   table represents the result\
    \ of step 2 above along with the size of\n   the sample set and its (unweighted)\
    \ mean and variance.  The \"Discard\"\n   column shows the value of the observation\
    \ discarded at that step.\n"
- title: RFC 956                                                   September 1985
  contents:
  - 'RFC 956                                                   September 1985

    '
- title: Algorithms for Synchronizing Network Clocks
  contents:
  - "Algorithms for Synchronizing Network Clocks\n                    Size    Mean\
    \    Var     Discard\n                    -------------------------------\n  \
    \                  163     -210    9.1E+6  -38486 \n                    162  \
    \   26      172289  3728   \n                    161     3       87727   3658\
    \   \n                    160     -20     4280    -566   \n                  \
    \  150     -17     1272    88     \n                    100     -18     247  \
    \   -44    \n                    50      -4      35      8      \n           \
    \         20      -1      0       -2     \n                    19      -1    \
    \  0       -2     \n                    18      -1      0       -2     \n    \
    \                17      -1      0       1      \n                    16     \
    \ -1      0       -1     \n                    15      -1      0       -1    \
    \ \n                    14      -1      0       -1     \n                    13\
    \      0       0       0      \n                    1       0       0       0\
    \      \n       Table 3. Clustering Algorithm using UDP Time Protocol Data\n \
    \  In Table 3 only a few of the 163 steps are shown, including those\n   near\
    \ the beginning which illustrate a rapid convergence as the\n   relatively few\
    \ outliers are discarded.  The large outlier discarded\n   in the first step is\
    \ almost certainly due to equipment or operator\n   failure. The two outliers\
    \ close to one hour discarded in the next two\n   steps are probably simple operator\
    \ mistakes like entering summer time\n   instead of standard time.  By the time\
    \ only 50 samples are left, the\n   error has shrunk to about 4 sec and the largest\
    \ outlier is within 12\n   sec of the estimate.  By the time only 20 samples are\
    \ left, the error\n   has shrunk to about a second and the variance has vanished\
    \ for\n   practical purposes.\n   The following Table 4 summarizes the results\
    \ of the clustering\n   algorithm applied to the ICMP data shown in Appendix A,\
    \ which\n   represents the measured clock offsets of 504 host clocks in the\n\
    \   Internet system. These data were assembled using ICMP Timestamp\n   messages\
    \ [6], in which time is represented to a precision of one\n   millisecond.  The\
    \ columns in Table 4 should be interpreted in the\n   same way as in Table 3,\
    \ except that the data in Table 4 are in\n   milliseconds, while the data in Table\
    \ 3 are in seconds.\n"
- title: RFC 956                                                   September 1985
  contents:
  - 'RFC 956                                                   September 1985

    '
- title: Algorithms for Synchronizing Network Clocks
  contents:
  - "Algorithms for Synchronizing Network Clocks\n                    Size    Mean\
    \    Var     Discard\n                    -------------------------------\n  \
    \                  504     -3.0E+6 3.2E+14 8.6E+7 \n                    500  \
    \   -3.3E+6 2.9E+14 8.6E+7 \n                    450     -1.6E+6 3.0E+13 -2.5E+7\n\
    \                    400     29450   2.2E+11 3.6E+6 \n                    350\
    \     -3291   4.1E+9  -185934\n                    300     3611    1.6E+9  -95445\
    \ \n                    250     2967    6.8E+8  66743  \n                    200\
    \     4047    2.3E+8  39288  \n                    150     1717    8.6E+7  21346\
    \  \n                    100     803     1.9E+7  10518  \n                   \
    \ 80      1123    8.4E+6  -4863  \n                    60      1119    3.1E+6\
    \  4677   \n                    50      502     1.5E+6  -2222  \n            \
    \        40      432     728856  2152   \n                    30      84     \
    \ 204651  -987   \n                    20      30      12810   338    \n     \
    \               15      28      2446    122    \n                    10      7\
    \       454     49     \n                    8       -2      196     24     \n\
    \                    6       -9      23      0      \n                    4  \
    \     -10     5       -13    \n                    2       -8      0       -8\
    \     \n        Table 4. Clustering Algorithm using ICMP Timestamp Data\n   As\
    \ in Table 3 above, only some of the 504 steps are shown in Table 4.\n   The distinguishing\
    \ feature of the data in Table 4 is that the raw\n   data are much more noisy\
    \ - only some 30 host clocks are closer than\n   one second from the reference\
    \ clock, while half were further than one\n   minute and over 100 further than\
    \ one hour from it.  The fact that the\n   algorithm converged to within 8 msec\
    \ of the reference time under\n   these conditions should be considered fairly\
    \ remarkable in view of\n   the probability that many of the outliers discarded\
    \ are almost\n   certainly due to defective protocol implementations.  Additional\n\
    \   information on these experiments is presented in Appendix A.\n"
- title: RFC 956                                                   September 1985
  contents:
  - 'RFC 956                                                   September 1985

    '
- title: Algorithms for Synchronizing Network Clocks
  contents:
  - 'Algorithms for Synchronizing Network Clocks

    '
- title: 4.  Application to Time-Synchronization Data
  contents:
  - "4.  Application to Time-Synchronization Data\n   A variation of the above algorithms\
    \ can be used to improve the offset\n   estimates from a single clock by discarding\
    \ noise samples produced by\n   occasional retransmissions in the network, for\
    \ example.  A set of n\n   independent samples is obtained by polling the clock.\
    \  Then, a\n   majority-subset table is used to compute the m(j) and s(j) statistics\n\
    \   and the maximum-likelihood estimate determined as above.  For this\n   purpose\
    \ the majority-subset table could include larger subsets as\n   well. In this\
    \ manner the maximum-likelihood estimates from each of\n   several clocks can\
    \ be determined and used in the algorithm above.\n   In order to test the effectiveness\
    \ of this algorithm, a set of\n   experiments was performed using two WIDEBAND/EISN\
    \ gateways equipped\n   with WWVB radio clocks and connected to the ARPANET. \
    \ These\n   experiments were designed to determine the limits of accuracy when\n\
    \   comparing these clocks via ARPANET paths.  One of the gateways\n   (ISI-MCON-GW)\
    \ is located at the Information Sciences Institute near\n   Los Angeles, while\
    \ the other (LL-GW) is located at Lincoln\n   Laboratories near Boston.  Both\
    \ gateways consist of PDP11/44\n   computers running the EPOS operating system\
    \ and clock-interface\n   boards with oscillators phase-locked to the WWVB clock.\n\
    \   The clock indications of the WIDEBAND/EISN gateways were compared\n   with\
    \ the DCNet WWVB reference clock using ICMP Timestamp messages,\n   which record\
    \ the individual timestamps with a precision of a\n   millisecond. However, the\
    \ path over the ARPANET between these\n   gateways and the measurement host can\
    \ introduce occasional\n   measurement errors as large as several seconds.  In\
    \ principle the\n   effect of these errors can be minimized by using a large sample\n\
    \   population;  however, use of the above algorithms allows higher\n   accuracies\
    \ to be obtained with far fewer samples.\n   Measurements were made separately\
    \ with each of the two gateways by\n   sending an ICMP Timestamp Request message\
    \ from the ARPANET address of\n   DCN1 to the ARPANET address of the gateway and\
    \ computing the\n   round-trip delay and clock offset from the ICMP Timestamp\
    \ Reply\n   message.  This process was continued for 1000 message exchanges,\n\
    \   which took from seven minutes to several hours, depending on the\n   sample\
    \ interval selected.\n   The tables below summarize the results of both the majority-subset\n\
    \   and clustering algorithms applied to the data from three experiments,\n  \
    \ one with ISI-MCON-GW and two with LL-GW.  The ISI-MCON-GW and LL-GW\n   (a)\
    \ experiments were designed to determine the limits of accuracy\n   when using\
    \ a continuous sequence of request/reply volleys, which\n"
- title: RFC 956                                                   September 1985
  contents:
  - 'RFC 956                                                   September 1985

    '
- title: Algorithms for Synchronizing Network Clocks
  contents:
  - "Algorithms for Synchronizing Network Clocks\n   resulted in over two samples\
    \ per second.  The remaining LL-GW (b)\n   experiment was designed to determine\
    \ the limits of accuracy using a\n   much lower rate of about one sample every\
    \ ten seconds.\n   For each of the three experiments two tables are shown, one\
    \ using the\n   majority-subset algorithm and the other the clustering algorithm.\
    \ The\n   two rows of the majority-subset tables show the statistics derived\n\
    \   both from the raw data and from the filtered data processed by a\n   C(5,3)\
    \ majority-subset algorithm.  In all cases the extrema and\n   variance are dramatically\
    \ less for the filtered data than the raw\n   data, lending credence to the conjecture\
    \ that the mean statistic for\n   the filtered data is probably a good maximum-likelihood\
    \ estimator of\n   the true offset.\n                              Mean    Var\
    \     Max     Min\n             -------------------------------------------- \n\
    \             Raw data        637     2.1E+7  32751   -1096\n             C(5,3)\
    \          -15     389     53      -103 \n             Table 5. ISI-MCON-GW Majority-Subset\
    \ Algorithm\n                    Size    Mean    Var     Discard\n           \
    \         -------------------------------\n                    1000    637   \
    \  2.1E+7  32751  \n                    990     313     1.0E+7  32732  \n    \
    \                981     15      1.0E+6  32649  \n                    980    \
    \ -18     2713    -1096  \n                    970     -15     521     -122  \
    \ \n                    960     -15     433     -97    \n                    940\
    \     -15     332     -75    \n                    900     -15     239     26\
    \     \n                    800     -15     141     12     \n                \
    \    700     -16     87      5      \n                    600     -17     54 \
    \     -31    \n                    500     -16     33      -5     \n         \
    \           400     -18     18      -9     \n                    300     -19 \
    \    7       -12    \n                    200     -19     2       -21    \n  \
    \                  100     -18     0       -19    \n                    1    \
    \   -17     0       -17    \n               Table 6. ISI-MCON-GW Clustering Algorithm\n"
- title: RFC 956                                                   September 1985
  contents:
  - 'RFC 956                                                   September 1985

    '
- title: Algorithms for Synchronizing Network Clocks
  contents:
  - "Algorithms for Synchronizing Network Clocks\n                              Mean\
    \    Dev     Max     Min\n              --------------------------------------------\n\
    \              Raw data        566     1.8E+7  32750   -143\n              C(5,3)\
    \          -23     81      14      -69 \n              Table 7. LL-GW (a) Majority-Subset\
    \ Algorithm\n                    Size    Mean    Var     Discard\n           \
    \         -------------------------------\n                    1000    566   \
    \  1.8E+7  32750  \n                    990     242     8.5E+6  32726  \n    \
    \                983     10      1.0E+6  32722  \n                    982    \
    \ -23     231     -143   \n                    980     -23     205     -109  \
    \ \n                    970     -22     162     29     \n                    960\
    \     -23     128     13     \n                    940     -23     105     -51\
    \    \n                    900     -24     89      1      \n                 \
    \   800     -25     49      -9     \n                    700     -26     31  \
    \    -36    \n                    600     -26     21      -34    \n          \
    \          500     -27     14      -20    \n                    400     -29  \
    \   7       -23    \n                    300     -30     3       -33    \n   \
    \                 200     -29     1       -27    \n                    100   \
    \  -29     0       -28    \n                    1       -29     0       -29  \
    \  \n                Table 8. LL-GW (a) Clustering Algorithm\n               \
    \               Mean    Dev     Max     Min\n             --------------------------------------------\
    \ \n             Raw data        378     2.1E+7  32760   -32758\n            \
    \ C(5,3)          -21     1681    329     -212  \n              Table 9. LL-GW\
    \ (b) Majority-Subset Algorithm\n"
- title: RFC 956                                                   September 1985
  contents:
  - 'RFC 956                                                   September 1985

    '
- title: Algorithms for Synchronizing Network Clocks
  contents:
  - "Algorithms for Synchronizing Network Clocks\n                    Size    Mean\
    \    Var     Discard\n                    -------------------------------\n  \
    \                  1000    377     2.1E+7  -32758 \n                    990  \
    \   315     1.0E+7  32741  \n                    981     18      1.1E+6  32704\
    \  \n                    980     -16     16119   -1392  \n                   \
    \ 970     -17     5382    554    \n                    960     -21     3338  \
    \  311    \n                    940     -24     2012    168    \n            \
    \        900     -22     1027    -137   \n                    800     -23    \
    \ 430     -72    \n                    700     -23     255     -55    \n     \
    \               600     -22     167     -45    \n                    500     -22\
    \     109     -40    \n                    400     -21     66      -6     \n \
    \                   300     -18     35      -29    \n                    200 \
    \    -17     15      -23    \n                    100     -19     3       -15\
    \    \n                    50      -21     0       -19    \n                 \
    \   20      -21     0       -21    \n                    10      -20     0   \
    \    -20    \n                    1       -20     0       -20    \n          \
    \      Table 10. LL-GW (b) Clustering Algorithm\n   The rows of the clustering\
    \ tables show the result of selected steps\n   in the algorithm as it discards\
    \ samples furthest from the mean.  The\n   first twenty steps or so discard samples\
    \ with gross errors over 30\n   seconds.  These samples turned out to be due to\
    \ a defect in the\n   timestamping procedure implemented in the WIDEBAND/EISN\
    \ gateway code\n   which caused gross errors in about two percent of the ICMP\
    \ Timestamp\n   Reply messages.  These samples were left in the raw data as received\n\
    \   in order to determine how the algorithms would behave in such extreme\n  \
    \ cases.  As apparent from the tables, both the majority-subset and\n   clustering\
    \ algorithms effectively coped with the situation.\n   In the statement of the\
    \ clustering algorithm the terminating\n   condition was specified as when only\
    \ a single sample is left in the\n   sample set.  However, it is not necessary\
    \ to proceed that far.  For\n   instance, it is known from the design of the experiment\
    \ and the\n   reference clocks that accuracies better than about ten milliseconds\n\
    \   are probably unrealistic.  A rough idea of the accuracy of the mean\n   is\
    \ evident from the deviation, computed as the square root of the\n   variance.\
    \ Thus, attempts to continue the algorithm beyond the point\n   where the variance\
    \ drops below 100 or so are probably misguided.\n   This occurs when between 500\
    \ and 900 samples remain in the sample\n"
- title: RFC 956                                                   September 1985
  contents:
  - 'RFC 956                                                   September 1985

    '
- title: Algorithms for Synchronizing Network Clocks
  contents:
  - "Algorithms for Synchronizing Network Clocks\n   set, depending upon the particular\
    \ experiment.  Note that in any case\n   between 300 and 700 samples fall within\
    \ ten milliseconds of the final\n   estimate, depending on experiment.\n   Comparing\
    \ the majority-subset and clustering algorithms on the basis\n   of variance reveals\
    \ the interesting observation that the result of\n   the C(5,3) majority-subset\
    \ algorithm is equivalent to the clustering\n   algorithm when between roughly\
    \ 900 and 950 samples remain in the\n   sample set.  This together with the moderately\
    \ high variance in the\n   ISI-MCON-GW and LL-GW (b) cases suggests a C(6,4) or\
    \ even C(7,4)\n   algorithm might yield greater accuracies.\n"
- title: 5.  Summary and Conclusions
  contents:
  - "5.  Summary and Conclusions\n   The principles of maximum-likelihood estimation\
    \ are well known and\n   widely applied in communication electronics.  In this\
    \ note two\n   algorithms using these principles are proposed, one based on\n\
    \   majority-subset techniques appropriate for cases involving small\n   numbers\
    \ of samples and the other based on clustering techniques\n   appropriate for\
    \ cases involving large numbers of samples.\n   The algorithms were tested on\
    \ raw data collected with Internet hosts\n   and gateways over ARPANET paths for\
    \ the purpose of setting a local\n   host clock with respect to a remote reference\
    \ while maintaining\n   accuracies in the order of ten milliseconds.  The results\
    \ demonstrate\n   the effectiveness of these algorithms in detecting and discarding\n\
    \   glitches due to hardware or software failure or operator mistakes.\n   They\
    \ also demonstrate that time synchronization can be maintained\n   across the\
    \ ARPANET in the order of ten milliseconds in spite of\n   glitches many times\
    \ the mean roundtrip delay.\n   The results point to the need for an improved\
    \ time-synchronization\n   protocol combining the best features of the ICMP Timestamp\
    \ message\n   [6] and UDP Time protocol [7].  Among the features suggested for\
    \ this\n   protocol are the following:\n      1.  The protocol should be based\
    \ on UDP, which provides the\n          flexibility to handle simultaneous, multiplexed\
    \ queries and\n          responses.\n      2.  The message format should be based\
    \ on the ICMP Timestamp\n          message format, which provides the arrival\
    \ and departure times\n          at the server and allows the client to calculate\
    \ the roundtrip\n          delay and offset accurately.\n"
- title: RFC 956                                                   September 1985
  contents:
  - 'RFC 956                                                   September 1985

    '
- title: Algorithms for Synchronizing Network Clocks
  contents:
  - "Algorithms for Synchronizing Network Clocks\n      3.  The data format should\
    \ be based on the UDP Time format, which\n          specifies 32-bit time in seconds\
    \ since 1 January 1900, but\n          extended additional bits for the fractional\
    \ part of a second.\n      4.  Provisions to specify the expected accuracy should\
    \ be included\n          along with information about the reference clock or\n\
    \          synchronizing mechanism, as well as the expected drift rate\n     \
    \     and the last time the clock was set or synchronized.\n   The next step should\
    \ be formulating an appropriate protocol with the\n   above features, together\
    \ with implementation and test in the Internet\n   environment.  Future development\
    \ should result in a distributed,\n   symmetric protocol, similar perhaps to those\
    \ described in [1], for\n   distributing highly reliable timekeeping information\
    \ using a\n   hierarchical set of trusted clocks.\n"
- title: 6.  References
  contents:
  - "6.  References\n   1.  Lindsay, W.C., and A.V.  Kantak.  Network synchronization\
    \ of\n       random signals.  IEEE Trans.  Comm.  COM-28, 8 (August 1980),\n \
    \      1260-1266.\n   2.  Mills, D.L.  Time Synchronization in DCNET Hosts.  DARPA\
    \ Internet\n       Project Report IEN-173, COMSAT Laboratories, February 1981.\n\
    \   3.  Mills, D.L.  DCNET Internet Clock Service.  DARPA Network Working\n  \
    \     Group Report RFC-778, COMSAT Laboratories, April 1981.\n   4.  Mills, D.L.\
    \  Internet Delay Experiments.  DARPA Network Working\n       Group Report RFC-889,\
    \ M/A-COM Linkabit, December 1983.\n   5.  Mills, D.L.  DCN Local-Network Protocols.\
    \  DARPA Network Working\n       Group Report RFC-891, M/A-COM Linkabit, December\
    \ 1983.\n   6.  Postel, J.  Internet Control Message Protocol.  DARPA Network\n\
    \       Working Group Report RFC-792, USC Information Sciences Institute,\n  \
    \     September 1981.\n   7.  Postel, J.  Time Protocol.  DARPA Network Working\
    \ Group Report\n       RFC-868, USC Information Sciences Institute, May 1983.\n\
    \   8.  Postel, J.  Daytime Protocol.  DARPA Network Working Group Report\n  \
    \     RFC-867, USC Information Sciences Institute, May 1983.\n   9.  Su, Z.  A\
    \ Specification of the Internet Protocol (IP) Timestamp\n       Option.  DARPA\
    \ Network Working Group Report RFC-781.  SRI\n       International, May 1981.\n"
- title: RFC 956                                                   September 1985
  contents:
  - 'RFC 956                                                   September 1985

    '
- title: Algorithms for Synchronizing Network Clocks
  contents:
  - "Algorithms for Synchronizing Network Clocks\n   10. Marzullo, K., and S.  Owicki.\
    \  Maintaining the Time in a\n       Distributed System.  ACM Operating Systems\
    \ Review 19, 3 (July\n       1985), 44-54.\n   11. Mills, D.L.  Experiments in\
    \ Network Clock Synchronization.  DARPA\n       Network Working Group Report RFC-957,\
    \ M/A-COM Linkabit, September\n       1985.\n   12. Mills, D.L.  Network Time\
    \ Protocol (NTP).  DARPA Network Working\n       Group Report RFC-958, M/A-COM\
    \ Linkabit, September 1985.\n"
- title: Appendix A.
  contents:
  - "Appendix A.\n   Experimental Determination of Internet Host Clock Accuracies\n\
    \   Following is a summary of the results of three experiments designed\n   to\
    \ reveal the accuracies of various Internet host clocks.  The first\n   experiment\
    \ uses the UDP Time protocol, which is limited in precision\n   to one second,\
    \ while the second uses the ICMP Timestamp message,\n   which extends the precision\
    \ to one millisecond.  In the third\n   experiment the results indicated by UDP\
    \ and ICMP are compared.  In\n   the UDP Time protocol time is indicated as a\
    \ 32-bit field in seconds\n   past 0000 UT on 1 January 1900, while in the ICMP\
    \ Timestamp message\n   time is indicated as a 32-bit field in milliseconds past\
    \ 0000 UT of\n   each day.\n   All experiments described herein were conducted\
    \ from Internet host\n   DCN6.ARPA, which is normally synchronized to a WWV radio\
    \ clock.  In\n   order to improve accuracy during the experiments, the DCN6.ARPA\
    \ host\n   was resynchronized to a WWVB radio clock.  As the result of several\n\
    \   experiments with other hosts equipped with WWVB and WWV radio clocks\n   and\
    \ GOES satellite clocks, it is estimated that the maximum\n   measurement error\
    \ in the following experiments is less than about 30\n   msec relative to standard\
    \ NBS time determined at the Boulder/Fort\n   Collins transmitting sites.\n  \
    \ A1.  UDP Time Protocol Experiment\n      In the first experiment four UDP Time\
    \ protocol requests were sent\n      at about three-second intervals to each of\
    \ the 1775 hosts listed\n      in the NIC Internet host table.  A total of 555\
    \ samples were\n      received from 163 hosts and compared with a local reference\
    \ based\n      on a WWVB radio clock, which is known to be accurate to within\
    \ a\n      few milliseconds.  Not all of these hosts were listed as\n      supporting\
    \ the UDP Time protocol in the NIC Internet host table,\n      while some that\
    \ were listed as supporting this protocol either\n      failed to respond or responded\
    \ with various error messages.\n"
- title: RFC 956                                                   September 1985
  contents:
  - 'RFC 956                                                   September 1985

    '
- title: Algorithms for Synchronizing Network Clocks
  contents:
  - "Algorithms for Synchronizing Network Clocks\n      In the following table \"\
    Host\" is the canonical name of the host\n      and \"Count\" the number of replies\
    \ received.  The remaining data\n      represent the time offset, in seconds,\
    \ necessary to correct the\n      local (reference) clock to agree with the host\
    \ cited.  The \"Max\"\n      and \"Min\" represent the maximum and minimum of\
    \ these offsets,\n      while \"Mean\" represents the mean value and \"Var\" the\
    \ variance, all\n      rounded to the nearest second.\n         Host         \
    \           Count   Max     Min     Mean    Var\n         -----------------------------------------------------------\n\
    \         BBN-CLXX.ARPA           4       -11     -12     -11     0\n        \
    \ BBN-KIWI.ARPA           4       -11     -12     -11     0\n         BBN-META.ARPA\
    \           4       -11     -12     -11     0\n         BBNA.ARPA            \
    \   1       22      22      22      0\n         BBNG.ARPA               4    \
    \   87      87      87      0\n         BELLCORE-CS-GW.ARPA     3       72   \
    \   71      71      0\n         BLAYS.PURDUE.EDU        2       -1      -1   \
    \   -1      0\n         CMU-CC-TE.ARPA          4       -94     -95     -94  \
    \   0\n         CMU-CS-C.ARPA           3       6       5       5       0\n  \
    \       CMU-CS-CAD.ARPA         4       -37     -37     -37     0\n         CMU-CS-CFS.ARPA\
    \         3       -42     -43     -42     0\n         CMU-CS-G.ARPA          \
    \ 3       -30     -31     -30     0\n         CMU-CS-GANDALF.ARPA     3      \
    \ -42     -43     -42     0\n         CMU-CS-H.ARPA           4       -36    \
    \ -37     -36     0\n         CMU-CS-IUS.ARPA         3       -44     -45    \
    \ -44     0\n         CMU-CS-IUS2.ARPA        3       -44     -44     -44    \
    \ 0\n         CMU-CS-K.ARPA           3       -31     -31     -31     0\n    \
    \     CMU-CS-SAM.ARPA         4       -74     -75     -74     0\n         CMU-CS-SPEECH.ARPA\
    \      4       -39     -40     -39     0\n         CMU-CS-SPEECH2.ARPA     4 \
    \      -49     -50     -49     0\n         CMU-CS-SPICE.ARPA       4       -131\
    \    -132    -131    0\n         CMU-CS-THEORY.ARPA      4       -36     -37 \
    \    -36     0\n         CMU-CS-UNH.ARPA         4       -44     -45     -44 \
    \    0\n         CMU-CS-VLSI.ARPA        4       -66     -66     -66     0\n \
    \        CMU-RI-ARM.ARPA         3       -41     -41     -41     0\n         CMU-RI-CIVE.ARPA\
    \        3       -44     -45     -44     0\n         CMU-RI-FAS.ARPA         4\
    \       -27     -28     -27     0\n         CMU-RI-ISL1.ARPA        4       -18\
    \     -19     -18     0\n         CMU-RI-ISL3.ARPA        3       -49     -50\
    \     -49     0\n         CMU-RI-LEG.ARPA         3       -33     -33     -33\
    \     0\n         CMU-RI-ML.ARPA          4       42      42      42      0\n\
    \         CMU-RI-ROVER.ARPA       4       -48     -49     -48     0\n        \
    \ CMU-RI-SENSOR.ARPA      2       -40     -41     -40     0\n         CMU-RI-VI.ARPA\
    \          3       -65     -65     -65     0\n         COLUMBIA.ARPA         \
    \  1       8       8       8       0\n         CU-ARPA.CS.CORNELL.EDU  4     \
    \  5       3       4       0\n         CYPRESS.ARPA            4       2     \
    \  1       1       0\n"
- title: RFC 956                                                   September 1985
  contents:
  - 'RFC 956                                                   September 1985

    '
- title: Algorithms for Synchronizing Network Clocks
  contents:
  - "Algorithms for Synchronizing Network Clocks\n         DCN1.ARPA             \
    \  4       0       0       0       0\n         DCN5.ARPA               4     \
    \  0       0       0       0\n         DCN6.ARPA               4       0     \
    \  0       0       0\n         DCN7.ARPA               4       -1      -1    \
    \  0       0\n         DCN9.ARPA               4       -3      -3      -3    \
    \  0\n         DEVVAX.TN.CORNELL.EDU   2       3659    3658    3658    0\n   \
    \      ENEEVAX.ARPA            4       73      72      72      0\n         FORD-WDL1.ARPA\
    \          4       -59     -60     -59     0\n         FORD1.ARPA            \
    \  4       0       0       0       0\n         GUENEVERE.PURDUE.EDU    3     \
    \  1       0       0       0\n         GVAX.CS.CORNELL.EDU     4       -18   \
    \  -18     -18     0\n         IM4U.ARPA               4       -6      -6    \
    \  -6      0\n         IPTO-FAX.ARPA           4       0       0       0     \
    \  0\n         KANKIN.ARPA             4       -3      -4      -3      0\n   \
    \      MERLIN.PURDUE.EDU       2       3       3       3       0\n         MIT-ACHILLES.ARPA\
    \       4       16      16      16      0\n         MIT-AGAMEMNON.ARPA      4\
    \       -63     -64     -63     0\n         MIT-ANDROMACHE.ARPA     4       -28\
    \     -28     -28     0\n         MIT-APHRODITE.ARPA      4       -7      -8 \
    \     -7      0\n         MIT-APOLLO.ARPA         4       -8      -9      -8 \
    \     0\n         MIT-ARES.ARPA           4       -25     -26     -25     0\n\
    \         MIT-ARTEMIS.ARPA        4       -34     -35     -34     0\n        \
    \ MIT-ATHENA.ARPA         4       -37     -37     -37     0\n         MIT-ATLAS.ARPA\
    \          4       -26     -26     -26     0\n         MIT-CASTOR.ARPA       \
    \  4       -35     -35     -35     0\n         MIT-DAFFY-DUCK.ARPA     2     \
    \  -72     -73     -72     0\n         MIT-DEMETER.ARPA        4       -28   \
    \  -29     -28     0\n         MIT-GOLDILOCKS.ARPA     1       -20     -20   \
    \  -20     0\n         MIT-HECTOR.ARPA         4       -23     -24     -23   \
    \  0\n         MIT-HELEN.ARPA          4       6       5       5       0\n   \
    \      MIT-HERA.ARPA           4       -34     -35     -34     0\n         MIT-HERACLES.ARPA\
    \       4       -36     -36     -36     0\n         MIT-JASON.ARPA          4\
    \       -36     -37     -36     0\n         MIT-MENELAUS.ARPA       4       -32\
    \     -33     -32     0\n         MIT-MULTICS.ARPA        3       25      23 \
    \     24      0\n         MIT-ODYSSEUS.ARPA       4       20      19      19 \
    \     0\n         MIT-ORPHEUS.ARPA        4       -34     -35     -34     0\n\
    \         MIT-PARIS.ARPA          4       -35     -35     -35     0\n        \
    \ MIT-POSEIDON.ARPA       4       -39     -41     -40     0\n         MIT-PRIAM.ARPA\
    \          4       -24     -25     -24     0\n         MIT-REAGAN.ARPA       \
    \  4       115     115     115     0\n         MIT-THESEUS.ARPA        4     \
    \  -43     -44     -43     0\n         MIT-TRILLIAN.ARPA       4       -38   \
    \  -39     -38     0\n         MIT-TWEETY-PIE.ARPA     3       106     105   \
    \  105     0\n         MIT-ZERMATT.ARPA        4       -75     -76     -75   \
    \  0\n         MIT-ZEUS.ARPA           4       -37     -39     -38     0\n   \
    \      MOL.ARPA                2       -3      -3      -3      0\n"
- title: RFC 956                                                   September 1985
  contents:
  - 'RFC 956                                                   September 1985

    '
- title: Algorithms for Synchronizing Network Clocks
  contents:
  - "Algorithms for Synchronizing Network Clocks\n         MUNGO.THINK.COM       \
    \  4       -1      -1      -1      0\n         NETWOLF.ARPA            4     \
    \  158     157     157     0\n         ORBIT.ARPA              3       -4    \
    \  -5      -4      0\n         OSLO-VAX.ARPA           3       3729    3727  \
    \  3728    1\n         PATCH.ARPA              1       18      18      18    \
    \  0\n         RADC-MULTICS.ARPA       4       -14     -15     -14     0\n   \
    \      RICE-ZETA.ARPA          1       -31     -31     -31     0\n         RICE.ARPA\
    \               1       7       7       7       0\n         ROCHESTER.ARPA   \
    \       4       -18     -18     -18     0\n         ROCK.THINK.COM          4\
    \       2       2       2       0\n         SCRC-QUABBIN.ARPA       4       -100\
    \    -100    -100    0\n         SCRC-RIVERSIDE.ARPA     4       -128    -128\
    \    -128    0\n         SCRC-STONY-BROOK.ARPA   4       -100    -100    -100\
    \    0\n         SCRC-VALLECITO.ARPA     4       -57     -57     -57     0\n \
    \        SCRC-YUKON.ARPA         4       -65     -65     -65     0\n         SEBASTIAN.THINK.COM\
    \     4       -14     -15     -14     0\n         SEISMO.CSS.GOV          3  \
    \     -1      -1      0       0\n         SRI-BISHOP.ARPA         4       -40\
    \     -41     -40     0\n         SRI-DARWIN.ARPA         2       -29     -30\
    \     -29     0\n         SRI-HUXLEY.ARPA         2       -28     -29     -28\
    \     0\n         SRI-KIOWA.ARPA          4       -29     -30     -29     0\n\
    \         SRI-LASSEN.ARPA         3       -11     -12     -11     0\n        \
    \ SRI-MENDEL.ARPA         4       74      73      73      0\n         SRI-PINCUSHION.ARPA\
    \     4       -50     -51     -50     0\n         SRI-RITTER.ARPA         4  \
    \     -23     -24     -23     0\n         SRI-TIOGA.ARPA          4       127\
    \     127     127     0\n         SRI-UNICORN.ARPA        4       -38486  -38486\
    \  -38486  0\n         SRI-WHITNEY.ARPA        4       -24     -24     -24   \
    \  0\n         SRI-YOSEMITE.ARPA       4       -26     -27     -26     0\n   \
    \      SU-AIMVAX.ARPA          2       -54     -55     -54     0\n         SU-COYOTE.ARPA\
    \          1       14      14      14      0\n         SU-CSLI.ARPA          \
    \  4       -1      -1      -1      0\n         SU-PSYCH.ARPA           1     \
    \  -52     -52     -52     0\n         SU-SAFE.ARPA            1       -60   \
    \  -60     -60     0\n         SU-SIERRA.ARPA          4       -53     -53   \
    \  -53     0\n         SU-SUSHI.ARPA           4       -105    -106    -105  \
    \  0\n         SU-WHITNEY.ARPA         2       -14     -14     -14     0\n   \
    \      TESLA.EE.CORNELL.EDU    3       -2      -3      -2      0\n         THORLAC.THINK.COM\
    \       4       -20     -20     -20     0\n         TRANTOR.ARPA            4\
    \       4       3       3       0\n         TZEC.ARPA               4       -6\
    \      -7      -6      0\n         UBALDO.THINK.COM        4       -13     -13\
    \     -13     0\n         UCI-CIP.ARPA            2       -566    -567    -566\
    \    0\n         UCI-CIP2.ARPA           2       -175    -175    -175    0\n \
    \        UCI-CIP3.ARPA           2       -89     -90     -89     0\n         UCI-CIP4.ARPA\
    \           2       -51     -51     -51     0\n         UCI-CIP5.ARPA        \
    \   2       -26     -28     -27     1\n"
- title: RFC 956                                                   September 1985
  contents:
  - 'RFC 956                                                   September 1985

    '
- title: Algorithms for Synchronizing Network Clocks
  contents:
  - "Algorithms for Synchronizing Network Clocks\n         UCI-ICSA.ARPA         \
    \  2       -24     -24     -24     0\n         UCI-ICSC.ARPA           1     \
    \  0       0       0       0\n         UCI-ICSD.ARPA           1       -24   \
    \  -24     -24     0\n         UCI-ICSE.ARPA           1       -10     -10   \
    \  -10     0\n         UDEL-DEWEY.ARPA         1       88      88      88    \
    \  0\n         UDEL-MICRO.ARPA         2       64      64      64      0\n   \
    \      UIUC.ARPA               4       105     103     104     0\n         UIUCDCSB.ARPA\
    \           4       65      65      65      0\n         UMD1.ARPA            \
    \   4       0       0       0       0\n         UMICH1.ARPA             4    \
    \   -1      -1      0       0\n         UO.ARPA                 4       -2   \
    \   -3      -2      0\n         USC-ISI.ARPA            4       -45     -45  \
    \   -45     0\n         USC-ISIC.ARPA           4       28      26      27   \
    \   0\n         USC-ISID.ARPA           4       26      25      25      0\n  \
    \       USC-ISIE.ARPA           4       -53     -54     -53     0\n         USC-ISIF.ARPA\
    \           4       -29     -29     -29     0\n         USGS2-MULTICS.ARPA   \
    \   3       75      74      74      0\n         UT-ALAMO.ARPA           4    \
    \   22      22      22      0\n         UT-BARKLEY.ARPA         4       57   \
    \   56      56      0\n         UT-EMIL.ARPA            4       29      28   \
    \   28      0\n         UT-GOTTLOB.ARPA         4       42      41      41   \
    \   0\n         UT-HASKELL.ARPA         4       6       6       6       0\n  \
    \       UT-JACQUES.ARPA         4       21      20      20      0\n         UT-SALLY.ARPA\
    \           3       1       0       0       0\n         VALENTINE.THINK.COM  \
    \   4       -10     -11     -10     0\n         WENCESLAS.THINK.COM     4    \
    \   -2      -3      -2      0\n         XAVIER.THINK.COM        4       -14  \
    \   -14     -14     0\n         XEROX.ARPA              4       0       0    \
    \   0       0\n         YAXKIN.ARPA             3       -4      -5      -4   \
    \   0\n         YON.THINK.COM           4       -11     -12     -11     0\n  \
    \       ZAPHOD.PURDUE.EDU       4       -230    -231    -230    0\n         ZOTZ.ARPA\
    \               4       17      16      16      0\n         Table A1. UDP Host\
    \ Clock Offsets for Various Internet Hosts\n      The above list includes several\
    \ host clocks known to be\n      synchronized to various radio clocks, including\
    \ DCN1.ARPA (WWVB),\n      DCN6.ARPA (WWV) and FORD1.ARPA (GOES).  Under normal\
    \ radio\n      receiving conditions these hosts should be accurate to well within\n\
    \      a second relative to NBS standard time.  Certain other host clocks\n  \
    \    are synchronized to one of these hosts using protocols described\n      in\
    \ RFC-891, including DCN5.ARPA, DCN7.ARPA and UMD1.ARPA\n      (synchronized to\
    \ DCN1.ARPA) and UMICH1.ARPA (synchronized to\n      FORD1.ARPA).  It is highly\
    \ likely, but not confirmed, that several\n      other hosts with low offsets\
    \ derive local time from one of these\n      hosts or from other radio clocks.\n"
- title: RFC 956                                                   September 1985
  contents:
  - 'RFC 956                                                   September 1985

    '
- title: Algorithms for Synchronizing Network Clocks
  contents:
  - "Algorithms for Synchronizing Network Clocks\n      The raw statistics computed\
    \ from the weighted data indicate a mean\n      of -261 sec, together with a maximum\
    \ of 3729 sec and a minimum of\n      -38486 sec.  Obviously, setting a local\
    \ clock on the basis of\n      these statistics alone would result in a gross\
    \ error.\n      A closer look at the distribution of the data reveals some\n \
    \     interesting features.  Table A2 is a histogram showing the\n      distribution\
    \ within a few seconds of reference time.  In this and\n      following tables,\
    \ \"Offset\" is in seconds and indicates the\n      lower-valued corner of the\
    \ histogram bin, which extends to the\n      next higher value, while \"Count\"\
    \ indicates the number of samples\n      falling in that bin.\n              \
    \   Offset  Count           Offset  Count\n                 -------------    \
    \       -------------\n                 0 sec   13              (continued)  \n\
    \                 1       1               -1      3    \n                 2  \
    \     1               -2      3    \n                 3       2              \
    \ -3      3    \n                 4       1               -4      2    \n    \
    \             5       2               -5      0    \n                 6      \
    \ 1               -6      2    \n                 7       1               -7 \
    \     1    \n                 8       1               -8      1    \n        \
    \         9       0               -9      0    \n                 > 9     30 \
    \             < -9    95   \n                 Table A2. Offset Distribution <\
    \ 9 sec\n      A total of 16 of the 163 host clocks are within a second in\n \
    \     accuracy, while a total of 125 are off more than ten seconds.  It\n    \
    \  is considered highly likely that most of the 16 host clocks within\n      a\
    \ second in offset are synchronized directly or indirectly to a\n      radio clock.\
    \ Table A3 is a histogram showing the distribution over\n      a larger scale.\n"
- title: RFC 956                                                   September 1985
  contents:
  - 'RFC 956                                                   September 1985

    '
- title: Algorithms for Synchronizing Network Clocks
  contents:
  - "Algorithms for Synchronizing Network Clocks\n                 Offset  Count \
    \          Offset  Count\n                 -------------           -------------\n\
    \                 0 sec   35              (continued)  \n                 30 \
    \     3               -30     50   \n                 60      8              \
    \ -60     42   \n                 90      3               -90     8    \n    \
    \             120     1               -120    4    \n                 150    \
    \ 1               -150    2    \n                 180     0               -180\
    \    1    \n                 210     0               -210    0    \n         \
    \        240     0               -240    1    \n                 270     0   \
    \            -270    0    \n                 > 270   2               < -270  2\
    \    \n                Table A3. Offset Distribution < 270 sec\n      A total\
    \ of 138 of the 163 host clocks are within a minute in\n      accuracy, while\
    \ a total of four host clocks are off more than 4.5\n      minutes.  It is considered\
    \ likely that most host clocks, with the\n      exception of the 16 identified\
    \ above as probably synchronized to a\n      radio clock, are set manually by\
    \ an operator.  Inspection of the\n      raw data shows some hosts to be very\
    \ far off;  for instance,\n      SRI-UNICORN.ARPA is off more than ten hours.\
    \  Note the interesting\n      skew in the data, which show that most host clocks\
    \ are set slow\n      relative to standard time.\n   A2.  ICMP Timestamp Messages\
    \ Experiment\n      The the second experiment four ICMP Timestamp messages were\
    \ sent\n      at about three-second intervals to each of the 1775 hosts and 110\n\
    \      gateways listed in the NIC Internet host table.  A total of 1910\n    \
    \  samples were received from 504 hosts and gateways and compared\n      with\
    \ a local reference based on a WWVB radio clock, which is known\n      to be accurate\
    \ to within a few milliseconds.  Support for the ICMP\n      Timestamp messages\
    \ is optional in the DoD Internet protocol suite,\n      so it is not surprising\
    \ that most hosts and gateways do not\n      support it.  Moreover, bugs are known\
    \ to exist in several widely\n      distributed implementations of this feature.\
    \  The situation proved\n      an interesting and useful robustness test for the\
    \ clustering\n      algorithm described in the main body of this note.\n     \
    \ While the complete table of ICMP offsets by host is too large to\n      reproduce\
    \ here, the following Tables A4 through A7 show the\n      interesting characteristics\
    \ of the distribution.  The raw\n      statistics computed from the weighted data\
    \ indicate a mean of\n      -2.8E+6 msec, together with a maximum of 8.6E+7 msec\
    \ and a minimum\n      of -8.6E+7 msec.  Setting a local clock on the basis of\
    \ these\n"
- title: RFC 956                                                   September 1985
  contents:
  - 'RFC 956                                                   September 1985

    '
- title: Algorithms for Synchronizing Network Clocks
  contents:
  - "Algorithms for Synchronizing Network Clocks\n      statistics alone would be\
    \ ridiculous; however, as described in the\n      main body of this note, use\
    \ of the clustering algorithm improves\n      the estimate to within 8 msec of\
    \ the correct value.  The apparent\n      improvement of about six orders in magnitude\
    \ is so remarkable as\n      to require a closer look at the distributions.\n\
    \      The reasons for the remarkable success of the clustering algorithm\n  \
    \    are apparent from closer examination of the sequence of histograms\n    \
    \  shown in Tables A4 through A7.  Table A4 shows the distribution in\n      the\
    \ scale of hours, from which it is evident that 80 percent of\n      the samples\
    \ lie in a one-hour band either side of zero offset;\n      but, strangely enough,\
    \ there is a significant dispersion in\n      samples outside of this band, especially\
    \ in the negative region.\n      It is almost certain that most or all of the\
    \ latter samples\n      represent defective ICMP Timestamp implementations.  Note\
    \ that\n      invalid timestamps and those with the high-order bit set\n     \
    \ (indicating unknown or nonstandard time) have already been\n      excluded from\
    \ these data.\n                 Offset  Count           Offset  Count\n      \
    \           -------------           -------------\n                 0 hr    204\
    \             (continued)  \n                 1       10              -1     \
    \ 194  \n                 2       0               -2      0    \n            \
    \     3       0               -3      2    \n                 4       0      \
    \         -4      17   \n                 5       0               -5      10 \
    \  \n                 6       0               -6      1    \n                \
    \ 7       0               -7      22   \n                 8       0          \
    \     -8      20   \n                 9       0               -9      0    \n\
    \                 > 9     0               < -9    13   \n              Table A4.\
    \ ICMP Offset Distribution < 9 hours\n      Table A5 shows the distribution compressed\
    \ to the range of 4.5\n      minutes.  About half of the 370 samples remaining\
    \ after the\n      outliers beyond 4.5 minutes are excluded lie in the band 30\n\
    \      seconds either side of zero offset, with a gradual tapering off to\n  \
    \    the limits of the table. This type of distribution would be\n      expected\
    \ in the case of host clocks set manually by an operator.\n"
- title: RFC 956                                                   September 1985
  contents:
  - 'RFC 956                                                   September 1985

    '
- title: Algorithms for Synchronizing Network Clocks
  contents:
  - "Algorithms for Synchronizing Network Clocks\n                 Offset  Count \
    \          Offset  Count\n                 -------------           -------------\n\
    \                 0 sec   111             (continued)  \n                 30 \
    \     25              -30     80   \n                 60      26             \
    \ -60     28   \n                 90      13              -90     18   \n    \
    \             120     7               -120    19   \n                 150    \
    \ 5               -150    9    \n                 180     3               -180\
    \    10   \n                 210     3               -210    6    \n         \
    \        240     1               -240    2    \n                 270     2   \
    \            -270    2    \n                 > 270   29              < -270  105\
    \  \n              Table A5. ICMP Offset Distribution < 270 sec\n      Table A6\
    \ shows the distribution compressed to the range of 27\n      seconds.  About\
    \ 29 percent of the 188 samples remaining after the\n      outliers beyond 27\
    \ seconds are excluded lie in the band 3 seconds\n      either side of zero offset,\
    \ with a gradual but less pronounced\n      tapering off to the limits of the\
    \ table.  This type of\n      distribution is consistent with a transition region\
    \ in which some\n      clocks are set manually and some by some kind of protocol\n\
    \      interaction with a reference clock.  A fair number of the clocks\n    \
    \  showing offsets in the 3-27 second range have probably been set\n      using\
    \ the UDP Time protocol at some time in the past, but have\n      wandered away\
    \ as the result of local-oscillator drifts.\n                 Offset  Count  \
    \         Offset  Count\n                 -------------           -------------\n\
    \                 0 sec   32              (continued)  \n                 3  \
    \     15              -3      22   \n                 6       9              \
    \ -6      12   \n                 9       6               -9      8    \n    \
    \             12      13              -12     8    \n                 15     \
    \ 5               -15     5    \n                 18      8               -18\
    \     9    \n                 21      8               -21     7    \n        \
    \         24      9               -24     3    \n                 27      6  \
    \             -27     3    \n                 > 27    114             < -27  \
    \ 202  \n              Table A6. ICMP Offset Distribution < 27 sec\n      Finally,\
    \ Table A7 shows the distribution compressed to the range\n      of 0.9 second.\
    \  Only 30 of the original 504 samples have survived\n      and only 12 of these\
    \ are within a band 0.1 seconds either side of\n"
- title: RFC 956                                                   September 1985
  contents:
  - 'RFC 956                                                   September 1985

    '
- title: Algorithms for Synchronizing Network Clocks
  contents:
  - "Algorithms for Synchronizing Network Clocks\n      zero offset. The latter include\
    \ those clocks continuously\n      synchronized to a radio clock, such as the\
    \ DCNet clocks, some\n      FORDnet and UMDnet clocks and certain others.\n  \
    \               Offset  Count           Offset  Count\n                 -------------\
    \           -------------\n                 0 sec   6               (continued)\
    \  \n                 .1      3               -.1     6    \n                \
    \ .2      1               -.2     3    \n                 .3      1          \
    \     -.3     0    \n                 .4      0               -.4     0    \n\
    \                 .5      1               -.5     2    \n                 .6 \
    \     0               -.6     0    \n                 .7      1              \
    \ -.7     0    \n                 .8      4               -.8     2    \n    \
    \             .9      0               -.9     0    \n                 > .9   \
    \ 208             < -.9   266  \n              Table A7. ICMP Offset Distribution\
    \ < .9 sec\n     The most important observation that can be made about the above\n\
    \      histograms is the pronounced central tendency in all of them, in\n    \
    \  spite of the scale varying over six orders of magnitude.  Thus, a\n      clustering\
    \ algorithm which operates to discard outliers from the\n      mean will reliably\
    \ converge on a maximum-likelihood estimate close\n      to the actual value.\n\
    \   A3.  Comparison of UDP and ICMP Time\n      The third experiment was designed\
    \ to assess the accuracies\n      produced by the various host implementations\
    \ of the UDP Time\n      protocol and ICMP Timestamp messages.  For each of the\
    \ hosts\n      responding to the UDP Time protocol in the first experiment a\n\
    \      separate test was conducted using both UDP and ICMP in the same\n     \
    \ test, so as to minimize the effect of clock drift.  Of the 162\n      hosts\
    \ responding to UDP requests, 45 also responded to ICMP\n      requests with apparently\
    \ correct time, but the remainder either\n      responded with unknown or nonstandard\
    \ ICMP time (29) or failed to\n      respond to ICMP requests at all (88).\n \
    \     Table A8 shows both the UDP time (seconds) and ICMP time\n      (milliseconds)\
    \ returned by each of the 45 hosts responding to both\n      UDP and ICMP requests.\
    \  The data are ordered first by indicated\n      UDP offset and then by indicated\
    \ ICMP offset.  The seven hosts at\n      the top of the table are continuously\
    \ synchronized, directly or\n      indirectly to a radio clock, as described earlier\
    \ under the first\n"
- title: RFC 956                                                   September 1985
  contents:
  - 'RFC 956                                                   September 1985

    '
- title: Algorithms for Synchronizing Network Clocks
  contents:
  - "Algorithms for Synchronizing Network Clocks\n      experiment.  It is probable,\
    \ but not confirmed, that those hosts\n      below showing discrepancies of a\
    \ second or less are synchronized\n      on occasion to one of these hosts.\n\
    \         Host                    UDP time        ICMP time\n         -------------------------------------------------\n\
    \         DCN6.ARPA               0 sec           0 msec\n         DCN7.ARPA \
    \              0               0\n         DCN1.ARPA               0         \
    \      -6\n         DCN5.ARPA               0               -7\n         UMD1.ARPA\
    \               0               8\n         UMICH1.ARPA             0        \
    \       -21\n         FORD1.ARPA              0               31\n         TESLA.EE.CORNELL.EDU\
    \    0               132\n         SEISMO.CSS.GOV          0               174\n\
    \         UT-SALLY.ARPA           -1              -240\n         CU-ARPA.CS.CORNELL.EDU\
    \  -1              -514\n         UCI-ICSE.ARPA           -1              -1896\n\
    \         UCI-ICSC.ARPA           1               2000\n         DCN9.ARPA   \
    \            -7              -6610\n         TRANTOR.ARPA            10      \
    \        10232\n         COLUMBIA.ARPA           11              12402\n     \
    \    GVAX.CS.CORNELL.EDU     -12             -11988\n         UCI-CIP5.ARPA  \
    \         -15             -17450\n         RADC-MULTICS.ARPA       -16       \
    \      -16600\n         SU-WHITNEY.ARPA         17              17480\n      \
    \   UCI-ICSD.ARPA           -20             -20045\n         SU-COYOTE.ARPA  \
    \        21              21642\n         MIT-MULTICS.ARPA        27          \
    \    28265\n         BBNA.ARPA               -34             -34199\n        \
    \ UCI-ICSA.ARPA           -37             -36804\n         ROCHESTER.ARPA    \
    \      -42             -41542\n         SU-AIMVAX.ARPA          -50          \
    \   -49575\n         UCI-CIP4.ARPA           -57             -57060\n        \
    \ SU-SAFE.ARPA            -59             -59212\n         SU-PSYCH.ARPA     \
    \      -59             -58421\n         UDEL-MICRO.ARPA         62           \
    \   63214\n         UIUCDCSB.ARPA           63              63865\n         BELLCORE-CS-GW.ARPA\
    \     71              71402\n         USGS2-MULTICS.ARPA      76             \
    \ 77018\n         BBNG.ARPA               81              81439\n         UDEL-DEWEY.ARPA\
    \         89              89283\n         UCI-CIP3.ARPA           -102       \
    \     -102148\n         UIUC.ARPA               105             105843\n     \
    \    UCI-CIP2.ARPA           -185            -185250\n         UCI-CIP.ARPA  \
    \          -576            -576386\n         OSLO-VAX.ARPA           3738    \
    \        3739395\n"
- title: RFC 956                                                   September 1985
  contents:
  - 'RFC 956                                                   September 1985

    '
- title: Algorithms for Synchronizing Network Clocks
  contents:
  - "Algorithms for Synchronizing Network Clocks\n         DEVVAX.TN.CORNELL.EDU \
    \  3657            3657026\n         PATCH.ARPA              -86380          20411\n\
    \         IPTO-FAX.ARPA           -86402          -1693\n         NETWOLF.ARPA\
    \            10651435        -62164450\n         Table A8. Comparison of UDP and\
    \ ICMP Host Clock Offsets\n      Allowing for various degrees of truncation and\
    \ roundoff abuse in\n      the various implementations, discrepancies of up to\
    \ a second could\n      be expected between UDP and ICMP time.  While the results\
    \ for most\n      hosts confirm this, some discrepancies are far greater, which\
    \ may\n      indicate defective implementations, excessive swapping delays and\n\
    \      so forth.  For instance, the ICMP time indicated by UCI-CIP5.ARPA\n   \
    \   is almost 2.5 seconds less than the UDP time.\n      Even though the UDP and\
    \ ICMP times indicated by OSLO-VAX.ARPA and\n      DEVVAX.TN.CORNELL.EDU agree\
    \ within nominals, the fact that they\n      are within a couple of minutes or\
    \ so of exactly one hour early\n      (3600 seconds) lends weight to the conclusion\
    \ they were\n      incorrectly set, probably by an operator who confused local\
    \ summer\n      and standard time.\n      Something is clearly broken in the case\
    \ of PATCH.ARPA,\n      IPTO-FAX.ARPA and NETWOLF.ARPA.  Investigation of the\
    \ PATCH.ARPA\n      and IPTO-FAX.ARPA reveals that these hosts were set by hand\n\
    \      accidently one day late (-86400 seconds), but otherwise close to\n    \
    \  the correct time-of-day.  Since the ICMP time rolls over at 2400\n      UT,\
    \ the ICMP offset was within nominals.  No explanation is\n      available for\
    \ the obviously defective UDP and ICMP times indicated\n      by NETWOLF.ARPA,\
    \ although it was operating within nominals at\n      least in the first experiment.\n"
