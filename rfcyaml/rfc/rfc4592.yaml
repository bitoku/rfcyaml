- contents:
  - "                         The Role of Wildcards\n                       in the
    Domain Name System\n"
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This is an update to the wildcard definition of RFC 1034.  The\n
    \  interaction with wildcards and CNAME is changed, an error condition\n   is
    removed, and the words defining some concepts central to wildcards\n   are changed.
    \ The overall goal is not to change wildcards, but to\n   refine the definition
    of RFC 1034.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \     1.1. Motivation .................................................3\n      1.2.
    The Original Definition ....................................3\n      1.3. Roadmap
    to This Document ...................................4\n           1.3.1. New Terms
    ...........................................5\n           1.3.2. Changed Text ........................................5\n
    \          1.3.3. Considerations with Special Types ...................5\n      1.4.
    Standards Terminology ......................................6\n   2. Wildcard
    Syntax .................................................6\n      2.1. Identifying
    a Wildcard .....................................6\n           2.1.1. Wildcard
    Domain Name and Asterisk Label .............6\n           2.1.2. Asterisks and
    Other Characters ......................7\n           2.1.3. Non-terminal Wildcard
    Domain Names ..................7\n      2.2. Existence Rules ............................................7\n
    \          2.2.1. An Example ..........................................8\n           2.2.2.
    Empty Non-terminals .................................9\n           2.2.3. Yet
    Another Definition of Existence ................10\n      2.3. When Is a Wildcard
    Domain Name Not Special? ...............10\n   3. Impact of a Wildcard Domain
    Name on a Response .................10\n      3.1. Step 2 ....................................................11\n
    \     3.2. Step 3 ....................................................11\n      3.3.
    Part 'c' ..................................................12\n           3.3.1.
    Closest Encloser and the Source of Synthesis .......12\n           3.3.2. Closest
    Encloser and Source of Synthesis Examples ..13\n           3.3.3. Type Matching
    ......................................13\n   4. Considerations with Special Types
    ..............................14\n      4.1. SOA RRSet at a Wildcard Domain Name
    .......................14\n      4.2. NS RRSet at a Wildcard Domain Name ........................14\n
    \          4.2.1. Discarded Notions ..................................15\n      4.3.
    CNAME RRSet at a Wildcard Domain Name .....................16\n      4.4. DNAME
    RRSet at a Wildcard Domain Name .....................16\n      4.5. SRV RRSet
    at a Wildcard Domain Name .......................17\n      4.6. DS RRSet at a
    Wildcard Domain Name ........................17\n      4.7. NSEC RRSet at a Wildcard
    Domain Name ......................18\n      4.8. RRSIG at a Wildcard Domain Name
    ...........................18\n      4.9. Empty Non-terminal Wildcard Domain Name
    ...................18\n   5. Security Considerations ........................................18\n
    \  6. References .....................................................18\n      6.1.
    Normative References ......................................18\n      6.2. Informative
    References ....................................19\n   7. Others Contributing to
    the Document ............................19\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   In RFC 1034 [RFC1034], sections 4.3.2 and 4.3.3 describe
    the\n   synthesis of answers from special resource records (RRs) called\n   wildcards.
    \ The definition in RFC 1034 is incomplete and has proven\n   to be confusing.
    \ This document describes the wildcard synthesis by\n   adding to the discussion
    and making limited modifications.\n   Modifications are made to close inconsistencies
    that have led to\n   interoperability issues.  This description does not expand
    the\n   service intended by the original definition.\n   Staying within the spirit
    and style of the original documents, this\n   document avoids specifying rules
    for DNS implementations regarding\n   wildcards.  The intention is to only describe
    what is needed for\n   interoperability, not restrict implementation choices.
    \ In addition,\n   consideration is given to minimize any backward-compatibility
    issues\n   with implementations that comply with RFC 1034's definition.\n   This
    document is focused on the concept of wildcards as defined in\n   RFC 1034.  Nothing
    is implied regarding alternative means of\n   synthesizing resource record sets
    (RRSets), nor are alternatives\n   discussed.\n"
  - contents:
    - "1.1.  Motivation\n   Many DNS implementations diverge, in different ways, from
      the\n   original definition of wildcards.  Although there is clearly a need\n
      \  to clarify the original documents in light of this alone, the impetus\n   for
      this document lay in the engineering of the DNS security\n   extensions [RFC4033].
      \ With an unclear definition of wildcards, the\n   design of authenticated denial
      became entangled.\n   This document is intended to limit its changes, documenting
      only\n   those deemed necessary based on implementation experience, and to\n
      \  remain as close to the original document as possible.  To reinforce\n   that
      this document is meant to clarify and adjust and not redefine\n   wildcards,
      relevant sections of RFC 1034 are repeated verbatim to\n   facilitate comparison
      of the old and new text.\n"
    title: 1.1.  Motivation
  - contents:
    - "1.2.  The Original Definition\n   The definition of the wildcard concept is
      comprised by the\n   documentation of the algorithm by which a name server prepares
      a\n   response (in RFC 1034's section 4.3.2) and the way in which a\n   resource
      record (set) is identified as being a source of synthetic\n   data (section
      4.3.3).\n   This is the definition of the term \"wildcard\" as it appears in
      RFC\n   1034, section 4.3.3.\n   # In the previous algorithm, special treatment
      was given to RRs with\n   # owner names starting with the label \"*\".  Such
      RRs are called\n   # wildcards. Wildcard RRs can be thought of as instructions
      for\n   # synthesizing RRs.  When the appropriate conditions are met, the\n
      \  # name server creates RRs with an owner name equal to the query name\n   #
      and contents taken from the wildcard RRs.\n   This passage follows the algorithm
      in which the term wildcard is\n   first used.  In this definition, wildcard
      refers to resource records.\n   In other usage, wildcard has referred to domain
      names, and it has\n   been used to describe the operational practice of relying
      on\n   wildcards to generate answers.  It is clear from this that there is a\n
      \  need to define clear and unambiguous terminology in the process of\n   discussing
      wildcards.\n   The mention of the use of wildcards in the preparation of a response\n
      \  is contained in step 3, part 'c' of RFC 1034's section 4.3.2,\n   entitled
      \"Algorithm\".  Note that \"wildcard\" does not appear in the\n   algorithm,
      instead references are made to the \"*\" label.  The portion\n   of the algorithm
      relating to wildcards is deconstructed in detail in\n   section 3 of this document;
      this is the beginning of the relevant\n   portion of the \"Algorithm\".\n   #
      \   c. If at some label, a match is impossible (i.e., the\n   #       corresponding
      label does not exist), look to see if [...]\n   #       the \"*\" label exists.\n
      \  The scope of this document is the RFC 1034 definition of wildcards\n   and
      the implications of updates to those documents, such as DNS\n   Security (DNSSEC).
      \ Alternate schemes for synthesizing answers are\n   not considered.  (Note
      that there is no reference listed.  No\n   document is known to describe any
      alternate schemes, although there\n   has been some mention of them in mailing
      lists.)\n"
    title: 1.2.  The Original Definition
  - contents:
    - "1.3.  Roadmap to This Document\n   This document accomplishes these three tasks.\n
      \  o Defines new terms\n   o Makes minor changes to avoid conflicting concepts\n
      \  o Describes the actions of certain resource records as wildcards\n"
    - contents:
      - "1.3.1.  New Terms\n   To help in discussing what resource records are wildcards,
        two terms\n   will be defined: \"asterisk label\" and \"wildcard domain name\".
        \ These\n   are defined in section 2.1.1.\n   To assist in clarifying the
        role of wildcards in the name server\n   algorithm in RFC 1034, section 4.3.2,
        \"source of synthesis\" and\n   \"closest encloser\" are defined.  These definitions
        are in section\n   3.3.1.  \"Label match\" is defined in section 3.2.\n   The
        new terms are used to make discussions of wildcards clearer.\n   Terminology
        does not directly have an impact on implementations.\n"
      title: 1.3.1.  New Terms
    - contents:
      - "1.3.2.  Changed Text\n   The definition of \"existence\" is changed superficially.
        \ This change\n   will not be apparent to implementations; it is needed to
        make\n   descriptions more precise.  The change appears in section 2.2.3.\n
        \  RFC 1034, section 4.3.3, seems to prohibit having two asterisk labels\n
        \  in a wildcard owner name.  With this document, the restriction is\n   removed
        entirely.  This change and its implications are in section\n   2.1.3.\n   The
        actions when a source of synthesis owns a CNAME RR are changed to\n   mirror
        the actions if an exact match name owns a CNAME RR.  This is\n   an addition
        to the words in RFC 1034, section 4.3.2, step 3, part\n   'c'.  The discussion
        of this is in section 3.3.3.\n   Only the latter change represents an impact
        to implementations.  The\n   definition of existence is not a protocol impact.
        \ The change to the\n   restriction on names is unlikely to have an impact,
        as RFC 1034\n   contained no specification on when and how to enforce the\n
        \  restriction.\n"
      title: 1.3.2.  Changed Text
    - contents:
      - "1.3.3.  Considerations with Special Types\n   This document describes semantics
        of wildcard RRSets for\n   \"interesting\" types as well as empty non-terminal
        wildcards.\n   Understanding these situations in the context of wildcards
        has been\n   clouded because these types incur special processing if they
        are the\n   result of an exact match.  This discussion is in section 4.\n
        \  These discussions do not have an implementation impact; they cover\n   existing
        knowledge of the types, but to a greater level of detail.\n"
      title: 1.3.3.  Considerations with Special Types
    title: 1.3.  Roadmap to This Document
  - contents:
    - "1.4.  Standards Terminology\n   This document does not use terms as defined
      in \"Key words for use in\n   RFCs to Indicate Requirement Levels\" [RFC2119].\n
      \  Quotations of RFC 1034 are denoted by a '#' at the start of the line.\n   References
      to section \"4.3.2\" are assumed to refer to RFC 1034's\n   section 4.3.2, simply
      titled \"Algorithm\".\n"
    title: 1.4.  Standards Terminology
  title: 1.  Introduction
- contents:
  - "2.  Wildcard Syntax\n   The syntax of a wildcard is the same as any other DNS
    resource\n   record, across all classes and types.  The only significant feature\n
    \  is the owner name.\n   Because wildcards are encoded as resource records with
    special names,\n   they are included in zone transfers and incremental zone transfers\n
    \  [RFC1995] just as non-wildcard resource records are.  This feature\n   has
    been under appreciated until discussions on alternative\n   approaches to wildcards
    appeared on mailing lists.\n"
  - contents:
    - "2.1.  Identifying a Wildcard\n   To provide a more accurate description of
      wildcards, the definition\n   has to start with a discussion of the domain names
      that appear as\n   owners.  Two new terms are needed, \"asterisk label\" and
      \"wildcard\n   domain name\".\n"
    - contents:
      - "2.1.1.  Wildcard Domain Name and Asterisk Label\n   A \"wildcard domain name\"
        is defined by having its initial (i.e.,\n   leftmost or least significant)
        label be, in binary format:\n      0000 0001 0010 1010 (binary) = 0x01 0x2a
        (hexadecimal)\n   The first octet is the normal label type and length for
        a 1-octet-\n   long label, and the second octet is the ASCII representation
        [RFC20]\n   for the '*' character.\n   A descriptive name of a label equaling
        that value is an \"asterisk\n   label\".\n   RFC 1034's definition of wildcard
        would be \"a resource record owned\n   by a wildcard domain name\".\n"
      title: 2.1.1.  Wildcard Domain Name and Asterisk Label
    - contents:
      - "2.1.2.  Asterisks and Other Characters\n   No label values other than that
        in section 2.1.1 are asterisk labels,\n   hence names beginning with other
        labels are never wildcard domain\n   names.  Labels such as 'the*' and '**'
        are not asterisk labels, so\n   these labels do not start wildcard domain
        names.\n"
      title: 2.1.2.  Asterisks and Other Characters
    - contents:
      - "2.1.3.  Non-terminal Wildcard Domain Names\n   In section 4.3.3, the following
        is stated:\n   # ..........................  The owner name of the wildcard
        RRs is\n   # of the form \"*.<anydomain>\", where <anydomain> is any domain
        name.\n   # <anydomain> should not contain other * labels......................\n
        \  The restriction is now removed.  The original documentation of it is\n
        \  incomplete and the restriction does not serve any purpose given years\n
        \  of operational experience.\n   There are three possible reasons for putting
        the restriction in\n   place, but none of the three has held up over time.
        \ One is that the\n   restriction meant that there would never be subdomains
        of wildcard\n   domain names, but the restriction as stated still permits\n
        \  \"example.*.example.\" for instance.  Another is that wildcard domain\n
        \  names are not intended to be empty non-terminals, but this situation\n
        \  does not disrupt the algorithm in 4.3.2.  Finally, \"nested\" wildcard\n
        \  domain names are not ambiguous once the concept of the closest\n   encloser
        had been documented.\n   A wildcard domain name can have subdomains.  There
        is no need to\n   inspect the subdomains to see if there is another asterisk
        label in\n   any subdomain.\n   A wildcard domain name can be an empty non-terminal.
        \ (See the\n   upcoming sections on empty non-terminals.)  In this case, any
        lookup\n   encountering it will terminate as would any empty non-terminal
        match.\n"
      title: 2.1.3.  Non-terminal Wildcard Domain Names
    title: 2.1.  Identifying a Wildcard
  - contents:
    - "2.2.  Existence Rules\n   The notion that a domain name 'exists' is mentioned
      in the definition\n   of wildcards.  In section 4.3.3 of RFC 1034:\n   # Wildcard
      RRs do not apply:\n   #\n   ...\n   #   - When the query name or a name between
      the wildcard domain and\n   #     the query name is know[n] to exist. . . .\n
      \  \"Existence\" is therefore an important concept in the understanding of\n
      \  wildcards.  Unfortunately, the definition of what exists, in RFC\n   1034,
      is unclear.  So, in sections 2.2.2. and 2.2.3, another look is\n   taken at
      the definition of existence.\n"
    - contents:
      - "2.2.1.  An Example\n   To illustrate what is meant by existence consider
        this complete zone:\n      $ORIGIN example.\n      example.                 3600
        IN  SOA   <SOA RDATA>\n      example.                 3600     NS    ns.example.com.\n
        \     example.                 3600     NS    ns.example.net.\n      *.example.
        \              3600     TXT   \"this is a wildcard\"\n      *.example.               3600
        \    MX    10 host1.example.\n      sub.*.example.           3600     TXT
        \  \"this is not a wildcard\"\n      host1.example.           3600     A     192.0.2.1\n
        \     _ssh._tcp.host1.example. 3600     SRV   <SRV RDATA>\n      _ssh._tcp.host2.example.
        3600     SRV   <SRV RDATA>\n      subdel.example.          3600     NS    ns.example.com.\n
        \     subdel.example.          3600     NS    ns.example.net.\n   A look at
        the domain names in a tree structure is helpful:\n                                  |\n
        \                 -------------example------------\n                 /           /
        \        \\          \\\n                /           /           \\          \\\n
        \              /           /             \\          \\\n              *          host1
        \         host2      subdel\n              |            |             |\n
        \             |            |             |\n             sub         _tcp
        \         _tcp\n                           |             |\n                           |
        \            |\n                         _ssh          _ssh\n   The following
        responses would be synthesized from one of the\n   wildcards in the zone:\n
        \     QNAME=host3.example. QTYPE=MX, QCLASS=IN\n           the answer will
        be a \"host3.example. IN MX ...\"\n      QNAME=host3.example. QTYPE=A, QCLASS=IN\n
        \          the answer will reflect \"no error, but no data\"\n           because
        there is no A RR set at '*.example.'\n      QNAME=foo.bar.example. QTYPE=TXT,
        QCLASS=IN\n           the answer will be \"foo.bar.example. IN TXT ...\"\n
        \          because bar.example. does not exist, but the wildcard\n           does.\n
        \  The following responses would not be synthesized from any of the\n   wildcards
        in the zone:\n      QNAME=host1.example., QTYPE=MX, QCLASS=IN\n           because
        host1.example. exists\n      QNAME=sub.*.example., QTYPE=MX, QCLASS=IN\n           because
        sub.*.example. exists\n      QNAME=_telnet._tcp.host1.example., QTYPE=SRV,
        QCLASS=IN\n           because _tcp.host1.example. exists (without data)\n
        \     QNAME=host.subdel.example., QTYPE=A, QCLASS=IN\n           because subdel.example.
        exists (and is a zone cut)\n      QNAME=ghost.*.example., QTYPE=MX, QCLASS=IN\n
        \          because *.example. exists\n   The final example highlights one
        common misconception about\n   wildcards.  A wildcard \"blocks itself\" in
        the sense that a wildcard\n   does not match its own subdomains.  That is,
        \"*.example.\"  does not\n   match all names in the \"example.\" zone; it
        fails to match the names\n   below \"*.example.\". To cover names under \"*.example.\",
        another\n   wildcard domain name is needed--\"*.*.example.\"--which covers
        all but\n   its own subdomains.\n"
      title: 2.2.1.  An Example
    - contents:
      - "2.2.2.  Empty Non-terminals\n   Empty non-terminals [RFC2136, section 7.16]
        are domain names that own\n   no resource records but have subdomains that
        do.  In section 2.2.1,\n   \"_tcp.host1.example.\" is an example of an empty
        non-terminal name.\n   Empty non-terminals are introduced by this text in
        section 3.1 of RFC\n   1034:\n   # The domain name space is a tree structure.
        \ Each node and leaf on\n   # the tree corresponds to a resource set (which
        may be empty).  The\n   # domain system makes no distinctions between the
        uses of the\n   # interior nodes and leaves, and this memo uses the term \"node\"
        to\n   # refer to both.\n   The parenthesized \"which may be empty\" specifies
        that empty non-\n   terminals are explicitly recognized and that empty non-terminals\n
        \  \"exist\".\n   Pedantically reading the above paragraph can lead to an\n
        \  interpretation that all possible domains exist--up to the suggested\n   limit
        of 255 octets for a domain name [RFC1035].  For example,\n   www.example.
        may have an A RR, and as far as is practically\n   concerned, is a leaf of
        the domain tree.  But the definition can be\n   taken to mean that sub.www.example.
        also exists, albeit with no data.\n   By extension, all possible domains exist,
        from the root on down.\n   As RFC 1034 also defines \"an authoritative name
        error indicating that\n   the name does not exist\" in section 4.3.1, so this
        apparently is not\n   the intent of the original definition, justifying the
        need for an\n   updated definition in the next section.\n"
      title: 2.2.2.  Empty Non-terminals
    - contents:
      - "2.2.3.  Yet Another Definition of Existence\n   RFC 1034's wording is fixed
        by the following paragraph:\n   The domain name space is a tree structure.
        \ Nodes in the tree either\n   own at least one RRSet and/or have descendants
        that collectively own\n   at least one RRSet.  A node may exist with no RRSets
        only if it has\n   descendants that do; this node is an empty non-terminal.\n
        \  A node with no descendants is a leaf node.  Empty leaf nodes do not\n   exist.\n
        \  Note that at a zone boundary, the domain name owns data, including\n   the
        NS RR set.  In the delegating zone, the NS RR set is not\n   authoritative,
        but that is of no consequence here.  The domain name\n   owns data; therefore,
        it exists.\n"
      title: 2.2.3.  Yet Another Definition of Existence
    title: 2.2.  Existence Rules
  - contents:
    - "2.3.  When Is a Wildcard Domain Name Not Special?\n   When a wildcard domain
      name appears in a message's query section, no\n   special processing occurs.
      \ An asterisk label in a query name only\n   matches a single, corresponding
      asterisk label in the existing zone\n   tree when the 4.3.2 algorithm is being
      followed.\n   When a wildcard domain name appears in the resource data of a
      record,\n   no special processing occurs.  An asterisk label in that context\n
      \  literally means just an asterisk.\n"
    title: 2.3.  When Is a Wildcard Domain Name Not Special?
  title: 2.  Wildcard Syntax
- contents:
  - "3.  Impact of a Wildcard Domain Name on a Response\n   RFC 1034's description
    of how wildcards impact response generation is\n   in its section 4.3.2.  That
    passage contains the algorithm followed\n   by a server in constructing a response.
    \ Within that algorithm, step\n   3, part 'c' defines the behavior of the wildcard.\n
    \  The algorithm in section 4.3.2 is not intended to be pseudo-code;\n   that
    is, its steps are not intended to be followed in strict order.\n   The \"algorithm\"
    is a suggested means of implementing the\n   requirements.  As such, in step 3,
    parts 'a', 'b', and 'c' do not\n   have to be implemented in that order, provided
    that the result of the\n   implemented code is compliant with the protocol's specification.\n"
  - contents:
    - "3.1.  Step 2\n   Step 2 of section 4.3.2 reads:\n   #   2. Search the available
      zones for the zone which is the nearest\n   #      ancestor to QNAME.  If such
      a zone is found, go to step 3,\n   #      otherwise step 4.\n   In this step,
      the most appropriate zone for the response is chosen.\n   The significance of
      this step is that it means all of step 3 is being\n   performed within one zone.
      \ This has significance when considering\n   whether or not an SOA RR can ever
      be used for synthesis.\n"
    title: 3.1.  Step 2
  - contents:
    - "3.2.  Step 3\n   Step 3 is dominated by three parts, labeled 'a', 'b', and
      'c'.  But\n   the beginning of the step is important and needs explanation.\n
      \  #   3. Start matching down, label by label, in the zone.  The\n   #      matching
      process can terminate several ways:\n   The word 'matching' refers to label
      matching.  The concept is based\n   in the view of the zone as the tree of existing
      names.  The query\n   name is considered to be an ordered sequence of labels--as
      if the\n   name were a path from the root to the owner of the desired data\n
      \  (which it is--3rd paragraph of RFC 1034, section 3.1).\n   The process of
      label matching a query name ends in exactly one of\n   three choices, the parts
      'a', 'b', and 'c'.  Either the name is\n   found, the name is below a cut point,
      or the name is not found.\n   Once one of the parts is chosen, the other parts
      are not considered\n   (e.g., do not execute part 'c' and then change the execution
      path to\n   finish in part 'b').  The process of label matching is also done\n
      \  independent of the query type (QTYPE).\n   Parts 'a' and 'b' are not an issue
      for this clarification as they do\n   not relate to record synthesis.  Part
      'a' is an exact match that\n   results in an answer; part 'b' is a referral.\n"
    title: 3.2.  Step 3
  - contents:
    - "3.3.  Part 'c'\n   The context of part 'c' is that the process of label matching
      the\n   labels of the query name has resulted in a situation in which there\n
      \  is no corresponding label in the tree.  It is as if the lookup has\n   \"fallen
      off the tree\".\n   #     c. If at some label, a match is impossible (i.e.,
      the\n   #        corresponding label does not exist), look to see if [...]\n
      \  #        the \"*\" label exists.\n   To help describe the process of looking
      'to see if [...] the \"*\"\n   label exists' a term has been coined to describe
      the last domain\n   (node) matched.  The term is \"closest encloser\".\n"
    - contents:
      - "3.3.1.  Closest Encloser and the Source of Synthesis\n   The closest encloser
        is the node in the zone's tree of existing\n   domain names that has the most
        labels matching the query name\n   (consecutively, counting from the root
        label downward).  Each match\n   is a \"label match\" and the order of the
        labels is the same.\n   The closest encloser is, by definition, an existing
        name in the zone.\n   The closest encloser might be an empty non-terminal
        or even be a\n   wildcard domain name itself.  In no circumstances is the
        closest\n   encloser to be used to synthesize records for the current query.\n
        \  The source of synthesis is defined in the context of a query process\n
        \  as that wildcard domain name immediately descending from the closest\n
        \  encloser, provided that this wildcard domain name exists.\n   \"Immediately
        descending\" means that the source of synthesis has a\n   name of the form:\n
        \     <asterisk label>.<closest encloser>.\n   A source of synthesis does
        not guarantee having a RRSet to use for\n   synthesis.  The source of synthesis
        could be an empty non-terminal.\n   If the source of synthesis does not exist
        (not on the domain tree),\n   there will be no wildcard synthesis.  There
        is no search for an\n   alternate.\n   The important concept is that for any
        given lookup process, there is\n   at most one place at which wildcard synthetic
        records can be\n   obtained.  If the source of synthesis does not exist, the
        lookup\n   terminates, and the lookup does not look for other wildcard records.\n"
      title: 3.3.1.  Closest Encloser and the Source of Synthesis
    - contents:
      - "3.3.2.  Closest Encloser and Source of Synthesis Examples\n   To illustrate,
        using the example zone in section 2.2.1 of this\n   document, the following
        chart shows QNAMEs and the closest enclosers.\n     QNAME                       Closest
        Encloser    Source of Synthesis\n     host3.example.              example.
        \           *.example.\n     _telnet._tcp.host1.example. _tcp.host1.example.
        no source\n     _dns._udp.host2.example.    host2.example.      no source\n
        \    _telnet._tcp.host3.example. example.            *.example.\n     _chat._udp.host3.example.
        \  example.            *.example.\n     foobar.*.example.           *.example.
        \         no source\n"
      title: 3.3.2.  Closest Encloser and Source of Synthesis Examples
    - contents:
      - "3.3.3.  Type Matching\n   RFC 1034 concludes part 'c' with this:\n   #            If
        the \"*\" label does not exist, check whether the name\n   #            we
        are looking for is the original QNAME in the query\n   #            or a name
        we have followed due to a CNAME.  If the name\n   #            is original,
        set an authoritative name error in the\n   #            response and exit.
        \ Otherwise just exit.\n   #\n   #            If the \"*\" label does exist,
        match RRs at that node\n   #            against QTYPE.  If any match, copy
        them into the answer\n   #            section, but set the owner of the RR
        to be QNAME, and\n   #            not the node with the \"*\" label.  Go to
        step 6.\n   The final paragraph covers the role of the QTYPE in the lookup\n
        \  process.\n   Based on implementation feedback and similarities between
        part 'a'\n   and part 'c', a change to this passage has been made.\n   The
        change is to add the following text to part 'c' prior to the\n   instructions
        to \"go to step 6\":\n      If the data at the source of synthesis is a CNAME,
        and QTYPE\n      doesn't match CNAME, copy the CNAME RR into the answer section
        of\n      the response changing the owner name to the QNAME, change QNAME
        to\n      the canonical name in the CNAME RR, and go back to step 1.\n   This
        is essentially the same text in part 'a' covering the processing\n   of CNAME
        RRSets.\n"
      title: 3.3.3.  Type Matching
    title: 3.3.  Part 'c'
  title: 3.  Impact of a Wildcard Domain Name on a Response
- contents:
  - "4.  Considerations with Special Types\n   Sections 2 and 3 of this document discuss
    wildcard synthesis with\n   respect to names in the domain tree and ignore the
    impact of types.\n   In this section, the implication of wildcards of specific
    types is\n   discussed.  The types covered are those that have proven to be the\n
    \  most difficult to understand.  The types are SOA, NS, CNAME, DNAME,\n   SRV,
    DS, NSEC, RRSIG, and \"none\", that is, empty non-terminal\n   wildcard domain
    names.\n"
  - contents:
    - "4.1.  SOA RRSet at a Wildcard Domain Name\n   A wildcard domain name owning
      an SOA RRSet means that the domain is\n   at the root of the zone (apex).  The
      domain cannot be a source of\n   synthesis because that is, by definition, a
      descendant node (of the\n   closest encloser) and a zone apex is at the top
      of the zone.\n   Although a wildcard domain name owning an SOA RRSet can never
      be a\n   source of synthesis, there is no reason to forbid the ownership of
      an\n   SOA RRSet.\n   For example, given this zone:\n      $ORIGIN *.example.\n
      \     @                 3600 IN  SOA   <SOA RDATA>\n                        3600
      \    NS    ns1.example.com.\n                        3600     NS    ns1.example.net.\n
      \     www               3600     TXT   \"the www txt record\"\n   A query for
      www.*.example.'s TXT record would still find the \"the www\n   txt record\"
      answer.  The asterisk label only becomes significant when\n   section 4.3.2,
      step 3, part 'c' is in effect.\n   Of course, there would need to be a delegation
      in the parent zone,\n   \"example.\" for this to work too.  This is covered
      in the next\n   section.\n"
    title: 4.1.  SOA RRSet at a Wildcard Domain Name
  - contents:
    - "4.2.  NS RRSet at a Wildcard Domain Name\n   With the definition of DNSSEC
      [RFC4033, RFC4034, RFC4035] now in\n   place, the semantics of a wildcard domain
      name owning an NS RRSet has\n   come to be poorly defined.  The dilemma relates
      to a conflict between\n   the rules for synthesis in part 'c' and the fact that
      the resulting\n   synthesis generates a record for which the zone is not authoritative.\n
      \  In a DNSSEC signed zone, the mechanics of signature management\n   (generation
      and inclusion in a message) have become unclear.\n   Salient points of the working
      group discussion on this topic are\n   summarized in section 4.2.1.\n   As a
      result of these discussions, there is no definition given for\n   wildcard domain
      names owning an NS RRSet.  The semantics are left\n   undefined until there
      is a clear need to have a set defined, and\n   until there is a clear direction
      to proceed.  Operationally,\n   inclusion of wildcard NS RRSets in a zone is
      discouraged, but not\n   barred.\n"
    - contents:
      - "4.2.1.  Discarded Notions\n   Prior to DNSSEC, a wildcard domain name owning
        a NS RRSet appeared to\n   be workable, and there are some instances in which
        it is found in\n   deployments using implementations that support this.  Continuing
        to\n   allow this in the specification is not tenable with DNSSEC.  The\n
        \  reason is that the synthesis of the NS RRSet is being done in a zone\n
        \  that has delegated away the responsibility for the name.  This\n   \"unauthorized\"
        synthesis is not a problem for the base DNS protocol,\n   but DNSSEC in affirming
        the authorization model for DNS exposes the\n   problem.\n   Outright banning
        of wildcards of type NS is also untenable as the DNS\n   protocol does not
        define how to handle \"illegal\" data.\n   Implementations may choose not
        to load a zone, but there is no\n   protocol definition.  The lack of the
        definition is complicated by\n   having to cover dynamic update [RFC2136]
        and zone transfers, as well\n   as loading at the master server.  The case
        of a client (resolver,\n   caching server) getting a wildcard of type NS in
        a reply would also\n   have to be considered.\n   Given the daunting challenge
        of a complete definition of how to ban\n   such records, dealing with existing
        implementations that permit the\n   records today is a further complication.
        \ There are uses of wildcard\n   domain name owning NS RRSets.\n   One compromise
        proposed would have redefined wildcards of type NS to\n   not be used in synthesis,
        this compromise fell apart because it would\n   have required significant
        edits to the DNSSEC signing and validation\n   work.  (Again, DNSSEC catches
        unauthorized data.)\n   With no clear consensus forming on the solution to
        this dilemma, and\n   the realization that wildcards of type NS are a rarity
        in operations,\n   the best course of action is to leave this open-ended until
        \"it\n   matters\".\n"
      title: 4.2.1.  Discarded Notions
    title: 4.2.  NS RRSet at a Wildcard Domain Name
  - contents:
    - "4.3.  CNAME RRSet at a Wildcard Domain Name\n   The issue of a CNAME RRSet
      owned by a wildcard domain name has\n   prompted a suggested change to the last
      paragraph of step 3c of the\n   algorithm in 4.3.2.  The changed text appears
      in section 3.3.3 of\n   this document.\n"
    title: 4.3.  CNAME RRSet at a Wildcard Domain Name
  - contents:
    - "4.4.  DNAME RRSet at a Wildcard Domain Name\n   Ownership of a DNAME [RFC2672]
      RRSet by a wildcard domain name\n   represents a threat to the coherency of
      the DNS and is to be avoided\n   or outright rejected.  Such a DNAME RRSet represents
      non-\n   deterministic synthesis of rules fed to different caches.  As caches\n
      \  are fed the different rules (in an unpredictable manner) the caches\n   will
      cease to be coherent.  (\"As caches are fed\" refers to the\n   storage in a
      cache of records obtained in responses by recursive or\n   iterative servers.)\n
      \  For example, assume one cache, responding to a recursive request,\n   obtains
      the following record:\n         \"a.b.example. DNAME foo.bar.example.net.\"\n
      \     and another cache obtains:\n         \"b.example.  DNAME foo.bar.example.net.\"\n
      \     both generated from the record:\n         \"*.example. DNAME foo.bar.example.net.\"\n
      \      by an authoritative server.\n   The DNAME specification is not clear
      on whether DNAME records in a\n   cache are used to rewrite queries.  In some
      interpretations, the\n   rewrite occurs; in others, it does not.  Allowing for
      the occurrence\n   of rewriting, queries for \"sub.a.b.example. A\" may be rewritten
      as\n   \"sub.foo.bar.tld. A\" by the former caching server and may be\n   rewritten
      as \"sub.a.foo.bar.tld. A\" by the latter.  Coherency is\n   lost, and an operational
      nightmare ensues.\n   Another justification for a recommendation to avoid the
      use of\n   wildcard DNAME records is the observation that such a record could\n
      \  synthesize a DNAME owned by \"sub.foo.bar.example.\" and\n   \"foo.bar.example.\".
      \ There is a restriction in the DNAME definition\n   that no domain exist below
      a DNAME-owning domain; hence, the wildcard\n   DNAME is to be avoided.\n"
    title: 4.4.  DNAME RRSet at a Wildcard Domain Name
  - contents:
    - "4.5.  SRV RRSet at a Wildcard Domain Name\n   The definition of the SRV RRset
      is RFC 2782 [RFC2782].  In the\n   definition of the record, there is some confusion
      over the term\n   \"Name\".  The definition reads as follows:\n   # The format
      of the SRV RR\n   ...\n   #    _Service._Proto.Name TTL Class SRV Priority Weight
      Port Target\n   ...\n   #  Name\n   #   The domain this RR refers to.  The SRV
      RR is unique in that the\n   #   name one searches for is not this name; the
      example near the end\n   #   shows this clearly.\n   Do not confuse the definition
      \"Name\" with the owner name.  That is,\n   once removing the _Service and _Proto
      labels from the owner name of\n   the SRV RRSet, what remains could be a wildcard
      domain name but this\n   is immaterial to the SRV RRSet.\n   For example, if
      an SRV record is the following:\n      _foo._udp.*.example. 10800 IN SRV 0 1
      9 old-slow-box.example.\n   *.example is a wildcard domain name and although
      it is the Name of\n   the SRV RR, it is not the owner (domain name).  The owner
      domain name\n   is \"_foo._udp.*.example.\", which is not a wildcard domain
      name.\n   A query for the SRV RRSet of \"_foo._udp.bar.example.\" (class IN),\n
      \  will result in a match of the name \"*.example.\" (assuming there is no\n
      \  bar.example.) and not a match of the SRV record shown.  If there is\n   no
      SRV RRSet at \"*.example.\", the answer section will reflect that\n   (be empty
      or a CNAME RRset).\n   The confusion is likely based on the mixture of the specification
      of\n   the SRV RR and the description of a \"use case\".\n"
    title: 4.5.  SRV RRSet at a Wildcard Domain Name
  - contents:
    - "4.6.  DS RRSet at a Wildcard Domain Name\n   A DS RRSet owned by a wildcard
      domain name is meaningless and\n   harmless.  This statement is made in the
      context that an NS RRSet at\n   a wildcard domain name is undefined.  At a non-delegation
      point, a DS\n   RRSet has no value (no corresponding DNSKEY RRSet will be used
      in\n   DNSSEC validation).  If there is a synthesized DS RRSet, it alone\n   will
      not be very useful as it exists in the context of a delegation\n   point.\n"
    title: 4.6.  DS RRSet at a Wildcard Domain Name
  - contents:
    - "4.7.  NSEC RRSet at a Wildcard Domain Name\n   Wildcard domain names in DNSSEC
      signed zones will have an NSEC RRSet.\n   Synthesis of these records will only
      occur when the query exactly\n   matches the record.  Synthesized NSEC RRs will
      not be harmful as they\n   will never be used in negative caching or to generate
      a negative\n   response [RFC2308].\n"
    title: 4.7.  NSEC RRSet at a Wildcard Domain Name
  - contents:
    - "4.8.  RRSIG at a Wildcard Domain Name\n   RRSIG records will be present at
      a wildcard domain name in a signed\n   zone and will be synthesized along with
      data sought in a query.  The\n   fact that the owner name is synthesized is
      not a problem as the label\n   count in the RRSIG will instruct the verifying
      code to ignore it.\n"
    title: 4.8.  RRSIG at a Wildcard Domain Name
  - contents:
    - "4.9.  Empty Non-terminal Wildcard Domain Name\n   If a source of synthesis
      is an empty non-terminal, then the response\n   will be one of no error in the
      return code and no RRSet in the answer\n   section.\n"
    title: 4.9.  Empty Non-terminal Wildcard Domain Name
  title: 4.  Considerations with Special Types
- contents:
  - "5.  Security Considerations\n   This document is refining the specifications
    to make it more likely\n   that security can be added to DNS.  No functional additions
    are being\n   made, just refining what is considered proper to allow the DNS,\n
    \  security of the DNS, and extending the DNS to be more predictable.\n"
  title: 5.  Security Considerations
- contents:
  - '6.  References

    '
  - contents:
    - "6.1. Normative References\n   [RFC20]   Cerf, V., \"ASCII format for network
      interchange\", RFC 20,\n             October 1969.\n   [RFC1034] Mockapetris,
      P., \"Domain names - concepts and facilities\",\n             STD 13, RFC 1034,
      November 1987.\n   [RFC1035] Mockapetris, P., \"Domain names - implementation
      and\n             specification\", STD 13, RFC 1035, November 1987.\n   [RFC1995]
      Ohta, M., \"Incremental Zone Transfer in DNS\", RFC 1995,\n             August
      1996.\n   [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate\n             Requirement
      Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2308] Andrews, M., \"Negative
      Caching of DNS Queries (DNS\n             NCACHE)\", RFC 2308, March 1998.\n
      \  [RFC2672] Crawford, M., \"Non-Terminal DNS Name Redirection\", RFC\n             2672,
      August 1999.\n   [RFC2782] Gulbrandsen, A., Vixie, P., and L. Esibov, \"A DNS
      RR for\n             specifying the location of services (DNS SRV)\", RFC 2782,\n
      \            February 2000.\n   [RFC4033] Arends, R., Austein, R., Larson, M.,
      Massey, D., and S.\n             Rose, \"DNS Security Introduction and Requirements\",
      RFC\n             4033, March 2005.\n   [RFC4034] Arends, R., Austein, R., Larson,
      M., Massey, D., and S.\n             Rose, \"Resource Records for the DNS Security
      Extensions\",\n             RFC 4034, March 2005.\n   [RFC4035] Arends, R.,
      Austein, R., Larson, M., Massey, D., and S.\n             Rose, \"Protocol Modifications
      for the DNS Security\n             Extensions\", RFC 4035, March 2005.\n"
    title: 6.1. Normative References
  - contents:
    - "6.2.  Informative References\n   [RFC2136] Vixie, P., Thomson, S., Rekhter,
      Y., and J. Bound, \"Dynamic\n             Updates in the Domain Name System
      (DNS UPDATE)\", RFC 2136,\n             April 1997.\n"
    title: 6.2.  Informative References
  title: 6.  References
- contents:
  - "7.  Others Contributing to the Document\n   This document represents the work
    of a large working group.  The\n   editor merely recorded its collective wisdom.\n
    \  Comments on this document can be sent to the editor or the mailing\n   list
    for the DNSEXT WG, namedroppers@ops.ietf.org.\n"
  title: 7.  Others Contributing to the Document
- contents:
  - "Editor's Address\n   Edward Lewis\n   NeuStar\n   46000 Center Oak Plaza\n   Sterling,
    VA\n   20166, US\n   Phone: +1-571-434-5468\n   EMail: ed.lewis@neustar.biz\n"
  title: Editor's Address
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This
    document is subject to the rights, licenses and restrictions\n   contained in
    BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n
    \  Administrative Support Activity (IASA).\n"
  title: Acknowledgement
