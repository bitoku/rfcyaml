- title: __initial_text__
  contents:
  - "                  Examples of Protecting Content Using\n               JSON Object\
    \ Signing and Encryption (JOSE)\n"
- title: Abstract
  contents:
  - "Abstract\n   This document contains a set of examples using JSON Object Signing\n\
    \   and Encryption (JOSE) technology to protect data.  These examples\n   present\
    \ a representative sampling of JSON Web Key (JWK) objects as\n   well as various\
    \ JSON Web Signature (JWS) and JSON Web Encryption\n   (JWE) results given similar\
    \ inputs.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7520.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................5\n\
    \      1.1. Conventions Used in This Document ..........................5\n  \
    \ 2. Terminology .....................................................6\n   3.\
    \ JSON Web Key Examples ...........................................6\n      3.1.\
    \ EC Public Key ..............................................6\n      3.2. EC\
    \ Private Key .............................................7\n      3.3. RSA Public\
    \ Key .............................................8\n      3.4. RSA Private Key\
    \ ............................................8\n      3.5. Symmetric Key (MAC\
    \ Computation) ...........................10\n      3.6. Symmetric Key (Encryption)\
    \ ................................11\n   4. JSON Web Signature Examples ....................................11\n\
    \      4.1. RSA v1.5 Signature ........................................12\n  \
    \         4.1.1. Input Factors ......................................12\n    \
    \       4.1.2. Signing Operation ..................................12\n      \
    \     4.1.3. Output Results .....................................13\n      4.2.\
    \ RSA-PSS Signature .........................................15\n           4.2.1.\
    \ Input Factors ......................................15\n           4.2.2. Signing\
    \ Operation ..................................16\n           4.2.3. Output Results\
    \ .....................................17\n      4.3. ECDSA Signature ...........................................19\n\
    \           4.3.1. Input Factors ......................................19\n  \
    \         4.3.2. Signing Operation ..................................19\n    \
    \       4.3.3. Output Results .....................................20\n      4.4.\
    \ HMAC-SHA2 Integrity Protection ............................21\n           4.4.1.\
    \ Input Factors ......................................22\n           4.4.2. Signing\
    \ Operation ..................................22\n           4.4.3. Output Results\
    \ .....................................23\n      4.5. Signature with Detached\
    \ Content ...........................24\n           4.5.1. Input Factors ......................................25\n\
    \           4.5.2. Signing Operation ..................................25\n  \
    \         4.5.3. Output Results .....................................26\n    \
    \  4.6. Protecting Specific Header Fields .........................27\n      \
    \     4.6.1. Input Factors ......................................27\n        \
    \   4.6.2. Signing Operation ..................................27\n          \
    \ 4.6.3. Output Results .....................................28\n      4.7. Protecting\
    \ Content Only ...................................29\n           4.7.1. Input\
    \ Factors ......................................30\n           4.7.2. Signing\
    \ Operation ..................................30\n           4.7.3. Output Results\
    \ .....................................31\n      4.8. Multiple Signatures .......................................32\n\
    \           4.8.1. Input Factors ......................................32\n  \
    \         4.8.2. First Signing Operation ............................33\n    \
    \       4.8.3. Second Signing Operation ...........................34\n      \
    \     4.8.4. Third Signing Operation ............................36\n        \
    \   4.8.5. Output Results .....................................37\n   5. JSON\
    \ Web Encryption Examples ...................................39\n      5.1. Key\
    \ Encryption Using RSA v1.5 and AES-HMAC-SHA2 ...........39\n           5.1.1.\
    \ Input Factors ......................................39\n           5.1.2. Generated\
    \ Factors ..................................41\n           5.1.3. Encrypting the\
    \ Key .................................41\n           5.1.4. Encrypting the Content\
    \ .............................42\n           5.1.5. Output Results .....................................43\n\
    \      5.2. Key Encryption Using RSA-OAEP with AES-GCM ................45\n  \
    \         5.2.1. Input Factors ......................................46\n    \
    \       5.2.2. Generated Factors ..................................47\n      \
    \     5.2.3. Encrypting the Key .................................48\n        \
    \   5.2.4. Encrypting the Content .............................48\n          \
    \ 5.2.5. Output Results .....................................49\n      5.3. Key\
    \ Wrap Using PBES2-AES-KeyWrap with AES-CBC-HMAC-SHA2 ...52\n           5.3.1.\
    \ Input Factors ......................................53\n           5.3.2. Generated\
    \ Factors ..................................54\n           5.3.3. Encrypting the\
    \ Key .................................54\n           5.3.4. Encrypting the Content\
    \ .............................55\n           5.3.5. Output Results .....................................56\n\
    \      5.4. Key Agreement with Key Wrapping Using ECDH-ES and\n           AES-KeyWrap\
    \ with AES-GCM ..................................59\n           5.4.1. Input Factors\
    \ ......................................59\n           5.4.2. Generated Factors\
    \ ..................................60\n           5.4.3. Encrypting the Key .................................60\n\
    \           5.4.4. Encrypting the Content .............................61\n  \
    \         5.4.5. Output Results .....................................63\n    \
    \  5.5. Key Agreement Using ECDH-ES with AES-CBC-HMAC-SHA2 ........65\n      \
    \     5.5.1. Input Factors ......................................66\n        \
    \   5.5.2. Generated Factors ..................................66\n          \
    \ 5.5.3. Key Agreement ......................................67\n           5.5.4.\
    \ Encrypting the Content .............................67\n           5.5.5. Output\
    \ Results .....................................68\n      5.6. Direct Encryption\
    \ Using AES-GCM ...........................70\n           5.6.1. Input Factors\
    \ ......................................70\n           5.6.2. Generated Factors\
    \ ..................................70\n           5.6.3. Encrypting the Content\
    \ .............................71\n           5.6.4. Output Results .....................................72\n\
    \      5.7. Key Wrap Using AES-GCM KeyWrap with AES-CBC-HMAC-SHA2 .....73\n  \
    \         5.7.1. Input Factors ......................................73\n    \
    \       5.7.2. Generated Factors ..................................74\n      \
    \     5.7.3. Encrypting the Key .................................74\n        \
    \   5.7.4. Encrypting the Content .............................75\n          \
    \ 5.7.5. Output Results .....................................77\n      5.8. Key\
    \ Wrap Using AES-KeyWrap with AES-GCM ...................79\n           5.8.1.\
    \ Input Factors ......................................79\n           5.8.2. Generated\
    \ Factors ..................................80\n           5.8.3. Encrypting the\
    \ Key .................................80\n           5.8.4. Encrypting the Content\
    \ .............................80\n           5.8.5. Output Results .....................................82\n\
    \      5.9. Compressed Content ........................................84\n  \
    \         5.9.1. Input Factors ......................................84\n    \
    \       5.9.2. Generated Factors ..................................84\n      \
    \     5.9.3. Encrypting the Key .................................85\n        \
    \   5.9.4. Encrypting the Content .............................85\n          \
    \ 5.9.5. Output Results .....................................86\n      5.10. Including\
    \ Additional Authenticated Data ..................88\n           5.10.1. Input\
    \ Factors .....................................88\n           5.10.2. Generated\
    \ Factors .................................89\n           5.10.3. Encrypting the\
    \ Key ................................90\n           5.10.4. Encrypting the Content\
    \ ............................90\n           5.10.5. Output Results ....................................91\n\
    \      5.11. Protecting Specific Header Fields ........................93\n  \
    \         5.11.1. Input Factors .....................................93\n    \
    \       5.11.2. Generated Factors .................................94\n      \
    \     5.11.3. Encrypting the Key ................................94\n        \
    \   5.11.4. Encrypting the Content ............................94\n          \
    \ 5.11.5. Output Results ....................................95\n      5.12. Protecting\
    \ Content Only ..................................97\n           5.12.1. Input\
    \ Factors .....................................97\n           5.12.2. Generated\
    \ Factors .................................98\n           5.12.3. Encrypting the\
    \ Key ................................98\n           5.12.4. Encrypting the Content\
    \ ............................98\n           5.12.5. Output Results ....................................99\n\
    \      5.13. Encrypting to Multiple Recipients .......................101\n  \
    \         5.13.1. Input Factors ....................................101\n    \
    \       5.13.2. Generated Factors ................................101\n      \
    \     5.13.3. Encrypting the Key to the First Recipient ........102\n        \
    \   5.13.4. Encrypting the Key to the Second Recipient .......103\n          \
    \ 5.13.5. Encrypting the Key to the Third Recipient ........105\n           5.13.6.\
    \ Encrypting the Content ...........................106\n           5.13.7. Output\
    \ Results ...................................108\n   6. Nesting Signatures and\
    \ Encryption .............................110\n      6.1. Signing Input Factors\
    \ ....................................110\n      6.2. Signing Operation ........................................112\n\
    \      6.3. Signing Output ...........................................112\n  \
    \    6.4. Encryption Input Factors .................................113\n    \
    \  6.5. Encryption Generated Factors .............................113\n      6.6.\
    \ Encrypting the Key .......................................114\n      6.7. Encrypting\
    \ the Content ...................................114\n      6.8. Encryption Output\
    \ ........................................115\n   7. Security Considerations .......................................119\n\
    \   8. References ....................................................119\n  \
    \    8.1. Normative References .....................................119\n    \
    \  8.2. Informative References ...................................120\n   Acknowledgements\
    \ .................................................120\n   Author's Address .................................................120\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The JSON Object Signing and Encryption (JOSE) technologies\
    \ -- JSON\n   Web Signature [JWS], JSON Web Encryption [JWE], JSON Web Key [JWK],\n\
    \   and JSON Web Algorithms [JWA] -- can be used collectively to encrypt\n   and/or\
    \ sign content using a variety of algorithms.  While the full\n   set of permutations\
    \ is extremely large, and might be daunting to\n   some, it is expected that most\
    \ applications will only use a small set\n   of algorithms to meet their needs.\n\
    \   This document provides a number of examples of signing or encrypting\n   content\
    \ using JOSE.  While not exhaustive, it does compile a\n   representative sampling\
    \ of JOSE features.  As much as possible, the\n   same signature payload or encryption\
    \ plaintext content is used to\n   illustrate differences in various signing and\
    \ encryption results.\n   This document also provides a number of example JWK\
    \ objects.  These\n   examples illustrate the distinguishing properties of various\
    \ key\n   types and emphasize important characteristics.  Most of the JWK\n  \
    \ examples are then used in the signature or encryption examples that\n   follow.\n\
    \   All of the examples contained herein are available in a machine-\n   readable\
    \ format at <https://github.com/ietf-jose/cookbook>.\n"
- title: 1.1.  Conventions Used in This Document
  contents:
  - "1.1.  Conventions Used in This Document\n   This document separates data that\
    \ are expected to be input to an\n   implementation of JOSE from data that are\
    \ expected to be generated by\n   an implementation of JOSE.  Each example, wherever\
    \ possible, provides\n   enough information both to replicate the results of this\
    \ document and\n   to validate the results by running its inverse operation (e.g.,\n\
    \   signature results can be validated by performing the JWS verify).\n   However,\
    \ some algorithms inherently use random data; therefore,\n   computations employing\
    \ them cannot be exactly replicated.  Such cases\n   are explicitly stated in\
    \ the relevant sections.\n   All instances of binary octet strings are represented\
    \ using base64url\n   [RFC4648] encoding.\n   Wherever possible and unless otherwise\
    \ noted, the examples include\n   the JWS or JWE Compact Serialization, general\
    \ JWS or JWE JSON\n   Serialization, and flattened JWS or JWE JSON Serialization.\n\
    \   All of the examples in this document have whitespace added to improve\n  \
    \ formatting and readability.  Except for JWE Plaintext or JWS Payload\n   content,\
    \ whitespace is not part of the cryptographic operations nor\n   the exchange\
    \ results.\n   Unless otherwise noted, the JWE Plaintext or JWS Payload content\
    \ does\n   include \" \" (U+0020 SPACE) characters.  Line breaks (U+000A LINE\n\
    \   FEED) replace some \" \" (U+0020 SPACE) characters to improve\n   readability\
    \ but are not present in the JWE Plaintext or JWS Payload.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   This document inherits terminology regarding JSON Web Signature\
    \ (JWS)\n   technology from [JWS], terminology regarding JSON Web Encryption\n\
    \   (JWE) technology from [JWE], terminology regarding JSON Web Key (JWK)\n  \
    \ technology from [JWK], and terminology regarding algorithms from\n   [JWA].\n"
- title: 3.  JSON Web Key Examples
  contents:
  - "3.  JSON Web Key Examples\n   The following sections demonstrate how to represent\
    \ various JWK and\n   JWK Set objects.\n"
- title: 3.1.  EC Public Key
  contents:
  - "3.1.  EC Public Key\n   This example illustrates an Elliptic Curve (EC) public\
    \ key.  This\n   example is the public key corresponding to the private key in\n\
    \   Figure 2.\n   Note that whitespace is added for readability as described in\n\
    \   Section 1.1.\n   {\n     \"kty\": \"EC\",\n     \"kid\": \"bilbo.baggins@hobbiton.example\"\
    ,\n     \"use\": \"sig\",\n     \"crv\": \"P-521\",\n     \"x\": \"AHKZLLOsCOzz5cY97ewNUajB957y-C-U88c3v13nmGZx6sYl_oJXu9\n\
    \         A5RkTKqjqvjyekWF-7ytDyRXYgCF5cj0Kt\",\n     \"y\": \"AdymlHvOiLxXkEhayXQnNCvDX4h9htZaCJN34kfmC6pV5OhQHiraVy\n\
    \         SsUdaQkAgDPrwQrJmbnX9cwlGfP-HqHZR1\"\n   }\n                 Figure\
    \ 1: Elliptic Curve P-521 Public Key\n   The field \"kty\" value of \"EC\" identifies\
    \ this as an Elliptic Curve\n   key.  The field \"crv\" identifies the curve,\
    \ which is curve P-521 for\n   this example.  The values of the fields \"x\" and\
    \ \"y\" are the\n   base64url-encoded X and Y coordinates (respectively).\n  \
    \ The values of the fields \"x\" and \"y\" decoded are the octets necessary\n\
    \   to represent each full coordinate to the order of the curve.  For a\n   key\
    \ over curve P-521, the values of the fields \"x\" and \"y\" are\n   exactly 66\
    \ octets in length when decoded, padded with leading zero\n   (0x00) octets to\
    \ reach the expected length.\n"
- title: 3.2.  EC Private Key
  contents:
  - "3.2.  EC Private Key\n   This example illustrates an Elliptic Curve private key.\
    \  This example\n   is the private key corresponding to the public key in Figure\
    \ 1.\n   Note that whitespace is added for readability as described in\n   Section\
    \ 1.1.\n   {\n     \"kty\": \"EC\",\n     \"kid\": \"bilbo.baggins@hobbiton.example\"\
    ,\n     \"use\": \"sig\",\n     \"crv\": \"P-521\",\n     \"x\": \"AHKZLLOsCOzz5cY97ewNUajB957y-C-U88c3v13nmGZx6sYl_oJXu9\n\
    \         A5RkTKqjqvjyekWF-7ytDyRXYgCF5cj0Kt\",\n     \"y\": \"AdymlHvOiLxXkEhayXQnNCvDX4h9htZaCJN34kfmC6pV5OhQHiraVy\n\
    \         SsUdaQkAgDPrwQrJmbnX9cwlGfP-HqHZR1\",\n     \"d\": \"AAhRON2r9cqXX1hg-RoI6R1tX5p2rUAYdmpHZoC1XNM56KtscrX6zb\n\
    \         KipQrCW9CGZH3T4ubpnoTKLDYJ_fF3_rJt\"\n   }\n                Figure 2:\
    \ Elliptic Curve P-521 Private Key\n   The field \"kty\" value of \"EC\" identifies\
    \ this as an Elliptic Curve\n   key.  The field \"crv\" identifies the curve,\
    \ which is curve P-521\n   (also known as SECG curve secp521r1) for this example.\
    \  The values of\n   the fields \"x\" and \"y\" are the base64url-encoded X and\
    \ Y coordinates\n   (respectively).  The field \"d\" value is the base64url-encoded\
    \ private\n   key.\n   The values of the fields \"d\", \"x\", and \"y\" decoded\
    \ are the octets\n   necessary to represent the private key or each full coordinate\n\
    \   (respectively) to the order of the curve.  For a key over curve\n   P-521,\
    \ the values of the \"d\", \"x\", and \"y\" fields are each exactly 66\n   octets\
    \ in length when decoded, padded with leading zero (0x00) octets\n   to reach\
    \ the expected length.\n"
- title: 3.3.  RSA Public Key
  contents:
  - "3.3.  RSA Public Key\n   This example illustrates an RSA public key.  This example\
    \ is the\n   public key corresponding to the private key in Figure 4.\n   Note\
    \ that whitespace is added for readability as described in\n   Section 1.1.\n\
    \   {\n     \"kty\": \"RSA\",\n     \"kid\": \"bilbo.baggins@hobbiton.example\"\
    ,\n     \"use\": \"sig\",\n     \"n\": \"n4EPtAOCc9AlkeQHPzHStgAbgs7bTZLwUBZdR8_KuKPEHLd4rHVTeT\n\
    \         -O-XV2jRojdNhxJWTDvNd7nqQ0VEiZQHz_AJmSCpMaJMRBSFKrKb2wqV\n         wGU_NsYOYL-QtiWN2lbzcEe6XC0dApr5ydQLrHqkHHig3RBordaZ6Aj-\n\
    \         oBHqFEHYpPe7Tpe-OfVfHd1E6cS6M1FZcD1NNLYD5lFHpPI9bTwJlsde\n         3uhGqC0ZCuEHg8lhzwOHrtIQbS0FVbb9k3-tVTU4fg_3L_vniUFAKwuC\n\
    \         LqKnS2BYwdq_mzSnbLY7h_qixoR7jig3__kRhuaxwUkRz5iaiQkqgc5g\n         HdrNP5zw\"\
    ,\n     \"e\": \"AQAB\"\n   }\n                     Figure 3: RSA 2048-Bit Public\
    \ Key\n   The field \"kty\" value of \"RSA\" identifies this as an RSA key.  The\n\
    \   fields \"n\" and \"e\" values are the modulus and (public) exponent\n   (respectively)\
    \ using the minimum octets necessary.\n   For a 2048-bit key, the field \"n\"\
    \ value is 256 octets in length when\n   decoded.\n"
- title: 3.4.  RSA Private Key
  contents:
  - "3.4.  RSA Private Key\n   This example illustrates an RSA private key.  This\
    \ example is the\n   private key corresponding to the public key in Figure 3.\n\
    \   Note that whitespace is added for readability as described in\n   Section\
    \ 1.1.\n   {\n     \"kty\": \"RSA\",\n     \"kid\": \"bilbo.baggins@hobbiton.example\"\
    ,\n     \"use\": \"sig\",\n     \"n\": \"n4EPtAOCc9AlkeQHPzHStgAbgs7bTZLwUBZdR8_KuKPEHLd4rHVTeT\n\
    \         -O-XV2jRojdNhxJWTDvNd7nqQ0VEiZQHz_AJmSCpMaJMRBSFKrKb2wqV\n         wGU_NsYOYL-QtiWN2lbzcEe6XC0dApr5ydQLrHqkHHig3RBordaZ6Aj-\n\
    \         oBHqFEHYpPe7Tpe-OfVfHd1E6cS6M1FZcD1NNLYD5lFHpPI9bTwJlsde\n         3uhGqC0ZCuEHg8lhzwOHrtIQbS0FVbb9k3-tVTU4fg_3L_vniUFAKwuC\n\
    \         LqKnS2BYwdq_mzSnbLY7h_qixoR7jig3__kRhuaxwUkRz5iaiQkqgc5g\n         HdrNP5zw\"\
    ,\n     \"e\": \"AQAB\",\n     \"d\": \"bWUC9B-EFRIo8kpGfh0ZuyGPvMNKvYWNtB_ikiH9k20eT-O1q_I78e\n\
    \         iZkpXxXQ0UTEs2LsNRS-8uJbvQ-A1irkwMSMkK1J3XTGgdrhCku9gRld\n         Y7sNA_AKZGh-Q661_42rINLRCe8W-nZ34ui_qOfkLnK9QWDDqpaIsA-b\n\
    \         MwWWSDFu2MUBYwkHTMEzLYGqOe04noqeq1hExBTHBOBdkMXiuFhUq1BU\n         6l-DqEiWxqg82sXt2h-LMnT3046AOYJoRioz75tSUQfGCshWTBnP5uDj\n\
    \         d18kKhyv07lhfSJdrPdM5Plyl21hsFf4L_mHCuoFau7gdsPfHPxxjVOc\n         OpBrQzwQ\"\
    ,\n     \"p\": \"3Slxg_DwTXJcb6095RoXygQCAZ5RnAvZlno1yhHtnUex_fp7AZ_9nR\n    \
    \     aO7HX_-SFfGQeutao2TDjDAWU4Vupk8rw9JR0AzZ0N2fvuIAmr_WCsmG\n         peNqQnev1T7IyEsnh8UMt-n5CafhkikzhEsrmndH6LxOrvRJlsPp6Zv8\n\
    \         bUq0k\",\n     \"q\": \"uKE2dh-cTf6ERF4k4e_jy78GfPYUIaUyoSSJuBzp3Cubk3OCqs6grT\n\
    \         8bR_cu0Dm1MZwWmtdqDyI95HrUeq3MP15vMMON8lHTeZu2lmKvwqW7an\n         V5UzhM1iZ7z4yMkuUwFWoBvyY898EXvRD-hdqRxHlSqAZ192zB3pVFJ0\n\
    \         s7pFc\",\n     \"dp\": \"B8PVvXkvJrj2L-GYQ7v3y9r6Kw5g9SahXBwsWUzp19TVlgI-YV85q\n\
    \         1NIb1rxQtD-IsXXR3-TanevuRPRt5OBOdiMGQp8pbt26gljYfKU_E9xn\n         -RULHz0-ed9E9gXLKD4VGngpz-PfQ_q29pk5xWHoJp009Qf1HvChixRX\n\
    \         59ehik\",\n     \"dq\": \"CLDmDGduhylc9o7r84rEUVn7pzQ6PF83Y-iBZx5NT-TpnOZKF1pEr\n\
    \         AMVeKzFEl41DlHHqqBLSM0W1sOFbwTxYWZDm6sI6og5iTbwQGIC3gnJK\n         bi_7k_vJgGHwHxgPaX2PnvP-zyEkDERuf-ry4c_Z11Cq9AqC2yeL6kdK\n\
    \         T1cYF8\",\n     \"qi\": \"3PiqvXQN0zwMeE-sBvZgi289XP9XCQF3VWqPzMKnIgQp7_Tugo6-N\n\
    \         ZBKCQsMf3HaEGBjTVJs_jcK8-TRXvaKe-7ZMaQj8VfBdYkssbu0NKDDh\n         jJ-GtiseaDVWt7dcH0cfwxgFUHpQh7FoCrjFJ6h6ZEpMF6xmujs4qMpP\n\
    \         z8aaI4\"\n   }\n                    Figure 4: RSA 2048-Bit Private Key\n\
    \   The field \"kty\" value of \"RSA\" identifies this as an RSA key.  The\n \
    \  fields \"n\" and \"e\" values are the base64url-encoded modulus and\n   (public)\
    \ exponent (respectively) using the minimum number of octets\n   necessary.  The\
    \ field \"d\" value is the base64url-encoded private\n   exponent using the minimum\
    \ number of octets necessary.  The fields\n   \"p\", \"q\", \"dp\", \"dq\", and\
    \ \"qi\" are the base64url-encoded additional\n   private information using the\
    \ minimum number of octets necessary.\n   For a 2048-bit key, the field \"n\"\
    \ is 256 octets in length when\n   decoded, and the field \"d\" is not longer\
    \ than 256 octets in length\n   when decoded.\n"
- title: 3.5.  Symmetric Key (MAC Computation)
  contents:
  - "3.5.  Symmetric Key (MAC Computation)\n   This example illustrates a symmetric\
    \ key used for computing Message\n   Authentication Codes (MACs).\n   Note that\
    \ whitespace is added for readability as described in\n   Section 1.1.\n   {\n\
    \     \"kty\": \"oct\",\n     \"kid\": \"018c0ae5-4d9b-471b-bfd6-eef314bc7037\"\
    ,\n     \"use\": \"sig\",\n     \"alg\": \"HS256\",\n     \"k\": \"hJtXIZ2uSN5kbQfbtTNWbpdmhkV8FJG-Onbc6mxCcYg\"\
    \n   }\n                   Figure 5: HMAC SHA-256 Symmetric Key\n   The field\
    \ \"kty\" value of \"oct\" identifies this as a symmetric key.\n   The field \"\
    k\" value is the symmetric key.\n   When used for the signing algorithm \"HS256\"\
    \ (HMAC-SHA256), the field\n   \"k\" value is 32 octets (or more) in length when\
    \ decoded, padded with\n   leading zero (0x00) octets to reach the minimum expected\
    \ length.\n"
- title: 3.6.  Symmetric Key (Encryption)
  contents:
  - "3.6.  Symmetric Key (Encryption)\n   This example illustrates a symmetric key\
    \ used for encryption.\n   Note that whitespace is added for readability as described\
    \ in\n   Section 1.1.\n   {\n     \"kty\": \"oct\",\n     \"kid\": \"1e571774-2e08-40da-8308-e8d68773842d\"\
    ,\n     \"use\": \"enc\",\n     \"alg\": \"A256GCM\",\n     \"k\": \"AAPapAv4LbFbiVawEjagUBluYqN5rhna-8nuldDvOx8\"\
    \n   }\n              Figure 6: AES 256-Bit Symmetric Encryption Key\n   The field\
    \ \"kty\" value of \"oct\" identifies this as a symmetric key.\n   The field \"\
    k\" value is the symmetric key.\n   For the content encryption algorithm \"A256GCM\"\
    , the field \"k\" value\n   is exactly 32 octets in length when decoded, padded\
    \ with leading zero\n   (0x00) octets to reach the expected length.\n"
- title: 4.  JSON Web Signature Examples
  contents:
  - "4.  JSON Web Signature Examples\n   The following sections demonstrate how to\
    \ generate various JWS\n   objects.\n   All of the signature examples use the\
    \ following payload content (an\n   abridged quote from \"The Fellowship of the\
    \ Ring\" [LOTR-FELLOWSHIP]),\n   serialized as UTF-8.  The payload is presented\
    \ here as a series of\n   quoted strings that are concatenated to produce the\
    \ JWS Payload.  The\n   sequence \"\\xe2\\x80\\x99\" is substituted for (U+2019\
    \ RIGHT SINGLE\n   QUOTATION MARK), and quotation marks (U+0022 QUOTATION MARK)\
    \ are\n   added for readability but are not present in the JWS Payload.\n   \"\
    It\\xe2\\x80\\x99s a dangerous business, Frodo, going out your \"\n   \"door.\
    \ You step onto the road, and if you don't keep your feet, \"\n   \"there\\xe2\\\
    x80\\x99s no knowing where you might be swept off \"\n   \"to.\"\n           \
    \         Figure 7: Payload Content Plaintext\n   The payload -- with the sequence\
    \ \"\\xe2\\x80\\x99\" replaced with (U+2019\n   RIGHT SINGLE QUOTATION MARK) and\
    \ quotations marks (U+0022 QUOTATION\n   MARK) are removed -- is encoded as UTF-8\
    \ and then as base64url\n   [RFC4648]:\n   SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywgZ29pbmcgb3V0IH\n\
    \   lvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9hZCwgYW5kIGlmIHlvdSBk\n   b24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXigJlzIG5vIGtub3dpbmcgd2hlcm\n\
    \   UgeW91IG1pZ2h0IGJlIHN3ZXB0IG9mZiB0by4\n               Figure 8: Payload Content,\
    \ base64url-encoded\n"
- title: 4.1.  RSA v1.5 Signature
  contents:
  - "4.1.  RSA v1.5 Signature\n   This example illustrates signing content using the\
    \ \"RS256\" (RSASSA-\n   PKCS1-v1_5 with SHA-256) algorithm.\n   Note that whitespace\
    \ is added for readability as described in\n   Section 1.1.\n"
- title: 4.1.1.  Input Factors
  contents:
  - "4.1.1.  Input Factors\n   The following are supplied before beginning the signing\
    \ operation:\n   o  Payload content; this example uses the content from Figure\
    \ 7,\n      encoded using base64url [RFC4648] to produce Figure 8.\n   o  RSA\
    \ private key; this example uses the key from Figure 4.\n   o  \"alg\" parameter\
    \ of \"RS256\".\n"
- title: 4.1.2.  Signing Operation
  contents:
  - "4.1.2.  Signing Operation\n   The following is generated to complete the signing\
    \ operation:\n   o  JWS Protected Header; this example uses the header from Figure\
    \ 9,\n      encoded using base64url [RFC4648] to produce Figure 10.\n   {\n  \
    \   \"alg\": \"RS256\",\n     \"kid\": \"bilbo.baggins@hobbiton.example\"\n  \
    \ }\n                    Figure 9: JWS Protected Header JSON\n   eyJhbGciOiJSUzI1NiIsImtpZCI6ImJpbGJvLmJhZ2dpbnNAaG9iYml0b24uZX\n\
    \   hhbXBsZSJ9\n            Figure 10: JWS Protected Header, base64url-encoded\n\
    \   The JWS Protected Header (Figure 10) and JWS Payload (Figure 8) are\n   combined\
    \ as described in Section 5.1 of [JWS] to produce the JWS\n   Signing Input (Figure\
    \ 11).\n   eyJhbGciOiJSUzI1NiIsImtpZCI6ImJpbGJvLmJhZ2dpbnNAaG9iYml0b24uZX\n  \
    \ hhbXBsZSJ9\n   .\n   SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywgZ29pbmcgb3V0IH\n\
    \   lvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9hZCwgYW5kIGlmIHlvdSBk\n   b24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXigJlzIG5vIGtub3dpbmcgd2hlcm\n\
    \   UgeW91IG1pZ2h0IGJlIHN3ZXB0IG9mZiB0by4\n                       Figure 11: JWS\
    \ Signing Input\n   Performing the signature operation over the JWS Signing Input\n\
    \   (Figure 11) produces the JWS Signature (Figure 12).\n   MRjdkly7_-oTPTS3AXP41iQIGKa80A0ZmTuV5MEaHoxnW2e5CZ5NlKtainoFmK\n\
    \   ZopdHM1O2U4mwzJdQx996ivp83xuglII7PNDi84wnB-BDkoBwA78185hX-Es4J\n   IwmDLJK3lfWRa-XtL0RnltuYv746iYTh_qHRD68BNt1uSNCrUCTJDt5aAE6x8w\n\
    \   W1Kt9eRo4QPocSadnHXFxnt8Is9UzpERV0ePPQdLuW3IS_de3xyIrDaLGdjluP\n   xUAhb6L2aXic1U12podGU0KLUQSE_oI-ZnmKJ3F4uOZDnd6QZWJushZ41Axf_f\n\
    \   cIe8u9ipH84ogoree7vjbU5y18kDquDg\n                Figure 12: JWS Signature,\
    \ base64url-encoded\n"
- title: 4.1.3.  Output Results
  contents:
  - "4.1.3.  Output Results\n   The following compose the resulting JWS object:\n\
    \   o  JWS Protected Header (Figure 9)\n   o  Payload content (Figure 8)\n   o\
    \  Signature (Figure 12)\n   The resulting JWS object using the JWS Compact Serialization:\n\
    \   eyJhbGciOiJSUzI1NiIsImtpZCI6ImJpbGJvLmJhZ2dpbnNAaG9iYml0b24uZX\n   hhbXBsZSJ9\n\
    \   .\n   SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywgZ29pbmcgb3V0IH\n   lvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9hZCwgYW5kIGlmIHlvdSBk\n\
    \   b24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXigJlzIG5vIGtub3dpbmcgd2hlcm\n   UgeW91IG1pZ2h0IGJlIHN3ZXB0IG9mZiB0by4\n\
    \   .\n   MRjdkly7_-oTPTS3AXP41iQIGKa80A0ZmTuV5MEaHoxnW2e5CZ5NlKtainoFmK\n   ZopdHM1O2U4mwzJdQx996ivp83xuglII7PNDi84wnB-BDkoBwA78185hX-Es4J\n\
    \   IwmDLJK3lfWRa-XtL0RnltuYv746iYTh_qHRD68BNt1uSNCrUCTJDt5aAE6x8w\n   W1Kt9eRo4QPocSadnHXFxnt8Is9UzpERV0ePPQdLuW3IS_de3xyIrDaLGdjluP\n\
    \   xUAhb6L2aXic1U12podGU0KLUQSE_oI-ZnmKJ3F4uOZDnd6QZWJushZ41Axf_f\n   cIe8u9ipH84ogoree7vjbU5y18kDquDg\n\
    \                   Figure 13: JWS Compact Serialization\n   The resulting JWS\
    \ object using the general JWS JSON Serialization:\n   {\n     \"payload\": \"\
    SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywg\n         Z29pbmcgb3V0IHlvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9h\n\
    \         ZCwgYW5kIGlmIHlvdSBkb24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXi\n         gJlzIG5vIGtub3dpbmcgd2hlcmUgeW91IG1pZ2h0IGJlIHN3ZXB0IG9m\n\
    \         ZiB0by4\",\n     \"signatures\": [\n       {\n         \"protected\"\
    : \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImJpbGJvLmJhZ2\n             dpbnNAaG9iYml0b24uZXhhbXBsZSJ9\"\
    ,\n         \"signature\": \"MRjdkly7_-oTPTS3AXP41iQIGKa80A0ZmTuV5MEaHo\n    \
    \         xnW2e5CZ5NlKtainoFmKZopdHM1O2U4mwzJdQx996ivp83xuglII\n             7PNDi84wnB-BDkoBwA78185hX-Es4JIwmDLJK3lfWRa-XtL0Rnlt\n\
    \             uYv746iYTh_qHRD68BNt1uSNCrUCTJDt5aAE6x8wW1Kt9eRo4QPo\n         \
    \    cSadnHXFxnt8Is9UzpERV0ePPQdLuW3IS_de3xyIrDaLGdjluPxU\n             Ahb6L2aXic1U12podGU0KLUQSE_oI-ZnmKJ3F4uOZDnd6QZWJush\n\
    \             Z41Axf_fcIe8u9ipH84ogoree7vjbU5y18kDquDg\"\n       }\n     ]\n \
    \  }\n                 Figure 14: General JWS JSON Serialization\n   The resulting\
    \ JWS object using the flattened JWS JSON Serialization:\n   {\n     \"payload\"\
    : \"SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywg\n         Z29pbmcgb3V0IHlvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9h\n\
    \         ZCwgYW5kIGlmIHlvdSBkb24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXi\n         gJlzIG5vIGtub3dpbmcgd2hlcmUgeW91IG1pZ2h0IGJlIHN3ZXB0IG9m\n\
    \         ZiB0by4\",\n     \"protected\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImJpbGJvLmJhZ2dpbn\n\
    \         NAaG9iYml0b24uZXhhbXBsZSJ9\",\n     \"signature\": \"MRjdkly7_-oTPTS3AXP41iQIGKa80A0ZmTuV5MEaHoxnW2\n\
    \         e5CZ5NlKtainoFmKZopdHM1O2U4mwzJdQx996ivp83xuglII7PNDi84w\n         nB-BDkoBwA78185hX-Es4JIwmDLJK3lfWRa-XtL0RnltuYv746iYTh_q\n\
    \         HRD68BNt1uSNCrUCTJDt5aAE6x8wW1Kt9eRo4QPocSadnHXFxnt8Is9U\n         zpERV0ePPQdLuW3IS_de3xyIrDaLGdjluPxUAhb6L2aXic1U12podGU0\n\
    \         KLUQSE_oI-ZnmKJ3F4uOZDnd6QZWJushZ41Axf_fcIe8u9ipH84ogore\n         e7vjbU5y18kDquDg\"\
    \n   }\n                Figure 15: Flattened JWS JSON Serialization\n"
- title: 4.2.  RSA-PSS Signature
  contents:
  - "4.2.  RSA-PSS Signature\n   This example illustrates signing content using the\
    \ \"PS384\" (RSASSA-\n   PSS with SHA-384) algorithm.\n   Note that RSASSA-PSS\
    \ uses random data to generate the signature; it\n   might not be possible to\
    \ exactly replicate the results in this\n   section.\n   Note that whitespace\
    \ is added for readability as described in\n   Section 1.1.\n"
- title: 4.2.1.  Input Factors
  contents:
  - "4.2.1.  Input Factors\n   The following are supplied before beginning the signing\
    \ operation:\n   o  Payload content; this example uses the content from Figure\
    \ 7,\n      encoded using base64url [RFC4648] to produce Figure 8.\n   o  RSA\
    \ private key; this example uses the key from Figure 4.\n   o  \"alg\" parameter\
    \ of \"PS384\".\n"
- title: 4.2.2.  Signing Operation
  contents:
  - "4.2.2.  Signing Operation\n   The following is generated to complete the signing\
    \ operation:\n   o  JWS Protected Header; this example uses the header from Figure\
    \ 16,\n      encoded using base64url [RFC4648] to produce Figure 17.\n   {\n \
    \    \"alg\": \"PS384\",\n     \"kid\": \"bilbo.baggins@hobbiton.example\"\n \
    \  }\n                   Figure 16: JWS Protected Header JSON\n   eyJhbGciOiJQUzM4NCIsImtpZCI6ImJpbGJvLmJhZ2dpbnNAaG9iYml0b24uZX\n\
    \   hhbXBsZSJ9\n            Figure 17: JWS Protected Header, base64url-encoded\n\
    \   The JWS Protected Header (Figure 17) and JWS Payload (Figure 8) are\n   combined\
    \ as described in [JWS] to produce the JWS Signing Input\n   (Figure 18).\n  \
    \ eyJhbGciOiJQUzM4NCIsImtpZCI6ImJpbGJvLmJhZ2dpbnNAaG9iYml0b24uZX\n   hhbXBsZSJ9\n\
    \   .\n   SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywgZ29pbmcgb3V0IH\n   lvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9hZCwgYW5kIGlmIHlvdSBk\n\
    \   b24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXigJlzIG5vIGtub3dpbmcgd2hlcm\n   UgeW91IG1pZ2h0IGJlIHN3ZXB0IG9mZiB0by4\n\
    \                       Figure 18: JWS Signing Input\n   Performing the signature\
    \ operation over the JWS Signing Input\n   (Figure 18) produces the JWS Signature\
    \ (Figure 19).\n   cu22eBqkYDKgIlTpzDXGvaFfz6WGoz7fUDcfT0kkOy42miAh2qyBzk1xEsnk2I\n\
    \   pN6-tPid6VrklHkqsGqDqHCdP6O8TTB5dDDItllVo6_1OLPpcbUrhiUSMxbbXU\n   vdvWXzg-UD8biiReQFlfz28zGWVsdiNAUf8ZnyPEgVFn442ZdNqiVJRmBqrYRX\n\
    \   e8P_ijQ7p8Vdz0TTrxUeT3lm8d9shnr2lfJT8ImUjvAA2Xez2Mlp8cBE5awDzT\n   0qI0n6uiP1aCN_2_jLAeQTlqRHtfa64QQSUmFAAjVKPbByi7xho0uTOcbH510a\n\
    \   6GYmJUAfmWjwZ6oD4ifKo8DYM-X72Eaw\n                Figure 19: JWS Signature,\
    \ base64url-encoded\n"
- title: 4.2.3.  Output Results
  contents:
  - "4.2.3.  Output Results\n   The following compose the resulting JWS object:\n\
    \   o  JWS Protected Header (Figure 17)\n   o  Payload content (Figure 8)\n  \
    \ o  Signature (Figure 19)\n   The resulting JWS object using the JWS Compact\
    \ Serialization:\n   eyJhbGciOiJQUzM4NCIsImtpZCI6ImJpbGJvLmJhZ2dpbnNAaG9iYml0b24uZX\n\
    \   hhbXBsZSJ9\n   .\n   SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywgZ29pbmcgb3V0IH\n\
    \   lvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9hZCwgYW5kIGlmIHlvdSBk\n   b24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXigJlzIG5vIGtub3dpbmcgd2hlcm\n\
    \   UgeW91IG1pZ2h0IGJlIHN3ZXB0IG9mZiB0by4\n   .\n   cu22eBqkYDKgIlTpzDXGvaFfz6WGoz7fUDcfT0kkOy42miAh2qyBzk1xEsnk2I\n\
    \   pN6-tPid6VrklHkqsGqDqHCdP6O8TTB5dDDItllVo6_1OLPpcbUrhiUSMxbbXU\n   vdvWXzg-UD8biiReQFlfz28zGWVsdiNAUf8ZnyPEgVFn442ZdNqiVJRmBqrYRX\n\
    \   e8P_ijQ7p8Vdz0TTrxUeT3lm8d9shnr2lfJT8ImUjvAA2Xez2Mlp8cBE5awDzT\n   0qI0n6uiP1aCN_2_jLAeQTlqRHtfa64QQSUmFAAjVKPbByi7xho0uTOcbH510a\n\
    \   6GYmJUAfmWjwZ6oD4ifKo8DYM-X72Eaw\n                   Figure 20: JWS Compact\
    \ Serialization\n   The resulting JWS object using the general JWS JSON Serialization:\n\
    \   {\n     \"payload\": \"SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywg\n\
    \         Z29pbmcgb3V0IHlvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9h\n         ZCwgYW5kIGlmIHlvdSBkb24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXi\n\
    \         gJlzIG5vIGtub3dpbmcgd2hlcmUgeW91IG1pZ2h0IGJlIHN3ZXB0IG9m\n         ZiB0by4\"\
    ,\n     \"signatures\": [\n       {\n         \"protected\": \"eyJhbGciOiJQUzM4NCIsImtpZCI6ImJpbGJvLmJhZ2\n\
    \             dpbnNAaG9iYml0b24uZXhhbXBsZSJ9\",\n         \"signature\": \"cu22eBqkYDKgIlTpzDXGvaFfz6WGoz7fUDcfT0kkOy\n\
    \             42miAh2qyBzk1xEsnk2IpN6-tPid6VrklHkqsGqDqHCdP6O8TTB5\n         \
    \    dDDItllVo6_1OLPpcbUrhiUSMxbbXUvdvWXzg-UD8biiReQFlfz2\n             8zGWVsdiNAUf8ZnyPEgVFn442ZdNqiVJRmBqrYRXe8P_ijQ7p8Vd\n\
    \             z0TTrxUeT3lm8d9shnr2lfJT8ImUjvAA2Xez2Mlp8cBE5awDzT0q\n         \
    \    I0n6uiP1aCN_2_jLAeQTlqRHtfa64QQSUmFAAjVKPbByi7xho0uT\n             OcbH510a6GYmJUAfmWjwZ6oD4ifKo8DYM-X72Eaw\"\
    \n       }\n     ]\n   }\n                 Figure 21: General JWS JSON Serialization\n\
    \   The resulting JWS object using the flattened JWS JSON Serialization:\n   {\n\
    \     \"payload\": \"SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywg\n      \
    \   Z29pbmcgb3V0IHlvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9h\n         ZCwgYW5kIGlmIHlvdSBkb24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXi\n\
    \         gJlzIG5vIGtub3dpbmcgd2hlcmUgeW91IG1pZ2h0IGJlIHN3ZXB0IG9m\n         ZiB0by4\"\
    ,\n     \"protected\": \"eyJhbGciOiJQUzM4NCIsImtpZCI6ImJpbGJvLmJhZ2dpbn\n    \
    \     NAaG9iYml0b24uZXhhbXBsZSJ9\",\n     \"signature\": \"cu22eBqkYDKgIlTpzDXGvaFfz6WGoz7fUDcfT0kkOy42mi\n\
    \         Ah2qyBzk1xEsnk2IpN6-tPid6VrklHkqsGqDqHCdP6O8TTB5dDDItllV\n         o6_1OLPpcbUrhiUSMxbbXUvdvWXzg-UD8biiReQFlfz28zGWVsdiNAUf\n\
    \         8ZnyPEgVFn442ZdNqiVJRmBqrYRXe8P_ijQ7p8Vdz0TTrxUeT3lm8d9s\n         hnr2lfJT8ImUjvAA2Xez2Mlp8cBE5awDzT0qI0n6uiP1aCN_2_jLAeQT\n\
    \         lqRHtfa64QQSUmFAAjVKPbByi7xho0uTOcbH510a6GYmJUAfmWjwZ6oD\n         4ifKo8DYM-X72Eaw\"\
    \n   }\n                Figure 22: Flattened JWS JSON Serialization\n"
- title: 4.3.  ECDSA Signature
  contents:
  - "4.3.  ECDSA Signature\n   This example illustrates signing content using the\
    \ \"ES512\" (Elliptic\n   Curve Digital Signature Algorithm (ECDSA) with curve\
    \ P-521 and SHA-\n   512) algorithm.\n   Note that ECDSA uses random data to generate\
    \ the signature; it might\n   not be possible to exactly replicate the results\
    \ in this section.\n   Note that whitespace is added for readability as described\
    \ in\n   Section 1.1.\n"
- title: 4.3.1.  Input Factors
  contents:
  - "4.3.1.  Input Factors\n   The following are supplied before beginning the signing\
    \ operation:\n   o  Payload content; this example uses the content from Figure\
    \ 7,\n      encoded using base64url [RFC4648] to produce Figure 8.\n   o  EC private\
    \ key on the curve P-521; this example uses the key from\n      Figure 2.\n  \
    \ o  \"alg\" parameter of \"ES512\".\n"
- title: 4.3.2.  Signing Operation
  contents:
  - "4.3.2.  Signing Operation\n   The following is generated before beginning the\
    \ signature process:\n   o  JWS Protected Header; this example uses the header\
    \ from Figure 23,\n      encoded using base64url [RFC4648] to produce Figure 24.\n\
    \   {\n     \"alg\": \"ES512\",\n     \"kid\": \"bilbo.baggins@hobbiton.example\"\
    \n   }\n                   Figure 23: JWS Protected Header JSON\n   eyJhbGciOiJFUzUxMiIsImtpZCI6ImJpbGJvLmJhZ2dpbnNAaG9iYml0b24uZX\n\
    \   hhbXBsZSJ9\n            Figure 24: JWS Protected Header, base64url-encoded\n\
    \   The JWS Protected Header (Figure 24) and JWS Payload (Figure 8) are\n   combined\
    \ as described in [JWS] to produce the JWS Signing Input\n   (Figure 25).\n  \
    \ eyJhbGciOiJFUzUxMiIsImtpZCI6ImJpbGJvLmJhZ2dpbnNAaG9iYml0b24uZX\n   hhbXBsZSJ9\n\
    \   .\n   SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywgZ29pbmcgb3V0IH\n   lvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9hZCwgYW5kIGlmIHlvdSBk\n\
    \   b24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXigJlzIG5vIGtub3dpbmcgd2hlcm\n   UgeW91IG1pZ2h0IGJlIHN3ZXB0IG9mZiB0by4\n\
    \                       Figure 25: JWS Signing Input\n   Performing the signature\
    \ operation over the JWS Signing Input\n   (Figure 25) produces the JWS Signature\
    \ (Figure 26).\n   AE_R_YZCChjn4791jSQCrdPZCNYqHXCTZH0-JZGYNlaAjP2kqaluUIIUnC9qvb\n\
    \   u9Plon7KRTzoNEuT4Va2cmL1eJAQy3mtPBu_u_sDDyYjnAMDxXPn7XrT0lw-kv\n   AD890jl8e2puQens_IEKBpHABlsbEPX6sFY8OcGDqoRuBomu9xQ2\n\
    \                Figure 26: JWS Signature, base64url-encoded\n"
- title: 4.3.3.  Output Results
  contents:
  - "4.3.3.  Output Results\n   The following compose the resulting JWS object:\n\
    \   o  JWS Protected Header (Figure 24)\n   o  Payload content (Figure 8)\n  \
    \ o  Signature (Figure 26)\n   The resulting JWS object using the JWS Compact\
    \ Serialization:\n   eyJhbGciOiJFUzUxMiIsImtpZCI6ImJpbGJvLmJhZ2dpbnNAaG9iYml0b24uZX\n\
    \   hhbXBsZSJ9\n   .\n   SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywgZ29pbmcgb3V0IH\n\
    \   lvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9hZCwgYW5kIGlmIHlvdSBk\n   b24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXigJlzIG5vIGtub3dpbmcgd2hlcm\n\
    \   UgeW91IG1pZ2h0IGJlIHN3ZXB0IG9mZiB0by4\n   .\n   AE_R_YZCChjn4791jSQCrdPZCNYqHXCTZH0-JZGYNlaAjP2kqaluUIIUnC9qvb\n\
    \   u9Plon7KRTzoNEuT4Va2cmL1eJAQy3mtPBu_u_sDDyYjnAMDxXPn7XrT0lw-kv\n   AD890jl8e2puQens_IEKBpHABlsbEPX6sFY8OcGDqoRuBomu9xQ2\n\
    \                   Figure 27: JWS Compact Serialization\n   The resulting JWS\
    \ object using the general JWS JSON Serialization:\n   {\n     \"payload\": \"\
    SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywg\n         Z29pbmcgb3V0IHlvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9h\n\
    \         ZCwgYW5kIGlmIHlvdSBkb24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXi\n         gJlzIG5vIGtub3dpbmcgd2hlcmUgeW91IG1pZ2h0IGJlIHN3ZXB0IG9m\n\
    \         ZiB0by4\",\n     \"signatures\": [\n       {\n         \"protected\"\
    : \"eyJhbGciOiJFUzUxMiIsImtpZCI6ImJpbGJvLmJhZ2\n             dpbnNAaG9iYml0b24uZXhhbXBsZSJ9\"\
    ,\n         \"signature\": \"AE_R_YZCChjn4791jSQCrdPZCNYqHXCTZH0-JZGYNl\n    \
    \         aAjP2kqaluUIIUnC9qvbu9Plon7KRTzoNEuT4Va2cmL1eJAQy3mt\n             PBu_u_sDDyYjnAMDxXPn7XrT0lw-kvAD890jl8e2puQens_IEKBp\n\
    \             HABlsbEPX6sFY8OcGDqoRuBomu9xQ2\"\n       }\n     ]\n   }\n     \
    \            Figure 28: General JWS JSON Serialization\n   The resulting JWS object\
    \ using the flattened JWS JSON Serialization:\n   {\n     \"payload\": \"SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywg\n\
    \         Z29pbmcgb3V0IHlvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9h\n         ZCwgYW5kIGlmIHlvdSBkb24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXi\n\
    \         gJlzIG5vIGtub3dpbmcgd2hlcmUgeW91IG1pZ2h0IGJlIHN3ZXB0IG9m\n         ZiB0by4\"\
    ,\n     \"protected\": \"eyJhbGciOiJFUzUxMiIsImtpZCI6ImJpbGJvLmJhZ2dpbn\n    \
    \     NAaG9iYml0b24uZXhhbXBsZSJ9\",\n     \"signature\": \"AE_R_YZCChjn4791jSQCrdPZCNYqHXCTZH0-JZGYNlaAjP\n\
    \         2kqaluUIIUnC9qvbu9Plon7KRTzoNEuT4Va2cmL1eJAQy3mtPBu_u_sD\n         DyYjnAMDxXPn7XrT0lw-kvAD890jl8e2puQens_IEKBpHABlsbEPX6sF\n\
    \         Y8OcGDqoRuBomu9xQ2\"\n   }\n                Figure 29: Flattened JWS\
    \ JSON Serialization\n"
- title: 4.4.  HMAC-SHA2 Integrity Protection
  contents:
  - "4.4.  HMAC-SHA2 Integrity Protection\n   This example illustrates integrity protecting\
    \ content using the\n   \"HS256\" (HMAC-SHA-256) algorithm.\n   Note that whitespace\
    \ is added for readability as described in\n   Section 1.1.\n"
- title: 4.4.1.  Input Factors
  contents:
  - "4.4.1.  Input Factors\n   The following are supplied before beginning the signing\
    \ operation:\n   o  Payload content; this example uses the content from Figure\
    \ 7,\n      encoded using base64url [RFC4648] to produce Figure 8.\n   o  HMAC\
    \ symmetric key; this example uses the key from Figure 5.\n   o  \"alg\" parameter\
    \ of \"HS256\".\n"
- title: 4.4.2.  Signing Operation
  contents:
  - "4.4.2.  Signing Operation\n   The following is generated before completing the\
    \ signing operation:\n   o  JWS Protected Header; this example uses the header\
    \ from Figure 30,\n      encoded using base64url [RFC4648] to produce Figure 31.\n\
    \   {\n     \"alg\": \"HS256\",\n     \"kid\": \"018c0ae5-4d9b-471b-bfd6-eef314bc7037\"\
    \n   }\n                   Figure 30: JWS Protected Header JSON\n   eyJhbGciOiJIUzI1NiIsImtpZCI6IjAxOGMwYWU1LTRkOWItNDcxYi1iZmQ2LW\n\
    \   VlZjMxNGJjNzAzNyJ9\n            Figure 31: JWS Protected Header, base64url-encoded\n\
    \   The JWS Protected Header (Figure 31) and JWS Payload (Figure 8) are\n   combined\
    \ as described in [JWS] to produce the JWS Signing Input\n   (Figure 32).\n  \
    \ eyJhbGciOiJIUzI1NiIsImtpZCI6IjAxOGMwYWU1LTRkOWItNDcxYi1iZmQ2LW\n   VlZjMxNGJjNzAzNyJ9\n\
    \   .\n   SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywgZ29pbmcgb3V0IH\n   lvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9hZCwgYW5kIGlmIHlvdSBk\n\
    \   b24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXigJlzIG5vIGtub3dpbmcgd2hlcm\n   UgeW91IG1pZ2h0IGJlIHN3ZXB0IG9mZiB0by4\n\
    \                       Figure 32: JWS Signing Input\n   Performing the signature\
    \ operation over the JWS Signing Input\n   (Figure 32) produces the JWS Signature\
    \ (Figure 33).\n   s0h6KThzkfBBBkLspW1h84VsJZFTsPPqMDA7g1Md7p0\n             \
    \   Figure 33: JWS Signature, base64url-encoded\n"
- title: 4.4.3.  Output Results
  contents:
  - "4.4.3.  Output Results\n   The following compose the resulting JWS object:\n\
    \   o  JWS Protected Header (Figure 31)\n   o  Payload content (Figure 8)\n  \
    \ o  Signature (Figure 33)\n   The resulting JWS object using the JWS Compact\
    \ Serialization:\n   eyJhbGciOiJIUzI1NiIsImtpZCI6IjAxOGMwYWU1LTRkOWItNDcxYi1iZmQ2LW\n\
    \   VlZjMxNGJjNzAzNyJ9\n   .\n   SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywgZ29pbmcgb3V0IH\n\
    \   lvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9hZCwgYW5kIGlmIHlvdSBk\n   b24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXigJlzIG5vIGtub3dpbmcgd2hlcm\n\
    \   UgeW91IG1pZ2h0IGJlIHN3ZXB0IG9mZiB0by4\n   .\n   s0h6KThzkfBBBkLspW1h84VsJZFTsPPqMDA7g1Md7p0\n\
    \                   Figure 34: JWS Compact Serialization\n   The resulting JWS\
    \ object using the general JWS JSON Serialization:\n   {\n     \"payload\": \"\
    SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywg\n         Z29pbmcgb3V0IHlvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9h\n\
    \         ZCwgYW5kIGlmIHlvdSBkb24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXi\n         gJlzIG5vIGtub3dpbmcgd2hlcmUgeW91IG1pZ2h0IGJlIHN3ZXB0IG9m\n\
    \         ZiB0by4\",\n     \"signatures\": [\n       {\n         \"protected\"\
    : \"eyJhbGciOiJIUzI1NiIsImtpZCI6IjAxOGMwYWU1LT\n             RkOWItNDcxYi1iZmQ2LWVlZjMxNGJjNzAzNyJ9\"\
    ,\n         \"signature\": \"s0h6KThzkfBBBkLspW1h84VsJZFTsPPqMDA7g1Md7p\n    \
    \         0\"\n       }\n     ]\n   }\n                 Figure 35: General JWS\
    \ JSON Serialization\n   The resulting JWS object using the flattened JWS JSON\
    \ Serialization:\n   {\n     \"payload\": \"SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywg\n\
    \         Z29pbmcgb3V0IHlvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9h\n         ZCwgYW5kIGlmIHlvdSBkb24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXi\n\
    \         gJlzIG5vIGtub3dpbmcgd2hlcmUgeW91IG1pZ2h0IGJlIHN3ZXB0IG9m\n         ZiB0by4\"\
    ,\n     \"protected\": \"eyJhbGciOiJIUzI1NiIsImtpZCI6IjAxOGMwYWU1LTRkOW\n    \
    \     ItNDcxYi1iZmQ2LWVlZjMxNGJjNzAzNyJ9\",\n     \"signature\": \"s0h6KThzkfBBBkLspW1h84VsJZFTsPPqMDA7g1Md7p0\"\
    \n   }\n                Figure 36: Flattened JWS JSON Serialization\n"
- title: 4.5.  Signature with Detached Content
  contents:
  - "4.5.  Signature with Detached Content\n   This example illustrates a signature\
    \ with detached content.  This\n   example is identical to other examples in Section\
    \ 4, except the\n   resulting JWS objects do not include the JWS Payload field.\
    \  Instead,\n   the application is expected to locate it elsewhere.  For example,\
    \ the\n   signature might be in a metadata section, with the payload being the\n\
    \   content.\n   Note that whitespace is added for readability as described in\n\
    \   Section 1.1.\n"
- title: 4.5.1.  Input Factors
  contents:
  - "4.5.1.  Input Factors\n   The following are supplied before beginning the signing\
    \ operation:\n   o  Payload content; this example uses the content from Figure\
    \ 7,\n      encoded using base64url [RFC4648] to produce Figure 8.\n   o  Signing\
    \ key; this example uses the AES symmetric key from\n      Figure 5.\n   o  Signing\
    \ algorithm; this example uses \"HS256\".\n"
- title: 4.5.2.  Signing Operation
  contents:
  - "4.5.2.  Signing Operation\n   The following is generated before completing the\
    \ signing operation:\n   o  JWS Protected Header; this example uses the header\
    \ from Figure 37,\n      encoded using base64url [RFC4648] to produce Figure 38.\n\
    \   {\n     \"alg\": \"HS256\",\n     \"kid\": \"018c0ae5-4d9b-471b-bfd6-eef314bc7037\"\
    \n   }\n                   Figure 37: JWS Protected Header JSON\n   eyJhbGciOiJIUzI1NiIsImtpZCI6IjAxOGMwYWU1LTRkOWItNDcxYi1iZmQ2LW\n\
    \   VlZjMxNGJjNzAzNyJ9\n            Figure 38: JWS Protected Header, base64url-encoded\n\
    \   The JWS Protected Header (Figure 38) and JWS Payload (Figure 8) are\n   combined\
    \ as described in [JWS] to produce the JWS Signing Input\n   (Figure 39).\n  \
    \ eyJhbGciOiJIUzI1NiIsImtpZCI6IjAxOGMwYWU1LTRkOWItNDcxYi1iZmQ2LW\n   VlZjMxNGJjNzAzNyJ9\n\
    \   .\n   SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywgZ29pbmcgb3V0IH\n   lvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9hZCwgYW5kIGlmIHlvdSBk\n\
    \   b24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXigJlzIG5vIGtub3dpbmcgd2hlcm\n   UgeW91IG1pZ2h0IGJlIHN3ZXB0IG9mZiB0by4\n\
    \                       Figure 39: JWS Signing Input\n   Performing the signature\
    \ operation over the JWS Signing Input\n   (Figure 39) produces the JWS Signature\
    \ (Figure 40).\n   s0h6KThzkfBBBkLspW1h84VsJZFTsPPqMDA7g1Md7p0\n             \
    \   Figure 40: JWS Signature, base64url-encoded\n"
- title: 4.5.3.  Output Results
  contents:
  - "4.5.3.  Output Results\n   The following compose the resulting JWS object:\n\
    \   o  JWS Protected Header (Figure 38)\n   o  Signature (Figure 40)\n   The resulting\
    \ JWS object using the JWS Compact Serialization:\n   eyJhbGciOiJIUzI1NiIsImtpZCI6IjAxOGMwYWU1LTRkOWItNDcxYi1iZmQ2LW\n\
    \   VlZjMxNGJjNzAzNyJ9\n   .\n   .\n   s0h6KThzkfBBBkLspW1h84VsJZFTsPPqMDA7g1Md7p0\n\
    \                 Figure 41: General JWS JSON Serialization\n   The resulting\
    \ JWS object using the general JWS JSON Serialization:\n   {\n     \"signatures\"\
    : [\n       {\n         \"protected\": \"eyJhbGciOiJIUzI1NiIsImtpZCI6IjAxOGMwYWU1LT\n\
    \             RkOWItNDcxYi1iZmQ2LWVlZjMxNGJjNzAzNyJ9\",\n         \"signature\"\
    : \"s0h6KThzkfBBBkLspW1h84VsJZFTsPPqMDA7g1Md7p\n             0\"\n       }\n \
    \    ]\n   }\n                 Figure 42: General JWS JSON Serialization\n   The\
    \ resulting JWS object using the flattened JWS JSON Serialization:\n   {\n   \
    \  \"protected\": \"eyJhbGciOiJIUzI1NiIsImtpZCI6IjAxOGMwYWU1LTRkOW\n         ItNDcxYi1iZmQ2LWVlZjMxNGJjNzAzNyJ9\"\
    ,\n     \"signature\": \"s0h6KThzkfBBBkLspW1h84VsJZFTsPPqMDA7g1Md7p0\"\n   }\n\
    \                Figure 43: Flattened JWS JSON Serialization\n"
- title: 4.6.  Protecting Specific Header Fields
  contents:
  - "4.6.  Protecting Specific Header Fields\n   This example illustrates a signature\
    \ where only certain Header\n   Parameters are protected.  Since this example\
    \ contains both\n   unprotected and protected Header Parameters, only the general\
    \ JWS\n   JSON Serialization and flattened JWS JSON Serialization are possible.\n\
    \   Note that whitespace is added for readability as described in\n   Section\
    \ 1.1.\n"
- title: 4.6.1.  Input Factors
  contents:
  - "4.6.1.  Input Factors\n   The following are supplied before beginning the signing\
    \ operation:\n   o  Payload content; this example uses the content from Figure\
    \ 7,\n      encoded using base64url [RFC4648] to produce Figure 8.\n   o  Signing\
    \ key; this example uses the AES symmetric key from\n      Figure 5.\n   o  Signing\
    \ algorithm; this example uses \"HS256\".\n"
- title: 4.6.2.  Signing Operation
  contents:
  - "4.6.2.  Signing Operation\n   The following are generated before completing the\
    \ signing operation:\n   o  JWS Protected Header; this example uses the header\
    \ from Figure 44,\n      encoded using base64url [RFC4648] to produce Figure 45.\n\
    \   o  JWS Unprotected Header; this example uses the header from\n      Figure\
    \ 46.\n   {\n     \"alg\": \"HS256\"\n   }\n                   Figure 44: JWS\
    \ Protected Header JSON\n   eyJhbGciOiJIUzI1NiJ9\n            Figure 45: JWS Protected\
    \ Header, base64url-encoded\n   {\n     \"kid\": \"018c0ae5-4d9b-471b-bfd6-eef314bc7037\"\
    \n   }\n                  Figure 46: JWS Unprotected Header JSON\n   The JWS Protected\
    \ Header (Figure 45) and JWS Payload (Figure 8) are\n   combined as described\
    \ in [JWS] to produce the JWS Signing Input\n   (Figure 47).\n   eyJhbGciOiJIUzI1NiJ9\n\
    \   .\n   SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywgZ29pbmcgb3V0IH\n   lvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9hZCwgYW5kIGlmIHlvdSBk\n\
    \   b24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXigJlzIG5vIGtub3dpbmcgd2hlcm\n   UgeW91IG1pZ2h0IGJlIHN3ZXB0IG9mZiB0by4\n\
    \                       Figure 47: JWS Signing Input\n   Performing the signature\
    \ operation over the JWS Signing Input\n   (Figure 47) produces the JWS Signature\
    \ (Figure 48).\n   bWUSVaxorn7bEF1djytBd0kHv70Ly5pvbomzMWSOr20\n             \
    \   Figure 48: JWS Signature, base64url-encoded\n"
- title: 4.6.3.  Output Results
  contents:
  - "4.6.3.  Output Results\n   The following compose the resulting JWS object:\n\
    \   o  JWS Protected Header (Figure 45)\n   o  JWS Unprotected Header (Figure\
    \ 46)\n   o  Payload content (Figure 8)\n   o  Signature (Figure 48)\n   The JWS\
    \ Compact Serialization is not presented because it does not\n   support this\
    \ use case.\n   The resulting JWS object using the general JWS JSON Serialization:\n\
    \   {\n     \"payload\": \"SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywg\n\
    \         Z29pbmcgb3V0IHlvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9h\n         ZCwgYW5kIGlmIHlvdSBkb24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXi\n\
    \         gJlzIG5vIGtub3dpbmcgd2hlcmUgeW91IG1pZ2h0IGJlIHN3ZXB0IG9m\n         ZiB0by4\"\
    ,\n     \"signatures\": [\n       {\n         \"protected\": \"eyJhbGciOiJIUzI1NiJ9\"\
    ,\n         \"header\": {\n           \"kid\": \"018c0ae5-4d9b-471b-bfd6-eef314bc7037\"\
    \n         },\n         \"signature\": \"bWUSVaxorn7bEF1djytBd0kHv70Ly5pvbomzMWSOr2\n\
    \             0\"\n       }\n     ]\n   }\n                 Figure 49: General\
    \ JWS JSON Serialization\n   The resulting JWS object using the flattened JWS\
    \ JSON Serialization:\n   {\n     \"payload\": \"SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywg\n\
    \         Z29pbmcgb3V0IHlvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9h\n         ZCwgYW5kIGlmIHlvdSBkb24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXi\n\
    \         gJlzIG5vIGtub3dpbmcgd2hlcmUgeW91IG1pZ2h0IGJlIHN3ZXB0IG9m\n         ZiB0by4\"\
    ,\n     \"protected\": \"eyJhbGciOiJIUzI1NiJ9\",\n     \"header\": {\n       \"\
    kid\": \"018c0ae5-4d9b-471b-bfd6-eef314bc7037\"\n     },\n     \"signature\":\
    \ \"bWUSVaxorn7bEF1djytBd0kHv70Ly5pvbomzMWSOr20\"\n   }\n                Figure\
    \ 50: Flattened JWS JSON Serialization\n"
- title: 4.7.  Protecting Content Only
  contents:
  - "4.7.  Protecting Content Only\n   This example illustrates a signature where\
    \ none of the Header\n   Parameters are protected.  Since this example contains\
    \ only\n   unprotected Header Parameters, only the general JWS JSON\n   Serialization\
    \ and flattened JWS JSON Serialization are possible.\n   Note that whitespace\
    \ is added for readability as described in\n   Section 1.1.\n"
- title: 4.7.1.  Input Factors
  contents:
  - "4.7.1.  Input Factors\n   The following are supplied before beginning the signing\
    \ operation:\n   o  Payload content; this example uses the content from Figure\
    \ 7,\n      encoded using base64url [RFC4648] to produce Figure 8.\n   o  Signing\
    \ key; this example uses the AES symmetric key from\n      Figure 5.\n   o  Signing\
    \ algorithm; this example uses \"HS256\".\n"
- title: 4.7.2.  Signing Operation
  contents:
  - "4.7.2.  Signing Operation\n   The following is generated before completing the\
    \ signing operation:\n   o  JWS Unprotected Header; this example uses the header\
    \ from\n      Figure 51.\n   {\n     \"alg\": \"HS256\",\n     \"kid\": \"018c0ae5-4d9b-471b-bfd6-eef314bc7037\"\
    \n   }\n                  Figure 51: JWS Unprotected Header JSON\n   The empty\
    \ string (as there is no JWS Protected Header) and JWS\n   Payload (Figure 8)\
    \ are combined as described in [JWS] to produce the\n   JWS Signing Input (Figure\
    \ 52).\n   .\n   SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywgZ29pbmcgb3V0IH\n\
    \   lvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9hZCwgYW5kIGlmIHlvdSBk\n   b24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXigJlzIG5vIGtub3dpbmcgd2hlcm\n\
    \   UgeW91IG1pZ2h0IGJlIHN3ZXB0IG9mZiB0by4\n                       Figure 52: JWS\
    \ Signing Input\n   Performing the signature operation over the JWS Signing Input\n\
    \   (Figure 52) produces the JWS Signature (Figure 53).\n   xuLifqLGiblpv9zBpuZczWhNj1gARaLV3UxvxhJxZuk\n\
    \                Figure 53: JWS Signature, base64url-encoded\n"
- title: 4.7.3.  Output Results
  contents:
  - "4.7.3.  Output Results\n   The following compose the resulting JWS object:\n\
    \   o  JWS Unprotected Header (Figure 51)\n   o  Payload content (Figure 8)\n\
    \   o  Signature (Figure 53)\n   The JWS Compact Serialization is not presented\
    \ because it does not\n   support this use case.\n   The resulting JWS object\
    \ using the general JWS JSON Serialization:\n   {\n     \"payload\": \"SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywg\n\
    \         Z29pbmcgb3V0IHlvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9h\n         ZCwgYW5kIGlmIHlvdSBkb24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXi\n\
    \         gJlzIG5vIGtub3dpbmcgd2hlcmUgeW91IG1pZ2h0IGJlIHN3ZXB0IG9m\n         ZiB0by4\"\
    ,\n     \"signatures\": [\n       {\n         \"header\": {\n           \"alg\"\
    : \"HS256\",\n           \"kid\": \"018c0ae5-4d9b-471b-bfd6-eef314bc7037\"\n \
    \        },\n         \"signature\": \"xuLifqLGiblpv9zBpuZczWhNj1gARaLV3UxvxhJxZu\n\
    \             k\"\n       }\n     ]\n   }\n                 Figure 54: General\
    \ JWS JSON Serialization\n   The resulting JWS object using the flattened JWS\
    \ JSON Serialization:\n   {\n     \"payload\": \"SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywg\n\
    \         Z29pbmcgb3V0IHlvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9h\n         ZCwgYW5kIGlmIHlvdSBkb24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXi\n\
    \         gJlzIG5vIGtub3dpbmcgd2hlcmUgeW91IG1pZ2h0IGJlIHN3ZXB0IG9m\n         ZiB0by4\"\
    ,\n     \"header\": {\n       \"alg\": \"HS256\",\n       \"kid\": \"018c0ae5-4d9b-471b-bfd6-eef314bc7037\"\
    \n     },\n     \"signature\": \"xuLifqLGiblpv9zBpuZczWhNj1gARaLV3UxvxhJxZuk\"\
    \n   }\n                Figure 55: Flattened JWS JSON Serialization\n"
- title: 4.8.  Multiple Signatures
  contents:
  - "4.8.  Multiple Signatures\n   This example illustrates multiple signatures applied\
    \ to the same\n   payload.  Since this example contains more than one signature,\
    \ only\n   the JSON General Serialization is possible.\n   Note that whitespace\
    \ is added for readability as described in\n   Section 1.1.\n"
- title: 4.8.1.  Input Factors
  contents:
  - "4.8.1.  Input Factors\n   The following are supplied before beginning the signing\
    \ operation:\n   o  Payload content; this example uses the content from Figure\
    \ 7,\n      encoded using base64url [RFC4648] to produce Figure 8.\n   o  Signing\
    \ keys; this example uses the following:\n      *  RSA private key from Figure\
    \ 4 for the first signature\n      *  EC private key from Figure 2 for the second\
    \ signature\n      *  AES symmetric key from Figure 5 for the third signature\n\
    \   o  Signing algorithms; this example uses the following:\n      *  \"RS256\"\
    \ for the first signature\n      *  \"ES512\" for the second signature\n     \
    \ *  \"HS256\" for the third signature\n"
- title: 4.8.2.  First Signing Operation
  contents:
  - "4.8.2.  First Signing Operation\n   The following are generated before completing\
    \ the first signing\n   operation:\n   o  JWS Protected Header; this example uses\
    \ the header from Figure 56,\n      encoded using base64url [RFC4648] to produce\
    \ Figure 57.\n   o  JWS Unprotected Header; this example uses the header from\n\
    \      Figure 58.\n   {\n     \"alg\": \"RS256\"\n   }\n             Figure 56:\
    \ Signature #1 JWS Protected Header JSON\n   eyJhbGciOiJSUzI1NiJ9\n      Figure\
    \ 57: Signature #1 JWS Protected Header, base64url-encoded\n   {\n     \"kid\"\
    : \"bilbo.baggins@hobbiton.example\"\n   }\n            Figure 58: Signature #1\
    \ JWS Unprotected Header JSON\n   The JWS Protected Header (Figure 57) and JWS\
    \ Payload (Figure 8) are\n   combined as described in [JWS] to produce the JWS\
    \ Signing Input\n   (Figure 59).\n   eyJhbGciOiJSUzI1NiJ9\n   .\n   SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywgZ29pbmcgb3V0IH\n\
    \   lvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9hZCwgYW5kIGlmIHlvdSBk\n   b24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXigJlzIG5vIGtub3dpbmcgd2hlcm\n\
    \   UgeW91IG1pZ2h0IGJlIHN3ZXB0IG9mZiB0by4\n                       Figure 59: JWS\
    \ Signing Input\n   Performing the signature operation over the JWS Signing Input\n\
    \   (Figure 59) produces the JWS Signature (Figure 60).\n   MIsjqtVlOpa71KE-Mss8_Nq2YH4FGhiocsqrgi5NvyG53uoimic1tcMdSg-qpt\n\
    \   rzZc7CG6Svw2Y13TDIqHzTUrL_lR2ZFcryNFiHkSw129EghGpwkpxaTn_THJTC\n   glNbADko1MZBCdwzJxwqZc-1RlpO2HibUYyXSwO97BSe0_evZKdjvvKSgsIqjy\n\
    \   tKSeAMbhMBdMma622_BG5t4sdbuCHtFjp9iJmkio47AIwqkZV1aIZsv33uPUqB\n   BCXbYoQJwt7mxPftHmNlGoOSMxR_3thmXTCm4US-xiNOyhbm8afKK64jU6_TPt\n\
    \   QHiJeQJxz9G3Tx-083B745_AfYOnlC9w\n              Figure 60: JWS Signature #1,\
    \ base64url-encoded\n   The following is the assembled first signature serialized\
    \ as JSON:\n   {\n     \"protected\": \"eyJhbGciOiJSUzI1NiJ9\",\n     \"header\"\
    : {\n       \"kid\": \"bilbo.baggins@hobbiton.example\"\n     },\n     \"signature\"\
    : \"MIsjqtVlOpa71KE-Mss8_Nq2YH4FGhiocsqrgi5NvyG53u\n         oimic1tcMdSg-qptrzZc7CG6Svw2Y13TDIqHzTUrL_lR2ZFcryNFiHkS\n\
    \         w129EghGpwkpxaTn_THJTCglNbADko1MZBCdwzJxwqZc-1RlpO2HibUY\n         yXSwO97BSe0_evZKdjvvKSgsIqjytKSeAMbhMBdMma622_BG5t4sdbuC\n\
    \         HtFjp9iJmkio47AIwqkZV1aIZsv33uPUqBBCXbYoQJwt7mxPftHmNlGo\n         OSMxR_3thmXTCm4US-xiNOyhbm8afKK64jU6_TPtQHiJeQJxz9G3Tx-0\n\
    \         83B745_AfYOnlC9w\"\n   }\n                       Figure 61: Signature\
    \ #1 JSON\n"
- title: 4.8.3.  Second Signing Operation
  contents:
  - "4.8.3.  Second Signing Operation\n   The following is generated before completing\
    \ the second signing\n   operation:\n   o  JWS Unprotected Header; this example\
    \ uses the header from\n      Figure 62.\n   {\n     \"alg\": \"ES512\",\n   \
    \  \"kid\": \"bilbo.baggins@hobbiton.example\"\n   }\n            Figure 62: Signature\
    \ #2 JWS Unprotected Header JSON\n   The empty string (as there is no JWS Protected\
    \ Header) and JWS\n   Payload (Figure 8) are combined as described in [JWS] to\
    \ produce the\n   JWS Signing Input (Figure 63).\n   .\n   SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywgZ29pbmcgb3V0IH\n\
    \   lvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9hZCwgYW5kIGlmIHlvdSBk\n   b24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXigJlzIG5vIGtub3dpbmcgd2hlcm\n\
    \   UgeW91IG1pZ2h0IGJlIHN3ZXB0IG9mZiB0by4\n                       Figure 63: JWS\
    \ Signing Input\n   Performing the signature operation over the JWS Signing Input\n\
    \   (Figure 63) produces the JWS Signature (Figure 64).\n   ARcVLnaJJaUWG8fG-8t5BREVAuTY8n8YHjwDO1muhcdCoFZFFjfISu0Cdkn9Yb\n\
    \   dlmi54ho0x924DUz8sK7ZXkhc7AFM8ObLfTvNCrqcI3Jkl2U5IX3utNhODH6v7\n   xgy1Qahsn0fyb4zSAkje8bAWz4vIfj5pCMYxxm4fgV3q7ZYhm5eD\n\
    \              Figure 64: JWS Signature #2, base64url-encoded\n   The following\
    \ is the assembled second signature serialized as JSON:\n   {\n     \"header\"\
    : {\n       \"alg\": \"ES512\",\n       \"kid\": \"bilbo.baggins@hobbiton.example\"\
    \n     },\n     \"signature\": \"ARcVLnaJJaUWG8fG-8t5BREVAuTY8n8YHjwDO1muhcdCoF\n\
    \         ZFFjfISu0Cdkn9Ybdlmi54ho0x924DUz8sK7ZXkhc7AFM8ObLfTvNCrq\n         cI3Jkl2U5IX3utNhODH6v7xgy1Qahsn0fyb4zSAkje8bAWz4vIfj5pCM\n\
    \         Yxxm4fgV3q7ZYhm5eD\"\n   }\n                       Figure 65: Signature\
    \ #2 JSON\n"
- title: 4.8.4.  Third Signing Operation
  contents:
  - "4.8.4.  Third Signing Operation\n   The following is generated before completing\
    \ the third signing\n   operation:\n   o  JWS Protected Header; this example uses\
    \ the header from Figure 66,\n      encoded using base64url [RFC4648] to produce\
    \ Figure 67.\n   {\n     \"alg\": \"HS256\",\n     \"kid\": \"018c0ae5-4d9b-471b-bfd6-eef314bc7037\"\
    \n   }\n             Figure 66: Signature #3 JWS Protected Header JSON\n   eyJhbGciOiJIUzI1NiIsImtpZCI6IjAxOGMwYWU1LTRkOWItNDcxYi1iZmQ2LW\n\
    \   VlZjMxNGJjNzAzNyJ9\n      Figure 67: Signature #3 JWS Protected Header, base64url-encoded\n\
    \   The JWS Protected Header (Figure 67) and JWS Payload (Figure 8) are\n   combined\
    \ as described in [JWS] to produce the JWS Signing Input\n   (Figure 68).\n  \
    \ eyJhbGciOiJIUzI1NiIsImtpZCI6IjAxOGMwYWU1LTRkOWItNDcxYi1iZmQ2LW\n   VlZjMxNGJjNzAzNyJ9\n\
    \   .\n   SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywgZ29pbmcgb3V0IH\n   lvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9hZCwgYW5kIGlmIHlvdSBk\n\
    \   b24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXigJlzIG5vIGtub3dpbmcgd2hlcm\n   UgeW91IG1pZ2h0IGJlIHN3ZXB0IG9mZiB0by4\n\
    \                       Figure 68: JWS Signing Input\n   Performing the signature\
    \ operation over the JWS Signing Input\n   (Figure 68) produces the JWS Signature\
    \ (Figure 69).\n   s0h6KThzkfBBBkLspW1h84VsJZFTsPPqMDA7g1Md7p0\n             \
    \ Figure 69: JWS Signature #3, base64url-encoded\n   The following is the assembled\
    \ third signature serialized as JSON:\n   {\n     \"protected\": \"eyJhbGciOiJIUzI1NiIsImtpZCI6IjAxOGMwYWU1LTRkOW\n\
    \         ItNDcxYi1iZmQ2LWVlZjMxNGJjNzAzNyJ9\",\n     \"signature\": \"s0h6KThzkfBBBkLspW1h84VsJZFTsPPqMDA7g1Md7p0\"\
    \n   }\n                       Figure 70: Signature #3 JSON\n"
- title: 4.8.5.  Output Results
  contents:
  - "4.8.5.  Output Results\n   The following compose the resulting JWS object:\n\
    \   o  Payload content (Figure 8)\n   o  Signature #1 JSON (Figure 61)\n   o \
    \ Signature #2 JSON (Figure 65)\n   o  Signature #3 JSON (Figure 70)\n   The JWS\
    \ Compact Serialization is not presented because it does not\n   support this\
    \ use case; the flattened JWS JSON Serialization is not\n   presented because\
    \ there is more than one signature.\n   The resulting JWS object using the general\
    \ JWS JSON Serialization:\n   {\n     \"payload\": \"SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywg\n\
    \         Z29pbmcgb3V0IHlvdXIgZG9vci4gWW91IHN0ZXAgb250byB0aGUgcm9h\n         ZCwgYW5kIGlmIHlvdSBkb24ndCBrZWVwIHlvdXIgZmVldCwgdGhlcmXi\n\
    \         gJlzIG5vIGtub3dpbmcgd2hlcmUgeW91IG1pZ2h0IGJlIHN3ZXB0IG9m\n         ZiB0by4\"\
    ,\n     \"signatures\": [\n       {\n         \"protected\": \"eyJhbGciOiJSUzI1NiJ9\"\
    ,\n         \"header\": {\n           \"kid\": \"bilbo.baggins@hobbiton.example\"\
    \n         },\n         \"signature\": \"MIsjqtVlOpa71KE-Mss8_Nq2YH4FGhiocsqrgi5Nvy\n\
    \             G53uoimic1tcMdSg-qptrzZc7CG6Svw2Y13TDIqHzTUrL_lR2ZFc\n         \
    \    ryNFiHkSw129EghGpwkpxaTn_THJTCglNbADko1MZBCdwzJxwqZc\n             -1RlpO2HibUYyXSwO97BSe0_evZKdjvvKSgsIqjytKSeAMbhMBdM\n\
    \             ma622_BG5t4sdbuCHtFjp9iJmkio47AIwqkZV1aIZsv33uPUqBBC\n         \
    \    XbYoQJwt7mxPftHmNlGoOSMxR_3thmXTCm4US-xiNOyhbm8afKK6\n             4jU6_TPtQHiJeQJxz9G3Tx-083B745_AfYOnlC9w\"\
    \n       },\n       {\n         \"header\": {\n           \"alg\": \"ES512\",\n\
    \           \"kid\": \"bilbo.baggins@hobbiton.example\"\n         },\n       \
    \  \"signature\": \"ARcVLnaJJaUWG8fG-8t5BREVAuTY8n8YHjwDO1muhc\n             dCoFZFFjfISu0Cdkn9Ybdlmi54ho0x924DUz8sK7ZXkhc7AFM8Ob\n\
    \             LfTvNCrqcI3Jkl2U5IX3utNhODH6v7xgy1Qahsn0fyb4zSAkje8b\n         \
    \    AWz4vIfj5pCMYxxm4fgV3q7ZYhm5eD\"\n       },\n       {\n         \"protected\"\
    : \"eyJhbGciOiJIUzI1NiIsImtpZCI6IjAxOGMwYWU1LT\n             RkOWItNDcxYi1iZmQ2LWVlZjMxNGJjNzAzNyJ9\"\
    ,\n         \"signature\": \"s0h6KThzkfBBBkLspW1h84VsJZFTsPPqMDA7g1Md7p\n    \
    \         0\"\n       }\n     ]\n   }\n                 Figure 71: General JWS\
    \ JSON Serialization\n"
- title: 5.  JSON Web Encryption Examples
  contents:
  - "5.  JSON Web Encryption Examples\n   The following sections demonstrate how to\
    \ generate various JWE\n   objects.\n   All of the encryption examples (unless\
    \ otherwise noted) use the\n   following Plaintext content (an abridged quote\
    \ from \"The Fellowship\n   of the Ring\" [LOTR-FELLOWSHIP]), serialized as UTF-8.\
    \  The Plaintext\n   is presented here as a series of quoted strings that are\
    \ concatenated\n   to produce the JWE Plaintext.  The sequence \"\\xe2\\x80\\\
    x93\" is\n   substituted for (U+2013 EN DASH), and quotation marks (U+0022\n \
    \  QUOTATION MARK) are added for readability but are not present in the\n   JWE\
    \ Plaintext.\n   \"You can trust us to stick with you through thick and \"\n \
    \  \"thin\\xe2\\x80\\x93to the bitter end. And you can trust us to \"\n   \"keep\
    \ any secret of yours\\xe2\\x80\\x93closer than you keep it \"\n   \"yourself.\
    \ But you cannot trust us to let you face trouble \"\n   \"alone, and go off without\
    \ a word. We are your friends, Frodo.\"\n                       Figure 72: Plaintext\
    \ Content\n"
- title: 5.1.  Key Encryption Using RSA v1.5 and AES-HMAC-SHA2
  contents:
  - "5.1.  Key Encryption Using RSA v1.5 and AES-HMAC-SHA2\n   This example illustrates\
    \ encrypting content using the \"RSA1_5\"\n   (RSAES-PKCS1-v1_5) key encryption\
    \ algorithm and the \"A128CBC-HS256\"\n   (AES-128-CBC-HMAC-SHA-256) content encryption\
    \ algorithm.\n   Note that RSAES-PKCS1-v1_5 uses random data to generate the\n\
    \   ciphertext; it might not be possible to exactly replicate the results\n  \
    \ in this section.\n   Note that only the RSA public key is necessary to perform\
    \ the\n   encryption.  However, the example includes the RSA private key to\n\
    \   allow readers to validate the output.\n   Note that whitespace is added for\
    \ readability as described in\n   Section 1.1.\n"
- title: 5.1.1.  Input Factors
  contents:
  - "5.1.1.  Input Factors\n   The following are supplied before beginning the encryption\
    \ process:\n   o  Plaintext content; this example uses the content from Figure\
    \ 72.\n   o  RSA public key; this example uses the key from Figure 73.\n   o \
    \ \"alg\" parameter of \"RSA1_5\".\n   o  \"enc\" parameter of \"A128CBC-HS256\"\
    .\n   {\n     \"kty\": \"RSA\",\n     \"kid\": \"frodo.baggins@hobbiton.example\"\
    ,\n     \"use\": \"enc\",\n     \"n\": \"maxhbsmBtdQ3CNrKvprUE6n9lYcregDMLYNeTAWcLj8NnPU9XIYegT\n\
    \         HVHQjxKDSHP2l-F5jS7sppG1wgdAqZyhnWvXhYNvcM7RfgKxqNx_xAHx\n         6f3yy7s-M9PSNCwPC2lh6UAkR4I00EhV9lrypM9Pi4lBUop9t5fS9W5U\n\
    \         NwaAllhrd-osQGPjIeI1deHTwx-ZTHu3C60Pu_LJIl6hKn9wbwaUmA4c\n         R5Bd2pgbaY7ASgsjCUbtYJaNIHSoHXprUdJZKUMAzV0WOKPfA6OPI4oy\n\
    \         pBadjvMZ4ZAj3BnXaSYsEZhaueTXvZB4eZOAjIyh2e_VOIKVMsnDrJYA\n         VotGlvMQ\"\
    ,\n     \"e\": \"AQAB\",\n     \"d\": \"Kn9tgoHfiTVi8uPu5b9TnwyHwG5dK6RE0uFdlpCGnJN7ZEi963R7wy\n\
    \         bQ1PLAHmpIbNTztfrheoAniRV1NCIqXaW_qS461xiDTp4ntEPnqcKsyO\n         5jMAji7-CL8vhpYYowNFvIesgMoVaPRYMYT9TW63hNM0aWs7USZ_hLg6\n\
    \         Oe1mY0vHTI3FucjSM86Nff4oIENt43r2fspgEPGRrdE6fpLc9Oaq-qeP\n         1GFULimrRdndm-P8q8kvN3KHlNAtEgrQAgTTgz80S-3VD0FgWfgnb1PN\n\
    \         miuPUxO8OpI9KDIfu_acc6fg14nsNaJqXe6RESvhGPH2afjHqSy_Fd2v\n         pzj85bQQ\"\
    ,\n     \"p\": \"2DwQmZ43FoTnQ8IkUj3BmKRf5Eh2mizZA5xEJ2MinUE3sdTYKSLtaE\n    \
    \     oekX9vbBZuWxHdVhM6UnKCJ_2iNk8Z0ayLYHL0_G21aXf9-unynEpUsH\n         7HHTklLpYAzOOx1ZgVljoxAdWNn3hiEFrjZLZGS7lOH-a3QQlDDQoJOJ\n\
    \         2VFmU\",\n     \"q\": \"te8LY4-W7IyaqH1ExujjMqkTAlTeRbv0VLQnfLY2xINnrWdwiQ93_V\n\
    \         F099aP1ESeLja2nw-6iKIe-qT7mtCPozKfVtUYfz5HrJ_XY2kfexJINb\n         9lhZHMv5p1skZpeIS-GPHCC6gRlKo1q-idn_qxyusfWv7WAxlSVfQfk8\n\
    \         d6Et0\",\n     \"dp\": \"UfYKcL_or492vVc0PzwLSplbg4L3-Z5wL48mwiswbpzOyIgd2xHTH\n\
    \         QmjJpFAIZ8q-zf9RmgJXkDrFs9rkdxPtAsL1WYdeCT5c125Fkdg317JV\n         RDo1inX7x2Kdh8ERCreW8_4zXItuTl_KiXZNU5lvMQjWbIw2eTx1lpsf\n\
    \         lo0rYU\",\n     \"dq\": \"iEgcO-QfpepdH8FWd7mUFyrXdnOkXJBCogChY6YKuIHGc_p8Le9Mb\n\
    \         pFKESzEaLlN1Ehf3B6oGBl5Iz_ayUlZj2IoQZ82znoUrpa9fVYNot87A\n         CfzIG7q9Mv7RiPAderZi03tkVXAdaBau_9vs5rS-7HMtxkVrxSUvJY14\n\
    \         TkXlHE\",\n     \"qi\": \"kC-lzZOqoFaZCr5l0tOVtREKoVqaAYhQiqIRGL-MzS4sCmRkxm5vZ\n\
    \         lXYx6RtE1n_AagjqajlkjieGlxTTThHD8Iga6foGBMaAr5uR1hGQpSc7\n         Gl7CF1DZkBJMTQN6EshYzZfxW08mIO8M6Rzuh0beL6fG9mkDcIyPrBXx\n\
    \         2bQ_mM\"\n   }\n                Figure 73: RSA 2048-Bit Key, in JWK\
    \ Format\n   (NOTE: While the key includes the private parameters, only the public\n\
    \   parameters \"e\" and \"n\" are necessary for the encryption operation.)\n"
- title: 5.1.2.  Generated Factors
  contents:
  - "5.1.2.  Generated Factors\n   The following are generated before encrypting:\n\
    \   o  AES symmetric key as the Content Encryption Key (CEK); this\n      example\
    \ uses the key from Figure 74.\n   o  Initialization Vector; this example uses\
    \ the Initialization Vector\n      from Figure 75.\n   3qyTVhIWt5juqZUCpfRqpvauwB956MEJL2Rt-8qXKSo\n\
    \           Figure 74: Content Encryption Key, base64url-encoded\n   bbd5sTkYwhAIqfHsx8DayA\n\
    \            Figure 75: Initialization Vector, base64url-encoded\n"
- title: 5.1.3.  Encrypting the Key
  contents:
  - "5.1.3.  Encrypting the Key\n   Performing the key encryption operation over the\
    \ CEK (Figure 74) with\n   the RSA key (Figure 73) results in the following Encrypted\
    \ Key:\n   laLxI0j-nLH-_BgLOXMozKxmy9gffy2gTdvqzfTihJBuuzxg0V7yk1WClnQePF\n  \
    \ vG2K-pvSlWc9BRIazDrn50RcRai__3TDON395H3c62tIouJJ4XaRvYHFjZTZ2G\n   Xfz8YAImcc91Tfk0WXC2F5Xbb71ClQ1DDH151tlpH77f2ff7xiSxh9oSewYrcG\n\
    \   TSLUeeCt36r1Kt3OSj7EyBQXoZlN7IxbyhMAfgIe7Mv1rOTOI5I8NQqeXXW8Vl\n   zNmoxaGMny3YnGir5Wf6Qt2nBq4qDaPdnaAuuGUGEecelIO1wx1BpyIfgvfjOh\n\
    \   MBs9M8XL223Fg47xlGsMXdfuY-4jaqVw\n                Figure 76: Encrypted Key,\
    \ base64url-encoded\n"
- title: 5.1.4.  Encrypting the Content
  contents:
  - "5.1.4.  Encrypting the Content\n   The following is generated before encrypting\
    \ the Plaintext:\n   o  JWE Protected Header; this example uses the header from\
    \ Figure 77,\n      encoded using base64url [RFC4648] to produce Figure 78.\n\
    \   {\n     \"alg\": \"RSA1_5\",\n     \"kid\": \"frodo.baggins@hobbiton.example\"\
    ,\n     \"enc\": \"A128CBC-HS256\"\n   }\n                   Figure 77: JWE Protected\
    \ Header JSON\n   eyJhbGciOiJSU0ExXzUiLCJraWQiOiJmcm9kby5iYWdnaW5zQGhvYmJpdG9uLm\n\
    \   V4YW1wbGUiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0\n            Figure 78: JWE Protected\
    \ Header, base64url-encoded\n   Performing the content encryption operation on\
    \ the Plaintext\n   (Figure 72) using the following:\n   o  CEK (Figure 74);\n\
    \   o  Initialization Vector (Figure 75); and\n   o  JWE Protected Header (Figure\
    \ 77) as authenticated data\n   produces the following:\n   o  Ciphertext from\
    \ Figure 79.\n   o  Authentication Tag from Figure 80.\n   0fys_TY_na7f8dwSfXLiYdHaA2DxUjD67ieF7fcVbIR62JhJvGZ4_FNVSiGc_r\n\
    \   aa0HnLQ6s1P2sv3Xzl1p1l_o5wR_RsSzrS8Z-wnI3Jvo0mkpEEnlDmZvDu_k8O\n   WzJv7eZVEqiWKdyVzFhPpiyQU28GLOpRc2VbVbK4dQKPdNTjPPEmRqcaGeTWZV\n\
    \   yeSUvf5k59yJZxRuSvWFf6KrNtmRdZ8R4mDOjHSrM_s8uwIFcqt4r5GX8TKaI0\n   zT5CbL5Qlw3sRc7u_hg0yKVOiRytEAEs3vZkcfLkP6nbXdC_PkMdNS-ohP78T2\n\
    \   O6_7uInMGhFeX4ctHG7VelHGiT93JfWDEQi5_V9UN1rhXNrYu-0fVMkZAKX3VW\n   i7lzA6BP430m\n\
    \                 Figure 79: Ciphertext, base64url-encoded\n   kvKuFBXHe5mQr4lqgobAUg\n\
    \             Figure 80: Authentication Tag, base64url-encoded\n"
- title: 5.1.5.  Output Results
  contents:
  - "5.1.5.  Output Results\n   The following compose the resulting JWE object:\n\
    \   o  JWE Protected Header (Figure 78)\n   o  Encrypted Key (Figure 76)\n   o\
    \  Initialization Vector (Figure 75)\n   o  Ciphertext (Figure 79)\n   o  Authentication\
    \ Tag (Figure 80)\n   The resulting JWE object using the JWE Compact Serialization:\n\
    \   eyJhbGciOiJSU0ExXzUiLCJraWQiOiJmcm9kby5iYWdnaW5zQGhvYmJpdG9uLm\n   V4YW1wbGUiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0\n\
    \   .\n   laLxI0j-nLH-_BgLOXMozKxmy9gffy2gTdvqzfTihJBuuzxg0V7yk1WClnQePF\n   vG2K-pvSlWc9BRIazDrn50RcRai__3TDON395H3c62tIouJJ4XaRvYHFjZTZ2G\n\
    \   Xfz8YAImcc91Tfk0WXC2F5Xbb71ClQ1DDH151tlpH77f2ff7xiSxh9oSewYrcG\n   TSLUeeCt36r1Kt3OSj7EyBQXoZlN7IxbyhMAfgIe7Mv1rOTOI5I8NQqeXXW8Vl\n\
    \   zNmoxaGMny3YnGir5Wf6Qt2nBq4qDaPdnaAuuGUGEecelIO1wx1BpyIfgvfjOh\n   MBs9M8XL223Fg47xlGsMXdfuY-4jaqVw\n\
    \   .\n   bbd5sTkYwhAIqfHsx8DayA\n   .\n   0fys_TY_na7f8dwSfXLiYdHaA2DxUjD67ieF7fcVbIR62JhJvGZ4_FNVSiGc_r\n\
    \   aa0HnLQ6s1P2sv3Xzl1p1l_o5wR_RsSzrS8Z-wnI3Jvo0mkpEEnlDmZvDu_k8O\n   WzJv7eZVEqiWKdyVzFhPpiyQU28GLOpRc2VbVbK4dQKPdNTjPPEmRqcaGeTWZV\n\
    \   yeSUvf5k59yJZxRuSvWFf6KrNtmRdZ8R4mDOjHSrM_s8uwIFcqt4r5GX8TKaI0\n   zT5CbL5Qlw3sRc7u_hg0yKVOiRytEAEs3vZkcfLkP6nbXdC_PkMdNS-ohP78T2\n\
    \   O6_7uInMGhFeX4ctHG7VelHGiT93JfWDEQi5_V9UN1rhXNrYu-0fVMkZAKX3VW\n   i7lzA6BP430m\n\
    \   .\n   kvKuFBXHe5mQr4lqgobAUg\n                   Figure 81: JWE Compact Serialization\n\
    \   The resulting JWE object using the general JWE JSON Serialization:\n   {\n\
    \     \"recipients\": [\n       {\n         \"encrypted_key\": \"laLxI0j-nLH-_BgLOXMozKxmy9gffy2gTdvqzf\n\
    \             TihJBuuzxg0V7yk1WClnQePFvG2K-pvSlWc9BRIazDrn50RcRai_\n         \
    \    _3TDON395H3c62tIouJJ4XaRvYHFjZTZ2GXfz8YAImcc91Tfk0WX\n             C2F5Xbb71ClQ1DDH151tlpH77f2ff7xiSxh9oSewYrcGTSLUeeCt\n\
    \             36r1Kt3OSj7EyBQXoZlN7IxbyhMAfgIe7Mv1rOTOI5I8NQqeXXW8\n         \
    \    VlzNmoxaGMny3YnGir5Wf6Qt2nBq4qDaPdnaAuuGUGEecelIO1wx\n             1BpyIfgvfjOhMBs9M8XL223Fg47xlGsMXdfuY-4jaqVw\"\
    \n       }\n     ],\n     \"protected\": \"eyJhbGciOiJSU0ExXzUiLCJraWQiOiJmcm9kby5iYWdnaW\n\
    \         5zQGhvYmJpdG9uLmV4YW1wbGUiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In\n         0\"\
    ,\n     \"iv\": \"bbd5sTkYwhAIqfHsx8DayA\",\n     \"ciphertext\": \"0fys_TY_na7f8dwSfXLiYdHaA2DxUjD67ieF7fcVbIR62\n\
    \         JhJvGZ4_FNVSiGc_raa0HnLQ6s1P2sv3Xzl1p1l_o5wR_RsSzrS8Z-wn\n         I3Jvo0mkpEEnlDmZvDu_k8OWzJv7eZVEqiWKdyVzFhPpiyQU28GLOpRc\n\
    \         2VbVbK4dQKPdNTjPPEmRqcaGeTWZVyeSUvf5k59yJZxRuSvWFf6KrNtm\n         RdZ8R4mDOjHSrM_s8uwIFcqt4r5GX8TKaI0zT5CbL5Qlw3sRc7u_hg0y\n\
    \         KVOiRytEAEs3vZkcfLkP6nbXdC_PkMdNS-ohP78T2O6_7uInMGhFeX4c\n         tHG7VelHGiT93JfWDEQi5_V9UN1rhXNrYu-0fVMkZAKX3VWi7lzA6BP4\n\
    \         30m\",\n     \"tag\": \"kvKuFBXHe5mQr4lqgobAUg\"\n   }\n           \
    \      Figure 82: General JWE JSON Serialization\n   The resulting JWE object\
    \ using the flattened JWE JSON Serialization:\n   {\n     \"protected\": \"eyJhbGciOiJSU0ExXzUiLCJraWQiOiJmcm9kby5iYWdnaW\n\
    \         5zQGhvYmJpdG9uLmV4YW1wbGUiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In\n         0\"\
    ,\n     \"encrypted_key\": \"laLxI0j-nLH-_BgLOXMozKxmy9gffy2gTdvqzfTihJ\n    \
    \     Buuzxg0V7yk1WClnQePFvG2K-pvSlWc9BRIazDrn50RcRai__3TDON39\n         5H3c62tIouJJ4XaRvYHFjZTZ2GXfz8YAImcc91Tfk0WXC2F5Xbb71ClQ\n\
    \         1DDH151tlpH77f2ff7xiSxh9oSewYrcGTSLUeeCt36r1Kt3OSj7EyBQX\n         oZlN7IxbyhMAfgIe7Mv1rOTOI5I8NQqeXXW8VlzNmoxaGMny3YnGir5W\n\
    \         f6Qt2nBq4qDaPdnaAuuGUGEecelIO1wx1BpyIfgvfjOhMBs9M8XL223F\n         g47xlGsMXdfuY-4jaqVw\"\
    ,\n     \"iv\": \"bbd5sTkYwhAIqfHsx8DayA\",\n     \"ciphertext\": \"0fys_TY_na7f8dwSfXLiYdHaA2DxUjD67ieF7fcVbIR62\n\
    \         JhJvGZ4_FNVSiGc_raa0HnLQ6s1P2sv3Xzl1p1l_o5wR_RsSzrS8Z-wn\n         I3Jvo0mkpEEnlDmZvDu_k8OWzJv7eZVEqiWKdyVzFhPpiyQU28GLOpRc\n\
    \         2VbVbK4dQKPdNTjPPEmRqcaGeTWZVyeSUvf5k59yJZxRuSvWFf6KrNtm\n         RdZ8R4mDOjHSrM_s8uwIFcqt4r5GX8TKaI0zT5CbL5Qlw3sRc7u_hg0y\n\
    \         KVOiRytEAEs3vZkcfLkP6nbXdC_PkMdNS-ohP78T2O6_7uInMGhFeX4c\n         tHG7VelHGiT93JfWDEQi5_V9UN1rhXNrYu-0fVMkZAKX3VWi7lzA6BP4\n\
    \         30m\",\n     \"tag\": \"kvKuFBXHe5mQr4lqgobAUg\"\n   }\n           \
    \     Figure 83: Flattened JWE JSON Serialization\n"
- title: 5.2.  Key Encryption Using RSA-OAEP with AES-GCM
  contents:
  - "5.2.  Key Encryption Using RSA-OAEP with AES-GCM\n   This example illustrates\
    \ encrypting content using the \"RSA-OAEP\"\n   (RSAES-OAEP) key encryption algorithm\
    \ and the \"A256GCM\" (AES-GCM)\n   content encryption algorithm.\n   Note that\
    \ RSAES-OAEP uses random data to generate the ciphertext; it\n   might not be\
    \ possible to exactly replicate the results in this\n   section.\n   Note that\
    \ only the RSA public key is necessary to perform the\n   encryption.  However,\
    \ the example includes the RSA private key to\n   allow readers to validate the\
    \ output.\n   Note that whitespace is added for readability as described in\n\
    \   Section 1.1.\n"
- title: 5.2.1.  Input Factors
  contents:
  - "5.2.1.  Input Factors\n   The following are supplied before beginning the encryption\
    \ process:\n   o  Plaintext content; this example uses the Plaintext from Figure\
    \ 72.\n   o  RSA public key; this example uses the key from Figure 84.\n   o \
    \ \"alg\" parameter of \"RSA-OAEP\".\n   o  \"enc\" parameter of \"A256GCM\".\n\
    \   {\n     \"kty\": \"RSA\",\n     \"kid\": \"samwise.gamgee@hobbiton.example\"\
    ,\n     \"use\": \"enc\",\n     \"n\": \"wbdxI55VaanZXPY29Lg5hdmv2XhvqAhoxUkanfzf2-5zVUxa6prHRr\n\
    \         I4pP1AhoqJRlZfYtWWd5mmHRG2pAHIlh0ySJ9wi0BioZBl1XP2e-C-Fy\n         XJGcTy0HdKQWlrfhTm42EW7Vv04r4gfao6uxjLGwfpGrZLarohiWCPnk\n\
    \         Nrg71S2CuNZSQBIPGjXfkmIy2tl_VWgGnL22GplyXj5YlBLdxXp3XeSt\n         sqo571utNfoUTU8E4qdzJ3U1DItoVkPGsMwlmmnJiwA7sXRItBCivR4M\n\
    \         5qnZtdw-7v4WuR4779ubDuJ5nalMv2S66-RPcnFAzWSKxtBDnFJJDGIU\n         e7Tzizjg1nms0Xq_yPub_UOlWn0ec85FCft1hACpWG8schrOBeNqHBOD\n\
    \         FskYpUc2LC5JA2TaPF2dA67dg1TTsC_FupfQ2kNGcE1LgprxKHcVWYQb\n         86B-HozjHZcqtauBzFNV5tbTuB-TpkcvJfNcFLlH3b8mb-H_ox35FjqB\n\
    \         SAjLKyoeqfKTpVjvXhd09knwgJf6VKq6UC418_TOljMVfFTWXUxlnfhO\n         OnzW6HSSzD1c9WrCuVzsUMv54szidQ9wf1cYWf3g5qFDxDQKis99gcDa\n\
    \         iCAwM3yEBIzuNeeCa5dartHDb1xEB_HcHSeYbghbMjGfasvKn0aZRsnT\n         yC0xhWBlsolZE\"\
    ,\n     \"e\": \"AQAB\",\n     \"alg\": \"RSA-OAEP\",\n     \"d\": \"n7fzJc3_WG59VEOBTkayzuSMM780OJQuZjN_KbH8lOZG25ZoA7T4Bx\n\
    \         cc0xQn5oZE5uSCIwg91oCt0JvxPcpmqzaJZg1nirjcWZ-oBtVk7gCAWq\n         -B3qhfF3izlbkosrzjHajIcY33HBhsy4_WerrXg4MDNE4HYojy68TcxT\n\
    \         2LYQRxUOCf5TtJXvM8olexlSGtVnQnDRutxEUCwiewfmmrfveEogLx9E\n         A-KMgAjTiISXxqIXQhWUQX1G7v_mV_Hr2YuImYcNcHkRvp9E7ook0876\n\
    \         DhkO8v4UOZLwA1OlUX98mkoqwc58A_Y2lBYbVx1_s5lpPsEqbbH-nqIj\n         h1fL0gdNfihLxnclWtW7pCztLnImZAyeCWAG7ZIfv-Rn9fLIv9jZ6r7r\n\
    \         -MSH9sqbuziHN2grGjD_jfRluMHa0l84fFKl6bcqN1JWxPVhzNZo01yD\n         F-1LiQnqUYSepPf6X3a2SOdkqBRiquE6EvLuSYIDpJq3jDIsgoL8Mo1L\n\
    \         oomgiJxUwL_GWEOGu28gplyzm-9Q0U0nyhEf1uhSR8aJAQWAiFImWH5W\n         _IQT9I7-yrindr_2fWQ_i1UgMsGzA7aOGzZfPljRy6z-tY_KuBG00-28\n\
    \         S_aWvjyUc-Alp8AUyKjBZ-7CWH32fGWK48j1t-zomrwjL_mnhsPbGs0c\n         9WsWgRzI-K8gE\"\
    ,\n     \"p\": \"7_2v3OQZzlPFcHyYfLABQ3XP85Es4hCdwCkbDeltaUXgVy9l9etKgh\n    \
    \     vM4hRkOvbb01kYVuLFmxIkCDtpi-zLCYAdXKrAK3PtSbtzld_XZ9nlsY\n         a_QZWpXB_IrtFjVfdKUdMz94pHUhFGFj7nr6NNxfpiHSHWFE1zD_AC3m\n\
    \         Y46J961Y2LRnreVwAGNw53p07Db8yD_92pDa97vqcZOdgtybH9q6uma-\n         RFNhO1AoiJhYZj69hjmMRXx-x56HO9cnXNbmzNSCFCKnQmn4GQLmRj9s\n\
    \         fbZRqL94bbtE4_e0Zrpo8RNo8vxRLqQNwIy85fc6BRgBJomt8QdQvIgP\n         gWCv5HoQ\"\
    ,\n     \"q\": \"zqOHk1P6WN_rHuM7ZF1cXH0x6RuOHq67WuHiSknqQeefGBA9PWs6Zy\n    \
    \     KQCO-O6mKXtcgE8_Q_hA2kMRcKOcvHil1hqMCNSXlflM7WPRPZu2qCDc\n         qssd_uMbP-DqYthH_EzwL9KnYoH7JQFxxmcv5An8oXUtTwk4knKjkIYG\n\
    \         RuUwfQTus0w1NfjFAyxOOiAQ37ussIcE6C6ZSsM3n41UlbJ7TCqewzVJ\n         aPJN5cxjySPZPD3Vp01a9YgAD6a3IIaKJdIxJS1ImnfPevSJQBE79-EX\n\
    \         e2kSwVgOzvt-gsmM29QQ8veHy4uAqca5dZzMs7hkkHtw1z0jHV90epQJ\n         JlXXnH8Q\"\
    ,\n     \"dp\": \"19oDkBh1AXelMIxQFm2zZTqUhAzCIr4xNIGEPNoDt1jK83_FJA-xn\n    \
    \     x5kA7-1erdHdms_Ef67HsONNv5A60JaR7w8LHnDiBGnjdaUmmuO8XAxQ\n         J_ia5mxjxNjS6E2yD44USo2JmHvzeeNczq25elqbTPLhUpGo1IZuG72F\n\
    \         ZQ5gTjXoTXC2-xtCDEUZfaUNh4IeAipfLugbpe0JAFlFfrTDAMUFpC3i\n         XjxqzbEanflwPvj6V9iDSgjj8SozSM0dLtxvu0LIeIQAeEgT_yXcrKGm\n\
    \         pKdSO08kLBx8VUjkbv_3Pn20Gyu2YEuwpFlM_H1NikuxJNKFGmnAq9Lc\n         nwwT0jvoQ\"\
    ,\n     \"dq\": \"S6p59KrlmzGzaQYQM3o0XfHCGvfqHLYjCO557HYQf72O9kLMCfd_1\n    \
    \     VBEqeD-1jjwELKDjck8kOBl5UvohK1oDfSP1DleAy-cnmL29DqWmhgwM\n         1ip0CCNmkmsmDSlqkUXDi6sAaZuntyukyflI-qSQ3C_BafPyFaKrt1fg\n\
    \         dyEwYa08pESKwwWisy7KnmoUvaJ3SaHmohFS78TJ25cfc10wZ9hQNOrI\n         ChZlkiOdFCtxDqdmCqNacnhgE3bZQjGp3n83ODSz9zwJcSUvODlXBPc2\n\
    \         AycH6Ci5yjbxt4Ppox_5pjm6xnQkiPgj01GpsUssMmBN7iHVsrE7N2iz\n         nBNCeOUIQ\"\
    ,\n     \"qi\": \"FZhClBMywVVjnuUud-05qd5CYU0dK79akAgy9oX6RX6I3IIIPckCc\n    \
    \     iRrokxglZn-omAY5CnCe4KdrnjFOT5YUZE7G_Pg44XgCXaarLQf4hl80\n         oPEf6-jJ5Iy6wPRx7G2e8qLxnh9cOdf-kRqgOS3F48Ucvw3ma5V6KGMw\n\
    \         QqWFeV31XtZ8l5cVI-I3NzBS7qltpUVgz2Ju021eyc7IlqgzR98qKONl\n         27DuEES0aK0WE97jnsyO27Yp88Wa2RiBrEocM89QZI1seJiGDizHRUP4\n\
    \         UZxw9zsXww46wy0P6f9grnYp7t8LkyDDk8eoI4KX6SNMNVcyVS9IWjlq\n         8EzqZEKIA\"\
    \n   }\n                        Figure 84: RSA 4096-Bit Key\n   (NOTE: While the\
    \ key includes the private parameters, only the public\n   parameters \"e\" and\
    \ \"n\" are necessary for the encryption operation.)\n"
- title: 5.2.2.  Generated Factors
  contents:
  - "5.2.2.  Generated Factors\n   The following are generated before encrypting:\n\
    \   o  AES symmetric key as the Content Encryption Key (CEK); this\n      example\
    \ uses the key from Figure 85.\n   o  Initialization Vector; this example uses\
    \ the Initialization Vector\n      from Figure 86.\n   mYMfsggkTAm0TbvtlFh2hyoXnbEzJQjMxmgLN3d8xXA\n\
    \           Figure 85: Content Encryption Key, base64url-encoded\n   -nBoKLH0YkLZPSI9\n\
    \            Figure 86: Initialization Vector, base64url-encoded\n"
- title: 5.2.3.  Encrypting the Key
  contents:
  - "5.2.3.  Encrypting the Key\n   Performing the key encryption operation over the\
    \ CEK (Figure 85) with\n   the RSA key (Figure 84) produces the following Encrypted\
    \ Key:\n   rT99rwrBTbTI7IJM8fU3Eli7226HEB7IchCxNuh7lCiud48LxeolRdtFF4nzQi\n  \
    \ beYOl5S_PJsAXZwSXtDePz9hk-BbtsTBqC2UsPOdwjC9NhNupNNu9uHIVftDyu\n   cvI6hvALeZ6OGnhNV4v1zx2k7O1D89mAzfw-_kT3tkuorpDU-CpBENfIHX1Q58\n\
    \   -Aad3FzMuo3Fn9buEP2yXakLXYa15BUXQsupM4A1GD4_H4Bd7V3u9h8Gkg8Bpx\n   KdUV9ScfJQTcYm6eJEBz3aSwIaK4T3-dwWpuBOhROQXBosJzS1asnuHtVMt2pK\n\
    \   IIfux5BC6huIvmY7kzV7W7aIUrpYm_3H4zYvyMeq5pGqFmW2k8zpO878TRlZx7\n   pZfPYDSXZyS0CfKKkMozT_qiCwZTSz4duYnt8hS4Z9sGthXn9uDqd6wycMagnQ\n\
    \   fOTs_lycTWmY-aqWVDKhjYNRf03NiwRtb5BE-tOdFwCASQj3uuAgPGrO2AWBe3\n   8UjQb0lvXn1SpyvYZ3WFc7WOJYaTa7A8DRn6MC6T-xDmMuxC0G7S2rscw5lQQU\n\
    \   06MvZTlFOt0UvfuKBa03cxA_nIBIhLMjY2kOTxQMmpDPTr6Cbo8aKaOnx6ASE5\n   Jx9paBpnNmOOKH35j_QlrQhDWUN6A2Gg8iFayJ69xDEdHAVCGRzN3woEI2ozDR\n\
    \   s\n                Figure 87: Encrypted Key, base64url-encoded\n"
- title: 5.2.4.  Encrypting the Content
  contents:
  - "5.2.4.  Encrypting the Content\n   The following is generated before encrypting\
    \ the Plaintext:\n   o  JWE Protected Header; this example uses the header from\
    \ Figure 88,\n      encoded using base64url [RFC4648] to produce Figure 89.\n\
    \   {\n     \"alg\": \"RSA-OAEP\",\n     \"kid\": \"samwise.gamgee@hobbiton.example\"\
    ,\n     \"enc\": \"A256GCM\"\n   }\n                   Figure 88: JWE Protected\
    \ Header JSON\n   eyJhbGciOiJSU0EtT0FFUCIsImtpZCI6InNhbXdpc2UuZ2FtZ2VlQGhvYmJpdG\n\
    \   9uLmV4YW1wbGUiLCJlbmMiOiJBMjU2R0NNIn0\n            Figure 89: JWE Protected\
    \ Header, base64url-encoded\n   Performing the content encryption operation over\
    \ the Plaintext\n   (Figure 72) with the following:\n   o  CEK (Figure 85);\n\
    \   o  Initialization Vector (Figure 86); and\n   o  JWE Protected Header (Figure\
    \ 89) as authenticated data\n   produces the following:\n   o  Ciphertext from\
    \ Figure 90.\n   o  Authentication Tag from Figure 91.\n   o4k2cnGN8rSSw3IDo1YuySkqeS_t2m1GXklSgqBdpACm6UJuJowOHC5ytjqYgR\n\
    \   L-I-soPlwqMUf4UgRWWeaOGNw6vGW-xyM01lTYxrXfVzIIaRdhYtEMRBvBWbEw\n   P7ua1DRfvaOjgZv6Ifa3brcAM64d8p5lhhNcizPersuhw5f-pGYzseva-TUaL8\n\
    \   iWnctc-sSwy7SQmRkfhDjwbz0fz6kFovEgj64X1I5s7E6GLp5fnbYGLa1QUiML\n   7Cc2GxgvI7zqWo0YIEc7aCflLG1-8BboVWFdZKLK9vNoycrYHumwzKluLWEbSV\n\
    \   maPpOslY2n525DxDfWaVFUfKQxMF56vn4B9QMpWAbnypNimbM8zVOw\n                 Figure\
    \ 90: Ciphertext, base64url-encoded\n   UCGiqJxhBI3IFVdPalHHvA\n             Figure\
    \ 91: Authentication Tag, base64url-encoded\n"
- title: 5.2.5.  Output Results
  contents:
  - "5.2.5.  Output Results\n   The following compose the resulting JWE object:\n\
    \   o  JWE Protected Header (Figure 89)\n   o  Encrypted Key (Figure 87)\n   o\
    \  Initialization Vector (Figure 86)\n   o  Ciphertext (Figure 90)\n   o  Authentication\
    \ Tag (Figure 91)\n   The resulting JWE object using the JWE Compact Serialization:\n\
    \   eyJhbGciOiJSU0EtT0FFUCIsImtpZCI6InNhbXdpc2UuZ2FtZ2VlQGhvYmJpdG\n   9uLmV4YW1wbGUiLCJlbmMiOiJBMjU2R0NNIn0\n\
    \   .\n   rT99rwrBTbTI7IJM8fU3Eli7226HEB7IchCxNuh7lCiud48LxeolRdtFF4nzQi\n   beYOl5S_PJsAXZwSXtDePz9hk-BbtsTBqC2UsPOdwjC9NhNupNNu9uHIVftDyu\n\
    \   cvI6hvALeZ6OGnhNV4v1zx2k7O1D89mAzfw-_kT3tkuorpDU-CpBENfIHX1Q58\n   -Aad3FzMuo3Fn9buEP2yXakLXYa15BUXQsupM4A1GD4_H4Bd7V3u9h8Gkg8Bpx\n\
    \   KdUV9ScfJQTcYm6eJEBz3aSwIaK4T3-dwWpuBOhROQXBosJzS1asnuHtVMt2pK\n   IIfux5BC6huIvmY7kzV7W7aIUrpYm_3H4zYvyMeq5pGqFmW2k8zpO878TRlZx7\n\
    \   pZfPYDSXZyS0CfKKkMozT_qiCwZTSz4duYnt8hS4Z9sGthXn9uDqd6wycMagnQ\n   fOTs_lycTWmY-aqWVDKhjYNRf03NiwRtb5BE-tOdFwCASQj3uuAgPGrO2AWBe3\n\
    \   8UjQb0lvXn1SpyvYZ3WFc7WOJYaTa7A8DRn6MC6T-xDmMuxC0G7S2rscw5lQQU\n   06MvZTlFOt0UvfuKBa03cxA_nIBIhLMjY2kOTxQMmpDPTr6Cbo8aKaOnx6ASE5\n\
    \   Jx9paBpnNmOOKH35j_QlrQhDWUN6A2Gg8iFayJ69xDEdHAVCGRzN3woEI2ozDR\n   s\n   .\n\
    \   -nBoKLH0YkLZPSI9\n   .\n   o4k2cnGN8rSSw3IDo1YuySkqeS_t2m1GXklSgqBdpACm6UJuJowOHC5ytjqYgR\n\
    \   L-I-soPlwqMUf4UgRWWeaOGNw6vGW-xyM01lTYxrXfVzIIaRdhYtEMRBvBWbEw\n   P7ua1DRfvaOjgZv6Ifa3brcAM64d8p5lhhNcizPersuhw5f-pGYzseva-TUaL8\n\
    \   iWnctc-sSwy7SQmRkfhDjwbz0fz6kFovEgj64X1I5s7E6GLp5fnbYGLa1QUiML\n   7Cc2GxgvI7zqWo0YIEc7aCflLG1-8BboVWFdZKLK9vNoycrYHumwzKluLWEbSV\n\
    \   maPpOslY2n525DxDfWaVFUfKQxMF56vn4B9QMpWAbnypNimbM8zVOw\n   .\n   UCGiqJxhBI3IFVdPalHHvA\n\
    \                   Figure 92: JWE Compact Serialization\n   The resulting JWE\
    \ object using the general JWE JSON Serialization:\n   {\n     \"recipients\"\
    : [\n       {\n         \"encrypted_key\": \"rT99rwrBTbTI7IJM8fU3Eli7226HEB7IchCxNu\n\
    \             h7lCiud48LxeolRdtFF4nzQibeYOl5S_PJsAXZwSXtDePz9hk-Bb\n         \
    \    tsTBqC2UsPOdwjC9NhNupNNu9uHIVftDyucvI6hvALeZ6OGnhNV4\n             v1zx2k7O1D89mAzfw-_kT3tkuorpDU-CpBENfIHX1Q58-Aad3FzM\n\
    \             uo3Fn9buEP2yXakLXYa15BUXQsupM4A1GD4_H4Bd7V3u9h8Gkg8B\n         \
    \    pxKdUV9ScfJQTcYm6eJEBz3aSwIaK4T3-dwWpuBOhROQXBosJzS1\n             asnuHtVMt2pKIIfux5BC6huIvmY7kzV7W7aIUrpYm_3H4zYvyMeq\n\
    \             5pGqFmW2k8zpO878TRlZx7pZfPYDSXZyS0CfKKkMozT_qiCwZTSz\n         \
    \    4duYnt8hS4Z9sGthXn9uDqd6wycMagnQfOTs_lycTWmY-aqWVDKh\n             jYNRf03NiwRtb5BE-tOdFwCASQj3uuAgPGrO2AWBe38UjQb0lvXn\n\
    \             1SpyvYZ3WFc7WOJYaTa7A8DRn6MC6T-xDmMuxC0G7S2rscw5lQQU\n         \
    \    06MvZTlFOt0UvfuKBa03cxA_nIBIhLMjY2kOTxQMmpDPTr6Cbo8a\n             KaOnx6ASE5Jx9paBpnNmOOKH35j_QlrQhDWUN6A2Gg8iFayJ69xD\n\
    \             EdHAVCGRzN3woEI2ozDRs\"\n       }\n     ],\n     \"protected\":\
    \ \"eyJhbGciOiJSU0EtT0FFUCIsImtpZCI6InNhbXdpc2UuZ2\n         FtZ2VlQGhvYmJpdG9uLmV4YW1wbGUiLCJlbmMiOiJBMjU2R0NNIn0\"\
    ,\n     \"iv\": \"-nBoKLH0YkLZPSI9\",\n     \"ciphertext\": \"o4k2cnGN8rSSw3IDo1YuySkqeS_t2m1GXklSgqBdpACm6\n\
    \         UJuJowOHC5ytjqYgRL-I-soPlwqMUf4UgRWWeaOGNw6vGW-xyM01lTYx\n         rXfVzIIaRdhYtEMRBvBWbEwP7ua1DRfvaOjgZv6Ifa3brcAM64d8p5lh\n\
    \         hNcizPersuhw5f-pGYzseva-TUaL8iWnctc-sSwy7SQmRkfhDjwbz0fz\n         6kFovEgj64X1I5s7E6GLp5fnbYGLa1QUiML7Cc2GxgvI7zqWo0YIEc7a\n\
    \         CflLG1-8BboVWFdZKLK9vNoycrYHumwzKluLWEbSVmaPpOslY2n525Dx\n         DfWaVFUfKQxMF56vn4B9QMpWAbnypNimbM8zVOw\"\
    ,\n     \"tag\": \"UCGiqJxhBI3IFVdPalHHvA\"\n   }\n                 Figure 93:\
    \ General JWE JSON Serialization\n   The resulting JWE object using the flattened\
    \ JWE JSON Serialization:\n   {\n     \"protected\": \"eyJhbGciOiJSU0EtT0FFUCIsImtpZCI6InNhbXdpc2UuZ2\n\
    \         FtZ2VlQGhvYmJpdG9uLmV4YW1wbGUiLCJlbmMiOiJBMjU2R0NNIn0\",\n     \"encrypted_key\"\
    : \"rT99rwrBTbTI7IJM8fU3Eli7226HEB7IchCxNuh7lC\n         iud48LxeolRdtFF4nzQibeYOl5S_PJsAXZwSXtDePz9hk-BbtsTBqC2U\n\
    \         sPOdwjC9NhNupNNu9uHIVftDyucvI6hvALeZ6OGnhNV4v1zx2k7O1D89\n         mAzfw-_kT3tkuorpDU-CpBENfIHX1Q58-Aad3FzMuo3Fn9buEP2yXakL\n\
    \         XYa15BUXQsupM4A1GD4_H4Bd7V3u9h8Gkg8BpxKdUV9ScfJQTcYm6eJE\n         Bz3aSwIaK4T3-dwWpuBOhROQXBosJzS1asnuHtVMt2pKIIfux5BC6huI\n\
    \         vmY7kzV7W7aIUrpYm_3H4zYvyMeq5pGqFmW2k8zpO878TRlZx7pZfPYD\n         SXZyS0CfKKkMozT_qiCwZTSz4duYnt8hS4Z9sGthXn9uDqd6wycMagnQ\n\
    \         fOTs_lycTWmY-aqWVDKhjYNRf03NiwRtb5BE-tOdFwCASQj3uuAgPGrO\n         2AWBe38UjQb0lvXn1SpyvYZ3WFc7WOJYaTa7A8DRn6MC6T-xDmMuxC0G\n\
    \         7S2rscw5lQQU06MvZTlFOt0UvfuKBa03cxA_nIBIhLMjY2kOTxQMmpDP\n         Tr6Cbo8aKaOnx6ASE5Jx9paBpnNmOOKH35j_QlrQhDWUN6A2Gg8iFayJ\n\
    \         69xDEdHAVCGRzN3woEI2ozDRs\",\n     \"iv\": \"-nBoKLH0YkLZPSI9\",\n \
    \    \"ciphertext\": \"o4k2cnGN8rSSw3IDo1YuySkqeS_t2m1GXklSgqBdpACm6\n       \
    \  UJuJowOHC5ytjqYgRL-I-soPlwqMUf4UgRWWeaOGNw6vGW-xyM01lTYx\n         rXfVzIIaRdhYtEMRBvBWbEwP7ua1DRfvaOjgZv6Ifa3brcAM64d8p5lh\n\
    \         hNcizPersuhw5f-pGYzseva-TUaL8iWnctc-sSwy7SQmRkfhDjwbz0fz\n         6kFovEgj64X1I5s7E6GLp5fnbYGLa1QUiML7Cc2GxgvI7zqWo0YIEc7a\n\
    \         CflLG1-8BboVWFdZKLK9vNoycrYHumwzKluLWEbSVmaPpOslY2n525Dx\n         DfWaVFUfKQxMF56vn4B9QMpWAbnypNimbM8zVOw\"\
    ,\n     \"tag\": \"UCGiqJxhBI3IFVdPalHHvA\"\n   }\n                Figure 94:\
    \ Flattened JWE JSON Serialization\n"
- title: 5.3.  Key Wrap Using PBES2-AES-KeyWrap with AES-CBC-HMAC-SHA2
  contents:
  - "5.3.  Key Wrap Using PBES2-AES-KeyWrap with AES-CBC-HMAC-SHA2\n   The example\
    \ illustrates encrypting content using the\n   \"PBES2-HS512+A256KW\" (PBES2 Password-based\
    \ Encryption using HMAC-\n   SHA-512 and AES-256-KeyWrap) key encryption algorithm\
    \ with the\n   \"A128CBC-HS256\" (AES-128-CBC-HMAC-SHA-256) content encryption\n\
    \   algorithm.\n   A common use of password-based encryption is the import/export\
    \ of\n   keys.  Therefore, this example uses a JWK Set for the Plaintext\n   content\
    \ instead of the Plaintext from Figure 72.\n   Note that if password-based encryption\
    \ is used for multiple\n   recipients, it is expected that each recipient use\
    \ different values\n   for the PBES2 parameters \"p2s\" and \"p2c\".\n   Note\
    \ that whitespace is added for readability as described in\n   Section 1.1.\n"
- title: 5.3.1.  Input Factors
  contents:
  - "5.3.1.  Input Factors\n   The following are supplied before beginning the encryption\
    \ process:\n   o  Plaintext content; this example uses the Plaintext from Figure\
    \ 95\n      (NOTE: All whitespace was added for readability).\n   o  Password;\
    \ this example uses the password from Figure 96 -- with\n      the sequence \"\
    \\xe2\\x80\\x93\" replaced with (U+2013 EN DASH).\n   o  \"alg\" parameter of\
    \ \"PBES2-HS512+A256KW\".\n   o  \"enc\" parameter of \"A128CBC-HS256\".\n   {\n\
    \     \"keys\": [\n       {\n         \"kty\": \"oct\",\n         \"kid\": \"\
    77c7e2b8-6e13-45cf-8672-617b5b45243a\",\n         \"use\": \"enc\",\n        \
    \ \"alg\": \"A128GCM\",\n         \"k\": \"XctOhJAkA-pD9Lh7ZgW_2A\"\n       },\n\
    \       {\n         \"kty\": \"oct\",\n         \"kid\": \"81b20965-8332-43d9-a468-82160ad91ac8\"\
    ,\n         \"use\": \"enc\",\n         \"alg\": \"A128KW\",\n         \"k\":\
    \ \"GZy6sIZ6wl9NJOKB-jnmVQ\"\n       },\n       {\n         \"kty\": \"oct\",\n\
    \         \"kid\": \"18ec08e1-bfa9-4d95-b205-2b4dd1d4321d\",\n         \"use\"\
    : \"enc\",\n         \"alg\": \"A256GCMKW\",\n         \"k\": \"qC57l_uxcm7Nm3K-ct4GFjx8tM1U8CZ0NLBvdQstiS8\"\
    \n       }\n     ]\n   }\n                       Figure 95: Plaintext Content\n\
    \   entrap_o\\xe2\\x80\\x93peter_long\\xe2\\x80\\x93credit_tun\n             \
    \               Figure 96: Password\n"
- title: 5.3.2.  Generated Factors
  contents:
  - "5.3.2.  Generated Factors\n   The following are generated before encrypting:\n\
    \   o  AES symmetric key as the Content Encryption Key (CEK); this\n      example\
    \ uses the key from Figure 97.\n   o  Initialization Vector; this example uses\
    \ the Initialization Vector\n      from Figure 98.\n   uwsjJXaBK407Qaf0_zpcpmr1Cs0CC50hIUEyGNEt3m0\n\
    \           Figure 97: Content Encryption Key, base64url-encoded\n   VBiCzVHNoLiR3F4V82uoTQ\n\
    \            Figure 98: Initialization Vector, base64url-encoded\n"
- title: 5.3.3.  Encrypting the Key
  contents:
  - "5.3.3.  Encrypting the Key\n   The following are generated before encrypting\
    \ the CEK:\n   o  Salt input; this example uses the salt input from Figure 99.\n\
    \   o  Iteration count; this example uses the iteration count 8192.\n   8Q1SzinasR3xchYz6ZZcHA\n\
    \                 Figure 99: Salt Input, base64url-encoded\n   Performing the\
    \ key encryption operation over the CEK (Figure 97) with\n   the following:\n\
    \   o  Password (Figure 96);\n   o  Salt input (Figure 99), encoded as an octet\
    \ string; and\n   o  Iteration count (8192)\n   produces the following Encrypted\
    \ Key:\n   d3qNhUWfqheyPp4H8sjOWsDYajoej4c5Je6rlUtFPWdgtURtmeDV1g\n          \
    \     Figure 100: Encrypted Key, base64url-encoded\n"
- title: 5.3.4.  Encrypting the Content
  contents:
  - "5.3.4.  Encrypting the Content\n   The following is generated before encrypting\
    \ the content:\n   o  JWE Protected Header; this example uses the header from\n\
    \      Figure 101, encoded using base64url [RFC4648] to produce\n      Figure\
    \ 102.\n   {\n     \"alg\": \"PBES2-HS512+A256KW\",\n     \"p2s\": \"8Q1SzinasR3xchYz6ZZcHA\"\
    ,\n     \"p2c\": 8192,\n     \"cty\": \"jwk-set+json\",\n     \"enc\": \"A128CBC-HS256\"\
    \n   }\n                   Figure 101: JWE Protected Header JSON\n   eyJhbGciOiJQQkVTMi1IUzUxMitBMjU2S1ciLCJwMnMiOiI4UTFTemluYXNSM3\n\
    \   hjaFl6NlpaY0hBIiwicDJjIjo4MTkyLCJjdHkiOiJqd2stc2V0K2pzb24iLCJl\n   bmMiOiJBMTI4Q0JDLUhTMjU2In0\n\
    \            Figure 102: JWE Protected Header, base64url-encoded\n   Performing\
    \ the content encryption operation over the Plaintext\n   (Figure 95) with the\
    \ following:\n   o  CEK (Figure 97);\n   o  Initialization Vector (Figure 98);\
    \ and\n   o  JWE Protected Header (Figure 102) as authenticated data\n   produces\
    \ the following:\n   o  Ciphertext from Figure 103.\n   o  Authentication Tag\
    \ from Figure 104.\n   23i-Tb1AV4n0WKVSSgcQrdg6GRqsUKxjruHXYsTHAJLZ2nsnGIX86vMXqIi6IR\n\
    \   sfywCRFzLxEcZBRnTvG3nhzPk0GDD7FMyXhUHpDjEYCNA_XOmzg8yZR9oyjo6l\n   TF6si4q9FZ2EhzgFQCLO_6h5EVg3vR75_hkBsnuoqoM3dwejXBtIodN84PeqMb\n\
    \   6asmas_dpSsz7H10fC5ni9xIz424givB1YLldF6exVmL93R3fOoOJbmk2GBQZL\n   _SEGllv2cQsBgeprARsaQ7Bq99tT80coH8ItBjgV08AtzXFFsx9qKvC982KLKd\n\
    \   PQMTlVJKkqtV4Ru5LEVpBZXBnZrtViSOgyg6AiuwaS-rCrcD_ePOGSuxvgtrok\n   AKYPqmXUeRdjFJwafkYEkiuDCV9vWGAi1DH2xTafhJwcmywIyzi4BqRpmdn_N-\n\
    \   zl5tuJYyuvKhjKv6ihbsV_k1hJGPGAxJ6wUpmwC4PTQ2izEm0TuSE8oMKdTw8V\n   3kobXZ77ulMwDs4p\n\
    \                 Figure 103: Ciphertext, base64url-encoded\n   0HlwodAhOCILG5SQ2LQ9dg\n\
    \             Figure 104: Authentication Tag, base64url-encoded\n"
- title: 5.3.5.  Output Results
  contents:
  - "5.3.5.  Output Results\n   The following compose the resulting JWE object:\n\
    \   o  JWE Protected Header (Figure 102)\n   o  Encrypted Key (Figure 100)\n \
    \  o  Initialization Vector (Figure 98)\n   o  Ciphertext (Figure 103)\n   o \
    \ Authentication Tag (Figure 104)\n   The resulting JWE object using the JWE Compact\
    \ Serialization:\n   eyJhbGciOiJQQkVTMi1IUzUxMitBMjU2S1ciLCJwMnMiOiI4UTFTemluYXNSM3\n\
    \   hjaFl6NlpaY0hBIiwicDJjIjo4MTkyLCJjdHkiOiJqd2stc2V0K2pzb24iLCJl\n   bmMiOiJBMTI4Q0JDLUhTMjU2In0\n\
    \   .\n   d3qNhUWfqheyPp4H8sjOWsDYajoej4c5Je6rlUtFPWdgtURtmeDV1g\n   .\n   VBiCzVHNoLiR3F4V82uoTQ\n\
    \   .\n   23i-Tb1AV4n0WKVSSgcQrdg6GRqsUKxjruHXYsTHAJLZ2nsnGIX86vMXqIi6IR\n   sfywCRFzLxEcZBRnTvG3nhzPk0GDD7FMyXhUHpDjEYCNA_XOmzg8yZR9oyjo6l\n\
    \   TF6si4q9FZ2EhzgFQCLO_6h5EVg3vR75_hkBsnuoqoM3dwejXBtIodN84PeqMb\n   6asmas_dpSsz7H10fC5ni9xIz424givB1YLldF6exVmL93R3fOoOJbmk2GBQZL\n\
    \   _SEGllv2cQsBgeprARsaQ7Bq99tT80coH8ItBjgV08AtzXFFsx9qKvC982KLKd\n   PQMTlVJKkqtV4Ru5LEVpBZXBnZrtViSOgyg6AiuwaS-rCrcD_ePOGSuxvgtrok\n\
    \   AKYPqmXUeRdjFJwafkYEkiuDCV9vWGAi1DH2xTafhJwcmywIyzi4BqRpmdn_N-\n   zl5tuJYyuvKhjKv6ihbsV_k1hJGPGAxJ6wUpmwC4PTQ2izEm0TuSE8oMKdTw8V\n\
    \   3kobXZ77ulMwDs4p\n   .\n   0HlwodAhOCILG5SQ2LQ9dg\n                   Figure\
    \ 105: JWE Compact Serialization\n   The resulting JWE object using the general\
    \ JWE JSON Serialization:\n   {\n     \"recipients\": [\n       {\n         \"\
    encrypted_key\": \"d3qNhUWfqheyPp4H8sjOWsDYajoej4c5Je6rlU\n             tFPWdgtURtmeDV1g\"\
    \n       }\n     ],\n     \"protected\": \"eyJhbGciOiJQQkVTMi1IUzUxMitBMjU2S1ciLCJwMnMiOi\n\
    \         I4UTFTemluYXNSM3hjaFl6NlpaY0hBIiwicDJjIjo4MTkyLCJjdHkiOi\n         Jqd2stc2V0K2pzb24iLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0\"\
    ,\n     \"iv\": \"VBiCzVHNoLiR3F4V82uoTQ\",\n     \"ciphertext\": \"23i-Tb1AV4n0WKVSSgcQrdg6GRqsUKxjruHXYsTHAJLZ2\n\
    \         nsnGIX86vMXqIi6IRsfywCRFzLxEcZBRnTvG3nhzPk0GDD7FMyXhUHpD\n         jEYCNA_XOmzg8yZR9oyjo6lTF6si4q9FZ2EhzgFQCLO_6h5EVg3vR75_\n\
    \         hkBsnuoqoM3dwejXBtIodN84PeqMb6asmas_dpSsz7H10fC5ni9xIz42\n         4givB1YLldF6exVmL93R3fOoOJbmk2GBQZL_SEGllv2cQsBgeprARsaQ\n\
    \         7Bq99tT80coH8ItBjgV08AtzXFFsx9qKvC982KLKdPQMTlVJKkqtV4Ru\n         5LEVpBZXBnZrtViSOgyg6AiuwaS-rCrcD_ePOGSuxvgtrokAKYPqmXUe\n\
    \         RdjFJwafkYEkiuDCV9vWGAi1DH2xTafhJwcmywIyzi4BqRpmdn_N-zl5\n         tuJYyuvKhjKv6ihbsV_k1hJGPGAxJ6wUpmwC4PTQ2izEm0TuSE8oMKdT\n\
    \         w8V3kobXZ77ulMwDs4p\",\n     \"tag\": \"0HlwodAhOCILG5SQ2LQ9dg\"\n \
    \  }\n                Figure 106: General JWE JSON Serialization\n   The resulting\
    \ JWE object using the flattened JWE JSON Serialization:\n   {\n     \"protected\"\
    : \"eyJhbGciOiJQQkVTMi1IUzUxMitBMjU2S1ciLCJwMnMiOi\n         I4UTFTemluYXNSM3hjaFl6NlpaY0hBIiwicDJjIjo4MTkyLCJjdHkiOi\n\
    \         Jqd2stc2V0K2pzb24iLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0\",\n     \"encrypted_key\"\
    : \"d3qNhUWfqheyPp4H8sjOWsDYajoej4c5Je6rlUtFPW\n         dgtURtmeDV1g\",\n   \
    \  \"iv\": \"VBiCzVHNoLiR3F4V82uoTQ\",\n     \"ciphertext\": \"23i-Tb1AV4n0WKVSSgcQrdg6GRqsUKxjruHXYsTHAJLZ2\n\
    \         nsnGIX86vMXqIi6IRsfywCRFzLxEcZBRnTvG3nhzPk0GDD7FMyXhUHpD\n         jEYCNA_XOmzg8yZR9oyjo6lTF6si4q9FZ2EhzgFQCLO_6h5EVg3vR75_\n\
    \         hkBsnuoqoM3dwejXBtIodN84PeqMb6asmas_dpSsz7H10fC5ni9xIz42\n         4givB1YLldF6exVmL93R3fOoOJbmk2GBQZL_SEGllv2cQsBgeprARsaQ\n\
    \         7Bq99tT80coH8ItBjgV08AtzXFFsx9qKvC982KLKdPQMTlVJKkqtV4Ru\n         5LEVpBZXBnZrtViSOgyg6AiuwaS-rCrcD_ePOGSuxvgtrokAKYPqmXUe\n\
    \         RdjFJwafkYEkiuDCV9vWGAi1DH2xTafhJwcmywIyzi4BqRpmdn_N-zl5\n         tuJYyuvKhjKv6ihbsV_k1hJGPGAxJ6wUpmwC4PTQ2izEm0TuSE8oMKdT\n\
    \         w8V3kobXZ77ulMwDs4p\",\n     \"tag\": \"0HlwodAhOCILG5SQ2LQ9dg\"\n \
    \  }\n               Figure 107: Flattened JWE JSON Serialization\n"
- title: 5.4.  Key Agreement with Key Wrapping Using ECDH-ES and AES-KeyWrap with
  contents:
  - "5.4.  Key Agreement with Key Wrapping Using ECDH-ES and AES-KeyWrap with\n  \
    \    AES-GCM\n   This example illustrates encrypting content using the \"ECDH-\n\
    \   ES+A128KW\" (Elliptic Curve Diffie-Hellman Ephemeral-Static with AES-\n  \
    \ 128-KeyWrap) key encryption algorithm and the \"A128GCM\" (AES-GCM)\n   content\
    \ encryption algorithm.\n   Note that only the EC public key is necessary to perform\
    \ the key\n   agreement.  However, the example includes the EC private key to\
    \ allow\n   readers to validate the output.\n   Note that whitespace is added\
    \ for readability as described in\n   Section 1.1.\n"
- title: 5.4.1.  Input Factors
  contents:
  - "5.4.1.  Input Factors\n   The following are supplied before beginning the encryption\
    \ process:\n   o  Plaintext content; this example uses the content from Figure\
    \ 72.\n   o  EC public key; this example uses the public key from Figure 108.\n\
    \   o  \"alg\" parameter of \"ECDH-ES+A128KW\".\n   o  \"enc\" parameter of \"\
    A128GCM\".\n   {\n     \"kty\": \"EC\",\n     \"kid\": \"peregrin.took@tuckborough.example\"\
    ,\n     \"use\": \"enc\",\n     \"crv\": \"P-384\",\n     \"x\": \"YU4rRUzdmVqmRtWOs2OpDE_T5fsNIodcG8G5FWPrTPMyxpzsSOGaQL\n\
    \         pe2FpxBmu2\",\n     \"y\": \"A8-yxCHxkfBz3hKZfI1jUYMjUhsEveZ9THuwFjH2sCNdtksRJU7D5-\n\
    \         SkgaFL1ETP\",\n     \"d\": \"iTx2pk7wW-GqJkHcEkFQb2EFyYcO7RugmaW3mRrQVAOUiPommT0Idn\n\
    \         YK2xDlZh-j\"\n   }\n            Figure 108: Elliptic Curve P-384 Key,\
    \ in JWK Format\n   (NOTE: While the key includes the private parameters, only\
    \ the public\n   parameters \"crv\", \"x\", and \"y\" are necessary for the encryption\n\
    \   operation.)\n"
- title: 5.4.2.  Generated Factors
  contents:
  - "5.4.2.  Generated Factors\n   The following are generated before encrypting:\n\
    \   o  AES symmetric key as the Content Encryption Key (CEK); this\n      example\
    \ uses the key from Figure 109.\n   o  Initialization Vector; this example uses\
    \ the Initialization Vector\n      from Figure 110.\n   Nou2ueKlP70ZXDbq9UrRwg\n\
    \           Figure 109: Content Encryption Key, base64url-encoded\n   mH-G2zVqgztUtnW_\n\
    \           Figure 110: Initialization Vector, base64url-encoded\n"
- title: 5.4.3.  Encrypting the Key
  contents:
  - "5.4.3.  Encrypting the Key\n   To encrypt the Content Encryption Key, the following\
    \ is generated:\n   o  Ephemeral EC private key on the same curve as the EC public\
    \ key;\n      this example uses the private key from Figure 111.\n   {\n     \"\
    kty\": \"EC\",\n     \"crv\": \"P-384\",\n     \"x\": \"uBo4kHPw6kbjx5l0xowrd_oYzBmaz-GKFZu4xAFFkbYiWgutEK6iuE\n\
    \         DsQ6wNdNg3\",\n     \"y\": \"sp3p5SGhZVC2faXumI-e9JU2Mo8KpoYrFDr5yPNVtW4PgEwZOyQTA-\n\
    \         JdaY8tb7E0\",\n     \"d\": \"D5H4Y_5PSKZvhfVFbcCYJOtcGZygRgfZkpsBr59Icmmhe9sW6nkZ8W\n\
    \         fwhinUfWJg\"\n   }\n       Figure 111: Ephemeral Elliptic Curve P-384\
    \ Key, in JWK Format\n   Performing the key encryption operation over the CEK\
    \ (Figure 109)\n   with the following:\n   o  The static Elliptic Curve public\
    \ key (Figure 108); and\n   o  The ephemeral Elliptic Curve private key (Figure\
    \ 111)\n   produces the following JWE Encrypted Key:\n   0DJjBXri_kBcC46IkU5_Jk9BqaQeHdv2\n\
    \               Figure 112: Encrypted Key, base64url-encoded\n"
- title: 5.4.4.  Encrypting the Content
  contents:
  - "5.4.4.  Encrypting the Content\n   The following is generated before encrypting\
    \ the content:\n   o  JWE Protected Header; this example uses the header from\n\
    \      Figure 113, encoded to base64url [RFC4648] as Figure 114.\n   {\n     \"\
    alg\": \"ECDH-ES+A128KW\",\n     \"kid\": \"peregrin.took@tuckborough.example\"\
    ,\n     \"epk\": {\n       \"kty\": \"EC\",\n       \"crv\": \"P-384\",\n    \
    \   \"x\": \"uBo4kHPw6kbjx5l0xowrd_oYzBmaz-GKFZu4xAFFkbYiWgutEK6i\n          \
    \ uEDsQ6wNdNg3\",\n       \"y\": \"sp3p5SGhZVC2faXumI-e9JU2Mo8KpoYrFDr5yPNVtW4PgEwZOyQT\n\
    \           A-JdaY8tb7E0\"\n     },\n     \"enc\": \"A128GCM\"\n   }\n       \
    \            Figure 113: JWE Protected Header JSON\n   eyJhbGciOiJFQ0RILUVTK0ExMjhLVyIsImtpZCI6InBlcmVncmluLnRvb2tAdH\n\
    \   Vja2Jvcm91Z2guZXhhbXBsZSIsImVwayI6eyJrdHkiOiJFQyIsImNydiI6IlAt\n   Mzg0IiwieCI6InVCbzRrSFB3Nmtiang1bDB4b3dyZF9vWXpCbWF6LUdLRlp1NH\n\
    \   hBRkZrYllpV2d1dEVLNml1RURzUTZ3TmROZzMiLCJ5Ijoic3AzcDVTR2haVkMy\n   ZmFYdW1JLWU5SlUyTW84S3BvWXJGRHI1eVBOVnRXNFBnRXdaT3lRVEEtSmRhWT\n\
    \   h0YjdFMCJ9LCJlbmMiOiJBMTI4R0NNIn0\n            Figure 114: JWE Protected Header,\
    \ base64url-encoded\n   Performing the content encryption operation on the Plaintext\n\
    \   (Figure 72) using the following:\n   o  CEK (Figure 109);\n   o  Initialization\
    \ Vector (Figure 110); and\n   o  JWE Protected Header (Figure 114) as authenticated\
    \ data\n   produces the following:\n   o  Ciphertext from Figure 115.\n   o  Authentication\
    \ Tag from Figure 116.\n   tkZuOO9h95OgHJmkkrfLBisku8rGf6nzVxhRM3sVOhXgz5NJ76oID7lpnAi_cP\n\
    \   WJRCjSpAaUZ5dOR3Spy7QuEkmKx8-3RCMhSYMzsXaEwDdXta9Mn5B7cCBoJKB0\n   IgEnj_qfo1hIi-uEkUpOZ8aLTZGHfpl05jMwbKkTe2yK3mjF6SBAsgicQDVCkc\n\
    \   Y9BLluzx1RmC3ORXaM0JaHPB93YcdSDGgpgBWMVrNU1ErkjcMqMoT_wtCex3w0\n   3XdLkjXIuEr2hWgeP-nkUZTPU9EoGSPj6fAS-bSz87RCPrxZdj_iVyC6QWcqAu\n\
    \   07WNhjzJEPc4jVntRJ6K53NgPQ5p99l3Z408OUqj4ioYezbS6vTPlQ\n                 Figure\
    \ 115: Ciphertext, base64url-encoded\n   WuGzxmcreYjpHGJoa17EBg\n            \
    \ Figure 116: Authentication Tag, base64url-encoded\n"
- title: 5.4.5.  Output Results
  contents:
  - "5.4.5.  Output Results\n   The following compose the resulting JWE object:\n\
    \   o  JWE Protected Header (Figure 114)\n   o  Encrypted Key (Figure 112)\n \
    \  o  Initialization Vector (Figure 110)\n   o  Ciphertext (Figure 115)\n   o\
    \  Authentication Tag (Figure 116)\n   The resulting JWE object using the JWE\
    \ Compact Serialization:\n   eyJhbGciOiJFQ0RILUVTK0ExMjhLVyIsImtpZCI6InBlcmVncmluLnRvb2tAdH\n\
    \   Vja2Jvcm91Z2guZXhhbXBsZSIsImVwayI6eyJrdHkiOiJFQyIsImNydiI6IlAt\n   Mzg0IiwieCI6InVCbzRrSFB3Nmtiang1bDB4b3dyZF9vWXpCbWF6LUdLRlp1NH\n\
    \   hBRkZrYllpV2d1dEVLNml1RURzUTZ3TmROZzMiLCJ5Ijoic3AzcDVTR2haVkMy\n   ZmFYdW1JLWU5SlUyTW84S3BvWXJGRHI1eVBOVnRXNFBnRXdaT3lRVEEtSmRhWT\n\
    \   h0YjdFMCJ9LCJlbmMiOiJBMTI4R0NNIn0\n   .\n   0DJjBXri_kBcC46IkU5_Jk9BqaQeHdv2\n\
    \   .\n   mH-G2zVqgztUtnW_\n   .\n   tkZuOO9h95OgHJmkkrfLBisku8rGf6nzVxhRM3sVOhXgz5NJ76oID7lpnAi_cP\n\
    \   WJRCjSpAaUZ5dOR3Spy7QuEkmKx8-3RCMhSYMzsXaEwDdXta9Mn5B7cCBoJKB0\n   IgEnj_qfo1hIi-uEkUpOZ8aLTZGHfpl05jMwbKkTe2yK3mjF6SBAsgicQDVCkc\n\
    \   Y9BLluzx1RmC3ORXaM0JaHPB93YcdSDGgpgBWMVrNU1ErkjcMqMoT_wtCex3w0\n   3XdLkjXIuEr2hWgeP-nkUZTPU9EoGSPj6fAS-bSz87RCPrxZdj_iVyC6QWcqAu\n\
    \   07WNhjzJEPc4jVntRJ6K53NgPQ5p99l3Z408OUqj4ioYezbS6vTPlQ\n   .\n   WuGzxmcreYjpHGJoa17EBg\n\
    \                   Figure 117: JWE Compact Serialization\n   The resulting JWE\
    \ object using the general JWE JSON Serialization:\n   {\n     \"recipients\"\
    : [\n       {\n         \"encrypted_key\": \"0DJjBXri_kBcC46IkU5_Jk9BqaQeHdv2\"\
    \n       }\n     ],\n     \"protected\": \"eyJhbGciOiJFQ0RILUVTK0ExMjhLVyIsImtpZCI6InBlcm\n\
    \         VncmluLnRvb2tAdHVja2Jvcm91Z2guZXhhbXBsZSIsImVwayI6eyJrdH\n         kiOiJFQyIsImNydiI6IlAtMzg0IiwieCI6InVCbzRrSFB3Nmtiang1bD\n\
    \         B4b3dyZF9vWXpCbWF6LUdLRlp1NHhBRkZrYllpV2d1dEVLNml1RURzUT\n         Z3TmROZzMiLCJ5Ijoic3AzcDVTR2haVkMyZmFYdW1JLWU5SlUyTW84S3\n\
    \         BvWXJGRHI1eVBOVnRXNFBnRXdaT3lRVEEtSmRhWTh0YjdFMCJ9LCJlbm\n         MiOiJBMTI4R0NNIn0\"\
    ,\n     \"iv\": \"mH-G2zVqgztUtnW_\",\n     \"ciphertext\": \"tkZuOO9h95OgHJmkkrfLBisku8rGf6nzVxhRM3sVOhXgz\n\
    \         5NJ76oID7lpnAi_cPWJRCjSpAaUZ5dOR3Spy7QuEkmKx8-3RCMhSYMzs\n         XaEwDdXta9Mn5B7cCBoJKB0IgEnj_qfo1hIi-uEkUpOZ8aLTZGHfpl05\n\
    \         jMwbKkTe2yK3mjF6SBAsgicQDVCkcY9BLluzx1RmC3ORXaM0JaHPB93Y\n         cdSDGgpgBWMVrNU1ErkjcMqMoT_wtCex3w03XdLkjXIuEr2hWgeP-nkU\n\
    \         ZTPU9EoGSPj6fAS-bSz87RCPrxZdj_iVyC6QWcqAu07WNhjzJEPc4jVn\n         tRJ6K53NgPQ5p99l3Z408OUqj4ioYezbS6vTPlQ\"\
    ,\n     \"tag\": \"WuGzxmcreYjpHGJoa17EBg\"\n   }\n                Figure 118:\
    \ General JWE JSON Serialization\n   The resulting JWE object using the flattened\
    \ JWE JSON Serialization:\n   {\n     \"protected\": \"eyJhbGciOiJFQ0RILUVTK0ExMjhLVyIsImtpZCI6InBlcm\n\
    \         VncmluLnRvb2tAdHVja2Jvcm91Z2guZXhhbXBsZSIsImVwayI6eyJrdH\n         kiOiJFQyIsImNydiI6IlAtMzg0IiwieCI6InVCbzRrSFB3Nmtiang1bD\n\
    \         B4b3dyZF9vWXpCbWF6LUdLRlp1NHhBRkZrYllpV2d1dEVLNml1RURzUT\n         Z3TmROZzMiLCJ5Ijoic3AzcDVTR2haVkMyZmFYdW1JLWU5SlUyTW84S3\n\
    \         BvWXJGRHI1eVBOVnRXNFBnRXdaT3lRVEEtSmRhWTh0YjdFMCJ9LCJlbm\n         MiOiJBMTI4R0NNIn0\"\
    ,\n     \"encrypted_key\": \"0DJjBXri_kBcC46IkU5_Jk9BqaQeHdv2\",\n     \"iv\"\
    : \"mH-G2zVqgztUtnW_\",\n     \"ciphertext\": \"tkZuOO9h95OgHJmkkrfLBisku8rGf6nzVxhRM3sVOhXgz\n\
    \         5NJ76oID7lpnAi_cPWJRCjSpAaUZ5dOR3Spy7QuEkmKx8-3RCMhSYMzs\n         XaEwDdXta9Mn5B7cCBoJKB0IgEnj_qfo1hIi-uEkUpOZ8aLTZGHfpl05\n\
    \         jMwbKkTe2yK3mjF6SBAsgicQDVCkcY9BLluzx1RmC3ORXaM0JaHPB93Y\n         cdSDGgpgBWMVrNU1ErkjcMqMoT_wtCex3w03XdLkjXIuEr2hWgeP-nkU\n\
    \         ZTPU9EoGSPj6fAS-bSz87RCPrxZdj_iVyC6QWcqAu07WNhjzJEPc4jVn\n         tRJ6K53NgPQ5p99l3Z408OUqj4ioYezbS6vTPlQ\"\
    ,\n     \"tag\": \"WuGzxmcreYjpHGJoa17EBg\"\n   }\n               Figure 119:\
    \ Flattened JWE JSON Serialization\n"
- title: 5.5.  Key Agreement Using ECDH-ES with AES-CBC-HMAC-SHA2
  contents:
  - "5.5.  Key Agreement Using ECDH-ES with AES-CBC-HMAC-SHA2\n   This example illustrates\
    \ encrypting content using the \"ECDH-ES\"\n   (Elliptic Curve Diffie-Hellman\
    \ Ephemeral-Static) key agreement\n   algorithm and the \"A128CBC-HS256\" (AES-128-CBC-HMAC-SHA-256)\
    \ content\n   encryption algorithm.\n   Note that only the EC public key is necessary\
    \ to perform the key\n   agreement.  However, the example includes the EC private\
    \ key to allow\n   readers to validate the output.\n   Note that whitespace is\
    \ added for readability as described in\n   Section 1.1.\n"
- title: 5.5.1.  Input Factors
  contents:
  - "5.5.1.  Input Factors\n   The following are supplied before beginning the encryption\
    \ process:\n   o  Plaintext content; this example uses the content from Figure\
    \ 72.\n   o  EC public key; this example uses the public key from Figure 120.\n\
    \   o  \"alg\" parameter of \"ECDH-ES\".\n   o  \"enc\" parameter of \"A128CBC-HS256\"\
    .\n   {\n     \"kty\": \"EC\",\n     \"kid\": \"meriadoc.brandybuck@buckland.example\"\
    ,\n     \"use\": \"enc\",\n     \"crv\": \"P-256\",\n     \"x\": \"Ze2loSV3wrroKUN_4zhwGhCqo3Xhu1td4QjeQ5wIVR0\"\
    ,\n     \"y\": \"HlLtdXARY_f55A3fnzQbPcm6hgr34Mp8p-nuzQCE0Zw\",\n     \"d\": \"\
    r_kHyZ-a06rmxM3yESK84r1otSg-aQcVStkRhA-iCM8\"\n   }\n                   Figure\
    \ 120: Elliptic Curve P-256 Key\n   (NOTE: While the key includes the private\
    \ parameters, only the public\n   parameters \"crv\", \"x\", and \"y\" are necessary\
    \ for the encryption\n   operation.)\n"
- title: 5.5.2.  Generated Factors
  contents:
  - "5.5.2.  Generated Factors\n   The following is generated before encrypting:\n\
    \   o  Initialization Vector; this example uses the Initialization Vector\n  \
    \    from Figure 121.\n   yc9N8v5sYyv3iGQT926IUg\n           Figure 121: Initialization\
    \ Vector, base64url-encoded\n   NOTE: The Content Encryption Key (CEK) is not\
    \ randomly generated;\n   instead, it is determined using ECDH-ES key agreement.\n"
- title: 5.5.3.  Key Agreement
  contents:
  - "5.5.3.  Key Agreement\n   The following is generated to agree on a CEK:\n   o\
    \  Ephemeral private key; this example uses the private key from\n      Figure\
    \ 122.\n   {\n     \"kty\": \"EC\",\n     \"crv\": \"P-256\",\n     \"x\": \"\
    mPUKT_bAWGHIhg0TpjjqVsP1rXWQu_vwVOHHtNkdYoA\",\n     \"y\": \"8BQAsImGeAS46fyWw5MhYfGTT0IjBpFw2SS34Dv4Irs\"\
    ,\n     \"d\": \"AtH35vJsQ9SGjYfOsjUxYXQKrPH3FjZHmEtSKoSN8cM\"\n   }\n       \
    \      Figure 122: Ephemeral Private Key, in JWK Format\n   Performing the ECDH\
    \ operation using the static EC public key\n   (Figure 120) over the ephemeral\
    \ private key (Figure 122) produces the\n   following CEK:\n   hzHdlfQIAEehb8Hrd_mFRhKsKLEzPfshfXs9l6areCc\n\
    \      Figure 123: Agreed-to Content Encryption Key, base64url-encoded\n"
- title: 5.5.4.  Encrypting the Content
  contents:
  - "5.5.4.  Encrypting the Content\n   The following is generated before encrypting\
    \ the content:\n   o  JWE Protected Header; this example uses the header from\n\
    \      Figure 124, encoded to base64url [RFC4648] as Figure 125.\n   {\n     \"\
    alg\": \"ECDH-ES\",\n     \"kid\": \"meriadoc.brandybuck@buckland.example\",\n\
    \     \"epk\": {\n       \"kty\": \"EC\",\n       \"crv\": \"P-256\",\n      \
    \ \"x\": \"mPUKT_bAWGHIhg0TpjjqVsP1rXWQu_vwVOHHtNkdYoA\",\n       \"y\": \"8BQAsImGeAS46fyWw5MhYfGTT0IjBpFw2SS34Dv4Irs\"\
    \n     },\n     \"enc\": \"A128CBC-HS256\"\n   }\n                   Figure 124:\
    \ JWE Protected Header JSON\n   eyJhbGciOiJFQ0RILUVTIiwia2lkIjoibWVyaWFkb2MuYnJhbmR5YnVja0BidW\n\
    \   NrbGFuZC5leGFtcGxlIiwiZXBrIjp7Imt0eSI6IkVDIiwiY3J2IjoiUC0yNTYi\n   LCJ4IjoibVBVS1RfYkFXR0hJaGcwVHBqanFWc1AxclhXUXVfdndWT0hIdE5rZF\n\
    \   lvQSIsInkiOiI4QlFBc0ltR2VBUzQ2ZnlXdzVNaFlmR1RUMElqQnBGdzJTUzM0\n   RHY0SXJzIn0sImVuYyI6IkExMjhDQkMtSFMyNTYifQ\n\
    \            Figure 125: JWE Protected Header, base64url-encoded\n   Performing\
    \ the content encryption operation on the Plaintext\n   (Figure 72) using the\
    \ following:\n   o  CEK (Figure 123);\n   o  Initialization Vector (Figure 121);\
    \ and\n   o  JWE Protected Header (Figure 125) as authenticated data\n   produces\
    \ the following:\n   o  Ciphertext from Figure 126.\n   o  Authentication Tag\
    \ from Figure 127.\n   BoDlwPnTypYq-ivjmQvAYJLb5Q6l-F3LIgQomlz87yW4OPKbWE1zSTEFjDfhU9\n\
    \   IPIOSA9Bml4m7iDFwA-1ZXvHteLDtw4R1XRGMEsDIqAYtskTTmzmzNa-_q4F_e\n   vAPUmwlO-ZG45Mnq4uhM1fm_D9rBtWolqZSF3xGNNkpOMQKF1Cl8i8wjzRli7-\n\
    \   IXgyirlKQsbhhqRzkv8IcY6aHl24j03C-AR2le1r7URUhArM79BY8soZU0lzwI\n   -sD5PZ3l4NDCCei9XkoIAfsXJWmySPoeRb2Ni5UZL4mYpvKDiwmyzGd65KqVw7\n\
    \   MsFfI_K767G9C9Azp73gKZD0DyUn1mn0WW5LmyX_yJ-3AROq8p1WZBfG-ZyJ61\n   95_JGG2m9Csg\n\
    \                 Figure 126: Ciphertext, base64url-encoded\n   WCCkNa-x4BeB9hIDIfFuhg\n\
    \             Figure 127: Authentication Tag, base64url-encoded\n"
- title: 5.5.5.  Output Results
  contents:
  - "5.5.5.  Output Results\n   The following compose the resulting JWE object:\n\
    \   o  JWE Protected Header (Figure 114)\n   o  Initialization Vector (Figure\
    \ 110)\n   o  Ciphertext (Figure 115)\n   o  Authentication Tag (Figure 116)\n\
    \   Only the general JWE JSON Serialization is presented because the\n   flattened\
    \ JWE JSON Serialization is identical.\n   The resulting JWE object using the\
    \ JWE Compact Serialization:\n   eyJhbGciOiJFQ0RILUVTIiwia2lkIjoibWVyaWFkb2MuYnJhbmR5YnVja0BidW\n\
    \   NrbGFuZC5leGFtcGxlIiwiZXBrIjp7Imt0eSI6IkVDIiwiY3J2IjoiUC0yNTYi\n   LCJ4IjoibVBVS1RfYkFXR0hJaGcwVHBqanFWc1AxclhXUXVfdndWT0hIdE5rZF\n\
    \   lvQSIsInkiOiI4QlFBc0ltR2VBUzQ2ZnlXdzVNaFlmR1RUMElqQnBGdzJTUzM0\n   RHY0SXJzIn0sImVuYyI6IkExMjhDQkMtSFMyNTYifQ\n\
    \   .\n   .\n   yc9N8v5sYyv3iGQT926IUg\n   .\n   BoDlwPnTypYq-ivjmQvAYJLb5Q6l-F3LIgQomlz87yW4OPKbWE1zSTEFjDfhU9\n\
    \   IPIOSA9Bml4m7iDFwA-1ZXvHteLDtw4R1XRGMEsDIqAYtskTTmzmzNa-_q4F_e\n   vAPUmwlO-ZG45Mnq4uhM1fm_D9rBtWolqZSF3xGNNkpOMQKF1Cl8i8wjzRli7-\n\
    \   IXgyirlKQsbhhqRzkv8IcY6aHl24j03C-AR2le1r7URUhArM79BY8soZU0lzwI\n   -sD5PZ3l4NDCCei9XkoIAfsXJWmySPoeRb2Ni5UZL4mYpvKDiwmyzGd65KqVw7\n\
    \   MsFfI_K767G9C9Azp73gKZD0DyUn1mn0WW5LmyX_yJ-3AROq8p1WZBfG-ZyJ61\n   95_JGG2m9Csg\n\
    \   .\n   WCCkNa-x4BeB9hIDIfFuhg\n                   Figure 128: JWE Compact Serialization\n\
    \   The resulting JWE object using the general JWE JSON Serialization:\n   {\n\
    \     \"protected\": \"eyJhbGciOiJFQ0RILUVTIiwia2lkIjoibWVyaWFkb2MuYn\n      \
    \   JhbmR5YnVja0BidWNrbGFuZC5leGFtcGxlIiwiZXBrIjp7Imt0eSI6Ik\n         VDIiwiY3J2IjoiUC0yNTYiLCJ4IjoibVBVS1RfYkFXR0hJaGcwVHBqan\n\
    \         FWc1AxclhXUXVfdndWT0hIdE5rZFlvQSIsInkiOiI4QlFBc0ltR2VBUz\n         Q2ZnlXdzVNaFlmR1RUMElqQnBGdzJTUzM0RHY0SXJzIn0sImVuYyI6Ik\n\
    \         ExMjhDQkMtSFMyNTYifQ\",\n     \"iv\": \"yc9N8v5sYyv3iGQT926IUg\",\n\
    \     \"ciphertext\": \"BoDlwPnTypYq-ivjmQvAYJLb5Q6l-F3LIgQomlz87yW4O\n      \
    \   PKbWE1zSTEFjDfhU9IPIOSA9Bml4m7iDFwA-1ZXvHteLDtw4R1XRGMEs\n         DIqAYtskTTmzmzNa-_q4F_evAPUmwlO-ZG45Mnq4uhM1fm_D9rBtWolq\n\
    \         ZSF3xGNNkpOMQKF1Cl8i8wjzRli7-IXgyirlKQsbhhqRzkv8IcY6aHl2\n         4j03C-AR2le1r7URUhArM79BY8soZU0lzwI-sD5PZ3l4NDCCei9XkoIA\n\
    \         fsXJWmySPoeRb2Ni5UZL4mYpvKDiwmyzGd65KqVw7MsFfI_K767G9C9A\n         zp73gKZD0DyUn1mn0WW5LmyX_yJ-3AROq8p1WZBfG-ZyJ6195_JGG2m9\n\
    \         Csg\",\n     \"tag\": \"WCCkNa-x4BeB9hIDIfFuhg\"\n   }\n           \
    \     Figure 129: General JWE JSON Serialization\n"
- title: 5.6.  Direct Encryption Using AES-GCM
  contents:
  - "5.6.  Direct Encryption Using AES-GCM\n   This example illustrates encrypting\
    \ content using a previously\n   exchanged key directly and the \"A128GCM\" (AES-GCM)\
    \ content encryption\n   algorithm.\n   Note that whitespace is added for readability\
    \ as described in\n   Section 1.1.\n"
- title: 5.6.1.  Input Factors
  contents:
  - "5.6.1.  Input Factors\n   The following are supplied before beginning the encryption\
    \ process:\n   o  Plaintext content; this example uses the content from Figure\
    \ 72.\n   o  AES symmetric key as the Content Encryption Key (CEK); this\n   \
    \   example uses the key from Figure 130.\n   o  \"alg\" parameter of \"dir\"\
    .\n   o  \"enc\" parameter of \"A128GCM\".\n   {\n     \"kty\": \"oct\",\n   \
    \  \"kid\": \"77c7e2b8-6e13-45cf-8672-617b5b45243a\",\n     \"use\": \"enc\",\n\
    \     \"alg\": \"A128GCM\",\n     \"k\": \"XctOhJAkA-pD9Lh7ZgW_2A\"\n   }\n  \
    \              Figure 130: AES 128-Bit Key, in JWK Format\n"
- title: 5.6.2.  Generated Factors
  contents:
  - "5.6.2.  Generated Factors\n   The following is generated before encrypting:\n\
    \   o  Initialization Vector; this example uses the Initialization Vector\n  \
    \    from Figure 131.\n   refa467QzzKx6QAB\n           Figure 131: Initialization\
    \ Vector, base64url-encoded\n"
- title: 5.6.3.  Encrypting the Content
  contents:
  - "5.6.3.  Encrypting the Content\n   The following is generated before encrypting\
    \ the content:\n   o  JWE Protected Header; this example uses the header from\n\
    \      Figure 132, encoded as base64url [RFC4648] to produce Figure 133.\n   {\n\
    \     \"alg\": \"dir\",\n     \"kid\": \"77c7e2b8-6e13-45cf-8672-617b5b45243a\"\
    ,\n     \"enc\": \"A128GCM\"\n   }\n                   Figure 132: JWE Protected\
    \ Header JSON\n   eyJhbGciOiJkaXIiLCJraWQiOiI3N2M3ZTJiOC02ZTEzLTQ1Y2YtODY3Mi02MT\n\
    \   diNWI0NTI0M2EiLCJlbmMiOiJBMTI4R0NNIn0\n            Figure 133: JWE Protected\
    \ Header, base64url-encoded\n   Performing the encryption operation on the Plaintext\
    \ (Figure 72)\n   using the following:\n   o  CEK (Figure 130);\n   o  Initialization\
    \ Vector (Figure 131); and\n   o  JWE Protected Header (Figure 133) as authenticated\
    \ data\n   produces the following:\n   o  Ciphertext from Figure 134.\n   o  Authentication\
    \ Tag from Figure 135.\n   JW_i_f52hww_ELQPGaYyeAB6HYGcR559l9TYnSovc23XJoBcW29rHP8yZOZG7Y\n\
    \   hLpT1bjFuvZPjQS-m0IFtVcXkZXdH_lr_FrdYt9HRUYkshtrMmIUAyGmUnd9zM\n   DB2n0cRDIHAzFVeJUDxkUwVAE7_YGRPdcqMyiBoCO-FBdE-Nceb4h3-FtBP-c_\n\
    \   BIwCPTjb9o0SbdcdREEMJMyZBH8ySWMVi1gPD9yxi-aQpGbSv_F9N4IZAxscj5\n   g-NJsUPbjk29-s7LJAGb15wEBtXphVCgyy53CoIKLHHeJHXex45Uz9aKZSRSIn\n\
    \   ZI-wjsY0yu3cT4_aQ3i1o-tiE-F8Ios61EKgyIQ4CWao8PFMj8TTnp\n                 Figure\
    \ 134: Ciphertext, base64url-encoded\n   vbb32Xvllea2OtmHAdccRQ\n            \
    \ Figure 135: Authentication Tag, base64url-encoded\n"
- title: 5.6.4.  Output Results
  contents:
  - "5.6.4.  Output Results\n   The following compose the resulting JWE object:\n\
    \   o  JWE Protected Header (Figure 133)\n   o  Initialization Vector (Figure\
    \ 131)\n   o  Ciphertext (Figure 134)\n   o  Authentication Tag (Figure 135)\n\
    \   Only the general JWE JSON Serialization is presented because the\n   flattened\
    \ JWE JSON Serialization is identical.\n   The resulting JWE object using the\
    \ JWE Compact Serialization:\n   eyJhbGciOiJkaXIiLCJraWQiOiI3N2M3ZTJiOC02ZTEzLTQ1Y2YtODY3Mi02MT\n\
    \   diNWI0NTI0M2EiLCJlbmMiOiJBMTI4R0NNIn0\n   .\n   .\n   refa467QzzKx6QAB\n \
    \  .\n   JW_i_f52hww_ELQPGaYyeAB6HYGcR559l9TYnSovc23XJoBcW29rHP8yZOZG7Y\n   hLpT1bjFuvZPjQS-m0IFtVcXkZXdH_lr_FrdYt9HRUYkshtrMmIUAyGmUnd9zM\n\
    \   DB2n0cRDIHAzFVeJUDxkUwVAE7_YGRPdcqMyiBoCO-FBdE-Nceb4h3-FtBP-c_\n   BIwCPTjb9o0SbdcdREEMJMyZBH8ySWMVi1gPD9yxi-aQpGbSv_F9N4IZAxscj5\n\
    \   g-NJsUPbjk29-s7LJAGb15wEBtXphVCgyy53CoIKLHHeJHXex45Uz9aKZSRSIn\n   ZI-wjsY0yu3cT4_aQ3i1o-tiE-F8Ios61EKgyIQ4CWao8PFMj8TTnp\n\
    \   .\n   vbb32Xvllea2OtmHAdccRQ\n                   Figure 136: JWE Compact Serialization\n\
    \   The resulting JWE object using the general JWE JSON Serialization:\n   {\n\
    \     \"protected\": \"eyJhbGciOiJkaXIiLCJraWQiOiI3N2M3ZTJiOC02ZTEzLT\n      \
    \   Q1Y2YtODY3Mi02MTdiNWI0NTI0M2EiLCJlbmMiOiJBMTI4R0NNIn0\",\n     \"iv\": \"\
    refa467QzzKx6QAB\",\n     \"ciphertext\": \"JW_i_f52hww_ELQPGaYyeAB6HYGcR559l9TYnSovc23XJ\n\
    \         oBcW29rHP8yZOZG7YhLpT1bjFuvZPjQS-m0IFtVcXkZXdH_lr_FrdYt9\n         HRUYkshtrMmIUAyGmUnd9zMDB2n0cRDIHAzFVeJUDxkUwVAE7_YGRPdc\n\
    \         qMyiBoCO-FBdE-Nceb4h3-FtBP-c_BIwCPTjb9o0SbdcdREEMJMyZBH8\n         ySWMVi1gPD9yxi-aQpGbSv_F9N4IZAxscj5g-NJsUPbjk29-s7LJAGb1\n\
    \         5wEBtXphVCgyy53CoIKLHHeJHXex45Uz9aKZSRSInZI-wjsY0yu3cT4_\n         aQ3i1o-tiE-F8Ios61EKgyIQ4CWao8PFMj8TTnp\"\
    ,\n     \"tag\": \"vbb32Xvllea2OtmHAdccRQ\"\n   }\n                Figure 137:\
    \ General JWE JSON Serialization\n"
- title: 5.7.  Key Wrap Using AES-GCM KeyWrap with AES-CBC-HMAC-SHA2
  contents:
  - "5.7.  Key Wrap Using AES-GCM KeyWrap with AES-CBC-HMAC-SHA2\n   This example\
    \ illustrates encrypting content using the \"A256GCMKW\"\n   (AES-256-GCM-KeyWrap)\
    \ key encryption algorithm with the \"A128CBC-\n   HS256\" (AES-128-CBC-HMAC-SHA-256)\
    \ content encryption algorithm.\n   Note that whitespace is added for readability\
    \ as described in\n   Section 1.1.\n"
- title: 5.7.1.  Input Factors
  contents:
  - "5.7.1.  Input Factors\n   The following are supplied before beginning the encryption\
    \ process:\n   o  Plaintext content; this example uses the content from Figure\
    \ 72.\n   o  AES symmetric key; this example uses the key from Figure 138.\n \
    \  o  \"alg\" parameter of \"A256GCMKW\".\n   o  \"enc\" parameter of \"A128CBC-HS256\"\
    .\n   {\n     \"kty\": \"oct\",\n     \"kid\": \"18ec08e1-bfa9-4d95-b205-2b4dd1d4321d\"\
    ,\n     \"use\": \"enc\",\n     \"alg\": \"A256GCMKW\",\n     \"k\": \"qC57l_uxcm7Nm3K-ct4GFjx8tM1U8CZ0NLBvdQstiS8\"\
    \n   }\n                        Figure 138: AES 256-Bit Key\n"
- title: 5.7.2.  Generated Factors
  contents:
  - "5.7.2.  Generated Factors\n   The following are generated before encrypting:\n\
    \   o  AES symmetric key as the Content Encryption Key (CEK); this\n      example\
    \ uses the key from Figure 139.\n   o  Initialization Vector for content encryption;\
    \ this example uses\n      the Initialization Vector from Figure 140.\n   UWxARpat23nL9ReIj4WG3D1ee9I4r-Mv5QLuFXdy_rE\n\
    \           Figure 139: Content Encryption Key, base64url-encoded\n   gz6NjyEFNm_vm8Gj6FwoFQ\n\
    \           Figure 140: Initialization Vector, base64url-encoded\n"
- title: 5.7.3.  Encrypting the Key
  contents:
  - "5.7.3.  Encrypting the Key\n   The following is generated before encrypting the\
    \ CEK:\n   o  Initialization Vector for key wrapping; this example uses the\n\
    \      Initialization Vector from Figure 141.\n   KkYT0GX_2jHlfqN_\n   Figure\
    \ 141: Initialization Vector for Key Wrapping, base64url-encoded\n   Performing\
    \ the key encryption operation over the CEK (Figure 139)\n   with the following:\n\
    \   o  AES symmetric key (Figure 138);\n   o  Initialization Vector (Figure 141);\
    \ and\n   o  The empty string as authenticated data\n   produces the following:\n\
    \   o  Encrypted Key from Figure 142.\n   o  Authentication Tag from Figure 143.\n\
    \   lJf3HbOApxMEBkCMOoTnnABxs_CvTWUmZQ2ElLvYNok\n               Figure 142: Encrypted\
    \ Key, base64url-encoded\n   kfPduVQ3T3H6vnewt--ksw\n    Figure 143: Authentication\
    \ Tag from Key Wrapping, base64url-encoded\n"
- title: 5.7.4.  Encrypting the Content
  contents:
  - "5.7.4.  Encrypting the Content\n   The following is generated before encrypting\
    \ the content:\n   o  JWE Protected Header; this example uses the header from\n\
    \      Figure 144, encoded to base64url [RFC4648] as Figure 145.\n   {\n     \"\
    alg\": \"A256GCMKW\",\n     \"kid\": \"18ec08e1-bfa9-4d95-b205-2b4dd1d4321d\"\
    ,\n     \"tag\": \"kfPduVQ3T3H6vnewt--ksw\",\n     \"iv\": \"KkYT0GX_2jHlfqN_\"\
    ,\n     \"enc\": \"A128CBC-HS256\"\n   }\n                   Figure 144: JWE Protected\
    \ Header JSON\n   eyJhbGciOiJBMjU2R0NNS1ciLCJraWQiOiIxOGVjMDhlMS1iZmE5LTRkOTUtYj\n\
    \   IwNS0yYjRkZDFkNDMyMWQiLCJ0YWciOiJrZlBkdVZRM1QzSDZ2bmV3dC0ta3N3\n   IiwiaXYiOiJLa1lUMEdYXzJqSGxmcU5fIiwiZW5jIjoiQTEyOENCQy1IUzI1Ni\n\
    \   J9\n            Figure 145: JWE Protected Header, base64url-encoded\n   Performing\
    \ the content encryption operation over the Plaintext\n   (Figure 72) with the\
    \ following:\n   o  CEK (Figure 139);\n   o  Initialization Vector (Figure 140);\
    \ and\n   o  JWE Protected Header (Figure 145) as authenticated data\n   produces\
    \ the following:\n   o  Ciphertext from Figure 146.\n   o  Authentication Tag\
    \ from Figure 147.\n   Jf5p9-ZhJlJy_IQ_byKFmI0Ro7w7G1QiaZpI8OaiVgD8EqoDZHyFKFBupS8iaE\n\
    \   eVIgMqWmsuJKuoVgzR3YfzoMd3GxEm3VxNhzWyWtZKX0gxKdy6HgLvqoGNbZCz\n   LjqcpDiF8q2_62EVAbr2uSc2oaxFmFuIQHLcqAHxy51449xkjZ7ewzZaGV3eFq\n\
    \   hpco8o4DijXaG5_7kp3h2cajRfDgymuxUbWgLqaeNQaJtvJmSMFuEOSAzw9Hde\n   b6yhdTynCRmu-kqtO5Dec4lT2OMZKpnxc_F1_4yDJFcqb5CiDSmA-psB2k0Jtj\n\
    \   xAj4UPI61oONK7zzFIu4gBfjJCndsZfdvG7h8wGjV98QhrKEnR7xKZ3KCr0_qR\n   1B-gxpNk3xWU\n\
    \                 Figure 146: Ciphertext, base64url-encoded\n   DKW7jrb4WaRSNfbXVPlT5g\n\
    \             Figure 147: Authentication Tag, base64url-encoded\n"
- title: 5.7.5.  Output Results
  contents:
  - "5.7.5.  Output Results\n   The following compose the resulting JWE object:\n\
    \   o  JWE Protected Header (Figure 145)\n   o  Encrypted Key (Figure 142)\n \
    \  o  Initialization Vector (Figure 140)\n   o  Ciphertext (Figure 146)\n   o\
    \  Authentication Tag (Figure 147)\n   The resulting JWE object using the JWE\
    \ Compact Serialization:\n   eyJhbGciOiJBMjU2R0NNS1ciLCJraWQiOiIxOGVjMDhlMS1iZmE5LTRkOTUtYj\n\
    \   IwNS0yYjRkZDFkNDMyMWQiLCJ0YWciOiJrZlBkdVZRM1QzSDZ2bmV3dC0ta3N3\n   IiwiaXYiOiJLa1lUMEdYXzJqSGxmcU5fIiwiZW5jIjoiQTEyOENCQy1IUzI1Ni\n\
    \   J9\n   .\n   lJf3HbOApxMEBkCMOoTnnABxs_CvTWUmZQ2ElLvYNok\n   .\n   gz6NjyEFNm_vm8Gj6FwoFQ\n\
    \   .\n   Jf5p9-ZhJlJy_IQ_byKFmI0Ro7w7G1QiaZpI8OaiVgD8EqoDZHyFKFBupS8iaE\n   eVIgMqWmsuJKuoVgzR3YfzoMd3GxEm3VxNhzWyWtZKX0gxKdy6HgLvqoGNbZCz\n\
    \   LjqcpDiF8q2_62EVAbr2uSc2oaxFmFuIQHLcqAHxy51449xkjZ7ewzZaGV3eFq\n   hpco8o4DijXaG5_7kp3h2cajRfDgymuxUbWgLqaeNQaJtvJmSMFuEOSAzw9Hde\n\
    \   b6yhdTynCRmu-kqtO5Dec4lT2OMZKpnxc_F1_4yDJFcqb5CiDSmA-psB2k0Jtj\n   xAj4UPI61oONK7zzFIu4gBfjJCndsZfdvG7h8wGjV98QhrKEnR7xKZ3KCr0_qR\n\
    \   1B-gxpNk3xWU\n   .\n   DKW7jrb4WaRSNfbXVPlT5g\n                   Figure 148:\
    \ JWE Compact Serialization\n   The resulting JWE object using the general JWE\
    \ JSON Serialization:\n   {\n     \"recipients\": [\n       {\n         \"encrypted_key\"\
    : \"lJf3HbOApxMEBkCMOoTnnABxs_CvTWUmZQ2ElL\n             vYNok\"\n       }\n \
    \    ],\n     \"protected\": \"eyJhbGciOiJBMjU2R0NNS1ciLCJraWQiOiIxOGVjMDhlMS\n\
    \         1iZmE5LTRkOTUtYjIwNS0yYjRkZDFkNDMyMWQiLCJ0YWciOiJrZlBkdV\n         ZRM1QzSDZ2bmV3dC0ta3N3IiwiaXYiOiJLa1lUMEdYXzJqSGxmcU5fIi\n\
    \         wiZW5jIjoiQTEyOENCQy1IUzI1NiJ9\",\n     \"iv\": \"gz6NjyEFNm_vm8Gj6FwoFQ\"\
    ,\n     \"ciphertext\": \"Jf5p9-ZhJlJy_IQ_byKFmI0Ro7w7G1QiaZpI8OaiVgD8E\n    \
    \     qoDZHyFKFBupS8iaEeVIgMqWmsuJKuoVgzR3YfzoMd3GxEm3VxNhzWyW\n         tZKX0gxKdy6HgLvqoGNbZCzLjqcpDiF8q2_62EVAbr2uSc2oaxFmFuIQ\n\
    \         HLcqAHxy51449xkjZ7ewzZaGV3eFqhpco8o4DijXaG5_7kp3h2cajRfD\n         gymuxUbWgLqaeNQaJtvJmSMFuEOSAzw9Hdeb6yhdTynCRmu-kqtO5Dec\n\
    \         4lT2OMZKpnxc_F1_4yDJFcqb5CiDSmA-psB2k0JtjxAj4UPI61oONK7z\n         zFIu4gBfjJCndsZfdvG7h8wGjV98QhrKEnR7xKZ3KCr0_qR1B-gxpNk3\n\
    \         xWU\",\n     \"tag\": \"DKW7jrb4WaRSNfbXVPlT5g\"\n   }\n           \
    \     Figure 149: General JWE JSON Serialization\n   The resulting JWE object\
    \ using the flattened JWE JSON Serialization:\n   {\n     \"protected\": \"eyJhbGciOiJBMjU2R0NNS1ciLCJpdiI6IktrWVQwR1hfMm\n\
    \         pIbGZxTl8iLCJraWQiOiIxOGVjMDhlMS1iZmE5LTRkOTUtYjIwNS0yYj\n         RkZDFkNDMyMWQiLCJ0YWciOiJrZlBkdVZRM1QzSDZ2bmV3dC0ta3N3Ii\n\
    \         wiZW5jIjoiQTEyOENCQy1IUzI1NiJ9\",\n     \"encrypted_key\": \"lJf3HbOApxMEBkCMOoTnnABxs_CvTWUmZQ2ElLvYNo\n\
    \         k\",\n     \"iv\": \"gz6NjyEFNm_vm8Gj6FwoFQ\",\n     \"ciphertext\"\
    : \"Jf5p9-ZhJlJy_IQ_byKFmI0Ro7w7G1QiaZpI8OaiVgD8E\n         qoDZHyFKFBupS8iaEeVIgMqWmsuJKuoVgzR3YfzoMd3GxEm3VxNhzWyW\n\
    \         tZKX0gxKdy6HgLvqoGNbZCzLjqcpDiF8q2_62EVAbr2uSc2oaxFmFuIQ\n         HLcqAHxy51449xkjZ7ewzZaGV3eFqhpco8o4DijXaG5_7kp3h2cajRfD\n\
    \         gymuxUbWgLqaeNQaJtvJmSMFuEOSAzw9Hdeb6yhdTynCRmu-kqtO5Dec\n         4lT2OMZKpnxc_F1_4yDJFcqb5CiDSmA-psB2k0JtjxAj4UPI61oONK7z\n\
    \         zFIu4gBfjJCndsZfdvG7h8wGjV98QhrKEnR7xKZ3KCr0_qR1B-gxpNk3\n         xWU\"\
    ,\n     \"tag\": \"NvBveHr_vonkvflfnUrmBQ\"\n   }\n               Figure 150:\
    \ Flattened JWE JSON Serialization\n"
- title: 5.8.  Key Wrap Using AES-KeyWrap with AES-GCM
  contents:
  - "5.8.  Key Wrap Using AES-KeyWrap with AES-GCM\n   The following example illustrates\
    \ content encryption using the\n   \"A128KW\" (AES-128-KeyWrap) key encryption\
    \ algorithm and the \"A128GCM\"\n   (AES-128-GCM) content encryption algorithm.\n\
    \   Note that whitespace is added for readability as described in\n   Section\
    \ 1.1.\n"
- title: 5.8.1.  Input Factors
  contents:
  - "5.8.1.  Input Factors\n   The following are supplied before beginning the encryption\
    \ process:\n   o  Plaintext content; this example uses the content from Figure\
    \ 72.\n   o  AES symmetric key; this example uses the key from Figure 151.\n \
    \  o  \"alg\" parameter of \"A128KW\".\n   o  \"enc\" parameter of \"A128GCM\"\
    .\n   {\n     \"kty\": \"oct\",\n     \"kid\": \"81b20965-8332-43d9-a468-82160ad91ac8\"\
    ,\n     \"use\": \"enc\",\n     \"alg\": \"A128KW\",\n     \"k\": \"GZy6sIZ6wl9NJOKB-jnmVQ\"\
    \n   }\n                        Figure 151: AES 128-Bit Key\n"
- title: 5.8.2.  Generated Factors
  contents:
  - "5.8.2.  Generated Factors\n   The following are generated before encrypting:\n\
    \   o  AES symmetric key as the Content Encryption Key; this example uses\n  \
    \    the key from Figure 152.\n   o  Initialization Vector; this example uses\
    \ the Initialization Vector\n      from Figure 153.\n   aY5_Ghmk9KxWPBLu_glx1w\n\
    \           Figure 152: Content Encryption Key, base64url-encoded\n   Qx0pmsDa8KnJc9Jo\n\
    \           Figure 153: Initialization Vector, base64url-encoded\n"
- title: 5.8.3.  Encrypting the Key
  contents:
  - "5.8.3.  Encrypting the Key\n   Performing the key encryption operation over the\
    \ CEK (Figure 152)\n   with the AES symmetric key (Figure 151) produces the following\n\
    \   Encrypted Key:\n   CBI6oDw8MydIx1IBntf_lQcw2MmJKIQx\n               Figure\
    \ 154: Encrypted Key, base64url-encoded\n"
- title: 5.8.4.  Encrypting the Content
  contents:
  - "5.8.4.  Encrypting the Content\n   The following is generated before encrypting\
    \ the content:\n   o  JWE Protected Header; this example uses the header from\n\
    \      Figure 155, encoded to base64url [RFC4648] as Figure 156.\n   {\n     \"\
    alg\": \"A128KW\",\n     \"kid\": \"81b20965-8332-43d9-a468-82160ad91ac8\",\n\
    \     \"enc\": \"A128GCM\"\n   }\n                   Figure 155: JWE Protected\
    \ Header JSON\n   eyJhbGciOiJBMTI4S1ciLCJraWQiOiI4MWIyMDk2NS04MzMyLTQzZDktYTQ2OC\n\
    \   04MjE2MGFkOTFhYzgiLCJlbmMiOiJBMTI4R0NNIn0\n            Figure 156: JWE Protected\
    \ Header, base64url-encoded\n   Performing the content encryption over the Plaintext\
    \ (Figure 72) with\n   the following:\n   o  CEK (Figure 152);\n   o  Initialization\
    \ Vector (Figure 153); and\n   o  JWE Protected Header (Figure 156) as authenticated\
    \ data\n   produces the following:\n   o  Ciphertext from Figure 157.\n   o  Authentication\
    \ Tag from Figure 158.\n   AwliP-KmWgsZ37BvzCefNen6VTbRK3QMA4TkvRkH0tP1bTdhtFJgJxeVmJkLD6\n\
    \   1A1hnWGetdg11c9ADsnWgL56NyxwSYjU1ZEHcGkd3EkU0vjHi9gTlb90qSYFfe\n   F0LwkcTtjbYKCsiNJQkcIp1yeM03OmuiYSoYJVSpf7ej6zaYcMv3WwdxDFl8RE\n\
    \   wOhNImk2Xld2JXq6BR53TSFkyT7PwVLuq-1GwtGHlQeg7gDT6xW0JqHDPn_H-p\n   uQsmthc9Zg0ojmJfqqFvETUxLAF-KjcBTS5dNy6egwkYtOt8EIHK-oEsKYtZRa\n\
    \   a8Z7MOZ7UGxGIMvEmxrGCPeJa14slv2-gaqK0kEThkaSqdYw0FkQZF\n                 Figure\
    \ 157: Ciphertext, base64url-encoded\n   ER7MWJZ1FBI_NKvn7Zb1Lw\n            \
    \ Figure 158: Authentication Tag, base64url-encoded\n"
- title: 5.8.5.  Output Results
  contents:
  - "5.8.5.  Output Results\n   The following compose the resulting JWE object:\n\
    \   o  JWE Protected Header (Figure 156)\n   o  Encrypted Key (Figure 154)\n \
    \  o  Initialization Vector (Figure 153)\n   o  Ciphertext (Figure 157)\n   o\
    \  Authentication Tag (Figure 158)\n   The resulting JWE object using the JWE\
    \ Compact Serialization:\n   eyJhbGciOiJBMTI4S1ciLCJraWQiOiI4MWIyMDk2NS04MzMyLTQzZDktYTQ2OC\n\
    \   04MjE2MGFkOTFhYzgiLCJlbmMiOiJBMTI4R0NNIn0\n   .\n   CBI6oDw8MydIx1IBntf_lQcw2MmJKIQx\n\
    \   .\n   Qx0pmsDa8KnJc9Jo\n   .\n   AwliP-KmWgsZ37BvzCefNen6VTbRK3QMA4TkvRkH0tP1bTdhtFJgJxeVmJkLD6\n\
    \   1A1hnWGetdg11c9ADsnWgL56NyxwSYjU1ZEHcGkd3EkU0vjHi9gTlb90qSYFfe\n   F0LwkcTtjbYKCsiNJQkcIp1yeM03OmuiYSoYJVSpf7ej6zaYcMv3WwdxDFl8RE\n\
    \   wOhNImk2Xld2JXq6BR53TSFkyT7PwVLuq-1GwtGHlQeg7gDT6xW0JqHDPn_H-p\n   uQsmthc9Zg0ojmJfqqFvETUxLAF-KjcBTS5dNy6egwkYtOt8EIHK-oEsKYtZRa\n\
    \   a8Z7MOZ7UGxGIMvEmxrGCPeJa14slv2-gaqK0kEThkaSqdYw0FkQZF\n   .\n   ER7MWJZ1FBI_NKvn7Zb1Lw\n\
    \                   Figure 159: JWE Compact Serialization\n   The resulting JWE\
    \ object using the general JWE JSON Serialization:\n   {\n     \"recipients\"\
    : [\n       {\n         \"encrypted_key\": \"CBI6oDw8MydIx1IBntf_lQcw2MmJKIQx\"\
    \n       }\n     ],\n     \"protected\": \"eyJhbGciOiJBMTI4S1ciLCJraWQiOiI4MWIyMDk2NS04Mz\n\
    \         MyLTQzZDktYTQ2OC04MjE2MGFkOTFhYzgiLCJlbmMiOiJBMTI4R0NNIn\n         0\"\
    ,\n     \"iv\": \"Qx0pmsDa8KnJc9Jo\",\n     \"ciphertext\": \"AwliP-KmWgsZ37BvzCefNen6VTbRK3QMA4TkvRkH0tP1b\n\
    \         TdhtFJgJxeVmJkLD61A1hnWGetdg11c9ADsnWgL56NyxwSYjU1ZEHcGk\n         d3EkU0vjHi9gTlb90qSYFfeF0LwkcTtjbYKCsiNJQkcIp1yeM03OmuiY\n\
    \         SoYJVSpf7ej6zaYcMv3WwdxDFl8REwOhNImk2Xld2JXq6BR53TSFkyT7\n         PwVLuq-1GwtGHlQeg7gDT6xW0JqHDPn_H-puQsmthc9Zg0ojmJfqqFvE\n\
    \         TUxLAF-KjcBTS5dNy6egwkYtOt8EIHK-oEsKYtZRaa8Z7MOZ7UGxGIMv\n         EmxrGCPeJa14slv2-gaqK0kEThkaSqdYw0FkQZF\"\
    ,\n     \"tag\": \"ER7MWJZ1FBI_NKvn7Zb1Lw\"\n   }\n                Figure 160:\
    \ General JWE JSON Serialization\n   The resulting JWE object using the flattened\
    \ JWE JSON Serialization:\n   {\n     \"protected\": \"eyJhbGciOiJBMTI4S1ciLCJraWQiOiI4MWIyMDk2NS04Mz\n\
    \         MyLTQzZDktYTQ2OC04MjE2MGFkOTFhYzgiLCJlbmMiOiJBMTI4R0NNIn\n         0\"\
    ,\n     \"encrypted_key\": \"CBI6oDw8MydIx1IBntf_lQcw2MmJKIQx\",\n     \"iv\"\
    : \"Qx0pmsDa8KnJc9Jo\",\n     \"ciphertext\": \"AwliP-KmWgsZ37BvzCefNen6VTbRK3QMA4TkvRkH0tP1b\n\
    \         TdhtFJgJxeVmJkLD61A1hnWGetdg11c9ADsnWgL56NyxwSYjU1ZEHcGk\n         d3EkU0vjHi9gTlb90qSYFfeF0LwkcTtjbYKCsiNJQkcIp1yeM03OmuiY\n\
    \         SoYJVSpf7ej6zaYcMv3WwdxDFl8REwOhNImk2Xld2JXq6BR53TSFkyT7\n         PwVLuq-1GwtGHlQeg7gDT6xW0JqHDPn_H-puQsmthc9Zg0ojmJfqqFvE\n\
    \         TUxLAF-KjcBTS5dNy6egwkYtOt8EIHK-oEsKYtZRaa8Z7MOZ7UGxGIMv\n         EmxrGCPeJa14slv2-gaqK0kEThkaSqdYw0FkQZF\"\
    ,\n     \"tag\": \"ER7MWJZ1FBI_NKvn7Zb1Lw\"\n   }\n               Figure 161:\
    \ Flattened JWE JSON Serialization\n"
- title: 5.9.  Compressed Content
  contents:
  - "5.9.  Compressed Content\n   This example illustrates encrypting content that\
    \ is first compressed.\n   It reuses the AES symmetric key, key encryption algorithm,\
    \ and\n   content encryption algorithm from Section 5.8.\n   Note that whitespace\
    \ is added for readability as described in\n   Section 1.1.\n"
- title: 5.9.1.  Input Factors
  contents:
  - "5.9.1.  Input Factors\n   The following are supplied before beginning the encryption\
    \ process:\n   o  Plaintext content; this example uses the content from Figure\
    \ 72.\n   o  Recipient encryption key; this example uses the key from\n      Figure\
    \ 151.\n   o  Key encryption algorithm; this example uses \"A128KW\".\n   o  Content\
    \ encryption algorithm; this example uses \"A128GCM\".\n   o  \"zip\" parameter\
    \ of \"DEF\".\n"
- title: 5.9.2.  Generated Factors
  contents:
  - "5.9.2.  Generated Factors\n   The following are generated before encrypting:\n\
    \   o  Compressed Plaintext from the original Plaintext content;\n      compressing\
    \ Figure 72 using the DEFLATE [RFC1951] algorithm\n      produces the compressed\
    \ Plaintext from Figure 162.\n   o  AES symmetric key as the Content Encryption\
    \ Key (CEK); this\n      example uses the key from Figure 163.\n   o  Initialization\
    \ Vector; this example uses the Initialization Vector\n      from Figure 164.\n\
    \   bY_BDcIwDEVX-QNU3QEOrIA4pqlDokYxchxVvbEDGzIJbioOSJwc-f___HPjBu\n   8KVFpVtAplVE1-wZo0YjNZo3C7R5v72pV5f5X382VWjYQpqZKAyjziZOr2B7kQ\n\
    \   PSy6oZIXUnDYbVKN4jNXi2u0yB7t1qSHTjmMODf9QgvrDzfTIQXnyQRuUya4zI\n   WG3vTOdir0v7BRHFYWq3k1k1A_gSDJqtcBF-GZxw8\n\
    \            Figure 162: Compressed Plaintext, base64url-encoded\n   hC-MpLZSuwWv8sexS6ydfw\n\
    \           Figure 163: Content Encryption Key, base64url-encoded\n   p9pUq6XHY0jfEZIl\n\
    \           Figure 164: Initialization Vector, base64url-encoded\n"
- title: 5.9.3.  Encrypting the Key
  contents:
  - "5.9.3.  Encrypting the Key\n   Performing the key encryption operation over the\
    \ CEK (Figure 163)\n   with the AES symmetric key (Figure 151) produces the following\n\
    \   Encrypted Key:\n   5vUT2WOtQxKWcekM_IzVQwkGgzlFDwPi\n               Figure\
    \ 165: Encrypted Key, base64url-encoded\n"
- title: 5.9.4.  Encrypting the Content
  contents:
  - "5.9.4.  Encrypting the Content\n   The following is generated before encrypting\
    \ the content:\n   o  JWE Protected Header; this example uses the header from\n\
    \      Figure 166, encoded to base64url [RFC4648] as Figure 167.\n   {\n     \"\
    alg\": \"A128KW\",\n     \"kid\": \"81b20965-8332-43d9-a468-82160ad91ac8\",\n\
    \     \"enc\": \"A128GCM\",\n     \"zip\": \"DEF\"\n   }\n                   Figure\
    \ 166: JWE Protected Header JSON\n   eyJhbGciOiJBMTI4S1ciLCJraWQiOiI4MWIyMDk2NS04MzMyLTQzZDktYTQ2OC\n\
    \   04MjE2MGFkOTFhYzgiLCJlbmMiOiJBMTI4R0NNIiwiemlwIjoiREVGIn0\n            Figure\
    \ 167: JWE Protected Header, base64url-encoded\n   Performing the content encryption\
    \ operation over the compressed\n   Plaintext (Figure 162, encoded as an octet\
    \ string) with the\n   following:\n   o  CEK (Figure 163);\n   o  Initialization\
    \ Vector (Figure 164); and\n   o  JWE Protected Header (Figure 167) as authenticated\
    \ data\n   produces the following:\n   o  Ciphertext from Figure 168.\n   o  Authentication\
    \ Tag from Figure 169.\n   HbDtOsdai1oYziSx25KEeTxmwnh8L8jKMFNc1k3zmMI6VB8hry57tDZ61jXyez\n\
    \   SPt0fdLVfe6Jf5y5-JaCap_JQBcb5opbmT60uWGml8blyiMQmOn9J--XhhlYg0\n   m-BHaqfDO5iTOWxPxFMUedx7WCy8mxgDHj0aBMG6152PsM-w5E_o2B3jDbrYBK\n\
    \   hpYA7qi3AyijnCJ7BP9rr3U8kxExCpG3mK420TjOw\n                 Figure 168: Ciphertext,\
    \ base64url-encoded\n   VILuUwuIxaLVmh5X-T7kmA\n             Figure 169: Authentication\
    \ Tag, base64url-encoded\n"
- title: 5.9.5.  Output Results
  contents:
  - "5.9.5.  Output Results\n   The following compose the resulting JWE object:\n\
    \   o  JWE Protected Header (Figure 167)\n   o  Encrypted Key (Figure 165)\n \
    \  o  Initialization Vector (Figure 164)\n   o  Ciphertext (Figure 168)\n   o\
    \  Authentication Tag (Figure 169)\n   The resulting JWE object using the JWE\
    \ Compact Serialization:\n   eyJhbGciOiJBMTI4S1ciLCJraWQiOiI4MWIyMDk2NS04MzMyLTQzZDktYTQ2OC\n\
    \   04MjE2MGFkOTFhYzgiLCJlbmMiOiJBMTI4R0NNIiwiemlwIjoiREVGIn0\n   .\n   5vUT2WOtQxKWcekM_IzVQwkGgzlFDwPi\n\
    \   .\n   p9pUq6XHY0jfEZIl\n   .\n   HbDtOsdai1oYziSx25KEeTxmwnh8L8jKMFNc1k3zmMI6VB8hry57tDZ61jXyez\n\
    \   SPt0fdLVfe6Jf5y5-JaCap_JQBcb5opbmT60uWGml8blyiMQmOn9J--XhhlYg0\n   m-BHaqfDO5iTOWxPxFMUedx7WCy8mxgDHj0aBMG6152PsM-w5E_o2B3jDbrYBK\n\
    \   hpYA7qi3AyijnCJ7BP9rr3U8kxExCpG3mK420TjOw\n   .\n   VILuUwuIxaLVmh5X-T7kmA\n\
    \                   Figure 170: JWE Compact Serialization\n   The resulting JWE\
    \ object using the general JWE JSON Serialization:\n   {\n     \"recipients\"\
    : [\n       {\n         \"encrypted_key\": \"5vUT2WOtQxKWcekM_IzVQwkGgzlFDwPi\"\
    \n       }\n     ],\n     \"protected\": \"eyJhbGciOiJBMTI4S1ciLCJraWQiOiI4MWIyMDk2NS04Mz\n\
    \         MyLTQzZDktYTQ2OC04MjE2MGFkOTFhYzgiLCJlbmMiOiJBMTI4R0NNIi\n         wiemlwIjoiREVGIn0\"\
    ,\n     \"iv\": \"p9pUq6XHY0jfEZIl\",\n     \"ciphertext\": \"HbDtOsdai1oYziSx25KEeTxmwnh8L8jKMFNc1k3zmMI6V\n\
    \         B8hry57tDZ61jXyezSPt0fdLVfe6Jf5y5-JaCap_JQBcb5opbmT60uWG\n         ml8blyiMQmOn9J--XhhlYg0m-BHaqfDO5iTOWxPxFMUedx7WCy8mxgDH\n\
    \         j0aBMG6152PsM-w5E_o2B3jDbrYBKhpYA7qi3AyijnCJ7BP9rr3U8kxE\n         xCpG3mK420TjOw\"\
    ,\n     \"tag\": \"VILuUwuIxaLVmh5X-T7kmA\"\n   }\n                Figure 171:\
    \ General JWE JSON Serialization\n   The resulting JWE object using the flattened\
    \ JWE JSON Serialization:\n   {\n     \"protected\": \"eyJhbGciOiJBMTI4S1ciLCJraWQiOiI4MWIyMDk2NS04Mz\n\
    \         MyLTQzZDktYTQ2OC04MjE2MGFkOTFhYzgiLCJlbmMiOiJBMTI4R0NNIi\n         wiemlwIjoiREVGIn0\"\
    ,\n     \"encrypted_key\": \"5vUT2WOtQxKWcekM_IzVQwkGgzlFDwPi\",\n     \"iv\"\
    : \"p9pUq6XHY0jfEZIl\",\n     \"ciphertext\": \"HbDtOsdai1oYziSx25KEeTxmwnh8L8jKMFNc1k3zmMI6V\n\
    \         B8hry57tDZ61jXyezSPt0fdLVfe6Jf5y5-JaCap_JQBcb5opbmT60uWG\n         ml8blyiMQmOn9J--XhhlYg0m-BHaqfDO5iTOWxPxFMUedx7WCy8mxgDH\n\
    \         j0aBMG6152PsM-w5E_o2B3jDbrYBKhpYA7qi3AyijnCJ7BP9rr3U8kxE\n         xCpG3mK420TjOw\"\
    ,\n     \"tag\": \"VILuUwuIxaLVmh5X-T7kmA\"\n   }\n               Figure 172:\
    \ Flattened JWE JSON Serialization\n"
- title: 5.10.  Including Additional Authenticated Data
  contents:
  - "5.10.  Including Additional Authenticated Data\n   This example illustrates encrypting\
    \ content that includes additional\n   authenticated data.  As this example includes\
    \ an additional top-level\n   property not present in the JWE Compact Serialization,\
    \ only the\n   flattened JWE JSON Serialization and general JWE JSON Serialization\n\
    \   are possible.\n   Note that whitespace is added for readability as described\
    \ in\n   Section 1.1.\n"
- title: 5.10.1.  Input Factors
  contents:
  - "5.10.1.  Input Factors\n   The following are supplied before beginning the encryption\
    \ process:\n   o  Plaintext content; this example uses the content from Figure\
    \ 72.\n   o  Recipient encryption key; this example uses the key from\n      Figure\
    \ 151.\n   o  Key encryption algorithm; this example uses \"A128KW\".\n   o  Content\
    \ encryption algorithm; this example uses \"A128GCM\".\n   o  Additional Authenticated\
    \ Data; this example uses a vCard [RFC7095]\n      from Figure 173, serialized\
    \ to UTF-8.\n   [\n     \"vcard\",\n     [\n       [ \"version\", {}, \"text\"\
    , \"4.0\" ],\n       [ \"fn\", {}, \"text\", \"Meriadoc Brandybuck\" ],\n    \
    \   [ \"n\", {},\n         \"text\", [\n           \"Brandybuck\", \"Meriadoc\"\
    , \"Mr.\", \"\"\n         ]\n       ],\n       [ \"bday\", {}, \"text\", \"TA\
    \ 2982\" ],\n       [ \"gender\", {}, \"text\", \"M\" ]\n     ]\n   ]\n      \
    \   Figure 173: Additional Authenticated Data, in JSON Format\n   NOTE: Whitespace\
    \ between JSON values was added for readability.\n"
- title: 5.10.2.  Generated Factors
  contents:
  - "5.10.2.  Generated Factors\n   The following are generated before encrypting:\n\
    \   o  AES symmetric key as the Content Encryption Key (CEK); this\n      example\
    \ uses the key from Figure 174.\n   o  Initialization Vector; this example uses\
    \ the Initialization Vector\n      from Figure 175.\n   o  Encoded Additional\
    \ Authenticated Data (AAD); this example uses the\n      Additional Authenticated\
    \ Data from Figure 173, encoded to\n      base64url [RFC4648] as Figure 176.\n\
    \   75m1ALsYv10pZTKPWrsqdg\n           Figure 174: Content Encryption Key, base64url-encoded\n\
    \   veCx9ece2orS7c_N\n           Figure 175: Initialization Vector, base64url-encoded\n\
    \   WyJ2Y2FyZCIsW1sidmVyc2lvbiIse30sInRleHQiLCI0LjAiXSxbImZuIix7fS\n   widGV4dCIsIk1lcmlhZG9jIEJyYW5keWJ1Y2siXSxbIm4iLHt9LCJ0ZXh0Iixb\n\
    \   IkJyYW5keWJ1Y2siLCJNZXJpYWRvYyIsIk1yLiIsIiJdXSxbImJkYXkiLHt9LC\n   J0ZXh0IiwiVEEgMjk4MiJdLFsiZ2VuZGVyIix7fSwidGV4dCIsIk0iXV1d\n\
    \       Figure 176: Additional Authenticated Data, base64url-encoded\n"
- title: 5.10.3.  Encrypting the Key
  contents:
  - "5.10.3.  Encrypting the Key\n   Performing the key encryption operation over\
    \ the CEK (Figure 174)\n   with the AES symmetric key (Figure 151) produces the\
    \ following\n   Encrypted Key:\n   4YiiQ_ZzH76TaIkJmYfRFgOV9MIpnx4X\n        \
    \       Figure 177: Encrypted Key, base64url-encoded\n"
- title: 5.10.4.  Encrypting the Content
  contents:
  - "5.10.4.  Encrypting the Content\n   The following is generated before encrypting\
    \ the content:\n   o  JWE Protected Header; this example uses the header from\n\
    \      Figure 178, encoded to base64url [RFC4648] as Figure 179.\n   {\n     \"\
    alg\": \"A128KW\",\n     \"kid\": \"81b20965-8332-43d9-a468-82160ad91ac8\",\n\
    \     \"enc\": \"A128GCM\"\n   }\n                   Figure 178: JWE Protected\
    \ Header JSON\n   eyJhbGciOiJBMTI4S1ciLCJraWQiOiI4MWIyMDk2NS04MzMyLTQzZDktYTQ2OC\n\
    \   04MjE2MGFkOTFhYzgiLCJlbmMiOiJBMTI4R0NNIn0\n            Figure 179: JWE Protected\
    \ Header, base64url-encoded\n   Performing the content encryption operation over\
    \ the Plaintext with\n   the following:\n   o  CEK (Figure 174);\n   o  Initialization\
    \ Vector (Figure 175); and\n   o  Concatenation of the JWE Protected Header (Figure\
    \ 179), \".\", and\n      the base64url [RFC4648] encoding of Figure 173 as authenticated\n\
    \      data\n   produces the following:\n   o  Ciphertext from Figure 180.\n \
    \  o  Authentication Tag from Figure 181.\n   Z_3cbr0k3bVM6N3oSNmHz7Lyf3iPppGf3Pj17wNZqteJ0Ui8p74SchQP8xygM1\n\
    \   oFRWCNzeIa6s6BcEtp8qEFiqTUEyiNkOWDNoF14T_4NFqF-p2Mx8zkbKxI7oPK\n   8KNarFbyxIDvICNqBLba-v3uzXBdB89fzOI-Lv4PjOFAQGHrgv1rjXAmKbgkft\n\
    \   9cB4WeyZw8MldbBhc-V_KWZslrsLNygon_JJWd_ek6LQn5NRehvApqf9ZrxB4a\n   q3FXBxOxCys35PhCdaggy2kfUfl2OkwKnWUbgXVD1C6HxLIlqHhCwXDG59weHr\n\
    \   RDQeHyMRoBljoV3X_bUTJDnKBFOod7nLz-cj48JMx3SnCZTpbQAkFV\n                 Figure\
    \ 180: Ciphertext, base64url-encoded\n   vOaH_Rajnpy_3hOtqvZHRA\n            \
    \ Figure 181: Authentication Tag, base64url-encoded\n"
- title: 5.10.5.  Output Results
  contents:
  - "5.10.5.  Output Results\n   The following compose the resulting JWE object:\n\
    \   o  JWE Protected Header (Figure 179)\n   o  Encrypted Key (Figure 177)\n \
    \  o  Initialization Vector (Figure 175)\n   o  Additional Authenticated Data\
    \ (Figure 176)\n   o  Ciphertext (Figure 180)\n   o  Authentication Tag (Figure\
    \ 181)\n   The JWE Compact Serialization is not presented because it does not\n\
    \   support this use case.\n   The resulting JWE object using the general JWE\
    \ JSON Serialization:\n   {\n     \"recipients\": [\n       {\n         \"encrypted_key\"\
    : \"4YiiQ_ZzH76TaIkJmYfRFgOV9MIpnx4X\"\n       }\n     ],\n     \"protected\"\
    : \"eyJhbGciOiJBMTI4S1ciLCJraWQiOiI4MWIyMDk2NS04Mz\n         MyLTQzZDktYTQ2OC04MjE2MGFkOTFhYzgiLCJlbmMiOiJBMTI4R0NNIn\n\
    \         0\",\n     \"iv\": \"veCx9ece2orS7c_N\",\n     \"aad\": \"WyJ2Y2FyZCIsW1sidmVyc2lvbiIse30sInRleHQiLCI0LjAiXSxb\n\
    \         ImZuIix7fSwidGV4dCIsIk1lcmlhZG9jIEJyYW5keWJ1Y2siXSxbIm4i\n         LHt9LCJ0ZXh0IixbIkJyYW5keWJ1Y2siLCJNZXJpYWRvYyIsIk1yLiIs\n\
    \         IiJdXSxbImJkYXkiLHt9LCJ0ZXh0IiwiVEEgMjk4MiJdLFsiZ2VuZGVy\n         Iix7fSwidGV4dCIsIk0iXV1d\"\
    ,\n     \"ciphertext\": \"Z_3cbr0k3bVM6N3oSNmHz7Lyf3iPppGf3Pj17wNZqteJ0\n    \
    \     Ui8p74SchQP8xygM1oFRWCNzeIa6s6BcEtp8qEFiqTUEyiNkOWDNoF14\n         T_4NFqF-p2Mx8zkbKxI7oPK8KNarFbyxIDvICNqBLba-v3uzXBdB89fz\n\
    \         OI-Lv4PjOFAQGHrgv1rjXAmKbgkft9cB4WeyZw8MldbBhc-V_KWZslrs\n         LNygon_JJWd_ek6LQn5NRehvApqf9ZrxB4aq3FXBxOxCys35PhCdaggy\n\
    \         2kfUfl2OkwKnWUbgXVD1C6HxLIlqHhCwXDG59weHrRDQeHyMRoBljoV3\n         X_bUTJDnKBFOod7nLz-cj48JMx3SnCZTpbQAkFV\"\
    ,\n     \"tag\": \"vOaH_Rajnpy_3hOtqvZHRA\"\n   }\n                Figure 182:\
    \ General JWE JSON Serialization\n   The resulting JWE object using the flattened\
    \ JWE JSON Serialization:\n   {\n     \"protected\": \"eyJhbGciOiJBMTI4S1ciLCJraWQiOiI4MWIyMDk2NS04Mz\n\
    \         MyLTQzZDktYTQ2OC04MjE2MGFkOTFhYzgiLCJlbmMiOiJBMTI4R0NNIn\n         0\"\
    ,\n     \"encrypted_key\": \"4YiiQ_ZzH76TaIkJmYfRFgOV9MIpnx4X\",\n     \"aad\"\
    : \"WyJ2Y2FyZCIsW1sidmVyc2lvbiIse30sInRleHQiLCI0LjAiXSxb\n         ImZuIix7fSwidGV4dCIsIk1lcmlhZG9jIEJyYW5keWJ1Y2siXSxbIm4i\n\
    \         LHt9LCJ0ZXh0IixbIkJyYW5keWJ1Y2siLCJNZXJpYWRvYyIsIk1yLiIs\n         IiJdXSxbImJkYXkiLHt9LCJ0ZXh0IiwiVEEgMjk4MiJdLFsiZ2VuZGVy\n\
    \         Iix7fSwidGV4dCIsIk0iXV1d\",\n     \"iv\": \"veCx9ece2orS7c_N\",\n  \
    \   \"ciphertext\": \"Z_3cbr0k3bVM6N3oSNmHz7Lyf3iPppGf3Pj17wNZqteJ0\n        \
    \ Ui8p74SchQP8xygM1oFRWCNzeIa6s6BcEtp8qEFiqTUEyiNkOWDNoF14\n         T_4NFqF-p2Mx8zkbKxI7oPK8KNarFbyxIDvICNqBLba-v3uzXBdB89fz\n\
    \         OI-Lv4PjOFAQGHrgv1rjXAmKbgkft9cB4WeyZw8MldbBhc-V_KWZslrs\n         LNygon_JJWd_ek6LQn5NRehvApqf9ZrxB4aq3FXBxOxCys35PhCdaggy\n\
    \         2kfUfl2OkwKnWUbgXVD1C6HxLIlqHhCwXDG59weHrRDQeHyMRoBljoV3\n         X_bUTJDnKBFOod7nLz-cj48JMx3SnCZTpbQAkFV\"\
    ,\n     \"tag\": \"vOaH_Rajnpy_3hOtqvZHRA\"\n   }\n               Figure 183:\
    \ Flattened JWE JSON Serialization\n"
- title: 5.11.  Protecting Specific Header Fields
  contents:
  - "5.11.  Protecting Specific Header Fields\n   This example illustrates encrypting\
    \ content where only certain JOSE\n   Header Parameters are protected.  As this\
    \ example includes parameters\n   in the JWE Shared Unprotected Header, only the\
    \ general JWE JSON\n   Serialization and flattened JWE JSON Serialization are\
    \ possible.\n   Note that whitespace is added for readability as described in\n\
    \   Section 1.1.\n"
- title: 5.11.1.  Input Factors
  contents:
  - "5.11.1.  Input Factors\n   The following are supplied before beginning the encryption\
    \ process:\n   o  Plaintext content; this example uses the content from Figure\
    \ 72.\n   o  Recipient encryption key; this example uses the key from\n      Figure\
    \ 151.\n   o  Key encryption algorithm; this example uses \"A128KW\".\n   o  Content\
    \ encryption algorithm; this example uses \"A128GCM\".\n"
- title: 5.11.2.  Generated Factors
  contents:
  - "5.11.2.  Generated Factors\n   The following are generated before encrypting:\n\
    \   o  AES symmetric key as the Content Encryption Key (CEK); this\n      example\
    \ uses the key from Figure 184.\n   o  Initialization Vector; this example uses\
    \ the Initialization Vector\n      from Figure 185.\n   WDgEptBmQs9ouUvArz6x6g\n\
    \           Figure 184: Content Encryption Key, base64url-encoded\n   WgEJsDS9bkoXQ3nR\n\
    \           Figure 185: Initialization Vector, base64url-encoded\n"
- title: 5.11.3.  Encrypting the Key
  contents:
  - "5.11.3.  Encrypting the Key\n   Performing the key encryption operation over\
    \ the CEK (Figure 184)\n   with the AES symmetric key (Figure 151) produces the\
    \ following\n   Encrypted Key:\n   jJIcM9J-hbx3wnqhf5FlkEYos0sHsF0H\n        \
    \       Figure 186: Encrypted Key, base64url-encoded\n"
- title: 5.11.4.  Encrypting the Content
  contents:
  - "5.11.4.  Encrypting the Content\n   The following is generated before encrypting\
    \ the content:\n   o  JWE Protected Header; this example uses the header from\n\
    \      Figure 187, encoded to base64url [RFC4648] as Figure 188.\n   {\n     \"\
    enc\": \"A128GCM\"\n   }\n                   Figure 187: JWE Protected Header\
    \ JSON\n   eyJlbmMiOiJBMTI4R0NNIn0\n            Figure 188: JWE Protected Header,\
    \ base64url-encoded\n   Performing the content encryption operation over the Plaintext\
    \ with\n   the following:\n   o  CEK (Figure 184);\n   o  Initialization Vector\
    \ (Figure 185); and\n   o  JWE Protected Header (Figure 188) as authenticated\
    \ data\n   produces the following:\n   o  Ciphertext from Figure 189.\n   o  Authentication\
    \ Tag from Figure 190.\n   lIbCyRmRJxnB2yLQOTqjCDKV3H30ossOw3uD9DPsqLL2DM3swKkjOwQyZtWsFL\n\
    \   YMj5YeLht_StAn21tHmQJuuNt64T8D4t6C7kC9OCCJ1IHAolUv4MyOt80MoPb8\n   fZYbNKqplzYJgIL58g8N2v46OgyG637d6uuKPwhAnTGm_zWhqc_srOvgiLkzyF\n\
    \   XPq1hBAURbc3-8BqeRb48iR1-_5g5UjWVD3lgiLCN_P7AW8mIiFvUNXBPJK3nO\n   WL4teUPS8yHLbWeL83olU4UAgL48x-8dDkH23JykibVSQju-f7e-1xreHWXzWL\n\
    \   Hs1NqBbre0dEwK3HX_xM0LjUz77Krppgegoutpf5qaKg3l-_xMINmf\n                 Figure\
    \ 189: Ciphertext, base64url-encoded\n   fNYLqpUe84KD45lvDiaBAQ\n            \
    \ Figure 190: Authentication Tag, base64url-encoded\n"
- title: 5.11.5.  Output Results
  contents:
  - "5.11.5.  Output Results\n   The following compose the resulting JWE object:\n\
    \   o  JWE Shared Unprotected Header (Figure 191)\n   o  JWE Protected Header\
    \ (Figure 188)\n   o  Encrypted Key (Figure 186)\n   o  Initialization Vector\
    \ (Figure 185)\n   o  Ciphertext (Figure 189)\n   o  Authentication Tag (Figure\
    \ 190)\n   The JWE Compact Serialization is not presented because it does not\n\
    \   support this use case.\n   The following JWE Shared Unprotected Header is\
    \ generated before\n   assembling the output results:\n   {\n     \"alg\": \"\
    A128KW\",\n     \"kid\": \"81b20965-8332-43d9-a468-82160ad91ac8\"\n   }\n    \
    \          Figure 191: JWE Shared Unprotected Header JSON\n   The resulting JWE\
    \ object using the general JWE JSON Serialization:\n   {\n     \"recipients\"\
    : [\n       {\n         \"encrypted_key\": \"jJIcM9J-hbx3wnqhf5FlkEYos0sHsF0H\"\
    \n       }\n     ],\n     \"unprotected\": {\n       \"alg\": \"A128KW\",\n  \
    \     \"kid\": \"81b20965-8332-43d9-a468-82160ad91ac8\"\n     },\n     \"protected\"\
    : \"eyJlbmMiOiJBMTI4R0NNIn0\",\n     \"iv\": \"WgEJsDS9bkoXQ3nR\",\n     \"ciphertext\"\
    : \"lIbCyRmRJxnB2yLQOTqjCDKV3H30ossOw3uD9DPsqLL2D\n         M3swKkjOwQyZtWsFLYMj5YeLht_StAn21tHmQJuuNt64T8D4t6C7kC9O\n\
    \         CCJ1IHAolUv4MyOt80MoPb8fZYbNKqplzYJgIL58g8N2v46OgyG637d6\n         uuKPwhAnTGm_zWhqc_srOvgiLkzyFXPq1hBAURbc3-8BqeRb48iR1-_5\n\
    \         g5UjWVD3lgiLCN_P7AW8mIiFvUNXBPJK3nOWL4teUPS8yHLbWeL83olU\n         4UAgL48x-8dDkH23JykibVSQju-f7e-1xreHWXzWLHs1NqBbre0dEwK3\n\
    \         HX_xM0LjUz77Krppgegoutpf5qaKg3l-_xMINmf\",\n     \"tag\": \"fNYLqpUe84KD45lvDiaBAQ\"\
    \n   }\n                Figure 192: General JWE JSON Serialization\n   The resulting\
    \ JWE object using the flattened JWE JSON Serialization:\n   {\n     \"protected\"\
    : \"eyJlbmMiOiJBMTI4R0NNIn0\",\n     \"unprotected\": {\n       \"alg\": \"A128KW\"\
    ,\n       \"kid\": \"81b20965-8332-43d9-a468-82160ad91ac8\"\n     },\n     \"\
    encrypted_key\": \"jJIcM9J-hbx3wnqhf5FlkEYos0sHsF0H\",\n     \"iv\": \"WgEJsDS9bkoXQ3nR\"\
    ,\n     \"ciphertext\": \"lIbCyRmRJxnB2yLQOTqjCDKV3H30ossOw3uD9DPsqLL2D\n    \
    \     M3swKkjOwQyZtWsFLYMj5YeLht_StAn21tHmQJuuNt64T8D4t6C7kC9O\n         CCJ1IHAolUv4MyOt80MoPb8fZYbNKqplzYJgIL58g8N2v46OgyG637d6\n\
    \         uuKPwhAnTGm_zWhqc_srOvgiLkzyFXPq1hBAURbc3-8BqeRb48iR1-_5\n         g5UjWVD3lgiLCN_P7AW8mIiFvUNXBPJK3nOWL4teUPS8yHLbWeL83olU\n\
    \         4UAgL48x-8dDkH23JykibVSQju-f7e-1xreHWXzWLHs1NqBbre0dEwK3\n         HX_xM0LjUz77Krppgegoutpf5qaKg3l-_xMINmf\"\
    ,\n     \"tag\": \"fNYLqpUe84KD45lvDiaBAQ\"\n   }\n               Figure 193:\
    \ Flattened JWE JSON Serialization\n"
- title: 5.12.  Protecting Content Only
  contents:
  - "5.12.  Protecting Content Only\n   This example illustrates encrypting content\
    \ where none of the JOSE\n   header parameters are protected.  As this example\
    \ includes parameters\n   only in the JWE Shared Unprotected Header, only the\
    \ flattened JWE\n   JSON Serialization and general JWE JSON Serialization are\
    \ possible.\n   Note that whitespace is added for readability as described in\n\
    \   Section 1.1.\n"
- title: 5.12.1.  Input Factors
  contents:
  - "5.12.1.  Input Factors\n   The following are supplied before beginning the encryption\
    \ process:\n   o  Plaintext content; this example uses the content from Figure\
    \ 72.\n   o  Recipient encryption key; this example uses the key from\n      Figure\
    \ 151.\n   o  Key encryption algorithm; this example uses \"A128KW\".\n   o  Content\
    \ encryption algorithm; this example uses \"A128GCM\".\n"
- title: 5.12.2.  Generated Factors
  contents:
  - "5.12.2.  Generated Factors\n   The following are generated before encrypting:\n\
    \   o  AES symmetric key as the Content Encryption Key; this example the\n   \
    \   key from Figure 194.\n   o  Initialization Vector; this example uses the Initialization\
    \ Vector\n      from Figure 195.\n   KBooAFl30QPV3vkcZlXnzQ\n           Figure\
    \ 194: Content Encryption Key, base64url-encoded\n   YihBoVOGsR1l7jCD\n      \
    \     Figure 195: Initialization Vector, base64url-encoded\n"
- title: 5.12.3.  Encrypting the Key
  contents:
  - "5.12.3.  Encrypting the Key\n   Performing the key encryption operation over\
    \ the CEK (Figure 194)\n   with the AES symmetric key (Figure 151) produces the\
    \ following\n   Encrypted Key:\n   244YHfO_W7RMpQW81UjQrZcq5LSyqiPv\n        \
    \       Figure 196: Encrypted Key, base64url-encoded\n"
- title: 5.12.4.  Encrypting the Content
  contents:
  - "5.12.4.  Encrypting the Content\n   Performing the content encryption operation\
    \ over the Plaintext\n   (Figure 72) using the following:\n   o  CEK (Figure 194);\n\
    \   o  Initialization Vector (Figure 195); and\n   o  Empty string as authenticated\
    \ data\n   produces the following:\n   o  Ciphertext from Figure 197.\n   o  Authentication\
    \ Tag from Figure 198.\n   qtPIMMaOBRgASL10dNQhOa7Gqrk7Eal1vwht7R4TT1uq-arsVCPaIeFwQfzrSS\n\
    \   6oEUWbBtxEasE0vC6r7sphyVziMCVJEuRJyoAHFSP3eqQPb4Ic1SDSqyXjw_L3\n   svybhHYUGyQuTmUQEDjgjJfBOifwHIsDsRPeBz1NomqeifVPq5GTCWFo5k_MNI\n\
    \   QURR2Wj0AHC2k7JZfu2iWjUHLF8ExFZLZ4nlmsvJu_mvifMYiikfNfsZAudISO\n   a6O73yPZtL04k_1FI7WDfrb2w7OqKLWDXzlpcxohPVOLQwpA3mFNRKdY-bQz4Z\n\
    \   4KX9lfz1cne31N4-8BKmojpw-OdQjKdLOGkC445Fb_K1tlDQXw2sBF\n                 Figure\
    \ 197: Ciphertext, base64url-encoded\n   e2m0Vm7JvjK2VpCKXS-kyg\n            \
    \ Figure 198: Authentication Tag, base64url-encoded\n"
- title: 5.12.5.  Output Results
  contents:
  - "5.12.5.  Output Results\n   The JWE Compact Serialization is not presented because\
    \ it does not\n   support this use case.\n   The following JWE Shared Unprotected\
    \ Header is generated before\n   assembling the output results:\n   {\n     \"\
    alg\": \"A128KW\",\n     \"kid\": \"81b20965-8332-43d9-a468-82160ad91ac8\",\n\
    \     \"enc\": \"A128GCM\"\n   }\n              Figure 199: JWE Shared Unprotected\
    \ Header JSON\n   The following compose the resulting JWE object:\n   o  JWE Shared\
    \ Unprotected Header (Figure 199)\n   o  Encrypted Key (Figure 196)\n   o  Initialization\
    \ Vector (Figure 195)\n   o  Ciphertext (Figure 197)\n   o  Authentication Tag\
    \ (Figure 198)\n   The resulting JWE object using the general JWE JSON Serialization:\n\
    \   {\n     \"recipients\": [\n       {\n         \"encrypted_key\": \"244YHfO_W7RMpQW81UjQrZcq5LSyqiPv\"\
    \n       }\n     ],\n     \"unprotected\": {\n       \"alg\": \"A128KW\",\n  \
    \     \"kid\": \"81b20965-8332-43d9-a468-82160ad91ac8\",\n       \"enc\": \"A128GCM\"\
    \n     },\n     \"iv\": \"YihBoVOGsR1l7jCD\",\n     \"ciphertext\": \"qtPIMMaOBRgASL10dNQhOa7Gqrk7Eal1vwht7R4TT1uq-\n\
    \         arsVCPaIeFwQfzrSS6oEUWbBtxEasE0vC6r7sphyVziMCVJEuRJyoAHF\n         SP3eqQPb4Ic1SDSqyXjw_L3svybhHYUGyQuTmUQEDjgjJfBOifwHIsDs\n\
    \         RPeBz1NomqeifVPq5GTCWFo5k_MNIQURR2Wj0AHC2k7JZfu2iWjUHLF8\n         ExFZLZ4nlmsvJu_mvifMYiikfNfsZAudISOa6O73yPZtL04k_1FI7WDf\n\
    \         rb2w7OqKLWDXzlpcxohPVOLQwpA3mFNRKdY-bQz4Z4KX9lfz1cne31N4\n         -8BKmojpw-OdQjKdLOGkC445Fb_K1tlDQXw2sBF\"\
    ,\n     \"tag\": \"e2m0Vm7JvjK2VpCKXS-kyg\"\n   }\n                Figure 200:\
    \ General JWE JSON Serialization\n   The resulting JWE object using the flattened\
    \ JWE JSON Serialization:\n   {\n     \"unprotected\": {\n       \"alg\": \"A128KW\"\
    ,\n       \"kid\": \"81b20965-8332-43d9-a468-82160ad91ac8\",\n       \"enc\":\
    \ \"A128GCM\"\n     },\n     \"encrypted_key\": \"244YHfO_W7RMpQW81UjQrZcq5LSyqiPv\"\
    ,\n     \"iv\": \"YihBoVOGsR1l7jCD\",\n     \"ciphertext\": \"qtPIMMaOBRgASL10dNQhOa7Gqrk7Eal1vwht7R4TT1uq-\n\
    \         arsVCPaIeFwQfzrSS6oEUWbBtxEasE0vC6r7sphyVziMCVJEuRJyoAHF\n         SP3eqQPb4Ic1SDSqyXjw_L3svybhHYUGyQuTmUQEDjgjJfBOifwHIsDs\n\
    \         RPeBz1NomqeifVPq5GTCWFo5k_MNIQURR2Wj0AHC2k7JZfu2iWjUHLF8\n         ExFZLZ4nlmsvJu_mvifMYiikfNfsZAudISOa6O73yPZtL04k_1FI7WDf\n\
    \         rb2w7OqKLWDXzlpcxohPVOLQwpA3mFNRKdY-bQz4Z4KX9lfz1cne31N4\n         -8BKmojpw-OdQjKdLOGkC445Fb_K1tlDQXw2sBF\"\
    ,\n     \"tag\": \"e2m0Vm7JvjK2VpCKXS-kyg\"\n   }\n               Figure 201:\
    \ Flattened JWE JSON Serialization\n"
- title: 5.13.  Encrypting to Multiple Recipients
  contents:
  - "5.13.  Encrypting to Multiple Recipients\n   This example illustrates encryption\
    \ content for multiple recipients.\n   As this example has multiple recipients,\
    \ only the general JWE JSON\n   Serialization is possible.\n   Note that RSAES-PKCS1-v1_5\
    \ uses random data to generate the\n   ciphertext; it might not be possible to\
    \ exactly replicate the results\n   in this section.\n   Note that whitespace\
    \ is added for readability as described in\n   Section 1.1.\n"
- title: 5.13.1.  Input Factors
  contents:
  - "5.13.1.  Input Factors\n   The following are supplied before beginning the encryption\
    \ process:\n   o  Plaintext content; this example uses the Plaintext from Figure\
    \ 72.\n   o  Recipient keys; this example uses the following:\n      *  The RSA\
    \ public key from Figure 73 for the first recipient.\n      *  The EC public key\
    \ from Figure 108 for the second recipient.\n      *  The AES symmetric key from\
    \ Figure 138 for the third recipient.\n   o  Key encryption algorithms; this example\
    \ uses the following:\n      *  \"RSA1_5\" for the first recipient.\n      * \
    \ \"ECDH-ES+A256KW\" for the second recipient.\n      *  \"A256GCMKW\" for the\
    \ third recipient.\n   o  Content encryption algorithm; this example uses \"A128CBC-HS256\"\
    .\n"
- title: 5.13.2.  Generated Factors
  contents:
  - "5.13.2.  Generated Factors\n   The following are generated before encrypting:\n\
    \   o  AES symmetric key as the Content Encryption Key (CEK); this\n      example\
    \ uses the key from Figure 202.\n   o  Initialization Vector; this example uses\
    \ the Initialization Vector\n      from Figure 203.\n   zXayeJ4gvm8NJr3IUInyokTUO-LbQNKEhe_zWlYbdpQ\n\
    \           Figure 202: Content Encryption Key, base64url-encoded\n   VgEIHY20EnzUtZFl2RpB1g\n\
    \           Figure 203: Initialization Vector, base64url-encoded\n"
- title: 5.13.3.  Encrypting the Key to the First Recipient
  contents:
  - "5.13.3.  Encrypting the Key to the First Recipient\n   Performing the \"RSA1_5\"\
    \ key encryption operation over the CEK\n   (Figure 202) with the first recipient's\
    \ RSA key (Figure 73) produces\n   the following Encrypted Key:\n   dYOD28kab0Vvf4ODgxVAJXgHcSZICSOp8M51zjwj4w6Y5G4XJQsNNIBiqyvUUA\n\
    \   OcpL7S7-cFe7Pio7gV_Q06WmCSa-vhW6me4bWrBf7cHwEQJdXihidAYWVajJIa\n   KMXMvFRMV6iDlRr076DFthg2_AV0_tSiV6xSEIFqt1xnYPpmP91tc5WJDOGb-w\n\
    \   qjw0-b-S1laS11QVbuP78dQ7Fa0zAVzzjHX-xvyM2wxj_otxr9clN1LnZMbeYS\n   rRicJK5xodvWgkpIdkMHo4LvdhRRvzoKzlic89jFWPlnBq_V4n5trGuExtp_-d\n\
    \   bHcGlihqc_wGgho9fLMK8JOArYLcMDNQ\n         Figure 204: Recipient #1 Encrypted\
    \ Key, base64url-encoded\n   The following is generated after encrypting the CEK\
    \ for the first\n   recipient:\n   o  Recipient JWE Unprotected Header from Figure\
    \ 205.\n   {\n     \"alg\": \"RSA1_5\",\n     \"kid\": \"frodo.baggins@hobbiton.example\"\
    \n   }\n    Figure 205: Recipient #1 JWE Per-Recipient Unprotected Header JSON\n\
    \   The following is the assembled first recipient JSON:\n   {\n     \"encrypted_key\"\
    : \"dYOD28kab0Vvf4ODgxVAJXgHcSZICSOp8M51zjwj4w\n         6Y5G4XJQsNNIBiqyvUUAOcpL7S7-cFe7Pio7gV_Q06WmCSa-vhW6me4b\n\
    \         WrBf7cHwEQJdXihidAYWVajJIaKMXMvFRMV6iDlRr076DFthg2_AV0_t\n         SiV6xSEIFqt1xnYPpmP91tc5WJDOGb-wqjw0-b-S1laS11QVbuP78dQ7\n\
    \         Fa0zAVzzjHX-xvyM2wxj_otxr9clN1LnZMbeYSrRicJK5xodvWgkpIdk\n         MHo4LvdhRRvzoKzlic89jFWPlnBq_V4n5trGuExtp_-dbHcGlihqc_wG\n\
    \         gho9fLMK8JOArYLcMDNQ\",\n     \"header\": {\n       \"alg\": \"RSA1_5\"\
    ,\n       \"kid\": \"frodo.baggins@hobbiton.example\"\n     }\n   }\n        \
    \               Figure 206: Recipient #1 JSON\n"
- title: 5.13.4.  Encrypting the Key to the Second Recipient
  contents:
  - "5.13.4.  Encrypting the Key to the Second Recipient\n   The following is generated\
    \ before encrypting the CEK for the second\n   recipient:\n   o  Ephemeral EC\
    \ private key on the same curve as the EC public key;\n      this example uses\
    \ the private key from Figure 207.\n   {\n     \"kty\": \"EC\",\n     \"crv\"\
    : \"P-384\",\n     \"x\": \"Uzdvk3pi5wKCRc1izp5_r0OjeqT-I68i8g2b8mva8diRhsE2xAn2Dt\n\
    \         MRb25Ma2CX\",\n     \"y\": \"VDrRyFJh-Kwd1EjAgmj5Eo-CTHAZ53MC7PjjpLioy3ylEjI1pOMbw9\n\
    \         1fzZ84pbfm\",\n     \"d\": \"1DKHfTv-PiifVw2VBHM_ZiVcwOMxkOyANS_lQHJcrDxVY3jhVCvZPw\n\
    \         MxJKIE793C\"\n   }\n     Figure 207: Ephemeral Private Key for Recipient\
    \ #2, in JWK Format\n   Performing the \"ECDH-ES+A256KW\" key encryption operation\
    \ over the CEK\n   (Figure 202) with the following:\n   o  Static Elliptic Curve\
    \ public key (Figure 108).\n   o  Ephemeral Elliptic Curve private key (Figure\
    \ 207).\n   produces the following Encrypted Key:\n   ExInT0io9BqBMYF6-maw5tZlgoZXThD1zWKsHixJuw_elY4gSSId_w\n\
    \         Figure 208: Recipient #2 Encrypted Key, base64url-encoded\n   The following\
    \ is generated after encrypting the CEK for the second\n   recipient:\n   o  Recipient\
    \ JWE Unprotected Header from Figure 209.\n   {\n     \"alg\": \"ECDH-ES+A256KW\"\
    ,\n     \"kid\": \"peregrin.took@tuckborough.example\",\n     \"epk\": {\n   \
    \    \"kty\": \"EC\",\n       \"crv\": \"P-384\",\n       \"x\": \"Uzdvk3pi5wKCRc1izp5_r0OjeqT-I68i8g2b8mva8diRhsE2xAn2\n\
    \           DtMRb25Ma2CX\",\n       \"y\": \"VDrRyFJh-Kwd1EjAgmj5Eo-CTHAZ53MC7PjjpLioy3ylEjI1pOMb\n\
    \           w91fzZ84pbfm\"\n     }\n   }\n    Figure 209: Recipient #2 JWE Per-Recipient\
    \ Unprotected Header JSON\n   The following is the assembled second recipient\
    \ JSON:\n   {\n     \"encrypted_key\": \"ExInT0io9BqBMYF6-maw5tZlgoZXThD1zWKsHixJuw\n\
    \         _elY4gSSId_w\",\n     \"header\": {\n       \"alg\": \"ECDH-ES+A256KW\"\
    ,\n       \"kid\": \"peregrin.took@tuckborough.example\",\n       \"epk\": {\n\
    \         \"kty\": \"EC\",\n         \"crv\": \"P-384\",\n         \"x\": \"Uzdvk3pi5wKCRc1izp5_r0OjeqT-I68i8g2b8mva8diRhsE2xA\n\
    \             n2DtMRb25Ma2CX\",\n         \"y\": \"VDrRyFJh-Kwd1EjAgmj5Eo-CTHAZ53MC7PjjpLioy3ylEjI1pO\n\
    \             Mbw91fzZ84pbfm\"\n       }\n     }\n   }\n                     \
    \  Figure 210: Recipient #2 JSON\n"
- title: 5.13.5.  Encrypting the Key to the Third Recipient
  contents:
  - "5.13.5.  Encrypting the Key to the Third Recipient\n   The following is generated\
    \ before encrypting the CEK for the third\n   recipient:\n   o  Initialization\
    \ Vector for key wrapping; this example uses the\n      Initialization Vector\
    \ from Figure 211.\n   AvpeoPZ9Ncn9mkBn\n     Figure 211: Recipient #2 Initialization\
    \ Vector for Key Wrapping,\n                             base64url-encoded\n \
    \  Performing the \"A256GCMKW\" key encryption operation over the CEK\n   (Figure\
    \ 202) with the following:\n   o  AES symmetric key (Figure 138); and\n   o  Initialization\
    \ Vector (Figure 211)\n   produces the following:\n   o  Encrypted Key from Figure\
    \ 212.\n   o  Authentication Tag from Figure 213.\n   a7CclAejo_7JSuPB8zeagxXRam8dwCfmkt9-WyTpS1E\n\
    \         Figure 212: Recipient #3 Encrypted Key, base64url-encoded\n   59Nqh1LlYtVIhfD3pgRGvw\n\
    \      Figure 213: Recipient #3 Authentication Tag from Key Wrapping,\n      \
    \                       base64url-encoded\n   The following is generated after\
    \ encrypting the CEK for the third\n   recipient:\n   o  Recipient JWE Unprotected\
    \ Header; this example uses the header\n      from Figure 214.\n   {\n     \"\
    alg\": \"A256GCMKW\",\n     \"kid\": \"18ec08e1-bfa9-4d95-b205-2b4dd1d4321d\"\
    ,\n     \"tag\": \"59Nqh1LlYtVIhfD3pgRGvw\",\n     \"iv\": \"AvpeoPZ9Ncn9mkBn\"\
    \n   }\n    Figure 214: Recipient #3 JWE Per-Recipient Unprotected Header JSON\n\
    \   The following is the assembled third recipient JSON:\n   {\n     \"encrypted_key\"\
    : \"a7CclAejo_7JSuPB8zeagxXRam8dwCfmkt9-WyTpS1\n         E\",\n     \"header\"\
    : {\n       \"alg\": \"A256GCMKW\",\n       \"kid\": \"18ec08e1-bfa9-4d95-b205-2b4dd1d4321d\"\
    ,\n       \"tag\": \"59Nqh1LlYtVIhfD3pgRGvw\",\n       \"iv\": \"AvpeoPZ9Ncn9mkBn\"\
    \n     }\n   }\n                       Figure 215: Recipient #3 JSON\n"
- title: 5.13.6.  Encrypting the Content
  contents:
  - "5.13.6.  Encrypting the Content\n   The following is generated before encrypting\
    \ the content:\n   o  JWE Protected Header; this example uses the header from\n\
    \      Figure 216, encoded to base64url [RFC4648] as Figure 217.\n   {\n     \"\
    enc\": \"A128CBC-HS256\"\n   }\n                   Figure 216: JWE Protected Header\
    \ JSON\n   eyJlbmMiOiJBMTI4Q0JDLUhTMjU2In0\n            Figure 217: JWE Protected\
    \ Header, base64url-encoded\n   Performing the content encryption operation over\
    \ the Plaintext\n   (Figure 72) with the following:\n   o  CEK (Figure 202),\n\
    \   o  Initialization Vector (Figure 203), and\n   o  JWE Protected Header (Figure\
    \ 217) as the authenticated data\n   produces the following:\n   o  Ciphertext\
    \ from Figure 218.\n   o  Authentication Tag from Figure 219.\n   ajm2Q-OpPXCr7-MHXicknb1lsxLdXxK_yLds0KuhJzfWK04SjdxQeSw2L9mu3a\n\
    \   _k1C55kCQ_3xlkcVKC5yr__Is48VOoK0k63_QRM9tBURMFqLByJ8vOYQX0oJW4\n   VUHJLmGhF-tVQWB7Kz8mr8zeE7txF0MSaP6ga7-siYxStR7_G07Thd1jh-zGT0\n\
    \   wxM5g-VRORtq0K6AXpLlwEqRp7pkt2zRM0ZAXqSpe1O6FJ7FHLDyEFnD-zDIZu\n   kLpCbzhzMDLLw2-8I14FQrgi-iEuzHgIJFIJn2wh9Tj0cg_kOZy9BqMRZbmYXM\n\
    \   Y9YQjorZ_P_JYG3ARAIF3OjDNqpdYe-K_5Q5crGJSDNyij_ygEiItR5jssQVH2\n   ofDQdLChtazE\n\
    \                 Figure 218: Ciphertext, base64url-encoded\n   BESYyFN7T09KY7i8zKs5_g\n\
    \             Figure 219: Authentication Tag, base64url-encoded\n   The following\
    \ is generated after encrypting the Plaintext:\n   o  JWE Shared Unprotected Header\
    \ parameters; this example uses the\n      header from Figure 220.\n   {\n   \
    \  \"cty\": \"text/plain\"\n   }\n              Figure 220: JWE Shared Unprotected\
    \ Header JSON\n"
- title: 5.13.7.  Output Results
  contents:
  - "5.13.7.  Output Results\n   The following compose the resulting JWE object:\n\
    \   o  Recipient #1 JSON (Figure 206)\n   o  Recipient #2 JSON (Figure 210)\n\
    \   o  Recipient #3 JSON (Figure 215)\n   o  Initialization Vector (Figure 203)\n\
    \   o  Ciphertext (Figure 218)\n   o  Authentication Tag (Figure 219)\n   The\
    \ JWE Compact Serialization is not presented because it does not\n   support this\
    \ use case; the flattened JWE JSON Serialization is not\n   presented because\
    \ there is more than one recipient.\n   The resulting JWE object using the general\
    \ JWE JSON Serialization:\n   {\n     \"recipients\": [\n       {\n         \"\
    encrypted_key\": \"dYOD28kab0Vvf4ODgxVAJXgHcSZICSOp8M51zj\n             wj4w6Y5G4XJQsNNIBiqyvUUAOcpL7S7-cFe7Pio7gV_Q06WmCSa-\n\
    \             vhW6me4bWrBf7cHwEQJdXihidAYWVajJIaKMXMvFRMV6iDlRr076\n         \
    \    DFthg2_AV0_tSiV6xSEIFqt1xnYPpmP91tc5WJDOGb-wqjw0-b-S\n             1laS11QVbuP78dQ7Fa0zAVzzjHX-xvyM2wxj_otxr9clN1LnZMbe\n\
    \             YSrRicJK5xodvWgkpIdkMHo4LvdhRRvzoKzlic89jFWPlnBq_V4n\n         \
    \    5trGuExtp_-dbHcGlihqc_wGgho9fLMK8JOArYLcMDNQ\",\n         \"header\": {\n\
    \           \"alg\": \"RSA1_5\",\n           \"kid\": \"frodo.baggins@hobbiton.example\"\
    \n         }\n       },\n       {\n         \"encrypted_key\": \"ExInT0io9BqBMYF6-maw5tZlgoZXThD1zWKsHi\n\
    \             xJuw_elY4gSSId_w\",\n         \"header\": {\n           \"alg\"\
    : \"ECDH-ES+A256KW\",\n           \"kid\": \"peregrin.took@tuckborough.example\"\
    ,\n           \"epk\": {\n             \"kty\": \"EC\",\n             \"crv\"\
    : \"P-384\",\n             \"x\": \"Uzdvk3pi5wKCRc1izp5_r0OjeqT-I68i8g2b8mva8diRhs\n\
    \                 E2xAn2DtMRb25Ma2CX\",\n             \"y\": \"VDrRyFJh-Kwd1EjAgmj5Eo-CTHAZ53MC7PjjpLioy3ylEj\n\
    \                 I1pOMbw91fzZ84pbfm\"\n           }\n         }\n       },\n\
    \       {\n         \"encrypted_key\": \"a7CclAejo_7JSuPB8zeagxXRam8dwCfmkt9-Wy\n\
    \             TpS1E\",\n         \"header\": {\n           \"alg\": \"A256GCMKW\"\
    ,\n           \"kid\": \"18ec08e1-bfa9-4d95-b205-2b4dd1d4321d\",\n           \"\
    tag\": \"59Nqh1LlYtVIhfD3pgRGvw\",\n           \"iv\": \"AvpeoPZ9Ncn9mkBn\"\n\
    \         }\n       }\n     ],\n     \"unprotected\": {\n       \"cty\": \"text/plain\"\
    \n     },\n     \"protected\": \"eyJlbmMiOiJBMTI4Q0JDLUhTMjU2In0\",\n     \"iv\"\
    : \"VgEIHY20EnzUtZFl2RpB1g\",\n     \"ciphertext\": \"ajm2Q-OpPXCr7-MHXicknb1lsxLdXxK_yLds0KuhJzfWK\n\
    \         04SjdxQeSw2L9mu3a_k1C55kCQ_3xlkcVKC5yr__Is48VOoK0k63_QRM\n         9tBURMFqLByJ8vOYQX0oJW4VUHJLmGhF-tVQWB7Kz8mr8zeE7txF0MSa\n\
    \         P6ga7-siYxStR7_G07Thd1jh-zGT0wxM5g-VRORtq0K6AXpLlwEqRp7p\n         kt2zRM0ZAXqSpe1O6FJ7FHLDyEFnD-zDIZukLpCbzhzMDLLw2-8I14FQ\n\
    \         rgi-iEuzHgIJFIJn2wh9Tj0cg_kOZy9BqMRZbmYXMY9YQjorZ_P_JYG3\n         ARAIF3OjDNqpdYe-K_5Q5crGJSDNyij_ygEiItR5jssQVH2ofDQdLCht\n\
    \         azE\",\n     \"tag\": \"BESYyFN7T09KY7i8zKs5_g\"\n   }\n           \
    \     Figure 221: General JWE JSON Serialization\n"
- title: 6.  Nesting Signatures and Encryption
  contents:
  - "6.  Nesting Signatures and Encryption\n   This example illustrates nesting a\
    \ JSON Web Signature (JWS) structure\n   within a JSON Web Encryption (JWE) structure.\
    \  The signature uses the\n   \"PS256\" (RSASSA-PSS) algorithm; the encryption\
    \ uses the \"RSA-OAEP\"\n   (RSAES-OAEP) key encryption algorithm and the \"A128GCM\"\
    \ (AES-GCM)\n   content encryption algorithm.\n   Note that RSASSA-PSS uses random\
    \ data to generate the signature, and\n   RSAES-OAEP uses random data to generate\
    \ the ciphertext; it might not\n   be possible to exactly replicate the results\
    \ in this section.\n   Note that whitespace is added for readability as described\
    \ in\n   Section 1.1.\n"
- title: 6.1.  Signing Input Factors
  contents:
  - "6.1.  Signing Input Factors\n   The following are supplied before beginning the\
    \ signing operation:\n   o  Payload content; this example uses the JSON Web Token\
    \ [JWT]\n      content from Figure 222, encoded as base64url [RFC4648] to produce\n\
    \      Figure 223.\n   o  RSA private key; this example uses the key from Figure\
    \ 224.\n   o  \"alg\" parameter of \"PS256\".\n   {\n     \"iss\": \"hobbiton.example\"\
    ,\n     \"exp\": 1300819380,\n     \"http://example.com/is_root\": true\n   }\n\
    \                Figure 222: Payload Content, in JSON Format\n   eyJpc3MiOiJob2JiaXRvbi5leGFtcGxlIiwiZXhwIjoxMzAwODE5MzgwLCJodH\n\
    \   RwOi8vZXhhbXBsZS5jb20vaXNfcm9vdCI6dHJ1ZX0\n              Figure 223: Payload\
    \ Content, base64url-encoded\n   {\n     \"kty\": \"RSA\",\n     \"kid\": \"hobbiton.example\"\
    ,\n     \"use\": \"sig\",\n     \"n\": \"kNrPIBDXMU6fcyv5i-QHQAQ-K8gsC3HJb7FYhYaw8hXbNJa-t8q0lD\n\
    \         KwLZgQXYV-ffWxXJv5GGrlZE4GU52lfMEegTDzYTrRQ3tepgKFjMGg6I\n         y6fkl1ZNsx2gEonsnlShfzA9GJwRTmtKPbk1s-hwx1IU5AT-AIelNqBg\n\
    \         cF2vE5W25_SGGBoaROVdUYxqETDggM1z5cKV4ZjDZ8-lh4oVB07bkac6\n         LQdHpJUUySH_Er20DXx30Kyi97PciXKTS-QKXnmm8ivyRCmux22ZoPUi\n\
    \         nd2BKC5OiG4MwALhaL2Z2k8CsRdfy-7dg7z41Rp6D0ZeEvtaUp4bX4aK\n         raL4rTfw\"\
    ,\n     \"e\": \"AQAB\",\n     \"d\": \"ZLe_TIxpE9-W_n2VBa-HWvuYPtjvxwVXClJFOpJsdea8g9RMx34qEO\n\
    \         EtnoYc2un3CZ3LtJi-mju5RAT8YSc76YJds3ZVw0UiO8mMBeG6-iOnvg\n         obobNx7K57-xjTJZU72EjOr9kB7z6ZKwDDq7HFyCDhUEcYcHFVc7iL_6\n\
    \         TibVhAhOFONWlqlJgEgwVYd0rybNGKifdnpEbwyHoMwY6HM1qvnEFgP7\n         iZ0YzHUT535x6jj4VKcdA7ZduFkhUauysySEW7mxZM6fj1vdjJIy9LD1\n\
    \         fIz30Xv4ckoqhKF5GONU6tNmMmNgAD6gIViyEle1PrIxl1tBhCI14bRW\n         -zrpHgAQ\"\
    ,\n     \"p\": \"yKWYoNIAqwMRQlgIBOdT1NIcbDNUUs2Rh-pBaxD_mIkweMt4Mg-0-B\n    \
    \     2iSYvMrs8horhonV7vxCQagcBAATGW-hAafUehWjxWSH-3KccRM8toL4\n         e0q7M-idRDOBXSoe7Z2-CV2x_ZCY3RP8qp642R13WgXqGDIM4MbUkZSj\n\
    \         cY9-c\",\n     \"q\": \"uND4o15V30KDzf8vFJw589p1vlQVQ3NEilrinRUPHkkxaAzDzccGgr\n\
    \         WMWpGxGFFnNL3w5CqPLeU76-5IVYQq0HwYVl0hVXQHr7sgaGu-483Ad3\n         ENcL23FrOnF45m7_2ooAstJDe49MeLTTQKrSIBl_SKvqpYvfSPTczPcZ\n\
    \         kh9Kk\",\n     \"dp\": \"jmTnEoq2qqa8ouaymjhJSCnsveUXnMQC2gAneQJRQkFqQu-zV2PKP\n\
    \         KNbPvKVyiF5b2-L3tM3OW2d2iNDyRUWXlT7V5l0KwPTABSTOnTqAmYCh\n         Gi8kXXdlhcrtSvXldBakC6saxwI_TzGGY2MVXzc2ZnCvCXHV4qjSxOrf\n\
    \         P3pHFU\",\n     \"dq\": \"R9FUvU88OVzEkTkXl3-5-WusE4DjHmndeZIlu3rifBdfLpq_P-iWP\n\
    \         BbGaq9wzQ1c-J7SzCdJqkEJDv5yd2C7rnZ6kpzwBh_nmL8zscAk1qsun\n         nt9CJGAYz7-sGWy1JGShFazfP52ThB4rlCJ0YuEaQMrIzpY77_oLAhpm\n\
    \         DA0hLk\",\n     \"qi\": \"S8tC7ZknW6hPITkjcwttQOPLVmRfwirRlFAViuDb8NW9CrV_7F2Oq\n\
    \         UZCqmzHTYAumwGFHI1WVRep7anleWaJjxC_1b3fq_al4qH3Pe-EKiHg6\n         IMazuRtZLUROcThrExDbF5dYbsciDnfRUWLErZ4N1Be0bnxYuPqxwKd9\n\
    \         QZwMo0\"\n   }\n            Figure 224: RSA 2048-Bit Private Key, in\
    \ JWK Format\n"
- title: 6.2.  Signing Operation
  contents:
  - "6.2.  Signing Operation\n   The following is generated to complete the signing\
    \ operation:\n   o  JWS Protected Header; this example uses the header from\n\
    \      Figure 225, encoded using base64url [RFC4648] to produce\n      Figure\
    \ 226.\n   {\n     \"alg\": \"PS256\",\n     \"typ\": \"JWT\"\n   }\n        \
    \           Figure 225: JWS Protected Header JSON\n   eyJhbGciOiJQUzI1NiIsInR5cCI6IkpXVCJ9\n\
    \            Figure 226: JWS Protected Header, base64url-encoded\n   Performing\
    \ the signature operation over the combined JWS Protected\n   Header (Figure 226)\
    \ and payload content (Figure 222) produces the\n   following signature:\n   dPpMqwRZxFYi1UfcDAaf8M99o7kwUWtiXZ-ByvVuJih4MhJ_aZqciprz0OWaIA\n\
    \   kIvn1qskChirjKvY9ESZNUCP4JjvfyPS-nqjJxYoA5ztWOyFk2cZNIPXjcJXSQ\n   wXPO9tEe-v4VSqgD0aKHqPxYog4N6Cz1lKph1U1sYDSI67_bLL7elg_vkjfMp5\n\
    \   _W5l5LuUYGMeh6hxQIaIUXf9EwV2JmvTMuZ-vBOWy0Sniy1EFo72CRTvmtrIf5\n   AROo5MNliY3KtUxeP-SOmD-LEYwW9SlkohYzMVAZDDOrVbv7KVRHpeYNaK75KE\n\
    \   QqdCEEkS_rskZS-Qtt_nlegTWh1mEYaA\n               Figure 227: JWS Signature,\
    \ base64url-encoded\n"
- title: 6.3.  Signing Output
  contents:
  - "6.3.  Signing Output\n   The following compose the resulting JWS object:\n  \
    \ o  JWS Protected Header (Figure 226)\n   o  Payload content (Figure 223)\n \
    \  o  Signature (Figure 227)\n   The resulting JWS object using the JWS Compact\
    \ Serialization (which\n   is the plaintext input to the following encryption\
    \ operation):\n   eyJhbGciOiJQUzI1NiIsInR5cCI6IkpXVCJ9\n   .\n   eyJpc3MiOiJob2JiaXRvbi5leGFtcGxlIiwiZXhwIjoxMzAwODE5MzgwLCJodH\n\
    \   RwOi8vZXhhbXBsZS5jb20vaXNfcm9vdCI6dHJ1ZX0\n   .\n   dPpMqwRZxFYi1UfcDAaf8M99o7kwUWtiXZ-ByvVuJih4MhJ_aZqciprz0OWaIA\n\
    \   kIvn1qskChirjKvY9ESZNUCP4JjvfyPS-nqjJxYoA5ztWOyFk2cZNIPXjcJXSQ\n   wXPO9tEe-v4VSqgD0aKHqPxYog4N6Cz1lKph1U1sYDSI67_bLL7elg_vkjfMp5\n\
    \   _W5l5LuUYGMeh6hxQIaIUXf9EwV2JmvTMuZ-vBOWy0Sniy1EFo72CRTvmtrIf5\n   AROo5MNliY3KtUxeP-SOmD-LEYwW9SlkohYzMVAZDDOrVbv7KVRHpeYNaK75KE\n\
    \   QqdCEEkS_rskZS-Qtt_nlegTWh1mEYaA\n                   Figure 228: JWS Compact\
    \ Serialization\n"
- title: 6.4.  Encryption Input Factors
  contents:
  - "6.4.  Encryption Input Factors\n   The following are supplied before beginning\
    \ the encryption process:\n   o  Plaintext content; this example uses the content\
    \ from Figure 228.\n   o  RSA public key; this example uses the key from Figure\
    \ 84.\n   o  \"alg\" parameter of \"RSA-OAEP\".\n   o  \"enc\" parameter of \"\
    A128GCM\".\n"
- title: 6.5.  Encryption Generated Factors
  contents:
  - "6.5.  Encryption Generated Factors\n   The following are generated before encrypting:\n\
    \   o  AES symmetric key as the Content Encryption Key (CEK); this\n      example\
    \ uses the key from Figure 229.\n   o  Initialization Vector; this example uses\
    \ the Initialization Vector\n      from Figure 230.\n   0RHSNYwN-6-2QBGsYTZLSQ\n\
    \           Figure 229: Content Encryption Key, base64url-encoded\n   GbX1i9kXz0sxXPmA\n\
    \           Figure 230: Initialization Vector, base64url-encoded\n"
- title: 6.6.  Encrypting the Key
  contents:
  - "6.6.  Encrypting the Key\n   Performing the key encryption operation over the\
    \ CEK (Figure 229)\n   with the RSA key (Figure 84) produces the following Encrypted\
    \ Key:\n   a0JHRoITfpX4qRewImjlStn8m3CPxBV1ueYlVhjurCyrBg3I7YhCRYjphDOOS4\n  \
    \ E7rXbr2Fn6NyQq-A-gqT0FXqNjVOGrG-bi13mwy7RoYhjTkBEC6P7sMYMXXx4g\n   zMedpiJHQVeyI-zkZV7A9matpgevAJWrXzOUysYGTtwoSN6gtUVtlLaivjvb21\n\
    \   O0ul4YxSHV-ByK1kyeetRp_fuYJxHoKLQL9P424sKx2WGYb4zsBIPF4ssl_e5I\n   R7nany-25_UmC2urosNkoFz9cQ82MypZP8gqbQJyPN-Fpp4Z-5o6yV64x6yzDU\n\
    \   F_5JCIdl-Qv6H5dMVIY7q1eKpXcV1lWO_2FefEBqXxXvIjLeZivjNkzogCq3-I\n   apSjVFnMjBxjpYLT8muaawo1yy1XXMuinIpNcOY3n4KKrXLrCcteX85m4IIHMZ\n\
    \   a38s1Hpr56fPPseMA-Jltmt-a9iEDtOzhtxz8AXy9tsCAZV2XBWNG8c3kJusAa\n   mBKOYwfk7JhLRDgOnJjlJLhn7TI4UxDp9dCmUXEN6z0v23W15qJIEXNJtqnblp\n\
    \   ymooeWAHCT4e_Owbim1g0AEpTHUdA2iiLNs9WTX_H_TXuPC8yDDhi1smxS_X_x\n   pkIHkiIHWDOLx03BpqDTivpKkBYwqP2UZkcxqX2Fo_GnVrNwlK7Lgxw6FSQvDO\n\
    \   0\n               Figure 231: Encrypted Key, base64url-encoded\n"
- title: 6.7.  Encrypting the Content
  contents:
  - "6.7.  Encrypting the Content\n   The following is generated before encrypting\
    \ the Plaintext:\n   o  JWE Protected Header; this example uses the header from\n\
    \      Figure 232, encoded using base64url [RFC4648] to produce\n      Figure\
    \ 233.\n   {\n     \"alg\": \"RSA-OAEP\",\n     \"cty\": \"JWT\",\n     \"enc\"\
    : \"A128GCM\"\n   }\n                   Figure 232: JWE Protected Header JSON\n\
    \   eyJhbGciOiJSU0EtT0FFUCIsImN0eSI6IkpXVCIsImVuYyI6IkExMjhHQ00ifQ\n         \
    \   Figure 233: JWE Protected Header, base64url-encoded\n   Performing the content\
    \ encryption operation over the Plaintext\n   (Figure 228) with the following:\n\
    \   o  CEK (Figure 229);\n   o  Initialization Vector (Figure 230); and\n   o\
    \  JWE Protected Header (Figure 233) as authenticated data\n   produces the following:\n\
    \   o  Ciphertext from Figure 234.\n   o  Authentication Tag from Figure 235.\n\
    \   SZI4IvKHmwpazl_pJQXX3mHv1ANnOU4Wf9-utWYUcKrBNgCe2OFMf66cSJ8k2Q\n   kxaQD3_R60MGE9ofomwtky3GFxMeGRjtpMt9OAvVLsAXB0_UTCBGyBg3C2bWLX\n\
    \   qZlfJAAoJRUPRk-BimYZY81zVBuIhc7HsQePCpu33SzMsFHjn4lP_idrJz_glZ\n   TNgKDt8zdnUPauKTKDNOH1DD4fuzvDYfDIAfqGPyL5sVRwbiXpXdGokEszM-9C\n\
    \   hMPqW1QNhzuX_Zul3bvrJwr7nuGZs4cUScY3n8yE3AHCLurgls-A9mz1X38xEa\n   ulV18l4Fg9tLejdkAuQZjPbqeHQBJe4IwGD5Ee0dQ-Mtz4NnhkIWx-YKBb_Xo2\n\
    \   zI3Q_1sYjKUuis7yWW-HTr_vqvFt0bj7WJf2vzB0TZ3dvsoGaTvPH2dyWwumUr\n   lx4gmPUzBdwTO6ubfYSDUEEz5py0d_OtWeUSYcCYBKD-aM7tXg26qJo21gYjLf\n\
    \   hn9zy-W19sOCZGuzgFjPhawXHpvnj_t-0_ES96kogjJLxS1IMU9Y5XmnwZMyNc\n   9EIwnogsCg-hVuvzyP0sIruktmI94_SL1xgMl7o03phcTMxtlMizR88NKU1WkB\n\
    \   siXMCjy1Noue7MD-ShDp5dmM\n                 Figure 234: Ciphertext, base64url-encoded\n\
    \   KnIKEhN8U-3C9s4gtSpjSw\n             Figure 235: Authentication Tag, base64url-encoded\n"
- title: 6.8.  Encryption Output
  contents:
  - "6.8.  Encryption Output\n   The following compose the resulting JWE object:\n\
    \   o  JWE Protected Header (Figure 233)\n   o  Encrypted Key (Figure 231)\n \
    \  o  Initialization Vector (Figure 230)\n   o  Ciphertext (Figure 234)\n   o\
    \  Authentication Tag (Figure 235)\n   The resulting JWE object using the JWE\
    \ Compact Serialization:\n   eyJhbGciOiJSU0EtT0FFUCIsImN0eSI6IkpXVCIsImVuYyI6IkExMjhHQ00ifQ\n\
    \   .\n   a0JHRoITfpX4qRewImjlStn8m3CPxBV1ueYlVhjurCyrBg3I7YhCRYjphDOOS4\n   E7rXbr2Fn6NyQq-A-gqT0FXqNjVOGrG-bi13mwy7RoYhjTkBEC6P7sMYMXXx4g\n\
    \   zMedpiJHQVeyI-zkZV7A9matpgevAJWrXzOUysYGTtwoSN6gtUVtlLaivjvb21\n   O0ul4YxSHV-ByK1kyeetRp_fuYJxHoKLQL9P424sKx2WGYb4zsBIPF4ssl_e5I\n\
    \   R7nany-25_UmC2urosNkoFz9cQ82MypZP8gqbQJyPN-Fpp4Z-5o6yV64x6yzDU\n   F_5JCIdl-Qv6H5dMVIY7q1eKpXcV1lWO_2FefEBqXxXvIjLeZivjNkzogCq3-I\n\
    \   apSjVFnMjBxjpYLT8muaawo1yy1XXMuinIpNcOY3n4KKrXLrCcteX85m4IIHMZ\n   a38s1Hpr56fPPseMA-Jltmt-a9iEDtOzhtxz8AXy9tsCAZV2XBWNG8c3kJusAa\n\
    \   mBKOYwfk7JhLRDgOnJjlJLhn7TI4UxDp9dCmUXEN6z0v23W15qJIEXNJtqnblp\n   ymooeWAHCT4e_Owbim1g0AEpTHUdA2iiLNs9WTX_H_TXuPC8yDDhi1smxS_X_x\n\
    \   pkIHkiIHWDOLx03BpqDTivpKkBYwqP2UZkcxqX2Fo_GnVrNwlK7Lgxw6FSQvDO\n   0\n   .\n\
    \   GbX1i9kXz0sxXPmA\n   .\n   SZI4IvKHmwpazl_pJQXX3mHv1ANnOU4Wf9-utWYUcKrBNgCe2OFMf66cSJ8k2Q\n\
    \   kxaQD3_R60MGE9ofomwtky3GFxMeGRjtpMt9OAvVLsAXB0_UTCBGyBg3C2bWLX\n   qZlfJAAoJRUPRk-BimYZY81zVBuIhc7HsQePCpu33SzMsFHjn4lP_idrJz_glZ\n\
    \   TNgKDt8zdnUPauKTKDNOH1DD4fuzvDYfDIAfqGPyL5sVRwbiXpXdGokEszM-9C\n   hMPqW1QNhzuX_Zul3bvrJwr7nuGZs4cUScY3n8yE3AHCLurgls-A9mz1X38xEa\n\
    \   ulV18l4Fg9tLejdkAuQZjPbqeHQBJe4IwGD5Ee0dQ-Mtz4NnhkIWx-YKBb_Xo2\n   zI3Q_1sYjKUuis7yWW-HTr_vqvFt0bj7WJf2vzB0TZ3dvsoGaTvPH2dyWwumUr\n\
    \   lx4gmPUzBdwTO6ubfYSDUEEz5py0d_OtWeUSYcCYBKD-aM7tXg26qJo21gYjLf\n   hn9zy-W19sOCZGuzgFjPhawXHpvnj_t-0_ES96kogjJLxS1IMU9Y5XmnwZMyNc\n\
    \   9EIwnogsCg-hVuvzyP0sIruktmI94_SL1xgMl7o03phcTMxtlMizR88NKU1WkB\n   siXMCjy1Noue7MD-ShDp5dmM\n\
    \   .\n   KnIKEhN8U-3C9s4gtSpjSw\n                   Figure 236: JWE Compact Serialization\n\
    \   The resulting JWE object using the general JWE JSON Serialization:\n   {\n\
    \     \"recipients\": [\n       {\n         \"encrypted_key\": \"a0JHRoITfpX4qRewImjlStn8m3CPxBV1ueYlVh\n\
    \             jurCyrBg3I7YhCRYjphDOOS4E7rXbr2Fn6NyQq-A-gqT0FXqNjVO\n         \
    \    GrG-bi13mwy7RoYhjTkBEC6P7sMYMXXx4gzMedpiJHQVeyI-zkZV\n             7A9matpgevAJWrXzOUysYGTtwoSN6gtUVtlLaivjvb21O0ul4YxS\n\
    \             HV-ByK1kyeetRp_fuYJxHoKLQL9P424sKx2WGYb4zsBIPF4ssl_e\n         \
    \    5IR7nany-25_UmC2urosNkoFz9cQ82MypZP8gqbQJyPN-Fpp4Z-5\n             o6yV64x6yzDUF_5JCIdl-Qv6H5dMVIY7q1eKpXcV1lWO_2FefEBq\n\
    \             XxXvIjLeZivjNkzogCq3-IapSjVFnMjBxjpYLT8muaawo1yy1XXM\n         \
    \    uinIpNcOY3n4KKrXLrCcteX85m4IIHMZa38s1Hpr56fPPseMA-Jl\n             tmt-a9iEDtOzhtxz8AXy9tsCAZV2XBWNG8c3kJusAamBKOYwfk7J\n\
    \             hLRDgOnJjlJLhn7TI4UxDp9dCmUXEN6z0v23W15qJIEXNJtqnblp\n         \
    \    ymooeWAHCT4e_Owbim1g0AEpTHUdA2iiLNs9WTX_H_TXuPC8yDDh\n             i1smxS_X_xpkIHkiIHWDOLx03BpqDTivpKkBYwqP2UZkcxqX2Fo_\n\
    \             GnVrNwlK7Lgxw6FSQvDO0\"\n       }\n     ],\n     \"protected\":\
    \ \"eyJhbGciOiJSU0EtT0FFUCIsImN0eSI6IkpXVCIsImVuYy\n         I6IkExMjhHQ00ifQ\"\
    ,\n     \"iv\": \"GbX1i9kXz0sxXPmA\",\n     \"ciphertext\": \"SZI4IvKHmwpazl_pJQXX3mHv1ANnOU4Wf9-utWYUcKrBN\n\
    \         gCe2OFMf66cSJ8k2QkxaQD3_R60MGE9ofomwtky3GFxMeGRjtpMt9OAv\n         VLsAXB0_UTCBGyBg3C2bWLXqZlfJAAoJRUPRk-BimYZY81zVBuIhc7Hs\n\
    \         QePCpu33SzMsFHjn4lP_idrJz_glZTNgKDt8zdnUPauKTKDNOH1DD4fu\n         zvDYfDIAfqGPyL5sVRwbiXpXdGokEszM-9ChMPqW1QNhzuX_Zul3bvrJ\n\
    \         wr7nuGZs4cUScY3n8yE3AHCLurgls-A9mz1X38xEaulV18l4Fg9tLejd\n         kAuQZjPbqeHQBJe4IwGD5Ee0dQ-Mtz4NnhkIWx-YKBb_Xo2zI3Q_1sYj\n\
    \         KUuis7yWW-HTr_vqvFt0bj7WJf2vzB0TZ3dvsoGaTvPH2dyWwumUrlx4\n         gmPUzBdwTO6ubfYSDUEEz5py0d_OtWeUSYcCYBKD-aM7tXg26qJo21gY\n\
    \         jLfhn9zy-W19sOCZGuzgFjPhawXHpvnj_t-0_ES96kogjJLxS1IMU9Y5\n         XmnwZMyNc9EIwnogsCg-hVuvzyP0sIruktmI94_SL1xgMl7o03phcTMx\n\
    \         tlMizR88NKU1WkBsiXMCjy1Noue7MD-ShDp5dmM\",\n     \"tag\": \"KnIKEhN8U-3C9s4gtSpjSw\"\
    \n   }\n                Figure 237: General JWE JSON Serialization\n   The resulting\
    \ JWE object using the flattened JWE JSON Serialization:\n   {\n     \"encrypted_key\"\
    : \"a0JHRoITfpX4qRewImjlStn8m3CPxBV1ueYlVhjurC\n         yrBg3I7YhCRYjphDOOS4E7rXbr2Fn6NyQq-A-gqT0FXqNjVOGrG-bi13\n\
    \         mwy7RoYhjTkBEC6P7sMYMXXx4gzMedpiJHQVeyI-zkZV7A9matpgevAJ\n         WrXzOUysYGTtwoSN6gtUVtlLaivjvb21O0ul4YxSHV-ByK1kyeetRp_f\n\
    \         uYJxHoKLQL9P424sKx2WGYb4zsBIPF4ssl_e5IR7nany-25_UmC2uros\n         NkoFz9cQ82MypZP8gqbQJyPN-Fpp4Z-5o6yV64x6yzDUF_5JCIdl-Qv6\n\
    \         H5dMVIY7q1eKpXcV1lWO_2FefEBqXxXvIjLeZivjNkzogCq3-IapSjVF\n         nMjBxjpYLT8muaawo1yy1XXMuinIpNcOY3n4KKrXLrCcteX85m4IIHMZ\n\
    \         a38s1Hpr56fPPseMA-Jltmt-a9iEDtOzhtxz8AXy9tsCAZV2XBWNG8c3\n         kJusAamBKOYwfk7JhLRDgOnJjlJLhn7TI4UxDp9dCmUXEN6z0v23W15q\n\
    \         JIEXNJtqnblpymooeWAHCT4e_Owbim1g0AEpTHUdA2iiLNs9WTX_H_TX\n         uPC8yDDhi1smxS_X_xpkIHkiIHWDOLx03BpqDTivpKkBYwqP2UZkcxqX\n\
    \         2Fo_GnVrNwlK7Lgxw6FSQvDO0\",\n     \"protected\": \"eyJhbGciOiJSU0EtT0FFUCIsImN0eSI6IkpXVCIsImVuYy\n\
    \         I6IkExMjhHQ00ifQ\",\n     \"iv\": \"GbX1i9kXz0sxXPmA\",\n     \"ciphertext\"\
    : \"SZI4IvKHmwpazl_pJQXX3mHv1ANnOU4Wf9-utWYUcKrBN\n         gCe2OFMf66cSJ8k2QkxaQD3_R60MGE9ofomwtky3GFxMeGRjtpMt9OAv\n\
    \         VLsAXB0_UTCBGyBg3C2bWLXqZlfJAAoJRUPRk-BimYZY81zVBuIhc7Hs\n         QePCpu33SzMsFHjn4lP_idrJz_glZTNgKDt8zdnUPauKTKDNOH1DD4fu\n\
    \         zvDYfDIAfqGPyL5sVRwbiXpXdGokEszM-9ChMPqW1QNhzuX_Zul3bvrJ\n         wr7nuGZs4cUScY3n8yE3AHCLurgls-A9mz1X38xEaulV18l4Fg9tLejd\n\
    \         kAuQZjPbqeHQBJe4IwGD5Ee0dQ-Mtz4NnhkIWx-YKBb_Xo2zI3Q_1sYj\n         KUuis7yWW-HTr_vqvFt0bj7WJf2vzB0TZ3dvsoGaTvPH2dyWwumUrlx4\n\
    \         gmPUzBdwTO6ubfYSDUEEz5py0d_OtWeUSYcCYBKD-aM7tXg26qJo21gY\n         jLfhn9zy-W19sOCZGuzgFjPhawXHpvnj_t-0_ES96kogjJLxS1IMU9Y5\n\
    \         XmnwZMyNc9EIwnogsCg-hVuvzyP0sIruktmI94_SL1xgMl7o03phcTMx\n         tlMizR88NKU1WkBsiXMCjy1Noue7MD-ShDp5dmM\"\
    ,\n     \"tag\": \"KnIKEhN8U-3C9s4gtSpjSw\"\n   }\n               Figure 238:\
    \ Flattened JWE JSON Serialization\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   This document is designed to provide examples\
    \ for developers to use\n   in checking their implementations.  As such, it does\
    \ not follow some\n   of the security considerations and recommendations in the\
    \ core\n   documents (i.e., [JWS], [JWE], [JWK], and [JWA]).  For instance:\n\
    \   o  it does not always generate a new CEK value for every encrypted\n     \
    \ example;\n   o  it does not always generate a new Initialization Vector (IV)\
    \ value\n      for every encrypted example; and\n   o  it does not always generate\
    \ a new ephemeral key for every\n      ephemeral key example.\n   For each example,\
    \ data that is expected to be generated for each\n   signing or encryption operation\
    \ is isolated to sections titled\n   \"Generated Factors\".\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [JWA]      Jones, M., \"JSON Web Algorithms (JWA)\"\
    , RFC 7518,\n              DOI 10.17487/RFC7518, May 2015,\n              <http://www.rfc-editor.org/info/rfc7518>.\n\
    \   [JWE]      Jones, M. and J. Hildebrand, \"JSON Web Encryption (JWE)\",\n \
    \             RFC 7516, DOI 10.17487/RFC7516, May 2015,\n              <http://www.rfc-editor.org/info/rfc7516>.\n\
    \   [JWK]      Jones, M., \"JSON Web Key (JWK)\", RFC 7517,\n              DOI\
    \ 10.17487/RFC7517, May 2015,\n              <http://www.rfc-editor.org/info/rfc7517>.\n\
    \   [JWS]      Jones, M., Bradley, J., and N. Sakimura, \"JSON Web\n         \
    \     Signature (JWS)\", RFC 7515, DOI 10.17487/RFC7515, May\n              2015,\
    \ <http://www.rfc-editor.org/info/rfc7515>.\n   [RFC4648]  Josefsson, S., \"The\
    \ Base16, Base32, and Base64 Data\n              Encodings\", RFC 4648, DOI 10.17487/RFC4648,\
    \ October 2006,\n              <http://www.rfc-editor.org/info/rfc4648>.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [JWT]      Jones, M., Bradley, J., and N. Sakimura,\
    \ \"JSON Web Token\n              (JWT)\", RFC 7519, DOI 10.17487/RFC7519, May\
    \ 2015,\n              <http://www.rfc-editor.org/info/rfc7519>.\n   [LOTR-FELLOWSHIP]\n\
    \              Tolkien, J., \"The Fellowship of the Ring\", HarperCollins\n  \
    \            Publishers, ePub Edition, ISBN 9780061952838, March 2009.\n   [RFC1951]\
    \  Deutsch, P., \"DEFLATE Compressed Data Format Specification\n             \
    \ version 1.3\", RFC 1951, DOI 10.17487/RFC1951, May 1996,\n              <http://www.rfc-editor.org/info/rfc1951>.\n\
    \   [RFC7095]  Kewisch, P., \"jCard: The JSON Format for vCard\", RFC 7095,\n\
    \              DOI 10.17487/RFC7095, January 2014,\n              <http://www.rfc-editor.org/info/rfc7095>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Most of the examples herein use quotes and character names\
    \ found in\n   the novel \"The Fellowship of the Ring\" [LOTR-FELLOWSHIP], written\
    \ by\n   J. R. R. Tolkien.\n   Thanks to Richard Barnes, Brian Campbell, Mike\
    \ Jones, and Jim Schaad\n   for their input and review of the text.  Thanks to\
    \ Brian Campbell for\n   verifying the Compact Serialization examples.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Matthew Miller\n   Cisco Systems, Inc.\n   EMail: mamille2@cisco.com\n"
