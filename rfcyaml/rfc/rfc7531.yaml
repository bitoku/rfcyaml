- contents:
  - "                  Network File System (NFS) Version 4\n        External Data
    Representation Standard (XDR) Description\n"
  title: __initial_text__
- contents:
  - "Abstract\n   The Network File System (NFS) version 4 protocol is a distributed\n
    \  file system protocol that owes its heritage to NFS protocol version 2\n   (RFC
    1094) and version 3 (RFC 1813).  Unlike earlier versions, the\n   NFS version
    4 protocol supports traditional file access while\n   integrating support for
    file locking and the MOUNT protocol.  In\n   addition, support for strong security
    (and its negotiation), COMPOUND\n   operations, client caching, and internationalization
    has been added.\n   Of course, attention has been applied to making NFS version
    4 operate\n   well in an Internet environment.\n   RFC 7530 formally obsoletes
    RFC 3530.  This document, together with\n   RFC 7530, replaces RFC 3530 as the
    definition of the NFS version 4\n   protocol.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7531.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n   This document may contain
    material from IETF Documents or IETF\n   Contributions published or made publicly
    available before November\n   10, 2008.  The person(s) controlling the copyright
    in some of this\n   material may not have granted the IETF Trust the right to
    allow\n   modifications of such material outside the IETF Standards Process.\n
    \  Without obtaining an adequate license from the person(s) controlling\n   the
    copyright in such materials, this document may not be modified\n   outside the
    IETF Standards Process, and derivative works of it may\n   not be created outside
    the IETF Standards Process, except to format\n   it for publication as an RFC
    or to translate it into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ...................................................3\n
    \  2. XDR Description of NFSv4.0 .....................................3\n   3.
    Security Considerations .......................................39\n   4. Normative
    References ..........................................39\n   Acknowledgments ..................................................39\n
    \  Authors' Addresses ...............................................39\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document contains the External Data Representation
    (XDR)\n   [RFC4506] description of the NFSv4.0 protocol [RFC7530].\n"
  title: 1.  Introduction
- contents:
  - "2.  XDR Description of NFSv4.0\n   The XDR description is provided in this document
    in a way that makes\n   it simple for the reader to extract it into a form that
    is ready to\n   compile.  The reader can feed this document in the following shell\n
    \  script to produce the machine-readable XDR description of NFSv4.0:\n      #!/bin/sh\n
    \     grep \"^  *///\" | sed 's?^  */// ??' | sed 's?^  *///$??'\n   That is,
    if the above script is stored in a file called \"extract.sh\",\n   and this document
    is in a file called \"spec.txt\", then the reader\n   can do:\n      sh extract.sh
    < spec.txt > nfs4_prot.x\n   The effect of the script is to remove leading white
    space from each\n   line, plus a sentinel sequence of \"///\".\n   The XDR description,
    with the sentinel sequence, follows:\n    /// /*\n    ///  * This file was machine
    generated for [RFC7530].\n    ///  *\n    ///  * Last updated Tue Mar 10 11:51:21
    PDT 2015.\n    ///  */\n    ///\n    /// /*\n    ///  * Copyright (c) 2015 IETF
    Trust and the persons identified\n    ///  * as authors of the code.  All rights
    reserved.\n    ///  *\n    ///  * Redistribution and use in source and binary
    forms, with\n    ///  * or without modification, are permitted provided that the\n
    \   ///  * following conditions are met:\n    ///  *\n    ///  * - Redistributions
    of source code must retain the above\n    ///  *   copyright notice, this list
    of conditions and the\n    ///  *   following disclaimer.\n    ///  *\n    ///
    \ * - Redistributions in binary form must reproduce the above\n    ///  *   copyright
    notice, this list of conditions and the\n    ///  *   following disclaimer in
    the documentation and/or other\n    ///  *   materials provided with the distribution.\n
    \   ///  *\n    ///  * - Neither the name of Internet Society, IETF or IETF\n
    \   ///  *   Trust, nor the names of specific contributors, may be\n    ///  *
    \  used to endorse or promote products derived from this\n    ///  *   software
    without specific prior written permission.\n    ///  *\n    ///  *   THIS SOFTWARE
    IS PROVIDED BY THE COPYRIGHT HOLDERS\n    ///  *   AND CONTRIBUTORS \"AS IS\"
    AND ANY EXPRESS OR IMPLIED\n    ///  *   WARRANTIES, INCLUDING, BUT NOT LIMITED
    TO, THE\n    ///  *   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n    ///
    \ *   FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO\n    ///  *   EVENT SHALL
    THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n    ///  *   LIABLE FOR ANY DIRECT, INDIRECT,
    INCIDENTAL, SPECIAL,\n    ///  *   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
    BUT\n    ///  *   NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n    ///
    \ *   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n    ///  *   INTERRUPTION)
    HOWEVER CAUSED AND ON ANY THEORY OF\n    ///  *   LIABILITY, WHETHER IN CONTRACT,
    STRICT LIABILITY,\n    ///  *   OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\n
    \   ///  *   IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n    ///  *   ADVISED
    OF THE POSSIBILITY OF SUCH DAMAGE.\n    ///  */\n    ///\n    /// /*\n    ///
    \ * This code was derived from RFC 7531.\n    ///  */\n    ///\n    /// /*\n    ///
    \ *      nfs4_prot.x\n    ///  *\n    ///  */\n    ///\n    /// /*\n    ///  *
    Basic typedefs for RFC 1832 data type definitions\n    ///  */\n    /// /*\n    ///
    \ * typedef int          int32_t;\n    ///  * typedef unsigned int uint32_t;\n
    \   ///  * typedef hyper                int64_t;\n    ///  * typedef unsigned
    hyper       uint64_t;\n    ///  */\n    ///\n    /// /*\n    ///  * Sizes\n    ///
    \ */\n    /// const NFS4_FHSIZE               = 128;\n    /// const NFS4_VERIFIER_SIZE
    \       = 8;\n    /// const NFS4_OTHER_SIZE           = 12;\n    /// const NFS4_OPAQUE_LIMIT
    \        = 1024;\n    ///\n    /// const NFS4_INT64_MAX            = 0x7fffffffffffffff;\n
    \   /// const NFS4_UINT64_MAX           = 0xffffffffffffffff;\n    /// const NFS4_INT32_MAX
    \           = 0x7fffffff;\n    /// const NFS4_UINT32_MAX           = 0xffffffff;\n
    \   ///\n    ///\n    /// /*\n    ///  * File types\n    ///  */\n    /// enum
    nfs_ftype4 {\n    ///         NF4REG = 1,     /* Regular File */\n    ///         NF4DIR
    = 2,     /* Directory */\n    ///         NF4BLK = 3,     /* Special File - block
    device */\n    ///         NF4CHR = 4,     /* Special File - character device
    */\n    ///         NF4LNK = 5,     /* Symbolic Link */\n    ///         NF4SOCK
    = 6,    /* Special File - socket */\n    ///         NF4FIFO = 7,    /* Special
    File - fifo */\n    ///         NF4ATTRDIR\n    ///                 = 8,    /*
    Attribute Directory */\n    ///         NF4NAMEDATTR\n    ///                 =
    9     /* Named Attribute */\n    /// };\n    ///\n    /// /*\n    ///  * Error
    status\n    ///  */\n    /// enum nfsstat4 {\n    ///  NFS4_OK                =
    0,    /* everything is okay       */\n    ///  NFS4ERR_PERM           = 1,    /*
    caller not privileged    */\n    ///  NFS4ERR_NOENT          = 2,    /* no such
    file/directory   */\n    ///  NFS4ERR_IO             = 5,    /* hard I/O error
    \          */\n    ///  NFS4ERR_NXIO           = 6,    /* no such device           */\n
    \   ///  NFS4ERR_ACCESS         = 13,   /* access denied            */\n    ///
    \ NFS4ERR_EXIST          = 17,   /* file already exists      */\n    ///  NFS4ERR_XDEV
    \          = 18,   /* different file systems   */\n    ///  /* Unused/reserved
    \       19 */\n    ///  NFS4ERR_NOTDIR         = 20,   /* should be a directory
    \   */\n    ///  NFS4ERR_ISDIR          = 21,   /* should not be directory  */\n
    \   ///  NFS4ERR_INVAL          = 22,   /* invalid argument         */\n    ///
    \ NFS4ERR_FBIG           = 27,   /* file exceeds server max  */\n    ///  NFS4ERR_NOSPC
    \         = 28,   /* no space on file system  */\n    ///  NFS4ERR_ROFS           =
    30,   /* read-only file system    */\n    ///  NFS4ERR_MLINK          = 31,   /*
    too many hard links      */\n    ///  NFS4ERR_NAMETOOLONG    = 63,   /* name exceeds
    server max  */\n    ///  NFS4ERR_NOTEMPTY       = 66,   /* directory not empty
    \     */\n    ///  NFS4ERR_DQUOT          = 69,   /* hard quota limit reached
    */\n    ///  NFS4ERR_STALE          = 70,   /* file no longer exists    */\n    ///
    \ NFS4ERR_BADHANDLE      = 10001,/* Illegal filehandle       */\n    ///  NFS4ERR_BAD_COOKIE
    \    = 10003,/* READDIR cookie is stale  */\n    ///  NFS4ERR_NOTSUPP        =
    10004,/* operation not supported  */\n    ///  NFS4ERR_TOOSMALL       = 10005,/*
    response limit exceeded  */\n    ///  NFS4ERR_SERVERFAULT    = 10006,/* undefined
    server error   */\n    ///  NFS4ERR_BADTYPE        = 10007,/* type invalid for
    CREATE  */\n    ///  NFS4ERR_DELAY          = 10008,/* file \"busy\" - retry      */\n
    \   ///  NFS4ERR_SAME           = 10009,/* nverify says attrs same  */\n    ///
    \ NFS4ERR_DENIED         = 10010,/* lock unavailable         */\n    ///  NFS4ERR_EXPIRED
    \       = 10011,/* lock lease expired       */\n    ///  NFS4ERR_LOCKED         =
    10012,/* I/O failed due to lock   */\n    ///  NFS4ERR_GRACE          = 10013,/*
    in grace period          */\n    ///  NFS4ERR_FHEXPIRED      = 10014,/* filehandle
    expired       */\n    ///  NFS4ERR_SHARE_DENIED   = 10015,/* share reserve denied
    \    */\n    ///  NFS4ERR_WRONGSEC       = 10016,/* wrong security flavor    */\n
    \   ///  NFS4ERR_CLID_INUSE     = 10017,/* clientid in use          */\n    ///
    \ NFS4ERR_RESOURCE       = 10018,/* resource exhaustion      */\n    ///  NFS4ERR_MOVED
    \         = 10019,/* file system relocated    */\n    ///  NFS4ERR_NOFILEHANDLE
    \  = 10020,/* current FH is not set    */\n    ///  NFS4ERR_MINOR_VERS_MISMATCH
    = 10021,/* minor vers not supp */\n    ///  NFS4ERR_STALE_CLIENTID = 10022,/*
    server has rebooted      */\n    ///  NFS4ERR_STALE_STATEID  = 10023,/* server
    has rebooted      */\n    ///  NFS4ERR_OLD_STATEID    = 10024,/* state is out
    of sync     */\n    ///  NFS4ERR_BAD_STATEID    = 10025,/* incorrect stateid        */\n
    \   ///  NFS4ERR_BAD_SEQID      = 10026,/* request is out of seq.   */\n    ///
    \ NFS4ERR_NOT_SAME       = 10027,/* verify - attrs not same  */\n    ///  NFS4ERR_LOCK_RANGE
    \    = 10028,/* lock range not supported */\n    ///  NFS4ERR_SYMLINK        =
    10029,/* should be file/directory */\n    ///  NFS4ERR_RESTOREFH      = 10030,/*
    no saved filehandle      */\n    ///  NFS4ERR_LEASE_MOVED    = 10031,/* some file
    system moved   */\n    ///  NFS4ERR_ATTRNOTSUPP    = 10032,/* recommended attr
    not sup */\n    ///  NFS4ERR_NO_GRACE       = 10033,/* reclaim outside of grace
    */\n    ///  NFS4ERR_RECLAIM_BAD    = 10034,/* reclaim error at server  */\n    ///
    \ NFS4ERR_RECLAIM_CONFLICT = 10035,/* conflict on reclaim    */\n    ///  NFS4ERR_BADXDR
    \        = 10036,/* XDR decode failed        */\n    ///  NFS4ERR_LOCKS_HELD     =
    10037,/* file locks held at CLOSE */\n    ///  NFS4ERR_OPENMODE       = 10038,/*
    conflict in OPEN and I/O */\n    ///  NFS4ERR_BADOWNER       = 10039,/* owner
    translation bad    */\n    ///  NFS4ERR_BADCHAR        = 10040,/* UTF-8 char not
    supported */\n    ///  NFS4ERR_BADNAME        = 10041,/* name not supported       */\n
    \   ///  NFS4ERR_BAD_RANGE      = 10042,/* lock range not supported */\n    ///
    \ NFS4ERR_LOCK_NOTSUPP   = 10043,/* no atomic up/downgrade   */\n    ///  NFS4ERR_OP_ILLEGAL
    \    = 10044,/* undefined operation      */\n    ///  NFS4ERR_DEADLOCK       =
    10045,/* file locking deadlock    */\n    ///  NFS4ERR_FILE_OPEN      = 10046,/*
    open file blocks op.     */\n    ///  NFS4ERR_ADMIN_REVOKED  = 10047,/* lock-owner
    state revoked */\n    ///  NFS4ERR_CB_PATH_DOWN   = 10048 /* callback path down
    \      */\n    /// };\n    ///\n    /// /*\n    ///  * Basic data types\n    ///
    \ */\n    /// typedef opaque  attrlist4<>;\n    /// typedef uint32_t        bitmap4<>;\n
    \   /// typedef uint64_t        changeid4;\n    /// typedef uint64_t        clientid4;\n
    \   /// typedef uint32_t        count4;\n    /// typedef uint64_t        length4;\n
    \   /// typedef uint32_t        mode4;\n    /// typedef uint64_t        nfs_cookie4;\n
    \   /// typedef opaque  nfs_fh4<NFS4_FHSIZE>;\n    /// typedef uint32_t        nfs_lease4;\n
    \   /// typedef uint64_t        offset4;\n    /// typedef uint32_t        qop4;\n
    \   /// typedef opaque  sec_oid4<>;\n    /// typedef uint32_t        seqid4;\n
    \   /// typedef opaque  utf8string<>;\n    /// typedef utf8string      utf8str_cis;\n
    \   /// typedef utf8string      utf8str_cs;\n    /// typedef utf8string      utf8str_mixed;\n
    \   /// typedef utf8str_cs      component4;\n    /// typedef opaque  linktext4<>;\n
    \   /// typedef utf8string      ascii_REQUIRED4;\n    /// typedef component4      pathname4<>;\n
    \   /// typedef uint64_t        nfs_lockid4;\n    /// typedef opaque  verifier4[NFS4_VERIFIER_SIZE];\n
    \   ///\n    ///\n    /// /*\n    ///  * Timeval\n    ///  */\n    /// struct
    nfstime4 {\n    ///         int64_t         seconds;\n    ///         uint32_t
    \       nseconds;\n    /// };\n    ///\n    /// enum time_how4 {\n    ///         SET_TO_SERVER_TIME4
    = 0,\n    ///         SET_TO_CLIENT_TIME4 = 1\n    /// };\n    ///\n    /// union
    settime4 switch (time_how4 set_it) {\n    ///  case SET_TO_CLIENT_TIME4:\n    ///
    \         nfstime4       time;\n    ///  default:\n    ///          void;\n    ///
    };\n    ///\n    ///\n    /// /*\n    ///  * File attribute definitions\n    ///
    \ */\n    ///\n    /// /*\n    ///  * FSID structure for major/minor\n    ///
    \ */\n    /// struct fsid4 {\n    ///         uint64_t        major;\n    ///
    \        uint64_t        minor;\n    /// };\n    ///\n    ///\n    /// /*\n    ///
    \ * File system locations attribute for relocation/migration\n    ///  */\n    ///
    struct fs_location4 {\n    ///         utf8str_cis     server<>;\n    ///         pathname4
    \      rootpath;\n    /// };\n    ///\n    /// struct fs_locations4 {\n    ///
    \        pathname4       fs_root;\n    ///         fs_location4    locations<>;\n
    \   /// };\n    ///\n    ///\n    /// /*\n    ///  * Various Access Control Entry
    definitions\n    ///  */\n    ///\n    /// /*\n    ///  * Mask that indicates
    which Access Control Entries\n    ///  * are supported.  Values for the fattr4_aclsupport
    attribute.\n    ///  */\n    /// const ACL4_SUPPORT_ALLOW_ACL    = 0x00000001;\n
    \   /// const ACL4_SUPPORT_DENY_ACL     = 0x00000002;\n    /// const ACL4_SUPPORT_AUDIT_ACL
    \   = 0x00000004;\n    /// const ACL4_SUPPORT_ALARM_ACL    = 0x00000008;\n    ///\n
    \   ///\n    /// typedef uint32_t        acetype4;\n    ///\n    ///\n    ///
    /*\n    ///  * acetype4 values; others can be added as needed.\n    ///  */\n
    \   /// const ACE4_ACCESS_ALLOWED_ACE_TYPE      = 0x00000000;\n    /// const ACE4_ACCESS_DENIED_ACE_TYPE
    \      = 0x00000001;\n    /// const ACE4_SYSTEM_AUDIT_ACE_TYPE        = 0x00000002;\n
    \   /// const ACE4_SYSTEM_ALARM_ACE_TYPE        = 0x00000003;\n    ///\n    ///\n
    \   ///\n    /// /*\n    ///  * ACE flag\n    ///  */\n    /// typedef uint32_t
    \       aceflag4;\n    ///\n    ///\n    /// /*\n    ///  * ACE flag values\n
    \   ///  */\n    /// const ACE4_FILE_INHERIT_ACE             = 0x00000001;\n    ///
    const ACE4_DIRECTORY_INHERIT_ACE        = 0x00000002;\n    /// const ACE4_NO_PROPAGATE_INHERIT_ACE
    \    = 0x00000004;\n    /// const ACE4_INHERIT_ONLY_ACE             = 0x00000008;\n
    \   /// const ACE4_SUCCESSFUL_ACCESS_ACE_FLAG   = 0x00000010;\n    /// const ACE4_FAILED_ACCESS_ACE_FLAG
    \      = 0x00000020;\n    /// const ACE4_IDENTIFIER_GROUP             = 0x00000040;\n
    \   ///\n    ///\n    ///\n    /// /*\n    ///  * ACE mask\n    ///  */\n    ///
    typedef uint32_t        acemask4;\n    ///\n    ///\n    /// /*\n    ///  * ACE
    mask values\n    ///  */\n    /// const ACE4_READ_DATA            = 0x00000001;\n
    \   /// const ACE4_LIST_DIRECTORY       = 0x00000001;\n    /// const ACE4_WRITE_DATA
    \          = 0x00000002;\n    /// const ACE4_ADD_FILE             = 0x00000002;\n
    \   /// const ACE4_APPEND_DATA          = 0x00000004;\n    /// const ACE4_ADD_SUBDIRECTORY
    \    = 0x00000004;\n    /// const ACE4_READ_NAMED_ATTRS     = 0x00000008;\n    ///
    const ACE4_WRITE_NAMED_ATTRS    = 0x00000010;\n    /// const ACE4_EXECUTE              =
    0x00000020;\n    /// const ACE4_DELETE_CHILD         = 0x00000040;\n    /// const
    ACE4_READ_ATTRIBUTES      = 0x00000080;\n    /// const ACE4_WRITE_ATTRIBUTES     =
    0x00000100;\n    ///\n    /// const ACE4_DELETE               = 0x00010000;\n
    \   /// const ACE4_READ_ACL             = 0x00020000;\n    /// const ACE4_WRITE_ACL
    \           = 0x00040000;\n    /// const ACE4_WRITE_OWNER          = 0x00080000;\n
    \   /// const ACE4_SYNCHRONIZE          = 0x00100000;\n    ///\n    ///\n    ///
    /*\n    ///  * ACE4_GENERIC_READ - defined as a combination of\n    ///  *      ACE4_READ_ACL
    |\n    ///  *      ACE4_READ_DATA |\n    ///  *      ACE4_READ_ATTRIBUTES |\n
    \   ///  *      ACE4_SYNCHRONIZE\n    ///  */\n    ///\n    /// const ACE4_GENERIC_READ
    = 0x00120081;\n    ///\n    /// /*\n    ///  * ACE4_GENERIC_WRITE - defined as
    a combination of\n    ///  *      ACE4_READ_ACL |\n    ///  *      ACE4_WRITE_DATA
    |\n    ///  *      ACE4_WRITE_ATTRIBUTES |\n    ///  *      ACE4_WRITE_ACL |\n
    \   ///  *      ACE4_APPEND_DATA |\n    ///  *      ACE4_SYNCHRONIZE\n    ///
    \ */\n    /// const ACE4_GENERIC_WRITE = 0x00160106;\n    ///\n    ///\n    ///
    /*\n    ///  * ACE4_GENERIC_EXECUTE - defined as a combination of\n    ///  *
    \     ACE4_READ_ACL\n    ///  *      ACE4_READ_ATTRIBUTES\n    ///  *      ACE4_EXECUTE\n
    \   ///  *      ACE4_SYNCHRONIZE\n    ///  */\n    /// const ACE4_GENERIC_EXECUTE
    = 0x001200A0;\n    ///\n    ///\n    /// /*\n    ///  * Access Control Entry definition\n
    \   ///  */\n    /// struct nfsace4 {\n    ///         acetype4                type;\n
    \   ///         aceflag4                flag;\n    ///         acemask4                access_mask;\n
    \   ///         utf8str_mixed           who;\n    /// };\n    ///\n    ///\n    ///
    /*\n    ///  * Field definitions for the fattr4_mode attribute\n    ///  */\n
    \   /// const MODE4_SUID = 0x800;  /* set user id on execution */\n    /// const
    MODE4_SGID = 0x400;  /* set group id on execution */\n    /// const MODE4_SVTX
    = 0x200;  /* save text even after use */\n    /// const MODE4_RUSR = 0x100;  /*
    read permission: owner */\n    /// const MODE4_WUSR = 0x080;  /* write permission:
    owner */\n    /// const MODE4_XUSR = 0x040;  /* execute permission: owner */\n
    \   /// const MODE4_RGRP = 0x020;  /* read permission: group */\n    /// const
    MODE4_WGRP = 0x010;  /* write permission: group */\n    /// const MODE4_XGRP =
    0x008;  /* execute permission: group */\n    /// const MODE4_ROTH = 0x004;  /*
    read permission: other */\n    /// const MODE4_WOTH = 0x002;  /* write permission:
    other */\n    /// const MODE4_XOTH = 0x001;  /* execute permission: other */\n
    \   ///\n    ///\n    /// /*\n    ///  * Special data/attribute associated with\n
    \   ///  * file types NF4BLK and NF4CHR.\n    ///  */\n    /// struct specdata4
    {\n    ///  uint32_t specdata1; /* major device number */\n    ///  uint32_t specdata2;
    /* minor device number */\n    /// };\n    ///\n    ///\n    /// /*\n    ///  *
    Values for fattr4_fh_expire_type\n    ///  */\n    /// const FH4_PERSISTENT          =
    0x00000000;\n    /// const FH4_NOEXPIRE_WITH_OPEN  = 0x00000001;\n    /// const
    FH4_VOLATILE_ANY        = 0x00000002;\n    /// const FH4_VOL_MIGRATION       =
    0x00000004;\n    /// const FH4_VOL_RENAME          = 0x00000008;\n    ///\n    ///\n
    \   /// typedef bitmap4                 fattr4_supported_attrs;\n    /// typedef
    nfs_ftype4              fattr4_type;\n    /// typedef uint32_t                fattr4_fh_expire_type;\n
    \   /// typedef changeid4               fattr4_change;\n    /// typedef uint64_t
    \               fattr4_size;\n    /// typedef bool                    fattr4_link_support;\n
    \   /// typedef bool                    fattr4_symlink_support;\n    /// typedef
    bool                    fattr4_named_attr;\n    /// typedef fsid4                   fattr4_fsid;\n
    \   /// typedef bool                    fattr4_unique_handles;\n    /// typedef
    nfs_lease4              fattr4_lease_time;\n    /// typedef nfsstat4                fattr4_rdattr_error;\n
    \   ///\n    /// typedef nfsace4                 fattr4_acl<>;\n    /// typedef
    uint32_t                fattr4_aclsupport;\n    /// typedef bool                    fattr4_archive;\n
    \   /// typedef bool                    fattr4_cansettime;\n    /// typedef bool
    \                   fattr4_case_insensitive;\n    /// typedef bool                    fattr4_case_preserving;\n
    \   /// typedef bool                    fattr4_chown_restricted;\n    /// typedef
    uint64_t                fattr4_fileid;\n    /// typedef uint64_t                fattr4_files_avail;\n
    \   /// typedef nfs_fh4                 fattr4_filehandle;\n    /// typedef uint64_t
    \               fattr4_files_free;\n    /// typedef uint64_t                fattr4_files_total;\n
    \   /// typedef fs_locations4           fattr4_fs_locations;\n    /// typedef
    bool                    fattr4_hidden;\n    /// typedef bool                    fattr4_homogeneous;\n
    \   /// typedef uint64_t                fattr4_maxfilesize;\n    /// typedef uint32_t
    \               fattr4_maxlink;\n    /// typedef uint32_t                fattr4_maxname;\n
    \   /// typedef uint64_t                fattr4_maxread;\n    /// typedef uint64_t
    \               fattr4_maxwrite;\n    /// typedef ascii_REQUIRED4         fattr4_mimetype;\n
    \   /// typedef mode4                   fattr4_mode;\n    /// typedef uint64_t
    \               fattr4_mounted_on_fileid;\n    /// typedef bool                    fattr4_no_trunc;\n
    \   /// typedef uint32_t                fattr4_numlinks;\n    /// typedef utf8str_mixed
    \          fattr4_owner;\n    /// typedef utf8str_mixed           fattr4_owner_group;\n
    \   /// typedef uint64_t                fattr4_quota_avail_hard;\n    /// typedef
    uint64_t                fattr4_quota_avail_soft;\n    /// typedef uint64_t                fattr4_quota_used;\n
    \   /// typedef specdata4               fattr4_rawdev;\n    /// typedef uint64_t
    \               fattr4_space_avail;\n    /// typedef uint64_t                fattr4_space_free;\n
    \   /// typedef uint64_t                fattr4_space_total;\n    /// typedef uint64_t
    \               fattr4_space_used;\n    /// typedef bool                    fattr4_system;\n
    \   /// typedef nfstime4                fattr4_time_access;\n    /// typedef settime4
    \               fattr4_time_access_set;\n    /// typedef nfstime4                fattr4_time_backup;\n
    \   /// typedef nfstime4                fattr4_time_create;\n    /// typedef nfstime4
    \               fattr4_time_delta;\n    /// typedef nfstime4                fattr4_time_metadata;\n
    \   /// typedef nfstime4                fattr4_time_modify;\n    /// typedef settime4
    \               fattr4_time_modify_set;\n    ///\n    ///\n    /// /*\n    ///
    \ * Mandatory attributes\n    ///  */\n    /// const FATTR4_SUPPORTED_ATTRS    =
    0;\n    /// const FATTR4_TYPE               = 1;\n    /// const FATTR4_FH_EXPIRE_TYPE
    \    = 2;\n    /// const FATTR4_CHANGE             = 3;\n    /// const FATTR4_SIZE
    \              = 4;\n    /// const FATTR4_LINK_SUPPORT       = 5;\n    /// const
    FATTR4_SYMLINK_SUPPORT    = 6;\n    /// const FATTR4_NAMED_ATTR         = 7;\n
    \   /// const FATTR4_FSID               = 8;\n    /// const FATTR4_UNIQUE_HANDLES
    \    = 9;\n    /// const FATTR4_LEASE_TIME         = 10;\n    /// const FATTR4_RDATTR_ERROR
    \      = 11;\n    /// const FATTR4_FILEHANDLE         = 19;\n    ///\n    ///
    /*\n    ///  * Recommended attributes\n    ///  */\n    /// const FATTR4_ACL                =
    12;\n    /// const FATTR4_ACLSUPPORT         = 13;\n    /// const FATTR4_ARCHIVE
    \           = 14;\n    /// const FATTR4_CANSETTIME         = 15;\n    /// const
    FATTR4_CASE_INSENSITIVE   = 16;\n    /// const FATTR4_CASE_PRESERVING    = 17;\n
    \   /// const FATTR4_CHOWN_RESTRICTED   = 18;\n    /// const FATTR4_FILEID             =
    20;\n    /// const FATTR4_FILES_AVAIL        = 21;\n    /// const FATTR4_FILES_FREE
    \        = 22;\n    /// const FATTR4_FILES_TOTAL        = 23;\n    /// const FATTR4_FS_LOCATIONS
    \      = 24;\n    /// const FATTR4_HIDDEN             = 25;\n    /// const FATTR4_HOMOGENEOUS
    \       = 26;\n    /// const FATTR4_MAXFILESIZE        = 27;\n    /// const FATTR4_MAXLINK
    \           = 28;\n    /// const FATTR4_MAXNAME            = 29;\n    /// const
    FATTR4_MAXREAD            = 30;\n    /// const FATTR4_MAXWRITE           = 31;\n
    \   /// const FATTR4_MIMETYPE           = 32;\n    /// const FATTR4_MODE               =
    33;\n    /// const FATTR4_NO_TRUNC           = 34;\n    /// const FATTR4_NUMLINKS
    \          = 35;\n    /// const FATTR4_OWNER              = 36;\n    /// const
    FATTR4_OWNER_GROUP        = 37;\n    /// const FATTR4_QUOTA_AVAIL_HARD   = 38;\n
    \   /// const FATTR4_QUOTA_AVAIL_SOFT   = 39;\n    /// const FATTR4_QUOTA_USED
    \        = 40;\n    /// const FATTR4_RAWDEV             = 41;\n    /// const FATTR4_SPACE_AVAIL
    \       = 42;\n    /// const FATTR4_SPACE_FREE         = 43;\n    /// const FATTR4_SPACE_TOTAL
    \       = 44;\n    /// const FATTR4_SPACE_USED         = 45;\n    /// const FATTR4_SYSTEM
    \            = 46;\n    /// const FATTR4_TIME_ACCESS        = 47;\n    /// const
    FATTR4_TIME_ACCESS_SET    = 48;\n    /// const FATTR4_TIME_BACKUP        = 49;\n
    \   /// const FATTR4_TIME_CREATE        = 50;\n    /// const FATTR4_TIME_DELTA
    \        = 51;\n    /// const FATTR4_TIME_METADATA      = 52;\n    /// const FATTR4_TIME_MODIFY
    \       = 53;\n    /// const FATTR4_TIME_MODIFY_SET    = 54;\n    /// const FATTR4_MOUNTED_ON_FILEID
    \ = 55;\n    ///\n    /// /*\n    ///  * File attribute container\n    ///  */\n
    \   /// struct fattr4 {\n    ///         bitmap4         attrmask;\n    ///         attrlist4
    \      attr_vals;\n    /// };\n    ///\n    ///\n    /// /*\n    ///  * Change
    info for the client\n    ///  */\n    /// struct change_info4 {\n    ///         bool
    \           atomic;\n    ///         changeid4       before;\n    ///         changeid4
    \      after;\n    /// };\n    ///\n    ///\n    /// struct clientaddr4 {\n    ///
    \        /* see struct rpcb in RFC 1833 */\n    ///         string r_netid<>;
    \      /* network id */\n    ///         string r_addr<>;        /* universal
    address */\n    /// };\n    ///\n    ///\n    /// /*\n    ///  * Callback program
    info as provided by the client\n    ///  */\n    /// struct cb_client4 {\n    ///
    \        unsigned int    cb_program;\n    ///         clientaddr4     cb_location;\n
    \   /// };\n    ///\n    ///\n    /// /*\n    ///  * Stateid\n    ///  */\n    ///
    struct stateid4 {\n    ///         uint32_t        seqid;\n    ///         opaque
    \         other[NFS4_OTHER_SIZE];\n    /// };\n    ///\n    /// /*\n    ///  *
    Client ID\n    ///  */\n    /// struct nfs_client_id4 {\n    ///         verifier4
    \      verifier;\n    ///         opaque          id<NFS4_OPAQUE_LIMIT>;\n    ///
    };\n    ///\n    ///\n    /// struct open_owner4 {\n    ///         clientid4
    \      clientid;\n    ///         opaque          owner<NFS4_OPAQUE_LIMIT>;\n
    \   /// };\n    ///\n    ///\n    /// struct lock_owner4 {\n    ///         clientid4
    \      clientid;\n    ///         opaque          owner<NFS4_OPAQUE_LIMIT>;\n
    \   /// };\n    ///\n    ///\n    /// enum nfs_lock_type4 {\n    ///         READ_LT
    \        = 1,\n    ///         WRITE_LT        = 2,\n    ///         READW_LT
    \       = 3,    /* blocking read */\n    ///         WRITEW_LT       = 4     /*
    blocking write */\n    /// };\n    ///\n    ///\n    /// const ACCESS4_READ      =
    0x00000001;\n    /// const ACCESS4_LOOKUP    = 0x00000002;\n    /// const ACCESS4_MODIFY
    \   = 0x00000004;\n    /// const ACCESS4_EXTEND    = 0x00000008;\n    /// const
    ACCESS4_DELETE    = 0x00000010;\n    /// const ACCESS4_EXECUTE   = 0x00000020;\n
    \   ///\n    /// struct ACCESS4args {\n    ///         /* CURRENT_FH: object */\n
    \   ///         uint32_t        access;\n    /// };\n    ///\n    /// struct ACCESS4resok
    {\n    ///         uint32_t        supported;\n    ///         uint32_t        access;\n
    \   /// };\n    ///\n    /// union ACCESS4res switch (nfsstat4 status) {\n    ///
    \ case NFS4_OK:\n    ///          ACCESS4resok   resok4;\n    ///  default:\n
    \   ///          void;\n    /// };\n    ///\n    /// struct CLOSE4args {\n    ///
    \        /* CURRENT_FH: object */\n    ///         seqid4          seqid;\n    ///
    \        stateid4        open_stateid;\n    /// };\n    ///\n    /// union CLOSE4res
    switch (nfsstat4 status) {\n    ///  case NFS4_OK:\n    ///          stateid4
    \      open_stateid;\n    ///  default:\n    ///          void;\n    /// };\n
    \   ///\n    /// struct COMMIT4args {\n    ///         /* CURRENT_FH: file */\n
    \   ///         offset4         offset;\n    ///         count4          count;\n
    \   /// };\n    ///\n    /// struct COMMIT4resok {\n    ///         verifier4
    \      writeverf;\n    /// };\n    ///\n    /// union COMMIT4res switch (nfsstat4
    status) {\n    ///  case NFS4_OK:\n    ///          COMMIT4resok   resok4;\n    ///
    \ default:\n    ///          void;\n    /// };\n    ///\n    /// union createtype4
    switch (nfs_ftype4 type) {\n    ///  case NF4LNK:\n    ///          linktext4
    linkdata;\n    ///  case NF4BLK:\n    ///  case NF4CHR:\n    ///          specdata4
    devdata;\n    ///  case NF4SOCK:\n    ///  case NF4FIFO:\n    ///  case NF4DIR:\n
    \   ///          void;\n    ///  default:\n    ///          void;  /* server should
    return NFS4ERR_BADTYPE */\n    /// };\n    ///\n    /// struct CREATE4args {\n
    \   ///         /* CURRENT_FH: directory for creation */\n    ///         createtype4
    \    objtype;\n    ///         component4      objname;\n    ///         fattr4
    \         createattrs;\n    /// };\n    ///\n    /// struct CREATE4resok {\n    ///
    \        change_info4    cinfo;\n    ///         bitmap4         attrset;        /*
    attributes set */\n    /// };\n    ///\n    /// union CREATE4res switch (nfsstat4
    status) {\n    ///  case NFS4_OK:\n    ///          CREATE4resok resok4;\n    ///
    \ default:\n    ///          void;\n    /// };\n    ///\n    /// struct DELEGPURGE4args
    {\n    ///         clientid4       clientid;\n    /// };\n    ///\n    /// struct
    DELEGPURGE4res {\n    ///         nfsstat4        status;\n    /// };\n    ///\n
    \   /// struct DELEGRETURN4args {\n    ///         /* CURRENT_FH: delegated file
    */\n    ///         stateid4        deleg_stateid;\n    /// };\n    ///\n    ///
    struct DELEGRETURN4res {\n    ///         nfsstat4        status;\n    /// };\n
    \   ///\n    /// struct GETATTR4args {\n    ///         /* CURRENT_FH: directory
    or file */\n    ///         bitmap4         attr_request;\n    /// };\n    ///\n
    \   /// struct GETATTR4resok {\n    ///         fattr4          obj_attributes;\n
    \   /// };\n    ///\n    /// union GETATTR4res switch (nfsstat4 status) {\n    ///
    \ case NFS4_OK:\n    ///          GETATTR4resok  resok4;\n    ///  default:\n
    \   ///          void;\n    /// };\n    ///\n    /// struct GETFH4resok {\n    ///
    \        nfs_fh4         object;\n    /// };\n    ///\n    /// union GETFH4res
    switch (nfsstat4 status) {\n    ///  case NFS4_OK:\n    ///          GETFH4resok
    \    resok4;\n    ///  default:\n    ///          void;\n    /// };\n    ///\n
    \   /// struct LINK4args {\n    ///         /* SAVED_FH: source object */\n    ///
    \        /* CURRENT_FH: target directory */\n    ///         component4      newname;\n
    \   /// };\n    ///\n    /// struct LINK4resok {\n    ///         change_info4
    \   cinfo;\n    /// };\n    ///\n    /// union LINK4res switch (nfsstat4 status)
    {\n    ///  case NFS4_OK:\n    ///          LINK4resok resok4;\n    ///  default:\n
    \   ///          void;\n    /// };\n    ///\n    /// /*\n    ///  * For LOCK,
    transition from open_owner to new lock_owner\n    ///  */\n    /// struct open_to_lock_owner4
    {\n    ///         seqid4          open_seqid;\n    ///         stateid4        open_stateid;\n
    \   ///         seqid4          lock_seqid;\n    ///         lock_owner4     lock_owner;\n
    \   /// };\n    ///\n    /// /*\n    ///  * For LOCK, existing lock_owner continues
    to request file locks\n    ///  */\n    /// struct exist_lock_owner4 {\n    ///
    \        stateid4        lock_stateid;\n    ///         seqid4          lock_seqid;\n
    \   /// };\n    ///\n    /// union locker4 switch (bool new_lock_owner) {\n    ///
    \ case TRUE:\n    ///         open_to_lock_owner4     open_owner;\n    ///  case
    FALSE:\n    ///         exist_lock_owner4       lock_owner;\n    /// };\n    ///\n
    \   /// /*\n    ///  * LOCK/LOCKT/LOCKU: Record lock management\n    ///  */\n
    \   /// struct LOCK4args {\n    ///         /* CURRENT_FH: file */\n    ///         nfs_lock_type4
    \ locktype;\n    ///         bool            reclaim;\n    ///         offset4
    \        offset;\n    ///         length4         length;\n    ///         locker4
    \        locker;\n    /// };\n    ///\n    /// struct LOCK4denied {\n    ///         offset4
    \        offset;\n    ///         length4         length;\n    ///         nfs_lock_type4
    \ locktype;\n    ///         lock_owner4     owner;\n    /// };\n    ///\n    ///
    struct LOCK4resok {\n    ///         stateid4        lock_stateid;\n    /// };\n
    \   ///\n    /// union LOCK4res switch (nfsstat4 status) {\n    ///  case NFS4_OK:\n
    \   ///          LOCK4resok     resok4;\n    ///  case NFS4ERR_DENIED:\n    ///
    \         LOCK4denied    denied;\n    ///  default:\n    ///          void;\n
    \   /// };\n    ///\n    /// struct LOCKT4args {\n    ///         /* CURRENT_FH:
    file */\n    ///         nfs_lock_type4  locktype;\n    ///         offset4         offset;\n
    \   ///         length4         length;\n    ///         lock_owner4     owner;\n
    \   /// };\n    ///\n    /// union LOCKT4res switch (nfsstat4 status) {\n    ///
    \ case NFS4ERR_DENIED:\n    ///          LOCK4denied    denied;\n    ///  case
    NFS4_OK:\n    ///          void;\n    ///  default:\n    ///          void;\n
    \   /// };\n    ///\n    /// struct LOCKU4args {\n    ///         /* CURRENT_FH:
    file */\n    ///         nfs_lock_type4  locktype;\n    ///         seqid4          seqid;\n
    \   ///         stateid4        lock_stateid;\n    ///         offset4         offset;\n
    \   ///         length4         length;\n    /// };\n    ///\n    /// union LOCKU4res
    switch (nfsstat4 status) {\n    ///  case NFS4_OK:\n    ///          stateid4
    \      lock_stateid;\n    ///  default:\n    ///          void;\n    /// };\n
    \   ///\n    /// struct LOOKUP4args {\n    ///         /* CURRENT_FH: directory
    */\n    ///         component4      objname;\n    /// };\n    ///\n    /// struct
    LOOKUP4res {\n    ///         /* CURRENT_FH: object */\n    ///         nfsstat4
    \       status;\n    /// };\n    ///\n    /// struct LOOKUPP4res {\n    ///         /*
    CURRENT_FH: directory */\n    ///         nfsstat4        status;\n    /// };\n
    \   ///\n    /// struct NVERIFY4args {\n    ///         /* CURRENT_FH: object
    */\n    ///         fattr4          obj_attributes;\n    /// };\n    ///\n    ///
    struct NVERIFY4res {\n    ///         nfsstat4        status;\n    /// };\n    ///\n
    \   /// const OPEN4_SHARE_ACCESS_READ   = 0x00000001;\n    /// const OPEN4_SHARE_ACCESS_WRITE
    \ = 0x00000002;\n    /// const OPEN4_SHARE_ACCESS_BOTH   = 0x00000003;\n    ///\n
    \   /// const OPEN4_SHARE_DENY_NONE     = 0x00000000;\n    /// const OPEN4_SHARE_DENY_READ
    \    = 0x00000001;\n    /// const OPEN4_SHARE_DENY_WRITE    = 0x00000002;\n    ///
    const OPEN4_SHARE_DENY_BOTH     = 0x00000003;\n    /// /*\n    ///  * Various
    definitions for OPEN\n    ///  */\n    /// enum createmode4 {\n    ///         UNCHECKED4
    \     = 0,\n    ///         GUARDED4        = 1,\n    ///         EXCLUSIVE4      =
    2\n    /// };\n    ///\n    /// union createhow4 switch (createmode4 mode) {\n
    \   ///  case UNCHECKED4:\n    ///  case GUARDED4:\n    ///          fattr4         createattrs;\n
    \   ///  case EXCLUSIVE4:\n    ///          verifier4      createverf;\n    ///
    };\n    ///\n    /// enum opentype4 {\n    ///         OPEN4_NOCREATE  = 0,\n
    \   ///         OPEN4_CREATE    = 1\n    /// };\n    ///\n    /// union openflag4
    switch (opentype4 opentype) {\n    ///  case OPEN4_CREATE:\n    ///          createhow4
    \    how;\n    ///  default:\n    ///          void;\n    /// };\n    ///\n    ///
    /* Next definitions used for OPEN delegation */\n    /// enum limit_by4 {\n    ///
    \        NFS_LIMIT_SIZE          = 1,\n    ///         NFS_LIMIT_BLOCKS        =
    2\n    ///         /* others as needed */\n    /// };\n    ///\n    /// struct
    nfs_modified_limit4 {\n    ///         uint32_t        num_blocks;\n    ///         uint32_t
    \       bytes_per_block;\n    /// };\n    ///\n    /// union nfs_space_limit4
    switch (limit_by4 limitby) {\n    ///  /* limit specified as file size */\n    ///
    \ case NFS_LIMIT_SIZE:\n    ///          uint64_t               filesize;\n    ///
    \ /* limit specified by number of blocks */\n    ///  case NFS_LIMIT_BLOCKS:\n
    \   ///          nfs_modified_limit4    mod_blocks;\n    /// } ;\n    ///\n    ///
    enum open_delegation_type4 {\n    ///         OPEN_DELEGATE_NONE      = 0,\n    ///
    \        OPEN_DELEGATE_READ      = 1,\n    ///         OPEN_DELEGATE_WRITE     =
    2\n    /// };\n    ///\n    /// enum open_claim_type4 {\n    ///         CLAIM_NULL
    \             = 0,\n    ///         CLAIM_PREVIOUS          = 1,\n    ///         CLAIM_DELEGATE_CUR
    \     = 2,\n    ///         CLAIM_DELEGATE_PREV     = 3\n    /// };\n    ///\n
    \   /// struct open_claim_delegate_cur4 {\n    ///         stateid4        delegate_stateid;\n
    \   ///         component4      file;\n    /// };\n    ///\n    /// union open_claim4
    switch (open_claim_type4 claim) {\n    ///  /*\n    ///   * No special rights
    to file.\n    ///   * Ordinary OPEN of the specified file.\n    ///   */\n    ///
    \ case CLAIM_NULL:\n    ///         /* CURRENT_FH: directory */\n    ///         component4
    \     file;\n    ///  /*\n    ///   * Right to the file established by an\n    ///
    \  * open previous to server reboot.  File\n    ///   * identified by filehandle
    obtained at\n    ///   * that time rather than by name.\n    ///   */\n    ///
    \ case CLAIM_PREVIOUS:\n    ///         /* CURRENT_FH: file being reclaimed */\n
    \   ///         open_delegation_type4   delegate_type;\n    ///\n    ///  /*\n
    \   ///   * Right to file based on a delegation\n    ///   * granted by the server.
    \ File is\n    ///   * specified by name.\n    ///   */\n    ///  case CLAIM_DELEGATE_CUR:\n
    \   ///         /* CURRENT_FH: directory */\n    ///         open_claim_delegate_cur4
    \       delegate_cur_info;\n    ///\n    ///  /*\n    ///   * Right to file based
    on a delegation\n    ///   * granted to a previous boot instance\n    ///   *
    of the client.  File is specified by name.\n    ///   */\n    ///  case CLAIM_DELEGATE_PREV:\n
    \   ///         /* CURRENT_FH: directory */\n    ///         component4      file_delegate_prev;\n
    \   /// };\n    ///\n    /// /*\n    ///  * OPEN: Open a file, potentially receiving
    an open delegation\n    ///  */\n    /// struct OPEN4args {\n    ///         seqid4
    \         seqid;\n    ///         uint32_t        share_access;\n    ///         uint32_t
    \       share_deny;\n    ///         open_owner4     owner;\n    ///         openflag4
    \      openhow;\n    ///         open_claim4     claim;\n    /// };\n    ///\n
    \   /// struct open_read_delegation4 {\n    ///  stateid4 stateid;    /* Stateid
    for delegation */\n    ///  bool     recall;     /* Pre-recalled flag for\n    ///
    \                         delegations obtained\n    ///                          by
    reclaim (CLAIM_PREVIOUS). */\n    ///\n    ///  nfsace4 permissions; /* Defines
    users who don't\n    ///                          need an ACCESS call to\n    ///
    \                         open for read. */\n    /// };\n    ///\n    /// struct
    open_write_delegation4 {\n    ///  stateid4 stateid;      /* Stateid for delegation
    */\n    ///  bool     recall;       /* Pre-recalled flag for\n    ///                            delegations
    obtained\n    ///                            by reclaim\n    ///                            (CLAIM_PREVIOUS).
    */\n    ///\n    ///  nfs_space_limit4\n    ///            space_limit; /* Defines
    condition that\n    ///                            the client must check to\n
    \   ///                            determine whether the\n    ///                            file
    needs to be flushed\n    ///                            to the server on close.
    */\n    ///\n    ///  nfsace4   permissions; /* Defines users who don't\n    ///
    \                           need an ACCESS call as\n    ///                            part
    of a delegated\n    ///                            open. */\n    /// };\n    ///\n
    \   /// union open_delegation4\n    /// switch (open_delegation_type4 delegation_type)
    {\n    ///         case OPEN_DELEGATE_NONE:\n    ///                 void;\n    ///
    \        case OPEN_DELEGATE_READ:\n    ///                 open_read_delegation4
    read;\n    ///         case OPEN_DELEGATE_WRITE:\n    ///                 open_write_delegation4
    write;\n    /// };\n    ///\n    /// /*\n    ///  * Result flags\n    ///  */\n
    \   ///\n    /// /* Client must confirm open */\n    /// const OPEN4_RESULT_CONFIRM
    \     = 0x00000002;\n    /// /* Type of file locking behavior at the server */\n
    \   /// const OPEN4_RESULT_LOCKTYPE_POSIX = 0x00000004;\n    ///\n    /// struct
    OPEN4resok {\n    ///  stateid4          stateid;     /* Stateid for open */\n
    \   ///  change_info4      cinfo;       /* Directory change info */\n    ///  uint32_t
    \         rflags;      /* Result flags */\n    ///  bitmap4           attrset;
    \    /* attribute set for create */\n    ///  open_delegation4  delegation;  /*
    Info on any open\n    ///                                    delegation */\n    ///
    };\n    ///\n    /// union OPEN4res switch (nfsstat4 status) {\n    ///  case
    NFS4_OK:\n    ///          /* CURRENT_FH: opened file */\n    ///          OPEN4resok
    \     resok4;\n    ///  default:\n    ///          void;\n    /// };\n    ///\n
    \   /// struct OPENATTR4args {\n    ///         /* CURRENT_FH: object */\n    ///
    \        bool    createdir;\n    /// };\n    ///\n    /// struct OPENATTR4res
    {\n    ///         /* CURRENT_FH: named attr directory */\n    ///         nfsstat4
    \       status;\n    /// };\n    ///\n    /// struct OPEN_CONFIRM4args {\n    ///
    \        /* CURRENT_FH: opened file */\n    ///         stateid4        open_stateid;\n
    \   ///         seqid4          seqid;\n    /// };\n    ///\n    /// struct OPEN_CONFIRM4resok
    {\n    ///         stateid4        open_stateid;\n    /// };\n    ///\n    ///
    union OPEN_CONFIRM4res switch (nfsstat4 status) {\n    ///  case NFS4_OK:\n    ///
    \         OPEN_CONFIRM4resok     resok4;\n    ///  default:\n    ///          void;\n
    \   /// };\n    ///\n    /// struct OPEN_DOWNGRADE4args {\n    ///         /*
    CURRENT_FH: opened file */\n    ///         stateid4        open_stateid;\n    ///
    \        seqid4          seqid;\n    ///         uint32_t        share_access;\n
    \   ///         uint32_t        share_deny;\n    /// };\n    ///\n    /// struct
    OPEN_DOWNGRADE4resok {\n    ///         stateid4        open_stateid;\n    ///
    };\n    ///\n    /// union OPEN_DOWNGRADE4res switch (nfsstat4 status) {\n    ///
    \ case NFS4_OK:\n    ///          OPEN_DOWNGRADE4resok    resok4;\n    ///  default:\n
    \   ///          void;\n    /// };\n    ///\n    /// struct PUTFH4args {\n    ///
    \        nfs_fh4         object;\n    /// };\n    ///\n    /// struct PUTFH4res
    {\n    ///         /* CURRENT_FH: */\n    ///         nfsstat4        status;\n
    \   /// };\n    ///\n    /// struct PUTPUBFH4res {\n    ///         /* CURRENT_FH:
    public fh */\n    ///         nfsstat4        status;\n    /// };\n    ///\n    ///
    struct PUTROOTFH4res {\n    ///         /* CURRENT_FH: root fh */\n    ///         nfsstat4
    \       status;\n    /// };\n    ///\n    /// struct READ4args {\n    ///         /*
    CURRENT_FH: file */\n    ///         stateid4        stateid;\n    ///         offset4
    \        offset;\n    ///         count4          count;\n    /// };\n    ///\n
    \   /// struct READ4resok {\n    ///         bool            eof;\n    ///         opaque
    \         data<>;\n    /// };\n    ///\n    /// union READ4res switch (nfsstat4
    status) {\n    ///  case NFS4_OK:\n    ///          READ4resok     resok4;\n    ///
    \ default:\n    ///          void;\n    /// };\n    ///\n    /// struct READDIR4args
    {\n    ///         /* CURRENT_FH: directory */\n    ///         nfs_cookie4     cookie;\n
    \   ///         verifier4       cookieverf;\n    ///         count4          dircount;\n
    \   ///         count4          maxcount;\n    ///         bitmap4         attr_request;\n
    \   /// };\n    ///\n    /// struct entry4 {\n    ///         nfs_cookie4     cookie;\n
    \   ///         component4      name;\n    ///         fattr4          attrs;\n
    \   ///         entry4          *nextentry;\n    /// };\n    ///\n    /// struct
    dirlist4 {\n    ///         entry4          *entries;\n    ///         bool            eof;\n
    \   /// };\n    ///\n    /// struct READDIR4resok {\n    ///         verifier4
    \      cookieverf;\n    ///         dirlist4        reply;\n    /// };\n    ///\n
    \   ///\n    /// union READDIR4res switch (nfsstat4 status) {\n    ///  case NFS4_OK:\n
    \   ///          READDIR4resok  resok4;\n    ///  default:\n    ///          void;\n
    \   /// };\n    ///\n    ///\n    /// struct READLINK4resok {\n    ///         linktext4
    \      link;\n    /// };\n    ///\n    /// union READLINK4res switch (nfsstat4
    status) {\n    ///  case NFS4_OK:\n    ///          READLINK4resok resok4;\n    ///
    \ default:\n    ///          void;\n    /// };\n    ///\n    /// struct REMOVE4args
    {\n    ///         /* CURRENT_FH: directory */\n    ///         component4      target;\n
    \   /// };\n    ///\n    /// struct REMOVE4resok {\n    ///         change_info4
    \   cinfo;\n    /// };\n    ///\n    /// union REMOVE4res switch (nfsstat4 status)
    {\n    ///  case NFS4_OK:\n    ///          REMOVE4resok   resok4;\n    ///  default:\n
    \   ///          void;\n    /// };\n    ///\n    /// struct RENAME4args {\n    ///
    \        /* SAVED_FH: source directory */\n    ///         component4      oldname;\n
    \   ///         /* CURRENT_FH: target directory */\n    ///         component4
    \     newname;\n    /// };\n    ///\n    /// struct RENAME4resok {\n    ///         change_info4
    \   source_cinfo;\n    ///         change_info4    target_cinfo;\n    /// };\n
    \   ///\n    /// union RENAME4res switch (nfsstat4 status) {\n    ///  case NFS4_OK:\n
    \   ///          RENAME4resok    resok4;\n    ///  default:\n    ///          void;\n
    \   /// };\n    ///\n    /// struct RENEW4args {\n    ///         clientid4       clientid;\n
    \   /// };\n    ///\n    /// struct RENEW4res {\n    ///         nfsstat4        status;\n
    \   /// };\n    ///\n    /// struct RESTOREFH4res {\n    ///         /* CURRENT_FH:
    value of saved fh */\n    ///         nfsstat4        status;\n    /// };\n    ///\n
    \   /// struct SAVEFH4res {\n    ///         /* SAVED_FH: value of current fh
    */\n    ///         nfsstat4        status;\n    /// };\n    ///\n    /// struct
    SECINFO4args {\n    ///         /* CURRENT_FH: directory */\n    ///         component4
    \     name;\n    /// };\n    ///\n    /// /*\n    ///  * From RFC 2203\n    ///
    \ */\n    /// enum rpc_gss_svc_t {\n    ///         RPC_GSS_SVC_NONE        =
    1,\n    ///         RPC_GSS_SVC_INTEGRITY   = 2,\n    ///         RPC_GSS_SVC_PRIVACY
    \    = 3\n    /// };\n    ///\n    /// struct rpcsec_gss_info {\n    ///         sec_oid4
    \       oid;\n    ///         qop4            qop;\n    ///         rpc_gss_svc_t
    \  service;\n    /// };\n    ///\n    /// /* RPCSEC_GSS has a value of '6'.  See
    RFC 2203 */\n    /// union secinfo4 switch (uint32_t flavor) {\n    ///  case
    RPCSEC_GSS:\n    ///          rpcsec_gss_info        flavor_info;\n    ///  default:\n
    \   ///          void;\n    /// };\n    ///\n    /// typedef secinfo4 SECINFO4resok<>;\n
    \   ///\n    /// union SECINFO4res switch (nfsstat4 status) {\n    ///  case NFS4_OK:\n
    \   ///          SECINFO4resok resok4;\n    ///  default:\n    ///          void;\n
    \   /// };\n    ///\n    /// struct SETATTR4args {\n    ///         /* CURRENT_FH:
    target object */\n    ///         stateid4        stateid;\n    ///         fattr4
    \         obj_attributes;\n    /// };\n    ///\n    /// struct SETATTR4res {\n
    \   ///         nfsstat4        status;\n    ///         bitmap4         attrsset;\n
    \   /// };\n    ///\n    /// struct SETCLIENTID4args {\n    ///         nfs_client_id4
    \ client;\n    ///         cb_client4      callback;\n    ///         uint32_t
    \       callback_ident;\n    /// };\n    ///\n    /// struct SETCLIENTID4resok
    {\n    ///         clientid4       clientid;\n    ///         verifier4       setclientid_confirm;\n
    \   /// };\n    ///\n    /// union SETCLIENTID4res switch (nfsstat4 status) {\n
    \   ///  case NFS4_OK:\n    ///          SETCLIENTID4resok      resok4;\n    ///
    \ case NFS4ERR_CLID_INUSE:\n    ///          clientaddr4    client_using;\n    ///
    \ default:\n    ///          void;\n    /// };\n    ///\n    /// struct SETCLIENTID_CONFIRM4args
    {\n    ///         clientid4       clientid;\n    ///         verifier4       setclientid_confirm;\n
    \   /// };\n    ///\n    /// struct SETCLIENTID_CONFIRM4res {\n    ///         nfsstat4
    \       status;\n    /// };\n    ///\n    /// struct VERIFY4args {\n    ///         /*
    CURRENT_FH: object */\n    ///         fattr4          obj_attributes;\n    ///
    };\n    ///\n    /// struct VERIFY4res {\n    ///         nfsstat4        status;\n
    \   /// };\n    ///\n    /// enum stable_how4 {\n    ///         UNSTABLE4       =
    0,\n    ///         DATA_SYNC4      = 1,\n    ///         FILE_SYNC4      = 2\n
    \   /// };\n    ///\n    /// struct WRITE4args {\n    ///         /* CURRENT_FH:
    file */\n    ///         stateid4        stateid;\n    ///         offset4         offset;\n
    \   ///         stable_how4     stable;\n    ///         opaque          data<>;\n
    \   /// };\n    ///\n    /// struct WRITE4resok {\n    ///         count4          count;\n
    \   ///         stable_how4     committed;\n    ///         verifier4       writeverf;\n
    \   /// };\n    ///\n    /// union WRITE4res switch (nfsstat4 status) {\n    ///
    \ case NFS4_OK:\n    ///          WRITE4resok    resok4;\n    ///  default:\n
    \   ///          void;\n    /// };\n    ///\n    /// struct RELEASE_LOCKOWNER4args
    {\n    ///         lock_owner4     lock_owner;\n    /// };\n    ///\n    /// struct
    RELEASE_LOCKOWNER4res {\n    ///         nfsstat4        status;\n    /// };\n
    \   ///\n    /// struct ILLEGAL4res {\n    ///         nfsstat4        status;\n
    \   /// };\n    ///\n    /// /*\n    ///  * Operation arrays\n    ///  */\n    ///\n
    \   /// enum nfs_opnum4 {\n    ///  OP_ACCESS              = 3,\n    ///  OP_CLOSE
    \              = 4,\n    ///  OP_COMMIT              = 5,\n    ///  OP_CREATE
    \             = 6,\n    ///  OP_DELEGPURGE          = 7,\n    ///  OP_DELEGRETURN
    \        = 8,\n    ///  OP_GETATTR             = 9,\n    ///  OP_GETFH               =
    10,\n    ///  OP_LINK                = 11,\n    ///  OP_LOCK                =
    12,\n    ///  OP_LOCKT               = 13,\n    ///  OP_LOCKU               =
    14,\n    ///  OP_LOOKUP              = 15,\n    ///  OP_LOOKUPP             =
    16,\n    ///  OP_NVERIFY             = 17,\n    ///  OP_OPEN                =
    18,\n    ///  OP_OPENATTR            = 19,\n    ///  OP_OPEN_CONFIRM        =
    20,\n    ///  OP_OPEN_DOWNGRADE      = 21,\n    ///  OP_PUTFH               =
    22,\n    ///  OP_PUTPUBFH            = 23,\n    ///  OP_PUTROOTFH           =
    24,\n    ///  OP_READ                = 25,\n    ///  OP_READDIR             =
    26,\n    ///  OP_READLINK            = 27,\n    ///  OP_REMOVE              =
    28,\n    ///  OP_RENAME              = 29,\n    ///  OP_RENEW               =
    30,\n    ///  OP_RESTOREFH           = 31,\n    ///  OP_SAVEFH              =
    32,\n    ///  OP_SECINFO             = 33,\n    ///  OP_SETATTR             =
    34,\n    ///  OP_SETCLIENTID         = 35,\n    ///  OP_SETCLIENTID_CONFIRM =
    36,\n    ///  OP_VERIFY              = 37,\n    ///  OP_WRITE               =
    38,\n    ///  OP_RELEASE_LOCKOWNER   = 39,\n    ///  OP_ILLEGAL             =
    10044\n    /// };\n    ///\n    /// union nfs_argop4 switch (nfs_opnum4 argop)
    {\n    ///  case OP_ACCESS:        ACCESS4args opaccess;\n    ///  case OP_CLOSE:
    \        CLOSE4args opclose;\n    ///  case OP_COMMIT:        COMMIT4args opcommit;\n
    \   ///  case OP_CREATE:        CREATE4args opcreate;\n    ///  case OP_DELEGPURGE:
    \   DELEGPURGE4args opdelegpurge;\n    ///  case OP_DELEGRETURN:   DELEGRETURN4args
    opdelegreturn;\n    ///  case OP_GETATTR:       GETATTR4args opgetattr;\n    ///
    \ case OP_GETFH:         void;\n    ///  case OP_LINK:          LINK4args oplink;\n
    \   ///  case OP_LOCK:          LOCK4args oplock;\n    ///  case OP_LOCKT:         LOCKT4args
    oplockt;\n    ///  case OP_LOCKU:         LOCKU4args oplocku;\n    ///  case OP_LOOKUP:
    \       LOOKUP4args oplookup;\n    ///  case OP_LOOKUPP:       void;\n    ///
    \ case OP_NVERIFY:       NVERIFY4args opnverify;\n    ///  case OP_OPEN:          OPEN4args
    opopen;\n    ///  case OP_OPENATTR:      OPENATTR4args opopenattr;\n    ///  case
    OP_OPEN_CONFIRM:  OPEN_CONFIRM4args opopen_confirm;\n    ///  case OP_OPEN_DOWNGRADE:\n
    \   ///                         OPEN_DOWNGRADE4args opopen_downgrade;\n    ///
    \ case OP_PUTFH:         PUTFH4args opputfh;\n    ///  case OP_PUTPUBFH:      void;\n
    \   ///  case OP_PUTROOTFH:     void;\n    ///  case OP_READ:          READ4args
    opread;\n    ///  case OP_READDIR:       READDIR4args opreaddir;\n    ///  case
    OP_READLINK:      void;\n    ///  case OP_REMOVE:        REMOVE4args opremove;\n
    \   ///  case OP_RENAME:        RENAME4args oprename;\n    ///  case OP_RENEW:
    \        RENEW4args oprenew;\n    ///  case OP_RESTOREFH:     void;\n    ///  case
    OP_SAVEFH:        void;\n    ///  case OP_SECINFO:       SECINFO4args opsecinfo;\n
    \   ///  case OP_SETATTR:       SETATTR4args opsetattr;\n    ///  case OP_SETCLIENTID:
    \  SETCLIENTID4args opsetclientid;\n    ///  case OP_SETCLIENTID_CONFIRM: SETCLIENTID_CONFIRM4args\n
    \   ///                                 opsetclientid_confirm;\n    ///  case
    OP_VERIFY:        VERIFY4args opverify;\n    ///  case OP_WRITE:         WRITE4args
    opwrite;\n    ///  case OP_RELEASE_LOCKOWNER:\n    ///                         RELEASE_LOCKOWNER4args\n
    \   ///                         oprelease_lockowner;\n    ///  case OP_ILLEGAL:
    \      void;\n    /// };\n    ///\n    /// union nfs_resop4 switch (nfs_opnum4
    resop) {\n    ///  case OP_ACCESS:        ACCESS4res opaccess;\n    ///  case
    OP_CLOSE:         CLOSE4res opclose;\n    ///  case OP_COMMIT:        COMMIT4res
    opcommit;\n    ///  case OP_CREATE:        CREATE4res opcreate;\n    ///  case
    OP_DELEGPURGE:    DELEGPURGE4res opdelegpurge;\n    ///  case OP_DELEGRETURN:
    \  DELEGRETURN4res opdelegreturn;\n    ///  case OP_GETATTR:       GETATTR4res
    opgetattr;\n    ///  case OP_GETFH:         GETFH4res opgetfh;\n    ///  case
    OP_LINK:          LINK4res oplink;\n    ///  case OP_LOCK:          LOCK4res oplock;\n
    \   ///  case OP_LOCKT:         LOCKT4res oplockt;\n    ///  case OP_LOCKU:         LOCKU4res
    oplocku;\n    ///  case OP_LOOKUP:        LOOKUP4res oplookup;\n    ///  case
    OP_LOOKUPP:       LOOKUPP4res oplookupp;\n    ///  case OP_NVERIFY:       NVERIFY4res
    opnverify;\n    ///  case OP_OPEN:          OPEN4res opopen;\n    ///  case OP_OPENATTR:
    \     OPENATTR4res opopenattr;\n    ///  case OP_OPEN_CONFIRM:  OPEN_CONFIRM4res
    opopen_confirm;\n    ///  case OP_OPEN_DOWNGRADE:\n    ///                         OPEN_DOWNGRADE4res\n
    \   ///                                 opopen_downgrade;\n    ///  case OP_PUTFH:
    \        PUTFH4res opputfh;\n    ///  case OP_PUTPUBFH:      PUTPUBFH4res opputpubfh;\n
    \   ///  case OP_PUTROOTFH:     PUTROOTFH4res opputrootfh;\n    ///  case OP_READ:
    \         READ4res opread;\n    ///  case OP_READDIR:       READDIR4res opreaddir;\n
    \   ///  case OP_READLINK:      READLINK4res opreadlink;\n    ///  case OP_REMOVE:
    \       REMOVE4res opremove;\n    ///  case OP_RENAME:        RENAME4res oprename;\n
    \   ///  case OP_RENEW:         RENEW4res oprenew;\n    ///  case OP_RESTOREFH:
    \    RESTOREFH4res oprestorefh;\n    ///  case OP_SAVEFH:        SAVEFH4res opsavefh;\n
    \   ///  case OP_SECINFO:       SECINFO4res opsecinfo;\n    ///  case OP_SETATTR:
    \      SETATTR4res opsetattr;\n    ///  case OP_SETCLIENTID:   SETCLIENTID4res
    opsetclientid;\n    ///  case OP_SETCLIENTID_CONFIRM:\n    ///                         SETCLIENTID_CONFIRM4res\n
    \   ///                                 opsetclientid_confirm;\n    ///  case
    OP_VERIFY:        VERIFY4res opverify;\n    ///  case OP_WRITE:         WRITE4res
    opwrite;\n    ///  case OP_RELEASE_LOCKOWNER:\n    ///                         RELEASE_LOCKOWNER4res\n
    \   ///                                 oprelease_lockowner;\n    ///  case OP_ILLEGAL:
    \      ILLEGAL4res opillegal;\n    /// };\n    ///\n    /// struct COMPOUND4args
    {\n    ///         utf8str_cs      tag;\n    ///         uint32_t        minorversion;\n
    \   ///         nfs_argop4      argarray<>;\n    /// };\n    ///\n    /// struct
    COMPOUND4res {\n    ///         nfsstat4        status;\n    ///         utf8str_cs
    \     tag;\n    ///         nfs_resop4      resarray<>;\n    /// };\n    ///\n
    \   ///\n    /// /*\n    ///  * Remote file service routines\n    ///  */\n    ///
    program NFS4_PROGRAM {\n    ///         version NFS_V4 {\n    ///                 void\n
    \   ///                         NFSPROC4_NULL(void) = 0;\n    ///\n    ///                 COMPOUND4res\n
    \   ///                         NFSPROC4_COMPOUND(COMPOUND4args) = 1;\n    ///\n
    \   ///         } = 4;\n    /// } = 100003;\n    ///\n    /// /*\n    ///  * NFS4
    callback procedure definitions and program\n    ///  */\n    /// struct CB_GETATTR4args
    {\n    ///         nfs_fh4 fh;\n    ///         bitmap4 attr_request;\n    ///
    };\n    ///\n    /// struct CB_GETATTR4resok {\n    ///         fattr4  obj_attributes;\n
    \   /// };\n    ///\n    /// union CB_GETATTR4res switch (nfsstat4 status) {\n
    \   ///  case NFS4_OK:\n    ///          CB_GETATTR4resok       resok4;\n    ///
    \ default:\n    ///          void;\n    /// };\n    ///\n    /// struct CB_RECALL4args
    {\n    ///         stateid4        stateid;\n    ///         bool            truncate;\n
    \   ///         nfs_fh4         fh;\n    /// };\n    ///\n    /// struct CB_RECALL4res
    {\n    ///         nfsstat4        status;\n    /// };\n    ///\n    /// /*\n
    \   ///  * CB_ILLEGAL: Response for illegal operation numbers\n    ///  */\n    ///
    struct CB_ILLEGAL4res {\n    ///         nfsstat4        status;\n    /// };\n
    \   ///\n    /// /*\n    ///  * Various definitions for CB_COMPOUND\n    ///  */\n
    \   /// enum nfs_cb_opnum4 {\n    ///         OP_CB_GETATTR           = 3,\n    ///
    \        OP_CB_RECALL            = 4,\n    ///         OP_CB_ILLEGAL           =
    10044\n    /// };\n    ///\n    /// union nfs_cb_argop4 switch (unsigned argop)
    {\n    ///  case OP_CB_GETATTR:    CB_GETATTR4args opcbgetattr;\n    ///  case
    OP_CB_RECALL:     CB_RECALL4args opcbrecall;\n    ///  case OP_CB_ILLEGAL:    void;\n
    \   /// };\n    ///\n    /// union nfs_cb_resop4 switch (unsigned resop) {\n    ///
    \ case OP_CB_GETATTR:    CB_GETATTR4res opcbgetattr;\n    ///  case OP_CB_RECALL:
    \    CB_RECALL4res opcbrecall;\n    ///  case OP_CB_ILLEGAL:    CB_ILLEGAL4res
    opcbillegal;\n    /// };\n    ///\n    ///\n    /// struct CB_COMPOUND4args {\n
    \   ///         utf8str_cs      tag;\n    ///         uint32_t        minorversion;\n
    \   ///         uint32_t        callback_ident;\n    ///         nfs_cb_argop4
    \  argarray<>;\n    /// };\n    ///\n    /// struct CB_COMPOUND4res {\n    ///
    \        nfsstat4        status;\n    ///         utf8str_cs      tag;\n    ///
    \        nfs_cb_resop4   resarray<>;\n    /// };\n    ///\n    ///\n    ///\n
    \   /// /*\n    ///  * Program number is in the transient range, since the client\n
    \   ///  * will assign the exact transient program number and provide\n    ///
    \ * that to the server via the SETCLIENTID operation.\n    ///  */\n    /// program
    NFS4_CALLBACK {\n    ///         version NFS_CB {\n    ///                 void\n
    \   ///                         CB_NULL(void) = 0;\n    ///                 CB_COMPOUND4res\n
    \   ///                         CB_COMPOUND(CB_COMPOUND4args) = 1;\n    ///         }
    = 1;\n    /// } = 0x40000000;\n"
  title: 2.  XDR Description of NFSv4.0
- contents:
  - "3.  Security Considerations\n   See the Security Considerations section of [RFC7530].\n"
  title: 3.  Security Considerations
- contents:
  - "4.  Normative References\n   [RFC4506]  Eisler, M., Ed., \"XDR: External Data
    Representation\n              Standard\", STD 67, RFC 4506, May 2006,\n              <http://www.rfc-editor.org/info/rfc4506>.\n
    \  [RFC7530]  Haynes, T., Ed., and D. Noveck, Ed., \"Network File System\n              (NFS)
    Version 4 Protocol\", RFC 7530, March 2015,\n              <http://www.rfc-editor.org/info/rfc7530>.\n"
  title: 4.  Normative References
- contents:
  - "Acknowledgments\n   Tom Haynes would like to thank NetApp, Inc. for its funding
    of his\n   time on this project.\n   David Quigley tested the extraction of the
    .x file from this document\n   and corrected the two resulting errors.\n"
  title: Acknowledgments
- contents:
  - "Authors' Addresses\n   Thomas Haynes (editor)\n   Primary Data, Inc.\n   4300
    El Camino Real Ste 100\n   Los Altos, CA  94022\n   United States\n   Phone: +1
    408 215 1519\n   EMail: thomas.haynes@primarydata.com\n   David Noveck (editor)\n
    \  Dell\n   300 Innovative Way\n   Nashua, NH  03062\n   United States\n   Phone:
    +1 781 572 8038\n   EMail: dave_noveck@dell.com\n"
  title: Authors' Addresses
