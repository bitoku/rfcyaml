- title: __initial_text__
  contents:
  - '                     MIME Object Security Services

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines MIME Object Security Services (MOSS), a\n\
    \   protocol that uses the multipart/signed and multipart/encrypted\n   framework\
    \ [7] to apply digital signature and encryption services to\n   MIME objects.\
    \  The services are offered through the use of end-to-end\n   cryptography between\
    \ an originator and a recipient at the application\n   layer.  Asymmetric (public\
    \ key) cryptography is used in support of\n   the digital signature service and\
    \ encryption key management.\n   Symmetric (secret key) cryptography is used in\
    \ support of the\n   encryption service.  The procedures are intended to be compatible\n\
    \   with a wide range of public key management approaches, including both\n  \
    \ ad hoc and certificate-based schemes.  Mechanisms are provided to\n   support\
    \ many public key management approaches.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction .............................................\
    \    3\n   2.  Applying MIME Object Security Services ...................    4\n\
    \   2.1  Digital Signature Service ...............................    4\n   2.1.1\
    \  Canonicalization ......................................    5\n   2.1.2  Digital\
    \ Signature Control Information .................    7\n   2.1.2.1  Version: ............................................\
    \    8\n   2.1.2.2  Originator-ID: ......................................    8\n\
    \   2.1.2.3  MIC-Info: ...........................................    8\n   2.1.3\
    \  application/moss-signature Content Type Definition ....    9\n   2.1.4  Use\
    \ of multipart/signed Content Type ..................   10\n   2.2  Encryption\
    \ Service ......................................   11\n   2.2.1  Encryption Control\
    \ Information ........................   12\n   2.2.1.1  DEK-Info: ...........................................\
    \   13\n   2.2.1.2  Recipient-ID: .......................................   14\n\
    \   2.2.1.3  Key-Info: ...........................................   14\n   2.2.2\
    \  application/moss-keys Content Type Definition .........   15\n   2.2.3  Use\
    \ of multipart/encrypted Content Type ...............   16\n   3.  Removing MIME\
    \ Object Security Services ...................   17\n   3.1  Digital Signature\
    \ Service ...............................   18\n   3.1.1  Preparation ...........................................\
    \   18\n   3.1.2  Verification ..........................................   19\n\
    \   3.1.3  Results ...............................................   19\n   3.2\
    \  Encryption Service ......................................   20\n   3.2.1  Preparation\
    \ ...........................................   20\n   3.2.2  Decryption ............................................\
    \   20\n   3.2.3  Results ...............................................   21\n\
    \   4.  Identifying Originators, Recipients, and Their Keys ......   21\n   4.1\
    \  Name Forms ..............................................   23\n   4.1.1  Email\
    \ Addresses .......................................   23\n   4.1.2  Arbitrary\
    \ Strings .....................................   23\n   4.1.3  Distinguished\
    \ Names ...................................   23\n   4.2  Identifiers .............................................\
    \   24\n   4.2.1  Email Address .........................................   25\n\
    \   4.2.2  Arbitrary String ......................................   25\n   4.2.3\
    \  Distinguished Name ....................................   26\n   4.2.4  Public\
    \ Key ............................................   26\n   4.2.5  Issuer Name\
    \ and Serial Number .........................   27\n   5.  Key Management Content\
    \ Types .............................   27\n   5.1  application/mosskey-request\
    \ Content Type Definition .....   28\n   5.2  application/mosskey-data Content\
    \ Type Definition ........   29\n   6.  Examples .................................................\
    \   31\n   6.1  Original Message Prepared for Protection ................   31\n\
    \   6.2  Sign Text of Original Message ...........................   32\n   6.3\
    \  Sign Headers and Text of Original Message ...............   32\n   6.4  Encrypt\
    \ Text of a Message ...............................   33\n   6.5  Encrypt the\
    \ Signed Text of a Message ....................   35\n   6.6  Protecting Audio\
    \ Content ................................   37\n   6.6.1  Sign Audio Content\
    \ ....................................   37\n   6.6.2  Encrypt Audio Content .................................\
    \   37\n   7.  Observations .............................................   38\n\
    \   8.  Comparison of MOSS and PEM Protocols .....................   39\n   9.\
    \  Security Considerations ..................................   41\n   10.  Acknowledgements\
    \ ........................................   41\n   11.  References ..............................................\
    \   41\n   12.  Authors' Addresses ......................................   43\n\
    \     Appendix A: Collected Grammar ..............................   44\n    \
    \ Appendix B: Imported Grammar ...............................   47\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   MIME [2], an acronym for \"Multipurpose Internet Mail Extensions\"\
    ,\n   defines the format of the contents of Internet mail messages and\n   provides\
    \ for multi-part textual and non-textual message bodies.  An\n   Internet electronic\
    \ mail message consists of two parts: the headers\n   and the body.  The headers\
    \ form a collection of field/value pairs\n   structured according to STD 11, RFC\
    \ 822 [1], whilst the body, if\n   structured, is defined according to MIME. \
    \ MIME does not provide for\n   the application of security services.\n   PEM\
    \ [3-6], an acronym for \"Privacy Enhanced Mail\", defines message\n   encryption\
    \ and message authentication procedures for text-based\n   electronic mail messages\
    \ using a certificate-based key management\n   mechanism.  The specifications\
    \ include several features that are\n   easily and more naturally supported by\
    \ MIME, for example, the\n   transfer encoding operation, the Content-Domain header,\
    \ and the\n   support services specified by its Part IV [6].  The specification\
    \ is\n   limited by specifying the application of security services to text\n\
    \   messages only.\n   MOSS is based in large part on the PEM protocol as defined\
    \ by RFC\n   1421.  Many of PEMs features and most of its protocol specification\n\
    \   are included here.  A comparison of MOSS and PEM may be found in\n   Section\
    \ 8.\n   In order to make use of the MOSS services, a user (where user is not\n\
    \   limited to being a human, e.g., it could be a process or a role) is\n   required\
    \ to have at least one public/private key pair.  The public\n   key must be made\
    \ available to other users with whom secure\n   communication is desired.  The\
    \ private key must not be disclosed to\n   any other user.\n   An originator's\
    \ private key is used to digitally sign MIME objects; a\n   recipient would use\
    \ the originator's public key to verify the digital\n   signature.  A recipient's\
    \ public key is used to encrypt the data\n   encrypting key that is used to encrypt\
    \ the MIME object; a recipient\n   would use the corresponding private key to\
    \ decrypt the data\n   encrypting key so that the MIME object can be decrypted.\n\
    \   As long as the private keys are protected from disclosure, i.e., the\n   private\
    \ keys are accessible only to the user to whom they have been\n   assigned, the\
    \ recipient of a digitally signed message will know from\n   whom the message\
    \ was sent and the originator of an encrypted message\n   will know that only\
    \ the intended recipient is able to read it.  For\n   assurance, the ownership\
    \ of the public keys used in verifying digital\n   signatures and encrypting messages\
    \ should be verified.  A stored\n   public key should be protected from modification.\n\
    \   The framework defined in [7] provides an embodiment of a MIME object\n   and\
    \ its digital signature or encryption keys.  When used by MOSS the\n   framework\
    \ provides digital signature and encryption services to\n   single and multi-part\
    \ textual and non-textual MIME objects.\n"
- title: 2.  Applying MIME Object Security Services
  contents:
  - "2.  Applying MIME Object Security Services\n   The application of the MOSS digital\
    \ signature service requires the\n   following components.\n   (1)  The data to\
    \ be signed.\n   (2)  The private key of the originator.\n   The data to be signed\
    \ is prepared according to the description below.\n   The digital signature is\
    \ created by generating a hash of the data and\n   encrypting the hash value with\
    \ the private key of the originator.\n   The digital signature, some additional\
    \ ancillary information\n   described below, and the data are then embodied in\
    \ a multipart/signed\n   body part.  Finally, the multipart/signed body part may\
    \ be\n   transferred to a recipient or processed further, for example, it may\n\
    \   be encrypted.\n   The application of the MOSS encryption service requires\
    \ the following\n   components.\n   (1)  The data to be encrypted.\n   (2)  A\
    \ data encrypting key to encrypt the data.\n   (3)  The public key of the recipient.\n\
    \   The data to be encrypted is prepared according to the description\n   below.\
    \  The originator creates a data encrypting key and encrypts the\n   data.  The\
    \ recipient's public key is used to encrypt the data\n   encrypting key.  The\
    \ encrypted data, the encrypted data encrypting\n   key, and some additional ancillary\
    \ information described below are\n   then embodied in a multipart/encrypted body\
    \ part, ready to be\n   transferred to a recipient or processed further, for example,\
    \ it may\n   be signed.\n   The next two sections describe the digital signature\
    \ and encryption\n   services, respectively, in detail.\n"
- title: 2.1.  Digital Signature Service
  contents:
  - "2.1.  Digital Signature Service\n   The MOSS digital signature service is applied\
    \ to MIME objects,\n   specifically a MIME body part.  The MIME body part is created\n\
    \   according to a local convention and then made available to the\n   digital\
    \ signature service.\n   The following sequence of steps comprises the application\
    \ of the\n   digital signature service.\n   (1)  The body part to be signed must\
    \ be canonicalized.\n   (2)  The digital signature and other control information\
    \ must be gen-\n        erated.\n   (3)  The control information must be embodied\
    \ in an appropriate MIME\n        content type.\n   (4)  The control information\
    \ body part and the data body part must be\n        embodied in a multipart/signed\
    \ content type.\n   Each of these steps is described below.\n"
- title: 2.1.1.  Canonicalization
  contents:
  - "2.1.1.  Canonicalization\n   The body part must be converted to a canonical form\
    \ that is uniquely\n   and unambiguously representable in at least the environment\
    \ where the\n   digital signature is created and the environment where the digital\n\
    \   signature will be verified, i.e., the originator and recipient's\n   environment,\
    \ respectively.  This is required in order to ensure that\n   both the originator\
    \ and recipient have the same data with which to\n   calculate the digital signature;\
    \ the originator needs to be able to\n   create the digital signature value while\
    \ the recipient needs to be\n   able to compare a re-computed value with the received\
    \ value.  If the\n   canonical form is representable on many different host computers,\
    \ the\n   signed data may be forwarded by recipients to additional recipients,\n\
    \   who will also be able to verify the original signature.  This service\n  \
    \ is called forwardable authentication.\n   The canonicalization transformation\
    \ is a two step process.  First,\n   the body part must be converted to a form\
    \ that is unambiguously\n   representable on as many different host computers\
    \ as possible.\n   Second, the body part must have its line delimiters converted\
    \ to a\n   unique and unambiguous representation.\n   The representation chosen\
    \ to satisfy the first step is 7bit, as\n   defined by MIME; the high order bit\
    \ of each octet of the data to be\n   signed must be zero.  A MIME body part is\
    \ comprised of two parts:\n   headers and content.  Since the headers of body\
    \ parts are already\n   required to be represented in 7bit, this step does not\
    \ require\n   changes to the headers.  This step requires that if the content\
    \ is\n   not already 7bit then it must be encoded with an appropriate MIME\n \
    \  content transfer encoding and a Content-Transfer-Encoding: header\n   must\
    \ be added to the headers.  For example, if the content to be\n   signed contains\
    \ 8bit or binary data, the content must be encoded with\n   either the quoted-printable\
    \ or base64 encoding as defined by MIME.\n      IMPLEMENTORS NOTE: Since the MIME\
    \ standard explicitly disallows\n      nested content transfer encodings, i.e.,\
    \ the content types\n      multipart and message may not themselves be encoded,\
    \ the 7bit\n      transformation requires each nested body part to be individually\n\
    \      encoded in a 7bit representation.  Any valid MIME encoding, e.g.,\n   \
    \   quoted-printable or base64, may be used and, in fact, a different\n      encoding\
    \ may be used on each of the non-7bit body parts.\n   Representing all content\
    \ types in a 7bit format transforms them into\n   text-based content types.  However,\
    \ text-based content types present\n   a unique problem.  In particular, the line\
    \ delimiter used for a\n   text-based content type is specific to a local environment;\
    \ different\n   environments use the single character carriage-return (<CR>),\
    \ the\n   single character line-feed (<LF>), or the two character sequence\n \
    \  \"carriage-return line-feed (<CR><LF>)\".\n   The application of the digital\
    \ signature service requires that the\n   same line delimiter be used by both\
    \ the originator and the recipient.\n   This document specifies that the two character\
    \ sequence \"<CR><LF>\"\n   must be used as the line delimiter.  Thus, the second\
    \ step of the\n   canonicalization transformation includes the conversion of the\
    \ local\n   line delimiter to the two character sequence \"<CR><LF>\".\n   The\
    \ conversion to the canonical line delimiter is only required for\n   the purposes\
    \ of computing the digital signature.  Thus, originators\n   must apply the line\
    \ delimiter conversion before computing the digital\n   signature but must transfer\
    \ the data without the line delimiter\n   conversion.  Similarly, recipients must\
    \ apply the line delimiter\n   conversion before computing the digital signature.\n\
    \      NOTE: An originator can not transfer the content with the line\n      delimiter\
    \ conversion intact because the conversion process is not\n      idempotent. \
    \ In particular, SMTP servers may themselves convert\n      the line delimiter\
    \ to a local line delimiter, prior to the message\n      being delivered to the\
    \ recipient.  Thus, a recipient has no way of\n      knowing if the conversion\
    \ is present or not.  If the recipient\n      applies the conversion to a content\
    \ in which it is already\n      present, the resulting content may have two line\
    \ delimiters\n      present, which would cause the verification of the signature\
    \ to\n      fail.\n      IMPLEMENTORS NOTE: Implementors should be aware that\
    \ the\n      conversion to a 7bit representation is a function that is required\n\
    \      in a minimally compliant MIME user agent.  Further, the line\n      delimiter\
    \ conversion required here is distinct from the same\n      conversion included\
    \ in that function.  Specifically, the line\n      delimiter conversion applied\
    \ when a body part is converted to a\n      7bit representation (transfer encoded)\
    \ is performed prior to the\n      application of the transfer encoding.  The\
    \ line delimiter\n      conversion applied when a body part is signed is performed\
    \ after\n      the body part is converted to 7bit (transfer encoded).  Both line\n\
    \      delimiter conversions are required.\n"
- title: 2.1.2.  Digital Signature Control Information
  contents:
  - "2.1.2.  Digital Signature Control Information\n   The application of the digital\
    \ signature service generates control\n   information which includes the digital\
    \ signature itself.  The syntax\n   of the control information is that of a set\
    \ of RFC 822 headers,\n   except that the folding of header values onto continuation\
    \ lines is\n   explicitly forbidden.  Each header and value pair generated by\
    \ the\n   digital signature service must be output on exactly one line.\n   The\
    \ complete set of headers generated by the digital signature\n   service is as\
    \ follows.\n   Version:\n      indicates which version of the MOSS protocol the\
    \ remaining headers\n      represent.\n   Originator-ID:\n      indicates the\
    \ private key used to create the digital signature and\n      the corresponding\
    \ public key to be used to verify it.\n   MIC-Info:\n      contains the digital\
    \ signature value.\n   Each invocation of the digital signature service must emit\
    \ exactly\n   one Version: header and at least one pair of Originator-ID: and\
    \ MIC-\n   Info: headers.  The Version: header must always be emitted first.\n\
    \   The Originator-ID: and MIC-Info: headers are always emitted in pairs\n   in\
    \ the order indicated.  This specification allows an originator to\n   generate\
    \ multiple signatures of the data, presumably with different\n   signature algorithms,\
    \ and to include them all in the control\n   information.  The interpretation\
    \ of the presence of multiple\n   signatures is outside the scope of this specification\
    \ except that a\n   MIC-Info: header is always interpreted in the context of the\n\
    \   immediately preceding Originator-ID: header.\n"
- title: '2.1.2.1.  Version:'
  contents:
  - "2.1.2.1.  Version:\n   The version header is defined by the grammar token <version>\
    \ as\n   follows.\n      <version>  ::= \"Version:\" \"5\" CRLF\n   Its value\
    \ is constant and MOSS implementations compliant with this\n   specification must\
    \ recognize only this value and generate an error if\n   any other value is found.\n"
- title: '2.1.2.2.  Originator-ID:'
  contents:
  - "2.1.2.2.  Originator-ID:\n   The purpose of the originator header is two-fold:\
    \ to directly\n   identify the public key to be used to verify the digital signature\n\
    \   and to indirectly identify the user who owns both it and its\n   corresponding\
    \ private key.  Typically, a recipient is less interested\n   in the actual public\
    \ key value, although obviously the recipient\n   needs the value to verify the\
    \ signature, and more interested in\n   identifying its owner.  Thus, the originator\
    \ header may convey either\n   or both pieces of information:\n      the public\
    \ key to be used to verify the signature\n      the name of the owner and which\
    \ of the owner's public keys to use\n      to verify the signature\n   The decision\
    \ as to what information to place in the value rests\n   entirely with the originator.\
    \  The suggested value is to include\n   both.  Recipients with whom the originator\
    \ has previously\n   communicated will have to verify that the information presented\
    \ is\n   consistent with what is already known.  New recipients will want all\n\
    \   of the information, which they will need to verify prior to storing\n   in\
    \ their local database.\n   The originator header is defined by the grammar token\
    \ <origid> as\n   follows.\n      <origid>  ::= \"Originator-ID:\" <id> CRLF\n\
    \   The grammar token <id> is defined in Section 4.\n"
- title: '2.1.2.3.  MIC-Info:'
  contents:
  - "2.1.2.3.  MIC-Info:\n   The purpose of the Message Integrity Check (MIC) header\
    \ is to convey\n   the digital signature value.  Its value is a comma separated\
    \ list of\n   three arguments: the hash (or MIC) algorithm identifier, the\n \
    \  signature algorithm identifier, and the digital signature.\n   The MIC header\
    \ is defined by the grammar token <micinfo> as follows.\n      <micinfo>  ::=\
    \ \"MIC-Info:\" <micalgid> \",\" <ikalgid> \",\"\n                     <asymsignmic>\
    \ CRLF\n   The grammar tokens for the MIC algorithms and identifiers\n   (<micalgid>),\
    \ signature algorithms and identifiers (<ikalgid>), and\n   signed MIC formats\
    \ (<asymsignmic>) are defined by RFC 1423.  They are\n   also reprinted in Appendix\
    \ B.\n      IMPLEMENTORS NOTE: RFC 1423 is referenced by the PEM protocol,\n \
    \     which includes support for symmetric signatures and key\n      management.\
    \  As a result, some of the grammar tokens defined\n      there, for example,\
    \ <ikalgid>, will include options that are not\n      legal for this protocol.\
    \  These options must be ignored and have\n      not been included in the appendix.\n"
- title: 2.1.3.  application/moss-signature Content Type Definition
  contents:
  - "2.1.3.  application/moss-signature Content Type Definition\n   (1)  MIME type\
    \ name: application\n   (2)  MIME subtype name: moss-signature\n   (3)  Required\
    \ parameters: none\n   (4)  Optional parameters: none\n   (5)  Encoding considerations:\
    \ quoted-printable is always sufficient\n   (6)  Security considerations: none\n\
    \   The \"application/moss-signature\" content type is used on the second\n  \
    \ body part of an enclosing multipart/signed.  Its content is comprised\n   of\
    \ the digital signature of the data in the first body part of the\n   enclosing\
    \ multipart/signed and other control information required to\n   verify that signature,\
    \ as defined by Section 2.1.2.  The label\n   \"application/moss-signature\" must\
    \ be used as the value of the\n   protocol parameter of the enclosing multipart/signed;\
    \ the protocol\n   parameter must be present.\n   Part of the signature verification\
    \ information will be the Message\n   Integrity Check (MIC) algorithm(s) used\
    \ during the signature creation\n   process.  The MIC algorithm(s) identified\
    \ in this body part must\n   match the MIC algorithm(s) identified in the micalg\
    \ parameter of the\n   enclosing multipart/signed.  If it does (they do) not,\
    \ a user agent\n   should identify the discrepancy to a user and it may choose\
    \ to either\n   halt or continue processing, giving precedence to the algorithm(s)\n\
    \   identified in this body part.\n   An application/moss-signature body part\
    \ is constructed as follows:\n      Content-Type: application/moss-signature\n\
    \      <mosssig>\n   where the grammar token <mosssig> is defined as follows.\n\
    \      <mosssig>       ::= <version> ( 1*<origasymflds> )\n      <version>   \
    \    ::= \"Version:\" \"5\" CRLF\n      <origasymflds>  ::= <origid> <micinfo>\n\
    \      <origid>        ::= \"Originator-ID:\" <id> CRLF\n      <micinfo>     \
    \  ::= \"MIC-Info:\" <micalgid> \",\" <ikalgid> \",\"\n                      \
    \    <asymsignmic> CRLF\n   The token <id> is defined in Section 4.  All other\
    \ tokens are defined\n   in Section 2.1.2.3.\n"
- title: 2.1.4.  Use of multipart/signed Content Type
  contents:
  - "2.1.4.  Use of multipart/signed Content Type\n   The definition of the multipart/signed\
    \ content type in [7] specifies\n   three steps for creating the body part.\n\
    \   (1)  The body part to be digitally signed is created according to a\n    \
    \    local convention, for example, with a text editor or a mail user\n      \
    \  agent.\n   (2)  The body part is prepared for the digital signature service\n\
    \        according to the protocol parameter, in this case according to\n    \
    \    Section 2.1.1.\n   (3)  The prepared body part is digitally signed according\
    \ to the\n        protocol parameter, in this case according to Section 2.1.2.\n\
    \   The multipart/signed content type is constructed as follows.\n   (1)  The\
    \ value of its required parameter \"protocol\" is set to\n        \"application/moss-signature\"\
    .\n   (2)  The signed body part becomes its first body part.\n   (3)  Its second\
    \ body part is labeled \"application/moss-signature\" and\n        is filled with\
    \ the control information generated by the digital\n        signature service.\n\
    \   (4)  The value of its required parameter \"micalg\" is set to the same\n \
    \       value used in the MIC-Info: header in the control information.\n     \
    \   If there is more than one MIC-Info: header present the value is\n        set\
    \ to a comma separated list of values from the MIC-Info\n        headers.  The\
    \ interpretation of the order of the list of values\n        is outside the scope\
    \ of this specification.\n   A multipart/signed content type with the MOSS protocol\
    \ might look as\n   follows:\n      Content-Type: multipart/signed;\n        protocol=\"\
    application/moss-signature\";\n        micalg=\"rsa-md5\"; boundary=\"Signed Message\"\
    \n      --Signed Message\n      Content-Type: text/plain\n      This is some example\
    \ text.\n      --Signed Message\n      Content-Type: application/moss-signature\n\
    \      Version: 5\n      Originator-ID: ID-INFORMATION\n      MIC-Info: RSA-MD5,RSA,SIGNATURE-INFORMATION\n\
    \      --Signed Message--\n   where ID-INFORMATION and SIGNATURE-INFORMATION are\
    \ descriptive of the\n   content that would appear in a real body part.\n"
- title: 2.2.  Encryption Service
  contents:
  - "2.2.  Encryption Service\n   The MOSS encryption service is applied to MIME objects,\
    \ specifically\n   a MIME body part.  The MIME body part is created according\
    \ to a local\n   convention and then made available to the encryption service.\n\
    \   The following sequence of steps comprises the application of the\n   encryption\
    \ service.\n   (1)  The body part to be encrypted must be in MIME canonical form.\n\
    \   (2)  The data encrypting key and other control information must be\n     \
    \   generated.\n   (3)  The control information must be embodied in an appropriate\
    \ MIME\n        content type.\n   (4)  The control information body part and the\
    \ encrypted data body\n        part must be embodied in a multipart/encrypted\
    \ content type.\n   The first step is defined by MIME.  The latter three steps\
    \ are\n   described below.\n"
- title: 2.2.1.  Encryption Control Information
  contents:
  - "2.2.1.  Encryption Control Information\n   The application of the encryption\
    \ service generates control\n   information which includes the data encrypting\
    \ key used to encrypt\n   the data itself.  The syntax of the control information\
    \ is that of a\n   set of RFC 822 headers, except that the folding of header values\
    \ onto\n   continuation lines is explicitly forbidden.  Each header and value\n\
    \   pair generated by the encryption service must be output on exactly\n   one\
    \ line.\n   First, the originator must retrieve the public key of the recipient.\n\
    \   The retrieval may be from a local database or from a remote service.\n   The\
    \ acquisition of the recipient's public key is outside the scope of\n   the specification,\
    \ although Section 5 defines one possible mechanism.\n   With the public key,\
    \ the originator encrypts the data encrypting key\n   according to the Key-Info:\
    \ header defined below.  The complete set of\n   headers generated by the encryption\
    \ service is as follows.\n   Version:\n      indicates which version of the MOSS\
    \ protocol the remaining headers\n      represent and is defined in Section 2.1.2.1.\n\
    \   DEK-Info:\n      indicates the algorithm and mode used to encrypt the data.\n\
    \   Recipient-ID:\n      indicates the public key used to encrypt the data encrypting\
    \ key\n      that was used to encrypt the data.\n   Key-Info:\n      contains\
    \ data encrypting key encrypted with the recipient's public\n      key.\n   Each\
    \ invocation of the encryption service must emit exactly one\n   Version: header,\
    \ exactly one DEK-Info: header, and at least one pair\n   of Recipient-ID: and\
    \ Key-Info: headers.  Headers are always emitted\n   in the order indicated. \
    \ The Recipient-ID: and Key-Info: headers are\n   always emitted in pairs in the\
    \ order indicated, one pair for each\n   recipient of the encrypted data.  A Key-Info:\
    \ header is always\n   interpreted in the context of the immediately preceding\
    \ Recipient-ID:\n   header.\n      IMPLEMENTORS NOTE: Implementors should always\
    \ generate a\n      Recipient-ID: and Key-Info header pair representing the originator\n\
    \      of the encrypted data.  By doing so, if an originator sends a\n      message\
    \ to a recipient that is returned undelivered, the\n      originator will be able\
    \ to decrypt the message and determine an\n      appropriate course of action\
    \ based on its content.  If not, an\n      originator will not be able to review\
    \ the message that was sent.\n"
- title: '2.2.1.1.  DEK-Info:'
  contents:
  - "2.2.1.1.  DEK-Info:\n   The purpose of the data encrypting key information header\
    \ is to\n   indicate the algorithm and mode used to encrypt the data, along with\n\
    \   any cryptographic parameters that may be required, e.g.,\n   initialization\
    \ vectors.  Its value is either a single argument\n   indicating the algorithm\
    \ and mode or a comma separated pair of\n   arguments where the second argument\
    \ carries any cryptographic\n   parameters required by the algorithm and mode\
    \ indicated in the first\n   argument.\n   The data encrypting key information\
    \ header is defined by the grammar\n   token <dekinfo> as follows.\n      <dekinfo>\
    \  ::= \"DEK-Info\" \":\" <dekalgid>\n                     [ \",\" <dekparameters>\
    \ ] CRLF\n   The grammar tokens for the encryption algorithm and mode identifier\n\
    \   (<dekalgid>) and the optional cryptographic parameters\n   (<dekparameters>)\
    \ are defined by RFC 1423.  They are also reprinted\n   in Appendix B.\n"
- title: '2.2.1.2.  Recipient-ID:'
  contents:
  - "2.2.1.2.  Recipient-ID:\n   The purpose of the recipient header is to identify\
    \ the private key\n   that must be used to decrypt the data encrypting key that\
    \ will be\n   used to decrypt the data.  Presumably the recipient owns the private\n\
    \   key and thus is less interested in identifying the owner of the key\n   and\
    \ more interested in the private key value itself.  Nonetheless,\n   the recipient\
    \ header may convey either or both pieces of information:\n      the public key\
    \ corresponding to the private key to be used to\n      decrypt the data encrypting\
    \ key\n      the name of the owner and which of the owner's private keys to use\n\
    \      to decrypt the data encrypting key\n   The decision as to what information\
    \ to place in the value rests\n   entirely with the originator.  The suggested\
    \ choice is to include\n   just the public key.  However, some recipients may\
    \ prefer that\n   originators not include their public key.  How this preference\
    \ is\n   conveyed to and managed by the originator is outside the scope of\n \
    \  this specification.\n   The recipient header is defined by the grammar token\
    \ <recipid> as\n   follows.\n      <recipid>  ::= \"Recipient-ID:\" <id> CRLF\n\
    \   The grammar token <id> is defined in Section 4.\n"
- title: '2.2.1.3.  Key-Info:'
  contents:
  - "2.2.1.3.  Key-Info:\n   The purpose of the key information header is to convey\
    \ the encrypted\n   data encrypting key.  Its value is a comma separated list\
    \ of two\n   arguments: the algorithm and mode identifier in which the data\n\
    \   encrypting key is encrypted and the encrypted data encrypting key.\n   The\
    \ key information header is defined by the grammar token\n   <asymkeyinfo> as\
    \ follows.\n      <asymkeyinfo>  ::= \"Key-Info\" \":\" <ikalgid> \",\" <asymencdek>\
    \ CRLF\n   The grammar tokens for the encryption algorithm and mode identifier\n\
    \   (<ikalgid>) and the encrypted data encrypting key format\n   (<asymsignmic>)\
    \ are defined by RFC 1423.  They are also reprinted in\n   Appendix B.\n     \
    \ IMPLEMENTORS NOTE: RFC 1423 is referenced by the PEM protocol,\n      which\
    \ includes support for symmetric signatures and key\n      management.  As a result,\
    \ some of the grammar tokens defined\n      there, for example, <ikalgid>, will\
    \ include options that are not\n      legal for this protocol.  These options\
    \ must be ignored and have\n      not been included in the appendix.\n"
- title: 2.2.2.  application/moss-keys Content Type Definition
  contents:
  - "2.2.2.  application/moss-keys Content Type Definition\n   (1)  MIME type name:\
    \ application\n   (2)  MIME subtype name: moss-keys\n   (3)  Required parameters:\
    \ none\n   (4)  Optional parameters: none\n   (5)  Encoding considerations: quoted-printable\
    \ is always sufficient\n   (6)  Security considerations: none\n   The \"application/moss-keys\"\
    \ content type is used on the first body\n   part of an enclosing multipart/encrypted.\
    \  Its content is comprised\n   of the data encryption key used to encrypt the\
    \ data in the second\n   body part and other control information required to decrypt\
    \ the data,\n   as defined by Section 2.2.1.  The label \"application/moss-keys\"\
    \ must\n   be used as the value of the protocol parameter of the enclosing\n \
    \  multipart/encrypted; the protocol parameter must be present.\n   An application/moss-keys\
    \ body part is constructed as follows:\n      Content-Type: application/moss-keys\n\
    \      <mosskeys>\n   where the <mosskeys> token is defined as follows.\n    \
    \  <mosskeys>      ::= <version> <dekinfo> 1*<recipasymflds>\n      <version>\
    \       ::= \"Version:\" \"5\" CRLF\n      <dekinfo>       ::= \"DEK-Info\" \"\
    :\" <dekalgid>\n                          [ \",\" <dekparameters> ] CRLF\n   \
    \   <recipasymflds> ::= <recipid> <asymkeyinfo>\n      <recipid>       ::= \"\
    Recipient-ID:\" <id> CRLF\n      <asymkeyinfo>   ::= \"Key-Info\" \":\" <ikalgid>\
    \ \",\" <asymencdek> CRLF\n   The token <id> is defined in Section 4.  The token\
    \ <version> is\n   defined in Section 2.1.2.1.  All other tokens are defined in\
    \ Section\n   2.2.1.3.\n"
- title: 2.2.3.  Use of multipart/encrypted Content Type
  contents:
  - "2.2.3.  Use of multipart/encrypted Content Type\n   The definition of the multipart/encrypted\
    \ body part in [7] specifies\n   three steps for creating the body part.\n   (1)\
    \  The body part to be encrypted is created according to a local\n        convention,\
    \ for example, with a text editor or a mail user\n        agent.\n   (2)  The\
    \ body part is prepared for encryption according to the\n        protocol parameter,\
    \ in this case the body part must be in MIME\n        canonical form.\n   (3)\
    \  The prepared body part is encrypted according to the protocol\n        parameter,\
    \ in this case according to Section 2.2.1.\n   The multipart/encrypted content\
    \ type is constructed as follows.\n   (1)  The value of its required parameter\
    \ \"protocol\" is set to\n        \"application/moss-keys\".\n   (2)  The first\
    \ body part is labeled \"application/moss-keys\" and is\n        filled with the\
    \ control information generated by the encryption\n        service.\n   (3)  The\
    \ encrypted body part becomes the content of its second body\n        part, which\
    \ is labeled \"application/octet-stream\".\n   A multipart/encrypted content type\
    \ with the MOSS protocol might look\n   as follows:\n      Content-Type: multipart/encrypted;\n\
    \        protocol=\"application/moss-keys\";\n        boundary=\"Encrypted Message\"\
    \n      --Encrypted Message\n      Content-Type: application/moss-keys\n     \
    \ Version: 5\n      DEK-Info: DES-CBC,DEK-INFORMATION\n      Recipient-ID: ID-INFORMATION\n\
    \      Key-Info: RSA,KEY-INFORMATION\n      --Encrypted Message\n      Content-Type:\
    \ application/octet-stream\n      ENCRYPTED-DATA\n      --Encrypted Message--\n\
    \   where DEK-INFORMATION, ID-INFORMATION, and KEY-INFORMATION are\n   descriptive\
    \ of the content that would appear in a real body part.\n"
- title: 3.  Removing MIME Object Security Services
  contents:
  - "3.  Removing MIME Object Security Services\n   The verification of the MOSS digital\
    \ signature service requires the\n   following components.\n   (1)  A recipient\
    \ to verify the digital signature.\n   (2)  A multipart/signed body part with\
    \ two body parts: the signed\n        data and the control information.\n   (3)\
    \  The public key of the originator.\n   The signed data and control information\
    \ of the enclosing\n   multipart/signed are prepared according to the description\
    \ below.\n   The digital signature is verified by re-computing the hash of the\n\
    \   data, decrypting the hash value in the control information with the\n   originator's\
    \ public key, and comparing the two hash values.  If the\n   two hash values are\
    \ equal, the signature is valid.\n   The decryption of the MOSS encryption service\
    \ requires the following\n   components.\n   (1)  A recipient to decrypt the data.\n\
    \   (2)  A multipart/encrypted body part with two body parts: the\n        encrypted\
    \ data and the control information.\n   (3)  The private key of the recipient.\n\
    \   The encrypted data and control information of the enclosing\n   multipart/encrypted\
    \ are prepared according to the description below.\n   The data encrypting key\
    \ is decrypted with the recipient's private key\n   and used to decrypt the data.\n\
    \   The next two sections describe the digital signature and encryption\n   services\
    \ in detail, respectively.\n"
- title: 3.1.  Digital Signature Service
  contents:
  - "3.1.  Digital Signature Service\n   This section describes the processing steps\
    \ necessary to verify the\n   MOSS digital signature service.  The definition\
    \ of the\n   multipart/signed body part in [7] specifies three steps for receiving\n\
    \   it.\n   (1)  The digitally signed body part and the control information body\n\
    \        part are prepared for processing.\n   (2)  The prepared body parts are\
    \ made available to the digital\n        signature verification process.\n   (3)\
    \  The results of the digital signature verification process are\n        made\
    \ available to the user and processing continues with the\n        digitally signed\
    \ body part, as returned by the digital signature\n        verification process.\n\
    \   Each of these steps is described below.\n"
- title: 3.1.1.  Preparation
  contents:
  - "3.1.1.  Preparation\n   The digitally signed body part (the data) and the control\
    \ information\n   body part are separated from the enclosing multipart/signed\
    \ body\n   part.\n   The control information is prepared by removing any content\
    \ transfer\n   encodings that may be present.\n   The digitally signed body part\
    \ is prepared by leaving the content\n   transfer encodings intact and canonicalizing\
    \ the line delimiters\n   according to Step 2 of Section 2.1.1.\n"
- title: 3.1.2.  Verification
  contents:
  - "3.1.2.  Verification\n   First, the recipient must obtain the public key of the\
    \ originator.\n   The public key may be contained in the control information or\
    \ it may\n   be necessary for the recipient to retrieve the public key based on\n\
    \   information present in the control information.  The retrieval may be\n  \
    \ from a local database or from a remote service.  The acquisition of\n   the\
    \ originator's public key is outside the scope of the\n   specification, although\
    \ Section 5 defines one possible mechanism.\n   With the public key, the recipient\
    \ decrypts the hash value contained\n   in the control information.  Then, a new\
    \ hash value is computed over\n   the body part purported to have been digitally\
    \ signed.\n   Finally, the two hash values are compared to determine the accuracy\n\
    \   of the digital signature.\n"
- title: 3.1.3.  Results
  contents:
  - "3.1.3.  Results\n   There are two required components of the results of the verification\n\
    \   process.  The first is an indication as to whether a public key could\n  \
    \ be found that allows the hash values in the previous step to compare\n   equal.\
    \  Such an indication verifies only that the data received is\n   the same data\
    \ that was digitally signed.\n   The second indication identifies the owner of\
    \ the public key who is\n   presumably the holder of the private key that created\
    \ the digital\n   signature.  The indication must include a testament as to the\n\
    \   accuracy of the owner identification.\n   At issue is a recipient knowing\
    \ who created the digital signature.\n   In order for the recipient to know with\
    \ certainty who digitally\n   signed the message, the binding between the owner's\
    \ name and the\n   public key must have been verified by the recipient prior to\
    \ the\n   verification of the digital signature.  The verification of the\n  \
    \ binding may have been completed offline and stored in a trusted,\n   local database\
    \ or, if the owner's name and public key are embodied in\n   a certificate, it\
    \ may be possible to complete it in realtime.  See\n   Section 5 for more information.\n"
- title: 3.2.  Encryption Service
  contents:
  - "3.2.  Encryption Service\n   This section describes the processing steps necessary\
    \ to decrypt the\n   MOSS encryption service.  The definition of the multipart/encrypted\n\
    \   body part in [7] specifies three steps for receiving it.\n   (1)  The encrypted\
    \ body part and the control information body part\n        are prepared for processing.\n\
    \   (2)  The prepared body parts are made available to the decryption\n      \
    \  process.\n   (3)  The results of the decryption process are made available\
    \ to the\n        user and processing continues with the decrypted body part,\
    \ as\n        returned by the decryption process.\n   Each of these steps is described\
    \ below.\n"
- title: 3.2.1.  Preparation
  contents:
  - "3.2.1.  Preparation\n   The encrypted body part (the data) and the control information\
    \ body\n   part are separated from the enclosing multipart/encrypted body part.\n\
    \   The body parts are prepared for the decryption process by removing\n   any\
    \ content transfer encodings that may be present.\n"
- title: 3.2.2.  Decryption
  contents:
  - "3.2.2.  Decryption\n   First, the recipient must locate the encrypted data encrypting\
    \ key in\n   the control information.  Each Recipient-ID: header is checked in\n\
    \   order to see if it identifies the recipient or a public key of the\n   recipient.\n\
    \   If it does, the immediately following Key-Info: header will contain\n   the\
    \ data encrypting key encrypted with the public key of the\n   recipient.  The\
    \ recipient must use the corresponding private key to\n   decrypt the data encrypting\
    \ key.\n   The data is decrypted with the data encrypting key.  The decrypted\n\
    \   data will be a MIME object, a body part, ready to be processed by a\n   MIME\
    \ agent.\n"
- title: 3.2.3.  Results
  contents:
  - "3.2.3.  Results\n   If the recipient is able to locate and decrypt a data encrypting\
    \ key,\n   from the point of view of MOSS the decryption should be considered\n\
    \   successful.  An indication of the owner of the private key used to\n   decrypt\
    \ the data encrypting key must be made available to the user.\n   Ultimately,\
    \ the success of the decryption is dependent on the ability\n   of a MIME agent\
    \ to continue processing with the decrypted body part.\n"
- title: 4.  Identifying Originators, Recipients, and Their Keys
  contents:
  - "4.  Identifying Originators, Recipients, and Their Keys\n   In the PEM specifications,\
    \ public keys are required to be embodied in\n   certificates, an object that\
    \ binds each public key with a\n   distinguished name.  A distinguished name is\
    \ a name form that\n   identifies the owner of the public key.  The embodiment\
    \ is issued by\n   a certification authority, a role that is expected to be trustworthy\n\
    \   insofar as the certification authority would have procedures to\n   verify\
    \ the identity of the owner prior to issuing the certificate.\n   In MOSS, a user\
    \ is not required to have a certificate.  The MOSS\n   services require that the\
    \ user have at least one public/private key\n   pair.  The MOSS protocol requires\
    \ the digital signature and\n   encryption services to emit Originator-ID: and\
    \ Recipient-ID: headers,\n   as appropriate.  In the discussion above the actual\
    \ value of these\n   headers was omitted, having been relegated to this section.\
    \  Although\n   the value of each of these headers serves a distinct purpose,\
    \ for\n   simplicity the single grammar token <id> represents the value that\n\
    \   may be assigned to either header.\n   One possible value for the Originator-ID:\
    \ and Recipient-ID: headers\n   is the public key values themselves.  However,\
    \ while it is true that\n   the public keys alone could be exchanged and used\
    \ by users to\n   communicate, the values are, in fact, large and cumbersome.\
    \  In\n   addition, public keys would appear as a random sequence of characters\n\
    \   and, as a result, would not be immediately consumable by human users.\n  \
    \    NOTE: It should be pointed out that a feature of being able to\n      specify\
    \ the public key explicitly is that it allows users to\n      exchange encrypted,\
    \ anonymous mail.  In particular, receiving\n      users will always know a message\
    \ comes from the same originating\n      user even if the real identity of the\
    \ originating user is unknown.\n   Recognizing that the use of public keys is,\
    \ in general, unsuitable\n   for use by humans, MOSS allows other identifiers\
    \ in Originator-ID:\n   and Recipient-ID: headers.  These other identifiers are\
    \ comprised of\n   two parts: a name form and a key selector.\n   The name form\
    \ is chosen and asserted by the user who owns the\n   public/private key pair.\
    \  Three name forms are specified by this\n   document.  The use of a distinguished\
    \ name is retained for\n   compatibility with PEM (and compatibility with the\
    \ X.500 Directory\n   should it become a ubiquitous service).  However, the Internet\n\
    \   community has a great deal of experience with the use of electronic\n   mail\
    \ addresses as a name form.  Also, arbitrary strings are useful to\n   identify\
    \ the owners of public keys when private name forms are used.\n   Hence, email\
    \ addresses and arbitrary strings are included as name\n   forms to increase flexibility.\n\
    \   Since a user may have more than one public key and may wish to use\n   the\
    \ same name form for each public key, a name form is insufficient\n   for uniquely\
    \ identifying a public key.  A unique \"key selector\" must\n   be assigned to\
    \ each public key.  The combination of a name form and\n   the key selector uniquely\
    \ identifies a public key.  Throughout this\n   document, this combination is\
    \ called an identifier.  There are 5\n   identifiers specified by this document.\n\
    \      NOTE: In the simplest case, key selectors will be assigned by the\n   \
    \   owners of the public/private key pairs.  This works best when\n      users\
    \ generate their own key pairs for personal use, from which\n      they distribute\
    \ their public key to others asserting by\n      declaration that the public key\
    \ belongs to them.  When the\n      assertion that the public key belongs to them\
    \ is made by a third\n      party, for example when a certification authority\
    \ issues a\n      certificate to a user according to [4], the key selector may\
    \ be\n      assigned by that third party.\n   The value of the key selector must\
    \ be unique with respect to the name\n   form with which it forms an identifier.\
    \  Although the same key\n   selector value may be used by more than one name\
    \ form it must not be\n   used for two different keys with the same name form.\
    \  When considered\n   separately, neither a name form nor a key selector is sufficient\
    \ for\n   identifying the public key to be used.  Either could be used to\n  \
    \ determine a set of public keys that may be tried in turn until the\n   desired\
    \ public key is identified.\n   With a public/private key pair for one's self\
    \ and software that is\n   MOSS aware, an originating user may digitally sign\
    \ arbitrary data and\n   send it to one or more recipients.  With the public keys\
    \ of the\n   recipients, a user may encrypt the data so that only the intended\n\
    \   recipients can decrypt and read it.  With the name forms assigned to\n   the\
    \ public keys, originators and recipients can easily recognize\n   their peers\
    \ in a communication.\n   In the next section the 3 name forms are described in\
    \ detail.\n   Following that is the specification of the 5 identifiers.\n"
- title: 4.1.  Name Forms
  contents:
  - "4.1.  Name Forms\n   There are 3 name forms specified by this document: email\
    \ addresses,\n   distinguished names, and arbitrary strings.\n"
- title: 4.1.1.  Email Addresses
  contents:
  - "4.1.1.  Email Addresses\n   The email address (grammar token <emailstr>) used\
    \ must be a valid\n   RFC822 address, which is defined in terms of one of the\
    \ two grammar\n   tokens <addr-spec> or <route-addr>.  The grammar for these two\
    \ tokens\n   is included in the Appendix as a convenience; the definitive source\n\
    \   for these tokens is necessarily RFC822 [1].\n      <emailstr>      ::= <addr-spec>\
    \ / <route-addr>\n                          ; an electronic mail address as defined\
    \ by\n                          ; one of these two tokens from RFC822\n   For\
    \ example, the strings \"crocker@tis.com\", \"galvin@tis.com\",\n   \"murphy@tis.com\"\
    , and \"ned@innosoft.com\" are all email addresses.\n"
- title: 4.1.2.  Arbitrary Strings
  contents:
  - "4.1.2.  Arbitrary Strings\n   The arbitrary string (grammar token <string>) must\
    \ have a length of\n   at least 1.  There are no other restrictions on the value\
    \ chosen.\n      <string>        ::= ; a non-null sequence of characters\n   For\
    \ example, the string\n      the SAAG mailing list maintainer\n   is an arbitrary\
    \ string.\n"
- title: 4.1.3.  Distinguished Names
  contents:
  - "4.1.3.  Distinguished Names\n   The distinguished name (grammar token <dnamestr>)\
    \ must be constructed\n   according to the guidelines of the X.500 Directory.\
    \  The actual\n   syntax of the distinguished name is outside the scope of this\n\
    \   specification.  However, RFC1422, for example, specifies syntactic\n   restrictions\
    \ based on its choice of a certification hierarchy for\n   certificates.\n   For\
    \ the purposes of conveying a distinguished name from an originator\n   to a recipient,\
    \ it must be ASN.1 encoded and then printably encoded\n   according to the base64\
    \ encoding defined by MIME.\n      <dnamestr>      ::= <encbin>\n            \
    \              ; a printably encoded, ASN.1 encoded\n                        \
    \  ; distinguished name (as defined by the 'Name'\n                          ;\
    \ production specified in X.501 [8])\n   For example,\n      /Country Name=US\n\
    \      /State or Province Name=MD\n      /Organization Name=Trusted Information\
    \ Systems\n      /Organizational Unit Name=Glenwood\n      /Common Name=James\
    \ M. Galvin/\n   is a distinguished name in a user friendly format (line breaks\
    \ and\n   leading spaces present only to improve readability).  When encoded,\n\
    \   it would appear as follows (line breaks present only to improve\n   readability):\n\
    \      MG0xCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJNRDEkMCIGA1UEChMbVHJ1c3RlZCBJ\n    \
    \  bmZvcm1hdGlvbiBTeXN0ZW1zMREwDwYDVQQLEwhHbGVud29vZDEYMBYGA1UEAxMP\n      SmFtZXMgTS4gR2Fsdmlu\n"
- title: 4.2.  Identifiers
  contents:
  - "4.2.  Identifiers\n   There are 5 types of identifiers specified by this document:\n\
    \      email address identifiers\n      arbitrary string identifiers\n      distinguished\
    \ name identifiers\n      the public keys themselves\n      issuer name serial\
    \ number pairs from a certificate\n   All of these have approximately the same\
    \ structure (except issuer\n   name and serial number which has 'TYPE, STRING,\
    \ KEYSEL' for\n   historical reasons):\n      TYPE, KEYSEL, STRING\n   The TYPE\
    \ field is a literal string chosen from the set \"EN\", \"STR\",\n   \"DN\", \"\
    PK\", and \"IS\", one for each of the possible identifiers.\n   The KEYSEL field\
    \ is used to distinguish between the multiple public\n   keys that may be associated\
    \ with the name form in the STRING field.\n   Its value must be unique with respect\
    \ to all other key selectors used\n   with the same name form.  An example would\
    \ be to use a portion (low-\n   order 16 or 32 bits) or all of the actual public\
    \ key used.\n   The STRING field is the name form and has a different syntax\n\
    \   according to the value of the TYPE field.\n   The identifier used in each\
    \ of the originator and recipient fields is\n   described by the following grammar.\
    \  The definition of the key\n   selector token is included here since it used\
    \ by several of the\n   identifiers below.\n      <id>            ::=   <id-email>\
    \ / <id-string>    / <id-dname>\n                          / <id-publickey> /\
    \ <id-issuer>\n      <keysel>        ::= 1*<hexchar>\n                       \
    \   ; hex dump of a non-null sequence of octets\n   Each of the identifier name\
    \ forms is described below.\n"
- title: 4.2.1.  Email Address
  contents:
  - "4.2.1.  Email Address\n   The email address identifier has the following syntax.\n\
    \      <id-email>      ::= \"EN\"  \",\" <keysel> \",\" <emailstr> CRLF\n   The\
    \ syntax of the token <emailstr> is defined in Section 4.1.1.\n   For example:\n\
    \      EN,1,galvin@tis.com\n   is an email address identifier.\n"
- title: 4.2.2.  Arbitrary String
  contents:
  - "4.2.2.  Arbitrary String\n   The arbitrary string identifier has the following\
    \ syntax.\n      <id-string>     ::= \"STR\" \",\" <keysel> \",\" <string> CRLF\n\
    \   The syntax of the token <string> is defined in Section 4.1.2.\n   For example:\n\
    \      STR,1,The SAAG mailing list maintainer\n   is an arbitrary string identifier.\n"
- title: 4.2.3.  Distinguished Name
  contents:
  - "4.2.3.  Distinguished Name\n   The distinguished name identifier has the following\
    \ syntax.\n      <id-dname>      ::= \"DN\"  \",\" <keysel> \",\" <dnamestr> CRLF\n\
    \   The syntax of the token <dnamestr> is defined in Section 4.1.3.\n   For example\
    \ (line breaks present only to improve readability):\n      DN,1,MG0xCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJNRDEkMCIGA1UEChMbVHJ1c3R\n\
    \      lZCBJbmZvcm1hdGlvbiBTeXN0ZW1zMREwDwYDVQQLEwhHbGVud29vZDEYMBYGA1U\n    \
    \  EAxMPSmFtZXMgTS4gR2Fsdmlu\n   is a distinguished name identifier.\n"
- title: 4.2.4.  Public Key
  contents:
  - "4.2.4.  Public Key\n   The public key identifier has the following syntax.\n\
    \      <id-publickey>  ::= \"PK\"  \",\" <publickey> [ \",\" <id-subset> ] CRLF\n\
    \      <publickey>     ::= <encbin>\n                          ; a printably encoded,\
    \ ASN.1 encoded public\n                          ; key (as defined by the\n \
    \                         ; 'SubjectPublicKeyInfo' production specified\n    \
    \                      ; in X.509 [9])\n      <id-subset>     ::= <id-email> /\
    \ <id-string> / <id-dname>\n   The production SubjectPublicKeyInfo is imported\
    \ from the X.500\n   Directory from the certificate object.  It is currently the\
    \ best\n   choice for a general purpose public key encoding.\n   For example,\
    \ (line breaks present only to improve readability):\n      PK,MHkwCgYEVQgBAQICAwADawAwaAJhAMAHQ45ywA357G4fqQ61aoC1fO6BekJmG\n\
    \      4475mJkwGIUxvDkwuxe/EFdPkXDGBxzdGrW1iuh5K8kl8KRGJ9wh1HU4TrghGdhn\n    \
    \  0Lw8gG67Dmb5cBhY9DGwq0CDnrpKZV3cQIDAQAB\n   is a public key identifier without\
    \ the optional <id-subset>.\n   In normal usage, the token <id-subset> is expected\
    \ to be present.  It\n   represents a mechanism by which an identifier (name form\
    \ and key\n   selector) can be associated with a public key.  Recipients of a\n\
    \   public key identifier must take care to verify the accuracy of the\n   purported\
    \ association.  If they do not, it may be possible for a\n   malicious originator\
    \ to assert an identifier that accords the\n   originator unauthorized privileges.\
    \  See Section 5.2 for more\n   details.\n   For example, (line breaks present\
    \ only to improve readability):\n      PK,MHkwCgYEVQgBAQICAwADawAwaAJhAMAHQ45ywA357G4fqQ61aoC1fO6BekJmG\n\
    \      4475mJkwGIUxvDkwuxe/EFdPkXDGBxzdGrW1iuh5K8kl8KRGJ9wh1HU4TrghGdhn\n    \
    \  0Lw8gG67Dmb5cBhY9DGwq0CDnrpKZV3cQIDAQAB,EN,2,galvin@tis.com\n   is a public\
    \ key identifier with the optional <id-subset>.\n"
- title: 4.2.5.  Issuer Name and Serial Number
  contents:
  - "4.2.5.  Issuer Name and Serial Number\n   The issuer name and serial number identifier\
    \ has the following\n   syntax.\n      <id-issuer>     ::= \"IS\"  \",\" <dnamestr>\
    \  \",\" <serial> CRLF\n      <serial>        ::= 1*<hexchar>\n              \
    \            ; hex dump of a certificate serial number\n   The <id-issuer> identifier\
    \ is included for compatibility with the\n   ID-ASymmetric fields defined in [3]\
    \ (and compatibility with X.500\n   Directory certificates should they become\
    \ ubiquitously available).\n   Its syntax was chosen such that the older fields\
    \ are easily converted\n   to this new form by prefixing the old value with \"\
    IS\" (and replacing\n   the field name of [3] with an appropriate new ID field\
    \ name).  For\n   example, (line breaks present only to improve readability):\n\
    \      IS,MFMxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJNRDEkMCIGA1UEChMbVHJ1c3\n      RlZCBJbmZvcm1hdGlvbiBTeXN0ZW1zMREwDwYDVQQLEwhHbGVud29vZA==,02\n\
    \   is an issuer name and serial number identifier according to MOSS,\n   while\n\
    \      MFMxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJNRDEkMCIGA1UEChMbVHJ1c3\n      RlZCBJbmZvcm1hdGlvbiBTeXN0ZW1zMREwDwYDVQQLEwhHbGVud29vZA==,02\n\
    \   is an issuer name and serial number identifier according to PEM.\n"
- title: 5.  Key Management Content Types
  contents:
  - "5.  Key Management Content Types\n   This document defines two key management\
    \ content types: one for\n   requesting cryptographic key material and one for\
    \ sending\n   cryptographic key material.  Since MOSS depends only on the existence\n\
    \   of public/private key pairs, these content types provide a means for\n   conveying\
    \ public keys and an assertion as to the identity of the\n   owner.  In addition,\
    \ in order to be compatible with the certificate-\n   base key management system\
    \ proposed by RFC 1422, the content types\n   may also be used to convey certificate\
    \ and certificate revocation\n   list material.\n   The functions defined here\
    \ are based on the exchange of body parts.\n   In particular, a user would send\
    \ a message containing at least one\n   application/mosskey-request content, as\
    \ defined below.  In response,\n   a user would expect to receive a message containing\
    \ at least one\n   application/mosskey-data content, as defined below.  MIME provides\
    \ a\n   convenient framework for a user to send several request body parts\n \
    \  and to receive several data (response) body parts in one message.\n"
- title: 5.1.  application/mosskey-request Content Type Definition
  contents:
  - "5.1.  application/mosskey-request Content Type Definition\n   (1)  MIME type\
    \ name: application\n   (2)  MIME subtype name: mosskey-request\n   (3)  Required\
    \ parameters: none\n   (4)  Optional parameters: none\n   (5)  Encoding considerations:\
    \ quoted-printable is always sufficient\n   (6)  Security Considerations: none\n\
    \   The content of this body part corresponds to the following\n   production.\n\
    \      <request>       ::= <version>\n                          ( <subject> /\
    \ <issuer> / <certification> )\n      <version>       ::= \"Version:\" \"5\" CRLF\n\
    \      <subject>       ::= \"Subject:\" <id> CRLF\n      <issuer>        ::= \"\
    Issuer:\" <id> CRLF\n      <certification> ::= \"Certification:\" <encbin> CRLF\n\
    \   A user would use this content type to specify needed cryptographic\n   key\
    \ information.  The message containing this content type might be\n   directed\
    \ towards an automatic or manual responder, which may be\n   mail-based, depending\
    \ on the local implementation and environment.\n   The application/mosskey-request\
    \ content type is an independent body\n   part because it is entirely independent\
    \ of any other body part.\n   If the application/mosskey-request content contains\
    \ a Certification:\n   field it requests certification of the self-signed certificate\
    \ in the\n   field value.  If the content contains an Issuer: field it requests\n\
    \   the Certificate Revocation List (CRL) chain beginning with the CRL of\n  \
    \ the issuer identified in the field value.  If the content contains a\n   Subject:\
    \ field it requests either the public key of the subject or a\n   certificate\
    \ chain beginning with the subject identified in the field\n   value, or both\
    \ if both exist.\n   The Subject: and Issuer: fields each contain a value of type\
    \ <id>,\n   which is defined in Section 4.\n   One possible response to receiving\
    \ an application/mosskey-request\n   body part is to construct and return an application/mosskey-data\
    \ body\n   part.  When returning public keys, certificate chains, and\n   certificate\
    \ revocation list chains, if there exists more than one,\n   several application/mosskey-data\
    \ body parts are to be returned in the\n   reply message, one for each.\n"
- title: 5.2.  application/mosskey-data Content Type Definition
  contents:
  - "5.2.  application/mosskey-data Content Type Definition\n   The principal objective\
    \ of this content type is to convey\n   cryptographic keying material from a source\
    \ to a destination.  This\n   might be in response to the receipt of an application/mosskey-request\n\
    \   content type or it might be in anticipation of receiving an\n   application/mosskey-request\
    \ if it is not sent, e.g., it may be\n   combined with a multipart/signed object\
    \ by an originator to ensure\n   that a recipient has the cryptographic keying\
    \ material necessary to\n   verify the signature.  When combined with other content\
    \ types, the\n   processing by a recipient is enhanced if the application/mosskey-data\n\
    \   content type is positioned in its enclosing content type prior to the\n  \
    \ content types that will make use of its cryptographic keying\n   material.\n\
    \   However, no explicit provision is made in this document for\n   determining\
    \ the authenticity or accuracy of the data being conveyed.\n   In particular,\
    \ when a public key and its identifier is conveyed,\n   there is nothing to prevent\
    \ the source or an interloper along the\n   path from the source to the destination\
    \ from substituting alternate\n   values for either the public key or the identifier.\n\
    \   It is incumbent upon a recipient to verify the authenticity and\n   accuracy\
    \ of the data received in this way prior to its use.  This\n   problem can be\
    \ addressed by the use of certificates, since a\n   certification hierarchy is\
    \ a well-defined mechanism that conveniently\n   supports the automatic verification\
    \ of the data.  Alternatively, the\n   source of the application/mosskey-data\
    \ body part could digitally sign\n   it.  In this way, if the destination believes\
    \ that a correct source's\n   public key is available locally and if the destination\
    \ believes the\n   source would convey accurate data, then the contents of the\n\
    \   application/mosskey-data from the source could be believed to be\n   accurate.\n\
    \      NOTE: Insofar as a certificate represents a mechanism by which a\n    \
    \  third party vouches for the binding between a name and a public\n      key,\
    \ the signing of an application/mosskey-data body part is a\n      similar mechanism.\n\
    \   (1)  MIME type name: application\n   (2)  MIME subtype name: mosskey-data\n\
    \   (3)  Required parameters: none\n   (4)  Optional parameters: none\n   (5)\
    \  Encoding considerations: quoted-printable is always sufficient.\n   (6)  Security\
    \ Considerations: none\n   The content of this body part corresponds to the following\n\
    \   production.\n      <mosskeydata>   ::= <version>\n                       \
    \   ( <publickeydata> / <certchain> / <crlchain> )\n      <version>       ::=\
    \ \"Version:\" \"5\" CRLF\n      <publickeydata> ::= \"Key:\" \"PK\" \",\" <publickey>\
    \ \",\"\n                          <id-subset> CRLF\n      <certchain>     ::=\
    \ <cert> *( [ <crl> ] <cert> )\n      <crlchain>      ::= 1*( <crl> [ <cert> ]\
    \ )\n      <cert>          ::= \"Certificate:\" <encbin> CRLF\n      <crl>   \
    \        ::= \"CRL:\" <encbin> CRLF\n   This content type is used to transfer\
    \ public keys, certificate\n   chains, or Certificate Revocation List (CRL) chains.\
    \  The information\n   in the body part is entirely independent of any other body\
    \ part.\n   (Note that the converse is not true: the validity of a protected body\n\
    \   part cannot be determined without the proper public keys,\n   certificates,\
    \ or current CRL information.)  As such, the\n   application/mosskey-data content\
    \ type is an independent body part.\n   The <publickeydata> production contains\
    \ exactly one public key.  It\n   is used to bind a public key with its corresponding\
    \ name form and key\n   selector.  It is recommended that when responders are\
    \ returning this\n   information that the enclosing body part be digitally signed\
    \ by the\n   responder in order to protect the information.  The <id-subset> token\n\
    \   is defined in Section 4.2.4.\n   The <certchain> production contains one certificate\
    \ chain.  A\n   certificate chain starts with the requested certificate and continues\n\
    \   with the certificates of subsequent issuers.  Each issuer certificate\n  \
    \ included must have issued the preceding certificate.  For each\n   issuer, a\
    \ CRL may be supplied.  A CRL in the chain belongs to the\n   immediately following\
    \ issuer.  Therefore, it potentially contains the\n   immediately preceding certificate.\n\
    \   The <crlchain> production contains one certificate revocation list\n   chain.\
    \  The CRLs in the chain begin with the requested CRL and\n   continue with the\
    \ CRLs of subsequent issuers.  The issuer of each CRL\n   is presumed to have\
    \ issued a certificate for the issuer of the\n   preceding CRL.  For each CRL,\
    \ the issuer's certificate may be\n   supplied.  A certificate in the chain must\
    \ belong to the issuer of\n   the immediately preceding CRL.\n   The relationship\
    \ between a certificate and an immediately preceding\n   CRL is the same in both\
    \ <certchain> and <crlchain>.  In a <certchain>\n   the CRLs are optional.  In\
    \ a <crlchain> the certificates are\n   optional.\n"
- title: 6.  Examples
  contents:
  - "6.  Examples\n   Each example is included as a separate section for ease of reference.\n"
- title: 6.1.  Original Message Prepared for Protection
  contents:
  - "6.1.  Original Message Prepared for Protection\n   Except as explicitly indicated,\
    \ the following message is used as the\n   message to be protected.\n      To:\
    \ Ned Freed <ned@innosoft.com>\n      Subject: Hi Ned!\n      How do you like\
    \ the new MOSS?\n      Jim\n"
- title: 6.2.  Sign Text of Original Message
  contents:
  - "6.2.  Sign Text of Original Message\n   When the text of the original message\
    \ is signed, it will look like\n   this, where lines with an ampersand '&' are\
    \ digitally signed (note\n   the use of the public key identifier with the included\
    \ email name\n   identifier, on the lines marked with an asterisk '*'):\n    \
    \    To: Ned Freed <ned@innosoft.com>\n        Subject: Hi Ned!\n        MIME-Version:\
    \ 1.0\n        Content-Type: multipart/signed;\n          protocol=\"application/moss-signature\"\
    ;\n          micalg=\"rsa-md5\"; boundary=\"Signed Boundary\"\n        --Signed\
    \ Boundary\n      & Content-Type: text/plain; charset=\"us-ascii\"\n      & Content-ID:\
    \ <21436.785186814.2@tis.com>\n      &\n      & How do you like the new MOSS?\n\
    \      &\n      & Jim\n        --Signed Boundary\n        Content-Type: application/moss-signature\n\
    \        Content-ID: <21436.785186814.1@tis.com>\n        Content-Transfer-Encoding:\
    \ quoted-printable\n        Version: 5\n      * Originator-ID: PK,MHkwCgYEVQgBAQICAwADawAwaAJhAMAHQ45ywA357G4f=\n\
    \      * qQ61aoC1fO6BekJmG4475mJkwGIUxvDkwuxe/EFdPkXDGBxzdGrW1iuh5K8kl8=\n   \
    \   * KRGJ9wh1HU4TrghGdhn0Lw8gG67Dmb5cBhY9DGwq0CDnrpKZV3cQIDAQAB,EN,=\n      *\
    \ 2,galvin@tis.com\n        MIC-Info: RSA-MD5,RSA,PnEvyFV3sSyTSiGh/HFgWUIFa22jbHoTrFIMVERf=\n\
    \        MZXUKzFsHbmKtIowJlJR56OoImo+t7WjRfzpMH7MOKgPgzRnTwk0T5dOcP/lfb=\n   \
    \     sOVJjleV7vTe9yoNp2P8mi/hs7\n        --Signed Boundary--\n"
- title: 6.3.  Sign Headers and Text of Original Message
  contents:
  - "6.3.  Sign Headers and Text of Original Message\n   If, instead, we choose to\
    \ protect the headers with the text of the\n   original message, it will look\
    \ like this, where lines with an\n   ampersand '&' are encrypted:\n        To:\
    \ Ned Freed <ned@innosoft.com>\n        Subject: Hi Ned!\n        MIME-Version:\
    \ 1.0\n        Content-Type: multipart/signed;\n          protocol=\"application/moss-signature\"\
    ;\n          micalg=\"rsa-md5\"; boundary=\"Signed Boundary\"\n        --Signed\
    \ Boundary\n      & Content-Type: message/rfc822\n      & Content-ID: <21468.785187044.2@tis.com>\n\
    \      &\n      & To:         Ned Freed <ned@innosoft.com>\n      & Subject: \
    \   Hi Ned!\n      &\n      &\n      & How do you like the new MOSS?\n      &\n\
    \      & Jim\n        --Signed Boundary\n        Content-Type: application/moss-signature\n\
    \        Content-ID: <21468.785187044.1@tis.com>\n        Content-Transfer-Encoding:\
    \ quoted-printable\n        Version: 5\n        Originator-ID: PK,MHkwCgYEVQgBAQICAwADawAwaAJhAMAHQ45ywA357G4f=\n\
    \        qQ61aoC1fO6BekJmG4475mJkwGIUxvDkwuxe/EFdPkXDGBxzdGrW1iuh5K8kl8=\n   \
    \     KRGJ9wh1HU4TrghGdhn0Lw8gG67Dmb5cBhY9DGwq0CDnrpKZV3cQIDAQAB,EN,=\n      \
    \  2,galvin@tis.com\n        MIC-Info: RSA-MD5,RSA,ctbDBgkYtFW1sisb5w4/Y/p94LftgQ0IrEn3d6WT=\n\
    \        wjfxFBvAceVWfawsZPLijVKZUYtbIqJmjKtzTJlagBawfA/KhUsvTZdR6Dj+4G=\n   \
    \     d8dBBwMKvqMKTHAUxGXYxwNdbK\n        --Signed Boundary--\n"
- title: 6.4.  Encrypt Text of a Message
  contents:
  - "6.4.  Encrypt Text of a Message\n   If we choose to encrypt the text of the following\
    \ message, that is,\n   encrypt the lines marked with asterisk '*':\n        To:\
    \ Jim Galvin <galvin@tis.com>\n        Subject: an encrypted message\n      *\
    \ How do you like the new MOSS?\n      *\n      * Jim\n   the message would look\
    \ as follows (note the use of the email name\n   identifier, on the line marked\
    \ with an asterisk '*'):\n        To: Jim Galvin <galvin@tis.com>\n        Subject:\
    \ an encrypted message\n        MIME-Version: 1.0\n        Content-Type: multipart/encrypted;\n\
    \          protocol=\"application/moss-keys\";\n          boundary=\"Encrypted\
    \ Boundary\"\n        --Encrypted Boundary\n        Content-Type: application/moss-keys\n\
    \        Content-ID: <21535.785187667.1@tis.com>\n        Content-Transfer-Encoding:\
    \ quoted-printable\n        Version: 5\n        DEK-Info: DES-CBC,D488AAAE271C8159\n\
    \      * Recipient-ID: EN,2,galvin@tis.com\n        Key-Info: RSA,ISbC3IR01BrYq2rp493X+Dt7WrVq3V3/U/YXbxOTY5cmiy1/=\n\
    \        7NvSqqXSK/WZq05lN99RDUQhdNxXI64ePAbFWQ6RGoiCrRs+Dc95oQh7EFEPoT=\n   \
    \     9P6jyzcV1NzZVwfp+u\n        --Encrypted Boundary\n        Content-Type:\
    \ application/octet-stream\n        Content-Transfer-Encoding: base64\n      \
    \  AfR1WSeyLhy5AtcX0ktUVlbFC1vvcoCjYWy/yYjVj48eqzUVvGTGMsV6MdlynU\n        d4jcJgRnQIQvIxm2VRgH8W8MkAlul+RWGu7jnxjp0sNsU562+RZr0f4F3K3n4w\n\
    \        onUUP265UvvMj23RSTguZ/nl/OxnFM6SzDgV39V/i/RofqI=\n        --Encrypted\
    \ Boundary--\n"
- title: 6.5.  Encrypt the Signed Text of a Message
  contents:
  - "6.5.  Encrypt the Signed Text of a Message\n   If, instead, we choose to sign\
    \ the text before we encrypt it, the\n   structure would be as follows, where\
    \ lines with an asterisk '*' are\n   digitally signed and lines with an ampersand\
    \ '&' are encrypted:\n          Content-Type: multipart/encrypted;\n         \
    \   protocol=\"application/moss-keys\";\n            boundary=\"Encrypted Boundary\"\
    \n          --Encrypted Boundary\n          Content-Type: application/moss-keys\n\
    \          KEY INFORMATION\n          --Encrypted Boundary\n          Content-Type:\
    \ application/octet-stream\n      &   Content-Type: multipart/signed;\n      &\
    \     protocol=\"application/moss-signature\";\n      &     micalg=\"rsa-md5\"\
    ; boundary=\"Signed Boundary\"\n      &\n      &   --Signed Boundary\n      &\
    \ * Content-Type: text/plain\n      & *\n      & * How do you like the new MOSS?\n\
    \      & *\n      & * Jim\n      &\n      &   --Signed Boundary\n      &   Content-Type:\
    \ application/moss-signature\n      &\n      &   SIGNATURE INFORMATION\n     \
    \ &\n      &   --Signed Boundary--\n          --Encrypted Boundary--\n   where\
    \ KEY INFORMATION and SIGNATURE INFORMATION are descriptive of\n   the actual\
    \ content that would appear in a real body part.  The actual\n   message would\
    \ be like this:\n      To: Jim Galvin <galvin@tis.com>\n      Subject: an encrypted\
    \ message\n      MIME-Version: 1.0\n      Content-Type: multipart/encrypted;\n\
    \        protocol=\"application/moss-keys\";\n        boundary=\"Encrypted Boundary\"\
    \n      --Encrypted Boundary\n      Content-Type: application/moss-keys\n    \
    \  Content-ID: <21546.785188458.1@tis.com>\n      Content-Transfer-Encoding: quoted-printable\n\
    \      Version: 5\n      DEK-Info: DES-CBC,11CC89F8D90F1DFE\n      Recipient-ID:\
    \ EN,2,galvin@tis.com\n      Key-Info: RSA,AZTtlEc6xm0vjkvtVUITUh7sz+nOuOwP0tsym6CQozD9IwVIJz=\n\
    \      Y8+vIfbh5BpR0kS6prq3EGFBFR8gRMUvbgHtEKPD/4ICQ7b6ssZ7FmKhl/cJC5rV=\n   \
    \   jpb4EOUlwOXwRZ\n      --Encrypted Boundary\n      Content-Type: application/octet-stream\n\
    \      Content-Transfer-Encoding: base64\n      ZvWvtosDzRBXJzkDFFRb9Qjrgm2nDWg3zotJ3ZpExpWUG/aRJ7Vwd+PWkSfrDPJ5\n\
    \      2V/wkxwMrum6xJHZonrtyd0AvaztvriMm2zXTefzwpGG1i5zK47PBqreLA3HDTK2\n    \
    \  U6B13vzpE8wMSVefzaCTSpXRSCh08ceVEZrIYS53/CKZV2/Sga71pGNlux8MsJpY\n      Lwdj5Q3NKocg1LMngMo8yrMAe+avMjfOnhui49Xon1Gft+N5XDH/+wI9qxI9fkQv\n\
    \      NZVDlWIhCYEkxd5ke549tLkJjEqHQbgJW5C+K/uxdiD2dBt+nRCXcuO0Px3yKRyY\n    \
    \  g/9BgTf36padSHuv48xBg5YaqaEWpEzLI0Qd31vAyP23rqiPhfBn6sjhQ2KrWhiF\n      2l3TV8kQsIGHHZUkaUbqkXJe6PEdWWhwsqCFPDdkpjzQRrTuJH6xleNUFg+CG1V+\n\
    \      tL4IgMjQqm3KVojRXx8bG2auVN89NfwFswmoq4fXTrh3xyVS1VgxjKkcYI8SVVmk\n    \
    \  YjCxVviJP3zO2UzBvCoMfADtBVBz1njYETtVGDO97uT39MqL85uEgiF4E5TkOj/m\n      04+88G0/vvN/RISKJiFQJ3FyVIB/ShX9Dixl8WCx3rxwN5g2QFLiyQVulzuNhimS\n\
    \      D4ZxEo7smcTsAXUjwSLRtdjmTTutw2GmFESUaIrY81NcpQJRPNAvF0IkN6ddwL4q\n    \
    \  vzUS99vjQp15g9FUv82lHtHwhM18a9GokVG8xYOjBBsn9anp9abh4Tp/c/vpbunQ\n      UqnpV29rF4wj+8OwUOMi9ymGabBXAjw7DhNH2RdRVr1upQO896OX81VWB0LsA0cp\n\
    \      +ymxhTrEI+wCHcrsNMoRK/7zAeuAi0f1t9bN594EFlLoIrBnKEa1/OUAhMT7kG1f\n    \
    \  NkSRnc8BZswIoPyRetsTurQfD40nsVHvNwE9Jz7wbBo00gd6blPADOUYFxfW5zu6\n      ubygBqJiKPM4II2fCdNj7CptfQcoRTeguKMVPLVmFg/EINuWBFm10GqlYT7p4zhf\n\
    \      zysV/3r5LVZ1E8armTCRJ2GoYG5h+SKcytaQ0IT8S2nLPCZl1hzdajsrqHFe8omQ\n    \
    \  --Encrypted Boundary--\n"
- title: 6.6.  Protecting Audio Content
  contents:
  - "6.6.  Protecting Audio Content\n   In addition to text, the MOSS services as\
    \ defined here will protect\n   arbitrary body parts, for example, the following\
    \ audio body part:\n      Content-Type: audio/basic\n      AUDIO DATA HERE\n"
- title: 6.6.1.  Sign Audio Content
  contents:
  - "6.6.1.  Sign Audio Content\n   When signed an audio content would appear as follows,\
    \ where lines\n   with an ampersand '&' are digitally signed:\n        Content-Type:\
    \ multipart/signed;\n          protocol=\"application/moss-signature\";\n    \
    \      micalg=\"rsa-md5\"; boundary=\"Signed Boundary\"\n        --Signed Boundary\n\
    \      & Content-Type: audio/basic\n      & Content-Transfer-Encoding: base64\n\
    \      &\n      & base64(AUDIO-DATA-HERE)\n        --Signed Boundary\n       \
    \ Content-Type: application/moss-signature\n        SIGNATURE-INFORMATION-HERE\n\
    \        --Signed Boundary--\n   where AUDIO-DATA-HERE and SIGNATURE-INFORMATION-HERE\
    \ are descriptive\n   of the content that would appear in a real body part.\n"
- title: 6.6.2.  Encrypt Audio Content
  contents:
  - "6.6.2.  Encrypt Audio Content\n   When encrypted an audio content would appear\
    \ as follows, where lines\n   with an ampersand '&' are encrypted:\n        Content-Type:\
    \ multipart/encrypted;\n          protocol=\"application/moss-keys\";\n      \
    \    boundary=\"Encrypted Boundary\"\n        --Encrypted Boundary\n        Content-Type:\
    \ application/moss-keys\n        KEY-INFORMATION-HERE\n        --Encrypted Boundary\n\
    \        Content-Type: application/octet-stream\n        Content-Transfer-Encoding:\
    \ base64\n      & Content-Type: audio/basic\n      &\n      & base64(encrypted(AUDIO-DATA-HERE))\n\
    \        --Encrypted Boundary--\n   where KEY-INFORMATION-HERE and AUDIO-DATA-HERE\
    \ are descriptive of the\n   content that would appear in a real body part.\n"
- title: 7.  Observations
  contents:
  - "7.  Observations\n   The use of MIME and the framework defined by [7] exhibits\
    \ several\n   properties:\n   (1)  It allows arbitrary content types to be protected,\
    \ not just the\n        body of an RFC822 message.\n   (2)  It allows a message\
    \ to contain several body parts which may or\n        may not be protected.\n\
    \   (3)  It allows the components of a multipart or message content to be\n  \
    \      protected with different services.\n   The use of a MIME-capable user agent\
    \ makes complex nesting of\n   protected message body parts much easier.  For\
    \ example, the user can\n   separately sign and encrypt a message.  This allows\
    \ complete\n   separation of the confidentiality security service from the digital\n\
    \   signature security service.  That is, different key pairs could be\n   used\
    \ for the different services and could be protected separately.\n   This is useful\
    \ for at least two reasons.  First, some public key\n   algorithms do not support\
    \ both digital signatures and encryption; two\n   key pairs would be required\
    \ in this case.  Second, an employee's\n   company could be given access to the\
    \ (private) decryption key but not\n   the (private) signature key, thereby granting\
    \ the company the ability\n   to decrypt messages addressed to the employee in\
    \ emergencies without\n   also granting the company the ability to sign messages\
    \ as the\n   employee.\n"
- title: 8.  Comparison of MOSS and PEM Protocols
  contents:
  - "8.  Comparison of MOSS and PEM Protocols\n   MOSS differs from PEM in the following\
    \ ways.\n   (1)  When using PEM, users are required to have certificates.  When\n\
    \        using MOSS, users need only have a public/private key pair.\n   (2) \
    \ MOSS broadens the allowable name forms that users may use to\n        identify\
    \ their public keys, including arbitrary strings, email\n        addresses, or\
    \ distinguished names.\n   (3)  PEM currently only supports text-based electronic\
    \ mail messages\n        and the message text is required to be represented by\
    \ the ASCII\n        character set with \"<CR><LF>\" line delimiters.  These\n\
    \        restrictions no longer apply.\n   (4)  The PEM specification currently\
    \ requires that encryption\n        services be applied only to message bodies\
    \ that have been\n        signed.  By providing for each of the services separately,\
    \ they\n        may be applied in any order according to the needs of the\n  \
    \      requesting application.\n   (5)  MIME includes transfer encoding operations\
    \ to ensure the\n        unmodified transfer of body parts.  Therefore, unlike\
    \ PEM, MOSS\n        does not need to include these functions.\n   (6)  PEM specifies\
    \ a Proc-Type: header field to identify the type of\n        processing that was\
    \ performed on the message.  This\n        functionality is subsumed by the MIME\
    \ Content-Type: headers.\n        The Proc-Type: header also includes a decimal\
    \ number that is\n        used to distinguish among incompatible encapsulated\
    \ header field\n        interpretations which may arise as changes are made to\
    \ the PEM\n        standard.  This functionality is replaced by the Version: header\n\
    \        specified in this document.\n   (7)  PEM specifies a Content-Domain:\
    \ header, the purpose of which is\n        to describe the type of the content\
    \ which is represented within\n        a PEM message's encapsulated text.  This\
    \ functionality is\n        subsumed by the MIME Content-Type: headers.\n   (8)\
    \  The PEM specifications include a document that defines new types\n        of\
    \ PEM messages, specified by unique values used in the Proc-\n        Type: header,\
    \ to be used to request certificate and certificate\n        revocation list information.\
    \  This functionality is subsumed by\n        two new content types specified\
    \ in this document:\n        application/mosskey- request and application/mosskey-data.\n\
    \   (9)  The header fields having to do with certificates (Originator-\n     \
    \   Certificate: and Issuer-Certificate:) and CRLs (CRL:) are\n        relegated\
    \ for use only in the application/mosskey-data and\n        application/mosskey-request\
    \ content types and are no longer\n        allowed in the header portion of a\
    \ PEM signed or encrypted\n        message.  This separates key management services\
    \ from the\n        digital signature and encryption services.\n   (10) The grammar\
    \ specified here explicitly separates the header\n        fields that may appear\
    \ for the encryption and signature security\n        services.  It is the intent\
    \ of this document to specify a\n        precise expression of the allowed header\
    \ fields; there is no\n        intent to disallow the functionality of combinations\
    \ of\n        encryption and signature security found in [3].\n   (11) With the\
    \ separation of the encryption and signature security\n        services, there\
    \ is no need for a MIC-Info: field in the headers\n        associated with an\
    \ encrypted message.\n   (12) In [3], when asymmetric key management is used,\
    \ an Originator-ID\n        field is required in order to identify the private\
    \ key used to\n        sign the MIC argument in the MIC-Info: field.  Because\
    \ no MIC-\n        Info: field is associated with the encryption security service\n\
    \        under asymmetric key management, there is no requirement in that\n  \
    \      case to include an Originator-ID field.\n   (13) The protocol specified\
    \ here explicitly excludes symmetric key\n        management.\n   (14) This document\
    \ requires all data that is to be digitally signed\n        to be represented\
    \ in 7bit form.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   This entire document is about security.\n"
- title: 10.  Acknowledgements
  contents:
  - "10.  Acknowledgements\n   David H. Crocker suggested the use of a multipart structure\
    \ for the\n   MIME and PEM interaction, which has evolved into the MOSS protocol.\n\
    \   The MOSS protocol is a direct descendant of the PEM protocol.  The\n   authors\
    \ gratefully acknowledge the editors of those specification,\n   especially John\
    \ Linn and Steve Kent.  This work would not have been\n   possible had it not\
    \ been for all of the PEM developers, users, and\n   interested persons who are\
    \ always present on the PEM developers\n   mailing list and at PEM working group\
    \ meetings at IETF meetings,\n   especially, Amanda Walker, Bob Juenemann, Steve\
    \ Dusse, Jeff Thomson,\n   and Rhys Weatherly.\n"
- title: 11.  References
  contents:
  - "11.  References\n   [1] Crocker, D., \"Standard for the Format of ARPA Internet\
    \ Text\n       Messages\", STD 11, RFC 822, University of Delaware, August 1982.\n\
    \   [2] Borenstein, N., and N. Freed, \"MIME (Multipurpose Internet Mail\n   \
    \    Extension) Part One: Mechanisms for Specifying and Describing the\n     \
    \  Format of Internet Message Bodies\", RFC 1521, Bellcore and\n       Innosoft,\
    \ September 1993.\n   [3] Linn, J., \"Privacy Enhancement for Internet Electronic\
    \ Mail: Part\n       I: Message Encryption and Authentication Procedures\", RFC\
    \ 1421,\n       IAB IRTF PSRG, IETF PEM WG, February 1993.\n   [4] Kent, S., \"\
    Privacy Enhancement for Internet Electronic Mail: Part\n       II: Certificate-Based\
    \ Key Management\", RFC 1422, BBN\n       Communications, February 1993.\n   [5]\
    \ Balenson, D., \"Privacy Enhancement for Internet Electronic Mail:\n       Part\
    \ III: Algorithms, Modes, and Identifiers\", RFC 1423, Trusted\n       Information\
    \ Systems, February 1993.\n   [6] Kaliski, B., \"Privacy Enhancement for Internet\
    \ Electronic Mail:\n       Part IV: Key Certification and Related Services\",\
    \ RFC 1424, RSA\n       Laboratories, February 1993.\n   [7] Galvin, J., Murphy,\
    \ S., Crocker, S., and N. Freed, \"Security\n       Multiparts for MIME: Multipart/Signed\
    \ and Multipart/Encrypted\",\n       RFC 1847, Trusted Information Systems and\
    \ Innosoft, September\n       1995.\n   [8] The Directory -- Models.  X.501, 1988.\
    \  Developed in\n       collaboration, and technically aligned, with ISO 9594-2.\n\
    \   [9] The Directory -- Authentication Framework.  X.509, 1988.\n       Developed\
    \ in collaboration, and technically aligned, with ISO\n       9594-8.\n"
- title: 12.  Authors' Addresses
  contents:
  - "12.  Authors' Addresses\n   Steve Crocker\n   CyberCash, Inc.\n   2086 Hunters\
    \ Crest Way\n   Vienna, VA 22181\n   Phone: +1 703 620 1222\n   Fax: +1 703 391\
    \ 2651\n   EMail:  crocker@cybercash.com\n   James M. Galvin\n   Trusted Information\
    \ Systems\n   3060 Washington Road\n   Glenwood, MD  21738\n   Phone: +1 301 854\
    \ 6889\n   Fax: +1 301 854 5363\n   EMail:  galvin@tis.com\n   Sandra Murphy\n\
    \   Trusted Information Systems\n   3060 Washington Road\n   Glenwood, MD  21738\n\
    \   Phone: +1 301 854 6889\n   Fax: +1 301 854 5363\n   EMail:  murphy@tis.com\n\
    \   Ned Freed\n   Innosoft International, Inc.\n   1050 East Garvey Avenue South\n\
    \   West Covina, CA 91790\n   Phone: +1 818 919 3600\n   Fax: +1 818 919 3614\n\
    \   EMail:  ned@innosoft.com\n"
- title: 'Appendix A: Collected Grammar'
  contents:
  - "Appendix A: Collected Grammar\n   The version of the grammar in this document\
    \ is as follows:\n      <version>       ::= \"Version:\" \"5\" CRLF\n   The following\
    \ grammar tokens are used throughout this specification:\n      <encbin>     \
    \   ::= 1*<encbingrp>\n      <encbingrp>     ::= 4*4<encbinchar>\n      <encbinchar>\
    \    ::= <ALPHA> / <DIGIT> / \"+\" / \"/\" / \"=\"\n      <hexchar>       ::=\
    \ <DIGIT> / \"A\" / \"B\" / \"C\" / \"D\" / \"E\" / \"F\"\n                  \
    \        ; no lower case\n   The content of an application/moss-signature body\
    \ part is as follows:\n      <mosssig>       ::= <version> ( 1*<origasymflds>\
    \ )\n      <version>       ::= \"Version:\" \"5\" CRLF\n      <origasymflds> \
    \ ::= <origid> <micinfo>\n      <origid>        ::= \"Originator-ID:\" <id> CRLF\n\
    \      <micinfo>       ::= \"MIC-Info:\" <micalgid> \",\" <ikalgid> \",\"\n  \
    \                        <asymsignmic> CRLF\n   The content of an application/moss-keys\
    \ body part is as follows:\n      <mosskeys>      ::= <version> <dekinfo> 1*<recipasymflds>\n\
    \      <version>       ::= \"Version:\" \"5\" CRLF\n      <dekinfo>       ::=\
    \ \"DEK-Info\" \":\" <dekalgid>\n                          [ \",\" <dekparameters>\
    \ ] CRLF\n      <recipasymflds> ::= <recipid> <asymkeyinfo>\n      <recipid> \
    \      ::= \"Recipient-ID:\" <id> CRLF\n      <asymkeyinfo>   ::= \"Key-Info\"\
    \ \":\" <ikalgid> \",\" <asymencdek> CRLF\n   Identifiers are defined as follows:\n\
    \      <id>            ::= <id-subset> / <id-publickey> / <id-issuer>\n      <id-subset>\
    \     ::= <id-email> / <id-string> / <id-dname>\n      <id-email>      ::= \"\
    EN\"  \",\" <keysel> \",\" <emailstr> CRLF\n      <id-string>     ::= \"STR\"\
    \ \",\" <keysel> \",\" <string> CRLF\n      <id-dname>      ::= \"DN\"  \",\"\
    \ <keysel> \",\" <dnamestr> CRLF\n      <id-publickey>  ::= \"PK\"  \",\" <publickey>\
    \ [ \",\" <id-subset> ] CRLF\n      <id-issuer>     ::= \"IS\"  \",\" <dnamestr>\
    \  \",\" <serial> CRLF\n      <keysel>        ::= 1*<hexchar>\n              \
    \            ; hex dump of a non-null sequence of octets\n      <emailstr>   \
    \   ::= <addr-spec> / <route-addr>\n                          ; an electronic\
    \ mail address as defined by\n                          ; these two tokens from\
    \ RFC822\n      <string>        ::= ; a non-null sequence of characters\n    \
    \  <dnamestr>      ::= <encbin>\n                          ; a printably encoded,\
    \ ASN.1 encoded\n                          ; distinguished name (as defined by\
    \ the 'Name'\n                          ; production specified in X.501 [8])\n\
    \      <publickey>     ::= <encbin>\n                          ; a printably encoded,\
    \ ASN.1 encoded public\n                          ; key (as defined by the\n \
    \                         ; 'SubjectPublicKeyInfo' production specified\n    \
    \                      ; in X.509 [9])\n      <serial>        ::= 1*<hexchar>\n\
    \                          ; hex dump of a certificate serial number\n   The content\
    \ of an application/mosskey-request body part is as\n   follows:\n      <request>\
    \       ::= <version>\n                          ( <subject> / <issuer> / <certification>\
    \ )\n      <version>       ::= \"Version:\" \"5\" CRLF\n      <subject>      \
    \ ::= \"Subject:\" <id> CRLF\n      <issuer>        ::= \"Issuer:\" <id> CRLF\n\
    \      <certification> ::= \"Certification:\" <encbin> CRLF\n   The content of\
    \ an application/mosskey-data body part is as follows:\n      <mosskeydata>  \
    \ ::= <version>\n                          ( <publickeydata> / <certchain> / <crlchain>\
    \ )\n      <version>       ::= \"Version:\" \"5\" CRLF\n      <publickeydata>\
    \ ::= \"Key:\" \"PK\" \",\" <publickey> \",\"\n                          <id-subset>\
    \ CRLF\n      <certchain>     ::= <cert> *( [ <crl> ] <cert> )\n      <crlchain>\
    \      ::= 1*( <crl> [ <cert> ] )\n      <cert>          ::= \"Certificate:\"\
    \ <encbin> CRLF\n      <crl>           ::= \"CRL:\" <encbin> CRLF\n"
- title: 'Appendix B: Imported Grammar'
  contents:
  - "Appendix B: Imported Grammar\n   Options normally present in the grammar reprinted\
    \ here which are\n   illegal in MOSS are excluded in this reprinting, for the\
    \ convenience\n   of the reader.\n   The following productions are taken from\
    \ [5].  The grammar presented\n   in [5] remains the authoritative source for\
    \ these productions; they\n   are repeated here for the convenience of the reader.\n\
    \      <dekalgid>         ::= \"DES-CBC\"\n      <ikalgid>          ::= \"RSA\"\
    \n      <micalgid>         ::= \"RSA-MD2\" / \"RSA-MD5\"\n      <dekparameters>\
    \    ::= <DESCBCparameters>\n      <DESCBCparameters> ::= <IV>\n      <IV>   \
    \            ::= <hexchar16>\n      <hexchar16>        ::= 16*16<hexchar>\n  \
    \    <asymsignmic>      ::= <RSAsignmic>\n      <RSAsignmic>       ::= <encbin>\n\
    \      <asymencdek>       ::= <RSAencdek>\n      <RSAencdek>        ::= <encbin>\n\
    \   The following productions are taken from [1].  The grammar presented\n   in\
    \ [1] remains the authoritative source for these productions; they\n   are repeated\
    \ here for the convenience of the reader.\n      <route-addr>    ::= \"<\" [ <route>\
    \ ] <addr-spec> \">\"\n      <route>         ::=  1# ( \"@\" <domain> ) \":\"\
    \ ; path-relative\n      <addr-spec>     ::= <local-part> \"@\" <domain>; global\
    \ address\n      <local-part>    ::= <word> *( \".\" <word> )   ; uninterpreted\n\
    \                                                   ; case-preserved\n      <domain>\
    \        ::= <sub-domain> *( \".\" <sub-domain> )\n      <sub-domain>    ::= <domain-ref>\
    \ / <domain-literal>\n      <domain-ref>    ::= <atom>                   ; symbolic\n\
    \                                                   ; reference\n      <domain-literal>::=\
    \ \"[\" *( <dtext> / <quoted-pair> ) \"]\"\n      <dtext>         ::= <any CHAR\
    \ excluding \"[\", \"]\",\n                          \"\\\" & <CR>, & including\n\
    \                          linear-white-space>\n                             \
    \                      ; => may be folded\n      <word>          ::= <atom> /\
    \ <quoted-string>\n      <quoted-string> ::= \"\"\" *( <qtext> / <quoted-pair>\
    \ ) \"\"\"\n      <qtext>         ::= (any <CHAR> excepting \"\"\", \"\\\", and\
    \ CR,\n                           and including <linear-white-space>)\n      <quoted-pair>\
    \   ::= \"\\\" <CHAR>               ; may quote any\n                        \
    \                           ; char\n      <linear-white-space> ::= 1*( [ CRLF\
    \ ] <LWSP-char> )\n                                                   ; semantics\
    \ = SPACE\n                                                   ; CRLF => folding\n\
    \      <LWSP-char>     ::= SPACE / HTAB             ; semantics = SPACE\n    \
    \  <atom>          ::= 1*(any <CHAR>\n                          except <specials>,\
    \ SPACE and <CTL>s)\n      <CHAR>          ::= <any ASCII character>\n      <CTL>\
    \           ::= <any ASCII control character and DEL>\n      <specials>      ::=\
    \ \"(\" / \")\" / \"<\" / \">\" / \"@\"\n                          /  \",\" /\
    \ \";\" / \":\" / \"\\\" / <\">\n                          /  \".\" / \"[\" /\
    \ \"]\"\n                                                   ; Must be in quoted-\n\
    \                                                   ; string, to use\n       \
    \                                            ;  within a word.\n      <ALPHA>\
    \         ::= <any ASCII alphabetic character>\n                             \
    \                      ; (101-132, 65.-90.)\n                                \
    \                   ; (141-172, 97.-122.)\n      <DIGIT>         ::= <any ASCII\
    \ decimal digit>; (60-71, 48.-57.)\n"
