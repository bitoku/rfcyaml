- contents:
  - "            Use of the RSAES-OAEP Key Transport Algorithm in\n                 the
    Cryptographic Message Syntax (CMS)\n"
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document describes the conventions for using the RSAES-OAEP
    key\n   transport algorithm with the Cryptographic Message Syntax (CMS).  The\n
    \  CMS specifies the enveloped-data content type, which consists of an\n   encrypted
    content and encrypted content-encryption keys for one or\n   more recipients.
    \ The RSAES-OAEP key transport algorithm can be used\n   to encrypt content-encryption
    keys for intended recipients.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  2\n   2.  Enveloped-data Conventions . . . . . . . . . . . . . .
    . . . .  3\n       2.1.  EnvelopedData Fields . . . . . . . . . . . . . . . .
    . .  3\n       2.2.  KeyTransRecipientInfo Fields . . . . . . . . . . . . . .
    \ 4\n   3.  RSAES-OAEP Algorithm Identifiers and Parameters. . . . . . . .  4\n
    \  4.  Certificate Conventions. . . . . . . . . . . . . . . . . . . .  6\n   5.
    \ SMIMECapabilities Attribute Conventions. . . . . . . . . . . .  8\n   6.  Security
    Considerations. . . . . . . . . . . . . . . . . . . .  9\n   7.  IANA Considerations.
    . . . . . . . . . . . . . . . . . . . . . 11\n   8.  Intellectual Property Rights
    Statement . . . . . . . . . . . . 11\n   9.  Acknowledgments. . . . . . . . .
    . . . . . . . . . . . . . . . 11\n   10. References . . . . . . . . . . . . .
    . . . . . . . . . . . . . 11\n       10.1.  Normative References. . . . . . .
    . . . . . . . . . . . 11\n       10.2.  Informative References. . . . . . . .
    . . . . . . . . . 12\n   Appendix A. ASN.1 Module . . . . . . . . . . . . . .
    . . . . . . . 14\n   Author's Address . . . . . . . . . . . . . . . . . . . .
    . . . . . 17\n   Full Copyright Statement . . . . . . . . . . . . . . . . . .
    . . . 18\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   PKCS #1 Version 1.5 [PKCS#1v1.5] specifies a widely deployed
    variant\n   of the RSA key transport algorithm.  PKCS #1 Version 1.5 key\n   transport
    is vulnerable to adaptive chosen ciphertext attacks,\n   especially when it is
    used to for key management in interactive\n   applications.  This attack is often
    referred to as the \"Million\n   Message Attack,\" and it explained in [RSALABS]
    and [CRYPTO98].\n   Exploitation of this vulnerability, which reveals the result
    of a\n   particular RSA decryption, requires access to an oracle which will\n
    \  respond to hundreds of thousands of ciphertexts, which are\n   constructed
    adaptively in response to previously received replies\n   that provide information
    on the successes or failures of attempted\n   decryption operations.\n   The attack
    is significantly less feasible in store-and-forward\n   environments, such as
    S/MIME.  RFC 3218 [MMA] discussed the\n   countermeasures to this attack that
    are available when PKCS #1\n   Version 1.5 key transport is used in conjunction
    with the\n   Cryptographic Message Syntax (CMS) [CMS].\n   When PKCS #1 Version
    1.5 key transport is applied as an intermediate\n   encryption layer within an
    interactive request-response\n   communications environment, exploitation could
    be more feasible.\n   However, Secure Sockets Layer (SSL) [SSL] and Transport
    Layer\n   Security (TLS) [TLS] protocol implementations could include\n   countermeasures
    that detect and prevent the Million Message Attack\n   and other chosen-ciphertext
    attacks.  These countermeasures are\n   performed within the protocol level.\n
    \  In the interest of long-term security assurance, it is prudent to\n   adopt
    an improved cryptographic technique rather than embedding\n   countermeasures
    within protocols.  To this end, an updated version of\n   PKCS #1 has been published.
    \ PKCS #1 Version 2.1 [PKCS#1v2.1]\n   supersedes RFC 2313.  It preserves support
    for the PKCS #1 Version\n   1.5 encryption padding format, and it also defines
    a new one.  To\n   resolve the adaptive chosen ciphertext vulnerability, the PKCS
    #1\n   Version 2.1 specifies and recommends use of Optimal Asymmetric\n   Encryption
    Padding (OAEP) for RSA key transport.\n   This document specifies the use of RSAES-OAEP
    key transport algorithm\n   in the CMS.  The CMS can be used in either a store-and-forward
    or an\n   interactive request-response environment.\n   The CMS supports variety
    of architectures for certificate-based key\n   management, particularly the one
    defined by the PKIX working group\n   [PROFILE].  PKCS #1 Version 1.5 and PKCS
    #1 Version 2.1 require the\n   same RSA public key information.  Thus, a certified
    RSA public key\n   may be used with either RSA key transport technique.\n   The
    CMS uses ASN.1 [X.208-88], the Basic Encoding Rules (BER)\n   [X.209-88], and
    the Distinguished Encoding Rules (DER) [X.509-88].\n   Throughout this document,
    when the terms \"MUST\", \"MUST NOT\",\n   \"SHOULD\", and \"MAY\" are used in
    capital letters, their use conforms\n   to the definitions in RFC 2119 [STDWORDS].
    \ These key word\n   definitions help make the intent of standards documents as
    clear as\n   possible.  These key words are used in this document to help\n   implementers
    achieve interoperability.\n"
  title: 1.  Introduction
- contents:
  - "2.  Enveloped-data Conventions\n   The CMS enveloped-data content type consists
    of an encrypted content\n   and wrapped content-encryption keys for one or more
    recipients.  The\n   RSAES-OAEP key transport algorithm is used to wrap the\n
    \  content-encryption key for one recipient.\n   Compliant software MUST meet
    the requirements for constructing an\n   enveloped-data content type stated in
    [CMS] Section 6,\n   \"Enveloped-data Content Type\".\n   A content-encryption
    key MUST be randomly generated for each instance\n   of an enveloped-data content
    type.  The content-encryption key is\n   used to encipher the content.\n"
  - contents:
    - "2.1.  EnvelopedData Fields\n   The enveloped-data content type is ASN.1 encoded
      using the\n   EnvelopedData syntax.  The fields of the EnvelopedData syntax
      MUST be\n   populated as described in this section when RSAES-OAEP key transport\n
      \  is employed for one or more recipients.\n   The EnvelopedData version MUST
      be 0, 2, or 3.\n   The EnvelopedData originatorInfo field is not used for the
      RSAES-OAEP\n   key transport algorithm.  However, this field MAY be present
      to\n   support recipients using other key management algorithms.\n   The EnvelopedData
      recipientInfos CHOICE MUST be\n   KeyTransRecipientInfo.  See section 2.2 for
      further discussion of\n   KeyTransRecipientInfo.\n   The EnvelopedData encryptedContentInfo
      contentEncryptionAlgorithm\n   field MUST be a symmetric encryption algorithm
      identifier.\n   The EnvelopedData unprotectedAttrs MAY be present.\n"
    title: 2.1.  EnvelopedData Fields
  - contents:
    - "2.2.  KeyTransRecipientInfo Fields\n   The fields of the KeyTransRecipientInfo
      syntax MUST be populated as\n   described in this section when RSAES-OAEP key
      transport is employed\n   for one or more recipients.\n   The KeyTransRecipientInfo
      version MUST be 0 or 2.  If the\n   RecipientIdentifier uses the issuerAndSerialNumber
      alternative, then\n   the version MUST be 0.  If the RecipientIdentifier uses
      the\n   subjectKeyIdentifier alternative, then the version MUST be 2.\n   The
      KeyTransRecipientInfo RecipientIdentifier provides two\n   alternatives for
      specifying the recipient's certificate, and thereby\n   the recipient's public
      key.  The recipient's certificate MUST contain\n   a RSA public key.  The content-encryption
      key is encrypted with the\n   recipient's RSA public key.  The issuerAndSerialNumber
      alternative\n   identifies the recipient's certificate by the issuer's distinguished\n
      \  name and the certificate serial number; the subjectKeyIdentifier\n   identifies
      the recipient's certificate by the X.509\n   subjectKeyIdentifier extension
      value.\n   The KeyTransRecipientInfo keyEncryptionAlgorithm specifies use of
      the\n   RSAES-OAEP algorithm, and its associated parameters, to encrypt the\n
      \  content-encryption key for the recipient.  The key-encryption process\n   is
      described in [PKCS#1v2.1].  See section 3 of this document for the\n   algorithm
      identifier and the parameter syntax.\n   The KeyTransRecipientInfo encryptedKey
      is the result of encrypting\n   the content-encryption key in the recipient's
      RSA public key using\n   the RSAES-OAEP algorithm.  The RSA public key MUST
      be at least 1024\n   bits in length.  When using a Triple-DES [3DES] content-encryption\n
      \  key, implementations MUST adjust the parity bits to ensure odd parity\n   for
      each octet of each DES key comprising the Triple-DES key prior to\n   RSAES-OAEP
      encryption.\n"
    title: 2.2.  KeyTransRecipientInfo Fields
  title: 2.  Enveloped-data Conventions
- contents:
  - "3.  RSAES-OAEP Algorithm Identifiers and Parameters\n   The RSAES-OAEP key transport
    algorithm is the RSA encryption scheme\n   defined in RFC 3447 [PKCS#1v2.1], where
    the message to be encrypted\n   is the content-encryption key.  The algorithm
    identifier for\n   RSAES-OAEP is:\n   id-RSAES-OAEP  OBJECT IDENTIFIER  ::=  {
    iso(1) member-body(2)\n     us(840) rsadsi(113549) pkcs(1) pkcs-1(1) 7 }\n   The
    AlgorithmIdentifier parameters field MUST be present, and the\n   parameters field
    MUST contain RSAES-OAEP-params.  RSAES-OAEP-params\n   has the following syntax:\n
    \  RSAES-OAEP-params  ::=  SEQUENCE  {\n     hashFunc    [0] AlgorithmIdentifier
    DEFAULT sha1Identifier,\n     maskGenFunc [1] AlgorithmIdentifier DEFAULT mgf1SHA1Identifier,\n
    \    pSourceFunc [2] AlgorithmIdentifier DEFAULT\n                         pSpecifiedEmptyIdentifier
    \ }\n   sha1Identifier  AlgorithmIdentifier  ::=  { id-sha1, NULL }\n   mgf1SHA1Identifier
    \ AlgorithmIdentifier  ::=\n                         { id-mgf1, sha1Identifier
    }\n   pSpecifiedEmptyIdentifier  AlgorithmIdentifier ::=\n                         {
    id-pSpecified, nullOctetString }\n   nullOctetString  OCTET STRING (SIZE (0))
    \ ::=  { ''H }\n   id-sha1  OBJECT IDENTIFIER  ::=  { iso(1)\n                         identified-organization(3)
    oiw(14)\n                         secsig(3) algorithms(2) 26 }\n   pkcs-1  OBJECT
    IDENTIFIER  ::=  { iso(1) member-body(2)\n                         us(840) rsadsi(113549)
    pkcs(1) pkcs-1(1) }\n   id-mgf1  OBJECT IDENTIFIER  ::=  { pkcs-1 8 }\n   id-pSpecified
    \ OBJECT IDENTIFIER  ::=  { pkcs-1 9 }\n   The fields within RSAES-OAEP-params
    have the following meanings:\n   hashFunc identifies the one-way hash function.
    \ Implementations MUST\n   support SHA-1 [SHA1], and implementations MAY support
    other one-way\n   hash functions.  The SHA-1 algorithm identifier is comprised
    of the\n   id-sha1 object identifier and a parameter of NULL.  Implementations\n
    \  that perform encryption MUST omit the hashFunc field when SHA-1 is\n   used,
    indicating that the default algorithm was used.\n   Implementations that perform
    decryption MUST recognize both the\n   id-sha1 object identifier and an absent
    hashFunc field as an\n   indication that SHA-1 was used.\n   maskGenFunc identifies
    the mask generation function.  Implementations\n   MUST support MFG1 [PKCS#1v2.1].
    \ MFG1 requires a one-way hash\n   function, and it is identified in the parameter
    field of the MFG1\n   algorithm identifier.  Implementations MUST support SHA-1
    [SHA1], and\n   implementations MAY support other one-way hash functions.  The
    MFG1\n   algorithm identifier is comprised of the id-mgf1 object identifier\n
    \  and a parameter that contains the algorithm identifier of the one-way\n   hash
    function employed with MFG1.  The SHA-1 algorithm identifier is\n   comprised
    of the id-sha1 object identifier and a parameter of NULL.\n   Implementations
    that perform encryption MUST omit the maskGenFunc\n   field when MFG1 with SHA-1
    is used, indicating that the default\n   algorithm was used. Implementations that
    perform decryption MUST\n   recognize both the id-mgf1 and id-sha1 object identifiers
    as well as\n   an absent maskGenFunc field as an indication that MFG1 with SHA-1
    was\n   used.\n   pSourceFunc identifies the source (and possibly the value) of
    the\n   encoding parameters, commonly called P.  Implementations MUST\n   represent
    P by the algorithm identifier, id-pSpecified, indicating\n   that P is explicitly
    provided as an OCTET STRING in the parameters.\n   The default value for P is
    an empty string.  In this case, pHash in\n   EME-OAEP contains the hash of a zero
    length string.  Implementations\n   MUST support a zero length P value.  Implementations
    that perform\n   encryption MUST omit the pSourceFunc field when a zero length
    P value\n   is used, indicating that the default value was used. Implementations\n
    \  that perform decryption MUST recognize both the id-pSpecified object\n   identifier
    and an absent pSourceFunc field as an indication that a\n   zero length P value
    was used.\n"
  title: 3.  RSAES-OAEP Algorithm Identifiers and Parameters
- contents:
  - "4.  Certificate Conventions\n   RFC 3280 [PROFILE] specifies the profile for
    using X.509 Certificates\n   in Internet applications.  When a RSA public key
    will be used for\n   RSAES-OAEP key transport, the conventions specified in this
    section\n   augment RFC 3280.\n   Traditionally, the rsaEncryption object identifier
    is used to\n   identify RSA public keys.  However, to implement all of the\n   recommendations
    described in the Security Considerations section of\n   this document (see section
    6), the certificate user needs to be able\n   to determine the form of key transport
    that the RSA private key owner\n   associates with the public key.\n   The rsaEncryption
    object identifier continues to identify the subject\n   public key when the RSA
    private key owner does not wish to limit the\n   use of the public key exclusively
    to RSAES-OAEP.  In this case, the\n   rsaEncryption object identifier MUST be
    used in the algorithm field\n   within the subject public key information, and
    the parameters field\n   MUST contain NULL.\n      rsaEncryption  OBJECT IDENTIFIER
    \ ::=  { pkcs-1 1 }\n   Further discussion of the conventions associated with
    use of the\n   rsaEncryption object identifier can be found in RFC 3279 (see\n
    \  [CERTALGS], section 2.3.1).\n   When the RSA private key owner wishes to limit
    the use of the public\n   key exclusively to RSAES-OAEP, then the id-RSAES-OAEP
    object\n   identifier MUST be used in the algorithm field within the subject\n
    \  public key information, and the parameters field MUST contain\n   RSAES-OAEP-params.
    \ The id-RSAES-OAEP object identifier value and the\n   RSAES-OAEP-params syntax
    are fully described in section 3 of this\n   document.\n   Regardless of the object
    identifier used, the RSA public key is\n   encoded in the same manner in the subject
    public key information.\n   The RSA public key MUST be encoded using the type
    RSAPublicKey type:\n      RSAPublicKey ::= SEQUENCE {\n         modulus            INTEGER,
    \   -- n\n         publicExponent     INTEGER  }  -- e\n   Here, the modulus is
    the modulus n, and publicExponent is the public\n   exponent e.  The DER encoded
    RSAPublicKey is carried in the\n   subjectPublicKey BIT STRING within the subject
    public key\n   information.\n   The intended application for the key MAY be indicated
    in the key\n   usage certificate extension (see [PROFILE], section 4.2.1.3).  If
    the\n   keyUsage extension is present in a certificate that conveys an RSA\n   public
    key with the id-RSAES-OAEP object identifier, then the key\n   usage extension
    MUST contain a combination of the following values:\n      keyEncipherment; and\n
    \     dataEncipherment.\n   However, both keyEncipherment and dataEncipherment
    SHOULD NOT be\n   present.\n   When a certificate that conveys an RSA public key
    with the\n   id-RSAES-OAEP object identifier, the certificate user MUST only use\n
    \  the certified RSA public key for RSAES-OAEP operations, and the\n   certificate
    user MUST perform those operations using the parameters\n   identified in the
    certificate.\n"
  title: 4.  Certificate Conventions
- contents:
  - "5.  SMIMECapabilities Attribute Conventions\n   RFC 2633 [MSG], Section 2.5.2
    defines the SMIMECapabilities signed\n   attribute (defined as a SEQUENCE of SMIMECapability
    SEQUENCEs) to be\n   used to specify a partial list of algorithms that the software\n
    \  announcing the SMIMECapabilities can support.  When constructing a\n   signedData
    object, compliant software MAY include the\n   SMIMECapabilities signed attribute
    announcing that it supports the\n   RSAES-OAEP algorithm.\n   When all of the
    default settings are selected, the SMIMECapability\n   SEQUENCE representing RSAES-OAEP
    MUST include the id-RSAES-OAEP\n   object identifier in the capabilityID field
    and MUST include an empty\n   SEQUENCE in the parameters field.  In this case,
    RSAES-OAEP is\n   represented by the rSAES-OAEP-Default-Identifier:\n   rSAES-OAEP-Default-Identifier
    \ AlgorithmIdentifier  ::=\n                         { id-RSAES-OAEP,\n                            {
    sha1Identifier,\n                              mgf1SHA1Identifier,\n                              pSpecifiedEmptyIdentifier
    } }\n   The SMIMECapability SEQUENCE representing rSAES-OAEP-Default-\n   Identifier
    MUST be DER-encoded as the following hexadecimal string:\n      30 0D 06 09 2A
    86 48 86 F7 0D 01 01 07 30 00\n   When settings other than the defaults are selected,
    the\n   SMIMECapability SEQUENCE representing RSAES-OAEP MUST include the\n   id-RSAES-OAEP
    object identifier in the capabilityID field and MUST\n   include the RSAES-OAEP-params
    SEQUENCE that identifies the\n   non-default settings in the parameters field.\n
    \  When SHA-256 is used in the hashFunc and SHA-256 is used with MGF1 in\n   the
    maskGenFunc, the SMIMECapability SEQUENCE representing RSAES-OAEP\n   is the rSAES-OAEP-SHA256-Identifier,
    as specified in Appendix A.  The\n   SMIMECapability SEQUENCE representing rSAES-OAEP-SHA256-Identifier\n
    \  MUST be DER-encoded as the following hexadecimal string:\n      30 38 06 09
    2A 86 48 86 F7 0D 01 01 07 30 2B 30\n      0D 06 09 60 86 48 01 65 03 04 02 01
    05 00 30 1A\n      06 09 2A 86 48 86 F7 0D 01 01 08 30 0D 06 09 60\n      86 48
    01 65 03 04 02 01 05 00\n   When SHA-384 is used in the hashFunc and SHA-384 is
    used with MGF1 in\n   the maskGenFunc, the SMIMECapability SEQUENCE representing
    RSAES-OAEP\n   is the rSAES-OAEP-SHA384-Identifier, as specified in Appendix A.
    \ The\n   SMIMECapability SEQUENCE representing rSAES-OAEP-SHA384-Identifier\n
    \  MUST be DER-encoded as the following hexadecimal string:\n      30 38 06 09
    2A 86 48 86 F7 0D 01 01 07 30 2B 30\n      0D 06 09 60 86 48 01 65 03 04 02 02
    05 00 30 1A\n      06 09 2A 86 48 86 F7 0D 01 01 08 30 0D 06 09 60\n      86 48
    01 65 03 04 02 02 05 00\n   When SHA-512 is used in the hashFunc and SHA-512 is
    used with MGF1 in\n   the maskGenFunc, the SMIMECapability SEQUENCE representing
    RSAES-OAEP\n   is the rSAES-OAEP-SHA512-Identifier, as specified in Appendix A.
    \ The\n   SMIMECapability SEQUENCE representing rSAES-OAEP-SHA512-Identifier\n
    \  MUST be DER-encoded as the following hexadecimal string:\n      30 38 06 09
    2A 86 48 86 F7 0D 01 01 07 30 2B 30\n      0D 06 09 60 86 48 01 65 03 04 02 03
    05 00 30 1A\n      06 09 2A 86 48 86 F7 0D 01 01 08 30 0D 06 09 60\n      86 48
    01 65 03 04 02 03 05 00\n"
  title: 5.  SMIMECapabilities Attribute Conventions
- contents:
  - "6.  Security Considerations\n   Implementations must protect the RSA private
    key and the\n   content-encryption key.  Compromise of the RSA private key may
    result\n   in the disclosure of all messages protected with that key.\n   Compromise
    of the content-encryption key may result in disclosure of\n   the associated encrypted
    content.\n   The generation of RSA public/private key pairs relies on a random\n
    \  numbers.  The use of inadequate pseudo-random number generators\n   (PRNGs)
    to generate cryptographic keys can result in little or no\n   security.  An attacker
    may find it much easier to reproduce the PRNG\n   environment that produced the
    keys, searching the resulting small set\n   of possibilities, rather than brute
    force searching the whole key\n   space.  The generation of quality random numbers
    is difficult.  RFC\n   1750 [RANDOM] offers important guidance in this area.\n
    \  Generally, good cryptographic practice employs a given RSA key pair\n   in
    only one scheme.  This practice avoids the risk that vulnerability\n   in one
    scheme may compromise the security of the other, and may be\n   essential to maintain
    provable security.  While PKCS #1 Version 1.5\n   [PKCS#1v1.5] has been employed
    for both key transport and digital\n   signature without any known bad interactions,
    such a combined use of\n   an RSA key pair is not recommended in the future.  Therefore,
    an RSA\n   key pair used for RSAES-OAEP key transport should not also be used\n
    \  for other purposes.  For similar reasons, one RSA key pair should\n   always
    be used with the same RSAES-OAEP parameters.\n   This specification requires implementation
    to support the SHA-1\n   one-way hash function for interoperability, but support
    for other\n   one-way hash function is permitted.  At the time of this writing,
    the\n   best (known) collision attacks against SHA-1 are generic attacks with\n
    \  complexity 2^80, where 80 is one-half the bit length of the hash\n   value.
    \ When a one-way hash function is used with a digital signature\n   scheme, a
    collision attack is easily translated into a signature\n   forgery.  Therefore,
    the use of SHA-1 in a digital signature scheme\n   provides a security level of
    no more than 80 bits.  If a greater\n   level of security is desired, then a secure
    one-way hash function\n   with a longer hash value is needed.  SHA-256, SHA-384,
    and SHA-512\n   are likely candidates [SHA2].\n   The metrics for choosing a one-way
    hash function for use in digital\n   signatures do not directly apply to the RSAES-OAEP
    key transport\n   algorithm, since a collision attack on the one-way hash function
    does\n   not directly translate into an attack on the key transport algorithm,\n
    \  unless the encoding parameters P varies (in which case a collision\n   the
    hash value for different encoding parameters might be exploited).\n   Nevertheless,
    for consistency with the practice for digital signature\n   schemes, and in case
    the encoding parameters P is not the empty\n   string, it is recommended that
    the same rule of thumb be applied to\n   selection of a one-way hash function
    for use with RSAES-OAEP.  That\n   is, the one-way hash function should be selected
    so that the bit\n   length of the hash value is at least twice as long as the
    desired\n   security level in bits.\n   A 1024-bit RSA public key and SHA-1 both
    provide a security level of\n   about 80 bits.  In [NISTGUIDE], the National Institute
    of Standards\n   and Technology suggests that a security level of 80 bits is adequate\n
    \  for most applications until 2015.  If a security level greater than\n   80
    bits is needed, then a longer RSA public key and a secure one-way\n   hash function
    with a longer hash value are needed.  Again, SHA-256,\n   SHA-384, and SHA-512
    are likely candidates for such a one-way hash\n   function.  For this reason,
    the algorithm identifiers for these\n   one-way hash functions are included in
    the ASN.1 module in Appendix\n   A.\n   The same one-way hash function should
    be employed for the hashFunc\n   and the maskGenFunc, but it is not required.
    \ Using the same one-way\n   hash function reduces the potential for implementation
    errors.\n"
  title: 6.  Security Considerations
- contents:
  - "7.  IANA Considerations\n   Within the CMS, algorithms are identified by object
    identifiers\n   (OIDs).  All of the OIDs used in this document were assigned in\n
    \  Public-Key Cryptography Standards (PKCS) documents or by the National\n   Institute
    of Standards and Technology (NIST).  No further action by\n   the IANA is necessary
    for this document or any anticipated updates.\n"
  title: 7.  IANA Considerations
- contents:
  - "8.  Intellectual Property Rights Statement\n   The IETF takes no position regarding
    the validity or scope of any\n   intellectual property or other rights that might
    be claimed to\n   pertain to the implementation or use of the technology described
    in\n   this document or the extent to which any license under such rights\n   might
    or might not be available; neither does it represent that it\n   has made any
    effort to identify any such rights.  Information on the\n   IETF's procedures
    with respect to rights in standards-track and\n   standards-related documentation
    can be found in BCP-11.  Copies of\n   claims of rights made available for publication
    and any assurances of\n   licenses to be made available, or the result of an attempt
    made to\n   obtain a general license or permission for the use of such\n   proprietary
    rights by implementors or users of this specification can\n   be obtained from
    the IETF Secretariat.\n   The IETF invites any interested party to bring to its
    attention any\n   copyrights, patents or patent applications, or other proprietary\n
    \  rights which may cover technology that may be required to practice\n   this
    standard.  Please address the information to the IETF Executive\n   Director.\n"
  title: 8.  Intellectual Property Rights Statement
- contents:
  - "9.  Acknowledgments\n   This document is the result of contributions from many
    professionals.\n   I appreciate the hard work of all members of the IETF S/MIME
    Working\n   Group.  Further, I extend a special thanks to Burt Kaliski, Jakob\n
    \  Jonsson, Francois Rousseau, and Jim Schaad.\n"
  title: 9.  Acknowledgments
- contents:
  - "10.  References\n   This section provides normative and informative references.\n"
  - contents:
    - "10.1.  Normative References\n   [3DES]        American National Standards Institute.
      \ ANSI X9.52-\n                 1998, Triple Data Encryption Algorithm Modes
      of\n                 Operation.  1998.\n   [CMS]         Housley, R., \"Cryptographic
      Message Syntax (CMS)\", RFC\n                 3369, August 2002.\n   [MSG]         Ramsdell,
      B., \"S/MIME Version 3 Message Specification\",\n                 RFC 2633,
      June 1999.\n   [PKCS#1v2.1]  Jonsson, J. and B. Kaliski, \"Public-Key Cryptography\n
      \                Standards (PKCS) #1: RSA Cryptography Specifications,\n                 Version
      2.1\", RFC 3447, February 2003.\n   [PROFILE]     Housley, R., Polk, W., Ford,
      W. and D. Solo, \"Internet\n                 X.509 Public Key Infrastructure:
      Certificate and\n                 Certificate Revocation List (CRL) Profile\",
      RFC 3280,\n                 April 2002.\n   [SHA1]        National Institute
      of Standards and Technology.  FIPS\n                 Pub 180-1: \"Secure Hash
      Standard.\"  April 1995.\n   [STDWORDS]    Bradner, S., \"Key Words for Use
      in RFCs to Indicate\n                 Requirement Levels\", BCP 14, RFC 2119,
      March 1997.\n   [X.208-88]    CCITT.  Recommendation X.208: Specification of
      Abstract\n                 Syntax Notation One (ASN.1).  1988.\n   [X.209-88]
      \   CCITT.  Recommendation X.209: Specification of Basic\n                 Encoding
      Rules for Abstract Syntax Notation One\n                 (ASN.1).  1988.\n   [X.509-88]
      \   CCITT.  Recommendation X.509: The Directory -\n                 Authentication
      Framework.  1988.\n"
    title: 10.1.  Normative References
  - contents:
    - "10.2.  Informative References\n   [CERTALGS]    Bassham, L., Polk, W. and R.
      Housley, \"Algorithms and\n                 Identifiers for the Internet X.509
      Public Key\n                 Infrastructure Certificate and Certificate Revocation\n
      \                List (CRL) Profile\", RFC 3279, April 2002.\n   [CRYPTO98]
      \   Bleichenbacher, D.  \"Chosen Ciphertext Attacks Against\n                 Protocols
      Based on the RSA Encryption Standard PKCS\n                 #1\", in H. Krawczyk
      (editor), Advances in Cryptology -\n                 CRYPTO '98 Proceedings,
      Lecture Notes in Computer\n                 Science 1462 (1998), Springer-Verlag,
      pp. 1-12.\n   [MMA]         Rescorla, E., \"Preventing the Million Message Attack
      on\n                 Cryptographic Message Syntax\", RFC 3218, January 2002.\n
      \  [NISTGUIDE]   National Institute of Standards and Technology.  Second\n                 Draft:
      \"Key Management Guideline, Part 1:  General\n                 Guidance.\"  June
      2002.\n                 [http://csrc.nist.gov/encryption/kms/guideline-1.pdf]\n
      \  [PKCS#1v1.5]  Kaliski, B., \"PKCS #1: RSA Encryption, Version 1.5\",\n                 RFC
      2313, March 1998.\n   [RANDOM]      Eastlake, D., Crocker, S. and J. Schiller,
      \"Randomness\n                 Recommendations for Security\", RFC 1750, December
      1994.\n   [RSALABS]     Bleichenbacher, D., B. Kaliski, and J. Staddon.  Recent\n
      \                Results on PKCS #1: RSA Encryption Standard.  RSA\n                 Laboratories'
      Bulletin No. 7, June 26, 1998.\n                 [http://www.rsasecurity.com/rsalabs/bulletins]\n
      \  [SHA2]        National Institute of Standards and Technology.  Draft\n                 FIPS
      Pub 180-2: \"Specifications for the Secure Hash\n                 Standard.\"
      \ May 2001.\n                 [http://csrc.nist.gov/encryption/shs/dfips-180-2.pdf]\n
      \  [SSL]         Freier, A., P. Karlton, and P. Kocher.  The SSL\n                 Protocol,
      Version 3.0.  Netscape Communications.\n                 November 1996.\n                 [http://wp.netscape.com/eng/ssl3/draft302.txt]\n
      \  [TLS]         Dierks, T. and C. Allen, \"The TLS Protocol Version\n                 1.0\",
      RFC 2246, January 1999.\n"
    title: 10.2.  Informative References
  title: 10.  References
- contents:
  - "Appendix A.  ASN.1 Module\n   CMS-RSAES-OAEP\n      { iso(1) member-body(2) us(840)
    rsadsi(113549) pkcs(1)\n        pkcs-9(9) smime(16) modules(0) cms-rsaes-oaep(20)
    }\n   DEFINITIONS IMPLICIT TAGS ::= BEGIN\n   -- EXPORTS ALL --\n   IMPORTS\n
    \     AlgorithmIdentifier\n          FROM PKIX1Explicit88 -- RFC 3280\n          {
    iso(1) identified-organization(3) dod(6) internet(1)\n            security(5)
    mechanisms(5) pkix(7) id-mod(0)\n            id-pkix1-explicit(18) };\n   pkcs-1
    \ OBJECT IDENTIFIER  ::=  { iso(1) member-body(2) us(840)\n                         rsadsi(113549)
    pkcs(1) pkcs-1(1) }\n   rsaEncryption  OBJECT IDENTIFIER  ::=  { pkcs-1 1 }\n
    \  id-RSAES-OAEP  OBJECT IDENTIFIER  ::=  { pkcs-1 7 }\n   RSAES-OAEP-params  ::=
    \ SEQUENCE  {\n      hashFunc    [0] AlgorithmIdentifier DEFAULT sha1Identifier,\n
    \     maskGenFunc [1] AlgorithmIdentifier DEFAULT mgf1SHA1Identifier,\n      pSourceFunc
    [2] AlgorithmIdentifier DEFAULT\n                         pSpecifiedEmptyIdentifier
    }\n   sha1Identifier  AlgorithmIdentifier  ::=  { id-sha1, NULL }\n   sha256Identifier
    \ AlgorithmIdentifier  ::=  { id-sha256, NULL }\n   sha384Identifier  AlgorithmIdentifier
    \ ::=  { id-sha384, NULL }\n   sha512Identifier  AlgorithmIdentifier  ::=  { id-sha512,
    NULL }\n   mgf1SHA1Identifier  AlgorithmIdentifier  ::=\n                         {
    id-mgf1, sha1Identifier }\n   mgf1SHA256Identifier  AlgorithmIdentifier  ::=\n
    \                        { id-mgf1, sha256Identifier }\n   mgf1SHA384Identifier
    \ AlgorithmIdentifier  ::=\n                         { id-mgf1, sha384Identifier
    }\n   mgf1SHA512Identifier  AlgorithmIdentifier  ::=\n                         {
    id-mgf1, sha512Identifier }\n   pSpecifiedEmptyIdentifier  AlgorithmIdentifier
    ::=\n                         { id-pSpecified, nullOctetString }\n   nullOctetString
    \ OCTET STRING (SIZE (0))  ::=  { ''H }\n   id-sha1  OBJECT IDENTIFIER  ::=  {
    iso(1)\n                         identified-organization(3) oiw(14)\n                         secsig(3)
    algorithms(2) 26 }\n   id-sha256  OBJECT IDENTIFIER  ::=  { joint-iso-itu-t(2)\n
    \                        country(16) us(840) organization(1) gov(101)\n                         csor(3)
    nistalgorithm(4) hashalgs(2) 1 }\n   id-sha384  OBJECT IDENTIFIER  ::=  { joint-iso-itu-t(2)\n
    \                        country(16) us(840) organization(1) gov(101)\n                         csor(3)
    nistalgorithm(4) hashalgs(2) 2 }\n   id-sha512  OBJECT IDENTIFIER  ::=  { joint-iso-itu-t(2)\n
    \                        country(16) us(840) organization(1) gov(101)\n                         csor(3)
    nistalgorithm(4) hashalgs(2) 3 }\n   id-mgf1  OBJECT IDENTIFIER  ::=  { pkcs-1
    8 }\n   id-pSpecified  OBJECT IDENTIFIER  ::=  { pkcs-1 9 }\n   rSAES-OAEP-Default-Identifier
    \ AlgorithmIdentifier  ::=\n                         { id-RSAES-OAEP,\n                            {
    sha1Identifier,\n                              mgf1SHA1Identifier,\n                              pSpecifiedEmptyIdentifier
    } }\n   rSAES-OAEP-SHA256-Identifier  AlgorithmIdentifier  ::=\n                         {
    id-RSAES-OAEP,\n                            { sha256Identifier,\n                              mgf1SHA256Identifier,\n
    \                             pSpecifiedEmptyIdentifier } }\n   rSAES-OAEP-SHA384-Identifier
    \ AlgorithmIdentifier  ::=\n                         { id-RSAES-OAEP,\n                            {
    sha384Identifier,\n                              mgf1SHA384Identifier,\n                              pSpecifiedEmptyIdentifier
    } }\n   rSAES-OAEP-SHA512-Identifier  AlgorithmIdentifier  ::=\n                         {
    id-RSAES-OAEP,\n                            { sha512Identifier,\n                              mgf1SHA512Identifier,\n
    \                             pSpecifiedEmptyIdentifier } }\n   END\n"
  title: Appendix A.  ASN.1 Module
- contents:
  - "Author's Address\n   Russell Housley\n   Vigil Security, LLC\n   918 Spring Knoll
    Drive\n   Herndon, VA 20170\n   USA\n   EMail: housley@vigilsec.com\n"
  title: Author's Address
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2003).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assignees.\n   This document and the
    information contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET
    SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES,
    EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE
    OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
