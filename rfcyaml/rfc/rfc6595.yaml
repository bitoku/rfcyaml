- contents:
  - ''
  title: __initial_text__
- contents:
  - "A Simple Authentication and Security Layer (SASL) and GSS-API Mechanism\n           for
    the Security Assertion Markup Language (SAML)\n"
  title: A Simple Authentication and Security Layer (SASL) and GSS-API Mechanism
- contents:
  - "Abstract\n   The Security Assertion Markup Language (SAML) has found its usage
    on\n   the Internet for Web Single Sign-On.  The Simple Authentication and\n   Security
    Layer (SASL) and the Generic Security Service Application\n   Program Interface
    (GSS-API) are application frameworks to generalize\n   authentication.  This memo
    specifies a SASL mechanism and a GSS-API\n   mechanism for SAML 2.0 that allows
    the integration of existing SAML\n   Identity Providers with applications using
    SASL and GSS-API.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6595.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \     1.1. Terminology ................................................4\n      1.2.
    Applicability ..............................................4\n   2. Authentication
    Flow .............................................5\n   3. SAML SASL Mechanism
    Specification ...............................7\n      3.1. Initial Response ...........................................8\n
    \     3.2. Authentication Request .....................................8\n      3.3.
    Outcome and Parameters .....................................9\n   4. SAML GSS-API
    Mechanism Specification ...........................10\n      4.1. GSS-API Principal
    Name Types for SAML .....................11\n   5. Examples .......................................................11\n
    \     5.1. XMPP ......................................................11\n      5.2.
    IMAP ......................................................15\n   6. Security
    Considerations ........................................17\n      6.1. Man-in-the-Middle
    and Tunneling Attacks ...................17\n      6.2. Binding SAML Subject Identifiers
    to Authorization\n           Identities ................................................17\n
    \     6.3. User Privacy ..............................................18\n      6.4.
    Collusion between RPs .....................................18\n      6.5. Security
    Considerations Specific to GSS-API ...............18\n   7. IANA Considerations
    ............................................18\n      7.1. IANA Mech-Profile .........................................18\n
    \     7.2. IANA OID ..................................................19\n   8.
    References .....................................................19\n      8.1.
    Normative References ......................................19\n      8.2. Informative
    References ....................................21\n   Appendix A. Acknowledgments
    .......................................22\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Security Assertion Markup Language (SAML) 2.0 [OASIS-SAMLv2-CORE]
    is\n   a set of specifications that provide various means for a user to be\n   identified
    to a Relying Party (RP) through the exchange of (typically\n   signed) assertions
    issued by an Identity Provider (IdP).  It includes\n   a number of protocols,
    protocol bindings [OASIS-SAMLv2-BIND], and\n   interoperability profiles [OASIS-SAMLv2-PROF]
    designed for different\n   use cases.\n   The Simple Authentication and Security
    Layer (SASL) [RFC4422] is a\n   generalized mechanism for identifying and authenticating
    a user and\n   for optionally negotiating a security layer for subsequent protocol\n
    \  interactions.  SASL is used by application protocols like IMAP\n   [RFC3501],
    the Post Office Protocol (POP) [RFC1939], and the\n   Extensible Message and Presence
    Protocol (XMPP) [RFC6120].  The\n   effect is to make modular authentication,
    so that newer\n   authentication mechanisms can be added as needed.  This memo\n
    \  specifies just such a mechanism.\n   The Generic Security Service Application
    Program Interface (GSS-API)\n   [RFC2743] provides a framework for applications
    to support multiple\n   authentication mechanisms through a unified programming
    interface.\n   This document defines a pure SASL mechanism for SAML, but it conforms\n
    \  to the new bridge between SASL and the GSS-API called GS2 [RFC5801].\n   This
    means that this document defines both a SASL mechanism and a\n   GSS-API mechanism.
    \ The GSS-API interface is OPTIONAL for SASL\n   implementers, and the GSS-API
    considerations can be avoided in\n   environments that use SASL directly without
    GSS-API.\n   As currently envisioned, this mechanism enables interworking between\n
    \  SASL and SAML in order to assert the identity of the user and other\n   attributes
    to RPs.  As such, while servers (as RPs) will advertise\n   SASL mechanisms (including
    SAML), clients will select the SAML SASL\n   mechanism as their SASL mechanism
    of choice.\n   The SAML mechanism described in this memo aims to reuse the Web\n
    \  Browser Single Sign-On (SSO) profile defined in Section 4.1 of the\n   SAML
    2.0 profiles specification [OASIS-SAMLv2-PROF] to the maximum\n   extent and therefore
    does not establish a separate authentication,\n   integrity, and confidentiality
    mechanism.  The mechanism assumes that\n   a security layer, such as Transport
    Layer Security (TLS) [RFC5246],\n   will continue to be used.  This specification
    is appropriate for use\n   when a browser instance is available.  In the absence
    of a browser\n   instance, SAML profiles that don't require a browser, such as
    the\n   Enhanced Client or Proxy profile (as defined in Section 4.2 of\n   [OASIS-SAMLv2-PROF],
    may be used, but that is outside the scope of\n   this specification.\n   Figure
    1 describes the interworking between SAML and SASL: this\n   document requires
    enhancements to the RP (the SASL server) and to the\n   client, as the two SASL
    communication end points, but no changes to\n   the SAML IdP are necessary.  To
    accomplish this goal, some indirect\n   messaging is tunneled within SASL, and
    some use of external methods\n   is made.\n                                       +-----------+\n
    \                                      |           |\n                                      >|
    \ Relying  |\n                                     / |  Party    |\n                                   //
    \ |           |\n                                 //    +-----------+\n                      SAML/
    \   //            ^\n                      HTTPS  //           +--|--+\n                           //
    \            | S|  |\n                          /             S | A|  |\n                        //
    \             A | M|  |\n                      //                S | L|  |\n                    //
    \                 L |  |  |\n                  //                      |  |  |\n
    \               </                        +--|--+\n         +------------+                      v\n
    \        |            |                 +----------+\n         |  SAML      |
    \    HTTPS       |          |\n         |  Identity  |<--------------->|  Client
    \ |\n         |  Provider  |                 |          |\n         +------------+
    \                +----------+\n                    Figure 1: Interworking Architecture\n"
  - contents:
    - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
      \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and
      \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC
      2119 [RFC2119].\n   The reader is assumed to be familiar with the terms used
      in the\n   SAML 2.0 core specification [OASIS-SAMLv2-CORE].\n"
    title: 1.1.  Terminology
  - contents:
    - "1.2.  Applicability\n   Because this mechanism transports information that
      should not be\n   controlled by an attacker, the SAML mechanism MUST only be
      used over\n   channels protected by TLS, or over similar integrity-protected
      and\n   authenticated channels.  In addition, when TLS is used, the client\n
      \  MUST successfully validate the server's certificate ([RFC5280],\n   [RFC6125]).\n
      \  Note: An Intranet does not constitute such an integrity-protected and\n   authenticated
      channel!\n"
    title: 1.2.  Applicability
  title: 1.  Introduction
- contents:
  - "2.  Authentication Flow\n   While SAML itself is merely a markup language, its
    common use case\n   these days is with HTTP [RFC2616] or HTTPS [RFC2818] and HTML\n
    \  [W3C-REC-HTML401].  What follows is a typical flow:\n   1.  The browser requests
    a resource of an RP (via an HTTP request).\n   2.  The RP redirects the browser
    via an HTTP redirect (as described\n       in Section 10.3 of [RFC2616]) to the
    IdP or an IdP discovery\n       service.  When it does so, it includes the following
    parameters:\n       (1) an authentication request that contains the name of the\n
    \      resource being requested, (2) a browser cookie, and (3) a return\n       URL
    as specified in Section 3.1 of [OASIS-SAMLv2-PROF].\n   3.  The user authenticates
    to the IdP and perhaps authorizes the\n       release of user attributes to the
    RP.\n   4.  In its authentication response, the IdP redirects (via an HTTP\n       redirect)
    the browser back to the RP with an authentication\n       assertion (stating that
    the IdP vouches that the subject has\n       successfully authenticated), optionally
    along with some\n       additional attributes.\n   5.  The RP now has sufficient
    identity information to approve access\n       to the resource or not, and acts
    accordingly.  The authentication\n       is concluded.\n   When considering this
    flow in the context of SASL, we note that while\n   the RP and the client both
    must change their code to implement this\n   SASL mechanism, the IdP can remain
    untouched.  The RP already has\n   some sort of session (probably a TCP connection)
    established with the\n   client.  However, it may be necessary to redirect a SASL
    client to\n   another application or handler.  The steps are as follows:\n   1.
    \ The SASL server (RP) advertises support for the SASL SAML20\n       mechanism
    to the client.\n   2.  The client initiates a SASL authentication with SAML20
    and sends\n       a domain name that allows the SASL server to determine the\n
    \      appropriate IdP.\n   3.  The SASL server transmits an authentication request
    encoded using\n       a Uniform Resource Identifier (URI) as described in RFC
    3986\n       [RFC3986] and an HTTP redirect to the IdP corresponding to the\n
    \      domain.\n   4.  The SASL client now sends a response consisting of \"=\".\n
    \      Authentication continues via the normal SAML flow, and the SASL\n       server
    will receive the answer to the challenge out of band from\n       the SASL conversation.\n
    \  5.  At this point, the SASL client MUST construct a URL containing\n       the
    content received in the previous message from the SASL\n       server.  This URL
    is transmitted to the IdP either by the SASL\n       client application or an
    appropriate handler, such as a browser.\n   6.  Next, the user authenticates to
    the IdP.  The manner in which the\n       end user is authenticated to the IdP,
    and any policies\n       surrounding such authentication, are out of scope for
    SAML and\n       hence for this document.  This step happens out of band from\n
    \      SASL.\n   7.  The IdP will convey information about the success or failure
    of\n       the authentication back to the SASL server (RP) in the form of an\n
    \      authentication statement or failure, using an indirect response\n       via
    the client browser or the handler (and with an external\n       browser, client
    control should be passed back to the SASL\n       client).  This step happens
    out of band from SASL.\n   8.  The SASL server sends an appropriate SASL response
    to the client.\n   Please note: What is described here is the case in which the
    client\n   has not previously authenticated.  It is possible that the client\n
    \  already holds a valid SAML authentication token so that the user does\n   not
    need to be involved in the process anymore, but that would still\n   be external
    to SASL.  This is classic Web Single Sign-On, in which\n   the Web Browser client
    presents the authentication token (cookie) to\n   the RP without renewed user
    authentication at the IdP.\n   With all of this in mind, the flow appears as follows
    in Figure 2:\n            SASL Serv.       Client          IdP\n               |>-----(1)----->|
    \             | Advertisement\n               |               |              |\n
    \              |<-----(2)-----<|              | Initiation\n               |               |
    \             |\n               |>-----(3)----->|              | Authentication
    Request\n               |               |              |\n               |<-----(4)-----<|
    \             | Response of \"=\"\n               |               |              |\n
    \              |               |<- -(5,6) - ->| Client<>IdP\n               |
    \              |              | Authentication\n               |               |
    \             |\n               |<- - - - - - - - - - -(7)- - -| Authentication
    Statement\n               |               |              |\n               |>-----(8)----->|
    \             | SASL Completion with\n               |               |              |
    Status\n               |               |              |\n          ----- = SASL\n
    \         - - - = HTTP or HTTPS (external to SASL)\n                       Figure
    2: Authentication Flow\n"
  title: 2.  Authentication Flow
- contents:
  - "3.  SAML SASL Mechanism Specification\n   This section specifies the details
    of the SAML SASL mechanism.  See\n   Section 5 of [RFC4422] for additional details.\n
    \  The name of this mechanism is \"SAML20\".  The mechanism is capable of\n   transferring
    an authorization identity (via the \"gs2-header\").  The\n   mechanism does not
    offer a security layer.\n   The mechanism is client-first.  The first mechanism
    message from the\n   client to the server is the \"initial-response\".  As described
    in\n   [RFC4422], if the application protocol does not support sending a\n   client
    response together with the authentication request, the server\n   will send an
    empty server challenge to let the client begin.  The\n   second mechanism message
    is from the server to the client, containing\n   the SAML \"authentication-request\".
    \ The third mechanism message is\n   from the client to the server and is the
    fixed message consisting of\n   \"=\".  The fourth mechanism message is from the
    server to the client,\n   indicating the SASL mechanism outcome.\n"
  - contents:
    - "3.1.  Initial Response\n   A client initiates a SAML20 authentication with
      SASL by sending the\n   GS2 header followed by the Identity Provider identifier
      (message 2 in\n   Figure 2) and is defined using ABNF [RFC5234] as follows:\n
      \       initial-response = gs2-header IdP-Identifier\n        IdP-Identifier
      = domain ; domain name with corresponding IdP\n   The gs2-header is used as
      follows:\n   -  The \"gs2-nonstd-flag\" MUST NOT be present.\n   -  The \"gs2-cb-flag\"
      MUST be set to \"n\" because channel-binding\n      [RFC5056] data cannot be
      integrity protected by the SAML\n      negotiation.  (Note: In theory, channel-binding
      data could be\n      inserted in the SAML flow by the client and verified by
      the\n      server, but that is currently not supported in SAML.)\n   -  The
      \"gs2-authzid\" carries the optional authorization identity as\n      specified
      in [RFC5801] (not to be confused with the\n      IdP-Identifier).\n   A domain
      name is either a \"traditional domain name\" as described in\n   [RFC1035] or
      an \"internationalized domain name\" as described in\n   [RFC5890].  Clients
      and servers MUST treat the IdP-Identifier as a\n   domain name slot [RFC5890].
      \ They also SHOULD support\n   internationalized domain names (IDNs) in the
      IdP-Identifier field; if\n   they do so, all of the domain name's labels MUST
      be A-labels or\n   NR-LDH labels [RFC5890].  If necessary, internationalized
      labels MUST\n   be converted from U-labels to A-labels by using the Punycode
      encoding\n   [RFC3492] for A-labels prior to sending them to the SASL server,
      as\n   described in the protocol specification for Internationalized Domain\n
      \  Names in Applications [RFC5891].\n"
    title: 3.1.  Initial Response
  - contents:
    - "3.2.  Authentication Request\n   The SASL server transmits to the SASL client
      a URI that redirects the\n   SAML client to the IdP (corresponding to the domain
      that the user\n   provided), with a SAML authentication request as one of the\n
      \  parameters (message 3 in Figure 2) using the following ABNF:\n        authentication-request
      = URI\n   The URI is specified in [RFC3986] and is encoded according to\n   Section
      3.4 (\"HTTP Redirect Binding\") of the SAML 2.0 bindings\n   specification [OASIS-SAMLv2-BIND].
      \ The SAML authentication request\n   is encoded according to Section 3.4 (\"Authentication
      Request\n   Protocol\") of [OASIS-SAMLv2-CORE].  Should the client support\n
      \  Internationalized Resource Identifiers (IRIs) [RFC3987], it MUST\n   first
      map the IRI to a URI before transmitting it to the server, as\n   defined in
      Section 3.1 of [RFC3987].\n   Note: The SASL server may have a static mapping
      of domain to\n   corresponding IdP or, alternatively, a DNS-lookup mechanism
      could be\n   envisioned, but that is out of scope for this document.\n   Note:
      While the SASL client MAY sanity-check the URI it received,\n   ultimately it
      is the SAML IdP that will be validated by the SAML\n   client; this topic is
      out of scope for this document.\n   The client then sends the authentication
      request via an HTTP GET\n   (sent over a server-authenticated TLS channel) to
      the IdP, as if\n   redirected to do so from an HTTP server and in accordance
      with the\n   Web Browser SSO profile, as described in Section 4.1 of\n   [OASIS-SAMLv2-PROF]
      (messages 5 and 6 in Figure 2).\n   The client handles both user authentication
      to the IdP and\n   confirmation or rejection of the authentication of the RP
      (out of\n   scope for this document).\n   After all authentication has been
      completed by the IdP, the IdP will\n   send a redirect message to the client
      in the form of a URI\n   corresponding to the RP as specified in the authentication
      request\n   (\"AssertionConsumerServiceURL\") and with the SAML response as
      one of\n   the parameters (message 7 in Figure 2).\n   Please note: This means
      that the SASL server needs to implement a\n   SAML RP.  Also, the SASL server
      needs to correlate the session it has\n   with the SASL client with the appropriate
      SAML authentication result.\n   It can do so by comparing the ID of the SAML
      authentication request\n   it has issued with the one it receives in the SAML
      authentication\n   statement.\n"
    title: 3.2.  Authentication Request
  - contents:
    - "3.3.  Outcome and Parameters\n   The SASL server (in its capacity as a SAML
      RP) now validates the SAML\n   authentication response it received from the
      SAML client via HTTP or\n   HTTPS.\n   The outcome of that validation by the
      SASL server constitutes a SASL\n   mechanism outcome and therefore (as stated
      in [RFC4422]) SHALL be\n   used to set state in the server accordingly, and
      it SHALL be used by\n   the server to report that state to the SASL client,
      as described in\n   [RFC4422], Section 3.6 (message 8 in Figure 2).\n"
    title: 3.3.  Outcome and Parameters
  title: 3.  SAML SASL Mechanism Specification
- contents:
  - "4.  SAML GSS-API Mechanism Specification\n   This section and its sub-sections
    are not required for SASL\n   implementors, but this section MUST be observed
    to implement the\n   GSS-API mechanism discussed below.\n   This section specifies
    a GSS-API mechanism that, when used via the\n   GS2 bridge to SASL, behaves like
    the SASL mechanism defined in this\n   document.  Thus, it can loosely be said
    that the SAML SASL mechanism\n   is also a GSS-API mechanism.  The SAML user takes
    the role of the\n   GSS-API Initiator, and the SAML RP takes the role of the GSS-API\n
    \  Acceptor.  The SAML IdP does not have a role in GSS-API and is\n   considered
    an internal matter for the SAML mechanism.  The messages\n   are the same, but\n
    \  a)  the GS2 header on the client's first message and channel-binding\n       data
    are excluded when SAML is used as a GSS-API mechanism, and\n   b)  the initial
    context token header (Section 3.1 of [RFC2743]) is\n       prefixed to the client's
    first authentication message (context\n       token).\n   The GSS-API mechanism
    OID for SAML is 1.3.6.1.5.5.17 (see Section 7.2\n   for more information).  The
    DER encoding of the OID is\n   0x2b 0x06 0x01 0x05 0x05 0x11.\n   SAML20 security
    contexts MUST have the mutual_state flag\n   (GSS_C_MUTUAL_FLAG) set to TRUE.
    \ SAML does not support credential\n   delegation; therefore, SAML security contexts
    MUST have the\n   deleg_state flag (GSS_C_DELEG_FLAG) set to FALSE.\n   The mutual
    authentication property of this mechanism relies on\n   successfully comparing
    the TLS server's identity with the negotiated\n   target name.  Since the TLS
    channel is managed by the application\n   outside of the GSS-API mechanism, the
    mechanism itself is unable to\n   confirm the name, while the application is able
    to perform this\n   comparison for the mechanism.  For this reason, applications
    MUST\n   match the TLS server's identity with the target name, as discussed in\n
    \  [RFC6125].  More precisely, to pass identity validation, the client\n   uses
    the securely negotiated targ_name as the reference identifier\n   and matches
    it to the DNS-ID of the server's certificate, and it MUST\n   reject the connection
    if there is a mismatch.  For compatibility with\n   deployed certificate hierarchies,
    the client MAY also perform a\n   comparison with the Common Name ID (CN-ID) when
    there is no DNS-ID\n   present.  Wildcard matching is permitted.  The targ_name
    reference\n   identifier is a \"traditional domain names\"; thus, the comparison
    is\n   made using case-insensitive ASCII comparison.\n   The SAML mechanism does
    not support per-message tokens or the\n   GSS_Pseudo_random() function [RFC4401].\n"
  - contents:
    - "4.1.  GSS-API Principal Name Types for SAML\n   SAML supports standard generic
      name syntaxes for acceptors such as\n   GSS_C_NT_HOSTBASED_SERVICE (see [RFC2743],
      Section 4.1).  SAML\n   supports only a single name type for initiators: GSS_C_NT_USER_NAME.\n
      \  GSS_C_NT_USER_NAME is the default name type for SAML.  The query,\n   display,
      and exported name syntaxes for SAML principal names are all\n   the same.  There
      are no SAML-specific name syntaxes -- applications\n   should use generic GSS-API
      name types, such as GSS_C_NT_USER_NAME and\n   GSS_C_NT_HOSTBASED_SERVICE (see
      [RFC2743] Section 4).  The exported\n   name token, of course, conforms to [RFC2743],
      Section 3.2.\n"
    title: 4.1.  GSS-API Principal Name Types for SAML
  title: 4.  SAML GSS-API Mechanism Specification
- contents:
  - '5.  Examples

    '
  - contents:
    - "5.1.  XMPP\n   Suppose the user has an identity at the SAML IdP saml.example.org
      and\n   a Jabber Identifier (JID) \"somenode@example.com\" and wishes to\n   authenticate
      his XMPP [RFC6120] connection to xmpp.example.com.  The\n   authentication on
      the wire would then look something like the\n   following:\n   Step 1: Client
      initiates stream to server:\n   <stream:stream xmlns='jabber:client'\n   xmlns:stream='http://etherx.jabber.org/streams'\n
      \  to='example.com' version='1.0'>\n   Step 2: Server responds with a stream
      tag sent to client:\n   <stream:stream\n   xmlns='jabber:client' xmlns:stream='http://etherx.jabber.org/streams'\n
      \  id='some_id' from='example.com' version='1.0'>\n   Step 3: Server informs
      client of available authentication mechanisms:\n   <stream:features>\n    <mechanisms
      xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>\n     <mechanism>DIGEST-MD5</mechanism>\n
      \    <mechanism>PLAIN</mechanism>\n     <mechanism>SAML20</mechanism>\n    </mechanisms>\n
      \  </stream:features>\n   Step 4: Client selects an authentication mechanism
      and provides the\n   initial client response -- containing the gs2-header and
      domain --\n   that has been encoded in base64 according to Section 4 of [RFC4648]:\n
      \   <auth xmlns='urn:ietf:params:xml:ns:xmpp-sasl' mechanism='SAML20'>\n    biwsZXhhbXBsZS5vcmc=</auth>\n
      \  The decoded string is\n      n,,example.org\n   Step 5: Server sends a base64-encoded
      challenge to client in the form\n   of an HTTP redirect to the SAML IdP corresponding
      to example.org\n   (https://saml.example.org) with the SAML authentication request
      as\n   specified in the redirection URL:\n    aHR0cHM6Ly9zYW1sLmV4YW1wbGUub3JnL1NBTUwvQnJvd3Nlcj9TQU1MUmVx\n
      \   dWVzdD1QSE5oYld4d09rRjFkR2h1VW1WeGRXVnpkQ0I0Yld4dWN6cHpZVzFz\n    Y0QwaWRYSnVPbTloYzJsek9tNWhiV1Z6T25Sak9sTkJUVXc2TWk0d09uQnli\n
      \   M1J2WTI5c0lnMEtJQ0FnSUVsRVBTSmZZbVZqTkRJMFptRTFNVEF6TkRJNE9U\n    QTVZVE13Wm1ZeFpUTXhNVFk0TXpJM1pqYzVORGMwT1RnMElpQldaWEp6YVc5\n
      \   dVBTSXlMakFpRFFvZ0lDQWdTWE56ZFdWSmJuTjBZVzUwUFNJeU1EQTNMVEV5\n    TFRFd1ZERXhPak01T2pNMFdpSWdSbTl5WTJWQmRYUm9iajBpWm1Gc2MyVWlE\n
      \   UW9nSUNBZ1NYTlFZWE56YVhabFBTSm1ZV3h6WlNJTkNpQWdJQ0JRY205MGIy\n    TnZiRUpwYm1ScGJtYzlJblZ5YmpwdllYTnBjenB1WVcxbGN6cDBZenBUUVUx\n
      \   TU9qSXVNRHBpYVc1a2FXNW5jenBJVkZSUUxWQlBVMVFpRFFvZ0lDQWdRWE56\n    WlhKMGFXOXVRMjl1YzNWdFpYSlRaWEoyYVdObFZWSk1QUTBLSUNBZ0lDQWdJ\n
      \   Q0FpYUhSMGNITTZMeTk0YlhCd0xtVjRZVzF3YkdVdVkyOXRMMU5CVFV3dlFY\n    TnpaWEowYVc5dVEyOXVjM1Z0WlhKVFpYSjJhV05sSWo0TkNpQThjMkZ0YkRw\n
      \   SmMzTjFaWElnZUcxc2JuTTZjMkZ0YkQwaWRYSnVPbTloYzJsek9tNWhiV1Z6\n    T25Sak9sTkJUVXc2TWk0d09tRnpjMlZ5ZEdsdmJpSStEUW9nSUNBZ0lHaDBk\n
      \   SEJ6T2k4dmVHMXdjQzVsZUdGdGNHeGxMbU52YlEwS0lEd3ZjMkZ0YkRwSmMz\n    TjFaWEkrRFFvZ1BITmhiV3h3T2s1aGJXVkpSRkJ2YkdsamVTQjRiV3h1Y3pw\n
      \   ellXMXNjRDBpZFhKdU9tOWhjMmx6T201aGJXVnpPblJqT2xOQlRVdzZNaTR3\n    T25CeWIzUnZZMjlzSWcwS0lDQWdJQ0JHYjNKdFlYUTlJblZ5YmpwdllYTnBj\n
      \   enB1WVcxbGN6cDBZenBUUVUxTU9qSXVNRHB1WVcxbGFXUXRabTl5YldGME9u\n    Qmxjbk5wYzNSbGJuUWlEUW9nSUNBZ0lGTlFUbUZ0WlZGMVlXeHBabWxsY2ow\n
      \   aWVHMXdjQzVsZUdGdGNHeGxMbU52YlNJZ1FXeHNiM2REY21WaGRHVTlJblJ5\n    ZFdVaUlDOCtEUW9nUEhOaGJXeHdPbEpsY1hWbGMzUmxaRUYxZEdodVEyOXVk\n
      \   R1Y0ZEEwS0lDQWdJQ0I0Yld4dWN6cHpZVzFzY0QwaWRYSnVPbTloYzJsek9t\n    NWhiV1Z6T25Sak9sTkJUVXc2TWk0d09uQnliM1J2WTI5c0lpQU5DaUFnSUNB\n
      \   Z0lDQWdRMjl0Y0dGeWFYTnZiajBpWlhoaFkzUWlQZzBLSUNBOGMyRnRiRHBC\n    ZFhSb2JrTnZiblJsZUhSRGJHRnpjMUpsWmcwS0lDQWdJQ0FnZUcxc2JuTTZj\n
      \   MkZ0YkQwaWRYSnVPbTloYzJsek9tNWhiV1Z6T25Sak9sTkJUVXc2TWk0d09t\n    RnpjMlZ5ZEdsdmJpSStEUW9nb0NBZ0lDQjFjbTQ2YjJGemFYTTZibUZ0WlhN\n
      \   NmRHTTZVMEZOVERveUxqQTZZV002WTJ4aGMzTmxjenBRWVhOemQyOXlaRkJ5\n    YjNSbFkzUmxaRlJ5WVc1emNHOXlkQTBLSUNBOEwzTmhiV3c2UVhWMGFHNURi\n
      \   MjUwWlhoMFEyeGhjM05TWldZK0RRb2dQQzl6WVcxc2NEcFNaWEYxWlhOMFpX\n    UkJkWFJvYmtOdmJuUmxlSFErSUEwS1BDOXpZVzFzY0RwQmRYUm9ibEpsY1hW\n
      \   bGMzUSs=\n   The decoded challenge is as follows:\n    https://saml.example.org/SAML/Browser?SAMLRequest=PHNhbWxwOk\n
      \   F1dGhuUmVxdWVzdCB4bWxuczpzYW1scD0idXJuOm9hc2lzOm5hbWVzOnRjOl\n    NBTUw6Mi4wOnByb3RvY29sIg0KICAgIElEPSJfYmVjNDI0ZmE1MTAzNDI4OT\n
      \   A5YTMwZmYxZTMxMTY4MzI3Zjc5NDc0OTg0IiBWZXJzaW9uPSIyLjAiDQogIC\n    AgSXNzdWVJbnN0YW50PSIyMDA3LTEyLTEwVDExOjM5OjM0WiIgRm9yY2VBdX\n
      \   Robj0iZmFsc2UiDQogICAgSXNQYXNzaXZlPSJmYWxzZSINCiAgICBQcm90b2\n    NvbEJpbmRpbmc9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpiaW5kaW\n
      \   5nczpIVFRQLVBPU1QiDQogICAgQXNzZXJ0aW9uQ29uc3VtZXJTZXJ2aWNlVV\n    JMPQ0KICAgICAgICAiaHR0cHM6Ly94bXBwLmV4YW1wbGUuY29tL1NBTUwvQX\n
      \   NzZXJ0aW9uQ29uc3VtZXJTZXJ2aWNlIj4NCiA8c2FtbDpJc3N1ZXIgeG1sbn\n    M6c2FtbD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbi\n
      \   I+DQogICAgIGh0dHBzOi8veG1wcC5leGFtcGxlLmNvbQ0KIDwvc2FtbDpJc3\n    N1ZXI+DQogPHNhbWxwOk5hbWVJRFBvbGljeSB4bWxuczpzYW1scD0idXJuOm\n
      \   9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIg0KICAgICBGb3JtYX\n    Q9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpuYW1laWQtZm9ybWF0On\n
      \   BlcnNpc3RlbnQiDQogICAgIFNQTmFtZVF1YWxpZmllcj0ieG1wcC5leGFtcG\n    xlLmNvbSIgQWxsb3dDcmVhdGU9InRydWUiIC8+DQogPHNhbWxwOlJlcXVlc3\n
      \   RlZEF1dGhuQ29udGV4dA0KICAgICB4bWxuczpzYW1scD0idXJuOm9hc2lzOm\n    5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIiANCiAgICAgICAgQ29tcGFyaX\n
      \   Nvbj0iZXhhY3QiPg0KICA8c2FtbDpBdXRobkNvbnRleHRDbGFzc1JlZg0KIC\n    AgICAgeG1sbnM6c2FtbD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOm\n
      \   Fzc2VydGlvbiI+DQogICAgICAgICAgIHVybjpvYXNpczpuYW1lczp0YzpTQU\n    1MOjIuMDphYzpjbGFzc2VzOlBhc3N3b3JkUHJvdGVjdGVkVHJhbnNwb3J0DQ\n
      \   ogIDwvc2FtbDpBdXRobkNvbnRleHRDbGFzc1JlZj4NCiA8L3NhbWxwOlJlcX\n    Vlc3RlZEF1dGhuQ29udGV4dD4gDQo8L3NhbWxwOkF1dGhuUmVxdWVzdD4=\n
      \  Where the decoded SAMLRequest looks like the following:\n <samlp:AuthnRequest
      xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\"\n     ID=\"_bec424fa5103428909a30ff1e31168327f79474984\"
      Version=\"2.0\"\n     IssueInstant=\"2007-12-10T11:39:34Z\" ForceAuthn=\"false\"\n
      \    IsPassive=\"false\"\n     ProtocolBinding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"\n
      \    AssertionConsumerServiceURL=\n         \"https://xmpp.example.com/SAML/AssertionConsumerService\">\n
      \ <saml:Issuer xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\">\n      https://xmpp.example.com\n
      \ </saml:Issuer>\n  <samlp:NameIDPolicy xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\"\n
      \     Format=\"urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\"\n      SPNameQualifier=\"xmpp.example.com\"
      AllowCreate=\"true\" />\n  <samlp:RequestedAuthnContext\n      xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\"\n
      \        Comparison=\"exact\">\n   <saml:AuthnContextClassRef\n       xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\">\n
      \      urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport\n   </saml:AuthnContextClassRef>\n
      \ </samlp:RequestedAuthnContext>\n </samlp:AuthnRequest>\n   Note: The server
      can use the request ID\n   (\"_bec424fa5103428909a30ff1e31168327f79474984\")
      to correlate the SASL\n   session with the SAML authentication.\n   Step 5 (alternative):
      Server returns error to client if no SAML\n   authentication request can be
      constructed:\n    <failure xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>\n     <temporary-auth-failure/>\n
      \   </failure>\n    </stream:stream>\n   Step 6: Client sends the \"=\" response
      (base64-encoded) to the\n   challenge:\n    <response xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>\n
      \    PQ==\n    </response>\n   The following steps between brackets are out
      of scope for this\n   document but are included to better illustrate the entire
      flow:\n   [The client now sends the URL to a browser instance for processing.\n
      \  The browser engages in a normal SAML authentication flow (external to\n   SASL),
      like redirection to the IdP (https://saml.example.org); the\n   user logs into
      https://saml.example.org and agrees to authenticate to\n   xmpp.example.com.
      \ A redirect is passed back to the client browser.\n   The client browser in
      turn sends the AuthN response, which contains\n   the subject-identifier as
      an attribute, to the server.  If the AuthN\n   response doesn't contain the
      JID, the server maps the subject-\n   identifier received from the IdP to a
      JID.]\n   Step 7: Server informs client of successful authentication:\n   <success
      xmlns='urn:ietf:params:xml:ns:xmpp-sasl'/>\n   Step 7 (alternative): Server
      informs client of failed authentication:\n   <failure xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>\n
      \   <not-authorized/>\n   </failure>\n   </stream:stream>\n   Please note: Line
      breaks were added to the base64 data for clarity.\n"
    title: 5.1.  XMPP
  - contents:
    - "5.2.  IMAP\n   The following sequence describes an IMAP exchange.  Lines beginning\n
      \  with 'S:' indicate data sent by the server, and lines starting with\n   'C:'
      indicate data sent by the client.  Long lines are wrapped for\n   readability.\n
      \  S: * OK IMAP4rev1\n   C: . CAPABILITY\n   S: * CAPABILITY IMAP4rev1 STARTTLS\n
      \  S: . OK CAPABILITY Completed\n   C: . STARTTLS\n   S: . OK Begin TLS negotiation
      now\n   C: . CAPABILITY\n   S: * CAPABILITY IMAP4rev1 AUTH=SAML20\n   S: . OK
      CAPABILITY Completed\n   C: . AUTHENTICATE SAML20\n   S: +\n   C: biwsZXhhbXBsZS5vcmc=\n
      \  S: + aHR0cHM6Ly9zYW1sLmV4YW1wbGUub3JnL1NBTUwvQnJvd3Nlcj9TQU1M\n   UmVxdWVzdD1QSE5oYld4d09rRg0KMWRHaHVVbVZ4ZFdWemRDQjRiV3h1Y3pwe\n
      \  llXMXNjRDBpZFhKdU9tOWhjMmx6T201aGJXVnpPblJqT2xOQg0KVFV3Nk1pNH\n   dPbkJ5YjNSdlkyOXNJZzBLSUNBZ0lFbEVQU0pmWW1Wak5ESTBabUUxTVRBek5\n
      \  ESTRPVEE1WQ0KVE13Wm1ZeFpUTXhNVFk0TXpJM1pqYzVORGMwT1RnMElpQlda\n   WEp6YVc5dVBTSXlMakFpRFFvZ0lDQWdTWA0KTnpkV1ZKYm5OMFlXNTBQU0l5T\n
      \  URBM0xURXlMVEV3VkRFeE9qTTVPak0wV2lJZ1JtOXlZMlZCZFhSb2JqMA0KaV\n   ptRnNjMlVpRFFvZ0lDQWdTWE5RWVhOemFYWmxQU0ptWVd4elpTSU5DaUFnSUN\n
      \  CUWNtOTBiMk52YkVKcA0KYm1ScGJtYzlJblZ5YmpwdllYTnBjenB1WVcxbGN6\n   cDBZenBUUVUxTU9qSXVNRHBpYVc1a2FXNW5jenBJVg0KRlJRTFZCUFUxUWlEU\n
      \  W9nSUNBZ1FYTnpaWEowYVc5dVEyOXVjM1Z0WlhKVFpYSjJhV05sVlZKTVBRME\n   tJQw0KQWdJQ0FnSUNBaWFIUjBjSE02THk5dFlXbHNMbVY0WVcxd2JHVXVZMjl\n
      \  0TDFOQlRVd3ZRWE56WlhKMGFXOQ0KdVEyOXVjM1Z0WlhKVFpYSjJhV05sSWo0\n   TkNpQThjMkZ0YkRwSmMzTjFaWElnZUcxc2JuTTZjMkZ0YkQwaQ0KZFhKdU9tO\n
      \  WhjMmx6T201aGJXVnpPblJqT2xOQlRVdzZNaTR3T21GemMyVnlkR2x2YmlJK0\n   RRb2dJQ0FnSQ0KR2gwZEhCek9pOHZlRzF3Y0M1bGVHRnRjR3hsTG1OdmJRMEt\n
      \  JRHd2YzJGdGJEcEpjM04xWlhJK0RRb2dQSA0KTmhiV3h3T2s1aGJXVkpSRkJ2\n   YkdsamVTQjRiV3h1Y3pwellXMXNjRDBpZFhKdU9tOWhjMmx6T201aGJXVg0Ke\n
      \  k9uUmpPbE5CVFV3Nk1pNHdPbkJ5YjNSdlkyOXNJZzBLSUNBZ0lDQkdiM0p0WV\n   hROUluVnlianB2WVhOcA0KY3pwdVlXMWxjenAwWXpwVFFVMU1Pakl1TURwdVl\n
      \  XMWxhV1F0Wm05eWJXRjBPbkJsY25OcGMzUmxiblFpRA0KUW9nSUNBZ0lGTlFU\n   bUZ0WlZGMVlXeHBabWxsY2owaWVHMXdjQzVsZUdGdGNHeGxMbU52YlNJZ1FXe\n
      \  HNiMw0KZERjbVZoZEdVOUluUnlkV1VpSUM4K0RRb2dQSE5oYld4d09sSmxjWF\n   ZsYzNSbFpFRjFkR2h1UTI5dWRHVg0KNGRBMEtJQ0FnSUNCNGJXeHVjenB6WVc\n
      \  xc2NEMGlkWEp1T205aGMybHpPbTVoYldWek9uUmpPbE5CVFV3Ng0KTWk0d09u\n   QnliM1J2WTI5c0lpQU5DaUFnSUNBZ0lDQWdRMjl0Y0dGeWFYTnZiajBpWlhoa\n
      \  FkzUWlQZzBLSQ0KQ0E4YzJGdGJEcEJkWFJvYmtOdmJuUmxlSFJEYkdGemMxSm\n   xaZzBLSUNBZ0lDQWdlRzFzYm5NNmMyRnRiRA0KMGlkWEp1T205aGMybHpPbTV\n
      \  oYldWek9uUmpPbE5CVFV3Nk1pNHdPbUZ6YzJWeWRHbHZiaUkrRFFvZ0lDQQ0K\n   Z0lDQjFjbTQ2YjJGemFYTTZibUZ0WlhNNmRHTTZVMEZOVERveUxqQTZZV002W\n
      \  TJ4aGMzTmxjenBRWVhOeg0KZDI5eVpGQnliM1JsWTNSbFpGUnlZVzV6Y0c5eW\n   RBMEtJQ0E4TDNOaGJXdzZRWFYwYUc1RGIyNTBaWGgwUQ0KMnhoYzNOU1pXWSt\n
      \  EUW9nUEM5ellXMXNjRHBTWlhGMVpYTjBaV1JCZFhSb2JrTnZiblJsZUhRK0lB\n   MEtQQw0KOXpZVzFzY0RwQmRYUm9ibEpsY1hWbGMzUSs=\n
      \  C: PQ==\n   S: . OK Success (TLS protection)\n   The decoded challenge is
      as follows:\n   https://saml.example.org/SAML/Browser?SAMLRequest=PHNhbWxwOkF\n
      \  1dGhuUmVxdWVzdCB4bWxuczpzYW1scD0idXJuOm9hc2lzOm5hbWVzOnRjOlNB\n   TUw6Mi4wOnByb3RvY29sIg0KICAgIElEPSJfYmVjNDI0ZmE1MTAzNDI4OTA5Y\n
      \  TMwZmYxZTMxMTY4MzI3Zjc5NDc0OTg0IiBWZXJzaW9uPSIyLjAiDQogICAgSX\n   NzdWVJbnN0YW50PSIyMDA3LTEyLTEwVDExOjM5OjM0WiIgRm9yY2VBdXRobj0\n
      \  iZmFsc2UiDQogICAgSXNQYXNzaXZlPSJmYWxzZSINCiAgICBQcm90b2NvbEJp\n   bmRpbmc9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpiaW5kaW5nczpIV\n
      \  FRQLVBPU1QiDQogICAgQXNzZXJ0aW9uQ29uc3VtZXJTZXJ2aWNlVVJMPQ0KIC\n   AgICAgICAiaHR0cHM6Ly9tYWlsLmV4YW1wbGUuY29tL1NBTUwvQXNzZXJ0aW9\n
      \  uQ29uc3VtZXJTZXJ2aWNlIj4NCiA8c2FtbDpJc3N1ZXIgeG1sbnM6c2FtbD0i\n   dXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI+DQogICAgI\n
      \  Gh0dHBzOi8veG1wcC5leGFtcGxlLmNvbQ0KIDwvc2FtbDpJc3N1ZXI+DQogPH\n   NhbWxwOk5hbWVJRFBvbGljeSB4bWxuczpzYW1scD0idXJuOm9hc2lzOm5hbWV\n
      \  zOnRjOlNBTUw6Mi4wOnByb3RvY29sIg0KICAgICBGb3JtYXQ9InVybjpvYXNp\n   czpuYW1lczp0YzpTQU1MOjIuMDpuYW1laWQtZm9ybWF0OnBlcnNpc3RlbnQiD\n
      \  QogICAgIFNQTmFtZVF1YWxpZmllcj0ieG1wcC5leGFtcGxlLmNvbSIgQWxsb3\n   dDcmVhdGU9InRydWUiIC8+DQogPHNhbWxwOlJlcXVlc3RlZEF1dGhuQ29udGV\n
      \  4dA0KICAgICB4bWxuczpzYW1scD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6\n   Mi4wOnByb3RvY29sIiANCiAgICAgICAgQ29tcGFyaXNvbj0iZXhhY3QiPg0KI\n
      \  CA8c2FtbDpBdXRobkNvbnRleHRDbGFzc1JlZg0KICAgICAgeG1sbnM6c2FtbD\n   0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI+DQogICA\n
      \  gICB1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YWM6Y2xhc3NlczpQYXNz\n   d29yZFByb3RlY3RlZFRyYW5zcG9ydA0KICA8L3NhbWw6QXV0aG5Db250ZXh0Q\n
      \  2xhc3NSZWY+DQogPC9zYW1scDpSZXF1ZXN0ZWRBdXRobkNvbnRleHQ+IA0KPC\n   9zYW1scDpBdXRoblJlcXVlc3Q+\n
      \  Where the decoded SAMLRequest looks like the following:\n <samlp:AuthnRequest
      xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\"\n     ID=\"_bec424fa5103428909a30ff1e31168327f79474984\"
      Version=\"2.0\"\n     IssueInstant=\"2007-12-10T11:39:34Z\" ForceAuthn=\"false\"\n
      \    IsPassive=\"false\"\n     ProtocolBinding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"\n
      \    AssertionConsumerServiceURL=\n         \"https://mail.example.com/SAML/AssertionConsumerService\">\n
      \ <saml:Issuer xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\">\n      https://xmpp.example.com\n
      \ </saml:Issuer>\n  <samlp:NameIDPolicy xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\"\n
      \     Format=\"urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\"\n      SPNameQualifier=\"xmpp.example.com\"
      AllowCreate=\"true\" />\n  <samlp:RequestedAuthnContext\n      xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\"\n
      \        Comparison=\"exact\">\n   <saml:AuthnContextClassRef\n       xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\">\n
      \      urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport\n   </saml:AuthnContextClassRef>\n
      \ </samlp:RequestedAuthnContext>\n </samlp:AuthnRequest>\n"
    title: 5.2.  IMAP
  title: 5.  Examples
- contents:
  - "6.  Security Considerations\n   This section addresses only security considerations
    associated with\n   the use of SAML with SASL applications.  For considerations
    relating\n   to SAML in general, and for general SASL security considerations,
    the\n   reader is referred to the SAML specifications and to other\n   literature.\n"
  - contents:
    - "6.1.  Man-in-the-Middle and Tunneling Attacks\n   This mechanism is vulnerable
      to man-in-the-middle and tunneling\n   attacks unless a client always verifies
      the server's identity before\n   proceeding with authentication (see [RFC6125]).
      \ Typically, TLS is\n   used to provide a secure channel with server authentication.\n"
    title: 6.1.  Man-in-the-Middle and Tunneling Attacks
  - contents:
    - "6.2.  Binding SAML Subject Identifiers to Authorization Identities\n   As specified
      in [RFC4422], the server is responsible for binding\n   credentials to a specific
      authorization identity.  It is therefore\n   necessary that only specific trusted
      IdPs be allowed.  This is a\n   typical part of SAML trust establishment between
      RPs and the IdP.\n"
    title: 6.2.  Binding SAML Subject Identifiers to Authorization Identities
  - contents:
    - "6.3.  User Privacy\n   The IdP is aware of each RP that a user logs into.  There
      is nothing\n   in the protocol to hide this information from the IdP.  It is
      not a\n   requirement to track the visits, but there is nothing that prohibits\n
      \  the collection of information.  SASL server implementers should be\n   aware
      that SAML IdPs will be able to track -- to some extent -- user\n   access to
      their services.\n"
    title: 6.3.  User Privacy
  - contents:
    - "6.4.  Collusion between RPs\n   It is possible for RPs to link data that they
      have collected on the\n   users.  By using the same identifier to log into every
      RP, collusion\n   between RPs is possible.  In SAML, targeted identity was introduced.\n
      \  Targeted identity allows the IdP to transform the identifier the user\n   typed
      in to an RP-specific opaque identifier.  This way, the RP would\n   never see
      the actual user identifier but instead would see a randomly\n   generated identifier.\n"
    title: 6.4.  Collusion between RPs
  - contents:
    - "6.5.  Security Considerations Specific to GSS-API\n   Security issues inherent
      in GSS-API [RFC2743] and GS2 [RFC5801] apply\n   to the SAML GSS-API mechanism
      defined in this document.  Further, and\n   as discussed in Section 4, proper
      TLS server identity verification is\n   critical to the security of the mechanism.\n"
    title: 6.5.  Security Considerations Specific to GSS-API
  title: 6.  Security Considerations
- contents:
  - '7.  IANA Considerations

    '
  - contents:
    - "7.1.  IANA Mech-Profile\n   The IANA has registered the following SASL profile:\n
      \  SASL mechanism profile: SAML20\n   Security Considerations: See this document\n
      \  Published Specification: See this document\n   For further information: Contact
      the authors of this document.\n   Owner/Change controller: the IETF\n   Intended
      usage: COMMON\n   Note: None\n"
    title: 7.1.  IANA Mech-Profile
  - contents:
    - "7.2.  IANA OID\n   The IANA has also assigned a new entry for this GSS mechanism
      in the\n   SMI Security for Mechanism Codes sub-registry, whose prefix is\n
      \  iso.org.dod.internet.security.mechanisms (1.3.6.1.5.5), and\n   referenced
      this specification in the registry.\n"
    title: 7.2.  IANA OID
  title: 7.  IANA Considerations
- contents:
  - '8.  References

    '
  - contents:
    - "8.1.  Normative References\n   [OASIS-SAMLv2-BIND]\n              Cantor, S.,
      Ed., Hirsch, F., Ed., Kemp, J., Ed., Philpott,\n              R., Ed., and E.
      Maler, Ed., \"Bindings for the OASIS\n              Security Assertion Markup
      Language (SAML) V2.0\", OASIS\n              Standard saml-bindings-2.0-os,
      March 2005, <http://\n              docs.oasis-open.org/security/saml/v2.0/\n
      \             saml-bindings-2.0-os.pdf>.\n   [OASIS-SAMLv2-CORE]\n              Cantor,
      S., Ed., Kemp, J., Ed., Philpott, R., Ed., and E.\n              Maler, Ed.,
      \"Assertions and Protocols for the OASIS\n              Security Assertion Markup
      Language (SAML) V2.0\", OASIS\n              Standard saml-core-2.0-os, March
      2005, <http://\n              docs.oasis-open.org/security/saml/v2.0/\n              saml-core-2.0-os.pdf>.\n
      \  [OASIS-SAMLv2-PROF]\n              Hughes, J., Ed., Cantor, S., Ed., Hodges,
      J., Ed., Hirsch,\n              F., Ed., Mishra, P., Ed., Philpott, R., Ed.,
      and E. Maler,\n              Ed., \"Profiles for the OASIS Security Assertion
      Markup\n              Language (SAML) V2.0\", OASIS Standard OASIS.saml-profiles-\n
      \             2.0-os, March 2005, <http://docs.oasis-open.org/security/\n              saml/v2.0/saml-profiles-2.0-os.pdf>.\n
      \  [RFC1035]  Mockapetris, P., \"Domain names - implementation and\n              specification\",
      STD 13, RFC 1035, November 1987.\n   [RFC2119]  Bradner, S., \"Key words for
      use in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,
      March 1997.\n   [RFC2616]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,\n
      \             Masinter, L., Leach, P., and T. Berners-Lee, \"Hypertext\n              Transfer
      Protocol -- HTTP/1.1\", RFC 2616, June 1999.\n   [RFC2743]  Linn, J., \"Generic
      Security Service Application Program\n              Interface Version 2, Update
      1\", RFC 2743, January 2000.\n   [RFC2818]  Rescorla, E., \"HTTP Over TLS\",
      RFC 2818, May 2000.\n   [RFC3492]  Costello, A., \"Punycode: A Bootstring encoding
      of Unicode\n              for Internationalized Domain Names in Applications\n
      \             (IDNA)\", RFC 3492, March 2003.\n   [RFC3986]  Berners-Lee, T.,
      Fielding, R., and L. Masinter, \"Uniform\n              Resource Identifier
      (URI): Generic Syntax\", STD 66,\n              RFC 3986, January 2005.\n   [RFC3987]
      \ Duerst, M. and M. Suignard, \"Internationalized Resource\n              Identifiers
      (IRIs)\", RFC 3987, January 2005.\n   [RFC4422]  Melnikov, A., Ed., and K. Zeilenga,
      Ed., \"Simple\n              Authentication and Security Layer (SASL)\", RFC
      4422,\n              June 2006.\n   [RFC5056]  Williams, N., \"On the Use of
      Channel Bindings to Secure\n              Channels\", RFC 5056, November 2007.\n
      \  [RFC5234]  Crocker, D., Ed., and P. Overell, \"Augmented BNF for\n              Syntax
      Specifications: ABNF\", STD 68, RFC 5234,\n              January 2008.\n   [RFC5246]
      \ Dierks, T. and E. Rescorla, \"The Transport Layer Security\n              (TLS)
      Protocol Version 1.2\", RFC 5246, August 2008.\n   [RFC5280]  Cooper, D., Santesson,
      S., Farrell, S., Boeyen, S.,\n              Housley, R., and W. Polk, \"Internet
      X.509 Public Key\n              Infrastructure Certificate and Certificate Revocation
      List\n              (CRL) Profile\", RFC 5280, May 2008.\n   [RFC5801]  Josefsson,
      S. and N. Williams, \"Using Generic Security\n              Service Application
      Program Interface (GSS-API) Mechanisms\n              in Simple Authentication
      and Security Layer (SASL): The\n              GS2 Mechanism Family\", RFC 5801,
      July 2010.\n   [RFC5890]  Klensin, J., \"Internationalized Domain Names for\n
      \             Applications (IDNA): Definitions and Document Framework\",\n              RFC
      5890, August 2010.\n   [RFC5891]  Klensin, J., \"Internationalized Domain Names
      in\n              Applications (IDNA): Protocol\", RFC 5891, August 2010.\n
      \  [RFC6125]  Saint-Andre, P. and J. Hodges, \"Representation and\n              Verification
      of Domain-Based Application Service Identity\n              within Internet
      Public Key Infrastructure Using X.509\n              (PKIX) Certificates in
      the Context of Transport Layer\n              Security (TLS)\", RFC 6125, March
      2011.\n   [W3C-REC-HTML401]\n              Le Hors, A., Ed., Raggett, D., Ed.,
      and I. Jacobs, Ed.,\n              \"HTML 4.01 Specification\", World Wide Web
      Consortium\n              Recommendation REC-html401-19991224, December 1999,\n
      \             <http://www.w3.org/TR/1999/REC-html401-19991224>.\n"
    title: 8.1.  Normative References
  - contents:
    - "8.2.  Informative References\n   [RFC1939]  Myers, J. and M. Rose, \"Post Office
      Protocol - Version 3\",\n              STD 53, RFC 1939, May 1996.\n   [RFC3501]
      \ Crispin, M., \"INTERNET MESSAGE ACCESS PROTOCOL -\n              VERSION 4rev1\",
      RFC 3501, March 2003.\n   [RFC4401]  Williams, N., \"A Pseudo-Random Function
      (PRF) API\n              Extension for the Generic Security Service Application\n
      \             Program Interface (GSS-API)\", RFC 4401, February 2006.\n   [RFC4648]
      \ Josefsson, S., \"The Base16, Base32, and Base64 Data\n              Encodings\",
      RFC 4648, October 2006.\n   [RFC6120]  Saint-Andre, P., \"Extensible Messaging
      and Presence\n              Protocol (XMPP): Core\", RFC 6120, March 2011.\n"
    title: 8.2.  Informative References
  title: 8.  References
- contents:
  - "Appendix A.  Acknowledgments\n   The authors would like to thank Scott Cantor,
    Joe Hildebrand, Josh\n   Howlett, Leif Johansson, Thomas Lenggenhager, Diego Lopez,
    Hank\n   Mauldin, RL \"Bob\" Morgan, Stefan Plug, and Hannes Tschofenig for\n
    \  their review and contributions.\n"
  title: Appendix A.  Acknowledgments
- contents:
  - "Authors' Addresses\n   Klaas Wierenga\n   Cisco Systems, Inc.\n   Haarlerbergweg
    13-19\n   1101 CH Amsterdam\n   The Netherlands\n   Phone: +31 20 357 1752\n   EMail:
    klaas@cisco.com\n   Eliot Lear\n   Cisco Systems GmbH\n   Richtistrasse 7\n   CH-8304
    Wallisellen\n   Switzerland\n   Phone: +41 44 878 9200\n   EMail: lear@cisco.com\n
    \  Simon Josefsson\n   SJD AB\n   Johan Olof Wallins vag 13\n   Solna  171 64\n
    \  Sweden\n   EMail: simon@josefsson.org\n   URI:   http://josefsson.org/\n"
  title: Authors' Addresses
