- contents:
  - '                SIP Interface to VoiceXML Media Services

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents
    in effect on the date of\n   publication of this document (http://trustee.ietf.org/license-info).\n
    \  Please review these documents carefully, as they describe your rights\n   and
    restrictions with respect to this document.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document describes a SIP interface to VoiceXML media services.\n
    \  Commonly, Application Servers controlling Media Servers use this\n   protocol
    for pure VoiceXML processing capabilities.  This protocol is\n   an adjunct to
    the full MEDIACTRL protocol and packages mechanism.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \     1.1. Use Cases ..................................................3\n           1.1.1.
    IVR Services with Application Servers ...............3\n           1.1.2. PSTN
    IVR Service Node ...............................4\n           1.1.3. 3GPP IMS
    Media Resource Function (MRF) ..............5\n           1.1.4. CCXML <-> VoiceXML
    Interaction ......................6\n           1.1.5. Other Use Cases .....................................6\n
    \     1.2. Terminology ................................................7\n   2.
    VoiceXML Session Establishment and Termination ..................7\n      2.1.
    Service Identification .....................................7\n      2.2. Initiating
    a VoiceXML Session .............................10\n      2.3. Preparing a VoiceXML
    Session ..............................11\n      2.4. Session Variable Mappings
    .................................12\n      2.5. Terminating a VoiceXML Session
    ............................15\n      2.6. Examples ..................................................16\n
    \          2.6.1. Basic Session Establishment ........................16\n           2.6.2.
    VoiceXML Session Preparation .......................17\n           2.6.3. MRCP
    Establishment .................................18\n   3. Media Support ..................................................19\n
    \     3.1. Offer/Answer ..............................................19\n      3.2.
    Early Media ...............................................19\n      3.3. Modifying
    the Media Session ...............................21\n      3.4. Audio and Video
    Codecs ....................................21\n      3.5. DTMF ......................................................22\n
    \  4. Returning Data to the Application Server .......................22\n      4.1.
    HTTP Mechanism ............................................22\n      4.2. SIP
    Mechanism .............................................23\n   5. Outbound Calling
    ...............................................25\n   6. Call Transfer ..................................................25\n
    \     6.1. Blind .....................................................26\n      6.2.
    Bridge ....................................................27\n      6.3. Consultation
    ..............................................29\n   7. Contributors ...................................................31\n
    \  8. Acknowledgements ...............................................31\n   9.
    Security Considerations ........................................31\n   10. IANA
    Considerations ...........................................32\n   11. References
    ....................................................32\n      11.1. Normative
    References .....................................32\n      11.2. Informative References
    ...................................35\n   Appendix A.  Notes on Normative References
    ........................36\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   VoiceXML [VXML20], [VXML21] is a World Wide Web Consortium
    (W3C)\n   standard for creating audio and video dialogs that feature\n   synthesized
    speech, digitized audio, recognition of spoken and dual\n   tone multi-frequency
    (DTMF) key input, recording of audio and video,\n   telephony, and mixed-initiative
    conversations.  VoiceXML allows Web-\n   based development and content delivery
    paradigms to be used with\n   interactive video and voice response applications.\n
    \  This document describes a SIP [RFC3261] interface to VoiceXML media\n   services.
    \ Commonly, Application Servers controlling media servers\n   use this protocol
    for pure VoiceXML processing capabilities.  SIP is\n   responsible for initiating
    a media session to the VoiceXML media\n   server and simultaneously triggering
    the execution of a specified\n   VoiceXML application.  This protocol is an adjunct
    to the full\n   MEDIACTRL protocol and packages mechanism.\n   The interface described
    here leverages a mechanism for identifying\n   dialog media services first described
    in [RFC4240].  The interface\n   has been updated and extended to support the
    W3C Recommendation for\n   VoiceXML 2.0 [VXML20] and VoiceXML 2.1 [VXML21].  A
    set of commonly\n   implemented functions and extensions have been specified including\n
    \  VoiceXML dialog preparation, outbound calling, video media support,\n   and
    transfers.  VoiceXML session variable mappings have been defined\n   for SIP with
    an extensible mechanism for passing application-specific\n   values into the VoiceXML
    application.  Mechanisms for returning data\n   to the Application Server have
    also been added.\n"
  - contents:
    - "1.1.  Use Cases\n   The VoiceXML media service user in this document is generically\n
      \  referred to as an Application Server.  In practice, it is intended\n   that
      the interface defined by this document be applicable across a\n   wide range
      of use cases.  Several intended use cases are described\n   below.\n"
    - contents:
      - "1.1.1.  IVR Services with Application Servers\n   SIP Application Servers
        provide services to users of the network.\n   Typically, there may be several
        Application Servers in the same\n   network, each specialized in providing
        a particular service.\n   Throughout this specification and without loss of
        generality, we\n   posit the presence of an Application Server specialized
        in providing\n   Interactive Voice Response (IVR) services.  A typical configuration\n
        \  for this use case is illustrated below.\n                              +--------------+\n
        \                             |              |\n                              |
        \ Application |\\\n                              |    Server    | \\\n                              |
        \             |  \\ HTTP\n                         SIP  +--------------+   \\\n
        \                             /               \\   \\\n             +-------------+
        /             SIP \\ +--------------+\n             |             |/                   \\|
        \             |\n             |     SIP     |                     |   VoiceXML
        \  |\n             | User Agent  |      RTP/SRTP       | Media Server |\n
        \            |             |=====================|              |\n             +-------------+
        \                    +--------------+\n   Assuming the Application Server
        also supports HTTP, the VoiceXML\n   application may be hosted on it and served
        up via HTTP [RFC2616].\n   Note, however, that the Web model allows the VoiceXML
        application to\n   be hosted on a separate (HTTP) Application Server from
        the (SIP)\n   Application Server that interacts with the VoiceXML Media Server
        via\n   this specification.  It is also possible for a static VoiceXML\n   application
        to be stored locally on the VoiceXML Media Server,\n   leveraging the VoiceXML
        2.1 [VXML21] <data> mechanism to interact\n   with a Web/Application Server
        when dynamic behavior is required.  The\n   viability of static VoiceXML applications
        is further enhanced by the\n   mechanisms defined in Section 2.4, through
        which the Application\n   Server can make session-specific information available
        within the\n   VoiceXML session context.\n   The approach described in this
        document is sometimes termed the\n   \"delegation model\" -- the Application
        Server is essentially\n   delegating programmatic control of the human-machine
        interactions to\n   one or more VoiceXML documents running on the VoiceXML
        Media Server.\n   During the human-machine interactions, the Application Server
        remains\n   in the signaling path and can respond to results returned from
        the\n   VoiceXML Media Server or other external network events.\n"
      title: 1.1.1.  IVR Services with Application Servers
    - contents:
      - "1.1.2.  PSTN IVR Service Node\n   While this document is intended to enable
        enhanced use of VoiceXML as\n   a component of larger systems and services,
        it is intended that\n   devices that are completely unaware of this specification
        remain\n   capable of invoking VoiceXML services offered by a VoiceXML Media\n
        \  Server compliant with this document.  A typical configuration for\n   this
        use case is as follows:\n             +-------------+         SIP         +--------------+\n
        \            |             |---------------------|              |\n             |
        \  IP/PSTN   |                     |   VoiceXML   |\n             |   Gateway
        \  |      RTP/SRTP       | Media Server |\n             |             |=====================|
        \             |\n             +-------------+                     +--------------+\n
        \  Note also that beyond the invocation and termination of a VoiceXML\n   dialog,
        the semantics defined for call transfers using REFER are\n   intended to be
        compatible with standard, existing IP/PSTN (Public\n   Switched Telephone
        Network) gateways.\n"
      title: 1.1.2.  PSTN IVR Service Node
    - contents:
      - "1.1.3.  3GPP IMS Media Resource Function (MRF)\n   The 3rd Generation Partnership
        Project (3GPP) IP Multimedia Subsystem\n   (IMS) [TS23002] defines a Media
        Resource Function (MRF) used to offer\n   media processing services such as
        conferencing, transcoding, and\n   prompt/collect.  The capabilities offered
        by VoiceXML are ideal for\n   offering richer media processing services in
        the context of the MRF.\n   In this architecture, the interface defined here
        corresponds to the\n   \"Mr\" interface to the MRFC (MRF Controller); the
        implementation of\n   this interface might use separated MRFC and MRFP (MRF
        Processor)\n   elements (as per the IMS architecture), or might be an integrated
        MRF\n   (as is common practice).\n             +----------+\n             |
        \  App    |\n             |  Server  |\n             +----------+\n                  |\n
        \                 | SIP (ISC)\n                  |\n             +----------+
        \  SIP (Mr)    +--------------+\n             |  S-CSCF  |---------------|
        \  VoiceXML   |\n             |          |               |     MRF      |\n
        \            +----------+               +--------------+\n                                               ||\n
        \                                              || RTP/SRTP (Mb)\n                                               ||\n
        \  The above diagram is highly simplified and shows a subset of nodes\n   typically
        involved in MRF interactions.  It should be noted that\n   while the MRF will
        primarily be used by the Application Server via\n   the Serving Call Session
        Control Function (S-CSCF), it is also\n   possible for calls to be routed
        directly to the MRF without the\n   involvement of an Application Server.\n
        \  Although the above is described in terms of the 3GPP IMS\n   architecture,
        it is intended that it is also applicable to 3GPP2,\n   Next Generation Network
        (NGN), and PacketCable architectures that are\n   converging with 3GPP IMS
        standards.\n"
      title: 1.1.3.  3GPP IMS Media Resource Function (MRF)
    - contents:
      - "1.1.4.  CCXML <-> VoiceXML Interaction\n   Call Control eXtensible Markup
        Language (CCXML) 1.0 [CCXML10]\n   applications provide services mainly through
        controlling the\n   interaction between Connections, Conferences, and Dialogs.
        \ Although\n   CCXML is capable of supporting arbitrary dialog environments,\n
        \  VoiceXML is commonly used as a dialog environment in conjunction with\n
        \  CCXML applications; CCXML is specifically designed to effectively\n   support
        the use of VoiceXML.  CCXML 1.0 defines language elements\n   that allow for
        Dialogs to be prepared, started, and terminated; it\n   further allows for
        data to be returned by the dialog environment, for\n   call transfers to be
        requested (by the dialog) and responded to by\n   the CCXML application, and
        for arbitrary eventing between the CCXML\n   application and running dialog
        application.\n   The interface described in this document can be used by CCXML
        1.0\n   implementations to control VoiceXML Media Servers.  Note, however,\n
        \  that some CCXML language features require eventing facilities between\n
        \  CCXML and VoiceXML sessions that go beyond what is defined in this\n   specification.
        \ For example, VoiceXML-controlled call transfers and\n   mid-dialog, application-defined
        events cannot be fully realized using\n   this specification alone.  A SIP
        event package [RFC3265] MAY be used\n   in addition to this specification
        to provide extended eventing.\n"
      title: 1.1.4.  CCXML <-> VoiceXML Interaction
    - contents:
      - "1.1.5.  Other Use Cases\n   In addition to the use cases described in some
        detail above, there\n   are a number of other intended use cases that are
        not described in\n   detail, such as:\n   1.  Use of a VoiceXML Media Server
        as an adjunct to an IP-based\n       Private Branch Exchange / Automatic Call
        Distributor (PBX/ACD),\n       possibly to provide voicemail/messaging, automated
        attendant, or\n       other capabilities.\n   2.  Invocation and control of
        a VoiceXML session that provides the\n       voice modality component in a
        multimodal system.\n"
      title: 1.1.5.  Other Use Cases
    title: 1.1.  Use Cases
  - contents:
    - "1.2.  Terminology\n   Application Server:  A SIP Application Server hosts and
      executes\n      services, in particular by terminating SIP sessions on a media\n
      \     server.  The Application Server MAY also act as an HTTP server\n      [RFC2616]
      in interactions with media servers.\n   VoiceXML Media Server:  A VoiceXML interpreter
      including a SIP-based\n      interpreter context and the requisite media processing\n
      \     capabilities to support VoiceXML functionality.\n   VoiceXML Session:
      \ A VoiceXML Session is a multimedia session\n      comprising of at least a
      SIP User Agent, a VoiceXML Media Server,\n      the data streams between them,
      and an executing VoiceXML\n      application.\n   VoiceXML Dialog:  Equivalent
      to VoiceXML Session.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
      and \"OPTIONAL\" in this\n   document are to be interpreted as described in
      [RFC2119].\n"
    title: 1.2.  Terminology
  title: 1.  Introduction
- contents:
  - "2.  VoiceXML Session Establishment and Termination\n   This section describes
    how to establish a VoiceXML Session, with or\n   without preparation, and how
    to terminate a session.  This section\n   also addresses how session information
    is made available to VoiceXML\n   applications.\n"
  - contents:
    - "2.1.  Service Identification\n   The SIP Request-URI is used to identify the
      VoiceXML media service.\n   The user part of the SIP Request-URI is fixed to
      \"dialog\".  This is\n   done to ensure compatibility with [RFC4240], since
      this document\n   extends the dialog interface defined in that specification
      and\n   because this convention from [RFC4240] is widely adopted by existing\n
      \  media servers.\n   Standardizing the SIP Request-URI including the user part
      also\n   improves interoperability between Application Servers and media\n   servers,
      and reduces the provisioning overhead that would be required\n   if use of a
      media server by an Application Server required an\n   individually provisioned
      URI.  In this respect, this document (and\n   [RFC4240]) do not add semantics
      to the user part, but rather\n   standardize the way that targets on media servers
      are provisioned.\n   Further, since Application Servers -- and not human beings
      -- are\n   generally the clients of media servers, issues such as interpretation\n
      \  and internationalization do not apply.\n   Exposing a VoiceXML media service
      with a well-known address may\n   enhance the possibility of exploitation: the
      VoiceXML Media Server is\n   RECOMMENDED to use standard SIP mechanisms to authenticate
      endpoints\n   as discussed in Section 9.\n   The initial VoiceXML document is
      specified with the \"voicexml\"\n   parameter.  In addition, parameters are
      defined that control how the\n   VoiceXML Media Server fetches the specified
      VoiceXML document.  The\n   list of parameters defined by this specification
      is as follows (note\n   the parameter names are case-insensitive):\n   voicexml:
      \ URI of the initial VoiceXML document to fetch.  This will\n      typically
      contain an HTTP URI, but may use other URI schemes, for\n      example, to refer
      to local, static VoiceXML documents.  If the\n      \"voicexml\" parameter is
      omitted, the VoiceXML Media Server may\n      select the initial VoiceXML document
      by other means, such as by\n      applying a default, or may reject the request.\n
      \  maxage:  Used to set the max-age value of the Cache-Control header in\n      conjunction
      with VoiceXML documents fetched using HTTP, as per\n      [RFC2616].  If omitted,
      the VoiceXML Media Server will use a\n      default value.\n   maxstale:  Used
      to set the max-stale value of the Cache-Control\n      header in conjunction
      with VoiceXML documents fetched using HTTP,\n      as per [RFC2616].  If omitted,
      the VoiceXML Media Server will use\n      a default value.\n   method:  Used
      to set the HTTP method applied in the fetch of the\n      initial VoiceXML document.
      \ Allowed values are \"get\" or \"post\"\n      (case-insensitive).  Default
      is \"get\".\n   postbody:  Used to set the application/x-www-form-urlencoded
      encoded\n      [HTML4] HTTP body for \"post\" requests (or is otherwise ignored).\n
      \  ccxml:  Used to specify a \"JSON value\" [RFC4627] that is mapped to\n      the
      session.connection.ccxml VoiceXML session variable -- see\n      Section 2.4.\n
      \  aai:  Used to specify a \"JSON value\" [RFC4627] that is mapped to the\n
      \     session.connection.aai VoiceXML session variable -- see\n      Section
      2.4.\n   Other application-specific parameters may be added to the Request-URI\n
      \  and are exposed in VoiceXML session variables (see Section 2.4).\n   Formally,
      the Request-URI for the VoiceXML media service has a fixed\n   user part \"dialog\".
      \ Seven URI parameters are defined (see the\n   definition of uri-parameter
      in Section 25.1 of [RFC3261]).\n  dialog-param      = \"voicexml=\" vxml-url
      ; vxml-url follows the URI\n                                           ; syntax
      defined in [RFC3986]\n  maxage-param      = \"maxage=\" 1*DIGIT\n  maxstale-param
      \   = \"maxstale=\" 1*DIGIT\n  method-param      = \"method=\" (\"get\" / \"post\")\n
      \ postbody-param    = \"postbody=\" token\n  ccxml-param       = \"ccxml=\"
      json-value\n  aai-param         = \"aai=\" json-value\n  json-value        =
      \ false /\n                       null /\n                       true /\n                       object
      /\n                       array /\n                       number /\n                       string
      ; defined in [RFC4627]\n   Parameters of the Request-URI in subsequent re-INVITEs
      are ignored.\n   One consequence of this is that the VoiceXML Media Server cannot
      be\n   instructed by the Application Server to change the executing VoiceXML\n
      \  Application after a VoiceXML Session has been started.\n   Special characters
      contained in the dialog-param, postbody-param,\n   ccxml-param, and aai-param
      values must be URL-encoded (\"escaped\") as\n   required by the SIP URI syntax,
      for example, '?' (%3f), '=' (%3d),\n   and ';' (%3b).  The VoiceXML Media Server
      MUST therefore unescape\n   these parameter values before making use of them
      or exposing them to\n   running VoiceXML applications.  It is important that
      the VoiceXML\n   Media Server only unescape the parameter values once since
      the\n   desired VoiceXML URI value could itself be URL encoded, for example.\n
      \  Since some applications may choose to transfer confidential\n   information,
      the VoiceXML Media Server MUST support the sips: scheme\n   as discussed in
      Section 9.\n   Informative note: With respect to the postbody-param value, since
      the\n   application/x-www-form-urlencoded content itself escapes non-\n   alphanumeric
      characters by inserting %HH replacements, the escaping\n   rules above will
      result in the '%' characters being further escaped\n   in addition to the '&'
      and '=' name/value separators.\n   As an example, the following SIP Request-URI
      identifies the use of\n   VoiceXML media services, with\n   'http://appserver.example.com/promptcollect.vxml'
      as the initial\n   VoiceXML document, to be fetched with max-age/max-stale values
      of\n   3600s/0s, respectively:\n       sip:dialog@mediaserver.example.com; \\\n
      \         voicexml=http://appserver.example.com/promptcollect.vxml; \\\n          maxage=3600;maxstale=0\n"
    title: 2.1.  Service Identification
  - contents:
    - "2.2.  Initiating a VoiceXML Session\n   A VoiceXML Session is initiated via
      the Application Server using a\n   SIP INVITE.  Typically, the Application Server
      will be specialized in\n   providing VoiceXML services.  At a minimum, the Application
      Server\n   may behave as a simple proxy by rewriting the Request-URI received\n
      \  from the User Agent to a Request-URI suitable for consumption by the\n   VoiceXML
      Media Server (as specified in Section 2.1).  For example, a\n   User Agent might
      present a dialed number:\n       tel:+1-201-555-0123\n   that the Application
      Server maps to a directory assistance\n   application on the VoiceXML Media
      Server with a Request-URI of:\n       sip:dialog@ms1.example.com; \\\n          voicexml=http://as1.example.com/da.vxml\n
      \  Certain header values in the INVITE message to the VoiceXML Media\n   Server
      are mapped into VoiceXML session variables and are specified\n   in Section
      2.4.\n   On receipt of the INVITE, the VoiceXML Media Server issues a\n   provisional
      response, 100 Trying, and commences the fetch of the\n   initial VoiceXML document.
      \ The 200 OK response indicates that the\n   VoiceXML document has been fetched
      and parsed correctly and is ready\n   for execution.  Application execution
      commences on receipt of the ACK\n   (except if the dialog is being prepared
      as specified in Section 2.3).\n   Note that the 100 Trying response will usually
      be sent on receipt of\n   the INVITE in accordance with [RFC3261], since the
      VoiceXML Media\n   Server cannot in general guarantee that the initial fetch
      will\n   complete in less than 200 ms.  However, certain implementations may\n
      \  be able to guarantee response times to the initial INVITE, and thus\n   may
      not need to send a 100 Trying response.\n   As an optimization, prior to sending
      the 200 OK response, the\n   VoiceXML Media Server MAY execute the application
      up to the point of\n   the first VoiceXML waiting state or prompt flush.\n   A
      VoiceXML Media Server, like any SIP User Agent, may be unable to\n   accept
      the INVITE request for a variety of reasons.  For instance, a\n   Session Description
      Protocol (SDP) offer contained in the INVITE\n   might require the use of codecs
      that are not supported by the Media\n   Server.  In such cases, the Media Server
      should respond as defined by\n   [RFC3261].  However, there are error conditions
      specific to VoiceXML,\n   as follows:\n   1.  If the Request-URI does not conform
      to this specification, a 400\n       Bad Request MUST be returned (unless it
      is used to select other\n       services not defined by this specification).\n
      \  2.  If a URI parameter in the Request-URI is repeated, then the\n       request
      MUST be rejected with a 400 Bad Request response.\n   3.  If the Request-URI
      does not include a \"voicexml\" parameter, and\n       the VoiceXML Media Server
      does not elect to use a default page,\n       the VoiceXML Media Server MUST
      return a final response of 400 Bad\n       Request, and it SHOULD include a
      Warning header with a 3-digit\n       code of 399 and a human-readable error
      message.\n   4.  If the VoiceXML document cannot be fetched or parsed, the\n
      \      VoiceXML Media Server MUST return a final response of 500 Server\n       Internal
      Error and SHOULD include a Warning header with a 3-digit\n       code of 399
      and a human-readable error message.\n   Informative note: Certain applications
      may pass a significant amount\n   of data to the VoiceXML dialog in the form
      of Request-URI parameters.\n   This may cause the total size of the INVITE request
      to exceed the MTU\n   of the underlying network.  In such cases, applications/\n
      \  implementations must take care either to use a transport appropriate\n   to
      these larger messages (such as TCP) or to use alternative means of\n   passing
      the required information to the VoiceXML dialog (such as\n   supplying a unique
      session identifier in the initial VoiceXML URI and\n   later using that identifier
      as a key to retrieve data from the HTTP\n   server).\n"
    title: 2.2.  Initiating a VoiceXML Session
  - contents:
    - "2.3.  Preparing a VoiceXML Session\n   In certain scenarios, it is beneficial
      to prepare a VoiceXML Session\n   for execution prior to running it.  A previously
      prepared VoiceXML\n   Session is expected to execute with minimal delay when
      instructed to\n   do so.\n   If a media-less SIP dialog is established with
      the initial INVITE to\n   the VoiceXML Media Server, the VoiceXML application
      will not execute\n   after receipt of the ACK.  To run the VoiceXML application,
      the\n   Application Server (AS) must issue a re-INVITE to establish a media\n
      \  session.\n   A media-less SIP dialog can be established by sending an SDP\n
      \  containing no media lines in the initial INVITE.  Alternatively, if\n   no
      SDP is sent in the initial INVITE, the VoiceXML Media Server will\n   include
      an offer in the 200 OK message, which can be responded to\n   with an answer
      in the ACK with the media port(s) set to 0.\n   Once a VoiceXML application
      is running, a re-INVITE that disables the\n   media streams (i.e., sets the
      ports to 0) will not otherwise affect\n   the executing application (except
      that recognition actions initiated\n   while the media streams are disabled
      will result in noinput\n   timeouts).\n"
    title: 2.3.  Preparing a VoiceXML Session
  - contents:
    - "2.4.  Session Variable Mappings\n   The standard VoiceXML session variables
      are assigned values according\n   to:\n   session.connection.local.uri:  Evaluates
      to the SIP URI specified in\n      the To: header of the initial INVITE.\n   session.connection.remote.uri:
      \ Evaluates to the SIP URI specified in\n      the From: header of the initial
      INVITE.\n   session.connection.redirect:  This array is populated by information\n
      \     contained in the History-Info [RFC4244] header in the initial\n      INVITE
      or is otherwise undefined.  Each entry (hi-entry) in the\n      History-Info
      header is mapped, in reverse order, into an element\n      of the session.connection.redirect
      array.  Properties of each\n      element of the array are determined as follows:\n
      \     *  uri - Set to the hi-targeted-to-uri value of the History-Info\n         entry\n
      \     *  pi - Set to 'true' if hi-targeted-to-uri contains a\n         \"Privacy=history\"
      parameter, or if the INVITE Privacy header\n         includes 'history'; 'false'
      otherwise\n      *  si - Set to the value of the \"si\" parameter if it exists,\n
      \        undefined otherwise\n      *  reason - Set verbatim to the value of
      the \"Reason\" parameter of\n         hi-targeted-to-uri\n   session.connection.protocol.name:
      \ Evaluates to \"sip\".  Note that\n      this is intended to reflect the use
      of SIP in general, and does\n      not distinguish between whether the media
      server was accessed via\n      SIP or SIPS procedures.\n   session.connection.protocol.version:
      \ Evaluates to \"2.0\".\n   session.connection.protocol.sip.headers:  This is
      an associative\n      array where each key in the array is the non-compact name
      of a SIP\n      header in the initial INVITE converted to lowercase (note the
      case\n      conversion does not apply to the header value).  If multiple\n      header
      fields of the same field name are present, the values are\n      combined into
      a single comma-separated value.  Implementations\n      MUST at a minimum include
      the Call-ID header and MAY include other\n      headers.  For example,\n      session.connection.protocol.sip.headers[\"call-id\"]
      evaluates to\n      the Call-ID of the SIP dialog.\n   session.connection.protocol.sip.requesturi:
      \ This is an associative\n      array where the array keys and values are formed
      from the URI\n      parameters on the SIP Request-URI of the initial INVITE.
      \ The\n      array key is the URI parameter name converted to lowercase (note\n
      \     the case conversion does not apply to the parameter value).  The\n      corresponding
      array value is obtained by evaluating the URI\n      parameter value as a \"JSON
      value\" [RFC4627] in the case of the\n      ccxml-param and aai-param values
      and otherwise as a string.  In\n      addition, the array's toString() function
      returns the full SIP\n      Request-URI.  For example, assuming a Request-URI
      of sip:dialog@\n      example.com;voicexml=http://example.com;aai=%7b\"x\":1%2c\"y\":true%7d\n
      \     then session.connection.protocol.sip.requesturi[\"voicexml\"]\n      evaluates
      to \"http://example.com\",\n      session.connection.protocol.sip.requesturi[\"aai\"].x
      evaluates to 1\n      (type Number), session.connection.protocol.sip.requesturi[\"aai\"].y\n
      \     evaluates to true (type Boolean), and\n      session.connection.protocol.sip.requesturi
      evaluates to the\n      complete Request-URI (type String) 'sip:dialog@\n      example.com;voicexml=http://example.com;aai={\"x\":1,\"y\":true}'.\n
      \  session.connection.aai:  Evaluates to\n      session.connection.protocol.sip.requesturi[\"aai\"].\n
      \  session.connection.ccxml:  Evaluates to\n      session.connection.protocol.sip.requesturi[\"ccxml\"].\n
      \  session.connection.protocol.sip.media:  This is an array where each\n      array
      element is an object with the following properties:\n      *  type: - This required
      property indicates the type of the media\n         associated with the stream.
      \ The value is a string.  It is\n         strongly recommended that the following
      values are used for\n         common types of media: \"audio\" for audio media,
      and \"video\" for\n         video media.\n      *  direction: - This required
      property indicates the\n         directionality of the media relative to\n         session.connection.originator.
      \ Defined values are sendrecv,\n         sendonly, recvonly, and inactive.\n
      \     *  format: - This property is optional.  If defined, the value of\n         the
      property is an array.  Each array element is an object that\n         specifies
      information about one format of the media (there is\n         an array element
      for each payload type on the m-line).  The\n         object contains at least
      one property called \"name\" whose value\n         is the MIME subtype of the
      media format (MIME subtypes are\n         registered in [RFC4855]).  Other properties
      may be defined with\n         string values; these correspond to required and,
      if defined,\n         optional parameters of the format.\n      As a consequence
      of this definition, there is an array entry in\n      session.connection.protocol.sip.media
      for each non-disabled m-line\n      for the negotiated media session.  Note
      that this session variable\n      is updated if the media session characteristics
      for the VoiceXML\n      Session change (i.e., due to a re-INVITE).  For an example,\n
      \     consider a connection with bidirectional G.711 mu-law \"audio\"\n      sampled
      at 8 kHz.  In this case,\n      session.connection.protocol.sip.media[0].type
      evaluates to\n      \"audio\", session.connection.protocol.sip.media[0].direction
      to\n      \"sendrecv\",\n      session.connection.protocol.sip.media[0].format[0].name
      evaluates\n      to \"audio/PCMU\", and\n      session.connection.protocol.sip.media[0].format[0].rate
      evaluates\n      to \"8000\".\n   Note that when accessing SIP headers and Request-URI
      parameters via\n   the session.connection.protocol.sip.headers and\n   session.connection.protocol.sip.requesturi
      associative arrays defined\n   above, applications can choose between two semantically
      equivalent\n   ways of referring to the array.  For example, either of the following\n
      \  can be used to access a Request-URI parameter named \"foo\":\n       session.connection.protocol.sip.requesturi[\"foo\"]\n
      \      session.connection.protocol.sip.requesturi.foo\n   However, it is important
      to note that not all SIP header names or\n   Request-URI parameter names are
      valid ECMAScript identifiers, and as\n   such, can only be accessed using the
      first form (array notation).\n   For example, the Call-ID header can only be
      accessed as\n   session.connection.protocol.sip.headers[\"call-id\"]; attempting
      to\n   access the same value as\n   session.connection.protocol.sip.headers.call-id
      would result in an\n   error.\n"
    title: 2.4.  Session Variable Mappings
  - contents:
    - "2.5.  Terminating a VoiceXML Session\n   The Application Server can terminate
      a VoiceXML Session by issuing a\n   BYE to the VoiceXML Media Server.  Upon
      receipt of a BYE in the\n   context of an existing VoiceXML Session, the VoiceXML
      Media Server\n   MUST send a 200 OK response and MUST throw a\n   'connection.disconnect.hangup'
      event to the VoiceXML application.  If\n   the Reason header [RFC3326] is present
      on the BYE Request, then the\n   value of the Reason header is provided verbatim
      via the '_message'\n   variable within the catch element's anonymous variable
      scope.\n   The VoiceXML Media Server may also initiate termination of the\n
      \  session by issuing a BYE request.  This will typically occur as a\n   result
      of encountering a <disconnect> or <exit> in the VoiceXML\n   application, due
      to the VoiceXML application running to completion,\n   or due to unhandled errors
      within the VoiceXML application.\n   See Section 4 for mechanisms to return
      data to the Application\n   Server.\n"
    title: 2.5.  Terminating a VoiceXML Session
  - contents:
    - '2.6.  Examples

      '
    - contents:
      - "2.6.1.  Basic Session Establishment\n   This example illustrates an Application
        Server setting up a VoiceXML\n   Session on behalf of a User Agent.\n                         SIP
        \              VoiceXML              HTTP\n   User              Application
        \           Media            Application\n   Agent               Server               Server
        \             Server\n    |                    |                    |                    |\n
        \   |(1) INVITE [offer]  |                    |                    |\n    |------------------->|(2)
        INVITE [offer]  |                    |\n    |(3) 100 Trying      |------------------->|
        \                   |\n    |<-------------------|(4) 100 Trying      |                    |\n
        \   |                    |<-------------------|                    |\n    |
        \                   |                    |                    |\n    |                    |
        \                   |(5) GET             |\n    |                    |                    |------------------->|\n
        \   |                    |                    |(6) 200 OK [VXML]   |\n    |
        \                   |                    |<-------------------|\n    |                    |
        \                   |                    |\n    |                    |(7)
        200 OK [answer] |                    |\n    |(8) 200 OK [answer] |<-------------------|
        \                   |\n    |<-------------------|                    |                    |\n
        \   |(9) ACK             |                    |                    |\n    |------------------->|(10)
        ACK            |                    |\n    |                    |------------------->|
        (execute           |\n    |(11) RTP/SRTP       |                    |  VoiceXML
        \         |\n    |.........................................|  application)
        \     |\n    |                    |                    |                    |\n"
      title: 2.6.1.  Basic Session Establishment
    - contents:
      - "2.6.2.  VoiceXML Session Preparation\n   This example demonstrates the preparation
        of a VoiceXML Session.  In\n   this example, the VoiceXML session is prepared
        prior to placing an\n   outbound call to a User Agent, and is started as soon
        as the User\n   Agent answers.\n   The [answer1:0] notation is used to indicate
        an SDP answer with the\n   media ports set to 0.\n                         SIP
        \              VoiceXML              HTTP\n   User              Application
        \           Media            Application\n   Agent               Server               Server
        \             Server\n    |                    |                     |                    |\n
        \   |                    |(1) INVITE           |                    |\n    |
        \                   |-------------------->|                    |\n    |                    |(2)
        100 Trying       |                    |\n    |                    |<--------------------|
        \                   |\n    |                    |                     |                    |\n
        \   |                    |                     |(3) GET             |\n    |
        \                   |                     |------------------->|\n    |                    |
        \                    |(4) 200 OK [VXML]   |\n    |                    |                     |<-------------------|\n
        \   |                    |                     |                    |\n    |
        \                   |(5) 200 OK [offer1]  |                    |\n    |                    |<--------------------|
        \                   |\n    |                    |(6) ACK [answer1:0]  |                    |\n
        \   |(7) INVITE          |-------------------->|                    |\n    |<-------------------|
        \                    |                    |\n    |(8) 200 OK [offer2] |                     |
        \                   |\n    |------------------->|(9) INVITE [offer2'] |                    |\n
        \   |                    |-------------------->|                    |\n    |
        \                   |(10) 100 Trying      |                    |\n    |                    |<--------------------|
        \                   |\n    |                    |(11) 200 OK [answer2]|                    |\n
        \   |(12) ACK [answer2]  |<--------------------|                    |\n    |<-------------------|(13)
        ACK             |                    |\n    |                    |-------------------->|
        (execute           |\n    |(14) RTP/SRTP                             |  VoiceXML
        \         |\n    |..........................................|  application)
        \     |\n    |                    |                     |                    |\n
        \  Implementation detail: offer2' is derived from offer2 -- it\n   duplicates
        the m-lines and a-lines from offer2.  However, offer2'\n   differs from offer2
        since it must contain the same o-line as used in\n   answer1:0 but with the
        version number incremented.  Also, if offer1\n   has more m-lines than offer2,
        then offer2' must be padded with extra\n   (rejected) m-lines.\n"
      title: 2.6.2.  VoiceXML Session Preparation
    - contents:
      - "2.6.3.  MRCP Establishment\n   Media Resource Control Protocol (MRCP) [MRCPv2]
        is a protocol that\n   enables clients such as a VoiceXML Media Server to
        control media\n   service resources such as speech synthesizers, recognizers,\n
        \  verifiers, and identifiers residing in servers on the network.\n   The
        example below illustrates how a VoiceXML Media Server may\n   establish an
        MRCP session in response to an initial INVITE.\n                       VoiceXML
        \                                 HTTP\n   User                Media                 MRCPv2
        \         Application\n   Agent               Server                Server
        \            Server\n    |                    |                      |                  |\n
        \   |(1) INVITE [offer1] |                      |                  |\n    |------------------->|
        \                     |                  |\n    |(2) 100 Trying      |                      |
        \                 |\n    |<-------------------|(3) GET               |                  |\n
        \   |                    |---------------------------------------->|\n    |
        \                   |                      |                  |\n    |                    |(4)
        200 OK [VXML]     |                  |\n    |                    |<----------------------------------------|\n
        \   |                    |                      |                  |\n    |
        \                   |(5) INVITE [offer2]   |                  |\n    |                    |--------------------->|
        \                 |\n    |                    |                      |                  |\n
        \   |                    |(6) 200 OK [answer2]  |                  |\n    |
        \                   |<---------------------|                  |\n    |                    |
        \                     |                  |\n    |                    |(7)
        ACK               |                  |\n    |                    |--------------------->|
        \                 |\n    |                    |                      |                  |\n
        \   |                    |(8) MRCP connection   |                  |\n    |
        \                   |<-------------------->|                  |\n    |(9)
        200 OK [answer1]|                      |                  |\n    |<-------------------|
        \                     |                  |\n    |                    |                      |
        \                 |\n    |(10) ACK            |                      |                  |\n
        \   |------------------->|                      |                  |\n    |
        \                   |                      |                  |\n    |(11)
        RTP/SRTP       |                      |                  |\n    |...........................................|
        \                 |\n    |                    |                      |                  |\n
        \  In this example, the VoiceXML Media Server is responsible for\n   establishing
        a session with the MRCPv2 Media Resource Server prior to\n   sending the 200
        OK response to the initial INVITE.  The VoiceXML\n   Media Server will perform
        the appropriate offer/answer with the\n   MRCPv2 Media Resource Server based
        on the SDP capabilities of the\n   Application Server and the MRCPv2 Media
        Resource Server.  The\n   VoiceXML Media Server will change the offer received
        from step 1 to\n   establish an MRCPv2 session in step (5) and will re-write
        the SDP to\n   include an m-line for each MRCPv2 resource to be used and other\n
        \  required SDP modifications as specified by MRCPv2.  Once the VoiceXML\n
        \  Media Server performs the offer/answer with the MRCPv2 Media Resource\n
        \  Server, it will establish an MRCPv2 control channel in step (8).  The\n
        \  MRCPv2 resource is deallocated when the VoiceXML Media Server\n   receives
        or sends a BYE (not shown).\n"
      title: 2.6.3.  MRCP Establishment
    title: 2.6.  Examples
  title: 2.  VoiceXML Session Establishment and Termination
- contents:
  - "3.  Media Support\n   This section describes the mandatory and optional media
    support\n   required by this interface.\n"
  - contents:
    - "3.1.  Offer/Answer\n   The VoiceXML Media Server MUST support the standard
      offer/answer\n   mechanism of [RFC3264].  In particular, if an SDP offer is
      not\n   present in the INVITE, the VoiceXML Media Server will make an offer\n
      \  in the 200 OK response listing its supported codecs.\n"
    title: 3.1.  Offer/Answer
  - contents:
    - "3.2.  Early Media\n   The VoiceXML Media Server MAY support early establishment
      of media\n   streams as described in [RFC3960].  This allows the Application\n
      \  Server to establish media streams between a User Agent and the\n   VoiceXML
      Media Server in parallel with the initial VoiceXML document\n   being processed
      (which may involve dynamic VoiceXML page generation\n   and interaction with
      databases or other systems).  This is useful\n   primarily for minimizing the
      delay in starting a VoiceXML Session,\n   particularly in cases where a session
      with the User Agent already\n   exists but the media stream associated with
      that session needs to be\n   redirected to a VoiceXML Media Server.\n   The
      following flow demonstrates the use of early media (using the\n   Gateway model
      defined in [RFC3960]):\n                         SIP               VoiceXML
      \             HTTP\n   User              Application            Media            Application\n
      \  Agent               Server               Server              Server\n    |
      \                     |                   |                   |\n    |..(existing
      session)..|                   |                   |\n    |                      |(1)
      INVITE         |                   |\n    |                      |------------------>|
      \                  |\n    |                      |                   |(2) HTTP
      GET       |\n    |                      |                   |------------------>|\n
      \   |                      |(3) 183 [offer]    |                   |\n    |(4)
      re-INVITE [offer] |<------------------|                   |\n    |<---------------------|
      \                  |                   |\n    |(5) 200 OK [answer]   |                   |
      \                  |\n    |--------------------->|                   |                   |\n
      \   |(6) ACK               |                   |                   |\n    |<---------------------|
      \                  |                   |\n    |                      | (7) PRACK
      [answer]|                   |\n    |                      |------------------>|
      \                  |\n    |                      | (8) PRACK 200 OK  |                   |\n
      \   |                      |<------------------|                   |\n    |(9)
      RTP/SRTP          |                   |                   |\n    |..........................................|
      \                  |\n    |                      |                   |(10) 200
      OK [VXML] |\n    |                      |                   |<------------------|\n
      \   |                      |                   |                   |\n    |
      \                     |(11) 200 OK        |                   |\n    |                      |<------------------|
      \                  |\n    |                      |(12) ACK           |                   |\n
      \   |                      |------------------>| (execute          |\n    |
      \                     |                   |  VoiceXML         |\n    |                      |
      \                  |  application)     |\n    |                      |                   |
      \                  |\n   Although [RFC3960] prefers the use of the Application
      Server model\n   for early media over the Gateway model, the primary issue with
      the\n   Gateway model -- forking -- is significantly less common when issuing\n
      \  requests to VoiceXML Media Servers.  This is because VoiceXML Media\n   Servers
      respond to all requests with 200 OK responses in the absence\n   of unusual
      errors, and they typically do so within several hundred\n   milliseconds.  This
      makes them unlikely targets in forking scenarios,\n   since alternative targets
      of the forking process would virtually\n   never be able to respond more quickly
      than an automated system,\n   unless they are themselves automated systems --
      in which case, there\n   is little point in setting up a response time race
      between two\n   automated systems.  Issues with ringing tone generation in the\n
      \  Gateway model are also mitigated, both by the typically quick 200 OK\n   response
      time, and because this specification mandates that no media\n   packets are
      generated until the receipt of an ACK (thus eliminating\n   the need for the
      User Agent to perform media packet analysis).\n   Note that the offer of early
      media by a VoiceXML Media Server does\n   not imply that the referenced VoiceXML
      application can always be\n   fetched and executed successfully.  For instance,
      if the HTTP\n   Application Server were to return a 4xx response in step 10
      above, or\n   if the provided VoiceXML content was not valid, the VoiceXML Media\n
      \  Server would still return a 500 response (as per Section 2.2).  At\n   this
      point, it would be the responsibility of the Application Server\n   to tear
      down any media streams established with the media server.\n"
    title: 3.2.  Early Media
  - contents:
    - "3.3.  Modifying the Media Session\n   The VoiceXML Media Server MUST allow
      the media session to be modified\n   via a re-INVITE and SHOULD support the
      UPDATE method [RFC3311] for\n   the same purpose.  In particular, it MUST be
      possible to change\n   streams between sendrecv, sendonly, and recvonly as specified
      in\n   [RFC3264].\n   Unidirectional streams are useful for announcement- or
      listening-only\n   (hotword).  The preferred mechanism for putting the media
      session on\n   hold is specified in [RFC3264], i.e., the UA modifies the stream
      to\n   be sendonly and mutes its own stream.  Modification of the media\n   session
      does not affect VoiceXML application execution (except that\n   recognition
      actions initiated while on hold will result in noinput\n   timeouts).\n"
    title: 3.3.  Modifying the Media Session
  - contents:
    - "3.4.  Audio and Video Codecs\n   For the purposes of achieving a basic level
      of interoperability, this\n   section specifies a minimal subset of codecs and
      RTP [RFC3550]\n   payload formats that MUST be supported by the VoiceXML Media
      Server.\n   For audio-only applications, G.711 mu-law and A-law MUST be supported\n
      \  using the RTP payload type 0 and 8 [RFC3551].  Other codecs and\n   payload
      formats MAY be supported.\n   Video telephony applications, which employ a video
      stream in addition\n   to the audio stream, are possible in VoiceXML 2.0/2.1
      through the use\n   of multimedia file container formats such as the .3gp [TS26244]
      and\n   .mp4 formats [IEC14496-14].  Video support is optional for this\n   specification.
      \ If video is supported then:\n   1.  H.263 Baseline [RFC4629] MUST be supported.
      \ For legacy reasons,\n       the 1996 version of H.263 MAY be supported using
      the RTP payload\n       format defined in [RFC2190] (payload type 34 [RFC3551]).\n
      \  2.  Adaptive Multi-Rate (AMR) narrow band audio [RFC4867] SHOULD be\n       supported.\n
      \  3.  MPEG-4 video [RFC3016] SHOULD be supported.\n   4.  MPEG-4 Advanced Audio
      Coding (AAC) audio [RFC3016] SHOULD be\n       supported.\n   5.  Other codecs
      and payload formats MAY be supported.\n   Video record operations carried out
      by the VoiceXML Media Server\n   typically require receipt of an intra-frame
      before the recording can\n   commence.  The VoiceXML Media Server SHOULD use
      the mechanism\n   described in [RFC4585] to request that a new intra-frame be
      sent.\n   Since some applications may choose to transfer confidential\n   information,
      the VoiceXML Media Server MUST support Secure RTP (SRTP)\n   [RFC3711] as discussed
      in Section 9.\n"
    title: 3.4.  Audio and Video Codecs
  - contents:
    - "3.5.  DTMF\n   DTMF events [RFC4733] MUST be supported.  When the User Agent
      does\n   not indicate support for [RFC4733], the VoiceXML Media Server MAY\n
      \  perform DTMF detection using other means such as detecting DTMF tones\n   in
      the audio stream.  Implementation note: the reason only [RFC4733]\n   telephone-events
      must be used when the User Agent indicates support\n   of it is to avoid the
      risk of double detection of DTMF if detection\n   on the audio stream was simultaneously
      applied.\n"
    title: 3.5.  DTMF
  title: 3.  Media Support
- contents:
  - "4.  Returning Data to the Application Server\n   This section discusses the mechanisms
    for returning data (e.g.,\n   collected utterance or digit information) from the
    VoiceXML Media\n   Server to the Application Server.\n"
  - contents:
    - "4.1.  HTTP Mechanism\n   At any time during the execution of the VoiceXML application,
      data\n   can be returned to the Application Server via HTTP using standard\n
      \  VoiceXML elements such as <submit> or <subdialog>.  Notably, the\n   <data>
      element in VoiceXML 2.1 [VXML21] allows data to be sent to the\n   Application
      Server efficiently without requiring a VoiceXML page\n   transition and is ideal
      for short VoiceXML applications such as\n   \"prompt and collect\".\n   For
      most applications, it is necessary to correlate the information\n   being passed
      over HTTP with a particular VoiceXML Session.  One way\n   this can be achieved
      is to include the SIP Call-ID (accessible in\n   VoiceXML via the session.connection.protocol.sip.headers
      array)\n   within the HTTP POST fields.  Alternatively, a unique \"POST-back
      URI\"\n   can be specified as an application-specific URI parameter in the\n
      \  Request-URI of the initial INVITE (accessible in VoiceXML via the\n   session.connection.protocol.sip.requesturi
      array).\n   Since some applications may choose to transfer confidential\n   information,
      the VoiceXML Media Server MUST support the https: scheme\n   as discussed in
      Section 9.\n"
    title: 4.1.  HTTP Mechanism
  - contents:
    - "4.2.  SIP Mechanism\n   Data can be returned to the Application Server via
      the expr or\n   namelist attribute on <exit> or the namelist attribute on\n
      \  <disconnect>.  A VoiceXML Media Server MUST support encoding of the\n   expr/namelist
      data in the message body of a BYE request sent from the\n   VoiceXML Media Server
      as a result of encountering the <exit> or\n   <disconnect> element.  A VoiceXML
      Media Server MAY support inclusion\n   of the expr/namelist data in the message
      body of the 200 OK message\n   in response to a received BYE request (i.e.,
      when the VoiceXML\n   application responds to the connection.disconnect.hangup
      event and\n   subsequently executes an <exit> element with the expr or namelist\n
      \  attribute specified).\n   Note that sending expr/namelist data in the 200
      OK response requires\n   that the VoiceXML Media Server delay the final response
      to the\n   received BYE request until the VoiceXML application's post-disconnect\n
      \  final processing state terminates.  This mechanism is subject to the\n   constraint
      that the VoiceXML Media Server must respond before the\n   User Agent Client's
      (UAC's) timer F expires (defaults to 32 seconds).\n   Moreover, for unreliable
      transports, the UAC will retransmit the BYE\n   request according to the rules
      of [RFC3261].  The VoiceXML Media\n   Server SHOULD implement the recommendations
      of [RFC4320] regarding\n   when to send the 100 Trying provisional response
      to the BYE request.\n   If a VoiceXML application executes a <disconnect> [VXML21]
      and then\n   subsequently executes an <exit> with namelist information, the\n
      \  namelist information from the <exit> element is discarded.\n   Namelist variables
      are first converted to their \"JSON value\"\n   equivalent [RFC4627] and encoded
      in the message body using the\n   application/x-www-form-urlencoded format content
      type [HTML4].  The\n   behavior resulting from specifying a recording variable
      in the\n   namelist or an ECMAScript object with circular references is not\n
      \  defined.  If the expr attribute is specified on the <exit> element\n   instead
      of the namelist attribute, the reserved name __exit is used.\n   To allow the
      Application Server to differentiate between a BYE\n   resulting from a <disconnect>
      from one resulting from an <exit>, the\n   reserved name __reason is used, with
      a value of \"disconnect\" (without\n   brackets) to reflect the use of VoiceXML's
      <disconnect> element, and\n   a value of \"exit\" (without brackets) to an explicit
      <exit> in the\n   VoiceXML document.  If the session terminates for other reasons
      (such\n   as the media server encountering an error), this parameter may be\n
      \  omitted, or may take on platform-specific values prefixed with an\n   underscore.\n
      \  This specification extends the application/x-www-form-urlencoded by\n   replacing
      non-ASCII characters with one or more octets of the UTF-8\n   representation
      of the character, with each octet in turn replaced by\n   %HH, where HH represents
      the uppercase hexadecimal notation for the\n   octet value and % is a literal
      character.  As a consequence, the\n   Content-Type header field in a BYE message
      containing expr/namelist\n   data MUST be set to application/x-www-form-urlencoded;charset=utf-8.\n
      \  The following table provides some examples of <exit> usage and the\n   corresponding
      result content.\n    +----------------------------------------------------------------+\n
      \   |<exit> Usage                  | Result Content                  |\n    |------------------------------|---------------------------------|\n
      \   |<exit/>                       | __reason=exit                   |\n    |<exit
      expr=\"5\"/>              | __exit=5&__reason=exit          |\n    |<exit expr=\"'done'\"/>
      \        | __exit=\"done\"&__reason=exit     |\n    |<exit expr=\"userAuthorized\"/>
      | __exit=true&__reason=exit       |\n    |<exit namelist=\"pin errors\"/> |
      pin=1234&errors=0&__reason=exit |\n    +----------------------------------------------------------------+\n
      \   assuming the following VoiceXML variables and values:\n        userAuthorized
      = true\n        pin = 1234\n        errors = 0\n   For example, consider the
      VoiceXML snippet:\n       ...\n       <exit namelist=\"id pin\"/>\n       ...\n
      \  If id equals 1234 and pin equals 9999, say, the BYE message would\n   look
      similar to:\n      BYE sip:user@pc33.example.com SIP/2.0\n      Via: SIP/2.0/UDP
      192.0.2.4;branch=z9hG4bKnashds10\n      Max-Forwards: 70\n      From: sip:dialog@example.com;tag=a6c85cf\n
      \     To: sip:user@example.com;tag=1928301774\n      Call-ID: a84b4c76e66710\n
      \     CSeq: 231 BYE\n      Content-Type: application/x-www-form-urlencoded;charset=utf-8\n
      \     Content-Length: 30\n      id=1234&pin=9999&__reason=exit\n   Since some
      applications may choose to transfer confidential\n   information, the VoiceXML
      Media Server MUST support the S/MIME\n   encoding of SIP message bodies as discussed
      in Section 9.\n"
    title: 4.2.  SIP Mechanism
  title: 4.  Returning Data to the Application Server
- contents:
  - "5.  Outbound Calling\n   Outbound calls can be triggered via the Application
    Server using\n   third-party call control [RFC3725].\n   Flow IV from [RFC3725]
    is recommended in conjunction with the\n   VoiceXML Session preparation mechanism.
    \ This flow has several\n   advantages over others, namely:\n   1.  Selection
    of a VoiceXML Media Server and preparation of the\n       VoiceXML application
    can occur before the call is placed to avoid\n       the callee experiencing delays.\n
    \  2.  Avoidance of timing difficulties that could occur with other\n       flows
    due to the time taken to fetch and parse the initial\n       VoiceXML document.\n
    \  3.  The flow is IPv6 compatible.\n   An example flow for an Application-Server-initiated
    outbound call is\n   provided in Section 2.6.2.\n"
  title: 5.  Outbound Calling
- contents:
  - "6.  Call Transfer\n   While VoiceXML is at its core a dialog language, it also
    provides\n   optional call transfer capability.  VoiceXML's transfer capability
    is\n   particularly suited to the PSTN IVR Service Node use case described\n   in
    Section 1.1.2.  It is NOT RECOMMENDED to use VoiceXML's call\n   transfer capability
    in networks involving Application Servers.\n   Rather, the Application Server
    itself can provide call routing\n   functionality by taking signaling actions
    based on the data returned\n   to it from the VoiceXML Media Server via HTTP or
    in the SIP BYE\n   message.\n   If VoiceXML transfer is supported, the mechanism
    described in this\n   section MUST be employed.  The transfer flows specified
    here are\n   selected on the basis that they provide the best interworking across\n
    \  a wide range of SIP devices.  CCXML<->VoiceXML implementations, which\n   require
    tight-coupling in the form of bidirectional eventing to\n   support all transfer
    types defined in VoiceXML, may benefit from\n   other approaches, such as the
    use of SIP event packages [RFC3265].\n   In what follows, the provisional responses
    have been omitted for\n   clarity.\n"
  - contents:
    - "6.1.  Blind\n   The blind-transfer sequence is initiated by the VoiceXML Media
      Server\n   via a REFER message [RFC3515] on the original SIP dialog.  The\n
      \  Refer-To header contains the URI for the called party, as specified\n   via
      the dest or destexpr attributes on the VoiceXML <transfer> tag.\n   If the REFER
      request is accepted, in which case the VoiceXML Media\n   Server will receive
      a 2xx response, the VoiceXML Media Server throws\n   the connection.disconnect.transfer
      event and will terminate the\n   VoiceXML Session with a BYE message.  For blind
      transfers,\n   implementations MAY use [RFC4488] to suppress the implicit\n
      \  subscription associated with the REFER message.\n   If the REFER request
      results in a non-2xx response, the <transfer>'s\n   form item variable (or event
      raised) depends on the SIP response and\n   is specified in the following table.
      \ Note that this indicates that\n   the transfer request was rejected.\n    +-------------------------+-----------------------------------+\n
      \   | SIP Response            | <transfer> variable / event       |\n    +-------------------------+-----------------------------------+\n
      \   | 404 Not Found           | error.connection.baddestination   |\n    | 405
      Method Not Allowed  | error.unsupported.transfer.blind  |\n    | 503 Service
      Unavailable | error.connection.noresource       |\n    | (No response)           |
      network_busy                      |\n    | (Other 3xx/4xx/5xx/6xx) | unknown
      \                          |\n    +-------------------------+-----------------------------------+\n
      \  An example is illustrated below (provisional responses and NOTIFY\n   messages
      corresponding to provisional responses have been omitted for\n   clarity).\n
      \  User Agent 1        VoiceXML        User Agent 2\n     (Caller)        Media
      Server        (Callee)\n        |                 |                 |\n        |(0)
      RTP/SRTP     |                 |\n        |.................|                 |\n
      \       |                 |                 |\n        |(1) REFER        | <transfer>
      \     |\n        |<----------------|                 |\n        |(2) 202 Accepted
      |                 |\n        |---------------->|                 |\n        |(3)
      BYE          |                 |\n        |<----------------|                 |\n
      \       |(4) 200 OK       |                 |\n        |---------------->|                 |\n
      \       |                 | Stop RTP (0)    |\n        |(5) INVITE                         |\n
      \       |---------------------------------->|\n        |(6) 200 OK                         |\n
      \       |<----------------------------------|\n        |(7) NOTIFY       |                 |\n
      \       |---------------->|                 |\n        |(8) 200 OK       |                 |\n
      \       |<--------------- |                 |\n        |(9) ACK                            |\n
      \       |---------------------------------->|\n        |(10) RTP/SRTP                      |\n
      \       |...................................|\n        |                 |                 |\n
      \  If the aai or aaiexpr attribute is present on <transfer>, it is\n   appended
      to the Refer-To URI as a parameter named \"aai\" in the REFER\n   method.  Reserved
      characters are URL-encoded as required for SIP/SIPS\n   URIs [RFC3261].  The
      mapping of values outside of the ASCII range is\n   platform specific.\n"
    title: 6.1.  Blind
  - contents:
    - "6.2.  Bridge\n   The bridge transfer function results in the creation of a
      small\n   multi-party session involving the Caller, the VoiceXML Media Server,\n
      \  and the Callee.  The VoiceXML Media Server invites the Callee to the\n   session
      and will eject the Callee if the transfer is terminated.\n   If the aai or aaiexpr
      attribute is present on <transfer>, it is\n   appended to the Request-URI in
      the INVITE as a URI parameter named\n   \"aai\".  Reserved characters are URL-encoded
      as required for SIP/SIPS\n   URIs [RFC3261].  The mapping of values outside
      of the ASCII range is\n   platform specific.\n   During the transfer attempt,
      audio specified in the transferaudio\n   attribute of <transfer> is streamed
      to User Agent 1.  A VoiceXML\n   Media Server MAY play early media received
      from the Callee to the\n   Caller if the transferaudio attribute is omitted.\n
      \  The bridge transfer sequence is illustrated below.  The VoiceXML\n   Media
      Server (acting as a UAC) makes a call to User Agent 2 with the\n   same codecs
      used by User Agent 1.  When the call setup is complete,\n   RTP flows between
      User Agent 2 and the VoiceXML Media Server.  This\n   stream is mixed with User
      Agent 1's.\n   User Agent 1         VoiceXML          User Agent 2\n     (Caller)
      \        Media Server          (Callee)\n       |                   |                   |\n
      \      |(0)RTP/SRTP        |                   |\n       |...................|
      \                  |\n       |                   |                   |\n       |
      \        <transfer>|(1)INVITE [offer]  |\n       |                   |------------------>|\n
      \      |                   |(2) 200 OK [answer]|\n       |                   |<------------------|\n
      \      |                   |(3) ACK            |\n       |                   |------------------>|\n
      \      |                   |(4) RTP/SRTP       |\n       |              mix
      \ |...................|\n       |            (0)+(4)|                   |\n
      \  If a final response is not received from User Agent 2 from the INVITE\n   and
      the connecttimeout expires (specified as an attribute of\n   <transfer>), the
      VoiceXML Media Server will issue a CANCEL to\n   terminate the transaction and
      the <transfer>'s form item variable is\n   set to noanswer.\n   If INVITE results
      in a non-2xx response, the <transfer>'s form item\n   variable (or event raised)
      depends on the SIP response and is\n   specified in the following table.\n    +-------------------------+-----------------------------------+\n
      \   | SIP Response            | <transfer> variable / event       |\n    +-------------------------+-----------------------------------+\n
      \   | 404 Not Found           | error.connection.baddestination   |\n    | 405
      Method Not Allowed  | error.unsupported.transfer.bridge |\n    | 408 Request
      Timeout     | noanswer                          |\n    | 486 Busy Here           |
      busy                              |\n    | 503 Service Unavailable | error.connection.noresource
      \      |\n    | (No response)           | network_busy                      |\n
      \   | (Other 3xx/4xx/5xx/6xx) | unknown                           |\n    +-------------------------+-----------------------------------+\n
      \  Once the transfer is established, the VoiceXML Media Server can\n   \"listen\"
      to the media stream from User Agent 1 to perform speech or\n   DTMF hotword,
      which when matched results in a near-end disconnect,\n   i.e., the VoiceXML
      Media Server issues a BYE to User Agent 2 and the\n   VoiceXML application continues
      with User Agent 1.  A BYE will also be\n   issued to User Agent 2 if the call
      duration exceeds the maximum\n   duration specified in the maxtime attribute
      on <transfer>.\n   If User Agent 2 issues a BYE during the transfer, the transfer\n
      \  terminates and the VoiceXML <transfer>'s form item variable receives\n   the
      value far_end_disconnect.  If User Agent 1 issues a BYE during\n   the transfer,
      the transfer terminates and the VoiceXML event\n   connection.disconnect.transfer
      is thrown.\n"
    title: 6.2.  Bridge
  - contents:
    - "6.3.  Consultation\n   The consultation transfer (also called attended transfer
      [RFC5359])\n   is similar to a blind transfer except that the outcome of the\n
      \  transfer call setup is known and the Caller is not dropped as a\n   result
      of an unsuccessful transfer attempt.\n   Consultation transfer commences with
      the same flow as for bridge\n   transfer except that the RTP streams are not
      mixed at step (4) and\n   error.unsupported.transfer.consultation supplants\n
      \  error.unsupported.transfer.bridge.  Assuming a new SIP dialog with\n   User
      Agent 2 is created, the remainder of the sequence follows as\n   illustrated
      below (provisional responses and NOTIFY messages\n   corresponding to provisional
      responses have been omitted for\n   clarity).  Consultation transfer makes use
      of the Replaces: header\n   [RFC3891] such that User Agent 1 calls User Agent
      2 and replaces the\n   latter's SIP dialog with the VoiceXML Media Server with
      a new SIP\n   dialog between the Caller and Callee.\n   User Agent 1        VoiceXML
      \      User Agent 2\n     (Caller)        Media Server       (Callee)\n        |
      \                |                 |\n        |(0) RTP/SRTP     |                 |\n
      \       |.................|(4) RTP/SRTP     |\n        |                 |.................|\n
      \       |(5) REFER        |                 |\n        |<----------------|                 |\n
      \       |(6) 202 Accepted |                 |\n        |---------------->|                 |\n
      \       |(7) INVITE Replaces:ms1.example.com|\n        |---------------------------------->|\n
      \       |(8) 200 OK                         |\n        |<----------------------------------|\n
      \       |(9) ACK                            |\n        |---------------------------------->|\n
      \       |(10) RTP/SRTP                      |\n        |...................................|\n
      \       |                 |(11) BYE         |\n        |                 |<----------------|\n
      \       |                 |(12) 200 OK      |\n        |                 |---------------->|
      Stop\n        |(13) NOTIFY      |                 | RTP (4)\n        |---------------->|
      \                |\n        |(14) 200 OK      |                 |\n        |<----------------|
      \                |\n        |(15) BYE         |                 |\n        |<----------------|
      \                |\n        |(16) 200 OK      |                 |\n        |---------------->|
      Stop            |\n        |                 | RTP (0)         |\n   If a response
      other than 202 Accepted is received in response to the\n   REFER request sent
      to User Agent 1, the transfer terminates and an\n   error.unsupported.transfer.consultation
      event is raised.  In\n   addition, a BYE is sent to User Agent 2 to terminate
      the established\n   outbound leg.\n   The VoiceXML Media Server uses receipt
      of a NOTIFY message with a\n   sipfrag message of 200 OK to determine that the
      consultation transfer\n   has succeeded.  When this occurs, the connection.disconnect.transfer\n
      \  event will be thrown to the VoiceXML application, and a BYE is sent\n   to
      User Agent 1 to terminate the session.  A NOTIFY message with a\n   non-2xx
      final response sipfrag message body will result in the\n   transfer terminating
      and the associated VoiceXML input item variable\n   being set to 'unknown'.
      \ Note that as a consequence of this\n   mechanism, implementations MUST NOT
      use [RFC4488] to suppress the\n   implicit subscription associated with the
      REFER message for\n   consultation transfers.\n"
    title: 6.3.  Consultation
  title: 6.  Call Transfer
- contents:
  - "7.  Contributors\n   The bulk of the early work for this effort was carried out
    on weekly\n   teleconferences and over email.  The authors would particularly
    like\n   to recognize the contributions of R. J. Auburn (Voxeo), Jeff Haynie\n
    \  (Hakano), and Scott McGlashan (Hewlett-Packard).\n"
  title: 7.  Contributors
- contents:
  - "8.  Acknowledgements\n   This document owes its genesis to, \"A SIP Interface
    to VoiceXML\n   Dialog Servers\", authored by J. Rosenberg, P. Mataga, and D.
    Ladd.\n   The following people had input to the current document:\n      R. J.
    Auburn (Voxeo)\n      Hans Bjurstrom (Hewlett-Packard)\n      Emily Candell (Comverse)\n
    \     Peter Danielsen (Lucent)\n      Brian Frasca (Tellme)\n      Jeff Haynie
    (Hakano)\n      Scott McGlashan (Hewlett-Packard)\n      Matt Oshry (Tellme)\n
    \     Rao Surapaneni (Tellme)\n   The authors would like to acknowledge the support
    of Cullen Jennings\n   and the Mediactrl chairs, Eric Burger and Spencer Dawkins.\n"
  title: 8.  Acknowledgements
- contents:
  - "9.  Security Considerations\n   Exposing a VoiceXML media service with a well-known
    address may\n   enhance the possibility of exploitation (for example, an invoked\n
    \  network service may trigger a billing event).  The VoiceXML Media\n   Server
    is RECOMMENDED to use standard SIP mechanisms [RFC3261] to\n   authenticate requesting
    endpoints and authorize per local policy.\n   Some applications may choose to
    transfer confidential information to\n   or from the VoiceXML Media Server.  To
    provide data confidentiality,\n   the VoiceXML Media Server MUST implement the
    sips: and https: schemes\n   in addition to S/MIME message body encoding as described
    in\n   [RFC3261].\n   The VoiceXML Media Server MUST support Secure RTP (SRTP)
    [RFC3711] to\n   provide confidentiality, authentication, and replay protection
    for\n   RTP media streams (including RTCP control traffic).\n   To mitigate the
    possibility of denial-of-service attacks, the\n   VoiceXML Media Server is RECOMMENDED
    (in addition to authenticating\n   and authorizing endpoints described above)
    to provide mechanisms for\n   implementing local policies such as the time-limiting
    of VoiceXML\n   application execution.\n"
  title: 9.  Security Considerations
- contents:
  - "10.  IANA Considerations\n   IANA has registered the following parameters in
    the SIP/SIPS URI\n   Parameters registry, following the Specification Required
    policy of\n   [RFC3969]:\n   Parameter Name    Predefined Values    Reference\n
    \  --------------    -----------------    ---------\n   maxage                   No
    \           RFC 5552\n   maxstale                 No            RFC 5552\n   method
    \             \"get\" / \"post\"     RFC 5552\n   postbody                 No
    \           RFC 5552\n   ccxml                    No            RFC 5552\n   aai
    \                     No            RFC 5552\n"
  title: 10.  IANA Considerations
- contents:
  - '11.  References

    '
  - contents:
    - "11.1.  Normative References\n   [HTML4]        Raggett, D., Le Hors, A., and
      I. Jacobs, \"HTML 4.01\n                  Specification\", W3C Recommendation,
      Dec 1999.\n   [RFC2119]      Bradner, S., \"Key words for use in RFCs to Indicate\n
      \                 Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2616]
      \     Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,\n                  Masinter,
      L., Leach, P., and T. Berners-Lee,\n                  \"Hypertext Transfer Protocol
      -- HTTP/1.1\", RFC 2616,\n                  June 1999.\n   [RFC3016]      Kikuchi,
      Y., Nomura, T., Fukunaga, S., Matsui, Y., and\n                  H. Kimata,
      \"RTP Payload Format for MPEG-4 Audio/Visual\n                  Streams\", RFC
      3016, November 2000.\n   [RFC3261]      Rosenberg, J., Schulzrinne, H., Camarillo,
      G.,\n                  Johnston, A., Peterson, J., Sparks, R., Handley, M.,\n
      \                 and E. Schooler, \"SIP: Session Initiation Protocol\",\n                  RFC
      3261, June 2002.\n   [RFC3264]      Rosenberg, J. and H. Schulzrinne, \"An Offer/Answer\n
      \                 Model with Session Description Protocol (SDP)\",\n                  RFC
      3264, June 2002.\n   [RFC3265]      Roach, A., \"Session Initiation Protocol
      (SIP)-Specific\n                  Event Notification\", RFC 3265, June 2002.\n
      \  [RFC3311]      Rosenberg, J., \"The Session Initiation Protocol (SIP)\n                  UPDATE
      Method\", RFC 3311, October 2002.\n   [RFC3326]      Schulzrinne, H., Oran,
      D., and G. Camarillo, \"The\n                  Reason Header Field for the Session
      Initiation\n                  Protocol (SIP)\", RFC 3326, December 2002.\n   [RFC3515]
      \     Sparks, R., \"The Session Initiation Protocol (SIP)\n                  Refer
      Method\", RFC 3515, April 2003.\n   [RFC3550]      Schulzrinne, H., Casner,
      S., Frederick, R., and V.\n                  Jacobson, \"RTP: A Transport Protocol
      for Real-Time\n                  Applications\", STD 64, RFC 3550, July 2003.\n
      \  [RFC3551]      Schulzrinne, H. and S. Casner, \"RTP Profile for Audio\n                  and
      Video Conferences with Minimal Control\", STD 65,\n                  RFC 3551,
      July 2003.\n   [RFC3711]      Baugher, M., McGrew, D., Naslund, M., Carrara,
      E., and\n                  K. Norrman, \"The Secure Real-time Transport Protocol\n
      \                 (SRTP)\", RFC 3711, March 2004.\n   [RFC3725]      Rosenberg,
      J., Peterson, J., Schulzrinne, H., and G.\n                  Camarillo, \"Best
      Current Practices for Third Party\n                  Call Control (3pcc) in
      the Session Initiation Protocol\n                  (SIP)\", BCP 85, RFC 3725,
      April 2004.\n   [RFC3891]      Mahy, R., Biggs, B., and R. Dean, \"The Session\n
      \                 Initiation Protocol (SIP) \"Replaces\" Header\",\n                  RFC
      3891, September 2004.\n   [RFC3986]      Berners-Lee, T., Fielding, R., and
      L. Masinter,\n                  \"Uniform Resource Identifier (URI): Generic
      Syntax\",\n                  STD 66, RFC 3986, January 2005.\n   [RFC4244]      Barnes,
      M., \"An Extension to the Session Initiation\n                  Protocol (SIP)
      for Request History Information\",\n                  RFC 4244, November 2005.\n
      \  [RFC4320]      Sparks, R., \"Actions Addressing Identified Issues with\n
      \                 the Session Initiation Protocol's (SIP) Non-INVITE\n                  Transaction\",
      RFC 4320, January 2006.\n   [RFC4488]      Levin, O., \"Suppression of Session
      Initiation Protocol\n                  (SIP) REFER Method Implicit Subscription\",
      RFC 4488,\n                  May 2006.\n   [RFC4585]      Ott, J., Wenger, S.,
      Sato, N., Burmeister, C., and J.\n                  Rey, \"Extended RTP Profile
      for Real-time Transport\n                  Control Protocol (RTCP)-Based Feedback
      (RTP/AVPF)\",\n                  RFC 4585, July 2006.\n   [RFC4627]      Crockford,
      D., \"The application/json Media Type for\n                  JavaScript Object
      Notation (JSON)\", RFC 4627,\n                  July 2006.\n   [RFC4629]      Ott,
      H., Bormann, C., Sullivan, G., Wenger, S., and R.\n                  Even, \"RTP
      Payload Format for ITU-T Rec\", RFC 4629,\n                  January 2007.\n
      \  [RFC4733]      Schulzrinne, H. and T. Taylor, \"RTP Payload for DTMF\n                  Digits,
      Telephony Tones, and Telephony Signals\",\n                  RFC 4733, December
      2006.\n   [RFC4855]      Casner, S., \"Media Type Registration of RTP Payload\n
      \                 Formats\", RFC 4855, February 2007.\n   [RFC4867]      Sjoberg,
      J., Westerlund, M., Lakaniemi, A., and Q.\n                  Xie, \"RTP Payload
      Format and File Storage Format for\n                  the Adaptive Multi-Rate
      (AMR) and Adaptive Multi-Rate\n                  Wideband (AMR-WB) Audio Codecs\",
      RFC 4867, April 2007.\n   [VXML20]       McGlashan, S., Burnett, D., Carter,
      J., Danielsen, P.,\n                  Ferrans, J., Hunt, A., Lucas, B., Porter,
      B., Rehor,\n                  K., and S. Tryphonas, \"Voice Extensible Markup\n
      \                 Language (VoiceXML) Version 2.0\", W3C Recommendation,\n                  March
      2004.\n   [VXML21]       Oshry, M., Auburn, R J., Baggia, P., Bodell, M.,\n
      \                 Burke, D., Burnett, D., Candell, E., Kilic, H.,\n                  McGlashan,
      S., Lee, A., Porter, B., and K. Rehor,\n                  \"Voice Extensible
      Markup Language (VoiceXML) Version\n                  2.1\", W3C Candidate Recommendation,
      June 2005.\n"
    title: 11.1.  Normative References
  - contents:
    - "11.2.  Informative References\n   [CCXML10]      Auburn, R J., \"Voice Browser
      Call Control: CCXML\n                  Version 1.0\", W3C Working Draft, June
      2005.\n   [IEC14496-14]  \"Information technology. Coding of audio-visual\n
      \                 objects. MP4 file format\", ISO/IEC ISO/IEC 14496-\n                  14:2003,
      October 2003.\n   [MRCPv2]       Shanmugham, S. and D. Burnett, \"Media Resource
      Control\n                  Protocol Version 2 (MRCPv2)\", Work in Progress,\n
      \                 November 2008.\n   [RFC2190]      Zhu, C., \"RTP Payload Format
      for H.263 Video Streams\",\n                  RFC 2190, September 1997.\n   [RFC3960]
      \     Camarillo, G. and H. Schulzrinne, \"Early Media and\n                  Ringing
      Tone Generation in the Session Initiation\n                  Protocol (SIP)\",
      RFC 3960, December 2004.\n   [RFC3969]      Camarillo, G., \"The Internet Assigned
      Number Authority\n                  (IANA) Uniform Resource Identifier (URI)
      Parameter\n                  Registry for the Session Initiation Protocol (SIP)\",\n
      \                 BCP 99, RFC 3969, December 2004.\n   [RFC4240]      Burger,
      E., Van Dyke, J., and A. Spitzer, \"Basic\n                  Network Media Services
      with SIP\", RFC 4240,\n                  December 2005.\n   [RFC5359]      Johnston,
      A., Sparks, R., Cunningham, C., Donovan, S.,\n                  and K. Summers,
      \"Session Initiation Protocol Service\n                  Examples\", BCP 144,
      RFC 5359, October 2008.\n   [TS23002]      \"3rd Generation Partnership Project:
      Network\n                  architecture (Release 6)\", 3GPP TS 23.002 v6.6.0,\n
      \                 December 2004.\n   [TS26244]      \"Transparent end-to-end
      packet switched streaming\n                  service (PSS); 3GPP file format
      (3GP)\", 3GPP TS 26.244\n                  v6.4.0, December 2004.\n"
    title: 11.2.  Informative References
  title: 11.  References
- contents:
  - "Appendix A.  Notes on Normative References\n   We make a \"downref\" normative
    reference to [RFC4627] -- an\n   Informational document describing a proprietary
    (but extremely\n   popular) format.\n"
  title: Appendix A.  Notes on Normative References
- contents:
  - "Authors' Addresses\n   Dave Burke\n   Google\n   Belgrave House, 76 Buckingham
    Palace Road\n   London  SW1W 9TQ\n   United Kingdom\n   EMail: daveburke@google.com\n
    \  Mark Scott\n   Genesys\n   1120 Finch Avenue West, 8th floor\n   Toronto, Ontario
    \ M3J 3H7\n   Canada\n   EMail: Mark.Scott@genesyslab.com\n"
  title: Authors' Addresses
