- contents:
  - "             Integrity Transform Carrying Roll-Over Counter\n           for the
    Secure Real-time Transport Protocol (SRTP)\n"
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2007).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document defines an integrity transform for Secure Real-time\n
    \  Transport Protocol (SRTP; see RFC 3711), which allows the roll-over\n   counter
    (ROC) to be transmitted in SRTP packets as part of the\n   authentication tag.
    \ The need for sending the ROC in SRTP packets\n   arises in situations where
    the receiver joins an ongoing SRTP session\n   and needs to quickly and robustly
    synchronize.  The mechanism also\n   enhances SRTP operation in cases where there
    is a risk of losing\n   sender-receiver synchronization.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n
    \     1.1. Terminology ................................................3\n   2.
    The Transform ...................................................3\n   3. Transform
    Modes .................................................5\n   4. Parameter Negotiation
    ...........................................5\n   5. Security Considerations .........................................7\n
    \  6. IANA Considerations ............................................10\n   7.
    Acknowledgements ...............................................10\n   8. References
    .....................................................10\n      8.1. Normative
    References ......................................10\n      8.2. Informative References
    ....................................10\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   When a receiver joins an ongoing SRTP [RFC3711] session,
    out-of-band\n   signaling must provide the receiver with the value of the ROC
    the\n   sender is currently using.  For instance, it can be transferred in\n   the
    Common Header Payload of a MIKEY [RFC3830] message.  In some\n   cases, the receiver
    will not be able to synchronize his ROC with the\n   one used by the sender, even
    if it is signaled to him out of band.\n   Examples of where synchronization failure
    will appear are:\n   1. The receiver receives the ROC in a MIKEY message together
    with a\n      key required for a particular continuous service.  He does not,\n
    \     however, join the service until after a few hours, at which point\n      the
    sender's sequence number (SEQ) has wrapped around, and so the\n      sender, meanwhile,
    has increased the value of ROC.  When the user\n      joins the service, he grabs
    the SEQ from the first seen SRTP\n      packet and prepends the ROC to build the
    index.  If integrity\n      protection is used, the packet will be discarded.
    \ If there is no\n      integrity protection, the packet may (if key derivation
    rate is\n      non-zero) be decrypted using the wrong session key, as ROC is used\n
    \     as input in session key derivation.  In either case, the receiver\n      will
    not have its ROC synchronized with the sender, and it is not\n      possible to
    recover without out-of-band signaling.\n   2. If the receiver leaves the session
    (due to being out of radio\n      coverage or because of a user action), and does
    not start\n      receiving traffic from the service again until after 2^15 packets\n
    \     have been sent, the receiver will be out of synchronization (for\n      the
    same reasons as in example 1).\n   3. The receiver joins a service when the SEQ
    has recently wrapped\n      around (say, SEQ = 0x0001).  The sender generates
    a MIKEY message\n      and includes the current value of ROC (say, ROC = 1) in
    the MIKEY\n      message.  The MIKEY message reaches the receiver, who reads the\n
    \     ROC value and initializes its local ROC to 1.  Now, if an SRTP\n      packet
    prior to wraparound, i.e., with a SEQ lower than 0 (say,\n      SEQ = 0xffff),
    was delayed and reaches the receiver as the first\n      SRTP packet he sees,
    the receiver will initialize its highest\n      received sequence number, s_l,
    to 0xffff.  Next, the receiver will\n      receive SRTP packets with sequence
    numbers larger than zero, and\n      will deduce that the SEQ has wrapped.  Hence,
    the receiver will\n      incorrectly update the ROC and be out of synchronization.\n
    \  4. Similarly to (3), since the initial SEQ is selected at random by\n      the
    sender, it may happen to be selected as a value very close to\n      0xffff.  In
    this case, should the first few packets be lost, the\n      receiver may similarly
    end up out of synchronization.\n   These problems have been recognized in, e.g.,
    3GPP2 and 3GPP, where\n   SRTP is used for streaming media protection in their
    respective\n   multicast/broadcast solutions [BCMCS][MBMS].  Problem 4 actually\n
    \  exists inherently due to the way SEQ initialization is done in RTP.\n   One
    possible approach to address the issue could be to carry the ROC\n   in the MKI
    (Master Key Identifier) field of each SRTP packet.  This\n   has the advantage
    that the receiver immediately knows the entire\n   index for a packet.  Unfortunately,
    the MKI has no semantics in RFC\n   3711 (other than specifying master key), and
    a regular RFC 3711\n   compliant implementation would not be able to make use
    of the\n   information carried in the MKI.  Furthermore, the MKI field is not\n
    \  integrity protected; hence, care must be taken to avoid obvious\n   attacks
    against the synchronization.\n   In this document, a solution is presented where
    the ROC is carried in\n   the authentication tag of a special integrity transform
    in selected\n   SRTP packets.\n   The benefit of this approach is that the functionality
    of fast and\n   robust synchronization can be achieved as a separate integrity\n
    \  transform, using the hooks existing in SRTP.  Furthermore, when the\n   ROC
    is transmitted to the receiver it needs to be integrity protected\n   to avoid
    persistent denial-of-service (DoS) attacks or transmission\n   errors that could
    bring the receiver out of synchronization.  (A DoS\n   attack is regarded as persistent
    if it can last after the attacker\n   has left the area; in this particular case,
    an attacker could modify\n   the ROC in one packet and the victim would be out
    of synchronization\n   until the next ROC is transmitted).  The above discussion
    leads to\n   the conclusion that it makes sense to carry the ROC inside the\n
    \  authentication tag of an integrity transform.\n"
  - contents:
    - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
      \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and
      \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC
      2119 [RFC2119].\n"
    title: 1.1.  Terminology
  title: 1.  Introduction
- contents:
  - "2.  The Transform\n   The transform, hereafter called Roll-over Counter Carrying
    Transform\n   (or RCC for short), works as follows.\n   The sender processes the
    RTP packet according to RFC 3711.  When\n   applying the message integrity transform,
    the sender checks if the\n   SEQ is equal to 0 modulo some non-zero integer constant
    R.  If that\n   is the case, the sender computes the MAC in the same way as is
    done\n   when using the default integrity transform (i.e., HMAC-SHA1(auth_key,\n
    \  Authenticated_portion || ROC)).  Next, the sender truncates the MAC\n   by
    32 bits to generate MAC_tr, i.e., MAC_tr is the tag_length - 32\n   most significant
    bits of the MAC.  Next, the sender constructs the\n   tag as TAG = ROC_sender
    || MAC_tr, where ROC_sender is the value of\n   his local ROC, and appends the
    tag to the packet.  See the security\n   considerations section for discussions
    on the effects of shortening\n   the MAC.  In particular, note that a tag-length
    of 32 bits gives no\n   security at all.\n   If the SEQ is not equal to 0 mod
    R, the sender just proceeds to\n   process the packet according to RFC 3711 without
    performing the\n   actions in the previous paragraph.\n   The value R is the rate
    at which the ROC is included in the SRTP\n   packets.  Since the ROC consumes
    four octets, this gives the\n   possibility to use it sparsely.\n   When the receiver
    receives an SRTP packet, it processes the packet\n   according to RFC 3711 except
    that during authentication processing\n   ROC_local is replaced by ROC_sender
    (retrieved from the packet).\n   This works as follows.  In the step where integrity
    protection is to\n   be verified, if the SEQ is equal to 0 modulo R, the receiver
    extracts\n   ROC_sender from the TAG and verifies the MAC computed (in the same\n
    \  way as if the default integrity transform was used) over the\n   authenticated
    portion of the packet (as defined in [RFC3711]), but\n   concatenated with ROC_sender
    instead of concatenated with the\n   local_ROC.  The receiver generates MAC_tr
    for the MAC verification in\n   the same way the sender did.  Note that the session
    key used in the\n   MAC calculation is dependent on the ROC, and during the derivation
    of\n   the session integrity key, the ROC found in the packet under\n   consideration
    MUST be used.  If the verification is successful, the\n   receiver sets his local
    ROC equal to the ROC carried in the packet.\n   If the MAC does not verify, the
    packet MUST be dropped.  The\n   rationale for using the ROC from the packet in
    the MAC calculation is\n   that if the receiver has an incorrect ROC value, MAC
    verification\n   will fail, so the receiver will not correct his ROC.\n   If the
    SEQ is not equal to 0 mod R, the receiver just proceeds to\n   process the packet
    according to RFC 3711 without performing the\n   actions in the previous paragraph.\n
    \  Since Secure Real-time Transport Control Protocol (SRTCP) already\n   carries
    the entire index in-band, there is no reason to apply this\n   transform to SRTCP.
    \ Hence, the transform SHALL only be applied to\n   SRTP, and SHALL NOT be used
    with SRTCP.\n"
  title: 2.  The Transform
- contents:
  - "3.  Transform Modes\n   The above transform only provides integrity protection
    for the\n   packets that carry the ROC (this will be referred to as mode 1).  In\n
    \  the cases where there is a need to integrity protect all the packets,\n   the
    packets that do not have SEQ equal to 0 mod R MUST be protected\n   using the
    default integrity transform (this will be referred to as\n   mode 2).\n   Under
    some circumstances, it may be acceptable not to use integrity\n   protection on
    any of the packets; this will be referred to as mode 3.\n   Without integrity
    protection of the packets carrying the ROC, a DoS\n   attack, which will prevail
    until the next correctly received ROC, is\n   possible.  Make sure to carefully
    read the security considerations in\n   Section 5 before using mode 3.\n   In
    case no integrity protection is offered, i.e., mode 3, the\n   following applies.
    \ The receiver's SRTP layer SHOULD ignore the ROC\n   value from the packet if
    the application layer can indicate to it\n   that the local ROC is synchronized
    with the sender (hence, the packet\n   would be processed using the local ROC).
    \ Note that the received ROC\n   still MUST be removed from the packet before
    continued processing.\n   In this scenario, the application layer feedback to
    the SRTP layer\n   need not be on a per-packet basis, and it can consist merely
    of a\n   boolean value set by the application layer and read by the SRTP\n   layer.\n
    \  Thus, note the following difference.  Using mode 2 will integrity\n   protect
    all RTP packets, but only add ROC to those having SEQ\n   divisible by R.  Using
    mode 1 and setting R equal to one will also\n   integrity protect all packets,
    but will in addition to that add ROC\n   to each packet.  Modes 1 and 2 MUST compute
    the MAC in the same way\n   as the pre-defined authentication transform for SRTP,
    i.e., HMAC-\n   SHA1.\n   To comply with this specification, mode 1, mode 2, and
    mode 3 are\n   MANDATORY to implement.  However, it is up to local policy to decide\n
    \  which mode(s) are allowed to be used.\n"
  title: 3.  Transform Modes
- contents:
  - "4.  Parameter Negotiation\n   RCC requires that a few parameters are signaled
    out of band.  The\n   parameters that must be in place before the transform can
    be used are\n   integrity transform mode and the rate, R, at which the ROC will
    be\n   transmitted.  This can be done using, e.g., MIKEY [RFC3830].\n   To perform
    the parameter negotiation using MIKEY, three integrity\n   transforms have been
    registered -- RCCm1, RCCm2, and RCCm3 in Table\n   6.10.1.c of [RFC3830] -- for
    the three modes defined.\n                  Table 1.  Integrity transforms\n                      SRTP
    auth alg | Value\n                      --------------+------\n                      RCCm1
    \        |     2\n                      RCCm2         |     3\n                      RCCm3
    \        |     4\n   Furthermore, the parameter R has been registered in Table
    6.10.1.a of\n   [RFC3830].\n              Table 2.  Integrity transform parameter\n
    \       Type | Meaning                     | Possible values\n        -----+-----------------------------+----------------\n
    \        13  | ROC transmission rate       |  16-bit integer\n   The ROC transmission
    rate, R, is given in network byte order.  R MUST\n   be a non-zero unsigned integer.
    \ If the ROC transmission rate is not\n   included in the negotiation, the default
    value of 1 SHALL be used.\n   To have the ability to use different integrity transforms
    for SRTP\n   and SRTCP, which is needed in connection to the use of RCC, the\n
    \  following additional parameters have been registered in Table\n   6.10.1.a
    of [RFC3830]:\n                    Table 3.  Integrity parameters\n        Type
    | Meaning                     | Possible values\n        -----+-----------------------------+----------------\n
    \        14  | SRTP Auth. algorithm        | see below\n         15  | SRTCP Auth.
    algorithm       | see below\n         16  | SRTP Session Auth. key len  | see
    below\n         17  | SRTCP Session Auth. key len | see below\n         18  |
    SRTP Authentication tag len | see below\n         19  | SRTCP Authentication tag
    len| see below\n   The possible values for authentication algorithms (types 14
    and 15)\n   are the same as for the \"Authentication algorithm\" parameter (type
    2)\n   in Table 6.10.1.a of RFC 3830 with the addition of the values found\n   in
    Table 1 above.\n   The possible values for session authentication key lengths
    (types 16\n   and 17) are the same as for the \"Session Auth. key length\" parameter\n
    \  (type 3) in Table 6.10.1.a of RFC 3830.\n   The possible values for authentication
    tag lengths (types 18 and 19)\n   are the same as for the \"Authentication tag
    length\" parameter (type\n   11) in Table 6.10.1.a of RFC 3830 with the addition
    that the length\n   of ROC MUST be included in the \"Authentication tag length\"
    parameter.\n   This means that the minimum tag length when using RCC is 32 bits.\n
    \  To avoid ambiguities when introducing these new parameters that have\n   overlapping
    functionality to existing parameters in Table 6.10.1.a of\n   RFC 3830, the following
    approach MUST be taken: If any of the\n   parameter types 14-19 (specifying behavior
    specific to SRTP or SRTCP)\n   and a corresponding general parameter (type 2,
    3, or 11) are both\n   present in the policy, the more specific parameter SHALL
    have\n   precedence.  For example, if the \"Authentication algorithm\" parameter\n
    \  (type 2) is set to HMAC-SHA-1, and the \"SRTP Auth. Algorithm\" (type\n   14)
    is set to RCCm1, SRTP will use the RCCm1 algorithm, but since\n   there is no
    specific algorithm chosen for SRTCP, the more generally\n   specified one (HMAC-SHA-1)
    is used.\n"
  title: 4.  Parameter Negotiation
- contents:
  - "5.  Security Considerations\n   An analogous method already exists in SRTCP (the
    SRTCP index is\n   carried in each packet under integrity protection).  To the
    best of\n   our knowledge, the only security consideration introduced here is\n
    \  that the entire SRTP index (ROC || SEQ) will become public since it\n   is
    transferred without encryption.  (In normal SRTP operation, only\n   the SEQ-part
    of the index is disclosed.)  However, RFC 3711 does not\n   identify a need for
    encrypting the SRTP index.\n   It is important to realize that only every Rth
    packet is integrity\n   protected in mode 1, so unless R = 1, the mechanism should
    be seen\n   for what it is: a way to improve sender-receiver synchronization,
    and\n   not a replacement for integrity protection.\n   The use of mode 3 (NULL-MAC)
    introduces a vulnerability not present\n   in RFC 3711; namely, if an attacker
    modifies the ROC, the\n   modification will go undetected by the receiver, and
    the receiver\n   will lose cryptographic synchronization until the next correct
    ROC is\n   received.  This implies that an attacker can perform a DoS attack by\n
    \  only modifying every Rth packet.  Because of this, mode 3 MUST only\n   be
    used after proper risk assessment of the underlying network.\n   Besides the considerations
    in Section 9.5 and 9.5.1 of RFC 3711,\n   additional requirements of the underlying
    transport network must be\n   met.\n   o  The transport network must only consist
    of trusted domains.  That\n      means that everyone on the path from the source
    to the destination\n      is trusted not to modify or inject packets.\n   o  The
    transport network must be protected from packet injection,\n      i.e., it must
    be ensured that the only packets present on the path\n      from the source to
    the destination(s) originate from trusted\n      sources.\n   o  If the packets,
    on their way from the source to the\n      destination(s), travel outside of a
    trusted domain, their\n      integrity must be ensured (e.g., by using a Virtual
    Private\n      Network (VPN) connection or a trusted leased line).\n   In the
    (assumed common) case that the last link to the destination(s)\n   is a wireless
    link, the possibility that an attacker injects forged\n   packets here must be
    carefully considered before using mode 3.\n   Especially, if used in a broadcast
    setting, many destinations would\n   be affected by the attack.  However, unless
    R is big, this DoS attack\n   would be similar in effect to radio jamming, which
    would be easier to\n   perform.\n   It must also be noted that if the ROC is modified
    by an attacker and\n   no integrity protection is used, the output of the decryption
    will\n   not be useful to the upper layers, and these must be able to cope\n   with
    data that appears random.  In the case integrity protection is\n   used on the
    packets containing the ROC, and the ROC is modified by an\n   attacker (and the
    receiver already has an approximation of the ROC,\n   e.g., by getting it previously),
    the packet will be discarded and the\n   receiver will not be able to decrypt
    correctly.  Note, however, that\n   the situation is better in the latter case,
    since the receiver now\n   can try different ROC values in a neighborhood around
    the approximate\n   value he already has.\n   As RCC is expected to be used in
    a broadcast setting where group\n   membership will be based on access to a symmetric
    group key, it is\n   important to point out the following.  With symmetric-key-based\n
    \  integrity protection, it may be as easy, if not easier, to get access\n   to
    the integrity key (often a combination of a low-cost activity of\n   purchasing
    a subscription and breaking the security of a terminal to\n   extract the integrity
    key) as being able to transmit.\n   A word of warning regarding the choice of
    length of the\n   authentication tag:  Note that, in contrast to common MAC tags,
    there\n   is a clear distinction made between the RCC authentication tag and\n
    \  the RCC MAC.  The tag is the container holding the MAC (and for some\n   packets
    also the ROC), and the MAC is the output from the MAC-\n   algorithm (i.e., HMAC-SHA1).
    \ The length of the authentication tag\n   with the RCC transform includes the
    four-octet ROC in some packets.\n   This means that for a tag-length of n octets,
    there is only room for\n   a MAC of length n - 4, i.e., a tag-length of n octets
    does not\n   provide a full n-octet integrity protection on all packets.  There\n
    \  are five cases:\n      1. RCCm1 is used and tag-length is n.  For those packets
    that\n         SEQ = 0 mod R, the ROC is carried in the tag and occupies four\n
    \        octets.  This leaves n - 4 octets for the MAC.\n      2. RCCm1 is used
    and tag-length is n.  For those packets that\n         SEQ != 0 mod R, there is
    no ROC carried in the tag.  For RCCm1\n         there is no MAC on packets not
    carrying the ROC, so neither the\n         length of the MAC nor the length of
    the tag has any relevance.\n      3. RCCm2 is used and tag-length is n.  For those
    packets that\n         SEQ = 0 mod R, the ROC is carried in the tag and occupies
    four\n         octets.  This leaves n - 4 octets for the MAC (this is\n         equivalent
    to case 1).\n      4. RCCm2 is used and tag-length is n.  For those packets that\n
    \        SEQ != 0 mod R, there is no ROC carried in the tag.  This\n         leaves
    n octets for the MAC.\n      5. RCCm3 is used.  RCCm3 does not use any MAC, but
    the ROC still\n         occupies four octets in the tag for packets with SEQ =
    0 mod R,\n         so the tag-length MUST be set to four.  For packets with\n
    \        SEQ != 0 mod R, neither the length of the MAC nor the length of\n         the
    tag has any relevance.\n   The conclusion is that in cases 1 and 3, the length
    of the MAC is\n   shorter than the length of the authentication tag.  To achieve
    the\n   same (or less) MAC forgery success probability on all packets when\n   using
    RCCm1 or RCCm2, as with the default integrity transform in RFC\n   3711, the tag-length
    must be set to 14 octets, which means that the\n   length of MAC_tr is 10 octets.\n
    \  It is recommended to set the tag-length to 14 octets when RCCm1 or\n   RCCm2
    is used, and the tag-length MUST be set to four octets when\n   RCCm3 is used.\n"
  title: 5.  Security Considerations
- contents:
  - "6.  IANA Considerations\n   According to Section 10 of RFC 3830, IETF consensus
    is required to\n   register values in the range 0-240 in the SRTP auth alg namespace
    and\n   the SRTP Type namespace.\n   The value 2 for RCCm1, the value 3 for RCCm2,
    and the value 4 for\n   RCCm3 have been registered in the SRTP auth alg namespace
    as\n   specified in Table 1 in Section 4.\n   The value 13 for ROC transmission
    rate has been registered in the\n   SRTP Type namespace as specified in Table
    2 in Section 4.\n   The values 14 to 19 have been registered in the SRTP Type
    namespace\n   according to Table 3 in Section 4.\n"
  title: 6.  IANA Considerations
- contents:
  - "7.  Acknowledgements\n   We would like to thank Nigel Dallard, Lakshminath Dondeti,
    and David\n   McGrew for fruitful comments and discussions.\n"
  title: 7.  Acknowledgements
- contents:
  - '8.  References

    '
  - contents:
    - "8.1.  Normative References\n   [RFC3830]  Arkko, J., Carrara, E., Lindholm,
      F., Naslund, M., and K.\n              Norrman, \"MIKEY: Multimedia Internet
      KEYing\", RFC 3830,\n              August 2004.\n   [RFC3711]  Baugher, M.,
      McGrew, D., Naslund, M., Carrara, E., and K.\n              Norrman, \"The Secure
      Real-time Transport Protocol (SRTP)\",\n              RFC 3711, March 2004.\n
      \  [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119, March 1997.\n"
    title: 8.1.  Normative References
  - contents:
    - "8.2.  Informative References\n   [MBMS]     3GPP TS 33.246, \"3G Security;
      Security of Multimedia\n              Broadcast/ Multicast Service (MBMS)\",
      October 2006.\n   [BCMCS]    3GPP2 X.S0022-0, \"Broadcast and Multicast Service
      in\n              cdma2000 Wireless IP Network\", February 2005.\n"
    title: 8.2.  Informative References
  title: 8.  References
- contents:
  - "Authors' Addresses\n   Vesa Lehtovirta\n   Ericsson Research\n   02420 Jorvas\n
    \  Finland\n   Phone:  +358 9 2993314\n   EMail:  vesa.lehtovirta@ericsson.com\n
    \  Mats Naslund\n   Ericsson Research\n   SE-16480 Stockholm\n   Sweden\n   Phone:
    \ +46 8 58533739\n   EMail:  mats.naslund@ericsson.com\n   Karl Norrman\n   Ericsson
    Research\n   SE-16480 Stockholm\n   Sweden\n   Phone:  +46 8 4044502\n   EMail:
    \ karl.norrman@ericsson.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document
    is subject to the rights, licenses and restrictions\n   contained in BCP 78, and
    except as set forth therein, the authors\n   retain all their rights.\n   This
    document and the information contained herein are provided on an\n   \"AS IS\"
    basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE INTERNET ENGINEERING
    TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE
    ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
