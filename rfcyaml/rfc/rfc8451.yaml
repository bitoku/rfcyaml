- title: __initial_text__
  contents:
  - "        Considerations for Selecting RTP Control Protocol (RTCP)\n       Extended\
    \ Report (XR) Metrics for the WebRTC Statistics API\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes monitoring features related to media streams\n\
    \   in Web real-time communication (WebRTC).  It provides a list of RTP\n   Control\
    \ Protocol (RTCP) Sender Report (SR), Receiver Report (RR), and\n   Extended Report\
    \ (XR) metrics, which may need to be supported by RTP\n   implementations in some\
    \ diverse environments.  It lists a set of\n   identifiers for the WebRTC's statistics\
    \ API.  These identifiers are a\n   set of RTCP SR, RR, and XR metrics related\
    \ to the transport of\n   multimedia flows.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   https://www.rfc-editor.org/info/rfc8451.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \   2. Terminology .....................................................4\n  \
    \ 3. RTP Statistics in WebRTC Implementations ........................5\n   4.\
    \ Considerations for Impact of Measurement Interval ...............5\n   5. Candidate\
    \ Metrics ...............................................6\n      5.1. Network\
    \ Impact Metrics .....................................6\n           5.1.1. Loss\
    \ and Discard Packet Count Metric ................6\n           5.1.2. Burst/Gap\
    \ Pattern Metrics for Loss and Discard ......7\n           5.1.3. Run-Length Encoded\
    \ Metrics for Loss and Discard .....8\n      5.2. Application Impact Metrics .................................8\n\
    \           5.2.1. Discarded Octets Metric .............................8\n  \
    \         5.2.2. Frame Impairment Summary Metrics ....................9\n    \
    \       5.2.3. Jitter Buffer Metrics ...............................9\n      5.3.\
    \ Recovery Metrics ..........................................10\n           5.3.1.\
    \ Post-Repair Packet Count Metrics ...................10\n           5.3.2. Run-Length\
    \ Encoded Metric for Post-Repair ..........10\n   6. Identifiers from Sender,\
    \ Receiver, and Extended Report Blocks ..11\n      6.1. Cumulative Number of Packets\
    \ and Octets Sent ..............11\n      6.2. Cumulative Number of Packets and\
    \ Octets Received ..........11\n      6.3. Cumulative Number of Packets Lost .........................11\n\
    \      6.4. Interval Packet Loss and Jitter ...........................12\n  \
    \    6.5. Cumulative Number of Packets and Octets Discarded .........12\n    \
    \  6.6. Cumulative Number of Packets Repaired .....................12\n      6.7.\
    \ Burst Packet Loss and Burst Discards ......................12\n      6.8. Burst/Gap\
    \ Rates ...........................................13\n      6.9. Frame Impairment\
    \ Metrics ..................................13\n   7. Adding New Metrics to WebRTC\
    \ Statistics API ....................13\n   8. Security Considerations ........................................14\n\
    \   9. IANA Considerations ............................................14\n  \
    \ 10. References ....................................................14\n    \
    \  10.1. Normative References .....................................14\n      10.2.\
    \ Informative References ...................................16\n   Acknowledgements\
    \ ..................................................17\n   Authors' Addresses\
    \ ................................................18\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Web real-time communication (WebRTC) [WebRTC-Overview] deployments\n\
    \   are emerging, and applications need to be able to estimate the\n   service\
    \ quality.  If sufficient information (metrics or statistics)\n   is provided\
    \ to the application, it can attempt to improve the media\n   quality.  [RFC7478]\
    \ specifies a requirement for statistics:\n   F38   The browser must be able to\
    \ collect statistics, related to the\n         transport of audio and video between\
    \ peers, needed to estimate\n         quality of experience.\n   The WebRTC Stats\
    \ API [W3C.webrtc-stats] currently lists metrics\n   reported in the RTCP Sender\
    \ Report and Receiver Report (SR/RR)\n   [RFC3550] to fulfill this requirement.\
    \  However, the basic metrics\n   from RTCP SR/RR are not sufficient for precise\
    \ quality monitoring or\n   diagnosing potential issues.\n   Standards such as\
    \ \"RTP Control Protocol Extended Reports (RTCP XR)\"\n   [RFC3611] as well as\
    \ other extensions standardized in the XRBLOCK\n   Working Group, e.g., burst/gap\
    \ loss metric reporting [RFC6958] and\n   burst/gap discard metric reporting [RFC7003],\
    \ have been produced for\n   the purpose of collecting and reporting performance\
    \ metrics from RTP\n   endpoint devices that can be used to have end-to-end service\n\
    \   visibility and to measure the delivery quality in various RTP\n   services.\
    \  These metrics are able to complement those in [RFC3550].\n   In this document,\
    \ we provide rationale for choosing additional RTP\n   metrics for the WebRTC\
    \ getStats() API [W3C.webrtc].  All identifiers\n   proposed in this document\
    \ are recommended to be implemented by an\n   WebRTC endpoint.  An endpoint may\
    \ choose not to expose an identifier\n   if it does not implement the corresponding\
    \ RTCP Report.  This\n   document only considers RTP-layer metrics.  Other metrics,\
    \ e.g.,\n   IP-layer metrics, are out of scope.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   In addition to the terminology from [RFC3550], [RFC3611],\
    \ and\n   [RFC7478], this document uses the following term.\n   ReportGroup: It\
    \ is a set of metrics identified by a common\n      synchronization source (SSRC).\n"
- title: 3.  RTP Statistics in WebRTC Implementations
  contents:
  - "3.  RTP Statistics in WebRTC Implementations\n   The RTCP Sender Reports (SRs)\
    \ and Receiver Reports (RRs) [RFC3550]\n   expose the basic metrics for the local\
    \ and remote media streams.\n   However, these metrics provide only partial or\
    \ limited information,\n   which may not be sufficient for diagnosing problems\
    \ or monitoring\n   quality.  For example, it may be useful to distinguish between\n\
    \   packets lost and packets discarded due to late arrival.  Even though\n   they\
    \ have the same impact on the multimedia quality, it helps in\n   identifying\
    \ and diagnosing problems.  RTP Control Protocol Extended\n   Reports (XRs) [RFC3611]\
    \ and other extensions discussed in the XRBLOCK\n   Working Group provide more\
    \ detailed statistics, which complement the\n   basic metrics reported in the\
    \ RTCP SR and RRs.\n   The WebRTC application extracts statistics from the browser\
    \ by\n   querying the getStats() API [W3C.webrtc].  The browser can easily\n \
    \  report the local variables, i.e., the statistics related to the\n   outgoing\
    \ and incoming RTP media streams.  However, without the\n   support of RTCP XRs\
    \ or some other signaling mechanism, the WebRTC\n   application cannot expose\
    \ the remote endpoints' statistics.\n   [WebRTC-RTP-USAGE] does not mandate the\
    \ use of any RTCP XRs, and\n   their usage is optional.  If the use of RTCP XRs\
    \ is successfully\n   negotiated between endpoints (via SDP), thereafter the application\n\
    \   has access to both local and remote statistics.  Alternatively, once\n   the\
    \ WebRTC application gets the local information, it can report the\n   information\
    \ to an application server or a third-party monitoring\n   system, which provides\
    \ quality estimates or diagnostic services for\n   application developers.  The\
    \ exchange of statistics between endpoints\n   or between a monitoring server\
    \ and an endpoint is outside the scope\n   of this document.\n"
- title: 4.  Considerations for Impact of Measurement Interval
  contents:
  - "4.  Considerations for Impact of Measurement Interval\n   RTCP extensions like\
    \ RTCP XR usually share the same timing interval\n   with the RTCP SR/RR, i.e.,\
    \ they are sent as compound packets,\n   together with the RTCP SR/RR.  Alternatively,\
    \ if the RTCP XR uses a\n   different measurement interval, all XRs using the\
    \ same measurement\n   interval are compounded together, and the measurement interval\
    \ is\n   indicated in a specific measurement information block defined in\n  \
    \ [RFC6776].\n   When using WebRTC getStats() APIs (see \"Statistics Model\" in\n\
    \   [W3C.webrtc]), the applications can query this information at\n   arbitrary\
    \ intervals.  For the statistics reported by the remote\n   endpoint, e.g., those\
    \ conveyed in an RTCP SR/RR/XR, these will not\n   change until the next RTCP\
    \ report is received.  However, statistics\n   generated by the local endpoint\
    \ have no such restrictions as long as\n   the endpoint is sending and receiving\
    \ media.  For example, an\n   application may choose to poll the stack for statistics\
    \ every 1\n   second.  In that case, the underlying stack local will return the\n\
    \   current snapshot of the local statistics (for incoming and outgoing\n   media\
    \ streams).  However, it may return the same remote statistics as\n   previously,\
    \ because no new RTCP reports may have been received in the\n   past 1 second.\
    \  This can occur when the polling interval is shorter\n   than the average RTCP\
    \ reporting interval.\n"
- title: 5.  Candidate Metrics
  contents:
  - "5.  Candidate Metrics\n   Since the following metrics are all defined in RTCP\
    \ XR, which is not\n   mandated in WebRTC, all of them are local.  However, if\
    \ RTCP XR is\n   supported by negotiation between two browsers, the following\
    \ metrics\n   can also be generated remotely and be sent to the local endpoint\n\
    \   (that generated the media) via RTCP XR packets.\n   The metrics are classified\
    \ into 3 categories as follows: network\n   impact metrics, application impact\
    \ metrics, and recovery metrics.\n   Network impact metrics are the statistics\
    \ recording the information\n   only for network transmission.  They are useful\
    \ for network problem\n   diagnosis.  Application impact metrics mainly collect\
    \ the information\n   from the viewpoint of the application, e.g., bit rate, frame\
    \ rate, or\n   jitter buffers.  Recovery metrics reflect how well the repair\n\
    \   mechanisms perform, e.g., loss concealment, retransmission, or\n   Forward\
    \ Error Correction (FEC).  All 3 types of metrics are useful\n   for quality estimations\
    \ of services in WebRTC implementations.\n   WebRTC applications can use these\
    \ metrics to calculate the estimated\n   Mean Opinion Score (MOS) [ITU-T_P.800.1]\
    \ values or Media Delivery\n   Index (MDI) [RFC4445] for their services.\n"
- title: 5.1.  Network Impact Metrics
  contents:
  - '5.1.  Network Impact Metrics

    '
- title: 5.1.1.  Loss and Discard Packet Count Metric
  contents:
  - "5.1.1.  Loss and Discard Packet Count Metric\n   In multimedia transport, packets\
    \ that are received abnormally are\n   classified into 3 types: lost, discarded,\
    \ and duplicate packets.\n   Packet loss may be caused by network device breakdown,\
    \ bit-error\n   corruption, or network congestion (packets dropped by an intermediate\n\
    \   router queue).  Duplicate packets may be a result of network delays\n   that\
    \ cause the sender to retransmit the original packets.  Discarded\n   packets\
    \ are packets that have been delayed long enough (perhaps they\n   missed the\
    \ playout time) and are considered useless by the receiver.\n   Lost and discarded\
    \ packets cause problems for multimedia services, as\n   missing data and long\
    \ delays can cause degradation in service\n   quality, e.g., missing large blocks\
    \ of contiguous packets (lost or\n   discarded) may cause choppy audio, and long\
    \ network transmission\n   delay time may cause audio or video buffering.  The\
    \ RTCP SR/RR\n   defines a metric for counting the total number of RTP data packets\n\
    \   that have been lost since the beginning of reception.  However, this\n   statistic\
    \ does not distinguish lost packets from discarded and\n   duplicate packets.\
    \  Packets that arrive late will be discarded and\n   are not reported as lost,\
    \ and duplicate packets will be regarded as a\n   normally received packet.  Hence,\
    \ the loss metric can be misleading\n   if many duplicate packets are received\
    \ or packets are discarded,\n   which causes the quality of the media transport\
    \ to appear okay from a\n   statistical point of view, while the users are actually\
    \ experiencing\n   bad service quality.  So, in such cases, it is better to use\
    \ more\n   accurate metrics in addition to those defined in RTCP SR/RR.\n   The\
    \ metrics for lost packets and duplicated packets defined in the\n   Statistics\
    \ Summary Report Block of [RFC3611] extend the information\n   of loss carried\
    \ in standard RTCP SR/RR.  They explicitly give an\n   account of lost and duplicated\
    \ packets.  Lost packet counts are\n   useful for network problem diagnosis. \
    \ It is better to use the packet\n   loss metrics of [RFC3611] to indicate the\
    \ lost packet count instead\n   of the cumulative number of packets lost metric\
    \ of [RFC3550].\n   Duplicated packets are usually rare and have little effect\
    \ on QoS\n   evaluation.  So it may not be suitable for use in WebRTC.\n   Using\
    \ loss metrics without considering discard metrics may result in\n   inaccurate\
    \ quality evaluation, as packet discard due to jitter is\n   often more prevalent\
    \ than packet loss in modern IP networks.  The\n   discarded metric specified\
    \ in [RFC7002] counts the number of packets\n   discarded due to jitter.  It augments\
    \ the loss statistics metrics\n   specified in standard RTCP SR/RR.  For those\
    \ WebRTC services with\n   jitter buffers requiring precise quality evaluation\
    \ and accurate\n   troubleshooting, this metric is useful as a complement to the\
    \ metrics\n   of RTCP SR/RR.\n"
- title: 5.1.2.  Burst/Gap Pattern Metrics for Loss and Discard
  contents:
  - "5.1.2.  Burst/Gap Pattern Metrics for Loss and Discard\n   RTCP SR/RR defines\
    \ coarse metrics regarding loss statistics: the\n   metrics are all about per-call\
    \ statistics and are not detailed enough\n   to capture the transitory nature\
    \ of some impairments like bursty\n   packet loss.  Even if the average packet\
    \ loss rate is low, the lost\n   packets may occur during short dense periods,\
    \ resulting in short\n   periods of degraded quality.  Bursts cause lower quality\
    \ experience\n   than the non-bursts for low packet loss rates, whereas for high\n\
    \   packet loss rates, the converse is true.  So capturing burst gap\n   information\
    \ is very helpful for quality evaluation and locating\n   impairments.  If the\
    \ WebRTC application needs to evaluate the service\n   quality, burst gap metrics\
    \ provide more accurate information than\n   RTCP SR/RR.\n   [RFC3611] introduces\
    \ burst gap metrics in the VoIP Report Block.\n   These metrics record the density\
    \ and duration of burst and gap\n   periods, which are helpful in isolating network\
    \ problems since bursts\n   correspond to periods of time during which the packet\
    \ loss/discard\n   rate is high enough to produce noticeable degradation in audio\
    \ or\n   video quality.  Metrics related to the burst gap are also introduced\n\
    \   in [RFC7003] and [RFC6958], which define two new report blocks for\n   use\
    \ in a range of RTP applications beyond those described in\n   [RFC3611].  These\
    \ metrics distinguish discarded packets from loss\n   packets that occur in the\
    \ burst period and provide more information\n   for diagnosing network problems.\
    \  Additionally, the block reports the\n   frequency of burst events, which is\
    \ useful information for evaluating\n   the quality of experience.  Hence, if\
    \ WebRTC applications need to do\n   quality evaluation and observe when and why\
    \ quality degrades, these\n   metrics should be considered.\n"
- title: 5.1.3.  Run-Length Encoded Metrics for Loss and Discard
  contents:
  - "5.1.3.  Run-Length Encoded Metrics for Loss and Discard\n   Run-length encoding\
    \ uses a bit vector to encode information about the\n   packet.  Each bit in the\
    \ vector represents a packet; depending on the\n   signaled metric, it defines\
    \ if the packet was lost, duplicated,\n   discarded, or repaired.  An endpoint\
    \ typically uses the run-length\n   encoding to accurately communicate the status\
    \ of each packet in the\n   interval to the other endpoint.  [RFC3611] and [RFC7097]\
    \ define run-\n   length encoding for lost and duplicate packets, and discarded\n\
    \   packets, respectively.\n   The WebRTC application could benefit from the additional\
    \ information.\n   If losses occur after discards, an endpoint may be able to\
    \ correlate\n   the two run length vectors to identify congestion-related losses,\n\
    \   e.g., a router queue became overloaded causing delays and then\n   overflowed.\
    \  If the losses are independent, it may indicate bit-error\n   corruption.  For\
    \ the WebRTC Stats API [W3C.webrtc-stats], these types\n   of metrics are not\
    \ recommended for use due to the large amount of\n   data and the computation\
    \ involved.\n"
- title: 5.2.  Application Impact Metrics
  contents:
  - '5.2.  Application Impact Metrics

    '
- title: 5.2.1.  Discarded Octets Metric
  contents:
  - "5.2.1.  Discarded Octets Metric\n   The metric reports the cumulative size of\
    \ the packets discarded in\n   the interval.  It is complementary to the number\
    \ of discarded\n   packets.  An application measures sent octets and received\
    \ octets to\n   calculate the sending rate and receiving rate, respectively. \
    \ The\n   application can calculate the actual bit rate in a particular\n   interval\
    \ by subtracting the discarded octets from the received\n   octets.\n   For WebRTC,\
    \ the discarded octets metric supplements the metrics on\n   sent and received\
    \ octets and provides an accurate method for\n   calculating the actual bit rate,\
    \ which is an important parameter to\n   reflect the quality of the media.  The\
    \ Bytes Discarded metric is\n   defined in [RFC7243].\n"
- title: 5.2.2.  Frame Impairment Summary Metrics
  contents:
  - "5.2.2.  Frame Impairment Summary Metrics\n   RTP has different framing mechanisms\
    \ for different payload types.\n   For audio streams, a single RTP packet may\
    \ contain one or multiple\n   audio frames.  On the other hand, in video streams,\
    \ a single video\n   frame may be transmitted in multiple RTP packets.  The size\
    \ of each\n   packet is limited by the Maximum Transmission Unit (MTU) of the\n\
    \   underlying network.  However, the statistics from standard SR/RR only\n  \
    \ collect information from the transport layer, so they may not fully\n   reflect\
    \ the quality observed by the application.  Video is typically\n   encoded using\
    \ two frame types, i.e., key frames and derived frames.\n   Key frames are normally\
    \ just spatially compressed, i.e., without\n   prediction from other pictures.\
    \  The derived frames are temporally\n   compressed, i.e., depend on the key frame\
    \ for decoding.  Hence, key\n   frames are much larger in size than derived frames.\
    \  The loss of\n   these key frames results in a substantial reduction in video\
    \ quality.\n   Thus, it is reasonable to consider this application-layer information\n\
    \   in WebRTC implementations, which influence sender strategies to\n   mitigate\
    \ the problem or require the accurate assessment of users'\n   quality of experience.\n\
    \   The metrics in this category include: number of discarded key frames,\n  \
    \ number of lost key frames, number of discarded derived frames, and\n   number\
    \ of lost derived frames.  These metrics can be used to\n   calculate the Media\
    \ Loss Rate (MLR) of the MDI [RFC4445].  Details of\n   the definition of these\
    \ metrics are described in [RFC7003].\n   Additionally, the metric provides the\
    \ rendered frame rate, an\n   important parameter for quality estimation.\n"
- title: 5.2.3.  Jitter Buffer Metrics
  contents:
  - "5.2.3.  Jitter Buffer Metrics\n   The size of the jitter buffer affects the end-to-end\
    \ delay on the\n   network and also the packet discard rate.  When the buffer\
    \ size is\n   too small, late-arriving packets are not played out and are dropped,\n\
    \   while when the buffer size is too large, packets are held longer than\n  \
    \ necessary and consequently reduce conversational quality.\n   Measurement of\
    \ jitter buffer should not be ignored in the evaluation\n   of end-user perception\
    \ of conversational quality.  Metrics related to\n   the jitter buffer, such as\
    \ maximum and nominal jitter buffer, could\n   be used to show how the jitter\
    \ buffer behaves at the receiving\n   endpoint.  They are useful for providing\
    \ better end-user quality of\n   experience (QoE) when jitter buffer factors are\
    \ used as inputs to\n   calculate estimated MOS values.  Thus, for those cases,\
    \ jitter buffer\n   metrics should be considered.  The definition of these metrics\
    \ is\n   provided in [RFC7005].\n"
- title: 5.3.  Recovery Metrics
  contents:
  - "5.3.  Recovery Metrics\n   This document does not consider concealment metrics\
    \ [RFC7294] as part\n   of recovery metrics.\n"
- title: 5.3.1.  Post-Repair Packet Count Metrics
  contents:
  - "5.3.1.  Post-Repair Packet Count Metrics\n   Web applications can support certain\
    \ RTP error-resilience mechanisms\n   following the recommendations specified\
    \ in [WebRTC-RTP-USAGE].  For\n   these web applications using repair mechanisms,\
    \ providing some\n   statistics about the performance of their repair mechanisms\
    \ could\n   help provide a more accurate quality evaluation.\n   The unrepaired\
    \ packet count and repaired loss count defined in\n   [RFC7509] provide the recovery\
    \ information of the error-resilience\n   mechanisms to the monitoring application\
    \ or the sending endpoint.\n   The endpoint can use these metrics to ascertain\
    \ the ratio of repaired\n   packets to lost packets.  Including post-repair packet\
    \ count metrics\n   helps the application evaluate the effectiveness of the applied\n\
    \   repair mechanisms.\n"
- title: 5.3.2.  Run-Length Encoded Metric for Post-Repair
  contents:
  - "5.3.2.  Run-Length Encoded Metric for Post-Repair\n   [RFC5725] defines run-length\
    \ encoding for post-repair packets.  When\n   using error-resilience mechanisms,\
    \ the endpoint can correlate the\n   loss run length with this metric to ascertain\
    \ where the losses and\n   repairs occurred in the interval.  This provides more\
    \ accurate\n   information for recovery mechanisms evaluation than those in Section\n\
    \   5.3.1.  However, when RTCP XR metrics are supported, using run-length\n  \
    \ encoded metrics is not suggested because the per-packet information\n   yields\
    \ an enormous amount of data that is not required in this case.\n   For WebRTC,\
    \ the application may benefit from the additional\n   information.  If losses\
    \ occur after discards, an endpoint may be able\n   to correlate the two run-length\
    \ vectors to identify congestion-\n   related losses, e.g., a router queue became\
    \ overloaded causing delays\n   and then overflowed.  If the losses are independent,\
    \ it may indicate\n   bit-error corruption.  Lastly, when using error-resilience\n\
    \   mechanisms, the endpoint can correlate the loss and post-repair run\n   lengths\
    \ to ascertain where the losses and repairs occurred in the\n   interval.  For\
    \ example, consecutive losses are likely not to be\n   repaired by a simple FEC\
    \ scheme.\n"
- title: 6.  Identifiers from Sender, Receiver, and Extended Report Blocks
  contents:
  - "6.  Identifiers from Sender, Receiver, and Extended Report Blocks\n   This document\
    \ describes a list of metrics and corresponding\n   identifiers relevant to RTP\
    \ media in WebRTC.  This group of\n   identifiers are defined on a ReportGroup\
    \ corresponding to a\n   synchronization source (SSRC).  In practice, the application\
    \ needs to\n   be able to query the statistic identifiers on both an incoming\n\
    \   (remote) and outgoing (local) media stream.  Since sending and\n   receiving\
    \ SRs and RRs are mandatory, the metrics defined in the SRs\n   and RRs are always\
    \ available.  For XR metrics, it depends on two\n   factors: 1) if it is measured\
    \ at the endpoint and 2) if it is\n   reported by the endpoint in an XR block.\
    \  If a metric is only\n   measured by the endpoint and not reported, the metrics\
    \ will only be\n   available for the incoming (remote) media stream.  Alternatively,\
    \ if\n   the corresponding metric is also reported in an XR block, it will be\n\
    \   available for both the incoming (remote) and outgoing (local) media\n   stream.\n\
    \   For a remote statistic, the timestamp represents the timestamp from\n   an\
    \ incoming SR, RR, or XR packet.  Conversely, for a local statistic,\n   it refers\
    \ to the current timestamp generated by the local clock\n   (typically the POSIX\
    \ timestamp, i.e., milliseconds since January 1,\n   1970).\n   As per [RFC3550],\
    \ the octets metrics represent the payload size\n   (i.e., not including the header\
    \ or padding).\n"
- title: 6.1.  Cumulative Number of Packets and Octets Sent
  contents:
  - "6.1.  Cumulative Number of Packets and Octets Sent\n   Name: packetsSent\n  \
    \ Definition: Section 6.4.1 of [RFC3550].\n   Name: bytesSent\n   Definition:\
    \ Section 6.4.1 of [RFC3550].\n"
- title: 6.2.  Cumulative Number of Packets and Octets Received
  contents:
  - "6.2.  Cumulative Number of Packets and Octets Received\n   Name: packetsReceived\n\
    \   Definition: Section 6.4.1 of [RFC3550].\n   Name: bytesReceived\n   Definition:\
    \ Section 6.4.1 of [RFC3550].\n"
- title: 6.3.  Cumulative Number of Packets Lost
  contents:
  - "6.3.  Cumulative Number of Packets Lost\n   Name: packetsLost\n   Definition:\
    \ Section 6.4.1 of [RFC3550].\n"
- title: 6.4.  Interval Packet Loss and Jitter
  contents:
  - "6.4.  Interval Packet Loss and Jitter\n   Name: jitter\n   Definition: Section\
    \ 6.4.1 of [RFC3550].\n   Name: fractionLost\n   Definition: Section 6.4.1 of\
    \ [RFC3550].\n"
- title: 6.5.  Cumulative Number of Packets and Octets Discarded
  contents:
  - "6.5.  Cumulative Number of Packets and Octets Discarded\n   Name: packetsDiscarded\n\
    \   Definition: The cumulative number of RTP packets discarded due to\n      late\
    \ or early arrival; see item a of Appendix A of [RFC7002].\n   Name: bytesDiscarded\n\
    \   Definition: The cumulative number of octets discarded due to late or\n   \
    \   early arrival; see Appendix A of [RFC7243].\n"
- title: 6.6.  Cumulative Number of Packets Repaired
  contents:
  - "6.6.  Cumulative Number of Packets Repaired\n   Name: packetsRepaired\n   Definition:\
    \ The cumulative number of lost RTP packets repaired after\n      applying a error-resilience\
    \ mechanism; see item b of Appendix A of\n      [RFC7509].  To clarify, the value\
    \ is the upper bound on the\n      cumulative number of lost packets.\n"
- title: 6.7.  Burst Packet Loss and Burst Discards
  contents:
  - "6.7.  Burst Packet Loss and Burst Discards\n   Name: burstPacketsLost\n   Definition:\
    \ The cumulative number of RTP packets lost during loss\n      bursts; see item\
    \ c of Appendix A of [RFC6958].\n   Name: burstLossCount\n   Definition: The cumulative\
    \ number of bursts of lost RTP packets; see\n      item d of Appendix A of [RFC6958].\n\
    \   Name: burstPacketsDiscarded\n   Definition: The cumulative number of RTP packets\
    \ discarded during\n      discard bursts; see item b of Appendix A of [RFC7003].\n\
    \   Name: burstDiscardCount\n   Definition: The cumulative number of bursts of\
    \ discarded RTP packets;\n      see item e of Appendix A of [RFC8015].\n   [RFC3611]\
    \ recommends a Gmin (threshold) value of 16 for classifying\n   packet loss or\
    \ discard burst.\n"
- title: 6.8.  Burst/Gap Rates
  contents:
  - "6.8.  Burst/Gap Rates\n   Name: burstLossRate\n   Definition: The fraction of\
    \ RTP packets lost during bursts; see\n      item a of Appendix A of [RFC7004].\n\
    \   Name: gapLossRate\n   Definition: The fraction of RTP packets lost during\
    \ gaps; see item b\n      of Appendix A of [RFC7004].\n   Name: burstDiscardRate\n\
    \   Definition: The fraction of RTP packets discarded during bursts; see\n   \
    \   item e of Appendix A of [RFC7004].\n   Name: gapDiscardRate\n   Definition:\
    \ The fraction of RTP packets discarded during gaps; see\n      item f of Appendix\
    \ A of [RFC7004].\n"
- title: 6.9.  Frame Impairment Metrics
  contents:
  - "6.9.  Frame Impairment Metrics\n   Name: framesLost\n   Definition: The cumulative\
    \ number of full frames lost; see item i of\n      Appendix A of [RFC7004].\n\
    \   Name: framesCorrupted\n   Definition: The cumulative number of frames partially\
    \ lost; see\n      item j of Appendix A of [RFC7004].\n   Name: framesDropped\n\
    \   Definition: The cumulative number of full frames discarded; see\n      item\
    \ g of Appendix A of [RFC7004].\n   Name: framesSent\n   Definition: The cumulative\
    \ number of frames sent.\n   Name: framesReceived\n   Definition: The cumulative\
    \ number of partial or full frames received.\n"
- title: 7.  Adding New Metrics to WebRTC Statistics API
  contents:
  - "7.  Adding New Metrics to WebRTC Statistics API\n   While this document was being\
    \ drafted, the metrics defined herein\n   were added to the W3C WebRTC specification.\
    \  The process to add new\n   metrics in the future is to create an issue or pull\
    \ request on the\n   repository of the W3C WebRTC specification\n   (https://github.com/w3c/webrtc-stats).\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   This document focuses on listing the RTCP XR\
    \ metrics defined in the\n   corresponding RTCP reporting extensions and does\
    \ not give rise to any\n   security vulnerabilities beyond those described in\
    \ [RFC3611] and\n   [RFC6792].\n   The overall security considerations for RTP\
    \ used in WebRTC\n   applications is described in [WebRTC-RTP-USAGE] and [WebRTC-Sec],\n\
    \   which also apply to this memo.\n"
- title: 9.  IANA Considerations
  contents:
  - "9.  IANA Considerations\n   This document has no IANA actions.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [RFC3550]  Schulzrinne, H., Casner, S., Frederick,\
    \ R., and V.\n              Jacobson, \"RTP: A Transport Protocol for Real-Time\n\
    \              Applications\", STD 64, RFC 3550, DOI 10.17487/RFC3550,\n     \
    \         July 2003, <https://www.rfc-editor.org/info/rfc3550>.\n   [RFC3611]\
    \  Friedman, T., Ed., Caceres, R., Ed., and A. Clark, Ed.,\n              \"RTP\
    \ Control Protocol Extended Reports (RTCP XR)\",\n              RFC 3611, DOI\
    \ 10.17487/RFC3611, November 2003,\n              <https://www.rfc-editor.org/info/rfc3611>.\n\
    \   [RFC5725]  Begen, A., Hsu, D., and M. Lague, \"Post-Repair Loss RLE\n    \
    \          Report Block Type for RTP Control Protocol (RTCP) Extended\n      \
    \        Reports (XRs)\", RFC 5725, DOI 10.17487/RFC5725, February\n         \
    \     2010, <https://www.rfc-editor.org/info/rfc5725>.\n   [RFC6776]  Clark, A.\
    \ and Q. Wu, \"Measurement Identity and Information\n              Reporting Using\
    \ a Source Description (SDES) Item and an\n              RTCP Extended Report\
    \ (XR) Block\", RFC 6776,\n              DOI 10.17487/RFC6776, October 2012,\n\
    \              <https://www.rfc-editor.org/info/rfc6776>.\n   [RFC6792]  Wu, Q.,\
    \ Ed., Hunt, G., and P. Arden, \"Guidelines for Use\n              of the RTP\
    \ Monitoring Framework\", RFC 6792,\n              DOI 10.17487/RFC6792, November\
    \ 2012,\n              <https://www.rfc-editor.org/info/rfc6792>.\n   [RFC6958]\
    \  Clark, A., Zhang, S., Zhao, J., and Q. Wu, Ed., \"RTP\n              Control\
    \ Protocol (RTCP) Extended Report (XR) Block for\n              Burst/Gap Loss\
    \ Metric Reporting\", RFC 6958,\n              DOI 10.17487/RFC6958, May 2013,\n\
    \              <https://www.rfc-editor.org/info/rfc6958>.\n   [RFC7002]  Clark,\
    \ A., Zorn, G., and Q. Wu, \"RTP Control Protocol\n              (RTCP) Extended\
    \ Report (XR) Block for Discard Count Metric\n              Reporting\", RFC 7002,\
    \ DOI 10.17487/RFC7002, September\n              2013, <https://www.rfc-editor.org/info/rfc7002>.\n\
    \   [RFC7003]  Clark, A., Huang, R., and Q. Wu, Ed., \"RTP Control\n         \
    \     Protocol (RTCP) Extended Report (XR) Block for Burst/Gap\n             \
    \ Discard Metric Reporting\", RFC 7003, DOI 10.17487/RFC7003,\n              September\
    \ 2013, <https://www.rfc-editor.org/info/rfc7003>.\n   [RFC7004]  Zorn, G., Schott,\
    \ R., Wu, Q., Ed., and R. Huang, \"RTP\n              Control Protocol (RTCP)\
    \ Extended Report (XR) Blocks for\n              Summary Statistics Metrics Reporting\"\
    , RFC 7004,\n              DOI 10.17487/RFC7004, September 2013,\n           \
    \   <https://www.rfc-editor.org/info/rfc7004>.\n   [RFC7005]  Clark, A., Singh,\
    \ V., and Q. Wu, \"RTP Control Protocol\n              (RTCP) Extended Report\
    \ (XR) Block for De-Jitter Buffer\n              Metric Reporting\", RFC 7005,\
    \ DOI 10.17487/RFC7005,\n              September 2013, <http://www.rfc-editor.org/info/rfc7005>.\n\
    \   [RFC7097]  Ott, J., Singh, V., Ed., and I. Curcio, \"RTP Control\n       \
    \       Protocol (RTCP) Extended Report (XR) for RLE of Discarded\n          \
    \    Packets\", RFC 7097, DOI 10.17487/RFC7097, January 2014,\n              <http://www.rfc-editor.org/info/rfc7097>.\n\
    \   [RFC7243]  Singh, V., Ed., Ott, J., and I. Curcio, \"RTP Control\n       \
    \       Protocol (RTCP) Extended Report (XR) Block for the Bytes\n           \
    \   Discarded Metric\", RFC 7243, DOI 10.17487/RFC7243, May\n              2014,\
    \ <http://www.rfc-editor.org/info/rfc7243>.\n   [RFC7509]  Huang, R. and V. Singh,\
    \ \"RTP Control Protocol (RTCP)\n              Extended Report (XR) for Post-Repair\
    \ Loss Count Metrics\",\n              RFC 7509, DOI 10.17487/RFC7509, May 2015,\n\
    \              <http://www.rfc-editor.org/info/rfc7509>.\n   [RFC8015]  Singh,\
    \ V., Perkins, C., Clark, A., and R. Huang, \"RTP\n              Control Protocol\
    \ (RTCP) Extended Report (XR) Block for\n              Independent Reporting of\
    \ Burst/Gap Discard Metrics\",\n              RFC 8015, DOI 10.17487/RFC8015,\
    \ November 2016,\n              <http://www.rfc-editor.org/info/rfc8015>.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [ITU-T_P.800.1]\n              ITU-T, \"Mean\
    \ Opinion Score (MOS) terminology\", ITU-T\n              P.800.1, July 2016,\n\
    \              <https://www.itu.int/rec/T-REC-P.800.1-201607-I>.\n   [RFC4445]\
    \  Welch, J. and J. Clark, \"A Proposed Media Delivery Index\n              (MDI)\"\
    , RFC 4445, DOI 10.17487/RFC4445, April 2006,\n              <https://www.rfc-editor.org/info/rfc4445>.\n\
    \   [WebRTC-Overview]\n              Alverstrand, H., \"Overview: Real Time Protocols\
    \ for\n              Browser-based Applications\", Work in Progress,\n       \
    \       draft-ietf-rtcweb-overview-19, November 2017.\n   [WebRTC-RTP-USAGE]\n\
    \              Perkins, C., Westerlund, M., and J. Ott, \"Web Real-Time\n    \
    \          Communication (WebRTC): Media Transport and Use of RTP\",\n       \
    \       Work in Progress, draft-ietf-rtcweb-rtp-usage-26, March\n            \
    \  2016.\n   [WebRTC-Sec]\n              Rescorla, E., \"Security Considerations\
    \ for WebRTC\", Work\n              in Progress, draft-ietf-rtcweb-security-10,\
    \ January 2018.\n   [RFC7294]  Clark, A., Zorn, G., Bi, C., and Q. Wu, \"RTP Control\n\
    \              Protocol (RTCP) Extended Report (XR) Blocks for\n             \
    \ Concealment Metrics Reporting on Audio Applications\",\n              RFC 7294,\
    \ DOI 10.17487/RFC7294, July 2014,\n              <https://www.rfc-editor.org/info/rfc7294>.\n\
    \   [RFC7478]  Holmberg, C., Hakansson, S., and G. Eriksson, \"Web Real-\n   \
    \           Time Communication Use Cases and Requirements\", RFC 7478,\n     \
    \         DOI 10.17487/RFC7478, March 2015,\n              <https://www.rfc-editor.org/info/rfc7478>.\n\
    \   [W3C.webrtc]\n              Bergkvist, A., Burnett, C., Jennings, C., Narayanan,\
    \ A.,\n              Aboba, B., Brandstetter, T., and J. Bruaroey, \"WebRTC 1.0:\n\
    \              Real-time Communication Between Browsers\", W3C Candidate\n   \
    \           Recommendation, June 2018,\n              <https://www.w3.org/TR/2018/CR-webrtc-20180621/>.\n\
    \              Latest version available at\n              <https://www.w3.org/TR/webrtc/>.\n\
    \   [W3C.webrtc-stats]\n              Alvestrand, H. and V. Singh, \"Identifiers\
    \ for WebRTC's\n              Statistics API\", W3C Candidate Recommendation,\
    \ July 2018,\n              <https://www.w3.org/TR/2018/CR-webrtc-stats-20180703/>.\n\
    \              Latest version available at\n              <https://www.w3.org/TR/webrtc-stats/>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors would like to thank Bernard Aboba, Harald Alvestrand,\
    \ Al\n   Morton, Colin Perkins, and Shida Schubert for their valuable comments\n\
    \   and suggestions on earlier draft versions of this document.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Varun Singh\n   CALLSTATS I/O Oy\n   Annankatu 31-33 C\
    \ 42\n   Helsinki  00100\n   Finland\n   Email: varun@callstats.io\n   URI:  \
    \ https://www.callstats.io/about\n   Rachel Huang\n   Huawei\n   101 Software\
    \ Avenue, Yuhua District\n   Nanjing  210012\n   China\n   Email: rachel.huang@huawei.com\n\
    \   Roni Even\n   Huawei\n   14 David Hamelech\n   Tel Aviv  64953\n   Israel\n\
    \   Email: roni.even@huawei.com\n   Dan Romascanu\n   Email: dromasca@gmail.com\n\
    \   Lingli Deng\n   China Mobile\n   Email: denglingli@chinamobile.com\n"
