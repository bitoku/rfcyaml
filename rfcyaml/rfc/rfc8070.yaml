- contents:
  - ''
  title: __initial_text__
- contents:
  - "Public Key Cryptography for Initial Authentication in Kerberos (PKINIT)\n                          Freshness
    Extension\n"
  title: Public Key Cryptography for Initial Authentication in Kerberos (PKINIT)
- contents:
  - "Abstract\n   This document describes how to further extend the Public Key\n   Cryptography
    for Initial Authentication in Kerberos (PKINIT)\n   extension (defined in RFC
    4556) to exchange an opaque data blob that\n   a Key Distribution Center (KDC)
    can validate to ensure that the\n   client is currently in possession of the private
    key during a PKINIT\n   Authentication Service (AS) exchange.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8070.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n
    \     1.1. Kerberos Message Flow Using KRB_AS_REQ without\n           Pre-authentication
    .........................................3\n      1.2. Requirements Language ......................................3\n
    \  2. Message Exchanges ...............................................4\n      2.1.
    Generation of KRB_AS_REQ Message ...........................4\n      2.2. Generation
    of KRB_ERROR Message ............................4\n      2.3. Generation of KRB_AS_REQ
    Message ...........................4\n      2.4. Receipt of KRB_AS_REQ Message
    ..............................5\n      2.5. Receipt of Second KRB_ERROR Message
    ........................5\n   3. PreAuthentication Data Types ....................................5\n
    \  4. Extended PKAuthenticator ........................................6\n   5.
    IANA Considerations .............................................6\n   6. Security
    Considerations .........................................7\n   7. Interoperability
    Considerations .................................7\n   8. Normative References
    ............................................8\n   Acknowledgements ...................................................8\n
    \  Authors' Addresses .................................................9\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Kerberos PKINIT extension [RFC4556] defines two schemes
    for using\n   asymmetric cryptography in a Kerberos pre-authenticator.  One uses\n
    \  Diffie-Hellman key exchange and the other depends on public key\n   encryption.
    \ The public key encryption scheme is less commonly used\n   for two reasons:\n
    \  o  Elliptic Curve Cryptography (ECC) Support for PKINIT [RFC5349]\n      only
    specified Elliptic Curve Diffie-Hellman (ECDH) key agreement,\n      so it cannot
    be used for public key encryption.\n   o  Public key encryption requires certificates
    with an encryption\n      key, which is not deployed on many existing smart cards.\n
    \  In the Diffie-Hellman exchange, the client uses its private key only\n   to
    sign the AuthPack structure (specified in Section 3.2.1 of\n   [RFC4556]), which
    is performed before any traffic is sent to the KDC.\n   Thus, a client can generate
    requests with future times in the\n   PKAuthenticator, and then send those requests
    at those future times.\n   Unless the time is outside the validity period of the
    client's\n   certificate, the KDC will validate the PKAuthenticator and return
    a\n   Ticket-Granting Ticket (TGT) the client can use without possessing\n   the
    private key.\n   As a result, a client performing PKINIT with the Diffie-Hellman
    key\n   exchange does not prove current possession of the private key being\n
    \  used for authentication.  It proves only prior use of that key.\n   Ensuring
    that the client has current possession of the private key\n   requires that the
    signed PKAuthenticator data include information\n   that the client could not
    have predicted.\n"
  - contents:
    - "1.1.  Kerberos Message Flow Using KRB_AS_REQ without Pre-authentication\n   Today,
      password-based AS exchanges [RFC4120] often begin with the\n   client sending
      a KRB_AS_REQ without pre-authentication.  When the\n   principal requires pre-authentication,
      the KDC responds with a\n   KRB_ERROR containing information needed to complete
      an AS exchange,\n   such as the supported encryption types and salt values.
      \ This message\n   flow is illustrated below:\n   Client                                          KDC\n
      \  AS-REQ without pre-authentication     ---->\n                                         <----
      \    KRB-ERROR\n   AS-REQ                                ---->\n                                         <----
      \    AS-REP\n   TGS-REQ                               ---->\n                                         <----
      \    TGS-REP\n                           Figure 1\n   We can use a similar message
      flow with PKINIT, allowing the KDC to\n   provide a token for the client to
      include in its KRB_AS_REQ to ensure\n   that the PA_PK_AS_REQ [RFC4556] was
      not pre-generated.\n"
    title: 1.1.  Kerberos Message Flow Using KRB_AS_REQ without Pre-authentication
  - contents:
    - "1.2.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
      and \"OPTIONAL\" in this\n   document are to be interpreted as described in
      [RFC2119].\n"
    title: 1.2.  Requirements Language
  title: 1.  Introduction
- contents:
  - "2.  Message Exchanges\n   The following summarizes the message flow with extensions
    to\n   [RFC4120] and [RFC4556] required to support a KDC-provided freshness\n
    \  token during the initial request for a ticket:\n   1.  The client generates
    a KRB_AS_REQ, as specified in Section 2.9.3\n       of [RFC4120], that contains
    no PA_PK_AS_REQ and includes a\n       freshness token request.\n   2.  The KDC
    generates a KRB_ERROR, as specified in Section 3.1.4 of\n       [RFC4120], providing
    a freshness token.\n   3.  The client receives the error, as specified in Section
    3.1.5 of\n       [RFC4120], extracts the freshness token, and includes it as part\n
    \      of the KRB_AS_REQ as specified in [RFC4120] and [RFC4556].\n   4.  The
    KDC receives and validates the KRB_AS_REQ, as specified in\n       Section 3.2.2
    of [RFC4556], then additionally validates the\n       freshness token.\n   5.
    \ The KDC and client continue, as specified in [RFC4120] and\n       [RFC4556].\n"
  - contents:
    - "2.1.  Generation of KRB_AS_REQ Message\n   The client indicates support of
      freshness tokens by adding a padata\n   element with padata-type PA_AS_FRESHNESS
      and padata-value of an empty\n   octet string.\n"
    title: 2.1.  Generation of KRB_AS_REQ Message
  - contents:
    - "2.2.  Generation of KRB_ERROR Message\n   The KDC will respond with a KRB_ERROR
      [RFC4120] message with the\n   error-code KDC_ERR_PREAUTH_REQUIRED [RFC4120]
      adding a padata element\n   with padata-type PA_AS_FRESHNESS and padata-value
      of the freshness\n   token to the METHOD-DATA object.\n"
    title: 2.2.  Generation of KRB_ERROR Message
  - contents:
    - "2.3.  Generation of KRB_AS_REQ Message\n   After the client receives the KRB-ERROR
      message containing a\n   freshness token, it extracts the PA_AS_FRESHNESS padata-value
      field\n   of the PA-DATA structure as an opaque data blob.  The PA_AS_FRESHNESS\n
      \  padata-value field of the PA-DATA structure SHALL then be added as an\n   opaque
      blob in the freshnessToken field when the client generates the\n   PKAuthenticator
      specified in Section 4 for the PA_PK_AS_REQ message.\n   This ensures that the
      freshness token value will be included in the\n   signed data portion of the
      KRB_AS_REQ value.\n"
    title: 2.3.  Generation of KRB_AS_REQ Message
  - contents:
    - "2.4.  Receipt of KRB_AS_REQ Message\n   If the realm requires freshness and
      the PA_PK_AS_REQ message does not\n   contain the freshness token, the KDC MUST
      return a KRB_ERROR\n   [RFC4120] message with the error-code KDC_ERR_PREAUTH_FAILED\n
      \  [RFC4120] with a padata element with padata-type PA_AS_FRESHNESS and\n   padata-value
      of the freshness token to the METHOD-DATA object.\n   When the PA_PK_AS_REQ
      message contains a freshness token, after\n   validating the PA_PK_AS_REQ message
      normally, the KDC will validate\n   the freshnessToken value in the PKAuthenticator
      in an implementation-\n   specific way.  If the freshness token is not valid,
      the KDC MUST\n   return a KRB_ERROR [RFC4120] message with the error-code\n
      \  KDC_ERR_PREAUTH_EXPIRED [RFC6113].  The e-data field of the error\n   contains
      a METHOD-DATA object [RFC4120], which specifies a valid\n   PA_AS_FRESHNESS
      padata-value.  Since the freshness tokens are\n   validated by KDCs in the same
      realm, standardizing the contents of\n   the freshness token is not a concern
      for interoperability.\n"
    title: 2.4.  Receipt of KRB_AS_REQ Message
  - contents:
    - "2.5.  Receipt of Second KRB_ERROR Message\n   If a client receives a KDC_ERR_PREAUTH_EXPIRED
      KRB_ERROR message that\n   includes a freshness token, it SHOULD retry using
      the new freshness\n   token.\n"
    title: 2.5.  Receipt of Second KRB_ERROR Message
  title: 2.  Message Exchanges
- contents:
  - "3.  PreAuthentication Data Types\n   The following are the new PreAuthentication
    data types:\n               +----------------------+-------------------+\n               |
    Padata and Data Type | Padata-type Value |\n               +----------------------+-------------------+\n
    \              |   PA_AS_FRESHNESS    |        150        |\n               +----------------------+-------------------+\n"
  title: 3.  PreAuthentication Data Types
- contents:
  - "4.  Extended PKAuthenticator\n   The PKAuthenticator structure specified in Section
    3.2.1 of [RFC4556]\n   is extended to include a new freshnessToken as follows:\n
    \  PKAuthenticator ::= SEQUENCE {\n      cusec        [0] INTEGER (0..999999),\n
    \     ctime        [1] KerberosTime,\n                -- cusec and ctime are used
    as in [RFC4120], for\n                -- replay prevention.\n      nonce        [2]
    INTEGER (0..4294967295),\n                -- Chosen randomly;  this nonce does
    not need to\n                -- match with the nonce in the KDC-REQ-BODY.\n      paChecksum
    \  [3] OCTET STRING OPTIONAL,\n                -- MUST be present.\n                --
    Contains the SHA1 checksum, performed over\n                -- KDC-REQ-BODY.\n
    \     ...,\n      freshnessToken     [4] OCTET STRING OPTIONAL,\n                --
    PA_AS_FRESHNESS padata value as received from the\n                -- KDC. MUST
    be present if sent by KDC\n      ...\n   }\n"
  title: 4.  Extended PKAuthenticator
- contents:
  - "5.  IANA Considerations\n   IANA has assigned numbers for PA_AS_FRESHNESS listed
    in a subregistry\n   of the \"Kerberos Parameters\" registry titled \"Pre-authentication
    and\n   Typed Data\" as follows:\n                  +------+-----------------+-----------+\n
    \                 | Type |      Value      | Reference |\n                  +------+-----------------+-----------+\n
    \                 | 150  | PA_AS_FRESHNESS | [RFC8070] |\n                  +------+-----------------+-----------+\n"
  title: 5.  IANA Considerations
- contents:
  - "6.  Security Considerations\n   The freshness token SHOULD include signing, encrypting,
    or sealing\n   data from the KDC to determine authenticity and prevent tampering.\n
    \  Freshness tokens serve to guarantee that the client had the key when\n   constructing
    the AS-REQ.  They are not required to be single use\n   tokens or bound to specific
    AS exchanges.  Part of the reason the\n   token is opaque is to allow KDC implementers
    the freedom to add\n   additional functionality as long as the tokens expire so
    that the\n   \"freshness\" guarantee remains.\n"
  title: 6.  Security Considerations
- contents:
  - "7.  Interoperability Considerations\n   Since the client treats the KDC-provided
    data blob as opaque,\n   changing the contents will not impact existing clients.
    \ Thus,\n   extensions to the freshness token do not impact client\n   interoperability.\n
    \  Clients SHOULD NOT reuse freshness tokens across multiple exchanges.\n   There
    is no guarantee that a KDC will allow a once-valid token to be\n   used again.
    \ Thus, clients that do not retry with a new freshness\n   token may not be compatible
    with KDCs, depending on how they choose\n   to implement freshness validation.\n
    \  Since upgrading clients takes time, implementers may consider\n   allowing
    both freshness-token based exchanges and \"legacy\" exchanges\n   without use
    of freshness tokens.  However, until freshness tokens are\n   required by the
    realm, the existing risks of pre-generated\n   PKAuthenticators will remain.\n"
  title: 7.  Interoperability Considerations
- contents:
  - "8.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in RFCs
    to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n              DOI
    10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n
    \  [RFC4120]  Neuman, C., Yu, T., Hartman, S., and K. Raeburn, \"The\n              Kerberos
    Network Authentication Service (V5)\", RFC 4120,\n              DOI 10.17487/RFC4120,
    July 2005,\n              <http://www.rfc-editor.org/info/rfc4120>.\n   [RFC4556]
    \ Zhu, L. and B. Tung, \"Public Key Cryptography for Initial\n              Authentication
    in Kerberos (PKINIT)\", RFC 4556,\n              DOI 10.17487/RFC4556, June 2006,\n
    \             <http://www.rfc-editor.org/info/rfc4556>.\n   [RFC5349]  Zhu, L.,
    Jaganathan, K., and K. Lauter, \"Elliptic Curve\n              Cryptography (ECC)
    Support for Public Key Cryptography for\n              Initial Authentication
    in Kerberos (PKINIT)\", RFC 5349,\n              DOI 10.17487/RFC5349, September
    2008,\n              <http://www.rfc-editor.org/info/rfc5349>.\n   [RFC6113]  Hartman,
    S. and L. Zhu, \"A Generalized Framework for\n              Kerberos Pre-Authentication\",
    RFC 6113,\n              DOI 10.17487/RFC6113, April 2011,\n              <http://www.rfc-editor.org/info/rfc6113>.\n"
  title: 8.  Normative References
- contents:
  - "Acknowledgements\n   Douglas E. Engert, Sam Hartman, Henry B. Hotz, Nikos\n   Mavrogiannopoulos,
    Martin Rex, Nico Williams, and Tom Yu were key\n   contributors to the discovery
    of the freshness issue in PKINIT.\n   Sam Hartman, Greg Hudson, Jeffrey Hutzelman,
    Nathan Ide, Benjamin\n   Kaduk, Bryce Nordgren, Magnus Nystrom, Nico Williams,
    and Tom Yu\n   reviewed the document and provided suggestions for improvements.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Michiko Short (editor)\n   Microsoft Corporation\n   United
    States of America\n   Email: michikos@microsoft.com\n   Seth Moore\n   Microsoft
    Corporation\n   United States of America\n   Email: sethmo@microsoft.com\n   Paul
    Miller\n   Microsoft Corporation\n   United States of America\n   Email: paumil@microsoft.com\n"
  title: Authors' Addresses
