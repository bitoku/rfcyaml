Abstract This document describes GREASE (Generate Random Extensions And Sustain Extensibility), a mechanism to prevent extensibility failures in the TLS ecosystem.
It reserves a set of TLS protocol values that may be advertised to ensure peers correctly handle unknown values.
The TLS protocol [RFC8446] includes several points of extensibility, including the list of cipher suites and several lists of extensions.
The values transmitted in these lists identify implementation capabilities.
TLS follows a model where one side, usually the client, advertises capabilities, and the peer, usually the server, selects them.
The responding side must ignore unknown values so that new capabilities may be introduced to the ecosystem while maintaining interoperability.
However, bugs may cause an implementation to reject unknown values.
It will interoperate with existing peers, so the mistake may spread through the ecosystem unnoticed.
Later, when new values are defined, updated peers will discover that the metaphorical joint in the protocol has rusted shut and the new values cannot be deployed without interoperability failures.
To avoid this problem, this document reserves some currently unused values for TLS implementations to advertise at random.
Correctly implemented peers will ignore these values and interoperate.
Peers that do not tolerate unknown values will fail to interoperate, revealing the mistake before it is widespread.
In keeping with the rusted joint metaphor, this technique is called "GREASE"
(Generate Random Extensions And Sustain Extensibility).
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14
when, and only when, they appear in all capitals, as shown here.
This document reserves a number of TLS protocol values, referred to as GREASE values.
These values were allocated sparsely to discourage server implementations from conditioning on them.
For convenience, they were also chosen so all types share a number scheme with a consistent pattern while avoiding collisions with any existing applicable registries in TLS.
The following values are reserved as GREASE values for cipher suites and Application Layer Protocol Negotiation (ALPN)
[RFC7301] identifiers: {0x0A,0x0A} {0x1A,0x1A} {0x2A,0x2A} {0x3A,0x3A} {0x4A,0x4A} {0x5A,0x5A} {0x6A,0x6A} {0x7A,0x7A} {0x8A,0x8A} {0x9A,0x9A} {0xAA,0xAA} {0xBA,0xBA} {0xCA,0xCA} {0xDA,0xDA} {0xEA,0xEA} {0xFA,0xFA}
The following values are reserved as GREASE values for extensions, named groups, signature algorithms, and versions:
The values allocated above are thus no longer available for use as TLS or DTLS
The following values are reserved as GREASE values for PskKeyExchangeModes: 0x0B 0x2A
Most extension points in TLS are offered by the client and selected by the server.
This section details client and server behavior around GREASE values for these.
When sending a ClientHello, a client MAY behave as follows:
A client MAY select one or more GREASE cipher suite values and advertise them in the "cipher suites" field.
A client MAY select one or more GREASE extension values and advertise them as extensions with varying length and contents.
A client MAY select one or more GREASE named group values and advertise them in the "supported groups" extension, if sent.
It MAY also send KeyShareEntry values for a subset of those selected in the "key share" extension.
For each of these, the "key exchange" field MAY be any value.
A client MAY select one or more GREASE signature algorithm values and advertise them in the "signature algorithms" or "signature algorithms cert" extensions, if sent.
A client MAY select one or more GREASE version values and advertise them in the "supported versions" extension, if sent.
A client MAY select one or more GREASE PskKeyExchangeMode values and advertise them in the "psk key exchange modes" extension, if sent.
A client MAY select one or more GREASE ALPN identifiers and advertise them in the "application layer protocol negotiation" extension, if sent.
Clients MUST reject GREASE values when negotiated by the server.
The "cipher suite" value in a ServerHello    Any ServerHello extension
Any HelloRetryRequest, EncryptedExtensions, or Certificate extension in TLS 1.3
The "namedcurve" value in a ServerKeyExchange for an Ephemeral Elliptic Curve Diffie Hellman (ECDHE) cipher in TLS 1.2
The signature algorithm in a ServerKeyExchange signature in TLS 1.2 or earlier
The signature algorithm in a server CertificateVerify signature in TLS
1.3 Note that this can be implemented without special processing on the client.
The client is already required to reject unknown server  selected values, so it may leave GREASE values as unknown and reuse the existing logic.
When processing a ClientHello, servers MUST NOT treat GREASE values differently from any unknown value.
Servers MUST NOT negotiate any GREASE value when offered in a ClientHello.
Servers MUST correctly ignore unknown values in a ClientHello and attempt to negotiate with one of the remaining parameters.
(There may not be any known parameters remaining, in which case parameter negotiation will fail.)
Note that these requirements are restatements or corollaries of existing server requirements in TLS.
Some extension points are offered by the server and selected by the client.
This section details client and server behavior around GREASE values for these.
Server Behavior When sending a CertificateRequest in TLS 1.3, a server MAY behave as follows:
A server MAY select one or more GREASE extension values and advertise them as extensions with varying length and contents.
A server MAY select one or more GREASE signature algorithm values and advertise them in the "signature algorithms" or "signature algorithms cert" extensions, if present.
When sending a NewSessionTicket message in TLS 1.3, a server MAY select one or more GREASE extension values and advertise them as extensions with varying length and contents.
Servers MUST reject GREASE values when negotiated by the client.
In particular, the server MUST fail the connection if a GREASE value appears in any of the following:
Any Certificate extension in TLS 1.3
The signature algorithm in a client CertificateVerify signature Note that this can be implemented without special processing on the server.
The server is already required to reject unknown client  selected values, so it may leave GREASE values as unknown and reuse the existing logic.
When processing a CertificateRequest or NewSessionTicket, clients MUST NOT treat GREASE values differently from any unknown value.
Clients MUST NOT negotiate any GREASE value when offered by the server.
Clients MUST correctly ignore unknown values offered by the server and attempt to negotiate with one of the remaining parameters.
(There may not be any known parameters remaining, in which case parameter negotiation will fail.)
Note that these requirements are restatements or corollaries of existing client requirements in TLS.
5.  Sending GREASE Values Implementations advertising GREASE values SHOULD select them at random.
This is intended to encourage implementations to ignore all unknown values rather than any individual value.
Implementations MUST honor protocol specifications when sending GREASE values.
For instance, Section 4.2 of [RFC8446] forbids duplicate extension types within a single extension block.
Implementations sending multiple GREASE extensions in a single block must therefore ensure the same value is not selected twice.
Implementations SHOULD balance diversity in GREASE advertisements with determinism.
For example, a client that randomly varies GREASE value positions for each connection may only fail against a broken server with some probability.
This risks the failure being masked by automatic retries.
A client that positions GREASE values deterministically over a period of time (such as a single software release) stresses fewer cases but is more likely to detect bugs from those cases.
Additions to the TLS Cipher
This document updates the "TLS Supported Groups" registry, available at <https://www.iana.org/assignments/tls parameters
Additions to the TLS Supported Groups Registry
This document updates the "TLS ExtensionType Values" registry, available at <https://www.iana.org/assignments/tls extensiontype  values
Additions to the TLS ExtensionType Values Registry
This document updates the "TLS Application Layer Protocol Negotiation (ALPN) Protocol IDs" registry, available at <https://www.iana.org/assignments/tls extensiontype values
Additions to the TLS Application  Layer Protocol Negotiation (ALPN)
Security Considerations GREASE values cannot be negotiated, so they do not directly impact the security of TLS connections.
Historically, when interoperability problems arise in deploying new TLS features, implementations have used a fallback retry on error with the feature disabled.
This allows an active attacker to silently disable the new feature.
By preventing a class of such interoperability problems, GREASE reduces the need for this kind of fallback.
Implementations SHOULD NOT retry with GREASE disabled on connection failure.
While allowing an attacker to disable GREASE is unlikely to have immediate security consequences, such a fallback would prevent GREASE from defending against extensibility failures.
If an implementation does not select GREASE values at random, it is possible it will allow for fingerprinting of the implementation or perhaps even of individual users.
This can result in a negative impact to a user's privacy.
