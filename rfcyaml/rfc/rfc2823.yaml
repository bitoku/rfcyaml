- title: __initial_text__
  contents:
  - "                              Lucent Technologies Microelectronics Group\n  \
    \                  PPP over Simple Data Link (SDL)\n                 using SONET/SDH\
    \ with ATM-like framing\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Point-to-Point Protocol (PPP) [1] provides a standard method\
    \ for\n   transporting multi-protocol datagrams over point-to-point links, and\n\
    \   RFCs 1662 [2] and 2615 [3] provide a means to carry PPP over\n   Synchronous\
    \ Optical Network (SONET) [4] and Synchronous Digital\n   Hierarchy (SDH) [5]\
    \ circuits.  This document extends these standards\n   to include a new encapsulation\
    \ for PPP called Simple Data Link (SDL)\n   [6].  SDL provides a very low overhead\
    \ alternative to HDLC-like\n   encapsulation, and can also be used on SONET/SDH\
    \ links.\n"
- title: Applicability
  contents:
  - "Applicability\n   This specification is intended for those implementations that\
    \ use PPP\n   over high speed point-to-point circuits, both with so-called \"\
    dark\n   fiber\" and over public telecommunications networks.  Because this\n\
    \   enhanced PPP encapsulation has very low overhead and good hardware\n   scaling\
    \ characteristics, it is anticipated that significantly higher\n   throughput\
    \ can be attained when compared to other possible SONET/SDH\n   payload mappings,\
    \ and at a significantly lower cost for line\n   termination equipment.\n   SDL\
    \ is defined over other media types and for other data link\n   protocols, but\
    \ this specification covers only the use of PPP over SDL\n   on SONET/SDH.\n \
    \  The use of SDL requires the presentation of packet length information\n   in\
    \ the SDL header.  Thus, hardware implementing SDL must have access\n   to the\
    \ packet length when generating the header, and where a router's\n   input link\
    \ does not have this information (that is, for non-SDL input\n   links), the router\
    \ may be required to buffer the entire packet before\n   transmission.  \"Worm-hole\"\
    \ routing is thus at least problematic with\n   SDL, unless the input links are\
    \ also SDL.  This, however, does not\n   appear to be a great disadvantage on\
    \ modern routers due to the\n   general requirement of length information in other\
    \ parts of the\n   system, notably in queuing and congestion control strategies\
    \ such as\n   Weighted Fair Queuing [7] and Random Early Detect [8].\n   This\
    \ document is not a replacement for the existing HDLC-like framing\n   mandated\
    \ by RFC 2615 [3].  Instead, the authors intend to gain\n   implementation experience\
    \ with this technique for operational and\n   performance evaluation purposes,\
    \ and would like to hear from others\n   either considering or using the protocol\
    \ as described in this\n   document.  Please see Section 14 of this document for\
    \ contact\n   information.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction ...............................................\
    \    4\n   2.  Compliance .................................................  \
    \  4\n   3.  Physical Layer Requirements ................................    5\n\
    \   3.1.  Payload Types ............................................    5\n  \
    \ 3.2.  Control Signals ..........................................    6\n   3.3.\
    \  Synchronization Modes ....................................    7\n   3.4.  Simple-Data-Link\
    \ LCP Option ..............................    7\n   3.5.  Framing ..................................................\
    \    8\n   3.6.  Framing Example ..........................................  \
    \ 11\n   3.7.  Synchronization Procedure ................................   11\n\
    \   3.8.  Scrambler Operation ......................................   12\n  \
    \ 3.9.  CRC Generation ...........................................   12\n   3.10.\
    \  Error Correction ........................................   13\n   4.  Performance\
    \ Analysis .......................................   14\n   4.1.  Mean Time To\
    \ Frame (MTTF) ................................   14\n   4.2.  Mean Time To Synchronization\
    \ (MTTS) ......................   15\n   4.3.  Probability of False Frame (PFF)\
    \ .........................   16\n   4.4.  Probability of False Synchronization\
    \ (PFS) ...............   16\n   4.5.  Probability of Loss of Frame (PLF) .......................\
    \   16\n   5.  The Special Messages .......................................  \
    \ 16\n   5.1.  Scrambler State ..........................................   17\n\
    \   5.2.  A/B Message ..............................................   17\n  \
    \ 6.  The Set-Reset Scrambler Option .............................   17\n   6.1.\
    \  The Killer Packet Problem ................................   17\n   6.2.  SDL\
    \ Set-Reset Scrambler ..................................   18\n   6.3.  SDL Scrambler\
    \ Synchronization ............................   18\n   6.4.  SDL Scrambler Operation\
    \ ..................................   19\n   7.  Configuration Details ......................................\
    \   20\n   7.1.  Default LCP Configuration ................................  \
    \ 20\n   7.2.  Modification of the Standard Frame Format ................   21\n\
    \   8.  Implementation Details .....................................   21\n  \
    \ 8.1.  CRC Generation ...........................................   21\n   8.2.\
    \  Error Correction Tables ..................................   23\n   9.  Security\
    \ Considerations ....................................   25\n   10.  References\
    \ ................................................   25\n   11.  Acknowledgments\
    \ ...........................................   26\n   12.  Working Group and\
    \ Chair Address ...........................   26\n   13.  Intellectual Property\
    \ Notices .............................   26\n   14.  Authors' Addresses ........................................\
    \   27\n   15.  Full Copyright Statement ..................................  \
    \ 28\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Path Signal Label (SONET/SDH overhead byte named C2;\
    \ referred to\n   as PSL in this document) is intended to indicate the type of\
    \ data\n   carried on the path.  This data, in turn, is referred to as the SONET\n\
    \   Synchronous Payload Envelope (SPE) or SDH Administrative Unit Group\n   (AUG).\
    \  The experimental PSL value of decimal 207 (CF hex) is\n   currently [3] used\
    \ to indicate that the SPE contains PPP framed using\n   RFC 1662 Octet Synchronous\
    \ (O-S) framing and transmission without\n   scrambling, and the value 22 (16\
    \ hex) is used to indicated PPP framed\n   using O-S framing and transmission\
    \ with ATM-style X^43+1 scrambling.\n   This document describes a method to enable\
    \ the use of SDL framing for\n   PPP over SONET/SDH, and describes the framing\
    \ technique and\n   requirements for PPP.  While O-S framing on SONET/SDH has\
    \ a fixed\n   seven octet overhead per frame plus a worst-case overhead of 100%\
    \ of\n   all data octets transmitted, SDL has a fixed eight octet per frame\n\
    \   overhead with zero data overhead.  Unlike O-S framing, SDL also\n   provides\
    \ positive indication of link synchronization.\n   Note:  This document describes\
    \ two new SONET/SDH Path Signal Label\n   (PSL) values; 23 (17 hex) for SDL with\
    \ the proposed self synchronous\n   scrambler and 25 (19 hex) for SDL with the\
    \ proposed set-reset\n   scrambler.  These values have been allocated by ANSI\
    \ T1X1.5 and ITU-T\n   SG-15 for use with SDL over SONET and SDH, and will appear\
    \ in\n   subsequent updates of T1.105 (Table 8) and Recommendation G.707\n   (Table\
    \ 7).\n"
- title: 2.  Compliance
  contents:
  - "2.  Compliance\n   In this document, the words that are used to define the significance\n\
    \   of each particular requirement are capitalized.\n   These words are:\n   *\
    \  \"MUST\"\n      This word means that the item is an absolute requirement of\
    \ the\n      specification.\n   *  \"MUST NOT\"\n      This phrase means that\
    \ the item is an absolute prohibition of the\n      specification.\n   *  \"SHOULD\"\
    \n      This word means that there may exist valid reasons in particular\n   \
    \   circumstances to ignore this item, but the full implications\n      should\
    \ be understood and the case carefully weighed before\n      choosing a different\
    \ course.\n   *  \"SHOULD NOT\"\n      This phrase means that there may exist\
    \ valid reasons in particular\n      circumstances to apply this item, but the\
    \ full implications should\n      be understood and the case carefully weighed\
    \ before choosing a\n      different course.\n   *  \"MAY\"\n      This word means\
    \ that this item is truly optional.  One vendor may\n      choose to include the\
    \ item because a particular marketplace\n      requires it or because it enhances\
    \ the product, for example;\n      another vendor may omit the same item.\n  \
    \ An implementation is not compliant if it fails to satisfy one or more\n   of\
    \ the MUST or MUST NOT requirements for this protocol.  An\n   implementation\
    \ that satisfies all of the MUST, MUST NOT, SHOULD, and\n   SHOULD NOT requirements\
    \ for this protocol is said to be\n   \"unconditionally compliant\".  One that\
    \ satisfies all the MUST and\n   MUST NOT requirements but not all the SHOULD\
    \ or SHOULD NOT\n   requirements is said to be \"conditionally compliant\".\n"
- title: 3.  Physical Layer Requirements
  contents:
  - "3.  Physical Layer Requirements\n   PPP treats SONET/SDH transport as octet-oriented\
    \ synchronous links.\n   No provision is made to transmit partial octets.  Also,\
    \ SONET/SDH\n   links are full-duplex by definition.\n"
- title: 3.1.  Payload Types
  contents:
  - "3.1.  Payload Types\n   Only synchronous payloads STS-1 and higher are considered\
    \ in this\n   document.  Lower speed synchronous, such as VT1.5-SPE/VC-11, and\n\
    \   plesiochronous payload mappings, such as T1 and T3, are defined for\n   SONET/SDH\
    \ and for the SDL algorithm itself, but, since HDLC-like\n   framing is defined\
    \ for PPP on those media, PPP over SDL is not\n   defined.\n   SDL is separately\
    \ defined as a PPP transport for use on raw fiber\n   without SONET/SDH framing\
    \ for use as an alternative to bit-\n   synchronous HDLC.  Please see the separate\
    \ work-in-progress for\n   details.\n"
- title: 3.2.  Control Signals
  contents:
  - "3.2.  Control Signals\n   The PPP over SONET/SDH mapping allows the use of the\
    \ PSL as a control\n   signal.  Not all equipment, however, is capable of setting\
    \ or\n   detecting this value, and any use must take this into account.\n   Equipment\
    \ employing only SDL MUST be capable of transmitting PSL with\n   value 23, and\
    \ MAY also be capable of transmitting PSL with value 25,\n   but need not be capable\
    \ of detecting the peer's value or capable of\n   changing its own value.\n  \
    \ There are two methods to enable SDL, an LCP-negotiated method and a\n   prior-arrangement\
    \ method.  The former allows for easier configuration\n   and compatibility with\
    \ existing equipment, while the latter allows\n   general use with separate SONET/SDH\
    \ transmission equipment with PSL\n   limitations.  Both types of implementations\
    \ will freely interoperate\n   given the procedures below.\n   LCP-negotiated\
    \ systems MUST be capable of changing their transmitted\n   PSL value and detecting\
    \ the peer's value.  Equipment without these\n   features MUST NOT support LCP\
    \ negotiation of SDL.\n   When SDL is negotiated by LCP, LCP negotiation MUST\
    \ be started with\n   the PSL value initially set to 22 or 207 and the corresponding\
    \ non-\n   SDL O-S PPP encapsulation MUST be used.  The SDL LCP option is then\n\
    \   placed in the LCP Configure-Request messages transmitted.  On\n   reception\
    \ of LCP Configure-Request with an SDL LCP option or when the\n   peer's transmitted\
    \ PSL value is received as 23 (or 25), the\n   implementation MUST shut down LCP\
    \ by sending a Down event to its\n   state machine, then switch its transmitted\
    \ PSL value to 23 (or 25),\n   switch encapsulation mode to SDL, wait for SDL\
    \ synchronization, and\n   then restart LCP by sending an Up event into LCP. \
    \ Otherwise, if the\n   peer does not transmit PSL value 23 (or 25) and it does\
    \ not include\n   the SDL LCP option in its LCP Configure-Request messages, then\n\
    \   operation using non-SDL O-S PPP encapsulation continues.  If the\n   received\
    \ PSL value subsequently received reverts from 23 (or 25) to\n   any other value,\
    \ then this is treated as a Down event into the LCP\n   state machine, and an\
    \ Up event MUST be generated if the new value is\n   recognized as a valid PPP\
    \ framing mode.\n   When SDL is enabled by prior arrangement, the PSL SHOULD be\n\
    \   transmitted as 23 (or 25).  Any other value may also be used by prior\n  \
    \ external arrangement with the peer, although the values 22 and 207\n   are discouraged.\
    \  (Such use is enforced by an administrator, and is\n   outside the scope of\
    \ this specification.)  When SDL is enabled by\n   prior arrangement, the SDL\
    \ LCP option SHOULD NOT be negotiated by the\n   peers.\n   An implementation-specific\
    \ configuration option SHOULD exist to\n   enable the use of prior-arrangement\
    \ versus LCP-negotiated modes.\n   This option SHOULD be presented to an administrator,\
    \ and SHOULD\n   default to LCP-negotiated if the hardware permits.  Otherwise,\
    \ if the\n   hardware implementation precludes non-SDL modes of operation, then\
    \ it\n   MUST default to prior-arrangement mode.\n   The LCP-negotiated method\
    \ of operation is compatible with the current\n   version of G.783 [12].  This\
    \ method may not be compatible, however,\n   with some non-intrusive SDH path\
    \ monitoring equipment based on\n   obsolete versions of G.783.  The change in\
    \ PSL value indicated by the\n   LCP negotiation method will cause this equipment\
    \ to declare an alarm\n   condition on the path.  For this reason, the prior-arrangement\
    \ method\n   MUST be used on any SDH network that is using such monitoring\n \
    \  equipment.\n"
- title: 3.3.  Synchronization Modes
  contents:
  - "3.3.  Synchronization Modes\n   Unlike O-S encapsulation, SDL provides a positive\
    \ indication that it\n   has achieved synchronization with the peer.  An SDL PPP\n\
    \   implementation MUST provide a means to temporarily suspend PPP data\n   transmission\
    \ (both user data and negotiation traffic) if\n   synchronization loss is detected.\
    \  An SDL PPP implementation SHOULD\n   also provide a configurable timer that\
    \ is started when SDL is\n   initialized and restarted on the loss of synchronization,\
    \ and is\n   terminated when link synchronization is achieved.  If this timer\n\
    \   expires, implementation-dependent action should be taken to report\n   the\
    \ hardware failure.\n"
- title: 3.4.  Simple-Data-Link LCP Option
  contents:
  - "3.4.  Simple-Data-Link LCP Option\n   A new LCP Configuration Option is used\
    \ to request Simple Data Link\n   (SDL) [6] operation for the PPP link.\n   A\
    \ summary of the Simple-Data-Link Configuration Option format for the\n   Link\
    \ Control Protocol (LCP) is shown below.  The fields are\n   transmitted from\
    \ left to right.\n    0                   1\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |     Type      |    Length    \
    \ |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Type\n      29\n   Length\n    \
    \  2\n   This option is used only as a hint to the peer that SDL over\n   SONET/SDH\
    \ operation is preferred by the sender.  If the current\n   encapsulation mode\
    \ is not SDL, then the only appropriate response to\n   reception of this option\
    \ by an SDL speaker is to then switch the\n   encapsulation mode to SDL (as detailed\
    \ in the section above) and\n   restart LCP.  Non SDL-speakers SHOULD instead\
    \ send LCP Configure-\n   Reject for the option.\n   If either LCP Configure-Nak\
    \ or LCP Configure-Reject is received for\n   this option, then the next transmitted\
    \ LCP Configure-Request MUST NOT\n   include this option.  If LCP Configure-Ack\
    \ with this option is\n   received, it MUST NOT be treated as a request to switch\
    \ into SDL\n   mode.  If the received LCP Configure-Request message does not contain\n\
    \   an SDL LCP option, an implementation MUST NOT send an unsolicited\n   Configure-Nak\
    \ for the option.\n   (An implementation of SDL that is already in SDL framing\
    \ mode and\n   receives this option in an LCP Configure-Request message MAY, both\n\
    \   for clarity and for convergence reasons, elect to send LCP\n   Configure-Ack.\
    \  It MUST NOT restart LCP nor change framing modes in\n   this case.)\n"
- title: 3.5.  Framing
  contents:
  - "3.5.  Framing\n   The PPP frames are located by row within the SPE payload. \
    \ Because\n   frames are variable in length, the frames are allowed to cross SPE\n\
    \   boundaries.  Bytes marked as \"overhead\" or \"fixed stuff\" in SONET/SDH\n\
    \   documentation for concatenated streams are not used as payload bytes.\n  \
    \ With reference to the Lucent SDL specification [6] when SDL framing\n   for\
    \ PPP is employed, the SDL \"Datagram Offset\" feature is set to the\n   value\
    \ 4.  This corresponds to the fixed overhead value 4 in the\n   description below.\
    \  The \"A\" and \"B\" messages are never used.  These\n   optional features of\
    \ SDL are not described in this document, but are\n   rather described in Lucent's\
    \ SDL specification.\n   Fixing the Datagram Offset value described in the Lucent\n\
    \   documentation to 4 allows a PPP MRU/MTU up to 65536 using SDL.\n   SDL framing\
    \ is in general accomplished by the use of a four octet\n   header on the packet.\
    \  This fixed-length header allows the use of a\n   simple framer to detect synchronization\
    \ as described in section 3.7.\n   For use with PPP, this fixed-length header\
    \ precedes each PPP/HDLC\n   packet as follows:\n    0                   1   \
    \                2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Packet Length         |          Header CRC           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     PPP packet (beginning with address and control fields)    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                             .....                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                            SDL CRC                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The four octet length header is DC balanced by exclusive-OR (also\n   known\
    \ as \"modulo 2 addition\") with the hex value B6AB31E0.  This is\n   the maximum\
    \ transition, minimum sidelobe, Barker-like sequence of\n   length 32.  No other\
    \ scrambling is done on the header itself.\n   Packet Length is an unsigned 16\
    \ bit number in network byte order.\n   Unlike the PPP FCS, the Header CRC is\
    \ a CRC-16 generated with initial\n   value zero and transmitted in network byte\
    \ order.  The PPP packet is\n   scrambled, begins with the address and control\
    \ fields, and may be any\n   integral octet length (i.e., it is not padded unless\
    \ the Self\n   Describing Padding option is used).  The Packet CRC is also\n \
    \  scrambled, and has a mode-dependent length (described below), and is\n   located\
    \ only on an octet boundary; no alignment of this field may be\n   assumed.\n\
    \   When the Packet Length value is 4 or greater, the distance in octets\n   between\
    \ one message header and the next in SDL is the sum of 8 plus\n   the Packet Length\
    \ field.  The value 8 represents a fixed overhead of\n   4 octets plus the fixed\
    \ length of the Packet CRC field.  When the\n   Packet Length is 0, the distance\
    \ to the next header is 4 octets.\n   This is the idle fill header.  When the\
    \ Packet Length is 1 to 3, the\n   distance to the next header is 12 octets. \
    \ These headers are used for\n   special SDL messages used only with optional\
    \ scrambling and\n   management modes.  See section 5 for details of the messages.\n\
    \   General SDL, like PPP, allows the use of no CRC, ITU-T CRC-16, or\n   ITU-T\
    \ CRC-32 for the packet data.  However, because the Packet Length\n   field does\
    \ not include the CRC length, synchronization cannot be\n   maintained if the\
    \ CRC type is changed per RFC 1570 [9], because\n   frame-to-frame distance is,\
    \ as described above, calculated including\n   the CRC length.  Thus, this PPP\
    \ over SDL specification fixes the CRC\n   type to CRC-32 (four octets), and all\
    \ SDL implementations MUST reject\n   any LCP FCS Alternatives Option [9] requested\
    \ by the peer when in SDL\n   mode.\n   PPP over SDL implementations MAY allow\
    \ a configuration option to set\n   different CRC types for use by prior arrangement.\
    \  Any such\n   configurable option MUST default to CRC-32, and MUST NOT include\
    \ LCP\n   negotiation of FCS Alternatives.\n   Setting the SDL Datagram Offset\
    \ value to 4 accounts for the 4 octet\n   SDL header overhead.  With the SDL Datagram\
    \ Offset set to 4, the\n   value placed in the Packet Length field is exactly\
    \ the length in\n   octets of the PPP frame itself, including the address and\
    \ control\n   fields but not including the CRC field (the RFC 1662 PPP FCS field\
    \ is\n   not used with SDL).  Note again that the Datagram Offset is just an\n\
    \   arithmetic value; it does not occupy bits in the message itself.\n   Because\
    \ Packet Lengths below 4 are reserved, the Packet Length MUST\n   be 4 or greater\
    \ for any legal PPP packet.  PPP packets with fewer\n   octets, which are not\
    \ possible without address/control or protocol\n   field compression, MUST be\
    \ padded to length 4 for SDL.\n   Inter-packet time fill is accomplished by sending\
    \ the four octet\n   length header with the Packet Length set to zero.  No provision\
    \ is\n   made for intra-packet time fill.\n   By default, an independent, self-synchronous\
    \ x^43+1 scrambler is used\n   on the data portion of the message including the\
    \ 32 bit CRC.  This is\n   done in exactly the same manner as with the ATM x^43+1\
    \ scrambler on\n   an ATM channel.  The scrambler is not clocked when SDL header\
    \ bits\n   are transmitted.  Thus, the data scrambling MAY be implemented in an\n\
    \   entirely independent manner from the SDL framing, and the data stream\n  \
    \ may be prescrambled before insertion of SDL framing marks.\n   Optionally, by\
    \ prior arrangement, SDL links MAY use a set-reset\n   scrambler as described\
    \ in section 6.  If this option is provided, it\n   MUST be configurable by the\
    \ administrator, and the option MUST\n   default to the self-synchronous scrambler.\n"
- title: 3.6.  Framing Example
  contents:
  - "3.6.  Framing Example\n   To help clarify this structure, the following example\
    \ may be helpful.\n   First we have an LCP Configure-Request message that we wish\
    \ to\n   transmit over SDL:\n       FF 03 C0 21 01 01 00 04\n   Next, we create\
    \ an SDL header for the length of this packet (8\n   octets), a header CRC, and\
    \ an SDL CRC.\n       00 08 81 08 FF 03 C0 21 01 01 00 04 D1 F5 21 5E\n   Finally,\
    \ we DC-balance the header with the barker-like sequence:\n       B6 A3 B0 E8\
    \ FF 03 C0 21 01 01 00 04 D1 F5 21 5E\n   Note that the final length of the message\
    \ is 8 (original message\n   length) plus 4 (fixed datagram offset value) plus\
    \ 4 (fixed CRC\n   length), or 16 octets.\n"
- title: 3.7.  Synchronization Procedure
  contents:
  - "3.7.  Synchronization Procedure\n   The link synchronization procedure is similar\
    \ to the I.432 section\n   4.5.1.1 ATM HEC delineation procedure [10], except\
    \ that the SDL\n   messages are variable length.  The machine starts in HUNT state\
    \ until\n   a four octet sequence in the data stream with a valid CRC-16 is\n\
    \   found.  (Note that the CRC-16 single-bit error correction technique\n   described\
    \ in section 3.10 is not employed until the machine is in in\n   SYNCH state.\
    \  The header must have no bit errors in order to leave\n   HUNT state.)  Such\
    \ a valid sequence is a candidate SDL header.  On\n   finding the valid sequence,\
    \ the machine enters PRESYNCH state.  Any\n   one invalid SDL header in PRESYNCH\
    \ state returns the link to HUNT\n   state.\n   If a second valid SDL header is\
    \ seen after entering PRESYNCH state,\n   then the link enters SYNCH state and\
    \ PPP transmission is enabled.  If\n   an invalid SDL header is detected, then\
    \ the link is returned to HUNT\n   state without enabling PPP transmission.\n\
    \   Once the link enters SYNCH state, the SDL header single bit error\n   correction\
    \ logic is enabled (see section 3.10).  Any unrecoverable\n   header CRC error\
    \ returns the link to HUNT state, disables PPP\n   transmission, and disables\
    \ the error correction logic.\n"
- title: 3.8.  Scrambler Operation
  contents:
  - "3.8.  Scrambler Operation\n   The transmit and receive scramblers are shift registers\
    \ with 43\n   stages that MAY be initialized to all-ones when the link is\n  \
    \ initialized.  Synchronization is maintained by the data itself.\n          \
    \     Transmit                            Receive\n    DATA-STREAM (FROM PPP)\
    \             IN (FROM SDL FRAMER)\n    |                                  |\n\
    \    v                                  |\n    XOR<-------------------------+\
    \     +->D0-+->D1-> ... ->D41->D42-+\n    |                            |     |\
    \                            |\n    +->D0-+->D1-> ... ->D41->D42-+     XOR<-------------------------+\n\
    \    |                                  |\n    v                             \
    \     v\n    OUT (TO SDL FRAMER)                DATA-STREAM (TO PPP)\n   Each\
    \ XOR is an exclusive-or gate; also known as a modulo-2 adder.\n   Each Dn block\
    \ is a D-type flip-flop clocked on the appropriate data\n   clock.\n   The scrambler\
    \ is clocked once after transmission or reception of each\n   bit of payload and\
    \ before the next bit is applied as input.  Bits\n   within an octet are, per\
    \ SONET/SDH practice, transmitted and received\n   MSB-first.\n"
- title: 3.9.  CRC Generation
  contents:
  - "3.9.  CRC Generation\n   The CRC-16 and CRC-32 generator polynomials used by\
    \ SDL are the ITU-T\n   polynomials [11].  These are:\n     x^16+x^12+x^5+1\n\
    \     x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x+1\n   The\
    \ SDL Header CRC and the CRC-16 used for each of the three special\n   messages\
    \ (scrambler state, message A, and message B; see section 5)\n   are all generated\
    \ using an initial remainder value of 0000 hex.\n   The optional CRC-16 on the\
    \ payload data (this mode is not used with\n   PPP over SDL except by prior arrangement)\
    \ uses the initial remainder\n   value of FFFF hex for calculation and the bits\
    \ are complemented\n   before transmission.  The final CRC remainder, however,\
    \ is\n   transmitted in network byte order, unlike the regular PPP FCS.  If\n\
    \   the CRC-16 algorithm is run over all of the octets including the\n   appended\
    \ CRC itself, then the remainder value on intact packets will\n   always be E2F0\
    \ hex.  Alternatively, an implementation may stop CRC\n   calculation before processing\
    \ the appended CRC itself, and do a\n   direct comparison.\n   The CRC-32 on the\
    \ payload data (used for PPP over SDL) uses the\n   initial remainder value of\
    \ FFFFFFFF hex for calculation and the bits\n   are complemented before transmission.\
    \  The CRC, however, is\n   transmitted in network byte order, most significant\
    \ bit first, unlike\n   the optional PPP 32 bit FCS, which is transmitted in reverse\
    \ order.\n   The remainder value on intact packets when the appended CRC value\
    \ is\n   included in the calculation is 38FB2284.\n   C code to generate these\
    \ CRCs is found in section 8.1.\n"
- title: 3.10.  Error Correction
  contents:
  - "3.10.  Error Correction\n   The error correction technique is based on the use\
    \ of a Galois number\n   field, as with the ATM HEC correction.  In a Galois number\
    \ field,\n   f(a+b) = f(a) + f(b).  Since the CRC-16 used for SDL forms such a\n\
    \   field, we can state that CRC(message+error) = CRC(message) +\n   CRC(error).\
    \  Since the CRC-16 remainder of a properly formed message\n   is always zero,\
    \ this means that, for the N distinct \"error\" strings\n   corresponding to a\
    \ single bit error, there are N distinct CRC(error)\n   values, where N is the\
    \ number of bits in the message.\n   A table look-up is thus applied to the CRC-16\
    \ residue after\n   calculation over the four octet SDL header to correct bit\
    \ errors in\n   the header and to detect multiple bit errors.  For the optional\
    \ set-\n   reset scrambler, a table look-up is similarly applied to the CRC-16\n\
    \   residue after calculation over the eight octet scrambler state\n   message\
    \ to correct bit errors and to detect multiple bit errors.\n   (This second correction\
    \ is also used for the special SDL A and B\n   messages, which are not used for\
    \ PPP over SDL.)\n   Note:  No error correction is performed for the payload.\n\
    \   Note:  This error correction technique is used only when the link has\n  \
    \ entered SYNCH state.  While in HUNT or PRESYNCH state, error\n   correction\
    \ should not be performed, and only messages with syndrome\n   0000 are accepted.\
    \  If the calculated syndrome does not appear in\n   this table, then an unrecoverable\
    \ error has occurred.  Any such error\n   in the SDL header will return the link\
    \ to HUNT state.\n   Since the CRC calculation is started with zero, the two tables\
    \ can be\n   merged.  The four octet table is merely the last 32 entries of the\n\
    \   eight octet table.\n   Eight octet (64 bit) single bit error syndrome table\
    \ (in\n   hexadecimal):\n     FD81 F6D0 7B68 3DB4 1EDA 0F6D 8FA6 47D3\n     ABF9\
    \ DDEC 6EF6 377B 93AD C1C6 60E3 B861\n     D420 6A10 3508 1A84 0D42 06A1 8B40\
    \ 45A0\n     22D0 1168 08B4 045A 022D 8906 4483 AA51\n     DD38 6E9C 374E 1BA7\
    \ 85C3 CAF1 ED68 76B4\n     3B5A 1DAD 86C6 4363 A9A1 DCC0 6E60 3730\n     1B98\
    \ 0DCC 06E6 0373 89A9 CCC4 6662 3331\n     9188 48C4 2462 1231 8108 4084 2042\
    \ 1021\n   Thus, if the syndrome 6EF6 is seen on an eight octet message, then\n\
    \   the third bit (hex 20) of the second octet is in error.  Similarly,\n   if\
    \ 48C4 is seen on an eight octet message, then the second bit (hex\n   40) in\
    \ the eighth octet is in error.  For a four octet message, the\n   same two syndromes\
    \ would indicate a multiple bit error for 6EF6, and\n   a single bit error in\
    \ the second bit of the fourth octet for 48C4.\n   Note that eight octet messages\
    \ are used only for the optional set-\n   reset scrambling mode, described in\
    \ section 6.\n   Corresponding C code to generate this table is found in section\
    \ 8.2.\n"
- title: 4.  Performance Analysis
  contents:
  - "4.  Performance Analysis\n   There are five general statistics that are important\
    \ for framing\n   algorithms.  These are:\n     MTTF   Mean time to frame\n  \
    \   MTTS   Mean time to synchronization\n     PFF    Probability of false frame\n\
    \     PFS    Probability of false synchronization\n     PLF    Probability of\
    \ loss of frame\n   The following sections summarize each of these statistics\
    \ for SDL.\n   Details and mathematic development can be found in the Lucent SDL\n\
    \   documentation [6].\n"
- title: 4.1.  Mean Time To Frame (MTTF)
  contents:
  - "4.1.  Mean Time To Frame (MTTF)\n   This metric measures the amount of time required\
    \ to establish correct\n   framing in the input data.  This may be measured in\
    \ any convenient\n   units, such as seconds or bytes.  For SDL, the relevant measurement\n\
    \   is in packets, since fragments of packets are not useful.\n   In order to\
    \ calculate MTTF, we must first determine how often the\n   frame detection state\
    \ machine is \"unavailable\" because it failed to\n   detect the next incoming\
    \ SDL frame in the data stream.\n   Since the probability of a false header detection\
    \ using CRC-16 in\n   random data is 2^-16 and this rate is large compared to\
    \ the allowable\n   packet size, it is worthwhile to run multiple parallel frame-\n\
    \   detection state machines.  Each machine starts with a different\n   candidate\
    \ framing point in order to reduce the probability of falsely\n   detecting user\
    \ data as a valid frame header.\n   The results for this calculation, given maximal\
    \ 64KB packets and\n   slightly larger than Internet average 354 byte packets,\
    \ are:\n     Number of  Unavailability  Unavailability\n      Framers    64KB\
    \ packets   354 byte pkts\n         1         3.679E-1        5.373E-3\n     \
    \    2         3.083E-2        1.710E-6\n         3         2.965E-3        9.712E-10\n\
    \         4         2.532E-4        4.653E-13\n   Using these values, MTTF can\
    \ be calculated as a function of the Bit\n   Error Rate (BER).  These plots show\
    \ a characteristically flat region\n   for all BERs up to a knee, beyond which\
    \ the begins to rise sharply.\n   In all cases, this knee point has been found\
    \ to occur at a BER of\n   approximately 1E-4, which is several orders of magnitude\
    \ above that\n   observed on existing SONET/SDH links.  The flat rate values are\n\
    \   summarized as:\n     Number of  Flat region   Flat region\n      Framers \
    \  64KB packets   354 bytes\n         1         3.58          1.52\n         2\
    \         1.595         1.5\n         3         1.52          1.5\n         4\
    \         1.5           1.5\n   Thus, for common packet sizes in an implementation\
    \ with two parallel\n   framers using links with a BER of 1E-4 or better, the\
    \ MTTF is\n   approximately 1.5 packets.  This is also the optimal time, since\
    \ it\n   represents initiating framing at an average point half-way into one\n\
    \   packet, and achieving good framing after seeing exactly one correctly\n  \
    \ framed packet.\n"
- title: 4.2.  Mean Time To Synchronization (MTTS)
  contents:
  - "4.2.  Mean Time To Synchronization (MTTS)\n   The MTTS for SDL with a self-synchronous\
    \ scrambler is the same as the\n   MTTF, or 1.5 packets.\n   The MTTS for SDL\
    \ using the optional set-reset scrambler is one half\n   of the scrambling state\
    \ transmission interval (in packets) plus the\n   MTTF.  For insertion at the\
    \ default rate of one per eight packets,\n   the MTTS is 5.5 packets.\n   (The\
    \ probability of receiving a bad scrambling state transmission\n   should also\
    \ be included in this calculation.  The probability of\n   random corruption of\
    \ this short message is shown in the SDL document\n   [6] to be small enough that\
    \ it can be neglected for this\n   calculation.)\n"
- title: 4.3.  Probability of False Frame (PFF)
  contents:
  - "4.3.  Probability of False Frame (PFF)\n   The PFF is 2.328E-10 (2^-32), since\
    \ false framing requires two\n   consecutive headers with falsely correct CRC-16.\n"
- title: 4.4.  Probability of False Synchronization (PFS)
  contents:
  - "4.4.  Probability of False Synchronization (PFS)\n   The PFS for SDL with the\
    \ self-synchronous scrambler is the same as\n   the PFF, or 2.328E-10 (2^-32).\n\
    \   The PFS for SDL with the set-reset scrambler is 5.421E-20 (2^-64),\n   and\
    \ is calculated as the PFF above multiplied by the probability of a\n   falsely\
    \ detected scrambler state message, which itself contains two\n   independent\
    \ CRC-16 calculations.\n"
- title: 4.5.  Probability of Loss of Frame (PLF)
  contents:
  - "4.5.  Probability of Loss of Frame (PLF)\n   The PLF is a function of the BER,\
    \ and for SDL is approximately the\n   square of the BER multiplied by 500, which\
    \ is the probability of two\n   or more bit errors occurring within the 32 bit\
    \ SDL header.  Thus, at\n   a BER of 1E-5, the PLF is 5E-8.\n"
- title: 5.  The Special Messages
  contents:
  - "5.  The Special Messages\n   When the SDL Packet Length field has any value between\
    \ 0000 and 0003,\n   the message following the header has a special, pre-defined\
    \ length.\n   The 0 value is a time-fill on an idle link, and no other data\n\
    \   follows.  The next octet on the link is the first octet of the next\n   SDL\
    \ header.\n   The values 1 through 3 are defined in the following subsections.\n\
    \   These special messages each consist of a six octet data portion\n   followed\
    \ by another CRC-16 over that data portion, as with the SDL\n   header, and this\
    \ CRC is used for single bit error correction.\n"
- title: 5.1.  Scrambler State
  contents:
  - "5.1.  Scrambler State\n   The special value of 1 for Packet Length is reserved\
    \ to transfer the\n   scrambler state from the transmitter to the receiver for\
    \ the optional\n   set-reset scrambler.  In this case, the SDL header is followed\
    \ by six\n   octets (48 bits) of scrambler state.  Neither the scrambler state\
    \ nor\n   the CRC are scrambled.\n"
- title: 5.2.  A/B Message
  contents:
  - "5.2.  A/B Message\n   The special values of 2 and 3 for Packet Length are reserved\
    \ for \"A\"\n   and \"B\" messages, which are also six octets in length followed\
    \ by two\n   octets of CRC-16.  Each of these eight octets are scrambled.  No\
    \ use\n   for these messages with PPP SDL is defined.  These messages are\n  \
    \ reserved for use by link maintenance protocols, in a manner analogous\n   to\
    \ ATM's OAM cells.\n"
- title: 6.  The Set-Reset Scrambler Option
  contents:
  - "6.  The Set-Reset Scrambler Option\n   PPP over SDL uses a self-synchronous scrambler.\
    \  SDL implementations\n   MAY also employ a set-reset scrambler to avoid some\
    \ of the possible\n   inherent problems with self-synchronous scramblers.\n"
- title: 6.1.  The Killer Packet Problem
  contents:
  - "6.1.  The Killer Packet Problem\n   Scrambling in general solves two problems.\
    \  First, SONET and SDH\n   interfaces require a minimum density of bit transitions\
    \ in order to\n   maintain hardware clock recovery.  Since data streams frequently\n\
    \   contain long runs of all zeros or all ones, scrambling the bits using\n  \
    \ a pseudo-random number sequence breaks up these patters.  Second, all\n   link-layer\
    \ synchronization mechanisms rely on detecting long-range\n   patterns in the\
    \ received data to detect framing.\n   Self-synchronous scramblers are an easy\
    \ way to partially avoid these\n   problems.  One problem that is inherent with\
    \ self-synchronous,\n   however, is that long user packets from malicious sites\
    \ can make use\n   of the known properties of these scramblers to inject either\
    \ long\n   strings of zeros or other synchronization-destroying patterns into\n\
    \   the link.  For public networks, where the data presented to the\n   network\
    \ is usually multiplexed (interleaved) with multiple unrelated\n   streams, the\
    \ clocking problem does not pose a significant threat to\n   the public network.\
    \  It does, however, pose a threat to the PPP-\n   speaking device, and it poses\
    \ a threat to long lines that are\n   unchannelized.\n   Such carefully constructed\
    \ packets are called \"killer packets\".\n"
- title: 6.2.  SDL Set-Reset Scrambler
  contents:
  - "6.2.  SDL Set-Reset Scrambler\n   An alternative to the self-synchronous scrambler\
    \ is the externally\n   synchronized or \"set-reset\" scrambler.  This is a free-running\n\
    \   scrambler that is not affected by the patterns in the user data, and\n   therefore\
    \ minimizes the possibility that a malicious user could\n   present data to the\
    \ network that mimics an undesirable data pattern.\n   The option set-reset scrambler\
    \ defined for SDL is an\n   x^48+x^28+x^27+x+1 independent scrambler initialized\
    \ to all ones when\n   the link enters PRESYNCH state and reinitialized if the\
    \ value ever\n   becomes all zero bits.  As with the self-synchronous scrambler,\
    \ all\n   octets in the PPP packet data following the SDL header through the\n\
    \   final packet CRC are scrambled.\n   This mode MAY be detected automatically.\
    \  If a scrambler state\n   message is received (as described in the following\
    \ section), an SDL\n   implementation that includes the set-reset scrambler option\
    \ may\n   switch from self-synchronous into set-reset mode automatically.  An\n\
    \   SDL implementation that does not include the set-reset scrambler MUST\n  \
    \ NOT send scrambler state messages.\n"
- title: 6.3.  SDL Scrambler Synchronization
  contents:
  - "6.3.  SDL Scrambler Synchronization\n   As described in the previous section,\
    \ the special value of 1 for\n   Packet Length is reserved to transfer the scrambler\
    \ state from the\n   transmitter to the receiver.  In this case, the SDL header\
    \ is\n   followed by six octets (48 bits) of scrambler state plus two octets\n\
    \   of CRC-16 over the scrambler state.  None of these eight octets are\n   scrambled.\n\
    \   SDL synchronization consists of two components, link and scrambler\n   synchronization.\
    \  Both must be completed before PPP data flows on the\n   link.\n   If a valid\
    \ SDL header is seen in PRESYNCH state, then the link enters\n   SYNCH state,\
    \ and the scrambler synchronization sequence is started.\n   If an invalid SDL\
    \ header is detected, then the link is returned to\n   HUNT state, and PPP transmission\
    \ is suspended.\n   When scrambler synchronization is started, a scrambler state\
    \ message\n   is sent (Packet Length set to 1 and six octets of scrambler state\
    \ in\n   network byte order follow the SDL header).  When a scrambler\n   synchronization\
    \ message is received from the peer, PPP transmission\n   is enabled.\n   Scrambler\
    \ state messages are periodically transmitted to keep the\n   peers in synchronization.\
    \  A period of once per eight transmitted\n   packets is suggested, and it SHOULD\
    \ be configurable.  Excessive\n   packet CRC errors detected indicates an extended\
    \ loss of\n   synchronization and should trigger link resynchronization.\n   On\
    \ reception of a scrambler state message, an SDL implementation MUST\n   compare\
    \ the received 48 bits of state with the receiver's scrambler\n   state.  If any\
    \ of these bits differ, then a synchronization slip\n   error is declared.  After\
    \ such an error, the next valid scrambler\n   state message received MUST be loaded\
    \ into the receiver's scrambler,\n   and the error condition is then cleared.\n"
- title: 6.4.  SDL Scrambler Operation
  contents:
  - "6.4.  SDL Scrambler Operation\n   The transmit and receive scramblers are shift\
    \ registers with 48\n   stages that are initialized to all-ones when the link\
    \ is initialized.\n   Each is refilled with all one bits if the value in the shift\
    \ register\n   ever becomes all zeros.  This scrambler is not reset at the beginning\n\
    \   of each frame, as is the SONET/SDH X^7+X^6+1 scrambler, nor is it\n   modified\
    \ by the transmitted data, as is the ATM self-synchronous\n   scrambler.  Instead\
    \ it is kept in synchronization using special SDL\n   messages.\n   +----XOR<--------------XOR<---XOR<----------------+\n\
    \   |     ^                 ^      ^                  |\n   |     |          \
    \       |      |                  |\n   +->D0-+->D1-> ... ->D26-+->D27-+->D28->\
    \ ... ->D47-+\n   |\n   v\n   OUT\n   Each XOR is an exclusive-or gate; also known\
    \ as a modulo-2 adder.\n   Each Dn block is a D-type flip-flop clocked on the\
    \ appropriate data\n   clock.\n   The scrambler is clocked once after transmission\
    \ of each bit of SDL\n   data, whether or not the transmitted bit is scrambled.\
    \  When\n   scrambling is enabled for a given octet, the OUT bit is exclusive-\n\
    \   ored with the raw data bit to produce the transmitted bit.  Bits\n   within\
    \ an octet are transmitted MSB-first.\n   Reception of scrambled data is identical\
    \ to transmission.  Each\n   received bit is exclusive-ored with the output of\
    \ the separate\n   receive data scrambler.\n   To generate a scrambler state message,\
    \ the contents of D47 through D0\n   are snapshot at the point where the first\
    \ scrambler state bit is\n   sent.  D47 is transmitted as the first bit of the\
    \ output.  The first\n   octet transmitted contains D47 through D40, the second\
    \ octet D39\n   through D32, and the sixth octet D7 through D0.\n   The receiver\
    \ of a scrambler state message MUST first run the CRC-16\n   check and correct\
    \ algorithm over this message.  If the CRC-16 message\n   check detects multiple\
    \ bit errors, then the message is dropped and is\n   not processed further.\n\
    \   Otherwise, it then should compare the contents of the entire receive\n   scrambler\
    \ state D47:D0 with the corrected message.  (By pipelining\n   the receiver with\
    \ multiple clock stages between SDL Header error-\n   correction block and the\
    \ descrambling block, the receive descrambler\n   will be on the correct clock\
    \ boundary when the message arrives at the\n   descrambler.  This means that the\
    \ decoded scrambler state can be\n   treated as immediately available at the beginning\
    \ of the D47 clock\n   cycle into the receive scrambler.)\n   If any of the received\
    \ scrambler state bits is different from the\n   corresponding shift register\
    \ bit, then a soft error flag is set.  If\n   the flag was already set when this\
    \ occurs, then a synchronization\n   slip error is declared.  This error SHOULD\
    \ be counted and reported\n   through implementation-defined network management\
    \ procedures.  When\n   the receiver has this soft error flag set, any scrambler\
    \ state\n   message that passes the CRC-16 message check without multiple bit\n\
    \   errors is clocked directly into the receiver's state register after\n   the\
    \ comparison is done, and the soft error flag is then cleared.\n   Otherwise,\
    \ while uncorrectable scrambler state messages are received,\n   the soft error\
    \ flag state is maintained.\n   (The intent of this mechanism is to reduce the\
    \ likelihood that a\n   falsely corrected scrambler state message with multiple\
    \ bit errors\n   can corrupt the running scrambler state.)\n"
- title: 7.  Configuration Details
  contents:
  - '7.  Configuration Details

    '
- title: 7.1.  Default LCP Configuration
  contents:
  - "7.1.  Default LCP Configuration\n   The LCP synchronous configuration defaults\
    \ apply to SONET/SDH links.\n   The following Configuration Options are recommended:\n\
    \      Magic Number\n      No Address and Control Field Compression\n      No\
    \ Protocol Field Compression\n      No FCS alternatives (32-bit FCS default)\n\
    \   This configuration means that PPP over SDL generally presents a 32-\n   bit\
    \ aligned datagram to the network layer.  With the address,\n   control, and protocol\
    \ field intact, the PPP overhead on each packet\n   is four octets.  If the SDL\
    \ framer presents the SDL packet header to\n   the PPP input handling in order\
    \ to communicate the packet length (the\n   Lucent implementation does not do\
    \ this, but other hardware\n   implementations may), this header is also four\
    \ octets, and alignment\n   is preserved.\n"
- title: 7.2.  Modification of the Standard Frame Format
  contents:
  - "7.2.  Modification of the Standard Frame Format\n   Since SDL does take the place\
    \ of HDLC as a transport for PPP, it is\n   at least tempting to remove the HDLC-derived\
    \ overhead.  This is not\n   done for PPP over SDL in order to preserve the message\
    \ alignment and\n   to allow for the future possibility interworking with other\
    \ services\n   (e.g., Frame Relay).\n   By prior external arrangement or via LCP\
    \ negotiation, any two SDL\n   implementations MAY agree to omit the address and\
    \ control fields or\n   implement protocol field compression on a link.  Such\
    \ use is not\n   described by this document and MUST NOT be the default on any\
    \ SDL\n   implementation.\n"
- title: 8.  Implementation Details
  contents:
  - '8.  Implementation Details

    '
- title: 8.1.  CRC Generation
  contents:
  - "8.1.  CRC Generation\n   The following unoptimized code generates proper CRC-16\
    \ and CRC-32\n   values for SDL messages.  Note that the polynomial bits are numbered\n\
    \   in big-endian order for SDL CRCs; bit 0 is the MSB.\n     typedef unsigned\
    \ char u8;\n     typedef unsigned short u16;\n     typedef unsigned long u32;\n\
    \     #define POLY16  0x1021\n     #define POLY32  0x04C11DB7\n     u16\n    \
    \ crc16(u16 crcval, u8 cval)\n     {\n         int i;\n         crcval ^= cval\
    \ << 8;\n         for (i = 8; i--; )\n             crcval = crcval & 0x8000 ?\
    \ (crcval << 1) ^ POLY16 :\n                 crcval << 1;\n         return crcval;\n\
    \     }\n     u32\n     crc32(u32 crcval, u8 cval)\n     {\n         int i;\n\
    \         crcval ^= cval << 24;\n         for (i = 8; i--; )\n             crcval\
    \ = crcval & 0x80000000 ? (crcval << 1) ^ POLY32 :\n                 crcval <<\
    \ 1;\n         return crcval;\n     }\n     u16\n     crc16_special(u8 *buffer,\
    \ int len)\n     {\n         u16 crc;\n         crc = 0;\n         while (--len\
    \ >= 0)\n             crc = crc16(crc,*buffer++);\n         return crc;\n    \
    \ }\n     u16\n     crc16_payload(u8 *buffer, int len)\n     {\n         u16 crc;\n\
    \         crc = 0xFFFF;\n         while (--len >= 0)\n             crc = crc16(crc,*buffer++);\n\
    \         return crc ^ 0xFFFF;\n     }\n     u32\n     crc32_payload(u8 *buffer,\
    \ int len)\n     {\n         u32 crc;\n         crc = 0xFFFFFFFFul;\n        \
    \ while (--len >= 0)\n             crc = crc32(crc,*buffer++);\n         return\
    \ crc ^ 0xFFFFFFFFul;\n     }\n     void\n     make_sdl_header(int packet_length,\
    \ u8 *buffer)\n     {\n         u16 crc;\n         buffer[0] = (packet_length\
    \ >> 8) & 0xFF;\n         buffer[1] = packet_length & 0xFF;\n         crc = crc16_special(buffer,2);\n\
    \         buffer[0] ^= 0xB6;\n         buffer[1] ^= 0xAB;\n         buffer[2]\
    \ = ((crc >> 8) & 0xFF) ^ 0x31;\n         buffer[3] = (crc & 0xFF) ^ 0xE0;\n \
    \    }\n"
- title: 8.2.  Error Correction Tables
  contents:
  - "8.2.  Error Correction Tables\n   To generate the error correction table, the\
    \ following implementation\n   may be used.  It creates a table called sdl_error_position,\
    \ which is\n   indexed on CRC residue value.  The tables can be used to determine\
    \ if\n   no error exists (table entry is equal to FE hex), one correctable\n \
    \  error exists (table entry is zero-based index to errored bit with MSB\n   of\
    \ first octet being 0), or more than one error exists, and error is\n   uncorrectable\
    \ (table entry is FF hex).  To use for eight octet\n   messages, the bit index\
    \ from this table is used directly.  To use for\n   four octet messages, the index\
    \ is treated as an unrecoverable error\n   if it is below 32, and as bit index\
    \ plus 32 if it is above 32.\n   The program also prints out the error syndrome\
    \ table shown in section\n   3.10.  This may be used as part of a \"switch\" statement\
    \ in a hardware\n   implementation.\n       u8 sdl_error_position[65536];\n  \
    \     /* Calculate new CRC from old^(byte<<8) */\n       u16\n       crc16_t8(u16\
    \ crcval)\n       {\n           u16 f1,f2,f3;\n           f1 = (crcval>>8) | (crcval<<8);\n\
    \           f2 = (crcval>>12) | (crcval&0xF000) | ((crcval>>7)&0x01E0);\n    \
    \       f3 = ((crcval>>3) & 0x1FE0) ^ ((crcval<<4) & 0xF000);\n           return\
    \ f1^f2^f3;\n       }\n       void\n       generate_error_table(u8 *bptab, int\
    \ nbytes)\n       {\n           u16 crc;\n           int i, j, k;\n          \
    \ /* Marker for no error */\n           bptab[0] = 0xFE;\n           /* Marker\
    \ for >1 error */\n           for (i = 1; i < 65536; i++ )\n               bptab[i]\
    \ = 0xFF;\n           /* Mark all single bit error cases. */\n           printf(\"\
    Error syndrome table:\\n\");\n           for (i = 0; i < nbytes; i++) {\n    \
    \           putchar(' ');\n               for (j = 0; j < 8; j++) {\n        \
    \           crc = 0;\n                   for (k = 0; k < i; k++)\n           \
    \              crc = crc16_t8(crc);\n                   crc = crc16_t8(crc ^ (0x8000>>j));\n\
    \                   for (k++; k < nbytes; k++)\n                         crc =\
    \ crc16_t8(crc);\n                   bptab[crc] = (i * 8) + j;\n             \
    \      printf(\" %04X\",crc);\n               }\n               putchar('\\n');\n\
    \           }\n       }\n       int\n       main(int argc, char **argv)\n    \
    \   {\n           u8 buffer[8] = {\n               0x01,0x55,0x02,0xaa,\n    \
    \           0x99,0x72,0x18,0x56\n           };\n           u16 crc;\n        \
    \   int i;\n           generate_error_table(sdl_error_position,8);\n         \
    \  /* Run sample message through check routine. */\n           crc = 0;\n    \
    \       for (i = 0; i < 8; i++)\n               crc = crc16_t8(crc ^ (buffer[i]<<8));\n\
    \           /* Output is 0000 64 -- no error encountered. */\n           printf(\"\
    \\nError test:  CRC %04X, bit position %d\\n\",\n             crc,sdl_error_position[crc]);\n\
    \       }\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   The reliability of public SONET/SDH networks\
    \ depends on well-behaved\n   traffic that does not disrupt the synchronous data\
    \ recovery\n   mechanisms.  This document describes framing and scrambling options\n\
    \   that are used to ensure the distribution of transmitted data such\n   that\
    \ SONET/SDH design assumptions are not likely to be violated.\n"
- title: 10.  References
  contents:
  - "10.  References\n   [1]   Simpson, W., Editor, \"The Point-to-Point Protocol\
    \ (PPP)\", STD\n         51, RFC 1661, July 1994.\n   [2]   Simpson, W., Editor,\
    \ \"PPP in HDLC-like Framing\", STD 51, RFC\n         1662, July 1994.\n   [3]\
    \   Malis, A. and W. Simpson, \"PPP over SONET/SDH\", RFC 2615, June\n       \
    \  1999.\n   [4]   \"American National Standard for Telecommunications -\n   \
    \      Synchronous Optical Network (SONET) Payload Mappings,\" ANSI\n        \
    \ T1.105.02-1995.\n   [5]   ITU-T Recommendation G.707, \"Network Node Interface\
    \ for the\n         Synchronous Digital Hierarchy (SDH),\" March 1996.\n   [6]\
    \   Doshi, B., Dravida, S., Hernandez-Valencia, E., Matragi, W.,\n         Qureshi,\
    \ M.,  Anderson, J., Manchester, J.,\"A Simple Data Link\n         Protocol for\
    \ High Speed Packet Networks\", Bell Labs Technical\n         Journal, pp. 85-104,\
    \ Vol.4 No.1, January-March 1999.\n   [7]   Demers, A., S. Keshav, and S. Shenker,\
    \ \"Analysis and simulation\n         of a fair queueing algorithm,\" ACM SIGCOMM\
    \ volume 19 number 4,\n         pp. 1-12, September 1989.\n   [8]   Floyd, S.\
    \ and V. Jacobson, \"Random Early Detection Gateways for\n         Congestion\
    \ Avoidance,\" IEEE/ACM Transactions on Networking,\n         August 1993.\n \
    \  [9]   Simpson, W., Editor, \"PPP LCP Extensions\", RFC 1570, January\n    \
    \     1994.\n   [10]  ITU-T Recommendation I.432.1, \"B-ISDN User-Network Interface\
    \ -\n         Physical Layer Specification: General Characteristics,\"\n     \
    \    February 1999.\n   [11]  ITU-T Recommendation V.41, \"Code-independent error-control\n\
    \         system,\" November 1989.\n   [12]  ITU-T Recommendation G.783, \"Characteristics\
    \ of synchronous\n         digital hierarchy (SDH) equipment functional blocks,\"\
    \ April\n         1997.\n"
- title: 11.  Acknowledgments
  contents:
  - "11.  Acknowledgments\n   PPP over SONET was first proposed by Craig Partridge\
    \ (BBN) and is\n   documented by Andrew Malis and William Simpson as RFC 2615.\n\
    \   Much of the material in this document was supplied by Lucent.\n   Other length-prefixed\
    \ forms of framing for PPP have gone before SDL,\n   such as William Simpson's\
    \ \"PPP in Ether-like Framing\" expired draft.\n"
- title: 12.  Working Group and Chair Address
  contents:
  - "12.  Working Group and Chair Address\n   The working group can be contacted via\
    \ the mailing list (ietf-\n   ppp@merit.edu; send mail to ietf-ppp-request@merit.edu\
    \ to subscribe),\n   or via the current chair:\n   Karl Fox\n   Extant, Inc.\n\
    \   3496 Snouffer Road, Suite 100\n   Columbus, Ohio 43235\n   EMail:  karl@extant.net\n"
- title: 13.  Intellectual Property Notices
  contents:
  - "13.  Intellectual Property Notices\n   The IETF takes no position regarding the\
    \ validity or scope of any\n   intellectual property or other rights that might\
    \ be claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; neither does it represent that it\n   has\
    \ made any effort to identify any such rights.  Information on the\n   IETF's\
    \ procedures with respect to rights in standards-track and\n   standards-related\
    \ documentation can be found in BCP-11.  Copies of\n   claims of rights made available\
    \ for publication and any assurances of\n   licenses to be made available, or\
    \ the result of an attempt made to\n   obtain a general license or permission\
    \ for the use of such\n   proprietary rights by implementors or users of this\
    \ specification can\n   be obtained from the IETF Secretariat.\n   The IETF invites\
    \ any interested party to bring to its attention any\n   copyrights, patents or\
    \ patent applications, or other proprietary\n   rights which may cover technology\
    \ that may be required to practice\n   this standard.  Please address the information\
    \ to the IETF Executive\n   Director.\n"
- title: 14.  Authors' Addresses
  contents:
  - "14.  Authors' Addresses\n   James Carlson\n   Sun Microsystems, Inc.\n   1 Network\
    \ Drive MS UBUR02-212\n   Burlington MA  01803-2757\n   Phone:  +1 781 442 2084\n\
    \   Fax:    +1 781 442 1677\n   EMail:  james.d.carlson@sun.com\n   Paul Langner\n\
    \   Lucent Technologies Microelectronics Group\n   555 Union Boulevard\n   Allentown\
    \ PA  18103-1286\n   EMail:  plangner@lucent.com\n   Enrique J. Hernandez-Valencia\n\
    \   Lucent Technologies\n   101 Crawford Corners Rd.\n   Holmdel NJ  07733-3030\n\
    \   EMail:  enrique@lucent.com\n   James Manchester\n   Lucent Technologies\n\
    \   101 Crawford Corners Rd.\n   Holmdel NJ  07733-3030\n   EMail:  sterling@hotair.hobl.lucent.com\n"
- title: 15.  Full Copyright Statement
  contents:
  - "15.  Full Copyright Statement\n   Copyright (C) The Internet Society (2000).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
