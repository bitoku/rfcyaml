- contents:
  - '       Key Relay Mapping for the Extensible Provisioning Protocol

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document describes an Extensible Provisioning Protocol (EPP)\n
    \  mapping for a key relay object that relays DNSSEC key material\n   between
    EPP clients using the poll queue defined in RFC 5730.\n   This key relay mapping
    will help facilitate changing the DNS operator\n   of a domain while keeping the
    DNSSEC chain of trust intact.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8063.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   2\n     1.1.  Conventions Used in This Document . . . . . . . . .
    . . .   3\n     1.2.  Secure Transfer of DNSSEC Key Material  . . . . . . . .
    .   3\n   2.  Object Attributes . . . . . . . . . . . . . . . . . . . . . .   4\n
    \    2.1.  DNSSEC Key Material . . . . . . . . . . . . . . . . . . .   4\n       2.1.1.
    \ <keyRelayData> Element  . . . . . . . . . . . . . . .   4\n   3.  EPP Command
    Mapping . . . . . . . . . . . . . . . . . . . . .   5\n     3.1.  EPP Query Commands
    \ . . . . . . . . . . . . . . . . . . .   5\n       3.1.1.  EPP <check> Command
    . . . . . . . . . . . . . . . . .   5\n       3.1.2.  EPP <info> Command  . .
    . . . . . . . . . . . . . . .   5\n       3.1.3.  EPP <transfer> Command  . .
    . . . . . . . . . . . . .   8\n     3.2.  EPP Transform Commands  . . . . . .
    . . . . . . . . . . .   8\n       3.2.1.  EPP <create> Command  . . . . . . .
    . . . . . . . . .   8\n       3.2.2.  EPP <delete> Command  . . . . . . . . .
    . . . . . . .  10\n       3.2.3.  EPP <renew> Command . . . . . . . . . . . .
    . . . . .  11\n       3.2.4.  EPP <transfer> Command  . . . . . . . . . . . .
    . . .  11\n       3.2.5.  EPP <update> Command  . . . . . . . . . . . . . . .
    .  11\n   4.  Formal Syntax . . . . . . . . . . . . . . . . . . . . . . . .  11\n
    \  5.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  13\n     5.1.
    \ XML Namespace . . . . . . . . . . . . . . . . . . . . . .  13\n     5.2.  XML
    Schema  . . . . . . . . . . . . . . . . . . . . . . .  13\n     5.3.  EPP Extension
    Registry  . . . . . . . . . . . . . . . . .  13\n   6.  Security Considerations
    . . . . . . . . . . . . . . . . . . .  14\n   7.  References  . . . . . . . .
    . . . . . . . . . . . . . . . . .  15\n     7.1.  Normative References  . . .
    . . . . . . . . . . . . . . .  15\n     7.2.  Informative References  . . . .
    . . . . . . . . . . . . .  15\n   Acknowledgements  . . . . . . . . . . . . .
    . . . . . . . . . . .  16\n   Authors' Addresses  . . . . . . . . . . . . . .
    . . . . . . . . .  16\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   There are certain transactions initiated by a DNS operator
    that\n   require an authenticated exchange of information between DNS\n   operators.
    \ Often, there is no direct channel between these parties\n   or it is non-scalable
    and insecure.\n   One such transaction is the exchange of DNSSEC key material
    when\n   changing the DNS operator for DNSSEC-signed zones.  We suggest that\n
    \  DNS operators use the administrative EPP channel to bootstrap the\n   delegation
    by relaying DNSSEC key material for the zone.\n   In this document, we define
    an EPP extension to send DNSSEC key\n   material between EPP clients.  This allows
    DNS operators to\n   automatically, reliably, and securely bootstrap the transfer
    of a\n   domain name while keeping the DNSSEC chain of trust intact.\n"
  - contents:
    - "1.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST
      NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\",
      \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted
      as described in BCP 14, RFC 2119\n   [RFC2119].\n   XML is case sensitive.  Unless
      stated otherwise, the XML\n   specifications and examples provided in this document
      MUST be\n   interpreted in the character case presented in order to develop
      a\n   conforming implementation.\n   In the examples, \"C:\" represents lines
      sent by a protocol client and\n   \"S:\" represents lines returned by a protocol
      server.  Indentation and\n   white space in the examples are provided only to
      illustrate element\n   relationships and are not mandatory features of this
      protocol.\n"
    title: 1.1.  Conventions Used in This Document
  - contents:
    - "1.2.  Secure Transfer of DNSSEC Key Material\n   Exchanging DNSSEC key material
      in preparation of a domain name\n   transfer is one of the phases in the life
      cycle of a domain name\n   [DNSOP].\n   DNS operators need to exchange DNSSEC
      key material before the\n   registration data can be changed to keep the DNSSEC
      chain of trust\n   intact.  This exchange is normally initiated through the
      gaining\n   registrar.\n   The gaining and losing DNS operators could talk directly
      to each\n   other (see Figure 1) to exchange the DNSKEY, but often there is
      no\n   trusted path between the two.  As both can securely interact with the\n
      \  registry over the administrative channel through the registrar, the\n   registry
      can act as a relay for the key material exchange.\n   The registry is merely
      used as a relay channel.  Therefore, it is up\n   to the losing DNS operator
      to complete the intended transaction.  The\n   registry SHOULD have certain
      policies in place that require the\n   losing DNS operator to cooperate with
      this transaction; however, this\n   is beyond the scope of this document.  This
      document focuses on the\n   EPP protocol syntax.\n           +--------------------+
      \ DNSKEY   +---------------------+\n           |gaining DNS operator| ~~~~~~~~>
      | losing DNS operator |\n           +--------------------+           +---------------------+\n
      \                         |                   ^\n                          |
      \                  |\n                          V                   |\n           +--------------------+
      \        +---------------------+\n           |  gaining registrar |         |
      registrar of record |\n           +--------------------+         +---------------------+\n
      \                         |                   ^\n            EPP key relay |
      \                  | EPP poll\n                          V                   |\n
      \                    +-----------------------------+\n                     |
      \          registry          |\n                     +-----------------------------+\n
      \                Figure 1: Transfer of DNSSEC Key Material\n   There is no distinction
      in the EPP protocol between Registrars and\n   DNS operators, and there is only
      mention of an EPP client and EPP\n   server.  Therefore, the term \"EPP client\"
      will be used for the\n   interaction with the EPP server for relaying DNSSEC
      key material.\n"
    title: 1.2.  Secure Transfer of DNSSEC Key Material
  title: 1.  Introduction
- contents:
  - '2.  Object Attributes

    '
  - contents:
    - "2.1.  DNSSEC Key Material\n   The DNSSEC key material is represented in EPP
      by a <keyRelayData>\n   element.\n"
    - contents:
      - "2.1.1.  <keyRelayData> Element\n   The <keyRelayData> contains the following
        elements:\n   o  One REQUIRED <keyData> element that contains the DNSSEC key\n
        \     material as described in [RFC5910], Section 4.\n   o  An OPTIONAL <expiry>
        element that describes the expected lifetime\n      of the relayed key(s)
        in the zone.  When the <expiry> element is\n      provided, the losing DNS
        operator SHOULD remove the inserted key\n      material from the zone after
        the expiry time.  This may be because\n      the transaction that needed the
        insertion should be either\n      completed or abandoned by that time.  If
        a client receives a key\n      relay object that has been sent previously,
        it MUST update the\n      expiry time of the key material.  This enables the
        clients to\n      update the lifetime of the key material when a transfer
        is\n      delayed.\n   The <expiry> element MUST contain exactly one of the
        following child\n   elements:\n   <absolute>:  The DNSSEC key material is
        valid from the current date\n      and time until it expires on the specified
        date and time.  If a\n      date in the past is provided, this MUST be interpreted
        as a\n      revocation of a previously sent key relay object.\n   <relative>:
        \ The DNSSEC key material is valid from the current date\n      and time until
        the end of the specified duration.  If a period of\n      zero is provided,
        this MUST be interpreted as a revocation of a\n      previously sent key relay
        object.\n"
      title: 2.1.1.  <keyRelayData> Element
    title: 2.1.  DNSSEC Key Material
  title: 2.  Object Attributes
- contents:
  - "3.  EPP Command Mapping\n   A detailed description of the EPP syntax and semantics
    can be found\n   in the EPP core protocol specification [RFC5730].  The command\n
    \  mapping described here is specifically for use in this key relay\n   mapping.\n"
  - contents:
    - "3.1.  EPP Query Commands\n   EPP provides three commands to retrieve object
      information: <check>\n   to determine if an object is known to the server, <info>
      to retrieve\n   detailed information associated with an object, and <transfer>
      to\n   retrieve object transfer status information.\n"
    - contents:
      - "3.1.1.  EPP <check> Command\n   Check that semantics do not apply to key
        relay objects, so there is\n   no mapping defined for the EPP <check> command
        and the EPP <check>\n   response.\n"
      title: 3.1.1.  EPP <check> Command
    - contents:
      - "3.1.2.  EPP <info> Command\n   Info command semantics do not apply to the
        key relay objects, so\n   there is no mapping defined for the EPP <info> command.\n
        \  The EPP <info> response for key relay objects is used in the EPP poll\n
        \  response, as described in [RFC5730].  The key relay object created\n   with
        the <create> command, described in Section 3.2.1 is inserted\n   into the
        receiving client's poll queue.  The receiving client will\n   receive the
        key relay object using the EPP <poll> command, as\n   described in [RFC5730].\n
        \  When a <poll> command has been processed successfully for a key relay\n
        \  poll message, the EPP <resData> element MUST contain a child\n   <keyrelay:infData>
        element that is identified by the keyrelay\n   namespace.  The <keyrelay:infData>
        element contains the following\n   child elements:\n   o  A REQUIRED <name>
        element containing the domain name for which the\n      DNSSEC key material
        is relayed.\n   o  A REQUIRED <authInfo> element that contains authorization\n
        \     information associated with the domain object ([RFC5731],\n      Section
        3.2.1).\n   o  One or more REQUIRED <keyRelayData> elements containing data
        to be\n      relayed, as defined in Section 2.1.  A server MAY apply a server\n
        \     policy that specifies the number of <keyRelayData> elements that\n      can
        be incorporated.  When a server policy is violated, a server\n      MUST respond
        with an EPP result code 2308 \"Data management policy\n      violation\".\n
        \  o  An OPTIONAL <crDate> element that contains the date and time of\n      the
        submitted <create> command.\n   o  An OPTIONAL <reID> element that contains
        the identifier of the\n      client that requested the key relay.\n   o  An
        OPTIONAL <acID> element that contains the identifier of the\n      client
        that SHOULD act upon the key relay.\n   Example <poll> response:\n   S:<?xml
        version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n   S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\"\n
        \  S:    xmlns:keyrelay=\"urn:ietf:params:xml:ns:keyrelay-1.0\"\n   S:  xmlns:s=\"urn:ietf:params:xml:ns:secDNS-1.1\"\n
        \  S:  xmlns:d=\"urn:ietf:params:xml:ns:domain-1.0\">\n   S:  <response>\n
        \  S:    <result code=\"1301\">\n   S:      <msg>Command completed successfully;
        ack to dequeue</msg>\n   S:    </result>\n   S:    <msgQ count=\"5\" id=\"12345\">\n
        \  S:      <qDate>1999-04-04T22:01:00.0Z</qDate>\n   S:      <msg>Keyrelay
        action completed successfully.</msg>\n   S:    </msgQ>\n   S:    <resData>\n
        \  S:      <keyrelay:infData>\n   S:        <keyrelay:name>example.org</keyrelay:name>\n
        \  S:        <keyrelay:authInfo>\n   S:          <d:pw>JnSdBAZSxxzJ</d:pw>\n
        \  S:        </keyrelay:authInfo>\n   S:        <keyrelay:keyRelayData>\n
        \  S:          <keyrelay:keyData>\n   S:            <s:flags>256</s:flags>\n
        \  S:            <s:protocol>3</s:protocol>\n   S:            <s:alg>8</s:alg>\n
        \  S:            <s:pubKey>cmlraXN0aGViZXN0</s:pubKey>\n   S:          </keyrelay:keyData>\n
        \  S:          <keyrelay:expiry>\n   S:            <keyrelay:relative>P1M13D</keyrelay:relative>\n
        \  S:          </keyrelay:expiry>\n   S:        </keyrelay:keyRelayData>\n
        \  S:        <keyrelay:crDate>\n   S:          1999-04-04T22:01:00.0Z\n   S:
        \       </keyrelay:crDate>\n   S:        <keyrelay:reID>\n   S:          ClientX\n
        \  S:        </keyrelay:reID>\n   S:        <keyrelay:acID>\n   S:          ClientY\n
        \  S:        </keyrelay:acID>\n   S:      </keyrelay:infData>\n   S:    </resData>\n
        \  S:    <trID>\n   S:      <clTRID>ABC-12345</clTRID>\n   S:      <svTRID>54321-ZYX</svTRID>\n
        \  S:    </trID>\n   S:  </response>\n   S:</epp>\n"
      title: 3.1.2.  EPP <info> Command
    - contents:
      - "3.1.3.  EPP <transfer> Command\n   Transfer semantics do not apply to key
        relay objects, so there is no\n   mapping defined for the EPP <transfer> command.\n"
      title: 3.1.3.  EPP <transfer> Command
    title: 3.1.  EPP Query Commands
  - contents:
    - "3.2.  EPP Transform Commands\n   EPP provides five commands to transform objects:
      <create> to create\n   an instance of an object, <delete> to delete an instance
      of an\n   object, <renew> to extend the validity period of an object,\n   <transfer>
      to manage object sponsorship changes, and <update> to\n   change information
      associated with an object.\n"
    - contents:
      - "3.2.1.  EPP <create> Command\n   The EPP <create> command provides a transform
        operation that allows a\n   client to create a key relay object that includes
        the domain name and\n   DNSSEC key material to be relayed.  When the <create>
        command is\n   validated, the server MUST insert an EPP <poll> message, using
        the\n   key relay info response (see Section 3.1.2), in the receiving\n   client's
        poll queue that belongs to the registrar on record of the\n   provided domain
        name.\n   In addition to the standard EPP command elements, the <create>\n
        \  command MUST contain a <keyrelay:create> element that is identified\n   by
        the keyrelay namespace.  The <keyrelay:create> element contains\n   the following
        child elements:\n   o  A REQUIRED <keyrelay:name> element containing the domain
        name for\n      which the DNSSEC key material is relayed.\n   o  A REQUIRED
        <authInfo> element that contains authorization\n      information associated
        with the domain object ([RFC5731],\n      Section 3.2.1).\n   o  One or more
        REQUIRED <keyrelay:keyRelayData> elements containing\n      data to be relayed,
        as defined in Section 2.1.\n   Example <create> commands:\n   Note that in
        the provided example, the second <keyrelay:keyRelayData>\n   element has a
        period of zero, and thus represents the revocation of a\n   previously sent
        key relay object (see Section 2.1.1).\n   C:<?xml version=\"1.0\" encoding=\"UTF-8\"
        standalone=\"no\"?>\n   C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\"\n
        \  C:    xmlns:keyrelay=\"urn:ietf:params:xml:ns:keyrelay-1.0\"\n   C:  xmlns:s=\"urn:ietf:params:xml:ns:secDNS-1.1\"\n
        \  C:  xmlns:d=\"urn:ietf:params:xml:ns:domain-1.0\">\n   C:  <command>\n
        \  C:    <create>\n   C:      <keyrelay:create>\n   C:        <keyrelay:name>example.org</keyrelay:name>\n
        \  C:        <keyrelay:authInfo>\n   C:          <d:pw>JnSdBAZSxxzJ</d:pw>\n
        \  C:        </keyrelay:authInfo>\n   C:        <keyrelay:keyRelayData>\n
        \  C:          <keyrelay:keyData>\n   C:            <s:flags>256</s:flags>\n
        \  C:            <s:protocol>3</s:protocol>\n   C:            <s:alg>8</s:alg>\n
        \  C:            <s:pubKey>cmlraXN0aGViZXN0</s:pubKey>\n   C:          </keyrelay:keyData>\n
        \  C:          <keyrelay:expiry>\n   C:            <keyrelay:relative>P1M13D</keyrelay:relative>\n
        \  C:          </keyrelay:expiry>\n   C:        </keyrelay:keyRelayData>\n
        \  C:        <keyrelay:keyRelayData>\n   C:          <keyrelay:keyData>\n
        \  C:            <s:flags>256</s:flags>\n   C:            <s:protocol>3</s:protocol>\n
        \  C:            <s:alg>8</s:alg>\n   C:            <s:pubKey>bWFyY2lzdGhlYmVzdA==</s:pubKey>\n
        \  C:          </keyrelay:keyData>\n   C:          <keyrelay:expiry>\n   C:
        \           <keyrelay:relative>P0D</keyrelay:relative>\n   C:          </keyrelay:expiry>\n
        \  C:        </keyrelay:keyRelayData>\n   C:      </keyrelay:create>\n   C:
        \   </create>\n   C:    <clTRID>ABC-12345</clTRID>\n   C:  </command>\n   C:</epp>\n
        \  When a server has successfully processed the <create> command, it\n   MUST
        respond with a standard EPP response.  See [RFC5730],\n   Section 2.6.\n   Example
        <create> response:\n   S:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n
        \  S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   S:  <response>\n   S:
        \   <result code=\"1000\">\n   S:      <msg>Command completed successfully</msg>\n
        \  S:    </result>\n   S:    <trID>\n   S:       <clTRID>ABC-12345</clTRID>\n
        \  S:       <svTRID>54321-ZYX</svTRID>\n   S:    </trID>\n   S:  </response>\n
        \  S:</epp>\n   When a server cannot process the <create> command due to the
        server\n   policy, it MUST return an EPP 2308 error message.  This might be
        the\n   case when the server knows that the receiving client does not support\n
        \  key relay transactions.  See [RFC5730], Section 2.6.\n   Example <create>
        response:\n   S:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n
        \  S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   S:  <response>\n   S:
        \   <result code=\"2308\">\n   S:      <msg>Data management policy violation</msg>\n
        \  S:    </result>\n   S:    <trID>\n   S:       <clTRID>ABC-12345</clTRID>\n
        \  S:       <svTRID>54321-ZYX</svTRID>\n   S:    </trID>\n   S:  </response>\n
        \  S:</epp>\n"
      title: 3.2.1.  EPP <create> Command
    - contents:
      - "3.2.2.  EPP <delete> Command\n   Delete semantics do not apply to key relay
        objects, so there is no\n   mapping defined for the EPP <delete> command and
        the EPP <delete>\n   response.\n"
      title: 3.2.2.  EPP <delete> Command
    - contents:
      - "3.2.3.  EPP <renew> Command\n   Renew semantics do not apply to key relay
        objects, so there is no\n   mapping defined for the EPP <renew> command and
        the EPP <renew>\n   response.\n"
      title: 3.2.3.  EPP <renew> Command
    - contents:
      - "3.2.4.  EPP <transfer> Command\n   Transfer semantics do not apply to key
        relay objects, so there is no\n   mapping defined for the EPP <transfer> command
        and the EPP <transfer>\n   response.\n"
      title: 3.2.4.  EPP <transfer> Command
    - contents:
      - "3.2.5.  EPP <update> Command\n   Update semantics do not apply to key relay
        objects, so there is no\n   mapping defined for the EPP <update> command and
        the EPP <update>\n   response.\n"
      title: 3.2.5.  EPP <update> Command
    title: 3.2.  EPP Transform Commands
  title: 3.  EPP Command Mapping
- contents:
  - "4.  Formal Syntax\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <schema
    targetNamespace=\"urn:ietf:params:xml:ns:keyrelay-1.0\"\n     xmlns:keyrelay=\"urn:ietf:params:xml:ns:keyrelay-1.0\"\n
    \    xmlns:eppcom=\"urn:ietf:params:xml:ns:eppcom-1.0\"\n     xmlns:secDNS=\"urn:ietf:params:xml:ns:secDNS-1.1\"\n
    \    xmlns:domain=\"urn:ietf:params:xml:ns:domain-1.0\"\n     xmlns=\"http://www.w3.org/2001/XMLSchema\"\n
    \    elementFormDefault=\"qualified\">\n     <annotation>\n       <documentation>\n
    \        Extensible Provisioning Protocol v1.0 protocol\n         extension schema
    for relaying DNSSEC key material.\n       </documentation>\n     </annotation>\n
    \    <import namespace=\"urn:ietf:params:xml:ns:eppcom-1.0\" />\n     <import
    namespace=\"urn:ietf:params:xml:ns:secDNS-1.1\" />\n     <import namespace=\"urn:ietf:params:xml:ns:domain-1.0\"
    />\n     <element name=\"keyRelayData\" type=\"keyrelay:keyRelayDataType\" />\n
    \    <element name=\"infData\" type=\"keyrelay:infDataType\" />\n     <element
    name=\"create\" type=\"keyrelay:createType\" />\n     <complexType name=\"createType\">\n
    \      <sequence>\n         <element name=\"name\" type=\"eppcom:labelType\" />\n
    \        <element name=\"authInfo\" type=\"domain:authInfoType\" />\n         <element
    name=\"keyRelayData\" type=\"keyrelay:keyRelayDataType\"\n             maxOccurs=\"unbounded\"/>\n
    \      </sequence>\n     </complexType>\n    <complexType name=\"infDataType\">\n
    \      <sequence>\n         <element name=\"name\" type=\"eppcom:labelType\" />\n
    \        <element name=\"authInfo\" type=\"domain:authInfoType\" />\n         <element
    name=\"keyRelayData\" type=\"keyrelay:keyRelayDataType\"\n             maxOccurs=\"unbounded\"/>\n
    \        <element name=\"crDate\" type=\"dateTime\"/>\n         <element name=\"reID\"
    type=\"eppcom:clIDType\" />\n         <element name=\"acID\" type=\"eppcom:clIDType\"
    />\n       </sequence>\n     </complexType>\n     <complexType name=\"keyRelayDataType\">\n
    \      <sequence>\n         <element name=\"keyData\" type=\"secDNS:keyDataType\"
    />\n         <element name=\"expiry\" type=\"keyrelay:keyRelayExpiryType\"\n             minOccurs=\"0\"
    />\n       </sequence>\n     </complexType>\n     <complexType name=\"keyRelayExpiryType\">\n
    \      <choice>\n         <element name=\"absolute\" type=\"dateTime\" />\n         <element
    name=\"relative\" type=\"duration\" />\n       </choice>\n     </complexType>\n
    \  </schema>\n"
  title: 4.  Formal Syntax
- contents:
  - '5.  IANA Considerations

    '
  - contents:
    - "5.1.  XML Namespace\n   This document uses URNs to describe an XML namespace
      conforming to\n   the registry mechanism described in [RFC3688].  The following
      URI\n   assignment has been made by IANA:\n   URI: urn:ietf:params:xml:ns:keyrelay-1.0\n
      \  Registrant Contact: See the \"Authors' Addresses\" section of this\n   document.\n
      \  XML: See the \"Formal Syntax\" section of this document.\n"
    title: 5.1.  XML Namespace
  - contents:
    - "5.2.  XML Schema\n   This document uses URNs to describe an XML schema conforming
      to the\n   registry mechanism described in [RFC3688].  The following URI\n   assignment
      has been made by IANA:\n   URI: urn:ietf:params:xml:schema:keyrelay-1.0\n   XML:
      See the \"Formal Syntax\" section of this document.\n"
    title: 5.2.  XML Schema
  - contents:
    - "5.3.  EPP Extension Registry\n   The EPP extension described in this document
      has been registered by\n   IANA in the \"Extensions for the Extensible Provisioning
      Protocol\n   (EPP)\" registry described in [RFC7451].  The details of the\n
      \  registration are as follows:\n   Name of Extension: \"Key Relay Mapping for
      the Extensible Provisioning\n   Protocol\"\n   Document status: Standards Track\n
      \  Reference: RFC 8063\n   Registrant Name and Email Address: IESG, iesg@ietf.org\n
      \  Top-Level Domains (TLDs): Any\n   IPR Disclosure: https://datatracker.ietf.org/ipr/\n
      \  Status: Active\n   Notes: None\n"
    title: 5.3.  EPP Extension Registry
  title: 5.  IANA Considerations
- contents:
  - "6.  Security Considerations\n   A server SHOULD NOT perform any transformation
    on data under server\n   management when processing a <keyrelay:create> command.
    \ The intent\n   of this command is to put DNSSEC key material on the poll queue
    of\n   another client.  Exceptions to this recommendation are allowable only\n
    \  for the purposes of achieving interoperability with the different\n   server
    policies that have already implemented this EPP extension.\n   Any EPP client
    can use this mechanism to put data on the message\n   queue of another EPP client,
    allowing for the potential of a denial-\n   of-service attack.  However, this
    can and should be detected by the\n   server.  A server MAY set a server policy
    that limits or rejects a\n   <keyrelay:create> command if it detects that the
    mechanism is being\n   abused.\n   For the <keyrelay:keyRelayData> data, a correct
    <domain:authInfo>\n   element should be used as an indication that putting the
    key material\n   on the receiving EPP clients poll queue is authorized by the\n
    \  _registrant_ of that domain name.  The authorization of EPP clients\n   to
    perform DNS changes is not covered in this document as it depends\n   on registry-specific
    policy.\n   A client that uses this mechanism to send DNSSEC key material to\n
    \  another client could verify through DNS that the DNSSEC key material\n   is
    added to the authoritative zone of the domain.  This check can be\n   used to
    verify that the DNSSEC key material has traveled end-to-end\n   from the gaining
    DNS operator to the losing DNS operator.  This check\n   does not tell anything
    about the DNSSEC chain of trust and can merely\n   be used as a verification of
    a successful transfer of the DNSSEC key\n   material.\n"
  title: 6.  Security Considerations
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC3688]  Mealling, M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n              DOI
      10.17487/RFC3688, January 2004,\n              <http://www.rfc-editor.org/info/rfc3688>.\n
      \  [RFC5730]  Hollenbeck, S., \"Extensible Provisioning Protocol (EPP)\",\n
      \             STD 69, RFC 5730, DOI 10.17487/RFC5730, August 2009,\n              <http://www.rfc-editor.org/info/rfc5730>.\n
      \  [RFC5731]  Hollenbeck, S., \"Extensible Provisioning Protocol (EPP)\n              Domain
      Name Mapping\", STD 69, RFC 5731,\n              DOI 10.17487/RFC5731, August
      2009,\n              <http://www.rfc-editor.org/info/rfc5731>.\n   [RFC5910]
      \ Gould, J. and S. Hollenbeck, \"Domain Name System (DNS)\n              Security
      Extensions Mapping for the Extensible\n              Provisioning Protocol (EPP)\",
      RFC 5910,\n              DOI 10.17487/RFC5910, May 2010,\n              <http://www.rfc-editor.org/info/rfc5910>.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [DNSOP]    Koch, P., Sanz, M., and A. Verschuren,
      \"Changing DNS\n              Operators for DNSSEC signed Zones\", Work in Progress,\n
      \             draft-koch-dnsop-dnssec-operator-change-06, February 2014.\n   [RFC7451]
      \ Hollenbeck, S., \"Extension Registry for the Extensible\n              Provisioning
      Protocol\", RFC 7451, DOI 10.17487/RFC7451,\n              February 2015, <http://www.rfc-editor.org/info/rfc7451>.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "Acknowledgements\n   We would like to thank the following individuals for their
    valuable\n   input, review, and constructive criticism in earlier revisions or\n
    \  support for the concepts described in this document:\n   Maarten Wullink, Marco
    Davids, Ed Lewis, James Mitchell, David Peal,\n   Patrik Faltstrom, Klaus Malorny,
    James Gould, Patrick Mevzek, Seth\n   Goldman, Maarten Bosteels, Ulrich Wisser,
    Kees Monshouwer, Scott\n   Hollenbeck, and Job Snijders.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Rik Ribbers\n   SIDN\n   Meander 501\n   Arnhem  6825
    MD\n   The Netherlands\n   Email: rik.ribbers@sidn.nl\n   URI:   https://www.sidn.nl/\n
    \  Marc Groeneweg\n   SIDN\n   Meander 501\n   Arnhem  6825 MD\n   The Netherlands\n
    \  Email: marc.groeneweg@sidn.nl\n   URI:   https://www.sidn.nl/\n   Miek Gieben\n
    \  Email: miek@miek.nl\n   Antoin Verschuren\n   Email: ietf@antoin.nl\n"
  title: Authors' Addresses
