- title: __initial_text__
  contents:
  - "         INITIAL CONNECTION PROTOCOL--REVIEWED\nINTRODUCTION\n------------\n\
    \     At the Network meeting preceding the SJCC '71, an\n\"ICP Committee\" was\
    \ established.  It's purpose was to get\n\"something\" working fast with minimum\
    \ modifications to the\ncurrent ICP so as to minimize complaints.  (This seems\
    \ like\na good definition for almost everything!)  Consequently,\nthose who had\
    \ objections to the current ICP were interviewed\nand a compromise was reached\
    \ in the form of RFC #165.  The\nICP committee didn't have a chance to think about\
    \ an alter-\nnative because of the above mentioned constraints.  In this\nnote\
    \ we attempted a simple version of an ICP assuming that\nwe can add commands to\
    \ Host-Host protocol. We hope that this\nwill be useful in the design of the next\
    \ version of the\nHost-Host protocol.\nICP COMMANDS\n------------\n     To establish\
    \ a regular connection one party can issue\nan INIT (NCP sends RTS or STR commands),\
    \ then the other\nparty can accept the request for connection by responding\n\
    with an INIT or refusing it with a CLOSE.  We think that\nduplex connections from\
    \ user to server.\n     The following commands are necessary for simplex\nconnections:\n\
    \     ISC - Initiate Simplex Connection\n     ASC - Accept Simplex Connection\n\
    \     RSC - Refuse Simplex Connection\n     The notation for parameters is similar\
    \ to that\nof RFC #165:\n     L - Server socket name, in one special case the\n\
    \         server is \"logger\".\n     U - User socket.\n     S - Socket assigned\
    \ by server for the connection\n         with user.\n     X - Is the byte size\
    \ if U is odd and is the link\n         number if U is even.\n     -         \
    \                  -\n     X - Is the complement of X (X is the link number\n\
    \         if U is odd and byte size if U is even.\n     To initiate a simplex\
    \ connection the user's NCP\nissues:\n           ISC, L, U, X\n     To refuse\
    \ this connection the server's NCP issues:\n           RSC, L, U\n           ASC,\
    \ L, U, S, X\n     Similarly, for duplex connections, we have:\n           IDC,\
    \ L, U1, X1, U2, X2\n           RDC, L, U1, U2\n                           - \
    \          -\n           ADC, L, U1, S1, X1, U2, S2, X2\nwhere (U1,U2), (S1,S2),\
    \ (U1,S1) and (U2,S2) are pairs of\nopposite gender.\n     After the server accepts\
    \ the connection(s), it (they)\ngoes immediately to a \"connected state\", and\
    \ the appropriate\nALL command(s) must be sent.\nADVANTAGES\n----------\n    \
    \ The main advantage to this approach is that it mini-\nmizes the dialog between\
    \ user and server.  The server socket\nL is used only as an address, not a socket\
    \ to connect to,\ntherefore eliminating the need to establish a connection to\n\
    L, choose a byte size, send an ALL command, send and receive\ndata on it and CLOSE\
    \ it.  Race conditions as mentioned in\nRFC #143 do not arise.  Socket L is the\
    \ server and should\nbe in a \"Listening for ICP\" state when an ISC or IDC is\n\
    received.  If socket L is not in that state, the serving\nNCP should refuse to\
    \ ICP request.  The serving NCP should\n_not_ queue ICP requests.\n     In the\
    \ current ICP, when the user choses socket U, he\nhas to reserve sockets U+2 and\
    \ U+3.  In the above described\napproach no restrictions exist for U1 and U2 (except\
    \ that\nthey are of opposite gender);  the same is true for S1 and\nS2.\n    \
    \ We think that duplex commands are necessary since both\nconnections are to be\
    \ connected to the same server process.\nTheir separation by using two ISCs, will\
    \ add complications\nof correlating the two ISCs with the same process.  Also,\n\
    if two ISCs are used, the first might be accepted and the\nsecond refused.  This\
    \ leads to uncertainty on the user's\npart.  This condition cannot occur with\
    \ the duplex commands.\n     The minimum change we can think of to make the current\n\
    ICP look similar to the above is to add one NCP level com-\nmand -- accept:\n\
    \           ACC, L, U, S\n     The exchange between NCPs in the notation of RFC\
    \ #165\nis now:\n<where the original uses a script lowercase \"L\" we use \"l\"\
    >\n<where the original uses subscripts we use {} so that\n   A-subscript-B is\
    \ printed A{B} >\n     Server NCP                   User NCP\n     ----------\
    \                   --------\n     Listen for connection on L   RST,U,L,l{A}\n\
    \     ACC,L,U,S                    S is passed by NCP to the\n               \
    \                   user and connection from\n                               \
    \   U to L is closed.\n     STR,S+1,U+2,B{s}             STR,U+3,S,B{u}\n    \
    \ RTS,S,U+3,l{B}               RTS,U+2,S+1,l{c}\n     Wait for connection    \
    \      Wait for connection\n     ALL,l{B},m{B},b{B}           ALL,l{c},m{c},b{c}\n\
    \     An alternative way to the ACC command is a CLS command\nwith an additional\
    \ parameter (32 bits long).  If parameter\nis zero the request for connection\
    \ by the user is refused;\nif the parameter is non-zero, the request is accepted\
    \ and\nsocket S is the value of the parameter.\n     All suggested changes improve\
    \ the ICP dialog both from\nthe aesthetic and efficiency points of view.  We lean\
    \ strongly,\nhowever, to the first, more major ICP modification.\n     It seems\
    \ appropriate to mention here for the purpose\nof the next version of the Host-Host\
    \ protocol that the\nCLS command has more than one function.  We think that the\n\
    CLS command should be reserved to close connections in the\n\"connected state\"\
    \ only (i.e., \"open\" connections).  Two\nadditional commands can be used for\
    \ \"refusing\" and \"reject-\ning\" requests for connections:\n           REJ<mysocket><yoursocket>\
    \ -- when a request\n           for connection is rejected unconditionally.\n\
    \           REF<mysocket><yoursocket><reason> -- when a\n           request for\
    \ connection is refused temporarily\n           because the NCP could not handle\
    \ it.  For\n           example:  no process LISTENed to it and it\n          \
    \ was timed-out, or NCP tables are full in which\n           case the user process\
    \ may try again.  The\n           reason for refusing is indicated in the\n  \
    \         parameter \"reason\".\n[ This RFC was put into machine readable form\
    \ for entry ]\n[ into the online RFC archives by BBN Corp. under the   ]\n[ direction\
    \ of Alex McKenzie.                   12/96   ]\n"
