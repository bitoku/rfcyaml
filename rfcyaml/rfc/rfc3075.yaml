- title: __initial_text__
  contents:
  - '                  XML-Signature Syntax and Processing

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2001 The Internet Society & W3C (MIT, INRIA,\
    \ Keio), All\n   Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies XML (Extensible Markup Language) digital\n\
    \   signature processing rules and syntax.  XML Signatures provide\n   integrity,\
    \ message authentication, and/or signer authentication\n   services for data of\
    \ any type, whether located within the XML that\n   includes the signature or\
    \ elsewhere.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction ................................................\
    \  3\n         1. Editorial Conventions ..................................  3\n\
    \         2. Design Philosophy ......................................  4\n   \
    \      3. Versions, Namespaces and Identifiers ...................  4\n      \
    \   4. Acknowledgements .......................................  5\n   2.  Signature\
    \ Overview and Examples .............................  6\n         1. Simple Example\
    \ (Signature, SignedInfo, Methods, and\n            References) ............................................\
    \  7\n              1. More on Reference .................................  9\n\
    \         2. Extended Example (Object and SignatureProperty) ........ 10\n   \
    \      3. Extended Example (Object and Manifest) ................. 11\n   3. \
    \ Processing Rules ............................................ 13\n         1.\
    \ Core Generation .... ................................... 13\n              1.\
    \ Reference Generation .............................. 13\n              2. Signature\
    \ Generation .............................. 13\n         2. Core Validation ........................................\
    \ 13\n              1. Reference Validation .............................. 14\n\
    \              2. Signature Validation .............................. 14\n   4.\
    \  Core Signature Syntax ....................................... 14\n        \
    \ 1. The Signature element .................................. 15\n         2.\
    \ The SignatureValue Element ............................. 16\n         3. The\
    \ SignedInfo Element ................................. 16\n              1. The\
    \ CanonicalizationMethod Element ................ 17\n              2. The SignatureMethod\
    \ Element ....................... 18\n              3. The Reference Element .............................\
    \ 19\n                   1. The URI Attribute ............................ 19\n\
    \                   2. The Reference Processing Model ............... 21\n   \
    \                3. Same-Document URI-References ................. 23\n      \
    \             4. The Transforms Element ....................... 24\n         \
    \          5. The DigestMethod Element ..................... 25\n            \
    \       6. The DigestValue Element ...................... 26\n         4. The\
    \ KeyInfo Element .................................... 26\n              1. The\
    \ KeyName Element ............................... 27\n              2. The KeyValue\
    \ Element .............................. 28\n              3. The RetrievalMethod\
    \ Element ....................... 28\n              4. The X509Data Element ..............................\
    \ 29\n              5. The PGPData Element ............................... 31\n\
    \              6. The SPKIData Element .............................. 32\n   \
    \           7. The MgmtData Element .............................. 32\n      \
    \   5. The Object Element ..................................... 33\n   5.  Additional\
    \ Signature Syntax ................................. 34\n         1. The Manifest\
    \ Element ................................... 34\n         2. The SignatureProperties\
    \ Element ........................ 35\n         3. Processing Instructions ................................\
    \ 36\n         4. Comments in dsig Elements .............................. 36\n\
    \   6.  Algorithms .................................................. 36\n   \
    \      1. Algorithm Identifiers and Implementation Requirements .. 36\n      \
    \   2. Message Digests ........................................ 38\n         \
    \     1. SHA-1 ............................................. 38\n         3. Message\
    \ Authentication Codes ........................... 38\n              1. HMAC ..............................................\
    \ 38\n         4. Signature Algorithms ................................... 39\n\
    \              1. DSA ............................................... 39\n   \
    \           2. PKCS1 ............................................. 40\n      \
    \   5. Canonicalization Algorithms ............................ 42\n         \
    \     1. Minimal Canonicalization .......................... 43\n            \
    \  2. Canonical XML ..................................... 43\n         6. Transform\
    \ Algorithms ................................... 44\n              1. Canonicalization\
    \ .................................. 44\n              2. Base64 ............................................\
    \ 44\n              3. XPath Filtering ................................... 45\n\
    \              4. Enveloped Signature Transform ..................... 48\n   \
    \           5. XSLT Transform .................................... 48\n   7. \
    \ XML Canonicalization and Syntax Constraint Considerations ... 49\n         1.\
    \ XML 1.0, Syntax Constraints, and Canonicalization  ..... 50\n         2. DOM/SAX\
    \ Processing and Canonicalization ................ 51\n   8.  Security Considerations\
    \ ..................................... 52\n         1. Transforms .............................................\
    \ 52\n              1. Only What is Signed is Secure ..................... 52\n\
    \              2. Only What is \"Seen\" Should be Signed .............. 53\n \
    \             3. \"See\" What is Signed .............................. 53\n  \
    \       2. Check the Security Model ............................... 54\n     \
    \    3. Algorithms, Key Lengths, Etc. .......................... 54\n   9.  Schema,\
    \ DTD, Data Model,and Valid Examples .................. 55\n   10. Definitions\
    \ ................................................. 56\n   11. References ..................................................\
    \ 58\n   12. Authors' Addresses .......................................... 63\n\
    \   13. Full Copyright Statement .................................... 64\n"
- title: 1.0 Introduction
  contents:
  - "1.0 Introduction\n   This document specifies XML syntax and processing rules\
    \ for creating\n   and representing digital signatures. XML Signatures can be\
    \ applied to\n   any digital content (data object), including XML.  An XML Signature\n\
    \   may be applied to the content of one or more resources.  Enveloped or\n  \
    \ enveloping signatures are over data within the same XML document as\n   the\
    \ signature; detached signatures are over data external to the\n   signature element.\
    \  More specifically, this specification defines an\n   XML signature element\
    \ type and an XML signature application;\n   conformance requirements for each\
    \ are specified by way of schema\n   definitions and prose respectively.  This\
    \ specification also includes\n   other useful types that identify methods for\
    \ referencing collections\n   of resources, algorithms, and keying and management\
    \ information.\n   The XML Signature is a method of associating a key with referenced\n\
    \   data (octets); it does not normatively specify how keys are\n   associated\
    \ with persons or institutions, nor the meaning of the data\n   being referenced\
    \ and signed.  Consequently, while this specification\n   is an important component\
    \ of secure XML applications, it itself is\n   not sufficient to address all application\
    \ security/trust concerns,\n   particularly with respect to using signed XML (or\
    \ other data formats)\n   as a basis of human-to-human communication and agreement.\
    \  Such an\n   application must specify additional key, algorithm, processing\
    \ and\n   rendering requirements.  For further information, please see Security\n\
    \   Considerations (section 8).\n"
- title: 1.1 Editorial and Conformance Conventions
  contents:
  - "1.1 Editorial and Conformance Conventions\n   For readability, brevity, and historic\
    \ reasons this document uses the\n   term \"signature\" to generally refer to\
    \ digital authentication values\n   of all types.Obviously, the term is also strictly\
    \ used to refer to\n   authentication values that are based on public keys and\
    \ that provide\n   signer authentication.  When specifically discussing authentication\n\
    \   values based on symmetric secret key codes we use the terms\n   authenticators\
    \ or authentication codes.  (See Check the Security\n   Model, section 8.3.)\n\
    \   This specification uses both XML Schemas [XML-schema] and DTDs [XML].\n  \
    \ (Readers unfamiliar with DTD syntax may wish to refer to Ron\n   Bourret's \"\
    Declaring Elements and Attributes in an XML DTD\"\n   [Bourret].)  The schema\
    \ definition is presently normative.\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   specification are to be interpreted as\
    \ described in RFC2119\n   [KEYWORDS]:\n      \"they MUST only be used where it\
    \ is actually required for\n      interoperation or to limit behavior which has\
    \ potential for\n      causing harm (e.g., limiting retransmissions)\"\n   Consequently,\
    \ we use these capitalized keywords to unambiguously\n   specify requirements\
    \ over protocol and application features and\n   behavior that affect the interoperability\
    \ and security of\n   implementations.  These key words are not used (capitalized)\
    \ to\n   describe XML grammar; schema definitions unambiguously describe such\n\
    \   requirements and we wish to reserve the prominence of these terms for\n  \
    \ the natural language descriptions of protocols and features.  For\n   instance,\
    \ an XML attribute might be described as being \"optional.\"\n   Compliance with\
    \ the XML-namespace specification [XML-ns] is described\n   as \"REQUIRED.\"\n"
- title: 1.2 Design Philosophy
  contents:
  - "1.2 Design Philosophy\n   The design philosophy and requirements of this specification\
    \ are\n   addressed in the XML-Signature Requirements document [XML-Signature-\n\
    \   RD].\n"
- title: 1.3 Versions, Namespaces and Identifiers
  contents:
  - "1.3 Versions, Namespaces and Identifiers\n   No provision is made for an explicit\
    \ version number in this syntax.\n   If a future version is needed, it will use\
    \ a different namespace  The\n   XML namespace [XML-ns] URI that MUST be used\
    \ by implementations of\n   this (dated) specification is:\n   xmlns=\"http://www.w3.org/2000/09/xmldsig#\"\
    \n   This namespace is also used as the prefix for algorithm identifiers\n   used\
    \ by this specification.  While applications MUST support XML and\n   XML-namespaces,\
    \ the use of internal entities [XML] or our \"dsig\" XML\n   namespace prefix\
    \ and defaulting/scoping conventions are OPTIONAL; we\n   use these facilities\
    \ to provide compact and readable examples.\n   This specification uses Uniform\
    \ Resource Identifiers [URI] to\n   identify resources, algorithms, and semantics.\
    \  The URI in the\n   namespace declaration above is also used as a prefix for\
    \ URIs under\n   the control of this specification.  For resources not under the\n\
    \   control of this specification, we use the designated Uniform Resource\n  \
    \ Names [URN] or Uniform Resource Locators [URL] defined by its\n   normative\
    \ external specification.  If an external specification has\n   not allocated\
    \ itself a Uniform Resource Identifier we allocate an\n   identifier under our\
    \ own namespace.  For instance:\n   SignatureProperties is identified and defined\
    \ by this specification's\n         namespace\n         http://www.w3.org/2000/09/xmldsig#SignatureProperties\n\
    \   XSLT is identified and defined by an external URI\n         http://www.w3.org/TR/1999/PR-xslt-19991008\n\
    \   SHA1 is identified via this specification's namespace and defined via\n  \
    \       a normative reference\n         http://www.w3.org/2000/09/xmldsig#sha1\n\
    \         FIPS PUB 180-1.  Secure Hash Standard.  U.S. Department of\n       \
    \  Commerce/National Institute of Standards and Technology.\n   Finally, in order\
    \ to provide for terse namespace declarations we\n   sometimes use XML internal\
    \ entities [XML] within URIs.  For instance:\n      <?xml version='1.0'?>\n  \
    \    <!DOCTYPE Signature SYSTEM\n        \"xmldsig-core-schema.dtd\" [ <!ENTITY\
    \ dsig\n        \"http://www.w3.org/2000/09/xmldsig#\"> ]>\n      <Signature xmlns=\"\
    &dsig;\" Id=\"MyFirstSignature\">\n        <SignedInfo>\n        ...\n"
- title: 1.4  Acknowledgements
  contents:
  - "1.4  Acknowledgements\n   The contributions of the following working group members\
    \ to this\n   specification are gratefully acknowledged:\n      *  Mark Bartel,\
    \ JetForm Corporation (Author)\n      *  John Boyer, PureEdge (Author)\n     \
    \ *  Mariano P. Consens, University of Waterloo\n      *  John Cowan, Reuters\
    \ Health\n      *  Donald Eastlake 3rd, Motorola  (Chair, Author/Editor)\n   \
    \   *  Barb Fox, Microsoft (Author)\n      *  Christian Geuer-Pollmann, University\
    \ Siegen\n      *  Tom Gindin, IBM\n      *  Phillip Hallam-Baker, VeriSign Inc\n\
    \      *  Richard Himes, US Courts\n      *  Merlin Hughes, Baltimore\n      *\
    \  Gregor Karlinger, IAIK TU Graz\n      *  Brian LaMacchia, Microsoft\n     \
    \ *  Peter Lipp, IAIK TU Graz\n      *  Joseph Reagle, W3C (Chair, Author/Editor)\n\
    \      *  Ed Simon, Entrust Technologies Inc. (Author)\n      *  David Solo, Citigroup\
    \ (Author/Editor)\n      *  Petteri Stenius, DONE Information, Ltd\n      *  Raghavan\
    \ Srinivas, Sun\n      *  Kent Tamura, IBM\n      *  Winchel Todd Vincent III,\
    \ GSU\n      *  Carl Wallace, Corsec Security, Inc.\n      *  Greg Whitehead,\
    \ Signio Inc.\n   As are the last call comments from the following:\n      * \
    \ Dan Connolly, W3C\n      *  Paul Biron, Kaiser Permanente, on behalf of the\
    \ XML Schema WG.\n      *  Martin J. Duerst, W3C; and Masahiro Sekiguchi, Fujitsu;\
    \ on\n         behalf of the Internationalization WG/IG.\n      *  Jonathan Marsh,\
    \ Microsoft, on behalf of the Extensible\n         Stylesheet Language WG.\n"
- title: 2.0 Signature Overview and Examples
  contents:
  - "2.0 Signature Overview and Examples\n   This section provides an overview and\
    \ examples of XML digital\n   signature syntax.  The specific processing is given\
    \ in Processing\n   Rules (section 3).  The formal syntax is found in Core Signature\n\
    \   Syntax (section 4) and Additional Signature Syntax (section 5).\n   In this\
    \ section, an informal representation and examples are used to\n   describe the\
    \ structure of the XML signature syntax.  This\n   representation and examples\
    \ may omit attributes, details and\n   potential features that are fully explained\
    \ later.\n   XML Signatures are applied to arbitrary digital content (data\n \
    \  objects) via an indirection.  Data objects are digested, the\n   resulting\
    \ value is placed in an element (with other information) and\n   that element\
    \ is then digested and cryptographically signed.  XML\n   digital signatures are\
    \ represented by the Signature element which has\n   the following structure (where\
    \ \"?\" denotes zero or one occurrence;\n   \"+\" denotes one or more occurrences;\
    \ and \"*\" denotes zero or more\n   occurrences):\n      <Signature>\n      \
    \  <SignedInfo>\n          (CanonicalizationMethod)\n          (SignatureMethod)\n\
    \          (<Reference (URI=)? >\n            (Transforms)?\n            (DigestMethod)\n\
    \            (DigestValue)\n          </Reference>)+\n        </SignedInfo>\n\
    \        (SignatureValue)\n       (KeyInfo)?\n       (Object)*\n      </Signature>\n\
    \   Signatures are related to data objects via URIs [URI].  Within an XML\n  \
    \ document, signatures are related to local data objects via fragment\n   identifiers.\
    \  Such local data can be included within an enveloping\n   signature or can enclose\
    \ an enveloped signature.  Detached signatures\n   are over external network resources\
    \ or local data objects that\n   resides within the same XML document as sibling\
    \ elements; in this\n   case, the signature is neither enveloping (signature is\
    \ parent) nor\n   enveloped (signature is child).  Since a Signature element (and\
    \ its\n   Id attribute value/name) may co-exist or be combined with other\n  \
    \ elements (and their IDs) within a single XML document, care should be\n   taken\
    \ in choosing names such that there are no subsequent collisions\n   that violate\
    \ the ID uniqueness validity constraint [XML].\n"
- title: 2.1 Simple Example (Signature, SignedInfo, Methods, and References)
  contents:
  - "2.1 Simple Example (Signature, SignedInfo, Methods, and References)\n   The following\
    \ example is a detached signature of the content of the\n   HTML4 in XML specification.\n"
- title: '[s01] <Signature Id="MyFirstSignature"'
  contents:
  - "[s01] <Signature Id=\"MyFirstSignature\"\n       xmlns=\"http://www.w3.org/2000/09/xmldsig#\"\
    >\n"
- title: '[s02]   <SignedInfo>'
  contents:
  - '[s02]   <SignedInfo>

    '
- title: '[s03]   <CanonicalizationMethod'
  contents:
  - "[s03]   <CanonicalizationMethod\n         Algorithm=\"http://www.w3.org/TR/2000/CR-xml-c14n-20001026\"\
    />\n"
- title: '[s04]   <SignatureMethod'
  contents:
  - "[s04]   <SignatureMethod\n         Algorithm=\"http://www.w3.org/2000/09/xmldsig#dsa-sha1\"\
    />\n"
- title: '[s05]   <Reference URI="http://www.w3.org/TR/2000/REC-xhtml1-20000126/">'
  contents:
  - '[s05]   <Reference URI="http://www.w3.org/TR/2000/REC-xhtml1-20000126/">

    '
- title: '[s06]     <Transforms>'
  contents:
  - '[s06]     <Transforms>

    '
- title: '[s07]       <Transform Algorithm="http://www.w3.org/TR/2000/'
  contents:
  - "[s07]       <Transform Algorithm=\"http://www.w3.org/TR/2000/\n             CR-xml-c14n-20001026\"\
    />\n"
- title: '[s08]     </Transforms>'
  contents:
  - '[s08]     </Transforms>

    '
- title: '[s09]     <DigestMethod Algorithm="http://www.w3.org/2000/09/'
  contents:
  - "[s09]     <DigestMethod Algorithm=\"http://www.w3.org/2000/09/\n           xmldsig#sha1\"\
    />\n"
- title: '[s10]     <DigestValue>j6lwx3rvEPO0vKtMup4NbeVu8nk=</DigestValue>'
  contents:
  - '[s10]     <DigestValue>j6lwx3rvEPO0vKtMup4NbeVu8nk=</DigestValue>

    '
- title: '[s11]   </Reference>'
  contents:
  - '[s11]   </Reference>

    '
- title: '[s12] </SignedInfo>'
  contents:
  - '[s12] </SignedInfo>

    '
- title: '[s13]   <SignatureValue>MC0CFFrVLtRlk=...</SignatureValue>'
  contents:
  - '[s13]   <SignatureValue>MC0CFFrVLtRlk=...</SignatureValue>

    '
- title: '[s14]   <KeyInfo>'
  contents:
  - '[s14]   <KeyInfo>

    '
- title: '[s15a]    <KeyValue>'
  contents:
  - '[s15a]    <KeyValue>

    '
- title: '[s15b]      <DSAKeyValue>'
  contents:
  - '[s15b]      <DSAKeyValue>

    '
- title: '[s15c]        <P>...</P><Q>...</Q><G>...</G><Y>...</Y>'
  contents:
  - '[s15c]        <P>...</P><Q>...</Q><G>...</G><Y>...</Y>

    '
- title: '[s15d]      </DSAKeyValue>'
  contents:
  - '[s15d]      </DSAKeyValue>

    '
- title: '[s15e]    </KeyValue>'
  contents:
  - '[s15e]    </KeyValue>

    '
- title: '[s16]   </KeyInfo>'
  contents:
  - '[s16]   </KeyInfo>

    '
- title: '[s17] </Signature>'
  contents:
  - "[s17] </Signature>\n   [s02-12] The required SignedInfo element is the information\
    \ that is\n   actually signed.  Core validation of SignedInfo consists of two\n\
    \   mandatory processes: validation of the signature over SignedInfo and\n   validation\
    \ of each Reference digest within SignedInfo.  Note that the\n   algorithms used\
    \ in calculating the SignatureValue are also included\n   in the signed information\
    \ while the SignatureValue element is outside\n   SignedInfo.\n   [s03] The CanonicalizationMethod\
    \ is the algorithm that is used to\n   canonicalize the SignedInfo element before\
    \ it is digested as part of\n   the signature operation.\n   [s04] The SignatureMethod\
    \ is the algorithm that is used to convert\n   the canonicalized SignedInfo into\
    \ the SignatureValue.  It is a\n   combination of a digest algorithm and a key\
    \ dependent algorithm and\n   possibly other algorithms such as padding, for example\
    \ RSA-SHA1.  The\n   algorithm names are signed to resist attacks based on substituting\
    \ a\n   weaker algorithm.  To promote application interoperability we specify\n\
    \   a set of signature algorithms that MUST be implemented, though their\n   use\
    \ is at the discretion of the signature creator.  We specify\n   additional algorithms\
    \ as RECOMMENDED or OPTIONAL for implementation\n   and the signature design permits\
    \ arbitrary user algorithm\n   specification.\n   [s05-11] Each Reference element\
    \ includes the digest method and\n   resulting digest value calculated over the\
    \ identified data object.\n   It also may include transformations that produced\
    \ the input to the\n   digest operation.  A data object is signed by computing\
    \ its digest\n   value and a signature over that value.  The signature is later\n\
    \   checked via reference and signature validation.\n   [s14-16] KeyInfo indicates\
    \ the key to be used to validate the\n   signature.  Possible forms for identification\
    \ include certificates,\n   key names, and key agreement algorithms and information\
    \ -- we define\n   only a few.  KeyInfo is optional for two reasons.  First, the\
    \ signer\n   may not wish to reveal key information to all document processing\n\
    \   parties.  Second, the information may be known within the\n   application's\
    \ context and need not be represented explicitly.  Since\n   KeyInfo is outside\
    \ of SignedInfo, if the signer wishes to bind the\n   keying information to the\
    \ signature, a Reference can easily identify\n   and include the KeyInfo as part\
    \ of the signature.\n"
- title: 2.1.1 More on Reference
  contents:
  - '2.1.1 More on Reference

    '
- title: '[s05]   <Reference URI="http://www.w3.org/TR/2000/REC-xhtml1-20000126/">'
  contents:
  - '[s05]   <Reference URI="http://www.w3.org/TR/2000/REC-xhtml1-20000126/">

    '
- title: '[s06]     <Transforms>'
  contents:
  - '[s06]     <Transforms>

    '
- title: '[s07]       <Transform'
  contents:
  - "[s07]       <Transform\n             Algorithm=\"http://www.w3.org/TR/2000/\n\
    \             CR-xml-c14n-20001026\"/>\n"
- title: '[s08]     </Transforms>'
  contents:
  - '[s08]     </Transforms>

    '
- title: '[s09]     <DigestMethod Algorithm="http://www.w3.org/2000/09/'
  contents:
  - "[s09]     <DigestMethod Algorithm=\"http://www.w3.org/2000/09/\n           xmldsig#sha1\"\
    />\n"
- title: '[s10]     <DigestValue>j6lwx3rvEPO0vKtMup4NbeVu8nk=</DigestValue>'
  contents:
  - '[s10]     <DigestValue>j6lwx3rvEPO0vKtMup4NbeVu8nk=</DigestValue>

    '
- title: '[s11]   </Reference>'
  contents:
  - "[s11]   </Reference>\n   [s05] The optional URI attribute of Reference identifies\
    \ the data\n   object to be signed.  This attribute may be omitted on at most\
    \ one\n   Reference in a Signature.  (This limitation is imposed in order to\n\
    \   ensure that references and objects may be matched unambiguously.)\n   [s05-08]\
    \ This identification, along with the transforms, is a\n   description provided\
    \ by the signer on how they obtained the signed\n   data object in the form it\
    \ was digested (i.e., the digested content).\n   The verifier may obtain the digested\
    \ content in another method so\n   long as the digest verifies.  In particular,\
    \ the verifier may obtain\n   the content from a different location such as a\
    \ local store than that\n   specified in the URI.\n   [s06-08] Transforms is an\
    \ optional ordered list of processing steps\n   that were applied to the resource's\
    \ content before it was digested.\n   Transforms can include operations such as\
    \ canonicalization,\n   encoding/decoding (including compression/inflation), XSLT\
    \ and XPath.\n   XPath transforms permit the signer to derive an XML document\
    \ that\n   omits portions of the source document.  Consequently those excluded\n\
    \   portions can change without affecting signature validity.  For\n   example,\
    \ if the resource being signed encloses the signature itself,\n   such a transform\
    \ must be used to exclude the signature value from its\n   own computation.  If\
    \ no Transforms element is present, the resource's\n   content is digested directly.\
    \  While we specify mandatory (and\n   optional) canonicalization and decoding\
    \ algorithms, user specified\n   transforms are permitted.\n   [s09-10] DigestMethod\
    \ is the algorithm applied to the data after\n   Transforms is applied (if specified)\
    \ to yield the DigestValue.  The\n   signing of the DigestValue is what binds\
    \ a resources content to the\n   signer's key.\n"
- title: 2.2 Extended Example (Object and SignatureProperty)
  contents:
  - "2.2 Extended Example (Object and SignatureProperty)\n   This specification does\
    \ not address mechanisms for making statements\n   or assertions.  Instead, this\
    \ document defines what it means for\n   something to be signed by an XML Signature\
    \ (message authentication,\n   integrity, and/or signer authentication).  Applications\
    \ that wish to\n   represent other semantics must rely upon other technologies,\
    \ such as\n   [XML, RDF].  For instance, an application might use a foo:assuredby\n\
    \   attribute within its own markup to reference a Signature element.\n   Consequently,\
    \ it's the application that must understand and know how\n   to make trust decisions\
    \ given the validity of the signature and the\n   meaning of assuredby syntax.\
    \  We also define a SignatureProperties\n   element type for the inclusion of\
    \ assertions about the signature\n   itself (e.g., signature semantics, the time\
    \ of signing or the serial\n   number of hardware used in cryptographic processes).\
    \  Such assertions\n   may be signed by including a Reference for the SignatureProperties\
    \ in\n   SignedInfo.  While the signing application should be very careful\n \
    \  about what it signs (it should understand what is in the\n   SignatureProperty)\
    \ a receiving application has no obligation to\n   understand that semantic (though\
    \ its parent trust engine may wish\n   to).  Any content about the signature generation\
    \ may be located\n   within the SignatureProperty element.  The mandatory Target\
    \ attribute\n   references the Signature element to which the property applies.\n\
    \   Consider the preceding example with an additional reference to a\n   local\
    \ Object that includes a SignatureProperty element.  (Such a\n   signature would\
    \ not only be detached [p02] but enveloping [p03].)\n"
- title: '[   ]  <Signature Id="MySecondSignature" ...>'
  contents:
  - '[   ]  <Signature Id="MySecondSignature" ...>

    '
- title: '[p01]  <SignedInfo>'
  contents:
  - '[p01]  <SignedInfo>

    '
- title: '[   ]   ...'
  contents:
  - '[   ]   ...

    '
- title: '[p02]   <Reference URI="http://www.w3.org/TR/xml-stylesheet/">'
  contents:
  - '[p02]   <Reference URI="http://www.w3.org/TR/xml-stylesheet/">

    '
- title: '[   ]   ...'
  contents:
  - '[   ]   ...

    '
- title: '[p03]   <Reference URI="#AMadeUpTimeStamp"'
  contents:
  - '[p03]   <Reference URI="#AMadeUpTimeStamp"

    '
- title: '[p04]         Type="http://www.w3.org/2000/09/'
  contents:
  - "[p04]         Type=\"http://www.w3.org/2000/09/\n                    xmldsig#SignatureProperties\"\
    >\n"
- title: '[p05]    <DigestMethod Algorithm="http://www.w3.org/2000/09/'
  contents:
  - "[p05]    <DigestMethod Algorithm=\"http://www.w3.org/2000/09/\n          xmldsig#sha1\"\
    />\n"
- title: '[p06]    <DigestValue>k3453rvEPO0vKtMup4NbeVu8nk=</DigestValue>'
  contents:
  - '[p06]    <DigestValue>k3453rvEPO0vKtMup4NbeVu8nk=</DigestValue>

    '
- title: '[p07]   </Reference>'
  contents:
  - '[p07]   </Reference>

    '
- title: '[p08]  </SignedInfo>'
  contents:
  - '[p08]  </SignedInfo>

    '
- title: '[p09]  ...'
  contents:
  - '[p09]  ...

    '
- title: '[p10]  <Object>'
  contents:
  - '[p10]  <Object>

    '
- title: '[p11]   <SignatureProperties>'
  contents:
  - '[p11]   <SignatureProperties>

    '
- title: '[p12]     <SignatureProperty Id="AMadeUpTimeStamp"'
  contents:
  - "[p12]     <SignatureProperty Id=\"AMadeUpTimeStamp\"\n           Target=\"#MySecondSignature\"\
    >\n"
- title: '[p13]        <timestamp xmlns="http://www.ietf.org/rfc3075.txt">'
  contents:
  - '[p13]        <timestamp xmlns="http://www.ietf.org/rfc3075.txt">

    '
- title: '[p14]          <date>19990908</date>'
  contents:
  - '[p14]          <date>19990908</date>

    '
- title: '[p15]          <time>14:34:34:34</time>'
  contents:
  - '[p15]          <time>14:34:34:34</time>

    '
- title: '[p16]        </timestamp>'
  contents:
  - '[p16]        </timestamp>

    '
- title: '[p17]     </SignatureProperty>'
  contents:
  - '[p17]     </SignatureProperty>

    '
- title: '[p18]   </SignatureProperties>'
  contents:
  - '[p18]   </SignatureProperties>

    '
- title: '[p19]  </Object>'
  contents:
  - '[p19]  </Object>

    '
- title: '[p20]</Signature>'
  contents:
  - "[p20]</Signature>\n   [p04] The optional Type attribute of Reference provides\
    \ information\n   about the resource identified by the URI.  In particular, it\
    \ can\n   indicate that it is an Object, SignatureProperty, or Manifest\n   element.\
    \  This can be used by applications to initiate special\n   processing of some\
    \ Reference elements.  References to an XML data\n   element within an Object\
    \ element SHOULD identify the actual element\n   pointed to.  Where the element\
    \ content is not XML (perhaps it is\n   binary or encoded data) the reference\
    \ should identify the Object and\n   the Reference Type, if given, SHOULD indicate\
    \ Object.  Note that Type\n   is advisory and no action based on it or checking\
    \ of its correctness\n   is required by core behavior.\n   [p10] Object is an\
    \ optional element for including data objects within\n   the signature element\
    \ or elsewhere.  The Object can be optionally\n   typed and/or encoded.\n   [p11-18]\
    \ Signature properties, such as time of signing, can be\n   optionally signed\
    \ by identifying them from within a Reference.\n   (These properties are traditionally\
    \ called signature \"attributes\"\n   although that term has no relationship to\
    \ the XML term \"attribute\".)\n"
- title: 2.3 Extended Example (Object and Manifest)
  contents:
  - "2.3 Extended Example (Object and Manifest)\n   The Manifest element is provided\
    \ to meet additional requirements not\n   directly addressed by the mandatory\
    \ parts of this specification.  Two\n   requirements and the way the Manifest\
    \ satisfies them follows.\n   First, applications frequently need to efficiently\
    \ sign multiple data\n   objects even where the signature operation itself is\
    \ an expensive\n   public key signature.  This requirement can be met by including\n\
    \   multiple Reference elements within SignedInfo since the inclusion of\n   each\
    \ digest secures the data digested.  However, some applications\n   may not want\
    \ the core validation behavior associated with this\n   approach because it requires\
    \ every Reference within SignedInfo to\n   undergo reference validation -- the\
    \ DigestValue elements are checked.\n   These applications may wish to reserve\
    \ reference validation decision\n   logic to themselves.  For example, an application\
    \ might receive a\n   signature valid SignedInfo element that includes three Reference\n\
    \   elements.  If a single Reference fails (the identified data object\n   when\
    \ digested does not yield the specified DigestValue) the signature\n   would fail\
    \ core validation.  However, the application may wish to\n   treat the signature\
    \ over the two valid Reference elements as valid or\n   take different actions\
    \ depending on which fails.  To accomplish this,\n   SignedInfo would reference\
    \ a Manifest element that contains one or\n   more Reference elements (with the\
    \ same structure as those in\n   SignedInfo).  Then, reference validation of the\
    \ Manifest is under\n   application control.\n   Second, consider an application\
    \ where many signatures (using\n   different keys) are applied to a large number\
    \ of documents.  An\n   inefficient solution is to have a separate signature (per\
    \ key)\n   repeatedly applied to a large SignedInfo element (with many\n   References);\
    \ this is wasteful and redundant.  A more efficient\n   solution is to include\
    \ many references in a single Manifest that is\n   then referenced from multiple\
    \ Signature elements.\n   The example below includes a Reference that signs a\
    \ Manifest found\n   within the Object element.\n"
- title: '[   ] ...'
  contents:
  - '[   ] ...

    '
- title: '[m01]   <Reference URI="#MyFirstManifest"'
  contents:
  - '[m01]   <Reference URI="#MyFirstManifest"

    '
- title: '[m02]     Type="http://www.w3.org/2000/09/xmldsig#Manifest">'
  contents:
  - '[m02]     Type="http://www.w3.org/2000/09/xmldsig#Manifest">

    '
- title: '[m03]     <DigestMethod Algorithm="http://www.w3.org/2000/09/'
  contents:
  - "[m03]     <DigestMethod Algorithm=\"http://www.w3.org/2000/09/\n           xmldsig#sha1\"\
    />\n"
- title: '[m04]     <DigestValue>345x3rvEPO0vKtMup4NbeVu8nk=</DigestValue>'
  contents:
  - '[m04]     <DigestValue>345x3rvEPO0vKtMup4NbeVu8nk=</DigestValue>

    '
- title: '[m05]   </Reference>'
  contents:
  - '[m05]   </Reference>

    '
- title: '[   ] ...'
  contents:
  - '[   ] ...

    '
- title: '[m06] <Object>'
  contents:
  - '[m06] <Object>

    '
- title: '[m07]   <Manifest Id="MyFirstManifest">'
  contents:
  - '[m07]   <Manifest Id="MyFirstManifest">

    '
- title: '[m08]     <Reference>'
  contents:
  - '[m08]     <Reference>

    '
- title: '[m09]     ...'
  contents:
  - '[m09]     ...

    '
- title: '[m10]     </Reference>'
  contents:
  - '[m10]     </Reference>

    '
- title: '[m11]     <Reference>'
  contents:
  - '[m11]     <Reference>

    '
- title: '[m12]     ...'
  contents:
  - '[m12]     ...

    '
- title: '[m13]     </Reference>'
  contents:
  - '[m13]     </Reference>

    '
- title: '[m14]   </Manifest>'
  contents:
  - '[m14]   </Manifest>

    '
- title: '[m15] </Object>'
  contents:
  - '[m15] </Object>

    '
- title: 3.0 Processing Rules
  contents:
  - "3.0 Processing Rules\n   The sections below describe the operations to be performed\
    \ as part of\n   signature generation and validation.\n"
- title: 3.1 Core Generation
  contents:
  - "3.1 Core Generation\n   The REQUIRED steps include the generation of Reference\
    \ elements and\n   the SignatureValue over SignedInfo.\n"
- title: 3.1.1 Reference Generation
  contents:
  - "3.1.1 Reference Generation\n   For each data object being signed:\n   1. Apply\
    \ the Transforms, as determined by the application, to the\n      data object.\n\
    \   2. Calculate the digest value over the resulting data object.\n   3. Create\
    \ a Reference element, including the (optional)\n      identification of the data\
    \ object, any (optional) transform\n      elements, the digest algorithm and the\
    \ DigestValue.\n"
- title: 3.1.2 Signature Generation
  contents:
  - "3.1.2 Signature Generation\n   1. Create SignedInfo element with SignatureMethod,\n\
    \      CanonicalizationMethod and Reference(s).\n   2. Canonicalize and then calculate\
    \ the SignatureValue over SignedInfo\n      based on algorithms specified in SignedInfo.\n\
    \   3. Construct the Signature element that includes SignedInfo,\n      Object(s)\
    \ (if desired, encoding may be different than that used\n      for signing), KeyInfo\
    \ (if required), and SignatureValue.\n"
- title: 3.2 Core Validation
  contents:
  - "3.2 Core Validation\n   The REQUIRED steps of core validation include (1) reference\n\
    \   validation, the verification of the digest contained in each\n   Reference\
    \ in SignedInfo, and (2) the cryptographic signature\n   validation of the signature\
    \ calculated over SignedInfo.\n   Note, there may be valid signatures that some\
    \ signature applications\n   are unable to validate.  Reasons for this include\
    \ failure to\n   implement optional parts of this specification, inability or\n\
    \   unwillingness to execute specified algorithms, or inability or\n   unwillingness\
    \ to dereference specified URIs (some URI schemes may\n   cause undesirable side\
    \ effects), etc.\n"
- title: 3.2.1 Reference Validation
  contents:
  - "3.2.1 Reference Validation\n   For each Reference in SignedInfo:\n   1. Canonicalize\
    \ the SignedInfo element based on the\n      CanonicalizationMethod in SignedInfo.\n\
    \   2. Obtain the data object to be digested.  (The signature application\n  \
    \    may rely upon the identification (URI) and Transforms provided by\n     \
    \ the signer in the Reference element, or it may obtain the content\n      through\
    \ other means such as a local cache.)\n   3. Digest the resulting data object\
    \ using the DigestMethod specified\n      in its Reference specification.\n  \
    \ 4. Compare the generated digest value against DigestValue in the\n      SignedInfo\
    \ Reference; if there is any mismatch, validation fails.\n   Note, SignedInfo\
    \ is canonicalized in step 1 to ensure the application\n   Sees What is Signed,\
    \ which is the canonical form.  For instance, if\n   the CanonicalizationMethod\
    \ rewrote the URIs (e.g., absolutizing\n   relative URIs) the signature processing\
    \ must be cognizant of this.\n"
- title: 3.2.2 Signature Validation
  contents:
  - "3.2.2 Signature Validation\n   1. Obtain the keying information from KeyInfo\
    \ or from an external\n      source.\n   2. Obtain the canonical form of the SignatureMethod\
    \ using  the\n      CanonicalizationMethod and use the result (and previously\
    \ obtained\n      KeyInfo) to validate the SignatureValue over the SignedInfo\n\
    \      element.\n   Note, KeyInfo (or some transformed version thereof) may be\
    \ signed via\n   a Reference element.  Transformation and validation of this reference\n\
    \   (3.2.1) is orthogonal to Signature Validation which uses the KeyInfo\n   as\
    \ parsed.\n   Additionally, the SignatureMethod URI may have been altered by the\n\
    \   canonicalization of SignedInfo (e.g., absolutization of relative\n   URIs)\
    \ and it is the canonical form that MUST be used.  However, the\n   required canonicalization\
    \ [XML-C14N] of this specification does not\n   change URIs.\n"
- title: 4.0 Core Signature Syntax
  contents:
  - "4.0 Core Signature Syntax\n   The general structure of an XML signature is described\
    \ in Signature\n   Overview (section 2).  This section provides detailed syntax\
    \ of the\n   core signature features.  Features described in this section are\n\
    \   mandatory to implement unless otherwise indicated.  The syntax is\n   defined\
    \ via DTDs and [XML-Schema] with the following XML preamble,\n   declaration,\
    \ internal entity, and simpleType:\n   Schema Definition:\n"
- title: <!DOCTYPE schema
  contents:
  - "<!DOCTYPE schema\n   PUBLIC \"-//W3C//DTD XMLSCHEMA 200010//EN\"\n          \"\
    http://www.w3.org/2000/10/XMLSchema.dtd\"\n  [\n   <!ATTLIST schema\n     xmlns:ds\
    \ CDATA #FIXED \"http://www.w3.org/2000/09/xmldsig#\">\n   <!ENTITY dsig 'http://www.w3.org/2000/09/xmldsig#'>\n\
    \  ]>\n"
- title: <schema xmlns="http://www.w3.org/2000/10/XMLSchema"
  contents:
  - "<schema xmlns=\"http://www.w3.org/2000/10/XMLSchema\"\n      xmlns:ds=\"&dsig;\"\
    \n      targetNamespace=\"&dsig;\"\n      version=\"0.1\"\n      elementFormDefault=\"\
    qualified\">\n"
- title: <!-- Basic Types Defined for Signatures -->
  contents:
  - '<!-- Basic Types Defined for Signatures -->

    '
- title: <simpleType name="CryptoBinary">
  contents:
  - "<simpleType name=\"CryptoBinary\">\n  <restriction base=\"binary\">\n   <encoding\
    \ value=\"base64\"/>\n  </restriction>\n"
- title: </simpleType>
  contents:
  - '</simpleType>

    '
- title: 'DTD:'
  contents:
  - 'DTD:

    '
- title: <!-- These entity declarations permit the flexible parts of Signature
  contents:
  - "<!-- These entity declarations permit the flexible parts of Signature\n     content\
    \ model to be easily expanded -->\n"
- title: <!ENTITY % Object.ANY '(#PCDATA|Signature|SignatureProperties|
  contents:
  - "<!ENTITY % Object.ANY '(#PCDATA|Signature|SignatureProperties|\n            \
    \            Manifest)*'>\n"
- title: <!ENTITY % Method.ANY '(#PCDATA|HMACOutputLength)*'>
  contents:
  - '<!ENTITY % Method.ANY ''(#PCDATA|HMACOutputLength)*''>

    '
- title: <!ENTITY % Transform.ANY '(#PCDATA|XPath|XSLT)'>
  contents:
  - '<!ENTITY % Transform.ANY ''(#PCDATA|XPath|XSLT)''>

    '
- title: <!ENTITY % SignatureProperty.ANY '(#PCDATA)*'>
  contents:
  - '<!ENTITY % SignatureProperty.ANY ''(#PCDATA)*''>

    '
- title: <!ENTITY % Key.ANY '(#PCDATA|KeyName|KeyValue|RetrievalMethod|
  contents:
  - "<!ENTITY % Key.ANY '(#PCDATA|KeyName|KeyValue|RetrievalMethod|\n           X509Data|PGPData|MgmtData|DSAKeyValue|RSAKeyValue)*'>\n"
- title: 4.1 The Signature element
  contents:
  - "4.1 The Signature element\n   The Signature element is the root element of an\
    \ XML Signature.\n   Signature elements MUST be laxly schema valid [XML-schema]\
    \ with\n   respect to the following schema definition:\n   Schema Definition:\n"
- title: <element name="Signature">
  contents:
  - "<element name=\"Signature\">\n  <complexType>\n    <sequence>\n      <element\
    \ ref=\"ds:SignedInfo\"/>\n      <element ref=\"ds:SignatureValue\"/>\n      <element\
    \ ref=\"ds:KeyInfo\" minOccurs=\"0\"/>\n      <element ref=\"ds:Object\" minOccurs=\"\
    0\" maxOccurs=\"unbounded\"/>\n    </sequence>\n    <attribute name=\"Id\" type=\"\
    ID\" use=\"optional\"/>\n  </complexType>\n"
- title: </element>
  contents:
  - '</element>

    '
- title: 'DTD:'
  contents:
  - 'DTD:

    '
- title: <!ELEMENT Signature (SignedInfo, SignatureValue, KeyInfo?, Object*)  >
  contents:
  - '<!ELEMENT Signature (SignedInfo, SignatureValue, KeyInfo?, Object*)  >

    '
- title: <!ATTLIST Signature
  contents:
  - "<!ATTLIST Signature\n          xmlns  CDATA   #FIXED 'http://www.w3.org/2000/09/xmldsig#'\n\
    \          Id     ID  #IMPLIED >\n"
- title: 4.2 The SignatureValue Element
  contents:
  - "4.2 The SignatureValue Element\n   The SignatureValue element contains the actual\
    \ value of the digital\n   signature; it is always encoded using base64 [MIME].\
    \  While we\n   specify a mandatory and optional to implement SignatureMethod\n\
    \   algorithms, user specified algorithms are permitted.  Schema\n   Definition:\n\
    \   <element name=\"SignatureValue\" type=\"ds:CryptoBinary\"/>\n   DTD:\n   <!ELEMENT\
    \ SignatureValue (#PCDATA) >\n"
- title: 4.3 The SignedInfo Element
  contents:
  - "4.3 The SignedInfo Element\n   The structure of SignedInfo includes the canonicalization\
    \ algorithm,\n   a signature algorithm, and one or more references.  The SignedInfo\n\
    \   element may contain an optional ID attribute that will allow it to be\n  \
    \ referenced by other signatures and objects.\n   SignedInfo does not include\
    \ explicit signature or digest properties\n   (such as calculation time, cryptographic\
    \ device serial number, etc.).\n   If an application needs to associate properties\
    \ with the signature or\n   digest, it may include such information in a SignatureProperties\n\
    \   element within an Object element.\n   Schema Definition:\n      <element name=\"\
    SignedInfo\">\n        <complexType>\n          <sequence>\n            <element\
    \ ref=\"ds:CanonicalizationMethod\"/>\n            <element ref=\"ds:SignatureMethod\"\
    />\n            <element ref=\"ds:Reference\" maxOccurs=\"unbounded\"/>\n    \
    \      </sequence>\n        <attribute name=\"Id\" type=\"ID\" use=\"optional\"\
    />\n        </complexType>\n      </element>\n      DTD:\n      <!ELEMENT SignedInfo\
    \ (CanonicalizationMethod,\n             SignatureMethod,  Reference+)  >\n  \
    \ <!ATTLIST SignedInfo\n             Id  ID      #IMPLIED>\n"
- title: 4.3.1 The CanonicalizationMethod Element
  contents:
  - "4.3.1 The CanonicalizationMethod Element\n   CanonicalizationMethod is a required\
    \ element that specifies the\n   canonicalization algorithm applied to the SignedInfo\
    \ element prior to\n   performing signature calculations.  This element uses the\
    \ general\n   structure for algorithms described in Algorithm Identifiers and\n\
    \   Implementation Requirements (section 6.1).  Implementations MUST\n   support\
    \ the REQUIRED Canonical XML [XML-C14N] method.\n   Alternatives to the REQUIRED\
    \ Canonical XML algorithm (section 6.5.2),\n   such as Canonical XML with Comments\
    \ (section 6.5.2) and Minimal\n   Canonicalization (the CRLF and charset normalization\
    \ specified in\n   section 6.5.1), may be explicitly specified but are NOT REQUIRED.\n\
    \   Consequently, their use may not interoperate with other applications\n   that\
    \ do no support the specified algorithm (see XML Canonicalization\n   and Syntax\
    \ Constraint Considerations, section 7).  Security issues\n   may also arise in\
    \ the treatment of entity processing and comments if\n   minimal or other non-XML\
    \ aware canonicalization algorithms are not\n   properly constrained (see section\
    \ 8.2: Only What is \"Seen\" Should be\n   Signed).\n   The way in which the SignedInfo\
    \ element is presented to the\n   canonicalization method is dependent on that\
    \ method.  The following\n   applies to the two types of algorithms specified\
    \ by this document:\n      *  Canonical XML [XML-C14N] (with or without comments)\n\
    \         implementation MUST be provided with an XPath node-set\n         originally\
    \ formed from the document containing the SignedInfo\n         and currently indicating\
    \ the SignedInfo, its descendants, and\n         the attribute and namespace nodes\
    \ of SignedInfo and its\n         descendant elements (such that the namespace\
    \ context and\n         similar ancestor information of the SignedInfo is preserved).\n\
    \      *  Minimal canonicalization implementations MUST be provided with\n   \
    \      the octets that represent the well-formed SignedInfo element,\n       \
    \  from the first character to the last character of the XML\n         representation,\
    \ inclusive.  This includes the entire text of\n         the start and end tags\
    \ of the SignedInfo element as well as all\n         descendant markup and character\
    \ data (i.e., the text) between\n         those tags.\n   We RECOMMEND that resource\
    \ constrained applications that do not\n   implement the Canonical XML [XML-C14N]\
    \ algorithm and instead choose\n   minimal canonicalization (or some other form)\
    \ be implemented to\n   generate Canonical XML as their output serialization so\
    \ as to easily\n   mitigate some of these interoperability and security concerns.\n\
    \   (While a result might not be the canonical form of the original, it\n   can\
    \ still be in canonical form.)  For instance, such an\n   implementation SHOULD\
    \ (at least) generate standalone XML instances\n   [XML].\n   Schema Definition:\n\
    \   <element name=\"CanonicalizationMethod\">\n     <complexType>\n       <sequence>\n\
    \         <any namespace=\"##any\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n\
    \       </sequence>\n       <attribute name=\"Algorithm\" type=\"uriReference\"\
    \ use=\"required\"/>\n     </complexType>\n   </element>\n   DTD:\n   <!ELEMENT\
    \ CanonicalizationMethod %Method.ANY; >\n   <!ATTLIST CanonicalizationMethod\n\
    \             Algorithm CDATA #REQUIRED >\n"
- title: 4.3.2 The SignatureMethod Element
  contents:
  - "4.3.2 The SignatureMethod Element\n   SignatureMethod is a required element that\
    \ specifies the algorithm\n   used for signature generation and validation.  This\
    \ algorithm\n   identifies all cryptographic functions involved in the signature\n\
    \   operation (e.g., hashing, public key algorithms, MACs, padding,\n   etc.).\
    \  This element uses the general structure here for algorithms\n   described in\
    \ section 6.1: Algorithm Identifiers and Implementation\n   Requirements.  While\
    \ there is a single identifier, that identifier\n   may specify a format containing\
    \ multiple distinct signature values.\n   Schema Definition:\n   <element name=\"\
    SignatureMethod\">\n     <complexType>\n       <sequence>\n         <any namespace=\"\
    ##any\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n       </sequence>\n      \
    \ <attribute name=\"Algorithm\" type=\"uriReference\" use=\"required\"/>\n   \
    \   </complexType>\n   </element>\n   DTD:\n   <!ELEMENT SignatureMethod %Method.ANY;\
    \ >\n   <!ATTLIST SignatureMethod\n             Algorithm CDATA #REQUIRED >\n"
- title: 4.3.3 The Reference Element
  contents:
  - "4.3.3 The Reference Element\n   Reference is an element that may occur one or\
    \ more times.  It\n   specifies a digest algorithm and digest value, and optionally\
    \ an\n   identifier of the object being signed, the type of the object, and/or\n\
    \   a list of transforms to be applied prior to digesting.  The\n   identification\
    \ (URI) and transforms describe how the digested content\n   (i.e., the input\
    \ to the digest method) was created.  The Type\n   attribute facilitates the processing\
    \ of referenced data.  For\n   example, while this specification makes no requirements\
    \ over external\n   data, an application may wish to signal that the referent\
    \ is a\n   Manifest.  An optional ID attribute permits a Reference to be\n   referenced\
    \ from elsewhere.\n   Schema Definition:\n   <element name=\"Reference\">\n  \
    \   <complexType>\n       <sequence>\n         <element ref=\"ds:Transforms\"\
    \ minOccurs=\"0\"/>\n         <element ref=\"ds:DigestMethod\"/>\n         <element\
    \ ref=\"ds:DigestValue\"/>\n       </sequence>\n       <attribute name=\"Id\"\
    \ type=\"ID\" use=\"optional\"/>\n       <attribute name=\"URI\" type=\"uriReference\"\
    \ use=\"optional\"/>\n       <attribute name=\"Type\" type=\"uriReference\" use=\"\
    optional\"/>\n     </complexType>\n   </element>\n   DTD:\n   <!ELEMENT Reference\
    \ (Transforms?, DigestMethod, DigestValue)  >\n   <!ATTLIST Reference\n      \
    \       Id     ID  #IMPLIED\n             URI    CDATA   #IMPLIED\n          \
    \   Type   CDATA   #IMPLIED >\n"
- title: 4.3.3.1 The URI Attribute
  contents:
  - "4.3.3.1 The URI Attribute\n   The URI attribute identifies a data object using\
    \ a URI-Reference, as\n   specified by RFC2396 [URI].  The set of allowed characters\
    \ for URI\n   attributes is the same as for XML, namely [Unicode].  However, some\n\
    \   Unicode characters are disallowed from URI references including all\n   non-ASCII\
    \ characters and the excluded characters listed in RFC2396\n   [URI, section 2.4].\
    \  However, the number sign (#), percent sign (%),\n   and square bracket characters\
    \ re-allowed in RFC 2732 [URI-Literal]\n   are permitted.  Disallowed characters\
    \ must be escaped as follows:\n   1. Each disallowed character is converted to\
    \ [UTF-8] as one or more\n      bytes.\n   2. Any octets corresponding to a disallowed\
    \ character are escaped\n      with the URI escaping mechanism (that is, converted\
    \ to %HH, where\n      HH is the hexadecimal notation of the byte value).\n  \
    \ 3. The original character is replaced by the resulting character\n      sequence.\n\
    \   XML signature applications MUST be able to parse URI syntax.  We\n   RECOMMEND\
    \ they be able to dereference URIs in the HTTP scheme.\n   Dereferencing a URI\
    \ in the HTTP scheme MUST comply with the Status\n   Code Definitions of [HTTP]\
    \ (e.g., 302, 305 and 307 redirects are\n   followed to obtain the entity-body\
    \ of a 200 status code response).\n   Applications should also be cognizant of\
    \ the fact that protocol\n   parameter and state information, (such as a HTTP\
    \ cookies, HTML device\n   profiles or content negotiation), may affect the content\
    \ yielded by\n   dereferencing a URI.\n   If a resource is identified by more\
    \ than one URI, the most specific\n   should be used (e.g.  http://www.w3.org/2000/06/interop-\n\
    \   pressrelease.html.en instead of http://www.w3.org/2000/06/interop-\n   pressrelease).\
    \  (See the Reference Validation (section 3.2.1) for a\n   further information\
    \ on reference processing.)\n   If the URI attribute is omitted altogether, the\
    \ receiving application\n   is expected to know the identity of the object.  For\
    \ example, a\n   lightweight data protocol might omit this attribute given the\n\
    \   identity of the object is part of the application context.  This\n   attribute\
    \ may be omitted from at most one Reference in any particular\n   SignedInfo,\
    \ or Manifest.\n   The optional Type attribute contains information about the\
    \ type of\n   object being signed.  This is represented as a URI.  For example:\n\
    \   Type=\"http://www.w3.org/2000/09/xmldsig#Object\"\n   Type=\"http://www.w3.org/2000/09/xmldsig#Manifest\"\
    \n   The Type attribute applies to the item being pointed at, not its\n   contents.\
    \  For example, a reference that identifies an Object element\n   containing a\
    \ SignatureProperties element is still of type #Object.\n   The type attribute\
    \ is advisory.  No validation of the type\n   information is required by this\
    \ specification.\n"
- title: 4.3.3.2 The Reference Processing Model
  contents:
  - "4.3.3.2 The Reference Processing Model\n   Note: XPath is RECOMMENDED.  Signature\
    \ applications need not conform\n   to [XPath] specification in order to conform\
    \ to this specification.\n   However, the XPath data model, definitions (e.g.,\
    \ node-sets) and\n   syntax is used within this document in order to describe\n\
    \   functionality for those that want to process XML-as-XML (instead of\n   octets)\
    \ as part of signature generation.  For those that want to use\n   these features,\
    \ a conformant [XPath] implementation is one way to\n   implement these features,\
    \ but it is not required.  Such applications\n   could use a sufficiently functional\
    \ replacement to a node-set and\n   implement only those XPath expression behaviors\
    \ REQUIRED by this\n   specification.  However, for simplicity we generally will\
    \ use XPath\n   terminology without including this qualification on every point.\n\
    \   Requirements over \"XPath nodesets\" can include a node-set functional\n \
    \  equivalent.  Requirements over XPath processing can include\n   application\
    \ behaviors that are equivalent to the corresponding XPath\n   behavior.\n   The\
    \ data-type of the result of URI dereferencing or subsequent\n   Transforms is\
    \ either an octet stream or an XPath node-set.\n   The Transforms specified in\
    \ this document are defined with respect to\n   the input they require.  The following\
    \ is the default signature\n   application behavior:\n      *  If the data object\
    \ is a an octet stream and the next\n         transformrequires a node-set, the\
    \ signature application MUST\n         attempt to parse the octets.\n      * \
    \ If the data object is a node-set and the next transformrequires\n         octets,\
    \ the signature application MUST attempt to convert the\n         node-set to\
    \ an octet stream using the REQUIRED canonicalization\n         algorithm [XML-C14N].\n\
    \   Users may specify alternative transforms that over-ride these\n   defaults\
    \ in transitions between Transforms that expect different\n   inputs.  The final\
    \ octet stream contains the data octets being\n   secured.  The digest algorithm\
    \ specified by DigestMethod is then\n   applied to these data octets, resulting\
    \ in the DigestValue.\n   Unless the URI-Reference is a 'same-document' reference\
    \ as defined in\n   [URI, Section 4.2], the result of dereferencing the URI-Reference\n\
    \   MUST be an octet stream.  In particular, an XML document identified\n   by\
    \ URI is not parsed by the signature application unless the URI is a\n   same-document\
    \ reference or unless a transformthat requires XML\n   parsing is applied (See\
    \ Transforms (section 4.3.3.1).)\n   When a fragment is preceded by an absolute\
    \ or relative URI in the\n   URI-Reference, the meaning of the fragment is defined\
    \ by the\n   resource's MIME type.  Even for XML documents, URI dereferencing\n\
    \   (including the fragment processing) might be done for the signature\n   application\
    \ by a proxy.  Therefore, reference validation might fail\n   if fragment processing\
    \ is not performed in a standard way (as defined\n   in the following section\
    \ for same-document references).\n   Consequently, we RECOMMEND that the URI attribute\
    \ not include\n   fragment identifiers and that such processing be specified as\
    \ an\n   additional XPath Transform.\n   When a fragment is not preceded by a\
    \ URI in the URI-Reference, XML\n   signature applications MUST support the null\
    \ URI and barename\n   XPointer.  We RECOMMEND support for the same-document XPointers\n\
    \   '#xpointer(/)' and '#xpointer(id(\"ID\"))' if the application also\n   intends\
    \ to support Minimal Canonicalization or Canonical XML with\n   Comments.  (Otherwise\
    \ URI=\"#foo\" will automatically remove comments\n   before the Canonical XML\
    \ with Comments can even be invoked.)  All\n   other support for XPointers is\
    \ OPTIONAL, especially all support for\n   barename and other XPointers in external\
    \ resources since the\n   application may not have control over how the fragment\
    \ is generated\n   (leading to interoperability problems and validation failures).\n\
    \   The following examples demonstrate what the URI attribute identifies\n   and\
    \ how it is dereferenced:\n   URI=\"http://example.com/bar.xml\"\n          Identifies\
    \ the octets that represent the external resource\n          'http//example.com/bar.xml',\
    \ that is probably XML document\n          given its file extension.\n   URI=\"\
    http://example.com/bar.xml#chapter1\"\n          Identifies the element with ID\
    \ attribute value 'chapter1' of\n          the external XML resource 'http://example.com/bar.xml',\n\
    \          provided as an octet stream.  Again, for the sake of\n          interoperability,\
    \ the element identified as 'chapter1' should\n          be obtained using an\
    \ XPath transformrather than a URI fragment\n          (barename XPointer resolution\
    \ in external resources is not\n          REQUIRED in this specification).\n \
    \  URI=\"\"\n          Identifies the nodeset (minus any comment nodes) of the\
    \ XML\n          resource containing the signature\n   URI=\"#chapter1\"\n   \
    \       Identifies a nodeset containing the element with ID attribute\n      \
    \    value 'chapter1' of the XML resource containing the signature.\n        \
    \  XML Signature (and its applications) modify this nodeset to\n          include\
    \ the element plus all descendents including namespaces\n          and attributes\
    \ -- but not comments.\n"
- title: 4.3.3.3 Same-Document URI-References
  contents:
  - "4.3.3.3 Same-Document URI-References\n   Dereferencing a same-document reference\
    \ MUST result in an XPath\n   node-set suitable for use by Canonical XML.  Specifically,\n\
    \   dereferencing a null URI (URI=\"\") MUST result in an XPath node-set\n   that\
    \ includes every non-comment node of the XML document containing\n   the URI attribute.\
    \  In a fragment URI, the characters after the\n   number sign ('#') character\
    \ conform to the XPointer syntax [Xptr].\n   When processing an XPointer, the\
    \ application MUST behave as if the\n   root node of the XML document containing\
    \ the URI attribute were used\n   to initialize the XPointer evaluation context.\
    \  The application MUST\n   behave as if the result of XPointer processing were\
    \ a node-set\n   derived from the resultant location-set as follows:\n   1. discard\
    \ point nodes\n   2. replace each range node with all XPath nodes having full\
    \ or\n      partial content within the range\n   3. replace the root node with\
    \ its children (if it is in the node-set)\n   4. replace any element node E with\
    \ E plus all descendants of E (text,\n      comment, PI, element) and all namespace\
    \ and attribute nodes of E\n      and its descendant elements.\n   5. if the URI\
    \ is not a full XPointer, then delete all comment nodes\n   The second to last\
    \ replacement is necessary because XPointer\n   typically indicates a subtree\
    \ of an XML document's parse tree using\n   just the element node at the root\
    \ of the subtree, whereas Canonical\n   XML treats a node-set as a set of nodes\
    \ in which absence of\n   descendant nodes results in absence of their representative\
    \ text from\n   the canonical form.\n   The last step is performed for null URIs,\
    \ barename XPointers and\n   child sequence XPointers.  To retain comments while\
    \ selecting an\n   element by an identifier ID, use the following full XPointer:\n\
    \   URI='#xpointer(id(\"ID\"))'.  To retain comments while selecting the\n   entire\
    \ document, use the following full XPointer: URI='#xpointer(/)'.\n   This XPointer\
    \ contains a simple XPath expression that includes the\n   root node, which the\
    \ second to last step above replaces with all\n   nodes of the parse tree (all\
    \ descendants, plus all attributes, plus\n   all namespaces nodes).\n"
- title: 4.3.3.4 The Transforms Element
  contents:
  - "4.3.3.4 The Transforms Element\n   The optional Transforms element contains an\
    \ ordered list of Transform\n   elements; these describe how the signer obtained\
    \ the data object that\n   was digested.  The output of each Transform serves\
    \ as input to the\n   next Transform.  The input to the first Transform is the\
    \ result of\n   dereferencing the URI attribute of the Reference element.  The\
    \ output\n   from the last Transform is the input for the DigestMethod algorithm.\n\
    \   When transforms are applied the signer is not signing the native\n   (original)\
    \ document but the resulting (transformed) document.  (See\n   Only What is Signed\
    \ is Secure (section 8.1).)\n   Each Transform consists of an Algorithm attribute\
    \ and content\n   parameters, if any, appropriate for the given algorithm.  The\n\
    \   Algorithm attribute value specifies the name of the algorithm to be\n   performed,\
    \ and the Transform content provides additional data to\n   govern the algorithm's\
    \ processing of the transform input.  (See\n   Algorithm Identifiers and Implementation\
    \ Requirements (section 6).)\n   As described in The Reference Processing Model\
    \ (section  4.3.3.2),\n   some transforms take an XPath node-set as input, while\
    \ others require\n   an octet stream.  If the actual input matches the input needs\
    \ of the\n   transform, then the transform operates on the unaltered input.  If\n\
    \   the transform input requirement differs from the format of the actual\n  \
    \ input, then the input must be converted.\n   Some Transform may require explicit\
    \ MIME type, charset (IANA\n   registered \"character set\"), or other such information\
    \ concerning the\n   data they are receiving from an earlier Transform or the\
    \ source data,\n   although no Transform algorithm specified in this document\
    \ needs such\n   explicit information.  Such data characteristics are provided\
    \ as\n   parameters to the Transform algorithm and should be described in the\n\
    \   specification for the algorithm.\n   Examples of transforms include but are\
    \ not limited to base64 decoding\n   [MIME], canonicalization [XML-C14N], XPath\
    \ filtering [XPath], and\n   XSLT [XSLT].  The generic definition of the Transform\
    \ element also\n   allows application-specific transform algorithms.  For example,\
    \ the\n   transform could be a decompression routine given by a Java class\n \
    \  appearing as a base64 encoded parameter to a Java Transform\n   algorithm.\
    \  However, applications should refrain from using\n   application-specific transforms\
    \ if they wish their signatures to be\n   verifiable outside of their application\
    \ domain.  Transform Algorithms\n   (section 6.6) defines the list of standard\
    \ transformations.\n   Schema Definition:\n"
- title: <element name="Transforms">
  contents:
  - "<element name=\"Transforms\">\n  <complexType>\n    <sequence>\n      <element\
    \ ref=\"ds:Transform\" maxOccurs=\"unbounded\"/>\n    </sequence>\n  </complexType>\n"
- title: </element>
  contents:
  - "</element>\n  <element name=\"Transform\">\n    <complexType>\n      <choice\
    \ maxOccurs=\"unbounded\">\n        <any namespace=\"##other\" processContents=\"\
    lax\" minOccurs=\"0\"\n         maxOccurs=\"unbounded\"/>\n        <element name=\"\
    XSLT\" type=\"string\"/>\n        <!-- should be an xsl:stylesheet element -->\n\
    \        <element name=\"XPath\" type=\"string\"/>\n      </choice>\n      <attribute\
    \ name=\"Algorithm\" type=\"uriReference\" use=\"required\"/>\n    </complexType>\n\
    \  </element>\n"
- title: 'DTD:'
  contents:
  - 'DTD:

    '
- title: <!ELEMENT Transforms (Transform+)>
  contents:
  - '<!ELEMENT Transforms (Transform+)>

    '
- title: <!ELEMENT Transform %Transform.ANY; >
  contents:
  - '<!ELEMENT Transform %Transform.ANY; >

    '
- title: <!ATTLIST Transform
  contents:
  - "<!ATTLIST Transform\n          Algorithm    CDATA    #REQUIRED >\n"
- title: <!ELEMENT XPath (#PCDATA) >
  contents:
  - '<!ELEMENT XPath (#PCDATA) >

    '
- title: <!ELEMENT XSLT (#PCDATA) >
  contents:
  - '<!ELEMENT XSLT (#PCDATA) >

    '
- title: 4.3.3.5 The DigestMethod Element
  contents:
  - "4.3.3.5 The DigestMethod Element\n   DigestMethod is a required element that\
    \ identifies the digest\n   algorithm to be applied to the signed object.  This\
    \ element uses the\n   general structure here for algorithms specified in Algorithm\n\
    \   Identifiers and Implementation Requirements (section 6.1).\n   If the result\
    \ of the URI dereference and application of Transforms is\n   an XPath node-set\
    \ (or sufficiently functional replacement implemented\n   by the application)\
    \ then it must be converted as described in the\n   Reference Processing Model\
    \ (section  4.3.3.2).  If the result of URI\n   dereference and application of\
    \ Transforms is an octet stream, then no\n   conversion occurs (comments might\
    \ be present if the Minimal\n   Canonicalization or Canonical XML with Comments\
    \ was specified in the\n   Transforms).  The digest algorithm is applied to the\
    \ data octets of\n   the resulting octet stream.\n   Schema Definition:\n   <element\
    \ name=\"DigestMethod\">\n     <complexType>\n       <sequence>\n         <any\
    \ namespace=\"##any\" processContents=\"lax\" minOccurs=\"0\"\n         maxOccurs=\"\
    unbounded\"/>\n       </sequence>\n       <attribute name=\"Algorithm\" type=\"\
    uriReference\" use=\"required\"/>\n     </complexType>\n   </element>\n   DTD:\n\
    \   <!ELEMENT DigestMethod %Method.ANY; >\n   <!ATTLIST DigestMethod\n       \
    \      Algorithm  CDATA   #REQUIRED >\n"
- title: 4.3.3.6 The DigestValue Element
  contents:
  - "4.3.3.6 The DigestValue Element\n   DigestValue is an element that contains the\
    \ encoded value of the\n   digest.  The digest is always encoded using base64\
    \ [MIME].\n   Schema Definition:\n   <element name=\"DigestValue\" type=\"ds:CryptoBinary\"\
    />\n   DTD:\n   <!ELEMENT DigestValue  (#PCDATA)  >\n   <!-- base64 encoded digest\
    \ value -->\n"
- title: 4.4 The KeyInfo Element
  contents:
  - "4.4 The KeyInfo Element\n   KeyInfo is an optional element that enables the recipient(s)\
    \ to\n   obtain the key needed to validate the signature.  KeyInfo may contain\n\
    \   keys, names, certificates and other public key management\n   information,\
    \ such as in-band key distribution or key agreement data.\n   This specification\
    \ defines a few simple types but applications may\n   place their own key identification\
    \ and exchange semantics within this\n   element type through the XML-namespace\
    \ facility [XML-ns].\n   If KeyInfo is omitted, the recipient is expected to be\
    \ able to\n   identify the key based on application context information.  Multiple\n\
    \   declarations within KeyInfo refer to the same key.  While\n   applications\
    \ may define and use any mechanism they choose through\n   inclusion of elements\
    \ from a different namespace, compliant versions\n   MUST implement KeyValue (section\
    \ 4.4.2) and SHOULD implement\n   RetrievalMethod (section 4.4.3).\n   The following\
    \ list summarizes the KeyInfo types defined by this\n   specification; these can\
    \ be used within the RetrievalMethod Type\n   attribute to describe the remote\
    \ KeyInfo structure as represented as\n   an octect stream.\n      * http://www.w3.org/2000/09/xmldsig#X509Data\n\
    \      * http://www.w3.org/2000/09/xmldsig#PGPData\n      * http://www.w3.org/2000/09/xmldsig#SPKIData\n\
    \      * http://www.w3.org/2000/09/xmldsig#MgmtData\n   In addition to the types\
    \ above for which we define structures, we\n   specify one additional type to\
    \ indicate a binary X.509 Certificate\n      * http://www.w3.org/2000/09/xmldsig#rawX509Certificate\n\
    \   Schema Definition:\n"
- title: <element name="KeyInfo">
  contents:
  - "<element name=\"KeyInfo\">\n  <complexType>\n    <choice maxOccurs=\"unbounded\"\
    >\n      <any processContents=\"lax\" namespace=\"##other\" minOccurs=\"0\"\n\
    \       maxOccurs=\"unbounded\"/>\n      <element name=\"KeyName\" type=\"string\"\
    />\n      <element ref=\"ds:KeyValue\"/>\n      <element ref=\"ds:RetrievalMethod\"\
    />\n      <element ref=\"ds:X509Data\"/>\n      <element ref=\"ds:PGPData\"/>\n\
    \      <element ref=\"ds:SPKIData\"/>\n      <element name=\"MgmtData\" type=\"\
    string\"/>\n    </choice>\n    <attribute name=\"Id\" type=\"ID\" use=\"optional\"\
    />\n  </complexType>\n"
- title: </element>
  contents:
  - '</element>

    '
- title: 'DTD:'
  contents:
  - 'DTD:

    '
- title: <!ELEMENT KeyInfo %Key.ANY; >
  contents:
  - '<!ELEMENT KeyInfo %Key.ANY; >

    '
- title: <!ATTLIST KeyInfo
  contents:
  - "<!ATTLIST KeyInfo\n          Id ID  #IMPLIED >\n"
- title: 4.4.1 The KeyName Element
  contents:
  - "4.4.1 The KeyName Element\n   The KeyName element contains a string value which\
    \ may be used by the\n   signer to communicate a key identifier to the recipient.\
    \  Typically,\n   KeyName contains an identifier related to the key pair used\
    \ to sign\n   the message, but it may contain other protocol-related information\n\
    \   that indirectly identifies a key pair.  (Common uses of KeyName\n   include\
    \ simple string names for keys, a key index, a distinguished\n   name (DN), an\
    \ email address, etc.)\n   Schema Definition:\n   <!-- type declared in KeyInfo\
    \ -->\n   DTD:\n   <!ELEMENT KeyName (#PCDATA) >\n"
- title: 4.4.2 The KeyValue Element
  contents:
  - "4.4.2 The KeyValue Element\n   The KeyValue element contains a single public\
    \ key that may be useful\n   in validating the signature.  Structured formats\
    \ for defining DSA\n   (REQUIRED) and RSA (RECOMMENDED) public keys are defined\
    \ in Signature\n   Algorithms (section 6.4).\n   Schema Definition:\n   <element\
    \ name=\"KeyValue\">\n     <complexType mixed=\"true\">\n       <choice>\n   \
    \      <any namespace=\"##other\" processContents=\"lax\" minOccurs=\"0\"\n  \
    \        maxOccurs=\"unbounded\"/>\n         <element ref=\"ds:DSAKeyValue\"/>\n\
    \         <element ref=\"ds:RSAKeyValue\"/>\n       </choice>\n     </complexType>\n\
    \   </element>\n   DTD:\n   <!ELEMENT KeyValue    %Key.ANY; >\n"
- title: 4.4.3 The RetrievalMethod Element
  contents:
  - "4.4.3 The RetrievalMethod Element\n   A RetrievalMethod element within KeyInfo\
    \ is used to convey a\n   reference to KeyInfo information that is stored at another\
    \ location.\n   For example, several signatures in a document might use a key\n\
    \   verified by an X.509v3 certificate chain appearing once in the\n   document\
    \ or remotely outside the document; each signature's KeyInfo\n   can reference\
    \ this chain using a single RetrievalMethod element\n   instead of including the\
    \ entire chain with a sequence of\n   X509Certificate elements.\n   RetrievalMethod\
    \ uses the same syntax and dereferencing behavior as\n   Reference's URI (section\
    \ 4.3.3.1) and The Reference Processing Model\n   (section 4.3.3.2) except that\
    \ there is no DigestMethod or DigestValue\n   child elements and presence of the\
    \ URI is mandatory.  Note, if the\n   result of dereferencing and transforming\
    \ the specified URI  is a node\n   set, then it may need to be to be canonicalized.\
    \  All of the KeyInfo\n   types defined by this specification (section 4.4) represent\
    \ octets,\n   consequently the Signature application is expected to attempt to\n\
    \   canonicalize the nodeset via the The Reference Processing Model\n   (section\
    \ 4.3.3.2)\n   Type is an optional identifier for the type of data to be retrieved.\n\
    \   Schema Definition\n   <element name=\"RetrievalMethod\">\n     <complexType>\n\
    \       <sequence>\n         <element ref=\"ds:Transforms\" minOccurs=\"0\"/>\n\
    \       </sequence>\n       <attribute name=\"URI\" type=\"uriReference\"/>\n\
    \       <attribute name=\"Type\" type=\"uriReference\" use=\"optional\"/>\n  \
    \   </complexType>\n   </element>\n   DTD\n   <!ELEMENT RetrievalMethod (Transforms?)\
    \ >\n   <!ATTLIST RetrievalMethod\n             URI       CDATA   #REQUIRED\n\
    \             Type      CDATA   #IMPLIED >\n"
- title: 4.4.4 The X509Data Element
  contents:
  - "4.4.4 The X509Data Element\n   Identifier\n         Type=\"http://www.w3.org/2000/09/xmldsig#X509Data\"\
    \n         (this can be used within a RetrievalMethod or Reference element\n \
    \        to identify the referent's type)\n   An X509Data element within KeyInfo\
    \ contains one or more identifiers\n   of keys or X509 certificates (or certificates'\
    \ identifiers or\n   revocation lists).  Five types of X509Data are defined\n\
    \   1. The X509IssuerSerial element, which contains an X.509 issuer\n      distinguished\
    \ name/serial number pair that SHOULD be compliant\n      with RFC2253 [LDAP-DN],\n\
    \   2. The X509SubjectName element, which contains an X.509 subject\n      distinguished\
    \ name that SHOULD be compliant with RFC2253 [LDAP-\n      DN],\n   3. The X509SKI\
    \ element, which contains an X.509 subject key\n      identifier value.\n   4.\
    \ The X509Certificate element, which contains a base64-encoded\n      [X509v3]\
    \ certificate, and\n   5. The X509CRL element, which contains a base64-encoded\
    \ certificate\n      revocation list (CRL) [X509v3].\n   Multiple declarations\
    \ about a single certificate (e.g., a\n   X509SubjectName and X509IssuerSerial\
    \ element) MUST be grouped inside\n   a single X509Data element; multiple declarations\
    \ about the same key\n   but different certificates (related to that single key)\
    \ MUST be\n   grouped within a single KeyInfo element but MAY occur in multiple\n\
    \   X509Data elements.  For example, the following block contains two\n   pointers\
    \ to certificate-A (issuer/serial number and SKI) and a single\n   reference to\
    \ certificate-B (SubjectName) and also shows use of\n   certificate elements\n\
    \   <KeyInfo>\n     <X509Data> <!-- two pointers to certificate-A -->\n      \
    \ <X509IssuerSerial>\n         <X509IssuerName>CN=TAMURA Kent, OU=TRL, O=IBM,\n\
    \           L=Yamato-shi, ST=Kanagawa, C=JP</X509IssuerName>\n         <X509SerialNumber>12345678</X509SerialNumber>\n\
    \       </X509IssuerSerial>\n       <X509SKI>31d97bd7</X509SKI>\n     </X509Data>\n\
    \     <X509Data> <!-- single pointer to certificate-B -->\n       <X509SubjectName>Subject\
    \ of Certificate B</X509SubjectName>\n     </X509Data> <!-- certificate chain\
    \ -->\n       <!--Signer cert, issuer CN=arbolCA,OU=FVT,O=IBM,C=US, serial 4-->\n\
    \       <X509Certificate>MIICXTCCA..</X509Certificate>\n       <!-- Intermediate\
    \ cert subject CN=arbolCA,OU=FVTO=IBM,C=US\n            issuer,CN=tootiseCA,OU=FVT,O=Bridgepoint,C=US\
    \ -->\n       <X509Certificate>MIICPzCCA...</X509Certificate>\n       <!-- Root\
    \ cert subject CN=tootiseCA,OU=FVT,O=Bridgepoint,C=US -->\n       <X509Certificate>MIICSTCCA...</X509Certificate>\n\
    \     </X509Data>\n   </KeyInfo>\n   Note, there is no direct provision for a\
    \ PKCS#7 encoded \"bag\" of\n   certificates or CRLs.  However, a set of certificates\
    \ or a CRL can\n   occur within an X509Data element and multiple X509Data elements\
    \ can\n   occur in a KeyInfo.  Whenever multiple certificates occur in an\n  \
    \ X509Data element, at least one such certificate must contain the\n   public\
    \ key which verifies the signature.\n   Schema Definition\n    <element name=\"\
    X509Data\">\n       <complexType>\n        <choice>\n          <sequence maxOccurs=\"\
    unbounded\">\n            <choice>\n              <element ref=\"ds:X509IssuerSerial\"\
    />\n              <element name=\"X509SKI\" type=\"ds:CryptoBinary\"/>\n     \
    \         <element name=\"X509SubjectName\" type=\"string\"/>\n              <element\
    \ name=\"X509Certificate\" type=\"ds:CryptoBinary\"/>\n            </choice>\n\
    \          </sequence>\n          <element name=\"X509CRL\" type=\"ds:CryptoBinary\"\
    />\n        </choice>\n      </complexType>\n    </element>\n    <element name=\"\
    X509IssuerSerial\">\n       <complexType>\n        <sequence>\n          <element\
    \ name=\"X509IssuerName\" type=\"string\"/>\n          <element name=\"X509SerialNumber\"\
    \ type=\"integer\"/>\n        </sequence>\n       </complexType>\n    </element>\n\
    \    DTD\n   <!ELEMENT X509Data ((X509IssuerSerial | X509SKI | X509SubjectName\
    \ |\n                       X509Certificate)+ | X509CRL)>\n    <!ELEMENT X509IssuerSerial\
    \ (X509IssuerName, X509SerialNumber) >\n    <!ELEMENT X509IssuerName (#PCDATA)\
    \ >\n    <!ELEMENT X509SubjectName (#PCDATA) >\n    <!ELEMENT X509SerialNumber\
    \ (#PCDATA) >\n    <!ELEMENT X509SKI (#PCDATA) >\n    <!ELEMENT X509Certificate\
    \ (#PCDATA) >\n    <!ELEMENT X509CRL (#PCDATA) >\n"
- title: 4.4.5 The PGPData element
  contents:
  - "4.4.5 The PGPData element\n   Identifier\n         Type=\"http://www.w3.org/2000/09/xmldsig#PGPData\"\
    \n         (this can be used within a RetrievalMethod or Reference element\n \
    \        to identify the referent's type)\n   The PGPData element within KeyInfo\
    \ is used to convey information\n   related to PGP public key pairs and signatures\
    \ on such keys.  The\n   PGPKeyID's value is a string containing a standard PGP\
    \ public key\n   identifier as defined in [PGP, section 11.2].  The PGPKeyPacket\n\
    \   contains a base64-encoded Key Material Packet as defined in [PGP,\n   section\
    \ 5.5].  Other sub-types of the PGPData element may be defined\n   by the OpenPGP\
    \ working group.\n   Schema Definition:\n   <element name=\"PGPData\">\n     <complexType>\n\
    \       <choice>\n         <any namespace=\"##other\" processContents=\"lax\"\
    \ minOccurs=\"0\"\n         maxOccurs=\"unbounded\"/>\n         <sequence>\n \
    \          <element name=\"PGPKeyID\" type=\"string\"/>\n           <element name=\"\
    PGPKeyPacket\" type=\"ds:CryptoBinary\"/>\n         </sequence>\n       </choice>\n\
    \     </complexType>\n   </element>\n   DTD:\n   <!ELEMENT PGPData (PGPKeyID,\
    \ PGPKeyPacket)  >\n   <!ELEMENT PGPKeyPacket  (#PCDATA)  >\n   <!ELEMENT PGPKeyID\
    \  (#PCDATA)  >\n"
- title: 4.4.6 The SPKIData element
  contents:
  - "4.4.6 The SPKIData element\n   Identifier\n         Type=\"http://www.w3.org/2000/09/xmldsig#SPKIData\"\
    \n         (this can be used within a RetrievalMethod or Reference element\n \
    \        to identify the referent's type)\n   The SPKIData element within KeyInfo\
    \ is used to convey information\n   related to SPKI public key pairs, certificates\
    \ and other SPKI data.\n   The content of this element type is expected to be\
    \ a Canonical S-\n   expression.\n   Schema Definition:\n   <element name=\"SPKIData\"\
    \ type=\"string\"/>\n   DTD:\n   <!ELEMENT SPKIData (#PCDATA) >\n"
- title: 4.4.7 The MgmtData element
  contents:
  - "4.4.7 The MgmtData element\n   Identifier\n         Type=\"http://www.w3.org/2000/09/xmldsig#MgmtData\"\
    \n         (this can be used within a RetrievalMethod or Reference element\n \
    \        to identify the referent's type)\n   The MgmtData element within KeyInfo\
    \ is a string value used to convey\n   in-band key distribution or agreement data.\
    \  For example, DH key\n   exchange, RSA key encryption, etc.\n   Schema Definition:\n\
    \   <!-- type declared in KeyInfo -->\n   DTD:\n   <!ELEMENT MgmtData (#PCDATA)>\n"
- title: 4.5 The Object Element
  contents:
  - "4.5 The Object Element\n   Identifier\n         Type=\"http://www.w3.org/2000/09/xmldsig#Object\"\
    \n         (this can be used within a Reference element to identify the\n    \
    \     referent's type)\n   Object is an optional element that may occur one or\
    \ more times.  When\n   present, this element may contain any data.  The Object\
    \ element may\n   include optional MIME type, ID, and encoding attributes.\n \
    \  The MimeType attribute is an optional attribute which describes the\n   data\
    \ within the Object.  This is a string with values defined by\n   [MIME].  For\
    \ example, if the Object contains XML, the MimeType could\n   be text/xml.  This\
    \ attribute is purely advisory; no validation of the\n   MimeType information\
    \ is required by this specification.\n   The Object's Id is commonly referenced\
    \ from a Reference in\n   SignedInfo, or Manifest.  This element is typically\
    \ used for\n   enveloping signatures where the object being signed is to be included\n\
    \   in the signature element.  The digest is calculated over the entire\n   Object\
    \ element including start and end tags.\n   The Object's Encoding attributed may\
    \ be used to provide a URI that\n   identifies the method by which the object\
    \ is encoded (e.g., a binary\n   file).\n   Note, if the application wishes to\
    \ exclude the <Object> tags from the\n   digest calculation the Reference must\
    \ identify the actual data object\n   (easy for XML documents) or a transform\
    \ must be used to remove the\n   Object tags (likely where the data object is\
    \ non-XML).  Exclusion of\n   the object tags may be desired for cases where one\
    \ wants the\n   signature to remain valid if the data object is moved from inside\
    \ a\n   signature to outside the signature (or vice-versa), or where the\n   content\
    \ of the Object is an encoding of an original binary document\n   and it is desired\
    \ to extract and decode so as to sign the original\n   bitwise representation.\n\
    \   Schema Definition:\n   <element name=\"Object\">\n     <complexType mixed=\"\
    true\">\n       <sequence maxOccurs=\"unbounded\">\n         <any namespace=\"\
    ##any\" processContents=\"lax\"/>\n       </sequence>\n       <attribute name=\"\
    Id\" type=\"ID\" use=\"optional\"/>\n       <attribute name=\"MimeType\" type=\"\
    string\" use=\"optional\"/>\n          <!-- add a grep facet -->\n       <attribute\
    \ name=\"Encoding\" type=\"uriReference\" use=\"optional\"/>\n     </complexType>\n\
    \   </element>\n   DTD:\n   <!ELEMENT Object %Object.ANY; >\n   <!ATTLIST Object\n\
    \             Id ID  #IMPLIED\n             MimeType   CDATA   #IMPLIED\n    \
    \         Encoding   CDATA   #IMPLIED >\n"
- title: 5.0 Additional Signature Syntax
  contents:
  - "5.0 Additional Signature Syntax\n   This section describes the optional to implement\
    \ Manifest and\n   SignatureProperties elements and describes the handling of\
    \ XML\n   processing instructions and comments.  With respect to the elements\n\
    \   Manifest and SignatureProperties this section specifies syntax and\n   little\
    \ behavior -- it is left to the application.  These elements can\n   appear anywhere\
    \ the parent's content model permits; the Signature\n   content model only permits\
    \ them within Object.\n"
- title: 5.1 The Manifest Element
  contents:
  - "5.1 The Manifest Element\n   Identifier\n         Type=\"http://www.w3.org/2000/09/xmldsig#Manifest\"\
    \n         (this can be used within a Reference element to identify the\n    \
    \     referent's type)\n   The Manifest element provides a list of References.\
    \  The difference\n   from the list in SignedInfo is that it is application defined\
    \ which,\n   if any, of the digests are actually checked against the objects\n\
    \   referenced and what to do if the object is inaccessible or the digest\n  \
    \ compare fails.  If a Manifest is pointed to from SignedInfo, the\n   digest\
    \ over the Manifest itself will be checked by the core signature\n   validation\
    \ behavior.  The digests within such a Manifest are checked\n   at the application's\
    \ discretion.  If a Manifest is referenced from\n   another Manifest, even the\
    \ overall digest of this two level deep\n   Manifest might not be checked.\n \
    \  Schema Definition:\n   <element name=\"Manifest\">\n     <complexType>\n  \
    \     <sequence>\n         <element ref=\"ds:Reference\" maxOccurs=\"unbounded\"\
    />\n       </sequence>\n       <attribute name=\"Id\" type=\"ID\" use=\"optional\"\
    />\n     </complexType>\n   </element>\n   DTD:\n   <!ELEMENT Manifest (Reference+)\
    \  >\n   <!ATTLIST Manifest\n             Id ID  #IMPLIED >\n"
- title: 5.2 The SignatureProperties Element
  contents:
  - "5.2 The SignatureProperties Element\n   Identifier\n         Type=\"http://www.w3.org/2000/09/xmldsig#SignatureProperties\"\
    \n         (this can be used within a Reference element to identify the\n    \
    \     referent's type)\n   Additional information items concerning the generation\
    \ of the\n   signature(s) can be placed in a SignatureProperty element (i.e.,\n\
    \   date/time stamp or the serial number of cryptographic hardware used\n   in\
    \ signature generation).\n   Schema Definition:\n   <element name=\"SignatureProperties\"\
    >\n     <complexType>\n       <sequence>\n      <element ref=\"ds:SignatureProperty\"\
    \ maxOccurs=\"unbounded\"/>\n     </sequence>\n       <attribute name=\"Id\" type=\"\
    ID\" use=\"optional\"/>\n     </complexType>\n   </element>\n      <element name=\"\
    SignatureProperty\">\n        <complexType mixed=\"true\">\n          <choice\
    \ minOccurs=\"0\" maxOccurs=\"unbounded\">\n            <any namespace=\"##other\"\
    \ processContents=\"lax\" minOccurs=\"0\"\n            maxOccurs=\"unbounded\"\
    />\n          </choice>\n          <attribute name=\"Target\" type=\"uriReference\"\
    \ use=\"required\"/>\n          <attribute name=\"Id\" type=\"ID\" use=\"optional\"\
    />\n          </complexType>\n      </element>\n   DTD:\n   <!ELEMENT SignatureProperties\
    \ (SignatureProperty+)  >\n   <!ATTLIST SignatureProperties\n             Id ID\
    \   #IMPLIED  >\n   <!ELEMENT SignatureProperty %SignatureProperty.ANY >\n   <!ATTLIST\
    \ SignatureProperty\n             Target CDATA    #REQUIRED\n             Id ID\
    \  #IMPLIED  >\n"
- title: 5.3 Processing Instructions in Signature Elements
  contents:
  - "5.3 Processing Instructions in Signature Elements\n   No XML processing instructions\
    \ (PIs) are used by this specification.\n   Note that PIs placed inside SignedInfo\
    \ by an application will be\n   signed unless the CanonicalizationMethod algorithm\
    \ discards them.\n   (This is true for any signed XML content.)  All of the\n\
    \   CanonicalizationMethods specified within this specification retain\n   PIs.\
    \  When a PI is part of content that is signed (e.g., within\n   SignedInfo or\
    \ referenced XML documents) any change to the PI will\n   obviously result in\
    \ a signature failure.\n"
- title: 5.4 Comments in Signature Elements
  contents:
  - "5.4 Comments in Signature Elements\n   XML comments are not used by this specification.\n\
    \   Note that unless CanonicalizationMethod removes comments within\n   SignedInfo\
    \ or any other referenced XML (which [XML-C14N] does), they\n   will be signed.\
    \  Consequently, if they are retained, a change to the\n   comment will cause\
    \ a signature failure.  Similarly, the XML signature\n   over any XML data will\
    \ be sensitive to comment changes unless a\n   comment-ignoring canonicalization/transform\
    \ method, such as the\n   Canonical XML [XML-C14N], is specified.\n"
- title: 6.0 Algorithms
  contents:
  - "6.0 Algorithms\n   This section identifies algorithms used with the XML digital\n\
    \   signature specification.  Entries contain the identifier to be used\n   in\
    \ Signature elements, a reference to the formal specification, and\n   definitions,\
    \ where applicable, for the representation of keys and the\n   results of cryptographic\
    \ operations.\n"
- title: 6.1 Algorithm Identifiers and Implementation Requirements
  contents:
  - "6.1 Algorithm Identifiers and Implementation Requirements\n   Algorithms are\
    \ identified by URIs that appear as an attribute to the\n   element that identifies\
    \ the algorithms' role (DigestMethod,\n   Transform, SignatureMethod, or CanonicalizationMethod).\
    \  All\n   algorithms used herein take parameters but in many cases the\n   parameters\
    \ are implicit.  For example, a SignatureMethod is\n   implicitly given two parameters:\
    \ the keying info and the output of\n   CanonicalizationMethod.  Explicit additional\
    \ parameters to an\n   algorithm appear as content elements within the algorithm\
    \ role\n   element.  Such parameter elements have a descriptive element name,\n\
    \   which is frequently algorithm specific, and MUST be in the XML\n   Signature\
    \ namespace or an algorithm specific namespace.\n   This specification defines\
    \ a set of algorithms, their URIs, and\n   requirements for implementation.  Requirements\
    \ are specified over\n   implementation, not over requirements for signature use.\n\
    \   Furthermore, the mechanism is extensible, alternative algorithms may\n   be\
    \ used by signature applications.\n   (Note that the normative identifier is the\
    \ complete URI in the table\n   though they are sometimes abbreviated in XML syntax\
    \ (e.g.,\n   \"&dsig;base64\").)\n   Algorithm Type\n      Algorithm - Requirements\
    \ - Algorithm URI\n   Digest\n      SHA1  - REQUIRED - &dsig;sha1\n   Encoding\n\
    \      base64  - REQUIRED - &dsig;base64\n   MAC\n      HMAC-SHA1 - REQUIRED -\
    \ &dsig;hmac-sha1\n   Signature\n      DSAwithSHA1(DSS) - REQUIRED - &dsig;dsa-sha1\n\
    \      RSAwithSHA1 - RECOMMENDED - &dsig;rsa-sha1\n   Canonicalization\n     \
    \ minimal - RECOMMENDED - &dsig;minimal\n      Canonical XML with Comments - RECOMMENDED\
    \ -\n         http://www.w3.org/TR/2000/CR-xml-c14n-20001026#WithComments\n  \
    \    Canonical XML (omits comments) - REQUIRED -\n         http://www.w3.org/TR/2000/CR-xml-c14n-20001026\n\
    \   Transform\n      XSLT - OPTIONAL - http://www.w3.org/TR/1999/REC-xslt-19991116\n\
    \      XPath - RECOMMENDED -\n         http://www.w3.org/TR/1999/REC-xpath-19991116\n\
    \      Enveloped Signature* - REQUIRED - &dsig;enveloped-signature\n   *  The\
    \ Enveloped Signature transform removes the Signature element\n   from the calculation\
    \ of the signature when the signature is within\n   the content that it is being\
    \ signed.  This MAY be implemented via the\n   RECOMMENDED XPath specification\
    \ specified in 6.6.4: Enveloped\n   Signature Transform; it MUST have the same\
    \ effect as that specified\n   by the XPath Transform.\n"
- title: 6.2 Message Digests
  contents:
  - "6.2 Message Digests\n   Only one digest algorithm is defined herein.  However,\
    \ it is expected\n   that one or more additional strong digest algorithms will\
    \ be\n   developed in connection with the US Advanced Encryption Standard\n  \
    \ effort.  Use of MD5 [MD5] is NOT RECOMMENDED because recent advances\n   in\
    \ cryptography have cast doubt on its strength.\n"
- title: 6.2.1 SHA-1
  contents:
  - "6.2.1 SHA-1\n   Identifier:\n         http://www.w3.org/2000/09/xmldsig#sha1\n\
    \   The SHA-1 algorithm [SHA-1] takes no explicit parameters.  An example\n  \
    \ of an SHA-1 DigestAlg element is:\n   <DigestMethod Algorithm=\"&dsig;sha1\"\
    />\n   A SHA-1 digest is a 160-bit string.  The content of the DigestValue\n \
    \  element shall be the base64 encoding of this bit string viewed as a\n   20-octet\
    \ octet stream.  For example, the DigestValue element for the\n   message digest:\n\
    \   A9993E36 4706816A BA3E2571 7850C26C 9CD0D89D\n   from Appendix A of the SHA-1\
    \ standard would be:\n   <DigestValue>qZk+NkcGgWq6PiVxeFDCbJzQ2J0=</DigestValue>\n"
- title: 6.3 Message Authentication Codes
  contents:
  - "6.3 Message Authentication Codes\n   MAC algorithms take two implicit parameters,\
    \ their keying material\n   determined from KeyInfo and the octet stream output\
    \ by\n   CanonicalizationMethod.  MACs and signature algorithms are\n   syntactically\
    \ identical but a MAC implies a shared secret key.\n"
- title: 6.3.1 HMAC
  contents:
  - "6.3.1 HMAC\n   Identifier:\n         http://www.w3.org/2000/09/xmldsig#hmac-sha1\n\
    \   The HMAC algorithm (RFC2104 [HMAC]) takes the truncation length in\n   bits\
    \ as a parameter; if the parameter is not specified then all the\n   bits of the\
    \ hash are output.  An example of an HMAC SignatureMethod\n   element:\n   <SignatureMethod\
    \ Algorithm=\"&dsig;hmac-sha1\">\n      <HMACOutputLength>128</HMACOutputLength>\n\
    \   </SignatureMethod>\n   The output of the HMAC algorithm is ultimately the\
    \ output (possibly\n   truncated) of the chosen digest algorithm.  This value\
    \ shall be\n   base64 encoded in the same straightforward fashion as the output\
    \ of\n   the digest algorithms.  Example: the SignatureValue element for the\n\
    \   HMAC-SHA1 digest\n   9294727A 3638BB1C 13F48EF8 158BFC9D\n   from the test\
    \ vectors in [HMAC] would be\n   <SignatureValue>kpRyejY4uxwT9I74FYv8nQ==</SignatureValue>\n\
    \   Schema Definition:\n   <element name=\"HMACOutputLength\" type=\"integer\"\
    />\n   DTD:\n   <!ELEMENT HMACOutputLength (#PCDATA)>\n"
- title: 6.4 Signature Algorithms
  contents:
  - "6.4 Signature Algorithms\n   Signature algorithms take two implicit parameters,\
    \ their keying\n   material determined from KeyInfo and the octet stream output\
    \ by\n   CanonicalizationMethod.  Signature and MAC algorithms are\n   syntactically\
    \ identical but a signature implies public key\n   cryptography.\n"
- title: 6.4.1 DSA
  contents:
  - "6.4.1 DSA\n   Identifier:\n         http://www.w3.org/2000/09/xmldsig#dsa-sha1\n\
    \   The DSA algorithm [DSS] takes no explicit parameters.  An example of\n   a\
    \ DSA SignatureMethod element is:\n   <SignatureMethod Algorithm=\"&dsig;dsa\"\
    />\n   The output of the DSA algorithm consists of a pair of integers\n   usually\
    \ referred by the pair (r, s).  The signature value consists of\n   the base64\
    \ encoding of the concatenation of two octet-streams that\n   respectively result\
    \ from the octet-encoding of the values r and s.\n   Integer to octet-stream conversion\
    \ must be done according to the\n   I2OSP operation defined in the RFC 2437 [PKCS1]\
    \ specification with a\n   k parameter equal to 20.  For example, the SignatureValue\
    \ element for\n   a DSA signature (r, s) with values specified in hexadecimal:\n\
    \   r = 8BAC1AB6 6410435C B7181F95 B16AB97C 92B341C0\n   s = 41E2345F 1F56DF24\
    \ 58F426D1 55B4BA2D B6DCD8C8\n   from the example in Appendix 5 of the DSS standard\
    \ would be\n"
- title: <SignatureValue>
  contents:
  - '<SignatureValue>

    '
- title: i6watmQQQ1y3GB+VsWq5fJKzQcBB4jRfH1bfJFj0JtFVtLotttzYyA==</SignatureValue>
  contents:
  - "i6watmQQQ1y3GB+VsWq5fJKzQcBB4jRfH1bfJFj0JtFVtLotttzYyA==</SignatureValue>\n \
    \  DSA key values have the following set of fields: P, Q, G and Y are\n   mandatory\
    \ when appearing as a key value, J, seed and pgenCounter are\n   optional but\
    \ should be present.  (The seed and pgenCounter fields\n   must appear together\
    \ or be absent).  All parameters are encoded as\n   base64 [MIME] values.\n  \
    \ Schema:\n   <element name=\"DSAKeyValue\">\n     <complexType>\n       <sequence>\n\
    \         <sequence>\n           <element name=\"P\" type=\"ds:CryptoBinary\"\
    />\n           <element name=\"Q\" type=\"ds:CryptoBinary\"/>\n           <element\
    \ name=\"G\" type=\"ds:CryptoBinary\"/>\n           <element name=\"Y\" type=\"\
    ds:CryptoBinary\"/>\n           <element name=\"J\" type=\"ds:CryptoBinary\" minOccurs=\"\
    0\"/>\n         </sequence>\n         <sequence minOccurs=\"0\">\n           <element\
    \ name=\"Seed\" type=\"ds:CryptoBinary\"/>\n           <element name=\"PgenCounter\"\
    \ type=\"ds:CryptoBinary\"/>\n         </sequence>\n       </sequence>\n     </complexType>\n\
    \   </element>\n   DTD:\n   <!ELEMENT DSAKeyValue (P, Q, G, Y, J?, (Seed, PgenCounter)?)\
    \ >\n   <!ELEMENT P (#PCDATA) >\n   <!ELEMENT Q (#PCDATA) >\n   <!ELEMENT G (#PCDATA)\
    \ >\n   <!ELEMENT Y (#PCDATA) >\n   <!ELEMENT J (#PCDATA) >\n   <!ELEMENT Seed\
    \ (#PCDATA) >\n   <!ELEMENT PgenCounter (#PCDATA) >\n"
- title: 6.4.2 PKCS1
  contents:
  - "6.4.2 PKCS1\n   Identifier:\n         http://www.w3.org/2000/09/xmldsig#rsa-sha1\n\
    \   Arbitrary-length integers (e.g., \"bignums\" such as RSA modulii) are\n  \
    \ represented in XML as octet strings.  The integer value is first\n   converted\
    \ to a \"big endian\" bitstring.  The bitstring is then padded\n   with leading\
    \ zero bits so that the total number of bits == 0 mod 8\n   (so that there are\
    \ an even number of bytes).  If the bitstring\n   contains entire leading bytes\
    \ that are zero, these are removed (so\n   the high-order byte is always non-zero).\
    \  This octet string is then\n   base64 [MIME] encoded.  (The conversion from\
    \ integer to octet string\n   is equivalent to IEEE 1363's I2OSP [1363] with minimal\
    \ length).\n   The expression \"RSA algorithm\" as used in this document refers\
    \ to the\n   RSASSA-PKCS1-v1_5 algorithm described in RFC 2437 [PKCS1].  The RSA\n\
    \   algorithm takes no explicit parameters.  An example of an RSA\n   SignatureMethod\
    \ element is:  <SignatureMethod Algorithm=\"&dsig;rsa-\n   sha1\"/>\n   The SignatureValue\
    \ content for an RSA signature is the base64 [MIME]\n   encoding of the octet\
    \ string computed as per RFC 2437 [PKCS1, section\n   8.1.1: Signature generation\
    \ for the RSASSA-PKCS1-v1_5 signature\n   scheme].  As specified in the EMSA-PKCS1-V1_5-ENCODE\
    \ function RFC\n   2437 [PKCS1, section 9.2.1], the value input to the signature\n\
    \   function MUST contain a pre-pended algorithm object identifier for\n   the\
    \ hash function, but the availability of an ASN.1 parser and\n   recognition of\
    \ OIDs is not required of a signature verifier.  The\n   PKCS#1 v1.5 representation\
    \ appears as:\n      CRYPT (PAD (ASN.1 (OID, DIGEST (data))))\n   Note that the\
    \ padded ASN.1 will be of the following form:\n      01 | FF* | 00 | prefix |\
    \ hash\n   where \"|\" is concatentation, \"01\", \"FF\", and \"00\" are fixed\
    \ octets of\n   the corresponding hexadecimal value, \"hash\" is the SHA1 digest\
    \ of the\n   data, and \"prefix\" is the ASN.1 BER SHA1 algorithm designator prefix\n\
    \   required in PKCS1 [RFC 2437], that is,\n      hex 30 21 30 09 06 05 2B 0E\
    \ 03 02 1A 05 00 04 14\n   This prefix is included to make it easier to use standard\n\
    \   cryptographic libraries.  The FF octet MUST be repeated the maximum\n   number\
    \ of times such that the value of the quantity being CRYPTed is\n   one octet\
    \ shorter than the RSA modulus.\n   The resulting base64 [MIME] string is the\
    \ value of the child text\n   node of the SignatureValue element, e.g.\n     \
    \ <SignatureValue>IWijxQjUrcXBYoCei4QxjWo9Kg8D3p9tlWoT4\n      t0/gyTE96639In0FZFY2/rvP+/bMJ01EArmKZsR5VW3rwoPxw=\n\
    \      </SignatureValue>\n   RSA key values have two fields Modulus and Exponent\n\
    \      <RSAKeyValue>\n   <Modulus>xA7SEU+e0yQH5rm9kbCDN9o3aPIo7HbP7tX6WOocLZAtNfyxSZDU16ksL6W\n\
    \   jubafOqNEpcwR3RdFsT7bCqnXPBe5ELh5u4VEy19MzxkXRgrMvavzyBpVRgBUwUlV\n      \
    \   5foK5hhmbktQhyNdy/6LpQRhDUDsTvK+g9Ucj47es9AQJ3U=\n         </Modulus>\n  \
    \       <Exponent>AQAB</Exponent>\n      </RSAKeyValue>\n   Schema:\n   <element\
    \ name=\"RSAKeyValue\">\n     <complexType>\n       <sequence>\n         <element\
    \ name=\"Modulus\" type=\"ds:CryptoBinary\"/>\n         <element name=\"Exponent\"\
    \ type=\"ds:CryptoBinary\"/>\n       </sequence>\n     </complexType>\n   </element>\n\
    \   DTD:\n   <!ELEMENT RSAKeyValue (Modulus, Exponent) >\n   <!ELEMENT Modulus\
    \ (#PCDATA) >\n   <!ELEMENT Exponent (#PCDATA) >\n"
- title: 6.5 Canonicalization Algorithms
  contents:
  - "6.5 Canonicalization Algorithms\n   If canonicalization is performed over octets,\
    \ the canonicalization\n   algorithms take two implicit parameter: the content\
    \ and its charset.\n   The charset is derived according to the rules of the transport\n\
    \   protocols and media types (e.g., RFC2376 [XML-MT] defines the media\n   types\
    \ for XML).  This information is necessary to correctly sign and\n   verify documents\
    \ and often requires careful server side\n   configuration.\n   Various canonicalization\
    \ algorithms require conversion to [UTF-8].The\n   two algorithms below understand\
    \ at least [UTF-8] and [UTF-16] as\n   input encodings.  We RECOMMEND that externally\
    \ specified algorithms\n   do the same.  Knowledge of other encodings is OPTIONAL.\n\
    \   Various canonicalization algorithms transcode from a non-Unicode\n   encoding\
    \ to Unicode.  The two algorithms below perform text\n   normalization during\
    \ transcoding [NFC].  We RECOMMEND that externally\n   specified canonicalization\
    \ algorithms do the same.  (Note, there can\n   be ambiguities in converting existing\
    \ charsets to Unicode, for an\n   example see the XML Japanese Profile [XML-Japanese]\
    \ NOTE.)\n"
- title: 6.5.1 Minimal Canonicalization
  contents:
  - "6.5.1 Minimal Canonicalization\n   Identifier:\n         http://www.w3.org/2000/09/xmldsig#minimal\n\
    \   An example of a minimal canonicalization element is:\n   <CanonicalizationMethod\
    \ Algorithm=\"&dsig;minimal\"/>\n   The minimal canonicalization algorithm:\n\
    \      *  converts the character encoding to UTF-8 (without any byte\n       \
    \  order mark (BOM)).  If an encoding is given in the XML\n         declaration,\
    \ it must be removed.  Implementations MUST\n         understand at least [UTF-8]\
    \ and [UTF-16] as input encodings.\n         Non-Unicode to Unicode transcoding\
    \ MUST perform text\n         normalization [NFC].\n      *  normalizes line endings\
    \ as provided by [XML].  (See XML and\n         Canonicalization and Syntactical\
    \ Considerations (section 7).)\n   This algorithm requires as input the octet\
    \ stream of the resource to\n   be processed; the algorithm outputs an octet stream.\
    \  When used to\n   canonicalize SignedInfo the algorithm MUST be provided with\
    \ the\n   octets that represent the well-formed SignedInfo element (and its\n\
    \   children and content) as described in The CanonicalizationMethod\n   Element\
    \ (section 4.3.1).\n   If the signature application has a node set, then the signature\n\
    \   application must convert it into octets as described in The Reference\n  \
    \ Processing Model (section 4.3.3.2).  However, Minimal\n   Canonicalization is\
    \ NOT RECOMMENDED for processing XPath node-sets,\n   the results of same-document\
    \ URI references, and the output of other\n   types of XML based transforms. \
    \ It is only RECOMMENDED for simple\n   character normalization of well formed\
    \ XML that has no namespace or\n   external entity complications.\n"
- title: 6.5.2 Canonical XML
  contents:
  - "6.5.2 Canonical XML\n   Identifier for REQUIRED Canonical XML (omits comments):\n\
    \         http://www.w3.org/TR/2000/CR-xml-c14n-20001026\n   Identifier for Canonical\
    \ XML with Comments:\n         http://www.w3.org/TR/2000/CR-xml-c14n-20001026#WithComments\n\
    \   An example of an XML canonicalization element is:\n   <CanonicalizationMethod\
    \ Algorithm=\"http://www.w3.org/TR/2000/CR-xml-\n   c14n-20001026\"/>\n   The\
    \ normative specification of Canonical XML is [XML-C14N].  The\n   algorithm is\
    \ capable of taking as input either an octet stream or an\n   XPath node-set (or\
    \ sufficiently functional alternative).  The\n   algorithm produces an octet stream\
    \ as output.  Canonical XML is\n   easily parameterized (via an additional URI)\
    \ to omit or retain\n   comments.\n"
- title: 6.6 Transform Algorithms
  contents:
  - "6.6 Transform Algorithms\n   A Transform algorithm has a single implicit parameters:\
    \ an octet\n   stream from the Reference or the output of an earlier Transform.\n\
    \   Application developers are strongly encouraged to support all\n   transforms\
    \ listed in this section as RECOMMENDED unless the\n   application environment\
    \ has resource constraints that would make such\n   support impractical.  Compliance\
    \ with this recommendation will\n   maximize application interoperability and\
    \ libraries should be\n   available to enable support of these transforms in applications\n\
    \   without extensive development.\n"
- title: 6.6.1 Canonicalization
  contents:
  - "6.6.1 Canonicalization\n   Any canonicalization algorithm that can be used for\n\
    \   CanonicalizationMethod (such as those in  Canonicalization Algorithms\n  \
    \ (section 6.5)) can be used as a Transform.\n"
- title: 6.6.2 Base64
  contents:
  - "6.6.2 Base64\n   Identifiers:\n         http://www.w3.org/2000/09/xmldsig#base64\n\
    \   The normative specification for base 64 decoding transforms is\n   [MIME].\
    \  The base64 Transform element has no content.  The input is\n   decoded by the\
    \ algorithms.  This transform is useful if an\n   application needs to sign the\
    \ raw data associated with the encoded\n   content of an element.\n   This transform\
    \ requires an octet stream for input.  If an XPath\n   node-set (or sufficiently\
    \ functional alternative) is given as input,\n   then it is converted to an octet\
    \ stream by performing operations\n   logically equivalent to 1) applying an XPath\
    \ transform with\n   expression self::text(), then 2) taking the string-value\
    \ of the\n   node-set.  Thus, if an XML element is identified by a barename\n\
    \   XPointer in the Reference URI, and its content consists solely of\n   base64\
    \ encoded character data, then this transform automatically\n   strips away the\
    \ start and end tags of the identified element and any\n   of its descendant elements\
    \ as well as any descendant comments and\n   processing instructions.  The output\
    \ of this transform is an octet\n   stream.\n"
- title: 6.6.3 XPath Filtering
  contents:
  - "6.6.3 XPath Filtering\n   Identifier:\n         http://www.w3.org/TR/1999/REC-xpath-19991116\n\
    \   The normative specification for XPath expression evaluation is\n   [XPath].\
    \  The XPath expression to be evaluated appears as the\n   character content of\
    \ a transform parameter child element named XPath.\n   The input required by this\
    \ transform is an XPath node-set.  Note that\n   if the actual input is an XPath\
    \ node-set resulting from a null URI or\n   barename XPointer dereference, then\
    \ comment nodes will have been\n   omitted.  If the actual input is an octet stream,\
    \ then the\n   application MUST convert the octet stream to an XPath node-set\n\
    \   suitable for use by Canonical XML with Comments (a subsequent\n   application\
    \ of the REQUIRED Canonical XML algorithm would strip away\n   these comments).\
    \  In other words, the input node-set should be\n   equivalent to the one that\
    \ would be created by the following process:\n   1. Initialize an XPath evaluation\
    \ context by setting the initial node\n      equal to the input XML document's\
    \ root node, and set the context\n      position and size to 1.\n   2. Evaluate\
    \ the XPath expression (//. | //@* | //namespace::*)\n   The evaluation of this\
    \ expression includes all of the document's\n   nodes (including comments) in\
    \ the node-set representing the octet\n   stream.\n   The transform output is\
    \ also an XPath node-set.  The XPath expression\n   appearing in the XPath parameter\
    \ is evaluated once for each node in\n   the input node-set.  The result is converted\
    \ to a boolean.  If the\n   boolean is true, then the node is included in the\
    \ output node-set.\n   If the boolean is false, then the node is omitted from\
    \ the output\n   node-set.\n   Note: Even if the input node-set has had comments\
    \ removed, the\n   comment nodes still exist in the underlying parse tree and\
    \ can\n   separate text nodes.  For example, the markup <e>Hello, <!-- comment\n\
    \   --> world!</e> contains two text nodes.  Therefore, the expression\n   self::text()[string()=\"\
    Hello, world!\"] would fail.  Should this\n   problem arise in the application,\
    \ it can be solved by either\n   canonicalizing the document before the XPath\
    \ transform to physically\n   remove the comments or by matching the node based\
    \ on the parent\n   element's string value (e.g., by using the expression\n  \
    \ self::text()[string(parent::e)=\"Hello, world!\"]).\n   The primary purpose\
    \ of this transform is to ensure that only\n   specifically defined changes to\
    \ the input XML document are permitted\n   after the signature is affixed.  This\
    \ is done by omitting precisely\n   those nodes that are allowed to change once\
    \ the signature is affixed,\n   and including all other input nodes in the output.\
    \  It is the\n   responsibility of the XPath expression author to include all\
    \ nodes\n   whose change could affect the interpretation of the transform output\n\
    \   in the application context.\n   An important scenario would be a document\
    \ requiring two enveloped\n   signatures.  Each signature must omit itself from\
    \ its own digest\n   calculations, but it is also necessary to exclude the second\n\
    \   signature element from the digest calculations of the first signature\n  \
    \ so that adding the second signature does not break the first\n   signature.\n\
    \   The XPath transform establishes the following evaluation context for\n   each\
    \ node of the input node-set:\n      *  A context node equal to a node of the\
    \ input node-set.\n      *  A context position, initialized to 1.\n      *  A\
    \ context size, initialized to 1.\n      *  A library of functions equal to the\
    \ function set defined in\n         XPath plus a function named here.\n      *\
    \  A set of variable bindings.  No means for initializing these is\n         defined.\
    \  Thus, the set of variable bindings used when\n         evaluating the XPath\
    \ expression is empty, and use of a variable\n         reference in the XPath\
    \ expression results in an error.\n      *  The set of namespace declarations\
    \ in scope for the XPath\n         expression.\n   As a result of the context\
    \ node setting, the XPath expressions\n   appearing in this transform will be\
    \ quite similar to those used in\n   used in [XSLT], except that the size and\
    \ position are always 1 to\n   reflect the fact that the transform is automatically\
    \ visiting every\n   node (in XSLT, one recursively calls the command apply-templates\
    \ to\n   visit the nodes of the input tree).\n   The function here() is defined\
    \ as follows:\n   Function: node-set here()\n   The here function returns a node-set\
    \ containing the attribute or\n   processing instruction node or the parent element\
    \ of the text node\n   that directly bears the XPath expression.  This expression\
    \ results in\n   an error if the containing XPath expression does not appear in\
    \ the\n   same XML document against which the XPath expression is being\n   evaluated.\n\
    \   Note: The function definition for here() is intended to be consistent\n  \
    \ with its definition in XPointer.  However, some minor differences are\n   presently\
    \ being discussed between the Working Groups.\n   As an example, consider creating\
    \ an enveloped signature (a Signature\n   element that is a descendant of an element\
    \ being signed).  Although\n   the signed content should not be changed after\
    \ signing, the elements\n   within the Signature element are changing (e.g., the\
    \ digest value\n   must be put inside the DigestValue and the SignatureValue must\
    \ be\n   subsequently calculated).  One way to prevent these changes from\n  \
    \ invalidating the digest value in DigestValue is to add an XPath\n   Transform\
    \ that omits all Signature elements and their descendants.\n   For example,\n\
    \   <Document>\n   <Signature xmlns=\"&dsig;\">\n     <SignedInfo>\n      ...\n\
    \       <Reference URI=\"\">\n         <Transforms>\n           <Transform\n \
    \            Algorithm=\"http://www.w3.org/TR/1999/REC-xpath-19991116\">\n   \
    \          <XPath xmlns:dsig=\"&dsig;\">\n             not(ancestor-or-self::dsig:Signature)\n\
    \             </XPath>\n           </Transform>\n         </Transforms>\n    \
    \     <DigestMethod\n          Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"\
    />\n         <DigestValue></DigestValue>\n       </Reference>\n     </SignedInfo>\n\
    \     <SignatureValue></SignatureValue>\n    </Signature>\n    ...\n   </Document>\n\
    \   Due to the null Reference URI in this example, the XPath transform\n   input\
    \ node-set contains all nodes in the entire parse tree starting\n   at the root\
    \ node (except the comment nodes).  For each node in this\n   node-set, the node\
    \ is included in the output node-set except if the\n   node or one of its ancestors\
    \ has a tag of Signature that is in the\n   namespace given by the replacement\
    \ text for the entity &dsig;.\n   A more elegant solution uses the here function\
    \ to omit only the\n   Signature containing the XPath Transform, thus allowing\
    \ enveloped\n   signatures to sign other signatures.  In the example above, use\
    \ the\n   XPath element:\n      <XPath xmlns:dsig=\"&dsig;\">\n      count(ancestor-or-self::dsig:Signature\
    \ |\n      here()/ancestor::dsig:Signature[1]) >\n      count(ancestor-or-self::dsig:Signature)</XPath>\n\
    \   Since the XPath equality operator converts node sets to string values\n  \
    \ before comparison, we must instead use the XPath union operator (|).\n   For\
    \ each node of the document, the predicate expression is true if\n   and only\
    \ if the node-set containing the node and its Signature\n   element ancestors\
    \ does not include the enveloped Signature element\n   containing the XPath expression\
    \ (the union does not produce a larger\n   set if the enveloped Signature element\
    \ is in the node-set given by\n   ancestor-or-self::Signature).\n"
- title: 6.6.4 Enveloped Signature Transform
  contents:
  - "6.6.4 Enveloped Signature Transform\n   Identifier:\n         http://www.w3.org/2000/09/xmldsig#enveloped-signature\n\
    \   An enveloped signature transform T removes the whole Signature\n   element\
    \ containing T from the digest calculation of the Reference\n   element containing\
    \ T.  The entire string of characters used by an XML\n   processor to match the\
    \ Signature with the XML production element is\n   removed.  The output of the\
    \ transform is equivalent to the output\n   that would result from replacing T\
    \ with an XPath transform containing\n   the following XPath parameter element:\n\
    \      <XPath xmlns:dsig=\"&dsig;\">\n      count(ancestor-or-self::dsig:Signature\
    \ |\n      here()/ancestor::dsig:Signature[1]) >\n      count(ancestor-or-self::dsig:Signature)</XPath>\n\
    \   The input and output requirements of this transform are identical to\n   those\
    \ of the XPath transform.  Note that it is not necessary to use\n   an XPath expression\
    \ evaluator to create this transform.  However,\n   this transform MUST produce\
    \ output in exactly the same manner as the\n   XPath transform parameterized by\
    \ the XPath expression above.\n"
- title: 6.6.5 XSLT Transform
  contents:
  - "6.6.5 XSLT Transform\n   Identifier:\n         http://www.w3.org/TR/1999/REC-xslt-19991116\n\
    \   The normative specification for XSL Transformations is [XSLT].  The\n   XSL\
    \ style sheet or transform to be evaluated appears as the character\n   content\
    \ of a transform parameter child element named XSLT.  The root\n   element of\
    \ a XSLT style sheet SHOULD be <xsl:stylesheet>.\n   This transform requires an\
    \ octet stream as input.  If the actual\n   input is an XPath node-set, then the\
    \ signature application should\n   attempt to covert it to octets (apply Canonical\
    \ XML]) as described in\n   the Reference Processing Model (section 4.3.3.2).\n\
    \   The output of this transform is an octet stream.  The processing\n   rules\
    \ for the XSL style sheet or transform element are stated in the\n   XSLT specification\
    \ [XSLT].  We RECOMMEND that XSLT transformauthors\n   use an output method of\
    \ xml for XML and HTML.  As XSLT\n   implementations do not produce consistent\
    \ serializations of their\n   output, we further RECOMMEND inserting a transformafter\
    \ the XSLT\n   transformto perform canonicalize the output.  These steps will\
    \ help\n   to ensure interoperability of the resulting signatures among\n   applications\
    \ that support the XSLT transform.  Note that if the\n   output is actually HTML,\
    \ then the result of these steps is logically\n   equivalent [XHTML].\n"
- title: 7.0 XML Canonicalization and Syntax Constraint Considerations
  contents:
  - "7.0 XML Canonicalization and Syntax Constraint Considerations\n   Digital signatures\
    \ only work if the verification calculations are\n   performed on exactly the\
    \ same bits as the signing calculations.  If\n   the surface representation of\
    \ the signed data can change between\n   signing and verification, then some way\
    \ to standardize the changeable\n   aspect must be used before signing and verification.\
    \  For example,\n   even for simple ASCII text there are at least three widely\
    \ used line\n   ending sequences.  If it is possible for signed text to be modified\n\
    \   from one line ending convention to another between the time of\n   signing\
    \ and signature verification, then the line endings need to be\n   canonicalized\
    \ to a standard form before signing and verification or\n   the signatures will\
    \ break.\n   XML is subject to surface representation changes and to processing\n\
    \   which discards some surface information.  For this reason, XML\n   digital\
    \ signatures have a provision for indicating canonicalization\n   methods in the\
    \ signature so that a verifier can use the same\n   canonicalization as the signer.\n\
    \   Throughout this specification we distinguish between the\n   canonicalization\
    \ of a Signature element and other signed XML data\n   objects.  It is possible\
    \ for an isolated XML document to be treated\n   as if it were binary data so\
    \ that no changes can occur.  In that\n   case, the digest of the document will\
    \ not change and it need not be\n   canonicalized if it is signed and verified\
    \ as such.  However, XML\n   that is read and processed using standard XML parsing\
    \ and processing\n   techniques is frequently changed such that some of its surface\n\
    \   representation information is lost or modified.  In particular, this\n   will\
    \ occur in many cases for the Signature and enclosed SignedInfo\n   elements since\
    \ they, and possibly an encompassing XML document, will\n   be processed as XML.\n\
    \   Similarly, these considerations apply to Manifest, Object, and\n   SignatureProperties\
    \ elements if those elements have been digested,\n   their DigestValue is to be\
    \ checked, and they are being processed as\n   XML.\n   The kinds of changes in\
    \ XML that may need to be canonicalized can be\n   divided into three categories.\
    \  There are those related to the basic\n   [XML], as described in 7.1 below.\
    \  There are those related to [DOM],\n   [SAX], or similar processing as described\
    \ in 7.2 below.  And, third,\n   there is the possibility of coded character set\
    \ conversion, such as\n   between UTF-8 and UTF-16, both of which all [XML] compliant\n\
    \   processors are required to support.\n   Any canonicalization algorithm should\
    \ yield output in a specific\n   fixed coded character set.  For both the minimal\
    \ canonicalization\n   defined in this specification and Canonical XML [XML-C14N]\
    \ that coded\n   character set is UTF-8 (without a byte order mark (BOM)).Neither\
    \ the\n   minimal canonicalization nor the Canonical XML [XML-C14N] algorithms\n\
    \   provide character normalization.  We RECOMMEND that signature\n   applications\
    \ create XML content (Signature elements and their\n   descendents/content) in\
    \ Normalization Form C [NFC] and check that any\n   XML being consumed is in that\
    \ form as well (if not, signatures may\n   consequently fail to validate).  Additionally,\
    \ none of these\n   algorithms provide data type normalization.  Applications\
    \ that\n   normalize data types in varying formats (e.g., (true, false) or\n \
    \  (1,0)) may not be able to validate each other's signatures.\n"
- title: 7.1 XML 1.0, Syntax Constraints, and Canonicalization
  contents:
  - "7.1 XML 1.0, Syntax Constraints, and Canonicalization\n   XML 1.0 [XML] defines\
    \ an interface where a conformant application\n   reading XML is given certain\
    \ information from that XML and not other\n   information.  In particular,\n \
    \  1. line endings are normalized to the single character #xA by\n      dropping\
    \ #xD characters if they are immediately followed by a #xA\n      and replacing\
    \ them with #xA in all other cases,\n   2. missing attributes declared to have\
    \ default values are provided to\n      the application as if present with the\
    \ default value,\n   3. character references are replaced with the corresponding\n\
    \      character,\n   4. entity references are replaced with the corresponding\
    \ declared\n      entity,\n   5. attribute values are normalized by\n      A.\
    \ replacing character and entity references as above,\n      B. replacing occurrences\
    \ of #x9, #xA, and #xD with #x20 (space)\n         except that the sequence #xD#xA\
    \ is replaced by a single space,\n         and\n      C. if the attribute is not\
    \ declared to be CDATA, stripping all\n         leading and trailing spaces and\
    \ replacing all interior runs of\n         spaces with a single space.\n   Note\
    \ that items (2), (4), and (5C) depend on the presence of a\n   schema, DTD or\
    \ similar declarations.  The Signature element type is\n   laxly schema valid\
    \ [XML-schema], consequently external XML or even\n   XML within the same document\
    \ as the signature may be (only) well\n   formed or from another namespace (where\
    \ permitted by the signature\n   schema); the noted items may not be present.\
    \  Thus, a signature with\n   such content will only be verifiable by other signature\
    \ applications\n   if the following syntax constraints are observed when generating\
    \ any\n   signed material including the SignedInfo element:\n   1. attributes\
    \ having default values be explicitly present,\n   2. all entity references (except\
    \ \"amp\", \"lt\", \"gt\", \"apos\", \"quot\",\n      and other character entities\
    \ not representable in the encoding\n      chosen) be expanded,\n   3. attribute\
    \ value white space be normalized\n"
- title: 7.2 DOM/SAX Processing and Canonicalization
  contents:
  - "7.2 DOM/SAX Processing and Canonicalization\n   In addition to the canonicalization\
    \ and syntax constraints discussed\n   above, many XML applications use the Document\
    \ Object Model [DOM] or\n   The Simple API for XML [SAX].  DOM maps XML into a\
    \ tree structure of\n   nodes and typically assumes it will be used on an entire\
    \ document\n   with subsequent processing being done on this tree.  SAX converts\
    \ XML\n   into a series of events such as a start tag, content, etc.  In either\n\
    \   case, many surface characteristics such as the ordering of attributes\n  \
    \ and insignificant white space within start/end tags is lost.  In\n   addition,\
    \ namespace declarations are mapped over the nodes to which\n   they apply, losing\
    \ the namespace prefixes in the source text and, in\n   most cases, losing where\
    \ namespace declarations appeared in the\n   original instance.\n   If an XML\
    \ Signature is to be produced or verified on a system using\n   the DOM or SAX\
    \ processing, a canonical method is needed to serialize\n   the relevant part\
    \ of a DOM tree or sequence of SAX events.  XML\n   canonicalization specifications,\
    \ such as [XML-C14N], are based only\n   on information which is preserved by\
    \ DOM and SAX.  For an XML\n   Signature to be verifiable by an implementation\
    \ using DOM or SAX, not\n   only must the XML1.0 syntax constraints given in the\
    \ previous section\n   be followed but an appropriate XML canonicalization MUST\
    \ be specified\n   so that the verifier can re-serialize DOM/SAX mediated input\
    \ into the\n   same octect stream that was signed.\n"
- title: 8.0 Security Considerations
  contents:
  - "8.0 Security Considerations\n   The XML Signature specification provides a very\
    \ flexible digital\n   signature mechanism.  Implementors must give consideration\
    \ to their\n   application threat models and to the following factors.\n"
- title: 8.1 Transforms
  contents:
  - "8.1 Transforms\n   A requirement of this specification is to permit signatures\
    \ to \"apply\n   to a part or totality of a XML document.\" (See [XML-Signature-RD,\n\
    \   section 3.1.3].)  The Transforms mechanism meets this requirement by\n   permitting\
    \ one to sign data derived from processing the content of\n   the identified resource.\
    \  For instance, applications that wish to\n   sign a form, but permit users to\
    \ enter limited field data without\n   invalidating a previous signature on the\
    \ form might use [XPath] to\n   exclude those portions the user needs to change.\
    \  Transforms may be\n   arbitrarily specified and may include encoding transforms,\n\
    \   canonicalization instructions or even XSLT transformations.  Three\n   cautions\
    \ are raised with respect to this feature in the following\n   sections.\n   Note,\
    \ core validation behavior does not confirm that the signed data\n   was obtained\
    \ by applying each step of the indicated transforms.\n   (Though it does check\
    \ that the digest of the resulting content\n   matches that specified in the signature.)\
    \  For example, some\n   application may be satisfied with verifying an XML signature\
    \ over a\n   cached copy of already transformed data.  Other applications might\n\
    \   require that content be freshly dereferenced and transformed.\n"
- title: 8.1.1 Only What is Signed is Secure
  contents:
  - "8.1.1 Only What is Signed is Secure\n   First, obviously, signatures over a transformed\
    \ document do not\n   secure any information discarded by transforms: only what\
    \ is signed\n   is secure.\n   Note that the use of Canonical  XML [XML-C14N]\
    \ ensures that all\n   internal entities and XML namespaces are expanded within\
    \ the content\n   being signed.  All entities are replaced with their definitions\
    \ and\n   the canonical form explicitly represents the namespace that an\n   element\
    \ would otherwise inherit.  Applications that do not\n   canonicalize XML content\
    \ (especially the SignedInfo element) SHOULD\n   NOT use internal entities and\
    \ SHOULD represent the namespace\n   explicitly within the content being signed\
    \ since they can not rely\n   upon canonicalization to do this for them.\n"
- title: 8.1.2 Only What is "Seen" Should be Signed
  contents:
  - "8.1.2 Only What is \"Seen\" Should be Signed\n   Additionally, the signature\
    \ secures any information introduced by the\n   transform: only what is \"seen\"\
    \ (that which is represented to the user\n   via visual, auditory or other media)\
    \ should be signed.  If signing is\n   intended to convey the judgment or consent\
    \ of a user (an automated\n   mechanism or person), then it is normally necessary\
    \ to secure as\n   exactly as practical the information that was presented to\
    \ that user.\n   Note that this can be accomplished by literally signing what\
    \ was\n   presented, such as the screen images shown a user.  However, this may\n\
    \   result in data which is difficult for subsequent software to\n   manipulate.\
    \  Instead, one can sign the data along with whatever\n   filters, style sheets,\
    \ client profile or other information that\n   affects its presentation.\n"
- title: 8.1.3 "See" What is Signed
  contents:
  - "8.1.3 \"See\" What is Signed\n   Just as a user should only sign what it \"sees,\"\
    \ persons and automated\n   mechanisms that trust the validity of a transformed\
    \ document on the\n   basis of a valid signature should operate over the data\
    \ that was\n   transformed (including canonicalization) and signed, not the original\n\
    \   pre-transformed data.  This recommendation applies to transforms\n   specified\
    \ within the signature as well as those included as part of\n   the document itself.\
    \  For instance, if an XML document includes an\n   embedded style sheet [XSLT]\
    \ it is the transformed document that that\n   should be represented to the user\
    \ and signed.  To meet this\n   recommendation where a document references an\
    \ external style sheet,\n   the content of that external resource should also\
    \ be signed as via a\n   signature Reference -- otherwise the content of that\
    \ external content\n   might change which alters the resulting document without\
    \ invalidating\n   the signature.\n   Some applications might operate over the\
    \ original or intermediary\n   data but should be extremely careful about potential\
    \ weaknesses\n   introduced between the original and transformed data.  This is\
    \ a\n   trust decision about the character and meaning of the transforms that\n\
    \   an application needs to make with caution.  Consider a\n   canonicalization\
    \ algorithm that normalizes character case (lower to\n   upper) or character composition\
    \ ('e and accent' to 'accented-e').  An\n   adversary could introduce changes\
    \ that are normalized and\n   consequently inconsequential to signature validity\
    \ but material to a\n   DOM processor.  For instance, by changing the case of\
    \ a character one\n   might influence the result of an XPath selection.  A serious\
    \ risk is\n   introduced if that change is normalized for signature validation\
    \ but\n   the processor operates over the original data and returns a different\n\
    \   result than intended.  Consequently, while we RECOMMEND all documents\n  \
    \ operated upon and generated by signature applications be in [NFC]\n   (otherwise\
    \ intermediate processors might unintentionally break the\n   signature) encoding\
    \ normalizations SHOULD NOT be done as part of a\n   signature transform, or (to\
    \ state it another way) if normalization\n   does occur, the application SHOULD\
    \ always \"see\" (operate over) the\n   normalized form.\n"
- title: 8.2 Check the Security Model
  contents:
  - "8.2 Check the Security Model\n   This specification uses public key signatures\
    \ and keyed hash\n   authentication codes.  These have substantially different\
    \ security\n   models.  Furthermore, it permits user specified algorithms which\
    \ may\n   have other models.\n   With public key signatures, any number of parties\
    \ can hold the public\n   key and verify signatures while only the parties with\
    \ the private key\n   can create signatures.  The number of holders of the private\
    \ key\n   should be minimized and preferably be one.  Confidence by verifiers\n\
    \   in the public key they are using and its binding to the entity or\n   capabilities\
    \ represented by the corresponding private key is an\n   important issue, usually\
    \ addressed by certificate or online authority\n   systems.\n   Keyed hash authentication\
    \ codes, based on secret keys, are typically\n   much more efficient in terms\
    \ of the computational effort required but\n   have the characteristic that all\
    \ verifiers need to have possession of\n   the same key as the signer.  Thus any\
    \ verifier can forge signatures.\n   This specification permits user provided\
    \ signature algorithms and\n   keying information designators.  Such user provided\
    \ algorithms may\n   have different security models.  For example, methods involving\n\
    \   biometrics usually depend on a physical characteristic of the\n   authorized\
    \ user that can not be changed the way public or secret keys\n   can be and may\
    \ have other security model differences.\n"
- title: 8.3 Algorithms, Key Lengths, Certificates, Etc.
  contents:
  - "8.3 Algorithms, Key Lengths, Certificates, Etc.\n   The strength of a particular\
    \ signature depends on all links in the\n   security chain.  This includes the\
    \ signature and digest algorithms\n   used, the strength of the key generation\
    \ [RANDOM] and the size of the\n   key, the security of key and certificate authentication\
    \ and\n   distribution mechanisms, certificate chain validation policy,\n   protection\
    \ of cryptographic processing from hostile observation and\n   tampering, etc.\n\
    \   Care must be exercised by applications in executing the various\n   algorithms\
    \ that may be specified in an XML signature and in the\n   processing of any \"\
    executable content\" that might be provided to such\n   algorithms as parameters,\
    \ such as XSLT transforms.  The algorithms\n   specified in this document will\
    \ usually be implemented via a trusted\n   library but even there perverse parameters\
    \ might cause unacceptable\n   processing or memory demand.  Even more care may\
    \ be warranted with\n   application defined algorithms.\n   The security of an\
    \ overall system will also depend on the security\n   and integrity of its operating\
    \ procedures, its personnel, and on the\n   administrative enforcement of those\
    \ procedures.  All the factors\n   listed in this section are important to the\
    \ overall security of a\n   system; however, most are beyond the scope of this\
    \ specification.\n"
- title: 9.0 Schema, DTD, Data Model, and Valid Examples
  contents:
  - "9.0 Schema, DTD, Data Model, and Valid Examples\n   XML Signature Schema Instance\n\
    \         http://www.w3.org/TR/2000/CR-xmldsig-core-20001031/xmldsig-\n      \
    \     core-schema.xsd   Valid XML schema instance based on the\n         20000922\
    \ Schema/DTD [XML-Schema].\n   XML Signature DTD\n         http://www.w3.org/TR/2000/CR-xmldsig-core-20001031/xmldsig-\n\
    \           core-schema.dtd\n   RDF Data Model\n         http://www.w3.org/TR/2000/CR-xmldsig-core-20001031/xmldsig-\n\
    \           datamodel-20000112.gif\n   XML Signature Object Example\n        \
    \ http://www.w3.org/TR/2000/CR-xmldsig-core-20001031/signature-\n           example.xml\
    \   A cryptographical invalid XML example that\n         includes foreign content\
    \ and validates under the schema.  (It\n         validates under the DTD when\
    \ the foreign content is removed or\n         the DTD is modified accordingly).\n\
    \   RSA XML Signature Example\n         http://www.w3.org/TR/2000/CR-xmldsig-core-20001031/signature-\n\
    \           example-rsa.xml\n         An XML Signature example with generated\
    \ cryptographic values by\n            Merlin Hughes and validated by Gregor Karlinger.\n\
    \   DSA XML Signature Example\n         http://www.w3.org/TR/2000/CR-xmldsig-core-20001031/signature-\n\
    \           example-dsa.xml   Similar to above but uses DSA.\n"
- title: 10.0 Definitions
  contents:
  - "10.0 Definitions\n   Authentication Code\n         A value generated from the\
    \ application of a shared key to a\n         message via a cryptographic algorithm\
    \ such that it has the\n         properties of message authentication (integrity)\
    \ but not signer\n         authentication\n   Authentication, Message\n      \
    \   \"A signature should identify what is signed, making it\n         impracticable\
    \ to falsify or alter either the signed matter or\n         the signature without\
    \ detection.\" [Digital Signature\n         Guidelines, ABA]\n   Authentication,\
    \ Signer\n         \"A signature should indicate who signed a document, message\
    \ or\n         record, and should be difficult for another person to produce\n\
    \         without authorization.\" [Digital Signature Guidelines, ABA]\n   Core\n\
    \         The syntax and processing defined by this specification,\n         including\
    \ core validation.  We use this term to distinguish\n         other markup, processing,\
    \ and applications semantics from our\n         own.\n   Data Object (Content/Document)\n\
    \         The actual binary/octet data being operated on (transformed,\n     \
    \    digested, or signed) by an application -- frequently an HTTP\n         entity\
    \ [HTTP].  Note that the proper noun Object designates a\n         specific XML\
    \ element.  Occasionally we refer to a data object\n         as a document or\
    \ as a resource's content.  The term element\n         content is used to describe\
    \ the data between XML start and end\n         tags [XML].  The term XML document\
    \ is used to describe data\n         objects which conform to the XML specification\
    \ [XML].\n   Integrity\n         The inability to change a message without also\
    \ changing the\n         signature value.  See message authentication.\n   Object\n\
    \         An XML Signature element wherein arbitrary (non-core) data may\n   \
    \      be placed.  An Object element is merely one type of digital\n         data\
    \ (or document) that can be signed via a Reference.\n   Resource\n         \"\
    A resource can be anything that has identity.  Familiar\n         examples include\
    \ an electronic document, an image, a service\n         (e.g., 'today's weather\
    \ report for Los Angeles'), and a\n         collection of other resources....\
    \  The resource is the\n         conceptual mapping to an entity or set of entities,\
    \ not\n         necessarily the entity which corresponds to that mapping at any\n\
    \         particular instance in time.  Thus, a resource can remain\n        \
    \ constant even when its content---the entities to which it\n         currently\
    \ corresponds---changes over time, provided that the\n         conceptual mapping\
    \ is not changed in the process.\" [URI] In\n         order to avoid a collision\
    \ of the term entity within the URI\n         and XML specifications, we use the\
    \ term data object, content or\n         document to refer to the actual bits\
    \ being operated upon.\n   Signature\n         Formally speaking, a value generated\
    \ from the application of a\n         private key to a message via a cryptographic\
    \ algorithm such\n         that it has the properties of signer authentication\
    \ and message\n         authentication (integrity).  (However, we sometimes use\
    \ the\n         term signature generically such that it encompasses\n        \
    \ Authentication Code values as well, but we are careful to make\n         the\
    \ distinction when the property of signer authentication is\n         relevant\
    \ to the exposition.)  A signature may be (non-\n         exclusively) described\
    \ as detached, enveloping, or enveloped.\n   Signature, Application\n        \
    \ An application that implements the MANDATORY (REQUIRED/MUST)\n         portions\
    \ of this specification; these conformance requirements\n         are over the\
    \ structure of the Signature element type and its\n         children (including\
    \ SignatureValue) and mandatory to support\n         algorithms.\n   Signature,\
    \ Detached\n         The signature is over content external to the Signature\n\
    \         element, and can be identified via a URI or transform.\n         Consequently,\
    \ the signature is \"detached\" from the content it\n         signs.  This definition\
    \ typically applies to separate data\n         objects, but it also includes the\
    \ instance where the Signature\n         and data object reside within the same\
    \ XML document but are\n         sibling elements.\n   Signature, Enveloping\n\
    \         The signature is over content found within an Object element of\n  \
    \       the signature itself.  The Object(or its content) is identified\n    \
    \     via a Reference (via a URI fragment identifier or transform).\n   Signature,\
    \ Enveloped\n         The signature is over the XML content that contains the\n\
    \         signature as an element.  The content provides the root XML\n      \
    \   document element.  Obviously, enveloped signatures must take\n         care\
    \ not to include their own value in the calculation of the\n         SignatureValue.\n\
    \   Transform\n         The processing of a octet stream from source content to\
    \ derived\n         content.  Typical transforms include XML Canonicalization,\n\
    \         XPath, and XSLT.\n   Validation, Core\n         The core processing\
    \ requirements of this specification\n         requiring signature validation\
    \ and SignedInfo reference\n         validation.\n   Validation, Reference\n \
    \        The hash value of the identified and transformed content,\n         specified\
    \ by Reference, matches its specified DigestValue.\n   Validation, Signature\n\
    \         The SignatureValue matches the result of processing SignedInfo\n   \
    \      with  CanonicalizationMethod and SignatureMethod as specified\n       \
    \  in Core Validation (section 3.2).\n   Validation, Trust/Application\n     \
    \    The application determines that the semantics associated with a\n       \
    \  signature are valid.  For example, an application may validate\n         the\
    \ time stamps or the integrity of the signer key -- though\n         this behavior\
    \ is external to this core specification.\n"
- title: 11.0 References
  contents:
  - "11.0 References\n   ABA               Digital Signature Guidelines.\n       \
    \              http://www.abanet.org/scitech/ec/isc/dsgfree.html\n   Bourret \
    \          Declaring Elements and Attributes in an XML DTD.\n                \
    \     Ron Bourret.  http://www.informatik.tu-\n                     darmstadt.de/DVS1/staff/bourret/xml/xmldtd.html\n\
    \   DOM               Document Object Model (DOM) Level 1 Specification.\n   \
    \                  W3C Recommendation. V. Apparao, S. Byrne, M.\n            \
    \         Champion, S. Isaacs, I. Jacobs, A. Le Hors, G.\n                   \
    \  Nicol, J. Robie, R. Sutor, C. Wilson, L. Wood.\n                     October\
    \ 1998.  http://www.w3.org/TR/1998/REC-DOM-\n                     Level-1-19981001/\n\
    \   DSS               FIPS PUB 186-1. Digital Signature Standard (DSS).\n    \
    \                 U.S. Department of Commerce/National Institute of\n        \
    \             Standards and Technology.\n                     http://csrc.nist.gov/fips/fips1861.pdf\n\
    \   HMAC              Krawczyk, H., Bellare, M. and R. Canetti, \"HMAC:\n    \
    \                 Keyed-Hashing for Message Authentication\", RFC\n          \
    \           2104, February 1997.\n                     http://www.ietf.org/rfc/rfc2104.txt\n\
    \   HTTP              Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,\n    \
    \                 Masinter, L., Leach, P. and T. Berners-Lee,\n              \
    \       \"Hypertext Transfer Protocol -- HTTP/1.1\", RFC\n                   \
    \  2616, June 1999.\n                     http://www.ietf.org/rfc/rfc2616.txt\n\
    \   KEYWORDS          Bradner, S., \"Key words for use in RFCs to Indicate\n \
    \                    Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   \
    \                  http://www.ietf.org/rfc/rfc2119.txt\n   LDAP-DN           Wahl,\
    \ M., Kille, S. and T. Howes, \"Lightweight\n                     Directory Access\
    \ Protocol (v3): UTF-8 String\n                     Representation of Distinguished\
    \ Names\", RFC 2253,\n                     December 1997.  http://www.ietf.org/rfc/rfc2253.txt\n\
    \   MD5               Rivest, R., \"The MD5 Message-Digest Algorithm\", RFC\n\
    \                     1321, April 1992.\n                     http://www.ietf.org/rfc/rfc1321.txt\n\
    \   MIME              Freed, N. and N. Borenstein, \"Multipurpose Internet\n \
    \                    Mail Extensions (MIME) Part One: Format of Internet\n   \
    \                  Message Bodies\", RFC 2045, November 1996.\n              \
    \       http://www.ietf.org/rfc/rfc2045.txt\n   NFC               TR15. Unicode\
    \ Normalization Forms. M. Davis, M.\n                     Drst. Revision 18: November\
    \ 1999.\n   PGP               Callas, J., Donnerhacke, L., Finney, H. and R.\n\
    \                     Thayer, \"OpenPGP Message Format\", November 1998.\n   \
    \                  http://www.ietf.org/rfc/rfc2440.txt\n   RANDOM            Eastlake,\
    \ D., Crocker, S. and J. Schiller,\n                     \"Randomness Recommendations\
    \ for Security\", RFC\n                     1750, December 1994.\n           \
    \          http://www.ietf.org/rfc/rfc1750.txt\n   RDF               RDF Schema\
    \ W3C Candidate Recommendation. D.\n                     Brickley, R.V. Guha.\
    \ March 2000.\n                     http://www.w3.org/TR/2000/CR-rdf-schema-20000327/\n\
    \                     RDF Model and Syntax W3C Recommendation. O.\n          \
    \           Lassila, R. Swick. February 1999.\n                     http://www.w3.org/TR/1999/REC-rdf-syntax-19990222/\n\
    \   1363              IEEE 1363: Standard Specifications for Public Key\n    \
    \                 Cryptography.  August 2000.\n   PKCS1             Kaliski, B.\
    \ and J. Staddon, \"PKCS #1: RSA\n                     Cryptography Specifications\
    \ Version 2.0\", RFC 2437,\n                     October 1998.  http://www.ietf.org/rfc/rfc2437.txt\n\
    \   SAX               SAX: The Simple API for XML David Megginson et. al.\n  \
    \                   May 1998.  http://www.megginson.com/SAX/index.html\n   SHA-1\
    \             FIPS PUB 180-1. Secure Hash Standard. U.S.\n                   \
    \  Department of Commerce/National Institute of\n                     Standards\
    \ and Technology.\n                     http://csrc.nist.gov/fips/fip180-1.pdf\n\
    \   Unicode           The Unicode Consortium. The Unicode Standard.\n        \
    \             http://www.unicode.org/unicode/standard/standard.html\n   UTF-16\
    \            Hoffman, P. and F. Yergeau, \"UTF-16, an encoding of\n          \
    \           ISO 10646\", RFC 2781, February 2000.\n                     http://www.ietf.org/rfc/rfc2781.txt\n\
    \   UTF-8             Yergeau, F., \"UTF-8, a transformation format of ISO\n \
    \                    10646\", RFC 2279, January 1998.\n                     http://www.ietf.org/rfc/rfc2279.txt\n\
    \   URI               Berners-Lee, T., Fielding, R. and L. Masinter,\n       \
    \              \"Uniform Resource Identifiers (URI): Generic\n               \
    \      Syntax\", RFC 2396, August 1998.\n                     http://www.ietf.org/rfc/rfc2396.txt\n\
    \   URI-Literal       Hinden, R., Carpenter, B. and L. Masinter, \"Format\n  \
    \                   for Literal IPv6 Addresses in URL's\", RFC 2732,\n       \
    \              December 1999.  http://www.ietf.org/rfc/rfc2732.txt\n   URL   \
    \            Berners-Lee, T., Masinter, L. and M. McCahill,\n                \
    \     \"Uniform Resource Locators (URL)\", RFC 1738,\n                     December\
    \ 1994.  http://www.ietf.org/rfc/rfc1738.txt\n   URN               Moats, R.,\
    \ \"URN Syntax\" RFC 2141, May 1997.\n                     http://www.ietf.org/rfc/rfc2141.txt\n\
    \                     Daigle, L., van Gulik, D., Iannella, R. and P.\n       \
    \              Faltstrom, \"URN Namespace Definition Mechanisms\",\n         \
    \            RFC 2611, June 1999.\n                     http://www.ietf.org/rfc/rfc2611.txt\n\
    \   X509v3            ITU-T Recommendation X.509 version 3 (1997).\n         \
    \            \"Information Technology - Open Systems\n                     Interconnection\
    \ - The Directory Authentication\n                     Framework\" ISO/IEC 9594-8:1997.\n\
    \   XHTML 1.0         XHTML(tm) 1.0: The Extensible Hypertext Markup\n       \
    \              Language Recommendation. S. Pemberton, D. Raggett,\n          \
    \           et. al. January 2000.\n                     http://www.w3.org/TR/2000/REC-xhtml1-20000126/\n\
    \   XLink             XML Linking Language. Working Draft. S. DeRose, D.\n   \
    \                  Orchard, B. Trafford. July 1999.\n                     http://www.w3.org/1999/07/WD-xlink-19990726\n\
    \   XML               Extensible Markup Language (XML) 1.0\n                 \
    \    Recommendation. T. Bray, J. Paoli, C. M. Sperberg-\n                    \
    \ McQueen. February 1998.\n                     http://www.w3.org/TR/1998/REC-xml-19980210\n\
    \   XML-C14N          J. Boyer, \"Canonical XML Version 1.0\", RFC 3076,\n   \
    \                  September 2000.  http://www.w3.org/TR/2000/CR-xml-\n      \
    \               c14n-20001026\n                     http://www.ietf.org/rfc/rfc3076.txt\n\
    \   XML-Japanese      XML Japanese Profile. W3C NOTE. M. MURATA April\n      \
    \               2000 http://www.w3.org/TR/2000/NOTE-japanese-xml-\n          \
    \           20000414/\n   XML-MT            Whitehead, E. and M. Murata, \"XML\
    \ Media Types\",\n                     July 1998.  http://www.ietf.org/rfc/rfc2376.txt\n\
    \   XML-ns            Namespaces in XML Recommendation. T. Bray, D.\n        \
    \             Hollander, A. Layman. Janury 1999.\n                     http://www.w3.org/TR/1999/REC-xml-names-19990114\n\
    \   XML-schema        XML Schema Part 1: Structures Working Draft. D.\n      \
    \               Beech, M. Maloney, N. Mendelshohn. September 2000.\n         \
    \            http://www.w3.org/TR/2000/WD-xmlschema-1-20000922/\n            \
    \         XML Schema Part 2: Datatypes Working Draft. P.\n                   \
    \  Biron, A. Malhotra. September 2000.\n                     http://www.w3.org/TR/2000/WD-xmlschema-2-20000922/\n\
    \   XML-Signature-RD  Reagle, J., \"XML Signature Requirements\", RFC 2907,\n\
    \                     April 2000.  http://www.w3.org/TR/1999/WD-xmldsig-\n   \
    \                  requirements-19991014\n                     http://www.ietf.org/rfc/rfc2807.txt\n\
    \   XPath             XML Path Language (XPath)Version 1.0.\n                \
    \     Recommendation. J. Clark, S. DeRose. October 1999.\n                   \
    \  http://www.w3.org/TR/1999/REC-xpath-19991116\n   XPointer          XML Pointer\
    \ Language (XPointer). Candidate\n                     Recommendation. S. DeRose,\
    \ R. Daniel, E. Maler.\n                     http://www.w3.org/TR/2000/CR-xptr-20000607\n\
    \   XSL               Extensible Stylesheet Language (XSL) Working Draft.\n  \
    \                   S. Adler, A. Berglund, J. Caruso, S. Deach, P.\n         \
    \            Grosso, E. Gutentag, A. Milowski, S. Parnell, J.\n              \
    \       Richman, S. Zilles. March 2000.\n                     http://www.w3.org/TR/2000/WD-xsl-\n\
    \                     20000327/xslspec.html\n   XSLT              XSL Transforms\
    \ (XSLT) Version 1.0. Recommendation.\n                     J. Clark. November\
    \ 1999.\n                     http://www.w3.org/TR/1999/REC-xslt-19991116.html\n"
- title: 12. Authors' Addresses
  contents:
  - "12. Authors' Addresses\n   Donald E. Eastlake 3rd\n   Motorola, Mail Stop: M2-450\n\
    \   20 Forbes Boulevard\n   Mansfield, MA 02048 USA\n   Phone: 1-508-261-5434\n\
    \   EMail: Donald.Eastlake@motorola.com\n   Joseph M. Reagle Jr., W3C\n   Massachusetts\
    \ Institute of Technology\n   Laboratory for Computer Science\n   NE43-350, 545\
    \ Technology Square\n   Cambridge, MA 02139\n   Phone: 1.617.258.7621\n   EMail:\
    \ reagle@w3.org\n   David Solo\n   Citigroup\n   909 Third Ave, 16th Floor\n \
    \  NY, NY 10043 USA\n   Phone: +1-212-559-2900\n   EMail: dsolo@alum.mit.edu\n"
- title: 13. Full Copyright Statement
  contents:
  - "13. Full Copyright Statement\n   Copyright (C) The Internet Society (2001). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
