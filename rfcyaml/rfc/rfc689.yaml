- title: __initial_text__
  contents:
  - "             TENEX NCP Finite State Machine for connections\n               \
    \         TENEX Memo Number 155\nThe attached figure describes the finite state\
    \ machine used in TENEX\nversion 1.33 to implement the ARPANET Host to Host protocol.\
    \ This\nThe components of a finite state machine (FSM) are States,\nEvents, and\
    \ Actions. These are listed below:\nStates Events Actions\n01 CLZD 00 RRFC 00\
    \ ANOP\n02 PNDO 01 CLSR 01 AFNY\n03 LSNG 02 CLSS 02 ACLS\n04 RFCR 03 CLZR 03 ARFC\n\
    05 CLW1 04 CLZS 04 AOPB\n06 RFCS 05 ACPT 05 AOPL\n07 OPND 06 CONN 06 ACLL\n10\
    \ CLSW 07 LISN 07 ACLO\n11 DATW 10 RRFN 10 AEOR\n12 RFN1 11 TIME 11 AEOS\n13 CLZW\
    \ 12 RRFB 12 AES1\n16 FREE 13 AABT\n14 ACKA\nNote that there are two kinds of\
    \ \"close\" events and actions: a close\nat the JSYS level (CLOSF) and one at\
    \ the host-to-host protocol level\n(CLS). The names in the above list contain\
    \ \"CLS\" if they are\nconcerned with host-to-host CLS, and CLZ if the are concerned\
    \ with\nCLOSF.\nEach state will be briefly described below, along with events\n\
    which may occur while a connection is in that state, and actions which\nare taken\
    \ as the state is advanced.\nA few overall notes: Actions are shown on the state\
    \ diagram\nfollowing a \"/''. Any transition without an action shown generates\n\
    \"ANOP\", a null action. The action \"AFNY\" means a \"funny\" event (i.e.,\n\
    one not expected in this state -- probably a bug) has occurred. The\nresult of\
    \ this action is an IMPBUG error printout. Any event NOT\nshown on the state diagram\
    \ causes the state to loop back to itself and\nan AFNY to be generated. These\
    \ are not shown explicitly on the\ndiagram. Another \"funny\" event is the execution\
    \ of an \"accept\" MTOPR\nby the user program when the state is not RFCR. However,\
    \ an errant\nuser program can do this, and no IMPBUG should be generated as a\n\
    result, so most states show a loop to self with no action (i.e., an\n\"ANOP\"\
    ) as a result of the ACPT event. The event \"TIME\" (also called\n\"HUNG\") simply\
    \ means that the socket has not changed state for a\nspecified time interval and\
    \ may need to be prodded along. This time\nis currently two minutes, except for\
    \ connections in error states where\nthe FSM is stepped faster to clear the connection\
    \ out.\nState 16 - FREE - Free connection\nA connection in this state has never\
    \ existed, or is almost completely\ndeleted. No events are expected in this state\
    \ except a program CLOSF\n(events CLZR or CLZS), or an erroneous Accept. The Accept\
    \ causes an\nto move into the CLZD state.\nState 01 - CLZD - Closed\nThis state\
    \ is very transitory. Events which cause a socket to be\ncreated also immediately\
    \ cause a further state change to either PNDG\n(if the event was the receipt of\
    \ an RFC), LSNG if the event was a\nListen JSYS - i.e., an OPENF with a null extension),\
    \ or RFCS (if the\nevent was an OPENF with a foreign socket specified). In the\
    \ latter\ncase, an RFC is sent to the foreign socket (ARFC).\nState 02 - PNDG\
    \ - Pending\nIn this state, an RFC has been received, but no local program has\n\
    indicated any interest in it. Events which may occur here are:\nLISN - a program\
    \ decides to listen on the socket. Since an RFC has\narrived, the FSM is stepped\
    \ to the same place it would have been if\nthe LISN and RRFC had occurred in the\
    \ other order; namely RFCR.\nCONN - a program decides to connect to the foreign\
    \ socket. This steps\nthe FSM to OPND and causes the AOPB action (open the link\
    \ and send the\nmatching RFC).\nTIME - The RFC (which was unsolicited) has sat\
    \ around for two minutes\nwithout any local program deigning to act upon it. Therefore,\
    \ to\nclear out the tables, it is refused (ACLS - a close is sent) and the\nnext\
    \ state is CLSW to await the matching CLS.\nCLSR or CLSS - The site who sent the\
    \ RFC has changed its mind and sent\na CLS, so we send the matching CLS and return\
    \ the socket to the FREE\nstate.\nState 10 - CLSW - Wait for CLS\nThis state is\
    \ entered when no further activity is required on a\nconnection except the receipt\
    \ of a CLS from the far end. The CLS has\nalready been sent to the far end. In\
    \ some cases, the file system\nCLOSF has not been done, so events CLZR and CLZS\
    \ cause loops into\nCLSW. The expected events are CLSR or CLSS, the receipt of\
    \ the CLS\nfrom the far end of the connection, and these step the connection to\n\
    state FREE. Also, if two minutes go by without the CLS, it is assumed\nthat the\
    \ required CLS response was lost by the foreign site so TIME\ncauses the same\
    \ action.\nState 03 - LSNG - Listening for RFC\nIn this state, no network activity\
    \ has occurred. The local program\nis, however, waiting for some attempt at connection.\
    \ This state does\nnot time out (event TIME loops into LSNG). The program may\
    \ decide to\nstop listening (e.g., it may simply log out of TENEX) so events CLZR\n\
    and CLZS move the connection to state FREE. The desired event is the\nreceipt\
    \ of an RFC for this socket. When an RFC arrives for a socket\nin a state other\
    \ than CLZD, it is checked to see that the byte size\nmatches that declared by\
    \ the user program. It then becomes event RRFC\nif the byte size matches, or RRFB\
    \ if it does not match. RRFB causes a\nState 06 - RFCS - An RFC has been sent.\n\
    This state is entered when a program does a Connect (an OPENF with a\nspecific\
    \ foreign socket). The RFC has been sent, and the matching RFC\nis awaited. If\
    \ the foreign site refuses the request for connection,\nsending a CLS, events\
    \ CLSR and CLSS cause the matching CLS to be sent\n(ACLS) and the socket is stepped\
    \ to FREE state. If the user program\ngives up waiting for the acceptance of the\
    \ connection (events CLZS or\nCLZR), a timeout happens (TIME) or an RFC arrives\
    \ but has the wrong\nbyte size (RRFB), the socket is stepped to CLSW and a CLS\
    \ is sent\n(ACLS). In the case of a properly accepted connection (event RRFC),\n\
    the link tables are opened (AOPL) and the connection state goes to\nOPND.\nState\
    \ 04 - RFCR - An RFC has been received.\nThis state is reached when a Listen has\
    \ been done by the user, and an\nRFC (with matching byte size) has been received.\
    \ This state and the\nPNDG state make up the queueing mechanism for received RFC's.\
    \ Queued\nRFC's in PNDG state are for sockets which are not listening (although\n\
    another connection with the same socket number may have been listening\n-- this\
    \ is just not the first one), so they time out after two\nminutes. In RFCR, though,\
    \ a program has done a listen. Therefore,\ntimeouts are suppressed to allow the\
    \ accept to be done (event TIME\nloops to RFCR).\nIf the foreign site tires of\
    \ waiting for the accept, it may send a CLS\n(events CLSR or CLSS) in which case\
    \ the matching CLS is sent (ACLS)\nand the socket moves to state FREE.\nAlso,\
    \ while in this state, the program may examine the foreign host\nand socket and\
    \ decide to refuse the connection by doing a CLOSF\n(events CLZR and CLZS). This\
    \ causes a CLS to be sent (action ACLS)\nand the socket steps to CLSW to await\
    \ the matching CLS.\nIf the program likes the request for connection, it will\
    \ accept it\nwith an MTOPR JSYS (event ACPT), causing action AOPB (sending the\n\
    matching RFC and opening the link tables), and the socket steps to\nstate OPND.\n\
    State 07 - OPND - opened.\nThis is the state during which data may be transferred.\
    \ Both RFC's\nhave been sent. Allocation and RFNM activity are not considered\
    \ in\nthis state diagram, but until one end or the other tries to close the\n\
    connection that activity proceeds at another level of the code. The\nexception\
    \ is event TIME. After two minutes of inactivity on the\nsocket, action ACKA (Check\
    \ allocation) occurs. This action causes\nallocate resynchronizing to occur if\
    \ the foreign host is known to\nunderstand that extension to the host-host protocol.\n\
    The remaining events and states are all associated with properly\ngetting a connection\
    \ closed and free, from the OPND state. This gets\ncomplicated. There are four\
    \ initial events: closes done locally and\ncloses from the remote end of the connection,\
    \ each of which may be for\na sending or a receiving connection. These are CLZR,\
    \ CLZS, CLSR and\nCLSS.\nback.\nCLZS - The local program closes a connection which\
    \ has been sending.\nThe state is stepped to DATW and action AEOS is performed.\
    \ AEOS\n(action end of send) sets a done flag which lower level routines use\n\
    to signal the FSM when the last data has been sent and acknowledged by\nRFNM.\n\
    CLSR - a CLS is received on a receive connection. This is the normal\n\"end of\
    \ file\" case. Action AEOR (end of receive) occurs and the state\nmoves to CLZW.\
    \ AEOR causes the same flags to be set as AEOS, and in\naddition (if this connection\
    \ is hooked to an NVT) causes an NVT DETACH\nto be performed.\nCLSS - a CLS is\
    \ received on a send connection, before we (the sending\nend) had closed it. Action\
    \ AESl occurs, which is the same as AEOS\nexcept that messages queued to go out\
    \ are discarded. The state moves\nto RFN2 to await the final RFNM.\nState 05 -\
    \ CLW1 - Close wait sub 1.\nThis state is the same as CLSW except that a link\
    \ table entry remains\nto be cleared out. A CLS has been sent and we await the\
    \ matching CLS.\nWhen it arrives, or two minutes go by, the state is stepped to\
    \ FREE\nand action ACLL (close link) is performed.\nState 11 - DATW - Final data\
    \ wait.\nThis state is NOT the normal waiting for data on an open connection.\n\
    It is only during the sending of the last of the data on a send\nconnection which\
    \ has been locally closed but which has not yet had all\nthe data accepted by\
    \ the far end.\nRRFN - Received final RFNM - event is the desired one. When this\n\
    occurs, all the data has been sent so we send a CLS (ACLS) and go to\nstate CLW1\
    \ to await the matching CLS.\nTIME may also occur. If it does, we pretend we had\
    \ seen the final\nRFNM and act as for RRFN. This timeout may occur either because\
    \ an\nRFNM has been lost by the IMP or the subnet, or because of\nunresposiveness\
    \ on the part of the foreign host. The latter could\noccur if the amount of data\
    \ to be sent when the CLOSF is done exceeds\nthe available allocation at that\
    \ time. If the foreign host does not\nsend allocation, or disagrees with us and\
    \ thinks allocation is\noutstanding, the timeout will free the socket.\nCLSS may\
    \ occur. If so, the far end has not accepted all the data, but\nwants to abort\
    \ the connection. This is treated about as it was when\nit occurred from the OPND\
    \ state, namely AES1 action, but must go to a\ndifferent next state, RFN1, to\
    \ distinguish the fact that a local CLOSF\nhas already occurred.\nState 14 - RFN2\
    \ - Final RFNM wait sub 2.\nThis state means that an unexpected close arrived\
    \ when we were happily\nsending data. We now await the final RFNM for any outstanding\
    \ data\nmessages. When this occurs, or if there were no outstanding messages,\n\
    the state moves to CLZW. ACLO is performed, sending a CLS (matching\nthe unexpected\
    \ CLS which arrived during OPND) and closing the link.\ntimeout from state DATW\
    \ above.\nWhile waiting for the RFNM, the local program may try to CLOSF the\n\
    connection (CLZR, CLZS). If so, we go to state RFN1 and continue to\nawait the\
    \ final RFNM.\nState 12 - RFN1 - Final RFNM wait sub 1. In this state, it's all\n\
    over but the final RFNM. When it arrives (RRFN) or two minutes go by\n(TIME),\
    \ we close the link tables and send a CLS to the foreign site\n(ACLO). Since the\
    \ CLS has already been received, the connection is\nnow gone and we step it to\
    \ FREE.\nState 13 - CLZW - Wait for program to close file.\nThis is the normal\
    \ state after an end of file when receiving, before\nthe CLOSF (CLZR) has occurred.\
    \ It is also the state of a send\nconnection which was aborted (CLS) by the receiver\
    \ (foreign host) when\nall sent messages have been RFNM'ed but the local CLOSF\
    \ (CLZS) has not\n"
