- contents:
  - '                          COPS usage for RSVP

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document describes usage directives for supporting COPS policy\n
    \  services in RSVP environments.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1 Introduction....................................................2\n
    \  2 RSVP values for COPS objects....................................2\n   2.1
    \ Common Header, client-type...................................2\n   2.2  Context
    Object (Context).....................................3\n   2.3  Client Specific
    Information (ClientSI).......................4\n   2.4  Decision Object (Decision)...................................4\n
    \  3 Operation of COPS for RSVP PEPs.................................6\n   3.1
    \ RSVP flows...................................................6\n   3.2  Expected
    Associations for RSVP Requests......................6\n   3.3  RSVP's Capacity
    Admission Control: Commit and Delete.........7\n   3.4  Policy Control Over PathTear
    and ResvTear....................7\n   3.5  PEP Caching COPS Decisions...................................7\n
    \  3.6  Using Multiple Context Flags in a single query...............8\n   3.7
    \ RSVP Error Reporting.........................................9\n   4 Security
    Considerations.........................................9\n   5 Illustrative Examples,
    Using COPS for RSVP......................9\n   5.1  Unicast Flow Example.........................................9\n
    \  5.2  Shared Multicast Flows......................................11\n   6 References.....................................................14\n
    \  7 Author Information and Acknowledgments.........................15\n   8 Full
    Copyright Statement.......................................17\n"
  title: Table of Contents
- contents:
  - "1  Introduction\n   The Common Open Policy Service (COPS) protocol is a query
    response\n   protocol used to exchange policy information between a network policy\n
    \  server and a set of clients [COPS]. COPS is being developed within\n   the
    RSVP Admission Policy Working Group (RAP WG) of the IETF,\n   primarily for use
    as a mechanism for providing policy-based admission\n   control over requests
    for network resources [RAP].\n   This document is based on and assumes prior knowledge
    of the RAP\n   framework [RAP] and the basic COPS [COPS] protocol. It provides\n
    \  specific usage directives for using COPS in outsourcing policy\n   control
    decisions by RSVP clients (PEPs) to policy servers (PDPs).\n   Given the COPS
    protocol design, RSVP directives are mainly limited to\n   RSVP applicability,
    interoperability and usage guidelines, as well as\n   client specific examples.\n"
  title: 1  Introduction
- contents:
  - "2  RSVP values for COPS objects\n   The usage of several COPS objects is affected
    when used with the RSVP\n   client type. This section describes these objects
    and their usage.\n"
  - contents:
    - "2.1 Common Header, client-type\n   RSVP is COPS client-type 1\n"
    title: 2.1 Common Header, client-type
  - contents:
    - "2.2 Context Object (Context)\n   The semantics of the Context object for RSVP
      is as follows:\n   R-Type (Request Type Flag)\n   Incoming-Message request\n
      \        This context is used when the PEP receives an incoming RSVP\n         message.
      The PDP may decide to accept or reject the incoming\n         message and may
      also apply other decision objects to it. If the\n         incoming message is
      rejected, RSVP should treat it as if it\n         never arrived.\n   Resource-Allocation
      request\n         This context is used when the PEP is about to commit local\n
      \        resources to an RSVP flow (admission control). This context\n         applies
      to Resv messages only. The decision whether to commit\n         local resources
      is made for the merge of all reservations\n         associated with an RSVP
      flow (which have arrived on a\n         particular interface, potentially from
      several RSVP Next-Hops).\n   Outgoing-Message request (forwarding an outgoing
      RSVP message)\n         This context is used when the PEP is about to forward
      an\n         outgoing RSVP message. The PDP may decide to allow or deny the\n
      \        outgoing message, as well as provide an outgoing policy data\n         object.\n
      \  M-Type (Message Type)\n   The M-Type field in the Context Object identifies
      the applicable RSVP\n   message type. M-Type values are identical to the values
      used in the\n   \"msg type\" field in the RSVP header [RSVP].\n   The following
      RSVP message types are supported in COPS:\n   Path\n   Resv\n   PathErr\n   ResvErr\n
      \  Other message types such as PathTear, ResvTear, and Resv Confirm are\n   not
      supported. The list of supported message types can only be\n   extended in later
      versions of RSVP and/or later version of this\n   document.\n"
    title: 2.2 Context Object (Context)
  - contents:
    - "2.3 Client Specific Information (ClientSI)\n   All objects that were received
      in an RSVP message are encapsulated\n   inside the Client Specific Information
      Object (Signaled ClientSI)\n   sent from the PEP to the remote PDP (see Section
      3.1. on multiple\n   flows packed in a single RSVP message).\n   The PEP and
      PDP share RSVP state, and the PDP is assumed to implement\n   the same RSVP
      functional specification as the PEP. In the case where\n   a PDP detects the
      absence of objects required by [RSVP] it should\n   return an <Error> in the
      Decision message indicating \"Mandatory\n   client-specific info missing\".
      If, on the other hand, the PDP detects\n   the absence of optional RSVP objects
      that are needed to approve the\n   Request against current policies, the PDP
      should return a negative\n   <Decision>.\n   Unlike the Incoming and Outgoing
      contexts, \"Resource Allocation\" is\n   not always directly associated with
      a specific RSVP message. In a\n   multicast session, it may represent the merging
      of multiple incoming\n   reservations. Therefore, the ClientSI object should
      specifically\n   contain the SESSION and STYLE objects along with the merged
      FLOWSPEC,\n   FILTERSPEC list, and SCOPE object (whenever relevant).\n"
    title: 2.3 Client Specific Information (ClientSI)
  - contents:
    - "2.4 Decision Object (Decision)\n   COPS provides the PDP with flexible controls
      over the PEP using\n   RSVP's response to messages. While accepting an RSVP
      message, PDPs\n   may provide preemption priority, trigger warnings, replace
      RSVP\n   objects, and much more, using Decision Commands, Flags, and Objects.\n
      \  DECISION COMMANDS\n   Only two commands apply to RSVP\n   Install\n     Positive
      Response:\n     Accept/Allow/Admit an RSVP message or local resource allocation.\n
      \  Remove\n     Negative Response:\n     Deny/Reject/Remove an RSVP message
      or local resource allocation.\n   DECISION FLAGS\n   The only decision flag
      that applies to RSVP:\n   Trigger Error\n     If this flag is set, RSVP should
      schedule a PathErr, in response\n     to a Path message, or a ResvErr (in response
      of a Resv message).\n   STATELESS POLICY DATA\n   This object may include one
      or more policy elements (as specified for\n   the RSVP Policy Data object [RSVP-EXT])
      which are assumed to be well\n   understood by the client's LPDP. The PEP should
      consider these as an\n   addition to the decision already received from the
      PDP (it can only\n   add, but cannot override it).\n   For example, given Policy
      Elements that specify a flow's preemption\n   priority, these elements may be
      included in an incoming Resv message\n   or may be provided by the PDP responding
      to a query.\n   Stateless objects must be well understood, but not necessarily\n
      \  supported by all PEPs. For example, assuming a standard policy\n   element
      for preemption priority, it is perfectly legitimate for some\n   PEPs not to
      support such preemption and to ignore it. The PDP must be\n   careful when using
      such objects. In particular, it must be prepared\n   for these objects to be
      ignored by PEPs.\n   Stateless Policy Data may be returned in decisions and
      apply\n   individually to each of the contexts flagged in REQ messages. When\n
      \  applied to Incoming, it is assumed to have been received as a\n   POLICY_DATA
      object in the incoming message. When applied to Resource\n   Allocation it is
      assumed to have been received on all merged incoming\n   messages. Last, when
      applied to outgoing messages it is assumed to\n   have been received in all
      messages contributing to the outgoing\n   message.\n   REPLACEMENT DATA\n   The
      Replacement object may contain multiple RSVP objects to be\n   replaced (from
      the original RSVP request). Typical replacement is\n   performed on the \"Forward
      Outgoing\" request (for instance, replacing\n   outgoing Policy Data), but is
      not limited, and can also be performed\n   on other contexts (such as \"Resources-Allocation
      Request\"). In other\n   cases, replacement of the RSVP FlowSpec object may
      be useful for\n   controlling resources across a trusted zone (with policy ignorant\n
      \  nodes (PINs). Currently, RSVP clients are only required to allow\n   replacement
      of three objects: POLICY_DATA, ERROR_SPEC, and FLOWSPEC,\n   but could optionally
      support replacement of other objects.\n   RSVP object replacement is performed
      in the following manner:\n   If no Replacement Data decision appears in a decision
      message, all\n   signaled objects are processed as if the PDP was not there.
      When an\n   object of a certain C-Num appears, it replaces ALL the instances
      of\n   C-Num objects in the RSVP message. If it appears empty (with a length\n
      \  of 4) it simply removes all instances of C-Num objects without adding\n   anything.\n"
    title: 2.4 Decision Object (Decision)
  title: 2  RSVP values for COPS objects
- contents:
  - '3  Operation of COPS for RSVP PEPs

    '
  - contents:
    - "3.1 RSVP flows\n   Policy Control is performed per RSVP flow, which is defined
      by the\n   atomic unit of an RSVP reservation (TC reservation). Reservation\n
      \  styles may also impact the definition of flows; a set of senders\n   which
      are considered as a single flow for WF reservation are\n   considered as a set
      of individual flows when FF style is used.\n   Multiple FF flows may be packed
      into a single Resv message. A packed\n   message must be unpacked where a separate
      request is issued for each\n   of the packed flows as if they were individual
      RSVP messages. Each\n   COPS Request should include the associated POLICY_DATA
      objects, which\n   are, by default, all POLICY_DATA objects in the packed message.\n
      \  Sophisticated PEPs, capable of looking inside policy objects, may\n   examine
      the POLICY_DATA or SCOPE object to narrow down the list of\n   associated flows
      (as an optimization).\n   Please note that the rules governing Packed RSVP message
      apply\n   equally to the Incoming as well as the Outgoing REQ context.\n"
    title: 3.1 RSVP flows
  - contents:
    - "3.2 Expected Associations for RSVP Requests\n   When making a policy decision,
      the PDP may consider both Resv as well\n   as its matching Path state (associated
      state). State association is\n   straightforward in the common unicast case
      since the RSVP flow\n   includes one Path state and one Resv state. In multicast
      cases this\n   correspondence may be more complicated, as the match may be many-to-\n
      \  many. The COPS protocol assumes that the PDP is RSVP knowledgeable\n   and
      capable of determining these associations based on the contents\n   of the Client
      REQ message and especially the ClientSI object.\n   For example, the PDP should
      be able to recognize activation and\n   deactivation of RSVP blockade state
      following discrete events like\n   the arrival of a ResvErr message (activate
      the blockade state) as\n   well as the change in the outgoing Resv message.\n"
    title: 3.2 Expected Associations for RSVP Requests
  - contents:
    - "3.3 RSVP's Capacity Admission Control: Commit and Delete\n   In RSVP, the admission
      of a new reservation requires both an\n   administrative approval (policy control)
      and capacity admission\n   control. After being approved by both, and after
      the reservation was\n   successfully installed, the PEP notifies the remote
      PDP by sending a\n   report message specifying the Commit type. The Commit type
      report\n   message signals when billing should effectively begin and performing\n
      \  heavier delayed operations (e.g., debiting a credit card) is\n   permissible
      by the PDP.\n   If, instead, a PDP approved reservation fails admission due
      to lack\n   of resources, the PEP must issue a no-commit report and fold back
      and\n   send an updated request to its previous state (previously installed\n
      \  reservation). If no state was previously installed, the PEP should\n   issue
      a delete (DRQ).\n"
    title: '3.3 RSVP''s Capacity Admission Control: Commit and Delete'
  - contents:
    - "3.4 Policy Control Over PathTear and ResvTear\n   PathTear and ResvTear messages
      are not controlled by this policy\n   architecture. This relies on two assumptions:
      First, that MD-5\n   authentication verifies that the Tear is received from
      the same node\n   that sent the initial reservation, and second, that it is\n
      \  functionally equivalent to that node holding off refreshes for this\n   reservation.
      When a ResvTear or PathTear is received at the PEP, all\n   affected states
      installed on the PDP should either be deleted or\n   updated by the PEP.\n"
    title: 3.4 Policy Control Over PathTear and ResvTear
  - contents:
    - "3.5 PEP Caching COPS Decisions\n   Because COPS is a stateful protocol, refreshes
      for RSVP Path and Resv\n   messages need not be constantly sent to the remote
      PDP. Once a\n   decision has been returned for a request, the PEP can cache
      that\n   decision and apply it to future refreshes. When the PEP detects a\n
      \  change in the corresponding Resv or Path message, it should update\n   the
      PDP with the new request-state. PEPs may continue to use the\n   cached state
      until receiving the PDP response. This case is very\n   different from initial
      admission of a flow; given that valid\n   credentials and authentication have
      already been established, the\n   relatively long RSVP refresh period, and the
      short PEP-PDP response\n   time, the tradeoff between expedient updates and
      attack prevention\n   leans toward expediency. However, this is really a PEP
      choice, and is\n   irrelevant to PDPs.\n   If the connection is lost between
      the PEP and the PDP, the cached\n   RSVP state may be retained for the RSVP
      timeout period to be used for\n   previously admitted flows (but cannot be applied
      to new or updated\n   state). If the connection can not be reestablished with
      the PDP or a\n   backup PDP after the timeout period, the PEP is expected to
      purge all\n   its cached decisions. Without applicable cached decision, the
      PEP\n   must either reject the flow or resort to its LPDP (if available) for\n
      \  decisions.\n   Once a connection is reestablished to a new (or the original)
      PDP the\n   PDP may issue a SSQ request. In this case, the PEP must reissue\n
      \  requests that correspond to the current RSVP state (as if all the\n   state
      has been updated recently). It should also include in its\n   LPDPDecision the
      current (cached) decision regarding each such state.\n"
    title: 3.5 PEP Caching COPS Decisions
  - contents:
    - "3.6 Using Multiple Context Flags in a single query\n   RSVP is a store-and-forward
      control protocol where messages are\n   processed in three distinctive steps
      (input, resource allocation, and\n   output). Each step requires a separate
      policy decision as indicated\n   by context flags (see Section 2.2). In many
      cases, setting multiple\n   context flags for bundling two or three operations
      together in one\n   request may significantly optimize protocol operations.\n
      \  The following rules apply for setting multiple Context flags:\n   a. Multiple
      context flags can be set only in two generic cases, which\n      represent a
      substantial portion of expected COPS transactions, and\n      can be guaranteed
      not to cause ambiguity.\n      Unicast FF:\n              [Incoming + Allocation
      + Outgoing]\n      Multicast with only one Resv message received on the interface\n
      \             [Incoming + Allocation]\n   b. Context events are ordered by time
      since every message must first\n      be processed as Incoming, then as Resource
      allocation and only\n      then as Outgoing. When multiple context flags are
      set, all\n      ClientSI objects included in the request are assumed to be\n
      \     processed according to the latest flag. This rule applies both to\n      the
      request (REQ) context as well as to the decision (DEC)\n      context.\n      For
      example, when combining Incoming + Allocation for an incoming\n      Resv message,
      the flowspec included in the ClientSI would be the\n      one corresponding
      to the Resource-Allocation context (TC).\n   c. Each decision is bound to a
      context object, which determines which\n      portion of the request context
      it applies to. When individual\n      decisions apply to different sub-groups
      of the context, the PDP\n      should send each group of decision objects encapsulated
      by the\n      context flags object with the context flags applicable to these\n
      \     objects set (see the examples in Section 5).\n"
    title: 3.6 Using Multiple Context Flags in a single query
  - contents:
    - "3.7 RSVP Error Reporting\n   RSVP uses the ERROR_SPEC object in PathErr and
      ResvErr messages to\n   report policy errors. While the contents of the ERROR_SPEC
      object are\n   defined in [RSVP,RSVP-EXT], the PDP is in the best position to\n
      \  provide its contents (sub-codes). This is performed in the following\n   manner:
      First, the PEP (RSVP) queries the PDP before sending a\n   PathErr or ResvErr,
      and then the PDP returns the constructed\n   ERROR_SPEC in the Replacement Data
      Decision Object.\n"
    title: 3.7 RSVP Error Reporting
  title: 3  Operation of COPS for RSVP PEPs
- contents:
  - "4  Security Considerations\n   This document relies on COPS for its signaling
    and its security.\n   Please refer to section \"Security Considerations\" in [COPS].\n
    \  Security for RSVP messages is provided by inter-router MD5\n   authentication
    [MD5], assuming a chain-of-trust model.  A likely\n   deployment scenario calls
    for PEPs to be deployed only at the network\n   edge (boundary nodes) while the
    core of the network (backbone)\n   consists of PIN nodes. In this scenario MD5
    trust (authentication) is\n   established between boundary (non-neighboring) PEPs.
    Such trust can\n   be achieved through internal signing (integrity) of the Policy
    Data\n   object itself, which is left unmodified as it passes through PIN\n   nodes
    (see [RSVP-EXT]).\n"
  title: 4  Security Considerations
- contents:
  - "5  Illustrative Examples, Using COPS for RSVP\n   This section details both typical
    unicast and multicast scenarios.\n"
  - contents:
    - "5.1 Unicast Flow Example\n   This section details the steps in using COPS for
      controlling a\n   Unicast RSVP flow. It details the contents of the COPS messages
      with\n   respect to Figure 1.\n                            PEP (router)\n                        +-----------------+\n
      \                       |                 |\n         R1 ------------+if1           if2+------------
      S1\n                        |                 |\n                        +-----------------+\n
      \          Figure 1: Unicast Example: a single PEP view\n   The PEP router has
      two interfaces (if1, if2). Sender S1 sends to\n   receiver R1.\n   A Path message
      arrives from S1:\n       PEP --> PDP   REQ := <Handle A> <Context: in & out,
      Path>\n                            <In-Interface if2> <Out-Interface if1>\n
      \                           <ClientSI: all objects in Path message>\n       PDP
      --> PEP   DEC := <Handle A> <Context: in & out, Path>\n                            <Decision:
      Command, Install>\n   A Resv message arrives from R1:\n       PEP --> PDP   REQ
      := <Handle B>\n                            <Context: in & allocation & out,
      Resv>\n                            <In-Interface if1> <Out-Interface if2>\n
      \                           <ClientSI: all objects in Resv message>\n       PDP
      --> PEP   DEC := <Handle B>\n                            <Context: in, Resv>\n
      \                           <Decision: command, Install>\n                            <Context:
      allocation, Resv>\n                            <Decision: command, Install>\n
      \                           <Decision: Stateless, Priority=7>\n                            <Context:
      out, Resv>\n                            <Decision: command, Install>\n                            <Decision:
      replacement, POLICY-DATA1>\n       PEP --> PDP   RPT := <Handle B>\n                            <Report
      type: commit>\n   Notice that the Decision was split because of the need to
      specify\n   different decision objects for different context flags.\n   Time
      Passes, the PDP changes its decision:\n       PDP --> PEP   DEC := <Handle B>\n
      \                           <Context: allocation, Resv>\n                            <Decision:
      command, Install>\n                            <Decision: Stateless, Priority=3>\n
      \  Because the priority is too low, the PEP preempts the flow:\n       PEP -->
      PDP   DRQ := <Handle B>\n                            <Reason Code: Preempted>\n
      \  Time Passes, the sender S1 ceases to send Path messages:\n       PEP -->
      PDP   DRQ := <Handle A>\n                            <Reason: Timeout>\n"
    title: 5.1 Unicast Flow Example
  - contents:
    - "5.2 Shared Multicast Flows\n   This section details the steps in using COPS
      for controlling a\n   multicast RSVP flow. It details the contents of the COPS
      messages\n   with respect to Figure 2.\n                             PEP (router)\n
      \                        +-----------------+\n                         |                 |\n
      \         R1-------------+ if1         if3 +--------- S1\n                         |
      \                |\n          R2----+        |                 |\n                |
      \       |                 |\n                +--------+ if2         if4 +---------
      S2\n                |        |                 |\n          R3----+        +-----------------+\n
      \          Figure 2: Multicast example: a single PEP view\n   Figure 2 shows
      an RSVP PEP (router) which has two senders (S1, S2)\n   and three receivers
      (R1, R2, R3) for the same multicast session.\n   Interface if2 is connected
      to a shared media.  In this example, we\n   assume that the multicast membership
      is already in place. No previous\n   RSVP messages were received, and the first
      to arrive is a Path\n   message on interface if3 from sender S1:\n       PEP
      --> PDP   REQ := <Handle A> <Context: in, Path>\n                            <In-interface
      if3>\n                            <ClientSI: all objects in incoming Path>\n
      \      PDP --> PEP   DEC := <Handle A> <Context: in, Path>\n                            <Decision:
      command, Install>\n   The PEP consults its forwarding table, and finds two outgoing\n
      \  interface for the path (if1, if2). The exchange below is for\n   interface
      if1, another exchange would likewise be completed for if2\n   using the new
      handle B2.\n       PEP --> PDP   REQ := <Handle B1> <Context: out, Path>\n                            <Out-interface
      if1>\n                            <clientSI: all objects in outgoing Path>\n
      \      PDP --> PEP   DEC := <Handle B1>\n                            <Context:
      out, Path>\n                            <Decision: command, Install>\n                            <Decision:
      Replacement, POLICY-DATA1>\n   Here, the PDP decided to allow the forwarding
      of the Path message and\n   provided the appropriate policy-data object for
      interface if1.\n   Next, a WF Resv message from receiver R2 arrives on interface
      if2.\n       PEP --> PDP   REQ := <Handle C> <Context: in & allocation, Resv>\n
      \                           <In-interface if2>\n                            <ClientSI:
      all objects in Resv message\n                             including RSpec1 >\n
      \      PDP --> PEP   DEC := <Handle C>\n                            <Context:
      in, Resv>\n                            <Decision: command, Install>\n                            <Context:
      allocation, Resv>\n                            <Decision: command, Install>\n
      \                           <Decision: Stateless, priority=5>\n       PEP -->
      PDP   RPT := <handle C> <Commit>\n   Here, the PDP approves the reservation
      and assigned it preemption\n   priority of 5. The PEP responded with a commit
      report.\n   The PEP needs to forward the Resv message upstream toward S1:\n
      \      PEP --> PDP   REQ := <Handle E> <Context: out, Resv>\n                            <out-interface
      if3>\n                            <Client info: all objects in outgoing Resv>\n
      \      PDP --> PEP   DEC := <Handle E>\n                            <Context:
      out, Resv>\n                            <Decision: command, Install>\n                            <Decision:
      replacement, POLICY-DATA2>\n   Note: The Context object is part of this DEC
      message even though it\n   may look redundant since the REQ specified only one
      context flag.\n   Next, a new WF Resv message from receiver R3 arrives on interface
      if2\n   with a higher RSpec (Rspec2). Given two reservations arrived on if2,\n
      \  it cannot perform a request with multiple context flags, and must\n   issue
      them separately.\n   The PEP re-issues an updated handle C REQ with a new context
      object\n   <Context: in , Resv>, and receives a DEC for handle C.\n       PEP
      --> PDP   REQ := <Handle F> <Context: in , Resv>\n                            <In-interface
      if2>\n                            <ClientSI: all objects in Resv message\n                             including
      RSpec2 >\n       PDP --> PEP   DEC := <Handle F> <Context: in , Resv>\n                            <Decision:
      command, Install>\n       PEP --> PDP   REQ := <Handle G> <Context: allocation,
      Resv>\n                            <In-interface if2>\n                            <ClientSI:
      all objects in merged Resv\n                             including RSpec2 >\n
      \      PDP --> PEP   DEC := <Handle G>\n                            <Context:
      allocation, Resv>\n                            <Decision: command, Install>\n
      \                           <Decision: Stateless, Priority=5>\n       PEP -->
      PDP   RPT := <handle G> <Commit>\n   Given the change in incoming reservations,
      the PEP needs to forward a\n   new outgoing Resv message upstream toward S1.
      This repeats exactly\n   the previous interaction of Handle E, except that the
      ClientSI\n   objects now reflect the merging of two reservations.\n   If an
      ResvErr arrives from S1, the PEP maps it to R3 only (because it\n   has a higher
      flowspec: Rspec2) the following takes place:\n       PEP --> PDP   REQ := <Handle
      H> <Context: in, ResvErr>\n                            <In-interface if3>\n
      \                           <ClientSI: all objects in incoming ResvErr>\n       PDP
      --> PEP   DEC := <Handle H> <Context: in, ResvErr>\n                            <Decision:
      command, Install>\n       PEP --> PDP   REQ := <Handle I> <Context: out, ResvErr>\n
      \                           <Out-interface if2>\n                            <ClientSI:
      all objects in outgoing ResvErr>\n       PDP --> PEP   DEC := <Handle I>\n                            <Context:
      out, ResvErr>\n                            <Decision: command, Install>\n                            <Decision:
      Replacement, POLICY-DATA3>\n   When S2 joins the session by sending a Path message,
      incoming and\n   outgoing Path requests are issued for the new Path. A new outgoing\n
      \  Resv request would be sent to S2.\n"
    title: 5.2 Shared Multicast Flows
  title: 5  Illustrative Examples, Using COPS for RSVP
- contents:
  - "6  References\n   [RSVP-EXT] Herzog, S., \"RSVP Extensions for Policy Control\",
    RFC\n              2750, January 2000.\n   [RAP]      Yavatkar, R., Pendarakis,
    D. and R. Guerin, \"A Framework\n              for Policy Based Admission Control\",
    RFC 2753, January\n              2000.\n   [COPS]     Boyle, J., Cohen, R., Durham,
    D., Herzog, S., Raja, R. and\n              A. Sastry, \"The COPS (Common Open
    Policy Service)\n              Protocol\", RFC 2748, January 2000.\n   [RSVP]
    \    Braden, R., Zhang, L., Berson, S., Herzog, S. and S.\n              Jamin,
    \"Resource ReSerVation Protocol (RSVP) - Functional\n              Specification\",
    RFC 2205, September 1997.\n"
  title: 6  References
- contents:
  - "7  Author Information and Acknowledgments\n   Special thanks to Andrew Smith
    and Timothy O'Malley our WG Chairs,\n   Fred Baker, Laura Cunningham, Russell
    Fenger, Roch Guerin, Ping Pan,\n   and Raj Yavatkar, for their valuable contributions.\n
    \  Jim Boyle\n   Level 3 Communications\n   1025 Eldorado Boulevard\n   Broomfield,
    CO 80021\n   Phone: 720.888.1192\n   EMail: jboyle@Level3.net\n   Ron Cohen\n
    \  CISCO Systems\n   4 Maskit St.\n   Herzeliya Pituach 46766 Israel\n   Phone:
    972.9.9700064\n   EMail: ronc@cisco.com\n   David Durham\n   Intel\n   2111 NE
    25th Avenue\n   Hillsboro, OR 97124\n   Phone: 503.264.6232\n   EMail: David.Durham@intel.com\n
    \  Raju Rajan\n   AT&T Labs Research\n   180 Park Ave., P.O. Box 971\n   Florham
    Park, NJ 07932\n   Phone: 973.360.7229\n   EMail: raju@research.att.com\n   Shai
    Herzog\n   IPHighway, Inc.\n   55 New York Avenue\n   Framingham, MA 01701\n   Phone:
    508.620.1141\n   EMail: herzog@iphighway.com\n   Arun Sastry\n   Cisco Systems\n
    \  4 The Square\n   Stockley Park\n   Uxbridge, Middlesex UB11 1BN\n   UK\n   Phone:
    +44-208-756-8693\n   EMail: asastry@cisco.com\n"
  title: 7  Author Information and Acknowledgments
- contents:
  - "8  Full Copyright Statement\n   Copyright (C) The Internet Society (2000).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: 8  Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
