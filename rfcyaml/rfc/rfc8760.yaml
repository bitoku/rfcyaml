- contents:
  - '   The Session Initiation Protocol (SIP) Digest Access Authentication

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document updates RFC 3261 by modifying the Digest Access\n
    \  Authentication scheme used by the Session Initiation Protocol (SIP)\n   to
    add support for more secure digest algorithms, e.g., SHA-256 and\n   SHA-512/256,
    to replace the obsolete MD5 algorithm.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8760.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n   This document may contain
    material from IETF Documents or IETF\n   Contributions published or made publicly
    available before November\n   10, 2008.  The person(s) controlling the copyright
    in some of this\n   material may not have granted the IETF Trust the right to
    allow\n   modifications of such material outside the IETF Standards Process.\n
    \  Without obtaining an adequate license from the person(s) controlling\n   the
    copyright in such materials, this document may not be modified\n   outside the
    IETF Standards Process, and derivative works of it may\n   not be created outside
    the IETF Standards Process, except to format\n   it for publication as an RFC
    or to translate it into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction\n     1.1.  Terminology\n   2.  Updates
    to the SIP Digest Access Authentication Scheme\n     2.1.  Hash Algorithms\n     2.2.
    \ Representation of Digest Values\n     2.3.  UAS Behavior\n     2.4.  UAC Behavior\n
    \    2.5.  Forking\n     2.6.  HTTP Digest Authentication Scheme Modifications\n
    \    2.7.  ABNF for SIP\n   3.  Security Considerations\n   4.  IANA Considerations\n
    \  5.  References\n     5.1.  Normative References\n     5.2.  Informative References\n
    \  Acknowledgments\n   Author's Address\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Session Initiation Protocol [RFC3261] uses the same
    mechanism as\n   the Hypertext Transfer Protocol (HTTP) does for authenticating
    users.\n   This mechanism is called \"Digest Access Authentication\".  It is a\n
    \  simple challenge-response mechanism that allows a server to challenge\n   a
    client request and allows a client to provide authentication\n   information in
    response to that challenge.  The version of Digest\n   Access Authentication that
    [RFC3261] references is specified in\n   [RFC2617].\n   The default hash algorithm
    for Digest Access Authentication is MD5.\n   However, it has been demonstrated
    that the MD5 algorithm is not\n   collision resistant and is now considered a
    bad choice for a hash\n   function (see [RFC6151]).\n   The HTTP Digest Access
    Authentication document [RFC7616] obsoletes\n   [RFC2617] and adds stronger algorithms
    that can be used with the\n   Digest Access Authentication scheme and establishes
    a registry for\n   these algorithms, known as the \"Hash Algorithms for HTTP Digest\n
    \  Authentication\" IANA registry, so that algorithms can be added in the\n   future.\n
    \  This document updates the Digest Access Authentication scheme used by\n   SIP
    to support the algorithms listed in the \"Hash Algorithms for HTTP\n   Digest
    Authentication\" IANA registry defined by [RFC7616].\n"
  - contents:
    - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
      \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\",
      \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described
      in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all\n
      \  capitals, as shown here.\n"
    title: 1.1.  Terminology
  title: 1.  Introduction
- contents:
  - "2.  Updates to the SIP Digest Access Authentication Scheme\n   This section describes
    the modifications to the operation of the\n   Digest mechanism as specified in
    [RFC3261] in order to support the\n   algorithms defined in the \"Hash Algorithms
    for HTTP Digest\n   Authentication\" IANA registry described in [RFC7616].\n   It
    replaces the reference used in [RFC3261] for Digest Access\n   Authentication,
    substituting [RFC7616] for the obsolete [RFC2617],\n   and describes the modifications
    to the usage of the Digest mechanism\n   in [RFC3261] resulting from that reference
    update.  It adds support\n   for the SHA-256 and SHA-512/256 algorithms [SHA2].
    \ It adds required\n   support for the \"qop\" parameter.  It provides additional
    User Agent\n   Client (UAC) and User Agent Server (UAS) procedures regarding usage\n
    \  of multiple SIP Authorization, WWW-Authenticate, and Proxy-\n   Authenticate
    header fields, including the order in which to insert\n   and process them.  It
    provides guidance regarding forking.  Finally,\n   it updates the SIP ABNF as
    required by the updates.\n"
  - contents:
    - "2.1.  Hash Algorithms\n   The Digest Access Authentication scheme has an \"algorithm\"
      parameter\n   that specifies the algorithm to be used to compute the digest
      of the\n   response.  The \"Hash Algorithms for HTTP Digest Authentication\"
      IANA\n   registry specifies the algorithms that correspond to 'algorithm'\n
      \  values.\n   [RFC3261] specifies only one algorithm, MD5, which is used by\n
      \  default.  This document extends [RFC3261] to allow use of any\n   algorithm
      listed in the \"Hash Algorithms for HTTP Digest\n   Authentication\" IANA registry.\n
      \  A UAS prioritizes which algorithm to use based on its policy, which\n   is
      specified in Section 2.3 and parallels the process used in HTTP\n   specified
      by [RFC7616].\n"
    title: 2.1.  Hash Algorithms
  - contents:
    - "2.2.  Representation of Digest Values\n   The size of the digest depends on
      the algorithm used.  The bits in\n   the digest are converted from the most
      significant to the least\n   significant bit, four bits at a time, to the ASCII
      representation as\n   follows.  Each set of four bits is represented by its
      familiar\n   hexadecimal notation from the characters 0123456789abcdef; that
      is,\n   binary 0000 is represented by the character '0', 0001 is represented\n
      \  by '1', and so on up to the representation of 1111 as 'f'.  If the\n   SHA-256
      or SHA-512/256 algorithm is used to calculate the digest,\n   then the digest
      will be represented as 64 hexadecimal characters.\n"
    title: 2.2.  Representation of Digest Values
  - contents:
    - "2.3.  UAS Behavior\n   When a UAS receives a request from a UAC, and an acceptable\n
      \  Authorization header field is not received, the UAS can challenge the\n   originator
      to provide credentials by rejecting the request with a\n   401/407 status code
      with the WWW-Authenticate/Proxy-Authenticate\n   header field, respectively.
      \ The UAS MAY add multiple WWW-\n   Authenticate/Proxy-Authenticate header fields
      to allow the UAS to\n   utilize the best available algorithm supported by the
      client.\n   If the UAS challenges the originator using multiple WWW-Authenticate/\n
      \  Proxy-Authenticate header fields with the same realm, then each of\n   these
      header fields MUST use a different digest algorithm.  The UAS\n   MUST add these
      header fields to the response in the order in which it\n   would prefer to see
      them used, starting with the most preferred\n   algorithm at the top.  The UAS
      cannot assume that the client will use\n   the algorithm specified in the topmost
      header field.\n"
    title: 2.3.  UAS Behavior
  - contents:
    - "2.4.  UAC Behavior\n   When the UAC receives a response with multiple WWW-Authenticate/\n
      \  Proxy-Authenticate header fields with the same realm, it SHOULD use\n   the
      topmost header field that it supports unless a local policy\n   dictates otherwise.
      \ The client MUST ignore any challenge it does not\n   understand.\n   When
      the UAC receives a 401 response with multiple WWW-Authenticate\n   header fields
      with different realms, it SHOULD retry and add an\n   Authorization header field
      containing credentials that match the\n   topmost header field of any of the
      realms unless a local policy\n   dictates otherwise.\n   If the UAC cannot respond
      to any of the challenges in the response,\n   then it SHOULD abandon attempts
      to send the request unless a local\n   policy dictates otherwise, e.g., the
      policy might indicate the use of\n   non-Digest mechanisms.  For example, if
      the UAC does not have\n   credentials or has stale credentials for any of the
      realms, the UAC\n   will abandon the request.\n"
    title: 2.4.  UAC Behavior
  - contents:
    - "2.5.  Forking\n   Section 22.3 of [RFC3261] discusses the operation of the
      proxy-to-\n   user authentication, which describes the operation of the proxy
      when\n   it forks a request.  This section clarifies that operation.\n   If
      a request is forked, various proxy servers and/or UAs may wish to\n   challenge
      the UAC.  In this case, the forking proxy server is\n   responsible for aggregating
      these challenges into a single response.\n   Each WWW-Authenticate and Proxy-Authenticate
      value received in\n   response to the forked request MUST be placed into the
      single\n   response that is sent by the forking proxy to the UAC.\n   When the
      forking proxy places multiple WWW-Authenticate and Proxy-\n   Authenticate header
      fields received from one downstream proxy into a\n   single response, it MUST
      maintain the order of these header fields.\n   The ordering of values received
      from different downstream proxies is\n   not significant.\n"
    title: 2.5.  Forking
  - contents:
    - "2.6.  HTTP Digest Authentication Scheme Modifications\n   This section describes
      the modifications and clarifications required\n   to apply the HTTP Digest Access
      Authentication scheme to SIP.  The\n   SIP scheme usage is similar to that for
      HTTP.  For completeness, the\n   bullets specified below are mostly copied from
      Section 22.4 of\n   [RFC3261]; the only semantic changes are specified in bullets
      1, 7,\n   and 8 below.\n   SIP clients and servers MUST NOT accept or request
      Basic\n   authentication.\n   The rules for Digest Access Authentication follow
      those defined in\n   HTTP, with \"HTTP/1.1\" [RFC7616] replaced by \"SIP/2.0\"
      in addition to\n   the following differences:\n   1.  The URI included in the
      challenge has the following ABNF\n       [RFC5234]:\n            URI  =  Request-URI
      ; as defined in RFC 3261, Section 25\n   2.  The \"uri\" parameter of the Authorization
      header field MUST be\n       enclosed in quotation marks.\n   3.  The ABNF for
      digest-uri-value is:\n               digest-uri-value  =  Request-URI\n   4.
      \ The example procedure for choosing a nonce based on ETag does not\n       work
      for SIP.\n   5.  The text in [RFC7234] regarding cache operation does not apply
      to\n       SIP.\n   6.  [RFC7616] requires that a server check that the URI
      in the\n       request line and the URI included in the Authorization header\n
      \      field point to the same resource.  In a SIP context, these two\n       URIs
      may refer to different users due to forwarding at some\n       proxy.  Therefore,
      in SIP, a UAS MUST check if the Request-URI in\n       the Authorization/Proxy-Authorization
      header field value\n       corresponds to a user for whom the UAS is willing
      to accept\n       forwarded or direct requests; however, it MAY still accept
      it if\n       the two fields are not equivalent.\n   7.  As a clarification
      to the calculation of the A2 value for message\n       integrity assurance in
      the Digest Access Authentication scheme,\n       implementers should assume
      that the hash of the entity-body\n       resolves to the hash of an empty string
      when the entity-body is\n       empty (that is, when SIP messages have no body):\n
      \      H(entity-body) = <algorithm>(\"\")\n       For example, when the chosen
      algorithm is SHA-256, then:\n       H(entity-body) = SHA-256(\"\") =\n      \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"\n
      \  8.  A UAS MUST be able to properly handle a \"qop\" parameter received\n
      \      in an Authorization/Proxy-Authorization header field, and a UAC\n       MUST
      be able to properly handle a \"qop\" parameter received in\n       WWW-Authenticate
      and Proxy-Authenticate header fields.  However,\n       for backward compatibility
      reasons, the \"qop\" parameter is\n       optional for clients and servers based
      on [RFC3261] to receive.\n       If the \"qop\" parameter is not specified,
      then the default value\n       is \"auth\".\n       A UAS MUST always send a
      \"qop\" parameter in WWW-Authenticate and\n       Proxy-Authenticate header
      field values, and a UAC MUST send the\n       \"qop\" parameter in any resulting
      authorization header field.\n   The usage of the Authentication-Info header
      field continues to be\n   allowed, since it provides integrity checks over the
      bodies and\n   provides mutual authentication.\n"
    title: 2.6.  HTTP Digest Authentication Scheme Modifications
  - contents:
    - "2.7.  ABNF for SIP\n   This document updates the ABNF [RFC5234] for SIP as
      follows.\n   It extends the request-digest as follows to allow for different\n
      \  digest sizes:\n         request-digest = LDQUOT *LHEX RDQUOT\n   The number
      of hex digits is implied by the length of the value of the\n   algorithm used,
      with a minimum size of 32.  A parameter with an empty\n   value (empty string)
      is allowed when the UAC has not yet received a\n   challenge.\n   It extends
      the algorithm parameter as follows to allow any algorithm\n   in the registry
      to be used:\n   algorithm =  \"algorithm\" EQUAL ( \"MD5\" / \"MD5-sess\" /
      \"SHA-256\" /\n   \"SHA-256-sess\" /\n   \"SHA-512-256\" /  \"SHA-512-256-sess\"
      / token )\n"
    title: 2.7.  ABNF for SIP
  title: 2.  Updates to the SIP Digest Access Authentication Scheme
- contents:
  - "3.  Security Considerations\n   This specification adds new secure algorithms
    to be used with the\n   Digest mechanism to authenticate users.  The obsolete
    MD5 algorithm\n   remains only for backward compatibility with [RFC2617], but
    its use\n   is NOT RECOMMENDED.\n   This opens the system to the potential for
    a downgrade attack by an\n   on-path attacker.  The most effective way of dealing
    with this type\n   of attack is to either validate the client and challenge it\n
    \  accordingly or remove the support for backward compatibility by not\n   supporting
    MD5.\n   See Section 5 of [RFC7616] for a detailed security discussion of the\n
    \  Digest Access Authentication scheme.\n"
  title: 3.  Security Considerations
- contents:
  - "4.  IANA Considerations\n   [RFC7616] defines an IANA registry named \"Hash Algorithms
    for HTTP\n   Digest Authentication\" to simplify the introduction of new algorithms\n
    \  in the future.  This document specifies that algorithms defined in\n   that
    registry may be used in SIP digest authentication.\n   This document has no actions
    for IANA.\n"
  title: 4.  IANA Considerations
- contents:
  - '5.  References

    '
  - contents:
    - "5.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC3261]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n              A.,
      Peterson, J., Sparks, R., Handley, M., and E.\n              Schooler, \"SIP:
      Session Initiation Protocol\", RFC 3261,\n              DOI 10.17487/RFC3261,
      June 2002,\n              <https://www.rfc-editor.org/info/rfc3261>.\n   [RFC7234]
      \ Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,\n              Ed.,
      \"Hypertext Transfer Protocol (HTTP/1.1): Caching\",\n              RFC 7234,
      DOI 10.17487/RFC7234, June 2014,\n              <https://www.rfc-editor.org/info/rfc7234>.\n
      \  [RFC7616]  Shekh-Yusef, R., Ed., Ahrens, D., and S. Bremer, \"HTTP\n              Digest
      Access Authentication\", RFC 7616,\n              DOI 10.17487/RFC7616, September
      2015,\n              <https://www.rfc-editor.org/info/rfc7616>.\n   [RFC8174]
      \ Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n   [SHA2]     National Institute
      of Standards and Technology, \"Secure\n              Hash Standard (SHS)\",
      DOI 10.6028/NIST.FIPS.180-4,\n              FIPS 180-4, August 2015,\n              <https://doi.org/10.6028/NIST.FIPS.180-4>.\n"
    title: 5.1.  Normative References
  - contents:
    - "5.2.  Informative References\n   [RFC2617]  Franks, J., Hallam-Baker, P., Hostetler,
      J., Lawrence, S.,\n              Leach, P., Luotonen, A., and L. Stewart, \"HTTP\n
      \             Authentication: Basic and Digest Access Authentication\",\n              RFC
      2617, DOI 10.17487/RFC2617, June 1999,\n              <https://www.rfc-editor.org/info/rfc2617>.\n
      \  [RFC5234]  Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax\n
      \             Specifications: ABNF\", STD 68, RFC 5234,\n              DOI 10.17487/RFC5234,
      January 2008,\n              <https://www.rfc-editor.org/info/rfc5234>.\n   [RFC6151]
      \ Turner, S. and L. Chen, \"Updated Security Considerations\n              for
      the MD5 Message-Digest and the HMAC-MD5 Algorithms\",\n              RFC 6151,
      DOI 10.17487/RFC6151, March 2011,\n              <https://www.rfc-editor.org/info/rfc6151>.\n"
    title: 5.2.  Informative References
  title: 5.  References
- contents:
  - "Acknowledgments\n   The author would like to thank the following individuals
    for their\n   careful review, comments, and suggestions: Paul Kyzivat, Olle\n
    \  Johansson, Dale Worley, Michael Procter, Inaki Baz Castillo, Tolga\n   Asveren,
    Christer Holmberg, Brian Rosen, Jean Mahoney, Adam Roach,\n   Barry Leiba, Roni
    Even, Eric Vyncke, Benjamin Kaduk, Alissa Cooper,\n   Roman Danyliw, Alexey Melnikov,
    and Maxim Sobolev.\n"
  title: Acknowledgments
- contents:
  - "Author's Address\n   Rifaat Shekh-Yusef\n   Avaya\n   425 Legget Dr.\n   Ottawa
    Ontario\n   Canada\n"
  title: Author's Address
