- contents:
  - "         Transparent Interconnection of Lots of Links (TRILL):\n                Pseudo-Nickname
    for Active-Active Access\n"
  title: __initial_text__
- contents:
  - "Abstract\n   The IETF TRILL (Transparent Interconnection of Lots of Links)\n
    \  protocol provides support for flow-level multipathing for both\n   unicast
    and multi-destination traffic in networks with arbitrary\n   topology.  Active-active
    access at the TRILL edge is the extension of\n   these characteristics to end
    stations that are multiply connected to\n   a TRILL campus as discussed in RFC
    7379.  In this document, the edge\n   RBridge (Routing Bridge, or TRILL switch)
    group providing active-\n   active access to such an end station is represented
    as a virtual\n   RBridge.  Based on the concept of the virtual RBridge, along
    with its\n   pseudo-nickname, this document specifies a method for TRILL active-\n
    \  active access by such end stations.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7781.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n
    \     1.1. Terminology and Acronyms ...................................6\n   2.
    Overview ........................................................7\n   3. Virtual
    RBridge and Its Pseudo-Nickname .........................9\n   4. Auto-Discovery
    of Member RBridges ..............................10\n      4.1. Discovering Member
    RBridge for an RBv .....................11\n      4.2. Selection of Pseudo-Nickname
    for an RBv ...................13\n   5. Distribution Trees and Designated Forwarder
    ....................14\n      5.1. Different Trees for Different Member RBridges
    .............15\n      5.2. Designated Forwarder for Member RBridges ..................16\n
    \     5.3. Ingress Nickname Filtering ................................18\n   6.
    TRILL Traffic Processing .......................................19\n      6.1.
    Ingressing Native Frames ..................................19\n      6.2. Egressing
    TRILL Data Packets ..............................20\n           6.2.1. Unicast
    TRILL Data Packets .........................20\n           6.2.2. Multi-Destination
    TRILL Data Packets ...............21\n   7. MAC Information Synchronization in
    Edge Group ..................22\n   8. Member Link Failure in an RBv ..................................23\n
    \     8.1. Link Protection for Unicast Frame Egressing ...............24\n   9.
    TLV Extensions for Edge RBridge Group ..........................24\n      9.1.
    PN-LAALP-Membership APPsub-TLV ............................24\n      9.2. PN-RBv
    APPsub-TLV .........................................26\n      9.3. PN-MAC-RI-LAALP
    Boundary APPsub-TLVs ......................27\n      9.4. LAALP IDs .................................................29\n
    \  10. OAM Packets ...................................................29\n   11.
    Configuration Consistency .....................................29\n   12. Security
    Considerations .......................................30\n   13. IANA Considerations
    ...........................................31\n   14. References ....................................................31\n
    \     14.1. Normative References .....................................31\n      14.2.
    Informative References ...................................33\n   Acknowledgments
    ...................................................34\n   Contributors ......................................................34\n
    \  Authors' Addresses ................................................35\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The IETF TRILL (Transparent Interconnection of Lots of Links)\n
    \  protocol [RFC6325] provides optimal pair-wise data frame forwarding\n   without
    configuration, safe forwarding even during periods of\n   temporary loops, and
    support for multipathing of both unicast and\n   multicast traffic.  TRILL accomplishes
    this by using IS-IS [IS-IS]\n   [RFC7176] link-state routing and encapsulating
    traffic using a header\n   that includes a Hop Count.  Devices that implement
    TRILL are called\n   RBridges (Routing Bridges) or TRILL switches.\n   In the
    base TRILL protocol, an end node can be attached to the TRILL\n   campus via a
    point-to-point link or a shared link such as a bridged\n   LAN (Local Area Network).
    \ Although there might be more than one edge\n   RBridge on a shared link, to
    avoid potential forwarding loops, one\n   and only one of the edge RBridges is
    permitted to provide forwarding\n   service for end-station traffic in each VLAN
    (Virtual LAN).  That\n   RBridge is referred to as the Appointed Forwarder (AF)
    for that VLAN\n   on the link [RFC6325] [RFC6439].  However, in some practical\n
    \  deployments, to increase the access bandwidth and reliability, an end\n   station
    might be multiply connected to several edge RBridges, and all\n   of the uplinks
    are handled via a Local Active-Active Link Protocol\n   (LAALP [RFC7379]) such
    as Multi-Chassis Link Aggregation (MC-LAG) or\n   Distributed Resilient Network
    Interconnect (DRNI) [802.1AX].  In this\n   case, it is required that traffic
    can be ingressed into, and egressed\n   from, the TRILL campus by any of the RBridges
    for each given VLAN.\n   These RBridges constitute an Active-Active Edge (AAE)
    RBridge group.\n   With an LAALP, traffic with the same VLAN and source Media
    Access\n   Control (MAC) address but belonging to different flows will\n   frequently
    be sent to different member RBridges of the AAE group and\n   then ingressed into
    the TRILL campus.  When an egress RBridge\n   receives such TRILL Data packets
    ingressed by different RBridges, it\n   learns different correspondences between
    a {Data Label and\n   MAC address} and nickname continuously when decapsulating
    the packets\n   if it has data-plane address learning enabled.  This issue is
    known\n   as \"MAC address flip-flopping\"; it makes most TRILL switches behave\n
    \  badly and causes the returning traffic to reach the destination via\n   different
    paths, resulting in persistent reordering of the frames.\n   In addition to this
    issue, other issues, such as duplicate egressing\n   and loopback of multi-destination
    frames, may also disturb an end\n   station multiply connected to the member RBridges
    of an AAE group\n   [RFC7379].\n   This document addresses the AAE issues of TRILL
    by specifying how\n   members of an edge RBridge group can be represented by a
    virtual\n   RBridge (RBv) and assigned a pseudo-nickname.  A member RBridge of\n
    \  such a group uses a pseudo-nickname instead of its own nickname as\n   the
    ingress RBridge nickname when ingressing frames received on\n   attached LAALP
    links.  Other methods are possible: for example, the\n   specification in this
    document and the specification in [RFC7782]\n   could be simultaneously deployed
    for different AAE groups in the same\n   campus.  If the method defined in [RFC7782]
    is used, edge TRILL\n   switches need to support the capability indicated by the
    Capability\n   Flags APPsub-TLV as specified in Section 4.2 of [RFC7782].  If
    the\n   method defined in this document is adopted, all TRILL switches need\n
    \  to support the Affinity sub-TLV defined in [RFC7176] and [RFC7783].\n   For
    a TRILL campus that deploys both of these AAE methods, TRILL\n   switches are
    required to support both methods.  However, it is\n   desirable to only adopt
    one method in a TRILL campus so that the\n   operating expense, complexity of
    troubleshooting, etc., can be\n   reduced.\n   The main body of this document
    is organized as follows:\n   o  Section 2 provides an overview of the TRILL active-active
    access\n      issues and the reason that a virtual RBridge (RBv) is used to\n
    \     resolve the issues.\n   o  Section 3 describes the concept of a virtual
    RBridge (RBv) and its\n      pseudo-nickname.\n   o  Section 4 describes how edge
    RBridges can support an RBv\n      automatically and get a pseudo-nickname for
    the RBv.\n   o  Section 5 discusses how to protect multi-destination traffic\n
    \     against disruption due to Reverse Forwarding Path (RPF) check\n      failure,
    duplication, forwarding loops, etc.\n   o  Section 6 covers the special processing
    of native frames and TRILL\n      Data packets at member RBridges of an RBv (also
    referred to as an\n      Active-Active Edge (AAE) RBridge group).\n   o  Section
    7 describes the MAC information synchronization among the\n      member RBridges
    of an RBv.\n   o  Section 8 discusses protection against downlink failure at a\n
    \     member RBridge.\n   o  Section 9 lists the necessary TRILL code points and
    data\n      structures for a pseudo-nickname AAE RBridge group.\n"
  - contents:
    - "1.1.  Terminology and Acronyms\n   This document uses the acronyms and terms
      defined in [RFC6325] and\n   [RFC7379], as well as the following additional
      acronyms:\n   AAE: Active-active Edge RBridge group.  A group of edge RBridges
      to\n      which at least one Customer Equipment (CE) node is multiply\n      attached
      with an LAALP.  AAE is also referred to as \"edge group\"\n      or \"virtual
      RBridge\" in this document.\n   Campus: A TRILL network consisting of TRILL
      switches, links, and\n      possibly bridges bounded by end stations and IP
      routers.  For\n      TRILL, there is no \"academic\" implication in the name
      \"campus\".\n   CE: Customer Equipment (end station or bridge).  The device
      can be\n      either physical or virtual equipment.\n   Data Label: VLAN or
      Fine-Grained Label (FGL).\n   DF: Designated Forwarder.\n   DRNI: Distributed
      Resilient Network Interconnect.  A link aggregation\n      specified in [802.1AX]
      that can provide an LAALP between (a) one,\n      two, or three CEs and (b)
      two or three RBridges.\n   E-L1FS: Extended Level 1 Flooding Scope [RFC7356].\n
      \  ESADI: End-Station Address Distribution Information.\n   FGL: Fine-Grained
      Labeling or Fine-Grained Labeled or Fine-Grained\n      Label [RFC7172].\n   LAALP:
      Local Active-Active Link Protocol [RFC7379], e.g., MC-LAG\n      or DRNI.\n
      \  MC-LAG: Multi-Chassis Link Aggregation.  Proprietary extensions of\n      Link
      Aggregation [802.1AX] that can provide an LAALP between one\n      CE and two
      or more RBridges.\n   OE-flag: A flag used by a member RBridge of a given LAALP
      to tell\n      other edge RBridges of this LAALP whether this LAALP is willing
      to\n      share an RBv with other LAALPs that multiply attach to the same\n
      \     set of edge RBridges as the given LAALP does.  When this flag for\n      an
      LAALP is 1, it means that the LAALP needs to be served by an\n      RBv by itself
      and is not willing to share, that is, it should\n      Occupy an RBv Exclusively
      (OE).\n   RBv: Virtual RBridge.  An alias for \"active-active edge RBridge\n
      \     group\" in this document.\n   vDRB: The Designated RBridge in an RBv.
      \ It is responsible for\n      deciding the pseudo-nickname for the RBv.\n   The
      key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n
      \  \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in
      this\n   document are to be interpreted as described in RFC 2119 [RFC2119].\n"
    title: 1.1.  Terminology and Acronyms
  title: 1.  Introduction
- contents:
  - "2.  Overview\n   To minimize impact during failures and maximize available access\n
    \  bandwidth, Customer Equipment (referred to as \"CE\" in this document)\n   may
    be multiply connected to the TRILL campus via multiple edge\n   RBridges.\n   Figure
    1 shows such a typical deployment scenario, where CE1 attaches\n   to RB1, RB2,
    ... RBk and treats all of the uplinks as an LAALP\n   bundle.  RB1, RB2, ... RBk
    then constitute an AAE RBridge group for\n   CE1 in this LAALP.  Even if a member
    RBridge or an uplink fails, CE1\n   will still get frame forwarding service from
    the TRILL campus if\n   there are still member RBridges and uplinks available
    in the AAE\n   group.  Furthermore, CE1 can make flow-based load balancing across\n
    \  the available member links of the LAALP bundle in the AAE group when\n   it
    communicates with other CEs across the TRILL campus [RFC7379].\n                         ----------------------\n
    \                       |                      |\n                        |     TRILL
    Campus     |\n                        |                      |\n                         ----------------------\n
    \                            |       |    |\n                       +-----+       |
    \   +--------+\n                       |             |             |\n                   +------+
    \     +------+      +------+\n                   |(RB1) |      |(RB2) |      |
    (RBk)|\n                   +------+      +------+      +------+\n                     |..|
    \         |..|          |..|\n                     |  +----+     |  |          |
    \ |\n                     |   +---|-----|--|----------+  |\n                     |
    +-|---|-----+  +-----------+ |\n                     | | |   +------------------+
    | |\n           LAALP1-->(| | |)                    (| | |) <--LAALPn\n                   +-------+
    \   .  .  .       +-------+\n                   | CE1   |                  | CEn
    \  |\n                   +-------+                  +-------+\n         Figure
    1: Active-Active Connection to TRILL Edge RBridges\n   By design, an LAALP (say
    LAALP1) does not forward packets received on\n   one member port to other member
    ports.  As a result, the TRILL Hello\n   messages sent by one member RBridge (say
    RB1) via a port to CE1 will\n   not be forwarded to other member RBridges by CE1.
    \ That is to say,\n   member RBridges will not see each other's Hellos via the
    LAALP.  So,\n   every member RBridge of LAALP1 thinks of itself as Appointed\n
    \  Forwarder for all VLANs enabled on an LAALP1 link and can\n   ingress/egress
    frames simultaneously in these VLANs [RFC6439].\n   The simultaneous flow-based
    ingressing/egressing can cause some\n   problems.  For example, simultaneous egressing
    of multi-destination\n   traffic by multiple member RBridges will result in frame
    duplication\n   at CE1 (see Section 3.1 of [RFC7379]); simultaneous ingressing
    of\n   frames originated by CE1 for different flows in the same VLAN with\n   the
    same source MAC address will result in MAC address flip-flopping\n   at remote
    egress RBridges that have data-plane address learning\n   enabled (see Section
    3.3 of [RFC7379]).  The flip-flopping would in\n   turn cause packet reordering
    in reverse traffic.\n   Edge RBridges learn correspondences between a {Data Label
    and MAC\n   address} and nickname by default when decapsulating TRILL Data\n   packets
    (see Section 4.8.1 of [RFC6325], as updated by [RFC7172]).\n   Assuming that the
    default data-plane learning is enabled at edge\n   RBridges, MAC address flip-flopping
    can be solved by using a virtual\n   RBridge together with its pseudo-nickname.
    \ This document specifies a\n   way to do so.\n"
  title: 2.  Overview
- contents:
  - "3.  Virtual RBridge and Its Pseudo-Nickname\n   A virtual RBridge (RBv) represents
    a group of edge RBridges to which\n   at least one CE is multiply attached using
    an LAALP.  More precisely,\n   it represents a group of ports on the edge RBridges
    providing\n   end-station service and the service provided to the CE(s) on these\n
    \  ports, through which the CE(s) is multiply attached to the TRILL\n   campus
    using LAALP(s).  Such end-station service ports are called RBv\n   ports; in contrast,
    other access ports at edge RBridges are called\n   regular access ports in this
    document.  RBv ports are always\n   LAALP connecting ports, but not vice versa
    (see Section 4.1).  For an\n   edge RBridge, if one or more of its end-station
    service ports are\n   ports of an RBv, that RBridge is a member RBridge of that
    RBv.\n   For the convenience of description, a virtual RBridge is also\n   referred
    to as an Active-Active Edge (AAE) group in this document.\n   In the TRILL campus,
    an RBv is identified by its pseudo-nickname,\n   which is different from any RBridge's
    regular nickname(s).  An RBv\n   has one and only one pseudo-nickname.  Each member
    RBridge (say RB1,\n   RB2 ..., RBk) of an RBv (say RBvn) advertises RBvn's pseudo-nickname\n
    \  using a Nickname sub-TLV in its TRILL IS-IS LSP (Link State PDU)\n   [RFC7176]
    and SHOULD do so with maximum priority of use (0xFF), along\n   with their regular
    nickname(s).  (Maximum priority is recommended to\n   avoid the disruption to
    an AAE group that would occur if the nickname\n   were taken away by a higher-priority
    RBridge.)  Then, from these\n   LSPs, other RBridges outside the AAE group know
    that RBvn is\n   reachable through RB1 to RBk.\n   A member RBridge (say RBi)
    loses its membership in RBvn when its last\n   port in RBvn becomes unavailable
    due to failure, reconfiguration,\n   etc.  RBi then removes RBvn's pseudo-nickname
    from its LSP and\n   distributes the updated LSP as usual.  From those updated
    LSPs, other\n   RBridges know that there is no path to RBvn through RBi now.\n
    \  When member RBridges receive native frames on their RBv ports and\n   decide
    to ingress the frames into the TRILL campus, they use that\n   RBv's pseudo-nickname
    instead of their own regular nicknames as the\n   ingress nickname to encapsulate
    them into TRILL Data packets.  So,\n   when these packets arrive at an egress
    RBridge, even if they are\n   originated by the same end station in the same VLAN
    but ingressed by\n   different member RBridges, no address flip-flopping is observed
    on\n   the egress RBridge when decapsulating these packets.  (When a member\n
    \  RBridge of an AAE group ingresses a frame from a non-RBv port, it\n   still
    uses its own regular nickname as the ingress nickname.)\n   Since an RBv is not
    a physical node and no TRILL frames are forwarded\n   between its ports via an
    LAALP, pseudonode LSP(s) MUST NOT be created\n   for an RBv.  An RBv cannot act
    as a root when constructing\n   distribution trees for multi-destination traffic,
    and its\n   pseudo-nickname is ignored when determining the distribution tree\n
    \  root for the TRILL campus [RFC7783].  So, the tree root priority of\n   the
    RBv's nickname MUST be set to 0, and this nickname MUST NOT be\n   listed in the
    \"s\" nicknames (see Section 4.5 of [RFC6325]) by the\n   RBridge holding the
    highest-priority tree root nickname.\n   NOTE: In order to reduce the consumption
    of nicknames, especially in\n   a large TRILL campus with lots of RBridges and/or
    active-active\n   accesses, when multiple CEs attach to exactly the same set of
    edge\n   RBridges via LAALPs, those edge RBridges should be considered a\n   single
    RBv with a single pseudo-nickname.\n"
  title: 3.  Virtual RBridge and Its Pseudo-Nickname
- contents:
  - "4.  Auto-Discovery of Member RBridges\n   Edge RBridges connected to a CE via
    an LAALP can automatically\n   discover each other with minimal configuration
    through the exchange\n   of LAALP connection information.\n   From the perspective
    of edge RBridges, a CE that connects to edge\n   RBridges via an LAALP can be
    identified by the ID of the LAALP that\n   is unique across the TRILL campus (for
    example, the MC-LAG or DRNI\n   System ID [802.1AX]), which is referred to as
    an LAALP ID in this\n   document.  On each such edge RBridge, the access port
    to such a CE is\n   associated with an LAALP ID for the CE.  An LAALP is considered
    valid\n   on an edge RBridge only if the RBridge still has an operational\n   downlink
    to that LAALP.  For such an edge RBridge, it advertises a\n   list of LAALP IDs
    for its valid local LAALPs to other edge RBridges\n   via its E-L1FS FS-LSP(s)
    [RFC7356] [RFC7780].  Based on the LAALP IDs\n   advertised by other RBridges,
    each RBridge can know which edge\n   RBridges could constitute an AAE group (see
    Section 4.1 for more\n   details).  One RBridge is then elected from the group
    to allocate an\n   available nickname (the pseudo-nickname) for the group (see\n
    \  Section 4.2 for more details).\n"
  - contents:
    - "4.1.  Discovering Member RBridge for an RBv\n   Take Figure 2 as an example,
      where CE1 and CE2 multiply attach to\n   RB1, RB2, and RB3 via LAALP1 and LAALP2,
      respectively; CE3 and CE4\n   attach to RB3, and RB4 via LAALP3 and LAALP4,
      respectively.  Assume\n   that LAALP3 is configured to occupy a virtual RBridge
      by itself.\n                       ------------------------\n                     /
      \                         \\\n                    |       TRILL Campus         |\n
      \                    \\                          /\n                       -------------------------\n
      \                       |    |             |  |\n                +-------+    |
      \            |  +----------+\n                |            |             |             |\n
      \           +-------+     +-------+      +-------+     +-------+\n            |
      \ RB1  |     |  RB2  |      |  RB3  |     |  RB4  |\n            +-------+     +-------+
      \     +-------+     +-------+\n              |   |        |   |          | |
      | |       |     |\n              |   +--------|--+ | +-------|-+ | +-------|---+
      |\n              | +----------+  | | |       |   |         |   | |\n              |
      | +-----------|-|-|-------+   | +-------+   | |\n              | | |           |
      | |           | |           | |\n     LAALP1->(| | |) LAALP2->(| | |) LAALP3->(|
      |) LAALP4->(| |)\n            +-------+      +-------+     +-------+      +-------+\n
      \           |  CE1  |      |  CE2  |     |  CE3  |      |  CE4  |\n            +-------+
      \     +-------+     +-------+      +-------+\n                Figure 2: Different
      LAALPs to TRILL Campus\n   RB1 and RB2 advertise {LAALP1, LAALP2} in the PN-LAALP-Membership\n
      \  APPsub-TLV (see Section 9.1 for more details) via their TRILL E-L1FS\n   FS-LSPs,
      respectively; RB3 announces {LAALP1, LAALP2, LAALP3,\n   LAALP4}, and RB4 announces
      {LAALP3, LAALP4}, respectively.\n   An edge RBridge is called an \"LAALP related
      RBridge\" if it has at\n   least one LAALP configured on an access port.  On
      receipt of the\n   PN-LAALP-Membership APPsub-TLVs, RBn ignores them if it is
      not an\n   LAALP related RBridge; otherwise, RBn SHOULD use the LAALP\n   information
      contained in the sub-TLVs, along with its own\n   PN-LAALP-Membership APPsub-TLVs,
      to decide which RBv(s) it should\n   join and which edge RBridges constitute
      each such RBv.  Based on the\n   information received, each of the four RBridges
      knows the following:\n              LAALP ID    OE-flag    Set of edge RBridges\n
      \             ---------   --------   ---------------------\n              LAALP1
      \     0          {RB1, RB2, RB3}\n              LAALP2      0          {RB1,
      RB2, RB3}\n              LAALP3      1          {RB3, RB4}\n              LAALP4
      \     0          {RB3, RB4}\n   where the OE-flag indicates whether a given
      LAALP is willing to share\n   an RBv with other LAALPs that multiply attach
      to the same set of edge\n   RBridges as the given LAALP does.\n   For an LAALP
      (for example, LAALP3), if its OE-flag is one, it means\n   that LAALP3 does
      not want to share, so it MUST Occupy an RBv\n   Exclusively (OE).  Support of
      OE is optional.  RBridges that do not\n   support OE ignore the OE-flag and
      act as if it were zero (see\n   Section 11 (\"Configuration Consistency\")).\n
      \  Otherwise, the LAALP (for example, LAALP1) will share an RBv with\n   other
      LAALPs if possible.  By default, this flag is set to zero.  For\n   an LAALP,
      this flag is considered 1 if any edge RBridge advertises it\n   as (value) 1
      (see Section 9.1).\n   In the above table, there might be some LAALPs that attach
      to a\n   single RBridge due to misconfiguration or link failure, etc.  Those\n
      \  LAALPs are considered to be invalid entries.  Each of the LAALP\n   related
      edge RBridges then performs the following algorithm to decide\n   which valid
      LAALPs can be served by an RBv.\n      Step 1: Take all the valid LAALPs that
      have their OE-flags set to\n         1 out of the table and create an RBv for
      each such LAALP.\n      Step 2: Sort the valid LAALPs left in the table in descending\n
      \        order based on the number of RBridges in their associated set\n         of
      multihomed RBridges.  If several LAALPs have the same number\n         of RBridges,
      these LAALPs are then ordered in ascending order\n         in the proper places
      of the table, based on their LAALP IDs\n         considered to be unsigned integers.
      \ (For example, in the above\n         table, both LAALP1 and LAALP2 have three
      member RBridges,\n         assuming that the LAALP1 ID is smaller than the LAALP2
      ID, so\n         LAALP1 is followed by LAALP2 in the ordered table.)\n      Step
      3: Take the first valid LAALP (say LAALP_i) with the maximum\n         set of
      RBridges, say S_i, out of the table and create a new RBv\n         (say RBv_i)
      for it.\n      Step 4: Walk through the remaining valid LAALPs in the table
      one\n         by one, pick up all the valid LAALPs whose sets of multi-homed\n
      \        RBridges contain exactly the same RBridges as that of LAALP_i,\n         and
      take them out of the table.  Then, appoint RBv_i as the\n         servicing
      RBv for those LAALPs.\n      Step 5: Repeat Steps 3 and 4 for any LAALPs left,
      until all the\n         valid entries in the table are associated with an RBv.\n
      \  After performing the above steps, all the four RBridges know that\n   LAALP3
      is served by an RBv, say RBv1, which has RB3 and RB4 as member\n   RBridges;
      LAALP1 and LAALP2 are served by another RBv, say RBv2,\n   which has RB1, RB2,
      and RB3 as member RBridges; and LAALP4 is served\n   by RBv3, which has RB3
      and RB4 as member RBridges, shown as follows:\n          RBv    Serving LAALPs
      \      Member RBridges\n          -----  -------------------  ---------------\n
      \         RBv1   {LAALP3}             {RB3, RB4}\n          RBv2   {LAALP1,
      LAALP2}     {RB1, RB2, RB3}\n          RBv3   {LAALP4}             {RB3, RB4}\n
      \  In each RBv, one of the member RBridges is elected as the vDRB\n   (referred
      to in this document as the Designated RBridge of the RBv).\n   Then, this RBridge
      picks up an available nickname as the\n   pseudo-nickname for the RBv and announces
      it to all other member\n   RBridges of the RBv via its TRILL E-L1FS FS-LSPs
      (refer to\n   Section 9.2 for the relative extended sub-TLVs).\n"
    title: 4.1.  Discovering Member RBridge for an RBv
  - contents:
    - "4.2.  Selection of Pseudo-Nickname for an RBv\n   As described in Section 3,
      in the TRILL campus, an RBv is identified\n   by its pseudo-nickname.  In an
      AAE group, one member RBridge is\n   elected for the duty of selecting a pseudo-nickname
      for this RBv;\n   this RBridge will be the vDRB.  The winner in the group is
      the\n   RBridge with the largest IS-IS System ID considered to be an unsigned\n
      \  integer.  Then, based on its TRILL IS-IS link-state database and the\n   potential
      pseudo-nickname(s) reported in the PN-LAALP-Membership\n   APPsub-TLVs by other
      member RBridges of this RBv (see Section 9.1 for\n   more details), the vDRB
      selects an available nickname as the\n   pseudo-nickname for this RBv and advertises
      it to the other RBridges\n   via its E-L1FS FS-LSP(s) (see Section 9.2 and [RFC7780]).
      \ Except as\n   provided below, the selection of a nickname to use as the\n
      \  pseudo-nickname follows the usual TRILL rules given in [RFC6325], as\n   updated
      by [RFC7780].\n   To reduce the traffic disruption caused by the changing of
      nicknames,\n   if possible, the vDRB SHOULD attempt to reuse the pseudo-nickname\n
      \  recently used by the group when selecting nickname for the RBv.  To\n   help
      the vDRB to do so, each LAALP related RBridge advertises a\n   reusing pseudo-nickname
      for each of its LAALPs in its\n   PN-LAALP-Membership APPsub-TLV if it has used
      such a pseudo-nickname\n   for that LAALP recently.  Although it is up to the
      implementation of\n   the vDRB as to how to treat the reusing pseudo-nicknames,
      the\n   following are RECOMMENDED:\n   o  If there are multiple available reusing
      pseudo-nicknames that are\n      reported by all the member RBridges of some
      LAALPs in this RBv,\n      the available one that is reported by the largest
      number of such\n      LAALPs is chosen as the pseudo-nickname for this RBv.
      \ If a tie\n      exists, the reusing pseudo-nickname with the smallest value\n
      \     considered to be an unsigned integer is chosen.\n   o  If only one reusing
      pseudo-nickname is reported, it SHOULD be\n      chosen if available.\n   If
      there is no available reusing pseudo-nickname reported, the vDRB\n   selects
      a nickname by its usual method.\n   The selected pseudo-nickname is then announced
      by the vDRB to other\n   member RBridges of this RBv in the PN-RBv APPsub-TLV
      (see\n   Section 9.2).\n"
    title: 4.2.  Selection of Pseudo-Nickname for an RBv
  title: 4.  Auto-Discovery of Member RBridges
- contents:
  - "5.  Distribution Trees and Designated Forwarder\n   In an AAE group, as each
    of the member RBridges thinks it is the\n   Appointed Forwarder for VLAN x, without
    changes made for\n   active-active connection support, they would all ingress
    frames into,\n   and egress frames from, the TRILL campus for all VLANs.  For\n
    \  multi-destination frames, more than one member RBridge ingressing\n   them
    may cause some of the resulting TRILL Data packets to be\n   discarded due to
    failure of the Reverse Path Forwarding (RPF) check\n   on other RBridges; for
    multi-destination traffic, more than one\n   RBridge egressing it may cause local
    CE(s) to receive duplicate\n   frames.  Furthermore, in an AAE group, a multi-destination
    frame sent\n   by a CE (say CEi) may be ingressed into the TRILL campus by one\n
    \  member RBridge, and another member RBridge will then receive it from\n   the
    TRILL campus and egress it to CEi; this will result in loopback\n   of the frame
    for CEi.  These problems are all described in [RFC7379].\n   In the following
    subsections, the first two issues are discussed in\n   Sections 5.1 and 5.2, respectively;
    the third issue is discussed in\n   Section 5.3.\n"
  - contents:
    - "5.1.  Different Trees for Different Member RBridges\n   In TRILL, RBridges
      normally use distribution trees to forward\n   multi-destination frames.  (Under
      some circumstances, they can be\n   unicast, as specified in [RFC7172].)  An
      RPF check, along with other\n   types of checks, is used to avoid temporary
      multicast loops during\n   topology changes (Section 4.5.2 of [RFC6325]).  The
      RPF check\n   mechanism only accepts a multi-destination frame ingressed by
      an\n   RBridge (say RBi) and forwarded on a distribution tree if it arrives\n
      \  at another RBridge (say RBn) on the expected port.  If the frame\n   arrives
      on any other port, the frame MUST be dropped.\n   To avoid address flip-flopping
      on remote RBridges, member RBridges\n   use the RBv's pseudo-nickname instead
      of their regular nicknames as\n   the ingress nickname to ingress native frames,
      including\n   multi-destination frames.  From the view of other RBridges, these\n
      \  frames appear as if they were ingressed by the RBv.  When\n   multi-destination
      frames of different flows are ingressed by\n   different member RBridges of
      an RBv and forwarded along the same\n   distribution tree, they may arrive at
      RBn on different ports.  Some\n   of them will violate the RPF check principle
      at RBn and be dropped,\n   which will result in lost traffic.\n   In an RBv,
      if a different member RBridge uses different distribution\n   trees to ingress
      multi-destination frames, the RPF check violation\n   issue can be fixed.  The
      Coordinated Multicast Trees (CMT) document\n   [RFC7783] proposes such an approach
      and makes use of the Affinity\n   sub-TLV defined in [RFC7176] to tell other
      RBridges which trees a\n   member RBridge (say RBi) may choose when ingressing
      multi-destination\n   frames; all RBridges in the TRILL campus can then calculate
      RPF check\n   information for RBi on those trees, taking the tree affinity\n
      \  information into account [RFC7783].\n   This document uses the approach proposed
      in [RFC7783] to fix the\n   RPF check violation issue.  Please refer to [RFC7783]
      for more\n   details regarding this approach.\n"
    title: 5.1.  Different Trees for Different Member RBridges
  - contents:
    - "5.2.  Designated Forwarder for Member RBridges\n   Take Figure 3 as an example,
      where CE1 and CE2 are served by an RBv\n   that has RB1 and RB2 as member RBridges.
      \ In VLAN x, the three CEs\n   can communicate with each other.\n                       ---------------------\n
      \                    /                       \\    +-----+\n                    |
      \      TRILL Campus      |---| RBn |\n                     \\                       /
      \   +-----+\n                      -----------------------\n                          |
      \            |\n                     +----+             +------+\n                     |
      \                        |\n                +---------+                +--------+\n
      \               |   RB1   |                |   RB2  |\n                | oooooooo|oooooooooooooooo|ooooo
      \  |\n                +o--------+    RBv         +-----o--+\n                  o|oooo|oooooooooooooooooooo|o|o
      \ |\n                   | +--|--------------------+ |   |\n                   |
      |  +---------+ +----------+   |\n                  (| |)<-LAALP1  (| |)<-LAALP2
      \    |\n               +-------+       +-------+      +-------+\n               |
      \ CE1  |       |  CE2  |      |  CE3  |\n               +-------+       +-------+
      \     +-------+\n         Figure 3: A Topology with Multihomed and Single-Homed
      CEs\n   When a remote RBridge (say RBn) sends a multi-destination TRILL Data\n
      \  packet in VLAN x (or the FGL that VLAN x maps to, if the packet is\n   FGL),
      both RB1 and RB2 will receive it.  As each of them thinks it is\n   the Appointed
      Forwarder for VLAN x, without changes made for\n   active-active connection
      support, they would both forward the frame\n   to CE1/CE2.  As a result, CE1/CE2
      would receive duplicate copies of\n   the frame through this RBv.\n   In another
      case, assume that CE3 is single-homed to RB2.  When it\n   transmits a native
      multi-destination frame onto link CE3-RB2 in\n   VLAN x, the frame can be locally
      replicated to the ports to CE1/CE2,\n   and also encapsulated into TRILL Data
      packet and ingressed into the\n   TRILL campus.  When the packet arrives at
      RB1 across the TRILL\n   campus, it will be egressed to CE1/CE2 by RB1.  CE1/CE2
      then receives\n   duplicate copies from RB1 and RB2.\n   In this document, the
      Designated Forwarder (DF) for a VLAN is\n   introduced to avoid duplicate copies.
      \ The basic idea of the DF is to\n   elect one RBridge per VLAN from an RBv
      to egress multi-destination\n   TRILL Data traffic and replicate locally received
      multi-destination\n   native frames to the CEs served by the RBv.\n   Note that
      the DF has an effect only on the egressing/replicating of\n   multi-destination
      traffic.  It has no effect on the ingressing,\n   forwarding, or egressing of
      unicast frames.  Furthermore, the DF\n   check is performed only for RBv ports,
      not on regular access ports.\n   Each RBridge in an RBv elects a DF using the
      same algorithm; this\n   guarantees that, per VLAN, the same RBridge is elected
      as the DF by\n   all members of the RBv.\n   If we assume that there are m LAALPs
      and k member RBridges in an RBv,\n   then (1) each LAALP is referred to as \"LAALPi\",
      where 0 <= i < m, and\n   (2) each RBridge is referred to as \"RBj\", where
      0 <= j < k.  The DF\n   election algorithm per VLAN is as follows:\n      Step
      1: For LAALPi, sort all the RBridges in numerically ascending\n         order
      based on SHA-256(System IDj | LAALP IDi) considered to be\n         an unsigned
      integer, where SHA-256 is the hash function\n         specified in [RFC6234],
      \"System IDj\" is the 6-byte IS-IS System\n         ID of RBj, \"|\" means concatenation,
      and \"LAALP IDi\" is the\n         LAALP ID for LAALPi.  The System ID and LAALP
      ID are considered\n         to be byte strings.  In the case of a tie, the tied
      RBridges\n         are sorted in numerically ascending order by their System
      IDs\n         considered to be unsigned integers.\n      Step 2: Each RBridge
      in the numerically sorted list is assigned a\n         monotonically increasing
      number j, such that increasing number\n         j corresponds to its position
      in the sorted list, i.e., the\n         first RBridge (the one with the smallest
      SHA-256(System ID |\n         LAALP ID)) is assigned zero and the last is assigned
      k-1.\n      Step 3: For each VLAN ID n, choose the RBridge whose number equals\n
      \        (n mod k) as the DF.\n      Step 4: Repeat Steps 1-3 for the remaining
      LAALPs until there is a\n         DF per VLAN per LAALP in the RBv.\n   For
      any multi-destination native frames of VLAN x that are received,\n   if RBi
      is an LAALP attached RBridge, there are three cases where RBi\n   replicates
      the multi-destination frame, as follows:\n      1) Local replication of the
      frame to regular (non-AAE) access\n         ports as per [RFC6325] (and [RFC7172]
      for FGL).\n      2) RBv ports associated with the same pseudo-nickname as that
      of\n         the incoming port, no matter whether RBi is the DF for the\n         frame's
      VLAN on the outgoing ports, except that the frame\n         MUST NOT be replicated
      back to the incoming port.  RBi cannot\n         simply depend on the DF to
      forward the multi-destination frame\n         back into the AAEs associated
      with the pseudo-nickname, as that\n         would cause the source CE to get
      the frame back, which is a\n         violation of basic Ethernet properties.
      \ The DF will not\n         forward such a frame back into the AAE due to ingress
      nickname\n         filtering as described in Section 5.3.\n      3) RBv ports
      on which RBi is the DF for the frame's VLAN while\n         they are associated
      with different pseudo-nickname(s) than that\n         of the incoming port.\n
      \  For any multi-destination TRILL Data packets that are received, RBi\n   MUST
      NOT egress it out of the RBv ports where it is not the DF for\n   the frame's
      Inner.VLAN (or for the VLAN corresponding to the\n   Inner.Label if the packet
      is an FGL one).  Otherwise, whether or not\n   to egress it out of such ports
      is further subject to the filtering\n   check result of the frame's ingress
      nickname on these ports (see\n   Section 5.3).\n"
    title: 5.2.  Designated Forwarder for Member RBridges
  - contents:
    - "5.3.  Ingress Nickname Filtering\n   As shown in Figure 3, CE1 may send multi-destination
      traffic in\n   VLAN x to the TRILL campus via a member RBridge (say RB1).  The\n
      \  traffic is then TRILL-encapsulated by RB1 and delivered through the\n   TRILL
      campus to multi-destination receivers.  RB2 may receive the\n   traffic and
      egress it back to CE1 if it is the DF for VLAN x on the\n   port to LAALP1.
      \ The traffic then loops back to CE1 (see Section 3.2\n   of [RFC7379]).\n   To
      fix the above issue, this document requires an ingress nickname\n   filtering
      check.  The idea is to check the ingress nickname of a\n   multi-destination
      TRILL Data packet before egressing a copy of it out\n   of an RBv port.  If
      the ingress nickname matches the pseudo-nickname\n   of the RBv (associated
      with the port), the filtering check should\n   fail and the copy MUST NOT be
      egressed out of that RBv port.\n   Otherwise, the copy is egressed out of that
      port if it has also\n   passed other checks, such as the Appointed Forwarder
      check described\n   in Section 4.6.2.5 of [RFC6325] and the DF check described
      in\n   Section 5.2.\n   Note that this ingress nickname filtering check has
      no effect on the\n   multi-destination native frames that are received on access
      ports and\n   replicated to other local ports (including RBv ports), since there
      is\n   no ingress nickname associated with such frames.  Furthermore, for\n
      \  the RBridge regular access ports, there is no pseudo-nickname\n   associated
      with them, so no ingress nickname filtering check is\n   required on those ports.\n
      \  More details of data packet processing on RBv ports are given in the\n   next
      section.\n"
    title: 5.3.  Ingress Nickname Filtering
  title: 5.  Distribution Trees and Designated Forwarder
- contents:
  - "6.  TRILL Traffic Processing\n   This section provides more details of native
    frame and TRILL Data\n   packet processing as it relates to the RBv's pseudo-nickname.\n"
  - contents:
    - "6.1.  Ingressing Native Frames\n   When RB1 receives a unicast native frame
      from one of its ports that\n   has end-station service enabled, it processes
      the frame as described\n   in Section 4.6.1.1 of [RFC6325], with the following
      exception:\n   o  If the port is an RBv port, RB1 uses the RBv's pseudo-nickname\n
      \     instead of one of its regular nickname(s) as the ingress nickname\n      when
      doing TRILL encapsulation on the frame.\n   When RB1 receives a native multi-destination
      (broadcast,\n   unknown unicast, or multicast) frame from one of its access
      ports\n   (including regular access ports and RBv ports), it processes the\n
      \  frame as described in Section 4.6.1.2 of [RFC6325], with the\n   following
      exceptions:\n   o  If the incoming port is an RBv port, RB1 uses the RBv's\n
      \     pseudo-nickname instead of one of its regular nickname(s) as the\n      ingress
      nickname when doing TRILL encapsulation on the frame.\n   o  For the copies
      of the frame replicated locally to RBv ports, there\n      are two cases, as
      follows:\n      - If the outgoing port(s) is associated with the same\n        pseudo-nickname
      as that of the incoming port but not with the\n        same LAALP as the incoming
      port, the copies are forwarded out of\n        that outgoing port(s) after passing
      the Appointed Forwarder\n        check for the frame's VLAN.  That is to say,
      the copies are\n        processed on such port(s), as discussed in Section 4.6.1.2
      of\n        [RFC6325].\n      - Else, the Designated Forwarder (DF) check is
      also made on the\n        outgoing ports for the frame's VLAN after the Appointed\n
      \       Forwarder check, and the copies are not output through any ports\n        that
      failed the DF check (i.e., RB1 is not the DF for the\n        frame's VLAN on
      the ports).  Otherwise, the copies are forwarded\n        out of the outgoing
      ports that pass both the Appointed Forwarder\n        check and the DF check
      (see Section 5.2).\n   For any such frames received, the MAC address information
      learned by\n   observing it, together with the LAALP ID of the incoming port,
      SHOULD\n   be shared with other member RBridges in the group (see Section 7).\n"
    title: 6.1.  Ingressing Native Frames
  - contents:
    - "6.2.  Egressing TRILL Data Packets\n   This section describes egress processing
      of the TRILL Data packets\n   received on an RBv member RBridge (say RBn).  Section
      6.2.1 describes\n   the egress processing of unicast TRILL Data packets, and\n
      \  Section 6.2.2 specifies the egressing of multi-destination TRILL Data\n   packets.\n"
    - contents:
      - "6.2.1.  Unicast TRILL Data Packets\n   When receiving a unicast TRILL Data
        packet, RBn checks the egress\n   nickname in the TRILL Header of the packet.
        \ If the egress nickname\n   is one of RBn's regular nicknames, the packet
        is processed as defined\n   in Section 4.6.2.4 of [RFC6325].\n   If the egress
        nickname is the pseudo-nickname of a local RBv, RBn is\n   responsible for
        learning the source MAC address, unless data-plane\n   learning has been disabled.
        \ The learned {Inner.MacSA, Data Label,\n   ingress nickname} triplet SHOULD
        be shared within the AAE group as\n   described in Section 7.\n   The packet
        is then decapsulated to its native form.  The Inner.MacDA\n   and Data Label
        are looked up in RBn's local forwarding tables, and\n   one of the three following
        cases will occur.  RBn uses the first case\n   that applies and ignores the
        remaining cases:\n   o  If the destination end station identified by the Inner.MacDA
        and\n      Data Label is on a local link, the native frame is sent onto that\n
        \     link with the VLAN from the Inner.VLAN or VLAN corresponding to\n      the
        Inner.Label if the packet is FGL.\n   o  Else if RBn can reach the destination
        through another member\n      RBridge (say RBk), it tunnels the native frame
        to RBk by\n      re-encapsulating it into a unicast TRILL Data packet and
        sends it\n      to RBk.  RBn uses RBk's regular nickname instead of the\n
        \     pseudo-nickname as the egress nickname for the re-encapsulation,\n      and
        the ingress nickname remains unchanged (somewhat similar to\n      Section
        2.4.2.1 of [RFC7780]).  If the Hop Count value of the\n      packet is too
        small for it to reach RBk safely, RBn SHOULD\n      increase that value properly
        in doing the re-encapsulation.\n      (NOTE: When receiving that re-encapsulated
        TRILL Data packet, as\n      the egress nickname of the packet is RBk's regular
        nickname rather\n      than the pseudo-nickname of a local RBv, RBk will process
        it per\n      Section 4.6.2.4 of [RFC6325] and will not re-forward it to another\n
        \     RBridge.)\n   o  Else, RBn does not know how to reach the destination;
        it sends the\n      native frame out of all the local ports on which it is
        Appointed\n      Forwarder for the Inner.VLAN (or Appointed Forwarder for
        the VLAN\n      into which the Inner.Label maps on that port for an FGL TRILL
        Data\n      packet [RFC7172]).\n"
      title: 6.2.1.  Unicast TRILL Data Packets
    - contents:
      - "6.2.2.  Multi-Destination TRILL Data Packets\n   When RB1 receives a multi-destination
        TRILL Data Packet, it checks\n   and processes the packet as described in
        Section 4.6.2.5 of\n   [RFC6325], with the following exception:\n   o  On
        each RBv port where RBn is the Appointed Forwarder for the\n      packet's
        Inner.VLAN (or for the VLAN to which the packet's\n      Inner.Label maps
        on that port if it is an FGL TRILL Data packet),\n      the DF check (see
        Section 5.2) and the ingress nickname filtering\n      check (see Section
        5.3) are further performed.  For such an RBv\n      port, if either the DF
        check or the filtering check fails, the\n      frame MUST NOT be egressed
        out of that port.  Otherwise, it can be\n      egressed out of that port.\n"
      title: 6.2.2.  Multi-Destination TRILL Data Packets
    title: 6.2.  Egressing TRILL Data Packets
  title: 6.  TRILL Traffic Processing
- contents:
  - "7.  MAC Information Synchronization in Edge Group\n   An edge RBridge, say RB1
    in LAALP1, may have learned a correspondence\n   between a {Data Label and MAC
    address} and nickname for a remote host\n   (say h1) when h1 sends a packet to
    CE1.  The returning traffic from\n   CE1 may go to another member RBridge of LAALP1
    (for example, RB2).\n   RB2 may not have that correspondence stored.  Therefore,
    it has to do\n   the flooding for unknown unicast.  Such flooding is unnecessary,\n
    \  since the returning traffic is almost always expected and RB1 had\n   learned
    the address correspondence.  To avoid the unnecessary\n   flooding, RB1 SHOULD
    share the correspondence with other RBridges of\n   LAALP1.  RB1 synchronizes
    the correspondence by using the\n   MAC-Reachability (MAC-RI) sub-TLV [RFC6165]
    in its ESADI-LSPs\n   [RFC7357].\n   On the other hand, RB2 has learned the MAC
    address and Data Label of\n   CE1 when CE1 sends a frame to h1 through RB2.  The
    returning traffic\n   from h1 may go to RB1.  RB1 may not have CE1's MAC address
    and Data\n   Label stored even though it is in the same LAALP for CE1 as RB2.\n
    \  Therefore, it has to flood the traffic out of all its access ports\n   where
    it is Appointed Forwarder for the VLAN (see Section 6.2.1) or\n   the VLAN the
    FGL maps to on that port if the packet is FGL.  Such\n   flooding is unnecessary,
    since the returning traffic is almost always\n   expected and RB2 had learned
    CE1's MAC and Data Label information.\n   To avoid that unnecessary flooding,
    RB2 SHOULD share the MAC address\n   and Data Label with other RBridges of LAALP1.
    \ RB2 synchronizes the\n   MAC address and Data Label by enclosing the relative
    MAC-RI TLV\n   within a pair of boundary TRILL APPsub-TLVs for LAALP1 (see\n   Section
    9.3) in its ESADI-LSP [RFC7357].  After receiving the\n   enclosed MAC-RI TLVs,
    the member RBridges of LAALP1 (i.e., LAALP1\n   related RBridges) treat the MAC
    address and Data Label as if it were\n   learned by them locally on their member
    port of LAALP1; the LAALP1\n   unrelated RBridges just ignore LAALP1's boundary
    APPsub-TLVs and\n   treat the MAC address and Data Label as specified in [RFC7357].\n
    \  Furthermore, in order to make the LAALP1 unrelated RBridges know that\n   the
    MAC and Data Label are reachable through the RBv that provides\n   service to
    LAALP1, the Topology-ID/Nickname field of the MAC-RI TLV\n   SHOULD carry the
    pseudo-nickname of the RBv, rather than a zero value\n   or one of the originating
    RBridge's (i.e., RB2's) regular nicknames.\n"
  title: 7.  MAC Information Synchronization in Edge Group
- contents:
  - "8.  Member Link Failure in an RBv\n   As shown in Figure 4, suppose that the
    link RB1-CE1 fails.  Although\n   a new RBv will be formed by RB2 and RB3 to provide
    active-active\n   service for LAALP1 (see Section 5), the unicast traffic to CE1
    might\n   still be forwarded to RB1 before the remote RBridge learns that CE1\n
    \  is attached to the new RBv.  That traffic might be disrupted by the\n   link
    failure.  Section 8.1 discusses failure protection in this\n   scenario.\n   However,
    multi-destination TRILL Data packets can reach all member\n   RBridges of the
    new RBv and be egressed to CE1 by either RB2 or RB3\n   (i.e., the new DF for
    the traffic's Inner.VLAN or the VLAN the\n   packet's Inner.Label maps to in the
    new RBv).  Although there might\n   be a transient hang time between failure and
    the establishment of the\n   new RBv, special actions to protect against downlink
    failure for such\n   multi-destination packets are not needed.\n                          ------------------\n
    \                       /                    \\\n                       |     TRILL
    Campus     |\n                        \\                    /\n                         --------------------\n
    \                            |     |     |\n                         +---+     |
    \    +----+\n                         |         |          |\n                     +------+
    \    +------+   +------+\n                     | RB1  |     | RB2  |   | RB3  |\n
    \                    ooooooo|ooooo|oooooo|ooo|ooooo |\n                    o+------+
    RBv +------+   +-----o+\n                     o|oooo|ooooooo|oooo|ooooo|oo|o\n
    \                     |    |       |  +-|-----+  |\n                     \\|/+--|-------+
    \ | +------+ |\n                    - B |  +----------|------+ | |\n                     /|\\|
    +-----------+      | | |\n                     (| | |)<--LAALP1       (| | |)<--LAALP2\n
    \                   +-------+              +-------+\n                    |  CE1
    \ |              |  CE2  |\n                    +-------+              +-------+\n
    \         B - Failed Link or Link Bundle\n               Figure 4: A Multi-Homed
    CE with a Failed Link\n"
  - contents:
    - "8.1.  Link Protection for Unicast Frame Egressing\n   When the link CE1-RB1
      fails, RB1 loses its direct connection to CE1.\n   The MAC entry through the
      failed link to CE1 is removed from RB1's\n   local forwarding table immediately.
      \ Another MAC entry learned from\n   another member RBridge of LAALP1 (for example,
      RB2, since it is still\n   a member RBridge of LAALP1) is installed into RB1's
      forwarding table\n   (see Section 9.3).  In that new entry, RB2 (identified
      by one of its\n   regular nicknames) is the egress RBridge for CE1's MAC address.\n
      \  Then, when a TRILL Data packet to CE1 is delivered to RB1, it can be\n   tunneled
      to RB2 after being re-encapsulated (the ingress nickname\n   remains unchanged
      and the egress nickname is replaced by RB2's\n   regular nickname) based on
      the above installed MAC entry (see\n   bullet 2 in Section 6.2.1).  RB2 then
      receives the frame and egresses\n   it to CE1.\n   After failure recovery, RB1
      learns that it can reach CE1 via link\n   CE1-RB1 again by observing CE1's native
      frames or from the MAC\n   information synchronization by member RBridge(s)
      of LAALP1 as\n   described in Section 7.  It then restores the MAC entry to
      its\n   previous one and downloads it to its data-plane \"fast path\" logic.\n"
    title: 8.1.  Link Protection for Unicast Frame Egressing
  title: 8.  Member Link Failure in an RBv
- contents:
  - "9.  TLV Extensions for Edge RBridge Group\n   The following subsections specify
    the APPsub-TLVs needed to support\n   pseudo-nickname edge groups.\n"
  - contents:
    - "9.1.  PN-LAALP-Membership APPsub-TLV\n   This APPsub-TLV is used by an edge
      RBridge to announce its associated\n   pseudo-nickname LAALP information.  It
      is defined as a sub-TLV of the\n   TRILL GENINFO TLV [RFC7357] and is distributed
      in E-L1FS FS-LSPs\n   [RFC7780].  It has the following format:\n         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \        |  Type = PN-LAALP-Membership   |  (2 bytes)\n         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \        |  Length                       |  (2 bytes)\n         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+...+-+\n
      \        |  LAALP RECORD(1)                          |  (variable)\n         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+...+-+\n
      \        .                                           .\n         .                                           .\n
      \        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+...+-+\n         |  LAALP RECORD(n)
      \                         |  (variable)\n         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+...+-+\n
      \         Figure 5: PN-LAALP-Membership Advertisement APPsub-TLV\n   where each
      LAALP RECORD has the following form:\n           0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 ..\n         +--+-+-+-+-+-+-+-+\n         |OE|     RESV    |                  (1
      byte)\n         +--+-+-+-+-+-+-+-+\n         |  Size          |                  (1
      byte)\n         +--+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n         |  Reusing Pseudo-Nickname
      \     |  (2 bytes)\n         +--+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+...+-+\n
      \        |  LAALP ID                                  |  (variable)\n         +--+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+...+-+\n
      \  o  PN-LAALP-Membership (2 bytes): Defines the type of this\n      sub-TLV,
      2.\n   o  Length (2 bytes): The sum of the lengths of the LAALP RECORDs.\n   o
      \ OE (1 bit): A flag indicating whether or not the LAALP wants to\n      occupy
      an RBv by itself; 1 for occupying by itself (or Occupying\n      Exclusively
      (OE)).  By default, it is set to 0 on transmit.  This\n      bit is used for
      edge RBridge group auto-discovery (see\n      Section 4.1).  For any one LAALP,
      the values of this flag might\n      conflict in the LSPs advertised by different
      member RBridges of\n      that LAALP.  In that case, the flag for that LAALP
      is considered\n      to be 1.\n   o  RESV (7 bits): MUST be transmitted as zero
      and ignored on receipt.\n   o  Size (1 byte): Size of the remaining part of
      the LAALP RECORD\n      (2 plus the length of the LAALP ID).\n   o  Reusing
      Pseudo-Nickname (2 bytes): Suggested pseudo-nickname of\n      the AAE group
      serving the LAALP.  If the LAALP is not served by\n      any AAE group, this
      field MUST be set to zero.  It is used by the\n      originating RBridge to
      help the vDRB to reuse the previous\n      pseudo-nickname of an AAE group (see
      Section 4.2).\n   o  LAALP ID (variable): The ID of the LAALP.  See Section
      9.4.\n   On receipt of such an APPsub-TLV, if RBn is not an LAALP related edge\n
      \  RBridge, it ignores the sub-TLV; otherwise, it parses the sub-TLV.\n   When
      new LAALPs are found or old ones are withdrawn compared to its\n   old copy,
      and they are also configured on RBn, RBn performs the\n   \"Member RBridges
      Auto-Discovery\" procedure described in Section 4.\n"
    title: 9.1.  PN-LAALP-Membership APPsub-TLV
  - contents:
    - "9.2.  PN-RBv APPsub-TLV\n   The PN-RBv APPsub-TLV is used by a Designated RBridge
      of a virtual\n   RBridge (vDRB) to dictate the pseudo-nickname for the LAALPs
      served\n   by the RBv.  It is defined as a sub-TLV of the TRILL GENINFO TLV\n
      \  [RFC7357] and is distributed in E-L1FS FS-LSPs [RFC7780].  It has the\n   following
      format:\n          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n          | Type = PN-RBv
      \                |  (2 bytes)\n          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \         | Length                        |  (2 bytes)\n          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \         | RBv's Pseudo-Nickname         |  (2 bytes)\n          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \         | LAALP ID Size |  (1 byte)\n          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+...+-+\n
      \         | LAALP ID (1)                                |  (variable)\n          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+...+-+\n
      \         .                                             .\n          .                                             .\n
      \         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+...+-+\n          | LAALP
      ID (n)                                |  (variable)\n          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+...+-+\n
      \  o  PN-RBv (2 bytes): Defines the type of this sub-TLV, 3.\n   o  Length (2
      bytes): 3+n*k bytes, where there are n LAALP IDs, each\n      of size k bytes.
      \ k is found in the LAALP ID Size field below.  If\n      Length is not 3 plus
      an integer times k, the sub-TLV is corrupt\n      and MUST be ignored.\n   o
      \ RBv's Pseudo-Nickname (2 bytes): The appointed pseudo-nickname for\n      the
      RBv that serves the LAALPs listed in the following fields.\n   o  LAALP ID Size
      (1 byte): The size of each of the following LAALP\n      IDs in this sub-TLV.
      \ 8 if the LAALPs listed are MC-LAGs or DRNI\n      (Section 6.3.2 of [802.1AX]).
      \ The value in this field is the k\n      value that appears in the formula
      for Length above.\n   o  LAALP ID (LAALP ID Size bytes): The ID of the LAALP.
      \ See\n      Section 9.4.\n   This sub-TLV may occur multiple times with the
      same RBv\n   pseudo-nickname; this means that all of the LAALPs listed are\n
      \  identified by that pseudo-nickname.  For example, if there are\n   LAALP
      IDs of different length, then the LAALP IDs of each size would\n   have to be
      listed in a separate sub-TLV.\n   Because a PN-RBv APPsub-TLV is distributed
      as part of the application\n   link state by using the E-L1FS FS-LSP [RFC7780],
      creation, changes to\n   contents, or withdrawal of a PN-RBv APPsub-TLV is accomplished
      by the\n   Designated RBridge updating and flooding an E-L1FS PDU.\n   On receipt
      of such a sub-TLV, if RBn is not an LAALP related edge\n   RBridge, it ignores
      the sub-TLV.  Otherwise, if RBn is also a member\n   RBridge of the RBv identified
      by the list of LAALPs, it associates\n   the pseudo-nickname with the ports
      of these LAALPs and downloads the\n   association to data-plane fast path logic.
      \ At the same time, RBn\n   claims the RBv's pseudo-nickname across the campus
      and announces the\n   RBv as its child on the corresponding tree or trees using
      the\n   Affinity sub-TLV [RFC7176] [RFC7783].\n"
    title: 9.2.  PN-RBv APPsub-TLV
  - contents:
    - "9.3.  PN-MAC-RI-LAALP Boundary APPsub-TLVs\n   In this document, two APPsub-TLVs
      are used as boundary APPsub-TLVs\n   for an edge RBridge to enclose the MAC-RI
      TLV(s) containing the MAC\n   address information learned from the local port
      of an LAALP when this\n   RBridge wants to share the information with other
      edge RBridges.\n   They are defined as TRILL APPsub-TLVs [RFC7357].  The\n   PN-MAC-RI-LAALP-INFO-START
      APPsub-TLV has the following format:\n         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \        |Type=PN-MAC-RI-LAALP-INFO-START| (2 bytes)\n         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \        | Length                        | (2 bytes)\n         +-+-+-+-+-+-+-+-+-+-+-+-+-+-...+-+-+-+-+-+-+\n
      \        | LAALP ID                                 | (variable)\n         +-+-+-+-+-+-+-+-+-+-+-+-+-+-...+-+-+-+-+-+-+\n
      \  o  PN-MAC-RI-LAALP-INFO-START (2 bytes): Defines the type of this\n      sub-TLV,
      4.\n   o  Length (2 bytes): The size of the following LAALP ID.  8 if the\n
      \     LAALP listed is an MC-LAG or DRNI.\n   o  LAALP ID (variable): The ID
      of the LAALP (see Section 9.4).\n   The PN-MAC-RI-LAALP-INFO-END APPsub-TLV
      is defined as follows:\n         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n         |
      Type=PN-MAC-RI-LAALP-INFO-END | (2 bytes)\n         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \        | Length                        | (2 bytes)\n         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  o  PN-MAC-RI-LAALP-INFO-END (2 bytes): Defines the type of this\n      sub-TLV,
      5.\n   o  Length (2 bytes): 0.\n   This pair of APPsub-TLVs can be carried multiple
      times in an\n   ESADI-LSP and in multiple ESADI-LSPs.  When an LAALP related
      edge\n   RBridge (say RBn) wants to share with other edge RBridges the MAC\n
      \  addresses learned on its local ports of different LAALPs, it uses one\n   or
      more pairs of such APPsub-TLVs for each such LAALP in its\n   ESADI-LSPs.  Each
      encloses the MAC-RI TLVs containing the MAC\n   addresses learned from a specific
      LAALP.  Furthermore, if the LAALP\n   is served by a local RBv, the value of
      the Topology-ID/Nickname field\n   in the relative MAC-RI TLVs SHOULD be the
      pseudo-nickname of the RBv,\n   rather than one of RBn's regular nicknames or
      a zero value.  Then, on\n   receipt of such a MAC-RI TLV, remote RBridges know
      that the contained\n   MAC addresses are reachable through the RBv.\n   On receipt
      of such boundary APPsub-TLVs, when the edge RBridge is not\n   an LAALP related
      one or cannot recognize such sub-TLVs, it ignores\n   them and continues to
      parse the enclosed MAC-RI TLVs per [RFC7357].\n   Otherwise, the recipient parses
      the boundary APPsub-TLVs.  The\n   PN-MAC-RI-LAALP-INFO-START / PN-MAC-RI-LAALP-INFO-END
      pair MUST occur\n   within one TRILL GENINFO TLV.  If an END is encountered
      without any\n   previous START in the ESADI-LSP, the END APPsub-TLV is ignored.\n
      \  After encountering a START, if the end of the ESADI-LSP is reached\n   without
      encountering an END, then the end of the ESADI-LSP is treated\n   as if it were
      a PN-MAC-RI-LAALP-INFO-END.  The boundary APPsub-TLVs\n   and TLVs between them
      are handled as follows:\n   1) If the edge RBridge is configured with the contained
      LAALP and the\n      LAALP is also enabled locally, it treats all the MAC addresses\n
      \     contained in the following MC-RI TLVs enclosed by the\n      corresponding
      pair of boundary APPsub-TLVs as if they were learned\n      from its local port
      of that LAALP;\n   2) Else, it ignores these boundary APPsub-TLVs and continues
      to parse\n      the following MAC-RI TLVs per [RFC7357] until another pair of\n
      \     boundary APPsub-TLVs is encountered.\n"
    title: 9.3.  PN-MAC-RI-LAALP Boundary APPsub-TLVs
  - contents:
    - "9.4.  LAALP IDs\n   The LAALP ID identifies an AAE RBridge group in the TRILL
      campus and\n   thus MUST be unique across the campus.  In all of the APPsub-TLVs\n
      \  specified above, the length of the LAALP ID can be determined from a\n   size
      field.  If that length is 8 bytes, the LAALP ID is an MC-LAG or\n   DRNI identifier
      as specified in Section 6.3.2 of [802.1AX].  The\n   meaning and structure of
      LAALP IDs of other lengths are reserved and\n   may be specified in future documents.\n"
    title: 9.4.  LAALP IDs
  title: 9.  TLV Extensions for Edge RBridge Group
- contents:
  - "10.  OAM Packets\n   Attention must be paid when generating Operations, Administration,\n
    \  and Maintenance (OAM) packets.  To ensure that the response messages\n   can
    return to the originating member RBridge of an RBv, a\n   pseudo-nickname cannot
    be used as the ingress nickname in TRILL OAM\n   messages, except in the response
    to an OAM message that has that\n   RBv's pseudo-nickname as the egress nickname.
    \ For example, assume\n   that RB1 is a member RBridge of RBvi.  RB1 cannot use
    RBvi's\n   pseudo-nickname as the ingress nickname when originating OAM\n   messages;
    otherwise, the responses to the messages may be delivered\n   to another member
    RBridge of RBvi rather than RB1.  But when RB1\n   responds to the OAM message
    with RBvi's pseudo-nickname as the egress\n   nickname, it can use that pseudo-nickname
    as the ingress nickname in\n   the response message.\n   Since RBridges cannot
    use OAM messages for the learning of MAC\n   addresses (Section 3.2.1 of [RFC7174]),
    it will not lead to MAC\n   address flip-flopping at a remote RBridge, even though
    RB1 uses its\n   regular nicknames as ingress nicknames in its TRILL OAM messages,
    and\n   at the same time RB1 uses RBvi's pseudo-nickname in its TRILL Data\n   packets.\n"
  title: 10.  OAM Packets
- contents:
  - "11.  Configuration Consistency\n   The VLAN membership of all the RBridge ports
    in an LAALP MUST be the\n   same.  Any inconsistencies in VLAN membership may
    result in packet\n   loss or non-shortest paths.\n   Take Figure 1 as an example.
    \ Suppose that RB1 configures VLAN1 and\n   VLAN2 for the CE1-RB1 link, while
    RB2 only configures VLAN1 for the\n   CE1-RB2 link.  Both RB1 and RB2 use the
    same ingress nickname RBv for\n   all frames originating from CE1.  Hence, a remote
    RBridge (say RBx)\n   will learn that CE1's MAC address in VLAN2 is originating
    from the\n   RBv.  As a result, on the return path, RBx may deliver VLAN2 traffic\n
    \  to RB2.  However, RB2 does not have VLAN2 configured on the CE1-RB2\n   link,
    and hence the frame may be dropped or has to be redirected to\n   RB1 if RB2 knows
    that RB1 can reach CE1 in VLAN2.\n   How LAALP implementations maintain consistent
    VLAN configuration on\n   the TRILL switch LAALP ports is out of scope for the
    TRILL protocol.\n   However, considering the consequences that might be caused
    by\n   inconsistencies, TRILL switches MUST disable the ports connected to\n   an
    LAALP with an inconsistent VLAN configuration.\n   It is important that if any
    VLAN in an LAALP is being mapped by edge\n   RBridges to an FGL [RFC7172] the
    mapping MUST be the same for all\n   edge RBridge ports in the LAALP.  Otherwise,
    for example, unicast FGL\n   TRILL Data packets from remote RBridges may get mapped
    into different\n   VLANs, depending on which edge RBridge receives and egresses
    them.\n   It is important that RBridges in an AAE group not be configured to\n
    \  assert the OE-flag if any RBridge in the group does not implement it.\n   Since,
    as stated in [RFC7379], the RBridges in an AAE edge group are\n   expected to
    be from the same vendor, due to the proprietary nature of\n   deployed LAALPs,
    this will normally follow automatically from all of\n   the RBridges in an AAE
    edge group supporting, or not supporting, OE.\n"
  title: 11.  Configuration Consistency
- contents:
  - "12.  Security Considerations\n   Authenticity for contents transported in IS-IS
    PDUs is enforced using\n   regular IS-IS security mechanisms [IS-IS] [RFC5310].\n
    \  For security considerations pertaining to extensions transported by\n   TRILL
    ESADI, see the Security Considerations section in [RFC7357].\n   Since currently
    deployed LAALPs [RFC7379] are proprietary, security\n   over membership in, and
    internal management of, active-active edge\n   groups is proprietary.  If authentication
    is not used, a rogue\n   RBridge that insinuates itself into an active-active
    edge group can\n   disrupt end-station traffic flowing into or out of that group.
    \ For\n   example, if there are N RBridges in the group, it could typically\n
    \  control 1/Nth of the traffic flowing out of that group and a\n   similar amount
    of unicast traffic flowing into that group.  For\n   multi-destination traffic
    flowing into that group, it could control\n   all that was in a VLAN for which
    it was the DF and can exercise\n   substantial control over the DF election by
    changing its own\n   System ID.\n   For general TRILL security considerations,
    see [RFC6325].\n"
  title: 12.  Security Considerations
- contents:
  - "13.  IANA Considerations\n   IANA has allocated four code points from the range
    below 255 for the\n   four TRILL APPsub-TLVs specified in Section 9 and added
    them to the\n   \"TRILL APPsub-TLV Types under IS-IS TLV 251 Application Identifier
    1\"\n   registry, as follows:\n           Type  Name                        Reference\n
    \          ----  --------------------------  ---------\n             2   PN-LAALP-Membership
    \        RFC 7781\n             3   PN-RBv                      RFC 7781\n             4
    \  PN-MAC-RI-LAALP-INFO-START  RFC 7781\n             5   PN-MAC-RI-LAALP-INFO-END
    \   RFC 7781\n"
  title: 13.  IANA Considerations
- contents:
  - '14.  References

    '
  - contents:
    - "14.1.  Normative References\n   [802.1AX]  IEEE, \"IEEE Standard for Local
      and metropolitan area\n              networks - Link Aggregation\", IEEE Std
      802.1AX-2014,\n              DOI 10.1109/IEEESTD.2014.7055197, December 2014.\n
      \  [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n
      \             <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC5310]  Bhatia,
      M., Manral, V., Li, T., Atkinson, R., White, R.,\n              and M. Fanto,
      \"IS-IS Generic Cryptographic\n              Authentication\", RFC 5310, DOI
      10.17487/RFC5310,\n              February 2009, <http://www.rfc-editor.org/info/rfc5310>.\n
      \  [RFC6165]  Banerjee, A. and D. Ward, \"Extensions to IS-IS for Layer-2\n
      \             Systems\", RFC 6165, DOI 10.17487/RFC6165, April 2011,\n              <http://www.rfc-editor.org/info/rfc6165>.\n
      \  [RFC6234]  Eastlake 3rd, D. and T. Hansen, \"US Secure Hash Algorithms\n
      \             (SHA and SHA-based HMAC and HKDF)\", RFC 6234,\n              DOI
      10.17487/RFC6234, May 2011,\n              <http://www.rfc-editor.org/info/rfc6234>.\n
      \  [RFC6325]  Perlman, R., Eastlake 3rd, D., Dutt, D., Gai, S., and A.\n              Ghanwani,
      \"Routing Bridges (RBridges): Base Protocol\n              Specification\",
      RFC 6325, DOI 10.17487/RFC6325, July 2011,\n              <http://www.rfc-editor.org/info/rfc6325>.\n
      \  [RFC6439]  Perlman, R., Eastlake, D., Li, Y., Banerjee, A., and F.\n              Hu,
      \"Routing Bridges (RBridges): Appointed Forwarders\",\n              RFC 6439,
      DOI 10.17487/RFC6439, November 2011,\n              <http://www.rfc-editor.org/info/rfc6439>.\n
      \  [RFC7172]  Eastlake 3rd, D., Zhang, M., Agarwal, P., Perlman, R., and\n              D.
      Dutt, \"Transparent Interconnection of Lots of Links\n              (TRILL):
      Fine-Grained Labeling\", RFC 7172,\n              DOI 10.17487/RFC7172, May
      2014,\n              <http://www.rfc-editor.org/info/rfc7172>.\n   [RFC7176]
      \ Eastlake 3rd, D., Senevirathne, T., Ghanwani, A., Dutt,\n              D.,
      and A. Banerjee, \"Transparent Interconnection of Lots\n              of Links
      (TRILL) Use of IS-IS\", RFC 7176,\n              DOI 10.17487/RFC7176, May 2014,\n
      \             <http://www.rfc-editor.org/info/rfc7176>.\n   [RFC7356]  Ginsberg,
      L., Previdi, S., and Y. Yang, \"IS-IS Flooding\n              Scope Link State
      PDUs (LSPs)\", RFC 7356,\n              DOI 10.17487/RFC7356, September 2014,\n
      \             <http://www.rfc-editor.org/info/rfc7356>.\n   [RFC7357]  Zhai,
      H., Hu, F., Perlman, R., Eastlake 3rd, D., and O.\n              Stokes, \"Transparent
      Interconnection of Lots of Links\n              (TRILL): End Station Address
      Distribution Information\n              (ESADI) Protocol\", RFC 7357, DOI 10.17487/RFC7357,\n
      \             September 2014, <http://www.rfc-editor.org/info/rfc7357>.\n   [RFC7780]
      \ Eastlake 3rd, D., Zhang, M., Perlman, R., Banerjee, A.,\n              Ghanwani,
      A., and S. Gupta, \"Transparent Interconnection\n              of Lots of Links
      (TRILL): Clarifications, Corrections, and\n              Updates\", RFC 7780,
      DOI 10.17487/RFC7780, February 2016,\n              <http://www.rfc-editor.org/info/rfc7780>.\n
      \  [RFC7783]  Senevirathne, T., Pathangi, J., and J. Hudson,\n              \"Coordinated
      Multicast Trees (CMT) for Transparent\n              Interconnection of Lots
      of Links (TRILL)\", RFC 7783,\n              DOI 10.17487/RFC7783, February
      2016,\n              <http://www.rfc-editor.org/info/rfc7783>.\n"
    title: 14.1.  Normative References
  - contents:
    - "14.2.  Informative References\n   [IS-IS]    International Organization for
      Standardization,\n              \"Information technology -- Telecommunications
      and\n              information exchange between systems -- Intermediate\n              System
      to Intermediate System intra-domain routeing\n              information exchange
      protocol for use in conjunction with\n              the protocol for providing
      the connectionless-mode network\n              service (ISO 8473)\", ISO/IEC
      10589:2002, Second Edition,\n              November 2002.\n   [RFC7174]  Salam,
      S., Senevirathne, T., Aldrin, S., and D. Eastlake\n              3rd, \"Transparent
      Interconnection of Lots of Links (TRILL)\n              Operations, Administration,
      and Maintenance (OAM)\n              Framework\", RFC 7174, DOI 10.17487/RFC7174,
      May 2014,\n              <http://www.rfc-editor.org/info/rfc7174>.\n   [RFC7379]
      \ Li, Y., Hao, W., Perlman, R., Hudson, J., and H. Zhai,\n              \"Problem
      Statement and Goals for Active-Active Connection\n              at the Transparent
      Interconnection of Lots of Links\n              (TRILL) Edge\", RFC 7379, DOI
      10.17487/RFC7379,\n              October 2014, <http://www.rfc-editor.org/info/rfc7379>.\n
      \  [RFC7782]  Zhang, M., Perlman, R., Zhai, H., Durrani, M., and S.\n              Gupta,
      \"Transparent Interconnection of Lots of Links\n              (TRILL) Active-Active
      Edge Using Multiple MAC\n              Attachments\", RFC 7782, DOI 10.17487/RFC7782,\n
      \             February 2016, <http://www.rfc-editor.org/info/rfc7782>.\n"
    title: 14.2.  Informative References
  title: 14.  References
- contents:
  - "Acknowledgments\n   We would like to thank Mingjiang Chen for his contributions
    to this\n   document.  Additionally, we would like to thank Erik Nordmark, Les\n
    \  Ginsberg, Ayan Banerjee, Dinesh Dutt, Anoop Ghanwani, Janardhanan\n   Pathangi,
    Jon Hudson, and Fangwei Hu for their good questions and\n   comments.\n"
  title: Acknowledgments
- contents:
  - "Contributors\n   Weiguo Hao\n   Huawei Technologies\n   101 Software Avenue\n
    \  Nanjing  210012\n   China\n   Phone: +86-25-56623144\n   Email: haoweiguo@huawei.com\n
    \  Donald E. Eastlake 3rd\n   Huawei Technologies\n   155 Beaver Street\n   Milford,
    MA  01757\n   United States\n   Phone: +1-508-333-2270\n   Email: d3e3e3@gmail.com\n"
  title: Contributors
- contents:
  - "Authors' Addresses\n   Hongjun Zhai\n   Jinling Institute of Technology\n   99
    Hongjing Avenue, Jiangning District\n   Nanjing, Jiangsu  211169\n   China\n   Email:
    honjun.zhai@tom.com\n   Tissa Senevirathne\n   Consultant\n   Email: tsenevir@gmail.com\n
    \  Radia Perlman\n   EMC\n   2010 256th Avenue NE, #200\n   Bellevue, WA  98007\n
    \  United States\n   Email: Radia@alum.mit.edu\n   Mingui Zhang\n   Huawei Technologies\n
    \  No. 156 Beiqing Rd., Haidian District\n   Beijing  100095\n   China\n   Email:
    zhangmingui@huawei.com\n   Yizhou Li\n   Huawei Technologies\n   101 Software
    Avenue\n   Nanjing  210012\n   China\n   Phone: +86-25-56625409\n   Email: liyizhou@huawei.com\n"
  title: Authors' Addresses
