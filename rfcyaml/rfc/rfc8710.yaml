- contents:
  - ''
  title: __initial_text__
- contents:
  - 'Multipart Content-Format for the Constrained Application Protocol (CoAP)

    '
  title: Multipart Content-Format for the Constrained Application Protocol (CoAP)
- contents:
  - "Abstract\n   This memo defines application/multipart-core, an application-\n
    \  independent media type that can be used to combine representations of\n   zero
    or more different media types (each with a Constrained\n   Application Protocol
    (CoAP) Content-Format identifier) into a single\n   representation, with minimal
    framing overhead.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8710.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction\n     1.1.  Requirements Language\n   2.
    \ Multipart Content-Format Encoding\n   3.  Usage Example: Observing Resources\n
    \  4.  Implementation Hints\n   5.  IANA Considerations\n     5.1.  Registration
    of Media Type application/multipart-core\n     5.2.  Registration of a Content-Format
    Identifier for\n           application/multipart-core\n   6.  Security Considerations\n
    \  7.  References\n     7.1.  Normative References\n     7.2.  Informative References\n
    \  Acknowledgements\n   Authors' Addresses\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This memo defines application/multipart-core, an application-\n
    \  independent media type that can be used to combine representations of\n   zero
    or more different media types (each with a CoAP Content-Format\n   identifier
    [RFC7252]) into a single representation, with minimal\n   framing overhead.\n
    \  This simple and efficient binary framing mechanism can be employed to\n   create
    application-specific message bodies that build on multiple\n   already existing
    media types.\n   As the name of the media type suggests, application/multipart-core\n
    \  was inspired by the multipart media types initially defined in the\n   original
    set of MIME specifications [RFC2046] and later.  However,\n   while those needed
    to focus on the syntactic aspects of integrating\n   multiple representations
    into one email, transfer protocols providing\n   full data transparency such as
    CoAP as well as readily available\n   encoding formats such as the Concise Binary
    Object Representation\n   (CBOR) [RFC7049] shift the focus towards the intended
    use of the\n   combined representations.  In this respect, the basic intent of
    the\n   application/multipart-core media type is like that of multipart/mixed\n
    \  (Section 5.1.3 of [RFC2046]); however, the semantics are relaxed to\n   allow
    for both ordered and unordered collections of media types.\n      Historical Note:
    Experience with multipart/mixed in email has\n      shown that recipients that
    care about order of included body parts\n      will process them in the order
    they are listed inside multipart/\n      mixed, and recipients that don't care
    about the order will ignore\n      it anyway.  The media type multipart/parallel
    that was intended\n      for unordered collections didn't deploy.\n   The detailed
    semantics of the representations are refined by the\n   context established by
    the application in the accompanying request\n   parameters, e.g., the resource
    URI and any further options (header\n   fields), but three usage scenarios are
    envisioned:\n   In one case, the individual representations in an application/\n
    \  multipart-core message body occur in a sequence, which may be\n   employed
    by an application where such a sequence is natural, e.g.,\n   for a number of
    audio snippets in various formats to be played out in\n   that sequence or search
    results returned in order of relevance.\n   In another case, an application may
    be more interested in a bag of\n   representations (which are distinguished by
    their Content-Format\n   identifiers), such as an audio snippet and a text representation\n
    \  accompanying it.  In such a case, the sequence in which these occur\n   may
    not be relevant to the application.  This specification adds the\n   option of
    substituting a null value for the representation of an\n   optional part, which
    indicates that the part is not present.\n   A third common situation only has
    a single representation in the\n   sequence, and the sender selects just one of
    a set of formats\n   possible for this situation.  This kind of union \"type\"
    of formats\n   may also make the presence of the actual representation optional,
    the\n   omission of which leads to a zero-length array.\n   Where these rules
    are not sufficient, an application might still use\n   the general format defined
    here but register a new media type and an\n   associated Content-Format identifier
    to associate the representation\n   with these more specific semantics instead
    of using the application/\n   multipart-core media type.\n   Also, future specifications
    might want to define rough equivalents\n   for other multipart media types with
    specific semantics not covered\n   by the present specification, such as multipart/alternative\n
    \  (Section 5.1.4 of [RFC2046]), where several alternative\n   representations
    are provided in the message body, but only one of\n   those is to be selected
    by the recipient for its use (this is less\n   likely to be useful in a constrained
    environment that has facilities\n   for pre-flight discovery).\n"
  - contents:
    - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT
      RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted
      as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear
      in all\n   capitals, as shown here.\n"
    title: 1.1.  Requirements Language
  title: 1.  Introduction
- contents:
  - "2.  Multipart Content-Format Encoding\n   A representation of media type application/multipart-core
    contains a\n   collection of zero or more representations, each along with their\n
    \  respective Content-Format.\n   The collection is encoded as a CBOR [RFC7049]
    array with an even\n   number of elements.  Counting from zero, the odd-numbered
    elements\n   are a byte string containing a representation or the value \"null\"
    (if\n   an optional part is indicated as not given).  The (even-numbered)\n   element
    preceding each of these is an unsigned integer specifying the\n   Content-Format
    ID of the representation following it.\n   For example, a collection containing
    two representations, one with\n   Content-Format ID 42 and one with Content-Format
    ID 0, looks like\n   this in CBOR diagnostic notation:\n   [42, h'0123456789abcdef',
    0, h'3031323334']\n   For illustration, the structure of an application/multipart-core\n
    \  representation can be described by the Concise Data Definition\n   Language
    (CDDL) [RFC8610] specification in Figure 1:\n   multipart-core = [* multipart-part]\n
    \  multipart-part = (type: uint .size 2, part: bytes / null)\n               Figure
    1: CDDL for application/multipart-core\n   This format is intended as a strict
    specification: an implementation\n   MUST stop processing the representation if
    there is a CBOR well-\n   formedness error, a deviation from the structure defined
    above, or\n   any residual data left after processing the CBOR data item.  (This\n
    \  generally means the representation is not processed at all unless\n   some
    streaming processing has already happened.)\n"
  title: 2.  Multipart Content-Format Encoding
- contents:
  - "3.  Usage Example: Observing Resources\n   This section illustrates a less obvious
    example for using\n   application/multipart-core: combining it with observing
    a resource\n   [RFC7641] to handle pending results.\n   When a client registers
    to observe a resource for which no\n   representation is available yet, the server
    may send one or more 2.05\n   (Content) notifications that indicate the lack of
    an actual\n   representation.  Later on, when one becomes available, the server\n
    \  will send the first actual 2.05 (Content) or 2.03 (Valid)\n   notification.
    \ A diagram depicting possible resulting sequences of\n   notifications, identified
    by their respective response code, is shown\n   in Figure 2.\n         __________
    \      __________       __________\n   ---->|   2.05   |---->|  2.05 /  |---->|
    \ 4.xx /  |\n        |  Pending |     |   2.03   |     |   5.xx   |\n        |__________|
    \    |__________|     |__________|\n            \\__/  \\          \\___/          /\n
    \                  \\_______________________/\n                    Figure 2: Sequence
    of Notifications\n   The specification of the Observe option requires that all\n
    \  notifications carry the same Content-Format.  The application/\n   multipart-core
    media type can be used to provide that Content-Format,\n   e.g., by carrying an
    empty list of representations in the case marked\n   as \"Pending\" in Figure
    2 and carrying a single representation\n   specified as the target Content-Format
    in the case in the middle of\n   the figure.\n"
  title: '3.  Usage Example: Observing Resources'
- contents:
  - "4.  Implementation Hints\n   This section describes the serialization for readers
    that may be new\n   to CBOR.  It does not contain any new information.\n   An
    application/multipart-core representation carrying no\n   representations is represented
    by an empty CBOR array, which is\n   serialized as a single byte with the value
    0x80.\n   An application/multipart-core representation carrying a single\n   representation
    is represented by a two-element CBOR array, which is\n   serialized as 0x82 followed
    by the two elements.  The first element\n   is an unsigned integer for the Content-Format
    value, which is\n   represented as described in Table 1.  The second element is
    the\n   object as a byte string, which is represented as a length as\n   described
    in Table 2 followed by the bytes of the object.\n                      | Serialization
    \ | Value      |\n                      | 0x00..0x17     | 0..23      |\n                      |
    0x18 0xnn      | 24..255    |\n                      | 0x19 0xnn 0xnn | 256..65535
    |\n                         Table 1: Serialization of\n                               Content-Format\n
    \           | Serialization               | Length            |\n            |
    0x40..0x57                  | 0..23             |\n            | 0x58 0xnn                   |
    24..255           |\n            | 0x59 0xnn 0xnn              | 256..65535        |\n
    \           | 0x5a 0xnn 0xnn 0xnn 0xnn    | 65536..4294967295 |\n            |
    0x5b 0xnn .. 0xnn (8 bytes) | 4294967296..      |\n                  Table 2:
    Serialization of Object Length\n   For example, a single text/plain object (Content-Format
    0) of value\n   \"Hello World\" (11 characters) would be serialized as follows:\n
    \  0x82 0x00 0x4b H e l l o 0x20 W o r l d\n   In effect, the serialization for
    a single object is done by prefixing\n   the object with information that there
    is one object (here: 0x82),\n   information about its Content-Format (here: 0x00),
    and information\n   regarding its length (here: 0x4b).\n   For more than one representation
    included in an application/\n   multipart-core representation, the head of the
    CBOR array is adjusted\n   (0x84 for two representations, 0x86 for three, etc.),
    and the\n   sequences of Content-Format and embedded representations follow.\n
    \  For instance, the example from Section 2 would be serialized as\n   follows:\n
    \  0x84 (*) 0x182A 0x48 0x0123456789ABCDEF (+) 0x00 0x45 0x3031323334\n   where
    (*) marks the start of the information about the first\n   representation (Content-Format
    42, byte string length 8), and (+)\n   marks the start of the second representation
    (Content-Format 0, byte\n   string length 5).\n"
  title: 4.  Implementation Hints
- contents:
  - '5.  IANA Considerations

    '
  - contents:
    - "5.1.  Registration of Media Type application/multipart-core\n   IANA has registered
      the following media type [RFC6838]:\n   Type name:  application\n   Subtype
      name:  multipart-core\n   Required parameters:  N/A\n   Optional parameters:
      \ N/A\n   Encoding considerations:  binary\n   Security considerations:  See
      the Security Considerations section of\n      RFC 8710.\n   Interoperability
      considerations:  N/A\n   Published specification:  RFC 8710\n   Applications
      that use this media type:  Applications that need to\n      combine representations
      of zero or more different media types into\n      one, e.g., EST over secure
      CoAP (EST-CoAP) [EST-COAPS]\n   Fragment identifier considerations:  The syntax
      and semantics of\n      fragment identifiers specified for application/multipart-core
      are\n      as specified for application/cbor.  (At publication of this\n      document,
      there is no fragment identification syntax defined for\n      application/cbor.)\n
      \  Additional information:  Deprecated alias names for this type:  N/A\n                            Magic
      number(s):  N/A\n                            File extension(s):  N/A\n                            Macintosh
      file type code(s):  N/A\n   Person & email address to contact for further information:\n
      \     iesg@ietf.org\n   Intended usage:  COMMON\n   Restrictions on usage:  N/A\n
      \  Author:  CoRE WG\n   Change controller:  IESG\n   Provisional registration?
      (standards tree only):  no\n"
    title: 5.1.  Registration of Media Type application/multipart-core
  - contents:
    - "5.2.  Registration of a Content-Format Identifier for application/\n      multipart-core\n
      \  IANA has registered the following Content-Format in the \"CoAP\n   Content-Formats\"
      subregistry within the \"Constrained RESTful\n   Environments (CoRE) Parameters\"
      registry:\n        | Media Type                 | Encoding | ID | Reference
      |\n        | application/multipart-core | -        | 62 | RFC 8710  |\n           Table
      3: Addition to \"CoAP Content-Formats\" Registry\n"
    title: 5.2.  Registration of a Content-Format Identifier for application/
  title: 5.  IANA Considerations
- contents:
  - "6.  Security Considerations\n   The security considerations of [RFC7049] apply.
    \ In particular,\n   resource exhaustion attacks may employ large values for the
    byte\n   string size fields or employ deeply nested structures of recursively\n
    \  embedded application/multipart-core representations.\n"
  title: 6.  Security Considerations
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC7049]  Bormann, C. and P. Hoffman, \"Concise Binary Object\n              Representation
      (CBOR)\", RFC 7049, DOI 10.17487/RFC7049,\n              October 2013, <https://www.rfc-editor.org/info/rfc7049>.\n
      \  [RFC7252]  Shelby, Z., Hartke, K., and C. Bormann, \"The Constrained\n              Application
      Protocol (CoAP)\", RFC 7252,\n              DOI 10.17487/RFC7252, June 2014,\n
      \             <https://www.rfc-editor.org/info/rfc7252>.\n   [RFC8174]  Leiba,
      B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119 Key Words\",
      BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [EST-COAPS]\n              Stok, P., Kampanakis,
      P., Richardson, M., and S. Raza,\n              \"EST over secure CoAP (EST-coaps)\",
      Work in Progress,\n              Internet-Draft, draft-ietf-ace-coap-est-18,
      6 January\n              2020,\n              <https://tools.ietf.org/html/draft-ietf-ace-coap-est-18>.\n
      \  [RFC2046]  Freed, N. and N. Borenstein, \"Multipurpose Internet Mail\n              Extensions
      (MIME) Part Two: Media Types\", RFC 2046,\n              DOI 10.17487/RFC2046,
      November 1996,\n              <https://www.rfc-editor.org/info/rfc2046>.\n   [RFC6838]
      \ Freed, N., Klensin, J., and T. Hansen, \"Media Type\n              Specifications
      and Registration Procedures\", BCP 13,\n              RFC 6838, DOI 10.17487/RFC6838,
      January 2013,\n              <https://www.rfc-editor.org/info/rfc6838>.\n   [RFC7641]
      \ Hartke, K., \"Observing Resources in the Constrained\n              Application
      Protocol (CoAP)\", RFC 7641,\n              DOI 10.17487/RFC7641, September
      2015,\n              <https://www.rfc-editor.org/info/rfc7641>.\n   [RFC8610]
      \ Birkholz, H., Vigano, C., and C. Bormann, \"Concise Data\n              Definition
      Language (CDDL): A Notational Convention to\n              Express Concise Binary
      Object Representation (CBOR) and\n              JSON Data Structures\", RFC
      8610, DOI 10.17487/RFC8610,\n              June 2019, <https://www.rfc-editor.org/info/rfc8610>.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "Acknowledgements\n   Most of the text in this document is from earlier contributions
    by\n   two of the authors, Thomas Fossati and Klaus Hartke.  This earlier\n   work
    was reorganized in this document based on the requirements in\n   [EST-COAPS]
    and discussions with Michael Richardson, Panos Kampanis,\n   and Peter van der
    Stok.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Thomas Fossati\n   ARM\n   Email: thomas.fossati@arm.com\n
    \  Klaus Hartke\n   Ericsson\n   Torshamnsgatan 23\n   SE-16483 Stockholm\n   Sweden\n
    \  Email: klaus.hartke@ericsson.com\n   Carsten Bormann\n   Universit\xE4t Bremen
    TZI\n   Postfach 330440\n   D-28359 Bremen\n   Germany\n"
  title: Authors' Addresses
