- title: __initial_text__
  contents:
  - "                Trait-Based Authorization Requirements\n               for the\
    \ Session Initiation Protocol (SIP)\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document lays out a set of requirements related to trait-based\n\
    \   authorization for the Session Initiation Protocol (SIP).  While some\n   authentication\
    \ mechanisms are described in the base SIP\n   specification, trait-based authorization\
    \ provides information used to\n   make policy decisions based on the attributes\
    \ of a participant in a\n   session.  This approach provides a richer framework\
    \ for\n   authorization, as well as allows greater privacy for users of an\n \
    \  identity system.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Terminology .....................................................4\n  \
    \ 3. Trait-Based Authorization Framework .............................4\n   4.\
    \ Example Use Cases ...............................................7\n      4.1.\
    \ Settlement for Services ....................................7\n      4.2. Associating\
    \ Gateways with Providers ........................7\n      4.3. Permissions on\
    \ Constrained Resources .......................8\n      4.4. Managing Priority\
    \ and Precedence ...........................9\n      4.5. Linking Different Protocols\
    \ ...............................10\n   5. Trait-Based Authorization Requirements\
    \ .........................11\n   6. Security Considerations ........................................13\n\
    \   7. Acknowledgements ...............................................13\n  \
    \ 8. References .....................................................13\n    \
    \  8.1. Normative References ......................................13\n      8.2.\
    \ Informative References ....................................13\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document explores requirements of the Session Initiation\n\
    \   Protocol (SIP) [1] for enabling trait-based authorization.  This\n   effort\
    \ stems from the recognition that when SIP requests are received\n   by a User\
    \ Agent Server (UAS), there are authorization requirements\n   that are orthogonal\
    \ to ascertaining of the identity of the User Agent\n   Client (UAC).  Supplemental\
    \ authorization information might allow the\n   UAS to implement non-identity-based\
    \ policies that depend on further\n   attributes of the principal that originated\
    \ a SIP request.\n   For example, in traditional SIP authorization architectures,\
    \ the mere\n   fact that a UAC has been authenticated by a UAS doesn't mean that\
    \ the\n   UAS will grant the UAC full access to its services or capabilities --\n\
    \   in most instances, a UAS will compare the authenticated identity of\n   the\
    \ UAC to some set of users that are permitted to make particular\n   requests\
    \ (as a way of making an authorization decision).  However, in\n   large communities\
    \ of users with few preexisting relationships (such\n   as federations of discrete\
    \ service providers), it is unlikely that\n   the authenticated identity of a\
    \ UAC alone will give a UAS sufficient\n   information to decide how to handle\
    \ a given request.\n   Trait-based authorization entails an assertion by an authorization\n\
    \   service of attributes associated with an identity.  An assertion is a\n  \
    \ sort of document consisting of a set of these attributes that are\n   wrapped\
    \ within a digital signature provided by the party that\n   generates the assertion\
    \ (the operator of the authorization service).\n   These attributes describe the\
    \ 'trait' or 'traits' of the identity in\n   question -- facts about the principal\
    \ corresponding to that identity.\n   For example, a given principal might be\
    \ a faculty member at a\n   university.  An assertion for that principal's identity\
    \ might state\n   that they have the 'trait' of 'is a faculty member', and the\n\
    \   assertion would be issued (and signed) by a university.  When a UAS\n   receives\
    \ a request with this trait assertion, if it trusts the\n   signing university,\
    \ it can make an authorization decision based on\n   whether or not faculty members\
    \ are permitted to make the request in\n   question, rather than just looking\
    \ at the identity of the UAC and\n   trying to discern whether or not they are\
    \ a faculty member through\n   some external means.  Thus, these assertions allow\
    \ a UAS to authorize\n   a SIP request without having to store or access attributes\
    \ associated\n   with the identity of the UAC itself.  Even complex authorization\n\
    \   decisions based the presence of multiple disjointed attributes are\n   feasible;\
    \ for example, a 'faculty' member could be part of the\n   'chemistry' department,\
    \ and both of these traits could be used to\n   make authorization decisions in\
    \ a given federation.\n   It is easy to see how traits can be used in a single\
    \ administrative\n   domain, for example, a single university, where all users\
    \ are managed\n   under the same administration.  In order for traits to have\
    \ a broader\n   usage for services like SIP, which commonly are not bounded by\n\
    \   administrative domains, domains that participate in a common\n   authorization\
    \ scheme must federate with one another.  The concept of\n   federation is integral\
    \ to any trait-based authorization scheme.\n   Domains that federate with one\
    \ another agree on the syntax and\n   semantics of traits -- without this consensus,\
    \ trait-based\n   authorization schemes would only be useful in an intradomain\
    \ context.\n   A federation is defined as a set of administrative domains that\n\
    \   implement common policies regarding the use and applicability of\n   traits\
    \ for authorization decisions.  Federation necessarily implies a\n   trust relationship,\
    \ and usual implies some sort of pre-shared keys or\n   other means of cryptographic\
    \ assurance that a particular assertion\n   was generated by an authorization\
    \ service that participates in the\n   federation.\n   In fact, when trait-based\
    \ authorization is used, an assertion of\n   attributes can be presented to a\
    \ UAS instead of the identity of user\n   of the UAC.  In many cases, a UAS has\
    \ no need to know who, exactly,\n   has made a request -- knowing the identity\
    \ is only a means to the end\n   of matching that identity to policies that actually\
    \ depend on traits\n   independent of identity.  This fact allows trait-based\
    \ authorization\n   to offer a very compelling privacy and anonymity solution.\
    \  Identity\n   becomes one more attribute of an assertion that may or may not\
    \ be\n   disclosed to various destinations.\n   Trait-based authorization for\
    \ SIP depends on authorization services\n   that are trusted by both the UAC and\
    \ the UAS that wish to share a\n   session.  For that reason, the authorization\
    \ services described in\n   this document are most applicable to clients either\
    \ in a single\n   domain or in federated domains that have agreed to trust one\n\
    \   another's authorization services.  This could be common in academic\n   environments,\
    \ or business partnerships that wish to share attributes\n   of principals with\
    \ one another.  Some trait-based authorization\n   architectures have been proposed\
    \ to provide single sign-on services\n   across multiple providers.\n   Although\
    \ trait-based identity offers an alternative to traditional\n   identity architectures,\
    \ this effort should be considered\n   complementary to the end-to-end cryptographic\
    \ SIP identity effort\n   [3].  An authentication service might also act as an\
    \ authorization\n   service, generating some sort of trait assertion token instead\
    \ of an\n   authenticated identity body.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   In this document, the key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\",\n   \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"NOT\n   RECOMMENDED\", \"MAY\", and \"OPTIONAL\" are to be interpreted as\n\
    \   described in RFC 2119 [2] and indicate requirement levels for\n   compliant\
    \ SIP implementations.\n"
- title: 3.  Trait-Based Authorization Framework
  contents:
  - "3.  Trait-Based Authorization Framework\n   A trait-based authorization architecture\
    \ entails the existence of an\n   authorization service.  Devices must send requests\
    \ to an\n   authorization service in order to receive an assertion that can be\n\
    \   used in the context of a given network request.  Different network\n   request\
    \ types will often necessitate different or additional\n   attributes in assertions\
    \ from the authorization service.\n   For the purposes of SIP, SIP requests might\
    \ be supplied to an\n   authorization service to provide the basis for an assertion.\
    \  It\n   could be the case that a user agent will take a particular SIP\n   request,\
    \ such as an INVITE, for which it wishes to acquire an\n   assertion and forward\
    \ this to the authorization service (in a manner\n   similar to the way that an\
    \ authenticated identity body is requested\n   in [3]).  User agents might also\
    \ use a separate protocol to request\n   an assertion.  In either case, the client\
    \ will need to authenticate\n   itself to an authorization service before it receives\
    \ an assertion.\n   This authentication could use any of the standard mechanisms\n\
    \   described in RFC 3261 [1], or use some other means of authentication.\n  \
    \ Once a SIP UA has an assertion, it will need some way to carry an\n   assertion\
    \ within in a SIP request.  It's possible that this assertion\n   could be provided\
    \ by reference or by value.  For example, a SIP UA\n   could include a MIME body\
    \ within a SIP request that contains the\n   assertion; this would be inclusion\
    \ by value.  Alternatively, content\n   indirection [4], or some new header, could\
    \ be used to provide a URI\n   (perhaps an HTTP URL) where interested parties\
    \ could acquire the\n   assertion; this is inclusion by reference.\n   The basic\
    \ model is as follows:\n   +----------------+                         |      \
    \          |\n   | +------------+ |          Request        | +------------+ |\n\
    \   | | Entity     | |------------------------>| | Assertion  | |\n   | | requesting\
    \ | |                         | | Granting   | |\n   | | authz      | |<------------------------|\
    \ | Entity     | |\n   | | assertions | |          Assertion      | +------------+\
    \ |\n   | +------------+ |                         |      ^         |\n   |  \
    \     |        |                         |      . Trust   |\n   |       |    \
    \    |                         |      . Rel.    |\n   |       |        |     \
    \                    |      v         |\n   |       |        |               \
    \          | +------------+ |\n   |    Transfer    |                         |\
    \ | Assertion  | |\n   |       |        |                         | | Verifying\
    \  | |\n   |       |        |                         | | Entity     | |\n   |\
    \       |        |                         | +------------+ |\n   |       |  \
    \      |                         |                |\n   |       v        |   \
    \                      +----------------+\n   | +------------+ |    Service Request\
    \ +         ^  |\n   | | Entity     | |    Assertion                 |  |\n  \
    \ | | using authz| | -----------------------------+  |\n   | | assertion  | |\
    \                                 |\n   | +------------+ | <-------------------------------+\n\
    \   +----------------+    Response/Error\n   The entity requesting authorization\
    \ assertions (or the entity that\n   gets some assertions granted) and the entity\
    \ using these\n   authorization assertions might be co-located in the same host\
    \ or\n   domain, or they might be entities in different domains that share a\n\
    \   federate with one another.  The same is true for the entity that\n   grants\
    \ these assertions to a particular entity and the entity that\n   verifies these\
    \ assertions.\n   From a protocol point of view, it is worth noting that the process\
    \ of\n   obtaining some assertions might happen some time before the usage of\n\
    \   these assertions.  Furthermore, different protocols might be used and\n  \
    \ the assertions may have a lifetime that might allow that these\n   assertions\
    \ are presented to the verifying entity multiple times\n   (during the lifetime\
    \ of the assertion).\n   Some important design decisions are associated with carrying\n\
    \   assertions in a SIP request.  If an assertion is carried by value, or\n  \
    \ uses a MIME-based content indirection system, then proxy servers will\n   be\
    \ unable to inspect the assertion themselves.  If the assertion were\n   referenced\
    \ in a header, however, it might be possible for the proxy\n   to acquire and\
    \ inspect the assertion itself.  There are certainly\n   architectures in which\
    \ it would be meaningful for proxy servers to\n   apply admissions controls based\
    \ on assertions.\n   It is also the case that carrying assertions by reference\
    \ allows\n   versatile access controls to be applied to the assertion itself.\
    \  For\n   instance, an HTTP URL where an assertion could be acquired could\n\
    \   indicate a web server that challenged requests, and only allowed\n   certain\
    \ authorized sources to inspect the assertion, or that provided\n   different\
    \ versions of the assertion depending on who is asking.  When\n   a SIP UA initiates\
    \ a request with privacy controls [5], a web server\n   might provide only trait\
    \ information ('faculty', 'student', or\n   'staff') to most queries, but provide\
    \ more detailed information,\n   including the identity of the originator of the\
    \ SIP request, to\n   certain privileged askers.  The end-users that make requests\
    \ should\n   have some way to inform authorization services of the attributes\
    \ that\n   should be shared with particular destinations.\n   Assertions themselves\
    \ might be scoped to a particular SIP transaction\n   or SIP dialog, or they might\
    \ have a longer lifetime.  The recipient\n   of an assertion associated with a\
    \ SIP request needs to have some way\n   to verify that the authorization service\
    \ intended that this assertion\n   could be used for the request in question.\
    \  However, the format of\n   assertions is not specified by these requirements.\n\
    \   Trait assertions for responses to SIP requests are outside the scope\n   of\
    \ these requirements; it is not clear if there is any need for the\n   recipient\
    \ of a request to provide authorization data to the\n   requestor.\n   Trait-based\
    \ authorization has significant applicability to SIP.\n   There are numerous instances\
    \ in which it is valuable to assert\n   particular facts about a principal other\
    \ than the principal's\n   identity to aid the recipient of a request in making\
    \ an authorization\n   policy decision.  For example, a telephony service provider\
    \ might\n   assert that a particular user is a 'customer' as a trait.  An\n  \
    \ emergency services network might indicate that a particular user has\n   a privileged\
    \ status as a caller.\n"
- title: 4.  Example Use Cases
  contents:
  - "4.  Example Use Cases\n   The following use cases are by no means exhaustive,\
    \ but provide a few\n   high-level examples of the sorts of services that trait-based\n\
    \   authorization might provide.  All of the cases below consider\n   interdomain\
    \ usage of authorization assertions.\n"
- title: 4.1.  Settlement for Services
  contents:
  - "4.1.  Settlement for Services\n   When endpoints in two domains share real-time\
    \ communications\n   services, sometimes there is a need for the domains to exchange\n\
    \   accounting and settlement information in real-time.  The operators of\n  \
    \ valuable resources (for example, Public Switched Telephone Network\n   (PSTN)\
    \ trunking, conference bridges, or the like) in the called\n   domain may wish\
    \ to settle with the calling domain (either with the\n   operators of the domain\
    \ or a particular user), and some accounting\n   operations might need to complete\
    \ before a call is terminated.  For\n   example, a caller in one domain might\
    \ want to access a conference\n   bridge in another domain, and the called domain\
    \ might wish to settle\n   for the usage of the bridge with the calling domain.\
    \  Or in a\n   wireless context, a roaming user might want to use services in\
    \ a\n   visited network, and the visited network might need to understand how\n\
    \   to settle with the user's home network for these services.\n   Assuming that\
    \ the calling domain constitutes some sort of commercial\n   service capable of\
    \ exchanging accounting information, the called\n   domain may want to verify\
    \ that the remote user has a billable account\n   in good standing before allowing\
    \ a remote user access to valuable\n   resources.  Moreover, the called domain\
    \ may need to discover the\n   network address of an accounting server and some\
    \ basic information\n   about how to settle with it.\n   An authorization assertion\
    \ created by the calling domain could\n   provide the called domain with an assurance\
    \ that a user's account can\n   settle for a particular service.  In some cases,\
    \ no further\n   information may be required to process a transaction, but if\
    \ more\n   specific accounting data is needed, traits could also communicate the\n\
    \   network address of an accounting server, the settlement protocol that\n  \
    \ should be used, and so on.\n"
- title: 4.2.  Associating Gateways with Providers
  contents:
  - "4.2.  Associating Gateways with Providers\n   Imagine a case where a particular\
    \ telephone service provider has\n   deployed numerous PSTN-SIP gateways.  When\
    \ calls come in from the\n   PSTN, they are eventually proxied to various SIP\
    \ user agents.  Each\n   SIP user agent server is interested to know the identity\
    \ of the PSTN\n   caller, of course, which could be given within SIP messages\
    \ in any\n   number of ways (in SIP headers, bodies, or what have you).  However,\n\
    \   in order for the recipient to be able to trust the identity (in this\n   instance,\
    \ the calling party's telephone number) stated in the call,\n   they must first\
    \ trust that the call originated from the gateway and\n   that the gateway is\
    \ operated by a known (and trusted) provider.\n   There are a number of ways that\
    \ a service provider might try to\n   address this problem.  One possibility would\
    \ be routing all calls\n   from gateways through a recognizable 'edge' proxy server\
    \ (say,\n   'sip.example.com').  Accordingly, any SIP entity that received a\n\
    \   request via the edge proxy server (assuming the use of hop-by-hop\n   mutual\
    \ cryptographic authentication) would know the service provider\n   from whom\
    \ the call originated.  However, it is possible that requests\n   from the originating\
    \ service provider's edge proxy might be proxied\n   again before reaching the\
    \ destination user agent server, and thus in\n   many cases the originating service\
    \ provider's identity would be known\n   only transitively.  Moreover, in many\
    \ architectures requests that did\n   not originate from PSTN gateways could be\
    \ sent through the edge proxy\n   server.  In the end analysis, the recipient\
    \ of the request is less\n   interested in knowing which carrier the request came\
    \ from than in\n   knowing that the request came from a gateway.\n   Another possible\
    \ solution is to issue certificates to every gateway\n   corresponding to the\
    \ hostname of the gateway\n   ('gateway1.example.com').  Gateways could therefore\
    \ sign SIP requests\n   directly, and this property could be preserved end-to-end.\
    \  But\n   depending on the public key infrastructure, this could, however,\n\
    \   become costly for large numbers of gateways, and moreover a user\n   agent\
    \ server that receives the request has no direct assurance from a\n   typical\
    \ certificate that the host is in fact a gateway just because\n   it happens to\
    \ be named 'gateway1'.\n   Trait-based authorization would enable the trait 'is\
    \ a gateway' to be\n   associated with an assertion that is generated by the service\n\
    \   provider (i.e., signed by 'example.com').  Since these assertions\n   would\
    \ travel end-to-end from the originating service provider to the\n   destination\
    \ user agent server, SIP requests that carry them can pass\n   through any number\
    \ of intermediaries without discarding cryptographic\n   authentication information.\
    \  This mechanism also does not rely on\n   hostname conventions to identify what\
    \ constitutes a gateway and what\n   does not -- it relies on an explicit and\
    \ unambiguous attribute in an\n   assertion.\n"
- title: 4.3.  Permissions on Constrained Resources
  contents:
  - "4.3.  Permissions on Constrained Resources\n   Consider a scenario wherein two\
    \ universities are making use of a\n   videoconferencing service over a constrained-bandwidth\
    \ resource.\n   Both universities would like to enforce policies that determine\
    \ how\n   this constrained bandwidth will be allocated to members of their\n \
    \  respective communities.  For example, faculty members might have\n   privileges\
    \ to establish videoconferences during the day, while\n   students might not.\
    \  Faculty might also be able to add students to a\n   particular videoconference\
    \ dynamically, or otherwise moderate the\n   content or attendance of the conference,\
    \ whereas students might\n   participate only more passively.\n   Trait-based\
    \ authorization is ideal for managing authorization\n   decisions that are predicated\
    \ on membership in a group.  Rather than\n   basing access on individual users,\
    \ levels (or roles) could be\n   assigned that would be honored by both universities,\
    \ since they both\n   participate in the same federation.\n   If the federation\
    \ honored the traits \"faculty\", \"staff\", and\n   \"student\", they could be\
    \ leveraged to ensure appropriate use of the\n   network resource between universities\
    \ participating in the\n   federation.  An assertion would then be attached to\
    \ every request to\n   establish a session that indicated the role of the requestor.\
    \  Only\n   if the requestor has the appropriate trait would the session request\n\
    \   be granted.  Ideally, these policies would be enforced by\n   intermediaries\
    \ (SIP proxy servers) that are capable of inspecting and\n   verifying the assertions.\n"
- title: 4.4.  Managing Priority and Precedence
  contents:
  - "4.4.  Managing Priority and Precedence\n   There is a significant amount of interest\
    \ in the Internet telephony\n   community in assigning certain calls a 'priority'\
    \ based on the\n   identity of the user, with the presumption that prioritized\
    \ calls\n   will be granted preferential treatment when network resources are\n\
    \   scarce.  Different domains might have different criteria for\n   assigning\
    \ priority, and it is unlikely that a domain would correlate\n   the identity\
    \ of a non-local user with the need for priority, even in\n   situations where\
    \ domains would like to respect one another's\n   prioritization policies.\n \
    \  Existing proposals have focused largely on adding a new header field\n   to\
    \ SIP that might carry a priority indicator.  This use case does not\n   challenge\
    \ this strategy, but merely shows by way of example how this\n   requirement might\
    \ be met with a trait-based authorization system.  As\n   such, the limitations\
    \ of the header field approach will not be\n   contrasted here with a hypothetical\
    \ trait-based system.\n   An assertion created by a domain for a particular request\
    \ might have\n   an associated 'priority' attribute.  Recipients of the request\
    \ could\n   inspect and verify the signature associated with the assertion to\n\
    \   determine which domain had authenticated the user and made the\n   priority\
    \ assessment.  If the assertion's creator is trusted by the\n   evaluator, the\
    \ given priority could be factored into any relevant\n   request processing.\n"
- title: 4.5.  Linking Different Protocols
  contents:
  - "4.5.  Linking Different Protocols\n   Cryptographic computations are expensive\
    \ and computing authorization\n   decisions might require a lot of time and multiple\
    \ messages between\n   the entity enforcing the decisions and the entity computing\
    \ the\n   authorization decision.  Particularly in a mobile environment these\n\
    \   entities are physically separated -- or not even in the same\n   administrative\
    \ domain.  Accordingly, the notion of \"single sign-on\"\n   is another potential\
    \ application of authorization assertions and\n   trait-based authorization --\
    \ a user is authenticated and authorized\n   through one protocol, and can reuse\
    \ the resulting authorization\n   assertion in other, potential unrelated protocol\
    \ exchanges.\n   For example, in some environments it is useful to make the\n\
    \   authorization decision for a \"high-level\" service (such as a voice\n   call).\
    \  The authorization for the \"voice call\" itself might include\n   authorization\
    \ for SIP signaling and also for lower-level network\n   functions, for example,\
    \ a quality-of-service (QoS) reservation to\n   improve the performance of real-time\
    \ media sessions established by\n   SIP.  Since the SIP signaling protocol and\
    \ the QoS reservation\n   protocol are totally separate, it is necessary to link\
    \ the\n   authorization decisions of the two protocols.  The authorization\n \
    \  decision might be valid for a number of different protocol exchanges,\n   for\
    \ different protocols and for a certain duration or some other\n   attributes.\n\
    \   To enable this mechanism as part of the initial authorization step,\n   an\
    \ authorization assertion is returned to the end host of the SIP UAC\n   (cryptographically\
    \ protected).  If QoS is necessary, the end host\n   might reuse the returned\
    \ assertion in the QoS signaling protocol.\n   Any domains in the federation that\
    \ would honor the assertion\n   generated to authorize the SIP signaling would\
    \ similarly honor the\n   use of the assertion in the context of QoS.  Upon the\
    \ initial\n   generation of the assertion by an authorization server, traits could\n\
    \   be added that specify the desired level of quality that should be\n   granted\
    \ to the media associated with a SIP session.\n"
- title: 5.  Trait-Based Authorization Requirements
  contents:
  - "5.  Trait-Based Authorization Requirements\n   The following are the constraints\
    \ and requirements for trait-based\n   authorization in SIP:\n   1.  The mechanism\
    \ MUST support a way for SIP user agents to embed an\n       authorization assertion\
    \ in SIP requests.  Assertions can be\n       carried either by reference or by\
    \ value.\n   2.  The mechanism MUST allow SIP UACs to deliver to an authorization\n\
    \       service those SIP requests that need to carry an assertion.  The\n   \
    \    mechanism SHOULD also provide a way for SIP intermediaries to\n       recognize\
    \ that an assertion will be needed, and either forward\n       requests to an\
    \ authorization service themselves or notify the UAC\n       of the need to do\
    \ so.\n   3.  Authorization services MUST be capable of delivering an assertion\n\
    \       to a SIP UAC, either by reference or by value.  It MAY also be\n     \
    \  possible for an authorization service to add assertions to\n       requests\
    \ itself, if the user profile permits this (for example,\n       through the use\
    \ of content-indirection as described in [4]).\n   4.  Authorization services\
    \ MUST have a way to authenticate a SIP UAC.\n   5.  The assertions generated\
    \ by authorization services MUST be\n       capable of providing a set of values\
    \ for a particular trait that\n       a principal is entitled to claim.\n   6.\
    \  The mechanism MUST provide a way for authorized SIP\n       intermediaries\
    \ (e.g., authorized proxy servers) to inspect\n       assertions.\n   7.  The\
    \ mechanism MUST have a single baseline mandatory-to-implement\n       authorization\
    \ assertion scheme.  The mechanism MUST also allow\n       support of other assertion\
    \ schemes, which would be optional to\n       implement.  One example of an assertion\
    \ scheme is Security\n       Assertion Markup Language (SAML) [6] and another\
    \ is RFC 3281\n       X.509 Attribute Certificates [7].\n   8.  The mechanism\
    \ MUST ensure reference integrity between a SIP\n       request and assertion.\
    \  Reference integrity refers to the\n       relationship between a SIP message\
    \ and the assertion authorizing\n       the message.  For example, a reference\
    \ integrity check would\n       compare the sender of the message (as expressed\
    \ in the SIP\n       request, for example, in the \"From\" header field value)\
    \ with the\n       identity provided by the assertion.  Reference integrity is\n\
    \       necessary to prevent various sorts of relay and impersonation\n      \
    \ attacks.  Note that reference integrity MAY apply on a per-\n       message,\
    \ per-transaction, or per-dialog basis.\n   9.  Assertion schemes used for this\
    \ mechanism MUST be capable of\n       asserting attributes and/or traits associated\
    \ with the identity\n       of the principal originating a SIP request.  No specific\
    \ traits\n       or attributes are required by this specification.\n   10. The\
    \ mechanism MUST support a means for end-users to specify\n       policies to\
    \ an authorization service for the distribution of\n       their traits and/or\
    \ attributes to various destinations.\n   11. The mechanism MUST provide a way\
    \ of preventing unauthorized\n       parties (either intermediaries or endpoints)\
    \ from viewing the\n       contents of assertions.\n   12. Assertion schemes MUST\
    \ provide a way of selectively sharing the\n       traits and/or attributes of\
    \ the principal in question.  In other\n       words, it must be possible to show\
    \ only some of the attributes of\n       a given principal to particular recipients,\
    \ based on the\n       cryptographically- assured identity of the recipient.\n\
    \   13. It MUST be possible to provide an assertion that contains no\n       identity\
    \ -- that is, to present only attributes or traits of the\n       principal making\
    \ a request, rather than the identity of the\n       principal.\n   14. The manner\
    \ in which an assertion is distributed MUST permit\n       cryptographic authentication\
    \ and integrity properties to be\n       applied to the assertion by the authorization\
    \ service.\n   15. It MUST be possible for a UAS or proxy server to reject a request\n\
    \       that lacks a present and valid authorization assertion, and to\n     \
    \  inform the sending UAC that it must acquire such an assertion in\n       order\
    \ to complete the request.\n   16. The recipient of a request containing an assertion\
    \ MUST be able\n       to ascertain which authorization service generated the\
    \ assertion.\n   17. It MUST be possible for a UAS or proxy server to reject a\
    \ request\n       containing an assertion that does not provide any attributes\
    \ or\n       traits that are known to the recipient or that are relevant to\n\
    \       the request in question.\n   18. It SHOULD be possible for a UAC to attach\
    \ multiple assertions to\n       a single SIP request, in cases where multiple\
    \ authorization\n       services must provide assertions in order for a request\
    \ to\n       complete.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   The subject of this document is an authorization\
    \ system for SIP that\n   is not predicated on the distribution of end-users'\
    \ identities, but\n   rather shares traits of the users.  As such, the bulk of\
    \ this\n   document discusses security.\n   The distribution of authorization\
    \ assertions requires numerous\n   security properties.  An authorization service\
    \ must be able to sign\n   assertions, or provide some similar cryptographic assurance\
    \ that can\n   provide non-repudiation for assertions.  These requirements are\n\
    \   further detailed in Section 3.\n"
- title: 7.  Acknowledgements
  contents:
  - "7.  Acknowledgements\n   The authors thank Christopher Eagan and Mary Barnes\
    \ for their\n   valuable input.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [1]  Rosenberg, J., Schulzrinne, H., Camarillo,\
    \ G., Johnston, A.,\n        Peterson, J., Sparks, R., Handley, M., and E. Schooler,\
    \ \"SIP:\n        Session Initiation Protocol\", RFC 3261, June 2002.\n   [2]\
    \  Bradner, S., \"Key words for use in RFCs to Indicate Requirement\n        Levels\"\
    , BCP 14, RFC 2119, March 1997.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [3]  Peterson, J. and C. Jennings, \"Enhancements\
    \ for Authenticated\n        Identity Management in the Session Initiation Protocol\
    \ (SIP)\",\n        RFC 4474, August 2006.\n   [4]  Burger, E., Ed., \"A Mechanism\
    \ for Content Indirection in Session\n        Initiation Protocol (SIP) Messages\"\
    , RFC 4483, May 2006.\n   [5]  Peterson, J., \"A Privacy Mechanism for the Session\
    \ Initiation\n        Protocol (SIP)\", RFC 3323, November 2002.\n   [6]  Organization\
    \ for the Advancement of Structured Industry\n        Standards, \"Security Assertion\
    \ Markup Language v1.0\", November\n        2002, <http://www.oasis-open.org>.\n\
    \   [7]  Farrell, S. and R. Housley, \"An Internet Attribute Certificate\n   \
    \     Profile for Authorization\", RFC 3281, April 2002.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Jon Peterson\n   NeuStar, Inc.\n   1800 Sutter St\n  \
    \ Suite 570\n   Concord, CA  94520\n   US\n   Phone: +1 925/363-8720\n   EMail:\
    \ jon.peterson@neustar.biz\n   URI:   http://www.neustar.biz/\n   James M. Polk\n\
    \   Cisco Systems\n   2200 East President George Bush Turnpike\n   Suite 570\n\
    \   Richardson, TX  75802\n   US\n   EMail: jmpolk@cisco.com\n   Douglas C. Sicker\n\
    \   University of Colorado at Boulder\n   ECOT 531\n   Boulder, CO  80309\n  \
    \ US\n   EMail: douglas.sicker@colorado.edu\n   Hannes Tschofenig\n   Siemens\
    \ AG\n   Otto-Hahn-Ring 6\n   Munich  81739\n   Germany\n   EMail: Hannes.Tschofenig@siemens.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
