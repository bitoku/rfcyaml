- title: __initial_text__
  contents:
  - '                       Quick-Start for TCP and IP

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2007).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies an optional Quick-Start mechanism for\n\
    \   transport protocols, in cooperation with routers, to determine an\n   allowed\
    \ sending rate at the start and, at times, in the middle of a\n   data transfer\
    \ (e.g., after an idle period).  While Quick-Start is\n   designed to be used\
    \ by a range of transport protocols, in this\n   document we only specify its\
    \ use with TCP.  Quick-Start is designed\n   to allow connections to use higher\
    \ sending rates when there is\n   significant unused bandwidth along the path,\
    \ and the sender and all\n   of the routers along the path approve the Quick-Start\
    \ Request.\n   This document describes many paths where Quick-Start Requests would\n\
    \   not be approved.  These paths include all paths containing routers,\n   IP\
    \ tunnels, MPLS paths, and the like that do not support Quick-\n   Start.  These\
    \ paths also include paths with routers or middleboxes\n   that drop packets containing\
    \ IP options.  Quick-Start Requests could\n   be difficult to approve over paths\
    \ that include multi-access layer-\n   two networks.  This document also describes\
    \ environments where the\n   Quick-Start process could fail with false positives,\
    \ with the sender\n   incorrectly assuming that the Quick-Start Request had been\
    \ approved\n   by all of the routers along the path.  As a result of these concerns,\n\
    \   and as a result of the difficulties and seeming absence of motivation\n  \
    \ for routers, such as core routers to deploy Quick-Start, Quick-Start\n   is\
    \ being proposed as a mechanism that could be of use in controlled\n   environments,\
    \ and not as a mechanism that would be intended or\n   appropriate for ubiquitous\
    \ deployment in the global Internet.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Conventions and Terminology ................................5\n  \
    \ 2. Assumptions and General Principles ..............................6\n    \
    \  2.1. Overview of Quick-Start ....................................7\n   3. The\
    \ Quick-Start Option in IP ...................................10\n      3.1. The\
    \ Quick-Start Option for IPv4 ...........................10\n      3.2. The Quick-Start\
    \ Option for IPv6 ...........................13\n      3.3. Processing the Quick-Start\
    \ Request at Routers .............14\n           3.3.1. Processing the Report\
    \ of Approved Rate .............15\n      3.4. The QS Nonce ..............................................16\n\
    \   4. The Quick-Start Mechanisms in TCP ..............................18\n  \
    \    4.1. Sending the Quick-Start Request ...........................19\n    \
    \  4.2. The Quick-Start Response Option in the TCP header .........20\n      4.3.\
    \ TCP: Sending the Quick-Start Response .....................21\n      4.4. TCP:\
    \ Receiving and Using the Quick-Start Response Packet ..22\n      4.5. TCP: Controlling\
    \ Acknowledgement Traffic on the\n           Reverse Path ..............................................24\n\
    \      4.6. TCP: Responding to a Loss of a Quick-Start Packet .........26\n  \
    \    4.7. TCP: A Quick-Start Request for a Larger Initial Window ....26\n    \
    \       4.7.1. Interactions with Path MTU Discovery ...............26\n      \
    \     4.7.2. Quick-Start Request Packets that are\n                  Discarded\
    \ by Routers or Middleboxes ................27\n      4.8. TCP: A Quick-Start\
    \ Request in the Middle of a Connection ..28\n      4.9. An Example Quick-Start\
    \ Scenario with TCP ..................29\n   5. Quick-Start and IPsec AH .......................................30\n\
    \   6. Quick-Start in IP Tunnels and MPLS .............................31\n  \
    \    6.1. Simple Tunnels that Are Compatible with Quick-Start .......33\n    \
    \       6.1.1. Simple Tunnels that Are Aware of Quick-Start .......33\n      6.2.\
    \ Simple Tunnels that Are Not Compatible with Quick-Start ...34\n      6.3. Tunnels\
    \ That Support Quick-Start ..........................35\n      6.4. Quick-Start\
    \ and MPLS ......................................35\n   7. The Quick-Start Mechanism\
    \ in Other Transport Protocols .........36\n   8. Using Quick-Start ..............................................37\n\
    \      8.1. Determining the Rate to Request ...........................37\n  \
    \    8.2. Deciding the Permitted Rate Request at a Router ...........37\n   9.\
    \ Evaluation of Quick-Start ......................................38\n      9.1.\
    \ Benefits of Quick-Start ...................................38\n      9.2. Costs\
    \ of Quick-Start ......................................39\n      9.3. Quick-Start\
    \ with QoS-Enabled Traffic ......................41\n      9.4. Protection against\
    \ Misbehaving Nodes ......................41\n           9.4.1. Misbehaving Senders\
    \ ................................41\n           9.4.2. Receivers Lying about\
    \ Whether the Request\n                  was Approved .......................................43\n\
    \           9.4.3. Receivers Lying about the Approved Rate ............43\n  \
    \         9.4.4. Collusion between Misbehaving Routers ..............44\n    \
    \  9.5. Misbehaving Middleboxes and the IP TTL ....................46\n      9.6.\
    \ Attacks on Quick-Start ....................................46\n      9.7. Simulations\
    \ with Quick-Start ..............................47\n   10. Implementation and\
    \ Deployment Issues ..........................47\n      10.1. Implementation Issues\
    \ for Sending Quick-Start Requests ...47\n      10.2. Implementation Issues for\
    \ Processing Quick-Start\n            Requests .................................................48\n\
    \      10.3. Possible Deployment Scenarios ............................48\n  \
    \    10.4. A Comparison with the Deployment Problems of ECN .........50\n   11.\
    \ Security Considerations .......................................50\n   12. IANA\
    \ Considerations ...........................................52\n      12.1. IP\
    \ Option ................................................52\n      12.2. TCP Option\
    \ ...............................................52\n   13. Conclusions ...................................................53\n\
    \   14. Acknowledgements ..............................................53\n  \
    \ Appendix A. Related Work ..........................................54\n    \
    \  A.1. Fast Start-Ups without Explicit Information from Routers ..54\n      A.2.\
    \ Optimistic Sending without Explicit Information from\n           Routers ...................................................56\n\
    \      A.3. Fast Start-Ups with Other Information from Routers ........56\n  \
    \    A.4. Fast Start-Ups with More Fine-Grained Feedback from\n           Routers\
    \ ...................................................57\n      A.5. Fast Start-ups\
    \ with Lower-Than-Best-Effort Service ........58\n   Appendix B. Design Decisions\
    \ ......................................59\n      B.1. Alternate Mechanisms for\
    \ the Quick-Start Request:\n           ICMP and RSVP .............................................59\n\
    \           B.1.1. ICMP ...............................................59\n  \
    \         B.1.2. RSVP ...............................................60\n    \
    \  B.2. Alternate Encoding Functions ..............................61\n      B.3.\
    \ The Quick-Start Request: Packets or Bytes? ................63\n      B.4. Quick-Start\
    \ Semantics: Total Rate or Additional Rate? .....64\n      B.5. Alternate Responses\
    \ to the Loss of a Quick-Start Packet ...65\n      B.6. Why Not Include More Functionality?\
    \ .......................66\n      B.7. Alternate Implementations for a Quick-Start\
    \ Nonce .........69\n           B.7.1. An Alternate Proposal for the Quick-Start\
    \ Nonce ....69\n           B.7.2. The Earlier Request-Approved Quick-Start Nonce\
    \ .....69\n   Appendix C. Quick-Start with DCCP .................................70\n\
    \   Appendix D. Possible Router Algorithm .............................72\n  \
    \ Appendix E. Possible Additional Uses for the Quick-Start ..........74\n   Normative\
    \ References ..............................................75\n   Informative\
    \ References ............................................75\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Each connection begins with a question: \"What is the appropriate\n\
    \   sending rate for the current network path?\"  The question is not\n   answered\
    \ explicitly, but each TCP connection determines the sending\n   rate by probing\
    \ the network path and altering the congestion window\n   (cwnd) based on perceived\
    \ congestion.  Each TCP connection starts\n   with a pre-configured initial congestion\
    \ window (ICW).  Currently,\n   TCP allows an initial window of between one and\
    \ four segments of\n   maximum segment size (MSS) ([RFC2581], [RFC3390]).  The\
    \ TCP\n   connection then probes the network for available bandwidth using the\n\
    \   slow-start procedure ([Jac88], [RFC2581]), doubling cwnd during each\n   congestion-free\
    \ round-trip time (RTT).\n   The slow-start algorithm can be time-consuming ---\
    \ especially over\n   networks with large bandwidth or long delays.  It may take\
    \ a number\n   of RTTs in slow-start before the TCP connection begins to fully\
    \ use\n   the available bandwidth of the network.  For instance, it takes\n  \
    \ log_2(N) - 2 round-trip times to build cwnd up to N segments,\n   assuming an\
    \ initial congestion window of 4 segments.  This time in\n   slow-start is not\
    \ a problem for large file transfers, where the\n   slow-start stage is only a\
    \ fraction of the total transfer time.\n   However, in the case of moderate-sized\
    \ transfers, the connection\n   might carry out its entire transfer in the slow-start\
    \ phase, taking\n   many round-trip times, where one or two RTTs might have been\n\
    \   sufficient when using the currently available bandwidth along the\n   path.\n\
    \   A fair amount of work has already been done to address the issue of\n   choosing\
    \ the initial congestion window for TCP, with RFC 3390\n   allowing an initial\
    \ window of up to four segments based on the MSS\n   used by the connection [RFC3390].\
    \  Our underlying premise is that\n   explicit feedback from all the routers along\
    \ the path would be\n   required, in the current architecture, for best-effort\
    \ connections to\n   use initial windows significantly larger than those allowed\
    \ by\n   [RFC3390], in the absence of other information about the path.\n   In\
    \ using Quick-Start, a TCP host (say, host A) would indicate its\n   desired sending\
    \ rate in bytes per second, using a Quick-Start Option\n   in the IP header of\
    \ a TCP packet.  Each router along the path could,\n   in turn, either approve\
    \ the requested rate, reduce the requested\n   rate, or indicate that the Quick-Start\
    \ Request is not approved.  (We\n   note that the `routers' referred to in this\
    \ document also include the\n   IP-layer processing of the Quick-Start Request\
    \ at the sender.)  In\n   approving a Quick-Start Request, a router does not give\
    \ preferential\n   treatment to subsequent packets from that connection; the router\
    \ is\n   only asserting that it is currently underutilized and believes there\n\
    \   is sufficient available bandwidth to accommodate the sender's\n   requested\
    \ rate.  The Quick-Start mechanism can determine if there are\n   routers along\
    \ the path that do not understand the Quick-Start Option,\n   or have not agreed\
    \ to the Quick-Start rate request.  TCP host B\n   communicates the final rate\
    \ request to TCP host A in a transport-\n   level Quick-Start Response in an answering\
    \ TCP packet.\n   If the Quick-Start Request is approved by all routers along\
    \ the path,\n   then the TCP host can send at up to the approved rate for a window\
    \ of\n   data.  Subsequent transmissions will be governed by the default TCP\n\
    \   congestion control mechanisms of that connection.  If the Quick-Start\n  \
    \ Request is not approved, then the sender would use the default\n   congestion\
    \ control mechanisms.\n   Quick-Start would not be the first mechanism for explicit\n\
    \   communication from routers to transport protocols about sending\n   rates.\
    \  Explicit Congestion Notification (ECN) gives explicit\n   congestion control\
    \ feedback from routers to transport protocols,\n   based on the router detecting\
    \ congestion before buffer overflow\n   [RFC3168].  In contrast, routers would\
    \ not use Quick-Start to give\n   congestion information, but instead would use\
    \ Quick-Start as an\n   optional mechanism to give permission to transport protocols\
    \ to use\n   higher sending rates, based on the ability of all the routers along\n\
    \   the path to determine if their respective output links are\n   significantly\
    \ underutilized.\n   Section 2 gives an overview of Quick-Start.  The formal\n\
    \   specifications for Quick-Start are contained in Sections 3, 4, 6.1.1,\n  \
    \ and 6.3.  In particular, Quick-Start is specified for IPv4 and for\n   IPv6\
    \ in Section 3, and is specified for TCP in Section 4.  Section 6\n   consists\
    \ mostly of a non-normative discussion of interactions of\n   Quick-Start with\
    \ IP tunnels and MPLS; however, Section 6.1.1 and 6.3\n   specify behavior for\
    \ IP tunnels that are aware of Quick-Start.\n   The rest of the document is non-normative,\
    \ as follows.  Section 5\n   shows that Quick-Start is compatible with IPsec AH\
    \ (Authentication\n   Header).  Section 7 gives a non-normative set of guidelines\
    \ for\n   specifying Quick-Start in other transport protocols, and Section 8\n\
    \   discusses using Quick-Start in transport end-nodes and routers.\n   Section\
    \ 9 gives an evaluation of the costs and benefits of Quick-\n   Start, and Section\
    \ 10 discusses implementation and deployment issues.\n   The appendices discuss\
    \ related work, Quick-Start design decisions,\n   and possible router algorithms.\n"
- title: 1.1.  Conventions and Terminology
  contents:
  - "1.1.  Conventions and Terminology\n   The key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 2.  Assumptions and General Principles
  contents:
  - "2.  Assumptions and General Principles\n   This section describes the assumptions\
    \ and general principles behind\n   the design of the Quick-Start mechanism.\n\
    \   Assumptions:\n   * The data transfer in the two directions of a connection\
    \ traverses\n     different queues, and possibly even different routers.  Thus,\
    \ any\n     mechanism for determining the allowed sending rate would have to be\n\
    \     used independently for each direction.\n   * The path between the two endpoints\
    \ is relatively stable, such that\n     the path used by the Quick-Start Request\
    \ is generally the same path\n     used by the Quick-Start packets one round-trip\
    \ time later.\n     [ZDPS01] shows this assumption should be generally valid.\
    \  However,\n     [RFC3819] discusses a range of Bandwidth on Demand subnets that\n\
    \     could cause the characteristics of the path to change over time.\n   * Any\
    \ new mechanism must be incrementally deployable and might not be\n     supported\
    \ by all the routers and/or end-hosts.  Thus, any new\n     mechanism must be\
    \ able to accommodate non-supporting routers or\n     end-hosts without disturbing\
    \ the current Internet semantics.  We\n     note that, while Quick-Start is incrementally\
    \ deployable in this\n     sense, a Quick-Start Request cannot be approved for\
    \ a particular\n     connection unless both end-nodes and all the routers along\
    \ the path\n     have been configured to support Quick-Start.\n   General Principles:\n\
    \   * Our underlying premise is that explicit feedback from all the\n     routers\
    \ along the path would be required, in the current\n     architecture, for best-effort\
    \ connections to use initial windows\n     significantly larger than those allowed\
    \ by [RFC3390], in the\n     absence of other information about the path.\n  \
    \ * A router should only approve a Quick-Start Request if the output\n     link\
    \ is underutilized.  Any other approach will result in either\n     per-flow state\
    \ at the router, or the possibility of a (possibly\n     transient) queue at the\
    \ router.\n   * No per-flow state should be required at the router.  Note that,\n\
    \     while per-flow state is not required, we also do not preclude a\n     router\
    \ from storing per-flow state for making Quick-Start decisions\n     or for checking\
    \ for misbehaving nodes.\n"
- title: 2.1.  Overview of Quick-Start
  contents:
  - "2.1.  Overview of Quick-Start\n   In this section, we give an overview of the\
    \ use of Quick-Start with\n   TCP to request a higher congestion window.  The\
    \ description in this\n   section is non-normative; the normative description\
    \ of Quick-Start\n   with IP and TCP follows in Sections 3 and 4.  Quick-Start\
    \ could be\n   used in the middle of a connection, e.g., after an idle or\n  \
    \ underutilized period, as well as for the initial sending rate; these\n   uses\
    \ of Quick-Start are discussed later in the document.\n   Quick-Start requires\
    \ end-points and routers to work together, with\n   end-points requesting a higher\
    \ sending rate in the Quick-Start (QS)\n   option in IP, and routers along the\
    \ path approving, modifying,\n   discarding, or ignoring (and therefore disallowing)\
    \ the Quick-Start\n   Request.  The receiver uses reliable, transport-level mechanisms\
    \ to\n   inform the sender of the status of the Quick-Start Request.  For\n  \
    \ example, when TCP is used, the TCP receiver sends feedback to the\n   sender\
    \ using a Quick-Start Response option in the TCP header.  In\n   addition, Quick-Start\
    \ assumes a unicast, congestion-controlled\n   transport protocol; we do not consider\
    \ the use of Quick-Start for\n   multicast traffic.\n   When sent as a request,\
    \ the Quick-Start Option includes a request for\n   a sending rate in bits per\
    \ second, and a Quick-Start Time to Live (QS\n   TTL) to be decremented by every\
    \ router along the path that\n   understands the option and approves the request.\
    \  The Quick-Start TTL\n   is initialized by the sender to a random value.  The\
    \ transport\n   receiver returns the rate, information about the TTL, and the\
    \ Quick-\n   Start Nonce to the sender using transport-level mechanisms; for TCP,\n\
    \   the receiver sends this information in the Quick-Start Response in\n   the\
    \ TCP header.  In particular, the receiver computes the difference\n   between\
    \ the Quick-Start TTL and the IP TTL (the TTL in the IP header)\n   of the Quick-Start\
    \ Request packet, and returns this in the Quick-\n   Start Response.  The sender\
    \ uses the TTL difference to determine if\n   all the routers along the path decremented\
    \ the Quick-Start TTL,\n   approving the Quick-Start Request.\n   If the request\
    \ is approved by all the routers along the path, then\n   the TCP sender combines\
    \ this allowed rate with the measurement of the\n   round-trip time, and ends\
    \ up with an allowed TCP congestion window.\n   This window is sent rate-paced\
    \ over the next round-trip time, or\n   until an ACK packet is received.\n   Figure\
    \ 1 shows a successful use of Quick-Start, with the sender's IP\n   layer and\
    \ both routers along the path approving the Quick-Start\n   Request, and the TCP\
    \ receiver using the Quick-Start Response to\n   return information to the TCP\
    \ sender.  In this example, Quick-Start\n   is used by TCP to establish the initial\
    \ congestion window.\n   Sender        Router 1       Router 2          Receiver\n\
    \   ------        --------       --------          --------\n   | <IP TTL: 63>\n\
    \   | <QS TTL: 91>\n   | <TTL Diff: 28>\n   | Quick-Start Request\n   | in SYN\
    \ or SYN/ACK.\n   | IP: Decrement QS TTL\n   | to approve request -->\n   |\n\
    \   |               Decrement\n   |               QS TTL\n   |               to\
    \ approve\n   |               request -->\n   |\n   |                        \
    \      Decrement\n   |                              QS TTL\n   |             \
    \                 to approve\n   |                              request -->\n\
    \   |\n   |                                           <IP TTL: 60>\n   |     \
    \                                      <QS TTL: 88>\n   |                    \
    \                       <TTL Diff: 28>\n   |                                 \
    \          Return Quick-Start\n   |                                          \
    \  info to sender in\n   |                                           Quick-Start\
    \ Response\n   |                                          <-- in TCP ACK packet.\n\
    \   |\n   | <TTL Diff: 28>\n   | Quick-Start approved,\n   | translate to cwnd.\n\
    \   | Report Approved Rate.\n   V Send cwnd paced over one RTT. -->\n        \
    \        Figure 1: A Successful Quick-Start Request.\n   Figure 2 shows an unsuccessful\
    \ use of Quick-Start, with one of the\n   routers along the path not approving\
    \ the Quick-Start Request.  If the\n   Quick-Start Request is not approved, then\
    \ the sender uses the default\n   congestion control mechanisms for that transport\
    \ protocol, including\n   the default initial congestion window, response to idle\
    \ periods, etc.\n   Sender        Router 1       Router 2          Receiver\n\
    \   ------        --------       --------          --------\n   | <IP TTL: 63>\n\
    \   | <QS TTL: 91>\n   | <TTL Diff: 28>\n   | Quick-Start Request\n   | in SYN\
    \ or SYN/ACK.\n   | IP: Decrement QS TTL\n   | to approve request -->\n   |\n\
    \   |               Decrement\n   |               QS TTL\n   |               to\
    \ approve\n   |               request -->\n   |\n   |                        \
    \      Forward packet\n   |                              without modifying\n \
    \  |                              Quick-Start Option. -->\n   |\n   |        \
    \                                   <IP TTL: 60>\n   |                       \
    \                    <QS TTL: 89>\n   |                                      \
    \     <TTL Diff: 29>\n   |                                           Return Quick-Start\n\
    \   |                                            info to sender in\n   |     \
    \                                      Quick-Start Response\n   |            \
    \                              <-- in TCP ACK packet.\n   |\n   | <TTL Diff: 29>\n\
    \   | Quick-Start not approved.\n   | Report approved rate.\n   V Use default\
    \ initial cwnd. -->\n              Figure 2: An Unsuccessful Quick-Start Request.\n"
- title: 3.  The Quick-Start Option in IP
  contents:
  - '3.  The Quick-Start Option in IP

    '
- title: 3.1.  The Quick-Start Option for IPv4
  contents:
  - "3.1.  The Quick-Start Option for IPv4\n   The Quick-Start Request for IPv4 is\
    \ defined as follows:\n    0                   1                   2         \
    \          3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Option      |  Length=8     | Func. | Rate  |   QS TTL      |\n   |  \
    \             |               | 0000  |Request|               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        QS Nonce                           | R |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                Figure 3: The Quick-Start Option for IPv4.\n                \
    \          A Quick-Start Request.\n   The first byte contains the option field,\
    \ which includes the one-bit\n   copy flag, the 2-bit class field, and the 5-bit\
    \ option number.\n   The second byte contains the length field, indicating an\
    \ option\n   length of eight bytes.\n   The third byte includes a four-bit Function\
    \ field.  If the Function\n   field is set to \"0000\", then the Quick-Start Option\
    \ is a Rate\n   Request.  In this case, the second half of the third byte is a\
    \ four-\n   bit Rate Request field.\n   For a Rate Request, the fourth byte contains\
    \ the Quick-Start TTL (QS\n   TTL) field.  The sender MUST set the QS TTL field\
    \ to a random value.\n   Routers that approve the Quick-Start Request decrement\
    \ the QS TTL\n   (mod 256) by the same amount that they decrement the IP TTL.\
    \  (As\n   elsewhere in this document, we use the term `router' imprecisely to\n\
    \   also include the Quick-Start functionality at the IP layer at the\n   sender.)\
    \  The QS TTL is used by the sender to detect if all the\n   routers along the\
    \ path understood and approved the Quick-Start\n   option.\n   For a Rate Request,\
    \ the transport sender MUST calculate and store the\n   TTL Diff, the difference\
    \ between the IP TTL value, and the QS TTL\n   value in the Quick-Start Request\
    \ packet, as follows:\n   TTL Diff = ( IP TTL - QS TTL ) mod 256             \
    \            (1)\n   For a Rate Request, bytes 5-8 contain a 30-bit QS Nonce,\
    \ discussed in\n   Section 3.4, and a two-bit Reserved field.  The sender SHOULD\
    \ set the\n   reserved field to zero, and routers and receivers SHOULD ignore\
    \ the\n   reserved field.  The sender SHOULD set the 30-bit QS Nonce to a\n  \
    \ random value.\n   The sender initializes the Rate Request to the desired sending\
    \ rate,\n   including an estimate of the transport and IP header overhead.  The\n\
    \   encoding function for the Rate Request sets the request rate to K*2^N\n  \
    \ bps (bits per second), for N the value in the Rate Request field, and\n   for\
    \ K set to 40,000.  For N=0, the rate request would be set to zero,\n   regardless\
    \ of the encoding function.  This is illustrated in Table 1\n   below.  For the\
    \ four-bit Rate Request field, the request range is\n   from 80 Kbps to 1.3 Gbps.\
    \  Alternate encodings that were considered\n   for the Rate Request are given\
    \ in Appendix B.2.\n    N     Rate Request (in Kbps)\n   ---    ----------------------\n\
    \    0            0\n    1           80\n    2          160\n    3          320\n\
    \    4          640\n    5        1,280\n    6        2,560\n    7        5,120\n\
    \    8       10,240\n    9       20,480\n   10       40,960\n   11       81,920\n\
    \   12      163,840\n   13      327,680\n   14      655,360\n   15    1,310,720\n\
    \   Table 1: Mapping from Rate Request Field to Rate Request in Kbps.\n   Routers\
    \ can approve the Quick-Start Request for a lower rate by\n   decreasing the Rate\
    \ Request in the Quick-Start Request.  Section 4.2\n   discusses the Quick-Start\
    \ Response from the TCP receiver to the TCP\n   sender, and Section 4.4 discusses\
    \ the TCP sender's mechanism for\n   determining if a Quick-Start Request has\
    \ been approved.\n    0                   1                   2              \
    \     3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  \
    \ Option      |  Length=8     | Func. | Rate  |   Not Used    |\n   |        \
    \       |               | 1000  | Report|               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        QS Nonce                           | R |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                Figure 4: The Quick-Start Option for IPv4.\n                \
    \         Report of Approved Rate.\n   If the Function field in the third byte\
    \ of the Quick-Start Option is\n   set to \"1000\", then the Quick-Start Option\
    \ is a Report of Approved\n   Rate.  In this case, the second four bits in the\
    \ third byte are the\n   Rate Report field, formatted exactly as in the Rate Request\
    \ field in\n   a Rate Request.  For a Report of Approved Rate, the fourth byte\
    \ of\n   the Quick-Start Option is not used.  Bytes 5-8 contain a 30-bit QS\n\
    \   Nonce and a 2-bit Reserved field.\n   After an approved Rate Request, the\
    \ sender MUST report the Approved\n   Rate, using a Quick-Start Option configured\
    \ as a Report of Approved\n   Rate with the Rate Report field set to the approved\
    \ rate, and the QS\n   Nonce set to the QS Nonce sent in the Quick-Start Request.\
    \  The\n   packet containing the Report of Approved Rate MUST be either a\n  \
    \ control packet sent before the first Quick-Start data packet, or a\n   Quick-Start\
    \ Option in the first data packet itself.  The Report of\n   Approved Rate does\
    \ not have to be sent reliably; for example, if the\n   approved rate is reported\
    \ in a separate control packet, the sender\n   does not necessarily know if the\
    \ control packet has been dropped in\n   the network.  If the packet containing\
    \ the Quick-Start Request is\n   acknowledged, but the acknowledgement packet\
    \ does not contain a\n   Quick-Start Response, then the sender MUST assume that\
    \ the Quick-\n   Start Request was denied, and set a Report of Approved Rate with\
    \ a\n   rate of zero.  Routers may choose to ignore the Report of Approved\n \
    \  Rate, or to use the Report of Approved Rate but ignore the QS Nonce.\n   Alternately,\
    \ some routers that use the Report of Approved Rate may\n   choose to match the\
    \ QS Nonce, masked by the approved rate, with the\n   QS Nonce seen in the original\
    \ request.\n   If the Rate Request is denied, the sender MUST send a Report of\n\
    \   Approved Rate with the Rate Report field set to zero.\n   We note that, unlike\
    \ a Quick-Start Request sent at the beginning of a\n   connection, when a Quick-Start\
    \ Request is sent in the middle of a\n   connection, the connection could already\
    \ have an established\n   congestion window or sending rate.  The Rate Request\
    \ is the requested\n   total rate for the connection, including the current rate\
    \ of the\n   connection; the Rate Request is *not* a request for an additional\n\
    \   sending rate over and above the current sending rate.  If the Rate\n   Request\
    \ is denied, or lowered to a value below the connection's\n   current sending\
    \ rate, then the sender ignores the request, and\n   reverts to the default congestion\
    \ control mechanisms of the transport\n   protocol.\n   The use of the Quick-Start\
    \ Option does not require the additional use\n   of the Router Alert Option [RFC2113].\n\
    \   We note that in IPv4, a change in IP options at routers requires\n   recalculating\
    \ the IP header checksum.\n"
- title: 3.2.  The Quick-Start Option for IPv6
  contents:
  - "3.2.  The Quick-Start Option for IPv6\n   The Quick-Start Option for IPv6 is\
    \ placed in the Hop-by-Hop Options\n   extension header that is processed at every\
    \ network node along the\n   communication path [RFC2460].  The option format\
    \ following the\n   generic Hop-by-Hop Options header is identical to the IPv4\
    \ format,\n   with the exception that the Length field should exclude the common\n\
    \   type and length fields in the option format and be set to 6 bytes\n   instead\
    \ of 8 bytes.\n   For a Quick-Start Request, the transport receiver compares the\n\
    \   Quick-Start TTL with the IPv6 Hop Limit field to calculate the TTL\n   Diff.\
    \  (The Hop Limit in IPv6 is the equivalent of the TTL in IPv4.)\n   That is,\
    \ TTL Diff MUST be calculated and stored as follows:\n   TTL Diff = ( IPv6 Hop\
    \ Limit - QS TTL ) mod 256                  (2)\n   Unlike IPv4, modifying or\
    \ deleting the Quick-Start IPv6 Option does\n   not require checksum re-calculation,\
    \ because the IPv6 header does not\n   have a checksum field, and modifying the\
    \ Quick-Start Request in the\n   IPv6 Hop-by-Hop options header does not affect\
    \ the IPv6 pseudo-\n   header checksum used in upper-layer checksum calculations.\n\
    \   Appendix A of RFC 2460 requires that all packets with the same flow\n   label\
    \ must be originated with the same hop-by-hop header contents,\n   which would\
    \ be incompatible with Quick-Start.  However, a later IPv6\n   flow label specification\
    \ [RFC3697] updates the use of flow labels in\n   IPv6 and removes this restriction.\
    \  Therefore, Quick-Start is\n   compatible with the current IPv6 specifications.\n"
- title: 3.3.  Processing the Quick-Start Request at Routers
  contents:
  - "3.3.  Processing the Quick-Start Request at Routers\n   The Quick-Start Request\
    \ does not report the current sending rate of\n   the connection sending the request;\
    \ in the default case of a router\n   (or IP-layer implementation at an end-node)\
    \ that does not maintain\n   per-flow state, a router makes the conservative assumption\
    \ that the\n   flow's current sending rate is zero.  Each participating router\
    \ can\n   either terminate or approve the Quick-Start Request.  A router MUST\n\
    \   only approve a Quick-Start Request if the output link is\n   underutilized,\
    \ and if the router judges that the output link will\n   continue to be underutilized\
    \ if this and earlier approved requests\n   are used by the senders.  Otherwise,\
    \ the router reduces or terminates\n   the Quick-Start Request.\n   While the\
    \ paragraph above defines the *semantics* of approving a\n   Quick-Start Request,\
    \ this document does not specify the specific\n   algorithms to be used by routers\
    \ in processing Quick-Start Requests\n   or Reports.  This is similar to RFC 3168,\
    \ which specifics the\n   semantics of the ECN codepoints in the IP header, but\
    \ does not\n   specify specific algorithms for routers to use in deciding when\
    \ to\n   drop or mark packets before buffer overflow.\n   A router that wishes\
    \ to terminate the Quick-Start Request SHOULD\n   either delete the Quick-Start\
    \ Request from the IP header or zero the\n   QS TTL, QS Nonce, and Rate Request\
    \ fields.  Deleting the Quick-Start\n   Request saves resources because downstream\
    \ routers will have no\n   option to process, but zeroing the Rate Request field\
    \ may be more\n   efficient for routers to implement.  As suggested in [B05],\
    \ future\n   additions to Quick-Start could define error codes for routers to\n\
    \   insert into the QS Nonce field to report back to the sender the\n   reason\
    \ that the Quick-Start Request was denied, e.g., that the router\n   is denying\
    \ all Quick-Start Requests at this time, or that this\n   router, as a matter\
    \ of policy, does not grant Quick-Start requests.\n   A router that doesn't understand\
    \ the Quick-Start Option will simply\n   forward the packet with the Quick-Start\
    \ Request unchanged (ensuring\n   that the TTL Diff will not match and Quick-Start\
    \ will not be used).\n   If the participating router has decided to approve the\
    \ Quick-Start\n   Request, it does the following:\n   * The router MUST decrement\
    \ the QS TTL by the amount the IP TTL is\n     decremented (usually one).\n  \
    \ * If the router is only willing to approve a Rate Request less than\n     that\
    \ in the Quick-Start Request, then the router replaces the Rate\n     Request\
    \ with a smaller value.  The router MUST NOT increase the\n     Rate Request in\
    \ the Quick-Start Request.  If the router decreases\n     the Rate Request, the\
    \ router MUST also modify the QS Nonce, as\n     described in Section 3.4.\n \
    \  * In IPv4, the router MUST update the IP header checksum.\n   If the router\
    \ approves the Quick-Start Request, this approval SHOULD\n   be taken into account\
    \ in the router's decision to accept or reject\n   subsequent Quick-Start Requests\
    \ (e.g., using a variable that tracks\n   the recent aggregate of accepted Quick-Start\
    \ Requests).  This\n   consideration of earlier approved Quick-Start Requests\
    \ is necessary\n   to ensure that the router only approves a Quick-Start Request\
    \ when\n   the router judges that the output link will remain underutilized if\n\
    \   this and earlier Quick-Start Requests are used by the senders.\n   In addition,\
    \ the approval of a Quick-Start Request SHOULD NOT be used\n   by the router to\
    \ affect the treatment of the data packets that arrive\n   from this connection\
    \ in the next few round-trip times.  That is, the\n   approval by the router of\
    \ a Quick-Start Request does not give\n   differential treatment for Quick-Start\
    \ data packets at that router;\n   it is only a statement from the router that\
    \ the router believes that\n   the subsequent Quick-Start data packets from this\
    \ connection will not\n   change the current underutilized state of the router.\n\
    \   A non-participating router forwards the Quick-Start Request\n   unchanged,\
    \ without decrementing the QS TTL.  The non-participating\n   router still decrements\
    \ the TTL field in the IP header, as is\n   required for all routers [RFC1812].\
    \  As a result, the sender will be\n   able to detect that the Quick-Start Request\
    \ had not been understood\n   or approved by all of the routers along the path.\n\
    \   A router that uses multipath routing for packets within a single\n   connection\
    \ MUST NOT approve a Quick-Start Request.  This is discussed\n   in more detail\
    \ in Section 9.2.\n"
- title: 3.3.1.  Processing the Report of Approved Rate
  contents:
  - "3.3.1.  Processing the Report of Approved Rate\n   If the Quick-Start Option\
    \ has the Function field set to \"1000\", then\n   this is a Report of Approved\
    \ Rate, rather than a Rate Request.  The\n   router MAY ignore such an option,\
    \ and, in any case, it MUST NOT\n   modify the contents of the option for a Report\
    \ of Approved Rate.\n   However, the router MAY use the Approved Rate report to\
    \ check that\n   the sender is not lying about the approved rate.  If the reported\n\
    \   Approved Rate is higher than the rate that the router actually\n   approved\
    \ for this connection in the previous round-trip time, then\n   the router may\
    \ implement some policy for cheaters.  For instance, the\n   router MAY decide\
    \ to deny future Quick-Start Requests from this\n   sender, including, if desired,\
    \ deleting Quick-Start Requests from\n   future packets from this sender.  Section\
    \ 9.4.1 discusses misbehaving\n   senders in more detail.  From the Report of\
    \ Approved Rate, the router\n   can also learn if some of the downstream routers\
    \ have approved the\n   Quick-Start Request for a smaller rate or denied the use\
    \ of Quick-\n   Start, and adjust its bandwidth allocations accordingly.\n"
- title: 3.4.  The QS Nonce
  contents:
  - "3.4.  The QS Nonce\n   The QS Nonce gives the Quick-Start sender some protection\
    \ against\n   receivers lying about the value of the received Rate Request.  This\n\
    \   is particularly important if the receiver knows the original value of\n  \
    \ the Rate Request (e.g., when the sender always requests the same\n   value,\
    \ and the receiver has a long history of communication with that\n   sender).\
    \  Without the QS Nonce, there is nothing to prevent the\n   receiver from reporting\
    \ back to the sender a Rate Request of K, when\n   the received Rate Request was,\
    \ in fact, less than K.\n   Table 2 gives the format for the 30-bit QS Nonce.\n\
    \   Bits         Purpose\n   ---------    ------------------\n   Bits 0-1:   \
    \ Rate 15 -> Rate 14\n   Bits 2-3:    Rate 14 -> Rate 13\n   Bits 4-5:    Rate\
    \ 13 -> Rate 12\n   Bits 6-7:    Rate 12 -> Rate 11\n   Bits 8-9:    Rate 11 ->\
    \ Rate 10\n   Bits 10-11:  Rate 10 -> Rate 9\n   Bits 12-13:  Rate 9 -> Rate 8\n\
    \   Bits 14-15:  Rate 8 -> Rate 7\n   Bits 16-17:  Rate 7 -> Rate 6\n   Bits 18-19:\
    \  Rate 6 -> Rate 5\n   Bits 20-21:  Rate 5 -> Rate 4\n   Bits 22-23:  Rate 4\
    \ -> Rate 3\n   Bits 24-25:  Rate 3 -> Rate 2\n   Bits 26-27:  Rate 2 -> Rate\
    \ 1\n   Bits 28-29:  Rate 1 -> Rate 0\n   Table 2: The QS Nonce.\n   The transport\
    \ sender MUST initialize the QS Nonce to a random value.\n   If the router reduces\
    \ the Rate Request from rate K to rate K-1, then\n   the router MUST set the field\
    \ in the QS Nonce for \"Rate K -> Rate\n   K-1\" to a new random value.  Similarly,\
    \ if the router reduces the\n   Rate Request by N steps, the router MUST set the\
    \ 2N bits in the\n   relevant fields in the QS Nonce to a new random value.  The\
    \ receiver\n   MUST report the QS Nonce back to the sender.\n   If the Rate Request\
    \ was not decremented in the network, then the QS\n   Nonce should have its original\
    \ value.  Similarly, if the Rate Request\n   was decremented by N steps in the\
    \ network, and the receiver reports\n   back a Rate Request of K, then the last\
    \ 2K bits of the QS Nonce\n   should have their original value.\n   With the QS\
    \ Nonce, the receiver has a 1/4 chance of cheating about\n   each step change\
    \ in the rate request.  Thus, if the rate request is\n   reduced by two steps\
    \ in the network, the receiver has a 1/16 chance\n   of successfully reporting\
    \ that the original request was approved, as\n   this requires reporting the original\
    \ value for the QS nonce.\n   Similarly, if the rate request is reduced many steps\
    \ in the network,\n   and the receiver receives a QS Option with a rate request\
    \ of K, the\n   receiver has a 1/16 chance of guessing the original values for\
    \ the\n   fields in the QS nonce for \"Rate K+2 -> Rate K+1\" and \"Rate K+1 ->\n\
    \   Rate K\".  Thus, the receiver has a 1/16 chance of successfully lying\n  \
    \ and saying that the received rate request was K+2 instead of K.\n   We note\
    \ that the protection offered by the QS Nonce is the same\n   whether one router\
    \ makes all the decrements in the rate request, or\n   whether they are made at\
    \ different routers along the path.\n   The requirements for randomization for\
    \ the sender and routers in\n   setting `random' values in the QS Nonce are not\
    \ stringent -- almost\n   any form of pseudo-random numbers will do.  The requirement\
    \ is that\n   the original value for the QS Nonce is not easily predictable by\
    \ the\n   receiver, and in particular, the nonce MUST NOT be easily determined\n\
    \   from inspection of the rest of the packet or from previous packets.\n   In\
    \ particular, the nonce MUST NOT be based only on a combination of\n   specific\
    \ packet header fields.  Thus, if two bits of the QS Nonce are\n   changed by\
    \ a router along the path, the receiver should not be able\n   to guess those\
    \ two bits from the other 28 bits in the QS Nonce.\n   An additional requirement\
    \ is that the receiver cannot be able to\n   tell, from the QS Nonce itself, which\
    \ numbers in the QS Nonce were\n   generated by the sender, and which were generated\
    \ by routers along\n   the path.  This makes it harder for the receiver to infer\
    \ the value\n   of the original rate request, making it one step harder for the\n\
    \   receiver to cheat.\n   Section 9.4 also considers issues of receiver cheating\
    \ in more\n   detail.\n"
- title: 4.  The Quick-Start Mechanisms in TCP
  contents:
  - "4.  The Quick-Start Mechanisms in TCP\n   This section describes how the Quick-Start\
    \ mechanism would be used in\n   TCP.  We first sketch the procedure and then\
    \ tightly define it in the\n   subsequent subsections.\n   If a TCP sender (say,\
    \ host A) would like to use Quick-Start, the TCP\n   sender puts the requested\
    \ sending rate in bits per second,\n   appropriately formatted, in the Quick-Start\
    \ Option in the IP header\n   of the TCP packet, called the Quick-Start Request\
    \ packet.  (We will\n   be somewhat loose in our use of \"packet\" vs. \"segment\"\
    \ in this\n   section.)  When used for initial start-up, the Quick-Start Request\n\
    \   packet can be either the SYN or SYN/ACK packet, as illustrated in\n   Figure\
    \ 1.  The requested rate includes an estimate for the transport\n   and IP header\
    \ overhead.  The TCP receiver (say, host B) returns the\n   Quick-Start Response\
    \ option in the TCP header in the responding\n   SYN/ACK packet or ACK packet,\
    \ called the Quick-Start Response packet,\n   informing host A of the results\
    \ of their request.\n   If the acknowledging packet does not contain a Quick-Start\
    \ Response,\n   or contains a Quick-Start Response with the wrong value for the\
    \ TTL\n   Diff or the QS Nonce, then host A MUST assume that its Quick-Start\n\
    \   request failed.  In this case, host A sends a Report of Approved Rate\n  \
    \ with a Rate Report of zero, and uses TCP's default congestion control\n   procedure.\
    \  For initial start-up, host A uses the default initial\n   congestion window\
    \ ([RFC2581], [RFC3390]).\n   If the returning packet contains a valid Quick-Start\
    \ Response, then\n   host A uses the information in the response, along with its\n\
    \   measurement of the round-trip time, to determine the Quick-Start\n   congestion\
    \ window (QS-cwnd).  Quick-Start data packets are defined as\n   data packets\
    \ sent as the result of a successful Quick-Start request,\n   up to the time when\
    \ the first Quick-Start packet is acknowledged.\n   The sender also sends a Report\
    \ of Approved Rate.  In order to use\n   Quick-Start, the TCP host MUST use rate-based\
    \ pacing [VH97] to\n   transmit Quick-Start packets at the rate indicated in the\
    \ Quick-Start\n   Response, at the level of granularity possible by the sending\
    \ host.\n   We note that the limitations of interrupt timing on computers can\n\
    \   limit the ability of the TCP host in rate-pacing the outgoing\n   packets.\n\
    \   The two TCP end-hosts can independently decide whether to request\n   Quick-Start.\
    \  For example, host A could send a Quick-Start Request in\n   the SYN packet,\
    \ and host B could also send a Quick-Start Request in\n   the SYN/ACK packet.\n"
- title: 4.1.  Sending the Quick-Start Request
  contents:
  - "4.1.  Sending the Quick-Start Request\n   When sending a Quick-Start Request,\
    \ the TCP sender SHOULD send the\n   request on a packet that requires an acknowledgement,\
    \ such as a SYN,\n   SYN/ACK, or data packet.  In this case, if the packet is\
    \ acknowledged\n   but no Quick-Start Response is included, then the sender knows\
    \ that\n   the Quick-Start Request has been denied, and can send a Report of\n\
    \   Approved Rate.\n   In addition to the use of Quick-Start when a connection\
    \ is\n   established, there are several additional points in a connection when\n\
    \   a transport protocol may want to issue a Rate Request.  We first\n   reiterate\
    \ the notion that Quick-Start is a coarse-grained mechanism.\n   That is, Quick-Start's\
    \ Rate Requests are not meant to be used for\n   fine-grained control of the transport's\
    \ sending rate.  Rather, the\n   transport MAY issue a Rate Request when no information\
    \ about the\n   appropriate sending rate is available, and the default congestion\n\
    \   control mechanisms might be significantly underestimating the\n   appropriate\
    \ sending rate.\n   The following are potential points where Quick-Start may be\
    \ useful:\n   (1) At or soon after connection initiation, when the transport has\
    \ no\n       idea of the capacity of the network path, as discussed above.  (A\n\
    \       transport that uses TCP Control Block sharing [RFC2140], the\n       Congestion\
    \ Manager [RFC3124], or other mechanisms for sharing\n       congestion information\
    \ may not need Quick-Start to determine an\n       appropriate rate.)\n   (2)\
    \ After an idle period when the transport no longer has a validated\n       estimate\
    \ of the available bandwidth for this flow.  (An example\n       could be a persistent-HTTP\
    \ connection when a new HTTP request is\n       received after an idle period.)\n\
    \   (3) After a host has received explicit indications that one of the\n     \
    \  endpoints has moved its point of network attachment.  This can\n       happen\
    \ due to some underlying mobility mechanism like Mobile IP\n       ([RFC3344],\
    \ [RFC3775]).  Some transports, such as Steam Control\n       Transmission Protocol\
    \ (SCTP) [RFC2960], may associate with\n       multiple IP addresses and can switch\
    \ addresses (and therefore\n       network paths) in mid-connection.  If the transport\
    \ has concrete\n       knowledge of a changing network path, then the current\
    \ sending\n       rate may not be appropriate, and the transport sender may use\n\
    \       Quick-Start to probe the network to see if it can send at a\n       higher\
    \ rate.  (Alternatively, traditional slow-start should be\n       used in this\
    \ case when Quick-Start is not available.)\n   (4) After an application-limited\
    \ period, when the sender has been\n       using only a small amount of its appropriate\
    \ share of the network\n       capacity and has no valid estimate for its fair\
    \ share.  In this\n       case, Quick-Start may be an appropriate mechanism to\
    \ determine if\n       the sender can send at a higher rate.  For instance, consider\
    \ an\n       application that steadily exchanges low- rate control messages\n\
    \       and suddenly needs to transmit a large amount of data.\n   Of the above,\
    \ this document recommends that a TCP sender MAY attempt\n   to use Quick-Start\
    \ in cases (1) and (2).  It is NOT RECOMMENDED that\n   a TCP sender use Quick-Start\
    \ for case (3) at the current time.  Case\n   (3) requires external notifications\
    \ not presently defined for TCP or\n   other transport protocols.  Finally, a\
    \ TCP SHOULD NOT use Quick-\n   Start for case (4) at the current time.  Case\
    \ (4) requires further\n   thought and investigation with regard to how the transport\
    \ protocol\n   could determine it was in a situation that would warrant transmitting\n\
    \   a Quick-Start Request.\n   As a general guideline, a TCP sender SHOULD NOT\
    \ request a sending\n   rate larger than it is able to use over the next round-trip\
    \ time of\n   the connection (or over 100 ms, if the round-trip time is not known),\n\
    \   except as required to round up the desired sending rate to the next-\n   highest\
    \ allowable request.\n   In any circumstances, the sender MUST NOT make a QS request\
    \ if it has\n   made a QS request within the most recent round-trip time.\n  \
    \ Section 4.7 discusses some of the issues of using Quick-Start at\n   connection\
    \ initiation, and Section 4.8 discusses issues that arise\n   when Quick-Start\
    \ is used to request a larger sending rate after an\n   idle period.\n"
- title: 4.2.  The Quick-Start Response Option in the TCP header
  contents:
  - "4.2.  The Quick-Start Response Option in the TCP header\n   In order to approve\
    \ the use of Quick-Start, the TCP receiver responds\n   to the receipt of a Quick-Start\
    \ Request with a Quick-Start Response,\n   using the Quick-Start Response Option\
    \ in the TCP header.  TCP's\n   Quick-Start Response option is defined as follows:\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Kind      |  Length=8     | Resv. | Rate  |   TTL Diff    |\n   |  \
    \             |               |       |Request|               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                   QS Nonce                                | R |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       Figure 5: The Quick-Start Response Option in the TCP Header.\n   The first\
    \ byte of the Quick-Start Response option contains the option\n   kind, identifying\
    \ the TCP option.\n   The second byte of the Quick-Start Response option contains\
    \ the\n   option length in bytes.  The length field MUST be set to 8 bytes.\n\
    \   The third byte of the Quick-Start Response option contains a four-\n   bit\
    \ Reserved field, and the four-bit allowed Rate Request, formatted\n   as in the\
    \ Quick-Start Rate Request option.\n   The fourth byte of the TCP option contains\
    \ the TTL Diff.  The TTL\n   Diff contains the difference between the IP TTL and\
    \ QS TTL fields in\n   the received Quick-Start Request packet, as calculated\
    \ in equations\n   (1) or (2) (depending on whether IPv4 or IPv6 is used).\n \
    \  Bytes 5-8 of the TCP option contain the 30-bit QS Nonce and a two-\n   bit\
    \ Reserved field.\n   We note that, while there are limitations on the potential\
    \ size of\n   the Quick-Start Response Option, a Quick-Start Response Option of\n\
    \   eight bytes should not be a problem.  The TCP Options field can\n   contain\
    \ up to 40 bytes.  Other TCP options that might be used in a\n   SYN or SYN/ACK\
    \ packet include Maximum Segment Size (four bytes), Time\n   Stamp (ten bytes),\
    \ Window Scale (three bytes), and Selective\n   Acknowledgments Permitted (two\
    \ bytes).\n"
- title: '4.3.  TCP: Sending the Quick-Start Response'
  contents:
  - "4.3.  TCP: Sending the Quick-Start Response\n   An end host (say, host B) that\
    \ receives an IP packet containing a\n   Quick-Start Request passes the Quick-Start\
    \ Request, along with the\n   value in the IP TTL field, to the receiving TCP\
    \ layer.\n   If the TCP host is willing to permit the Quick-Start Request, then\
    \ a\n   Quick-Start Response option is included in the TCP header of the\n   corresponding\
    \ acknowledgement packet.  The Rate Request in the\n   Quick-Start Response option\
    \ is set to the received value of the Rate\n   Request in the Quick-Start Option,\
    \ or to a lower value if the TCP\n   receiver is only willing to allow a lower\
    \ Rate Request.  The TTL Diff\n   in the Quick-Start Response is set to the difference\
    \ between the IP\n   TTL value and the QS TTL value as given in equation (1) or\
    \ (2)\n   (depending on whether IPv4 or IPv6 is used).  The QS Nonce in the\n\
    \   Response is set to the received value of the QS Nonce in the Quick-\n   Start\
    \ Option.\n   If an end host receives an IP packet with a Quick-Start Request\
    \ with\n   a rate request of zero, then that host SHOULD NOT send a Quick-Start\n\
    \   Response.\n   The Quick-Start Response MUST NOT be resent if it is lost in\
    \ the\n   network.  Packet loss could be an indication of congestion on the\n\
    \   return path, in which case it is better not to approve the Quick-\n   Start\
    \ Request.\n"
- title: '4.4.  TCP: Receiving and Using the Quick-Start Response Packet'
  contents:
  - "4.4.  TCP: Receiving and Using the Quick-Start Response Packet\n   A TCP host\
    \ (say, TCP host A) that sent a Quick-Start Request and\n   receives a Quick-Start\
    \ Response in an acknowledgement first checks\n   that the Quick-Start Response\
    \ is valid.  The Quick-Start Response is\n   valid if it contains the correct\
    \ value for the TTL Diff, and an equal\n   or lesser value for the Rate Request\
    \ than that transmitted in the\n   Quick-Start Request.  In addition, if the received\
    \ Rate Request is K,\n   then the rightmost 2K bits of the QS Nonce must match\
    \ those bits in\n   the QS Nonce sent in the Quick-Start Request.  If these checks\
    \ are\n   not successful, then the Quick-Start Request failed, and the TCP host\n\
    \   MUST use the default TCP congestion window that it would have used\n   without\
    \ Quick-Start.  If the rightmost 2K bits of the QS Nonce do not\n   match those\
    \ bits in the QS Nonce sent in the Quick-Start Request, for\n   a received Rate\
    \ Request of K, then the TCP host MUST NOT send\n   additional Quick-Start Requests\
    \ during the life of the connection.\n   Whether or not the Quick-Start Request\
    \ was successful, the host\n   receiving the Quick-Start Response MUST send a\
    \ Report of Approved\n   Rate.  Similarly, if the packet containing the Quick-Start\
    \ Request is\n   acknowledged, but the acknowledgement does not include a Quick-Start\n\
    \   Response, then the sender MUST send a Report of Approved Rate.\n   If the\
    \ checks of the TTL Diff and the Rate Request are successful,\n   and the TCP\
    \ host is going to use the Quick-Start Request, it MUST\n   start using it within\
    \ one round-trip time of receiving the Quick-\n   Start Response, or within three\
    \ seconds, whichever is smaller.  To\n   use the Quick-Start Request, the host\
    \ sets its Quick-Start congestion\n   window (in terms of MSS-sized segments),\
    \ QS-cwnd, as follows:\n   QS-cwnd = (R * T) / (MSS + H)                     \
    \           (3)\n   where R is the Rate Request in bytes per second, T is the\
    \ measured\n   round-trip time in seconds, and H is the estimated TCP/IP header\
    \ size\n   in bytes (e.g., 40 bytes).\n   Derivation: the sender is allowed to\
    \ transmit at R bytes per second\n   including packet headers, but only R*MSS/(MSS+H)\
    \ bytes per second, or\n   equivalently R*T*MSS/(MSS+H) bytes per round-trip time,\
    \ of\n   application data.\n   The TCP host SHOULD set its congestion window cwnd\
    \ to QS-cwnd only if\n   QS-cwnd is greater than cwnd; otherwise, QS-cwnd is ignored.\
    \  If\n   QS-cwnd is used, the TCP host sets a flag that it is in Quick-Start\n\
    \   mode, and while in Quick-Start mode, the TCP sender MUST use rate-\n   based\
    \ pacing to pace out Quick-Start packets at the approved rate.\n   If, during\
    \ Quick-Start mode, the TCP sender receives ACKs for packets\n   sent before this\
    \ Quick-Start mode was entered, these ACKs are\n   processed as usual, following\
    \ the default congestion control\n   mechanisms.  Quick-Start mode ends when the\
    \ TCP host receives an ACK\n   for one of the Quick-Start packets.\n   If the\
    \ congestion window has not been fully used when the first ack\n   arrives ending\
    \ the Quick-Start mode, then the congestion window is\n   decreased to the amount\
    \ that has actually been used so far.  This is\n   necessary because when the\
    \ Quick-Start Response is received, the TCP\n   sender's round-trip-time estimate\
    \ might be longer than for succeeding\n   round-trip times, e.g., because of delays\
    \ at routers processing the\n   IP Quick-Start Option, or because of delays at\
    \ the receiver in\n   responding to the Quick-Start Request packet.  In this case,\
    \ an\n   overly large round-trip-time estimate could have caused the TCP\n   sender\
    \ to translate the approved Quick-Start sending rate in bytes\n   per second into\
    \ a congestion window that is larger than needed, with\n   the TCP sender receiving\
    \ an ACK for the first Quick- Start packet\n   before the entire congestion window\
    \ has been used.  Thus, when the\n   TCP sender receives the first ACK for a Quick-Start\
    \ packet, the\n   sender MUST reduce the congestion window to the amount that\
    \ has\n   actually been used.\n   As an example, a TCP sender with an approved\
    \ Quick-Start Request of R\n   KBps, B-byte packets including headers, and an\
    \ RTT estimate of T\n   seconds, would translate the Rate Request of R KBps to\
    \ a congestion\n   window of R*T/B packets.  The TCP sender would send the Quick-Start\n\
    \   packets rate-paced at R KBps.  However, if the actual current round-\n   trip\
    \ time was T/2 seconds instead of T seconds, then the sender would\n   begin to\
    \ receive acknowledgements for Quick-Start packets after T/2\n   seconds.  Following\
    \ the paragraph above, the TCP sender would then\n   reduce its congestion window\
    \ from R*T/B to approximately R*T/(B*2)\n   packets, the actual number of packets\
    \ that were needed to fill the\n   pipe at a sending rate of R KBps.  (Note: this\
    \ is just an\n   illustration; the congestion window is actually set to the amount\
    \ of\n   data sent before the ACK arrives and not based on equations above.)\n\
    \   After Quick-Start mode is exited and the congestion window adjusted\n   if\
    \ necessary, the TCP sender returns to using the default congestion-\n   control\
    \ mechanisms, processing further incoming ACK packets as\n   specified by those\
    \ congestion control mechanisms.  For example, if\n   the TCP sender was in slow-start\
    \ prior to the Quick-Start Request,\n   and no packets were lost or marked since\
    \ that time, then the sender\n   continues in slow-start after exiting Quick-Start\
    \ mode, as allowed by\n   ssthresh.\n   To add robustness, the TCP sender MUST\
    \ use Limited Slow-Start\n   [RFC3742] along with Quick-Start.  With Limited Slow-Start,\
    \ the TCP\n   sender limits the number of packets by which the congestion window\
    \ is\n   increased for one window of data during slow-start.\n   When Quick-Start\
    \ is used at the beginning of a connection, before any\n   packet marks or losses\
    \ have been reported, the TCP host MAY use the\n   reported Rate Request to set\
    \ the slow-start threshold to a desired\n   value, e.g., to some small multiple\
    \ of the congestion window.  A\n   possible future research topic is how the sender\
    \ might modify the\n   slow-start threshold at the beginning of a connection to\
    \ avoid\n   overshooting the path capacity.  (The initial value of ssthresh is\n\
    \   allowed to be arbitrarily high, and some TCP implementations use the\n   size\
    \ of the advertised window for ssthresh [RFC2581].)\n"
- title: '4.5.  TCP: Controlling Acknowledgement Traffic on the Reverse Path'
  contents:
  - "4.5.  TCP: Controlling Acknowledgement Traffic on the Reverse Path\n   When a\
    \ Quick-Start Request is approved for a TCP sender, the\n   resulting Quick-Start\
    \ data traffic can result in a sudden increase in\n   traffic for pure ACK packets\
    \ on the reverse path.  For example, for\n   the largest Quick-Start Request of\
    \ 1.3 Gbps, given a TCP sender with\n   1500-byte packets and a TCP receiver with\
    \ delayed acknowledgements\n   acking every other packet, this could result in\
    \ 17.3 Mbps of\n   acknowledgement traffic on the reverse path.\n   One possibility,\
    \ in cases with large Quick-Start Requests, would be\n   for TCP receivers to\
    \ send Quick-Start Requests to request bandwidth\n   for the acknowledgement traffic\
    \ on the reverse path.  However, in our\n   view, a better approach would be for\
    \ TCP receivers to simply control\n   the rate of sending acknowledgement traffic.\
    \  The optimal future\n   solution would involve the explicit use of congestion\
    \ control for TCP\n   acknowledgement traffic, as is done now for the acknowledgement\n\
    \   traffic in DCCP's CCID2 [RFC4341].\n   In the absence of congestion control\
    \ for acknowledgement traffic, the\n   TCP receiver could limit its sending rate\
    \ for ACK packets sent in\n   response to Quick-Start data packets.  The following\
    \ information is\n   needed by the TCP receiver:\n   * The RTT: TCP naturally\
    \ measures the RTT of the path and therefore\n     should have a sample of the\
    \ RTT.  If the TCP receiver does not have\n     a measurement of the round-trip\
    \ time, it can use the time between\n     the receipt of the Quick-Start Request\
    \ and the Report of Approved\n     Rate.\n   * The Approved Rate Request (R):\
    \ When the TCP receiver receives the\n     Quick-Start Response packet, the receiver\
    \ knows the value of the\n     approved Rate Request.\n   * The MSS: TCP advertises\
    \ the MSS during the initial three-way\n     handshake; therefore, the receiver\
    \ should have an understanding of\n     the packet size the sender will be using.\
    \  If the receiver does not\n     have such an understanding or wishes to confirm\
    \ the negotiated MSS,\n     the size of the first data packet can be used.\n \
    \  With this set of information, the TCP receiver can restrict its\n   sending\
    \ rate for pure acknowledgment traffic to at most 100 pure ACK\n   packets per\
    \ RTT by sending at most one ACK for every K data packets,\n   for the ACK Ratio\
    \ K set to R*RTT/(100*8*MSS).  The receiver would\n   acknowledge the first Quick-Start\
    \ data packet, and every succeeding K\n   data packets.  Thus, for a somewhat\
    \ extreme case of R=1.3 Gbps,\n   RTT=0.2 seconds, and MSS=1500 bytes, K would\
    \ be set to 216, and the\n   receiver would acknowledge every 216 data packets.\
    \  From [RFC2581],\n   the ACK Ratio K should have a minimum value of two.  When\
    \ the ACK\n   Ratio is greater than two, and the TCP sender receives\n   acknowledgements\
    \ each acknowledging more than two data packets, the\n   TCP sender may want to\
    \ use rate-based pacing to control the\n   burstiness of its outgoing data traffic.\n\
    \   In the absence of explicit congestion control mechanisms, the TCP end\n  \
    \ nodes cannot determine the packet drop rate for pure acknowledgement\n   traffic.\
    \  This is true with or without Quick-Start.  However, the TCP\n   receiver could\
    \ limit its increase in the sending rate for pure ACK\n   packets by at most doubling\
    \ the sending rate for pure ACK packets\n   from one round-trip time to the next.\
    \  The TCP receiver would do this\n   by halving the ACK Ratio each round-trip\
    \ time.\n   Note that the above is one particular mechanism that could be used\
    \ to\n   control the ACK stream.  Future work that investigates this scheme\n\
    \   and others in detail is encouraged.\n"
- title: '4.6.  TCP: Responding to a Loss of a Quick-Start Packet'
  contents:
  - "4.6.  TCP: Responding to a Loss of a Quick-Start Packet\n   For TCP, we have\
    \ defined a \"Quick-Start packet\" as one of the packets\n   sent in the window\
    \ immediately following a successful Quick-Start\n   Request.  After detecting\
    \ the loss or ECN-marking of a Quick-Start\n   packet, TCP MUST revert to the\
    \ default congestion control procedures\n   that would have been used if the Quick-Start\
    \ Request had not been\n   approved.  For example, if Quick-Start is used for\
    \ setting the\n   initial window, and a packet from the initial window is lost\
    \ or\n   marked, then the TCP sender MUST then slow-start with the default\n \
    \  initial window that would have been used if Quick-Start had not been\n   used.\
    \  In addition to reverting to the default congestion control\n   mechanisms,\
    \ the sender MUST take into account that the Quick-Start\n   congestion window\
    \ was too large.  Thus, the sender SHOULD decrease\n   ssthresh to, at most, half\
    \ the number of Quick-Start packets that\n   were successfully transmitted.  Appendix\
    \ B.5 discusses possible\n   alternatives in responding to the loss of a Quick-Start\
    \ packet.\n   If a Quick-Start packet is lost or ECN-marked, then the sender SHOULD\n\
    \   NOT make future Quick-Start Requests for this connection.\n   We note that\
    \ ECN [RFC3168] MAY be used with Quick-Start.  As is\n   always the case with\
    \ ECN, the sender's congestion control response to\n   an ECN-marked Quick-Start\
    \ packet is the same as the response to a\n   dropped Quick-Start packet, thus\
    \ reverting to slow start in the case\n   of Quick-Start packets marked as experiencing\
    \ congestion.\n"
- title: '4.7.  TCP: A Quick-Start Request for a Larger Initial Window'
  contents:
  - "4.7.  TCP: A Quick-Start Request for a Larger Initial Window\n   Some of the\
    \ issues of using Quick-Start are related to the specific\n   scenario in which\
    \ Quick-Start is used.  This section discusses the\n   following issues that arise\
    \ when Quick-Start is used by TCP to\n   request a larger initial window: (1)\
    \ interactions with Path MTU\n   Discovery (PMTUD); and (2) Quick-Start Request\
    \ packets that are\n   discarded by middleboxes.\n"
- title: 4.7.1.  Interactions with Path MTU Discovery
  contents:
  - "4.7.1.  Interactions with Path MTU Discovery\n   One issue when Quick-Start is\
    \ used to request a large initial window\n   concerns the interactions between\
    \ the large initial window and Path\n   MTU Discovery.  Some of the issues are\
    \ discussed in RFC 3390:\n   \"When larger initial windows are implemented along\
    \ with Path MTU\n   Discovery [RFC1191], alternatives are to set the `Don't Fragment'\n\
    \   (DF) bit in all segments in the initial window, or to set the `Don't\n   Fragment'\
    \ (DF) bit in one of the segments.  It is an open question as\n   to which of\
    \ these two alternatives is best.\"\n   If the sender knows the Path MTU when\
    \ the initial window is sent\n   (e.g., from a PMTUD cache or from some other\
    \ IETF-approved method),\n   then the sender SHOULD use that MTU for segments\
    \ in the initial\n   window.  Unfortunately, the sender doesn't necessarily know\
    \ the Path\n   MTU when it sends packets in the initial window.  In this case,\
    \ the\n   sender should be conservative in the packet size used.  Sending a\n\
    \   large number of overly large packets with the DF bit set is not\n   desirable,\
    \ but sending a large number of packets that are fragmented\n   in the network\
    \ can be equally undesirable.\n   If the sender doesn't know the Path MTU when\
    \ the initial window is\n   sent, the sender SHOULD send one large packet in the\
    \ initial window\n   with the DF bit set, and send the remaining packets in the\
    \ initial\n   window with a smaller MTU of 576 bytes (or 1280 bytes with IPv6).\n\
    \   A second possibility would be for the sender to delay sending the\n   Quick-Start\
    \ Request for one round-trip time by sending the Quick-\n   Start Request with\
    \ the first window of data, while also doing Path\n   MTU Discovery.\n   The sender\
    \ may be using an iterative approach such as Packetization\n   Layer Path MTU\
    \ Discovery (PLPMTUD) [MH06] for Path MTU Discovery,\n   where the sender tests\
    \ successively larger MTUs.  If a probe is\n   successfully delivered, then the\
    \ MTU can be raised to reflect the\n   value used in that probe.  We would note\
    \ that PLPMTUD does not allow\n   the sender to determine the Path MTU before\
    \ sending the initial\n   window of data.\n"
- title: 4.7.2.  Quick-Start Request Packets that are Discarded by Routers or
  contents:
  - "4.7.2.  Quick-Start Request Packets that are Discarded by Routers or\n      \
    \  Middleboxes\n   It is always possible for a TCP SYN packet carrying a Quick-Start\n\
    \   request to be dropped in the network due to congestion, or to be\n   blocked\
    \ due to interactions with routers or middleboxes, where a\n   middlebox is defined\
    \ as any intermediary box performing functions\n   apart from normal, standard\
    \ functions of an IP router on the data\n   path between a source host and destination\
    \ host [RFC3234].\n   Measurement studies of interactions between transport protocols\
    \ and\n   middleboxes [MAF04] show that for 70% of the Web servers\n   investigated,\
    \ no connection is established if the TCP SYN packet\n   contains an unknown IP\
    \ option (and for 43% of the Web servers, no\n   connection is established if\
    \ the TCP SYN packet contains an IP\n   TimeStamp Option).  In both cases, this\
    \ is presumably due to routers\n   or middleboxes along that path.\n   If the\
    \ TCP sender doesn't receive a response to the SYN or SYN/ACK\n   packet containing\
    \ the Quick-Start Request, then the TCP sender SHOULD\n   resend the SYN or SYN/ACK\
    \ packet without the Quick-Start Request.\n   Similarly, if the TCP sender receives\
    \ a TCP reset in response to the\n   SYN or SYN/ACK packet containing the Quick-Start\
    \ Request, then the\n   TCP sender SHOULD resend the SYN or SYN/ACK packet without\
    \ the\n   Quick-Start Request [RFC3360].\n   RFCs 1122 and 2988 specify that the\
    \ sender should set the initial RTO\n   (retransmission timeout) to three seconds,\
    \ though many TCP\n   implementations set the initial RTO to one second.  For\
    \ a TCP SYN\n   packet sent with a Quick-Start request, the TCP sender SHOULD\
    \ use an\n   initial RTO of three seconds.\n   We note that if the TCP SYN packet\
    \ is using the IP Quick-Start Option\n   for a Quick-Start Request, and it is\
    \ also using bits in the TCP\n   header to negotiate ECN-capability with the TCP\
    \ host at the other\n   end, then the drop of a TCP SYN packet could be due to\
    \ congestion, a\n   router or middlebox dropping the packet because of the IP\
    \ Option, or\n   a router or middlebox dropping the packet because of the information\n\
    \   in the TCP header negotiating ECN.  In this case, the sender could\n   resend\
    \ the dropped packet without either the Quick-Start or the ECN\n   requests. \
    \ Alternately, the sender could resend the dropped packet\n   with only the ECN\
    \ request in the TCP header, resending the TCP SYN\n   packet without either the\
    \ Quick-Start or the ECN requests if the\n   second TCP SYN packet is dropped.\
    \  The second choice seems\n   reasonable, given that a TCP SYN packet today is\
    \ more likely to be\n   blocked due to policies that discard packets with IP Options\
    \ than due\n   to policies that discard packets with ECN requests in the TCP header\n\
    \   [MAF04].\n"
- title: '4.8.  TCP: A Quick-Start Request in the Middle of a Connection'
  contents:
  - "4.8.  TCP: A Quick-Start Request in the Middle of a Connection\n   This section\
    \ discusses the following issues that arise when Quick-\n   Start is used by TCP\
    \ to request a larger window in the middle of a\n   connection, such as after\
    \ an idle period: (1) determining the rate to\n   request; (2) when to make a\
    \ request; and (3) the response if Quick-\n   Start packets are dropped.\n   (1)\
    \ Determining the rate to request:\n       For a connection that has not yet had\
    \ a congestion event (that\n       is, a marked or dropped packet), the TCP sender\
    \ is not restricted\n       in the rate that it requests.  As an example, a server\
    \ might wait\n       and send a Quick-Start Request after a short interaction\
    \ with the\n       client.\n       To use a Quick-Start Request in a connection\
    \ that has already\n       experienced a congestion event, and that has not had\
    \ a recent\n       mobility event, the TCP sender can determine the largest\n\
    \       congestion window that the TCP connection achieved since the last\n  \
    \     packet drop and translate this to a sending rate to get the\n       maximum\
    \ allowed request rate.  If the request is granted, then\n       the sender essentially\
    \ restarts with its old congestion window\n       from before it was reduced,\
    \ for example, during an idle period.\n       A Quick-Start Request sent in the\
    \ middle of a TCP connection\n       SHOULD be sent on a data packet.\n   (2)\
    \ When to make a request:\n       A TCP connection MAY make a Quick-Start Request\
    \ before the\n       connection has experienced a congestion event, or after an\
    \ idle\n       period of at least one RTO.\n   (3) Response if Quick-Start packets\
    \ are dropped:\n       If Quick-Start packets are dropped in the middle of connection,\n\
    \       then the sender MUST revert to half the Quick-Start window, or to\n  \
    \     the congestion window that the sender would have used if the\n       Quick-Start\
    \ request had not been approved, whichever is smaller.\n"
- title: 4.9.  An Example Quick-Start Scenario with TCP
  contents:
  - "4.9.  An Example Quick-Start Scenario with TCP\n   The following is an example\
    \ scenario of when both hosts request\n   Quick-Start for setting their initial\
    \ windows.  This is similar to\n   Figures 1 and 2 in Section 2.1, except that\
    \ it illustrates a TCP\n   connection with both TCP hosts sending Quick-Start\
    \ Requests.\n   * The TCP SYN packet from Host A contains a Quick-Start Request\
    \ in\n     the IP header.\n   * Routers along the forward path modify the Quick-Start\
    \ Request as\n     appropriate.\n   * Host B receives the Quick-Start Request\
    \ in the SYN packet, and\n     calculates the TTL Diff.  If Host B approves the\
    \ Quick-Start\n     Request, then Host B sends a Quick-Start Response in the TCP\
    \ header\n     of the SYN/ACK packet.  Host B also sends a Quick-Start Request\
    \ in\n     the IP header of the SYN/ACK packet.\n   * Routers along the reverse\
    \ path modify the Quick-Start Request as\n     appropriate.\n   * Host A receives\
    \ the Quick-Start Response in the SYN/ACK packet, and\n     checks the TTL Diff,\
    \ Rate Request, and QS Nonce for validity.  If\n     they are valid, then Host\
    \ A sets its initial congestion window\n     appropriately, and sets up rate-based\
    \ pacing to be used with the\n     initial window.  If the Quick-Start Response\
    \ is not valid, then\n     Host A uses TCP's default initial window.  In either\
    \ case, Host A\n     sends a Report of Approved Rate.\n     Host A also calculates\
    \ the TTL Diff for the Quick-Start Request in\n     the incoming SYN/ACK packet,\
    \ and sends a Quick-Start Response in\n     the TCP header of the ACK packet.\n\
    \   * Host B receives the Quick-Start Response in an ACK packet, and\n     checks\
    \ the TTL Diff, Rate Request, and QS Nonce for validity.  If\n     the Quick-Start\
    \ Response is valid, then Host B sets its initial\n     congestion window appropriately,\
    \ and sets up rate-based pacing to\n     be used with its initial window.  If\
    \ the Quick-Start Response is\n     not valid, then Host B uses TCP's default\
    \ initial window.  In\n     either case, Host B sends a Report of Approved Rate.\n"
- title: 5.  Quick-Start and IPsec AH
  contents:
  - "5.  Quick-Start and IPsec AH\n   This section shows that Quick-Start is compatible\
    \ with IPsec\n   Authentication Header (AH).  AH uses an Integrity Check Value\
    \ (ICV)\n   in the IPsec Authentication Header to verify both message\n   authentication\
    \ and integrity [RFC4302].  Changes to the Quick-Start\n   Option in the IP header\
    \ do not affect this AH ICV.  The tunnel\n   considerations in Section 6 below\
    \ apply to all IPsec tunnels,\n   regardless of what IPsec headers or processing\
    \ are used in\n   conjunction with the tunnel.\n   Because the contents of the\
    \ Quick-Start Option can change along the\n   path, it is important that these\
    \ changes not affect the IPsec\n   Authentication Header Integrity Check Value\
    \ (AH ICV).  For IPv4, RFC\n   4302 requires that unrecognized IPv4 options be\
    \ zeroed for AH ICV\n   computation purposes, so Quick-Start IP Option data changing\
    \ en route\n   does not cause problems with existing IPsec AH implementations\
    \ for\n   IPv4.  If the Quick-Start Option is recognized, it MUST be treated as\n\
    \   a mutable IPv4 option, and hence be completely zeroed for AH ICV\n   calculation\
    \ purposes.  IPv6 option numbers explicitly indicate\n   whether the option is\
    \ mutable; the third-highest order bit in the\n   IANA-allocated option type has\
    \ the value 1 to indicate that the\n   Quick-Start Option data can change en route.\
    \  RFC 4302 requires that\n   the option data of any such option be zeroed for\
    \ AH ICV computation\n   purposes.  Therefore, changes to the Quick-Start Option\
    \ in the IP\n   header do not affect the calculation of the AH ICV.\n"
- title: 6.  Quick-Start in IP Tunnels and MPLS
  contents:
  - "6.  Quick-Start in IP Tunnels and MPLS\n   This section considers interactions\
    \ between Quick-Start and IP\n   tunnels, including IPsec ([RFC4301]), IP in IP\
    \ [RFC2003], GRE\n   [RFC2784], and others.  This section also considers interactions\n\
    \   between Quick-Start and MPLS [RFC3031].\n   In the discussion, we use TTL\
    \ Diff, defined earlier as the difference\n   between the IP TTL and the Quick-Start\
    \ TTL, mod 256.  Recall that the\n   sender considers the Quick-Start Request\
    \ approved only if the value\n   of TTL Diff for the packet entering the network\
    \ is the same as the\n   value of TTL Diff for the packet exiting the network.\n\
    \   Simple tunnels: IP tunnel modes are generally based on adding a new\n   \"\
    outer\" IP header that encapsulates the original or \"inner\" IP header\n   and\
    \ its associated packet.  In many cases, the new \"outer\" IP header\n   may be\
    \ added and removed at intermediate points along a path,\n   enabling the network\
    \ to establish a tunnel without requiring endpoint\n   participation.  We denote\
    \ tunnels that specify that the outer header\n   be discarded at tunnel egress\
    \ as \"simple tunnels\", and we denote\n   tunnels where the egress saves and\
    \ uses information from the outer\n   header before discarding it as \"non-simple\
    \ tunnels\".  An example of a\n   \"non-simple tunnel\" would be a tunnel configured\
    \ to support ECN,\n   where the egress router might copy the ECN codepoint in\
    \ the outer\n   header to the inner header before discarding the outer header\n\
    \   [RFC3168].\n                       __ Tunnels Compatible with Quick-Start\n\
    \                      /\n   Simple Tunnels  __/\n                     \\\n  \
    \                    \\__ Tunnels Not Compatible with Quick-Start\n          \
    \                          (False Positives!)\n                           __ Tunnels\
    \ Supporting Quick-Start\n                          /\n                      \
    \   /\n   Non-Simple Tunnels __/_____ Tunnels Compatible with Quick-Start,\n \
    \                       \\          but Not Supporting Quick-Start\n         \
    \                \\\n                          \\__ Tunnels Not Compatible with\
    \ Quick-Start?\n                     Figure 6: Categories of Tunnels.\n   Tunnels\
    \ that are compatible with Quick-Start: We say that an IP\n   tunnel `is not compatible\
    \ with Quick-Start' if the use of a Quick-\n   Start Request over such a tunnel\
    \ allows false positives, where the\n   TCP sender incorrectly believes that the\
    \ Quick-Start Request was\n   approved by all routers along the path.  If the\
    \ use of Quick-Start\n   over the tunnel does not cause false positives, we say\
    \ that the IP\n   tunnel `is compatible with Quick-Start'.\n   If the IP TTL of\
    \ the inner header is decremented during forwarding\n   before tunnel encapsulation\
    \ takes place, then the simple tunnel is\n   compatible with Quick-Start, with\
    \ Quick-Start Requests being\n   rejected.  Section 6.1 describes in more detail\
    \ the ways that a\n   simple tunnel can be compatible with Quick-Start.\n   There\
    \ are some simple tunnels that are not compatible with Quick-\n   Start, allowing\
    \ `false positives' where the TCP sender incorrectly\n   believes that the Quick-Start\
    \ Request was approved by all routers\n   along the path.  This is discussed in\
    \ Section 6.2 below.\n   One of our tasks in the future will be to investigate\
    \ the occurrence\n   of tunnels that are not compatible with Quick-Start, and\
    \ to track the\n   extent to which such tunnels are modified over time.  The evaluation\n\
    \   of the problem of false positives from tunnels that are not\n   compatible\
    \ with Quick-Start will affect the progression of Quick-\n   Start from Experimental\
    \ to Proposed Standard, and will affect the\n   degree of deployment of Quick-Start\
    \ while in Experimental mode.\n   Tunnels that support Quick-Start: We say that\
    \ an IP tunnel `supports\n   Quick-Start' if it allows routers along the tunnel\
    \ path to process\n   the Quick-Start Request and give feedback, resulting in\
    \ the\n   appropriate possible acceptance of the Quick-Start Request.  Some\n\
    \   tunnels that are compatible with Quick-Start support Quick-Start,\n   while\
    \ others do not.  We note that a simple tunnel is not able to\n   support Quick-Start.\n\
    \   From a security point of view, the use of Quick-Start in the outer\n   header\
    \ of an IP tunnel might raise security concerns because an\n   adversary could\
    \ tamper with the Quick-Start information that\n   propagates beyond the tunnel\
    \ endpoint, or because the Quick-Start\n   Option exposes information to network\
    \ scanners.  Our approach is to\n   make supporting Quick-Start an option for\
    \ IP tunnels.  That is, in\n   environments or tunneling protocols where the risks\
    \ of using Quick-\n   Start are judged to outweigh its benefits, the tunnel can\
    \ simply\n   delete the Quick-Start Option or zero the Quick-Start rate request\n\
    \   and QS TTL fields before encapsulation.  The result is that there are\n  \
    \ two viable options for IP tunnels to be compatible with Quick-Start.\n   The\
    \ first option is the simple tunnel described above and in Section\n   6.1, where\
    \ the tunnel is compatible with Quick-Start but does not\n   support Quick-Start,\
    \ where all Quick-Start Requests along the path\n   will be rejected.  The second\
    \ approach is a Quick-Start-capable mode,\n   described in Section 6.3, where\
    \ the tunnel actively supports Quick-\n   Start.\n"
- title: 6.1.  Simple Tunnels that Are Compatible with Quick-Start
  contents:
  - "6.1.  Simple Tunnels that Are Compatible with Quick-Start\n   This section describes\
    \ the ways that a simple tunnel can be\n   compatible with Quick-Start but not\
    \ support Quick-Start, resulting in\n   the rejection of all Quick-Start Requests\
    \ that traverse the tunnel.\n   If the tunnel ingress for the simple tunnel is\
    \ at a router, the IP\n   TTL of the inner header is generally decremented during\
    \ forwarding\n   before tunnel encapsulation takes place.  In this case, TTL Diff\
    \ will\n   be changed, correctly causing the Quick-Start Request to be rejected.\n\
    \   For a simple tunnel, it is preferable if the Quick-Start Request is\n   not\
    \ copied to the outer header, saving the routers within the tunnel\n   from unnecessarily\
    \ processing the Quick-Start Request.  However, the\n   Quick-Start Request will\
    \ be rejected correctly in this case whether\n   or not the Quick-Start Request\
    \ is copied to the outer header.\n"
- title: 6.1.1.  Simple Tunnels that Are Aware of Quick-Start
  contents:
  - "6.1.1.  Simple Tunnels that Are Aware of Quick-Start\n   If a tunnel ingress\
    \ is aware of Quick-Start, but does not want to\n   support Quick-Start, then\
    \ the tunnel ingress MUST either zero the\n   Quick-Start rate request, QS TTL,\
    \ and QS Nonce fields, or remove the\n   Quick-Start Option from the inner header\
    \ before encapsulation.\n   Section 6.3 describes the procedures for a tunnel\
    \ that does want to\n   support Quick-Start.\n   Deleting the Quick-Start Option\
    \ or zeroing the Quick-Start rate\n   request *after decapsulation* also serves\
    \ to prevent the propagation\n   of Quick-Start information, and is compatible\
    \ with Quick-Start.  If\n   the outer header does not contain a Quick-Start Request,\
    \ a Quick-\n   Start-aware tunnel egress MUST reject the inner Quick-Start Request\n\
    \   by zeroing the Rate Request field in the inner header, or by deleting\n  \
    \ the Quick-Start Option.\n   If the tunnel ingress is at a sending host or router\
    \ where the IP TTL\n   is not decremented prior to encapsulation, and neither\
    \ tunnel\n   endpoint is aware of Quick-Start, then this allows false positives,\n\
    \   described in the section below.\n"
- title: 6.2.  Simple Tunnels that Are Not Compatible with Quick-Start
  contents:
  - "6.2.  Simple Tunnels that Are Not Compatible with Quick-Start\n   Sometimes a\
    \ tunnel implementation that does not support Quick-Start\n   is independent of\
    \ the TCP sender or a router implementation that\n   supports Quick-Start.  In\
    \ these cases, it is possible that a Quick-\n   Start Request gets erroneously\
    \ approved without the routers in the\n   tunnel having individually approved\
    \ the request, causing a false\n   positive.\n   If a tunnel ingress is a separate\
    \ component from the TCP sender or IP\n   forwarding, it is possible that a packet\
    \ with a Quick-Start option is\n   encapsulated without the IP TTL being decremented\
    \ first, or with both\n   IP TTL and QS TTL being decremented before the tunnel\
    \ encapsulation\n   takes place.  If the tunnel ingress does not know about Quick-Start,\n\
    \   a valid Quick-Start Request with unchanged TTL Diff traverses in the\n   inner\
    \ header, while the outer header most likely does not carry a\n   Quick-Start\
    \ Request.  If the tunnel egress also does not support\n   Quick-Start, it remains\
    \ possible that the Quick-Start Request would\n   be falsely approved, because\
    \ the packet is decapsulated using the\n   Quick-Start Request from the inner\
    \ header, and the value of TTL Diff\n   echoed to the sender remains unchanged.\
    \  For example, such a scenario\n   can occur with a Bump-In-The-Stack (BITS),\
    \ an IPsec encryption\n   implementation where the data encryption occurs between\
    \ the network\n   drivers and the TCP/IP protocol stack [RFC4301].\n   As one\
    \ example, if a remote access VPN client uses a BITS structure,\n   then Quick-Start\
    \ obstacles between the client and the VPN gateway\n   won't be seen.  This is\
    \ a particular problem because the path between\n   the client and the VPN gateway\
    \ is likely to contain the most\n   congested part of the path.  Because most\
    \ VPN clients are reported to\n   use BITS [H05], we will explore this in more\
    \ detail.\n   A Bump-In-The-Wire (BITW) is an IPsec encryption implementation\
    \ where\n   the encryption occurs on an outboard processor, offloading the\n \
    \  encryption processing overhead from the host or router [RFC4301].\n   The BITW\
    \ device is usually IP addressable, which means that the IP\n   TTL is decremented\
    \ before the packet is passed to the BITW.  If the\n   QS TTL is not decremented,\
    \ then the value of TTL Diff is changed, and\n   the Quick-Start Request will\
    \ be denied.  However, if the BITW\n   supports a host and does not have its own\
    \ IP address, then the IP TTL\n   is not decremented before the packet is passed\
    \ from the host to the\n   BITW, and a false positive could occur.\n   Other tunnels\
    \ that need to be looked at are IP tunnels over non-\n   network protocols, such\
    \ as IP over TCP and IP over UDP [RFC3948], and\n   tunnels using the Layer Two\
    \ Tunneling Protocol [RFC2661].\n   Section 9.2 discusses the related issue of\
    \ non-IP queues, such as\n   layer-two Ethernet or ATM (Asynchronous Transfer\
    \ Mode) networks, as\n   another instance of possible bottlenecks that do not\
    \ participate in\n   the Quick-Start feedback.\n"
- title: 6.3.  Tunnels That Support Quick-Start
  contents:
  - "6.3.  Tunnels That Support Quick-Start\n   This section discusses tunnels configured\
    \ to support Quick-Start.\n   If the tunnel ingress node chooses to locally approve\
    \ the Quick-\n   Start Request, then the ingress node MUST decrement the Quick-Start\n\
    \   TTL at the same time it decrements the IP TTL, and MUST copy IP TTL\n   and\
    \ the Quick-Start Option from the inner IP header to the outer\n   header.  During\
    \ encapsulation, the tunnel ingress MUST zero the\n   Quick-Start rate request\
    \ field in the inner header to ensure that the\n   Quick-Start Request will be\
    \ rejected if the tunnel egress does not\n   support Quick-Start.\n   If the tunnel\
    \ ingress node does not choose to locally approve the\n   Quick-Start Request,\
    \ then it MUST either delete the Quick-Start\n   option from the inner header\
    \ before encapsulation, or zero the QS TTL\n   and the Rate Request fields before\
    \ encapsulation.\n   Upon decapsulation, if the outer header contains a Quick-Start\n\
    \   option, the tunnel egress MUST copy the IP TTL and the Quick-Start\n   option\
    \ from the outer IP header to the inner header.\n   IPsec uses the IKE (Internet\
    \ Key Exchange) Protocol for security\n   associations.  We do not consider the\
    \ interactions between Quick-\n   Start and IPsec with IKEv1 [RFC2409] in this\
    \ document.  Now that the\n   RFC for IKEv2 [RFC4306] is published, we plan to\
    \ specify a\n   modification of IPsec to allow the support of Quick-Start to be\n\
    \   negotiated; this modification will specify the negotiation between\n   tunnel\
    \ endpoints to allow or forbid support for Quick-Start within\n   the tunnel.\
    \  This was done for ECN for IPsec tunnels, with IKEv1\n   [RFC3168, Section 9.2].\
    \  This negotiation of Quick-Start capability\n   in an IPsec tunnel will be specified\
    \ in a separate IPsec document.\n   This document will also include a discussion\
    \ of the potential effects\n   of an adversary's modifications of the Quick-Start\
    \ field (as in\n   Sections 18 and 19 of RFC 3168), and of the security considerations\n\
    \   of exposing the Quick-Start rate request to network scanners.\n"
- title: 6.4.  Quick-Start and MPLS
  contents:
  - "6.4.  Quick-Start and MPLS\n   The behavior of Quick-Start with MPLS is similar\
    \ to the behavior of\n   Quick-Start with IP Tunnels.  For those MPLS paths where\
    \ the IP TTL\n   is decremented as part of traversing the MPLS path, these paths\
    \ are\n   compatible with Quick-Start, but do not support Quick-Start; Quick-\n\
    \   Start Requests that are traversing these paths will be correctly\n   understood\
    \ by the transport sender as having been denied.  Any MPLS\n   paths where the\
    \ IP TTL is not decremented as part of traversing the\n   MPLS path would be not\
    \ compatible with Quick-Start; such paths would\n   result in false positives,\
    \ where the TCP sender incorrectly believes\n   that the Quick-Start Request was\
    \ approved by all routers along the\n   path.\n   For cases where the ingress\
    \ node to the MPLS path is aware of Quick-\n   Start, this node should either\
    \ zero the Quick-Start rate request, QS\n   TTL, and QS Nonce fields, or remove\
    \ the Quick-Start Option from the\n   IP header.\n"
- title: 7.  The Quick-Start Mechanism in Other Transport Protocols
  contents:
  - "7.  The Quick-Start Mechanism in Other Transport Protocols\n   The section earlier\
    \ specified the use of Quick-Start in TCP.  In this\n   section, we generalize\
    \ this to give guidelines for the use of Quick-\n   Start with other transport\
    \ protocols.  We also discuss briefly how\n   Quick-Start could be specified for\
    \ other transport protocols.\n   The general guidelines for Quick-Start in transport\
    \ protocols are as\n   follows:\n   * Quick-Start is only specified for unicast\
    \ transport protocols with\n     appropriate congestion control mechanisms.  Note:\
    \ Quick-Start is\n     not a replacement for standard congestion control techniques,\
    \ but\n     meant to augment their operation.\n   * A transport-level mechanism\
    \ is needed for the Quick-Start Response\n     from the receiver to the sender.\
    \  This response contains the Rate\n     Request, TTL Diff, and QS Nonce.\n  \
    \ * The sender checks the validity of the Quick-Start Response.\n   * The sender\
    \ has an estimate of the round-trip time, and translates\n     the Quick-Start\
    \ Response into an allowed window or allowed sending\n     rate.  The sender sends\
    \ a Report of the Approved Rate.  The sender\n     starts sending Quick-Start\
    \ packets, rate-paced out at the approved\n     sending rate.\n   * After the\
    \ sender receives the first acknowledgement packet for a\n     Quick-Start packet,\
    \ no more Quick-Start packets are sent.  The\n     sender adjusts its current\
    \ congestion window or sending rate to be\n     consistent with the actual amount\
    \ of data that was transmitted in\n     that round-trip time.\n   * When the last\
    \ Quick-Start packet is acknowledged, the sender\n     continues using the standard\
    \ congestion control mechanisms of that\n     protocol.\n   * If one of the Quick-Start\
    \ packets is lost, then the sender reverts\n     to the standard congestion control\
    \ method of that protocol that\n     would have been used if the Quick-Start Request\
    \ had not been\n     approved.  In addition, the sender takes into account the\n\
    \     information that the Quick-Start congestion window was too large\n     (e.g.,\
    \ by decreasing ssthresh in TCP).\n"
- title: 8.  Using Quick-Start
  contents:
  - '8.  Using Quick-Start

    '
- title: 8.1.  Determining the Rate to Request
  contents:
  - "8.1.  Determining the Rate to Request\n   As discussed in [SAF06], the data sender\
    \ does not necessarily have\n   information about the size of the data transfer\
    \ at connection\n   initiation; for example, in request-response protocols such\
    \ as HTTP,\n   the server doesn't know the size or name of the requested object\n\
    \   during connection initiation.  [SAF06] explores some of the\n   performance\
    \ implications of overly large Quick-Start Requests, and\n   discusses heuristics\
    \ that end-nodes could use to size their requests\n   appropriately.  For example,\
    \ the sender might have information about\n   the bandwidth of the last-mile hop,\
    \ the size of the local socket\n   buffer, or of the TCP receive window, and could\
    \ use this information\n   in determining the rate to request.  Web servers that\
    \ mostly have\n   small objects to transfer might decide not to use Quick-Start\
    \ at all,\n   since Quick-Start would be of little benefit to them.\n   Quick-Start\
    \ will be more effective if Quick-Start Requests are not\n   larger than necessary;\
    \ every Quick-Start Request that is approved but\n   not used (or not fully used)\
    \ takes away from the bandwidth pool\n   available for granting successive Quick-Start\
    \ Requests.\n"
- title: 8.2.  Deciding the Permitted Rate Request at a Router
  contents:
  - "8.2.  Deciding the Permitted Rate Request at a Router\n   In this section, we\
    \ briefly outline how a router might decide whether\n   or not to approve a Quick-Start\
    \ Request.  The router should ask the\n   following questions:\n   * Has the router's\
    \ output link been underutilized for some time\n     (e.g., several seconds)?\n\
    \   * Would the output link remain underutilized if the arrival rate were\n  \
    \   to increase by the aggregate rate requests that the router has\n     approved\
    \ over the last fraction of a second?\n   In order to answer the last question,\
    \ the router must have some\n   knowledge of the available bandwidth on the output\
    \ link and of the\n   Quick-Start bandwidth that could arrive due to recently\
    \ approved\n   Quick-Start Requests.  In this way, if an underutilized router\n\
    \   experiences a flood of Quick-Start Requests, the router can begin to\n   deny\
    \ Quick-Start Requests while the output link is still\n   underutilized.\n   A\
    \ simple way for the router to keep track of the potential bandwidth\n   from\
    \ recently approved requests is to maintain two counters: one for\n   the total\
    \ aggregate Rate Requests that have been approved in the\n   current time interval\
    \ [T1, T2], and one for the total aggregate Rate\n   Requests approved over a\
    \ previous time interval [T0, T1].  However,\n   this document doesn't specify\
    \ router algorithms for approving Quick-\n   Start Requests, or make requirements\
    \ for the appropriate time\n   intervals for remembering the aggregate approved\
    \ Quick-Start\n   bandwidth.  A possible router algorithm is given in Appendix\
    \ E, and\n   more discussion of these issues is available in [SAF06].\n   * If\
    \ the router's output link has been underutilized and the\n     aggregate of the\
    \ Quick-Start Request Rate options granted is low\n     enough to prevent a near-term\
    \ bandwidth shortage, then the router\n     could approve the Quick-Start Request.\n\
    \   Section 10.2 discusses some of the implementation issues in\n   processing\
    \ Quick-Start Requests at routers.  [SAF06] discusses the\n   range of possible\
    \ Quick-Start algorithms at the router for deciding\n   whether to approve a Quick-Start\
    \ Request.  In order to explore the\n   limits of the possible functionality at\
    \ routers, [SAF06] also\n   discusses Extreme Quick-Start mechanisms at routers,\
    \ where the router\n   would keep per-flow state concerning approved Quick-Start\
    \ requests.\n"
- title: 9.  Evaluation of Quick-Start
  contents:
  - '9.  Evaluation of Quick-Start

    '
- title: 9.1.  Benefits of Quick-Start
  contents:
  - "9.1.  Benefits of Quick-Start\n   The main benefit of Quick-Start is the faster\
    \ start-up for the\n   transport connection itself.  For a small TCP transfer\
    \ of one to five\n   packets, Quick-Start is probably of very little benefit;\
    \  at best, it\n   might shorten the connection lifetime from three to two round-trip\n\
    \   times (including the round-trip time for connection establishment).\n   Similarly,\
    \ for a very large transfer, where the slow-start phase\n   would have been only\
    \ a small fraction of the connection lifetime,\n   Quick-Start would be of limited\
    \ benefit.  Quick-Start would not\n   significantly shorten the connection lifetime,\
    \ but it might eliminate\n   or at least shorten the start-up phase.  However,\
    \ for moderate-sized\n   connections in a well-provisioned environment, Quick-Start\
    \ could\n   possibly allow the entire transfer of M packets to be completed in\n\
    \   one round-trip time (after the initial round-trip time for the SYN\n   exchange),\
    \ instead of the log_2(M)-2 round-trip times that it would\n   normally take for\
    \ the data transfer, in an uncongested environments\n   (assuming an initial window\
    \ of four packets).\n"
- title: 9.2.  Costs of Quick-Start
  contents:
  - "9.2.  Costs of Quick-Start\n   This section discusses the costs of Quick-Start\
    \ for the connection\n   and for the routers along the path.\n   The cost of having\
    \ a Quick-Start Request packet dropped:\n   Measurement studies cited earlier\
    \ [MAF04] suggest that on a wide\n   range of paths in the Internet, TCP SYN packets\
    \ containing unknown IP\n   options will be dropped.  Thus, for the sender one\
    \ risk in using\n   Quick-Start is that the packet carrying the Quick-Start Request\
    \ could\n   be dropped in the network.  It is particularly costly to the sender\n\
    \   when a TCP SYN packet is dropped, because in this case the sender\n   should\
    \ wait for an RTO of three seconds before re-sending the SYN\n   packet, as specified\
    \ in Section 4.7.2.\n   The cost of having a Quick-Start data packet dropped:\n\
    \   Another risk for the sender in using Quick-Start lies in the\n   possibility\
    \ of suffering from congestion-related losses of the\n   Quick-Start data packets.\
    \  This should be an unlikely situation\n   because routers are expected to approve\
    \ Quick-Start Requests only\n   when they are significantly underutilized.  However,\
    \ a transient\n   increase in cross-traffic in one of the routers, a sudden decrease\
    \ in\n   available bandwidth on one of the links, or congestion at a non-IP\n\
    \   queue could result in packet losses even when the Quick-Start Request\n  \
    \ was approved by all of the routers along the path.  If a Quick-Start\n   packet\
    \ is dropped, then the sender reverts to the congestion control\n   mechanisms\
    \ it would have used if the Quick-Start Request had not been\n   approved, so\
    \ the performance cost to the connection of having a\n   Quick-Start packet dropped\
    \ is small, compared to the performance\n   without Quick-Start.  (On the other\
    \ hand, the performance difference\n   between Quick-Start with a Quick-Start\
    \ packet dropped and Quick-\n   Start with no Quick-Start packet dropped can be\
    \ considerable.)\n   Added complexity at routers:\n   The main cost of Quick-Start\
    \ at routers concerns the costs of added\n   complexity.  The added complexity\
    \ at the end-points is moderate, and\n   might easily be outweighed by the benefit\
    \ of Quick-Start to the end\n   hosts.  The added complexity at the routers is\
    \ also somewhat\n   moderate; it involves estimating the unused bandwidth on the\
    \ output\n   link over the last several seconds, processing the Quick-Start\n\
    \   request, and keeping a counter of the aggregate Quick-Start rate\n   approved\
    \ over the last fraction of a second.  However, this added\n   complexity at routers\
    \ adds to the development cycle, and could\n   prevent the addition of other competing\
    \ functionality to routers.\n   Thus, careful thought would have to be given to\
    \ the addition of\n   Quick-Start to IP.\n   The slow path in routers:\n   Another\
    \ drawback of Quick-Start is that packets containing the\n   Quick-Start Request\
    \ message might not take the fast path in routers,\n   particularly in the beginning\
    \ of Quick-Start's deployment in the\n   Internet.  This would mean some extra\
    \ delay for the end hosts, and\n   extra processing burden for the routers.  However,\
    \ as discussed in\n   Sections 4.1 and 4.7, not all packets would carry the Quick-Start\n\
    \   option.  In addition, for the underutilized links where Quick-Start\n   Requests\
    \ could actually be approved, or in typical environments where\n   most of the\
    \ packets belong to large flows, the burden of the Quick-\n   Start Option on\
    \ routers would be considerably reduced.  Nevertheless,\n   it is still conceivable,\
    \ in the worst case, that many packets would\n   carry Quick-Start Requests; this\
    \ could slow down the processing of\n   Quick-Start packets in routers considerably.\
    \  As discussed in Section\n   9.6, routers can easily protect against this by\
    \ enforcing a limit on\n   the rate at which Quick-Start Requests will be considered.\
    \  [RW03]\n   and [RW04] contain measurements of the impact of IP Option Processing\n\
    \   on packet round-trip times.\n   Multiple paths:\n   One limitation of Quick-Start\
    \ is that it presumes that the data\n   packets of a connection will follow the\
    \ same path as the Quick-Start\n   request packet.  If this is not the case, then\
    \ the connection could\n   be sending the Quick-Start packets, at the approved\
    \ rate, along a\n   path that was already congested, or that became congested\
    \ as a result\n   of this connection.  Thus, Quick-Start could give poor performance\n\
    \   when there is a routing change immediately after the Quick-Start\n   Request\
    \ is approved, and the Quick-Start data packets follow a\n   different path from\
    \ that of the original Quick-Start Request.  This\n   is, however, similar to\
    \ what would happen for a connection with\n   sufficient data, if the connection's\
    \ path was changed in the middle\n   of the connection, which had already established\
    \ the allowed initial\n   rate.\n   As specified in Section 3.3, a router that\
    \ uses multipath routing for\n   packets within a single connection must not approve\
    \ a Quick-Start\n   Request.  Quick-Start would not perform robustly in an environment\n\
    \   with multipath routing, where different packets in a connection\n   routinely\
    \ follow different paths.  In such an environment, the\n   Quick-Start Request\
    \ and some fraction of the packets in the\n   connection might take an underutilized\
    \ path, while the rest of the\n   packets take an alternate, congested path.\n\
    \   Non-IP queues:\n   A problem of any mechanism for feedback from routers at\
    \ the IP level\n   is that there can be queues and bottlenecks in the end-to-end\
    \ path\n   that are not in IP-level routers.  As an example, these include\n \
    \  queues in layer-two Ethernet or ATM networks.  One possibility would\n   be\
    \ that an IP-level router adjacent to such a non-IP queue or\n   bottleneck would\
    \ be configured to reject Quick-Start Requests if that\n   was appropriate.  One\
    \ would hope that, in general, IP networks are\n   configured so that non-IP queues\
    \ between IP routers do not end up\n   being the congested bottlenecks.\n"
- title: 9.3.  Quick-Start with QoS-Enabled Traffic
  contents:
  - "9.3.  Quick-Start with QoS-Enabled Traffic\n   The discussion in this document\
    \ has largely been of Quick-Start with\n   default, best-effort traffic.  However,\
    \ Quick-Start could also be\n   used by traffic using some form of differentiated\
    \ services, and\n   routers could take the traffic class into account when deciding\n\
    \   whether or not to grant the Quick-Start Request.  We don't address\n   this\
    \ context further in this paper, since it is orthogonal to the\n   specification\
    \ of Quick-Start.\n   Routers are also free to take into account their own priority\n\
    \   classifications in processing Quick-Start Requests.\n"
- title: 9.4.  Protection against Misbehaving Nodes
  contents:
  - "9.4.  Protection against Misbehaving Nodes\n   In this section, we discuss the\
    \ protection against senders,\n   receivers, or colluding routers or middleboxes\
    \ lying about the\n   Quick-Start Request.\n"
- title: 9.4.1.  Misbehaving Senders
  contents:
  - "9.4.1.  Misbehaving Senders\n   A transport sender could try to transmit data\
    \ at a higher rate than\n   that approved in the Quick-Start Request.  The network\
    \ could use a\n   traffic policer to protect against misbehaving senders that\
    \ exceed\n   the approved rate, for example, by dropping packets that exceed the\n\
    \   allowed transmission rate.  The required Report of Approved Rate\n   allows\
    \ traffic policers to check that the Report of Approved Rate\n   does not exceed\
    \ the Rate Request actually approved at that point in\n   the network in the previous\
    \ Quick-Start Request from that connection.\n   The required Approved Rate report\
    \ also allows traffic policers to\n   check that the sender's sending rate does\
    \ not exceed the rate in the\n   Report of Approved Rate.\n   If a router or receiver\
    \ receives an Approved Rate report that is\n   larger than the Rate Request in\
    \ the Quick-Start Request approved for\n   that sender for that connection in\
    \ the previous round-trip time, then\n   the router or receiver could deny future\
    \ Quick-Start Requests from\n   that sender, e.g., by deleting the Quick-Start\
    \ Request from future\n   packets from that sender.  We note that routers are\
    \ not required to\n   use Approved Rate reports to check if senders are cheating;\
    \ this is\n   at the discretion of the router.\n   If a router sees a Report of\
    \ Approved Rate, and did not see an\n   earlier Quick-Start Request, then either\
    \ the sender could be\n   cheating, or the connection's path could have changed\
    \ since the\n   Quick-Start Request was sent.  In either case, the router could\n\
    \   decide to deny future Quick-Start Requests for this connection.  In\n   particular,\
    \ it is reasonable for the router to deny a Quick-Start\n   request if either\
    \ the sender is cheating, or if the connection path\n   suffers from path changes\
    \ or multipathing.\n   If a router approved a Quick-Start Request, but does not\
    \ see a\n   subsequent Approved Rate report, then there are several\n   possibilities:\
    \ (1) the request was denied and/or dropped downstream,\n   and the sender did\
    \ not send a Report of Approved Rate; (2) the\n   request was approved, but the\
    \ sender did not send a Report of\n   Approved Rate; (3) the Approved Rate report\
    \ was dropped in the\n   network; or (4) the Approved Rate report took a different\
    \ path from\n   the Quick-Start Request.  In any of these cases, the router would\
    \ be\n   justified in denying future Quick-Start Requests for this connection.\n\
    \   In any of the cases mentioned in the three paragraphs above (i.e., an\n  \
    \ Approved Rate report that is larger than the Rate Request in the\n   earlier\
    \ Quick-Start Request, a Report of Approved Rate with no\n   preceding Rate Request,\
    \ or a Rate Request with no Report of Approved\n   Rate), a traffic policer may\
    \ assume that Quick-Start is not being\n   used appropriately, or is being used\
    \ in an unsuitable environment\n   (e.g., with multiple paths), and take some\
    \ corresponding action.\n   What are the incentives for a sender to cheat by over-sending\
    \ after a\n   Quick-Start Request?  Assuming that the sender's interests are\n\
    \   measured by a performance metric such as the completion time for its\n   connections,\
    \ sometimes it might be in the sender's interests to\n   cheat, and sometimes\
    \ it might not;  in some cases, it could be\n   difficult for the sender to judge\
    \ whether it would be in its\n   interests to cheat.  The incentives for a sender\
    \ to cheat by over-\n   sending after a Quick-Start Request are not that different\
    \ from the\n   incentives for a sender to cheat by over-sending even in the absence\n\
    \   of Quick-Start, with one difference: the use of Quick-Start could\n   help\
    \ a sender evade policing actions from policers in the network.\n   The Report\
    \ of Approved Rate is designed to address this and to make\n   it harder for senders\
    \ to use Quick-Start to `cover' their cheating.\n"
- title: 9.4.2.  Receivers Lying about Whether the Request was Approved
  contents:
  - "9.4.2.  Receivers Lying about Whether the Request was Approved\n   One form of\
    \ misbehavior would be for the receiver to lie to the\n   sender about whether\
    \ the Quick-Start Request was approved, by falsely\n   reporting the TTL Diff\
    \ and QS Nonce.  If a router that understands\n   the Quick-Start Request denies\
    \ the request by deleting the request or\n   by zeroing the QS TTL and QS Nonce,\
    \ then the receiver can \"lie\" about\n   whether the request was approved only\
    \ by successfully guessing the\n   value of the TTL Diff and QS Nonce to report.\
    \  The chance of the\n   receiver successfully guessing the correct value for\
    \ the TTL Diff is\n   1/256, and the chance of the receiver successfully guessing\
    \ the QS\n   nonce for a reported rate request of K is 1/(2K).\n   However, if\
    \ the Quick-Start Request is denied only by a non-Quick-\n   Start-capable router,\
    \ or by a router that is unable to zero the QS\n   TTL and QS Nonce fields, then\
    \ the receiver could lie about whether\n   the Quick-Start Requests were approved\
    \ by modifying the QS TTL in\n   successive requests received from the same host.\
    \  In particular, if\n   the sender does not act on a Quick-Start Request, then\
    \ the receiver\n   could decrement the QS TTL by one in the next request received\
    \ from\n   that host before calculating the TTL Diff, and decrement the QS TTL\n\
    \   by two in the following received request, until the sender acts on\n   one\
    \ of the Quick-Start Requests.\n   Unfortunately, if a router doesn't understand\
    \ Quick-Start, then it is\n   not possible for that router to take an active step\
    \ such as zeroing\n   the QS TTL and QS Nonce to deny a request.  As a result,\
    \ the QS TTL\n   is not a fail-safe mechanism for preventing lying by receivers\
    \ in the\n   case of non-Quick-Start-capable routers.\n   What would be the incentives\
    \ for a receiver to cheat in reporting on\n   a Quick-Start Request, in the absence\
    \ of a mechanism such as the QS\n   Nonce?  In some cases, cheating would be of\
    \ clear benefit to the\n   receiver, resulting in a faster completion time for\
    \ the transfer.  In\n   other cases, where cheating would result in Quick-Start\
    \ packets being\n   dropped in the network, cheating might or might not improve\
    \ the\n   receiver's performance metric, depending on the details of that\n  \
    \ particular scenario.\n"
- title: 9.4.3.  Receivers Lying about the Approved Rate
  contents:
  - "9.4.3.  Receivers Lying about the Approved Rate\n   A second form of receiver\
    \ misbehavior would be for the receiver to\n   lie to the sender about the Rate\
    \ Request for an approved Quick-Start\n   Request, by increasing the value of\
    \ the Rate Request field.  However,\n   the receiver doesn't necessarily know\
    \ the Rate Request in the\n   original Quick-Start Request sent by the sender,\
    \ and a higher Rate\n   Request reported by the receiver will only be considered\
    \ valid by the\n   sender if it is no higher than the Rate Request originally\
    \ requested\n   by the sender.  For example, if the sender sends a Quick-Start\n\
    \   Request with a Rate Request of X, and the receiver reports receiving\n   a\
    \ Quick-Start Request with a Rate Request of Y > X, then the sender\n   knows\
    \ that either some router along the path malfunctioned\n   (increasing the Rate\
    \ Request inappropriately), or the receiver is\n   lying about the Rate Request\
    \ in the received packet.\n   If the sender sends a Quick-Start Request with a\
    \ Rate Request of Z,\n   the receiver receives the Quick-Start Request with an\
    \ approved Rate\n   Request of X, and reports a Rate Request of Y, for X < Y <=\
    \ Z, then\n   the receiver only succeeds in lying to the sender about the approved\n\
    \   rate if the receiver successfully reports the rightmost 2Y bits in\n   the\
    \ QS nonce.\n   If senders often use a configured default value for the Rate Request,\n\
    \   then receivers would often be able to guess the original Rate\n   Request,\
    \ and this would make it easier for the receiver to lie about\n   the value of\
    \ the Rate Request field.  Similarly, if the receiver\n   often communicates with\
    \ a particular sender, and the sender always\n   uses the same Rate Request for\
    \ that receiver, then the receiver might\n   over time be able to infer the original\
    \ Rate Request used by the\n   sender.\n   There are several possible additional\
    \ forms of protection against\n   receivers lying about the value of the Rate\
    \ Request.  One possible\n   additional protection would be for a router that\
    \ decreases a Rate\n   Request in a Quick-Start Request to report the decrease\
    \ directly to\n   the sender.  However, this could lead to many reports back to\
    \ the\n   sender for a single request, and could also be used in address-\n  \
    \ spoofing attacks.\n   A second limited form of protection would be for senders\
    \ to use some\n   degree of randomization in the requested Rate Request, so that\
    \ it is\n   difficult for receivers to guess the original value for the Rate\n\
    \   Request.  However, this is difficult because there is a fairly coarse\n  \
    \ granularity in the set of rate requests available to the sender, and\n   randomizing\
    \ the initial request only offers limited protection, in\n   any case.\n"
- title: 9.4.4.  Collusion between Misbehaving Routers
  contents:
  - "9.4.4.  Collusion between Misbehaving Routers\n   In addition to protecting against\
    \ misbehaving receivers, it is\n   necessary to protect against misbehaving routers.\
    \  Consider collusion\n   between an ingress router and an egress router belonging\
    \ to the same\n   intranet.  The ingress router could decrement the Rate Request\
    \ at the\n   ingress, with the egress router increasing it again at the egress.\n\
    \   The routers between the ingress and egress that approved the\n   decremented\
    \ rate request might not have been willing to approve the\n   larger, original\
    \ request.\n   Another form of collusion would be for the ingress router to inform\n\
    \   the egress router out-of-band of the TTL Diff and QS Nonce for the\n   request\
    \ packet at the ingress.  This would enable the egress router\n   to modify the\
    \ QS TTL and QS Nonce so that it appeared that all the\n   routers along the path\
    \ had approved the request.  There does not\n   appear to be any protection against\
    \ a colluding ingress and egress\n   router.  Even if an intermediate router had\
    \ deleted the Quick-Start\n   Option from the packet, the ingress router could\
    \ have sent the\n   Quick-Start Option to the egress router out-of-band, with\
    \ the egress\n   router inserting the Quick-Start Option, with a modified QS TTL\n\
    \   field, back in the packet.\n   However, unlike ECN, there is somewhat less\
    \ of an incentive for\n   cooperating ingress and egress routers to collude to\
    \ falsely modify\n   the Quick-Start Request so that it appears to have been approved\
    \ by\n   all the routers along the path.  With ECN, a colluding ingress router\n\
    \   could falsely mark a packet as ECN-capable, with the colluding egress\n  \
    \ router returning the ECN field in the IP header to its original non-\n   ECN-capable\
    \ codepoint, and congested routers along the path could\n   have been fooled into\
    \ not dropping that packet.  This collusion would\n   give an unfair competitive\
    \ advantage to the traffic protected by the\n   colluding ingress and egress routers.\n\
    \   In contrast, with Quick-Start, the collusion of the ingress and\n   egress\
    \ routers to make it falsely appear that a Quick-Start Request\n   was approved\
    \ sometimes would give an advantage to the traffic covered\n   by that collusion,\
    \ and sometimes would give a disadvantage, depending\n   on the details of the\
    \ scenario.  If some router along the path really\n   does not have enough available\
    \ bandwidth to approve the Quick-Start\n   Request, then Quick-Start packets sent\
    \ as a result of the falsely\n   approved request could be dropped in the network,\
    \ to the possible\n   disadvantage of the connection.  Thus, while the ingress\
    \ and egress\n   routers could collude to prevent intermediate routers from denying\
    \ a\n   Quick-Start Request, it would not always be to the connection's\n   advantage\
    \ for this to happen.  One defense against such a collusion\n   would be for some\
    \ router between the ingress and egress nodes that\n   denied the request to monitor\
    \ connection performance, penalizing\n   connections that seem to be using Quick-Start\
    \ after a Quick-Start\n   Request was denied, or that are reporting an Approved\
    \ Rate higher\n   than that actually approved by that router.\n   If the congested\
    \ router is ECN-capable, and the colluding ingress and\n   egress routers are\
    \ lying about ECN-capability as well as about\n   Quick-Start, then the result\
    \ could be that the Quick-Start Request\n   falsely appears to the sender to have\
    \ been approved, and the Quick-\n   Start packets falsely appear to the congested\
    \ router to be ECN-\n   capable.  In this case, the colluding routers might succeed\
    \ in giving\n   a competitive advantage to the traffic protected by their collusion\n\
    \   (if no intermediate router is monitoring to catch such misbehavior).\n"
- title: 9.5.  Misbehaving Middleboxes and the IP TTL
  contents:
  - "9.5.  Misbehaving Middleboxes and the IP TTL\n   One possible difficulty is that\
    \ of traffic normalizers [HKP01], or\n   other middleboxes along that path, that\
    \ rewrite IP TTLs in order to\n   foil other kinds of attacks in the network.\
    \  If such a traffic\n   normalizer rewrote the IP TTL, but did not adjust the\
    \ Quick-Start TTL\n   by the same amount, then the sender's mechanism for determining\
    \ if\n   the request was approved by all routers along the path would no\n   longer\
    \ be reliable.  Rewriting the IP TTL could result in false\n   positives (with\
    \ the sender incorrectly believing that the Quick-\n   Start Request was approved)\
    \ as well as false negatives (with the\n   sender incorrectly believing that the\
    \ Quick-Start Request was\n   denied).\n"
- title: 9.6.  Attacks on Quick-Start
  contents:
  - "9.6.  Attacks on Quick-Start\n   As discussed in [SAF06], Quick-Start is vulnerable\
    \ to two kinds of\n   attacks: (1) attacks to increase the routers' processing\
    \ and state\n   load and (2) attacks with bogus Quick-Start Requests to temporarily\n\
    \   tie up available Quick-Start bandwidth, preventing routers from\n   approving\
    \ Quick-Start Requests from other connections.  Routers can\n   protect against\
    \ the first kind of attack by applying a simple limit\n   on the rate at which\
    \ Quick-Start Requests will be considered by the\n   router.\n   The second kind\
    \ of attack, to tie up the available Quick-Start\n   bandwidth, is more difficult\
    \ to defend against.  As discussed in\n   [SAF06], Quick-Start Requests that are\
    \ not going to be used, either\n   because they are from malicious attackers or\
    \ because they are denied\n   by routers downstream, can result in short-term\
    \ `wasting' of\n   potential Quick-Start bandwidth, resulting in routers denying\n\
    \   subsequent Quick-Start Requests that, if approved, would in fact have\n  \
    \ been used.\n   We note that the likelihood of malicious attacks would be minimized\n\
    \   significantly when Quick-Start was deployed in a controlled\n   environment\
    \ such as an intranet, where there was some form of\n   centralized control over\
    \ the users in the system.  We also note that\n   this form of attack could potentially\
    \ make Quick-Start unusable, but\n   it would not do any further damage; in the\
    \ worst case, the network\n   would function as a network without Quick-Start.\n\
    \   [SAF06] considers the potential of Extreme Quick-Start algorithms at\n   routers,\
    \ which keep per-flow state for Quick-Start connections, in\n   protecting the\
    \ availability of Quick-Start bandwidth in the face of\n   frequent, overly large\
    \ Quick-Start Requests.\n"
- title: 9.7.  Simulations with Quick-Start
  contents:
  - "9.7.  Simulations with Quick-Start\n   Quick-Start was added to the NS simulator\
    \ [SH02] by Srikanth\n   Sundarrajan, and additional functionality was added by\
    \ Pasi\n   Sarolahti.  The validation test is at `test-all-quickstart' in the\n\
    \   `tcl/test' directory in NS.  The initial simulation studies from\n   [SH02]\
    \ show a significant performance improvement using Quick-Start\n   for moderate-sized\
    \ flows (between 4 KB and 128 KB) in underutilized\n   environments.  These studies\
    \ are of file transfers, with the\n   improvement measured as the relative increase\
    \ in the overall\n   throughput for the file transfer.  The study shows that potential\n\
    \   improvement from Quick-Start is proportional to the delay-bandwidth\n   product\
    \ of the path.\n   The Quick-Start simulations in [SAF06] explore the following:\
    \ the\n   potential benefit of Quick-Start for the connection, the relative\n\
    \   benefits of different router-based algorithms for approving Quick-\n   Start\
    \ Requests, and the effectiveness of Quick-Start as a function of\n   the senders'\
    \ algorithms for choosing the size of the rate request.\n"
- title: 10.  Implementation and Deployment Issues
  contents:
  - "10.  Implementation and Deployment Issues\n   This section discusses some of\
    \ the implementation issues with Quick-\n   Start.  This section also discusses\
    \ some of the key deployment\n   issues, such as the chicken-and-egg deployment\
    \ problems of mechanisms\n   that have to be deployed in both routers and end\
    \ nodes in order to\n   work, and the problems posed by the wide deployment of\
    \ middleboxes\n   today that block the use of known or unknown IP Options.\n"
- title: 10.1.  Implementation Issues for Sending Quick-Start Requests
  contents:
  - "10.1.  Implementation Issues for Sending Quick-Start Requests\n   Section 4.7\
    \ discusses some of the issues with deciding the initial\n   sending rate to request.\
    \  Quick-Start raises additional issues about\n   the communication between the\
    \ transport protocol and the application,\n   and about the use of past history\
    \ with Quick-Start in the end node.\n   One possibility is that a protocol implementation\
    \ could provide an\n   API for applications to indicate when they want to request\
    \ Quick-\n   Start, and what rate they would like to request.  In the conventional\n\
    \   socket API, this could be a socket option that is set before a\n   connection\
    \ is established.  Some applications, such as those that use\n   TCP for bulk\
    \ transfers, do not have interest in the transmission\n   rate, but they might\
    \ know the amount of data that can be sent\n   immediately.  Based on this, the\
    \ sender implementation could decide\n   whether Quick-Start would be useful,\
    \ and what rate should be\n   requested.\n   We note that when Quick-Start is\
    \ used, the TCP sender is required to\n   save the QS Nonce and the TTL Diff when\
    \ the Quick-Start Request is\n   sent, and to implement an additional timer for\
    \ the paced transmission\n   of Quick-Start packets.\n"
- title: 10.2.  Implementation Issues for Processing Quick-Start Requests
  contents:
  - "10.2.  Implementation Issues for Processing Quick-Start Requests\n   A router\
    \ or other network host must be able to determine the\n   approximate bandwidth\
    \ of its outbound network interfaces in order to\n   process incoming Quick-Start\
    \ rate requests, including those that\n   originate from the host itself.  One\
    \ possibility would be for hosts\n   to rely on configuration information to determine\
    \ link bandwidths;\n   this has the drawback of not being robust to errors in\
    \ configuration.\n   Another possibility would be for network device drivers to\
    \ infer the\n   bandwidth for the interface and to communicate this to the IP\
    \ layer.\n   Particular issues will arise for wireless links with variable\n \
    \  bandwidth, where decisions will have to be made about how frequently\n   the\
    \ host gets updates of the changing bandwidth.  It seems\n   appropriate that\
    \ Quick-Start Requests would be handled particularly\n   conservatively for links\
    \ with variable bandwidth; to avoid cases\n   where Quick-Start Requests are approved,\
    \ the link bandwidth is\n   reduced, and the data packets that are sent end up\
    \ being dropped.\n   Difficult issues also arise for paths with multi-access links\
    \ (e.g.,\n   Ethernet).  Routers or end-nodes with multi-access links should be\n\
    \   particularly conservative in granting Quick-Start Requests.  In\n   particular,\
    \ for some multi-access links, there may be no procedure\n   for an attached node\
    \ to use to determine whether all parts of the\n   multi-access link have been\
    \ underutilized in the recent past.\n"
- title: 10.3.  Possible Deployment Scenarios
  contents:
  - "10.3.  Possible Deployment Scenarios\n   Because of possible problems discussed\
    \ above concerning using Quick-\n   Start over some network paths and the security\
    \ issues discussed in\n   Section 11, the most realistic initial deployment of\
    \ Quick-Start\n   would most likely take place in intranets and other controlled\n\
    \   environments.  Quick-Start is most useful on high bandwidth-delay\n   paths\
    \ that are significantly underutilized.  The primary initial\n   users of Quick-Start\
    \ would likely be in organizations that provide\n   network services to their\
    \ users and also have control over a large\n   portion of the network path.\n\
    \   Quick-Start is not currently intended for ubiquitous deployment in\n   the\
    \ global Internet.  In particular, Quick-Start should not be\n   enabled by default\
    \ in end-nodes or in routers; instead, when Quick-\n   Start is used, it should\
    \ be explicitly enabled by users or system\n   administrators.\n   Below are a\
    \ few examples of networking environments where Quick-\n   Start would potentially\
    \ be useful.  These are the environments that\n   might consider an initial deployment\
    \ of Quick-Start in the routers\n   and end-nodes, where the incentives for routers\
    \ to deploy Quick-\n   Start might be the most clear.\n   * Centrally administrated\
    \ organizational intranets: These intranets\n     often have large network capacity,\
    \ with networks that are\n     underutilized for much of the time [PABL+05]. \
    \ Such intranets might\n     also include high-bandwidth and high-delay paths\
    \ to remote sites.\n     In such an environment, Quick-Start would be of benefit\
    \ to users,\n     and there would be a clear incentive for the deployment of Quick-\n\
    \     Start in routers.  For example, Quick-Start could be quite useful\n    \
    \ in high-bandwidth networks used for scientific computing.\n   * Wireless networks:\
    \ Quick-Start could also be useful in high-delay\n     environments of Cellular\
    \ Wide-Area Wireless Networks, such as the\n     GPRS [BW97] and their enhancements\
    \ and next generations.  For\n     example, GPRS EDGE (Enhanced Data for GSM Evolution)\
    \ is expected to\n     provide wireless bandwidth of up to 384 Kbps (roughly 32\
    \ 1500-byte\n     packets per second) while the GPRS round-trip times range typically\n\
    \     from a few hundred milliseconds to over a second, excluding any\n     possible\
    \ queueing delays in the network [GPAR02].  In addition,\n     these networks\
    \ sometimes have variable additional delays due to\n     resource allocation that\
    \ could be avoided by keeping the connection\n     path constantly utilized, starting\
    \ from initial slow-start.  Thus,\n     Quick-Start could be of significant benefit\
    \ to users in these\n     environments.\n   * Paths over satellite links: Geostationary\
    \ Orbit (GEO) satellite\n     links have one-way propagation delays on the order\
    \ of 250 ms while\n     the bandwidth can be measured in megabits per second [RFC2488].\n\
    \     Because of the considerable bandwidth-delay product on the link,\n     TCP's\
    \ slow-start is a major performance limitation in the beginning\n     of the connection.\
    \  A large initial congestion window would be\n     useful to users of such satellite\
    \ links.\n   * Single-hop paths: Quick-Start should work well over point-to-point\n\
    \     single-hop paths, e.g., from a host to an adjacent server.  Quick-\n   \
    \  Start would work over a single-hop IP path consisting of a multi-\n     access\
    \ link only if the host was able to determine if the path to\n     the next IP\
    \ hop has been significantly underutilized over the\n     recent past.  If the\
    \ multi-access link includes a layer-2 switch,\n     then the attached host cannot\
    \ necessarily determine the status of\n     the other links in the layer-2 network.\n"
- title: 10.4.  A Comparison with the Deployment Problems of ECN
  contents:
  - "10.4.  A Comparison with the Deployment Problems of ECN\n   Given the glacially\
    \ slow rate of deployment of ECN in the Internet to\n   date [MAF05], it is disconcerting\
    \ to note that some of the deployment\n   problems of Quick-Start are even greater\
    \ than those of ECN.  First,\n   unlike ECN, which can be of benefit even if it\
    \ is only deployed on\n   one of the routers along the end-to-end path, a connection's\
    \ use of\n   Quick-Start requires Quick-Start deployment on all of the routers\n\
    \   along the end-to-end path.  Second, unlike ECN, which uses an\n   allocated\
    \ field in the IP header, Quick-Start requires the extra\n   complications of\
    \ an IP Option, which can be difficult to pass through\n   the current Internet\
    \ [MAF05].\n   However, in spite of these issues, there is some hope for the\n\
    \   deployment of Quick-Start, at least in protected corners of the\n   Internet,\
    \ because the potential benefits of Quick-Start to the user\n   are considerably\
    \ more dramatic than those of ECN.  Rather than simply\n   replacing the occasional\
    \ dropped packet by an ECN-marked packet,\n   Quick-Start is capable of dramatically\
    \ increasing the throughput of\n   connections in underutilized environments [SAF06].\n"
- title: 11.  Security Considerations
  contents:
  - "11.  Security Considerations\n   Sections 9.4 and 9.6 discuss the security considerations\
    \ related to\n   Quick-Start.  Section 9.4 discusses the potential abuse of Quick-\n\
    \   Start by senders or receivers lying about whether the request was\n   approved\
    \ or about the approved rate, and of routers in collusion to\n   misuse Quick-Start.\
    \  Section 9.5 discusses potential problems with\n   traffic normalizers that\
    \ rewrite IP TTLs in packet headers.  All\n   these problems could result in the\
    \ sender using a Rate Request that\n   was inappropriately large, or thinking\
    \ that a request was approved\n   when it was in fact denied by at least one router\
    \ along the path.\n   This inappropriate use of Quick-Start could result in congestion\
    \ and\n   an unacceptable level of packet drops along the path.  Such\n   congestion\
    \ could also be part of a Denial of Service attack.\n   Section 9.6 discusses\
    \ a potential attack on the routers' processing\n   and state load from an attack\
    \ of Quick-Start Requests.  Section 9.6\n   also discusses a potential attack\
    \ on the available Quick-Start\n   bandwidth by sending bogus Quick-Start Requests\
    \ for bandwidth that\n   will not, in fact, be used.  While this impacts the global\
    \ usability\n   of Quick-Start, it does not endanger the network as a whole since\
    \ TCP\n   uses standard congestion control if Quick-Start is not available.\n\
    \   Section 4.7.2 discusses the potential problem of packets with Quick-\n   Start\
    \ Requests dropped by middleboxes along the path.\n   As discussed in Section\
    \ 5, for IPv4 IPsec Authentication Header\n   Integrity Check Value (AH ICV) calculation,\
    \ the Quick-Start Option is\n   a mutable IPv4 option and hence completely zeroed\
    \ for AH ICV\n   calculation purposes.  This is also the treatment required by\
    \ RFC\n   4302 for unrecognized IPv4 options.  The IPv6 Quick-Start Option's\n\
    \   IANA-allocated option type indicates that it is a mutable option;\n   hence,\
    \ according to RFC 4302, its option data is required to be\n   zeroed for AH ICV\
    \ computation purposes.  See RFC 4302 for further\n   explanation.\n   Section\
    \ 6.2 discusses possible problems of Quick-Start used by\n   connections carried\
    \ over simple tunnels that are not compatible with\n   Quick-Start.  In this case,\
    \ it is possible that a Quick-Start Request\n   is erroneously considered approved\
    \ by the sender without the routers\n   in the tunnel having individually approved\
    \ the request, causing a\n   false positive.\n   We note two high-order points\
    \ here.  First, the Quick-Start Nonce\n   goes a long way towards preventing large-scale\
    \ cheating.  Second,\n   even if a host occasionally uses Quick-Start when it\
    \ is not approved\n   by the entire network path, the network will not collapse.\
    \  Quick-\n   Start does not remove TCP's basic congestion control mechanisms;\n\
    \   these will kick in when the network is heavily loaded, relegating any\n  \
    \ Quick-Start mistake to a transient.\n"
- title: 12.  IANA Considerations
  contents:
  - "12.  IANA Considerations\n   Quick-Start requires an IP Option and a TCP Option.\n"
- title: 12.1.  IP Option
  contents:
  - "12.1.  IP Option\n   Quick-Start requires both an IPv4 Option Number (Section\
    \ 3.1) and an\n   IPv6 Option Number (Section 3.2).\n   IPv4 Option Number:\n\
    \   Copy Class Number Value Name\n   ---- ----- ------ ----- ----\n      0   \
    \ 00     25    25   QS    - Quick-Start\n   IPv6 Option Number [RFC2460]:\n  \
    \ HEX         act  chg  rest\n   ---         ---  ---  -----\n     6         \
    \ 00   1   00110     Quick-Start\n   For the IPv6 Option Number, the first two\
    \ bits indicate that the IPv6\n   node may skip over this option and continue\
    \ processing the header if\n   it doesn't recognize the option type, and the third\
    \ bit indicates\n   that the Option Data may change en-route.\n   In both cases,\
    \ this document should be listed as the reference\n   document.\n"
- title: 12.2.  TCP Option
  contents:
  - "12.2.  TCP Option\n   Quick-Start requires a TCP Option Number (Section 4.2).\n\
    \   TCP Option Number:\n   Kind Length Meaning\n   ---- ------ ------------------------------\n\
    \     27 8      Quick-Start Response\n   This document should be listed as the\
    \ reference document.\n"
- title: 13.  Conclusions
  contents:
  - "13.  Conclusions\n   We are presenting the Quick-Start mechanism as a simple,\n\
    \   understandable, and incrementally deployable mechanism that would be\n   sufficient\
    \ to allow some connections to start up with large initial\n   rates, or large\
    \ initial congestion windows, in over-provisioned,\n   high-bandwidth environments.\
    \  We expect there will be an increasing\n   number of over-provisioned, high-bandwidth\
    \ environments where the\n   Quick-Start mechanism, or another mechanism of similar\
    \ power, could\n   be of significant benefit to a wide range of traffic.  We are\n\
    \   presenting the Quick-Start mechanism as a request for the community\n   to\
    \ provide feedback and experimentation on issues relating to Quick-\n   Start.\n"
- title: 14.  Acknowledgements
  contents:
  - "14.  Acknowledgements\n   The authors wish to thank Mark Handley for discussions\
    \ of these\n   issues.  The authors also thank the End-to-End Research Group,\
    \ the\n   Transport Services Working Group, and members of IPAM's program on\n\
    \   Large-Scale Communication Networks for both positive and negative\n   feedback\
    \ on this proposal.  We thank Srikanth Sundarrajan for the\n   initial implementation\
    \ of Quick-Start in the NS simulator, and for\n   the initial simulation study.\
    \  Many thanks to David Black and Joe\n   Touch for extensive feedback on Quick-Start\
    \ and IP tunnels.  We also\n   thank Mohammed Ashraf, John Border, Bob Briscoe,\
    \ Martin Duke, Tom\n   Dunigan, Mitchell Erblich, Gorry Fairhurst, John Heidemann,\
    \ Paul\n   Hyder, Dina Katabi, and Vern Paxson for feedback.  Thanks also to\n\
    \   Gorry Fairhurst for the suggestion of adding the QS Nonce to the\n   Report\
    \ of Approved Rate.\n   The version of the QS Nonce in this document is based\
    \ on a proposal\n   from Guohan Lu [L05].  Earlier versions of this document contained\
    \ an\n   eight-bit QS Nonce, and subsequent versions discussed the possibility\n\
    \   of a four-bit QS Nonce.\n   This document builds upon the concepts described\
    \ in [RFC3390],\n   [AHO98], [RFC2415], and [RFC3168].  Some of the text on Quick-Start\n\
    \   in tunnels was borrowed directly from RFC 3168.\n   This document is the development\
    \ of a proposal originally by Amit\n   Jain for Initial Window Discovery.\n"
- title: Appendix A.  Related Work
  contents:
  - "Appendix A.  Related Work\n   The Quick-Start proposal, taken together with HighSpeed\
    \ TCP [RFC3649]\n   or other transport protocols for high-bandwidth transfers,\
    \ could go a\n   significant way towards extending the range of performance for\
    \ best-\n   effort traffic in the Internet.  However, there are many things that\n\
    \   the Quick-Start proposal would not accomplish.  Quick-Start is not a\n   congestion\
    \ control mechanism, and would not help in making more\n   precise use of the\
    \ available bandwidth -- that is, of achieving the\n   goal of high throughput\
    \ with low delay and low packet-loss rates.\n   Quick-Start would not give routers\
    \ more control over the decrease\n   rates of active connections.\n   In addition,\
    \ any evaluation of Quick-Start must include a discussion\n   of the relative\
    \ benefits of approaches that use no explicit\n   information from routers, and\
    \ of approaches that use more fine-\n   grained feedback from routers as part\
    \ of a larger congestion control\n   mechanism.  We discuss several classes of\
    \ proposals in the sections\n   below.\n"
- title: A.1.  Fast Start-Ups without Explicit Information from Routers
  contents:
  - "A.1.  Fast Start-Ups without Explicit Information from Routers\n   One possibility\
    \ would be for senders to use information from the\n   packet streams to learn\
    \ about the available bandwidth, without\n   explicit information from routers.\
    \  These techniques would not allow\n   a start-up as fast as that available from\
    \ Quick-Start in an\n   underutilized environment; one already has to have sent\
    \ some packets\n   in order to use the packet stream to learn about available\
    \ bandwidth.\n   However, these techniques could allow a start-up considerably\
    \ faster\n   than the current Slow-Start.  While it seems clear that approaches\n\
    \   *without* explicit feedback from the routers will be strictly less\n   powerful\
    \ than is possible *with* explicit feedback, it is also\n   possible that approaches\
    \ that are more aggressive than Slow-Start are\n   possible without the complexity\
    \ involved in obtaining explicit\n   feedback from routers.\n   Periodic packet\
    \ streams:\n   [JD02] explores the use of periodic packet streams to estimate\
    \ the\n   available bandwidth along a path.  The idea is that the one-way\n  \
    \ delays of a periodic packet stream show an increasing trend when the\n   stream's\
    \ rate is higher than the available bandwidth (due to an\n   increasing queue).\
    \  While [JD02] states that the proposed mechanism\n   does not cause significant\
    \ increases in network utilization, losses,\n   or delays when done by one flow\
    \ at a time, the approach could be\n   problematic if conducted concurrently by\
    \ a number of flows.  [JD02]\n   also gives an overview of some of the earlier\
    \ work on inferring the\n   available bandwidth from packet trains.\n   Swift-Start:\n\
    \   The Swift Start proposal from [PRAKS02] combines packet-pair and\n   packet-pacing\
    \ techniques.  An initial congestion window of four\n   segments is used to estimate\
    \ the available bandwidth along the path.\n   This estimate is then used to dramatically\
    \ increase the congestion\n   window during the second RTT of data transmission.\n\
    \   SPAND:\n   In the TCP/SPAND proposal from [ZQK00] for speeding up short data\n\
    \   transfers, network performance information would be shared among many\n  \
    \ co-located hosts to estimate each connection's fair share of the\n   network\
    \ resources.  Based on such estimation and the transfer size,\n   the TCP sender\
    \ would determine the optimal initial congestion window\n   size.  The design\
    \ for TCP/SPAND uses a performance gateway that\n   monitors all traffic entering\
    \ and leaving an organization's network.\n   Sharing information among TCP connections:\n\
    \   The Congestion Manager [RFC3124] and TCP control block sharing\n   [RFC2140]\
    \ both propose sharing congestion information among multiple\n   TCP connections\
    \ with the same endpoints.  With the Congestion\n   Manager, a new TCP connection\
    \ could start with a high initial cwnd,\n   if it was sharing the path and the\
    \ cwnd with a pre-existing TCP\n   connection to the same destination that had\
    \ already obtained a high\n   congestion window.  RFC 2140 discusses ensemble\
    \ sharing, where an\n   established connection's congestion window could be `divided\
    \ up' to\n   be shared with a new connection to the same host.  However, neither\n\
    \   of these approaches addresses the case of a connection to a new\n   destination,\
    \ with no existing or recent connection (and therefore\n   congestion control\
    \ state) to that destination.\n   While continued research on the limits of the\
    \ ability of TCP and\n   other transport protocols to learn of available bandwidth\
    \ without\n   explicit feedback from the router seems useful, we note that there\n\
    \   are several fundamental advantages of explicit feedback from routers.\n  \
    \ (1) Explicit feedback is faster than implicit feedback:\n       One advantage\
    \ of explicit feedback from the routers is that it\n       allows the transport\
    \ sender to reliably learn of available\n       bandwidth in one round-trip time.\n\
    \   (2) Explicit feedback is more reliable than implicit feedback:\n       Techniques\
    \ that attempt to assess the available bandwidth at\n       connection start-up\
    \ using implicit techniques are more error-\n       prone than techniques that\
    \ involve every element in the network\n       path.  While explicit information\
    \ from the network can be wrong,\n       it has a much better chance of being\
    \ appropriate than an end-host\n       trying to *estimate* an appropriate sending\
    \ rate using \"block\n       box\" probing techniques of the entire path.\n"
- title: A.2.  Optimistic Sending without Explicit Information from Routers
  contents:
  - "A.2.  Optimistic Sending without Explicit Information from Routers\n   Another\
    \ possibility that has been suggested [S02] is for the sender\n   to start with\
    \ a large initial window without explicit permission from\n   the routers and\
    \ without bandwidth estimation techniques and for the\n   first packet of the\
    \ initial window to contain information, such as\n   the size or sending rate\
    \ of the initial window.  The proposal would\n   be that congested routers would\
    \ use this information in the first\n   data packet to drop or delay many or all\
    \ of the packets from that\n   initial window.  In this way, a flow's optimistically\
    \ large initial\n   window would not force the router to drop packets from competing\n\
    \   flows in the network.  Such an approach would seem to require some\n   mechanism\
    \ for the sender to ensure that the routers along the path\n   understood the\
    \ mechanism for marking the first packet of a large\n   initial window.\n   Obviously,\
    \ there would be a number of questions to consider about an\n   approach of optimistic\
    \ sending.\n   (1) Incremental deployment:\n       One question would be the potential\
    \ complications of incremental\n       deployment, where some of the routers along\
    \ the path might not\n       understand the packet information describing the\
    \ initial window.\n   (2) Congestion collapse:\n       There could also be concerns\
    \ about congestion collapse if many\n       flows used large initial windows,\
    \ many packets were dropped from\n       optimistic initial windows, and many\
    \ congested links ended up\n       carrying packets that are only going to be\
    \ dropped downstream.\n   (3) Distributed Denial of Service attacks:\n       A\
    \ third question would be the potential role of optimistic\n       senders in\
    \ amplifying the damage done by a Distributed Denial of\n       Service (DDoS)\
    \ attack (assuming attackers use compliant\n       congestion control in the hopes\
    \ of \"flying under the radar\").\n   (4) Performance hits if a packet is dropped:\n\
    \       A fourth issue would be to quantify the performance hit to the\n     \
    \  connection when a packet is dropped from one of the initial\n       windows.\n"
- title: A.3.  Fast Start-Ups with Other Information from Routers
  contents:
  - "A.3.  Fast Start-Ups with Other Information from Routers\n   There have been\
    \ several proposals somewhat similar to Quick-Start,\n   where the transport protocol\
    \ collects explicit information from the\n   routers along the path.\n   An IP\
    \ Option about the free buffer size:\n   In related work, [P00] investigates the\
    \ use of a slightly different\n   IP option for TCP connections to discover the\
    \ available bandwidth\n   along the path.  In that proposal, the IP option would\
    \ query the\n   routers along the path about the smallest available free buffer\
    \ size.\n   Also, the IP option would have been sent after the initial SYN\n \
    \  exchange, when the TCP sender already had an estimate of the round-\n   trip\
    \ time.\n   The Performance Transparency Protocol:\n   The Performance Transparency\
    \ Protocol (PTP) includes a proposal for a\n   single PTP packet that would collect\
    \ information from routers along\n   the path from the sender to the receiver\
    \ [W00].  For example, a\n   single PTP packet could be used to determine the\
    \ bottleneck bandwidth\n   along a path.\n   ETEN:\n   Additional proposals for\
    \ end nodes to collect explicit information\n   from routers include one variant\
    \ of Explicit Transport Error\n   Notification (ETEN), which includes a cumulative\
    \ mechanism to notify\n   endpoints of aggregate congestion statistics along the\
    \ path [KAPS02].\n   (A second variant in [KSEPA04] does not depend on cumulative\n\
    \   congestion statistics from the network.)\n"
- title: A.4.  Fast Start-Ups with more Fine-Grained Feedback from Routers
  contents:
  - "A.4.  Fast Start-Ups with more Fine-Grained Feedback from Routers\n   Proposals\
    \ for more fine-grained, congestion-related feedback from\n   routers include\
    \ XCP [KHR02], MaxNet [MaxNet], and AntiECN marking\n   [K03].  Appendix B.6 discusses\
    \ in more detail the relationship\n   between Quick-Start and proposals for more\
    \ fine-grained per-packet\n   feedback from routers.\n   XCP:\n   Proposals, such\
    \ as XCP for new congestion control mechanisms based on\n   more feedback from\
    \ routers, are more powerful than Quick-Start, but\n   also are more complex to\
    \ understand and more difficult to deploy.\n   XCP routers maintain no per-flow\
    \ state, but provide more fine-\n   grained feedback to end-nodes than the one-bit\
    \ congestion feedback of\n   ECN.  The per-packet feedback from XCP can be positive\
    \ or negative,\n   and specifies the increase or decrease in the sender's congestion\n\
    \   window when this packet is acknowledged.  XCP is a full-fledge\n   congestion\
    \ control scheme, whereas Quick-Start represents a quick\n   check to determine\
    \ if the network path is significantly underutilized\n   such that a connection\
    \ can start faster and then fall back to TCP's\n   standard congestion control\
    \ algorithms.\n   AntiECN:\n   The AntiECN proposal is for a single bit in the\
    \ packet header that\n   routers could set to indicate that they are underutilized.\
    \  For each\n   TCP ACK arriving at the sender indicating that a packet has been\n\
    \   received with the Anti-ECN bit set, the sender would be able to\n   increase\
    \ its congestion window by one packet, as it would during\n   slow-start.\n"
- title: A.5.  Fast Start-Ups with Lower-Than-Best-Effort Service
  contents:
  - "A.5.  Fast Start-Ups with Lower-Than-Best-Effort Service\n   There have been\
    \ proposals for routers to provide a Lower Effort\n   differentiated service that\
    \ would be lower than best effort\n   [RFC3662].  Such a service could carry traffic\
    \ for which delivery is\n   strictly optional, or could carry traffic that is\
    \ important but that\n   has low priority in terms of time.  Because it does not\
    \ interfere\n   with best-effort traffic, Lower Effort services could be used\
    \ by\n   transport protocols that start up faster than slow-start.  For\n   example,\
    \ [SGF05] is a proposal for the transport sender to use low-\n   priority traffic\
    \ for much of the initial traffic, with routers\n   configured to use strict priority\
    \ queueing.\n   A separate but related issue is that of below-best-effort TCP,\n\
    \   variants of TCP that would not rely on Lower Effort services in the\n   network,\
    \ but would approximate below-best-effort traffic by detecting\n   and responding\
    \ to congestion sooner than standard TCP.  TCP Nice\n   [V02] and TCP Low Priority\
    \ (TCP-LP) [KK03] are two such proposals for\n   below-best-effort TCP, with the\
    \ purpose of allowing TCP connections\n   to use the bandwidth unused by TCP and\
    \ other traffic in a non-\n   intrusive fashion.  Both TCP Nice and TCP Low Priority\
    \ use the\n   default slow-start mechanisms of TCP.\n   We note that Quick-Start\
    \ is quite different from either a Lower-\n   Effort service or a below-best-effort\
    \ variant of TCP.  Unlike these\n   proposals, Quick-Start is intended to be useful\
    \ for best-effort\n   traffic that wishes to receive at least as much bandwidth\
    \ as\n   competing best-effort connections.\n"
- title: Appendix B.  Design Decisions
  contents:
  - 'Appendix B.  Design Decisions

    '
- title: 'B.1.  Alternate Mechanisms for the Quick-Start Request: ICMP and RSVP'
  contents:
  - "B.1.  Alternate Mechanisms for the Quick-Start Request: ICMP and RSVP\n   This\
    \ document has proposed using an IP Option for the Quick-Start\n   Request from\
    \ the sender to the receiver, and using transport\n   mechanisms for the Quick-Start\
    \ Response from the receiver back to the\n   sender.  In this section, we discuss\
    \ alternate mechanisms, and\n   consider whether ICMP ([RFC792], [RFC4443]) or\
    \ RSVP [RFC2205]\n   protocols could be used for delivering the Quick-Start Request.\n"
- title: B.1.1.  ICMP
  contents:
  - "B.1.1.  ICMP\n   Being a control protocol used between Internet nodes, one could\
    \ argue\n   that ICMP is the ideal method for requesting permission for faster\n\
    \   start-up from routers.  The ICMP header is above the IP header.\n   Quick-Start\
    \ could be accomplished with ICMP as follows: If the ICMP\n   protocol is used\
    \ to implement Quick-Start, the equivalent of the\n   Quick-Start IP option would\
    \ be carried in the ICMP header of the ICMP\n   Quick-Start Request.  The ICMP\
    \ Quick-Start Request would have to pass\n   by the routers on the path to the\
    \ receiver, possibly using the IP\n   Router Alert option [RFC2113].  A router\
    \ that approves the Quick-\n   Start Request would take the same actions as in\
    \ the case with the\n   Quick-Start IP Option, and forward the packet to the next\
    \ router\n   along the path.  A router that does not approve the Quick-Start\n\
    \   Request, even with a decreased value for the Requested Rate, would\n   delete\
    \ the ICMP Quick-Start Request, and send an ICMP Reply to the\n   sender that\
    \ the request was not approved.  If the ICMP Reply was\n   dropped in the network,\
    \ and did not reach the receiver, the sender\n   would still know that the request\
    \ was not approved from the absence\n   of feedback from the receiver.  If the\
    \ ICMP Quick-Start Request was\n   dropped in the network due to congestion, the\
    \ sender would assume\n   that the request was not approved.  The ICMP message\
    \ would need the\n   source and destination port numbers for demultiplexing at\
    \ the end\n   nodes.  If the ICMP Quick-Start Request reached the receiver, the\n\
    \   receiver would use transport-level or application-level mechanisms to\n  \
    \ send a response to the sender, exactly as with the IP Option.\n   One benefit\
    \ of using ICMP would be that the delivery of the TCP SYN\n   packet or other\
    \ initial packet would not be delayed by IP option\n   processing at routers.\
    \  A greater advantage is that if middleboxes\n   were blocking packets with Quick-Start\
    \ Requests, using the Quick-\n   Start Request in a separate ICMP packet would\
    \ mean that the middlebox\n   behavior would not affect the connection as a whole.\
    \  (To get this\n   robustness to middleboxes with TCP using an IP Quick-Start\
    \ Option,\n   one would have to have a TCP-level Quick-Start Request packet that\n\
    \   could be sent concurrently with, but separately from, the TCP SYN\n   packet.)\n\
    \   However, there are a number of disadvantages to using ICMP.  Some\n   firewalls\
    \ and middleboxes may not forward the ICMP Quick-Start\n   Request packets.  (If\
    \ an ICMP Reply packet from a router to the\n   sender is dropped in the network,\
    \ the sender would still know that\n   the request was not approved, as stated\
    \ earlier, so this would not be\n   as serious of a problem.)  In addition, it\
    \ would be difficult, if not\n   impossible, for a router in the middle of an\
    \ IP tunnel to deliver an\n   ICMP Reply packet to the actual source, for example,\
    \ when the inner\n   IP header is encrypted, as in IPsec ESP tunnel mode [RFC4301].\n\
    \   Again, however, the ICMP Reply packet would not be essential to the\n   correct\
    \ operation of ICMP Quick-Start.\n   Unauthenticated out-of-band ICMP messages\
    \ could enable some types of\n   attacks by third-party malicious hosts that are\
    \ not possible when the\n   control information is carried in-band with the IP\
    \ packets that can\n   only be altered by the routers on the connection path.\
    \  Finally, as a\n   minor concern, using ICMP would cause a small amount of additional\n\
    \   traffic in the network, which is not the case when using IP options.\n"
- title: B.1.2.  RSVP
  contents:
  - "B.1.2.  RSVP\n   With some modifications, RSVP [RFC2205] could be used as a bearer\n\
    \   protocol for carrying the Quick-Start Requests.  Because routers are\n   expected\
    \ to process RSVP packets more extensively than the normal\n   transport protocol\
    \ IP packets, delivering a Quick-Start rate request\n   using an RSVP packet would\
    \ seem an appealing choice.  However, Quick-\n   Start with RSVP would require\
    \ a few differences from the conventional\n   usage of RSVP.  Quick-Start would\
    \ not require periodical refreshing\n   of soft state, because Quick-Start does\
    \ not require per-connection\n   state in routers.  Quick-Start Requests would\
    \ be transmitted\n   downstream from the sender to receiver in the RSVP Path messages,\n\
    \   which is different from the conventional RSVP model where the\n   reservations\
    \ originate from the receiver.  Furthermore, the Quick-\n   Start Response would\
    \ be sent using the transport-level or\n   application-level mechanisms, instead\
    \ of using the RSVP Resv message.\n   If RSVP was used for carrying a Quick-Start\
    \ Request, a new \"Quick-\n   Start Request\" class object would be included in\
    \ the RSVP Path\n   message that is sent from the sender to receiver.  The object\
    \ would\n   contain the rate request field in addition to the common length and\n\
    \   type fields.  The Send_TTL field in the RSVP common header could be\n   used\
    \ as the equivalent of the QS TTL field.  The Quick-Start capable\n   routers\
    \ along the path would inspect the Quick-Start Request object\n   in the RSVP\
    \ Path message, decrement Send_TTL, and adjust the rate\n   request field if needed.\
    \  If an RSVP router did not understand the\n   Quick-Start Request object, it\
    \ would reject the entire RSVP message\n   and send an RSVP PathErr message back\
    \ to the sender.  When an RSVP\n   message with the Quick-Start Request object\
    \ reaches the receiver, the\n   receiver sends a Quick-Start Reply message in\
    \ the corresponding\n   transport protocol header in the same way as described\
    \ in the context\n   of IP options earlier.  If the RSVP message with the Quick-Start\n\
    \   Request object was dropped along the path, the transport sender would\n  \
    \ simply proceed with the normal congestion control procedures.\n   Much of the\
    \ discussion about benefits and drawbacks of using ICMP for\n   making the Quick-Start\
    \ Request also applies to the RSVP case.  If the\n   Quick-Start Request was transmitted\
    \ in a separate packet instead of\n   as an IP option, the transport protocol\
    \ packet delivery would not be\n   delayed due to IP option processing at the\
    \ routers, and the initial\n   transport packets would reach their destination\
    \ more reliably.  The\n   possible disadvantages of using ICMP and RSVP are also\
    \ expected to be\n   similar: middleboxes in the network may not be able to forward\
    \ the\n   Quick-Start Request messages, and the IP tunnels might cause problems\n\
    \   for processing the Quick-Start Requests.\n"
- title: B.2.  Alternate Encoding Functions
  contents:
  - "B.2.  Alternate Encoding Functions\n   In this section, we look at alternate\
    \ encoding functions for the Rate\n   Request field in the Quick-Start Request.\
    \  The main requirements for\n   this function is that it should have a sufficiently\
    \ wide range for\n   the requested rate.  There is no need for overly fine-grained\n\
    \   precision in the requested rate.  Similarly, while it would be\n   attractive\
    \ for the encoding function to be easily computable, it is\n   also possible for\
    \ end-nodes and routers to simply store the table\n   giving the mapping between\
    \ the value N in the Rate Request field, and\n   the actual rate request f(N).\
    \  In this section, we consider possible\n   encoding methods for Rate Request\
    \ fields of different sizes,\n   including four-bit, eight-bit, and larger Rate\
    \ Request fields.\n   Linear functions:\n   One possible proposal would be for\
    \ the Rate Request field to be\n   formatted in bits per second, scaled so that\
    \ one unit equals M Kbps,\n   for some fixed value of M.  Thus, for the value\
    \ N in the Rate Request\n   field, the requested rate would be M*N Kbps.\n   Powers\
    \ of two:\n   If a granularity of factors of two is sufficient for the Rate\n\
    \   Request, then the encoding function with the most range would be for\n   the\
    \ requested rate to be K*2^N; for N, the value in the Rate Request\n   field;\
    \ and for K, some constant.  For N=0, the rate request would be\n   set to zero,\
    \ regardless of the encoding function.  For example, for\n   K=40,000 and an eight-bit\
    \ Rate Request field, the request range would\n   be from 80 Kbps to 40*2^255\
    \ Kbps.  This clearly would be an\n   unnecessarily large request range.\n   For\
    \ a four-bit Rate Request field, the upper limit on the rate\n   request is 1.3\
    \ Gbps.  It seems to us that an upper limit of 1.3 Gbps\n   would be fine for\
    \ the Quick-Start rate request, and that connections\n   wishing to start up with\
    \ a higher initial sending rate should be\n   encouraged to use other mechanisms,\
    \ such as the explicit reservation\n   of bandwidth.  If an upper limit of 1.3\
    \ Gbps was not acceptable, then\n   five or six bits could be used for the Rate\
    \ Request field.\n   The lower limit of 80 Kbps could be useful for flows with\
    \ round-trip\n   times of a second or more.  For a flow with a round-trip time\
    \ of one\n   second, as is typical in some wireless networks, the TCP initial\n\
    \   window of 4380 bytes allowed by [RFC3390] (given appropriate packet\n   sizes)\
    \ would translate to an initial sending rate of 35 Kbps.  Thus,\n   for TCP flows,\
    \ a rate request of 80 Kbps could be useful for some\n   flows with large round-trip\
    \ times.\n   The lower limit of 80 Kbps could also be useful for some non-TCP\n\
    \   flows that send small packets, with at most one small packet every 10\n  \
    \ ms.  A rate request of 80 Kbps would translate to a rate of a hundred\n   100-byte\
    \ packets per second (including packet headers).  While some\n   small-packet\
    \ flows with large round-trip times might find a smaller\n   rate request of 40\
    \ Kbps to be useful, our assumption is that a lower\n   limit of 80 Kbps on the\
    \ rate request will be generally sufficient.\n   Again, if the lower limit of\
    \ 80 kbps was not acceptable, then extra\n   bits could be used for the Rate Request\
    \ field.\n   If the granularity of factors of two was too coarse, then the\n \
    \  encoding function could use a base less than two.  An alternate form\n   for\
    \ the encoding function would be to use a hybrid of linear and\n   exponential\
    \ functions.\n   A mantissa and exponent representation:\n   Section 4.4 of [B05]\
    \ suggests a mantissa and exponent representation\n   for the Quick-Start encoding\
    \ function.  With e and f as the binary\n   numbers in the exponent and mantissa\
    \ fields, and with 0 <= f < 1,\n   this would represent the rate (1+f)*2^e.  [B05]\
    \ suggests a mantissa\n   field for f of 8, 16, or 24 bits, with an exponent field\
    \ for e of 8\n   bits.  This representation would allow larger rate requests,\
    \ with an\n   encoding that is less coarse than the powers-of-two encoding used\
    \ in\n   this document.\n   Constraints of the transport protocol:\n   We note\
    \ that the Rate Request is also constrained by the abilities of\n   the transport\
    \ protocol.  For example, for TCP with Window Scaling,\n   the maximum window\
    \ is at most 2**30 bytes.  For a TCP connection with\n   a long, 1 second round-trip\
    \ time, this would give a maximum sending\n   rate of 1.07 Gbps.\n"
- title: 'B.3.  The Quick-Start Request: Packets or Bytes?'
  contents:
  - "B.3.  The Quick-Start Request: Packets or Bytes?\n   One of the design questions\
    \ is whether the Rate Request field should\n   be in bytes per second or in packets\
    \ per second.  We discuss this\n   separately from the perspective of the transport,\
    \ and from the\n   perspective of the router.\n   For TCP, the results from the\
    \ Quick-Start Request are translated into\n   a congestion window in bytes, using\
    \ the measured round-trip time and\n   the MSS.  This window applies only to the\
    \ bytes of data payload, and\n   does not include the bytes in the TCP or IP packet\
    \ headers.  Other\n   transport protocols would conceivably use the Quick-Start\
    \ Request\n   directly in packets per second, or could translate the Quick-Start\n\
    \   Request to a congestion window in packets.\n   The assumption of this document\
    \ is that the router only approves the\n   Quick-Start Request when the output\
    \ link is significantly\n   underutilized.  For this, the router could measure\
    \ the available\n   bandwidth in bytes per second, or could convert between packets\
    \ and\n   bytes by some mechanism.\n   If the Quick-Start Request was in bytes\
    \ per second, and applied only\n   to the data payload, then the router would\
    \ have to convert from bytes\n   per second of data payload, to bytes per second\
    \ of packets on the\n   wire.  If the Rate Request field was in bytes per second,\
    \ and the\n   sender ended up using very small packets, this could translate to\
    \ a\n   significantly larger number in terms of bytes per second on the wire.\n\
    \   Therefore, for a Quick-Start Request in bytes per second, it makes\n   most\
    \ sense for this to include the transport and IP headers as well\n   as the data\
    \ payload.  Of course, this will be, at best, a rough\n   approximation on the\
    \ part of the sender; the transport-level sender\n   might not know the size of\
    \ the transport and IP headers in bytes, and\n   might know nothing at all about\
    \ the separate headers added in IP\n   tunnels downstream.  This rough estimate\
    \ seems sufficient, however,\n   given the overall lack of fine precision in Quick-Start\n\
    \   functionality.\n   It has been suggested that the router could possibly use\
    \ information\n   from the MSS option in the TCP packet header of the SYN packet\
    \ to\n   convert the Quick-Start Request from packets per second to bytes per\n\
    \   second, or vice versa.  This would be problematic for several\n   reasons.\
    \  First, if IPsec is used, the TCP header will be encrypted.\n   Second, the\
    \ MSS option is defined as the maximum MSS that the TCP\n   sender expects to\
    \ receive, not the maximum MSS that the TCP sender\n   plans to send [RFC793].\
    \  However, it is probably often the case that\n   this MSS also applies as an\
    \ upper bound on the MSS used by the TCP\n   sender in sending.\n   We note that\
    \ the sender does not necessarily know the Path MTU when\n   the Quick-Start Request\
    \ is sent, or when the initial window of data\n   is sent.  Thus, with IPv4, packets\
    \ from the initial window could end\n   up being fragmented in the network if\
    \ the \"Don't Fragment\" (DF) bit\n   is not set [RFC1191].  A Rate Request in\
    \ bytes per second is\n   reasonably robust to fragmentation.  Clearly, a Rate\
    \ Request in\n   packets per second is less robust in the presence of fragmentation.\n\
    \   Interactions between larger initial windows and Path MTU Discovery\n   are\
    \ discussed in more detail in RFC 3390 [RFC3390].\n   For a Quick-Start Request\
    \ in bytes per second, the transport senders\n   would have the additional complication\
    \ of estimating the bandwidth\n   usage added by the packet headers.\n   We have\
    \ chosen a Rate Request field in bytes per second rather than\n   in packets per\
    \ second because it seems somewhat more robust,\n   particularly to routers.\n"
- title: 'B.4.  Quick-Start Semantics: Total Rate or Additional Rate?'
  contents:
  - "B.4.  Quick-Start Semantics: Total Rate or Additional Rate?\n   For a Quick-Start\
    \ Request sent in the middle of a connection, there\n   are two possible semantics\
    \ for the Rate Request field, as follows:\n   (1) Total Rate: The requested Rate\
    \ Request is the requested total\n       rate for the connection, including the\
    \ current rate; or\n   (2) Additional Rate: The requested Rate Request is the\
    \ requested\n       increase in the total rate for that connection, over and above\n\
    \       the current sending rate.\n   When the Quick-Start Request is sent after\
    \ an idle period, the\n   current sending rate is zero, and there is no difference\
    \ between (1)\n   and (2) above.  However, a Quick-Start Request can also be sent\
    \ in\n   the middle of a connection that has not been idle, e.g., after a\n  \
    \ mobility event, or after an application-limited period when the\n   sender is\
    \ suddenly ready to send at a much higher rate.  In this\n   case, there can be\
    \ a significant difference between (1) and (2)\n   above.  In this section, we\
    \ consider briefly the tradeoffs between\n   these two options, and explain why\
    \ we have chosen the `Total Rate'\n   semantics.\n   The Total Rate semantics\
    \ makes it easier for routers to \"allocate\"\n   the same rate to all connections.\
    \  This lends itself to fairness, and\n   improves convergence times between old\
    \ and new connections.  With the\n   Additional Rate semantics, the router would\
    \ not necessarily know the\n   current sending rates of the flows requesting additional\
    \ rates, and\n   therefore would not have sufficient information to use fairness\
    \ as a\n   metric in granting rate requests.  With the Total Rate semantics, the\n\
    \   fairness is automatic; the router is not granting rate requests for\n   *additional*\
    \ bandwidth without knowing the current sending rates of\n   the different flows.\n\
    \   The Additional Rate semantics also lends itself to gaming by the\n   connection,\
    \ with senders sending frequent Quick-Start Requests in the\n   hope of gaining\
    \ a higher rate.  If the router is granting the same\n   maximum rate for all\
    \ rate requests, then there is little benefit to a\n   connection of sending a\
    \ rate request over and over again.  However,\n   if the router is granting an\
    \ *additional* rate with each rate\n   request, over and above the current sending\
    \ rate, then it is in a\n   connection's interest to send as many rate requests\
    \ as possible, even\n   if very few of them are, in fact, granted.\n   Appendix\
    \ E discusses a Report of Current Sending Rate as one possible\n   function in\
    \ the Quick-Start Option.  However, we have not\n   standardized this possible\
    \ use at this time.\n"
- title: B.5.  Alternate Responses to the Loss of a Quick-Start Packet
  contents:
  - "B.5.  Alternate Responses to the Loss of a Quick-Start Packet\n   Section 4.6\
    \ discusses TCP's response to the loss of a Quick-Start\n   packet in the initial\
    \ window.  This section discusses several\n   alternate responses.\n   One possible\
    \ alternative to reverting to the default Slow-Start after\n   the loss of a Quick-Start\
    \ packet from the initial window would have\n   been to halve the congestion window\
    \ and continue in congestion\n   avoidance.  However, we note that this would\
    \ not have been a\n   desirable response for either the connection or for the\
    \ network as a\n   whole.  The packet loss in the initial window indicates that\
    \ Quick-\n   Start failed in finding an appropriate congestion window, meaning\n\
    \   that the congestion window after halving may easily also be wrong.\n   A more\
    \ moderate alternate would be to continue in congestion\n   avoidance from a window\
    \ of (W-D)/2, where W is the Quick-Start\n   congestion window, and D is the number\
    \ of packets dropped or marked\n   from that window.  However, such an approach\
    \ would implicitly assume\n   that the number of Quick-Start packets delivered\
    \ is a good indication\n   of the appropriate available bandwidth for that flow,\
    \ even though\n   other packets from that window were dropped in the network.\
    \  And,\n   further, that using half the number of segments that were\n   successfully\
    \ transmitted is conservative enough to account for the\n   possibly inaccurate\
    \ congestion window indication.  We believe that\n   such an assumption would\
    \ require more analysis at this point,\n   particularly in a network with a range\
    \ of packet dropping mechanisms\n   at the router, and we cannot recommend it\
    \ at this time.\n   Another drawback of approaches that don't revert back to slow-start\n\
    \   when a Quick-Start packet in the initial window is dropped is that\n   such\
    \ approaches could give the TCP receiver a greater incentive to\n   lie about\
    \ the Quick-Start Request.  If the sender reverts to slow-\n   start when a Quick-Start\
    \ packet in the initial window is dropped,\n   this diminishes the benefit a receiver\
    \ would get from a Quick-Start\n   request that resulted in a dropped or ECN-marked\
    \ packet.\n"
- title: B.6.  Why Not Include More Functionality?
  contents:
  - "B.6.  Why Not Include More Functionality?\n   This proposal for Quick-Start is\
    \ a rather coarse-grained mechanism\n   that would allow a connection to use a\
    \ higher sending rate along\n   underutilized paths, but that does not attempt\
    \ to provide a next-\n   generation transport protocol or congestion control mechanism,\
    \ and\n   does not attempt the goal of providing very high throughput with very\n\
    \   low delay.  Appendix A.4 discusses a number of proposals (such as\n   XCP,\
    \ MaxNet, and AntiECN) that provide more fine-grained per-packet\n   feedback\
    \ from routers than the current congestion control mechanisms\n   and that attempt\
    \ these more ambitious goals.\n   Compared to proposals such as XCP and AntiECN,\
    \ Quick-Start offers\n   much less control.  Quick-Start does not attempt to provide\
    \ a new\n   congestion control mechanism, but simply to get permission from\n\
    \   routers for a higher sending rate at start-up, or after an idle\n   period.\
    \  Quick-Start can be thought of as an \"anti-congestion-\n   control\" mechanism\
    \ that is only of any use when all the routers along\n   the path are significantly\
    \ underutilized.  Thus, Quick-Start is of no\n   use towards a target of high\
    \ link utilization, or fairness in a\n   high-utilization scenario, or controlling\
    \ queueing delay during high\n   utilization, or anything of the like.\n   At\
    \ the same time, Quick-Start would allow larger initial windows than\n   would\
    \ proposals such as AntiECN, requires less input to routers than\n   XCP (e.g.,\
    \ XCP's cwnd and RTT fields), and would require less\n   frequent feedback from\
    \ routers than any new congestion control\n   mechanism.  Thus, Quick-Start is\
    \ significantly less powerful than\n   proposals for new congestion control mechanisms,\
    \ such as XCP and\n   AntiECN, but as powerful or more powerful in terms of the\
    \ specific\n   issue of allowing larger initial windows.  Also, (we think) it\
    \ is\n   more amenable to incremental deployment in the current Internet.\n  \
    \ We do not discuss proposals such as XCP in detail, but simply note\n   that\
    \ there are a number of open questions.  One question concerns\n   whether there\
    \ is a pressing need for more sophisticated congestion\n   control mechanisms,\
    \ such as XCP, in the Internet.  Quick-Start is\n   inherently a rather crude\
    \ tool that does not deliver assurances about\n   maintaining high link utilization\
    \ and low queueing delay; Quick-Start\n   is designed for use in environments\
    \ that are significantly\n   underutilized, and addresses the single question\
    \ of whether a higher\n   sending rate is allowed.  New congestion control mechanisms\
    \ with more\n   fine-grained feedback from routers could allow faster start-ups\
    \ even\n   in environments with rather high link utilization.  Is this a\n   pressing\
    \ requirement?  Are the other benefits of more fine-grained\n   congestion control\
    \ feedback from routers a pressing requirement?\n   We would argue that even if\
    \ more fine-grained per-packet feedback\n   from routers was implemented, it is\
    \ reasonable to have a separate\n   mechanism, such as Quick-Start, for indicating\
    \ an allowed initial\n   sending rate, or an allowed total sending rate after\
    \ an idle or\n   underutilized period.\n   One difference between Quick-Start\
    \ and current proposals for fine-\n   grained per-packet feedback, such as XCP,\
    \ is that XCP is designed to\n   give robust performance even in the case where\
    \ different packets\n   within a connection routinely follow different paths.\
    \  XCP achieves\n   relatively robust performance in the presence of multipath\
    \ routing by\n   using per-packet feedback, where the feedback carried in a single\n\
    \   packet is about the relative increase or decrease in the rate or\n   window\
    \ to take effect when that particular packet is acknowledged,\n   not about the\
    \ allowed sending rate for the connection as a whole.\n   In contrast, Quick-Start\
    \ sends a single Quick-Start Request, and the\n   answer to that request gives\
    \ the allowed sending rate for an entire\n   window of data.  As a result, Quick-Start\
    \ could be problematic in an\n   environment where some fraction of the packets\
    \ in a window of data\n   take path A, and the rest of the packets take path B;\
    \ for example,\n   the Quick-Start Request could have traveled on path A, while\
    \ half the\n   Quick-Start packets sent in the succeeding round-trip time are\
    \ routed\n   on path B.  We note that [ZDPS01] shows Internet paths to be stable\n\
    \   on the order of RTTs.\n   There are also differences between Quick-Start and\
    \ some of the\n   proposals for per-packet feedback in terms of the number of\
    \ bits of\n   feedback required from the routers to the end-nodes.  Quick-Start\n\
    \   uses four bits of feedback in the rate request field to indicate the\n   allowed\
    \ sending rate.  XCP allocates a byte for per-packet feedback,\n   though there\
    \ has been discussion of variants of XCP with less per-\n   packet feedback. \
    \ This would be more like other proposals, such as\n   anti-ECN, that use a single\
    \ bit of feedback from routers to indicate\n   that the sender can increase as\
    \ fast as slow-starting, in response to\n   this particular packet acknowledgement.\
    \  In general, there is\n   probably considerable power in fine-grained proposals\
    \ with only two\n   bits of feedback, indicating that the sender should decrease,\n\
    \   maintain, or increase the sending rate or window when this packet is\n   acknowledged.\
    \  However, the power of Quick-Start would be\n   considerably limited if it was\
    \ restricted to only two bits of\n   feedback; it seems likely that determining\
    \ the initial sending rate\n   fundamentally requires more bits of feedback from\
    \ routers than does\n   the steady-state, per-packet feedback to increase or decrease\
    \ the\n   sending rate.\n   On a more practical level, one difference between\
    \ Quick-Start and\n   proposals for per-packet feedback is that there are fewer\
    \ open issues\n   with Quick-Start than there would be with a new congestion control\n\
    \   mechanism.  Because Quick-Start is a mechanism for requesting an\n   initial\
    \ sending rate in an underutilized environment, its fairness\n   issues are less\
    \ severe than those of a general congestion control\n   mechanism.  With Quick-Start,\
    \ there is no need for the end nodes to\n   tell the routers the round-trip time\
    \ and congestion window, as is\n   done in XCP; all that is needed is for the\
    \ end nodes to report the\n   requested sending rate.\n   Table 3 provides a summary\
    \ of the differences between Quick-Start and\n   proposals for per-packet congestion\
    \ control feedback.\n                                               Proposals\
    \ for\n                         Quick-Start           Per-Packet Feedback\n  \
    \ +------------------+----------------------+----------------------+\n    Semantics:\
    \        | Allowed sending rate | Change in rate/window,\n                   \
    \   |  per connection.     |  per-packet.\n   +------------------+----------------------+----------------------+\n\
    \    Relationship to   | In addition.         | Replacement.\n    congestion ctrl:\
    \  |                      |\n   +------------------+----------------------+----------------------+\n\
    \    Frequency:        | Start-up, or after   | Every packet.\n              \
    \        |  an idle period.     |\n   +------------------+----------------------+----------------------+\n\
    \    Limitations:      | Only useful on       | General congestion\n         \
    \             |  underutilized paths.|  control mechanism.\n   +------------------+----------------------+----------------------+\n\
    \    Input to routers: | Rate request.        |RTT, cwnd, request (XCP)\n    \
    \                  |                      | None (Anti-ECN).\n   +------------------+----------------------+----------------------+\n\
    \    Bits of feedback: | Four bits for        | A few bits would\n           \
    \           |   rate request.      |  suffice?\n   +------------------+----------------------+----------------------+\n\
    \        Table 3: Differences between Quick-Start and Proposals for\n        \
    \             Fine-Grained Per-Packet Feedback.\n   A separate question concerns\
    \ whether mechanisms, such as Quick-Start,\n   in combination with HighSpeed TCP\
    \ and other changes in progress,\n   would make a significant contribution towards\
    \ meeting some of these\n   needs for new congestion control mechanisms.  This\
    \ could be viewed as\n   a positive step towards meeting some of the more pressing\
    \ current\n   needs with a simple and reasonably deployable mechanism, or\n  \
    \ alternately, as a negative step of unnecessarily delaying more\n   fundamental\
    \ changes.  Without answering this question, we would note\n   that our own approach\
    \ tends to favor the incremental deployment of\n   relatively simple mechanisms,\
    \ as long as the simple mechanisms are\n   not short-term hacks, but mechanisms\
    \ that lead the overall\n   architecture in the fundamentally correct direction.\n"
- title: B.7.  Alternate Implementations for a Quick-Start Nonce
  contents:
  - 'B.7.  Alternate Implementations for a Quick-Start Nonce

    '
- title: B.7.1.  An Alternate Proposal for the Quick-Start Nonce
  contents:
  - "B.7.1.  An Alternate Proposal for the Quick-Start Nonce\n   An alternate proposal\
    \ for the Quick-Start Nonce from [B05] would be\n   for an n-bit field for the\
    \ QS Nonce, with the sender generating a\n   random nonce when it generates a\
    \ Quick-Start Request.  Each router\n   that reduces the Rate Request by r would\
    \ hash the QS nonce r times,\n   using a one-way hash function such as MD5 [RFC1321]\
    \ or the secure\n   hash 1 [SHA1].  The receiver returns the QS nonce to the sender.\n\
    \   Because the sender knows the original value for the nonce, and the\n   original\
    \ rate request, the sender knows the total number of steps s\n   that the rate\
    \ has been reduced.  The sender then hashes the original\n   nonce s times to\
    \ check whether the result is the same as the nonce\n   returned by the receiver.\n\
    \   This alternate proposal for the nonce would be considerably more\n   powerful\
    \ than the QS nonce described in Section 3.4, but it would\n   also require more\
    \ CPU cycles from the routers when they reduce a\n   Quick-Start Request, and\
    \ from the sender in verifying the nonce\n   returned by the receiver.  As reported\
    \ in [B05], routers could\n   protect themselves from processor exhaustion attacks\
    \ by limiting the\n   rate at which they will approve reductions of Quick-Start\
    \ Requests.\n   Both the Function field and the Reserved field in the Quick-Start\n\
    \   Option would allow the extension of Quick-Start to use Quick-Start\n   requests\
    \ with the alternate proposal for the Quick-Start Nonce, if it\n   was ever desired.\n"
- title: B.7.2.  The Earlier Request-Approved Quick-Start Nonce
  contents:
  - "B.7.2.  The Earlier Request-Approved Quick-Start Nonce\n   An earlier version\
    \ of this document included a Request-Approved\n   Quick-Start Nonce (QS Nonce)\
    \ that was initialized by the sender to a\n   non-zero, `random' eight-bit number,\
    \ along with a QS TTL that was\n   initialized to the same value as the TTL in\
    \ the IP header.  The\n   Request-Approved Quick-Start Nonce would have been returned\
    \ by the\n   transport receiver to the transport sender in the Quick-Start\n \
    \  Response.  A router could deny the Quick-Start Request by failing to\n   decrement\
    \ the QS TTL field, by zeroing the QS Nonce field, or by\n   deleting the Quick-Start\
    \ Request from the packet header.  The QS\n   Nonce was included to provide some\
    \ protection against broken\n   downstream routers, or against misbehaving TCP\
    \ receivers that might\n   be inclined to lie about whether the Rate Request was\
    \ approved.  This\n   protection is now provided by the QS Nonce, by the use of\
    \ a random\n   initial value for the QS TTL field, and by Quick-Start-capable\n\
    \   routers hopefully either deleting the Quick-Start Option or zeroing\n   the\
    \ QS TTL and QS Nonce fields when they deny a request.\n   With the old Request-Approved\
    \ Quick-Start Nonce, along with the QS\n   TTL field set to the same value as\
    \ the TTL field in the IP header,\n   the Quick-Start Request mechanism would\
    \ have been self-terminating;\n   the Quick-Start Request would terminate at the\
    \ first participating\n   router after a non-participating router had been encountered\
    \ on the\n   path.  This minimizes unnecessary overhead incurred by routers\n\
    \   because of option processing for the Quick-Start Request.  In the\n   current\
    \ specification, this \"self-terminating\" property is provided\n   by Quick-Start-capable\
    \ routers hopefully either deleting the Quick-\n   Start Option or zeroing the\
    \ Rate Request field when they deny a\n   request.  Because the current specification\
    \ uses a random initial\n   value for the QS TTL, Quick-Start-capable routers\
    \ can't tell if the\n   Quick-Start Request is invalid because of non-Quick-Start-capable\n\
    \   routers upstream.  This is the cost of using a design that makes it\n   difficult\
    \ for the receiver to cheat about the value of the QS TTL.\n"
- title: Appendix C.  Quick-Start with DCCP
  contents:
  - "Appendix C.  Quick-Start with DCCP\n   DCCP is a new transport protocol for congestion-controlled,\n\
    \   unreliable datagrams, intended for applications such as streaming\n   media,\
    \ Internet telephony, and online games.  In DCCP, the\n   application has a choice\
    \ of congestion control mechanisms, with the\n   currently-specified Congestion\
    \ Control Identifiers (CCIDs) being CCID\n   2 for TCP-like congestion control,\
    \ and CCID 3 for TCP Friendly Rate\n   Control (TFRC), an equation-based form\
    \ of congestion control.  We\n   refer the reader to [RFC4340] for a more detailed\
    \ description of DCCP\n   and congestion control mechanisms.\n   Because CCID\
    \ 3 uses a rate-based congestion control mechanism, it\n   raises some new issues\
    \ about the use of Quick-Start with transport\n   protocols.  In this document,\
    \ we don't attempt to specify the use of\n   Quick-Start with DCCP.  However,\
    \ we do discuss some of the issues\n   that might arise.\n   In considering the\
    \ use of Quick-Start with CCID 3 for requesting a\n   higher initial sending rate,\
    \ the following questions arise:\n   (1) How does the sender respond if a Quick-Start\
    \ packet is dropped?\n       As in TCP, if an initial Quick-Start packet is dropped,\
    \ the CCID\n       3 sender should revert to the congestion control mechanisms\
    \ it\n       would have used if the Quick-Start Request had not been approved.\n\
    \   (2) When does the sender decide there has been no feedback from the\n    \
    \   receiver?\n       Unlike TCP, CCID 3 does not use acknowledgements for every\n\
    \       packet, or for every other packet.  In contrast, the CCID 3\n       receiver\
    \ sends feedback to the sender roughly once per round-trip\n       time.  In CCID\
    \ 3, the allowed sending rate is halved if no\n       feedback is received from\
    \ the receiver in at least four round-\n       trip times (when the sender is\
    \ sending at least one packet every\n       two round-trip times).  When a Quick-Start\
    \ Request is used, it\n       would seem necessary to use a smaller time interval,\
    \ e.g., to\n       reduce the sending rate if no feedback arrives from the receiver\n\
    \       in at least two round-trip times.\n   The question also arises of how\
    \ the sending rate should be reduced\n   after a period of no feedback from the\
    \ receiver.  As with TCP, the\n   default CCID 3 response of halving the sending\
    \ rate is not\n   necessarily a sufficient response to the absence of feedback;\
    \ an\n   alternative is to reduce the sending rate to the sending rate that\n\
    \   would have been used if no Quick-Start Request had been approved.\n   That\
    \ is, if a CCID 3 sender uses a Quick-Start Request, special rules\n   might be\
    \ required to handle the sender's response to a period of no\n   feedback from\
    \ the receiver regarding the Quick-Start packets.\n   Similarly, in considering\
    \ the use of Quick-Start with CCID 3 for\n   requesting a higher sending rate\
    \ after an idle period, the following\n   questions arise:\n   (1) What rate does\
    \ the sender request?\n       As in TCP, there is a straightforward answer to\
    \ the rate request\n       that the CCID 3 sender should use in requesting a higher\
    \ sending\n       rate after an idle period.  The sender knows the current loss\n\
    \       event rate, either from its own calculations or from feedback\n      \
    \ from the receiver, and can determine the sending rate allowed by\n       that\
    \ loss event rate.  This is the upper bound on the sending\n       rate that should\
    \ be requested by the CCID 3 sender.  A Quick-\n       Start Request is useful\
    \ with CCID 3 when the sender is coming out\n       of an idle or underutilized\
    \ period, because in standard\n       operation, CCID 3 does not allow the sender\
    \ to send more than\n       twice as fast as the receiver has reported received\
    \ in the most\n       recent feedback message.\n   (2) What is the response to\
    \ loss?\n       The response to the loss of Quick-Start packets should be to\n\
    \       return to the sending rate that would have been used if Quick-\n     \
    \  Start had not been requested.\n   (3) When does the sender decide there has\
    \ been no feedback from the\n       receiver?\n       As in the case of the initial\
    \ sending rate, it would seem prudent\n       to reduce the sending rate if no\
    \ feedback is received from the\n       receiver in at least two round-trip times.\
    \  It seems likely that,\n       in this case, the sending rate should be reduced\
    \ to the sending\n       rate that would have been used if no Quick-Start Request\
    \ had been\n       approved.\n"
- title: Appendix D.  Possible Router Algorithm
  contents:
  - "Appendix D.  Possible Router Algorithm\n   This specification does not tightly\
    \ define the algorithm a router\n   uses when deciding whether to approve a Quick-Start\
    \ Rate Request or\n   whether and how to reduce a Rate Request.  A range of algorithms\
    \ is\n   likely useful in this space and we consider the algorithm a\n   particular\
    \ router uses to be a local policy decision.  In addition,\n   we believe that\
    \ additional experimentation with router algorithms is\n   necessary to have a\
    \ solid understanding of the dynamics various\n   algorithms impose.  However,\
    \ we provide one particular algorithm in\n   this appendix as an example and as\
    \ a framework for thinking about\n   additional mechanisms.\n   [SAF06] provides\
    \ several algorithms routers can use to consider\n   incoming Rate Requests. \
    \ The decision process involves two\n   algorithms.  First, the router needs to\
    \ track the link utilization\n   over the recent past.  Second, this utilization\
    \ needs to be updated\n   by the potential new bandwidth from recent Quick-Start\
    \ approvals, and\n   then compared with the router's notion of when it is underutilized\n\
    \   enough to approve Quick-Start Requests (of some size).\n   First, we define\
    \ the \"peak utilization\" estimation technique (from\n   [SAF06]).  This mechanism\
    \ records the utilization of the link every S\n   seconds and stores the most\
    \ recent N of these measurements.  The\n   utilization is then taken as the highest\
    \ utilization of the N\n   samples.  This method, therefore, keeps N*S seconds\
    \ of history.  This\n   algorithm reacts rapidly to increases in the link utilization.\
    \  In\n   [SAF06], S is set to 0.15 seconds, and experiments use values for N\n\
    \   ranging from 3 to 20.\n   Second, we define the \"target\" algorithm for processing\
    \ incoming\n   Quick-Start Rate Requests (also from [SAF06]).  The algorithm relies\n\
    \   on knowing the bandwidth of the outgoing link (which, in many cases,\n   can\
    \ be easily configured), the utilization of the outgoing link (from\n   an estimation\
    \ technique such as given above), and an estimate of the\n   potential bandwidth\
    \ from recent Quick-Start approvals.\n   Tracking the potential bandwidth from\
    \ recent Quick-Start approvals is\n   another case where local policy dictates\
    \ how it should be done.  The\n   simplest method, outlined in Section 8.2, is\
    \ for the router to keep\n   track of the aggregate Quick-Start rate requests\
    \ approved in the most\n   recent two or more time intervals, including the current\
    \ time\n   interval, and to use the sum of the aggregate rate requests over\n\
    \   these time intervals as the estimate of the approved Rate Requests.\n   The\
    \ experiments in [SAF06] keep track of the aggregate approved Rate\n   Requests\
    \ over the most recent two time intervals, for intervals of\n   150 msec.\n  \
    \ The target algorithm also depends on a threshold (qs_thresh) that is\n   the\
    \ fraction of the outgoing link bandwidth that represents the\n   router's notion\
    \ of \"significantly underutilized\".  If the\n   utilization, augmented by the\
    \ potential bandwidth from recent Quick-\n   Start approvals, is above this threshold,\
    \ then no Quick-Start Rate\n   Requests will be approved.  If the utilization,\
    \ again augmented by\n   the potential bandwidth from recent Quick-Start approvals,\
    \ is less\n   than the threshold, then Rate Requests can be approved.  The Rate\n\
    \   Requests will be reduced such that the bandwidth allocated would not\n   drive\
    \ the utilization to more than the given threshold.  The\n   algorithm is:\n \
    \    util_bw = bandwidth * utilization;\n     util_bw = util_bw + recent_qs_approvals;\n\
    \     if (util_bw < (qs_thresh * bandwidth))\n     {\n         approved = (qs_thresh\
    \ * bandwidth) - util_bw;\n         if (rate_request < approved)\n           \
    \  approved = rate_request;\n         approved = round_down (approved);\n    \
    \     recent_qs_approvals += approved;\n     }\n   Also note that, given that\
    \ Rate Requests are fairly coarse, the\n   approved rate should be rounded down\
    \ when it does not fall exactly on\n   one of the rates allowed by the encoding\
    \ scheme.\n   Routers that wish to keep close track of the allocated Quick-Start\n\
    \   bandwidth could use Approved Rate reports to learn when rate requests\n  \
    \ had been decremented downstream in the network, and also to learn\n   when a\
    \ sender begins to use the approved Quick-Start Request.\n"
- title: Appendix E.  Possible Additional Uses for the Quick-Start Option
  contents:
  - "Appendix E.  Possible Additional Uses for the Quick-Start Option\n   The Quick-Start\
    \ Option contains a four-bit Function field in the\n   third byte, enabling additional\
    \ uses to be defined for the Quick-\n   Start Option.  In this section, we discuss\
    \ some of the possible\n   additional uses that have been discussed for Quick-Start.\
    \  The\n   Function field makes it easy to add new functions for the Quick-\n\
    \   Start Option.\n   Report of Current Sending Rate: A Quick-Start Request with\
    \ the\n   `Report of Current Sending Rate' codepoint set in the Function field\n\
    \   would be using the Rate Request field to report the current estimated\n  \
    \ sending rate for that connection.  This could accompany a second\n   Quick-Start\
    \ Request in the same packet containing a standard rate\n   request, for a connection\
    \ that is using Quick-Start to increase its\n   current sending rate.\n   Request\
    \ to Increase Sending Rate: A codepoint for `Request to\n   Increase Sending Rate'\
    \ in the Function field would indicate that the\n   connection is not idle or\
    \ just starting up, but is attempting to use\n   Quick-Start to increase its current\
    \ sending rate.  This codepoint\n   would not change the semantics of the Rate\
    \ Request field.\n   RTT Estimate: If a codepoint for `RTT Estimate' was used,\
    \ a field for\n   the RTT Estimate would contain one or more bits giving the sender's\n\
    \   rough estimate of the round-trip time, if known.  E.g., the sender\n   could\
    \ estimate whether the RTT was greater or less than 200 ms.\n   Alternately, if\
    \ the sender had an estimate of the RTT when it sends\n   the Rate Request, the\
    \ two-bit Reserved field at the end of the\n   Quick-Start Option could be used\
    \ for a coarse-grained encoding of the\n   RTT.\n   Informational Request: An\
    \ Informational Request codepoint in the\n   Function field would indicate that\
    \ a request is purely informational,\n   for the sender to find out if a rate\
    \ request would be approved, and\n   what size rate request would be approved\
    \ when the Informational\n   Request is sent.  For example, an Informational Request\
    \ could be\n   followed one round-trip time later by a standard Quick-Start Request.\n\
    \   A router approving an Informational Request would not consider this\n   as\
    \ an approval for Quick-Start bandwidth to be used, and would not be\n   under\
    \ any obligation to approve a similar standard Quick-Start\n   Request one round-trip\
    \ time later.  An Informational Request with a\n   rate request of zero could\
    \ be used by the sender to find out if all\n   of the routers along the path supported\
    \ Quick-Start.\n   Use Format X for the Rate Request Field: A Quick-Start codepoint\
    \ for\n   `Use Format X for the Rate Request Field' would indicate that an\n \
    \  alternate format was being used for the Rate Request field.\n   Do Not Decrement:\
    \ A Do Not Decrement codepoint could be used for a\n   Quick-Start Request where\
    \ the sender would rather have the request\n   denied than to have the rate request\
    \ decremented in the network.\n   This could be used if the sender was only interested\
    \ in using Quick-\n   Start if the original rate request was approved.\n   Temporary\
    \ Bandwidth Use: A Temporary codepoint has been proposed to\n   indicate that\
    \ a connection would only use the requested bandwidth for\n   a single time interval.\n"
- title: Normative References
  contents:
  - "Normative References\n   [RFC793]  Postel, J., \"Transmission Control Protocol\"\
    , STD 7, RFC\n             793, September 1981.\n   [RFC1191] Mogul, J. and S.\
    \ Deering, \"Path MTU discovery\", RFC 1191,\n             November 1990.\n  \
    \ [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate\n           \
    \  Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2460] Deering,\
    \ S. and R. Hinden, \"Internet Protocol, Version 6\n             (IPv6) Specification\"\
    , RFC 2460, December 1998.\n   [RFC2581] Allman, M., Paxson, V., and W. Stevens,\
    \ \"TCP Congestion\n             Control\", RFC 2581, April 1999.\n   [RFC3168]\
    \ Ramakrishnan, K., Floyd, S., and D. Black, \"The Addition of\n             Explicit\
    \ Congestion Notification (ECN) to IP\", RFC 3168,\n             September 2001.\n\
    \   [RFC3390] Allman, M., Floyd, S., and C. Partridge, \"Increasing TCP's\n  \
    \           Initial Window\", RFC 3390, October 2002.\n   [RFC3742] Floyd, S.,\
    \ \"Limited Slow-Start for TCP with Large\n             Congestion Windows\",\
    \ RFC 3742, March 2004.\n"
- title: Informative References
  contents:
  - "Informative References\n   [RFC792]  Postel, J., \"Internet Control Message Protocol\"\
    , STD 5, RFC\n             792, September 1981.\n   [RFC1321] Rivest, R., \"The\
    \ MD5 Message-Digest Algorithm\", RFC 1321,\n             April 1992.\n   [RFC1812]\
    \ Baker, F., Ed., \"Requirements for IP Version 4 Routers\",\n             RFC\
    \ 1812, June 1995.\n   [RFC2003] Perkins, C., \"IP Encapsulation within IP\",\
    \ RFC 2003,\n             October 1996.\n   [RFC2113] Katz, D., \"IP Router Alert\
    \ Option\", RFC 2113, February\n             1997.\n   [RFC2140] Touch, J., \"\
    TCP Control Block Interdependence\", RFC 2140,\n             April 1997.\n   [RFC2205]\
    \ Braden, R., Zhang, L., Berson, S., Herzog, S., and S.\n             Jamin, \"\
    Resource ReSerVation Protocol (RSVP) -- Version 1\n             Functional Specification\"\
    , RFC 2205, September 1997.\n   [RFC2409] Harkins, D. and D. Carrel, \"The Internet\
    \ Key Exchange\n             (IKE)\", RFC 2409, November 1998.\n   [RFC2415] Poduri,\
    \ K. and K. Nichols, \"Simulation Studies of Increased\n             Initial TCP\
    \ Window Size\", RFC 2415, September 1998.\n   [RFC2488] Allman, M., Glover, D.,\
    \ and L. Sanchez, \"Enhancing TCP Over\n             Satellite Channels using\
    \ Standard Mechanisms\", BCP 28, RFC\n             2488, January 1999.\n   [RFC2661]\
    \ Townsley, W., Valencia, A., Rubens, A., Pall, G., Zorn, G.,\n             and\
    \ B. Palter, \"Layer Two Tunneling Protocol 'L2TP'\", RFC\n             2661,\
    \ August 1999.\n   [RFC2784] Farinacci, D., Li, T., Hanks, S., Meyer, D., and\
    \ P. Traina,\n             \"Generic Routing Encapsulation (GRE)\", RFC 2784,\
    \ March\n             2000.\n   [RFC2960] Stewart, R., Xie, Q., Morneault, K.,\
    \ Sharp, C.,\n             Schwarzbauer, H., Taylor, T., Rytina, I., Kalla, M.,\
    \ Zhang,\n             L., and V. Paxson, \"Stream Control Transmission Protocol\"\
    ,\n             RFC 2960, October 2000.\n   [RFC3031] Rosen, E., Viswanathan,\
    \ A., and R. Callon, \"Multiprotocol\n             Label Switching Architecture\"\
    , RFC 3031, January 2001.\n   [RFC3124] Balakrishnan, H. and S. Seshan, \"The\
    \ Congestion Manager\",\n             RFC 3124, June 2001.\n   [RFC3234] Carpenter,\
    \ B. and S. Brim, \"Middleboxes: Taxonomy and\n             Issues\", RFC 3234,\
    \ February 2002.\n   [RFC3344] Perkins, C., Ed., \"IP Mobility Support for IPv4\"\
    , RFC 3344,\n             August 2002.\n   [RFC3360] Floyd, S., \"Inappropriate\
    \ TCP Resets Considered Harmful\",\n             BCP 60, RFC 3360, August 2002.\n\
    \   [RFC3649] Floyd, S., \"HighSpeed TCP for Large Congestion Windows\",\n   \
    \          RFC 3649, December 2003.\n   [RFC3662] Bless, R., Nichols, K., and\
    \ K. Wehrle, \"A Lower Effort\n             Per-Domain Behavior (PDB) for Differentiated\
    \ Services\", RFC\n             3662, December 2003.\n   [RFC3697] Rajahalme,\
    \ J., Conta, A., Carpenter, B., and S. Deering,\n             \"IPv6 Flow Label\
    \ Specification\", RFC 3697, March 2004.\n   [RFC3775] Johnson, D., Perkins, C.,\
    \ and J. Arkko, \"Mobility Support\n             in IPv6\", RFC 3775, June 2004.\n\
    \   [RFC3819] Karn, P., Bormann, C., Fairhurst, G., Grossman, D., Ludwig,\n  \
    \           R., Mahdavi, J., Montenegro, G., Touch, J., and L. Wood,\n       \
    \      \"Advice for Internet Subnetwork Designers\", BCP 89, RFC\n           \
    \  3819, July 2004.\n   [RFC3948] Huttunen, A., Swander, B., Volpe, V., DiBurro,\
    \ L., and M.\n             Stenberg, \"UDP Encapsulation of IPsec ESP Packets\"\
    , RFC\n             3948, January 2005.\n   [RFC4301] Kent, S. and K. Seo, \"\
    Security Architecture for the\n             Internet Protocol\", RFC 4301, December\
    \ 2005.\n   [RFC4302] Kent, S., \"IP Authentication Header\", RFC 4302, December\n\
    \             2005.\n   [RFC4306] Kaufman, C., \"Internet Key Exchange (IKEv2)\
    \ Protocol\", RFC\n             4306, December 2005.\n   [RFC4340] Kohler, E.,\
    \ Handley, M., and S. Floyd, \"Datagram Congestion\n             Control Protocol\
    \ (DCCP)\", RFC 4340, March 2006.\n   [RFC4341] Floyd, S. and E. Kohler, \"Profile\
    \ for Datagram Congestion\n             Control Protocol (DCCP) Congestion Control\
    \ ID 2: TCP-like\n             Congestion Control\", RFC 4341, March 2006.\n \
    \  [RFC4443] Conta, A., Deering, S., and M. Gupta, \"Internet Control\n      \
    \       Message Protocol (ICMPv6) for the Internet Protocol Version\n        \
    \     6 (IPv6) Specification\", RFC 4443, March 2006.\n   [AHO98]   M. Allman,\
    \ C. Hayes and S. Ostermann. An evaluation of TCP\n             with Larger Initial\
    \ Windows. ACM Computer Communication\n             Review, July 1998.\n   [B05]\
    \     Briscoe, B., \"Review: Quick-Start for TCP and IP\",\n             <http://www.cs.ucl.ac.uk/staff/B.Briscoe/pubs.html>,\n\
    \             November 2005.\n   [BW97]    G. Brasche and B. Walke. Concepts,\
    \ Services and Protocols\n             of the new GSM Phase 2+ General Packet\
    \ Radio Service. IEEE\n             Communications Magazine, pages 94--104, August\
    \ 1997.\n   [GPAR02]  A. Gurtov, M. Passoja, O. Aalto, and M. Raitola. Multi-\n\
    \             Layer Protocol Tracing in a GPRS Network. In Proceedings of\n  \
    \           the IEEE Vehicular Technology Conference (Fall VTC2002),\n       \
    \      Vancouver, Canada, September 2002.\n   [H05]     P. Hoffman, email, October\
    \ 2005.  Citation for\n             acknowledgement purposes only.\n   [HKP01]\
    \   M. Handley, C. Kreibich and V. Paxson, Network Intrusion\n             Detection:\
    \ Evasion, Traffic Normalization, and End-to-End\n             Protocol Semantics,\
    \ Proc. USENIX Security Symposium 2001.\n   [Jac88]   V. Jacobson, Congestion\
    \ Avoidance and Control, ACM SIGCOMM.\n   [JD02]    Manish Jain, Constantinos\
    \ Dovrolis, End-to-End Available\n             Bandwidth: Measurement Methodology,\
    \ Dynamics, and Relation\n             with TCP Throughput, SIGCOMM 2002.\n  \
    \ [K03]     S. Kunniyur, \"AntiECN Marking: A Marking Scheme for High\n      \
    \       Bandwidth Delay Connections\", Proceedings, IEEE ICC '03,\n          \
    \   May 2003.  <http://www.seas.upenn.edu/~kunniyur/>.\n   [KAPS02]  Rajesh Krishnan,\
    \ Mark Allman, Craig Partridge, James P.G.\n             Sterbenz. Explicit Transport\
    \ Error Notification (ETEN) for\n             Error-Prone Wireless and Satellite\
    \ Networks. Technical\n             Report No. 8333, BBN Technologies, March 2002.\n\
    \             <http://www.icir.org/mallman/papers/>.\n   [KHR02]   Dina Katabi,\
    \ Mark Handley, and Charles Rohrs, Internet\n             Congestion Control for\
    \ Future High Bandwidth-Delay Product\n             Environments. ACM Sigcomm\
    \ 2002, August 2002.\n             <http://ana.lcs.mit.edu/dina/XCP/>.\n   [KK03]\
    \    A. Kuzmanovic and E. W. Knightly.  TCP-LP: A Distributed\n             Algorithm\
    \ for Low Priority Data Transfer.  INFOCOM 2003,\n             April 2003.\n \
    \  [KSEPA04] Rajesh Krishnan, James Sterbenz, Wesley Eddy, Craig\n           \
    \  Partridge, Mark Allman. Explicit Transport Error\n             Notification\
    \ (ETEN) for Error-Prone Wireless and Satellite\n             Networks. Computer\
    \ Networks, 46(3), October 2004.\n   [L05]     Guohan Lu, Nonce in TCP Quick Start,\
    \ September 2005.\n             <http://www.net-glyph.org/~lgh/nonce-usage.pdf>.\n\
    \   [MH06]    Mathis, M. and J. Heffner, \"Packetization Layer Path MTU\n    \
    \         Discovery\", Work in Progress, December 2006.\n   [MAF04]   Alberto\
    \ Medina, Mark Allman, and Sally Floyd, Measuring\n             Interactions Between\
    \ Transport Protocols and Middleboxes,\n             Internet Measurement Conference\
    \ 2004, August 2004.\n             <http://www.icir.org/tbit/\".\n   [MAF05] \
    \  Alberto Medina, Mark Allman, and Sally Floyd.  Measuring\n             the\
    \ Evolution of Transport Protocols in the Internet.\n             Computer Communications\
    \ Review, April 2005.\n   [MaxNet]  MaxNet Home Page,\n             <http://netlab.caltech.edu/~bartek/maxnet.htm>.\n\
    \   [P00]     Joon-Sang Park, Bandwidth Discovery of a TCP Connection,\n     \
    \        report to John Heidemann, 2000, private communication.\n            \
    \ Citation for acknowledgement purposes only.\n   [PABL+05] Ruoming Pang, Mark\
    \ Allman, Mike Bennett, Jason Lee, Vern\n             Paxson, Brian Tierney. \
    \ A First Look at Modern Enterprise\n             Traffic.  ACM SIGCOMM/USENIX\
    \ Internet Measurement\n             Conference, October 2005.\n   [PRAKS02] Craig\
    \ Partridge, Dennis Rockwell, Mark Allman, Rajesh\n             Krishnan, James\
    \ P.G. Sterbenz. A Swifter Start for TCP.\n             Technical Report No. 8339,\
    \ BBN Technologies, March 2002.\n             <http://www.icir.org/mallman/papers/>.\n\
    \   [RW03]    Mattia Rossi and Michael Welzl, On the Impact of IP Option\n   \
    \          Processing, Preprint-Reihe des Fachbereichs Mathematik -\n        \
    \     Informatik, No. 15, Institute of Computer Science,\n             University\
    \ of Innsbruck, Austria, October 2003.\n   [RW04]    Mattia Rossi and Michael\
    \ Welzl, On the Impact of IP Option\n             Processing -   Part 2, Preprint-Reihe\
    \ des Fachbereichs\n             Mathematik - Informatik, No. 26, Institute of\
    \ Computer\n             Science, University of Innsbruck, Austria, July 2004.\n\
    \   [S02]     Ion Stoica, private communication, 2002.  Citation for\n       \
    \      acknowledgement purposes only.\n   [SAF06]   Pasi Sarolahti, Mark Allman,\
    \ and Sally Floyd.  Determining\n             an Appropriate Sending Rate Over\
    \ an Underutilized Network\n             Path.  February 2006.\n             <http://www.icir.org/floyd/quickstart.html>.\n\
    \   [SGF05]   Singh, M., Guha, S., and P. Francis, \"Utilizing spare\n       \
    \      network bandwidth to improve TCP performance\", ACM SIGCOMM\n         \
    \    2005 Work in Progress session, August 2005,\n             <https://www.guha.cc/saikat/pub/sigcomm05-lowtcp.pdf>.\n\
    \   [SHA1]    \"Secure Hash Standard\", FIPS, U.S. Department of Commerce,\n \
    \            Washington, D.C., publication 180-1, April 1995.\n   [SH02]    Srikanth\
    \ Sundarrajan and John Heidemann.  Study of TCP\n             Quick Start with\
    \ NS-2.  Class Project, December 2002.  Not\n             publicly available;\
    \ citation for acknowledgement purposes\n             only.\n   [V02]     A. Venkataramani,\
    \ R. Kokku, and M. Dahlin.  TCP Nice: A\n             Mechanism for Background\
    \ Transfers.  OSDI 2002.\n   [VH97]    V. Visweswaraiah and J. Heidemann, Improving\
    \ Restart of\n             Idle TCP Connections, Technical Report 97-661, University\n\
    \             of Southern California, November 1997.\n   [W00]     Michael Welzl:\
    \ PTP: Better Feedback for Adaptive\n             Distributed Multimedia Applications\
    \ on the Internet, IPCCC\n             2000 (19th IEEE International Performance,\
    \ Computing, And\n             Communications Conference), Phoenix, Arizona, USA,\
    \ 20-22\n             February 2000.\n             <http://www.welzl.at/research/publications/>.\n\
    \   [ZDPS01]  Y. Zhang, N. Duffield, V. Paxson, and S. Shenker,  On the\n    \
    \         Constancy of Internet Path Properties, Proc. ACM SIGCOMM\n         \
    \    Internet Measurement Workshop, November 2001.\n   [ZQK00]   Y. Zhang, L.\
    \ Qiu, and S. Keshav, Speeding Up Short Data\n             Transfers: Theory,\
    \ Architectural Support, and Simulation\n             Results, NOSSDAV 2000, June\
    \ 2000.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Sally Floyd\n   Phone: +1 (510) 666-2989\n   ICIR (ICSI\
    \ Center for Internet Research)\n   EMail: floyd@icir.org\n   URL: http://www.icir.org/floyd/\n\
    \   Mark Allman\n   ICSI Center for Internet Research\n   1947 Center Street,\
    \ Suite 600\n   Berkeley, CA 94704-1198\n   Phone: (440) 235-1792\n   EMail: mallman@icir.org\n\
    \   URL: http://www.icir.org/mallman/\n   Amit Jain\n   F5 Networks\n   EMail:\
    \ a.jain@f5.com\n   Pasi Sarolahti\n   Nokia Research Center\n   P.O. Box 407\n\
    \   FI-00045 NOKIA GROUP\n   Finland\n   Phone: +358 50 4876607\n   EMail: pasi.sarolahti@iki.fi\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST,\n   AND THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES,\n   EXPRESS OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT\n   THE USE OF THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY\n   IMPLIED WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR\n   PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
