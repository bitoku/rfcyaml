- title: __initial_text__
  contents:
  - "               Conversion of NGP-0 Coordinates to Device\n                  \
    \        Specific Coordinates\nConversion of NGP-0 coordinates to floating point\
    \ PDP-10 coordinates\nwas discussed in RFC #387.  In general, however, it is undesirable\
    \ to\nconvert NGP coordinates to floating point coordinates because real\ndevices\
    \ require integer addressing.  To this end, a means is described\nto convert NGP\
    \ coordi- nates to integer coordinates in the range zero\nto M, where M is the\
    \ maximum address of the device screen on a machine\nusing 2's complement arithmetic.\
    \  It would not, however, be difficult\nto modify this algorithm to operate on\
    \ machines using one's complement\nor sign-magnitude arithmetic.\nFirst consider\
    \ the NGP coordinate format:\n                   |  |   n       |\n          \
    \          s ^  FRACTION\n                    i\n                    g\n     \
    \               n\nWhere the sign occupies the most significant bit of the coordinate\n\
    followed by bits of numerical information (initial implementation of\nNGP requires\
    \ N=15).  Negative numbers are represented by 2's\ncomplement.  Conversion to\
    \ device coordinates is accomplished by:\n                    D = S * f + S\n\
    Where D =>integer device coordinate\n      S =>scaling factor (typically M/2)\n\
    \      f =>NGP fractional coordinate\nLet us rewrite this as:\n              \
    \              n     n\n                    D = S*(2 *f)/2 +S\n              \
    \              I\n                    S= Q * 2\nWhere Q is an odd integer and\
    \ I is an integer.\nWhen:                        I   n     n\n               \
    \     D = Q * 2 *(2 *f)/2  +S\n                             I-n   n\n        \
    \              = Q * 2   *(2 *f)  +S\n             n\nThe factor (2 *f) is represented\
    \ in 2's complement form simply by\nextending the sign bit of f into the upper\
    \ portion of the computer\nword, If Q = 1 (as it would be with many devices),\
    \ it can be ignored.\nIf Q >< 1, we may console ourselves that an integer multiply\
    \ is faster\non most machines than a floating point multiply.  In fact, on a\n\
    PDP-10, this multiply can usually be performed with no access to\nmemory since\
    \ Q is usually small.\n                          I-n\nWe are now left with the\
    \ 2    factor.  This can be accomplished with an\narithmetic shift left by (I-n)\
    \ or an arithmetic shift right by (n-I)\nas is appropriate.  The offset factor,\
    \ S, may now be added using an\ninteger add.\nThe procedure for converting NGP\
    \ coordinates to integer device\ncoordinates is then:\n               1.   move\
    \ coordinate to a register and extend sign\n               2.   integer multiply\
    \ by Q (if necessary)\n               3.   arithmetic shift left by (I-n)\n  \
    \             4.   integer add S\nThis procedure would generally be much faster\
    \ than:\n               1.   move coordinate to register and extend sign\n   \
    \            2.   float fractional coordinate\n               3.   floating point\
    \ multiply\n               4.   floating point add\n               5.   conversion\
    \ to fixed point\n       [ This RFC was put into machine readable form for entry\
    \ ]\n       [ into the online RFC archives by BBN Corp. under the   ]\n      \
    \ [ direction of Alex McKenzie.                      1/97 ]\n"
