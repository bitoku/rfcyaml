- contents:
  - '               Date and Time on the Internet: Timestamps

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document defines a date and time format for use in Internet\n
    \  protocols that is a profile of the ISO 8601 standard for\n   representation
    of dates and times using the Gregorian calendar.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ............................................
    2\n   2. Definitions ............................................. 3\n   3. Two
    Digit Years ......................................... 4\n   4. Local Time ..............................................
    4\n   4.1. Coordinated Universal Time (UTC) ...................... 4\n   4.2.
    Local Offsets ......................................... 5\n   4.3. Unknown Local
    Offset Convention ....................... 5\n   4.4. Unqualified Local Time ................................
    5\n   5. Date and Time format .................................... 6\n   5.1.
    Ordering .............................................. 6\n   5.2. Human Readability
    ..................................... 6\n   5.3. Rarely Used Options ...................................
    7\n   5.4. Redundant Information ................................. 7\n   5.5.
    Simplicity ............................................ 7\n   5.6. Internet Date/Time
    Format ............................. 8\n   5.7. Restrictions ..........................................
    9\n   5.8. Examples ............................................. 10\n   6. References
    ............................................. 10\n   7. Security Considerations
    ................................ 11\n   Appendix A. ISO 8601 Collected ABNF .......................
    12\n   Appendix B. Day of the Week ............................... 14\n   Appendix
    C. Leap Years .................................... 14\n   Appendix D. Leap Seconds
    ..............................,... 15\n   Acknowledgements ..........................................
    17\n   Authors' Addresses ........................................ 17\n   Full
    Copyright Statement .................................. 18\n"
  title: Table of Contents
- contents:
  - "1. Introduction\n   Date and time formats cause a lot of confusion and interoperability\n
    \  problems on the Internet.  This document addresses many of the\n   problems
    encountered and makes recommendations to improve consistency\n   and interoperability
    when representing and using date and time in\n   Internet protocols.\n   This
    document includes an Internet profile of the ISO 8601 [ISO8601]\n   standard for
    representation of dates and times using the Gregorian\n   calendar.\n   There
    are many ways in which date and time values might appear in\n   Internet protocols:
    \ this document focuses on just one common usage,\n   viz. timestamps for Internet
    protocol events.  This limited\n   consideration has the following consequences:\n
    \  o  All dates and times are assumed to be in the \"current era\",\n      somewhere
    between 0000AD and 9999AD.\n   o  All times expressed have a stated relationship
    (offset) to\n      Coordinated Universal Time (UTC).  (This is distinct from some\n
    \     usage in scheduling applications where a local time and location\n      may
    be known, but the actual relationship to UTC may be dependent\n      on the unknown
    or unknowable actions of politicians or\n      administrators.  The UTC time corresponding
    to 17:00 on 23rd March\n      2005 in New York may depend on administrative decisions
    about\n      daylight savings time.  This specification steers well clear of\n
    \     such considerations.)\n   o  Timestamps can express times that occurred
    before the introduction\n      of UTC.  Such timestamps are expressed relative
    to universal time,\n      using the best available practice at the stated time.\n
    \  o  Date and time expressions indicate an instant in time.\n      Description
    of time periods, or intervals, is not covered here.\n"
  title: 1. Introduction
- contents:
  - "2. Definitions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in RFC 2119 [RFC2119].\n
    \     UTC         Coordinated Universal Time as maintained by the Bureau\n                  International
    des Poids et Mesures (BIPM).\n      second      A basic unit of measurement of
    time in the\n                  International System of Units.  It is defined as
    the\n                  duration of 9,192,631,770 cycles of microwave light\n                  absorbed
    or emitted by the hyperfine transition of\n                  cesium-133 atoms
    in their ground state undisturbed by\n                  external fields.\n      minute
    \     A period of time of 60 seconds.  However, see also the\n                  restrictions
    in section 5.7 and Appendix D for how\n                  leap seconds are denoted
    within minutes.\n      hour        A period of time of 60 minutes.\n      day
    \        A period of time of 24 hours.\n      leap year   In the Gregorian calendar,
    a year which has 366 days.\n                  A leap year is a year whose number
    is divisible by\n                  four an integral number of times, except that
    if it is\n                  a centennial year (i.e. divisible by one hundred)
    it\n                  shall also be divisible by four hundred an integral\n                  number
    of times.\n      ABNF        Augmented Backus-Naur Form, a format used to represent\n
    \                 permissible strings in a protocol or language, as\n                  defined
    in [ABNF].\n      Email Date/Time Format\n                  The date/time format
    used by Internet Mail as defined\n                  by RFC 2822 [IMAIL-UPDATE].\n
    \     Internet Date/Time Format\n                  The date format defined in
    section 5 of this document.\n      Timestamp   This term is used in this document
    to refer to an\n                  unambiguous representation of some instant in
    time.\n      Z           A suffix which, when applied to a time, denotes a UTC\n
    \                 offset of 00:00; often spoken \"Zulu\" from the ICAO\n                  phonetic
    alphabet representation of the letter \"Z\".\n      For more information about
    time scales, see Appendix E of [NTP],\n      Section 3 of [ISO8601], and the appropriate
    ITU documents [ITU-R-\n      TF].\n"
  title: 2. Definitions
- contents:
  - "3. Two Digit Years\n   The following requirements are to address the problems
    of ambiguity\n   of 2-digit years:\n      o  Internet Protocols MUST generate
    four digit years in dates.\n      o  The use of 2-digit years is deprecated.  If
    a 2-digit year is\n         received, it should be accepted ONLY if an incorrect\n
    \        interpretation will not cause a protocol or processing failure\n         (e.g.
    if used only for logging or tracing purposes).\n      o  It is possible that a
    program using two digit years will\n         represent years after 1999 as three
    digits.  This occurs if the\n         program simply subtracts 1900 from the year
    and doesn't check\n         the number of digits.  Programs wishing to robustly
    deal with\n         dates generated by such broken software may add 1900 to three\n
    \        digit years.\n      o  It is possible that a program using two digit
    years will\n         represent years after 1999 as \":0\", \":1\", ... \":9\",
    \";0\", ...\n         This occurs if the program simply subtracts 1900 from the
    year\n         and adds the decade to the US-ASCII character zero.  Programs\n
    \        wishing to robustly deal with dates generated by such broken\n         software
    should detect non-numeric decades and interpret\n         appropriately.\n   The
    problems with two digit years amply demonstrate why all dates and\n   times used
    in Internet protocols MUST be fully qualified.\n"
  title: 3. Two Digit Years
- contents:
  - '4. Local Time

    '
  - contents:
    - "4.1. Coordinated Universal Time (UTC)\n   Because the daylight saving rules
      for local time zones are so\n   convoluted and can change based on local law
      at unpredictable times,\n   true interoperability is best achieved by using
      Coordinated Universal\n   Time (UTC).  This specification does not cater to
      local time zone\n   rules.\n"
    title: 4.1. Coordinated Universal Time (UTC)
  - contents:
    - "4.2. Local Offsets\n   The offset between local time and UTC is often useful
      information.\n   For example, in electronic mail (RFC2822, [IMAIL-UPDATE]) the
      local\n   offset provides a useful heuristic to determine the probability of
      a\n   prompt response.  Attempts to label local offsets with alphabetic\n   strings
      have resulted in poor interoperability in the past [IMAIL],\n   [HOST-REQ].
      \ As a result, RFC2822 [IMAIL-UPDATE] has made numeric\n   offsets mandatory.\n
      \  Numeric offsets are calculated as \"local time minus UTC\".  So the\n   equivalent
      time in UTC can be determined by subtracting the offset\n   from the local time.
      \ For example, 18:50:00-04:00 is the same time as\n   22:50:00Z.  (This example
      shows negative offsets handled by adding\n   the absolute value of the offset.)\n
      \     NOTE: Following ISO 8601, numeric offsets represent only time\n      zones
      that differ from UTC by an integral number of minutes.\n      However, many
      historical time zones differ from UTC by a non-\n      integral number of minutes.
      \ To represent such historical time\n      stamps exactly, applications must
      convert them to a representable\n      time zone.\n"
    title: 4.2. Local Offsets
  - contents:
    - "4.3. Unknown Local Offset Convention\n   If the time in UTC is known, but the
      offset to local time is unknown,\n   this can be represented with an offset
      of \"-00:00\".  This differs\n   semantically from an offset of \"Z\" or \"+00:00\",
      which imply that UTC\n   is the preferred reference point for the specified
      time.  RFC2822\n   [IMAIL-UPDATE] describes a similar convention for email.\n"
    title: 4.3. Unknown Local Offset Convention
  - contents:
    - "4.4. Unqualified Local Time\n   A number of devices currently connected to
      the Internet run their\n   internal clocks in local time and are unaware of
      UTC.  While the\n   Internet does have a tradition of accepting reality when
      creating\n   specifications, this should not be done at the expense of\n   interoperability.
      \ Since interpretation of an unqualified local time\n   zone will fail in approximately
      23/24 of the globe, the\n   interoperability problems of unqualified local time
      are deemed\n   unacceptable for the Internet.  Systems that are configured with
      a\n   local time, are unaware of the corresponding UTC offset, and depend\n
      \  on time synchronization with other Internet systems, MUST use a\n   mechanism
      that ensures correct synchronization with UTC.  Some\n   suitable mechanisms
      are:\n   o  Use Network Time Protocol [NTP] to obtain the time in UTC.\n   o
      \ Use another host in the same local time zone as a gateway to the\n      Internet.
      \ This host MUST correct unqualified local times that are\n      transmitted
      to other hosts.\n   o  Prompt the user for the local time zone and daylight
      saving rule\n      settings.\n"
    title: 4.4. Unqualified Local Time
  title: 4. Local Time
- contents:
  - "5. Date and Time format\n   This section discusses desirable qualities of date
    and time formats\n   and defines a profile of ISO 8601 for use in Internet protocols.\n"
  - contents:
    - "5.1. Ordering\n   If date and time components are ordered from least precise
      to most\n   precise, then a useful property is achieved.  Assuming that the
      time\n   zones of the dates and times are the same (e.g., all in UTC),\n   expressed
      using the same string (e.g., all \"Z\" or all \"+00:00\"), and\n   all times
      have the same number of fractional second digits, then the\n   date and time
      strings may be sorted as strings (e.g., using the\n   strcmp() function in C)
      and a time-ordered sequence will result.  The\n   presence of optional punctuation
      would violate this characteristic.\n"
    title: 5.1. Ordering
  - contents:
    - "5.2. Human Readability\n   Human readability has proved to be a valuable feature
      of Internet\n   protocols.  Human readable protocols greatly reduce the costs
      of\n   debugging since telnet often suffices as a test client and network\n
      \  analyzers need not be modified with knowledge of the protocol.  On\n   the
      other hand, human readability sometimes results in\n   interoperability problems.
      \ For example, the date format \"10/11/1996\"\n   is completely unsuitable for
      global interchange because it is\n   interpreted differently in different countries.
      \ In addition, the\n   date format in [IMAIL] has resulted in interoperability
      problems when\n   people assumed any text string was permitted and translated
      the three\n   letter abbreviations to other languages or substituted date formats\n
      \  which were easier to generate (e.g. the format used by the C function\n   ctime).
      \ For this reason, a balance must be struck between human\n   readability and
      interoperability.\n   Because no date and time format is readable according
      to the\n   conventions of all countries, Internet clients SHOULD be prepared
      to\n   transform dates into a display format suitable for the locality.\n   This
      may include translating UTC to local time.\n"
    title: 5.2. Human Readability
  - contents:
    - "5.3. Rarely Used Options\n   A format which includes rarely used options is
      likely to cause\n   interoperability problems.  This is because rarely used
      options are\n   less likely to be used in alpha or beta testing, so bugs in
      parsing\n   are less likely to be discovered.  Rarely used options should be
      made\n   mandatory or omitted for the sake of interoperability whenever\n   possible.\n
      \  The format defined below includes only one rarely used option:\n   fractions
      of a second.  It is expected that this will be used only by\n   applications
      which require strict ordering of date/time stamps or\n   which have an unusual
      precision requirement.\n"
    title: 5.3. Rarely Used Options
  - contents:
    - "5.4. Redundant Information\n   If a date/time format includes redundant information,
      that introduces\n   the possibility that the redundant information will not
      correlate.\n   For example, including the day of the week in a date/time format\n
      \  introduces the possibility that the day of week is incorrect but the\n   date
      is correct, or vice versa.  Since it is not difficult to compute\n   the day
      of week from a date (see Appendix B), the day of week should\n   not be included
      in a date/time format.\n"
    title: 5.4. Redundant Information
  - contents:
    - "5.5. Simplicity\n   The complete set of date and time formats specified in
      ISO 8601\n   [ISO8601] is quite complex in an attempt to provide multiple\n
      \  representations and partial representations.  Appendix A contains an\n   attempt
      to translate the complete syntax of ISO 8601 into ABNF.\n   Internet protocols
      have somewhat different requirements and\n   simplicity has proved to be an
      important characteristic.  In\n   addition, Internet protocols usually need
      complete specification of\n   data in order to achieve true interoperability.
      \ Therefore, the\n   complete grammar for ISO 8601 is deemed too complex for
      most Internet\n   protocols.\n   The following section defines a profile of
      ISO 8601 for use on the\n   Internet.  It is a conformant subset of the ISO
      8601 extended format.\n   Simplicity is achieved by making most fields and punctuation\n
      \  mandatory.\n"
    title: 5.5. Simplicity
  - contents:
    - "5.6. Internet Date/Time Format\n   The following profile of ISO 8601 [ISO8601]
      dates SHOULD be used in\n   new protocols on the Internet.  This is specified
      using the syntax\n   description notation defined in [ABNF].\n   date-fullyear
      \  = 4DIGIT\n   date-month      = 2DIGIT  ; 01-12\n   date-mday       = 2DIGIT
      \ ; 01-28, 01-29, 01-30, 01-31 based on\n                             ; month/year\n
      \  time-hour       = 2DIGIT  ; 00-23\n   time-minute     = 2DIGIT  ; 00-59\n
      \  time-second     = 2DIGIT  ; 00-58, 00-59, 00-60 based on leap second\n                             ;
      rules\n   time-secfrac    = \".\" 1*DIGIT\n   time-numoffset  = (\"+\" / \"-\")
      time-hour \":\" time-minute\n   time-offset     = \"Z\" / time-numoffset\n   partial-time
      \   = time-hour \":\" time-minute \":\" time-second\n                     [time-secfrac]\n
      \  full-date       = date-fullyear \"-\" date-month \"-\" date-mday\n   full-time
      \      = partial-time time-offset\n   date-time       = full-date \"T\" full-time\n
      \     NOTE: Per [ABNF] and ISO8601, the \"T\" and \"Z\" characters in this\n
      \     syntax may alternatively be lower case \"t\" or \"z\" respectively.\n
      \     This date/time format may be used in some environments or contexts\n      that
      distinguish between the upper- and lower-case letters 'A'-'Z'\n      and 'a'-'z'
      (e.g. XML).  Specifications that use this format in\n      such environments
      MAY further limit the date/time syntax so that\n      the letters 'T' and 'Z'
      used in the date/time syntax must always\n      be upper case.  Applications
      that generate this format SHOULD use\n      upper case letters.\n      NOTE:
      ISO 8601 defines date and time separated by \"T\".\n      Applications using
      this syntax may choose, for the sake of\n      readability, to specify a full-date
      and full-time separated by\n      (say) a space character.\n"
    title: 5.6. Internet Date/Time Format
  - contents:
    - "5.7. Restrictions\n   The grammar element date-mday represents the day number
      within the\n   current month.  The maximum value varies based on the month and
      year\n   as follows:\n      Month Number  Month/Year           Maximum value
      of date-mday\n      ------------  ----------           --------------------------\n
      \     01            January              31\n      02            February, normal
      \    28\n      02            February, leap year  29\n      03            March
      \               31\n      04            April                30\n      05            May
      \                 31\n      06            June                 30\n      07
      \           July                 31\n      08            August               31\n
      \     09            September            30\n      10            October              31\n
      \     11            November             30\n      12            December             31\n
      \  Appendix C contains sample C code to determine if a year is a leap\n   year.\n
      \  The grammar element time-second may have the value \"60\" at the end of\n
      \  months in which a leap second occurs -- to date: June (XXXX-06-\n   30T23:59:60Z)
      or December (XXXX-12-31T23:59:60Z); see Appendix D for\n   a table of leap seconds.
      \ It is also possible for a leap second to be\n   subtracted, at which times
      the maximum value of time-second is \"58\".\n   At all other times the maximum
      value of time-second is \"59\".\n   Further, in time zones other than \"Z\",
      the leap second point is\n   shifted by the zone offset (so it happens at the
      same instant around\n   the globe).\n   Leap seconds cannot be predicted far
      into the future.  The\n   International Earth Rotation Service publishes bulletins
      [IERS] that\n   announce leap seconds with a few weeks' warning.  Applications
      should\n   not generate timestamps involving inserted leap seconds until after\n
      \  the leap seconds are announced.\n   Although ISO 8601 permits the hour to
      be \"24\", this profile of ISO\n   8601 only allows values between \"00\" and
      \"23\" for the hour in order\n   to reduce confusion.\n"
    title: 5.7. Restrictions
  - contents:
    - "5.8. Examples\n   Here are some examples of Internet date/time format.\n      1985-04-12T23:20:50.52Z\n
      \  This represents 20 minutes and 50.52 seconds after the 23rd hour of\n   April
      12th, 1985 in UTC.\n      1996-12-19T16:39:57-08:00\n   This represents 39 minutes
      and 57 seconds after the 16th hour of\n   December 19th, 1996 with an offset
      of -08:00 from UTC (Pacific\n   Standard Time).  Note that this is equivalent
      to 1996-12-20T00:39:57Z\n   in UTC.\n      1990-12-31T23:59:60Z\n   This represents
      the leap second inserted at the end of 1990.\n      1990-12-31T15:59:60-08:00\n
      \  This represents the same leap second in Pacific Standard Time, 8\n   hours
      behind UTC.\n      1937-01-01T12:00:27.87+00:20\n   This represents the same
      instant of time as noon, January 1, 1937,\n   Netherlands time.  Standard time
      in the Netherlands was exactly 19\n   minutes and 32.13 seconds ahead of UTC
      by law from 1909-05-01 through\n   1937-06-30.  This time zone cannot be represented
      exactly using the\n   HH:MM format, and this timestamp uses the closest representable
      UTC\n   offset.\n"
    title: 5.8. Examples
  title: 5. Date and Time format
- contents:
  - "6. References\n   [ZELLER]       Zeller, C., \"Kalender-Formeln\", Acta Mathematica,
    Vol.\n                  9, Nov 1886.\n   [IMAIL]        Crocker, D., \"Standard
    for the Format of Arpa Internet\n                  Text Messages\", STD 11, RFC
    822, August 1982.\n   [IMAIL-UPDATE] Resnick, P., \"Internet Message Format\",
    RFC 2822,\n                  April 2001.\n   [ABNF]         Crocker, D. and P.
    Overell, \"Augmented BNF for Syntax\n                  Specifications: ABNF\",
    RFC 2234, November 1997.\n   [ISO8601]      \"Data elements and interchange formats
    -- Information\n                  interchange -- Representation of dates and times\",
    ISO\n                  8601:1988(E), International Organization for\n                  Standardization,
    June, 1988.\n   [ISO8601:2000] \"Data elements and interchange formats -- Information\n
    \                 interchange -- Representation of dates and times\", ISO\n                  8601:2000,
    International Organization for\n                  Standardization, December, 2000.\n
    \  [HOST-REQ]     Braden, R., \"Requirements for Internet Hosts --\n                  Application
    and Support\", STD 3, RFC 1123, October\n                  1989.\n   [IERS]         International
    Earth Rotation Service Bulletins,\n                  <http://hpiers.obspm.fr/eop-\n
    \                 pc/products/bulletins.html>.\n   [NTP]          Mills, D, \"Network
    Time Protocol (Version 3)\n                  Specification, Implementation and
    Analysis\", RFC 1305,\n                  March 1992.\n   [ITU-R-TF]     International
    Telecommunication Union Recommendations\n                  for Time Signals and
    Frequency Standards Emissions.\n                  <http://www.itu.ch/publications/itu-r/iturtf.htm>\n
    \  [RFC2119]      Bradner, S, \"Key words for use in RFCs to Indicate\n                  Requirement
    Levels\", BCP 14, RFC 2119, March 1997.\n"
  title: 6. References
- contents:
  - "7. Security Considerations\n   Since the local time zone of a site may be useful
    for determining a\n   time when systems are less likely to be monitored and might
    be more\n   susceptible to a security probe, some sites may wish to emit times
    in\n   UTC only.  Others might consider this to be loss of useful\n   functionality
    at the hands of paranoia.\n"
  title: 7. Security Considerations
- contents:
  - "Appendix A. ISO 8601 Collected ABNF\n   This information is based on the 1988
    version of ISO 8601.  There may\n   be some changes in the 2000 revision.\n   ISO
    8601 does not specify a formal grammar for the date and time\n   formats it defines.
    \ The following is an attempt to create a formal\n   grammar from ISO 8601.  This
    is informational only and may contain\n   errors.  ISO 8601 remains the authoritative
    reference.\n   Note that due to ambiguities in ISO 8601, some interpretations
    had to\n   be made.  First, ISO 8601 is not clear if mixtures of basic and\n   extended
    format are permissible.  This grammar permits mixtures. ISO\n   8601 is not clear
    on whether an hour of 24 is permissible only if\n   minutes and seconds are 0.
    \ This assumes that an hour of 24 is\n   permissible in any context.  Restrictions
    on date-mday in section 5.7\n   apply.  ISO 8601 states that the \"T\" may be
    omitted under some\n   circumstances.  This grammar requires the \"T\" to avoid
    ambiguity.\n   ISO 8601 also requires (in section 5.3.1.3) that a decimal fraction\n
    \  be proceeded by a \"0\" if less than unity.  Annex B.2 of ISO 8601\n   gives
    examples where the decimal fractions are not preceded by a \"0\".\n   This grammar
    assumes section 5.3.1.3 is correct and that Annex B.2 is\n   in error.\n   date-century
    \   = 2DIGIT  ; 00-99\n   date-decade     =  DIGIT  ; 0-9\n   date-subdecade  =
    \ DIGIT  ; 0-9\n   date-year       = date-decade date-subdecade\n   date-fullyear
    \  = date-century date-year\n   date-month      = 2DIGIT  ; 01-12\n   date-wday
    \      =  DIGIT  ; 1-7  ; 1 is Monday, 7 is Sunday\n   date-mday       = 2DIGIT
    \ ; 01-28, 01-29, 01-30, 01-31 based on\n                             ; month/year\n
    \  date-yday       = 3DIGIT  ; 001-365, 001-366 based on year\n   date-week       =
    2DIGIT  ; 01-52, 01-53 based on year\n   datepart-fullyear = [date-century] date-year
    [\"-\"]\n   datepart-ptyear   = \"-\" [date-subdecade [\"-\"]]\n   datepart-wkyear
    \  = datepart-ptyear / datepart-fullyear\n   dateopt-century   = \"-\" / date-century\n
    \  dateopt-fullyear  = \"-\" / datepart-fullyear\n   dateopt-year      = \"-\"
    / (date-year [\"-\"])\n   dateopt-month     = \"-\" / (date-month [\"-\"])\n   dateopt-week
    \     = \"-\" / (date-week [\"-\"])\n   datespec-full     = datepart-fullyear
    date-month [\"-\"] date-mday\n   datespec-year     = date-century / dateopt-century
    date-year\n   datespec-month    = \"-\" dateopt-year date-month [[\"-\"] date-mday]\n
    \  datespec-mday     = \"--\" dateopt-month date-mday\n   datespec-week     =
    datepart-wkyear \"W\"\n                       (date-week / dateopt-week date-wday)\n
    \  datespec-wday     = \"---\" date-wday\n   datespec-yday     = dateopt-fullyear
    date-yday\n   date              = datespec-full / datespec-year\n                       /
    datespec-month /\n   datespec-mday / datespec-week / datespec-wday / datespec-yday\n"
  - "Time:\n   time-hour         = 2DIGIT ; 00-24\n   time-minute       = 2DIGIT ;
    00-59\n   time-second       = 2DIGIT ; 00-58, 00-59, 00-60 based on\n                              ;
    leap-second rules\n   time-fraction     = (\",\" / \".\") 1*DIGIT\n   time-numoffset
    \   = (\"+\" / \"-\") time-hour [[\":\"] time-minute]\n   time-zone         =
    \"Z\" / time-numoffset\n   timeopt-hour      = \"-\" / (time-hour [\":\"])\n   timeopt-minute
    \   = \"-\" / (time-minute [\":\"])\n   timespec-hour     = time-hour [[\":\"]
    time-minute [[\":\"] time-second]]\n   timespec-minute   = timeopt-hour time-minute
    [[\":\"] time-second]\n   timespec-second   = \"-\" timeopt-minute time-second\n
    \  timespec-base     = timespec-hour / timespec-minute / timespec-second\n   time
    \             = timespec-base [time-fraction] [time-zone]\n   iso-date-time     =
    date \"T\" time\n"
  - "Durations:\n   dur-second        = 1*DIGIT \"S\"\n   dur-minute        = 1*DIGIT
    \"M\" [dur-second]\n   dur-hour          = 1*DIGIT \"H\" [dur-minute]\n   dur-time
    \         = \"T\" (dur-hour / dur-minute / dur-second)\n   dur-day           =
    1*DIGIT \"D\"\n   dur-week          = 1*DIGIT \"W\"\n   dur-month         = 1*DIGIT
    \"M\" [dur-day]\n   dur-year          = 1*DIGIT \"Y\" [dur-month]\n   dur-date
    \         = (dur-day / dur-month / dur-year) [dur-time]\n   duration          =
    \"P\" (dur-date / dur-time / dur-week)\n"
  - "Periods:\n   period-explicit   = iso-date-time \"/\" iso-date-time\n   period-start
    \     = iso-date-time \"/\" duration\n   period-end        = duration \"/\" iso-date-time\n
    \  period            = period-explicit / period-start / period-end\n"
  title: Appendix A. ISO 8601 Collected ABNF
- contents:
  - "Appendix B. Day of the Week\n   The following is a sample C subroutine loosely
    based on Zeller's\n   Congruence [Zeller] which may be used to obtain the day
    of the week\n   for dates on or after 0000-03-01:\n   char *day_of_week(int day,
    int month, int year)\n   {\n      int cent;\n      char *dayofweek[] = {\n         \"Sunday\",
    \"Monday\", \"Tuesday\", \"Wednesday\",\n         \"Thursday\", \"Friday\", \"Saturday\"\n
    \     };\n      /* adjust months so February is the last one */\n      month -=
    2;\n      if (month < 1) {\n         month += 12;\n         --year;\n      }\n
    \     /* split by century */\n      cent = year / 100;\n      year %= 100;\n      return
    (dayofweek[((26 * month - 2) / 10 + day + year\n                        + year
    / 4 + cent / 4 + 5 * cent) % 7]);\n   }\n"
  title: Appendix B. Day of the Week
- contents:
  - "Appendix C. Leap Years\n   Here is a sample C subroutine to calculate if a year
    is a leap year:\n   /* This returns non-zero if year is a leap year.  Must use
    4 digit\n      year.\n    */\n   int leap_year(int year)\n   {\n       return
    (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));\n   }\n"
  title: Appendix C. Leap Years
- contents:
  - "Appendix D. Leap Seconds\n   Information about leap seconds can be found at:\n
    \  <http://tycho.usno.navy.mil/leapsec.html>.  In particular, it notes\n   that:\n
    \     The decision to introduce a leap second in UTC is the\n      responsibility
    of the International Earth Rotation Service (IERS).\n      According to the CCIR
    Recommendation, first preference is given to\n      the opportunities at the end
    of December and June, and second\n      preference to those at the end of March
    and September.\n   When required, insertion of a leap second occurs as an extra
    second\n   at the end of a day in UTC, represented by a timestamp of the form\n
    \  YYYY-MM-DDT23:59:60Z.  A leap second occurs simultaneously in all\n   time
    zones, so that time zone relationships are not affected.  See\n   section 5.8
    for some examples of leap second times.\n   The following table is an excerpt
    from the table maintained by the\n   United States Naval Observatory.  The source
    data is located at:\n      <ftp://maia.usno.navy.mil/ser7/tai-utc.dat>\n   This
    table shows the date of the leap second, and the difference\n   between the time
    standard TAI (which isn't adjusted by leap seconds)\n   and UTC after that leap
    second.\n   UTC Date  TAI - UTC After Leap Second\n   --------  ---------------------------\n
    \  1972-06-30     11\n   1972-12-31     12\n   1973-12-31     13\n   1974-12-31
    \    14\n   1975-12-31     15\n   1976-12-31     16\n   1977-12-31     17\n   1978-12-31
    \    18\n   1979-12-31     19\n   1981-06-30     20\n   1982-06-30     21\n   1983-06-30
    \    22\n   1985-06-30     23\n   1987-12-31     24\n   1989-12-31     25\n   1990-12-31
    \    26\n   1992-06-30     27\n   1993-06-30     28\n   1994-06-30     29\n   1995-12-31
    \    30\n   1997-06-30     31\n   1998-12-31     32\n"
  title: Appendix D. Leap Seconds
- contents:
  - "Acknowledgements\n   The following people provided helpful advice for an earlier\n
    \  incarnation of this document:  Ned Freed, Neal McBurnett, David\n   Keegel,
    Markus Kuhn, Paul Eggert and Robert Elz.  Thanks are also due\n   to participants
    of the IETF Calendaring/Scheduling working group\n   mailing list, and participants
    of the time zone mailing list.\n   The following reviewers contributed helpful
    suggestions for the\n   present revision: Tom Harsch, Markus Kuhn, Pete Resnick,
    Dan Kohn.\n   Paul Eggert provided many careful observations regarding the\n   subtleties
    of leap seconds and time zone offsets.  The following\n   people noted corrections
    and improvements to earlier drafts: Dr John\n   Stockton, Jutta Degener, Joe Abley,
    and Dan Wing.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Chris Newman\n   Sun Microsystems\n   1050 Lakes Drive,
    Suite 250\n   West Covina, CA 91790 USA\n   EMail: chris.newman@sun.com\n   Graham
    Klyne (editor, this revision)\n   Clearswift Corporation\n   1310 Waterside\n
    \  Arlington Business Park\n   Theale, Reading  RG7 4SA\n   UK\n   Phone: +44
    11 8903 8903\n   Fax:   +44 11 8903 9000\n   EMail: GK@ACM.ORG\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2002).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
