- contents:
  - '  The SPIRITS (Services in PSTN requesting Internet Services) Protocol

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document describes the Services in PSTN (Public Switched\n
    \  Telephone Network) requesting Internet Services (SPIRITS) protocol.\n   The
    purpose of the SPIRITS protocol is to support services that\n   originate in the
    cellular or wireline PSTN and necessitate\n   interactions between the PSTN and
    the Internet.  On the PSTN side,\n   the SPIRITS services are most often initiated
    from the Intelligent\n   Network (IN) entities.  Internet Call Waiting and Internet
    Caller-ID\n   Delivery are examples of SPIRITS services, as are location-based\n
    \  services on the cellular network.  The protocol defines the building\n   blocks
    from which many other services can be built.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.   Introduction  . . . . . . . . . . . . . . . . . .
    . . . . . .  3\n        1.1.   Conventions used in this document. . . . . . .
    . . . .  3\n   2.   Overview of operations. . . . . . . . . . . . . . . . . .
    . .  3\n        2.1.   Terminology. . . . . . . . . . . . . . . . . . . . . .
    \ 6\n   3.   Using XML for subscription and notification . . . . . . . . .  7\n
    \  4.   XML format definition . . . . . . . . . . . . . . . . . . . .  8\n   5.
    \  Call-related events . . . . . . . . . . . . . . . . . . . . . 10\n        5.1.
    \  IN-specific requirements . . . . . . . . . . . . . . . 11\n        5.2.   Detection
    points and required parameters . . . . . . . 12\n               5.2.1.   Originating-side
    DPs. . . . . . . . . . . . . 12\n               5.2.2.   Terminating-side DPs.
    . . . . . . . . . . . . 14\n        5.3.   Services through dynamic DPs . . .
    . . . . . . . . . . 15\n               5.3.1.   Normative usage . . . . . . .
    . . . . . . . . 15\n               5.3.2.   Event package name. . . . . . . .
    . . . . . . 16\n               5.3.3.   Event package parameters. . . . . . .
    . . . . 16\n               5.3.4.   SUBSCRIBE bodies. . . . . . . . . . . . .
    . . 16\n               5.3.5.   Subscription duration . . . . . . . . . . . .
    17\n               5.3.6.   NOTIFY bodies . . . . . . . . . . . . . . . . 17\n
    \              5.3.7.   Notifier processing of SUBSCRIBE requests . . 18\n               5.3.8.
    \  Notifier generation of NOTIFY requests. . . . 18\n               5.3.9.   Subscriber
    processing of NOTIFY requests. . . 19\n               5.3.10.  Handling of forked
    requests . . . . . . . . . 19\n               5.3.11.  Rate of notifications .
    . . . . . . . . . . . 19\n               5.3.12.  State Agents. . . . . . . .
    . . . . . . . . . 20\n               5.3.13.  Examples. . . . . . . . . . . .
    . . . . . . . 20\n               5.3.14.  Use of URIs to retrieve state . . .
    . . . . . 25\n        5.4.   Services through static DPs. . . . . . . . . . .
    . . . 25\n               5.4.1.   Internet Call Waiting . . . . . . . . . . .
    . 26\n               5.4.2.   Call disposition choices. . . . . . . . . . . 26\n
    \              5.4.3.   Accepting an ICW session using VoIP . . . . . 28\n   6.
    \  Non-call related events . . . . . . . . . . . . . . . . . . . 29\n        6.1.
    \  Non-call events and their required parameters. . . . . 29\n        6.2.   Normative
    usage. . . . . . . . . . . . . . . . . . . . 30\n        6.3.   Event package
    name . . . . . . . . . . . . . . . . . . 30\n        6.4.   Event package parameters
    . . . . . . . . . . . . . . . 31\n        6.5.   SUBSCRIBE bodies . . . . . .
    . . . . . . . . . . . . . 31\n        6.6.   Subscription duration. . . . . .
    . . . . . . . . . . . 31\n        6.7.   NOTIFY bodies. . . . . . . . . . . .
    . . . . . . . . . 32\n        6.8.   Notifier processing of SUBSCRIBE requests.
    . . . . . . 32\n        6.9.   Notifier generation of NOTIFY requests . . . .
    . . . . 32\n        6.10.  Subscriber processing of NOTIFY requests . . . . .
    . . 33\n        6.11.  Handling of forked requests. . . . . . . . . . . . . .
    33\n        6.12.  Rate of notifications. . . . . . . . . . . . . . . . . 33\n
    \       6.13.  State Agents . . . . . . . . . . . . . . . . . . . . . 33\n        6.14.
    \ Examples . . . . . . . . . . . . . . . . . . . . . . . 33\n        6.15.  Use
    of URIs to retrieve state. . . . . . . . . . . . . 37\n   7.   IANA Considerations
    . . . . . . . . . . . . . . . . . . . . . 38\n        7.1.   Registering event
    packages . . . . . . . . . . . . . . 38\n        7.2.   Registering MIME type.
    . . . . . . . . . . . . . . . . 38\n        7.3.   Registering URN. . . . . .
    . . . . . . . . . . . . . . 39\n        7.4.   Registering XML schema . . . .
    . . . . . . . . . . . . 40\n   8.   Security Considerations . . . . . . . . .
    . . . . . . . . . . 40\n   9.   XML schema definition . . . . . . . . . . . .
    . . . . . . . . 42\n   10.  Acknowledgements. . . . . . . . . . . . . . . . .
    . . . . . . 45\n   11.  Acronyms. . . . . . . . . . . . . . . . . . . . . . .
    . . . . 45\n   12.  References. . . . . . . . . . . . . . . . . . . . . . . .
    . . 46\n   13.  Contributors. . . . . . . . . . . . . . . . . . . . . . . . .
    48\n   14.  Authors' Addresses. . . . . . . . . . . . . . . . . . . . . . 48\n
    \  15.  Full Copyright Statement. . . . . . . . . . . . . . . . . . . 50\n"
  title: Table of Contents
- contents:
  - "1. Introduction\n   SPIRITS (Services in the PSTN Requesting Internet Services)
    is an\n   IETF architecture and an associated protocol that enables call\n   processing
    elements in the telephone network to make service requests\n   that are then processed
    on Internet hosted servers.  The term Public\n   Switched Telephone Network (PSTN)
    is used here to include the\n   wireline circuit-switched network, as well as
    the wireless circuit-\n   switched network.\n   The earlier IETF work on the PSTN/Internet
    Interworking (PINT)\n   resulted in the protocol (RFC 2848) in support of the
    services\n   initiated in the reverse direction - from the Internet to PSTN.\n
    \  This document has been written in response to the SPIRITS WG chairs\n   call
    for SPIRITS Protocol proposals.  Among other contributions, this\n   document
    is based on:\n      o  Informational  \"Pre-SPIRITS implementations\" [10]\n      o
    \ Informational  \"The SPIRITS Architecture\" [1]\n      o  Informational  \"SPIRITS
    Protocol Requirements\" [4]\n"
  - contents:
    - "1.1.  Conventions used in this document\n   The key words \"MUST\", \"MUST
      NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\",
      \"RECOMMENDED\",  \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted
      as described in BCP 14, RFC 2119 [2].\n"
    title: 1.1.  Conventions used in this document
  title: 1. Introduction
- contents:
  - "2.  Overview of operations\n   The purpose of the SPIRITS protocol is to enable
    the execution of\n   services in the Internet based on certain events occurring
    in the\n   PSTN.  The term PSTN is used here to include all manner of switching;\n
    \  i.e. wireline circuit-switched network, as well as the wireless\n   circuit-switched
    network.\n   In general terms, an Internet host is interested in getting\n   notifications
    of certain events occurring in the PSTN.  When the\n   event of interest occurs,
    the PSTN notifies the Internet host.  The\n   Internet host can execute appropriate
    services based on these\n   notifications.\n                             +------+\n
    \                            | PSTN |\n                             |Events|\n
    \                            +------+\n                            /       \\\n
    \                          /         \\\n                  +-------+           +--------+\n
    \                 |Call   |           |Non-Call|\n                  |Related|
    \          |Related |\n                  +-------+           +--+-----+\n                 /
    \       \\              |\n                /          \\             |\n           +---/--+
    \    +---\\---+     +--+-----------------+\n           |Static|     |Dynamic|
    \    |Mobility Management/|\n           |      |     |       |     |Registration/De-
    \   |\n           +------+     +-------+     |registration        |\n                                      +--------------------+\n
    \                    Figure 1: The SPIRITS Hierarchy.\n   Figure 1 contains the
    SPIRITS events hierarchy, including their\n   subdivision in two discrete classes
    for service execution: events\n   related to the setup, teardown and maintenance
    of a call and events\n   un-related to call setup, teardown or maintenance.  Example
    of the\n   latter class of events are geo-location mobility events that are\n
    \  tracked by the cellular PSTN.  SPIRITS will specify the framework to\n   provide
    services for both of these types of events.\n   Call-related events, its further
    subdivisions, and how they enable\n   services in the Internet is contained in
    Section 5.  Services enabled\n   from events not related to call setup, teardown,
    or maintenance are\n   covered in detail in Section 6.\n   For reference, the
    SPIRITS architecture from [1] is reproduced below.\n   This document is focused
    on interfaces B and C only.  Interface D is\n   a matter of local policy; the
    PSTN operator may have a functional\n   interface between the SPIRITS client or
    a message passing interface.\n   This document does not discuss interface D in
    any detail.\n             +--------------+\n             | Subscriber's |\n             |
    \  IP Host    |              +--------------+\n             |              |              |
    \             |\n             | +----------+ |              | +----------+ |\n
    \            | | PINT     | |      A       | | PINT     | |\n             | |
    \ Client  +<-------/-------->+  Gateway +<-----+\n             | +----------+
    |              | +----------+ |    |\n             |              |              |
    \             |    |\n             | +----------+ |              | +----------+
    |    |\n             | | SPIRITS  | |      B       | | SPIRITS  | |    |\n             |
    |  Server  +<-------/-------->+  Gateway | |    |\n             | +----------+
    |              | +--------+-+ |    |\n             |              |              |
    \         ^   |    |\n             +--------------+              +----------|---+
    \   |\n                                                      |        |\n                                      IP
    Network      |        |\n            ------------------------------------------|--------|---\n
    \                                     PSTN            / C      / E\n                                                      |
    \       |\n                                                      v        |\n
    \                                                +----+------+ |\n                                                 |
    SPIRITS   | |\n                                                 |   Client  |
    v\n               +-------------------+         +---+-----D-----+-++\n               |
    Service Switching |INAP/SS7 | Service Control  |\n               |    Function
    \      +---------+     Function     |\n               +----+--------------+         +------------------+\n
    \                   |\n                    |line\n                   +-+\n                   [0]
    Subscriber's telephone\n                    Figure 2: The SPIRITS Architecture.\n
    \    (Note: The interfaces A-E are described in detail in the SPIRITS\n                        Architecture
    document [1].)\n   The PSTN today supports service models such as the Intelligent\n
    \  Network (IN), whereby some features are executed locally on switching\n   elements
    called Service Switching Points (SSPs).  Other features are\n   executed on service
    elements called Service Control Points (SCPs).\n   The SPIRITS architecture [1]
    permits these SCP elements to act as\n   intelligent entities to leverage and
    use Internet hosts and\n   capabilities to further enhance the telephone end-user's
    experience.\n   The protocol used on interfaces B and C consists of the SPIRITS\n
    \  protocol, and is based on SIP and SIP event notification [3].  The\n   requirements
    of a SPIRITS protocol and the choice of using SIP as an\n   enabler are detailed
    in [4].\n   The SPIRITS protocol is a set of two \"event packages\" [3].  It\n
    \  contains the procedural rules and semantic context that must be\n   applied
    to these rules for processing SIP transactions.  The SPIRITS\n   protocol has
    to carry subscriptions for events from the SPIRITS\n   server to the SPIRITS client
    and notifications of these events from\n   the SPIRITS client to the SPIRITS server.
    \ Extensible Markup Language\n   (XML) [12] is used to codify the subscriptions
    and notifications.\n   Finally, in the context of ensuing discussion, the terms
    \"SPIRITS\n   server\" and \"SPIRITS client\" are somewhat confusing since the
    roles\n   appear reversed; to wit, the \"SPIRITS server\" issues a subscription\n
    \  which is accepted by a \"SPIRITS client\".  To mitigate such ambiguity,\n   from
    now on, we will refer to the \"SPIRITS server\" as a \"SPIRITS\n   subscriber\"
    and to the \"SPIRITS client\" as a \"SPIRITS notifier\".\n   This convention adheres
    to the nomenclature outlined in [3]; the\n   SPIRITS server in Figure 2 is a subscriber
    (issues subscriptions to\n   events), and the SPIRITS client in Figure 2 is a
    notifier (issues\n   notifications whenever the event of interest occurs).\n"
  - contents:
    - "2.1.  Terminology\n   For ease of reference, we provide a terminology of the
      SPIRITS actors\n   discussed in the preceding above:\n   Service Control Function
      (SCF): A PSTN entity that executes service\n   logic.  It provides capabilities
      to influence the call processing\n   occurring in the Service Switching Function
      (SSF).  For more\n   information on how a SCF participates in the SPIRITS architecture,\n
      \  please see Sections 5 and 5.1.\n   SPIRITS client: see SPIRITS notifier.\n
      \  SPIRITS server: see SPIRITS subscriber.\n   SPIRITS notifier: A User Agent
      (UA) in the PSTN that accepts\n   subscriptions from SPIRITS subscribers.  These
      subscriptions contain\n   events that the SPIRITS subscribers are interested
      in receiving a\n   notification for.  The SPIRITS notifier interfaces with the
      Service\n   Control Function such that when the said event occurs, a notification\n
      \  will be sent to the relevant SPIRITS subscriber.\n   SPIRITS subscriber:
      A UA in the Internet that issues a subscription\n   containing events in the
      PSTN that it is interested in receiving a\n   notification for.\n"
    title: 2.1.  Terminology
  title: 2.  Overview of operations
- contents:
  - "3.  Using XML for subscription and notification\n   The SPIRITS protocol requirements
    mandate that \"SPIRITS-related\n   parameters be carried in a manner consistent
    with SIP practices\"\n   (RFC3298:Section 3).  SIP already provides payload description\n
    \  capabilities through the use of headers (Content-Type, Content-\n   Length).
    \ This document defines a new MIME type --\n   \"application/spirits-event+xml\"
    -- and registers it with IANA\n   (Section 7).  This MIME type MUST be present
    in the \"Content-Type\"\n   header of SPIRITS requests and responses, and it describes
    an XML\n   document that contains SPIRITS-related information.\n   This document
    defines a base XML schema for subscriptions to PSTN\n   events.  The list of events
    that can be subscribed to is defined in\n   the SPIRITS protocol requirements
    document [4] and this document\n   provides an XML schema for it.  All SPIRITS
    subscribers (any SPIRITS\n   entity capable of issuing a SUBSCRIBE, REGISTER,
    or INVITE request)\n   MUST support this schema.  All SPIRITS notifiers (any SPIRITS
    entity\n   capable of receiving and processing a SUBSCRIBE, REGISTER, or INVITE\n
    \  request) MUST support this schema.  The schema is defined in Section\n   9.\n
    \     The support for the SIP REGISTER request is included for PINT\n      compatibility
    (RFC3298:Section 6).\n      The support for the SIP INVITE request is mandated
    because pre-\n      existing SPIRITS implementations did not use the SIP event\n
    \     notification scheme.  Instead, the initial PSTN detection point\n      always
    arrived via the SIP INVITE request.\n   This document also defines a base XML
    schema for notifications of\n   events (Section 9).  All SPIRITS notifiers MUST
    generate XML\n   documents that correspond to the base notification  schema.  All\n
    \  SPIRITS subscribers MUST support XML documents that correspond to\n   this
    schema.\n   The set of events that can be subscribed to and the amount of\n   notification
    that is returned by the PSTN entity may vary among\n   different PSTN operators.
    \ Some PSTN operators may have a rich set of\n   events that can be subscribed
    to, while others have only the\n   primitive set of events outlined in the SPIRITS
    protocol requirements\n   document [4].  This document defines a base XML schema
    (in Section 9)\n   which MUST be used for the subscription and notification of
    the\n   primitive set of events.  In order to support a richer set of event\n
    \  subscription and notification, implementations MAY use additional XML\n   namespaces
    corresponding to alternate schemas in a SPIRITS XML\n   document.  However, all
    implementations MUST support the base XML\n   schema defined in Section 9 of this
    document.  Use of the base schema\n   ensures interoperability across implementations,
    and the inclusion of\n   additional XML namespaces allows for customization.\n
    \  A logical flow of the SPIRITS protocol is depicted below (note: this\n   example
    shows a temporal flow; XML documents and related SPIRITS\n   protocol syntax is
    specified in later sections of this document).  In\n   the flow below, S is the
    SPIRITS subscriber and N is the SPIRITS\n   notifier.  The SPIRIT Gateway is presumed
    to have a pure proxying\n   functionality and thus is omitted for simplicity:\n
    \  1  S->N Subscribe (events of interest in an XML document instance\n                      using
    base subscription schema)\n   2  N->S 200 OK (Subscribe)\n   3  N->S Notify\n
    \  4  S->N 200 OK (Notify communicating current resource state)\n   5  ...\n   6
    \ N->S Notify (Notify communicating change in resource state;\n                   payload
    is an XML document instance using\n                   XML extensions to the base
    notification schema)\n   7  S->N 200 OK (Notify)\n   In line 1, the SPIRITS subscriber
    subscribes to certain events using\n   an XML document based on the base schema
    defined in this document.\n   In line 6, the SPIRITS notifier notifies the SPIRITS
    subscriber of\n   the occurrence of the event using extensions to the base notification\n
    \  schema.  Note that this document defines a base schema for event\n   notification
    as well; the SPIRITS notifier could have availed itself\n   of these.  Instead,
    it chooses to pass to the SPIRITS subscriber an\n   XML document composed of extensions
    to the base notification schema.\n   The SPIRITS subscriber, if it understands
    the extensions, can\n   interpret the XML document accordingly.  However, in the
    event that\n   the SPIRITS subscriber is not programmed to understand the\n   extensions,
    it MUST search the XML document for the mandatory\n   elements.  These elements
    MUST be present in all notification schemas\n   and are detailed in Section 9.\n"
  title: 3.  Using XML for subscription and notification
- contents:
  - "4.  XML format definition\n   This section defines the XML-encoded SPIRITS payload
    format.  Such a\n   payload is a well formed XML document and is produced by SPIRITS\n
    \  notifiers and SPIRITS subscribers.\n   The namespace URI for elements defined
    in this document is a Uniform\n   Resource Name (URN) [14], using the namespace
    identifier 'ietf'\n   defined in [15] and extended by [16]:\n      urn:ietf:params:xml:ns:spirits-1.0\n
    \  SPIRITS XML documents may have a default namespace, or they may be\n   associated
    with a namespace prefix following the convention\n   established in XML namespaces
    [17].  Regardless, the elements and\n   attributes of SPIRITS XML documents MUST
    conform to the SPIRITS XML\n   schema specified in Section 9.\n   The <spirits-event>
    element\n      The root of a SPIRITS XML document (characterized by a Content-\n
    \     Type header of \"application/spirits-event+xml\">) is the <spirits-\n      event>
    element.  This element MUST contain a namespace declaration\n      ('xmlns') to
    indicate the namespace on which the XML document is\n      based.  XML documents
    compliant to the SPIRITS protocol MUST\n      contain the URN \"urn:ietf:params:xml:ns:spirits-1.0\"
    in the\n      namespace declaration.  Other namespaces may be specified as\n      needed.\n
    \     <spirits-event> element MUST contain at least one <Event> element,\n      and
    MAY contain more than one.\n   The <Event> element\n      The <Event> element
    contains three attributes, two of which are\n      mandatory.  The first mandatory
    attribute is a 'type' attribute\n      whose value is either \"INDPs\" or \"userprof\".\n
    \     These types correspond, respectively, to call-related events\n      described
    in Section 5 and non-call related events described in\n      Section 6.\n      The
    second mandatory attribute is a 'name' attribute.  Values for\n      this attribute
    MUST be limited to the SPIRITS mnemonics defined in\n      Section 5.2.1, Section
    5.2.2, and Section 6.1.\n      The third attribute, which is optional, is a 'mode'
    attribute.\n      The value of 'mode' is either \"N\" or \"R\", corresponding\n
    \     respectively to (N)otification or (R)equest (RFC3298:Section 4).\n      The
    default value of this attribute is \"N\".\n      If the 'type' attribute of the
    <Event> element is \"INDPs\", then it\n      MUST contain at least one or more
    of the following elements\n      (unknown elements MAY be ignored):  <CallingPartyNumber>,\n
    \     <CalledPartyNumber>, <DialledDigits>, or <Cause>.  These elements\n      are
    defined in Section 5.2; they MUST not contain any attributes\n      and MUST not
    be used further as parent elements.  These elements\n      contain a string value
    as described in Section 5.2.1 and 5.2.2.\n      If the 'type' attribute of the
    <Event> element is \"userprof\", then\n      it MUST contain a <CalledPartyNumber>
    element and it MAY contain a\n      <Cell-ID> element.  None of these elements
    contain any attributes\n      and neither must be used further as a parent element.
    \ These\n      elements contain a string value as described in Section 6.1.  All\n
    \     other elements MAY be ignored if not understood.\n   A SPIRITS-compliant
    XML document using the XML namespace defined in\n   this document might look like
    the following example:\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <spirits-event
    xmlns=\"urn:ietf:params:xml:ns:spirits-1.0\">\n      <Event type=\"INDPs\" name=\"OD\"
    mode=\"N\">\n         <CallingPartyNumber>5551212</CallingPartyNumber>\n      </Event>\n
    \     <Event type=\"INDPs\" name=\"OAB\" mode=\"N\">\n         <CallingPartyNumber>5551212</CallingPartyNumber>\n
    \     </Event>\n   </spirits-event>\n"
  title: 4.  XML format definition
- contents:
  - "5.  Call-related events\n   For readers who may not be familiar with the service
    execution\n   aspects of PSTN/IN, we provide a brief tutorial next.  Interested\n
    \  readers are urged to consult [19] for a detailed treatment of this\n   subject.\n
    \  Services in the PSTN/IN are executed based on a call model.  A call\n   model
    is a finite state machine used in SSPs and other call\n   processing elements
    that accurately and concisely reflects the\n   current state of a call at any
    given point in time.  Call models\n   consist of states called PICs (Points In
    Call) and transitions\n   between states.  Inter-state transitions pass through
    elements called\n   Detection Points or DPs.  DPs house one or more triggers.
    \ Every\n   trigger has a firing criteria associated with it.  When a trigger
    is\n   armed (made active), and its associated firing criteria are\n   satisfied,
    it fires.  The particulars of firing criteria may vary\n   based on the call model
    being supported.\n   When a trigger fires, a message is formatted with call state\n
    \  information and transmitted by the SSP to the SCP.  The SCP then\n   reads
    this call related data and generates a response which the SSP\n   then uses in
    further call processing.\n   Detection Points are of two types: TDPs (or Trigger
    Detection\n   Points), and EDPs (or Event Detection Points).  TDPs are provisioned\n
    \  with statically armed triggers (armed through Service Management\n   Tools).
    \ EDPs are dynamically armed triggers (armed by the SCP as\n   call processing
    proceeds).  DPs may also be classified as \"Request\"\n   or \"Notification\"
    DPs.  Thus, one can have TDP-R's, TDP-N's, EDP-R's\n   and EDP-N's.\n   The \"-R\"
    type of DPs require the SSP to suspend call processing when\n   communication
    with the SCP is initiated.  Call processing resumes\n   when a response is received.
    \ The \"-N\" type of DPs enable the SSP to\n   continue with call processing when
    the trigger fires, after it sends\n   out the message to the SCP, notifying it
    that a certain event has\n   occurred.\n   Call models typically support different
    types of detection points.\n   Note that while INAP and the IN Capability Set
    (CS)-2 [7] call model\n   are used in this document as examples, and for ease
    of explanation,\n   other call models possess similar properties.  For example,
    the\n   Wireless Intelligent Network (WIN) call model also supports the\n   dynamic
    arming of triggers.  Thus, the essence of this discussion\n   applies not just
    to the wireline domain, but applies equally well to\n   the wireless domain as
    well.\n   When the SCP receives the INAP formatted message from the SSP, if the\n
    \  SCP supports the SPIRITS architecture, it can encode the INAP message\n   contents
    into a SPIRITS protocol message which is then transmitted to\n   SPIRITS-capable
    elements in the IP network.  Similarly, when it\n   receives responses back from
    said SPIRITS capable elements, it can\n   reformat the response content into the
    INAP format and forward these\n   messages back to SSPs.  Thus the process of
    inter-conversion and/or\n   encoding between the INAP parameters and the SPIRITS
    protocol is of\n   primary interest.\n   An SCP is a physical manifestation of
    the Service Control Function.\n   An SSP is a physical manifestation of the Service
    Switching Function\n   (and the Call Control Function).  To support uniformity
    of\n   nomenclature between the various SPIRITS drafts, we shall use the\n   terms
    SCP and SCF, and SSP and SSF interchangeably in this document.\n"
  - contents:
    - "5.1.  IN-specific requirements\n   Section 4 of [4] outlines the IN-related
      requirements on the SPIRITS\n   protocol.  The SUBSCRIBE request arriving at
      the SPIRITS notifier\n   MUST contain the events to be monitored (in the form
      of a DP list),\n   the mode (request or a notification, the difference being
      that for a\n   request, the SPIRITS subscriber can influence subsequent call\n
      \  processing and for a notification, no further influence is needed),\n   and
      any DP-related parameters.\n   Section 4 of [4] also enumerates a list of Capability
      Set 3 (CS-3)\n   DPs for SPIRITS services.  It is a requirement (RFC3298:Section
      4)\n   that the SPIRITS protocol specify the relevant parameters of the DPs.\n
      \  These DPs and their relevant parameters to be carried in a SUBSCRIBE\n   request
      are codified in an XML schema.  All SPIRITS subscribers MUST\n   understand
      this schema for subscribing to the DPs in the PSTN.  The\n   schema is defined
      in Section 9.\n   When a DP fires, a notification -- using a SIP NOTIFY request
      -- is\n   transmitted from the SPIRITS notifier to the SPIRITS subscriber.  The\n
      \  NOTIFY request contains an XML document which describes the DP that\n   fired
      and any relevant parameters.  The DPs and their relevant\n   parameters to be
      carried in a NOTIFY request are codified in an XML\n   schema.  All SPIRITS
      notifiers MUST understand this schema; this\n   schema MAY be extended.  The
      schema is defined in Section 9.\n   In addition, Appendices A and B of [6] contain
      a select subset of\n   CS-2 DPs that may be of interest to the reader.  However,
      this\n   document will only refer to CS-3 DPs outlined in [4].\n"
    title: 5.1.  IN-specific requirements
  - contents:
    - "5.2.  Detection points and required parameters\n   The IN CS-3 DPs envisioned
      for SPIRITS services (RFC3298:Section 4)\n   are described next.  IN DPs are
      characterized by many parameters,\n   however, not all such parameters are required
      -- or even needed -- by\n   SPIRITS.  This section, thus, serves to list the
      mandatory parameters\n   for each DP that MUST be specified in subscriptions
      and\n   notifications.  Implementations can specify additional parameters as\n
      \  XML extensions associated with a private (or public and standardized)\n   namespace.\n
      \  The exhaustive list of IN CS-3 DPs and their parameters can be found\n   in
      reference [13].\n   Each DP is given a SPIRITS-specific mnemonic for use in
      the\n   subscriptions and notifications.\n"
    - contents:
      - "5.2.1.  Originating-side DPs\n   Origination Attempt Authorized\n   SPIRITS
        mnemonic: OAA\n   Mandatory parameter in SUBSCRIBE: CallingPartyNumber\n   Mandatory
        parameters in NOTIFY: CallingPartyNumber, CalledPartyNumber\n   CallingPartyNumber:
        A string used to identify the calling party for\n   the call.  The actual
        length and encoding of this parameter depend on\n   the particulars of the
        dialing plan used.\n   CalledPartyNumber: A string containing the number (e.g.,
        called\n   directory number) used to identify the called party.  The actual\n
        \  length and encoding of this parameter depend on the particulars of\n   the
        dialing plan used.\n   Collected Information\n   SPIRITS mnemonic: OCI\n   Mandatory
        parameter in SUBSCRIBE: CallingPartyNumber\n   Mandatory parameters in NOTIFY:
        CallingPartyNumber, DialledDigits\n   DialledDigits: This parameter contains
        non-translated address\n   information collected/received from the originating
        user/line/trunk\n   Analyzed Information\n   SPIRITS mnemonic: OAI\n   Mandatory
        parameter in SUBSCRIBE: CallingPartyNumber\n   Mandatory parameters in NOTIFY:
        CallingPartyNumber, DialledDigits\n   Origination Answer\n   SPIRITS mnemonic:
        OA\n   Mandatory parameter in SUBSCRIBE: CallingPartyNumber\n   Mandatory
        parameters in NOTIFY: CallingPartyNumber, CalledPartyNumber\n   Origination
        Term Seized\n   SPIRITS mnemonic: OTS\n   Mandatory parameter in SUBSCRIBE:
        CallingPartyNumber\n   Mandatory parameter in NOTIFY: CallingPartyNumber,
        CalledPartyNumber\n   Origination No Answer\n   SPIRITS mnemonic: ONA\n   Mandatory
        parameter in SUBSCRIBE: CallingPartyNumber\n   Mandatory parameter in NOTIFY:
        CallingPartyNumber, CalledPartyNumber\n   Origination Called Party Busy\n
        \  SPIRITS mnemonic: OCPB\n   Mandatory parameter in SUBSCRIBE: CallingPartyNumber\n
        \  Mandatory parameters in NOTIFY: CallingPartyNumber, CalledPartyNumber\n
        \  Route Select Failure\n   SPIRITS mnemonic: ORSF\n   Mandatory parameter
        in SUBSCRIBE: CallingPartyNumber\n   Mandatory parameter in NOTIFY: CallingPartyNumber,
        CalledPartyNumber\n   Origination Mid Call\n   SPIRITS mnemonic: OMC\n   Mandatory
        parameter in SUBSCRIBE: CallingPartyNumber\n   Mandatory parameter in NOTIFY:
        CallingPartyNumber\n   Origination Abandon\n   SPIRITS mnemonic: OAB\n   Mandatory
        parameter in SUBSCRIBE: CallingPartyNumber\n   Mandatory parameter in NOTIFY:
        CallingPartyNumber\n   Origination Disconnect\n   SPIRITS mnemonic: OD\n   Mandatory
        parameter in SUBSCRIBE: CallingPartyNumber\n   Mandatory parameter in NOTIFY:
        CallingPartyNumber, CalledPartyNumber\n"
      title: 5.2.1.  Originating-side DPs
    - contents:
      - "5.2.2.  Terminating-side DPs\n   Termination Answer\n   SPIRITS mnemonic:
        TA\n   Mandatory parameter in SUBSCRIBE: CalledPartyNumber\n   Mandatory parameters
        in NOTIFY: CallingPartyNumber, CalledPartyNumber\n   Termination No Answer\n
        \  SPIRITS mnemonic: TNA Mandatory parameter in SUBSCRIBE:\n   CalledPartyNumber\n
        \  Mandatory parameters in NOTIFY: CallingPartyNumber, CalledPartyNumber\n
        \  Termination Mid-Call\n   SPIRITS mnemonic: TMC\n   Mandatory parameter
        in SUBSCRIBE: CalledPartyNumber\n   Mandatory parameter in NOTIFY: CalledPartyNumber\n
        \  Termination Abandon\n   SPIRITS mnemonic: TAB\n   Mandatory parameter in
        SUBSCRIBE: CalledPartyNumber\n   Mandatory parameter in NOTIFY: CalledPartyNumber\n
        \  Termination Disconnect\n   SPIRITS mnemonic: TD\n   Mandatory parameter
        in SUBSCRIBE: CalledPartyNumber\n   Mandatory parameters in NOTIFY: CalledPartyNumber,
        CallingPartyNumber\n   Termination Attempt Authorized\n   SPIRITS mnemonic:
        TAA\n   Mandatory parameter in SUBSCRIBE: CalledPartyNumber\n   Mandatory
        parameters in NOTIFY: CalledPartyNumber, CallingPartyNumber\n   Termination
        Facility Selected and Available\n   SPIRITS mnemonic: TFSA\n   Mandatory parameter
        in SUBSCRIBE: CalledPartyNumber\n   Mandatory parameter in NOTIFY: CalledPartyNumber\n
        \  Termination Busy\n   SPIRITS mnemonic: TB\n   Mandatory parameter in SUBSCRIBE:
        CalledPartyNumber\n   Mandatory parameters in NOTIFY: CalledPartyNumber,\n
        \  CallingPartyNumber, Cause\n   Cause: This parameter contains a string value
        of either \"Busy\" or\n   \"Unreachable\".  The difference between these is
        translated as a\n   requirement (RFC3298:Section 5) to aid in the SPIRITS
        subscriber in\n   determining if the called party is indeed busy (engaged),
        or if the\n   called party is unavailable (as it would be if it were on the\n
        \  cellular PSTN and the mobile subscriber was not registered with the\n   network).\n"
      title: 5.2.2.  Terminating-side DPs
    title: 5.2.  Detection points and required parameters
  - contents:
    - "5.3.  Services through dynamic DPs\n   Triggers in the PSTN can be armed dynamically,
      often outside the\n   context of a call.  The SIP event notification mechanism
      [3] is,\n   therefore, a convenient means to exploit in those cases where\n
      \  triggers housed in EDPs fire (see section 3 of [4]).  Note that [4]\n   uses
      the term \"persistent\" to refer to call-related DP arming and\n   associated
      interactions.\n   The SIP Events Package enables IP endpoints (or hosts) to
      subscribe\n   to and receive subsequent notification of events occurring in
      the\n   PSTN.  With reference to Figure 2, this includes communication on the\n
      \  interfaces marked \"B\" and \"C\".\n"
    - contents:
      - "5.3.1.  Normative usage\n   A subscriber will issue a SUBSCRIBE request which
        identifies a set of\n   events (DPs) it is interested in getting the notification
        of.  This\n   set MUST contain at least one DP, it MAY contain more than one.
        \ The\n   SUBSCRIBE request is routed to the notifier, where it is accepted,\n
        \  pending a successful authentication.\n   When any of the DPs identified
        in the set of events fires, the\n   notifier will format a NOTIFY request
        and direct it towards the\n   subscriber.  The NOTIFY request will contain
        information pertinent to\n   the event that was triggered.  The un-encountered
        DPs MUST be\n   subsequently dis-armed by the SPIRITS notifier and/or the
        SCF.\n   The dialog established by the SUBSCRIBE terminates when the event
        of\n   interest occurs and this notification is passed to the subscriber\n
        \  through a NOTIFY request.  If the subscriber is interested in the\n   future
        occurrence of the same event, it MUST issue a new SUBSCRIBE\n   request, establishing
        a new dialog.\n   When the subscriber receives a NOTIFY request, it can subsequently\n
        \  choose to act in a manner appropriate to the notification.\n   The remaining
        sections fill in the specific package responsibilities\n   raised in RFC3265
        [3], Section 4.4.\n"
      title: 5.3.1.  Normative usage
    - contents:
      - "5.3.2.  Event package name\n   This document defines two event packages;
        the first of these is\n   defined in this section and is called \"spirits-INDPs\".
        \ This package\n   MUST be used for events corresponding to IN detection points
        in the\n   cellular or wireline PSTN.  All entities that implement the SPIRITS\n
        \  protocol and support IN detection points MUST set the \"Event\" request\n
        \  header [3] to \"spirits-INDPs.\"  The \"Allow-Events\" general header [3]\n
        \  MUST include the token \"spirits-INDPs\" if the entity implements the\n
        \  SPIRITS protocol and supports IN detection points.\n      Event: spirits-INDPs\n
        \     Allow-Events: spirits-INDPs\n   The second event package is defined
        and discussed in Section 6.\n"
      title: 5.3.2.  Event package name
    - contents:
      - "5.3.3.  Event package parameters\n   The \"spirits-INDPs\" event package
        does not support any additional\n   parameters to the Event header.\n"
      title: 5.3.3.  Event package parameters
    - contents:
      - "5.3.4.  SUBSCRIBE bodies\n   SUBSCRIBE requests that serve to terminate the
        subscription MAY\n   contain an empty body; however, SUBSCRIBE requests that
        establish a\n   dialog MUST contain a body which encodes three pieces of information:\n
        \     (1) The set of events (DPs) that is being subscribed to.  A\n      subscriber
        MAY subscribe to multiple DPs in one SUBSCRIBE request,\n      or MAY issue
        a different SUBSCRIBE request for each DP it is\n      interested in receiving
        a notification for.  The protocol allows\n      for both forms of representation,
        however, it recommends the\n      former manner of subscribing to DPs if the
        service depends on any\n      of the DPs being triggered.\n      (2) Because
        of the requirement [4] that IN be informed whether the\n      detection point
        is set as the request or notification, all events\n      in the \"spirits-INDPs\"
        package (but not in the \"spirits-user-prof\"\n      package) are required
        to provide a \"mode\" parameter, whose values\n      are \"R\" (for Request)
        and \"N\" for notification.\n      (3) A list of the values of the parameters
        associated with the\n      event detection point (Note: the term \"event\"
        here refers to the\n      IN usage -- a dynamically armed DP is called an
        Event Detection\n      Point).  Please see Section 5.2.1 and Section 5.2.2
        for a list of\n      parameters associated with each DP.\n   The default body
        type for SUBSCRIBEs in SPIRITS is denoted by the\n   MIME type \"application/spirits-event+xml\".
        \ The \"Accept\" header, if\n   present, MUST include this MIME type.\n"
      title: 5.3.4.  SUBSCRIBE bodies
    - contents:
      - "5.3.5.  Subscription duration\n   For package \"spirits-INDPs\", the purpose
        of the SUBSCRIBE request is\n   to arm the DP, since as far as IN is concerned,
        being armed is the\n   first essential pre-requisite.  A DP maybe armed either
        statically\n   (for instance, through service provisioning), or dynamically
        (by the\n   SCF).  A statically armed DP remains armed until it is disarmed\n
        \  proactively.  A dynamically armed DP remains armed for the duration\n   of
        a call (or more appropriately, no longer than the duration of a\n   particular
        SSF-SCF relationship).\n   Dynamically armed DPs are automatically disarmed
        when the event of\n   interest occurs in the notifier.  It is up to the subscriber
        to re-\n   arm the DPs within the context of a call, if it so desires.\n   Statically
        armed DPs are considered outside the scope of the SPIRITS\n   protocol requirements
        [4] and thus will not be considered any\n   further.\n"
      title: 5.3.5.  Subscription duration
    - contents:
      - "5.3.6.  NOTIFY bodies\n   Bodies in NOTIFY requests for the \"spirits-INDPs\"
        package are\n   optional.  If present, they MUST be of the MIME type\n   \"application/spirits-event+xml\".
        \ The body in a NOTIFY request\n   encapsulates the following pieces of information
        which can be used by\n   the subscriber:\n      (1) The event that resulted
        in the NOTIFY being generated\n      (typically, but not always, this will
        be the same event present in\n      the corresponding SUBSCRIBE request).\n
        \     (2) The \"mode\" parameter; it is simply reflected back from the\n      corresponding
        SUBSCRIBE request.\n      (3) A list of values of the parameters associated
        with the event\n      that the NOTIFY is being generated for.  Depending on
        the actual\n      event, the list of the parameters will vary.\n   If the
        subscriber armed multiple DPs as part of a single SUBSCRIBE\n   request, all
        the un-encountered DPs that were part of the same\n   SUBSCRIBE dialog MUST
        be dis-armed by the SPIRITS notifier and/or the\n   SCF/SCP.\n"
      title: 5.3.6.  NOTIFY bodies
    - contents:
      - "5.3.7.  Notifier processing of SUBSCRIBE requests\n   When the notifier receives
        a SUBSCRIBE request, it MUST authenticate\n   the request and ensure that
        the subscriber is authorized to access\n   the resource being subscribed to,
        in this case, PSTN/IN events on a\n   certain PSTN line.\n   Once the SUBSCRIBE
        request has been authenticated and authorized, the\n   notifier interfaces
        with the SCF over interface D to arm the\n   detection points corresponding
        to the PSTN line contained in the\n   SUBSCRIBE body.  The particulars about
        interface D is out of scope\n   for this document; here we will simply assume
        that the notifier can\n   affect the arming (and disarming) of triggers in
        the PSTN through\n   interface D.\n"
      title: 5.3.7.  Notifier processing of SUBSCRIBE requests
    - contents:
      - "5.3.8.  Notifier generation of NOTIFY requests\n   If the notifier expects
        the arming of triggers to take more than 200\n   ms, it MUST send a 202 response
        to the SUBSCRIBE request immediately,\n   accepting the subscription.  It
        should then send a NOTIFY request\n   with an empty body.  This NOTIFY request
        MUST have a \"Subscription-\n   State\" header with a value of \"pending\".\n
        \        This immediate NOTIFY with an empty body is needed since the\n         resource
        identified in the SUBSCRIBE request does not have as\n         yet a meaningful
        state.\n   Once the notifier has successfully interfaced with the SCF, it
        MUST\n   send a subsequent NOTIFY request with an empty body and a\n   \"Subscription-State\"
        header with a value of \"active.\"\n   When the event of interest identified
        in the SUBSCRIBE request\n   occurs, the notifier sends out a new NOTIFY request
        which MUST\n   contain a body (see Section 5.3.6).  The NOTIFY request MUST
        have a\n   \"Subscription-State\" header and its value MUST be set to \"terminated\"\n
        \  with a reason parameter of \"fired\".\n"
      title: 5.3.8.  Notifier generation of NOTIFY requests
    - contents:
      - "5.3.9.  Subscriber processing of NOTIFY requests\n   The exact steps executed
        at the subscriber when it gets a NOTIFY\n   request will depend on the service
        being implemented.  As a\n   generality, the UA associated with the subscriber
        should somehow\n   impart this information to the user by visual or auditory
        means, if\n   at all possible.\n   If the NOTIFY request contained a \"Subscription-State\"
        header with a\n   value of \"terminated\" and a reason parameter of \"fired\",
        the UA\n   associated with the subscriber MAY initiate a new subscription
        for\n   the event that was just reported through the NOTIFY request.\n         Whether
        or not to initiate a new subscription when an existing\n         one expires
        is up to the context of the service that is being\n         implemented.  For
        instance, a user may configure her UA to\n         always re-subscribe to
        the same event when it fires, but this\n         is not necessarily the normative
        case.\n"
      title: 5.3.9.  Subscriber processing of NOTIFY requests
    - contents:
      - "5.3.10.  Handling of forked requests\n   Forking of SUBSCRIBE requests is
        prohibited.  Since the SUBSCRIBE\n   request is targeted towards the PSTN,
        highly irregular behaviors\n   occur if the request is allowed to fork.  The
        normal SIP DNS lookup\n   and routing rules [11] should result in a target
        set with exactly one\n   element: the notifier.\n"
      title: 5.3.10.  Handling of forked requests
    - contents:
      - "5.3.11.  Rate of notifications\n   For reasons of security more than network
        traffic, it is RECOMMENDED\n   that the notifier issue two or, at most three
        NOTIFY requests for a\n   subscription.  If the subscription was accepted
        with a 202 response,\n   a NOTIFY will be sent immediately towards the subscriber.
        \ This\n   NOTIFY serves to inform the subscriber that the request has been\n
        \  accepted and is being acted on.\n   Once the resource (detection points)
        identified in the SUBSCRIBE\n   request have been initialized, the notifier
        MUST send a second NOTIFY\n   request.  This request contains the base state
        of the resource.\n   When an event of interest occurs which leads to the firing
        of the\n   trigger associated with the detection points identified in the\n
        \  SUBSCRIBE request, a final NOTIFY is sent to the subscriber.  This\n   NOTIFY
        request contains more information about the event of interest.\n   If the
        subscription was accepted with a 200 response, the notifier\n   simply sends
        two NOTIFY requests: one containing the base state of\n   the resource, and
        the other containing information that lead to the\n   firing of the detection
        point.\n"
      title: 5.3.11.  Rate of notifications
    - contents:
      - "5.3.12.  State agents\n   State agents are not used in SPIRITS.\n"
      title: 5.3.12.  State agents
    - contents:
      - "5.3.13.  Examples\n   This section contains example call flows for a SPIRITS
        service called\n   Internet Caller-ID Delivery (ICID).  One of the benchmark
        SPIRITS\n   service, as described in section 2.2 of [1] is Internet Caller-ID\n
        \  delivery:\n      This service allows the subscriber to see the caller's
        number or\n      name or both while being connected to the Internet.  If the\n
        \     subscriber has only one telephone line and is using the very line\n
        \     for the Internet connection, the service is a subset of the ICW\n      service
        and follows the relevant description in Section 2.1.\n      Otherwise, the
        subscriber's IP host serves as an auxiliary device\n      of the telephone
        to which the call is first sent.\n   We present an example of a SPIRITS call
        flow to realize this service.\n   Note that this is an example only, not a
        normative description of the\n   Internet Caller-ID service.\n   Further text
        and details of SIP messages below refer to the call flow\n   provided in Figure
        3.  Figure 3 depicts the 4 entities that are an\n   integral part of any SPIRITS
        service (the headings of the entities\n   refer to the names established in
        Figure 1 in [1]) -- the SPIRITS\n   subscriber, the SPIRITS notifier and the
        SCF.  Note that the SPIRITS\n   gateway is not included in this figure; logically,
        SPIRITS messages\n   flow between the SPIRITS server and the SPIRITS client.
        \ A gateway,\n   if present, may act as a proxy.\n      SPIRITS server       SPIRITS
        client      SCF\n      (\"subscriber\")        (\"notifier\")\n         S
        \                     N\n         |                      |                |\n
        \        | F1 SUBSCRIBE         |                |\n         +--------------------->+
        \               |\n         |                      |                |\n         |
        \                     | F2 Arm DP      |\n         |     F3 200 OK (SUBS)
        +--------------->|\n         |<---------------------|                |\n         |
        \                     |                |\n         |            F4 NOTIFY
        |                |\n         |<---------------------+                |\n         |
        \                     |                |\n         |      F5 200 OK (NOT)
        |                |\n         +--------------------->|                |\n         |
        \                     |                |\n         ~                      ~
        \               ~\n         ~                      ~                ~\n         |
        \                     |  F6 Evt. Not.  |\n         |                      |<---------------+\n
        \        |            F7 NOTIFY +                |\n         |<---------------------|
        \               |\n         |                      |                |\n         |
        \     F8 200 OK (NOT) |                |\n         +--------------------->|
        \               |\n         |                      |                |\n         |
        \                     |                |\n        \\|/                    \\|/
        \             \\|/\n         v                      v                v\n                        Figure
        3: Sample call flow\n   This call flow depicts an overall operation of a \"subscriber\"\n
        \  successfully subscribing to the IN Termination_Attempt_Authorized DP\n
        \  (the \"subscriber\" is assumed to be a user, possibly at work, who is\n
        \  interested in knowing when he/she gets a phone call to his/her home\n   phone
        number) -- this interaction is captured in messages F1 through\n   F8 in Figure
        3.  The user sends (F1) a SIP SUBSCRIBE request\n   identifying the DP it
        is interested in along with zero or more\n   parameters relevant to that DP
        (in this example, the\n   Termination_Attempt_DP will be employed).  The SPIRITS
        notifier in\n   turns interacts with the SCF to arm the Termination_Attempt_DP
        for\n   the service (F2).  An immediate NOTIFY with the current state\n   information
        is send to the subscriber (F4, F5).\n   At some point  after the above sequence
        of events has transpired, the\n   PSTN gets a call to the users phone.  The
        SSF informs the SCF of this\n   event when it encounters an armed Termination_Attempt_DP
        (not shown\n   in Figure 3).  The SCF informs the SPIRITS notifier of this
        event\n   (F6).\n   When the SPIRITS notifier receives this event, it forms
        a SIP NOTIFY\n   request and directs it to the SPIRITS subscriber (F7).  This
        NOTIFY\n   will contain all the information elements necessary to identify
        the\n   caller to the subscriber.  The subscriber, upon receiving the\n   notification
        (F8) may pop open a window with the date/time and the\n   number of the caller.\n
        \  The rest of this section contains the details of the SIP messages in\n
        \  Figure 3.  The call flow details below assume that the SPIRITS\n   gateway
        is, for the purpose of this example, a SIP proxy that serves\n   as the default
        outbound proxy for the notifier and an ingress host of\n   the myprovider.com
        domain for the subscriber.  The subscriber and\n   notifier may be in separate
        administrative domains.\n   F1: S->N\n   SUBSCRIBE sip:myprovider.com SIP/2.0\n
        \  From: <sip:vkg@example.com>;tag=8177-afd-991\n   To: <sip:16302240216@myprovider.com>\n
        \  CSeq: 18992 SUBSCRIBE\n   Call-ID: 3329as77@host.example.com\n   Contact:
        <sip:vkg@host.example.com>\n   Via: SIP/2.0/UDP host.example.com;branch=z9hG4bK776asdhds\n
        \  Expires: 3600\n   Event: spirits-INDPs\n   Allow-Events: spirits-INDPs,
        spirits-user-prof\n   Accept: application/spirits-event+xml\n   Content-Type:
        application/spirits-event+xml\n   Content-Length: ...\n   <?xml version=\"1.0\"
        encoding=\"UTF-8\"?>\n   <spirits-event xmlns=\"urn:ietf:params:xml:ns:spirits-1.0\">\n
        \     <Event type=\"INDPs\" name=\"TAA\" mode=\"N\">\n            <CalledPartyNumber>6302240216</CalledPartyNumber>\n
        \     </Event>\n   </spirits-event>\n   The subscriber forms a SIP SUBSCRIBE
        request which identifies the DP\n   that it wants to subscribe to (in this
        case, the TAA DP) and the\n   actual line it wants that DP armed for (in this
        case, the line\n   associated with the phone number 6302240216).  This request\n
        \  eventually arrives at the SIPRITS notifier, N, which authenticates it\n
        \  (not shown) and sends a successful response to the subscriber:\n   F3:
        N->S\n   SIP/2.0 200 OK\n   From: <sip:vkg@example.com>;tag=8177-afd-991\n
        \  To: <sip:16302240216@myprovider.com>;tag=SPIRITS-TAA-6302240216\n   CSeq:
        18992 SUBSCRIBE\n   Call-ID: 3329as77@host.example.com\n   Contact: <sip:notifier.myprovider.com>\n
        \  Via: SIP/2.0/UDP host.example.com;branch=z9hG4bK776asdhds\n   Expires:
        3600\n   Accept: application/spirits-event+xml\n   Content-Length: 0\n   The
        notifier interacts with the SCF to arm the DP and also sends an\n   immediate
        NOTIFY towards the subscriber informing the subscriber of\n   the current
        state of the notification:\n   F4: N->S\n   NOTIFY sip:vkg@host.example.com
        SIP/2.0\n   From: <sip:16302240216@myprovider.com>;tag=SPIRITS-TAA-6302240216\n
        \  To: <sip:vkg@example.com>;tag=8177-afd-991\n   Via: SIP/2.0/UDP gateway.myprovider.com;branch=z9hG4bK-9$0-1\n
        \  Via: SIP/2.0/UDP notifier.myprovider.com;branch=z9hG4bKqo--9\n   Call-ID:
        3329as77@host.example.com\n   Contact: <sip:notifier.myprovider.com>\n   Subscription-State:
        active\n   CSeq: 3299 NOTIFY\n   Accept: application/spirits-event+xml\n   Content-Length:
        0\n   F5: S->N\n   SIP/2.0 200 OK\n   From: <sip:16302240216@myprovider.com>;tag=SPIRITS-TAA-6302240216\n
        \  To: <sip:vkg@example.com>;tag=8177-afd-991\n   Via: SIP/2.0/UDP gateway.myprovider.com;branch=z9hG4bK-9$0-1\n
        \  Via: SIP/2.0/UDP notifier.myprovider.com;branch=z9hG4bKqo--9\n   Call-ID:
        3329as77@host.example.com\n   Contact: <sip:vkg@host.example.com>\n   CSeq:
        3299 NOTIFY\n   Accept: application/spirits-event+xml\n   Content-Length:
        0\n   At some later point in time (before the subscription established in\n
        \  F1 expires at the notifier), a call arrives at the number identified\n
        \  in XML-encoded body of F1 -- 6302240216.  The SCF notifies the\n   notifier
        (F6).  Included in this notification is the relevant\n   information from
        the PSTN, namely, the phone number of the party\n   attempting to call 6302240216.
        \ The notifier uses this information to\n   create a SIP NOTIFY request and
        sends it to the subscriber.  The SIP\n   NOTIFY request has a XML-encoded
        body with the relevant information\n   from the PSTN:\n   F7: N->S\n   NOTIFY
        sip:vkg@host.example.com SIP/2.0\n   From: <sip:16302240216@myprovider.com>;tag=SPIRITS-TAA-6302240216\n
        \  To: <sip:vkg@example.com>;tag=8177-afd-991\n   Via: SIP/2.0/UDP notifier.myprovider.com;branch=z9hG4bK9inn-=u7\n
        \  Call-ID: 3329as77@host.example.com\n   Contact: <sip:notifier.myprovider.com>\n
        \  CSeq: 3300 NOTIFY\n   Subscription-State: terminated;reason=fired\n   Accept:
        application/spirits-event+xml\n   Event: spirits-INDPs\n   Allow-Events: spirits-INDPs,
        spirits-user-prof\n   Content-Type: application/spirits-event+xml\n   Content-Length:
        ...\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <spirits-event xmlns=\"urn:ietf:params:xml:ns:spirits-1.0\">\n
        \     <Event type=\"INDPs\" name=\"TAA\" mode=\"N\">\n            <CalledPartyNumber>6302240216</CalledPartyNumber>\n
        \           <CallingPartyNumber>3125551212</CallingPartyNumber>\n      </Event>\n
        \  </spirits-event>\n   There are two important issues to note in the call
        flows for F7:\n      (1) The body of the NOTIFY request contains the information
        passed\n          to the SPIRITS notifier from the SCF.  In this particular\n
        \         example, this is the phone number of the party (3125551212)\n          that
        attempted to call 6302240216.\n      (2) Since the notification occurred,
        the subscription established\n          in F1 terminated (as evident by the
        Subscription-State\n          header).  The subscription terminated normally
        due to the DP\n          associated with TAA firing (hence the reason code
        of \"fired\"\n          in the Subscription-State header).  If the subscriber\n
        \         wants to get notified of another attempt to call the number\n          6302240216,
        he/she should send a new SUBSCRIBE request to the\n          notifier.\n   The
        subscriber can take any appropriate action upon the receipt of\n   the NOTIFY
        in F7.  A reasonable implementation may pop up a window\n   populated with
        the information contained in the body of F12, along\n   with a button asking
        the subscriber if they would like to re-\n   subscribe to the same event.
        \ Alternatively, a re-subscription could\n   be generated automatically by
        the subscriber's UA based on his/her\n   preferences.\n   To complete the
        protocol, the subscriber also sends a 200 OK message\n   towards the notifier:\n
        \  F8: S->N\n   200 OK SIP/2.0\n   From: <sip:16302240216@myprovider.com>;tag=SPIRITS-TAA-6302240216\n
        \  To: <sip:vkg@example.com>;tag=8177-afd-991\n   Via: SIP/2.0/UDP notifier.myprovider.com;z9hG4bK9inn-=u7\n
        \  Call-ID: 3329as77@host.example.com\n   CSeq: 3300 NOTIFY\n   Content-Length:
        0\n"
      title: 5.3.13.  Examples
    - contents:
      - "5.3.14.  Use of URIs to retrieve state\n   The \"spirits-INDPs\" package
        MUST NOT use URIs to retrieve state.  It\n   is expected that most state information
        for this package is compact\n   enough to fit in a SIP message.  However,
        to err on the side of\n   caution, implementations MUST follow the convention
        outlined in\n   Section 18.1.1 of [5] and use a congestion controlled transport
        if\n   the size of the request is within 200 bytes of the path MTU if known,\n
        \  or if the request size is larger than 1300 bytes and the path MTU is\n
        \  unknown.\n"
      title: 5.3.14.  Use of URIs to retrieve state
    title: 5.3.  Services through dynamic DPs
  - contents:
    - "5.4.  Services through static DPs\n   We mentioned in Section 5.1 that the
      first trigger that fires during\n   call processing is typically a TDP since
      there isn't any pre-existing\n   control relationship between the SSF and the
      SCF.  Some Internet\n   hosts may have expressed an interest in executing services
      based on\n   TDPs (through an a-priori arrangement, which is not a part of this\n
      \  specification).  Thus, the PSTN will notify such hosts.  To do so, it\n   will
      send a SIP request (typically an INVITE) towards the Internet\n   host.  The
      body of the SIP request MUST contain multi-part MIME with\n   two MIME components:
      the first part corresponding to the normal\n   payload, if any, of the request;
      and the second part will contain\n   SPIRITS-specific information (e.g., the
      DP that fired).  Responses to\n   the INVITE request, or subsequent SUBSCRIBE
      messages from the\n   Internet host to the PSTN within a current call context
      may result in\n   EDPs being armed.\n"
    - contents:
      - "5.4.1.  Internet Call Waiting (ICW)\n   ICW as a benchmark SPIRITS service
        actually predates SPIRITS itself.\n   Pre-SPIRITS implementations of ICW are
        detailed in [10].  However, as\n   the document notes, while a diversity of
        implementations exists,\n   these implementations are not interoperable.  At
        the time [10] was\n   published, the industry did not have the depth of experience
        with SIP\n   as is the case now.  The use of SIP in [10] does not constitute\n
        \  normative usage of SIP as described in [5]; for instance, no mention\n
        \  is made of the SDP (if any) in the initial INVITE (especially since\n   this
        pertains to \"accept the call using VoIP\" case).  Thus this\n   section serves
        to provide a normative description of ICW in SPIRITS.\n   The description
        of ICW is deceptively simple: it is a service most\n   useful for single line
        phone subscribers that use the line to\n   establish an Internet session.
        \ In a nutshell, the service enables a\n   subscriber engaged in an Internet
        dial-up session to\n      o  be notified of an incoming call to the very same
        telephone line\n         that is being used for the Internet connection,\n
        \     o  specify the desirable treatment of the call, and\n      o  have the
        call handled as specified.\n"
      title: 5.4.1.  Internet Call Waiting (ICW)
    - contents:
      - "5.4.2.  Call disposition choices\n   Section 2 of [10] details the call disposition
        outcome of a ICW\n   session.  They are reproduced here as a numbered list
        for further\n   discussion:\n      1. Accepting the call over the PSTN line,
        thus terminating the\n      Internet (modem) connection\n      2. Accepting
        the call over the Internet using Voice over IP (VoIP)\n      3.  Rejecting
        the call\n      4. Playing a pre-recorded message to the calling party and\n
        \     disconnecting the call\n      5. Forwarding the call to voice mail\n
        \     6. Forwarding the call to another number\n      7. Rejecting (or Forwarding)
        on no Response - If the subscriber\n      fails to respond within a certain
        period of time after the dialog\n      box has been displayed, the incoming
        call can be either rejected\n      or handled based on the treatment pre-defined
        by the subscriber.\n   It should be pointed out for the sake of completeness
        that ICW as a\n   SPIRITS service is not possible without making the SCP aware
        of the\n   fact that the subscriber line is being used for an Internet session.\n
        \  That awareness, however, is not a part of the ICW service, but solely\n
        \  a pre-requisite.  One of the following three methods MUST be utilized\n
        \  to impart this information to the SCP:\n      A. ICW subscriber based method:
        the ICW client on the subscriber's\n      PC notifies the SCP of the Internet
        session by issuing a SIP\n      REGISTER request.\n      B. IN based method:
        SCP maintains a list of Internet Service\n      Provider (ISP) access numbers
        for a geographical area; when one of\n      these numbers is dialed and connected
        to, it (the SCP) assumes\n      that the calling party is engaged in an Internet
        session.\n      C. Any combination of methods A and B.\n   ICW depends on
        a TDP to be provisioned in the SSP.  When the said TDP\n   is encountered,
        the SSP suspends processing of the call and sends a\n   request to the SPIRITS-capable
        SCP.  The SCP determines that the\n   subscriber line is being used for an
        Internet session.  It instructs\n   the SPIRITS notifier on the SCP to create
        a SIP INVITE request and\n   send it to the SPIRITS subscriber running on
        the subscriber's IP\n   host.\n   The SPIRITS subscriber MUST return one of
        the possible call\n   disposition outcomes catalogued in Section 5.4.2.  Note
        that outcomes\n   1 and 4 through 7 can all be coalesced into one case, namely\n
        \  redirecting (using the SIP 3xx response code) the call to an\n   alternative
        SIP URI.  In case of 1, the URI of the redirected call\n   MUST match the
        very same number being used by the customer to get\n   online.  Rejecting
        the call implies sending a non-2xx and non-3xx\n   final response; the remaining
        outcomes result in the call being\n   redirected to an alternate URI which
        provides the desired service\n   (i.e., play a pre-recorded announcement,
        or record a voice message).\n   Further processing of a SPIRITS notifier when
        it receives a final\n   response can be summarized by the following steps:\n
        \     1. If the response is a 4xx, 5xx, or 6xx class of response,\n      generate
        and transmit an ACK request and instruct the SSP to play\n      a busy tone
        to the caller.\n      2. Else, for all 3xx responses, generate and transmit
        an ACK\n      request, and compare the redirected URI to the subscriber's
        line\n      number:\n         2a.  If the comparison indicates a match, instruct
        the SSP to\n         hold onto the call for just enough time to allow the
        SPIRITS\n         subscriber to disconnect the modem, thus freeing up the
        line;\n         and then continue with normal call processing, which will\n
        \        result in the subscriber's phone to ring.\n         2b.  If the comparison
        fails, instruct the SSP to route the\n         call to the redirected URI.\n
        \     3. Else, for a 2xx response, follow the steps in section 5.4.3.\n"
      title: 5.4.2.  Call disposition choices
    - contents:
      - "5.4.3.  Accepting an ICW session using VoIP\n   One call handling option
        in ICW is to \"accept an incoming call using\n   VoIP\".  The SPIRITS notifier
        has no way of knowing a-priori if the\n   subscriber (callee) will be choosing
        this option; nonetheless, it has\n   to account for such a choice by adding
        a SDP in the body of the\n   INVITE request.  A possible way of accomplishing
        this is to have the\n   SPIRITS notifier control a PSTN gateway and allocate
        appropriate\n   resources on it.  Once this is done, the SPIRITS notifier
        adds\n   network information (IP address of the gateway and port numbers where\n
        \  media will be received) and codec information as the SDP portion of\n   the
        body in the INVITE request.  SPIRITS requires the DP information\n   to be
        carried in the request body as well.  To that extent, the\n   SPIRITS notifier
        MUST also add the information associated with the\n   TDP that triggered the
        service.  Thus, the body of the INVITE MUST\n   contain multi-part MIME, with
        two components.\n   The SPIRITS notifier transmits the INVITE request to the
        subscriber\n   and now waits for a final response.  Further processing when
        the\n   SPIRITS subscriber returns a 200 OK MUST be handled as follows:\n
        \     On the receipt of a 200 OK containing the SDP of the subscriber's\n
        \     UA, the SPIRITS notifier will instruct the SSP to terminate the\n      call
        on a pre-allocated port on the gateway.  This port MUST be\n      correlated
        by the gateway to the SDP that was sent in the earlier\n      INVITE.\n   The
        end result is that the caller and callee hold a voice session\n   with part
        of the session occurring over VoIP.\n"
      title: 5.4.3.  Accepting an ICW session using VoIP
    title: 5.4.  Services through static DPs
  title: 5.  Call-related events
- contents:
  - "6.  Non-call related events\n   There are network events that are not related
    to setting up,\n   maintaining, or tearing down voice calls.  Such events occur
    on the\n   cellular wireless network and can be used by SPIRITS to provide\n   services.
    \ The SPIRITS protocol requirement explicitly includes the\n   following events
    for which SPIRITS notification is needed\n   (RFC3298:Section 5(b)):\n   1. Location
    update in the same Visitor Location Register (VLR)\n      service area\n   2.
    Location update in another VLR service area\n   3. International Mobile Subscriber
    Identity (IMSI) attach\n   4. Mobile Subscriber (MS) initiated IMSI detach\n   5.
    Network initiated IMSI detach\n"
  - contents:
    - "6.1.  Non-call events and their required parameters\n   Each of the five non-call
      related event is given a SPIRITS-specific\n   mnemonic for use in subscriptions
      and notifications.\n   Location update in the same VLR area\n   SPIRITS mnemonic:
      LUSV\n   Mandatory parameter in SUBSCRIBE: CalledPartyNumber\n   Mandatory parameter
      in NOTIFY: CalledPartyNumber, Cell-ID\n   Cell-ID: A string used to identify
      the serving Cell-ID.  The actual\n   length and representation of this parameter
      depend on the particulars\n   of the cellular provider's network.\n   Location
      update in different VLR area\n   SPIRITS mnemonic: LUDV\n   Mandatory parameter
      in SUBSCRIBE: CalledPartyNumber\n   Mandatory parameter in NOTIFY: CalledPartyNumber,
      Cell-ID\n   IMSI attach\n   SPIRITS mnemonic: REG\n   Mandatory parameter in
      SUBSCRIBE: CalledPartyNumber\n   Mandatory parameter in NOTIFY: CalledPartyNumber,
      Cell-ID\n   MS initiated IMSI detach\n   SPIRITS mnemonic: UNREGMS\n   Mandatory
      parameter in SUBSCRIBE: CalledPartyNumber\n   Mandatory parameter in NOTIFY:
      CalledPartyNumber\n   Network initiated IMSI detach\n   SPIRITS mnemonic: UNREGNTWK\n
      \  Mandatory parameter in SUBSCRIBE: CalledPartyNumber\n   Mandatory parameter
      in NOTIFY: CalledPartyNumber\n"
    title: 6.1.  Non-call events and their required parameters
  - contents:
    - "6.2.  Normative usage\n   A subscriber will issue a SUBSCRIBE request which
      identifies a set of\n   non-call related PSTN events it is interested in getting
      the\n   notification of.  This set MAY contain exactly one event, or it MAY\n
      \  contain multiple events.  The SUBSCRIBE request is routed to the\n   notifier
      where it is accepted, pending a successful authentication.\n   When any of the
      events identified in the set occurs, the notifier\n   will format a NOTIFY request
      and direct it towards the subscriber.\n   The NOTIFY request will contain information
      pertinent to the one of\n   the event whose notification was requested.\n   The
      dialog established by the SUBSCRIBE persists until it expires\n   normally,
      or is explicitly expired by the subscriber.  This behavior\n   is different
      than the behavior for subscriptions associated with the\n   \"spirits-INDPs\"
      package.  In the cellular network, the events\n   subscribed for may occur at
      a far greater frequency than those\n   compared to the wireline network (consider
      location updates as a\n   cellular user moves around).  Thus it is far more
      expedient to allow\n   the subscription to expire normally.\n   When a subscriber
      receives a NOTIFY request, it can subsequently\n   choose to act in a manner
      appropriate to the notification.\n   The remaining sections fill in the specific
      package responsibilities\n   raised in RFC3265 [3], Section 4.4.\n"
    title: 6.2.  Normative usage
  - contents:
    - "6.3.  Event package name\n   This document defines two event packages; the
      first was defined in\n   Section 5.3.  The second package, defined in this section
      is called\n   \"spirits-user-prof\".  This package MUST be used for events\n
      \  corresponding to non-call related events in the cellular network.\n   All
      entities that implement the SPIRITS protocol and support the\n   non-call related
      events outlined in the SPIRITS protocol requirements\n   (RFC3298:Section 5(b))
      MUST set the \"Event\" header request header[3]\n   to \"spirits-user-prof.\"
      \ The \"Allow-Events\" general header [3] MUST\n   include the token \"spirits-user-prof\"
      as well.\n   Example:\n   Event: spirits-user-prof\n   Allow-Events: spirits-user-prof,
      spirits-INDPs\n"
    title: 6.3.  Event package name
  - contents:
    - "6.4.  Event package parameters\n   The \"spirits-user-prof\" event package
      does not support any additional\n   parameters to the Event header\n"
    title: 6.4.  Event package parameters
  - contents:
    - "6.5.  SUBSCRIBE bodies\n   SUBSCRIBE requests that serve to terminate the subscriptions
      MAY\n   contain an empty body; however, SUBSCRIBE requests that establish a\n
      \  dialog MUST contain a body which encodes two pieces of information:\n      (1)
      The set of events that is being subscribed to.  A subscriber\n      MAY subscribe
      to multiple events in one SUBSCRIBE request, or MAY\n      issue a different
      SUBSCRIBE request for each event it is\n      interested in receiving a notification
      for.  The protocol allows\n      for both forms of representation.  However,
      note that if one\n      SUBSCRIBE is used to subscribe to multiple events, then
      an expiry\n      for the dialog associated with that subscription affects all
      such\n      events.\n      (2) A list of values of the parameters associated
      with the event.\n      Please see Section 6.1 for a list of parameters associated
      with\n      each event.\n   The default body type for SUBSCRIBEs in SPIRITS
      is denoted by the\n   MIME type \"application/spirits-event+xml\".  The \"Accept\"
      header, if\n   present, MUST include this MIME type.\n"
    title: 6.5.  SUBSCRIBE bodies
  - contents:
    - "6.6.  Subscription duration\n   The duration of a dialog established by a SUBSCRIBE
      request is\n   limited to the expiration time negotiated between the subscriber
      and\n   notifier when the dialog was established.  The subscriber MUST send
      a\n   new SUBSCRIBE to refresh the dialog if it is interested in keeping it\n
      \  alive.  A dialog can be terminated by sending a new SUBSCRIBE request\n   with
      an \"Expires\" header value of 0, as outlined in [3].\n"
    title: 6.6.  Subscription duration
  - contents:
    - "6.7.  NOTIFY bodies\n   Bodies in NOTIFY requests for the \"spirits-user-prof\"
      package are\n   optional.  If present, they MUST be of the MIME type\n   \"application/spirits-event+xml\".
      \ The body in a NOTIFY request\n   encapsulates the following pieces of information
      which can be used by\n   the subscriber:\n      (1) The event that resulted
      in the NOTIFY being generated\n      (typically, but not always, this will be
      the same event present in\n      the corresponding SUBSCRIBE request).\n      (2)
      A list of values of the parameters associated with the event\n      that the
      NOTIFY is being generated for.  Depending on the actual\n      event, the list
      of the parameters will vary.\n"
    title: 6.7.  NOTIFY bodies
  - contents:
    - "6.8.  Notifier processing of SUBSCRIBE requests\n   When the notifier receives
      a SUBSCRIBE request, it MUST authenticate\n   the request and ensure that the
      subscriber is authorized to access\n   the resource being subscribed to, in
      this case, non-call related\n   cellular events for a mobile phone.\n   Once
      the SUBSCRIBE request has been authenticated and authorized, the\n   notifier
      interfaces with the SCF over interface D to set marks in the\n   HLR corresponding
      to the mobile phone number contained in the\n   SUBSCRIBE body.  The particulars
      of interface D are outside the scope\n   of this document; here we simply assume
      that the notifier is able to\n   set the appropriate marks in the HLR.\n"
    title: 6.8.  Notifier processing of SUBSCRIBE requests
  - contents:
    - "6.9.  Notifier generation of NOTIFY requests\n   If the notifier expects the
      setting of marks in the HLR to take more\n   than 200 ms, it MUST send a 202
      response to the SUBSCRIBE request\n   immediately, accepting the subscription.
      \ It should then send a\n   NOTIFY request with an empty body.  This NOTIFY
      request MUST have a\n   \"Subscription-State\" header with a value of \"pending\".\n
      \     This immediate NOTIFY with an empty body is needed since the\n      resource
      identified in the SUBSCRIBE request does not have as yet\n      a meaningful
      state.\n   Once the notifier has successfully interfaced with the SCF, it MUST\n
      \  send a subsequent NOTIFY request with an empty body and a\n   \"Subscription-State\"
      header with a value of \"active.\"\n   When the event of interest identified
      in the SUBSCRIBE request\n   occurs, the notifier sends out a new NOTIFY request
      which MUST\n   contain a body as described in Section 6.7.\n"
    title: 6.9.  Notifier generation of NOTIFY requests
  - contents:
    - "6.10.  Subscriber processing of NOTIFY requests\n   The exact steps executed
      at the subscriber when it receives a NOTIFY\n   request depend on the nature
      of the service that is being\n   implemented.  As a generality, the UA associated
      with the subscriber\n   should somehow impart this information to the user by
      visual or\n   auditory means, if at all possible.\n"
    title: 6.10.  Subscriber processing of NOTIFY requests
  - contents:
    - "6.11.  Handling of forked requests\n   Forking of SUBSCRIBE requests is prohibited.
      \ Since the SUBSCRIBE\n   request is targeted towards the PSTN, highly irregular
      behaviors\n   occur if the request is allowed to fork.  The normal SIP DNS lookup\n
      \  and routing rules [11] should result in a target set with exactly one\n   element:
      the notifier.\n"
    title: 6.11.  Handling of forked requests
  - contents:
    - "6.12.  Rate of notifications\n   For reasons of congestion control, it is important
      that the rate of\n   notifications not become excessive.  For instance, if a
      subscriber\n   subscribes to the location update event for a notifier moving
      through\n   the cellular network at a high enough velocity, it is entirely\n
      \  conceivable that the notifier may generate many NOTIFY requests in a\n   small
      time frame.  Thus, within this package, the location update\n   event needs
      an appropriate throttling mechanism.\n   Whenever a SPIRITS notifier sends a
      location update NOTIFY, it MUST\n   start a timer (Tn) with a value of 15 seconds.
      \ If a subsequent\n   location update NOTIFY request needs to be sent out before
      the timer\n   has expired, it MUST be discarded.  Any future location update
      NOTIFY\n   requests MUST be transmitted only if Tn has expired (i.e. 15 seconds\n
      \  have passed since the last NOTIFY request was send out).  If a\n   location
      update NOTIFY is send out, Tn should be reset to go off\n   again in 15 seconds.\n"
    title: 6.12.  Rate of notifications
  - contents:
    - "6.13.  State agents\n   State agents are not used in SPIRITS.\n"
    title: 6.13.  State agents
  - contents:
    - "6.14.  Examples\n   This section contains an example of a SPIRITS service that
      may be\n   used to update the presence status of a mobile user.  The call flow\n
      \  is depicted in Figure 4 below.\n      SPIRITS server       SPIRITS client
      \     SCF\n      (\"subscriber\")        (\"notifier\")\n         S                      N\n
      \        |                      |                |\n         | F1 SUBSCRIBE
      \        |                |\n         +--------------------->+                |\n
      \        |                      |                |\n         |                      |
      F2 Set HLR mark|\n         |     F3 200 OK (SUBS) +--------------->|\n         |<---------------------|
      \               |\n         |                      |                |\n         |
      \           F4 NOTIFY |                |\n         |<---------------------+
      \               |\n         |                      |                |\n         |
      \     F5 200 OK (NOT) |                |\n         +--------------------->|
      \               |\n         |                      |                |\n         ~
      \                     ~                ~\n         ~                      ~
      \               ~\n         |                      |  F6 Evt. Not.  |\n         |
      \                     |<---------------+\n         |            F7 NOTIFY +
      \               |\n         |<---------------------|                |\n         |
      \                     |                |\n         |      F8 200 OK (NOT) |
      \               |\n         +--------------------->|                |\n         |
      \                     |                |\n         |                      |
      \               |\n        \\|/                    \\|/              \\|/\n
      \        v                      v                v\n                     Figure
      4: Sample call flow\n   In F1 of Figure 4, the subscriber indicates an interest
      in receiving\n   a notification when a mobile user registers with the cellular\n
      \  network.  The cellular network notes this event (F2) and confirms the\n   subscription
      (F3-F5).  When the mobile user turns on her cell phone\n   and registers with
      the network, this event is detected (F6).  The\n   cellular network then sends
      out a notification to the subscriber\n   informing it of this event (F7-F8).\n
      \  We present the details of the call flow next.\n   In F1, the subscriber subscribes
      to the registration event (REG) of a\n   cellular phone number.\n   F1: S->N\n
      \  SUBSCRIBE sip:myprovider.com SIP/2.0\n   From: <sip:vkg@example.com>;tag=8177-afd-991\n
      \  To: <sip:16302240216@myprovider.com>\n   CSeq: 18992 SUBSCRIBE\n   Call-ID:
      3329as77@host.example.com\n   Contact: <sip:vkg@host.example.com>\n   Via: SIP/2.0/UDP
      host.example.com;branch=z9hG4bK776asdhdsa8\n   Expires: 3600\n   Event: spirits-user-prof\n
      \  Allow-Events: spirits-INDPs, spirits-user-prof\n   Accept: application/spirits-event+xml\n
      \  Content-Type: application/spirits-event+xml\n   Content-Length: ...\n   <?xml
      version=\"1.0\" encoding=\"UTF-8\"?>\n   <spirits-event xmlns=\"urn:ietf:params:xml:ns:spirits-1.0\">\n
      \     <Event type=\"userprof\" name=\"REG\">\n            <CalledPartyNumber>6302240216</CalledPartyNumber>\n
      \     </Event>\n   </spirits-event>\n   The subscription reaches the notifier
      which authenticates the request\n   (not shown) and interacts with the SCF to
      update the subscribers\n   database for this event.  The notifier sends out
      a successful\n   response to the subscription:\n   F3: N->S\n   SIP/2.0 200
      OK\n   From: <sip:vkg@example.com>;tag=8177-afd-991\n   To: <sip:16302240216@myprovider.com>;tag=SPIRITS-REG-16302240216\n
      \  CSeq: 18992 SUBSCRIBE\n   Call-ID: 3329as77@host.example.com\n   Contact:
      <sip:notifier.myprovider.com>\n   Via: SIP/2.0/UDP host.example.com;branch=z9hG4bK776asdhdsa8\n
      \  Expires: 3600\n   Allow-Events: spirits-INDPs, spirits-user-prof\n   Accept:
      application/spirits-event+xml\n   Content-Length: 0\n   The notifier also sends
      out a NOTIFY request confirming the\n   subscription:\n   F4: N->S\n   NOTIFY
      sip:vkg@host.example.com SIP/2.0\n   To: <sip:vkg@example.com>;tag=8177-afd-991\n
      \  From: <sip:16302240216@myprovider.com>;tag=SPIRITS-REG-16302240216\n   CSeq:
      9121 NOTIFY\n   Call-ID: 3329as77@host.example.com\n   Contact: <sip:notifier.myprovider.com>\n
      \  Subscription-State: active\n   Via: SIP/2.0/UDP notifier.myprovider.com;branch=z9hG4bK7007-091a\n
      \  Allow-Events: spirits-INDPs, spirits-user-prof\n   Accept: application/spirits-event+xml\n
      \  Content-Length: 0\n   The subscriber confirms the receipt of the NOTIFY request:\n
      \  F5: S->N\n   SIP/2.0 200 OK\n   To: <sip:vkg@example.com>;tag=8177-afd-991\n
      \  From: <sip:16302240216@myprovider.com>;tag=SPIRITS-REG-16302240216\n   CSeq:
      9121 NOTIFY\n   Call-ID: 3329as77@host.example.com\n   Contact: <sip:vkg@host.example.com>\n
      \  Via: SIP/2.0/UDP notifier.myprovider.com;branch=z9hG4bK7007-091a\n   Content-Length:
      0\n   In F6, the mobile user identified by the PSTN number \"6302240216\"\n
      \  turns the mobile phone on, thus causing it to register with the\n   cellular
      network.  The cellular network detects this event, and since\n   a subscriber
      has indicated an interest in receiving a notification of\n   this event, a SIP
      NOTIFY request is transmitted towards the\n   subscriber:\n   F7: N->S\n   NOTIFY
      sip:vkg@host.example.com SIP/2.0\n   To: <sip:vkg@example.com>;tag=8177-afd-991\n
      \  From: <sip:16302240216@myprovider.com>;tag=SPIRITS-REG-16302240216\n   CSeq:
      9122 NOTIFY\n   Call-ID: 3329as77@host.example.com\n   Contact: <sip:notifier.myprovider.com>\n
      \  Subscription-State: terminated;reason=fired\n   Via: SIP/2.0/UDP notifier.myprovider.com;branch=z9hG4bK7yi-p12\n
      \  Event: spirits-user-prof\n   Allow-Events: spirits-INDPs, spirits-user-prof\n
      \  Accept: application/spirits-event+xml\n   Content-Type: application/spirits-event+xml\n
      \  Content-Length: ...\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <spirits-event
      xmlns=\"urn:ietf:params:xml:ns:spirits-1.0\">\n      <Event type=\"userprof\"
      name=\"REG\">\n            <CalledPartyNumber>6302240216</CalledPartyNumber>\n
      \           <Cell-ID>45987</Cell-ID>\n      </Event>\n   </spirits-event>\n
      \  The subscriber receives the notification and acknowledges it by\n   sending
      a response:\n   F8: S->N\n   SIP/2.0 200 OK\n   To: <sip:vkg@example.com>;tag=8177-afd-991\n
      \  From: <sip:16302240216@myprovider.com>;tag=SPIRITS-REG-16302240216\n   CSeq:
      9122 NOTIFY\n   Call-ID: 3329as77@host.example.com\n   Via: SIP/2.0/UDP notifier.myprovider.com;branch=z9hG4bK7yi-p12\n
      \  Content-Length: 0\n   Note that once the subscriber has received this notification,
      it can\n   execute appropriate services.  In this particular instance, an\n
      \  appropriate service may consist of the subscriber acting as a\n   composer
      of a presence service and turning the presence status of the\n   user associated
      with the phone number \"6302240216\" to \"on\".  Also\n   note in F7 that the
      notifier included a Cell ID in the notification.\n   The Cell ID can be used
      as a basis for location specific services;\n   however, a discussion of such
      services is out of the scope of this\n   document.\n"
    title: 6.14.  Examples
  - contents:
    - "6.15.  Use of URIs to retrieve state\n   The \"spirits-user-prof\" package
      MUST NOT use URIs to retrieve state.\n   It is expected that most state information
      for this package is\n   compact enough to fit in a SIP message.  However, to
      err on the side\n   of caution, implementations MUST follow the convention outlined
      in\n   Section 18.1.1 of [5] and use a congestion controlled transport if\n
      \  the size of the request is within 200 bytes of the path MTU if known,\n   or
      if the request size is larger than 1300 bytes and the path MTU is\n   unknown.\n"
    title: 6.15.  Use of URIs to retrieve state
  title: 6.  Non-call related events
- contents:
  - "7.  IANA Considerations\n   This document calls for IANA to:\n      o register
    two new SIP Event Packages per [3].\n      o register a new MIME type per [20].\n
    \     o register a new namespace URN per [16].\n      o register a new XML schema
    per [16].\n"
  - contents:
    - "7.1.  Registering event packages\n   Package Name: spirits-INDPs\n   Type:
      package\n   Contact: Vijay K. Gurbani, vkg@lucent.com\n   Reference: RFC 3910\n
      \  Package Name: spirits-user-prof\n   Type: package\n   Contact: Vijay K. Gurbani,
      vkg@lucent.com\n   Reference: RFC 3910\n"
    title: 7.1.  Registering event packages
  - contents:
    - "7.2.  Registering MIME type\n   MIME media type name: application\n   MIME
      subtype name: spirits-event+xml\n   Mandatory parameters: none\n   Optional
      parameters: charset (same semantics of charset parameter in\n   application/xml
      [9])\n   Encoding considerations: same as considerations outlined for\n   application/xml
      in [9].\n   Security considerations: Section 10 of [9] and Section 8 of this\n
      \  document.\n   Interoperability considerations: none.\n   Published specifications:
      this document.\n   Applications which use this media type: SPIRITS aware entities
      which\n   adhere to this document.\n   Additional information:\n      Magic
      number(s): none.\n      File extension(s): none.\n      Macintosh file type
      code(s): none.\n      Object Identifier(s) or OID(s): none.\n   Person and email
      address for further information: Vijay K. Gurbani,\n   <vkg@lucent.com>\n   Intended
      usage: Common\n   Author/Change controller: The IETF\n"
    title: 7.2.  Registering MIME type
  - contents:
    - "7.3.  Registering URN\n   URI\n      urn:ietf:params:xml:ns:spirits-1.0\n   Description\n
      \  This is the XML namespace URI for XML elements defined by this\n   document.
      \ Such elements describe the SPIRITS information in the\n   \"application/ spirits-event+xml\"
      content type.\n   Registrant Contact\n   IESG.\n   XML\n     BEGIN\n       <?xml
      version=\"1.0\"?>\n       <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.0//EN\"\n
      \                \"http://www.w3.org/TR/xhtml-basic/xhtml-basic10.dtd\">\n       <html
      xmlns=\"http://www.w3.org/1999/xhtml\">\n       <head>\n         <meta http-equiv=\"content-type\"\n
      \           content=\"text/html;charset=utf-8\"/>\n         <title>Namespace
      for SPIRITS-related information</title>\n       </head>\n       <body>\n         <h1>Namespace
      for SPIRITS-related information</h1>\n         <h2>application/spirits-event+xml</h2>\n
      \        <p>See <a href=\"[[[URL of published RFC]]]\">RFC3910</a>.</p>\n       </body>\n
      \      </html>\n     END\n"
    title: 7.3.  Registering URN
  - contents:
    - "7.4.  Registering XML schema\n   URI\n      urn:ietf:params:xml:schema:spirits-1.0\n
      \  Description\n   XML base schema for SPIRITS entities.\n   Registrant Contact\n
      \  IESG.\n   XML\n   Please see XML schema definition in Section 9 of this document.\n"
    title: 7.4.  Registering XML schema
  title: 7.  IANA Considerations
- contents:
  - "8.  Security Considerations\n   This section focuses on security considerations
    which are unique to\n   SPIRITS.  SIP security mechanisms are discussed in detail
    in the core\n   SIP specification [5] and are outside the scope of this document.\n
    \  SPIRITS security mechanisms are based on and strengthen SIP security\n   [5],
    for example, SPIRITS mandates the support of S/MIME.  Beyond\n   that, any other
    security solutions specified in [5], i.e., TLS or\n   HTTP Digest authentication,
    may be utilized by SPIRITS operators.\n   As outlined in Chapter 9 (Security Consideration)
    of RFC3298 [4], the\n   following security aspects are applicable to the SPIRITS
    protocol:\n      Authentication\n      Integrity\n      Confidentiality\n      Non-repudiation\n
    \  The SPIRITS architecture in Figure 1 contains 5 interfaces -- A, B,\n   C,
    D, and E.  Of these, only two -- B and C -- are of interest to\n   SPIRITS.  Interfaces
    A and E are PINT interfaces and are thus assumed\n   secured by the PINT RFC [8].
    \ Security for interface D is out of\n   scope in this document since it deals
    primarily with the PSTN\n   infrastructure.  We will discuss security aspects
    on interfaces B and\n   C predicated on certain assumptions.\n   A driving assumption
    for SPIRITS security is that the SPIRITS gateway\n   is owned by the same PSTN
    operator that owns the SPIRITS notifier.\n   Thus, it is attractive to simply
    relegate security of interface C to\n   the PSTN operator, and in fact, there
    are merits to doing just that\n   since interface C crosses the IP Network and
    PSTN boundaries.\n   However, a closer inspection reveals that both interfaces
    B and C\n   transmit the SPIRITS protocol; thus, any security arrangement we\n
    \  arrive at for interface B can be suitably applied to interface C as\n   well.
    \ This makes it possible to secure interface C in case the\n   SPIRITS gateway
    is not owned by the same PSTN operator that owns the\n   SPIRITS notifier.\n   The
    ensuing security discussion assumes that the SPIRITS subscriber\n   is communicating
    directly to the SPIRITS notifier (and vice-versa)\n   and specifies a security
    apparatus for this arrangement.  However,\n   the same apparatus can be used to
    secure the communication between a\n   SPIRITS subscriber and an intermediary
    (like the SPIRITS gateway),\n   and the same intermediary and the SPIRITS notifier.\n
    \  Confidentiality of the SPIRITS protocol is essential since the\n   information
    carried in the protocol data units is of a sensitive\n   nature and may lead to
    privacy concerns if revealed to non-authorized\n   parties.  The communication
    path between the SPIRITS notifier and the\n   SPIRITS subscriber should be secured
    through S/MIME [18] to alleviate\n   privacy concerns, as is described in the
    Security Consideration\n   section of the core SIP specification [5].\n      S/MIME
    is an end-to-end security mechanism which encrypts the\n      SPIRITS bodies for
    transit across an open network.  Intermediaries\n      need not be cognizant of
    S/MIME in order to route the messages\n      (routing headers travel in the clear).\n
    \  S/MIME provides all the security aspects for SPIRITS outlined at the\n   beginning
    of this section: authentication, message integrity,\n   confidentiality, and non-repudiation.
    \ Authentication properties\n   provided by S/MIME would allow the recipient of
    a SPIRITS message to\n   ensure that the SPIRITS payload was generated by an authorized\n
    \  entity.  Encryption would ensure that only those SPIRITS entities\n   possessing
    a particular decryption key are capable of inspecting\n   encapsulated SPIRITS
    bodies in a SIP request.\n   All SPIRITS endpoints MUST support S/MIME signatures
    (CMS SignedData)\n   and MUST support encryption (CMS EnvelopedData).\n   If the
    B and C interfaces are owned by the same PSTN operator, it is\n   possible that
    public keys will be installed in the SPIRITS endpoints.\n   S/MIME supports two
    methods -- issuerAndSerialNumber and\n   subjectKeyIdentifier -- of naming the
    public key needed to validate a\n   signature.  Between these, subjectKeyIdentifier
    works with X.509\n   certificates and other schemes as well, while issuerAndSerialNumber\n
    \  works with X.509 certificates only.  If the administrator configures\n   the
    necessary public keys, providing integrity through procedural\n   means, then
    S/MIME can be used without X.509 certificates.\n   All requests (and responses)
    between SPIRITS entities MUST be\n   encrypted.\n   When a request arrives at
    a SPIRITS notifier from a SPIRITS\n   subscriber, the SPIRITS notifier MUST authenticate
    the request.  The\n   subscription (or registration) from a SPIRITS subscriber
    MUST be\n   rejected if the authentication fails.  If the SPIRITS subscriber\n
    \  successfully authenticated itself to the SPIRITS notifier, the\n   SPIRITS
    notifier MUST, at the very least, ensure that the SPIRITS\n   subscriber is indeed
    allowed to receive notifications of the events\n   it is subscribing to.\n      Note
    that this document does not proscribe how the SPIRITS\n      notifier achieves
    this.  In practice, it could be through access\n      control lists (ACL) that
    are populated by a service management\n      system in the PSTN, or through a
    web interface of some sort.\n   Requests from the SPIRITS notifier to the SPIRITS
    subscribers MUST\n   also be authenticated, lest a malicious party attempts to\n
    \  fraudulently pose as a SPIRITS notifier to hijack a session.\n"
  title: 8.  Security Considerations
- contents:
  - "9.  XML schema definition\n   The SPIRITS payload is specified in XML; this section
    defines the\n   base XML schema for documents that make up the SPIRITS payload.
    \ All\n   SPIRITS entities that transport a payload characterized by the MIME\n
    \  type \"application/spirits-event+xml\" MUST support documents\n   corresponding
    to the base schema below.\n   Multiple versions of the base schema are not expected;
    rather, any\n   additional functionality (e.g., conveying new PSTN events) must
    be\n   accomplished through the definition of a new XML namespace and a\n   corresponding
    schema.  Elements from the new XML namespace will then\n   co-exist with elements
    from the base schema in a document.\n"
  - "<xs:schema targetNamespace=\"urn:ietf:params:xml:ns:spirits-1.0\"\n       xmlns:tns=\"urn:ietf:params:xml:ns:spirits-1.0\"\n
    \      xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n       elementFormDefault=\"qualified\"\n
    \      attributeFormDefault=\"unqualified\">\n     <!-- This import brings in
    the XML language attribute xml:lang-->\n     <xs:import namespace=\"http://www.w3.org/XML/1998/namespace\"\n
    \               schemaLocation=\"http://www.w3.org/2001/xml.xsd\"/>\n     <xs:annotation>\n
    \       <xs:documentation xml:lang=\"en\">\n              Describes SPIRITS events.\n
    \       </xs:documentation>\n     </xs:annotation>\n     <xs:element name=\"spirits-event\"
    type=\"tns:SpiritsEventType\"/>\n     <xs:complexType name=\"SpiritsEventType\">\n
    \       <xs:sequence>\n           <xs:element name=\"Event\" type=\"tns:EventType\"
    minOccurs=\"1\"\n               maxOccurs=\"unbounded\"/>\n           <xs:any
    namespace=\"##other\" processContents=\"lax\"\n               maxOccurs=\"unbounded\"/>\n
    \       </xs:sequence>\n     </xs:complexType>\n     <xs:complexType name=\"EventType\">\n
    \       <xs:sequence>\n           <xs:element name=\"CalledPartyNumber\" type=\"xs:token\"\n
    \              minOccurs=\"0\" maxOccurs=\"1\"/>\n           <xs:element name=\"CallingPartyNumber\"
    type=\"xs:token\"\n               minOccurs=\"0\" maxOccurs=\"1\"/>\n           <xs:element
    name=\"DialledDigits\" type=\"xs:token\"\n               minOccurs=\"0\" maxOccurs=\"1\"/>\n
    \          <xs:element name=\"Cell-ID\" type=\"xs:token\"\n               minOccurs=\"0\"
    maxOccurs=\"1\"/>\n           <xs:element name=\"Cause\" type=\"tns:CauseType\"\n
    \              minOccurs=\"0\" maxOccurs=\"1\"/>\n        </xs:sequence>\n        <xs:attribute
    name=\"type\" type=\"tns:PayloadType\"\n            use=\"required\"/>\n        <xs:attribute
    name=\"name\" type=\"tns:EventNameType\"\n            use=\"required\"/>\n        <xs:attribute
    name=\"mode\" type=\"tns:ModeType\"\n            use=\"optional\" default=\"N\"/>\n
    \    </xs:complexType>\n     <xs:simpleType name=\"PayloadType\">\n        <!--
    The <spirits-event> will contain either a list of -->\n        <!-- INDPs events
    or a list of userprof events -->\n        <xs:restriction base=\"xs:string\">\n
    \          <xs:enumeration value=\"INDPs\"/>\n           <xs:enumeration value=\"userprof\"/>\n
    \       </xs:restriction>\n     </xs:simpleType>\n     <xs:simpleType name=\"EventNameType\">\n
    \       <xs:restriction base=\"xs:string\">\n           <!-- These are the call
    related events (DPs).  If the -->\n           <!-- PaylaodType is \"INDPs\", then
    the value of the \"name\" -->\n           <!-- attribute is one of these; example
    -->\n           <!-- <spirits-event type=\"INDPs\" name=\"OCI\"> -->\n           <xs:enumeration
    value=\"OAA\"/>\n           <xs:enumeration value=\"OCI\"/>\n           <xs:enumeration
    value=\"OAI\"/>\n           <xs:enumeration value=\"OA\"/>\n           <xs:enumeration
    value=\"OTS\"/>\n           <xs:enumeration value=\"ONA\"/>\n           <xs:enumeration
    value=\"OCPB\"/>\n           <xs:enumeration value=\"ORSF\"/>\n           <xs:enumeration
    value=\"OMC\"/>\n           <xs:enumeration value=\"OAB\"/>\n           <xs:enumeration
    value=\"OD\"/>\n           <xs:enumeration value=\"TA\"/>\n           <xs:enumeration
    value=\"TMC\"/>\n           <xs:enumeration value=\"TAB\"/>\n           <xs:enumeration
    value=\"TD\"/>\n           <xs:enumeration value=\"TAA\"/>\n           <xs:enumeration
    value=\"TFSA\"/>\n           <xs:enumeration value=\"TB\"/>\n           <!-- These
    are the non-call related events.  If the -->\n           <!-- PayloadType is \"user-prof\",
    then the value of the -->\n           <!-- \"name\" attribute is one of these;
    example -->\n           <!-- <spirits-event type=\"userprof\" name=\"LUDV\"> -->\n
    \          <xs:enumeration value=\"LUSV\"/>\n           <xs:enumeration value=\"LUDV\"/>\n
    \          <xs:enumeration value=\"REG\"/>\n           <xs:enumeration value=\"UNREGMS\"/>\n
    \          <xs:enumeration value=\"UNREGNTWK\"/>\n        </xs:restriction>\n
    \    </xs:simpleType>\n     <xs:simpleType name=\"ModeType\">\n        <!-- One
    of two values: \"N\"otification or \"R\"equest -->\n        <xs:restriction base=\"xs:string\">\n
    \          <xs:enumeration value=\"N\"/>\n           <xs:enumeration value=\"R\"/>\n
    \       </xs:restriction>\n     </xs:simpleType>\n     <xs:simpleType name=\"CauseType\">\n
    \       <xs:restriction base=\"xs:string\">\n           <xs:enumeration value=\"Busy\"/>\n
    \          <xs:enumeration value=\"Unreachable\"/>\n        </xs:restriction>\n
    \    </xs:simpleType>\n"
  - '</xs:schema>

    '
  title: 9.  XML schema definition
- contents:
  - "10.  Acknowledgements\n   The authors are grateful to participants in the SPIRITS
    WG for the\n   discussion that contributed to this work.  These include J-L. Bakker,\n
    \  J. Bjorkner, J. Buller, J-E. Chapron, B. Chatras, O. Cleuziou,\n   L. Conroy,
    R. Forbes, F. Haerens, J. Humphrey, J. Kozik,\n   W. Montgomery, S. Nyckelgard,
    M. O'Doherty, A. Roach, J. Rosenberg,\n   H. Sinnreich, L. Slutsman, D. Varney,
    and W. Zeuch.  The authors also\n   acknowledge Steve Bellovin, Allison Mankin
    and Jon Peterson for help\n   provided on the Security section.\n"
  title: 10.  Acknowledgements
- contents:
  - "11.  Acronyms\n   ACL                  Access Control List\n   CS                   Capability
    Set\n   DP                   Detection Point\n   DTD                  Document
    Type Definition\n   EDP                  Event Detection Point\n   EDP-N                Event
    Detection Point \"Notification\"\n   EDP-R                Event Detection Point
    \"Request\"\n   IANA                 Internet Assigned Numbers Authority\n   ICW
    \                 Internet Call Waiting\n   IMSI                 International
    Mobile Subscriber Identity\n   IN                   Intelligent Network\n   INAP
    \                Intelligent Network Application Protocol\n   IP                   Internet
    Protocol\n   ISP                  Internet Service Provider\n   ITU                  International
    Telecommunications Union\n   MIME                 Multipurpose Internet Mail Extensions\n
    \  MS                   Mobile Station (or Mobile Subscriber)\n   OBCSM                Originating
    Basic Call State Model\n   PIC                  Point In Call\n   PINT                 PSTN/Internet
    Interworking\n   PSTN                 Public Switched Telephone Network\n   SCF
    \                 Service Control Function\n   SCP                  Service Control
    Point\n   SDP                  Session Description Protocol\n   SIP                  Session
    Initiation Protocol\n   SIP-T                SIP for Telephones\n   SPIRITS              Services
    in the PSTN/IN Requesting InTernet\n                            Services\n   SSF
    \                 Service Switching Function\n   SSP                  Service
    Switching Point\n   STD                  State Transition Diagram\n   TBCSM                Terminating
    Basic Call State Model\n   TDP                  Trigger Detection Point\n   TDP-N
    \               Trigger Detection Point \"Notification\"\n   TDP-R                Trigger
    Detection Point \"Request\"\n   TLS                  Transport Layer Security\n
    \  UA                   User Agent\n   VLR                  Visitor Location Register\n
    \  WIN                  Wireless Intelligent Network\n   XML                  Extensible
    Markup Language\n"
  title: 11.  Acronyms
- contents:
  - '12.  References

    '
  - contents:
    - "12.1.  Normative References\n   [1]  Slutsman, L., Faynberg, I., Lu, H., and
      M. Weissman, \"The\n        SPIRITS Architecture\", RFC 3136, June 2001.\n   [2]
      \ Bradner, S., \"Key words for use in RFCs to Indicate Requirement\n        Levels\",
      BCP 14, RFC 2119, March 1997.\n   [3]  Roach, A., \"Session Initiation Protocol
      (SIP)-Specific Event\n        Notification\", RFC 3265, June 2002.\n   [4]  Faynberg,
      I., Gato, J., Lu, H., and L. Slutsman, \"Service in the\n        Public Switched
      Telephone Network/Intelligent Network (PSTN/IN)\n        Requesting InTernet
      Service (SPIRITS) Protocol Requirements\",\n        RFC 3298, August 2002.\n
      \  [5]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston, A.,\n        Peterson,
      J., Sparks, R., Handley, M., and E. Schooler, \"SIP:\n        Session Initiation
      Protocol\", RFC 3261, June 2002.\n"
    title: 12.1.  Normative References
  - contents:
    - "12.2. Informative References\n   [6]  M. Unmehopa, K. Vemuri, A. Brusilovsky,
      E. Dacloush, A. Zaki, F.\n        Haerens, J-L. Bakker, B. Chatras, and J. Dobrowolski,
      \"On\n        selection of IN parameters to be carried by the SPIRITS\n        Protocol\",
      Work In Progress, January 2003.\n   [7]  Intelligent Network Capability Set
      2. ITU-T, Recommendation\n        Q.1228.\n   [8]  Petrack, S. and L. Conroy,
      \"The PINT Service Protocol:\n        Extensions to SIP and SDP for IP Access
      to Telephone Call\n        Services\", RFC 2848, June 2000.\n   [9]  Murata,
      M., St.Laurent, S., and D. Kohn, \"XML Media Types\", RFC\n        3023, January
      2001.\n   [10] Lu, H., Faynberg, I., Voelker, J., Weissman, M., Zhang, W.,\n
      \       Rhim, S., Hwang, J., Ago, S., Moeenuddin, S., Hadvani, S.,\n        Nyckelgard,
      S., Yoakum, J., and L. Robart, \"Pre-Spirits\n        Implementations of PSTN-initiated
      Services\", RFC 2995, November\n        2000.\n   [11] Rosenberg, J. and H.
      Schulzrinne, \"Session Initiation Protocol\n        (SIP): Locating SIP Servers\",
      RFC 3263, June 2002.\n   [12] Thompson, H., Beech, D., Maloney, M. and N. Mendelsohn,
      \"XML\n        Schema Part 1: Structures\", W3C REC REC-xmlschema-1-20010502,\n
      \       May 2001.  <http://www.w3c.org/XML/>.\n   [13] \"Interface recommendations
      for intelligent network capability\n        set 3: SCF-SSF interface\", ITU-T
      Recommendation Q.1238.2, June\n        2000.\n   [14] Moats, R., \"URN Syntax\",
      RFC 2141, May 1997.\n   [15] Moats, R., \"A URN Namespace for IETF Documents\",
      RFC 2648,\n        August 1999.\n   [16] Mealling, M., \"The IETF XML Registry\",
      BCP 81, RFC 3688, January\n        2004.\n   [17] Tim Bray, Dave Hollander,
      and Andrew Layman, \"Namespaces in\n        XML\", W3C recommendation: xml-names,
      14th January 1999,\n        <http://www.w3.org/ TR/REC-xml-names>.\n   [18]
      Ramsdell, B., \"Secure/Multipurpose Internet Mail Extensions\n        (S/MIME)
      Version 3.1 Message Specification\", RFC 3851, July\n        2004.\n   [19]
      Faynberg, I., L. Gabuzda, M. Kaplan, and N.Shah, \"The\n        Intelligent
      Network Standards: Their Application to Services\",\n        McGraw-Hill, 1997.\n
      \  [20] Freed, N. and N. Borenstein, \"Multipurpose Internet Mail\n        Extensions
      (MIME) Part One: Format of Internet Message Bodies\",\n        RFC 2045, November
      1996.\n        Freed, N. and N. Borenstein, \"Multipurpose Internet Mail\n        Extensions
      (MIME) Part Two: Media Types\", RFC 2046, November\n        1996.\n        Moore,
      K., \"MIME (Multipurpose Internet Mail Extensions) Part\n        Three:  Message
      Header Extensions for Non-ASCII Text \", RFC\n        2047, November 1996.\n
      \       Freed, N., Klensin, J., and J. Postel, \"Multipurpose Internet\n        Mail
      Extensions (MIME) Part Four: Registration Procedures\", BCP\n        13, RFC
      2048, November 1996.\n        Freed, N. and N. Borenstein, \"Multipurpose Internet
      Mail\n        Extensions (MIME) Part Five: Conformance Criteria and Examples\",\n
      \       RFC 2049, November 1996.\n"
    title: 12.2. Informative References
  title: 12.  References
- contents:
  - "13.  Contributors\n   Kumar Vemuri\n   Lucent Technologies, Inc.\n   2000 Naperville
    Rd.\n   Naperville, IL 60566\n   USA\n   EMail: vvkumar@lucent.com\n"
  title: 13.  Contributors
- contents:
  - "14.  Authors' Addresses\n   Vijay K. Gurbani, Editor\n   2000 Lucent Lane\n   Rm
    6G-440\n   Naperville, IL 60566\n   USA\n   EMail: vkg@lucent.com\n   Alec Brusilovsky\n
    \  2601 Lucent Lane\n   Lisle, IL 60532-3640\n   USA\n   EMail: abrusilovsky@lucent.com\n
    \  Igor Faynberg\n   Lucent Technologies, Inc.\n   101 Crawfords Corner Rd.\n
    \  Holmdel, NJ 07733\n   USA\n   EMail: faynberg@lucent.com\n   Jorge Gato\n   Vodafone
    Espana\n   Isabel Colbrand, 22\n   28050 Madrid\n   Spain\n   EMail: jorge.gato@vodafone.com\n
    \  Hui-Lan Lu\n   Bell Labs/Lucent Technologies\n   Room 4C-607A, 101 Crawfords
    Corner Road\n   Holmdel, New Jersey, 07733\n   Phone: (732) 949-0321\n   EMail:
    huilanlu@lucent.com\n   Musa Unmehopa\n   Lucent Technologies, Inc.\n   Larenseweg
    50,\n   Postbus 1168\n   1200 BD, Hilversum,\n   The Netherlands\n   EMail: unmehopa@lucent.com\n"
  title: 14.  Authors' Addresses
- contents:
  - "15.  Full Copyright Statement\n   Copyright (C) The Internet Society (2004).\n
    \  This document is subject to the rights, licenses and restrictions\n   contained
    in BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/S HE\n   REPRESENTS OR IS
    SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE\n   INTERNET ENGINEERING TASK
    FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR\n   IMPLIED, INCLUDING BUT NOT LIMITED
    TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: 15.  Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the IETF's procedures with respect
    to rights in IETF Documents can\n   be found in BCP 78 and BCP 79.\n   Copies
    of IPR disclosures made to the IETF Secretariat and any\n   assurances of licenses
    to be made available, or the result of an\n   attempt made to obtain a general
    license or permission for the use of\n   such proprietary rights by implementers
    or users of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at ietf-\n   ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
