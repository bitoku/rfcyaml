- title: __initial_text__
  contents:
  - ''
- title: TLS 1.3 Extension for Certificate-Based Authentication with an External
  contents:
  - "TLS 1.3 Extension for Certificate-Based Authentication with an External\n   \
    \                          Pre-Shared Key\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies a TLS 1.3 extension that allows a server\
    \ to\n   authenticate with a combination of a certificate and an external pre-\n\
    \   shared key (PSK).\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are candidates\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 7841.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8773.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction\n   2.  Terminology\n   3.  Motivation\
    \ and Design Rationale\n   4.  Extension Overview\n   5.  Certificate with External\
    \ PSK Extension\n     5.1.  Companion Extensions\n     5.2.  Authentication\n\
    \     5.3.  Keying Material\n   6.  IANA Considerations\n   7.  Security Considerations\n\
    \   8.  Privacy Considerations\n   9.  References\n     9.1.  Normative References\n\
    \     9.2.  Informative References\n   Acknowledgments\n   Author's Address\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The TLS 1.3 [RFC8446] handshake protocol provides two mutually\n\
    \   exclusive forms of server authentication.  First, the server can be\n   authenticated\
    \ by providing a signature certificate and creating a\n   valid digital signature\
    \ to demonstrate that it possesses the\n   corresponding private key.  Second,\
    \ the server can be authenticated\n   by demonstrating that it possesses a pre-shared\
    \ key (PSK) that was\n   established by a previous handshake.  A PSK that is established\
    \ in\n   this fashion is called a resumption PSK.  A PSK that is established\n\
    \   by any other means is called an external PSK.  This document\n   specifies\
    \ a TLS 1.3 extension permitting certificate-based server\n   authentication to\
    \ be combined with an external PSK as an input to the\n   TLS 1.3 key schedule.\n\
    \   Several implementors wanted to gain more experience with this\n   specification\
    \ before producing a Standards Track RFC.  As a result,\n   this specification\
    \ is being published as an Experimental RFC to\n   enable interoperable implementations\
    \ and gain deployment and\n   operational experience.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\"\
    , \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described\
    \ in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all\n\
    \   capitals, as shown here.\n"
- title: 3.  Motivation and Design Rationale
  contents:
  - "3.  Motivation and Design Rationale\n   The development of a large-scale quantum\
    \ computer would pose a\n   serious challenge for the cryptographic algorithms\
    \ that are widely\n   deployed today, including the digital signature algorithms\
    \ that are\n   used to authenticate the server in the TLS 1.3 handshake protocol.\n\
    \   It is an open question whether or not it is feasible to build a\n   large-scale\
    \ quantum computer, and if so, when that might happen.\n   However, if such a\
    \ quantum computer is invented, many of the\n   cryptographic algorithms and the\
    \ security protocols that use them\n   would become vulnerable.\n   The TLS 1.3\
    \ handshake protocol employs key agreement algorithms and\n   digital signature\
    \ algorithms that could be broken by the development\n   of a large-scale quantum\
    \ computer [TRANSITION].  The key agreement\n   algorithms include Diffie-Hellman\
    \ (DH) [DH1976] and Elliptic Curve\n   Diffie-Hellman (ECDH) [IEEE1363]; the digital\
    \ signature algorithms\n   include RSA [RFC8017] and the Elliptic Curve Digital\
    \ Signature\n   Algorithm (ECDSA) [FIPS186].  As a result, an adversary that stores\
    \ a\n   TLS 1.3 handshake protocol exchange today could decrypt the\n   associated\
    \ encrypted communications in the future when a large-scale\n   quantum computer\
    \ becomes available.\n   In the near term, this document describes a TLS 1.3 extension\
    \ to\n   protect today's communications from the future invention of a large-\n\
    \   scale quantum computer by providing a strong external PSK as an input\n  \
    \ to the TLS 1.3 key schedule while preserving the authentication\n   provided\
    \ by the existing certificate and digital signature\n   mechanisms.\n"
- title: 4.  Extension Overview
  contents:
  - "4.  Extension Overview\n   This section provides a brief overview of the\n  \
    \ \"tls_cert_with_extern_psk\" extension.\n   The client includes the \"tls_cert_with_extern_psk\"\
    \ extension in the\n   ClientHello message.  The \"tls_cert_with_extern_psk\"\
    \ extension MUST\n   be accompanied by the \"key_share\", \"psk_key_exchange_modes\"\
    , and\n   \"pre_shared_key\" extensions.  The client MAY also find it useful to\n\
    \   include the \"supported_groups\" extension.  Since the\n   \"tls_cert_with_extern_psk\"\
    \ extension is intended to be used only with\n   initial handshakes, it MUST NOT\
    \ be sent alongside the \"early_data\"\n   extension.  These extensions are all\
    \ described in Section 4.2 of\n   [RFC8446], which also requires the \"pre_shared_key\"\
    \ extension to be\n   the last extension in the ClientHello message.\n   If the\
    \ client includes both the \"tls_cert_with_extern_psk\" extension\n   and the\
    \ \"early_data\" extension, then the server MUST terminate the\n   connection\
    \ with an \"illegal_parameter\" alert.\n   If the server is willing to use one\
    \ of the external PSKs listed in\n   the \"pre_shared_key\" extension and perform\
    \ certificate-based\n   authentication, then the server includes the\n   \"tls_cert_with_extern_psk\"\
    \ extension in the ServerHello message.  The\n   \"tls_cert_with_extern_psk\"\
    \ extension MUST be accompanied by the\n   \"key_share\" and \"pre_shared_key\"\
    \ extensions.  If none of the external\n   PSKs in the list provided by the client\
    \ is acceptable to the server,\n   then the \"tls_cert_with_extern_psk\" extension\
    \ is omitted from the\n   ServerHello message.\n   When the \"tls_cert_with_extern_psk\"\
    \ extension is successfully\n   negotiated, the TLS 1.3 key schedule processing\
    \ includes both the\n   selected external PSK and the (EC)DHE shared secret value.\
    \  (EC)DHE\n   refers to Diffie-Hellman over either finite fields or elliptic\n\
    \   curves.  As a result, the Early Secret, Handshake Secret, and Master\n   Secret\
    \ values all depend upon the value of the selected external PSK.\n   Of course,\
    \ the Early Secret does not depend upon the (EC)DHE shared\n   secret.\n   The\
    \ authentication of the server and optional authentication of the\n   client depend\
    \ upon the ability to generate a signature that can be\n   validated with the\
    \ public key in their certificates.  The\n   authentication processing is not\
    \ changed in any way by the selected\n   external PSK.\n   Each external PSK is\
    \ associated with a single hash algorithm, which\n   is required by Section 4.2.11\
    \ of [RFC8446].  The hash algorithm MUST\n   be set when the PSK is established,\
    \ with a default of SHA-256.\n"
- title: 5.  Certificate with External PSK Extension
  contents:
  - "5.  Certificate with External PSK Extension\n   This section specifies the \"\
    tls_cert_with_extern_psk\" extension,\n   which MAY appear in the ClientHello\
    \ message and ServerHello message.\n   It MUST NOT appear in any other messages.\
    \  The\n   \"tls_cert_with_extern_psk\" extension MUST NOT appear in the\n   ServerHello\
    \ message unless the \"tls_cert_with_extern_psk\" extension\n   appeared in the\
    \ preceding ClientHello message.  If an implementation\n   recognizes the \"tls_cert_with_extern_psk\"\
    \ extension and receives it\n   in any other message, then the implementation\
    \ MUST abort the\n   handshake with an \"illegal_parameter\" alert.\n   The general\
    \ extension mechanisms enable clients and servers to\n   negotiate the use of\
    \ specific extensions.  Clients request extended\n   functionality from servers\
    \ with the extensions field in the\n   ClientHello message.  If the server responds\
    \ with a HelloRetryRequest\n   message, then the client sends another ClientHello\
    \ message as\n   described in Section 4.1.2 of [RFC8446], including the same\n\
    \   \"tls_cert_with_extern_psk\" extension as the original ClientHello\n   message,\
    \ or aborts the handshake.\n   Many server extensions are carried in the EncryptedExtensions\n\
    \   message; however, the \"tls_cert_with_extern_psk\" extension is carried\n\
    \   in the ServerHello message.  Successful negotiation of the\n   \"tls_cert_with_extern_psk\"\
    \ extension affects the key used for\n   encryption, so it cannot be carried in\
    \ the EncryptedExtensions\n   message.  Therefore, the \"tls_cert_with_extern_psk\"\
    \ extension is only\n   present in the ServerHello message if the server recognizes\
    \ the\n   \"tls_cert_with_extern_psk\" extension and the server possesses one\
    \ of\n   the external PSKs offered by the client in the \"pre_shared_key\"\n \
    \  extension in the ClientHello message.\n   The Extension structure is defined\
    \ in [RFC8446]; it is repeated here\n   for convenience.\n     struct {\n    \
    \     ExtensionType extension_type;\n         opaque extension_data<0..2^16-1>;\n\
    \     } Extension;\n   The \"extension_type\" identifies the particular extension\
    \ type, and\n   the \"extension_data\" contains information specific to the particular\n\
    \   extension type.\n   This document specifies the \"tls_cert_with_extern_psk\"\
    \ extension,\n   adding one new type to ExtensionType:\n     enum {\n        \
    \ tls_cert_with_extern_psk(33), (65535)\n     } ExtensionType;\n   The \"tls_cert_with_extern_psk\"\
    \ extension is relevant when the client\n   and server possess an external PSK\
    \ in common that can be used as an\n   input to the TLS 1.3 key schedule.  The\
    \ \"tls_cert_with_extern_psk\"\n   extension is essentially a flag to use the\
    \ external PSK in the key\n   schedule, and it has the following syntax:\n   \
    \  struct {\n         select (Handshake.msg_type) {\n             case client_hello:\
    \ Empty;\n             case server_hello: Empty;\n         };\n     } CertWithExternPSK;\n"
- title: 5.1.  Companion Extensions
  contents:
  - "5.1.  Companion Extensions\n   Section 4 lists the extensions that are required\
    \ to accompany the\n   \"tls_cert_with_extern_psk\" extension.  Most of those\
    \ extensions are\n   not impacted in any way by this specification.  However,\
    \ this section\n   discusses the extensions that require additional consideration.\n\
    \   The \"psk_key_exchange_modes\" extension is defined in of Section 4.2.9\n\
    \   of [RFC8446].  The \"psk_key_exchange_modes\" extension restricts the\n  \
    \ use of both the PSKs offered in this ClientHello and those that the\n   server\
    \ might supply via a subsequent NewSessionTicket.  As a result,\n   when the \"\
    psk_key_exchange_modes\" extension is included in the\n   ClientHello message,\
    \ clients MUST include psk_dhe_ke mode.  In\n   addition, clients MAY also include\
    \ psk_ke mode to support a\n   subsequent NewSessionTicket.  When the \"psk_key_exchange_modes\"\
    \n   extension is included in the ServerHello message, servers MUST select\n \
    \  the psk_dhe_ke mode for the initial handshake.  Servers MUST select a\n   key\
    \ exchange mode that is listed by the client for subsequent\n   handshakes that\
    \ include the resumption PSK from the initial\n   handshake.\n   The \"pre_shared_key\"\
    \ extension is defined in Section 4.2.11 of\n   [RFC8446].  The syntax is repeated\
    \ below for convenience.  All of the\n   listed PSKs MUST be external PSKs.  If\
    \ a resumption PSK is listed\n   along with the \"tls_cert_with_extern_psk\" extension,\
    \ the server MUST\n   abort the handshake with an \"illegal_parameter\" alert.\n\
    \     struct {\n         opaque identity<1..2^16-1>;\n         uint32 obfuscated_ticket_age;\n\
    \     } PskIdentity;\n     opaque PskBinderEntry<32..255>;\n     struct {\n  \
    \       PskIdentity identities<7..2^16-1>;\n         PskBinderEntry binders<33..2^16-1>;\n\
    \     } OfferedPsks;\n     struct {\n         select (Handshake.msg_type) {\n\
    \             case client_hello: OfferedPsks;\n             case server_hello:\
    \ uint16 selected_identity;\n         };\n     } PreSharedKeyExtension;\n   \"\
    OfferedPsks\" contains the list of PSK identities and associated\n   binders for\
    \ the external PSKs that the client is willing to use with\n   the server.\n \
    \  The identities are a list of external PSK identities that the client\n   is\
    \ willing to negotiate with the server.  Each external PSK has an\n   associated\
    \ identity that is known to the client and the server; the\n   associated identities\
    \ may be known to other parties as well.  In\n   addition, the binder validation\
    \ (see below) confirms that the client\n   and server have the same key associated\
    \ with the identity.\n   The \"obfuscated_ticket_age\" is not used for external\
    \ PSKs.  As stated\n   in Section 4.2.11 of [RFC8446], clients SHOULD set this\
    \ value to 0,\n   and servers MUST ignore the value.\n   The binders are a series\
    \ of HMAC [RFC2104] values, one for each\n   external PSK offered by the client,\
    \ in the same order as the\n   identities list.  The HMAC value is computed using\
    \ the binder_key,\n   which is derived from the external PSK, and a partial transcript\
    \ of\n   the current handshake.  Generation of the binder_key from the\n   external\
    \ PSK is described in Section 7.1 of [RFC8446].  The partial\n   transcript of\
    \ the current handshake includes a partial ClientHello up\n   to and including\
    \ the PreSharedKeyExtension.identities field, as\n   described in Section 4.2.11.2\
    \ of [RFC8446].\n   The \"selected_identity\" contains the index of the external\
    \ PSK\n   identity that the server selected from the list offered by the\n   client.\
    \  As described in Section 4.2.11 of [RFC8446], the server MUST\n   validate the\
    \ binder value that corresponds to the selected external\n   PSK, and if the binder\
    \ does not validate, the server MUST abort the\n   handshake with an \"illegal_parameter\"\
    \ alert.\n"
- title: 5.2.  Authentication
  contents:
  - "5.2.  Authentication\n   When the \"tls_cert_with_extern_psk\" extension is successfully\n\
    \   negotiated, authentication of the server depends upon the ability to\n   generate\
    \ a signature that can be validated with the public key in the\n   server's certificate.\
    \  This is accomplished by the server sending the\n   Certificate and CertificateVerify\
    \ messages, as described in Sections\n   4.4.2 and 4.4.3 of [RFC8446].\n   TLS\
    \ 1.3 does not permit the server to send a CertificateRequest\n   message when\
    \ a PSK is being used.  This restriction is removed when\n   the \"tls_cert_with_extern_psk\"\
    \ extension is negotiated, allowing\n   certificate-based authentication for both\
    \ the client and the server.\n   If certificate-based client authentication is\
    \ desired, this is\n   accomplished by the client sending the Certificate and\n\
    \   CertificateVerify messages as described in Sections 4.4.2 and 4.4.3\n   of\
    \ [RFC8446].\n"
- title: 5.3.  Keying Material
  contents:
  - "5.3.  Keying Material\n   Section 7.1 of [RFC8446] specifies the TLS 1.3 key\
    \ schedule.  The\n   successful negotiation of the \"tls_cert_with_extern_psk\"\
    \ extension\n   requires the key schedule processing to include both the external\
    \ PSK\n   and the (EC)DHE shared secret value.\n   If the client and the server\
    \ have different values associated with\n   the selected external PSK identifier,\
    \ then the client and the server\n   will compute different values for every entry\
    \ in the key schedule,\n   which will lead to the client aborting the handshake\
    \ with a\n   \"decrypt_error\" alert.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   IANA has updated the \"TLS ExtensionType Values\"\
    \ registry [IANA] to\n   include \"tls_cert_with_extern_psk\" with a value of\
    \ 33 and the list of\n   messages \"CH, SH\" in which the \"tls_cert_with_extern_psk\"\
    \ extension\n   may appear.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   The Security Considerations in [RFC8446] remain\
    \ relevant.\n   TLS 1.3 [RFC8446] does not permit the server to send a\n   CertificateRequest\
    \ message when a PSK is being used.  This\n   restriction is removed when the\
    \ \"tls_cert_with_extern_psk\" extension\n   is offered by the client and accepted\
    \ by the server.  However, TLS\n   1.3 does not permit an external PSK to be used\
    \ in the same fashion as\n   a resumption PSK, and this extension does not alter\
    \ those\n   restrictions.  Thus, a certificate MUST NOT be used with a resumption\n\
    \   PSK.\n   Implementations must protect the external pre-shared key (PSK).\n\
    \   Compromise of the external PSK will make the encrypted session\n   content\
    \ vulnerable to the future development of a large-scale quantum\n   computer.\
    \  However, the generation, distribution, and management of\n   the external PSKs\
    \ is out of scope for this specification.\n   Implementers should not transmit\
    \ the same content on a connection\n   that is protected with an external PSK\
    \ and a connection that is not.\n   Doing so may allow an eavesdropper to correlate\
    \ the connections,\n   making the content vulnerable to the future invention of\
    \ a large-\n   scale quantum computer.\n   Implementations must generate external\
    \ PSKs with a secure key-\n   management technique, such as pseudorandom generation\
    \ of the key or\n   derivation of the key from one or more other secure keys.\
    \  The use of\n   inadequate pseudorandom number generators (PRNGs) to generate\n\
    \   external PSKs can result in little or no security.  An attacker may\n   find\
    \ it much easier to reproduce the PRNG environment that produced\n   the external\
    \ PSKs and search the resulting small set of\n   possibilities, rather than brute-force\
    \ searching the whole key space.\n   The generation of quality random numbers\
    \ is difficult.  [RFC4086]\n   offers important guidance in this area.\n   If\
    \ the external PSK is known to any party other than the client and\n   the server,\
    \ then the external PSK MUST NOT be the sole basis for\n   authentication.  The\
    \ reasoning is explained in Section 4.2 of\n   [K2016].  When this extension is\
    \ used, authentication is based on\n   certificates, not the external PSK.\n \
    \  In this extension, the external PSK preserves confidentiality if the\n   (EC)DH\
    \ key agreement is ever broken by cryptanalysis or the future\n   invention of\
    \ a large-scale quantum computer.  As long as the attacker\n   does not know the\
    \ PSK and the key derivation algorithm remains\n   unbroken, the attacker cannot\
    \ derive the session secrets, even if\n   they are able to compute the (EC)DH\
    \ shared secret.  Should the\n   attacker be able compute the (EC)DH shared secret,\
    \ the forward-\n   secrecy advantages traditionally associated with ephemeral\
    \ (EC)DH\n   keys will no longer be relevant.  Although the ephemeral private\
    \ keys\n   used during a given TLS session are destroyed at the end of a\n   session,\
    \ preventing the attacker from later accessing them, these\n   private keys would\
    \ nevertheless be recoverable due to the break in\n   the algorithm.  However,\
    \ a more general notion of \"secrecy after key\n   material is destroyed\" would\
    \ still be achievable using external PSKs,\n   if they are managed in a way that\
    \ ensures their destruction when they\n   are no longer needed, and with the assumption\
    \ that the algorithms\n   that use the external PSKs remain quantum-safe.\n  \
    \ TLS 1.3 key derivation makes use of the HMAC-based Key Derivation\n   Function\
    \ (HKDF) algorithm, which depends upon the HMAC [RFC2104]\n   construction and\
    \ a hash function.  This extension provides the\n   desired protection for the\
    \ session secrets, as long as HMAC with the\n   selected hash function is a pseudorandom\
    \ function (PRF) [GGM1986].\n   This specification does not require that the external\
    \ PSK is known\n   only by the client and server.  The external PSK may be known\
    \ to a\n   group.  Since authentication depends on the public key in a\n   certificate,\
    \ knowledge of the external PSK by other parties does not\n   enable impersonation.\
    \  Since confidentiality depends on the shared\n   secret from (EC)DH, knowledge\
    \ of the external PSK by other parties\n   does not enable eavesdropping.  However,\
    \ group members can record the\n   traffic of other members and then decrypt it\
    \ if they ever gain access\n   to a large-scale quantum computer.  Also, when\
    \ many parties know the\n   external PSK, there are many opportunities for theft\
    \ of the external\n   PSK by an attacker.  Once an attacker has the external PSK,\
    \ they can\n   decrypt stored traffic if they ever gain access to a large-scale\n\
    \   quantum computer, in the same manner as a legitimate group member.\n   TLS\
    \ 1.3 [RFC8446] takes a conservative approach to PSKs; they are\n   bound to a\
    \ specific hash function and KDF.  By contrast, TLS 1.2\n   [RFC5246] allows PSKs\
    \ to be used with any hash function and the TLS\n   1.2 PRF.  Thus, the safest\
    \ approach is to use a PSK exclusively with\n   TLS 1.2 or exclusively with TLS\
    \ 1.3.  Given one PSK, one can derive a\n   PSK for exclusive use with TLS 1.2\
    \ and derive another PSK for\n   exclusive use with TLS 1.3 using the mechanism\
    \ specified in [IMPORT].\n   TLS 1.3 [RFC8446] has received careful security analysis,\
    \ and the\n   following informal reasoning shows that the addition of this\n \
    \  extension does not introduce any security defects.  This extension\n   requires\
    \ the use of certificates for authentication, but the\n   processing of certificates\
    \ is unchanged by this extension.  This\n   extension places an external PSK in\
    \ the key schedule as part of the\n   computation of the Early Secret.  In the\
    \ initial handshake without\n   this extension, the Early Secret is computed as:\n\
    \      Early Secret = HKDF-Extract(0, 0)\n   With this extension, the Early Secret\
    \ is computed as:\n      Early Secret = HKDF-Extract(External PSK, 0)\n   Any\
    \ entropy contributed by the external PSK can only make the Early\n   Secret better;\
    \ the External PSK cannot make it worse.  For these two\n   reasons, TLS 1.3 continues\
    \ to meet its security goals when this\n   extension is used.\n"
- title: 8.  Privacy Considerations
  contents:
  - "8.  Privacy Considerations\n   Appendix E.6 of [RFC8446] discusses identity-exposure\
    \ attacks on\n   PSKs.  The guidance in this section remains relevant.\n   This\
    \ extension makes use of external PSKs to improve resilience\n   against attackers\
    \ that gain access to a large-scale quantum computer\n   in the future.  This\
    \ extension is always accompanied by the\n   \"pre_shared_key\" extension to provide\
    \ the PSK identities in plaintext\n   in the ClientHello message.  Passive observation\
    \ of the these PSK\n   identities will aid an attacker in tracking users of this\
    \ extension.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n     \
    \         2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n        \
    \      May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8446]  Rescorla,\
    \ E., \"The Transport Layer Security (TLS) Protocol\n              Version 1.3\"\
    , RFC 8446, DOI 10.17487/RFC8446, August 2018,\n              <https://www.rfc-editor.org/info/rfc8446>.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [DH1976]   Diffie, W. and M. Hellman, \"New\
    \ Directions in\n              Cryptography\", IEEE Transactions on Information\
    \ Theory,\n              Vol. 22, No. 6, DOI 10.1109/TIT.1976.1055638, November\n\
    \              1976, <https://ieeexplore.ieee.org/document/1055638>.\n   [FIPS186]\
    \  NIST, \"Digital Signature Standard (DSS)\", Federal\n              Information\
    \ Processing Standards Publication (FIPS) 186-4,\n              DOI 10.6028/NIST.FIPS.186-4,\
    \ July 2013,\n              <https://doi.org/10.6028/NIST.FIPS.186-4>.\n   [GGM1986]\
    \  Goldreich, O., Goldwasser, S., and S. Micali, \"How to\n              construct\
    \ random functions\", Journal of the ACM, Vol. 33,\n              No. 4, pp. 792-807,\
    \ DOI 10.1145/6490.6503, August 1986,\n              <https://doi.org/10.1145/6490.6503>.\n\
    \   [IANA]     IANA, \"TLS ExtensionType Values\",\n              <https://www.iana.org/assignments/tls-extensiontype-\n\
    \              values/tls-extensiontype-values.xhtml>.\n   [IEEE1363] IEEE, \"\
    IEEE Standard Specifications for Public-Key\n              Cryptography\", IEEE\
    \ Std 1363-2000,\n              DOI 10.1109/IEEESTD.2000.92292, August 2000,\n\
    \              <https://ieeexplore.ieee.org/document/891000>.\n   [IMPORT]   Benjamin,\
    \ D. and C. Wood, \"Importing External PSKs for\n              TLS\", Work in\
    \ Progress, Internet-Draft, draft-ietf-tls-\n              external-psk-importer-03,\
    \ 15 February 2020,\n              <https://tools.ietf.org/html/draft-ietf-tls-external-psk-\n\
    \              importer-03>.\n   [K2016]    Krawczyk, H., \"A Unilateral-to-Mutual\
    \ Authentication\n              Compiler for Key Exchange (with Applications to\
    \ Client\n              Authentication in TLS 1.3)\", CCS '16: Proceedings of\
    \ the\n              2016 ACM Communications Security, pp. 1438-50,\n        \
    \      DOI 10.1145/2976749.2978325, October 2016,\n              <https://dl.acm.org/doi/10.1145/2976749.2978325>.\n\
    \   [RFC2104]  Krawczyk, H., Bellare, M., and R. Canetti, \"HMAC: Keyed-\n   \
    \           Hashing for Message Authentication\", RFC 2104,\n              DOI\
    \ 10.17487/RFC2104, February 1997,\n              <https://www.rfc-editor.org/info/rfc2104>.\n\
    \   [RFC4086]  Eastlake 3rd, D., Schiller, J., and S. Crocker,\n             \
    \ \"Randomness Requirements for Security\", BCP 106, RFC 4086,\n             \
    \ DOI 10.17487/RFC4086, June 2005,\n              <https://www.rfc-editor.org/info/rfc4086>.\n\
    \   [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n  \
    \            (TLS) Protocol Version 1.2\", RFC 5246,\n              DOI 10.17487/RFC5246,\
    \ August 2008,\n              <https://www.rfc-editor.org/info/rfc5246>.\n   [RFC8017]\
    \  Moriarty, K., Ed., Kaliski, B., Jonsson, J., and A. Rusch,\n              \"\
    PKCS #1: RSA Cryptography Specifications Version 2.2\",\n              RFC 8017,\
    \ DOI 10.17487/RFC8017, November 2016,\n              <https://www.rfc-editor.org/info/rfc8017>.\n\
    \   [TRANSITION]\n              Hoffman, P., \"The Transition from Classical to\
    \ Post-\n              Quantum Cryptography\", Work in Progress, Internet-Draft,\n\
    \              draft-hoffman-c2pq-06, 25 November 2019,\n              <https://tools.ietf.org/html/draft-hoffman-c2pq-06>.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   Many thanks to Liliya Akhmetzyanova, Roman Danyliw, Christian\n\
    \   Huitema, Ben Kaduk, Geoffrey Keating, Hugo Krawczyk, Mirja K\xFChlewind,\n\
    \   Nikos Mavrogiannopoulos, Nick Sullivan, Martin Thomson, and Peter Yee\n  \
    \ for their review and comments; their efforts have improved this\n   document.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Russ Housley\n   Vigil Security, LLC\n   516 Dranesville\
    \ Road\n   Herndon, VA 20170\n"
