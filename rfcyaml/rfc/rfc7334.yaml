- title: __initial_text__
  contents:
  - "               PCE-Based Computation Procedure to Compute\n      Shortest Constrained\
    \ Point-to-Multipoint (P2MP) Inter-Domain\n                Traffic Engineering\
    \ Label Switched Paths\n"
- title: Abstract
  contents:
  - "Abstract\n   The ability to compute paths for constrained point-to-multipoint\n\
    \   (P2MP) Traffic Engineering Label Switched Paths (TE LSPs) across\n   multiple\
    \ domains has been identified as a key requirement for the\n   deployment of P2MP\
    \ services in MPLS- and GMPLS-controlled networks.\n   The Path Computation Element\
    \ (PCE) has been recognized as an\n   appropriate technology for the determination\
    \ of inter-domain paths of\n   P2MP TE LSPs.\n   This document describes an experiment\
    \ to provide procedures and\n   extensions to the PCE Communication Protocol (PCEP)\
    \ for the\n   computation of inter-domain paths for P2MP TE LSPs.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7334.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Scope ......................................................4\n  \
    \    1.2. Requirements Language ......................................4\n   2.\
    \ Terminology .....................................................5\n   3. Examination\
    \ of Existing Mechanisms ..............................6\n   4. Assumptions .....................................................7\n\
    \   5. Requirements ....................................................8\n  \
    \ 6. Objective Functions and Constraints .............................9\n   7.\
    \ P2MP Path Computation Procedures ...............................10\n      7.1.\
    \ General ...................................................10\n      7.2. Core-Trees\
    \ ................................................10\n      7.3. Optimal Core-Tree\
    \ Computation Procedure ...................13\n      7.4. Sub-tree Computation\
    \ Procedures ...........................15\n      7.5. PCEP Protocol Extensions\
    \ ..................................15\n           7.5.1. Extension of RP Object\
    \ .............................15\n           7.5.2. Domain and PCE Sequence ............................16\n\
    \      7.6. Using H-PCE for Scalability ...............................16\n  \
    \    7.7. Parallelism ...............................................17\n   8.\
    \ Protection .....................................................17\n      8.1.\
    \ End-to-End Protection .....................................17\n      8.2. Domain\
    \ Protection .........................................18\n   9. Manageability\
    \ Considerations ...................................18\n      9.1. Control of\
    \ Function and Policy ............................18\n      9.2. Information and\
    \ Data Models ...............................18\n      9.3. Liveness Detection\
    \ and Monitoring .........................19\n      9.4. Verifying Correct Operation\
    \ ...............................19\n      9.5. Requirements on Other Protocols\
    \ and Functional\n           Components ................................................19\n\
    \      9.6. Impact on Network Operation ...............................19\n  \
    \    9.7. Policy Control ............................................20\n   10.\
    \ Security Considerations .......................................20\n   11. IANA\
    \ Considerations ...........................................21\n   12. Acknowledgements\
    \ ..............................................21\n   13. References ....................................................21\n\
    \      13.1. Normative References .....................................21\n  \
    \    13.2. Informative References ...................................22\n   14.\
    \ Contributors' Addresses .......................................24\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Multicast services are increasingly in demand for high-capacity\n\
    \   applications such as multicast VPNs, IPTV (which may be on-demand or\n   streamed),\
    \ and content-rich media distribution (for example, software\n   distribution,\
    \ financial streaming, or database replication).  The\n   ability to compute constrained\
    \ Traffic Engineering Label Switched\n   Paths (TE LSPs) for point-to-multipoint\
    \ (P2MP) LSPs in MPLS and GMPLS\n   networks across multiple domains is therefore\
    \ required.\n   The applicability of the PCE [RFC4655] for the computation of\
    \ such\n   paths is discussed in [RFC5671], and the requirements placed on the\n\
    \   PCE Communication Protocol (PCEP) for this are given in [RFC5862].\n   This\
    \ document details the requirements for inter-domain P2MP path\n   computation\
    \ and then describes the experimental procedure \"core-tree\"\n   path computation,\
    \ developed to address the requirements and\n   objectives for inter-domain P2MP\
    \ path computation.\n   When results of implementation and deployment are available,\
    \ this\n   document will be updated and refined, and it will then be moved from\n\
    \   Experimental status to Standards Track.\n"
- title: 1.1.  Scope
  contents:
  - "1.1.  Scope\n   The inter-domain P2MP path computation procedures described in\
    \ this\n   document are experimental.  The experiment is intended to enable\n\
    \   research for the usage of the PCE to support inter-domain P2MP path\n   computation.\n\
    \   This document is not intended to replace the intra-domain P2MP path\n   computation\
    \ approach defined by [RFC6006] and will not impact\n   existing PCE procedures\
    \ and operations.\n"
- title: 1.2.  Requirements Language
  contents:
  - "1.2.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   Terminology used in this document is consistent with the\
    \ related\n   MPLS/GMPLS and PCE documents [RFC4461], [RFC4655], [RFC4875],\n\
    \   [RFC5376], [RFC5440], [RFC5441], [RFC5671], and [RFC5862].\n   Additional\
    \ terms are defined below:\n   Core-Tree: a P2MP tree where the root is the ingress\
    \ Label Switching\n   Router (LSR) and the leaf nodes are the entry boundary nodes\
    \ of the\n   leaf domains.\n   Entry BN of domain(n): a boundary node (BN) connecting\
    \ domain(n-1) to\n   domain(n) along a determined sequence of domains.\n   Exit\
    \ BN of domain(n): a BN connecting domain(n) to domain(n+1) along\n   a determined\
    \ sequence of domains.\n   H-PCE: Hierarchical PCE (as per [RFC6805]).\n   Leaf\
    \ Domain: a domain with one or more leaf nodes.\n   Path Tree: a set of LSRs and\
    \ TE links that comprise the path of a\n   P2MP TE LSP from the ingress LSR to\
    \ all egress LSRs (the leaf nodes).\n   Path Domain Sequence: the known sequence\
    \ of domains for a path\n   between the root domain and a leaf domain.\n   Path\
    \ Domain Tree: the tree formed by the domains that the P2MP path\n   crosses,\
    \ where the source (ingress) domain is the root domain.\n   PCE(i): a PCE that\
    \ performs path computations for domain(i).\n   Root Domain: the domain that includes\
    \ the ingress (root) LSR.\n   Sub-tree: a P2MP tree where the root is the selected\
    \ entry BN of the\n   leaf domain and the leaf nodes are the destinations (leaves)\
    \ in that\n   domain.  The sub-trees are grafted to the core-tree.\n   Transit/Branch\
    \ Domain: a domain that has an upstream and one or more\n   downstream neighbor\
    \ domains.\n"
- title: 3.  Examination of Existing Mechanisms
  contents:
  - "3.  Examination of Existing Mechanisms\n   The Path Computation Element (PCE)\
    \ defined in [RFC4655] is an entity\n   that is capable of computing a network\
    \ path or route based on a\n   network graph and applying computational constraints.\
    \  A Path\n   Computation Client (PCC) may make requests to a PCE for paths to\
    \ be\n   computed.\n   [RFC4875] describes how to set up P2MP TE LSPs for use\
    \ in MPLS- and\n   GMPLS-controlled networks.  The PCE is identified as a suitable\n\
    \   application for the computation of paths for P2MP TE LSPs [RFC5671].\n   [RFC5441]\
    \ specifies a procedure relying on the use of multiple PCEs\n   to compute point-to-point\
    \ (P2P) inter-domain constrained shortest\n   paths across a predetermined sequence\
    \ of domains, using a Backward-\n   Recursive PCE-Based Computation (BRPC) technique.\
    \  The technique can\n   be combined with the use of Path-Keys [RFC5520] to preserve\n\
    \   confidentiality across domains, which is sometimes required when\n   domains\
    \ are managed by different Service Providers.\n   PCEP [RFC5440] was extended\
    \ for point-to-multipoint (P2MP) path\n   computation requests in [RFC6006].\n\
    \   As discussed in [RFC4461], a P2MP tree is the ordered set of LSRs and\n  \
    \ TE links that comprise the path of a P2MP TE LSP from its ingress LSR\n   to\
    \ all of its egress LSRs.  A P2MP LSP is set up with TE constraints\n   and allows\
    \ efficient packet or data replication at various branching\n   points in the\
    \ network.  As per [RFC5671], selection of branch points\n   is fundamental to\
    \ the determination of the paths for a P2MP TE LSP.\n   Not only is this selection\
    \ constrained by the network topology and\n   available network resources, but\
    \ it is also determined by the\n   objective functions (OFs) that may be applied\
    \ to path computation.\n   Generally, an inter-domain P2MP tree (i.e., a P2MP\
    \ tree with source\n   and at least one destination residing in different domains)\
    \ is\n   particularly difficult to compute even for a distributed PCE\n   architecture.\
    \  For instance, while the BRPC may be well-suited for\n   P2P paths, P2MP path\
    \ computation involves multiple branching path\n   segments from the source to\
    \ the multiple destinations.  As such,\n   inter-domain P2MP path computation\
    \ may result in a plurality of\n   per-domain path options that may be difficult\
    \ to coordinate\n   efficiently and effectively between domains.  That is, when\
    \ one or\n   more domains have multiple ingress and/or egress boundary nodes\n\
    \   (i.e., when the domains are multiply inter-connected), existing\n   techniques\
    \ may be convoluted when used to determine which boundary\n   node of another\
    \ domain will be utilized for the inter-domain P2MP\n   tree, and there is no\
    \ way to limit the computation of the P2MP tree\n   to those utilized boundary\
    \ nodes.\n   A trivial solution to the computation of the inter-domain P2MP tree\n\
    \   would be to compute shortest inter-domain P2P paths from source to\n   each\
    \ destination and then combine them to generate an inter-domain,\n   shortest-path-to-destination\
    \ P2MP tree.  This solution, however,\n   cannot be used to trade cost to destination\
    \ for overall tree cost\n   (i.e., it cannot produce a Minimum Cost Tree (MCT)),\
    \ and in the\n   context of inter-domain P2MP TE LSPs, it cannot be used to reduce\
    \ the\n   number of domain boundary nodes that are transited.  Computing P2P TE\n\
    \   LSPs individually does not guarantee the generation of an optimal\n   P2MP\
    \ tree for every definition of \"optimal\" in every topology.\n   Per-domain path\
    \ computation [RFC5152] may be used to compute P2MP\n   multi-domain paths but\
    \ may encounter the issues previously described.\n   Furthermore, this approach\
    \ may be considered to have scaling issues\n   during LSP setup.  That is, the\
    \ LSP to each leaf is signaled\n   separately, and each boundary node needs to\
    \ perform path computation\n   for each leaf.\n   P2MP MCT, i.e., a computation\
    \ that guarantees the least cost\n   resulting tree, typically is an NP-complete\
    \ problem.  Moreover,\n   adding and/or removing a single destination to/from\
    \ the tree may\n   result in an entirely different tree.  In this case, frequent\
    \ MCT\n   path computation requests may prove computationally intensive, and\n\
    \   the resulting frequent tunnel reconfiguration may even cause network\n   destabilization.\n\
    \   This document presents a solution, procedures, and extensions to PCEP\n  \
    \ to support P2MP inter-domain path computation.\n"
- title: 4.  Assumptions
  contents:
  - "4.  Assumptions\n   Within this document we make the following assumptions:\n\
    \   o  Due to deployment and commercial limitations (e.g., inter-AS\n      (Autonomous\
    \ System) peering agreements), the path domain tree will\n      be known in advance.\n\
    \   o  Each PCE knows about any leaf LSRs in the domain it serves.\n   Additional\
    \ assumptions are documented in [RFC5441] and are not\n   repeated here.\n"
- title: 5.  Requirements
  contents:
  - "5.  Requirements\n   This section summarizes the requirements specific to computing\n\
    \   inter-domain P2MP paths.  In these requirements, we note that the\n   actual\
    \ computation time taken by any PCE implementation is outside\n   the scope of\
    \ this document, but we observe that reducing the\n   complexity of the required\
    \ computations has a beneficial effect on\n   the computation time regardless\
    \ of implementation.  Additionally,\n   reducing the number of message exchanges\
    \ and the amount of\n   information exchanged will reduce the overall computation\
    \ time for\n   the entire P2MP tree.  We refer to the \"complexity of the\n  \
    \ computation\" as the impact on these aspects of path computation time\n   as\
    \ various parameters of the topology and the P2MP TE LSP are\n   changed.\n  \
    \ It is also important that the solution can preserve confidentiality\n   across\
    \ domains, which is required when domains are managed by\n   different Service\
    \ Providers via the Path-Key mechanism [RFC5520].\n   Other than the requirements\
    \ specified in [RFC5862], a number of\n   requirements specific to inter-domain\
    \ P2MP are detailed below:\n   1.  The complexity of the computation for each\
    \ sub-tree within each\n       domain SHOULD be dependent only on the topology\
    \ of the domain,\n       and it SHOULD be independent of the domain sequence.\n\
    \   2.  The number of PCReq (Path Computation Request) and PCRep (Path\n     \
    \  Computation Reply) messages SHOULD be independent of the number\n       of\
    \ multicast destinations in each domain.\n   3.  It SHOULD be possible to specify\
    \ the domain entry and exit nodes\n       in the PCReq.\n   4.  Specifying which\
    \ nodes are to be used as branch nodes SHOULD be\n       supported in the PCReq.\n\
    \   5.  Reoptimization of existing sub-trees SHOULD be supported.\n   6.  It SHOULD\
    \ be possible to compute diverse P2MP paths from existing\n       P2MP paths.\n"
- title: 6.  Objective Functions and Constraints
  contents:
  - "6.  Objective Functions and Constraints\n   For the computation of a single or\
    \ a set of P2MP TE LSPs, a request\n   to meet specific optimization criteria,\
    \ called an objective function\n   (OF), MAY be used.  SPT (Shortest Path Tree)\
    \ and MCT (Minimum Cost\n   Tree), defined in [RFC6006], are two such OF optimization\
    \ criteria\n   for the sub-tree within each domain used to select the \"best\"\
    \n   candidate path.\n   In addition to the OFs, the following constraints MAY\
    \ also be\n   beneficial for inter-domain P2MP path computation:\n   1.  The computed\
    \ P2MP \"core-tree\" SHOULD be optimal when only\n       considering the paths\
    \ to the leaf domain entry BNs.\n   2.  Grafting and pruning of multicast destinations\
    \ (sub-trees) within\n       a leaf domain SHOULD ensure minimal impact on other\
    \ domains and\n       on the core-tree.\n   3.  It SHOULD be possible to choose\
    \ to optimize the core-tree.\n   4.  It SHOULD be possible to choose to optimize\
    \ the entire tree (P2MP\n       LSP).\n   5.  It SHOULD be possible to combine\
    \ the aforementioned OFs and\n       constraints for P2MP path computation.\n\
    \   When implementing and operating P2MP LSPs, the following need to be\n   taken\
    \ into consideration:\n   o  The complexity of computation.\n   o  The optimality\
    \ of the tree (core-tree as well as full P2MP LSP\n      tree).\n   o  The stability\
    \ of the core-tree.\n   The solution SHOULD allow these trade-offs to be made\
    \ at computation\n   time.\n   The algorithms used to compute optimal paths using\
    \ a combination of\n   OFs and multiple constraints are out of the scope of this\
    \ document.\n"
- title: 7.  P2MP Path Computation Procedures
  contents:
  - '7.  P2MP Path Computation Procedures

    '
- title: 7.1.  General
  contents:
  - "7.1.  General\n   A P2MP path computation can be broken down into two steps:\
    \ core-tree\n   computation and grafting of sub-trees.  Breaking the procedure\
    \ into\n   these specific steps has the following impact, allowing the core-\n\
    \   tree-based solution to provide an optimal inter-domain P2MP TE LSP:\n   o\
    \  The core-tree and sub-tree are smaller in comparison to the full\n      P2MP\
    \ tree and are thus easier to compute.\n   o  An implementation MAY choose to\
    \ keep the core-tree fairly static\n      or computed offline (trade-off with\
    \ optimality).\n   o  Adding/pruning of leaves requires changes to the sub-tree\
    \ in the\n      leaf-domain only.\n   o  The PCEP message size is smaller in comparison.\n\
    \   The following sub-sections describe the core-tree-based mechanism,\n   including\
    \ procedures and PCEP extensions that satisfy the\n   requirements and objectives\
    \ specified in Sections 5 and 6 of this\n   document.\n"
- title: 7.2.  Core-Trees
  contents:
  - "7.2.  Core-Trees\n   A core-tree is defined as a tree that satisfies the following\n\
    \   conditions:\n   o  The root of the core-tree is the ingress LSR in the root\
    \ domain.\n   o  The leaves of the core-tree are the entry boundary nodes in the\n\
    \      leaf domains.\n   To support confidentiality, these nodes and links MAY\
    \ be hidden using\n   the Path-Key mechanism [RFC5520], but they MUST be computed\
    \ and be a\n   part of the core-tree.\n   For example, consider the domain tree\
    \ in Figure 1, representing a\n   domain tree of 6 domains and part of the resulting\
    \ core-tree, which\n   satisfies the aforementioned conditions.\n            \
    \                 +----------------+\n                             |         \
    \       |Domain D1\n                             |        R       |\n        \
    \                     |                |\n                             |     \
    \   A       |\n                             |                |\n             \
    \                +-B------------C-+\n                              /         \
    \     \\\n                             /                \\\n                 \
    \           /                  \\\n            Domain D2      /              \
    \      \\ Domain D3\n            +-------------D--+             +-----E----------+\n\
    \            |                |             |                |\n            |\
    \  F             |             |                |\n            |          G  \
    \   |             |       H        |\n            |                |         \
    \    |                |\n            |                |             |        \
    \        |\n            +-I--------------+             +-J------------K-+\n  \
    \           /\\                             /              \\\n            / \
    \ \\                           /                \\\n           /    \\       \
    \                  /                  \\\n          /      \\                \
    \       /                    \\\n         /        \\                     /  \
    \                    \\\n        /          \\                   /           \
    \             \\\n       / Domain D4  \\      Domain D5  /              Domain\
    \ D6   \\\n     +-L-------------W+       +------P---------+      +-----------T----+\n\
    \     |                |       |                |      |                |\n  \
    \   |                |       |  Q             |      |   U            |\n    \
    \ |  M        O    |       |         S      |      |                |\n     |\
    \                |       |                |      |          V     |\n     |  \
    \        N     |       |   R            |      |                |\n     +----------------+\
    \       +----------------+      +----------------+\n                         \
    \ Figure 1: Domain Tree Example\n                                    (R)\n   \
    \                                  |\n                                    (A)\n\
    \                                    / \\\n                                  \
    \ /   \\\n                                 (B)   (C)\n                       \
    \          /       \\\n                                /         \\\n        \
    \                      (D)         (E)\n                              /      \
    \      |\n                             /             |\n                     \
    \      (G)            (H)\n                           /              / \\\n  \
    \                        /              /   \\\n                        (I)  \
    \          (J)   (K)\n                        / \\            /       \\\n   \
    \                    /   \\          /         \\\n                     (L)  \
    \ (W)      (P)         (T)\n                           Figure 2: Core-Tree\n \
    \  A core-tree is computed such that the root of the tree is R and the\n   leaf\
    \ nodes are the entry nodes of the destination domains (L, W, P,\n   and T). \
    \ The Path-Key mechanism can be used to hide the internal\n   nodes and links\
    \ in the final core-tree as shown below for domains D2\n   and D3 (nodes G and\
    \ H are hidden via Path-Keys PK1 and PK2,\n   respectively).\n               \
    \                     (R)\n                                     |\n          \
    \                          (A)\n                                    / \\\n   \
    \                                /   \\\n                                 (B)\
    \   (C)\n                                 /       \\\n                       \
    \         /         \\\n                              (D)         (E)\n      \
    \                        /            |\n                             /      \
    \       |\n                          |PK1|          |PK2|\n                  \
    \         /              / \\\n                          /              /   \\\
    \n                        (I)            (J)   (K)\n                        /\
    \ \\            /       \\\n                       /   \\          /         \\\
    \n                     (L)   (W)      (P)         (T)\n                    Figure\
    \ 3: Core-Tree with Path-Key\n"
- title: 7.3.  Optimal Core-Tree Computation Procedure
  contents:
  - "7.3.  Optimal Core-Tree Computation Procedure\n   Applying the core-tree procedure\
    \ to large groups of domains, such as\n   the Internet, is not considered feasible\
    \ or desirable and is out of\n   the scope of this document.\n   The following\
    \ extended BRPC-based procedure can be used to compute\n   the core-tree.  Note\
    \ that a root PCE MAY further use its own enhanced\n   optimization techniques\
    \ in the future to compute the core-tree.\n   A BRPC-based core-tree path computation\
    \ procedure is described below:\n   1.  Use the BRPC procedures to compute the\
    \ VSPT(i) (Virtual Shortest\n       Path Tree) for each leaf BN(i), i=1 to n,\
    \ where n is the total\n       number of entry nodes for all the leaf domains.\
    \  In each VSPT(i),\n       there are a number of P(i) paths.\n   2.  When the\
    \ root PCE has computed all the VSPT(i), i=1 to n, take\n       one path from\
    \ each VSPT and form all possible sets of paths.  We\n       call them PathSet(j),\
    \ j=1 to M, where M=P(1)xP(2)...xP(n).\n   3.  For each PathSet(j), there are\
    \ n S2L (Source-to-Leaf) BN paths.\n       Form these n paths into a core-tree(j).\n\
    \   4.  There will be M number core-trees computed from step 3.  An\n       optimal\
    \ core-tree is selected based on the OF and constraints.\n   Note that since the\
    \ point-to-point BRPC procedure is used to compute\n   VSPT, the path request\
    \ and response message formats defined in\n   [RFC5440] are used.\n   Also note\
    \ that the application of BRPC in the aforementioned\n   procedure differs from\
    \ the typical one since paths returned from a\n   downstream PCE are not necessarily\
    \ pruned from the solution set\n   (extended VSPT) by intermediate PCEs.  The\
    \ reason for this is that if\n   the PCE in a downstream domain does the pruning\
    \ and returns the\n   single optimal sub-path to the upstream PCE, the combination\
    \ of these\n   single optimal sub-paths into a core-tree is not necessarily optimal\n\
    \   even if each S2L (Source-to-Leaf) sub-path is optimal.\n   Without trimming,\
    \ the ingress PCE will obtain all the possible S2L\n   sub-paths set for the entry\
    \ boundary nodes of the leaf domain.  By\n   looking through all the combinations\
    \ and taking one sub-path from\n   each set to build one tree, the PCE will then\
    \ select the optimal\n   core-tree.\n   A PCE MAY add equal-cost paths within\
    \ the domain while constructing\n   an extended VSPT.  This will provide the ingress\
    \ PCE more candidate\n   paths for an optimal core-tree.\n   The proposed method\
    \ may present a scalability problem for the dynamic\n   computation of the core-tree\
    \ (by iterative checking of all\n   combinations of the solution space), especially\
    \ with dense/meshed\n   domains.  Considering a domain sequence D1, D2, D3, D4,\
    \ where the\n   leaf boundary node is at domain D4, PCE(4) will return 1 path.\n\
    \   PCE(3) will return N paths, where N is E(3) x X(3), where E(k) x X(k)\n  \
    \ denotes the number of entry nodes times the number of exit nodes for\n   that\
    \ domain.  PCE(2) will return M paths, where M = E(2) x X(2) x N =\n   E(2) x\
    \ X(2) x E(3) x X(3) x 1, etc.  Generally speaking, the number\n   of potential\
    \ paths at the ingress PCE Q = prod E(k) x X(k).\n   Consequently, it is expected\
    \ that the core-tree will typically be\n   computed offline, without precluding\
    \ the use of dynamic, online\n   mechanisms such as the one presented here, in\
    \ which case it SHOULD be\n   possible to configure transit PCEs to control the\
    \ number of paths\n   sent upstream during BRPC (trading trimming for optimality\
    \ at the\n   point of trimming and downwards).\n"
- title: 7.4.  Sub-tree Computation Procedures
  contents:
  - "7.4.  Sub-tree Computation Procedures\n   Once the core-tree is built, the grafting\
    \ of all the leaf nodes from\n   each domain to the core-tree can be achieved\
    \ by a number of\n   algorithms.  One algorithm for doing this phase is that the\
    \ root PCE\n   will send the request with the C-bit set (as defined in Section\
    \ 7.5.1\n   of this document) for the path computation to the destination(s)\n\
    \   directly to the PCE where the destination(s) belong(s) along with the\n  \
    \ core-tree computed per Section 7.2.\n   This approach requires that the root\
    \ PCE manage a potentially large\n   number of adjacencies (either in persistent\
    \ or non-persistent mode),\n   including PCEP adjacencies to PCEs that are not\
    \ within neighbor\n   domains.\n   An alternative would involve establishing PCEP\
    \ adjacencies that\n   correspond to the PCE domain tree.  This would require\
    \ that branch\n   PCEs forward requests and responses from the root PCE towards\
    \ the\n   leaf PCEs and vice versa.\n   Note that the P2MP path request and response\
    \ format is as per\n   [RFC6006], where Record Route Objects (RROs) are used to\
    \ carry the\n   core-tree paths in the P2MP grafting request.\n   The algorithms\
    \ to compute the optimal large sub-tree are outside the\n   scope of this document.\n"
- title: 7.5.  PCEP Protocol Extensions
  contents:
  - '7.5.  PCEP Protocol Extensions

    '
- title: 7.5.1.  Extension of RP Object
  contents:
  - "7.5.1.  Extension of RP Object\n   This experiment will be carried out by extending\
    \ the RP (Request\n   Parameters) object (defined in [RFC5440]) used in PCEP requests\
    \ and\n   responses.\n   The extended format of the RP object body to include\
    \ the C-bit is as\n   follows:\n   The C-bit is added in the flag bits field of\
    \ the RP object to signal\n   the receiver of the message whether or not the request/reply\
    \ is for\n   inter-domain P2MP core-tree.\n   The following flag is added in this\
    \ document:\n      Bit Number     Name Flag\n      17             Core-tree computation\
    \ (C-bit)\n      C-bit (Core-Tree bit - 1 bit):\n      0:  Indicates that this\
    \ is not for an inter-domain P2MP core-tree.\n      1:  Indicates that this is\
    \ a PCEP request or a response for the\n          computation of an inter-domain\
    \ core-tree or for the grafting\n          of a sub-tree to an inter-domain core-tree.\n"
- title: 7.5.2.  Domain and PCE Sequence
  contents:
  - "7.5.2.  Domain and PCE Sequence\n   The procedure described in this document\
    \ requires the domain tree to\n   be known in advance.  This information MAY be\
    \ either administratively\n   predetermined or dynamically discovered by some\
    \ means, such as the\n   Hierarchical PCE (H-PCE) framework [RFC6805], or derived\
    \ through the\n   IGP/BGP routing information.\n   Examples of ways to encode\
    \ the domain path tree are found in\n   [RFC5886], which uses PCE-ID Objects,\
    \ and [DOMAIN-SEQ].\n"
- title: 7.6.  Using H-PCE for Scalability
  contents:
  - "7.6.  Using H-PCE for Scalability\n   The ingress/root PCE is responsible for\
    \ the core-tree computation as\n   well as grafting of sub-trees into the multi-domain\
    \ tree.  Therefore,\n   the ingress/root PCE will receive all computed path segments\
    \ from all\n   the involved domains.  When the ingress/root PCE chooses to have\
    \ a\n   PCEP session with all involved PCEs, this may cause an excessive\n   number\
    \ of sessions or added complexity in implementations.\n   The H-PCE framework\
    \ [RFC6805] may be used to establish a dedicated\n   PCE with the capability (memory\
    \ and CPU) and knowledge to maintain\n   the necessary PCEP sessions.  The parent\
    \ PCE would be responsible for\n   sending an intra-domain path computation request\
    \ to the PCEs,\n   combining them, and returning the overall P2MP tree.\n"
- title: 7.7.  Parallelism
  contents:
  - "7.7.  Parallelism\n   In order to minimize latency in path computation in multi-domain\n\
    \   networks, intra-domain path segments and intra-domain sub-trees can\n   be\
    \ computed in parallel when possible.  The proposed procedures in\n   this document\
    \ present opportunities for parallelism:\n   1.  The BRPC procedure for each leaf\
    \ boundary node can be launched in\n       parallel by the ingress/root PCE for\
    \ dynamic computation of the\n       core-tree.\n   2.  The grafting of sub-trees\
    \ can be triggered in parallel once the\n       core-tree is computed.\n   One\
    \ of the potential issues of parallelism is that the ingress PCE\n   would require\
    \ a potentially high number of PCEP adjacencies to\n   \"remote\" PCEs at the\
    \ same time; this situation may not be desirable.\n"
- title: 8.  Protection
  contents:
  - "8.  Protection\n   It is envisaged that protection may be required when deploying\
    \ and\n   using inter-domain P2MP TE LSPs.  The procedures and mechanisms\n  \
    \ defined in this document do not prohibit the use of existing and\n   proposed\
    \ types of protection, including end-to-end protection\n   [RFC4872] and domain\
    \ protection schemes.\n   Segment or facility (link and node) protection is problematic\
    \ in\n   inter-domain environments due to the limit of fast reroute (FRR)\n  \
    \ [RFC4875] requiring knowledge of its next hop across domain\n   boundaries while\
    \ maintaining domain confidentiality.  However, the\n   FRR protection might be\
    \ implemented if next-hop information was known\n   in advance.\n"
- title: 8.1.  End-to-End Protection
  contents:
  - "8.1.  End-to-End Protection\n   An end-to-end protection (for nodes and links)\
    \ principle can be\n   applied for computing backup P2MP TE LSPs.  During computation\
    \ of the\n   core-tree and sub-trees, protection may also be taken into\n   consideration.\
    \  A PCE may compute the primary and backup P2MP TE LSP\n   together or sequentially.\n"
- title: 8.2.  Domain Protection
  contents:
  - "8.2.  Domain Protection\n   In this protection scheme, a backup P2MP tree can\
    \ be computed that\n   excludes the transit/branch domain completely.  A backup\
    \ domain path\n   tree is needed with the same source domain and destination domains\n\
    \   and a new set of transit domains.  The backup path tree can be\n   applied\
    \ to the above procedure to obtain the backup P2MP TE LSP with\n   disjoint transit\
    \ domains.\n"
- title: 9.  Manageability Considerations
  contents:
  - "9.  Manageability Considerations\n   [RFC5862] describes various manageability\
    \ requirements in support of\n   P2MP path computation when applying PCEP.  This\
    \ section describes how\n   the manageability requirements mentioned in [RFC5862]\
    \ are supported\n   in the context of PCEP extensions specified in this document.\n\
    \   Note that [RFC5440] describes various manageability considerations in\n  \
    \ PCEP, and most of the manageability requirements mentioned in\n   [RFC6006]\
    \ are already covered there.\n"
- title: 9.1.  Control of Function and Policy
  contents:
  - "9.1.  Control of Function and Policy\n   In addition to the PCE configuration\
    \ parameters listed in [RFC5440]\n   and [RFC6006], the following additional parameters\
    \ might be required:\n   o  The ability to enable or disable multi-domain P2MP\
    \ path\n      computations on the PCE.\n   o  Configuration of the PCE to enable\
    \ or disable the advertisement of\n      its multi-domain P2MP path computation\
    \ capability.\n"
- title: 9.2.  Information and Data Models
  contents:
  - "9.2.  Information and Data Models\n   A number of MIB objects have been defined\
    \ for general PCEP control\n   and monitoring of P2P computations in [PCEP-MIB].\
    \  [RFC5862]\n   specifies that MIB objects will be required to support the control\n\
    \   and monitoring of the protocol extensions defined in this document.\n   [PCEP-P2MP-MIB]\
    \ describes managed objects for modeling of PCEP\n   communications between a\
    \ PCC and PCE, communication between PCEs, and\n   P2MP path computation requests\
    \ and responses.\n"
- title: 9.3.  Liveness Detection and Monitoring
  contents:
  - "9.3.  Liveness Detection and Monitoring\n   No changes are necessary to the liveness\
    \ detection and monitoring\n   requirements as already embodied in [RFC4657].\n\
    \   It should be noted that multi-domain P2MP computations are likely to\n   take\
    \ longer than P2P computations and single-domain P2MP\n   computations.  The liveness\
    \ detection and monitoring features of the\n   PCEP SHOULD take this into account.\n"
- title: 9.4.  Verifying Correct Operation
  contents:
  - "9.4.  Verifying Correct Operation\n   There are no additional requirements beyond\
    \ those expressed in\n   [RFC4657] for verifying the correct operation of the\
    \ PCEP.  Note that\n   verification of the correct operation of the PCE and its\
    \ algorithms\n   is out of the scope of the protocol requirements, but a PCC MAY\
    \ send\n   the same request to more than one PCE and compare the results.\n"
- title: 9.5.  Requirements on Other Protocols and Functional Components
  contents:
  - "9.5.  Requirements on Other Protocols and Functional Components\n   A PCE operates\
    \ on a topology graph that may be built using\n   information distributed by TE\
    \ extensions to the routing protocol\n   operating within the network.  In order\
    \ that the PCE can select a\n   suitable path for the signaling protocol to use\
    \ to install the P2MP\n   TE LSP, the topology graph MUST include information\
    \ about the P2MP\n   signaling and branching capabilities of each LSR in the network.\n\
    \   Mechanisms for the knowledge of other domains and the discovery of\n   corresponding\
    \ PCEs and their capabilities SHOULD be provided, and\n   this information MAY\
    \ be collected by other mechanisms.\n   Whatever means is used to collect the\
    \ information to build the\n   topology graph, the graph MUST include the requisite\
    \ information.  If\n   the TE extensions to the routing protocol are used, these\
    \ SHOULD be\n   as described in [RFC5073].\n"
- title: 9.6.  Impact on Network Operation
  contents:
  - "9.6.  Impact on Network Operation\n   The use of a PCE to compute P2MP paths\
    \ is not expected to have\n   significant impact on network operations.  However,\
    \ it should be\n   noted that the introduction of P2MP support to a PCE that already\n\
    \   provides P2P path computation might change the loading of the PCE\n   significantly,\
    \ and that might have an impact on the network behavior,\n   especially during\
    \ recovery periods immediately after a network\n   failure.\n   The dynamic computation\
    \ of core-trees might also have an impact on\n   the load of the involved PCEs\
    \ as well as path computation times.\n   It should be noted that pre-computing\
    \ and maintaining domain trees\n   might introduce considerable administration\
    \ effort for the operator.\n"
- title: 9.7.  Policy Control
  contents:
  - "9.7.  Policy Control\n   [RFC5394] provides additional details on policy within\
    \ the PCE\n   architecture and also provides context for the support of PCE Policy.\n\
    \   They are also applicable to inter-domain P2MP path computation via\n   the\
    \ core-tree mechanism.\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   As described in [RFC5862], P2MP path computation\
    \ requests are more\n   CPU-intensive and also utilize more link bandwidth.  In\
    \ the event of\n   an unauthorized P2MP path computation request or a denial-of-service\n\
    \   attack, the subsequent PCEP requests and processing may be disruptive\n  \
    \ to the network.  Consequently, it is important that implementations\n   conform\
    \ to the relevant security requirements of [RFC5440] that\n   specifically help\
    \ to minimize or negate unauthorized P2MP path\n   computation requests and denial-of-service\
    \ attacks.  These mechanisms\n   include:\n   o  Securing the PCEP session requests\
    \ and responses using TCP\n      security techniques (Section 10.2 of [RFC5440]).\n\
    \   o  Authenticating the PCEP requests and responses to ensure the\n      message\
    \ is intact and sent from an authorized node (Section 10.3\n      of [RFC5440]).\n\
    \   o  Providing policy control by explicitly defining which PCCs, via IP\n  \
    \    access lists, are allowed to send P2MP path requests to the PCE\n      (Section\
    \ 10.6 of [RFC5440]).\n   PCEP operates over TCP, so it is also important to secure\
    \ the PCE and\n   PCC against TCP denial-of-service attacks.  Section 10.7.1 of\n\
    \   [RFC5440] outlines a number of mechanisms for minimizing the risk of\n   TCP-based\
    \ denial-of-service attacks against PCEs and PCCs.\n   PCEP implementations SHOULD\
    \ also consider the additional security\n   provided by the TCP Authentication\
    \ Option (TCP-AO) [RFC5925].\n   Finally, any multi-domain operation necessarily\
    \ involves the exchange\n   of information across domain boundaries.  This may\
    \ represent a\n   significant security and confidentiality risk, especially when\
    \ the\n   domains are controlled by different commercial entities.  PCEP allows\n\
    \   individual PCEs to maintain confidentiality of their domain path\n   information\
    \ by using Path-Keys [RFC5520] and would allow for securing\n   of domain path\
    \ information when performing core-tree-based path\n   computations.\n"
- title: 11.  IANA Considerations
  contents:
  - "11.  IANA Considerations\n   IANA maintains the \"Path Computation Element Protocol\
    \ (PCEP) Numbers\"\n   registry and the \"RP Object Flag Field\" sub-registry.\n\
    \   IANA has allocated a new bit from this registry as follows:\n      Bit   \
    \          Description                        Reference\n      17            \
    \  Core-tree computation (C-bit)      [RFC7334]\n"
- title: 12.  Acknowledgements
  contents:
  - "12.  Acknowledgements\n   The authors would like to thank Adrian Farrel, Dan\
    \ Tappan, Olufemi\n   Komolafe, Oscar Gonzalez de Dios, and Julien Meuric for\
    \ their\n   valuable comments on this document.\n"
- title: 13.  References
  contents:
  - '13.  References

    '
- title: 13.1.  Normative References
  contents:
  - "13.1.  Normative References\n   [RFC2119]        Bradner, S., \"Key words for\
    \ use in RFCs to Indicate\n                    Requirement Levels\", BCP 14, RFC\
    \ 2119, March 1997.\n   [RFC5440]        Vasseur, JP., Ed., and JL. Le Roux, Ed.,\
    \ \"Path\n                    Computation Element (PCE) Communication Protocol\n\
    \                    (PCEP)\", RFC 5440, March 2009.\n   [RFC5441]        Vasseur,\
    \ JP., Ed., Zhang, R., Bitar, N., and JL. Le\n                    Roux, \"A Backward-Recursive\
    \ PCE-Based Computation\n                    (BRPC) Procedure to Compute Shortest\
    \ Constrained\n                    Inter-Domain Traffic Engineering Label Switched\n\
    \                    Paths\", RFC 5441, April 2009.\n   [RFC6006]        Zhao,\
    \ Q., Ed., King, D., Ed., Verhaeghe, F., Takeda,\n                    T., Ali,\
    \ Z., and J. Meuric, \"Extensions to the Path\n                    Computation\
    \ Element Communication Protocol (PCEP)\n                    for Point-to-Multipoint\
    \ Traffic Engineering Label\n                    Switched Paths\", RFC 6006, September\
    \ 2010.\n"
- title: 13.2.  Informative References
  contents:
  - "13.2.  Informative References\n   [RFC4461]        Yasukawa, S., Ed., \"Signaling\
    \ Requirements for\n                    Point-to-Multipoint Traffic-Engineered\
    \ MPLS Label\n                    Switched Paths (LSPs)\", RFC 4461, April 2006.\n\
    \   [RFC4655]        Farrel, A., Vasseur, J.-P., and J. Ash, \"A Path\n      \
    \              Computation Element (PCE)-Based Architecture\", RFC\n         \
    \           4655, August 2006.\n   [RFC4657]        Ash, J., Ed., and J. Le Roux,\
    \ Ed., \"Path Computation\n                    Element (PCE) Communication Protocol\
    \ Generic\n                    Requirements\", RFC 4657, September 2006.\n   [RFC4872]\
    \        Lang, J., Ed., Rekhter, Y., Ed., and D.\n                    Papadimitriou,\
    \ Ed., \"RSVP-TE Extensions in Support\n                    of End-to-End Generalized\
    \ Multi-Protocol Label\n                    Switching (GMPLS) Recovery\", RFC\
    \ 4872, May 2007.\n   [RFC4875]        Aggarwal, R., Ed., Papadimitriou, D., Ed.,\
    \ and S.\n                    Yasukawa, Ed., \"Extensions to Resource Reservation\n\
    \                    Protocol - Traffic Engineering (RSVP-TE) for Point-\n   \
    \                 to-Multipoint TE Label Switched Paths (LSPs)\", RFC\n      \
    \              4875, May 2007.\n   [RFC5073]        Vasseur, J., Ed., and J. Le\
    \ Roux, Ed., \"IGP Routing\n                    Protocol Extensions for Discovery\
    \ of Traffic\n                    Engineering Node Capabilities\", RFC 5073, December\n\
    \                    2007.\n   [RFC5152]        Vasseur, JP., Ed., Ayyangar, A.,\
    \ Ed., and R. Zhang,\n                    \"A Per-Domain Path Computation Method\
    \ for\n                    Establishing Inter-Domain Traffic Engineering (TE)\n\
    \                    Label Switched Paths (LSPs)\", RFC 5152, February\n     \
    \               2008.\n   [RFC5376]        Bitar, N., Zhang, R., and K. Kumaki,\
    \ \"Inter-AS\n                    Requirements for the Path Computation Element\n\
    \                    Communication Protocol (PCECP)\", RFC 5376, November\n  \
    \                  2008.\n   [RFC5394]        Bryskin, I., Papadimitriou, D.,\
    \ Berger, L., and J.\n                    Ash, \"Policy-Enabled Path Computation\
    \ Framework\",\n                    RFC 5394, December 2008.\n   [RFC5520]   \
    \     Bradford, R., Ed., Vasseur, JP., and A. Farrel,\n                    \"\
    Preserving Topology Confidentiality in Inter-Domain\n                    Path\
    \ Computation Using a Path-Key-Based Mechanism\",\n                    RFC 5520,\
    \ April 2009.\n   [RFC5671]        Yasukawa, S. and A. Farrel, Ed., \"Applicability\
    \ of\n                    the Path Computation Element (PCE) to Point-to-\n  \
    \                  Multipoint (P2MP) MPLS and GMPLS Traffic Engineering\n    \
    \                (TE)\", RFC 5671, October 2009.\n   [RFC5862]        Yasukawa,\
    \ S. and A. Farrel, \"Path Computation\n                    Clients (PCC) - Path\
    \ Computation Element (PCE)\n                    Requirements for Point-to-Multipoint\
    \ MPLS-TE\", RFC\n                    5862, June 2010.\n   [RFC5886]        Vasseur,\
    \ JP., Ed., Le Roux, JL., and Y. Ikejiri, \"A\n                    Set of Monitoring\
    \ Tools for Path Computation Element\n                    (PCE)-Based Architecture\"\
    , RFC 5886, June 2010.\n   [RFC5925]        Touch, J., Mankin, A., and R. Bonica,\
    \ \"The TCP\n                    Authentication Option\", RFC 5925, June 2010.\n\
    \   [RFC6805]        King, D., Ed., and A. Farrel, Ed., \"The Application\n  \
    \                  of the Path Computation Element Architecture to the\n     \
    \               Determination of a Sequence of Domains in MPLS and\n         \
    \           GMPLS\", RFC 6805, November 2012.\n   [PCEP-MIB]       Koushik, A.,\
    \ Stephan, E., Zhao, Q., King, D., and J.\n                    Hardwick, \"Path\
    \ Computation Element Protocol (PCEP)\n                    Management Information\
    \ Base\", Work in Progress,\n                    July 2014.\n   [PCEP-P2MP-MIB]\
    \  Zhao, Q., Dhody, D., Palle, U., and D. King,\n                    \"Management\
    \ Information Base for the PCE\n                    Communications Protocol (PCEP)\
    \ When Requesting\n                    Point-to-Multipoint Services\", Work in\
    \ Progress,\n                    August 2012.\n   [DOMAIN-SEQ]     Dhody, D.,\
    \ Palle, U., and R. Casellas, \"Standard\n                    Representation Of\
    \ Domain-Sequence\", Work in\n                    Progress, July 2014.\n"
- title: 14.  Contributors' Addresses
  contents:
  - "14.  Contributors' Addresses\n   Siva Sivabalan\n   Cisco Systems\n   2000 Innovation\
    \ Drive\n   Kanata, Ontario  K2K 3E8\n   Canada\n   EMail: msiva@cisco.com\n \
    \  Tarek Saad\n   Cisco Systems, Inc.\n   2000 Innovation Drive\n   Kanata, Ontario\
    \  K2K 3E8\n   Canada\n   EMail: tsaad@cisco.com\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Quintin Zhao\n   Huawei Technology\n   125 Nagog Technology\
    \ Park\n   Acton, MA  01719\n   US\n   EMail: quintin.zhao@huawei.com\n   Dhruv\
    \ Dhody\n   Huawei Technology\n   Leela Palace\n   Bangalore, Karnataka  560008\n\
    \   India\n   EMail: dhruv.dhody@huawei.com\n   Daniel King\n   Old Dog Consulting\n\
    \   UK\n   EMail: daniel@olddog.co.uk\n   Zafar Ali\n   Cisco Systems\n   2000\
    \ Innovation Drive\n   Kanata, Ontario  K2K 3E8\n   Canada\n   EMail: zali@cisco.com\n\
    \   Ramon Casellas\n   CTTC\n   Av. Carl Friedrich Gauss n7\n   Castelldefels,\
    \ Barcelona  08860\n   Spain\n   EMail: ramon.casellas@cttc.es\n"
