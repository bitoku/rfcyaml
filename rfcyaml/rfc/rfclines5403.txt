Abstract This document describes version 2 of the RPCSEC GSS protocol.
Version 2 is the same as version 1 (specified in RFC 2203) except that support for channel bindings has been added.
RPCSEC GSS allows remote procedure call (RPC) protocols to access the Generic Security Services Application Programming Interface (GSS API).
This document describes RPCSEC GSS version 2 (RPCSEC GSSv2).
RPCSEC GSSv2 is the same as RPCSEC GSS version 1 (RPCSEC GSSv1) [1] except that support for channel bindings [2] has been added.
The primary motivation for channel bindings is to securely take advantage of hardware assisted encryption that might exist at lower levels of the networking protocol stack, such as at the Internet Protocol (IP) layer in the form of IPsec (see [7] and [8] for information on IPsec channel bindings).
The secondary motivation is that even if lower levels are not any more efficient at encryption than the RPCSEC GSS layer, if encryption is occurring at the lower level, it can be redundant at the RPCSEC GSS level.
RPCSEC GSSv2 and RPCSEC GSSv1 are protocols that exchange tokens emitted by the Generic Security Services (GSS) framework, which is defined in [3], and differ only in the support for GSS channel bindings in RPCSEC GSSv2.
GSS itself supports channel bindings, and in theory RPCSEC GSSv2 could use native GSS channel bindings to achieve the effects described in this section.
However, as Section 1.1.6 of [3] states, not all implementations of all GSS mechanisms support channel bindings.
This is sufficient justification for the approach taken in this document: modify the RPCSEC GSS protocol to support channel bindings independent of the capabilities of the GSS mechanism being used.
Once an RPCSEC GSS target and initiator are mutually assured that they are each using the same secure, end to end channel, the overhead of computing message integrity codes (MICs) for authenticating and integrity protecting RPC requests and replies can be eliminated because the channel is performing the same function.
Similarly, if the channel also provides confidentiality, the overhead of RPCSEC GSS privacy protection can also be eliminated.
The External Data Representation (XDR) [4] description is provided in this document in a way that makes it simple for the reader to extract into a ready to compile form.
That is, if the above script is stored in a file called "extract.sh", and this document is in a file called "spec.txt", then the reader can do: <CODE BEGINS> sh extract.sh
rpcsec gss v2.x <CODE ENDS
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 [5].
If a channel between two parties is secure, there must be shared information between the two parties.
This information might be secret or not.
The requirement for secrecy depends on the specifics of the channel.
For example, the shared information could be the concatenation of the public key of the source and destination of the channel (where each public key has a corresponding private key).
Suppose the channel is not end to end, i.e., a man in the middle (MITM) exists, and there are two channels, one from the initiator to the MITM, and one from the MITM to the target.
The MITM cannot simply force each channel to use the same public keys, because a public key derives from a private key, and the key management system for each node will surely assign unique or random private keys.
At most, the MITM can force one end of each channel to use the same public key.
The MIC of the public keys from the initiator will not be verified by the target, because at least one of the public keys will be different.
Similarly, the MIC of the public keys from the target will not be verified by the initiator because at least one of the public keys will be different.
A higher layer protocol using the secure channel can safely exploit the channel to the mutual benefit of the higher level parties if each higher level party can prove:
They each know the channel's shared information.
The proof of the knowledge of the shared information is in fact being conveyed by each of the higher level parties, and not some other entities.
RPCSEC GSSv2 simply adds an optional round trip that has the initiator compute a GSS MIC on the channel binding's shared information, and sends the MIC to the target.
The target verifies the MIC, and in turn sends its own MIC of the shared information to the initiator that then verifies the target's MIC.
First, the initiator and target are mutually authenticated.
Second, the initiator and target prove they know the channel's shared information, and thus are using the same channel.
Third, the first and second things are done simultaneously.
The RPCSEC GSSv2 protocol will now be explained.
The entire protocol is not presented.
Instead the differences between RPCSEC GSSv2 and RPCSEC GSSv1 are shown.
The functionality of RPCSEC GSSv1 is fully supported by RPCSEC GSSv2. 3.2.
New Version Number <CODE BEGINS
) 2009 IETF Trust and the persons identified ///
The document authors are identified in [RFC2203] and ///
Neither the name of Internet Society, IETF or IETF ///
IS PROVIDED BY THE COPYRIGHT HOLDERS ///
AS IS" AND ANY EXPRESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
EVENT SHALL THE COPYRIGHT OWNER
NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
HOWEVER CAUSED AND ON ANY THEORY OF ///
IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
This code was derived from [RFC2203].
reproduce this note if possible.
/  Note: the enumerated value for 0 is reserved.
RPCSEC GSS BIND CHANNEL    4 /
As is apparent from the above, the RPCSEC GSSv2 credential has the same format as the RPCSEC GSSv1 credential (albeit corrected so that the definition is in legal XDR description language that is also compatible with [9]; hence, the field "version", a keyword in RFC 1831, is replaced with "rgc version").
Setting the rgc version field to 2 indicates that the initiator and target support channel bindings.
New Procedure RPCSEC GSS BIND CHANNEL <CODE BEGINS
Once an RPCSEC GSSv2 handle has been established over a secure channel, the initiator MAY issue RPCSEC GSS BIND CHANNEL (Figure 1).
Targets MUST support RPCSEC GSS BIND CHANNEL.
Like RPCSEC GSS INIT and RPCSEC GSS CONTINUE
INIT requests, the NULL RPC procedure MUST be used.
Unlike those two requests, the arguments of the NULL procedure are not overloaded, because the verifier is of sufficient size for the purpose of RPCSEC GSS BIND CHANNEL.
The gss proc field is set to RPCSEC GSS BIND CHANNEL.
The seq num field is set as if gss proc were set to RPCSEC GSS DATA.
The service field is set to rpc gss svc none.
The handle field is set to that of an RPCSEC GSS handle as returned by RPCSEC GSS INIT or RPCSEC GSS CONTINUE INIT.
The RPCSEC GSS BIND CHANNEL request is similar to the RPCSEC GSS DATA request in that the verifiers of both contain MICs.
As described in Section 5.3.1 of [1], when gss proc is RPCSEC GSS DATA, the verifier of an RPC request is set to the output of GSS GetMIC() on the RPC header.
When gss proc is RPCSEC GSS BIND CHANNEL the verifier of an RPC request is set to the XDR encoding on a value of data type rgss2 bind chan verf args, which includes a MIC as described below.
The rgss2 bind chan verf args data type consists of three fields:  rbcva chan bind prefix.
This is the channel binding prefix as described in [2] up to, but excluding, the colon (ASCII 0x3A) that separates the prefix from the suffix.
rbcva chan bind hash oid.
This is the object identifier (OID) of the hash algorithm used to compute rbcmia bind chan hash.
This field contains an OID encoded in ASN.1 as used by GSS API in the mech type argument to GSS Init sec context ([3]).
See [6] for the OIDs of the SHA one way hash algorithms.
This is the output of GSS GetMIC() on the concatenation of the XDR
encoded RPC header ("up to and including the credential" as per [1]) and the XDR encoding of an instance of type data rgss2 bind chan MIC in args.
The data type rgss2 bind chan MIC in args consists of one field, rbcmia bind chan hash, which is a hash of the channel bindings as defined in [2].
The channel bindings are a "canonical octet string encoding of the channel bindings", starting "with the channel bindings prefix followed by a colon (ASCII 0x3A)".
The reason a hash of the channel bindings and not the actual channel bindings are used to compute rbcva chan mic
is that some channel bindings, such as those composed of public keys, can be relatively large, and thus place a higher space burden on the implementations to manage.
One way hashes consume less space.
RGSS2 BIND CHAN PREF NOTSUPP
(rgss2 bind chan status rbcr stat)
RGSS2 BIND CHAN PREF NOTSUPP:
RGSS2 BIND CHAN HASH NOTSUPP:
rgss2 bind chan res rbcmr res;
The RPCSEC GSS BIND CHANNEL reply is similar to the RPCSEC GSS DATA reply in that the verifiers of both contain MICs.
When gss proc is RPCSEC GSS DATA, the verifier of an RPC reply is set to the output of GSS GetMIC() on the seq num of the credential of the corresponding request (as described in Section 5.3.3.2 of [1]).
RPCSEC GSS BIND CHANNEL, the verifier of an RPC reply is set to the XDR encoding of an instance of data type rgss2 bind chan verf res, which includes a MIC as described below.
The data type rgss2 bind chan verf res consists of two fields.
The data type of this field is rgss2 bind chan res.
The rgss2 bind chan res data type is a switched union consisting of three cases switched on the status contained in the rbcr stat field.
If this status is returned, the target accepted the channel bindings, and successfully verified rbcva chan mic in the request.
No additional results will be in rbcvr res.
RGSS2 BIND CHAN PREF NOTSUPP.
If this status is returned, the target did not support the prefix in the rbcva chan bind prefix field of the arguments, and thus the RPCSEC GSS BIND CHANNEL request was rejected.
The target returned a list of prefixes it does support in the field rbcr pref list.
Note that a channel can have multiple channel bindings each with different prefixes.
The initiator is free to pick its preferred prefix.
If the target does not support the prefix, the status RGSS2 BIND CHAN PREF NOTSUPP will be returned, and the initiator can select its next most preferred prefix among the prefixes the target does support.
RGSS2 BIND CHAN HASH NOTSUPP.
If this status is returned, the target did not support the hash algorithm identified in the rbcva chan bind hash oid field of the arguments, and thus the RPCSEC GSS BIND CHANNEL request was rejected.
The target returned a list of OIDs of hash algorithms it does support in the field rbcr oid list.
The array rbcr oid list MUST have one or more elements.
The value of this field is equal to the output of GSS GetMIC() on the XDR encoding of an instance of data type rgss2 bind chan MIC in res.
The data type rgss2 bind chan MIC in res consists of three fields.
The value of this field is equal to the field seq num in the RPCSEC GSS credential (data type rpc gss cred vers 1 t).
This is the result of the one way hash of the channel bindings (including the prefix).
If rbcr stat is not RGSS2 BIND CHAN HASH NOTSUPP, then the hash algorithm that is used to compute rbcmr bind chan hash is that identified by the rbcva chan bind oid hash field in the arguments to RPCSEC GSS BIND CHANNEL.
If rbcr stat is RGSS2 BIND CHAN HASH NOTSUPP, then the hash algorithm used to compute rbcmr bind chan hash
is that identified by rbcr oid list[0] in the results.
The value of this field is equal to the value of the rbcvr res field.
New Security Service rpc gss svc channel prot
RPCSEC GSSv2 targets MUST support rpc gss svc channel prot.
The rpc gss svc channel prot service (Figure 1) is valid only if RPCSEC GSSv2 is being used, an RPCSEC GSS BIND CHANNEL procedure has been executed successfully, and the secure channel still exists.
When rpc gss svc channel prot is used, the RPC requests and replies are similar to those of rpc gss svc none except that the verifiers on the request and reply always have the flavor set to AUTH NONE, and the contents are zero length.
Note that even though NULL verifiers are used when rpc gss svc channel prot is used, non NULL RPCSEC GSS credentials are used.
In order to identify the principal sending the request, the same credential is used as before, except that service field is set to rpc gss svc channel prot.
An initiator that supports version 2 of RPCSEC GSS simply issues an RPCSEC GSS request with the rgc version field set to RPCSEC GSS VERS 2.
If the target does not recognize RPCSEC GSS VERS 2, the target will return an RPC error per Section 5.1 of [1].
The initiator MUST NOT attempt to use an RPCSEC GSS handle returned by version 2 of a target with version 1 of the same target.
The initiator MUST NOT attempt to use an RPCSEC GSS handle returned by version 1 of a target with version 2 of the same target.
To ensure interoperability, implementations of RPCSEC GSSv2 SHOULD NOT transfer tokens between the initiator and target that use native GSS channel bindings (as defined in Section 1.1.6 of [3]).
Operational Recommendation for Deployment RPCSEC GSSv2 is a superset of RPCSEC GSSv1, and so can be used in all situations where RPCSEC GSSv1 is used.
RPCSEC GSSv2 should be used when the new functionality, channel bindings, is desired or needed.
Once a successful RPCSEC GSS BIND CHANNEL procedure has been performed on an RPCSEC GSSv2 context handle, the initiator's implementation may map application requests for rpc gss svc none and rpc gss svc integrity to rpc gss svc channel prot credentials.
And if the secure channel has privacy enabled, requests for rpc gss svc privacy can also be mapped to rpc gss svc channel prot.
The base security considerations consist of:  All security considerations from [1].
All security considerations from [2].
All security considerations from the actual secure channel being used.
Even though RPCSEC GSS DATA requests that use rpc gss svc channel prot protection do not involve construction of more GSS tokens, the target SHOULD stop allowing RPCSEC GSS DATA requests with rpc gss svc channel prot protection once the GSS context expires.
With the use of channel bindings, it becomes extremely critical that the message integrity code (MIC) used by the GSS mechanism that RPCSEC GSS is using be difficult to forge.
While this requirement is true for RPCSEC GSSv1, and indeed any protocol that uses GSS MICs, the distinction in the seriousness is that for RPCSEC GSSv1, forging a single MIC at most allows the attacker to succeed in injecting one bogus request.
Whereas, with RPCSEC GSSv2 combined with channel bindings, by forging a single MIC the attacker will succeed in injecting bogus requests as long as the channel exists.
Suppose we have an RPCSEC GSSv1 initiator, a man in  the middle (MITM), an RPCSEC GSSv1 target, and an RPCSEC GSSv2 target.
The attack is as follows.
The MITM intercepts the initiator's RPCSEC GSSv1 RPCSEC GSS INIT message and changes the version number from 1 to 2 before forwarding to the RPCSEC GSSv2 target, and changes the reply's version number from 2 to 1 before forwarding to the RPCSEC GSSv1 initiator.
Neither the client nor the server notice.
Once the RPCSEC GSS handle is in an established state, the initiator sends its first RPCSEC GSS DATA request.
The MITM constructs an RPCSEC GSS BIND CHANNEL request, using the message integrity code (MIC) of the RPCSEC GSS DATA request.
It is likely the RPCSEC GSSv2 target will reject the request.
The MITM continues to reiterate each time the initiator sends another RPCSEC GSS DATA request.
With enough iterations, the probability of a MIC from an RPCSEC GSS DATA being successfully verified in the forged RPCSEC GSS BIND CHANNEL increases.
Once the MITM succeeds, it can send RPCSEC GSS DATA requests with a security service of rpc gss svc channel prot, which does not have MICs in the RPC request's verifier.
The implementation of RPCSEC GSSv2 can use at least two methods to thwart these attacks.
The target SHOULD require a stronger MIC when sending an RPCSEC GSS BIND CHANNEL request instead of an RPCSEC GSS DATA request
e.g., if HMACs are used for the MICs, require the widest possible HMAC (in terms of bit length) that the GSS mechanism supports.
If HMACs are being used, and the target expects N RPCSEC GSS DATA requests to be sent on the context before it expires, then the target SHOULD require an HMAC for RPCSEC GSS BIND CHANNEL that is log base 2 N bits longer than what it normally requires for RPCSEC GSS DATA requests.
If a long enough MIC is not available, then the target could artificially limit the number of RPCSEC GSS DATA requests it will allow on the context before deleting the context.
Each time an RPCSEC GSSv2 target experiences a failure to verify the MIC of an RPCSEC GSS BIND CHANNEL request, it SHOULD reduce the lifetime of the underlying GSS context, by a significant fraction, thereby preventing the MITM from using the established context for its attack.
A possible heuristic is that if the target believes the possibility that failure to verify the MIC was because of an attack is X percent, then the context's lifetime would be reduced by X percent.
For simplicity, an implementer might set X to be 50 percent, so that the context lifetime is halved on each failed verification of an RPCSEC GSS BIND CHANNEL request and thus rapidly reduced to zero on subsequent requests.
For example, with a context lifetime of 8 hours (or 28800 seconds), 15 failed attempts by the MITM would cause the context to be destroyed.
A method of mitigation that was considered was to protect the RPCSEC GSS version number with RPCSEC GSSv2's RPCSEC GSS INIT and RPCSEC GSS CONTINUE INIT tokens.
Thus, the version number of RPCSEC GSS would be in the tokens.
This method does not completely mitigate the attack; it just moves the MIC guessing to the RPCSEC GSS INIT message.
In addition, without changing GSS, or the GSS mechanism, there is no way to include the RPCSEC GSS version number in the tokens.
So for these reasons this method was not selected.
