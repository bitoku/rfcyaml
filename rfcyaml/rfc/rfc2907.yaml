- contents:
  - '              MADCAP Multicast Scope Nesting State Option

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document defines a new option to the Multicast Address Dynamic\n
    \  Client Allocation Protocol (MADCAP) to support nested scoping. The\n   new
    option's purpose is to allow clients to learn which scopes nest\n   inside each
    other, and hence it may be used for expanding scope\n   searches or hierarchical
    multicast transport.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction. . . . . . . . . . . . . . . . . . . .
    .    2\n        1.1 Time-To-Live (TTL) Scoping Split Horizon Effect.    2\n        1.2
    Eliminating the Split Horizon Effect with\n            Administrative Scoping
    . . . . . . . . . . . . .    3\n        1.3 Terminology. . . . . . . . . . . .
    . . . . . . .    4\n   2.  Multicast Nested Scoping State. . . . . . . . . . .
    .    5\n   3.  Multicast Scope Nesting State Option. . . . . . . . .    5\n        3.1
    Multicast Scope List Option  . . . . . . . . . .    5\n        3.2 Representing
    the Multicast Scope Nesting State .    6\n        3.3 Multicast Scope Nesting
    State Option Usage . . .    7\n   4.  Managing Dynamic Nested Scopes. . . . .
    . . . . . . .    8\n        4.1 MADCAP Server processing of MZAP messages. . .
    .    9\n        4.2 Updating State for Dynamic Nested Scopes due to\n                Timer
    Expiration . . . . . . . . . . . . . .    9\n   5.  Multicast Scope Nesting State
    Option Format . . . . .    9\n   6.  Constants . . . . . . . . . . . . . . . .
    . . . . . .   10\n   7.  Security Considerations . . . . . . . . . . . . . . .
    \  11\n   8.  IANA Considerations . . . . . . . . . . . . . . . . .   11\n   9.
    \ Acknowledgements. . . . . . . . . . . . . . . . . . .   11\n   10. References.
    . . . . . . . . . . . . . . . . . . . . .   11\n   11. Author's Address. . . .
    . . . . . . . . . . . . . . .   12\n   12. Full Copyright Statement. . . . . .
    . . . . . . . . .   13\n"
  title: Table of Contents
- contents:
  - "1. Introduction\n   The Multicast Address Dynamic Client Allocation Protocol
    (MADCAP)\n   [RFC2730] affords client applications the ability to request\n   multicast
    address allocation services from multicast address\n   allocation servers.  As
    part of the Multicast Address Allocation\n   Architecture [RFC2908], MADCAP gives
    clients the ability to reserve,\n   request, and extend leases on multicast addresses.\n
    \  A new MADCAP option, the \"Multicast Scope Nesting State\" option is\n   proposed
    to allow clients to learn not only which scopes exist via\n   the existing \"Multicast
    Scope List\" option, but how these scopes nest\n   inside each other. This new
    option will also afford clients the\n   ability to make better scope selections
    for a given session and also\n   to construct hierarchies of administratively
    scoped zones. These\n   hierarchies may then be used to perform expanding scope
    searches\n   instead of the expanding ring or increasing-TTL searches. Expanding\n
    \  scope searches do not suffer from the Split-Horizon Effect present in\n   expanding
    ring searches, and therefore both simplify protocol design\n   and provide better
    localization.\n"
  - contents:
    - "1.1 Time-To-Live (TTL) Scoping Split Horizon Effect\n   Multicast searching
      and localized recovery transport techniques that\n   rely on TTL scoping are
      known to suffer when deployed in a wide scale\n   manner. The failing lies in
      the split horizon effect shown below in\n   Figure 1. Here a requestor and responder
      must each use a TTL that is\n   sufficiently large that they will reach the
      other. When they are\n   separated by many hops the TTL becomes large and the
      number of\n   receivers within the multicast tree that only receive either the\n
      \  request or the response can become very large.\n                      .......
      \  *******\n                   ...       ***       ***        A Only hears S\n
      \                ..        **   ..        **      B hears S and R\n                .
      \        *       .         *     C Only hears R\n               .         *
      \        .         *\n               .         S<------->R         *    . TTL
      Boundary for S\n               .         *         .         *    * TTL Boundary
      for R\n                .    A    *   B   .   C     *\n                 ..        **
      \  ..        **\n                   ...       ***       ***\n                      .......
      \  *******\n            Figure 1 : Split Horizon Problem from TTL scoping\n"
    title: 1.1 Time-To-Live (TTL) Scoping Split Horizon Effect
  - contents:
    - "1.2 Eliminating the Split Horizon Effect with Administrative Scoping\n   Ideally,
      a mechanism that either eliminates or minimizes the size of\n   the A and C
      regions in Figure 1. as shown in Figure 2. is needed to\n   solve this problem.
      One mechanism that affords this ability is\n   administrative scoping [RFC2365],
      in which routers prevent the\n   passing of packets within a certain range of
      multicast addresses.\n   Routers that have this feature can be configured to
      provide a\n   perimeter around a region of the network. This perimeter is said
      to\n   encompass an administratively scoped zone inside of which traffic\n   sent
      to that particular range of multicast addresses can neither\n   leave nor enter.
      Routers can construct and manage administratively\n   scoped zones using the
      MZAP [RFC2776] protocol.\n                    ........................\n                  .
      \                         .\n                 .        many hops           .\n
      \                .S<------------------------>R.\n                 .                            .\n
      \                 .                          .\n                    ........................\n
      \         Figure 2 : Eliminating the Split Horizon Effect\n   MZAP also includes
      the ability to determine whether or not\n   administratively scoped regions
      nest inside one another. This allows\n   hierarchies such as that shown in Figure
      1. to be constructed.\n        . . . . .  . . . . . . . . . . . . .\n       .
      \           scope a                 .     Scope Boundaries\n      .                                      .
      \    . = scope  a\n     .  _______________      ________________ .    - = scopes
      b,c\n     . /    scope b    \\    /  scope c       \\ .   # = scopes d,e,f,
      & g\n     .|                 |  |                  |.\n     .|  #####    #####
      |  |  #####    #####  |.\n     .| #scope#  #scope#|  | #scope#  #scope# |.\n
      \     .\\ # d  #  # e   #|  | # f   #  #  g # /.\n       .\\ ####    #####/
      \   \\ #####    #### /.\n        .\\____________/      \\_____________/.\n         .
      . . . . . . . . . . . . . . . .\n          Figure 3 : Admin Scope Zone Nesting
      Hierarchy example\n   A generic expanding scope search algorithm [KERM] that
      exploits the\n   existence of a hierarchy of administratively scoped zones is:\n
      \  1) Starting with the smallest known scope for the session, a\n      requestor
      in that session issues a request and waits for a reply.\n   2) If a node within
      that scope hears a request at a certain scope\n      that it can satisfy it
      sends a response at that same scope,\n      possibly after some random delay
      to reduce duplicate responses.\n   3) Nodes that receive a response to a particular
      request while\n      waiting to send a response to that request, suppress their
      own\n      response.\n   4) If a requestor issues a request to a scope, and
      does not hear a\n      response after a specified amount of time, it retransmits
      its\n      request at the same scope a small number of additional times.\n      Should
      these retries fail to elicit a response, the requestor\n      increases the
      scope to the next largest scope and tries again.\n   5) Requestors increase
      the scope of the request according to step 4\n      until either a response
      is received, or the largest legal scope\n      for the session is reached. Should
      attempts to elicit a response\n      at the largest possible scope for the session
      fail to yield a\n      response, the requestor may conclude that the request
      cannot be\n      met.\n"
    title: 1.2 Eliminating the Split Horizon Effect with Administrative Scoping
  - contents:
    - "1.3. Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
      \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\"OPTIONAL\"
      in this\n   document are to be interpreted as described in RFC 2119 [RFC2119].\n
      \  Throughout the rest of this document, the words \"server\" or \"MADCAP\n
      \  server\" refer to a host providing multicast address allocation\n   services
      via MADCAP. The words \"client\" or \"MADCAP client\" refer to a\n   host requesting
      multicast address allocation services via MADCAP.\n"
    title: 1.3. Terminology
  title: 1. Introduction
- contents:
  - "2. Multicast Nested Scoping State\n   Two scopes, X and Y, can be related in
    one of four possible ways.\n    1) X nests inside Y,\n    2) Y nests inside X,\n
    \   3) X and Y do not nest (the overlap case), and\n    4) X and Y nest inside
    each other.\n   The fourth case SHOULD be interpreted as meaning that X and Y
    have\n   exactly the same border. This does not mean that X and Y are the same\n
    \  scope since X and Y may correspond to different ranges of the\n   multicast
    address space.\n   This state MUST be stored in the MADCAP servers which MUST
    allow the\n   state to be updated as network conditions change. Each MADCAP server\n
    \  SHOULD therefore define two pieces of state that describe whether\n   \"scope
    X nests in scope Y\" and vice versa. For the remainder of this\n   document the
    nesting relationship shall be denoted as the \"/\" where\n   X/Y defines the relation
    \"X nests inside Y\". This relation shall be\n   understood to take one of the
    values \"true\", or \"false\".  Nesting\n   relationship state that is indeterminate
    is considered to be \"false\".\n"
  title: 2. Multicast Nested Scoping State
- contents:
  - "3 Multicast Scope Nesting State Option\n   The \"Multicast Scope Nesting State\"
    option is proposed to augment the\n   \"Multicast Scope List\" option within the
    MADCAP protocol by providing\n   additional information to applications about
    how scopes nest. The\n   proposed option is OPTIONAL, that is MADCAP servers MAY
    implement\n   this new option, however they are not required to.\n   MADCAP servers
    shall learn this additional nesting information by\n   means of static configuration
    or via some other protocol such as MZAP\n   [RFC2776] that manages administrative
    scopes in a dynamic fashion.\n"
  - contents:
    - "3.1 Multicast Scope List Option\n   To understand the \"Multicast Scope Nesting
      State\" option one must\n   first understand the \"Multicast Scope List\" option.\n
      \  The Multicast Scope List option in MADCAP is used by MADCAP servers\n   to
      inform MADCAP clients of which zones are visible. Visible scopes\n   are enumerated
      inside the option as successive tuples, where each\n   tuple consists of the
      following information:\n      o Scope ID:\n          The smallest address for
      the range of multicast addresses\n          covered by this scope.\n      o
      Last Address:\n          The largest address for the range of multicast addresses\n
      \         covered by this scope.\n      o TTL:\n          The TTL to be used
      when sending messages to this scope.\n      o Name(s):\n          One or more
      language specific names for the scope.\n"
    title: 3.1 Multicast Scope List Option
  - contents:
    - "3.2 Representing the Multicast Scope Nesting State\n   Given a Multicast Scope
      List containing descriptions for n scopes one\n   can form n(n-1)/2 pairings.
      As was shown in section 2 each pairing\n   can take on one of four possible
      states. Thus, for a list of n scopes\n   there exists 2 pieces of information
      for each pairing for a total of\n   n(n-1) pieces of information regarding which
      scopes do and do not\n   nest inside each other.\n   There are several ways
      to represent this state using full matrices,\n   sparse-matrices, and using
      lists of variable length lists. In the\n   interests of maximal efficiency and
      flexibility, the Multicast\n   Nesting State Option uses a bit-packed matrix
      approach.  In this\n   approach a matrix is constructed using pieces of X/Y
      state where X is\n   the row and Y is the column.  A \"1\" in the matrix means
      that the\n   relationship \"row nests inside column\" is true, while a \"0\"
      means\n   that this relationship is either false or indeterminate.  The\n   diagonal
      of the matrix is removed, since this is the case where X is\n   the same as
      Y, and each row is then zero-padded to the next byte\n   boundary to give the
      final representation.\n   An example of how a matrix would be constructed for
      the following\n   scope nestings  S1/S2, S2/S3, S2/S4, S3/S5, S4/S5, S5/S6,
      and S6/S7.\n   Note that a number of additional nesting relationships are implied\n
      \  from this set.\n                         ________________________________\n
      \                       /............          \\    \\    \\\n                       /.S3
      _________._____     \\    \\    \\\n                      |.   /+--+    \\ .
      \   \\    |    |    |\n                      |.  | |S1| S2 | . S4 | S5 | S6
      | S7 |\n                      |.   \\+--+    / .    |    |    |    |\n                       \\.
      \  \\______/ .     |    |    |    |\n                        \\....\\.......
      \     /    /    /    /\n                         \\    \\___________/    /    /
      \   /\n                          \\___________________/    /    /\n       \\
      Y                 \\______________________/    /\n      X \\ 1 2 3 4 5 6 7     \\_________________________/\n
      \        +-+-+-+-+-+-+-+\n      1  |1 1 1 1 1 1 1|      *111111       1111 1100
      \      0xfc\n      2  |0 1 1 1 1 1 1|      0*11111       0111 1100       0x7c\n
      \     3  |0 0 1 0 1 1 1|      00*0111       0001 1100       0x1c\n      4  |0
      0 0 1 1 1 1|  =>  000*111   =>  0001 1100   =>  0x1c\n      5  |0 0 0 0 1 1
      1|      0000*11       0000 1100       0x0c\n      6  |0 0 0 0 0 1 1|      00000*1
      \      0000 0100       0x04\n      7  |0 0 0 0 0 0 1|      000000*       0000
      0000       0x00\n         +-+-+-+-+-+-+-+                           ^^\n                          *
      = X/Y where   zero padding\n                             X == Y\n         Final
      Representation: 0xfc 0x7c 0x1c 0x1c 0x0c 0x04 0x00\n         Figure 4. Scope
      Nesting Example\n"
    title: 3.2 Representing the Multicast Scope Nesting State
  - contents:
    - "3.3 Multicast Scope Nesting State Option Usage\n   The \"Multicast Scope Nesting
      State\" option is dependent upon the\n   \"Multicast Scope List\" option. This
      decision was made according to\n   the following reasoning.  The Multicast Nest
      State Option requires\n   that the scopes be identified along with their nesting
      properties.\n   Since the information needed to describe a scope is contained
      in the\n   Multicast Scope List option and this information can change, the\n
      \  MADCAP messages that contain the Multicast Scope Nesting State option\n   must
      be atomic and therefore must include the \"Multicast Scope List\n   Option\".\n
      \  Thus, the \"Multicast Scope Nesting State\" option MUST only be used in\n
      \  messages that carry the \"Multicast Scope List\" option, specifically:\n
      \       ACK (in response to GETINFO)\n   Since the Multicast Nest State option
      is dependent upon the Multicast\n   Scope List option, it MUST NOT be included
      without the Multicast\n   Scope List option.\n   Clients that need to explicitly
      learn the nesting relationships\n   between scopes should therefore send a GETINFO
      message to the server\n   with the \"Multicast Scope List\" AND \"Multicast
      Scope Nesting State\"\n   option codes listed in an Option Request option.\n"
    title: 3.3 Multicast Scope Nesting State Option Usage
  title: 3 Multicast Scope Nesting State Option
- contents:
  - "4. Managing Dynamically Nested Scopes\n   Scopes can either be manually or automatically
    configured.  When\n   scopes are manually configured the relationships between
    them will\n   also be static, assuming that network does not partition due to\n
    \  router failure.  Should the network partition or heal after a\n   partition
    it is highly likely that the nesting relationships will\n   change.  Scope nesting
    relationships will also change as a network is\n   brought up or when a change
    is deliberately made to a router either\n   through manual reconfiguration or
    by some automatic means.\n   To ensure that nesting relationships are correctly
    determined when\n   scope boundaries undergo change MADCAP servers MUST include
    a\n   mechanism that allow for:\n    a) whether the nesting decision is still
    under consideration or\n       can be considered definitive, and therefore be
    announced to\n       MADCAP clients.\n    b) whether one or both scopes for a
    particular nesting state entry\n       have been destroyed, and hence whether
    the nesting state should\n       therefore be discarded.\n    c) whether the scope
    boundaries have changed so that whereas scope\n       X did or did not nest inside
    scope Y, the opposite is now true.\n   To realize a) and b) MADCAP servers MUST
    implement the following two\n   timers; NEST_NO_DECISION_TIMER, ZONES_EXIST_TIMER.\n
    \  The first timer, NEST_NO_DECISION_TIMER, is used to mark time between\n   a
    MADCAP server's first hearing of a scope and making a decision\n   about its relationship
    to other zones.  Up until the time this timer\n   expires MADCAP servers MUST
    NOT conclude that the scope nests within\n   another.\n   The NEST_NO_DECISION_TIMER
    timer will also be used to timeout X/Y =\n   \"false\" state to allow X/Y to be
    reset to true in the event that the\n   boundaries for zone X and zone Y change
    so that zone X now nests\n   inside zone Y.\n   The second timer ZONES_EXIST_TIMER
    will be used to timeout the\n   internal state between two scopes in the event
    that one or both\n   scopes are destroyed.\n"
  - contents:
    - "4.1 MADCAP Server processing of MZAP messages\n   When MZAP is used to discover
      the nesting relationship between scopes\n   MADCAP servers will eavesdrop into
      the MZAP messages that are\n   periodically transmitted by the Zone Border Routers
      (ZBR) during the\n   normal course of administrative scope boundary maintenance.
      \ In this\n   way they will be able to learn which scopes exist (via Zone\n
      \  Announcement Messages, ZAMs) and which of these scopes do not nest\n   (via
      Not Inside Messages, NIMs). This state must be cached within the\n   MADCAP
      server.\n   When a MADCAP server S receives a NIM from a ZBR containing\n   information
      that scope X does not nest in scope Y, it MUST update its\n   internal state
      in the following manner.\n      1) S MUST update its internal X/Y state to \"false\".\n
      \     2) S MUST restart NEST_NO_DECISION_TIMER for the newly updated\n         X/Y
      state.\n"
    title: 4.1 MADCAP Server processing of MZAP messages
  - contents:
    - "4.2 Updating State for Dynamic Scopes due to timer expiration.\n   MADCAP servers
      will update X/Y nesting state upon the expiration of\n   timers in the following
      manner.\n    o If the NEST_NO_DECISION_TIMER expires for a state entry X/Y AND
      no\n      MADCAP messages have been received that indicate scope X does not\n
      \     nest inside scope Y, a MADCAP Server, S, MUST conclude that scope\n      X
      nests inside scope Y. As a result S will change X/Y from\n      \"false\" to
      \"true\".\n      When a state change from \"false\" to \"true\" occurs for X/Y,
      S must\n      also start the ZONES_EXIST_TIMER timer for X/Y. The\n      ZONES_EXIST_TIMER
      should only reset when a Zone Announcement\n      Message (ZAM) has been received
      for both zone X and zone Y since\n      the last time it was restarted. This
      ensures that both zone X and\n      zone Y are known to still exist.\n    o
      If the ZONES_EXIST_TIMER expires for a state entry X/Y, S\n      SHOULD conclude
      that either zone Y or zone X no longer exists and\n      hence that both X/Y
      and Y/X state should be destroyed.\n"
    title: 4.2 Updating State for Dynamic Scopes due to timer expiration.
  title: 4. Managing Dynamically Nested Scopes
- contents:
  - "5. Multicast Scope Nesting State Option Format\n           Code        Len     Count
    \ Nest State Matrix\n      +-----+-----+-----+-----+-----+-----+-...-+-----+\n
    \     |    17     |     p     | m   | N1  |     | Nm  |\n      +-----+-----+-----+-----+-----+-----+-...-+-----+\n
    \  Code: 16 bits\n      Option identifier 17.\n   Len: 16 bits\n      The length
    of the option in bytes.\n   Count: 8 bits\n      The number of zones present in
    the Nest State Matrix. This value\n      MUST be identical to the Count field
    in the preceding Multicast\n      State List option. If this is not the case the
    scope nesting\n      state information MUST BE ignored.\n   Nest State Matrix:\n
    \     The compressed bit-packed representation of the matrix, derived\n      in
    the same manner as shown in Figure 4.  Note for N scopes\n      the compressed
    matrix will be N times ceil((N-1)/8) bytes long,\n      where ceil() is the function
    that rounds up to the nearest integer.\n      The scopes corresponding to the
    rows and columns of this matrix\n      list in the same order as they appear in
    the Multicast Scope\n      List Option.\n"
  title: 5. Multicast Scope Nesting State Option Format
- contents:
  - "6. Constants\n   [NEST_NO_DECISION_TIMER] The time after which a MADCAP server
    or\n        client can assume that a message announcing that two zones\n        do
    not nest should not be received. The length of this timer\n        is dependent
    upon the zone announcement protocol used to\n        inform the MADCAP router
    of which zones currently exist.\n        When MZAP [RFC2776] is used this value
    should be greater than\n        the MZAP timeout value NIM-INTERVAL +30%. This
    corresponds\n        to a timeout value of 1800 + 30% = 2340 seconds (39 minutes).\n
    \  [ZONES_EXIST_TIMER] The time after which a MADCAP server or client\n        should
    assume that the zone in question does not exist when\n        zones are detected
    dynamically. The length of this timer is\n        dependent upon the zone announcement
    protocol used to inform\n        the MADCAP router of which zones currently exist.
    When MZAP\n        [RFC2776] is used this value should be no less than the MZAP\n
    \       timeout value NIM-HOLDTIME, which has a default of\n        5460 seconds
    (91 minutes).\n"
  title: 6. Constants
- contents:
  - "7. Security Considerations\n   Since this document proposes an extension to the
    MADCAP protocol via\n   the addition of a new option, the same set of security
    concerns\n   apply.\n   In addition to these concerns are those that would arise
    were the\n   information in the Multicast Scope Nesting State option to be\n   falsified.
    In this case the clients would be misinformed as to which\n   scopes nest inside
    one another. In this event, the client would then\n   make incorrect decisions
    regarding the order in which to use the\n   scopes. The effect of this would be
    to use larger scopes than\n   necessary, which would effectively flatten any scope
    hierarchy\n   present and  nullify the advantage afforded by the hierarchy's\n
    \  presence.\n   Thus a malformed or tampered Multicast Scope Nesting option may
    cause\n   protocols that rely upon the existence of a scoping hierarchy to\n   scale
    less well, but it would not prevent them from working.\n"
  title: 7. Security Considerations
- contents:
  - "8. IANA Considerations\n   The Multicast Nesting State Option has been assigned
    MADCAP option\n   code 17 by the IANA [RFC2730].\n"
  title: 8. IANA Considerations
- contents:
  - "9. Acknowledgments\n   The Author would like to acknowledge Mark Handley and
    Dave Thaler for\n   the helpful discussions and feedback which helped shape and
    refine\n   this document.\n"
  title: 9. Acknowledgments
- contents:
  - "10. References\n   [KERM]    Kermode, R., \"Smart Network Caches: Localized Content
    and\n             Application Negotiated Recovery Mechanisms for Multicast\n             Media
    Distribution\", Ph.D. Thesis, MIT Media Laboratory,\n             June 1998.\n
    \  [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate\n             Requirement
    Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2365] Meyer, D., \"Administratively
    Scoped IP Multicast\", BCP 23,\n             RFC 2365, July 1998.\n   [RFC2730]
    Patel, B.V., Shah, M. and S.R. Hanna, \"Multicast Address\n             Dynamic
    Client Allocation Protocol (MADCAP)\", RFC 2730,\n             December 1999.\n
    \  [RFC2776] Handley, M., Thaler, D. and R. Kermode, \"Multicast-Scope\n             Zone
    Announcement Protocol (MZAP)\", RFC 2776, February\n             2000.\n   [RFC2908]
    Handley, M., Thaler, D. and D. Estrin, \"The Internet\n             Multicast
    Address Allocation Architecture\", RFC 2908,\n             September 2000.\n"
  title: 10. References
- contents:
  - "11. Author's Address\n   Roger Kermode\n   Motorola Australian Research Centre\n
    \  Locked Bag 5028\n   Botany, NSW 1455\n   Australia\n   EMail: Roger.Kermode@motorola.com\n"
  title: 11. Author's Address
- contents:
  - "12.  Full Copyright Statement\n   Copyright (C) The Internet Society (2000).
    \ All Rights Reserved.\n   This document and translations of it may be copied
    and furnished to\n   others, and derivative works that comment on or otherwise
    explain it\n   or assist in its implementation may be prepared, copied, published\n
    \  and distributed, in whole or in part, without restriction of any\n   kind,
    provided that the above copyright notice and this paragraph are\n   included on
    all such copies and derivative works.  However, this\n   document itself may not
    be modified in any way, such as by removing\n   the copyright notice or references
    to the Internet Society or other\n   Internet organizations, except as needed
    for the purpose of\n   developing Internet standards in which case the procedures
    for\n   copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: 12.  Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
