- contents:
  - '                 Fibre Channel (FC) Frame Encapsulation

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document describes the common Fibre Channel (FC) frame\n   encapsulation
    format and a procedure for the measurement and\n   calculation of frame transit
    time through the IP network.  This\n   specification is intended for use by any
    IETF protocol that\n   encapsulates FC frames.\n"
  title: Abstract
- contents:
  - "Table Of Contents\n   1.  Scope. . . . . . . . . . . . . . . . . . . . . . .
    . . . . . .  2\n   2.  Encapsulation Concepts . . . . . . . . . . . . . . . .
    . . . .  3\n   3.  The FC Encapsulation Header. . . . . . . . . . . . . . . .
    . .  4\n       3.1.  FC Encapsulation Header Format . . . . . . . . . . . . .
    \ 4\n       3.2.  FC Encapsulation Header Validation . . . . . . . . . . .  7\n
    \            3.2.1.  Redundancy Based FC Encapsulation\n                     Header
    Validation. . . . . . . . . . . . . . . .  7\n             3.2.2.  CRC Based FC
    Encapsulation Header Validation . .  7\n   4.  Measuring Fibre Channel Frame Transit
    Time . . . . . . . . . .  8\n   5.  The FC Frame . . . . . . . . . . . . . . .
    . . . . . . . . . . 10\n       5.1.  FC Frame Content . . . . . . . . . . . .
    . . . . . . . . 10\n       5.2.  Bit and Byte Ordering. . . . . . . . . . . .
    . . . . . . 10\n       5.3.  FC SOF and EOF . . . . . . . . . . . . . . . . .
    . . . . 11\n   6.  Security Considerations. . . . . . . . . . . . . . . . . .
    . . 12\n   7.  References . . . . . . . . . . . . . . . . . . . . . . . . . .
    12\n       7.1.  Normative References . . . . . . . . . . . . . . . . . . 12\n
    \      7.2.  Informative References . . . . . . . . . . . . . . . . . 13\n   8.
    \ Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . 14\n   Appendix\n
    \  A  Fibre Channel Bit and Byte Numbering Guidance . . . . . . . . . 15\n   B
    \ Encapsulating Protocol Requirements . . . . . . . . . . . . . . 15\n   C  IANA
    Considerations . . . . . . . . . . . . . . . . . . . . . . 16\n   D  Intellectual
    Property Rights Statement. . . . . . . . . . . . . 17\n   Authors' Addresses .
    . . . . . . . . . . . . . . . . . . . . . . . 18\n   Full Copyright Statement
    . . . . . . . . . . . . . . . . . . . . . 20\n"
  title: Table Of Contents
- contents:
  - "1.  Scope\n   This document describes common mechanisms for the transport of
    Fibre\n   Channel frames over an IP network, including the encapsulation format\n
    \  and a mechanism for enforcing the Fibre Channel frame lifetime\n   limits.\n
    \  Warning to Readers Familiar With Fibre Channel: Both Fibre Channel\n   and
    IETF standards use the same byte transmission order. However, the\n   bit and
    byte numbering is different.  See Appendix A for guidance.\n   The organization
    responsible for the Fibre Channel standards (INCITS\n   Technical Committee T11)
    has determined that some functions and modes\n   of operation are not interoperable
    to the degree required by the IETF\n   (see FC-MI [8]).  This document includes
    applicable T11\n   interoperability determinations in the form of restrictions
    on the\n   use of this encapsulation mechanism.\n   Use of these mechanisms in
    an encapsulating protocol requires an\n   additional document to specify the encapsulating
    protocol specific\n   functionality and appropriate security considerations.  Because\n
    \  security considerations for this encapsulation depend on how it is\n   used
    by encapsulating protocols, they are taken up in encapsulating\n   protocol specific
    documents.\n   Conventions used in this document\n      The key words \"MUST\",
    \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL\n      NOT\", \"SHOULD\", \"SHOULD
    NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"\n      in this document are
    to be interpreted as described in BCP 14, RFC\n      2119 [2].\n"
  title: 1.  Scope
- contents:
  - "2.  Encapsulation Concepts\n   The smallest unit of data transmission and routing
    in Fibre Channel\n   (FC) is the frame.  FC frames include a Start Of Frame (SOF),
    End Of\n   Frame (EOF), and the contents of the Fibre Channel frame.  The Fibre\n
    \  Channel frame includes a Cyclic Redundancy Check (CRC) code that\n   provides
    error detection for the contents of the frame.  FC frames\n   are variable length.
    \ To facilitate transporting FC frames over an IP\n   based transport such as
    TCP the native FC frame needs to be contained\n   in (encapsulated in) a slightly
    larger structure as shown in Figure\n   1.\n      +--------------------+\n      |
    \      Header       |\n      +--------------------+-----+\n      |        SOF
    \        |   f |\n      +--------------------+ F r |\n      |  FC frame content
    \ | C a |\n      +--------------------+   m |\n      |        EOF         |   e
    |\n      +--------------------+-----+\n      Figure 1 -  FC frame Encapsulation\n
    \  The format and content of an FC frame are described in the FC\n   standards
    (e.g., FC-FS [3], FC-SW-2 [4], and FC-PI [5]).  Of\n   importance to this encapsulation
    is the FC requirement that all\n   frames SHALL contain a CRC for detection of
    transmission errors.\n"
  title: 2.  Encapsulation Concepts
- contents:
  - '3.  The FC Encapsulation Header

    '
  - contents:
    - "3.1.  FC Encapsulation Header Format\n   Figure 2 shows the format of the required
      FC Encapsulation Header.\n   W|------------------------------Bit------------------------------|\n
      \  o|                                                               |\n   r|
      \                   1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3|\n   d|0 1 2
      3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|\n    +---------------+---------------+---------------+---------------+\n
      \  0|   Protocol#   |    Version    |  -Protocol#   |   -Version    |\n    +---------------+---------------+---------------+---------------+\n
      \  1|                                                               |\n    +-----
      \          Encapsulating Protocol Specific            ----+\n   2|                                                               |\n
      \   +-----------+-------------------+-----------+-------------------+\n   3|
      \  Flags   |   Frame Length    |   -Flags  |   -Frame Length   |\n    +-----------+-------------------+-----------+-------------------+\n
      \  4|                      Time Stamp [Seconds]                     |\n    +---------------------------------------------------------------+\n
      \  5|                  Time Stamp [Seconds Fraction]                |\n    +---------------------------------------------------------------+\n
      \  6|                              CRC                              |\n    +---------------------------------------------------------------+\n
      \   Figure 2 -  FC Encapsulation Header Format\n   The fields in the FC Encapsulation
      Header are defined as follows.\n   Protocol#: The Protocol# field SHALL contain
      a number that indicates\n      which encapsulating protocol is employing the
      FC Encapsulation.\n      The values in the Protocol# field are assigned by IANA
      (see\n      Appendix C).\n   Version: The Version field SHALL contain 0x01 to
      indicate that this\n      version of the FC Encapsulation is being used.  All
      other values\n      are reserved for future versions of the FC Encapsulation.\n
      \  -Protocol#: The -Protocol# field SHALL contain the one's complement\n      of
      the contents of the Protocol# field.  FC Encapsulation\n      receivers SHOULD
      either validate the CRC or compare the Protocol#\n      and - Protocol# fields
      to verify that an FC Encapsulation Header\n      is being processed according
      to a policy defined by the\n      encapsulating protocol.\n   -Version: The
      -Version field SHALL contain the one's complement of\n      the contents of
      the Version field.  FC Encapsulation receivers\n      SHOULD either validate
      the CRC or compare the Version and -Version\n      fields to verify that an
      FC Encapsulation Header is being\n      processed according to a policy defined
      by the encapsulating\n      protocol.\n   Encapsulating Protocol Specific: The
      usage of these words differs\n      based on the contents of the Protocol# field,
      i.e., the usage of\n      these words is defined by the encapsulating protocol
      that is\n      employing this encapsulation.\n   Flags: The Flags bits provide
      information about the usage of the\n      FC Encapsulation Header as shown in
      Figure 3.\n      |------------------------Bit--------------------------|\n      |
      \                                                    |\n      |    0        1
      \       2        3        4        5   |\n      +--------------------------------------------+--------+\n
      \     |                  Reserved                  |  CRCV  |\n      +--------------------------------------------+--------+\n
      \     Figure 3 -  Flags Field Format\n   Reserved Flags bits: These bits are
      reserved for use by future\n      versions of the FC Encapsulation and SHALL
      be set to zero on send.\n      Encapsulating protocols employing the encapsulation
      described in\n      this specification MAY require checking for zero on receive,\n
      \     however doing so has the potential to create incompatibilities\n      with
      future versions of this encapsulation.  Changes in the usage\n      of the Reserved
      Flags bits MUST be identified by changes in the\n      contents of the Version
      field.  Encapsulating protocols employing\n      the encapsulation described
      in this specification MUST NOT make\n      use of the Reserved Flags bits in
      any fashion other than that\n      described in this specification.\n   CRCV
      (CRC Valid Flag): A CRCV bit value of one indicates that\n      the contents
      of the CRC field are valid.  A CRCV bit value of zero\n      indicates that
      the contents of the CRC field are invalid.  The\n      value of the CRCV bit
      SHALL be constant for all FC Encapsulation\n      Headers sent on a given connection.\n
      \  Frame Length: The Frame Length field contains the length of the\n      entire
      FC Encapsulated frame including the FC Encapsulation Header\n      and the FC
      frame (including SOF and EOF words).  This length is\n      based on a unit
      of 32-bit words.  All FC frames are 32-bit-word-\n      aligned and the FC Encapsulation
      Header is always word-aligned;\n      therefore a32-bit word length is acceptable.\n
      \  -Flags: The -Flags field SHALL contain the one's complement of the\n      contents
      of the Flags field.  FC Encapsulation receivers SHOULD\n      either validate
      the CRC or compare the Flags and -Flags fields to\n      verify that an FC Encapsulation
      Header is being processed\n      according to a policy defined by the encapsulating
      protocol.\n   -Frame Length: The -Frame Length field SHALL contain the one's\n
      \     complement of the contents of the Frame Length field.  FC\n      Encapsulation
      receivers SHOULD either validate the CRC or compare\n      the Frame Length
      and -Frame Length fields to verify that an FC\n      Encapsulation Header is
      being processed according to a policy\n      defined by the encapsulating protocol.\n
      \  Time Stamp [Seconds]: The Time Stamp [Seconds] field contains zero\n      or
      the number of seconds since 0 hour on 1 January 1900 at the\n      time the
      FC Encapsulated frame is place in the outgoing data\n      stream.\n   Time
      Stamp [Seconds Fraction]: The Time Stamp [Second Fraction]\n      field contains
      the fraction of the second at the time the FC\n      Encapsulated frame is place
      in the outgoing data stream.  Non-\n      significant low order bits may be
      set to zero.  Table 1 shows some\n      example Time Stamp [Seconds Fraction]
      values.\n      +------------+--------------------+\n      |            |     Time
      Stamp     |\n      |   Second   | [Seconds Fraction] |\n      +------------+--------------------+\n
      \     | n.50000... |     0x80000000     |\n      | n.25000... |     0x40000000
      \    |\n      | n.12500... |     0x20000000     |\n      +------------+--------------------+\n
      \     Table 1  Example Time Stamp [Seconds Fraction] values\n   Note that, since
      some time in 1968 (second 2,147,483,648) the most\n   significant bit (bit 0
      of Time Stamp [Seconds]) has been set and that\n   the field will overflow some
      time in 2036 (second 4,294,967,296).\n   Should FCIP be in use in 2036, some
      external means will be necessary\n   to qualify time relative to 1900 and time
      relative to 2036 (and other\n   multiples of 136 years).  There will exist a
      200-picosecond interval,\n   henceforth ignored, every 136 years when the 64-bit
      field will be 0,\n   which by convention is interpreted as an invalid or unavailable\n
      \  timestamp.\n   The Time Stamp [Seconds] and Time Stamp [Seconds Fraction]
      words\n   follow the in time format described in Simple Network Time Protocol\n
      \  (SNTP) Version 4 [9].  The contents of the Time Stamp [Seconds] and\n   Time
      Stamp [Seconds Fraction] words SHALL be set as described in\n   section 4.\n
      \  CRC: When the CRCV Flag bit is zero, the CRC field SHALL contain\n   zero.
      \ When the CRCV Flag bit is one, the CRC field SHALL contain a\n   CRC for words
      0 to 5 of the FC Encapsulation Header computed using\n   the equations, polynomial,
      initial value, and bit order defined for\n   Fibre Channel in FC-FS [3].  Using
      this algorithm, the bit order of\n   the resulting CRC corresponds to that of
      FC-1 layer.  The CRC\n   transmitted over the IP network shall correspond to
      the equivalent\n   value converted to FC-2 format as specified in FC-FS.\n"
    title: 3.1.  FC Encapsulation Header Format
  - contents:
    - "3.2.  FC Encapsulation Header Validation\n   Two mechanisms are provided for
      validating an FC Encapsulation\n   Header:\n   -  Redundancy based\n   -  CRC
      based\n   The two mechanisms address the needs of two different design and\n
      \  operating environments.\n"
    - contents:
      - "3.2.1.  Redundancy Based FC Encapsulation Header Validation\n   Redundancy
        based validation of an FC Encapsulation Header relies on\n   duplicated and
        one's complemented fields in the header.\n   Encapsulating protocols that
        use redundancy based validation SHOULD\n   define how receiving devices use
        one's complement fields to verify\n   header validity.\n   Header validation
        based on redundancy is a stepwise process in that\n   the first word is validated,
        then the second, then the third and so\n   on.  A decision that a candidate
        header is not valid may be reached\n   before the complete header is available.\n"
      title: 3.2.1.  Redundancy Based FC Encapsulation Header Validation
    - contents:
      - "3.2.2.  CRC Based FC Encapsulation Header Validation\n   CRC based validation
        of an FC Encapsulation Header relies on a CRC\n   located in the last word
        of the header.\n   Header validation based on the CRC defined in section 3.1
        requires\n   computing the CRC for all bytes preceding the CRC word, and comparing\n
        \  the results to the CRC word's contents.\n"
      title: 3.2.2.  CRC Based FC Encapsulation Header Validation
    title: 3.2.  FC Encapsulation Header Validation
  title: 3.  The FC Encapsulation Header
- contents:
  - "4.  Measuring Fibre Channel Frame Transit Time\n   To comply with FC-FS [3],
    an FC Fabric must specify and limit the\n   lifetime of a frame.  In an FC Fabric
    comprised of IP-connected\n   elements, one component of the frame's lifetime
    is the time required\n   to traverse the connection.  To ensure that the total
    frame lifetime\n   remains within the limits required by the FC Fabric, the\n
    \  encapsulation described in this specification contains provisions for\n   recording
    the departure time of an encapsulated frame injected into a\n   connection.  If
    the encapsulated frame originator and recipient have\n   access to aligned and
    synchronized time bases, the transit time\n   through the IP network can then
    be computed.\n   When originating an encapsulated frame, an entity that does not\n
    \  support transit time calculation SHALL always set the Time Stamp\n   [Seconds]
    and Time Stamp [Seconds Fraction] fields to zero.  When\n   receiving an encapsulated
    frame, an entity that does not support\n   transit time calculation SHALL ignore
    the contents of the Time Stamp\n   words.\n   The encapsulating protocol SHALL
    specify whether or not\n   implementation support is required.  The encapsulating
    protocol SHALL\n   specify those conditions under which a received encapsulated
    frame\n   MUST have its transit time checked before forwarding.\n   Encapsulating
    and de-encapsulating entities that support this feature\n   MUST have access to:\n
    \  a) An internal time base having the stability and resolution\n      necessary
    to comply with the requirements of the encapsulating\n      protocol specification;
    and\n   b) A time base that is synchronized and aligned with the time base of\n
    \     other entities to which encapsulated frames may be sent or\n      received.
    \ The encapsulating protocol specification MUST describe\n      the synchronization
    and alignment procedure.\n   With respect to its ability to measure and set transit
    time for\n   encapsulated frames exchanged with another device, an entity is\n
    \  either in the Synchronized or Unsynchronized state.  An entity is in\n   the
    Unsynchronized state upon power-up and transitions to the\n   Synchronized state
    once it has aligned its time base in accordance\n   with the applicable encapsulating
    protocol specification.\n   An entity MUST return to the Unsynchronized state
    if it is unable to\n   maintain synchronization of its time base as required by
    the\n   encapsulating protocol specification.\n   The policy for forwarding frames
    while in the Unsynchronized state\n   SHALL be defined by the encapsulating protocol
    specification.\n   If processing frames in the Unsynchronized state is permitted
    by the\n   encapsulating protocol specification, the entity SHALL:\n   a) When
    de-encapsulating a frame, ignore the Time Stamp words. For\n      example, if
    a calculated transit time exceeds a value that could\n      cause the frame to
    violate FC maximum time in transit limits, the\n      encapsulating protocol may
    specify that the frame is to be\n      discarded; and\n   b) When encapsulating
    a frame set the Time Stamp [Seconds] and Time\n      Stamp [Seconds Fraction]
    words to zero.  For example, an\n      encapsulating protocol may specify that
    frames for which transit\n      time cannot be determined are never to be forwarded
    over FC.\n   When encapsulating a frame, an entity in the Synchronized state SHALL\n
    \  record the value of the time base in the Time Stamp [Seconds] and\n   Time
    Stamp [Seconds Fraction] words in the encapsulation header.\n   When de-encapsulating
    a frame, an entity in the Synchronized state\n   SHALL:\n   a) Test the Time Stamp
    words to determine if they contain a time as\n      specified in [9].  If the
    time stamp is valid, the receiving\n      entity SHALL compute the transit time
    by calculating the\n      difference between its time base and the departure time
    recorded\n      in the frame header.  The receiving entity SHALL process the\n
    \     calculated transit time and the de-encapsulated frame in\n      accordance
    with the applicable encapsulating protocol\n      specification; or\n   b) If
    both Time Stamp words have a value of zero, the receiving\n      entity SHALL
    de-encapsulate the frame without computing the\n      transit time.  The disposition
    of the frame and any other actions\n      by the recipient SHALL be defined by
    the encapsulating protocol\n      specification.\n   Note: For most purposes,
    communication between entities is possible\n   only while in the Synchronized
    state.\n"
  title: 4.  Measuring Fibre Channel Frame Transit Time
- contents:
  - '5.  The FC Frame

    '
  - contents:
    - "5.1.  FC Frame Content\n   NOTE: All uses of the words \"character\" or \"characters\"
      in this\n   section refer to 8bit/10bit link encoding wherein each 8 bit\n   \"character\"
      within a link frame is encoded as a 10 bit \"character\"\n   for link transmission.
      \ These words do not refer to ASCII, Unicode,\n   or any other form of text
      characters, although octets from such\n   characters will occur as 8 bit \"characters\"
      for this encoding.  This\n   usage is employed here for consistency with the
      ANSI T11 standards\n   that specify Fibre Channel.\n   Figure 4 shows the structure
      of a general FC-2 frame format.\n      +------------------+\n      |        SOF
      \      |\n      +------------------+\n      | FC frame content |\n      +------------------+\n
      \     |        EOF       |\n      +------------------+\n      Figure 4 -  General
      FC-2 Frame Format\n   As shown in Figure 4, the FC frame content is defined
      as the data\n   between the EOF and SOF delimiters (including the FC CRC) after\n
      \  conversion from FC-1 to FC-2 format as specified by FC-FS [3].\n   When Fibre
      Channel devices convert the FC frame content to the FC-0\n   physical transport,
      an encoding is applied to the FC frame content\n   (e.g., 8b/10b encoding like
      that used in Gigbit Ethernet) for reasons\n   that include redundancy and low
      level timing synchronization between\n   sender and receiver.  With the exceptions
      of SOF and EOF [3] all\n   discussion of FC frame content in this document is
      at the 8-bit byte\n   level, prior to the application of any such encoding.\n
      \  The 8-bit bytes in the FC frame content can be translated directly\n   for
      transmission over an IP Network.  However, the FC SOF and EOF\n   employ special
      10b characters that have no 8b equivalents. Therefore,\n   special byte placement
      and 8-bit character encodings are required to\n   represent SOF and EOF.\n"
    title: 5.1.  FC Frame Content
  - contents:
    - "5.2.  Bit and Byte Ordering\n   The Encapsulation Header, SOF, FC frame content
      (see section 5.1),\n   and EOF are mapped to TCP using the big endian byte ordering,
      which\n   corresponds to the standard network byte order or canonical form [7].\n"
    title: 5.2.  Bit and Byte Ordering
  - contents:
    - "5.3.  FC SOF and EOF\n   As described in section 5.1, representation of FC
      SOF and EOF in an\n   IP Network byte stream requires special formatting and
      8-bit code\n   definitions.  Therefore, the encapsulated FC frame SHALL have
      the\n   format shown in Figure 5.  The redundancy of the SOF/EOF\n   representation
      in the encapsulation format results from concerns that\n   the information be
      protected from transmission errors.\n   W|------------------------------Bit------------------------------|\n
      \  o|                                                               |\n   r|
      \                   1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3|\n   d|0 1 2
      3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1|\n    +---------------+---------------+-------------------------------+\n
      \  0|      SOF      |      SOF      |     -SOF      |     -SOF      |\n    +---------------+---------------+-------------------------------+\n
      \  1|                                                               |\n    +-----
      \                  FC frame content                  -----+\n    |                                                               |\n
      \   +---------------+---------------+-------------------------------+\n   n|
      \     EOF      |      EOF      |     -EOF      |     -EOF      |\n    +---------------+---------------+-------------------------------+\n
      \   Figure 5 -  FC Frame Encapsulation Format\n   Note: The number of 8-bit
      bytes in the FC frame content is always a\n   multiple of four.\n   SOF: The
      SOF fields contain the encoded SOF value selected from table\n   2.\n   +-------+------+-------+
      \   +-------+------+-------+\n   |  FC   | SOF  |       |    |  FC   | SOF  |
      \      |\n   |  SOF  | Code | Class |    |  SOF  | Code | Class |\n   +-------+------+-------+
      \   +-------+------+-------+\n   | SOFf  | 0x28 |   F   |    | SOFi4 | 0x29
      |   4   |\n   | SOFi2 | 0x2D |   2   |    | SOFn4 | 0x31 |   4   |\n   | SOFn2
      | 0x35 |   2   |    | SOFc4 | 0x39 |   4   |\n   | SOFi3 | 0x2E |   3   |    +-------+------+-------+\n
      \  | SOFn3 | 0x36 |   3   |\n   +-------+------+-------+\n   Table 2  Translation
      of FC SOF values to SOF field contents\n   -SOF: The -SOF fields contain the
      one's complement of the value in\n      the SOF fields.  Encapsulation receivers
      SHOULD validate the SOF\n      field according to a policy defined by the encapsulating
      protocol.\n   EOF: The EOF fields contain the encoded EOF value selected from\n
      \     table 3.\n   +-------+------+---------+   +--------+------+-------+\n
      \  |  FC   | EOF  |         |   |  FC    | EOF  |       |\n   |  EOF  | Code
      |  Class  |   |  EOF   | Code | Class |\n   +-------+------+---------+   +--------+------+-------+\n
      \  | EOFn  | 0x41 | 2,3,4,F |   | EOFdt  | 0x46 |   4   |\n   | EOFt  | 0x42
      | 2,3,4,F |   | EOFdti | 0x4E |   4   |\n   | EOFni | 0x49 | 2,3,4,F |   | EOFrt
      \ | 0x44 |   4   |\n   | EOFa  | 0x50 | 2,3,4,F |   | EOFrti | 0x4F |   4   |\n
      \  +-------+------+---------+   +--------+------+-------+\n   Table 3  Translation
      of FC EOF values to EOF field contents\n   -EOF: The -EOF fields contain the
      one's complement of the value in\n      the EOF fields.  Encapsulation receivers
      SHOULD validate the EOF\n      field according to a policy defined by the encapsulating
      protocol.\n   Note: FC-BB-2 [6] lists SOF and EOF codes not shown in table 2
      and\n   table 3 (e.g., SOFi1 and SOFn1).  However, FC-MI [8] identifies these\n
      \  codes as not interoperable, so they are not listed in this\n   specification.\n"
    title: 5.3.  FC SOF and EOF
  title: 5.  The FC Frame
- contents:
  - "6.  Security Considerations\n   This document describes the encapsulation format
    only.  Actual use of\n   this format in a encapsulating protocol requires an additional\n
    \  document to specify the encapsulating protocol functionality and\n   appropriate
    security considerations.  Because security considerations\n   for this encapsulation
    depend on how it is used by encapsulating\n   protocols, they SHALL be described
    in encapsulating protocol specific\n   documents.\n"
  title: 6.  Security Considerations
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [1]  Bradner, S., \"The Internet Standards Process
      -- Revision 3\", BCP\n        9, RFC 2026, October 1996.\n   [2]  Bradner, S.,
      \"Key words for use in RFCs to Indicate Requirement\n        Levels\", BCP 14,
      RFC 2119, March 1997.\n   [3]  Fibre Channel Framing and Signaling (FC-FS),
      ANSI\n        INCITS.373:2003, October 27, 2003. Note: Published T11 standards\n
      \       are available from the INCITS online store\n        http://www.incits.org,
      or the ANSI online store,\n        http://www.ansi.org.\n   [4]  Fibre Channel
      Switch Fabric -2 (FC-SW-2), ANSI NCITS.355:2001,\n        December 12, 2002.
      \ Note: Published T11 standards are available\n        from the INCITS online
      store http://www.incits.org, or the ANSI\n        online store, http://www.ansi.org.\n
      \  [5]  Fibre Channel Physical Interfaces (FC-PI), ANSI NCITS.352:2002,\n        December
      1, 2002.  Note: Published T11 standards are available\n        from the INCITS
      online store http://www.incits.org, or the ANSI\n        online store, http://www.ansi.org.\n
      \  [6]  Fibre Channel Backbone -2 (FC-BB-2), ANSI INCITS.372:2003, July\n        25,
      2003.  Note: Published T11 standards are available from the\n        INCITS
      online store http://www.incits.org, or the ANSI online\n        store, http://www.ansi.org.\n
      \  [7]  Narten, T. and C. Burton, \"A Caution on The Canonical Ordering\n        of
      Link-Layer Addresses\", RFC 2469, December 1998.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [8]  Fibre Channel Methodologies for Interconnects
      (FC-MI), ANSI\n        INCITS/TR-30:2002, November 1, 2002.  Note: Published
      T11\n        standards are available from the INCITS online store\n        http://www.incits.org,
      or the ANSI online store,\n        http://www.ansi.org.\n   [9]  Mills, D.,
      \"Simple Network Time Protocol (SNTP) Version 4 for\n        IPv4, IPv6 and
      OSI\", RFC 2030, October 1996.\n   [10] Narten, T. and H. Alvestrand, \"Guidelines
      for Writing an IANA\n        Considerations Section in RFCs\", BCP 26, RFC 2434,
      October 1998.\n   [11] Rajagopal, M., Rodriguez, E., Weber, R., \"Fibre Channel
      Over\n        TCP/IP (FCIP)\", Work in Progress.\n   [12] Monia, C., et. al.,
      \"iFCP - A Protocol for Internet Fibre\n        Channel Storage Networking\",
      Work in Progress.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "8.  Acknowledgements\n   The authors express their appreciation to Mr. Vi Chau\n
    \  (vchau1@cox.net) for his contributions to the design team that\n   developed
    this document.  Mr. Chau is no longer working in this\n   technology.\n   The
    authors are also grateful to Dr. David Black, Mr. Mallikarjun\n   Chadalapaka,
    and Mr. Robert Elliott for their reviews of this\n   specification.\n"
  title: 8.  Acknowledgements
- contents:
  - "Appendix A - Fibre Channel Bit and Byte Numbering Guidance\n   Both Fibre Channel
    and IETF standards use the same byte transmission\n   order.  However, the bit
    and byte numbering is different.\n   Fibre Channel bit and byte numbering can
    be observed if the data\n   structure heading shown in Figure 6, is cut and pasted
    at the top of\n   Figure 2 and Figure 5.\n   W|------------------------------Bit------------------------------|\n
    \  o|                                                               |\n   r|3
    3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1                    |\n   d|1 0 9 8 7
    6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0|\n   Figure 6 -  Fibre Channel
    Data Structure Bit and Byte Numbering\n   Fibre Channel bit numbering for the
    Flags field can be observed if\n   the data structure heading shown in Figure
    7, is cut and pasted at\n   the top of Figure 3.\n   |------------------------Bit--------------------------|\n
    \  |                                                     |\n   |   31       30
    \      29       28       27       26   |\n   Figure 7 -  Fibre Channel Flags Bit
    Numbering\n"
  title: Appendix A - Fibre Channel Bit and Byte Numbering Guidance
- contents:
  - "Appendix B - Encapsulating Protocol Requirements\n   This appendix lists the
    requirements placed on the encapsulating\n   protocols that employ this encapsulation.
    \ The requirements listed\n   here are suggested or described elsewhere in this
    document, but their\n   collection in this appendix serves to assist encapsulating
    protocol\n   authors in meeting all obligations placed upon them.\n   Encapsulating
    Protocol Specific Data\n   Encapsulating protocols employing this encapsulation
    SHALL:\n   - specify the IANA assigned number used in the Protocol# field\n   -
    specify the contents of the Encapsulating Protocol Specific field\n   Encapsulating
    protocols employing this encapsulation SHALL define the\n   procedures and policies
    necessary for verifying that an FC\n   Encapsulation Header is being processed.\n
    \  Encapsulating protocols employing this encapsulation SHALL define the\n   procedures
    and policies necessary for the detection of over age\n   frames.  The items to
    be specified and the choices available to an\n   encapsulating protocol specification
    are as follows:\n   a) The encapsulating protocol requirements for measuring transit\n
    \     times.  The encapsulating protocol MAY allow implementation of\n      transit
    time measurement to be optional.\n   b) The requirements or guidelines for stability
    and resolution of the\n      entity's time base.\n   c) The procedure for synchronizing
    an entity's time base, including\n      the criteria for entering the Synchronized
    and Unsynchronized\n      states.\n   d) The forwarding (or lack of forwarding)
    of frame traffic while in\n      the Unsynchronized state.\n      The specification
    MAY allow an entity in the Unsynchronized state\n      to continue processing
    frame traffic.\n   e) The procedure to be followed when frames are received that
    do not\n      have a valid time stamp.\n      The specification MAY allow such
    frames to be accepted by the\n      entity.\n   f) Requirements for setting and
    testing the transit time limit and\n      the procedure to be followed when a
    received frame is discarded\n      due to its transit time exceeding the limit.\n"
  title: Appendix B - Encapsulating Protocol Requirements
- contents:
  - "Appendix C - IANA Considerations\n   The Protocol# (Protocol Number) field is
    an identifier number used to\n   distinguish between the encapsulating protocols
    that employ this FC\n   frame encapsulation.  Values used in the Protocol# field
    are to be\n   assigned from a new, separate registry that is maintained by IANA.\n
    \  All values in the Protocol# field are to be registered with and\n   assigned
    by IANA with the following exceptions.\n   -  Protocol# value 0 should not be
    assigned until after all other\n      values have been assigned.\n   -  Protocol#
    values 240-255 inclusive must be set aside for private\n      use amongst cooperating
    systems.\n   Following the policies outlined in [10], Protocol# values not listed\n
    \  above are to be assigned only for Standards Track RFCs approved by\n   the
    IESG.\n   In addition to creating the FC Frame Encapsulation Protocol Number\n
    \  Registry, the standards action of this RFC allocates the following\n   two
    values from the registry:\n   -  Protocol# value 1 assigned to the FCIP (Fibre
    Channel Over TCP/\n      IP) encapsulating protocol [11].\n   -  Protocol# value
    2 assigned to the iFCP (A Protocol for Internet\n      Fibre Channel Storage Networking)
    encapsulating protocol [12].\n"
  title: Appendix C - IANA Considerations
- contents:
  - "Appendix D - Intellectual Property Rights Statement\n   The IETF takes no position
    regarding the validity or scope of any\n   intellectual property or other rights
    that might be claimed to\n   pertain to the implementation or use of the technology
    described in\n   this document or the extent to which any license under such rights\n
    \  might or might not be available; neither does it represent that it\n   has
    made any effort to identify any such rights.  Information on the\n   IETF's procedures
    with respect to rights in standards-track and\n   standards-related documentation
    can be found in BCP-11.  Copies of\n   claims of rights made available for publication
    and any assurances of\n   licenses to be made available, or the result of an attempt
    made to\n   obtain a general license or permission for the use of such\n   proprietary
    rights by implementors or users of this specification can\n   be obtained from
    the IETF Secretariat.\n   The IETF invites any interested party to bring to its
    attention any\n   copyrights, patents or patent applications, or other proprietary\n
    \  rights which may cover technology that may be required to practice\n   this
    standard.  Please address the information to the IETF Executive\n   Director.\n"
  title: Appendix D - Intellectual Property Rights Statement
- contents:
  - "Authors' Addresses\n   Ralph Weber\n   ENDL Texas\n   representing Brocade Comm.\n
    \  Suite 102 PMB 178\n   18484 Preston Road\n   Dallas, TX 75252\n   USA\n   Phone:
    +1 214 912 1373\n   EMail: roweber@ieee.org\n   Murali Rajagopal\n   Broadcom\n
    \  16215 Alton Parkway\n   PO Box 57013\n   Irvine, CA 92619\n   USA\n   Phone:
    +1 949 450 8700\n   EMail: muralir@broadcom.com\n   Franco Travostino\n   Technology
    Center\n   Nortel Networks, Inc.\n   600 Technology Park\n   Billerica, MA 01821\n
    \  USA\n   Phone: +1 978 288 7708\n   EMail: travos@nortelnetworks.com\n   Michael
    E. O'Donnell\n   McDATA Corporation\n   4 McDATA Parkway\n   Broomfield, Co. 80021\n
    \  USA\n   Phone +1 720 558 4142\n   Fax +1 720 558 8999\n   EMail: mike.o'donnell@mcdata.com\n
    \  Charles Monia\n   EMail: cmonia@pacbell.net\n   Milan J. Merhar\n   Sun Microsystems\n
    \  43 Nagog Park\n   Acton, MA 01720\n   USA\n   Phone: +1 978 206 9124\n   EMail:
    milan.merhar@sun.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2003).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
