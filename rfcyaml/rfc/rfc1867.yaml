- title: __initial_text__
  contents:
  - '                     Form-based File Upload in HTML

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  This memo does not specify an Internet standard of any\n   kind.\
    \  Discussion and suggestions for improvement are requested.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: 1. Abstract
  contents:
  - "1. Abstract\n   Currently, HTML forms allow the producer of the form to request\n\
    \   information from the user reading the form.  These forms have proven\n   useful\
    \ in a wide variety of applications in which input from the user\n   is necessary.\
    \  However, this capability is limited because HTML forms\n   don't provide a\
    \ way to ask the user to submit files of data.  Service\n   providers who need\
    \ to get files from the user have had to implement\n   custom user applications.\
    \  (Examples of these custom browsers have\n   appeared on the www-talk mailing\
    \ list.)  Since file-upload is a\n   feature that will benefit many applications,\
    \ this proposes an\n   extension to HTML to allow information providers to express\
    \ file\n   upload requests uniformly, and a MIME compatible representation for\n\
    \   file upload responses.  This also includes a description of a\n   backward\
    \ compatibility strategy that allows new servers to interact\n   with the current\
    \ HTML user agents.\n   The proposal is independent of which version of HTML it\
    \ becomes a\n   part.\n"
- title: 2.  HTML forms with file submission
  contents:
  - "2.  HTML forms with file submission\n   The current HTML specification defines\
    \ eight possible values for the\n   attribute TYPE of an INPUT element: CHECKBOX,\
    \ HIDDEN, IMAGE,\n   PASSWORD, RADIO, RESET, SUBMIT, TEXT.\n   In addition, it\
    \ defines the default ENCTYPE attribute of the FORM\n   element using the POST\
    \ METHOD to have the default value\n   \"application/x-www-form-urlencoded\".\n\
    \   This proposal makes two changes to HTML:\n   1) Add a FILE option for the\
    \ TYPE attribute of INPUT.\n   2) Allow an ACCEPT attribute for INPUT tag, which\
    \ is a list of\n      media types or type patterns allowed for the input.\n  \
    \ In addition, it defines a new MIME media type, multipart/form-data,\n   and\
    \ specifies the behavior of HTML user agents when interpreting a\n   form with\
    \ ENCTYPE=\"multipart/form-data\" and/or <INPUT type=\"file\">\n   tags.\n   These\
    \ changes might be considered independently, but are all\n   necessary for reasonable\
    \ file upload.\n   The author of an HTML form who wants to request one or more\
    \ files\n   from a user would write (for example):\n    <FORM ENCTYPE=\"multipart/form-data\"\
    \ ACTION=\"_URL_\" METHOD=POST>\n    File to process: <INPUT NAME=\"userfile1\"\
    \ TYPE=\"file\">\n    <INPUT TYPE=\"submit\" VALUE=\"Send File\">\n    </FORM>\n\
    \   The change to the HTML DTD is to add one item to the entity\n   \"InputType\"\
    . In addition, it is proposed that the INPUT tag have an\n   ACCEPT attribute,\
    \ which is a list of comma-separated media types.\n  ... (other elements) ...\n\
    \  <!ENTITY % InputType \"(TEXT | PASSWORD | CHECKBOX |\n                    \
    \     RADIO | SUBMIT | RESET |\n                         IMAGE | HIDDEN | FILE\
    \ )\">\n  <!ELEMENT INPUT - 0 EMPTY>\n  <!ATTLIST INPUT\n          TYPE %InputType\
    \ TEXT\n          NAME CDATA #IMPLIED  -- required for all but submit and reset\n\
    \          VALUE CDATA #IMPLIED\n          SRC %URI #IMPLIED  -- for image inputs\
    \ --\n          CHECKED (CHECKED) #IMPLIED\n          SIZE CDATA #IMPLIED  --like\
    \ NUMBERS,\n                                  but delimited with comma, not space\n\
    \          MAXLENGTH NUMBER #IMPLIED\n          ALIGN (top|middle|bottom) #IMPLIED\n\
    \          ACCEPT CDATA #IMPLIED --list of content types\n          >\n  ... (other\
    \ elements) ...\n"
- title: 3.  Suggested implementation
  contents:
  - "3.  Suggested implementation\n   While user agents that interpret HTML have wide\
    \ leeway to choose the\n   most appropriate mechanism for their context, this\
    \ section suggests\n   how one class of user agent, WWW browsers, might implement\
    \ file\n   upload.\n"
- title: 3.1 Display of FILE widget
  contents:
  - "3.1 Display of FILE widget\n   When a INPUT tag of type FILE is encountered,\
    \ the browser might show\n   a display of (previously selected) file names, and\
    \ a \"Browse\" button\n   or selection method. Selecting the \"Browse\" button\
    \ would cause the\n   browser to enter into a file selection mode appropriate\
    \ for the\n   platform. Window-based browsers might pop up a file selection window,\n\
    \   for example. In such a file selection dialog, the user would have the\n  \
    \ option of replacing a current selection, adding a new file selection,\n   etc.\
    \ Browser implementors might choose let the list of file names be\n   manually\
    \ edited.\n   If an ACCEPT attribute is present, the browser might constrain the\n\
    \   file patterns prompted for to match those with the corresponding\n   appropriate\
    \ file extensions for the platform.\n"
- title: 3.2 Action on submit
  contents:
  - "3.2 Action on submit\n   When the user completes the form, and selects the SUBMIT\
    \ element, the\n   browser should send the form data and the content of the selected\n\
    \   files.  The encoding type application/x-www-form-urlencoded is\n   inefficient\
    \ for sending large quantities of binary data or text\n   containing non-ASCII\
    \ characters.  Thus, a new media type,\n   multipart/form-data, is proposed as\
    \ a way of efficiently sending the\n   values associated with a filled-out form\
    \ from client to server.\n"
- title: 3.3 use of multipart/form-data
  contents:
  - "3.3 use of multipart/form-data\n   The definition of multipart/form-data is included\
    \ in section 7.  A\n   boundary is selected that does not occur in any of the\
    \ data. (This\n   selection is sometimes done probabilisticly.) Each field of\
    \ the form\n   is sent, in the order in which it occurs in the form, as a part\
    \ of\n   the multipart stream.  Each part identifies the INPUT name within the\n\
    \   original HTML form. Each part should be labelled with an appropriate\n   content-type\
    \ if the media type is known (e.g., inferred from the file\n   extension or operating\
    \ system typing information) or as\n   application/octet-stream.\n   If multiple\
    \ files are selected, they should be transferred together\n   using the multipart/mixed\
    \ format.\n   While the HTTP protocol can transport arbitrary BINARY data, the\n\
    \   default for mail transport (e.g., if the ACTION is a \"mailto:\" URL)\n  \
    \ is the 7BIT encoding.  The value supplied for a part may need to be\n   encoded\
    \ and the \"content-transfer-encoding\" header supplied if the\n   value does\
    \ not conform to the default encoding.  [See section 5 of\n   RFC 1521 for more\
    \ details.]\n   The original local file name may be supplied as well, either as\
    \ a\n   'filename' parameter either of the 'content-disposition: form-data'\n\
    \   header or in the case of multiple files in a 'content-disposition:\n   file'\
    \ header of the subpart. The client application should make best\n   effort to\
    \ supply the file name; if the file name of the client's\n   operating system\
    \ is not in US-ASCII, the file name might be\n   approximated or encoded using\
    \ the method of RFC 1522.  This is a\n   convenience for those cases where, for\
    \ example, the uploaded files\n   might contain references to each other, e.g.,\
    \ a TeX file and its .sty\n   auxiliary style description.\n   On the server end,\
    \ the ACTION might point to a HTTP URL that\n   implements the forms action via\
    \ CGI. In such a case, the CGI program\n   would note that the content-type is\
    \ multipart/form-data, parse the\n   various fields (checking for validity, writing\
    \ the file data to local\n   files for subsequent processing, etc.).\n"
- title: 3.4 Interpretation of other attributes
  contents:
  - "3.4 Interpretation of other attributes\n   The VALUE attribute might be used\
    \ with <INPUT TYPE=file> tags for a\n   default file name. This use is probably\
    \ platform dependent.  It might\n   be useful, however, in sequences of more than\
    \ one transaction, e.g.,\n   to avoid having the user prompted for the same file\
    \ name over and\n   over again.\n   The SIZE attribute might be specified using\
    \ SIZE=width,height, where\n   width is some default for file name width, while\
    \ height is the\n   expected size showing the list of selected files.  For example,\
    \ this\n   would be useful for forms designers who expect to get several files\n\
    \   and who would like to show a multiline file input field in the\n   browser\
    \ (with a \"browse\" button beside it, hopefully).  It would be\n   useful to\
    \ show a one line text field when no height is specified\n   (when the forms designer\
    \ expects one file, only) and to show a\n   multiline text area with scrollbars\
    \ when the height is greater than 1\n   (when the forms designer expects multiple\
    \ files).\n"
- title: 4.  Backward compatibility issues
  contents:
  - "4.  Backward compatibility issues\n   While not necessary for successful adoption\
    \ of an enhancement to the\n   current WWW form mechanism, it is useful to also\
    \ plan for a migration\n   strategy: users with older browsers can still participate\
    \ in file\n   upload dialogs, using a helper application. Most current web browers,\n\
    \   when given <INPUT TYPE=FILE>, will treat it as <INPUT TYPE=TEXT> and\n   give\
    \ the user a text box. The user can type in a file name into this\n   text box.\
    \ In addition, current browsers seem to ignore the ENCTYPE\n   parameter in the\
    \ <FORM> element, and always transmit the data as\n   application/x-www-form-urlencoded.\n\
    \   Thus, the server CGI might be written in a way that would note that\n   the\
    \ form data returned had content-type application/x-www-form-\n   urlencoded instead\
    \ of multipart/form-data, and know that the user was\n   using a browser that\
    \ didn't implement file upload.\n   In this case, rather than replying with a\
    \ \"text/html\" response, the\n   CGI on the server could instead send back a\
    \ data stream that a helper\n   application might process instead; this would\
    \ be a data stream of\n   type \"application/x-please-send-files\", which contains:\n\
    \   * The (fully qualified) URL to which the actual form data should\n     be\
    \ posted (terminated with CRLF)\n   * The list of field names that were supposed\
    \ to be file contents\n     (space separated, terminated with CRLF)\n   * The\
    \ entire original application/x-www-form-urlencoded form data\n     as originally\
    \ sent from client to server.\n   In this case, the browser needs to be configured\
    \ to process\n   application/x-please-send-files to launch a helper application.\n\
    \   The helper would read the form data, note which fields contained\n   'local\
    \ file names' that needed to be replaced with their data\n   content, might itself\
    \ prompt the user for changing or adding to the\n   list of files available, and\
    \ then repackage the data & file contents\n   in multipart/form-data for retransmission\
    \ back to the server.\n   The helper would generate the kind of data that a 'new'\
    \ browser\n   should actually have sent in the first place, with the intention\
    \ that\n   the URL to which it is sent corresponds to the original ACTION URL.\n\
    \   The point of this is that the server can use the *same* CGI to\n   implement\
    \ the mechanism for dealing with both old and new browsers.\n   The helper need\
    \ not display the form data, but *should* ensure that\n   the user actually be\
    \ prompted about the suitability of sending the\n   files requested (this is to\
    \ avoid a security problem with malicious\n   servers that ask for files that\
    \ weren't actually promised by the\n   user.) It would be useful if the status\
    \ of the transfer of the files\n   involved could be displayed.\n"
- title: 5.  Other considerations
  contents:
  - '5.  Other considerations

    '
- title: 5.1 Compression, encryption
  contents:
  - "5.1 Compression, encryption\n   This scheme doesn't address the possible compression\
    \ of files.  After\n   some consideration, it seemed that the optimization issues\
    \ of file\n   compression were too complex to try to automatically have browsers\n\
    \   decide that files should be compressed.  Many link-layer transport\n   mechanisms\
    \ (e.g., high-speed modems) perform data compression over\n   the link, and optimizing\
    \ for compression at this layer might not be\n   appropriate. It might be possible\
    \ for browsers to optionally produce\n   a content-transfer-encoding of x-compress\
    \ for file data, and for\n   servers to decompress the data before processing,\
    \ if desired; this\n   was left out of the proposal, however.\n   Similarly, the\
    \ proposal does not contain a mechanism for encryption\n   of the data; this should\
    \ be handled by whatever other mechanisms are\n   in place for secure transmission\
    \ of data, whether via secure HTTP or\n   mail.\n"
- title: 5.2 Deferred file transmission
  contents:
  - "5.2 Deferred file transmission\n   In some situations, it might be advisable\
    \ to have the server validate\n   various elements of the form data (user name,\
    \ account, etc.)  before\n   actually preparing to receive the data.  However,\
    \ after some\n   consideration, it seemed best to require that servers that wish\
    \ to do\n   this should implement this as a series of forms, where some of the\n\
    \   data elements that were previously validated might be sent back to\n   the\
    \ client as 'hidden' fields, or by arranging the form so that the\n   elements\
    \ that need validation occur first.  This puts the onus of\n   maintaining the\
    \ state of a transaction only on those servers that\n   wish to build a complex\
    \ application, while allowing those cases that\n   have simple input needs to\
    \ be built simply.\n   The HTTP protocol may require a content-length for the\
    \ overall\n   transmission. Even if it were not to do so, HTTP clients are\n \
    \  encouraged to supply content-length for overall file input so that a\n   busy\
    \ server could detect if the proposed file data is too large to be\n   processed\
    \ reasonably and just return an error code and close the\n   connection without\
    \ waiting to process all of the incoming data.  Some\n   current implementations\
    \ of CGI require a content-length in all POST\n   transactions.\n   If the INPUT\
    \ tag includes the attribute MAXLENGTH, the user agent\n   should consider its\
    \ value to represent the maximum Content-Length (in\n   bytes) which the server\
    \ will accept for transferred files.  In this\n   way, servers can hint to the\
    \ client how much space they have\n   available for a file upload, before that\
    \ upload takes place.  It is\n   important to note, however, that this is only\
    \ a hint, and the actual\n   requirements of the server may change between form\
    \ creation and file\n   submission.\n   In any case, a HTTP server may abort a\
    \ file upload in the middle of\n   the transaction if the file being received\
    \ is too large.\n"
- title: 5.3 Other choices for return transmission of binary data
  contents:
  - "5.3 Other choices for return transmission of binary data\n   Various people have\
    \ suggested using new mime top-level type\n   \"aggregate\", e.g., aggregate/mixed\
    \ or a content-transfer-encoding of\n   \"packet\" to express indeterminate-length\
    \ binary data, rather than\n   relying on the multipart-style boundaries.  While\
    \ we are not opposed\n   to doing so, this would require additional design and\
    \ standardization\n   work to get acceptance of \"aggregate\".  On the other hand,\
    \ the\n   'multipart' mechanisms are well established, simple to implement on\n\
    \   both the sending client and receiving server, and as efficient as\n   other\
    \ methods of dealing with multiple combinations of binary data.\n"
- title: '5.4 Not overloading <INPUT>:'
  contents:
  - "5.4 Not overloading <INPUT>:\n   Various people have wondered about the advisability\
    \ of overloading\n   'INPUT' for this function, rather than merely providing a\
    \ different\n   type of FORM element.  Among other considerations, the migration\n\
    \   strategy which is allowed when using <INPUT> is important.  In\n   addition,\
    \ the <INPUT> field *is* already overloaded to contain most\n   kinds of data\
    \ input; rather than creating multiple kinds of <INPUT>\n   tags, it seems most\
    \ reasonable to enhance <INPUT>.  The 'type' of\n   INPUT is not the content-type\
    \ of what is returned, but rather the\n   'widget-type'; i.e., it identifies the\
    \ interaction style with the\n   user.  The description here is carefully written\
    \ to allow <INPUT\n   TYPE=FILE> to work for text browsers or audio-markup.\n"
- title: 5.5 Default content-type of field data
  contents:
  - "5.5 Default content-type of field data\n   Many input fields in HTML are to be\
    \ typed in. There has been some\n   ambiguity as to how form data should be transmitted\
    \ back to servers.\n   Making the content-type of <INPUT> fields be text/plain\
    \ clearly\n   disambiguates that the client should properly encode the data before\n\
    \   sending it back to the server with CRLFs.\n"
- title: 5.6 Allow form ACTION to be "mailto:"
  contents:
  - "5.6 Allow form ACTION to be \"mailto:\"\n   Independent of this proposal, it\
    \ would be very useful for HTML\n   interpreting user agents to allow a ACTION\
    \ in a form to be a\n   \"mailto:\" URL. This seems like a good idea, with or\
    \ without this\n   proposal. Similarly, the ACTION for a HTML form which is received\
    \ via\n   mail should probably default to the \"reply-to:\" of the message.\n\
    \   These two proposals would allow HTML forms to be served via HTTP\n   servers\
    \ but sent back via mail, or, alternatively, allow HTML forms\n   to be sent by\
    \ mail, filled out by HTML-aware mail recipients, and the\n   results mailed back.\n"
- title: 5.7 Remote files with third-party transfer
  contents:
  - "5.7 Remote files with third-party transfer\n   In some scenarios, the user operating\
    \ the client software might want\n   to specify a URL for remote data rather than\
    \ a local file. In this\n   case, is there a way to allow the browser to send\
    \ to the client a\n   pointer to the external data rather than the entire contents?\
    \ This\n   capability could be implemented, for example, by having the client\n\
    \   send to the server data of type \"message/external-body\" with\n   \"access-type\"\
    \ set to, say, \"uri\", and the URL of the remote data in\n   the body of the\
    \ message.\n"
- title: 5.8 File transfer with ENCTYPE=x-www-form-urlencoded
  contents:
  - "5.8 File transfer with ENCTYPE=x-www-form-urlencoded\n   If a form contains <INPUT\
    \ TYPE=file> elements but does not contain an\n   ENCTYPE in the enclosing <FORM>,\
    \ the behavior is not specified.  It\n   is probably inappropriate to attempt\
    \ to URN-encode large quantities\n   of data to servers that don't expect it.\n"
- title: 5.9 CRLF used as line separator
  contents:
  - "5.9 CRLF used as line separator\n   As with all MIME transmissions, CRLF is used\
    \ as the separator for\n   lines in a POST of the data in multipart/form-data.\n"
- title: 5.10 Relationship to multipart/related
  contents:
  - "5.10 Relationship to multipart/related\n   The MIMESGML group is proposing a\
    \ new type called multipart/related.\n   While it contains similar features to\
    \ multipart/form-data, the use\n   and application of form-data is different enough\
    \ that form-data is\n   being described separately.\n   It might be possible at\
    \ some point to encode the result of HTML forms\n   (including files) in a multipart/related\
    \ body part; this is not\n   incompatible with this proposal.\n"
- title: 5.11 Non-ASCII field names
  contents:
  - "5.11 Non-ASCII field names\n   Note that mime headers are generally required\
    \ to consist only of 7-\n   bit data in the US-ASCII character set. Hence field\
    \ names should be\n   encoded according to the prescriptions of RFC 1522 if they\
    \ contain\n   characters outside of that set. In HTML 2.0, the default character\n\
    \   set is ISO-8859-1, but non-ASCII characters in field names should be\n   encoded.\n"
- title: 6. Examples
  contents:
  - "6. Examples\n   Suppose the server supplies the following HTML:\n     <FORM ACTION=\"\
    http://server.dom/cgi/handle\"\n           ENCTYPE=\"multipart/form-data\"\n \
    \          METHOD=POST>\n     What is your name? <INPUT TYPE=TEXT NAME=submitter>\n\
    \     What files are you sending? <INPUT TYPE=FILE NAME=pics>\n     </FORM>\n\
    \   and the user types \"Joe Blow\" in the name field, and selects a text\n  \
    \ file \"file1.txt\" for the answer to 'What files are you sending?'\n   The client\
    \ might send back the following data:\n        Content-type: multipart/form-data,\
    \ boundary=AaB03x\n        --AaB03x\n        content-disposition: form-data; name=\"\
    field1\"\n        Joe Blow\n        --AaB03x\n        content-disposition: form-data;\
    \ name=\"pics\"; filename=\"file1.txt\"\n        Content-Type: text/plain\n  \
    \       ... contents of file1.txt ...\n        --AaB03x--\n   If the user also\
    \ indicated an image file \"file2.gif\" for the answer\n   to 'What files are\
    \ you sending?', the client might client might send\n   back the following data:\n\
    \        Content-type: multipart/form-data, boundary=AaB03x\n        --AaB03x\n\
    \        content-disposition: form-data; name=\"field1\"\n        Joe Blow\n \
    \       --AaB03x\n        content-disposition: form-data; name=\"pics\"\n    \
    \    Content-type: multipart/mixed, boundary=BbC04y\n        --BbC04y\n      \
    \  Content-disposition: attachment; filename=\"file1.txt\"\n        Content-Type:\
    \ text/plain\n        ... contents of file1.txt ...\n        --BbC04y\n      \
    \  Content-disposition: attachment; filename=\"file2.gif\"\n        Content-type:\
    \ image/gif\n        Content-Transfer-Encoding: binary\n          ...contents\
    \ of file2.gif...\n        --BbC04y--\n        --AaB03x--\n"
- title: 7. Registration of multipart/form-data
  contents:
  - "7. Registration of multipart/form-data\n   The media-type multipart/form-data\
    \ follows the rules of all multipart\n   MIME data streams as outlined in RFC\
    \ 1521. It is intended for use in\n   returning the data that comes about from\
    \ filling out a form. In a\n   form (in HTML, although other applications may\
    \ also use forms), there\n   are a series of fields to be supplied by the user\
    \ who fills out the\n   form. Each field has a name. Within a given form, the\
    \ names are\n   unique.\n   multipart/form-data contains a series of parts. Each\
    \ part is expected\n   to contain a content-disposition header where the value\
    \ is \"form-\n   data\" and a name attribute specifies the field name within the\
    \ form,\n   e.g., 'content-disposition: form-data; name=\"xxxxx\"', where xxxxx\
    \ is\n   the field name corresponding to that field. Field names originally in\n\
    \   non-ASCII character sets may be encoded using the method outlined in\n   RFC\
    \ 1522.\n   As with all multipart MIME types, each part has an optional Content-\n\
    \   Type which defaults to text/plain.  If the contents of a file are\n   returned\
    \ via filling out a form, then the file input is identified as\n   application/octet-stream\
    \ or the appropriate media type, if known.  If\n   multiple files are to be returned\
    \ as the result of a single form\n   entry, they can be returned as multipart/mixed\
    \ embedded within the\n   multipart/form-data.\n   Each part may be encoded and\
    \ the \"content-transfer-encoding\" header\n   supplied if the value of that part\
    \ does not conform to the default\n   encoding.\n   File inputs may also identify\
    \ the file name. The file name may be\n   described using the 'filename' parameter\
    \ of the \"content-disposition\"\n   header. This is not required, but is strongly\
    \ recommended in any case\n   where the original filename is known. This is useful\
    \ or necessary in\n   many applications.\n"
- title: 8. Security Considerations
  contents:
  - "8. Security Considerations\n   It is important that a user agent not send any\
    \ file that the user has\n   not explicitly asked to be sent. Thus, HTML interpreting\
    \ agents are\n   expected to confirm any default file names that might be suggested\n\
    \   with <INPUT TYPE=file VALUE=\"yyyy\">.  Never have any hidden fields be\n\
    \   able to specify any file.\n   This proposal does not contain a mechanism for\
    \ encryption of the\n   data; this should be handled by whatever other mechanisms\
    \ are in\n   place for secure transmission of data, whether via secure HTTP, or\
    \ by\n   security provided by MOSS (described in RFC 1848).\n   Once the file\
    \ is uploaded, it is up to the receiver to process and\n   store the file appropriately.\n"
- title: 9.  Conclusion
  contents:
  - "9.  Conclusion\n   The suggested implementation gives the client a lot of flexibility\
    \ in\n   the number and types of files it can send to the server, it gives the\n\
    \   server control of the decision to accept the files, and it gives\n   servers\
    \ a chance to interact with browsers which do not support INPUT\n   TYPE \"file\"\
    .\n   The change to the HTML DTD is very simple, but very powerful.  It\n   enables\
    \ a much greater variety of services to be implemented via the\n   World-Wide\
    \ Web than is currently possible due to the lack of a file\n   submission facility.\
    \  This would be an extremely valuable addition to\n   the capabilities of the\
    \ World-Wide Web.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Larry Masinter\n   Xerox Palo Alto Research Center\n \
    \  3333 Coyote Hill Road\n   Palo Alto, CA 94304\n   Phone:  (415) 812-4365\n\
    \   Fax:    (415) 812-4333\n   EMail:   masinter@parc.xerox.com\n   Ernesto Nebel\n\
    \   XSoft, Xerox Corporation\n   10875 Rancho Bernardo Road, Suite 200\n   San\
    \ Diego, CA 92127-2116\n   Phone:  (619) 676-7817\n   Fax:    (619) 676-7865\n\
    \   EMail:   nebel@xsoft.sd.xerox.com\n"
- title: A. Media type registration for multipart/form-data
  contents:
  - 'A. Media type registration for multipart/form-data

    '
- title: 'Media Type name:'
  contents:
  - "Media Type name:\n multipart\n"
- title: 'Media subtype name:'
  contents:
  - "Media subtype name:\n form-data\n"
- title: 'Required parameters:'
  contents:
  - "Required parameters:\n none\n"
- title: 'Optional parameters:'
  contents:
  - "Optional parameters:\n none\n"
- title: 'Encoding considerations:'
  contents:
  - "Encoding considerations:\n No additional considerations other than as for other\
    \ multipart types.\n"
- title: 'Published specification:'
  contents:
  - "Published specification:\n RFC 1867\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n  The multipart/form-data type introduces no new security\n\
    \  considerations beyond what might occur with any of the enclosed\n  parts.\n"
- title: References
  contents:
  - 'References

    '
- title: '[RFC 1521] MIME (Multipurpose Internet Mail Extensions) Part One:'
  contents:
  - "[RFC 1521] MIME (Multipurpose Internet Mail Extensions) Part One:\n         \
    \  Mechanisms for Specifying and Describing the Format of\n           Internet\
    \ Message Bodies.  N. Borenstein & N. Freed.\n           September 1993.\n"
- title: '[RFC 1522] MIME (Multipurpose Internet Mail Extensions) Part Two:'
  contents:
  - "[RFC 1522] MIME (Multipurpose Internet Mail Extensions) Part Two:\n         \
    \  Message Header Extensions for Non-ASCII Text. K. Moore.\n           September\
    \ 1993.\n"
- title: '[RFC 1806] Communicating Presentation Information in Internet'
  contents:
  - "[RFC 1806] Communicating Presentation Information in Internet\n           Messages:\
    \ The Content-Disposition Header. R. Troost & S.\n           Dorner, June 1995.\n"
