- title: __initial_text__
  contents:
  - '                     XML-Signature XPath Filter 2.0

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   XML Signature recommends a standard means for specifying information\n\
    \   content to be digitally signed and for representing the resulting\n   digital\
    \ signatures in XML.  Some applications require the ability to\n   specify a subset\
    \ of a given XML document as the information content\n   to be signed.  The XML\
    \ Signature specification meets this requirement\n   with the XPath transform.\
    \  However, this transform can be difficult\n   to implement efficiently with\
    \ existing technologies.  This\n   specification defines a new XML Signature transform\
    \ to facilitate the\n   development of efficient document subsetting implementations\
    \ that\n   interoperate under similar performance profiles.\n   This document\
    \ is the W3C XML Signature XPath-Filter 2.0\n   Recommendation.  This document\
    \ has been reviewed by W3C Members and\n   other interested parties and has been\
    \ endorsed by the Director as a\n   W3C Recommendation.  It is a stable document\
    \ and may be used as\n   reference material or cited as a normative reference\
    \ from another\n   document.  W3C's role in making the Recommendation is to draw\n\
    \   attention to the specification and to promote its widespread\n   deployment.\
    \  This enhances the functionality and interoperability of\n   the Web.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  2\n       1.1.  Acknowledgements (Informative) . . . . . . . . .\
    \ . . .  4\n       1.2.  W3C Status . . . . . . . . . . . . . . . . . . . . .\
    \ .  4\n   2.  Terminology. . . . . . . . . . . . . . . . . . . . . . . . .  4\n\
    \   3.  Specification of Signature Filter Transform. . . . . . . . .  5\n    \
    \   3.1.  Algorithm Identifier . . . . . . . . . . . . . . . . .  5\n       3.2.\
    \  Syntax of Signature Filter Transform . . . . . . . . .  5\n       3.3.  Input\
    \ and Evaluation Context of Signature Filter\n             Transform. . . . .\
    \ . . . . . . . . . . . . . . . . . .  7\n       3.4.  Processing Model of Signature\
    \ Filter Transform . . . .  7\n   4.  Examples of Signature Filter Transform .\
    \ . . . . . . . . . .  9\n   5.  Normative References . . . . . . . . . . . .\
    \ . . . . . . . . 13\n   6.  Authors' Addresses . . . . . . . . . . . . . . .\
    \ . . . . . . 14\n   7.  Full Copyright Statement . . . . . . . . . . . . . .\
    \ . . . . 15\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The XML Recommendation [XML] specifies the syntax of a class\
    \ of\n   objects called XML documents.  The Namespaces in XML Recommendation\n\
    \   [XML-NS] specifies additional syntax and semantics for XML documents.\n  \
    \ The XML Signature Recommendation [XML-DSig] defines standard means\n   for specifying\
    \ information content to be digitally signed, including\n   the ability to select\
    \ a portion of an XML document to be signed using\n   an XPath transform.\n  \
    \ This specification describes a new signature filter transform that,\n   like\
    \ the XPath transform [XML-DSig, section 6.6.3], provides a method\n   for computing\
    \ a portion of a document to be signed.  In the interest\n   of simplifying the\
    \ creation of efficient implementations, the\n   architecture of this transform\
    \ is not based on evaluating an [XPath]\n   expression for every node of the XML\
    \ parse tree (as defined by the\n   [XPath] data model).  Instead, a sequence\
    \ of XPath expressions is\n   used to select the roots of document subtrees --\
    \ location sets, in\n   the language of [XPointer] -- which are combined using\
    \ set\n   intersection, subtraction and union, and then used to filter the\n \
    \  input node-set.  The principal differences from the XPath transform\n   are:\n\
    \      *  A sequence of XPath operations can be executed in a single\n       \
    \  transform, allowing complex filters to be more easily expressed\n         and\
    \ optimized.\n      *  The XPath expressions are evaluated against the input document\n\
    \         resulting in a set of nodes, instead of being used as a boolean\n  \
    \       test against each node of the input node-set.\n      *  To increase efficiency,\
    \ the expansion of a given node to\n         include all nodes having the given\
    \ node as an ancestor is now\n         implicit so it can be performed by faster\
    \ means than the\n         evaluation of an XPath expression for each document\
    \ node.\n      *  The resulting node-sets can be combined using the three\n  \
    \       fundamental set operations (intersection, subtraction, and\n         union),\
    \ and then applied as a filter against the input node-\n         set, allowing\
    \ operations such as signing an entire document\n         except for a specified\
    \ subset, to be expressed more clearly and\n         efficiently.\n   As with\
    \ the original XPath transform, the primary purpose of this\n   transform is to\
    \ ensure that only specifically defined changes to the\n   input XML document\
    \ are permitted after the signature is affixed.\n   This can be done by excluding\
    \ precisely those nodes that are allowed\n   to change once the signature is affixed,\
    \ and including all other\n   input nodes in the output.  It is the responsibility\
    \ of the signature\n   filter transform author to ensure that nodes are not excluded\
    \ which\n   could affect the interpretation of the transform output in the\n \
    \  application context.\n   Consider the motivating scenario where an application\
    \ wishes to affix\n   two enveloped signatures to the document; any other change\
    \ to the\n   document must cause the signatures to be invalid.  When the\n   application\
    \ creates the first signature that signature is\n   automatically omitted from\
    \ its own digest calculations.  However, it\n   will also be necessary to exclude\
    \ the subsequent (second) signature\n   element from the digest calculations of\
    \ the first signature.  This\n   specification can be used to efficiently satisfy\
    \ this requirement\n   using the set subtraction operation.\n   This transform\
    \ also supports the ability to specify a set of nodes\n   that will be included\
    \ in a signature, with all non-specified nodes\n   being excluded.  This formulation\
    \ is useful for isolating a portion\n   of a document, such as a chapter of a\
    \ document, or a payload in a\n   protocol message, and can be expressed using\
    \ the set intersection\n   operation.\n   Complete familiarity with the first\
    \ XML Signature XPath Transform\n   [XML-DSig, section 6.6.3] is required.\n \
    \  NOTE: Since XPath Filter 2.0 depends on details of XPath, be sure to\n   take\
    \ into account the XPath Errata at\n   <http://www.w3.org/1999/11/REC-xpath-19991116-errata>.\n"
- title: 1.1.  Acknowledgements (Informative)
  contents:
  - "1.1.  Acknowledgements (Informative)\n   The following people provided valuable\
    \ feedback that improved the\n   quality of this specification:\n      *  Christian\
    \ Geuer-Pollmann, Universitat Siegen\n      *  Donald Eastlake, 3rd, Motorola\n\
    \      *  Gregor Karlinger, IAK TU Graz\n      *  Aleksey Sanin\n"
- title: 1.2.  W3C Status
  contents:
  - "1.2.  W3C Status\n   The World Wide Web Consortium Recommendation corresponding\
    \ to this\n   RFC is at:\n      http://www.w3.org/TR/xmldsig-filter2/\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in BCP\
    \ 14, RFC 2119\n   [Keywords].\n   The XPath 1.0 Recommendation [XPath] defines\
    \ the term node-set as\n   \"(an unordered collection of nodes without duplicates)\"\
    \ and specifies\n   a data model for representing an input XML document as a set\
    \ of nodes\n   of various types (element, attribute, namespace, text, comment,\n\
    \   processing instruction, and root).\n   An input document is the document that\
    \ contains all the nodes\n   available to processing by this transform.  A document\
    \ subset is a\n   portion of an XML document indicated by an XPath node-set, which\
    \ may\n   not include all of the nodes in the document.  For example, the input\n\
    \   node-set is a collection of XPath nodes from the input document that\n   is\
    \ passed as a parameter to this transform.  A subtree rooted by a\n   given node\
    \ is a document subset containing the given node and every\n   node having the\
    \ given node as an ancestor.  Subtree expansion is the\n   process of expanding\
    \ a node-set to include all subtrees rooted at any\n   node in the node-set. \
    \ For example, the subtree expansion of a node-\n   set consisting of just a single\
    \ element node would be a node-set\n   containing that element, its attribute\
    \ nodes, namespace nodes, and\n   all its descendants including their attribute\
    \ nodes and namespaces\n   nodes.\n   The XML Signature Recommendation [XML-DSig]\
    \ defines a reference as a\n   sequence of steps performed to obtain an octet\
    \ stream to be digitally\n   signed.  A transform is an identified algorithm to\
    \ be used as a step\n   in the reference processing model.  A transform takes\
    \ an octet stream\n   or XPath node-set as input, and it produces an octet stream\
    \ or XPath\n   node-set as output (the reference processing model automatically\n\
    \   converts the final output to an octet stream if it is an XPath node-\n   set).\n"
- title: 3.  Specification of Signature Filter Transform
  contents:
  - "3.  Specification of Signature Filter Transform\n   The transform operates by\
    \ computing a node-set that is used to filter\n   the input node-set: The output\
    \ node-set consists of only those nodes\n   in both the input node-set and the\
    \ filter node-set.  In other words,\n   the output node-set is the intersection\
    \ of the input node-set and the\n   computed filter node-set.\n   The filter node-set\
    \ is computed by evaluating a sequence of XPath\n   expressions and combining\
    \ their results.  A node-set is initially\n   computed containing the entire input\
    \ document.  In sequence, each\n   XPath expression is then evaluated, subtree-expanded,\
    \ and then used\n   to transform the filter node-set according to a specified\
    \ set\n   operation; intersection, subtraction, or union.  After all XPaths\n\
    \   have been applied, the resulting node-set is used as the filter\n   node-set.\n"
- title: 3.1.  Algorithm Identifier
  contents:
  - "3.1.  Algorithm Identifier\n   The XML Signature Recommendation [XML-DSig] uses\
    \ a [URI] to identify\n   each algorithm to be performed when creating or validating\
    \ a\n   signature.  The signature filter transform is identified as follows:\n\
    \   Algorithm Identifier\n        http://www.w3.org/2002/06/xmldsig-filter2\n"
- title: 3.2.  Syntax of Signature Filter Transform
  contents:
  - "3.2.  Syntax of Signature Filter Transform\n   The signature filter transform\
    \ shall be represented by a sequence of\n   one or more elements named XPath.\
    \  The content of XPath is character\n   data containing an XPath expression.\
    \  The XPath has an attribute\n   named Filter whose possible values are intersect,\
    \ subtract, and\n   union.  The Filter attribute indicates the set operation that\
    \ is\n   performed with the resulting node-set when computing the filter\n   node-set.\
    \  The following is an example of markup for a signature\n   filter that signs\
    \ the entire input node-set except for elements with\n   identifier foo and bar\
    \ (and all nodes with one of those elements as\n   an ancestor):\n <XPath Filter=\"\
    subtract\"\n  xmlns=\"http://www.w3.org/2002/06/xmldsig-filter2\">\n    id(\"\
    foo bar\")\n </XPath>\n Schema Definition:\n <?xml version=\"1.0\" encoding=\"\
    utf-8\"?>\n <!DOCTYPE schema\n  PUBLIC \"-//W3C//DTD XMLSchema 200102//EN\"\n\
    \         \"http://www.w3.org/2001/XMLSchema.dtd\"\n [\n   <!ATTLIST schema\n\
    \     xmlns:xf CDATA #FIXED 'http://www.w3.org/2002/06/xmldsig-filter2'>\n   <!ENTITY\
    \ xf 'http://www.w3.org/2002/06/xmldsig-filter2'>\n   <!ENTITY % p ''>\n   <!ENTITY\
    \ % s ''>\n  ]>\n <schema xmlns=\"http://www.w3.org/2001/XMLSchema\"\n       \
    \  xmlns:xf=\"http://www.w3.org/2002/06/xmldsig-filter2\"\n         targetNamespace=\"\
    http://www.w3.org/2002/06/xmldsig-filter2\"\n         version=\"0.1\" elementFormDefault=\"\
    qualified\">\n <element name=\"XPath\"\n          type=\"xf:XPathType\"/>\n <complexType\
    \ name=\"XPathType\">\n  <simpleContent>\n    <extension base=\"string\">\n  \
    \    <attribute name=\"Filter\">\n         <simpleType>\n           <restriction\
    \ base=\"string\">\n             <enumeration value=\"intersect\"/>\n        \
    \     <enumeration value=\"subtract\"/>\n             <enumeration value=\"union\"\
    />\n           </restriction>\n         </simpleType>\n      </attribute>\n  \
    \  </extension>\n  </simpleContent>\n </complexType>\n </schema>\n DTD:\n <!ELEMENT\
    \ XPath    (#PCDATA) >\n <!ATTLIST XPath\n    Filter         (intersect|subtract|union)\
    \ #REQUIRED >\n"
- title: 3.3.  Input and Evaluation Context of Signature Filter Transform
  contents:
  - "3.3.  Input and Evaluation Context of Signature Filter Transform\n   The input\
    \ required by this transform is an XPath node-set over the\n   input document.\
    \  If the input document is an octet stream, then the\n   application MUST convert\
    \ the octet stream to an XPath node-set that\n   contains all of the document\
    \ nodes (including comment nodes).  The\n   evaluation context for the XPath expressions\
    \ in the filter transform\n   will be:\n      *  A context node equal to the root\
    \ node of the document whose\n         node-set was provided as input to this\
    \ transform.  The root\n         node is the parent of the document element and\
    \ any comment and\n         processing instruction nodes outside of the document\
    \ element.\n      *  A context position, initialized to 1.\n      *  A context\
    \ size, initialized to 1.\n      *  A library of functions equal to the function\
    \ set defined in\n         [XPath] plus a function named here().\n      *  A set\
    \ of variable bindings.  No means for initializing these is\n         defined.\
    \  Thus, the set of variable bindings used when\n         evaluating the XPath\
    \ expression is empty, and use of a variable\n         reference in the XPath\
    \ expression results in an error.\n      *  The set of namespace declarations\
    \ in scope for the XPath\n         element.\n   The function here() is defined\
    \ as follows:\n   Function: node-set here()\n      The here() function returns\
    \ a node-set containing the attribute or\n      processing instruction node or\
    \ the parent element of the text node\n      that directly bears the XPath expression.\
    \  In this transform, this\n      will be the XPath element.  This expression\
    \ results in an error if\n      the containing XPath expression does not appear\
    \ in the same XML\n      document against which the XPath expression is being\
    \ evaluated.\n"
- title: 3.4.  Processing Model of Signature Filter Transform
  contents:
  - "3.4.  Processing Model of Signature Filter Transform\n   Using the aforementioned\
    \ evaluation context, the signature filter\n   transform evaluates the XPath expressions\
    \ appearing in the character\n   content of the XPath elements and uses these\
    \ to compute a filter\n   node-set F, which is then used to filter the input node-set\
    \ I\n   resulting in an output node-set O:\n      *  Initialize the filter node-set\
    \ F to consist of all nodes in the\n         input document.\n      *  Iterate\
    \ through each XPath expression, X, in sequence, and\n         update the filter\
    \ node-set F as follows:\n         o  Evaluate the XPath expression X.  The result\
    \ is a node-set\n            S.\n         o  Compute the set S' consisting of\
    \ all nodes in the input\n            document that are either present in S or\
    \ that have an\n            ancestor in S.  This is equal to the union of all\
    \ the\n            document subtrees rooted by a node in S.\n         o  If the\
    \ Filter attribute value is intersect, then compute the\n            intersection\
    \ of the selected subtrees, S', with the filter\n            node-set F.  The\
    \ result will include only those nodes that\n            are in both the filter\
    \ node-set and the selected subtrees:\n            F' = F INTERSECT S'.\n    \
    \     o  If the Filter attribute value is subtract, then compute the\n       \
    \     subtraction of the selected subtrees, S', from the filter\n            node-set\
    \ F.  The result will include only those nodes that\n            are in the filter\
    \ node-set, but not the selected subtrees:\n            F' = F - S'.\n       \
    \  o  Otherwise, if the Filter attribute value is union, then\n            compute\
    \ the union the selected subtrees, S', with the filter\n            node-set F.\
    \  The result will include all those nodes that\n            are in either the\
    \ filter node-set, the selected subtrees, or\n            both: F' = F UNION S'.\n\
    \         o  Update the filter node-set F to be the new node-set F'.\n      *\
    \  Finally, after applying all the XPath expressions, compute the\n         output\
    \ node-set O to be the intersection of the computed filter\n         node-set,\
    \ F, with the input node-set, I.  The result will\n         include all nodes\
    \ from the input node-set that are also in the\n         filter node-set: O =\
    \ I INTERSECT F.\n      *  An empty input node-set will always result in an empty\
    \ output\n         node-set.\n   In this processing model, the conversion from\
    \ a subtree\n   interpretation of the XPath expressions to a node-set containing\
    \ all\n   nodes that must be used during the set operation, along with actual\n\
    \   performance of the set operation, is described explicitly.\n   Implementors\
    \ SHOULD observe that it is possible to compute the\n   effective result of this\
    \ operation in a single pass through the input\n   document without performing\
    \ subtree expansion or any set operations:\n      *  For each XPath expression\
    \ X, in sequence, evaluate the\n         expression and store the resulting node-set,\
    \ S, along with the\n         associated set operation.\n      *  Prepend a node-set\
    \ consisting of just the document node, along\n         with the operation union.\n\
    \      *  Create a new, empty filter node-set.\n      *  Process each node in\
    \ the input node-set document, adding each\n         node to the output node-set\
    \ F if a flag Z is true.  The flag is\n         computed as follows:\n       \
    \  o  Z is true if and only if the node is present in any\n            subtree-expanded\
    \ union node-set and all subsequent subtree-\n            expanded intersect node-sets\
    \ but no subsequent subtree-\n            expanded subtract node-sets, or false\
    \ otherwise.  If there\n            are no subsequent intersect or subtract node-sets,\
    \ then that\n            part of the test is automatically passed.\n         o\
    \  Presence in a subtree-expanded node-set can be efficiently\n            determined\
    \ without actually expanding the node-set, by\n            simply maintaining\
    \ a stack or count that identifies whether\n            any nodes from that node-set\
    \ are an ancestor of the node\n            being processed.\n   Implementers MAY\
    \ further observe that, if this transform is followed\n   by a canonicalization\
    \ operation (e.g., [XML-C14N]), the described\n   filter computation can be efficiently\
    \ commingled with the document-\n   order canonicalization processing.\n"
- title: 4.  Examples of Signature Filter Transform
  contents:
  - "4.  Examples of Signature Filter Transform\n   The example below illustrates\
    \ one way to create an enveloped\n   signature with the signature filter transform.\
    \  The function here()\n   identifies the XPath element, and the subsequent location\
    \ path\n   obtains the nearest ancestor Signature element.  Due to the subtract\n\
    \   value of the Filter attribute, the output of the signature filter\n   transform\
    \ is a node-set containing every node from the input node-set\n   except the nodes\
    \ in the subtree rooted by the Signature element\n   containing the example signature\
    \ filter transform below.\n   <XPath Filter=\"subtract\"\n    xmlns=\"http://www.w3.org/2002/06/xmldsig-filter2\"\
    \n    xmlns:dsig=\"http://www.w3.org/2000/09/xmldsig#\">\n      here()/ancestor::dsig:Signature[1]\
    \ </XPath>\n   A suitable signature reference URI to use with this subtract filter\n\
    \   would be URI=\"\" (the entire signature document, without comments),\n   URI=\"\
    #xpointer(/)\" (the entire signature document, with comments) or\n   any same-document\
    \ reference that includes the signature itself.\n   An example of an intersect\
    \ filter is a signature that co-signs\n   another signature.  In this example,\
    \ a Signature element identified\n   by PrimaryBorrowSig must be signed.  The\
    \ XPath expression obtains the\n   element node, and the transform expands the\
    \ output node-set to\n   contain all nodes from the input node-set that are also\
    \ in the\n   subtree rooted by the element node.\n   <XPath Filter=\"intersect\"\
    \n    xmlns=\"http://www.w3.org/2002/06/xmldsig-filter2\">\n      id(\"PrimaryBorrowerSig\"\
    ) </XPath>\n   This type of intersect filter is useful for efficiently signing\n\
    \   subsets of a document, whether this is the same document as the\n   signature\
    \ or an external document.  For example, if the signature\n   reference URI is\
    \ URI=\"document.xml\", then this document will be\n   automatically parsed and\
    \ just the identified element and its\n   descendants will be signed.\n   Union\
    \ filters, by themselves are of no particular use: The initial\n   filter node-set\
    \ consists of the entire input document; any union with\n   this will have no\
    \ effect, so the output of the transform will be\n   identical to the input. \
    \ The union operation is intended to follow a\n   subtract operation, to allow\
    \ a subtree to be removed, with the\n   exception of a lower subtree which is\
    \ still included in the output.\n   Consider the following document which contains\
    \ a same-document\n   enveloped signature reference with an XPath filter containing\
    \ three\n   XPath operations:\n   <Document>\n     <ToBeSigned>\n       <!-- comment\
    \ -->\n       <Data />\n       <NotToBeSigned>\n         <ReallyToBeSigned>\n\
    \           <!-- comment -->\n           <Data />\n         </ReallyToBeSigned>\n\
    \       </NotToBeSigned>\n     </ToBeSigned>\n     <ToBeSigned>\n       <Data\
    \ />\n       <NotToBeSigned>\n         <Data />\n       </NotToBeSigned>\n   \
    \  </ToBeSigned>\n     <dsig:Signature\n      xmlns:dsig=\"http://www.w3.org/2000/09/xmldsig#\"\
    \n      xmlns:dsig-xpath=\"http://www.w3.org/2002/06/xmldsig-filter2\">\n    \
    \   <dsig:SignedInfo>\n         ...\n         <dsig:Reference URI=\"\">\n    \
    \       <dsig:Transforms>\n             <dsig:Transform\n              Algorithm=\"\
    http://www.w3.org/2002/06/xmldsig-filter2\">\n               <dsig-xpath:XPath\n\
    \                Filter=\"intersect\"> //ToBeSigned </dsig-xpath:XPath>\n    \
    \           <dsig-xpath:XPath\n                Filter=\"subtract\"> //NotToBeSigned\
    \ </dsig-xpath:XPath>\n               <dsig-xpath:XPath\n                Filter=\"\
    union\"> //ReallyToBeSigned </dsig-xpath:XPath>\n             </dsig:Transform>\n\
    \           </dsig:Transforms>\n           ...\n         </dsig:Reference>\n \
    \      </dsig:SignedInfo>\n       ...\n     </dsig:Signature> </Document>\n  \
    \ The intersect operation computes the intersection of the XPath-\n   selected\
    \ subtrees with the filter node-set.  In this case, the filter\n   node-set initially\
    \ contains the entire input document, and the XPath\n   expression evaluates to\
    \ the two ToBeSigned elements; these are\n   expanded to include all their descendents\
    \ and intersected with the\n   filter node-set, resulting in the following:\n\
    \     <ToBeSigned>\n       <!-- comment -->\n       <Data />\n       <NotToBeSigned>\n\
    \         <ReallyToBeSigned>\n           <!-- comment -->\n           <Data />\n\
    \         </ReallyToBeSigned>\n       </NotToBeSigned>\n     </ToBeSigned><ToBeSigned>\n\
    \       <Data />\n       <NotToBeSigned>\n         <Data />\n       </NotToBeSigned>\n\
    \     </ToBeSigned>\n   The subtract filter computes the subtraction of the XPath-selected\n\
    \   subtrees from the filter node-set.  In this case, the XPath\n   expression\
    \ evaluates to the two NotToBeSigned elements; these are\n   expanded to include\
    \ all their descendents and subtracted from the\n   filter node-set:\n   <ToBeSigned>\n\
    \       <!-- comment -->\n       <Data />\n     </ToBeSigned><ToBeSigned>\n  \
    \     <Data />\n   </ToBeSigned>\n   Next, the union filter computes the union\
    \ of the XPath-selected\n   subtrees with the filter node-set.  In this case,\
    \ the XPath\n   expression evaluates to the ReallyToBeSigned element; this is\n\
    \   expanded to include all its descendents and added to the filter\n   node-set:\n\
    \   <ToBeSigned>\n       <!-- comment -->\n       <Data />\n       <ReallyToBeSigned>\n\
    \           <!-- comment -->\n           <Data />\n         </ReallyToBeSigned>\n\
    \     </ToBeSigned><ToBeSigned>\n       <Data />\n   </ToBeSigned>\n   Finally,\
    \ this resulting filter node-set is used to transform the\n   input node-set.\
    \  In this example, the input node-set is the entire\n   document, with comments\
    \ removed.  The transformed node-set will thus\n   be all those nodes from the\
    \ input document, less comments, that are\n   also in the filter node-set:\n \
    \  <ToBeSigned>\n       <Data />\n       <ReallyToBeSigned>\n           <Data\
    \ />\n         </ReallyToBeSigned>\n     </ToBeSigned><ToBeSigned>\n       <Data\
    \ />\n   </ToBeSigned>\n   Note that the result contains no nodes that were not\
    \ in the input\n   node-set.  Although the filter node-set included comments,\
    \ these were\n   not present in the input node-set so they are not present in\
    \ the\n   output node-set.\n   This signature filter does not provide any increased\
    \ capability over\n   the original XPath transform.  For example, this reference\
    \ could be\n   replicated using the XPath transform as follows.\n   <dsig:Reference\
    \ URI=\"\">\n     <dsig:Transforms>\n       <dsig:Transform\n        Algorithm=\"\
    http://www.w3.org/TR/1999/REC-xpath-19991116\">\n         <dsig:XPath>\n     \
    \      (ancestor-or-self::ToBeSigned and\n            not (ancestor-or-self::NotToBeSigned))\n\
    \           or ancestor-or-self::ReallyToBeSigned\n         </dsig:XPath>\n  \
    \     </dsig:Transform>\n     </dsig:Transforms>\n     ...  </dsig:Reference>\n\
    \   The advantage of the signature filter transform over the XPath\n   transform\
    \ is that the latter requires evaluation of a potentially-\n   complex expression\
    \ against every node in the input set, which has\n   proved costly in practice\
    \ for many useful operations.  This\n   specification's filter requires evaluation\
    \ of simple XPath\n   expressions and then the execution of some basic set operations\
    \ or\n   their equivalent, which can be implemented significantly more\n   efficiently.\n"
- title: 5.  Normative References
  contents:
  - "5.  Normative References\n   [Keywords]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [URI]       Berners-Lee, T., Fielding, R. and L. Masinter, \"Uniform\n\
    \               Resource Identifiers (URI): Generic Syntax\", RFC 2396,\n    \
    \           August 1998.\n   [XML]       \"Extensible Markup Language (XML) 1.0\
    \ (Second Edition)\",\n               T.  Bray, E.  Maler, J. Paoli, and C. M.\
    \ Sperberg-\n               McQueen.  W3C Recommendation, October 2000.  Available\
    \ at\n               <http://www.w3.org/TR/2000/REC-xml-20001006>.\n   [XML-C14N]\
    \  Boyer, J., \"Canonical XML\", RFC 3076, March 2001.  Also a\n             \
    \  W3C Recommendation available at\n               <http://www.w3.org/TR/2001/REC-xml-c14n-20010315>.\n\
    \   [XML-DSig]  Eastlake, J., Reagle, J. and D. Solo, \"XML-Signature\n      \
    \         Syntax and Processing\", RFC 3275, March 2002.  Also a W3C\n       \
    \        Recommendation available at\n               <http://www.w3.org/TR/2002/REC-xmldsig-core-20020212/>.\n\
    \   [XML-NS]    \"Namespaces in XML\", T. Bray, D. Hollander, and A.\n       \
    \        Layman.  W3C Recommendation, January 1999.  Available at\n          \
    \     <http://www.w3.org/TR/1999/REC-xml-names-19990114/>.\n   [XPath]     \"\
    XML Path Language (XPath) Version 1.0\", J. Clark and S.\n               DeRose.\
    \  W3C Recommendation, November 1999.  Available at\n               <http://www.w3.org/TR/1999/REC-xpath-19991116>.\
    \ (Note\n               also XPath Errata at <http://www.w3.org/1999/11/REC-\n\
    \               xpath-19991116-errata>.)\n   [XPointer]  \"XML Pointer Language\
    \ (XPointer)\", S. DeRose, R. Daniel,\n               and E. Maler.  W3C Candidate\
    \ Recommendation, January\n               2001.  Available at <http://www.w3.org/TR/2001/CR-xptr-\n\
    \               20010911/>.\n"
- title: 6.  Authors' Addresses
  contents:
  - "6.  Authors' Addresses\n   John Boyer\n   PureEdge Solutions Inc.\n   4396 West\
    \ Saanich Rd.\n   Victoria, BC, Canada V8Z 3E9\n   Phone: +1-888-517-2675\n  \
    \ EMail: jboyer@PureEdge.com\n   Merlin Hughes\n   Betrusted, Inc.\n   11000 Broken\
    \ Land Parkway Suite 900\n   Columbia, MD 21044\n   Phone: +1-443-367-7000\n \
    \  EMail: Merlin.Hughes@betrusted.com\n   Joseph M. Reagle Jr., W3C\n   Massachusetts\
    \ Institute of Technology\n   Laboratory for Computer Science\n   NE43-350, 545\
    \ Technology Square\n   Cambridge, MA 02139\n   Phone: +1.617.258.7621\n   EMail:\
    \ reagle@mit.edu\n"
- title: 7.  Full Copyright Statement
  contents:
  - "7.  Full Copyright Statement\n   Copyright (C) The Internet Society (2003). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assignees.\n\
    \   This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
