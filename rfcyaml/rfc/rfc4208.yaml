- contents:
  - "           Generalized Multiprotocol Label Switching (GMPLS)\n                     User-Network
    Interface (UNI):\n      Resource ReserVation Protocol-Traffic Engineering (RSVP-TE)\n
    \                    Support for the Overlay Model\n"
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   Generalized Multiprotocol Label Switching (GMPLS) defines both\n
    \  routing and signaling protocols for the creation of Label Switched\n   Paths
    (LSPs) in various switching technologies.  These protocols can\n   be used to
    support a number of deployment scenarios.  This memo\n   addresses the application
    of GMPLS to the overlay model.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n
    \     1.1. GMPLS User-Network Interface (GMPLS UNI) ...................4\n   2.
    Addressing ......................................................5\n   3. ERO
    Processing ..................................................6\n      3.1. Path
    Message without ERO ...................................6\n      3.2. Path Message
    with ERO ......................................6\n      3.3. Explicit Label Control
    .....................................7\n   4. RRO Processing ..................................................7\n
    \  5. Notification ....................................................7\n   6.
    Connection Deletion .............................................8\n      6.1.
    Alarm-Free Connection Deletion .............................8\n      6.2. Connection
    Deletion with PathErr ...........................8\n   7. VPN Connections .................................................9\n
    \  8. Security Considerations ........................................10\n   9.
    Acknowledgments ................................................10\n   10. References
    ....................................................10\n      10.1. Normative
    References .....................................10\n      10.2. Informational
    References .................................10\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Generalized Multiprotocol Label Switching (GMPLS) defines
    both\n   routing and signaling protocols for the creation of Label Switched\n
    \  Paths (LSPs) in various transport technologies.  These protocols can\n   be
    used to support a number of deployment scenarios.  In a peer\n   model, edge-nodes
    support both a routing and a signaling protocol.\n   The protocol interactions
    between an edge-node and a core-node are\n   the same as between two core-nodes.
    \ In the overlay model, the core-\n   nodes act more as a closed system.  The
    edge-nodes do not participate\n   in the routing protocol instance that runs among
    the core nodes; in\n   particular, the edge-nodes are unaware of the topology
    of the core-\n   nodes.  There may, however, be a routing protocol interaction
    between\n   a core-node and an edge-node for the exchange of reachability\n   information
    to other edge-nodes.\n     Overlay                                                  Overlay\n
    \    Network       +----------------------------------+       Network\n   +---------+
    \    |                                  |     +---------+\n   |  +----+ |     |
    \ +-----+    +-----+    +-----+   |     | +----+  |\n   |  |    | |     |  |     |
    \   |     |    |     |   |     | |    |  |\n   | -+ EN +-+-----+--+ CN  +----+
    CN  +----+  CN +---+-----+-+ EN +- |\n   |  |    | |  +--+--|     |    |     |
    \   |     |   |     | |    |  |\n   |  +----+ |  |  |  +--+--+    +--+--+    +--+--+
    \  |     | +----+  |\n   |         |  |  |     |          |          |      |
    \    |         |\n   +---------+  |  |     |          |          |      |     +---------+\n
    \               |  |     |          |          |      |\n   +---------+  |  |
    \    |          |          |      |     +---------+\n   |         |  |  |  +--+--+
    \      |       +--+--+   |     |         |\n   |  +----+ |  |  |  |     |       +-------+
    \    |   |     | +----+  |\n   |  |    +-+--+  |  | CN  +---------------+ CN  |
    \  |     | |    |  |\n   | -+ EN +-+-----+--+     |               |     +---+-----+-+
    EN +- |\n   |  |    | |     |  +-----+               +-----+   |     | |    |
    \ |\n   |  +----+ |     |                                  |     | +----+  |\n
    \  |         |     +----------------------------------+     |         |\n   +---------+
    \               Core Network                  +---------+\n     Overlay                                                  Overlay\n
    \    Network                                                  Network\n                        Legend:
    \  EN  -  Edge Node\n                                  CN  -  Core Node\n                    Figure
    1:  Overlay Reference Model\n   Figure 1 shows a reference network.  The core
    network is represented\n   by the large box in the center.  It contains five core-nodes
    marked\n   'CN'.  The four boxes around the edge marked \"Overlay Network\"\n
    \  represent four islands of a single overlay network.  Only the nodes\n   of
    this network with TE links into the core network are shown.  These\n   nodes are
    called edge-nodes; the terminology is in respect to the\n   core network, not
    the overlay network.  Note that each box marked\n   \"Overlay Network\" could
    contain many other nodes.  Such nodes are not\n   shown; they do not participate
    directly in the signaling described in\n   this document.  Only the edge-nodes
    can signal to set up links across\n   the core to other edge-nodes.\n   How a
    link between edge-nodes is requested and triggered is out of\n   the scope of
    this document, as is precisely how that link is used by\n   the Overlay Network.
    \ One possibility is that the edge-nodes will\n   inform the other nodes of the
    overlay network of the existence of the\n   link, possibly using a forwarding
    adjacency as described in\n   [MPLS-HIER].  Note that this contrasts with a forwarding
    adjacency\n   that is provided by the core network as a link between core-nodes.\n
    \  In the overlay model, there may be restrictions on what may be\n   signaled
    between an edge-node and a core-node.  This memo addresses\n   the application
    of GMPLS to the overlay model.  Specifically, it\n   addresses RSVP-TE procedures
    between an edge-node and a core-node in\n   the overlay model.  All signaling
    procedures are identical to the\n   GMPLS extensions specified in [RFC3473], except
    as noted in this\n   document.\n   This document primarily addresses interactions
    between an edge-node\n   and it's adjacent (at the data plane) core-node; out-of-band
    and\n   non-adjacent signaling capabilities may mean that signaling messages\n
    \  are delivered on a longer path.  Except where noted, the term core-\n   node
    refers to the node immediately adjacent to an edge-node across a\n   particular
    data plane interface.  The term core-nodes, however,\n   refers to all nodes in
    the core.\n   Realization of a single or multiple instance of the UNI is\n   implementation
    dependent at both the CN and EN so long as it meets\n   the functional requirements
    for robustness, security, and privacy\n   detailed in Section 7.\n   The key words
    \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\",
    \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document
    are to be interpreted as described in [RFC2119].\n   Readers are assumed to be
    familiar with the terminology introduced in\n   [RFC3031], [GMPLS-ARCH], and [RFC3471].\n"
  - contents:
    - "1.1.  GMPLS User-Network Interface (GMPLS UNI)\n   One can apply the GMPLS
      Overlay model at the User-Network Interface\n   (UNI) reference point defined
      in the Automatically Switched Optical\n   Network (ASON) [G.8080].  Consider
      the case where the 'Core Network'\n   in Figure 1 is a Service Provider network,
      and the Edge Nodes are\n   'user' devices.  The interface between an EN and
      a CN is the UNI\n   reference point, and to support the ASON model, one must
      define\n   signaling across the UNI.\n   The extensions described in this memo
      provide mechanisms for UNI\n   signaling that are compatible with GMPLS signaling
      [RFC3471,\n   RFC3473].  Moreover, these mechanisms for UNI signaling are in
      line\n   with the RSVP model; namely, there is a single end-to-end RSVP\n   session
      for the user connection.  The first and last hops constitute\n   the UNI, and
      the RSVP session carries the user parameters end-to-end.\n   This obviates the
      need to map (or carry) user parameters to (in) the\n   format expected by the
      network-to-network interface (NNI) used within\n   the Service Provider network.
      \ This in turn means that the UNI and\n   NNI can be independent of one another,
      which is a requirement of the\n   ASON architecture.  However, in the case that
      the UNI and NNI are\n   both GMPLS RSVP-based, the methodology specified in
      this memo allows\n   for a single RSVP session to instantiate both UNI and NNI
      signaling,\n   if so desired, and if allowed by Service Provider policy.\n"
    title: 1.1.  GMPLS User-Network Interface (GMPLS UNI)
  title: 1.  Introduction
- contents:
  - "2.  Addressing\n   Addresses for edge-nodes in the overlay model are drawn from
    the same\n   address space as the edge-nodes use to address their adjacent core-\n
    \  nodes.  This may be the same address space as used by the core-nodes\n   to
    communicate among themselves, or it may be a VPN space supported\n   by the core-nodes
    as an overlay.\n   To be more specific, an edge-node and its attached core-node
    must\n   share the same address space that is used by GMPLS to signal between\n
    \  the edge-nodes across the core network.  A set of <edge-node, core-\n   node>
    tuples share the same address space if the edge-nodes in the\n   set could establish
    LSPs (through the core-nodes) among themselves\n   without address mapping or
    translation (note that edge-nodes in the\n   set may be a subset of all the edge-nodes).
    \ The address space used\n   by the core-nodes to communicate among themselves
    may, but need not,\n   be shared with the address space used by any of the <edge-node,\n
    \  core-node> tuples.  This does not imply a mandatory 1:1 mapping\n   between
    a set of LSPs and a given addressing space.\n   When multiple overlay networks
    are supported by a single core\n   network, one or more address spaces may be
    used according to privacy\n   requirements.  This may be achieved without varying
    the core-node\n   addresses since it is the  <edge-node, core-node> tuple that\n
    \  constitutes address space membership.\n   An edge-node is identified by either
    a single IP address representing\n   its Node-ID, or by one or more numbered TE
    links that connect the\n   edge-node to the core-nodes.  Core-nodes are assumed
    to be ignorant\n   of any other addresses associated with an edge-node (i.e.,
    addresses\n   that are not used in signaling connections through the GMPLS core).\n
    \  An edge-node need only know its own address, an address of the\n   adjacent
    core-node, and know (or be able to resolve) the address of\n   any other edge-node
    to which it wishes to connect, as well as (of\n   course) the addresses used in
    the overlay network island of which it\n   is a part.\n   A core-node need only
    know (and track) the addresses on interfaces\n   between that core-node and its
    attached edge-nodes, as well as the\n   Node IDs of those edge-nodes.  In addition,
    a core-node needs to know\n   the interface addresses and Node IDs of other edge-nodes
    to which an\n   attached edge-node is permitted to connect.\n   When forming a
    SENDER_TEMPLATE, the ingress edge-node includes either\n   its Node-ID or the
    address of one of its numbered TE links.  In the\n   latter case the connection
    will only be made over this interface.\n   When forming a SESSION_OBJECT, the
    ingress edge-node includes either\n   the Node-ID of the egress edge-device or
    the address of one of the\n   egress' numbered TE links.  In the latter case the
    connection will\n   only be made over this interface.  The Extended_Tunnel_ID
    of the\n   SESSION Object is set to either zero or to an address of the ingress\n
    \  edge-device.\n   Links may be either numbered or unnumbered.  Further, links
    may be\n   bundled or unbundled.  See [GMPLS-ARCH], [RFC3471], [BUNDLE], and\n
    \  [RFC3477].\n"
  title: 2.  Addressing
- contents:
  - "3. ERO Processing\n   An edge-node MAY include an ERO.  A core-node MAY reject
    a Path\n   message that contains an ERO.  Such behavior is controlled by\n   (hopefully
    consistent) configuration.  If a core-node rejects a Path\n   message due to the
    presence of an ERO, it SHOULD return a PathErr\n   message with an error code
    of \"Unknown object class\" toward the\n   sender as described in [RFC3209].  This
    causes the path setup to\n   fail.\n   Further, a core-node MAY accept EROs that
    only include the ingress\n   edge-node, the ingress core-node, the egress core-node,
    and the\n   egress edge-node.  This is to support explicit label control on the\n
    \  edge-node interface; see below.  If a core-node rejects a Path\n   message
    due to the presence of an ERO that is not of the permitted\n   format, it SHOULD
    return a PathErr message with an error code of Bad\n   Explicit Route Object as
    defined in [RFC3209].\n"
  - contents:
    - "3.1. Path Message without ERO\n   When a core-node receives a Path message
      from an edge-node that\n   contains no ERO, it MUST calculate a route to the
      destination and\n   include that route in an ERO, before forwarding the PATH
      message.\n   One exception would be if the egress edge-node were also adjacent
      to\n   this core-node.  If no route can be found, the core-node SHOULD\n   return
      a PathErr message with an error code and value of 24,5 - \"No\n   route available
      toward destination\".\n"
    title: 3.1. Path Message without ERO
  - contents:
    - "3.2. Path Message with ERO\n   When a core-node receives a Path message from
      an edge-node that\n   contains an ERO, it SHOULD verify the route against its
      topology\n   database before forwarding the PATH message.  If the route is not\n
      \  viable (according to topology, currently available resources, or\n   local
      policy), then a PathErr message with an error code and value of\n   24,5 - \"No
      route available toward destination\" should be returned.\n"
    title: 3.2. Path Message with ERO
  - contents:
    - "3.3. Explicit Label Control\n   In order to support explicit label control
      and full identification of\n   the egress link, an ingress edge-node may include
      this information in\n   the ERO that it passes to its neighboring core-node.
      \ In the case\n   that no other ERO is supplied, this explicit control information
      is\n   provided as the only hop of the ERO and is encoded by setting the\n   first
      subobject of the ERO to the node-ID of the egress core-node\n   with the L-bit
      set; following this subobject are all other subobjects\n   necessary to identify
      the link and labels as they would normally\n   appear.\n   The same rules apply
      to the presence of the explicit control\n   subobjects as the last hop in the
      ERO, if a fuller ERO is supplied by\n   the ingress edge-node to its neighbor
      core-node; but in this case the\n   L-bit MAY be clear.\n   This process is
      described in [RFC3473] and [EXPLICIT].\n"
    title: 3.3. Explicit Label Control
  title: 3. ERO Processing
- contents:
  - "4. RRO Processing\n   An edge-node MAY include an RRO.  A core-node MAY remove
    the RRO from\n   the Path message before forwarding it.  Further, the core-node
    may\n   remove the RRO from a Resv message before forwarding it to the edge-\n
    \  node.  Such behavior is controlled by (hopefully consistent)\n   configuration.\n
    \  Further, a core-node MAY edit the RRO in a Resv message such that it\n   includes
    only the subobjects from the egress core-node through the\n   egress edge-node.
    \ This is to allow the ingress node to be aware of\n   the selected link and labels
    on at the far end of the connection.\n"
  title: 4. RRO Processing
- contents:
  - "5. Notification\n   An edge-node MAY include a NOTIFY_REQUEST object in both
    the Path and\n   Resv messages it generates.  Core-nodes may send Notify messages
    to\n   edge-nodes that have included the NOTIFY_REQUEST object.\n   A core-node
    MAY remove a NOTIFY_REQUEST object from a Path or Resv\n   message received from
    an edge-node before forwarding it.\n   If no NOTIFY_REQUEST object is present
    in the Path or Resv received\n   from an edge-node, the core-node adjacent to
    the edge-node may\n   include a NOTIFY_REQUEST object and set its value to its
    own address.\n   In either of the above cases, the core-node SHOULD NOT send Notify\n
    \  messages to the edge-node.\n   When a core-node receives a NOTIFY_REQUEST object
    from an edge-node,\n   it MAY update the Notify Node Address with its own address
    before\n   forwarding it.  In this case, when Notify messages are received, they\n
    \  MAY be selectively (based on local policy) forwarded to the edge-\n   node.\n"
  title: 5. Notification
- contents:
  - '6. Connection Deletion

    '
  - contents:
    - "6.1. Alarm-Free Connection Deletion\n   RSVP-TE currently deletes connections
      using either a single pass\n   PathTear message, or a ResvTear and PathTear
      message combination.\n   Upon receipt of the PathTear message, a node deletes
      the connection\n   state and forwards the message.  In optical networks, however,
      it is\n   possible that the deletion of a connection (e.g., removal of the\n
      \  cross-connect) in a node may cause the connection to be perceived as\n   failed
      in downstream nodes (e.g., loss of frame, loss of light,\n   etc.). This may
      in turn lead to management alarms and perhaps the\n   triggering of restoration/protection
      for the connection.\n   To address this issue, the graceful connection deletion
      procedure\n   SHOULD be followed.  Under this procedure, an ADMIN_STATUS object\n
      \  MUST be sent in a Path or Resv message along the connection's path to\n   inform
      all nodes en route to the intended deletion, prior to the\n   actual deletion
      of the connection.  The procedure is described in\n   [RFC3473].\n   If an ingress
      core-node receives a PathTear without having first seen\n   an ADMIN_STATUS
      object informing it that the connection is about to\n   be deleted, it MAY pause
      the PathTear and first send a Path message\n   with an ADMIN_STATUS object to
      inform all downstream LSRs that the\n   connection is about to be deleted.  When
      the Resv is received echoing\n   the ADMIN_STATUS or using a timer as described
      in [RFC3473], the\n   ingress core-node MUST forward the PathTear.\n"
    title: 6.1. Alarm-Free Connection Deletion
  - contents:
    - "6.2. Connection Deletion with PathErr\n   [RFC3473] introduces the Path_State_Removed
      flag to a PathErr message\n   to indicate that the sender has removed all state
      associated with the\n   LSP and does not need to see a PathTear.  A core-node
      next to an\n   edge-node MAY map between teardown using ResvTear/PathTear and\n
      \  PathErr with Path_state_Removed.\n   A core-node next to an edge-node receiving
      a ResvTear from its\n   downstream neighbor MAY respond with a PathTear and
      send a PathErr\n   with Path_State_Removed further upstream.\n   Note, however,
      that a core-node next to an edge-node receiving a\n   PathErr with Path_State_Removed
      from its downstream neighbor MUST NOT\n   retain Path state and send a ResvTear
      further upstream because that\n   would imply that Path state further downstream
      had also been\n   retained.\n"
    title: 6.2. Connection Deletion with PathErr
  title: 6. Connection Deletion
- contents:
  - "7. VPN Connections\n   As stated in the addressing section above, the extensions
    in this\n   document are designed to be compatible with the support of VPNs.\n
    \  Since the core network may be some technology other than GMPLS, no\n   mandatory
    means of mapping core connections to access connections is\n   specified.  However,
    when GMPLS is used for the core network, it is\n   RECOMMENDED that the following
    procedure based on [MPLS-HIER] is\n   followed.\n   The VPN connection is modeled
    as being three hops.  One for each\n   access link and one hop across the core
    network.\n   The VPN connection is established using a two-step procedure.  When
    a\n   Path message is received at a core-node on an interface that is part\n   of
    a VPN, the Path message is held until a core connection is\n   established.\n
    \  The connection across the core is setup as a separate signaling\n   exchange
    between the core-nodes, using the address space of the core\n   nodes.  While
    this exchange is in progress, the original Path message\n   is held at the ingress
    core-node.  Once the exchange for the core\n   connection is complete, this connection
    is used in the VPN connection\n   as if it were a single link.  This is signaled
    by including an IF_ID\n   RSVP_HOP object (defined in [RFC3473]) using the procedures
    defined\n   in [MPLS-HIER].\n   The original Path message is then forwarded within
    the VPN addressing\n   realm to the core-node attached to the destination edge-node.
    \ Many\n   ways of accomplishing this are available, including IP and GRE\n   tunnels
    and BGP/MPLS VPNs.  Specifying a particular means is beyond\n   the scope of this
    document.\n"
  title: 7. VPN Connections
- contents:
  - "8. Security Considerations\n   The trust model between the core and edge-nodes
    is different than the\n   one described in [RFC3473], as the core is permitted
    to hide its\n   topology from the edge-nodes, and the core is permitted to restrict\n
    \  the actions of edge-nodes by filtering out specific RSVP objects.\n"
  title: 8. Security Considerations
- contents:
  - "9. Acknowledgments\n   The authors would like to thank Kireeti Kompella, Jonathan
    Lang,\n   Dimitri Papadimitriou, Dimitrios Pendarakis, Bala Rajagopalan, and\n
    \  Adrian Farrel for their comments and input.  Thanks for thorough\n   final
    reviews from Loa Andersson and Dimitri Papadimitriou.\n   Adrian Farrel edited
    the last two revisions of this document to\n   incorporate comments from Working
    Group last call and from AD review.\n"
  title: 9. Acknowledgments
- contents:
  - '10.  References

    '
  - contents:
    - "10.1. Normative References\n   [RFC2119]    Bradner, S., \"Key words for use
      in RFCs to Indicate\n                Requirement Levels\", BCP 14, RFC 2119,
      March 1997.\n   [RFC3471]    Berger, L., \"Generalized Multi-Protocol Label
      Switching\n                (GMPLS) Signaling Functional Description\", RFC 3471,\n
      \               January 2003.\n   [RFC3473]    Berger, L., \"Generalized Multi-Protocol
      Label Switching\n                (GMPLS) Signaling Resource ReserVation Protocol-Traffic\n
      \               Engineering (RSVP-TE) Extensions\", RFC 3473, January\n                2003.\n
      \  [RFC3209]    Awduche, D., Berger, L., Gan, D., Li, T., Srinivasan,\n                V.,
      and G.  Swallow, \"RSVP-TE: Extensions to RSVP for\n                LSP Tunnels\",
      RFC 3209, December 2001.\n"
    title: 10.1. Normative References
  - contents:
    - "10.2. Informational References\n   [RFC3031]    Rosen, E., Viswanathan, A.,
      and R.  Callon,\n                \"Multiprotocol Label Switching Architecture\",
      RFC 3031,\n                January 2001.\n   [RFC3477]    Kompella, K. and Y.
      \ Rekhter, \"Signalling Unnumbered\n                Links in Resource ReSerVation
      Protocol - Traffic\n                Engineering (RSVP-TE)\", RFC 3477, January
      2003.\n   [BUNDLE]     Kompella, K., Rekhter, Y., and Berger, L., \"Link\n                Bundling
      in MPLS Traffic Engineering (TE)\", RFC 4201,\n                October 2005.\n
      \  [EXPLICIT]   Berger, L., \"GMPLS Signaling Procedure for Egress\n                Control\",
      RFC 4003, February 2005.\n   [GMPLS-ARCH] Mannie, E., \"Generalized Multi-Protocol
      Label Switching\n                (GMPLS) Architecture\", RFC 3945, October 2004.\n
      \  [MPLS-HIER]  Kompella, K. and Y. Rekhter, \"Label Switched Paths (LSP)\n
      \               Hierarchy with Generalized Multi-Protocol Label\n                Switching
      (GMPLS) Traffic Engineering (TE)\", RFC 4206,\n                October 2005.\n
      \  [G.8080]     ITU-T Rec.  G.8080/Y.1304, \"Architecture for the\n                Automatically
      Switched Optical Network (ASON),\" November\n                2001 (and Revision,
      January 2003).  For information on\n                the availability of this
      document, please see\n                http://www.itu.int.\n"
    title: 10.2. Informational References
  title: 10.  References
- contents:
  - "Authors' Addresses\n   George Swallow\n   Cisco Systems, Inc.\n   1414 Massachusetts
    Ave,\n   Boxborough, MA 01719\n   Phone: +1 978 936 1398\n   EMail: swallow@cisco.com\n
    \  John Drake\n   Boeing Satellite Systems\n   2300 East Imperial Highway\n   El
    Segundo, CA 90245\n   Phone: +1 412 370-3108\n   EMail: John.E.Drake2@boeing.com\n
    \  Hirokazu Ishimatsu\n   G1M Co., Ltd.\n   Nishinippori Start up Office 214,\n
    \  5-37-5 Nishinippori, Arakawaku,\n   Tokyo 116-0013, Japan\n   Phone: +81 3
    3891 8320\n   EMail: hirokazu.ishimatsu@g1m.jp\n   Yakov Rekhter\n   Juniper Networks,
    Inc.\n   EMail: yakov@juniper.net\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This
    document is subject to the rights, licenses and restrictions\n   contained in
    BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at ietf-\n   ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
