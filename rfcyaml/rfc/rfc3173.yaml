- contents:
  - '                IP Payload Compression Protocol (IPComp)

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document describes a protocol intended to provide lossless\n
    \  compression for Internet Protocol datagrams in an Internet\n   environment.\n"
  title: Abstract
- contents:
  - "1. Introduction\n   IP payload compression is a protocol to reduce the size of
    IP\n   datagrams.  This protocol will increase the overall communication\n   performance
    between a pair of communicating hosts/gateways (\"nodes\")\n   by compressing
    the datagrams, provided the nodes have sufficient\n   computation power, through
    either CPU capacity or a compression\n   coprocessor, and the communication is
    over slow or congested links.\n   IP payload compression is especially useful
    when encryption is\n   applied to IP datagrams.  Encrypting the IP datagram causes
    the data\n   to be random in nature, rendering compression at lower protocol\n
    \  layers (e.g., PPP Compression Control Protocol [RFC1962])\n   ineffective.
    \ If both compression and encryption are required,\n   compression must be applied
    before encryption.\n   This document defines the IP payload compression protocol
    (IPComp),\n   the IPComp packet structure, the IPComp Association (IPCA), and\n
    \  several methods to negotiate the IPCA.\n   Other documents shall specify how
    a specific compression algorithm\n   can be used with the IP payload compression
    protocol.  Such\n   algorithms are beyond the scope of this document.\n"
  - contents:
    - "1.1. Specification of Requirements\n   The key words \"MUST\", \"MUST NOT\",
      \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",
      \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described
      in RFC 2119 [RFC2119].\n"
    title: 1.1. Specification of Requirements
  title: 1. Introduction
- contents:
  - "2. Compression Process\n   The compression processing of IP datagrams has two
    phases:\n   compressing of outbound IP datagrams (\"compression\") and\n   decompressing
    of inbound datagrams (\"decompression\").  The\n   compression processing MUST
    be lossless, ensuring that the IP\n   datagram, after being compressed and decompressed,
    is identical to\n   the original IP datagram.\n   Each IP datagram is compressed
    and decompressed by itself without any\n   relation to other datagrams (\"stateless
    compression\"), as IP\n   datagrams may arrive out of order or not arrive at all.
    \ Each\n   compressed IP datagram encapsulates a single IP payload.\n   Processing
    of inbound IP datagrams MUST support both compressed and\n   non-compressed IP
    datagrams, in order to meet the non-expansion\n   policy requirements, as defined
    in section 2.2.\n   The compression of outbound IP datagrams MUST be done before
    any IP\n   security processing, such as encryption and authentication, and\n   before
    any fragmentation of the IP datagram.  In addition, in IP\n   version 6 [RFC2460],
    the compression of outbound IP datagrams MUST be\n   done before the addition
    of either a Hop-by-Hop Options header or a\n   Routing Header, since both carry
    information that must be examined\n   and processed by possibly every node along
    a packet's delivery path,\n   and therefore MUST be sent in the original form.\n
    \  Similarly, the decompression of inbound IP datagrams MUST be done\n   after
    the reassembly of the IP datagrams, and after the completion of\n   all IP security
    processing, such as authentication and decryption.\n"
  - contents:
    - "2.1. Compressed Payload\n   The compression is applied to a single array of
      octets, which are\n   contiguous in the IP datagram.  This array of octets always
      ends at\n   the last octet of the IP packet payload.  Note: A contiguous array
      of\n   octets in the IP datagram may be not contiguous in physical memory.\n
      \  In IP version 4 [RFC0791], the compression is applied to the payload\n   of
      the IP datagram, starting at the first octet following the IP\n   header, and
      continuing through the last octet of the datagram.  No\n   portion of the IP
      header or the IP header options is compressed.\n   Note: In the case of an encapsulated
      IP header (e.g., tunnel mode\n   encapsulation in IPsec), the datagram payload
      is defined to start\n   immediately after the outer IP header; accordingly,
      the inner IP\n   header is considered part of the payload and is compressed.\n
      \  In the IPv6 context, IPComp is viewed as an end-to-end payload, and\n   MUST
      NOT apply to hop-by-hop, routing, and fragmentation extension\n   headers.  The
      compression is applied starting at the first IP Header\n   Option field that
      does not carry information that must be examined\n   and processed by nodes
      along a packet's delivery path, if such an IP\n   Header Option field exists,
      and continues to the ULP payload of the\n   IP datagram.\n   The size of a compressed
      payload, generated by the compression\n   algorithm, MUST be in whole octet
      units.\n   As defined in section 3, an IPComp header is inserted immediately\n
      \  preceding the compressed payload.  The original IP header is modified\n   to
      indicate the usage of the IPComp protocol and the reduced size of\n   the IP
      datagram.  The original content of the Next Header (IPv6) or\n   protocol (IPv4)
      field is stored in the IPComp header.\n   The decompression is applied to a
      single contiguous array of octets\n   in the IP datagram.  The start of the
      array of octets immediately\n   follows the IPComp header and ends at the last
      octet of the IP\n   payload.  If the decompression process is successfully completed,
      the\n   IP header is modified to indicate the size of the decompressed IP\n
      \  datagram, and the original next header as stored in the IPComp\n   header.
      \ The IPComp header is removed from the IP datagram and the\n   decompressed
      payload immediately follows the IP header.\n"
    title: 2.1. Compressed Payload
  - contents:
    - "2.2. Non-Expansion Policy\n   If the total size of a compressed payload and
      the IPComp header, as\n   defined in section 3, is not smaller than the size
      of the original\n   payload, the IP datagram MUST be sent in the original non-compressed\n
      \  form.  To clarify: If an IP datagram is sent non-compressed, no\n   IPComp
      header is added to the datagram.  This policy ensures saving\n   the decompression
      processing cycles and avoiding incurring IP\n   datagram fragmentation when
      the expanded datagram is larger than the\n   MTU.\n   Small IP datagrams are
      likely to expand as a result of compression.\n   Therefore, a numeric threshold
      should be applied before compression,\n   where IP datagrams of size smaller
      than the threshold are sent in the\n   original form without attempting compression.
      \ The numeric threshold\n   is implementation dependent.\n   An IP datagram
      with payload that has been previously compressed tends\n   not to compress any
      further.  The previously compressed payload may\n   be the result of external
      processes, such as compression applied by\n   an upper layer in the communication
      stack, or by an off-line\n   compression utility.  An adaptive algorithm should
      be implemented to\n   avoid the performance hit.  For example, if the compression
      of i\n   consecutive IP datagrams of an IPCA fails, the next several IP\n   datagrams,
      say k, are sent without attempting compression.  If then\n   the next j datagrams
      also fail to compress, a larger number of\n   datagrams, say k+n, are sent without
      attempting compression.  Once a\n   datagram is compressed successfully, the
      normal process of IPComp\n   restarts.  Such an adaptive algorithm, including
      all the related\n   thresholds, is implementation dependent.\n   During the
      processing of the payload, the compression algorithm MAY\n   periodically apply
      a test to determine the compressibility of the\n   processed data, similar to
      the requirements of [V42BIS].  The nature\n   of the test is algorithm dependent.
      \ Once the compression algorithm\n   detects that the data is non-compressible,
      the algorithm SHOULD stop\n   processing the data, and the payload is sent in
      the original non-\n   compressed form.\n"
    title: 2.2. Non-Expansion Policy
  title: 2. Compression Process
- contents:
  - "3. Compressed IP Datagram Header Structure\n   A compressed IP datagram is encapsulated
    by modifying the IP header\n   and inserting an IPComp header immediately preceding
    the compressed\n   payload.  This section defines the IP header modifications
    both in\n   IPv4 and IPv6, and the structure of the IPComp header.\n"
  - contents:
    - "3.1. IPv4 Header Modifications\n   The following IPv4 header fields are set
      before transmitting the\n   compressed IP datagram:\n      Total Length\n         The
      length of the entire encapsulated IP datagram, including\n         the IP header,
      the IPComp header and the compressed payload.\n      Protocol\n         The
      Protocol field is set to 108, IPComp Datagram, [RFC1700].\n      Header Checksum\n
      \        The Internet Header checksum [RFC0791] of the IP header.\n   All other
      IPv4 header fields are kept unchanged, including any header\n   options.\n"
    title: 3.1. IPv4 Header Modifications
  - contents:
    - "3.2. IPv6 Header Modifications\n   The following IPv6 header fields are set
      before transmitting the\n   compressed IP datagram:\n      Payload Length\n
      \        The length of the compressed IP payload.\n      Next Header\n         The
      Next Header field is set to 108, IPComp Datagram,\n         [RFC1700].\n   All
      other IPv6 header fields are kept unchanged, including any non-\n   compressed
      header options.\n   The IPComp header is placed in an IPv6 packet using the
      same rules as\n   the IPv6 Fragment Header.  However if an IPv6 packet contains
      both an\n   IPv6 Fragment Header and an IPComp header, the IPv6 Fragment Header\n
      \  MUST precede the IPComp header in the packet.  Note: Other IPv6\n   headers
      may be present between the IPv6 Fragment Header and the\n   IPComp header.\n"
    title: 3.2. IPv6 Header Modifications
  - contents:
    - "3.3.  IPComp Header Structure\n   The four-octet header has the following structure:\n
      \  0                   1                   2                   3\n   0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |  Next Header  |     Flags     | Compression Parameter Index |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Next Header\n      8-bit selector.  Stores the IPv4 Protocol field or the
      IPv6 Next\n      Header field of the original IP header.\n   Flags\n      8-bit
      field.  Reserved for future use.  MUST be set to zero.  MUST\n      be ignored
      by the receiving node.\n   Compression Parameter Index (CPI)\n      16-bit index.
      \ The CPI is stored in network order.  The values\n      0-63 designate well-known
      compression algorithms, which require no\n      additional information, and
      are used for manual setup.  The values\n      themselves are identical to IPCOMP
      Transform identifiers as\n      defined in [SECDOI].  Consult [SECDOI] for an
      initial set of\n      defined values and for instructions on how to assign new
      values.\n      The values 64-255 are reserved for future use.  The values\n
      \     256-61439 are negotiated between the two nodes in definition of an\n      IPComp
      Association, as defined in section 4.  Note: When\n      negotiating one of
      the well-known algorithms, the nodes MAY select\n      a CPI in the pre-defined
      range 0-63.  The values 61440-65535 are\n      for private use among mutually
      consenting parties.  Both nodes\n      participating can select a CPI value
      independently of each other\n      and there is no relationship between the
      two separately chosen\n      CPIs.  The outbound IPComp header MUST use the
      CPI value chosen by\n      the decompressing node.  The CPI in combination with
      the\n      destination IP address uniquely identifies the compression\n      algorithm
      characteristics for the datagram.\n"
    title: 3.3.  IPComp Header Structure
  title: 3. Compressed IP Datagram Header Structure
- contents:
  - "4. IPComp Association (IPCA) Negotiation\n   To utilize the IPComp protocol,
    two nodes MUST first establish an\n   IPComp Association (IPCA) between them.
    \ The IPCA includes all\n   required information for the operation of IPComp,
    including the\n   Compression Parameter Index (CPI), the mode of operation, the\n
    \  compression algorithm to be used, and any required parameter for the\n   selected
    compression algorithm.\n   The policy for establishing IPComp may be either a
    node-to-node\n   policy where IPComp is applied to every IP packet between the
    nodes,\n   or a session-based policy where only selected sessions between the\n
    \  nodes employ IPComp.\n   Two nodes may choose to negotiate IPComp in either
    or both\n   directions, and they may choose to employ a different compression\n
    \  algorithm in each direction.  The nodes MUST, however, negotiate a\n   compression
    algorithm in each direction for which they establish an\n   IPCA: there is no
    default compression algorithm.\n   No compression algorithm is mandatory for an
    IPComp implementation.\n   The IPCA is established by dynamic negotiations or
    by manual\n   configuration.  The dynamic negotiations SHOULD use the Internet
    Key\n   Exchange protocol [IKE], where IPsec is present.  The dynamic\n   negotiations
    MAY be implemented through a different protocol.\n"
  - contents:
    - "4.1. Use of IKE\n   For IPComp in the context of IP Security, IKE provides
      the necessary\n   mechanisms and guidelines for establishing IPCA.  Using IKE,
      IPComp\n   can be negotiated as stand-alone or in conjunction with other IPsec\n
      \  protocols.\n   An IPComp Association is negotiated by the initiator using
      a Proposal\n   Payload, which includes one or more Transform Payloads.  The
      Proposal\n   Payload specifies the IP Payload Compression Protocol in the protocol\n
      \  ID field and each Transform Payload contains the specific compression\n   algorithm(s)
      being offered to the responder.\n   The CPI is sent in the SPI field of the
      proposal, with the SPI size\n   field set to match.  The CPI SHOULD be sent
      as a 16-bit number, with\n   the SPI size field set to 2.  Alternatively, the
      CPI MAY be sent as a\n   32-bit value, with the SPI size field set to 4.  In
      this case, the\n   16-bit CPI number MUST be placed in the two least significant
      octets\n   of the SPI field, while the two most significant octets MUST be set\n
      \  to zero, and MUST be ignored by the receiving node.  The receiving\n   node
      MUST be able to process both forms of the CPI proposal.\n   In the Internet
      IP Security Domain of Interpretation (DOI), IPComp is\n   negotiated as the
      Protocol ID PROTO_IPCOMP.  The compression\n   algorithm is negotiated as one
      of the defined IPCOMP Transform\n   Identifiers.\n   The following attributes
      are applicable to IPComp proposals:\n      Encapsulation Mode\n         To propose
      a non-default Encapsulation Mode (such as Tunnel\n         Mode), an IPComp
      proposal MUST include an Encapsulation Mode\n         attribute.  If the Encapsulation
      Mode is unspecified, the\n         default value of Transport Mode is assumed.\n
      \     Lifetime\n         An IPComp proposal uses the Life Duration and Life
      Type\n         attributes to suggest life duration to the IPCA.\n   When IPComp
      is negotiated as part of a Protection Suite, all the\n   logically related offers
      must be consistent.  However, an IPComp\n   proposal SHOULD NOT include attributes
      that are not applicable to\n   IPComp.  An IPComp proposal MUST NOT be rejected
      because it does not\n   include attributes of other protocols in the Protection
      Suite that\n   are not relevant to IPComp.  When an IPComp proposal includes
      such\n   attributes, those attributes MUST be ignored when setting the IPCA,\n
      \  and therefore ignored in the operation of IPComp.\n   Implementation note:\n
      \     A node can avoid the computation necessary for determining the\n      compression
      algorithm from the CPI if it is using one of the\n      well-known algorithms;
      this can save time in the decompression\n      process.  A node can do this
      by negotiating a CPI equal in value\n      to the pre-defined Transform identifier
      of that compression\n      algorithm.  Specifically: A node MAY offer a CPI
      in the pre-\n      defined range by sending a Proposal Payload that MUST contain
      a\n      single Transform Payload, which is identical to the CPI.  When\n      proposing
      two or more Transform Payloads, a node MAY offer CPIs in\n      the pre-defined
      range by using multiple IPComp proposals -- each\n      MUST include a single
      Transform Payload.  To clarify: If a\n      Proposal Payload contains two or
      more Transform Payloads, the CPI\n      MUST be in the negotiated range.  A
      receiving node MUST be able to\n      process each of these proposal forms.\n
      \  Implementation note:\n      IPCAs become non-unique when two or more IPComp
      sessions are\n      established between two nodes, and the same well-known CPI
      is used\n      in at least two of the sessions.  Non-unique IPCAs pose problems\n
      \     in maintaining attributes specific to each IPCA, either negotiated\n      (e.g.,
      lifetime) or internal (e.g., the counters of the adaptive\n      algorithm for
      handling previously compressed payload).  To ensure\n      the uniqueness of
      IPCAs between two nodes, when two or more of the\n      IPCAs use the same compression
      algorithm, the CPIs SHOULD be in\n      the negotiated range.  However, when
      the IPCAs are not required to\n      be unique, for example when no attribute
      is being utilized for\n      these IPCAs, a well-known CPI MAY be used.  To
      clarify: When only\n      a single session using a particular well-known CPI
      is established\n      between two nodes, this IPCA is unique.\n"
    title: 4.1. Use of IKE
  - contents:
    - "4.2. Use of Non-IKE Protocol\n   The dynamic negotiations MAY be implemented
      through a protocol other\n   than IKE.  Such a protocol is beyond the scope
      of this document.\n"
    title: 4.2. Use of Non-IKE Protocol
  - contents:
    - "4.3. Manual Configuration\n   Nodes may establish IPComp Associations using
      manual configuration.\n   For this method, a limited number of Compression Parameters
      Indexes\n   (CPIs) is designated to represent a list of specific compression\n
      \  methods.\n"
    title: 4.3. Manual Configuration
  title: 4. IPComp Association (IPCA) Negotiation
- contents:
  - "5. Security Considerations\n   When IPComp is used in the context of IPsec, it
    is believed not to\n   have an effect on the underlying security functionality
    provided by\n   the IPsec protocol; i.e., the use of compression is not known
    to\n   degrade or alter the nature of the underlying security architecture\n   or
    the encryption technologies used to implement it.\n   When IPComp is used without
    IPsec, IP payload compression potentially\n   reduces the security of the Internet,
    similar to the effects of IP\n   encapsulation [RFC2003].  For example, IPComp
    may make it difficult\n   for border routers to filter datagrams based on header
    fields.  In\n   particular, the original value of the Protocol field in the IP
    header\n   is not located in its normal positions within the datagram, and any\n
    \  transport layer header fields within the datagram, such as port\n   numbers,
    are neither located in their normal positions within the\n   datagram nor presented
    in their original values after compression.  A\n   filtering border router can
    filter the datagram only if it shares the\n   IPComp Association used for the
    compression.  To allow this sort of\n   compression in environments in which all
    packets need to be filtered\n   (or at least accounted for), a mechanism must
    be in place for the\n   receiving node to securely communicate the IPComp Association
    to the\n   border router.  This might, more rarely, also apply to the IPComp\n
    \  Association used for outgoing datagrams.\n"
  title: 5. Security Considerations
- contents:
  - "6. IANA Considerations\n   This document does not require any IANA actions.  The
    well-known\n   numbers used in this document are defined elsewhere; see [SECDOI].\n"
  title: 6. IANA Considerations
- contents:
  - "7. Changes made since RFC 2393\n   This section summarizes the changes in this
    document from RFC 2393 of\n   which an implementer of RFC 2393 should be aware.
    \ All the changes\n   are meant to clarify the negotiation of an IPComp Association
    (IPCA)\n   using IKE [IKE] in the context of IPsec.\n   1) Added a clarification
    that IPComp can be negotiated stand-alone or\n      bundled with other protocols
    in a Protection Suite.\n   2) Defined the CPI in the SPI field of an IKE proposal:
    two-octet\n      field is a SHOULD, four-octet a MAY.  Defined the placement of
    the\n      16-bit CPI in a four-octet field.  Specified that a receiver MUST\n
    \     process both field sizes.\n   3) Added wording to define the default Encapsulation
    Mode to be\n      Transport Mode.  Required that an IPComp proposal MUST include
    an\n      Encapsulation Mode attribute when it suggests a non-default\n      encapsulation,
    such as Tunnel Mode.\n   4) Added the Lifetime attribute to the list of supported
    attributes\n      (along with Transport Mode).\n   5) Specified the handling of
    attributes of transforms in a Protection\n      Suite that are not applicable
    to IPComp: These attributes SHOULD\n      NOT be included in an IPComp proposal
    and MUST be ignored when\n      setting IPCA and in the operation of IPComp.  IPComp\n
    \     implementations MUST never reject an IPCOMP proposal that does not\n      include
    attributes of other transforms.\n   6) Added implementation notes on the negotiation
    and usage of CPIs in\n      the predefined (well-known) range.\n"
  title: 7. Changes made since RFC 2393
- contents:
  - "8. References\n   [RFC0791] Postel, J., Editor, \"Internet Protocol\", STD 5,
    RFC 791,\n             September 1981.\n   [RFC1700] Reynolds, J. and J. Postel,
    \"Assigned Numbers\", STD 2, RFC\n             1700, October 1994.  Or see:\n
    \            http://www.iana.org/numbers.html\n   [RFC2460] Deering, S. and R.
    Hinden, \"Internet Protocol, Version 6\n             (IPv6) Specification\", RFC
    2460, December 1998.\n   [RFC1962] Rand, D., \"The PPP Compression Control Protocol
    (CCP)\", RFC\n             1962, June 1996.\n   [RFC2003] Perkins, C., \"IP Encapsulation
    within IP\", RFC 2003,\n             October 1996.\n   [RFC2119] Bradner, S.,
    \"Key words for use in RFCs to Indicate\n             Requirement Levels\", BCP
    14, RFC 2119, March 1997.\n   [IKE]     Harkins, D. and D. Carrel, \"The Internet
    Key Exchange\n             (IKE)\", RFC 2409, November 1998.\n   [SECDOI]  Piper,
    D., \"The Internet IP Security Domain of\n             Interpretation for ISAKMP\",
    RFC 2407, November 1998.\n   [V42BIS]  CCITT, \"Data Compression Procedures for
    Data Circuit\n             Terminating Equipment (DCE) Using Error Correction\n
    \            Procedures\", Recommendation V.42 bis, January 1990.\n"
  title: 8. References
- contents:
  - "Authors' Addresses\n   Abraham Shacham\n   Juniper Networks, Inc.\n   1194 North
    Mathilda Avenue\n   Sunnyvale, California 94089\n   United States of America\n
    \  EMail: shacham@shacham.net\n   Bob Monsour\n   18 Stout Road\n   Princeton,
    New Jersey 08540\n   United States of America\n   EMail: bob@bobmonsour.com\n
    \  Roy Pereira\n   Cisco Systems, Inc.\n   55 Metcalfe Street\n   Ottawa, Ontario
    K1P 6L5\n   Canada\n   EMail: royp@cisco.com\n   Matt Thomas\n   3am Software
    Foundry\n   8053 Park Villa Circle\n   Cupertino, California 95014\n   United
    States of America\n   EMail: matt@3am-software.com\n"
  title: Authors' Addresses
- contents:
  - "Comments\n   Comments should be addressed to the ippcp@external.cisco.com mailing\n
    \  list and/or the author(s).\n"
  title: Comments
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2001).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
