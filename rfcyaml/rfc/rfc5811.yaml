- contents:
  - "            SCTP-Based Transport Mapping Layer (TML) for the\n      Forwarding
    and Control Element Separation (ForCES) Protocol\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This document defines the SCTP-based TML (Transport Mapping Layer)\n
    \  for the ForCES (Forwarding and Control Element Separation) protocol.\n   It
    explains the rationale for choosing the SCTP (Stream Control\n   Transmission
    Protocol) and also describes how this TML addresses all\n   the requirements required
    by and the ForCES protocol.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc5811.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n   This document may contain
    material from IETF Documents or IETF\n   Contributions published or made publicly
    available before November\n   10, 2008.  The person(s) controlling the copyright
    in some of this\n   material may not have granted the IETF Trust the right to
    allow\n   modifications of such material outside the IETF Standards Process.\n
    \  Without obtaining an adequate license from the person(s) controlling\n   the
    copyright in such materials, this document may not be modified\n   outside the
    IETF Standards Process, and derivative works of it may\n   not be created outside
    the IETF Standards Process, except to format\n   it for publication as an RFC
    or to translate it into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \  2. Definitions .....................................................3\n   3.
    Protocol Framework Overview .....................................4\n      3.1.
    The PL .....................................................5\n      3.2. The
    TML ....................................................5\n           3.2.1. TML
    and PL Interfaces ...............................5\n           3.2.2. TML Parameterization
    ................................6\n   4. SCTP TML Overview ...............................................7\n
    \     4.1. Rationale for Using SCTP for TML ...........................7\n      4.2.
    Meeting TML Requirements ...................................8\n           4.2.1.
    SCTP TML Channels ...................................9\n           4.2.2. Satisfying
    TML Requirements ........................14\n   5. SCTP TML Channel Work ..........................................16\n
    \  6. IANA Considerations ............................................16\n   7.
    Security Considerations ........................................17\n      7.1.
    IPsec Usage ...............................................17\n           7.1.1.
    SAD and SPD Setup ..................................18\n   8. Acknowledgements
    ...............................................18\n   9. References .....................................................19\n
    \     9.1. Normative References ......................................19\n      9.2.
    Informative References ....................................20\n   Appendix A.
    \ Suggested SCTP TML Channel Work Implementation .......21\n     A.1.  SCTP TML
    Channel Initialization ...........................21\n     A.2.  Channel Work
    Scheduling ...................................21\n       A.2.1.  FE Channel Work
    Scheduling ............................21\n       A.2.2.  CE Channel Work Scheduling
    ............................22\n     A.3.  SCTP TML Channel Termination ..............................23\n
    \    A.4.  SCTP TML NE-Level Channel Scheduling ......................23\n   Appendix
    B.  Suggested Service Interface ..........................24\n     B.1.  TML Bootstrapping
    .........................................24\n     B.2.  TML Shutdown ..............................................26\n
    \    B.3.  TML Sending and Receiving .................................27\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The ForCES (Forwarding and Control Element Separation) working
    group\n   in the IETF defines the architecture and protocol for separation of\n
    \  control elements (CEs) and forwarding elements (FEs) in network\n   elements
    (NEs) such as routers.  [RFC3654] and [RFC3746],\n   respectively, define architectural
    and protocol requirements for the\n   communication between CEs and FEs.  The
    ForCES protocol layer\n   specification [RFC5810] describes the protocol semantics
    and\n   workings.  The ForCES protocol layer operates on top of an inter-\n   connect
    hiding layer known as the TML.  The relationship is\n   illustrated in Figure
    1.\n   This document defines the SCTP-based TML for the ForCES protocol\n   layer.
    \ It also addresses all the requirements for the TML including\n   security, reliability,
    and etc., as defined in [RFC5810].\n"
  title: 1.  Introduction
- contents:
  - "2.  Definitions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in [RFC2119].\n   The
    following definitions are taken from [RFC3654] and [RFC3746]:\n   LFB:              Logical
    Functional Block.  A template that\n                     represents a fine-grained,
    logically separate\n                     aspect of FE processing.\n   ForCES Protocol:
    \ The protocol used at the Fp reference point in the\n                     ForCES
    Framework in [RFC3746].\n   ForCES PL:        ForCES Protocol Layer.  A layer
    in the ForCES\n                     architecture that embodies the ForCES protocol
    and\n                     the state transfer mechanisms as defined in\n                     [RFC5810].\n
    \  ForCES TML:       ForCES Protocol Transport Mapping Layer.  A layer\n                     in
    the ForCES protocol architecture that\n                     specifically addresses
    the protocol message\n                     transportation issues, such as how
    the protocol\n                     messages are mapped to different transport
    media\n                     (like SCTP, IP, TCP, UDP, ATM, Ethernet, etc.), and\n
    \                    how to achieve and implement reliability, security,\n                     etc.\n"
  title: 2.  Definitions
- contents:
  - "3.  Protocol Framework Overview\n   The reader is referred to the Framework document
    [RFC3746], and in\n   particular Sections 3 and 4, for an architectural overview
    and\n   explanation of where and how the ForCES protocol fits in.\n   There is
    some content overlap between the ForCES protocol\n   specification [RFC5810] and
    this section (Section 3) in order to\n   provide basic context to the reader of
    this document.\n   The ForCES protocol layering constitutes two pieces, the PL
    and TML.\n   This is depicted in Figure 1.\n               +----------------------------------------------+\n
    \              |                    CE PL                     |\n               +----------------------------------------------+\n
    \              |                    CE TML                    |\n               +----------------------------------------------+\n
    \                                     ^\n                                      |\n
    \                          ForCES PL  |messages\n                                      |\n
    \                                     v\n               +-----------------------------------------------+\n
    \              |                   FE TML                      |\n               +-----------------------------------------------+\n
    \              |                   FE PL                       |\n               +-----------------------------------------------+\n
    \              Figure 1: Message Exchange between CE and FE\n                      to
    Establish an NE Association\n   The PL is in charge of the ForCES protocol.  Its
    semantics and\n   message layout are defined in [RFC5810].  The TML is necessary
    to\n   connect two ForCES endpoints as shown in Figure 1.\n   Both the PL and
    TML are standardized by the IETF.  While only one PL\n   is defined, different
    TMLs are expected to be standardized.  The TML\n   at each of the nodes (CE and
    FE) is expected to be of the same\n   definition in order to inter-operate.\n
    \  When transmitting from a ForCES endpoint, the PL delivers its\n   messages
    to the TML.  The TML then delivers the PL message to the\n   destination TML(s).\n
    \  On reception of a message, the TML delivers the message to its\n   destination
    PL (as described in the ForCES header).\n"
  - contents:
    - "3.1.  The PL\n   The PL is common to all implementations of ForCES and is standardized\n
      \  by the IETF [RFC5810].  The PL is responsible for associating an FE\n   or
      CE to an NE.  It is also responsible for tearing down such\n   associations.\n
      \  An FE may use the PL to asynchronously send packets to the CE.  The\n   FE
      may redirect various control protocol packets (e.g., OSPF, etc.)\n   to the
      CE via the PL (from outside the NE).  Additionally, the FE\n   delivers various
      events that the CE has subscribed to via the PL\n   [RFC5812].\n   The CE and
      FE may interact synchronously via the PL.  The CE issues\n   status requests
      to the FE and receives responses via the PL.  The CE\n   also configures the
      components of the associated FE's LFBs using the\n   PL [RFC5812].\n"
    title: 3.1.  The PL
  - contents:
    - "3.2.  The TML\n   The TML is responsible for the transport of the PL messages.\n
      \  [RFC5810], Section 5 defines the requirements that need to be met by\n   a
      TML specification.  The SCTP TML specified in this document meets\n   all the
      requirements specified in [RFC5810], Section 5.\n   Section 4.2.2 of this document
      describes how the TML requirements are\n   met.\n"
    - contents:
      - "3.2.1.  TML and PL Interfaces\n   There are two interfaces to the PL and
        TML.  The specification of\n   these interfaces is out of scope for this document,
        but the\n   interfaces are introduced to show how they fit into the architecture\n
        \  and summarize the function provided at the interfaces.  The first\n   interface
        is between the PL and TML and the other is the CE Manager\n   (CEM)/FE Manager
        (FEM) [RFC3746] interface to both the PL and TML.\n   Both interfaces are
        shown in Figure 2.\n                      +----------------------------+\n
        \                     |  +----------------------+  |\n                      |
        \ |                      |  |\n     +---------+      |  |          PL          |
        \ |\n     |         |      |  +----------------------+  |\n     |FEM/CEM  |<---->|
        \            ^              |\n     |         |      |             |              |\n
        \    +---------+      |             |TML API       |\n                      |
        \            |              |\n                      |             V              |\n
        \                     |  +----------------------+  |\n                      |
        \ |                      |  |\n                      |  |          TML         |
        \ |\n                      |  |                      |  |\n                      |
        \ +----------------------+  |\n                      +----------------------------+\n
        \                     Figure 2: The TML-PL Interface\n   The CEM/FEM [RFC3746]
        interface is responsible for bootstrapping and\n   parameterization of the
        TML.  In its most basic form, the CEM/FEM\n   interface takes the form of
        a simple static config file that is read\n   on startup in the pre-association
        phase.\n   Appendix B discusses the service interfaces in more detail.\n"
      title: 3.2.1.  TML and PL Interfaces
    - contents:
      - "3.2.2.  TML Parameterization\n   It is expected that it should be possible
        to use a configuration\n   reference point, such as the FEM or the CEM, to
        configure the TML.\n   Some of the configured parameters may include:\n   o
        \ PL ID\n   o  Connection Type and associated data.  For example, if a TML
        uses\n      IP/SCTP, then parameters such as SCTP ports and IP addresses need\n
        \     to be configured.\n   o  Number of transport connections\n   o  Connection
        Capability, such as bandwidth, etc.\n   o  Allowed/Supported Connection Quality
        of Service (QoS) Policy (or\n      Congestion Control Policy)\n"
      title: 3.2.2.  TML Parameterization
    title: 3.2.  The TML
  title: 3.  Protocol Framework Overview
- contents:
  - "4.  SCTP TML Overview\n   SCTP [RFC4960] is an end-to-end transport protocol
    that is equivalent\n   to TCP, UDP, or DCCP in many aspects.  With a few exceptions,
    SCTP\n   can do most of what UDP, TCP, or DCCP can achieve.  SCTP as can also\n
    \  do most of what a combination of the other transport protocols can\n   achieve
    (e.g., TCP and DCCP or TCP and UDP).\n   Like TCP, it provides ordered, reliable,
    connection-oriented, flow-\n   controlled, congestion-controlled data exchange.
    \ Unlike TCP, it does\n   not provide byte streaming and instead provides message
    boundaries.\n   Like UDP, it can provide unreliable, unordered data exchange.
    \ Unlike\n   UDP, it does not provide multicast support\n   Like DCCP, it can
    provide unreliable, ordered, congestion controlled,\n   connection-oriented data
    exchange.\n   SCTP also provides other services that none of the three transport\n
    \  protocols mentioned above provide that we found attractive.  These\n   include:\n
    \  o  Multi-homing\n   o  Runtime IP address binding\n   o  A range of reliability
    shades with congestion control\n   o  Built-in heartbeats\n   o  Multi-streaming\n
    \  o  Message boundaries with reliability\n   o  Improved SYN DOS protection\n
    \  o  Simpler transport events\n   o  Simplified replicasting\n"
  - contents:
    - "4.1.  Rationale for Using SCTP for TML\n   SCTP has all the features required
      to provide a robust TML.  As a\n   transport that is all-encompassing, it negates
      the need for having\n   multiple transport protocols in order to satisfy the
      TML requirements\n   ([RFC5810], Section 5).  As a result, it allows for simpler
      coding\n   and therefore reduces a lot of the interoperability concerns.\n   SCTP
      is also very mature and widely used, making it a good choice for\n   ubiquitous
      deployment.\n"
    title: 4.1.  Rationale for Using SCTP for TML
  - contents:
    - "4.2.  Meeting TML Requirements\n                  PL\n                  +----------------------+\n
      \                 |                      |\n                  +-----------+----------+\n
      \                             |   TML API\n                   TML        |\n
      \                 +-----------+----------+\n                  |           |
      \         |\n                  |    +------+------+   |\n                  |
      \   |  TML core   |   |\n                  |    +-+----+----+-+   |\n                  |
      \     |    |    |     |\n                  |    SCTP socket API   |\n                  |
      \     |    |    |     |\n                  |      |    |    |     |\n                  |
      \   +-+----+----+-+   |\n                  |    |    SCTP     |   |\n                  |
      \   +------+------+   |\n                  |           |          |\n                  |
      \          |          |\n                  |    +------+------+   |\n                  |
      \   |      IP     |   |\n                  |    +-------------+   |\n                  +----------------------+\n
      \            Figure 3: The TML-SCTP Interface\n   Figure 3 details the interfacing
      between the PL and SCTP TML and the\n   internals of the SCTP TML.  The core
      of the TML interacts on its\n   northbound interface to the PL (utilizing the
      TML API).  On the\n   southbound interface, the TML core interfaces to the SCTP
      layer\n   utilizing the standard socket interface [TSVWG-SCTPSOCKET].  There\n
      \  are three SCTP socket connections opened between any two PL endpoints\n   (whether
      FE or CE).\n"
    - contents:
      - "4.2.1.  SCTP TML Channels\n                  +--------------------+\n                  |
        \                   |\n                  |     TML   core     |\n                  |
        \                   |\n                  +-+-------+--------+-+\n                    |
        \      |        |\n                    |   Med prio,    |\n                    |
        \ Semi-reliable |\n                    |    channel     |\n                    |
        \      |      Low prio,\n                    |       |      Unreliable\n                    |
        \      |      channel\n                    |       |        |\n                    ^
        \      ^        ^\n                    |       |        |\n                    Y
        \      Y        Y\n          High prio,|       |        |\n           reliable
        |       |        |\n            channel |       |        |\n                    Y
        \      Y        Y\n                 +-+--------+--------+-+\n                 |
        \                    |\n                 |        SCTP         |\n                 |
        \                    |\n                 +---------------------+\n              Figure
        4: The TML-SCTP Channels\n   Figure 4 details further the interfacing between
        the TML core and\n   SCTP layers.  There are three channels used to group
        and prioritize\n   the work for different types of ForCES traffic.  Each channel\n
        \  constitutes an SCTP socket interface that has different properties.\n   It
        should be noted that all SCTP channels are congestion aware (and\n   for that
        reason that detail is left out of the description of the\n   three channels).
        \ SCTP ports 6704, 6705, and 6706 are used for the\n   higher-, medium-, and
        lower-priority channels, respectively.  SCTP\n   Payload Protocol ID (PPID)
        values of 21, 22, and 23 are used for the\n   higher-, medium-, and lower-priority
        channels, respectively.\n"
      - contents:
        - "4.2.1.1.  Justifying Choice of Three Sockets\n   SCTP allows up to 64 K
          streams to be sent over a single socket\n   interface.  The authors initially
          envisioned using a single socket\n   for all three channels (mapping a channel
          to an SCTP stream).  This\n   simplifies programming of the TML as well
          as conserves use of SCTP\n   ports.\n   Further analysis revealed head-of-line
          blocking issues with this\n   initial approach.  Lower-priority packets
          not needing reliable\n   delivery could block higher-priority packets (needing
          reliable\n   delivery) under congestion situations for an indeterminate
          period of\n   time (depending on how many outstanding lower-priority packets
          are\n   pending).  For this reason, we elected to go with mapping each of
          the\n   three channels to a different SCTP socket (instead of a different\n
          \  stream within a single socket).\n"
        title: 4.2.1.1.  Justifying Choice of Three Sockets
      - contents:
        - "4.2.1.2.  Higher-Priority, Reliable Channel\n   The higher-priority (HP)
          channel uses a standard SCTP reliable socket\n   on port 6704.  SCTP PPID
          21 is used for all messages on the HP\n   channel.  The HP channel is used
          for CE-solicited messages and their\n   responses:\n   1.  ForCES configuration
          messages flowing from CE to FE and responses\n       from the FE to CE.\n
          \  2.  ForCES query messages flowing from CE to FE and responses from\n
          \      the FE to the CE.\n   PL priorities 4-7 MUST be used for all PL messages
          using this\n   channel.  The following PL messages MUST use the HP channel
          for\n   transport:\n   o  AssociationSetup (default priority: 7)\n   o  AssociationSetupResponse
          (default priority: 7)\n   o  AssociationTeardown (default priority: 7)\n
          \  o  Config (default priority: 4)\n   o  ConfigResponse (default priority:
          4)\n   o  Query (default priority: 4)\n   o  QueryResponse (default priority:
          4)\n   If PL priorities outside of the specified range priority (4-7), PPID,\n
          \  or PL message types other than the above are received on the HP\n   channel,
          then the PL message MUST be dropped.\n   Although an implementation may
          choose different values from the\n   defined range (4-7), it is RECOMMENDED
          that default priorities be\n   used.  A response to a ForCES message MUST
          contain the same priority\n   as the request.  For example, a config sent
          by the CE with priority 5\n   MUST have a config-response from the FE with
          priority 5.\n"
        title: 4.2.1.2.  Higher-Priority, Reliable Channel
      - contents:
        - "4.2.1.3.  Medium-Priority, Semi-Reliable Channel\n   The medium-priority
          (MP) channel uses SCTP-PR on port 6705.  SCTP\n   PPID 22 MUST be used for
          all messages on the MP channel.  Time limits\n   on how long a message is
          valid are set on each outgoing message.\n   This channel is used for events
          from the FE to the CE that are\n   obsoleted over time.  Events that are
          accumulative in nature and are\n   recoverable by the CE (by issuing a query
          to the FE) can tolerate\n   lost events and therefore should use this channel.
          \ For example, a\n   generated event that carries the value of a counter
          that is\n   monotonically incrementing is fit to use this channel.\n   PL
          priority 3 MUST be used for PL messages on this channel.  The\n   following
          PL messages MUST use the MP channel for transport:\n   o  Event Notification
          (default priority: 3)\n   If PL priorities outside of the specified priority,
          PPID, or PL\n   message type other than the above are received on the MP
          channel,\n   then the PL message MUST be dropped.\n"
        title: 4.2.1.3.  Medium-Priority, Semi-Reliable Channel
      - contents:
        - "4.2.1.4.  Lower-Priority, Unreliable Channel\n   The lower-priority (LP)
          channel uses SCTP port 6706.  SCTP PPID 23 is\n   used for all messages
          on the LP channel.  The LP channel also MUST\n   use SCTP-PR with lower
          timeout values than the MP channel.  The\n   reason an unreliable channel
          is used for redirect messages is to\n   allow the control protocol at both
          the CE and its peer-endpoint to\n   take charge of how the end-to-end semantics
          of the said control\n   protocol's operations.  For example:\n   1.  Some
          control protocols are reliable in nature, therefore making\n       this
          channel reliable introduces an extra layer of reliability\n       that could
          be harmful.  So any end-to-end retransmits will happen\n       remotely.\n
          \  2.  Some control protocols may desire having obsolescence of messages\n
          \      over retransmissions; making this channel reliable contradicts\n
          \      that desire.\n   Given ForCES PL heartbeats are traffic sensitive,
          sending them over\n   the LP channel also makes sense.  If the other end
          is not processing\n   other channels, it will eventually get heartbeats;
          and if it is busy\n   processing other channels, heartbeats will be obsoleted
          locally over\n   time (and it does not matter if they did not make it).\n
          \  PL priorities 1-2 MUST be used for PL messages on this channel.  PL\n
          \  messages that MUST use the MP channel for transport are:\n   o  PacketRedirect
          (default priority: 2)\n   o  Heartbeat (default priority: 1)\n   If PL priorities
          outside of the specified priority range, PPID, or PL\n   message types other
          than the above are received on the LP channel,\n   then the PL message MUST
          be dropped.\n"
        title: 4.2.1.4.  Lower-Priority, Unreliable Channel
      - contents:
        - "4.2.1.5.  Scheduling of the Three Channels\n   In processing the sending
          and receiving of the PL messages, the TML\n   core uses strict priority
          work-conserving scheduling, as shown in\n   Figure 5.\n   This means that
          the HP messages are always processed first until\n   there are no more left.
          \ The LP channel is processed only if channels\n   that are a higher priority
          than itself have no messages left to\n   process.  This means that under
          a congestion situation, a higher-\n   priority channel with sufficient messages
          that occupy the available\n   bandwidth would starve lower-priority channel(s).\n
          \  The design intent of the SCTP TML is to tie processing\n   prioritization,
          as described in Section 4.2.1.1, and transport\n   congestion control to
          provide implicit node congestion control.  This\n   is further detailed
          in Appendix A.2.\n   It should be emphasized that the work scheduling prioritization\n
          \  scheme prescribed in this document is receiver-based processing.\n   Fully
          arrived packets on any of the channels are a source of work\n   whose output
          may result in transmitted packets.  However, we have no\n   control on the
          order in which the SCTP/OS/network chooses to send\n   transmitted packets
          across and make them available to the receiver.\n   This is a limitation
          that we try to ameliorate by our choice of\n   channel properties, ForCES
          message grouping, and the tying of CE and\n   FE work scheduling.  While
          that helps us ameliorate some of these\n   issues, it does not fully resolve
          all.\n   From a ForCES perspective, we can tolerate some reordering.  For\n
          \  example, if an FE transmits a config response (HP) followed by 10000\n
          \  OSPF redirect packets (LP) and the CE gets 5 OSPF redirects (LP)\n   first
          before the config response (HP), that is tolerable.  What\n   matters is
          the CE gets to processing the HP message soon (instead of\n   sitting in
          long periods of time processing OSPF packets that would\n   have happened
          if we use a single socket with three streams).  This is\n   particularly
          important in order to deal with node overload well, as\n   discussed in
          Section 4.2.2.6.\n          SCTP channel            +----------+\n          Work
          available          |   DONE   +---<--<--+\n              |                   +---+------+
          \        |\n              Y                                        ^\n              |
          \        +-->--+         +-->---+       |\n      +-->-->-+         |     |
          \        |      |       |\n      |       |         |     |         |      |
          \      ^\n      |       ^         ^     v         ^      v       |\n      ^
          \     / \\        |     |         |      |       |\n      |     /   \\       |
          \    ^         |      ^       ^\n      |    / Is  \\      |    / \\        |
          \    / \\      |\n      |   / there \\     |   /Is \\       |    /Is \\
          \    |\n      ^  / HP work \\    ^  /there\\      ^   /there\\    ^\n      |
          \ \\    ?    /    | /MP work\\     |  /LP work\\   |\n      |   \\       /
          \    | \\    ?  /     |  \\   ?   /   |\n      |    \\     /      |  \\
          \    /      |   \\     /    ^\n      |     \\   /       ^   \\   /       ^
          \   \\   /     |\n      |      \\ /        |    \\ /        |     \\ /      |\n
          \     ^       Y-->-->-->+     Y-->-->-->+      Y->->->-+\n      |       |
          \   NO         |    NO          |  NO\n      |       |               |                |\n
          \     |       Y               Y                Y\n      |       | YES           |
          YES            | YES\n      ^       |               |                |\n
          \     |       Y               Y                Y\n      |  +----+------+
          \   +---|-------+   +----|------+\n      |  |- process  |    |- process
          \ |   |- process  |\n      |  |  HP work  |    |  MP work  |   | LP work
          \  |\n      |  +------+----+    +-----+-----+   +-----+-----+\n      |         |
          \              |               |\n      ^         Y               Y               Y\n
          \     |         |               |               |\n      |         Y               Y
          \              Y\n      +--<--<---+--<--<----<----+-----<---<-----+\n            Figure
          5: SCTP TML Strict Priority Scheduling\n"
        title: 4.2.1.5.  Scheduling of the Three Channels
      - contents:
        - "4.2.1.6.  SCTP TML Parameterization\n   The following is a list of parameters
          needed for booting the TML.  It\n   is expected these parameters will be
          extracted via the FEM/CEM\n   interface for each PL ID.\n   1.  The IP address(es)
          or a resolvable DNS/hostname(s) of the CE/FE.\n   2.  Whether or not to
          use IPsec.  If IPsec is used, how to\n       parameterize the different
          required ciphers, keys, etc., as\n       described in Section 7.1\n   3.
          \ The HP SCTP port, as discussed in Section 4.2.1.2.  The default\n       HP
          port value is 6704 (Section 6).\n   4.  The MP SCTP port, as discussed in
          Section 4.2.1.3.  The default\n       MP port value is 6705 (Section 6).\n
          \  5.  The LP SCTP port, as discussed in Section 4.2.1.4.  The default\n
          \      LP port value is 6706 (Section 6).\n"
        title: 4.2.1.6.  SCTP TML Parameterization
      title: 4.2.1.  SCTP TML Channels
    - contents:
      - "4.2.2.  Satisfying TML Requirements\n   [RFC5810], Section 5 lists requirements
        that a TML needs to meet.\n   This section describes how the SCTP TML satisfies
        those requirements.\n"
      - contents:
        - "4.2.2.1.  Satisfying Reliability Requirement\n   As mentioned earlier,
          a shade of reliability ranges is possible in\n   SCTP.  Therefore, this
          requirement is met.\n"
        title: 4.2.2.1.  Satisfying Reliability Requirement
      - contents:
        - "4.2.2.2.  Satisfying Congestion Control Requirement\n   Congestion control
          is built into SCTP.  Therefore, this requirement\n   is met.\n"
        title: 4.2.2.2.  Satisfying Congestion Control Requirement
      - contents:
        - "4.2.2.3.  Satisfying Timeliness and Prioritization Requirement\n   By using
          three sockets in conjunction with the partial-reliability\n   feature [RFC3758],
          both timeliness and prioritization requirements\n   are addressed.\n"
        title: 4.2.2.3.  Satisfying Timeliness and Prioritization Requirement
      - contents:
        - "4.2.2.4.  Satisfying Addressing Requirement\n   There are no extra headers
          required for SCTP to fulfill this\n   requirement.  SCTP can be told to
          replicast packets to multiple\n   destinations.  The TML implementation
          will need to translate PL\n   addresses to a variety of unicast IP addresses
          in order to emulate\n   multicast and broadcast PL addresses.\n"
        title: 4.2.2.4.  Satisfying Addressing Requirement
      - contents:
        - "4.2.2.5.  Satisfying High-Availability Requirement\n   Transport link resiliency
          is one of SCTP's strongest points.  Failure\n   detection and recovery is
          built in, as mentioned earlier.\n   o  The SCTP multi-homing feature is
          used to provide path diversity.\n      Should one of the peer IP addresses
          become unreachable, the others\n      are used without needing lower-layer
          convergence (routing, for\n      example) or even the TML becoming aware.\n
          \  o  SCTP heartbeats and data transmission thresholds are used on a\n      per-peer
          IP address to detect reachability faults.  The faults\n      could be a
          result of an unreachable address or peer, which may be\n      caused by
          a variety of reasons, like interface, network, or\n      endpoint failures.
          \ The cause of the fault is noted.\n   o  With the ADDIP feature, one can
          migrate IP addresses to other\n      nodes at runtime.  This is not unlike
          the Virtual Router\n      Redundancy Protocol (VRRP) [RFC5798] use.  This
          feature is used in\n      addition to multi-homing in a planned migration
          of activity from\n      one FE/CE to another.  In such a case, part of the
          provisioning\n      recipe at the CE for replacing an FE involves migrating
          activity\n      of one FE to another.\n"
        title: 4.2.2.5.  Satisfying High-Availability Requirement
      - contents:
        - "4.2.2.6.  Satisfying Node Overload Prevention Requirement\n   The architecture
          of this TML defines three separate channels, one per\n   socket, to be used
          within any FE-CE setup.  The work scheduling\n   design for processing the
          TML channels (Section 4.2.1.5) is a strict\n   priority.  A fundamental
          desire of the strict prioritization is to\n   ensure that more important
          processing work always gets node resources\n   over less important work.\n
          \  When a ForCES node CPU is overwhelmed because the incoming packet\n   rate
          is higher than it can keep up with, the channel queues grow and\n   transport
          congestion subsequently follows.  By virtue of using SCTP,\n   the congestion
          is propagated back to the source of the incoming\n   packets and eventually
          alleviated.\n   The HP channel work gets prioritized at the expense of the
          MP, which\n   gets prioritized over LP channels.  The preferential scheduling
          only\n   kicks in when there is node overload regardless of whether there
          is\n   transport congestion.  As a result of the preferential work\n   treatment,
          the ForCES node achieves a robust steady processing\n   capacity.  Refer
          to Appendix A.2 for details on scheduling.\n   For an example of how the
          overload prevention works, consider a\n   scenario where an overwhelming
          amount of redirected packets (from\n   outside the NE) coming into the NE
          may overload the FE while it has\n   outstanding config work from the CE.
          \ In such a case, the FE, while\n   it is busy processing config requests
          from the CE, essentially\n   ignores processing the redirect packets on
          the LP channel.  If enough\n   redirect packets accumulate, they are dropped
          either because the LP\n   channel threshold is exceeded or because they
          are obsoleted.  If on\n   the other hand, the FE has successfully processed
          the higher-priority\n   channels and their related work, then it can proceed
          and process the\n   LP channel.  So as demonstrated in this case, the TML
          ties transport\n   congestion and node overload implicitly together.\n"
        title: 4.2.2.6.  Satisfying Node Overload Prevention Requirement
      - contents:
        - "4.2.2.7.  Satisfying Encapsulation Requirement\n   The SCTP TML sets SCTP
          PPIDs to identify channels used as described\n   in Section 4.2.1.1.\n"
        title: 4.2.2.7.  Satisfying Encapsulation Requirement
      title: 4.2.2.  Satisfying TML Requirements
    title: 4.2.  Meeting TML Requirements
  title: 4.  SCTP TML Overview
- contents:
  - "5.  SCTP TML Channel Work\n   There are two levels of TML channel work within
    an NE when a ForCES\n   node (CE or FE) is connected to multiple other ForCES
    nodes:\n   1.  NE-level I/O work where a ForCES node (CE or FE) needs to choose\n
    \      which of the peer nodes to process.\n   2.  Node-level I/O work where a
    ForCES node, handles the three SCTP\n       TML channels separately for each single
    ForCES endpoint.\n   NE-level scheduling definition is left up to the implementation
    and\n   is considered out of scope for this document.  Appendix A.4 briefly\n
    \  discusses some constraints about which an implementer needs to worry.\n   This
    document provides suggestions on SCTP channel work\n   implementation in Appendix
    A.\n   The FE SHOULD do channel connections to the CE in the order of\n   incrementing
    priorities, i.e., LP socket first, followed by MP, and\n   ending with HP socket
    connection.  The CE, however, MUST NOT assume\n   that there is ordering of socket
    connections from any FE.\n"
  title: 5.  SCTP TML Channel Work
- contents:
  - "6.  IANA Considerations\n   Following the policies outlined in \"Guidelines for
    Writing an IANA\n   Considerations Section in RFCs\" [RFC5226], the following
    namespaces\n   are defined in ForCES SCTP TML.\n   o  SCTP port 6704 for the HP
    channel, 6705 for the MP channel, and\n      6706 for the LP channel.\n   o  SCTP
    Payload Protocol ID (PPID) 21 for the HP channel (ForCES-HP),\n      22 for the
    MP channel (ForCES-MP), and 23 for the LP channel\n      (ForCES-LP).\n"
  title: 6.  IANA Considerations
- contents:
  - "7.  Security Considerations\n   The SCTP TML provides the following security
    services to the PL:\n   o  A mechanism to authenticate ForCES CEs and FEs at the
    transport\n      level in order to prevent the participation of unauthorized CEs\n
    \     and unauthorized FEs in the control and data path processing of a\n      ForCES
    NE.\n   o  A mechanism to ensure message authentication of PL data and\n      headers
    transferred from the CE to FE (and vice versa) in order to\n      prevent the
    injection of incorrect data into PL messages.\n   o  A mechanism to ensure the
    confidentiality of PL data and headers\n      transferred from the CE to FE (and
    vice versa), in order to\n      prevent disclosure of PL information transported
    via the TML.\n   Security choices provided by the TML are made by the operator
    and\n   take effect during the pre-association phase of the ForCES protocol.\n
    \  An operator may choose to use all, some or none of the security\n   services
    provided by the TML in a CE-FE connection.\n   When operating under a secured
    environment, or for other operational\n   concerns (in some cases performance
    issues) the operator may turn off\n   all the security functions between CE and
    FE.\n   IP Security Protocol (IPsec) [RFC4301] is used to provide needed\n   security
    mechanisms.\n   IPsec is an IP-level security scheme transparent to the higher-layer\n
    \  applications and therefore can provide security for any transport\n   layer
    protocol.  This gives IPsec the advantage that it can be used\n   to secure everything
    between the CE and FE without expecting the TML\n   implementation to be aware
    of the details.\n   The IPsec architecture is designed to provide message integrity
    and\n   message confidentiality outlined in the TML security requirements\n   [RFC5810].
    \ Mutual authentication and key exchange protocol are\n   provided by Internet
    Key Exchange (IKE) [RFC2409].\n"
  - contents:
    - "7.1.  IPsec Usage\n   A ForCES FE or CE MUST support the following:\n   o  Internet
      Key Exchange (IKE)[RFC2409] with certificates for\n      endpoint authentication.\n
      \  o  Transport Mode Encapsulating Security Payload (ESP) [RFC4303].\n   o  HMAC-SHA1-96
      [RFC2404] for message integrity protection\n   o  AES-CBC with 128-bit keys
      [RFC3602] for message confidentiality.\n   o  Replay protection [RFC4301].\n
      \  A compliant implementation SHOULD provide operational means for\n   configuring
      the CE and FE to negotiate other cipher suites and even\n   use manual keying.\n"
    - contents:
      - "7.1.1.  SAD and SPD Setup\n   To minimize the operational configuration,
        it is RECOMMENDED that\n   only the IANA-issued SCTP protocol number (132)
        be used as a selector\n   in the Security Policy Database (SPD) for ForCES.
        \ In such a case,\n   only a single SPD and SAD entry is needed.\n   Setup
        MAY alternatively extend the above policy so that it uses the\n   three SCTP
        TML port numbers as SPD selectors.  But as noted above,\n   this choice will
        require an increased number of SPD entries.\n   In scenarios where multiple
        IP addresses are used within a single\n   association, and there is desire
        to configure different policies on a\n   per-IP address, then following [RFC3554]
        is RECOMMENDED.\n"
      title: 7.1.1.  SAD and SPD Setup
    title: 7.1.  IPsec Usage
  title: 7.  Security Considerations
- contents:
  - "8.  Acknowledgements\n   The authors would like to thank Joel Halpern, Michael
    Tuxen, Randy\n   Stewart, Evangelos Haleplidis, Chuanhuang Li, Lars Eggert, Avshalom\n
    \  Houri, Adrian Farrel, Juergen Quittek, Magnus Westerlund, and Pasi\n   Eronen
    for engaging us in discussions that have made this document\n   better.\n   Ross
    Callon was an excellent manager who persevered in providing us\n   guidance and
    Joel Halpern was an excellent document shepherd without\n   whom this document
    would have taken longer to publish.\n"
  title: 8.  Acknowledgements
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [RFC2404]  Madson, C. and R. Glenn, \"The Use of HMAC-SHA-1-96 within\n
      \             ESP and AH\", RFC 2404, November 1998.\n   [RFC2409]  Harkins,
      D. and D. Carrel, \"The Internet Key Exchange\n              (IKE)\", RFC 2409,
      November 1998.\n   [RFC3554]  Bellovin, S., Ioannidis, J., Keromytis, A., and
      R.\n              Stewart, \"On the Use of Stream Control Transmission\n              Protocol
      (SCTP) with IPsec\", RFC 3554, July 2003.\n   [RFC3602]  Frankel, S., Glenn,
      R., and S. Kelly, \"The AES-CBC Cipher\n              Algorithm and Its Use
      with IPsec\", RFC 3602,\n              September 2003.\n   [RFC3758]  Stewart,
      R., Ramalho, M., Xie, Q., Tuexen, M., and P.\n              Conrad, \"Stream
      Control Transmission Protocol (SCTP)\n              Partial Reliability Extension\",
      RFC 3758, May 2004.\n   [RFC4301]  Kent, S. and K. Seo, \"Security Architecture
      for the\n              Internet Protocol\", RFC 4301, December 2005.\n   [RFC4303]
      \ Kent, S., \"IP Encapsulating Security Payload (ESP)\",\n              RFC
      4303, December 2005.\n   [RFC4960]  Stewart, R., \"Stream Control Transmission
      Protocol\",\n              RFC 4960, September 2007.\n   [RFC5226]  Narten,
      T. and H. Alvestrand, \"Guidelines for Writing an\n              IANA Considerations
      Section in RFCs\", BCP 26, RFC 5226,\n              May 2008.\n   [RFC5810]
      \ Doria, A., Ed., Hadi Salim, J., Ed., HAAS, R., Ed.,\n              Khosravi,
      H., Ed., Wang, W., Ed., Dong, L., Gopal, R., and\n              J. Halpern,
      \"Forwarding and Control Element Separation\n              (ForCES) Protocol
      Specification\", RFC 5810, March 2010.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [RFC3654]  Khosravi, H. and T. Anderson, \"Requirements
      for Separation\n              of IP Control and Forwarding\", RFC 3654, November
      2003.\n   [RFC3746]  Yang, L., Dantu, R., Anderson, T., and R. Gopal,\n              \"Forwarding
      and Control Element Separation (ForCES)\n              Framework\", RFC 3746,
      April 2004.\n   [RFC5812]  Halpern, J. and J. Hadi Salim, \"Forwarding and Control\n
      \             Element Separation (ForCES) Forwarding Element Model\",\n              RFC
      5812, March 2010.\n   [RFC5798]  Nadas, S., Ed., \"Virtual Router Redundancy
      Protocol (VRRP)\n              Version 3 for IPv4 and IPv6\", RFC 5798, March
      2010.\n   [TSVWG-SCTPSOCKET]\n              Stewart, R., Poon, K., Tuexen, M.,
      Yasevich, V., and P.\n              Lei, \"Sockets API Extensions for Stream
      Control\n              Transmission Protocol (SCTP)\", Work in Progress,\n              March
      2010.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Appendix A.  Suggested SCTP TML Channel Work Implementation\n   As mentioned
    in Section 5, there are two levels of TML channel work\n   within an NE when a
    ForCES node (CE or FE) is connected to multiple\n   other ForCES nodes:\n   1.
    \ NE-level I/O work where a ForCES node (CE or FE) needs to choose\n       which
    of the peer nodes to process.\n   2.  Node-level I/O work where a ForCES node,
    handles the three SCTP\n       TML channels separately for each single ForCES
    endpoint.\n   NE-level scheduling definition is left up to the implementation
    and\n   is considered out of scope for this document.  Appendix A.4 briefly\n
    \  discusses some constraints about which an implementer needs to worry.\n   This
    document, and in particular Appendix A.1, Appendix A.2, and\n   Appendix A.3 discuss
    details of node-level I/O work.\n"
  - contents:
    - "A.1.  SCTP TML Channel Initialization\n   As discussed in Section 5, it is
      recommended that the FE SHOULD do\n   socket connections to the CE in the order
      of incrementing priorities,\n   i.e., LP socket first, followed by MP, and ending
      with HP socket\n   connection.  The CE, however, MUST NOT assume that there
      is ordering\n   of socket connections from any FE.  Appendix B.1 has more details
      on\n   the expected initialization of SCTP channel work.\n"
    title: A.1.  SCTP TML Channel Initialization
  - contents:
    - "A.2.  Channel Work Scheduling\n   This section provides high-level details
      of the scheduling view of\n   the SCTP TML core (Section 4.2.1).  A practical
      scheduler\n   implementation takes care of many little details (such as timers,\n
      \  work quanta, etc.) not described in this document.  It is left to the\n   implementer
      to take care of those details.\n   The CE(s) and FE(s) are coupled together
      in the principles of the\n   scheduling scheme described here to tie together
      node overload with\n   transport congestion.  The design intent is to provide
      the highest\n   possible robust work throughput for the NE under any network
      or\n   processing congestion.\n"
    - contents:
      - "A.2.1.  FE Channel Work Scheduling\n   The FE scheduling, in priority order,
        needs to I/O process:\n   1.  The HP channel I/O in the following priority
        order:\n       1.  Transmitting back to the CE any outstanding result of\n
        \          executed work via the HP channel transmit path.\n       2.  Taking
        new incoming work from the CE that creates ForCES work\n           to be executed
        by the FE.\n   2.  ForCES events that result in transmission of unsolicited
        ForCES\n       packets to the CE via the MP channel.\n   3.  Incoming Redirect
        work in the form of control packets that come\n       from the CE via LP channel.
        \ After redirect processing, these\n       packets get sent out on external
        (to the NE) interface.\n   4.  Incoming Redirect work in the form of control
        packets that come\n       from other NEs via external (to the NE) interfaces.
        \ After some\n       processing, such packets are sent to the CE.\n   It is
        worth emphasizing, at this point again, that the SCTP TML\n   processes the
        channel work in strict priority.  For example, as long\n   as there are messages
        to send to the CE on the HP channel, they will\n   be processed first until
        there are no more left before processing the\n   next priority work (which
        is to read new messages on the HP channel\n   incoming from the CE).\n"
      title: A.2.1.  FE Channel Work Scheduling
    - contents:
      - "A.2.2.  CE Channel Work Scheduling\n   The CE scheduling, in priority order,
        needs to deal with:\n   1.  The HP channel I/O in the following priority order:\n
        \      1.  Process incoming responses to requests of work it made to the\n
        \          FE(s).\n       2.  Transmit any outstanding HP work it needs the
        FE(s) to\n           complete.\n   2.  Incoming ForCES events from the FE(s)
        via the MP channel.\n   3.  Outgoing Redirect work in the form of control
        packets that get\n       sent from the CE via LP channel destined to external
        (to the NE)\n       interface on FE(s).\n   4.  Incoming Redirect work in
        the form of control packets that come\n       from other NEs via external
        interfaces (to the NE) on the FE(s).\n   It is worth repeating, for emphasis,
        that the SCTP TML processes the\n   channel work in strict priority.  For
        example, if there are messages\n   incoming from an FE on the HP channel,
        they will be processed first\n   until there are no more left before processing
        the next priority\n   work, which is to transmit any outstanding HP channel
        messages going\n   to the FE.\n"
      title: A.2.2.  CE Channel Work Scheduling
    title: A.2.  Channel Work Scheduling
  - contents:
    - "A.3.  SCTP TML Channel Termination\n   Appendix B.2 describes a controlled
      disassociation of the FE from the\n   NE.\n   It is also possible for connectivity
      to be lost between the FE and CE\n   on one or more sockets.  In cases where
      SCTP multi-homing features\n   are used for path availability, the disconnection
      of a socket will\n   only occur if all paths are unreachable; otherwise, SCTP
      will ensure\n   reachability.  In the situation of a total connectivity loss
      of even\n   one SCTP socket, it is recommended that the FE and CE SHOULD assume
      a\n   state equivalent to ForCES Association Teardown being issued and\n   follow
      the sequence described in Appendix B.2.\n   A CE could also disconnect sockets
      to an FE to indicate an \"emergency\n   teardown\".  The \"emergency teardown\"
      may be necessary in cases when a\n   CE needs to disconnect an FE but knows
      that an FE is busy processing\n   a lot of outstanding commands (some of which
      the FE hasn't gotten\n   around to processing, yet).  By virtue of the CE closing
      the\n   connections, the FE will immediately be asynchronously notified and\n
      \  will not have to process any outstanding commands from the CE.\n"
    title: A.3.  SCTP TML Channel Termination
  - contents:
    - "A.4.  SCTP TML NE-Level Channel Scheduling\n   In handling NE-level I/O work,
      an implementation needs to worry about\n   being both fair and robust across
      peer ForCES nodes.\n   Fairness is desired so that each peer node makes progress
      across the\n   NE.  For the sake of illustration, consider two FEs connected
      to a\n   CE; whereas one FE has a few HP messages that need to be processed
      by\n   the CE, another may have infinite HP messages.  The scheduling scheme\n
      \  may decide to use a quota scheduling system to ensure that the second\n   FE
      does not hog the CE cycles.\n   Robustness is desired so that the NE does not
      succumb to a Denial-of-\n   Service (DoS) attack from hostile entities and always
      achieves a\n   maximum stable workload processing level.  For the sake of\n
      \  illustration, consider again two FEs connected to a CE.  Consider FE1\n   as
      having a large number of HP and MP messages and FE2 having a large\n   number
      of MP and LP messages.  The scheduling scheme needs to ensure\n   that while
      FE1 always gets its messages processed, at some point we\n   allow FE2 messages
      to be processed.  A promotion and preemption-based\n   scheduling could be used
      by the CE to resolve this issue.\n"
    title: A.4.  SCTP TML NE-Level Channel Scheduling
  title: Appendix A.  Suggested SCTP TML Channel Work Implementation
- contents:
  - "Appendix B.  Suggested Service Interface\n   This section outlines a high-level
    service interface between FEM/CEM\n   and TML, the PL and TML, and between local
    and remote TMLs.  The\n   intent of this interface discussion is to provide general
    guidelines.\n   The implementer is expected to care of details and even follow
    a\n   different approach if needed.\n   The theory of operation for the PL-TML
    service is as follows:\n   1.  The PL starts up and bootstraps the TML.  The end
    result of a\n       successful TML bootstrap is that the CE TML and the FE TML\n
    \      connect to each other at the transport level.\n   2.  Transmission and
    reception of the PL messages commences after a\n       successful TML bootstrap.
    \ The PL uses send and receive PL-TML\n       interfaces to communicate to its
    peers.  The TML is agnostic to\n       the nature of the messages being sent or
    received.  The first\n       message exchanges that happen are to establish ForCES\n
    \      association.  Subsequent messages may be either unsolicited\n       events
    from the FE PL, control message redirects to/from the CE\n       to/from FE, or
    configuration from the CE to the FE, and their\n       responses flowing from
    the FE to the CE.\n   3.  The PL does a shutdown of the TML after terminating
    ForCES\n       association.\n"
  - contents:
    - "B.1.  TML Bootstrapping\n   Figure 6 illustrates a flow for the TML bootstrapped
      by the PL.\n   When the PL starts up (possibly after some internal initialization),\n
      \  it boots up the TML.  The TML first interacts with the FEM/CEM and\n   acquires
      the necessary TML parameterization (Section 4.2.1.6).  Next,\n   the TML uses
      the information it retrieved from the FEM/CEM interface\n   to initialize itself.\n
      \  The TML on the FE proceeds to connect the three channels to the CE.\n   The
      socket interface is used for each of the channels.  The TML\n   continues to
      re-try the connections to the CE until all three\n   channels are connected.
      \ It is advisable that the number of\n   connection retry attempts and the time
      between each retry is also\n   configurable via the FEM.  On failure to connect
      one or more\n   channels, and after the configured number of retry thresholds
      is\n   exceeded, the TML will return an appropriate failure indicator to the\n
      \  PL.  On success (as shown in Figure 6), a success indication is\n   presented
      to the PL.\n   FE PL      FE TML           FEM  CEM        CE TML              CE
      PL\n     |            |             |    |            |                    |\n
      \    |            |             |    |            |      Bootup        |\n     |
      \           |             |    |            |<-------------------|\n     |  Bootup
      \   |             |    |            |                    |\n     |----------->|
      \            |    |get CEM info|                    |\n     |            |get
      FEM info |    |<-----------|                    |\n     |            |------------>|
      \   ~            ~                    |\n     |            ~             ~    |----------->|
      \                   |\n     |            |<------------|                 |                    |\n
      \    |            |                               |-initialize TML     |\n     |
      \           |                               |-create the 3 chans.|\n     |            |
      \                              | to listen to FEs   |\n     |            |                               |
      \                   |\n     |            |-initialize TML                |Bootup
      success      |\n     |            |-create the 3 chans. locally   |------------------->|\n
      \    |            |-connect 3 chans. remotely     |                    |\n     |
      \           |------------------------------>|                    |\n     |            ~
      \                              ~ - FE TML connected ~\n     |            ~                               ~
      - FE TML info init ~\n     |            | channels connected            |                    |\n
      \    |            |<------------------------------|                    |\n     |
      Bootup     |                               |                    |\n     | succeeded
      \ |                               |                    |\n     |<-----------|
      \                              |                    |\n     |            |                               |
      \                   |\n                     Figure 6: SCTP TML Bootstrapping\n
      \  On the CE, things are slightly different.  After initializing from\n   the
      CEM, the TML on the CE side proceeds to initialize the three\n   channels to
      listen to remote connections from the FEs.  The success\n   or failure indication
      is passed on to the CE PL (in the same manner\n   as was done in the FE).\n
      \  Post bootup, the CE TML waits for connections from the FEs.  Upon a\n   successful
      connection by an FE, the CE TML level keeps track of the\n   transport-level
      details of the FE.  Note, at this stage only\n   transport-level connection
      has been established; ForCES-level\n   association follows using send/receive
      PL-TML interfaces (refer to\n   Appendix B.3 and Figure 8).\n"
    title: B.1.  TML Bootstrapping
  - contents:
    - "B.2.  TML Shutdown\n   Figure 7 shows an example of an FE shutting down the
      TML.  It is\n   assumed at this point that the ForCES Association Teardown has
      been\n   issued by the CE.  It should also be noted that different\n   implementations
      may have different procedures for cleaning up state,\n   etc.\n   When the FE
      PL issues a shutdown to its TML for a specific PL ID, the\n   TML releases all
      the channel connections to the CE.  This is achieved\n   by closing the sockets
      used to communicate to the CE.  This results\n   in the stack sending a SCTP
      shutdown, which is received on the CE.\n   FE PL      FE TML                      CE
      TML              CE PL\n     |            |                         |                    |\n
      \    |  Shutdown  |                         |                    |\n     |----------->|
      \                        |                    |\n     |            |-disconnect
      3 chans.     |                    |\n     |            |-SCTP level shutdown
      \    |                    |\n     |            |------------------------>|                    |\n
      \    |            |                         |                    |\n     |            |
      \                        |TML detects shutdown|\n     |            |                         |-FE
      TML info cleanup|\n     |            |                         |-optionally
      tell PL |\n     |            |                         |------------------->|\n
      \    |            |                         |                    |\n     |            |-
      clean up any state of  |                    |\n     |            |-channels
      disconnected   |                    |\n     |            |<------------------------|
      \                   |\n     |            |-SCTP shutdown ACK       |                    |\n
      \    |            |                         |                    |\n     | Shutdown
      \  |                         |                    |\n     | succeeded  |                         |
      \                   |\n     |<-----------|                         |                    |\n
      \    |            |                         |                    |\n                        Figure
      7: FE Shutting Down\n   On the CE side, a TML disconnection would result in
      possible cleanup\n   of the FE state.  Optionally, depending on the implementation,
      there\n   may be need to inform the PL about the TML disconnection.  The CE-\n
      \  stack-level SCTP sends an acknowledgement to the FE TML in response\n   to
      the earlier SCTP shutdown.\n"
    title: B.2.  TML Shutdown
  - contents:
    - "B.3.  TML Sending and Receiving\n   The TML should be agnostic to the content
      of the PL messages, or\n   their operations.  The PL should provide enough information
      to the\n   TML for it to assign an appropriate priority and loss behavior to
      the\n   message.  Figure 8 shows an example of a message exchange originated\n
      \  at the FE and sent to the CE (such as a ForCES association message),\n   which
      illustrates all the necessary service interfaces for sending\n   and receiving.\n
      \  When the FE PL sends a message to the TML, the TML is expected to\n   pick
      one of HP/MP/LP channels and send out the ForCES message.\n   FE PL       FE
      TML           CE TML                CE PL\n      |            |              |
      \                     |\n      |PL send     |              |                      |\n
      \     |----------->|              |                      |\n      |            |
      \             |                      |\n      |            |              |
      \                     |\n      |            |-pick channel |                      |\n
      \     |            |-TML  Send    |                      |\n      |            |------------->|
      \                     |\n      |            |              |                      |\n
      \     |            |              |-TML Receive on chan. |\n      |            |
      \             |- mux to PL/PL recv   |\n      |            |              |--------------------->|\n
      \     |            |              |                      ~\n      |            |
      \             |                      ~ PL Process\n      |            |              |
      \                     ~\n      |            |              |  PL send             |\n
      \     |            |              |<---------------------|\n      |            |
      \             |-pick chan to send on |\n      |            |              |-TML
      send             |\n      |            |<-------------|                      |\n
      \     |            |-TML Receive  |                      |\n      |            |-mux
      to PL    |                      |\n      | PL Recv    |              |                      |\n
      \     |<---------- |              |                      |\n      |            |
      \             |                      |\n                       Figure 8: Send
      and Recv Flow\n   When the CE TML receives the ForCES message on the channel
      on which\n   it was sent, it demultiplexes the message to the CE PL.\n   The
      CE PL, after some processing (in this example, dealing with the\n   FE's association),
      sends the TML the response.  As in the case of FE\n   PL, the CE TML picks the
      channel to send on before sending.\n   The processing of the ForCES message
      upon arrival at the FE TML and\n   delivery to the FE PL is similar to the CE
      side equivalent as shown\n   above in Appendix B.3.\n"
    title: B.3.  TML Sending and Receiving
  title: Appendix B.  Suggested Service Interface
- contents:
  - "Authors' Addresses\n   Jamal Hadi Salim\n   Mojatatu Networks\n   Ottawa, Ontario\n
    \  Canada\n   EMail: hadi@mojatatu.com\n   Kentaro Ogawa\n   NTT Corporation\n
    \  3-9-11 Midori-cho\n   Musashino-shi, Tokyo  180-8585\n   Japan\n   EMail: ogawa.kentaro@lab.ntt.co.jp\n"
  title: Authors' Addresses
