- title: __initial_text__
  contents:
  - " Applying Generate Random Extensions And Sustain Extensibility (GREASE)\n   \
    \                       to TLS Extensibility\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes GREASE (Generate Random Extensions And\n\
    \   Sustain Extensibility), a mechanism to prevent extensibility failures\n  \
    \ in the TLS ecosystem.  It reserves a set of TLS protocol values that\n   may\
    \ be advertised to ensure peers correctly handle unknown values.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are candidates for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   https://www.rfc-editor.org/info/rfc8701.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction\n     1.1.  Requirements Language\n  \
    \ 2.  GREASE Values\n   3.  Client-Initiated Extension Points\n     3.1.  Client\
    \ Behavior\n     3.2.  Server Behavior\n   4.  Server-Initiated Extension Points\n\
    \     4.1.  Server Behavior\n     4.2.  Client Behavior\n   5.  Sending GREASE\
    \ Values\n   6.  IANA Considerations\n   7.  Security Considerations\n   8.  Normative\
    \ References\n   Acknowledgments\n   Author's Address\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The TLS protocol [RFC8446] includes several points of extensibility,\n\
    \   including the list of cipher suites and several lists of extensions.\n   The\
    \ values transmitted in these lists identify implementation\n   capabilities.\
    \  TLS follows a model where one side, usually the\n   client, advertises capabilities,\
    \ and the peer, usually the server,\n   selects them.  The responding side must\
    \ ignore unknown values so that\n   new capabilities may be introduced to the\
    \ ecosystem while maintaining\n   interoperability.\n   However, bugs may cause\
    \ an implementation to reject unknown values.\n   It will interoperate with existing\
    \ peers, so the mistake may spread\n   through the ecosystem unnoticed.  Later,\
    \ when new values are defined,\n   updated peers will discover that the metaphorical\
    \ joint in the\n   protocol has rusted shut and the new values cannot be deployed\n\
    \   without interoperability failures.\n   To avoid this problem, this document\
    \ reserves some currently unused\n   values for TLS implementations to advertise\
    \ at random.  Correctly\n   implemented peers will ignore these values and interoperate.\
    \  Peers\n   that do not tolerate unknown values will fail to interoperate,\n\
    \   revealing the mistake before it is widespread.\n   In keeping with the rusted\
    \ joint metaphor, this technique is called\n   \"GREASE\" (Generate Random Extensions\
    \ And Sustain Extensibility).\n"
- title: 1.1.  Requirements Language
  contents:
  - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n"
- title: 2.  GREASE Values
  contents:
  - "2.  GREASE Values\n   This document reserves a number of TLS protocol values,\
    \ referred to\n   as GREASE values.  These values were allocated sparsely to discourage\n\
    \   server implementations from conditioning on them.  For convenience,\n   they\
    \ were also chosen so all types share a number scheme with a\n   consistent pattern\
    \ while avoiding collisions with any existing\n   applicable registries in TLS.\n\
    \   The following values are reserved as GREASE values for cipher suites\n   and\
    \ Application-Layer Protocol Negotiation (ALPN) [RFC7301]\n   identifiers:\n \
    \     {0x0A,0x0A}\n      {0x1A,0x1A}\n      {0x2A,0x2A}\n      {0x3A,0x3A}\n \
    \     {0x4A,0x4A}\n      {0x5A,0x5A}\n      {0x6A,0x6A}\n      {0x7A,0x7A}\n \
    \     {0x8A,0x8A}\n      {0x9A,0x9A}\n      {0xAA,0xAA}\n      {0xBA,0xBA}\n \
    \     {0xCA,0xCA}\n      {0xDA,0xDA}\n      {0xEA,0xEA}\n      {0xFA,0xFA}\n \
    \  The following values are reserved as GREASE values for extensions,\n   named\
    \ groups, signature algorithms, and versions:\n      0x0A0A\n      0x1A1A\n  \
    \    0x2A2A\n      0x3A3A\n      0x4A4A\n      0x5A5A\n      0x6A6A\n      0x7A7A\n\
    \      0x8A8A\n      0x9A9A\n      0xAAAA\n      0xBABA\n      0xCACA\n      0xDADA\n\
    \      0xEAEA\n      0xFAFA\n   The values allocated above are thus no longer\
    \ available for use as\n   TLS or DTLS [RFC6347] version numbers.\n   The following\
    \ values are reserved as GREASE values for\n   PskKeyExchangeModes:\n      0x0B\n\
    \      0x2A\n      0x49\n      0x68\n      0x87\n      0xA6\n      0xC5\n    \
    \  0xE4\n"
- title: 3.  Client-Initiated Extension Points
  contents:
  - "3.  Client-Initiated Extension Points\n   Most extension points in TLS are offered\
    \ by the client and selected\n   by the server.  This section details client and\
    \ server behavior\n   around GREASE values for these.\n"
- title: 3.1.  Client Behavior
  contents:
  - "3.1.  Client Behavior\n   When sending a ClientHello, a client MAY behave as\
    \ follows:\n   *  A client MAY select one or more GREASE cipher suite values and\n\
    \      advertise them in the \"cipher_suites\" field.\n   *  A client MAY select\
    \ one or more GREASE extension values and\n      advertise them as extensions\
    \ with varying length and contents.\n   *  A client MAY select one or more GREASE\
    \ named group values and\n      advertise them in the \"supported_groups\" extension,\
    \ if sent.  It\n      MAY also send KeyShareEntry values for a subset of those\
    \ selected\n      in the \"key_share\" extension.  For each of these, the\n  \
    \    \"key_exchange\" field MAY be any value.\n   *  A client MAY select one or\
    \ more GREASE signature algorithm values\n      and advertise them in the \"signature_algorithms\"\
    \ or\n      \"signature_algorithms_cert\" extensions, if sent.\n   *  A client\
    \ MAY select one or more GREASE version values and\n      advertise them in the\
    \ \"supported_versions\" extension, if sent.\n   *  A client MAY select one or\
    \ more GREASE PskKeyExchangeMode values\n      and advertise them in the \"psk_key_exchange_modes\"\
    \ extension, if\n      sent.\n   *  A client MAY select one or more GREASE ALPN\
    \ identifiers and\n      advertise them in the \"application_layer_protocol_negotiation\"\
    \n      extension, if sent.\n   Clients MUST reject GREASE values when negotiated\
    \ by the server.  In\n   particular, the client MUST fail the connection if a\
    \ GREASE value\n   appears in any of the following:\n   *  The \"version\" value\
    \ in a ServerHello or HelloRetryRequest\n   *  The \"cipher_suite\" value in a\
    \ ServerHello\n   *  Any ServerHello extension\n   *  Any HelloRetryRequest, EncryptedExtensions,\
    \ or Certificate\n      extension in TLS 1.3\n   *  The \"namedcurve\" value in\
    \ a ServerKeyExchange for an Ephemeral\n      Elliptic Curve Diffie-Hellman (ECDHE)\
    \ cipher in TLS 1.2 [RFC5246]\n      or earlier\n   *  The signature algorithm\
    \ in a ServerKeyExchange signature in TLS\n      1.2 or earlier\n   *  The signature\
    \ algorithm in a server CertificateVerify signature in\n      TLS 1.3\n   Note\
    \ that this can be implemented without special processing on the\n   client. \
    \ The client is already required to reject unknown server-\n   selected values,\
    \ so it may leave GREASE values as unknown and reuse\n   the existing logic.\n"
- title: 3.2.  Server Behavior
  contents:
  - "3.2.  Server Behavior\n   When processing a ClientHello, servers MUST NOT treat\
    \ GREASE values\n   differently from any unknown value.  Servers MUST NOT negotiate\
    \ any\n   GREASE value when offered in a ClientHello.  Servers MUST correctly\n\
    \   ignore unknown values in a ClientHello and attempt to negotiate with\n   one\
    \ of the remaining parameters.  (There may not be any known\n   parameters remaining,\
    \ in which case parameter negotiation will fail.)\n   Note that these requirements\
    \ are restatements or corollaries of\n   existing server requirements in TLS.\n"
- title: 4.  Server-Initiated Extension Points
  contents:
  - "4.  Server-Initiated Extension Points\n   Some extension points are offered by\
    \ the server and selected by the\n   client.  This section details client and\
    \ server behavior around\n   GREASE values for these.\n"
- title: 4.1.  Server Behavior
  contents:
  - "4.1.  Server Behavior\n   When sending a CertificateRequest in TLS 1.3, a server\
    \ MAY behave as\n   follows:\n   *  A server MAY select one or more GREASE extension\
    \ values and\n      advertise them as extensions with varying length and contents.\n\
    \   *  A server MAY select one or more GREASE signature algorithm values\n   \
    \   and advertise them in the \"signature_algorithms\" or\n      \"signature_algorithms_cert\"\
    \ extensions, if present.\n   When sending a NewSessionTicket message in TLS 1.3,\
    \ a server MAY\n   select one or more GREASE extension values and advertise them\
    \ as\n   extensions with varying length and contents.\n   Servers MUST reject\
    \ GREASE values when negotiated by the client.  In\n   particular, the server\
    \ MUST fail the connection if a GREASE value\n   appears in any of the following:\n\
    \   *  Any Certificate extension in TLS 1.3\n   *  The signature algorithm in\
    \ a client CertificateVerify signature\n   Note that this can be implemented without\
    \ special processing on the\n   server.  The server is already required to reject\
    \ unknown client-\n   selected values, so it may leave GREASE values as unknown\
    \ and reuse\n   the existing logic.\n"
- title: 4.2.  Client Behavior
  contents:
  - "4.2.  Client Behavior\n   When processing a CertificateRequest or NewSessionTicket,\
    \ clients\n   MUST NOT treat GREASE values differently from any unknown value.\n\
    \   Clients MUST NOT negotiate any GREASE value when offered by the\n   server.\
    \  Clients MUST correctly ignore unknown values offered by the\n   server and\
    \ attempt to negotiate with one of the remaining parameters.\n   (There may not\
    \ be any known parameters remaining, in which case\n   parameter negotiation will\
    \ fail.)\n   Note that these requirements are restatements or corollaries of\n\
    \   existing client requirements in TLS.\n"
- title: 5.  Sending GREASE Values
  contents:
  - "5.  Sending GREASE Values\n   Implementations advertising GREASE values SHOULD\
    \ select them at\n   random.  This is intended to encourage implementations to\
    \ ignore all\n   unknown values rather than any individual value.  Implementations\n\
    \   MUST honor protocol specifications when sending GREASE values.  For\n   instance,\
    \ Section 4.2 of [RFC8446] forbids duplicate extension types\n   within a single\
    \ extension block.  Implementations sending multiple\n   GREASE extensions in\
    \ a single block must therefore ensure the same\n   value is not selected twice.\n\
    \   Implementations SHOULD balance diversity in GREASE advertisements\n   with\
    \ determinism.  For example, a client that randomly varies GREASE\n   value positions\
    \ for each connection may only fail against a broken\n   server with some probability.\
    \  This risks the failure being masked by\n   automatic retries.  A client that\
    \ positions GREASE values\n   deterministically over a period of time (such as\
    \ a single software\n   release) stresses fewer cases but is more likely to detect\
    \ bugs from\n   those cases.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   This document updates the \"TLS Cipher Suites\" registry,\
    \ available at\n   <https://www.iana.org/assignments/tls-parameters>:\n     |\
    \    Value    | Description | DTLS-OK | Recommended | Reference |\n     | {0x0A,0x0A}\
    \ |   Reserved  |    Y    |      N      | [RFC8701] |\n     | {0x1A,0x1A} |  \
    \ Reserved  |    Y    |      N      | [RFC8701] |\n     | {0x2A,0x2A} |   Reserved\
    \  |    Y    |      N      | [RFC8701] |\n     | {0x3A,0x3A} |   Reserved  | \
    \   Y    |      N      | [RFC8701] |\n     | {0x4A,0x4A} |   Reserved  |    Y\
    \    |      N      | [RFC8701] |\n     | {0x5A,0x5A} |   Reserved  |    Y    |\
    \      N      | [RFC8701] |\n     | {0x6A,0x6A} |   Reserved  |    Y    |    \
    \  N      | [RFC8701] |\n     | {0x7A,0x7A} |   Reserved  |    Y    |      N \
    \     | [RFC8701] |\n     | {0x8A,0x8A} |   Reserved  |    Y    |      N     \
    \ | [RFC8701] |\n     | {0x9A,0x9A} |   Reserved  |    Y    |      N      | [RFC8701]\
    \ |\n     | {0xAA,0xAA} |   Reserved  |    Y    |      N      | [RFC8701] |\n\
    \     | {0xBA,0xBA} |   Reserved  |    Y    |      N      | [RFC8701] |\n    \
    \ | {0xCA,0xCA} |   Reserved  |    Y    |      N      | [RFC8701] |\n     | {0xDA,0xDA}\
    \ |   Reserved  |    Y    |      N      | [RFC8701] |\n     | {0xEA,0xEA} |  \
    \ Reserved  |    Y    |      N      | [RFC8701] |\n     | {0xFA,0xFA} |   Reserved\
    \  |    Y    |      N      | [RFC8701] |\n            Table 1: Additions to the\
    \ TLS Cipher Suites Registry\n   This document updates the \"TLS Supported Groups\"\
    \ registry, available\n   at <https://www.iana.org/assignments/tls-parameters>:\n\
    \        | Value | Description | DTLS-OK | Recommended | Reference |\n       \
    \ |  2570 |   Reserved  |    Y    |      N      | [RFC8701] |\n        |  6682\
    \ |   Reserved  |    Y    |      N      | [RFC8701] |\n        | 10794 |   Reserved\
    \  |    Y    |      N      | [RFC8701] |\n        | 14906 |   Reserved  |    Y\
    \    |      N      | [RFC8701] |\n        | 19018 |   Reserved  |    Y    |  \
    \    N      | [RFC8701] |\n        | 23130 |   Reserved  |    Y    |      N  \
    \    | [RFC8701] |\n        | 27242 |   Reserved  |    Y    |      N      | [RFC8701]\
    \ |\n        | 31354 |   Reserved  |    Y    |      N      | [RFC8701] |\n   \
    \     | 35466 |   Reserved  |    Y    |      N      | [RFC8701] |\n        | 39578\
    \ |   Reserved  |    Y    |      N      | [RFC8701] |\n        | 43690 |   Reserved\
    \  |    Y    |      N      | [RFC8701] |\n        | 47802 |   Reserved  |    Y\
    \    |      N      | [RFC8701] |\n        | 51914 |   Reserved  |    Y    |  \
    \    N      | [RFC8701] |\n        | 56026 |   Reserved  |    Y    |      N  \
    \    | [RFC8701] |\n        | 60138 |   Reserved  |    Y    |      N      | [RFC8701]\
    \ |\n        | 64250 |   Reserved  |    Y    |      N      | [RFC8701] |\n   \
    \       Table 2: Additions to the TLS Supported Groups Registry\n   This document\
    \ updates the \"TLS ExtensionType Values\" registry,\n   available at <https://www.iana.org/assignments/tls-extensiontype-\n\
    \   values>:\n    | Value | Extension Name |   TLS 1.3   | Recommended | Reference\
    \ |\n    |  2570 |    Reserved    | CH, CR, NST |      N      | [RFC8701] |\n\
    \    |  6682 |    Reserved    | CH, CR, NST |      N      | [RFC8701] |\n    |\
    \ 10794 |    Reserved    | CH, CR, NST |      N      | [RFC8701] |\n    | 14906\
    \ |    Reserved    | CH, CR, NST |      N      | [RFC8701] |\n    | 19018 |  \
    \  Reserved    | CH, CR, NST |      N      | [RFC8701] |\n    | 23130 |    Reserved\
    \    | CH, CR, NST |      N      | [RFC8701] |\n    | 27242 |    Reserved    |\
    \ CH, CR, NST |      N      | [RFC8701] |\n    | 31354 |    Reserved    | CH,\
    \ CR, NST |      N      | [RFC8701] |\n    | 35466 |    Reserved    | CH, CR,\
    \ NST |      N      | [RFC8701] |\n    | 39578 |    Reserved    | CH, CR, NST\
    \ |      N      | [RFC8701] |\n    | 43690 |    Reserved    | CH, CR, NST |  \
    \    N      | [RFC8701] |\n    | 47802 |    Reserved    | CH, CR, NST |      N\
    \      | [RFC8701] |\n    | 51914 |    Reserved    | CH, CR, NST |      N    \
    \  | [RFC8701] |\n    | 56026 |    Reserved    | CH, CR, NST |      N      | [RFC8701]\
    \ |\n    | 60138 |    Reserved    | CH, CR, NST |      N      | [RFC8701] |\n\
    \    | 64250 |    Reserved    | CH, CR, NST |      N      | [RFC8701] |\n    \
    \   Table 3: Additions to the TLS ExtensionType Values Registry\n   This document\
    \ updates the \"TLS Application-Layer Protocol Negotiation\n   (ALPN) Protocol\
    \ IDs\" registry, available at\n   <https://www.iana.org/assignments/tls-extensiontype-values>:\n\
    \            | Protocol | Identification Sequence | Reference |\n            |\
    \ Reserved |        0x0A 0x0A        | [RFC8701] |\n            | Reserved | \
    \       0x1A 0x1A        | [RFC8701] |\n            | Reserved |        0x2A 0x2A\
    \        | [RFC8701] |\n            | Reserved |        0x3A 0x3A        | [RFC8701]\
    \ |\n            | Reserved |        0x4A 0x4A        | [RFC8701] |\n        \
    \    | Reserved |        0x5A 0x5A        | [RFC8701] |\n            | Reserved\
    \ |        0x6A 0x6A        | [RFC8701] |\n            | Reserved |        0x7A\
    \ 0x7A        | [RFC8701] |\n            | Reserved |        0x8A 0x8A       \
    \ | [RFC8701] |\n            | Reserved |        0x9A 0x9A        | [RFC8701]\
    \ |\n            | Reserved |        0xAA 0xAA        | [RFC8701] |\n        \
    \    | Reserved |        0xBA 0xBA        | [RFC8701] |\n            | Reserved\
    \ |        0xCA 0xCA        | [RFC8701] |\n            | Reserved |        0xDA\
    \ 0xDA        | [RFC8701] |\n            | Reserved |        0xEA 0xEA       \
    \ | [RFC8701] |\n            | Reserved |        0xFA 0xFA        | [RFC8701]\
    \ |\n                Table 4: Additions to the TLS Application-\n            \
    \  Layer Protocol Negotiation (ALPN) Protocol IDs\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   GREASE values cannot be negotiated, so they do\
    \ not directly impact\n   the security of TLS connections.\n   Historically, when\
    \ interoperability problems arise in deploying new\n   TLS features, implementations\
    \ have used a fallback retry on error\n   with the feature disabled.  This allows\
    \ an active attacker to\n   silently disable the new feature.  By preventing a\
    \ class of such\n   interoperability problems, GREASE reduces the need for this\
    \ kind of\n   fallback.  Implementations SHOULD NOT retry with GREASE disabled\
    \ on\n   connection failure.  While allowing an attacker to disable GREASE is\n\
    \   unlikely to have immediate security consequences, such a fallback\n   would\
    \ prevent GREASE from defending against extensibility failures.\n   If an implementation\
    \ does not select GREASE values at random, it is\n   possible it will allow for\
    \ fingerprinting of the implementation or\n   perhaps even of individual users.\
    \  This can result in a negative\n   impact to a user's privacy.\n"
- title: 8.  Normative References
  contents:
  - "8.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in RFCs\
    \ to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n       \
    \       DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n  \
    \            (TLS) Protocol Version 1.2\", RFC 5246,\n              DOI 10.17487/RFC5246,\
    \ August 2008,\n              <https://www.rfc-editor.org/info/rfc5246>.\n   [RFC6347]\
    \  Rescorla, E. and N. Modadugu, \"Datagram Transport Layer\n              Security\
    \ Version 1.2\", RFC 6347, DOI 10.17487/RFC6347,\n              January 2012,\
    \ <https://www.rfc-editor.org/info/rfc6347>.\n   [RFC7301]  Friedl, S., Popov,\
    \ A., Langley, A., and E. Stephan,\n              \"Transport Layer Security (TLS)\
    \ Application-Layer Protocol\n              Negotiation Extension\", RFC 7301,\
    \ DOI 10.17487/RFC7301,\n              July 2014, <https://www.rfc-editor.org/info/rfc7301>.\n\
    \   [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n     \
    \         2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n        \
    \      May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8446]  Rescorla,\
    \ E., \"The Transport Layer Security (TLS) Protocol\n              Version 1.3\"\
    , RFC 8446, DOI 10.17487/RFC8446, August 2018,\n              <https://www.rfc-editor.org/info/rfc8446>.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The author would like to thank Adam Langley, Nick Harper,\
    \ and Steven\n   Valdez for their feedback and suggestions.  In addition, the\
    \ rusted\n   joint metaphor is originally due to Adam Langley.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   David Benjamin\n"
