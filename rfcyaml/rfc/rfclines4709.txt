Abstract In current Web browsers, there is no uniform way to specify that a user clicking on a link will be presented with an editable view of a Web Distinguished Authoring and Versioning (WebDAV) server.
For example, it is frequently desirable to be able to click on a link and have this link open a window that can handle drag and drop interaction with the resources of a WebDAV server.
This document specifies a mechanism and a document format that enables WebDAV servers to send "mounting" information to a WebDAV client.
The mechanism is designed to work on any platform and with any combination of browser and WebDAV client, relying solely on the well understood dispatch of documents through their MIME type.
By definition, a Web Distributed Authoring and Versioning (WebDAV) server ([RFC2518]) is an HTTP server as well ([RFC2616]).
Most WebDAV servers can be (at least partly) operated from an HTML based user interface in a web browser.
However, it is frequently desirable to be able to switch from an HTML based view to a presentation provided by a native WebDAV client, directly supporting the authoring features defined in WebDAV and related specifications.
This document specifies a platform neutral mechanism based on the dispatch of documents through their MIME type.
For completeness, Appendix A lists other approaches that have been implemented in existing clients.
For example, many educational institutions use WebDAV servers as a mechanism for sharing documents among students.
Each student owns a separate collection structure on a WebDAV server, often called his/ her "locker".
Ideally, when users click on a link in an HTML page provided by the university (perhaps by their university Web portal), an editable view of their locker will appear.
The terminology used here follows that in the WebDAV Distributed Authoring Protocol specification [RFC2518].
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
This document uses XML DTD fragments ([XML]) as a purely notational convention.
In particular:  Element names use the namespace "http://purl.org/NET/webdav/mount".
When an XML element type in this namespace is referenced in this document outside of the context of an XML fragment, the string "dm:" will be prefixed to the element name.
Extension elements/attributes (elements/attributes not already defined as valid child elements) may be added anywhere, except when explicitly stated otherwise.
Format A WebDAV mount request is encoded in a specific XML format ([XML]) with a well defined MIME type (see Section 6.1).
The MIME type allows user agents to dispatch the content to a handler specific to the system's WebDAV client.
The elements defined below use the namespace "http://purl.org/NET/webdav/mount".
mount The <dm:mount> element acts as a container for all the remaining elements defined by this protocol.
> element provides the HTTP URL of the WebDAV collection that should be mounted by the client.
dm:open The optional <dm:open> element instructs the client to display the specified child collection; its URL is computed by concatenating this element's value with the URL obtained from the <dm:url> (Section 3.2) element (see Section 7 for a discussion about why this element only supports displaying collections rather than opening arbitrary documents).
username The server can use the optional <dm:username> element to specify the name of the currently authenticated principal.
A client can use this value to select a matching mount point (different users may have mounted the URL with different credentials under different local mount points) or to provide a meaningful default for authentication against the server.
It is common that a browser and WebDAV client do not share HTTP connections, so including this information in the mount document increases usability.
If a <dm:username> element is present, public caching of the document should be disallowed.
Thus, appropriate 'Vary' or 'Cache Control' headers are needed in the server response.
In the example below, the client first retrieves a representation of a WebDAV collection using a generic Web browser (1).
The returned HTML content contains a hyperlink that identifies the "davmount" document in the format defined in Section 3 (2).
The user follows this link (3), which causes the server to return the "davmount" document to the user's browser (4).
The browser in turn passes the content to the application that was registered to handle the "application/davmount xml" MIME type, usually the default WebDAV client on the client's system.
(1) Client retrieves representation of WebDAV collection "/user42/ inbox/".
this collection in your WebDAV client</a
(note that the example shows only that part of the HTML page that contains the relevant link)
(3) Client follows link to "davmount" document GET /user42
(4) Server returns "davmount" document HTTP/1.1 200
application/davmount xml Content Length: xxx Cache Control: private <dm:mount xmlns:dm
This document does not introduce any new internationalization considerations beyond those discussed in [RFC2518], Section 16. 6.
MIME Type Registration Type name:
davmount xml Required parameters: none Optional parameters: "charset":
This parameter has identical semantics to the charset parameter of the "application/xml" media type as specified in [RFC3023].
Encoding considerations: Identical to those of "application/xml" as described in [RFC3023], Section 3.2.
Security considerations: As defined in this specification.
In addition, as this media type uses the " xml" convention, it shares the same security considerations as described in [RFC3023], Section 10.
Interoperability considerations: There are no known interoperability issues.
Applications that use this media type:
SAP Netweaver Knowledge Management, Xythos Drive.
Additional information: Magic number(s): As specified for "application/xml" in [RFC3023], Section 3.2.
: .davmount Fragment identifiers: As specified for "application/xml" in [RFC3023], Section 5.
Base URI: As specified in [RFC3023], Section 6.
Macintosh file type code(s): TEXT Person & email address to contact for further information:
COMMON Restrictions on usage: None.
Author: Julian Reschke Change controller: IESG 7.
All security considerations connected to HTTP/WebDAV and XML apply for this specification as well, namely, [RFC2518]
In addition, client implementers must be careful when implementing the <dm:open
> element (see Section 3.3).
It MUST NOT be used to initiate any action beyond displaying the contents of a WebDAV collection (supporting "opening" documents could be abused to trick a user into letting the operating system's shell execute arbitrary content, possibly running it as an executable program).
username> element defined in Section 3.4
allows the inclusion of user names into mount documents.
However in some cases, user name information is considered to be security sensitive.
Should this be the case, parties generating mount documents are advised to either not to include user names, or to use access control to restrict access to the information as desired.
Appendix A.  Alternative Approaches A.1.
Through HTML/CSS Extensions Microsoft Internet Explorer implements a Cascading Style Sheet (CSS) extension that allows switching to its own WebDAV client
However, at the time of this writing, this extension was not implemented by any other user agent.
The "kio" library of the "K Desktop Enviroment" (<http://www.kde.org/>) uses the URI scheme "webdav" to dispatch to the system's WebDAV client.
This URI scheme is not registered, nor is it supported on other platforms.
Furthermore, the W3C's "Architecture of the World Wide Web, Volume One" explicitly advises against defining new schemes when existing schemes can be used: A specification SHOULD reuse an existing URI scheme (rather than create a new one) when it provides the desired properties of identifiers and their relation to resources.
Example Implementation for Webfolder Client
The figure below shows a sample implementation of a dispatcher for the application/davmount xml datatype, suited for Win32 systems and the Microsoft "Webfolder" client.
sample implementation of application/davmount xml //
{ try { var x   shell.
; } catch(e) { WScript.
Shell"); if (WshShell   null) {
Shell object"); return 2; } var fso   new ActiveXObject("Scripting.
mount/m:open"); if (n1   null) { WScript.Echo("<url
Document; var folder   doc.createElement("span"); folder.addBehavior("#default#httpFolder"); var result
The "Xythos Drive" WebDAV client for WebDAV supports this specification starting with version 4.4.
