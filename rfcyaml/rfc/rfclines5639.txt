This memo proposes several elliptic curve domain parameters over finite prime fields for use in cryptographic applications.
The domain parameters are consistent with the relevant international standards, and can be used in X.509 certificates and certificate revocation lists (CRLs), for Internet Key Exchange (IKE), Transport Layer Security (TLS), XML signatures, and all applications or protocols based on the cryptographic message syntax (CMS).
Although several standards for elliptic curves and domain parameters exist (e.g., [ANSI1], [FIPS], or [SEC2]), some major issues have still not been addressed:
Not all parameters have been generated in a verifiably pseudo  random way.
In particular, the seeds from which the curve parameters were derived have been chosen ad hoc, leaving out an essential part of the security proof.
The primes selected for the base fields have a very special form facilitating efficient implementation.
This does not only contradict the approach of pseudo random parameters, but also increases the risk of implementations violating one of the numerous patents for fast modular arithmetic with special primes.
No proofs are provided that the proposed parameters do not belong to those classes of parameters that are susceptible to cryptanalytic attacks with sub exponential complexity.
Recent research results seem to indicate a potential for new attacks on elliptic curve cryptosystems.
At least for applications with the highest security demands or under circumstances that complicate a change of parameters in response to new attacks, the inclusion of a corresponding security requirement for domain parameters (the class group condition, see Section 2) is justified.
Some of the proposed subgroups have a non trivial cofactor, which demands additional checks by cryptographic applications to prevent small subgroup attacks (see [ANSI1] or [SEC1]).
The domain parameters specified do not cover all bit lengths that correspond to the commonly used key lengths for symmetric cryptographic algorithms.
In particular, there is no 512 bit curve defined, but only one with a 521 bit length, which may be disadvantageous for some implementations.
Furthermore, many of the parameters specified by the existing standards are identical (see [SEC2] for a comparison).
Thus, there is still a need for additional elliptic curve domain parameters that overcome the above limitations.
Scope and Relation to Other Specifications
This RFC specifies elliptic curve domain parameters over prime fields GF(p) with p having a length of 160, 192, 224, 256, 320, 384, and 512 bits.
These parameters were generated in a pseudo random, yet completely systematic and reproducible, way and have been verified to resist current cryptanalytic approaches.
The parameters are compliant with ANSI X9.62 [ANSI1] and
ANSI X9.63 [ANSI2], ISO/IEC 14888 [ISO1] and ISO/IEC 15946
[ISO2], ETSI TS 102 176 1 [ETSI], as well as with FIPS 186 2 [FIPS], and the Efficient Cryptography Group (SECG) specifications ([SEC1] and [SEC2]).
Furthermore, this document identifies the security and implementation requirements for the parameters, and describes the methods used for the pseudo random generation of the parameters.
Finally, this RFC defines ASN.1 object identifiers for all elliptic curve domain parameter sets specified herein, e.g., for use in X.509 certificates.
This document does neither address the cryptographic algorithms to be used with the specified parameters nor their application in other standards.
However, it is consistent with the following RFCs that specify the usage of elliptic curve cryptography in protocols and applications:  [RFC5753] for the cryptographic message syntax (CMS)  [RFC3279] and [RFC5480] for X.509 certificates and CRLs
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119
Requirements on the Elliptic Curve Domain Parameters Throughout this memo, let p > 3 be a prime and GF(p)
a finite field (sometimes also referred to as Galois Field or GF(p)) with p elements.
For given A and B with non zero 4
B^2 mod p, the set of solutions (x,y) for the equation E: y^2   x^3
x   B mod p over GF(p)
together with a neutral element O and well defined laws for addition and inversion define a group E(GF(p))
Typically, for cryptographic applications, an element G of prime order q is chosen in E(GF(p)).
A comprehensive introduction to elliptic curve cryptography can be found in [CFDA] and [BSS].
This choice induces a natural ordering on GF(p).
The following security requirements are either motivated by known cryptographic analysis or aim to enhance trust in the recommended curves.
As this specification aims at a particularly high level of security, a restrictive position is taken here.
Nevertheless, it may be sensible to slightly deviate from these requirements for certain applications (e.g., in order to achieve higher computational performance).
More details on requirements for cryptographically strong elliptic curves can be found in [CFDA] and [BSS].
1.  Immunity to attacks using the Weil or Tate Pairing.
These attacks allow the embedding of the cyclic subgroup generated by G into the group of units of a degree l extension GF(p^l) of GF(p), where sub exponential attacks on the discrete logarithm problem (DLP) exist.
l   min{t   q divides p^t 1}, i.e., l is the order of p mod q.
By Fermat's Little Theorem, l divides q 1.
We require (q 1)/l < 100, which means that l is close to the maximum possible value.
This requirement is considerably stronger than those of [SEC2] and [ANSI2] and also excludes supersingular curves, as those are the curves of order p 1. 2.
The trace is not equal to one.
one curves (or anomalous curves) are curves with #E(GF(p))
Satoh and Araki [SA], Semaev [Sem], and Smart [Sma] independently proposed efficient solutions to the elliptic curve discrete logarithm problem (ECDLP) on trace one curves.
Note that these curves are also excluded by requirement 5 of Section 2.2.
The class number of the maximal order of the quotient field of the endomorphism ring End(E) of E is larger than 10^7.
Generally, E cannot be "lifted" to a curve E' over an algebraic number field L with End(E)
unless the degree of L over the rationals is larger than the class number of End(E).
Although there are no efficient attacks exploiting a small class number, recent work ([JMV] and [HR])
also may be seen as argument for the class number condition.
The group order #E(GF(p)) shall be a prime number in order to counter small subgroup attacks (see [HMV]).
Therefore, all groups proposed in this RFC have cofactor 1.
Note that curves with prime order have no point of order 2 and therefore no point with
The elliptic curve domain parameters shall be generated in a pseudo random manner using seeds that are generated in a systematic and comprehensive way.
The methods by which the parameters have been obtained are explained in Appendix A. 6.
For all curves, a proof should be given that all security requirements are met.
These proofs are provided in [EBP].
In [BG], attacks are described that apply to elliptic curve domain parameters where q 1 has a factor u in the order of q^(1/3).
However, the circumstances under which these attacks are applicable can be avoided in most applications.
Therefore, no corresponding security requirement is stated here.
However, it is highly recommended that developers verify the security of their implementations against this kind of attack.
Technical Requirements Commercial demands and experience with existing implementations lead to the following technical requirements for the elliptic curve domain parameters.
For each of the bit lengths 160, 192, 224, 256, 320, 384, and 512, one curve shall be proposed.
This requirement follows from the need for curves providing different levels of security that are appropriate for the underlying symmetric algorithms.
The existing standards specify a 521 bit curve instead of a 512 bit curve.
The prime number p shall be congruent 3 mod 4.
This requirement allows efficient point compression:
one method for the transmission of curve points P (x,y) is to transmit only x and the least significant bit LSB(y) of y.
For p   3 mod 4, we get (y^2)^((p 1)/4)
y y^((p 1)/2), which is either y or  y by Fermat's Little Theorem; hence, y can be computed very efficiently using the curve equation.
This requirement is not always met by the parameters defined in existing standards.
The curves shall be GF(p) isomorphic to a curve E': y^2   x^3
This property permits the use of the arithmetical advantages of curves with A    3, as shown by Brier and Joyce [BJ].
Precisely, if a curve is given by E: y^2   x^3
A x   B mod p with  3
A u^4 being solvable in GF(p) and u Z is a solution to this equation, then the requirement is fulfilled by means of the quadratic twist E': y^2   x^3   Z^4
Z^6 B mod p, and
the GF(p) isomorphism is given by F(x,y) :
Due to this isomorphism, E(GF(p)) and E'(GF(p)) have the same number of points, share the same algebraic structure, and hence offer the same level of security.
This constraint has also been used by [SEC2] and [FIPS].
The prime p must not be of any special form; this requirement is met by a verifiably pseudo random generation of the parameters (see requirement 5 in Section 2.1).
Although parameters specified by existing standards do not meet this requirement, the need for such curves over (pseudo )randomly chosen fields has already been foreseen by the Standards for Efficient Cryptography Group (SECG), see [SEC2].
As a consequence of the Hasse Weil Theorem, the number of points #E(GF(p)) may be greater than the characteristic p of the prime field GF(p).
In some cases, even the bit length of #E(GF(p)) can exceed the bit length of p.
To avoid overruns in implementations, we require that #E(GF(p))
In order to thwart attacks on digital signature schemes, some authors propose to use q > p, but the attacks described, e.g., in [BRS], appear infeasible in a well designed Public Key Infrastructure (PKI).
B shall be a non square mod p.
Otherwise, the compressed representations of the curve points (0,0) and (0,X), with X being the square root of B with a least significant bit of 0, would be identical.
As there are implementations of elliptic curves that encode the point at infinity as (0,0), we try to avoid ambiguities.
Note that this condition is stable under quadratic twists as described in condition 3 above.
Condition 6 makes the attack described in [G] impossible.
It can therefore also be seen as a security requirement.
This constraint has not been specified by existing standards.
In this section, the elliptic curve domain parameters proposed are specified in the following way.
For all curves, an ID is given by which it can be referenced.
p is the prime specifying the base field.
A and B are the coefficients of the equation y^2   x^3
B mod p defining the elliptic curve.
(x,y) is the base point, i.e., a point in E of prime order, with x and y being its x  and y coordinates, respectively.
q is the prime order of the group generated by G. h is the cofactor of G in E, i.e., #E(GF(p))/q.
For the twisted curve, we also give the coefficient Z that defines the isomorphism F (see requirement 3 in Section 2.2).
The methods for the generation of the parameters are given in Appendix A.  Proofs for the fulfillment of the security requirements specified in Section 2.1 are given in [EBP].
Domain Parameters for 160 Bit Curves Curve ID:
Domain Parameters for 192 Bit Curves Curve ID:
Domain Parameters for 224 Bit Curves Curve ID:
1 #Twisted curve Curve ID:
Domain Parameters for 256 Bit Curves Curve ID:
Domain Parameters for 320 Bit Curves Curve ID:
15F75CAF668077F7E85B42EB01F0A81FF56ECD6191D55CB82B7D861458A18F EFC3E5AB7496F3C7B1 A   D35E472036BC4FB7E13C785ED201E065F98FCFA6F6F40DEF4F92B9EC7893EC 28FCD412B1F1B32E24 B
Domain Parameters for 384 Bit Curves Curve ID:
1 #Twisted curve Curve ID:
Domain Parameters for 512 Bit Curves Curve ID:
Object Identifiers and ASN.1 Syntax 4.1.
} The object identifier ellipticCurve represents the tree for domain parameter sets.
It has the following value:
The tree containing the object identifiers for each set of domain parameters defined in this RFC is:
The following object identifiers represent the domain parameter sets defined in this RFC:
ASN.1 Syntax for Usage with X.509 Certificates
The domain parameters specified in this RFC SHALL be used with X.509 certificates in accordance with [RFC5480].
If the domain parameters are explicitly specified using the type specifiedCurve in the field algorithm.parameter of subjectPublicKeyInfo, ANSI X9.62 [ANSI1] and [RFC5480]
allow indicating whether or not a curve and base point have been generated verifiably in a pseudo random way.
Although the parameters specified in Section 3 have all been generated by the pseudo random methods described in Appendix A, these algorithms deviate from those mandated in ANSI X9.62, A.3.3.1.
Consequently, applications following ANSI X9.62 or [RFC5480] will not be able to verify the pseudo randomness of the parameters.
In order to avoid rejection of the parameters, the ASN.1 encoding SHOULD NOT specify that the curve or base point has been generated verifiably at random.
In particular, certification authorities (CAs) SHOULD set the contents of specifiedCurve in the following way:  version is set to ecpVer1(1).
fieldId includes the fieldType prime field and as parameter the value p of the selected domain parameters as specified in Section 3.
curve includes the values a and b of the selected domain parameters as specified in Section 3, but seed is absent.
base is the octet string representation of the base point G of the selected domain parameters as specified in Section 3.
order is set to q of the selected domain parameters as specified in Section 3.
cofactor is set to 1.
The level of security provided by symmetric ciphers and hash functions used in conjunction with the elliptic curve domain parameters specified in this RFC should roughly match or exceed the level provided by the domain parameters.
The following table indicates the minimum key sizes for symmetric ciphers and hash functions providing at least (roughly) comparable security.
Further security discussions specific to elliptic curve cryptography can be found in [ANSI1] and [SEC1].
Appendix A.  Pseudo Random Generation of Parameters
In this appendix, the methods used for pseudo random generation of the elliptic curve domain parameters are described.
A comprehensive description is given in [EBP].
Throughout this section the following conventions are used: The conversion between integers x in the range 0 <  x <  2^L 1 and bit strings of length L is given by x  >
L} and the binary expansion
x L, i.e., the first bit of the bit string corresponds to the most significant bit of the corresponding integer and the last bit to the least significant bit.
For a real number x, let floor(x) denote the highest integer less than or equal to x.
For updating the seed s of 160 bit length we use the following function update seed(s): 1.  Convert s to an integer z. 2.
(z 1) mod 2^160 to a bit string t and output t. A.1.
This section describes the systematic selection of the base fields GF(p) proposed in this specification.
The prime generation method is similar to the method given in FIPS 186 2 [FIPS], Appendix 6.4, and ANSI X9.62 [ANSI1], A.3.2.
It is a modification of the method "incremental search" given in Section 8.2.2 of [ISO3].
For computing an integer x in the range 0 <
x <  2^L 1 from a seed s of 160 bit length, we use the following algorithm find integer(s)
and w   L 160 v. 2.
Let h 0 be the bit string obtained by taking the w rightmost bits of h. 4.
Convert s to an integer z. 5.
For i from 1 to v do: A.  Set z i
B.  Convert z i to a bit string s i. C.
Let h be the string obtained by the concatenation of h 0,...
v from left to right.
Convert h to an integer
The following procedure is used to generate an L bit prime p from a 160 bit seed s. 1.
Let p be the smallest prime p >  c with p   3 mod 4. 3.
Set s   update seed(s) and go to Step 1.
For the generation of the primes p used as base fields GF(p) for the curves defined in this specification (and the corresponding twisted curves), the following values (in hexadecimal representation) have been used as initial seed
Seed p 160 for brainpoolP160r1: 3243F6A8885A308D313198A2E03707344A409382 Seed p 192 for brainpoolP192r1: 2299F31D0082EFA98EC4E6C89452821E638D0137 Seed p 224 for brainpoolP224r1: 7BE5466CF34E90C6CC0AC29B7C97C50DD3F84D5B Seed p 256 for brainpoolP256r1: 5B54709179216D5D98979FB1BD1310BA698DFB5A Seed p 320 for brainpoolP320r1:
C2FFD72DBD01ADFB7B8E1AFED6A267E96BA7C904 Seed p 384 for brainpoolP384r1:
5F12C7F9924A19947B3916CF70801F2E2858EFC1 Seed p 512 for brainpoolP512r1:
These seeds have been obtained as the first 7 substrings of 160 bit length each of Q
Using these seeds and the above algorithm the following primes are obtained: p 160   1332297598440044874827085558802491743757193798159 p 192   4781668983906166242955001894344923773259119655253013193367
Generation of Pseudo Random Curves
The generation procedure is similar to the procedure given in FIPS PUB 186 2 [FIPS], Appendix 6.4, and ANSI X9.62 [ANSI1], A.3.2.
For computing an integer x in the range 0 <
2^(L 1) 1 from a seed s of 160 bit length, we use the algorithm find integer 2(s), which slightly differs from the method used for the generation of the primes.
Let h 0 be the bit string obtained by taking the w rightmost bits of h. 4.
Convert s to an integer z. 5.
For i from 1 to v do: A.  Set z i
B.  Convert z i to a bit string s i. C.
Let h be the string obtained by the concatenation of h 0,...
v from left to right.
Convert h to an integer
The following procedure is used to generate the parameters A and B of a suitable elliptic curve over GF(p) and a base point G from a prime p of bit length L and a 160 bit seed s. 1.
Set h   find integer 2(s).
Convert h to an integer A. 3.
A Z^4 mod p is not solvable, then set s   update seed(s) and go to Step 1.
Compute one solution Z of  3
Set s   update seed(s). 6.
Set B   find integer 2(s).
If B is a square mod p, then set s   update seed(s) and go to Step 6.
B^2   0 mod p, then set s   update seed(s) and go to Step 1.
Check that the elliptic curve E over GF(p) given by y^2   x^3
B fulfills all security and functional requirements given in Section 3.
If not, then set s   update seed(s) and go to Step 1.
Set s   update seed(s). 11.
Set k   find integer 2(s).
Determine the points Q and  Q having the smallest x coordinate in E(GF(p)).
Randomly select one of them as point P. 13.
Compute the base point G
Output A, B, and G. Note:
Of course P could also be used as a base point.
However, the small x coordinate of P could possibly render the curve vulnerable to side channel attacks.
For the generation of curve parameters A and B, and the base points G defined in this specification, the following values (in hexadecimal representation) have been used as initial seed
2B7E151628AED2A6ABF7158809CF4F3C762E7160 Seed ab 192 for brainpoolP192r1:
Seed ab 224 for brainpoolP224r1:
5F4BF8D8D8C31D763DA06C80ABB1185EB4F7C7B5 Seed ab 256 for brainpoolP256r1: 757F5958490CFD47D7C19BB42158D9554F7B46BC
Seed ab 320 for brainpoolP320r1:
ED55C4D79FD5F24D6613C31C3839A2DDF8A9A276 Seed ab 384 for brainpoolP384r1:
BCFBFA1C877C56284DAB79CD4C2B3293D20E9E5E Seed ab 512 for brainpoolP384r1
: AF02AC60ACC93ED874422A52ECB238FEEE5AB6AD These seeds have been obtained as the first 7 substrings of 160 bit length each of R
Seed ab 512  Remainder, where    denotes concatenation.
