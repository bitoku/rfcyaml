- title: __initial_text__
  contents:
  - "                DEC PDP-10 -- IMLAC COMMUNICATION SYSTEM\n   This report describes\
    \ an operational system for communicating textual\n   display information between\
    \ a main-site computer and a remote-display\n   processor.\n      The main site\
    \ machine is a DEC PDP-10 with the BBN paging hardware\n      (henceforth TENEX).\n\
    \      The remote machine is a IMLAC PDS-1 (henceforth IMLAC).\n      Section\
    \ (1) briefly describes the IMLAC hardware configurations.\n      Section (II)\
    \ describes the display facilities presented to the\n      user.\n      Section\
    \ (III) describes the system calls (JSYS calls) implemented\n      in the TENEX\
    \ monitor to provide these facilities.\n      Section (IV) describes the formats\
    \ of the messages used for\n      communication between TENEX and the IMLAC.\n\
    \      Section (V) analyzes the division of responsibility between the\n     \
    \ two machines.\n"
- title: (1)  Hardware configurations.
  contents:
  - "(1)  Hardware configurations.\n   The standard IMLAC is a 16-bit minicomputer\
    \ with 4K of 2 microsecond\n   core, a cycle-stealing display, an input keyboard,\
    \ and an\n   asynchronous serial communication interface.\n   The display is normally\
    \ programmed to draw characters using very\n   short vectors.\n      The display\
    \ comes in two major configurations, depending on the\n      presence or absence\
    \ of hardware for drawing long vectors.\n      In the sequel, specifications depending\
    \ on the configuration will\n      be flagged LVH or non-LVH respectively.\n \
    \  The I/O system normally does not provide for interrupts when\n   characters\
    \ arrive from the serial interface.\n      However, the IMLAC is barely able to\
    \ keep up with the PDP-10\n      without this feature, so we were able to persuade\
    \ the manufacturer\n      to implement it.\n   While no special hardware is required\
    \ for the software described\n   here, the character interrupt and the SRI-ARC\
    \ \"mouse\" and \"keyset\"\n   are highly recommended, and the software is oriented\
    \ towards their\n   use.\n"
- title: (II)  Facilities.
  contents:
  - "(II)  Facilities.\n   Each display console in the system may be in \"display\
    \ mode\" or\n   \"teletype simulation mode\".\n      In display mode, the information\
    \ displayed consists of text\n      strings at arbitrary positions on the display\
    \ face.\n      In teletype simulation mode, the display shows the last 20-30\n\
    \      lines which would appear on a teletype listing.\n      A given console\
    \ may switch between these modes, under program\n      control, without losing\
    \ any information.\n   Regardless of mode, each display has a cursor string which\
    \ follows\n   the position of the available pointing device,\n      The implemented\
    \ system uses a \"mouse\" generally, but one console\n      uses a tablet.\n \
    \     The cursor string may be set by a program, for example to indicate\n   \
    \   at what sort of object the user is expected to point.\n   In display mode,\
    \ the screen of a given console is allocated to users\n   in rectangular blocks\
    \ called \"display areas\".\n      This allows users to communicate via a single\
    \ display split into\n      multiple areas.\n   When a user (program) requests\
    \ a display area, he specifies how many\n   text strings he will want to display\
    \ in it.\n      Each string has its own X-Y location, character size, font\n \
    \     (italic, underline, ...), and an arbitrary number of characters.\n     \
    \    Each of these components is settable without disturbing the\n         others.\n\
    \      Each string may be manipulated without affecting the others.\n"
- title: (III) JSYS calls.
  contents:
  - "(III) JSYS calls.\n   (ADA) Assign a display area.\n      JSYS ada: [440B]  \
    \   allocate a display area\n         Accepts:\n         r1:\n            upper-left-y-cord[10],\
    \ upper-left-x-cord[10], max-no-\n            string[11]\n         r2:\n     \
    \       lower-right-y-cord[10], lower-right-x-cord[10], default-c-\n         \
    \   size[2], default-n-inc[6], default-font[5]\n         Returns:\n          \
    \  +1: Unsuccessful\n               r1: error code\n            +2: Successful\n\
    \               r1: da-id[18]\n         Function:\n            This jsys allocates\
    \ a display area given the coordinates of\n            the diagonal, the maximum\
    \ number of strings to be displayed,\n            and the default setting for\
    \ the character size, font, and\n            horizontal increment.  An 18-bit\
    \ da-id is returned which\n            should subsequently be used to refer to\
    \ this display area.\n   (DDA) Deallocate a display area.\n      JSYS dda; [441B]\
    \     deallocate a display area\n         Accepts:\n            r1: da-id\n  \
    \       Returns:\n            +1: Unsuccessful\n               r1: error code\n\
    \            +2: Successful\n         Function:\n            This jsys deallocates\
    \ a display area given the associated\n            da-id.\n   (STRDA)  STRing\
    \ display:  add, delete, or change.\n   JSYS strda; [442B]     Manipulate (move,\
    \ write, replace, delete) a\n   string in a display area\n      Accepts:\n   \
    \      r1: string-id[18], da-id[18]\n         r2: first byte pointer or 0 or -1\n\
    \         r2: second byte pointer or 0\n         r4: y-cord[10], x-cord[10], font[6],\
    \ c-size[3], h-inc[7]\n      Returns:\n         +1:  Unsuccessful\n          \
    \     r1: error code\n         +2:  Successful\n               r1: string-id[18]\n\
    \      Function:\n         This jsys writes a new string, replaces, deletes, or\
    \ moves\n         (optionally replacing) an extant string within a display area.\n\
    \         In addition, the font, character size, and horizontal increment\n  \
    \       may be specified for the string.\n            The string may be specified\
    \ by two byte pointers or by one\n            byte pointer with the string terminating\
    \ with a zero\n            character.\n               If first byte pointer is\
    \ zero then\n                  if a new string is being written then\n       \
    \              an error code illstr is returned.\n                  Otherwise,\
    \ the string already exists so\n                     delete the string from the\
    \ display area.\n               If the first byte pointer is -1 then\n       \
    \           if a new string is being written then\n                     an error\
    \ code illstr is returned.\n                  Otherwise, use the old string.\n\
    \               If the first character of the string is a zero character,\n  \
    \             the string to be displayed is null, but the string is not\n    \
    \           deleted.\n            The coordinates (optional unless the string\
    \ is new or being\n            moved) are relative to the upper leftcorner of\
    \ the display\n            area.\n               If the jsys is to effect an extant\
    \ string, a zero\n               coordinate means use the old value.\n       \
    \     For the font, c-size, and h-inc fields a field of all one's\n          \
    \  indicates that the display area default value (set in the\n            ada\
    \ jsys) is to be used.  A 0 means use the value which was\n            previously\
    \ used for the (extant) string.\n            If the string is new, then an 18\
    \ bit string identifier is\n            returned.\n   (SCSR)  Set the Cursor StRing.\n\
    \      JSYS scsr; [450B]     display a string (vectors later) as the\n      cursor\n\
    \         Accepts:\n            r1:  first byte pointer or 0 or -1\n         \
    \   r2:  second byte pointer or 0\n            r3: font[5], c-size[2], h-inc[6]\n\
    \               No defaults allowed\n         Returns:\n            +1:  Unsuccessful\n\
    \               r1:  error code\n            +2:  Successful\n         Function:\n\
    \            This jsys is used to set the cursor string.  Later, a set of\n  \
    \          vectors will be allowed also.  If the string length is zero\n     \
    \       or the first byte pointer is 0, nothing will be displayed\n          \
    \  for the cursor.  If the first byte pointer is -1 then the\n            old\
    \ string will be used.  If a cursor did not previously\n            exist, an\
    \ illcon error return will be executed.\n   (SDDA)  Suppress the display of an\
    \ area.\n      JSYS sdda; [444B]    suppress all display in a display area\n \
    \        Accepts:\n            r1: da-id[18]\n            r2:  1 or 0\n      \
    \   Returns:\n            +1:  Unsuccessful\n               r1:  error code\n\
    \            +2:  Successful\n         Function:\n            The display image\
    \ is removed from the display area but is\n            not destroyed if r2 = 0.\n\
    \   (RDDA)  Restore the display of an area.\n      JSYS rdda; [446B]    restore\
    \ all display in a display area\n         Accepts:\n            r1: da-id[18]\n\
    \         Returns:\n            +1:  Unsuccessful\n               r1:  error code\n\
    \  +2:  Successful\n         Function:\n            The display image is restored\
    \ in the display area.\n   (SDDA)  Suppress the display of a String.\n      JSYS\
    \ ssda [445B];    suppress display of a string in a display\n      area\n    \
    \     Accepts:\n            r1: string-id[18], da-id[18]\n         Returns:\n\
    \            +1:  Unsuccessful\n               r1:  error code\n            +2:\
    \  Successful\n         Function:\n            The display image for the given\
    \ string is suppressed in the\n            display area\n   (RDSA)  Restore the\
    \ display of a String.\n      JSYS rsda; [447B]    restore display of a string\
    \ in a display area\n         Accepts:\n            r1: string-id[18], da-id[18]\n\
    \         Returns:\n            +1:  Unsuccessful\n               r1:  error code\n\
    \            +2:  Successful\n         Function:\n            The display image\
    \ for the given string is restored in the\n            display area.\n   (TSNDA)\
    \  Teletype Simulation oN.\n      JSYS tsnda; [451B]     turn tty simlaution on\n\
    \         Accepts:\n            none\n         Returns:\n            +1:  Always\n\
    \               r1:  1 if was in work station mode, 0 otherwise\n         Function:\n\
    \            Restores the tty simulation display area, and suppresses all\n  \
    \          others (except the cursor).  Turns wsmode (work station mode\n    \
    \        flag) off for this console and returns previous value of\n          \
    \  wsmode.\n   (TSFDA)  Teletype Simulation ofF.\n      JSYS tsfda;  [452B]  \
    \   turn tty simulation off\n         Accepts:\n            none\n         Returns:\n\
    \            +1:  Always\n         Function:\n            Suppresses the display\
    \ of the tty simulation display area,\n            restores the display of all\
    \ other display areas, and sets\n            wsmode on.\n   (RSTDA)    Reset display\
    \ areas.\n      JSYS rstda; [453B]     Reset display areas\n         Accepts:\n\
    \            none\n         Returns:\n            +1:  Always\n         Functions:\n\
    \            Deallocates and removes images from all display areas\n         \
    \   associated with this console except the tty simulation and\n            cursor,\
    \ the display of which is restored.\n"
- title: (IV)  Message formats.
  contents:
  - "(IV)  Message formats.\n   Messages are sequences of 8-bit characters, of which\
    \ 7 contain useful\n   information.\n      The higer-order (200B) bit should contain\
    \ even parity on IMLAC\n      input and is set to even parity on IMLAC output.\n\
    \      If the IMLAC receives an odd parity character, it halts at\n      present.\n\
    \      In the remainder of this document, the parity bit will not be\n      discussed.\n\
    \   A message may be either a character or a command.\n   Single-character messages\
    \ from the PDP-10 to the IMLAC represent\n   program output intended for the teletype.\n\
    \   Commands from the PDP-10 represent display information.\n   Commands from\
    \ the IMLAC represent characters or other input\n   information.\n   Every command\
    \ is prefixed by an internal escape character (code 33B)\n   and a character count.\n\
    \      The escape character will henceforth be referred to as ESC: is has\n  \
    \    the same code as the ASCII escape character 33B.\n   Messages sent from TENEX\
    \ to IMLAC:\n      Characters 40B-177B are directed to the teletype simulation\
    \ area.\n      Character 12B (line feed) starts a new line in the teletype\n \
    \     simulation area.\n      An ESC indicates that display or control information\
    \ is coming, as\n      follows.\n         Every message beginning with ESC contains\
    \ the number of\n         following characters as its second character.\n    \
    \     Certain constructs appear in several command messages.\n            (da)\
    \  A display area identifier is a pair of characters\n            containing 12\
    \ bits of information:\n               1st: bits (0:5) + 40B\n               2nd:\
    \ bits (6:11) + 40B\n            (NSTRS)  A string count is a single character\
    \ between 0 and\n            177B.\n            (STRID)  A string identifier is\
    \ a single character between 1\n            and 177B.\n            (RETAIN)  The\
    \ retention flag, if non-zero, specifies that an\n            existing string\
    \ should be retained rather than overwritten.\n            (CSIZE)  A character\
    \ size is a single character between 0\n            and 3:\n               The\
    \ character sizes are respectively x1/2, x1, x2, x3.\n            (HINC)  A horizontal\
    \ increment is a single character.\n               In the present implementation,\
    \ HINC is ignored and a\n               standard spacing is supplied as follows.\n\
    \                  LVH:\n                     0: 3 units\n                   \
    \  1: 6 units\n                     2: 12 units\n                     3: 18 units\n\
    \                  non-LVH:\n                     0: 4.5 units\n             \
    \        1: 9 units\n                     2: 18 units\n                     3:\
    \ 27 units\n            (FONTS)  A font specification is a single character.\n\
    \               In the present implementation, the font is stored but\n      \
    \         does not affect the display.\n            (outxy)  An output X-Y coordinate\
    \ pair is encoded in four\n            characters as follows:\n              \
    \ 1st: X,bits(0:5) + 40B\n               2nd: X,bits(6:11) + 40B\n           \
    \    3rd: Y,bits(0:5) + 40B\n               4th: Y,bits(6:11) + 40B\n        \
    \    (inxy)  An input X-Y coordinate pair is encoded in four\n            characters\
    \ as follows:\n            LVH:  see (outxy) above.\n            non-LVH:  as\
    \ above, except that each 12-bit coordinate is\n            actually of the form\
    \ 1400B+40B*[v/9]+(v MOD 9), where the\n            actual coordinate is 0<=v<=719.\n\
    \                  This means there are actually fewer points on each\n      \
    \            axis.\n            (string)  A string is just the requisite number\
    \ of\n            characters.\n               Control characters will be displayed\
    \ as a distinctive\n               blot.\n         Each display operation has\
    \ a corresponding message.\n            01B - ADA (assign display area)\n    \
    \           Followed by (da) NSTRS CSIZE HINC FONT.\n            02B - DDA (delete\
    \ display area)\n               Followed by (da).\n            04B - STRDA (string\
    \ display)\n               Followed by (da) STRID RETAIN (xy) FORMAT [CSIZE] [HINC]\n\
    \               [FONT] (string).\n                  Format specifies whether each\
    \ of CSIZE, HINC, and FONT\n                  is to come from the display area\
    \ default, the current\n                  value for the string, or the message.\n\
    \                     The bits are: 0 0 STF STI STC RDF RDI RDC.\n           \
    \          RDF=1 means read the FONT from the message.\n                     RDF=0,\
    \ STF=1 means use the old value from the\n                     string.\n     \
    \                RDF=0, STF=0 means use the display area default.\n          \
    \           The pairs RDI-STI and RDC-STC specify HINC and\n                 \
    \    CSIZE in the same way.\n            05B - SCSR (set cursor string)\n    \
    \           Followed by RETAIN CSIZE HINC FONT (string).\n            06B - SDDA\
    \ (suppress display of da)\n               Followed by (da) KILL.\n          \
    \        KILL#0 means delete all strings in this display area.\n             \
    \     KILL=0 means retain the strings.\n            07B - RDDA (restore display\
    \ of da)\n               Followed by (da).\n            10B - SDDA (suppress display\
    \ of string)\n               Followed by (da) STRID KILL.\n                  KILL#0\
    \ means delete the string.\n                  KILL=0 means retain the string.\n\
    \            11B - RSLA (restore display of string)\n               Followed by\
    \ (da) STRID.\n            12B - TSNDA (turn teletype simulation on)\n       \
    \     13B - TSFDA (turn teletype simulation off)\n            14B - Long input\
    \ mode\n               Puts the IMLAC into the mode where it sends coordinate\n\
    \               information in a message with every character.\n             \
    \     This is the normal operating mode for the IMLAC.\n            15B - Short\
    \ input mode\n               Puts the IMLAC into the mode where it outputs characters\n\
    \               literally, just like a teletype.\n                  The IMLAC\
    \ starts out in this mode when turned on.\n         A string of 10 ESC characters,\
    \ followed by a non-ESC, indicates\n         an emergency - the IMLAC reinitializes\
    \ itself and goes into\n         short input and teletype simulation modes.\n\
    \      All other (control) characters are ignored.\n   Messages sent from IMLAC\
    \ to TENEX:\n      Short input mode:\n         Every character typed on the keyboard\
    \ is transmitted literally.\n      Long input mode:\n         Every message begins\
    \ with ESC and a count of subsequent\n         characters.\n            Codes\
    \ 40B-177B represent keyboard input.\n               Note that the IMLAC does\
    \ not echo these characters on the\n               display.\n            Codes\
    \ 00B-37B, except ESC, represent typed-in control\n            characters.\n \
    \              The present implementation allows the user to generate\n      \
    \         all of these codes from the keyboard.\n            ESC may be followed\
    \ by a keyset-mouse code or a control\n            character.\n              \
    \ Code 00B represents an ESC typed on the keyboard.\n               Otherwise,\
    \ a code 40B-77B and a code 100B-107B follow.\n                  This type of\
    \ message is sent whenever the mouse\n                  buttons change or a character\
    \ has been typed on the\n                  keyset, and the IMLAC cannot convert\
    \ this to an\n                  ordinary character.\n                     The\
    \ IMLAC converts recognizable keyset chords and\n                     mouse changes\
    \ to characters; see SRI-ARC\n                     documentation for a full discussion\
    \ of this\n                     hardware.\n                  The codes 40B-77B\
    \ represent accumulated keyset chords.\n                     40B means no complete\
    \ chord has been struck.\n                  The codes 100B-107B represent the\
    \ state of the mouse\n                  buttons after a change:  a 1-bit corresponds\
    \ to a\n                  depressed button.\n               Other codes should\
    \ not appear.\n            All codes are followed by the (inxy) coordinates of\
    \ the\n            mouse.\n               This means 7 or 8 characters are sent\
    \ for each character\n               typed.\n"
- title: (V)  Division of responsibility
  contents:
  - "(V)  Division of responsibility\n   The first criterion in design of the system\
    \ just described was to\n   allocate sufficient validity checking to the PDP-10\
    \ to make it\n   unnecessary for the IMLAC to send a response for each command.\n\
    \      Thus, the PDP-10 allocates and checks display area identifiers and\n  \
    \    string numbers.\n      In the present implementation, display areas are numbered\
    \ system-\n      wide whereas strings are numbered from 1 to N within a display\n\
    \      area.\n   The only errors not detectable by the PDP-10 are transmission\
    \ parity\n   errors and overflow of the IMLAC's memory.\n      The former are\
    \ presently not corrected, but could be handled by\n      any standard technique.\n\
    \      The latter are in principle detectable by the PDP-10, since the\n     \
    \ amount of space required to store a given display is fairly simply\n      computable.\n\
    \         If the IMLAC runs out of space, it deletes lines from the top\n    \
    \     of the teletype simulation display, until only three are left,\n       \
    \  before giving up.\n   A secondary criterion was to hold down the number of\
    \ characters\n   required to represent a display command.\n   We have found two\
    \ problem areas and two areas in which we expect to\n   expand the IMLAC's capability.\n\
    \      Echoing was relegated to TENEX since we desired to avoid the\n      well-known\
    \ complications associated with remote echoing.\n      The question of identifying\
    \ a device as an IMLAC to TENEX gave us\n      a great deal of trouble.\n    \
    \     We settled on the convention of a TENEX Executive command which\n      \
    \   causes TENEX to send the \"Long input mode\" message.\n            The IMLAC\
    \ starts out in short input mode.\n         The TENEX character input routines\
    \ also may be set into either\n         long or short mode.\n            Their\
    \ state is changed by the TSNDA and TSFDA system calls.\n            In short\
    \ mode, (TSNDA last), short input is passed\n            literally, and only the\
    \ character is passed from long input.\n            In long mode (TSFDA last),\
    \ short input is padded with all-\n            zero coordinates, and long input\
    \ is passed literally.\n            This arrangement allows TENEX programs which\
    \ do not use the\n            special features of the IMLAC to operate correctly\
    \ with\n            either an IMLAC or a teletype.\n            The user may restore\
    \ the IMLAC to short mode with another\n            command or with a special\
    \ key on the IMLAC keyboard.\n         Code is ready to allow the IMLAC to collect\
    \ entire literal\n         strings with some internal editing before sending them\
    \ to\n         TENEX.\n            We have not resolved the disposition of characters\
    \ typed by\n            the user between the typed command initiating literal\
    \ input\n            and the receipt by the IMLAC of the \"collect literal\"\n\
    \            message.\n         With 8K of core, the IMLAC can handle a significant\
    \ fraction of\n         the command parsing and feedback functions of the SRI-ARC\
    \ On-\n         Line System (NLS), for which this effort is principally\n    \
    \     intended.\n             [This RFC was put into machine readable form for\
    \ entry]\n             [into the online RFC archives by Lorrie Shiota, 10/01]\n"
