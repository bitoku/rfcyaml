- title: __initial_text__
  contents:
  - '                           Long Thin Networks

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   In view of the unpredictable and problematic nature of long thin\n\
    \   networks (for example, wireless WANs), arriving at an optimized\n   transport\
    \ is a daunting task.  We have reviewed the existing\n   proposals along with\
    \ future research items. Based on this overview,\n   we also recommend mechanisms\
    \ for implementation in long thin\n   networks.\n   Our goal is to identify a\
    \ TCP that works for all users, including\n   users of long thin networks. We\
    \ started from the working\n   recommendations of the IETF TCP Over Satellite\
    \ Links (tcpsat) working\n   group with this end in mind.\n   We recognize that\
    \ not every tcpsat recommendation will be required\n   for long thin networks\
    \ as well, and work toward a set of TCP\n   recommendations that are 'benign'\
    \ in environments that do not require\n   them.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1 Introduction .................................................\
    \    3\n      1.1 Network Architecture ....................................  \
    \  5\n      1.2 Assumptions about the Radio Link ........................    6\n\
    \   2 Should it be IP or Not?  .....................................    7\n  \
    \    2.1 Underlying Network Error Characteristics ................    7\n    \
    \  2.2 Non-IP Alternatives .....................................    8\n      \
    \   2.2.1 WAP ................................................    8\n        \
    \ 2.2.2 Deploying Non-IP Alternatives ......................    9\n      2.3 IP-based\
    \ Considerations .................................    9\n         2.3.1 Choosing\
    \ the MTU [Stevens94, RFC1144] ..............    9\n         2.3.2 Path MTU Discovery\
    \ [RFC1191] .......................   10\n         2.3.3 Non-TCP Proposals ..................................\
    \   10\n   3 The Case for TCP .............................................  \
    \ 11\n   4 Candidate Optimizations ......................................   12\n\
    \      4.1 TCP: Current Mechanisms .................................   12\n  \
    \       4.1.1 Slow Start and Congestion Avoidance ................   12\n    \
    \     4.1.2 Fast Retransmit and Fast Recovery ..................   12\n      4.2\
    \ Connection Setup with T/TCP [RFC1397, RFC1644] ..........   14\n      4.3 Slow\
    \ Start Proposals ....................................   14\n         4.3.1 Larger\
    \ Initial Window ..............................   14\n         4.3.2 Growing the\
    \ Window during Slow Start ...............   15\n            4.3.2.1 ACK Counting\
    \ ..................................   15\n            4.3.2.2 ACK-every-segment\
    \ .............................   16\n         4.3.3 Terminating Slow Start .............................\
    \   17\n         4.3.4 Generating ACKs during Slow Start ..................  \
    \ 17\n      4.4 ACK Spacing .............................................   17\n\
    \      4.5 Delayed Duplicate Acknowlegements .......................   18\n  \
    \    4.6 Selective Acknowledgements [RFC2018] ....................   18\n    \
    \  4.7 Detecting Corruption Loss ...............................   19\n      \
    \   4.7.1 Without Explicit Notification ......................   19\n        \
    \ 4.7.2 With Explicit Notifications ........................   20\n      4.8 Active\
    \ Queue Management .................................   21\n      4.9 Scheduling\
    \ Algorithms ...................................   21\n      4.10 Split TCP and\
    \ Performance-Enhancing Proxies (PEPs) .....   22\n         4.10.1 Split TCP Approaches\
    \ ..............................   23\n         4.10.2 Application Level Proxies\
    \ .........................   26\n         4.10.3 Snoop and its Derivatives .........................\
    \   27\n         4.10.4 PEPs to handle Periods of Disconnection ...........  \
    \ 29\n      4.11 Header Compression Alternatives ........................   30\n\
    \      4.12 Payload Compression ....................................   31\n  \
    \    4.13 TCP Control Block Interdependence [Touch97] ............   32\n   5\
    \ Summary of Recommended Optimizations .........................   33\n   6 Conclusion\
    \ ...................................................   35\n   7 Acknowledgements\
    \ .............................................   35\n   8 Security Considerations\
    \ ......................................   35\n   9 References ...................................................\
    \   36\n   Authors' Addresses .............................................  \
    \ 44\n   Full Copyright Statement .......................................   46\n"
- title: 1 Introduction
  contents:
  - "1 Introduction\n   Optimized wireless networking is one of the major hurdles\
    \ that Mobile\n   Computing must solve if it is to enable ubiquitous access to\n\
    \   networking resources. However, current data networking protocols have\n  \
    \ been optimized primarily for wired networks.  Wireless environments\n   have\
    \ very different characteristics in terms of latency, jitter, and\n   error rate\
    \ as compared to wired networks.  Accordingly, traditional\n   protocols are ill-suited\
    \ to this medium.\n   Mobile Wireless networks can be grouped in W-LANs (for example,\n\
    \   802.11 compliant networks) and W-WANs (for example, CDPD [CDPD],\n   Ricochet,\
    \ CDMA [CDMA], PHS, DoCoMo, GSM [GSM] to name a few).  W-WANs\n   present the\
    \ most serious challenge, given that the length of the\n   wireless link (expressed\
    \ as the delay*bandwidth product) is typically\n   4 to 5 times as long as that\
    \ of its W-LAN counterparts.  For example,\n   for an 802.11 network, assuming\
    \ the delay (round-trip time) is about\n   3 ms.  and the bandwidth is 1.5 Mbps,\
    \ the delay*bandwidth product is\n   4500 bits. For a W-WAN such as Ricochet,\
    \ a typical round-trip time\n   may be around 500 ms. (the best is about 230 ms.),\
    \ and the sustained\n   bandwidth is about 24 Kbps. This yields a delay*bandwidth\
    \ product\n   roughly equal to 1.5 KB. In the near future, 3rd Generation wireless\n\
    \   services will offer 384Kbps and more.  Assuming a 200 ms round-trip,\n   the\
    \ delay*bandwidth product in this case is 76.8 Kbits (9.6 KB). This\n   value\
    \ is larger than the default 8KB buffer space used by many TCP\n   implementations.\
    \ This means that, whereas for W-LANs the default\n   buffer space is enough,\
    \ future W-WANs will operate inefficiently\n   (that is, they will not be able\
    \ to fill the pipe) unless they\n   override the default value. A 3rd Generation\
    \ wireless service\n   offering 2 Mbps with 200-millisecond latency requires a\
    \ 50 KB buffer.\n   Most importantly,  latency across a link adversely affects\n\
    \   throughput. For example,  [MSMO97] derives an upper bound on TCP\n   throughput.\
    \ Indeed, the resultant expression is inversely related to\n   the round-trip\
    \ time.\n   The long latencies also push the limits (and commonly transgress\n\
    \   them) for what is acceptable to users of interactive applications.\n   As\
    \ a quick glance to our list of references will reveal, there is a\n   wealth\
    \ of proposals that attempt to solve the wireless networking\n   problem. In this\
    \ document, we survey the different solutions\n   available or under investigation,\
    \ and issue the corresponding\n   recommendations.\n   There is a large body of\
    \ work on the subject of improving TCP\n   performance over satellite links. The\
    \ documents under development by\n   the tcpsat working group of the IETF [AGS98,\
    \ ADGGHOSSTT98] are very\n   relevant. In both cases, it is essential to start\
    \ by improving the\n   characteristics of the medium by using forward error correction\
    \ (FEC)\n   at the link layer to reduce the BER (bit error rate) from values as\n\
    \   high as 10-3 to 10-6 or better. This makes the BER manageable. Once\n   in\
    \ this realm, retransmission schemes like ARQ (automatic repeat\n   request) may\
    \ be used to bring it down even further. Notice that\n   sometimes it may be desirable\
    \ to forego ARQ because of the additional\n   delay it implies.  In particular,\
    \ time sensitive traffic (video,\n   audio) must be delivered within a certain\
    \ time limit beyond which the\n   data is obsolete. Exhaustive retransmissions\
    \ in this case merely\n   succeed in wasting time in order to deliver data that\
    \ will be\n   discarded once it arrives at its destination.  This indicates the\n\
    \   desirability of augmenting the protocol stack implementation on\n   devices\
    \ such that the upper protocol layers can inform the link and\n   MAC layer when\
    \ to avoid such costly retransmission schemes.\n   Networks that include satellite\
    \ links are examples of \"long fat\n   networks\" (LFNs or \"elephants\"). They\
    \ are \"long\" networks because\n   their round-trip time is quite high (for example,\
    \ 0.5 sec and higher\n   for geosynchronous satellites). Not all satellite links\
    \ fall within\n   the LFN regime. In particular, round-trip times in a low-earth\n\
    \   orbiting (LEO) satellite network may be as little as a few\n   milliseconds\
    \ (and never extend beyond 160 to 200 ms). W-WANs share\n   the \"L\" with LFNs.\
    \ However, satellite networks are also \"fat\" in the\n   sense that they may\
    \ have high bandwidth. Satellite networks may often\n   have a delay*bandwidth\
    \ product above 64 KBytes, in which case they\n   pose additional problems to\
    \ TCP [TCPHP]. W-WANs do not generally\n   exhibit this behavior. Accordingly,\
    \ this document only deals with\n   links that are \"long thin pipes\", and the\
    \ networks that contain them:\n   \"long thin networks\". We call these \"LTNs\"\
    .\n   This document does not give an overview of the API used to access the\n\
    \   underlying transport. We believe this is an orthogonal issue, even\n   though\
    \ some of the proposals below have been put forth assuming a\n   given interface.\
    \  It is possible, for example, to support the\n   traditional socket semantics\
    \ without fully relying on TCP/IP\n   transport [MOWGLI].\n   Our focus is on\
    \ the on-the-wire protocols. We try to include the most\n   relevant ones and\
    \ briefly (given that we provide the references\n   needed for further study)\
    \ mention their most salient points.\n"
- title: 1.1 Network Architecture
  contents:
  - "1.1 Network Architecture\n   One significant difference between LFNs and LTNs\
    \ is that we assume\n   the W-WAN link is the last hop to the end user. This allows\
    \ us to\n   assume that a single intermediate node sees all packets transferred\n\
    \   between the wireless mobile device and the rest of the Internet.\n   This\
    \ is only one of the topologies considered by the TCP Satellite\n   community.\n\
    \   Given our focus on mobile wireless applications, we only consider a\n   very\
    \ specific architecture that includes:\n      -  a wireless mobile device, connected\
    \ via\n      -  a wireless link (which may, in fact comprise several hops at\n\
    \         the link layer), to\n      -  an intermediate node (sometimes referred\
    \ to as a base station)\n         connected via\n      -  a wireline link, which\
    \ in turn interfaces with\n      -  the landline Internet and millions of legacy\
    \ servers and web\n         sites.\n   Specifically, we are not as concerned with\
    \ paths that include two\n   wireless segments separated by a wired one. This\
    \ may occur, for\n   example, if one mobile device connects across its immediate\
    \ wireless\n   segment via an intermediate node to the Internet, and then via\
    \ a\n   second wireless segment to another mobile device.  Quite often,\n   mobile\
    \ devices connect to a legacy server on the wired Internet.\n   Typically, the\
    \ endpoints of the wireless segment are the intermediate\n   node and the mobile\
    \ device. However, the latter may be a wireless\n   router to a mobile network.\
    \ This is also important and has\n   applications in, for example, disaster recovery.\n\
    \   Our target architecture has implications which concern the\n   deployability\
    \ of candidate solutions. In particular, an important\n   requirement is that\
    \ we cannot alter the networking stack on the\n   legacy servers. It would be\
    \ preferable to only change the networking\n   stack at the intermediate node,\
    \ although changing it at the mobile\n   devices is certainly an option and perhaps\
    \ a necessity.\n   We envision mobile devices that can use the wireless medium\
    \ very\n   efficiently, but overcome some of its traditional constraints.  That\n\
    \   is, full mobility implies that the devices have the flexibility and\n   agility\
    \ to use whichever happens to be the best network connection\n   available at\
    \ any given point in time or space.  Accordingly, devices\n   could switch from\
    \ a wired office LAN and hand over their ongoing\n   connections to continue on,\
    \ say, a wireless WAN. This type of agility\n   also requires Mobile IP [RFC2002].\n"
- title: 1.2 Assumptions about the Radio Link
  contents:
  - "1.2 Assumptions about the Radio Link\n   The system architecture described above\
    \ assumes at most one wireless\n   link (perhaps comprising more than one wireless\
    \ hop).  However, this\n   is not enough to characterize a wireless link.  Additional\n\
    \   considerations are:\n      -  What are the error characteristics of the wireless\
    \ medium?  The\n         link may present a higher BER than a wireline network\
    \ due to\n         burst errors and disconnections. The techniques below usually\n\
    \         do not address all the types of errors. Accordingly, a complete\n  \
    \       solution should combine the best of all the proposals.\n         Nevertheless,\
    \ in this document we are more concerned with (and\n         give preference to\
    \ solving) the most typical case: (1) higher\n         BER due to random errors\
    \ (which implies longer and more\n         variable delays due to link-layer error\
    \ corrections and\n         retransmissions) rather than (2) an interruption in\
    \ service due\n         to a handoff or a disconnection.  The latter are also\
    \ important\n         and we do include relevant proposals in this survey.\n \
    \     -  Is the wireless service datagram oriented, or is it a virtual\n     \
    \    circuit?  Currently, switched virtual circuits are more common,\n       \
    \  but packet networks are starting to appear, for example,\n         Metricom's\
    \ Starmode [CB96], CDPD [CDPD] and General Packet\n         Radio Service (GPRS)\
    \ [GPRS],[BW97] in GSM.\n      -  What kind of reliability does the link provide?\
    \ Wireless\n         services typically retransmit a packet (frame) until it has\n\
    \         been acknowledged by the target. They may allow the user to\n      \
    \   turn off this behavior. For example, GSM allows RLP [RLP]\n         (Radio\
    \ Link Protocol)  to be turned off.  Metricom has a\n         similar \"lightweight\"\
    \ mode. In GSM RLP, a frame is\n         retransmitted until the maximum number\
    \ of retransmissions\n         (protocol parameter) is reached. What happens when\
    \ this limit\n         is reached is determined by the telecom operator:  the\
    \ physical\n         link connection is either disconnected or a link reset is\n\
    \         enforced where the sequence numbers are resynchronized and the\n   \
    \      transmit and receive buffers are flushed resulting in lost\n         data.\
    \ Some wireless services, like CDMA IS95-RLP [CDMA,\n         Karn93], limit the\
    \ latency on the wireless link by\n         retransmitting a frame only a couple\
    \ of times. This decreases\n         the residual frame error rate significantly,\
    \ but does not\n         provide fully reliable link service.\n      -  Does the\
    \ mobile device transmit and receive at the same time?\n         Doing so increases\
    \ the cost of the electronics on the mobile\n         device. Typically, this\
    \ is not the case. We assume in this\n         document that mobile devices do\
    \ not transmit and receive\n         simultaneously.\n      -  Does the mobile\
    \ device directly address more than one peer on\n         the wireless link? Packets\
    \ to each different peer may traverse\n         spatially distinct wireless paths.\
    \ Accordingly, the path to\n         each peer may exhibit very different characteristics.\
    \  Quite\n         commonly, the mobile device addresses only one peer (the\n\
    \         intermediate node) at any given point in time.  When this is\n     \
    \    not the case, techniques such as Channel-State Dependent Packet\n       \
    \  Scheduling come into play (see the section \"Packet Scheduling\"\n        \
    \ below).\n"
- title: 2 Should it be IP or Not?
  contents:
  - "2 Should it be IP or Not?\n   The first decision is whether to use IP as the\
    \ underlying network\n   protocol or not. In particular, some data protocols evolved\
    \ from\n   wireless telephony are not always -- though at times they may be --\n\
    \   layered on top of IP [MOWGLI, WAP]. These proposals are based on the\n   concept\
    \ of proxies that provide adaptation services between the\n   wireless and wireline\
    \ segments.\n   This is a reasonable model for mobile devices that always communicate\n\
    \   through the proxy. However, we expect many wireless mobile devices to\n  \
    \ utilize wireline networks whenever they are available. This model\n   closely\
    \ follows current laptop usage patterns: devices typically\n   utilize LANs, and\
    \ only resort to dial-up access when \"out of the\n   office.\"\n   For these\
    \ devices, an architecture that assumes IP is the best\n   approach, because it\
    \ will be required for communications that do not\n   traverse the intermediate\
    \ node (for example, upon reconnection to a\n   W-LAN or a 10BaseT network at\
    \ the office).\n"
- title: 2.1 Underlying Network Error Characteristics
  contents:
  - "2.1 Underlying Network Error Characteristics\n   Using IP as the underlying network\
    \ protocol requires a certain (low)\n   level of link robustness that is expected\
    \ of wireless links.\n   IP, and the protocols that are carried in IP packets,\
    \ are protected\n   end-to-end by checksums that are relatively weak [Stevens94,\n\
    \   Paxson97] (and, in some cases, optional). For much of the Internet,\n   these\
    \ checksums are sufficient; in wireless environments, the error\n   characteristics\
    \ of the raw wireless link are much less robust than\n   the rest of the end-to-end\
    \ path.  Hence for paths that include\n   wireless links, exclusively relying\
    \ on end-to-end mechanisms to\n   detect and correct transmission errors is undesirable.\
    \ These should\n   be complemented by local link-level mechanisms. Otherwise,\
    \ damaged IP\n   packets are propagated through the network only to be discarded\
    \ at\n   the destination host. For example, intermediate routers are required\n\
    \   to check the IP header checksum, but not the UDP or TCP checksums.\n   Accordingly,\
    \ when the payload of an IP packet is corrupted, this is\n   not detected until\
    \ the packet arrives at its ultimate destination.\n   A better approach is to\
    \ use link-layer mechanisms such as FEC,\n   retransmissions, and so on in order\
    \ to improve the characteristics of\n   the wireless link and present a much more\
    \ reliable service to IP.\n   This approach has been taken by CDPD, Ricochet and\
    \ CDMA.\n   This approach is roughly analogous to the successful deployment of\n\
    \   Point-to-Point Protocol (PPP), with robust framing and 16-bit\n   checksumming,\
    \ on wireline networks as a replacement for the Serial\n   Line Interface Protocol\
    \ (SLIP), with only a single framing byte and\n   no checksumming.\n   [AGS98]\
    \ recommends the use of FEC in satellite environments.\n   Notice that the link-layer\
    \ could adapt its frame size to the\n   prevalent BER.  It would perform its own\
    \ fragmentation and reassembly\n   so that IP could still enjoy a large enough\
    \ MTU size [LS98].\n   A common concern for using IP as a transport is the header\
    \ overhead\n   it implies. Typically, the underlying link-layer appears as PPP\n\
    \   [RFC1661] to the IP layer above. This allows for header compression\n   schemes\
    \ [IPHC, IPHC-RTP, IPHC-PPP] which greatly alleviate the\n   problem.\n"
- title: 2.2 Non-IP Alternatives
  contents:
  - "2.2 Non-IP Alternatives\n   A number of non-IP alternatives aimed at wireless\
    \ environments have\n   been proposed. One representative proposal is discussed\
    \ here.\n"
- title: 2.2.1 WAP
  contents:
  - "2.2.1 WAP\n   The Wireless Application Protocol (WAP) specifies an application\n\
    \   framework and network protocols for wireless devices such as mobile\n   telephones,\
    \ pagers, and PDAs [WAP]. The architecture requires a proxy\n   between the mobile\
    \ device and the server. The WAP protocol stack is\n   layered over a datagram\
    \ transport service.  Such a service is\n   provided by most wireless networks;\
    \ for example, IS-136, GSM\n   SMS/USSD, and UDP in IP networks like CDPD and\
    \ GSM GPRS. The core of\n   the WAP protocols is a binary HTTP/1.1 protocol with\
    \ additional\n   features such as header caching between requests and a shared\
    \ state\n   between client and server.\n"
- title: 2.2.2 Deploying Non-IP Alternatives
  contents:
  - "2.2.2 Deploying Non-IP Alternatives\n   IP is such a fundamental element of the\
    \ Internet that non-IP\n   alternatives face substantial obstacles to deployment,\
    \ because they\n   do not exploit the IP infrastructure. Any non-IP alternative\
    \ that is\n   used to provide gatewayed access to the Internet must map between\
    \ IP\n   addresses and non-IP addresses, must terminate IP-level security at a\n\
    \   gateway, and cannot use IP-oriented discovery protocols (Dynamic Host\n  \
    \ Configuration Protocol, Domain Name Services, Lightweight Directory\n   Access\
    \ Protocol, Service Location Protocol, etc.) without translation\n   at a gateway.\n\
    \   A further complexity occurs when a device supports both wireless and\n   wireline\
    \ operation. If the device uses IP for wireless operation,\n   uninterrupted operation\
    \ when the device is connected to a wireline\n   network is possible (using Mobile\
    \ IP). If a non-IP alternative is\n   used, this switchover is more difficult\
    \ to accomplish.\n   Non-IP alternatives face the burden of proof that IP is so\
    \ ill-suited\n   to a wireless environment that it is not a viable technology.\n"
- title: 2.3 IP-based Considerations
  contents:
  - "2.3 IP-based Considerations\n   Given its worldwide deployment, IP is an obvious\
    \ choice for the\n   underlying network technology. Optimizations implemented\
    \ at this\n   level benefit traditional Internet application protocols as well\
    \ as\n   new ones layered on top of IP or UDP.\n"
- title: 2.3.1 Choosing the MTU [Stevens94, RFC1144]
  contents:
  - "2.3.1 Choosing the MTU [Stevens94, RFC1144]\n   In slow networks, the time required\
    \ to transmit the largest possible\n   packet may be considerable.  Interactive\
    \ response time should not\n   exceed the well-known human factors limit of 100\
    \ to 200 ms. This\n   should be considered the maximum time budget to (1) send\
    \ a packet and\n   (2) obtain a response. In most networking stack implementations,\
    \ (1)\n   is highly dependent on the maximum transmission unit (MTU). In the\n\
    \   worst case, a small packet from an interactive application may have\n   to\
    \ wait for a large packet from a bulk transfer application before\n   being sent.\
    \ Hence, a good rule of thumb is to choose an MTU such that\n   its transmission\
    \ time is less than (or not much larger than) 200 ms.\n   Of course, compression\
    \ and type-of-service queuing (whereby\n   interactive data packets are given\
    \ a higher priority) may alleviate\n   this problem. In particular, the latter\
    \ may reduce the average wait\n   time to about half the MTU's transmission time.\n"
- title: 2.3.2 Path MTU Discovery [RFC1191]
  contents:
  - "2.3.2 Path MTU Discovery [RFC1191]\n   Path MTU discovery benefits any protocol\
    \ built on top of IP. It\n   allows a sender to determine what the maximum end-to-end\
    \ transmission\n   unit is to a given destination. Without Path MTU discovery,\
    \ the\n   default IPv4 MTU size is 576. The benefits of using a larger MTU are:\n\
    \      -  Smaller ratio of header overhead to data\n      -  Allows TCP to grow\
    \ its congestion window faster, since it\n         increases in units of segments.\n\
    \   Of course, for a given BER, a larger MTU has a correspondingly larger\n  \
    \ probability of error within any given segment. The BER may be reduced\n   using\
    \ lower level techniques like FEC and link-layer retransmissions.\n   The issue\
    \ is that now delays may become a problem due to the\n   additional retransmissions,\
    \ and the fact that packet transmission\n   time increases with a larger MTU.\n\
    \   Recommendation: Path MTU discovery is recommended. [AGS98] already\n   recommends\
    \ its use in satellite environments.\n"
- title: 2.3.3 Non-TCP Proposals
  contents:
  - "2.3.3 Non-TCP Proposals\n   Other proposals assume an underlying IP datagram\
    \ service, and\n   implement an optimized transport either directly on top of\
    \ IP\n   [NETBLT] or on top of UDP [MNCP]. Not relying on TCP is a bold move,\n\
    \   given the wealth of experience and research related to it.  It could\n   be\
    \ argued that the Internet has not collapsed because its main\n   protocol, TCP,\
    \ is very careful in how it uses the network, and\n   generally treats it as a\
    \ black box assuming all packet losses are due\n   to congestion and prudently\
    \ backing off. This avoids further\n   congestion.\n   However, in the wireless\
    \ medium, packet losses may also be due to\n   corruption due to high BER, fading,\
    \ and so on. Here, the right\n   approach is to try harder, instead of backing\
    \ off. Alternative\n   transport protocols are:\n      -  NETBLT [NETBLT, RFC1986,\
    \ RFC1030]\n      -  MNCP [MNCP]\n      -  ESRO [RFC2188]\n      -  RDP [RFC908,\
    \ RFC1151]\n      -  VMTP [VMTP]\n"
- title: 3 The Case for TCP
  contents:
  - "3 The Case for TCP\n   This is one of the most hotly debated issues in the wireless\
    \ arena.\n   Here are some arguments against it:\n      -  It is generally recognized\
    \ that TCP does not perform well in\n         the presence of significant levels\
    \ of non-congestion loss.  TCP\n         detractors argue that the wireless medium\
    \ is one such case, and\n         that it is hard enough to fix TCP. They argue\
    \ that it is easier\n         to start from scratch.\n      -  TCP has too much\
    \ header overhead.\n      -  By the time the mechanisms are in place to fix it,\
    \ TCP is very\n         heavy, and ill-suited for use by lightweight, portable\
    \ devices.\n   and here are some in support of TCP:\n      -  It is preferable\
    \ to continue using the same protocol that the\n         rest of the Internet\
    \ uses for compatibility reasons. Any\n         extensions specific to the wireless\
    \ link may be negotiated.\n      -  Legacy mechanisms may be reused (for example\
    \ three-way\n         handshake).\n      -  Link-layer FEC and ARQ can reduce\
    \ the BER such that any losses\n         TCP does see are, in fact, caused by\
    \ congestion (or a sustained\n         interruption of link connectivity). Modern\
    \ W-WAN technologies\n         do this (CDPD, US-TDMA, CDMA, GSM), thus improving\
    \ TCP\n         throughput.\n      -  Handoffs among different technologies are\
    \ made possible by\n         Mobile IP [RFC2002], but only if the same protocols,\
    \ namely\n         TCP/IP, are used throughout.\n      -  Given TCP's wealth of\
    \ research and experience, alternative\n         protocols are relatively immature,\
    \ and the full implications of\n         their widespread deployment not clearly\
    \ understood.\n   Overall, we feel that the performance of TCP over long-thin\
    \ networks\n   can be improved significantly. Mechanisms to do so are discussed\
    \ in\n   the next sections.\n"
- title: 4 Candidate Optimizations
  contents:
  - "4 Candidate Optimizations\n   There is a large volume of work on the subject\
    \ of optimizing TCP for\n   operation over wireless media. Even though satellite\
    \ networks\n   generally fall in the LFN regime, our current LTN focus has much\
    \ to\n   benefit from it.  For example, the work of the TCP-over-Satellite\n \
    \  working group of the IETF has been extremely helpful in preparing\n   this\
    \ section [AGS98, ADGGHOSSTT98].\n"
- title: '4.1 TCP: Current Mechanisms'
  contents:
  - "4.1 TCP: Current Mechanisms\n   A TCP sender adapts its use of bandwidth based\
    \ on feedback from the\n   receiver. The high latency characteristic of LTNs implies\
    \ that TCP's\n   adaptation is correspondingly slower than on networks with shorter\n\
    \   delays.  Similarly, delayed ACKs exacerbate the perceived latency on\n   the\
    \ link. Given that TCP grows its congestion window in units of\n   segments, small\
    \ MTUs may slow adaptation even further.\n"
- title: 4.1.1 Slow Start and Congestion Avoidance
  contents:
  - "4.1.1 Slow Start and Congestion Avoidance\n   Slow Start and Congestion Avoidance\
    \ [RFC2581] are essential the\n   Internet's stability.  However there are two\
    \ reasons why the wireless\n   medium adversely affects them:\n      -  Whenever\
    \ TCP's retransmission timer expires, the sender assumes\n         that the network\
    \ is congested and invokes slow start. This is\n         why it is important to\
    \ minimize the losses caused by\n         corruption, leaving only those caused\
    \ by congestion (as\n         expected by TCP).\n      -  The sender increases\
    \ its window based on the number of ACKs\n         received. Their rate of arrival,\
    \ of course, is dependent on the\n         RTT (round-trip-time) between sender\
    \ and receiver, which\n         implies long ramp-up times in high latency links\
    \ like LTNs. The\n         dependency lasts until the pipe is filled.\n      -\
    \  During slow start, the sender increases its window in units of\n         segments.\
    \ This is why it is important to use an appropriately\n         large MTU which,\
    \ in turn, requires requires link layers with\n         low loss.\n"
- title: 4.1.2 Fast Retransmit and Fast Recovery
  contents:
  - "4.1.2 Fast Retransmit and Fast Recovery\n   When a TCP sender receives several\
    \ duplicate ACKs, fast retransmit\n   [RFC2581] allows it to infer that a segment\
    \ was lost.  The sender\n   retransmits what it considers to be this lost segment\
    \ without waiting\n   for the full timeout, thus saving time.\n   After a fast\
    \ retransmit, a sender invokes the fast recovery [RFC2581]\n   algorithm. Fast\
    \ recovery allows the sender to transmit at half its\n   previous rate (regulating\
    \ the growth of its window based on\n   congestion avoidance), rather than having\
    \ to begin a slow start. This\n   also saves time.\n   In general, TCP can increase\
    \ its window beyond the delay-bandwidth\n   product. However, in LTN links the\
    \ congestion window may remain\n   rather small, less than four segments, for\
    \ long periods of time due\n   to any of the following reasons:\n      1. Typical\
    \ \"file size\" to be transferred over a connection is\n         relatively small\
    \ (Web requests, Web document objects, email\n         messages, files, etc.)\
    \ In particular, users of LTNs are not\n         very willing to carry out large\
    \ transfers as the response time\n         is so long.\n      2. If the link has\
    \ high BER, the congestion window tends to stay\n         small\n      3. When\
    \ an LTN is combined with a highly congested wireline\n         Internet path,\
    \ congestion losses on the Internet have the same\n         effect as 2.\n   \
    \   4. Commonly, ISPs/operators configure only a small number of\n         buffers\
    \ (even as few as for 3 packets) per user in their dial-\n         up routers\n\
    \      5. Often small socket buffers are recommended with LTNs in order\n    \
    \     to prevent the RTO from inflating and to diminish the amount of\n      \
    \   packets with competing traffic.\n   A small window effectively prevents the\
    \ sender from taking advantage\n   of Fast Retransmits. Moreover, efficient recovery\
    \ from multiple\n   losses within a single window requires adoption of new proposals\n\
    \   (NewReno [RFC2582]). In addition, on slow paths with no packet\n   reordering\
    \ waiting for three duplicate ACKs to arrive postpones\n   retransmission unnecessarily.\n\
    \   Recommendation: Implement Fast Retransmit and Fast Recovery at this\n   time.\
    \ This is a widely-implemented optimization and is currently at\n   Proposed Standard\
    \ level. [AGS98] recommends implementation of Fast\n   Retransmit/Fast Recovery\
    \ in satellite environments.  NewReno\n   [RFC2582] apparently does help a sender\
    \ better handle partial ACKs\n   and multiple losses in a single window, but at\
    \ this point is not\n   recommended due to its experimental nature.  Instead,\
    \ SACK [RFC2018]\n   is the preferred mechanism.\n"
- title: 4.2 Connection Setup with T/TCP [RFC1397, RFC1644]
  contents:
  - "4.2 Connection Setup with T/TCP [RFC1397, RFC1644]\n   TCP engages in a \"three-way\
    \ handshake\" whenever a new connection is\n   set up.  Data transfer is only\
    \ possible after this phase has\n   completed successfully.  T/TCP allows data\
    \ to be exchanged in\n   parallel with the connection set up, saving valuable\
    \ time for short\n   transactions on long-latency networks.\n   Recommendation:\
    \ T/TCP is not recommended, for these reasons:\n   -  It is an Experimental RFC.\n\
    \   -  It is not widely deployed, and it has to be deployed at both ends\n   \
    \   of a connection.\n   -  Security concerns have been raised that T/TCP is more\
    \ vulnerable\n      to address-spoofing attacks than TCP itself.\n   -  At least\
    \ some of the benefits of T/TCP (eliminating three-way\n      handshake on subsequent\
    \ query-response transactions, for instance)\n      are also available with persistent\
    \ connections on HTTP/1.1, which\n      is more widely deployed.\n   [ADGGHOSSTT98]\
    \ does not have a recommendation on T/TCP in satellite\n   environments.\n"
- title: 4.3 Slow Start Proposals
  contents:
  - "4.3 Slow Start Proposals\n   Because slow start dominates the network response\
    \ seen by interactive\n   users at the beginning of a TCP connection, a number\
    \ of proposals\n   have been made to modify or eliminate slow start in long latency\n\
    \   environments.\n   Stability of the Internet is paramount, so these proposals\
    \ must\n   demonstrate that they will not adversely affect Internet congestion\n\
    \   levels in significant ways.\n"
- title: 4.3.1 Larger Initial Window
  contents:
  - "4.3.1 Larger Initial Window\n   Traditional slow start, with an initial window\
    \ of one segment, is a\n   time-consuming bandwidth adaptation procedure over\
    \ LTNs. Studies on\n   an initial window larger than one segment [RFC2414, AHO98]\
    \ resulted\n   in the TCP standard supporting a maximum value of 2 [RFC2581].\
    \ Higher\n   values are still experimental in nature.\n   In simulations with\
    \ an increased initial window of three packets\n   [RFC2415], this proposal does\
    \ not contribute significantly to packet\n   drop rates, and it has the added\
    \ benefit of improving initial\n   response times when the peer device delays\
    \ acknowledgements during\n   slow start (see next proposal).\n   [RFC2416] addresses\
    \ situations where the initial window exceeds the\n   number of buffers available\
    \ to TCP and indicates that this situation\n   is no different from the case where\
    \ the congestion window grows\n   beyond the number of buffers available.\n  \
    \ [RFC2581] now allows an initial congestion window of two segments. A\n   larger\
    \ initial window, perhaps as many as four segments, might be\n   allowed in the\
    \ future in environments where this significantly\n   improves performance (LFNs\
    \ and LTNs).\n   Recommendation: Implement this on devices now. The research on\
    \ this\n   optimization indicates that 3 segments is a safe initial setting, and\n\
    \   is centering on choosing between 2, 3, and 4. For now, use 2\n   (following\
    \ RFC2581), which at least allows clients running query-\n   response applications\
    \ to get an initial ACK from unmodified servers\n   without waiting for a typical\
    \ delayed ACK timeout of 200\n   milliseconds, and saves two round-trips. An initial\
    \ window of 3\n   [RFC2415] looks promising and may be adopted in the future pending\n\
    \   further research and experience.\n"
- title: 4.3.2 Growing the Window during Slow Start
  contents:
  - "4.3.2 Growing the Window during Slow Start\n   The sender increases its window\
    \ based on the flow of ACKs coming back\n   from the receiver. Particularly during\
    \ slow start, this flow is very\n   important.  A couple of the proposals that\
    \ have been studied are (1)\n   ACK counting and (2) ACK-every-segment.\n"
- title: 4.3.2.1 ACK Counting
  contents:
  - "4.3.2.1 ACK Counting\n   The main idea behind ACK counting is:\n      -  Make\
    \ each ACK count to its fullest by growing the window based\n         on the data\
    \ being acknowledged (byte counting) instead of the\n         number of ACKs (ACK\
    \ counting). This has been shown to cause\n         bursts which lead to congestion.\
    \ [Allman98] shows that Limited\n         Byte Counting (LBC), in which the window\
    \ growth is limited to 2\n         segments, does not lead to as much burstiness,\
    \ and offers some\n         performance gains.\n   Recommendation: Unlimited byte\
    \ counting is not recommended.  Van\n   Jacobson cautions against byte counting\
    \ [TCPSATMIN] because it leads\n   to burstiness, and recommends ACK spacing [ACKSPACING]\
    \ instead.\n   ACK spacing requires ACKs to consistently pass through a single\
    \ ACK-\n   spacing router.  This requirement works well for W-WAN environments\n\
    \   if the ACK-spacing router is also the intermediate node.\n   Limited byte\
    \ counting warrants further investigation before we can\n   recommend this proposal,\
    \ but it shows promise.\n"
- title: 4.3.2.2 ACK-every-segment
  contents:
  - "4.3.2.2 ACK-every-segment\n   The main idea behind ACK-every-segment is:\n  \
    \    -  Keep a constant stream of ACKs coming back by turning off\n         delayed\
    \ ACKs [RFC1122] during slow start. ACK-every-segment\n         must be limited\
    \ to slow start, in order to avoid penalizing\n         asymmetric-bandwidth configurations.\
    \ For instance, a low\n         bandwidth link carrying acknowledgements back\
    \ to the sender,\n         hinders the growth of the congestion window, even if\
    \ the link\n         toward the client has a greater bandwidth [BPK99].\n   Even\
    \ though simulations confirm its promise (it allows receivers to\n   receive the\
    \ second segment from unmodified senders without waiting\n   for a typical delayed\
    \ ACK timeout of 200 milliseconds), for this\n   technique to be practical the\
    \ receiver must acknowledge every segment\n   only when the sender is in slow\
    \ start.  Continuing to do so when the\n   sender is in congestion avoidance may\
    \ have adverse effects on the\n   mobile device's battery consumption and on traffic\
    \ in the network.\n   This violates a SHOULD in [RFC2581]:  delayed acknowledgements\
    \ SHOULD\n   be used by a TCP receiver.\n   \"Disabling Delayed ACKs During Slow\
    \ Start\" is technically\n   unimplementable, as the receiver has no way of knowing\
    \ when the\n   sender crosses ssthresh (the \"slow start threshold\") and begins\
    \ using\n   the congestion avoidance algorithm.  If receivers follow\n   recommendations\
    \ for increased initial windows, disabling delayed ACKs\n   during an increased\
    \ initial window would open the TCP window more\n   rapidly without doubling ACK\
    \ traffic in general.  However, this\n   scheme might double ACK traffic if most\
    \ connections remain in slow-\n   start.\n   Recommendation: ACK only the first\
    \ segment on a new connection with\n   no delay.\n"
- title: 4.3.3 Terminating Slow Start
  contents:
  - "4.3.3 Terminating Slow Start\n   New mechanisms [ADGGHOSSTT98] are being proposed\
    \ to improve TCP's\n   adaptive properties such that the available bandwidth is\
    \ better\n   utilized while reducing the possibility of congesting the network.\n\
    \   This results in the closing of the congestion window to 1 segment\n   (which\
    \ precludes fast retransmit), and the subsequent slow start\n   phase.\n   Theoretically,\
    \ an optimum value for slow-start threshold (ssthresh)\n   allows connection bandwidth\
    \ utilization to ramp up as aggressively as\n   possible without \"overshoot\"\
    \ (using so much bandwidth that packets\n   are lost and congestion avoidance\
    \ procedures are invoked).\n   Recommendation: Estimating the slow start threshold\
    \ is not\n   recommended.  Although this would be helpful if we knew how to do\
    \ it,\n   rough consensus on the tcp-impl and tcp-sat mailing lists is that in\n\
    \   non-trivial operational networks there is no reliable method to probe\n  \
    \ during TCP startup and estimate the bandwidth available.\n"
- title: 4.3.4 Generating ACKs during Slow Start
  contents:
  - "4.3.4 Generating ACKs during Slow Start\n   Mitigations that inject additional\
    \ ACKs (whether \"ACK-first-segment\"\n   or \"ACK-every-segment-during-slow-start\"\
    ) beyond what today's\n   conformant TCPs inject are only applicable during the\
    \ slow-start\n   phases of a connection. After an initial exchange, the connection\n\
    \   usually completes slow-start, so TCPs only inject additional ACKs\n   when\
    \ (1) the connection is closed, and a new connection is opened, or\n   (2) the\
    \ TCPs handle idle connection restart correctly by performing\n   slow start.\n\
    \   Item (1) is typical when using HTTP/1.0, in which each request-\n   response\
    \ transaction requires a new connection.  Persistent\n   connections in HTTP/1.1\
    \ help in maintaining a connection in\n   congestion avoidance instead of constantly\
    \ reverting to slow-start.\n   Because of this, these optimizations which are\
    \ only enabled during\n   slow-start do not get as much of a chance to act. Item\
    \ (2), of\n   course, is independent of HTTP version.\n"
- title: 4.4 ACK Spacing
  contents:
  - "4.4 ACK Spacing\n   During slow start, the sender responds to the incoming ACK\
    \ stream by\n   transmitting N+1 segments for each ACK, where N is the number\
    \ of new\n   segments acknowledged by the incoming ACK.  This results in data\n\
    \   being sent at twice the speed at which it can be processed by the\n   network.\
    \  Accordingly, queues will form, and due to insufficient\n   buffering at the\
    \ bottleneck router, packets may get dropped before\n   the link's capacity is\
    \ full.\n   Spacing out the ACKs effectively controls the rate at which the\n\
    \   sender will transmit into the network, and may result in little or no\n  \
    \ queueing at the bottleneck router [ACKSPACING].  Furthermore, ack\n   spacing\
    \ reduces the size of the bursts.\n   Recommendation: No recommendation at this\
    \ time. Continue monitoring\n   research in this area.\n"
- title: 4.5 Delayed Duplicate Acknowlegements
  contents:
  - "4.5 Delayed Duplicate Acknowlegements\n   As was mentioned above, link-layer\
    \ retransmissions may decrease the\n   BER enough that congestion accounts for\
    \ most of packet losses; still,\n   nothing can be done about interruptions due\
    \ to handoffs, moving\n   beyond wireless coverage, etc. In this scenario, it\
    \ is imperative to\n   prevent interaction between link-layer retransmission and\
    \ TCP\n   retransmission as these layers duplicate each other's efforts. In\n\
    \   such an environment it may make sense to delay TCP's efforts so as to\n  \
    \ give the link-layer a chance to recover. With this in mind, the\n   Delayed\
    \ Dupacks [MV97, Vaidya99] scheme selectively delays duplicate\n   acknowledgements\
    \ at the receiver.  It is preferable to allow a local\n   mechanism to resolve\
    \ a local problem, instead of invoking TCP's end-\n   to-end mechanism and incurring\
    \ the associated costs, both in terms of\n   wasted bandwidth and in terms of\
    \ its effect on TCP's window behavior.\n   The Delayed Dupacks scheme can be used\
    \ despite IP encryption since\n   the intermediate node does not need to examine\
    \ the TCP headers.\n   Currently, it is not well understood how long the receiver\
    \ should\n   delay the duplicate acknowledgments. In particular, the impact of\n\
    \   wireless medium access control (MAC) protocol on the choice of delay\n   parameter\
    \ needs to be studied. The MAC protocol may affect the\n   ability to choose the\
    \ appropriate delay (either statically or\n   dynamically). In general, significant\
    \ variabilities in link-level\n   retransmission times can have an adverse impact\
    \ on the performance of\n   the Delayed Dupacks scheme. Furthermore, as discussed\
    \ later in\n   section 4.10.3, Delayed Dupacks and some other schemes (such as\
    \ Snoop\n   [SNOOP]) are only beneficial in certain types of network links.\n\
    \   Recommendation: Delaying duplicate acknowledgements may be useful in\n   specific\
    \ network topologies, but a general recommendation requires\n   further research\
    \ and experience.\n"
- title: 4.6 Selective Acknowledgements [RFC2018]
  contents:
  - "4.6 Selective Acknowledgements [RFC2018]\n   SACK may not be useful in many LTNs,\
    \ according to Section 1.1 of\n   [TCPHP].  In particular, SACK is more useful\
    \ in the LFN regime,\n   especially if large windows are being used, because there\
    \ is a\n   considerable probability of multiple segment losses per window. In\n\
    \   the LTN regime, TCP windows are much smaller, and burst errors must\n   be\
    \ much longer in duration in order to damage multiple segments.\n   Accordingly,\
    \ the complexity of SACK may not be justifiable, unless\n   there is a high probability\
    \ of burst errors and congestion on the\n   wireless link. A desire for compatibility\
    \ with TCP recommendations\n   for non-LTN environments may dictate LTN support\
    \ for SACK anyway.\n   [AGS98] recommends use of SACK with Large TCP Windows in\
    \ satellite\n   environments, and notes that this implies support for PAWS\n \
    \  (Protection Against Wrapped Sequence space) and RTTM (Round Trip Time\n   Measurement)\
    \ as well.\n   Berkeley's SNOOP protocol research [SNOOP] indicates that SACK\
    \ does\n   improve throughput for SNOOP when multiple segments are lost per\n\
    \   window [BPSK96]. SACK allows SNOOP to recover from multi-segment\n   losses\
    \ in one round-trip. In this case, the mobile device needs to\n   implement some\
    \ form of selective acknowledgements.  If SACK is not\n   used, TCP may enter\
    \ congestion avoidance as the time needed to\n   retransmit the lost segments\
    \ may be greater than the retransmission\n   timer.\n   Recommendation: Implement\
    \ SACK now for compatibility with other TCPs\n   and improved performance with\
    \ SNOOP.\n"
- title: 4.7 Detecting Corruption Loss
  contents:
  - '4.7 Detecting Corruption Loss

    '
- title: 4.7.1 Without Explicit Notification
  contents:
  - "4.7.1 Without Explicit Notification\n   In the absence of explicit notification\
    \ from the network, some\n   researchers have suggested statistical methods for\
    \ congestion\n   avoidance [Jain89, WC91, VEGAS]. A natural extension of these\n\
    \   heuristics would enable a sender to distinguish between losses caused\n  \
    \ by congestion and other causes.  The research results on the\n   reliability\
    \ of sender-based heuristics is unfavorable [BV97, BV98].\n   [BV98a] reports\
    \ better results in constrained environments using\n   packet inter-arrival times\
    \ measured at the receiver, but highly-\n   variable delay - of the type encountered\
    \ in wireless environments\n   during intercell handoff - confounds these heuristics.\n\
    \   Recommendation: No recommendation at this time - continue to monitor\n   research\
    \ results.\n"
- title: 4.7.2 With Explicit Notifications
  contents:
  - "4.7.2 With Explicit Notifications\n   With explicit notification from the network\
    \ it is possible to\n   determine when a loss is due to congestion. Several proposals\
    \ along\n   these lines include:\n      -  Explicit Loss Notification (ELN) [BPSK96]\n\
    \      -  Explicit Bad State Notification (EBSN) [BBKVP96]\n      -  Explicit\
    \ Loss Notification to the Receiver (ELNR), and Explicit\n         Delayed Dupack\
    \ Activation Notification (EDDAN) (notifications\n         to mobile receiver)\
    \ [MV97]\n      -  Explicit Congestion Notification (ECN) [ECN]\n   Of these proposals,\
    \ Explicit Congestion Notification (ECN) seems\n   closest to deployment on the\
    \ Internet, and will provide some benefit\n   for TCP connections on long thin\
    \ networks (as well as for all other\n   TCP connections).\n   Recommendation:\
    \ No recommendation at this time. Schemes like ELNR and\n   EDDAN [MV97], in which\
    \  the only systems that need to be modified are\n   the intermediate node and\
    \ the mobile device, are slated for adoption\n   pending further research.  However,\
    \ this solution has some\n   limitations. Since the intermediate node must have\
    \ access to the TCP\n   headers, the IP payload must not be encrypted.\n   ECN\
    \ uses the TOS byte in the IP header to carry congestion\n   information (ECN-capable\
    \ and Congestion-encountered).  This byte is\n   not encrypted in IPSEC, so ECN\
    \ can be used on TCP connections that\n   are encrypted using IPSEC.\n   Recommendation:\
    \ Implement ECN. In spite of this, mechanisms for\n   explicit corruption notification\
    \ are still relevant and should be\n   tracked.\n   Note: ECN provides useful\
    \ information to avoid deteriorating further\n   a bad situation, but has some\
    \ limitations for wireless applications.\n   Absence of packets marked with ECN\
    \ should not be interpreted by ECN-\n   capable TCP connections as a green light\
    \ for aggressive\n   retransmissions. On the contrary, during periods of extreme\
    \ network\n   congestion routers may drop packets marked with explicit notification\n\
    \   because their buffers are exhausted - exactly the wrong time for a\n   host\
    \ to begin retransmitting aggressively.\n"
- title: 4.8 Active Queue Management
  contents:
  - "4.8 Active Queue Management\n   As has been pointed out above, TCP responds to\
    \ congestion by closing\n   down the window and invoking slow start. Long-delay\
    \ networks take a\n   particularly long time to recover from this condition. Accordingly,\n\
    \   it is imperative to avoid congestion in LTNs. To remedy this, active\n   queue\
    \ management techniques have been proposed as enhancements to\n   routers throughout\
    \ the Internet [RED].  The primary motivation for\n   deployment of these mechanisms\
    \ is to prevent \"congestion collapse\" (a\n   severe degradation in service)\
    \ by controlling the average queue size\n   at the routers. As the average queue\
    \ length grows, Random Early\n   Detection [RED] increases the possibility of\
    \ dropping packets.\n   The benefits are:\n      -  Reduce packet drops in routers.\
    \ By dropping a few packets\n         before severe congestion sets in, RED avoids\
    \ dropping bursts of\n         packets. In other words, the objective is to drop\
    \ m packets\n         early to prevent n drops later on, where m is less than\
    \ n.\n      -  Provide lower delays. This follows from the smaller queue\n   \
    \      sizes, and is particularly important for interactive\n         applications,\
    \ for which the inherent delays of wireless links\n         already push the user\
    \ experience to the limits of the non-\n         acceptable.\n      -  Avoid lock-outs.\
    \ Lack of resources in a router (and the\n         resultant packet drops) may,\
    \ in effect, obliterate throughput\n         on certain connections.  Because\
    \ of active queue management, it\n         is more probable for an incoming packet\
    \ to find available\n         buffer space at the router.\n   Active Queue Management\
    \ has two components: (1) routers detect\n   congestion before exhausting their\
    \ resources, and (2) they provide\n   some form of congestion indication. Dropping\
    \ packets via RED is only\n   one example of the latter.  Another way to indicate\
    \ congestion is to\n   use ECN [ECN] as discussed above under \"Detecting Corruption\
    \ Loss:\n   With Explicit Notifications.\"\n   Recommendation: RED is currently\
    \ being deployed in the Internet, and\n   LTNs should follow suit. ECN deployment\
    \ should complement RED's.\n"
- title: 4.9 Scheduling Algorithms
  contents:
  - "4.9 Scheduling Algorithms\n   Active queue management helps control the length\
    \ of the queues.\n   Additionally, a general solution requires replacing FIFO\
    \ with other\n   scheduling algorithms that improve:\n      1. Fairness (by policing\
    \ how different packet streams utilize the\n         available bandwidth), and\n\
    \      2. Throughput (by improving the transmitter's radio channel\n         utilization).\n\
    \   For example, fairness is necessary for interactive applications (like\n  \
    \ telnet or web browsing) to coexist with bulk transfer sessions.\n   Proposals\
    \ here include:\n      - Fair Queueing (FQ) [Demers90]\n      - Class-based Queueing\
    \ (CBQ) [Floyd95]\n   Even if they are only implemented over the wireless link\
    \ portion of\n   the communication path, these proposals are attractive in wireless\n\
    \   LTN environments, because new connections for interactive\n   applications\
    \ can have difficulty starting when a bulk TCP transfer\n   has already stabilized\
    \ using all available bandwidth.\n   In our base architecture described above,\
    \ the mobile device typically\n   communicates directly with only one wireless\
    \ peer at a given time:\n   the intermediate node. In some W-WANs, it is possible\
    \ to directly\n   address other mobiles within the same cell.  Direct communication\n\
    \   with each such wireless peer may traverse a spatially distinct path,\n   each\
    \ of which may exhibit statistically independent radio link\n   characteristics.\
    \ Channel State Dependent Packet Scheduling (CSDP)\n   [BBKT96] tracks the state\
    \ of the various radio links (as defined by\n   the target devices), and gives\
    \ preferential treatment to packets\n   destined for radio links in a \"good\"\
    \ state. This avoids attempting to\n   transmit to (and expect acknowledgements\
    \ from) a peer on a \"bad\"\n   radio link, thus improving throughput.\n   A further\
    \ refinement of this idea suggests that both fairness and\n   throughput can be\
    \ improved by combining a wireless-enhanced CBQ with\n   CSDP [FSS98].\n   Recommendation:\
    \ No recommendation at this time, pending further\n   study.\n"
- title: 4.10 Split TCP and Performance-Enhancing Proxies (PEPs)
  contents:
  - "4.10 Split TCP and Performance-Enhancing Proxies (PEPs)\n   Given the dramatic\
    \ differences between the wired and the wireless\n   links, a very common approach\
    \ is to provide some impedance matching\n   where the two different technologies\
    \ meet: at the intermediate node.\n   The idea is to replace an end-to-end TCP\
    \ connection with two clearly\n   distinct connections: one across the wireless\
    \ link, the other across\n   its wireline counterpart. Each of the two resulting\
    \ TCP sessions\n   operates under very different networking characteristics, and\
    \ may\n   adopt the policies best suited to its particular medium.  For\n   example,\
    \ in a specific LTN topology it may be desirable to modify TCP\n   Fast Retransmit\
    \ to resend after the first duplicate ack and Fast\n   Recovery to not shrink\
    \ the congestion window if the LTN link has an\n   extremely long RTT, is known\
    \ to not reorder packets, and is not\n   subject to congestion. Moreover, on a\
    \ long-delay link or on a link\n   with a relatively high bandwidth-delay product\
    \ it may be desirable to\n   \"slow-start\" with a relatively large initial window,\
    \ even larger than\n   four segments.  While these kinds of TCP modifications\
    \ can be\n   negotiated to be employed over the LTN link, they would not be\n\
    \   deployed end-to-end over the global Internet. In LTN topologies where\n  \
    \ the underlying link characteristics are known, a various similar\n   types of\
    \ performance enhancements can be employed without endangering\n   operations\
    \ over the global Internet.\n   In some proposals, in addition to a PEP mechanism\
    \ at the intermediate\n   node, custom protocols are used on the wireless link\
    \ (for example,\n   [WAP], [YB94] or [MOWGLI]).\n   Even if the gains from using\
    \ non-TCP protocols are moderate or\n   better, the wealth of research on optimizing\
    \ TCP for wireless, and\n   compatibility with the Internet are compelling reasons\
    \ to adopt TCP\n   on the wireless link (enhanced as suggested in section 5 below).\n"
- title: 4.10.1 Split TCP Approaches
  contents:
  - "4.10.1 Split TCP Approaches\n   Split-TCP proposals include schemes like I-TCP\
    \ [ITCP] and MTCP [YB94]\n   which achieve performance improvements by abandoning\
    \ end-to-end\n   semantics.\n   The Mowgli architecture [MOWGLI] proposes a split\
    \ approach with\n   support for various enhancements at all the protocol layers,\
    \ not only\n   at the transport layer. Mowgli provides an option to replace the\n\
    \   TCP/IP core protocols on the LTN link with a custom protocol that is\n   tuned\
    \ for LTN links [KRLKA97].  In addition, the protocol provides\n   various features\
    \ that are useful with LTNs. For example, it provides\n   priority-based multiplexing\
    \ of concurrent connections together with\n   shared flow control, thus offering\
    \ link capacity to interactive\n   applications in a timely manner even if there\
    \ are bandwidth-intensive\n   background transfers.  Also with this option, Mowgli\
    \ preserves the\n   socket semantics on the mobile device so that legacy applications\
    \ can\n   be run unmodified.\n   Employing split TCP approaches have several benefits\
    \ as well as\n   drawbacks. Benefits related to split TCP approaches include the\n\
    \   following:\n   -  Splitting the end-to-end TCP connection into two parts is\
    \ a\n      straightforward way to shield the problems of the wireless link\n \
    \     from the wireline Internet path, and vice versa. Thus, a split TCP\n   \
    \   approach enables applying local solutions to the local problems on\n     \
    \ the wireless link.  For example, it automatically solves the\n      problem\
    \ of distinguishing congestion related packet losses on the\n      wireline Internet\
    \ and packet losses due to transmission error on\n      the wireless link as these\
    \ occur on separate TCP connections.\n      Even if both segments experience congestion,\
    \ it may be of a\n      different nature and may be treated as such.  Moreover,\
    \ temporary\n      disconnections of the wireless link can be effectively shielded\n\
    \      from the wireline Internet.\n   -  When one of the TCP connections crosses\
    \ only a single hop wireless\n      link or a very limited number of hops, some\
    \ or all link\n      characteristics for the wireless TCP path are known. For\
    \ example,\n      with a particular link we may know that the link provides reliable\n\
    \      delivery of packets, packets are not delivered out of order, or\n     \
    \ the link is not subject to congestion. Having this information for\n      the\
    \ TCP path one could expect that defining the TCP mitigations to\n      be employed\
    \ becomes a significantly easier task. In addition,\n      several mitigations\
    \ that cannot be employed safely over the global\n      Internet, can be successfully\
    \ employed over the wireless link.\n   -  Splitting one TCP connection into two\
    \ separate ones allows much\n      earlier deployment of various recent proposals\
    \ to improve TCP\n      performance over wireless links; only the TCP implementations\
    \ of\n      the mobile device and intermediate node need to be modified, thus\n\
    \      allowing the vast number of Internet hosts to continue running the\n  \
    \    legacy TCP implementations unmodified. Any mitigations that would\n     \
    \ require modification of TCP in these wireline hosts may take far\n      too\
    \ long to become widely deployed.\n   -  Allows exploitation of various application\
    \ level enhancements\n      which may give significant performance gains (see\
    \ section 4.10.2).\n   Drawbacks related to split TCP approaches include the following:\n\
    \   -  One of the main criticisms against the split TCP approaches is\n      that\
    \ it breaks TCP end-to-end semantics. This has various\n      drawbacks some of\
    \ which are more severe than others. The most\n      detrimental drawback is probably\
    \ that splitting the TCP connection\n      disables end-to-end usage of IP layer\
    \ security mechanisms,\n      precluding the application of IPSec to achieve end-to-end\n\
    \      security. Still, IPSec could be employed separately in each of the\n  \
    \    two parts, thus requiring the intermediate node to become a party\n     \
    \ to the security association between the mobile device and the\n      remote\
    \ host. This, however, is an undesirable or unacceptable\n      alternative in\
    \ most cases. Other security mechanisms above the\n      transport layer, like\
    \ TLS [RFC2246] or SOCKS [RFC1928], should be\n      employed for end-to-end security.\n\
    \   -  Another drawback of breaking end-to-end semantics is that crashes\n   \
    \   of the intermediate node become unrecoverable resulting in\n      termination\
    \ of the TCP connections. Whether this should be\n      considered a severe problem\
    \ depends on the expected frequency of\n      such crashes.\n   -  In many occasions\
    \ claims have been stated that if TCP end-to-end\n      semantics is broken, applications\
    \ relying on TCP to provide\n      reliable data delivery become more vulnerable.\
    \ This, however, is\n      an overstatement as a well-designed application should\
    \ never fully\n      rely on TCP in achieving end-to-end reliability at the application\n\
    \      level. First, current APIs to TCP, such as the Berkeley socket\n      interface,\
    \ do not allow applications to know when an TCP\n      acknowledgement for previously\
    \ sent user data arrives at TCP\n      sender.  Second, even if the application\
    \ is informed of the TCP\n      acknowledgements, the sending application cannot\
    \ know whether the\n      receiving application has received the data: it only\
    \ knows that\n      the data reached the TCP receive buffer at the receiving end.\n\
    \      Finally, in order to achieve end-to-end reliability at the\n      application\
    \ level an application level acknowledgement is required\n      to confirm that\
    \ the receiver has taken the appropriate actions on\n      the data it received.\n\
    \   -  When a mobile device moves, it is subject to handovers by the\n      serving\
    \ base station. If the base station acts as the intermediate\n      node for the\
    \ split TCP connection, the state of both TCP endpoints\n      on the previous\
    \ intermediate node must be transferred to the new\n      intermediate node to\
    \ ensure continued operation over the split TCP\n      connection. This requires\
    \ extra work and causes overhead. However,\n      in most of the W-WAN wireless\
    \ networks, unlike in W-LANs, the W-\n      WAN base station does not provide\
    \ the mobile device with the\n      connection point to the wireline Internet\
    \ (such base stations may\n      not even have an IP stack).  Instead, the W-WAN\
    \ network takes care\n      of the mobility and retains the connection point to\
    \ the wireline\n      Internet unchanged while the mobile device moves.  Thus,\
    \ TCP state\n      handover is not required in most W-WANs.\n   -  The packets\
    \ traversing through all the protocol layers up to\n      transport layer and\
    \ again down to the link layer result in extra\n      overhead at the intermediate\
    \ node. In case of LTNs with low\n      bandwidth, this extra overhead does not\
    \ cause serious additional\n      performance problems unlike with W-LANs that\
    \ typically have much\n      higher bandwidth.\n   -  Split TCP proposals are\
    \ not applicable to networks with asymmetric\n      routing. Deploying a split\
    \ TCP approach requires that traffic to\n      and from the mobile device be routed\
    \ through the intermediate\n      node. With some networks, this cannot be accomplished,\
    \ or it\n      requires that the intermediate node is located several hops away\n\
    \      from the wireless network edge which in turn is unpractical in\n      many\
    \ cases and may result in non-optimal routing.\n   -  Split TCP, as the name implies,\
    \ does not address problems related\n      to UDP.\n   It should noted that using\
    \ split TCP does not necessarily exclude\n   simultaneous usage of IP for end-to-end\
    \ connectivity.  Correct usage\n   of split TCP should be managed per application\
    \ or per connection and\n   should be under the end-user control so that the user\
    \ can decide\n   whether a particular TCP connection or application makes use\
    \ of split\n   TCP or whether it operates end-to-end directly over IP.\n   Recommendation:\
    \ Split TCP proposals that alter TCP semantics are not\n   recommended. Deploying\
    \ custom protocols on the wireless link, such as\n   MOWGLI proposes is not recommended,\
    \ because this note gives\n   preference to (1) improving TCP instead of designing\
    \ a custom\n   protocol and (2) allowing end-to-end sessions at all times.\n"
- title: 4.10.2 Application Level Proxies
  contents:
  - "4.10.2 Application Level Proxies\n   Nowadays, application level proxies are\
    \ widely used in the Internet.\n   Such proxies include Web proxy caches, relay\
    \ MTAs (Mail Transfer\n   Agents), and secure transport proxies (e.g., SOCKS).\
    \ In effect,\n   employing an application level proxy results in a \"split TCP\n\
    \   connection\" with the proxy as the intermediary.  Hence, some of the\n   problems\
    \ present with wireless links, such as combining of a\n   congested wide-area\
    \ Internet path with a wireless LTN link, are\n   automatically alleviated to\
    \ some extent.\n   The application protocols often employ plenty of (unnecessary)\
    \ round\n   trips, lots of headers and inefficient encoding. Even unnecessary\n\
    \   data may get delivered over the wireless link in regular application\n   protocol\
    \ operation. In many cases a significant amount of this\n   overhead can be reduced\
    \ by simply running an application level proxy\n   on the intermediate node. \
    \ With LTN links, significant additional\n   improvement can be achieved by introducing\
    \ application level proxies\n   with application-specific enhancements. Such a\
    \ proxy may employ an\n   enhanced version of the application protocol over the\
    \ wireless link.\n   In an LTN environment enhancements at the application layer\
    \ may\n   provide much more notable performance improvements than any transport\n\
    \   level enhancements.\n   The Mowgli system provides full support for adding\
    \ application level\n   agent-proxy pairs between the client and the server, the\
    \ agent on the\n   mobile device and the proxy on the intermediate node. Such\
    \ a pair may\n   be either explicit or fully transparent to the applications,\
    \ but it\n   is, at all times, under the end-user control. Good examples of\n\
    \   enhancements achieved with application-specific proxies include\n   Mowgli\
    \ WWW [LAKLR95], [LHKR96] and WebExpress [HL96], [CTCSM97].\n   Recommendation:\
    \ Usage of application level proxies is conditionally\n   recommended: an application\
    \ must be proxy enabled and the decision of\n   employing a proxy for an application\
    \ must be under the user control\n   at all times.\n"
- title: 4.10.3 Snoop and its Derivatives
  contents:
  - "4.10.3 Snoop and its Derivatives\n   Berkeley's SNOOP protocol [SNOOP] is a hybrid\
    \ scheme mixing link-\n   layer reliability mechanisms with the split connection\
    \ approach. It\n   is an improvement over split TCP approaches in that end-to-end\n\
    \   semantics are retained. SNOOP does two things:\n      1. Locally (on the wireless\
    \ link) retransmit lost packets, instead\n         of allowing TCP to do so end-to-end.\n\
    \      2. Suppress the duplicate acks on their way from the receiver back\n  \
    \       to the sender, thus avoiding fast retransmit and congestion\n        \
    \ avoidance at the latter.\n   Thus, the Snoop protocol is designed to avoid unnecessary\
    \ fast\n   retransmits by the TCP sender, when the wireless link layer\n   retransmits\
    \ a packet locally. Consider a system that does not use the\n   Snoop agent. Consider\
    \ a TCP sender S that sends packets to receiver R\n   via an intermediate node\
    \ IN. Assume that the sender sends packet A,\n   B, C, D, E (in that order) which\
    \ are forwarded by IN to the wireless\n   receiver R. Assume that the intermediate\
    \ node then retransmits B\n   subsequently, because the first transmission of\
    \ packet B is lost due\n   to errors on the wireless link. In this case, receiver\
    \ R receives\n   packets A, C, D, E and B (in that order). Receipt of packets\
    \ C, D and\n   E triggers duplicate acknowledgements. When the TCP sender receives\n\
    \   three duplicate acknowledgements, it triggers fast retransmit (which\n   results\
    \ in a retransmission, as well as reduction of congestion\n   window).  The fast\
    \ retransmit occurs despite the link level\n   retransmit on the wireless link,\
    \ degrading throughput.\n   SNOOP [SNOOP] deals with this problem by dropping\
    \ TCP dupacks\n   appropriately (at the intermediate node). The Delayed Dupacks\
    \ (see\n   section 4.5) attempts to approximate Snoop without requiring\n   modifications\
    \ at the intermediate node.  Such schemes are needed only\n   if the possibility\
    \ of a fast retransmit due to wireless errors is\n   non-negligible. In particular,\
    \ if the wireless link uses a stop-and-\n   go protocol (or otherwise delivers\
    \ packets in-order), then these\n   schemes are not very beneficial.  Also, if\
    \ the bandwidth-delay\n   product of the wireless link is smaller than four segments,\
    \ the\n   probability that the intermediate node will have an opportunity to\n\
    \   send three new packets before a lost packet is retransmitted is\n   small.\
    \  Since at least three dupacks are needed to trigger a fast\n   retransmit, with\
    \ a wireless bandwidth-delay product less than four\n   packets, schemes such\
    \ as Snoop and Delayed Dupacks would not be\n   necessary (unless the link layer\
    \ is not designed properly).\n   Conversely, when the wireless bandwidth-delay\
    \ product is large\n   enough, Snoop can provide significant performance improvement\n\
    \   (compared with standard TCP). For further discussion on these topics,\n  \
    \ please refer to [Vaidya99].\n   The Delayed Dupacks scheme tends to provide\
    \ performance benefit in\n   environments where Snoop performs well. In general,\
    \ performance\n   improvement achieved by the Delayed Dupacks scheme is a function\
    \ of\n   packet loss rates due to congestion and transmission errors. When\n \
    \  congestion-related losses occur, the Delayed Dupacks scheme\n   unnecessarily\
    \ delays retransmission.  Thus, in the presence of\n   congestion losses, the\
    \ Delayed Dupacks scheme cannot achieve the same\n   performance improvement as\
    \ Snoop.  However, simulation results\n   [Vaidya99] indicate that the Delayed\
    \ Dupacks can achieve a\n   significant improvement in performance despite moderate\
    \ congestion\n   losses.\n   WTCP [WTCP] is similar to SNOOP in that it preserves\
    \ end-to-end\n   semantics.  In WTCP, the intermediate node uses a complex scheme\
    \ to\n   hide the time it spends recovering from local errors across the\n   wireless\
    \ link (this typically includes retransmissions due to error\n   recovery, but\
    \ may also include time spent dealing with congestion).\n   The idea is for the\
    \ sender to derive a smooth estimate of round-trip\n   time.  In order to work\
    \ effectively, it assumes that the TCP\n   endpoints implement the Timestamps\
    \ option in RFC 1323 [TCPHP].\n   Unfortunately, support for RFC 1323 in TCP implementations\
    \ is not yet\n   widespread. Beyond this, WTCP requires changes only at the\n\
    \   intermediate node.\n   SNOOP and WTCP require the intermediate node to examine\
    \ and operate\n   on the traffic between the portable wireless device and the\
    \ TCP\n   server on the wired Internet. SNOOP and WTCP do not work if the IP\n\
    \   traffic is encrypted, unless, of course, the intermediate node shares\n  \
    \ the security association between the mobile device and its end-to-end\n   peer.\
    \  They also require that both the data and the corresponding\n   ACKs traverse\
    \ the same intermediate node.  Furthermore, if the\n   intermediate node retransmits\
    \ packets at the transport layer across\n   the wireless link, this may duplicate\
    \ efforts by the link-layer.\n   SNOOP has been described by its designers as\
    \ a TCP-aware link-layer.\n   This is the right approach:  the link and network\
    \ layers can be much\n   more aware of each other than traditional OSI layering\
    \ suggests.\n   Encryption of IP packets via IPSEC's ESP header (in either transport\n\
    \   or tunnel mode) renders the TCP header and payload unintelligible to\n   the\
    \ intermediate node. This precludes SNOOP (and WTCP) from working,\n   because\
    \ it needs to examine the TCP headers in both directions.\n   Possible solutions\
    \ involve:\n   -  making the SNOOP (or WTCP) intermediate node a party to the\n\
    \      security association between the client and the server\n   -  IPSEC tunneling\
    \ mode, terminated at the SNOOPing intermediate node\n   However, these techniques\
    \ require that users trust intermediate\n   nodes.  Users valuing both privacy\
    \ and performance should use SSL or\n   SOCKS for end-to-end security. These,\
    \ however, are implemented above\n   the transport layer, and are not as resistant\
    \ to some security\n   attacks (for example, those based on guessing TCP sequence\
    \ numbers)\n   as IPSEC.\n   Recommendation: Implement SNOOP on intermediate nodes\
    \ now.  Research\n   results are encouraging, and it is an \"invisible\" optimization\
    \ in\n   that neither the client nor the server needs to change, only the\n  \
    \ intermediate node (for basic SNOOP without SACK). However, as\n   discussed\
    \ above there is little or no benefit from implementing SNOOP\n   if:\n      1.\
    \ The wireless link provides reliable, in-order packet delivery,\n         or,\n\
    \      2. The bandwidth-delay product of the wireless link is smaller\n      \
    \   than four segments.\n"
- title: 4.10.4 PEPs to handle Periods of Disconnection
  contents:
  - "4.10.4 PEPs to handle Periods of Disconnection\n   Periods of disconnection are\
    \ very common in wireless networks, either\n   during handoff, due to lack of\
    \ resources (dropped connections) or\n   natural obstacles. During these periods,\
    \ a TCP sender does not\n   receive the expected acknowledgements.  Upon expiration\
    \ of the\n   retransmit timer, this causes TCP to close its congestion window\n\
    \   with all the related drawbacks.  Re-transmitting packets is useless\n   since\
    \ the connection is broken. [M-TCP] aims at enabling TCP to\n   better handle\
    \ handoffs and periods of disconnection, while preserving\n   end-to-end semantics.\
    \  M-TCP adds an element: supervisor host (SH-\n   TCP) at the edge of the wireless\
    \ network.\n   This intermediate node monitors the traffic coming from the sender\
    \ to\n   the mobile device. It does not break end-to-end semantics because the\n\
    \   ACKs sent from the intermediate node to the sender are effectively\n   the\
    \ ones sent by the mobile node. The principle is to generally leave\n   the last\
    \ byte unacknowledged.  Hence, SH-TCP could shut down the\n   sender's window\
    \ by sending the ACK for the last byte with a window\n   set to zero. Thus the\
    \ sender will go to persist mode.\n   The second optimization is done on both\
    \ the intermediate node and the\n   mobile host. On the latter, TCP is aware of\
    \ the current state of the\n   connection. In the event of a disconnection, it\
    \ is capable of\n   freezing all timers. Upon reconnection, the mobile sends a\
    \ specially\n   marked ACK with the number of the highest byte received.  The\n\
    \   intermediate node assumes that the mobile is disconnected because it\n   monitors\
    \ the flow on the wireless link, so in the absence of\n   acknowledgments from\
    \ the mobile, it will inform SH-TCP, which will\n   send the ACK closing the sender\
    \ window as described in the previous\n   paragraph. The intermediate node learns\
    \ that the mobile is again\n   connected when it receives a duplicate acknowledgment\
    \ marked as\n   reconnected.  At this point it sends a duplicate ACK to the sender\n\
    \   and grows the window.  The sender exits persist mode and resumes\n   transmitting\
    \ at the same rate as before. It begins by retransmitting\n   any data previously\
    \ unacknowledged by the mobile node. Non\n   overlapping or non soft handoffs\
    \ are lightweight because the previous\n   intermediate system  can shrink the\
    \ window, and the new one modifies\n   it as soon as it has received an indication\
    \ from the mobile.\n   Recommendation: M-TCP is not slated for adoption at this\
    \ moment,\n   because of the highly experimental nature of the proposal, and the\n\
    \   uncertainty that TCP/IP implementations handle zero window updates\n   correctly.\
    \ Continue tracking developments in this space.\n"
- title: 4.11 Header Compression Alternatives
  contents:
  - "4.11 Header Compression Alternatives\n   Because Long Thin Networks are bandwidth-constrained,\
    \ compressing\n   every byte out of over-the-air segments is worth while.\n  \
    \ Mechanisms for TCP and IP header compression defined in [RFC1144,\n   IPHC,\
    \ IPHC-RTP, IPHC-PPP] provide the following benefits:\n   -  Improve interactive\
    \ response time\n   -  Allow using small packets for bulk data with good line\
    \ efficiency\n      -  Allow using small packets for delay sensitive low data-rate\n\
    \         traffic\n      -  Decrease header overhead (for a common TCP segment\
    \ size of 512\n         the header overhead of IPv4/TCP within a Mobile IP tunnel\
    \ can\n         decrease from 11.7 to less than 1 per cent.\n      -  Reduce packet\
    \ loss rate over lossy links (because of the\n         smaller cross-section of\
    \ compressed packets).\n   Van Jacobson (VJ) header compression [RFC1144] describes\
    \ a Proposed\n   Standard for TCP Header compression that is widely deployed.\
    \  It uses\n   TCP timeouts to detect a loss of synchronization between the\n\
    \   compressor and decompressor. [IPHC] includes an explicit request for\n   transmission\
    \ of uncompressed headers to allow resynchronization\n   without waiting for a\
    \ TCP timeout (and executing congestion avoidance\n   procedures).\n   Recommendation:\
    \ Implement [IPHC], in particular as it relates to IP-\n   in-IP [RFC2003] and\
    \ Minimal Encapsulation [RFC2004] for Mobile IP, as\n   well as TCP header compression\
    \  for lossy links and links that\n   reorder packets. PPP capable devices should\
    \ implement [IPHC-PPP].  VJ\n   header compression may optionally be implemented\
    \ as it is a widely\n   deployed Proposed Standard.  However, it should only be\
    \ enabled when\n   operating over reliable LTNs, because even a single bit error\
    \ most\n   probably would result in a full TCP window being dropped, followed\
    \ by\n   a costly recovery via slow-start.\n"
- title: 4.12 Payload Compression
  contents:
  - "4.12 Payload Compression\n   Compression of IP payloads is also desirable. \"\
    IP Payload Compression\n   Protocol (IPComp)\" [IPPCP] defines a framework where\
    \ common\n   compression algorithms can be applied to arbitrary IP segment\n \
    \  payloads. IP payload compression is something of a niche\n   optimization.\
    \ It is necessary because IP-level security converts IP\n   payloads to random\
    \ bitstreams, defeating commonly-deployed link-layer\n   compression mechanisms\
    \ which are faced with payloads that have no\n   redundant \"information\" that\
    \ can be more compactly represented.\n   However, many IP payloads are already\
    \ compressed (images, audio,\n   video, \"zipped\" files being FTPed), or are\
    \ already encrypted above\n   the IP layer (SSL/TLS, etc.). These payloads will\
    \ not \"compress\"\n   further, limiting the benefit of this optimization.\n \
    \  HTTP/1.1 already supports compression of the message body.  For\n   example,\
    \ to use zlib compression the relevant directives are:\n   \"Content-Encoding:\
    \ deflate\" and \"Accept-Encoding:  deflate\" [HTTP-\n   PERF].\n   HTTP-NG is\
    \ considering supporting compression of resources at the\n   HTTP level, which\
    \ would provide equivalent benefits for common\n   compressible MIME types like\
    \ text/html. This will reduce the need for\n   IPComp. If IPComp is deployed more\
    \ rapidly than HTTP-NG, IPComp\n   compression of HTML and MIME headers would\
    \ be beneficial.\n   In general, application-level compression can often outperform\n\
    \   IPComp, because of the opportunity to use compression dictionaries\n   based\
    \ on knowledge of the specific data being compressed.\n   Recommendation: IPComp\
    \ may optionally be implemented. Track HTTP-NG\n   standardization and deployment\
    \ for now. Implementing HTTP/1.1\n   compression using zlib SHOULD is recommended.\n"
- title: 4.13 TCP Control Block Interdependence [Touch97]
  contents:
  - "4.13 TCP Control Block Interdependence [Touch97]\n   TCP maintains per-connection\
    \ information such as connection state,\n   current round-trip time, congestion\
    \ control or maximum segment size.\n   Sharing information between two consecutive\
    \ connections or when\n   creating a new connection while the first is still active\
    \ to the same\n   host may improve performance of the latter connection.  The\
    \ principle\n   could easily be extended to sharing information amongst systems\
    \ in a\n   LAN not just within a given system.  [Touch97] describes cache update\n\
    \   for both cases.\n   Users of W-WAN devices frequently request connections\
    \ to the same\n   servers or set of servers. For example, in order to read their\
    \ email\n   or to initiate connections to other servers, the devices may be\n\
    \   configured to always use the same email server or WWW proxy.  The\n   main\
    \ advantage of this proposal is that it relieves the application\n   of the burden\
    \ of optimizing the transport layer. In order to improve\n   the performance of\
    \ TCP connections, this mechanism only requires\n   changes at the wireless device.\n\
    \   In general, this scheme should improve the dynamism of connection\n   setup\
    \ without increasing the cost of the implementation.\n   Recommendation: This\
    \ mechanism is recommended, although HTTP/1.1 with\n   its persistent connections\
    \ may partially achieve the same effect\n   without it. Other applications (even\
    \ HTTP/1.0) may find it useful.\n   Continue monitoring research on this. In particular,\
    \ work on a\n   \"Congestion Manager\" [CM] may generalize this concept of sharing\n\
    \   information among protocols and applications with a view to making\n   them\
    \ more adaptable to network conditions.\n"
- title: 5 Summary of Recommended Optimizations
  contents:
  - "5 Summary of Recommended Optimizations\n   The table below summarizes our recommendations\
    \ with regards to the\n   main proposals mentioned above.\n   The first column,\
    \ \"Stability of the Proposal,\" refers to the maturity\n   of the mechanism in\
    \ question.  Some proposals are being pursued\n   within the IETF in a somewhat\
    \ open fashion. An IETF proposal is\n   either an Internet Drafts (I-D) or a Request\
    \ for Comments (RFC). The\n   former is a preliminary version. There are several\
    \ types of RFCs.  A\n   Draft Standards (DS) is standards track, and carries more\
    \ weight than\n   a Proposed Standard (PS), which may still undergo revisions.\n\
    \   Informational or Experimental RFCs do not specify a standard. Other\n   proposals\
    \ are isolated efforts with little or no public review, and\n   unknown chances\
    \ of garnering industry backing.\n   \"Implemented at\" indicates which participant\
    \ in a TCP session must be\n   modified to implement the proposal. Legacy servers\
    \ typically cannot\n   be modified, so this column indicates whether implementation\
    \ happens\n   at either or both of the two nodes under some control: mobile device\n\
    \   and intermediate node. The symbols used are: WS (wireless sender,\n   that\
    \ is, the mobile device's TCP send operation must be modified), WR\n   (wireless\
    \ receiver, that is, the mobile device's TCP receive\n   operation must be modified),\
    \ WD (wireless device, that is,\n   modifications at the mobile device are not\
    \ specific to either TCP\n   send or receive), IN (intermediate node) and NI (network\n\
    \   infrastructure). These entities are to be understood within the\n   context\
    \ of Section 1.1 (\"Network Architecture\"). NA simply means \"not\n   applicable.\"\
    \n   The \"Recommendation\" column captures our suggestions.  Some\n   mechanisms\
    \ are endorsed for immediate adoption, others need more\n   evidence and research,\
    \ and others are not recommended.\n"
- title: Name                   Stability of     Implemented   Recommendation
  contents:
  - "Name                   Stability of     Implemented   Recommendation\n      \
    \                 the Proposal     at\n"
- title: ====================   =============    ===========   =================
  contents:
  - '====================   =============    ===========   =================

    '
- title: Increased Initial      RFC 2581 (PS)    WS            Yes
  contents:
  - 'Increased Initial      RFC 2581 (PS)    WS            Yes

    '
- title: Window                                                (initial_window=2)
  contents:
  - 'Window                                                (initial_window=2)

    '
- title: Disable delayed ACKs   NA               WR            When stable
  contents:
  - 'Disable delayed ACKs   NA               WR            When stable

    '
- title: during slow start
  contents:
  - 'during slow start

    '
- title: Byte counting          NA               WS            No
  contents:
  - 'Byte counting          NA               WS            No

    '
- title: instead of ACK
  contents:
  - 'instead of ACK

    '
- title: counting
  contents:
  - 'counting

    '
- title: TCP Header             RFC 1144 (PS)    WD            Yes
  contents:
  - 'TCP Header             RFC 1144 (PS)    WD            Yes

    '
- title: compression for PPP                     IN            (see 4.11)
  contents:
  - 'compression for PPP                     IN            (see 4.11)

    '
- title: IP Payload             RFC 2393 (PS)    WD            Yes
  contents:
  - 'IP Payload             RFC 2393 (PS)    WD            Yes

    '
- title: Compression                             (simultaneously
  contents:
  - 'Compression                             (simultaneously

    '
- title: (IPComp)                                needed on Server)
  contents:
  - '(IPComp)                                needed on Server)

    '
- title: Header                 RFC 2507 (PS),   WD            Yes
  contents:
  - 'Header                 RFC 2507 (PS),   WD            Yes

    '
- title: Compression            RFC 2509 (PS)    IN            (For IPv4, TCP and
  contents:
  - "Compression            RFC 2509 (PS)    IN            (For IPv4, TCP and\n  \
    \                                                    Mobile IP, PPP)\n"
- title: SNOOP plus SACK        In limited use   IN            Yes
  contents:
  - "SNOOP plus SACK        In limited use   IN            Yes\n                 \
    \                       WD (for SACK)\n"
- title: Fast retransmit/fast   RFC 2581 (PS)    WD            Yes (should be
  contents:
  - 'Fast retransmit/fast   RFC 2581 (PS)    WD            Yes (should be

    '
- title: recovery                                              there already)
  contents:
  - 'recovery                                              there already)

    '
- title: Transaction/TCP        RFC 1644         WD            No
  contents:
  - "Transaction/TCP        RFC 1644         WD            No\n                  \
    \     (Experimental)   (simultaneously\n                                     \
    \   needed on Server)\n"
- title: Estimating Slow        NA               WS            No
  contents:
  - 'Estimating Slow        NA               WS            No

    '
- title: Start Threshold
  contents:
  - 'Start Threshold

    '
- title: (ssthresh)
  contents:
  - '(ssthresh)

    '
- title: Delayed Duplicate      Not stable       WR            When stable
  contents:
  - 'Delayed Duplicate      Not stable       WR            When stable

    '
- title: Acknowledgements                        IN (for
  contents:
  - "Acknowledgements                        IN (for\n                           \
    \             notifications)\n"
- title: Class-based Queuing    NA               WD            When stable
  contents:
  - 'Class-based Queuing    NA               WD            When stable

    '
- title: on End Systems
  contents:
  - 'on End Systems

    '
- title: Explicit Congestion    RFC 2481 (EXP)   WD            Yes
  contents:
  - 'Explicit Congestion    RFC 2481 (EXP)   WD            Yes

    '
- title: Notification                            NI
  contents:
  - 'Notification                            NI

    '
- title: TCP Control Block      RFC 2140         WD            Yes
  contents:
  - 'TCP Control Block      RFC 2140         WD            Yes

    '
- title: Interdependence        (Informational)                (Track research)
  contents:
  - "Interdependence        (Informational)                (Track research)\n   Of\
    \ all the optimizations in the table above, only SNOOP plus SACK and\n   Delayed\
    \ duplicate acknowledgements are currently being proposed only\n   for wireless\
    \ networks. The others are being considered even for non-\n   wireless applications.\
    \ Their more general applicability attracts more\n   attention and analysis from\
    \ the research community.\n   Of the above mechanisms, only Header Compression\
    \ (for IP and TCP) and\n   \"SNOOP plus SACK\" cease to work in the presence of\
    \ IPSec.\n"
- title: 6 Conclusion
  contents:
  - "6 Conclusion\n   In view of the unpredictable and problematic nature of long\
    \ thin\n   networks, arriving at an optimized transport is a daunting task. We\n\
    \   have reviewed the existing proposals along with future research\n   items.\
    \ Based on this overview, we also recommend mechanisms for\n   implementation\
    \ in long thin networks (LTNs).\n"
- title: 7 Acknowledgements
  contents:
  - "7 Acknowledgements\n   The authors are deeply indebted to the IETF tcpsat and\
    \ tcpimpl\n   working groups. The following individuals have also provided valuable\n\
    \   feedback: Mark Allman (NASA), Vern Paxson (ACIRI), Raphi Rom\n   (Technion/Sun),\
    \ Charlie Perkins (Nokia), Peter Stark (Phone.com).\n"
- title: 8 Security Considerations
  contents:
  - "8 Security Considerations\n   The mechanisms discussed and recommended in this\
    \ document have been\n   proposed in previous publications. The security considerations\n\
    \   outlined in the original discussions apply here as well.  Several\n   security\
    \ issues are also discussed throughout this document.\n   Additionally, we present\
    \ below a non-exhaustive list of the most\n   salient issues concerning our recommended\
    \ mechanisms:\n   -  Larger Initial TCP Window Size\n      No known security issues\
    \ [RFC2414, RFC2581].\n   -  Header Compression\n      May be open to some denial\
    \ of service attacks. But any attacker in\n      a position to launch these attacks\
    \ would have much stronger\n      attacks at his disposal [IPHC, IPHC-RTP].\n\
    \   -  Congestion Control, Fast Retransmit/Fast Recovery\n      An attacker may\
    \ force TCP connections to grind to a halt, or, more\n      dangerously, behave\
    \ more aggressively. The latter possibility may\n      lead to congestion collapse,\
    \ at least in some regions of the\n      network [RFC2581].\n   -  Explicit Congestion\
    \ Notification\n      It does not appear to increase the vulnerabilities in the\
    \ network.\n      On the contrary, it may reduce them by aiding in the\n     \
    \ identification of flows unresponsive to or non-compliant with TCP\n      congestion\
    \ control [ECN].\n   -  Sharing of Network Performance Information (TCP Control\
    \ Block\n      Sharing and Congestion Manager module)\n      Some information\
    \ should not be shared. For example, TCP sequence\n      numbers are used to protect\
    \ against spoofing attacks.  Even\n      limiting the sharing to performance values\
    \ leaves open the\n      possibility of denial-of-service attacks [Touch97].\n\
    \   -  Performance Enhancing Proxies\n      These systems are men-in-the-middle\
    \ from the point of view of\n      their security vulnerabilities. Accordingly,\
    \ they must be used\n      with extreme care so as to prevent their being hijacked\
    \ and\n      misused.\n   This last point is not to be underestimated: there is\
    \ a general\n   security concern whenever an intermediate node performs operations\n\
    \   different from those carried out in an end-to-end basis. This is not\n   specific\
    \ to performance-enhancing proxies.  In particular, there may\n   be a tendency\
    \ to forego IPSEC-based privacy in order to allow, for\n   example, a SNOOP module,\
    \ header compression (TCP, UDP, RTP, etc), or\n   HTTP proxies to work.\n   Adding\
    \ end-to-end security at higher layers (for example via RTP\n   encryption, or\
    \ via TLS encryption of the TCP payload) alleviates the\n   problem. However,\
    \ this still leaves protocol headers in the clear,\n   and these may be exploited\
    \ for traffic analysis and denial-of-service\n   attacks.\n"
- title: 9 References
  contents:
  - "9 References\n   [ACKSPACING]   Partridge, C., \"ACK Spacing for High Delay-Bandwidth\n\
    \                  Paths with Insufficient Buffering\", Work in Progress.\n  \
    \ [ADGGHOSSTT98] Allman, M., Dawkins, S., Glover, D., Griner, J.,\n          \
    \        Henderson, T., Heidemann, J., Kruse, H., Osterman, S.,\n            \
    \      Scott, K., Semke, J., Touch, J. and D. Tran, \"Ongoing\n              \
    \    TCP Research Related to Satellites\", Work in Progress.\n   [AGS98]     \
    \   Allman, M., Glover, D. and L. Sanchez, \"Enhancing TCP\n                 \
    \ Over Satellite Channels using Standard Mechanisms\",\n                  BCP\
    \ 28, RFC 2488, January 1999.\n   [Allman98]     Mark Allman. On the Generation\
    \ and Use of TCP\n                  Acknowledgments. ACM Computer Communication\
    \ Review,\n                  28(5), October 1998.\n   [AHO98]        Allman, M.,\
    \ Hayes, C., Ostermann, S., \"An Evaluation\n                  of TCP with Larger\
    \ Initial Windows,\" Computer\n                  Communication Review, 28(3),\
    \ July 1998.\n   [BBKT96]       Bhagwat, P., Bhattacharya, P., Krishna, A., Tripathi,\n\
    \                  S., \"Enhancing Throughput over Wireless LANs Using\n     \
    \             Channel State Dependent Packet Scheduling,\" in Proc.\n        \
    \          IEEE INFOCOM'96, pp. 1133-40, March 1996.\n   [BBKVP96]      Bakshi,\
    \ B., P., Krishna, N., Vaidya, N., Pradhan,\n                  D.K., \"Improving\
    \ Performance of TCP over Wireless\n                  Networks,\" Technical Report\
    \ 96-014, Texas A&M\n                  University, 1996.\n   [BPSK96]       Balakrishnan,\
    \ H., Padmanabhan, V., Seshan, S., Katz,\n                  R., \"A Comparison\
    \ of Mechanisms for Improving TCP\n                  Performance over Wireless\
    \ Links,\" in ACM SIGCOMM,\n                  Stanford, California, August 1996.\n\
    \   [BPK99]        Balakrishnan, H., Padmanabhan, V., Katz, R., \"The\n      \
    \            effects of asymmetry on TCP performance,\" ACM Mobile\n         \
    \         Networks and Applications (MONET), Vol. 4, No. 3,\n                \
    \  1999, pp. 219-241.\n   [BV97]         S. Biaz and N. H. Vaidya, \"Distinguishing\
    \ Congestion\n                  Losses  from Wireless Transmission Losses: A Negative\n\
    \                  Result,\" Seventh International Conference on Computer\n  \
    \                Communications and Networks (IC3N), New Orleans,\n          \
    \        October 1998.\n   [BV98]         Biaz, S., Vaidya, N., \"Sender-Based\
    \ heuristics for\n                  Distinguishing Congestion Losses from Wireless\n\
    \                  Transmission Losses,\" Texas A&M University, Technical\n  \
    \                Report 98-013, June 1998.\n   [BV98a]        Biaz, S., Vaidya,\
    \ N., \"Discriminating Congestion\n                  Losses from Wireless Losses\
    \ using Inter-Arrival Times\n                  at the Receiver,\" Texas A&M University,\
    \ Technical\n                  Report 98-014, June 1998.\n   [BW97]         Brasche,\
    \ G., Walke, B., \"Concepts, Services, and\n                  Protocols of the\
    \ New GSM Phase 2+ general Packet Radio\n                  Service,\" IEEE Communications\
    \ Magazine, Vol. 35, No.\n                  8, August 1997.\n   [CB96]       \
    \  Cheshire, S., Baker, M., \"Experiences with a Wireless\n                  Network\
    \ in MosquitoNet,\" IEEE Micro, February 1996.\n                  Available online\
    \ as:\n                  http://rescomp.stanford.edu/~cheshire/papers\n      \
    \            /wireless.ps.\n   [CDMA]         Electronic Industry Alliance(EIA)/Telecommunications\n\
    \                  Industry Association (TIA), IS-95: Mobile Station-Base\n  \
    \                Station Compatibility Standard for Dual-Mode Wideband\n     \
    \             Spread Spectrum Cellular System, 1993.\n   [CDPD]         Wireless\
    \ Data Forum, CDPD System Specification,\n                  Release 1.1, 1995.\n\
    \   [CM]           Hari Balakrishnan and Srinivasan Seshan, \"The\n          \
    \        Congestion Manager,\" Work in Progress.\n   [CTCSM97]      Chang, H.,\
    \ Tait, C., Cohen, N., Shapiro, M.,\n                  Mastrianni, S., Floyd,\
    \ R., Housel, B., Lindquist, D.,\n                  \"Web Browsing in a Wireless\
    \ Environment: Disconnected\n                  and Asynchronous Operation in ARTour\
    \ Web Express,\" in\n                  Proc. MobiCom'97, Budapest, Hungary, September\
    \ 1997.\n   [Demers90]     Demers, A., Keshav, S., and Shenker, S., Analysis and\n\
    \                  Simulation of a Fair Queueing Algorithm,\n                \
    \  Internetworking: Research and Experience, Vol. 1,\n                  1990,\
    \ pp. 3-26.\n   [ECN]          Ramakrishnan, K. and S. Floyd, \"A Proposal to\
    \ add\n                  Explicit Congestion Notification (ECN) to IP\", RFC\n\
    \                  2481, January 1999.\n   [Floyd95]      Floyd, S., and Jacobson,\
    \ V., Link-sharing and Resource\n                  Management Models for Packet\
    \ Networks. IEEE/ACM\n                  Transactions on Networking, Vol. 3 No.\
    \ 4, pp. 365-386,\n                  August 1995.\n   [FSS98]        Fragouli,\
    \ C., Sivaraman, V., Srivastava, M.,\n                  \"Controlled Multimedia\
    \ Wireless Link Sharing via\n                  Enhanced Class-Based Queueing with\
    \ Channel-State-\n                  Dependent Packet Scheduling,\" Proc. IEEE\
    \ INFOCOM'98,\n                  April 1998.\n   [GPRS]         ETSI, \"General\
    \ Packet Radio Service (GPRS): Service\n                  Description, Stage 2,\"\
    \ GSM03.60, v.6.1.1 August 1998.\n   [GSM]          Rahnema, M., \"Overview of\
    \ the GSM system and protocol\n                  architecture,\" IEEE Communications\
    \ Magazine, vol. 31,\n                  pp 92-100, April 1993.\n   [HL96]    \
    \     Hausel, B., Lindquist, D., \"WebExpress: A System for\n                \
    \  Optimizing Web Browsing in a Wireless Environment,\" in\n                 \
    \ Proc.  MobiCom'96, Rye, New York, USA, November 1996.\n   [HTTP-PERF]    Henrik\
    \ Frystyk Nielsen (W3C, MIT), Jim Gettys (W3C,\n                  Digital), Anselm\
    \ Baird-Smith (W3C, INRIA), Eric\n                  Prud'hommeaux (W3C, MIT),\
    \ Hon Lie (W3C, INRIA), Chris\n                  Lilley (W3C, INRIA), \"Network\
    \ Performance Effects of\n                  HTTP/1.1, CSS1, and PNG,\" ACM SIGCOMM\
    \ '97, Cannes,\n                  France, September 1997.  Available at:\n   \
    \               http://www.w3.org/Protocols/HTTP/Performance\n               \
    \   /Pipeline.html\n   [IPPCP]        Shacham, A., Monsour, R., Pereira, R. and\
    \ M. Thomas,\n                  \"IP Payload Compression Protocol (IPComp)\",\
    \ RFC 2393,\n                  December 1998.\n   [IPHC]         Degermark, M.,\
    \ Nordgren, B. and S. Pink, \"IP Header\n                  Compression\", RFC\
    \ 2507, February 1999.\n   [IPHC-RTP]     Casner, S. and  V. Jacobson, \"Compressing\
    \ IP/UDP/RTP\n                  Headers for Low-Speed Serial Links\", RFC 2508,\n\
    \                  February 1999.\n   [IPHC-PPP]     Engan, M., Casner, S. and\
    \ C. Bormann, \"IP Header\n                  Compression over PPP\", RFC 2509,\
    \ February 1999.\n   [ITCP]         Bakre, A., Badrinath, B.R., \"Handoff and\
    \ Systems\n                  Support for Indirect TCP/IP. In Proceedings of the\n\
    \                  Second USENIX Symposium on Mobile and Location-\n         \
    \         Independent Computing, Ann Arbor, Michigan, April 10-\n            \
    \      11, 1995.\n   [Jain89]       Jain, R., \"A Delay-Based Approach for Congestion\n\
    \                  Avoidance in Interconnected Heterogeneous Computer\n      \
    \            Networks,\" Digital Equipment Corporation, Technical\n          \
    \        Report DEC-TR-566, April 1989.\n   [Karn93]       Karn, P., \"The Qualcomm\
    \ CDMA Digital Cellular System\"\n                  Proc. USENIX Mobile and Location-Independent\
    \ Computing\n                  Symposium, USENIX Association, August 1993.\n \
    \  [KRLKA97]      Kojo, M., Raatikainen, K., Liljeberg,  M., Kiiskinen,\n    \
    \              J., Alanko, T., \"An Efficient Transport Service for\n        \
    \          Slow Wireless Telephone Links,\" in IEEE Journal on\n             \
    \     Selected Areas of Communication, volume 15, number 7,\n                \
    \  September 1997.\n   [LAKLR95]      Liljeberg, M., Alanko, T., Kojo, M., Laamanen,\
    \ H.,\n                  Raatikainen, K., \"Optimizing World-Wide Web for\n  \
    \                Weakly-Connected Mobile Workstations: An Indirect\n         \
    \         Approach,\" in Proc. 2nd Int.  Workshop on Services in\n           \
    \       Distributed and Networked Environments, Whistler,\n                  Canada,\
    \ pp. 132-139, June 1995.\n   [LHKR96]       Liljeberg, M., Helin, H., Kojo, M.,\
    \ Raatikainen, K.,\n                  \"Mowgli WWW Software: Improved Usability\
    \ of WWW in\n                  Mobile WAN Environments,\" in Proc.  IEEE Global\n\
    \                  Internet 1996 Conference, London, UK, November 1996.\n   [LS98]\
    \         Lettieri, P., Srivastava, M., \"Adaptive Frame Length\n            \
    \      Control for Improving Wireless Link Throughput, Range,\n              \
    \    and Energy Efficiency,\" Proc.  IEEE INFOCOM'98, April\n                \
    \  1998.\n   [MNCP]         Piscitello, D., Phifer, L., Wang, Y., Hovey, R.,\n\
    \                  \"Mobile Network Computing Protocol (MNCP)\", Work in\n   \
    \               Progress.\n   [MOWGLI]       Kojo, M., Raatikainen, K., Alanko,\
    \ T., \"Connecting\n                  Mobile Workstations to the Internet over\
    \ a Digital\n                  Cellular Telephone Network,\" in Proc. Workshop\
    \ on\n                  Mobile and Wireless Information Systems (MOBIDATA),\n\
    \                  Rutgers University, NJ, November 1994.  Available at:\n   \
    \               http://www.cs.Helsinki.FI/research/mowgli/. Revised\n        \
    \          version published in Mobile Computing, pp. 253-270,\n             \
    \     Kluwer, 1996.\n   [MSMO97]       Mathis, M., Semke, J., Mahdavi, J., Ott,\
    \ T., \"The\n                  Macroscopic Behavior of the TCP Congestion Avoidance\n\
    \                  Algorithm,\" in Computer Communications Review, a\n       \
    \           publication of ACM SIGCOMM, volume 27, number 3, July\n          \
    \        1997.\n   [MTCP]         Brown, K. Singh, S., \"A Network Architecture\
    \ for\n                  Mobile Computing,\" Proc. IEEE INFOCOM'96, pp. 1388-\n\
    \                  1396, March 1996.  Available at\n                  ftp://ftp.ece.orst.edu/pub/singh/papers\n\
    \                  /transport.ps.gz\n   [M-TCP]        Brown, K. Singh, S., \"\
    M-TCP: TCP for Mobile Cellular\n                  Networks,\" ACM Computer Communications\
    \ Review Vol.\n                  27(5), 1997.  Available at\n                \
    \  ftp://ftp.ece.orst.edu/pub/singh/papers/mtcp.ps.gz\n   [MV97]         Mehta,\
    \ M., Vaidya, N., \"Delayed Duplicate-\n                  Acknowledgements:  A\
    \ Proposal to Improve Performance\n                  of TCP on Wireless Links,\"\
    \ Texas A&M University,\n                  December 24, 1997.  Available at\n\
    \                  http://www.cs.tamu.edu/faculty/vaidya/mobile.html\n   [NETBLT]\
    \       White, J., \"NETBLT (Network Block Transfer Protocol)\",\n           \
    \       Work in Progress.\n   [Paxson97]     V. Paxson, \"End-to-End Internet\
    \ Packet Dynamics,\"\n                  Proc. SIGCOMM '97.  Available at\n   \
    \               ftp://ftp.ee.lbl.gov/papers/vp-pkt-dyn-sigcomm97.ps.Z\n   [RED]\
    \          Braden, B., Clark, D., Crowcroft, J., Davie, B.,\n                \
    \  Deering, S., Estrin, D., Floyd, S., Jacobson, V.,\n                  Minshall,\
    \ G., Partridge, C., Peterson, L.,\n                  Ramakrishnan, K., Shenker,\
    \ S., Wroclawski, J. and L.\n                  Zhang, \"Recommendations on Queue\
    \ Management and\n                  Congestion Avoidance in the Internet\", RFC\
    \ 2309, April\n                  1998.\n   [RLP]          ETSI, \"Radio Link Protocol\
    \ for Data and Telematic\n                  Services on the Mobile Station - Base\
    \ Station System\n                  (MS-BSS) interface and the Base Station System\
    \ -\n                  Mobile Switching Center (BSS-MSC) interface,\" GSM\n  \
    \                Specification 04.22, Version 3.7.0, February 1992.\n   [RFC908]\
    \       Velten, D., Hinden, R. and J. Sax, \"Reliable Data\n                 \
    \ Protocol\", RFC 908, July 1984.\n   [RFC1030]      Lambert, M., \"On Testing\
    \ the NETBLT Protocol over\n                  Divers Networks\", RFC 1030, November\
    \ 1987.\n   [RFC1122]      Braden, R., \"Requirements for Internet Hosts --\n\
    \                  Communication Layers\", STD 3, RFC 1122, October 1989.\n  \
    \ [RFC1144]      Jacobson, V., \"Compressing TCP/IP Headers for Low-\n       \
    \           Speed Serial Links\", RFC 1144, February 1990.\n   [RFC1151]     \
    \ Partridge, C., Hinden, R., \"Version 2 of the Reliable\n                  Data\
    \ Protocol (RDP)\", RFC 1151, April 1990.\n   [RFC1191]      Mogul, J. and S.\
    \ Deering, \"Path MTU Discovery\", RFC\n                  1191, November 1990.\n\
    \   [RFC1397]      Braden, R., \"Extending TCP for Transactions --\n         \
    \         Concepts\", RFC 1397, November 1992.\n   [RFC1644]      Braden, R.,\
    \ \"T/TCP -- TCP Extensions for Transactions\n                  Functional Specification\"\
    , RFC 1644, July 1994.\n   [RFC1661]      Simpson, W., \"The Point-To-Point Protocol\
    \ (PPP)\", STD\n                  51, RFC 1661, July 1994.\n   [RFC1928]     \
    \ Leech, M., Ganis, M., Lee, Y., Kuris, R., Koblas, D.\n                  and\
    \ L. Jones, \"SOCKS Protocol Version 5\", RFC 1928,\n                  March 1996.\n\
    \   [RFC1986]      Polites, W., Wollman, W., Woo, D. and R. Langan,\n        \
    \          \"Experiments with a Simple File Transfer Protocol for\n          \
    \        Radio Links using Enhanced Trivial File Transfer\n                  Protocol\
    \ (ETFTP)\", RFC 1986, August 1996.\n   [RFC2002]      Perkins, C., \"IP Mobility\
    \ Support\", RFC 2002, October\n                  1996.\n   [RFC2003]      Perkins,\
    \ C., \"IP Encapsulation within IP\", RFC 2003,\n                  October 1996.\n\
    \   [RFC2004]      Perkins, C., \"Minimal Encapsulation within IP\", RFC\n   \
    \               2004, October 1996.\n   [RFC2018]      Mathis, M., Mahdavi, J.,\
    \ Floyd, S. and A. Romanow,\n                  \"TCP Selective Acknowledgment\
    \ Options\", RFC 2018,\n                  October 1996.\n   [RFC2188]      Banan,\
    \ M., Taylor, M. and J. Cheng, \"AT&T/Neda's\n                  Efficient Short\
    \ Remote Operations (ESRO) Protocol\n                  Specification Version 1.2\"\
    , RFC 2188, September 1997.\n   [RFC2246]      Dierk, T. and E. Allen, \"TLS Protocol\
    \ Version 1\", RFC\n                  2246, January 1999.\n   [RFC2414]      Allman,\
    \ M., Floyd, S. and C. Partridge. \"Increasing\n                  TCP's Initial\
    \ Window\", RFC 2414, September 1998.\n   [RFC2415]      Poduri, K.and K. Nichols,\
    \ \"Simulation Studies of\n                  Increased Initial TCP Window Size\"\
    , RFC 2415,\n                  September 1998.\n   [RFC2416]      Shepard, T.\
    \ and C. Partridge, \"When TCP Starts Up With\n                  Four Packets\
    \ Into Only Three Buffers\", RFC 2416,\n                  September 1998.\n  \
    \ [RFC2581]      Allman, M., Paxson, V. and W. Stevens, \"TCP Congestion\n   \
    \               Control\", RFC 2581, April 1999.\n   [RFC2582]      Floyd, S.\
    \ and T. Henderson, \"The NewReno Modification\n                  to TCP's Fast\
    \ Recovery Algorithm\", RFC 2582, April\n                  1999.\n   [SNOOP] \
    \       Balakrishnan, H., Seshan, S., Amir, E., Katz, R.,\n                  \"\
    Improving TCP/IP Performance over Wireless Networks,\"\n                  Proc.\
    \ 1st ACM Conf. on Mobile Computing and Networking\n                  (Mobicom),\
    \ Berkeley, CA, November 1995.\n   [Stevens94]    R. Stevens, \"TCP/IP Illustrated,\
    \ Volume 1,\" Addison-\n                  Wesley, 1994 (section 2.10 for MTU size\
    \ considerations\n                  and section 11.3 for weak checksums).\n  \
    \ [TCPHP]        Jacobson, V., Braden, R. and D. Borman, \"TCP\n             \
    \     Extensions for High Performance\", RFC 1323, May 1992.\n   [TCPSATMIN] \
    \   TCPSAT Minutes, August, 1997. Available at:\n                  http://tcpsat.lerc.nasa.gov/tcpsat/meetings/munich-\n\
    \                  minutes.txt.\n   [Touch97]      Touch, T., \"TCP Control Block\
    \ Interdependence\", RFC\n                  2140, April 1997.\n   [Vaidya99] \
    \    N. H. Vaidya, M. Mehta, C. Perkins, G. Montenegro,\n                  \"\
    Delayed Duplicate Acknowledgements: A TCP-Unaware\n                  Approach\
    \ to Improve Performance of TCP over Wireless,\"\n                  Technical\
    \ Report 99-003, Computer Science Dept., Texas\n                  A&M University,\
    \ February 1999.\n   [VEGAS]        Brakmo, L., O'Malley, S., \"TCP Vegas, New\
    \ Techniques\n                  for Congestion Detection and Avoidance,\" SIGCOMM'94,\n\
    \                  London, pp 24-35, October 1994.\n   [VMTP]         Cheriton,\
    \ D., \"VMTP: Versatile Message Transaction\n                  Protocol\", RFC\
    \ 1045, February 1988.\n   [WAP]          Wireless Application Protocol Forum.\n\
    \                  http://www.wapforum.org/\n   [WC91]         Wang, Z., Crowcroft,\
    \ J., \"A New Congestion Control\n                  Scheme:  Slow Start and Search,\"\
    \ ACM Computer\n                  Communication Review, vol 21, pp 32-43, January\
    \ 1991.\n   [WTCP]         Ratnam, K., Matta, I., \"WTCP: An Efficient\n     \
    \             Transmission Control Protocol for Networks with\n              \
    \    Wireless Links,\" Technical Report NU-CCS-97-11,\n                  Northeastern\
    \ University, July 1997. Available at:\n                  http://www.ece.neu.edu/personal/karu/papers/WTCP-\n\
    \                  NU.ps.gz\n   [YB94]         Yavatkar, R., Bhagawat, N., \"\
    Improving End-to-End\n                  Performance of TCP over Mobile Internetworks,\"\
    \ Proc.\n                  Workshop on Mobile Computing Systems and Applications,\n\
    \                  IEEE Computer Society Press, Los Alamitos, California,\n  \
    \                1994.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Questions about this document may be directed at:\n  \
    \ Gabriel E. Montenegro\n   Sun Labs Networking and Security Group\n   Sun Microsystems,\
    \ Inc.\n   901 San Antonio Road\n   Mailstop UMPK 15-214\n   Mountain View, California\
    \ 94303\n   Phone: +1-650-786-6288\n   Fax:   +1-650-786-6445\n   EMail: gab@sun.com\n\
    \   Spencer Dawkins\n   Nortel Networks\n   P.O. Box 833805\n   Richardson, Texas\
    \ 75083-3805\n   Phone: +1-972-684-4827\n   Fax:   +1-972-685-3292\n   EMail:\
    \ sdawkins@nortel.com\n   Markku Kojo\n   Department of Computer Science\n   University\
    \ of Helsinki\n   P.O. Box 26 (Teollisuuskatu 23)\n   FIN-00014 HELSINKI\n   Finland\n\
    \   Phone: +358-9-1914-4179\n   Fax:   +358-9-1914-4441\n   EMail: kojo@cs.helsinki.fi\n\
    \   Vincent Magret\n   Corporate Research Center\n   Alcatel Network Systems,\
    \ Inc\n   1201 Campbell\n   Mail stop 446-310\n   Richardson Texas 75081 USA\n\
    \   M/S 446-310\n   Phone: +1-972-996-2625\n   Fax:   +1-972-996-5902\n   EMail:\
    \ vincent.magret@aud.alcatel.com\n   Nitin Vaidya\n   Dept. of Computer Science\n\
    \   Texas A&M University\n   College Station, TX 77843-3112\n   Phone: 979-845-0512\n\
    \   Fax: 979-847-8578\n   EMail: vaidya@cs.tamu.edu\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2000).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
