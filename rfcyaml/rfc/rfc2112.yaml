- title: __initial_text__
  contents:
  - '                The MIME Multipart/Related Content-type

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Multipart/Related content-type provides a common mechanism for\n\
    \   representing objects that are aggregates of related MIME body parts.\n   This\
    \ document defines the Multipart/Related content-type and provides\n   examples\
    \ of its use.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Several applications of MIME, including MIME-PEM, and MIME-Macintosh\n\
    \   and other proposals, require multiple body parts that make sense only\n  \
    \ in the aggregate.  The present approach to these compound objects has\n   been\
    \ to define specific multipart subtypes for each new object.  In\n   keeping with\
    \ the MIME philosophy of having one mechanism to achieve\n   the same goal for\
    \ different purposes, this document describes a\n   single mechanism for such\
    \ aggregate or compound objects.\n   The Multipart/Related content-type addresses\
    \ the MIME representation\n   of compound objects.  The object is categorized\
    \ by a \"type\"\n   parameter.  Additional parameters are provided to indicate\
    \ a specific\n   starting body part or root and auxiliary information which may\
    \ be\n   required when unpacking or processing the object.\n   Multipart/Related\
    \ MIME entities may contain Content-Disposition\n   headers that provide suggestions\
    \ for the storage and display of a\n   body part.  Multipart/Related processing\
    \ takes precedence over\n   Content-Disposition; the interaction between them\
    \ is discussed in\n   section 4.\n   Responsibility for the display or processing\
    \ of a Multipart/Related's\n   constituent entities rests with the application\
    \ that handles the\n   compound object.\n"
- title: 2.  Multipart/Related Registration Information
  contents:
  - "2.  Multipart/Related Registration Information\n   The following form is copied\
    \ from RFC 1590, Appendix A.\n   To:  IANA@isi.edu Subject:  Registration of new\
    \ Media Type content-\n   type/subtype\n   Media Type name:           Multipart\n\
    \   Media subtype name:        Related\n   Required parameters:       Type, a\
    \ media type/subtype.\n   Optional parameters:       Start\n                 \
    \    Start-info\n   Encoding considerations:   Multipart content-types cannot\
    \ have\n                              encodings.\n   Security considerations:\
    \   Depends solely on the referenced type.\n   Published specification:   RFC-REL\
    \ (this document).\n   Person & email address to contact for further information:\n\
    \                     Edward Levinson\n                     47 Clive Street\n\
    \                     Metuchen, NJ 08840-1060\n                     +1 908 494\
    \ 1606\n                     XIson@cnj.digex.net\n"
- title: 3.  Intended usage
  contents:
  - "3.  Intended usage\n   The Multipart/Related media type is intended for compound\
    \ objects\n   consisting of several inter-related body parts.  For a\n   Multipart/Related\
    \ object, proper display cannot be achieved by\n   individually displaying the\
    \ constituent body parts.  The content-type\n   of the Multipart/Related object\
    \ is specified by the type parameter.\n   The \"start\" parameter, if given, points,\
    \ via a content-ID, to the\n   body part that contains the object root.  The default\
    \ root is the\n   first body part within the Multipart/Related body.\n   The relationships\
    \ among the body parts of a compound object\n   distinguishes it from other object\
    \ types.  These relationships are\n   often represented by links internal to the\
    \ object's components that\n   reference the other components.  Within a single\
    \ operating\n   environment the links are often file names, such links may be\n\
    \   represented within a MIME message using content-IDs or the value of\n   some\
    \ other \"Content-\" headers.\n"
- title: 3.1.  The Type Parameter
  contents:
  - "3.1.  The Type Parameter\n   The type parameter must be specified and its value\
    \ is the MIME media\n   type of the \"root\" body part.  It permits a MIME user\
    \ agent to\n   determine the content-type without reference to the enclosed body\n\
    \   part.  If the value of the type parameter and the root body part's\n   content-type\
    \ differ then the User Agent's behavior is undefined.\n"
- title: 3.2.  The Start Parameter
  contents:
  - "3.2.  The Start Parameter\n   The start parameter, if given, is the content-ID\
    \ of the compound\n   object's \"root\".  If not present the \"root\" is the first\
    \ body part in\n   the Multipart/Related entity.  The \"root\" is the element\
    \ the\n   applications processes first.\n"
- title: 3.3.  The Start-Info Parameter
  contents:
  - "3.3.  The Start-Info Parameter\n   Additional information can be provided to\
    \ an application by the\n   start-info parameter.  It contains either a string\
    \ or points, via a\n   content-ID, to another MIME entity in the message.  A typical\
    \ use\n   might be to provide additional command line parameters or a MIME\n \
    \  entity giving auxiliary information for processing the compound\n   object.\n\
    \   Applications that use Multipart/Related must specify the\n   interpretation\
    \ of start-info.  User Agents shall provide the\n   parameter's value to the processing\
    \ application.  Processes can\n   distinguish a start-info reference from a token\
    \ or quoted-string by\n   examining the first non-white-space character, \"<\"\
    \ indicates a\n   reference.\n"
- title: 3.4.  Syntax
  contents:
  - "3.4.  Syntax\n     related-param    := [ \";\" \"start\" \"=\" cid ]\n      \
    \                   [ \";\" \"start-info\"  \"=\"\n                     ( cid-list\
    \ / value ) ]\n                         [ \";\" \"type\"  \"=\" type \"/\" subtype\
    \ ]\n                   ; order independent\n     cid-list        := cid cid-list\n\
    \     cid             := msg-id     ; c.f. [822]\n     value           := token\
    \ / quoted-string    ; c.f. [MIME]\n                    ; value cannot begin with\
    \ \"<\"\n   Note that the parameter values will usually require quoting.  Msg-id\n\
    \   contains the special characters \"<\", \">\", \"@\", and perhaps other\n \
    \  special characters.  If msg-id contains quoted-strings, those quote\n   marks\
    \ must be escaped.  Similarly, the type parameter contains the\n   special character\
    \ \"/\".\n"
- title: 4.  Handling Content-Disposition Headers
  contents:
  - "4.  Handling Content-Disposition Headers\n   Content-Disposition Headers [DISP]\
    \ suggest presentation styles for\n   MIME body parts.  [DISP] describes two presentation\
    \ styles, called\n   the disposition type, INLINE and ATTACHMENT.  These, used\
    \ within a\n   multipart entity, allow the sender to suggest presentation\n  \
    \ information.  [DISP] also provides for an optional storage (file)\n   name.\
    \  Content-Disposition headers could appear in one or more body\n   parts contained\
    \ within a Multipart/Related entity.\n   Using Content-Disposition headers in\
    \ addition to Multipart/Related\n   provides presentation information to User\
    \ Agents that do not\n   recognize Multipart/Related.  They will treat the multipart\
    \ as\n   Multipart/Mixed and they may find the Content-Disposition information\n\
    \   useful.\n   With Multipart/Related however, the application processing the\n\
    \   compound object determines the presentation style for all the\n   contained\
    \ parts.  In that context the Content-Disposition header\n   information is redundant\
    \ or even misleading.  Hence, User Agents that\n   understand Multipart/Related\
    \ shall ignore the disposition type within\n   a Multipart/Related body part.\n\
    \   It may be possible for a User Agent capable of handling both\n   Multipart/Related\
    \ and Content-Disposition headers to provide the\n   invoked application the Content-Disposition\
    \ header's optional\n   filename parameter to the Multipart/Related.  The use\
    \ of that\n   information will depend on the specific application and should be\n\
    \   specified when describing the handling of the corresponding compound\n   object.\
    \  Such descriptions would be appropriate in an RFC registering\n   that object's\
    \ media type.\n"
- title: 5.  Examples
  contents:
  - '5.  Examples

    '
- title: 5.1 Application/X-FixedRecord
  contents:
  - "5.1 Application/X-FixedRecord\n   The X-FixedRecord content-type consists of\
    \ one or more octet-streams\n   and a list of the lengths of each record.  The\
    \ root, which lists the\n   record lengths of each record within the streams.\
    \  The record length\n   list, type Application/X-FixedRecord, consists of a set\
    \ of INTEGERs\n   in ASCII format, one per line.  Each INTEGER gives the number\
    \ of\n   octets from the octet-stream body part that constitute the next\n   \"\
    record\".\n   The example below, uses a single data block.\n     Content-Type:\
    \ Multipart/Related; boundary=example-1\n             start=\"<950120.aaCC@XIson.com>\"\
    ;\n             type=\"Application/X-FixedRecord\"\n          start-info=\"-o\
    \ ps\"\n     --example-1\n     Content-Type: Application/X-FixedRecord\n     Content-ID:\
    \ <950120.aaCC@XIson.com>\n     25\n     10\n     34\n     10\n     25\n     21\n\
    \     26\n     10\n     --example-1\n     Content-Type: Application/octet-stream\n\
    \     Content-Description: The fixed length records\n     Content-Transfer-Encoding:\
    \ base64\n     Content-ID: <950120.aaCB@XIson.com>\n     T2xkIE1hY0RvbmFsZCBoYWQgYSBmYXJtCkUgSS\n\
    \     BFIEkgTwpBbmQgb24gaGlzIGZhcm0gaGUgaGFk\n     IHNvbWUgZHVja3MKRSBJIEUgSSBPCldpdGggYS\n\
    \     BxdWFjayBxdWFjayBoZXJlLAphIHF1YWNrIHF1\n     YWNrIHRoZXJlLApldmVyeSB3aGVyZSBhIHF1YW\n\
    \     NrIHF1YWNrCkUgSSBFIEkgTwo=\n     --example-1--\n"
- title: 5.2 Text/X-Okie
  contents:
  - "5.2 Text/X-Okie\n   The Text/X-Okie is an invented markup language permitting\
    \ the\n   inclusion of images with text.  A feature of this example is the\n \
    \  inclusion of two additional body parts, both picture. They are\n   referred\
    \ to internally by the encapsulated document via each\n   picture's body part\
    \ content-ID.  Usage of \"cid:\", as in this example,\n   may be useful for a\
    \ variety of compound objects.  It is not, however,\n   a part of the Multipart/Related\
    \ specification.\n     Content-Type: Multipart/Related; boundary=example-2;\n\
    \             start=\"<950118.AEBH@XIson.com>\"\n          type=\"Text/x-Okie\"\
    \n     --example-2\n     Content-Type: Text/x-Okie; charset=iso-8859-1;\n    \
    \         declaration=\"<950118.AEB0@XIson.com>\"\n     Content-ID: <950118.AEBH@XIson.com>\n\
    \     Content-Description: Document\n     {doc}\n     This picture was taken by\
    \ an automatic camera mounted ...\n     {image file=cid:<950118.AECB@XIson.com>}\n\
    \     {para}\n     Now this is an enlargement of the area ...\n     {image file=cid:<950118:AFDH@XIson.com>}\n\
    \     {/doc}\n     --example-2\n     Content-Type: image/jpeg\n     Content-ID:\
    \ <950118.AFDH@XIson.com>\n     Content-Transfer-Encoding: BASE64\n     Content-Description:\
    \ Picture A\n     [encoded jpeg image]\n     --example-2\n     Content-Type: image/jpeg\n\
    \     Content-ID: <950118.AECB@XIson.com>\n     Content-Transfer-Encoding: BASE64\n\
    \     Content-Description: Picture B\n     [encoded jpeg image]\n     --example-2--\n"
- title: 5.3 Content-Disposition
  contents:
  - "5.3 Content-Disposition\n   In the above example each image body part could also\
    \ have a Content-\n   Disposition header.  For example,\n     ...\n     --example-2\n\
    \     Content-Type: image/jpeg\n     Content-ID: <950118.AECB@XIson.com>\n   \
    \  Content-Transfer-Encoding: BASE64\n     Content-Description: Picture B\n  \
    \   Content-Disposition: INLINE\n     [encoded jpeg image]\n     --example-2--\n\
    \   User Agents that recognize Multipart/Related will ignore the\n   Content-Disposition\
    \ header's disposition type.  Other User Agents\n   will process the Multipart/Related\
    \ as Multipart/Mixed and may make\n   use of that header's information.\n"
- title: 6.  User Agent Requirements
  contents:
  - "6.  User Agent Requirements\n   User agents that do not recognize Multipart/Related\
    \ shall, in\n   accordance with [MIME], treat the entire entity as Multipart/Mixed.\n\
    \   MIME User Agents that do recognize Multipart/Related entities but are\n  \
    \ unable to process the given type should give the user the option of\n   suppressing\
    \ the entire Multipart/Related body part shall be.\n   Existing MIME-capable mail\
    \ user agents (MUAs) handle the existing\n   media types in a straightforward\
    \ manner.  For discrete media types\n   (e.g. text, image, etc.) the body of the\
    \ entity can be directly\n   passed to a display process.  Similarly the existing\
    \ composite\n   subtypes can be reduced to handing one or more discrete types.\n\
    \   Handling Multipart/Related differs in that processing cannot be\n   reduced\
    \ to handling the individual entities.\n   The following sections discuss what\
    \ information the processing\n   application requires.\n   It is possible that\
    \ an application specific \"receiving agent\" will\n   manipulate the entities\
    \ for display prior to invoking actual\n   application process.  Okie, above,\
    \ is an example of this; it may need\n   a receiving agent to parse the document\
    \ and substitute local file\n   names for the originator's file names.  Other\
    \ applications may just\n   require a table showing the correspondence between\
    \ the local file\n   names and the originator's.  The receiving agent takes responsibility\n\
    \   for such processing.\n"
- title: 6.1 Data Requirements
  contents:
  - "6.1 Data Requirements\n   MIME-capable mail user agents (MUAs) are required to\
    \ provide the\n   application:\n   (a)  the bodies of the MIME entities and the\
    \ entity Content-*\n        headers,\n   (b)  the parameters of the Multipart/Related\
    \ Content-type\n        header, and\n   (c)  the correspondence between each body's\
    \ local file name,\n        that body's header data, and, if present, the body\
    \ part's\n        content-ID.\n"
- title: 6.2 Storing Multipart/Related Entities
  contents:
  - "6.2 Storing Multipart/Related Entities\n   The Multipart/Related media type will\
    \ be used for objects that have\n   internal linkages between the body parts.\
    \  When the objects are\n   stored the linkages may require processing by the\
    \ application or its\n   receiving agent.\n"
- title: 6.3 Recursion
  contents:
  - "6.3 Recursion\n   MIME is a recursive structure.  Hence one must expect a\n \
    \  Multipart/Related entity to contain other Multipart/Related entities.\n   When\
    \ a Multipart/Related entity is being processed for display or\n   storage, any\
    \ enclosed Multipart/Related entities shall be processed\n   as though they were\
    \ being stored.\n"
- title: 6.4 Configuration Considerations
  contents:
  - "6.4 Configuration Considerations\n   It is suggested that MUAs that use configuration\
    \ mechanisms, see\n   [CFG] for an example, refer to Multipart/Related as\n  \
    \ Multipart/Related/<type>, were <type> is the value of the \"type\"\n   parameter.\n"
- title: 7.  Security considerations
  contents:
  - "7.  Security considerations\n   Security considerations relevant to Multipart/Related\
    \ are identical\n   to those of the underlying content-type.\n"
- title: 8.  Acknowledgments
  contents:
  - "8.  Acknowledgments\n   This proposal is the result of conversations the author\
    \ has had with\n   many people.  In particular, Harald A. Alvestrand, James Clark,\n\
    \   Charles Goldfarb, Gary Houston, Ned Freed, Ray Moody, and Don\n   Stinchfield,\
    \ provided both encouragement and invaluable help.  The\n   author, however, take\
    \ full responsibility for all errors contained in\n   this document.\n"
- title: 9.  References
  contents:
  - "9.  References\n   [822]       Crocker, D., \"Standard for the Format of ARPA\n\
    \               Internet Text Messages\", August 1982, University\n          \
    \     of Delaware, RFC 822.\n   [CID]       E. Levinson, J. Clark, \"Message/External-Body\n\
    \               Content-ID Access Type\", 12/26/1995, RFC 1873\n             \
    \  Levinson, E., \"Message/External-Body Content-ID\n               Access Type\"\
    , February 1997, RFC 2111.\n   [CFG]       Borenstein, N., \"A User Agent Configuration\n\
    \               Mechanism For Multimedia Mail Format\n               Information\"\
    , September 23, 1993, RFC 1524\n   [DISP]      R. Troost, S. Dorner, \"Communicating\
    \ Presentation\n               Information in Internet Messages:  The Content-\n\
    \               Disposition Header\", June 7, 1995, RFC 1806\n   [MIME]      Borenstein,\
    \ N. and Freed, N., \"MIME (Multipurpose\n               Internet Mail Extensions):\
    \ Mechanisms for\n               Specifying and Describing the Format of Internet\n\
    \               Message Bodies\", June 1992, RFC 1341.\n"
- title: 9.  Author's Address
  contents:
  - "9.  Author's Address\n   Edward Levinson\n   XIson, Inc.\n   47 Clive Street\n\
    \   Metuchen, NJ  08840-1060\n   USA\n   +1 908 549 3716\n   <XIson@cnj.digex.com>\n"
