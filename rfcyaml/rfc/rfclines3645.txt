Abstract The Secret Key Transaction Authentication for DNS (TSIG) protocol provides transaction level authentication for DNS.
TSIG is extensible through the definition of new algorithms.
This document specifies an algorithm based on the Generic Security Service Application Program Interface (GSS API) (RFC2743).
This document updates RFC 2845.
The Secret Key Transaction Authentication for DNS (TSIG)
[RFC2845] protocol was developed to provide a lightweight authentication and integrity of messages between two DNS entities, such as client and server or server and server.
TSIG can be used to protect dynamic update messages, authenticate regular message or to off load complicated
processing from a client to a server and still allow the client to be assured of the integrity of the answers.
The TSIG protocol [RFC2845] is extensible through the definition of new algorithms.
This document specifies an algorithm based on the Generic Security Service Application Program Interface (GSS API) [RFC2743].
GSS API is a framework that provides an abstraction of security to the application protocol developer.
The security services offered can include authentication, integrity, and confidentiality.
The underlying mechanisms that realize the security services can be negotiated on the fly and varied over time.
For example, a client and server MAY use Kerberos [RFC1964] for one transaction, whereas that same server MAY use SPKM [RFC2025] with a different client.
The protocol developer is removed from the responsibility of creating and managing a security infrastructure.
For example, the developer does not need to create new key distribution or key management systems.
Instead the developer relies on the security service mechanism to manage this on its behalf.
The scope of this document is limited to the description of an authentication mechanism only.
It does not discuss and/or propose an authorization mechanism.
Readers that are unfamiliar with GSS API concepts are encouraged to read the characteristics and concepts section of [RFC2743] before examining this protocol in detail.
It is also assumed that the reader is familiar with [RFC2845],
The key words "MUST", "MUST NOT", "REQUIRED", "SHOULD", "SHOULD NOT", "RECOMMENDED", and "MAY" in this document are to be interpreted as described in BCP 14, RFC 2119 [RFC2119].
In GSS, client and server
interact to create a "security context".
The security context can be used to create and verify transaction signatures on messages between the two parties.
A unique security context is required for each unique connection between client and server.
Creating a security context involves a negotiation between client and server.
Once a context has been established, it has a finite lifetime for which it can be used to secure messages.
Thus there are three states of a context associated with a connection:
Every connection begins in the uninitialized state.
GSS Details Client and server MUST be locally authenticated and have acquired default credentials before using this protocol as specified in Section 1.1.1 "Credentials" in RFC 2743 [RFC2743].
The GSS TSIG algorithm consists of two stages: I.  Establish security context.
The Client and Server use the GSS Init sec context and GSS Accept sec context APIs to generate the tokens that they pass to each other using [RFC2930] as a transport mechanism.
Once the security context is established it is used to generate and verify signatures using GSS GetMIC and GSS VerifyMIC APIs.
These signatures are exchanged by the Client and Server as a part of the TSIG records exchanged in DNS messages sent between the Client and Server, as described in [RFC2845].
Modifications to the TSIG protocol
(RFC 2845) Modification to RFC 2845 allows use of TSIG through signing server's response in an explicitly specified place in multi message exchange between two DNS entities even if client's request wasn't signed.
Specifically, Section 4.2 of RFC 2845 MUST be modified as follows:
The server MUST not generate a signed response to an unsigned request."
With: "The server MUST not generate a signed response to an unsigned request, except in case of response to client's unsigned TKEY query if secret key is established on server side after server processed client's query.
Signing responses to unsigned TKEY queries MUST be explicitly specified in the description of an individual secret key establishment algorithm.
A unique context is required for each server to which the client sends secure messages.
A context is identified by a context handle.
A client maintains a mapping of servers to handles: (target name, key name, context handle)
The value key name also identifies a context handle.
The key name is the owner name of the TKEY and TSIG records sent between a client and a server to indicate to each other which context MUST be used to process the current request.
DNS client and server MAY use various underlying security mechanisms to establish security context as described in sections 3 and 4.
At the same time, in order to guarantee interoperability between DNS clients and servers that support GSS TSIG it is REQUIRED that security mechanism used by client enables use of Kerberos v5 (see Section 9 for more information).
In GSS, establishing a security context involves the passing of opaque tokens between the client and the server.
The client generates the initial token and sends it to the server.
The server processes the token and if necessary, returns a subsequent token to the client.
The client processes this token, and so on, until the negotiation is complete.
The number of times the client and server exchange tokens depends on the underlying security mechanism.
A completed negotiation results in a context handle.
The TKEY resource record [RFC2930] is used as the vehicle to transfer tokens between client and server.
The TKEY record is a general mechanism for establishing secret keys for use with TSIG.
For more information, see [RFC2930].
Call GSS Init sec context
To obtain the first token to be sent to a server, a client MUST call GSS Init sec context API.
The following input parameters MUST be used.
The outcome of the call is indicated with the output values below.
Consult Sections 2.2.1, "GSS Init sec context call", of [RFC2743] for syntax definitions.
INPUTS CREDENTIAL HANDLE claimant cred handle
NULL (NULL specifies "use default").
Client MAY instead specify some other valid handle to its credentials.
CONTEXT HANDLE input context handle    0
To guarantee interoperability of the implementations of the GSS TSIG mechanism client MUST specify a valid underlying security mechanism that enables use of Kerberos v5 (see Section 9 for more information).
(0 requests a default value).
Client MAY instead specify another upper bound for the lifetime of the context to be established in seconds.
Any valid channel bindings as specified in Section 1.1.6 "Channel Bindings" in
If returned major status is set to one of the following errors:
GSS S DEFECTIVE TOKEN GSS S DEFECTIVE CREDENTIAL GSS S BAD SIG (GSS S BAD MIC) GSS S NO CRED GSS S CREDENTIALS EXPIRED GSS S BAD BINDINGS GSS S OLD TOKEN GSS S DUPLICATE TOKEN GSS S
NO CONTEXT GSS S BAD NAMETYPE GSS S
BAD MECH GSS S FAILURE
then the client MUST abandon the algorithm and MUST NOT use the GSS  TSIG algorithm to establish this security context.
This document does not prescribe which other mechanism could be used to establish a security context.
Next time when this client needs to establish security context, the client MAY use GSS TSIG algorithm.
Success values of major status are GSS S CONTINUE NEEDED and GSS S COMPLETE.
The exact success code is important during later processing.
The values of replay det state and mutual state indicate if the security package provides replay detection and mutual authentication, respectively.
If returned major status is GSS S COMPLETE AND one or
both of these values are FALSE, the client MUST abandon this algorithm.
Client's behavior MAY depend on other OUTPUT parameters according to the policy local to the client.
The handle output context handle is unique to this negotiation and is stored in the client's mapping table as the context handle that maps to target name.
Send TKEY Query to Server
An opaque output token returned by GSS Init sec context is transmitted to the server in a query request with QTYPE TKEY.
The token itself will be placed in a Key Data field of the RDATA field in the TKEY resource record in the additional records section of the query.
The owner name of the TKEY resource record set queried for and the owner name of the supplied TKEY resource record in the additional records section MUST be the same.
This name uniquely identifies the security context to both the client and server, and thus the client SHOULD use a value which is globally unique as described in [RFC2930].
To achieve global uniqueness, the name MAY contain a UUID/GUID [ISO11578].
TKEY Record NAME   client generated globally unique domain name string (as described in [RFC2930])
(GSS API negotiation per [RFC2930])
The query is transmitted to the server.
Note: if the original client call to GSS Init sec context returned any major status other than GSS S CONTINUE NEEDED or GSS S COMPLETE, then the client MUST NOT send TKEY query.
Client's behavior in this case is described above in Section 3.1.1.
Receive TKEY Query Response from Server Upon the reception of the TKEY query
the DNS server MUST respond according to the description in Section 4.
This section specifies the behavior of the client after it receives the matching response to its query.
The next processing step depends on the value of major status from the most recent call that client performed to GSS Init sec context: either GSS S COMPLETE or GSS S CONTINUE.
If the last call to GSS Init sec context yielded a major status value of GSS S COMPLETE and a non NULL output token was sent to the server, then the client side component of the negotiation is complete and the client is awaiting confirmation from the server.
Confirmation is in the form of a query response with RCODE NOERROR and with the last client supplied TKEY record in the answer section of the query.
The response MUST be signed with a TSIG record.
Note that the server is allowed to sign a response to unsigned client's query due to modification to the RFC 2845 specified in Section 2.2 above.
The signature in the TSIG record MUST be verified using the procedure detailed in section 5, Sending and Verifying Signed Messages.
If the response is not signed, OR if the response is signed but the signature is invalid, then an attacker has tampered with the message in transit or has attempted to send the client a false response.
In this case, the client MAY continue waiting for a response to its last TKEY query until the time period since the client sent last TKEY query expires.
Such a time period is specified by the policy local to the client.
This is a new option that allows the DNS client to accept multiple answers for one query ID and select one (not necessarily the first one) based on some criteria.
If the signature is verified, the context state is advanced to Context Established.
Proceed to section 3.2 for usage of the security context.
If the last call to GSS Init sec context yielded a major status value of GSS S CONTINUE NEEDED, then the negotiation is not yet complete.
The server will return to the client a query response with a TKEY record in the Answer section.
If the DNS message error is not NO ERROR or error field in the TKEY record is not 0 (i.e., no error), then the client MUST abandon this negotiation sequence.
The client MUST delete an active context by calling GSS Delete sec context providing the associated context handle.
The client MAY repeat the negotiation sequence starting with the uninitialized state as described in section 3.1.
To prevent infinite looping the number of attempts to establish a security context MUST be limited to ten or less.
If the DNS message error is NO ERROR and the error field in the TKEY record is 0 (i.e., no error), then the client MUST pass a token specified in the Key Data field in the TKEY resource record to GSS Init sec context using the same parameters values as in previous call except values for CONTEXT HANDLE input context handle and
OCTET STRING input token as described below: INPUTS CONTEXT HANDLE input context handle    context handle
(this is the context handle corresponding to the key name which is the owner name of the TKEY record in the answer section in the TKEY query response)
STRING   output token the client
MUST take one of the following actions: If OUTPUT major status is set to one of the following values:
GSS S DEFECTIVE TOKEN GSS S DEFECTIVE CREDENTIAL GSS S BAD SIG (GSS S BAD MIC) GSS S NO CRED GSS S CREDENTIALS EXPIRED GSS S BAD BINDINGS GSS S OLD TOKEN GSS S DUPLICATE TOKEN GSS S
NO CONTEXT GSS S BAD NAMETYPE GSS S
FAILURE the client MUST abandon this negotiation sequence.
This means that the client MUST delete an active context by calling GSS Delete sec context providing the associated context handle.
The client MAY repeat the negotiation sequence starting with the uninitialized state as described in section 3.1.
To prevent infinite looping the number of attempts to establish a security context MUST be limited to ten or less.
If OUTPUT major status is
GSS S CONTINUE NEEDED OR GSS S COMPLETE
then client MUST act as described below.
If the response from the server was signed, and the OUTPUT major status is GSS S COMPLETE,then the signature in the TSIG record MUST be verified using the procedure detailed in section 5, Sending and Verifying Signed Messages.
If the signature is invalid, then the client MUST abandon this negotiation sequence.
This means that the client MUST delete an active context by calling GSS Delete sec context providing the associated context handle.
The client MAY repeat the negotiation sequence starting with the uninitialized state as described in section 3.1.
To prevent infinite looping the number of attempts to establish a security context MUST be limited to ten or less.
If major status is GSS S CONTINUE NEEDED
the negotiation is not yet finished.
The token output token MUST be passed to the server in a TKEY record by repeating the negotiation sequence beginning with section 3.1.2.
The client MUST place a limit on the number of continuations in a context negotiation to prevent endless looping.
Such limit SHOULD NOT exceed value of 10.
If major status is GSS S COMPLETE and output token is non NULL, the client side component of the negotiation is complete but the token output token MUST be passed to the server by repeating the negotiation sequence beginning with section 3.1.2.
If major status is GSS S COMPLETE and output token is NULL, context negotiation is complete.
The context state is advanced to Context Established.
Proceed to section 3.2 for usage of the security context.
When context negotiation is complete, the handle context handle MUST be used for the generation and verification of transaction signatures.
The procedures for sending and receiving signed messages are described in section 5, Sending and Verifying Signed Messages.
Terminating a Context When the client is not intended to continue using the established security context, the client SHOULD delete an active context by calling GSS Delete sec context providing the associated context handle, AND client SHOULD delete the established context on the DNS server by using TKEY RR with the Mode field set to 5, i.e., "key deletion" [RFC2930].
As on the client side, the result of a successful context negotiation is a context handle used in future generation and verification of the transaction signatures.
A server MAY be managing several contexts with several clients.
Clients identify their contexts by providing a key name in their request.
The server maintains a mapping of key names to handles: (key name, context handle) 4.1.
A server MUST recognize TKEY queries as security context negotiation messages.
Receive TKEY Query from Client Upon receiving a query with QTYPE   TKEY, the server MUST examine whether the Mode and Algorithm Name fields of the TKEY record in the additional records section of the message contain values of 3 and gss tsig, respectively.
If they do, then the (key name, context handle)
mapping table is searched for the key name matching the owner name of the TKEY record in the additional records section of the query.
If the name is found in the table and the security context for this name is established and not expired, then the server MUST respond to the query with BADNAME error in the TKEY error field.
If the name is found in the table and the security context is not established, the corresponding context handle is used in subsequent GSS operations.
If the name is found but the security context is expired, then the server deletes this security context, as described in Section 4.2.1, and interprets this query as a start of new security context negotiation and performs operations described in Section 4.1.2 and 4.1.3.
If the name is not found, then the server interprets this query as a start of new security context negotiation and performs operations described in Section 4.1.2 and 4.1.3.
Call GSS Accept sec context
The server performs its side of a context negotiation by calling GSS Accept sec context.
The following input parameters MUST be used.
The outcome of the call is indicated with the output values below.
Consult Sections 2.2.2 "GSS Accept sec context call" of the RFC 2743
INPUTS CONTEXT HANDLE input context handle    0
if new negotiation, context handle matching key name if ongoing negotiation OCTET STRING
CREDENTIAL HANDLE acceptor cred handle
NULL (NULL specifies "use default").
Server MAY instead specify some other valid handle to its credentials.
Any valid channel bindings as specified in Section 1.1.6 "Channel Bindings" in
If this is the first call to GSS Accept sec context in a new negotiation, then output context handle is stored in the server's key mapping table as the context handle that maps to the name of the TKEY record.
Send TKEY Query Response to Client
The server MUST respond to the client with a TKEY query response with RCODE   NOERROR, that contains a TKEY record in the answer section.
If OUTPUT major status is one of the following errors the error field in the TKEY record set to BADKEY.
GSS S DEFECTIVE TOKEN GSS S DEFECTIVE CREDENTIAL GSS S BAD SIG (GSS S BAD MIC)
GSS S DUPLICATE TOKEN GSS S OLD TOKEN GSS S NO CRED
GSS S CREDENTIALS EXPIRED GSS S BAD BINDINGS GSS S
BAD MECH GSS S FAILURE
If OUTPUT major status is set to  GSS S COMPLETE or GSS S
then server MUST act as described below.
If major status is GSS S COMPLETE the server component of the negotiation is finished.
If output token is non NULL, then it MUST be returned to the client in a Key Data field of the RDATA in TKEY.
The error field in the TKEY record is set to NOERROR.
The message MUST be signed with a TSIG record as described in section 5, Sending and Verifying Signed Messages.
Note that server is allowed to sign a response to unsigned client's query due to modification to the RFC 2845 specified in Section 2.2 above.
The context state is advanced to Context Established.
Section 4.2 discusses the usage of the security context.
If major status is GSS S COMPLETE and output token is NULL, then the TKEY record received from the client MUST be returned in the Answer section of the response.
The message MUST be signed with a TSIG record as described in section 5, Sending and Verifying Signed Messages.
Note that server is allowed to sign a response to unsigned client's query due to modification to the RFC 2845 specified in section 2.2 above.
The context state is advanced to Context Established.
Section 4.2 discusses the usage of the security context.
If major status is GSS S CONTINUE NEEDED, the server component of the negotiation is not yet finished.
The server responds to the TKEY query with a standard query response, placing in the answer section a TKEY record containing output token in the Key Data RDATA field.
The error field in the TKEY record is set to NOERROR.
The server MUST limit the number of times that a given context is allowed to repeat, to prevent endless looping.
Such limit SHOULD NOT exceed value of 10.
Context Established When context negotiation is complete, the handle context handle is used for the generation and verification of transaction signatures.
The handle is valid for a finite amount of time determined by the underlying security mechanism.
A server MAY unilaterally terminate a context at any time (see section 4.2.1).
Server SHOULD limit the amount of memory used to cache established contexts.
The procedures for sending and receiving signed messages are given in section 5, Sending and Verifying Signed Messages.
A server can terminate any established context at any time.
The server MAY hint to the client that the context is being deleted by including a TKEY RR in a response with the Mode field set to 5, i.e., "key deletion" [RFC2930].
An active context is deleted by calling GSS Delete sec context providing the associated context handle.
5.  Sending and Verifying Signed Messages 5.1.
Sending a Signed Message Call GSS GetMIC
The procedure for sending a signature protected message is specified in [RFC2845].
The data to be passed to the signature routine includes the whole DNS message with specific TSIG variables appended.
For the exact format, see [RFC2845].
For this protocol, use the following TSIG variable values: TSIG Record NAME   key name that identifies this context
tsig Assign the remaining fields in the TSIG RDATA appropriate values as described in [RFC2845].
The signature is generated by calling GSS GetMIC.
The following input parameters MUST be used.
The outcome of the call is indicated with the output values specified below.
Consult Sections 2.3.1 "GSS GetMIC call" of the RFC 2743[RFC2743] for syntax definitions.
INPUTS CONTEXT HANDLE context handle
context handle for key name
(0 requests a default value).
Caller MAY instead specify other valid value (for details see Section 1.2.4 in [RFC2743])
OCTET STRING   per msg token
If major status is GSS S COMPLETE, then signature generation succeeded.
The signature in per msg token is inserted into the Signature field of the TSIG RR and the message is transmitted.
If major status is GSS S CONTEXT EXPIRED, GSS S CREDENTIALS EXPIRED or GSS S
FAILURE the caller MUST delete the security context, return to the uninitialized state and SHOULD negotiate a new security context, as described above in Section 3.1
If major status is GSS S
, the caller MUST remove the entry for key name from the (target  name, key name, context handle)
mapping table, return to the uninitialized state and SHOULD negotiate a new security context, as described above in Section 3.1
If major status is GSS S BAD QOP, the caller SHOULD repeat the GSS GetMIC call with allowed QOP value.
The number of such repetitions MUST be limited to prevent infinite loops.
Verifying a Signed Message Call GSS
The procedure for verifying a signature protected message is specified in [RFC2845].
The NAME of the TSIG record determines which context handle maps to the context that MUST be used to verify the signature.
If the NAME does not map to an established context, the server MUST send a standard TSIG error response to the client indicating BADKEY in the TSIG error field (as described in [RFC2845]).
For the GSS algorithm, a signature is verified by using GSS VerifyMIC:
INPUTS CONTEXT HANDLE context handle
context handle for key name
If major status is GSS S COMPLETE, the signature is authentic and the message was delivered intact.
Per [RFC2845], the timer values of the TSIG record MUST also be valid before considering the message to be authentic.
The caller MUST not act on the request or response in the message until these checks are verified.
When a server is processing a client request, the server MUST send a standard TSIG error response to the client indicating BADKEY in the TSIG error field as described in [RFC2845], if major status is set to one of the following values GSS S DEFECTIVE TOKEN GSS S BAD SIG (GSS S BAD MIC)
GSS S DUPLICATE TOKEN GSS S OLD TOKEN GSS S
UNSEQ TOKEN GSS S GAP TOKEN
GSS S CONTEXT EXPIRED GSS S
NO CONTEXT GSS S FAILURE
If the timer values of the TSIG record are invalid, the message MUST NOT be considered authentic.
If this error checking fails when a server is processing a client request, the appropriate error response MUST be sent to the client according to [RFC2845].
Example usage of GSS TSIG algorithm This Section describes an example where a Client, client.example.com, and a Server, server.example.com, establish a security context according to the algorithm described above.
I.  Client initializes security context negotiation To establish a security context with a server, server.example.com, the Client calls GSS Init sec context with the following parameters.
(Note that some INPUT and OUTPUT parameters not critical for this algorithm are not described in this example.)
CONTEXT HANDLE input context handle    0
HANDLE output context handle context handle OCTET
TRUE Client verifies that replay
det state and mutual state values are TRUE.
Since the major status is GSS S CONTINUE NEEDED, which is a success OUTPUT major status value, client stores context
handle that maps to "DNS@server.example.com" and proceeds to the next step.
Client sends a query with QTYPE   TKEY to server Client sends a query with QTYPE   TKEY for a client generated globally unique domain name string, 789.client.example.com.server.example.com.
Query contains a TKEY record in its Additional records section with the following fields.
(Note that some fields not specific to this algorithm are not specified.)
(GSS API negotiation per [RFC2930])
is generated it is stored in the client's (target name, key name, context handle)
Server receives a query with QTYPE   TKEY When server receives a query with QTYPE   TKEY, the server verifies that Mode and Algorithm fields in the TKEY record in the Additional records section of the query are set to 3 and "gss tsig" respectively.
It finds that the key name 789.client.example.com.server.example.com. is not listed in its (key name, context handle)
Server calls GSS Accept sec context To continue security context negotiation server calls GSS Accept sec context with the following parameters.
(Note that some INPUT and OUTPUT parameters not critical for this algorithm are not described in this example.)
INPUTS CONTEXT HANDLE input context handle
to OUTPUT context handle in its (key name, context handle)
V.  Server responds to the TKEY query Since the major status
GSS S CONTINUE NEEDED in the last server's call to GSS Accept sec context
, the server responds to the TKEY query placing in the answer section a TKEY record containing output token in the Key Data RDATA field.
The error field in the TKEY record is set to 0.
The RCODE in the query response is set to NOERROR.
Client processes token returned by server When the client receives the TKEY query response from the server, the client calls GSS Init sec context with the following parameters.
(Note that some INPUT and OUTPUT parameters not critical for this algorithm are not described in this example.)
CONTEXT HANDLE input context handle
the context handle stored in the client's mapping table entry (DNS@server.example.com., 789.client.example.com.server.example.com.
GSS S COMPLETE CONTEXT HANDLE output context handle
Since the major status is set to GSS S COMPLETE the client side security context is established, but since the output token is not NULL client MUST send a TKEY query to the server as described below.
Client sends a query with QTYPE   TKEY to server Client sends to the server a TKEY query for the 789.client.example.com.server.example.com.
Query contains a TKEY record in its Additional records section with the following fields.
(Note that some INPUT and OUTPUT parameters not critical to this algorithm are not described in this example.)
(GSS API negotiation per [RFC2930])
Server receives a TKEY query When the server receives a TKEY query, the server verifies that Mode and Algorithm fields in the TKEY record in the Additional records section of the query are set to 3 and gss tsig, respectively.
It finds that the key name 789.client.example.com.server.example.com. is listed in its (key name, context handle)
Server calls GSS Accept sec context To continue security context negotiation server calls GSS Accept sec context with the following parameters (Note that some INPUT and OUTPUT parameters not critical for this algorithm are not described in this example)
INPUTS CONTEXT HANDLE input context handle    context handle from the (789.client.example.com.server.example.com., context handle) entry in the server's mapping table
GSS S COMPLETE CONTEXT HANDLE output context handle
OCTET STRING   output token   NULL
the security context on the server side is established, but the server still needs to respond to the client's TKEY query, as described below.
The security context state is advanced to Context Established.
X.  Server responds to the TKEY query Since the major status   GSS S COMPLETE in the last server's call to GSS Accept sec context and the output token is NULL, the server responds to the TKEY query placing in the answer section a TKEY record that was sent by the client in the Additional records section of the client's latest TKEY query.
In addition, this server places a TSIG record in additional records section of its response.
Server calls GSS GetMIC to generate a signature to include it in the TSIG record.
The server specifies the following GSS GetMIC INPUT parameters:
context handle from the (789.client.example.com.server.example.com., context handle) entry in the server's mapping table OCTET STRING
GSS S COMPLETE OCTET STRING   per msg token Signature field in the TSIG record is set to per msg token.
returned by server Client receives the TKEY query response from the server.
Since the major status was GSS S COMPLETE in the last client's call to GSS Init sec context, the client verifies that the server's response is signed.
To validate the signature, the client calls GSS VerifyMIC with the following parameters: INPUTS CONTEXT HANDLE context handle
OCTET STRING   per msg token    Signature field from TSIG RR included in the server's query response Since the OUTPUTS parameter major status   GSS S COMPLETE, the signature is validated, security negotiation is complete and the security context state is advanced to Context Established.
These client and server will use the established security context to sign and validate the signatures when they exchange packets with each other until the context expires.
This document describes a protocol for DNS security using GSS API.
The security provided by this protocol is only as effective as the security provided by the underlying GSS mechanisms.
All the security considerations from RFC 2845, RFC 2930 and RFC 2743 apply to the protocol described in this document.
The IANA has reserved the TSIG Algorithm name gss tsig for the use in the Algorithm fields of TKEY and TSIG resource records.
This Algorithm name refers to the algorithm described in this document.
The requirement to have this name registered with IANA is specified in RFC 2845.
The GSS API using SPNEGO
[RFC2478] provides maximum flexibility to choose the underlying security mechanisms that enables security context negotiation.
[RFC2478] enables client and server to negotiate and choose such underlying security mechanisms on the fly.
To support such flexibility, DNS clients and servers SHOULD specify SPNEGO mech type in their GSS API calls.
At the same time, in order to guarantee interoperability between DNS clients and servers that support GSS TSIG it is required that  DNS servers specify SPNEGO mech type  GSS APIs called by DNS client support Kerberos v5  GSS APIs called by DNS server support SPNEGO [RFC2478] and Kerberos v5.
In addition to these, GSS APIs used by DNS client and server MAY also support other underlying security mechanisms.
