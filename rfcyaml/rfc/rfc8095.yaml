- title: __initial_text__
  contents:
  - "                          Services Provided by\n       IETF Transport Protocols\
    \ and Congestion Control Mechanisms\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes, surveys, and classifies the protocol\n\
    \   mechanisms provided by existing IETF protocols, as background for\n   determining\
    \ a common set of transport services.  It examines the\n   Transmission Control\
    \ Protocol (TCP), Multipath TCP, the Stream\n   Control Transmission Protocol\
    \ (SCTP), the User Datagram Protocol\n   (UDP), UDP-Lite, the Datagram Congestion\
    \ Control Protocol (DCCP), the\n   Internet Control Message Protocol (ICMP), the\
    \ Real-Time Transport\n   Protocol (RTP), File Delivery over Unidirectional Transport\
    \ /\n   Asynchronous Layered Coding (FLUTE/ALC) for Reliable Multicast, NACK-\n\
    \   Oriented Reliable Multicast (NORM), Transport Layer Security (TLS),\n   Datagram\
    \ TLS (DTLS), and the Hypertext Transport Protocol (HTTP),\n   when HTTP is used\
    \ as a pseudotransport.  This survey provides\n   background for the definition\
    \ of transport services within the TAPS\n   working group.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc8095.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Overview of Transport Features .............................4\n  \
    \ 2. Terminology .....................................................5\n   3.\
    \ Existing Transport Protocols ....................................6\n      3.1.\
    \ Transport Control Protocol (TCP) ...........................6\n           3.1.1.\
    \ Protocol Description ................................6\n           3.1.2. Interface\
    \ Description ...............................8\n           3.1.3. Transport Features\
    \ ..................................9\n      3.2. Multipath TCP (MPTCP) .....................................10\n\
    \           3.2.1. Protocol Description ...............................10\n  \
    \         3.2.2. Interface Description ..............................10\n    \
    \       3.2.3. Transport Features .................................11\n      3.3.\
    \ User Datagram Protocol (UDP) ..............................11\n           3.3.1.\
    \ Protocol Description ...............................11\n           3.3.2. Interface\
    \ Description ..............................12\n           3.3.3. Transport Features\
    \ .................................13\n      3.4. Lightweight User Datagram Protocol\
    \ (UDP-Lite) .............13\n           3.4.1. Protocol Description ...............................13\n\
    \           3.4.2. Interface Description ..............................14\n  \
    \         3.4.3. Transport Features .................................14\n    \
    \  3.5. Stream Control Transmission Protocol (SCTP) ...............14\n      \
    \     3.5.1. Protocol Description ...............................15\n        \
    \   3.5.2. Interface Description ..............................17\n          \
    \ 3.5.3. Transport Features .................................19\n      3.6. Datagram\
    \ Congestion Control Protocol (DCCP) ...............20\n           3.6.1. Protocol\
    \ Description ...............................21\n           3.6.2. Interface Description\
    \ ..............................22\n           3.6.3. Transport Features .................................22\n\
    \      3.7. Transport Layer Security (TLS) and Datagram TLS\n           (DTLS)\
    \ as a Pseudotransport ...............................23\n           3.7.1. Protocol\
    \ Description ...............................23\n           3.7.2. Interface Description\
    \ ..............................24\n           3.7.3. Transport Features .................................25\n\
    \      3.8. Real-Time Transport Protocol (RTP) ........................26\n  \
    \         3.8.1. Protocol Description ...............................26\n    \
    \       3.8.2. Interface Description ..............................27\n      \
    \     3.8.3. Transport Features .................................27\n      3.9.\
    \ Hypertext Transport Protocol (HTTP) over TCP as a\n           Pseudotransport\
    \ ...........................................28\n           3.9.1. Protocol Description\
    \ ...............................28\n           3.9.2. Interface Description ..............................29\n\
    \           3.9.3. Transport Features .................................30\n  \
    \    3.10. File Delivery over Unidirectional Transport /\n            Asynchronous\
    \ Layered Coding (FLUTE/ALC) for\n            Reliable Multicast .......................................31\n\
    \           3.10.1. Protocol Description ..............................31\n  \
    \         3.10.2. Interface Description .............................33\n    \
    \       3.10.3. Transport Features ................................33\n      3.11.\
    \ NACK-Oriented Reliable Multicast (NORM) ..................34\n           3.11.1.\
    \ Protocol Description ..............................34\n           3.11.2. Interface\
    \ Description .............................35\n           3.11.3. Transport Features\
    \ ................................36\n      3.12. Internet Control Message Protocol\
    \ (ICMP) .................36\n           3.12.1. Protocol Description ..............................37\n\
    \           3.12.2. Interface Description .............................37\n  \
    \         3.12.3. Transport Features ................................38\n   4.\
    \ Congestion Control .............................................38\n   5. Transport\
    \ Features .............................................39\n   6. IANA Considerations\
    \ ............................................42\n   7. Security Considerations\
    \ ........................................42\n   8. Informative References .........................................42\n\
    \   Acknowledgments ...................................................53\n  \
    \ Contributors ......................................................53\n   Authors'\
    \ Addresses ................................................54\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Internet applications make use of the services provided\
    \ by a\n   transport protocol, such as TCP (a reliable, in-order stream\n   protocol)\
    \ or UDP (an unreliable datagram protocol).  We use the term\n   \"transport service\"\
    \ to mean the end-to-end service provided to an\n   application by the transport\
    \ layer.  That service can only be\n   provided correctly if information about\
    \ the intended usage is\n   supplied from the application.  The application may\
    \ determine this\n   information at design time, compile time, or run time, and\
    \ may\n   include guidance on whether a feature is required, a preference by\n\
    \   the application, or something in between.  Examples of features of\n   transport\
    \ services are reliable delivery, ordered delivery, content\n   privacy to in-path\
    \ devices, and integrity protection.\n   The IETF has defined a wide variety of\
    \ transport protocols beyond TCP\n   and UDP, including SCTP, DCCP, MPTCP, and\
    \ UDP-Lite.  Transport\n   services may be provided directly by these transport\
    \ protocols or\n   layered on top of them using protocols such as WebSockets (which\
    \ runs\n   over TCP), RTP (over TCP or UDP) or WebRTC data channels (which run\n\
    \   over SCTP over DTLS over UDP or TCP).  Services built on top of UDP\n   or\
    \ UDP-Lite typically also need to specify additional mechanisms,\n   including\
    \ a congestion control mechanism (such as NewReno [RFC6582],\n   TCP-Friendly\
    \ Rate Control (TFRC) [RFC5348], or Low Extra Delay\n   Background Transport (LEDBAT)\
    \ [RFC6817]).  This extends the set of\n   available transport services beyond\
    \ those provided to applications by\n   TCP and UDP.\n   The transport protocols\
    \ described in this document provide a basis\n   for the definition of transport\
    \ services provided by common\n   protocols, as background for the TAPS working\
    \ group.  The protocols\n   listed here were chosen to help expose as many potential\
    \ transport\n   services as possible and are not meant to be a comprehensive survey\n\
    \   or classification of all transport protocols.\n"
- title: 1.1.  Overview of Transport Features
  contents:
  - "1.1.  Overview of Transport Features\n   Transport protocols can be differentiated\
    \ by the features of the\n   services they provide.\n   Some of these provided\
    \ features are closely related to basic control\n   function that a protocol needs\
    \ to work over a network path, such as\n   addressing.  The number of participants\
    \ in a given association also\n   determines its applicability: a connection can\
    \ be between endpoints\n   (unicast), to one of multiple endpoints (anycast),\
    \ or simultaneously\n   to multiple endpoints (multicast).  Unicast protocols\
    \ usually support\n   bidirectional communication, while multicast is generally\n\
    \   unidirectional.  Another feature is whether a transport requires a\n   control\
    \ exchange across the network at setup (e.g., TCP) or whether\n   it is connectionless\
    \ (e.g., UDP).\n   For packet delivery itself, reliability and integrity protection,\n\
    \   ordering, and framing are basic features.  However, these features\n   are\
    \ implemented with different levels of assurance in different\n   protocols. \
    \ As an example, a transport service may provide full\n   reliability, with detection\
    \ of loss and retransmission (e.g., TCP).\n   SCTP offers a message-based service\
    \ that can provide full or partial\n   reliability and allows the protocol to\
    \ minimize the head-of-line\n   blocking due to the support of ordered and unordered\
    \ message delivery\n   within multiple streams.  UDP-Lite and DCCP can provide\
    \ partial\n   integrity protection to enable corruption tolerance.\n   Usually,\
    \ a protocol has been designed to support one specific type of\n   delivery/framing:\
    \ either data needs to be divided into transmission\n   units based on network\
    \ packets (datagram service) or a data stream is\n   segmented and re-combined\
    \ across multiple packets (stream service).\n   Whole objects such as files are\
    \ handled accordingly.  This decision\n   strongly influences the interface that\
    \ is provided to the upper\n   layer.\n   In addition, transport protocols offer\
    \ a certain support for\n   transmission control.  For example, a transport service\
    \ can provide\n   flow control to allow a receiver to regulate the transmission\
    \ rate of\n   a sender.  Further, a transport service can provide congestion\n\
    \   control (see Section 4).  As an example, TCP and SCTP provide\n   congestion\
    \ control for use in the Internet, whereas UDP leaves this\n   function to the\
    \ upper-layer protocol that uses UDP.\n   Security features are often provided\
    \ independently of the transport\n   protocol, via Transport Layer Security (TLS)\
    \ (see Section 3.7) or by\n   the application-layer protocol itself.  The security\
    \ properties TLS\n   provides to the application (such as confidentiality, integrity,\
    \ and\n   authenticity) are also features of the transport layer, even though\n\
    \   they are often presently implemented in a separate protocol.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The following terms are used throughout this document and\
    \ in\n   subsequent documents produced by the TAPS working group that describe\n\
    \   the composition and decomposition of transport services.\n   Transport Feature:\
    \  a specific end-to-end feature that the transport\n      layer provides to an\
    \ application.  Examples include\n      confidentiality, reliable delivery, ordered\
    \ delivery, message-\n      versus-stream orientation, etc.\n   Transport Service:\
    \  a set of transport features, without an\n      association to any given framing\
    \ protocol, that provides a\n      complete service to an application.\n   Transport\
    \ Protocol:  an implementation that provides one or more\n      different transport\
    \ services using a specific framing and header\n      format on the wire.\n  \
    \ Application:  an entity that uses the transport layer for end-to-end\n     \
    \ delivery data across the network (this may also be an upper-layer\n      protocol\
    \ or tunnel encapsulation).\n"
- title: 3.  Existing Transport Protocols
  contents:
  - "3.  Existing Transport Protocols\n   This section provides a list of known IETF\
    \ transport protocols and\n   transport protocol frameworks.  It does not make\
    \ an assessment about\n   whether specific implementations of protocols are fully\
    \ compliant to\n   current IETF specifications.\n"
- title: 3.1.  Transport Control Protocol (TCP)
  contents:
  - "3.1.  Transport Control Protocol (TCP)\n   TCP is an IETF Standards Track transport\
    \ protocol.  [RFC793]\n   introduces TCP as follows:\n      The Transmission Control\
    \ Protocol (TCP) is intended for use as a\n      highly reliable host-to-host\
    \ protocol between hosts in packet-\n      switched computer communication networks,\
    \ and in interconnected\n      systems of such networks.\n   Since its introduction,\
    \ TCP has become the default connection-\n   oriented, stream-based transport\
    \ protocol in the Internet.  It is\n   widely implemented by endpoints and widely\
    \ used by common\n   applications.\n"
- title: 3.1.1.  Protocol Description
  contents:
  - "3.1.1.  Protocol Description\n   TCP is a connection-oriented protocol that provides\
    \ a three-way\n   handshake to allow a client and server to set up a connection\
    \ and\n   negotiate features and provides mechanisms for orderly completion and\n\
    \   immediate teardown of a connection [RFC793] [TCP-SPEC].  TCP is\n   defined\
    \ by a family of RFCs (see [RFC7414]).\n   TCP provides multiplexing to multiple\
    \ sockets on each host using port\n   numbers.  A similar approach is adopted\
    \ by other IETF-defined\n   transports.  An active TCP session is identified by\
    \ its four-tuple of\n   local and remote IP addresses and local and remote port\
    \ numbers.  The\n   destination port during connection setup is often used to\
    \ indicate\n   the requested service.\n   TCP partitions a continuous stream of\
    \ bytes into segments, sized to\n   fit in IP packets based on a negotiated maximum\
    \ segment size and\n   further constrained by the effective Maximum Transmission\
    \ Unit (MTU)\n   from Path MTU Discovery (PMTUD).  ICMP-based PMTUD [RFC1191]\n\
    \   [RFC1981] as well as Packetization Layer PMTUD (PLPMTUD) [RFC4821]\n   have\
    \ been defined by the IETF.\n   Each byte in the stream is identified by a sequence\
    \ number.  The\n   sequence number is used to order segments on receipt, to identify\n\
    \   segments in acknowledgments, and to detect unacknowledged segments\n   for\
    \ retransmission.  This is the basis of the reliable, ordered\n   delivery of\
    \ data in a TCP stream.  TCP Selective Acknowledgment\n   (SACK) [RFC2018] extends\
    \ this mechanism by making it possible to\n   provide earlier identification of\
    \ which segments are missing,\n   allowing faster retransmission.  SACK-based\
    \ methods (e.g., Duplicate\n   Selective ACK) can also result in less spurious\
    \ retransmission.\n   Receiver flow control is provided by a sliding window, which\
    \ limits\n   the amount of unacknowledged data that can be outstanding at a given\n\
    \   time.  The window scale option [RFC7323] allows a receiver to use\n   windows\
    \ greater than 64 KB.\n   All TCP senders provide congestion control, such as\
    \ that described in\n   [RFC5681].  TCP uses a sequence number with a sliding\
    \ receiver window\n   for flow control.  The TCP congestion control mechanism\
    \ also utilizes\n   this TCP sequence number to manage a separate congestion window\n\
    \   [RFC5681].  The sending window at a given point in time is the\n   minimum\
    \ of the receiver window and the congestion window.  The\n   congestion window\
    \ is increased in the absence of congestion and\n   decreased if congestion is\
    \ detected.  Often, loss is implicitly\n   handled as a congestion indication,\
    \ which is detected in TCP (also as\n   input for retransmission handling) based\
    \ on two mechanisms: a\n   retransmission timer with exponential back-off or the\
    \ reception of\n   three acknowledgments for the same segment, so called \"duplicated\n\
    \   ACKs\" (fast retransmit).  In addition, Explicit Congestion\n   Notification\
    \ (ECN) [RFC3168] can be used in TCP and, if supported by\n   both endpoints,\
    \ allows a network node to signal congestion without\n   inducing loss.  Alternatively,\
    \ a delay-based congestion control\n   scheme that reacts to changes in delay\
    \ as an early indication of\n   congestion can be used in TCP.  This is further\
    \ described in\n   Section 4.  Examples of different kinds of congestion control\
    \ schemes\n   are provided in Section 4.\n   TCP protocol instances can be extended\
    \ (see [RFC7414]).  Some\n   protocol features may also be tuned to optimize for\
    \ a specific\n   deployment scenario.  Some features are sender-side only, requiring\n\
    \   no negotiation with the receiver; some are receiver-side only; and\n   some\
    \ are explicitly negotiated during connection setup.\n   TCP may buffer data,\
    \ e.g., to optimize processing or capacity usage.\n   TCP therefore provides mechanisms\
    \ to control this, including an\n   optional \"PUSH\" function [RFC793] that explicitly\
    \ requests the\n   transport service not to delay data.  By default, TCP segment\n\
    \   partitioning uses Nagle's algorithm [TCP-SPEC] to buffer data at the\n   sender\
    \ into large segments, potentially incurring sender-side\n   buffering delay;\
    \ this algorithm can be disabled by the sender to\n   transmit more immediately,\
    \ e.g., to reduce latency for interactive\n   sessions.\n   TCP provides an \"\
    urgent data\" function for limited out-of-order\n   delivery of the data.  This\
    \ function is deprecated [RFC6093].\n   A TCP Reset (RST) control message may\
    \ be used to force a TCP endpoint\n   to close a session [RFC793], aborting the\
    \ connection.\n   A mandatory checksum provides a basic integrity check against\n\
    \   misdelivery and data corruption over the entire packet.  Applications\n  \
    \ that require end-to-end integrity of data are recommended to include\n   a stronger\
    \ integrity check of their payload data.  The TCP checksum\n   [RFC1071] [RFC2460]\
    \ does not support partial payload protection (as\n   in DCCP/UDP-Lite).\n   TCP\
    \ supports only unicast connections.\n"
- title: 3.1.2.  Interface Description
  contents:
  - "3.1.2.  Interface Description\n   The User/TCP Interface defined in [RFC793]\
    \ provides six user\n   commands: Open, Send, Receive, Close, Status, and Abort.\
    \  This\n   interface does not describe configuration of TCP options or\n   parameters\
    \ aside from the use of the PUSH and URGENT flags.\n   [RFC1122] describes extensions\
    \ of the TCP/application-layer interface\n   for:\n   o  reporting soft errors\
    \ such as reception of ICMP error messages,\n      extensive retransmission, or\
    \ urgent pointer advance,\n   o  providing a possibility to specify the Differentiated\
    \ Services\n      Code Point (DSCP) [RFC3260] (formerly, the Type-of-Service (TOS))\n\
    \      for segments,\n   o  providing a flush call to empty the TCP send queue,\
    \ and\n   o  multihoming support.\n   In API implementations derived from the\
    \ BSD Sockets API, TCP sockets\n   are created using the \"SOCK_STREAM\" socket\
    \ type as described in the\n   IEEE Portable Operating System Interface (POSIX)\
    \ Base Specifications\n   [POSIX].  The features used by a protocol instance may\
    \ be set and\n   tuned via this API.  There are currently no documents in the\
    \ RFC\n   Series that describe this interface.\n"
- title: 3.1.3.  Transport Features
  contents:
  - "3.1.3.  Transport Features\n   The transport features provided by TCP are:\n\
    \   o  connection-oriented transport with feature negotiation and\n      application-to-port\
    \ mapping (implemented using SYN segments and\n      the TCP Option field to negotiate\
    \ features),\n   o  unicast transport (though anycast TCP is implemented, at risk\
    \ of\n      instability due to rerouting),\n   o  port multiplexing,\n   o  unidirectional\
    \ or bidirectional communication,\n   o  stream-oriented delivery in a single\
    \ stream,\n   o  fully reliable delivery (implemented using ACKs sent from the\n\
    \      receiver to confirm delivery),\n   o  error detection (implemented using\
    \ a segment checksum to verify\n      delivery to the correct endpoint and integrity\
    \ of the data and\n      options),\n   o  segmentation,\n   o  data bundling (optional;\
    \ uses Nagle's algorithm to coalesce data\n      sent within the same RTT into\
    \ full-sized segments),\n   o  flow control (implemented using a window-based\
    \ mechanism where the\n      receiver advertises the window that it is willing\
    \ to buffer), and\n   o  congestion control (usually implemented using a window-based\n\
    \      mechanism and four algorithms for different phases of the\n      transmission:\
    \ slow start, congestion avoidance, fast retransmit,\n      and fast recovery\
    \ [RFC5681]).\n"
- title: 3.2.  Multipath TCP (MPTCP)
  contents:
  - "3.2.  Multipath TCP (MPTCP)\n   Multipath TCP [RFC6824] is an extension for TCP\
    \ to support\n   multihoming for resilience, mobility, and load balancing.  It\
    \ is\n   designed to be as indistinguishable to middleboxes from non-multipath\n\
    \   TCP as possible.  It does so by establishing regular TCP flows\n   between\
    \ a pair of source/destination endpoints and multiplexing the\n   application's\
    \ stream over these flows.  Sub-flows can be started over\n   IPv4 or IPv6 for\
    \ the same session.\n"
- title: 3.2.1.  Protocol Description
  contents:
  - "3.2.1.  Protocol Description\n   MPTCP uses TCP options for its control plane.\
    \  They are used to\n   signal multipath capabilities, as well as to negotiate\
    \ data sequence\n   numbers, advertise other available IP addresses, and establish\
    \ new\n   sessions between pairs of endpoints.\n   By multiplexing one byte stream\
    \ over separate paths, MPTCP can\n   achieve a higher throughput than TCP in certain\
    \ situations.  However,\n   if coupled congestion control [RFC6356] is used, it\
    \ might limit this\n   benefit to maintain fairness to other flows at the bottleneck.\
    \  When\n   aggregating capacity over multiple paths, and depending on the way\n\
    \   packets are scheduled on each TCP subflow, additional delay and\n   higher\
    \ jitter might be observed before in-order delivery of data to\n   the applications.\n"
- title: 3.2.2.  Interface Description
  contents:
  - "3.2.2.  Interface Description\n   By default, MPTCP exposes the same interface\
    \ as TCP to the\n   application.  [RFC6897], however, describes a richer API for\
    \ MPTCP-\n   aware applications.\n   This Basic API describes how an application\
    \ can:\n   o  enable or disable MPTCP.\n   o  bind a socket to one or more selected\
    \ local endpoints.\n   o  query local and remote endpoint addresses.\n   o  get\
    \ a unique connection identifier (similar to an address-port\n      pair for TCP).\n\
    \   The document also recommends the use of extensions defined for SCTP\n   [RFC6458]\
    \ (see Section 3.5) to support multihoming for resilience and\n   mobility.\n"
- title: 3.2.3.  Transport Features
  contents:
  - "3.2.3.  Transport Features\n   As an extension to TCP, MPTCP provides mostly\
    \ the same features.  By\n   establishing multiple sessions between available\
    \ endpoints, it can\n   additionally provide soft failover solutions in the case\
    \ that one of\n   the paths becomes unusable.\n   Therefore, the transport features\
    \ provided by MPTCP in addition to\n   TCP are:\n   o  multihoming for load balancing,\
    \ with endpoint multiplexing of a\n      single byte stream, using either coupled\
    \ congestion control or\n      throughput maximization,\n   o  address family\
    \ multiplexing (using IPv4 and IPv6 for the same\n      session), and\n   o  resilience\
    \ to network failure and/or handover.\n"
- title: 3.3.  User Datagram Protocol (UDP)
  contents:
  - "3.3.  User Datagram Protocol (UDP)\n   The User Datagram Protocol (UDP) [RFC768]\
    \ [RFC2460] is an IETF\n   Standards Track transport protocol.  It provides a\
    \ unidirectional\n   datagram protocol that preserves message boundaries.  It\
    \ provides no\n   error correction, congestion control, or flow control.  It can\
    \ be\n   used to send broadcast datagrams (IPv4) or multicast datagrams (IPv4\n\
    \   and IPv6), in addition to unicast and anycast datagrams.  IETF\n   guidance\
    \ on the use of UDP is provided in [RFC8085].  UDP is widely\n   implemented and\
    \ widely used by common applications, including DNS.\n"
- title: 3.3.1.  Protocol Description
  contents:
  - "3.3.1.  Protocol Description\n   UDP is a connectionless protocol that maintains\
    \ message boundaries,\n   with no connection setup or feature negotiation.  The\
    \ protocol uses\n   independent messages, ordinarily called \"datagrams\".  It\
    \ provides\n   detection of payload errors and misdelivery of packets to an\n\
    \   unintended endpoint, both of which result in discard of received\n   datagrams,\
    \ with no indication to the user of the service.\n   It is possible to create\
    \ IPv4 UDP datagrams with no checksum, and\n   while this is generally discouraged\
    \ [RFC1122] [RFC8085], certain\n   special cases permit this use.  These datagrams\
    \ rely on the IPv4\n   header checksum to protect from misdelivery to an unintended\n\
    \   endpoint.  IPv6 does not permit UDP datagrams with no checksum,\n   although\
    \ in certain cases [RFC6936], this rule may be relaxed\n   [RFC6935].\n   UDP\
    \ does not provide reliability and does not provide retransmission.\n   Messages\
    \ may be reordered, lost, or duplicated in transit.  Note that\n   due to the\
    \ relatively weak form of checksum used by UDP, applications\n   that require\
    \ end-to-end integrity of data are recommended to include\n   a stronger integrity\
    \ check of their payload data.\n   Because UDP provides no flow control, a receiving\
    \ application that is\n   unable to run sufficiently fast, or frequently, may\
    \ miss messages.\n   The lack of congestion handling implies UDP traffic may experience\n\
    \   loss when using an overloaded path and may cause the loss of messages\n  \
    \ from other protocols (e.g., TCP) when sharing the same network path.\n   On\
    \ transmission, UDP encapsulates each datagram into a single IP\n   packet or\
    \ several IP packet fragments.  This allows a datagram to be\n   larger than the\
    \ effective path MTU.  Fragments are reassembled before\n   delivery to the UDP\
    \ receiver, making this transparent to the user of\n   the transport service.\
    \  When jumbograms are supported, larger\n   messages may be sent without performing\
    \ fragmentation.\n   UDP on its own does not provide support for segmentation,\
    \ receiver\n   flow control, congestion control, PMTUD/PLPMTUD, or ECN.\n   Applications\
    \ that require these features need to provide them on\n   their own or use a protocol\
    \ over UDP that provides them [RFC8085].\n"
- title: 3.3.2.  Interface Description
  contents:
  - "3.3.2.  Interface Description\n   [RFC768] describes basic requirements for an\
    \ API for UDP.  Guidance\n   on the use of common APIs is provided in [RFC8085].\n\
    \   A UDP endpoint consists of a tuple of (IP address, port number).\n   De-multiplexing\
    \ using multiple abstract endpoints (sockets) on the\n   same IP address is supported.\
    \  The same socket may be used by a\n   single server to interact with multiple\
    \ clients.  (Note: This\n   behavior differs from TCP, which uses a pair of tuples\
    \ to identify a\n   connection).  Multiple server instances (processes) that bind\
    \ to the\n   same socket can cooperate to service multiple clients.  The socket\n\
    \   implementation arranges to not duplicate the same received unicast\n   message\
    \ to multiple server processes.\n   Many operating systems also allow a UDP socket\
    \ to be \"connected\",\n   i.e., to bind a UDP socket to a specific (remote) UDP\
    \ endpoint.\n   Unlike TCP's connect primitive, for UDP, this is only a local\n\
    \   operation that serves to simplify the local send/receive functions\n   and\
    \ to filter the traffic for the specified addresses and ports\n   [RFC8085].\n"
- title: 3.3.3.  Transport Features
  contents:
  - "3.3.3.  Transport Features\n   The transport features provided by UDP are:\n\
    \   o  unicast, multicast, anycast, or IPv4 broadcast transport,\n   o  port multiplexing\
    \ (where a receiving port can be configured to\n      receive datagrams from multiple\
    \ senders),\n   o  message-oriented delivery,\n   o  unidirectional or bidirectional\
    \ communication where the\n      transmissions in each direction are independent,\n\
    \   o  non-reliable delivery,\n   o  unordered delivery, and\n   o  error detection\
    \ (implemented using a segment checksum to verify\n      delivery to the correct\
    \ endpoint and integrity of the data;\n      optional for IPv4 and optional under\
    \ specific conditions for IPv6\n      where all or none of the payload data is\
    \ protected).\n"
- title: 3.4.  Lightweight User Datagram Protocol (UDP-Lite)
  contents:
  - "3.4.  Lightweight User Datagram Protocol (UDP-Lite)\n   The Lightweight User\
    \ Datagram Protocol (UDP-Lite) [RFC3828] is an\n   IETF Standards Track transport\
    \ protocol.  It provides a\n   unidirectional, datagram protocol that preserves\
    \ message boundaries.\n   IETF guidance on the use of UDP-Lite is provided in\
    \ [RFC8085].  A\n   UDP-Lite service may support IPv4 broadcast, multicast, anycast,\
    \ and\n   unicast, as well as IPv6 multicast, anycast, and unicast.\n   Examples\
    \ of use include a class of applications that can derive\n   benefit from having\
    \ partially damaged payloads delivered rather than\n   discarded.  One use is\
    \ to provide header integrity checks but allow\n   delivery of corrupted payloads\
    \ to error-tolerant applications or to\n   applications that use some other mechanism\
    \ to provide payload\n   integrity (see [RFC6936]).\n"
- title: 3.4.1.  Protocol Description
  contents:
  - "3.4.1.  Protocol Description\n   Like UDP, UDP-Lite is a connectionless datagram\
    \ protocol, with no\n   connection setup or feature negotiation.  It changes the\
    \ semantics of\n   the UDP Payload Length field to that of a Checksum Coverage\
    \ Length\n   field and is identified by a different IP protocol/next-header value.\n\
    \   The Checksum Coverage Length field specifies the intended checksum\n   coverage,\
    \ with the remaining unprotected part of the payload called\n   the \"error-insensitive\
    \ part\".  Therefore, applications using UDP-Lite\n   cannot make assumptions\
    \ regarding the correctness of the data\n   received in the insensitive part of\
    \ the UDP-Lite payload.\n   Otherwise, UDP-Lite is semantically identical to UDP.\
    \  In the same\n   way as for UDP, mechanisms for receiver flow control, congestion\n\
    \   control, PMTU or PLPMTU discovery, support for ECN, etc., need to be\n   provided\
    \ by upper-layer protocols [RFC8085].\n"
- title: 3.4.2.  Interface Description
  contents:
  - "3.4.2.  Interface Description\n   There is no API currently specified in the\
    \ RFC Series, but guidance\n   on use of common APIs is provided in [RFC8085].\n\
    \   The interface of UDP-Lite differs from that of UDP by the addition of\n  \
    \ a single (socket) option that communicates a checksum coverage length\n   value.\
    \  The checksum coverage may also be made visible to the\n   application via the\
    \ UDP-Lite MIB module [RFC5097].\n"
- title: 3.4.3.  Transport Features
  contents:
  - "3.4.3.  Transport Features\n   The transport features provided by UDP-Lite are:\n\
    \   o  unicast, multicast, anycast, or IPv4 broadcast transport (same as\n   \
    \   for UDP),\n   o  port multiplexing (same as for UDP),\n   o  message-oriented\
    \ delivery (same as for UDP),\n   o  unidirectional or bidirectional communication\
    \ where the\n      transmissions in each direction are independent (same as for\
    \ UDP),\n   o  non-reliable delivery (same as for UDP),\n   o  non-ordered delivery\
    \ (same as for UDP), and\n   o  partial or full payload error detection (where\
    \ the Checksum\n      Coverage field indicates the size of the payload data covered\
    \ by\n      the checksum).\n"
- title: 3.5.  Stream Control Transmission Protocol (SCTP)
  contents:
  - "3.5.  Stream Control Transmission Protocol (SCTP)\n   SCTP is a message-oriented\
    \ IETF Standards Track transport protocol.\n   The base protocol is specified\
    \ in [RFC4960].  It supports multihoming\n   and path failover to provide resilience\
    \ to path failures.  An SCTP\n   association has multiple streams in each direction,\
    \ providing\n   in-sequence delivery of user messages within each stream.  This\n\
    \   allows it to minimize head-of-line blocking.  SCTP supports multiple\n   stream-\
    \ scheduling schemes controlling stream multiplexing, including\n   priority and\
    \ fair weighting schemes.\n   SCTP was originally developed for transporting telephony\
    \ signaling\n   messages and is deployed in telephony signaling networks, especially\n\
    \   in mobile telephony networks.  It can also be used for other\n   services,\
    \ for example, in the WebRTC framework for data channels.\n"
- title: 3.5.1.  Protocol Description
  contents:
  - "3.5.1.  Protocol Description\n   SCTP is a connection-oriented protocol using\
    \ a four-way handshake to\n   establish an SCTP association and a three-way message\
    \ exchange to\n   gracefully shut it down.  It uses the same port number concept\
    \ as\n   DCCP, TCP, UDP, and UDP-Lite.  SCTP only supports unicast.\n   SCTP uses\
    \ the 32-bit CRC32c for protecting SCTP packets against bit\n   errors and misdelivery\
    \ of packets to an unintended endpoint.  This is\n   stronger than the 16-bit\
    \ checksums used by TCP or UDP.  However,\n   partial payload checksum coverage\
    \ as provided by DCCP or UDP-Lite is\n   not supported.\n   SCTP has been designed\
    \ with extensibility in mind.  A common header\n   is followed by a sequence of\
    \ chunks.  [RFC4960] defines how a\n   receiver processes chunks with an unknown\
    \ chunk type.  The support of\n   extensions can be negotiated during the SCTP\
    \ handshake.  Currently\n   defined extensions include mechanisms for dynamic\
    \ reconfiguration of\n   streams [RFC6525] and IP addresses [RFC5061].  Furthermore,\
    \ the\n   extension specified in [RFC3758] introduces the concept of partial\n\
    \   reliability for user messages.\n   SCTP provides a message-oriented service.\
    \  Multiple small user\n   messages can be bundled into a single SCTP packet to\
    \ improve\n   efficiency.  For example, this bundling may be done by delaying\
    \ user\n   messages at the sender, similar to Nagle's algorithm used by TCP.\n\
    \   User messages that would result in IP packets larger than the MTU\n   will\
    \ be fragmented at the sender and reassembled at the receiver.\n   There is no\
    \ protocol limit on the user message size.  For MTU\n   discovery, the same mechanism\
    \ as for TCP can be used [RFC1981]\n   [RFC4821], as well as utilization of probe\
    \ packets with padding\n   chunks, as defined in [RFC4820].\n   [RFC4960] specifies\
    \ TCP-friendly congestion control to protect the\n   network against overload.\
    \  SCTP also uses sliding window flow control\n   to protect receivers against\
    \ overflow.  Similar to TCP, SCTP also\n   supports delaying acknowledgments.\
    \  [RFC7053] provides a way for the\n   sender of user messages to request immediate\
    \ sending of the\n   corresponding acknowledgments.\n   Each SCTP association\
    \ has between 1 and 65536 unidirectional streams\n   in each direction.  The number\
    \ of streams can be different in each\n   direction.  Every user message is sent\
    \ on a particular stream.  User\n   messages can be sent unordered or ordered\
    \ upon request by the upper\n   layer.  Unordered messages can be delivered as\
    \ soon as they are\n   completely received.  For user messages not requiring fragmentation,\n\
    \   this minimizes head-of-line blocking.  On the other hand, ordered\n   messages\
    \ sent on the same stream are delivered at the receiver in the\n   same order\
    \ as sent by the sender.\n   The base protocol defined in [RFC4960] does not allow\
    \ interleaving of\n   user messages.  Large messages on one stream can therefore\
    \ block the\n   sending of user messages on other streams.  [SCTP-NDATA] describes\
    \ a\n   method to overcome this limitation.  This document also specifies\n  \
    \ multiple algorithms for the sender-side selection of which streams to\n   send\
    \ data from, supporting a variety of scheduling algorithms\n   including priority-based\
    \ methods.  The stream reconfiguration\n   extension defined in [RFC6525] allows\
    \ streams to be reset during the\n   lifetime of an association and to increase\
    \ the number of streams, if\n   the number of streams negotiated in the SCTP handshake\
    \ becomes\n   insufficient.\n   Each user message sent is delivered to the receiver\
    \ or, in case of\n   excessive retransmissions, the association is terminated\
    \ in a\n   non-graceful way [RFC4960], similar to TCP behavior.  In addition to\n\
    \   this reliable transfer, the partial reliability extension [RFC3758]\n   allows\
    \ a sender to abandon user messages.  The application can\n   specify the policy\
    \ for abandoning user messages.\n   SCTP supports multihoming.  Each SCTP endpoint\
    \ uses a list of IP\n   addresses and a single port number.  These addresses can\
    \ be any\n   mixture of IPv4 and IPv6 addresses.  These addresses are negotiated\n\
    \   during the handshake, and the address reconfiguration extension\n   specified\
    \ in [RFC5061] in combination with [RFC4895] can be used to\n   change these addresses\
    \ in an authenticated way during the lifetime of\n   an SCTP association.  This\
    \ allows for transport-layer mobility.\n   Multiple addresses are used for improved\
    \ resilience.  If a remote\n   address becomes unreachable, the traffic is switched\
    \ over to a\n   reachable one, if one exists.\n   For securing user messages,\
    \ the use of TLS over SCTP has been\n   specified in [RFC3436].  However, this\
    \ solution does not support all\n   services provided by SCTP, such as unordered\
    \ delivery or partial\n   reliability.  Therefore, the use of DTLS over SCTP has\
    \ been specified\n   in [RFC6083] to overcome these limitations.  When using DTLS\
    \ over\n   SCTP, the application can use almost all services provided by SCTP.\n\
    \   [NAT-SUPP] defines methods for endpoints and middleboxes to provide\n   NAT\
    \ traversal for SCTP over IPv4.  For legacy NAT traversal,\n   [RFC6951] defines\
    \ the UDP encapsulation of SCTP packets.\n   Alternatively, SCTP packets can be\
    \ encapsulated in DTLS packets as\n   specified in [SCTP-DTLS-ENCAPS].  The latter\
    \ encapsulation is used\n   within the WebRTC [WEBRTC-TRANS] context.\n   An SCTP\
    \ ABORT chunk may be used to force a SCTP endpoint to close a\n   session [RFC4960],\
    \ aborting the connection.\n   SCTP has a well-defined API, described in the next\
    \ subsection.\n"
- title: 3.5.2.  Interface Description
  contents:
  - "3.5.2.  Interface Description\n   [RFC4960] defines an abstract API for the base\
    \ protocol.  This API\n   describes the following functions callable by the upper\
    \ layer of\n   SCTP: Initialize, Associate, Send, Receive, Receive Unsent Message,\n\
    \   Receive Unacknowledged Message, Shutdown, Abort, SetPrimary, Status,\n   Change\
    \ Heartbeat, Request Heartbeat, Get SRTT Report, Set Failure\n   Threshold, Set\
    \ Protocol Parameters, and Destroy.  The following\n   notifications are provided\
    \ by the SCTP stack to the upper layer:\n   COMMUNICATION UP, DATA ARRIVE, SHUTDOWN\
    \ COMPLETE, COMMUNICATION LOST,\n   COMMUNICATION ERROR, RESTART, SEND FAILURE,\
    \ and NETWORK STATUS\n   CHANGE.\n   An extension to the BSD Sockets API is defined\
    \ in [RFC6458] and\n   covers:\n   o  the base protocol defined in [RFC4960].\
    \  The API allows control\n      over local addresses and port numbers and the\
    \ primary path.\n      Furthermore, the application has fine control of parameters\
    \ like\n      retransmission thresholds, the path supervision, the delayed\n \
    \     acknowledgment timeout, and the fragmentation point.  The API\n      provides\
    \ a mechanism to allow the SCTP stack to notify the\n      application about events\
    \ if the application has requested them.\n      These notifications provide information\
    \ about status changes of\n      the association and each of the peer addresses.\
    \  In case of send\n      failures, including drop of messages sent unreliably,\
    \ the\n      application can also be notified, and user messages can be\n    \
    \  returned to the application.  When sending user messages, the\n      application\
    \ can indicate a stream id, a payload protocol\n      identifier, and an indication\
    \ of whether ordered delivery is\n      requested.  These parameters can also\
    \ be provided on message\n      reception.  Additionally, a context can be provided\
    \ when sending,\n      which can be used in case of send failures.  The sending\
    \ of\n      arbitrarily large user messages is supported.\n   o  the SCTP Partial\
    \ Reliability extension defined in [RFC3758] to\n      specify for a user message\
    \ the Partially Reliable SCTP (PR-SCTP)\n      policy and the policy-specific\
    \ parameter.  Examples of these\n      policies defined in [RFC3758] and [RFC7496]\
    \ are:\n      *  limiting the time a user message is dealt with by the sender.\n\
    \      *  limiting the number of retransmissions for each fragment of a\n    \
    \     user message.  If the number of retransmissions is limited to\n        \
    \ 0, one gets a service similar to UDP.\n      *  abandoning messages of lower\
    \ priority in case of a send buffer\n         shortage.\n   o  the SCTP Authentication\
    \ extension defined in [RFC4895] allowing\n      management of the shared keys\
    \ and allowing the HMAC to use and set\n      the chunk types (which are only\
    \ accepted in an authenticated way)\n      and get the list of chunks that are\
    \ accepted by the local and\n      remote endpoints in an authenticated way.\n\
    \   o  the SCTP Dynamic Address Reconfiguration extension defined in\n      [RFC5061].\
    \  It allows the manual addition and deletion of local\n      addresses for SCTP\
    \ associations, as well as the enabling of\n      automatic address addition and\
    \ deletion.  Furthermore, the peer\n      can be given a hint for choosing its\
    \ primary path.\n   A BSD Sockets API extension has been defined in the documents\
    \ that\n   specify the following SCTP extensions:\n   o  the SCTP Stream Reconfiguration\
    \ extension defined in [RFC6525].\n      The API allows triggering of the reset\
    \ operation for incoming and\n      outgoing streams and the whole association.\
    \  It also provides a\n      way to notify the association about the corresponding\
    \ events.\n      Furthermore, the application can increase the number of streams.\n\
    \   o  the UDP Encapsulation of SCTP packets extension defined in\n      [RFC6951].\
    \  The API allows the management of the remote UDP\n      encapsulation port.\n\
    \   o  the SCTP SACK-IMMEDIATELY extension defined in [RFC7053].  The API\n  \
    \    allows the sender of a user message to request the receiver to\n      send\
    \ the corresponding acknowledgment immediately.\n   o  the additional PR-SCTP\
    \ policies defined in [RFC7496].  The API\n      allows enabling/disabling the\
    \ PR-SCTP extension, choosing the\n      PR-SCTP policies defined in the document,\
    \ and providing\n      statistical information about abandoned messages.\n   Future\
    \ documents describing SCTP extensions are expected to describe\n   the corresponding\
    \ BSD Sockets API extension in a \"Socket API\n   Considerations\" section.\n\
    \   The SCTP Socket API supports two kinds of sockets:\n   o  one-to-one style\
    \ sockets (by using the socket type \"SOCK_STREAM\").\n   o  one-to-many style\
    \ socket (by using the socket type\n      \"SOCK_SEQPACKET\").\n   One-to-one\
    \ style sockets are similar to TCP sockets; there is a 1:1\n   relationship between\
    \ the sockets and the SCTP associations (except\n   for listening sockets).  One-to-many\
    \ style SCTP sockets are similar\n   to unconnected UDP sockets, where there is\
    \ a 1:n relationship between\n   the sockets and the SCTP associations.\n   The\
    \ SCTP stack can provide information to the applications about\n   state changes\
    \ of the individual paths and the association whenever\n   they occur.  These\
    \ events are delivered similarly to user messages\n   but are specifically marked\
    \ as notifications.\n   New functions have been introduced to support the use\
    \ of multiple\n   local and remote addresses.  Additional SCTP-specific send and\n\
    \   receive calls have been defined to permit SCTP-specific information\n   to\
    \ be sent without using ancillary data in the form of additional\n   Control Message\
    \ (cmsg) calls.  These functions provide support for\n   detecting partial delivery\
    \ of user messages and notifications.\n   The SCTP Socket API allows a fine-grained\
    \ control of the protocol\n   behavior through an extensive set of socket options.\n\
    \   The SCTP kernel implementations of FreeBSD, Linux, and Solaris follow\n  \
    \ mostly the specified extension to the BSD Sockets API for the base\n   protocol\
    \ and the corresponding supported protocol extensions.\n"
- title: 3.5.3.  Transport Features
  contents:
  - "3.5.3.  Transport Features\n   The transport features provided by SCTP are:\n\
    \   o  connection-oriented transport with feature negotiation and\n      application-to-port\
    \ mapping,\n   o  unicast transport,\n   o  port multiplexing,\n   o  unidirectional\
    \ or bidirectional communication,\n   o  message-oriented delivery with durable\
    \ message framing supporting\n      multiple concurrent streams,\n   o  fully\
    \ reliable, partially reliable, or unreliable delivery (based\n      on user-specified\
    \ policy to handle abandoned user messages) with\n      drop notification,\n \
    \  o  ordered and unordered delivery within a stream,\n   o  support for stream\
    \ scheduling prioritization,\n   o  segmentation,\n   o  user message bundling,\n\
    \   o  flow control using a window-based mechanism,\n   o  congestion control\
    \ using methods similar to TCP,\n   o  strong error detection (CRC32c), and\n\
    \   o  transport-layer multihoming for resilience and mobility.\n"
- title: 3.6.  Datagram Congestion Control Protocol (DCCP)
  contents:
  - "3.6.  Datagram Congestion Control Protocol (DCCP)\n   The Datagram Congestion\
    \ Control Protocol (DCCP) [RFC4340] is an IETF\n   Standards Track bidirectional\
    \ transport protocol that provides\n   unicast connections of congestion-controlled\
    \ messages without\n   providing reliability.\n   The DCCP Problem Statement [RFC4336]\
    \ describes the goals that DCCP\n   sought to address.  It is suitable for applications\
    \ that transfer\n   fairly large amounts of data and that can benefit from control\
    \ over\n   the trade-off between timeliness and reliability [RFC4336].\n   DCCP\
    \ offers low overhead, and many characteristics common to UDP, but\n   can avoid\
    \ \"re-inventing the wheel\" each time a new multimedia\n   application emerges.\
    \  Specifically, it includes core transport\n   functions (feature negotiation,\
    \ path state management, RTT\n   calculation, PMTUD, etc.): DCCP applications\
    \ select how they send\n   packets and, where suitable, choose common algorithms\
    \ to manage their\n   functions.  Examples of applications that can benefit from\
    \ such\n   transport services include interactive applications, streaming media,\n\
    \   or on-line games [RFC4336].\n"
- title: 3.6.1.  Protocol Description
  contents:
  - "3.6.1.  Protocol Description\n   DCCP is a connection-oriented datagram protocol\
    \ that provides a\n   three-way handshake to allow a client and server to set\
    \ up a\n   connection and provides mechanisms for orderly completion and\n   immediate\
    \ teardown of a connection.\n   A DCCP protocol instance can be extended [RFC4340]\
    \ and tuned using\n   additional features.  Some features are sender-side only,\
    \ requiring\n   no negotiation with the receiver; some are receiver-side only;\
    \ and\n   some are explicitly negotiated during connection setup.\n   DCCP uses\
    \ a Connect packet to initiate a session and permits each\n   endpoint to choose\
    \ the features it wishes to support.  Simultaneous\n   open [RFC5596], as in TCP,\
    \ can enable interoperability in the\n   presence of middleboxes.  The Connect\
    \ packet includes a Service Code\n   [RFC5595] that identifies the application\
    \ or protocol using DCCP,\n   providing middleboxes with information about the\
    \ intended use of a\n   connection.\n   The DCCP service is unicast-only.\n  \
    \ It provides multiplexing to multiple sockets at each endpoint using\n   port\
    \ numbers.  An active DCCP session is identified by its four-tuple\n   of local\
    \ and remote IP addresses and local and remote port numbers.\n   The protocol\
    \ segments data into messages that are typically sized to\n   fit in IP packets\
    \ but may be fragmented if they are smaller than the\n   maximum packet size.\
    \  A DCCP interface allows applications to request\n   fragmentation for packets\
    \ larger than PMTU, but not larger than the\n   maximum packet size allowed by\
    \ the current congestion control\n   mechanism (Congestion Control Maximum Packet\
    \ Size (CCMPS)) [RFC4340].\n   Each message is identified by a sequence number.\
    \  The sequence number\n   is used to identify segments in acknowledgments, to\
    \ detect\n   unacknowledged segments, to measure RTT, etc.  The protocol may\n\
    \   support unordered delivery of data and does not itself provide\n   retransmission.\
    \  DCCP supports reduced checksum coverage, a partial\n   payload protection mechanism\
    \ similar to UDP-Lite.  There is also a\n   Data Checksum option, which when enabled,\
    \ contains a strong Cyclic\n   Redundancy Check (CRC), to enable endpoints to\
    \ detect application\n   data corruption.\n   Receiver flow control is supported,\
    \ which limits the amount of\n   unacknowledged data that can be outstanding at\
    \ a given time.\n   A DCCP Reset packet may be used to force a DCCP endpoint to\
    \ close a\n   session [RFC4340], aborting the connection.\n   DCCP supports negotiation\
    \ of the congestion control profile between\n   endpoints, to provide plug-and-play\
    \ congestion control mechanisms.\n   Examples of specified profiles include \"\
    TCP-like\" [RFC4341], \"TCP-\n   friendly\" [RFC4342], and \"TCP-friendly for\
    \ small packets\" [RFC5622].\n   Additional mechanisms are recorded in an IANA\
    \ registry (see\n   <http://www.iana.org/assignments/dccp-parameters>).\n   A\
    \ lightweight UDP-based encapsulation (DCCP-UDP) has been defined\n   [RFC6773]\
    \ that permits DCCP to be used over paths where DCCP is not\n   natively supported.\
    \  Support for DCCP in NAPT/NATs is defined in\n   [RFC4340] and [RFC5595].  Upper-layer\
    \ protocols specified on top of\n   DCCP include DTLS [RFC5238], RTP [RFC5762],\
    \ and Interactive\n   Connectivity Establishment / Session Description Protocol\
    \ (ICE/SDP)\n   [RFC6773].\n"
- title: 3.6.2.  Interface Description
  contents:
  - "3.6.2.  Interface Description\n   Functions expected for a DCCP API include:\
    \ Open, Close, and\n   Management of the progress a DCCP connection.  The Open\
    \ function\n   provides feature negotiation, selection of an appropriate Congestion\n\
    \   Control Identifier (CCID) for congestion control, and other\n   parameters\
    \ associated with the DCCP connection.  A function allows an\n   application to\
    \ send DCCP datagrams, including setting the required\n   checksum coverage and\
    \ any required options.  (DCCP permits sending\n   datagrams with a zero-length\
    \ payload.)  A function allows reception\n   of data, including indicating if\
    \ the data was used or dropped.\n   Functions can also make the status of a connection\
    \ visible to an\n   application, including detection of the maximum packet size\
    \ and the\n   ability to perform flow control by detecting a slow receiver at\
    \ the\n   sender.\n   There is no API currently specified in the RFC Series.\n"
- title: 3.6.3.  Transport Features
  contents:
  - "3.6.3.  Transport Features\n   The transport features provided by DCCP are:\n\
    \   o  unicast transport,\n   o  connection-oriented communication with feature\
    \ negotiation and\n      application-to-port mapping,\n   o  signaling of application\
    \ class for middlebox support (implemented\n      using Service Codes),\n   o\
    \  port multiplexing,\n   o  unidirectional or bidirectional communication,\n\
    \   o  message-oriented delivery,\n   o  unreliable delivery with drop notification,\n\
    \   o  unordered delivery,\n   o  flow control (implemented using the slow receiver\
    \ function), and\n   o  partial and full payload error detection (with optional\
    \ strong\n      integrity check).\n"
- title: 3.7.  Transport Layer Security (TLS) and Datagram TLS (DTLS) as a
  contents:
  - "3.7.  Transport Layer Security (TLS) and Datagram TLS (DTLS) as a\n      Pseudotransport\n\
    \   Transport Layer Security (TLS) [RFC5246] and Datagram TLS (DTLS)\n   [RFC6347]\
    \ are IETF protocols that provide several security-related\n   features to applications.\
    \  TLS is designed to run on top of a\n   reliable streaming transport protocol\
    \ (usually TCP), while DTLS is\n   designed to run on top of a best-effort datagram\
    \ protocol (UDP or\n   DCCP [RFC5238]).  At the time of writing, the current version\
    \ of TLS\n   is 1.2, defined in [RFC5246]; work on TLS version is 1.3 [TLS-1.3]\n\
    \   nearing completion.  DTLS provides nearly identical functionality to\n   applications;\
    \ it is defined in [RFC6347] and its current version is\n   also 1.2.  The TLS\
    \ protocol evolved from the Secure Sockets Layer\n   (SSL) [RFC6101] protocols\
    \ developed in the mid-1990s to support\n   protection of HTTP traffic.\n   While\
    \ older versions of TLS and DTLS are still in use, they provide\n   weaker security\
    \ guarantees.  [RFC7457] outlines important attacks on\n   TLS and DTLS.  [RFC7525]\
    \ is a Best Current Practices (BCP) document\n   that describes secure configurations\
    \ for TLS and DTLS to counter\n   these attacks.  The recommendations are applicable\
    \ for the vast\n   majority of use cases.\n"
- title: 3.7.1.  Protocol Description
  contents:
  - "3.7.1.  Protocol Description\n   Both TLS and DTLS provide the same security\
    \ features and can thus be\n   discussed together.  The features they provide\
    \ are:\n   o  Confidentiality\n   o  Data integrity\n   o  Peer authentication\
    \ (optional)\n   o  Perfect forward secrecy (optional)\n   The authentication\
    \ of the peer entity can be omitted; a common web\n   use case is where the server\
    \ is authenticated and the client is not.\n   TLS also provides a completely anonymous\
    \ operation mode in which\n   neither peer's identity is authenticated.  It is\
    \ important to note\n   that TLS itself does not specify how a peering entity's\
    \ identity\n   should be interpreted.  For example, in the common use case of\n\
    \   authentication by means of an X.509 certificate, it is the\n   application's\
    \ decision whether the certificate of the peering entity\n   is acceptable for\
    \ authorization decisions.\n   Perfect forward secrecy, if enabled and supported\
    \ by the selected\n   algorithms, ensures that traffic encrypted and captured\
    \ during a\n   session at time t0 cannot be later decrypted at time t1 (t1 > t0),\n\
    \   even if the long-term secrets of the communicating peers are later\n   compromised.\n\
    \   As DTLS is generally used over an unreliable datagram transport such\n   as\
    \ UDP, applications will need to tolerate lost, reordered, or\n   duplicated datagrams.\
    \  Like TLS, DTLS conveys application data in a\n   sequence of independent records.\
    \  However, because records are mapped\n   to unreliable datagrams, there are\
    \ several features unique to DTLS\n   that are not applicable to TLS:\n   o  Record\
    \ replay detection (optional).\n   o  Record size negotiation (estimates of PMTU\
    \ and record size\n      expansion factor).\n   o  Conveyance of IP don't fragment\
    \ (DF) bit settings by application.\n   o  An anti-DoS stateless cookie mechanism\
    \ (optional).\n   Generally, DTLS follows the TLS design as closely as possible.\
    \  To\n   operate over datagrams, DTLS includes a sequence number and limited\n\
    \   forms of retransmission and fragmentation for its internal\n   operations.\
    \  The sequence number may be used for detecting replayed\n   information, according\
    \ to the windowing procedure described in\n   Section 4.1.2.6 of [RFC6347].  DTLS\
    \ forbids the use of stream\n   ciphers, which are essentially incompatible when\
    \ operating on\n   independent encrypted records.\n"
- title: 3.7.2.  Interface Description
  contents:
  - "3.7.2.  Interface Description\n   TLS is commonly invoked using an API provided\
    \ by packages such as\n   OpenSSL, wolfSSL, or GnuTLS.  Using such APIs entails\
    \ the\n   manipulation of several important abstractions, which fall into the\n\
    \   following categories: long-term keys and algorithms, session state,\n   and\
    \ communications/connections.\n   Considerable care is required in the use of\
    \ TLS APIs to ensure\n   creation of a secure application.  The programmer should\
    \ have at\n   least a basic understanding of encryption and digital signature\n\
    \   algorithms and their strengths, public key infrastructure (including\n   X.509\
    \ certificates and certificate revocation), and the Sockets API.\n   See [RFC7525]\
    \ and [RFC7457], as mentioned above.\n   As an example, in the case of OpenSSL,\
    \ the primary abstractions are\n   the library itself, method (protocol), session,\
    \ context, cipher, and\n   connection.  After initializing the library and setting\
    \ the method, a\n   cipher suite is chosen and used to configure a context object.\n\
    \   Session objects may then be minted according to the parameters\n   present\
    \ in a context object and associated with individual\n   connections.  Depending\
    \ on how precisely the programmer wishes to\n   select different algorithmic or\
    \ protocol options, various levels of\n   details may be required.\n"
- title: 3.7.3.  Transport Features
  contents:
  - "3.7.3.  Transport Features\n   Both TLS and DTLS employ a layered architecture.\
    \  The lower layer is\n   commonly called the \"record protocol\".  It is responsible\
    \ for:\n   o  message fragmentation,\n   o  authentication and integrity via message\
    \ authentication codes\n      (MACs),\n   o  data encryption, and\n   o  scheduling\
    \ transmission using the underlying transport protocol.\n   DTLS augments the\
    \ TLS record protocol with:\n   o  ordering and replay protection, implemented\
    \ using sequence\n      numbers.\n   Several protocols are layered on top of the\
    \ record protocol.  These\n   include the handshake, alert, and change cipher\
    \ spec protocols.\n   There is also the data protocol, used to carry application\
    \ traffic.\n   The handshake protocol is used to establish cryptographic and\n\
    \   compression parameters when a connection is first set up.  In DTLS,\n   this\
    \ protocol also has a basic fragmentation and retransmission\n   capability and\
    \ a cookie-like mechanism to resist DoS attacks.  (TLS\n   compression is not\
    \ recommended at present).  The alert protocol is\n   used to inform the peer\
    \ of various conditions, most of which are\n   terminal for the connection.  The\
    \ change cipher spec protocol is used\n   to synchronize changes in cryptographic\
    \ parameters for each peer.\n   The data protocol, when used with an appropriate\
    \ cipher, provides:\n   o  authentication of one end or both ends of a connection,\n\
    \   o  confidentiality, and\n   o  cryptographic integrity protection.\n   Both\
    \ TLS and DTLS are unicast-only.\n"
- title: 3.8.  Real-Time Transport Protocol (RTP)
  contents:
  - "3.8.  Real-Time Transport Protocol (RTP)\n   RTP provides an end-to-end network\
    \ transport service, suitable for\n   applications transmitting real-time data,\
    \ such as audio, video or\n   data, over multicast or unicast transport services,\
    \ including TCP,\n   UDP, UDP-Lite, DCCP, TLS, and DTLS.\n"
- title: 3.8.1.  Protocol Description
  contents:
  - "3.8.1.  Protocol Description\n   The RTP standard [RFC3550] defines a pair of\
    \ protocols: RTP and the\n   RTP Control Protocol (RTCP).  The transport does\
    \ not provide\n   connection setup, instead relying on out-of-band techniques\
    \ or\n   associated control protocols to setup, negotiate parameters, or tear\n\
    \   down a session.\n   An RTP sender encapsulates audio/video data into RTP packets\
    \ to\n   transport media streams.  The RFC Series specifies RTP payload\n   formats\
    \ that allow packets to carry a wide range of media and\n   specifies a wide range\
    \ of multiplexing, error control, and other\n   support mechanisms.\n   If a frame\
    \ of media data is large, it will be fragmented into several\n   RTP packets.\
    \  Likewise, several small frames may be bundled into a\n   single RTP packet.\n\
    \   An RTP receiver collects RTP packets from the network, validates them\n  \
    \ for correctness, and sends them to the media decoder input queue.\n   Missing\
    \ packet detection is performed by the channel decoder.  The\n   playout buffer\
    \ is ordered by time stamp and is used to reorder\n   packets.  Damaged frames\
    \ may be repaired before the media payloads\n   are decompressed to display or\
    \ store the data.  Some uses of RTP are\n   able to exploit the partial payload\
    \ protection features offered by\n   DCCP and UDP-Lite.\n   RTCP is a control\
    \ protocol that works alongside an RTP flow.  Both\n   the RTP sender and receiver\
    \ will send RTCP report packets.  This is\n   used to periodically send control\
    \ information and report performance.\n   Based on received RTCP feedback, an\
    \ RTP sender can adjust the\n   transmission, e.g., perform rate adaptation at\
    \ the application layer\n   in the case of congestion.\n   An RTCP receiver report\
    \ (RTCP RR) is returned to the sender\n   periodically to report key parameters\
    \ (e.g., the fraction of packets\n   lost in the last reporting interval, the\
    \ cumulative number of packets\n   lost, the highest sequence number received,\
    \ and the inter-arrival\n   jitter).  The RTCP RR packets also contain timing\
    \ information that\n   allows the sender to estimate the network round-trip time\
    \ (RTT) to\n   the receivers.\n   The interval between reports sent from each\
    \ receiver tends to be on\n   the order of a few seconds on average, although\
    \ this varies with the\n   session rate, and sub-second reporting intervals are\
    \ possible for\n   high rate sessions.  The interval is randomized to avoid\n\
    \   synchronization of reports from multiple receivers.\n"
- title: 3.8.2.  Interface Description
  contents:
  - "3.8.2.  Interface Description\n   There is no standard API defined for RTP or\
    \ RTCP.  Implementations\n   are typically tightly integrated with a particular\
    \ application and\n   closely follow the principles of application-level framing\
    \ and\n   integrated layer processing [ClarkArch] in media processing\n   [RFC2736],\
    \ error recovery and concealment, rate adaptation, and\n   security [RFC7202].\
    \  Accordingly, RTP implementations tend to be\n   targeted at particular application\
    \ domains (e.g., voice-over-IP,\n   IPTV, or video conferencing), with a feature\
    \ set optimized for that\n   domain, rather than being general purpose implementations\
    \ of the\n   protocol.\n"
- title: 3.8.3.  Transport Features
  contents:
  - "3.8.3.  Transport Features\n   The transport features provided by RTP are:\n\
    \   o  unicast, multicast, or IPv4 broadcast (provided by lower-layer\n      protocol),\n\
    \   o  port multiplexing (provided by lower-layer protocol),\n   o  unidirectional\
    \ or bidirectional communication (provided by lower-\n      layer protocol),\n\
    \   o  message-oriented delivery with support for media types and other\n    \
    \  extensions,\n   o  reliable delivery when using erasure coding or unreliable\
    \ delivery\n      with drop notification (if supported by lower-layer protocol),\n\
    \   o  connection setup with feature negotiation (using associated\n      protocols)\
    \ and application-to-port mapping (provided by lower-\n      layer protocol),\n\
    \   o  segmentation, and\n   o  performance metric reporting (using associated\
    \ protocols).\n"
- title: 3.9.  Hypertext Transport Protocol (HTTP) over TCP as a Pseudotransport
  contents:
  - "3.9.  Hypertext Transport Protocol (HTTP) over TCP as a Pseudotransport\n   The\
    \ Hypertext Transfer Protocol (HTTP) is an application-level\n   protocol widely\
    \ used on the Internet.  It provides object-oriented\n   delivery of discrete\
    \ data or files.  Version 1.1 of the protocol is\n   specified in [RFC7230] [RFC7231]\
    \ [RFC7232] [RFC7233] [RFC7234]\n   [RFC7235], and version 2 is specified in [RFC7540].\
    \  HTTP is usually\n   transported over TCP using ports 80 and 443, although it\
    \ can be used\n   with other transports.  When used over TCP, it inherits TCP's\n\
    \   properties.\n   Application-layer protocols may use HTTP as a substrate with\
    \ an\n   existing method and data formats, or specify new methods and data\n \
    \  formats.  There are various reasons for this practice listed in\n   [RFC3205];\
    \ these include being a well-known and well-understood\n   protocol, reusability\
    \ of existing servers and client libraries, easy\n   use of existing security\
    \ mechanisms such as HTTP digest\n   authentication [RFC7235] and TLS [RFC5246],\
    \ and the ability of HTTP\n   to traverse firewalls, which allows it to work over\
    \ many types of\n   infrastructure and in cases where an application server often\
    \ needs\n   to support HTTP anyway.\n   Depending on application need, the use\
    \ of HTTP as a substrate\n   protocol may add complexity and overhead in comparison\
    \ to a special-\n   purpose protocol (e.g., HTTP headers, suitability of the HTTP\n\
    \   security model, etc.).  [RFC3205] addresses this issue, provides some\n  \
    \ guidelines, and identifies concerns about the use of HTTP standard\n   ports\
    \ 80 and 443, the use of the HTTP URL scheme, and interaction\n   with existing\
    \ firewalls, proxies, and NATs.\n   Representational State Transfer (REST) [REST]\
    \ is another example of\n   how applications can use HTTP as a transport protocol.\
    \  REST is an\n   architecture style that may be used to build applications using\
    \ HTTP\n   as a communication protocol.\n"
- title: 3.9.1.  Protocol Description
  contents:
  - "3.9.1.  Protocol Description\n   The Hypertext Transfer Protocol (HTTP) is a\
    \ request/response\n   protocol.  A client sends a request containing a request\
    \ method, URI,\n   and protocol version followed by message whose design is inspired\
    \ by\n   MIME (see [RFC7231] for the differences between an HTTP object and a\n\
    \   MIME message), containing information about the client and request\n   modifiers.\
    \  The message can also contain a message body carrying\n   application data.\
    \  The server responds with a status or error code\n   followed by a message containing\
    \ information about the server and\n   information about the data.  This may include\
    \ a message body.  It is\n   possible to specify a data format for the message\
    \ body using MIME\n   media types [RFC2045].  The protocol has additional features;\
    \ some\n   relevant to pseudotransport are described below.\n   Content negotiation,\
    \ specified in [RFC7231], is a mechanism provided\n   by HTTP to allow selection\
    \ of a representation for a requested\n   resource.  The client and server negotiate\
    \ acceptable data formats,\n   character sets, and data encoding (e.g., data can\
    \ be transferred\n   compressed using gzip).  HTTP can accommodate exchange of\
    \ messages as\n   well as data streaming (using chunked transfer encoding [RFC7230]).\n\
    \   It is also possible to request a part of a resource using an object\n   range\
    \ request [RFC7233].  The protocol provides powerful cache\n   control signaling\
    \ defined in [RFC7234].\n   The persistent connections of HTTP 1.1 and HTTP 2.0\
    \ allow multiple\n   request/response transactions (streams) during the lifetime\
    \ of a\n   single HTTP connection.  This reduces overhead during connection\n\
    \   establishment and mitigates transport-layer slow-start that would\n   have\
    \ otherwise been incurred for each transaction.  HTTP 2.0\n   connections can\
    \ multiplex many request/response pairs in parallel on\n   a single transport\
    \ connection.  Both are important to reduce latency\n   for HTTP's primary use\
    \ case.\n   HTTP can be combined with security mechanisms, such as TLS (denoted\n\
    \   by HTTPS).  This adds protocol properties provided by such a\n   mechanism\
    \ (e.g., authentication and encryption).  The TLS\n   Application-Layer Protocol\
    \ Negotiation (ALPN) extension [RFC7301] can\n   be used to negotiate the HTTP\
    \ version within the TLS handshake,\n   eliminating the latency incurred by additional\
    \ round-trip exchanges.\n   Arbitrary cookie strings, included as part of the\
    \ request headers,\n   are often used as bearer tokens in HTTP.\n"
- title: 3.9.2.  Interface Description
  contents:
  - "3.9.2.  Interface Description\n   There are many HTTP libraries available exposing\
    \ different APIs.  The\n   APIs provide a way to specify a request by providing\
    \ a URI, a method,\n   request modifiers, and, optionally, a request body.  For\
    \ the\n   response, callbacks can be registered that will be invoked when the\n\
    \   response is received.  If HTTPS is used, the API exposes a\n   registration\
    \ of callbacks when a server requests client\n   authentication and when certificate\
    \ verification is needed.\n   The World Wide Web Consortium (W3C) has standardized\
    \ the\n   XMLHttpRequest API [XHR].  This API can be used for sending HTTP/\n\
    \   HTTPS requests and receiving server responses.  Besides the XML data\n   format,\
    \ the request and response data format can also be JSON, HTML,\n   and plain text.\
    \  JavaScript and XMLHttpRequest are ubiquitous\n   programming models for websites\
    \ and more general applications where\n   native code is less attractive.\n"
- title: 3.9.3.  Transport Features
  contents:
  - "3.9.3.  Transport Features\n   The transport features provided by HTTP, when\
    \ used as a\n   pseudotransport, are:\n   o  unicast transport (provided by the\
    \ lower-layer protocol, usually\n      TCP),\n   o  unidirectional or bidirectional\
    \ communication,\n   o  transfer of objects in multiple streams with object content\
    \ type\n      negotiation, supporting partial transmission of object ranges,\n\
    \   o  ordered delivery (provided by the lower-layer protocol, usually\n     \
    \ TCP),\n   o  fully reliable delivery (provided by the lower-layer protocol,\n\
    \      usually TCP),\n   o  flow control (provided by the lower-layer protocol,\
    \ usually TCP),\n      and\n   o  congestion control (provided by the lower-layer\
    \ protocol, usually\n      TCP).\n   HTTPS (HTTP over TLS) additionally provides\
    \ the following features\n   (as provided by TLS):\n   o  authentication (of one\
    \ or both ends of a connection),\n   o  confidentiality, and\n   o  integrity\
    \ protection.\n"
- title: 3.10.  File Delivery over Unidirectional Transport / Asynchronous
  contents:
  - "3.10.  File Delivery over Unidirectional Transport / Asynchronous\n       Layered\
    \ Coding (FLUTE/ALC) for Reliable Multicast\n   FLUTE/ALC is an IETF Standards\
    \ Track protocol specified in [RFC6726]\n   and [RFC5775].  It provides object-oriented\
    \ delivery of discrete data\n   or files.  Asynchronous Layer Coding (ALC) provides\
    \ an underlying\n   reliable transport service and FLUTE a file-oriented specialization\n\
    \   of the ALC service (e.g., to carry associated metadata).  [RFC6726]\n   and\
    \ [RFC5775] are non-backward-compatible updates of [RFC3926] and\n   [RFC3450],\
    \ which are Experimental protocols; these Experimental\n   protocols are currently\
    \ largely deployed in the 3GPP Multimedia\n   Broadcast / Multicast Service (MBMS)\
    \ (see [MBMS], Section 7) and\n   similar contexts (e.g., the Japanese ISDB-Tmm\
    \ standard).\n   The FLUTE/ALC protocol has been designed to support massively\n\
    \   scalable reliable bulk data dissemination to receiver groups of\n   arbitrary\
    \ size using IP Multicast over any type of delivery network,\n   including unidirectional\
    \ networks (e.g., broadcast wireless\n   channels).  However, the FLUTE/ALC protocol\
    \ also supports point-to-\n   point unicast transmissions.\n   FLUTE/ALC bulk\
    \ data dissemination has been designed for discrete file\n   or memory-based \"\
    objects\".  Although FLUTE/ALC is not well adapted to\n   byte and message streaming,\
    \ there is an exception: FLUTE/ALC is used\n   to carry 3GPP Dynamic Adaptive\
    \ Streaming over HTTP (DASH) when\n   scalability is a requirement (see [MBMS],\
    \ Section 5.6).\n   FLUTE/ALC's reliability, delivery mode, congestion control,\
    \ and flow/\n   rate control mechanisms can be separately controlled to meet\n\
    \   different application needs.  Section 4.1 of [RFC8085] describes\n   multicast\
    \ congestion control requirements for UDP.\n"
- title: 3.10.1.  Protocol Description
  contents:
  - "3.10.1.  Protocol Description\n   The FLUTE/ALC protocol works on top of UDP\
    \ (though it could work on\n   top of any datagram delivery transport protocol),\
    \ without requiring\n   any connectivity from receivers to the sender.  Purely\
    \ unidirectional\n   networks are therefore supported by FLUTE/ALC.  This guarantees\n\
    \   scalability to an unlimited number of receivers in a session, since\n   the\
    \ sender behaves exactly the same regardless of the number of\n   receivers.\n\
    \   FLUTE/ALC supports the transfer of bulk objects such as file or\n   in-memory\
    \ content, using either a push or an on-demand mode.  In push\n   mode, content\
    \ is sent once to the receivers, while in on-demand mode,\n   content is sent\
    \ continuously during periods of time that can greatly\n   exceed the average\
    \ time required to download the session objects (see\n   [RFC5651], Section 4.2).\n\
    \   This enables receivers to join a session asynchronously, at their own\n  \
    \ discretion, receive the content, and leave the session.  In this\n   case, data\
    \ content is typically sent continuously, in loops (also\n   known as \"carousels\"\
    ).  FLUTE/ALC also supports the transfer of an\n   object stream, with loose real-time\
    \ constraints.  This is\n   particularly useful to carry 3GPP DASH when scalability\
    \ is a\n   requirement and unicast transmissions over HTTP cannot be used\n  \
    \ ([MBMS], Section 5.6).  In this case, packets are sent in sequence\n   using\
    \ push mode.  FLUTE/ALC is not well adapted to byte and message\n   streaming,\
    \ and other solutions could be preferred (e.g., FECFRAME\n   [RFC6363] with real-time\
    \ flows).\n   The FLUTE file delivery instantiation of ALC provides a metadata\n\
    \   delivery service.  Each object of the FLUTE/ALC session is described\n   in\
    \ a dedicated entry of a File Delivery Table (FDT), using an XML\n   format (see\
    \ [RFC6726], Section 3.2).  This metadata can include, but\n   is not restricted\
    \ to, a URI attribute (to identify and locate the\n   object), a media type attribute,\
    \ a size attribute, an encoding\n   attribute, or a message digest attribute.\
    \  Since the set of objects\n   sent within a session can be dynamic, with new\
    \ objects being added\n   and old ones removed, several instances of the FDT can\
    \ be sent, and a\n   mechanism is provided to identify a new FDT instance.\n \
    \  Error detection and verification of the protocol control information\n   relies\
    \ on the underlying transport (e.g., UDP checksum).\n   To provide robustness\
    \ against packet loss and improve the efficiency\n   of the on-demand mode, FLUTE/ALC\
    \ relies on packet erasure coding\n   (Application-Layer Forward Error Correction\
    \ (AL-FEC)).  AL-FEC\n   encoding is proactive (since there is no feedback and\
    \ therefore no\n   (N)ACK-based retransmission), and ALC packets containing repair\
    \ data\n   are sent along with ALC packets containing source data.  Several FEC\n\
    \   Schemes have been standardized; FLUTE/ALC does not mandate the use of\n  \
    \ any particular one.  Several strategies concerning the transmission\n   order\
    \ of ALC source and repair packets are possible, in particular,\n   in on-demand\
    \ mode where it can deeply impact the service provided\n   (e.g., to favor the\
    \ recovery of objects in sequence or, at the other\n   extreme, to favor the recovery\
    \ of all objects in parallel), and\n   FLUTE/ALC does not mandate nor recommend\
    \ the use of any particular\n   one.\n   A FLUTE/ALC session is composed of one\
    \ or more channels, associated\n   to different destination unicast and/or multicast\
    \ IP addresses.  ALC\n   packets are sent in those channels at a certain transmission\
    \ rate,\n   with a rate that often differs depending on the channel.  FLUTE/ALC\n\
    \   does not mandate nor recommend any strategy to select which ALC\n   packet\
    \ to send on which channel.  FLUTE/ALC can use a multiple rate\n   congestion\
    \ control building block (e.g., Wave and Equation Based Rate\n   Control (WEBRC))\
    \ to provide congestion control that is feedback free,\n   where receivers adjust\
    \ their reception rates individually by joining\n   and leaving channels associated\
    \ with the session.  To that purpose,\n   the ALC header provides a specific field\
    \ to carry congestion-control-\n   specific information.  However, FLUTE/ALC does\
    \ not mandate the use of\n   a particular congestion control mechanism although\
    \ WEBRC is mandatory\n   to support for the Internet ([RFC6726], Section 1.1.4).\
    \  FLUTE/ALC is\n   often used over a network path with pre-provisioned capacity\n\
    \   [RFC8085] where there are no flows competing for capacity.  In this\n   case,\
    \ a sender-based rate control mechanism and a single channel are\n   sufficient.\n\
    \   [RFC6584] provides per-packet authentication, integrity, and anti-\n   replay\
    \ protection in the context of the ALC and NORM protocols.\n   Several mechanisms\
    \ are proposed that seamlessly integrate into these\n   protocols using the ALC\
    \ and NORM header extension mechanisms.\n"
- title: 3.10.2.  Interface Description
  contents:
  - "3.10.2.  Interface Description\n   The FLUTE/ALC specification does not describe\
    \ a specific API to\n   control protocol operation.  Although open source and\
    \ commercial\n   implementations have specified APIs, there is no IETF-specified\
    \ API\n   for FLUTE/ALC.\n"
- title: 3.10.3.  Transport Features
  contents:
  - "3.10.3.  Transport Features\n   The transport features provided by FLUTE/ALC\
    \ are:\n   o  unicast, multicast, anycast, or IPv4 broadcast transmission,\n \
    \  o  object-oriented delivery of discrete data or files and associated\n    \
    \  metadata,\n   o  fully reliable or partially reliable delivery (of file or\
    \ in-\n      memory objects), using proactive packet erasure coding (AL-FEC) to\n\
    \      recover from packet erasures,\n   o  ordered or unordered delivery (of\
    \ file or in-memory objects),\n   o  error detection (based on the UDP checksum),\n\
    \   o  per-packet authentication,\n   o  per-packet integrity,\n   o  per-packet\
    \ replay protection, and\n   o  congestion control for layered flows (e.g., with\
    \ WEBRC).\n"
- title: 3.11.  NACK-Oriented Reliable Multicast (NORM)
  contents:
  - "3.11.  NACK-Oriented Reliable Multicast (NORM)\n   NORM is an IETF Standards\
    \ Track protocol specified in [RFC5740].  It\n   provides object-oriented delivery\
    \ of discrete data or files.\n   The protocol was designed to support reliable\
    \ bulk data dissemination\n   to receiver groups using IP Multicast but also provides\
    \ for point-to-\n   point unicast operation.  Support for bulk data dissemination\n\
    \   includes discrete file or computer memory-based \"objects\" as well as\n \
    \  byte and message streaming.\n   NORM can incorporate packet erasure coding\
    \ as a part of its selective\n   Automatic Repeat reQuest (ARQ) in response to\
    \ negative\n   acknowledgments from the receiver.  The packet erasure coding can\n\
    \   also be proactively applied for forward protection from packet loss.\n   NORM\
    \ transmissions are governed by TCP-Friendly Multicast Congestion\n   Control\
    \ (TFMCC) [RFC4654].  The reliability, congestion control, and\n   flow control\
    \ mechanisms can be separately controlled to meet\n   different application needs.\n"
- title: 3.11.1.  Protocol Description
  contents:
  - "3.11.1.  Protocol Description\n   The NORM protocol is encapsulated in UDP datagrams\
    \ and thus provides\n   multiplexing for multiple sockets on hosts using port\
    \ numbers.  For\n   loosely coordinated IP Multicast, NORM is not strictly connection-\n\
    \   oriented although per-sender state is maintained by receivers for\n   protocol\
    \ operation.  [RFC5740] does not specify a handshake protocol\n   for connection\
    \ establishment.  Separate session initiation can be\n   used to coordinate port\
    \ numbers.  However, in-band \"client-server\"\n   style connection establishment\
    \ can be accomplished with the NORM\n   congestion control signaling messages\
    \ using port binding techniques\n   like those for TCP client-server connections.\n\
    \   NORM supports bulk \"objects\" such as file or in-memory content but\n   also\
    \ can treat a stream of data as a logical bulk object for purposes\n   of packet\
    \ erasure coding.  In the case of stream transport, NORM can\n   support either\
    \ byte streams or message streams where application-\n   defined message boundary\
    \ information is carried in the NORM protocol\n   messages.  This allows the receiver(s)\
    \ to join/rejoin and recover\n   message boundaries mid-stream as needed.  Application\
    \ content is\n   carried and identified by the NORM protocol with encoding symbol\n\
    \   identifiers depending upon the Forward Error Correction (FEC) Scheme\n   [RFC5052]\
    \ configured.  NORM uses NACK-based selective ARQ to reliably\n   deliver the\
    \ application content to the receiver(s).  NORM proactively\n   measures round-trip\
    \ timing information to scale ARQ timers\n   appropriately and to support congestion\
    \ control.  For multicast\n   operation, timer-based feedback suppression is used\
    \ to achieve group\n   size scaling with low feedback traffic levels.  The feedback\n\
    \   suppression is not applied for unicast operation.\n   NORM uses rate-based\
    \ congestion control based upon the TCP-Friendly\n   Rate Control (TFRC) [RFC5348]\
    \ principles that are also used in DCCP\n   [RFC4340].  NORM uses control messages\
    \ to measure RTT and collect\n   congestion event information (e.g., reflecting\
    \ a loss event or ECN\n   event) from the receiver(s) to support dynamic adjustment\
    \ or the\n   rate.  TCP-Friendly Multicast Congestion Control (TFMCC) [RFC4654]\n\
    \   provides extra features to support multicast but is functionally\n   equivalent\
    \ to TFRC for unicast.\n   Error detection and verification of the protocol control\
    \ information\n   relies on the on the underlying transport (e.g., UDP checksum).\n\
    \   The reliability mechanism is decoupled from congestion control.  This\n  \
    \ allows invocation of alternative arrangements of transport services,\n   for\
    \ example, to support, fixed-rate reliable delivery or unreliable\n   delivery\
    \ (that may optionally be \"better than best effort\" via packet\n   erasure coding)\
    \ using TFRC.  Alternative congestion control\n   techniques may be applied, for\
    \ example, TFRC with congestion event\n   detection based on ECN.\n   While NORM\
    \ provides NACK-based reliability, it also supports a\n   positive acknowledgment\
    \ (ACK) mechanism that can be used for receiver\n   flow control.  This mechanism\
    \ is decoupled from the reliability and\n   congestion control, supporting applications\
    \ with different needs.\n   One example is use of NORM for quasi-reliable delivery,\
    \ where timely\n   delivery of newer content may be favored over completely reliable\n\
    \   delivery of older content within buffering and RTT constraints.\n"
- title: 3.11.2.  Interface Description
  contents:
  - "3.11.2.  Interface Description\n   The NORM specification does not describe a\
    \ specific API to control\n   protocol operation.  A freely available, open-source\
    \ reference\n   implementation of NORM is available at\n   <https://www.nrl.navy.mil/itd/ncs/products/norm>,\
    \ and a documented\n   API is provided for this implementation.  While a sockets-like\
    \ API is\n   not currently documented, the existing API supports the necessary\n\
    \   functions for that to be implemented.\n"
- title: 3.11.3.  Transport Features
  contents:
  - "3.11.3.  Transport Features\n   The transport features provided by NORM are:\n\
    \   o  unicast or multicast transport,\n   o  unidirectional communication,\n\
    \   o  stream-oriented delivery in a single stream or object-oriented\n      delivery\
    \ of in-memory data or file bulk content objects,\n   o  fully reliable (NACK-based)\
    \ or partially reliable (using erasure\n      coding both proactively and as part\
    \ of ARQ) delivery,\n   o  unordered delivery,\n   o  error detection (relies\
    \ on UDP checksum),\n   o  segmentation,\n   o  data bundling (using Nagle's algorithm),\n\
    \   o  flow control (timer-based and/or ACK-based), and\n   o  congestion control\
    \ (also supporting fixed-rate reliable or\n      unreliable delivery).\n"
- title: 3.12.  Internet Control Message Protocol (ICMP)
  contents:
  - "3.12.  Internet Control Message Protocol (ICMP)\n   The Internet Control Message\
    \ Protocol (ICMP) [RFC792] for IPv4 and\n   ICMP for IPv6 [RFC4443] are IETF Standards\
    \ Track protocols.  It is a\n   connectionless unidirectional protocol that delivers\
    \ individual\n   messages, without error correction, congestion control, or flow\n\
    \   control.  Messages may be sent as unicast, IPv4 broadcast, or\n   multicast\
    \ datagrams (IPv4 and IPv6), in addition to anycast\n   datagrams.\n   While ICMP\
    \ is not typically described as a transport protocol, it\n   does position itself\
    \ over the network layer, and the operation of\n   other transport protocols can\
    \ be closely linked to the functions\n   provided by ICMP.\n   Transport protocols\
    \ and upper-layer protocols can use received ICMP\n   messages to help them make\
    \ appropriate decisions when network or\n   endpoint errors are reported, for\
    \ example, to implement ICMP-based\n   Path MTU Discovery (PMTUD) [RFC1191] [RFC1981]\
    \ or assist in\n   Packetization Layer PMTUD (PLPMTUD) [RFC4821].  Such reactions\
    \ to\n   received messages need to protect from off-path data injection\n   [RFC8085]\
    \ to avoid an application receiving packets created by an\n   unauthorized third\
    \ party.  An application therefore needs to ensure\n   that all messages are appropriately\
    \ validated by checking the payload\n   of the messages to ensure they are received\
    \ in response to actually\n   transmitted traffic (e.g., a reported error condition\
    \ that\n   corresponds to a UDP datagram or TCP segment was actually sent by the\n\
    \   application).  This requires context [RFC6056], such as local state\n   about\
    \ communication instances to each destination (e.g., in TCP,\n   DCCP, or SCTP).\
    \  This state is not always maintained by UDP-based\n   applications [RFC8085].\n"
- title: 3.12.1.  Protocol Description
  contents:
  - "3.12.1.  Protocol Description\n   ICMP is a connectionless unidirectional protocol.\
    \  It delivers\n   independent messages, called \"datagrams\".  Each message is\
    \ required\n   to carry a checksum as an integrity check and to protect from\n\
    \   misdelivery to an unintended endpoint.\n   ICMP messages typically relay diagnostic\
    \ information from an endpoint\n   [RFC1122] or network device [RFC1812] addressed\
    \ to the sender of a\n   flow.  This usually contains the network protocol header\
    \ of a packet\n   that encountered a reported issue.  Some formats of messages\
    \ can also\n   carry other payload data.  Each message carries an integrity check\n\
    \   calculated in the same way as for UDP; this checksum is not optional.\n  \
    \ The RFC Series defines additional IPv6 message formats to support a\n   range\
    \ of uses.  In the case of IPv6, the protocol incorporates\n   neighbor discovery\
    \ [RFC4861] [RFC3971] (provided by ARP for IPv4) and\n   Multicast Listener Discovery\
    \ (MLD) [RFC2710] group management\n   functions (provided by IGMP for IPv4).\n\
    \   Reliable transmission cannot be assumed.  A receiving application\n   that\
    \ is unable to run sufficiently fast, or frequently, may miss\n   messages since\
    \ there is no flow or congestion control.  In addition,\n   some network devices\
    \ rate-limit ICMP messages.\n"
- title: 3.12.2.  Interface Description
  contents:
  - "3.12.2.  Interface Description\n   ICMP processing is integrated in many connection-oriented\
    \ transports\n   but, like other functions, needs to be provided by an upper-layer\n\
    \   protocol when using UDP and UDP-Lite.\n   On some stacks, a bound socket also\
    \ allows a UDP application to be\n   notified when ICMP error messages are received\
    \ for its transmissions\n   [RFC8085].\n   Any response to ICMP error messages\
    \ ought to be robust to temporary\n   routing failures (sometimes called \"soft\
    \ errors\"), e.g., transient\n   ICMP \"unreachable\" messages ought to not normally\
    \ cause a\n   communication abort [RFC5461] [RFC8085].\n"
- title: 3.12.3.  Transport Features
  contents:
  - "3.12.3.  Transport Features\n   ICMP does not provide any transport service directly\
    \ to applications.\n   Used together with other transport protocols, it provides\n\
    \   transmission of control, error, and measurement data between\n   endpoints\
    \ or from devices along the path to one endpoint.\n"
- title: 4.  Congestion Control
  contents:
  - "4.  Congestion Control\n   Congestion control is critical to the stable operation\
    \ of the\n   Internet.  A variety of mechanisms are used to provide the congestion\n\
    \   control needed by many Internet transport protocols.  Congestion is\n   detected\
    \ based on sensing of network conditions, whether through\n   explicit or implicit\
    \ feedback.  The congestion control mechanisms\n   that can be applied by different\
    \ transport protocols are largely\n   orthogonal to the choice of transport protocol.\
    \  This section\n   provides an overview of the congestion control mechanisms\
    \ available\n   to the protocols described in Section 3.\n   Many protocols use\
    \ a separate window to determine the maximum sending\n   rate that is allowed\
    \ by the congestion control.  The used congestion\n   control mechanism will increase\
    \ the congestion window if feedback is\n   received that indicates that the currently\
    \ used network path is not\n   congested and will reduce the window otherwise.\
    \  Window-based\n   mechanisms often increase their window slowing over multiple\
    \ RTTs,\n   while decreasing strongly when the first indication of congestion\
    \ is\n   received.  One example is an Additive Increase Multiplicative\n   Decrease\
    \ (AIMD) scheme, where the window is increased by a certain\n   number of packets/bytes\
    \ for each data segment that has been\n   successfully transmitted, while the\
    \ window decreases multiplicatively\n   on the occurrence of a congestion event.\
    \  This can lead to a rather\n   unstable, oscillating sending rate but will resolve\
    \ a congestion\n   situation quickly.  Examples of window-based AIMD schemes include\
    \ TCP\n   NewReno [RFC5681], TCP Cubic [CUBIC] (the default mechanism for TCP\n\
    \   in Linux), and CCID 2 specified for DCCP [RFC4341].\n   Some classes of applications\
    \ prefer to use a transport service that\n   allows sending at a more stable rate\
    \ that is slowly varied in\n   response to congestion.  Rate-based methods offer\
    \ this type of\n   congestion control and have been defined based on the loss\
    \ ratio and\n   observed round-trip time, such as TFRC [RFC5348] and TFRC-SP\n\
    \   [RFC4828].  These methods utilize a throughput equation to determine\n   the\
    \ maximum acceptable rate.  Such methods are used with DCCP CCID 3\n   [RFC4342],\
    \ CCID 4 [RFC5622], WEBRC [RFC3738], and other applications.\n   Another class\
    \ of applications prefers a transport service that yields\n   to other (higher-priority)\
    \ traffic, such as interactive\n   transmissions.  While most traffic in the Internet\
    \ uses loss-based\n   congestion control and therefore tends to fill the network\
    \ buffers\n   (to a certain level if Active Queue Management (AQM) is used), low-\n\
    \   priority congestion control methods often react to changes in delay\n   as\
    \ an earlier indication of congestion.  This approach tends to\n   induce less\
    \ loss than a loss-based method but does generally not\n   compete well with loss-based\
    \ traffic across shared bottleneck links.\n   Therefore, methods such as LEDBAT\
    \ [RFC6817] are deployed in the\n   Internet for scavenger traffic that aims to\
    \ only utilize otherwise\n   unused capacity.\n"
- title: 5.  Transport Features
  contents:
  - "5.  Transport Features\n   The transport protocol features described in this\
    \ document can be\n   used as a basis for defining common transport features.\
    \  These are\n   listed below with the protocols supporting them:\n   o  Control\
    \ Functions\n      *  Addressing\n         +  unicast (TCP, MPTCP, UDP, UDP-Lite,\
    \ SCTP, DCCP, TLS, RTP,\n            HTTP, ICMP)\n         +  multicast (UDP,\
    \ UDP-Lite, RTP, ICMP, FLUTE/ALC, NORM).  Note\n            that, as TLS and DTLS\
    \ are unicast-only, there is no widely\n            deployed mechanism for supporting\
    \ the features listed under\n            the Security bullet (below) when using\
    \ multicast addressing.\n         +  IPv4 broadcast (UDP, UDP-Lite, ICMP)\n  \
    \       +  anycast (UDP, UDP-Lite).  Connection-oriented protocols such\n    \
    \        as TCP and DCCP have also been deployed using anycast\n            addressing,\
    \ with the risk that routing changes may cause\n            connection failure.\n\
    \      *  Association type\n         +  connection-oriented (TCP, MPTCP, DCCP,\
    \ SCTP, TLS, RTP, HTTP,\n            NORM)\n         +  connectionless (UDP, UDP-Lite,\
    \ FLUTE/ALC)\n      *  Multihoming support\n         +  resilience and mobility\
    \ (MPTCP, SCTP)\n         +  load balancing (MPTCP)\n         +  address family\
    \ multiplexing (MPTCP, SCTP)\n      *  Middlebox cooperation\n         +  application-class\
    \ signaling to middleboxes (DCCP)\n         +  error condition signaling from\
    \ middleboxes and routers to\n            endpoints (ICMP)\n      *  Signaling\n\
    \         +  control information and error signaling (ICMP)\n         +  application\
    \ performance reporting (RTP)\n   o  Delivery\n      *  Reliability\n        \
    \ +  fully reliable delivery (TCP, MPTCP, SCTP, TLS, HTTP, FLUTE/\n          \
    \  ALC, NORM)\n         +  partially reliable delivery (SCTP, NORM)\n        \
    \    -  using packet erasure coding (RTP, FLUTE/ALC, NORM)\n            -  with\
    \ specified policy for dropped messages (SCTP)\n         +  unreliable delivery\
    \ (SCTP, UDP, UDP-Lite, DCCP, RTP)\n            -  with drop notification to sender\
    \ (SCTP, DCCP, RTP)\n         +  error detection\n            -  checksum for\
    \ error detection (TCP, MPTCP, UDP, UDP-Lite,\n               SCTP, DCCP, TLS,\
    \ DTLS, FLUTE/ALC, NORM, ICMP)\n            -  partial payload checksum protection\
    \ (UDP-Lite, DCCP).\n               Some uses of RTP can exploit partial payload\
    \ checksum\n               protection feature to provide a corruption-tolerant\n\
    \               transport service.\n            -  checksum optional (UDP).  Possible\
    \ with IPv4 and, in\n               certain cases, with IPv6.\n      *  Ordering\n\
    \         +  ordered delivery (TCP, MPTCP, SCTP, TLS, RTP, HTTP, FLUTE)\n    \
    \     +  unordered delivery permitted (UDP, UDP-Lite, SCTP, DCCP,\n          \
    \  RTP, NORM)\n      *  Type/framing\n         +  stream-oriented delivery (TCP,\
    \ MPTCP, SCTP, TLS, HTTP)\n            -  with multiple streams per association\
    \ (SCTP, HTTP2)\n         +  message-oriented delivery (UDP, UDP-Lite, SCTP, DCCP,\
    \ DTLS,\n            RTP)\n         +  object-oriented delivery of discrete data\
    \ or files and\n            associated metadata (HTTP, FLUTE/ALC, NORM)\n    \
    \        -  with partial delivery of object ranges (HTTP)\n      *  Directionality\n\
    \         +  unidirectional (UDP, UDP-Lite, DCCP, RTP, FLUTE/ALC, NORM)\n    \
    \     +  bidirectional (TCP, MPTCP, SCTP, TLS, HTTP)\n   o  Transmission control\n\
    \      *  flow control (TCP, MPTCP, SCTP, DCCP, TLS, RTP, HTTP)\n      *  congestion\
    \ control (TCP, MPTCP, SCTP, DCCP, RTP, FLUTE/ALC,\n         NORM).  Congestion\
    \ control can also provided by the transport\n         supporting an upper-layer\
    \ transport (e.g., TLS, RTP, HTTP).\n      *  segmentation (TCP, MPTCP, SCTP,\
    \ TLS, RTP, HTTP, FLUTE/ALC,\n         NORM)\n      *  data/message bundling (TCP,\
    \ MPTCP, SCTP, TLS, HTTP)\n      *  stream scheduling prioritization (SCTP, HTTP2)\n\
    \      *  endpoint multiplexing (MPTCP)\n   o  Security\n      *  authentication\
    \ of one end of a connection (TLS, DTLS, FLUTE/\n         ALC)\n      *  authentication\
    \ of both ends of a connection (TLS, DTLS)\n      *  confidentiality (TLS, DTLS)\n\
    \      *  cryptographic integrity protection (TLS, DTLS)\n      *  replay protection\
    \ (TLS, DTLS, FLUTE/ALC)\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   This document does not require any IANA actions.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   This document surveys existing transport protocols\
    \ and protocols\n   providing transport-like services.  Confidentiality, integrity,\
    \ and\n   authenticity are among the features provided by those services.  This\n\
    \   document does not specify any new features or mechanisms for\n   providing\
    \ these features.  Each RFC referenced by this document\n   discusses the security\
    \ considerations of the specification it\n   contains.\n"
- title: 8.  Informative References
  contents:
  - "8.  Informative References\n   [ClarkArch]\n              Clark, D. and D. Tennenhouse,\
    \ \"Architectural\n              Considerations for a New Generation of Protocols\"\
    ,\n              Proceedings of ACM SIGCOMM, DOI 10.1145/99517.99553, 1990.\n\
    \   [CUBIC]    Rhee, I., Xu, L., Ha, S., Zimmermann, A., Eggert, L., and\n   \
    \           R. Scheffenegger, \"CUBIC for Fast Long-Distance Networks\",\n   \
    \           Work in Progress, draft-ietf-tcpm-cubic-04, February 2017.\n   [MBMS]\
    \     3GPP, \"Multimedia Broadcast/Multicast Service (MBMS);\n              Protocols\
    \ and codecs\", 3GPP TS 26.346, 2015,\n              <http://www.3gpp.org/DynaReport/26346.htm>.\n\
    \   [NAT-SUPP] Stewart, R., Tuexen, M., and I. Ruengeler, \"Stream Control\n \
    \             Transmission Protocol (SCTP) Network Address Translation\n     \
    \         Support\", Work in Progress, draft-ietf-tsvwg-natsupp-09,\n        \
    \      May 2016.\n   [POSIX]    IEEE, \"Standard for Information Technology --\
    \ Portable\n              Operating System Interface (POSIX(R)) Base Specifications,\n\
    \              Issue 7\", IEEE 1003.1, DOI 10.1109/ieeestd.2016.7582338,\n   \
    \           <http://ieeexplore.ieee.org/document/7582338/>.\n   [REST]     Fielding,\
    \ R., \"Architectural Styles and the Design of\n              Network-based Software\
    \ Architectures, Chapter 5:\n              Representational State Transfer\",\
    \ Ph.D.\n              Dissertation, University of California, Irvine, 2000.\n\
    \   [RFC768]   Postel, J., \"User Datagram Protocol\", STD 6, RFC 768,\n     \
    \         DOI 10.17487/RFC0768, August 1980,\n              <http://www.rfc-editor.org/info/rfc768>.\n\
    \   [RFC792]   Postel, J., \"Internet Control Message Protocol\", STD 5,\n   \
    \           RFC 792, DOI 10.17487/RFC0792, September 1981,\n              <http://www.rfc-editor.org/info/rfc792>.\n\
    \   [RFC793]   Postel, J., \"Transmission Control Protocol\", STD 7,\n       \
    \       RFC 793, DOI 10.17487/RFC0793, September 1981,\n              <http://www.rfc-editor.org/info/rfc793>.\n\
    \   [RFC1071]  Braden, R., Borman, D., and C. Partridge, \"Computing the\n   \
    \           Internet checksum\", RFC 1071, DOI 10.17487/RFC1071,\n           \
    \   September 1988, <http://www.rfc-editor.org/info/rfc1071>.\n   [RFC1122]  Braden,\
    \ R., Ed., \"Requirements for Internet Hosts -\n              Communication Layers\"\
    , STD 3, RFC 1122,\n              DOI 10.17487/RFC1122, October 1989,\n      \
    \        <http://www.rfc-editor.org/info/rfc1122>.\n   [RFC1191]  Mogul, J. and\
    \ S. Deering, \"Path MTU discovery\", RFC 1191,\n              DOI 10.17487/RFC1191,\
    \ November 1990,\n              <http://www.rfc-editor.org/info/rfc1191>.\n  \
    \ [RFC1812]  Baker, F., Ed., \"Requirements for IP Version 4 Routers\",\n    \
    \          RFC 1812, DOI 10.17487/RFC1812, June 1995,\n              <http://www.rfc-editor.org/info/rfc1812>.\n\
    \   [RFC1981]  McCann, J., Deering, S., and J. Mogul, \"Path MTU Discovery\n \
    \             for IP version 6\", RFC 1981, DOI 10.17487/RFC1981, August\n   \
    \           1996, <http://www.rfc-editor.org/info/rfc1981>.\n   [RFC2018]  Mathis,\
    \ M., Mahdavi, J., Floyd, S., and A. Romanow, \"TCP\n              Selective Acknowledgment\
    \ Options\", RFC 2018,\n              DOI 10.17487/RFC2018, October 1996,\n  \
    \            <http://www.rfc-editor.org/info/rfc2018>.\n   [RFC2045]  Freed, N.\
    \ and N. Borenstein, \"Multipurpose Internet Mail\n              Extensions (MIME)\
    \ Part One: Format of Internet Message\n              Bodies\", RFC 2045, DOI\
    \ 10.17487/RFC2045, November 1996,\n              <http://www.rfc-editor.org/info/rfc2045>.\n\
    \   [RFC2460]  Deering, S. and R. Hinden, \"Internet Protocol, Version 6\n   \
    \           (IPv6) Specification\", RFC 2460, DOI 10.17487/RFC2460,\n        \
    \      December 1998, <http://www.rfc-editor.org/info/rfc2460>.\n   [RFC2710]\
    \  Deering, S., Fenner, W., and B. Haberman, \"Multicast\n              Listener\
    \ Discovery (MLD) for IPv6\", RFC 2710,\n              DOI 10.17487/RFC2710, October\
    \ 1999,\n              <http://www.rfc-editor.org/info/rfc2710>.\n   [RFC2736]\
    \  Handley, M. and C. Perkins, \"Guidelines for Writers of RTP\n             \
    \ Payload Format Specifications\", BCP 36, RFC 2736,\n              DOI 10.17487/RFC2736,\
    \ December 1999,\n              <http://www.rfc-editor.org/info/rfc2736>.\n  \
    \ [RFC3168]  Ramakrishnan, K., Floyd, S., and D. Black, \"The Addition\n     \
    \         of Explicit Congestion Notification (ECN) to IP\",\n              RFC\
    \ 3168, DOI 10.17487/RFC3168, September 2001,\n              <http://www.rfc-editor.org/info/rfc3168>.\n\
    \   [RFC3205]  Moore, K., \"On the use of HTTP as a Substrate\", BCP 56,\n   \
    \           RFC 3205, DOI 10.17487/RFC3205, February 2002,\n              <http://www.rfc-editor.org/info/rfc3205>.\n\
    \   [RFC3260]  Grossman, D., \"New Terminology and Clarifications for\n      \
    \        Diffserv\", RFC 3260, DOI 10.17487/RFC3260, April 2002,\n           \
    \   <http://www.rfc-editor.org/info/rfc3260>.\n   [RFC3436]  Jungmaier, A., Rescorla,\
    \ E., and M. Tuexen, \"Transport\n              Layer Security over Stream Control\
    \ Transmission Protocol\",\n              RFC 3436, DOI 10.17487/RFC3436, December\
    \ 2002,\n              <http://www.rfc-editor.org/info/rfc3436>.\n   [RFC3450]\
    \  Luby, M., Gemmell, J., Vicisano, L., Rizzo, L., and J.\n              Crowcroft,\
    \ \"Asynchronous Layered Coding (ALC) Protocol\n              Instantiation\"\
    , RFC 3450, DOI 10.17487/RFC3450, December\n              2002, <http://www.rfc-editor.org/info/rfc3450>.\n\
    \   [RFC3550]  Schulzrinne, H., Casner, S., Frederick, R., and V.\n          \
    \    Jacobson, \"RTP: A Transport Protocol for Real-Time\n              Applications\"\
    , STD 64, RFC 3550, DOI 10.17487/RFC3550,\n              July 2003, <http://www.rfc-editor.org/info/rfc3550>.\n\
    \   [RFC3738]  Luby, M. and V. Goyal, \"Wave and Equation Based Rate\n       \
    \       Control (WEBRC) Building Block\", RFC 3738,\n              DOI 10.17487/RFC3738,\
    \ April 2004,\n              <http://www.rfc-editor.org/info/rfc3738>.\n   [RFC3758]\
    \  Stewart, R., Ramalho, M., Xie, Q., Tuexen, M., and P.\n              Conrad,\
    \ \"Stream Control Transmission Protocol (SCTP)\n              Partial Reliability\
    \ Extension\", RFC 3758,\n              DOI 10.17487/RFC3758, May 2004,\n    \
    \          <http://www.rfc-editor.org/info/rfc3758>.\n   [RFC3828]  Larzon, L-A.,\
    \ Degermark, M., Pink, S., Jonsson, L-E., Ed.,\n              and G. Fairhurst,\
    \ Ed., \"The Lightweight User Datagram\n              Protocol (UDP-Lite)\", RFC\
    \ 3828, DOI 10.17487/RFC3828, July\n              2004, <http://www.rfc-editor.org/info/rfc3828>.\n\
    \   [RFC3926]  Paila, T., Luby, M., Lehtonen, R., Roca, V., and R. Walsh,\n  \
    \            \"FLUTE - File Delivery over Unidirectional Transport\",\n      \
    \        RFC 3926, DOI 10.17487/RFC3926, October 2004,\n              <http://www.rfc-editor.org/info/rfc3926>.\n\
    \   [RFC3971]  Arkko, J., Ed., Kempf, J., Zill, B., and P. Nikander,\n       \
    \       \"SEcure Neighbor Discovery (SEND)\", RFC 3971,\n              DOI 10.17487/RFC3971,\
    \ March 2005,\n              <http://www.rfc-editor.org/info/rfc3971>.\n   [RFC4336]\
    \  Floyd, S., Handley, M., and E. Kohler, \"Problem Statement\n              for\
    \ the Datagram Congestion Control Protocol (DCCP)\",\n              RFC 4336,\
    \ DOI 10.17487/RFC4336, March 2006,\n              <http://www.rfc-editor.org/info/rfc4336>.\n\
    \   [RFC4340]  Kohler, E., Handley, M., and S. Floyd, \"Datagram\n           \
    \   Congestion Control Protocol (DCCP)\", RFC 4340,\n              DOI 10.17487/RFC4340,\
    \ March 2006,\n              <http://www.rfc-editor.org/info/rfc4340>.\n   [RFC4341]\
    \  Floyd, S. and E. Kohler, \"Profile for Datagram Congestion\n              Control\
    \ Protocol (DCCP) Congestion Control ID 2: TCP-like\n              Congestion\
    \ Control\", RFC 4341, DOI 10.17487/RFC4341, March\n              2006, <http://www.rfc-editor.org/info/rfc4341>.\n\
    \   [RFC4342]  Floyd, S., Kohler, E., and J. Padhye, \"Profile for\n         \
    \     Datagram Congestion Control Protocol (DCCP) Congestion\n              Control\
    \ ID 3: TCP-Friendly Rate Control (TFRC)\", RFC 4342,\n              DOI 10.17487/RFC4342,\
    \ March 2006,\n              <http://www.rfc-editor.org/info/rfc4342>.\n   [RFC4443]\
    \  Conta, A., Deering, S., and M. Gupta, Ed., \"Internet\n              Control\
    \ Message Protocol (ICMPv6) for the Internet\n              Protocol Version 6\
    \ (IPv6) Specification\", RFC 4443,\n              DOI 10.17487/RFC4443, March\
    \ 2006,\n              <http://www.rfc-editor.org/info/rfc4443>.\n   [RFC4654]\
    \  Widmer, J. and M. Handley, \"TCP-Friendly Multicast\n              Congestion\
    \ Control (TFMCC): Protocol Specification\",\n              RFC 4654, DOI 10.17487/RFC4654,\
    \ August 2006,\n              <http://www.rfc-editor.org/info/rfc4654>.\n   [RFC4820]\
    \  Tuexen, M., Stewart, R., and P. Lei, \"Padding Chunk and\n              Parameter\
    \ for the Stream Control Transmission Protocol\n              (SCTP)\", RFC 4820,\
    \ DOI 10.17487/RFC4820, March 2007,\n              <http://www.rfc-editor.org/info/rfc4820>.\n\
    \   [RFC4821]  Mathis, M. and J. Heffner, \"Packetization Layer Path MTU\n   \
    \           Discovery\", RFC 4821, DOI 10.17487/RFC4821, March 2007,\n       \
    \       <http://www.rfc-editor.org/info/rfc4821>.\n   [RFC4828]  Floyd, S. and\
    \ E. Kohler, \"TCP Friendly Rate Control\n              (TFRC): The Small-Packet\
    \ (SP) Variant\", RFC 4828,\n              DOI 10.17487/RFC4828, April 2007,\n\
    \              <http://www.rfc-editor.org/info/rfc4828>.\n   [RFC4861]  Narten,\
    \ T., Nordmark, E., Simpson, W., and H. Soliman,\n              \"Neighbor Discovery\
    \ for IP version 6 (IPv6)\", RFC 4861,\n              DOI 10.17487/RFC4861, September\
    \ 2007,\n              <http://www.rfc-editor.org/info/rfc4861>.\n   [RFC4895]\
    \  Tuexen, M., Stewart, R., Lei, P., and E. Rescorla,\n              \"Authenticated\
    \ Chunks for the Stream Control Transmission\n              Protocol (SCTP)\"\
    , RFC 4895, DOI 10.17487/RFC4895, August\n              2007, <http://www.rfc-editor.org/info/rfc4895>.\n\
    \   [RFC4960]  Stewart, R., Ed., \"Stream Control Transmission Protocol\",\n \
    \             RFC 4960, DOI 10.17487/RFC4960, September 2007,\n              <http://www.rfc-editor.org/info/rfc4960>.\n\
    \   [RFC5052]  Watson, M., Luby, M., and L. Vicisano, \"Forward Error\n      \
    \        Correction (FEC) Building Block\", RFC 5052,\n              DOI 10.17487/RFC5052,\
    \ August 2007,\n              <http://www.rfc-editor.org/info/rfc5052>.\n   [RFC5061]\
    \  Stewart, R., Xie, Q., Tuexen, M., Maruyama, S., and M.\n              Kozuka,\
    \ \"Stream Control Transmission Protocol (SCTP)\n              Dynamic Address\
    \ Reconfiguration\", RFC 5061,\n              DOI 10.17487/RFC5061, September\
    \ 2007,\n              <http://www.rfc-editor.org/info/rfc5061>.\n   [RFC5097]\
    \  Renker, G. and G. Fairhurst, \"MIB for the UDP-Lite\n              protocol\"\
    , RFC 5097, DOI 10.17487/RFC5097, January 2008,\n              <http://www.rfc-editor.org/info/rfc5097>.\n\
    \   [RFC5238]  Phelan, T., \"Datagram Transport Layer Security (DTLS) over\n \
    \             the Datagram Congestion Control Protocol (DCCP)\",\n           \
    \   RFC 5238, DOI 10.17487/RFC5238, May 2008,\n              <http://www.rfc-editor.org/info/rfc5238>.\n\
    \   [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n  \
    \            (TLS) Protocol Version 1.2\", RFC 5246,\n              DOI 10.17487/RFC5246,\
    \ August 2008,\n              <http://www.rfc-editor.org/info/rfc5246>.\n   [RFC5348]\
    \  Floyd, S., Handley, M., Padhye, J., and J. Widmer, \"TCP\n              Friendly\
    \ Rate Control (TFRC): Protocol Specification\",\n              RFC 5348, DOI\
    \ 10.17487/RFC5348, September 2008,\n              <http://www.rfc-editor.org/info/rfc5348>.\n\
    \   [RFC5461]  Gont, F., \"TCP's Reaction to Soft Errors\", RFC 5461,\n      \
    \        DOI 10.17487/RFC5461, February 2009,\n              <http://www.rfc-editor.org/info/rfc5461>.\n\
    \   [RFC5595]  Fairhurst, G., \"The Datagram Congestion Control Protocol\n   \
    \           (DCCP) Service Codes\", RFC 5595, DOI 10.17487/RFC5595,\n        \
    \      September 2009, <http://www.rfc-editor.org/info/rfc5595>.\n   [RFC5596]\
    \  Fairhurst, G., \"Datagram Congestion Control Protocol\n              (DCCP)\
    \ Simultaneous-Open Technique to Facilitate NAT/\n              Middlebox Traversal\"\
    , RFC 5596, DOI 10.17487/RFC5596,\n              September 2009, <http://www.rfc-editor.org/info/rfc5596>.\n\
    \   [RFC5622]  Floyd, S. and E. Kohler, \"Profile for Datagram Congestion\n  \
    \            Control Protocol (DCCP) Congestion ID 4: TCP-Friendly Rate\n    \
    \          Control for Small Packets (TFRC-SP)\", RFC 5622,\n              DOI\
    \ 10.17487/RFC5622, August 2009,\n              <http://www.rfc-editor.org/info/rfc5622>.\n\
    \   [RFC5651]  Luby, M., Watson, M., and L. Vicisano, \"Layered Coding\n     \
    \         Transport (LCT) Building Block\", RFC 5651,\n              DOI 10.17487/RFC5651,\
    \ October 2009,\n              <http://www.rfc-editor.org/info/rfc5651>.\n   [RFC5681]\
    \  Allman, M., Paxson, V., and E. Blanton, \"TCP Congestion\n              Control\"\
    , RFC 5681, DOI 10.17487/RFC5681, September 2009,\n              <http://www.rfc-editor.org/info/rfc5681>.\n\
    \   [RFC5740]  Adamson, B., Bormann, C., Handley, M., and J. Macker,\n       \
    \       \"NACK-Oriented Reliable Multicast (NORM) Transport\n              Protocol\"\
    , RFC 5740, DOI 10.17487/RFC5740, November 2009,\n              <http://www.rfc-editor.org/info/rfc5740>.\n\
    \   [RFC5762]  Perkins, C., \"RTP and the Datagram Congestion Control\n      \
    \        Protocol (DCCP)\", RFC 5762, DOI 10.17487/RFC5762, April\n          \
    \    2010, <http://www.rfc-editor.org/info/rfc5762>.\n   [RFC5775]  Luby, M.,\
    \ Watson, M., and L. Vicisano, \"Asynchronous\n              Layered Coding (ALC)\
    \ Protocol Instantiation\", RFC 5775,\n              DOI 10.17487/RFC5775, April\
    \ 2010,\n              <http://www.rfc-editor.org/info/rfc5775>.\n   [RFC6056]\
    \  Larsen, M. and F. Gont, \"Recommendations for Transport-\n              Protocol\
    \ Port Randomization\", BCP 156, RFC 6056,\n              DOI 10.17487/RFC6056,\
    \ January 2011,\n              <http://www.rfc-editor.org/info/rfc6056>.\n   [RFC6083]\
    \  Tuexen, M., Seggelmann, R., and E. Rescorla, \"Datagram\n              Transport\
    \ Layer Security (DTLS) for Stream Control\n              Transmission Protocol\
    \ (SCTP)\", RFC 6083,\n              DOI 10.17487/RFC6083, January 2011,\n   \
    \           <http://www.rfc-editor.org/info/rfc6083>.\n   [RFC6093]  Gont, F.\
    \ and A. Yourtchenko, \"On the Implementation of the\n              TCP Urgent\
    \ Mechanism\", RFC 6093, DOI 10.17487/RFC6093,\n              January 2011, <http://www.rfc-editor.org/info/rfc6093>.\n\
    \   [RFC6101]  Freier, A., Karlton, P., and P. Kocher, \"The Secure\n        \
    \      Sockets Layer (SSL) Protocol Version 3.0\", RFC 6101,\n              DOI\
    \ 10.17487/RFC6101, August 2011,\n              <http://www.rfc-editor.org/info/rfc6101>.\n\
    \   [RFC6347]  Rescorla, E. and N. Modadugu, \"Datagram Transport Layer\n    \
    \          Security Version 1.2\", RFC 6347, DOI 10.17487/RFC6347,\n         \
    \     January 2012, <http://www.rfc-editor.org/info/rfc6347>.\n   [RFC6356]  Raiciu,\
    \ C., Handley, M., and D. Wischik, \"Coupled\n              Congestion Control\
    \ for Multipath Transport Protocols\",\n              RFC 6356, DOI 10.17487/RFC6356,\
    \ October 2011,\n              <http://www.rfc-editor.org/info/rfc6356>.\n   [RFC6363]\
    \  Watson, M., Begen, A., and V. Roca, \"Forward Error\n              Correction\
    \ (FEC) Framework\", RFC 6363,\n              DOI 10.17487/RFC6363, October 2011,\n\
    \              <http://www.rfc-editor.org/info/rfc6363>.\n   [RFC6458]  Stewart,\
    \ R., Tuexen, M., Poon, K., Lei, P., and V.\n              Yasevich, \"Sockets\
    \ API Extensions for the Stream Control\n              Transmission Protocol (SCTP)\"\
    , RFC 6458,\n              DOI 10.17487/RFC6458, December 2011,\n            \
    \  <http://www.rfc-editor.org/info/rfc6458>.\n   [RFC6525]  Stewart, R., Tuexen,\
    \ M., and P. Lei, \"Stream Control\n              Transmission Protocol (SCTP)\
    \ Stream Reconfiguration\",\n              RFC 6525, DOI 10.17487/RFC6525, February\
    \ 2012,\n              <http://www.rfc-editor.org/info/rfc6525>.\n   [RFC6582]\
    \  Henderson, T., Floyd, S., Gurtov, A., and Y. Nishida, \"The\n             \
    \ NewReno Modification to TCP's Fast Recovery Algorithm\",\n              RFC\
    \ 6582, DOI 10.17487/RFC6582, April 2012,\n              <http://www.rfc-editor.org/info/rfc6582>.\n\
    \   [RFC6584]  Roca, V., \"Simple Authentication Schemes for the\n           \
    \   Asynchronous Layered Coding (ALC) and NACK-Oriented\n              Reliable\
    \ Multicast (NORM) Protocols\", RFC 6584,\n              DOI 10.17487/RFC6584,\
    \ April 2012,\n              <http://www.rfc-editor.org/info/rfc6584>.\n   [RFC6726]\
    \  Paila, T., Walsh, R., Luby, M., Roca, V., and R. Lehtonen,\n              \"\
    FLUTE - File Delivery over Unidirectional Transport\",\n              RFC 6726,\
    \ DOI 10.17487/RFC6726, November 2012,\n              <http://www.rfc-editor.org/info/rfc6726>.\n\
    \   [RFC6773]  Phelan, T., Fairhurst, G., and C. Perkins, \"DCCP-UDP: A\n    \
    \          Datagram Congestion Control Protocol UDP Encapsulation for\n      \
    \        NAT Traversal\", RFC 6773, DOI 10.17487/RFC6773, November\n         \
    \     2012, <http://www.rfc-editor.org/info/rfc6773>.\n   [RFC6817]  Shalunov,\
    \ S., Hazel, G., Iyengar, J., and M. Kuehlewind,\n              \"Low Extra Delay\
    \ Background Transport (LEDBAT)\", RFC 6817,\n              DOI 10.17487/RFC6817,\
    \ December 2012,\n              <http://www.rfc-editor.org/info/rfc6817>.\n  \
    \ [RFC6824]  Ford, A., Raiciu, C., Handley, M., and O. Bonaventure,\n        \
    \      \"TCP Extensions for Multipath Operation with Multiple\n              Addresses\"\
    , RFC 6824, DOI 10.17487/RFC6824, January 2013,\n              <http://www.rfc-editor.org/info/rfc6824>.\n\
    \   [RFC6897]  Scharf, M. and A. Ford, \"Multipath TCP (MPTCP) Application\n \
    \             Interface Considerations\", RFC 6897, DOI 10.17487/RFC6897,\n  \
    \            March 2013, <http://www.rfc-editor.org/info/rfc6897>.\n   [RFC6935]\
    \  Eubanks, M., Chimento, P., and M. Westerlund, \"IPv6 and\n              UDP\
    \ Checksums for Tunneled Packets\", RFC 6935,\n              DOI 10.17487/RFC6935,\
    \ April 2013,\n              <http://www.rfc-editor.org/info/rfc6935>.\n   [RFC6936]\
    \  Fairhurst, G. and M. Westerlund, \"Applicability Statement\n              for\
    \ the Use of IPv6 UDP Datagrams with Zero Checksums\",\n              RFC 6936,\
    \ DOI 10.17487/RFC6936, April 2013,\n              <http://www.rfc-editor.org/info/rfc6936>.\n\
    \   [RFC6951]  Tuexen, M. and R. Stewart, \"UDP Encapsulation of Stream\n    \
    \          Control Transmission Protocol (SCTP) Packets for End-Host\n       \
    \       to End-Host Communication\", RFC 6951,\n              DOI 10.17487/RFC6951,\
    \ May 2013,\n              <http://www.rfc-editor.org/info/rfc6951>.\n   [RFC7053]\
    \  Tuexen, M., Ruengeler, I., and R. Stewart, \"SACK-\n              IMMEDIATELY\
    \ Extension for the Stream Control Transmission\n              Protocol\", RFC\
    \ 7053, DOI 10.17487/RFC7053, November 2013,\n              <http://www.rfc-editor.org/info/rfc7053>.\n\
    \   [RFC7202]  Perkins, C. and M. Westerlund, \"Securing the RTP\n           \
    \   Framework: Why RTP Does Not Mandate a Single Media\n              Security\
    \ Solution\", RFC 7202, DOI 10.17487/RFC7202, April\n              2014, <http://www.rfc-editor.org/info/rfc7202>.\n\
    \   [RFC7230]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n \
    \             Protocol (HTTP/1.1): Message Syntax and Routing\",\n           \
    \   RFC 7230, DOI 10.17487/RFC7230, June 2014,\n              <http://www.rfc-editor.org/info/rfc7230>.\n\
    \   [RFC7231]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n \
    \             Protocol (HTTP/1.1): Semantics and Content\", RFC 7231,\n      \
    \        DOI 10.17487/RFC7231, June 2014,\n              <http://www.rfc-editor.org/info/rfc7231>.\n\
    \   [RFC7232]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n \
    \             Protocol (HTTP/1.1): Conditional Requests\", RFC 7232,\n       \
    \       DOI 10.17487/RFC7232, June 2014,\n              <http://www.rfc-editor.org/info/rfc7232>.\n\
    \   [RFC7233]  Fielding, R., Ed., Lafon, Y., Ed., and J. Reschke, Ed.,\n     \
    \         \"Hypertext Transfer Protocol (HTTP/1.1): Range Requests\",\n      \
    \        RFC 7233, DOI 10.17487/RFC7233, June 2014,\n              <http://www.rfc-editor.org/info/rfc7233>.\n\
    \   [RFC7234]  Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,\n     \
    \         Ed., \"Hypertext Transfer Protocol (HTTP/1.1): Caching\",\n        \
    \      RFC 7234, DOI 10.17487/RFC7234, June 2014,\n              <http://www.rfc-editor.org/info/rfc7234>.\n\
    \   [RFC7235]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n \
    \             Protocol (HTTP/1.1): Authentication\", RFC 7235,\n             \
    \ DOI 10.17487/RFC7235, June 2014,\n              <http://www.rfc-editor.org/info/rfc7235>.\n\
    \   [RFC7301]  Friedl, S., Popov, A., Langley, A., and E. Stephan,\n         \
    \     \"Transport Layer Security (TLS) Application-Layer Protocol\n          \
    \    Negotiation Extension\", RFC 7301, DOI 10.17487/RFC7301,\n              July\
    \ 2014, <http://www.rfc-editor.org/info/rfc7301>.\n   [RFC7323]  Borman, D., Braden,\
    \ B., Jacobson, V., and R.\n              Scheffenegger, Ed., \"TCP Extensions\
    \ for High Performance\",\n              RFC 7323, DOI 10.17487/RFC7323, September\
    \ 2014,\n              <http://www.rfc-editor.org/info/rfc7323>.\n   [RFC7414]\
    \  Duke, M., Braden, R., Eddy, W., Blanton, E., and A.\n              Zimmermann,\
    \ \"A Roadmap for Transmission Control Protocol\n              (TCP) Specification\
    \ Documents\", RFC 7414,\n              DOI 10.17487/RFC7414, February 2015,\n\
    \              <http://www.rfc-editor.org/info/rfc7414>.\n   [RFC7457]  Sheffer,\
    \ Y., Holz, R., and P. Saint-Andre, \"Summarizing\n              Known Attacks\
    \ on Transport Layer Security (TLS) and\n              Datagram TLS (DTLS)\",\
    \ RFC 7457, DOI 10.17487/RFC7457,\n              February 2015, <http://www.rfc-editor.org/info/rfc7457>.\n\
    \   [RFC7496]  Tuexen, M., Seggelmann, R., Stewart, R., and S. Loreto,\n     \
    \         \"Additional Policies for the Partially Reliable Stream\n          \
    \    Control Transmission Protocol Extension\", RFC 7496,\n              DOI 10.17487/RFC7496,\
    \ April 2015,\n              <http://www.rfc-editor.org/info/rfc7496>.\n   [RFC7525]\
    \  Sheffer, Y., Holz, R., and P. Saint-Andre,\n              \"Recommendations\
    \ for Secure Use of Transport Layer\n              Security (TLS) and Datagram\
    \ Transport Layer Security\n              (DTLS)\", BCP 195, RFC 7525, DOI 10.17487/RFC7525,\
    \ May\n              2015, <http://www.rfc-editor.org/info/rfc7525>.\n   [RFC7540]\
    \  Belshe, M., Peon, R., and M. Thomson, Ed., \"Hypertext\n              Transfer\
    \ Protocol Version 2 (HTTP/2)\", RFC 7540,\n              DOI 10.17487/RFC7540,\
    \ May 2015,\n              <http://www.rfc-editor.org/info/rfc7540>.\n   [RFC8085]\
    \  Eggert, L., Fairhurst, G., and G. Shepherd, \"UDP Usage\n              Guidelines\"\
    , BCP 145, RFC 8085, DOI 10.17487/RFC8085,\n              March 2017, <http://www.rfc-editor.org/info/rfc8085>.\n\
    \   [SCTP-DTLS-ENCAPS]\n              Tuexen, M., Stewart, R., Jesup, R., and\
    \ S. Loreto, \"DTLS\n              Encapsulation of SCTP Packets\", Work in Progress,\n\
    \              draft-ietf-tsvwg-sctp-dtls-encaps-09, January 2015.\n   [SCTP-NDATA]\n\
    \              Stewart, R., Tuexen, M., Loreto, S., and R. Seggelmann,\n     \
    \         \"Stream Schedulers and User Message Interleaving for the\n        \
    \      Stream Control Transmission Protocol\", Work in Progress,\n           \
    \   draft-ietf-tsvwg-sctp-ndata-08, October 2016.\n   [TCP-SPEC] Eddy, W., Ed.,\
    \ \"Transmission Control Protocol\n              Specification\", Work in Progress,\
    \ draft-ietf-tcpm-\n              rfc793bis-04, December 2016.\n   [TLS-1.3] \
    \ Rescorla, E., \"The Transport Layer Security (TLS) Protocol\n              Version\
    \ 1.3\", Work in Progress, draft-ietf-tls-tls13-18,\n              October 2016.\n\
    \   [WEBRTC-TRANS]\n              Alvestrand, H., \"Transports for WebRTC\", Work\
    \ in\n              Progress, draft-ietf-rtcweb-transports-17, October 2016.\n\
    \   [XHR]      van Kesteren, A., Aubourg, J., Song, J., and H. Steen,\n      \
    \        \"XMLHttpRequest Level 1\", World Wide Web Consortium NOTE-\n       \
    \       XMLHttpRequest-20161006, October 2016,\n              <http://www.w3.org/TR/XMLHttpRequest/>.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   Thanks to Joe Touch, Michael Welzl, Spencer Dawkins, and\
    \ the TAPS\n   working group for the comments, feedback, and discussion.  This\
    \ work\n   is supported by the European Commission under grant agreement No.\n\
    \   318627 mPlane and from the Horizon 2020 research and innovation\n   program\
    \ under grant agreements No. 644334 (NEAT) and No. 688421\n   (MAMI).  This support\
    \ does not imply endorsement.\n"
- title: Contributors
  contents:
  - "Contributors\n   In addition to the editors, this document is the work of Brian\n\
    \   Adamson, Dragana Damjanovic, Kevin Fall, Simone Ferlin-Oliviera,\n   Ralph\
    \ Holz, Olivier Mehani, Karen Nielsen, Colin Perkins, Vincent\n   Roca, and Michael\
    \ Tuexen.\n   o  Section 3.2 on MPTCP was contributed by Simone Ferlin-Oliviera\n\
    \      (ferlin@simula.no) and Olivier Mehani\n      (olivier.mehani@nicta.com.au).\n\
    \   o  Section 3.3 on UDP was contributed by Kevin Fall\n      (kfall@kfall.com).\n\
    \   o  Section 3.5 on SCTP was contributed by Michael Tuexen (tuexen@fh-\n   \
    \   muenster.de) and Karen Nielsen (karen.nielsen@tieto.com).\n   o  Section 3.7\
    \ on TLS and DTLS was contributed by Ralph Holz\n      (ralph.holz@nicta.com.au)\
    \ and Olivier Mehani\n      (olivier.mehani@nicta.com.au).\n   o  Section 3.8\
    \ on RTP contains contributions from Colin Perkins\n      (csp@csperkins.org).\n\
    \   o  Section 3.9 on HTTP was contributed by Dragana Damjanovic\n      (ddamjanovic@mozilla.com).\n\
    \   o  Section 3.10 on FLUTE/ALC was contributed by Vincent Roca\n      (vincent.roca@inria.fr).\n\
    \   o  Section 3.11 on NORM was contributed by Brian Adamson\n      (brian.adamson@nrl.navy.mil).\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Godred Fairhurst (editor)\n   University of Aberdeen\n\
    \   School of Engineering, Fraser Noble Building\n   Aberdeen AB24 3UE\n   Email:\
    \ gorry@erg.abdn.ac.uk\n   Brian Trammell (editor)\n   ETH Zurich\n   Gloriastrasse\
    \ 35\n   8092 Zurich\n   Switzerland\n   Email: ietf@trammell.ch\n   Mirja Kuehlewind\
    \ (editor)\n   ETH Zurich\n   Gloriastrasse 35\n   8092 Zurich\n   Switzerland\n\
    \   Email: mirja.kuehlewind@tik.ee.ethz.ch\n"
