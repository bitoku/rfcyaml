- title: __initial_text__
  contents:
  - '                    SIP: Session Initiation Protocol

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: IESG Note
  contents:
  - "IESG Note\n   The IESG intends to charter, in the near future, one or more working\n\
    \   groups to produce standards for \"name lookup\", where such names would\n\
    \   include electronic mail addresses and telephone numbers, and the\n   result\
    \ of such a lookup would be a list of attributes and\n   characteristics of the\
    \ user or terminal associated with the name.\n   Groups which are in need of a\
    \ \"name lookup\" protocol should follow\n   the development of these new working\
    \ groups rather than using SIP for\n   this function. In addition it is anticipated\
    \ that SIP will migrate\n   towards using such protocols, and SIP implementors\
    \ are advised to\n   monitor these efforts.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Session Initiation Protocol (SIP) is an application-layer control\n\
    \   (signaling) protocol for creating, modifying and terminating sessions\n  \
    \ with one or more participants. These sessions include Internet\n   multimedia\
    \ conferences, Internet telephone calls and multimedia\n   distribution. Members\
    \ in a session can communicate via multicast or\n   via a mesh of unicast relations,\
    \ or a combination of these.\n   SIP invitations used to create sessions carry\
    \ session descriptions\n   which allow participants to agree on a set of compatible\
    \ media types.\n   SIP supports user mobility by proxying and redirecting requests\
    \ to\n   the user's current location. Users can register their current\n   location.\
    \  SIP is not tied to any particular conference control\n   protocol. SIP is designed\
    \ to be independent of the lower-layer\n   transport protocol and can be extended\
    \ with additional capabilities.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1          Introduction ........................................\
    \    7\n   1.1        Overview of SIP Functionality .......................  \
    \  7\n   1.2        Terminology .........................................    8\n\
    \   1.3        Definitions .........................................    9\n  \
    \ 1.4        Overview of SIP Operation ...........................   12\n   1.4.1\
    \      SIP Addressing ......................................   12\n   1.4.2  \
    \    Locating a SIP Server ...............................   13\n   1.4.3    \
    \  SIP Transaction .....................................   14\n   1.4.4      SIP\
    \ Invitation ......................................   15\n   1.4.5      Locating\
    \ a User .....................................   17\n   1.4.6      Changing an\
    \ Existing Session ........................   18\n   1.4.7      Registration Services\
    \ ...............................   18\n   1.5        Protocol Properties .................................\
    \   18\n   1.5.1      Minimal State .......................................  \
    \ 18\n   1.5.2      Lower-Layer-Protocol Neutral ........................   18\n\
    \   1.5.3      Text-Based ..........................................   20\n  \
    \ 2          SIP Uniform Resource Locators .......................   20\n   3\
    \          SIP Message Overview ................................   24\n   4  \
    \        Request .............................................   26\n   4.1  \
    \      Request-Line ........................................   26\n   4.2    \
    \    Methods .............................................   27\n   4.2.1    \
    \  INVITE ..............................................   28\n   4.2.2      ACK\
    \ .................................................   29\n   4.2.3      OPTIONS\
    \ .............................................   29\n   4.2.4      BYE .................................................\
    \   30\n   4.2.5      CANCEL ..............................................  \
    \ 30\n   4.2.6      REGISTER ............................................   31\n\
    \   4.3        Request-URI .........................................   34\n  \
    \ 4.3.1      SIP Version .........................................   35\n   4.4\
    \        Option Tags .........................................   35\n   4.4.1\
    \      Registering New Option Tags with IANA ...............   35\n   5      \
    \    Response ............................................   36\n   5.1      \
    \  Status-Line .........................................   36\n   5.1.1      Status\
    \ Codes and Reason Phrases .....................   37\n   6          Header Field\
    \ Definitions ............................   39\n   6.1        General Header\
    \ Fields ...............................   41\n   6.2        Entity Header Fields\
    \ ................................   42\n   6.3        Request Header Fields ...............................\
    \   43\n   6.4        Response Header Fields ..............................  \
    \ 43\n   6.5        End-to-end and Hop-by-hop Headers ...................   43\n\
    \   6.6        Header Field Format .................................   43\n  \
    \ 6.7        Accept ..............................................   44\n   6.8\
    \        Accept-Encoding .....................................   44\n   6.9  \
    \      Accept-Language .....................................   45\n   6.10   \
    \    Allow ...............................................   45\n   6.11     \
    \  Authorization .......................................   45\n   6.12       Call-ID\
    \ .............................................   46\n   6.13       Contact .............................................\
    \   47\n   6.14       Content-Encoding ....................................  \
    \ 50\n   6.15       Content-Length ......................................   51\n\
    \   6.16       Content-Type ........................................   51\n  \
    \ 6.17       CSeq ................................................   52\n   6.18\
    \       Date ................................................   53\n   6.19  \
    \     Encryption ..........................................   54\n   6.20    \
    \   Expires .............................................   55\n   6.21      \
    \ From ................................................   56\n   6.22       Hide\
    \ ................................................   57\n   6.23       Max-Forwards\
    \ ........................................   59\n   6.24       Organization ........................................\
    \   59\n   6.25       Priority ............................................  \
    \ 60\n   6.26       Proxy-Authenticate ..................................   60\n\
    \   6.27       Proxy-Authorization .................................   61\n  \
    \ 6.28       Proxy-Require .......................................   61\n   6.29\
    \       Record-Route ........................................   62\n   6.30  \
    \     Require .............................................   63\n   6.31    \
    \   Response-Key ........................................   63\n   6.32      \
    \ Retry-After .........................................   64\n   6.33       Route\
    \ ...............................................   65\n   6.34       Server ..............................................\
    \   65\n   6.35       Subject .............................................  \
    \ 65\n   6.36       Timestamp ...........................................   66\n\
    \   6.37       To ..................................................   66\n  \
    \ 6.38       Unsupported .........................................   68\n   6.39\
    \       User-Agent ..........................................   68\n   6.40  \
    \     Via .................................................   68\n   6.40.1  \
    \   Requests ............................................   68\n   6.40.2    \
    \ Receiver-tagged Via Header Fields ...................   69\n   6.40.3     Responses\
    \ ...........................................   70\n   6.40.4     User Agent and\
    \ Redirect Servers .....................   70\n   6.40.5     Syntax ..............................................\
    \   71\n   6.41       Warning .............................................  \
    \ 72\n   6.42       WWW-Authenticate ....................................   74\n\
    \   7          Status Code Definitions .............................   75\n  \
    \ 7.1        Informational 1xx ...................................   75\n   7.1.1\
    \      100 Trying ..........................................   75\n   7.1.2  \
    \    180 Ringing .........................................   75\n   7.1.3    \
    \  181 Call Is Being Forwarded .........................   75\n   7.1.4      182\
    \ Queued ..........................................   76\n   7.2        Successful\
    \ 2xx ......................................   76\n   7.2.1      200 OK ..............................................\
    \   76\n   7.3        Redirection 3xx .....................................  \
    \ 76\n   7.3.1      300 Multiple Choices ................................   77\n\
    \   7.3.2      301 Moved Permanently ...............................   77\n  \
    \ 7.3.3      302 Moved Temporarily ...............................   77\n   7.3.4\
    \      305 Use Proxy .......................................   77\n   7.3.5  \
    \    380 Alternative Service .............................   78\n   7.4      \
    \  Request Failure 4xx .................................   78\n   7.4.1      400\
    \ Bad Request .....................................   78\n   7.4.2      401 Unauthorized\
    \ ....................................   78\n   7.4.3      402 Payment Required\
    \ ................................   78\n   7.4.4      403 Forbidden .......................................\
    \   78\n   7.4.5      404 Not Found .......................................  \
    \ 78\n   7.4.6      405 Method Not Allowed ..............................   78\n\
    \   7.4.7      406 Not Acceptable ..................................   79\n  \
    \ 7.4.8      407 Proxy Authentication Required ...................   79\n   7.4.9\
    \      408 Request Timeout .................................   79\n   7.4.10 \
    \    409 Conflict ........................................   79\n   7.4.11   \
    \  410 Gone ............................................   79\n   7.4.12     411\
    \ Length Required .................................   79\n   7.4.13     413 Request\
    \ Entity Too Large ........................   80\n   7.4.14     414 Request-URI\
    \ Too Long ............................   80\n   7.4.15     415 Unsupported Media\
    \ Type ..........................   80\n   7.4.16     420 Bad Extension ...................................\
    \   80\n   7.4.17     480 Temporarily Unavailable .........................  \
    \ 80\n   7.4.18     481 Call Leg/Transaction Does Not Exist .............   81\n\
    \   7.4.19     482 Loop Detected ...................................   81\n  \
    \ 7.4.20     483 Too Many Hops ...................................   81\n   7.4.21\
    \     484 Address Incomplete ..............................   81\n   7.4.22  \
    \   485 Ambiguous .......................................   81\n   7.4.23    \
    \ 486 Busy Here .......................................   82\n   7.5        Server\
    \ Failure 5xx ..................................   82\n   7.5.1      500 Server\
    \ Internal Error ...........................   82\n   7.5.2      501 Not Implemented\
    \ .................................   82\n   7.5.3      502 Bad Gateway .....................................\
    \   82\n   7.5.4      503 Service Unavailable .............................  \
    \ 83\n   7.5.5      504 Gateway Time-out ................................   83\n\
    \   7.5.6      505 Version Not Supported ...........................   83\n  \
    \ 7.6        Global Failures 6xx .................................   83\n   7.6.1\
    \      600 Busy Everywhere .................................   83\n   7.6.2  \
    \    603 Decline .........................................   84\n   7.6.3    \
    \  604 Does Not Exist Anywhere .........................   84\n   7.6.4      606\
    \ Not Acceptable ..................................   84\n   8          SIP Message\
    \ Body ....................................   84\n   8.1        Body Inclusion\
    \ ......................................   84\n   8.2        Message Body Type\
    \ ...................................   85\n   8.3        Message Body Length\
    \ .................................   85\n   9          Compact Form ........................................\
    \   85\n   10         Behavior of SIP Clients and Servers .................  \
    \ 86\n   10.1       General Remarks .....................................   86\n\
    \   10.1.1     Requests ............................................   86\n  \
    \ 10.1.2     Responses ...........................................   87\n   10.2\
    \       Source Addresses, Destination Addresses and\n              Connections\
    \ .........................................   88\n   10.2.1     Unicast UDP .........................................\
    \   88\n   10.2.2     Multicast UDP .......................................  \
    \ 88\n   10.3       TCP .................................................   89\n\
    \   10.4       Reliability for BYE, CANCEL, OPTIONS, REGISTER\n              Requests\
    \ ............................................   90\n   10.4.1     UDP .................................................\
    \   90\n   10.4.2     TCP .................................................  \
    \ 91\n   10.5       Reliability for INVITE Requests .....................   91\n\
    \   10.5.1     UDP .................................................   92\n  \
    \ 10.5.2     TCP .................................................   95\n   10.6\
    \       Reliability for ACK Requests ........................   95\n   10.7  \
    \     ICMP Handling .......................................   95\n   11      \
    \   Behavior of SIP User Agents .........................   95\n   11.1      \
    \ Caller Issues Initial INVITE Request ................   96\n   11.2       Callee\
    \ Issues Response ..............................   96\n   11.3       Caller Receives\
    \ Response to Initial Request .........   96\n   11.4       Caller or Callee Generate\
    \ Subsequent Requests .......   97\n   11.5       Receiving Subsequent Requests\
    \ .......................   97\n   12         Behavior of SIP Proxy and Redirect\
    \ Servers ..........   97\n   12.1       Redirect Server .....................................\
    \   97\n   12.2       User Agent Server ...................................  \
    \ 98\n   12.3       Proxy Server ........................................   98\n\
    \   12.3.1     Proxying Requests ...................................   98\n  \
    \ 12.3.2     Proxying Responses ..................................   99\n   12.3.3\
    \     Stateless Proxy: Proxying Responses .................   99\n   12.3.4  \
    \   Stateful Proxy: Receiving Requests ..................   99\n   12.3.5    \
    \ Stateful Proxy: Receiving ACKs ......................   99\n   12.3.6     Stateful\
    \ Proxy: Receiving Responses .................  100\n   12.3.7     Stateless,\
    \ Non-Forking Proxy ........................  100\n   12.4       Forking Proxy\
    \ .......................................  100\n   13         Security Considerations\
    \ .............................  104\n   13.1       Confidentiality and Privacy:\
    \ Encryption .............  104\n   13.1.1     End-to-End Encryption ...............................\
    \  104\n   13.1.2     Privacy of SIP Responses ............................  107\n\
    \   13.1.3     Encryption by Proxies ...............................  108\n  \
    \ 13.1.4     Hop-by-Hop Encryption ...............................  108\n   13.1.5\
    \     Via field encryption ................................  108\n   13.2    \
    \   Message Integrity and Access Control:\n              Authentication ......................................\
    \  109\n   13.2.1     Trusting responses ..................................  112\n\
    \   13.3       Callee Privacy ......................................  113\n  \
    \ 13.4       Known Security Problems .............................  113\n   14\
    \         SIP Authentication using HTTP Basic and Digest\n              Schemes\
    \ .............................................  113\n   14.1       Framework\
    \ ...........................................  113\n   14.2       Basic Authentication\
    \ ................................  114\n   14.3       Digest Authentication ...............................\
    \  114\n   14.4       Proxy-Authentication ................................  115\n\
    \   15         SIP Security Using PGP ..............................  115\n  \
    \ 15.1       PGP Authentication Scheme ...........................  115\n   15.1.1\
    \     The WWW-Authenticate Response Header ................  116\n   15.1.2  \
    \   The Authorization Request Header ....................  117\n   15.2      \
    \ PGP Encryption Scheme ...............................  118\n   15.3       Response-Key\
    \ Header Field for PGP ...................  119\n   16         Examples ............................................\
    \  119\n   16.1       Registration ........................................  119\n\
    \   16.2       Invitation to a Multicast Conference ................  121\n  \
    \ 16.2.1     Request .............................................  121\n   16.2.2\
    \     Response ............................................  122\n   16.3    \
    \   Two-party Call ......................................  123\n   16.4      \
    \ Terminating a Call ..................................  125\n   16.5       Forking\
    \ Proxy .......................................  126\n   16.6       Redirects\
    \ ...........................................  130\n   16.7       Negotiation\
    \ .........................................  131\n   16.8       OPTIONS Request\
    \ .....................................  132\n   A          Minimal Implementation\
    \ ..............................  134\n   A.1        Client ..............................................\
    \  134\n   A.2        Server ..............................................  135\n\
    \   A.3        Header Processing ...................................  135\n  \
    \ B          Usage of the Session Description Protocol (SDP)......  136\n   B.1\
    \        Configuring Media Streams ...........................  136\n   B.2  \
    \      Setting SDP Values for Unicast ......................  138\n   B.3    \
    \    Multicast Operation .................................  139\n   B.4      \
    \  Delayed Media Streams ...............................  139\n   B.5        Putting\
    \ Media Streams on Hold .......................  139\n   B.6        Subject and\
    \ SDP \"s=\" Line ...........................  140\n   B.7        The SDP \"o=\"\
    \ Line ...................................  140\n   C          Summary of Augmented\
    \ BNF ............................  141\n   C.1        Basic Rules .........................................\
    \  143\n   D          Using SRV DNS Records ...............................  146\n\
    \   E          IANA Considerations .................................  148\n  \
    \ F          Acknowledgments .....................................  149\n   G\
    \          Authors' Addresses ..................................  149\n   H  \
    \        Bibliography ........................................  150\n   I    \
    \      Full Copyright Statement ............................  153\n"
- title: 1 Introduction
  contents:
  - '1 Introduction

    '
- title: 1.1 Overview of SIP Functionality
  contents:
  - "1.1 Overview of SIP Functionality\n   The Session Initiation Protocol (SIP) is\
    \ an application-layer control\n   protocol that can establish, modify and terminate\
    \ multimedia sessions\n   or calls. These multimedia sessions include multimedia\
    \ conferences,\n   distance learning, Internet telephony and similar applications.\
    \ SIP\n   can invite both persons and \"robots\", such as a media storage\n  \
    \ service.  SIP can invite parties to both unicast and multicast\n   sessions;\
    \ the initiator does not necessarily have to be a member of\n   the session to\
    \ which it is inviting. Media and participants can be\n   added to an existing\
    \ session.\n   SIP can be used to initiate sessions as well as invite members\
    \ to\n   sessions that have been advertised and established by other means.\n\
    \   Sessions can be advertised using multicast protocols such as SAP,\n   electronic\
    \ mail, news groups, web pages or directories (LDAP), among\n   others.\n   SIP\
    \ transparently supports name mapping and redirection services,\n   allowing the\
    \ implementation of ISDN and Intelligent Network telephony\n   subscriber services.\
    \ These facilities also enable personal mobility.\n   In the parlance of telecommunications\
    \ intelligent network services,\n   this is defined as: \"Personal mobility is\
    \ the ability of end users to\n   originate and receive calls and access subscribed\
    \ telecommunication\n   services on any terminal in any location, and the ability\
    \ of the\n   network to identify end users as they move. Personal mobility is\n\
    \   based on the use of a unique personal identity (i.e., personal\n   number).\"\
    \ [1]. Personal mobility complements terminal mobility, i.e.,\n   the ability\
    \ to maintain communications when moving a single end\n   system from one subnet\
    \ to another.\n   SIP supports five facets of establishing and terminating multimedia\n\
    \   communications:\n   User location: determination of the end system to be used\
    \ for\n        communication;\n   User capabilities: determination of the media\
    \ and media parameters to\n        be used;\n   User availability: determination\
    \ of the willingness of the called\n        party to engage in communications;\n\
    \   Call setup: \"ringing\", establishment of call parameters at both\n      \
    \  called and calling party;\n   Call handling: including transfer and termination\
    \ of calls.\n   SIP can also initiate multi-party calls using a multipoint control\n\
    \   unit (MCU) or fully-meshed interconnection instead of multicast.\n   Internet\
    \ telephony gateways that connect Public Switched Telephone\n   Network (PSTN)\
    \ parties can also use SIP to set up calls between them.\n   SIP is designed as\
    \ part of the overall IETF multimedia data and\n   control architecture currently\
    \ incorporating protocols such as RSVP\n   (RFC 2205 [2]) for reserving network\
    \ resources, the real-time\n   transport protocol (RTP) (RFC 1889 [3]) for transporting\
    \ real-time\n   data and providing QOS feedback, the real-time streaming protocol\n\
    \   (RTSP) (RFC 2326 [4]) for controlling delivery of streaming media,\n   the\
    \ session announcement protocol (SAP) [5] for advertising\n   multimedia sessions\
    \ via multicast and the session description\n   protocol (SDP) (RFC 2327 [6])\
    \ for describing multimedia sessions.\n   However, the functionality and operation\
    \ of SIP does not depend on\n   any of these protocols.\n   SIP can also be used\
    \ in conjunction with other call setup and\n   signaling protocols. In that mode,\
    \ an end system uses SIP exchanges\n   to determine the appropriate end system\
    \ address and protocol from a\n   given address that is protocol-independent.\
    \ For example, SIP could be\n   used to determine that the party can be reached\
    \ via H.323 [7], obtain\n   the H.245 [8] gateway and user address and then use\
    \ H.225.0 [9] to\n   establish the call.\n   In another example, SIP might be\
    \ used to determine that the callee is\n   reachable via the PSTN and indicate\
    \ the phone number to be called,\n   possibly suggesting an Internet-to-PSTN gateway\
    \ to be used.\n   SIP does not offer conference control services such as floor\
    \ control\n   or voting and does not prescribe how a conference is to be managed,\n\
    \   but SIP can be used to introduce conference control protocols. SIP\n   does\
    \ not allocate multicast addresses.\n   SIP can invite users to sessions with\
    \ and without resource\n   reservation.  SIP does not reserve resources, but can\
    \ convey to the\n   invited system the information necessary to do this.\n"
- title: 1.2 Terminology
  contents:
  - "1.2 Terminology\n   In this document, the key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\",\n   \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\",\n   and \"OPTIONAL\" are to be interpreted as described in RFC 2119\
    \ [10]\n   and indicate requirement levels for compliant SIP implementations.\n"
- title: 1.3 Definitions
  contents:
  - "1.3 Definitions\n   This specification uses a number of terms to refer to the\
    \ roles\n   played by participants in SIP communications. The definitions of\n\
    \   client, server and proxy are similar to those used by the Hypertext\n   Transport\
    \ Protocol (HTTP) (RFC 2068 [11]). The terms and generic\n   syntax of URI and\
    \ URL are defined in RFC 2396 [12]. The following\n   terms have special significance\
    \ for SIP.\n   Call: A call consists of all participants in a conference invited\
    \ by\n        a common source. A SIP call is identified by a globally unique\n\
    \        call-id (Section 6.12). Thus, if a user is, for example, invited\n  \
    \      to the same multicast session by several people, each of these\n      \
    \  invitations will be a unique call. A point-to-point Internet\n        telephony\
    \ conversation maps into a single SIP call. In a\n        multiparty conference\
    \ unit (MCU) based call-in conference, each\n        participant uses a separate\
    \ call to invite himself to the MCU.\n   Call leg: A call leg is identified by\
    \ the combination of Call-ID, To\n        and From.\n   Client: An application\
    \ program that sends SIP requests. Clients may\n        or may not interact directly\
    \ with a human user.  User agents and\n        proxies contain clients (and servers).\n\
    \   Conference: A multimedia session (see below), identified by a common\n   \
    \     session description. A conference can have zero or more members\n      \
    \  and includes the cases of a multicast conference, a full-mesh\n        conference\
    \ and a two-party \"telephone call\", as well as\n        combinations of these.\
    \  Any number of calls can be used to\n        create a conference.\n   Downstream:\
    \ Requests sent in the direction from the caller to the\n        callee (i.e.,\
    \ user agent client to user agent server).\n   Final response: A response that\
    \ terminates a SIP transaction, as\n        opposed to a provisional response\
    \ that does not. All 2xx, 3xx,\n        4xx, 5xx and 6xx responses are final.\n\
    \   Initiator, calling party, caller: The party initiating a conference\n    \
    \    invitation. Note that the calling party does not have to be the\n       \
    \ same as the one creating the conference.\n   Invitation: A request sent to a\
    \ user (or service) requesting\n        participation in a session. A successful\
    \ SIP invitation consists\n        of two transactions: an INVITE request followed\
    \ by an ACK\n        request.\n   Invitee, invited user, called party, callee:\
    \ The person or service\n        that the calling party is trying to invite to\
    \ a conference.\n   Isomorphic request or response: Two requests or responses\
    \ are defined\n        to be isomorphic for the purposes of this document if they\
    \ have\n        the same values for the Call-ID, To, From and CSeq header\n  \
    \      fields. In addition, isomorphic requests have to have the same\n      \
    \  Request-URI.\n   Location server: See location service.\n   Location service:\
    \ A location service is used by a SIP redirect or\n        proxy server to obtain\
    \ information about a callee's possible\n        location(s). Location services\
    \ are offered by location servers.\n        Location servers MAY be co-located\
    \ with a SIP server, but the\n        manner in which a SIP server requests location\
    \ services is\n        beyond the scope of this document.\n   Parallel search:\
    \ In a parallel search, a proxy issues several\n        requests to possible user\
    \ locations upon receiving an incoming\n        request.  Rather than issuing\
    \ one request and then waiting for\n        the final response before issuing\
    \ the next request as in a\n        sequential search , a parallel search issues\
    \ requests without\n        waiting for the result of previous requests.\n   Provisional\
    \ response: A response used by the server to indicate\n        progress, but that\
    \ does not terminate a SIP transaction. 1xx\n        responses are provisional,\
    \ other responses are considered final.\n   Proxy, proxy server: An intermediary\
    \ program that acts as both a\n        server and a client for the purpose of\
    \ making requests on behalf\n        of other clients. Requests are serviced internally\
    \ or by passing\n        them on, possibly after translation, to other servers.\
    \ A proxy\n        interprets, and, if necessary, rewrites a request message before\n\
    \        forwarding it.\n   Redirect server: A redirect server is a server that\
    \ accepts a SIP\n        request, maps the address into zero or more new addresses\
    \ and\n        returns these addresses to the client. Unlike a proxy server ,\n\
    \        it does not initiate its own SIP request. Unlike a user agent\n     \
    \   server , it does not accept calls.\n   Registrar: A registrar is a server\
    \ that accepts REGISTER requests. A\n        registrar is typically co-located\
    \ with a proxy or redirect\n        server and MAY offer location services.\n\
    \   Ringback: Ringback is the signaling tone produced by the calling\n       \
    \ client's application indicating that a called party is being\n        alerted\
    \ (ringing).\n   Server: A server is an application program that accepts requests\
    \ in\n        order to service requests and sends back responses to those\n  \
    \      requests.  Servers are either proxy, redirect or user agent\n        servers\
    \ or registrars.\n   Session: From the SDP specification: \"A multimedia session\
    \ is a set\n        of multimedia senders and receivers and the data streams flowing\n\
    \        from senders to receivers. A multimedia conference is an example\n  \
    \      of a multimedia session.\" (RFC 2327 [6]) (A session as defined\n     \
    \   for SDP can comprise one or more RTP sessions.) As defined, a\n        callee\
    \ can be invited several times, by different calls, to the\n        same session.\
    \ If SDP is used, a session is defined by the\n        concatenation of the user\
    \ name , session id , network type ,\n        address type and address elements\
    \ in the origin field.\n   (SIP) transaction: A SIP transaction occurs between\
    \ a client and a\n        server and comprises all messages from the first request\
    \ sent\n        from the client to the server up to a final (non-1xx) response\n\
    \        sent from the server to the client. A transaction is identified\n   \
    \     by the CSeq sequence number (Section 6.17) within a single call\n      \
    \  leg.  The ACK request has the same CSeq number as the\n        corresponding\
    \ INVITE request, but comprises a transaction of its\n        own.\n   Upstream:\
    \ Responses sent in the direction from the user agent server\n        to the user\
    \ agent client.\n   URL-encoded: A character string encoded according to RFC 1738,\n\
    \        Section 2.2 [13].\n   User agent client (UAC), calling user agent: A\
    \ user agent client is a\n        client application that initiates the SIP request.\n\
    \   User agent server (UAS), called user agent: A user agent server is a\n   \
    \     server application that contacts the user when a SIP request is\n      \
    \  received and that returns a response on behalf of the user. The\n        response\
    \ accepts, rejects or redirects the request.\n   User agent (UA): An application\
    \ which contains both a user agent\n        client and user agent server.\n  \
    \ An application program MAY be capable of acting both as a client and\n   a server.\
    \ For example, a typical multimedia conference control\n   application would act\
    \ as a user agent client to initiate calls or to\n   invite others to conferences\
    \ and as a user agent server to accept\n   invitations. The properties of the\
    \ different SIP server types are\n   summarized in Table 1.\n    property    \
    \               redirect  proxy   user agent  registrar\n                    \
    \            server   server    server\n    __________________________________________________________________\n\
    \    also acts as a SIP client     no      yes        no         no\n    returns\
    \ 1xx status           yes      yes       yes         yes\n    returns 2xx status\
    \            no      yes       yes         yes\n    returns 3xx status       \
    \    yes      yes       yes         yes\n    returns 4xx status           yes\
    \      yes       yes         yes\n    returns 5xx status           yes      yes\
    \       yes         yes\n    returns 6xx status            no      yes       yes\
    \         yes\n    inserts Via header            no      yes        no       \
    \  no\n    accepts ACK                  yes      yes       yes         no\n  \
    \ Table 1: Properties of the different SIP server types\n"
- title: 1.4 Overview of SIP Operation
  contents:
  - "1.4 Overview of SIP Operation\n   This section explains the basic protocol functionality\
    \ and operation.\n   Callers and callees are identified by SIP addresses, described\
    \ in\n   Section 1.4.1. When making a SIP call, a caller first locates the\n \
    \  appropriate server (Section 1.4.2) and then sends a SIP request\n   (Section\
    \ 1.4.3). The most common SIP operation is the invitation\n   (Section 1.4.4).\
    \ Instead of directly reaching the intended callee, a\n   SIP request may be redirected\
    \ or may trigger a chain of new SIP\n   requests by proxies (Section 1.4.5). Users\
    \ can register their\n   location(s) with SIP servers (Section 4.2.6).\n"
- title: 1.4.1 SIP Addressing
  contents:
  - "1.4.1 SIP Addressing\n   The \"objects\" addressed by SIP are users at hosts,\
    \ identified by a\n   SIP URL. The SIP URL takes a form similar to a mailto or\
    \ telnet URL,\n   i.e., user@host.  The user part is a user name or a telephone\
    \ number.\n   The host part is either a domain name or a numeric network address.\n\
    \   See section 2 for a detailed discussion of SIP URL's.\n   A user's SIP address\
    \ can be obtained out-of-band, can be learned via\n   existing media agents, can\
    \ be included in some mailers' message\n   headers, or can be recorded during\
    \ previous invitation interactions.\n   In many cases, a user's SIP URL can be\
    \ guessed from their email\n   address.\n   A SIP URL address can designate an\
    \ individual (possibly located at\n   one of several end systems), the first available\
    \ person from a group\n   of individuals or a whole group. The form of the address,\
    \ for\n   example, sip:sales@example.com , is not sufficient, in general, to\n\
    \   determine the intent of the caller.\n   If a user or service chooses to be\
    \ reachable at an address that is\n   guessable from the person's name and organizational\
    \ affiliation, the\n   traditional method of ensuring privacy by having an unlisted\
    \ \"phone\"\n   number is compromised. However, unlike traditional telephony,\
    \ SIP\n   offers authentication and access control mechanisms and can avail\n\
    \   itself of lower-layer security mechanisms, so that client software\n   can\
    \ reject unauthorized or undesired call attempts.\n"
- title: 1.4.2 Locating a SIP Server
  contents:
  - "1.4.2 Locating a SIP Server\n   When a client wishes to send a request, the client\
    \ either sends it to\n   a locally configured SIP proxy server (as in HTTP), independent\
    \ of\n   the Request-URI, or sends it to the IP address and port corresponding\n\
    \   to the Request-URI.\n   For the latter case, the client must determine the\
    \ protocol, port and\n   IP address of a server to which to send the request.\
    \ A client SHOULD\n   follow the steps below to obtain this information, but MAY\
    \ follow the\n   alternative, optional procedure defined in Appendix D. At each\
    \ step,\n   unless stated otherwise, the client SHOULD try to contact a server\
    \ at\n   the port number listed in the Request-URI. If no port number is\n   present\
    \ in the Request-URI, the client uses port 5060. If the\n   Request-URI specifies\
    \ a protocol (TCP or UDP), the client contacts\n   the server using that protocol.\
    \ If no protocol is specified, the\n   client tries UDP (if UDP is supported).\
    \ If the attempt fails, or if\n   the client doesn't support UDP but supports\
    \ TCP, it then tries TCP.\n   A client SHOULD be able to interpret explicit network\
    \ notifications\n   (such as ICMP messages) which indicate that a server is not\n\
    \   reachable, rather than relying solely on timeouts. (For socket-based\n   programs:\
    \ For TCP, connect() returns ECONNREFUSED if the client could\n   not connect\
    \ to a server at that address. For UDP, the socket needs to\n   be bound to the\
    \ destination address using connect() rather than\n   sendto() or similar so that\
    \ a second write() fails with ECONNREFUSED\n   if there is no server listening)\
    \ If the client finds the server is\n   not reachable at a particular address,\
    \ it SHOULD behave as if it had\n   received a 400-class error response to that\
    \ request.\n   The client tries to find one or more addresses for the SIP server\
    \ by\n   querying DNS. The procedure is as follows:\n        1.   If the host\
    \ portion of the Request-URI is an IP address,\n             the client contacts\
    \ the server at the given address.\n             Otherwise, the client proceeds\
    \ to the next step.\n        2.   The client queries the DNS server for address\
    \ records for\n             the host portion of the Request-URI. If the DNS server\n\
    \             returns no address records, the client stops, as it has\n      \
    \       been unable to locate a server. By address record, we mean\n         \
    \    A RR's, AAAA RR's, or other similar address records, chosen\n           \
    \  according to the client's network protocol capabilities.\n        There are\
    \ no mandatory rules on how to select a host name\n        for a SIP server. Users\
    \ are encouraged to name their SIP\n        servers using the sip.domainname (i.e.,\
    \ sip.example.com)\n        convention, as specified in RFC 2219 [16]. Users may\
    \ only\n        know an email address instead of a full SIP URL for a\n      \
    \  callee, however. In that case, implementations may be able\n        to increase\
    \ the likelihood of reaching a SIP server for\n        that domain by constructing\
    \ a SIP URL from that email\n        address by prefixing the host name with \"\
    sip.\". In the\n        future, this mechanism is likely to become unnecessary\
    \ as\n        better DNS techniques, such as the one in Appendix D,\n        become\
    \ widely available.\n   A client MAY cache a successful DNS query result. A successful\
    \ query\n   is one which contained records in the answer, and a server was\n \
    \  contacted at one of the addresses from the answer. When the client\n   wishes\
    \ to send a request to the same host, it MUST start the search\n   as if it had\
    \ just received this answer from the name server. The\n   client MUST follow the\
    \ procedures in RFC1035 [15] regarding DNS cache\n   invalidation when the DNS\
    \ time-to-live expires.\n"
- title: 1.4.3 SIP Transaction
  contents:
  - "1.4.3 SIP Transaction\n   Once the host part has been resolved to a SIP server,\
    \ the client\n   sends one or more SIP requests to that server and receives one\
    \ or\n   more responses from the server. A request (and its retransmissions)\n\
    \   together with the responses triggered by that request make up a SIP\n   transaction.\
    \  All responses to a request contain the same values in\n   the Call-ID, CSeq,\
    \ To, and From fields (with the possible addition of\n   a tag in the To field\
    \ (section 6.37)). This allows responses to be\n   matched with requests. The\
    \ ACK request following an INVITE is not\n   part of the transaction since it\
    \ may traverse a different set of\n   hosts.\n   If TCP is used, request and responses\
    \ within a single SIP transaction\n   are carried over the same TCP connection\
    \ (see Section 10). Several\n   SIP requests from the same client to the same\
    \ server MAY use the same\n   TCP connection or MAY use a new connection for each\
    \ request.\n   If the client sent the request via unicast UDP, the response is\
    \ sent\n   to the address contained in the next Via header field (Section 6.40)\n\
    \   of the response. If the request is sent via multicast UDP, the\n   response\
    \ is directed to the same multicast address and destination\n   port. For UDP,\
    \ reliability is achieved using retransmission (Section\n   10).\n   The SIP message\
    \ format and operation is independent of the transport\n   protocol.\n"
- title: 1.4.4 SIP Invitation
  contents:
  - "1.4.4 SIP Invitation\n   A successful SIP invitation consists of two requests,\
    \ INVITE followed\n   by ACK. The INVITE (Section 4.2.1) request asks the callee\
    \ to join a\n   particular conference or establish a two-party conversation. After\n\
    \   the callee has agreed to participate in the call, the caller confirms\n  \
    \ that it has received that response by sending an ACK (Section 4.2.2)\n   request.\
    \ If the caller no longer wants to participate in the call, it\n   sends a BYE\
    \ request instead of an ACK.\n   The INVITE request typically contains a session\
    \ description, for\n   example written in SDP (RFC 2327 [6]) format, that provides\
    \ the\n   called party with enough information to join the session. For\n   multicast\
    \ sessions, the session description enumerates the media\n   types and formats\
    \ that are allowed to be distributed to that session.\n   For a unicast session,\
    \ the session description enumerates the media\n   types and formats that the\
    \ caller is willing to use and where it\n   wishes the media data to be sent.\
    \ In either case, if the callee\n   wishes to accept the call, it responds to\
    \ the invitation by returning\n   a similar description listing the media it wishes\
    \ to use. For a\n   multicast session, the callee SHOULD only return a session\n\
    \   description if it is unable to receive the media indicated in the\n   caller's\
    \ description or wants to receive data via unicast.\n   The protocol exchanges\
    \ for the INVITE method are shown in Fig. 1 for\n   a proxy server and in Fig.\
    \ 2 for a redirect server. (Note that the\n   messages shown in the figures have\
    \ been abbreviated slightly.) In\n   Fig. 1, the proxy server accepts the INVITE\
    \ request (step 1),\n   contacts the location service with all or parts of the\
    \ address (step\n   2) and obtains a more precise location (step 3). The proxy\
    \ server\n   then issues a SIP INVITE request to the address(es) returned by the\n\
    \   location service (step 4). The user agent server alerts the user\n   (step\
    \ 5) and returns a success indication to the proxy server (step\n   6). The proxy\
    \ server then returns the success result to the original\n   caller (step 7).\
    \ The receipt of this message is confirmed by the\n   caller using an ACK request,\
    \ which is forwarded to the callee (steps\n   8 and 9). Note that an ACK can also\
    \ be sent directly to the callee,\n   bypassing the proxy. All requests and responses\
    \ have the same Call-\n   ID.\n                                         +.......\
    \ cs.columbia.edu .......+\n                                         :       \
    \                        :\n                                         : (~~~~~~~~~~)\
    \                  :\n                                         : ( location )\
    \                  :\n                                         : ( service  )\
    \                  :\n                                         : (~~~~~~~~~~)\
    \                  :\n                                         :     ^    |  \
    \                  :\n                                         :     | hgs@lab\
    \                 :\n                                         :    2|   3|   \
    \                 :\n                                         :     |    |   \
    \                 :\n                                         : henning  |   \
    \                 : \n"
- title: '+.. cs.tu-berlin.de ..+ 1: INVITE        :     |    |                    :'
  contents:
  - '+.. cs.tu-berlin.de ..+ 1: INVITE        :     |    |                    :

    '
- title: ':                     :    henning@cs.col:     |   \/ 4: INVITE  5: ring
    :'
  contents:
  - ':                     :    henning@cs.col:     |   \/ 4: INVITE  5: ring :

    '
- title: ': cz@cs.tu-berlin.de ========================>(~~~~~~)=========>(~~~~~~)
    :'
  contents:
  - ': cz@cs.tu-berlin.de ========================>(~~~~~~)=========>(~~~~~~) :

    '
- title: ':                    <........................(      )<.........(      )
    :'
  contents:
  - ':                    <........................(      )<.........(      ) :

    '
- title: ':                     : 7: 200 OK        :    (      )6: 200 OK (      )
    :'
  contents:
  - ':                     : 7: 200 OK        :    (      )6: 200 OK (      ) :

    '
- title: ':                     :                  :    ( work )          ( lab  )
    :'
  contents:
  - ':                     :                  :    ( work )          ( lab  ) :

    '
- title: ':                     : 8: ACK           :    (      )9: ACK    (      )
    :'
  contents:
  - ':                     : 8: ACK           :    (      )9: ACK    (      ) :

    '
- title: ':                    ========================>(~~~~~~)=========>(~~~~~~)
    :'
  contents:
  - ':                    ========================>(~~~~~~)=========>(~~~~~~) :

    '
- title: +.....................+                  +...............................+
  contents:
  - "+.....................+                  +...............................+\n\
    \  ====> SIP request                                                         \n\
    \  ....> SIP response                                                       \n\
    \   ^\n   |    non-SIP protocols                                             \
    \     \n   |\n   Figure 1: Example of SIP proxy server\n   The redirect server\
    \ shown in Fig. 2 accepts the INVITE request (step\n   1), contacts the location\
    \ service as before (steps 2 and 3) and,\n   instead of contacting the newly found\
    \ address itself, returns the\n   address to the caller (step 4), which is then\
    \ acknowledged via an ACK\n   request (step 5). The caller issues a new request,\
    \ with the same\n   call-ID but a higher CSeq, to the address returned by the\
    \ first\n   server (step 6). In the example, the call succeeds (step 7). The\n\
    \   caller and callee complete the handshake with an ACK (step 8).\n   The next\
    \ section discusses what happens if the location service\n   returns more than\
    \ one possible alternative.\n"
- title: 1.4.5 Locating a User
  contents:
  - "1.4.5 Locating a User\n   A callee may move between a number of different end\
    \ systems over\n   time.  These locations can be dynamically registered with the\
    \ SIP\n   server (Sections 1.4.7, 4.2.6). A location server MAY also use one or\n\
    \   more other protocols, such as finger (RFC 1288 [17]), rwhois (RFC\n   2167\
    \ [18]), LDAP (RFC 1777 [19]), multicast-based protocols [20] or\n   operating-system\
    \ dependent mechanisms to actively determine the end\n   system where a user might\
    \ be reachable. A location server MAY return\n   several locations because the\
    \ user is logged in at several hosts\n   simultaneously or because the location\
    \ server has (temporarily)\n   inaccurate information. The SIP server combines\
    \ the results to yield\n   a list of a zero or more locations.\n   The action\
    \ taken on receiving a list of locations varies with the\n   type of SIP server.\
    \ A SIP redirect server returns the list to the\n   client as Contact headers\
    \ (Section 6.13). A SIP proxy server can\n   sequentially or in parallel try the\
    \ addresses until the call is\n   successful (2xx response) or the callee has\
    \ declined the call (6xx\n   response). With sequential attempts, a proxy server\
    \ can implement an\n   \"anycast\" service.\n   If a proxy server forwards a SIP\
    \ request, it MUST add itself to the\n   beginning of the list of forwarders noted\
    \ in the Via (Section 6.40)\n   headers. The Via trace ensures that replies can\
    \ take the same path\n   back, ensuring correct operation through compliant firewalls\
    \ and\n   avoiding request loops. On the response path, each host MUST remove\n\
    \   its Via, so that routing internal information is hidden from the\n   callee\
    \ and outside networks. A proxy server MUST check that it does\n   not generate\
    \ a request to a host listed in the Via sent-by, via-\n   received or via-maddr\
    \ parameters (Section 6.40). (Note: If a host has\n   several names or network\
    \ addresses, this does not always work.  Thus,\n   each host also checks if it\
    \ is part of the Via list.)\n   A SIP invitation may traverse more than one SIP\
    \ proxy server. If one\n   of these \"forks\" the request, i.e., issues more than\
    \ one request in\n   response to receiving the invitation request, it is possible\
    \ that a\n   client is reached, independently, by more than one copy of the\n\
    \   invitation request. Each of these copies bears the same Call-ID. The\n   user\
    \ agent MUST return the same status response returned in the first\n   response.\
    \ Duplicate requests are not an error.\n"
- title: 1.4.6 Changing an Existing Session
  contents:
  - "1.4.6 Changing an Existing Session\n   In some circumstances, it is desirable\
    \ to change the parameters of an\n   existing session. This is done by re-issuing\
    \ the INVITE, using the\n   same Call-ID, but a new or different body or header\
    \ fields to convey\n   the new information. This re INVITE MUST have a higher\
    \ CSeq than any\n   previous request from the client to the server.\n   For example,\
    \ two parties may have been conversing and then want to\n   add a third party,\
    \ switching to multicast for efficiency.  One of the\n   participants invites\
    \ the third party with the new multicast address\n   and simultaneously sends\
    \ an INVITE to the second party, with the new\n   multicast session description,\
    \ but with the old call identifier.\n"
- title: 1.4.7 Registration Services
  contents:
  - "1.4.7 Registration Services\n   The REGISTER request allows a client to let a\
    \ proxy or redirect\n   server know at which address(es) it can be reached. A\
    \ client MAY also\n   use it to install call handling features at the server.\n"
- title: 1.5 Protocol Properties
  contents:
  - '1.5 Protocol Properties

    '
- title: 1.5.1 Minimal State
  contents:
  - "1.5.1 Minimal State\n   A single conference session or call involves one or more\
    \ SIP\n   request-response transactions. Proxy servers do not have to keep\n \
    \  state for a particular call, however, they MAY maintain state for a\n   single\
    \ SIP transaction, as discussed in Section 12. For efficiency, a\n   server MAY\
    \ cache the results of location service requests.\n"
- title: 1.5.2 Lower-Layer-Protocol Neutral
  contents:
  - "1.5.2 Lower-Layer-Protocol Neutral\n   SIP makes minimal assumptions about the\
    \ underlying transport and\n   network-layer protocols. The lower-layer can provide\
    \ either a packet\n   or a byte stream service, with reliable or unreliable service.\n\
    \   In an Internet context, SIP is able to utilize both UDP and TCP as\n   transport\
    \ protocols, among others. UDP allows the application to more\n   carefully control\
    \ the timing of messages and their retransmission, to\n   perform parallel searches\
    \ without requiring TCP connection state for\n   each outstanding request, and\
    \ to use multicast. Routers can more\n   readily snoop SIP UDP packets. TCP allows\
    \ easier passage through\n   existing firewalls.\n                           \
    \              +....... cs.columbia.edu .......+\n                           \
    \              :                               :\n                           \
    \              : (~~~~~~~~~~)                  :\n                           \
    \              : ( location )                  :\n                           \
    \              : ( service  )                  :\n                           \
    \              : (~~~~~~~~~~)                  :\n                           \
    \              :    ^   |                      :\n                           \
    \              :    | hgs@lab                  :\n                           \
    \              :   2|  3|                      :\n                           \
    \              :    |   |                      :\n                           \
    \              : henning|                      : \n"
- title: '+.. cs.tu-berlin.de ..+ 1: INVITE        :    |   |                      :'
  contents:
  - '+.. cs.tu-berlin.de ..+ 1: INVITE        :    |   |                      :

    '
- title: ':                     :    henning@cs.col:    |   \/                     :'
  contents:
  - ":                     :    henning@cs.col:    |   \\/                     : \n"
- title: ': cz@cs.tu-berlin.de =======================>(~~~~~~)                    :'
  contents:
  - ": cz@cs.tu-berlin.de =======================>(~~~~~~)                    : \n"
- title: ':       | ^ |        <.......................(      )                    :'
  contents:
  - ':       | ^ |        <.......................(      )                    :

    '
- title: ':       | . |         : 4: 302 Moved     :   (      )                    :'
  contents:
  - ':       | . |         : 4: 302 Moved     :   (      )                    :

    '
- title: ':       | . |         :    hgs@lab       :   ( work )                    :'
  contents:
  - ':       | . |         :    hgs@lab       :   ( work )                    :

    '
- title: ':       | . |         :                  :   (      )                    :'
  contents:
  - ':       | . |         :                  :   (      )                    :

    '
- title: ':       | . |         : 5: ACK           :   (      )                    :'
  contents:
  - ':       | . |         : 5: ACK           :   (      )                    :

    '
- title: ':       | . |        =======================>(~~~~~~)                    :'
  contents:
  - ':       | . |        =======================>(~~~~~~)                    :

    '
- title: ':       | . |         :                  :                               :'
  contents:
  - ':       | . |         :                  :                               :

    '
- title: '+.......|...|.........+                  :                               :'
  contents:
  - "+.......|...|.........+                  :                               :\n\
    \        | . |                            :                               :\n\
    \        | . |                            :                               :\n\
    \        | . |                            :                               :\n\
    \        | . |                            :                               :\n\
    \        | . | 6: INVITE hgs@lab.cs.columbia.edu                 (~~~~~~) : \n\
    \        | . ==================================================> (      ) :\n\
    \        | ..................................................... (      ) :\n\
    \        |     7: 200 OK                  :                      ( lab  ) : \n\
    \        |                                :                      (      ) :\n\
    \        |     8: ACK                     :                      (      ) :\n\
    \        ======================================================> (~~~~~~) :\n\
    \                                         +...............................+ \n\
    \  ====> SIP request                                                        \n\
    \  ....> SIP response                                                       \n\
    \    ^\n    |   non-SIP protocols                                            \
    \      \n    |\n   When TCP is used, SIP can use one or more connections to attempt\
    \ to\n   contact a user or to modify parameters of an existing conference.\n \
    \  Different SIP requests for the same SIP call MAY use different TCP\n   connections\
    \ or a single persistent connection, as appropriate.\n   For concreteness, this\
    \ document will only refer to Internet\n   protocols.  However, SIP MAY also be\
    \ used directly with protocols\n   such as ATM AAL5, IPX, frame relay or X.25.\
    \ The necessary naming\n   conventions are beyond the scope of this document.\
    \ User agents SHOULD\n   implement both UDP and TCP transport. Proxy, registrar,\
    \ and redirect\n   servers MUST implement both UDP and TCP transport.\n"
- title: 1.5.3 Text-Based
  contents:
  - "1.5.3 Text-Based\n   SIP is text-based, using ISO 10646 in UTF-8 encoding throughout.\
    \ This\n   allows easy implementation in languages such as Java, Tcl and Perl,\n\
    \   allows easy debugging, and most importantly, makes SIP flexible and\n   extensible.\
    \ As SIP is used for initiating multimedia conferences\n   rather than delivering\
    \ media data, it is believed that the additional\n   overhead of using a text-based\
    \ protocol is not significant.\n"
- title: 2 SIP Uniform Resource Locators
  contents:
  - "2 SIP Uniform Resource Locators\n   SIP URLs are used within SIP messages to\
    \ indicate the originator\n   (From), current destination (Request-URI) and final\
    \ recipient (To) of\n   a SIP request, and to specify redirection addresses (Contact).\
    \ A SIP\n   URL can also be embedded in web pages or other hyperlinks to indicate\n\
    \   that a particular user or service can be called via SIP. When used as\n  \
    \ a hyperlink, the SIP URL indicates the use of the INVITE method.\n   The SIP\
    \ URL scheme is defined to allow setting SIP request-header\n   fields and the\
    \ SIP message-body.\n        This corresponds to the use of mailto: URLs. It makes\
    \ it\n        possible, for example, to specify the subject, urgency or\n    \
    \    media types of calls initiated through a web page or as\n        part of\
    \ an email message.\n   A SIP URL follows the guidelines of RFC 2396 [12] and\
    \ has the syntax\n   shown in Fig. 3. The syntax is described using Augmented\
    \ Backus-Naur\n   Form (See Section C). Note that reserved characters have to\
    \ be\n   escaped and that the \"set of characters reserved within any given URI\n\
    \   component is defined by that component. In general, a character is\n   reserved\
    \ if the semantics of the URI changes if the character is\n   replaced with its\
    \ escaped US-ASCII encoding\" [12].\n  SIP-URL         = \"sip:\" [ userinfo \"\
    @\" ] hostport\n                    url-parameters [ headers ]\n  userinfo   \
    \     = user [ \":\" password ]\n  user            = *( unreserved | escaped\n\
    \                  | \"&\" | \"=\" | \"+\" | \"$\" | \",\" )\n  password     \
    \   = *( unreserved | escaped\n                  | \"&\" | \"=\" | \"+\" | \"\
    $\" | \",\" )\n  hostport        = host [ \":\" port ]\n  host            = hostname\
    \ | IPv4address\n  hostname        = *( domainlabel \".\" ) toplabel [ \".\" ]\n\
    \  domainlabel     = alphanum | alphanum *( alphanum | \"-\" ) alphanum\n  toplabel\
    \        = alpha | alpha *( alphanum | \"-\" ) alphanum\n  IPv4address     = 1*digit\
    \ \".\" 1*digit \".\" 1*digit \".\" 1*digit\n  port            = *digit\n  url-parameters\
    \  = *( \";\" url-parameter )\n  url-parameter   = transport-param | user-param\
    \ | method-param\n                  | ttl-param | maddr-param | other-param\n\
    \  transport-param = \"transport=\" ( \"udp\" | \"tcp\" )\n  ttl-param       =\
    \ \"ttl=\" ttl\n  ttl             = 1*3DIGIT       ; 0 to 255\n  maddr-param \
    \    = \"maddr=\" host\n  user-param      = \"user=\" ( \"phone\" | \"ip\" )\n\
    \  method-param    = \"method=\" Method\n  tag-param       = \"tag=\" UUID\n \
    \ UUID            = 1*( hex | \"-\" )\n  other-param     = ( token | ( token \"\
    =\" ( token | quoted-string )))\n  headers         = \"?\" header *( \"&\" header\
    \ )\n  header          = hname \"=\" hvalue\n  hname           = 1*uric\n  hvalue\
    \          = *uric\n  uric            = reserved | unreserved | escaped\n  reserved\
    \        = \";\" | \"/\" | \"?\" | \":\" | \"@\" | \"&\" | \"=\" | \"+\" |\n \
    \                   \"$\" | \",\"\n  digits          = 1*DIGIT\n   Figure 3: SIP\
    \ URL syntax\n   The URI character classes referenced above are described in Appendix\n\
    \   C.\n   The components of the SIP URI have the following meanings.\n"
- title: telephone-subscriber  = global-phone-number | local-phone-number
  contents:
  - "telephone-subscriber  = global-phone-number | local-phone-number\n   global-phone-number\
    \   = \"+\" 1*phonedigit [isdn-subaddress]\n                             [post-dial]\n\
    \   local-phone-number    = 1*(phonedigit | dtmf-digit | \n                  \
    \           pause-character) [isdn-subaddress] \n                            \
    \ [post-dial]\n   isdn-subaddress       = \";isub=\" 1*phonedigit\n   post-dial\
    \             = \";postd=\" 1*(phonedigit | dtmf-digit\n                     \
    \    |  pause-character)\n   phonedigit            = DIGIT | visual-separator\n\
    \   visual-separator      = \"-\" | \".\"\n   pause-character       = one-second-pause\
    \ | wait-for-dial-tone\n   one-second-pause      = \"p\"\n   wait-for-dial-tone\
    \    = \"w\"\n   dtmf-digit            = \"*\" | \"#\" | \"A\" | \"B\" | \"C\"\
    \ | \"D\"\n   Figure 4: SIP URL syntax; telephone subscriber\n   user: If the\
    \ host is an Internet telephony gateway, the user field\n        MAY also encode\
    \ a telephone number using the notation of\n        telephone-subscriber (Fig.\
    \ 4). The telephone number is a special\n        case of a user name and cannot\
    \ be distinguished by a BNF. Thus,\n        a URL parameter, user, is added to\
    \ distinguish telephone numbers\n        from user names. The phone identifier\
    \ is to be used when\n        connecting to a telephony gateway. Even without\
    \ this parameter,\n        recipients of SIP URLs MAY interpret the pre-@ part\
    \ as a phone\n        number if local restrictions on the name space for user\
    \ name\n        allow it.\n   password: The SIP scheme MAY use the format \"user:password\"\
    \ in the\n        userinfo field. The use of passwords in the userinfo is NOT\n\
    \        RECOMMENDED, because the passing of authentication information\n    \
    \    in clear text (such as URIs) has proven to be a security risk in\n      \
    \  almost every case where it has been used.\n   host: The mailto: URL and RFC\
    \ 822 email addresses require that\n        numeric host addresses (\"host numbers\"\
    ) are enclosed in square\n        brackets (presumably, since host names might\
    \ be numeric), while\n        host numbers without brackets are used for all other\
    \ URLs. The\n        SIP URL requires the latter form, without brackets.\n   The\
    \ issue of IPv6 literal addresses in URLs is being looked at\n   elsewhere in\
    \ the IETF. SIP implementers are advised to keep up to\n   date on that activity.\n\
    \   port: The port number to send a request to. If not present, the\n        procedures\
    \ outlined in Section 1.4.2 are used to determine the\n        port number to\
    \ send a request to.\n   URL parameters: SIP URLs can define specific parameters\
    \ of the\n        request. URL parameters are added after the host component and\n\
    \        are separated by semi-colons. The transport parameter determines\n  \
    \      the the transport mechanism (UDP or TCP). UDP is to be assumed\n      \
    \  when no explicit transport parameter is included. The maddr\n        parameter\
    \ provides the server address to be contacted for this\n        user, overriding\
    \ the address supplied in the host field.  This\n        address is typically\
    \ a multicast address, but could also be the\n        address of a backup server.\
    \ The ttl parameter determines the\n        time-to-live value of the UDP multicast\
    \ packet and MUST only be\n        used if maddr is a multicast address and the\
    \ transport protocol\n        is UDP. The user parameter was described above.\
    \ For example, to\n        specify to call j.doe@big.com using multicast to 239.255.255.1\n\
    \        with a ttl of 15, the following URL would be used:\n     sip:j.doe@big.com;maddr=239.255.255.1;ttl=15\n\
    \   The transport, maddr, and ttl parameters MUST NOT be used in the From\n  \
    \ and To header fields and the Request-URI; they are ignored if\n   present.\n\
    \   Headers: Headers of the SIP request can be defined with the \"?\"\n      \
    \  mechanism within a SIP URL. The special hname \"body\" indicates\n        that\
    \ the associated hvalue is the message-body of the SIP INVITE\n        request.\
    \ Headers MUST NOT be used in the From and To header\n        fields and the Request-URI;\
    \ they are ignored if present.  hname\n        and hvalue are encodings of a SIP\
    \ header name and value,\n        respectively. All URL reserved characters in\
    \ the header names\n        and values MUST be escaped.\n   Method: The method\
    \ of the SIP request can be specified with the\n        method parameter.  This\
    \ parameter MUST NOT be used in the From\n        and To header fields and the\
    \ Request-URI; they are ignored if\n        present.\n   Table 2 summarizes where\
    \ the components of the SIP URL can be used\n   and what default values they assume\
    \ if not present.\n   Examples of SIP URLs are:\n                     default\
    \    Req.-URI  To  From  Contact  external\n      user           --         x\
    \         x   x     x        x\n      password       --         x         x  \
    \       x        x\n      host           mandatory  x         x   x     x    \
    \    x\n      port           5060       x         x   x     x        x\n     \
    \ user-param     ip         x         x   x     x        x\n      method     \
    \    INVITE                         x        x\n      maddr-param    --      \
    \                       x        x\n      ttl-param      1                   \
    \           x        x\n      transp.-param  --                             x\
    \        x\n      headers        --                             x        x\n \
    \  Table 2: Use and default values of URL components  for  SIP  headers,\n   Request-URI\
    \ and references\n     sip:j.doe@big.com\n     sip:j.doe:secret@big.com;transport=tcp\n\
    \     sip:j.doe@big.com?subject=project\n     sip:+1-212-555-1212:1234@gateway.com;user=phone\n\
    \     sip:1212@gateway.com\n     sip:alice@10.1.2.3\n     sip:alice@example.com\n\
    \     sip:alice%40example.com@gateway.com\n     sip:alice@registrar.com;method=REGISTER\n\
    \   Within a SIP message, URLs are used to indicate the source and\n   intended\
    \ destination of a request, redirection addresses and the\n   current destination\
    \ of a request. Normally all these fields will\n   contain SIP URLs.\n   SIP URLs\
    \ are case-insensitive, so that for example the two URLs\n   sip:j.doe@example.com\
    \ and SIP:J.Doe@Example.com are equivalent.  All\n   URL parameters are included\
    \ when comparing SIP URLs for equality.\n   SIP header fields MAY contain non-SIP\
    \ URLs. As an example, if a call\n   from a telephone is relayed to the Internet\
    \ via SIP, the SIP From\n   header field might contain a phone URL.\n"
- title: 3 SIP Message Overview
  contents:
  - "3 SIP Message Overview\n   SIP is a text-based protocol and uses the ISO 10646\
    \ character set in\n   UTF-8 encoding (RFC 2279 [21]). Senders MUST terminate\
    \ lines with a\n   CRLF, but receivers MUST also interpret CR and LF by themselves\
    \ as\n   line terminators.\n   Except for the above difference in character sets,\
    \ much of the\n   message syntax is and header fields are identical to HTTP/1.1;\
    \ rather\n   than repeating the syntax and semantics here we use [HX.Y] to refer\n\
    \   to Section X.Y of the current HTTP/1.1 specification (RFC 2068 [11]).\n  \
    \ In addition, we describe SIP in both prose and an augmented Backus-\n   Naur\
    \ form (ABNF). See section C for an overview of ABNF.\n   Note, however, that\
    \ SIP is not an extension of HTTP.\n   Unlike HTTP, SIP MAY use UDP. When sent\
    \ over TCP or UDP, multiple SIP\n   transactions can be carried in a single TCP\
    \ connection or UDP\n   datagram. UDP datagrams, including all headers, SHOULD\
    \ NOT be larger\n   than the path maximum transmission unit (MTU) if the MTU is\
    \ known, or\n   1500 bytes if the MTU is unknown.\n        The 1500 bytes accommodates\
    \ encapsulation within the\n        \"typical\" ethernet MTU without IP fragmentation.\
    \ Recent\n        studies [22] indicate that an MTU of 1500 bytes is a\n     \
    \   reasonable assumption. The next lower common MTU values are\n        1006\
    \ bytes for SLIP and 296 for low-delay PPP (RFC 1191\n        [23]). Thus, another\
    \ reasonable value would be a message\n        size of 950 bytes, to accommodate\
    \ packet headers within the\n        SLIP MTU without fragmentation.\n   A SIP\
    \ message is either a request from a client to a server, or a\n   response from\
    \ a server to a client.\n        SIP-message  =  Request | Response\n   Both Request\
    \ (section 4) and Response (section 5) messages use the\n   generic-message format\
    \ of RFC 822 [24] for transferring entities (the\n   body of the message). Both\
    \ types of messages consist of a start-line,\n   one or more header fields (also\
    \ known as \"headers\"), an empty line\n   (i.e., a line with nothing preceding\
    \ the carriage-return line-feed\n   (CRLF)) indicating the end of the header fields,\
    \ and an optional\n   message-body. To avoid confusion with similar-named headers\
    \ in HTTP,\n   we refer to the headers describing the message body as entity\n\
    \   headers. These components are described in detail in the upcoming\n   sections.\n\
    \        generic-message  =  start-line\n                            *message-header\n\
    \                            CRLF\n                            [ message-body\
    \ ]\n        start-line       =  Request-Line |     ;Section 4.1\n           \
    \                 Status-Line        ;Section 5.1\n        message-header  = \
    \ ( general-header\n                           | request-header\n            \
    \               | response-header\n                           | entity-header\
    \ )\n   In the interest of robustness, any leading empty line(s) MUST be\n   ignored.\
    \ In other words, if the Request or Response message begins\n   with one or more\
    \ CRLF, CR, or LFs, these characters MUST be ignored.\n"
- title: 4 Request
  contents:
  - "4 Request\n   The Request message format is shown below:\n        Request  =\
    \  Request-Line       ;  Section 4.1\n                    *( general-header\n\
    \                    | request-header\n                    | entity-header )\n\
    \                    CRLF\n                    [ message-body ]   ;  Section 8\n"
- title: 4.1 Request-Line
  contents:
  - "4.1 Request-Line\n   The Request-Line begins with a method token, followed by\
    \ the\n   Request-URI and the protocol version, and ending with CRLF. The\n  \
    \ elements are separated by SP characters.  No CR or LF are allowed\n   except\
    \ in the final CRLF sequence.\n        Request-Line  =  Method SP Request-URI\
    \ SP SIP-Version CRLF\n        general-header   =  Accept               ; Section\
    \ 6.7\n                         |  Accept-Encoding      ; Section 6.8\n      \
    \                   |  Accept-Language      ; Section 6.9\n                  \
    \       |  Call-ID              ; Section 6.12\n                         |  Contact\
    \              ; Section 6.13\n                         |  CSeq              \
    \   ; Section 6.17\n                         |  Date                 ; Section\
    \ 6.18\n                         |  Encryption           ; Section 6.19\n    \
    \                     |  Expires              ; Section 6.20\n               \
    \          |  From                 ; Section 6.21\n                         |\
    \  Record-Route         ; Section 6.29\n                         |  Timestamp\
    \            ; Section 6.36\n                         |  To                  \
    \ ; Section 6.37\n                         |  Via                  ; Section 6.40\n\
    \        entity-header    =  Content-Encoding     ; Section 6.14\n           \
    \              |  Content-Length       ; Section 6.15\n                      \
    \   |  Content-Type         ; Section 6.16\n        request-header   =  Authorization\
    \        ; Section 6.11\n                         |  Contact              ; Section\
    \ 6.13\n                         |  Hide                 ; Section 6.22\n    \
    \                     |  Max-Forwards         ; Section 6.23\n               \
    \          |  Organization         ; Section 6.24\n                         |\
    \  Priority             ; Section 6.25\n                         |  Proxy-Authorization\
    \  ; Section 6.27\n                         |  Proxy-Require        ; Section\
    \ 6.28\n                         |  Route                ; Section 6.33\n    \
    \                     |  Require              ; Section 6.30\n               \
    \          |  Response-Key         ; Section 6.31\n                         |\
    \  Subject              ; Section 6.35\n                         |  User-Agent\
    \           ; Section 6.39\n        response-header  =  Allow                ;\
    \ Section 6.10\n                         |  Proxy-Authenticate   ; Section 6.26\n\
    \                         |  Retry-After          ; Section 6.32\n           \
    \              |  Server               ; Section 6.34\n                      \
    \   |  Unsupported          ; Section 6.38\n                         |  Warning\
    \              ; Section 6.41\n                         |  WWW-Authenticate  \
    \   ; Section 6.42\n   Table 3: SIP headers\n"
- title: 4.2 Methods
  contents:
  - "4.2 Methods\n   The methods are defined below. Methods that are not supported\
    \ by a\n   proxy or redirect server are treated by that server as if they were\n\
    \   an OPTIONS method and forwarded accordingly. Methods that are not\n   supported\
    \ by a user agent server or registrar cause a 501 (Not\n   Implemented) response\
    \ to be returned (Section 7). As in HTTP, the\n   Method token is case-sensitive.\n\
    \        Method  =  \"INVITE\" | \"ACK\" | \"OPTIONS\" | \"BYE\"\n           \
    \        | \"CANCEL\" | \"REGISTER\"\n"
- title: 4.2.1 INVITE
  contents:
  - "4.2.1 INVITE\n   The INVITE method indicates that the user or service is being\
    \ invited\n   to participate in a session. The message body contains a description\n\
    \   of the session to which the callee is being invited. For two-party\n   calls,\
    \ the caller indicates the type of media it is able to receive\n   and possibly\
    \ the media it is willing to send as well as their\n   parameters such as network\
    \ destination. A success response MUST\n   indicate in its message body which\
    \ media the callee wishes to receive\n   and MAY indicate the media the callee\
    \ is going to send.\n        Not all session description formats have the ability\
    \ to\n        indicate sending media.\n   A server MAY automatically respond to\
    \ an invitation for a conference\n   the user is already participating in, identified\
    \ either by the SIP\n   Call-ID or a globally unique identifier within the session\n\
    \   description, with a 200 (OK) response.\n   If a user agent receives an INVITE\
    \ request for an existing call leg\n   with a higher CSeq sequence number than\
    \ any previous INVITE for the\n   same Call-ID, it MUST check any version identifiers\
    \ in the session\n   description or, if there are no version identifiers, the\
    \ content of\n   the session description to see if it has changed. It MUST also\n\
    \   inspect any other header fields for changes. If there is a change,\n   the\
    \ user agent MUST update any internal state or information\n   generated as a\
    \ result of that header. If the session description has\n   changed, the user\
    \ agent server MUST adjust the session parameters\n   accordingly, possibly after\
    \ asking the user for confirmation.\n   (Versioning of the session description\
    \ can be used to accommodate the\n   capabilities of new arrivals to a conference,\
    \ add or delete media or\n   change from a unicast to a multicast conference.)\n\
    \   This method MUST be supported by SIP proxy, redirect and user agent\n   servers\
    \ as well as clients.\n"
- title: 4.2.2 ACK
  contents:
  - "4.2.2 ACK\n   The ACK request confirms that the client has received a final\n\
    \   response to an INVITE request. (ACK is used only with INVITE\n   requests.)\
    \ 2xx responses are acknowledged by client user agents, all\n   other final responses\
    \ by the first proxy or client user agent to\n   receive the response. The Via\
    \ is always initialized to the host that\n   originates the ACK request, i.e.,\
    \ the client user agent after a 2xx\n   response or the first proxy to receive\
    \ a non-2xx final response. The\n   ACK request is forwarded as the corresponding\
    \ INVITE request, based\n   on its Request-URI. See Section 10 for details.\n\
    \   The ACK request MAY contain a message body with the final session\n   description\
    \ to be used by the callee. If the ACK message body is\n   empty, the callee uses\
    \ the session description in the INVITE request.\n   A proxy server receiving\
    \ an ACK request after having sent a 3xx, 4xx,\n   5xx, or 6xx response must make\
    \ a determination about whether the ACK\n   is for it, or for some user agent\
    \ or proxy server further downstream.\n   This determination is made by examining\
    \ the tag in the To field. If\n   the tag in the ACK To header field matches the\
    \ tag in the To header\n   field of the response, and the From, CSeq and Call-ID\
    \ header fields\n   in the response match those in the ACK, the ACK is meant for\
    \ the\n   proxy server. Otherwise, the ACK SHOULD be proxied downstream as any\n\
    \   other request.\n        It is possible for a user agent client or proxy server\
    \ to\n        receive multiple 3xx, 4xx, 5xx, and 6xx responses to a\n       \
    \ request along a single branch. This can happen under\n        various error\
    \ conditions, typically when a forking proxy\n        transitions from stateful\
    \ to stateless before receiving all\n        responses. The various responses\
    \ will all be identical,\n        except for the tag in the To field, which is\
    \ different for\n        each one. It can therefore be used as a means to\n  \
    \      disambiguate them.\n   This method MUST be supported by SIP proxy, redirect\
    \ and user agent\n   servers as well as clients.\n"
- title: 4.2.3 OPTIONS
  contents:
  - "4.2.3 OPTIONS\n   The server is being queried as to its capabilities. A server\
    \ that\n   believes it can contact the user, such as a user agent where the user\n\
    \   is logged in and has been recently active, MAY respond to this\n   request\
    \ with a capability set. A called user agent MAY return a\n   status reflecting\
    \ how it would have responded to an invitation, e.g.,\n   600 (Busy). Such a server\
    \ SHOULD return an Allow header field\n   indicating the methods that it supports.\
    \ Proxy and redirect servers\n   simply forward the request without indicating\
    \ their capabilities.\n   This method MUST be supported by SIP proxy, redirect\
    \ and user agent\n   servers, registrars and clients.\n"
- title: 4.2.4 BYE
  contents:
  - "4.2.4 BYE\n   The user agent client uses BYE to indicate to the server that it\n\
    \   wishes to release the call. A BYE request is forwarded like an INVITE\n  \
    \ request and MAY be issued by either caller or callee. A party to a\n   call\
    \ SHOULD issue a BYE request before releasing a call (\"hanging\n   up\"). A party\
    \ receiving a BYE request MUST cease transmitting media\n   streams specifically\
    \ directed at the party issuing the BYE request.\n   If the INVITE request contained\
    \ a Contact header, the callee SHOULD\n   send a BYE request to that address rather\
    \ than the From address.\n   This method MUST be supported by proxy servers and\
    \ SHOULD be\n   supported by redirect and user agent SIP servers.\n"
- title: 4.2.5 CANCEL
  contents:
  - "4.2.5 CANCEL\n   The CANCEL request cancels a pending request with the same Call-ID,\n\
    \   To, From and CSeq (sequence number only) header field values, but\n   does\
    \ not affect a completed request. (A request is considered\n   completed if the\
    \ server has returned a final status response.)\n   A user agent client or proxy\
    \ client MAY issue a CANCEL request at any\n   time. A proxy, in particular, MAY\
    \ choose to send a CANCEL to\n   destinations that have not yet returned a final\
    \ response after it has\n   received a 2xx or 6xx response for one or more of\
    \ the parallel-search\n   requests. A proxy that receives a CANCEL request forwards\
    \ the request\n   to all destinations with pending requests.\n   The Call-ID,\
    \ To, the numeric part of CSeq and From headers in the\n   CANCEL request are\
    \ identical to those in the original request. This\n   allows a CANCEL request\
    \ to be matched with the request it cancels.\n   However, to allow the client\
    \ to distinguish responses to the CANCEL\n   from those to the original request,\
    \ the CSeq Method component is set\n   to CANCEL. The Via header field is initialized\
    \ to the proxy issuing\n   the CANCEL request. (Thus, responses to this CANCEL\
    \ request only\n   reach the issuing proxy.)\n   Once a user agent server has\
    \ received a CANCEL, it MUST NOT issue a\n   2xx response for the cancelled original\
    \ request.\n   A redirect or user agent server receiving a CANCEL request responds\n\
    \   with a status of 200 (OK) if the transaction exists and a status of\n   481\
    \ (Transaction Does Not Exist) if not, but takes no further action.\n   In particular,\
    \ any existing call is unaffected.\n        The BYE request cannot be used to\
    \ cancel branches of a\n        parallel search, since several branches may, through\n\
    \        intermediate proxies, find the same user agent server and\n        then\
    \ terminate the call.  To terminate a call instead of\n        just pending searches,\
    \ the UAC must use BYE instead of or\n        in addition to CANCEL. While CANCEL\
    \ can terminate any\n        pending request other than ACK or CANCEL, it is typically\n\
    \        useful only for INVITE. 200 responses to INVITE and 200\n        responses\
    \ to CANCEL are distinguished by the method in the\n        Cseq header field,\
    \ so there is no ambiguity.\n   This method MUST be supported by proxy servers\
    \ and SHOULD be\n   supported by all other SIP server types.\n"
- title: 4.2.6 REGISTER
  contents:
  - "4.2.6 REGISTER\n   A client uses the REGISTER method to register the address\
    \ listed in\n   the To header field with a SIP server.\n   A user agent MAY register\
    \ with a local server on startup by sending a\n   REGISTER request to the well-known\
    \ \"all SIP servers\" multicast\n   address \"sip.mcast.net\" (224.0.1.75). This\
    \ request SHOULD be scoped\n   to ensure it is not forwarded beyond the boundaries\
    \ of the\n   administrative system. This MAY be done with either TTL or\n   administrative\
    \ scopes [25], depending on what is implemented in the\n   network. SIP user agents\
    \ MAY listen to that address and use it to\n   become aware of the location of\
    \ other local users [20]; however, they\n   do not respond to the request.  A\
    \ user agent MAY also be configured\n   with the address of a registrar server\
    \ to which it sends a REGISTER\n   request upon startup.\n   Requests are processed\
    \ in the order received. Clients SHOULD avoid\n   sending a new registration (as\
    \ opposed to a retransmission) until\n   they have received the response from\
    \ the server for the previous one.\n        Clients may register from different\
    \ locations, by necessity\n        using different Call-ID values. Thus, the CSeq\
    \ value cannot\n        be used to enforce ordering. Since registrations are\n\
    \        additive, ordering is less of a problem than if each\n        REGISTER\
    \ request completely replaced all earlier ones.\n   The meaning of the REGISTER\
    \ request-header fields is defined as\n   follows. We define \"address-of-record\"\
    \ as the SIP address that the\n   registry knows the registrand, typically of\
    \ the form \"user@domain\"\n   rather than \"user@host\". In third-party registration,\
    \ the entity\n   issuing the request is different from the entity being registered.\n\
    \   To: The To header field contains the address-of-record whose\n        registration\
    \ is to be created or updated.\n   From: The From header field contains the address-of-record\
    \ of the\n        person responsible for the registration. For first-party\n \
    \       registration, it is identical to the To header field value.\n   Request-URI:\
    \ The Request-URI names the destination of the\n        registration request,\
    \ i.e., the domain of the registrar. The\n        user name MUST be empty. Generally,\
    \ the domains in the Request-\n        URI and the To header field have the same\
    \ value; however, it is\n        possible to register as a \"visitor\", while\
    \ maintaining one's\n        name. For example, a traveler sip:alice@acme.com\
    \ (To) might\n        register under the Request-URI sip:atlanta.hiayh.org , with\
    \ the\n        former as the To header field and the latter as the Request-URI.\n\
    \        The REGISTER request is no longer forwarded once it has reached\n   \
    \     the server whose authoritative domain is the one listed in the\n       \
    \ Request-URI.\n   Call-ID: All registrations from a client SHOULD use the same\
    \ Call-ID\n        header value, at least within the same reboot cycle.\n   Cseq:\
    \ Registrations with the same Call-ID MUST have increasing CSeq\n        header\
    \ values. However, the server does not reject out-of-order\n        requests.\n\
    \   Contact: The request MAY contain a Contact header field; future non-\n   \
    \     REGISTER requests for the URI given in the To header field\n        SHOULD\
    \ be directed to the address(es) given in the Contact\n        header.\n   If\
    \ the request does not contain a Contact header, the registration\n   remains\
    \ unchanged.\n        This is useful to obtain the current list of registrations\n\
    \        in the response.  Registrations using SIP URIs that differ\n        in\
    \ one or more of host, port, transport-param or maddr-\n        param (see Figure\
    \ 3) from an existing registration are\n        added to the list of registrations.\
    \ Other URI types are\n        compared according to the standard URI equivalency\
    \ rules\n        for the URI schema. If the URIs are equivalent to that of\n \
    \       an existing registration, the new registration replaces the\n        old\
    \ one if it has a higher q value or, for the same value\n        of q, if the\
    \ ttl value is higher. All current registrations\n        MUST share the same\
    \ action value.  Registrations that have\n        a different action than current\
    \ registrations for the same\n        user MUST be rejected with status of 409\
    \ (Conflict).\n   A proxy server ignores the q parameter when processing non-REGISTER\n\
    \   requests, while a redirect server simply returns that parameter in\n   its\
    \ Contact response header field.\n        Having the proxy server interpret the\
    \ q parameter is not\n        sufficient to guide proxy behavior, as it is not\
    \ clear, for\n        example, how long it is supposed to wait between trying\n\
    \        addresses.\n   If the registration is changed while a user agent or proxy\
    \ server\n   processes an invitation, the new information SHOULD be used.\n  \
    \      This allows a service known as \"directed pick-up\". In the\n        telephone\
    \ network, directed pickup permits a user at a\n        remote station who hears\
    \ his own phone ringing to pick up\n        at that station, dial an access code,\
    \ and be connected to\n        the calling user as if he had answered his own\
    \ phone.\n   A server MAY choose any duration for the registration lifetime.\n\
    \   Registrations not refreshed after this amount of time SHOULD be\n   silently\
    \ discarded. Responses to a registration SHOULD include an\n   Expires header\
    \ (Section 6.20) or expires Contact parameters (Section\n   6.13), indicating\
    \ the time at which the server will drop the\n   registration. If none is present,\
    \ one hour is assumed. Clients MAY\n   request a registration lifetime by indicating\
    \ the time in an Expires\n   header in the request. A server SHOULD NOT use a\
    \ higher lifetime than\n   the one requested, but MAY use a lower one. A single\
    \ address (if\n   host-independent) MAY be registered from several different clients.\n\
    \   A client cancels an existing registration by sending a REGISTER\n   request\
    \ with an expiration time (Expires) of zero seconds for a\n   particular Contact\
    \ or the wildcard Contact designated by a \"*\" for\n   all registrations. Registrations\
    \ are matched based on the user, host,\n   port and maddr parameters.\n   The\
    \ server SHOULD return the current list of registrations in the 200\n   response\
    \ as Contact header fields.\n   It is particularly important that REGISTER requests\
    \ are authenticated\n   since they allow to redirect future requests (see Section\
    \ 13.2).\n        Beyond its use as a simple location service, this method is\n\
    \        needed if there are several SIP servers on a single host.\n        In\
    \ that case, only one of the servers can use the default\n        port number.\n\
    \   Support of this method is RECOMMENDED.\n"
- title: 4.3 Request-URI
  contents:
  - "4.3 Request-URI\n   The Request-URI is a SIP URL as described in Section 2 or\
    \ a general\n   URI. It indicates the user or service to which this request is\
    \ being\n   addressed. Unlike the To field, the Request-URI MAY be re-written\
    \ by\n   proxies.\n   When used as a Request-URI, a SIP-URL MUST NOT contain the\n\
    \   transport-param, maddr-param, ttl-param, or headers elements. A\n   server\
    \ that receives a SIP-URL with these elements removes them\n   before further\
    \ processing.\n        Typically, the UAC sets the Request-URI and To to the same\n\
    \        SIP URL, presumed to remain unchanged over long time\n        periods.\
    \ However, if the UAC has cached a more direct path\n        to the callee, e.g.,\
    \ from the Contact header field of a\n        response to a previous request,\
    \ the To would still contain\n        the long-term, \"public\" address, while\
    \ the Request-URI\n        would be set to the cached address.\n   Proxy and redirect\
    \ servers MAY use the information in the Request-URI\n   and request header fields\
    \ to handle the request and possibly rewrite\n   the Request-URI. For example,\
    \ a request addressed to the generic\n   address sip:sales@acme.com is proxied\
    \ to the particular person, e.g.,\n   sip:bob@ny.acme.com , with the To field\
    \ remaining as\n   sip:sales@acme.com.  At ny.acme.com , Bob then designates Alice\
    \ as\n   the temporary substitute.\n   The host part of the Request-URI typically\
    \ agrees with one of the\n   host names of the receiving server. If it does not,\
    \ the server SHOULD\n   proxy the request to the address indicated or return a\
    \ 404 (Not\n   Found) response if it is unwilling or unable to do so. For example,\n\
    \   the Request-URI and server host name can disagree in the case of a\n   firewall\
    \ proxy that handles outgoing calls. This mode of operation is\n   similar to\
    \ that of HTTP proxies.\n   If a SIP server receives a request with a URI indicating\
    \ a scheme\n   other than SIP which that server does not understand, the server\
    \ MUST\n   return a 400 (Bad Request) response. It MUST do this even if the To\n\
    \   header field contains a scheme it does understand.  This is because\n   proxies\
    \ are responsible for processing the Request-URI; the To field\n   is of end-to-end\
    \ significance.\n"
- title: 4.3.1 SIP Version
  contents:
  - "4.3.1 SIP Version\n   Both request and response messages include the version\
    \ of SIP in use,\n   and follow [H3.1] (with HTTP replaced by SIP, and HTTP/1.1\
    \ replaced\n   by SIP/2.0) regarding version ordering, compliance requirements,\
    \ and\n   upgrading of version numbers. To be compliant with this\n   specification,\
    \ applications sending SIP messages MUST include a SIP-\n   Version of \"SIP/2.0\"\
    .\n"
- title: 4.4 Option Tags
  contents:
  - "4.4 Option Tags\n   Option tags are unique identifiers used to designate new\
    \ options in\n   SIP.  These tags are used in Require (Section 6.30) and Unsupported\n\
    \   (Section 6.38) fields.\n   Syntax:\n        option-tag  =  token\n   See Section\
    \ C for a definition of token. The creator of a new SIP\n   option MUST either\
    \ prefix the option with their reverse domain name\n   or register the new option\
    \ with the Internet Assigned Numbers\n   Authority (IANA). For example, \"com.foo.mynewfeature\"\
    \ is an apt name\n   for a feature whose inventor can be reached at \"foo.com\"\
    .  Individual\n   organizations are then responsible for ensuring that option\
    \ names\n   don't collide. Options registered with IANA have the prefix\n   \"\
    org.iana.sip.\", options described in RFCs have the prefix\n   \"org.ietf.rfc.N\"\
    , where N is the RFC number. Option tags are case-\n   insensitive.\n"
- title: 4.4.1 Registering New Option Tags with IANA
  contents:
  - "4.4.1 Registering New Option Tags with IANA\n   When registering a new SIP option,\
    \ the following information MUST be\n   provided:\n        o  Name and description\
    \ of option. The name MAY be of any\n          length, but SHOULD be no more than\
    \ twenty characters long. The\n          name MUST consist of alphanum (See Figure\
    \ 3) characters only;\n        o  Indication of who has change control over the\
    \ option (for\n          example, IETF, ISO, ITU-T, other international standardization\n\
    \          bodies, a consortium or a particular company or group of\n        \
    \  companies);\n        o  A reference to a further description, if available,\
    \ for\n          example (in order of preference) an RFC, a published paper, a\n\
    \          patent filing, a technical report, documented source code or a\n  \
    \        computer manual;\n        o  Contact information (postal and email address);\n\
    \   Registrations should be sent to iana@iana.org\n        This procedure has\
    \ been borrowed from RTSP [4] and the RTP\n        AVP [26].\n"
- title: 5 Response
  contents:
  - "5 Response\n   After receiving and interpreting a request message, the recipient\n\
    \   responds with a SIP response message. The response message format is\n   shown\
    \ below:\n        Response  =  Status-Line        ;  Section 5.1\n           \
    \          *( general-header\n                     | response-header\n       \
    \              | entity-header )\n                     CRLF\n                \
    \     [ message-body ]   ;  Section 8\n   SIP's structure of responses is similar\
    \ to [H6], but is defined\n   explicitly here.\n"
- title: 5.1 Status-Line
  contents:
  - "5.1 Status-Line\n   The first line of a Response message is the Status-Line,\
    \ consisting\n   of the protocol version (Section 4.3.1) followed by a numeric\n\
    \   Status-Code and its associated textual phrase, with each element\n   separated\
    \ by SP characters. No CR or LF is allowed except in the\n   final CRLF sequence.\n\
    \        Status-Line  =  SIP-version SP Status-Code SP Reason-Phrase CRLF\n"
- title: 5.1.1 Status Codes and Reason Phrases
  contents:
  - "5.1.1 Status Codes and Reason Phrases\n   The Status-Code is a 3-digit integer\
    \ result code that indicates the\n   outcome of the attempt to understand and\
    \ satisfy the request. The\n   Reason-Phrase is intended to give a short textual\
    \ description of the\n   Status-Code. The Status-Code is intended for use by automata,\
    \ whereas\n   the Reason-Phrase is intended for the human user. The client is\
    \ not\n   required to examine or display the Reason-Phrase.\n        Status-Code\
    \     =  Informational                     ;Fig. 5\n                       | \
    \  Success                           ;Fig. 5\n                       |   Redirection\
    \                       ;Fig. 6\n                       |   Client-Error     \
    \                 ;Fig. 7\n                       |   Server-Error           \
    \           ;Fig. 8\n                       |   Global-Failure               \
    \     ;Fig. 9\n                       |   extension-code\n        extension-code\
    \  =  3DIGIT\n        Reason-Phrase   =  *<TEXT-UTF8,  excluding CR, LF>\n   We\
    \ provide an overview of the Status-Code below, and provide full\n   definitions\
    \ in Section 7. The first digit of the Status-Code defines\n   the class of response.\
    \ The last two digits do not have any\n   categorization role. SIP/2.0 allows\
    \ 6 values for the first digit:\n   1xx: Informational -- request received, continuing\
    \ to process the\n        request;\n   2xx: Success -- the action was successfully\
    \ received, understood, and\n        accepted;\n   3xx: Redirection -- further\
    \ action needs to be taken in order to\n        complete the request;\n   4xx:\
    \ Client Error -- the request contains bad syntax or cannot be\n        fulfilled\
    \ at this server;\n   5xx: Server Error -- the server failed to fulfill an apparently\
    \ valid\n        request;\n   6xx: Global Failure -- the request cannot be fulfilled\
    \ at any server.\n   Figures 5 through 9 present the individual values of the\
    \ numeric\n   response codes, and an example set of corresponding reason phrases\n\
    \   for SIP/2.0. These reason phrases are only recommended; they may be\n   replaced\
    \ by local equivalents without affecting the protocol. Note\n   that SIP adopts\
    \ many HTTP/1.1 response codes. SIP/2.0 adds response\n   codes in the range starting\
    \ at x80 to avoid conflicts with newly\n   defined HTTP response codes, and adds\
    \ a new class, 6xx, of response\n   codes.\n   SIP response codes are extensible.\
    \ SIP applications are not required\n   to understand the meaning of all registered\
    \ response codes, though\n   such understanding is obviously desirable. However,\
    \ applications MUST\n   understand the class of any response code, as indicated\
    \ by the first\n   digit, and treat any unrecognized response as being equivalent\
    \ to the\n   x00 response code of that class, with the exception that an\n   unrecognized\
    \ response MUST NOT be cached. For example, if a client\n   receives an unrecognized\
    \ response code of 431, it can safely assume\n   that there was something wrong\
    \ with its request and treat the\n   response as if it had received a 400 (Bad\
    \ Request) response code. In\n   such cases, user agents SHOULD present to the\
    \ user the message body\n   returned with the response, since that message body\
    \ is likely to\n   include human-readable information which will explain the unusual\n\
    \   status.\n        Informational  =  \"100\"  ;  Trying\n                  \
    \    |   \"180\"  ;  Ringing\n                      |   \"181\"  ;  Call Is Being\
    \ Forwarded\n                      |   \"182\"  ;  Queued\n        Success   \
    \     =  \"200\"  ;  OK\n   Figure 5: Informational and success status codes\n\
    \        Redirection  =  \"300\"  ;  Multiple Choices\n                    | \
    \  \"301\"  ;  Moved Permanently\n                    |   \"302\"  ;  Moved Temporarily\n\
    \                    |   \"303\"  ;  See Other\n                    |   \"305\"\
    \  ;  Use Proxy\n                    |   \"380\"  ;  Alternative Service\n   Figure\
    \ 6: Redirection status codes\n        Client-Error  =  \"400\"  ;  Bad Request\n\
    \                     |   \"401\"  ;  Unauthorized\n                     |   \"\
    402\"  ;  Payment Required\n                     |   \"403\"  ;  Forbidden\n \
    \                    |   \"404\"  ;  Not Found\n                     |   \"405\"\
    \  ;  Method Not Allowed\n                     |   \"406\"  ;  Not Acceptable\n\
    \                     |   \"407\"  ;  Proxy Authentication Required\n        \
    \             |   \"408\"  ;  Request Timeout\n                     |   \"409\"\
    \  ;  Conflict\n                     |   \"410\"  ;  Gone\n                  \
    \   |   \"411\"  ;  Length Required\n                     |   \"413\"  ;  Request\
    \ Entity Too Large\n                     |   \"414\"  ;  Request-URI Too Large\n\
    \                     |   \"415\"  ;  Unsupported Media Type\n               \
    \      |   \"420\"  ;  Bad Extension\n                     |   \"480\"  ;  Temporarily\
    \ not available\n                     |   \"481\"  ;  Call Leg/Transaction Does\
    \ Not Exist\n                     |   \"482\"  ;  Loop Detected\n            \
    \         |   \"483\"  ;  Too Many Hops\n                     |   \"484\"  ; \
    \ Address Incomplete\n                     |   \"485\"  ;  Ambiguous\n       \
    \              |   \"486\"  ;  Busy Here\n   Figure 7: Client error status codes\n\
    \        Server-Error  =  \"500\"  ;  Internal Server Error\n                \
    \     |   \"501\"  ;  Not Implemented\n                     |   \"502\"  ;  Bad\
    \ Gateway\n                     |   \"503\"  ;  Service Unavailable\n        \
    \             |   \"504\"  ;  Gateway Time-out\n                     |   \"505\"\
    \  ;  SIP Version not supported\n   Figure 8: Server error status codes\n"
- title: 6 Header Field Definitions
  contents:
  - "6 Header Field Definitions\n   SIP header fields are similar to HTTP header fields\
    \ in both syntax\n   and semantics. In particular, SIP header fields follow the\
    \ syntax for\n   message-header as described in [H4.2]. The rules for extending\
    \ header\n   fields over multiple lines, and use of multiple message-header fields\n\
    \   with the same field-name, described in [H4.2] also apply to SIP. The\n   \
    \     Global-Failure |  \"600\"  ;  Busy Everywhere\n                       |\
    \  \"603\"  ;  Decline\n                       |  \"604\"  ;  Does not exist anywhere\n\
    \                       |  \"606\"  ;  Not Acceptable\n   Figure 9: Global failure\
    \ status codes\n   rules in [H4.2] regarding ordering of header fields apply to\
    \ SIP,\n   with the exception of Via fields, see below, whose order matters.\n\
    \   Additionally, header fields which are hop-by-hop MUST appear before\n   any\
    \ header fields which are end-to-end. Proxies SHOULD NOT reorder\n   header fields.\
    \ Proxies add Via header fields and MAY add other hop-\n   by-hop header fields.\
    \ They can modify certain header fields, such as\n   Max-Forwards (Section 6.23)\
    \ and \"fix up\" the Via header fields with\n   \"received\" parameters as described\
    \ in Section 6.40.1. Proxies MUST\n   NOT alter any fields that are authenticated\
    \ (see Section 13.2).\n   The header fields required, optional and not applicable\
    \ for each\n   method are listed in Table 4 and Table 5. The table uses \"o\"\
    \ to\n   indicate optional, \"m\" mandatory and \"-\" for not applicable. A \"\
    *\"\n   indicates that the header fields are needed only if message body is\n\
    \   not empty. See sections 6.15, 6.16 and 8 for details.\n   The \"where\" column\
    \ describes the request and response types with\n   which the header field can\
    \ be used. \"R\" refers to header fields that\n   can be used in requests (that\
    \ is, request and general header fields).\n   \"r\" designates a response or general-header\
    \ field as applicable to\n   all responses, while a list of numeric values indicates\
    \ the status\n   codes with which the header field can be used. \"g\" and \"e\"\
    \ designate\n   general (Section 6.1) and entity header (Section 6.2) fields,\n\
    \   respectively. If a header field is marked \"c\", it is copied from the\n \
    \  request to the response.\n   The \"enc.\" column describes whether this message\
    \ header field MAY be\n   encrypted end-to-end. A \"n\" designates fields that\
    \ MUST NOT be\n   encrypted, while \"c\" designates fields that SHOULD be encrypted\
    \ if\n   encryption is used.\n   The \"e-e\" column has a value of \"e\" for end-to-end\
    \ and a value of \"h\"\n   for hop-by-hop header fields.\n                   \
    \       where  enc.  e-e ACK BYE CAN INV OPT REG\n        __________________________________________________________\n\
    \        Accept              R           e   -   -   -   o   o   o\n        Accept\
    \             415          e   -   -   -   o   o   o\n        Accept-Encoding\
    \     R           e   -   -   -   o   o   o\n        Accept-Encoding    415  \
    \        e   -   -   -   o   o   o\n        Accept-Language     R           e\
    \   -   o   o   o   o   o\n        Accept-Language    415          e   -   o \
    \  o   o   o   o\n        Allow              200          e   -   -   -   -  \
    \ m   -\n        Allow              405          e   o   o   o   o   o   o\n \
    \       Authorization       R           e   o   o   o   o   o   o\n        Call-ID\
    \            gc     n     e   m   m   m   m   m   m\n        Contact         \
    \    R           e   o   -   -   o   o   o\n        Contact            1xx   \
    \       e   -   -   -   o   o   -\n        Contact            2xx          e \
    \  -   -   -   o   o   o\n        Contact            3xx          e   -   o  \
    \ -   o   o   o\n        Contact            485          e   -   o   -   o   o\
    \   o\n        Content-Encoding    e           e   o   -   -   o   o   o\n   \
    \     Content-Length      e           e   o   -   -   o   o   o\n        Content-Type\
    \        e           e   *   -   -   *   *   *\n        CSeq               gc\
    \     n     e   m   m   m   m   m   m\n        Date                g         \
    \  e   o   o   o   o   o   o\n        Encryption          g     n     e   o  \
    \ o   o   o   o   o\n        Expires             g           e   -   -   -   o\
    \   -   o\n        From               gc     n     e   m   m   m   m   m   m\n\
    \        Hide                R     n     h   o   o   o   o   o   o\n        Max-Forwards\
    \        R     n     e   o   o   o   o   o   o\n        Organization        g\
    \     c     h   -   -   -   o   o   o\n   Table 4: Summary of header fields, A--O\n\
    \   Other header fields can be added as required; a server MUST ignore\n   header\
    \ fields not defined in this specification that it does not\n   understand. A\
    \ proxy MUST NOT remove or modify header fields not\n   defined in this specification\
    \ that it does not understand. A compact\n   form of these header fields is also\
    \ defined in Section 9 for use over\n   UDP when the request has to fit into a\
    \ single packet and size is an\n   issue.\n   Table 6 in Appendix A lists those\
    \ header fields that different client\n   and server types MUST be able to parse.\n"
- title: 6.1 General Header Fields
  contents:
  - "6.1 General Header Fields\n   General header fields apply to both request and\
    \ response messages.\n   The \"general-header\" field names can be extended reliably\
    \ only in\n   combination with a change in the protocol version. However, new\
    \ or\n                            where     enc.  e-e ACK BYE CAN INV OPT REG\n\
    \    ___________________________________________________________________\n   \
    \ Proxy-Authenticate       407       n     h   o   o   o   o   o   o\n    Proxy-Authorization\
    \       R        n     h   o   o   o   o   o   o\n    Proxy-Require          \
    \   R        n     h   o   o   o   o   o   o\n    Priority                  R\
    \        c     e   -   -   -   o   -   -\n    Require                   R    \
    \          e   o   o   o   o   o   o\n    Retry-After               R        c\
    \     e   -   -   -   -   -   o\n    Retry-After          404,480,486   c    \
    \ e   o   o   o   o   o   o\n                             503       c     e  \
    \ o   o   o   o   o   o\n                           600,603     c     e   o  \
    \ o   o   o   o   o\n    Response-Key              R        c     e   -   o  \
    \ o   o   o   o\n    Record-Route              R              h   o   o   o  \
    \ o   o   o\n    Record-Route             2xx             h   o   o   o   o  \
    \ o   o\n    Route                     R              h   o   o   o   o   o  \
    \ o\n    Server                    r        c     e   o   o   o   o   o   o\n\
    \    Subject                   R        c     e   -   -   -   o   -   -\n    Timestamp\
    \                 g              e   o   o   o   o   o   o\n    To           \
    \           gc(1)      n     e   m   m   m   m   m   m\n    Unsupported      \
    \        420             e   o   o   o   o   o   o\n    User-Agent           \
    \     g        c     e   o   o   o   o   o   o\n    Via                     gc(2)\
    \      n     e   m   m   m   m   m   m\n    Warning                   r      \
    \        e   o   o   o   o   o   o\n    WWW-Authenticate         401       c \
    \    e   o   o   o   o   o   o\n   Table 5: Summary of header fields, P--Z; (1):\
    \  copied  with  possible\n   addition of tag; (2): UAS removes first Via header\
    \ field\n   experimental header fields MAY be given the semantics of general\n\
    \   header fields if all parties in the communication recognize them to\n   be\
    \ \"general-header\" fields. Unrecognized header fields are treated as\n   \"\
    entity-header\" fields.\n"
- title: 6.2 Entity Header Fields
  contents:
  - "6.2 Entity Header Fields\n   The \"entity-header\" fields define meta-information\
    \ about the\n   message-body or, if no body is present, about the resource identified\n\
    \   by the request. The term \"entity header\" is an HTTP 1.1 term where\n   the\
    \ response body can contain a transformed version of the message\n   body.  The\
    \ original message body is referred to as the \"entity\". We\n   retain the same\
    \ terminology for header fields but usually refer to\n   the \"message body\"\
    \ rather then the entity as the two are the same in\n   SIP.\n"
- title: 6.3 Request Header Fields
  contents:
  - "6.3 Request Header Fields\n   The \"request-header\" fields allow the client\
    \ to pass additional\n   information about the request, and about the client itself,\
    \ to the\n   server. These fields act as request modifiers, with semantics\n \
    \  equivalent to the parameters of a programming language method\n   invocation.\n\
    \   The \"request-header\" field names can be extended reliably only in\n   combination\
    \ with a change in the protocol version. However, new or\n   experimental header\
    \ fields MAY be given the semantics of \"request-\n   header\" fields if all parties\
    \ in the communication recognize them to\n   be request-header fields. Unrecognized\
    \ header fields are treated as\n   \"entity-header\" fields.\n"
- title: 6.4 Response Header Fields
  contents:
  - "6.4 Response Header Fields\n   The \"response-header\" fields allow the server\
    \ to pass additional\n   information about the response which cannot be placed\
    \ in the Status-\n   Line. These header fields give information about the server\
    \ and about\n   further access to the resource identified by the Request-URI.\n\
    \   Response-header field names can be extended reliably only in\n   combination\
    \ with a change in the protocol version. However, new or\n   experimental header\
    \ fields MAY be given the semantics of \"response-\n   header\" fields if all\
    \ parties in the communication recognize them to\n   be \"response-header\" fields.\
    \ Unrecognized header fields are treated\n   as \"entity-header\" fields.\n"
- title: 6.5 End-to-end and Hop-by-hop Headers
  contents:
  - "6.5 End-to-end and Hop-by-hop Headers\n   End-to-end headers MUST be transmitted\
    \ unmodified across all proxies,\n   while hop-by-hop headers MAY be modified\
    \ or added by proxies.\n"
- title: 6.6 Header Field Format
  contents:
  - "6.6 Header Field Format\n   Header fields (\"general-header\", \"request-header\"\
    , \"response-header\",\n   and \"entity-header\") follow the same generic header\
    \ format as that\n   given in Section 3.1 of RFC 822 [24]. Each header field consists\
    \ of a\n   name followed by a colon (\":\") and the field value. Field names are\n\
    \   case-insensitive. The field value MAY be preceded by any amount of\n   leading\
    \ white space (LWS), though a single space (SP) is preferred.\n   Header fields\
    \ can be extended over multiple lines by preceding each\n   extra line with at\
    \ least one SP or horizontal tab (HT). Applications\n   MUST follow HTTP \"common\
    \ form\" when generating these constructs,\n   since there might exist some implementations\
    \ that fail to accept\n   anything beyond the common forms.\n        message-header\
    \  =  field-name \":\" [ field-value ] CRLF\n        field-name      =  token\n\
    \        field-value     =  *( field-content | LWS )\n        field-content  \
    \ =  < the OCTETs  making up the field-value\n                            and\
    \ consisting of either *TEXT-UTF8\n                            or combinations\
    \ of token,\n                            separators, and quoted-string>\n   The\
    \ relative order of header fields with different field names is not\n   significant.\
    \ Multiple header fields with the same field-name may be\n   present in a message\
    \ if and only if the entire field-value for that\n   header field is defined as\
    \ a comma-separated list (i.e., #(values)).\n   It MUST be possible to combine\
    \ the multiple header fields into one\n   \"field-name: field-value\" pair, without\
    \ changing the semantics of the\n   message, by appending each subsequent field-value\
    \ to the first, each\n   separated by a comma. The order in which header fields\
    \ with the same\n   field-name are received is therefore significant to the\n\
    \   interpretation of the combined field value, and thus a proxy MUST NOT\n  \
    \ change the order of these field values when a message is forwarded.\n   Field\
    \ names are not case-sensitive, although their values may be.\n"
- title: 6.7 Accept
  contents:
  - "6.7 Accept\n   The Accept header follows the syntax defined in [H14.1]. The\n\
    \   semantics are also identical, with the exception that if no Accept\n   header\
    \ is present, the server SHOULD assume a default value of\n   application/sdp.\n\
    \   This request-header field is used only with the INVITE, OPTIONS and\n   REGISTER\
    \ request methods to indicate what media types are acceptable\n   in the response.\n\
    \   Example:\n     Accept: application/sdp;level=1, application/x-private, text/html\n"
- title: 6.8 Accept-Encoding
  contents:
  - "6.8 Accept-Encoding\n   The Accept-Encoding request-header field is similar to\
    \ Accept, but\n   restricts the content-codings [H3.4.1] that are acceptable in\
    \ the\n   response. See [H14.3]. The syntax of this header is defined in\n   [H14.3].\
    \ The semantics in SIP are identical to those defined in\n   [H14.3].\n"
- title: 6.9 Accept-Language
  contents:
  - "6.9 Accept-Language\n   The Accept-Language header follows the syntax defined\
    \ in [H14.4]. The\n   rules for ordering the languages based on the q parameter\
    \ apply to\n   SIP as well. When used in SIP, the Accept-Language request-header\n\
    \   field can be used to allow the client to indicate to the server in\n   which\
    \ language it would prefer to receive reason phrases, session\n   descriptions\
    \ or status responses carried as message bodies. A proxy\n   MAY use this field\
    \ to help select the destination for the call, for\n   example, a human operator\
    \ conversant in a language spoken by the\n   caller.\n   Example:\n     Accept-Language:\
    \ da, en-gb;q=0.8, en;q=0.7\n"
- title: 6.10 Allow
  contents:
  - "6.10 Allow\n   The Allow entity-header field lists the set of methods supported\
    \ by\n   the resource identified by the Request-URI. The purpose of this field\n\
    \   is strictly to inform the recipient of valid methods associated with\n   the\
    \ resource. An Allow header field MUST be present in a 405 (Method\n   Not Allowed)\
    \ response and SHOULD be present in an OPTIONS response.\n        Allow  =  \"\
    Allow\" \":\" 1#Method\n"
- title: 6.11 Authorization
  contents:
  - "6.11 Authorization\n   A user agent that wishes to authenticate itself with a\
    \ server --\n   usually, but not necessarily, after receiving a 401 response --\
    \ MAY\n   do so by including an Authorization request-header field with the\n\
    \   request. The Authorization field value consists of credentials\n   containing\
    \ the authentication information of the user agent for the\n   realm of the resource\
    \ being requested.\n   Section 13.2 overviews the use of the Authorization header,\
    \ and\n   section 15 describes the syntax and semantics when used with PGP\n \
    \  based authentication.\n"
- title: 6.12 Call-ID
  contents:
  - "6.12 Call-ID\n   The Call-ID general-header field uniquely identifies a particular\n\
    \   invitation or all registrations of a particular client. Note that a\n   single\
    \ multimedia conference can give rise to several calls with\n   different Call-IDs,\
    \ e.g., if a user invites a single individual\n   several times to the same (long-running)\
    \ conference.\n   For an INVITE request, a callee user agent server SHOULD NOT\
    \ alert\n   the user if the user has responded previously to the Call-ID in the\n\
    \   INVITE request. If the user is already a member of the conference and\n  \
    \ the conference parameters contained in the session description have\n   not\
    \ changed, a callee user agent server MAY silently accept the call,\n   regardless\
    \ of the Call-ID. An invitation for an existing Call-ID or\n   session can change\
    \ the parameters of the conference. A client\n   application MAY decide to simply\
    \ indicate to the user that the\n   conference parameters have been changed and\
    \ accept the invitation\n   automatically or it MAY require user confirmation.\n\
    \   A user may be invited to the same conference or call using several\n   different\
    \ Call-IDs. If desired, the client MAY use identifiers within\n   the session\
    \ description to detect this duplication. For example, SDP\n   contains a session\
    \ id and version number in the origin (o) field.\n   The REGISTER and OPTIONS\
    \ methods use the Call-ID value to\n   unambiguously match requests and responses.\
    \ All REGISTER requests\n   issued by a single client SHOULD use the same Call-ID,\
    \ at least\n   within the same boot cycle.\n        Since the Call-ID is generated\
    \ by and for SIP, there is no\n        reason to deal with the complexity of URL-encoding\
    \ and\n        case-ignoring string comparison.\n        Call-ID   =  ( \"Call-ID\"\
    \ | \"i\" ) \":\" local-id \"@\" host\n        local-id  =  1*uric\n   \"host\"\
    \ SHOULD be either a fully qualified domain name or a globally\n   routable IP\
    \ address. If this is the case, the \"local-id\" SHOULD be an\n   identifier consisting\
    \ of URI characters that is unique within \"host\".\n   Use of cryptographically\
    \ random identifiers [27] is RECOMMENDED.  If,\n   however, host is not an FQDN\
    \ or globally routable IP address (such as\n   a net 10 address), the local-id\
    \ MUST be globally unique, as opposed\n   to unique within host. These rules guarantee\
    \ overall global\n   uniqueness of the Call-ID. The value for Call-ID MUST NOT\
    \ be reused\n   for a different call.  Call-IDs are case-sensitive.\n        Using\
    \ cryptographically random identifiers provides some\n        protection against\
    \ session hijacking. Call-ID, To and From\n        are needed to identify a call\
    \ leg.  The distinction between\n        call and call leg matters in calls with\
    \ third-party\n        control.\n   For systems which have tight bandwidth constraints,\
    \ many of the\n   mandatory SIP headers have a compact form, as discussed in Section\
    \ 9.\n   These are alternate names for the headers which occupy less space in\n\
    \   the message. In the case of Call-ID, the compact form is i.\n   For example,\
    \ both of the following are valid:\n     Call-ID: f81d4fae-7dec-11d0-a765-00a0c91e6bf6@foo.bar.com\n\
    \   or\n     i:f81d4fae-7dec-11d0-a765-00a0c91e6bf6@foo.bar.com\n"
- title: 6.13 Contact
  contents:
  - "6.13 Contact\n   The Contact general-header field can appear in INVITE, ACK,\
    \ and\n   REGISTER requests, and in 1xx, 2xx, 3xx, and 485 responses. In\n   general,\
    \ it provides a URL where the user can be reached for further\n   communications.\n\
    \   INVITE and ACK requests: INVITE and ACK requests MAY contain Contact\n   \
    \     headers indicating from which location the request is\n        originating.\n\
    \        This allows the callee to send future requests, such as\n        BYE,\
    \ directly to the caller instead of through a series of\n        proxies.  The\
    \ Via header is not sufficient since the\n        desired address may be that\
    \ of a proxy.\n   INVITE 2xx responses: A user agent server sending a definitive,\n\
    \        positive response (2xx) MAY insert a Contact response header\n      \
    \  field indicating the SIP address under which it is reachable\n        most\
    \ directly for future SIP requests, such as ACK, within the\n        same Call-ID.\
    \ The Contact header field contains the address of\n        the server itself\
    \ or that of a proxy, e.g., if the host is\n        behind a firewall. The value\
    \ of this Contact header is copied\n        into the Request-URI of subsequent\
    \ requests for this call if the\n        response did not also contain a Record-Route\
    \ header. If the\n        response also contains a Record-Route header field,\
    \ the address\n        in the Contact header field is added as the last item in\
    \ the\n        Route header field. See Section 6.29 for details.\n        The\
    \ Contact value SHOULD NOT be cached across calls, as it\n        may not represent\
    \ the most desirable location for a\n        particular destination address.\n\
    \   INVITE 1xx responses: A UAS sending a provisional response (1xx) MAY\n   \
    \     insert a Contact response header. It has the same semantics in a\n     \
    \   1xx response as a 2xx INVITE response. Note that CANCEL requests\n       \
    \ MUST NOT be sent to that address, but rather follow the same\n        path as\
    \ the original request.\n   REGISTER requests: REGISTER requests MAY contain a\
    \ Contact header\n        field indicating at which locations the user is reachable.\
    \ The\n        REGISTER request defines a wildcard Contact field, \"*\", which\n\
    \        MUST only be used with Expires: 0 to remove all registrations\n     \
    \   for a particular user. An optional \"expires\" parameter indicates\n     \
    \   the desired expiration time of the registration. If a Contact\n        entry\
    \ does not have an \"expires\" parameter, the Expires header\n        field is\
    \ used as the default value. If neither of these\n        mechanisms is used,\
    \ SIP URIs are assumed to expire after one\n        hour. Other URI schemes have\
    \ no expiration times.\n   REGISTER 2xx responses: A REGISTER response MAY return\
    \ all locations\n        at which the user is currently reachable.  An optional\
    \ \"expires\"\n        parameter indicates the expiration time of the registration.\
    \ If\n        a Contact entry does not have an \"expires\" parameter, the value\n\
    \        of the Expires header field indicates the expiration time. If\n     \
    \   neither mechanism is used, the expiration time specified in the\n        request,\
    \ explicitly or by default, is used.\n   3xx and 485 responses: The Contact response-header\
    \ field can be used\n        with a 3xx or 485 (Ambiguous) response codes to indicate\
    \ one or\n        more alternate addresses to try. It can appear in responses\
    \ to\n        BYE, INVITE and OPTIONS methods. The Contact header field\n    \
    \    contains URIs giving the new locations or user names to try, or\n       \
    \ may simply specify additional transport parameters. A 300\n        (Multiple\
    \ Choices), 301 (Moved Permanently), 302 (Moved\n        Temporarily) or 485 (Ambiguous)\
    \ response SHOULD contain a\n        Contact field containing URIs of new addresses\
    \ to be tried. A\n        301 or 302 response may also give the same location\
    \ and username\n        that was being tried but specify additional transport\
    \ parameters\n        such as a different server or multicast address to try or\
    \ a\n        change of SIP transport from UDP to TCP or vice versa. The\n    \
    \    client copies the \"user\", \"password\", \"host\", \"port\" and \"user-\n\
    \        param\" elements of the Contact URI into the Request-URI of the\n   \
    \     redirected request and directs the request to the address\n        specified\
    \ by the \"maddr\" and \"port\" parameters, using the\n        transport protocol\
    \ given in the \"transport\" parameter. If\n        \"maddr\" is a multicast address,\
    \ the value of \"ttl\" is used as\n        the time-to-live value.\n   Note that\
    \ the Contact header field MAY also refer to a different\n   entity than the one\
    \ originally called. For example, a SIP call\n   connected to GSTN gateway may\
    \ need to deliver a special information\n   announcement such as \"The number\
    \ you have dialed has been changed.\"\n   A Contact response header field can\
    \ contain any suitable URI\n   indicating where the called party can be reached,\
    \ not limited to SIP\n   URLs. For example, it could contain URL's for phones,\
    \ fax, or irc (if\n   they were defined) or a mailto: (RFC 2368, [28]) URL.\n\
    \   The following parameters are defined. Additional parameters may be\n   defined\
    \ in other specifications.\n   q: The \"qvalue\" indicates the relative preference\
    \ among the locations\n        given. \"qvalue\" values are decimal numbers from\
    \ 0 to 1, with\n        higher values indicating higher preference.\n   action:\
    \ The \"action\" parameter is used only when registering with the\n        REGISTER\
    \ request. It indicates whether the client wishes that\n        the server proxy\
    \ or redirect future requests intended for the\n        client. If this parameter\
    \ is not specified the action taken\n        depends on server configuration.\
    \ In its response, the registrar\n        SHOULD indicate the mode used. This\
    \ parameter is ignored for\n        other requests.\n   expires: The \"expires\"\
    \ parameter indicates how long the URI is valid.\n        The parameter is either\
    \ a number indicating seconds or a quoted\n        string containing a SIP-date.\
    \ If this parameter is not provided,\n        the value of the Expires header\
    \ field determines how long the\n        URI is valid. Implementations MAY treat\
    \ values larger than\n        2**32-1 (4294967295 seconds or 136 years) as equivalent\
    \ to\n        2**32-1.\n   Contact = ( \"Contact\" | \"m\" ) \":\" \n        \
    \     (\"*\" | (1# (( name-addr | addr-spec )\n             [ *( \";\" contact-params\
    \ ) ] [ comment ] )))\n   name-addr      = [ display-name ] \"<\" addr-spec \"\
    >\"\n   addr-spec      = SIP-URL | URI\n   display-name   = *token | quoted-string\n\
    \   contact-params = \"q\"       \"=\" qvalue\n                  | \"action\"\
    \  \"=\" \"proxy\" | \"redirect\"\n                  | \"expires\" \"=\" delta-seconds\
    \ | <\"> SIP-date <\">\n                  | extension-attribute\n   extension-attribute\
    \ = extension-name [ \"=\" extension-value ]\n        only allows one address,\
    \ unquoted. Since URIs can contain\n        commas and semicolons as reserved\
    \ characters, they can be\n        mistaken for header or parameter delimiters,\
    \ respectively.\n        The current syntax corresponds to that for the To and\
    \ From\n        header, which also allows the use of display names.\n   Example:\n\
    \     Contact: \"Mr. Watson\" <sip:watson@worcester.bell-telephone.com>\n    \
    \    ;q=0.7; expires=3600,\n        \"Mr. Watson\" <mailto:watson@bell-telephone.com>\
    \ ;q=0.1\n"
- title: 6.14 Content-Encoding
  contents:
  - "6.14 Content-Encoding\n        Content-Encoding  =  ( \"Content-Encoding\" |\
    \ \"e\" ) \":\"\n                             1#content-coding\n   The Content-Encoding\
    \ entity-header field is used as a modifier to the\n   \"media-type\". When present,\
    \ its value indicates what additional\n   content codings have been applied to\
    \ the entity-body, and thus what\n   decoding mechanisms MUST be applied in order\
    \ to obtain the media-type\n   referenced by the Content-Type header field.  Content-Encoding\
    \ is\n   primarily used to allow a body to be compressed without losing the\n\
    \   identity of its underlying media type.\n   If multiple encodings have been\
    \ applied to an entity, the content\n   codings MUST be listed in the order in\
    \ which they were applied.\n   All content-coding values are case-insensitive.\
    \ The Internet Assigned\n   Numbers Authority (IANA) acts as a registry for content-coding\
    \ value\n   tokens. See [3.5] for a definition of the syntax for content-coding.\n\
    \   Clients MAY apply content encodings to the body in requests. If the\n   server\
    \ is not capable of decoding the body, or does not recognize any\n   of the content-coding\
    \ values, it MUST send a 415 \"Unsupported Media\n   Type\" response, listing\
    \ acceptable encodings in the Accept-Encoding\n   header. A server MAY apply content\
    \ encodings to the bodies in\n   responses. The server MUST only use encodings\
    \ listed in the Accept-\n   Encoding header in the request.\n"
- title: 6.15 Content-Length
  contents:
  - "6.15 Content-Length\n   The Content-Length entity-header field indicates the\
    \ size of the\n   message-body, in decimal number of octets, sent to the recipient.\n\
    \        Content-Length  =  ( \"Content-Length\" | \"l\" ) \":\" 1*DIGIT\n   An\
    \ example is\n     Content-Length: 3495\n   Applications SHOULD use this field\
    \ to indicate the size of the\n   message-body to be transferred, regardless of\
    \ the media type of the\n   entity. Any Content-Length greater than or equal to\
    \ zero is a valid\n   value. If no body is present in a message, then the Content-Length\n\
    \   header field MUST be set to zero. If a server receives a UDP request\n   without\
    \ Content-Length, it MUST assume that the request encompasses\n   the remainder\
    \ of the packet.  If a server receives a UDP request with\n   a Content-Length,\
    \ but the value is larger than the size of the body\n   sent in the request, the\
    \ client SHOULD generate a 400 class response.\n   If there is additional data\
    \ in the UDP packet after the last byte of\n   the body has been read, the server\
    \ MUST treat the remaining data as a\n   separate message. This allows several\
    \ messages to be placed in a\n   single UDP packet.\n   If a response does not\
    \ contain a Content-Length, the client assumes\n   that it encompasses the remainder\
    \ of the UDP packet or the data until\n   the TCP connection is closed, as applicable.\
    \  Section 8 describes how\n   to determine the length of the message body.\n"
- title: 6.16 Content-Type
  contents:
  - "6.16 Content-Type\n   The Content-Type entity-header field indicates the media\
    \ type of the\n   message-body sent to the recipient. The \"media-type\" element\
    \ is\n   defined in [H3.7].\n        Content-Type  =  ( \"Content-Type\" | \"\
    c\" ) \":\" media-type\n   Examples of this header field are\n     Content-Type:\
    \ application/sdp\n     Content-Type: text/html; charset=ISO-8859-4\n"
- title: 6.17 CSeq
  contents:
  - "6.17 CSeq\n   Clients MUST add the CSeq (command sequence) general-header field\
    \ to\n   every request. A CSeq header field in a request contains the request\n\
    \   method and a single decimal sequence number chosen by the requesting\n   client,\
    \ unique within a single value of Call-ID. The sequence number\n   MUST be expressible\
    \ as a 32-bit unsigned integer. The initial value\n   of the sequence number is\
    \ arbitrary, but MUST be less than 2**31.\n   Consecutive requests that differ\
    \ in request method, headers or body,\n   but have the same Call-ID MUST contain\
    \ strictly monotonically\n   increasing and contiguous sequence numbers; sequence\
    \ numbers do not\n   wrap around.  Retransmissions of the same request carry the\
    \ same\n   sequence number, but an INVITE with a different message body or\n \
    \  different header fields (a \"re-invitation\") acquires a new, higher\n   sequence\
    \ number. A server MUST echo the CSeq value from the request\n   in its response.\
    \  If the Method value is missing in the received CSeq\n   header field, the server\
    \ fills it in appropriately.\n   The ACK and CANCEL requests MUST contain the\
    \ same CSeq value as the\n   INVITE request that it refers to, while a BYE request\
    \ cancelling an\n   invitation MUST have a higher sequence number. A BYE request\
    \ with a\n   CSeq that is not higher should cause a 400 response to be generated.\n\
    \   A user agent server MUST remember the highest sequence number for any\n  \
    \ INVITE request with the same Call-ID value. The server MUST respond\n   to,\
    \ and then discard, any INVITE request with a lower sequence\n   number.\n   All\
    \ requests spawned in a parallel search have the same CSeq value as\n   the request\
    \ triggering the parallel search.\n        CSeq  =  \"CSeq\" \":\" 1*DIGIT Method\n\
    \        Strictly speaking, CSeq header fields are needed for any\n        SIP\
    \ request that can be cancelled by a BYE or CANCEL\n        request or where a\
    \ client can issue several requests for\n        the same Call-ID in close succession.\
    \ Without a sequence\n        number, the response to an INVITE could be mistaken\
    \ for the\n        response to the cancellation (BYE or CANCEL). Also, if the\n\
    \        network duplicates packets or if an ACK is delayed until\n        the\
    \ server has sent an additional response, the client\n        could interpret\
    \ an old response as the response to a re-\n        invitation issued shortly\
    \ thereafter. Using CSeq also makes\n        it easy for the server to distinguish\
    \ different versions of\n        an invitation, without comparing the message\
    \ body.\n   The Method value allows the client to distinguish the response to\
    \ an\n   INVITE request from that of a CANCEL response. CANCEL requests can be\n\
    \   generated by proxies; if they were to increase the sequence number,\n   it\
    \ might conflict with a later request issued by the user agent for\n   the same\
    \ call.\n   With a length of 32 bits, a server could generate, within a single\n\
    \   call, one request a second for about 136 years before needing to wrap\n  \
    \ around.  The initial value of the sequence number is chosen so that\n   subsequent\
    \ requests within the same call will not wrap around. A\n   non-zero initial value\
    \ allows to use a time-based initial sequence\n   number, if the client desires.\
    \ A client could, for example, choose\n   the 31 most significant bits of a 32-bit\
    \ second clock as an initial\n   sequence number.\n   Forked requests MUST have\
    \ the same CSeq as there would be ambiguity\n   otherwise between these forked\
    \ requests and later BYE issued by the\n   client user agent.\n   Example:\n \
    \    CSeq: 4711 INVITE\n"
- title: 6.18 Date
  contents:
  - "6.18 Date\n   Date is a general-header field. Its syntax is:\n        SIP-date\
    \  =  rfc1123-date\n   See [H14.19] for a definition of rfc1123-date. Note that\
    \ unlike\n   HTTP/1.1, SIP only supports the most recent RFC1123 [29] formatting\n\
    \   for dates.\n   The Date header field reflects the time when the request or\
    \ response\n   is first sent. Thus, retransmissions have the same Date header\
    \ field\n   value as the original.\n        The Date header field can be used\
    \ by simple end systems\n        without a battery-backed clock to acquire a notion\
    \ of\n        current time.\n"
- title: 6.19 Encryption
  contents:
  - "6.19 Encryption\n   The Encryption general-header field specifies that the content\
    \ has\n   been encrypted. Section 13 describes the overall SIP security\n   architecture\
    \ and algorithms. This header field is intended for end-\n   to-end encryption\
    \ of requests and responses. Requests are encrypted\n   based on the public key\
    \ belonging to the entity named in the To\n   header field. Responses are encrypted\
    \ based on the public key\n   conveyed in the Response-Key header field. Note\
    \ that the public keys\n   themselves may not be used for the encryption. This\
    \ depends on the\n   particular algorithms used.\n   For any encrypted message,\
    \ at least the message body and possibly\n   other message header fields are encrypted.\
    \ An application receiving a\n   request or response containing an Encryption\
    \ header field decrypts\n   the body and then concatenates the plaintext to the\
    \ request line and\n   headers of the original message. Message headers in the\
    \ decrypted\n   part completely replace those with the same field name in the\n\
    \   plaintext part.  (Note: If only the body of the message is to be\n   encrypted,\
    \ the body has to be prefixed with CRLF to allow proper\n   concatenation.) Note\
    \ that the request method and Request-URI cannot\n   be encrypted.\n        Encryption\
    \ only provides privacy; the recipient has no\n        guarantee that the request\
    \ or response came from the party\n        listed in the From message header,\
    \ only that the sender\n        used the recipient's public key. However, proxies\
    \ will not\n        be able to modify the request or response.\n        Encryption\
    \         =  \"Encryption\" \":\" encryption-scheme 1*SP\n                   \
    \           #encryption-params\n        encryption-scheme  =  token\n        encryption-params\
    \  =  token \"=\" ( token | quoted-string )\n        The token indicates the form\
    \ of encryption used; it is\n        described in section 13.\n   The example\
    \ in Figure 10 shows a message encrypted with ASCII-armored\n   PGP that was generated\
    \ by applying \"pgp -ea\" to the payload to be\n   encrypted.\n   INVITE sip:watson@boston.bell-telephone.com\
    \ SIP/2.0\n   Via: SIP/2.0/UDP 169.130.12.5\n   From: <sip:a.g.bell@bell-telephone.com>\n\
    \   To: T. A. Watson <sip:watson@bell-telephone.com>\n   Call-ID: 187602141351@worcester.bell-telephone.com\n\
    \   Content-Length: 885\n   Encryption: PGP version=2.6.2,encoding=ascii\n   hQEMAxkp5GPd+j5xAQf/ZDIfGD/PDOM1wayvwdQAKgGgjmZWe+MTy9NEX8O25Red\n\
    \   h0/pyrd/+DV5C2BYs7yzSOSXaj1C/tTK/4do6rtjhP8QA3vbDdVdaFciwEVAcuXs\n   ODxlNAVqyDi1RqFC28BJIvQ5KfEkPuACKTK7WlRSBc7vNPEA3nyqZGBTwhxRSbIR\n\
    \   RuFEsHSVojdCam4htcqxGnFwD9sksqs6LIyCFaiTAhWtwcCaN437G7mUYzy2KLcA\n   zPVGq1VQg83b99zPzIxRdlZ+K7+bAnu8Rtu+ohOCMLV3TPXbyp+err1YiThCZHIu\n\
    \   X9dOVj3CMjCP66RSHa/ea0wYTRRNYA/G+kdP8DSUcqYAAAE/hZPX6nFIqk7AVnf6\n   IpWHUPTelNUJpzUp5Ou+q/5P7ZAsn+cSAuF2YWtVjCf+SQmBR13p2EYYWHoxlA2/\n\
    \   GgKADYe4M3JSwOtqwU8zUJF3FIfk7vsxmSqtUQrRQaiIhqNyG7KxJt4YjWnEjF5E\n   WUIPhvyGFMJaeQXIyGRYZAYvKKklyAJcm29zLACxU5alX4M25lHQd9FR9Zmq6Jed\n\
    \   wbWvia6cAIfsvlZ9JGocmQYF7pcuz5pnczqP+/yvRqFJtDGD/v3s++G2R+ViVYJO\n   z/lxGUZaM4IWBCf+4DUjNanZM0oxAE28NjaIZ0rrldDQmO8V9FtPKdHxkqA5iJP+\n\
    \   6vGOFti1Ak4kmEz0vM/Nsv7kkubTFhRl05OiJIGr9S1UhenlZv9l6RuXsOY/EwH2\n   z8X9N4MhMyXEVuC9rt8/AUhmVQ==\n\
    \   =bOW+\n   Figure 10: PGP Encryption Example\n   Since proxies can base their\
    \ forwarding decision on any combination\n   of SIP header fields, there is no\
    \ guarantee that an encrypted request\n   \"hiding\" header fields will reach\
    \ the same destination as an\n   otherwise identical un-encrypted request.\n"
- title: 6.20 Expires
  contents:
  - "6.20 Expires\n   The Expires entity-header field gives the date and time after\
    \ which\n   the message content expires.\n   This header field is currently defined\
    \ only for the REGISTER and\n   INVITE methods. For REGISTER, it is a request\
    \ and response-header\n   field. In a REGISTER request, the client indicates how\
    \ long it wishes\n   the registration to be valid. In the response, the server\
    \ indicates\n   the earliest expiration time of all registrations. The server\
    \ MAY\n   choose a shorter time interval than that requested by the client, but\n\
    \   SHOULD NOT choose a longer one.\n   For INVITE requests, it is a request and\
    \ response-header field. In a\n   request, the caller can limit the validity of\
    \ an invitation, for\n   example, if a client wants to limit the time duration\
    \ of a search or\n   a conference invitation. A user interface MAY take this as\
    \ a hint to\n   leave the invitation window on the screen even if the user is\
    \ not\n   currently at the workstation. This also limits the duration of a\n \
    \  search. If the request expires before the search completes, the proxy\n   returns\
    \ a 408 (Request Timeout) status. In a 302 (Moved Temporarily)\n   response, a\
    \ server can advise the client of the maximal duration of\n   the redirection.\n\
    \   The value of this field can be either a SIP-date or an integer number\n  \
    \ of seconds (in decimal), measured from the receipt of the request.\n   The latter\
    \ approach is preferable for short durations, as it does not\n   depend on clients\
    \ and servers sharing a synchronized clock.\n   Implementations MAY treat values\
    \ larger than 2**32-1 (4294967295 or\n   136 years) as equivalent to 2**32-1.\n\
    \        Expires  =  \"Expires\" \":\" ( SIP-date | delta-seconds )\n   Two examples\
    \ of its use are\n     Expires: Thu, 01 Dec 1994 16:00:00 GMT\n     Expires: 5\n"
- title: 6.21 From
  contents:
  - "6.21 From\n   Requests and responses MUST contain a From general-header field,\n\
    \   indicating the initiator of the request. The From field MAY contain\n   the\
    \ \"tag\" parameter. The server copies the From header field from the\n   request\
    \ to the response. The optional \"display-name\" is meant to be\n   rendered by\
    \ a human-user interface. A system SHOULD use the display\n   name \"Anonymous\"\
    \ if the identity of the client is to remain hidden.\n   The SIP-URL MUST NOT\
    \ contain the \"transport-param\", \"maddr-param\",\n   \"ttl-param\", or \"headers\"\
    \ elements. A server that receives a SIP-URL\n   with these elements removes them\
    \ before further processing.\n   Even if the \"display-name\" is empty, the \"\
    name-addr\" form MUST be\n   used if the \"addr-spec\" contains a comma, question\
    \ mark, or\n   semicolon.\n        From         =  ( \"From\" | \"f\" ) \":\"\
    \ ( name-addr | addr-spec )\n                        *( \";\" addr-params )\n\
    \        addr-params  =  tag-param\n        tag-param    =  \"tag=\" UUID\n  \
    \      UUID         =  1*( hex | \"-\" )\n   Examples:\n     From: \"A. G. Bell\"\
    \ <sip:agb@bell-telephone.com>\n     From: sip:+12125551212@server.phone2net.com\n\
    \     From: Anonymous <sip:c8oqz84zk7z@privacy.org>\n   The \"tag\" MAY appear\
    \ in the From field of a request. It MUST be\n   present when it is possible that\
    \ two instances of a user sharing a\n   SIP address can make call invitations\
    \ with the same Call-ID.\n   The \"tag\" value MUST be globally unique and cryptographically\
    \ random\n   with at least 32 bits of randomness. A single user maintains the\
    \ same\n   tag throughout the call identified by the Call-ID.\n        Call-ID,\
    \ To and From are needed to identify a call leg.\n        The distinction between\
    \ call and call leg matters in calls\n        with multiple responses to a forked\
    \ request. The format is\n        similar to the equivalent RFC 822 [24] header,\
    \ but with a\n        URI instead of just an email address.\n"
- title: 6.22 Hide
  contents:
  - "6.22 Hide\n   A client uses the Hide request header field to indicate that it\
    \ wants\n   the path comprised of the Via header fields (Section 6.40) to be\n\
    \   hidden from subsequent proxies and user agents. It can take two\n   forms:\
    \ Hide: route and Hide:  hop. Hide header fields are typically\n   added by the\
    \ client user agent, but MAY be added by any proxy along\n   the path.\n   If\
    \ a request contains the \"Hide: route\" header field, all following\n   proxies\
    \ SHOULD hide their previous hop. If a request contains the\n   \"Hide: hop\"\
    \ header field, only the next proxy SHOULD hide the\n   previous hop and then\
    \ remove the Hide option unless it also wants to\n   remain anonymous.\n   A server\
    \ hides the previous hop by encrypting the \"host\" and \"port\"\n   parts of\
    \ the top-most Via header field with an algorithm of its\n   choice. Servers SHOULD\
    \ add additional \"salt\" to the \"host\" and \"port\"\n   information prior to\
    \ encryption to prevent malicious downstream\n   proxies from guessing earlier\
    \ parts of the path based on seeing\n   identical encrypted Via headers. Hidden\
    \ Via fields are marked with\n   the \"hidden\" Via option, as described in Section\
    \ 6.40.\n   A server that is capable of hiding Via headers MUST attempt to\n \
    \  decrypt all Via headers marked as \"hidden\" to perform loop detection.\n \
    \  Servers that are not capable of hiding can ignore hidden Via fields\n   in\
    \ their loop detection algorithm.\n        If hidden headers were not marked,\
    \ a proxy would have to\n        decrypt all headers to detect loops, just in\
    \ case one was\n        encrypted, as the Hide: Hop option may have been removed\n\
    \        along the way.\n   A host MUST NOT add such a \"Hide: hop\" header field\
    \ unless it can\n   guarantee it will only send a request for this destination\
    \ to the\n   same next hop. The reason for this is that it is possible that the\n\
    \   request will loop back through this same hop from a downstream proxy.\n  \
    \ The loop will be detected by the next hop if the choice of next hop\n   is fixed,\
    \ but could loop an arbitrary number of times otherwise.\n   A client requesting\
    \ \"Hide: route\" can only rely on keeping the\n   request path private if it\
    \ sends the request to a trusted proxy.\n   Hiding the route of a SIP request\
    \ is of limited value if the request\n   results in data packets being exchanged\
    \ directly between the calling\n   and called user agent.\n   The use of Hide\
    \ header fields is discouraged unless path privacy is\n   truly needed; Hide fields\
    \ impose extra processing costs and\n   restrictions for proxies and can cause\
    \ requests to generate 482 (Loop\n   Detected) responses that could otherwise\
    \ be avoided.\n   The encryption of Via header fields is described in more detail\
    \ in\n   Section 13.\n   The Hide header field has the following syntax:\n   \
    \     Hide  =  \"Hide\" \":\" ( \"route\" | \"hop\" )\n"
- title: 6.23 Max-Forwards
  contents:
  - "6.23 Max-Forwards\n   The Max-Forwards request-header field may be used with\
    \ any SIP method\n   to limit the number of proxies or gateways that can forward\
    \ the\n   request to the next downstream server. This can also be useful when\n\
    \   the client is attempting to trace a request chain which appears to be\n  \
    \ failing or looping in mid-chain.\n        Max-Forwards  =  \"Max-Forwards\"\
    \ \":\" 1*DIGIT\n   The Max-Forwards value is a decimal integer indicating the\
    \ remaining\n   number of times this request message is allowed to be forwarded.\n\
    \   Each proxy or gateway recipient of a request containing a Max-\n   Forwards\
    \ header field MUST check and update its value prior to\n   forwarding the request.\
    \ If the received value is zero (0), the\n   recipient MUST NOT forward the request.\
    \ Instead, for the OPTIONS and\n   REGISTER methods, it MUST respond as the final\
    \ recipient. For all\n   other methods, the server returns 483 (Too many hops).\n\
    \   If the received Max-Forwards value is greater than zero, then the\n   forwarded\
    \ message MUST contain an updated Max-Forwards field with a\n   value decremented\
    \ by one (1).\n   Example:\n     Max-Forwards: 6\n"
- title: 6.24 Organization
  contents:
  - "6.24 Organization\n   The Organization general-header field conveys the name\
    \ of the\n   organization to which the entity issuing the request or response\n\
    \   belongs. It MAY also be inserted by proxies at the boundary of an\n   organization.\n\
    \        The field MAY be used by client software to filter calls.\n        Organization\
    \  =  \"Organization\" \":\" *TEXT-UTF8\n"
- title: 6.25 Priority
  contents:
  - "6.25 Priority\n   The Priority request-header field indicates the urgency of\
    \ the\n   request as perceived by the client.\n        Priority        =  \"Priority\"\
    \ \":\" priority-value\n        priority-value  =  \"emergency\" | \"urgent\"\
    \ | \"normal\"\n                        |  \"non-urgent\"\n   It is RECOMMENDED\
    \ that the value of \"emergency\" only be used when\n   life, limb or property\
    \ are in imminent danger.\n   Examples:\n     Subject: A tornado is heading our\
    \ way!\n     Priority: emergency\n     Subject: Weekend plans\n     Priority:\
    \ non-urgent\n        These are the values of RFC 2076 [30], with the addition\
    \ of\n        \"emergency\".\n"
- title: 6.26 Proxy-Authenticate
  contents:
  - "6.26 Proxy-Authenticate\n   The Proxy-Authenticate response-header field MUST\
    \ be included as part\n   of a 407 (Proxy Authentication Required) response. The\
    \ field value\n   consists of a challenge that indicates the authentication scheme\
    \ and\n   parameters applicable to the proxy for this Request-URI.\n   Unlike\
    \ its usage within HTTP, the Proxy-Authenticate header MUST be\n   passed upstream\
    \ in the response to the UAC. In SIP, only UAC's can\n   authenticate themselves\
    \ to proxies.\n   The syntax for this header is defined in [H14.33]. See 14 for\
    \ further\n   details on its usage.\n   A client SHOULD cache the credentials\
    \ used for a particular proxy\n   server and realm for the next request to that\
    \ server. Credentials\n   are, in general, valid for a specific value of the Request-URI\
    \ at a\n   particular proxy server. If a client contacts a proxy server that has\n\
    \   required authentication in the past, but the client does not have\n   credentials\
    \ for the particular Request-URI, it MAY attempt to use the\n   most-recently\
    \ used credential. The server responds with 401\n   (Unauthorized) if the client\
    \ guessed wrong.\n        This suggested caching behavior is motivated by proxies\n\
    \        restricting phone calls to authenticated users. It seems\n        likely\
    \ that in most cases, all destinations require the\n        same password. Note\
    \ that end-to-end authentication is\n        likely to be destination-specific.\n"
- title: 6.27 Proxy-Authorization
  contents:
  - "6.27 Proxy-Authorization\n   The Proxy-Authorization request-header field allows\
    \ the client to\n   identify itself (or its user) to a proxy which requires\n\
    \   authentication. The Proxy-Authorization field value consists of\n   credentials\
    \ containing the authentication information of the user\n   agent for the proxy\
    \ and/or realm of the resource being requested.\n   Unlike Authorization, the\
    \ Proxy-Authorization header field applies\n   only to the next outbound proxy\
    \ that demanded authentication using\n   the Proxy- Authenticate field. When multiple\
    \ proxies are used in a\n   chain, the Proxy-Authorization header field is consumed\
    \ by the first\n   outbound proxy that was expecting to receive credentials. A\
    \ proxy MAY\n   relay the credentials from the client request to the next proxy\
    \ if\n   that is the mechanism by which the proxies cooperatively authenticate\n\
    \   a given request.\n   See [H14.34] for a definition of the syntax, and section\
    \ 14 for a\n   discussion of its usage.\n"
- title: 6.28 Proxy-Require
  contents:
  - "6.28 Proxy-Require\n   The Proxy-Require header field is used to indicate proxy-sensitive\n\
    \   features that MUST be supported by the proxy. Any Proxy-Require\n   header\
    \ field features that are not supported by the proxy MUST be\n   negatively acknowledged\
    \ by the proxy to the client if not supported.\n   Proxy servers treat this field\
    \ identically to the Require field.\n   See Section 6.30 for more details on the\
    \ mechanics of this message\n   and a usage example.\n"
- title: 6.29 Record-Route
  contents:
  - "6.29 Record-Route\n   The Record-Route request and response header field is added\
    \ to a\n   request by any proxy that insists on being in the path of subsequent\n\
    \   requests for the same call leg. It contains a globally reachable\n   Request-URI\
    \ that identifies the proxy server. Each proxy server adds\n   its Request-URI\
    \ to the beginning of the list.\n   The server copies the Record-Route header\
    \ field unchanged into the\n   response. (Record-Route is only relevant for 2xx\
    \ responses.)\n   The calling user agent client copies the Record-Route header\
    \ into a\n   Route header field of subsequent requests within the same call leg,\n\
    \   reversing the order of requests, so that the first entry is closest\n   to\
    \ the user agent client. If the response contained a Contact header\n   field,\
    \ the calling user agent adds its content as the last Route\n   header. Unless\
    \ this would cause a loop, any client MUST send any\n   subsequent requests for\
    \ this call leg to the first Request-URI in the\n   Route request header field\
    \ and remove that entry.\n   The calling user agent MUST NOT use the Record-Route\
    \ header field in\n   requests that contain Route header fields.\n        Some\
    \ proxies, such as those controlling firewalls or in an\n        automatic call\
    \ distribution (ACD) system, need to maintain\n        call state and thus need\
    \ to receive any BYE and ACK packets\n        for the call.\n   The Record-Route\
    \ header field has the following syntax:\n        Record-Route  =  \"Record-Route\"\
    \ \":\" 1# name-addr\n   Proxy servers SHOULD use the \"maddr\" URL parameter\
    \ containing their\n   address to ensure that subsequent requests are guaranteed\
    \ to reach\n   exactly the same server.\n   Example for a request that has traversed\
    \ the hosts ieee.org and\n   bell-telephone.com , in that order:\n     Record-Route:\
    \ <sip:a.g.bell@bell-telephone.com>,\n       <sip:a.bell@ieee.org>\n"
- title: 6.30 Require
  contents:
  - "6.30 Require\n   The Require request-header field is used by clients to tell\
    \ user\n   agent servers about options that the client expects the server to\n\
    \   support in order to properly process the request. If a server does\n   not\
    \ understand the option, it MUST respond by returning status code\n   420 (Bad\
    \ Extension) and list those options it does not understand in\n   the Unsupported\
    \ header.\n        Require  =  \"Require\" \":\" 1#option-tag\n   Example:\n \
    \  C->S:   INVITE sip:watson@bell-telephone.com SIP/2.0\n           Require: com.example.billing\n\
    \           Payment: sheep_skins, conch_shells\n   S->C:   SIP/2.0 420 Bad Extension\n\
    \           Unsupported: com.example.billing\n        This is to make sure that\
    \ the client-server interaction\n        will proceed without delay when all options\
    \ are understood\n        by both sides, and only slow down if options are not\n\
    \        understood (as in the example above).  For a well-matched\n        client-server\
    \ pair, the interaction proceeds quickly,\n        saving a round-trip often required\
    \ by negotiation\n        mechanisms. In addition, it also removes ambiguity when\
    \ the\n        client requires features that the server does not\n        understand.\
    \ Some features, such as call handling fields,\n        are only of interest to\
    \ end systems.\n   Proxy and redirect servers MUST ignore features that are not\n\
    \   understood. If a particular extension requires that intermediate\n   devices\
    \ support it, the extension MUST be tagged in the Proxy-Require\n   field as well\
    \ (see Section 6.28).\n"
- title: 6.31 Response-Key
  contents:
  - "6.31 Response-Key\n   The Response-Key request-header field can be used by a\
    \ client to\n   request the key that the called user agent SHOULD use to encrypt\
    \ the\n   response with. The syntax is:\n        Response-Key  =  \"Response-Key\"\
    \ \":\" key-scheme 1*SP #key-param\n        key-scheme    =  token\n        key-param\
    \     =  token \"=\" ( token | quoted-string )\n   The \"key-scheme\" gives the\
    \ type of encryption to be used for the\n   response. Section 13 describes security\
    \ schemes.\n   If the client insists that the server return an encrypted response,\n\
    \   it includes a\n                  Require: org.ietf.sip.encrypt-response\n\
    \   header field in its request. If the server cannot encrypt for\n   whatever\
    \ reason, it MUST follow normal Require header field\n   procedures and return\
    \ a 420 (Bad Extension) response. If this Require\n   header field is not present,\
    \ a server SHOULD still encrypt if it can.\n"
- title: 6.32 Retry-After
  contents:
  - "6.32 Retry-After\n   The Retry-After general-header field can be used with a\
    \ 503 (Service\n   Unavailable) response to indicate how long the service is expected\
    \ to\n   be unavailable to the requesting client and with a 404 (Not Found),\n\
    \   600 (Busy), or 603 (Decline) response to indicate when the called\n   party\
    \ anticipates being available again. The value of this field can\n   be either\
    \ an SIP-date or an integer number of seconds (in decimal)\n   after the time\
    \ of the response.\n   A REGISTER request MAY include this header field when deleting\n\
    \   registrations with \"Contact: * ;expires: 0\". The Retry-After value\n   then\
    \ indicates when the user might again be reachable. The registrar\n   MAY then\
    \ include this information in responses to future calls.\n   An optional comment\
    \ can be used to indicate additional information\n   about the time of callback.\
    \ An optional \"duration\" parameter\n   indicates how long the called party will\
    \ be reachable starting at the\n   initial time of availability. If no duration\
    \ parameter is given, the\n   service is assumed to be available indefinitely.\n\
    \        Retry-After  =  \"Retry-After\" \":\" ( SIP-date | delta-seconds )\n\
    \                        [ comment ] [ \";\" \"duration\" \"=\" delta-seconds\
    \ ]\n   Examples of its use are\n     Retry-After: Mon, 21 Jul 1997 18:48:34 GMT\
    \ (I'm in a meeting)\n     Retry-After: Mon, 01 Jan 9999 00:00:00 GMT\n      \
    \ (Dear John: Don't call me back, ever)\n     Retry-After: Fri, 26 Sep 1997 21:00:00\
    \ GMT;duration=3600\n     Retry-After: 120\n   In the third example, the callee\
    \ is reachable for one hour starting\n   at 21:00 GMT. In the last example, the\
    \ delay is 2 minutes.\n"
- title: 6.33 Route
  contents:
  - "6.33 Route\n   The Route request-header field determines the route taken by a\n\
    \   request. Each host removes the first entry and then proxies the\n   request\
    \ to the host listed in that entry, also using it as the\n   Request-URI. The\
    \ operation is further described in Section 6.29.\n   The Route header field has\
    \ the following syntax:\n        Route  =  \"Route\" \":\" 1# name-addr\n"
- title: 6.34 Server
  contents:
  - "6.34 Server\n   The Server response-header field contains information about the\n\
    \   software used by the user agent server to handle the request. The\n   syntax\
    \ for this field is defined in [H14.39].\n"
- title: 6.35 Subject
  contents:
  - "6.35 Subject\n   This is intended to provide a summary, or to indicate the nature,\
    \ of\n   the call, allowing call filtering without having to parse the session\n\
    \   description. (Also, the session description does not have to use the\n   same\
    \ subject indication as the invitation.)\n        Subject  =  ( \"Subject\" |\
    \ \"s\" ) \":\" *TEXT-UTF8\n   Example:\n     Subject: Tune in - they are talking\
    \ about your work!\n"
- title: 6.36 Timestamp
  contents:
  - "6.36 Timestamp\n   The timestamp general-header field describes when the client\
    \ sent the\n   request to the server. The value of the timestamp is of significance\n\
    \   only to the client and it MAY use any timescale. The server MUST echo\n  \
    \ the exact same value and MAY, if it has accurate information about\n   this,\
    \ add a floating point number indicating the number of seconds\n   that have elapsed\
    \ since it has received the request. The timestamp is\n   used by the client to\
    \ compute the round-trip time to the server so\n   that it can adjust the timeout\
    \ value for retransmissions.\n        Timestamp  =  \"Timestamp\" \":\" *(DIGIT)\
    \ [ \".\" *(DIGIT) ] [ delay ]\n        delay      =  *(DIGIT) [ \".\" *(DIGIT)\
    \ ]\n   Note that there MUST NOT be any LWS between a DIGIT and the decimal\n\
    \   point.\n"
- title: 6.37 To
  contents:
  - "6.37 To\n   The To general-header field specifies recipient of the request, with\n\
    \   the same SIP URL syntax as the From field.\n        To  =  ( \"To\" | \"t\"\
    \ ) \":\" ( name-addr | addr-spec )\n               *( \";\" addr-params )\n \
    \  Requests and responses MUST contain a To general-header field,\n   indicating\
    \ the desired recipient of the request. The optional\n   \"display-name\" is meant\
    \ to be rendered by a human-user interface.\n   The UAS or redirect server copies\
    \ the To header field into its\n   response, and MUST add a \"tag\" parameter\
    \ if the request contained\n   more than one Via header field.\n        If there\
    \ was more than one Via header field, the request\n        was handled by at least\
    \ one proxy server. Since the\n        receiver cannot know whether any of the\
    \ proxy servers\n        forked the request, it is safest to assume that they\
    \ might\n        have.\n   The SIP-URL MUST NOT contain the \"transport-param\"\
    , \"maddr-param\",\n   \"ttl-param\", or \"headers\" elements. A server that receives\
    \ a SIP-URL\n   with these elements removes them before further processing.\n\
    \   The \"tag\" parameter serves as a general mechanism to distinguish\n   multiple\
    \ instances of a user identified by a single SIP URL. As\n   proxies can fork\
    \ requests, the same request can reach multiple\n   instances of a user (mobile\
    \ and home phones, for example). As each\n   can respond, there needs to be a\
    \ means to distinguish the responses\n   from each at the caller. The situation\
    \ also arises with multicast\n   requests. The tag in the To header field serves\
    \ to distinguish\n   responses at the UAC. It MUST be placed in the To field of\
    \ the\n   response by each instance when there is a possibility that the\n   request\
    \ was forked at an intermediate proxy. The \"tag\" MUST be added\n   by UAS, registrars\
    \ and redirect servers, but MUST NOT be inserted\n   into responses forwarded\
    \ upstream by proxies. The \"tag\" is added for\n   all definitive responses for\
    \ all methods, and MAY be added for\n   informational responses from a UAS or\
    \ redirect server. All subsequent\n   transactions between two entities MUST include\
    \ the \"tag\" parameter,\n   as described in Section 11.\n   See Section 6.21\
    \ for details of the \"tag\" parameter.\n   The \"tag\" parameter in To headers\
    \ is ignored when matching responses\n   to requests that did not contain a \"\
    tag\" in their To header.\n   A SIP server returns a 400 (Bad Request) response\
    \ if it receives a\n   request with a To header field containing a URI with a\
    \ scheme it does\n   not recognize.\n   Even if the \"display-name\" is empty,\
    \ the \"name-addr\" form MUST be\n   used if the \"addr-spec\" contains a comma,\
    \ question mark, or\n   semicolon.\n   The following are examples of valid To\
    \ headers:\n     To: The Operator <sip:operator@cs.columbia.edu>;tag=287447\n\
    \     To: sip:+12125551212@server.phone2net.com\n        Call-ID, To and From\
    \ are needed to identify a call leg.\n        The distinction between call and\
    \ call leg matters in calls\n        with multiple responses from a forked request.\
    \ The \"tag\" is\n        added to the To header field in the response to allow\n\
    \        forking of future requests for the same call by proxies,\n        while\
    \ addressing only one of the possibly several\n        responding user agent servers.\
    \ It also allows several\n        instances of the callee to send requests that\
    \ can be\n        distinguished.\n"
- title: 6.38 Unsupported
  contents:
  - "6.38 Unsupported\n   The Unsupported response-header field lists the features\
    \ not\n   supported by the server. See Section 6.30 for a usage example and\n\
    \   motivation.\n   Syntax:\n        Unsupported  =  \"Unsupported\" \":\" 1#option-tag\n"
- title: 6.39 User-Agent
  contents:
  - "6.39 User-Agent\n   The User-Agent general-header field contains information\
    \ about the\n   client user agent originating the request. The syntax and semantics\n\
    \   are defined in [H14.42].\n"
- title: 6.40 Via
  contents:
  - "6.40 Via\n   The Via field indicates the path taken by the request so far.  This\n\
    \   prevents request looping and ensures replies take the same path as\n   the\
    \ requests, which assists in firewall traversal and other unusual\n   routing\
    \ situations.\n"
- title: 6.40.1 Requests
  contents:
  - "6.40.1 Requests\n   The client originating the request MUST insert into the request\
    \ a Via\n   field containing its host name or network address and, if not the\n\
    \   default port number, the port number at which it wishes to receive\n   responses.\
    \ (Note that this port number can differ from the UDP source\n   port number of\
    \ the request.) A fully-qualified domain name is\n   RECOMMENDED. Each subsequent\
    \ proxy server that sends the request\n   onwards MUST add its own additional\
    \ Via field before any existing Via\n   fields. A proxy that receives a redirection\
    \ (3xx) response and then\n   searches recursively, MUST use the same Via headers\
    \ as on the\n   original proxied request.\n   A proxy SHOULD check the top-most\
    \ Via header field to ensure that it\n   contains the sender's correct network\
    \ address, as seen from that\n   proxy. If the sender's address is incorrect,\
    \ the proxy MUST add an\n   additional \"received\" attribute, as described 6.40.2.\n\
    \        A host behind a network address translator (NAT) or\n        firewall\
    \ may not be able to insert a network address into\n        the Via header that\
    \ can be reached by the next hop beyond\n        the NAT. Use of the received\
    \ attribute allows SIP requests\n        to traverse NAT's which only modify the\
    \ source IP address.\n        NAT's which modify port numbers, called Network\
    \ Address\n        Port Translator's (NAPT) will not properly pass SIP when\n\
    \        transported on UDP, in which case an application layer\n        gateway\
    \ is required. When run over TCP, SIP stands a better\n        chance of traversing\
    \ NAT's, since its behavior is similar\n        to HTTP in this case (but of course\
    \ on different ports).\n   A proxy sending a request to a multicast address MUST\
    \ add the \"maddr\"\n   parameter to its Via header field, and SHOULD add the\
    \ \"ttl\"\n   parameter. If a server receives a request which contained an \"\
    maddr\"\n   parameter in the topmost Via field, it SHOULD send the response to\n\
    \   the multicast address listed in the \"maddr\" parameter.\n   If a proxy server\
    \ receives a request which contains its own address\n   in the Via header value,\
    \ it MUST respond with a 482 (Loop Detected)\n   status code.\n   A proxy server\
    \ MUST NOT forward a request to a multicast group which\n   already appears in\
    \ any of the Via headers.\n        This prevents a malfunctioning proxy server\
    \ from causing\n        loops. Also, it cannot be guaranteed that a proxy server\n\
    \        can always detect that the address returned by a location\n        service\
    \ refers to a host listed in the Via list, as a\n        single host may have\
    \ aliases or several network interfaces.\n"
- title: 6.40.2 Receiver-tagged Via Header Fields
  contents:
  - "6.40.2 Receiver-tagged Via Header Fields\n   Normally, every host that sends\
    \ or forwards a SIP message adds a Via\n   field indicating the path traversed.\
    \ However, it is possible that\n   Network Address Translators (NATs) changes\
    \ the source address and\n   port of the request (e.g., from net-10 to a globally\
    \ routable\n   address), in which case the Via header field cannot be relied on\
    \ to\n   route replies. To prevent this, a proxy SHOULD check the top-most Via\n\
    \   header field to ensure that it contains the sender's correct network\n   address,\
    \ as seen from that proxy. If the sender's address is\n   incorrect, the proxy\
    \ MUST add a \"received\" parameter to the Via\n   header field inserted by the\
    \ previous hop. Such a modified Via header\n   field is known as a receiver-tagged\
    \ Via header field. An example is:\n     Via: SIP/2.0/UDP erlang.bell-telephone.com:5060\n\
    \     Via: SIP/2.0/UDP 10.0.0.1:5060 ;received=199.172.136.3\n   In this example,\
    \ the message originated from 10.0.0.1 and traversed a\n   NAT with the external\
    \ address border.ieee.org (199.172.136.3) to\n   reach erlang.bell-telephone.com.\
    \  The latter noticed the mismatch,\n   and added a parameter to the previous\
    \ hop's Via header field,\n   containing the address that the packet actually\
    \ came from. (Note that\n   the NAT border.ieee.org is not a SIP server.)\n"
- title: 6.40.3 Responses
  contents:
  - "6.40.3 Responses\n   Via header fields in responses are processed by a proxy\
    \ or UAC\n   according to the following rules:\n        1.   The first Via header\
    \ field should indicate the proxy or\n             client processing this response.\
    \ If it does not, discard\n             the message.  Otherwise, remove this Via\
    \ field.\n        2.   If there is no second Via header field, this response is\n\
    \             destined for this client. Otherwise, the processing depends\n  \
    \           on whether the Via field contains a \"maddr\" parameter or is\n  \
    \           a receiver-tagged field:\n             - If the second Via header\
    \ field contains a \"maddr\"\n               parameter, send the response to the\
    \ multicast address\n               listed there, using the port indicated in\
    \ \"sent-by\", or\n               port 5060 if none is present. The response SHOULD\
    \ be sent\n               using the TTL indicated in the \"ttl\" parameter, or\
    \ with a\n               TTL of 1 if that parameter is not present. For\n    \
    \           robustness, responses MUST be sent to the address\n              \
    \ indicated in the \"maddr\" parameter even if it is not a\n               multicast\
    \ address.\n             - If the second Via header field does not contain a \"\
    maddr\"\n               parameter and is a receiver-tagged field (Section\n  \
    \             6.40.2), send the message to the address in the\n              \
    \ \"received\" parameter, using the port indicated in the\n               \"sent-by\"\
    \ value, or using port 5060 if none is present.\n             - If neither of\
    \ the previous cases apply, send the message\n               to the address indicated\
    \ by the \"sent-by\" value in the\n               second Via header field.\n"
- title: 6.40.4 User Agent and Redirect Servers
  contents:
  - "6.40.4 User Agent and Redirect Servers\n   A UAS or redirect server sends a response\
    \ based on one of the\n   following rules:\n        o  If the first Via header\
    \ field in the request contains a\n          \"maddr\" parameter, send the response\
    \ to the multicast address\n          listed there, using the port indicated in\
    \ \"sent-by\", or port\n          5060 if none is present. The response SHOULD\
    \ be sent using the\n          TTL indicated in the \"ttl\" parameter, or with\
    \ a TTL of 1 if\n          that parameter is not present. For robustness, responses\
    \ MUST\n          be sent to the address indicated in the \"maddr\" parameter\
    \ even\n          if it is not a multicast address.\n        o  If the address\
    \ in the \"sent-by\" value of the first Via field\n          differs from the\
    \ source address of the packet, send the\n          response to the actual packet\
    \ source address, similar to the\n          treatment for receiver-tagged Via\
    \ header fields (Section\n          6.40.2).\n        o  If neither of these conditions\
    \ is true, send the response to\n          the address contained in the \"sent-by\"\
    \ value. If the request\n          was sent using TCP, use the existing TCP connection\
    \ if\n          available.\n"
- title: 6.40.5 Syntax
  contents:
  - "6.40.5 Syntax\n   The format for a Via header field is shown in Fig. 11. The\
    \ defaults\n   for \"protocol-name\" and \"transport\" are \"SIP\" and \"UDP\"\
    ,\n   respectively. The \"maddr\" parameter, designating the multicast\n   address,\
    \ and the \"ttl\" parameter, designating the time-to-live (TTL)\n   value, are\
    \ included only if the request was sent via multicast. The\n   \"received\" parameter\
    \ is added only for receiver-added Via fields\n   (Section 6.40.2). For reasons\
    \ of privacy, a client or proxy may wish\n   to hide its Via information by encrypting\
    \ it (see Section 6.22). The\n   \"hidden\" parameter is included if this header\
    \ field was hidden by the\n   upstream proxy (see 6.22). Note that privacy of\
    \ the proxy relies on\n   the cooperation of the next hop, as the next-hop proxy\
    \ will, by\n   necessity, know the IP address and port number of the source host.\n\
    \   The \"branch\" parameter is included by every forking proxy.  The token\n\
    \   MUST be unique for each distinct request generated when a proxy\n   forks.\
    \ CANCEL requests MUST have the same branch value as the\n   corresponding forked\
    \ request. When a response arrives at the proxy it\n   can use the branch value\
    \ to figure out which branch the response\n   corresponds to. A proxy which generates\
    \ a single request (non-\n   forking) MAY also insert the \"branch\" parameter.\
    \ The identifier has\n   to be unique only within a set of isomorphic requests.\n\
    \     Via: SIP/2.0/UDP first.example.com:4000;ttl=16\n       ;maddr=224.2.0.1\
    \ ;branch=a7c6a8dlze (Example)\n     Via: SIP/2.0/UDP adk8\n  Via            \
    \  = ( \"Via\" | \"v\") \":\" 1#( sent-protocol sent-by\n                    \
    \ *( \";\" via-params ) [ comment ] )\n  via-params       = via-hidden | via-ttl\
    \ | via-maddr \n                   | via-received | via-branch\n  via-hidden \
    \      = \"hidden\"\n  via-ttl          = \"ttl\" \"=\" ttl\n  via-maddr     \
    \   = \"maddr\" \"=\" maddr\n  via-received\t   = \"received\" \"=\" host\n  via-branch\
    \       = \"branch\" \"=\" token\n  sent-protocol    = protocol-name \"/\" protocol-version\
    \ \"/\" transport\n  protocol-name    = \"SIP\" | token\n  protocol-version =\
    \ token\n  transport        = \"UDP\" | \"TCP\" | token\n  sent-by          =\
    \ ( host [ \":\" port ] ) | ( concealed-host )\n  concealed-host   = token\n \
    \ ttl              = 1*3DIGIT     ; 0 to 255\n   Figure 11: Syntax of Via header\
    \ field\n"
- title: 6.41 Warning
  contents:
  - "6.41 Warning\n   The Warning response-header field is used to carry additional\n\
    \   information about the status of a response. Warning headers are sent\n   with\
    \ responses and have the following format:\n        Warning        =  \"Warning\"\
    \ \":\" 1#warning-value\n        warning-value  =  warn-code SP warn-agent SP\
    \ warn-text\n        warn-code      =  3DIGIT\n        warn-agent     =  ( host\
    \ [ \":\" port ] ) | pseudonym\n                          ;  the name or pseudonym\
    \ of the server adding\n                          ;  the Warning header, for use\
    \ in debugging\n        warn-text      =  quoted-string\n   A response MAY carry\
    \ more than one Warning header.\n   The \"warn-text\" should be in a natural language\
    \ that is most likely\n   to be intelligible to the human user receiving the response.\
    \  This\n   decision can be based on any available knowledge, such as the\n  \
    \ location of the cache or user, the Accept-Language field in a\n   request, or\
    \ the Content-Language field in a response. The default\n   language is i-default\
    \ [31].\n   Any server MAY add Warning headers to a response. Proxy servers MUST\n\
    \   place additional Warning headers before any Authorization headers.\n   Within\
    \ that constraint, Warning headers MUST be added after any\n   existing Warning\
    \ headers not covered by a signature. A proxy server\n   MUST NOT delete any Warning\
    \ header field that it received with a\n   response.\n   When multiple Warning\
    \ headers are attached to a response, the user\n   agent SHOULD display as many\
    \ of them as possible, in the order that\n   they appear in the response. If it\
    \ is not possible to display all of\n   the warnings, the user agent first displays\
    \ warnings that appear\n   early in the response.\n   The warn-code consists of\
    \ three digits. A first digit of \"3\"\n   indicates warnings specific to SIP.\n\
    \   This is a list of the currently-defined \"warn-code\"s, each with a\n   recommended\
    \ warn-text in English, and a description of its meaning.\n   Note that these\
    \ warnings describe failures induced by the session\n   description.\n   Warnings\
    \ 300 through 329 are reserved for indicating problems with\n   keywords in the\
    \ session description, 330 through 339 are warnings\n   related to basic network\
    \ services requested in the session\n   description, 370 through 379 are warnings\
    \ related to quantitative QoS\n   parameters requested in the session description,\
    \ and 390 through 399\n   are miscellaneous warnings that do not fall into one\
    \ of the above\n   categories.\n   300 Incompatible network protocol: One or more\
    \ network protocols\n        contained in the session description are not available.\n\
    \   301 Incompatible network address formats: One or more network address\n  \
    \      formats contained in the session description are not available.\n   302\
    \ Incompatible transport protocol: One or more transport protocols\n        described\
    \ in the session description are not available.\n   303 Incompatible bandwidth\
    \ units: One or more bandwidth measurement\n        units contained in the session\
    \ description were not understood.\n   304 Media type not available: One or more\
    \ media types contained in\n        the session description are not available.\n\
    \   305 Incompatible media format: One or more media formats contained in\n  \
    \      the session description are not available.\n   306 Attribute not understood:\
    \ One or more of the media attributes in\n        the session description are\
    \ not supported.\n   307 Session description parameter not understood: A parameter\
    \ other\n        than those listed above was not understood.\n   330 Multicast\
    \ not available: The site where the user is located does\n        not support\
    \ multicast.\n   331 Unicast not available: The site where the user is located\
    \ does\n        not support unicast communication (usually due to the presence\n\
    \        of a firewall).\n   370 Insufficient bandwidth: The bandwidth specified\
    \ in the session\n        description or defined by the media exceeds that known\
    \ to be\n        available.\n   399 Miscellaneous warning: The warning text can\
    \ include arbitrary\n        information to be presented to a human user, or logged.\
    \ A system\n        receiving this warning MUST NOT take any automated action.\n\
    \        1xx and 2xx have been taken by HTTP/1.1.\n   Additional \"warn-code\"\
    s, as in the example below, can be defined\n   through IANA.\n   Examples:\n \
    \    Warning: 307 isi.edu \"Session parameter 'foo' not understood\"\n     Warning:\
    \ 301 isi.edu \"Incompatible network address type 'E.164'\"\n"
- title: 6.42 WWW-Authenticate
  contents:
  - "6.42 WWW-Authenticate\n   The WWW-Authenticate response-header field MUST be\
    \ included in 401\n   (Unauthorized) response messages. The field value consists\
    \ of at\n   least one challenge that indicates the authentication scheme(s) and\n\
    \   parameters applicable to the Request-URI. See [H14.46] for a\n   definition\
    \ of the syntax, and section 14 for an overview of usage.\n   The content of the\
    \ \"realm\" parameter SHOULD be displayed to the user.\n   A user agent SHOULD\
    \ cache the authorization credentials for a given\n   value of the destination\
    \ (To header) and \"realm\" and attempt to re-\n   use these values on the next\
    \ request for that destination.\n   In addition to the \"basic\" and \"digest\"\
    \ authentication schemes\n   defined in the specifications cited above, SIP defines\
    \ a new scheme,\n   PGP (RFC 2015, [32]), Section 15. Other schemes, such as S/MIME,\
    \ are\n   for further study.\n"
- title: 7 Status Code Definitions
  contents:
  - "7 Status Code Definitions\n   The response codes are consistent with, and extend,\
    \ HTTP/1.1 response\n   codes. Not all HTTP/1.1 response codes are appropriate,\
    \ and only\n   those that are appropriate are given here. Other HTTP/1.1 response\n\
    \   codes SHOULD NOT be used. Response codes not defined by HTTP/1.1 have\n  \
    \ codes x80 upwards to avoid clashes with future HTTP response codes.\n   Also,\
    \ SIP defines a new class, 6xx. The default behavior for unknown\n   response\
    \ codes is given for each category of codes.\n"
- title: 7.1 Informational 1xx
  contents:
  - "7.1 Informational 1xx\n   Informational responses indicate that the server or\
    \ proxy contacted\n   is performing some further action and does not yet have\
    \ a definitive\n   response. The client SHOULD wait for a further response from\
    \ the\n   server, and the server SHOULD send such a response without further\n\
    \   prompting. A server SHOULD send a 1xx response if it expects to take\n   more\
    \ than 200 ms to obtain a final response. A server MAY issue zero\n   or more\
    \ 1xx responses, with no restriction on their ordering or\n   uniqueness. Note\
    \ that 1xx responses are not transmitted reliably,\n   that is, they do not cause\
    \ the client to send an ACK. Servers are\n   free to retransmit informational\
    \ responses and clients can inquire\n   about the current state of call processing\
    \ by re-sending the request.\n"
- title: 7.1.1 100 Trying
  contents:
  - "7.1.1 100 Trying\n   Some unspecified action is being taken on behalf of this\
    \ call (e.g.,\n   a database is being consulted), but the user has not yet been\n\
    \   located.\n"
- title: 7.1.2 180 Ringing
  contents:
  - "7.1.2 180 Ringing\n   The called user agent has located a possible location where\
    \ the user\n   has registered recently and is trying to alert the user.\n"
- title: 7.1.3 181 Call Is Being Forwarded
  contents:
  - "7.1.3 181 Call Is Being Forwarded\n   A proxy server MAY use this status code\
    \ to indicate that the call is\n   being forwarded to a different set of destinations.\n"
- title: 7.1.4 182 Queued
  contents:
  - "7.1.4 182 Queued\n   The called party is temporarily unavailable, but the callee\
    \ has\n   decided to queue the call rather than reject it. When the callee\n \
    \  becomes available, it will return the appropriate final status\n   response.\
    \ The reason phrase MAY give further details about the status\n   of the call,\
    \ e.g., \"5 calls queued; expected waiting time is 15\n   minutes\". The server\
    \ MAY issue several 182 responses to update the\n   caller about the status of\
    \ the queued call.\n"
- title: 7.2 Successful 2xx
  contents:
  - "7.2 Successful 2xx\n   The request was successful and MUST terminate a search.\n"
- title: 7.2.1 200 OK
  contents:
  - "7.2.1 200 OK\n   The request has succeeded. The information returned with the\
    \ response\n   depends on the method used in the request, for example:\n   BYE:\
    \ The call has been terminated. The message body is empty.\n   CANCEL: The search\
    \ has been cancelled. The message body is empty.\n   INVITE: The callee has agreed\
    \ to participate; the message body\n        indicates the callee's capabilities.\n\
    \   OPTIONS: The callee has agreed to share its capabilities, included in\n  \
    \      the message body.\n   REGISTER: The registration has succeeded. The client\
    \ treats the\n        message body according to its Content-Type.\n"
- title: 7.3 Redirection 3xx
  contents:
  - "7.3 Redirection 3xx\n   3xx responses give information about the user's new location,\
    \ or\n   about alternative services that might be able to satisfy the call.\n\
    \   They SHOULD terminate an existing search, and MAY cause the initiator\n  \
    \ to begin a new search if appropriate.\n   Any redirection (3xx) response MUST\
    \ NOT suggest any of the addresses\n   in the Via (Section 6.40) path of the request\
    \ in the Contact header\n   field. (Addresses match if their host and port number\
    \ match.)\n   To avoid forwarding loops, a user agent client or proxy MUST check\n\
    \   whether the address returned by a redirect server equals an address\n   tried\
    \ earlier.\n"
- title: 7.3.1 300 Multiple Choices
  contents:
  - "7.3.1 300 Multiple Choices\n   The address in the request resolved to several\
    \ choices, each with its\n   own specific location, and the user (or user agent)\
    \ can select a\n   preferred communication end point and redirect its request\
    \ to that\n   location.\n   The response SHOULD include an entity containing a\
    \ list of resource\n   characteristics and location(s) from which the user or\
    \ user agent can\n   choose the one most appropriate, if allowed by the Accept\
    \ request\n   header. The entity format is specified by the media type given in\
    \ the\n   Content-Type header field. The choices SHOULD also be listed as\n  \
    \ Contact fields (Section 6.13).  Unlike HTTP, the SIP response MAY\n   contain\
    \ several Contact fields or a list of addresses in a Contact\n   field. User agents\
    \ MAY use the Contact header field value for\n   automatic redirection or MAY\
    \ ask the user to confirm a choice.\n   However, this specification does not define\
    \ any standard for such\n   automatic selection.\n        This status response\
    \ is appropriate if the callee can be\n        reached at several different locations\
    \ and the server\n        cannot or prefers not to proxy the request.\n"
- title: 7.3.2 301 Moved Permanently
  contents:
  - "7.3.2 301 Moved Permanently\n   The user can no longer be found at the address\
    \ in the Request-URI and\n   the requesting client SHOULD retry at the new address\
    \ given by the\n   Contact header field (Section 6.13). The caller SHOULD update\
    \ any\n   local directories, address books and user location caches with this\n\
    \   new value and redirect future requests to the address(es) listed.\n"
- title: 7.3.3 302 Moved Temporarily
  contents:
  - "7.3.3 302 Moved Temporarily\n   The requesting client SHOULD retry the request\
    \ at the new address(es)\n   given by the Contact header field (Section 6.13).\
    \  The duration of\n   the redirection can be indicated through an Expires (Section\
    \ 6.20)\n   header. If there is no explicit expiration time, the address is only\n\
    \   valid for this call and MUST NOT be cached for future calls.\n"
- title: 7.3.4 305 Use Proxy
  contents:
  - "7.3.4 305 Use Proxy\n   The requested resource MUST be accessed through the proxy\
    \ given by\n   the Contact field. The Contact field gives the URI of the proxy.\
    \ The\n   recipient is expected to repeat this single request via the proxy.\n\
    \   305 responses MUST only be generated by user agent servers.\n"
- title: 7.3.5 380 Alternative Service
  contents:
  - "7.3.5 380 Alternative Service\n   The call was not successful, but alternative\
    \ services are possible.\n   The alternative services are described in the message\
    \ body of the\n   response.  Formats for such bodies are not defined here, and\
    \ may be\n   the subject of future standardization.\n"
- title: 7.4 Request Failure 4xx
  contents:
  - "7.4 Request Failure 4xx\n   4xx responses are definite failure responses from\
    \ a particular\n   server.  The client SHOULD NOT retry the same request without\n\
    \   modification (e.g., adding appropriate authorization). However, the\n   same\
    \ request to a different server might be successful.\n"
- title: 7.4.1 400 Bad Request
  contents:
  - "7.4.1 400 Bad Request\n   The request could not be understood due to malformed\
    \ syntax.\n"
- title: 7.4.2 401 Unauthorized
  contents:
  - "7.4.2 401 Unauthorized\n   The request requires user authentication.\n"
- title: 7.4.3 402 Payment Required
  contents:
  - "7.4.3 402 Payment Required\n   Reserved for future use.\n"
- title: 7.4.4 403 Forbidden
  contents:
  - "7.4.4 403 Forbidden\n   The server understood the request, but is refusing to\
    \ fulfill it.\n   Authorization will not help, and the request SHOULD NOT be repeated.\n"
- title: 7.4.5 404 Not Found
  contents:
  - "7.4.5 404 Not Found\n   The server has definitive information that the user does\
    \ not exist at\n   the domain specified in the Request-URI. This status is also\
    \ returned\n   if the domain in the Request-URI does not match any of the domains\n\
    \   handled by the recipient of the request.\n"
- title: 7.4.6 405 Method Not Allowed
  contents:
  - "7.4.6 405 Method Not Allowed\n   The method specified in the Request-Line is\
    \ not allowed for the\n   address identified by the Request-URI. The response\
    \ MUST include an\n   Allow header field containing a list of valid methods for\
    \ the\n   indicated address.\n"
- title: 7.4.7 406 Not Acceptable
  contents:
  - "7.4.7 406 Not Acceptable\n   The resource identified by the request is only capable\
    \ of generating\n   response entities which have content characteristics not acceptable\n\
    \   according to the accept headers sent in the request.\n"
- title: 7.4.8 407 Proxy Authentication Required
  contents:
  - "7.4.8 407 Proxy Authentication Required\n   This code is similar to 401 (Unauthorized),\
    \ but indicates that the\n   client MUST first authenticate itself with the proxy.\
    \ The proxy MUST\n   return a Proxy-Authenticate header field (section 6.26) containing\
    \ a\n   challenge applicable to the proxy for the requested resource. The\n  \
    \ client MAY repeat the request with a suitable Proxy-Authorization\n   header\
    \ field (section 6.27). SIP access authentication is explained\n   in section\
    \ 13.2 and 14.\n   This status code is used for applications where access to the\n\
    \   communication channel (e.g., a telephony gateway) rather than the\n   callee\
    \ requires authentication.\n"
- title: 7.4.9 408 Request Timeout
  contents:
  - "7.4.9 408 Request Timeout\n   The server could not produce a response, e.g.,\
    \ a user location,\n   within the time indicated in the Expires request-header\
    \ field. The\n   client MAY repeat the request without modifications at any later\n\
    \   time.\n"
- title: 7.4.10 409 Conflict
  contents:
  - "7.4.10 409 Conflict\n   The request could not be completed due to a conflict\
    \ with the current\n   state of the resource. This response is returned if the\
    \ action\n   parameter in a REGISTER request conflicts with existing\n   registrations.\n"
- title: 7.4.11 410 Gone
  contents:
  - "7.4.11 410 Gone\n   The requested resource is no longer available at the server\
    \ and no\n   forwarding address is known. This condition is expected to be\n \
    \  considered permanent. If the server does not know, or has no facility\n   to\
    \ determine, whether or not the condition is permanent, the status\n   code 404\
    \ (Not Found) SHOULD be used instead.\n"
- title: 7.4.12 411 Length Required
  contents:
  - "7.4.12 411 Length Required\n   The server refuses to accept the request without\
    \ a defined Content-\n   Length. The client MAY repeat the request if it adds\
    \ a valid\n   Content-Length header field containing the length of the message-body\n\
    \   in the request message.\n"
- title: 7.4.13 413 Request Entity Too Large
  contents:
  - "7.4.13 413 Request Entity Too Large\n   The server is refusing to process a request\
    \ because the request\n   entity is larger than the server is willing or able\
    \ to process. The\n   server MAY close the connection to prevent the client from\
    \ continuing\n   the request.\n   If the condition is temporary, the server SHOULD\
    \ include a Retry-\n   After header field to indicate that it is temporary and\
    \ after what\n   time the client MAY try again.\n"
- title: 7.4.14 414 Request-URI Too Long
  contents:
  - "7.4.14 414 Request-URI Too Long\n   The server is refusing to service the request\
    \ because the Request-URI\n   is longer than the server is willing to interpret.\n"
- title: 7.4.15 415 Unsupported Media Type
  contents:
  - "7.4.15 415 Unsupported Media Type\n   The server is refusing to service the request\
    \ because the message\n   body of the request is in a format not supported by\
    \ the requested\n   resource for the requested method. The server SHOULD return\
    \ a list of\n   acceptable formats using the Accept, Accept-Encoding and Accept-\n\
    \   Language header fields.\n"
- title: 7.4.16 420 Bad Extension
  contents:
  - "7.4.16 420 Bad Extension\n   The server did not understand the protocol extension\
    \ specified in a\n   Require (Section 6.30) header field.\n"
- title: 7.4.17 480 Temporarily Unavailable
  contents:
  - "7.4.17 480 Temporarily Unavailable\n   The callee's end system was contacted\
    \ successfully but the callee is\n   currently unavailable (e.g., not logged in\
    \ or logged in in such a\n   manner as to preclude communication with the callee).\
    \ The response\n   MAY indicate a better time to call in the Retry-After header.\
    \ The\n   user could also be available elsewhere (unbeknownst to this host),\n\
    \   thus, this response does not terminate any searches. The reason\n   phrase\
    \ SHOULD indicate a more precise cause as to why the callee is\n   unavailable.\
    \ This value SHOULD be setable by the user agent. Status\n   486 (Busy Here) MAY\
    \ be used to more precisely indicate a particular\n   reason for the call failure.\n\
    \   This status is also returned by a redirect server that recognizes the\n  \
    \ user identified by the Request-URI, but does not currently have a\n   valid\
    \ forwarding location for that user.\n"
- title: 7.4.18 481 Call Leg/Transaction Does Not Exist
  contents:
  - "7.4.18 481 Call Leg/Transaction Does Not Exist\n   This status is returned under\
    \ two conditions: The server received a\n   BYE request that does not match any\
    \ existing call leg or the server\n   received a CANCEL request that does not\
    \ match any existing\n   transaction. (A server simply discards an ACK referring\
    \ to an unknown\n   transaction.)\n"
- title: 7.4.19 482 Loop Detected
  contents:
  - "7.4.19 482 Loop Detected\n   The server received a request with a Via (Section\
    \ 6.40) path\n   containing itself.\n"
- title: 7.4.20 483 Too Many Hops
  contents:
  - "7.4.20 483 Too Many Hops\n   The server received a request that contains more\
    \ Via entries (hops)\n   (Section 6.40) than allowed by the Max-Forwards (Section\
    \ 6.23) header\n   field.\n"
- title: 7.4.21 484 Address Incomplete
  contents:
  - "7.4.21 484 Address Incomplete\n   The server received a request with a To (Section\
    \ 6.37) address or\n   Request-URI that was incomplete. Additional information\
    \ SHOULD be\n   provided.\n        This status code allows overlapped dialing.\
    \ With overlapped\n        dialing, the client does not know the length of the\
    \ dialing\n        string. It sends strings of increasing lengths, prompting\n\
    \        the user for more input, until it no longer receives a 484\n        status\
    \ response.\n"
- title: 7.4.22 485 Ambiguous
  contents:
  - "7.4.22 485 Ambiguous\n   The callee address provided in the request was ambiguous.\
    \ The\n   response MAY contain a listing of possible unambiguous addresses in\n\
    \   Contact headers.\n   Revealing alternatives can infringe on privacy concerns\
    \ of the user\n   or the organization. It MUST be possible to configure a server\
    \ to\n   respond with status 404 (Not Found) or to suppress the listing of\n \
    \  possible choices if the request address was ambiguous.\n   Example response\
    \ to a request with the URL lee@example.com :\n   485 Ambiguous SIP/2.0\n   Contact:\
    \ Carol Lee <sip:carol.lee@example.com>\n   Contact: Ping Lee <sip:p.lee@example.com>\n\
    \   Contact: Lee M. Foote <sip:lee.foote@example.com>\n        Some email and\
    \ voice mail systems provide this\n        functionality. A status code separate\
    \ from 3xx is used\n        since the semantics are different: for 300, it is\
    \ assumed\n        that the same person or service will be reached by the\n  \
    \      choices provided. While an automated choice or sequential\n        search\
    \ makes sense for a 3xx response, user intervention is\n        required for a\
    \ 485 response.\n"
- title: 7.4.23 486 Busy Here
  contents:
  - "7.4.23 486 Busy Here\n   The callee's end system was contacted successfully but\
    \ the callee is\n   currently not willing or able to take additional calls. The\
    \ response\n   MAY indicate a better time to call in the Retry-After header. The\n\
    \   user could also be available elsewhere, such as through a voice mail\n   service,\
    \ thus, this response does not terminate any searches.  Status\n   600 (Busy Everywhere)\
    \ SHOULD be used if the client knows that no\n   other end system will be able\
    \ to accept this call.\n"
- title: 7.5 Server Failure 5xx
  contents:
  - "7.5 Server Failure 5xx\n   5xx responses are failure responses given when a server\
    \ itself has\n   erred. They are not definitive failures, and MUST NOT terminate\
    \ a\n   search if other possible locations remain untried.\n"
- title: 7.5.1 500 Server Internal Error
  contents:
  - "7.5.1 500 Server Internal Error\n   The server encountered an unexpected condition\
    \ that prevented it from\n   fulfilling the request. The client MAY display the\
    \ specific error\n   condition, and MAY retry the request after several seconds.\n"
- title: 7.5.2 501 Not Implemented
  contents:
  - "7.5.2 501 Not Implemented\n   The server does not support the functionality required\
    \ to fulfill the\n   request. This is the appropriate response when the server\
    \ does not\n   recognize the request method and is not capable of supporting it\
    \ for\n   any user.\n"
- title: 7.5.3 502 Bad Gateway
  contents:
  - "7.5.3 502 Bad Gateway\n   The server, while acting as a gateway or proxy, received\
    \ an invalid\n   response from the downstream server it accessed in attempting\
    \ to\n   fulfill the request.\n"
- title: 7.5.4 503 Service Unavailable
  contents:
  - "7.5.4 503 Service Unavailable\n   The server is currently unable to handle the\
    \ request due to a\n   temporary overloading or maintenance of the server. The\
    \ implication\n   is that this is a temporary condition which will be alleviated\
    \ after\n   some delay. If known, the length of the delay MAY be indicated in\
    \ a\n   Retry-After header. If no Retry-After is given, the client MUST\n   handle\
    \ the response as it would for a 500 response.\n   Note: The existence of the\
    \ 503 status code does not imply that a\n   server has to use it when becoming\
    \ overloaded. Some servers MAY wish\n   to simply refuse the connection.\n"
- title: 7.5.5 504 Gateway Time-out
  contents:
  - "7.5.5 504 Gateway Time-out\n   The server, while acting as a gateway, did not\
    \ receive a timely\n   response from the server (e.g., a location server) it accessed\
    \ in\n   attempting to complete the request.\n"
- title: 7.5.6 505 Version Not Supported
  contents:
  - "7.5.6 505 Version Not Supported\n   The server does not support, or refuses to\
    \ support, the SIP protocol\n   version that was used in the request message.\
    \ The server is\n   indicating that it is unable or unwilling to complete the\
    \ request\n   using the same major version as the client, other than with this\n\
    \   error message. The response MAY contain an entity describing why that\n  \
    \ version is not supported and what other protocols are supported by\n   that\
    \ server. The format for such an entity is not defined here and\n   may be the\
    \ subject of future standardization.\n"
- title: 7.6 Global Failures 6xx
  contents:
  - "7.6 Global Failures 6xx\n   6xx responses indicate that a server has definitive\
    \ information about\n   a particular user, not just the particular instance indicated\
    \ in the\n   Request-URI. All further searches for this user are doomed to failure\n\
    \   and pending searches SHOULD be terminated.\n"
- title: 7.6.1 600 Busy Everywhere
  contents:
  - "7.6.1 600 Busy Everywhere\n   The callee's end system was contacted successfully\
    \ but the callee is\n   busy and does not wish to take the call at this time.\
    \ The response\n   MAY indicate a better time to call in the Retry-After header.\
    \ If the\n   callee does not wish to reveal the reason for declining the call,\
    \ the\n   callee uses status code 603 (Decline) instead. This status response\n\
    \   is returned only if the client knows that no other end point (such as\n  \
    \ a voice mail system) will answer the request. Otherwise, 486 (Busy\n   Here)\
    \ should be returned.\n"
- title: 7.6.2 603 Decline
  contents:
  - "7.6.2 603 Decline\n   The callee's machine was successfully contacted but the\
    \ user\n   explicitly does not wish to or cannot participate. The response MAY\n\
    \   indicate a better time to call in the Retry-After header.\n"
- title: 7.6.3 604 Does Not Exist Anywhere
  contents:
  - "7.6.3 604 Does Not Exist Anywhere\n   The server has authoritative information\
    \ that the user indicated in\n   the To request field does not exist anywhere.\
    \ Searching for the user\n   elsewhere will not yield any results.\n"
- title: 7.6.4 606 Not Acceptable
  contents:
  - "7.6.4 606 Not Acceptable\n   The user's agent was contacted successfully but\
    \ some aspects of the\n   session description such as the requested media, bandwidth,\
    \ or\n   addressing style were not acceptable.\n   A 606 (Not Acceptable) response\
    \ means that the user wishes to\n   communicate, but cannot adequately support\
    \ the session described. The\n   606 (Not Acceptable) response MAY contain a list\
    \ of reasons in a\n   Warning header field describing why the session described\
    \ cannot be\n   supported. Reasons are listed in Section 6.41.  It is hoped that\n\
    \   negotiation will not frequently be needed, and when a new user is\n   being\
    \ invited to join an already existing conference, negotiation may\n   not be possible.\
    \ It is up to the invitation initiator to decide\n   whether or not to act on\
    \ a 606 (Not Acceptable) response.\n"
- title: 8 SIP Message Body
  contents:
  - '8 SIP Message Body

    '
- title: 8.1 Body Inclusion
  contents:
  - "8.1 Body Inclusion\n   Requests MAY contain message bodies unless otherwise noted.\
    \ Within\n   this specification, the BYE request MUST NOT contain a message body.\n\
    \   For ACK, INVITE and OPTIONS, the message body is always a session\n   description.\
    \ The use of message bodies for REGISTER requests is for\n   further study.\n\
    \   For response messages, the request method and the response status\n   code\
    \ determine the type and interpretation of any message body. All\n   responses\
    \ MAY include a body. Message bodies for 1xx responses\n   contain advisory information\
    \ about the progress of the request. 2xx\n   responses to INVITE requests contain\
    \ session descriptions. In 3xx\n   responses, the message body MAY contain the\
    \ description of\n   alternative destinations or services, as described in Section\
    \ 7.3.\n   For responses with status 400 or greater, the message body MAY\n  \
    \ contain additional, human-readable information about the reasons for\n   failure.\
    \ It is RECOMMENDED that information in 1xx and 300 and\n   greater responses\
    \ be of type text/plain or text/html\n"
- title: 8.2 Message Body Type
  contents:
  - "8.2 Message Body Type\n   The Internet media type of the message body MUST be\
    \ given by the\n   Content-Type header field. If the body has undergone any encoding\n\
    \   (such as compression) then this MUST be indicated by the Content-\n   Encoding\
    \ header field, otherwise Content-Encoding MUST be omitted. If\n   applicable,\
    \ the character set of the message body is indicated as\n   part of the Content-Type\
    \ header-field value.\n"
- title: 8.3 Message Body Length
  contents:
  - "8.3 Message Body Length\n   The body length in bytes SHOULD be given by the Content-Length\
    \ header\n   field. Section 6.15 describes the behavior in detail.\n   The \"\
    chunked\" transfer encoding of HTTP/1.1 MUST NOT be used for SIP.\n   (Note: The\
    \ chunked encoding modifies the body of a message in order\n   to transfer it\
    \ as a series of chunks, each with its own size\n   indicator.)\n"
- title: 9 Compact Form
  contents:
  - "9 Compact Form\n   When SIP is carried over UDP with authentication and a complex\n\
    \   session description, it may be possible that the size of a request or\n  \
    \ response is larger than the MTU. To address this problem, a more\n   compact\
    \ form of SIP is also defined by using abbreviations for the\n   common header\
    \ fields listed below:\n   short field name  long field name   note\n   c    \
    \             Content-Type\n   e                 Content-Encoding\n   f      \
    \           From\n   i                 Call-ID\n   m                 Contact \
    \          from \"moved\"\n   l                 Content-Length\n   s         \
    \        Subject\n   t                 To\n   v                 Via\n   Thus,\
    \ the message in section 16.2 could also be written:\n     INVITE sip:schooler@vlsi.caltech.edu\
    \ SIP/2.0\n     v:SIP/2.0/UDP 131.215.131.131;maddr=239.128.16.254;ttl=16\n  \
    \   v:SIP/2.0/UDP 128.16.64.19\n     f:sip:mjh@isi.edu\n     t:sip:schooler@cs.caltech.edu\n\
    \     i:62729-27@128.16.64.19\n     c:application/sdp\n     CSeq: 4711 INVITE\n\
    \     l:187\n     v=0\n     o=user1 53655765 2353687637 IN IP4 128.3.4.5\n   \
    \  s=Mbone Audio\n     i=Discussion of Mbone Engineering Issues\n     e=mbone@somewhere.com\n\
    \     c=IN IP4 224.2.0.1/127\n     t=0 0\n     m=audio 3456 RTP/AVP 0\n   Clients\
    \ MAY mix short field names and long field names within the\n   same request.\
    \ Servers MUST accept both short and long field names for\n   requests. Proxies\
    \ MAY change header fields between their long and\n   short forms, but this MUST\
    \ NOT be done to fields following an\n   Authorization header.\n"
- title: 10 Behavior of SIP Clients and Servers
  contents:
  - '10 Behavior of SIP Clients and Servers

    '
- title: 10.1 General Remarks
  contents:
  - "10.1 General Remarks\n   SIP is defined so it can use either UDP (unicast or\
    \ multicast) or TCP\n   as a transport protocol; it provides its own reliability\
    \ mechanism.\n"
- title: 10.1.1 Requests
  contents:
  - "10.1.1 Requests\n   Servers discard isomorphic requests, but first retransmit\
    \ the\n   appropriate response. (SIP requests are said to be idempotent , i.e.,\n\
    \   receiving more than one copy of a request does not change the server\n   state.)\n\
    \   After receiving a CANCEL request from an upstream client, a stateful\n   proxy\
    \ server MAY send a CANCEL on all branches where it has not yet\n   received a\
    \ final response.\n   When a user agent receives a request, it checks the Call-ID\
    \ against\n   those of in-progress calls. If the Call-ID was found, it compares\
    \ the\n   tag value of To with the user's tag and rejects the request if the\n\
    \   two do not match. If the From header, including any tag value,\n   matches\
    \ the value for an existing call leg, the server compares the\n   CSeq header\
    \ field value. If less than or equal to the current\n   sequence number, the request\
    \ is a retransmission.  Otherwise, it is a\n   new request. If the From header\
    \ does not match an existing call leg,\n   a new call leg is created.\n   If the\
    \ Call-ID was not found, a new call leg is created, with entries\n   for the To,\
    \ From and Call-ID headers.  In this case, the To header\n   field should not\
    \ have contained a tag. The server returns a response\n   containing the same\
    \ To value, but with a unique tag added. The tag\n   MAY be omitted if the request\
    \ contained only one Via header field.\n"
- title: 10.1.2 Responses
  contents:
  - "10.1.2 Responses\n   A server MAY issue one or more provisional responses at\
    \ any time\n   before sending a final response. If a stateful proxy, user agent\n\
    \   server, redirect server or registrar cannot respond to a request with\n  \
    \ a final response within 200 ms, it SHOULD issue a provisional (1xx)\n   response\
    \ as soon as possible. Stateless proxies MUST NOT issue\n   provisional responses\
    \ on their own.\n   Responses are mapped to requests by the matching To, From,\
    \ Call-ID,\n   CSeq headers and the branch parameter of the first Via header.\n\
    \   Responses terminate request retransmissions even if they have Via\n   headers\
    \ that cause them to be delivered to an upstream client.\n   A stateful proxy\
    \ may receive a response that it does not have state\n   for, that is, where it\
    \ has no a record of an associated request. If\n   the Via header field indicates\
    \ that the upstream server used TCP, the\n   proxy actively opens a TCP connection\
    \ to that address. Thus, proxies\n   have to be prepared to receive responses\
    \ on the incoming side of\n   passive TCP connections, even though most responses\
    \ will arrive on\n   the incoming side of an active connection. (An active connection\
    \ is a\n   TCP connection initiated by the proxy, a passive connection is one\n\
    \   accepted by the proxy, but initiated by another entity.)\n   100 responses\
    \ SHOULD NOT be forwarded, other 1xx responses MAY be\n   forwarded, possibly\
    \ after the server eliminates responses with status\n   codes that had already\
    \ been sent earlier. 2xx responses are forwarded\n   according to the Via header.\
    \ Once a stateful proxy has received a 2xx\n   response, it MUST NOT forward non-2xx\
    \ final responses.  Responses\n   with status 300 and higher are retransmitted\
    \ by each stateful proxy\n   until the next upstream proxy sends an ACK (see below\
    \ for timing\n   details) or CANCEL.\n   A stateful proxy SHOULD maintain state\
    \ for at least 32 seconds after\n   the receipt of the first definitive non-200\
    \ response, in order to\n   handle retransmissions of the response.\n        The\
    \ 32 second window is given by the maximum retransmission\n        duration of\
    \ 200-class responses using the default timers,\n        in case the ACK is lost\
    \ somewhere on the way to the called\n        user agent or the next stateful\
    \ proxy.\n"
- title: 10.2 Source Addresses, Destination Addresses and Connections
  contents:
  - '10.2 Source Addresses, Destination Addresses and Connections

    '
- title: 10.2.1 Unicast UDP
  contents:
  - "10.2.1 Unicast UDP\n   Responses are returned to the address listed in the Via\
    \ header field\n   (Section 6.40), not the source address of the request.\n  \
    \      Recall that responses are not generated by the next-hop\n        stateless\
    \ server, but generated by either a proxy server or\n        the user agent server.\
    \ Thus, the stateless proxy can only\n        use the Via header field to forward\
    \ the response.\n"
- title: 10.2.2 Multicast UDP
  contents:
  - "10.2.2 Multicast UDP\n   Requests MAY be multicast; multicast requests likely\
    \ feature a host-\n   independent Request-URI. This request SHOULD be scoped to\
    \ ensure it\n   is not forwarded beyond the boundaries of the administrative system.\n\
    \   This MAY be done with either TTL or administrative scopes[25],\n   depending\
    \ on what is implemented in the network.\n   A client receiving a multicast query\
    \ does not have to check whether\n   the host part of the Request-URI matches\
    \ its own host or domain name.\n   If the request was received via multicast,\
    \ the response is also\n   returned via multicast. Responses to multicast requests\
    \ are multicast\n   with the same TTL as the request, where the TTL is derived\
    \ from the\n   ttl parameter in the Via header (Section 6.40).\n   To avoid response\
    \ implosion, servers MUST NOT answer multicast\n   requests with a status code\
    \ other than 2xx or 6xx. The server delays\n   its response by a random interval\
    \ uniformly distributed between zero\n   and one second. Servers MAY suppress\
    \ responses if they hear a lower-\n   numbered or 6xx response from another group\
    \ member prior to sending.\n   Servers do not respond to CANCEL requests received\
    \ via multicast to\n   avoid request implosion. A proxy or UAC SHOULD send a CANCEL\
    \ on\n   receiving the first 2xx or 6xx response to a multicast request.\n   \
    \     Server response suppression is a MAY since it requires a\n        server\
    \ to violate some basic message processing rules. Lets\n        say A sends a\
    \ multicast request, and it is received by B,C,\n        and D. B sends a 200\
    \ response. The topmost Via field in the\n        response will contain the address\
    \ of A. C will also receive\n        this response, and could use it to suppress\
    \ its own\n        response. However, C would normally not examine this\n    \
    \    response, as the topmost Via is not its own. Normally, a\n        response\
    \ received with an incorrect topmost Via MUST be\n        dropped, but not in\
    \ this case. To distinguish this packet\n        from a misrouted or multicast\
    \ looped packet is fairly\n        complex, and for this reason the procedure\
    \ is a MAY. The\n        CANCEL, instead, provides a simpler and more standard\
    \ way\n        to perform response suppression. It is for this reason that\n \
    \       the use of CANCEL here is a SHOULD\n"
- title: 10.3 TCP
  contents:
  - "10.3 TCP\n   A single TCP connection can serve one or more SIP transactions.\
    \ A\n   transaction contains zero or more provisional responses followed by\n\
    \   one or more final responses. (Typically, transactions contain exactly\n  \
    \ one final response, but there are exceptional circumstances, where,\n   for\
    \ example, multiple 200 responses can be generated.)\n   The client SHOULD keep\
    \ the connection open at least until the first\n   final response arrives. If\
    \ the client closes or resets the TCP\n   connection prior to receiving the first\
    \ final response, the server\n   treats this action as equivalent to a CANCEL\
    \ request.\n        This behavior makes it less likely that malfunctioning\n \
    \       clients cause a proxy server to keep connection state\n        indefinitely.\n\
    \   The server SHOULD NOT close the TCP connection until it has sent its\n   final\
    \ response, at which point it MAY close the TCP connection if it\n   wishes to.\
    \ However, normally it is the client's responsibility to\n   close the connection.\n\
    \   If the server leaves the connection open, and if the client so\n   desires\
    \ it MAY re-use the connection for further SIP requests or for\n   requests from\
    \ the same family of protocols (such as HTTP or stream\n   control commands).\n\
    \   If a server needs to return a response to a client and no longer has\n   a\
    \ connection open to that client, it MAY open a connection to the\n   address\
    \ listed in the Via header. Thus, a proxy or user agent MUST be\n   prepared to\
    \ receive both requests and responses on a \"passive\"\n   connection.\n"
- title: 10.4 Reliability for BYE, CANCEL, OPTIONS, REGISTER Requests
  contents:
  - '10.4 Reliability for BYE, CANCEL, OPTIONS, REGISTER Requests

    '
- title: 10.4.1 UDP
  contents:
  - "10.4.1 UDP\n   A SIP client using UDP SHOULD retransmit a BYE, CANCEL, OPTIONS,\
    \ or\n   REGISTER request with an exponential backoff, starting at a T1 second\n\
    \   interval, doubling the interval for each packet, and capping off at a\n  \
    \ T2 second interval. This means that after the first packet is sent,\n   the\
    \ second is sent T1 seconds later, the next 2*T1 seconds after\n   that, the next\
    \ 4*T1 seconds after that, and so on, until the interval\n   hits T2. Subsequent\
    \ retransmissions are spaced by T2 seconds. If the\n   client receives a provisional\
    \ response, it continues to retransmit\n   the request, but with an interval of\
    \ T2 seconds.  Retransmissions\n   cease when the client has sent a total of eleven\
    \ packets, or receives\n   a definitive response. Default values for T1 and T2\
    \ are 500 ms and 4\n   s, respectively. Clients MAY use larger values, but SHOULD\
    \ NOT use\n   smaller ones. Servers retransmit the response upon receipt of a\n\
    \   request retransmission. After the server sends a final response, it\n   cannot\
    \ be sure the client has received the response, and thus SHOULD\n   cache the\
    \ results for at least 10*T2 seconds to avoid having to, for\n   example, contact\
    \ the user or location server again upon receiving a\n   request retransmission.\n\
    \        Use of the exponential backoff is for congestion control\n        purposes.\
    \ However, the back-off must cap off, since request\n        retransmissions are\
    \ used to trigger response\n        retransmissions at the server. Without a cap,\
    \ the loss of a\n        single response could significantly increase transaction\n\
    \        latencies.\n   The value of the initial retransmission timer is smaller\
    \ than that\n   that for TCP since it is expected that network paths suitable\
    \ for\n   interactive communications have round-trip times smaller than 500 ms.\n\
    \   For congestion control purposes, the retransmission count has to be\n   bounded.\
    \  Given that most transactions are expected to consist of one\n   request and\
    \ a few responses, round-trip time estimation is not likely\n   to be very useful.\
    \ If RTT estimation is desired to more quickly\n   discover a missing final response,\
    \ each request retransmission needs\n   to be labeled with its own Timestamp (Section\
    \ 6.36), returned in the\n   response. The server caches the result until it can\
    \ be sure that the\n   client will not retransmit the same request again.\n  \
    \ Each server in a proxy chain generates its own final response to a\n   CANCEL\
    \ request. The server responds immediately upon receipt of the\n   CANCEL request\
    \ rather than waiting until it has received final\n   responses from the CANCEL\
    \ requests it generates.\n   BYE and OPTIONS final responses are generated by\
    \ redirect and user\n   agent servers; REGISTER final responses are generated\
    \ by registrars.\n   Note that in contrast to the reliability mechanism described\
    \ in\n   Section 10.5, responses to these requests are not retransmitted\n   periodically\
    \ and not acknowledged via ACK.\n"
- title: 10.4.2 TCP
  contents:
  - "10.4.2 TCP\n   Clients using TCP do not need to retransmit requests.\n"
- title: 10.5 Reliability for INVITE Requests
  contents:
  - "10.5 Reliability for INVITE Requests\n   Special considerations apply for the\
    \ INVITE method.\n        1.   After receiving an invitation, considerable time\
    \ can elapse\n             before the server can determine the outcome. For example,\n\
    \             if the called party is \"rung\" or extensive searches are\n    \
    \         performed, delays between the request and a definitive\n           \
    \  response can reach several tens of seconds. If either\n             caller\
    \ or callee are automated servers not directly\n             controlled by a human\
    \ being, a call attempt could be\n             unbounded in time.\n        2.\
    \   If a telephony user interface is modeled or if we need to\n             interface\
    \ to the PSTN, the caller's user interface will\n             provide \"ringback\"\
    , a signal that the callee is being\n             alerted. (The status response\
    \ 180 (Ringing) MAY be used to\n             initiate ringback.) Once the callee\
    \ picks up, the caller\n             needs to know so that it can enable the voice\
    \ path and stop\n             ringback. The callee's response to the invitation\
    \ could get\n             lost. Unless the response is transmitted reliably, the\n\
    \             caller will continue to hear ringback while the callee\n       \
    \      assumes that the call exists.\n        3.   The client has to be able to\
    \ terminate an on-going request,\n             e.g., because it is no longer willing\
    \ to wait for the\n             connection or search to succeed. The server will\
    \ have to\n             wait several retransmission intervals to interpret the\
    \ lack\n             of request retransmissions as the end of a call. If the\n\
    \             call succeeds shortly after the caller has given up, the\n     \
    \        callee will \"pick up the phone\" and not be \"connected\".\n"
- title: 10.5.1 UDP
  contents:
  - "10.5.1 UDP\n   For UDP, A SIP client SHOULD retransmit a SIP INVITE request with\
    \ an\n   interval that starts at T1 seconds, and doubles after each packet\n \
    \  transmission. The client ceases retransmissions if it receives a\n   provisional\
    \ or definitive response, or once it has sent a total of 7\n   request packets.\n\
    \   A server which transmits a provisional response should retransmit it\n   upon\
    \ reception of a duplicate request. A server which transmits a\n   final response\
    \ should retransmit it with an interval that starts at\n   T1 seconds, and doubles\
    \ for each subsequent packet. Response\n   retransmissions cease when any one\
    \ of the following occurs:\n        1.   An ACK request for the same transaction\
    \ is received;\n        2.   a BYE request for the same call leg is received;\n\
    \        3.   a CANCEL request for the same call leg is received and the\n   \
    \          final response status was equal or greater to 300;\n        4.   the\
    \ response has been transmitted 7 times.\n   Only the user agent client generates\
    \ an ACK for 2xx final responses,\n   If the response contained a Contact header\
    \ field, the ACK MAY be sent\n   to the address listed in that Contact header\
    \ field. If the response\n   did not contain a Contact header, the client uses\
    \ the same To header\n   field and Request-URI as for the INVITE request and sends\
    \ the ACK to\n   the same destination as the original INVITE request. ACKs for\
    \ final\n   responses other than 2xx are sent to the same server that the\n  \
    \ original request was sent to, using the same Request-URI as the\n   original\
    \ request. Note, however, that the To header field in the ACK\n   is copied from\
    \ the response being acknowledged, not the request, and\n   thus MAY additionally\
    \ contain the tag parameter. Also note than\n   unlike 2xx final responses, a\
    \ proxy generates an ACK for non-2xx\n   final responses.\n   The ACK request\
    \ MUST NOT be acknowledged to prevent a response-ACK\n   feedback loop. Fig. 12\
    \ and 13 show the client and server state\n   diagram for invitations.\n     \
    \   The mechanism in Sec. 10.4 would not work well for INVITE\n        because\
    \ of the long delays between INVITE and a final\n        response. If the 200\
    \ response were to get lost, the callee\n        would believe the call to exist,\
    \ but the voice path would\n              +===========+\n              *     \
    \      *\n  ...........>*  Initial  *<;;;;;;;;;;\n  : 7 INVITE  *           *\
    \          ;\n  :   sent    +===========+          ;\n  :                 |  \
    \              ;\n  :                 |    -           ;\n  :                \
    \ |  INVITE        ;\n  :                 |                ;\n  :            \
    \     v                ;\n  :           *************          ;\n  : T1*2^n <--*\
    \           *          ;\n  : INVITE -->*  Calling  *--------+ ;\n  :        \
    \   *           *        | ;\n  :           *************        | ;\n  :    \
    \         :   |              | ;\n  :.............:   | 1xx      xxx | ;\n   \
    \                 |  -       ACK | ;\n                    |              | ;\n\
    \                    v              | ; \n              *************        |\
    \ ;\n              *           *        | ;\n              *  Ringing  *<->1xx\
    \  | ; \n              *           *        | ;\n              ************* \
    \       | ;\n                    |              | ;\n                    |<-------------+\
    \ ; \n                    |                ;\n                    v          \
    \      ;\n              *************          ;\n      xxx  <--*           *\
    \          ;\n      ACK  -->* Completed *          ;\n              *        \
    \   *          ;\n              *************          ;\n                   \
    \ ; 32s (for proxy);\n                    ;;;;;;;;;;;;;;;;;;\n event (xxx=status)\n\
    \     message                                          \n   Figure 12: State transition\
    \ diagram of client for INVITE method\n   7 pkts sent  +===============+     \
    \              \n"
- title: +-------------->*               *
  contents:
  - '+-------------->*               *

    '
- title: '|               *   Initial     *<...............'
  contents:
  - '|               *   Initial     *<...............

    '
- title: '|;;;;;;;;;;;;;;>*               *               :'
  contents:
  - '|;;;;;;;;;;;;;;>*               *               :

    '
- title: '|;              +===============+               :'
  contents:
  - '|;              +===============+               :

    '
- title: '|; CANCEL               !                       :'
  contents:
  - '|; CANCEL               !                       :

    '
- title: '|;  200                 !  INVITE               :'
  contents:
  - '|;  200                 !  INVITE               :

    '
- title: '|;                      !   1xx                 :'
  contents:
  - '|;                      !   1xx                 :

    '
- title: '|;                      !                       :'
  contents:
  - '|;                      !                       :

    '
- title: '|;                      v                       :'
  contents:
  - '|;                      v                       :

    '
- title: '|;              *****************          BYE  :'
  contents:
  - '|;              *****************          BYE  :

    '
- title: '|;    INVITE -->*               *          200  :'
  contents:
  - '|;    INVITE -->*               *          200  :

    '
- title: '|;      1xx  <--* Call proceed. *..............>:'
  contents:
  - '|;      1xx  <--* Call proceed. *..............>:

    '
- title: '|;              *               *               :'
  contents:
  - '|;              *               *               :

    '
- title: '|;;;;;;;;;;;;;;;*****************               :'
  contents:
  - '|;;;;;;;;;;;;;;;*****************               :

    '
- title: '|;                    !   !                     :'
  contents:
  - '|;                    !   !                     :

    '
- title: '|:                    !   !                     :'
  contents:
  - '|:                    !   !                     :

    '
- title: '|;         failure    !   !  picks up           :'
  contents:
  - '|;         failure    !   !  picks up           :

    '
- title: '|;         >= 300     !   !    200              :'
  contents:
  - '|;         >= 300     !   !    200              :

    '
- title: '|;            +-------+   +-------+             :'
  contents:
  - '|;            +-------+   +-------+             :

    '
- title: '|;            v                   v             :'
  contents:
  - '|;            v                   v             :

    '
- title: '|;       ***********         ***********        :'
  contents:
  - '|;       ***********         ***********        :

    '
- title: '|;INVITE<*         *<T1*2^n->*         *>INVITE :'
  contents:
  - '|;INVITE<*         *<T1*2^n->*         *>INVITE :

    '
- title: '|;status>* failure *>status<-* success *<status :'
  contents:
  - '|;status>* failure *>status<-* success *<status :

    '
- title: '|;       *         *         *         *        :'
  contents:
  - '|;       *         *         *         *        :

    '
- title: '|;;;;;;;;***********         ***********        :'
  contents:
  - '|;;;;;;;;***********         ***********        :

    '
- title: '|             ! : |            |  !  :          :'
  contents:
  - '|             ! : |            |  !  :          :

    '
- title: '|             ! : |            |  !  :          :'
  contents:
  - '|             ! : |            |  !  :          :

    '
- title: '+-------------!-:-+------------+  !  :          :'
  contents:
  - "+-------------!-:-+------------+  !  :          :\n              ! :.................!..:.........>:\n\
    \              !                   !         BYE : \n              +---------+---------+\
    \         200 :\n  event                 ! ACK                   :\n"
- title: 'message sent            v                       :'
  contents:
  - "message sent            v                       :\n                *****************\
    \               :\n            V---*               *               :\n       \
    \    ACK  *   Confirmed   *               :\n            |-->*               *\
    \               :\n                *****************               . \n      \
    \                  :......................>:\n        be dead since the caller\
    \ does not know that the callee has\n        picked up. Thus, the INVITE retransmission\
    \ interval would\n        have to be on the order of a second or two to limit\
    \ the\n        duration of this state confusion. Retransmitting the\n        response\
    \ with an exponential back-off helps ensure that the\n        response is received,\
    \ without placing an undue burden on\n        the network.\n"
- title: 10.5.2 TCP
  contents:
  - "10.5.2 TCP\n   A user agent using TCP MUST NOT retransmit requests, but uses\
    \ the\n   same algorithm as for UDP (Section 10.5.1) to retransmit responses\n\
    \   until it receives an ACK.\n        It is necessary to retransmit 2xx responses\
    \ as their\n        reliability is assured end-to-end only. If the chain of\n\
    \        proxies has a UDP link in the middle, it could lose the\n        response,\
    \ with no possibility of recovery. For simplicity,\n        we also retransmit\
    \ non-2xx responses, although that is not\n        strictly necessary.\n"
- title: 10.6 Reliability for ACK Requests
  contents:
  - "10.6 Reliability for ACK Requests\n   The ACK request does not generate responses.\
    \ It is only generated\n   when a response to an INVITE request arrives (see Section\
    \ 10.5). This\n   behavior is independent of the transport protocol. Note that\
    \ the ACK\n   request MAY take a different path than the original INVITE request,\n\
    \   and MAY even cause a new TCP connection to be opened in order to send\n  \
    \ it.\n"
- title: 10.7 ICMP Handling
  contents:
  - "10.7 ICMP Handling\n   Handling of ICMP messages in the case of UDP messages\
    \ is\n   straightforward. For requests, a host, network, port, or protocol\n \
    \  unreachable error SHOULD be treated as if a 400-class response was\n   received.\
    \ For responses, these errors SHOULD cause the server to\n   cease retransmitting\
    \ the response.\n   Source quench ICMP messages SHOULD be ignored. TTL exceeded\
    \ errors\n   SHOULD be ignored. Parameter problem errors SHOULD be treated as\
    \ if a\n   400-class response was received.\n"
- title: 11 Behavior of SIP User Agents
  contents:
  - "11 Behavior of SIP User Agents\n   This section describes the rules for user\
    \ agent client and servers\n   for generating and processing requests and responses.\n"
- title: 11.1 Caller Issues Initial INVITE Request
  contents:
  - "11.1 Caller Issues Initial INVITE Request\n   When a user agent client desires\
    \ to initiate a call, it formulates an\n   INVITE request. The To field in the\
    \ request contains the address of\n   the callee. The Request-URI contains the\
    \ same address. The From field\n   contains the address of the caller.  If the\
    \ From address can appear\n   in requests generated by other user agent clients\
    \ for the same call,\n   the caller MUST insert the tag parameter in the From\
    \ field. A UAC MAY\n   optionally add a Contact header containing an address where\
    \ it would\n   like to be contacted for transactions from the callee back to the\n\
    \   caller.\n"
- title: 11.2 Callee Issues Response
  contents:
  - "11.2 Callee Issues Response\n   When the initial INVITE request is received at\
    \ the callee, the callee\n   can accept, redirect, or reject the call. In all\
    \ of these cases, it\n   formulates a response. The response MUST copy the To,\
    \ From, Call-ID,\n   CSeq and Via fields from the request. Additionally, the responding\n\
    \   UAS MUST add the tag parameter to the To field in the response if the\n  \
    \ request contained more than one Via header field. Since a request\n   from a\
    \ UAC may fork and arrive at multiple hosts, the tag parameter\n   serves to distinguish,\
    \ at the UAC, multiple responses from different\n   UAS's. The UAS MAY add a Contact\
    \ header field in the response. It\n   contains an address where the callee would\
    \ like to be contacted for\n   subsequent transactions, including the ACK for\
    \ the current INVITE.\n   The UAS stores the values of the To and From field,\
    \ including any\n   tags. These become the local and remote addresses of the call\
    \ leg,\n   respectively.\n"
- title: 11.3 Caller Receives Response to Initial Request
  contents:
  - "11.3 Caller Receives Response to Initial Request\n   Multiple responses may arrive\
    \ at the UAC for a single INVITE request,\n   due to a forking proxy. Each response\
    \ is distinguished by the \"tag\"\n   parameter in the To header field, and each\
    \ represents a distinct call\n   leg. The caller MAY choose to acknowledge or\
    \ terminate the call with\n   each responding UAS. To acknowledge, it sends an\
    \ ACK request, and to\n   terminate it sends a BYE request.  The To header field\
    \ in the ACK or\n   BYE MUST be the same as the To field in the 200 response,\
    \ including\n   any tag. The From header field MUST be the same as the From header\n\
    \   field in the 200 (OK) response, including any tag. The Request-URI of\n  \
    \ the ACK or BYE request MAY be set to whatever address was found in\n   the Contact\
    \ header field in the 200 (OK) response, if present.\n   Alternately, a UAC may\
    \ copy the address from the To header field into\n   the Request-URI. The UAC\
    \ also notes the value of the To and From\n   header fields in each response.\
    \ For each call leg, the To header\n   field becomes the remote address, and the\
    \ From header field becomes\n   the local address.\n"
- title: 11.4 Caller or Callee Generate Subsequent Requests
  contents:
  - "11.4 Caller or Callee Generate Subsequent Requests\n   Once the call has been\
    \ established, either the caller or callee MAY\n   generate INVITE or BYE requests\
    \ to change or terminate the call.\n   Regardless of whether the caller or callee\
    \ is generating the new\n   request, the header fields in the request are set\
    \ as follows. For the\n   desired call leg, the To header field is set to the\
    \ remote address,\n   and the From header field is set to the local address (both\
    \ including\n   any tags). The Contact header field MAY be different than the\
    \ Contact\n   header field sent in a previous response or request. The Request-URI\n\
    \   MAY be set to the value of the Contact header field received in a\n   previous\
    \ request or response from the remote party, or to the value\n   of the remote\
    \ address.\n"
- title: 11.5 Receiving Subsequent Requests
  contents:
  - "11.5 Receiving Subsequent Requests\n   When a request is received subsequently,\
    \ the following checks are\n   made:\n        1.   If the Call-ID is new, the\
    \ request is for a new call,\n             regardless of the values of the To\
    \ and From header fields.\n        2.   If the Call-ID exists, the request is\
    \ for an existing call.\n             If the To, From, Call-ID, and CSeq values\
    \ exactly match\n             (including tags) those of any requests received\
    \ previously,\n             the request is a retransmission.\n        3.   If\
    \ there was no match to the previous step, the To and From\n             fields\
    \ are compared against existing call leg local and\n             remote addresses.\
    \ If there is a match, and the CSeq in the\n             request is higher than\
    \ the last CSeq received on that leg,\n             the request is a new transaction\
    \ for an existing call leg.\n"
- title: 12 Behavior of SIP Proxy and Redirect Servers
  contents:
  - "12 Behavior of SIP Proxy and Redirect Servers\n   This section describes behavior\
    \ of SIP redirect and proxy servers in\n   detail. Proxy servers can \"fork\"\
    \ connections, i.e., a single incoming\n   request spawns several outgoing (client)\
    \ requests.\n"
- title: 12.1 Redirect Server
  contents:
  - "12.1 Redirect Server\n   A redirect server does not issue any SIP requests of\
    \ its own. After\n   receiving a request other than CANCEL, the server gathers\
    \ the list of\n   alternative locations and returns a final response of class\
    \ 3xx or it\n   refuses the request. For well-formed CANCEL requests, it SHOULD\n\
    \   return a 2xx response. This response ends the SIP transaction. The\n   redirect\
    \ server maintains transaction state for the whole SIP\n   transaction. It is\
    \ up to the client to detect forwarding loops\n   between redirect servers.\n"
- title: 12.2 User Agent Server
  contents:
  - "12.2 User Agent Server\n   User agent servers behave similarly to redirect servers,\
    \ except that\n   they also accept requests and can return a response of class\
    \ 2xx.\n"
- title: 12.3 Proxy Server
  contents:
  - "12.3 Proxy Server\n   This section outlines processing rules for proxy servers.\
    \ A proxy\n   server can either be stateful or stateless. When stateful, a proxy\n\
    \   remembers the incoming request which generated outgoing requests, and\n  \
    \ the outgoing requests. A stateless proxy forgets all information once\n   an\
    \ outgoing request is generated. A forking proxy SHOULD be stateful.\n   Proxies\
    \ that accept TCP connections MUST be stateful.\n        Otherwise, if the proxy\
    \ were to lose a request, the TCP\n        client would never retransmit it.\n\
    \   A stateful proxy SHOULD NOT become stateless until after it sends a\n   definitive\
    \ response upstream, and at least 32 seconds after it\n   received a definitive\
    \ response.\n   A stateful proxy acts as a virtual UAS/UAC. It implements the\
    \ server\n   state machine when receiving requests, and the client state machine\n\
    \   for generating outgoing requests, with the exception of receiving a\n   2xx\
    \ response to an INVITE. Instead of generating an ACK, the 2xx\n   response is\
    \ always forwarded upstream towards the caller.\n   Furthermore, ACK's for 200\
    \ responses to INVITE's are always proxied\n   downstream towards the UAS, as\
    \ they would be for a stateless proxy.\n   A stateless proxy does not act as a\
    \ virtual UAS/UAC (as this would\n   require state). Rather, a stateless proxy\
    \ forwards every request it\n   receives downstream, and every response it receives\
    \ upstream.\n"
- title: 12.3.1 Proxying Requests
  contents:
  - "12.3.1 Proxying Requests\n   To prevent loops, a server MUST check if its own\
    \ address is already\n   contained in the Via header field of the incoming request.\n\
    \   The To, From, Call-ID, and Contact tags are copied exactly from the\n   original\
    \ request. The proxy SHOULD change the Request-URI to indicate\n   the server\
    \ where it intends to send the request.\n   A proxy server always inserts a Via\
    \ header field containing its own\n   address into those requests that are caused\
    \ by an incoming request.\n   Each proxy MUST insert a \"branch\" parameter (Section\
    \ 6.40).\n"
- title: 12.3.2 Proxying Responses
  contents:
  - "12.3.2 Proxying Responses\n   A proxy only processes a response if the topmost\
    \ Via field matches\n   one of its addresses. A response with a non-matching top\
    \ Via field\n   MUST be dropped.\n"
- title: '12.3.3 Stateless Proxy: Proxying Responses'
  contents:
  - "12.3.3 Stateless Proxy: Proxying Responses\n   A stateless proxy removes its\
    \ own Via field, and checks the address\n   in the next Via field. In the case\
    \ of UDP, the response is sent to\n   the address listed in the \"maddr\" tag\
    \ if present, otherwise to the\n   \"received\" tag if present, and finally to\
    \ the address in the \"sent-\n   by\" field. A proxy MUST remain stateful when\
    \ handling requests\n   received via TCP.\n   A stateless proxy MUST NOT generate\
    \ its own provisional responses.\n"
- title: '12.3.4 Stateful Proxy: Receiving Requests'
  contents:
  - "12.3.4 Stateful Proxy: Receiving Requests\n   When a stateful proxy receives\
    \ a request, it checks the To, From\n   (including tags), Call-ID and CSeq against\
    \ existing request records.\n   If the tuple exists, the request is a retransmission.\
    \ The provisional\n   or final response sent previously is retransmitted, as per\
    \ the server\n   state machine. If the tuple does not exist, the request corresponds\n\
    \   to a new transaction, and the request should be proxied.\n   A stateful proxy\
    \ server MAY generate its own provisional (1xx)\n   responses.\n"
- title: '12.3.5 Stateful Proxy: Receiving ACKs'
  contents:
  - "12.3.5 Stateful Proxy: Receiving ACKs\n   When an ACK request is received, it\
    \ is either processed locally or\n   proxied. To make this determination, the\
    \ To, From, CSeq and Call-ID\n   fields are compared against those in previous\
    \ requests. If there is\n   no match, the ACK request is proxied as if it were\
    \ an INVITE request.\n   If there is a match, and if the server had ever sent\
    \ a 200 response\n   upstream, the ACK is proxied.  If the server had never sent\
    \ any\n   responses upstream, the ACK is also proxied. If the server had sent\
    \ a\n   3xx, 4xx, 5xx or 6xx response, but no 2xx response, the ACK is\n   processed\
    \ locally if the tag in the To field of the ACK matches the\n   tag sent by the\
    \ proxy in the response.\n"
- title: '12.3.6 Stateful Proxy: Receiving Responses'
  contents:
  - "12.3.6 Stateful Proxy: Receiving Responses\n   When a proxy server receives a\
    \ response that has passed the Via\n   checks, the proxy server checks the To\
    \ (without the tag), From\n   (including the tag), Call-ID and CSeq against values\
    \ seen in previous\n   requests. If there is no match, the response is forwarded\
    \ upstream to\n   the address listed in the Via field. If there is a match, the\n\
    \   \"branch\" tag in the Via field is examined. If it matches a known\n   branch\
    \ identifier, the response is for the given branch, and\n   processed by the virtual\
    \ client for the given branch. Otherwise, the\n   response is dropped.\n   A stateful\
    \ proxy should obey the rules in Section 12.4 to determine\n   if the response\
    \ should be proxied upstream. If it is to be proxied,\n   the same rules for stateless\
    \ proxies above are followed, with the\n   following addition for TCP. If a request\
    \ was received via TCP\n   (indicated by the protocol in the top Via header),\
    \ the proxy checks\n   to see if it has a connection currently open to that address.\
    \ If so,\n   the response is sent on that connection.  Otherwise, a new TCP\n\
    \   connection is opened to the address and port in the Via field, and\n   the\
    \ response is sent there. Note that this implies that a UAC or\n   proxy MUST\
    \ be prepared to receive responses on the incoming side of a\n   TCP connection.\
    \ Definitive non 200-class responses MUST be\n   retransmitted by the proxy, even\
    \ over a TCP connection.\n"
- title: 12.3.7 Stateless, Non-Forking Proxy
  contents:
  - "12.3.7 Stateless, Non-Forking Proxy\n   Proxies in this category issue at most\
    \ a single unicast request for\n   each incoming SIP request, that is, they do\
    \ not \"fork\" requests.\n   However, servers MAY choose to always operate in\
    \ a mode that allows\n   issuing of several requests, as described in Section\
    \ 12.4.\n   The server can forward the request and any responses. It does not\n\
    \   have to maintain any state for the SIP transaction. Reliability is\n   assured\
    \ by the next redirect or stateful proxy server in the server\n   chain.\n   A\
    \ proxy server SHOULD cache the result of any address translations\n   and the\
    \ response to speed forwarding of retransmissions. After the\n   cache entry has\
    \ been expired, the server cannot tell whether an\n   incoming request is actually\
    \ a retransmission of an older request.\n   The server will treat it as a new\
    \ request and commence another\n   search.\n"
- title: 12.4 Forking Proxy
  contents:
  - "12.4 Forking Proxy\n   The server MUST respond to the request immediately with\
    \ a 100\n   (Trying) response.\n   Successful responses to an INVITE request MAY\
    \ contain a Contact\n   header field so that the following ACK or BYE bypasses\
    \ the proxy\n   search mechanism. If the proxy requires future requests to be\
    \ routed\n   through it, it adds a Record-Route header to the request (Section\n\
    \   6.29).\n   The following C-code describes the behavior of a proxy server issuing\n\
    \   several requests in response to an incoming INVITE request.  The\n   function\
    \ request(r, a, b) sends a SIP request of type r to address a,\n   with branch\
    \ id b. await_response() waits until a response is received\n   and returns the\
    \ response. close(a) closes the TCP connection to\n   client with address a. response(r)\
    \ sends a response to the client.\n   ismulticast() returns 1 if the location\
    \ is a multicast address and\n   zero otherwise.  The variable timeleft indicates\
    \ the amount of time\n   left until the maximum response time has expired. The\
    \ variable\n   recurse indicates whether the server will recursively try addresses\n\
    \   returned through a 3xx response. A server MAY decide to recursively\n   try\
    \ only certain addresses, e.g., those which are within the same\n   domain as\
    \ the proxy server. Thus, an initial multicast request can\n   trigger additional\
    \ unicast requests.\n     /* request type */\n     typedef enum {INVITE, ACK,\
    \ BYE, OPTIONS, CANCEL, REGISTER} Method;\n     process_request(Method R, int\
    \ N, address_t address[])\n     {\n       struct {\n         int branch;     \
    \    /* branch id */\n         int done;           /* has responded */\n     \
    \  } outgoing[];\n       int done[];           /* address has responded */\n \
    \      char *location[];     /* list of locations */\n       int heard = 0;  \
    \      /* number of sites heard from */\n       int class;            /* class\
    \ of status code */\n       int timeleft = 120;   /* sample timeout value */\n\
    \       int loc = 0;          /* number of locations */\n       struct {     \
    \         /* response */\n         int status;         /* response: CANCEL=-1\
    \ */\n         int locations;      /* number of redirect locations */\n      \
    \   char *location[];   /* redirect locations */\n         address_t a;      \
    \  /* address of respondent */\n         int branch;         /* branch identifier\
    \ */\n       } r, best;            /* response, best response */\n       int i;\n\
    \       best.status = 1000;\n       for (i = 0; i < N; i++) {\n         request(R,\
    \ address[i], i);\n         outgoing[i].done = 0;\n         outgoing[i].branch\
    \ = i;\n       }\n       while (timeleft > 0 && heard < N) {\n         r = await_response();\n\
    \         class = r.status / 100;\n         /* If final response, mark branch\
    \ as done. */\n         if (class >= 2) {\n           heard++;\n           for\
    \ (i = 0; i < N; i++) {\n             if (r.branch == outgoing[i].branch) {\n\
    \               outgoing[i].done = 1;\n               break;\n             }\n\
    \           }\n         }\n         /* CANCEL: respond, fork and wait for responses\
    \ */\n         else if (class < 0) {\n           best.status = 200;\n        \
    \   response(best);\n           for (i = 0; i < N; i++) {\n             if (!outgoing[i].done)\n\
    \               request(CANCEL, address[i], outgoing[i].branch);\n           }\n\
    \           best.status = -1;\n         }\n         /* Send an ACK */\n      \
    \   if (class != 2) {\n           if (R == INVITE) request(ACK, r.a, r.branch);\n\
    \         }\n         if (class == 2) {\n           if (r.status < best.status)\
    \ best = r;\n           break;\n         }\n         else if (class == 3) {\n\
    \           /* A server MAY optionally recurse.  The server MUST check\n     \
    \       * whether it has tried this location before and whether\n            *\
    \ the location is part of the Via path of the incoming\n            * request.\
    \  This check is omitted here for brevity.\n            * Multicast locations\
    \ MUST NOT be returned to the client if\n            * the server is not recursing.\n\
    \            */\n           if (recurse) {\n             multicast = 0;\n    \
    \         N += r.locations;\n             for (i = 0; i < r.locations; i++) {\n\
    \               request(R, r.location[i]);\n             }\n           } else\
    \ if (!ismulticast(r.location)) {\n             best = r;\n           }\n    \
    \     }\n         else if (class == 4) {\n           if (best.status >= 400) best\
    \ = r;\n         }\n         else if (class == 5) {\n           if (best.status\
    \ >= 500) best = r;\n         }\n         else if (class == 6) {\n           best\
    \ = r;\n           break;\n         }\n       }\n       /* We haven't heard anything\
    \ useful from anybody. */\n       if (best.status == 1000) {\n         best.status\
    \ = 404;\n       }\n       if (best.status/100 != 3) loc = 0;\n       response(best);\n\
    \     }\n   Responses are processed as follows. The process completes (and state\n\
    \   can be freed) when all requests have been answered by final status\n   responses\
    \ (for unicast) or 60 seconds have elapsed (for multicast). A\n   proxy MAY send\
    \ a CANCEL to all branches and return a 408 (Timeout) to\n   the client after\
    \ 60 seconds or more.\n   1xx: The proxy MAY forward the response upstream towards\
    \ the client.\n   2xx: The proxy MUST forward the response upstream towards the\
    \ client,\n        without sending an ACK downstream. After receiving a 2xx, the\n\
    \        server MAY terminate all other pending requests by sending a\n      \
    \  CANCEL request and closing the TCP connection, if applicable.\n        (Terminating\
    \ pending requests is advisable as searches consume\n        resources. Also,\
    \ INVITE requests could \"ring\" on a number of\n        workstations if the callee\
    \ is currently logged in more than\n        once.)\n   3xx: The proxy MUST send\
    \ an ACK and MAY recurse on the listed Contact\n        addresses. Otherwise,\
    \ the lowest-numbered response is returned\n        if there were no 2xx responses.\n\
    \        Location lists are not merged as that would prevent\n        forwarding\
    \ of authenticated responses. Also, responses can\n        have message bodies,\
    \ so that merging is not feasible.\n   4xx, 5xx: The proxy MUST send an ACK and\
    \ remember the response if it\n        has a lower status code than any previous\
    \ 4xx and 5xx responses.\n        On completion, the lowest-numbered response\
    \ is returned if there\n        were no 2xx or 3xx responses.\n   6xx: The proxy\
    \ MUST forward the response to the client and send an\n        ACK. Other pending\
    \ requests MAY be terminated with CANCEL as\n        described for 2xx responses.\n\
    \   A proxy server forwards any response for Call-IDs for which it does\n   not\
    \ have a pending transaction according to the response's Via\n   header. User\
    \ agent servers respond to BYE requests for unknown call\n   legs with status\
    \ code 481 (Transaction Does Not Exist); they drop ACK\n   requests with unknown\
    \ call legs silently.\n   Special considerations apply for choosing forwarding\
    \ destinations for\n   ACK and BYE requests. In most cases, these requests will\
    \ bypass\n   proxies and reach the desired party directly, keeping proxies from\n\
    \   having to make forwarding decisions.\n   A proxy MAY maintain call state for\
    \ a period of its choosing. If a\n   proxy still has list of destinations that\
    \ it forwarded the last\n   INVITE to, it SHOULD direct ACK requests only to those\
    \ downstream\n   servers.\n"
- title: 13 Security Considerations
  contents:
  - '13 Security Considerations

    '
- title: '13.1 Confidentiality and Privacy: Encryption'
  contents:
  - '13.1 Confidentiality and Privacy: Encryption

    '
- title: 13.1.1 End-to-End Encryption
  contents:
  - "13.1.1 End-to-End Encryption\n   SIP requests and responses can contain sensitive\
    \ information about\n   the communication patterns and communication content of\
    \ individuals.\n   The SIP message body MAY also contain encryption keys for the\
    \ session\n   itself. SIP supports three complementary forms of encryption to\n\
    \   protect privacy:\n        o  End-to-end encryption of the SIP message body\
    \ and certain\n          sensitive header fields;\n        o  hop-by-hop encryption\
    \ to prevent eavesdropping that tracks\n          who is calling whom;\n     \
    \   o  hop-by-hop encryption of Via fields to hide the route a\n          request\
    \ has taken.\n   Not all of the SIP request or response can be encrypted end-to-end\n\
    \   because header fields such as To and Via need to be visible to\n   proxies\
    \ so that the SIP request can be routed correctly.  Hop-by-hop\n   encryption\
    \ encrypts the entire SIP request or response on the wire so\n   that packet sniffers\
    \ or other eavesdroppers cannot see who is calling\n   whom. Hop-by-hop encryption\
    \ can also encrypt requests and responses\n   that have been end-to-end encrypted.\
    \ Note that proxies can still see\n   who is calling whom, and this information\
    \ is also deducible by\n   performing a network traffic analysis, so this provides\
    \ a very\n   limited but still worthwhile degree of protection.\n   SIP Via fields\
    \ are used to route a response back along the path taken\n   by the request and\
    \ to prevent infinite request loops. However, the\n   information given by them\
    \ can also provide useful information to an\n   attacker. Section 6.22 describes\
    \ how a sender can request that Via\n   fields be encrypted by cooperating proxies\
    \ without compromising the\n   purpose of the Via field.\n   End-to-end encryption\
    \ relies on keys shared by the two user agents\n   involved in the request. Typically,\
    \ the message is sent encrypted\n   with the public key of the recipient, so that\
    \ only that recipient can\n   read the message. All implementations SHOULD support\
    \ PGP-based\n   encryption [33] and MAY implement other schemes.\n   A SIP request\
    \ (or response) is end-to-end encrypted by splitting the\n   message to be sent\
    \ into a part to be encrypted and a short header\n   that will remain in the clear.\
    \ Some parts of the SIP message, namely\n   the request line, the response line\
    \ and certain header fields marked\n   with \"n\" in the \"enc.\" column in Table\
    \ 4 and 5 need to be read and\n   returned by proxies and thus MUST NOT be encrypted\
    \ end-to-end.\n   Possibly sensitive information that needs to be made available\
    \ as\n   plaintext include destination address (To) and the forwarding path\n\
    \   (Via) of the call. The Authorization header field MUST remain in the\n   clear\
    \ if it contains a digital signature as the signature is\n   generated after encryption,\
    \ but MAY be encrypted if it contains\n   \"basic\" or \"digest\" authentication.\
    \ The From header field SHOULD\n   normally remain in the clear, but MAY be encrypted\
    \ if required, in\n   which case some proxies MAY return a 401 (Unauthorized)\
    \ status if\n   they require a From field.\n   Other header fields MAY be encrypted\
    \ or MAY travel in the clear as\n   desired by the sender. The Subject, Allow\
    \ and Content-Type header\n   fields will typically be encrypted. The Accept,\
    \ Accept-Language,\n   Date, Expires, Priority, Require, Call-ID, Cseq, and Timestamp\
    \ header\n   fields will remain in the clear.\n   All fields that will remain\
    \ in the clear MUST precede those that will\n   be encrypted. The message is encrypted\
    \ starting with the first\n   character of the first header field that will be\
    \ encrypted and\n   continuing through to the end of the message body. If no header\n\
    \   fields are to be encrypted, encrypting starts with the second CRLF\n   pair\
    \ after the last header field, as shown below. Carriage return and\n   line feed\
    \ characters have been made visible as \"$\", and the encrypted\n   part of the\
    \ message is outlined.\n     INVITE sip:watson@boston.bell-telephone.com SIP/2.0$\n\
    \     Via: SIP/2.0/UDP 169.130.12.5$\n     To: T. A. Watson <sip:watson@bell-telephone.com>$\n\
    \     From: A. Bell <sip:a.g.bell@bell-telephone.com>$\n     Encryption: PGP version=5.0$\n\
    \     Content-Length: 224$\n     Call-ID: 187602141351@worcester.bell-telephone.com$\n\
    \     CSeq: 488$\n     $\n   *******************************************************\n\
    \   * Subject: Mr. Watson, come here.$                    *\n   * Content-Type:\
    \ application/sdp$                      *\n   * $                            \
    \                       *\n   * v=0$                                         \
    \       *\n   * o=bell 53655765 2353687637 IN IP4 128.3.4.5$        *\n   * c=IN\
    \ IP4 135.180.144.94$                            *\n   * m=audio 3456 RTP/AVP\
    \ 0 3 4 5$                       *\n   *******************************************************\n\
    \   An Encryption header field MUST be added to indicate the encryption\n   mechanism\
    \ used. A Content-Length field is added that indicates the\n   length of the encrypted\
    \ body. The encrypted body is preceded by a\n   blank line as a normal SIP message\
    \ body would be.\n   Upon receipt by the called user agent possessing the correct\n\
    \   decryption key, the message body as indicated by the Content-Length\n   field\
    \ is decrypted, and the now-decrypted body is appended to the\n   clear-text header\
    \ fields. There is no need for an additional\n   Content-Length header field within\
    \ the encrypted body because the\n   length of the actual message body is unambiguous\
    \ after decryption.\n   Had no SIP header fields required encryption, the message\
    \ would have\n   been as below. Note that the encrypted body MUST then include\
    \ a blank\n   line (start with CRLF) to disambiguate between any possible SIP\n\
    \   header fields that might have been present and the SIP message body.\n   \
    \  INVITE sip:watson@boston.bell-telephone.com SIP/2.0$\n     Via: SIP/2.0/UDP\
    \ 169.130.12.5$\n     To: T. A. Watson <sip:watson@bell-telephone.com>$\n    \
    \ From: A. Bell <a.g.bell@bell-telephone.com>$\n     Encryption: PGP version=5.0$\n\
    \     Content-Type: application/sdp$\n     Content-Length: 107$\n     $\n   *************************************************\n\
    \   * $                                             *\n   * v=0$             \
    \                             *\n   * o=bell 53655765 2353687637 IN IP4 128.3.4.5$\
    \  *\n   * c=IN IP4 135.180.144.94$                      *\n   * m=audio 3456\
    \ RTP/AVP 0 3 4 5$                 *\n   *************************************************\n"
- title: 13.1.2 Privacy of SIP Responses
  contents:
  - "13.1.2 Privacy of SIP Responses\n   SIP requests can be sent securely using end-to-end\
    \ encryption and\n   authentication to a called user agent that sends an insecure\n\
    \   response.  This is allowed by the SIP security model, but is not a\n   good\
    \ idea.  However, unless the correct behavior is explicit, it\n   would not always\
    \ be possible for the called user agent to infer what\n   a reasonable behavior\
    \ was. Thus when end-to-end encryption is used by\n   the request originator,\
    \ the encryption key to be used for the\n   response SHOULD be specified in the\
    \ request. If this were not done,\n   it might be possible for the called user\
    \ agent to incorrectly infer\n   an appropriate key to use in the response. Thus,\
    \ to prevent key-\n   guessing becoming an acceptable strategy, we specify that\
    \ a called\n   user agent receiving a request that does not specify a key to be\
    \ used\n   for the response SHOULD send that response unencrypted.\n   Any SIP\
    \ header fields that were encrypted in a request SHOULD also be\n   encrypted\
    \ in an encrypted response. Contact response fields MAY be\n   encrypted if the\
    \ information they contain is sensitive, or MAY be\n   left in the clear to permit\
    \ proxies more scope for localized\n   searches.\n"
- title: 13.1.3 Encryption by Proxies
  contents:
  - "13.1.3 Encryption by Proxies\n   Normally, proxies are not allowed to alter end-to-end\
    \ header fields\n   and message bodies. Proxies MAY, however, encrypt an unsigned\
    \ request\n   or response with the key of the call recipient.\n        Proxies\
    \ need to encrypt a SIP request if the end system\n        cannot perform encryption\
    \ or to enforce organizational\n        security policies.\n"
- title: 13.1.4 Hop-by-Hop Encryption
  contents:
  - "13.1.4 Hop-by-Hop Encryption\n   SIP requests and responses MAY also be protected\
    \ by security\n   mechanisms at the transport or network layer. No particular\
    \ mechanism\n   is defined or recommended here. Two possibilities are IPSEC [34]\
    \ or\n   TLS [35]. The use of a particular mechanism will generally need to be\n\
    \   specified out of band, through manual configuration, for example.\n"
- title: 13.1.5 Via field encryption
  contents:
  - "13.1.5 Via field encryption\n   When Via header fields are to be hidden, a proxy\
    \ that receives a\n   request containing an appropriate \"Hide: hop\" header field\
    \ (as\n   specified in section 6.22) SHOULD encrypt the header field. As only\n\
    \   the proxy that encrypts the field will decrypt it, the algorithm\n   chosen\
    \ is entirely up to the proxy implementor. Two methods satisfy\n   these requirements:\n\
    \        o  The server keeps a cache of Via header fields and the\n          associated\
    \ To header field, and replaces the Via header field\n          with an index\
    \ into the cache. On the reverse path, take the\n          Via header field from\
    \ the cache rather than the message.\n        This is insufficient to prevent\
    \ message looping, and so an\n        additional ID MUST be added so that the\
    \ proxy can detect loops.\n        This SHOULD NOT normally be the address of\
    \ the proxy as the goal\n        is to hide the route, so instead a sufficiently\
    \ large random\n        number SHOULD be used by the proxy and maintained in the\
    \ cache.\n        It is possible for replies to get directed to the wrong\n  \
    \      originator if the cache entry gets reused, so great care needs\n      \
    \  to be taken to ensure this does not happen.\n        o  The server MAY use\
    \ a secret key to encrypt the Via field, a\n          timestamp and an appropriate\
    \ checksum in any such message with\n          the same secret key. The checksum\
    \ is needed to detect whether\n          successful decoding has occurred, and\
    \ the timestamp is\n          required to prevent possible replay attacks and\
    \ to ensure that\n          no two requests from the same previous hop have the\
    \ same\n          encrypted Via field.  This is the preferred solution.\n"
- title: '13.2 Message Integrity and Access Control: Authentication'
  contents:
  - "13.2 Message Integrity and Access Control: Authentication\n   Protective measures\
    \ need to be taken to prevent an active attacker\n   from modifying and replaying\
    \ SIP requests and responses. The same\n   cryptographic measures that are used\
    \ to ensure the authenticity of\n   the SIP message also serve to authenticate\
    \ the originator of the\n   message.  However, the \"basic\" and \"digest\" authentication\
    \ mechanism\n   offer authentication only, without message integrity.\n   Transport-layer\
    \ or network-layer authentication MAY be used for hop-\n   by-hop authentication.\
    \ SIP also extends the HTTP WWW-Authenticate\n   (Section 6.42) and Authorization\
    \ (Section 6.11) header field and\n   their Proxy counterparts to include cryptographically\
    \ strong\n   signatures. SIP also supports the HTTP \"basic\" and \"digest\" schemes\n\
    \   (see Section 14) and other HTTP authentication schemes to be defined\n   that\
    \ offer a rudimentary mechanism of ascertaining the identity of\n   the caller.\n\
    \        Since SIP requests are often sent to parties with which no\n        prior\
    \ communication relationship has existed, we do not\n        specify authentication\
    \ based on shared secrets.\n   SIP requests MAY be authenticated using the Authorization\
    \ header\n   field to include a digital signature of certain header fields, the\n\
    \   request method and version number and the payload, none of which are\n   modified\
    \ between client and called user agent. The Authorization\n   header field is\
    \ used in requests to authenticate the request\n   originator end-to-end to proxies\
    \ and the called user agent, and in\n   responses to authenticate the called user\
    \ agent or proxies returning\n   their own failure codes. If required, hop-by-hop\
    \ authentication can\n   be provided, for example, by the IPSEC Authentication\
    \ Header.\n   SIP does not dictate which digital signature scheme is used for\n\
    \   authentication, but does define how to provide authentication using\n   PGP\
    \ in Section 15. As indicated above, SIP implementations MAY also\n   use \"basic\"\
    \ and \"digest\" authentication and other authentication\n   mechanisms defined\
    \ for HTTP. Note that \"basic\" authentication has\n   severe security limitations.\
    \ The following does not apply to these\n   schemes.\n   To cryptographically\
    \ sign a SIP request, the order of the SIP header\n   fields is important. When\
    \ an Authorization header field is present,\n   it indicates that all header fields\
    \ following the Authorization\n   header field have been included in the signature.\
    \  Therefore, hop-\n   by-hop header fields which MUST or SHOULD be modified by\
    \ proxies MUST\n   precede the Authorization header field as they will generally\
    \ be\n   modified or added-to by proxy servers.  Hop-by-hop header fields\n  \
    \ which MAY be modified by a proxy MAY appear before or after the\n   Authorization\
    \ header. When they appear before, they MAY be modified\n   by a proxy. When they\
    \ appear after, they MUST NOT be modified by a\n   proxy. To sign a request, a\
    \ client constructs a message from the\n   request method (in upper case) followed,\
    \ without LWS, by the SIP\n   version number, followed, again without LWS, by\
    \ the request headers\n   to be signed and the message body.  The message thus\
    \ constructed is\n   then signed.\n   For example, if the SIP request is to be:\n\
    \   INVITE sip:watson@boston.bell-telephone.com SIP/2.0\n   Via: SIP/2.0/UDP 169.130.12.5\n\
    \   Authorization: PGP version=5.0, signature=...\n   From: A. Bell <sip:a.g.bell@bell-telephone.com>\n\
    \   To: T. A. Watson <sip:watson@bell-telephone.com>\n   Call-ID: 187602141351@worcester.bell-telephone.com\n\
    \   Subject: Mr. Watson, come here.\n   Content-Type: application/sdp\n   Content-Length:\
    \ ...\n   v=0\n   o=bell 53655765 2353687637 IN IP4 128.3.4.5\n   c=IN IP4 135.180.144.94\n\
    \   m=audio 3456 RTP/AVP 0 3 4 5\n   Then the data block that is signed is:\n\
    \   INVITESIP/2.0From: A. Bell <sip:a.g.bell@bell-telephone.com>\n   To: T. A.\
    \ Watson <sip:watson@bell-telephone.com>\n   Call-ID: 187602141351@worcester.bell-telephone.com\n\
    \   Subject: Mr. Watson, come here.\n   Content-Type: application/sdp\n   Content-Length:\
    \ ...\n   v=0\n   o=bell 53655765 2353687637 IN IP4 128.3.4.5\n   c=IN IP4 135.180.144.94\n\
    \   m=audio 3456 RTP/AVP 0 3 4 5\n   Clients wishing to authenticate requests\
    \ MUST construct the portion\n   of the message below the Authorization header\
    \ using a canonical form.\n   This allows a proxy to parse the message, take it\
    \ apart, and\n   reconstruct it, without causing an authentication failure due\
    \ to\n   extra white space, for example. Canonical form consists of the\n   following\
    \ rules:\n        o  No short form header fields\n        o  Header field names\
    \ are capitalized as shown in this document\n        o  No white space between\
    \ the header name and the colon\n        o  A single space after the colon\n \
    \       o  Line termination with a CRLF\n        o  No line folding\n        o\
    \  No comma separated lists of header values; each must appear\n          as a\
    \ separate header\n        o  Only a single SP between tokens, between tokens\
    \ and quoted\n          strings, and between quoted strings; no SP after last\
    \ token or\n          quoted string\n        o  No LWS between tokens and separators,\
    \ except as described\n          above for after the colon in header fields\n\
    \   Note that if a message is encrypted and authenticated using a digital\n  \
    \ signature, when the message is generated encryption is performed\n   before\
    \ the digital signature is generated. On receipt, the digital\n   signature is\
    \ checked before decryption.\n   A client MAY require that a server sign its response\
    \ by including a\n   Require: org.ietf.sip.signed-response request header field.\
    \ The\n   client indicates the desired authentication method via the WWW-\n  \
    \ Authenticate header.\n   The correct behavior in handling unauthenticated responses\
    \ to a\n   request that requires authenticated responses is described in section\n\
    \   13.2.1.\n"
- title: 13.2.1 Trusting responses
  contents:
  - "13.2.1 Trusting responses\n   There is the possibility that an eavesdropper listens\
    \ to requests and\n   then injects unauthenticated responses that terminate, redirect\
    \ or\n   otherwise interfere with a call. (Even encrypted requests contain\n \
    \  enough information to fake a response.)\n   Clients need to be particularly\
    \ careful with 3xx redirection\n   responses.  Thus a client receiving, for example,\
    \ a 301 (Moved\n   Permanently) which was not authenticated when the public key\
    \ of the\n   called user agent is known to the client, and authentication was\n\
    \   requested in the request SHOULD be treated as suspicious. The correct\n  \
    \ behavior in such a case would be for the called-user to form a dated\n   response\
    \ containing the Contact field to be used, to sign it, and\n   give this signed\
    \ stub response to the proxy that will provide the\n   redirection. Thus the response\
    \ can be authenticated correctly. A\n   client SHOULD NOT automatically redirect\
    \ such a request to the new\n   location without alerting the user to the authentication\
    \ failure\n   before doing so.\n   Another problem might be responses such as\
    \ 6xx failure responses\n   which would simply terminate a search, or \"4xx\"\
    \ and \"5xx\" response\n   failures.\n   If TCP is being used, a proxy SHOULD\
    \ treat 4xx and 5xx responses as\n   valid, as they will not terminate a search.\
    \ However, fake 6xx\n   responses from a rogue proxy terminate a search incorrectly.\
    \ 6xx\n   responses SHOULD be authenticated if requested by the client, and\n\
    \   failure to do so SHOULD cause such a client to ignore the 6xx\n   response\
    \ and continue a search.\n   With UDP, the same problem with 6xx responses exists,\
    \ but also an\n   active eavesdropper can generate 4xx and 5xx responses that\
    \ might\n   cause a proxy or client to believe a failure occurred when in fact\
    \ it\n   did not. Typically 4xx and 5xx responses will not be signed by the\n\
    \   called user agent, and so there is no simple way to detect these\n   rogue\
    \ responses. This problem is best prevented by using hop-by-hop\n   encryption\
    \ of the SIP request, which removes any additional problems\n   that UDP might\
    \ have over TCP.\n   These attacks are prevented by having the client require\
    \ response\n   authentication and dropping unauthenticated responses. A server\
    \ user\n   agent that cannot perform response authentication responds using the\n\
    \   normal Require response of 420 (Bad Extension).\n"
- title: 13.3 Callee Privacy
  contents:
  - "13.3 Callee Privacy\n   User location and SIP-initiated calls can violate a callee's\
    \ privacy.\n   An implementation SHOULD be able to restrict, on a per-user basis,\n\
    \   what kind of location and availability information is given out to\n   certain\
    \ classes of callers.\n"
- title: 13.4 Known Security Problems
  contents:
  - "13.4 Known Security Problems\n   With either TCP or UDP, a denial of service\
    \ attack exists by a rogue\n   proxy sending 6xx responses. Although a client\
    \ SHOULD choose to\n   ignore such responses if it requested authentication, a\
    \ proxy cannot\n   do so. It is obliged to forward the 6xx response back to the\
    \ client.\n   The client can then ignore the response, but if it repeats the\n\
    \   request it will probably reach the same rogue proxy again, and the\n   process\
    \ will repeat.\n"
- title: 14 SIP Authentication using HTTP Basic and Digest Schemes
  contents:
  - "14 SIP Authentication using HTTP Basic and Digest Schemes\n   SIP implementations\
    \ MAY use HTTP's basic and digest authentication\n   mechanisms to provide a rudimentary\
    \ form of security. This section\n   overviews usage of these mechanisms in SIP.\
    \ The basic operation is\n   almost completely identical to that for HTTP [36].\
    \ This section\n   outlines this operation, pointing to [36] for details, and\
    \ noting the\n   differences when used in SIP.\n"
- title: 14.1 Framework
  contents:
  - "14.1 Framework\n   The framework for SIP authentication parallels that for HTTP\
    \ [36]. In\n   particular, the BNF for auth-scheme, auth-param, challenge, realm,\n\
    \   realm-value, and credentials is identical. The 401 response is used\n   by\
    \ user agent servers in SIP to challenge the authorization of a user\n   agent\
    \ client. Additionally, registrars and redirect servers MAY make\n   use of 401\
    \ responses for authorization, but proxies MUST NOT, and\n   instead MAY use the\
    \ 407 response. The requirements for inclusion of\n   the Proxy-Authenticate,\
    \ Proxy-Authorization, WWW-Authenticate, and\n   Authorization in the various\
    \ messages is identical to [36].\n   Since SIP does not have the concept of a\
    \ canonical root URL, the\n   notion of protections spaces are interpreted differently\
    \ for SIP. The\n   realm is a protection domain for all SIP URIs with the same\
    \ value for\n   the userinfo, host and port part of the SIP Request-URI. For example:\n\
    \      INVITE sip:alice.wonderland@example.com SIP/2.0\n      WWW-Authenticate:\
    \  Basic realm=\"business\"\n   and\n      INVITE sip:aw@example.com SIP/2.0\n\
    \      WWW-Authenticate: Basic realm=\"business\"\n   define different protection\
    \ realms according to this rule.\n   When a UAC resubmits a request with its credentials\
    \ after receiving a\n   401 or 407 response, it MUST increment the CSeq header\
    \ field as it\n   would normally do when sending an updated request.\n"
- title: 14.2 Basic Authentication
  contents:
  - "14.2 Basic Authentication\n   The rules for basic authentication follow those\
    \ defined in [36], but\n   with the words \"origin server\" replaced with \"user\
    \ agent server,\n   redirect server , or registrar\".\n   Since SIP URIs are not\
    \ hierarchical, the paragraph in [36] that\n   states that \"all paths at or deeper\
    \ than the depth of the last\n   symbolic element in the path field of the Request-URI\
    \ also are within\n   the protection space specified by the Basic realm value\
    \ of the\n   current challenge\" does not apply for SIP. SIP clients MAY\n   preemptively\
    \ send the corresponding Authorization header with\n   requests for SIP URIs within\
    \ the same protection realm (as defined\n   above) without receipt of another\
    \ challenge from the server.\n"
- title: 14.3 Digest Authentication
  contents:
  - "14.3 Digest Authentication\n   The rules for digest authentication follow those\
    \ defined in [36],\n   with \"HTTP 1.1\" replaced by \"SIP/2.0\" in addition to\
    \ the following\n   differences:\n        1.   The URI included in the challenge\
    \ has the following BNF:\n             URI  =  SIP-URL\n        2.   The BNF for\
    \ digest-uri-value is:\n             digest-uri-value  =  Request-URI ; a defined\
    \ in Section\n             4.3\n        3.   The example procedure for choosing\
    \ a nonce based on Etag\n             does not work for SIP.\n        4.   The\
    \ Authentication-Info and Proxy-Authentication-Info\n             fields are not\
    \ used in SIP.\n        5.   The text in [36] regarding cache operation does not\
    \ apply\n             to SIP.\n        6.   [36] requires that a server check\
    \ that the URI in the\n             request line, and the URI included in the\
    \ Authorization\n             header, point to the same resource. In a SIP context,\
    \ these\n             two URI's may actually refer to different users, due to\n\
    \             forwarding at some proxy. Therefore, in SIP, a server MAY\n    \
    \         check that the request-uri in the Authorization header\n           \
    \  corresponds to a user that the server is willing to accept\n             forwarded\
    \ or direct calls for.\n"
- title: 14.4 Proxy-Authentication
  contents:
  - "14.4 Proxy-Authentication\n   The use of the Proxy-Authentication and Proxy-Authorization\
    \ parallel\n   that as described in [36], with one difference. Proxies MUST NOT\
    \ add\n   the Proxy-Authorization header. 407 responses MUST be forwarded\n  \
    \ upstream towards the client following the procedures for any other\n   response.\
    \ It is the client's responsibility to add the Proxy-\n   Authorization header\
    \ containing credentials for the proxy which has\n   asked for authentication.\n\
    \        If a proxy were to resubmit a request with a Proxy-\n        Authorization\
    \ header field, it would need to increment the\n        CSeq in the new request.\
    \ However, this would mean that the\n        UAC which submitted the original\
    \ request would discard a\n        response from the UAS, as the CSeq value would\
    \ be\n        different.\n   See sections 6.26 and 6.27 for additional information\
    \ on usage of\n   these fields as they apply to SIP.\n"
- title: 15 SIP Security Using PGP
  contents:
  - '15 SIP Security Using PGP

    '
- title: 15.1 PGP Authentication Scheme
  contents:
  - "15.1 PGP Authentication Scheme\n   The \"pgp\" authentication scheme is based\
    \ on the model that the client\n   authenticates itself with a request signed\
    \ with the client's private\n   key. The server can then ascertain the origin\
    \ of the request if it\n   has access to the public key, preferably signed by\
    \ a trusted third\n   party.\n"
- title: 15.1.1 The WWW-Authenticate Response Header
  contents:
  - "15.1.1 The WWW-Authenticate Response Header\n        WWW-Authenticate =  \"WWW-Authenticate\"\
    \ \":\" \"pgp\" pgp-challenge\n        pgp-challenge    =  * (\";\" pgp-params\
    \ )\n        pgp-params       =  realm | pgp-version | pgp-algorithm | nonce\n\
    \        realm            =  \"realm\" \"=\" realm-value\n        realm-value\
    \      =  quoted-string\n        pgp-version      =  \"version\" \"=\"\n     \
    \                        <\"> digit *( \".\" digit ) *letter <\">\n        pgp-algorithm\
    \    =  \"algorithm\" \"=\" ( \"md5\" | \"sha1\" | token )\n        nonce    \
    \        =  \"nonce\" \"=\" nonce-value\n        nonce-value      =  quoted-string\n\
    \   The meanings of the values of the parameters used above are as\n   follows:\n\
    \   realm: A string to be displayed to users so they know which identity\n   \
    \     to use. This string SHOULD contain at least the name of the host\n     \
    \   performing the authentication and MAY additionally indicate the\n        collection\
    \ of users who might have access. An example might be \"\n        Users with call-out\
    \ privileges \".\n   pgp-algorithm: The value of this parameter indicates the\
    \ PGP message\n        integrity check (MIC) to be used to produce the signature.\
    \ If\n        this not present it is assumed to be \"md5\". The currently\n  \
    \      defined values are \"md5\" for the MD5 checksum, and \"sha1\" for\n   \
    \     the SHA.1 algorithm.\n   pgp-version: The version of PGP that the client\
    \ MUST use. Common\n        values are \"2.6.2\" and \"5.0\". The default is 5.0.\n\
    \   nonce: A server-specified data string which should be uniquely\n        generated\
    \ each time a 401 response is made. It is RECOMMENDED\n        that this string\
    \ be base64 or hexadecimal data.  Specifically,\n        since the string is passed\
    \ in the header lines as a quoted\n        string, the double-quote character\
    \ is not allowed. The contents\n        of the nonce are implementation dependent.\
    \ The quality of the\n        implementation depends on a good choice. Since the\
    \ nonce is used\n        only to prevent replay attacks and is signed, a time\
    \ stamp in\n        units convenient to the server is sufficient.\n        Replay\
    \ attacks within the duration of the call setup are of\n        limited interest,\
    \ so that timestamps with a resolution of a\n        few seconds are often should\
    \ be sufficient. In that case,\n        the server does not have to keep a record\
    \ of the nonces.\n   Example:\n   WWW-Authenticate: pgp ;version=\"5.0\"\n   \
    \  ;realm=\"Your Startrek identity, please\" ;algorithm=md5\n     ;nonce=\"913082051\"\
    \n"
- title: 15.1.2 The Authorization Request Header
  contents:
  - "15.1.2 The Authorization Request Header\n   The client is expected to retry the\
    \ request, passing an Authorization\n   header line, which is defined as follows.\n\
    \        Authorization  =  \"Authorization\" \":\" \"pgp\" *( \";\" pgp-response\
    \ )\n        pgp-response   =  realm | pgp-version | pgp-signature\n         \
    \                 | signed-by | nonce\n        pgp-signature  =  \"signature\"\
    \ \"=\" quoted-string\n        signed-by      =  \"signed-by\" \"=\" <\"> URI\
    \ <\">\n   The client MUST increment the CSeq header before resubmitting the\n\
    \   request. The signature MUST correspond to the From header of the\n   request\
    \ unless the signed-by parameter is provided.\n   pgp-signature: The PGP ASCII-armored\
    \ signature [33], as it appears\n        between the \"BEGIN PGP MESSAGE\" and\
    \ \"END PGP MESSAGE\"\n        delimiters, without the version indication. The\
    \ signature is\n        included without any linebreaks.\n   The signature is\
    \ computed across the nonce (if present), request\n   method, request version\
    \ and header fields following the Authorization\n   header and the message body,\
    \ in the same order as they appear in the\n   message. The request method and\
    \ version are prepended to the header\n   fields without any white space. The\
    \ signature is computed across the\n   headers as sent, and the terminating CRLF.\
    \ The CRLF following the\n   Authorization header is NOT included in the signature.\n\
    \   A server MAY be configured not to generate nonces only if replay\n   attacks\
    \ are not a concern.\n        Not generating nonces avoids the additional set\
    \ of request,\n        401 response and possibly ACK messages and reduces delay\
    \ by\n        one round-trip time.\n        Using the ASCII-armored version is\
    \ about 25% less space-\n        efficient than including the binary signature,\
    \ but it is\n        significantly easier for the receiver to piece together.\n\
    \        Versions of the PGP program always include the full\n        (compressed)\
    \ signed text in their output unless ASCII-\n        armored mode ( -sta ) is\
    \ specified.  Typical signatures are\n        about 200 bytes long. -- The PGP\
    \ signature mechanism allows\n        the client to simply pass the request to\
    \ an external PGP\n        program. This relies on the requirement that proxy\
    \ servers\n        are not allowed to reorder or change header fields.\n   realm:\
    \ The realm is copied from the corresponding WWW-Authenticate\n        header\
    \ field parameter.\n   signed-by: If and only if the request was not signed by\
    \ the entity\n        listed in the From header, the signed-by header indicates\
    \ the\n        name of the signing entity, expressed as a URI.\n   Receivers of\
    \ signed SIP messages SHOULD discard any end-to-end header\n   fields above the\
    \ Authorization header, as they may have been\n   maliciously added en route by\
    \ a proxy.\n   Example:\n   Authorization: pgp version=\"5.0\"\n     ;realm=\"\
    Your Startrek identity, please\"\n     ;nonce=\"913082051\"\n     ;signature=\"\
    iQB1AwUBNNJiUaYBnHmiiQh1AQFYsgL/Wt3dk6TWK81/b0gcNDf\n     VAUGU4rhEBW972IPxFSOZ94L1qhCLInTPaqhHFw1cb3lB01rA0RhpV4t5yCdUt\n\
    \     SRYBSkOK29o5e1KlFeW23EzYPVUm2TlDAhbcjbMdfC+KLFX\n     =aIrx\"\n"
- title: 15.2 PGP Encryption Scheme
  contents:
  - "15.2 PGP Encryption Scheme\n   The PGP encryption scheme uses the following syntax:\n\
    \        Encryption    =  \"Encryption\" \":\" \"pgp\" pgp-eparams\n        pgp-eparams\
    \   =  1# ( pgp-version | pgp-encoding )\n        pgp-encoding  =  \"encoding\"\
    \ \"=\" \"ascii\" | token\n   encoding: Describes the encoding or \"armor\" used\
    \ by PGP. The value\n        \"ascii\" refers to the standard PGP ASCII armor,\
    \ without the\n        lines containing \"BEGIN PGP MESSAGE\" and \"END PGP MESSAGE\"\
    \ and\n        without the version identifier. By default, the encrypted part\n\
    \        is included as binary.\n   Example:\n   Encryption: pgp version=\"2.6.2\"\
    , encoding=\"ascii\"\n"
- title: 15.3 Response-Key Header Field for PGP
  contents:
  - "15.3 Response-Key Header Field for PGP\n        Response-Key  =  \"Response-Key\"\
    \ \":\" \"pgp\" pgp-eparams\n        pgp-eparams   =  1# ( pgp-version | pgp-encoding\
    \ | pgp-key)\n        pgp-key       =  \"key\" \"=\" quoted-string\n   If ASCII\
    \ encoding has been requested via the encoding parameter, the\n   key parameter\
    \ contains the user's public key as extracted from the\n   pgp key ring with the\
    \ \"pgp -kxa user \".\n   Example:\n   Response-Key: pgp version=\"2.6.2\", encoding=\"\
    ascii\",\n     key=\"mQBtAzNWHNYAAAEDAL7QvAdK2utY05wuUG+ItYK5tCF8HNJM60sU4rLaV+eUnkMk\n\
    \     mOmJWtc2wXcZx1XaXb2lkydTQOesrUR75IwNXBuZXPEIMThEa5WLsT7VLme7njnx\n     sE86SgWmAZx5ookIdQAFEbQxSGVubmluZyBTY2h1bHpyaW5uZSA8c2NodWx6cmlu\n\
    \     bmVAY3MuY29sdW1iaWEuZWR1Pg==\n     =+y19\"\n"
- title: 16 Examples
  contents:
  - "16 Examples\n   In the following examples, we often omit the message body and\
    \ the\n   corresponding Content-Length and Content-Type headers for brevity.\n"
- title: 16.1 Registration
  contents:
  - "16.1 Registration\n   A user at host saturn.bell-tel.com registers on start-up,\
    \ via\n   multicast, with the local SIP server named bell-tel.com. In the\n  \
    \ example, the user agent on saturn expects to receive SIP requests on\n   UDP\
    \ port 3890.\n   C->S: REGISTER sip:bell-tel.com SIP/2.0\n         Via: SIP/2.0/UDP\
    \ saturn.bell-tel.com\n         From: sip:watson@bell-tel.com\n         To: sip:watson@bell-tel.com\n\
    \         Call-ID: 70710@saturn.bell-tel.com\n         CSeq: 1 REGISTER\n    \
    \     Contact: <sip:watson@saturn.bell-tel.com:3890;transport=udp>\n         Expires:\
    \ 7200\n   The registration expires after two hours. Any future invitations for\n\
    \   watson@bell-tel.com arriving at sip.bell-tel.com will now be\n   redirected\
    \ to watson@saturn.bell-tel.com, UDP port 3890.\n   If Watson wants to be reached\
    \ elsewhere, say, an on-line service he\n   uses while traveling, he updates his\
    \ reservation after first\n   cancelling any existing locations:\n   C->S: REGISTER\
    \ sip:bell-tel.com SIP/2.0\n         Via: SIP/2.0/UDP saturn.bell-tel.com\n  \
    \       From: sip:watson@bell-tel.com\n         To: sip:watson@bell-tel.com\n\
    \         Call-ID: 70710@saturn.bell-tel.com\n         CSeq: 2 REGISTER\n    \
    \     Contact: *\n         Expires: 0\n   C->S: REGISTER sip:bell-tel.com SIP/2.0\n\
    \         Via: SIP/2.0/UDP saturn.bell-tel.com\n         From: sip:watson@bell-tel.com\n\
    \         To: sip:watson@bell-tel.com\n         Call-ID: 70710@saturn.bell-tel.com\n\
    \         CSeq: 3 REGISTER\n         Contact: sip:tawatson@example.com\n   Now,\
    \ the server will forward any request for Watson to the server at\n   example.com,\
    \ using the Request-URI tawatson@example.com. For the\n   server at example.com\
    \ to reach Watson, he will need to send a\n   REGISTER there, or inform the server\
    \ of his current location through\n   some other means.\n   It is possible to\
    \ use third-party registration. Here, the secretary\n   jon.diligent registers\
    \ his boss, T. Watson:\n   C->S: REGISTER sip:bell-tel.com SIP/2.0\n         Via:\
    \ SIP/2.0/UDP pluto.bell-tel.com\n         From: sip:jon.diligent@bell-tel.com\n\
    \         To: sip:watson@bell-tel.com\n         Call-ID: 17320@pluto.bell-tel.com\n\
    \         CSeq: 1 REGISTER\n         Contact: sip:tawatson@example.com\n   The\
    \ request could be sent to either the registrar at bell-tel.com or\n   the server\
    \ at example.com. In the latter case, the server at\n   example.com would proxy\
    \ the request to the address indicated in the\n   Request-URI. Then, Max-Forwards\
    \ header could be used to restrict the\n   registration to that server.\n"
- title: 16.2 Invitation to a Multicast Conference
  contents:
  - "16.2 Invitation to a Multicast Conference\n   The first example invites schooler@vlsi.cs.caltech.edu\
    \ to a multicast\n   session. All examples use the Session Description Protocol\
    \ (SDP) (RFC\n   2327 [6]) as the session description format.\n"
- title: 16.2.1 Request
  contents:
  - "16.2.1 Request\n   C->S: INVITE sip:schooler@cs.caltech.edu SIP/2.0\n       \
    \  Via: SIP/2.0/UDP csvax.cs.caltech.edu;branch=8348\n           ;maddr=239.128.16.254;ttl=16\n\
    \         Via: SIP/2.0/UDP north.east.isi.edu\n         From: Mark Handley <sip:mjh@isi.edu>\n\
    \         To: Eve Schooler <sip:schooler@caltech.edu>\n         Call-ID: 2963313058@north.east.isi.edu\n\
    \         CSeq: 1 INVITE\n         Subject: SIP will be discussed, too\n     \
    \    Content-Type: application/sdp\n         Content-Length: 187\n         v=0\n\
    \         o=user1 53655765 2353687637 IN IP4 128.3.4.5\n         s=Mbone Audio\n\
    \         i=Discussion of Mbone Engineering Issues\n         e=mbone@somewhere.com\n\
    \         c=IN IP4 224.2.0.1/127\n         t=0 0\n         m=audio 3456 RTP/AVP\
    \ 0\n   The From request header above states that the request was initiated\n\
    \   by mjh@isi.edu and addressed to schooler@caltech.edu (From header\n   fields).\
    \ The Via fields list the hosts along the path from invitation\n   initiator (the\
    \ last element of the list) towards the callee. In the\n   example above, the\
    \ message was last multicast to the administratively\n   scoped group 239.128.16.254\
    \ with a ttl of 16 from the host\n   csvax.cs.caltech.edu. The second Via header\
    \ field indicates that it\n   was originally sent from the host north.east.isi.edu.\
    \ The Request-URI\n   indicates that the request is currently being being addressed\
    \ to\n   schooler@cs.caltech.edu, the local address that csvax looked up for\n\
    \   the callee.\n   In this case, the session description is using the Session\n\
    \   Description Protocol (SDP), as stated in the Content-Type header.\n   The\
    \ header is terminated by an empty line and is followed by a\n   message body\
    \ containing the session description.\n"
- title: 16.2.2 Response
  contents:
  - "16.2.2 Response\n   The called user agent, directly or indirectly through proxy\
    \ servers,\n   indicates that it is alerting (\"ringing\") the called party:\n\
    \   S->C: SIP/2.0 180 Ringing\n         Via: SIP/2.0/UDP csvax.cs.caltech.edu;branch=8348\n\
    \           ;maddr=239.128.16.254;ttl=16\n         Via: SIP/2.0/UDP north.east.isi.edu\n\
    \         From: Mark Handley <sip:mjh@isi.edu>\n         To: Eve Schooler <sip:schooler@caltech.edu>\
    \ ;tag=9883472\n         Call-ID: 2963313058@north.east.isi.edu\n         CSeq:\
    \ 1 INVITE\n   A sample response to the invitation is given below. The first line\
    \ of\n   the response states the SIP version number, that it is a 200 (OK)\n \
    \  response, which means the request was successful. The Via headers are\n   taken\
    \ from the request, and entries are removed hop by hop as the\n   response retraces\
    \ the path of the request. A new authentication field\n   MAY be added by the\
    \ invited user's agent if required. The Call-ID is\n   taken directly from the\
    \ original request, along with the remaining\n   fields of the request message.\
    \ The original sense of From field is\n   preserved (i.e., it is the session initiator).\n\
    \   In addition, the Contact header gives details of the host where the\n   user\
    \ was located, or alternatively the relevant proxy contact point\n   which should\
    \ be reachable from the caller's host.\n   S->C: SIP/2.0 200 OK\n         Via:\
    \ SIP/2.0/UDP csvax.cs.caltech.edu;branch=8348\n           ;maddr=239.128.16.254;ttl=16\n\
    \         Via: SIP/2.0/UDP north.east.isi.edu\n         From: Mark Handley <sip:mjh@isi.edu>\n\
    \         To: Eve Schooler <sip:schooler@caltech.edu> ;tag=9883472\n         Call-ID:\
    \ 2963313058@north.east.isi.edu\n         CSeq: 1 INVITE\n         Contact: sip:es@jove.cs.caltech.edu\n\
    \   The caller confirms the invitation by sending an ACK request to the\n   location\
    \ named in the Contact header:\n   C->S: ACK sip:es@jove.cs.caltech.edu SIP/2.0\n\
    \         Via: SIP/2.0/UDP north.east.isi.edu\n         From: Mark Handley <sip:mjh@isi.edu>\n\
    \         To: Eve Schooler <sip:schooler@caltech.edu> ;tag=9883472\n         Call-ID:\
    \ 2963313058@north.east.isi.edu\n         CSeq: 1 ACK\n"
- title: 16.3 Two-party Call
  contents:
  - "16.3 Two-party Call\n   For two-party Internet phone calls, the response must\
    \ contain a\n   description of where to send the data. In the example below, Bell\n\
    \   calls Watson. Bell indicates that he can receive RTP audio codings 0\n   (PCMU),\
    \ 3 (GSM), 4 (G.723) and 5 (DVI4).\n   C->S: INVITE sip:watson@boston.bell-tel.com\
    \ SIP/2.0\n         Via: SIP/2.0/UDP kton.bell-tel.com\n         From: A. Bell\
    \ <sip:a.g.bell@bell-tel.com>\n         To: T. Watson <sip:watson@bell-tel.com>\n\
    \         Call-ID: 3298420296@kton.bell-tel.com\n         CSeq: 1 INVITE\n   \
    \      Subject: Mr. Watson, come here.\n         Content-Type: application/sdp\n\
    \         Content-Length: ...\n         v=0\n         o=bell 53655765 2353687637\
    \ IN IP4 128.3.4.5\n         s=Mr. Watson, come here.\n         c=IN IP4 kton.bell-tel.com\n\
    \         m=audio 3456 RTP/AVP 0 3 4 5\n   S->C: SIP/2.0 100 Trying\n        \
    \ Via: SIP/2.0/UDP kton.bell-tel.com\n         From: A. Bell <sip:a.g.bell@bell-tel.com>\n\
    \         To: T. Watson <sip:watson@bell-tel.com> ;tag=37462311\n         Call-ID:\
    \ 3298420296@kton.bell-tel.com\n         CSeq: 1 INVITE\n         Content-Length:\
    \ 0\n   S->C: SIP/2.0 180 Ringing\n         Via: SIP/2.0/UDP kton.bell-tel.com\n\
    \         From: A. Bell <sip:a.g.bell@bell-tel.com>\n         To: T. Watson <sip:watson@bell-tel.com>\
    \ ;tag=37462311\n         Call-ID: 3298420296@kton.bell-tel.com\n         CSeq:\
    \ 1 INVITE\n         Content-Length: 0\n   S->C: SIP/2.0 182 Queued, 2 callers\
    \ ahead\n         Via: SIP/2.0/UDP kton.bell-tel.com\n         From: A. Bell <sip:a.g.bell@bell-tel.com>\n\
    \         To: T. Watson <sip:watson@bell-tel.com> ;tag=37462311\n         Call-ID:\
    \ 3298420296@kton.bell-tel.com\n         CSeq: 1 INVITE\n         Content-Length:\
    \ 0\n   S->C: SIP/2.0 182 Queued, 1 caller ahead\n         Via: SIP/2.0/UDP kton.bell-tel.com\n\
    \         From: A. Bell <sip:a.g.bell@bell-tel.com>\n         To: T. Watson <sip:watson@bell-tel.com>\
    \ ;tag=37462311\n         Call-ID: 3298420296@kton.bell-tel.com\n         CSeq:\
    \ 1 INVITE\n         Content-Length: 0\n   S->C: SIP/2.0 200 OK\n         Via:\
    \ SIP/2.0/UDP kton.bell-tel.com\n         From: A. Bell <sip:a.g.bell@bell-tel.com>\n\
    \         To: <sip:watson@bell-tel.com> ;tag=37462311\n         Call-ID: 3298420296@kton.bell-tel.com\n\
    \         CSeq: 1 INVITE\n         Contact: sip:watson@boston.bell-tel.com\n \
    \        Content-Type: application/sdp\n         Content-Length: ...\n       \
    \  v=0\n         o=watson 4858949 4858949 IN IP4 192.1.2.3\n         s=I'm on\
    \ my way\n         c=IN IP4 boston.bell-tel.com\n         m=audio 5004 RTP/AVP\
    \ 0 3\n   The example illustrates the use of informational status responses.\n\
    \   Here, the reception of the call is confirmed immediately (100), then,\n  \
    \ possibly after some database mapping delay, the call rings (180) and\n   is\
    \ then queued, with periodic status updates.\n   Watson can only receive PCMU\
    \ and GSM. Note that Watson's list of\n   codecs may or may not be a subset of\
    \ the one offered by Bell, as each\n   party indicates the data types it is willing\
    \ to receive. Watson will\n   send audio data to port 3456 at c.bell-tel.com,\
    \ Bell will send to\n   port 5004 at boston.bell-tel.com.\n   By default, the\
    \ media session is one RTP session. Watson will receive\n   RTCP packets on port\
    \ 5005, while Bell will receive them on port 3457.\n   Since the two sides have\
    \ agreed on the set of media, Bell confirms\n   the call without enclosing another\
    \ session description:\n   C->S: ACK sip:watson@boston.bell-tel.com SIP/2.0\n\
    \         Via: SIP/2.0/UDP kton.bell-tel.com\n         From: A. Bell <sip:a.g.bell@bell-tel.com>\n\
    \         To: T. Watson <sip:watson@bell-tel.com> ;tag=37462311\n         Call-ID:\
    \ 3298420296@kton.bell-tel.com\n         CSeq: 1 ACK\n"
- title: 16.4 Terminating a Call
  contents:
  - "16.4 Terminating a Call\n   To terminate a call, caller or callee can send a\
    \ BYE request:\n   C->S: BYE sip:watson@boston.bell-tel.com SIP/2.0\n        \
    \ Via: SIP/2.0/UDP kton.bell-tel.com\n         From: A. Bell <sip:a.g.bell@bell-tel.com>\n\
    \         To: T. A. Watson <sip:watson@bell-tel.com> ;tag=37462311\n         Call-ID:\
    \ 3298420296@kton.bell-tel.com\n         CSeq: 2 BYE\n   If the callee wants to\
    \ abort the call, it simply reverses the To and\n   From fields. Note that it\
    \ is unlikely that a BYE from the callee will\n   traverse the same proxies as\
    \ the original INVITE.\n"
- title: 16.5 Forking Proxy
  contents:
  - "16.5 Forking Proxy\n   In this example, Bell (a.g.bell@bell-tel.com) (C), currently\
    \ seated\n   at host c.bell-tel.com wants to call Watson (t.watson@ieee.org).\
    \ At\n   the time of the call, Watson is logged in at two workstations,\n   t.watson@x.bell-tel.com\
    \ (X) and watson@y.bell-tel.com (Y), and has\n   registered with the IEEE proxy\
    \ server (P) called sip.ieee.org. The\n   IEEE server also has a registration\
    \ for the home machine of Watson,\n   at watson@h.bell-tel.com (H), as well as\
    \ a permanent registration at\n   watson@acm.org (A). For brevity, the examples\
    \ omit the session\n   description and Via header fields.\n   Bell's user agent\
    \ sends the invitation to the SIP server for the\n   ieee.org domain:\n   C->P:\
    \ INVITE sip:t.watson@ieee.org SIP/2.0\n         Via:     SIP/2.0/UDP c.bell-tel.com\n\
    \         From:    A. Bell <sip:a.g.bell@bell-tel.com>\n         To:      T. Watson\
    \ <sip:t.watson@ieee.org>\n         Call-ID: 31415@c.bell-tel.com\n         CSeq:\
    \    1 INVITE\n   The SIP server at ieee.org tries the four addresses in parallel.\
    \  It\n   sends the following message to the home machine:\n   P->H: INVITE sip:watson@h.bell-tel.com\
    \ SIP/2.0\n         Via:     SIP/2.0/UDP sip.ieee.org ;branch=1\n         Via:\
    \     SIP/2.0/UDP c.bell-tel.com\n         From:    A. Bell <sip:a.g.bell@bell-tel.com>\n\
    \         To:      T. Watson <sip:t.watson@ieee.org>\n         Call-ID: 31415@c.bell-tel.com\n\
    \         CSeq:    1 INVITE\n   This request immediately yields a 404 (Not Found)\
    \ response, since\n   Watson is not currently logged in at home:\n   H->P: SIP/2.0\
    \ 404 Not Found\n         Via:     SIP/2.0/UDP sip.ieee.org ;branch=1\n      \
    \   Via:     SIP/2.0/UDP c.bell-tel.com\n         From:    A. Bell <sip:a.g.bell@bell-tel.com>\n\
    \         To:      T. Watson <sip:t.watson@ieee.org>;tag=87454273\n         Call-ID:\
    \ 31415@c.bell-tel.com\n         CSeq:    1 INVITE\n   The proxy ACKs the response\
    \ so that host H can stop retransmitting\n   it:\n   P->H: ACK sip:watson@h.bell-tel.com\
    \ SIP/2.0\n         Via:     SIP/2.0/UDP sip.ieee.org ;branch=1\n         From:\
    \    A. Bell <sip:a.g.bell@bell-tel.com>\n         To:      T. Watson <sip:t.watson@ieee.org>;tag=87454273\n\
    \         Call-ID: 31415@c.bell-tel.com\n         CSeq:    1 ACK\n   Also, P attempts\
    \ to reach Watson through the ACM server:\n   P->A: INVITE sip:watson@acm.org\
    \ SIP/2.0\n         Via:     SIP/2.0/UDP sip.ieee.org ;branch=2\n         Via:\
    \     SIP/2.0/UDP c.bell-tel.com\n         From:    A. Bell <sip:a.g.bell@bell-tel.com>\n\
    \         To:      T. Watson <sip:t.watson@ieee.org>\n         Call-ID: 31415@c.bell-tel.com\n\
    \         CSeq:    1 INVITE\n   In parallel, the next attempt proceeds, with an\
    \ INVITE to X and Y:\n   P->X: INVITE sip:t.watson@x.bell-tel.com SIP/2.0\n  \
    \       Via:     SIP/2.0/UDP sip.ieee.org ;branch=3\n         Via:     SIP/2.0/UDP\
    \ c.bell-tel.com\n         From:    A. Bell <sip:a.g.bell@bell-tel.com>\n    \
    \     To:      T. Watson <sip:t.watson@ieee.org>\n         Call-ID: 31415@c.bell-tel.com\n\
    \         CSeq:    1 INVITE\n   P->Y: INVITE sip:watson@y.bell-tel.com SIP/2.0\n\
    \         Via:     SIP/2.0/UDP sip.ieee.org ;branch=4\n         Via:     SIP/2.0/UDP\
    \ c.bell-tel.com\n         From:    A. Bell <sip:a.g.bell@bell-tel.com>\n    \
    \     To:      T. Watson <sip:t.watson@ieee.org>\n         Call-ID: 31415@c.bell-tel.com\n\
    \         CSeq:    1 INVITE\n   As it happens, both Watson at X and a colleague\
    \ in the other lab at\n   host Y hear the phones ringing and pick up. Both X and\
    \ Y return 200s\n   via the proxy to Bell.\n   X->P: SIP/2.0 200 OK\n        \
    \ Via:      SIP/2.0/UDP sip.ieee.org ;branch=3\n         Via:      SIP/2.0/UDP\
    \ c.bell-tel.com\n         From:     A. Bell <sip:a.g.bell@bell-tel.com>\n   \
    \      To:       T. Watson <sip:t.watson@ieee.org> ;tag=192137601\n         Call-ID:\
    \  31415@c.bell-tel.com\n         CSeq:     1 INVITE\n         Contact:  sip:t.watson@x.bell-tel.com\n\
    \   Y->P: SIP/2.0 200 OK\n         Via:      SIP/2.0/UDP sip.ieee.org ;branch=4\n\
    \         Via:      SIP/2.0/UDP c.bell-tel.com\n         Contact:  sip:t.watson@y.bell-tel.com\n\
    \         From:     A. Bell <sip:a.g.bell@bell-tel.com>\n         To:       T.\
    \ Watson <sip:t.watson@ieee.org> ;tag=35253448\n         Call-ID:  31415@c.bell-tel.com\n\
    \         CSeq:     1 INVITE\n   Both responses are forwarded to Bell, using the\
    \ Via information.  At\n   this point, the ACM server is still searching its database.\
    \ P can now\n   cancel this attempt:\n   P->A: CANCEL sip:watson@acm.org SIP/2.0\n\
    \         Via:     SIP/2.0/UDP sip.ieee.org ;branch=2\n         From:    A. Bell\
    \ <sip:a.g.bell@bell-tel.com>\n         To:      T. Watson <sip:t.watson@ieee.org>\n\
    \         Call-ID: 31415@c.bell-tel.com\n         CSeq:    1 CANCEL\n   The ACM\
    \ server gladly stops its neural-network database search and\n   responds with\
    \ a 200. The 200 will not travel any further, since P is\n   the last Via stop.\n\
    \   A->P: SIP/2.0 200 OK\n         Via:     SIP/2.0/UDP sip.ieee.org ;branch=2\n\
    \         From:    A. Bell <sip:a.g.bell@bell-tel.com>\n         To:      T. Watson\
    \ <sip:t.watson@ieee.org>\n         Call-ID: 31415@c.bell-tel.com\n         CSeq:\
    \    1 CANCEL\n   Bell gets the two 200 responses from X and Y in short order.\
    \ Bell's\n   reaction now depends on his software. He can either send an ACK to\n\
    \   both if human intelligence is needed to determine who he wants to\n   talk\
    \ to or he can automatically reject one of the two calls. Here, he\n   acknowledges\
    \ both, separately and directly to the final destination:\n   C->X: ACK sip:t.watson@x.bell-tel.com\
    \ SIP/2.0\n         Via:      SIP/2.0/UDP c.bell-tel.com\n         From:     A.\
    \ Bell <sip:a.g.bell@bell-tel.com>\n         To:       T. Watson <sip:t.watson@ieee.org>;tag=192137601\n\
    \         Call-ID:  31415@c.bell-tel.com\n         CSeq:     1 ACK\n   C->Y: ACK\
    \ sip:watson@y.bell-tel.com SIP/2.0\n         Via:      SIP/2.0/UDP c.bell-tel.com\n\
    \         From:     A. Bell <sip:a.g.bell@bell-tel.com>\n         To:       T.\
    \ Watson <sip:t.watson@ieee.org>;tag=35253448\n         Call-ID:  31415@c.bell-tel.com\n\
    \         CSeq:     1 ACK\n   After a brief discussion between Bell with X and\
    \ Y, it becomes clear\n   that Watson is at X. (Note that this is not a three-way\
    \ call; only\n   Bell can talk to X and Y, but X and Y cannot talk to each other.)\n\
    \   Thus, Bell sends a BYE to Y, which is replied to:\n   C->Y: BYE sip:watson@y.bell-tel.com\
    \ SIP/2.0\n         Via:      SIP/2.0/UDP c.bell-tel.com\n         From:     A.\
    \ Bell <sip:a.g.bell@bell-tel.com>\n         To:       T. Watson <sip:t.watson@ieee.org>;tag=35253448\n\
    \         Call-ID:  31415@c.bell-tel.com\n         CSeq:     2 BYE\n   Y->C: SIP/2.0\
    \ 200 OK\n         Via:      SIP/2.0/UDP c.bell-tel.com\n         From:     A.\
    \ Bell <sip:a.g.bell@bell-tel.com>\n         To:       T. Watson <sip:t.watson@ieee.org>;tag=35253448\n\
    \         Call-ID:  31415@c.bell-tel.com\n         CSeq:     2 BYE\n"
- title: 16.6 Redirects
  contents:
  - "16.6 Redirects\n   Replies with status codes 301 (Moved Permanently) or 302 (Moved\n\
    \   Temporarily) specify another location using the Contact field.\n   Continuing\
    \ our earlier example, the server P at ieee.org decides to\n   redirect rather\
    \ than proxy the request:\n   P->C: SIP/2.0 302 Moved temporarily\n         Via:\
    \     SIP/2.0/UDP c.bell-tel.com\n         From:    A. Bell <sip:a.g.bell@bell-tel.com>\n\
    \         To:      T. Watson <sip:t.watson@ieee.org>;tag=72538263\n         Call-ID:\
    \ 31415@c.bell-tel.com\n         CSeq:    1 INVITE\n         Contact: sip:watson@h.bell-tel.com,\n\
    \                   sip:watson@acm.org, sip:t.watson@x.bell-tel.com,\n       \
    \            sip:watson@y.bell-tel.com\n         CSeq: 1 INVITE\n   As another\
    \ example, assume Alice (A) wants to delegate her calls to\n   Bob (B) while she\
    \ is on vacation until July 29th, 1998. Any calls\n   meant for her will reach\
    \ Bob with Alice's To field, indicating to him\n   what role he is to play. Charlie\
    \ (C) calls Alice (A), whose server\n   returns:\n   A->C: SIP/2.0 302 Moved temporarily\n\
    \         From: Charlie <sip:charlie@caller.com>\n         To: Alice <sip:alice@anywhere.com>\
    \ ;tag=2332462\n         Call-ID: 27182@caller.com\n         Contact: sip:bob@anywhere.com\n\
    \         Expires: Wed, 29 Jul 1998 9:00:00 GMT\n         CSeq: 1 INVITE\n   Charlie\
    \ then sends the following request to the SIP server of the\n   anywhere.com domain.\
    \ Note that the server at anywhere.com forwards\n   the request to Bob based on\
    \ the Request-URI.\n   C->B: INVITE sip:bob@anywhere.com SIP/2.0\n         From:\
    \ sip:charlie@caller.com\n         To: sip:alice@anywhere.com\n         Call-ID:\
    \ 27182@caller.com\n         CSeq: 2 INVITE\n   In the third redirection example,\
    \ we assume that all outgoing\n   requests are directed through a local firewall\
    \ F at caller.com, with\n   Charlie again inviting Alice:\n   C->F: INVITE sip:alice@anywhere.com\
    \ SIP/2.0\n         From: sip:charlie@caller.com\n         To: Alice <sip:alice@anywhere.com>\n\
    \         Call-ID: 27182@caller.com\n         CSeq: 1 INVITE\n   The local firewall\
    \ at caller.com happens to be overloaded and thus\n   redirects the call from\
    \ Charlie to a secondary server S:\n   F->C: SIP/2.0 302 Moved temporarily\n \
    \        From: sip:charlie@caller.com\n         To: Alice <sip:alice@anywhere.com>\n\
    \         Call-ID: 27182@caller.com\n         CSeq: 1 INVITE\n         Contact:\
    \ <sip:alice@anywhere.com:5080;maddr=spare.caller.com>\n   Based on this response,\
    \ Charlie directs the same invitation to the\n   secondary server spare.caller.com\
    \ at port 5080, but maintains the\n   same Request-URI as before:\n   C->S: INVITE\
    \ sip:alice@anywhere.com SIP/2.0\n         From: sip:charlie@caller.com\n    \
    \     To: Alice <sip:alice@anywhere.com>\n         Call-ID: 27182@caller.com\n\
    \         CSeq: 2 INVITE\n"
- title: 16.7 Negotiation
  contents:
  - "16.7 Negotiation\n   An example of a 606 (Not Acceptable) response is:\n   S->C:\
    \ SIP/2.0 606 Not Acceptable\n         From: sip:mjh@isi.edu\n         To: <sip:schooler@cs.caltech.edu>\
    \ ;tag=7434264\n         Call-ID: 14142@north.east.isi.edu\n         CSeq: 1 INVITE\n\
    \         Contact: sip:mjh@north.east.isi.edu\n         Warning: 370 \"Insufficient\
    \ bandwidth (only have ISDN)\",\n           305 \"Incompatible media format\"\
    ,\n           330 \"Multicast not available\"\n         Content-Type: application/sdp\n\
    \         Content-Length: 50\n         v=0\n         s=Let's talk\n         b=CT:128\n\
    \         c=IN IP4 north.east.isi.edu\n         m=audio 3456 RTP/AVP 5 0 7\n \
    \        m=video 2232 RTP/AVP 31\n   In this example, the original request specified\
    \ a bandwidth that was\n   higher than the access link could support, requested\
    \ multicast, and\n   requested a set of media encodings. The response states that\
    \ only 128\n   kb/s is available and that (only) DVI, PCM or LPC audio could be\n\
    \   supported in order of preference.\n   The response also states that multicast\
    \ is not available.  In such a\n   case, it might be appropriate to set up a transcoding\
    \ gateway and\n   re-invite the user.\n"
- title: 16.8 OPTIONS Request
  contents:
  - "16.8 OPTIONS Request\n   A caller Alice can use an OPTIONS request to find out\
    \ the\n   capabilities of a potential callee Bob, without \"ringing\" the\n  \
    \ designated address. Bob returns a description indicating that he is\n   capable\
    \ of receiving audio encodings PCM Ulaw (payload type 0), 1016\n   (payload type\
    \ 1), GSM (payload type 3), and SX7300/8000 (dynamic\n   payload type 99), and\
    \ video encodings H.261 (payload type 31) and\n   H.263 (payload type 34).\n \
    \  C->S: OPTIONS sip:bob@example.com SIP/2.0\n         From: Alice <sip:alice@anywhere.org>\n\
    \         To: Bob <sip:bob@example.com>\n         Call-ID: 6378@host.anywhere.org\n\
    \         CSeq: 1 OPTIONS\n         Accept: application/sdp\n   S->C: SIP/2.0\
    \ 200 OK\n         From: Alice <sip:alice@anywhere.org>\n         To: Bob <sip:bob@example.com>\
    \ ;tag=376364382\n         Call-ID: 6378@host.anywhere.org\n         Content-Length:\
    \ 81\n         Content-Type: application/sdp\n         v=0\n         m=audio 0\
    \ RTP/AVP 0 1 3 99\n         m=video 0 RTP/AVP 31 34\n         a=rtpmap:99 SX7300/8000\n"
- title: A Minimal Implementation
  contents:
  - 'A Minimal Implementation

    '
- title: A.1 Client
  contents:
  - "A.1 Client\n   All clients MUST be able to generate the INVITE and ACK requests.\n\
    \   Clients MUST generate and parse the Call-ID, Content-Length,\n   Content-Type,\
    \ CSeq, From and To headers. Clients MUST also parse the\n   Require header. A\
    \ minimal implementation MUST understand SDP (RFC\n   2327, [6]). It MUST be able\
    \ to recognize the status code classes 1\n   through 6 and act accordingly.\n\
    \   The following capability sets build on top of the minimal\n   implementation\
    \ described in the previous paragraph. In general, each\n   capability listed\
    \ below builds on the ones above it:\n   Basic: A basic implementation adds support\
    \ for the BYE method to\n        allow the interruption of a pending call attempt.\
    \ It includes a\n        User-Agent header in its requests and indicates its preferred\n\
    \        language in the Accept-Language header.\n   Redirection: To support call\
    \ forwarding, a client needs to be able to\n        understand the Contact header,\
    \ but only the SIP-URL part, not\n        the parameters.\n   Firewall-friendly:\
    \ A firewall-friendly client understands the Route\n        and Record-Route header\
    \ fields and can be configured to use a\n        local proxy for all outgoing\
    \ requests.\n   Negotiation: A client MUST be able to request the OPTIONS method\
    \ and\n        understand the 380 (Alternative Service) status and the Contact\n\
    \        parameters to participate in terminal and media negotiation. It\n   \
    \     SHOULD be able to parse the Warning response header to provide\n       \
    \ useful feedback to the caller.\n   Authentication: If a client wishes to invite\
    \ callees that require\n        caller authentication, it MUST be able to recognize\
    \ the 401\n        (Unauthorized) status code, MUST be able to generate the\n\
    \        Authorization request header and MUST understand the WWW-\n        Authenticate\
    \ response header.\n   If a client wishes to use proxies that require caller authentication,\n\
    \   it MUST be able to recognize the 407 (Proxy Authentication Required)\n   status\
    \ code, MUST be able to generate the Proxy-Authorization request\n   header and\
    \ understand the Proxy-Authenticate response header.\n"
- title: A.2 Server
  contents:
  - "A.2 Server\n   A minimally compliant server implementation MUST understand the\n\
    \   INVITE, ACK, OPTIONS and BYE requests. A proxy server MUST also\n   understand\
    \ CANCEL. It MUST parse and generate, as appropriate, the\n   Call-ID, Content-Length,\
    \ Content-Type, CSeq, Expires, From, Max-\n   Forwards, Require, To and Via headers.\
    \ It MUST echo the CSeq and\n   Timestamp headers in the response. It SHOULD include\
    \ the Server\n   header in its responses.\n"
- title: A.3 Header Processing
  contents:
  - "A.3 Header Processing\n   Table 6 lists the headers that different implementations\
    \ support. UAC\n   refers to a user-agent client (calling user agent), UAS to\
    \ a user-\n   agent server (called user-agent).\n   The fields in the table have\
    \ the following meaning. Type is as in\n   Table 4 and 5. \"-\" indicates the\
    \ field is not meaningful to this\n   system (although it might be generated by\
    \ it). \"m\" indicates the\n   field MUST be understood. \"b\" indicates the field\
    \ SHOULD be\n   understood by a Basic implementation.  \"r\" indicates the field\
    \ SHOULD\n   be understood if the system claims to understand redirection. \"\
    a\"\n   indicates the field SHOULD be understood if the system claims to\n   support\
    \ authentication. \"e\" indicates the field SHOULD be understood\n   if the system\
    \ claims to support encryption. \"o\" indicates support of\n   the field is purely\
    \ optional. Headers whose support is optional for\n   all implementations are\
    \ not shown.\n                        type  UAC  proxy  UAS  registrar\n   _____________________________________________________\n\
    \   Accept                R     -     o     m      m\n   Accept-Encoding     \
    \  R     -     -     m      m\n   Accept-Language       R     -     b     b  \
    \    b\n   Allow                405    o     -     -      -\n   Authorization\
    \         R     a     o     a      a\n   Call-ID               g     m     m \
    \    m      m\n   Content-Encoding      g     m     -     m      m\n   Content-Length\
    \        g     m     m     m      m\n   Content-Type          g     m     -  \
    \   m      m\n   CSeq                  g     m     m     m      m\n   Encryption\
    \            g     e     -     e      e\n   Expires               g     -    \
    \ o     o      m\n   From                  g     m     o     m      m\n   Hide\
    \                  R     -     m     -      -\n   Contact               R    \
    \ -     -     -      m\n   Contact               r     r     r     -      -\n\
    \   Max-Forwards          R     -     b     -      -\n   Proxy-Authenticate  \
    \ 407    a     -     -      -\n   Proxy-Authorization   R     -     a     -  \
    \    -\n   Proxy-Require         R     -     m     -      -\n   Require      \
    \         R     m     -     m      m\n   Response-Key          R     -     - \
    \    e      e\n   Route                 R     -     m     -      -\n   Timestamp\
    \             g     o     o     m      m\n   To                    g     m   \
    \  m     m      m\n   Unsupported           r     b     b     -      -\n   User-Agent\
    \            g     b     -     b      -\n   Via                   g     m    \
    \ m     m      m\n   WWW-Authenticate     401    a     -     -      -\n   Table\
    \ 6: Header Field Processing Requirements\n"
- title: B Usage of the Session Description Protocol (SDP)
  contents:
  - "B Usage of the Session Description Protocol (SDP)\n   This section describes\
    \ the use of the Session Description Protocol\n   (SDP) (RFC 2327 [6]).\n"
- title: B.1 Configuring Media Streams
  contents:
  - "B.1 Configuring Media Streams\n   The caller and callee align their media descriptions\
    \ so that the nth\n   media stream (\"m=\" line) in the caller's session description\n\
    \   corresponds to the nth media stream in the callee's description.\n   All media\
    \ descriptions SHOULD contain \"a=rtpmap\" mappings from RTP\n   payload types\
    \ to encodings.\n        This allows easier migration away from static payload\n\
    \        types.\n   If the callee wants to neither send nor receive a stream offered\
    \ by\n   the caller, the callee sets the port number of that stream to zero in\n\
    \   its media description.\n        There currently is no other way than port\
    \ zero for the\n        callee to refuse a bidirectional stream offered by the\n\
    \        caller. Both caller and callee need to be aware what media\n        tools\
    \ are to be started.\n   For example, assume that the caller Alice has included\
    \ the following\n   description in her INVITE request. It includes an audio stream\
    \ and\n   two bidirectional video streams, using H.261 (payload type 31) and\n\
    \   MPEG (payload type 32).\n   v=0\n   o=alice 2890844526 2890844526 IN IP4 host.anywhere.com\n\
    \   c=IN IP4 host.anywhere.com\n   m=audio 49170 RTP/AVP 0\n   a=rtpmap:0 PCMU/8000\n\
    \   m=video 51372 RTP/AVP 31\n   a=rtpmap:31 H261/90000\n   m=video 53000 RTP/AVP\
    \ 32\n   a=rtpmap:32 MPV/90000\n   The callee, Bob, does not want to receive or\
    \ send the first video\n   stream, so it returns the media description below:\n\
    \   v=0\n   o=bob 2890844730 2890844730 IN IP4 host.example.com\n   c=IN IP4 host.example.com\n\
    \   m=audio 47920 RTP/AVP 0 1\n   a=rtpmap:0 PCMU/8000\n   a=rtpmap:1 1016/8000\n\
    \   m=video 0 RTP/AVP 31\n   m=video 53000 RTP/AVP 32\n   a=rtpmap:32 MPV/90000\n"
- title: B.2 Setting SDP Values for Unicast
  contents:
  - "B.2 Setting SDP Values for Unicast\n   If a session description from a caller\
    \ contains a media stream which\n   is listed as send (receive) only, it means\
    \ that the caller is only\n   willing to send (receive) this stream, not receive\
    \ (send). The same\n   is true for the callee.\n   For receive-only and send-or-receive\
    \ streams, the port number and\n   address in the session description indicate\
    \ where the media stream\n   should be sent to by the recipient of the session\
    \ description, either\n   caller or callee. For send-only streams, the address\
    \ and port number\n   have no significance and SHOULD be set to zero.\n   The\
    \ list of payload types for each media stream conveys two pieces of\n   information,\
    \ namely the set of codecs that the caller or callee is\n   capable of sending\
    \ or receiving, and the RTP payload type numbers\n   used to identify those codecs.\
    \ For receive-only or send-and-receive\n   media streams, a caller SHOULD list\
    \ all of the codecs it is capable\n   of supporting in the session description\
    \ in an INVITE or ACK. For\n   send-only streams, the caller SHOULD indicate only\
    \ those it wishes to\n   send for this session. For receive-only streams, the\
    \ payload type\n   numbers indicate the value of the payload type field in RTP\
    \ packets\n   the caller is expecting to receive for that codec type. For send-only\n\
    \   streams, the payload type numbers indicate the value of the payload\n   type\
    \ field in RTP packets the caller is planning to send for that\n   codec type.\
    \  For send-and-receive streams, the payload type numbers\n   indicate the value\
    \ of the payload type field the caller expects to\n   both send and receive.\n\
    \   If a media stream is listed as receive-only by the caller, the callee\n  \
    \ lists, in the response, those codecs it intends to use from among the\n   ones\
    \ listed in the request. If a media stream is listed as send-only\n   by the caller,\
    \ the callee lists, in the response, those codecs it is\n   willing to receive\
    \ among the ones listed in the the request. If the\n   media stream is listed\
    \ as both send and receive, the callee lists\n   those codecs it is capable of\
    \ sending or receiving among the ones\n   listed by the caller in the INVITE.\
    \ The actual payload type numbers\n   in the callee's session description corresponding\
    \ to a particular\n   codec MUST be the same as the caller's session description.\n\
    \   If caller and callee have no media formats in common for a particular\n  \
    \ stream, the callee MUST return a session description containing the\n   particular\
    \ \"m=\" line, but with the port number set to zero, and no\n   payload types\
    \ listed.\n   If there are no media formats in common for all streams, the callee\n\
    \   SHOULD return a 400 response, with a 304 Warning header field.\n"
- title: B.3 Multicast Operation
  contents:
  - "B.3 Multicast Operation\n   The interpretation of send-only and receive-only\
    \ for multicast media\n   sessions differs from that for unicast sessions. For\
    \ multicast,\n   send-only means that the recipient of the session description\
    \ (caller\n   or callee) SHOULD only send media streams to the address and port\n\
    \   indicated. Receive-only means that the recipient of the session\n   description\
    \ SHOULD only receive media on the address and port\n   indicated.\n   For multicast,\
    \ receive and send multicast addresses are the same and\n   all parties use the\
    \ same port numbers to receive media data. If the\n   session description provided\
    \ by the caller is acceptable to the\n   callee, the callee can choose not to\
    \ include a session description or\n   MAY echo the description in the response.\n\
    \   A callee MAY, in the response, return a session description with some\n  \
    \ of the payload types removed, or port numbers set to zero (but no\n   other\
    \ value). This indicates to the caller that the callee does not\n   support the\
    \ given stream or media types which were removed. A callee\n   MUST NOT change\
    \ whether a given stream is send-only, receive-only, or\n   send-and-receive.\n\
    \   If a callee does not support multicast at all, it SHOULD return a 400\n  \
    \ status response and include a 330 Warning.\n"
- title: B.4 Delayed Media Streams
  contents:
  - "B.4 Delayed Media Streams\n   In some cases, a caller may not know the set of\
    \ media formats which\n   it can support at the time it would like to issue an\
    \ invitation. This\n   is the case when the caller is actually a gateway to another\
    \ protocol\n   which performs media format negotiation after call setup. When\
    \ this\n   occurs, a caller MAY issue an INVITE with a session description that\n\
    \   contains no media lines. The callee SHOULD interpret this to mean\n   that\
    \ the caller wishes to participate in a multimedia session\n   described by the\
    \ session description, but that the media streams are\n   not yet known. The callee\
    \ SHOULD return a session description\n   indicating the streams and media formats\
    \ it is willing to support,\n   however. The caller MAY update the session description\
    \ either in the\n   ACK request or in a re-INVITE at a later time, once the streams\
    \ are\n   known.\n"
- title: B.5 Putting Media Streams on Hold
  contents:
  - "B.5 Putting Media Streams on Hold\n   If a party in a call wants to put the other\
    \ party \"on hold\", i.e.,\n   request that it temporarily stops sending one or\
    \ more media streams,\n   a party re-invites the other by sending an INVITE request\
    \ with a\n   modified session description. The session description is the same\
    \ as\n   in the original invitation (or response), but the \"c\" destination\n\
    \   addresses for the media streams to be put on hold are set to zero\n   (0.0.0.0).\n"
- title: B.6 Subject and SDP "s=" Line
  contents:
  - "B.6 Subject and SDP \"s=\" Line\n   The SDP \"s=\" line and the SIP Subject header\
    \ field have different\n   meanings when inviting to a multicast session. The\
    \ session\n   description line describes the subject of the multicast session,\n\
    \   while the SIP Subject header field describes the reason for the\n   invitation.\
    \ The example in Section 16.2 illustrates this point. For\n   invitations to two-party\
    \ sessions, the SDP \"s=\" line MAY be left\n   empty.\n"
- title: B.7 The SDP "o=" Line
  contents:
  - "B.7 The SDP \"o=\" Line\n   The \"o=\" line is not strictly necessary for two-party\
    \ sessions, but\n   MUST be present to allow re-use of SDP-based tools.\n"
- title: C Summary of Augmented BNF
  contents:
  - "C Summary of Augmented BNF\n   All of the mechanisms specified in this document\
    \ are described in\n   both prose and an augmented Backus-Naur Form (BNF) similar\
    \ to that\n   used by RFC 822 [9]. Implementors will need to be familiar with\
    \ the\n   notation in order to understand this specification. The augmented BNF\n\
    \   includes the following constructs:\n        name  =  definition\n   The name\
    \ of a rule is simply the name itself (without any enclosing\n   \"<\" and \"\
    >\") and is separated from its definition by the equal \"=\"\n   character. White\
    \ space is only significant in that indentation of\n   continuation lines is used\
    \ to indicate a rule definition that spans\n   more than one line. Certain basic\
    \ rules are in uppercase, such as SP,\n   LWS, HT, CRLF, DIGIT, ALPHA, etc. Angle\
    \ brackets are used within\n   definitions whenever their presence will facilitate\
    \ discerning the\n   use of rule names.\n   \"literal\"\n   Quotation marks surround\
    \ literal text. Unless stated otherwise, the\n   text is case-insensitive.\n \
    \  rule1 | rule2\n   Elements separated by a bar (\"|\") are alternatives, e.g.,\
    \ \"yes | no\"\n   will accept yes or no.\n   (rule1 rule2)\n   Elements enclosed\
    \ in parentheses are treated as a single element.\n   Thus, \"(elem (foo | bar)\
    \ elem)\" allows the token sequences \"elem foo\n   elem\" and \"elem bar elem\"\
    .\n   *rule\n   The character \"*\" preceding an element indicates repetition.\
    \ The full\n   form is \"<n>*<m>element\" indicating at least <n> and at most\
    \ <m>\n   occurrences of element. Default values are 0 and infinity so that\n\
    \   \"*(element)\" allows any number, including zero; \"1*element\" requires\n\
    \   at least one; and \"1*2element\" allows one or two.\n   [rule]\n   Square\
    \ brackets enclose optional elements; \"[foo bar]\" is equivalent\n   to \"*1(foo\
    \ bar)\".\n   N rule\n   Specific repetition: \"<n>(element)\" is equivalent to\n\
    \   \"<n>*<n>(element)\"; that is, exactly <n> occurrences of (element).\n   Thus\
    \ 2DIGIT is a 2-digit number, and 3ALPHA is a string of three\n   alphabetic characters.\n\
    \   #rule\n   A construct \"#\" is defined, similar to \"*\", for defining lists\
    \ of\n   elements. The full form is \"<n>#<m> element\" indicating at least <n>\n\
    \   and at most <m> elements, each separated by one or more commas (\",\")\n \
    \  and OPTIONAL linear white space (LWS). This makes the usual form of\n   lists\
    \ very easy; a rule such as\n           ( *LWS element *( *LWS \",\" *LWS element\
    \ ))\n   can be shown as 1# element. Wherever this construct is used, null\n \
    \  elements are allowed, but do not contribute to the count of elements\n   present.\
    \ That is, \"(element), , (element)\" is permitted, but counts\n   as only two\
    \ elements. Therefore, where at least one element is\n   required, at least one\
    \ non-null element MUST be present. Default\n   values are 0 and infinity so that\
    \ \"#element\" allows any number,\n   including zero; \"1#element\" requires at\
    \ least one; and \"1#2element\"\n   allows one or two.\n   ; comment\n   A semi-colon,\
    \ set off some distance to the right of rule text, starts\n   a comment that continues\
    \ to the end of line. This is a simple way of\n   including useful notes in parallel\
    \ with the specifications.\n   implied *LWS\n   The grammar described by this\
    \ specification is word-based. Except\n   where noted otherwise, linear white\
    \ space (LWS) can be included\n   between any two adjacent words (token or quoted-string),\
    \ and between\n   adjacent tokens and separators, without changing the interpretation\n\
    \   of a field. At least one delimiter (LWS and/or separators) MUST exist\n  \
    \ between any two tokens (for the definition of \"token\" below), since\n   they\
    \ would otherwise be interpreted as a single token.\n"
- title: C.1 Basic Rules
  contents:
  - "C.1 Basic Rules\n   The following rules are used throughout this specification\
    \ to\n   describe basic parsing constructs. The US-ASCII coded character set\n\
    \   is defined by ANSI X3.4-1986.\n        OCTET     =  <any 8-bit sequence of\
    \ data>\n        CHAR      =  <any US-ASCII character (octets 0 - 127)>\n    \
    \    upalpha   =  \"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\" | \"G\" | \"H\"\
    \ | \"I\" |\n                     \"J\" | \"K\" | \"L\" | \"M\" | \"N\" | \"O\"\
    \ | \"P\" | \"Q\" | \"R\" |\n                     \"S\" | \"T\" | \"U\" | \"V\"\
    \ | \"W\" | \"X\" | \"Y\" | \"Z\"\n        lowalpha  =  \"a\" | \"b\" | \"c\"\
    \ | \"d\" | \"e\" | \"f\" | \"g\" | \"h\" | \"i\" |\n                     \"j\"\
    \ | \"k\" | \"l\" | \"m\" | \"n\" | \"o\" | \"p\" | \"q\" | \"r\" |\n        \
    \             \"s\" | \"t\" | \"u\" | \"v\" | \"w\" | \"x\" | \"y\" | \"z\"\n\
    \        alpha     =  lowalpha | upalpha\n        digit     =  \"0\" | \"1\" |\
    \ \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" |\n                     \"8\"\
    \ | \"9\"\n        alphanum  =  alpha | digit\n        CTL       =  <any US-ASCII\
    \ control character\n                     (octets 0 -- 31) and DEL (127)>\n  \
    \      CR        =  %d13 ; US-ASCII CR, carriage return character\n        LF\
    \        =  %d10 ; US-ASCII LF, line feed character\n        SP        =  %d32\
    \ ; US-ASCII SP, space character\n        HT        =  %d09 ; US-ASCII HT, horizontal\
    \ tab character\n        CRLF      =  CR LF ; typically the end of a line\n  \
    \ The following are defined in RFC 2396 [12] for the SIP URI:\n        unreserved\
    \  =  alphanum | mark\n        mark        =  \"-\" | \"_\" | \".\" | \"!\" |\
    \ \"~\" | \"*\" | \"'\"\n                   |   \"(\" | \")\"\n        escaped\
    \     =  \"%\" hex hex\n   SIP header field values can be folded onto multiple\
    \ lines if the\n   continuation line begins with a space or horizontal tab. All\
    \ linear\n   white space, including folding, has the same semantics as SP. A\n\
    \   recipient MAY replace any linear white space with a single SP before\n   interpreting\
    \ the field value or forwarding the message downstream.\n        LWS  =  [CRLF]\
    \ 1*( SP | HT ) ; linear whitespace\n   The TEXT-UTF8 rule is only used for descriptive\
    \ field contents and\n   values that are not intended to be interpreted by the\
    \ message parser.\n   Words of *TEXT-UTF8 contain characters from the UTF-8 character\
    \ set\n   (RFC 2279 [21]). In this regard, SIP differs from HTTP, which uses\n\
    \   the ISO 8859-1 character set.\n        TEXT-UTF8  =  <any UTF-8 character\
    \ encoding, except CTLs,\n                      but including LWS>\n   A CRLF\
    \ is allowed in the definition of TEXT-UTF8 only as part of a\n   header field\
    \ continuation. It is expected that the folding LWS will\n   be replaced with\
    \ a single SP before interpretation of the TEXT-UTF8\n   value.\n   Hexadecimal\
    \ numeric characters are used in several protocol elements.\n        hex  =  \"\
    A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\"\n                | \"a\" | \"b\" |\
    \ \"c\" | \"d\" | \"e\" | \"f\" | digit\n   Many SIP header field values consist\
    \ of words separated by LWS or\n   special characters. These special characters\
    \ MUST be in a quoted\n   string to be used within a parameter value.\n      \
    \  token       =  1*< any CHAR  except CTL's  or separators>\n        separators\
    \  =  \"(\" | \")\" | \"<\" | \">\" | \"@\" |\n                       \",\" |\
    \ \";\" | \":\" | \"\\\" | <\"> |\n                       \"/\" | \"[\" | \"]\"\
    \ | \"?\" | \"=\" |\n                       \"{\" | \"}\" | SP | HT\n   Comments\
    \ can be included in some SIP header fields by surrounding the\n   comment text\
    \ with parentheses. Comments are only allowed in fields\n   containing \"comment\"\
    \ as part of their field value definition. In all\n   other fields, parentheses\
    \ are considered part of the field value.\n        comment  =  \"(\" *(ctext |\
    \ quoted-pair | comment) \")\"\n        ctext    =  < any TEXT-UTF8  excluding\
    \ \"(\"  and \")\">\n   A string of text is parsed as a single word if it is quoted\
    \ using\n   double-quote marks.\n        quoted-string  =  ( <\"> *(qdtext | quoted-pair\
    \ ) <\"> )\n        qdtext         =  <any TEXT-UTF8 except <\">>\n   The backslash\
    \ character (\"\\\") MAY be used as a single-character\n   quoting mechanism only\
    \ within quoted-string and comment constructs.\n        quoted-pair  =  \" \\\
    \ \" CHAR\n"
- title: D Using SRV DNS Records
  contents:
  - "D Using SRV DNS Records\n   The following procedure is experimental and relies\
    \ on DNS SRV records\n   (RFC 2052 [14]). The steps listed below are used in place\
    \ of the two\n   steps in section 1.4.2.\n   If a step elicits no addresses, the\
    \ client continues to the next\n   step.  However if a step elicits one or more\
    \ addresses, but no SIP\n   server at any of those addresses responds, then the\
    \ client concludes\n   the server is down and doesn't continue on to the next\
    \ step.\n   When SRV records are to be used, the protocol to use when querying\n\
    \   for the SRV record is \"sip\". SRV records contain port numbers for\n   servers,\
    \ in addition to IP addresses; the client always uses this\n   port number when\
    \ contacting the SIP server. Otherwise, the port\n   number in the SIP URI is\
    \ used, if present. If there is no port number\n   in the URI, the default port,\
    \ 5060, is used.\n        1.   If the host portion of the Request-URI is an IP\
    \ address,\n             the client contacts the server at the given address.\
    \ If the\n             host portion of the Request-URI is not an IP address, the\n\
    \             client proceeds to the next step.\n        2.   The Request-URI\
    \ is examined. If it contains an explicit\n             port number, the next\
    \ two steps are skipped.\n        3.   The Request-URI is examined. If it does\
    \ not specify a\n             protocol (TCP or UDP), the client queries the name\
    \ server\n             for SRV records for both UDP (if supported by the client)\n\
    \             and TCP (if supported by the client) SIP servers. The\n        \
    \     format of these queries is defined in RFC 2052 [14]. The\n             results\
    \ of the query or queries are merged together and\n             ordered based\
    \ on priority. Then, the searching technique\n             outlined in RFC 2052\
    \ [14] is used to select servers in\n             order.  If DNS doesn't return\
    \ any records, the user goes to\n             the last step.  Otherwise, the user\
    \ attempts to contact\n             each server in the order listed.  If no server\
    \ is\n             contacted, the user gives up.\n        4.   If the Request-URI\
    \ specifies a protocol (TCP or UDP) that\n             is supported by the client,\
    \ the client queries the name\n             server for SRV records for SIP servers\
    \ of that protocol\n             type only. If the client does not support the\
    \ protocol\n             specified in the Request-URI, it gives up. The searching\n\
    \             technique outlined in RFC 2052 [14] is used to select\n        \
    \     servers from the DNS response in order. If DNS doesn't\n             return\
    \ any records, the user goes to the last step.\n             Otherwise, the user\
    \ attempts to contact each server in the\n             order listed. If no server\
    \ is contacted, the user gives up.\n        5.   The client queries the name server\
    \ for address records for\n             the host portion of the Request-URI. If\
    \ there were no\n             address records, the client stops, as it has been\
    \ unable to\n             locate a server. By address record, we mean A RR's,\
    \ AAAA\n             RR's, or their most modern equivalent.\n   A client MAY cache\
    \ a successful DNS query result. A successful query\n   is one which contained\
    \ records in the answer, and a server was\n   contacted at one of the addresses\
    \ from the answer. When the client\n   wishes to send a request to the same host,\
    \ it starts the search as if\n   it had just received this answer from the name\
    \ server. The server\n   uses the procedures specified in RFC1035 [15] regarding\
    \ cache\n   invalidation when the time-to-live of the DNS result expires. If the\n\
    \   client does not find a SIP server among the addresses listed in the\n   cached\
    \ answer, it starts the search at the beginning of the sequence\n   described\
    \ above.\n   For example, consider a client that wishes to send a SIP request.\
    \ The\n   Request-URI for the destination is sip:user@company.com.  The client\n\
    \   only supports UDP. It would follow these steps:\n        1.   The host portion\
    \ is not an IP address, so the client goes\n             to step 2 above.\n  \
    \      2.   The client does a DNS query of QNAME=\"sip.udp.company.com\",\n  \
    \           QCLASS=IN, QTYPE=SRV. Since it doesn't support TCP, it\n         \
    \    omits the TCP query. There were no addresses in the DNS\n             response,\
    \ so the client goes to the next step.\n        3.   The client does a DNS query\
    \ for A records for\n             \"company.com\". An address is found, so that\
    \ client attempts\n             to contact a server at that address at port 5060.\n"
- title: E IANA Considerations
  contents:
  - "E IANA Considerations\n   Section 4.4 describes a name space and mechanism for\
    \ registering SIP\n   options.\n   Section 6.41 describes the name space for registering\
    \ SIP warn-codes.\n"
- title: F Acknowledgments
  contents:
  - "F Acknowledgments\n   We wish to thank the members of the IETF MMUSIC WG for\
    \ their comments\n   and suggestions. Detailed comments were provided by Anders\n\
    \   Kristensen, Jim Buller, Dave Devanathan, Yaron Goland, Christian\n   Huitema,\
    \ Gadi Karmi, Jonathan Lennox, Keith Moore, Vern Paxson, Moshe\n   J. Sambol,\
    \ and Eric Tremblay.\n   This work is based, inter alia, on [37,38].\n"
- title: G Authors' Addresses
  contents:
  - "G Authors' Addresses\n   Mark Handley\n   AT&T Center for Internet Research at\
    \ ISCI (ACIRI)\n   1947 Center St., Suite 600\n   Berkeley, CA 94704-119\n   USA\n\
    \   Email: mjh@aciri.org\n   Henning Schulzrinne\n   Dept. of Computer Science\n\
    \   Columbia University\n   1214 Amsterdam Avenue\n   New York, NY 10027\n   USA\n\
    \   Email:  schulzrinne@cs.columbia.edu\n   Eve Schooler\n   Computer Science\
    \ Department 256-80\n   California Institute of Technology\n   Pasadena, CA 91125\n\
    \   USA\n   Email:  schooler@cs.caltech.edu\n   Jonathan Rosenberg\n   Lucent\
    \ Technologies, Bell Laboratories\n   Rm. 4C-526\n   101 Crawfords Corner Road\n\
    \   Holmdel, NJ 07733\n   USA\n   Email:  jdrosen@bell-labs.com\n"
- title: H Bibliography
  contents:
  - "H Bibliography\n   [1] Pandya, R., \"Emerging mobile and personal communication\
    \ systems,\"\n       IEEE Communications Magazine , vol. 33, pp. 44--52, June\
    \ 1995.\n   [2] Braden, B., Zhang, L., Berson, S., Herzog, S. and S. Jamin,\n\
    \       \"Resource ReSerVation protocol (RSVP) -- version 1 functional\n     \
    \  specification\", RFC 2205, October 1997.\n   [3] Schulzrinne, H., Casner, S.,\
    \ Frederick, R. and V. Jacobson, \"RTP:\n       a transport protocol for real-time\
    \ applications\", RFC 1889,\n       Internet Engineering Task Force, Jan. 1996.\n\
    \   [4] Schulzrinne, H., Lanphier, R. and A. Rao, \"Real time streaming\n    \
    \   protocol (RTSP)\", RFC 2326, April 1998.\n   [5] Handley, M., \"SAP: Session\
    \ announcement protocol,\" Internet\n       Draft, Internet Engineering Task Force,\
    \ Nov. 1996.  Work in\n       progress.\n   [6] Handley, M. and V. Jacobson, \"\
    SDP: session description protocol\",\n       RFC 2327, April 1998.\n   [7] International\
    \ Telecommunication Union, \"Visual telephone systems\n       and equipment for\
    \ local area networks which provide a non-\n       guaranteed quality of service,\"\
    \ Recommendation H.323,\n       Telecommunication Standardization Sector of ITU,\
    \ Geneva,\n       Switzerland, May 1996.\n   [8] International Telecommunication\
    \ Union, \"Control protocol for\n       multimedia communication,\" Recommendation\
    \ H.245,\n       Telecommunication Standardization Sector of ITU, Geneva,\n  \
    \     Switzerland, Feb. 1998.\n   [9] International Telecommunication Union, \"\
    Media stream\n       packetization and synchronization on non-guaranteed quality\
    \ of\n       service LANs,\" Recommendation H.225.0, Telecommunication\n     \
    \  Standardization Sector of ITU, Geneva, Switzerland, Nov. 1996.\n   [10] Bradner,\
    \ S., \"Key words for use in RFCs to indicate requirement\n        levels\", BCP\
    \ 14,  RFC 2119, Mardch 1997.\n   [11] Fielding, R., Gettys, J., Mogul, J., Nielsen,\
    \ H. and T.\n        Berners-Lee, \"Hypertext transfer protocol -- HTTP/1.1\"\
    , RFC\n        2068, January 1997.\n   [12] Berners-Lee, T., Fielding, R. and\
    \ L. Masinter, \"Uniform resource\n        identifiers (URI): generic syntax\"\
    , RFC 2396, August 1998.\n   [13] Berners-Lee, T., Masinter, L. and M. McCahill,\
    \ \"Uniform resource\n        locators (URL)\", RFC 1738, December 1994.\n   [14]\
    \ Gulbrandsen, A.  and P. Vixie, \"A DNS RR for specifying the\n        location\
    \ of services (DNS SRV)\", RFC 2052, October 1996.\n   [15] Mockapetris, P., \"\
    Domain names - implementation and\n        specification\", STD 13, RFC 1035,\
    \ Noveberm 1997.\n   [16] Hamilton, M. and R. Wright, \"Use of DNS aliases for\
    \ network\n        services\", RFC 2219, October 1997.\n   [17] Zimmerman, D.,\
    \ \"The finger user information protocol\", RFC 1288,\n        December 1991.\n\
    \   [18] Williamson, S., Kosters, M., Blacka, D., Singh, J. and K.\n        Zeilstra,\
    \ \"Referral whois (rwhois) protocol V1.5\", RFC 2167,\n        June 1997.\n \
    \  [19] Yeong, W., Howes, T. and S. Kille, \"Lightweight directory access\n  \
    \      protocol\", RFC 1777, March 1995.\n   [20] Schooler, E., \"A multicast\
    \ user directory service for\n        synchronous rendezvous,\" Master's Thesis\
    \ CS-TR-96-18, Department\n        of Computer Science, California Institute of\
    \ Technology,\n        Pasadena, California, Aug. 1996.\n   [21] Yergeau, F.,\
    \ \"UTF-8, a transformation format of ISO 10646\", RFC\n        2279, January\
    \ 1998.\n   [22] Stevens, W., TCP/IP illustrated: the protocols , vol. 1.\n  \
    \      Reading, Massachusetts: Addison-Wesley, 1994.\n   [23] Mogul, J. and S.\
    \ Deering, \"Path MTU discovery\", RFC 1191,\n        November 1990.\n   [24]\
    \ Crocker, D., \"Standard for the format of ARPA internet text\n        messages\"\
    , RFC STD 11, RFC 822, August 1982.\n   [25] Meyer, D., \"Administratively scoped\
    \ IP multicast\", RFC 2365,\n        July 1998.\n   [26] Schulzrinne, H., \"RTP\
    \ profile for audio and video conferences\n        with minimal control\", RFC\
    \ 1890, January 1996\n   [27] Eastlake, D., Crocker, S. and J. Schiller, \"Randomness\n\
    \        recommendations for security\", RFC 1750, December 1994.\n   [28] Hoffman,\
    \ P., Masinter, L. and J. Zawinski, \"The mailto URL\n        scheme\", RFC 2368,\
    \ July 1998.\n   [29] Braden, B., \"Requirements for internet hosts - application\
    \ and\n        support\", STD 3, RFC 1123, October 1989.\n   [30] Palme, J., \"\
    Common internet message headers\", RFC 2076, February\n        1997.\n   [31]\
    \ Alvestrand, H., \"IETF policy on character sets and languages\",\n        RFC\
    \ 2277, January 1998.\n   [32] Elkins, M., \"MIME security with pretty good privacy\
    \ (PGP)\", RFC\n        2015, October 1996.\n   [33] Atkins, D., Stallings, W.\
    \ and P. Zimmermann, \"PGP message\n        exchange formats\", RFC 1991, August\
    \ 1996.\n   [34] Atkinson, R., \"Security architecture for the internet protocol\"\
    ,\n        RFC 2401, November 1998.\n   [35] Allen, C. and T. Dierks, \"The TLS\
    \ protocol version 1.0,\" RFC\n        2246, January 1999.\n   [36] Franks, J.,\
    \ Hallam-Baker, P., Hostetler, J., Lawrence, S.,\n        Leach, P., Luotonen,\
    \ A. and L. Stewart, \"HTTP authentication:\n        Basic and digest access authentication,\"\
    \ Internet Draft,\n        Internet Engineering Task Force, Sept.  1998.  Work\
    \ in progress.\n   [37] Schooler, E., \"Case study: multimedia conference control\
    \ in a\n        packet-switched teleconferencing system,\" Journal of\n      \
    \  Internetworking:  Research and Experience , vol. 4, pp. 99--120,\n        June\
    \ 1993.  ISI reprint series ISI/RS-93-359.\n   [38] Schulzrinne, H., \"Personal\
    \ mobility for multimedia services in\n        the Internet,\" in European Workshop\
    \ on Interactive Distributed\n        Multimedia Systems and Services (IDMS) ,\
    \ (Berlin, Germany), Mar.\n        1996.\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1999).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
