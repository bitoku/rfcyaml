- title: __initial_text__
  contents:
  - "               Internet Control Message Protocol (ICMPv6)\n               for\
    \ the Internet Protocol Version 6 (IPv6)\n                             Specification\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies a set of Internet Control Message Protocol\n\
    \   (ICMP) messages for use with version 6 of the Internet Protocol\n   (IPv6).\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n      1. Introduction........................................2\n\
    \      2. ICMPv6 (ICMP for IPv6)..............................2\n            2.1\
    \ Message General Format.......................2\n            2.2 Message Source\
    \ Address Determination.........3\n            2.3 Message Checksum Calculation.................4\n\
    \            2.4 Message Processing Rules.....................4\n      3. ICMPv6\
    \ Error Messages...............................6\n            3.1 Destination\
    \ Unreachable Message..............6\n            3.2 Packet Too Big Message......................\
    \ 8\n            3.3 Time Exceeded Message....................... 9\n        \
    \    3.4 Parameter Problem Message...................10\n      4. ICMPv6 Informational\
    \ Messages......................11\n            4.1 Echo Request Message........................11\n\
    \            4.2 Echo Reply Message..........................12\n      5. Security\
    \ Considerations............................13\n      6. References.........................................14\n\
    \      7. Acknowledgments....................................15\n      8. Authors'\
    \ Addresses.................................16\n      Appendix A - Changes since\
    \ RFC 1885...................17\n      Full Copyright Statement..............................18\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The Internet Protocol, version 6 (IPv6) is a new version\
    \ of IP.  IPv6\n   uses the Internet Control Message Protocol (ICMP) as defined\
    \ for IPv4\n   [RFC-792], with a number of changes.  The resulting protocol is\n\
    \   called ICMPv6, and has an IPv6 Next Header value of 58.\n   This document\
    \ describes the format of a set of control messages used\n   in ICMPv6.  It does\
    \ not describe the procedures for using these\n   messages to achieve functions\
    \ like Path MTU discovery; such\n   procedures are described in other documents\
    \ (e.g., [PMTU]).  Other\n   documents may also introduce additional ICMPv6 message\
    \ types, such as\n   Neighbor Discovery messages [IPv6-DISC], subject to the general\
    \ rules\n   for ICMPv6 messages given in section 2 of this document.\n   Terminology\
    \ defined in the IPv6 specification [IPv6] and the IPv6\n   Routing and Addressing\
    \ specification [IPv6-ADDR] applies to this\n   document as well.\n   The key\
    \ words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"\
    SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n\
    \   document are to be interpreted as described in [RFC-2119].\n"
- title: 2. ICMPv6 (ICMP for IPv6)
  contents:
  - "2. ICMPv6 (ICMP for IPv6)\n   ICMPv6 is used by IPv6 nodes to report errors encountered\
    \ in\n   processing packets, and to perform other internet-layer functions,\n\
    \   such as diagnostics (ICMPv6 \"ping\").  ICMPv6 is an integral part of\n  \
    \ IPv6 and MUST be fully implemented by every IPv6 node.\n"
- title: 2.1 Message General Format
  contents:
  - "2.1 Message General Format\n   ICMPv6 messages are grouped into two classes:\
    \ error messages and\n   informational messages.  Error messages are identified\
    \ as such by\n   having a zero in the high-order bit of their message Type field\n\
    \   values.  Thus, error messages have message Types from 0 to 127;\n   informational\
    \ messages have message Types from 128 to 255.\n   This document defines the message\
    \ formats for the following ICMPv6\n   messages:\n        ICMPv6 error messages:\n\
    \             1    Destination Unreachable      (see section 3.1)\n          \
    \   2    Packet Too Big               (see section 3.2)\n             3    Time\
    \ Exceeded                (see section 3.3)\n             4    Parameter Problem\
    \            (see section 3.4)\n        ICMPv6 informational messages:\n     \
    \        128  Echo Request                 (see section 4.1)\n             129\
    \  Echo Reply                   (see section 4.2)\n   Every ICMPv6 message is\
    \ preceded by an IPv6 header and zero or more\n   IPv6 extension headers. The\
    \ ICMPv6 header is identified by a Next\n   Header value of 58 in the immediately\
    \ preceding header.  (NOTE: this\n   is different than the value used to identify\
    \ ICMP for IPv4.)\n   The ICMPv6 messages have the following general format:\n\
    \       0                   1                   2                   3\n      \
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |     Type      |     Code      |          Checksum             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                                                               |\n      +   \
    \                      Message Body                          +\n      |      \
    \                                                         |\n   The type field\
    \ indicates the type of the message. Its value\n   determines the format of the\
    \ remaining data.\n   The code field depends on the message type. It is used to\
    \ create an\n   additional level of message granularity.\n   The checksum field\
    \ is used to detect data corruption in the ICMPv6\n   message and parts of the\
    \ IPv6 header.\n"
- title: 2.2 Message Source Address Determination
  contents:
  - "2.2 Message Source Address Determination\n   A node that sends an ICMPv6 message\
    \ has to determine both the Source\n   and Destination IPv6 Addresses in the IPv6\
    \ header before calculating\n   the checksum.  If the node has more than one unicast\
    \ address, it must\n   choose the Source Address of the message as follows:\n\
    \    (a) If the message is a response to a message sent to one of the\n      \
    \  node's unicast addresses, the Source Address of the reply must\n        be\
    \ that same address.\n    (b) If the message is a response to a message sent to\
    \ a multicast or\n        anycast group in which the node is a member, the Source\
    \ Address\n        of the reply must be a unicast address belonging to the\n \
    \       interface on which the multicast or anycast packet was received.\n   \
    \ (c) If the message is a response to a message sent to an address\n        that\
    \ does not belong to the node, the Source Address should be\n        that unicast\
    \ address belonging to the node that will be most\n        helpful in diagnosing\
    \ the error. For example, if the message is\n        a response to a packet forwarding\
    \ action that cannot complete\n        successfully, the Source Address should\
    \ be a unicast address\n        belonging to the interface on which the packet\
    \ forwarding\n        failed.\n    (d) Otherwise, the node's routing table must\
    \ be examined to\n        determine which interface will be used to transmit the\
    \ message\n        to its destination, and a unicast address belonging to that\n\
    \        interface must be used as the Source Address of the message.\n"
- title: 2.3 Message Checksum Calculation
  contents:
  - "2.3 Message Checksum Calculation\n   The checksum is the 16-bit one's complement\
    \ of the one's complement\n   sum of the entire ICMPv6 message starting with the\
    \ ICMPv6 message\n   type field, prepended with a \"pseudo-header\" of IPv6 header\
    \ fields,\n   as specified in [IPv6, section 8.1].  The Next Header value used\
    \ in\n   the pseudo-header is 58.  (NOTE: the inclusion of a pseudo-header in\n\
    \   the ICMPv6 checksum is a change from IPv4; see [IPv6] for the\n   rationale\
    \ for this change.)\n   For computing the checksum, the checksum field is set\
    \ to zero.\n"
- title: 2.4 Message Processing Rules
  contents:
  - "2.4 Message Processing Rules\n   Implementations MUST observe the following rules\
    \ when processing\n   ICMPv6 messages (from [RFC-1122]):\n    (a) If an ICMPv6\
    \ error message of unknown type is received, it MUST\n        be passed to the\
    \ upper layer.\n    (b) If an ICMPv6 informational message of unknown type is\
    \ received,\n        it MUST be silently discarded.\n    (c) Every ICMPv6 error\
    \ message (type < 128) includes as much of the\n        IPv6 offending (invoking)\
    \ packet (the packet that caused the\n        error) as will fit without making\
    \ the error message packet\n        exceed the minimum IPv6 MTU [IPv6].\n    (d)\
    \ In those cases where the internet-layer protocol is required to\n        pass\
    \ an ICMPv6 error message to the upper-layer process, the\n        upper-layer\
    \ protocol type is extracted from the original packet\n        (contained in the\
    \ body of the ICMPv6 error message) and used to\n        select the appropriate\
    \ upper-layer process to handle the error.\n        If the original packet had\
    \ an unusually large amount of\n        extension headers, it is possible that\
    \ the upper-layer protocol\n        type may not be present in the ICMPv6 message,\
    \ due to truncation\n        of the original packet to meet the minimum IPv6 MTU\
    \ [IPv6]\n        limit.  In that case, the error message is silently dropped\n\
    \        after any IPv6-layer processing.\n    (e) An ICMPv6 error message MUST\
    \ NOT be sent as a result of\n        receiving:\n         (e.1) an ICMPv6 error\
    \ message, or\n         (e.2) a packet destined to an IPv6 multicast address (there\
    \ are\n               two exceptions to this rule: (1) the Packet Too Big\n  \
    \             Message - Section 3.2 - to allow Path MTU discovery to\n       \
    \        work for IPv6 multicast, and (2) the Parameter Problem\n            \
    \   Message, Code 2 - Section 3.4 - reporting an unrecognized\n              \
    \ IPv6 option that has the Option Type highest-order two\n               bits\
    \ set to 10), or\n         (e.3) a packet sent as a link-layer multicast, (the\
    \ exception\n               from e.2 applies to this case too), or\n         (e.4)\
    \ a packet sent as a link-layer broadcast, (the exception\n               from\
    \ e.2 applies to this case too), or\n         (e.5) a packet whose source address\
    \ does not uniquely identify\n               a single node -- e.g., the IPv6 Unspecified\
    \ Address, an\n               IPv6 multicast address, or an address known by the\
    \ ICMP\n               message sender to be an IPv6 anycast address.\n    (f)\
    \ Finally, in order to limit the bandwidth and forwarding costs\n        incurred\
    \ sending ICMPv6 error messages, an IPv6 node MUST limit\n        the rate of\
    \ ICMPv6 error messages it sends.  This situation may\n        occur when a source\
    \ sending a stream of erroneous packets fails\n        to heed the resulting ICMPv6\
    \ error messages.  There are a\n        variety of ways of implementing the rate-limiting\
    \ function, for\n        example:\n         (f.1) Timer-based - for example, limiting\
    \ the rate of\n               transmission of error messages to a given source,\
    \ or to\n               any source, to at most once every T milliseconds.\n  \
    \       (f.2) Bandwidth-based - for example, limiting the rate at which\n    \
    \           error messages are sent from a particular interface to\n         \
    \      some fraction F of the attached link's bandwidth.\n        The limit parameters\
    \ (e.g., T or F in the above examples) MUST\n        be configurable for the node,\
    \ with a conservative default value\n        (e.g., T = 1 second, NOT 0 seconds,\
    \ or F = 2 percent, NOT 100\n        percent).\n   The following sections describe\
    \ the message formats for the above\n   ICMPv6 messages.\n"
- title: 3. ICMPv6 Error Messages
  contents:
  - '3. ICMPv6 Error Messages

    '
- title: 3.1 Destination Unreachable Message
  contents:
  - "3.1 Destination Unreachable Message\n       0                   1           \
    \        2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |     Type      |     Code      |          Checksum             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                             Unused                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                    As much of invoking packet                 |\n   \
    \   +                as will fit without the ICMPv6 packet          +\n      |\
    \                exceeding the minimum IPv6 MTU [IPv6]          |\n   IPv6 Fields:\n\
    \   Destination Address\n                  Copied from the Source Address field\
    \ of the invoking\n                  packet.\n   ICMPv6 Fields:\n   Type     \
    \      1\n   Code           0 - no route to destination\n                  1 -\
    \ communication with destination\n                        administratively prohibited\n\
    \                  2 - (not assigned)\n                  3 - address unreachable\n\
    \                  4 - port unreachable\n   Unused         This field is unused\
    \ for all code values.\n                  It must be initialized to zero by the\
    \ sender\n                  and ignored by the receiver.\n   Description\n   A\
    \ Destination Unreachable message SHOULD be generated by a router, or\n   by the\
    \ IPv6 layer in the originating node, in response to a packet\n   that cannot\
    \ be delivered to its destination address for reasons other\n   than congestion.\
    \  (An ICMPv6 message MUST NOT be generated if a\n   packet is dropped due to\
    \ congestion.)\n   If the reason for the failure to deliver is lack of a matching\
    \ entry\n   in the forwarding node's routing table, the Code field is set to 0\n\
    \   (NOTE: this error can occur only in nodes that do not hold a \"default\n \
    \  route\" in their routing tables).\n   If the reason for the failure to deliver\
    \ is administrative\n   prohibition, e.g., a \"firewall filter\", the Code field\
    \ is set to 1.\n   If there is any other reason for the failure to deliver, e.g.,\n\
    \   inability to resolve the IPv6 destination address into a\n   corresponding\
    \ link address, or a link-specific problem of some sort,\n   then the Code field\
    \ is set to 3.\n   A destination node SHOULD send a Destination Unreachable message\
    \ with\n   Code 4 in response to a packet for which the transport protocol\n \
    \  (e.g., UDP) has no listener, if that transport protocol has no\n   alternative\
    \ means to inform the sender.\n   Upper layer notification\n   A node receiving\
    \ the ICMPv6 Destination Unreachable message MUST\n   notify the upper-layer process.\n"
- title: 3.2 Packet Too Big Message
  contents:
  - "3.2 Packet Too Big Message\n       0                   1                   2\
    \                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |     Type      |     Code      |          Checksum             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                             MTU                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                    As much of invoking packet                 |\n   \
    \   +               as will fit without the ICMPv6 packet           +\n      |\
    \               exceeding the minimum IPv6 MTU [IPv6]           |\n   IPv6 Fields:\n\
    \   Destination Address\n                  Copied from the Source Address field\
    \ of the invoking\n                  packet.\n   ICMPv6 Fields:\n   Type     \
    \      2\n   Code           Set to 0 (zero) by the sender and ignored by the\n\
    \                  receiver\n   MTU            The Maximum Transmission Unit of\
    \ the next-hop link.\n  Description\n   A Packet Too Big MUST be sent by a router\
    \ in response to a packet\n   that it cannot forward because the packet is larger\
    \ than the MTU of\n   the outgoing link.  The information in this message is used\
    \ as part\n   of the Path MTU Discovery process [PMTU].\n   Sending a Packet Too\
    \ Big Message makes an exception to one of the\n   rules of when to send an ICMPv6\
    \ error message, in that unlike other\n   messages, it is sent in response to\
    \ a packet received with an IPv6\n   multicast destination address, or a link-layer\
    \ multicast or link-\n   layer broadcast address.\n   Upper layer notification\n\
    \   An incoming Packet Too Big message MUST be passed to the upper-layer\n   process.\n"
- title: 3.3 Time Exceeded Message
  contents:
  - "3.3 Time Exceeded Message\n       0                   1                   2 \
    \                  3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |     Type      |     Code      |          Checksum             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                             Unused                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                    As much of invoking packet                 |\n   \
    \   +               as will fit without the ICMPv6 packet           +\n      |\
    \               exceeding the minimum IPv6 MTU [IPv6]           |\n   IPv6 Fields:\n\
    \   Destination Address\n                  Copied from the Source Address field\
    \ of the invoking\n                  packet.\n   ICMPv6 Fields:\n   Type     \
    \      3\n   Code           0 - hop limit exceeded in transit\n              \
    \    1 - fragment reassembly time exceeded\n   Unused         This field is unused\
    \ for all code values.\n                  It must be initialized to zero by the\
    \ sender\n                  and ignored by the receiver.\n   Description\n   If\
    \ a router receives a packet with a Hop Limit of zero, or a router\n   decrements\
    \ a packet's Hop Limit to zero, it MUST discard the packet\n   and send an ICMPv6\
    \ Time Exceeded message with Code 0 to the source of\n   the packet.  This indicates\
    \ either a routing loop or too small an\n   initial Hop Limit value.\n   The rules\
    \ for selecting the Source Address of this message are\n   defined in section\
    \ 2.2.\n   Upper layer notification\n   An incoming Time Exceeded message MUST\
    \ be passed to the upper-layer\n   process.\n"
- title: 3.4 Parameter Problem Message
  contents:
  - "3.4 Parameter Problem Message\n       0                   1                 \
    \  2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |     Type      |     Code      |          Checksum             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                            Pointer                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                    As much of invoking packet                 |\n   \
    \   +               as will fit without the ICMPv6 packet           +\n      |\
    \               exceeding the minimum IPv6 MTU [IPv6]           |\n   IPv6 Fields:\n\
    \   Destination Address\n                  Copied from the Source Address field\
    \ of the invoking\n                  packet.\n   ICMPv6 Fields:\n   Type     \
    \      4\n   Code           0 - erroneous header field encountered\n         \
    \         1 - unrecognized Next Header type encountered\n                  2 -\
    \ unrecognized IPv6 option encountered\n   Pointer        Identifies the octet\
    \ offset within the\n                  invoking packet where the error was detected.\n\
    \                  The pointer will point beyond the end of the ICMPv6\n     \
    \             packet if the field in error is beyond what can fit\n          \
    \        in the maximum size of an ICMPv6 error message.\n   Description\n   If\
    \ an IPv6 node processing a packet finds a problem with a field in\n   the IPv6\
    \ header or extension headers such that it cannot complete\n   processing the\
    \ packet, it MUST discard the packet and SHOULD send an\n   ICMPv6 Parameter Problem\
    \ message to the packet's source, indicating\n   the type and location of the\
    \ problem.\n   The pointer identifies the octet of the original packet's header\n\
    \   where the error was detected. For example, an ICMPv6 message with\n   Type\
    \ field = 4, Code field = 1, and Pointer field = 40 would indicate\n   that the\
    \ IPv6 extension header following the IPv6 header of the\n   original packet holds\
    \ an unrecognized Next Header field value.\n   Upper layer notification\n   A\
    \ node receiving this ICMPv6 message MUST notify the upper-layer\n   process.\n"
- title: 4. ICMPv6 Informational Messages
  contents:
  - '4. ICMPv6 Informational Messages

    '
- title: 4.1 Echo Request Message
  contents:
  - "4.1 Echo Request Message\n       0                   1                   2  \
    \                 3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |     Type      |     Code      |          Checksum             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \           Identifier          |        Sequence Number        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |     Data ...\n      +-+-+-+-+-\n   IPv6 Fields:\n   Destination Address\n\
    \                  Any legal IPv6 address.\n   ICMPv6 Fields:\n   Type       \
    \    128\n   Code           0\n   Identifier     An identifier to aid in matching\
    \ Echo Replies\n                  to this Echo Request.  May be zero.\n   Sequence\
    \ Number\n                  A sequence number to aid in matching Echo Replies\n\
    \                  to this Echo Request.  May be zero.\n   Data           Zero\
    \ or more octets of arbitrary data.\n   Description\n   Every node MUST implement\
    \ an ICMPv6 Echo responder function that\n   receives Echo Requests and sends\
    \ corresponding Echo Replies.  A node\n   SHOULD also implement an application-layer\
    \ interface for sending Echo\n   Requests and receiving Echo Replies, for diagnostic\
    \ purposes.\n   Upper layer notification\n   Echo Request messages MAY be passed\
    \ to processes receiving ICMP\n   messages.\n"
- title: 4.2 Echo Reply Message
  contents:
  - "4.2 Echo Reply Message\n       0                   1                   2    \
    \               3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |     Type      |     Code      |          Checksum             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \           Identifier          |        Sequence Number        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |     Data ...\n      +-+-+-+-+-\n   IPv6 Fields:\n   Destination Address\n\
    \                  Copied from the Source Address field of the invoking\n    \
    \              Echo Request packet.\n   ICMPv6 Fields:\n   Type           129\n\
    \   Code           0\n   Identifier     The identifier from the invoking Echo\
    \ Request message.\n   Sequence       The sequence number from the invoking Echo\
    \ Request\n   Number         message.\n   Data           The data from the invoking\
    \ Echo Request message.\n   Description\n   Every node MUST implement an ICMPv6\
    \ Echo responder function that\n   receives Echo Requests and sends corresponding\
    \ Echo Replies.  A node\n   SHOULD also implement an application-layer interface\
    \ for sending Echo\n   Requests and receiving Echo Replies, for diagnostic purposes.\n\
    \   The source address of an Echo Reply sent in response to a unicast\n   Echo\
    \ Request message MUST be the same as the destination address of\n   that Echo\
    \ Request message.\n   An Echo Reply SHOULD be sent in response to an Echo Request\
    \ message\n   sent to an IPv6 multicast address.  The source address of the reply\n\
    \   MUST be a unicast address belonging to the interface on which the\n   multicast\
    \ Echo Request message was received.\n   The data received in the ICMPv6 Echo\
    \ Request message MUST be returned\n   entirely and unmodified in the ICMPv6 Echo\
    \ Reply message.\n   Upper layer notification\n   Echo Reply messages MUST be\
    \ passed to the process that originated an\n   Echo Request message.  It may be\
    \ passed to processes that did not\n   originate the Echo Request message.\n"
- title: 5. Security Considerations
  contents:
  - '5. Security Considerations

    '
- title: 5.1 Authentication and Encryption of ICMP messages
  contents:
  - "5.1 Authentication and Encryption of ICMP messages\n   ICMP protocol packet exchanges\
    \ can be authenticated using the IP\n   Authentication Header [IPv6-AUTH].  A\
    \ node SHOULD include an\n   Authentication Header when sending ICMP messages\
    \ if a security\n   association for use with the IP Authentication Header exists\
    \ for the\n   destination address.  The security associations may have been created\n\
    \   through manual configuration or through the operation of some key\n   management\
    \ protocol.\n   Received Authentication Headers in ICMP packets MUST be verified\
    \ for\n   correctness and packets with incorrect authentication MUST be ignored\n\
    \   and discarded.\n   It SHOULD be possible for the system administrator to configure\
    \ a\n   node to ignore any ICMP messages that are not authenticated using\n  \
    \ either the Authentication Header or Encapsulating Security Payload.\n   Such\
    \ a switch SHOULD default to allowing unauthenticated messages.\n   Confidentiality\
    \ issues are addressed by the IP Security Architecture\n   and the IP Encapsulating\
    \ Security Payload documents [IPv6-SA, IPv6-\n   ESP].\n"
- title: 5.2 ICMP Attacks
  contents:
  - "5.2 ICMP Attacks\n   ICMP messages may be subject to various attacks.  A complete\n\
    \   discussion can be found in the IP Security Architecture [IPv6-SA].  A\n  \
    \ brief discussion of such attacks and their prevention is as follows:\n   1.\
    \ ICMP messages may be subject to actions intended to cause the\n      receiver\
    \ believe the message came from a different source than the\n      message originator.\
    \  The protection against this attack can be\n      achieved by applying the IPv6\
    \ Authentication mechanism [IPv6-Auth]\n      to the ICMP message.\n   2. ICMP\
    \ messages may be subject to actions intended to cause the\n      message or the\
    \ reply to it go to a destination different than the\n      message originator's\
    \ intention.  The ICMP checksum calculation\n      provides a protection mechanism\
    \ against changes by a malicious\n      interceptor in the destination and source\
    \ address of the IP packet\n      carrying that message, provided the ICMP checksum\
    \ field is\n      protected against change by authentication [IPv6-Auth] or\n\
    \      encryption [IPv6-ESP] of the ICMP message.\n   3. ICMP messages may be\
    \ subject to changes in the message fields, or\n      payload.  The authentication\
    \ [IPv6-Auth] or encryption [IPv6-ESP]\n      of the ICMP message is a protection\
    \ against such actions.\n   4. ICMP messages may be used as attempts to perform\
    \ denial of service\n      attacks by sending back to back erroneous IP packets.\
    \  An\n      implementation that correctly followed section 2.4, paragraph (f)\n\
    \      of this specifications, would be protected by the ICMP error rate\n   \
    \   limiting mechanism.\n"
- title: 6. References
  contents:
  - "6. References\n   [IPv6]       Deering, S. and R. Hinden, \"Internet Protocol,\
    \ Version\n                6, (IPv6) Specification\", RFC 2460, December 1998.\n\
    \   [IPv6-ADDR]  Hinden, R. and S. Deering, \"IP Version 6 Addressing\n      \
    \          Architecture\", RFC 2373, July 1998.\n   [IPv6-DISC]  Narten, T., Nordmark,\
    \ E. and W. Simpson, \"Neighbor\n                Discovery for IP Version 6 (IPv6)\"\
    , RFC 2461, December\n                1998.\n   [RFC-792]    Postel, J., \"Internet\
    \ Control Message Protocol\", STD 5,\n                RFC 792, September 1981.\n\
    \   [RFC-1122]   Braden, R., \"Requirements for Internet Hosts -\n           \
    \     Communication Layers\", STD 5, RFC 1122, August 1989.\n   [PMTU]       McCann,\
    \ J., Deering, S. and J. Mogul, \"Path MTU\n                Discovery for IP version\
    \ 6\", RFC 1981, August 1996.\n   [RFC-2119]   Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n                Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [IPv6-SA]    Kent, S. and R. Atkinson, \"Security Architecture\
    \ for the\n                Internet Protocol\", RFC 2401, November 1998.\n   [IPv6-Auth]\
    \  Kent, S. and R. Atkinson, \"IP Authentication Header\",\n                RFC\
    \ 2402, November 1998.\n   [IPv6-ESP]   Kent, S. and R. Atkinson, \"IP Encapsulating\
    \ Security\n                Protocol (ESP)\", RFC 2406, November 1998.\n"
- title: 7. Acknowledgments
  contents:
  - "7. Acknowledgments\n   The document is derived from previous ICMP drafts of the\
    \ SIPP and\n   IPng working group.\n   The IPng working group and particularly\
    \ Robert Elz, Jim Bound, Bill\n   Simpson, Thomas Narten, Charlie Lynn, Bill Fink,\
    \ Scott Bradner,\n   Dimitri Haskin, and Bob Hinden (in chronological order) provided\n\
    \   extensive review information and feedback.\n"
- title: 8. Authors' Addresses
  contents:
  - "8. Authors' Addresses\n   Alex Conta\n   Lucent Technologies Inc.\n   300 Baker\
    \ Ave, Suite 100\n   Concord, MA 01742\n   USA\n   Phone: +1 978 287-2842\n  \
    \ EMail: aconta@lucent.com\n   Stephen Deering\n   Cisco Systems, Inc.\n   170\
    \ West Tasman Drive\n   San Jose, CA 95134-1706\n   USA\n   Phone: +1 408 527-8213\n\
    \   EMail: deering@cisco.com\n"
- title: Appendix A - Changes from RFC 1885
  contents:
  - "Appendix A - Changes from RFC 1885\n   Version 2-02\n    - Excluded mentioning\
    \ informational replies from paragraph (f.2) of\n      section 2.4.\n    - In\
    \ \"Upper layer notification\" sections changed \"upper-layer\n      protocol\"\
    \ and \"User Interface\" to \"process\".\n    - Changed section 5.2, item 2 and\
    \ 3 to also refer to AH\n      authentication.\n    - Removed item 5. from section\
    \ 5.2 on denial of service attacks.\n    - Updated phone numbers and Email addresses\
    \ in the \"Authors'\n      Addresses\" section.\n   Version 2-01\n    - Replaced\
    \ all references to \"576 octets\" as the maximum for an ICMP\n      message size\
    \ with \"minimum IPv6 MTU\" as defined by the base IPv6\n      specification.\n\
    \    - Removed rate control from informational messages.\n    - Added requirement\
    \ that receivers ignore Code value in Packet Too\n      Big message.\n    - Removed\
    \ \"Not a Neighbor\" (code 2) from destination unreachable\n      message.\n \
    \   - Fixed typos and update references.\n   Version 2-00\n    - Applied rate\
    \ control to informational messages\n    - Removed section 2.4 on Group Management\
    \ ICMP messages\n    - Removed references to IGMP in Abstract and Section 1.\n\
    \    - Updated references to other IPv6 documents\n    - Removed references to\
    \ RFC-1112 in Abstract, and Section 1, and to\n      RFC-1191 in section 1, and\
    \ section 3.2\n    - Added security section\n    - Added Appendix A - changes\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1998).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
