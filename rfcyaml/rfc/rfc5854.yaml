- contents:
  - '                The Metalink Download Description Format

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document specifies Metalink, an XML-based download description\n
    \  format.  Metalink describes download locations (mirrors),\n   cryptographic
    hashes, and other information.  Clients can\n   transparently use this information
    to reliably transfer files.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc5854.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  3\n     1.1.  Examples . . . . . . . . . . . . . . . . . . . . .
    . . . .  4\n     1.2.  Namespace and Version  . . . . . . . . . . . . . . . .
    . .  5\n     1.3.  Notational Conventions . . . . . . . . . . . . . . . . . .
    \ 5\n   2.  Metalink Documents . . . . . . . . . . . . . . . . . . . . . .  6\n
    \  3.  Common Metalink Constructs . . . . . . . . . . . . . . . . . .  7\n     3.1.
    \ Text Constructs  . . . . . . . . . . . . . . . . . . . . .  7\n     3.2.  Date
    Constructs  . . . . . . . . . . . . . . . . . . . . .  8\n   4.  Metalink Element
    Definitions . . . . . . . . . . . . . . . . .  8\n     4.1.  Container Elements
    . . . . . . . . . . . . . . . . . . . .  8\n       4.1.1.  The \"metalink:metalink\"
    Element  . . . . . . . . . . .  8\n       4.1.2.  The \"metalink:file\" Element
    \ . . . . . . . . . . . . .  9\n       4.1.3.  The \"metalink:pieces\" Element
    \ . . . . . . . . . . . . 12\n     4.2.  Metadata Elements  . . . . . . . . .
    . . . . . . . . . . . 12\n       4.2.1.  The \"metalink:copyright\" Element .
    . . . . . . . . . . 12\n       4.2.2.  The \"metalink:description\" Element .
    . . . . . . . . . 13\n       4.2.3.  The \"metalink:generator\" Element . . .
    . . . . . . . . 13\n       4.2.4.  The \"metalink:hash\" Element  . . . . . .
    . . . . . . . 14\n       4.2.5.  The \"metalink:identity\" Element  . . . . .
    . . . . . . 15\n       4.2.6.  The \"metalink:language\" Element  . . . . . .
    . . . . . 15\n       4.2.7.  The \"metalink:logo\" Element  . . . . . . . . .
    . . . . 16\n       4.2.8.  The \"metalink:metaurl\" Element . . . . . . . . .
    . . . 16\n       4.2.9.  The \"metalink:origin\" Element  . . . . . . . . . .
    . . 18\n       4.2.10. The \"metalink:os\" Element  . . . . . . . . . . . . .
    . 18\n       4.2.11. The \"metalink:published\" Element . . . . . . . . . . .
    18\n       4.2.12. The \"metalink:publisher\" Element . . . . . . . . . . . 18\n
    \      4.2.13. The \"metalink:signature\" Element . . . . . . . . . . . 19\n       4.2.14.
    The \"metalink:size\" Element  . . . . . . . . . . . . . 20\n       4.2.15. The
    \"metalink:updated\" Element . . . . . . . . . . . . 20\n       4.2.16. The \"metalink:url\"
    Element . . . . . . . . . . . . . . 20\n       4.2.17. The \"metalink:version\"
    Element . . . . . . . . . . . . 21\n   5.  Extending Metalink . . . . . . . .
    . . . . . . . . . . . . . . 21\n     5.1.  Extensions from Non-Metalink Vocabularies
    \ . . . . . . . . 21\n     5.2.  Extensions to the Metalink Vocabulary  . . .
    . . . . . . . 21\n     5.3.  Processing Foreign Markup  . . . . . . . . . . .
    . . . . . 22\n     5.4.  Extension Elements . . . . . . . . . . . . . . . . .
    . . . 22\n       5.4.1.  Simple Extension Elements  . . . . . . . . . . . . .
    . 22\n       5.4.2.  Structured Extension Elements  . . . . . . . . . . . . 23\n
    \  6.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 23\n     6.1.
    \ XML Namespace Registration . . . . . . . . . . . . . . . . 23\n     6.2.  application/metalink4+xml
    MIME type  . . . . . . . . . . . 23\n   7.  Security Considerations  . . . . .
    . . . . . . . . . . . . . . 24\n     7.1.  Digital Signatures . . . . . . . .
    . . . . . . . . . . . . 25\n     7.2.  URIs and IRIs  . . . . . . . . . . . .
    . . . . . . . . . . 26\n     7.3.  Spoofing . . . . . . . . . . . . . . . . .
    . . . . . . . . 26\n     7.4.  Cryptographic Hashes . . . . . . . . . . . . .
    . . . . . . 26\n   8.  References . . . . . . . . . . . . . . . . . . . . . .
    . . . . 27\n     8.1.  Normative References . . . . . . . . . . . . . . . . .
    . . 27\n     8.2.  Informative References . . . . . . . . . . . . . . . . . .
    28\n   Appendix A.  Acknowledgements and Contributors . . . . . . . . . . 30\n
    \  Appendix B.  RELAX NG Compact Schema . . . . . . . . . . . . . . . 31\n   Index
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Metalink is a document format based on Extensible Markup
    Language\n   (XML) that describes a file or list of files to be downloaded from
    a\n   server.  Metalinks can list a number of files, each with an\n   extensible
    set of attached metadata.  Each listed file can have a\n   description, multiple
    cryptographic hashes, and a list of Uniform\n   Resource Identifiers (URIs) from
    which it is available.\n   Often, identical copies of a file are accessible in
    multiple\n   locations on the Internet over a variety of protocols, such as File\n
    \  Transfer Protocol (FTP), Hypertext Transfer Protocol (HTTP), and\n   Peer-to-Peer
    (P2P).  In some cases, users are shown a list of these\n   multiple download locations
    (mirror servers) and must manually select\n   one based on geographical location,
    priority, or bandwidth.  This is\n   done to distribute the load across multiple
    servers, and to give\n   human users the opportunity to choose a download location
    that they\n   expect to work best for them.\n   At times, individual servers can
    be slow, outdated, or unreachable,\n   but this cannot be determined until the
    download has been initiated.\n   This can lead to the user canceling the download
    and needing to\n   restart it.  During downloads, errors in transmission can corrupt
    the\n   file.  There are no easy ways to repair these files.  For large\n   downloads,
    this can be especially troublesome.  Any of the number of\n   problems that can
    occur during a download lead to frustration on the\n   part of users, and bandwidth
    wasted with retransmission.\n   Knowledge about availability of a download on
    mirror servers can be\n   acquired and maintained by the operators of the origin
    server or by a\n   third party.  This knowledge, together with cryptographic hashes,\n
    \  digital signatures, and more, can be stored in a machine-readable\n   Metalink
    file.  The Metalink file can transfer this knowledge to the\n   user agent, which
    can peruse it in automatic ways or present the\n   information to a human user.
    \ User agents can fall back to alternate\n   mirrors if the current one has an
    issue.  Thereby, clients are\n   enabled to work their way to a successful download
    under adverse\n   circumstances.  All this can be done transparently to the human
    user\n   and the download is much more reliable and efficient.  In contrast, a\n
    \  traditional HTTP redirect to one mirror conveys only comparatively\n   minimal
    information -- a referral to a single server, and there is no\n   provision in
    the HTTP protocol to handle failures.\n   Other features that some clients provide
    include multi-source\n   downloads, where chunks of a file are downloaded from
    multiple\n   mirrors (and optionally, Peer-to-Peer) simultaneously, which\n   frequently
    results in a faster download.  Metalinks can leverage\n   HTTP, FTP, and Peer-to-Peer
    protocols together, because regardless of\n   the protocol over which the Metalink
    was obtained, it can make a\n   resource accessible through other protocols.  If
    the Metalink was\n   obtained from a trusted source, included verification metadata
    can\n   solve trust issues when downloading files from replica servers\n   operated
    by third parties.  Metalinks also provide structured\n   information about downloads
    that can be indexed by search engines.\n"
  - contents:
    - "1.1.  Examples\n   A brief, Metalink Document that describes a single file:\n
      \  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <metalink xmlns=\"urn:ietf:params:xml:ns:metalink\">\n
      \    <file name=\"example.ext\">\n       <size>14471447</size>\n       <url>ftp://ftp.example.com/example.ext</url>\n
      \      <url>http://example.com/example.ext</url>\n       <metaurl mediatype=\"torrent\">\n
      \      http://example.com/example.ext.torrent</metaurl>\n     </file>\n   </metalink>\n
      \  A more extensive Metalink Document that describes two files:\n <?xml version=\"1.0\"
      encoding=\"UTF-8\"?>\n <metalink xmlns=\"urn:ietf:params:xml:ns:metalink\">\n
      \  <published>2009-05-15T12:23:23Z</published>\n   <file name=\"example.ext\">\n
      \    <size>14471447</size>\n     <identity>Example</identity>\n     <version>1.0</version>\n
      \    <language>en</language>\n     <description>\n     A description of the
      example file for download.\n     </description>\n     <hash type=\"sha-256\">f0ad929cd259957e160ea442eb80986b5f01...</hash>\n
      \    <url location=\"de\"\n          priority=\"1\">ftp://ftp.example.com/example.ext</url>\n
      \    <url location=\"fr\"\n          priority=\"1\">http://example.com/example.ext</url>\n
      \    <metaurl mediatype=\"torrent\"\n          priority=\"2\">http://example.com/example.ext.torrent</metaurl>\n
      \  </file>\n   <file name=\"example2.ext\">\n     <size>14471447</size>\n     <identity>Example2</identity>\n
      \    <version>1.0</version>\n     <language>en</language>\n     <description>\n
      \    Another description for a second file.\n     </description>\n     <hash
      type=\"sha-256\">2f548ce50c459a0270e85a7d63b2383c5523...</hash>\n     <url location=\"de\"\n
      \         priority=\"1\">ftp://ftp.example.com/example2.ext</url>\n     <url
      location=\"fr\"\n          priority=\"1\">http://example.com/example2.ext</url>\n
      \    <metaurl mediatype=\"torrent\"\n          priority=\"2\">http://example.com/example2.ext.torrent</metaurl>\n
      \  </file>\n </metalink>\n"
    title: 1.1.  Examples
  - contents:
    - "1.2.  Namespace and Version\n   The XML Namespaces URI [REC-xml-names] for
      the XML data format\n   described in this specification is:\n   urn:ietf:params:xml:ns:metalink\n
      \  For convenience, this data format may be referred to as \"Metalink\",\n   which
      this specification uses internally.\n"
    title: 1.2.  Namespace and Version
  - contents:
    - "1.3.  Notational Conventions\n   This specification describes conformance of
      Metalink Documents.\n   Additionally, it places some requirements on Metalink
      Processors.\n   This specification uses the namespace prefix \"metalink:\" for
      the\n   Namespace URI identified in Section 1.2, above.  Note that the choice\n
      \  of namespace prefix is arbitrary and not semantically significant.\n   Metalink
      is specified using terms from the XML Infoset\n   [REC-xml-infoset].  However,
      this specification uses a shorthand for\n   two common terms: the phrase \"Information
      Item\" is omitted when\n   naming Element Information Items and Attribute Information
      Items.\n   Therefore, when this specification uses the term \"element,\" it
      is\n   referring to an Element Information Item in Infoset terms.  Likewise,\n
      \  when it uses the term \"attribute,\" it is referring to an Attribute\n   Information
      Item.\n   Some sections of this specification are illustrated with fragments
      of\n   a non-normative RELAX NG Compact schema [RELAX-NG].  However, the\n   text
      of this specification provides the definition of conformance.  A\n   complete
      schema appears in Appendix B.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
      and \"OPTIONAL\" in this\n   document are to be interpreted as described in
      BCP 14, [RFC2119], as\n   scoped to those conformance targets.\n"
    title: 1.3.  Notational Conventions
  title: 1.  Introduction
- contents:
  - "2.  Metalink Documents\n   This specification describes Metalink Documents.\n
    \  A Metalink Document describes a file or group of files, how to access\n   them,
    and metadata that identifies them.  Its root is the metalink:\n   metalink element.\n
    \  namespace metalink = \"urn:ietf:params:xml:ns:metalink\"\n   start = metalinkMetalink\n
    \  Metalink Documents are specified in terms of the XML Information Set,\n   serialized
    as XML 1.0 [REC-xml] and identified with the \"application/\n   metalink4+xml\"
    media type.\n   Metalink Documents MUST be well-formed XML.  This specification
    does\n   not define a Document Type Definition (DTD) for Metalink Documents,\n
    \  and hence it does not require them to be valid (in the sense used by\n   XML).\n
    \  Metalink allows the use of Internationalized Resource Identifiers\n   (IRIs),
    encoded according to [RFC3987].  Every URI [RFC3986] is also\n   an IRI, so a
    URI may be used wherever an IRI is named below.  There\n   is one special consideration:
    when an IRI that is not also a URI is\n   given for dereferencing, it MUST be
    mapped to a URI using the steps\n   in Section 3.1 of [RFC3987].\n   Any element
    defined by this specification MAY have an xml:lang\n   attribute, whose content
    indicates the natural language for the\n   element and its descendents.  The language
    context is only\n   significant for elements and attributes declared to be \"Language-\n
    \  Sensitive\" by this specification.  Requirements regarding the content\n   and
    interpretation of xml:lang are specified in XML 1.0 [REC-xml],\n   Section 2.12.\n
    \  metalinkCommonAttributes =\n      attribute xml:lang { metalinkLanguageTag
    }?,\n      undefinedAttribute*\n   All leading and trailing whitespace is part
    of the element content\n   and MUST NOT be ignored.  Consequently, it is disallowed
    for elements\n   where the defined type does not allow whitespace, such as dates,\n
    \  integers, or IRIs.  Some XML-generating implementations erroneously\n   insert
    whitespace around values by default, and such implementations\n   will generate
    invalid Metalink Documents.\n   Metalink Documents that do not follow this specification
    are invalid\n   and SHOULD NOT be used by Metalink Processors.\n   Metalink is
    an extensible format.  See Section 5 of this document for\n   a full description
    of how Metalink Documents can be extended.\n"
  title: 2.  Metalink Documents
- contents:
  - "3.  Common Metalink Constructs\n   Many Metalink elements share common structures.
    \ This section defines\n   those structures and their requirements for convenient
    reference by\n   the appropriate element definitions.\n   When an element is identified
    as being a particular kind of\n   construct, it inherits the corresponding requirements
    from that\n   construct's definition in this section.\n"
  - contents:
    - "3.1.  Text Constructs\n   A Text construct contains human-readable text, usually
      short in\n   length.\n   metalinkTextConstruct =\n      metalinkCommonAttributes,\n
      \     text\n   For example, a metalink:description with text content:\n   ...\n
      \  <description>\n   A description of the example file for download.\n   </description>\n
      \  ...\n   The content of the Text construct MUST NOT contain child elements.\n
      \  Such text is intended to be presented to humans in a readable\n   fashion.
      \ Thus, whitespace could be collapsed (including line\n   breaks), and text
      could be displayed using typographic techniques\n   such as justification and
      proportional fonts.\n"
    title: 3.1.  Text Constructs
  - contents:
    - "3.2.  Date Constructs\n   A Date construct is an element whose content MUST
      conform to the\n   \"date-time\" production in [RFC3339].  In addition, an uppercase
      \"T\"\n   character MUST be used to separate date and time, and an uppercase\n
      \  \"Z\" character MUST be present in the absence of a numeric time zone\n   offset.\n
      \  metalinkDateConstruct =\n      metalinkCommonAttributes,\n      xsd:dateTime\n
      \  Such date values happen to be compatible with the following\n   specifications:
      [ISO.8601.1988], [NOTE-datetime-19980827], and\n   [REC-xmlschema-2-20041028].\n
      \  Example Date constructs:\n   ...\n   <updated>2010-05-01T12:15:02Z</updated>\n
      \  ...\n   <updated>2010-05-01T12:15:02.25Z</updated>\n   ...\n   <updated>2010-05-01T12:15:02+01:00</updated>\n
      \  ...\n   <updated>2010-05-01T12:15:02.25+01:00</updated>\n   ...\n"
    title: 3.2.  Date Constructs
  title: 3.  Common Metalink Constructs
- contents:
  - '4.  Metalink Element Definitions

    '
  - contents:
    - '4.1.  Container Elements

      '
    - contents:
      - "4.1.1.  The \"metalink:metalink\" Element\n   The \"metalink:metalink\" element
        is the document (i.e., top-level)\n   element of a Metalink Document, acting
        as a container for metadata\n   and data associated with the listed files.
        \ It contains one or more\n   metalink:file child elements that consist of
        Metadata elements.\n   metalinkMetalink =\n      element metalink:metalink
        {\n         metalinkCommonAttributes,\n         (metalinkFile+\n          &
        metalinkGenerator?\n          & metalinkOrigin?\n          & metalinkPublished?\n
        \         & metalinkUpdated?\n          & extensionElement*)\n      }\n   The
        following child elements are defined by this specification (note\n   that
        the presence of some of these elements is required):\n   o  metalink:metalink
        elements MUST contain one or more metalink:file\n      elements.\n   o  metalink:metalink
        elements MAY contain exactly one metalink:\n      generator element and MUST
        NOT contain more than one such element.\n   o  metalink:metalink elements
        SHOULD contain exactly one metalink:\n      origin element and MUST NOT contain
        more than one such element.\n   o  metalink:metalink elements MAY contain
        exactly one metalink:\n      published element and MUST NOT contain more than
        one such element.\n   o  metalink:metalink elements MAY contain exactly one
        metalink:\n      updated element and MUST NOT contain more than one such element.\n"
      - contents:
        - "4.1.1.1.  Providing Textual Content\n   Experience teaches that downloads
          providing textual content are, in\n   general, more useful than those that
          do not.  Some applications (one\n   example is full-text indexers) require
          a minimum amount of text to\n   function reliably and predictably.  Metalink
          publishers should be\n   aware of this.  It is RECOMMENDED that each metalink:file
          element\n   contain a non-empty metalink:description element, a non-empty\n
          \  metalink:identity element, a non-empty metalink:version element, and\n
          \  a non-empty metalink:publisher element when these elements are\n   present.
          \ However, the absence of metalink:description, metalink:\n   identity,
          metalink:version, and metalink:publisher is not an error,\n   and Metalink
          Processors MUST NOT fail to function correctly as a\n   consequence of such
          an absence.\n"
        title: 4.1.1.1.  Providing Textual Content
      title: 4.1.1.  The "metalink:metalink" Element
    - contents:
      - "4.1.2.  The \"metalink:file\" Element\n   The \"metalink:file\" element represents
        an individual file, acting as\n   a container for metadata and data associated
        with the file.  Each\n   unique file described in a Metalink Document MUST
        have its own\n   metalink:file element.\n   All metalink:url elements contained
        in each metalink:file element\n   SHOULD lead to identical files.  That is,
        each metalink:url element\n   should be an alternative location for the same
        file and each\n   metalink:metaurl element should provide metadata to retrieve
        the same\n   file in another way, such as a Peer-to-Peer network.  Refer to\n
        \  Sections 4.2.8 and 4.2.16 for more information.\n   metalinkFile =\n      element
        metalink:file {\n         metalinkCommonAttributes,\n         attribute name
        { text },\n         (metalinkCopyright?\n          & metalinkDescription?\n
        \         & metalinkHash*\n          & metalinkIdentity?\n          & metalinkLanguage*\n
        \         & metalinkLogo?\n          & metalinkMetaURL*\n          & metalinkOS*\n
        \         & metalinkPieces*\n          & metalinkPublisher?\n          & metalinkSignature?\n
        \         & metalinkSize?\n          & metalinkURL*\n          & metalinkVersion?\n
        \         & extensionElement*)\n      }\n   This specification assigns no
        significance to the order of metalink:\n   file elements or to the order of
        metalink:url or metalink:metaurl\n   elements.  Significance is determined
        by the value of the \"priority\"\n   attribute of the metalink:url or metalink:metaurl
        elements.\n   The following child elements are defined by this specification
        (the\n   presence of some of them is required):\n   o  metalink:file elements
        MAY contain exactly one metalink:copyright\n      element and MUST NOT contain
        more than one such element.\n   o  metalink:file elements MAY contain exactly
        one metalink:\n      description element and MUST NOT contain more than one
        such\n      element.\n   o  metalink:file elements MAY contain exactly one
        metalink:identity\n      element and MUST NOT contain more than one such element.\n
        \  o  metalink:file elements MAY contain one or more metalink:hash\n      elements.\n
        \  o  metalink:file elements MAY contain one or more metalink:language\n      elements.\n
        \  o  metalink:file elements MAY contain exactly one metalink:logo\n      element
        and MUST NOT contain more than one such element.\n   o  metalink:file elements
        MAY contain one or more metalink:os\n      element.\n   o  metalink:file elements
        MUST contain at least one metalink:url\n      element or at least one metalink:metaurl
        element.  Typically,\n      metalink:file elements contain more than one metalink:url
        element\n      to provide multiple download sources.\n   o  metalink:file
        elements MAY contain one or more metalink:pieces\n      elements.\n   o  metalink:file
        elements MAY contain exactly one metalink:publisher\n      element and MUST
        NOT contain more than one such element.\n   o  metalink:file elements MAY
        contain one or more metalink:signature\n      elements.\n   o  metalink:file
        elements SHOULD contain exactly one metalink:size\n      element and MUST
        NOT contain more than one such element.\n   o  metalink:file elements MAY
        contain exactly one metalink:version\n      element and MUST NOT contain more
        than one such element.\n"
      - contents:
        - "4.1.2.1.  The \"name\" Attribute\n   metalink:file elements MUST have a
          \"name\" attribute, which contains\n   the local file name to which the
          downloaded file will be written.\n   Hence, if a Metalink Document contains
          multiple metalink:file\n   elements, the value of the \"name\" attribute
          MUST be unique for each.\n   Directory information can also be contained
          in a \"path/file\" format\n   only, as in:\n   <file name=\"debian-amd64/sarge/Contents-amd64.gz\">\n
          \  In this example, a subdirectory \"debian-amd64/sarge/\" will be created\n
          \  and a file named \"Contents-amd64.gz\" will be created inside it.\n      Security
          Note: The path MUST NOT contain any directory traversal\n      directives
          or information.  The path MUST be relative.  The path\n      MUST NOT begin
          with a \"/\", \"./\", or \"../\"; contain \"/../\"; or end\n      with \"/..\".\n"
        title: 4.1.2.1.  The "name" Attribute
      title: 4.1.2.  The "metalink:file" Element
    - contents:
      - "4.1.3.  The \"metalink:pieces\" Element\n   The \"metalink:pieces\" element
        acts as a container for a list of\n   cryptographic hashes of contiguous,
        non-overlapping pieces of the\n   file.  The cryptographic hashes MUST be
        listed in the same order as\n   the corresponding pieces appear in the file,
        starting at the\n   beginning of the file.  Metalink Documents MAY contain
        one or\n   multiple metalink:pieces container elements, if each \"type\" attribute\n
        \  of metalink:pieces has a unique value.\n   metalinkPieces =\n      element
        metalink:pieces {\n         attribute length { xsd:positiveInteger },\n         attribute
        type { text },\n         metalinkHash+\n      }\n"
      - contents:
        - "4.1.3.1.  The \"type\" Attribute\n   metalink:pieces elements MUST have
          a \"type\" attribute.\n   The Internet Assigned Numbers Authority (IANA)
          registry named \"Hash\n   Function Textual Names\" defines values for hash
          types.  See\n   Section 7.4 for security implications.\n"
        title: 4.1.3.1.  The "type" Attribute
      - contents:
        - "4.1.3.2.  The \"length\" Attribute\n   metalink:pieces elements MUST have
          a \"length\" attribute, which is a\n   positive integer that describes the
          length of the pieces of the file\n   in octets.  The whole file is divided
          into non-overlapping pieces of\n   this length, starting from the beginning
          of the file.  That is, every\n   piece MUST be the same size, apart from
          the last piece, which is the\n   remainder.  The last piece extends to the
          end of the file, and it\n   therefore MAY be shorter than the other pieces.\n"
        title: 4.1.3.2.  The "length" Attribute
      title: 4.1.3.  The "metalink:pieces" Element
    title: 4.1.  Container Elements
  - contents:
    - '4.2.  Metadata Elements

      '
    - contents:
      - "4.2.1.  The \"metalink:copyright\" Element\n   The \"metalink:copyright\"
        element is a Text construct that conveys a\n   human-readable copyright for
        a file.  It is Language-Sensitive.\n   metalinkCopyright =\n      element
        metalink:copyright {\n        metalinkTextConstruct\n      }\n"
      title: 4.2.1.  The "metalink:copyright" Element
    - contents:
      - "4.2.2.  The \"metalink:description\" Element\n   The \"metalink:description\"
        element is a Text construct that conveys a\n   human-readable file description.
        \ It is Language-Sensitive.\n   metalinkDescription =\n      element metalink:description
        {\n        metalinkTextConstruct\n      }\n"
      title: 4.2.2.  The "metalink:description" Element
    - contents:
      - "4.2.3.  The \"metalink:generator\" Element\n   The \"metalink:generator\"
        element's content identifies the generating\n   agent name and version used
        to generate a Metalink Document, for\n   debugging and other purposes.\n   metalinkGenerator
        =\n      element metalink:generator {\n        metalinkTextConstruct\n      }\n
        \  The metalink:generator element's content is defined below in ABNF\n   notation
        [RFC5234].\n   token          = 1*<any CHAR except CTLs or separators>\n   separators
        \    = \"(\" / \")\" / \"<\" / \">\" / \"@\"\n                  / \",\" /
        \";\" / \":\" / \"\\\" / DQUOTE\n                  / \"/\" / \"[\" / \"]\"
        / \"?\" / \"=\"\n                  / \"{\" / \"}\" / SP / HTAB\n   agent         =
        token [\"/\" agent-version]\n   agent-version = token\n   Examples:\n   ...\n
        \  <generator>MirrorBrain/2.11</generator>\n   ...\n   <generator>MirrorManager/1.2.11</generator>\n
        \  ...\n   <generator>metalinktools/0.3.6</generator>\n   ...\n   <generator>MetalinkEditor/1.2.0</generator>\n
        \  ...\n   Although any token character MAY appear in an agent-version, this\n
        \  token SHOULD only be used for a version identifier (i.e., successive\n
        \  versions of the same agent SHOULD only differ in the agent-version\n   portion
        of the agent value).\n"
      title: 4.2.3.  The "metalink:generator" Element
    - contents:
      - "4.2.4.  The \"metalink:hash\" Element\n   The \"metalink:hash\" element is
        a Text construct that conveys a\n   cryptographic hash for a file.  All hashes
        are encoded in lowercase\n   hexadecimal format.  Hashes are used to verify
        the integrity of a\n   complete file or portion of a file to determine if
        the file has been\n   transferred without any errors.\n   metalinkHash =\n
        \     element metalink:hash {\n        attribute type { text }?,\n        text\n
        \     }\n   Metalink Documents MAY contain one or multiples hashes of a complete\n
        \  file. metalink:hash elements with a \"type\" attribute MUST contain a\n
        \  hash of the complete file.  In this example, both SHA-1 and SHA-256\n   hashes
        of the complete file are included.\n ...\n   <hash type=\"sha-1\">a97fcf6ba9358f8a6f62beee4421863d3e52b080</hash>\n
        \  <hash type=\"sha-256\">fc87941af7fd7f03e53b34af393f4c14923d74...</hash>\n
        ...\n   Metalink Documents MAY also contain hashes for individual pieces of
        a\n   file. metalink:hash elements that are inside a metalink:pieces\n   container
        element have a hash for that specific piece or chunk of the\n   file, and
        are of the same hash type as the metalink:pieces element in\n   which they
        are contained.  Metalink Documents MAY contain one or\n   multiple metalink:pieces
        container elements, if each \"type\" attribute\n   of metalink:pieces has
        a unique value.\n   metalink:hash elements without a \"type\" attribute MUST
        contain a hash\n   for that specific piece or chunk of the file and MUST be
        listed in\n   the same order as the corresponding pieces appear in the file,\n
        \  starting at the beginning of the file.  The size of the piece is\n   equal
        to the value of the \"length\" attribute of the metalink:pieces\n   element,
        apart from the last piece, which is the remainder.  See\n   Section 4.1.3.2
        for more information on the size of pieces.\n   In this example, SHA-1 and
        SHA-256 hashes of the complete file are\n   included, along with four SHA-1
        piece hashes.\n ...\n   <hash type=\"sha-1\">a97fcf6ba9358f8a6f62beee4421863d3e52b080</hash>\n
        \  <hash type=\"sha-256\">fc87941af7fd7f03e53b34af393f4c14923d74...</hash>\n
        \  <pieces length=\"1048576\" type=\"sha-1\">\n     <hash>d96b9a4b92a899c2099b7b31bddb5ca423bb9b30</hash>\n
        \    <hash>10d68f4b1119014c123da2a0a6baf5c8a6d5ba1e</hash>\n     <hash>3e84219096435c34e092b17b70a011771c52d87a</hash>\n
        \    <hash>67183e4c3ab892d3ebe8326b7d79eb62d077f487</hash>\n   </pieces>\n
        ...\n"
      - contents:
        - "4.2.4.1.  The \"type\" Attribute\n   metalink:hash elements MUST have a
          \"type\" attribute, if and only if\n   it contains a hash of the complete
          file.  The IANA registry named\n   \"Hash Function Textual Names\" defines
          values for hash types.\n   metalink:hash elements MUST NOT have a \"type\"
          attribute, if they are\n   inside a metalink:pieces container element.  See
          Section 7.4 for\n   security implications.\n"
        title: 4.2.4.1.  The "type" Attribute
      title: 4.2.4.  The "metalink:hash" Element
    - contents:
      - "4.2.5.  The \"metalink:identity\" Element\n   The \"metalink:identity\" element
        is a Text construct that conveys a\n   human-readable identity for a file.
        \ For example, the identity of\n   Firefox 3.5 would be \"Firefox\".\n   metalinkIdentity
        =\n      element metalink:identity {\n        metalinkTextConstruct\n      }\n"
      title: 4.2.5.  The "metalink:identity" Element
    - contents:
      - "4.2.6.  The \"metalink:language\" Element\n   The \"metalink:language\" element
        is a Text construct that conveys a\n   code for the language of a file, per
        [RFC5646].\n   Multiple metalink:language elements are allowed, for instance,
        to\n   describe a file such as an binary installation program that provides\n
        \  multiple language options, a movie with multiple language tracks, or\n
        \  a document in multiple languages.\n   metalinkLanguage =\n      element
        metalink:language {\n        metalinkTextConstruct\n      }\n"
      title: 4.2.6.  The "metalink:language" Element
    - contents:
      - "4.2.7.  The \"metalink:logo\" Element\n   The \"metalink:logo\" element's
        content is an IRI reference [RFC3987]\n   that identifies an image that provides
        visual identification for a\n   file.\n   metalinkLogo =\n      element metalink:logo
        {\n        metalinkCommonAttributes,\n        (metalinkUri)\n      }\n   The
        image SHOULD have an aspect ratio of one (horizontal) to one\n   (vertical)
        and SHOULD be suitable for presentation at a small size.\n"
      title: 4.2.7.  The "metalink:logo" Element
    - contents:
      - "4.2.8.  The \"metalink:metaurl\" Element\n   The \"metalink:metaurl\" element
        contains the IRI of a metadata file,\n   also known as a metainfo file, about
        a resource to download.  For\n   example, this could be the IRI of a BitTorrent
        .torrent file, a\n   Metalink Document, or other type of metadata file.  Note
        that the\n   information in the metalink:hash element does not apply to these\n
        \  metadata files but to the files that are described by them.\n   metalinkMetaURL
        =\n      element metalink:metaurl {\n         metalinkCommonAttributes,\n
        \        attribute priority { xsd:positiveInteger {\n            maxInclusive
        = \"999999\"}}?,\n         attribute mediatype { text },\n         attribute
        name { text }?,\n         (metalinkUri)\n      }\n"
      - contents:
        - "4.2.8.1.  The \"priority\" Attribute\n   metalink:metaurl elements MAY
          have a priority attribute.  Values MUST\n   be positive integers between
          1 and 999999.  Lower values indicate a\n   higher priority. metalink:metaurl
          elements without a priority\n   attribute are considered to have the lowest
          priority, i.e., 999999.\n   The priority values of metalink:metaurl and
          metalink:url elements are\n   compared and those with the lowest values,
          starting with 1, are used\n   first.  Multiple metalink:metaurl and metalink:url
          elements MAY have\n   the same priority, i.e., one BitTorrent .torrent file
          and three FTP\n   URIs could have priority=\"1\".  See also the \"priority\"
          attribute of\n   the metalink:url element.\n"
        title: 4.2.8.1.  The "priority" Attribute
      - contents:
        - "4.2.8.2.  The \"mediatype\" Attribute\n   metalink:metaurl elements MUST
          have a \"mediatype\" attribute that\n   indicates the Multipurpose Internet
          Mail Extensions (MIME) media type\n   [RFC4288] of the metadata file available
          at the IRI.  In the case of\n   BitTorrent as specified in [BITTORRENT],
          the value \"torrent\" is\n   REQUIRED.  Types without \"/\" are reserved.
          \ Currently, \"torrent\" is\n   the only reserved value.\n   Values for
          this attribute are defined below in ABNF notation\n   [RFC5234].\n   media-type
          = (type-name \"/\" subtype-name) / media-reserved\n   media-reserved = \"torrent\"\n
          \  type-name = <Defined in Section 4.2 of RFC 4288>\n   subtype-name = <Defined
          in Section 4.2 of RFC 4288>\n"
        title: 4.2.8.2.  The "mediatype" Attribute
      - contents:
        - "4.2.8.3.  The \"name\" Attribute\n   metalink:metaurl elements MAY have
          a \"name\" attribute that indicates\n   a specific file in a BitTorrent
          .torrent file or a Metalink Document\n   that describes multiple files.\n
          \  Directory information can also be contained in a \"path/file\" format\n
          \  only, as in:\n   <metaurl\n        mediatype=\"torrent\" name=\"debian-amd64/sarge/Contents-amd64.gz\">\n
          \  In this example, a file named \"Contents-amd64.gz\" is indicated, in
          a\n   \"debian-amd64/sarge/\" subdirectory.  The path MUST NOT contain any\n
          \  directory traversal directives or information.  The path MUST be\n   relative.
          \ The path MUST NOT begin with a \"/\", \"./\", or \"../\";\n   contain
          \"/../\"; or end with \"/..\".\n"
        title: 4.2.8.3.  The "name" Attribute
      title: 4.2.8.  The "metalink:metaurl" Element
    - contents:
      - "4.2.9.  The \"metalink:origin\" Element\n   The \"metalink:origin\" element
        is an IRI where the Metalink Document\n   was originally published.  If the
        dynamic attribute of metalink:\n   origin is \"true\", then updated versions
        of the Metalink can be found\n   at this IRI.\n   metalinkOrigin =\n      element
        metalink:origin {\n        metalinkCommonAttributes,\n        attribute dynamic
        { xsd:boolean }?,\n        (metalinkUri)\n      }\n"
      - contents:
        - "4.2.9.1.  The \"dynamic\" Attribute\n   The metalink:origin element MAY
          have a \"dynamic\" attribute, set to\n   \"true\" or \"false\", which tells
          if a Metalink at the origin IRI will\n   contain dynamic updated information
          or if it is static and not likely\n   to be updated.\n"
        title: 4.2.9.1.  The "dynamic" Attribute
      title: 4.2.9.  The "metalink:origin" Element
    - contents:
      - "4.2.10.  The \"metalink:os\" Element\n   The \"metalink:os\" element is a
        Text construct that conveys an\n   Operating System that a file is suitable
        for.  The IANA registry\n   named \"Operating System Names\" defines values
        for OS types.\n   metalinkOS =\n      element metalink:os {\n        metalinkTextConstruct\n
        \     }\n"
      title: 4.2.10.  The "metalink:os" Element
    - contents:
      - "4.2.11.  The \"metalink:published\" Element\n   The \"metalink:published\"
        element is a Date construct indicating an\n   instant in time associated with
        an event early in the life cycle of\n   the entry.\n   metalinkPublished =\n
        \     element metalink:published {\n        metalinkDateConstruct\n      }\n
        \  Typically, metalink:published will be associated with the initial\n   creation
        or first availability of the resource.  The metalink:updated\n   element is
        used when a Metalink Document has been updated after\n   initial publication.\n"
      title: 4.2.11.  The "metalink:published" Element
    - contents:
      - "4.2.12.  The \"metalink:publisher\" Element\n   The \"metalink:publisher\"
        element contains a human-readable group or\n   other entity that has published
        the file described in the Metalink\n   Document and an IRI for more information.\n
        \  metalinkPublisher =\n      element metalink:publisher {\n        metalinkCommonAttributes,\n
        \       attribute name { text },\n        attribute url { metalinkUri }?\n
        \     }\n"
      - contents:
        - "4.2.12.1.  The \"name\" Attribute\n   The metalink:publisher element MUST
          have a \"name\" attribute that\n   indicates the human-readable name of
          the publisher.\n"
        title: 4.2.12.1.  The "name" Attribute
      - contents:
        - "4.2.12.2.  The \"url\" Attribute\n   The metalink:publisher element MAY
          have a \"url\" attribute whose value\n   MUST be an IRI reference [RFC3987].\n"
        title: 4.2.12.2.  The "url" Attribute
      title: 4.2.12.  The "metalink:publisher" Element
    - contents:
      - "4.2.13.  The \"metalink:signature\" Element\n   The \"metalink:signature\"
        element is a Text construct that conveys a\n   digital signature for a file
        described in a Metalink Document.\n   Digital signatures verify that a file
        is from the entity that has\n   signed it.\n   Support in Metalink Processors
        for digital signatures included in\n   this element is OPTIONAL.  Note that
        the signing of Metalink\n   Documents, as opposed to a digital signature of
        a file described in a\n   Metalink Document, is covered in Section 7.1.\n
        \  metalinkSignature =\n      element metalink:signature {\n        attribute
        mediatype { text },\n        metalinkTextConstruct\n      }\n   Example with
        an OpenPGP signature [RFC4880]:\n   <signature mediatype=\"application/pgp-signature\">\n
        \  -----BEGIN PGP SIGNATURE-----\n   Version: GnuPG v1.4.10 (GNU/Linux)\n
        \  iEYEABECAAYFAkrxdXQACgkQeOEcayedXJHqFwCfd1p/HhRf/iDvYhvFbTrQPz+p\n   p3oAoO9lKHoOqOE0EMB3zmMcLoYUrNkg\n
        \  =ggAf\n   -----END PGP SIGNATURE-----\n   </signature>\n"
      - contents:
        - "4.2.13.1.  The \"mediatype\" Attribute\n   metalink:signature elements
          MUST have a \"mediatype\" attribute that\n   indicates the MIME media type
          [RFC4288] of the included digital\n   signature.\n   Values for this attribute
          are defined below in ABNF notation\n   [RFC5234].\n   media-type = type-name
          \"/\" subtype-name\n   type-name = <Defined in Section 4.2 of RFC 4288>\n
          \  subtype-name = <Defined in Section 4.2 of RFC 4288>\n"
        title: 4.2.13.1.  The "mediatype" Attribute
      title: 4.2.13.  The "metalink:signature" Element
    - contents:
      - "4.2.14.  The \"metalink:size\" Element\n   The \"metalink:size\" element
        indicates the length of the linked\n   content in octets.  This is the content
        length of the representation\n   returned when the IRI is mapped to a URI
        and dereferenced.  Note that\n   the \"metalink:size\" element MUST override
        the actual content length\n   of the representation as reported by the underlying
        protocol, and\n   those that do not match MUST be discarded by Metalink Processors.\n
        \  This value MUST be a non-negative integer.\n   metalinkSize =\n      element
        metalink:size {\n        xsd:nonNegativeInteger\n      }\n"
      title: 4.2.14.  The "metalink:size" Element
    - contents:
      - "4.2.15.  The \"metalink:updated\" Element\n   The \"metalink:updated\" element
        is a Date construct indicating the\n   most recent instant in time when a
        Metalink was modified in a way the\n   publisher considers significant.  Therefore,
        not all modifications\n   necessarily result in a changed metalink:updated
        value.\n   metalinkUpdated =\n      element metalink:updated {\n        metalinkDateConstruct\n
        \     }\n   Publishers MAY change the value of this element over time.\n"
      title: 4.2.15.  The "metalink:updated" Element
    - contents:
      - "4.2.16.  The \"metalink:url\" Element\n   The \"metalink:url\" element contains
        a file IRI.  Most metalink:file\n   container elements will contain multiple
        metalink:url elements, and\n   each one SHOULD be a valid alternative to download
        the same file.\n   The metalink:url elements SHOULD be resolvable and, if
        resolvable,\n   SHOULD lead to identical files.\n   Metalink Processors MUST
        filter out invalid files obtained from\n   \"metalink:url\" elements by using
        information in the metalink:size\n   element and metalink:hash elements.\n
        \  metalinkURL =\n      element metalink:url {\n         metalinkCommonAttributes,\n
        \        attribute location { xsd:string {\n            minLength = \"2\"
        \ maxLength=\"2\"}\n         }?,\n         attribute priority { xsd:positiveInteger
        {\n            maxInclusive = \"999999\"}}?,\n         (metalinkUri)\n      }\n"
      - contents:
        - "4.2.16.1.  The \"priority\" Attribute\n   metalink:url elements MAY have
          a priority attribute.  Values MUST be\n   positive integers between 1 and
          999999.  Lower values indicate a\n   higher priority. metalink:url elements
          without a priority attribute\n   are considered to have the lowest priority,
          i.e., 999999.  Multiple\n   metalink:url elements can have the same priority,
          i.e., ten different\n   mirrors could have priority=\"1\".\n"
        title: 4.2.16.1.  The "priority" Attribute
      - contents:
        - "4.2.16.2.  The \"location\" Attribute\n   metalink:url elements MAY have
          a \"location\" attribute, which is a\n   [ISO3166-1] alpha-2 two letter
          country code for the geographical\n   location of the physical server an
          IRI is used to access.\n"
        title: 4.2.16.2.  The "location" Attribute
      title: 4.2.16.  The "metalink:url" Element
    - contents:
      - "4.2.17.  The \"metalink:version\" Element\n   The \"metalink:version\" element
        is a Text construct that conveys a\n   human-readable version for a file.
        \ The version of Firefox 3.5 would\n   be \"3.5\".\n   metalinkVersion =\n
        \     element metalink:version {\n        metalinkTextConstruct\n      }\n"
      title: 4.2.17.  The "metalink:version" Element
    title: 4.2.  Metadata Elements
  title: 4.  Metalink Element Definitions
- contents:
  - '5.  Extending Metalink

    '
  - contents:
    - "5.1.  Extensions from Non-Metalink Vocabularies\n   This specification describes
      Metalink's XML vocabulary.\n"
    title: 5.1.  Extensions from Non-Metalink Vocabularies
  - contents:
    - "5.2.  Extensions to the Metalink Vocabulary\n   The Metalink namespace is reserved
      for future forward-compatible\n   revisions of Metalink.  Future versions of
      this specification could\n   add new elements and attributes to the Metalink
      markup vocabulary.\n   Software written to conform to this version of the specification
      will\n   not be able to process such markup correctly and, in fact, will not\n
      \  be able to distinguish it from markup error.  For the purposes of\n   this
      discussion, unrecognized markup from the Metalink vocabulary\n   will be considered
      \"foreign markup\".\n"
    title: 5.2.  Extensions to the Metalink Vocabulary
  - contents:
    - "5.3.  Processing Foreign Markup\n   Metalink Processors that encounter foreign
      markup in a location that\n   is legal according to this specification MUST
      ignore such foreign\n   markup, in particular they MUST NOT stop processing
      or signal an\n   error.  It might be the case that the Metalink Processor is
      able to\n   process the foreign markup correctly and does so.  Otherwise, such\n
      \  markup is termed \"unknown foreign markup\".\n   When unknown foreign markup
      is encountered as a child of metalink:\n   file, metalink:metalink, Metalink
      Processors MAY bypass the markup\n   and any textual content and MUST NOT change
      their behavior as a\n   result of the markup's presence.\n"
    title: 5.3.  Processing Foreign Markup
  - contents:
    - "5.4.  Extension Elements\n   Metalink allows foreign markup anywhere in a Metalink
      document,\n   except where it is explicitly forbidden.  Child elements of metalink:\n
      \  file and metalink:metalink are considered Metadata elements and are\n   described
      below.  The role of other foreign markup is undefined by\n   this specification.\n"
    - contents:
      - "5.4.1.  Simple Extension Elements\n   A Simple Extension element MUST NOT
        have any attributes or child\n   elements.  The element MAY contain character
        data or be empty.\n   Simple Extension elements are not Language-Sensitive.\n
        \  simpleExtensionElement =\n      element * - metalink:* {\n         text\n
        \     }\n   The element can be interpreted as a simple property (or name/value\n
        \  pair) of the parent element that encloses it.  The pair consisting of\n
        \  the namespace URI of the element and the local name of the element\n   can
        be interpreted as the name of the property.  The character data\n   content
        of the element can be interpreted as the value of the\n   property.  If the
        element is empty, then the property value can be\n   interpreted as an empty
        string.\n"
      title: 5.4.1.  Simple Extension Elements
    - contents:
      - "5.4.2.  Structured Extension Elements\n   The root element of a Structured
        Extension element MUST have at least\n   one attribute or child element.  It
        MAY have attributes, it MAY\n   contain well-formed XML content (including
        character data), or it MAY\n   be empty.  Structured Extension elements are
        Language-Sensitive.\n   structuredExtensionElement =\n      element * - metalink:*
        {\n         (attribute * { text }+,\n            (text|anyElement)*)\n       |
        (attribute * { text }*,\n          (text?, anyElement+, (text|anyElement)*))\n
        \     }\n   The structure of a Structured Extension element, including the
        order\n   of its child elements, could be significant.\n   This specification
        does not provide an interpretation of a Structured\n   Extension element.
        \ The syntax of the XML contained in the element\n   (and an interpretation
        of how the element relates to its containing\n   element) is defined by the
        specification of the Metalink extension.\n"
      title: 5.4.2.  Structured Extension Elements
    title: 5.4.  Extension Elements
  title: 5.  Extending Metalink
- contents:
  - '6.  IANA Considerations

    '
  - contents:
    - "6.1.  XML Namespace Registration\n   This document makes use of the XML registry
      specified in [RFC3688].\n   Accordingly, IANA has made the following registration:\n
      \  Registration request for the Metalink namespace:\n   URI: urn:ietf:params:xml:ns:metalink\n
      \  Registrant Contact: See the \"Authors' Addresses\" section of this\n   document.\n
      \  XML: None.  Namespace URIs do not represent an XML specification.\n"
    title: 6.1.  XML Namespace Registration
  - contents:
    - "6.2.  application/metalink4+xml MIME type\n   A Metalink Document, when serialized
      as XML 1.0, can be identified\n   with the following media type:\n   Type name:
      \ application\n   Subtype name:  metalink4+xml\n   Required parameters:  None.\n
      \  Optional parameters:\n      \"charset\":  This parameter has semantics identical
      to the charset\n         parameter of the \"application/xml\" media type as
      specified in\n         [RFC3023].\n   Encoding considerations:  Identical to
      those of \"application/xml\" as\n      described in [RFC3023], Section 3.2.\n
      \  Security considerations:  As defined in this specification.\n      In addition,
      as this media type uses the \"+xml\" convention, it\n      shares the same security
      considerations as described in [RFC3023],\n      Section 10.\n   Interoperability
      considerations:  There are no known interoperability\n      issues.\n   Published
      specification:  This specification.\n   Applications that use this media type:
      \ File transfer applications.\n   Additional information:\n   Magic number(s):
      \ None.\n   File extension:  .meta4\n   Macintosh File Type code:  TEXT\n   Person
      and email address to contact for further information:\n      Anthony Bryan <anthonybryan@gmail.com>\n
      \  Intended usage:  COMMON\n   Restrictions on usage:  None.\n   Author:  Anthony
      Bryan <anthonybryan@gmail.com>\n   Change controller:  IESG\n"
    title: 6.2.  application/metalink4+xml MIME type
  title: 6.  IANA Considerations
- contents:
  - "7.  Security Considerations\n   Because Metalink is an XML-based format, existing
    XML security\n   mechanisms can be used to secure its content.\n   Publishers
    of Metalink Documents may have sound reasons for signing\n   otherwise-unprotected
    content.  For example, a merchant might\n   digitally sign a Metalink that lists
    a file download to verify its\n   origin.  Other merchants may wish to sign and
    encrypt Metalink\n   Documents that list digital songs that have been purchased.
    \ Many\n   other examples are conceivable.\n   Publishers are encouraged to offer
    Metalink documents via\n   authenticated HTTP under Transport Layer Security (TLS)
    as specified\n   in [RFC2818].  The choice of a secure content layer rests entirely\n
    \  with the content providers.\n   Publishers are also encouraged to include digital
    signatures of the\n   files within the Metalink Documents, if they are available,
    as\n   described in Section 4.2.13.\n   Normally, a publisher is in the best position
    to know how strong the\n   protective signing ought to be on their content.  Thus,
    a publisher\n   can choose weak or strong cryptography, and a Metalink Processor\n
    \  SHOULD normally accept that.  There are potential applications where\n   the
    Metalink Processor chooses to reject weak cryptography, but that\n   is not envisioned
    as the common use case.\n"
  - contents:
    - "7.1.  Digital Signatures\n   The root of a Metalink Document (i.e., metalink:metalink)
      or any\n   metalink:file element MAY have an Enveloped Signature, as described\n
      \  by XML-Signature and Syntax Processing [REC-xmldsig-core].\n   Although signing
      and verifying signatures are both OPTIONAL, an\n   implementation that supports
      either feature SHOULD implement RSA with\n   a minimum key size of 2048 with
      SHA-256.\n   Metalink Processors that support verifying signatures MUST reject\n
      \  Metalink Documents with invalid signatures.\n   Metalink Processors MUST
      NOT reject a Metalink Document containing\n   such a signature because they
      are not capable of verifying it; they\n   MUST continue processing and MAY inform
      the user of their failure to\n   validate the signature.\n   In other words,
      the presence of an element with the namespace URI\n   \"http://www.w3.org/2000/09/xmldsig#\"
      and a local name of \"Signature\"\n   as a child of the document element MUST
      NOT cause a Metalink\n   Processor to fail merely because of its presence.\n
      \  Other elements in a Metalink Document MUST NOT be signed unless their\n   definitions
      explicitly specify such a capability.\n   Section 6.5.1 of [REC-xmldsig-core]
      requires support for Canonical\n   XML [REC-xml-c14n].  However, many - implementers
      do not use it\n   because signed XML documents - enclosed in other XML documents
      have\n   their signatures - broken.  Thus, Metalink Processors that verify\n
      \  signed Metalink Documents MUST be able to canonicalize with the\n   exclusive
      XML canonicalization method identified by the URI\n   \"http://www.w3.org/2001/10/xml-exc-c14n#\",
      as specified in Exclusive\n   XML Canonicalization [REC-xml-exc-c14n].\n   Section
      4.4.2 of [REC-xmldsig-core] requires support for Digital\n   Signature Algorithm
      (DSA) signatures and recommends support for RSA\n   signatures.  However, because
      of the much greater popularity in the\n   market of RSA versus DSA, Metalink
      Processors that verify signed\n   Metalink Documents MUST be able to verify
      RSA signatures, but do not\n   need be able to verify DSA signatures.  Due to
      security issues that\n   can arise if the keying material for message authentication
      code\n   (MAC) authentication is not handled properly, Metalink Documents\n
      \  SHOULD NOT use MACs for signatures.\n"
    title: 7.1.  Digital Signatures
  - contents:
    - "7.2.  URIs and IRIs\n   Metalink Processors handle URIs and IRIs.  See Section
      7 of [RFC3986]\n   and Section 8 of [RFC3987] for security considerations related
      to\n   their handling and use.\n"
    title: 7.2.  URIs and IRIs
  - contents:
    - "7.3.  Spoofing\n   There is potential for spoofing attacks where the attacker
      publishes\n   Metalink Documents with false information.  Malicious publishers\n
      \  might create Metalink Documents containing inaccurate information\n   anywhere
      in the document.  Unaware downloaders could be deceived into\n   downloading
      malicious or worthless content.  Malicious publishers\n   could attempt a distributed
      denial-of-service attack by inserting\n   unrelated IRIs into Metalink Documents.\n
      \  Digital signatures address the issue of spoofing.\n"
    title: 7.3.  Spoofing
  - contents:
    - "7.4.  Cryptographic Hashes\n   Currently, some of the hash types defined in
      the IANA registry named\n   \"Hash Function Textual Names\" are considered insecure.
      \ These include\n   the whole Message Digest family of algorithms that are not
      suitable\n   for cryptographically strong verification.  Malicious parties could\n
      \  provide files that appear to be identical to another file because of\n   a
      collision, i.e., the weak cryptographic hashes of the intended file\n   and
      a substituted malicious file could match.\n   Metalink Generators and Processors
      MUST support \"sha-256\", which is\n   SHA-256, as specified in [FIPS-180-3],
      and MAY support stronger\n   hashes.\n   If a Metalink Document contains hashes,
      it SHOULD include \"sha-256\",\n   which is SHA-256, or stronger.  It MAY also
      include other hashes from\n   the IANA registry named \"Hash Function Textual
      Names\".\n"
    title: 7.4.  Cryptographic Hashes
  title: 7.  Security Considerations
- contents:
  - '8.  References

    '
  - contents:
    - "8.1.  Normative References\n   [BITTORRENT] Cohen, B., \"The BitTorrent Protocol
      Specification\",\n                BITTORRENT 11031, February 2008,\n                <http://www.bittorrent.org/beps/bep_0003.html>.\n
      \  [FIPS-180-3] National Institute of Standards and Technology (NIST),\n                \"Secure
      Hash Standard (SHS)\", FIPS PUB 180-3,\n                October 2008.\n   [ISO3166-1]
      \ International Organization for Standardization, \"ISO\n                3166-
      1:2006.  Codes for the representation of names of\n                countries
      and their subdivisions -- Part 1: Country\n                codes\", November
      2006.\n   [REC-xml]    Yergeau, F., Paoli, J., Bray, T., Sperberg-McQueen, C.,\n
      \               and E. Maler, \"Extensible Markup Language (XML) 1.0\n                (Fifth
      Edition)\", W3C REC-xml-20081126, November 2008,\n                <http://www.w3.org/TR/2008/REC-xml-20081126/>.\n
      \  [REC-xml-c14n]\n                Boyer, J., \"Canonical XML Version 1.0\",
      W3C REC REC-xml-\n                c14n-20010315, March 2001,\n                <http://www.w3.org/TR/2001/REC-xml-c14n-20010315>.\n
      \  [REC-xml-exc-c14n]\n                Eastlake, D., Boyer, J., and J. Reagle,
      \"Exclusive XML\n                Canonicalization Version 1.0\", W3C REC REC-xml-exc-c14n-\n
      \               20020718, July 2002,\n                <http://www.w3.org/TR/2002/REC-xml-exc-c14n-20020718/>.\n
      \  [REC-xml-infoset]\n                Cowan, J. and R. Tobin, \"XML Information
      Set (Second\n                Edition)\", W3C REC-xml-infoset-20040204, February
      2004,\n                <http://www.w3.org/TR/2004/REC-xml-infoset-20040204/>.\n
      \  [REC-xml-names]\n                Hollander, D., Bray, T., Tobin, R., and
      A. Layman,\n                \"Namespaces in XML 1.0 (Third Edition)\", W3C REC-xml-\n
      \               names-20091208, December 2009,\n                <http://www.w3.org/TR/2009/REC-xml-names-20091208/>.\n
      \  [REC-xmldsig-core]\n                Solo, D., Reagle, J., and D. Eastlake,
      \"XML-Signature\n                Syntax and Processing (Second Edition)\",\n
      \               W3C REC-xmldsig- core-20080610, June 2008,\n                <http://www.w3.org/TR/2008/REC-xmldsig-core-20080610/>.\n
      \  [RFC2119]    Bradner, S., \"Key words for use in RFCs to Indicate\n                Requirement
      Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2818]    Rescorla, E., \"HTTP
      Over TLS\", RFC 2818, May 2000.\n   [RFC3023]    Murata, M., St. Laurent, S.,
      and D. Kohn, \"XML Media\n                Types\", RFC 3023, January 2001.\n
      \  [RFC3339]    Klyne, G. and C. Newman, \"Date and Time on the Internet:\n
      \               Timestamps\", RFC 3339, July 2002.\n   [RFC3986]    Berners-Lee,
      T., Fielding, R., and L. Masinter, \"Uniform\n                Resource Identifier
      (URI): Generic Syntax\", STD 66,\n                RFC 3986, January 2005.\n
      \  [RFC3987]    Duerst, M. and M. Suignard, \"Internationalized Resource\n                Identifiers
      (IRIs)\", RFC 3987, January 2005.\n   [RFC4288]    Freed, N. and J. Klensin,
      \"Media Type Specifications and\n                Registration Procedures\",
      BCP 13, RFC 4288,\n                December 2005.\n   [RFC5234]    Crocker,
      D., Ed. and P. Overell, \"Augmented BNF for\n                Syntax Specifications:
      ABNF\", STD 68, January 2008.\n   [RFC5646]    Phillips, A. and M. Davis, \"Tags
      for Identifying\n                Languages\", BCP 47, RFC 5646, September 2009.\n"
    title: 8.1.  Normative References
  - contents:
    - "8.2.  Informative References\n   [ISO.8601.1988]\n                International
      Organization for Standardization, \"Data\n                elements and interchange
      formats - Information\n                interchange - Representation of dates
      and times\",\n                ISO Standard 8601, June 1988.\n   [NOTE-datetime-19980827]\n
      \               Wolf, M. and C. Wicksteed, \"Date and Time Formats\",\n                W3C
      NOTE-datetime-19980827, August 1998,\n                <http://www.w3.org/TR/1998/NOTE-datetime-19980827>.\n
      \  [REC-xmlschema-2-20041028]\n                Malhotra, A. and P. Biron, \"XML
      Schema Part 2: Datatypes\n                Second Edition\", W3C REC-xmlschema-2-20041028,\n
      \               October 2004,\n                <http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/>.\n
      \  [RELAX-NG]   Clark, J., \"RELAX NG Compact Syntax\", December 2001,\n                <http
      ://www.oasis-open.org/committees/relax-ng/\n                compact-20021121.html>.\n
      \  [RFC3688]    Mealling, M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n
      \               January 2004.\n   [RFC4287]    Nottingham, M. and R. Sayre,
      \"The Atom Syndication\n                Format\", RFC 4287, December 2005.\n
      \  [RFC4880]    Callas, J., Donnerhacke, L., Finney, H., Shaw, D., and\n                R.
      Thayer, \"OpenPGP Message Format\", RFC 4880,\n                November 2007.\n"
    title: 8.2.  Informative References
  title: 8.  References
- contents:
  - "Appendix A.  Acknowledgements and Contributors\n   The layout and shape of this
    document relies heavily on work\n   pioneered in the Atom Syndication Format as
    specified in [RFC4287].\n   The content and concepts within are a product of the
    Metalink\n   community.  Key contributors provided early implementations: A. Bram\n
    \  Neijt, Hampus Wessman, Darius Liktorius, Manuel Subredu, Michael\n   Burford,
    Giorgio Maone, Nils Maier, Max Velasques, Manolo Valdes,\n   Hayden Legendre,
    Frederick Cheung, Rene Leonhardt, Per Oyvind\n   Karlsen, Matt Domsch, Yazsoft,
    KGet developers, Free Download Manager\n   developers, Orbit developers, Arne
    Babenhauserheide, Mathias\n   Berchtold, Xienzhenyu and TheWorld Browser developers,
    Xi Software,\n   Agostino Russo, and James Antill.\n   The Metalink community
    has dozens of contributors who contributed to\n   the evolution of Metalink or
    proposed ideas and wording for this\n   document, including:\n   Paul Burkhead,
    Kristian Weston, Nicolas Alvarez, Urs Wolfer, Bridget\n   and Ethan Fletcher,
    Patrick Ruckstuhl, Sebastien Willemijns, Micah\n   Cowan, Ruben Kerkhof, Danny
    Ayers, Nick Dominguez, Gary Zellerbach,\n   James Clark, Daniel Stenberg, John
    and Sandra Sowder, Salvatore\n   Musumeci, Steve Eshelman, Lucas Hewett, Ryan
    Cronin, Dave Winquist,\n   Bob Denison, Wes Shelton, Josh Colbert, Steve Kleisath,
    Chad Neptune,\n   Derick Cordoba, Nick Carrabba, Chris Carrabba, Erin Solari,
    Ryan\n   Alexander, Tom Mainville, Janie Wargo, Jason Hansen, Tim Bray, Dan\n
    \  Brickley, Markus Hofmann, Dan Connolly, Tim Berners-Lee, Louis\n   Suarez-Potts,
    Ross Smith, Jeff Covey, Ed Lee, Shawn Wilsher, Mike\n   Connor, Johan Svedberg,
    Kees Cook, Dedric Carter, and Debi Goulding.\n   We also thank the Anthony Family,
    the Bryan Family, Juanita Anthony,\n   and Zimmy Bryan.\n   Special thanks to
    Eran Hammer-Lahav, document shepherd, and Lisa\n   Dusseault, Area Director.  We
    also thank the following contributors\n   for assistance and review: Mark Nottingham,
    Peter Saint-Andre, Julian\n   Reschke, Chris Newman, Ian Macfarlane, Dave Cridland,
    Barry Leiba,\n   Uri Blumenthal, Paul Hoffman, Felix Sasaki, Matthias Fuchs, Mark\n
    \  Baker, Scott Cantor, Brian Carpenter, Alexey Melnikov, Lars Eggert,\n   Pasi
    Eronen, Tim Polk, Dan Romascanu, and Bjoern Hoehrmann.\n   Peter Poeml wishes
    to acknowledge the support of SUSE Linux Products\n   GmbH / Novell Inc., where
    he was employed during much of the work on\n   this document.\n   This document
    is dedicated to Sonora Bryan.\n"
  title: Appendix A.  Acknowledgements and Contributors
- contents:
  - "Appendix B.  RELAX NG Compact Schema\n   This appendix is informative.\n   The
    Relax NG schema explicitly excludes elements in the Metalink\n   namespace that
    are not defined in this revision of the specification.\n   Requirements for Metalink
    Processors encountering such markup are\n   given in Sections 5.2 and 5.3.\n   #
    -*- rnc -*-\n   # RELAX NG Compact Syntax Grammar for the\n   # Metalink Format
    Specification Version 4\n   # Based on RFC 4287 schema\n   namespace local = \"\"\n
    \  namespace metalink = \"urn:ietf:params:xml:ns:metalink\"\n   namespace xsd
    = \"http://www.w3.org/2001/XMLSchema\"\n   # Common attributes\n   metalinkCommonAttributes
    =\n      attribute xml:lang { metalinkLanguageTag }?,\n      undefinedAttribute*\n
    \  # Text Constructs\n   metalinkTextConstruct =\n      metalinkCommonAttributes,\n
    \     text\n   # Date Construct\n   metalinkDateConstruct =\n      metalinkCommonAttributes,\n
    \     xsd:dateTime\n   start = metalinkMetalink\n   metalinkMetalink =\n      element
    metalink:metalink {\n         metalinkCommonAttributes,\n         (metalinkFile+\n
    \         & metalinkGenerator?\n          & metalinkOrigin?\n          & metalinkPublished?\n
    \         & metalinkUpdated?\n          & extensionElement*)\n      }\n   metalinkFile
    =\n      element metalink:file {\n         metalinkCommonAttributes,\n         attribute
    name { text },\n         (metalinkCopyright?\n          & metalinkDescription?\n
    \         & metalinkHash*\n          & metalinkIdentity?\n          & metalinkLanguage*\n
    \         & metalinkLogo?\n          & metalinkMetaURL*\n          & metalinkOS*\n
    \         & metalinkPieces*\n          & metalinkPublisher?\n          & metalinkSignature?\n
    \         & metalinkSize?\n          & metalinkURL*\n          & metalinkVersion?\n
    \         & extensionElement*)\n      }\n   metalinkPieces =\n      element metalink:pieces
    {\n         attribute length { xsd:positiveInteger },\n         attribute type
    { text },\n         metalinkHash+\n      }\n   metalinkCopyright =\n      element
    metalink:copyright {\n         metalinkTextConstruct\n      }\n   metalinkDescription
    =\n      element metalink:description {\n         metalinkTextConstruct\n      }\n
    \  metalinkGenerator =\n      element metalink:generator {\n         metalinkTextConstruct\n
    \     }\n   metalinkHash =\n        element metalink:hash {\n          attribute
    type { text }?,\n          text\n        }\n   metalinkIdentity =\n      element
    metalink:identity {\n         metalinkTextConstruct\n      }\n   metalinkLanguage
    =\n      element metalink:language {\n         metalinkTextConstruct\n      }\n
    \  metalinkLogo =\n      element metalink:logo {\n         metalinkCommonAttributes,\n
    \        (metalinkUri)\n      }\n   metalinkMetaURL =\n      element metalink:metaurl
    {\n         metalinkCommonAttributes,\n         attribute priority { xsd:positiveInteger
    {\n            maxInclusive = \"999999\"}}?,\n         attribute mediatype { text
    },\n         attribute name { text }?,\n         (metalinkUri)\n      }\n   metalinkOrigin
    =\n      element metalink:origin {\n         metalinkCommonAttributes,\n         attribute
    dynamic { xsd:boolean }?,\n         (metalinkUri)\n      }\n   metalinkOS =\n
    \     element metalink:os {\n         metalinkTextConstruct\n      }\n   metalinkPublished
    =\n      element metalink:published {\n         metalinkDateConstruct\n      }\n
    \  metalinkPublisher =\n      element metalink:publisher {\n         metalinkCommonAttributes,\n
    \        attribute name { text },\n         attribute url { metalinkUri }?\n      }\n
    \  metalinkSignature =\n      element metalink:signature {\n         attribute
    mediatype { text },\n         metalinkTextConstruct\n      }\n   metalinkSize
    =\n      element metalink:size {\n         xsd:nonNegativeInteger\n      }\n   metalinkUpdated
    =\n      element metalink:updated {\n         metalinkDateConstruct\n      }\n
    \  metalinkURL =\n      element metalink:url {\n         metalinkCommonAttributes,\n
    \        attribute location { xsd:string {\n            minLength = \"2\"  maxLength=\"2\"}\n
    \        }?,\n         attribute priority { xsd:positiveInteger {\n            maxInclusive
    = \"999999\"}}?,\n         (metalinkUri)\n      }\n   metalinkVersion =\n      element
    metalink:version {\n         metalinkTextConstruct\n      }\n   # As defined in
    RFC 3066 and compatible with RFC 5646\n   metalinkLanguageTag = xsd:string {\n
    \     pattern = \"[A-Za-z]{1,8}(-[A-Za-z0-9]{1,8})*\"\n   }\n   # Unconstrained;
    it's not entirely clear how IRI fit into\n   # xsd:anyURI so let's not try to
    constrain it here\n   metalinkUri = text\n   # Simple Extension\n   simpleExtensionElement
    =\n      element * - metalink:* {\n         text\n      }\n   # Structured Extension\n
    \  structuredExtensionElement =\n      element * - metalink:* {\n         (attribute
    * { text }+,\n            (text|anyElement)*)\n       | (attribute * { text }*,\n
    \         (text?, anyElement+, (text|anyElement)*))\n      }\n   # Other Extensibility\n
    \  extensionElement =\n      simpleExtensionElement | structuredExtensionElement\n
    \  undefinedAttribute =\n     attribute * - (xml:lang | local:*) { text }\n   undefinedContent
    = (text|anyForeignElement)*\n   anyElement =\n      element * {\n         (attribute
    * { text }\n          | text\n          | anyElement)*\n      }\n   anyForeignElement
    =\n      element * - metalink:* {\n         (attribute * { text }\n          |
    text\n          | anyElement)*\n   }\n   # EOF\n"
  title: Appendix B.  RELAX NG Compact Schema
- contents:
  - "Index\n   A\n      ABNF\n         metalinkGenerator  13\n         metaurl mediatype
    \ 17\n         signature mediatype  19\n      application/metalink4+xml Media
    Type  23\n   C\n      copyright XML element  12\n   D\n      description XML element
    \ 13\n   F\n      file XML element  10\n   G\n      generator XML element  13\n
    \     Grammar\n         metalinkCommonAttributes  7\n         metalinkCopyright
    \ 13\n         metalinkDateConstruct  8\n         metalinkDescription  13\n         metalinkFile
    \ 10\n         metalinkGenerator  13\n         metalinkHash  14\n         metalinkIdentity
    \ 15\n         metalinkLanguage  15\n         metalinkLogo  16\n         metalinkMetalink
    \ 8\n         metalinkMetaURL  16\n         metalinkOrigin  17\n         metalinkOS
    \ 18\n         metalinkPieces  12\n         metalinkPublished  18\n         metalinkPublisher
    \ 18\n         metalinkSignature  19\n         metalinkSize  20\n         metalinkTextConstruct
    \ 7\n         metalinkUpdated  20\n         metalinkURL  21\n         metalinkVersion
    \ 21\n         simpleExtensionElement  22\n         structuredExtensionElement
    \ 23\n   H\n      hash XML element  14\n   I\n      identity XML element  15\n
    \  L\n      language XML element  15\n      logo XML element  16\n   M\n      Media
    Type\n         application/metalink4+xml  23\n      metalink XML element  8\n
    \     metalinkCommonAttributes grammar production  7\n      metalinkCopyright
    grammar production  12\n      metalinkDateConstruct grammar production  8\n      metalinkDescription
    grammar production  13\n      metalinkFile grammar production  10\n      metalinkGenerator
    ABNF  13\n      metalinkGenerator grammar production  13\n      metalinkHash grammar
    production  14\n      metalinkIdentity grammar production  15\n      metalinkLanguage
    grammar production  15\n      metalinkLogo grammar production  16\n      metalinkMetalink
    grammar production  8\n      metalinkMetaURL grammar production  16\n      metalinkOrigin
    grammar production  17\n      metalinkOS grammar production  18\n      metalinkPieces
    grammar production  12\n      metalinkPublished grammar production  18\n      metalinkPublisher
    grammar production  18\n      metalinkSignature grammar production  19\n      metalinkSize
    grammar production  20\n      metalinkTextConstruct grammar production  7\n      metalinkUpdated
    grammar production  20\n      metalinkURL grammar production  21\n      metalinkVersion
    grammar production  21\n      metaurl mediatype ABNF  16\n      metaurl XML element
    \ 16\n   O\n      origin XML element  17\n      os XML element  18\n   P\n      pieces
    XML element  12\n      published XML element  18\n      publisher XML element
    \ 18\n   S\n      signature mediatype ABNF  19\n      signature XML element  19\n
    \     simpleExtensionElement grammar production  22\n      size XML element  20\n
    \     structuredExtensionElement grammar production  23\n   U\n      updated XML
    element  20\n      url XML element  20\n   V\n      version XML element  21\n
    \  X\n      XML Elements\n         copyright  12\n         description  13\n         file
    \ 9\n         generator  13\n         hash  14\n         identity  15\n         language
    \ 15\n         logo  16\n         metalink  8\n         metaurl  16\n         origin
    \ 17\n         os  18\n         pieces  12\n         published  18\n         publisher
    \ 18\n         signature  19\n         size  20\n         updated  20\n         url
    \ 20\n         version  21\n"
  title: Index
- contents:
  - "Authors' Addresses\n   Anthony Bryan\n   Pompano Beach, FL\n   USA\n   EMail:
    anthonybryan@gmail.com\n   URI:   http://www.metalinker.org\n   Tatsuhiro Tsujikawa\n
    \  Shiga\n   Japan\n   EMail: tatsuhiro.t@gmail.com\n   URI:   http://aria2.sourceforge.net\n
    \  Neil McNab\n   San Diego, CA\n   USA\n   EMail: neil@nabber.org\n   URI:   http://www.nabber.org\n
    \  Dr. med. Peter Poeml\n   MirrorBrain\n   Venloer Str. 317\n   Koeln  50823\n
    \  DE\n   Phone: +49 221 6778 333 8\n   EMail: peter@poeml.de\n   URI:   http://mirrorbrain.org/~poeml/\n"
  title: Authors' Addresses
