- title: __initial_text__
  contents:
  - '   The Protocol versus Document Points of View in Computer Protocols

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document contrasts two points of view: the \"document\" point\
    \ of\n   view, where digital objects of interest are like pieces of paper\n  \
    \ written and viewed by people, and the \"protocol\" point of view where\n   objects\
    \ of interest are composite dynamic network messages.  Although\n   each point\
    \ of view has a place, adherence to a document point of view\n   can be damaging\
    \ to protocol design.  By understanding both points of\n   view, conflicts between\
    \ them may be clarified and reduced.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   2.  Points of View . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  2\n       2.1.  The Basic Points of View . . . . . . . . . . . .\
    \ . . . .  3\n       2.2.  Questions of Meaning . . . . . . . . . . . . . . .\
    \ . . .  3\n             2.2.1.  Core Meaning . . . . . . . . . . . . . . . .\
    \ . .  3\n             2.2.2.  Adjunct Meaning. . . . . . . . . . . . . . . .\
    \ .  4\n       2.3.  Processing Models. . . . . . . . . . . . . . . . . . . .\
    \  5\n             2.3.1.  Amount of Processing . . . . . . . . . . . . . .  5\n\
    \             2.3.2.  Granularity of Processing. . . . . . . . . . . .  5\n  \
    \           2.3.3.  Extensibility of Processing. . . . . . . . . . .  6\n    \
    \   2.4.  Security and Canonicalization. . . . . . . . . . . . . .  6\n      \
    \       2.4.1.  Canonicalization . . . . . . . . . . . . . . . .  6\n        \
    \     2.4.2.  Digital Authentication . . . . . . . . . . . . .  8\n          \
    \   2.4.3.  Canonicalization and Digital Authentication. . .  8\n            \
    \ 2.4.4.  Encryption . . . . . . . . . . . . . . . . . . .  9\n       2.5.  Unique\
    \ Internal Labels . . . . . . . . . . . . . . . . . 10\n   3.  Examples . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . 11\n   4.  Resolution of the\
    \ Points of View . . . . . . . . . . . . . . . 11\n   5.  Conclusion . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . 12\n   6.  Security Considerations.\
    \ . . . . . . . . . . . . . . . . . . . 12\n   Informative References . . . .\
    \ . . . . . . . . . . . . . . . . . . 12\n   Author's Address . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . 14\n   Full Copyright Statement . . . . .\
    \ . . . . . . . . . . . . . . . . 15\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document contrasts: the \"document\" point of view,\
    \ where digital\n   objects of interest are thought of as pieces of paper written\
    \ and\n   viewed by people, and the \"protocol\" point of view, where objects\
    \ of\n   interest are composite dynamic network messages.  Those accustomed to\n\
    \   one point of view frequently have great difficulty appreciating the\n   other:\
    \  Even after they understand it, they almost always start by\n   considering\
    \ things from their accustomed point of view, assume that\n   most of the universe\
    \ of interest is best viewed from their\n   perspective, and commonly slip back\
    \ into thinking about things\n   entirely from that point of view.  Although each\
    \ point of view has a\n   place, adherence to a document point of view can be\
    \ damaging to\n   protocol design.  By understanding both points of view, conflicts\n\
    \   between them may be clarified and reduced.\n   Much of the IETF's traditional\
    \ work has concerned low level binary\n   protocol constructs.  These are almost\
    \ always viewed from the\n   protocol point of view.  But as higher level application\
    \ constructs\n   and syntaxes are involved in the IETF and other standards processes,\n\
    \   difficulties can arise due to participants who have the document\n   point\
    \ of view.  These two different points of view defined and\n   explored in section\
    \ 2 below.\n   Section 3 gives some examples.  Section 4 tries to synthesize the\n\
    \   views and give general design advice in areas that can reasonably be\n   viewed\
    \ either way.\n"
- title: 2.  Points of View
  contents:
  - "2.  Points of View\n   The following subsections contrast the document and protocol\
    \ points\n   of view.  Each viewpoint is EXAGGERATED for effect.\n   The document\
    \ point of view is indicated in paragraphs headed \"DOCUM\",\n   and the protocol\
    \ point of view is indicated in paragraphs headed\n   \"PROTO\".\n"
- title: 2.1.  The Basic Points of View
  contents:
  - "2.1.  The Basic Points of View\n   DOCUM: What is important are complete (digital)\
    \ documents, analogous\n      to pieces of paper, viewed by people.  A major concern\
    \ is to be\n      able to present such documents as directly as possible to a\
    \ court\n      or other third party.  Because what is presented to the person\
    \ is\n      all that is important, anything that can effect this, such as a\n\
    \      \"style sheet\" [CSS], MUST be considered part of the document.\n     \
    \ Sometimes it is forgotten that the \"document\" originates in a\n      computer,\
    \ may travel over, be processed in, and be stored in\n      computer systems,\
    \ and is viewed on a computer, and that such\n      operations may involve transcoding,\
    \ enveloping, or data\n      reconstruction.\n   PROTO: What is important are\
    \ bits on the wire generated and consumed\n      by well-defined computer protocol\
    \ processes.  No person ever sees\n      the full messages as such; it is only\
    \ viewed as a whole by geeks\n      when debugging, and even then they only see\
    \ some translated\n      visible form.  If one actually ever has to demonstrate\
    \ something\n      about such a message in a court or to a third party, there\
    \ isn't\n      any way to avoid having computer experts interpret it.  Sometimes\n\
    \      it is forgotten that pieces of such messages may end up being\n      included\
    \ in or influencing data displayed to a person.\n"
- title: 2.2.  Questions of Meaning
  contents:
  - "2.2.  Questions of Meaning\n   The document and protocol points of view have\
    \ radically different\n   concepts of the \"meaning\" of data.  The document oriented\
    \ tend to\n   consider \"meaning\" to a human reader extremely important, but\
    \ this is\n   something the protocol oriented rarely think about at all.\n   This\
    \ difference in point of view extends beyond the core meaning to\n   the meaning\
    \ of addenda to data.  Both core and addenda meaning are\n   discussed below.\n"
- title: 2.2.1.  Core Meaning
  contents:
  - "2.2.1.  Core Meaning\n   DOCUM: The \"meaning\" of a document is a deep and interesting\
    \ human\n      question related to volition.  It is probably necessary for the\n\
    \      document to include or reference human language policy and/or\n      warranty/disclaimer\
    \ information.  At an absolute minimum, some\n      sort of semantic labelling\
    \ is required.  The assumed situation is\n      always a person interpreting the\
    \ whole \"document\" without other\n      context.  Thus it is reasonable to consult\
    \ attorneys during\n      message design, to require that human-readable statements\
    \ be\n      \"within the four corners\" of the document, etc.\n   PROTO: The \"\
    meaning\" of a protocol message should be clear and\n      unambiguous from the\
    \ protocol specification.  It is frequently\n      defined in terms of the state\
    \ machines of the sender and recipient\n      processes and may have only the\
    \ most remote connection with human\n      volition.  Such processes have additional\
    \ context, and the message\n      is usually only meaningful with that additional\
    \ context.  Adding\n      any human-readable text that is not functionally required\
    \ is\n      silly.  Consulting attorneys during design is a bad idea that\n  \
    \    complicates the protocol and could tie a design effort in knots.\n"
- title: 2.2.2.  Adjunct Meaning
  contents:
  - "2.2.2.  Adjunct Meaning\n   Adjunct items can be added or are logical addenda\
    \ to a message.\n   DOCUM: From a document point of view, at the top level is\
    \ a person\n      looking at a document.  So adjunct items such as digital\n \
    \     signatures, person's names, dates, etc., must be carefully labeled\n   \
    \   as to meaning.  Thus a digital signature needs to include, in more\n     \
    \ or less human-readable form, what that signature means (is the\n      signer\
    \ a witness, author, guarantor, authorizer, or what?).\n      Similarly, a person's\
    \ name needs to be accompanied by that\n      person's role, such as editor, author,\
    \ subject, or contributor.\n      As another example, a date needs to be accompanied\
    \ by the\n      significance of the date, such as date of creation, modification,\n\
    \      distribution, or some other event.\n         Given the unrestrained scope\
    \ of what can be documented, there\n      is a risk of trying to enumerate and\
    \ standardize all possible\n      \"semantic tags\" for each kind of adjunct data\
    \ during in the design\n      process.  This can be a difficult, complex, and\
    \ essentially\n      infinite task (i.e., a rat hole).\n   PROTO: From a protocol\
    \ point of view, the semantics of the message\n      and every adjunct in it are\
    \ defined in the protocol specification.\n      Thus, if there is a slot for a\
    \ digital signature, person's name, a\n      date, or whatever, the party who\
    \ is to enter that data, the party\n      or parties who are to read it, and its\
    \ meaning are all pre-\n      defined.  Even if there are several possible meanings,\
    \ the\n      specific meaning that applies can be specified by a separate\n  \
    \    enumerated type field.  There is no reason for such a field to be\n     \
    \ directly human readable.  Only the \"meanings\" directly relevant to\n     \
    \ the particular protocol need be considered.  Another way to look\n      at this\
    \ is that the \"meaning\" of each adjunct, instead of being\n      pushed into\
    \ and coupled with the adjunct itself, as the document\n      point of view encourages,\
    \ is commonly promoted to the level of the\n      protocol specification, resulting\
    \ in simpler adjuncts.\n"
- title: 2.3.  Processing Models
  contents:
  - "2.3.  Processing Models\n   The document oriented and protocol oriented have\
    \ very different views\n   on what is likely to happen to an object.\n"
- title: 2.3.1.  Amount of Processing
  contents:
  - "2.3.1.  Amount of Processing\n   DOCUM: The model is of a quasi-static object\
    \ like a piece of paper.\n      About all one does to pieces of paper is transfer\
    \ them as a whole,\n      from one storage area to another, or add signatures,\
    \ date stamps,\n      or similar adjuncts.  (Possibly one might want an extract\
    \ from a\n      document or to combine multiple documents into a summary, but\
    \ this\n      isn't the common case.)\n   PROTO: The standard model of a protocol\
    \ message is as an ephemeral\n      composite, multi-level object created by a\
    \ source process and\n      consumed by a destination process.  Such a message\
    \ is constructed\n      from information contained in previously received messages,\n\
    \      locally stored information, local calculations, etc.  Quite\n      complex\
    \ processing is normal.\n"
- title: 2.3.2.  Granularity of Processing
  contents:
  - "2.3.2.  Granularity of Processing\n   DOCUM: The document view is generally of\
    \ uniform processing or\n      evaluation of the object being specified.  There\
    \ may be an\n      allowance for attachments or addenda, but, if so, they would\n\
    \      probably be simple, one level, self documenting attachments or\n      addenda.\
    \  (Separate processing of an attachment or addenda is\n      possible but not\
    \ usual.)\n   PROTO: Processing is complex and almost always affects different\n\
    \      pieces of the message differently.  Some pieces may be intended\n     \
    \ for use only by the destination process and may be extensively\n      processed\
    \ there.  Others may be present so that the destination\n      process can, at\
    \ some point, do minimal processing and forward them\n      in other messages\
    \ to yet more processes.  The object's structure\n      can be quite rich and\
    \ have multilevel or recursive aspects.\n      Because messages are processed\
    \ in a local context, elements of the\n      message may include items like a\
    \ signature that covers multiple\n      data elements, some of which are in the\
    \ message, some received in\n      previous messages, and some locally calculated.\n"
- title: 2.3.3.  Extensibility of Processing
  contents:
  - "2.3.3.  Extensibility of Processing\n   DOCUM: The document oriented don't usually\
    \ think of extensibility as\n      a major problem.  They assume that their design,\
    \ perhaps with some\n      simple version scheme, will meet all requirements.\
    \  Or, coming\n      from an SGML/DTD world of closed systems, they may assume\
    \ that\n      knowledge of new versions or extensions can be easily and\n    \
    \  synchronously distributed to all participating sites.\n   PROTO: Those who\
    \ are protocol oriented assume that protocols will\n      always need to be extended\
    \ and that it will not be possible to\n      update all implementations as such\
    \ extensions are deployed and/or\n      retired.  This is a difficult problem\
    \ but those from the protocol\n      point of view try to provide the tools needed.\
    \  For example, they\n      specify carefully defined versioning and extension/feature\n\
    \      labelling, including the ability to negotiate versions and\n      features\
    \ where possible and at least a specification of how\n      parties running different\
    \ levels should interact, providing\n      length/delimiting information for all\
    \ data so that it can be\n      skipped if not understood, and providing destination\
    \ labelling so\n      that a process can tell that it should ignore data except\
    \ for\n      passing it through to a later player.\n"
- title: 2.4.  Security and Canonicalization
  contents:
  - "2.4.  Security and Canonicalization\n   Security is a subtle area.  Sometime\
    \ problems can be solved in a way\n   that is effective across many applications.\
    \ Those solutions are\n   typically incorporated into standard security syntaxes\
    \ such as those\n   for ASN.1 [RFC3852] and XML [RFC3275, XMLENC].  But there\
    \ are almost\n   always application specific questions, particularly the question\
    \ of\n   exactly what information needs to be authenticated or encrypted.\n  \
    \ Questions of exactly what needs to be secured and how to do so\n   robustly\
    \ are deeply entwined with canonicalization.  They are also\n   somewhat different\
    \ for authentication and encryption, as discussed\n   below.\n"
- title: 2.4.1.  Canonicalization
  contents:
  - "2.4.1.  Canonicalization\n   Canonicalization is the transformation of the \"\
    significant\"\n   information in a message into a \"standard\" form, discarding\n\
    \   \"insignificant\" information, for example, encoding into a standard\n   character\
    \ set or changing line endings into a standard encoding and\n   discarding the\
    \ information about the original character set or line\n   ending encodings. \
    \ Obviously, what is \"significant\" and what is\n   \"insignificant\" varies\
    \ with the application or protocol and can be\n   tricky to determine.  However,\
    \ it is common that for each particular\n   syntax, such as ASCII [ASCII], ASN.1\
    \ [ASN.1], or XML [XML], a\n   standard canonicalization (or canonicalizations)\
    \ is specified or\n   developed through practice.  This leads to the design of\
    \ applications\n   that assume one of such standard canonicalizations, thus reducing\
    \ the\n   need for per-application canonicalization.  (See also [RFC3076,\n  \
    \ RFC3741].)\n   DOCUM: From the document point of view, canonicalization is suspect\n\
    \      if not outright evil.  After all, if you have a piece of paper\n      with\
    \ writing on it, any modification to \"standardize\" its format\n      can be\
    \ an unauthorized change in the original message as created\n      by the \"author\"\
    , who is always visualized as a person.  Digital\n      signatures are like authenticating\
    \ signatures or seals or time\n      stamps on the bottom of the \"piece of paper\"\
    .  They do not justify\n      and should not depend on changes in the message\
    \ appearing above\n      them.  Similarly, encryption is just putting the \"piece\
    \ of paper\"\n      in a vault that only certain people can open and does not\
    \ justify\n      any standardization or canonicalization of the message.\n   PROTO:\
    \ From the protocol point of view, canonicalization is simply a\n      necessity.\
    \  It is just a question of exactly what canonicalization\n      or canonicalizations\
    \ to apply to a pattern of bits that are\n      calculated, processed, stored,\
    \ communicated, and finally parsed\n      and acted on.  Most of these bits have\
    \ never been seen and never\n      will be seen by a person.  In fact, many of\
    \ the parts of the\n      message will be artifacts of encoding, protocol structure,\
    \ and\n      computer representation rather than anything intended for a person\n\
    \      to see.\n         Perhaps in theory, the \"original\", idiosyncratic form\
    \ of any\n      digitally signed part could be conveyed unchanged through the\n\
    \      computer process, storage, and communications channels that\n      implement\
    \ the protocol and could be usefully signed in that form.\n      But in practical\
    \ systems of any complexity, this is unreasonably\n      difficult, at least for\
    \ most parts of messages.  And if it were\n      possible, it would be virtually\
    \ useless, because to authenticate\n      messages you would still have to determine\
    \ their equivalence with\n      the preserved original form.\n         Thus, signed\
    \ data must be canonicalized as part of signing and\n      verification to compensate\
    \ for insignificant changes made in\n      processing, storage, and communication.\
    \  Even if, miraculously, an\n      initial system design avoids all cases of\
    \ signed message\n      reconstruction based on processed data or re-encoding\
    \ based on\n      character set or line ending or capitalization or numeric\n\
    \      representation or time zones or whatever, later protocol revisions\n  \
    \    and extensions are certain to require such reconstruction and/or\n      re-encoding\
    \ eventually.  If such \"insignificant\" changes are not\n      ameliorated by\
    \ canonicalization, signatures won't work, as\n      discussed in more detail\
    \ in 2.4.3 below.\n"
- title: 2.4.2.  Digital Authentication
  contents:
  - "2.4.2.  Digital Authentication\n   DOCUM: The document-oriented view on authentication\
    \ tends to be a\n      \"digital signature\" and \"forms\" point of view.  (The\
    \ \"forms\" point\n      of view is a subset of the document point of view that\
    \ believes\n      that a principal activity is presenting forms to human beings\
    \ so\n      that they can fill out and sign portions of those forms [XForms]).\n\
    \      Since the worry is always about human third parties and viewing\n     \
    \ the document in isolation, those who are document oriented always\n      want\
    \ \"digital signature\" (asymmetric key) authentication, with its\n      characteristics\
    \ of \"non-repudiability\", etc.  As a result, they\n      reject secret key based\
    \ message authentication codes, which\n      provide the verifier with the capability\
    \ of forging an\n      authentication code, as useless.  (See any standard reference\
    \ on\n      the subject for the usual meaning of these terms.)\n         From\
    \ their point of view, you have a piece of paper or form\n      which a person\
    \ signs.  Sometimes a signature covers only part of a\n      form, but that's\
    \ usually because a signature can only cover data\n      that is already there.\
    \  And normally at least one signature covers\n      the \"whole\" document/form.\
    \  Thus the document oriented want to be\n      able to insert digital signatures\
    \ into documents without changing\n      the document type and even \"inside\"\
    \ the data being signed, which\n      requires a mechanism to skip the signature\
    \ so that it does not try\n      to sign itself.\n   PROTO: From a protocol point\
    \ of view, the right kind of\n      authentication to use, whether \"digital signature\"\
    \ or symmetric\n      keyed authentication code (or biometric or whatever), is\
    \ just\n      another engineering decision affected by questions of efficiency,\n\
    \      desired security model, etc.  Furthermore, the concept of signing\n   \
    \   a \"whole\" message seems very peculiar (unless it is a copy being\n     \
    \ saved for archival purposes, in which case you might be signing a\n      whole\
    \ archive at once anyway).  Typical messages are made up of\n      various pieces\
    \ with various destinations, sources, and security\n      requirements.  Furthermore,\
    \ there are common fields that it is\n      rarely useful to sign because they\
    \ change as the message is\n      communicated and processed.  Examples include\
    \ hop counts, routing\n      history, and local forwarding tags.\n"
- title: 2.4.3.  Canonicalization and Digital Authentication
  contents:
  - "2.4.3.  Canonicalization and Digital Authentication\n   For authenticating protocol\
    \ system messages of practical complexity,\n   you are faced with the choice of\
    \ doing\n   (1) \"too little canonicalization\" and having brittle authentication,\n\
    \       useless due to verification failures caused by surface\n       representation\
    \ changes without significance,\n   (2) the sometimes difficult and tricky work\
    \ of selecting or designing\n       an appropriate canonicalization or canonicalizations\
    \ to be used\n       as part of authentication generation and verification, producing\n\
    \       robust and useful authentication, or\n   (3) \"too much canonicalization\"\
    \ and having insecure authentication,\n       useless because it still verifies\
    \ even when significant changes\n       are made in the signed data.\n   The only\
    \ useful option above is number 2.\n"
- title: 2.4.4.  Encryption
  contents:
  - "2.4.4.  Encryption\n   In terms of processing, transmission, and storage, encryption\
    \ turns\n   out to be much easier to get working than signatures.  Why?  Because\n\
    \   the output of encryption is essentially random bits.  It is clear\n   from\
    \ the beginning that those bits need to be transferred to the\n   destination\
    \ in some absolutely clean way that does not change even\n   one bit.  Because\
    \ the encrypted bits are meaningless to a human\n   being, there is no temptation\
    \ among the document oriented to try to\n   make them more \"readable\".  So appropriate\
    \ techniques of encoding at\n   the source, such as Base64 [RFC2045], and decoding\
    \ at the\n   destination, are always incorporated to protect or \"armor\" the\n\
    \   encrypted data.\n   Although the application of canonicalization is more obvious\
    \ with\n   digital signatures, it may also apply to encryption, particularly\n\
    \   encryption of parts of a message.  Sometimes elements of the\n   environment\
    \ where the plain text data is found may affect its\n   interpretation.  For example,\
    \ interpretation can be affected by the\n   character encoding or bindings of\
    \ dummy symbols.  When the data is\n   decrypted, it may be into an environment\
    \ with a different character\n   encoding or dummy symbol bindings.  With a plain\
    \ text message part,\n   it is usually clear which of these environmental elements\
    \ need to be\n   incorporated in or conveyed with the message.  But an encrypted\n\
    \   message part is opaque.  Thus some canonical representation that\n   incorporates\
    \ such environmental factors may be needed.\n   DOCUM: Encryption of the entire\
    \ document is usually what is\n      considered.  Because signatures are always\
    \ thought of as human\n      assent, people with a document point of view tend\
    \ to vehemently\n      assert that encrypted data should never be signed unless\
    \ the plain\n      text of it is known.\n   PROTO: Messages are complex composite\
    \ multi-level structures, some\n      pieces of which are forwarded multiple hops.\
    \  Thus the design\n      question is what fields should be encrypted by what\
    \ techniques to\n      what destination or destinations and with what canonicalization.\n\
    \      It sometimes makes perfect sense to sign encrypted data you don't\n   \
    \   understand; for example, the signature could just be for integrity\n     \
    \ protection or for use as a time stamp, as specified in the\n      protocol.\n"
- title: 2.5.  Unique Internal Labels
  contents:
  - "2.5.  Unique Internal Labels\n   It is desirable to be able to reference parts\
    \ of structured messages\n   or objects by some sort of \"label\" or \"id\" or\
    \ \"tag\".  The idea is\n   that this forms a fixed \"anchor\" that can be used\
    \ \"globally\", at\n   least within an application domain, to reference the tagged\
    \ part.\n   DOCUM: From the document point of view, it seems logical just to\n\
    \      provide for a text tag.  Users or applications could easily come\n    \
    \  up with short readable tags.  These would probably be meaningful\n      to\
    \ a person if humanly generated (e.g., \"Susan\") and at least\n      fairly short\
    \ and systematic if automatically generated (e.g.,\n      \"A123\").  The ID attribute\
    \ type in XML [XML] appears to have been\n      thought of this way, although\
    \ it can be used in other ways.\n   PROTO: From a protocol point of view, unique\
    \ internal labels look\n      very different than they do from a document point\
    \ of view.  Since\n      this point of view assumes that pieces of different protocol\n\
    \      messages will later be combined in a variety of ways, previously\n    \
    \  unique labels can conflict.  There are really only three\n      possibilities\
    \ if such tags are needed, as follows:\n      (1) Have a system for dynamically\
    \ rewriting such tags to maintain\n          uniqueness.  This is usually a disaster,\
    \ as it (a) invalidates\n          any stored copies of the tags that are not\
    \ rewritten, and it\n          is usually impossible to be sure there aren't more\
    \ copies\n          lurking somewhere you failed to update, and (b) invalidates\n\
    \          digital signatures that cover a changed tag.\n      (2) Use some form\
    \ of hierarchical qualified tags.  Thus the total\n          tag can remain unique\
    \ even if a part is moved, because its\n          qualification changes.  This\
    \ avoids the digital signature\n          problems described above.  But it destroys\
    \ the concept of a\n          globally-unique anchor embedded in and moving with\
    \ the data.\n          And stored tags may still be invalidated by data moves.\n\
    \          Nevertheless, within the scope of a particular carefully\n        \
    \  designed protocol, such as IOTP [RFC2801], this can work.\n      (3) Construct\
    \ a lengthy globally-unique tag string.  This can be\n          done successfully\
    \ by using a good enough random number\n          generator and big enough random\
    \ tags (perhaps about 24\n          characters) sequentially, as in the way email\
    \ messages IDs are\n          created [RFC2822].\n      Thus, from a protocol\
    \ point of view, such tags are difficult but\n      if they are needed, choice\
    \ 3 works best.\n"
- title: 3.  Examples
  contents:
  - "3.  Examples\n   IETF protocols are replete with examples of the protocol viewpoint\n\
    \   such as TCP [RFC793], IPSEC [RFC2411], SMTP [RFC2821], and IOTP\n   [RFC2801,\
    \ RFC2802].\n   The eXtensible Markup Language [XML] is an example of something\
    \ that\n   can easily be viewed both ways and where the best results frequently\n\
    \   require attention to both the document and the protocol points of\n   view.\n\
    \   Computerized court documents, human-to-human email, and the X.509v3\n   Certificate\
    \ [X509v3], particularly the X509v3 policy portion, are\n   examples primarily\
    \ designed from the document point of view.\n"
- title: 4.  Resolution of the Points of View
  contents:
  - "4.  Resolution of the Points of View\n   There is some merit to each point of\
    \ view.  Certainly the document\n   point of view has some intuitive simplicity\
    \ and appeal and is OK for\n   applications where it meets needs.\n   The protocol\
    \ point of view can come close to encompassing the\n   document point of view\
    \ as a limiting case.  In particular, it does so\n   under the following circumstances:\n\
    \   1. As the complexity of messages declines to a single payload\n      (perhaps\
    \ with a few attachments).\n   2. As the mutability of the payload declines to\
    \ some standard format\n      that needs little or no canonicalization.\n   3.\
    \ As the number of parties and amount of processing declines as\n      messages\
    \ are transferred.\n   4. As the portion of the message intended for more or less\
    \ direct\n      human consumption increases.\n   Under the above circumstances,\
    \ the protocol point of view would be\n   narrowed to something quite close to\
    \ the document point of view.\n   Even when the document point of view is questionable,\
    \ the addition of\n   a few options to a protocol will usually mollify the perceived\
    \ needs\n   of those looking at things from that point of view.  For example,\n\
    \   adding optional non-canonicalization or an optional policy statement,\n  \
    \ or inclusion of semantic labels, or the like.\n   On the other hand, the document\
    \ point of view is hard to stretch to\n   encompass the protocol case.  From a\
    \ strict piece of paper\n   perspective, canonicalization is wrong; inclusion\
    \ of human language\n   policy text within every significant object and a semantic\
    \ tag with\n   every adjunct should be mandatory; and so on.  Objects designed\
    \ in\n   this way are rarely suitable for protocol use, as they tend to be\n \
    \  improperly structured to accommodate hierarchy and complexity,\n   inefficient\
    \ (due to unnecessary text and self-documenting\n   inclusions), and insecure\
    \ (due to brittle signatures).\n   Thus, to produce usable protocols, it is best\
    \ to start with the\n   protocol point of view and add document point of view\
    \ items as\n   necessary to achieve consensus.\n"
- title: 5.  Conclusion
  contents:
  - "5.  Conclusion\n   I hope that this document will help explain to those of either\
    \ point\n   of view where those with the other view are coming from.  It is my\n\
    \   hope that this will decrease conflict, shed some light -- in\n   particular\
    \ on the difficulties of security design -- and lead to\n   better protocol designs.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This document considers the security implications\
    \ of the Document and\n   Protocol points of view, as defined in Sections 2.1\
    \ and 2.2, and\n   warns of the security defects in the Document view.  Most of\
    \ these\n   security considerations appear in Section 2.4 but they are also\n\
    \   touched on elsewhere in Section 2 which should be read in its\n   entirety.\n"
- title: Informative References
  contents:
  - "Informative References\n   [ASCII]      \"USA Standard Code for Information Interchange\"\
    , X3.4,\n                American National Standards Institute: New York, 1968.\n\
    \   [ASN.1]      ITU-T Recommendation X.680 (1997) | ISO/IEC 8824-1:1998,\n  \
    \              \"Information Technology - Abstract Syntax Notation One\n     \
    \           (ASN.1):  Specification of Basic Notation\".\n                ITU-T\
    \ Recommendation X.690 (1997) | ISO/IEC 8825-1:1998,\n                \"Information\
    \ Technology - ASN.1 Encoding Rules:\n                Specification of Basic Encoding\
    \ Rules (BER), Canonical\n                Encoding Rules (CER) and Distinguished\
    \ Encoding Rules\n                (DER)\".  <http://www.itu.int/ITU-\n       \
    \         T/studygroups/com17/languages/index.html>.\n   [CSS]        \"Cascading\
    \ Style Sheets, level 2 revision 1 CSS 2.1\n                Specification\", B.\
    \ Bos, T. Gelik, I. Hickson, H. Lie,\n                W3C Candidate Recommendation,\
    \ 25 February 2004.\n                <http://www.w3.org/TR/CSS21>\n   [RFC793]\
    \     Postel, J., \"Transmission Control Protocol\", STD 7, RFC\n            \
    \    793, September 1981.\n   [RFC2045]    Freed, N. and N. Borenstein, \"Multipurpose\
    \ Internet Mail\n                Extensions (MIME) Part One: Format of Internet\
    \ Message\n                Bodies\", RFC 2045, November 1996.\n   [RFC2411]  \
    \  Thayer, R., Doraswamy, N., and R. Glenn, \"IP Security\n                Document\
    \ Roadmap\", RFC 2411, November 1998.\n   [RFC3852]    Housley, R., \"Cryptographic\
    \ Message Syntax (CMS)\", RFC\n                3852, July 2004.\n   [RFC2801]\
    \    Burdett, D., \"Internet Open Trading Protocol - IOTP\n                Version\
    \ 1.0\", RFC 2801, April 2000.\n   [RFC2802]    Davidson, K. and Y. Kawatsura,\
    \ \"Digital Signatures for\n                the v1.0 Internet Open Trading Protocol\
    \ (IOTP)\", RFC\n                2802, April 2000.\n   [RFC2821]    Klensin, J.,\
    \ \"Simple Mail Transfer Protocol\", RFC 2821,\n                April 2001.\n\
    \   [RFC2822]    Resnick, P., \"Internet Message Format\", RFC 2822, April\n \
    \               2001.\n   [RFC3076]    Boyer, J., \"Canonical XML Version 1.0\"\
    , RFC 3076, March\n                2001.\n   [RFC3275]    Eastlake 3rd, D., Reagle,\
    \ J., and D. Solo, \"(Extensible\n                Markup Language) XML-Signature\
    \ Syntax and Processing\",\n                RFC 3275, March 2002.\n   [RFC3741]\
    \    Berger, L., \"Generalized Multi-Protocol Label Switching\n              \
    \  (GMPLS) Signaling Functional Description\", RFC 3471,\n                January\
    \ 2003.\n   [X509v3]     \"ITU-T Recommendation X.509 version 3 (1997),\n    \
    \            Information Technology - Open Systems Interconnection -\n       \
    \         The Directory Authentication Framework\", ISO/IEC 9594-\n          \
    \      8:1997.\n   [XForms]     \"XForms 1.0\", M. Dubinko, L. Klotz, R. Merrick,\
    \ T.\n                Raman, W3C Recommendation 14 October 2003.\n           \
    \     <http://www.w3.org/TR/xforms/>\n   [XML]        \"Extensible Markup Language\
    \ (XML) 1.0 Recommendation\n                (2nd Edition)\".  T.  Bray, J. Paoli,\
    \ C. M. Sperberg-\n                McQueen, E. Maler, October 2000.\n        \
    \        <http://www.w3.org/TR/2000/REC-xml-20001006>\n   [XMLENC]     \"XML Encryption\
    \ Syntax and Processing\", J. Reagle, D.\n                Eastlake, December 2002.\n\
    \                <http://www.w3.org/TR/2001/RED-xmlenc-core-20021210/>\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Donald E. Eastlake 3rd\n   Motorola Laboratories\n   155\
    \ Beaver Street\n   Milford, MA 01757 USA\n   Phone:  +1 508-786-7554 (w)\n  \
    \         +1 508-634-2066 (h)\n   Fax:    +1 508-786-7501 (w)\n   EMail:  Donald.Eastlake@motorola.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2004).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and at www.rfc-editor.org, and except as set\n   forth therein, the\
    \ authors retain all their rights.\n   This document and the information contained\
    \ herein are provided on an\n   \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION\
    \ HE/SHE REPRESENTS\n   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND\
    \ THE INTERNET\n   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR\
    \ IMPLIED,\n   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE\n\
    \   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES\
    \ OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ ISOC's procedures with respect to rights in ISOC Documents can\n   be found\
    \ in BCP 78 and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat\
    \ and any\n   assurances of licenses to be made available, or the result of an\n\
    \   attempt made to obtain a general license or permission for the use of\n  \
    \ such proprietary rights by implementers or users of this\n   specification can\
    \ be obtained from the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n\
    \   The IETF invites any interested party to bring to its attention any\n   copyrights,\
    \ patents or patent applications, or other proprietary\n   rights that may cover\
    \ technology that may be required to implement\n   this standard.  Please address\
    \ the information to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
