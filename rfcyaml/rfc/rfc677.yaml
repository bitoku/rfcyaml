- title: __initial_text__
  contents:
  - "                 The Maintenance of Duplicate Databases\nPreface:\nThis RFC is\
    \ a working paper on the problem of maintaining duplicated\ndatabases in an ARPA-like\
    \ network. It briefly discusses the general\nduplicate database problem, and then\
    \ outlines in some detail a solution\nfor a particular type of duplicate database.\
    \  The concepts developed\nhere were used in the design of the User Identification\
    \ Database for the\nTIP user authentication and accounting system. We believe\
    \ that these\nconcepts are generally applicable to distributed database problems.\n\
    Introduction\n    There are a number of motivations for maintaining redundant,\n\
    duplicate copies of databases in a distributed network environment.  Two\nimportant\
    \ motivations are:\n  - to increase reliability of data access.\n    The accessibility\
    \ of critical data can be increased by redundantly\n    maintaining it. The database\
    \ used for TIP login and accounting is\n    redundantly distributed to achieve\
    \ highly reliable access.\n  - to insure efficiency of data access.\n    Data\
    \ can be more quickly and efficiently accessed when it is \"near\"\n    the accessing\
    \ process. A copy of the TIP user ID database is\n    maintained at each site\
    \ supporting the TIP login service to insure\n    rapid, efficient access.  (Reliability\
    \ considerations dictate that\n    this database be redundantly maintained, and\
    \ efficiency\n    considerations dictate that a copy be maintained at each\n \
    \   authentication site.)\n    The design of a system to maintain redundant, duplicate\
    \ databases is\na challenging task because of the inherent communication delay\
    \ between\ncopies of the database, as well as the real world constraints of system\n\
    crashes, operator error, communication channel failure, etc.  This paper\ndiscusses\
    \ some of the problems we encountered in designing such a\nsystem, and outlines\
    \ a system design for maintaining a particular type\nof database which solves\
    \ those problems.\nThe Model\n    A system for supporting duplicate copies of\
    \ a database can be\nmodeled by a group of independent database management processes\
    \ (DBMPs)\neach maintaining its own copy of the database. These processes\ncommunicate\
    \ with each other over network communication paths. Each DBMP\nhas complete control\
    \ over its copy of the database. It handles all\naccesses to and modifications\
    \ of the database in response to requests\nfrom other processes. Though the DBMPs\
    \ act only upon requests, in the\nfollowing they will often be said to be actually\
    \ causing or originating\nthe modifications.\n    An important design consideration\
    \ is that the communication paths\nbetween the DBMPs are subject to failures.\
    \ Thus one DBMP may have its\ninteractions with other DBMPs interrupted and/or\
    \ have to wait until\ncommunication paths are re-established before it can communicate\
    \ with\nother DBMPs. An assumption made in this paper about the communication\n\
    paths is that messages from one process to another are delivered in the\nsame\
    \ order that they are sent. This is true of the ARPANET. For networks\nthat make\
    \ no such guarantee, communication protocols between the DBMPs\ncan be used to\
    \ correctly order the messages.\n    In order to proceed further, it is necessary\
    \ to be more precise\nabout the nature of the duplicated database and the operations\
    \ allowed\non it. A constant, read-only database is at one extreme. The task of\
    \ the\nDBMPs is trivial in this case. They simply respond to value retrieval\n\
    requests. At the other extreme is a general shared database where\nfunctional\
    \ modification requests (such as \"X := f(X,Y,Z)\") are allowed\nand/or where\
    \ it is necessary to completely restrict access to entries\nwhile they are being\
    \ modified. In this case all the problems of shared\ndatabases on a single computer\
    \ system arise (e.g., the need for\nsynchronization mechanisms and the resulting\
    \ potential deadlock\nsituations), as well as those unique to having multiple\
    \ database copies\ndistributed among independent computers. For example, a completely\n\
    general system must deal with the possibility of communication failures\nwhich\
    \ cause the network to become partitioned into two or more sub-\nnetworks. Any\
    \ solution which relies on locking an element of the\ndatabase for synchronized\
    \ modification must cope with the possibility of\nprocesses in non-communicating\
    \ sub-networks attempting to lock the same\nelement. Either they both must be\
    \ allowed to do so (which violates the\nlock discipline), or they both must wait\
    \ till the partition ceases\n(which may take arbitrarily long), or some form of\
    \ centralized or\nhierarchical control must be used, with a resulting dependency\
    \ of some\nDBMPs on others for all modifications and perhaps accesses as well.\n\
    The Database\n    The type of database to be examined in this paper can be represented\n\
    as a collection of entries which are (Selector,Value) pairs. Each\nselector is\
    \ unique and the values are atomic entities as far as the\nDBMPs are concerned.\
    \ The mechanisms to be presented may be extended to\nhandle databases with greater\
    \ structure - where the values may\nthemselves be collections of (selector,value)\
    \ pairs - but this extension\nwill not be considered further here.\nFour operations\
    \ are to be allowed on the database:\n    1) Selection - given a selector, the\
    \ current associated value is\n    returned.\n    2) Assignment - a selector and\
    \ a value are given and the given value\n    replaces the old value associated\
    \ with the selector.\n    3) Creation - a new selector and an initial value are\
    \ given and a\n    new (selector,initial value) entry is added to the database.\n\
    \    4) Deletion- a selector is given and the existing (selector,value)\n    entry\
    \ is removed from the database.\nNote that value modification is limited to assignment.\
    \ Functional\nmodification requests - such as \"Change X to be Factorial(X)\"\
    \ - are\nspecifically ruled out. Allowing them would force the use of system wide\n\
    synchronization interlocks.\nConsistency\n    The extent to which the copies of\
    \ the database can be kept\n\"identical\" must be examined. Because of the inherent\
    \ delay in\ncommunications between DBMPs, it is impossible to guarantee that the\n\
    data bases are identical at all times. Rather, our goal is to guarantee\nthat\
    \ the copies are \"consistent\" with each other. By this we mean that\ngiven a\
    \ cessation of update activity to any entry, and enough time for\neach DBMP to\
    \ communicate with all other DBMPs, then the state of that\nentry (its existence\
    \ and value) will be identical in all copies of the\ndatabase.\nTimestamps\n \
    \   We permit modifications to the database to originate at any of the\nDBMPs\
    \ maintaining it. These changes must, of course, be communicated to\nthe other\
    \ DBMPs. To insure consistency, all of the DBMPs must make the\nsame decision\
    \ as to which modification to a particular entry is to be\nconsidered \"final\"\
    . It is desirable to select the \"most recent\" change.\nHowever, since there\
    \ is no way to absolutely determine the time sequence\nof events in a distributed\
    \ system without a universal, always accessible\nsequence number generator (a\
    \ network time standard should suffice),\n\"most recent\" can only be approximated.\
    \ We accomplish the approximation\nby associating a timestamp with each modification\
    \ and with each entry,\nthe latter being the timestamp of the modification which\
    \ set its current\nvalue.(1) Since the uniqueness of timestamps given out at more\
    \ than one\n----------\n(1) Time is useful in this context because it has the\
    \ desired properties\nof being monotonically increasing, and of being available\
    \ with a\nreasonable degree of accuracy. Any other sequence numbering scheme with\n\
    these properties can be used, \"time-of-day\" was chosen because it is\nsimple\
    \ to obtain. Its main faults are that it is often manually set (and\nthus prone\
    \ to error), and it may stop during system service\ninterruptions. As computer\
    \ systems learn to adapt to a network\nenvironment, the use of an independent\
    \ time source should become more\ncommon. This is beginning to happen with the\
    \ TENEX sites on the ARPANET.\nDBMP can not be guaranteed, a \"DBMP of origin\"\
    \ is included as part of\neach timestamp. By (arbitrarily) ordering the DBMPs,\
    \ we thus have a\nmeans of uniquely ordering timestamps. Each\n timestamp is a\
    \ pair (T,D): T is a time, D is a DBMP identifier. For two\ntimestamps (T1,D1)\
    \ and (T2,D2) we have the following:\n    (T1,D1)>(T2,D2) <=> (T1>T2) or (T1=T2\
    \ and D1>D2)\n    (T1,D1) is said to be \"more recent\" than (T2,D2)\n    If D1=D2\
    \ and T1=T2 it is assumed that the two modifications are\n    really two copies\
    \ of the same modification request.\n    In order to insure the uniqueness of\
    \ timestamps, it is necessary\nthat each individual DBMP associate different times\
    \ with different\nmodifications. This is certainly possible to do, though the\
    \ fineness of\nthe unit of time may restrict the frequency of modifications at\
    \ a single\nDBMP site.\n    Each entry in the data base is now a triple:\n   \
    \   E ::= (S,V,T), where\n      S is the selector\n      V is the associated value\n\
    \      T is the timestamp (a Time,DBMP pair) of the last change to the\n     \
    \   entry\n    The task of each DBMP is to keep its copy of the database up-to-\n\
    date, given the information on modifications that it has received so\nfar. At\
    \ the same time it must insure that each of its entries stays\nconsistent with\
    \ those of all the other DBMPs. This must be done despite\nthe fact that the order\
    \ in which it receives modifications may be very\ndifferent from the order in\
    \ which they are received by other DBMPs. In\nthe remainder of this paper we examine\
    \ the allowable database operations\nwith respect to their effect on DBMP operation.\n\
    Assignment\n    Consider the case of assignment to an existing entry. When the\n\
    assignment is initiated (by a person or process) the DBMP involved makes\nthe\
    \ change locally, and creates a copy of the modified entry and an\nassociated\
    \ list of DBMPs to which the change must be sent. As the\nmodification is delivered\
    \ to the other DBMPs, they are removed from the\nlist until no DBMPs remain. The\
    \ copy of the modification is then\ndeleted. This distribution mechanism must\
    \ be error free (i.e., receipt\nof a modification must be positively confirmed\
    \ before removing a DBMP\nfrom the list of recipients).(2)\n    When a DBMP receives\
    \ an assignment modification (either locally or\nfrom another DBMP) it compares\
    \ the timestamp of the modification with\nthe timestamp of the copy of the entry\
    \ in its database and keeps\nwhichever is more \"recent\" as defined by the ordering\
    \ given above.  Thus\nwhen all existing assignments to a given entry have been\
    \ distributed to\nall the DBMPs, they are guaranteed have the same \"latest\"\
    \ value\nassociated with that entry.\nCreation\n    Creation and deletion of entries\
    \ pose more of a problem. Note that\nthe ability to create new, previously unknown\
    \ entries requires that a\nDBMP be able to handle assignments to unknown entries.\
    \ For example,\nconsider the case of an entry XYZ created by DBMP A, and the following\n\
    sequence of events: DBMP A tells DBMP B about the new entry, and\nsubsequently\
    \ B assigns a new value to XYZ; DBMP B then tells DBMP C\nabout the assignment\
    \ before C has heard from A about the creation.  DBMP\nC must either save the\
    \ assignment to XYZ until it hears about the\ncreation, or simply assume the creation\
    \ will be coming and use the \"new\"\nentry right away. The latter is more in\
    \ the spirit of trying to keep the\ndatabase as \"up-to-date\" as possible and\
    \ leads to no inconsistencies.\nDeletion\n    Deletion of entries is the main\
    \ problem for this database system.\nIf deletion is taken to mean immediate removal\
    \ from the database, then\nproblems arise. Consider the following scenario:\n\
    \        XYZ is an entry known by all DBMPs.\n        XYZ is deleted at DBMP A.\n\
    \        XYZ is modified at DBMP B (before B is notified of the deletion\n   \
    \         by A).\nNow, consider a third DBMP, C. C may hear from DBMP B before\
    \ DBMP A, in\nwhich case XYZ ends up deleted at DBMP C. C may however hear from\
    \ DBMP A\n----------\n(2) This same process (local modification and queuing for\
    \ remote\ndistribution) is, of course, performed for the other possible operations\n\
    on the database. The details of how the local modification is done\nsafely, how\
    \ the messages are queued, how confirmation of delivery is\ndone, etc., though\
    \ important, will not be discussed here.  The use of an\naddressee list attached\
    \ to the modification to be delivered is\nconceptually easy to work with and not\
    \ difficult to implement in\npractice.\nbefore DBMP B. In this case, if C removes\
    \ XYZ from its database, then\nthe assignment to XYZ initiated by DBMP B will\
    \ result in the re-creation\nof XYZ at DBMP C. To prevent this C must remember\
    \ that XYZ has been\ndeleted until it is \"safe\" to completely forget about XYZ.\n\
    \    One approach to this problem is to never actually remove an entry\nfrom the\
    \ database. Deletion just marks the entry as being deleted by\nsetting a \"deleted\"\
    \ flag associated each entry. However, the problem of\nreceiving assignments to\
    \ deleted entries still exists. For example, DBMP\nA may receive an assignment\
    \ from DBMP B to an entry which A has marked\nas deleted. DBMP A can not tell\
    \ whether B has not heard about the\ndeletion, or has heard about it but has also\
    \ received a re-creation\nrequest for the entry, which hasn't reached DBMP A.\
    \ To enable A to\nresolve such situations we include another timestamp in all\
    \ entries: the\ntimestamp of the entry's creation. Thus in the above example,\
    \ DBMP A can\ncompare the creation timestamps of the assignment and the deleted\
    \ entry.\nThe one with the later creation timestamp is kept. Indeed whenever a\n\
    modification with an old creation timestamp is received it can be\nignored.\n\
    \    We now have a 5-tuple for entries and modifications:\n        E ::= (S,V,F,CT,T)\n\
    \        S is the selector\n        V is the associated value\n        F is the\
    \ deleted/not-deleted flag\n        CT is the timestamp of creation\n        T\
    \ is the timestamp of this (last) modification\n    Note that the values of the\
    \ F, CT, and T components of a\nmodification uniquely specify the type of modification.\
    \ Thus only the\n5-tuple to become the new entry for a selector, not the type\
    \ of\nmodification, need be communicated:\n        F = not deleted, CT = T =>\
    \ creation\n        F = not deleted, CT < T => assignment\n        F = deleted\
    \ => deletion\n    The mechanism described above handles all the desired operations\
    \ on\nthe distributed database in a way that guarantees the consistency of all\n\
    copies. A modification to the database will take effect at each DBMP as\nsoon\
    \ as it receives the request from the DBMP originating the change.\n    A deficiency\
    \ with this scheme is that deleted entries are never\nremoved from the database.\
    \ A method which permits \"garbage collection\"\nof deleted entries is discussed\
    \ below.\nRemoval of Deleted Entries\n    The basic constraint is that a DBMP\
    \ should not remove a deleted\nentry until it will never receive any assignments\
    \ with the same selector\n(S) and the same or older create time (CT). If it fails\
    \ to do this, then\nit will be unable to distinguish these \"out of date\" assignments\
    \ from\nassignments to a newly created entry for the same S.  To be able do\n\
    this, each DBMP must know for each deleted entry whether all other DBMPs\nhave\
    \ heard about the deletion. To accomplish this, each DBMP could\nnotify the other\
    \ DBMPs whenever it hears about a deletion. If these\nnotifications are transmitted\
    \ in order with the \"normal\" sequence of\nmodifications, then upon receipt of\
    \ such a notification a DBMP can be\nsure that the sending DBMP has delivered\
    \ any outstanding assignments to\nthe deleted entry, has marked it as deleted,\
    \ and will not generate any\nnew assignments to it. Keeping track of, and exchanging\
    \ messages about,\neach individual deleted entry in this manner is, however, somewhat\
    \ more\nelaborate than necessary.\n    Having each DBMP deliver all its own modifications\
    \ in sequential\norder (by timestamp) allows the following simplification. We\
    \ have all\nDBMPs maintain a table of the timestamps of the last modification\n\
    received from each other DBMP. Any DBMP, say A, is then guaranteed to\nhave received\
    \ all modifications originating at another DBMP, say B.\nwhich have timestamps\
    \ earlier than (or equal to) the entry for B in A s\ncopy of this table. If this\
    \ table is exchanged between DBMPs, then all\nDBMPs would have a second N*N (N=\
    \ number of DBMPs) table where entry\n(I,J) would be the timestamp of the last\
    \ modification received by DBMP I\nfrom DBMP J. Thus DBMP A can remove a deleted\
    \ entry whose deletion\noriginated at DBMP K when all entries in the Kth column\
    \ of this table at\nDBMP A are later than or equal to the timestamp of the deleted\
    \ entry.\nWhen a DBMP receives a deletion modification, in addition to acting\
    \ on\nit and acknowledging receipt of it, the DBMP should also send its table\n\
    of last timestamps received to all other DBMPs. This is sent in a\ntimestamped\
    \ message which is queued with the \"normal\" modification\nmessages.\n    A refinement\
    \ to this approach, which reduces the amount of\ninformation exchanged and the\
    \ size of the tables, is to have the DBMPs\nexchange only the oldest of the entries\
    \ in the first table (of\ntimestamps of last modifications received from other\
    \ DBMPs). These would\nthen be saved in a 1*N table, replacing the N*N table.\
    \ A DBMP receiving\na modification with a timestamp equal to or older than the\
    \ oldest\ntimestamp in its second table knows that the modification has been\n\
    confirmed as being received by all other DBMPs. A deleted entry can thus\nbe removed\
    \ when its timestamp satisfies this condition. A DBMP would,\nupon receipt of\
    \ a deletion modification, queue up a message with this\n\"timestamp of oldest\
    \ last modification received\" for delivery to all\nother DBMPs.\nSummary of solution:\n\
    \    An entry in the database is a 5-tuple:\n        (S,V,F,CT,T) where\n    \
    \    S is an selector used in all references to this entry.\n        V is its\
    \ present value.\n        F is a deleted/undeleted flag.\n        CT is the timestamp\
    \ of the creation of this entry.\n        T is the timestamp of the modification\
    \ which set the current V\n          and/or F of the entry.\n        A timestamp\
    \ is a pair (time,DBMP) where the DBMP identifies the\n          site at which\
    \ the time was generated, and the DBMPs are\n          (arbitrarily) ordered,\
    \ so that timestamps are completely\n          ordered.\n    A modification is\
    \ a pair (Set-of-DBMPs,Entry) where Set-of-DBMPs is\n    the set of DBMPs to which\
    \ the Entry has yet to be delivered.\n    An ordered (by timestamp) list of modifications\
    \ is kept at each\n    DBMP. The DBMP periodically attempts to deliver modification\n\
    \    requests to those DBMPs which remain in the Set-of-DBMPs associated\n   \
    \ with each modification. Modification entries are removed from this\n    list\
    \ when they have been delivered to all DBMPs.\n    When a DBMP receives a modification\
    \ request from another DBMP, it\n    compares the timestamps of the request with\
    \ the timestamps of the\n    corresponding entry (if any) in its database, and\
    \ acts upon or\n    disregards the new entry accordingly.\n    Each DBMP keeps\
    \ a vector of the timestamp (T) of the last\n    modification received by it from\
    \ each other DBMP.\n    When a DBMP receives a deletion modification, it sends\
    \ a timestamped\n    message to all other DBMPs containing the oldest timestamp\
    \ in its\n    vector of timestamps of last modification received. Each DBMP keeps\n\
    \    a second vector of the last of these timestamps received from each\n    other\
    \ DBMP.\n    A deleted entry may be removed from the database when its timestamp\n\
    \    (T) is older than all the timestamps in this second vector of\n    timestamps\
    \ received from other DBMPs.\nConclusion\n    This paper has presented techniques\
    \ by which a number of loosely\ncoupled processes can maintain duplicate copies\
    \ of a database, despite\nthe unreliability of their only means of communication.\
    \ The copies of\nthe database can be kept \"consistent'. However it is possible\
    \ for\nseemingly anomalous behavior to occur. For example a user may assign a\n\
    value to a selector using one DBMP, later use another DBMP and assign a\nnew value,\
    \ and still later find that the first value is the one that\nremains in the database.\
    \ This can occur if the clocks used by the two\nDBMPs for their timestamps are\
    \ sufficiently out of synchrony that the\nsecond assignment is timestamped as\
    \ having taken place before the first\nassignment. To the extent that the communication\
    \ paths can be made\nreliable, and the clocks used by the processes kept close\
    \ to synchrony,\nthe probability of seemingly strange behavior can be made very\
    \ small.\nHowever, the distributed nature of the system dictates that this\nprobability\
    \ can never be zero.\n    The major innovation presented here is the explicit\
    \ representation\nof the time sequence of modifications through timestamps for\
    \ both\nmodifications and entries. This enables the each DBMP to select the same\n\
    \"most-recent\" modification of an entry. In addition, timestamps enable\nthe\
    \ DBMPs to decide when a deleted entry is no longer referenced (i.e.,\nstill active\
    \ anywhere) and can be deallocated. These techniques should\nhave broader utility\
    \ in building and modeling other systems of\nconcurrent, cooperating processes.\n\
    \       [ This RFC was put into machine readable form for entry ]\n       [ into\
    \ the online RFC archives by Alex McKenzie with    ]\n       [ support from GTE,\
    \ formerly BBN Corp.            12/99 ]\n"
