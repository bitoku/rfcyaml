- contents:
  - '     ICMPv6 Errors for Discarding Packets Due to Processing Limits

    '
  title: __initial_text__
- contents:
  - "Abstract\n   Network nodes may discard packets if they are unable to process\n
    \  protocol headers of packets due to processing constraints or limits.\n   When
    such packets are dropped, the sender receives no indication, so\n   it cannot
    take action to address the cause of discarded packets.\n   This specification
    defines several new ICMPv6 errors that can be sent\n   by a node that discards
    packets because it is unable to process the\n   protocol headers.  A node that
    receives such an ICMPv6 error may use\n   the information to diagnose packet loss
    and may modify what it sends\n   in future packets to avoid subsequent packet
    discards.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8883.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction\n     1.1.  Extension Header Limits\n
    \    1.2.  Aggregate Header Limits\n     1.3.  Nonconformant Packet Discard\n
    \    1.4.  Terminology\n   2.  ICMPv6 Errors for Extension Header Limits\n     2.1.
    \ Format\n     2.2.  Unrecognized Next Header Type Encountered by Intermediate\n
    \          Node (Code 5)\n     2.3.  Extension Header Too Big (Code 6)\n     2.4.
    \ Extension Header Chain Too Long (Code 7)\n     2.5.  Too Many Extension Headers
    (Code 8)\n     2.6.  Too Many Options in Extension Header (Code 9)\n     2.7.
    \ Option Too Big (Code 10)\n   3.  ICMPv6 Error for Aggregate Header Limits\n
    \    3.1.  Format\n     3.2.  Usage\n   4.  Operation\n     4.1.  Priority of
    Reporting\n     4.2.  Host Response\n   5.  Applicability and Use Cases\n     5.1.
    \ Reliability of ICMP\n     5.2.  Processing Limits\n       5.2.1.  Long Headers
    and Header Chains\n       5.2.2.  At End Hosts\n       5.2.3.  At Intermediate
    Nodes\n   6.  Security Considerations\n   7.  IANA Considerations\n     7.1.  Parameter
    Problem Codes\n     7.2.  Destination Unreachable Codes\n     7.3.  ICMP Extension
    Object Classes and Class Sub-types\n   8.  References\n     8.1.  Normative References\n
    \    8.2.  Informative References\n   Acknowledgments\n   Author's Address\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document specifies several new ICMPv6 errors that can
    be sent\n   when a node discards a packet due to it being unable to process the\n
    \  necessary protocol headers because of processing constraints or\n   limits.
    \ New ICMPv6 code points are defined to supplement those\n   defined in [RFC4443].
    \ Six of the errors are specific to the\n   processing of extension headers; another
    error is used when the\n   aggregate protocol headers in a packet exceed the processing
    limits\n   of a node.\n"
  - contents:
    - "1.1.  Extension Header Limits\n   In IPv6, optional internet-layer information
      is carried in one or\n   more IPv6 extension headers [RFC8200].  Extension headers
      are placed\n   between the IPv6 header and the upper-layer header in a packet.
      \ The\n   term \"header chain\" refers collectively to the IPv6 header, extension\n
      \  headers, and upper-layer headers occurring in a packet.  Individual\n   extension
      headers may have a maximum length of 2048 octets and must\n   fit into a single
      packet.  Destination Options and Hop-by-Hop Options\n   contain a list of options
      in type-length-value (TLV) format.  Each\n   option includes a length of the
      data field in octets: the minimum\n   size of an option (non-pad type) is two
      octets, and the maximum size\n   is 257 octets.  The number of options in an
      extension header is only\n   limited by the length of the extension header and
      the Path MTU from\n   the source to the destination.  Options may be skipped
      over by a\n   receiver if they are unknown and the Option Type indicates to
      skip\n   (first two high order bits are 00).\n   Per [RFC8200], except for Hop-by-Hop
      Options, extension headers are\n   not examined or processed by intermediate
      nodes.  However, in\n   deployed networks, many intermediate nodes do examine
      extension\n   headers for various purposes.  For instance, a node may examine
      all\n   extension headers to locate the transport header of a packet in order\n
      \  to implement transport-layer filtering or to track connections to\n   implement
      a stateful firewall.\n   Destination hosts are expected to process all extension
      headers and\n   options in Hop-by-Hop and Destination Options.\n   Due to the
      variable lengths, high maximum lengths, or potential for a\n   denial-of-service
      attack of extension headers, many devices impose\n   operational limits on extension
      headers in packets they process.\n   [RFC7045] discusses the requirements of
      intermediate nodes that\n   discard packets because of unrecognized extension
      headers.  [RFC8504]\n   discusses limits that may be applied to the number of
      options in Hop-\n   by-Hop Options or Destination Options extension headers.
      \ Both\n   intermediate nodes and end hosts may apply limits to extension header\n
      \  processing.  When a limit is exceeded, the typical behavior is to\n   silently
      discard the packet.\n   This specification defines six Parameter Problem codes
      that may be\n   sent by a node that discards a packet due to the processing
      limits of\n   extension headers being exceeded.  The information in these ICMPv6\n
      \  errors may be used for diagnostics to determine why packets are being\n   dropped.
      \ Additionally, a source node that receives these ICMPv6\n   errors may be able
      to modify its use of extension headers in\n   subsequent packets sent to the
      destination in order to avoid further\n   occurrences of packets being discarded.\n"
    title: 1.1.  Extension Header Limits
  - contents:
    - "1.2.  Aggregate Header Limits\n   Some hardware devices implement a parsing
      buffer of a fixed size to\n   process packets.  The parsing buffer is expected
      to contain all the\n   headers (often up to a transport-layer header for filtering)
      that a\n   device needs to examine.  If the aggregate length of headers in a\n
      \  packet exceeds the size of the parsing buffer, a device will either\n   discard
      the packet or defer processing to a software slow path.  In\n   any case, no
      indication of a problem is sent back to the sender.\n   This document defines
      one code for ICMPv6 Destination Unreachable\n   that is sent by a node that
      is unable to process the headers of a\n   packet due to the aggregate size of
      the packet headers exceeding a\n   processing limit.  The information in this
      ICMPv6 error may be used\n   for diagnostics to determine why packets are being
      dropped.\n   Additionally, a source node that receives this ICMPv6 error may
      be\n   able to modify the headers used in subsequent packets to try to avoid\n
      \  further occurrences of packets being discarded.\n"
    title: 1.2.  Aggregate Header Limits
  - contents:
    - "1.3.  Nonconformant Packet Discard\n   The ICMP errors defined in this specification
      may be applicable to\n   scenarios in which a node is dropping packets outside
      the auspices of\n   any standard specification.  For instance, an intermediate
      node might\n   send a \"Headers too long\" code in a case where it drops a packet\n
      \  because it is unable to parse deeply enough to extract the transport-\n   layer
      information needed for packet filtering.  Such behavior might\n   be considered
      nonconformant (with respect to [RFC8200], for\n   instance).\n   This specification
      does not advocate behaviors that might be\n   considered nonconformant.  However,
      packet discard does occur in real\n   deployments, and the intent of this specification
      is to provide\n   visibility as to why packets are being discarded.  In the
      spirit that\n   providing some reason is better than a silent drop, the sending
      of\n   ICMP errors is RECOMMENDED even in cases where a node might be\n   discarding
      packets per a nonconformant behavior.\n"
    title: 1.3.  Nonconformant Packet Discard
  - contents:
    - "1.4.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
      \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\",
      \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described
      in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all\n
      \  capitals, as shown here.\n"
    title: 1.4.  Terminology
  title: 1.  Introduction
- contents:
  - "2.  ICMPv6 Errors for Extension Header Limits\n   Six new codes are defined for
    the Parameter Problem type.\n"
  - contents:
    - "2.1.  Format\n   The format of the ICMPv6 Parameter Problem message [RFC4443]
      for an\n   extension header limit exceeded error is:\n    0                   1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   |     Type      |     Code      |          Checksum
      \            |\n   |                    As much of the invoking packet             |\n
      \  +               as possible without the ICMPv6 packet           +\n   |              exceeding
      the minimum IPv6 MTU [RFC8200]         |\n   IPv6 Header Fields:\n      Destination
      Address:\n         Copied from the Source Address field of the invoking packet.\n
      \  ICMPv6 Fields:\n      Type:\n         4  (Parameter Problem type)\n      Code:\n
      \        (pertinent to this specification)\n                  | 5  | Unrecognized
      Next Header type    |\n                  |    | encountered by intermediate
      node |\n                  | 6  | Extension header too big         |\n                  |
      7  | Extension header chain too long  |\n                  | 8  | Too many extension
      headers       |\n                  | 9  | Too many options in extension    |\n
      \                 |    | header                           |\n                  |
      10 | Option too big                   |\n      Pointer:\n         Identifies
      the octet offset within the invoking packet where\n         the problem occurred.\n
      \        The pointer will point beyond the end of the IPv6 packet if the\n         field
      exceeding the limit is beyond what can fit in the maximum\n         size of
      an ICMPv6 error message.  If the pointer is used as an\n         offset to read
      the data in the invoking packet, then a node\n         MUST first validate that
      the pointer value is less than the\n         length of the invoking packet data.\n"
    title: 2.1.  Format
  - contents:
    - "2.2.  Unrecognized Next Header Type Encountered by Intermediate Node\n      (Code
      5)\n   This code SHOULD be sent by an intermediate node that discards a\n   packet
      because it encounters a Next Header type that is unknown in\n   its examination.
      \ The ICMPv6 Pointer field is set to the offset of\n   the unrecognized Next
      Header value within the original packet.\n   Note that this code is sent by
      intermediate nodes and SHOULD NOT be\n   sent by a final destination.  If a
      final destination node observes an\n   unrecognized header, then it SHOULD send
      an ICMP Parameter Problem\n   message with an ICMP Code value of 1 (\"unrecognized
      Next Header type\n   encountered\") as specified in [RFC8200].\n"
    title: 2.2.  Unrecognized Next Header Type Encountered by Intermediate Node
  - contents:
    - "2.3.  Extension Header Too Big (Code 6)\n   An ICMPv6 Parameter Problem with
      code for \"Extension header too big\"\n   SHOULD be sent when a node discards
      a packet because the size of an\n   extension header exceeds its processing
      limit.  The ICMPv6 Pointer\n   field is set to the offset of the first octet
      in the extension header\n   that exceeds the limit.\n"
    title: 2.3.  Extension Header Too Big (Code 6)
  - contents:
    - "2.4.  Extension Header Chain Too Long (Code 7)\n   An ICMPv6 Parameter Problem
      with code for \"Extension header chain too\n   long\" SHOULD be sent when a
      node discards a packet with an extension\n   header chain that exceeds a limit
      on the total size in octets of the\n   header chain.  The ICMPv6 Pointer is
      set to the first octet beyond\n   the limit.\n"
    title: 2.4.  Extension Header Chain Too Long (Code 7)
  - contents:
    - "2.5.  Too Many Extension Headers (Code 8)\n   An ICMPv6 Parameter Problem with
      code for \"Too many extension\n   headers\" SHOULD be sent when a node discards
      a packet with an\n   extension header chain that exceeds a limit on the number
      of\n   extension headers in the chain.  The ICMPv6 Pointer is set to the\n   offset
      of the first octet of the first extension header that is\n   beyond the limit.\n"
    title: 2.5.  Too Many Extension Headers (Code 8)
  - contents:
    - "2.6.  Too Many Options in Extension Header (Code 9)\n   An ICMPv6 Parameter
      Problem with code for \"Too many options in\n   extension header\" SHOULD be
      sent when a node discards a packet with\n   an extension header that has a number
      of options that exceeds the\n   processing limits of the node.  This code is
      applicable for\n   Destination Options and Hop-by-Hop Options.  The ICMPv6 Pointer
      field\n   is set to the first octet of the first option that exceeds the limit.\n"
    title: 2.6.  Too Many Options in Extension Header (Code 9)
  - contents:
    - "2.7.  Option Too Big (Code 10)\n   An ICMPv6 Parameter Problem with code for
      \"Option too big\" is sent in\n   two different cases: when the length of an
      individual Hop-by-Hop or\n   Destination Option exceeds a limit, or when the
      length or number of\n   consecutive Hop-by-Hop or Destination padding options
      exceeds a\n   limit.  In a case where the length of an option exceeds a processing\n
      \  limit, the ICMPv6 Pointer field is set to the offset of the first\n   octet
      of the option that exceeds the limit.  In cases where the\n   length or number
      of padding options exceeds a limit, the ICMPv6\n   Pointer field is set to the
      offset of the first octet of the padding\n   option that exceeds the limit.\n
      \  Possible limits related to padding include:\n   *  The number of consecutive
      PAD1 options in Destination Options or\n      Hop-by-Hop Options is limited
      to seven octets [RFC8504].\n   *  The length of PADN options in Destination
      Options or Hop-by-Hop\n      Options is limited seven octets [RFC8504].\n   *
      \ The aggregate length of a set of consecutive PAD1 or PADN options\n      in
      Destination Options or Hop-by-Hop Options is limited to seven\n      octets.\n"
    title: 2.7.  Option Too Big (Code 10)
  title: 2.  ICMPv6 Errors for Extension Header Limits
- contents:
  - "3.  ICMPv6 Error for Aggregate Header Limits\n   One code is defined for the
    Destination Unreachable type for\n   aggregate header limits.\n   This ICMP error
    may be applied to other headers in a packet than just\n   the IPv6 header or IPv6
    extension headers.  Therefore, a Destination\n   Unreachable type with a multi-part
    ICMPv6 message format is used in\n   lieu of the Parameter Problem type, which
    only indicates errors\n   concerning IPv6 headers.\n"
  - contents:
    - "3.1.  Format\n   The error for aggregate header limits employs a multi-part
      ICMPv6\n   message format as defined in [RFC4884].  The extension object class\n
      \  \"Extended Information\" is defined to contain objects for ancillary\n   information
      pertaining to an ICMP Destination Unreachable error.\n   Within this object
      class, the sub-type \"Pointer\" is defined, which\n   contains a Pointer field
      with similar semantics to the Pointer field\n   in ICMP Parameter Problem errors.\n
      \  The format of the ICMPv6 message for an aggregate header limit\n   exceeded
      is:\n    0                   1                   2                   3\n    0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   |     Type
      \     |     Code      |          Checksum             | |\n   |    Length     |
      \                 Unused                       | C\n   ~                As much
      of the invoking packet                 ~\n   |              as possible without
      the ICMPv6 packet            |\n   |             exceeding the minimum IPv6
      MTU [RFC8200]          |/\n   |Version|       Reserved        |           Checksum
      \           |\\\n   |             Length            |   Class-Num   |   C-Type
      \     | X\n   IPv6 Header Fields:\n      Destination Address:\n         Copied
      from the Source Address field of the invoking packet.\n   ICMPv6 Fields:\n      Type:\n
      \        1 -  Destination Unreachable\n      Code: (pertinent to this specification)\n
      \        8 -  Headers too long\n      Length:\n         Length of the padded
      invoking packet data measured in 64-bit\n         words.  The ICMP extension
      structure immediately follows the\n         padded invoking packet data.\n      Invoking
      Packet:\n         Contains as much of the invoking packet as possible without
      the\n         ICMPv6 packet exceeding the minimum IPv6 MTU.  The invoking\n
      \        packet data MUST be zero padded to the nearest 64-bit boundary\n         [RFC4884].
      \ If the original invoking packet did not contain 128\n         octets, the
      invoking packet data MUST be zero padded to 128\n         octets.\n   ICMP Extension
      Fields:\n      Version:\n         2 -  per [RFC4884]\n      Reserved:\n         0\n
      \     Checksum:\n         The one's complement checksum of the ICMP extension
      [RFC4884]\n      Length:\n         8 -  length of the object header and Pointer
      field\n      Class-Num:\n         4 -  Extended Information\n      C-Type:\n
      \        1 -  Pointer\n      Pointer:\n         Identifies the octet offset
      within the invoking packet where a\n         limit was exceeded.\n         The
      pointer will point beyond the end of the invoking packet\n         data if the
      field exceeding the limit is beyond what can fit in\n         the maximum size
      of an ICMPv6 error message with the ICMP\n         extension.  If the pointer
      is used as an offset to read the\n         data in the invoking packet, then
      a node MUST first validate\n         that the pointer value is less than the
      length of the invoking\n         packet data.\n"
    title: 3.1.  Format
  - contents:
    - "3.2.  Usage\n   An ICMPv6 Destination Unreachable error with code for \"Headers
      too\n   long\" SHOULD be sent when a node discards a packet because the\n   aggregate
      length of the headers in the packet exceeds the processing\n   limits of the
      node.  The Pointer in the extended ICMPv6 structure is\n   set to the offset
      of the first octet that exceeds the limit.\n   This error is sent in response
      to a node dropping a packet because\n   the aggregate header chain exceeds the
      processing limits of a node.\n   The aggregate header chain may be composed
      of protocol headers other\n   than an IPv6 header and IPv6 extension headers.
      \ For instance, in the\n   case of a node parsing a UDP encapsulation protocol,
      the\n   encapsulating UDP header would be considered to be in the aggregate\n
      \  header chain.\n   As noted in Section 4.1, the ICMPv6 Destination Unreachable
      error\n   with code for \"Headers too long\" has the lowest precedence of the\n
      \  ICMP errors discussed in this specification.  If a packet contains an\n   error
      corresponding to a Parameter Problem code, then a node SHOULD\n   send the Parameter
      Problem error instead of sending the ICMPv6\n   Destination Unreachable error
      with code for \"Headers too long\".\n"
    title: 3.2.  Usage
  title: 3.  ICMPv6 Error for Aggregate Header Limits
- contents:
  - "4.  Operation\n   Nodes that send or receive ICMPv6 errors due to header processing\n
    \  limits MUST comply with ICMPv6 processing as specified in [RFC4443].\n"
  - contents:
    - "4.1.  Priority of Reporting\n   More than one ICMPv6 error may be applicable
      to report for a packet.\n   For instance, the number of extension headers in
      a packet might\n   exceed a limit, and the aggregate length of protocol headers
      might\n   also exceed a limit.  Only one ICMPv6 error SHOULD be sent for a\n
      \  packet, so a priority is defined to determine which error to report.\n   The
      RECOMMENDED reporting priority of ICMPv6 errors for processing\n   limits is
      listed from highest to lowest priority:\n   1.  Existing ICMP errors defined
      in [RFC4443].\n   2.  \"Unrecognized Next Header type encountered by intermediate
      node\"\n   3.  \"Extension header too big\"\n   4.  \"Option too big\" for length
      or number of consecutive padding\n       options exceeding a limit.\n   5.  \"Option
      too big\" for the length of an option exceeding a limit.\n   6.  \"Too many
      options in an extension header\"\n   7.  \"Extension header chain too long\"
      headers exceeding a limit.\n   8.  \"Too many extension headers\"\n   9.  \"Headers
      too long\"\n"
    title: 4.1.  Priority of Reporting
  - contents:
    - "4.2.  Host Response\n   When a source host receives an ICMPv6 error for a processing
      limit\n   being exceeded, it SHOULD verify the ICMPv6 error is valid and take\n
      \  appropriate action as suggested below.\n   The general validations for ICMP
      as described in [RFC4443] are\n   applicable.  The packet in the ICMP data SHOULD
      be validated to match\n   the upper-layer process or connection that generated
      the original\n   packet.  Other validation checks that are specific to the upper\n
      \  layers may be performed and are out of the scope of this\n   specification.\n
      \  The ICMPv6 error SHOULD be logged with sufficient detail for\n   debugging
      packet loss.  The details of the error, including the\n   addresses and the
      offending extension header or data, should be\n   retained.  This, for instance,
      would be useful for debugging when a\n   node is misconfigured and unexpectedly
      discarding packets or when a\n   new extension header is being deployed.\n   A
      host MAY modify its usage of protocol headers in subsequent packets\n   to avoid
      repeated occurrences of the same error.\n   For ICMPv6 errors caused by extension
      header limits being exceeded:\n   *  An error SHOULD be reported to an application
      if the application\n      enabled extension headers for its traffic.  In response,
      the\n      application may terminate communications if extension headers are\n
      \     required, stop using extension headers in packets to the\n      destination
      indicated by the ICMPv6 error, or attempt to modify\n      its use of headers
      or extension headers to avoid further packet\n      discards.\n   *  A host
      system SHOULD take appropriate action if it is creating\n      packets with
      extension headers on behalf of the application.  If\n      the offending extension
      header is not required for communication,\n      the host may either stop sending
      it or otherwise modify its use in\n      subsequent packets sent to the destination
      indicated in the ICMPv6\n      error.\n"
    title: 4.2.  Host Response
  title: 4.  Operation
- contents:
  - '5.  Applicability and Use Cases

    '
  - contents:
    - "5.1.  Reliability of ICMP\n   ICMP is fundamentally an unreliable protocol
      and, in real deployment,\n   it may consistently fail over some paths.  As with
      any other use of\n   ICMP, it is assumed that the errors defined in this document
      are only\n   the best effort to be delivered.  No protocol should be implemented\n
      \  that relies on reliable delivery of ICMP messages.  If necessary,\n   alternative
      or additional mechanisms may be employed to augment the\n   processes used to
      deduce the reason that packets are being discarded.\n   For instance, ICMP error
      messages may be correlated with information\n   attained through Packetization
      Layer Path MTU Discovery (PLPMTUD)\n   [RFC4821] or Happy Eyeballs for IPv6
      [RFC8305].  Details of the\n   interaction with alternative mechanisms are out
      of scope of this\n   specification.\n"
    title: 5.1.  Reliability of ICMP
  - contents:
    - "5.2.  Processing Limits\n   This section discusses the trends and motivations
      of processing\n   limits that warrant ICMP errors.\n"
    - contents:
      - "5.2.1.  Long Headers and Header Chains\n   The trend towards longer and more
        complex headers and header chains\n   needing to be processed by end nodes,
        as well as intermediate nodes,\n   is driven by:\n   *  Increasing prevalence
        of deep packet inspection in middleboxes.\n      In particular, many intermediate
        nodes now parse network-layer\n      encapsulation protocols or transport-layer
        protocols.\n   *  Deployment of routing headers.  For instance, [RFC8754]
        defines an\n      extension header format that includes a list of IPv6 addresses\n
        \     which may consume a considerable number of bytes.\n   *  Development
        of in situ OAM headers that allow a rich set of\n      measurements to be
        gathered in the data path at the cost of\n      additional header overhead,
        which may be significant [OAM-IPV6].\n   *  Other emerging use cases of Hop-by-Hop
        and Destination Options.\n"
      title: 5.2.1.  Long Headers and Header Chains
    - contents:
      - "5.2.2.  At End Hosts\n   End hosts may implement limits on processing extension
        headers as\n   described in [RFC8504].  Host implementations are usually software\n
        \  stacks that typically don't have inherent processing limitations.\n   Limits
        imposed by a software stack are more likely to be for denial-\n   of-service
        mitigation or performance.\n"
      title: 5.2.2.  At End Hosts
    - contents:
      - "5.2.3.  At Intermediate Nodes\n   Hardware devices that process packet headers
        may have limits as to\n   how many headers or bytes of headers they can process.
        \ For instance,\n   a middlebox hardware implementation might have a parsing
        buffer that\n   contains some number of bytes of packet headers to process.
        \ Parsing\n   buffers typically have a fixed size such as 64, 128, or 256
        bytes.\n   In addition, hardware implementations (and some software\n   implementations)
        often don't have loop constructs.  Processing of a\n   TLV list might be implemented
        as an unrolled loop so that the number\n   of TLVs that can be processed is
        limited.\n"
      title: 5.2.3.  At Intermediate Nodes
    title: 5.2.  Processing Limits
  title: 5.  Applicability and Use Cases
- contents:
  - "6.  Security Considerations\n   The security considerations for ICMPv6 described
    in [RFC4443] are\n   applicable.  The ICMP errors described in this document MAY
    be\n   filtered by firewalls in accordance with [RFC4890].\n   In some circumstances,
    the sending of ICMP errors might conceptually\n   be exploited as a means to covertly
    deduce the processing\n   capabilities of nodes.  Accordingly, an implementation
    SHOULD allow a\n   configurable policy to withhold sending of the ICMP errors
    described\n   in this specification in environments where the security of ICMP\n
    \  errors is a concern.\n"
  title: 6.  Security Considerations
- contents:
  - '7.  IANA Considerations

    '
  - contents:
    - "7.1.  Parameter Problem Codes\n   IANA has assigned the following codes in
      the \"Type 4 - Parameter\n   Problem\" registry within the ICMPv6 Parameters
      registry [IANA-ICMP]:\n                | Code | Name                             |\n
      \               | 5    | Unrecognized Next Header type    |\n                |
      \     | encountered by intermediate node |\n                | 6    | Extension
      header too big         |\n                | 7    | Extension header chain too
      long  |\n                | 8    | Too many extension headers       |\n                |
      9    | Too many options in extension    |\n                |      | header                           |\n
      \               | 10   | Option too big                   |\n"
    title: 7.1.  Parameter Problem Codes
  - contents:
    - "7.2.  Destination Unreachable Codes\n   IANA has assigned the following code
      in the \"Type 1 - Destination\n   Unreachable\" registry within the ICMPv6 Parameters
      registry\n   [IANA-ICMP]:\n                        | Code | Name             |\n
      \                       | 8    | Headers too long |\n"
    title: 7.2.  Destination Unreachable Codes
  - contents:
    - "7.3.  ICMP Extension Object Classes and Class Sub-types\n   IANA has assigned
      the following Class value in the \"ICMP Extension\n   Object Classes and Class
      Sub-types\" registry within the ICMP\n   Parameters registry [IANA-ICMPEXT]:\n
      \                 | Class Value | Class Name           |\n                  |
      4           | Extended Information |\n   IANA has created a sub-type registry
      for the \"Extended Information\"\n   ICMP extension object class.  The registration
      procedure for this\n   registry is \"Standards Action\".  The sub-type value
      of 0 is reserved;\n   values greater than zero may be assigned.\n   IANA has
      assigned the following sub-type within the \"Sub-types -\n   Class 4 - Extended
      Information\" registry within the ICMP Parameters\n   registry:\n                          |
      Value | Description |\n                          | 1     | Pointer     |\n"
    title: 7.3.  ICMP Extension Object Classes and Class Sub-types
  title: 7.  IANA Considerations
- contents:
  - '8.  References

    '
  - contents:
    - "8.1.  Normative References\n   [IANA-ICMP]\n              IANA, \"Internet
      Control Message Protocol version 6\n              (ICMPv6) Parameters\",\n              <https://www.iana.org/assignments/icmpv6-parameters/>.\n
      \  [IANA-ICMPEXT]\n              IANA, \"Internet Control Message Protocol (ICMP)\n
      \             Parameters\",\n              <https://www.iana.org/assignments/icmp-parameters/>.\n
      \  [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n
      \             <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC4443]  Conta,
      A., Deering, S., and M. Gupta, Ed., \"Internet\n              Control Message
      Protocol (ICMPv6) for the Internet\n              Protocol Version 6 (IPv6)
      Specification\", STD 89,\n              RFC 4443, DOI 10.17487/RFC4443, March
      2006,\n              <https://www.rfc-editor.org/info/rfc4443>.\n   [RFC4884]
      \ Bonica, R., Gan, D., Tappan, D., and C. Pignataro,\n              \"Extended
      ICMP to Support Multi-Part Messages\", RFC 4884,\n              DOI 10.17487/RFC4884,
      April 2007,\n              <https://www.rfc-editor.org/info/rfc4884>.\n   [RFC7045]
      \ Carpenter, B. and S. Jiang, \"Transmission and Processing\n              of
      IPv6 Extension Headers\", RFC 7045,\n              DOI 10.17487/RFC7045, December
      2013,\n              <https://www.rfc-editor.org/info/rfc7045>.\n   [RFC8174]
      \ Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8200]  Deering, S. and R.
      Hinden, \"Internet Protocol, Version 6\n              (IPv6) Specification\",
      STD 86, RFC 8200,\n              DOI 10.17487/RFC8200, July 2017,\n              <https://www.rfc-editor.org/info/rfc8200>.\n"
    title: 8.1.  Normative References
  - contents:
    - "8.2.  Informative References\n   [OAM-IPV6] Bhandari, S., Brockners, F., Pignataro,
      C., Gredler, H.,\n              Leddy, J., Youell, S., Mizrahi, T., Kfir, A.,
      Gafni, B.,\n              Lapukhov, P., Spiegel, M., Krishnan, S., Asati, R.,
      and M.\n              Smith, \"In-situ OAM IPv6 Options\", Work in Progress,\n
      \             Internet-Draft, draft-ietf-ippm-ioam-ipv6-options-03, 18\n              September
      2020, <https://tools.ietf.org/html/draft-ietf-\n              ippm-ioam-ipv6-options-03>.\n
      \  [RFC4821]  Mathis, M. and J. Heffner, \"Packetization Layer Path MTU\n              Discovery\",
      RFC 4821, DOI 10.17487/RFC4821, March 2007,\n              <https://www.rfc-editor.org/info/rfc4821>.\n
      \  [RFC4890]  Davies, E. and J. Mohacsi, \"Recommendations for Filtering\n              ICMPv6
      Messages in Firewalls\", RFC 4890,\n              DOI 10.17487/RFC4890, May
      2007,\n              <https://www.rfc-editor.org/info/rfc4890>.\n   [RFC8305]
      \ Schinazi, D. and T. Pauly, \"Happy Eyeballs Version 2:\n              Better
      Connectivity Using Concurrency\", RFC 8305,\n              DOI 10.17487/RFC8305,
      December 2017,\n              <https://www.rfc-editor.org/info/rfc8305>.\n   [RFC8504]
      \ Chown, T., Loughney, J., and T. Winters, \"IPv6 Node\n              Requirements\",
      BCP 220, RFC 8504, DOI 10.17487/RFC8504,\n              January 2019, <https://www.rfc-editor.org/info/rfc8504>.\n
      \  [RFC8754]  Filsfils, C., Ed., Dukes, D., Ed., Previdi, S., Leddy, J.,\n              Matsushima,
      S., and D. Voyer, \"IPv6 Segment Routing Header\n              (SRH)\", RFC
      8754, DOI 10.17487/RFC8754, March 2020,\n              <https://www.rfc-editor.org/info/rfc8754>.\n"
    title: 8.2.  Informative References
  title: 8.  References
- contents:
  - "Acknowledgments\n   The author would like to thank Ron Bonica, Bob Hinden, Nick
    Hilliard,\n   Michael Richardson, Mark Smith, Suresh Krishnan, and Ole Tran for\n
    \  their comments and suggestions that improved this document.\n"
  title: Acknowledgments
- contents:
  - "Author's Address\n   Tom Herbert\n   Intel\n   Santa Clara, CA\n"
  title: Author's Address
