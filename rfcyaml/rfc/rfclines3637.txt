Abstract This document defines a portion of the Management Information Base (MIB) for use with network management protocols in TCP/IP based internets.
In particular, it defines objects for managing the Ethernet Wide Area Network (WAN)
The MIB module defined in this memo is an extension of the Synchronous Optical Network/Synchronous Digital Hierarchy (SONET/SDH)
Interface MIB and is implemented in conjunction with it and with the Ethernet like Interface MIB, the 802.3 Medium Attachment Unit MIB, the Interfaces Group MIB, and the Inverted Stack Table MIB.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL", when they appear in this document, are to be interpreted as described in BCP 14, RFC 2119 [RFC2119].
The Internet Standard Management Framework
For a detailed overview of the documents that describe the current Internet Standard Management Framework, please refer to section 7 of RFC 3410 [RFC3410].
Managed objects are accessed via a virtual information store, termed the Management Information Base or MIB.
MIB objects are generally accessed through the Simple Network Management Protocol (SNMP).
Objects in the MIB are defined using the mechanisms defined in the Structure of Management Information (SMI).
This memo specifies a MIB module that is compliant to the SMIv2, which is described in STD 58, RFC 2578 [RFC2578], STD 58
, RFC 2579 [RFC2579] and STD 58, RFC 2580
The objects defined in this memo are used in conjunction with objects defined in the Interfaces Group MIB [RFC2863], the SONET/SDH Interface MIB [RFC3592], and the 802.3 MAU MIB [RFC3636] to manage the Ethernet Wide Area Network (WAN)
Interface Sublayer (WIS) defined in [802.3ae].
The WIS contains functions to perform OC 192c/VC 4 64c framing and scrambling.
It resides between the Physical Coding Sublayer (PCS) and the Physical Medium Attachment (PMA) sublayer within a 10GBASE W 10 Gb/s WAN compatible physical layer device (PHY) and may be used in conjunction with any of the PCS, PMA, and Physical Medium Dependent (PMD)
sublayers defined in [802.3ae] for 10GBASE W PHYs.
Three types of 10GBASE W PHYs are defined, distinguished by the type of optics employed:  10GBASE SW, 10GBASE LW, and 10GBASE EW.
The objects defined in this memo may be used to manage an Ethernet interface employing any type of 10GBASE W PHY.
They do not apply to any other kind of interface.
In particular, they do not apply to so called Ethernet Line Terminating Equipment (ELTE)
residing within a SONET network element that uses the 10GBASE W PMA/PMD sublayers but otherwise acts as SONET Line Terminating Equipment (LTE).
The objects presented here   along with those incorporated by reference from the Interfaces Group MIB, the SONET/SDH Interface MIB, and the 802.3 MAU MIB   are intended to provide exact representations of the mandatory attributes in the oWIS managed object class (i.e., the members of the pWISBasic package) defined in Clause 30 and Annex 30A of [802.3ae].
They are also intended to provide approximate representations of the optional attributes (i.e., the members of the pWISOptional package).
Some objects with no analogues in oWIS are defined to support WIS testing features required by Clause 50 of [802.3ae].
Relationship to the SONET/SDH Interface MIB
Since the Ethernet WAN Interface Sublayer was designed to be SONET  compatible, information similar to that provided by most of the members of the oWIS managed object class is available from objects defined in the SONET MIB [RFC3592].
Thus, the MIB module defined in this memo is a sparse augmentation of the SONET MIB   in other words, every table defined here is an extension of some table in the SONET
MIB   and its compliance statement REQUIRES that an agent implementing the objects defined in this memo also implement the relevant SONET MIB objects.
That includes all objects required by sonetCompliance2 as well as some that it leaves optional.
It should be noted that some of the objects incorporated by reference from the SONET MIB   specifically, the threshold objects and interval counter objects   provide only approximate representations of the corresponding oWIS attributes, as detailed in Section 3.6.
An alternative approach would have been to define new objects to exactly match the oWIS definitions.
That approach was rejected because the SONET MIB objects are already used in deployed systems to manage the SONET sublayers of ATM over SONET and PPP over SONET interfaces, and it was deemed undesirable to use a different scheme to manage the SONET sublayers of 10 Gb/s WAN compatible Ethernet interfaces.
Note that the approach adopted by this memo requires no hardware support beyond that mandated by [802.3ae] subclause 50.3.11.
Relationship to the Ethernet like Interface MIB
An interface which includes the Ethernet WIS is, by definition, an Ethernet like interface, and an agent implementing the objects defined in this memo MUST implement the objects required by the dot3Compliance2 compliance statement in the EtherLike MIB.
Relationship to the 802.3 MAU MIB Support for the mauModIfCompl3 compliance statement of the MAU MIB [RFC3636] is REQUIRED for all Ethernet like interfaces.
The MAU MIB is needed in order to allow applications to control and/or determine the media type in use.
That is important for devices than can support both the 10GBASE R 10 Gb/s LAN format (which does not include the WIS) and the 10GBASE W 10 Gb/s WAN format (which does include the WIS).
The MAU MIB also provides the means to put a device in standby mode or to reset it;  the latter may be used to re initialize the WIS.
This section specifies how the ifTable, as defined in [RFC2863], is used for the Ethernet WIS application.
Layering Model Ethernet interfaces that employ the WIS are layered as defined in [802.3ae].
The corresponding use of the ifTable [RFC2863] is shown in the figure below.
The exact configuration and multiplexing of the layers is maintained in the ifStackTable
[RFC2863] and in the ifInvStackTable [RFC2864].
Use of ifTable for LLC Layer/MAC Layer/Reconciliation Sublayer/
The ifTable MUST be used as specified in [RFC3635] and [RFC3636] for the LLC Layer/MAC Layer/Reconciliation Sublayer/Physical Coding Sublayer.
Use of ifTable for SONET/SDH Path Layer
The ifTable MUST be used as specified in [RFC3592] for the SONET/SDH Path Layer.
The value of ifHighSpeed is set to 9585.
ifSpeed reports a value of 4294967295.
Use of ifTable for SONET/SDH Medium/Section/Line Layer
The ifTable MUST be used as specified in [RFC3592] for the SONET/SDH Medium/Section/Line Layer.
The value of ifHighSpeed is set to 9953.
ifSpeed reports a value of 4294967295.
The SONET/SDH terminology used in [802.3ae]
is mostly the same as in [RFC3592], but there are a few differences.
In those cases the definitions in [802.3ae] take precedence.
The specific differences are as follows.
This defect is not defined by [802.3ae].
An implementation that supports it SHOULD report it by setting the sonetPathUnequipped bit in the appropriate instance of sonetPathCurrentStatus.
This defect is called Payload Label Mismatch (PLM) in [802.3ae].
It is reported by setting both the sonetPathSignalLabelMismatch bit in the appropriate instance of sonetPathCurrentStatus (defined in [RFC3592]) and the etherWisPathPLM bit in the corresponding instance of etherWisPathCurrentStatus (defined below).
Loss of Codegroup Delineation [802.3ae] defines Loss of Codegroup Delineation (LCD) as occurring when the Physical Coding Sublayer is unable to locate 64B/66B code group boundaries.
There is no analogous defect defined in [RFC3592].
It is reported by setting the etherWisPathLCD bit in the appropriate instance of the object etherWisPathCurrentStatus defined below.
STS Path Remote Defect Indication [802.3ae] mandates the use of ERDI P (Enhanced Remote Defect Indication Path) defined in [T1.231] to signal remote server defects (triggered by path AIS or path LOP) and remote payload defects (triggered by Payload Label Mismatch or Loss of Codegroup Delineation).
[RFC3592] defines the one bit RDI P (Remote Defect Indication Path), which signals remote server detects (i.e., path AIS and path LOP) only.
An implementation of the MIB module defined in this memo MUST set the sonetPathSTSRDI bit in the appropriate instance of sonetPathCurrentStatus when it receives an ERDI P server defect indication from the remote end.
Both ERDI P payload defects and ERDI
P server defects are reported in the object etherWisFarEndPathCurrentStatus defined below.
the path layer CV count is based on block errors and not BIP 8 errors, i.e., it is incremented only once for each B3 byte that indicates incorrect parity, regardless of the number of bits in error.
Note that Section 8.4.5.1 of [T1.231] allows either path BIP 8 errors or path block errors to be used for the path layer error count.
This section contains the mapping between oWIS managed objects defined in [802.3ae] and managed objects defined in this document and in associated MIB modules, i.e.,
the IF MIB [RFC2863], the SONET MIB [RFC3592], and the MAU MIB [RFC3636].
etherWisFarEndPathCurrentStatus oWIS pWISOptional package aSectionSESThreshold
SONET MIB sonetFarEndLineCurrentSESs   sonetFarEndLineIntervalSESs aFarEndLineESs
SONET MIB sonetFarEndPathCurrentSESs   sonetFarEndPathIntervalSESs aFarEndPathESs
It should be noted that the threshold and counter objects imported from the SONET MIB are not completely equivalent to the corresponding IEEE 802.3 objects.
The specific differences are as follows:
How Corresponding SNMP Object Differs aSectionSESThreshold
This object is defined in [802.3ae] as an integer with one instance per interface.
sonetSESthresholdSet is an enumerated value that has one instance per network element; it controls the thresholds for all layers simultaneously and allows only certain discrete values to be selected.
This object is defined in [802.3ae] as a generalized nonresetable counter.
The objects sonetSectionCurrentSESs and sonetSectionIntervalSESs are 15 minute interval counters.
This object is defined as a generalized nonresetable counter in [802.3ae].
The objects sonetSectionCurrentESs and sonetSectionIntervalESs are 15 minute interval counters.
This object is defined as a generalized nonresetable counter in [802.3ae].
The objects sonetSectionCurrentSEFSs and sonetSectionIntervalSEFSs are 15 minute interval counters.
This object is defined as a generalized nonresetable counter in [802.3ae], and it is not subject to inhibiting.
The objects sonetSectionCurrentCVs and sonetSectionIntervalCVs are 15 minute interval counters, and they are inhibited (not incremented) during one second intervals that qualify as severely errored seconds.
This object is defined in [802.3ae] as an integer with one instance per interface.
sonetSESthresholdSet is an enumerated value that has one instance per network element; it controls the thresholds for all layers simultaneously and allows only certain discrete values to be selected.
This object is defined as a generalized nonresetable counter in [802.3ae], and it is not subject to inhibiting.
The objects sonetLineCurrentSESs and sonetLineIntervalSESs are 15 minute interval counters, and they are inhibited (not incremented) during one second intervals that qualify as unavailable seconds.
This object is defined as a generalized nonresetable counter in [802.3ae], and it is not subject to inhibiting.
sonetLineCurrentESs and sonetLineIntervalESs are 15 minute interval counters, and they are inhibited (not incremented) during one second intervals that qualify as unavailable seconds.
This object is defined as a generalized nonresetable counter in [802.3ae], and it is not subject to inhibiting.
sonetLineCurrentCVs and sonetLineIntervalCVs are 15 minute interval counters, and they are inhibited (not incremented) during one second intervals that qualify either as severely errored seconds or as unavailable seconds.
This object is defined as a generalized nonresetable counter in [802.3ae], and it is not subject to inhibiting.
The objects sonetFarEndLineCurrentSESs and sonetFarEndLineIntervalSESs are 15 minute interval counters, and they are inhibited (not incremented) during one second intervals that qualify as unavailable seconds.
This object is defined as a generalized nonresetable counter in [802.3ae], and it is not subject to inhibiting.
The objects sonetFarEndLineCurrentESs and sonetFarEndLineIntervalESs are 15 minute interval counters, and they are inhibited (not incremented) during one second intervals that qualify as unavailable seconds.
This object is defined as a generalized nonresetable counter in [802.3ae], and it is not subject to inhibiting.
The objects sonetFarEndLineCurrentCVs and sonetFarEndLineIntervalCVs are 15 minute interval counters, and they are inhibited (not incremented) during one second intervals that qualify either as severely errored seconds or as unavailable seconds.
This object is defined in [802.3ae] as an integer with one instance per interface.
sonetSESthresholdSet is an enumerated value that has one instance per network element; it controls the thresholds for all layers simultaneously and allows only certain discrete values to be selected.
This object is defined as a generalized nonresetable counter in [802.3ae], and it is not subject to inhibiting.
The objects sonetPathCurrentSESs and sonetPathIntervalSESs are 15 minute interval counters, and they are inhibited (not incremented) during one second intervals that qualify as unavailable seconds.
In addition, [802.3ae] includes PLM P and LCD P defects in the criteria for declaring path layer severely errored seconds, while [RFC3592] does not.
This object is defined as a generalized nonresetable counter in [802.3ae], and it is not subject to inhibiting.
The objects sonetPathCurrentESs and sonetPathIntervalESs are 15 minute interval counters, and they are inhibited (not incremented) during one second intervals that qualify as unavailable seconds.
In addition, [802.3ae] includes PLM P and LCD P defects in the criteria for declaring path layer errored seconds, while [RFC3592] does not.
This object is defined as a generalized nonresetable counter in [802.3ae], and it is not subject to inhibiting.
sonetPathCurrentCVs and sonetPathIntervalCVs are 15 minute interval counters, and they are inhibited (not incremented) during one second intervals that qualify either as severely errored seconds or as unavailable seconds.
This object is defined as a generalized nonresetable counter in [802.3ae], and it is not subject to inhibiting.
The objects sonetFarEndPathCurrentSESs and sonetFarEndPathIntervalSESs are 15 minute interval counters, and they are inhibited (not incremented) during one second intervals that qualify as unavailable seconds.
In addition, [802.3ae] includes far end PLM P and LCD P defects in the criteria for declaring far end path layer severely errored seconds, while [RFC3592] does not.
This object is defined as a generalized nonresetable counter in [802.3ae], and it is not subject to inhibiting.
The objects sonetFarEndPathCurrentESs and sonetFarEndPathIntervalESs are 15 minute interval counters, and they are inhibited (not incremented) during one second intervals that qualify as unavailable seconds.
In addition, [802.3ae] includes far end PLM P and LCD P defects in the criteria for declaring far end path layer errored seconds, while [RFC3592] does not.
This object is defined as a generalized nonresetable counter in [802.3ae], and it is not subject to inhibiting.
and sonetFarEndPathIntervalCVs are 15 minute interval counters, and they are inhibited (not incremented) during one second intervals that qualify either as severely errored seconds or as unavailable seconds.
Note:  despite the semantic differences between the threshold objects and counter objects imported from the SONET MIB and the corresponding IEEE 802.3 objects, the hardware support mandated by [802.3ae] subclause 50.3.11 suffices for both.
See Appendix A for details.
Mapping of SNMP Objects to WIS Station Management
Registers Some of the objects defined in this memo or incorporated by reference from the SONET MIB [RFC3592] or the MAU MIB [RFC3636] require WIS specific hardware support.
[802.3ae] subclause 50.3.11 specifies WIS management interface requirements, including a required subset of the WIS Management Data Input/Output (MDIO) registers defined in [802.3ae] subclause 45.2.2.
The table below provides a cross  reference between those managed objects and the WIS MDIO registers from the subset in [802.3ae]
subclause 50.3.11 required to support them.
Note that the MDIO interface is optional;
however, if it is not implemented, then the capabilities of the required register subset must be provided by other means.
10G WIS control 2 ETHER WIS etherWisDeviceRxTestPatternMode
10G WIS control 2 ETHER
10G WIS test pattern error counter
10G WIS status 3 SONET MIB sonetLineCurrentUASs
10G WIS status 3 SONET MIB sonetFarEndLineCurrentUASs
10G WIS status 3 ETHER
10G WIS status 3 ETHER WIS etherWisPathCurrentJ1Transmitted    10G WIS J1 transmit ETHER WIS
10G WIS J1 receive SONET MIB sonetPathCurrentWidth
WIS status 3 SONET MIB sonetPathCurrentUASs
10G WIS status 3 SONET
10G WIS status 3 SONET MIB sonetFarEndPathCurrentUASs
path block SONET MIB sonetFarEndPathIntervalCVs
error count SONET MIB sonetFarEndPathIntervalUASs
G WIS status 3 MAU MIB
Structure of the MIB Module Four tables are defined in this MIB module.
The purpose of this table is to define managed objects to control the WIS test pattern mode.
These objects are required to support mandatory and optional WIS test features specified in [802.3ae] subclause 50.3.8.
The etherWisDeviceTable is a sparse augmentation of the sonetMediumTable of the SONET
MIB   in other words, for each entry in the etherWisDeviceTable there MUST be an entry in the sonetMediumTable and the same ifIndex value MUST be used for both entries.
The purpose of this table is to define managed objects for the transmitted and received section trace messages (J0 byte).
The etherWisSectionCurrentTable is a sparse augmentation of the sonetSectionCurrentTable of the SONET MIB   in other words, for each entry in the etherWisSectionCurrentTable there MUST be an entry in the sonetSectionCurrentTable and the same ifIndex value MUST be used for both entries.
The purpose of this table is to define managed objects for the current WIS path layer status and for the transmitted and received path trace messages (J1 byte).
The path layer status object is provided because the WIS supports some near end path status conditions that are not reported in sonetPathCurrentStatus.
The etherWisPathCurrentTable is a sparse augmentation of the sonetPathCurrentTable of the SONET
MIB   in other words, for each entry in the etherWisPathCurrentTable there MUST be an entry in the sonetPathCurrentTable and
the same ifIndex value MUST be used for both entries.
The purpose of this table is to define a managed object for the current status of the far end of the path.
This object is provided because the WIS supports some far end path status conditions that are not reported in sonetPathCurrentStatus.
The etherWisFarEndPathCurrentTable is a sparse augmentation of the sonetFarEndPathCurrentTable of the SONET
MIB   in other words, for each entry in the etherWisFarEndPathCurrentTable there MUST be an entry in the sonetFarEndPathCurrentTable and the same ifIndex value MUST be used for both entries.
Object Definitions ETHER WIS DEFINITIONS ::
IMPORTS MODULE IDENTITY, OBJECT TYPE, Gauge32,
transmission FROM SNMPv2 SMI ifIndex FROM IF
MIB MODULE COMPLIANCE, OBJECT GROUP FROM SNMPv2 CONF sonetMediumStuff2, sonetSectionStuff2, sonetLineStuff2, sonetFarEndLineStuff2, sonetPathStuff2, sonetFarEndPathStuff2, sonetMediumType, sonetMediumLineCoding, sonetMediumLineType, sonetMediumCircuitIdentifier, sonetMediumLoopbackConfig, sonetSESthresholdSet, sonetPathCurrentWidth FROM SONET MIB; etherWisMIB
In Body: subscribe your email address Chair: Dan Romascanu Postal:
Avaya Inc. Atidim Technology Park, Bldg.
600 Rainbow Dr. #141 Mountain View, CA 94041 2542
The objects in this MIB module are used in conjunction with objects in the SONET MIB and the MAU MIB to manage the Ethernet WAN Interface Sublayer (WIS).
The following reference is used throughout this MIB module:
[IEEE 802.3 Std] refers to: IEEE Std 802.3,
2000 Edition: 'IEEE Standard for Information technology Telecommunications and information exchange between systems Local and metropolitan area networks Specific requirements Part 3:
Carrier sense multiple access with collision detection (CSMA/CD) access method and physical layer specifications', as amended by IEEE Std 802.3ae 2002, 'IEEE Standard for Carrier Sense Multiple Access with Collision Detection (CSMA/CD) Access Method and Physical Layer Specifications Media Access Control (MAC)
Parameters, Physical Layer and Management Parameters for 10 Gb/s Operation', 30 August 2002.
Of particular interest are Clause 50, 'WAN Interface Sublayer (WIS), type 10GBASE W', Clause 30, '10Mb/s, 100Mb/s, 1000Mb/s, and 10Gb/s MAC Control, and Link Aggregation Management', and Clause 45, 'Management Data Input/Output (MDIO) Interface'.
This version of this MIB module is part of RFC 3637;  see the RFC itself for full legal notices."
groups in the Ethernet WIS MIB module etherWisDevice
These objects provide WIS extensions to   the SONET MIB Medium Group.
SEQUENCE OF EtherWisDeviceEntry MAX ACCESS
} etherWisDeviceEntry OBJECT TYPE SYNTAX
EtherWisDeviceEntry MAX ACCESS  not accessible STATUS  current DESCRIPTION
"An entry in the Ethernet WIS device table.
For each instance of this object there MUST be a corresponding instance of sonetMediumEntry.
INTEGER { none(1), squareWave(2), prbs31(3), mixedFrequency(4) }
"This variable controls the transmit test pattern mode.
The value none(1) puts the the WIS transmit path into the normal operating mode.
The value squareWave(2) puts the WIS transmit path into the square wave test pattern mode described in [IEEE 802.3
The value prbs31(3) puts the WIS transmit path into the PRBS31 test pattern mode described in [IEEE 802.3
The value mixedFrequency(4) puts the WIS transmit path into the mixed frequency test pattern mode described in [IEEE 802.3
Any attempt to set this object to a value other than none(1) when the corresponding instance of ifAdminStatus has the value up(1) MUST be rejected with the error inconsistentValue, and any attempt to set the corresponding instance of ifAdminStatus to the value up(1) when an instance of this object has a value other than none(1) MUST be rejected with the error inconsistentValue.
" REFERENCE "[IEEE 802.3 Std.], 50.3.8, WIS test pattern generator and checker, 45.2.2.6, 10G WIS control
2 register (2.7), and 45.2.2.7.2, PRBS31 pattern testing ability (2.8.1)."
INTEGER { none(1), prbs31(3), mixedFrequency(4)
"This variable controls the receive test pattern mode.
The value none(1) puts the the WIS receive path into the normal operating mode.
The value prbs31(3) puts the WIS receive path into the PRBS31 test pattern mode described in [IEEE 802.3
The value mixedFrequency(4) puts the WIS receive path into the mixed frequency test pattern mode described in [IEEE 802.3
Any attempt to set this object to a value other than none(1) when the corresponding instance of ifAdminStatus has the value up(1) MUST be rejected with the error inconsistentValue, and any attempt to set the corresponding instance of ifAdminStatus to the value up(1) when an instance of this object has a value other than none(1) MUST be rejected with the error inconsistentValue.
" REFERENCE "[IEEE 802.3 Std.], 50.3.8, WIS test pattern generator and checker, 45.2.2.6, 10G WIS control
2 register (2.7), and 45.2.2.7.2, PRBS31 pattern testing ability (2.8.1)."
{ etherWisDeviceEntry 2 } etherWisDeviceRxTestPatternErrors OBJECT TYPE SYNTAX
"This object counts the number of errors detected when the WIS receive path is operating in the PRBS31 test pattern mode.
It is reset to zero when the WIS receive
path initially enters that mode, and it increments each time the PRBS pattern checker detects an error as described in [IEEE 802.3
subclause 50.3.8.2 unless its value is 65535, in which case it remains unchanged.
This object is writeable so that it may be reset upon explicit request of a command generator application while the WIS receive path continues to operate in PRBS31 test pattern mode.
These objects provide WIS extensions to   the SONET MIB Section Group.
SEQUENCE OF EtherWisSectionCurrentEntry MAX ACCESS
"The table for the current state of Ethernet WIS sections."
{ etherWisSection 1 } etherWisSectionCurrentEntry OBJECT TYPE SYNTAX
An entry in the etherWisSectionCurrentTable.
For each instance of this object there MUST be a corresponding instance of sonetSectionCurrentEntry.
"This is the 16 octet section trace message that is transmitted in the J0 byte.
The value SHOULD be '89'h followed by fifteen octets of '00'h
(or some cyclic shift thereof) when the section trace function is not used, and the implementation SHOULD use that value (or a cyclic shift thereof) as a default if no other value has been set.
MAX ACCESS  read only STATUS  current DESCRIPTION
"This is the 16 octet section trace message that was most recently received in the J0 byte.
These objects provide WIS extensions to   the SONET MIB Path Group.
An entry in the etherWisPathCurrentTable.
For each instance of this object there MUST be a corresponding instance of sonetPathCurrentEntry.
BITS { etherWisPathLOP(0), etherWisPathAIS(1), etherWisPathPLM(2), etherWisPathLCD(3) } MAX ACCESS  read only STATUS  current DESCRIPTION
"This variable indicates the current status of the path payload with a bit map that can indicate multiple defects at once.
The bit positions are assigned as follows:
This bit is set to indicate that an LOP P (Loss of Pointer Path) defect is being experienced.
when this bit is set, sonetPathSTSLOP MUST be set in the corresponding instance of sonetPathCurrentStatus.
This bit is set to indicate that an AIS P (Alarm Indication Signal Path) defect is being experienced.
when this bit is set, sonetPathSTSAIS MUST be set in the corresponding instance of sonetPathCurrentStatus.
This bit is set to indicate that a PLM P (Payload Label Mismatch Path) defect is being experienced.
when this bit is set, sonetPathSignalLabelMismatch MUST be set in the corresponding instance of sonetPathCurrentStatus.
This bit is set to indicate that an LCD P (Loss of Codegroup Delination Path) defect is being experienced.
Since this defect is detected by the PCS and not by the path layer itself, there is no corresponding bit in sonetPathCurrentStatus.
" REFERENCE "[IEEE 802.3 Std.]
"This is the 16 octet path trace message that is transmitted in the J1 byte.
The value SHOULD be '89'h followed by fifteen octets of '00'h
(or some cyclic shift thereof) when the path trace function is not used, and the implementation SHOULD use that value (or a cyclic shift thereof) as a default if no other value has been set.
" REFERENCE "[IEEE 802.3 Std.]
MAX ACCESS  read only STATUS  current DESCRIPTION
"This is the 16 octet path trace message that was most recently received in the J1 byte.
" REFERENCE "[IEEE 802.3 Std.]
the SONET MIB Far End Path Group.
The table for the current far end state of Ethernet WIS paths."
An entry in the etherWisFarEndPathCurrentTable.
For each instance of this object there MUST be a corresponding instance of sonetFarEndPathCurrentEntry.
), etherWisFarEndServerDefect(1) } MAX ACCESS  read only STATUS  current DESCRIPTION
"This variable indicates the current status at the far end of the path using a bit map that can indicate multiple defects at once.
The bit positions are assigned as follows:
A far end payload defect (i.e., far end PLM P or LCD P) is currently being signaled in G1 bits 5 7.
A far end server defect (i.e., far end LOP P or AIS P) is currently being signaled in G1 bits 5 7.
when this bit is set, sonetPathSTSRDI MUST be set in the corresponding instance of sonetPathCurrentStatus.
" REFERENCE "[IEEE 802.3 Std.]
Object Groups etherWisDeviceGroupBasic OBJECT GROUP OBJECTS { etherWisDeviceTxTestPatternMode, etherWisDeviceRxTestPatternMode } STATUS  current DESCRIPTION
"A collection of objects that provide required information about a WIS path."
OBJECT GROUP OBJECTS { etherWisFarEndPathCurrentStatus } STATUS  current DESCRIPTION
"The compliance statement for interfaces that include the Ethernet WIS.
Compliance with the following external compliance statements is prerequisite:
this module MANDATORY GROUPS { etherWisDeviceGroupBasic, etherWisSectionGroup, etherWisPathGroup, etherWisFarEndPathGroup } OBJECT
"Implementation of this group, along with support for the value prbs31(3) for etherWisDeviceTxTestPatternMode and etherWisDeviceRxTestPatternMode, is necessary if the optional PRBS31 test pattern mode is to be supported."
SYNTAX Gauge32 ( 0 ) DESCRIPTION "
An implementation is not required to allow values other than zero to be written to this object.
MODULE SONET MIB MANDATORY GROUPS { sonetMediumStuff2, sonetSectionStuff2, sonetLineStuff2, sonetFarEndLineStuff2, sonetPathStuff2,
MIN ACCESS   read only DESCRIPTION "Write access is not required, nor is support for any value other than sonet(1).
MIN ACCESS   read only DESCRIPTION "Write access is not required, nor is support for any value other than sonetMediumNRZ(4).
"Write access is not required."
"Write access is not required."
MIN ACCESS   read only DESCRIPTION "Write access is not required, nor is support for values other than sonetNoLoop(0) and sonetFacilityLoop(1).
sonetSESthresholdSet MIN ACCESS   read only DESCRIPTION "Write access is not required, and only one of the enumerated values need be supported."
MIN ACCESS   read only DESCRIPTION "Write access is not required, nor is support for any value other than sts192cSTM64(6)."
There are five managed objects defined in this MIB module that have a MAX ACCESS clause of read write: etherWisDeviceTxTestPatternMode, etherWisDeviceRxTestPatternMode, etherWisDeviceRxTestPatternErrors, etherWisSectionCurrentJ0Transmitted, and etherWisPathCurrentJ1Transmitted.
Writing to these objects can have the following potentially disruptive effects on network operation:  changing the transmit or receive test pattern mode or modifying the accumulated error count from a PRBS31 pattern test on an administratively disabled 10GBASE W interface, which can interfere with an in progress pattern test;  modifying the transmitted section trace and/or path trace message on an operational 10GBASE W interface, which can cause connectivity alarms to be raised at the remote of the link.
The user of this MIB module must therefore be aware that support for SET operations in a non secure environment without proper protection can have a negative effect on network operations.
The readable objects in this MIB module (i.e., those with MAX ACCESS other than not accessible) may be considered sensitive in some environments since, collectively, they provide information about the performance of network interfaces and can reveal some aspects of their configuration.
In such environments it is important to control even GET and NOTIFY access to these objects and possibly even to encrypt their values when sending them over the network via SNMP.
SNMP versions prior to SNMPv3 did not include adequate security.
Even if the network itself is secure (for example by using IPSec), even then, there is no control as to who on the secure network is allowed to access and
the objects in this MIB module.
It is RECOMMENDED that implementers consider the security features as provided by the SNMPv3 framework (see [RFC3410], section 8), including full support for the SNMPv3 cryptographic mechanisms (for authentication and privacy).
Further, deployment of SNMP versions prior to SNMPv3 is NOT RECOMMENDED.
Instead, it is RECOMMENDED to deploy SNMPv3 and to enable cryptographic security.
It is then a customer/operator responsibility to ensure that the SNMP entity giving access to an instance of this MIB module is properly configured to give access to the objects only to those principals (users) that have legitimate rights to indeed GET or SET
Appendix A:  Collection of Performance Data
The purpose of this appendix is to illustrate how the WIS MDIO registers specified in [802.3ae] subclause 45.2.2 (and more specifically the subset required by [802.3ae] subclause 50.3.11) can be used to collect performance data either according to the conventions adopted by this document or according to the conventions specified in [802.3ae] Clause 30.
For an agent implementing the SNMP managed objects required by this document the first step in collecting WIS performance data would be to poll the 10G WIS status 3 register and the various error count registers (10G WIS section BIP error count, 10G WIS line BIP errors, 10G WIS far end line BIP errors, 10G WIS path block error count, and 10G WIS far end path block error count) once per second.
The 10G WIS status 3 register bits are all latched until read and so would indicate whether a given defect occurred any time during the previous second.
The error count registers roll over modulo 2^16 or 2^32, and so to find the number of errors within the previous second the agent would need to subtract (modulo 2^16 or 2^32) the current reading from the reading taken one second ago.
Armed with that information, the agent could determine for any layer whether the one second interval was an errored second, a severely errored second (that requires comparison with a threshold unless a defect is present), or a severely errored frame second.
Determining whether a given second is or is not part of unavailable time
requires additional logic;  the most straightforward and accurate method is the delay line approach outlined in Appendix A of [RFC3592].
With that information available the agent would be able to determine by how much each current count should be incremented (including effects of inhibiting).
Implementations that conform to [T1.231] would end each 15 minute interval on time of day clock 1/4 hour boundaries;  if the delay line approach is used then a time of day timestamp would accompany the one second statistics.
At the end of each interval the current registers would be pushed onto the history stack and then would be cleared.
The xyxIntervalValidData flags would be set to False(2) if the number of samples was not between 890 and 910 or, in the case of far end counts, if a near end defect occurred during the just completed interval (see [T1.231] Section 9.1.2.2 for details).
An agent implementing the [802.3ae]
Clause 30 oWIS objects could also start by polling the 10G WIS status 3 register and the various error count registers to find the defects and error counts for the previous second, and it could determine the number of errors and whether the second was an errored second, a severely errored second, or a severely errored frame second in the same manner as above.
The rest of the process would simply be to increment the generalized non  resetable counters without consideration of any inhibiting rules.
Contributors Mike Ayers 1204 Knox Ave.
mike.ayers@earthling.net John Flick Hewlett Packard Company 8000 Foothills Blvd.
johnf@rose.hp.com Kam Lam Lucent Technologies 101 Crawfords Corner Road,
Room 4C 616A Holmdel, NJ 07733
1 732 949 8338 EMail:
hklam@lucent.com Kerry McDonald Institute for Applied Supercomputing California State University San Bernardino EMail: kerry mcd@hotmail.com
K. C. Norseth L 3 Communications 640 N. 2200
Salt Lake City, Utah 84116 0850
USA Phone:  1 801 594 2809 EMail: kenyon.c.norseth@L 3com.com
kcn@norseth.com Kaj Tesink Telcordia Technologies 331
Newman Springs Road P.O. Box 7020
Red Bank, NJ  07701 7020
1 732 758 5254 EMail:
kaj@research.telcordia.com Editor's Address C. M. Heard 600 Rainbow Dr.
#141 Mountain View, CA 94041 2542
1 650 964 8391 EMail:
