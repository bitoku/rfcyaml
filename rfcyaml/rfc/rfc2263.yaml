- title: __initial_text__
  contents:
  - '                          SNMPv3 Applications

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1997).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo describes five types of SNMP applications which make use\
    \ of\n   an SNMP engine as described in [RFC2261].  The types of application\n\
    \   described are Command Generators, Command Responders, Notification\n   Originators,\
    \ Notification Receivers, and Proxy Forwarders.\n   This memo also defines MIB\
    \ modules for specifying targets of\n   management operations, for notification\
    \ filtering, and for proxy\n   forwarding.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1 Overview .....................................................\
    \    2\n   1.1 Command Generator Applications .............................  \
    \  3\n   1.2 Command Responder Applications .............................    3\n\
    \   1.3 Notification Originator Applications .......................    3\n  \
    \ 1.4 Notification Receiver Applications .........................    3\n   1.5\
    \ Proxy Forwarder Applications ...............................    3\n   2 Management\
    \ Targets ...........................................    5\n   3 Elements Of Procedure\
    \ ........................................    6\n   3.1 Command Generator Applications\
    \ .............................    6\n   3.2 Command Responder Applications .............................\
    \    8\n   3.3 Notification Originator Applications .......................  \
    \ 13\n   3.4 Notification Receiver Applications .........................   16\n\
    \   3.5 Proxy Forwarder Applications ...............................   18\n  \
    \ 3.5.1 Request Forwarding .......................................   19\n   3.5.1.1\
    \ Processing an Incoming Request .........................   19\n   3.5.1.2 Processing\
    \ an Incoming Response ........................   22\n   3.5.1.3 Processing an\
    \ Incoming Report Indication ...............   23\n   3.5.2 Notification Forwarding\
    \ ..................................   24\n   4 The Structure of the MIB Modules\
    \ .............................   27\n   4.1 The Management Target MIB Module\
    \ ...........................   27\n   4.1.1 Tag Lists ................................................\
    \   28\n   4.1.2 Definitions ..............................................  \
    \ 28\n   4.2 The Notification MIB Module ................................   41\n\
    \   4.2.1 Definitions ..............................................   42\n  \
    \ 4.3 The Proxy MIB Module .......................................   53\n   4.3.1\
    \ Definitions ..............................................   53\n   5 Identification\
    \ of Management Targets in Notification\n        Originators ...............................................\
    \   59\n   6 Notification Filtering .......................................  \
    \ 60\n   7 Management Target Translation in Proxy  Forwarder\n        Applications\
    \ ..............................................   61\n   7.1 Management Target\
    \ Translation for Request Forwarding .......   61\n   7.2 Management Target Translation\
    \ for Notification Forwarding\n        ...........................................................\
    \   62\n   8 Intellectual Property ........................................  \
    \ 63\n   9 Acknowledgments ..............................................   64\n\
    \   10 Security Considerations .....................................   65\n  \
    \ 11 References ..................................................   65\n   12\
    \ Editors' Address ............................................   67\n   A. Trap\
    \ Configuration Example ..................................   68\n   B. Full Copyright\
    \ Statement ....................................   70\n"
- title: 1.  Overview
  contents:
  - "1.  Overview\n   This document describes five types of SNMP applications:\n \
    \      -  Applications which initiate SNMP Get, GetNext, GetBulk, and/or\n   \
    \       Set requests, called 'command generators.'\n       -  Applications which\
    \ respond to SNMP Get, GetNext, GetBulk,\n          and/or Set requests, called\
    \ 'command responders.'\n       -  Applications which generate notifications,\
    \ called\n          'notification originators.'\n       -  Applications which\
    \ receive notifications, called 'notification\n          receivers.'\n       -\
    \  Applications which forward SNMP Get, GetNext, GetBulk, and/or\n          Set\
    \ requests or notifications, called 'proxy forwarder.'\n   Note that there are\
    \ no restrictions on which types of applications\n   may be associated with a\
    \ particular SNMP engine.  For example, a\n   single SNMP engine may, in fact,\
    \ be associated with both command\n   generator and command responder applications.\n"
- title: 1.1.  Command Generator Applications
  contents:
  - "1.1.  Command Generator Applications\n   A command generator application initiates\
    \ SNMP Get, GetNext, GetBulk,\n   and/or Set requests, as well as processing the\
    \ response to a request\n   which it generated.\n"
- title: 1.2.  Command Responder Applications
  contents:
  - "1.2.  Command Responder Applications\n   A command responder application receives\
    \ SNMP Get, GetNext, GetBulk,\n   and/or Set requests destined for the local system\
    \ as indicated by the\n   fact that the contextEngineID in the received request\
    \ is equal to\n   that of the local engine through which the request was received.\
    \  The\n   command responder application will perform the appropriate protocol\n\
    \   operation, using access control, and will generate a response message\n  \
    \ to be sent to the request's originator.\n"
- title: 1.3.  Notification Originator Applications
  contents:
  - "1.3.  Notification Originator Applications\n   A notification originator application\
    \ conceptually monitors a system\n   for particular events or conditions, and\
    \ generates Trap and/or Inform\n   messages based on these events or conditions.\
    \  A notification\n   originator must have a mechanism for determining where to\
    \ send\n   messages, and what SNMP version and security parameters to use when\n\
    \   sending messages.  A mechanism and MIB module for this purpose is\n   provided\
    \ in this document.\n"
- title: 1.4.  Notification Receiver Applications
  contents:
  - "1.4.  Notification Receiver Applications\n   A notification receiver application\
    \ listens for notification\n   messages, and generates response messages when\
    \ a message containing\n   an Inform PDU is received.\n"
- title: 1.5.  Proxy Forwarder Applications
  contents:
  - "1.5.  Proxy Forwarder Applications\n   A proxy forwarder application forwards\
    \ SNMP messages.  Note that\n   implementation of a proxy forwarder application\
    \ is optional.  The\n   sections describing proxy (4.5, 5.3, and 8) may be skipped\
    \ for\n   implementations that do not include a proxy forwarder application.\n\
    \   The term \"proxy\" has historically been used very loosely, with\n   multiple\
    \ different meanings.  These different meanings include (among\n   others):\n"
- title: (1)  the forwarding of SNMP requests to other SNMP entities without
  contents:
  - "(1)  the forwarding of SNMP requests to other SNMP entities without\n     regard\
    \ for what managed object types are being accessed; for\n     example, in order\
    \ to forward an SNMP request from one transport\n     domain to another, or to\
    \ translate SNMP requests of one version\n     into SNMP requests of another version;\n"
- title: (2)  the translation of SNMP requests into operations of some non-SNMP
  contents:
  - "(2)  the translation of SNMP requests into operations of some non-SNMP\n    \
    \ management protocol; and\n"
- title: (3)  support for aggregated managed objects where the value of one
  contents:
  - "(3)  support for aggregated managed objects where the value of one\n     managed\
    \ object instance depends upon the values of multiple other\n     (remote) items\
    \ of management information.\n   Each of these scenarios can be advantageous;\
    \ for example, support for\n   aggregation of management information can significantly\
    \ reduce the\n   bandwidth requirements of large-scale management activities.\n\
    \   However, using a single term to cover multiple different scenarios\n   causes\
    \ confusion.\n   To avoid such confusion, this document uses the term \"proxy\"\
    \ with a\n   much more tightly defined meaning.  The term \"proxy\" is used in\
    \ this\n   document to refer to a proxy forwarder application which forwards\n\
    \   either SNMP requests, notifications, and responses without regard for\n  \
    \ what managed objects are contained within requests or notifications.\n   This\
    \ definition is most closely related to the first definition\n   above.  Note,\
    \ however, that in the SNMP architecture [RFC2261], a\n   proxy forwarder is actually\
    \ an application, and need not be\n   associated with what is traditionally thought\
    \ of as an SNMP agent.\n   Specifically, the distinction between a traditional\
    \ SNMP agent and a\n   proxy forwarder application is simple:\n       -  a proxy\
    \ forwarder application forwards requests and/or\n          notifications to other\
    \ SNMP engines according to the context,\n          and irrespective of the specific\
    \ managed object types being\n          accessed, and forwards the response to\
    \ such previously\n          forwarded messages back to the SNMP engine from which\
    \ the\n          original message was received;\n       -  in contrast, the command\
    \ responder application that is part of\n          what is traditionally thought\
    \ of as an SNMP agent, and which\n          processes SNMP requests according\
    \ to the (names of the)\n          individual managed object types and instances\
    \ being accessed,\n          is NOT a proxy forwarder application from the perspective\
    \ of\n          this document.\n   Thus, when a proxy forwarder application forwards\
    \ a request or\n   notification for a particular contextEngineID / contextName\
    \ pair, not\n   only is the information on how to forward the request specifically\n\
    \   associated with that context, but the proxy forwarder application has\n  \
    \ no need of a detailed definition of a MIB view (since the proxy\n   forwarder\
    \ application forwards the request irrespective of the\n   managed object types).\n\
    \   In contrast, a command responder application must have the detailed\n   definition\
    \ of the MIB view, and even if it needs to issue requests to\n   other entities,\
    \ via SNMP or otherwise, that need is dependent on the\n   individual managed\
    \ object instances being accessed (i.e., not only on\n   the context).\n   Note\
    \ that it is a design goal of a proxy forwarder application to act\n   as an intermediary\
    \ between the endpoints of a transaction.  In\n   particular, when forwarding\
    \ Inform requests, the associated response\n   is forwarded when it is received\
    \ from the target to which the Inform\n   request was forwarded, rather than generating\
    \ a response immediately\n   when an Inform request is received.\n"
- title: 2.  Management Targets
  contents:
  - "2.  Management Targets\n   Some types of applications (notification generators\
    \ and proxy\n   forwarders in particular) require a mechanism for determining\
    \ where\n   and how to send generated messages.  This document provides a\n  \
    \ mechanism and MIB module for this purpose.  The set of information\n   that\
    \ describes where and how to send a message is called a\n   'Management Target',\
    \ and consists of two kinds of information:\n       -  Destination information,\
    \ consisting of a transport domain and\n          a transport address.  This is\
    \ also termed a transport\n          endpoint.\n       -  SNMP parameters, consisting\
    \ of message processing model,\n          security model, security level, and\
    \ security name information.\n   The SNMP-TARGET-MIB module described later in\
    \ this document contains\n   one table for each of these types of information.\
    \  There can be a\n   many-to-many relationship in the MIB between these two types\
    \ of\n   information.  That is, there may be multiple transport endpoints\n  \
    \ associated with a particular set of SNMP parameters, or a particular\n   transport\
    \ endpoint may be associated with several sets of SNMP\n   parameters.\n"
- title: 3.  Elements Of Procedure
  contents:
  - "3.  Elements Of Procedure\n   The following sections describe the procedures\
    \ followed by each type\n   of application when generating messages for transmission\
    \ or when\n   processing received messages.  Applications communicate with the\n\
    \   Dispatcher using the abstract service interfaces defined in [RFC2261].\n"
- title: 3.1.  Command Generator Applications
  contents:
  - "3.1.  Command Generator Applications\n   A command generator initiates an SNMP\
    \ request by calling the\n   Dispatcher using the following abstract service interface:\n\
    \       statusInformation =              -- sendPduHandle if success\n       \
    \                                 -- errorIndication if failure\n         sendPdu(\n\
    \         IN   transportDomain           -- transport domain to be used\n    \
    \     IN   transportAddress          -- destination network address\n        \
    \ IN   messageProcessingModel    -- typically, SNMP version\n         IN   securityModel\
    \             -- Security Model to use\n         IN   securityName           \
    \   -- on behalf of this principal\n         IN   securityLevel             --\
    \ Level of Security requested\n         IN   contextEngineID           -- data\
    \ from/at this entity\n         IN   contextName               -- data from/in\
    \ this context\n         IN   pduVersion                -- the version of the\
    \ PDU\n         IN   PDU                       -- SNMP Protocol Data Unit\n  \
    \       IN   expectResponse            -- TRUE or FALSE\n              )\n   Where:\n\
    \       -  The transportDomain is that of the destination of the message.\n  \
    \     -  The transportAddress is that of the destination of the\n          message.\n\
    \       -  The messageProcessingModel indicates which Message Processing\n   \
    \       Model the application wishes to use.\n       -  The securityModel is the\
    \ security model that the application\n          wishes to use.\n       -  The\
    \ securityName is the security model independent name for\n          the principal\
    \ on whose behalf the application wishes the\n          message is to be generated.\n\
    \       -  The securityLevel is the security level that the application\n    \
    \      wishes to use.\n       -  The contextEngineID is provided by the command\
    \ generator if it\n          wishes to explicitly specify the location of the\
    \ management\n          information it is requesting.\n       -  The contextName\
    \ is provided by the command generator if it\n          wishes to explicitly specify\
    \ the local context name for the\n          management information it is requesting.\n\
    \       -  The pduVersion indicates the version of the PDU to be sent.\n     \
    \  -  The PDU is a value constructed by the command generator\n          containing\
    \ the management operation that the command generator\n          wishes to perform.\n\
    \       -  The expectResponse argument indicates that a response is\n        \
    \  expected.\n   The result of the sendPdu interface indicates whether the PDU\
    \ was\n   successfully sent.  If it was successfully sent, the returned value\n\
    \   will be a sendPduHandle.  The command generator should store the\n   sendPduHandle\
    \ so that it can correlate a response to the original\n   request.\n   The Dispatcher\
    \ is responsible for delivering the response to a\n   particular request to the\
    \ correct command generator application.  The\n   abstract service interface used\
    \ is:\n       processResponsePdu(              -- process Response PDU\n     \
    \    IN   messageProcessingModel    -- typically, SNMP version\n         IN  \
    \ securityModel             -- Security Model in use\n         IN   securityName\
    \              -- on behalf of this principal\n         IN   securityLevel   \
    \          -- Level of Security\n         IN   contextEngineID           -- data\
    \ from/at this SNMP entity\n         IN   contextName               -- data from/in\
    \ this context\n         IN   pduVersion                -- the version of the\
    \ PDU\n         IN   PDU                       -- SNMP Protocol Data Unit\n  \
    \       IN   statusInformation         -- success or errorIndication\n       \
    \  IN   sendPduHandle             -- handle from sendPDU\n              )\n  \
    \ Where:\n       -  The messageProcessingModel is the value from the received\n\
    \          response.\n       -  The securityModel is the value from the received\
    \ response.\n       -  The securityName is the value from the received response.\n\
    \       -  The securityLevel is the value from the received response.\n      \
    \ -  The contextEngineID is the value from the received response.\n       -  The\
    \ contextName is the value from the received response.\n       -  The pduVersion\
    \ indicates the version of the PDU in the\n          received response.\n    \
    \   -  The PDU is the value from the received response.\n       -  The statusInformation\
    \ indicates success or failure in\n          receiving the response.\n       -\
    \  The sendPduHandle is the value returned by the sendPdu call\n          which\
    \ generated the original request to which this is a\n          response.\n   The\
    \ procedure when a command generator receives a message is as\n   follows:\n"
- title: (1)  If the received values of messageProcessingModel, securityModel,
  contents:
  - "(1)  If the received values of messageProcessingModel, securityModel,\n     securityName,\
    \ contextEngineID, contextName, and pduVersion are not\n     all equal to the\
    \ values used in the original request, the response\n     is discarded.\n"
- title: (2)  The operation type, request-id, error-status, error-index, and
  contents:
  - "(2)  The operation type, request-id, error-status, error-index, and\n     variable-bindings\
    \ are extracted from the PDU and saved.  If the\n     request-id is not equal\
    \ to the value used in the original request,\n     the response is discarded.\n"
- title: (3)  At this point, it is up to the application to take an appropriate
  contents:
  - "(3)  At this point, it is up to the application to take an appropriate\n    \
    \ action.  The specific action is implementation dependent.  If the\n     statusInformation\
    \ indicates that the request failed, an appropriate\n     action might be to attempt\
    \ to transmit the request again, or to\n     notify the person operating the application\
    \ that a failure\n     occurred.\n"
- title: 3.2.  Command Responder Applications
  contents:
  - "3.2.  Command Responder Applications\n   Before a command responder application\
    \ can process messages, it must\n   first associate itself with an SNMP engine.\
    \  The abstract service\n   interface used for this purpose is:\n       statusInformation\
    \ =        -- success or errorIndication\n         registerContextEngineID(\n\
    \         IN   contextEngineID     -- take responsibility for this one\n     \
    \    IN   pduType             -- the pduType(s) to be registered\n           \
    \   )\n   Where:\n       -  The statusInformation indicates success or failure\
    \ of the\n          registration attempt.\n       -  The contextEngineID is equal\
    \ to the snmpEngineID of the SNMP\n          engine with which the command responder\
    \ is registering.\n       -  The pduType indicates a Get, GetNext, GetBulk, or\
    \ Set pdu.\n   Note that if another command responder application is already\n\
    \   registered with an SNMP engine, any further attempts to register with\n  \
    \ the same contextEngineID and pduType will be denied.  This implies\n   that\
    \ separate command responder applications could register\n   separately for the\
    \ various pdu types.  However, in practice this is\n   undesirable, and only a\
    \ single command responder application should\n   be registered with an SNMP engine\
    \ at any given time.\n   A command responder application can disassociate with\
    \ an SNMP engine\n   using the following abstract service interface:\n       unregisterContextEngineID(\n\
    \         IN   contextEngineID     -- give up responsibility for this one\n  \
    \       IN   pduType             -- the pduType(s) to be unregistered\n      \
    \        )\n   Where:\n       -  The contextEngineID is equal to the snmpEngineID\
    \ of the SNMP\n          engine with which the command responder is cancelling\
    \ the\n          registration.\n       -  The pduType indicates a Get, GetNext,\
    \ GetBulk, or Set pdu.\n   Once the command responder has registered with the\
    \ SNMP engine, it\n   waits to receive SNMP messages.  The abstract service interface\
    \ used\n   for receiving messages is:\n   processPdu(                     -- process\
    \ Request/Notification PDU\n     IN   messageProcessingModel   -- typically, SNMP\
    \ version\n     IN   securityModel            -- Security Model in use\n     IN\
    \   securityName             -- on behalf of this principal\n     IN   securityLevel\
    \            -- Level of Security\n     IN   contextEngineID          -- data\
    \ from/at this SNMP entity\n     IN   contextName              -- data from/in\
    \ this context\n     IN   pduVersion               -- the version of the PDU\n\
    \     IN   PDU                      -- SNMP Protocol Data Unit\n     IN   maxSizeResponseScopedPDU\
    \ -- maximum size of the Response PDU\n     IN   stateReference           -- reference\
    \ to state information\n          )                        -- needed when sending\
    \ a response\n   Where:\n       -  The messageProcessingModel indicates which\
    \ Message Processing\n          Model received and processed the message.\n  \
    \     -  The securityModel is the value from the received message.\n       - \
    \ The securityName is the value from the received message.\n       -  The securityLevel\
    \ is the value from the received message.\n       -  The contextEngineID is the\
    \ value from the received message.\n       -  The contextName is the value from\
    \ the received message.\n       -  The pduVersion indicates the version of the\
    \ PDU in the\n          received message.\n       -  The PDU is the value from\
    \ the received message.\n       -  The maxSizeResponseScopedPDU is the maximum\
    \ allowable size of\n          a ScopedPDU containing a Response PDU (based on\
    \ the maximum\n          message size that the originator of the message can accept).\n\
    \       -  The stateReference is a value which references cached\n          information\
    \ about each received request message.  This value\n          must be returned\
    \ to the Dispatcher in order to generate a\n          response.\n   The procedure\
    \ when a message is received is as follows.\n"
- title: (1)  The operation type is determined from the ASN.1 tag value
  contents:
  - "(1)  The operation type is determined from the ASN.1 tag value\n     associated\
    \ with the PDU parameter.  The operation type should\n     always be one of the\
    \ types previously registered by the\n     application.\n"
- title: (2)  The request-id is extracted from the PDU and saved.
  contents:
  - '(2)  The request-id is extracted from the PDU and saved.

    '
- title: (3)  If the SNMPv2 operation type is GetBulk, the non-repeaters and
  contents:
  - "(3)  If the SNMPv2 operation type is GetBulk, the non-repeaters and\n     max-repetitions\
    \ values are extracted from the PDU and saved.\n"
- title: (4)  The variable-bindings are extracted from the PDU and saved.
  contents:
  - '(4)  The variable-bindings are extracted from the PDU and saved.

    '
- title: (5)  The management operation represented by the SNMPv2 operation type
  contents:
  - "(5)  The management operation represented by the SNMPv2 operation type\n    \
    \ is performed with respect to the relevant MIB view within the\n     context\
    \ named by the contextName, according to the procedures set\n     forth in [RFC1905].\
    \  The relevant MIB view is determined by the\n     securityLevel, securityModel,\
    \ contextName, securityName, and SNMPv2\n     operation type.  To determine whether\
    \ a particular object instance\n     is within the relevant MIB view, the following\
    \ abstract service\n     interface is called:\n         statusInformation =  \
    \    -- success or errorIndication\n           isAccessAllowed(\n           IN\
    \   securityModel     -- Security Model in use\n           IN   securityName \
    \     -- principal who wants to access\n           IN   securityLevel     -- Level\
    \ of Security\n           IN   viewType          -- read, write, or notify view\n\
    \           IN   contextName       -- context containing variableName\n      \
    \     IN   variableName      -- OID for the managed object\n                )\n\
    \     Where:\n       -  The securityModel is the value from the received message.\n\
    \       -  The securityName is the value from the received message.\n       -\
    \  The securityLevel is the value from the received message.\n       -  The viewType\
    \ indicates whether the PDU type is a read or write\n          operation.\n  \
    \     -  The contextName is the value from the received message.\n       -  The\
    \ variableName is the object instance of the variable for\n          which access\
    \ rights are to be checked.\n     Normally, the result of the management operation\
    \ will be a new PDU\n     value, and processing will continue in step (6) below.\
    \  However, at\n     any time during the processing of the management operation:\n\
    \       -  If the isAccessAllowed ASI returns a noSuchView,\n          noAccessEntry,\
    \ or noGroupName error, processing of the\n          management operation is halted,\
    \ a PDU value is contructed\n          using the values from the originally received\
    \ PDU, but\n          replacing the error_status with an authorizationError code,\n\
    \          and error_index value of 0, and control is passed to step (6)\n   \
    \       below.\n       -  If the isAccessAllowed ASI returns an otherError, processing\n\
    \          of the management operation is halted, a different PDU value\n    \
    \      is contructed using the values from the originally received\n         \
    \ PDU, but replacing the error_status with a genError code, and\n          control\
    \ is passed to step (6) below.\n       -  If the isAccessAllowed ASI returns a\
    \ noSuchContext error,\n          processing of the management operation is halted,\
    \ no result\n          PDU is generated, the snmpUnknownContexts counter is\n\
    \          incremented, and control is passed to step (6) below.\n       -  If\
    \ the context named by the contextName parameter is\n          unavailable, processing\
    \ of the management operation is halted,\n          no result PDU is generated,\
    \ the snmpUnavailableContexts\n          counter is incremented, and control is\
    \ passed to step (6)\n          below.\n"
- title: (6)  The Dispatcher is called to generate a response or report message.
  contents:
  - "(6)  The Dispatcher is called to generate a response or report message.\n   \
    \  The abstract service interface is:\n     returnResponsePdu(\n       IN   messageProcessingModel\
    \   -- typically, SNMP version\n       IN   securityModel            -- Security\
    \ Model in use\n       IN   securityName             -- on behalf of this principal\n\
    \       IN   securityLevel            -- same as on incoming request\n       IN\
    \   contextEngineID          -- data from/at this SNMP entity\n       IN   contextName\
    \              -- data from/in this context\n       IN   pduVersion          \
    \     -- the version of the PDU\n       IN   PDU                      -- SNMP\
    \ Protocol Data Unit\n       IN   maxSizeResponseScopedPDU -- maximum size of\
    \ the Response PDU\n       IN   stateReference           -- reference to state\
    \ information\n                                     -- as presented with the request\n\
    \       IN   statusInformation        -- success or errorIndication\n        \
    \    )                        -- error counter OID/value if error\n     Where:\n\
    \       -  The messageProcessingModel is the value from the processPdu\n     \
    \     call.\n       -  The securityModel is the value from the processPdu call.\n\
    \       -  The securityName is the value from the processPdu call.\n       - \
    \ The securityLevel is the value from the processPdu call.\n       -  The contextEngineID\
    \ is the value from the processPdu call.\n       -  The contextName is the value\
    \ from the processPdu call.\n       -  The pduVersion indicates the version of\
    \ the PDU to be\n          returned.  If no result PDU was generated, the pduVersion\
    \ is\n          an undefined value.\n       -  The PDU is the result generated\
    \ in step (5) above.  If no\n          result PDU was generated, the PDU is an\
    \ undefined value.\n       -  The maxSizeResponseScopedPDU is a local value indicating\
    \ the\n          maximum size of a ScopedPDU that the application can accept.\n\
    \       -  The stateReference is the value from the processPdu call.\n       -\
    \  The statusInformation either contains an indication that no\n          error\
    \ occurred and that a response should be generated, or\n          contains an\
    \ indication that an error occurred along with the\n          OID and counter\
    \ value of the appropriate error counter object.\n   Note that a command responder\
    \ application should always call the\n   returnResponsePdu abstract service interface,\
    \ even in the event of an\n   error such as a resource allocation error.  In the\
    \ event of such an\n   error, the PDU value passed to returnResponsePdu should\
    \ contain\n   appropriate values for errorStatus and errorIndex.\n"
- title: 3.3.  Notification Originator Applications
  contents:
  - "3.3.  Notification Originator Applications\n   A notification originator application\
    \ generates SNMP notification\n   messages.  A notification message may, for example,\
    \ contain an\n   SNMPv2-Trap PDU or an Inform PDU.  However, a particular\n  \
    \ implementation is not required to be capable of generating both types\n   of\
    \ messages.\n   Notification originator applications require a mechanism for\n\
    \   identifying the management targets to which notifications should be\n   sent.\
    \  The particular mechanism used is implementation dependent.\n   However, if\
    \ an implementation makes the configuration of management\n   targets SNMP manageable,\
    \ it MUST use the SNMP-TARGET-MIB module\n   described in this document.\n   When\
    \ a notification originator wishes to generate a notification, it\n   must first\
    \ determine in which context the information to be conveyed\n   in the notification\
    \ exists, i.e., it must determine the\n   contextEngineID and contextName.  It\
    \ must then determine the set of\n   management targets to which the notification\
    \ should be sent.  The\n   application must also determine, for each management\
    \ target, whether\n   the notification message should contain an SNMPv2-Trap PDU\
    \ or Inform\n   PDU, and if it is to contain an Inform PDU, the number of retries\
    \ and\n   retransmission algorithm.\n   The mechanism by which a notification\
    \ originator determines this\n   information is implementation dependent.  Once\
    \ the application has\n   determined this information, the following procedure\
    \ is performed for\n   each management target:\n"
- title: (1)  Any appropriate filtering mechanisms are applied to determine
  contents:
  - "(1)  Any appropriate filtering mechanisms are applied to determine\n     whether\
    \ the notification should be sent to the management target.\n     If such filtering\
    \ mechanisms determine that the notification should\n     not be sent, processing\
    \ continues with the next management target.\n     Otherwise,\n"
- title: (2)  The appropriate set of variable-bindings is retrieved from local
  contents:
  - "(2)  The appropriate set of variable-bindings is retrieved from local\n     MIB\
    \ instrumentation within the relevant MIB view.  The relevant MIB\n     view is\
    \ determined by the securityLevel, securityModel,\n     contextName, and securityName\
    \ of the management target.  To\n     determine whether a particular object instance\
    \ is within the\n     relevant MIB view, the isAccessAllowed abstract service\
    \ interface\n     is used, in the same manner as described in the preceding section.\n\
    \     If the statusInformation returned by isAccessAllowed does not\n     indicate\
    \ accessAllowed, the notification is not sent to the\n     management target.\n"
- title: (3)  A PDU is constructed using a locally unique request-id value, an
  contents:
  - "(3)  A PDU is constructed using a locally unique request-id value, an\n     operation\
    \ type of SNMPv2-Trap or Inform, an error-status and\n     error-index value of\
    \ 0, and the variable-bindings supplied\n     previously in step (2).\n"
- title: (4)  If the notification contains an SNMPv2-Trap PDU, the Dispatcher is
  contents:
  - "(4)  If the notification contains an SNMPv2-Trap PDU, the Dispatcher is\n   \
    \  called using the following abstract service interface:\n         statusInformation\
    \ =              -- sendPduHandle if success\n                               \
    \           -- errorIndication if failure\n           sendPdu(\n           IN\
    \   transportDomain           -- transport domain to be used\n           IN  \
    \ transportAddress          -- destination network address\n           IN   messageProcessingModel\
    \    -- typically, SNMP version\n           IN   securityModel             --\
    \ Security Model to use\n           IN   securityName              -- on behalf\
    \ of this principal\n           IN   securityLevel             -- Level of Security\
    \ requested\n           IN   contextEngineID           -- data from/at this entity\n\
    \           IN   contextName               -- data from/in this context\n    \
    \       IN   pduVersion                -- the version of the PDU\n           IN\
    \   PDU                       -- SNMP Protocol Data Unit\n           IN   expectResponse\
    \            -- TRUE or FALSE\n                )\n     Where:\n       -  The transportDomain\
    \ is that of the management target.\n       -  The transportAddress is that of\
    \ the management target.\n       -  The messageProcessingModel is that of the\
    \ management target.\n       -  The securityModel is that of the management target.\n\
    \       -  The securityName is that of the management target.\n       -  The securityLevel\
    \ is that of the management target.\n       -  The contextEngineID is the value\
    \ originally determined for the\n          notification.\n       -  The contextName\
    \ is the value originally determined for the\n          notification.\n      \
    \ -  The pduVersion is the version of the PDU to be sent.\n       -  The PDU is\
    \ the value constructed in step (3) above.\n       -  The expectResponse argument\
    \ indicates that no response is\n          expected.\n     Otherwise,\n"
- title: '(5)  If the notification contains an Inform PDU, then:'
  contents:
  - "(5)  If the notification contains an Inform PDU, then:\n      a)  The Dispatcher\
    \ is called using the sendPdu abstract service\n          interface as described\
    \ in step (4) above, except that the\n          expectResponse argument indicates\
    \ that a response is expected.\n      b)   The application caches information\
    \ about the management\n          target.\n      c)  If a response is received\
    \ within an appropriate time interval\n          from the transport endpoint of\
    \ the management target, the\n          notification is considered acknowledged\
    \ and the cached\n          information is deleted.  Otherwise,\n      d)  If\
    \ a response is not received within an appropriate time\n          period, or\
    \ if a report indication is received, information\n          about the management\
    \ target is retrieved from the cache, and\n          steps a) through d) are repeated.\
    \  The number of times these\n          steps are repeated is equal to the previously\
    \ determined retry\n          count.  If this retry count is exceeded, the acknowledgement\n\
    \          of the notification is considered to have failed, and\n          processing\
    \ of the notification for this management target is\n          halted.\n   Responses\
    \ to Inform PDU notifications will be received via the\n   processResponsePDU\
    \ abstract service interface.\n"
- title: 3.4.  Notification Receiver Applications
  contents:
  - "3.4.  Notification Receiver Applications\n   Notification receiver applications\
    \ receive SNMP Notification messages\n   from the Dispatcher.  Before any messages\
    \ can be received, the\n   notification receiver must register with the Dispatcher\
    \ using the\n   registerContextEngineID abstract service interface.  The parameters\n\
    \   used are:\n       -  The contextEngineID is an undefined 'wildcard' value.\n\
    \          Notifications are delivered to a registered notification\n        \
    \  receiver regardless of the contextEngineID contained in the\n          notification\
    \ message.\n       -  The pduType indicates the type of notifications that the\n\
    \          application wishes to receive (for example, SNMPv2-Trap PDUs\n    \
    \      or Inform PDUs).\n   Once the notification receiver has registered with\
    \ the Dispatcher,\n   messages are received using the processPdu abstract service\n\
    \   interface.  Parameters are:\n       -  The messageProcessingModel indicates\
    \ which Message Processing\n          Model received and processed the message.\n\
    \       -  The securityModel is the value from the received message.\n       -\
    \  The securityName is the value from the received message.\n       -  The securityLevel\
    \ is the value from the received message.\n       -  The contextEngineID is the\
    \ value from the received message.\n       -  The contextName is the value from\
    \ the received message.\n       -  The pduVersion indicates the version of the\
    \ PDU in the\n          received message.\n       -  The PDU is the value from\
    \ the received message.\n       -  The maxSizeResponseScopedPDU is the maximum\
    \ allowable size of\n          a ScopedPDU containing a Response PDU (based on\
    \ the maximum\n          message size that the originator of the message can accept).\n\
    \       -  If the message contains an SNMPv2-Trap PDU, the stateReference\n  \
    \        is undefined and unused.  Otherwise, the stateReference is a\n      \
    \    value which references cached information about the\n          notification.\
    \  This value must be returned to the Dispatcher\n          in order to generate\
    \ a response.\n   When an SNMPv2-Trap PDU is delivered to a notification receiver\n\
    \   application, it first extracts the SNMP operation type, request-id,\n   error-status,\
    \ error-index, and variable-bindings from the PDU.  After\n   this, processing\
    \ depends on the particular implementation.\n   When an Inform PDU is received,\
    \ the notification receiver application\n   follows the following procedure:\n"
- title: (1)  The SNMPv2 operation type, request-id, error-status, error-index,
  contents:
  - "(1)  The SNMPv2 operation type, request-id, error-status, error-index,\n    \
    \ and variable-bindings are extracted from the PDU.\n"
- title: (2)  A Response PDU is constructed using the extracted request-id and
  contents:
  - "(2)  A Response PDU is constructed using the extracted request-id and\n     variable-bindings,\
    \ and with error-status and error-index both set\n     to 0.\n"
- title: (3)  The Dispatcher is called to generate a response message using the
  contents:
  - "(3)  The Dispatcher is called to generate a response message using the\n    \
    \ returnResponsePdu abstract service interface.  Parameters are:\n       -  The\
    \ messageProcessingModel is the value from the processPdu\n          call.\n \
    \      -  The securityModel is the value from the processPdu call.\n       - \
    \ The securityName is the value from the processPdu call.\n       -  The securityLevel\
    \ is the value from the processPdu call.\n       -  The contextEngineID is the\
    \ value from the processPdu call.\n       -  The contextName is the value from\
    \ the processPdu call.\n       -  The pduVersion indicates the version of the\
    \ PDU to be\n          returned.\n       -  The PDU is the result generated in\
    \ step (2) above.\n       -  The maxSizeResponseScopedPDU is a local value indicating\
    \ the\n          maximum size of a ScopedPDU that the application can accept.\n\
    \       -  The stateReference is the value from the processPdu call.\n       -\
    \  The statusInformation indicates that no error occurred and\n          that\
    \ a response should be generated.\n"
- title: 3.5.  Proxy Forwarder Applications
  contents:
  - "3.5.  Proxy Forwarder Applications\n   A proxy forwarder application deals with\
    \ forwarding SNMP messages.\n   There are four basic types of messages which a\
    \ proxy forwarder\n   application may need to forward.  These are grouped according\
    \ to the\n   PDU type contained in a message, or according to whether a report\n\
    \   indication is contained in the message.  The four basic types of\n   messages\
    \ are:\n       -  Those containing PDU types which were generated by a command\n\
    \          generator application (for example, Get, GetNext, GetBulk, and\n  \
    \        Set PDU types).  These deal with requesting or modifying\n          information\
    \ located within a particular context.\n       -  Those containing PDU types which\
    \ were generated by a\n          notification originator application (for example,\
    \ SNMPv2-Trap\n          and Inform PDU types).  These deal with notifications\n\
    \          concerning information located within a particular context.\n     \
    \  -  Those containing a Response PDU type.  Forwarding of Response\n        \
    \  PDUs always occurs as a result of receiving a response to a\n          previously\
    \ forwarded message.\n       -  Those containing a report indication.  Forwarding\
    \ of report\n          indications always occurs as a result of receiving a report\n\
    \          indication for a previously forwarded message.\n   For the first type,\
    \ the proxy forwarder's role is to deliver a\n   request for management information\
    \ to an SNMP engine which is\n   \"closer\" or \"downstream in the path\" to the\
    \ SNMP engine which has\n   access to that information, and to deliver the response\
    \ containing\n   the information back to the SNMP engine from which the request\
    \ was\n   received.  The context information in a request is used to determine\n\
    \   which SNMP engine has access to the requested information, and this\n   is\
    \ used to determine where and how to forward the request.\n   For the second type,\
    \ the proxy forwarder's role is to determine which\n   SNMP engines should receive\
    \ notifications about management\n   information from a particular location. \
    \ The context information in a\n   notification message determines the location\
    \ to which the information\n   contained in the notification applies.  This is\
    \ used to determine\n   which SNMP engines should receive notification about this\n\
    \   information.\n   For the third type, the proxy forwarder's role is to determine\
    \ which\n   previously forwarded request or notification (if any) the response\n\
    \   matches, and to forward the response back to the initiator of the\n   request\
    \ or notification.\n   For the fourth type, the proxy forwarder's role is to determine\
    \ which\n   previously forwarded request or notification (if any) the report\n\
    \   indication matches, and to forward the report indication back to the\n   initiator\
    \ of the request or notification.\n   When forwarding messages, a proxy forwarder\
    \ application must perform\n   a translation of incoming management target information\
    \ into outgoing\n   management target information.  How this translation is performed\
    \ is\n   implementation specific.  In many cases, this will be driven by a\n \
    \  preconfigured translation table.  If a proxy forwarder application\n   makes\
    \ the contents of this table SNMP manageable, it MUST use the\n   SNMP-PROXY-MIB\
    \ module defined in this document.\n"
- title: 3.5.1.  Request Forwarding
  contents:
  - "3.5.1.  Request Forwarding\n   There are two phases for request forwarding. \
    \ First, the incoming\n   request needs to be passed through the proxy application.\
    \  Then, the\n   resulting response needs to be passed back.  These phases are\n\
    \   described in the following two sections.\n"
- title: 3.5.1.1.  Processing an Incoming Request
  contents:
  - "3.5.1.1.  Processing an Incoming Request\n   A proxy forwarder application that\
    \ wishes to forward request messages\n   must first register with the Dispatcher\
    \ using the\n   registerContextEngineID abstract service interface.  The proxy\n\
    \   forwarder must register each contextEngineID for which it wishes to\n   forward\
    \ messages, as well as for each pduType.  Note that as the\n   configuration of\
    \ a proxy forwarder is changed, the particular\n   contextEngineID values for\
    \ which it is forwarding may change.  The\n   proxy forwarder should call the\
    \ registerContextEngineID and\n   unregisterContextEngineID abstract service interfaces\
    \ as needed to\n   reflect its current configuration.\n   A proxy forwarder application\
    \ should never attempt to register a\n   value of contextEngineID which is equal\
    \ to the snmpEngineID of the\n   SNMP engine to which the proxy forwarder is associated.\n\
    \   Once the proxy forwarder has registered for the appropriate\n   contextEngineId\
    \ values, it can start processing messages.  The\n   following procedure is used:\n"
- title: (1)  A message is received using the processPdu abstract service
  contents:
  - "(1)  A message is received using the processPdu abstract service\n     interface.\
    \  The incoming management target information received\n     from the processPdu\
    \ interface is translated into outgoing\n     management target information. \
    \ Note that this translation may vary\n     for different values of contextEngineID\
    \ and/or contextName.  The\n     translation should result in a single management\
    \ target.\n"
- title: (2)  If appropriate outgoing management target information cannot be
  contents:
  - "(2)  If appropriate outgoing management target information cannot be\n     found,\
    \ the proxy forwarder increments the snmpProxyDrops counter\n     [RFC1907], and\
    \ then calls the Dispatcher using the\n     returnResponsePdu abstract service\
    \ interface.  Parameters are:\n       -  The messageProcessingModel is the value\
    \ from the processPdu\n          call.\n       -  The securityModel is the value\
    \ from the processPdu call.\n       -  The securityName is the value from the\
    \ processPdu call.\n       -  The securityLevel is the value from the processPdu\
    \ call.\n       -  The contextEngineID is the value from the processPdu call.\n\
    \       -  The contextName is the value from the processPdu call.\n       -  The\
    \ pduVersion is the value from the processPdu call.\n       -  The PDU is an undefined\
    \ value.\n       -  The maxSizeResponseScopedPDU is a local value indicating the\n\
    \          maximum size of a ScopedPDU that the application can accept.\n    \
    \   -  The stateReference is the value from the processPdu call.\n       -  The\
    \ statusInformation indicates that an error occurred and\n          includes the\
    \ OID and value of the snmpProxyDrops object.\n     Processing of the message\
    \ stops at this point.  Otherwise,\n"
- title: (3)  A new PDU is constructed.  A unique value of request-id should be
  contents:
  - "(3)  A new PDU is constructed.  A unique value of request-id should be\n    \
    \ used in the new PDU (this value will enable a subsequent response\n     message\
    \ to be correlated with this request).  The remainder of the\n     new PDU is\
    \ identical to the received PDU, unless the incoming SNMP\n     version is SNMPv2\
    \ or SNMPv3 and the outgoing SNMP version is\n     SNMPv1, in which case the proxy\
    \ forwarder must apply the\n     translation rules as documented in [RFC1908].\n"
- title: (4)  The proxy forwarder calls the Dispatcher to generate the forwarded
  contents:
  - "(4)  The proxy forwarder calls the Dispatcher to generate the forwarded\n   \
    \  message, using the sendPdu abstract service interface.  The\n     parameters\
    \ are:\n       -  The transportDomain is that of the outgoing management target.\n\
    \       -  The transportAddress is that of the outgoing management\n         \
    \ target.\n       -  The messageProcessingModel is that of the outgoing management\n\
    \          target.\n       -  The securityModel is that of the outgoing management\
    \ target.\n       -  The securityName is that of the outgoing management target.\n\
    \       -  The securityLevel is that of the outgoing management target.\n    \
    \   -  The contextEngineID is the value originally received.\n       -  The contextName\
    \ is the value originally received.\n       -  The pduVersion is the version of\
    \ the PDU to be sent.\n       -  The PDU is the value constructed in step (3)\
    \ above.\n       -  The expectResponse argument indicates that a response is\n\
    \          expected.  If the sendPdu call is unsuccessful, the proxy\n       \
    \   forwarder performs the steps described in (2) above.\n          Otherwise:\n"
- title: (5)  The proxy forwarder caches the following information in order to
  contents:
  - "(5)  The proxy forwarder caches the following information in order to\n     match\
    \ an incoming response to the forwarded request:\n       -  The sendPduHandle\
    \ returned from the call to sendPdu,\n       -  The request-id from the received\
    \ PDU.\n       -  the contextEngineID,\n       -  the contextName,\n       - \
    \ the stateReference,\n       -  the incoming management target information,\n\
    \       -  the outgoing management information,\n       -  any other information\
    \ needed to match an incoming response to\n          the forwarded request.\n\
    \     If this information cannot be cached (possibly due to a lack of\n     resources),\
    \ the proxy forwarder performs the steps described in (2)\n     above.  Otherwise:\n"
- title: (6)  Processing of the request stops until a response to the forwarded
  contents:
  - "(6)  Processing of the request stops until a response to the forwarded\n    \
    \ request is received, or until an appropriate time interval has\n     expired.\
    \  If this time interval expires before a response has been\n     received, the\
    \ cached information about this request is removed.\n"
- title: 3.5.1.2.  Processing an Incoming Response
  contents:
  - "3.5.1.2.  Processing an Incoming Response\n   A proxy forwarder follows the following\
    \ procedure when an incoming\n   response is received:\n"
- title: (1)  The incoming response is received using the processResponsePdu
  contents:
  - "(1)  The incoming response is received using the processResponsePdu\n     interface.\
    \  The proxy forwarder uses the received parameters to\n     locate an entry in\
    \ its cache of pending forwarded requests.  This\n     is done by matching the\
    \ received parameters with the cached values\n     of sendPduHandle, contextEngineID,\
    \ contextName, outgoing management\n     target information, and the request-id\
    \ contained in the received\n     PDU (the proxy forwarder must extract the request-id\
    \ for this\n     purpose).  If an appropriate cache entry cannot be found,\n \
    \    processing of the response is halted.  Otherwise:\n"
- title: (2)  The cache information is extracted, and removed from the cache.
  contents:
  - '(2)  The cache information is extracted, and removed from the cache.

    '
- title: (3)  A new Response PDU is constructed, using the request-id value from
  contents:
  - "(3)  A new Response PDU is constructed, using the request-id value from\n   \
    \  the original forwarded request (as extracted from the cache).  All\n     other\
    \ values are identical to those in the received Response PDU.\n"
- title: (4)  If the incoming SNMP version is SNMPv1 and the outgoing SNMP
  contents:
  - "(4)  If the incoming SNMP version is SNMPv1 and the outgoing SNMP\n     version\
    \ is SNMPv2 or SNMPv3, the proxy forwarder must apply the\n     translation rules\
    \ documented in [RFC1908].\n"
- title: (5)  The proxy forwarder calls the Dispatcher using the
  contents:
  - "(5)  The proxy forwarder calls the Dispatcher using the\n     returnResponsePdu\
    \ abstract service interface.  Parameters are:\n       -  The messageProcessingModel\
    \ indicates the Message Processing\n          Model by which the original incoming\
    \ message was processed.\n       -  The securityModel is that of the original\
    \ incoming management\n          target extracted from the cache.\n       -  The\
    \ securityName is that of the original incoming management\n          target extracted\
    \ from the cache.\n       -  The securityLevel is that of the original incoming\
    \ management\n          target extracted from the cache.\n       -  The contextEngineID\
    \ is the value extracted from the cache.\n       -  The contextName is the value\
    \ extracted from the cache.\n       -  The pduVersion indicates the version of\
    \ the PDU to be\n          returned.\n       -  The PDU is the (possibly translated)\
    \ Response PDU.\n       -  The maxSizeResponseScopedPDU is a local value indicating\
    \ the\n          maximum size of a ScopedPDU that the application can accept.\n\
    \       -  The stateReference is the value extracted from the cache.\n       -\
    \  The statusInformation indicates that no error occurred and\n          that\
    \ a Response PDU message should be generated.\n"
- title: 3.5.1.3.  Processing an Incoming Report Indication
  contents:
  - "3.5.1.3.  Processing an Incoming Report Indication\n   A proxy forwarder follows\
    \ the following procedure when an incoming\n   report indication is received:\n"
- title: (1)  The incoming report indication is received using the
  contents:
  - "(1)  The incoming report indication is received using the\n     processResponsePdu\
    \ interface.  The proxy forwarder uses the\n     received parameters to locate\
    \ an entry in its cache of pending\n     forwarded requests.  This is done by\
    \ matching the received\n     parameters with the cached values of sendPduHandle.\
    \  If an\n     appropriate cache entry cannot be found, processing of the report\n\
    \     indication is halted.  Otherwise:\n"
- title: (2)  The cache information is extracted, and removed from the cache.
  contents:
  - '(2)  The cache information is extracted, and removed from the cache.

    '
- title: (3)  If the original incoming management target information indicates
  contents:
  - "(3)  If the original incoming management target information indicates\n     SNMPv1,\
    \ processing of the report indication is halted.\n"
- title: (4)  The proxy forwarder calls the Dispatcher using the
  contents:
  - "(4)  The proxy forwarder calls the Dispatcher using the\n     returnResponsePdu\
    \ abstract service interface.  Parameters are:\n       -  The messageProcessingModel\
    \ indicates the Message Processing\n          Model by which the original incoming\
    \ message was processed.\n       -  The securityModel is that of the original\
    \ incoming management\n          target extracted from the cache.\n       -  The\
    \ securityName is that of the original incoming management\n          target extracted\
    \ from the cache.\n       -  The securityLevel is that of the original incoming\
    \ management\n          target extracted from the cache.\n       -  The contextEngineID\
    \ is the value extracted from the cache.\n       -  The contextName is the value\
    \ extracted from the cache.\n       -  The pduVersion indicates the version of\
    \ the PDU to be\n          returned.\n       -  The PDU is unused.\n       - \
    \ The maxSizeResponseScopedPDU is a local value indicating the\n          maximum\
    \ size of a ScopedPDU that the application can accept.\n       -  The stateReference\
    \ is the value extracted from the cache.\n       -  The statusInformation contain\
    \ the contextEngineID,\n          contextName, counter OID, and counter value\
    \ received in the\n          report indication.\n"
- title: 3.5.2.  Notification Forwarding
  contents:
  - "3.5.2.  Notification Forwarding\n   A proxy forwarder receives notifications\
    \ in the same manner as a\n   notification receiver application, using the processPdu\
    \ abstract\n   service interface.  The following procedure is used when a\n  \
    \ notification is received:\n"
- title: (1)  The incoming management target information received from the
  contents:
  - "(1)  The incoming management target information received from the\n     processPdu\
    \ interface is translated into outgoing management target\n     information. \
    \ Note that this translation may vary for different\n     values of contextEngineId\
    \ and/or contextName.  The translation may\n     result in multiple management\
    \ targets.\n"
- title: (2)  If appropriate outgoing management target information cannot be
  contents:
  - "(2)  If appropriate outgoing management target information cannot be\n     found\
    \ and the notification was a Trap, processing of the\n     notification is halted.\
    \  If appropriate outgoing management target\n     information cannot be found\
    \ and the notification was an Inform, the\n     proxy forwarder increments the\
    \ snmpProxyDrops object, and calls the\n     Dispatcher using the returnResponsePdu\
    \ abstract service interface.\n     The parameters are:\n       -  The messageProcessingModel\
    \ is the received value.\n       -  The securityModel is the received value.\n\
    \       -  The securityName is the received value.\n       -  The securityLevel\
    \ is the received value.\n       -  The contextEngineID is the received value.\n\
    \       -  The contextName is the received value.\n       -  The pduVersion is\
    \ the received value.\n       -  The PDU is an undefined and unused value.\n \
    \      -  The maxSizeResponseScopedPDU is a local value indicating the\n     \
    \     maximum size of a ScopedPDU that the application can accept.\n       - \
    \ The stateReference is the received value.\n       -  The statusInformation indicates\
    \ that an error occurred and\n          that a Report message should be generated.\n\
    \     Processing of the message stops at this point.  Otherwise,\n"
- title: (3)  The proxy forwarder generates a notification using the procedures
  contents:
  - "(3)  The proxy forwarder generates a notification using the procedures\n    \
    \ described in the preceding section on Notification Originators,\n     with the\
    \ following exceptions:\n       -  The contextEngineID and contextName values\
    \ from the original\n          received notification are used.\n       -  The\
    \ outgoing management targets previously determined are\n          used.\n   \
    \    -  No filtering mechanisms are applied.\n       -  The variable-bindings\
    \ from the original received notification\n          are used, rather than retrieving\
    \ variable-bindings from local\n          MIB instrumentation.  In particular,\
    \ no access-control is\n          applied to these variable-bindings.\n      \
    \ -  If for any of the outgoing management targets, the incoming\n          SNMP\
    \ version is SNMPv1 and the outgoing SNMP version is SNMPv2\n          or SNMPv3,\
    \ the proxy forwarder must apply the translation\n          rules as documented\
    \ in [RFC1908].\n       -  If for any of the outgoing management targets, the\
    \ incoming\n          SNMP version is SNMPv2 or SNMPv3, and the outgoing SNMP\n\
    \          version is SNMPv1, this outgoing management target is not used\n  \
    \        when generating the forwarded notifications.\n"
- title: (4)  If the original received notification contains an SNMPv2-Trap PDU,
  contents:
  - "(4)  If the original received notification contains an SNMPv2-Trap PDU,\n   \
    \  processing of the notification is now completed.  Otherwise, the\n     original\
    \ received notification must contain an Inform PDU, and\n     processing continues.\n"
- title: (5)  If the forwarded notifications included any Inform PDUs, processing
  contents:
  - "(5)  If the forwarded notifications included any Inform PDUs, processing\n  \
    \   continues when the procedures described in the section for\n     Notification\
    \ Originators determine that either:\n       -  None of the generated notifications\
    \ containing Inform PDUs\n          have been successfully acknowledged within\
    \ the longest of the\n          time intervals, in which case processing of the\
    \ original\n          notification is halted, or,\n       -  At least one of the\
    \ generated notifications containing Inform\n          PDUs is successfully acknowledged,\
    \ in which case a response to\n          the original received notification containing\
    \ an Inform PDU is\n          generated as described in the following steps.\n"
- title: (6)  A Response PDU is constructed, using the values of request-id and
  contents:
  - "(6)  A Response PDU is constructed, using the values of request-id and\n    \
    \ variable-bindings from the original received Inform PDU, and\n     error-status\
    \ and error-index values of 0.\n"
- title: (7)  The Dispatcher is called using the returnResponsePdu abstract
  contents:
  - "(7)  The Dispatcher is called using the returnResponsePdu abstract\n     service\
    \ interface.  Parameters are:\n       -  The messageProcessingModel is the originally\
    \ received value.\n       -  The securityModel is the originally received value.\n\
    \       -  The securityName is the originally received value.\n       -  The securityLevel\
    \ is the originally received value.\n       -  The contextEngineID is the originally\
    \ received value.\n       -  The contextName is the originally received value.\n\
    \       -  The pduVersion indicates the version of the PDU constructed in\n  \
    \        step (6) above.\n       -  The PDU is the value constructed in step (6)\
    \ above.\n       -  The maxSizeResponseScopedPDU is a local value indicating the\n\
    \          maximum size of a ScopedPDU that the application can accept.\n    \
    \   -  The stateReference is the originally received value.\n       -  The statusInformation\
    \ indicates that no error occurred and\n          that a Response PDU message\
    \ should be generated.\n"
- title: 4.  The Structure of the MIB Modules
  contents:
  - "4.  The Structure of the MIB Modules\n   There are three separate MIB modules\
    \ described in this document, the\n   management target MIB, the notification\
    \ MIB, and the proxy MIB.  The\n   following sections describe the structure of\
    \ these three MIB modules.\n   The use of these MIBs by particular types of applications\
    \ is\n   described later in this document:\n       -  The use of the management\
    \ target MIB and the notification MIB\n          in notification originator applications\
    \ is described in\n          section 6.\n       -  The use of the notification\
    \ MIB for filtering notifications in\n          notification originator applications\
    \ is described in section\n          7.\n       -  The use of the management target\
    \ MIB and the proxy MIB in\n          proxy forwarding applications is described\
    \ in section 8.\n"
- title: 4.1.  The Management Target MIB Module
  contents:
  - "4.1.  The Management Target MIB Module\n   The SNMP-TARGET-MIB module contains\
    \ objects for defining management\n   targets.  It consists of two tables and\
    \ conformance/compliance\n   statements.\n   The first table, the snmpTargetAddrTable,\
    \ contains information about\n   transport domains and addresses.  It also contains\
    \ an object,\n   snmpTargetAddrTagList, which provides a mechanism for grouping\n\
    \   entries.\n   The second table, the snmpTargetParamsTable, contains information\n\
    \   about SNMP version and security information to be used when sending\n   messages\
    \ to particular transport domains and addresses.\n"
- title: 4.1.1.  Tag Lists
  contents:
  - "4.1.1.  Tag Lists\n   The snmpTargetAddrTagList object is used for grouping entries\
    \ in the\n   snmpTargetAddrTable.  The value of this object contains a list of\
    \ tag\n   values which are used to select target addresses to be used for a\n\
    \   particular operation.\n   A tag value, which may also be used in MIB objects\
    \ other than\n   snmpTargetAddrTagList, is an arbitrary string of octets, but\
    \ may not\n   contain a delimiter character.  Delimiter characters are defined\
    \ to\n   be one of the following characters:\n       -  An ASCII space character\
    \ (0x20).\n       -  An ASCII TAB character (0x09).\n       -  An ASCII carriage\
    \ return (CR) character (0x0D).\n       -  An ASCII line feed (LF) character (0x0B).\n\
    \   In addition, a tag value may not have a zero length.  Generally, a\n   particular\
    \ MIB object may contain either\n       -  a single tag value, in which case the\
    \ value of the MIB object\n          may not contain a delimiter character, or:\n\
    \       -  a MIB object may contain a list of tag values, separated by\n     \
    \     single delimiter characters.\n   For a list of tag values, these constraints\
    \ imply certain\n   restrictions on the value of a MIB object:\n       -  There\
    \ cannot be a leading or trailing delimiter character.\n       -  There cannot\
    \ be multiple adjacent delimiter charaters.\n"
- title: 4.1.2.  Definitions
  contents:
  - "4.1.2.  Definitions\n   SNMP-TARGET-MIB DEFINITIONS ::= BEGIN\n   IMPORTS\n \
    \      TEXTUAL-CONVENTION,\n       MODULE-IDENTITY,\n       OBJECT-TYPE,\n   \
    \    snmpModules,\n       Integer32\n           FROM SNMPv2-SMI\n       TDomain,\n\
    \       TAddress,\n       TimeInterval,\n       RowStatus,\n       StorageType,\n\
    \       TestAndIncr\n           FROM SNMPv2-TC\n       SnmpSecurityModel,\n  \
    \     SnmpMessageProcessingModel,\n       SnmpSecurityLevel,\n       SnmpAdminString\n\
    \           FROM SNMP-FRAMEWORK-MIB\n       OBJECT-GROUP\n           FROM SNMPv2-CONF;\n\
    \   snmpTargetMIB MODULE-IDENTITY\n       LAST-UPDATED \"9711210000Z\"\n     \
    \  ORGANIZATION \"IETF SNMPv3 Working Group\"\n       CONTACT-INFO\n         \
    \  \"WG-email:   snmpv3@tis.com\n            Subscribe:  majordomo@tis.com\n \
    \                       In message body:  subscribe snmpv3\n            Chair:\
    \      Russ Mundy\n                        Trusted Information Systems\n     \
    \       Postal:     3060 Washington Rd\n                        Glenwood MD 21738\n\
    \                        USA\n            Email:      mundy@tis.com\n        \
    \    Phone:      +1-301-854-6889\n            Co-editor:  David B. Levi\n    \
    \                    SNMP Research, Inc.\n            Postal:     3001 Kimberlin\
    \ Heights Road\n                        Knoxville, TN 37920-9716\n           \
    \ E-mail:     levi@snmp.com\n            Phone:      +1 423 573 1434\n       \
    \     Co-editor:  Paul Meyer\n                        Secure Computing Corporation\n\
    \            Postal:     2675 Long Lake Road\n                        Roseville,\
    \ MN 55113\n            E-mail:     paul_meyer@securecomputing.com\n         \
    \   Phone:      +1 612 628 1592\n            Co-editor:  Bob Stewart\n       \
    \                 Cisco Systems, Inc.\n            Postal:     170 West Tasman\
    \ Drive\n                        San Jose, CA 95134-1706\n            E-mail:\
    \     bstewart@cisco.com\n            Phone:      +1 603 654 6923\"\n       DESCRIPTION\n\
    \           \"This MIB module defines MIB objects which provide\n            mechanisms\
    \ to remotely configure the parameters used\n            by an SNMP entity for\
    \ the generation of SNMP messages.\"\n       REVISION        \"9707140000Z\"\n\
    \       DESCRIPTION\n           \"The initial revision.\"\n       ::= { snmpModules\
    \ 7 }\n   snmpTargetObjects       OBJECT IDENTIFIER ::= { snmpTargetMIB 1 }\n\
    \   snmpTargetConformance   OBJECT IDENTIFIER ::= { snmpTargetMIB 3 }\n   SnmpTagValue\
    \ ::= TEXTUAL-CONVENTION\n       DISPLAY-HINT \"255a\"\n       STATUS       current\n\
    \       DESCRIPTION\n           \"An octet string containing a tag value.\n  \
    \          Tag values are preferably in human-readable form.\n            To facilitate\
    \ internationalization, this information\n            is represented using the\
    \ ISO/IEC IS 10646-1 character\n            set, encoded as an octet string using\
    \ the UTF-8\n            character encoding scheme described in RFC 2044.\n  \
    \          Since additional code points are added by amendments\n            to\
    \ the 10646 standard from time to time,\n            implementations must be prepared\
    \ to encounter any code\n            point from 0x00000000 to 0x7fffffff.\n  \
    \          The use of control codes should be avoided, and certain\n         \
    \   control codes are not allowed as described below.\n            For code points\
    \ not directly supported by user\n            interface hardware or software,\
    \ an alternative means\n            of entry and display, such as hexadecimal,\
    \ may be\n            provided.\n            For information encoded in 7-bit\
    \ US-ASCII, the UTF-8\n            representation is identical to the US-ASCII\
    \ encoding.\n            Note that when this TC is used for an object that\n \
    \           is used or envisioned to be used as an index, then a\n           \
    \ SIZE restriction must be specified so that the number\n            sub-identifiers\
    \ for any object instance do not exceed\n            the limit of 128, as defined\
    \ by [RFC1905].\n            An object of this type contains a single tag value\n\
    \            which is used to select a set of entries in a table.\n          \
    \  A tag value is an arbitrary string of octets, but\n            may not contain\
    \ a delimiter character.  Delimiter\n            characters are defined to be\
    \ one of the following:\n                -  An ASCII space character (0x20).\n\
    \                -  An ASCII TAB character (0x09).\n                -  An ASCII\
    \ carriage return (CR) character (0x0D).\n                -  An ASCII line feed\
    \ (LF) character (0x0B).\n            Delimiter characters are used to separate\
    \ tag values\n            in a tag list.  An object of this type may only\n  \
    \          contain a single tag value, and so delimiter\n            characters\
    \ are not allowed in a value of this type.\n            Some examples of valid\
    \ tag values are:\n                - 'acme'\n                - 'router'\n    \
    \            - 'host'\n            The use of a tag value to select table entries\
    \ is\n            application and MIB specific.\"\n       SYNTAX       OCTET STRING\
    \ (SIZE (0..255))\n   SnmpTagList ::= TEXTUAL-CONVENTION\n       DISPLAY-HINT\
    \ \"255a\"\n       STATUS       current\n       DESCRIPTION\n           \"An octet\
    \ string containing a list of tag values.\n            Tag values are preferably\
    \ in human-readable form.\n            To facilitate internationalization, this\
    \ information\n            is represented using the ISO/IEC IS 10646-1 character\n\
    \            set, encoded as an octet string using the UTF-8\n            character\
    \ encoding scheme described in RFC 2044.\n            Since additional code points\
    \ are added by amendments\n            to the 10646 standard from time to time,\n\
    \            implementations must be prepared to encounter any code\n        \
    \    point from 0x00000000 to 0x7fffffff.\n            The use of control codes\
    \ should be avoided, except as\n            described below.\n            For\
    \ code points not directly supported by user\n            interface hardware or\
    \ software, an alternative means\n            of entry and display, such as hexadecimal,\
    \ may be\n            provided.\n            For information encoded in 7-bit\
    \ US-ASCII, the UTF-8\n            representation is identical to the US-ASCII\
    \ encoding.\n            An object of this type contains a list of tag values\n\
    \            which are used to select a set of entries in a table.\n         \
    \   A tag value is an arbitrary string of octets, but\n            may not contain\
    \ a delimiter character.  Delimiter\n            characters are defined to be\
    \ one of the following:\n                -  An ASCII space character (0x20).\n\
    \                -  An ASCII TAB character (0x09).\n                -  An ASCII\
    \ carriage return (CR) character (0x0D).\n                -  An ASCII line feed\
    \ (LF) character (0x0B).\n            Delimiter characters are used to separate\
    \ tag values\n            in a tag list.  Only a single delimiter character may\n\
    \            occur between two tag values.  A tag value may not\n            have\
    \ a zero length.  These constraints imply certain\n            restrictions on\
    \ the contents of this object:\n                - There cannot be a leading or\
    \ trailing delimiter\n                  character.\n                - There cannot\
    \ be multiple adjacent delimiter\n                  characters.\n            Some\
    \ examples of valid tag lists are:\n                - An empty string\n      \
    \          - 'acme router'\n                - 'host managerStation'\n        \
    \    Note that although a tag value may not have a length of\n            zero,\
    \ an empty string is still valid.  This indicates\n            an empty list (i.e.\
    \ there are no tag values in the list).\n            The use of the tag list to\
    \ select table entries is\n            application and MIB specific.  Typically,\
    \ an application\n            will provide one or more tag values, and any entry\n\
    \            which contains some combination of these tag values\n           \
    \ will be selected.\"\n       SYNTAX       OCTET STRING (SIZE (0..255))\n   --\n\
    \   --\n   -- The snmpTargetObjects group\n   --\n   --\n   snmpTargetSpinLock\
    \ OBJECT-TYPE\n       SYNTAX      TestAndIncr\n       MAX-ACCESS  read-write\n\
    \       STATUS      current\n       DESCRIPTION\n           \"This object is used\
    \ to facilitate modification of table\n            entries in the SNMP-TARGET-MIB\
    \ module by multiple\n            managers.  In particular, it is useful when\
    \ modifying\n            the value of the snmpTargetAddrTagList object.\n    \
    \        The procedure for modifying the snmpTargetAddrTagList\n            object\
    \ is as follows:\n                1.  Retrieve the value of snmpTargetSpinLock\
    \ and\n                    of snmpTargetAddrTagList.\n                2.  Generate\
    \ a new value for snmpTargetAddrTagList.\n                3.  Set the value of\
    \ snmpTargetSpinLock to the\n                    retrieved value, and the value\
    \ of\n                    snmpTargetAddrTagList to the new value.  If\n      \
    \              the set fails for the snmpTargetSpinLock\n                    object,\
    \ go back to step 1.\"\n       ::= { snmpTargetObjects 1 }\n   snmpTargetAddrTable\
    \ OBJECT-TYPE\n       SYNTAX      SEQUENCE OF SnmpTargetAddrEntry\n       MAX-ACCESS\
    \  not-accessible\n       STATUS      current\n       DESCRIPTION\n          \
    \ \"A table of transport addresses to be used in the generation\n            of\
    \ SNMP messages.\"\n       ::= { snmpTargetObjects 2 }\n   snmpTargetAddrEntry\
    \ OBJECT-TYPE\n       SYNTAX      SnmpTargetAddrEntry\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n           \"A transport address\
    \ to be used in the generation\n            of SNMP operations.\n            Entries\
    \ in the snmpTargetAddrTable are created and\n            deleted using the snmpTargetAddrRowStatus\
    \ object.\"\n       INDEX { IMPLIED snmpTargetAddrName }\n       ::= { snmpTargetAddrTable\
    \ 1 }\n   SnmpTargetAddrEntry ::= SEQUENCE {\n       snmpTargetAddrName      \
    \   SnmpAdminString,\n       snmpTargetAddrTDomain      TDomain,\n       snmpTargetAddrTAddress\
    \     TAddress,\n       snmpTargetAddrTimeout      TimeInterval,\n       snmpTargetAddrRetryCount\
    \   Integer32,\n       snmpTargetAddrTagList      SnmpTagList,\n       snmpTargetAddrParams\
    \       SnmpAdminString,\n       snmpTargetAddrStorageType  StorageType,\n   \
    \    snmpTargetAddrRowStatus    RowStatus\n   }\n   snmpTargetAddrName OBJECT-TYPE\n\
    \       SYNTAX      SnmpAdminString (SIZE(1..32))\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The locally arbitrary,\
    \ but unique identifier associated\n            with this snmpTargetAddrEntry.\"\
    \n       ::= { snmpTargetAddrEntry 1 }\n   snmpTargetAddrTDomain OBJECT-TYPE\n\
    \       SYNTAX      TDomain\n       MAX-ACCESS  read-create\n       STATUS   \
    \   current\n       DESCRIPTION\n           \"This object indicates the transport\
    \ type of the address\n            contained in the snmpTargetAddrTAddress object.\"\
    \n       ::= { snmpTargetAddrEntry 2 }\n   snmpTargetAddrTAddress OBJECT-TYPE\n\
    \       SYNTAX      TAddress\n       MAX-ACCESS  read-create\n       STATUS  \
    \    current\n       DESCRIPTION\n           \"This object contains a transport\
    \ address.  The format of\n            this address depends on the value of the\n\
    \            snmpTargetAddrTDomain object.\"\n       ::= { snmpTargetAddrEntry\
    \ 3 }\n   snmpTargetAddrTimeout OBJECT-TYPE\n       SYNTAX      TimeInterval\n\
    \       MAX-ACCESS  read-create\n       STATUS      current\n       DESCRIPTION\n\
    \           \"This object should reflect the expected maximum round\n        \
    \    trip time for communicating with the transport address\n            defined\
    \ by this row.  When a message is sent to this\n            address, and a response\
    \ (if one is expected) is not\n            received within this time period, an\
    \ implementation\n            may assume that the response will not be delivered.\n\
    \            Note that the time interval that an application waits\n         \
    \   for a response may actually be derived from the value\n            of this\
    \ object.  The method for deriving the actual time\n            interval is implementation\
    \ dependent.  One such method\n            is to derive the expected round trip\
    \ time based on a\n            particular retransmission algorithm and on the\
    \ number\n            of timeouts which have occurred.  The type of message may\n\
    \            also be considered when deriving expected round trip\n          \
    \  times for retransmissions.  For example, if a message is\n            being\
    \ sent with a securityLevel that indicates both\n            authentication and\
    \ privacy, the derived value may be\n            increased to compensate for extra\
    \ processing time spent\n            during authentication and encryption processing.\"\
    \n       DEFVAL { 1500 }\n       ::= { snmpTargetAddrEntry 4 }\n   snmpTargetAddrRetryCount\
    \ OBJECT-TYPE\n       SYNTAX      Integer32 (0..255)\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"This object specifies\
    \ a default number of retries to be\n            attempted when a response is\
    \ not received for a generated\n            message.  An application may provide\
    \ its own retry count,\n            in which case the value of this object is\
    \ ignored.\"\n       DEFVAL { 3 }\n       ::= { snmpTargetAddrEntry 5 }\n   snmpTargetAddrTagList\
    \ OBJECT-TYPE\n       SYNTAX      SnmpTagList\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"This object contains\
    \ a list of tag values which are\n            used to select target addresses\
    \ for a particular\n            operation.\"\n       ::= { snmpTargetAddrEntry\
    \ 6 }\n   snmpTargetAddrParams OBJECT-TYPE\n       SYNTAX      SnmpAdminString\
    \ (SIZE(1..32))\n       MAX-ACCESS  read-create\n       STATUS      current\n\
    \       DESCRIPTION\n           \"The value of this object identifies an entry\
    \ in the\n            snmpTargetParamsTable.  The identified entry\n         \
    \   contains SNMP parameters to be used when generating\n            messages\
    \ to be sent to this transport address.\"\n       ::= { snmpTargetAddrEntry 7\
    \ }\n   snmpTargetAddrStorageType OBJECT-TYPE\n       SYNTAX      StorageType\n\
    \       MAX-ACCESS  read-create\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The storage type for this conceptual row.\"\n       ::= { snmpTargetAddrEntry\
    \ 8 }\n   snmpTargetAddrRowStatus OBJECT-TYPE\n       SYNTAX      RowStatus\n\
    \       MAX-ACCESS  read-create\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The status of this conceptual row.\n            To create a row\
    \ in this table, a manager must\n            set this object to either createAndGo(4)\
    \ or\n            createAndWait(5).\n            Until instances of all corresponding\
    \ columns are\n            appropriately configured, the value of the\n      \
    \      corresponding instance of the snmpTargetAddrRowStatus\n            column\
    \ is 'notReady'.\n            In particular, a newly created row cannot be made\n\
    \            active until the corresponding snmpTargetAddrTDomain\n          \
    \  and snmpTargetAddrTAddress have both been set.\n            The following objects\
    \ may not be modified while the\n            value of this object is active(1):\n\
    \                - snmpTargetAddrTDomain\n                - snmpTargetAddrTAddress\"\
    \n       ::= { snmpTargetAddrEntry 9 }\n   snmpTargetParamsTable OBJECT-TYPE\n\
    \       SYNTAX      SEQUENCE OF SnmpTargetParamsEntry\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n           \"A table of SNMP\
    \ target information to be used\n            in the generation of SNMP messages.\"\
    \n       ::= { snmpTargetObjects 3 }\n   snmpTargetParamsEntry OBJECT-TYPE\n \
    \      SYNTAX      SnmpTargetParamsEntry\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n           \"A set of SNMP target\
    \ information.\n            Entries in the snmpTargetParamsTable are created and\n\
    \            deleted using the snmpTargetParamsRowStatus object.\"\n       INDEX\
    \ { IMPLIED snmpTargetParamsName }\n       ::= { snmpTargetParamsTable 1 }\n \
    \  SnmpTargetParamsEntry ::= SEQUENCE {\n       snmpTargetParamsName         \
    \  SnmpAdminString,\n       snmpTargetParamsMPModel        SnmpMessageProcessingModel,\n\
    \       snmpTargetParamsSecurityModel  SnmpSecurityModel,\n       snmpTargetParamsSecurityName\
    \   SnmpAdminString,\n       snmpTargetParamsSecurityLevel  SnmpSecurityLevel,\n\
    \       snmpTargetParamsStorageType    StorageType,\n       snmpTargetParamsRowStatus\
    \      RowStatus\n   }\n   snmpTargetParamsName OBJECT-TYPE\n       SYNTAX   \
    \   SnmpAdminString (SIZE(1..32))\n       MAX-ACCESS  not-accessible\n       STATUS\
    \      current\n       DESCRIPTION\n           \"The locally arbitrary, but unique\
    \ identifier associated\n            with this snmpTargetParamsEntry.\"\n    \
    \   ::= { snmpTargetParamsEntry 1 }\n   snmpTargetParamsMPModel OBJECT-TYPE\n\
    \       SYNTAX      SnmpMessageProcessingModel\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The Message Processing\
    \ Model to be used when generating\n            SNMP messages using this entry.\"\
    \n       ::= { snmpTargetParamsEntry 2 }\n   snmpTargetParamsSecurityModel OBJECT-TYPE\n\
    \       SYNTAX      SnmpSecurityModel (0..254 | 256..2147483647)\n       MAX-ACCESS\
    \  read-create\n       STATUS      current\n       DESCRIPTION\n           \"\
    The Security Model to be used when generating SNMP\n             messages using\
    \ this entry.\"\n       ::= { snmpTargetParamsEntry 3 }\n   snmpTargetParamsSecurityName\
    \ OBJECT-TYPE\n       SYNTAX      SnmpAdminString\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The securityName\
    \ which identifies the Principal on\n            whose behalf SNMP messages will\
    \ be generated using\n            this entry.\"\n       ::= { snmpTargetParamsEntry\
    \ 4 }\n   snmpTargetParamsSecurityLevel OBJECT-TYPE\n       SYNTAX      SnmpSecurityLevel\n\
    \       MAX-ACCESS  read-create\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The Level of Security to be used when generating\n            SNMP\
    \ messages using this entry.\"\n       ::= { snmpTargetParamsEntry 5 }\n   snmpTargetParamsStorageType\
    \ OBJECT-TYPE\n       SYNTAX      StorageType\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The storage type\
    \ for this conceptual row.\"\n       ::= { snmpTargetParamsEntry 6 }\n   snmpTargetParamsRowStatus\
    \ OBJECT-TYPE\n       SYNTAX      RowStatus\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The status of this\
    \ conceptual row.\n            To create a row in this table, a manager must\n\
    \            set this object to either createAndGo(4) or\n            createAndWait(5).\n\
    \            Until instances of all corresponding columns are\n            appropriately\
    \ configured, the value of the\n            corresponding instance of the snmpTargetParamsRowStatus\n\
    \            column is 'notReady'.\n            In particular, a newly created\
    \ row cannot be made\n            active until the corresponding\n           \
    \ snmpTargetParamsMPModel,\n            snmpTargetParamsSecurityModel,\n     \
    \       snmpTargetParamsSecurityName,\n            and snmpTargetParamsSecurityLevel\
    \ have all been set.\n            The following objects may not be modified while\
    \ the\n            value of this object is active(1):\n                - snmpTargetParamsMPModel\n\
    \                - snmpTargetParamsSecurityModel\n                - snmpTargetParamsSecurityName\n\
    \                - snmpTargetParamsSecurityLevel\"\n       ::= { snmpTargetParamsEntry\
    \ 7 }\n   snmpUnavailableContexts OBJECT-TYPE\n       SYNTAX       Counter32\n\
    \       MAX-ACCESS   read-only\n       STATUS       current\n       DESCRIPTION\n\
    \           \"The total number of packets received by the SNMP\n            engine\
    \ which were dropped because the context\n            contained in the mesage\
    \ was unavailable.\"\n       ::= { snmpTargetObjects 4 }\n   snmpUnknownContexts\
    \ OBJECT-TYPE\n       SYNTAX       Counter32\n       MAX-ACCESS   read-only\n\
    \       STATUS       current\n       DESCRIPTION\n           \"The total number\
    \ of packets received by the SNMP\n            engine which were dropped because\
    \ the context\n            contained in the mesage was unknown.\"\n       ::=\
    \ { snmpTargetObjects 5 }\n   --\n   --\n   -- Conformance information\n   --\n\
    \   --\n   snmpTargetCompliances OBJECT IDENTIFIER ::=\n                     \
    \                      { snmpTargetConformance 1 }\n   snmpTargetGroups      OBJECT\
    \ IDENTIFIER ::=\n                                           { snmpTargetConformance\
    \ 2 }\n   --\n   --\n   -- Compliance statements\n   --\n   --\n   snmpTargetCommandResponderCompliance\
    \ MODULE-COMPLIANCE\n       STATUS      current\n       DESCRIPTION\n        \
    \   \"The compliance statement for SNMP entities which include\n            a\
    \ command responder application.\"\n       MODULE -- This Module\n           MANDATORY-GROUPS\
    \ { snmpTargetCommandResponderGroup }\n       ::= { snmpTargetCompliances 1 }\n\
    \   snmpTargetBasicGroup OBJECT-GROUP\n       OBJECTS {\n           snmpTargetSpinLock,\n\
    \           snmpTargetAddrTDomain,\n           snmpTargetAddrTAddress,\n     \
    \      snmpTargetAddrTagList,\n           snmpTargetAddrParams,\n           snmpTargetAddrStorageType,\n\
    \           snmpTargetAddrRowStatus,\n           snmpTargetParamsMPModel,\n  \
    \         snmpTargetParamsSecurityModel,\n           snmpTargetParamsSecurityName,\n\
    \           snmpTargetParamsSecurityLevel,\n           snmpTargetParamsStorageType,\n\
    \           snmpTargetParamsRowStatus\n       }\n       STATUS      current\n\
    \       DESCRIPTION\n           \"A collection of objects providing basic remote\n\
    \            configuration of management targets.\"\n       ::= { snmpTargetGroups\
    \ 1 }\n   snmpTargetResponseGroup OBJECT-GROUP\n       OBJECTS {\n           snmpTargetAddrTimeout,\n\
    \           snmpTargetAddrRetryCount\n       }\n       STATUS      current\n \
    \      DESCRIPTION\n           \"A collection of objects providing remote configuration\n\
    \            of management targets for applications which generate\n         \
    \   SNMP messages for which a response message would be\n            expected.\"\
    \n       ::= { snmpTargetGroups 2 }\n   snmpTargetCommandResponderGroup OBJECT-GROUP\n\
    \       OBJECTS {\n           snmpUnavailableContexts,\n           snmpUnknownContexts\n\
    \       }\n       STATUS      current\n       DESCRIPTION\n           \"A collection\
    \ of objects required for command responder\n            applications, used for\
    \ counting error conditions.\"\n       ::= { snmpTargetGroups 3 }\n   END\n"
- title: 4.2.  The Notification MIB Module
  contents:
  - "4.2.  The Notification MIB Module\n   The SNMP-NOTIFICATION-MIB module contains\
    \ objects for the remote\n   configuration of the parameters used by an SNMP entity\
    \ for the\n   generation of notifications.  It consists of three tables and\n\
    \   conformance/compliance statements.  The first table, the\n   snmpNotifyTable,\
    \ contains entries which select which entries in the\n   snmpTargetAddrTable should\
    \ be used for generating notifications, and\n   the type of notifications to be\
    \ generated.\n   The second table sparsely augments the snmpTargetAddrTable with\
    \ an\n   object which is used to associate a set of filters with a particular\n\
    \   management target.\n   The third table defines filters which are used to limit\
    \ the number of\n   notifications which are generated using particular management\n\
    \   targets.\n"
- title: 4.2.1.  Definitions
  contents:
  - "4.2.1.  Definitions\n   SNMP-NOTIFICATION-MIB DEFINITIONS ::= BEGIN\n   IMPORTS\n\
    \       MODULE-IDENTITY,\n       OBJECT-TYPE,\n       snmpModules\n          \
    \ FROM SNMPv2-SMI\n       RowStatus,\n       StorageType\n           FROM SNMPv2-TC\n\
    \       SnmpAdminString\n           FROM SNMP-FRAMEWORK-MIB\n       SnmpTagValue,\n\
    \       snmpTargetParamsName\n           FROM SNMP-TARGET-MIB\n       MODULE-COMPLIANCE,\n\
    \       OBJECT-GROUP\n           FROM SNMPv2-CONF;\n   snmpNotificationMIB MODULE-IDENTITY\n\
    \       LAST-UPDATED \"9711210000Z\"\n       ORGANIZATION \"IETF SNMPv3 Working\
    \ Group\"\n       CONTACT-INFO\n           \"WG-email:   snmpv3@tis.com\n    \
    \        Subscribe:  majordomo@tis.com\n                        In message body:\
    \  subscribe snmpv3\n            Chair:      Russ Mundy\n                    \
    \    Trusted Information Systems\n            Postal:     3060 Washington Rd\n\
    \                        Glenwood MD 21738\n                        USA\n    \
    \        Email:      mundy@tis.com\n            Phone:      +1-301-854-6889\n\
    \            Co-editor:  David B. Levi\n                        SNMP Research,\
    \ Inc.\n            Postal:     3001 Kimberlin Heights Road\n                \
    \        Knoxville, TN 37920-9716\n            E-mail:     levi@snmp.com\n   \
    \         Phone:      +1 423 573 1434\n            Co-editor:  Paul Meyer\n  \
    \                      Secure Computing Corporation\n            Postal:     2675\
    \ Long Lake Road\n                        Roseville, MN 55113\n            E-mail:\
    \     paul_meyer@securecomputing.com\n            Phone:      +1 612 628 1592\n\
    \            Co-editor:  Bob Stewart\n                        Cisco Systems, Inc.\n\
    \            Postal:     170 West Tasman Drive\n                        San Jose,\
    \ CA 95134-1706\n            E-mail:     bstewart@cisco.com\n            Phone:\
    \      +1 603 654 6923\"\n       DESCRIPTION\n           \"This MIB module defines\
    \ MIB objects which provide\n            mechanisms to remotely configure the\
    \ parameters\n            used by an SNMP entity for the generation of\n     \
    \       notifications.\"\n       REVISION    \"9707140000Z\"\n       DESCRIPTION\n\
    \           \"The initial revision.\"\n       ::= { snmpModules 8 }\n   snmpNotifyObjects\
    \       OBJECT IDENTIFIER ::=\n                                             {\
    \ snmpNotificationMIB 1 }\n   snmpNotifyConformance   OBJECT IDENTIFIER ::=\n\
    \                                             { snmpNotificationMIB 3 }\n   --\n\
    \   --\n   -- The snmpNotifyObjects group\n   --\n   --\n   snmpNotifyTable OBJECT-TYPE\n\
    \       SYNTAX      SEQUENCE OF SnmpNotifyEntry\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n           \"This table is used\
    \ to select management targets which should\n            receive notifications,\
    \ as well as the type of notification\n            which should be sent to each\
    \ selected management target.\"\n       ::= { snmpNotifyObjects 1 }\n   snmpNotifyEntry\
    \ OBJECT-TYPE\n       SYNTAX      SnmpNotifyEntry\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n           \"An entry in this\
    \ table selects a set of management targets\n            which should receive\
    \ notifications, as well as the type of\n            notification which should\
    \ be sent to each selected\n            management target.\n            Entries\
    \ in the snmpNotifyTable are created and\n            deleted using the snmpNotifyRowStatus\
    \ object.\"\n       INDEX { IMPLIED snmpNotifyName }\n       ::= { snmpNotifyTable\
    \ 1 }\n   SnmpNotifyEntry ::= SEQUENCE {\n       snmpNotifyName         SnmpAdminString,\n\
    \       snmpNotifyTag          SnmpTagValue,\n       snmpNotifyType         INTEGER,\n\
    \       snmpNotifyStorageType  StorageType,\n       snmpNotifyRowStatus    RowStatus\n\
    \   }\n   snmpNotifyName OBJECT-TYPE\n       SYNTAX      SnmpAdminString (SIZE(1..32))\n\
    \       MAX-ACCESS  not-accessible\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The locally arbitrary, but unique identifier associated\n      \
    \      with this snmpNotifyEntry.\"\n       ::= { snmpNotifyEntry 1 }\n   snmpNotifyTag\
    \ OBJECT-TYPE\n       SYNTAX      SnmpTagValue\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"This object contains\
    \ a single tag value which is used\n            to select entries in the snmpTargetAddrTable.\
    \  Any entry\n            in the snmpTargetAddrTable which contains a tag value\n\
    \            which is equal to the value of an instance of this\n            object\
    \ is selected.  If this object contains a value\n            of zero length, no\
    \ entries are selected.\"\n       ::= { snmpNotifyEntry 2 }\n   snmpNotifyType\
    \ OBJECT-TYPE\n       SYNTAX      INTEGER {\n                       trap(1),\n\
    \                       inform(2)\n                   }\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"This object determines\
    \ the type of notification to\n            be generated for entries in the snmpTargetAddrTable\n\
    \            selected by the corresponding instance of\n            snmpNotifyTag.\n\
    \            If the value of this object is trap(1), then any\n            messages\
    \ generated for selected rows will contain\n            SNMPv2-Trap PDUs.\n  \
    \          If the value of this object is inform(2), then any\n            messages\
    \ generated for selected rows will contain\n            Inform PDUs.\n       \
    \     Note that if an SNMP entity only supports\n            generation of traps\
    \ (and not informs), then this\n            object may be read-only.\"\n     \
    \  DEFVAL { trap }\n       ::= { snmpNotifyEntry 3 }\n   snmpNotifyStorageType\
    \ OBJECT-TYPE\n       SYNTAX      StorageType\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The storage type\
    \ for this conceptual row.\"\n       ::= { snmpNotifyEntry 4 }\n   snmpNotifyRowStatus\
    \ OBJECT-TYPE\n       SYNTAX      RowStatus\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The status of this\
    \ conceptual row.\n            To create a row in this table, a manager must\n\
    \            set this object to either createAndGo(4) or\n            createAndWait(5).\n\
    \            Until instances of all corresponding columns are\n            appropriately\
    \ configured, the value of the\n            corresponding instance of the snmpNotifyRowStatus\n\
    \            column is 'notReady'.\n            In particular, a newly created\
    \ row cannot be made\n            active until the corresponding snmpNotifyTag\
    \ has\n            been set.\"\n       ::= { snmpNotifyEntry 5 }\n   snmpNotifyFilterProfileTable\
    \ OBJECT-TYPE\n       SYNTAX      SEQUENCE OF SnmpNotifyFilterProfileEntry\n \
    \      MAX-ACCESS  not-accessible\n       STATUS      current\n       DESCRIPTION\n\
    \           \"This table is used to associate a notification filter\n        \
    \    profile with a particular set of target parameters.\"\n       ::= { snmpNotifyObjects\
    \ 2 }\n   snmpNotifyFilterProfileEntry OBJECT-TYPE\n       SYNTAX      SnmpNotifyFilterProfileEntry\n\
    \       MAX-ACCESS  not-accessible\n       STATUS      current\n       DESCRIPTION\n\
    \           \"An entry in this table indicates the name of the filter\n      \
    \      profile to be used when generating notifications using\n            the\
    \ corresponding entry in the snmpTargetParamsTable.\n            Entries in the\
    \ snmpNotifyFilterProfileTable are created\n            and deleted using the\
    \ snmpNotifyFilterProfileRowStatus\n            object.\"\n       INDEX { IMPLIED\
    \ snmpTargetParamsName }\n       ::= { snmpNotifyFilterProfileTable 1 }\n   SnmpNotifyFilterProfileEntry\
    \ ::= SEQUENCE {\n       snmpNotifyFilterProfileName         SnmpAdminString,\n\
    \       snmpNotifyFilterProfileStorType     StorageType,\n       snmpNotifyFilterProfileRowStatus\
    \    RowStatus\n   }\n   snmpNotifyFilterProfileName OBJECT-TYPE\n       SYNTAX\
    \      SnmpAdminString (SIZE(1..32))\n       MAX-ACCESS  read-create\n       STATUS\
    \      current\n       DESCRIPTION\n           \"The name of the filter profile\
    \ to be used when generating\n            notifications using the corresponding\
    \ entry in the\n            snmpTargetAddrTable.\"\n       ::= { snmpNotifyFilterProfileEntry\
    \ 1 }\n   snmpNotifyFilterProfileStorType OBJECT-TYPE\n       SYNTAX      StorageType\n\
    \       MAX-ACCESS  read-create\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The storage type of this conceptual row.\"\n       ::= { snmpNotifyFilterProfileEntry\
    \ 2 }\n   snmpNotifyFilterProfileRowStatus OBJECT-TYPE\n       SYNTAX      RowStatus\n\
    \       MAX-ACCESS  read-create\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The status of this conceptual row.\n            To create a row\
    \ in this table, a manager must\n            set this object to either createAndGo(4)\
    \ or\n            createAndWait(5).\"\n       ::= { snmpNotifyFilterProfileEntry\
    \ 3 }\n   snmpNotifyFilterTable OBJECT-TYPE\n       SYNTAX      SEQUENCE OF SnmpNotifyFilterEntry\n\
    \       MAX-ACCESS  not-accessible\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The table of filter profiles.  Filter profiles are used\n      \
    \      to determine whether particular management targets should\n           \
    \ receive particular notifications.\n            When a notification is generated,\
    \ it must be compared\n            with the filters associated with each management\
    \ target\n            which is configured to receive notifications.  If the\n\
    \            notification is matched by a filter, it is not sent to\n        \
    \    the management target with which the filter is\n            associated.\"\
    \n       ::= { snmpNotifyObjects 3 }\n   snmpNotifyFilterEntry OBJECT-TYPE\n \
    \      SYNTAX      SnmpNotifyFilterEntry\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n           \"An element of a\
    \ filter profile.\n            Entries in the snmpNotifyFilterTable are created\
    \ and\n            deleted using the snmpNotifyFilterRowStatus object.\"\n   \
    \    INDEX {         snmpNotifyFilterProfileName,\n               IMPLIED snmpNotifyFilterSubtree\
    \ }\n       ::= { snmpNotifyFilterTable 1 }\n   SnmpNotifyFilterEntry ::= SEQUENCE\
    \ {\n       snmpNotifyFilterSubtree           OBJECT IDENTIFIER,\n       snmpNotifyFilterMask\
    \              OCTET STRING,\n       snmpNotifyFilterType              INTEGER,\n\
    \       snmpNotifyFilterStorageType       StorageType,\n       snmpNotifyFilterRowStatus\
    \         RowStatus\n   }\n   snmpNotifyFilterSubtree OBJECT-TYPE\n       SYNTAX\
    \      OBJECT IDENTIFIER\n       MAX-ACCESS  not-accessible\n       STATUS   \
    \   current\n       DESCRIPTION\n           \"The MIB subtree which, when combined\
    \ with the corresponding\n            instance of snmpNotifyFilterMask, defines\
    \ a family of\n            subtrees which are included in or excluded from the\n\
    \            filter profile.\"\n       ::= { snmpNotifyFilterEntry 1 }\n   snmpNotifyFilterMask\
    \ OBJECT-TYPE\n       SYNTAX      OCTET STRING (SIZE(0..16))\n       MAX-ACCESS\
    \  read-create\n       STATUS      current\n       DESCRIPTION\n           \"\
    The bit mask which, in combination with the corresponding\n            instance\
    \ of snmpNotifyFilterSubtree, defines a family of\n            subtrees which\
    \ are included in or excluded from the\n            filter profile.\n        \
    \    Each bit of this bit mask corresponds to a\n            sub-identifier of\
    \ snmpNotifyFilterSubtree, with the\n            most significant bit of the i-th\
    \ octet of this octet\n            string value (extended if necessary, see below)\n\
    \            corresponding to the (8*i - 7)-th sub-identifier, and\n         \
    \   the least significant bit of the i-th octet of this\n            octet string\
    \ corresponding to the (8*i)-th\n            sub-identifier, where i is in the\
    \ range 1 through 16.\n            Each bit of this bit mask specifies whether\
    \ or not\n            the corresponding sub-identifiers must match when\n    \
    \        determining if an OBJECT IDENTIFIER matches this\n            family\
    \ of filter subtrees; a '1' indicates that an\n            exact match must occur;\
    \ a '0' indicates 'wild card',\n            i.e., any sub-identifier value matches.\n\
    \            Thus, the OBJECT IDENTIFIER X of an object instance\n           \
    \ is contained in a family of filter subtrees if, for\n            each sub-identifier\
    \ of the value of\n            snmpNotifyFilterSubtree, either:\n            \
    \  the i-th bit of snmpNotifyFilterMask is 0, or\n              the i-th sub-identifier\
    \ of X is equal to the i-th\n              sub-identifier of the value of\n  \
    \            snmpNotifyFilterSubtree.\n            If the value of this bit mask\
    \ is M bits long and\n            there are more than M sub-identifiers in the\n\
    \            corresponding instance of snmpNotifyFilterSubtree,\n            then\
    \ the bit mask is extended with 1's to be the\n            required length.\n\
    \            Note that when the value of this object is the\n            zero-length\
    \ string, this extension rule results in\n            a mask of all-1's being\
    \ used (i.e., no 'wild card'),\n            and the family of filter subtrees\
    \ is the one\n            subtree uniquely identified by the corresponding\n \
    \           instance of snmpNotifyFilterSubtree.\"\n       DEFVAL { ''H }\n  \
    \     ::= { snmpNotifyFilterEntry 2 }\n   snmpNotifyFilterType OBJECT-TYPE\n \
    \      SYNTAX      INTEGER {\n                       included(1),\n          \
    \             excluded(2)\n                   }\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"This object indicates\
    \ whether the family of filter subtrees\n            defined by this entry are\
    \ included in or excluded from a\n            filter.\"\n       DEFVAL { included\
    \ }\n       ::= { snmpNotifyFilterEntry 3 }\n   snmpNotifyFilterStorageType OBJECT-TYPE\n\
    \       SYNTAX      StorageType\n       MAX-ACCESS  read-create\n       STATUS\
    \      current\n       DESCRIPTION\n           \"The storage type of this conceptual\
    \ row.\"\n       ::= { snmpNotifyFilterEntry 4 }\n   snmpNotifyFilterRowStatus\
    \ OBJECT-TYPE\n       SYNTAX      RowStatus\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The status of this\
    \ conceptual row.\n            To create a row in this table, a manager must\n\
    \            set this object to either createAndGo(4) or\n            createAndWait(5).\"\
    \n       ::= { snmpNotifyFilterEntry 5 }\n   --\n   --\n   -- Conformance information\n\
    \   --\n   --\n   snmpNotifyCompliances OBJECT IDENTIFIER ::=\n              \
    \                             { snmpNotifyConformance 1 }\n   snmpNotifyGroups\
    \      OBJECT IDENTIFIER ::=\n                                           { snmpNotifyConformance\
    \ 2 }\n   --\n   --\n   -- Compliance statements\n   --\n   --\n   snmpNotifyBasicCompliance\
    \ MODULE-COMPLIANCE\n       STATUS      current\n       DESCRIPTION\n        \
    \   \"The compliance statement for minimal SNMP entities which\n            implement\
    \ only SNMP Traps and read-create operations on\n            only the snmpTargetAddrTable.\"\
    \n       MODULE SNMP-TARGET-MIB\n           MANDATORY-GROUPS { snmpTargetBasicGroup\
    \ }\n           OBJECT snmpTargetParamsMPModel\n           MIN-ACCESS    read-only\n\
    \           DESCRIPTION\n               \"Create/delete/modify access is not required.\"\
    \n           OBJECT snmpTargetParamsSecurityModel\n           MIN-ACCESS    read-only\n\
    \           DESCRIPTION\n               \"Create/delete/modify access is not required.\"\
    \n           OBJECT snmpTargetParamsSecurityName\n           MIN-ACCESS    read-only\n\
    \           DESCRIPTION\n               \"Create/delete/modify access is not required.\"\
    \n           OBJECT snmpTargetParamsSecurityLevel\n           MIN-ACCESS    read-only\n\
    \           DESCRIPTION\n               \"Create/delete/modify access is not required.\"\
    \n           OBJECT snmpTargetParamsStorageType\n           SYNTAX INTEGER {\n\
    \               readOnly(5)\n           }\n           MIN-ACCESS    read-only\n\
    \           DESCRIPTION\n               \"Create/delete/modify access is not required.\n\
    \                Support of the values other(1), volatile(2),\n              \
    \  nonVolatile(3), and permanent(4) is not required.\"\n           OBJECT snmpTargetParamsRowStatus\n\
    \           SYNTAX INTEGER {\n               active(1)\n           }\n       \
    \    MIN-ACCESS    read-only\n           DESCRIPTION\n               \"Create/delete/modify\
    \ access to the\n                snmpTargetParamsTable is not required.\n    \
    \            Support of the values notInService(2), notReady(3),\n           \
    \     createAndGo(4), createAndWait(5), and destroy(6) is\n                not\
    \ required.\"\n       MODULE -- This Module\n           MANDATORY-GROUPS { snmpNotifyGroup\
    \ }\n           OBJECT snmpNotifyTag\n           MIN-ACCESS    read-only\n   \
    \        DESCRIPTION\n               \"Create/delete/modify access is not required.\"\
    \n           OBJECT snmpNotifyType\n           SYNTAX INTEGER {\n            \
    \   trap(1)\n           }\n           MIN-ACCESS    read-only\n           DESCRIPTION\n\
    \               \"Create/delete/modify access is not required.\n             \
    \   Support of the value notify(2) is not required.\"\n           OBJECT snmpNotifyStorageType\n\
    \           SYNTAX INTEGER {\n               readOnly(5)\n           }\n     \
    \      MIN-ACCESS    read-only\n           DESCRIPTION\n               \"Create/delete/modify\
    \ access is not required.\n                Support of the values other(1), volatile(2),\n\
    \                nonVolatile(3), and permanent(4) is not required.\"\n       \
    \    OBJECT snmpNotifyRowStatus\n           SYNTAX INTEGER {\n               active(1)\n\
    \           }\n           MIN-ACCESS    read-only\n           DESCRIPTION\n  \
    \             \"Create/delete/modify access to the\n                snmpNotifyTable\
    \ is not required.\n                Support of the values notInService(2), notReady(3),\n\
    \                createAndGo(4), createAndWait(5), and destroy(6) is\n       \
    \         not required.\"\n       ::= { snmpNotifyCompliances 1 }\n   snmpNotifyBasicFiltersCompliance\
    \ MODULE-COMPLIANCE\n       STATUS      current\n       DESCRIPTION\n        \
    \   \"The compliance statement for SNMP entities which implement\n           \
    \ SNMP Traps with filtering, and read-create operations on\n            all related\
    \ tables.\"\n       MODULE SNMP-TARGET-MIB\n           MANDATORY-GROUPS { snmpTargetBasicGroup\
    \ }\n       MODULE -- This Module\n           MANDATORY-GROUPS { snmpNotifyGroup,\n\
    \                              snmpNotifyFilterGroup }\n       ::= { snmpNotifyCompliances\
    \ 2 }\n   snmpNotifyFullCompliance MODULE-COMPLIANCE\n       STATUS      current\n\
    \       DESCRIPTION\n           \"The compliance statement for SNMP entities which\
    \ either\n            implement only SNMP Informs, or both SNMP Traps and SNMP\n\
    \            Informs, plus filtering and read-create operations on\n         \
    \   all related tables.\"\n       MODULE SNMP-TARGET-MIB\n           MANDATORY-GROUPS\
    \ { snmpTargetBasicGroup,\n                              snmpTargetResponseGroup\
    \ }\n       MODULE -- This Module\n           MANDATORY-GROUPS { snmpNotifyGroup,\n\
    \                              snmpNotifyFilterGroup }\n       ::= { snmpNotifyCompliances\
    \ 3 }\n   snmpNotifyGroup OBJECT-GROUP\n       OBJECTS {\n           snmpNotifyTag,\n\
    \           snmpNotifyType,\n           snmpNotifyStorageType,\n           snmpNotifyRowStatus\n\
    \       }\n       STATUS      current\n       DESCRIPTION\n           \"A collection\
    \ of objects for selecting which management\n            targets are used for\
    \ generating notifications, and the\n            type of notification to be generated\
    \ for each selected\n            management target.\"\n       ::= { snmpNotifyGroups\
    \ 1 }\n   snmpNotifyFilterGroup OBJECT-GROUP\n       OBJECTS {\n           snmpNotifyFilterProfileName,\n\
    \           snmpNotifyFilterProfileStorType,\n           snmpNotifyFilterProfileRowStatus,\n\
    \           snmpNotifyFilterMask,\n           snmpNotifyFilterType,\n        \
    \   snmpNotifyFilterStorageType,\n           snmpNotifyFilterRowStatus\n     \
    \  }\n       STATUS      current\n       DESCRIPTION\n           \"A collection\
    \ of objects providing remote configuration\n            of notification filters.\"\
    \n       ::= { snmpNotifyGroups 2 }\n   END\n"
- title: 4.3.  The Proxy MIB Module
  contents:
  - "4.3.  The Proxy MIB Module\n   The SNMP-PROXY-MIB module, which defines MIB objects\
    \ that provide\n   mechanisms to remotely configure the parameters used by an\
    \ SNMP\n   entity for proxy forwarding operations, contains a single table.\n\
    \   This table, snmpProxyTable, is used to define translations between\n   management\
    \ targets for use when forwarding messages.\n"
- title: 4.3.1.  Definitions
  contents:
  - "4.3.1.  Definitions\n   SNMP-PROXY-MIB DEFINITIONS ::= BEGIN\n   IMPORTS\n  \
    \     MODULE-IDENTITY,\n       OBJECT-TYPE,\n       snmpModules\n           FROM\
    \ SNMPv2-SMI\n       RowStatus,\n       StorageType\n           FROM SNMPv2-TC\n\
    \       SnmpEngineID,\n       SnmpAdminString\n           FROM SNMP-FRAMEWORK-MIB\n\
    \       SnmpTagValue,\n           FROM SNMP-TARGET-MIB\n       MODULE-COMPLIANCE,\n\
    \       OBJECT-GROUP\n           FROM SNMPv2-CONF;\n   snmpProxyMIB MODULE-IDENTITY\n\
    \       LAST-UPDATED \"9711210000Z\"\n       ORGANIZATION \"IETF SNMPv3 Working\
    \ Group\"\n       CONTACT-INFO\n           \"WG-email:   snmpv3@tis.com\n    \
    \        Subscribe:  majordomo@tis.com\n                        In message body:\
    \  subscribe snmpv3\n            Chair:      Russ Mundy\n                    \
    \    Trusted Information Systems\n            Postal:     3060 Washington Rd\n\
    \                        Glenwood MD 21738\n                        USA\n    \
    \        Email:      mundy@tis.com\n            Phone:      +1-301-854-6889\n\
    \            Co-editor:  David B. Levi\n                        SNMP Research,\
    \ Inc.\n            Postal:     3001 Kimberlin Heights Road\n                \
    \        Knoxville, TN 37920-9716\n            E-mail:     levi@snmp.com\n   \
    \         Phone:      +1 423 573 1434\n            Co-editor:  Paul Meyer\n  \
    \                      Secure Computing Corporation\n            Postal:     2675\
    \ Long Lake Road\n                        Roseville, MN 55113\n            E-mail:\
    \     paul_meyer@securecomputing.com\n            Phone:      +1 612 628 1592\n\
    \            Co-editor:  Bob Stewart\n                        Cisco Systems, Inc.\n\
    \            Postal:     170 West Tasman Drive\n                        San Jose,\
    \ CA 95134-1706\n            E-mail:     bstewart@cisco.com\n            Phone:\
    \      +1 603 654 6923\"\n       DESCRIPTION\n           \"This MIB module defines\
    \ MIB objects which provide\n            mechanisms to remotely configure the\
    \ parameters\n            used by a proxy forwarding application.\"\n       REVISION\
    \    \"9707140000Z\"\n       DESCRIPTION\n           \"The initial revision.\"\
    \n       ::= { snmpModules 9 }\n   snmpProxyObjects        OBJECT IDENTIFIER ::=\
    \ { snmpProxyMIB 1 }\n   snmpProxyConformance    OBJECT IDENTIFIER ::= { snmpProxyMIB\
    \ 3 }\n   --\n   --\n   -- The snmpProxyObjects group\n   --\n   --\n   snmpProxyTable\
    \ OBJECT-TYPE\n       SYNTAX      SEQUENCE OF SnmpProxyEntry\n       MAX-ACCESS\
    \  not-accessible\n       STATUS      current\n       DESCRIPTION\n          \
    \ \"The table of translation parameters used by proxy forwarder\n            applications\
    \ for forwarding SNMP messages.\"\n       ::= { snmpProxyObjects 2 }\n   snmpProxyEntry\
    \ OBJECT-TYPE\n       SYNTAX      SnmpProxyEntry\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n           \"A set of translation\
    \ parameters used by a proxy forwarder\n            application for forwarding\
    \ SNMP messages.\n            Entries in the snmpProxyTable are created and deleted\n\
    \            using the snmpProxyRowStatus object.\"\n       INDEX { IMPLIED snmpProxyName\
    \ }\n       ::= { snmpProxyTable 1 }\n   SnmpProxyEntry ::= SEQUENCE {\n     \
    \  snmpProxyName               SnmpAdminString,\n       snmpProxyType        \
    \       INTEGER,\n       snmpProxyContextEngineID    SnmpEngineID,\n       snmpProxyContextName\
    \        SnmpAdminString,\n       snmpProxyTargetParamsIn     SnmpAdminString,\n\
    \       snmpProxySingleTargetOut    SnmpAdminString,\n       snmpProxyMultipleTargetOut\
    \  SnmpTagValue,\n       snmpProxyStorageType        StorageType,\n       snmpProxyRowStatus\
    \          RowStatus\n   }\n   snmpProxyName OBJECT-TYPE\n       SYNTAX      SnmpAdminString\
    \ (SIZE(1..32))\n       MAX-ACCESS  not-accessible\n       STATUS      current\n\
    \       DESCRIPTION\n           \"The locally arbitrary, but unique identifier\
    \ associated\n            with this snmpProxyEntry.\"\n       ::= { snmpProxyEntry\
    \ 1 }\n   snmpProxyType OBJECT-TYPE\n       SYNTAX      INTEGER {\n          \
    \             read(1),\n                       write(2),\n                   \
    \    trap(3),\n                       inform(4)\n                   }\n      \
    \ MAX-ACCESS  read-create\n       STATUS      current\n       DESCRIPTION\n  \
    \         \"The type of message that may be forwarded using\n            the translation\
    \ parameters defined by this entry.\"\n       ::= { snmpProxyEntry 2 }\n   snmpProxyContextEngineID\
    \ OBJECT-TYPE\n       SYNTAX      SnmpEngineID\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The contextEngineID\
    \ contained in messages that\n            may be forwarded using the translation\
    \ parameters\n            defined by this entry.\"\n       ::= { snmpProxyEntry\
    \ 3 }\n   snmpProxyContextName OBJECT-TYPE\n       SYNTAX      SnmpAdminString\n\
    \       MAX-ACCESS  read-create\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The contextName contained in messages that may be\n            forwarded\
    \ using the translation parameters defined\n            by this entry.\n     \
    \       This object is optional, and if not supported, the\n            contextName\
    \ contained in a message is ignored when\n            selecting an entry in the\
    \ snmpProxyTable.\"\n       ::= { snmpProxyEntry 4 }\n   snmpProxyTargetParamsIn\
    \ OBJECT-TYPE\n       SYNTAX      SnmpAdminString\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"This object selects\
    \ an entry in the snmpTargetParamsTable.\n            The selected entry is used\
    \ to determine which row of the\n            snmpProxyTable to use for forwarding\
    \ received messages.\"\n       ::= { snmpProxyEntry 5 }\n   snmpProxySingleTargetOut\
    \ OBJECT-TYPE\n       SYNTAX      SnmpAdminString\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"This object selects\
    \ a management target defined in the\n            snmpTargetAddrTable (in the\
    \ SNMP-TARGET-MIB).  The\n            selected target is defined by an entry in\
    \ the\n            snmpTargetAddrTable whose index value (snmpTargetAddrName)\n\
    \            is equal to this object.\n            This object is only used when\
    \ selection of a single\n            target is required (i.e. when forwarding\
    \ an incoming\n            read or write request).\"\n       ::= { snmpProxyEntry\
    \ 6 }\n   snmpProxyMultipleTargetOut OBJECT-TYPE\n       SYNTAX      SnmpTagValue\n\
    \       MAX-ACCESS  read-create\n       STATUS      current\n       DESCRIPTION\n\
    \           \"This object selects a set of management targets defined\n      \
    \      in the snmpTargetAddrTable (in the SNMP-TARGET-MIB).\n            This\
    \ object is only used when selection of multiple\n            targets is required\
    \ (i.e. when forwarding an incoming\n            notification).\"\n       ::=\
    \ { snmpProxyEntry 7 }\n   snmpProxyStorageType OBJECT-TYPE\n       SYNTAX   \
    \   StorageType\n       MAX-ACCESS  read-create\n       STATUS      current\n\
    \       DESCRIPTION\n           \"The storage type of this conceptual row.\"\n\
    \       ::= { snmpProxyEntry 8 }\n   snmpProxyRowStatus OBJECT-TYPE\n       SYNTAX\
    \      RowStatus\n       MAX-ACCESS  read-create\n       STATUS      current\n\
    \       DESCRIPTION\n           \"The status of this conceptual row.\n       \
    \     To create a row in this table, a manager must\n            set this object\
    \ to either createAndGo(4) or\n            createAndWait(5).\n            The\
    \ following objects may not be modified while the\n            value of this object\
    \ is active(1):\n                - snmpProxyType\n                - snmpProxyContextEngineID\n\
    \                - snmpProxyContextName\n                - snmpProxyTargetParamsIn\n\
    \                - snmpProxySingleTargetOut\n                - snmpProxyMultipleTargetOut\"\
    \n       ::= { snmpProxyEntry 9 }\n   --\n   --\n   -- Conformance information\n\
    \   --\n   --\n   snmpProxyCompliances OBJECT IDENTIFIER ::=\n               \
    \                             { snmpProxyConformance 1 }\n   snmpProxyGroups \
    \     OBJECT IDENTIFIER ::=\n                                            { snmpProxyConformance\
    \ 2 }\n   --\n   --\n   -- Compliance statements\n   --\n   --\n   snmpProxyCompliance\
    \ MODULE-COMPLIANCE\n       STATUS      current\n       DESCRIPTION\n        \
    \   \"The compliance statement for SNMP entities which include\n            a\
    \ proxy forwarding application.\"\n       MODULE SNMP-TARGET-MIB\n           MANDATORY-GROUPS\
    \ { snmpTargetBasicGroup,\n                              snmpTargetResponseGroup\
    \ }\n       MODULE -- This Module\n           MANDATORY-GROUPS { snmpProxyGroup\
    \ }\n       ::= { snmpProxyCompliances 1 }\n   snmpProxyGroup OBJECT-GROUP\n \
    \      OBJECTS {\n           snmpProxyType,\n           snmpProxyContextEngineID,\n\
    \           snmpProxyContextName,\n           snmpProxyTargetParamsIn,\n     \
    \      snmpProxySingleTargetOut,\n           snmpProxyMultipleTargetOut,\n   \
    \        snmpProxyStorageType,\n           snmpProxyRowStatus\n       }\n    \
    \   STATUS      current\n       DESCRIPTION\n           \"A collection of objects\
    \ providing remote configuration of\n            management target translation\
    \ parameters for use by\n            proxy forwarder applications.\"\n       ::=\
    \ { snmpProxyGroups 3 }\n   END\n"
- title: 5.  Identification of Management Targets in Notification Originators
  contents:
  - "5.  Identification of Management Targets in Notification Originators\n   This\
    \ section describes the mechanisms used by a notification\n   originator application\
    \ when using the MIB module described in this\n   document to determine the set\
    \ of management targets to be used when\n   generating a notification.\n   A notification\
    \ originator uses the snmpNotifyTable to find the\n   management targets to be\
    \ used for generating notifications.  Each\n   active entry in this table identifies\
    \ zero or more entries in the\n   snmpTargetAddrTable.  Any entry in the snmpTargetAddrTable\
    \ whose\n   snmpTargetAddrTagList object contains a tag value which is equal to\
    \ a\n   value of snmpNotifyTag is selected by the snmpNotifyEntry which\n   contains\
    \ that instance of snmpNotifyTag.  Note that a particular\n   snmpTargetAddrEntry\
    \ may be selected by multiple entries in the\n   snmpNotifyTable, resulting in\
    \ multiple notifications being generated\n   using that snmpTargetAddrEntry.\n\
    \   Each snmpTargetAddrEntry contains a pointer to the\n   snmpTargetParamsTable\
    \ (snmpTargetAddrParams).  This pointer selects a\n   set of SNMP parameters to\
    \ be used for generating notifications.  If\n   the selected entry in the snmpTargetParamsTable\
    \ does not exist, the\n   management target is not used to generate notifications.\n\
    \   The decision as to whether a notification should contain an SNMPv2-\n   Trap\
    \ or Inform PDU is determined by the value of the snmpNotifyType\n   object. \
    \ If the value of this object is trap(1), the notification\n   should contain\
    \ an SNMPv2-Trap PDU.  If the value of this object is\n   inform(2), then the\
    \ notification should contain an Inform PDU, and\n   the timeout time and number\
    \ of retries for the Inform are the value\n   of snmpTargetAddrTimeout and snmpTargetAddrRetryCount.\
    \  Note that the\n   exception to these rules is when the snmpTargetParamsMPModel\
    \ object\n   indicates SNMPv1.  In this case, the notification is sent as a Trap\n\
    \   if the value of snmpNotifyTargetType is either trap(1) or inform(2).\n"
- title: 6.  Notification Filtering
  contents:
  - "6.  Notification Filtering\n   This section describes the mechanisms used by\
    \ a notification\n   originator application when using the MIB module described\
    \ in this\n   document to filter generation of notifications.\n   A notification\
    \ originator uses the snmpNotifyFilterTable to filter\n   notifications.  A notification\
    \ filter profile may be associated with\n   a particular entry in the snmpTargetParamsTable.\
    \  The associated\n   filter profile is identified by an entry in the\n   snmpNotifyFilterProfileTable\
    \ whose index is equal to the index of the\n   entry in the snmpTargetParamsTable.\
    \  If no such entry exists in the\n   snmpNotifyFilterProfileTable, no filtering\
    \ is performed for that\n   management target.\n   If such an entry does exist,\
    \ the value of snmpNotifyFilterProfileName\n   of the entry is compared with the\
    \ corresponding portion of the index\n   of all active entries in the snmpNotifyFilterTable.\
    \  All such entries\n   for which this comparison results in an exact match are\
    \ used for\n   filtering a notification generated using the associated\n   snmpTargetParamsEntry.\
    \  If no such entries exist, no filtering is\n   performed, and a notification\
    \ may be sent to the management target.\n   Otherwise, if matching entries do\
    \ exist, a notification may be sent\n   if the NOTIFICATION-TYPE OBJECT IDENTIFIER\
    \ of the notification (this\n   is the value of the element of the variable bindings\
    \ whose name is\n   snmpTrapOID.0, i.e., the second variable binding), and all\
    \ of the\n   object instances to be included in the variable-bindings of the\n\
    \   notification, are not specifically excluded by the matching entries.\n   Each\
    \ set of snmpNotifyFilterTable entries is divided into two\n   collections of\
    \ filter subtrees:  the included filter subtrees, and\n   the excluded filter\
    \ subtrees.  The snmpNotifyFilterType object\n   defines the collection to which\
    \ each matching entry belongs.\n   To determine whether a particular notification\
    \ name or object\n   instance is excluded by the set of matching entries, compare\
    \ the\n   notification name's or object instance's OBJECT IDENTIFIER with each\n\
    \   of the matching entries.  If none match, then the notification name\n   or\
    \ object instance is considered excluded, and the notification\n   should not\
    \ be sent to this management target.  If one or more match,\n   then the notification\
    \ name or object instance is included or\n   excluded, according to the value\
    \ of snmpNotifyFilterType in the entry\n   whose value of snmpNotifyFilterSubtree\
    \ has the most sub-identifiers.\n   If multiple entries match and have the same\
    \ number of sub-\n   identifiers, then the lexicographically greatest instance\
    \ of\n   snmpNotifyFilterType among those which match determines the inclusion\n\
    \   or exclusion.\n   A notification name's or object instance's OBJECT IDENTIFIER\
    \ X\n   matches an entry in the snmpNotifyFilterTable when the number of\n   sub-identifiers\
    \ in X is at least as many as in the value of\n   snmpNotifyFilterSubtree for\
    \ the entry, and each sub-identifier in the\n   value of snmpNotifyFilterSubtree\
    \ matches its corresponding sub-\n   identifier in X.  Two sub-identifiers match\
    \ either if the\n   corresponding bit of snmpNotifyFilterMask is zero (the 'wild\
    \ card'\n   value), or if the two sub-identifiers are equal.\n"
- title: 7.  Management Target Translation in Proxy Forwarder Applications
  contents:
  - "7.  Management Target Translation in Proxy Forwarder Applications\n   This section\
    \ describes the mechanisms used by a proxy forwarder\n   application when using\
    \ the MIB module described in this document to\n   translate incoming management\
    \ target information into outgoing\n   management target information for the purpose\
    \ of forwarding messages.\n   There are actually two mechanisms a proxy forwarder\
    \ may use, one for\n   forwarding request messages, and one for forwarding notification\n\
    \   messages.\n"
- title: 7.1.  Management Target Translation for Request Forwarding
  contents:
  - "7.1.  Management Target Translation for Request Forwarding\n   When forwarding\
    \ request messages, the proxy forwarder will select a\n   single entry in the\
    \ snmpProxyTable.  To select this entry, it will\n   perform the following comparisons:\n\
    \       -  The snmpProxyType must be read(1) if the request is a Get,\n      \
    \    GetNext, or GetBulk request.  The snmpProxyType must be\n          write(2)\
    \ if the request is a Set request.\n       -  The contextEngineId must equal the\
    \ snmpProxyContextEngineID\n          object.\n       -  If the snmpProxyContextName\
    \ object is supported, it must equal\n          the contextName.\n       -  The\
    \ snmpProxyTargetParamsIn object identifies an entry in the\n          snmpTargetParamsTable.\
    \  The messageProcessingModel,\n          securityLevel, security model, and securityName\
    \ must match the\n          values of snmpTargetParamsMPModel,\n          snmpTargetParamsSecurityModel,\
    \ snmpTargetParamsSecurityName,\n          and snmpTargetParamsSecurityLevel of\
    \ the identified entry in\n          the snmpTargetParamsTable.\n   There may\
    \ be multiple entries in the snmpProxyTable for which these\n   comparisons succeed.\
    \  The entry whose snmpProxyName has the\n   lexicographically smallest value\
    \ and for which the comparisons\n   succeed will be selected by the proxy forwarder.\n\
    \   The outgoing management target information is identified by the value\n  \
    \ of the snmpProxySingleTargetOut object of the selected entry.  This\n   object\
    \ identifies an entry in the snmpTargetAddrTable.  The\n   identified entry in\
    \ the snmpTargetAddrTable also contains a reference\n   to the snmpTargetParamsTable\
    \ (snmpTargetAddrParams).  If either the\n   identified entry in the snmpTargetAddrTable\
    \ does not exist, or the\n   identified entry in the snmpTargetParamsTable does\
    \ not exist, then\n   this snmpProxyEntry does not identify valid forwarding information,\n\
    \   and the proxy forwarder should attempt to identify another row.\n   If there\
    \ is no entry in the snmpProxyTable for which all of the\n   conditions above\
    \ may be met, then there is no appropriate forwarding\n   information, and the\
    \ proxy forwarder should take appropriate actions.\n   Otherwise, The snmpTargetAddrTDomain,\
    \ snmpTargetAddrTAddress,\n   snmpTargetAddrTimeout, and snmpTargetRetryCount\
    \ of the identified\n   snmpTargetAddrEntry, and the snmpTargetParamsMPModel,\n\
    \   snmpTargetParamsSecurityModel, snmpTargetParamsSecurityName, and\n   snmpTargetParamsSecurityLevel\
    \ of the identified snmpTargetParamsEntry\n   are used as the destination management\
    \ target.\n"
- title: 7.2.  Management Target Translation for Notification Forwarding
  contents:
  - "7.2.  Management Target Translation for Notification Forwarding\n   When forwarding\
    \ notification messages, the proxy forwarder will\n   select multiple entries\
    \ in the snmpProxyTable.  To select these\n   entries, it will perform the following\
    \ comparisons:\n       -  The snmpProxyType must be trap(3) if the notification\
    \ is a\n          Trap.  The snmpProxyType must be inform(4) if the request is\n\
    \          an Inform.\n       -  The contextEngineId must equal the snmpProxyContextEngineID\n\
    \          object.\n       -  If the snmpProxyContextName object is supported,\
    \ it must equal\n          the contextName.\n       -  The snmpProxyTargetParamsIn\
    \ object identifies an entry in the\n          snmpTargetParamsTable.  The messageProcessingModel,\n\
    \          securityLevel, security model, and securityName must match the\n  \
    \        values of snmpTargetParamsMPModel,\n          snmpTargetParamsSecurityModel,\
    \ snmpTargetParamsSecurityName,\n          and snmpTargetParamsSecurityLevel of\
    \ the identified entry in\n          the snmpTargetParamsTable.\n   All entries\
    \ for which these conditions are met are selected.  The\n   snmpProxyMultipleTargetOut\
    \ object of each such entry is used to\n   select a set of entries in the snmpTargetAddrTable.\
    \  Any\n   snmpTargetAddrEntry whose snmpTargetAddrTagList object contains a tag\n\
    \   value equal to the value of snmpProxyMultipleTargetOut, and whose\n   snmpTargetAddrParams\
    \ object references an existing entry in the\n   snmpTargetParamsTable, is selected\
    \ as a destination for the forwarded\n   notification.\n"
- title: 8.  Intellectual Property
  contents:
  - "8.  Intellectual Property\n   The IETF takes no position regarding the validity\
    \ or scope of any\n   intellectual property or other rights that might be claimed\
    \ to\n   pertain to the implementation or use of the technology described in\n\
    \   this document or the extent to which any license under such rights\n   might\
    \ or might not be available; neither does it represent that it\n   has made any\
    \ effort to identify any such rights.  Information on the\n   IETF's procedures\
    \ with respect to rights in standards-track and\n   standards-related documentation\
    \ can be found in BCP-11.  Copies of\n   claims of rights made available for publication\
    \ and any assurances of\n   licenses to be made available, or the result of an\
    \ attempt made to\n   obtain a general license or permission for the use of such\n\
    \   proprietary rights by implementors or users of this specification can\n  \
    \ be obtained from the IETF Secretariat.\n   The IETF invites any interested party\
    \ to bring to its attention any\n   copyrights, patents or patent applications,\
    \ or other proprietary\n   rights which may cover technology that may be required\
    \ to practice\n   this standard.  Please address the information to the IETF Executive\n\
    \   Director.\n"
- title: 9.  Acknowledgments
  contents:
  - "9.  Acknowledgments\n   This document is the result of the efforts of the SNMPv3\
    \ Working\n   Group.  Some special thanks are in order to the following SNMPv3\
    \ WG\n   members:\n      Dave Battle (SNMP Research, Inc.)\n      Uri Blumenthal\
    \ (IBM T.J. Watson Research Center)\n      Jeff Case (SNMP Research, Inc.)\n \
    \     John Curran (BBN)\n      T. Max Devlin (Hi-TECH Connections)\n      John\
    \ Flick (Hewlett Packard)\n      David Harrington (Cabletron Systems Inc.)\n \
    \     N.C. Hien (IBM T.J. Watson Research Center)\n      Dave Levi (SNMP Research,\
    \ Inc.)\n      Louis A Mamakos (UUNET Technologies Inc.)\n      Paul Meyer (Secure\
    \ Computing Corporation)\n      Keith McCloghrie (Cisco Systems)\n      Russ Mundy\
    \ (Trusted Information Systems, Inc.)\n      Bob Natale (ACE*COMM Corporation)\n\
    \      Mike O'Dell (UUNET Technologies Inc.)\n      Dave Perkins (DeskTalk)\n\
    \      Peter Polkinghorne (Brunel University)\n      Randy Presuhn (BMC Software,\
    \ Inc.)\n      David Reid (SNMP Research, Inc.)\n      Shawn Routhier (Epilogue)\n\
    \      Juergen Schoenwaelder (TU Braunschweig)\n      Bob Stewart (Cisco Systems)\n\
    \      Bert Wijnen (IBM T.J. Watson Research Center)\n   The document is based\
    \ on recommendations of the IETF Security and\n   Administrative Framework Evolution\
    \ for SNMP Advisory Team. Members of\n   that Advisory Team were:\n      David\
    \ Harrington (Cabletron Systems Inc.)\n      Jeff Johnson (Cisco Systems)\n  \
    \    David Levi (SNMP Research Inc.)\n      John Linn (Openvision)\n      Russ\
    \ Mundy (Trusted Information Systems) chair\n      Shawn Routhier (Epilogue)\n\
    \      Glenn Waters (Nortel)\n      Bert Wijnen (IBM T. J. Watson Research Center)\n\
    \   As recommended by the Advisory Team and the SNMPv3 Working Group\n   Charter,\
    \ the design incorporates as much as practical from previous\n   RFCs and drafts.\
    \ As a result, special thanks are due to the authors\n   of previous designs known\
    \ as SNMPv2u and SNMPv2*:\n      Jeff Case (SNMP Research, Inc.)\n      David\
    \ Harrington (Cabletron Systems Inc.)\n      David Levi (SNMP Research, Inc.)\n\
    \      Keith McCloghrie (Cisco Systems)\n      Brian O'Keefe (Hewlett Packard)\n\
    \      Marshall T. Rose (Dover Beach Consulting)\n      Jon Saperia (BGS Systems\
    \ Inc.)\n      Steve Waldbusser (International Network Services)\n      Glenn\
    \ W. Waters (Bell-Northern Research Ltd.)\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   The SNMP applications described in this document\
    \ typically have\n   direct access to MIB instrumentation.  Thus, it is very important\n\
    \   that these applications be strict in their application of access\n   control\
    \ as described in this document.\n   In addition, there may be some types of notification\
    \ generator\n   applications which, rather than accessing MIB instrumentation\
    \ using\n   access control, will obtain MIB information through other means (such\n\
    \   as from a command line).  The implementors and users of such\n   applications\
    \ must be responsible for not divulging MIB information\n   that normally would\
    \ be inaccessible due to access control.\n"
- title: 11.  References
  contents:
  - "11.  References\n   [RFC1157]\n     Case, J., Fedor, M., Schoffstall, M. and\
    \ J. Davin, \"Simple Network\n     Management Protocol\", RFC 1157, May 1990.\n\
    \   [RFC1213]\n     McCloghrie, K. and M. Rose, Editors, \"Management Information\
    \ Base\n     for Network Management of TCP/IP-based internets: MIB-II\", STD 17,\n\
    \     RFC 1213, March 1991.\n   [RFC1902]\n     Case, J., McCloghrie, K., Rose,\
    \ M. and S. Waldbusser, \"Structure of\n     Management Information for Version\
    \ 2 of the Simple Network\n     Management Protocol (SNMPv2)\", RFC 1902, January\
    \ 1996.\n   [RFC1903]\n     Case, J., McCloghrie, K., Rose, M. and S. Waldbusser,\
    \ \"Textual\n     Conventions for Version 2 of the Simple Network Management Protocol\n\
    \     (SNMPv2)\", RFC 1903, January 1996.\n   [RFC1905]\n     SNMPv2 Working Group,\
    \ Case, J., McCloghrie, K., Rose, M., and S.\n     Waldbusser, \"Protocol Operations\
    \ for Version 2 of the Simple\n     Network Management Protocol (SNMPv2)\", RFC\
    \ 1905, January 1996.\n   [RFC1907]\n     SNMPv2 Working Group, Case, J., McCloghrie,\
    \ K., Rose, M., and S.\n     Waldbusser, \"Management Information Base for Version\
    \ 2 of the\n     Simple Network Management Protocol (SNMPv2)\", RFC 1907, January\n\
    \     1996.\n   [RFC1908]\n     SNMPv2 Working Group, Case, J., McCloghrie, K.,\
    \ Rose, M., and S.\n     Waldbusser, \"Coexistence between Version 1 and Version\
    \ 2 of the\n     Internet-standard Network Management Framework\", RFC 1908, January\n\
    \     1996.\n   [RFC2261]\n     Harrington, D., and B. Wijnen, \"An Architecture\
    \ for Describing SNMP\n     Management Frameworks\", RFC 2261, January 1998.\n\
    \   [RFC2262]\n     Case, J., Harrington, D., and B. Wijnen, \"Message Processing\
    \ and\n     Dispatching for the Simple Network Management Protocol (SNMP)\", RFC\n\
    \     2262, January 1998.\n   [RFC2265]\n     Wijnen, B., Presuhn, R., and K.\
    \ McCloghrie, \"View-based Access\n     Control Model for the Simple Network Management\
    \ Protocol (SNMP)\",\n     RFC 2265, January 1998.\n"
- title: 12.  Editors' Addresses
  contents:
  - "12.  Editors' Addresses\n   David B. Levi\n   SNMP Research, Inc.\n   3001 Kimberlin\
    \ Heights Road\n   Knoxville, TN 37920-9716\n   U.S.A.\n   Phone: +1 423 573 1434\n\
    \   EMail: levi@snmp.com\n   Paul Meyer\n   Secure Computing Corporation\n   2675\
    \ Long Lake Road\n   Roseville, MN 55113\n   U.S.A.\n   Phone: +1 612 628 1592\n\
    \   EMail: paul_meyer@securecomputing.com\n   Bob Stewart\n   Cisco Systems, Inc.\n\
    \   170 West Tasman Drive\n   San Jose, CA 95134-1706\n   U.S.A.\n   Phone: +1\
    \ 603 654 6923\n   EMail: bstewart@cisco.com\n"
- title: APPENDIX A - Trap Configuration Example
  contents:
  - "APPENDIX A - Trap Configuration Example\n   This section describes an example\
    \ configuration for a Notification\n   Generator application which implements\
    \ the snmpNotifyBasicCompliance\n   level.  The example configuration specifies\
    \ that the Notification\n   Generator should send notifications to 3 separate\
    \ managers, using\n   authentication and no privacy for the first 2 managers,\
    \ and using\n   both authentication and privacy for the third manager.\n   The\
    \ configuration consists of three rows in the snmpTargetAddrTable,\n   and two\
    \ rows in the snmpTargetTable.\n          snmpTargetAddrName         SnmpAdminString,\n\
    \          snmpTargetAddrTDomain      TDomain,\n          snmpTargetAddrTAddress\
    \     TAddress,\n          snmpTargetAddrTimeout      TimeInterval,\n        \
    \  snmpTargetAddrRetryCount   Integer32,\n          snmpTargetAddrTagList    \
    \  SnmpAdminString,\n          snmpTargetAddrParams       SnmpAdminString,\n \
    \         snmpTargetAddrStorageType  StorageType,\n          snmpTargetAddrRowStatus\
    \    RowStatus\n        * snmpTargetAddrName        = \"addr1\"\n          snmpTargetAddrTDomain\
    \     = snmpUDPDomain\n          snmpTargetAddrTAddress    = 128.1.2.3:162\n \
    \         snmpTargetAddrTagList     = \"group1\"\n          snmpTargetAddrParams\
    \      = \"AuthNoPriv joe\"\n          snmpTargetAddrStorageType = readOnly(5)\n\
    \          snmpTargetAddrRowStatus   = active(1)\n        * snmpTargetAddrName\
    \        = \"addr2\"\n          snmpTargetAddrTDomain     = snmpUDPDomain\n  \
    \        snmpTargetAddrTAddress    = 128.2.4.6:162\n          snmpTargetAddrTagList\
    \     = \"group1\"\n          snmpTargetAddrParams      = \"AuthNoPriv-joe\"\n\
    \          snmpTargetAddrStorageType = readOnly(5)\n          snmpTargetAddrRowStatus\
    \   = active(1)\n        * snmpTargetAddrName        = \"addr3\"\n          snmpTargetAddrTDomain\
    \     = snmpUDPDomain\n          snmpTargetAddrTAddress    = 128.1.2.3:162\n \
    \         snmpTargetAddrTagList     = \"group2\"\n          snmpTargetAddrParams\
    \      = \"AuthPriv-bob\"\n          snmpTargetAddrStorageType = readOnly(5)\n\
    \          snmpTargetAddrRowStatus   = active(1)\n        * snmpTargetParamsName\
    \                   = \"AuthNoPriv-joe\"\n          snmpTargetParamsMPModel  \
    \              = 3\n          snmpTargetParamsSecurityModel          = 3 (USM)\n\
    \          snmpTargetParamsSecurityName           = \"joe\"\n          snmpTargetParamsSecurityLevel\
    \          = authNoPriv(2)\n          snmpTargetParamsStorageType            =\
    \ readOnly(5)\n          snmpTargetParamsRowStatus              = active(1)\n\
    \        * snmpTargetParamsName                   = \"AuthPriv-bob\"\n       \
    \   snmpTargetParamsMPModel                = 3\n          snmpTargetParamsSecurityModel\
    \          = 3 (USM)\n          snmpTargetParamsSecurityName           = \"bob\"\
    \n          snmpTargetParamsSecurityLevel          = authPriv(3)\n          snmpTargetParamsStorageType\
    \            = readOnly(5)\n          snmpTargetParamsRowStatus              =\
    \ active(1)\n        * snmpNotifyName         = \"group1\"\n          snmpNotifyTag\
    \          = \"group1\"\n          snmpNotifyType         = trap(1)\n        \
    \  snmpNotifyStorageType  = readOnly(5)\n          snmpNotifyRowStatus    = active(1)\n\
    \        * snmpNotifyName         = \"group2\"\n          snmpNotifyTag      \
    \    = \"group2\"\n          snmpNotifyType         = trap(1)\n          snmpNotifyStorageType\
    \  = readOnly(5)\n          snmpNotifyRowStatus    = active(1)\n   These entries\
    \ define two groups of management targets.  The first\n   group contains two management\
    \ targets:\n                                first target      second target\n\
    \                                ------------      -------------\n       messageProcessingModel\
    \   SNMPv3            SNMPv3\n                securityModel   3 (USM)        \
    \   3 (USM)\n                 securityName   \"joe\"             \"joe\"\n   \
    \             securityLevel   authNoPriv(2)     authNoPriv(2)\n              transportDomain\
    \   snmpUDPDomain     snmpUDPDomain\n             transportAddress   128.1.2.3:162\
    \     128.2.4.6:162\n   And the second group contains a single management target:\n\
    \       messageProcessingModel   SNMPv3\n                securityLevel   authPriv(3)\n\
    \                securityModel   3 (USM)\n                 securityName   \"bob\"\
    \n              transportDomain   snmpUDPDomain\n             transportAddress\
    \   128.1.5.9:162\n"
- title: B.  Full Copyright Statement
  contents:
  - "B.  Full Copyright Statement\n   This document and translations of it may be\
    \ copied and furnished to\n   others, and derivative works that comment on or\
    \ otherwise explain it\n   or assist in its implementation may be prepared, copied,\
    \ published\n   and distributed, in whole or in part, without restriction of any\n\
    \   kind, provided that the above copyright notice and this paragraph are\n  \
    \ included on all such copies and derivative works.  However, this\n   document\
    \ itself may not be modified in any way, such as by removing\n   the copyright\
    \ notice or references to the Internet Society or other\n   Internet organizations,\
    \ except as needed for the  purpose of\n   developing Internet standards in which\
    \ case the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
