- title: __initial_text__
  contents:
  - ''
- title: Internet Research Task Force (IRTF)                           B. Adamson
  contents:
  - "Internet Research Task Force (IRTF)                           B. Adamson\n  \
    \ Taxonomy of Coding Techniques for Efficient Network Communications\n"
- title: Abstract
  contents:
  - "Abstract\n   This document summarizes recommended terminology for Network Coding\n\
    \   concepts and constructs.  It provides a comprehensive set of terms in\n  \
    \ order to avoid ambiguities in future IRTF and IETF documents on\n   Network\
    \ Coding.  This document is the product of the Coding for\n   Efficient Network\
    \ Communications Research Group (NWCRG), and it is in\n   line with the terminology\
    \ used by the RFCs produced by the Reliable\n   Multicast Transport (RMT) and\
    \ FEC Framework (FECFRAME) IETF working\n   groups.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Research Task Force\n   (IRTF).  The IRTF publishes the results\
    \ of Internet-related research\n   and development activities.  These results\
    \ might not be suitable for\n   deployment.  This RFC represents the consensus\
    \ of the Coding for\n   Efficient Network Communications Research Group of the\
    \ Internet\n   Research Task Force (IRTF).  Documents approved for publication\
    \ by\n   the IRSG are not candidates for any level of Internet Standard; see\n\
    \   Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8406.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n   2.  General Definitions and Concepts  . . . . . . . . . .\
    \ . . . .   4\n   3.  Taxonomy of Code Uses . . . . . . . . . . . . . . . . .\
    \ . . .   7\n   4.  Coding Details  . . . . . . . . . . . . . . . . . . . . .\
    \ . .   8\n     4.1.  Coding Types  . . . . . . . . . . . . . . . . . . . . .\
    \ .   8\n     4.2.  Coding Basics . . . . . . . . . . . . . . . . . . . . . .\
    \   9\n     4.3.  Coding in Practice  . . . . . . . . . . . . . . . . . . .  12\n\
    \   5.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  12\n  \
    \ 6.  Security Considerations . . . . . . . . . . . . . . . . . . .  13\n   7.\
    \  Informative References  . . . . . . . . . . . . . . . . . . .  13\n   Authors'\
    \ Addresses  . . . . . . . . . . . . . . . . . . . . . . .  14\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document is the product of and represents the collaborative\
    \ work\n   and consensus of the Coding for Efficient Network Communications\n\
    \   Research Group (NWCRG); it is not an IETF product and is not a\n   standard.\
    \  In 2017, the document was discussed during three audio\n   conferences, each\
    \ of them gathering 6 to 8 key experts; it was\n   co-edited and subjected to\
    \ an RG Last Call.  The general feeling was\n   that the document was ready. \
    \ Additional information about Network\n   Coding may be found on these NWCRG\
    \ pages: <https://irtf.org/nwcrg>\n   and <https://datatracker.ietf.org/rg/nwcrg/about/>.\n\
    \   The literature on Network Coding research and system design,\n   including\
    \ IETF documentation, led to a rich set of concepts and\n   constructs.  This\
    \ document collects terminology used in the domain,\n   both outside and inside\
    \ IETF, provides concise definitions, and\n   introduces a high-level taxonomy.\
    \  Its primary goal is to be useful\n   to IETF and IRTF activities.  It is also\
    \ in line with the terminology\n   already used by the RFCs produced by the Reliable\
    \ Multicast Transport\n   (RMT) and FEC Framework (FECFRAME) IETF working groups,\
    \ in particular\n   [RFC5052], [RFC5740], [RFC5775], [RFC6363], and [RFC6726].\
    \  This\n   document is also related to IETF work being done in the PAYLOAD and\n\
    \   TSVWG WGs (in particular, the extension of FECFRAME to support\n   Sliding\
    \ Window Codes and the Random Linear Coding (RLC) sliding\n   window FEC scheme)\
    \ and past work in the AVTCORE and MMUSIC WGs.  Note\n   that in the definitions,\
    \ the \"(IETF)\" tag indicates that the\n   associated term is already used in\
    \ IETF documents (Internet-Drafts\n   and RFCs).\n   This document focuses on\
    \ packet transmissions and losses.  These\n   losses will typically be triggered\
    \ by various types of networking\n   issues and/or impairments (e.g., congested\
    \ routers or intermittent\n   wireless connectivity).  The notion of \"packet\"\
    \ itself is multiform,\n   depending on the target use case and the notion of\
    \ network (e.g., in\n   which layer of the protocol stack does the coding middleware\n\
    \   operate?).  For instance, a \"packet\" may be a data unit to be carried\n\
    \   as a UDP payload because the coding middleware is located between the\n  \
    \ application and UDP.  In another configuration, coding may be applied\n   within\
    \ an overlay network and the notion of \"packet\" will be totally\n   different.\
    \  In any case, the goals of Network Coding can be to\n   improve the network\
    \ throughput, efficiency, latency, and scalability,\n   as well as to provide\
    \ resilience to partition, attacks, and\n   eavesdropping (NWCRG charter).  Both\
    \ End-to-End Coding and systems\n   that also perform recoding within intermediate\
    \ forwarding nodes are\n   considered in this document.\n   This document does\
    \ not consider physical-layer transmission issues,\n   physical-layer codes, or\
    \ error detection: if low-layer error codes\n   detect but fail to correct bit\
    \ errors, or if an upper-layer checksum\n   (e.g., within IP or UDP) identifies\
    \ a corrupted packet, then the\n   packet is supposed to be dropped.\n"
- title: 2.  General Definitions and Concepts
  contents:
  - "2.  General Definitions and Concepts\n   This section provides general definitions\
    \ and concepts that are used\n   throughout this document.\n   Packet Erasure\
    \ Channel:\n      A communication path where packets are either dropped or received\n\
    \      without any error.  This type of packet drop is referred to as an\n   \
    \   \"erasure\" or \"loss\".  The term \"channel\" must be understood as a\n \
    \     generic term for any type of communication technology (e.g., an\n      Ethernet\
    \ link, a WiFi network, or a full path between two nodes\n      over the Internet).\
    \  As opposed to the \"Erasure\" channels, \"Error\"\n      channels are where\
    \ one or multiple bit errors may happen during a\n      packet transmission. \
    \ These \"Error\" channels are out of scope.\n   Erasure Correcting Code (ECC)\
    \ or (IETF) Forward Erasure Correction\n      (FEC):\n      A code for the Packet\
    \ Erasure Channel (only).  These codes are\n      also called \"Application-Level\
    \ FECs\" to highlight that they have\n      been designed for use within the higher\
    \ layers of the protocol\n      stack to protect against packet losses.  As opposed\
    \ to ECCs/FECs,\n      \"Error\" correction codes are capable of identifying the\
    \ presence\n      of bit errors and perhaps correcting them.  The \"Error\" correction\n\
    \      codes are out of scope.\n   End-to-End Coding:\n      A system where coding\
    \ is performed at the source or (coding)\n      middlebox, and decoding is performed\
    \ at the destination(s) or\n      (decoding) middlebox.  There is no recoding\
    \ operation at\n      intermediate nodes.  This is the approach followed in the\n\
    \      FLUTE/ALC [RFC6726] [RFC5775], NORM [RFC5740], and FECFRAME\n      [RFC6363]\
    \ protocols.\n   Network Coding:\n      A system where coding can be performed\
    \ at the source as well as at\n      intermediate forwarding nodes (all or a subset\
    \ of them).  End-to-\n      End Coding is regarded as a special case of Network\
    \ Coding.\n      Depending on the use case, additional assumptions can be made:\
    \ for\n      instance, the destination knowing the Coding Nodes' topology and\n\
    \      coding operations can help during decoding operations.\n   Packet versus\
    \ Symbol:\n      Generally speaking, a Packet is the unit of data that is sent\
    \ in\n      the Packet Erasure Channel, while a Symbol is the unit of data\n \
    \     that is manipulated during the encoding and decoding operations.\n   Original\
    \ Payload, Uncoded Payload, Systematic Symbol, or (IETF)\n      Source Symbol:\n\
    \      A unit of data originating from the source that is used as input\n    \
    \  to encoding operations.\n   Coded Payload, Coded Symbol, or (IETF) Repair Symbol:\n\
    \      A unit of data that is the result of a coding operation, applied\n    \
    \  either to Source Symbols or (in case of recoding) Source and/or\n      Repair\
    \ Symbols.  When there is a single Repair Symbol per Repair\n      Packet, a Repair\
    \ Symbol corresponds to a Repair Packet.\n   Input Symbol and Output Symbol:\n\
    \      A unit of data that is used as input to an encoding operation or\n    \
    \  that is generated as output of an encoding operation.  At a\n      recoding\
    \ node, Repair Symbols are also part of the Input Symbols.\n      With Systematic\
    \ Coding, Source Symbols are also part of the Output\n      Symbols.\n   (IETF)\
    \ Encoding Symbol:\n      A Source or a Repair Symbol.\n   (En)coding versus Recoding\
    \ versus Decoding:\n      (En)coding is an operation that takes Source Symbols\
    \ as input and\n      produces Encoding Symbols as output.  Recoding is an operation\n\
    \      that takes Encoding Symbols as input and produces Encoding Symbols\n  \
    \    as output.  Decoding is an operation takes Encoding Symbols as\n      input\
    \ and produces Source Symbols as output.\n   (IETF) Source Packet:\n      A packet\
    \ originating from the source that contributes to one or\n      more Source Symbols.\
    \  For instance, an RTP packet as a whole can\n      constitute a Source Symbol.\
    \  In other situations (e.g., to address\n      variable size packets), a single\
    \ RTP packet may contribute to\n      various Source Symbols.\n   (IETF) Repair\
    \ Packet:\n      A packet containing one or more Repair Symbols.\n   Figure 1\
    \ illustrates the relationships between packets (what is sent\n   in the Packet\
    \ Erasure Channel) and symbols (what is manipulated\n   during encoding and decoding\
    \ operations) in case of a Systematic\n   Coding at a Coding Node that performs\
    \ Encoding (rather than\n   Recoding).  FEC decoding procedures are similarly\
    \ performed in the\n   reverse order.\n           Source Packet\n            \
    \     |\n                 | Source Packet to Source Symbols transform\n      \
    \           | (one or more symbols per packet)\n                 v\n         \
    \  Source Symbols\n                 |\n                 v Input Symbols\n    \
    \  +----------------------+\n      |     FEC encoding     |\n      +----------------------+\n\
    \         | Output Symbols |\n         v                v\n   Source Symbols \
    \  Repair Symbols\n         |                |\n         |                | symbol-to-packet\
    \ transform\n         |                | (one or more symbols per packet)\n  \
    \       v                v\n   Source Packet    Repair Packet\n      Figure 1:\
    \ Packet and Symbol Relationships at a Coding Node\n                That Performs\
    \ Encoding (Rather Than Recoding)\n   Source Node:\n      A node that generates\
    \ one or more Source Flows.\n   Coding Node:\n      A node that performs FEC Encoding\
    \ or Recoding operations.  It may\n      be an end host or a middlebox (Encoding\
    \ case), or a forwarding\n      node (Recoding case).\n   (IETF) Flow:\n     \
    \ A stream of packets logically grouped.\n   (IETF) Source Flow:\n      A flow\
    \ of Source Packets coming from an application on a given\n      host and to which\
    \ FEC encoding is to be applied, potentially along\n      with other Source Flows.\
    \  Depending on the use case, Source Flows\n      may come from the same application,\
    \ from different applications on\n      the same host, or from different applications\
    \ on different hosts.\n   (IETF) Repair Flow:\n      A flow containing Repair\
    \ Packets after FEC encoding.\n"
- title: 3.  Taxonomy of Code Uses
  contents:
  - "3.  Taxonomy of Code Uses\n   This section discusses the various ways of using\
    \ coding, without\n   going into coding details.\n   Source Coding versus Channel\
    \ Coding:\n      (see Figure 2) When both terms are used, \"Source Coding\" usually\n\
    \      refers to compression techniques (e.g., audio and video\n      compression)\
    \ within the upper application that generates the\n      Source Flow.  \"Channel\
    \ Coding\" refers to FEC encoding in order to\n      improve transmission robustness,\
    \ for instance, within the lower\n      physical layer (out of scope of this document)\
    \ or as part of\n      Network Coding.  These terms should not be confused with\
    \ \"FEC\n      coding within the Source Node\" and \"FEC recoding within an\n\
    \      intermediate Coding Node\", respectively.\n   raw data flow from camera\
    \     ^              video flow display\n               |                 |  \
    \                    ^\n               v                 | upper             \
    \   |\n   +------------------------+    |           +-------------------------+\n\
    \   |     source coding      |    | applica-  |  source (de)coding      |\n  \
    \ |(e.g., mpeg compression)|    | tion      |(e.g., mpg decompression)|\n   +------------------------+\
    \    v           +-------------------------+\n               |               \
    \                         ^\n               v                                \
    \        |\n   +------------------------+    ^           +-------------------------+\n\
    \   | network/AL-FEC coding  |    | middle-   | network/AL-FEC coding   |\n  \
    \ |  (e.g., RLC encoding)  |    | ware      |  (e.g., RLC decoding)   |\n   +------------------------+\
    \    v           +-------------------------+\n               |               \
    \                         ^\n               v                                \
    \        |\n   +------------------------+    ^           +-------------------------+\n\
    \   |     packetization      |    |           |    depacketization      |\n  \
    \ |     (e.g., UDP/IP)     |    | communi-  |     (e.g., UDP/IP)      |\n   +------------------------+\
    \    | cation    +-------------------------+\n               |               \
    \  |                      ^\n               v                 | layers       \
    \        |\n   +-----------------------+     |           +-------------------------+\n\
    \   |       PHY layer       |     |           |       PHY layer         |\n  \
    \ |    (channel coding)   |     |           |   (channel decoding)    |\n   +-----------------------+\
    \     v           +-------------------------+\n               |              \
    \                           ^\n               |          source + repair traffic\
    \        |\n               +-----------------------------------------+\n   Figure\
    \ 2: Example of End-to-End Flow Manipulation with Network Coding\n      Figure\
    \ 2 shows Network Coding between the application and UDP\n      layers (as with\
    \ RMT or FECFRAME architectures).  Other\n      architectures are possible, for\
    \ instance, with Network Coding\n      below the transport layer to allow recoding\
    \ within the network.\n   Intra-Flow Coding or Single-Source Network Coding:\n\
    \      Process where incoming packets to the Coding Node belong to the\n     \
    \ same flow.\n   Inter-Flow Coding or Multi-Source Network Coding:\n      Process\
    \ where incoming packets to the Coding Node belong to\n      different flows.\n\
    \   Single-Path Coding:\n      Network Coding over a route that has a single path\
    \ from the source\n      to each destination(s).  In case of multicast or broadcast\n\
    \      traffic, this route is a tree.  Coding may be done end to end\n      and/or\
    \ at intermediate forwarding nodes.\n   Multi-Path Coding:\n      Network Coding\
    \ over a route that has multiple (at least partially)\n      disjoint paths from\
    \ the source to each given destination.  Coding\n      may be done end to end\
    \ and/or at intermediate forwarding nodes.\n"
- title: 4.  Coding Details
  contents:
  - '4.  Coding Details

    '
- title: 4.1.  Coding Types
  contents:
  - "4.1.  Coding Types\n   This section provides a high-level taxonomy of coding\
    \ techniques.\n   Technical details are discussed in subsequent sections.\n  \
    \ Linear Coding:\n      Linear combination of a set of Input Symbols (i.e., Source\
    \ and/or\n      Repair Symbols) using a given set of coefficients and resulting\
    \ in\n      a Repair Symbol.  Many linear codes exist that differ from the way\n\
    \      coding coefficients are drawn from a Finite Field of a given size.\n  \
    \ Random Linear Coding (RLC):\n      Particular case of Linear Coding using a\
    \ set of random coding\n      coefficients.\n   Adaptive Linear Coding:\n    \
    \  Linear Coding that utilizes cross-layer adaptation.  For instance,\n      an\
    \ adaptive coding scheme may adapt the generation and\n      transmission of Repair\
    \ Packets according to the channel variations\n      over time, accounting for\
    \ the predictive loss of degrees of\n      freedom due to erasures.\n   Block\
    \ Coding:\n      Coding technique where the input Flow(s) must first be segmented\n\
    \      into a sequence of blocks; FEC encoding and decoding are performed\n  \
    \    independently on a per-block basis.  The term \"Chunk Coding\" is\n     \
    \ sometimes used, where a \"Chunk\" denotes a block.\n   Sliding Window Coding\
    \ or Convolutional Coding:\n      General class of coding techniques that rely\
    \ on a sliding encoding\n      window.  This is an alternative solution to Block\
    \ Coding.\n   Fixed or Elastic Sliding Window Coding:\n      Coding technique\
    \ that generates Repair Symbol(s) on the fly, from\n      the set of Source Symbols\
    \ present in the sliding encoding window\n      at that time, usually by using\
    \ Linear Coding.  The sliding window\n      may be either of fixed size or of\
    \ variable size over the time\n      (also known as \"Elastic Sliding Window\"\
    ).  For instance, the size\n      may depend on acknowledgments sent by the receiver(s)\
    \ for a\n      particular Source Symbol or Source Packet (received, decoded, or\n\
    \      decodable).\n   Systematic Coding:\n      A coding technique where Source\
    \ Symbols are part of the output\n      Flow generated by a Coding Node.\n   Rateless\
    \ and Non-rateless Coding:\n      Rateless Coding can generate an unlimited number\
    \ of Repair Symbols\n      (in practice, this number can be limited by practical\n\
    \      considerations or because of use-case requirements) from a given\n    \
    \  set of Source Symbols, meaning that the code rate is null.  RLC\n      codes\
    \ are an example of Rateless Codes.  Alternately, Non-rateless\n      Coding usually\
    \ has a predefined maximum number of Repair Symbols\n      that can be generated\
    \ from a given set of Source Symbols.\n"
- title: 4.2.  Coding Basics
  contents:
  - "4.2.  Coding Basics\n   This section discusses and defines low-level coding aspects.\n\
    \   Code Rate:\n      In case of a Block Code, the Code Rate is the k/n ratio\
    \ between\n      the number of Source Symbols, k, and the number of Source plus\n\
    \      Repair Symbols, n.  With a Sliding Window Code, the Code Rate is\n    \
    \  defined similarly over a certain time interval, since the Code\n      Rate\
    \ may change dynamically.  By definition, the Code Rate is such\n      that: 0\
    \ < Code Rate <= 1.  A Code Rate close to 1 indicates that a\n      small number\
    \ of Repair Symbols have been produced during the\n      encoding process and\
    \ vice versa.\n   (En)coding Window:\n      A set of Source (and Repair in the\
    \ case of recoding) Symbols used\n      as input to the coding operations.  The\
    \ set of symbols will\n      typically change over time, as the Coding Window\
    \ slides over the\n      input Flow(s).\n   (En)coding Window Size:\n      The\
    \ number of Source (and Repair in case of recoding) Symbols in\n      the current\
    \ Encoding Window.  This size may change over the time.\n   Payload Set:\n   \
    \   The set of Source and Repair Symbols available (i.e., received or\n      previously\
    \ decoded) at the receiver and used during FEC decoding\n      operations.\n \
    \  Decoding Window:\n      The set of Source Symbols (only) that are considered\
    \ in the\n      current linear system of a receiver, independently of the fact\n\
    \      these Source Symbols have been received, decoded, or lost.  The\n     \
    \ Decoding Window will typically change over time, as transmissions\n      and\
    \ decoding progress, and may be different for different\n      receivers of a\
    \ session where content is multicast or broadcast.\n   Decoding Window Size:\n\
    \      The number of Source Symbols (only) in the current Decoding\n      Window.\
    \  This size may change over time.\n   Rank of a Payload Set or Rank of the Linear\
    \ System:\n      At a receiver, number of linearly independent members of a Payload\n\
    \      Set, or equivalently the number of linearly independent equations\n   \
    \   of the linear system.  It is also known as \"Degrees of Freedom\".\n     \
    \ The system may be of \"full rank\" where decoding is possible or\n      \"partial\
    \ rank\" where only partial decoding is possible.\n   Seen Payload or Seen Symbol:\n\
    \      A Source Symbol is Seen when the receiver can compute a linear\n      combination\
    \ with this symbol and Source Symbols that are strictly\n      more recent (i.e.,\
    \ with logically higher Encoding Symbol\n      Identifiers).  Otherwise, the Source\
    \ Symbol is considered as\n      \"Unseen\".\n   Generation or (IETF) Block:\n\
    \      With Block Codes, the set of Source Symbols of the input Flow(s)\n    \
    \  that are logically grouped into a Block, before doing encoding.\n   Generation\
    \ Size, Code Dimension, or (IETF) Block Size:\n      With Block Codes, the number\
    \ of Source Symbols, k, belonging to a\n      Block.\n   Coding Matrix or Generator\
    \ Matrix:\n      A matrix G that transforms the set of Input Symbols X into a\
    \ set\n      of Repair Symbols: Y = X * G.  Defining a Generator Matrix is\n \
    \     typical with Block Codes.  The set of Input Symbols X can consist\n    \
    \  only of Source Symbols (e.g., with End-to-End Coding) or can\n      consist\
    \ of Source and Repair Symbols (e.g., with recoding in an\n      intermediate\
    \ node).\n   Coding Coefficient:\n      With Linear Coding, this is a coefficient\
    \ in a certain Finite\n      Field.  This coefficient may be chosen in different\
    \ ways: for\n      instance, randomly, in a predefined table, or using a predefined\n\
    \      algorithm plus a seed.\n   Coding Vector:\n      A set of Coding Coefficients\
    \ used to generate a certain Repair\n      Symbol through Linear Coding.  The\
    \ number of nonzero coefficients\n      in the Coding Vector defines its density.\n\
    \   Finite Field, Galois Field, or Coding Field:\n      Finite Fields, used in\
    \ Linear Codes, have the desired property of\n      having all elements (except\
    \ zero) invertible for the + and *\n      operators, and all operations over any\
    \ elements do not result in\n      an overflow or underflow.  Examples of Finite\
    \ Fields are prime\n      fields {0..p^m-1}, where p is prime.  The most used\
    \ fields use p=2\n      and are called binary extension fields {0..2^m-1}, where\
    \ m often\n      equals 1, 4, or 8 for practical reasons.\n   Finite Field size\
    \ or Coding Field size:\n      The number of elements in a Finite Field.  For\
    \ example, the binary\n      extension field {0..2^m-1} has size q=2^m.\n   Feedback:\n\
    \      Feedback information sent by a decoding node to a Coding Node (or\n   \
    \   from a receiver to a source in case of End-to-End Coding).  The\n      nature\
    \ of information contained in a feedback packet varies,\n      depending on the\
    \ use case.  It can provide reception and/or FEC\n      decoding statistics, the\
    \ list of available Source Packets received\n      or decoded (acknowledgement),\
    \ the list of lost Source Packets that\n      should be retransmitted (negative\
    \ acknowledgement), or a number of\n      additional Repair Symbols needed to\
    \ have a Full Rank Linear\n      System.\n"
- title: 4.3.  Coding in Practice
  contents:
  - "4.3.  Coding in Practice\n   This section discusses practical aspects.  Indeed,\
    \ a practical\n   solution must specify the exact manner in which encoding and\
    \ decoding\n   are performed but also detail all the peripheral aspects, for\n\
    \   instance, how an encoder informs a decoder about the parameters used\n   to\
    \ generate a certain Repair Packet (signaling).\n   (IETF) FEC Scheme:\n     \
    \ A specification that defines a particular FEC code as well as the\n      additional\
    \ protocol aspects required to use this FEC code.  In\n      particular, the FEC\
    \ Scheme defines in-band (e.g., information\n      contained in Source and Repair\
    \ Packet header or trailers) and out-\n      of-band (e.g., information contained\
    \ in an SDP description)\n      signaling needed to synchronize encoders and decoders.\n\
    \   Payload Index or (IETF) Encoding Symbol Identifier (ESI):\n      An identifier\
    \ of a Source or Repair Symbol.  With Block Coding,\n      each symbol of a given\
    \ block is identified by a unique ESI value.\n      With Sliding Window Coding,\
    \ a continuous Source Flow and a limited\n      field size to hold the ESI, wrapping\
    \ to zero is unavoidable and\n      the same integer value will be reused several\
    \ times.\n   (IETF) FEC Payload ID:\n      Information that identifies the contents\
    \ of a packet with respect\n      to the FEC Scheme.  The FEC Payload ID of a\
    \ packet containing\n      Source Symbol(s) is usually different from that of\
    \ a packet\n      containing Repair Symbol(s).  The FEC Payload ID typically\n\
    \      contains at least an ESI.\n   Coding Vector and Encoding Window Signaling:\n\
    \      With Sliding Window Codes, the FEC Payload ID of a Repair Packet\n    \
    \  contains information needed and sufficient to identify the Coding\n      Vector\
    \ and Coding Window.  Concerning the Coding Vector, this may\n      consist of\
    \ a full list of Coding Coefficients (that may or may not\n      be compressed),\
    \ or a piece of information (e.g., a seed) that can\n      be used to generate\
    \ the list of Coding Coefficients thanks to a\n      predefined algorithm known\
    \ by encoders and decoders (e.g., a\n      Pseudorandom Number Generator, or PRNG)\
    \ or an ESI that points to a\n      given entry in a Generator Matrix in case\
    \ of a Block Code.\n      Concerning the Coding Window, this may consist of the\
    \ full list of\n      ESI of symbols in the Coding Window (that may or may not\
    \ be\n      compressed) or the ESI of the first Source Symbol along with their\n\
    \      number (assuming there is no gap).\n"
- title: 5.  IANA Considerations
  contents:
  - "5.  IANA Considerations\n   This document has no IANA actions.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This document introduces a recommended terminology\
    \ for Network Coding\n   and therefore does not contain any security considerations.\
    \  This\n   does not mean that Network Coding systems do not have any security\n\
    \   implication.\n"
- title: 7.  Informative References
  contents:
  - "7.  Informative References\n   [RFC5052]  Watson, M., Luby, M., and L. Vicisano,\
    \ \"Forward Error\n              Correction (FEC) Building Block\", RFC 5052,\n\
    \              DOI 10.17487/RFC5052, August 2007,\n              <https://www.rfc-editor.org/info/rfc5052>.\n\
    \   [RFC5740]  Adamson, B., Bormann, C., Handley, M., and J. Macker,\n       \
    \       \"NACK-Oriented Reliable Multicast (NORM) Transport\n              Protocol\"\
    , RFC 5740, DOI 10.17487/RFC5740, November 2009,\n              <https://www.rfc-editor.org/info/rfc5740>.\n\
    \   [RFC5775]  Luby, M., Watson, M., and L. Vicisano, \"Asynchronous\n       \
    \       Layered Coding (ALC) Protocol Instantiation\", RFC 5775,\n           \
    \   DOI 10.17487/RFC5775, April 2010,\n              <https://www.rfc-editor.org/info/rfc5775>.\n\
    \   [RFC6363]  Watson, M., Begen, A., and V. Roca, \"Forward Error\n         \
    \     Correction (FEC) Framework\", RFC 6363,\n              DOI 10.17487/RFC6363,\
    \ October 2011,\n              <https://www.rfc-editor.org/info/rfc6363>.\n  \
    \ [RFC6726]  Paila, T., Walsh, R., Luby, M., Roca, V., and R. Lehtonen,\n    \
    \          \"FLUTE - File Delivery over Unidirectional Transport\",\n        \
    \      RFC 6726, DOI 10.17487/RFC6726, November 2012,\n              <https://www.rfc-editor.org/info/rfc6726>.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Brian Adamson\n   NRL\n   United States of America\n \
    \  Email: brian.adamson@nrl.navy.mil\n   Cedric Adjih\n   INRIA\n   France\n \
    \  Email: cedric.adjih@inria.fr\n   Josu Bilbao\n   Ikerlan\n   Spain\n   Email:\
    \ jbilbao@ikerlan.es\n   Victor Firoiu\n   BAE Systems\n   United States of America\n\
    \   Email: victor.firoiu@baesystems.com\n   Frank Fitzek\n   TU Dresden\n   Germany\n\
    \   Email: frank.fitzek@tu-dresden.de\n   Samah A. M. Ghanem\n   Independent\n\
    \   Email: samah.ghanem@gmail.com\n   Emmanuel Lochin\n   ISAE - Supaero\n   France\n\
    \   Email: emmanuel.lochin@isae-supaero.fr\n   Antonia Masucci\n   Orange\n  \
    \ France\n   Email: antoniamaria.masucci@orange.com\n   Marie-Jose Montpetit\n\
    \   Independent\n   United States of America\n   Email: marie@mjmontpetit.com\n\
    \   Morten V. Pedersen\n   Aalborg University\n   Denmark\n   Email: mvp@es.aau.dk\n\
    \   Goiuri Peralta\n   Ikerlan\n   Spain\n   Email: gperalta@ikerlan.es\n   Vincent\
    \ Roca (editor)\n   INRIA\n   France\n   Email: vincent.roca@inria.fr\n   Paresh\
    \ Saxena\n   AnsuR Technologies\n   Norway\n   Email: paresh.saxena@ansur.es\n\
    \   Senthil Sivakumar\n   Cisco\n   United States of America\n   Email: ssenthil@cisco.com\n"
