- title: __initial_text__
  contents:
  - '                            SMIng Objectives

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the objectives for a new data definition\n\
    \   language, suitable for the modeling of network management constructs,\n  \
    \ that can be directly mapped into SNMP and COPS-PR protocol\n   operations.\n\
    \   The purpose of this document is to serve as a set of objectives that\n   a\
    \ subsequent language specification should try to address.  It\n   captures the\
    \ results of the working group discussions towards\n   consensus on the SMIng\
    \ objectives.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.     Introduction . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n   2.     Motivation . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   3\n   3.     Background . . . . . . . . . . . . . . . . . . . . .\
    \ . . .   4\n   4.     Specific Objectives for SMIng  . . . . . . . . . . . .\
    \ . .   4\n   4.1    Accepted Objectives  . . . . . . . . . . . . . . . . . .\
    \ .   5\n   4.1.1  The Set of Specification Documents . . . . . . . . . . . .\
    \   6\n   4.1.2  Textual Representation . . . . . . . . . . . . . . . . . .  \
    \ 6\n   4.1.3  Human Readability  . . . . . . . . . . . . . . . . . . . .   6\n\
    \   4.1.4  Rigorously Defined Syntax  . . . . . . . . . . . . . . . .   6\n  \
    \ 4.1.5  Accessibility  . . . . . . . . . . . . . . . . . . . . . .   7\n   4.1.6\
    \  Language Extensibility . . . . . . . . . . . . . . . . . .   7\n   4.1.7  Special\
    \ Characters in Text . . . . . . . . . . . . . . . .   7\n   4.1.8  Naming . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . .   8\n   4.1.9  Namespace Control\
    \  . . . . . . . . . . . . . . . . . . . .   8\n   4.1.10 Modules  . . . . . .\
    \ . . . . . . . . . . . . . . . . . . .   8\n   4.1.11 Module Conformance . .\
    \ . . . . . . . . . . . . . . . . . .   9\n   4.1.12 Arbitrary Unambiguous Identities\
    \ . . . . . . . . . . . . .   9\n   4.1.13 Protocol Independence  . . . . . .\
    \ . . . . . . . . . . . .   9\n   4.1.14 Protocol Mapping . . . . . . . . . .\
    \ . . . . . . . . . . .  10\n   4.1.15 Translation to Other Data Definition Languages\
    \ . . . . . .  10\n   4.1.16 Base Data Types  . . . . . . . . . . . . . . . .\
    \ . . . . .  10\n   4.1.17 Enumerations . . . . . . . . . . . . . . . . . . .\
    \ . . . .  11\n   4.1.18 Discriminated Unions . . . . . . . . . . . . . . . .\
    \ . . .  11\n   4.1.19 Instance Pointers  . . . . . . . . . . . . . . . . . .\
    \ . .  11\n   4.1.20 Row Pointers . . . . . . . . . . . . . . . . . . . . . .\
    \ .  12\n   4.1.21 Constraints on Pointers  . . . . . . . . . . . . . . . . .\
    \  12\n   4.1.22 Base Type Set  . . . . . . . . . . . . . . . . . . . . . .  12\n\
    \   4.1.23 Extended Data Types  . . . . . . . . . . . . . . . . . . .  12\n  \
    \ 4.1.24 Units, Formats, and Default Values of Defined Types and\n          Attributes\
    \ . . . . . . . . . . . . . . . . . . . . . . . .  13\n   4.1.25 Table Existence\
    \ Relationships  . . . . . . . . . . . . . .  13\n   4.1.26 Table Existence Relationships\
    \ (2)  . . . . . . . . . . . .  14\n   4.1.27 Attribute Groups . . . . . . . .\
    \ . . . . . . . . . . . . .  14\n   4.1.28 Containment  . . . . . . . . . . .\
    \ . . . . . . . . . . . .  14\n   4.1.29 Single Inheritance . . . . . . . . .\
    \ . . . . . . . . . . .  15\n   4.1.30 Reusable vs. Final Attribute Groups  .\
    \ . . . . . . . . . .  15\n   4.1.31 Events . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . .  16\n   4.1.32 Creation/Deletion  . . . . . . . . . . . .\
    \ . . . . . . . .  16\n   4.1.33 Range and Size Constraints . . . . . . . . .\
    \ . . . . . . .  16\n   4.1.34 Uniqueness . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  16\n   4.1.35 Extension Rules  . . . . . . . . . . . . . . . .\
    \ . . . . .  17\n   4.1.36 Deprecate Use of IMPLIED Keyword . . . . . . . . .\
    \ . . . .  17\n   4.1.37 No Redundancy  . . . . . . . . . . . . . . . . . . .\
    \ . . .  17\n   4.1.38 Compliance and Conformance . . . . . . . . . . . . . .\
    \ . .  17\n   4.1.39 Allow Refinement of All Definitions in Conformance\n    \
    \      Statements . . . . . . . . . . . . . . . . . . . . . . . .  18\n   4.1.40\
    \ Categories . . . . . . . . . . . . . . . . . . . . . . . .  18\n   4.1.41 Core\
    \ Language Keywords vs. Defined Identifiers . . . . . .  19\n   4.1.42 Instance\
    \ Naming  . . . . . . . . . . . . . . . . . . . . .  19\n   4.1.43 Length of Identifiers\
    \  . . . . . . . . . . . . . . . . . .  19\n   4.1.44 Assign OIDs in the Protocol\
    \ Mappings . . . . . . . . . . .  20\n   4.2    Nice-to-Have Objectives  . . .\
    \ . . . . . . . . . . . . . .  20\n   4.2.1  Methods  . . . . . . . . . . . .\
    \ . . . . . . . . . . . . .  20\n   4.2.2  Unions . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . .  21\n   4.2.3  Float Data Types . . . . . . . . . .\
    \ . . . . . . . . . . .  21\n   4.2.4  Comments . . . . . . . . . . . . . . .\
    \ . . . . . . . . . .  22\n   4.2.5  Referencing Tagged Rows  . . . . . . . .\
    \ . . . . . . . . .  22\n   4.2.6  Arrays . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . .  22\n   4.2.7  Internationalization . . . . . . . . . . . .\
    \ . . . . . . .  23\n   4.2.8  Separate Data Modelling from Management Protocol\
    \ Mapping .  23\n   4.3    Rejected Objectives  . . . . . . . . . . . . . . .\
    \ . . . .  24\n   4.3.1  Incomplete Translations  . . . . . . . . . . . . . .\
    \ . . .  24\n   4.3.2  Attribute Value Constraints  . . . . . . . . . . . . .\
    \ . .  24\n   4.3.3  Attribute Transaction Constraints  . . . . . . . . . . .\
    \ .  25\n   4.3.4  Method Constraints . . . . . . . . . . . . . . . . . . . .\
    \  25\n   4.3.5  Agent Capabilities . . . . . . . . . . . . . . . . . . . .  25\n\
    \   4.3.6  Relationships  . . . . . . . . . . . . . . . . . . . . . .  26\n  \
    \ 4.3.7  Procedures . . . . . . . . . . . . . . . . . . . . . . . .  26\n   4.3.8\
    \  Associations . . . . . . . . . . . . . . . . . . . . . . .  26\n   4.3.9  Association\
    \ Cardinalities  . . . . . . . . . . . . . . . .  27\n   4.3.10 Categories of\
    \ Modules  . . . . . . . . . . . . . . . . . .  27\n   4.3.11 Mapping Modules\
    \ to Files . . . . . . . . . . . . . . . . .  27\n   4.3.12 Simple Grammar . .\
    \ . . . . . . . . . . . . . . . . . . . .  28\n   4.3.13 Place of Module Information\
    \  . . . . . . . . . . . . . . .  28\n   4.3.14 Module Namespace . . . . . . .\
    \ . . . . . . . . . . . . . .  29\n   4.3.15 Hyphens in Identifiers . . . . .\
    \ . . . . . . . . . . . . .  29\n   5.     Security Considerations  . . . . .\
    \ . . . . . . . . . . . .  30\n   6.     Acknowledgements . . . . . . . . . .\
    \ . . . . . . . . . . .  30\n   7.     References . . . . . . . . . . . . . .\
    \ . . . . . . . . . .  30\n   8.     Authors' Addresses . . . . . . . . . . .\
    \ . . . . . . . . .  31\n   9.     Full Copyright Statement . . . . . . . . .\
    \ . . . . . . . .  33\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This document describes the objectives for a new data definition\n\
    \   language that can be mapped into SNMP [1], [2] and COPS-PR [3]\n   protocol\
    \ operations.  It may also be translated into SMIv2 [4], [5],\n   [6] MIBs and\
    \ SPPI [7] PIBs.  Concepts such as attributes, attribute\n   groups, methods,\
    \ conventions for organization into reusable data\n   structures, and mechanisms\
    \ for representing relationships are\n   discussed.\n"
- title: 2. Motivation
  contents:
  - "2. Motivation\n   As networking technology has evolved, a diverse set of technologies\n\
    \   has been deployed to manage the resulting products.  These vary from\n   Web\
    \ based products, to standard management protocols and text\n   scripts.  The\
    \ underlying systems to be manipulated are represented in\n   varying ways including\
    \ implicitly in the system programming, via\n   proprietary data descriptions,\
    \ or with standardized descriptions\n   using a range of technologies including\
    \ MIBs, PIBs, or LDAP schemas.\n   The result is that management interfaces for\
    \ network protocols,\n   services, and applications such as Differentiated Services\
    \ may be\n   represented in many different, inconsistent fashions.\n   The SMIng\
    \ working group has been chartered to define a new data\n   definition language\
    \ that will eliminate the need for a separate SMIv2\n   and SPPI language.  That\
    \ is, the new language should address the\n   needs for the current SMIv2 and\
    \ SPPI languages so that over time we\n   can all use the new language instead.\n\
    \   Another motivation is to permit a more expressive and complete\n   representation\
    \ of the modeled information.  Examples of additional\n   expressiveness and completeness\
    \ that are considered are the ability\n   to formally define table existence relationships,\
    \ the expression of\n   instance creation/deletion capabilities, and the ability\
    \ to define\n   attribute groups using inheritance.  These additional features\
    \ are\n   discussed in subsequent sections.\n   It has been recognized that the\
    \ two main goals of (a) merging\n   SMIv2/SPPI and (b) enhancing the state of\
    \ art in network management\n   data modeling can lead to conflicts.  In such\
    \ cases, the SMIng\n   working group's consensus is to focus on enhancing the\
    \ state of art\n   in network management data modeling.\n"
- title: 3. Background
  contents:
  - "3. Background\n   The Network Management Research Group (NMRG) of the Internet\
    \ Research\n   Task Force (IRTF) has researched the issues of creating a protocol-\n\
    \   independent data definition language that could be used by multiple\n   protocols.\
    \  Because SMIv2 and SPPI are very similar, the NMRG focused\n   on merging these\
    \ two languages, but also researched ways to abstract\n   the objectives to produce\
    \ a language that could be used for other\n   protocols, such as LDAP and Diameter.\
    \  The NMRG has published the\n   results of their work in a meanwhile expired\
    \ Internet Draft, but has\n   submitted their specification as one proposal to\
    \ consider in the\n   development of the SMIng language.\n   The SMIng Working\
    \ Group has accepted their submission for\n   consideration, and to use their\
    \ proposal to better understand the\n   objectives and possible obstacles to be\
    \ overcome.  Where useful, the\n   NMRG proposal has been referenced in the details\
    \ below.\n"
- title: 4. Specific Objectives for SMIng
  contents:
  - "4. Specific Objectives for SMIng\n   The following sections define the objectives\
    \ for the definition of a\n   new data definition language.  The objectives have\
    \ been organized as\n   follows: accepted objectives (Section 4.1), nice-to-have\
    \ objectives\n   (Section 4.2), and rejected objectives (Section 4.3).  Each objective\n\
    \   has the following information:\n   o  Type: a field that identifies the type\
    \ of objective, using one of\n      the following values:\n      *  basic: considered\
    \ a basic objective for SMIng and is contained\n         in SMIv2 and/or SPPI.\n\
    \      *  align: supported in different ways in SMIv2 and SPPI and they\n    \
    \     must be aligned.\n      *  fix: considered a fix for a known problem in\
    \ SMIv2 and/or SPPI.\n      *  new: considered a new feature.\n   o  From: a field\
    \ that defines the origin of the objective and that\n      contains one or more\
    \ of the following values:\n      *  SMI: exists in SMIv2.\n      *  SPPI: exists\
    \ in SPPI.\n      *  NMRG: exists in the NMRG proposal, but not in SMIv2 or SPPI.\n\
    \      *  Charter: exists in working group charter.\n      *  WG: proposed during\
    \ working group discussions.\n   o  Description: a quick description of the objective.\n\
    \   o  Motivation: rationale for the objective.\n   o  Notes: optional notes about\
    \ an objective.  For example, for nice-\n      to-have or rejected this may contain\
    \ reasoning why this objective\n      is not required by the SMIng working group,\
    \ but justification why\n      it should be considered anyway.  Notes may be the\
    \ opinions of the\n      participants in the discussion on objectives and as such\
    \ should\n      not be taken as consensus of the working group or the\n      recommendation\
    \ of the objectives editing team.\n"
- title: 4.1 Accepted Objectives
  contents:
  - "4.1 Accepted Objectives\n   This section represents the list of objectives that\
    \ have been\n   accepted by the SMIng working group as worthwhile and therefore\n\
    \   deserving of further consideration.  Each of these objectives must be\n  \
    \ evaluated by the working group to determine if the benefit incurs an\n   acceptable\
    \ level of cost.  An accepted objective may subsequently be\n   rejected if the\
    \ cost/benefit analysis determines that the benefit\n   does not justify the cost\
    \ or that the objective is in direct conflict\n   with one or more other accepted\
    \ objectives that are deemed more\n   important.\n"
- title: 4.1.1 The Set of Specification Documents
  contents:
  - "4.1.1 The Set of Specification Documents\n   Type: new\n   From: NMRG\n   Description:\
    \ SMIv2 is defined in three documents, based on an\n      obsolete ITU ASN.1 specification.\
    \  SPPI is defined in one\n      document, based on SMIv2.  The core of SMIng\
    \ must be defined in\n      one document and must be independent of external specifications.\n\
    \   Motivation: Self-containment.\n"
- title: 4.1.2 Textual Representation
  contents:
  - "4.1.2 Textual Representation\n   Type: basic\n   From: SMI, SPPI, WG\n   Description:\
    \ SMIng definitions must be represented in a textual\n      format.\n   Motivation:\
    \ General IETF consensus.\n"
- title: 4.1.3 Human Readability
  contents:
  - "4.1.3 Human Readability\n   Type: basic\n   From: WG\n   Description: The syntax\
    \ must make it easy for humans to directly read\n      and write SMIng modules.\
    \  It must be possible for SMIng module\n      authors to produce SMIng modules\
    \ with text editing tools.\n   Motivation: The syntax must make it easy for humans\
    \ to read and write\n      SMIng modules.\n"
- title: 4.1.4 Rigorously Defined Syntax
  contents:
  - "4.1.4 Rigorously Defined Syntax\n   Type: new\n   From: NMRG\n   Description:\
    \ There must be a rigorously defined syntax for the SMIng\n      language.\n \
    \  Motivation: An unambiguous language promotes consistency across\n      vendors\
    \ so that different parsers produce the same results.  It\n      also provides\
    \ authoritative rules to SMIng modules designers.\n"
- title: 4.1.5 Accessibility
  contents:
  - "4.1.5 Accessibility\n   Type: align\n   From: SMI, SPPI\n   Description: Attribute\
    \ definitions must indicate whether attributes\n      can be read, written, created,\
    \ deleted, and whether they are\n      accessible for notifications, or are not\
    \ accessible.  Align PIB-\n      ACCESS and MAX-ACCESS, and PIB-MIN-ACCESS and\
    \ MIN-ACCESS.\n   Motivation: Alignment of SMIv2 and SPPI.\n"
- title: 4.1.6 Language Extensibility
  contents:
  - "4.1.6 Language Extensibility\n   Type: new\n   From: NMRG\n   Description: The\
    \ language must have characteristics, so that future\n      modules can contain\
    \ information of future syntax without breaking\n      original SMIng parsers.\n\
    \      E.g., when SMIv2 introduced REFERENCEs it would have been nice if\n   \
    \   it would not have broken SMIv1 parsers.\n   Motivation: Achieve language extensibility\
    \ without breaking core\n      compatibility.\n"
- title: 4.1.7 Special Characters in Text
  contents:
  - "4.1.7 Special Characters in Text\n   Type: new\n   From: WG\n   Description:\
    \ Allow an escaping mechanism to encode special\n      characters, e.g. double\
    \ quotes and new-line characters, in text\n      such as DESCRIPTIONs or REFERENCEs.\n\
    \   Motivation: ABNF can contain literal characters enclosed in double\n     \
    \ quotes; to provide the ABNF grammar, there must be the ability to\n      escape\
    \ special characters.\n"
- title: 4.1.8 Naming
  contents:
  - "4.1.8 Naming\n   Type: basic\n   From: SMI, SPPI\n   Description: SMIng must\
    \ provide mechanisms to uniquely identify\n      attributes, groups of attributes,\
    \ and events.  It is necessary to\n      specify how name collisions are handled.\n\
    \   Motivation: Already in SMIv2 and SPPI.\n"
- title: 4.1.9 Namespace Control
  contents:
  - "4.1.9 Namespace Control\n   Type: basic\n   From: SMI, SPPI\n   Description:\
    \ There must be a hierarchical, centrally-controlled\n      namespace for standard\
    \ named items, and a distributed namespace\n      must be supported to allow vendor-specific\
    \ naming and to assure\n      unique module names across vendors and organizations.\n\
    \   Motivation: Need to unambiguously identify definitions of various\n      kinds.\
    \  Some SMI implementations have problems with different\n      objects from multiple\
    \ modules but with the same name.\n      Furthermore, the probability of module\
    \ name clashes rises over\n      time (for example, different vendors defining\
    \ their own SYSTEM-\n      MIB).\n   Notes: An example naming scheme is the one\
    \ employed by the Java\n      programming language with a central naming authority\
    \ assigning the\n      top-level names.\n"
- title: 4.1.10 Modules
  contents:
  - "4.1.10 Modules\n   Type: basic\n   From: SMI, SPPI\n   Description: SMIng must\
    \ provide a mechanism for uniquely identifying\n      a module, and specifying\
    \ the status, contact person, revision\n      information, and the purpose of\
    \ a module.\n      SMIng must provide mechanisms to group definitions into modules\n\
    \      and it must provide rules for referencing definitions from other\n    \
    \  modules.\n   Motivation: Modularity and independent advancement of documents.\n\
    \   Notes: Text about module conformance has been moved to Section\n      4.1.11.\n"
- title: 4.1.11 Module Conformance
  contents:
  - "4.1.11 Module Conformance\n   Type: basic\n   From: SMI, SPPI\n   Description:\
    \ SMIng must provide mechanisms to detail the minimum\n      requirements implementers\
    \ must meet to claim conformance to a\n      standard based on the module.\n \
    \  Motivation: Ability to convey conformance requirements.\n"
- title: 4.1.12 Arbitrary Unambiguous Identities
  contents:
  - "4.1.12 Arbitrary Unambiguous Identities\n   Type: basic\n   From: SMI\n   Description:\
    \ SMI allows the use of OBJECT-IDENTITIES to define\n      unambiguous identities\
    \ without the need of a central registry.\n      SMI uses OIDs to represent values\
    \ that represent references to\n      such identities.  SMIng needs a similar\
    \ mechanism (a statement to\n      register identities, and a base type to represent\
    \ values).\n   Motivation: SMI Compatibility.\n   Notes: This is an obvious objective.\
    \  Additionally, everything not on\n      the wire, such as modules, will still\
    \ be assigned OIDs.\n      It is yet to be determined whether the assignment of\
    \ the OID\n      occurs within the core or within a protocol-specific mapping.\n"
- title: 4.1.13 Protocol Independence
  contents:
  - "4.1.13 Protocol Independence\n   Type: basic\n   From: Charter\n   Description:\
    \ SMIng must define data definitions in support of the\n      SNMP and COPS-PR\
    \ protocols.  SMIng may define data definitions in\n      support of other protocols.\n\
    \   Motivation: So data definitions may be used with multiple protocols\n    \
    \  and multiple versions of those protocols.\n"
- title: 4.1.14 Protocol Mapping
  contents:
  - "4.1.14 Protocol Mapping\n   Type: basic\n   From: Charter\n   Description: The\
    \ SMIng working group, in accordance with the working\n      group charter, will\
    \ define mappings of protocol independent data\n      definitions to protocols\
    \ based upon installed implementations.\n      The SMIng working group can define\
    \ mappings to other protocols as\n      long as this does not impede the progress\
    \ on other objectives.\n   Motivation: SMIng working group charter.\n"
- title: 4.1.15 Translation to Other Data Definition Languages
  contents:
  - "4.1.15 Translation to Other Data Definition Languages\n   Type: basic\n   From:\
    \ Charter\n   Description: SMIng language constructs must, wherever possible,\
    \ be\n      translatable to SMIv2 and SPPI.  At the time of standardization of\n\
    \      a SMIng language, existing SMIv2 MIBs and SPPI PIBs on the\n      standards\
    \ track will not be required to be translated to the SMIng\n      language.  New\
    \ MIBs/PIBs will be defined using the SMIng language.\n   Motivation: Provide\
    \ best-effort backwards compatibility for existing\n      tools while not placing\
    \ an unnecessary burden on MIBs/PIBs that\n      are already on the standards\
    \ track.\n"
- title: 4.1.16 Base Data Types
  contents:
  - "4.1.16 Base Data Types\n   Type: basic\n   From: SMI, SPPI\n   Description: SMIng\
    \ must support the base data types Integer32,\n      Unsigned32, Integer64, Unsigned64,\
    \ Enumeration, Bits, OctetString,\n      and OID.\n   Motivation: Most are already\
    \ common.  Unsigned64 and Integer64 are in\n      SPPI, must fix in SMI.  Note\
    \ that Counter and Gauge types can be\n      regarded as derived types instead\
    \ of base types.\n"
- title: 4.1.17 Enumerations
  contents:
  - "4.1.17 Enumerations\n   Type: basic\n   From: SMI, SPPI\n   Description: SMIng\
    \ must provide support for enumerations.  Enumerated\n      values must be a part\
    \ of the enumeration definition.\n   Motivation: SMIv2 already has enumerated\
    \ numbers.\n   Notes: Enumerations have the implicit constraint that the attribute\n\
    \      is constrained to the values for the enumeration.\n"
- title: 4.1.18 Discriminated Unions
  contents:
  - "4.1.18 Discriminated Unions\n   Type: new\n   From: WG\n   Description: SMIng\
    \ must support discriminated unions.\n   Motivation: Allows to group related attributes\
    \ together, such as\n      InetAddressType (discriminator) and InetAddress, InetAddressIPv4,\n\
    \      InetAddressIPv6 (union).  The lack of discriminated unions has\n      also\
    \ lead to relatively complex sparse table work-around in some\n      DISMAN mid-level\
    \ manager MIBs.\n   Notes: Discriminated unions have the property that the union\n\
    \      attribute type is constrained by the value of the discriminator\n     \
    \ attribute.\n"
- title: 4.1.19 Instance Pointers
  contents:
  - "4.1.19 Instance Pointers\n   Type: basic\n   From: SMI, SPPI\n   Description:\
    \ SMIng must allow specifying pointers to instances (i.e.,\n      a pointer to\
    \ a particular attribute in a row).\n   Motivation: It is common practice in MIBs\
    \ and PIBs to point to other\n      instances.\n"
- title: 4.1.20 Row Pointers
  contents:
  - "4.1.20 Row Pointers\n   Type: align\n   From: SMI, SPPI\n   Description: SMIng\
    \ must allow specifying pointers to rows.\n   Motivation: It is common practice\
    \ in MIBs and PIBs to point to other\n      rows (see RowPointer, PIB-REFERENCES).\n"
- title: 4.1.21 Constraints on Pointers
  contents:
  - "4.1.21 Constraints on Pointers\n   Type: align\n   From: SPPI\n   Description:\
    \ SMIng must allow specifying the types of objects to\n      which a pointer may\
    \ point.\n   Motivation: Allows code generators to detect and reject illegal\n\
    \      pointers automatically.  Can also be used to automatically\n      generate\
    \ more reasonable implementation-specific data structures.\n   Notes: Pointer\
    \ constraints are a special case of attribute value\n      constraints (Section\
    \ 4.3.2) in which the prefix of the OID (row or\n      instance pointer) value\
    \ is limited to be only from a particular\n      table.\n"
- title: 4.1.22 Base Type Set
  contents:
  - "4.1.22 Base Type Set\n   Type: basic\n   From: SMI, SPPI\n   Description: SMIng\
    \ must support a fixed set of base types of fixed\n      size and precision. \
    \ The list of base types must not be extensible\n      unless the SMI itself changes.\n\
    \   Motivation: Interoperability.\n"
- title: 4.1.23 Extended Data Types
  contents:
  - "4.1.23 Extended Data Types\n   Type: align\n   From: SMI, SPPI\n   Description:\
    \ SMIng must support a mechanism to derive new types,\n      which provide additional\
    \ semantics (e.g., Counters, Gauges,\n      Strings, etc.), from base types. \
    \ It may be desirable to also\n      allow the derivation of new types from derived\
    \ types.  New types\n      must be as restrictive or more restrictive than the\
    \ types that\n      they are specializing.\n   Motivation: SMI uses application\
    \ types and textual conventions.  SPPI\n      uses derived types.\n"
- title: 4.1.24 Units, Formats, and Default Values of Defined Types and
  contents:
  - "4.1.24 Units, Formats, and Default Values of Defined Types and\n       Attributes\n\
    \   Type: fix\n   From: NMRG\n   Description: In SMIv2 OBJECT-TYPE definitions\
    \ may contain UNITS and\n      DEFVAL clauses and TEXTUAL-CONVENTIONs may contain\
    \ DISPLAY-HINTs.\n      In a similar fashion units and default values must be\
    \ applicable\n      to defined types and format information must be applicable\
    \ to\n      attributes.\n   Motivation: Some MIBs introduce TCs such as KBytes\
    \ and every usage of\n      the TC then specifies the UNITS \"KBytes\".  It would\
    \ simplify\n      things if the UNITS were attached to the type definition itself.\n\
    \   Notes: The SMIng WG must clarify the behavior if an attribute uses a\n   \
    \   defined type and both, the attribute and the defined type, have\n      units/default/format\
    \ information.\n"
- title: 4.1.25 Table Existence Relationships
  contents:
  - "4.1.25 Table Existence Relationships\n   Type: align\n   From: SMI, SPPI\n  \
    \ Description: SMIng must support INDEX, AUGMENTS, and EXTENDS in the\n      SNMP/COPS-PR\
    \ protocol mappings.\n   Motivation: These three table existence relationships\
    \ exist either in\n      the SMIv2 or the SPPI.\n"
- title: 4.1.26 Table Existence Relationships (2)
  contents:
  - "4.1.26 Table Existence Relationships (2)\n   Type: new\n   From: NMRG\n   Description:\
    \ SMIng must support EXPANDS and REORDERS relationships in\n      the SNMP/COPS-PR\
    \ protocol mappings.\n   Motivation: A REORDERS statement allows indexing orders\
    \ to be\n      swapped.  An EXPANDS statement formally states that there is a\
    \ 1:n\n      existence relationship between table rows.\n"
- title: 4.1.27 Attribute Groups
  contents:
  - "4.1.27 Attribute Groups\n   Type: new\n   From: NMRG\n   Description: An attribute\
    \ group is a named, reusable set of\n      attributes that are meaningful together.\
    \  It can be reused as the\n      type of attributes in other attribute groups\
    \ (see also Section\n      4.1.28).  This is similar to `structs' in C.\n   Motivation:\
    \ Required to map the same grouping of attributes into SNMP\n      and COPS-PR\
    \ tables.  Allows to do index reordering without having\n      to redefine the\
    \ attribute group.  Allows to group related\n      attributes together (e.g. InetAddressType,\
    \ InetAddress).\n      The ability to group attributes provides an indication\
    \ that the\n      attributes are meaningful together.\n"
- title: 4.1.28 Containment
  contents:
  - "4.1.28 Containment\n   Type: new\n   From: NMRG\n   Description: SMIng must provide\
    \ support for the creation of new\n      attribute groups from attributes of more\
    \ basic types and\n      potentially other attribute groups.\n   Motivation: Simplifies\
    \ the reuse of attribute groups such as\n      InetAddressType and InetAddress\
    \ pairs.\n   Notes: Containment has the implicit existence constraint that if\
    \ an\n      instance of a contained attribute group exists, then the\n      corresponding\
    \ instance of the containing attribute group must also\n      exist.\n"
- title: 4.1.29 Single Inheritance
  contents:
  - "4.1.29 Single Inheritance\n   Type: new\n   From: NMRG\n   Description: SMIng\
    \ must provide support for mechanisms to extend\n      attribute groups through\
    \ single inheritance.\n   Motivation: Allows to extend attribute groups, like\
    \ a generic\n      DiffServ scheduler, with attributes for a specific scheduler,\n\
    \      without cut&paste.\n   Notes: Single inheritance with multiple levels (e.g.,\
    \ C derives from\n      B, and B derives from A) must be allowed.\n      Inheritance\
    \ has the implicit existence constraint that if an\n      instance of a derived\
    \ attribute group exists, then the\n      corresponding instance of the base attribute\
    \ group must also\n      exist.\n      Inheritance could help to add attributes\
    \ to an attribute group\n      that are specific to a certain protocol mapping\
    \ and do not appear\n      in the protocol-neutral attribute group.\n"
- title: 4.1.30 Reusable vs. Final Attribute Groups
  contents:
  - "4.1.30 Reusable vs. Final Attribute Groups\n   Type: new\n   From: NMRG, WG\n\
    \   Description: SMIng must differentiate between \"final\" and reusable\n   \
    \   attribute groups, where the reuse of attribute groups covers\n      inheritance\
    \ and containment.\n   Motivation: This information gives people more information\
    \ how\n      attribute groups can and should be used.  It hinders them from\n\
    \      misusing them.\n   Notes: This objective attempts to convey the idea that\
    \ some attribute\n      groups are not meant to stand on their own and instead\
    \ only make\n      sense if contained within another attribute group.\n"
- title: 4.1.31 Events
  contents:
  - "4.1.31 Events\n   Type: basic\n   From: SMI, SPPI\n   Description: SMIng must\
    \ provide mechanisms to define events which\n      identify significant state\
    \ changes.\n   Motivation: These represent the protocol-independent events that\
    \ lead\n      to SMI notifications or SPPI reports.\n"
- title: 4.1.32 Creation/Deletion
  contents:
  - "4.1.32 Creation/Deletion\n   Type: align\n   From: SMI, SPPI\n   Description:\
    \ SMIng must support a mechanism to define\n      creation/deletion operations\
    \ for instances.  Specific\n      creation/deletion errors, such as INSTALL-ERRORS,\
    \ must be\n      supported.\n   Motivation: Available for row creation in SMI,\
    \ and available in SPPI.\n"
- title: 4.1.33 Range and Size Constraints
  contents:
  - "4.1.33 Range and Size Constraints\n   Type: basic\n   From: SMI, SPPI\n   Description:\
    \ SMIng must allow specifying range and size constraints\n      where applicable.\n\
    \   Motivation: The SMI and SPPI both support range and size constraints.\n"
- title: 4.1.34 Uniqueness
  contents:
  - "4.1.34 Uniqueness\n   Type: basic\n   From: SPPI\n   Description: SMIng must\
    \ allow the specification of uniqueness\n      constraints on attributes.  SMIng\
    \ must allow the specification of\n      multiple independent uniqueness constraints.\n\
    \   Motivation: Knowledge of the uniqueness constraints on attributes\n      allows\
    \ to verify protocol specific mappings (e.g. INDEX clauses).\n      The knowledge\
    \ can also be used by code generators to improve\n      generated implementation-specific\
    \ data structures.\n"
- title: 4.1.35 Extension Rules
  contents:
  - "4.1.35 Extension Rules\n   Type: basic\n   From: SMI, SPPI\n   Description: SMIng\
    \ must provide clear rules how one can extend SMIng\n      modules without causing\
    \ interoperability problems \"over the wire\".\n   Motivation: SMIv2 and SPPI\
    \ have extension rules.\n"
- title: 4.1.36 Deprecate Use of IMPLIED Keyword
  contents:
  - "4.1.36 Deprecate Use of IMPLIED Keyword\n   Type: fix\n   From: WG\n   Description:\
    \ The SMIng SNMP mapping must deprecate the use of the\n      IMPLIED indexing\
    \ schema.\n   Motivation: IMPLIED is confusing and most people don't understand\
    \ it.\n      The solution (IMPLIED) is worse than the problem it is trying to\n\
    \      solve and therefore for the sake of simplicity, the use of IMPLIED\n  \
    \    should be deprecated.\n"
- title: 4.1.37 No Redundancy
  contents:
  - "4.1.37 No Redundancy\n   Type: fix\n   From: NMRG\n   Description: The SMIng\
    \ language must avoid redundancy.\n   Motivation: Remove any textual redundancy\
    \ for things like table\n      entries and SEQUENCE definitions, which only increase\n\
    \      specifications without providing any value.\n"
- title: 4.1.38 Compliance and Conformance
  contents:
  - "4.1.38 Compliance and Conformance\n   Type: basic\n   From: SMI, SPPI\n   Description:\
    \ SMIng must provide a mechanism for compliance and\n      conformance specifications\
    \ for protocol-independent definitions as\n      well as for protocol mappings.\n\
    \   Motivation: This capability exists in SMIv2 and SPPI.  The NMRG\n      proposal\
    \ has the ability to express much of this information at\n      the protocol-dependent\
    \ layer.  Some compliance or conformance\n      information may be protocol-independent,\
    \ therefore there is also a\n      need to be able to express this information\
    \ protocol-independent\n      part.\n"
- title: 4.1.39 Allow Refinement of All Definitions in Conformance Statements
  contents:
  - "4.1.39 Allow Refinement of All Definitions in Conformance Statements\n   Type:\
    \ fix\n   From: WG\n   Description: SMIv2, RFC 2580, Section 3.1 says:\n     \
    \    The OBJECTS clause, which must be present, is used to specify\n         each\
    \ object contained in the conformance group.  Each of the\n         specified\
    \ objects must be defined in the same information\n         module as the OBJECT-GROUP\
    \ macro appears, and must have a MAX-\n         ACCESS clause value of \"accessible-for-notify\"\
    , \"read-only\",\n         \"read-write\", or \"read-create\".\n      The last\
    \ sentence forbids to put a not-accessible INDEX object\n      into an OBJECT-GROUP.\
    \  Hence, you can not refine its syntax in a\n      compliance definition.  For\
    \ more details, see\n      http://www.ibr.cs.tu-bs.de/ietf/smi-errata/\n   Motivation:\
    \ This error should not be repeated in SMIng.\n"
- title: 4.1.40 Categories
  contents:
  - "4.1.40 Categories\n   Type: basic\n   From: SPPI\n   Description: SMIng must\
    \ provide a mechanism to group definitions into\n      subject categories.  Concrete\
    \ instances may only exist in the\n      scope of a given subject category or\
    \ context.\n   Motivation: To scope the categories to which a module applies.\
    \  In\n      SPPI this is used to allow a division of labor between multiple\n\
    \      client types.\n"
- title: 4.1.41 Core Language Keywords vs. Defined Identifiers
  contents:
  - "4.1.41 Core Language Keywords vs. Defined Identifiers\n   Type: fix\n   From:\
    \ NMRG\n   Description: In SMI and SPPI modules some language keywords (macros\n\
    \      and a number of basetypes) have to be imported from different SMI\n   \
    \   language defining modules, e.g. OBJECT-TYPE, MODULE-IDENTITY,\n      Integer32\
    \ must to be imported from SNMPv2-SMI and TEXTUAL-\n      CONVENTION must be imported\
    \ from SNMPv2-TC, if used.  MIB authors\n      are continuously confused about\
    \ these import rules.  In SMIng only\n      defined identifiers must be imported.\
    \  All SMIng language keywords\n      must be implicitly known and there must\
    \ not be a need to import\n      them from any module.\n   Motivation: Reduce\
    \ confusion.  Clarify the set of language keywords.\n"
- title: 4.1.42 Instance Naming
  contents:
  - "4.1.42 Instance Naming\n   Type: align\n   From: SMI, SPPI\n   Description: Instance\
    \ naming in SMIv2 and SPPI is different.  SMIng\n      must align the instance\
    \ naming (either in the protocol neutral\n      model or the protocol mappings).\n\
    \   Motivation: COPS-PR and SNMP have different instance identification\n    \
    \  schemes that must be handled.\n   Notes: A solution requires to investigate\
    \ how close the naming\n      schemes dictated by the protocols are.  Perhaps\
    \ it is feasible to\n      have a single instance naming scheme in both SNMP and\
    \ COPS-PR,\n      even though the current SPPI and SMIv2 are different.\n"
- title: 4.1.43 Length of Identifiers
  contents:
  - "4.1.43 Length of Identifiers\n   Type: fix\n   From: NMRG\n   Description: The\
    \ allowed length of the various kinds of identifiers\n      must be extended from\
    \ the current `should not exceed 32' (maybe\n      even from the `must not exceed\
    \ 64') rule.\n   Motivation: Reflect current practice of definitions.\n   Notes:\
    \ The 32-rule was added back in the days where compilers could\n      not deal\
    \ with long identifiers.  This rule is continuously\n      violated these days\
    \ and it does not make sense to keep it.\n"
- title: 4.1.44 Assign OIDs in the Protocol Mappings
  contents:
  - "4.1.44 Assign OIDs in the Protocol Mappings\n   Type: new\n   From: NMRG\n  \
    \ Description: SMIng must not assign OIDs to reusable definition of\n      attributes,\
    \ attribute groups, events, etc.  Instead, SNMP and\n      COPS-PR mappings must\
    \ assign OIDs to the mapped items.\n   Motivation: Assignment of OIDs in protocol\
    \ neutral definitions can\n      complicate reuse.  OIDs of synonymous attributes\
    \ are not the same\n      in SMI and SPPI definitions.  MIBs and PIBs are already\
    \ registered\n      in different parts of the OID namespace.\n"
- title: 4.2 Nice-to-Have Objectives
  contents:
  - "4.2 Nice-to-Have Objectives\n   This section represents the list of recommended\
    \ objectives that would\n   be nice to have.  However, these are not automatically\
    \ thought of as\n   accepted objectives as, for example, they may entail a non-trivial\n\
    \   amount of work in underlying protocols to support or they may be\n   regarded\
    \ as less important than other contradicting objectives that\n   are accepted.\n"
- title: 4.2.1 Methods
  contents:
  - "4.2.1 Methods\n   Type: new\n   From: WG\n   Description: SMIng should support\
    \ a mechanism to define method\n      signatures (parameters, return values, exception)\
    \ that are\n      implemented on agents.\n   Motivation: Methods are needed to\
    \ support the definition of\n      operational interfaces such as found in [RFC2925]\
    \ (ping,\n      traceroute and lookup operations).  Also, the ability to define\n\
    \      constructor/destructor interfaces could address issues such as\n      encountered\
    \ with SNMP's RowStatus solution.\n   Notes: Is it possible to do methods without\
    \ changing the underlying\n      protocol?  There is agreement that methods are\
    \ useful, but\n      disagreement upon the impact - one end of the spectrum sees\
    \ this\n      as a documentation tool for existing SNMP capabilities, while the\n\
    \      other end sees this as a protocol update, moving forward, to\n      natively\
    \ support methods.  The proposal is to wait and see if this\n      is practical\
    \ to implement as a syntax that is useful and can map\n      to the protocol.\n"
- title: 4.2.2 Unions
  contents:
  - "4.2.2 Unions\n   Type: new\n   From: WG\n   Description: SMIng should support\
    \ a standard format for unions.\n   Motivation: Allows an attribute to contain\
    \ one of many types of\n      values.  The lack of unions has also lead to relatively\
    \ complex\n      sparse table work-around in some DISMAN mid-level managers.\n\
    \      Despite from discriminated unions (see Section 4.1.18), this kind\n   \
    \   of union has no accompanied explicit discriminator attribute that\n      selects\
    \ the union's type of value.\n   Notes: The thought is that SNMP and COPS-PR can\
    \ already support\n      unions because they do not care about what data type\
    \ goes with a\n      particular OID.\n"
- title: 4.2.3 Float Data Types
  contents:
  - "4.2.3 Float Data Types\n   Type: new\n   From: WG, NMRG\n   Description: SMIng\
    \ should support the base data types Float32,\n      Float64, Float128.\n   Motivation:\
    \ Missing base types can hurt later on, because they cannot\n      be added without\
    \ changing the language, even as an SMIng\n      extension.  Lesson learned from\
    \ the SMIv1/v2 debate about\n      Counter64/Integer64/...\n   Notes: There is\
    \ no mention as to whether or not the underlying\n      protocols will have to\
    \ natively support float data types.  This is\n      left to the mapping.  However,\
    \ it seems imperative that the float\n      data type needs to be added to the\
    \ set of intrinsic types in the\n      SMIng language at the creation of the language\
    \ as it will be\n      impossible to add them later without changing the language.\n"
- title: 4.2.4 Comments
  contents:
  - "4.2.4 Comments\n   Type: fix\n   From: NMRG\n   Description: The syntax of comments\
    \ should be well defined,\n      unambiguous and intuitive to most people, e.g.,\
    \ the C++/Java `//'\n      syntax.\n   Motivation: ASN.1 Comments (and thus SMI\
    \ and SPPI comments) have been\n      a constant source of confusion.  People\
    \ use arbitrary lengthy\n      strings of dashes (`-----------') in the wrong\
    \ assumption that\n      this is always treated as a comment.  Some implementations\
    \ try to\n      accept these syntactically wrong constructs which even raises\n\
    \      confusion.  We should get rid of this problem.\n   Notes: If the SMIng\
    \ working group adopts a C-like syntax, then the\n      C++/Java single-line comment\
    \ should be adopted as well.\n"
- title: 4.2.5 Referencing Tagged Rows
  contents:
  - "4.2.5 Referencing Tagged Rows\n   Type: align\n   From: SPPI\n   Description:\
    \ PIB and MIB row attributes reference a group of entries\n      in another table.\
    \  SPPI formalizes this by introducing PIB-TAG and\n      PIB-REFERENCES clauses.\
    \  This functionality should be retained in\n      SMIng.\n   Motivation: SPPI\
    \ formalizes tag references.  Some MIBs also use tag\n      references (see SNMP-TARGET-MIB\
    \ in RFC2573) even though SMIv2 does\n      not provide a formal notation.\n"
- title: 4.2.6 Arrays
  contents:
  - "4.2.6 Arrays\n   Type: new\n   From: WG\n   Description: SMIng should allow the\
    \ definition of a SEQUENCE OF\n      attributes or attribute groups (Section 4.1.27).\n\
    \   Motivation: The desire for the ability to have variable-length,\n      multi-valued\
    \ objects.\n   Notes: Some issues with arrays are still unclear.  As long as there\n\
    \      are no concepts to solve the problems with access semantics (how\n    \
    \  to achieve atomic access to arbitrary-sized arrays) and their\n      mappings\
    \ to SNMP and COPS-PR protocol operations, arrays cannot be\n      more than a\
    \ nice to have objective.\n"
- title: 4.2.7 Internationalization
  contents:
  - "4.2.7 Internationalization\n   Type: new\n   From: WG\n   Description: Informational\
    \ text (DESCRIPTION, REFERENCE, ...) should\n      allow i18nized encoding, probably\
    \ UTF-8.\n   Motivation: There has been some demand for i18n in the past.  The\
    \ BCP\n      RFC 2277 demands for internationalization.\n   Notes: Although English\
    \ is the language of IETF documents, SMIng\n      should allow other languages\
    \ for private use.\n"
- title: 4.2.8 Separate Data Modelling from Management Protocol Mapping
  contents:
  - "4.2.8 Separate Data Modelling from Management Protocol Mapping\n   Type: new\n\
    \   From: NMRG\n   Description: It should be possible to separate the domain specific\n\
    \      data modelling work from the network management protocol specific\n   \
    \   work.\n   Motivation: Today, working groups designing new protocols are forced\n\
    \      to care about the design of SNMP MIBs and maybe COPR-PR PIBs to\n     \
    \ manage the new protocol.  This means that experts in a specific\n      domain\
    \ are faced with details of at least one foreign (network\n      management) technology.\
    \  This leads to hard work and long revision\n      processes.  It would be a\
    \ win to separate the task of pure data\n      modelling which can be done by\
    \ the domain experts easily from the\n      network management protocol specific\
    \ mappings.  The mapping to\n      SNMP and/or COPS-PR can be done (a) later separately\
    \ and (b) by\n      network management experts.  This required NM expertise no\
    \ longer\n      hinders the progress of the domain specific working groups.\n"
- title: 4.3 Rejected Objectives
  contents:
  - "4.3 Rejected Objectives\n   This section represents the list of objectives that\
    \ were rejected\n   during the discussion on the objectives.  Those objectives\
    \ that have\n   been rejected need not be addressed by SMIng.  This does not imply\n\
    \   that they must not be addressed.\n"
- title: 4.3.1 Incomplete Translations
  contents:
  - "4.3.1 Incomplete Translations\n   Type: basic\n   From: WG\n   Description: Reality\
    \ sucks.  All information expressed in SMIng may\n      not be directly translatable\
    \ to a MIB or PIB construct, but all\n      information should be able to be conveyed\
    \ in documentation or via\n      other mechanisms.\n   Motivation: SMIng working\
    \ group requires this to ease transition.\n   Notes: The SMIng language itself\
    \ cannot require what compilers do\n      that translate SMIng into something\
    \ else.  So this seems to fall\n      out of the scope of the current working\
    \ group charter.\n"
- title: 4.3.2 Attribute Value Constraints
  contents:
  - "4.3.2 Attribute Value Constraints\n   Type: new\n   From: WG\n   Description:\
    \ SMIng should provide mechanisms to formally specify\n      constraints between\
    \ values of multiple attributes.\n   Motivation: Constraints on attribute values\
    \ occur where one or more\n      attributes may affect the value or range of values\
    \ for another\n      attribute.  One such relationship exists in IPsec, where\
    \ the type\n      of security algorithm determines the range of possible values\
    \ for\n      other attributes such as the corresponding key size.\n   Notes: This\
    \ objective as is has been rejected as too general, and\n      therefore virtually\
    \ impossible to implement.  However, constraints\n      that are implicit with\
    \ discriminated unions (Section 4.1.18),\n      enumerated types (Section 4.1.17),\
    \ pointer constraints (Section\n      4.1.21)), etc., are accepted and these implicit\
    \ constraints are\n      mentioned in the respective objectives.\n"
- title: 4.3.3 Attribute Transaction Constraints
  contents:
  - "4.3.3 Attribute Transaction Constraints\n   Type: new\n   From: WG\n   Description:\
    \ SMIng should provide a mechanism to formally express\n      that certain sets\
    \ of attributes can only be modified in\n      combination.\n   Motivation: COPS-PR\
    \ always does operations on table rows in a single\n      transaction.  There\
    \ are SMIv2 attribute combinations that need to\n      be modified together (such\
    \ as InetAddressType, InetAddress).\n   Notes: Alternative is to either use Methods\
    \ (Section 4.2.1) or assume\n      that all attributes in an attribute group (Section\
    \ 4.1.27) are to\n      be considered atomic.\n"
- title: 4.3.4 Method Constraints
  contents:
  - "4.3.4 Method Constraints\n   Type: new\n   From: WG\n   Description: Method definitions\
    \ should provide constraints on\n      parameters.\n   Motivation: None.\n   Notes:\
    \ Unless methods (Section 4.2.1) are done, there is no use for\n      this.  Furthermore,\
    \ this objective has not been motivated by any\n      proponent.\n"
- title: 4.3.5 Agent Capabilities
  contents:
  - "4.3.5 Agent Capabilities\n   Type: basic\n   From: SMI\n   Description: SMIng\
    \ should provide mechanisms to describe agent\n      implementations.\n   Motivation:\
    \ To permit manager to determine variations from the\n      standard for an implementation.\n\
    \   Notes: Agent capabilities should not be part of SMIng, but should\n      instead\
    \ be a separate capabilities table.\n"
- title: 4.3.6 Relationships
  contents:
  - "4.3.6 Relationships\n   Type: new\n   From: NMRG, WG\n   Description: Ability\
    \ to formally depict existence dependency, value\n      dependency, aggregation,\
    \ containment, and other relationships\n      between attributes or attribute\
    \ groups.\n   Motivation: Helps humans to understand the conceptual model of a\n\
    \      module.  Helps implementers of MIB compilers to generate more\n      `intelligent'\
    \ code.\n   Notes: This objective was deemed too general to be useful and instead\n\
    \      the individual types of relationship objectives (e.g., pointers,\n    \
    \  inheritance, containment, etc.)  are evaluated on a case-by-case\n      basis\
    \ with the specific relationships deemed useful being included\n      as accepted\
    \ objectives.\n"
- title: 4.3.7 Procedures
  contents:
  - "4.3.7 Procedures\n   Type: new\n   From: WG\n   Description: SMIng should support\
    \ a mechanism to formally define\n      procedures that are used by managers when\
    \ interacting with an\n      agent.\n   Motivation: None.\n   Notes: This objective\
    \ has not been motivated by any proponent.\n"
- title: 4.3.8 Associations
  contents:
  - "4.3.8 Associations\n   Type: new\n   From: WG\n   Description: SMIng should provide\
    \ mechanisms to explicitly specify\n      associations.\n   Motivation: None.\n\
    \   Notes: This objective has not been motivated by any proponent.\n"
- title: 4.3.9 Association Cardinalities
  contents:
  - "4.3.9 Association Cardinalities\n   Type: new\n   From: WG\n   Description: Cardinalities\
    \ between associations should be formally\n      defined.\n   Motivation: If you\
    \ have an association between attribute groups A and\n      B, the cardinality\
    \ of A indicates how many instances of A may be\n      associated with a single\
    \ instance of B.  Our discussions in\n      Minneapolis indicated that we want\
    \ to convey \"how many\" instances\n      are associated in order to define the\
    \ best mapping algorithm -\n      whether a new table, a single pointer, etc.\
    \  For example, do we\n      use RowPointer or an integer index into another table?\
    \ Do we map\n      to a table that holds instances of the association/relationship\n\
    \      itself?\n   Notes: Without associations (Section 4.3.8), this has no use.\n"
- title: 4.3.10 Categories of Modules
  contents:
  - "4.3.10 Categories of Modules\n   Type: new\n   From: WG\n   Description: The\
    \ SMIng documents should give clear guidance on which\n      kind of information\
    \ (with respect to generality, type/attribute\n      group/extension/..) should\
    \ be put in which kind of a module.\n      E.g., in SMIv2 we don't like to import\
    \ Utf8String from SYSAPPL-\n      MIB, but we also do not like to introduce a\
    \ redundant definition.\n      A module review process should probably be described\
    \ that ensures\n      that generally useful definitions do not go into device\
    \ or service\n      specific modules.\n   Motivation: Bad experience with SMIv2.\n\
    \   Notes: It is not clear how this can be done with the language to be\n    \
    \  created by SMIng WG.\n"
- title: 4.3.11 Mapping Modules to Files
  contents:
  - "4.3.11 Mapping Modules to Files\n   Type: new\n   From: NMRG\n   Description:\
    \ There should be a clear statement how SMIng modules are\n      mapped to files\
    \ (1:1, n:1?) and how files should be named (by\n      module name in case of\
    \ 1:1 mapping?).\n   Motivation: SMI implementations show up a variety of filename\n\
    \      extensions (.txt, .smi, .my, none).  Some expect all modules in a\n   \
    \   single file, others don't.  This makes it more difficult to\n      exchange\
    \ modules.\n   Notes: This is just an implementation detail and is best left to\
    \ a\n      BCP and not made a part of the language definition.\n"
- title: 4.3.12 Simple Grammar
  contents:
  - "4.3.12 Simple Grammar\n   Type: new\n   From: NMRG\n   Description: The grammar\
    \ of the language should be as simple as\n      possible.  It should be free of\
    \ exception rules.  A measurement of\n      simplicity is shortness of the ABNF\
    \ grammar.\n   Motivation: Ease of implementation.  Ease of learning/understanding.\n\
    \   Notes: This seems like an obvious objective, however shortness of the\n  \
    \    ABNF grammar is not necessarily a reflection of the simplicity of\n     \
    \ the grammar.\n"
- title: 4.3.13 Place of Module Information
  contents:
  - "4.3.13 Place of Module Information\n   Type: fix\n   From: NMRG\n   Description:\
    \ Module specific information (organization, contact,\n      description, revision\
    \ information) should be bound to the module\n      itself and not to an artificial\
    \ node (like SMIv2 MODULE-IDENTITY).\n   Motivation: Simplicity and design cleanup.\n\
    \   Notes: This does not seem to be a problem with the current SMI.\n      Although\
    \ simplification is a good thing, this detail is not\n      considered an objective.\n"
- title: 4.3.14 Module Namespace
  contents:
  - "4.3.14 Module Namespace\n   Type: new\n   From: WG\n   Description: Currently\
    \ the namespace of modules is flat and there is\n      no structure in module\
    \ naming causing the potential risk of name\n      clashes.  Possible solutions:\n\
    \      *  Assume module names are globally unique (just as SMIv1/v2),\n      \
    \   just give some recommendations on module names.\n      *  Force all organizations,\
    \ WGs and vendors to apply a name prefix\n         (e.g. CISCO-GAGA-MIB, IETF-DISMAN-SCRIPT-MIB?).\n\
    \      *  Force enterprises to apply a prefix based on the enterprise\n      \
    \   number (e.g. ENT2021-SOME-MIB).\n      *  Put module names in a hierarchical\
    \ domain based namespace (e.g.\n         DISMAN-SCRIPT-MIB.ietf.org).\n   Motivation:\
    \ Reduce risk of module name clashes.\n   Notes: Some aspects of this objective\
    \ overlap with other objectives\n      (namespace control (Section 4.1.9)) and\
    \ other aspects were thought\n      best left to a BCP.\n"
- title: 4.3.15 Hyphens in Identifiers
  contents:
  - "4.3.15 Hyphens in Identifiers\n   Type: fix\n   From: NMRG\n   Description: There\
    \ has been some confusion whether hyphens are\n      allowed in SMIv2 identifiers:\
    \ Module names are allowed to contain\n      hyphens.  Node identifiers usually\
    \ are not.  But for example\n      `mib-2' is a frequently used identifier that\
    \ contains a hyphen due\n      to its SMIv1 origin, when hyphen were not disallowed.\
    \  Similarly,\n      a number of named numbers of enumeration types contain hyphens\n\
    \      violating an SMIv2 rule.\n      SMIng should simply allow hyphens in all\
    \ kinds of identifiers.  No\n      exceptions.\n   Motivation: Reduce confusion\
    \ and exceptions.  Requires, however, that\n      implementation mappings properly\
    \ quote hyphens where appropriate.\n   Notes: This nit-picking is not worth to\
    \ be subject to the discussion\n      on objectives.  However, SMIng should care\
    \ about the fact that\n      compilers have to map SMIng to programming languages\
    \ where a\n      hyphen is a minus and thus not allowed in identifiers.\n"
- title: 5. Security Considerations
  contents:
  - "5. Security Considerations\n   This document defines objectives for a language\
    \ with which to write\n   and read descriptions of management information.  The\
    \ language itself\n   has no security impact on the Internet.\n"
- title: 6. Acknowledgements
  contents:
  - "6. Acknowledgements\n   Thanks to Dave Durham, whose work on the original NIM\
    \ (Network\n   Information Model) draft was used in generating this document.\n\
    \   Thanks to Andrea Westerinen for her contributions on the original NIM\n  \
    \ requirements and SMIng objectives drafts.\n"
- title: 7. References
  contents:
  - "7. References\n   [1] Case, J., Fedor, M., Schoffstall, M. and J. Davin, \"Simple\n\
    \       Network Management Protocol (SNMP)\", STD 15, RFC 1157, May 1990.\n  \
    \ [2] McCloghrie, K., Case, J., Rose, M. and S. Waldbusser, \"Protocol\n     \
    \  Operations for Version 2 of the Simple Network Management\n       Protocol\
    \ (SNMPv2)\", RFC 1905, January 1996.\n   [3] Chan, K., Seligson, J., Durham,\
    \ D., Gai, S., McCloghrie, K.,\n       Herzog, S., Reichmeyer, F., Yavatkar, R.\
    \ and A. Smith, \"COPS\n       Usage for Policy Provisioning (COPS-PR)\", RFC\
    \ 3084, March 2001.\n   [4] McCloghrie, K., Perkins, D., Schoenwaelder, J., Case,\
    \ J., Rose,\n       M. and S. Waldbusser, \"Structure of Management Information\n\
    \       Version 2 (SMIv2)\", STD 58, RFC 2578, April 1999.\n   [5] McCloghrie,\
    \ K., Perkins, D., Schoenwaelder, J., Case, J., Rose,\n       M. and S. Waldbusser,\
    \ \"Textual Conventions for SMIv2\", STD 58,\n       RFC 2579, April 1999.\n \
    \  [6] McCloghrie, K., Perkins, D. and J. Schoenwaelder, \"Conformance\n     \
    \  Statements for SMIv2\", STD 58, RFC 2580, April 1999.\n   [7] McCloghrie, K.,\
    \ Fine, M., Seligson, J., Chan, K., Hahn, S.,\n       Sahita, R., Smith, A. and\
    \ F. Reichmeyer, \"Structure of Policy\n       Provisioning Information (SPPI)\"\
    , RFC 3159, August 2001.\n"
- title: 8. Authors' Addresses
  contents:
  - "8. Authors' Addresses\n   Chris Elliott\n   Cisco Systems\n   7025 Kit Creek\
    \ Road\n   Research Triangle Park, NC 27709\n   USA\n   EMail: chelliot@cisco.com\n\
    \   David Harrington\n   Enterasys Networks\n   35 Industrial Way\n   P.O. Box\
    \ 5005\n   Rochester, NH 03866-5005\n   USA\n   EMail: dbh@enterasys.com\n   Jamie\
    \ Jason\n   Intel Corporation\n   MS JF3-206\n   2111 NE 25th Ave.\n   Hillsboro,\
    \ OR 97124\n   USA\n   EMail: jamie.jason@intel.com\n   Juergen Schoenwaelder\n\
    \   TU Braunschweig\n   Muehlenpfordtstr. 23\n   38106 Braunschweig\n   Germany\n\
    \   EMail: schoenw@ibr.cs.tu-bs.de\n   URI:   http://www.ibr.cs.tu-bs.de/\n  \
    \ Frank Strauss\n   TU Braunschweig\n   Muehlenpfordtstr. 23\n   38106 Braunschweig\n\
    \   Germany\n   EMail: strauss@ibr.cs.tu-bs.de\n   URI:   http://www.ibr.cs.tu-bs.de/\n\
    \   Walter Weiss\n   Ellacoya Networks\n   7 Henry Clay Dr.\n   Merrimack, NH.\
    \ 03054\n   USA\n   EMail: wweiss@ellacoya.com\n"
- title: 9. Full Copyright Statement
  contents:
  - "9. Full Copyright Statement\n   Copyright (C) The Internet Society (2001).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
