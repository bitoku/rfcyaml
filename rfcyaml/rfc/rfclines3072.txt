This document specifies a data exchange format and, partially, an API that can be used for creating and parsing such a format.
The IESG notes that the same problem space can be addressed using formats that the IETF normally uses including ASN.1 and XML.
The document reader is strongly encouraged to carefully read section 13 before choosing SDXF over ASN.1 or XML.
Further, when storing text in SDXF, the user is encourage to use the datatype for UTF 8, specified in section 2.5.
Abstract This specification describes an all purpose interchange format for use as a file format or for net working.
Data is organized in chunks which can be ordered in hierarchical structures.
This format is self describing and CPU independent.
The purpose of the Structured Data eXchange Format (SDXF) is to permit the interchange of an arbitrary structured data block with different kinds of data (numerical, text, bitstrings).
Because data is normalized to an abstract computer architecture independent "network format", SDXF is usable as a network interchange data format.
This data format is not limited to any application, the demand for this format is that it is usable as a text format for word  processing, as a picture format, a sound format, for remote procedure calls with complex parameters, suitable for document formats, for interchanging business data, etc.
SDXF is self describing, every program can unpack every SDXF data without knowing the meaning of the individual data elements.
Together with the description of the data format a set of functions will be introduced.
With the help of these functions one can create and access the data elements of SDXF.
The idea is that a programmer should only use these functions instead of maintaining the structure by himself on the level of bits and bytes.
(In the speech of object oriented programming these functions are methods of an object which works as a handle for a given SDXF data block.)
SDXF is not limited to a specific platform, along with a correct preparation of the SDXF functions the SDXF data can be interchanged (via network or data carrier) across the boundaries of different architectures (specified by the character code like ASCII, ANSI or EBCDIC and the byte order for binary data).
SDXF is also prepared to compress and encrypt parts or the whole block of SDXF data.
Description of SDXF data format.
First we introduce the term "chunk".
A chunk is a data structure with a fixed set of components.
A chunk may be "elementary" or "structured".
The latter one contains itself one or more other chunks.
net data or a list of of chunks
(  as stated in "length".
total length of chunk is length 6.
The chunk ID is a non zero positive number.
, flags   BIT STRING, length  OCTET STRING SIZE 3,   or:
OCTET STRING } 2.2 Structured chunk.
A structured chunk is marked as such by the flag byte (see 2.5).
Opposed to an elementary chunk its content consists of a list of chunks (elementary or structured):
With the help of this concept you can reproduce every hierarchically structured data into a SDXF chunk.
Some Remarks about the internal representation of the chunk's elements: Binary values are always in high order first (big endian) format, like the binary values in the IP header (network format).
A length of 300 ( 256
2C    content   in hexadecimal notation.
This is also valid for the chunk ID.
2.4 Character values in the content portion are also an object of adaptation: see chapter 4.
2.5 Meaning of the flag bits
pending structure (chunk is inconsistent, see also 11.1)
UTF 8 7   reserved 2.6 A short chunk has no data body.
The 3 byte Length field is used as data bytes instead.
This is used in order to save space when there are many small chunks.
Compressed and encrypted chunks are explained in chapter 5 and 6.
2.8 Arrays are explained in chapter 7.
2.9 Handling of UTF 8 is explained in chapter 9.
Not all combinations of bits are allowed or reasonable:  the flags 'array' and 'short' are mutually exclusive.
'short' is not applicable for data type 'structure' and 'float'.
'array' is not applicable for data type 'structure'.
Introduction to the SDXF functions 3.1 General remarks The functionality of the SDXF concept is not bounded to any programming language, but of course the functions themselves must be coded in a particular language.
I discuss these functions in C and C , because in the meanwhile these languages are available on almost all platforms.
All these functions for reading and writing SDXF chunks uses only one parameter, a parameter structure.
In C  this parameter structure is part of the "SDXF class" and the SDXF functions are methods of this class.
An exact description of the interface is given in chapter 8.
3.2 Writing a SDXF buffer For to write SDXF chunks, there are following functions:
Reading a SDXF buffer For to read SDXF chunks, there are following functions:
For demonstration we use a reduced (outlined)
C  Form of these functions with polymorph definitions: void create (short chunkID);
// opens a new structure, void create (short chunkID,
ok, rc will set by the SDXF functions { switch (x.chunkID) { case 3302:
1st chunk into data1 break; case 3303:
we know this is a structure
inner loop { switch (x.chunkID) { case 3305:
The very most of the computer platforms today have a 8 Bits in a Byte architecture, which enables data exchange between these platforms.
But there are two significant points in which platforms may be different: a)
The representation of binary numerical (the short and long int and floats).
The representation of characters (ASCII/ANSI vs. EBCDIC)
Point (a) is the phenomenon of "byte swapping": How is a short int value 259   0x0103
X'0103' be stored at address 4402?
The two flavours are: 4402 4403 01   03    the big endian, and 03   01
Point (b) is represented by a table of the assignment of the 256 possible values of a Byte to printable or control characters.
"A" is assigned to value (or position)
65, in EBCDIC it is 0xC1
The solution of these problems is to normalize the data: We fix: (a)
The internal representation of binary numerals are 2 complements in big endian order.
The internal representation of characters is ISO 8859 1 (also known as Latin 1).
The fixing of point (b) should be regarded as a first strike.
In some environment 8859 1 seems not to be the best choice, in a greek or russian environment 8859 5 or 8859 7 are appropriate.
Nevertheless, in a specific group (or world) of applications, that is to say all the applications which wants to interchange data with a defined protocol (via networking or diskette or something else), this internal character table must be unique.
So a possibility to define a translation table (and his inversion) should be given.
Important: You construct a SDXF chunk not for a specific addressee, but you adapt your data into a normalized format (or network format).
This adaption is not done by the programmer, it will be done by the create and extract function.
An administrator has take care of defining the correct translation tables.
Compression As stated in 2.5 there is a flag bit which declares that the following data (elementary or structured) are compressed.
This data is not further interpretable until it is decompressed.
Compression is transparently done by the SDXF functions: "create" does the compression for elementary chunks, "leave" for structured chunks, "extract"
does the decompression for elementary chunks, "enter" for structured chunks.
Transparently means that the programmer has only to tell the SDXF functions that he want compress the following chunk(s).
For choosing between different compression methods and for controlling the decompressed (original) length, there is an additional definition:
After the chunk header for a compressed chunk, a compression header is following:  >
>  'orglength' is the original (decompressed) length of the data.
'md' is the "compression method": Two methods are described here:
#  method 01 for a simple (fast but not very effective)
"Run Length 1" or "Byte Run 1" algorithm.
(More then two consecutive identical characters are replaced by the number of these characters and the character itself.)
more precisely: The compressed data consists of several sections of various length.
Every section starts with a "counter" byte, a signed "tiny" (8 bit) integer, which contains a length information.
If this byte contains the value "n", with n >  0 (and n <128), the next n 1 bytes will be taken unchanged; with n < 0
>  128), the next byte will be replicated  n 1 times; n    128 will be ignored.
Appending blanks will be cutted in general.
If these are necessary, they can be reconstructed while "extract"ing with the parameter field "filler" (see 8.2.1) set to space character.
#  method 02 for the wonderful "deflate" algorithm which comes from the "zip" people.
The authors are: Jean loup Gailly (deflate routine), Mark Adler (inflate routine), and others.
The deflate format is described in [DEFLATE].
The values for the compression method number are maintained by IANA, see chap.
As stated in 2.5 there is a flag bit which declares that the following data (elementary or structured) is encrypted.
This data is not interpretable until it is decrypted.
En/Decryption is transparently done by the SDXF functions, "create" does the encryption for elementary chunks, "leave" for structured chunks, "extract"
does the decryption for elementary chunks, "enter" for structured chunks.
(Yes it sounds very similar to chapter 5.)
More then one encryption method for a given range of applications is not very reasonable.
Some encryption algorithms work with block ciphering algorithms.
That means that the length of the data to encrypt must be rounded up to the next multiple of this block length.
This blocksize (zero means non blocking) is reported by the encryption interface routine (addressed by the option field  encryptProc, see chapter 8.5) with mode 3.
If blocking is used, at least one byte is added, the last byte of the lengthening data contains the number of added bytes minus one.
With this the decryption interface routine can calculate the real data length.
If an application (or network connect handshaking protocol) needs to negotiate an encryption method it should be used a method number maintained by IANA, see chap.
Even the en/decryption is done transparently, an encryption key (password) must be given to the SDXF functions.
Encryption is done after translating character data into, decryption is done before translation from the internal ("network ") format.
If both, encryption and compression are applied on the same chunk, compression is done first compression on good encrypted data (same strings appears as different after encryption) tends to zero compression rates.
An array is a sequence of chunks with identical chunk ID, length and data type.
At first a hint: in principle a special definition in SDXF for such an array is not really necessary: It is not forbidden that there are more than one chunk with equal chunk ID within the same structured chunk.
Therefore with a sequence of SDX next / SDX extract calls one can fill the destination array step by step.
If there are many occurrences of chunks with the same chunk ID (and a comparative small length), the overhead of the chunk packages may be significant.
Therefore the array flag is introduced.
An array chunk has only one chunk header for the complete sequence of elementary chunks.
After the chunk header for an array chunk, an array header is following: This is a short integer (big endian!)
which contains the number of the array elements (CT).
Every element has a fixed length (EL), so the chunklength (CL) is CL   EL
The data elements follows immediately after the array header.
The complete array will be constructed by SDX create, the complete array will be read by SDX extract.
The parameter fields (see 8.2.1) 'dataLength' and 'count' are used for the SDXF functions 'extract' and 'create':
Field 'dataLength' is the common length of the array elements, 'count' is the actual dimension of the array for 'create' (input).
For the 'extract' function 'count' acts both as an input and output parameter: Input : the maximum dimension output: the actual array dimension.
(If output count is greater than input count, the 'data cutted' warning will be responded and the destination array is filled up to the maximum dimension.)
Description of the SDXF functions 8.1 Introduction Following the principles of Object Oriented Programming,
not only the description of the data is necessary, but also
the functions which manipulate data the "methods".
For the programmer knowing the methods is more important than knowing the data structure, the methods has to know the exact specifications of the data and guarantees the consistence of the data while creating them.
A SDXF object is an instance of a parameter structure which acts as a programming interface.
Especially it points to an actual SDXF data chunk, and, while processing on this data, there is a pointer to the actual inner chunk which will be the focus for the next operation.
The benefit of an exact interface description is the same as using for example the standard C library functions: By using standard interfaces your code remains platform independent.
All SDXF access functions need only one parameter, a pointer to the SDXF parameter structure:
extended return code short    rc;
// return code short    level;
(00 none, 01 RL1, 02 zip/deflate) }
SDX obj,  SDX handle; Only the "public" fields of the parameter structure which acts as input and output for the SDXF functions is described here.
A given implementation may add some "private" fields to this structure.
8.2.2 Basic Functions All these functions works with a SDX handle as the only formal parameter.
Every function returns as output ec and rc as a report of success.
For the values for ec
, rc and dataType see chap.
input : container, dataType, bufferSize (for dataType   SDX NEW only) output: currChunk, dataLength (for dataType
SDX OLD only), ec, rc, the other fields of the parameter structure will be initialized.
You can access the first chunk inside this structured chunk.
none output: currChunk, chunkID, dataLength, level, dataType, ec, rc 3.
Leave the actual entered structured chunk.
none output: currChunk, chunkID, dataLength, level, dataType, ec, rc 4.
: Go to the next chunk inside a structured chunk.
none output: currChunk, chunkID, dataLength, dataType, count, ec, rc
At the end of a structured chunk SDX next returns rc
SDX RC failed and ec   SDX EC eoc (end of chunk)
The actual structured chunk is SDX leave'd automatically.
Extract data of the actual chunk.
(If actual chunk is structured, only a copy is done, elsewhere the data is converted to host format.)
input / output depends on the dataType: if dataType is structured, binary or char: input : data, maxLength, count, filler output: dataLength, count, ec, rc if dataType is numeric (float resp.)
: input : none output: value (fvalue
Go to the (next) chunk with a given chunkID.
chunkID output: currChunk, dataLength, dataType, ec, rc 7.
Creating a new chunk (at the end of the actual structured chunk).
input : chunkID, dataLength, data, (
f)value, dataType, compression, encrypt, count update: remainingSize, level output: currChunk, dataLength, ec, rc 8.
Append a complete chunk at the end of the actual structured chunk).
input : data, maxLength, currChunk update:
chunkID, chunkLength, maxLength, dataType, ec, rc 8.3 Definitions for C
the extended return code  see 8.4.4 protected: //
6 8.4.4 Values for ec:
6 // compression error SDX EC forbidden
rc is sufficiently 8.5 Special functions Besides the basic definitions
there is a global function (SDX getOptions) which returns a pointer to a global table of options.
With the help of these options you can adapt the behaviour of SDXF.
Especially you can define an alternative pair of translation tables or an alternative function which reads these tables from an external resource (p.e. from disk).
Within this table of options there is also a pointer to the function which is used for encryption / decryption: You can install your own encryption algorithm by setting this pointer.
The options pointer is received by: SDX TOptions  opt
> host // is in effect 1 or not 0 TEncryptProc
, 2  to decrypt, 3  encrypted length Byte  buffer, //
Password // returns length of en/de crypted data //
(parameter buffer and passw are ignored for mode 3) //
returns blocksize for mode 3 and len 0.
blocksize is zero for non blocking algorithms typedef int TGetTablesProc
Both params // points to translation tables of 256 Bytes.
targetlength contains maximal size as input param.
Many systems supports [UTF 8] as a character format for transferred data.
The benefit is that no fixing of a specific character set for an application is needed because the set of 'all' characters is used, represented by the 'Universal Character Set' UCS 2 [UCS], a double byte coding for characters.
SDXF does not really deal with UTF 8 by itself, there are many possibilities to interprete an UTF 8 sequence:
The application may:  reconstruct the UCS 2 sequence,  accepts only the pure ASCII character and maps
non ASCII to a special 'non printable' character.
target is pure ASCII, non ASCII is replaced in a senseful manner (French accented vowels replaced by vowels without accents, etc.).
target is a specific ANSI character set, the non ASCII chars are mapped as possible, other replaced to a 'non printable'.
But SDXF offers an interface for the 'extract' and 'create' functions:
A function pointer may be specified in the options table to maintain this possibility (see 8.5).
Default for this pointer is NULL:
No further conversions are done by SDXF, the data are copied 'as is', it is treated as a bit string as for data type 'binary'.
If this function is specified, it is used by the 'create' function with the 'toUTF8' mode, and by the 'extract' function with the ' fromUTF8' mode.
The invoking of these functions is done by SDXF transparently.
If the function returns zero (no conversion)
SDXF copies the data without conversion.
Any corruption of data in the chunk headers denounce the complete SDXF structure.
Any corruption of data in a encrypted or compressed SDXF structure makes this chunk unusable.
An integrity check after decryption or decompression should be done by the "enter" function.
While using TCP/IP (more precisely: IP) as a transmission medium we can trust on his CRC check on the transport layer.
A consistent construction of a SDXF structure is done if every "create" to a structured chunk is closed by a paired "leave".
While a structured chunk is under construction, his data type is set to zero that means: this chunk is inconsistent.
The SDX leave function sets the datatype to "structured".
While creating an elementary chunk a platform dependent transformation to a platform independent format of the data is performed at the end of construction the content of the buffer is ready to transport to another site, without any further translation.
As you see no data definition in your programming language is needed for to construct a specific SDXF structure.
The data is created dynamically by function calls.
With SDXF as a base you can define protocols for client / server applications.
These protocols may be extended in downward compatibility manner by following two rules: Rule 1:
Rule 2: The sequence of chunks should not be significant.
The compression and encryption algorithms for SDXF is not fixed, SDXF is open for various algorithms.
Therefore an agreement is necessary to interprete the compression and encryption algorithm method numbers.
(Encryption methods are not a semantic part of SDXF, but may be used for a connection protocol to negotiate the encryption method to use.)
Following two items are registered by IANA: 12.1 COMPRESSION METHODS FOR SDXF
The compressed SDXF chunk starts with a "compression header".
This header contains the compression method as an unsigned 1 Byte integer (1 255).
An unique encryption method is fixed or negotiated by handshaking.
For the latter one a number for each encryption method is necessary.
These numbers are unsigned 1 Byte integers (1 255).
These numbers are assigned by IANA and listed here:
The ASSIGNED NUMBERS document should be referred to for a current list of METHOD numbers and their corresponding protocols, see [IANA].
The new method SHOULD be a standard published as a RFC or by a established standardization organization (as OSI).
Discussion There are already some standards for Internet data exchanging,
IETF prefers ASN.1 and XML therefore.
So the reasons for establish a new data format should be discussed.
The demand of ASN.1 (see [ASN.1]) is to serve program language independent means to define data structures.
The real data format which is used to send the data is not defined by ASN.1 but usually BER or PER (or some derivates of them like CER and DER) are used in this context, see [BER] and [PER].
The idea behind ASN.1 is: On every platform on which a given application is to develop descriptions of the used data structures are available in ASN.1 notation.
Out off these notations the real language dependent definitions are generated with the help of an ASN.1 compiler.
This compiler generates also transform functions for these data structures for to pack and unpack to and from the BER (or other) format.
A direct comparison between ASN.1 and SDXF is somehow inappropriate: The data format of SDXF is related rather to BER (and relatives).
The use of ASN.1 to define data structures is no contradiction to SDXF, but: SDXF does not require a complete data structure to build the message to send, nor a complete data structure will be generated out off the received message.
The main difference lies in the concept of building and interpretation of the message, I want to name it the "static" and "dynamic" concept:
ASN.1 uses a "static" approach: The whole data structure must exists before the message can be created.
SDXF constructs and interpretes the message in a "dynamic" way, the message will be packed and unpacked step by step by SDXF functions.
The use of static structures may be appropriate for a series of applications, but for complex tasks it is often impossible to define the message as a whole.
As an example try to define an ASN.1 description for a complex structured text document which is presented in XML:
There are sections and paragraphs and text elements which may recursively consist of sections with specific text attributes.
On the one hand SDXF and XML are similar as they can handle any recursive complex data stream.
The main difference is the kind of data which are to be maintained:
XML works with pure text data (though it should be noted that the character representation is not standardized by XML).
And: a XML document with all his tags is readable by human.
Binary data as graphic is not included directly but may be referenced by an external link as in HTML.
construction are used to distinguish between these two types of data.
SDXF maintains machine readable data, it is not designed to be readable by human nor to edit SDXF data with a text editor (even more if compression and encryption is used).
With the help of the SDXF functions you have a quick and easy access to every data element.
The standard parser for a SDXF data structure follows always a simple template, the "while switch  case ID enter/extract" pattern as outlined in chap.
Because of the complete different philosophy behind XML and SDXF (and even ASN.1) a direct comparison may not be very senseful, as XML has its own right to exist next to ASN.1 (and even SDXF).
Nevertheless there is a chance to convert a XML data stream into a SDXF structure:
As a first strike, every XML tag becomes a SDXF chunk ID.
> can be transformed into an elementary (non structured) chunk with data type "character".
Tags with attributes and sequences with nested tags are transformed into structured chunks.
Because XML allows a tag sequence everywhere in a text stream, an artificially "elementary text" tag must be introduced:
If <t> is the tag for text elements, the sequence: <t>
a text <attr value 'bold'>with</attr> attributes</t> is to be "in thought" replaced by: <t><et
this is a text </et><attr
> (With "et" as the "elementary text" tag)
" attributes" ID t and ID et may be represented by the same chunk ID, only distinguished by the data type ("structured" for <t
> and "character" for <et>)
Binary data as pictures can be directly imbedded into a SDXF structure instead referencing them as an external link like in HTML.
