- title: __initial_text__
  contents:
  - '          SIFT/UFT: Sender-Initiated/Unsolicited File Transfer

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard.  Discussion and\n  \
    \ suggestions for improvement are requested.  Please refer to the\n   current\
    \ edition of the \"IAB Official Protocol Standards\" for the\n   standardization\
    \ state and status of this protocol.  Distribution of\n   this memo is unlimited.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document describes a Sender-Initiated File Transfer\
    \ (SIFT)\n   protocol, also commonly called Unsolicited File Transfer (UFT)\n\
    \   protocol.  The acronyms SIFT and UFT are synonymous throughout this\n   document.\
    \  The term \"unsolicited\" does not imply that the file is\n   unwanted, but\
    \ that the receiver did not initiate the transaction.\n   Sender-Initiated File\
    \ Transfer contrasts with other file transfer\n   methods in that the sender need\
    \ not have an account or any\n   registration on the target host system, and the\
    \ receiving user may\n   have less steps to take to retrieve the file(s) sent.\
    \  Unlike\n   traditional file transfer, UFT lends itself handily to background\
    \ or\n   deferred operation, though it may be carried out immediately, even\n\
    \   interactively.\n"
- title: 2.  Rationale
  contents:
  - "2.  Rationale\n   In certain non-IP networks, notably NJE based networks such\
    \ as\n   BITNET, it is possible to send a file to another user outside of the\n\
    \   realm of \"mail\".  The effect is that the file sent is not perceived\n  \
    \ as correspondence and not processed by a mail user agent.  This\n   convenient\
    \ service is missed in the standard TCP/IP suite.  The\n   author maintains that\
    \ traditional electronic mail is not suited to\n   non-correspondence file transfer.\
    \  There should be a means of sending\n   non-mail, analogous to the sending of\
    \ parcels rather than surface\n   mail.  Several groups and individuals have shown\
    \ an interest in this\n   type of service.\n"
- title: 3.  Specification
  contents:
  - "3.  Specification\n   We define sender-initiated file transfer for IP as a TCP\
    \ service as\n   follows: a receiver program (the server or \"daemon\") listens\
    \ on port\n   608 for inbound connections.  Client programs connect to this port\n\
    \   and send a sequence of commands followed by a stream of data.  The\n   entire\
    \ job stream may be thought of as the concatenation of two\n   files, 1) a control\
    \ file, and 2) a data file, where the control file\n   is plain text and the data\
    \ file may be any of several formats, but is\n   stored and sent as binary.  After\
    \ each command, the receiver either\n   ACKs (signals positive acknowledgement)\
    \ or NAKs (signals negative\n   acknowledgement).  The target host may reject\
    \ a file for various\n   reasons, most obvious being 1) that there is no local\
    \ user matching\n   the intended user, or 2) that there is not enough space to\
    \ hold the\n   incoming file.\n   Most UFT commands are parametric.  That is,\
    \ they don't necessarily\n   invoke an action as much as change parameters of\
    \ the one action,\n   transfer of the file(s) being sent.  This means that UFT\
    \ is suitable\n   for encapsulation in some higher-level \"envelope\", such as\
    \ mail.\n   However, the obvious prefered medium for UFT is TCP.\n   When files\
    \ arrive at the destination host, they are kept in a public\n   area, say /usr/spool/uft,\
    \ until accepted or rejected by the recipient\n   user or discarded for age by\
    \ the system.  This staging area is public\n   in the sense of shared space, not\
    \ unrestricted access.  Exactly how\n   long files may remain unprocessed and\
    \ exactly how large these\n   transient files may be is a local administrative\
    \ or implementation\n   decision.\n   But not all hosts have IP connectivity;\
    \ not all hosts will want to\n   put up yet another server; not all hosts will\
    \ be on the unrestricted\n   side of a \"fire wall\" that only passes mail.  In\
    \ such cases, UFT may\n   be transported via MIME (Multipurpose Internet Mail\
    \ Extensions) as\n   Content-Type: application/octet-stream.  UFT commands then\
    \ become\n   parameters to the Content-Type field and the data file is carried\
    \ as\n   the mail body.  While the data file is carried in raw (binary) form\n\
    \   over TCP, it is encoded in BASE64 when carried by mail.\n   UFT supports several\
    \ representation types.  The receiving host should\n   accept any file type sent.\
    \  If the representation type is not\n   meaningful to the target host system,\
    \ then it should be treated as\n   \"binary\" (image).  The data file (body) should\
    \ be processed as little\n   as possible until the target user (recipient) acts\
    \ to accept\n   (receive) it.  The commands from the client may be stored in the\
    \ form\n   of a plain-text file so that processing otherwise foreign to the\n\
    \   receiver may be off-loaded from the TCP listener.  So there are\n   actually\
    \ two files: the command sequence and the file body.\n   Job Entry capability:\n\
    \      The target \"user\" may actually be no user at all, but may be the\n  \
    \    name of some software service engine.  An example of this is the\n      job\
    \ entry queue available as a pseudo-user on many NJE networked\n      hosts.\n"
- title: '4.  Essential commands and Syntax:'
  contents:
  - "4.  Essential commands and Syntax:\n        FILE    size    sender    [auth]\n\
    \        USER    recipient\n        TYPE    type   [parm]\n        Representation\
    \ Types:\n        TYPE        A           ASCII, CR/LF (0D/0A)\n             \
    \       B           binary (image; octet stream)\n                    C      \
    \     ASCII, CC, CR/LF (ASA print)\n                    U           unformatted\
    \ (binary; image)\n                    V           var-length records (16 bit)\n\
    \                    W           wide var-len records (32 bit)\n             \
    \       X           extra-wide var-length (64 bit)\n                    I    \
    \       image (binary; octet stream)\n                    E           EBCDIC,\
    \ NL (15)\n                    F  reclen   fixed-length records (binary)\n   \
    \                 N           NETDATA\n                    M           ASCII,\
    \ mail\n        Additional Parameters:\n        NAME    filename\n        DATE\
    \    date    time    [time-zone]\n        CLASS   class\n        FORM    paper-form-code\
    \  or  print-stock-code\n        DEST    destination\n        DIST | BIN | BOX\
    \        distribution-code  or  mail-stop\n        FCB | CTAPE             forms-control-buffer\
    \  or  carriage-tape\n        UCS | CHARSET | TRAIN   print-train  or  character-set\n\
    \        LRECL           logical-record-length\n        RECFM           record-format\n\
    \        BLKSIZE         block-size\n        MODE            file access permissions\n\
    \        File disposition commands:\n        DATA  [burst-size]\n        EOF\n\
    \        ABORT\n        QUIT\n"
- title: '5.  Details:'
  contents:
  - "5.  Details:\n   Commands consist of command words, possibly followed by tokens\n\
    \   delimited by white space.  Command lines are ASCII terminated by\n   CR/LF.\
    \  White space may be composed of any mixture of blanks or tab\n   characters,\
    \ but use of ordinary blank space (ASCII 0x20) is strongly\n   recommended.\n\
    \   One connection (one socket) is used for both commands and data.\n   While\
    \ a data burst is being received, command interpretation is\n   suspended.  Command\
    \ lines are read until CR/LF; data bursts are read\n   until burst-size number\
    \ of octets are received, at which point\n   command interpretation is resumed.\
    \  After data transmission has\n   begun, the only commands valid are DATA, EOF,\
    \ ABORT and QUIT.  EOF\n   causes the server to close the file at the receiving\
    \ end and return\n   to normal command processing.  ABORT signals that the client\
    \ wishes\n   to discard a file partially transmitted.  QUIT closes any open file,\n\
    \   closes the connection, and can appear anywhere in the job.\n   For the daring,\
    \ a \"fast\" mode is available.  If the burst-size token\n   is omitted from the\
    \ DATA command, processing switches to data mode\n   and the stream is read until\
    \ the client closes the connection.  In\n   this case there is no EOF or QUIT\
    \ command sent.  NOTE: with the\n   former mode of operation, the connection may\
    \ remain open indefinitely\n   passing multiple files, while in this latter case\
    \ the connection must\n   close to terminate the transaction.\n   Acknowledgement\
    \ is by simple \"NULL ACK\".  A server accepts a command\n   by sending a single\
    \ packet back to the client that starts with a NULL\n   character, decimal 0.\
    \  Anything else may be considered negative\n   acknowledgement, and the client\
    \ should close the connection.  Any\n   characters following the NULL may be ignored.\
    \  An ACK response packet\n   may signal only one acknowledgement.\n   When a\
    \ client first connects to a server, the server immediately\n   sends a herald\
    \ of the form:\n                xxx hostname UFT 1.0 server-version xxx\n   where\
    \ \"xxx\" represents arbitrary data.  The first \"xxx\" must be a\n   single blank\
    \ delimited token.  1.0 is the protocol version.  Hostname\n   is the IP name\
    \ of the host where this server is running.  Server-\n   version is the name and\
    \ level of UFT server code on this host.\n   A US English server might send:\n\
    \                100 ricevm1.rice.edu UFT 1.0 VM/CMS-0.9.2 ready.\n   The purpose\
    \ of this herald is partly for client/server\n   synchronization, but mainly for\
    \ protocol agreement.  There may be\n   future versions of UFT beyond 1.0 which\
    \ support more features than\n   are outlined here.  The herald indicates what\
    \ level of UFT the server\n   will accept.\n   The FILE Command:\n           \
    \     FILE    size    from    [auth]\n   The size is in bytes and may be followed\
    \ by an 'M', 'K', or 'G',\n   indicating Mega, Kilo, or Giga.  Size may be an\
    \ inexact value (the\n   data file will be read until one of the above end-of-file\
    \ indications\n   is received).  The size specified is used to answer the question,\
    \ \"is\n   there room for it?\"\n   The from token is the login name of the user\
    \ sending this file.\n   The auth token is an unimplemented authentication ticket.\n\
    \   Authentication is not ensured in the protocol as described.  There\n   are\
    \ several ways that it might be added to UFT over TCP, but this\n   author will\
    \ wait for authentication developments by others to come to\n   fruition before\
    \ implementing any.  When UFT is piggy-backed on mail,\n   authentication is left\
    \ to the mail transfer system.\n   The FILE command is required in any transaction.\n\
    \   The USER Command:\n                USER    recipient\n   The recipient is\
    \ a valid local user or service name.\n   The USER command is required in any\
    \ transaction.  Without it, the\n   destination of the file is unknown.\n   The\
    \ TYPE Command:\n                TYPE    type   [parm]\n   Some representation\
    \ types need additional specification.  As an\n   example, the type \"F\" (fixed\
    \ length, record oriented) obviously needs\n   more qualification.  How long are\
    \ these fixed length records?  A\n   record length in ASCII decimal should follow\
    \ the \"F\" resulting in a\n   command like \"TYPE F 80\".\n   UFT types V, W,\
    \ X use a tape model for file transfer.  Files in\n   transit consist of blocks\
    \ that vary in size based on the range of\n   sizes specifiable with 16, 32, or\
    \ 64 bits, respectively.  Whether the\n   blocking is significant to the recipient\
    \ is the decision of the\n   recipient, but if the file originally had some kind\
    \ of blocking, it\n   is preserved without additional processing.  In the stream,\
    \ the 16,\n   32, or 64-bit block length is prepended to each record in TCP/IP\n\
    \   network order.\n   Type N (NETDATA) is an IBM representation common on NJE\
    \ networks.\n   The TYPE command is required in any transaction.\n   The NAME\
    \ Command:\n                NAME    filename\n   A name should typically be associated\
    \ with the file being sent,\n   although this is not mandatory.   This is a mixed\
    \ case token\n   delimitted by white space.   If the filename contains blanks\
    \ or white\n   space, it must be quoted.   Quotation is not valid within the\n\
    \   filename. ASCII control characters (hex 00 thru 1F and 80 thru 9F)\n   are\
    \ not valid as part of the filename.  Some characters may have\n   special meaning\
    \ to the receiving operating system and their effect is\n   not guaranteed.\n\
    \   The NAME command is optional.\n   The DATE Command:\n                DATE\
    \    date    time    [time-zone]\n   The time stamp on the file as it appears\
    \ at the sending site may be\n   sent and applied to the copy at the receiving\
    \ site.  The form is US\n   mm/dd/yy and hh:mm:ss.  A time zone is optional. \
    \ If the time zone is\n   omitted, local time is assumed.  If the DATE command\
    \ is omitted, time\n   and date of arrival are assumed.\n   The DATE command is\
    \ optional.\n   The DATA Command:\n                DATA  [burst-size]\n   If no\
    \ data bursts have yet been received since the connection was\n   opened or since\
    \ an EOF or ABORT was received, the server opens a new\n   file on the receiving\
    \ end and writes this burst of data to it.  The\n   file may have already been\
    \ created by a prior DATA command.  There\n   can be any number of DATA commands;\
    \ most files will be sent using\n   many data bursts.  If burst-size is supplied,\
    \ then burst-size number\n   of octets are read and appended to the open file\
    \ on the receiving end\n   and the server returns to the command state.  If no\
    \ burst-size\n   parameter is given, then the TCP stream is read until it is closed.\n\
    \   (this is the \"fast\" mode mentioned above)\n   The DATA command must come\
    \ after FILE, USER, TYPE, and any other\n   parametric commands and must come\
    \ before any EOF or ABORT command.\n   The file need not be complete before an\
    \ ABORT can be received and\n   carried out, but the DATA command must have completed\
    \ (burst-size\n   number of octets must have been read), thus ABORT is not possible\
    \ in\n   \"fast\" mode.\n   The EOF Command:\n                EOF\n   This signals\
    \ the server that the entire file has been sent.  The\n   server then closes the\
    \ file and ensures that it is disposed of\n   appropriately, usually just placing\
    \ it where a user-level application\n   can retrieve it later.\n   The ABORT Command:\n\
    \                ABORT\n   This signals the server that the client is unable or\
    \ unwilling to\n   finish the job.  The file should be discarded and the server\
    \ should\n   return to normal command processing.\n   The QUIT Command:\n    \
    \            QUIT\n   This signals the server that all work is complete.  Any\
    \ open file\n   should be closed and delivered.  The TCP stream will be closed.\n\
    \        Other commands:\n        CLASS       class\n        FORM        paper-form-code\
    \  or  print-stock-code\n        DEST        destination\n        DIST       \
    \ distribution-code  or  mail-stop\n        FCB         forms-control-buffer \
    \ or  carriage-tape\n        CHARSET     print-train  or  character-set\n    \
    \    The above are relevant to print jobs sent to a print server.\n        LRECL\
    \       logical-record-length\n        RECFM       record-format\n        BLKSIZE\
    \     block-size\n        MODE        file access permissions\n"
- title: 6.  References
  contents:
  - "6.  References\n        NJE        --   Network Job Entry; IBM publication SC23-0070,\n\
    \                        \"Network Job Entry; Formats and Protocols\"\n      \
    \  NETDATA    --   see IBM publication aann-nnnn (SC24-5461);\n              \
    \          VM/ESA: CMS Application Development Reference\n                   \
    \     for Assembler\n        BITNET     --   \"Because It's Time\"; academic network\n\
    \                        based on NJE protocol\n        MIME       --   RFC 1341;\
    \ Multipurpose Internet Mail Extensions;\n                        Borenstein &\
    \ Freed\n        FTP        --   File Transfer Protocol; STD 9, RFC 959;\n   \
    \                     Postel & Reynolds\n        SMTP       --   STD 10, RFC 821;\
    \ Simple Mail Transfer\n                        Protocol; Postel\n        LPR\
    \        --   UNIX Programmer's Manual, LPD(8);\n                        4.2BSD\
    \ Line Printer Spooler Manual\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 8.  Author's Address
  contents:
  - "8.  Author's Address\n   Rick Troth\n   Rice University\n   Information Systems\n\
    \   Houston, Texas 77251\n   Phone: (713) 285-5148\n   Fax: (713) 527-6099\n \
    \  EMail: troth@rice.edu\n"
