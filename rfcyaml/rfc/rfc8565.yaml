- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                     E. Fokschaner
  contents:
  - "Independent Submission                                     E. Fokschaner\n  \
    \               Hypertext Jeopardy Protocol (HTJP/1.0)\n"
- title: Abstract
  contents:
  - "Abstract\n   The Hypertext Jeopardy Protocol (HTJP) inverts the request/response\n\
    \   semantics of the Hypertext Transfer Protocol (HTTP).  Using\n   conventional\
    \ HTTP, one connects to a server, asks a question, and\n   expects a correct answer.\
    \  Using HTJP, one connects to a server,\n   sends an answer, and expects a correct\
    \ question.  This document\n   specifies the semantics of HTJP.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This is a contribution to\
    \ the RFC Series, independently of any other\n   RFC stream.  The RFC Editor has\
    \ chosen to publish this document at\n   its discretion and makes no statement\
    \ about its value for\n   implementation or deployment.  Documents approved for\
    \ publication by\n   the RFC Editor are not candidates for any level of Internet\
    \ Standard;\n   see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   https://www.rfc-editor.org/info/rfc8565.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2019 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n   2.  Conventions Used in This Document . . . . . . . . . .\
    \ . . . .   3\n   3.  Comparison with HTTP  . . . . . . . . . . . . . . . . .\
    \ . . .   3\n   4.  Response and Request Semantics  . . . . . . . . . . . . .\
    \ . .   4\n     4.1.  Applicability of Postel's Robustness Principle  . . . .\
    \ .   4\n     4.2.  Identifying the Server Associated with an HTJP Response .\
    \   5\n     4.3.  Temporal Considerations . . . . . . . . . . . . . . . . .  \
    \ 5\n     4.4.  Pseudo-Valid HTJP Messages  . . . . . . . . . . . . . . .   6\n\
    \     4.5.  HTTP Responses That Are Not Requestable . . . . . . . . .   6\n  \
    \ 5.  Caches and Proxies  . . . . . . . . . . . . . . . . . . . . .   7\n   6.\
    \  IANA Considerations . . . . . . . . . . . . . . . . . . . . .   7\n   7.  Security\
    \ Considerations . . . . . . . . . . . . . . . . . . .   7\n     7.1.  Securing\
    \ HTTP against HTJP  . . . . . . . . . . . . . . .   7\n       7.1.1.  Anti-HTJP-Nonce\
    \ Header  . . . . . . . . . . . . . . .   8\n     7.2.  HTJPS . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . .   8\n   8.  References  . . . . . . . .\
    \ . . . . . . . . . . . . . . . . .   9\n     8.1.  Normative References  . .\
    \ . . . . . . . . . . . . . . . .   9\n     8.2.  Informative References  . .\
    \ . . . . . . . . . . . . . . .  10\n   Appendix A.  Hypertext Double Jeopardy\
    \ Protocol . . . . . . . . .  11\n   Acknowledgements  . . . . . . . . . . . .\
    \ . . . . . . . . . . . .  11\n   Author's Address  . . . . . . . . . . . . .\
    \ . . . . . . . . . . .  11\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Hypertext Jeopardy Protocol (HTJP) 1.0 is a stateless\n\
    \   application-level response/request protocol that functions as the\n   semantic\
    \ inverse of the Hypertext Transfer Protocol (HTTP) 1.1 .\n   It can roughly be\
    \ specified in relation to HTTP by the following\n   rules:\n   o  Where an HTTP\
    \ client would send an HTTP request message, an HTJP\n      client would send\
    \ an HTTP response message.\n   o  Where an HTTP server would send an HTTP response\
    \ message, an HTJP\n      server would send an HTTP request message.\n   o  The\
    \ HTTP request sent as an HTJP response should be an HTTP\n      request that\
    \ (if sent to the appropriate HTTP server) would elicit\n      the HTTP response\
    \ sent in the HTJP request.\n   HTJP is compatible with the HTTP/1.1 specification,\
    \ at least in\n   spirit, if not in letter.\n   HTJP has novel applications in\
    \ all the following areas:\n   o  Generative automated testing of HTTP implementations\
    \ and HTTP-\n      based applications.\n   o  Monitoring of HTTP-based applications\
    \ in production.\n   o  Forensic and diagnostic reconstruction of HTTP requests\
    \ from HTTP\n      response logs.\n   o  Discovery of first-party and third-party\
    \ security vulnerabilities.\n"
- title: 2.  Conventions Used in This Document
  contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be\
    \ interpreted as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when,\
    \ they appear in all\n   capitals, as shown here.\n"
- title: 3.  Comparison with HTTP
  contents:
  - "3.  Comparison with HTTP\n   It is a little-known fact that HTTP/1.1 already\
    \ defines itself to be\n   its own inverse mode of operation.  Section 3.1 of\
    \ RFC 7230\n   [RFC7230], which describes the start line of the HTTP message format,\n\
    \   states:\n      In theory, a client could receive requests and a server could\n\
    \      receive responses, distinguishing them by their different start-\n    \
    \  line formats, but, in practice, servers are implemented to only\n      expect\
    \ a request [...] and clients are implemented to only expect\n      a response.\n\
    \   It is only convention that HTTP clients send HTTP requests and that\n   HTTP\
    \ servers send HTTP responses.  Therefore, HTJP is just HTTP with\n   some alternative\
    \ conventions.  It is not a distinct protocol.\n   Furthermore, since all messages\
    \ in HTJP are indistinguishable from\n   HTTP messages, an HTJP peer would have\
    \ no way of identifying itself\n   explicitly as using HTJP rather than HTTP.\n\
    \   Therefore, we describe HTJP as a \"pseudo-protocol\" in order to\n   distinguish\
    \ clients, servers, and conversations that are using the\n   HTTP conventions\
    \ laid out in this document from those that use\n   conventions that are more\
    \ commonly associated with HTTP.\n"
- title: 4.  Response and Request Semantics
  contents:
  - "4.  Response and Request Semantics\n   An HTJP request MUST be an HTTP response\
    \ message.  An HTJP response\n   message MUST be an HTTP request message that,\
    \ if issued to the\n   appropriate HTTP server, would elicit the HTTP response\
    \ specified by\n   the HTJP request being replied to.\n   As described in Section\
    \ 3, HTJP is unconventional but valid HTTP, and\n   so the entirety of the HTTP\
    \ specification (as defined in [RFC7230],\n   [RFC7231], [RFC7232], [RFC7233],\
    \ [RFC7234], and [RFC7235]) MUST be\n   respected when doing so is consistent\
    \ with HTJP's unique semantics.\n   The following example illustrates a typical\
    \ message exchange for an\n   HTJP request concerning the same hypothetical server\
    \ from Section 2.1\n   of RFC 7230 [RFC7230].\n   Client request:\n     HTTP/1.1\
    \ 200 OK\n     Date: Mon, 27 Jul 2009 12:28:53 GMT\n     Server: Apache\n    \
    \ Last-Modified: Wed, 22 Jul 2009 19:15:56 GMT\n     ETag: \"34aa387-d-1568eb00\"\
    \n     Accept-Ranges: bytes\n     Content-Length: 51\n     Vary: Accept-Encoding\n\
    \     Content-Type: text/plain\n     Hello World! My payload includes a trailing\
    \ CRLF.\n   Server response:\n     GET /hello.txt HTTP/1.1\n     Host: www.example.com\n"
- title: 4.1.  Applicability of Postel's Robustness Principle
  contents:
  - "4.1.  Applicability of Postel's Robustness Principle\n   Implementations of HTJP\
    \ SHOULD respect Postel's Robustness Principle\n   [IAB-PROTOCOL-MAINTENANCE].\n\
    \   Applied to HTJP, Postel's Robustness Principle implies that, given\n   the\
    \ choice of multiple valid HTJP responses for an HTJP request, one\n   SHOULD\
    \ prefer a response that is more adherent to the HTTP standard\n   or uses fewer\
    \ HTTP features.  For example, sometimes a User-Agent\n   header has no bearing\
    \ on the HTTP response from an HTTP server.  On\n   seeing such a response in\
    \ an HTJP request, an HTJP server could\n   validly respond with a practically\
    \ unlimited number of permutations\n   on the User-Agent header value.  However,\
    \ it SHOULD prefer to respond\n   with an HTTP request that has no User-Agent\
    \ header whatsoever, in\n   keeping with Postel's Robustness Principle.\n   The\
    \ same consideration applies when encountering an HTJP request for\n   which there\
    \ are both valid and \"pseudo-valid\" (Section 4.4) HTJP\n   responses available.\n"
- title: 4.2.  Identifying the Server Associated with an HTJP Response
  contents:
  - "4.2.  Identifying the Server Associated with an HTJP Response\n   It may be of\
    \ interest to a user of HTJP to try issuing an HTJP\n   response as an HTTP request\
    \ to the appropriate server.  This brings\n   up the issue of correctly identifying\
    \ the host to which the HTJP\n   response should be sent.  Much of the time this\
    \ will be able to be\n   determined from the Host header field of the HTJP response.\
    \  The Host\n   header is required by conformant HTTP/1.1 requests.  In the case\
    \ that\n   the Host header is not present (for example, if the HTJP response is\n\
    \   an HTTP/1.0 request rather than HTTP/1.1), an HTJP response MAY use\n   the\
    \ absolute URI form in the HTTP request line, to add clarity about\n   the target\
    \ host if it would be validly accepted by the server.  This\n   specific example\
    \ is complicated by the fact that prior to HTTP/1.1 it\n   was not required that\
    \ implementations accept the absolute URI form.\n   For this reason, it is also\
    \ possible to phrase the HTJP response as\n   an HTTP request to a Forward Proxy\
    \ server, which would have accepted,\n   indeed needed, the absolute URI request\
    \ line prior to and after\n   HTTP/1.1.  As a last resort, it may be possible\
    \ to heuristically\n   derive the target host of an HTJP response from the HTJP\
    \ request; for\n   example, the HTJP request may have absolute references to other\
    \ HTTP\n   resources that seem to come from the same host.\n"
- title: 4.3.  Temporal Considerations
  contents:
  - "4.3.  Temporal Considerations\n   When an HTJP response is issued, there is no\
    \ guarantee that, by the\n   time the response is received by an HTJP client,\
    \ the HTTP server that\n   is associated with said response will still reply with\
    \ it.  Providing\n   any guarantee about \"when\" an HTTP server would reply with\
    \ said\n   response is obviously a theoretically unsolvable problem and\n   therefore\
    \ outside the scope of this HTJP specification.  It is only\n   required that\
    \ the HTJP response be correct at some point in the range\n   of the 32-bit Unix\
    \ Timestamp; see \"Seconds Since the Epoch\"\n   (Section 4.16) of Unix General\
    \ Concepts [UNIX-General-Concepts].\n   HTJP servers that are responding with\
    \ an HTTP request for a volatile\n   resource, and with high confidence in the\
    \ time range at which the\n   resource would be in the state described by the\
    \ HTJP request, MAY add\n   a Date header to the HTJP response.  This is in conformance\
    \ with the\n   ability for HTTP requests to carry a Date header; see Section 7.1.1.2\n\
    \   of [RFC7231].\n   HTJP clients can try to demand more temporal certainty by\
    \ adding a\n   Date header to their HTTP response, embedding criteria for the\
    \ time\n   of the HTTP response in the HTTP response itself.  Of course, the\n\
    \   client might still only receive that exact HTTP response if it\n   manages\
    \ to deliver the HTTP request at the precise time of the\n   previously requested\
    \ Date header, and even then it is still not\n   guaranteed due to HTTP caching\
    \ et cetera.\n"
- title: 4.4.  Pseudo-Valid HTJP Messages
  contents:
  - "4.4.  Pseudo-Valid HTJP Messages\n   In the wild, HTTP clients and servers have\
    \ been known to occasionally\n   exchange HTTP messages that are not conformant\
    \ to any HTTP\n   specification.  For this reason, we will identify a class of\
    \ messages\n   that are, on the one hand, invalid HTTP messages, yet at the same\n\
    \   time, correctly answerable HTJP requests or correct answers to an\n   HTJP\
    \ request, as \"pseudo-valid\" HTJP messages.\n   Consider, for example, an HTTP\
    \ server that erroneously reports a\n   Content-Length header field of zero when\
    \ sending an HTTP payload of\n   non-zero length.  Despite this HTTP message violating\
    \ the HTTP\n   specification, it is possible for an HTJP server to receive such\
    \ a\n   message and correctly respond to it, satisfying the HTJP semantics in\n\
    \   doing so.\n   This applies to both HTJP requests and HTJP responses.  There\
    \ may be\n   times when the only valid HTJP response is an invalid HTTP request.\n\
    \   When there are both valid and invalid HTTP requests that could\n   satisfy\
    \ the HTJP request, Postel's Robustness Principle SHOULD be\n   applied, as described\
    \ in Section 4.1.\n"
- title: 4.5.  HTTP Responses That Are Not Requestable
  contents:
  - "4.5.  HTTP Responses That Are Not Requestable\n   Given that an HTJP response\
    \ MUST be an HTTP request, and that HTTP\n   requests do not have a status field\
    \ (such as a status code), there is\n   no way for an HTJP response to signal\
    \ a failure in response to an\n   HTJP request, via a status code or otherwise.\
    \  The correct HTJP\n   response to an HTJP request when a server cannot determine\
    \ an HTTP\n   request that elicits the HTTP response is to not respond at all.\
    \  The\n   HTJP responder MAY close the connection; however, the HTJP requester\n\
    \   MUST NOT interpret the closing of the connection as a response.  This\n  \
    \ can have issues when HTJP servers are hosted behind non-HTJP-aware\n   HTTP\
    \ proxies, as the proxy may inject a 5xx HTTP response, which\n   could be misinterpreted\
    \ as an HTJP response.  See more on proxies in\n   Section 5.\n"
- title: 5.  Caches and Proxies
  contents:
  - "5.  Caches and Proxies\n   Despite being valid HTTP traffic, support for caching\
    \ and proxying of\n   HTJP traffic is unfortunately not widespread.  It is estimated\
    \ that\n   currently approximately 0.0% of all HTTP-aware intermediaries\n   gracefully\
    \ handle HTJP traffic.  For this reason, it is currently\n   RECOMMENDED that\
    \ HTJP should not be deployed behind an HTTP proxying\n   or caching layer.  Support\
    \ will likely increase proportionally to\n   HTJP's popularity in production.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   In order that implementations of this specification\
    \ can operate\n   correctly, and in accordance with [BCP90], the following new\
    \ HTTP\n   header field would need to be registered in the \"Message Headers\"\
    \n   registry maintained at\n   <https://www.iana.org/assignments/message-headers/>.\
    \  To find out the\n   details of this registration, an application should send\
    \ an HTJP\n   request to a suitable server specifying the Anti-HTJP-Nonce value\n\
    \   that the server would have supplied had the IANA registration been\n   made.\n\
    \     +-------------------+----------+---------------+---------------+\n     |\
    \ Header Field Name | Protocol | Status        | Reference     |\n     +-------------------+----------+---------------+---------------+\n\
    \     | Anti-HTJP-Nonce   | http     | informational | Section 7.1.1 |\n     +-------------------+----------+---------------+---------------+\n"
- title: 7.  Security Considerations
  contents:
  - '7.  Security Considerations

    '
- title: 7.1.  Securing HTTP against HTJP
  contents:
  - "7.1.  Securing HTTP against HTJP\n   An incomplete implementation of HTJP is\
    \ inadvisable from a security\n   perspective.  A complete implementation of HTJP\
    \ may have interesting\n   security features that are worthy of detailed examination.\
    \  Due to\n   its semantics, the issuing of a successfully authorized HTTP response\n\
    \   to an HTJP server will result in a reply containing the HTTP request\n   that\
    \ elicits said response, including any credentials, tokens,\n   cookies, or other\
    \ authorization materials that were required to\n   elicit that response.\n  \
    \ As an example:\n   Client request:\n     HTTP/1.1 200 OK\n     Date: Mon, 27\
    \ Jul 2009 12:28:53 GMT\n     Content-Length: 61\n     Content-Type: text/plain\n\
    \     Some predictable information accessed using authorization.\n   Server response:\n\
    \   (line breaks in the Authorization header are for RFC formatting)\n     GET\
    \ /information.txt HTTP/1.1\n     Host: authorised-usage-service.example.com\n\
    \     Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.\n         eyJzdWIiOiJodGpwIiwibmFtZSI6IkV2ZXJ5b25lIiwiaWF0IjowfQ.\n\
    \         JOL-kIObgTI0MzFfm1yVFFkIo1xf7DZGjY_oedRBZW0\n   Given that we cannot\
    \ prevent anyone from attempting to implement\n   HTJP, it is RECOMMENDED to consider\
    \ how HTJP impacts security when\n   using HTTP.\n   Note that it was only possible\
    \ to query for the credentialed HTTP\n   request because the response to the authorized\
    \ request was\n   predictable.  HTTP servers could mitigate this vulnerability\
    \ exposed\n   by HTJP by only serving a response that is at least as secret as\
    \ the\n   credentials themselves in response to an authorized request.\n"
- title: 7.1.1.  Anti-HTJP-Nonce Header
  contents:
  - "7.1.1.  Anti-HTJP-Nonce Header\n   A generic solution to this problem is to use\
    \ an \"Anti-HTJP-Nonce\"\n   HTTP header in HTTP responses.  The value of an \"\
    Anti-HTJP-Nonce\"\n   header SHOULD be a cryptographically secure random number\
    \ in any\n   encoding that is valid for an HTTP header value.  The length of this\n\
    \   number SHOULD be determined by the producer of the HTTP response,\n   accounting\
    \ for their method of random number generation and their\n   threat model.\n"
- title: 7.2.  HTJPS
  contents:
  - "7.2.  HTJPS\n   HTJP, being just HTTP, has most of the same security concerns\
    \ and\n   features as HTTP itself.  For example, the use of HTJP over an\n   encrypted\
    \ connection, such as TLS 1.3 [RFC8446], similar to HTTP\n   Secure (HTTPS), is\
    \ referred to as HTJP Secure (HTJPS).  However, it\n   is important to note that,\
    \ unlike with HTTPS, it is not expected that\n   the hostname you are securely\
    \ communicating with is the same hostname\n   as featured in the Host headers\
    \ or absolute URIs of the HTJP messages\n   themselves, as HTJP messages are typically\
    \ referring to other HTTP\n   hosts.  This excludes the case of a server that\
    \ supports both\n   conventional HTTP and HTJP, where it is possible to make HTJP\n\
    \   requests securely to the same host that is also the subject of the\n   HTJP\
    \ requests being made.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC7230]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n \
    \             Protocol (HTTP/1.1): Message Syntax and Routing\",\n           \
    \   RFC 7230, DOI 10.17487/RFC7230, June 2014,\n              <https://www.rfc-editor.org/info/rfc7230>.\n\
    \   [RFC7231]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n \
    \             Protocol (HTTP/1.1): Semantics and Content\", RFC 7231,\n      \
    \        DOI 10.17487/RFC7231, June 2014,\n              <https://www.rfc-editor.org/info/rfc7231>.\n\
    \   [RFC7232]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n \
    \             Protocol (HTTP/1.1): Conditional Requests\", RFC 7232,\n       \
    \       DOI 10.17487/RFC7232, June 2014,\n              <https://www.rfc-editor.org/info/rfc7232>.\n\
    \   [RFC7233]  Fielding, R., Ed., Lafon, Y., Ed., and J. Reschke, Ed.,\n     \
    \         \"Hypertext Transfer Protocol (HTTP/1.1): Range Requests\",\n      \
    \        RFC 7233, DOI 10.17487/RFC7233, June 2014,\n              <https://www.rfc-editor.org/info/rfc7233>.\n\
    \   [RFC7234]  Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,\n     \
    \         Ed., \"Hypertext Transfer Protocol (HTTP/1.1): Caching\",\n        \
    \      RFC 7234, DOI 10.17487/RFC7234, June 2014,\n              <https://www.rfc-editor.org/info/rfc7234>.\n\
    \   [RFC7235]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n \
    \             Protocol (HTTP/1.1): Authentication\", RFC 7235,\n             \
    \ DOI 10.17487/RFC7235, June 2014,\n              <https://www.rfc-editor.org/info/rfc7235>.\n\
    \   [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n     \
    \         2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n        \
    \      May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n   [UNIX-General-Concepts]\n\
    \              \"General Concepts\", Chapter 4 of \"The Open Group Base\n    \
    \          Specifications, Issue 7\", 2018 edition, IEEE\n              Std 1003.1-2017,\
    \ 2018, <http://pubs.opengroup.org/\n              onlinepubs/9699919799/basedefs/V1_chap04.html>.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [BCP90]    Klyne, G., Nottingham, M., and J.\
    \ Mogul, \"Registration\n              Procedures for Message Header Fields\"\
    , BCP 90, RFC 3864,\n              September 2004, <https://www.rfc-editor.org/info/bcp90>.\n\
    \   [IAB-PROTOCOL-MAINTENANCE]\n              Thomson, M., \"The Harmful Consequences\
    \ of the Robustness\n              Principle\", Work in Progress, draft-iab-protocol-\n\
    \              maintenance-02, March 2019.\n   [RFC8446]  Rescorla, E., \"The\
    \ Transport Layer Security (TLS) Protocol\n              Version 1.3\", RFC 8446,\
    \ DOI 10.17487/RFC8446, August 2018,\n              <https://www.rfc-editor.org/info/rfc8446>.\n"
- title: Appendix A.  Hypertext Double Jeopardy Protocol
  contents:
  - "Appendix A.  Hypertext Double Jeopardy Protocol\n   Also worth mentioning, in\
    \ case one encounters it in the wild, is the\n   Hypertext Double Jeopardy Protocol\
    \ (HTJ2P).  The Hypertext Double\n   Jeopardy Protocol 1.0 is a stateless application-level\
    \ request/\n   response protocol that functions as the inverse of the Hypertext\n\
    \   Jeopardy Protocol (HTJP) 1.0 .\n   An HTJ2P response MUST be an HTTP response\
    \ which would be issued for\n   an HTTP request delivered as the HTJ2P request.\
    \  Implementations of\n   HTJ2P have groundbreaking potential in the fields of\
    \ HTTP caching,\n   and in the implementation of HTJP.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The author thanks Alex Trebek for his distinguished contributions\
    \ to\n   culture and society.  The author thanks Peter Phillips for the\n   suggestion\
    \ of the Anti-HTJP-Nonce header.  The author also wishes to\n   thank anyone who\
    \ has ever built a tool or a technology that made\n   people ask \"Why?\".\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Edmund Fokschaner\n   Email: edfokschaner@gmail.com\n"
