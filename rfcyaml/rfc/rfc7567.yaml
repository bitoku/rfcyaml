- title: __initial_text__
  contents:
  - '         IETF Recommendations Regarding Active Queue Management

    '
- title: Abstract
  contents:
  - "Abstract\n   This memo presents recommendations to the Internet community\n \
    \  concerning measures to improve and preserve Internet performance.  It\n   presents\
    \ a strong recommendation for testing, standardization, and\n   widespread deployment\
    \ of active queue management (AQM) in network\n   devices to improve the performance\
    \ of today's Internet.  It also\n   urges a concerted effort of research, measurement,\
    \ and ultimate\n   deployment of AQM mechanisms to protect the Internet from flows\
    \ that\n   are not sufficiently responsive to congestion notification.\n   Based\
    \ on 15 years of experience and new research, this document\n   replaces the recommendations\
    \ of RFC 2309.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo documents an Internet Best Current Practice.\n\
    \   This document is a product of the Internet Engineering Task Force\n   (IETF).\
    \  It represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   BCPs is available in Section\
    \ 2 of RFC 5741.\n   Information about the current status of this document, any\
    \ errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7567.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   4\n     1.1.  Congestion Collapse . . . . . . . . . . . . . . .\
    \ . . . .   4\n     1.2.  Active Queue Management to Manage Latency . . . . .\
    \ . . .   5\n     1.3.  Document Overview . . . . . . . . . . . . . . . . . .\
    \ . .   6\n     1.4.  Changes to the Recommendations of RFC 2309  . . . . . .\
    \ .   7\n     1.5.  Requirements Language . . . . . . . . . . . . . . . . . .\
    \   7\n   2.  The Need for Active Queue Management  . . . . . . . . . . . .  \
    \ 7\n     2.1.  AQM and Multiple Queues . . . . . . . . . . . . . . . . .  11\n\
    \     2.2.  AQM and Explicit Congestion Marking (ECN) . . . . . . . .  12\n  \
    \   2.3.  AQM and Buffer Size . . . . . . . . . . . . . . . . . . .  12\n   3.\
    \  Managing Aggressive Flows . . . . . . . . . . . . . . . . . .  13\n   4.  Conclusions\
    \ and Recommendations . . . . . . . . . . . . . . .  16\n     4.1.  Operational\
    \ Deployments SHOULD Use AQM Procedures . . . .  17\n     4.2.  Signaling to the\
    \ Transport Endpoints  . . . . . . . . . .  17\n       4.2.1.  AQM and ECN . .\
    \ . . . . . . . . . . . . . . . . . . .  18\n     4.3.  AQM Algorithm Deployment\
    \ SHOULD NOT Require Operational\n           Tuning  . . . . . . . . . . . . .\
    \ . . . . . . . . . . . .  20\n     4.4.  AQM Algorithms SHOULD Respond to Measured\
    \ Congestion, Not\n           Application Profiles  . . . . . . . . . . . . .\
    \ . . . . .  21\n     4.5.  AQM Algorithms SHOULD NOT Be Dependent on Specific\n\
    \           Transport Protocol Behaviors  . . . . . . . . . . . . . .  22\n  \
    \   4.6.  Interactions with Congestion Control Algorithms . . . . .  22\n    \
    \ 4.7.  The Need for Further Research . . . . . . . . . . . . . .  23\n   5. \
    \ Security Considerations . . . . . . . . . . . . . . . . . . .  25\n   6.  Privacy\
    \ Considerations  . . . . . . . . . . . . . . . . . . .  25\n   7.  References\
    \  . . . . . . . . . . . . . . . . . . . . . . . . .  25\n     7.1.  Normative\
    \ References  . . . . . . . . . . . . . . . . . .  25\n     7.2.  Informative\
    \ References  . . . . . . . . . . . . . . . . .  26\n   Acknowledgements  . .\
    \ . . . . . . . . . . . . . . . . . . . . . .  31\n   Authors' Addresses  . .\
    \ . . . . . . . . . . . . . . . . . . . . .  31\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Internet protocol architecture is based on a connectionless\
    \ end-\n   to-end packet service using the Internet Protocol, whether IPv4\n \
    \  [RFC791] or IPv6 [RFC2460].  The advantages of its connectionless\n   design\
    \ -- flexibility and robustness -- have been amply demonstrated.\n   However,\
    \ these advantages are not without cost: careful design is\n   required to provide\
    \ good service under heavy load.  In fact, lack of\n   attention to the dynamics\
    \ of packet forwarding can result in severe\n   service degradation or \"Internet\
    \ meltdown\".  This phenomenon was\n   first observed during the early growth\
    \ phase of the Internet in the\n   mid 1980s [RFC896] [RFC970]; it is technically\
    \ called \"congestion\n   collapse\" and was a key focus of RFC 2309.\n   Although\
    \ wide-scale congestion collapse is not common in the\n   Internet, the presence\
    \ of localized congestion collapse is by no\n   means rare.  It is therefore important\
    \ to continue to avoid\n   congestion collapse.\n   Since 1998, when RFC 2309\
    \ was written, the Internet has become used\n   for a variety of traffic.  In\
    \ the current Internet, low latency is\n   extremely important for many interactive\
    \ and transaction-based\n   applications.  The same type of technology that RFC\
    \ 2309 advocated\n   for combating congestion collapse is also effective at limiting\n\
    \   delays to reduce the interaction delay (latency) experienced by\n   applications\
    \ [Bri15].  High or unpredictable latency can impact the\n   performance of the\
    \ control loops used by end-to-end protocols\n   (including congestion control\
    \ algorithms using TCP).  There is now\n   also a focus on reducing network latency\
    \ using the same technology.\n   The mechanisms described in this document may\
    \ be implemented in\n   network devices on the path between endpoints that include\
    \ routers,\n   switches, and other network middleboxes.  The methods may also\
    \ be\n   implemented in the networking stacks within endpoint devices that\n \
    \  connect to the network.\n"
- title: 1.1.  Congestion Collapse
  contents:
  - "1.1.  Congestion Collapse\n   The original fix for Internet meltdown was provided\
    \ by Van Jacobsen.\n   Beginning in 1986, Jacobsen developed the congestion avoidance\n\
    \   mechanisms [Jacobson88] that are now required for implementations of\n   the\
    \ Transport Control Protocol (TCP) [RFC793] [RFC1122].  ([RFC7414]\n   provides\
    \ a roadmap to help identify TCP-related documents.)  These\n   mechanisms operate\
    \ in Internet hosts to cause TCP connections to\n   \"back off\" during congestion.\
    \  We say that TCP flows are \"responsive\"\n   to congestion signals (i.e., packets\
    \ that are dropped or marked with\n   explicit congestion notification [RFC3168]).\
    \  It is primarily these\n   TCP congestion avoidance algorithms that prevent\
    \ the congestion\n   collapse of today's Internet.  Similar algorithms are specified\
    \ for\n   other non-TCP transports.\n   However, that is not the end of the story.\
    \  Considerable research has\n   been done on Internet dynamics since 1988, and\
    \ the Internet has\n   grown.  It has become clear that the congestion avoidance\
    \ mechanisms\n   [RFC5681], while necessary and powerful, are not sufficient to\n\
    \   provide good service in all circumstances.  Basically, there is a\n   limit\
    \ to how much control can be accomplished from the edges of the\n   network. \
    \ Some mechanisms are needed in network devices to complement\n   the endpoint\
    \ congestion avoidance mechanisms.  These mechanisms may\n   be implemented in\
    \ network devices.\n"
- title: 1.2.  Active Queue Management to Manage Latency
  contents:
  - "1.2.  Active Queue Management to Manage Latency\n   Internet latency has become\
    \ a focus of attention to increase the\n   responsiveness of Internet applications\
    \ and protocols.  One major\n   source of delay is the buildup of queues in network\
    \ devices.\n   Queueing occurs whenever the arrival rate of data at the ingress\
    \ to a\n   device exceeds the current egress rate.  Such queueing is normal in\
    \ a\n   packet-switched network and is often necessary to absorb bursts in\n \
    \  transmission and perform statistical multiplexing of traffic, but\n   excessive\
    \ queueing can lead to unwanted delay, reducing the\n   performance of some Internet\
    \ applications.\n   RFC 2309 introduced the concept of \"Active Queue Management\"\
    \ (AQM), a\n   class of technologies that, by signaling to common congestion-\n\
    \   controlled transports such as TCP, manages the size of queues that\n   build\
    \ in network buffers.  RFC 2309 also describes a specific AQM\n   algorithm, Random\
    \ Early Detection (RED), and recommends that this be\n   widely implemented and\
    \ used by default in routers.\n   With an appropriate set of parameters, RED is\
    \ an effective algorithm.\n   However, dynamically predicting this set of parameters\
    \ was found to\n   be difficult.  As a result, RED has not been enabled by default,\
    \ and\n   its present use in the Internet is limited.  Other AQM algorithms\n\
    \   have been developed since RFC 2309 was published, some of which are\n   self-tuning\
    \ within a range of applicability.  Hence, while this memo\n   continues to recommend\
    \ the deployment of AQM, it no longer recommends\n   that RED or any other specific\
    \ algorithm is used by default.  It\n   instead provides recommendations on IETF\
    \ processes for the selection\n   of appropriate algorithms, and especially that\
    \ a recommended\n   algorithm is able to automate any required tuning for common\n\
    \   deployment scenarios.\n   Deploying AQM in the network can significantly reduce\
    \ the latency\n   across an Internet path, and, since the writing of RFC 2309,\
    \ this has\n   become a key motivation for using AQM in the Internet.  In the\n\
    \   context of AQM, it is useful to distinguish between two related\n   classes\
    \ of algorithms: \"queue management\" versus \"scheduling\"\n   algorithms.  To\
    \ a rough approximation, queue management algorithms\n   manage the length of\
    \ packet queues by marking or dropping packets\n   when necessary or appropriate,\
    \ while scheduling algorithms determine\n   which packet to send next and are\
    \ used primarily to manage the\n   allocation of bandwidth among flows.  While\
    \ these two mechanisms are\n   closely related, they address different performance\
    \ issues and\n   operate on different timescales.  Both may be used in combination.\n"
- title: 1.3.  Document Overview
  contents:
  - "1.3.  Document Overview\n   The discussion in this memo applies to \"best-effort\"\
    \ traffic, which\n   is to say, traffic generated by applications that accept\
    \ the\n   occasional loss, duplication, or reordering of traffic in flight.  It\n\
    \   also applies to other traffic, such as real-time traffic that can\n   adapt\
    \ its sending rate to reduce loss and/or delay.  It is most\n   effective when\
    \ the adaption occurs on timescales of a single Round-\n   Trip Time (RTT) or\
    \ a small number of RTTs, for elastic traffic\n   [RFC1633].\n   Two performance\
    \ issues are highlighted:\n   The first issue is the need for an advanced form\
    \ of queue management\n   that we call \"Active Queue Management\", AQM.  Section\
    \ 2 summarizes\n   the benefits that active queue management can bring.  A number\
    \ of AQM\n   procedures are described in the literature, with different\n   characteristics.\
    \  This document does not recommend any of them in\n   particular, but it does\
    \ make recommendations that ideally would\n   affect the choice of procedure used\
    \ in a given implementation.\n   The second issue, discussed in Section 4 of this\
    \ memo, is the\n   potential for future congestion collapse of the Internet due\
    \ to flows\n   that are unresponsive, or not sufficiently responsive, to congestion\n\
    \   indications.  Unfortunately, while scheduling can mitigate some of\n   the\
    \ side effects of sharing a network queue with an unresponsive\n   flow, there\
    \ is currently no consensus solution to controlling the\n   congestion caused\
    \ by such aggressive flows.  Methods such as\n   congestion exposure (ConEx) [RFC6789]\
    \ offer a framework [CONEX] that\n   can update network devices to alleviate these\
    \ effects.  Significant\n   research and engineering will be required before any\
    \ solution will be\n   available.  It is imperative that work to mitigate the\
    \ impact of\n   unresponsive flows is energetically pursued to ensure acceptable\n\
    \   performance and the future stability of the Internet.\n   Section 4 concludes\
    \ the memo with a set of recommendations to the\n   Internet community on the\
    \ use of AQM and recommendations for defining\n   AQM algorithms.\n"
- title: 1.4.  Changes to the Recommendations of RFC 2309
  contents:
  - "1.4.  Changes to the Recommendations of RFC 2309\n   This memo replaces the recommendations\
    \ in [RFC2309], which resulted\n   from past discussions of end-to-end performance,\
    \ Internet congestion,\n   and RED in the End-to-End Research Group of the Internet\
    \ Research\n   Task Force (IRTF).  It results from experience with RED and other\n\
    \   algorithms, and the AQM discussion within the IETF [AQM-WG].\n   Whereas RFC\
    \ 2309 described AQM in terms of the length of a queue,\n   this memo uses AQM\
    \ to refer to any method that allows network devices\n   to control the queue\
    \ length and/or the mean time that a packet spends\n   in a queue.\n   This memo\
    \ also explicitly obsoletes the recommendation that Random\n   Early Detection\
    \ (RED) be used as the default AQM mechanism for the\n   Internet.  This is replaced\
    \ by a detailed set of recommendations for\n   selecting an appropriate AQM algorithm.\
    \  As in RFC 2309, this memo\n   illustrates the need for continued research.\
    \  It also clarifies the\n   research needed with examples appropriate at the\
    \ time that this memo\n   is published.\n"
- title: 1.5.  Requirements Language
  contents:
  - "1.5.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 2.  The Need for Active Queue Management
  contents:
  - "2.  The Need for Active Queue Management\n   Active Queue Management (AQM) is\
    \ a method that allows network devices\n   to control the queue length or the\
    \ mean time that a packet spends in\n   a queue.  Although AQM can be applied\
    \ across a range of deployment\n   environments, the recommendations in this document\
    \ are for use in the\n   general Internet.  It is expected that the principles\
    \ and guidance\n   are also applicable to a wide range of environments, but they\
    \ may\n   require tuning for specific types of links or networks (e.g., to\n \
    \  accommodate the traffic patterns found in data centers, the\n   challenges\
    \ of wireless infrastructure, or the higher delay\n   encountered on satellite\
    \ Internet links).  The remainder of this\n   section identifies the need for\
    \ AQM and the advantages of deploying\n   AQM methods.\n   The traditional technique\
    \ for managing the queue length in a network\n   device is to set a maximum length\
    \ (in terms of packets) for each\n   queue, accept packets for the queue until\
    \ the maximum length is\n   reached, then reject (drop) subsequent incoming packets\
    \ until the\n   queue decreases because a packet from the queue has been transmitted.\n\
    \   This technique is known as \"tail drop\", since the packet that arrived\n\
    \   most recently (i.e., the one on the tail of the queue) is dropped\n   when\
    \ the queue is full.  This method has served the Internet well for\n   years,\
    \ but it has four important drawbacks:\n   1.  Full Queues\n       The \"tail\
    \ drop\" discipline allows queues to maintain a full (or,\n       almost full)\
    \ status for long periods of time, since tail drop\n       signals congestion\
    \ (via a packet drop) only when the queue has\n       become full.  It is important\
    \ to reduce the steady-state queue\n       size, and this is perhaps the most\
    \ important goal for queue\n       management.\n       The naive assumption might\
    \ be that there is a simple trade-off\n       between delay and throughput, and\
    \ that the recommendation that\n       queues be maintained in a \"non-full\"\
    \ state essentially translates\n       to a recommendation that low end-to-end\
    \ delay is more important\n       than high throughput.  However, this does not\
    \ take into account\n       the critical role that packet bursts play in Internet\n\
    \       performance.  For example, even though TCP constrains the\n       congestion\
    \ window of a flow, packets often arrive at network\n       devices in bursts\
    \ [Leland94].  If the queue is full or almost\n       full, an arriving burst\
    \ will cause multiple packets to be dropped\n       from the same flow.  Bursts\
    \ of loss can result in a global\n       synchronization of flows throttling back,\
    \ followed by a sustained\n       period of lowered link utilization, reducing\
    \ overall throughput\n       [Flo94] [Zha90].\n       The goal of buffering in\
    \ the network is to absorb data bursts and\n       to transmit them during the\
    \ (hopefully) ensuing bursts of\n       silence.  This is essential to permit\
    \ transmission of bursts of\n       data.  Queues that are normally small are\
    \ preferred in network\n       devices, with sufficient queue capacity to absorb\
    \ the bursts.\n       The counterintuitive result is that maintaining queues that\
    \ are\n       normally small can result in higher throughput as well as lower\n\
    \       end-to-end delay.  In summary, queue limits should not reflect\n     \
    \  the steady-state queues we want to be maintained in the network;\n       instead,\
    \ they should reflect the size of bursts that a network\n       device needs to\
    \ absorb.\n   2.  Lock-Out\n       In some situations tail drop allows a single\
    \ connection or a few\n       flows to monopolize the queue space, thereby starving\
    \ other\n       connections, preventing them from getting room in the queue\n\
    \       [Flo92].\n   3.  Mitigating the Impact of Packet Bursts\n       A large\
    \ burst of packets can delay other packets, disrupting the\n       control loop\
    \ (e.g., the pacing of flows by the TCP ACK clock),\n       and reducing the performance\
    \ of flows that share a common\n       bottleneck.\n   4.  Control Loop Synchronization\n\
    \       Congestion control, like other end-to-end mechanisms, introduces\n   \
    \    a control loop between hosts.  Sessions that share a common\n       network\
    \ bottleneck can therefore become synchronized, introducing\n       periodic disruption\
    \ (e.g., jitter/loss).  \"Lock-out\" is often\n       also the result of synchronization\
    \ or other timing effects\n   Besides tail drop, two alternative queue management\
    \ disciplines that\n   can be applied when a queue becomes full are \"random drop\
    \ on full\" or\n   \"head drop on full\".  When a new packet arrives at a full\
    \ queue using\n   the \"random drop on full\" discipline, the network device drops\
    \ a\n   randomly selected packet from the queue (this can be an expensive\n  \
    \ operation, since it naively requires an O(N) walk through the packet\n   queue).\
    \  When a new packet arrives at a full queue using the \"head\n   drop on full\"\
    \ discipline, the network device drops the packet at the\n   front of the queue\
    \ [Lakshman96].  Both of these solve the lock-out\n   problem, but neither solves\
    \ the full-queues problem described above.\n   In general, we know how to solve\
    \ the full-queues problem for\n   \"responsive\" flows, i.e., those flows that\
    \ throttle back in response\n   to congestion notification.  In the current Internet,\
    \ dropped packets\n   provide a critical mechanism indicating congestion notification\
    \ to\n   hosts.  The solution to the full-queues problem is for network\n   devices\
    \ to drop or ECN-mark packets before a queue becomes full, so\n   that hosts can\
    \ respond to congestion before buffers overflow.  We\n   call such a proactive\
    \ approach AQM.  By dropping or ECN-marking\n   packets before buffers overflow,\
    \ AQM allows network devices to\n   control when and how many packets to drop.\n\
    \   In summary, an active queue management mechanism can provide the\n   following\
    \ advantages for responsive flows.\n   1.  Reduce number of packets dropped in\
    \ network devices\n       Packet bursts are an unavoidable aspect of packet networks\n\
    \       [Willinger95].  If all the queue space in a network device is\n      \
    \ already committed to \"steady-state\" traffic or if the buffer\n       space\
    \ is inadequate, then the network device will have no ability\n       to buffer\
    \ bursts.  By keeping the average queue size small, AQM\n       will provide greater\
    \ capacity to absorb naturally occurring\n       bursts without dropping packets.\n\
    \       Furthermore, without AQM, more packets will be dropped when a\n      \
    \ queue does overflow.  This is undesirable for several reasons.\n       First,\
    \ with a shared queue and the \"tail drop\" discipline, this\n       can result\
    \ in unnecessary global synchronization of flows,\n       resulting in lowered\
    \ average link utilization and, hence, lowered\n       network throughput.  Second,\
    \ unnecessary packet drops represent a\n       waste of network capacity on the\
    \ path before the drop point.\n       While AQM can manage queue lengths and reduce\
    \ end-to-end latency\n       even in the absence of end-to-end congestion control,\
    \ it will be\n       able to reduce packet drops only in an environment that continues\n\
    \       to be dominated by end-to-end congestion control.\n   2.  Provide a lower-delay\
    \ interactive service\n       By keeping a small average queue size, AQM will\
    \ reduce the delays\n       experienced by flows.  This is particularly important\
    \ for\n       interactive applications such as short web transfers, POP/IMAP,\n\
    \       DNS, terminal traffic (Telnet, SSH, Mosh, RDP, etc.), gaming or\n    \
    \   interactive audio-video sessions, whose subjective (and\n       objective)\
    \ performance is better when the end-to-end delay is\n       low.\n   3.  Avoid\
    \ lock-out behavior\n       AQM can prevent lock-out behavior by ensuring that\
    \ there will\n       almost always be a buffer available for an incoming packet.\
    \  For\n       the same reason, AQM can prevent a bias against low-capacity, but\n\
    \       highly bursty, flows.\n       Lock-out is undesirable because it constitutes\
    \ a gross unfairness\n       among groups of flows.  However, we stop short of\
    \ calling this\n       benefit \"increased fairness\", because general fairness\
    \ among\n       flows requires per-flow state, which is not provided by queue\n\
    \       management.  For example, in a network device using AQM with only\n  \
    \     FIFO scheduling, two TCP flows may receive very different shares\n     \
    \  of the network capacity simply because they have different RTTs\n       [Floyd91],\
    \ and a flow that does not use congestion control may\n       receive more capacity\
    \ than a flow that does.  AQM can therefore\n       be combined with a scheduling\
    \ mechanism that divides network\n       traffic between multiple queues (Section\
    \ 2.1).\n   4.  Reduce the probability of control loop synchronization\n     \
    \  The probability of network control loop synchronization can be\n       reduced\
    \ if network devices introduce randomness in the AQM\n       functions that trigger\
    \ congestion avoidance at the sending host.\n"
- title: 2.1.  AQM and Multiple Queues
  contents:
  - "2.1.  AQM and Multiple Queues\n   A network device may use per-flow or per-class\
    \ queueing with a\n   scheduling algorithm to either prioritize certain applications\
    \ or\n   classes of traffic, limit the rate of transmission, or provide\n   isolation\
    \ between different traffic flows within a common class.  For\n   example, a router\
    \ may maintain per-flow state to achieve general\n   fairness by a per-flow scheduling\
    \ algorithm such as various forms of\n   Fair Queueing (FQ) [Dem90] [Sut99], including\
    \ Weighted Fair Queueing\n   (WFQ), Stochastic Fairness Queueing (SFQ) [McK90],\
    \ Deficit Round\n   Robin (DRR) [Shr96] [Nic12], and/or a Class-Based Queue scheduling\n\
    \   algorithm such as CBQ [Floyd95].  Hierarchical queues may also be\n   used,\
    \ e.g., as a part of a Hierarchical Token Bucket (HTB) or\n   Hierarchical Fair\
    \ Service Curve (HFSC) [Sto97].  These methods are\n   also used to realize a\
    \ range of Quality of Service (QoS) behaviors\n   designed to meet the need of\
    \ traffic classes (e.g., using the\n   integrated or differentiated service models).\n\
    \   AQM is needed even for network devices that use per-flow or per-class\n  \
    \ queueing, because scheduling algorithms by themselves do not control\n   the\
    \ overall queue size or the sizes of individual queues.  AQM\n   mechanisms might\
    \ need to control the overall queue sizes to ensure\n   that arriving bursts can\
    \ be accommodated without dropping packets.\n   AQM should also be used to control\
    \ the queue size for each individual\n   flow or class, so that they do not experience\
    \ unnecessarily high\n   delay.  Using a combination of AQM and scheduling between\
    \ multiple\n   queues has been shown to offer good results in experimental use\
    \ and\n   some types of operational use.\n   In short, scheduling algorithms and\
    \ queue management should be seen\n   as complementary, not as replacements for\
    \ each other.\n"
- title: 2.2.  AQM and Explicit Congestion Marking (ECN)
  contents:
  - "2.2.  AQM and Explicit Congestion Marking (ECN)\n   An AQM method may use Explicit\
    \ Congestion Notification (ECN)\n   [RFC3168] instead of dropping to mark packets\
    \ under mild or moderate\n   congestion.  ECN-marking can allow a network device\
    \ to signal\n   congestion at a point before a transport experiences congestion\
    \ loss\n   or additional queueing delay [ECN-Benefit].  Section 4.2.1 describes\n\
    \   some of the benefits of using ECN with AQM.\n"
- title: 2.3.  AQM and Buffer Size
  contents:
  - "2.3.  AQM and Buffer Size\n   It is important to differentiate the choice of\
    \ buffer size for a\n   queue in a switch/router or other network device, and\
    \ the\n   threshold(s) and other parameters that determine how and when an AQM\n\
    \   algorithm operates.  The optimum buffer size is a function of\n   operational\
    \ requirements and should generally be sized to be\n   sufficient to buffer the\
    \ largest normal traffic burst that is\n   expected.  This size depends on the\
    \ amount and burstiness of traffic\n   arriving at the queue and the rate at which\
    \ traffic leaves the queue.\n   One objective of AQM is to minimize the effect\
    \ of lock-out, where one\n   flow prevents other flows from effectively gaining\
    \ capacity.  This\n   need can be illustrated by a simple example of drop-tail\
    \ queueing\n   when a new TCP flow injects packets into a queue that happens to\
    \ be\n   almost full.  A TCP flow's congestion control algorithm [RFC5681]\n \
    \  increases the flow rate to maximize its effective window.  This\n   builds\
    \ a queue in the network, inducing latency in the flow and other\n   flows that\
    \ share this queue.  Once a drop-tail queue fills, there\n   will also be loss.\
    \  A new flow, sending its initial burst, has an\n   enhanced probability of filling\
    \ the remaining queue and dropping\n   packets.  As a result, the new flow can\
    \ be prevented from effectively\n   sharing the queue for a period of many RTTs.\
    \  In contrast, AQM can\n   minimize the mean queue depth and therefore reduce\
    \ the probability\n   that competing sessions can materially prevent each other\
    \ from\n   performing well.\n   AQM frees a designer from having to limit the\
    \ buffer space assigned\n   to a queue to achieve acceptable performance, allowing\
    \ allocation of\n   sufficient buffering to satisfy the needs of the particular\
    \ traffic\n   pattern.  Different types of traffic and deployment scenarios will\n\
    \   lead to different requirements.  The choice of AQM algorithm and\n   associated\
    \ parameters is therefore a function of the way in which\n   congestion is experienced\
    \ and the required reaction to achieve\n   acceptable performance.  The latter\
    \ is the primary topic of the\n   following sections.\n"
- title: 3.  Managing Aggressive Flows
  contents:
  - "3.  Managing Aggressive Flows\n   One of the keys to the success of the Internet\
    \ has been the\n   congestion avoidance mechanisms of TCP.  Because TCP \"backs\
    \ off\"\n   during congestion, a large number of TCP connections can share a\n\
    \   single, congested link in such a way that link bandwidth is shared\n   reasonably\
    \ equitably among similarly situated flows.  The equitable\n   sharing of bandwidth\
    \ among flows depends on all flows running\n   compatible congestion avoidance\
    \ algorithms, i.e., methods conformant\n   with the current TCP specification\
    \ [RFC5681].\n   In this document, a flow is known as \"TCP-friendly\" when it\
    \ has a\n   congestion response that approximates the average response expected\n\
    \   of a TCP flow.  One example method of a TCP-friendly scheme is the\n   TCP-Friendly\
    \ Rate Control algorithm [RFC5348].  In this document, the\n   term is used more\
    \ generally to describe this and other algorithms\n   that meet these goals.\n\
    \   There are a variety of types of network flow.  Some convenient\n   classes\
    \ that describe flows are: (1) TCP-friendly flows, (2)\n   unresponsive flows,\
    \ i.e., flows that do not slow down when congestion\n   occurs, and (3) flows\
    \ that are responsive but are less responsive to\n   congestion than TCP.  The\
    \ last two classes contain more aggressive\n   flows that can pose significant\
    \ threats to Internet performance.\n   1.  TCP-friendly flows\n       A TCP-friendly\
    \ flow responds to congestion notification within a\n       small number of path\
    \ RTTs, and in steady-state it uses no more\n       capacity than a conformant\
    \ TCP running under comparable\n       conditions (drop rate, RTT, packet size,\
    \ etc.).  This is\n       described in the remainder of the document.\n   2. \
    \ Non-responsive flows\n       A non-responsive flow does not adjust its rate\
    \ in response to\n       congestion notification within a small number of path\
    \ RTTs; it\n       can also use more capacity than a conformant TCP running under\n\
    \       comparable conditions.  There is a growing set of applications\n     \
    \  whose congestion avoidance algorithms are inadequate or\n       nonexistent\
    \ (i.e., a flow that does not throttle its sending rate\n       when it experiences\
    \ congestion).\n       The User Datagram Protocol (UDP) [RFC768] provides a minimal,\n\
    \       best-effort transport to applications and upper-layer protocols\n    \
    \   (both simply called \"applications\" in the remainder of this\n       document)\
    \ and does not itself provide mechanisms to prevent\n       congestion collapse\
    \ or establish a degree of fairness [RFC5405].\n       Examples that use UDP include\
    \ some streaming applications for\n       packet voice and video, and some multicast\
    \ bulk data transport.\n       Other traffic, when aggregated, may also become\
    \ unresponsive to\n       congestion notification.  If no action is taken, such\n\
    \       unresponsive flows could lead to a new congestion collapse\n       [RFC2914].\
    \  Some applications can even increase their traffic\n       volume in response\
    \ to congestion (e.g., by adding Forward Error\n       Correction when loss is\
    \ experienced), with the possibility that\n       they contribute to congestion\
    \ collapse.\n       In general, applications need to incorporate effective congestion\n\
    \       avoidance mechanisms [RFC5405].  Research continues to be needed\n   \
    \    to identify and develop ways to accomplish congestion avoidance\n       for\
    \ presently unresponsive applications.  Network devices need to\n       be able\
    \ to protect themselves against unresponsive flows, and\n       mechanisms to\
    \ accomplish this must be developed and deployed.\n       Deployment of such mechanisms\
    \ would provide an incentive for all\n       applications to become responsive\
    \ by either using a congestion-\n       controlled transport (e.g., TCP, SCTP\
    \ [RFC4960], and DCCP\n       [RFC4340]) or incorporating their own congestion\
    \ control in the\n       application [RFC5405] [RFC6679].\n   3.  Transport flows\
    \ that are less responsive than TCP\n       A second threat is posed by transport\
    \ protocol implementations\n       that are responsive to congestion, but, either\
    \ deliberately or\n       through faulty implementation, reduce the effective\
    \ window less\n       than a TCP flow would have done in response to congestion.\
    \  This\n       covers a spectrum of behaviors between (1) and (2).  If\n    \
    \   applications are not sufficiently responsive to congestion\n       signals,\
    \ they may gain an unfair share of the available network\n       capacity.\n \
    \      For example, the popularity of the Internet has caused a\n       proliferation\
    \ in the number of TCP implementations.  Some of\n       these may fail to implement\
    \ the TCP congestion avoidance\n       mechanisms correctly because of poor implementation.\
    \  Others may\n       deliberately be implemented with congestion avoidance algorithms\n\
    \       that are more aggressive in their use of capacity than other TCP\n   \
    \    implementations; this would allow a vendor to claim to have a\n       \"\
    faster TCP\".  The logical consequence of such implementations\n       would be\
    \ a spiral of increasingly aggressive TCP implementations,\n       leading back\
    \ to the point where there is effectively no\n       congestion avoidance and\
    \ the Internet is chronically congested.\n       Another example could be an RTP/UDP\
    \ video flow that uses an\n       adaptive codec, but responds incompletely to\
    \ indications of\n       congestion or responds over an excessively long time\
    \ period.\n       Such flows are unlikely to be responsive to congestion signals\
    \ in\n       a time frame comparable to a small number of end-to-end\n       transmission\
    \ delays.  However, over a longer timescale, perhaps\n       seconds in duration,\
    \ they could moderate their speed, or increase\n       their speed if they determine\
    \ capacity to be available.\n       Tunneled traffic aggregates carrying multiple\
    \ (short) TCP flows\n       can be more aggressive than standard bulk TCP.  Applications\n\
    \       (e.g., web browsers primarily supporting HTTP 1.1 and peer-to-\n     \
    \  peer file-sharing) have exploited this by opening multiple\n       connections\
    \ to the same endpoint.\n       Lastly, some applications (e.g., web browsers\
    \ primarily\n       supporting HTTP 1.1) open a large numbers of successive short\
    \ TCP\n       flows for a single session.  This can lead to each individual\n\
    \       flow spending the majority of time in the exponential TCP slow\n     \
    \  start phase, rather than in TCP congestion avoidance.  The\n       resulting\
    \ traffic aggregate can therefore be much less responsive\n       than a single\
    \ standard TCP flow.\n   The projected increase in the fraction of total Internet\
    \ traffic for\n   more aggressive flows in classes 2 and 3 could pose a threat\
    \ to the\n   performance of the future Internet.  There is therefore an urgent\n\
    \   need for measurements of current conditions and for further research\n   into\
    \ the ways of managing such flows.  This raises many difficult\n   issues in finding\
    \ methods with an acceptable overhead cost that can\n   identify and isolate unresponsive\
    \ flows or flows that are less\n   responsive than TCP.  Finally, there is as\
    \ yet little measurement or\n   simulation evidence available about the rate at\
    \ which these threats\n   are likely to be realized or about the expected benefit\
    \ of algorithms\n   for managing such flows.\n   Another topic requiring consideration\
    \ is the appropriate granularity\n   of a \"flow\" when considering a queue management\
    \ method.  There are a\n   few \"natural\" answers: 1) a transport (e.g., TCP\
    \ or UDP) flow (source\n   address/port, destination address/port, protocol);\
    \ 2) Differentiated\n   Services Code Point, DSCP; 3) a source/destination host\
    \ pair (IP\n   address); 4) a given source host or a given destination host, or\n\
    \   various combinations of the above; 5) a subscriber or site receiving\n   the\
    \ Internet service (enterprise or residential).\n   The source/destination host\
    \ pair gives an appropriate granularity in\n   many circumstances.  However, different\
    \ vendors/providers use\n   different granularities for defining a flow (as a\
    \ way of\n   \"distinguishing\" themselves from one another), and different\n\
    \   granularities may be chosen for different places in the network.  It\n   may\
    \ be the case that the granularity is less important than the fact\n   that a\
    \ network device needs to be able to deal with more unresponsive\n   flows at\
    \ *some* granularity.  The granularity of flows for congestion\n   management\
    \ is, at least in part, a question of policy that needs to\n   be addressed in\
    \ the wider IETF community.\n"
- title: 4.  Conclusions and Recommendations
  contents:
  - "4.  Conclusions and Recommendations\n   The IRTF, in producing [RFC2309], and\
    \ the IETF in subsequent\n   discussion, have developed a set of specific recommendations\n\
    \   regarding the implementation and operational use of AQM procedures.\n   The\
    \ recommendations provided by this document are summarized as:\n   1.  Network\
    \ devices SHOULD implement some AQM mechanism to manage\n       queue lengths,\
    \ reduce end-to-end latency, and avoid lock-out\n       phenomena within the Internet.\n\
    \   2.  Deployed AQM algorithms SHOULD support Explicit Congestion\n       Notification\
    \ (ECN) as well as loss to signal congestion to\n       endpoints.\n   3.  AQM\
    \ algorithms SHOULD NOT require tuning of initial or\n       configuration parameters\
    \ in common use cases.\n   4.  AQM algorithms SHOULD respond to measured congestion,\
    \ not\n       application profiles.\n   5.  AQM algorithms SHOULD NOT interpret\
    \ specific transport protocol\n       behaviors.\n   6.  Congestion control algorithms\
    \ for transport protocols SHOULD\n       maximize their use of available capacity\
    \ (when there is data to\n       send) without incurring undue loss or undue round-trip\
    \ delay.\n   7.  Research, engineering, and measurement efforts are needed\n \
    \      regarding the design of mechanisms to deal with flows that are\n      \
    \ unresponsive to congestion notification or are responsive, but\n       are more\
    \ aggressive than present TCP.\n   These recommendations are expressed using the\
    \ word \"SHOULD\".  This is\n   in recognition that there may be use cases that\
    \ have not been\n   envisaged in this document in which the recommendation does\
    \ not\n   apply.  Therefore, care should be taken in concluding that one's use\n\
    \   case falls in that category; during the life of the Internet, such\n   use\
    \ cases have been rarely, if ever, observed and reported.  To the\n   contrary,\
    \ available research [Choi04] says that even high-speed links\n   in network cores\
    \ that are normally very stable in depth and behavior\n   experience occasional\
    \ issues that need moderation.  The\n   recommendations are detailed in the following\
    \ sections.\n"
- title: 4.1.  Operational Deployments SHOULD Use AQM Procedures
  contents:
  - "4.1.  Operational Deployments SHOULD Use AQM Procedures\n   AQM procedures are\
    \ designed to minimize the delay and buffer\n   exhaustion induced in the network\
    \ by queues that have filled as a\n   result of host behavior.  Marking and loss\
    \ behaviors provide a signal\n   that buffers within network devices are becoming\
    \ unnecessarily full\n   and that the sender would do well to moderate its behavior.\n\
    \   The use of scheduling mechanisms, such as priority queueing, classful\n  \
    \ queueing, and fair queueing, is often effective in networks to help a\n   network\
    \ serve the needs of a range of applications.  Network\n   operators can use these\
    \ methods to manage traffic passing a choke\n   point.  This is discussed in [RFC2474]\
    \ and [RFC2475].  When\n   scheduling is used, AQM should be applied across the\
    \ classes or flows\n   as well as within each class or flow:\n   o  AQM mechanisms\
    \ need to control the overall queue sizes to ensure\n      that arriving bursts\
    \ can be accommodated without dropping packets.\n   o  AQM mechanisms need to\
    \ allow combination with other mechanisms,\n      such as scheduling, to allow\
    \ implementation of policies for\n      providing fairness between different flows.\n\
    \   o  AQM should be used to control the queue size for each individual\n    \
    \  flow or class, so that they do not experience unnecessarily high\n      delay.\n"
- title: 4.2.  Signaling to the Transport Endpoints
  contents:
  - "4.2.  Signaling to the Transport Endpoints\n   There are a number of ways a network\
    \ device may signal to the\n   endpoint that the network is becoming congested\
    \ and trigger a\n   reduction in rate.  The signaling methods include:\n   o \
    \ Delaying transport segments (packets) in flight, such as in a\n      queue.\n\
    \   o  Dropping transport segments (packets) in transit.\n   o  Marking transport\
    \ segments (packets), such as using Explicit\n      Congestion Control [RFC3168]\
    \ [RFC4301] [RFC4774] [RFC6040]\n      [RFC6679].\n   Increased network latency\
    \ is used as an implicit signal of\n   congestion.  For example, in TCP, additional\
    \ delay can affect ACK\n   clocking and has the result of reducing the rate of\
    \ transmission of\n   new data.  In the Real-time Transport Protocol (RTP), network\
    \ latency\n   impacts the RTCP-reported RTT, and increased latency can trigger\
    \ a\n   sender to adjust its rate.  Methods such as Low Extra Delay\n   Background\
    \ Transport (LEDBAT) [RFC6817] assume increased latency as a\n   primary signal\
    \ of congestion.  Appropriate use of delay-based methods\n   and the implications\
    \ of AQM presently remain an area for further\n   research.\n   It is essential\
    \ that all Internet hosts respond to loss [RFC5681]\n   [RFC5405] [RFC4960] [RFC4340].\
    \  Packet dropping by network devices\n   that are under load has two effects:\
    \ It protects the network, which\n   is the primary reason that network devices\
    \ drop packets.  The\n   detection of loss also provides a signal to a reliable\
    \ transport\n   (e.g., TCP, SCTP) that there is incipient congestion, using a\n\
    \   pragmatic but ambiguous heuristic.  Whereas, when the network\n   discards\
    \ a message in flight, the loss may imply the presence of\n   faulty equipment\
    \ or media in a path, or it may imply the presence of\n   congestion.  To be conservative,\
    \ a transport must assume it may be\n   the latter.  Applications using unreliable\
    \ transports (e.g., using\n   UDP) need to similarly react to loss [RFC5405].\n\
    \   Network devices SHOULD use an AQM algorithm to measure local\n   congestion\
    \ and to determine the packets to mark or drop so that the\n   congestion is managed.\n\
    \   In general, dropping multiple packets from the same sessions in the\n   same\
    \ RTT is ineffective and can reduce throughput.  Also, dropping or\n   marking\
    \ packets from multiple sessions simultaneously can have the\n   effect of synchronizing\
    \ them, resulting in increasing peaks and\n   troughs in the subsequent traffic\
    \ load.  Hence, AQM algorithms SHOULD\n   randomize dropping in time, to reduce\
    \ the probability that congestion\n   indications are only experienced by a small\
    \ proportion of the active\n   flows.\n   Loss due to dropping also has an effect\
    \ on the efficiency of a flow\n   and can significantly impact some classes of\
    \ application.  In\n   reliable transports, the dropped data must be subsequently\n\
    \   retransmitted.  While other applications/transports may adapt to the\n   absence\
    \ of lost data, this still implies inefficient use of available\n   capacity,\
    \ and the dropped traffic can affect other flows.  Hence,\n   congestion signaling\
    \ by loss is not entirely positive; it is a\n   necessary evil.\n"
- title: 4.2.1.  AQM and ECN
  contents:
  - "4.2.1.  AQM and ECN\n   Explicit Congestion Notification (ECN) [RFC4301] [RFC4774]\
    \ [RFC6040]\n   [RFC6679] is a network-layer function that allows a transport\
    \ to\n   receive network congestion information from a network device without\n\
    \   incurring the unintended consequences of loss.  ECN includes both\n   transport\
    \ mechanisms and functions implemented in network devices;\n   the latter rely\
    \ upon using AQM to decide when and whether to ECN-\n   mark.\n   Congestion for\
    \ ECN-capable transports is signaled by a network device\n   setting the \"Congestion\
    \ Experienced (CE)\" codepoint in the IP header.\n   This codepoint is noted by\
    \ the remote receiving endpoint and signaled\n   back to the sender using a transport\
    \ protocol mechanism, allowing the\n   sender to trigger timely congestion control.\
    \  The decision to set the\n   CE codepoint requires an AQM algorithm configured\
    \ with a threshold.\n   Non-ECN capable flows (the default) are dropped under\
    \ congestion.\n   Network devices SHOULD use an AQM algorithm that marks ECN-capable\n\
    \   traffic when making decisions about the response to congestion.\n   Network\
    \ devices need to implement this method by marking ECN-capable\n   traffic or\
    \ by dropping non-ECN-capable traffic.\n   Safe deployment of ECN requires that\
    \ network devices drop excessive\n   traffic, even when marked as originating\
    \ from an ECN-capable\n   transport.  This is a necessary safety precaution because:\n\
    \   1.  A non-conformant, broken, or malicious receiver could conceal an\n   \
    \    ECN mark and not report this to the sender;\n   2.  A non-conformant, broken,\
    \ or malicious sender could ignore a\n       reported ECN mark, as it could ignore\
    \ a loss without using ECN;\n   3.  A malfunctioning or non-conforming network\
    \ device may \"hide\" an\n       ECN mark (or fail to correctly set the ECN codepoint\
    \ at an egress\n       of a network tunnel).\n   In normal operation, such cases\
    \ should be very uncommon; however,\n   overload protection is desirable to protect\
    \ traffic from\n   misconfigured or malicious use of ECN (e.g., a denial-of-service\n\
    \   attack that generates ECN-capable traffic that is unresponsive to CE-\n  \
    \ marking).\n   When ECN is added to a scheme, the ECN support MAY define a separate\n\
    \   set of parameters from those used for controlling packet drop.  The\n   AQM\
    \ algorithm SHOULD still auto-tune these ECN-specific parameters.\n   These parameters\
    \ SHOULD also be manually configurable.\n   Network devices SHOULD use an algorithm\
    \ to drop excessive traffic\n   (e.g., at some level above the threshold for CE-marking),\
    \ even when\n   the packets are marked as originating from an ECN-capable transport.\n"
- title: 4.3.  AQM Algorithm Deployment SHOULD NOT Require Operational Tuning
  contents:
  - "4.3.  AQM Algorithm Deployment SHOULD NOT Require Operational Tuning\n   A number\
    \ of AQM algorithms have been proposed.  Many require some\n   form of tuning\
    \ or setting of parameters for initial network\n   conditions.  This can make\
    \ these algorithms difficult to use in\n   operational networks.\n   AQM algorithms\
    \ need to consider both \"initial conditions\" and\n   \"operational conditions\"\
    .  The former includes values that exist\n   before any experience is gathered\
    \ about the use of the algorithm,\n   such as the configured speed of interface,\
    \ support for full-duplex\n   communication, interface MTU, and other properties\
    \ of the link.\n   Other properties include information observed from monitoring\
    \ the\n   size of the queue, the queueing delay experienced, rate of packet\n\
    \   discard, etc.\n   This document therefore specifies that AQM algorithms that\
    \ are\n   proposed for deployment in the Internet have the following\n   properties:\n\
    \   o  AQM algorithm deployment SHOULD NOT require tuning.  An algorithm\n   \
    \   MUST provide a default behavior that auto-tunes to a reasonable\n      performance\
    \ for typical network operational conditions.  This is\n      expected to ease\
    \ deployment and operation.  Initial conditions,\n      such as the interface\
    \ rate and MTU size or other values derived\n      from these, MAY be required\
    \ by an AQM algorithm.\n   o  AQM algorithm deployment MAY support further manual\
    \ tuning that\n      could improve performance in a specific deployed network.\n\
    \      Algorithms that lack such variables are acceptable, but, if such\n    \
    \  variables exist, they SHOULD be externalized (made visible to the\n      operator).\
    \  The specification should identify any cases in which\n      auto-tuning is\
    \ unlikely to achieve acceptable performance and give\n      guidance on the parametric\
    \ adjustments necessary.  For example,\n      the expected response of an algorithm\
    \ may need to be configured to\n      accommodate the largest expected Path RTT,\
    \ since this value cannot\n      be known at initialization.  This guidance is\
    \ expected to enable\n      the algorithm to be deployed in networks that have\
    \ specific\n      characteristics (paths with variable or larger delay, networks\n\
    \      where capacity is impacted by interactions with lower-layer\n      mechanisms,\
    \ etc).\n   o  AQM algorithm deployment MAY provide logging and alarm signals\
    \ to\n      assist in identifying if an algorithm using manual or auto-tuning\n\
    \      is functioning as expected.  (For example, this could be based on\n   \
    \   an internal consistency check between input, output, and mark/drop\n     \
    \ rates over time.)  This is expected to encourage deployment by\n      default\
    \ and allow operators to identify potential interactions\n      with other network\
    \ functions.\n   Hence, self-tuning algorithms are to be preferred.  Algorithms\n\
    \   recommended for general Internet deployment by the IETF need to be\n   designed\
    \ so that they do not require operational (especially manual)\n   configuration\
    \ or tuning.\n"
- title: 4.4.  AQM Algorithms SHOULD Respond to Measured Congestion, Not
  contents:
  - "4.4.  AQM Algorithms SHOULD Respond to Measured Congestion, Not\n      Application\
    \ Profiles\n   Not all applications transmit packets of the same size.  Although\n\
    \   applications may be characterized by particular profiles of packet\n   size,\
    \ this should not be used as the basis for AQM (see Section 4.5).\n   Other methods\
    \ exist, e.g., Differentiated Services queueing, Pre-\n   Congestion Notification\
    \ (PCN) [RFC5559], that can be used to\n   differentiate and police classes of\
    \ application.  Network devices may\n   combine AQM with these traffic classification\
    \ mechanisms and perform\n   AQM only on specific queues within a network device.\n\
    \   An AQM algorithm should not deliberately try to prejudice the size of\n  \
    \ packet that performs best (i.e., preferentially drop/mark based only\n   on\
    \ packet size).  Procedures for selecting packets to drop/mark\n   SHOULD observe\
    \ the actual or projected time that a packet is in a\n   queue (bytes at a rate\
    \ being an analog to time).  When an AQM\n   algorithm decides whether to drop\
    \ (or mark) a packet, it is\n   RECOMMENDED that the size of the particular packet\
    \ not be taken into\n   account [RFC7141].\n   Applications (or transports) generally\
    \ know the packet size that they\n   are using and can hence make their judgments\
    \ about whether to use\n   small or large packets based on the data they wish\
    \ to send and the\n   expected impact on the delay, throughput, or other performance\n\
    \   parameter.  When a transport or application responds to a dropped or\n   marked\
    \ packet, the size of the rate reduction should be proportionate\n   to the size\
    \ of the packet that was sent [RFC7141].\n   An AQM-enabled system MAY instantiate\
    \ different instances of an AQM\n   algorithm to be applied within the same traffic\
    \ class.  Traffic\n   classes may be differentiated based on an Access Control\
    \ List (ACL),\n   the packet DSCP [RFC5559], enabling use of the ECN field (i.e.,\
    \ any\n   of ECT(0), ECT(1) or CE) [RFC3168] [RFC4774], a multi-field (MF)\n \
    \  classifier that combines the values of a set of protocol fields\n   (e.g.,\
    \ IP address, transport, ports), or an equivalent codepoint at a\n   lower layer.\
    \  This recommendation goes beyond what is defined in RFC\n   3168 by allowing\
    \ that an implementation MAY use more than one\n   instance of an AQM algorithm\
    \ to handle both ECN-capable and non-ECN-\n   capable packets.\n"
- title: 4.5.  AQM Algorithms SHOULD NOT Be Dependent on Specific Transport
  contents:
  - "4.5.  AQM Algorithms SHOULD NOT Be Dependent on Specific Transport\n      Protocol\
    \ Behaviors\n   In deploying AQM, network devices need to support a range of Internet\n\
    \   traffic and SHOULD NOT make implicit assumptions about the\n   characteristics\
    \ desired by the set of transports/applications the\n   network supports.  That\
    \ is, AQM methods should be opaque to the\n   choice of transport and application.\n\
    \   AQM algorithms are often evaluated by considering TCP [RFC793] with a\n  \
    \ limited number of applications.  Although TCP is the predominant\n   transport\
    \ in the Internet today, this no longer represents a\n   sufficient selection\
    \ of traffic for verification.  There is\n   significant use of UDP [RFC768] in\
    \ voice and video services, and some\n   applications find utility in SCTP [RFC4960]\
    \ and DCCP [RFC4340].\n   Hence, AQM algorithms should demonstrate operation with\
    \ transports\n   other than TCP and need to consider a variety of applications.\
    \  When\n   selecting AQM algorithms, the use of tunnel encapsulations that may\n\
    \   carry traffic aggregates needs to be considered.\n   AQM algorithms SHOULD\
    \ NOT target or derive implicit assumptions about\n   the characteristics desired\
    \ by specific transports/applications.\n   Transports and applications need to\
    \ respond to the congestion signals\n   provided by AQM (i.e., dropping or ECN-marking)\
    \ in a timely manner\n   (within a few RTTs at the latest).\n"
- title: 4.6.  Interactions with Congestion Control Algorithms
  contents:
  - "4.6.  Interactions with Congestion Control Algorithms\n   Applications and transports\
    \ need to react to received implicit or\n   explicit signals that indicate the\
    \ presence of congestion.  This\n   section identifies issues that can impact\
    \ the design of transport\n   protocols when using paths that use AQM.\n   Transport\
    \ protocols and applications need timely signals of\n   congestion.  The time\
    \ taken to detect and respond to congestion is\n   increased when network devices\
    \ queue packets in buffers.  It can be\n   difficult to detect tail losses at\
    \ a higher layer, and this may\n   sometimes require transport timers or probe\
    \ packets to detect and\n   respond to such loss.  Loss patterns may also impact\
    \ timely\n   detection, e.g., the time may be reduced when network devices do\
    \ not\n   drop long runs of packets from the same flow.\n   A common objective\
    \ of an elastic transport congestion control\n   protocol is to allow an application\
    \ to deliver the maximum rate of\n   data without inducing excessive delays when\
    \ packets are queued in\n   buffers within the network.  To achieve this, a transport\
    \ should try\n   to operate at rate below the inflection point of the load/delay\
    \ curve\n   (the bend of what is sometimes called a \"hockey stick\" curve)\n\
    \   [Jain94].  When the congestion window allows the load to approach\n   this\
    \ bend, the end-to-end delay starts to rise -- a result of\n   congestion, as\
    \ packets probabilistically arrive at non-overlapping\n   times.  On the one hand,\
    \ a transport that operates above this point\n   can experience congestion loss\
    \ and could also trigger operator\n   activities, such as those discussed in [RFC6057].\
    \  On the other hand,\n   a flow may achieve both near-maximum throughput and\
    \ low latency when\n   it operates close to this knee point, with minimal contribution\
    \ to\n   router congestion.  Choice of an appropriate rate/congestion window\n\
    \   can therefore significantly impact the loss and delay experienced by\n   a\
    \ flow and will impact other flows that share a common network queue.\n   Some\
    \ applications may send data at a lower rate or keep less segments\n   outstanding\
    \ at any given time.  Examples include multimedia codecs\n   that stream at some\
    \ natural rate (or set of rates) or an application\n   that is naturally interactive\
    \ (e.g., some web applications,\n   interactive server-based gaming, transaction-based\
    \ protocols).  Such\n   applications may have different objectives.  They may\
    \ not wish to\n   maximize throughput, but may desire a lower loss rate or bounded\n\
    \   delay.\n   The correct operation of an AQM-enabled network device MUST NOT\
    \ rely\n   upon specific transport responses to congestion signals.\n"
- title: 4.7.  The Need for Further Research
  contents:
  - "4.7.  The Need for Further Research\n   The second recommendation of [RFC2309]\
    \ called for further research\n   into the interaction between network queues\
    \ and host applications,\n   and the means of signaling between them.  This research\
    \ has occurred,\n   and we as a community have learned a lot.  However, we are\
    \ not done.\n   We have learned that the problems of congestion, latency, and\
    \ buffer-\n   sizing have not gone away and are becoming more important to many\n\
    \   users.  A number of self-tuning AQM algorithms have been found that\n   offer\
    \ significant advantages for deployed networks.  There is also\n   renewed interest\
    \ in deploying AQM and the potential of ECN.\n   Traffic patterns can depend on\
    \ the network deployment scenario, and\n   Internet research therefore needs to\
    \ consider the implications of a\n   diverse range of application interactions.\
    \  This includes ensuring\n   that combinations of mechanisms, as well as combinations\
    \ of traffic\n   patterns, do not interact and result in either significantly\
    \ reduced\n   flow throughput or significantly increased latency.\n   At the time\
    \ of writing (in 2015), an obvious example of further\n   research is the need\
    \ to consider the many-to-one communication\n   patterns found in data centers,\
    \ known as incast [Ren12], (e.g.,\n   produced by Map/Reduce applications).  Such\
    \ analysis needs to study\n   not only each application traffic type but also\
    \ combinations of types\n   of traffic.\n   Research also needs to consider the\
    \ need to extend our taxonomy of\n   transport sessions to include not only \"\
    mice\" and \"elephants\", but\n   \"lemmings\".  Here, \"lemmings\" are flash\
    \ crowds of \"mice\" that the\n   network inadvertently tries to signal to as\
    \ if they were \"elephant\"\n   flows, resulting in head-of-line blocking in a\
    \ data center deployment\n   scenario.\n   Examples of other required research\
    \ include:\n   o  new AQM and scheduling algorithms\n   o  appropriate use of\
    \ delay-based methods and the implications of AQM\n   o  suitable algorithms for\
    \ marking ECN-capable packets that do not\n      require operational configuration\
    \ or tuning for common use\n   o  experience in the deployment of ECN alongside\
    \ AQM\n   o  tools for enabling AQM (and ECN) deployment and measuring the\n \
    \     performance\n   o  methods for mitigating the impact of non-conformant and\
    \ malicious\n      flows\n   o  implications on applications of using new network\
    \ and transport\n      methods\n   Hence, this document reiterates the call of\
    \ RFC 2309: we need\n   continuing research as applications develop.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   While security is a very important issue, it\
    \ is largely orthogonal to\n   the performance issues discussed in this memo.\n\
    \   This recommendation requires algorithms to be independent of specific\n  \
    \ transport or application behaviors.  Therefore, a network device does\n   not\
    \ require visibility or access to upper-layer protocol information\n   to implement\
    \ an AQM algorithm.  This ability to operate in an\n   application-agnostic fashion\
    \ is an example of a privacy-enhancing\n   feature.\n   Many deployed network\
    \ devices use queueing methods that allow\n   unresponsive traffic to capture\
    \ network capacity, denying access to\n   other traffic flows.  This could potentially\
    \ be used as a denial-of-\n   service attack.  This threat could be reduced in\
    \ network devices that\n   deploy AQM or some form of scheduling.  We note, however,\
    \ that a\n   denial-of-service attack that results in unresponsive traffic flows\n\
    \   may be indistinguishable from other traffic flows (e.g., tunnels\n   carrying\
    \ aggregates of short flows, high-rate isochronous\n   applications).  New methods\
    \ therefore may remain vulnerable, and this\n   document recommends that ongoing\
    \ research consider ways to mitigate\n   such attacks.\n"
- title: 6.  Privacy Considerations
  contents:
  - "6.  Privacy Considerations\n   This document, by itself, presents no new privacy\
    \ issues.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC3168]  Ramakrishnan, K., Floyd, S., and D. Black, \"The Addition\n   \
    \           of Explicit Congestion Notification (ECN) to IP\",\n             \
    \ RFC 3168, DOI 10.17487/RFC3168, September 2001,\n              <http://www.rfc-editor.org/info/rfc3168>.\n\
    \   [RFC4301]  Kent, S. and K. Seo, \"Security Architecture for the\n        \
    \      Internet Protocol\", RFC 4301, DOI 10.17487/RFC4301,\n              December\
    \ 2005, <http://www.rfc-editor.org/info/rfc4301>.\n   [RFC4774]  Floyd, S., \"\
    Specifying Alternate Semantics for the\n              Explicit Congestion Notification\
    \ (ECN) Field\", BCP 124,\n              RFC 4774, DOI 10.17487/RFC4774, November\
    \ 2006,\n              <http://www.rfc-editor.org/info/rfc4774>.\n   [RFC5405]\
    \  Eggert, L. and G. Fairhurst, \"Unicast UDP Usage Guidelines\n             \
    \ for Application Designers\", BCP 145, RFC 5405, DOI\n              10.17487/RFC5405,\
    \ November 2008,\n              <http://www.rfc-editor.org/info/rfc5405>.\n  \
    \ [RFC5681]  Allman, M., Paxson, V., and E. Blanton, \"TCP Congestion\n      \
    \        Control\", RFC 5681, DOI 10.17487/RFC5681, September 2009,\n        \
    \      <http://www.rfc-editor.org/info/rfc5681>.\n   [RFC6040]  Briscoe, B., \"\
    Tunnelling of Explicit Congestion\n              Notification\", RFC 6040, DOI\
    \ 10.17487/RFC6040, November\n              2010, <http://www.rfc-editor.org/info/rfc6040>.\n\
    \   [RFC6679]  Westerlund, M., Johansson, I., Perkins, C., O'Hanlon, P.,\n   \
    \           and K. Carlberg, \"Explicit Congestion Notification (ECN)\n      \
    \        for RTP over UDP\", RFC 6679, DOI 10.17487/RFC6679, August\n        \
    \      2012, <http://www.rfc-editor.org/info/rfc6679>.\n   [RFC7141]  Briscoe,\
    \ B. and J. Manner, \"Byte and Packet Congestion\n              Notification\"\
    , BCP 41, RFC 7141, DOI 10.17487/RFC7141,\n              February 2014, <http://www.rfc-editor.org/info/rfc7141>.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [AQM-WG]   IETF, \"Active Queue Management and\
    \ Packet Scheduling (aqm)\n              WG\", <http://datatracker.ietf.org/wg/aqm/charter/>.\n\
    \   [Bri15]    Briscoe, B., Brunstrom, A., Petlund, A., Hayes, D., Ros,\n    \
    \          D., Tsang, I., Gjessing, S., Fairhurst, G., Griwodz, C.,\n        \
    \      and M. Welzl, \"Reducing Internet Latency: A Survey of\n              Techniques\
    \ and their Merit\", IEEE Communications Surveys &\n              Tutorials, 2015.\n\
    \   [Choi04]   Choi, B., Moon, S., Zhang, Z., Papagiannaki, K., and C.\n     \
    \         Diot, \"Analysis of Point-To-Point Packet Delay In an\n            \
    \  Operational Network\", March 2004.\n   [CONEX]    Mathis, M. and B. Briscoe,\
    \ \"Congestion Exposure (ConEx)\n              Concepts, Abstract Mechanism and\
    \ Requirements\", Work in\n              Progress, draft-ietf-conex-abstract-mech-13,\
    \ October 2014.\n   [Dem90]    Demers, A., Keshav, S., and S. Shenker, \"Analysis\
    \ and\n              Simulation of a Fair Queueing Algorithm, Internetworking:\n\
    \              Research and Experience\", SIGCOMM Symposium proceedings on\n \
    \             Communications architectures and protocols, 1990.\n   [ECN-Benefit]\n\
    \              Fairhurst, G. and M. Welzl, \"The Benefits of using\n         \
    \     Explicit Congestion Notification (ECN)\", Work in Progress,\n          \
    \    draft-ietf-aqm-ecn-benefits-05, June 2015.\n   [Flo92]    Floyd, S. and V.\
    \ Jacobsen, \"On Traffic Phase Effects in\n              Packet-Switched Gateways\"\
    , 1992,\n              <http://www.icir.org/floyd/papers/phase.pdf>.\n   [Flo94]\
    \    Floyd, S. and V. Jacobsen, \"The Synchronization of\n              Periodic\
    \ Routing Messages\", 1994,\n              <http://ee.lbl.gov/papers/sync_94.pdf>.\n\
    \   [Floyd91]  Floyd, S., \"Connections with Multiple Congested Gateways\n   \
    \           in Packet-Switched Networks Part 1: One-way Traffic.\",\n        \
    \      Computer Communications Review , October 1991.\n   [Floyd95]  Floyd, S.\
    \ and V. Jacobson, \"Link-sharing and Resource\n              Management Models\
    \ for Packet Networks\", IEEE/ACM\n              Transactions on Networking, August\
    \ 1995.\n   [Jacobson88]\n              Jacobson, V., \"Congestion Avoidance and\
    \ Control\", SIGCOMM\n              Symposium proceedings on Communications architectures\
    \ and\n              protocols, August 1988.\n   [Jain94]   Jain, R., Ramakrishnan,\
    \ KK., and C. Dah-Ming, \"Congestion\n              avoidance scheme for computer\
    \ networks\", US Patent Office\n              5377327, December 1994.\n   [Lakshman96]\n\
    \              Lakshman, TV., Neidhardt, A., and T. Ott, \"The Drop From\n   \
    \           Front Strategy in TCP Over ATM and Its Interworking with\n       \
    \       Other Control Features\", IEEE Infocomm, 1996.\n   [Leland94] Leland,\
    \ W., Taqqu, M., Willinger, W., and D. Wilson, \"On\n              the Self-Similar\
    \ Nature of Ethernet Traffic (Extended\n              Version)\", IEEE/ACM Transactions\
    \ on Networking, February\n              1994.\n   [McK90]    McKenney, PE. and\
    \ G. Varghese, \"Stochastic Fairness\n              Queuing\", 1990,\n       \
    \       <http://www2.rdrop.com/~paulmck/scalability/paper/\n              sfq.2002.06.04.pdf>.\n\
    \   [Nic12]    Nichols, K. and V. Jacobson, \"Controlling Queue Delay\",\n   \
    \           Communications of the ACM, Vol. 55, Issue 7, pp. 42-50,\n        \
    \      July 2012.\n   [Ren12]    Ren, Y., Zhao, Y., and P. Liu, \"A survey on\
    \ TCP Incast in\n              data center networks\", International Journal of\n\
    \              Communication Systems, Volumes 27, Issue 8, pages 116-117,\n  \
    \            1990.\n   [RFC768]   Postel, J., \"User Datagram Protocol\", STD\
    \ 6, RFC 768,\n              DOI 10.17487/RFC0768, August 1980,\n            \
    \  <http://www.rfc-editor.org/info/rfc768>.\n   [RFC791]   Postel, J., \"Internet\
    \ Protocol\", STD 5, RFC 791,\n              DOI 10.17487/RFC0791, September 1981,\n\
    \              <http://www.rfc-editor.org/info/rfc791>.\n   [RFC793]   Postel,\
    \ J., \"Transmission Control Protocol\", STD 7,\n              RFC 793, DOI 10.17487/RFC0793,\
    \ September 1981,\n              <http://www.rfc-editor.org/info/rfc793>.\n  \
    \ [RFC896]   Nagle, J., \"Congestion Control in IP/TCP Internetworks\",\n    \
    \          RFC 896, DOI 10.17487/RFC0896, January 1984,\n              <http://www.rfc-editor.org/info/rfc896>.\n\
    \   [RFC970]   Nagle, J., \"On Packet Switches With Infinite Storage\",\n    \
    \          RFC 970, DOI 10.17487/RFC0970, December 1985,\n              <http://www.rfc-editor.org/info/rfc970>.\n\
    \   [RFC1122]  Braden, R., Ed., \"Requirements for Internet Hosts -\n        \
    \      Communication Layers\", STD 3, RFC 1122,\n              DOI 10.17487/RFC1122,\
    \ October 1989,\n              <http://www.rfc-editor.org/info/rfc1122>.\n   [RFC1633]\
    \  Braden, R., Clark, D., and S. Shenker, \"Integrated\n              Services\
    \ in the Internet Architecture: an Overview\",\n              RFC 1633, DOI 10.17487/RFC1633,\
    \ June 1994,\n              <http://www.rfc-editor.org/info/rfc1633>.\n   [RFC2309]\
    \  Braden, B., Clark, D., Crowcroft, J., Davie, B., Deering,\n              S.,\
    \ Estrin, D., Floyd, S., Jacobson, V., Minshall, G.,\n              Partridge,\
    \ C., Peterson, L., Ramakrishnan, K., Shenker,\n              S., Wroclawski,\
    \ J., and L. Zhang, \"Recommendations on\n              Queue Management and Congestion\
    \ Avoidance in the\n              Internet\", RFC 2309, DOI 10.17487/RFC2309,\
    \ April 1998,\n              <http://www.rfc-editor.org/info/rfc2309>.\n   [RFC2460]\
    \  Deering, S. and R. Hinden, \"Internet Protocol, Version 6\n              (IPv6)\
    \ Specification\", RFC 2460, DOI 10.17487/RFC2460,\n              December 1998,\
    \ <http://www.rfc-editor.org/info/rfc2460>.\n   [RFC2474]  Nichols, K., Blake,\
    \ S., Baker, F., and D. Black,\n              \"Definition of the Differentiated\
    \ Services Field (DS\n              Field) in the IPv4 and IPv6 Headers\", RFC\
    \ 2474,\n              DOI 10.17487/RFC2474, December 1998,\n              <http://www.rfc-editor.org/info/rfc2474>.\n\
    \   [RFC2475]  Blake, S., Black, D., Carlson, M., Davies, E., Wang, Z.,\n    \
    \          and W. Weiss, \"An Architecture for Differentiated\n              Services\"\
    , RFC 2475, DOI 10.17487/RFC2475, December 1998,\n              <http://www.rfc-editor.org/info/rfc2475>.\n\
    \   [RFC2914]  Floyd, S., \"Congestion Control Principles\", BCP 41,\n       \
    \       RFC 2914, DOI 10.17487/RFC2914, September 2000,\n              <http://www.rfc-editor.org/info/rfc2914>.\n\
    \   [RFC4340]  Kohler, E., Handley, M., and S. Floyd, \"Datagram\n           \
    \   Congestion Control Protocol (DCCP)\", RFC 4340,\n              DOI 10.17487/RFC4340,\
    \ March 2006,\n              <http://www.rfc-editor.org/info/rfc4340>.\n   [RFC4960]\
    \  Stewart, R., Ed., \"Stream Control Transmission Protocol\",\n             \
    \ RFC 4960, DOI 10.17487/RFC4960, September 2007,\n              <http://www.rfc-editor.org/info/rfc4960>.\n\
    \   [RFC5348]  Floyd, S., Handley, M., Padhye, J., and J. Widmer, \"TCP\n    \
    \          Friendly Rate Control (TFRC): Protocol Specification\",\n         \
    \     RFC 5348, DOI 10.17487/RFC5348, September 2008,\n              <http://www.rfc-editor.org/info/rfc5348>.\n\
    \   [RFC5559]  Eardley, P., Ed., \"Pre-Congestion Notification (PCN)\n       \
    \       Architecture\", RFC 5559, DOI 10.17487/RFC5559, June 2009,\n         \
    \     <http://www.rfc-editor.org/info/rfc5559>.\n   [RFC6057]  Bastian, C., Klieber,\
    \ T., Livingood, J., Mills, J., and R.\n              Woundy, \"Comcast's Protocol-Agnostic\
    \ Congestion Management\n              System\", RFC 6057, DOI 10.17487/RFC6057,\
    \ December 2010,\n              <http://www.rfc-editor.org/info/rfc6057>.\n  \
    \ [RFC6789]  Briscoe, B., Ed., Woundy, R., Ed., and A. Cooper, Ed.,\n        \
    \      \"Congestion Exposure (ConEx) Concepts and Use Cases\",\n             \
    \ RFC 6789, DOI 10.17487/RFC6789, December 2012,\n              <http://www.rfc-editor.org/info/rfc6789>.\n\
    \   [RFC6817]  Shalunov, S., Hazel, G., Iyengar, J., and M. Kuehlewind,\n    \
    \          \"Low Extra Delay Background Transport (LEDBAT)\", RFC 6817,\n    \
    \          DOI 10.17487/RFC6817, December 2012,\n              <http://www.rfc-editor.org/info/rfc6817>.\n\
    \   [RFC7414]  Duke, M., Braden, R., Eddy, W., Blanton, E., and A.\n         \
    \     Zimmermann, \"A Roadmap for Transmission Control Protocol\n            \
    \  (TCP) Specification Documents\", RFC 7414,\n              DOI 10.17487/RFC7414,\
    \ February 2015,\n              <http://www.rfc-editor.org/info/rfc7414>.\n  \
    \ [Shr96]    Shreedhar, M. and G. Varghese, \"Efficient Fair Queueing\n      \
    \        Using Deficit Round Robin\", IEEE/ACM Transactions on\n             \
    \ Networking, Vol. 4, No. 3, July 1996.\n   [Sto97]    Stoica, I. and H. Zhang,\
    \ \"A Hierarchical Fair Service\n              Curve algorithm for Link sharing,\
    \ real-time and priority\n              services\", ACM SIGCOMM, 1997.\n   [Sut99]\
    \    Suter, B., \"Buffer Management Schemes for Supporting TCP\n             \
    \ in Gigabit Routers with Per-flow Queueing\", IEEE Journal\n              on\
    \ Selected Areas in Communications, Vol. 17, Issue 6, pp.\n              1159-1169,\
    \ June 1999.\n   [Willinger95]\n              Willinger, W., Taqqu, M., Sherman,\
    \ R., Wilson, D., and V.\n              Jacobson, \"Self-Similarity Through High-Variability:\n\
    \              Statistical Analysis of Ethernet LAN Traffic at the Source\n  \
    \            Level\", SIGCOMM Symposium proceedings on Communications\n      \
    \        architectures and protocols, August 1995.\n   [Zha90]    Zhang, L. and\
    \ D. Clark, \"Oscillating Behavior of Network\n              Traffic: A Case Study\
    \ Simulation\", 1990,\n              <http://groups.csail.mit.edu/ana/Publications/Zhang-DDC-\n\
    \              Oscillating-Behavior-of-Network-Traffic-1990.pdf>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The original draft of this document describing best current\
    \ practice\n   was based on [RFC2309], an Informational RFC.  It was written by\
    \ the\n   End-to-End Research Group, which is to say Bob Braden, Dave Clark,\n\
    \   Jon Crowcroft, Bruce Davie, Steve Deering, Deborah Estrin, Sally\n   Floyd,\
    \ Van Jacobson, Greg Minshall, Craig Partridge, Larry Peterson,\n   KK Ramakrishnan,\
    \ Scott Shenker, John Wroclawski, and Lixia Zhang.\n   Although there are important\
    \ differences, many of the key arguments\n   in the present document remain unchanged\
    \ from those in RFC 2309.\n   The need for an updated document was agreed to in\
    \ the TSV area\n   meeting at IETF 86.  This document was reviewed on the aqm@ietf.org\n\
    \   list.  Comments were received from Colin Perkins, Richard\n   Scheffenegger,\
    \ Dave Taht, John Leslie, David Collier-Brown, and many\n   others.\n   Gorry\
    \ Fairhurst was in part supported by the European Community under\n   its Seventh\
    \ Framework Programme through the Reducing Internet\n   Transport Latency (RITE)\
    \ project (ICT-317700).\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Fred Baker (editor)\n   Cisco Systems\n   Santa Barbara,\
    \ California  93117\n   United States\n   Email: fred@cisco.com\n   Godred Fairhurst\
    \ (editor)\n   University of Aberdeen\n   School of Engineering\n   Fraser Noble\
    \ Building\n   Aberdeen, Scotland  AB24 3UE\n   United Kingdom\n   Email: gorry@erg.abdn.ac.uk\n\
    \   URI:   http://www.erg.abdn.ac.uk\n"
