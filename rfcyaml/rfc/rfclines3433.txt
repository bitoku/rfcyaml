Abstract This memo defines a portion of the Management Information Base (MIB) for use with network management protocols in the Internet community.
In particular, it describes managed objects for extending the Entity MIB (RFC 2737) to provide generalized access to information related to physical sensors, which are often found in networking equipment (such as chassis temperature, fan RPM, power supply voltage).
The Internet Standard Management Framework For a detailed overview of the documents that describe the current Internet Standard Management Framework, please refer to section 7 of RFC 3410 [RFC3410].
Managed objects are accessed via a virtual information store, termed the Management Information Base or MIB.
MIB objects are generally accessed through the Simple Network Management Protocol (SNMP).
Objects in the MIB are defined using the mechanisms defined in the Structure of Management Information (SMI).
This memo specifies a MIB module that is compliant to the SMIv2, which is described in STD 58, RFC 2578 [RFC2578], STD 58
, RFC 2579 [RFC2579] and STD 58, RFC 2580
There is a need for a standardized way of obtaining information related to the physical sensors which are commonly found in networking equipment.
Information such as the current value of the sensor, the current operational status, and the data units precision associated with the sensor, should be represented in a consistent manner for any type of sensor.
Physical sensors are represented in the Entity MIB with entPhysicalEntry and an entPhysicalClass value of 'sensor(8)'.
The information provided in the ENTITY SENSOR MIB module (defined in this document) defines a sparse augmentation of the entPhysicalTable, for entries which represent physical sensors.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "
The MIB objects defined in this document provide a sparse augmentation to the entPhysicalTable in the Entity MIB, for entries in which the associated entPhysicalClass object is equal to 'sensor(8)'.
An agent is expected to maintain an entPhySensorEntry with the same entPhysicalIndex value for each entPhysicalEntry representing a physical sensor.
Therefore, implementation of the entityPhysicalGroup is required for agents that implement the Entity Sensor MIB.
Relationship to General Thresholding Mechanisms
There are no specialized sensor value thresholding mechanisms defined in this MIB module.
Instead, it is recommended that a generalized thresholding MIB, such as the mechanisms defined by the Alarm and Events groups of the Remote Network Monitoring MIB [RFC2819], be used for this purpose.
The Entity Sensor MIB contains a single group called the entitySensorValueGroup, which allows objects to convey the current value and status of a physical sensor.
The entitySensorValueGroup contains a single table, called the entPhySensorTable, which provides a small number of read only objects: entPhySensorType This object identifies the type of data units associated with the sensor value.
This object identifies the (power of 10) scaling factor associated with the sensor value.
This object identifies the number of decimal places of precision associated with the sensor value.
This object identifies the current value of the sensor.
This object identifies the current operational status of the sensor (as it's known to the agent).
entPhySensorUnitsDisplay This object provides a textual description of the data units represented by the entPhySensorType and entPhySensorScale objects.
The object identifies the value of sysUpTime at the time the agent last updated the information in the entry.
This object is only relevant if the agent uses a polling implementation strategy, (i.e., the associated entPhySensorValueUpdateRate object is greater than zero).
This object indicates the nature of the agent implementation of the entPhySensorEntry, and contains the (possibly estimated) number of milliseconds that elapse between polling updates of the information in the associated entry.
The value zero indicates that the agent always return current data for the entry (as opposed to the data as it was at the last polling interval).
Definitions ENTITY SENSOR MIB DEFINITIONS ::
IMPORTS MODULE IDENTITY, OBJECT TYPE, Integer32, Unsigned32, mib 2 FROM SNMPv2
SMI MODULE COMPLIANCE, OBJECT GROUP FROM SNMPv2 CONF TEXTUAL CONVENTION, TimeStamp FROM SNMPv2 TC
Postal: 170 West Tasman Drive San Jose, CA USA 95134
Dan Romascanu Avaya Inc. Tel:  972 3 645 8414 Email:
Postal: Atidim technology Park, Bldg.
#3 Tel Aviv, Israel, 61131
594 2809 Email: kenyon.c.norseth@L 3com.com
Salt Lake City, Utah 84116 0850 Send comments to <entmib@ietf.org> Mailing list subscription info:
This module defines Entity MIB extensions for physical sensors.
This version of this MIB module is part of RFC 3433; see the RFC itself for full legal notices."
An object using this data type represents the Entity Sensor measurement data type associated with a physical sensor value.
The actual data units are determined by examining an object of this type together with the associated EntitySensorDataScale object.
An object of this type SHOULD be defined together with objects of type EntitySensorDataScale and EntitySensorPrecision.
Together, associated objects of these three types are used to identify the semantics of an object of type EntitySensorValue.
An object using this data type represents a data scaling factor, represented with an International System of Units (SI) prefix.
The actual data units are determined by examining an object of this type together with the associated EntitySensorDataType object.
An object of this type SHOULD be defined together with objects of type EntitySensorDataType and EntitySensorPrecision.
Together, associated objects of these three types are used to identify the semantics of an object of type EntitySensorValue.
" REFERENCE "The International System of Units (SI), National Institute of Standards and Technology, Spec.
An object using this data type represents a sensor precision range.
An object of this type SHOULD be defined together with objects of type EntitySensorDataType and EntitySensorDataScale.
Together, associated objects of these three types are used to identify the semantics of an object of type EntitySensorValue.
If an object of this type contains a value in the range 1 to 9, it represents the number of decimal places in the fractional part of an associated EntitySensorValue fixed  point number.
If an object of this type contains a value in the range  8 to  1, it represents the number of accurate digits in the associated EntitySensorValue fixed point number.
The value zero indicates the associated EntitySensorValue object is not a fixed point number.
Agent implementors must choose a value for the associated EntitySensorPrecision object so that the precision and accuracy of the associated EntitySensorValue object is correctly indicated.
The EntitySensorValue would be interpreted as 'degrees C   10'.
An object using this data type represents an Entity Sensor value.
An object of this type SHOULD be defined together with objects of type EntitySensorDataType, EntitySensorDataScale and EntitySensorPrecision.
Together, associated objects of those three types are used to identify the semantics of an object of this data type.
The semantics of an object using this data type are determined by the value of the associated EntitySensorDataType object.
The value  1000000000 indicates an underflow error.
The value  1000000000 indicates an overflow error.
The EntitySensorPrecision indicates how many fractional digits are represented in the associated EntitySensorValue object.
If the associated EntitySensorDataType object is equal to 'percentRH(9)', then an object of this type MUST contain a number ranging from 0 to 100.
If the associated EntitySensorDataType object is equal to 'rpm(10)', then an object of this type MUST contain a number ranging from  999,999,999 to  999,999,999.
If the associated EntitySensorDataType object is equal to 'truthvalue(12)', then an object of this type MUST contain either the value 'true(1)' or the value 'false(2)'.
If the associated EntitySensorDataType object is equal to 'other(1)' or unknown(2)', then an object of this type MUST contain a number ranging from  1000000000 to 1000000000."
An object using this data type represents the operational status of a physical sensor.
The value 'ok(1)' indicates that the agent can obtain the sensor value.
The value 'unavailable(2)' indicates that the agent presently cannot obtain the sensor value.
The value 'nonoperational(3)' indicates that the agent believes the sensor is broken.
The sensor could have a hard failure (disconnected wire), or a soft failure such as out  of range, jittery, or wildly fluctuating readings."
"This table contains one row per physical sensor represented by an associated row in the entPhysicalTable."
An entry in this table describes the present reading of a sensor, the measurement units and scale, and sensor operational status.
Entries are created in this table by the agent.
An entry for each physical sensor SHOULD be created at the same time as the associated entPhysicalEntry.
An entry SHOULD be destroyed if the associated entPhysicalEntry is destroyed.
"The type of data returned by the associated entPhySensorValue object.
This object SHOULD be set by the agent during entry creation, and the value SHOULD NOT change during operation."
"The exponent to apply to values returned by the associated entPhySensorValue object.
This object SHOULD be set by the agent during entry creation, and the value SHOULD NOT change during operation."
"The number of decimal places of precision in fixed point sensor values returned by the associated entPhySensorValue object.
This object SHOULD be set to '0' when the associated entPhySensorType value is not a fixed point type:
This object SHOULD be set by the agent during entry creation, and the value SHOULD NOT change during operation."
} entPhySensorValue OBJECT TYPE SYNTAX
"The most recent measurement obtained by the agent for this sensor.
To correctly interpret the value of this object, the associated entPhySensorType, entPhySensorScale, and entPhySensorPrecision objects must also be examined."
"An indication of the frequency that the agent updates the associated entPhySensorValue object, representing in milliseconds.
The value zero indicates: the sensor value is updated on demand (e.g., when polled by the agent for a get request), the sensor value is updated when the sensor value changes (
event driven), the agent does not know the update rate. "
{ entitySensorConformance 2 } entitySensorCompliance MODULE
"Describes the requirements for conformance to the Entity Sensor MIB module."
MODULE    this module MANDATORY GROUPS { entitySensorValueGroup } MODULE ENTITY
There is one managed object in this MIB that may contain sensitive information.
entPhySensorValue This object may expose the values of particular physical sensors for a device.
by itself is not a secure environment.
Even if the network itself is secure (for example by using IPSec), there is no control as to who on the secure network is allowed to access and
the objects in this MIB.
It is recommended that the implementors consider the security features as provided by the SNMPv3 framework.
Specifically, the use of the User based Security Model STD 62, RFC 3414 [RFC3414] and the View based Access Control Model STD 62, RFC 3415 [RFC3415] is recommended.
It is then a customer/user responsibility to ensure that the SNMP entity giving access to an instance of this MIB, is properly configured to give access to only the objects, and those principals (users) that have legitimate rights to indeed GET or SET
