- title: __initial_text__
  contents:
  - "                         FILE TRANSFER PROTOCOL\n            Meeting Announcement\
    \ and a New Proposed Document\n   Attached is a new proposal for a File Transfer\
    \ Protocol.  The\n   document is an extensive update to RFC 354 and, I believe,\n\
    \   incorporates solutions to most of the objections to RFC 354.\n   It now seems\
    \ appropriate to make another attempt to reach final\n   agreement on FTP.  Accordingly,\
    \ I am calling a meeting of interested\n   parties, to be held at BBN on March\
    \ 16, for discussion of this and\n   other proposals.\n   This note is directed\
    \ to the network community at large, rather than\n   specifically to the old FTP\
    \ committee, because I don't believe that\n   the FTP committee membership includes\
    \ all the individuals who have\n   contributed to the current state of FTP design.\
    \  Nevertheless, it is\n   intended that the meeting proceed from the current\
    \ state, rather than\n   bringing new members up-to-speed.  Prospective attendees\
    \ should\n   therefore be familiar with at least the following documents:\n  \
    \    RFC 354\n      RFC 385\n      RFC 414\n      RFC 418\n      RFC 438\n   Anyone\
    \ wishing to attend this meeting should contact Alex McKenzie\n   (NIC Ident aam)\
    \ at BBN, 50 Moulton Street, Cambridge, Mass. 02138.\n   My telephone number is:\n\
    \                             (617) 491-1850 ext.441\n   When there is some indication\
    \ of the number of individuals planning\n   to attend, a meeting room will be\
    \ reserved and more specific\n   information will be directed to attendees.\n\
    \                      PROPOSED FILE TRANSFER PROTOCOL\n   This document is the\
    \ outcome of a meeting held 25 January 1973 in\n   Cambridge, Massachusetts, by\
    \ the following people:\n      Abhay Bhushan (MIT - DMCG)\n      Bob Bressler\
    \ (BBN - NET)\n      Bob Clements (BBN - TENEX)\n      Alex McKenzie (BBN - NET)\n\
    \      Nancy Neigus (BBN - NET)\n      Ken Pogran (MIT - MULTICS)\n      Marc\
    \ Seriff (MIT - DMCG)\n   The basis of the document is RFC 354 with considerations\
    \ drawn from\n   RFC's 385, 414, 418, and 438 and personal communication with\
    \ network\n   participants.\n                      PROPOSED FILE TRANSFER PROTOCOL\n"
- title: INTRODUCTION
  contents:
  - "INTRODUCTION\n   The File Transfer Protocol (FTP) is a protocol for file transfer\n\
    \   between HOSTs (including terminal IMPs), on the ARPA Computer Network\n  \
    \ (ARPANET).  The primary function of FTP is to transfer files\n   efficiently\
    \ and reliably among HOSTs and to allow the convenient use\n   of remote file\
    \ storage capabilities.\n   The objectives of FTP are 1) to promote sharing of\
    \ files (computer\n   programs and/or data), 2) to encourage indirect or implicit\
    \ (via\n   programs) use of remote computers, 3) to shield a user from\n   variations\
    \ in file storage systems among HOSTs, and 4) to transfer\n   data reliably and\
    \ efficiently.  FTP, though usable directly by a user\n   at a terminal, is designed\
    \ mainly for use by programs.\n   The attempt in this specification is to satisfy\
    \ the diverse needs of\n   users of maxi-HOSTs, mini-HOSTs, TIPs, and the Datacomputer,\
    \ with a\n   simple, elegant, and easily implemented protocol design.\n   This\
    \ paper assumes knowledge of the following protocols:\n      1) The HOST-HOST\
    \ Protocol (NIC #8246)\n      2) The Initial Connection Protocol (NIC #7101)\n\
    \      3) The TELNET Protocol (NWG/RFC #318, NIC #9348)\n"
- title: II.  DISCUSSION
  contents:
  - "II.  DISCUSSION\n   In this section, the terminology and the FTP model are discussed.\n\
    \   The terms defined in this section are only those that have special\n   significance\
    \ in FTP.\n"
- title: II.A  Terminology
  contents:
  - "II.A  Terminology\n   ASCII               The USASCII character set as defined\
    \ in NIC\n                       #7104.  In FTP, ASCII characters are defined\
    \ to\n                       be the lower half of an eight bit code set (i.e.,\n\
    \                       the most significant bit is zero).\n   access controls\
    \     Access controls define users' access privileges\n                      \
    \ to the use of a system, and to the files in that\n                       system.\
    \  Access controls are necessary to prevent\n                       unauthorized\
    \ or accidental use of files.  It is\n                       the prerogative of\
    \ a server-FTP process to\n                       provide access controls.\n \
    \  byte size           The byte size specified for the transfer od data.\n   \
    \                    The data connection is opened with this byte\n          \
    \             size.  Data connection byte size is not\n                      \
    \ necessarily the byte size in which data is to be\n                       stored\
    \ in a system, and may not be related to the\n                       structure\
    \ of data.\n   data connection     A simplex connection over which data is\n \
    \                      transferred, in a specified byte size, mode and\n     \
    \                  type.  The data transferred may be a part of a\n          \
    \             file, an entire file or a number of files.  The\n              \
    \         data connection may be in either direction\n                       (server-to-user\
    \ or user-to-server).\n   data socket         The socket on which a User-FTP process\
    \ \"listens\"\n                       for a data connection.\n   EOF         \
    \        The end-of-file condition that defines the end of\n                 \
    \      a file being transferred.\n   EOR                 The end-of-record condition\
    \ that defines the end\n                       of a record being transferred.\n\
    \   error recovery      A procedure that allows a user to recover from\n     \
    \                  certain errors such as failure of either HOST\n           \
    \            system or transfer process.  In FTP, error\n                    \
    \   recovery may involve restarting a file transfer\n                       at\
    \ a given checkpoint.\n   FTP commands        A set of commands that comprise\
    \ the control\n                       information flowing from the user-FTP to\
    \ the\n                       server-FTP process.\n   file                An ordered\
    \ set of computer data (including\n                       programs) of arbitrary\
    \ length uniquely identified\n                       by a pathname.\n   mode \
    \               The mode in which data is to be transferred via\n            \
    \           the data connection.  The mode defines the data\n                \
    \       format including EOR and EOF.  The transfer modes\n                  \
    \     defined in FTP are described in Section III.C.\n   NVT                 The\
    \ Network Virtual Terminal as defined in the\n                       ARPANET TELNET\
    \ Protocol.\n   NVFS                The Network Virtual File System.  A concept\
    \ which\n                       defines a standard network file system with\n\
    \                       standard commands and pathname conventions.  FTP\n   \
    \                    only partially embraces the NVFS concept at this\n      \
    \                 time.\n   pathname            Pathname is defined to be the\
    \ character string\n                       which must be input to a file system\
    \ by a user in\n                       order to identify a file.  Pathname normally\n\
    \                       contains device and/or directory names, and file\n   \
    \                    name specification.  FTP does not yet specify a\n       \
    \                standard pathname convention.  Each user must\n             \
    \          follow the file naming conventions of the file\n                  \
    \     systems he wishes to use.\n   record              A sequential file may\
    \ be structured as a number\n                       of contiguous parts called\
    \ records.  Record\n                       structures are supported by FTP but\
    \ are not\n                       mandatory.\n   reply               A reply is\
    \ an acknowledgement (positive or\n                       negative) sent from\
    \ server to user via the TELNET\n                       connections in response\
    \ to FTP commands.  The\n                       general form of a reply is a completion\
    \ code\n                       (including error codes) followed by an ASCII text\n\
    \                       string.  The codes are for use by programs and\n     \
    \                  the text is for human users.\n   server-FTP process  A process\
    \ or set of processes which perform the\n                       function of file\
    \ transfer in cooperation with a\n                       user-FTP process.  The\
    \ server-FTP process must\n                       interpret and respond to user\
    \ commands and\n                       initiate the data connection.\n   server\
    \ site         A HOST site which has a server-FTP process.\n   server-TELNET \
    \      A TELNET process which listens on a specified\n                       socket\
    \ for an ICP initiated by a user-TELNET, and\n                       performs\
    \ in accordance with the ARPANET TELNET\n                       Protocol.\n  \
    \ TELNET connections  The full-duplex communication path between a\n         \
    \              user-TELNET and a server-TELNET.  The TELNET\n                \
    \       connections are established via the standard\n                       ARPANET\
    \ Initial Connection Protocol (ICP).\n   type                The data representation\
    \ type used for data\n                       transfer and storage.  Type implies\
    \ certain\n                       transformations between the time of data storage\n\
    \                       and data transfer.  The representation types\n       \
    \                defined in FTP are described in Section III.B.\n   user     \
    \           A process on behalf of a human being or a human\n                \
    \       being wishing to obtain file transfer service.\n   user site         \
    \  A HOST site satisfying any of the following\n                       conditions:\
    \ 1) The site where a user is located,\n                       2) a site where\
    \ a user-FTP process is located, 3)\n                       a site to which a\
    \ data connection is made by a\n                       server.  In the normal\
    \ case, the sites defined by\n                       1, 2, and 3 are the same\
    \ site, but nothing in FTP\n                       requires that this be so.\n\
    \   user-FTP process    A process or set of processes which perform the\n    \
    \                   function of file transfer in cooperation with a\n        \
    \               server-FTP process.  The user-FTP process 1)\n               \
    \        initiates the ICP (via a user-TELNET), 2)\n                       initiates\
    \ FTP commands and 3) \"listens\" on the\n                       data socket for\
    \ the data connection.  In some\n                       obvious cases (use from\
    \ TIPs and other mini-\n                       HOSTs) a user-FTP process will\
    \ be subsumed under\n                       the term \"user\".\n   user-TELNET\
    \         A TELNET process which initiates an ICP to a\n                     \
    \  specified server-TELNET socket, and performs in\n                       accordance\
    \ with the ARPANET TELNET protocol.\n"
- title: II.B  The FTP Model
  contents:
  - "II.B  The FTP Model\n   With the above definitions in mind, the following model\
    \ (shown in\n   Figure 1) may be diagramed for an FTP service.\n   In the model\
    \ described in Figure 1, the user-TELNET initiates the\n   TELNET connections.\
    \  Standard FTP commands are then generated by the\n   user and transmitted to\
    \ the server site via the TELNET connections.\n   FTP commands are in ASCII, in\
    \ accordance with NVT conventions and the\n   TELNET protocol.  Note that commands\
    \ may be initiated by the user\n   directly through the user-TELNET or via a user-FTP\
    \ process.  Standard\n   replies are sent from the server to the user in response\
    \ to the\n   commands over the TELNET connections.\n   The FTP commands specify\
    \ the parameters for the data connection (data\n   socket, byte size, transfer\
    \ mode, representation type, and format)\n   and the nature of file system operation\
    \ (store, retrieve, append,\n   delete, etc.). The user-FTP process or its designate\
    \ should \"listen\"\n   on the specified data socket, and it is the server's responsibility\n\
    \   to initiate the data connection and data transfer in accordance with\n   the\
    \ specified data connection parameters.  It should be noted that\n   the data\
    \ socket need not be in the same HOST that initiates the FTP\n   commands via\
    \ the TELNET connections, but the user or his user-FTP\n   process must ensure\
    \ a \"listen\" on the specified data socket.  A\n   practical example of such\
    \ file transfer to third HOSTs is a maxi-HOST\n   user (who may actually be a\
    \ TIP user) wishing to transmit a file to\n   or from an I/O device attached to\
    \ a TIP.  It should also be noted\n   that two data connections, one for send\
    \ and the other for receive,\n   may exist simultaneously.\n                 \
    \               TELNET\n                              Connections\n"
- title: +-----+   +-------+   +------+           +------+   +-------+   +-----+
  contents:
  - '+-----+   +-------+   +------+           +------+   +-------+   +-----+

    '
- title: '| File|<->|Server-|<->|Server|<----------|User  |<->|User-  |<->|File |'
  contents:
  - '| File|<->|Server-|<->|Server|<----------|User  |<->|User-  |<->|File |

    '
- title: '|Sys  |   |FTP    |   |TELNET|  FTP Cmds |TELNET|   |FTP    |   |Sys- |'
  contents:
  - '|Sys  |   |FTP    |   |TELNET|  FTP Cmds |TELNET|   |FTP    |   |Sys- |

    '
- title: '| -tem|   |Process|   |      |---------->|      |   |Process|   | tem |'
  contents:
  - '| -tem|   |Process|   |      |---------->|      |   |Process|   | tem |

    '
- title: +-----+   |       |   +------+FTP Replies+------+   |       |   +-----+
  contents:
  - "+-----+   |       |   +------+FTP Replies+------+   |       |   +-----+\n   \
    \       |       |                                 |       |\n          |     \
    \  |<------------------------------->|Data   |\n          |       |         Data\
    \ Connection(s)      |Socket |\n          +-------+                          \
    \       +-------+\n                                                        |\n\
    \                                                        |\n                 \
    \                                   +------+\n                               \
    \                     |      |\n                                             \
    \       | USER |\n                                                    |      |\n\
    \                                                    +------+\n   Notes:  1. \
    \ The data connection may be in either direction.\n           2. The data connection\
    \ need not exist all of the time.\n           3. The distinctions between user-FTP\
    \ and user-TELNET, and\n               between server-FTP and server-TELNET may\
    \ not be as\n               clear-cut as shown above.  For example, a user-TELNET\
    \ may\n               be directly driven by the user.\n               FIGURE 1\
    \  Model for FTP Use\n   The protocol requires that the TELNET connections be\
    \ open while data\n   transfer is in progress.  It is the responsibility of the\
    \ user to\n   close the TELNET connections when finished using the FTP service.\n\
    \   The server may abort data transfer if the TELNET connections are\n   closed.\n"
- title: III.  DATA TRANSFER FUNCTIONS
  contents:
  - "III.  DATA TRANSFER FUNCTIONS\n   Data and files are transferred only via the\
    \ data connection.  The\n   transfer of data is governed by FTP data transfer\
    \ commands received\n   on the TELNET connections.  The data transfer functions\
    \ include\n   establishing the data connection to the specified data socket in\
    \ the\n   specified HOST (using the specified byte size), transmitting and\n \
    \  receiving data in the specified representation type and transfer\n   mode,\
    \ handling EOR and EOF conditions, and error recovery (where\n   applicable).\n"
- title: III.A  Establishing Data Connection
  contents:
  - "III.A  Establishing Data Connection\n   The user site shall \"listen\" on the\
    \ specified data socket, prior to\n   sending a transfer request command.  The\
    \ FTP request command\n   determines the direction of data transfer, and the socket\
    \ number (odd\n   or even) which is to be used in establishing the data connection.\n\
    \   The server on receiving the appropriate store or retrieve request\n   shall\
    \ initiate the data connection to the specified user data socket\n   in the specified\
    \ byte size (default byte size is 8 bits), and send a\n   reply indicating that\
    \ file transfer may proceed.  Prior to this\n   reply, the server should send\
    \ a reply indicating the server socket\n   for the data connection.  The user\
    \ may use this server socket\n   information to ensure the security of his data\
    \ transfer.  The server\n   may send this reply either before or after initiating\
    \ the data\n   connection.\n   The byte size for the data connection is specified\
    \ by the BYTE\n   command.  It is not required by the protocol that servers accept\
    \ all\n   possible byte sizes.  The use of various byte sizes is for efficiency\n\
    \   in data transfer and servers may implement only those byte sizes for\n   which\
    \ their data transfer is efficient.  It is, however, required\n   that servers\
    \ implement at least the byte size of 8 bits.\n   After the data transfer is completed,\
    \ it is the server's\n   responsibility to close the data connection, except when\
    \ the user is\n   sending the data.  In stream mode the sender must close the\
    \ data\n   connection to indicate EOF, i.e., completion of the transfer.\n   Closing\
    \ the connection is a server option except under the following\n   conditions:\n\
    \   1)       The server receives an abort command from the user.\n   2)      \
    \ The socket or the byte size specification is changed by the\n            user.\n\
    \   3)       The TELNET connections are closed.\n   4)       An irrecoverable\
    \ error condition occurs.\n   It should be noted that if none of the above conditions\
    \ occur it is\n   possible to maintain two simultaneous data connections, for\
    \ send and\n   receive.\n"
- title: III.B  Data Representation and Storage
  contents:
  - "III.B  Data Representation and Storage\n   Data is transferred from a storage\
    \ device in sending HOST to a\n   storage device in receiving HOST.  Often it\
    \ is necessary to perform\n   certain transformations on the data because data\
    \ storage representa-\n   tions in the two systems are different.  For example,\
    \ NVT-ASCII has\n   different data storage representations in different systems.\
    \  PDP-10'\n   s generally store NVT-ASCII as five 7-bit ASCII characters, left-\n\
    \   justified in a 36-bit word. 360's store NVT-ASCII as 8-bit EBCDIC\n   codes.\
    \  Multics stores NVT-ASCII as four 9-bit characters in a 36-bit\n   word.  It\
    \ may be desirable to convert characters into the standard\n   NVT-ASCII representation\
    \ when transmitting text between dissimilar\n   systems.  The sending and receiving\
    \ sites would have to perform the\n   necessary transformations between the standard\
    \ representation and\n   their internal representations.\n   A different problem\
    \ in representation arises when transmitting binary\n   data (not character codes)\
    \ between HOST systems with different word\n   lengths.  It is not always clear\
    \ how the sender should send data, and\n   the receiver store it.  For example,\
    \ when transmitting 32-bit bytes\n   from a 32-bit word-length system to a 36-bit\
    \ word-length system, it\n   may be desirable (for reasons of efficiency and usefulness)\
    \ to store\n   the 32-bit bytes right-justified in a 36-bit word in the latter\
    \ sys-\n   tem.  In any case, the user should have the option of specifying data\n\
    \   representation and transformation functions.  It should be noted that\n  \
    \ FTP provides for very limited data type representations.  Transforma-\n   tions\
    \ desired beyond this limited capability should be performed by\n   the user directly\
    \ or via the use of the Data Reconfiguration (DRS,\n   RFC #138, NIC #6715). \
    \ Additional representation types may be defined\n   later if there is a demonstrable\
    \ need.\n   Data representations are handled in FTP by a user specifying a\n \
    \  representation type.  The type may also imply a transfer byte size.\n   For\
    \ example, in ASCII representation, the transfer byte size should\n   be 8 bits,\
    \ and any other byte size specification will result in\n   cancellation of the\
    \ transfer request.  In image and Local Byte\n   representations any byte size\
    \ is possible.  The following data\n   representation types are currently defined\
    \ in FTP:\n   1. ASCII        The sender converts data from its internal character\n\
    \                   representation to the standard NVT ASCII form.  The\n    \
    \               receiver converts the data from the standard form to\n       \
    \            its own internal form.  The data is transferred in\n            \
    \       the standard form.  The transfer byte size must be 8\n               \
    \    bits.  This type would be used for transfer of text\n                   files.\
    \  This is the default type, and it is recom-\n                   mended that\
    \ this type be implemented by all.\n   2. EBCDIC       The sender transfers data\
    \ using the EBCDIC character\n                   code and 8-bit transfer byte\
    \ size.  This type may be\n                   used for efficient transfer of EBCDIC\
    \ files between\n                   systems which use EBCDIC for their internal\
    \ character\n                   representation.\n   3. Image        The sender\
    \ transforms data from contiguous bits to\n                   bytes for transfer.\
    \  The receiver transforms the\n                   bytes into bits, storing them\
    \ contiguously indepen-\n                   dent of the byte size chosen for data\
    \ transfer.  With\n                   record structure and block mode, the server\
    \ might\n                   need to pad each record for convenient storage.  This\n\
    \                   padding is allowed at the end of a record, and should\n  \
    \                 be remembered by the server so it will be stripped\n       \
    \            off when the file is retrieved by the user.  The pad-\n         \
    \          ding transformation should be well publicized by the\n            \
    \       server in case the user processes his file at the\n                  \
    \ server site.  Typical uses for the Image type are\n                   transfer\
    \ of executable programs between like\n                   machines, and transfer\
    \ of binary (non-text) data.  It\n                   is recommended that this\
    \ type be implemented by all\n                   for some byte size, preferably\
    \ including the 8 bit\n                   byte size.\n   4. Local Byte   This\
    \ representation allows for efficient storage,\n                   use, and retrieval\
    \ of data.  The manner in which data\n                   is to be transformed\
    \ depends on the byte size for\n                   data transfer, and the particular\
    \ HOST being used.\n                   The transformation scheme for different\
    \ byte size is\n                   to be well publicized by all server sites.\
    \  This\n                   transformation shall be invertible (i.e., if a file\n\
    \                   is stored using a certain transfer byte size, an\n       \
    \            identical file must be retrievable using the same\n             \
    \      byte size and representation type).  It is the user's\n               \
    \    responsibility to keep track of the representation\n                   type\
    \ and byte size used for his transfer.  Typical\n                   uses of the\
    \ Local Byte type are in efficient storage\n                   and retrieval of\
    \ files, and transfer of structured\n                   binary data.  This type\
    \ may be identical to the Image\n                   type for byte size which are\
    \ integral multiples of or\n                   factors of the computer word length.\n\
    \   Representation type may also be affected by another attribute, the\n   format.\
    \  For example, some printers can use ASA (Fortran) vertical\n   format control\
    \ procedures to transform printed data of type ASCII or\n   EBCDIC.  Currently\
    \ format may take one of two values.\n   1. Unformatted  The representation type\
    \ as specified is unaffected by\n                   any format transformations.\
    \  This is the default\n                   value.\n   2. Printfile    The server\
    \ is to transform data of either ASCII or\n                   EBCDIC type in accordance\
    \ with ASA (Fortran) vertical\n                   format control standards.  The\
    \ data is to be\n                   transferred in 8-bit bytes.\n   A discussion\
    \ of the ASA vertical format control appears in NWG/RFC\n   189, Appendix C, and\
    \ in Communications of the ACM, Vol. 7, No. 10, p.\n   606, October 1964.  According\
    \ to the ASA vertical format control\n   standards, the first character of a formatted\
    \ record is not printed\n   but determines vertical spacing as follow:\n     \
    \ Character                  Vertical Spacing before printing\n       Blank  \
    \                     One line\n         0                         Two lines\n\
    \         1                         To first line of the next page\n         +\
    \                         No advance\n   In addition to the above four, there\
    \ are more characters (defined in\n   Appendix C, RFC 189) which represent an\
    \ IBM extension to the ASA\n   standard.\n   It should be noted that a serving\
    \ host need not accept all represen-\n   tation types and/or byte sizes, but it\
    \ must inform the user request-\n   ing an unacceptable type or size of this fact\
    \ by sending an appropri-\n   ate reply.\n"
- title: III.C.  File Structure and Transfer Modes
  contents:
  - "III.C.  File Structure and Transfer Modes\n   The only file structures supported\
    \ directly in FTP at the present\n   time are record structures.  However, the\
    \ use of record structures is\n   not mandatory.  A user with no record structure\
    \ in his file should be\n   able to store and retrieve his file at any HOST. \
    \ A user wishing to\n   transmit a record structured file must send the appropriate\
    \ FTP\n   'STRU' command (the default assumption is no record structure).  A\n\
    \   serving HOST need not accept record structures, but it must inform\n   the\
    \ user of this fact by sending an appropriate reply.  Any record\n   structure\
    \ information in the data stream may subsequently be dis-\n   carded by the receiver.\n\
    \   All data transfers must end with an EOF.  The EOF is defined by the\n   data\
    \ transfer mode.  For files that have record structures, an EOR is\n   also defined\
    \ by the transfer mode.  Only the transfer modes and\n   representation type combinations\
    \ that have EOR defined may be used\n   for transfer of files with record structures.\
    \  Records may be of zero\n   length but they must be contained in file boundaries.\
    \  The relation-\n   ship between files and records is hierarchical but an EOF\
    \ does not\n   imply an EOR.\n   The following data transfer modes are defined\
    \ in FTP:\n   1. Stream       The file is transmitted as a stream of bytes of\
    \ the\n                   specified byte size.  The EOF is signaled by closing\n\
    \                   the data connection.  Any representation type and\n      \
    \             byte size may be used in the stream mode with file\n           \
    \        structure, but use of record structure limits the\n                 \
    \  type to ASCII or EBCDIC with or without Printfile\n                   format.\
    \  The convention is that the ASCII character\n                   CR (Carriage\
    \ Return, Code 15 (octal)) followed by LF\n                   (Line Feed, Code\
    \ 12 (octal)) indicates an EOR for\n                   ASCII representation type,\
    \ and the EBCDIC character\n                   NL (New Line, Code 15 (hex)) indicates\
    \ an EOR for\n                   EBCDIC type.  This is the default mode, and it\
    \ is\n                   recommended that this mode be implemented by all.\n \
    \  2. Text         The file is ASCII text transmitted as a sequence of\n     \
    \              8-bit bytes in the ASCII representation type, and\n           \
    \        optional Printfile format.  Record structures are\n                 \
    \  allowed in this mode.  The EOR and EOF are defined by\n                   the\
    \ presence of special \"TELNET-control\" codes (,ost\n                   significant\
    \ bit set to one) in the data stream.  The\n                   EOR code is 192\
    \ (octal 300, hex CO).  The EOF code is\n                   193 (octal 301, hex\
    \ C1).  The byte size for transfer\n                   is 8 bits.\n   (For ASCII\
    \ type, text and stream modes are almost identical.)\n   Comparing the two, the\
    \ advantages of \"stream\" mode are:\n      1) The receiver need not scan the\
    \ incoming bytes.\n      2) It is usable with all data types.\n   and the disadvantages\
    \ are:\n      1) Closing the data connection under error conditions can be\n \
    \        misconstrued as an EOF in stream mode when in fact the data\n       \
    \  transfer was interrupted.  In text mode the EOF is sent expli-\n         citly.\n\
    \      2) If record structure is specified in stream mode then CRLF\n        \
    \ implies EOR, and in order for CRLF to be sent as valid data it\n         must\
    \ be transformed, e.g., into CR NUL LF or LF CR.\n   3. Block        The file\
    \ is transmitted as a series of data blocks\n                   preceded by one\
    \ or more header bytes.  The header\n                   bytes contain a count\
    \ field, and descriptor code.\n                   The count field indicates the\
    \ total length of the\n                   data block in bytes, thus marking the\
    \ beginning of\n                   the next data block (there are no filler bits).\
    \  The\n                   descriptor code defines last file block (EOF), last\n\
    \                   record block (EOR), restart marker (see Section\n        \
    \           III.D), or suspect data (i.e., the data being\n                  \
    \ transferred is suspected of errors and is not reli-\n                   able).\
    \  Record structures are allowed in this mode,\n                   and any representation\
    \ type or byte size may be used.\n                   The header consists of the\
    \ smallest integral number\n                   of bytes whose length is greater\
    \ than or equal to 24\n                   bits.  Only the _least_ significant\
    \ 24 bits (right-\n                   justified) of header shall have information;\
    \ the\n                   remaining most significant bits are \"don't care\"\n\
    \                   bits.  Of the 24 bits of header information, the 16\n    \
    \               low order bits shall represent byte count, and the 8\n       \
    \            high order bits shall represent descriptor codes as\n           \
    \        shown below.\n                            Integral data bytes >= 24\n\
    \                   +---------------+---------------+--------------+\n       \
    \            | Don't care    |   Descriptor  |  Byte Count  |\n              \
    \     | 0 to 231 bits |     8 bits    |    16 bits   |\n                   +---------------+---------------+--------------+\n\
    \                   The following descriptor codes are assigned:\n           \
    \        Code       Meaning\n                   ----       -------\n         \
    \           0         An ordinary block of data.\n                    1      \
    \   End of data block is EOR.\n                    2         End of data block\
    \ is EOF.\n                    3         Suspected errors in data block.\n   \
    \                 4         Data block is a restart marker.\n                \
    \   In the use of block mode it is possible for two or\n                   more\
    \ conditions requiring different descriptor codes\n                   (suspected\
    \ errors and either end of record or end of\n                   file) to exist\
    \ simultaneously.  Such a possibility\n                   may be handled by sending\
    \ a separate EOR or EOF block\n                   with a zero byte count. (This\
    \ is allowed by the pro-\n                   tocol.)\n                   The restart\
    \ marker is embedded in the data stream as\n                   an integral number\
    \ of 8-bit bytes (representing\n                   printable ASCII characters)\
    \ right-justified in an\n                   integral number of data bytes greater\
    \ than 8 bits.\n                   For example if the byte size is 7 bits, the\
    \ restart\n                   marker byte would be one byte right-justified per\
    \ two\n                   7-bit bytes as shown below:\n                      \
    \  Two 7-bit bytes\n                   +----------+------------+\n           \
    \        |          | Marker Char|\n                   |          |    8 bits\
    \  |\n                   +----------+------------+\n                   For byte\
    \ size of 16 bits or more, two or more marker\n                   bytes shall\
    \ be packed right-justified.  The end of\n                   the marker may be\
    \ delimited by the character SP (code\n                   32.).  If marker characters\
    \ do not exactly fit an\n                   integral byte, the unused character\
    \ slots should con-\n                   tain the ASCII character SP (code 32.).\
    \  For example,\n                   to transmit a six character marker in a 36-bit\
    \ byte\n                   size, the following three 36-bit bytes would be sent:\n\
    \                   +-------------+-------------+---------------+\n          \
    \         | Don't care  | Descriptor  |               |\n                   |\
    \    12 bits  |  code=4     | Byte count=2  |\n                   +-------------+-------------+---------------+\n\
    \                   +----+---------+---------+--------+---------+\n          \
    \         |    | Marker  | Marker  | Marker | Marker  |\n                   |\
    \    | 8 bits  | 8 bits  | 8 bits | 8 bits  |\n                   +----+---------+---------+--------+---------+\n\
    \                   +----+---------+---------+--------+---------+\n          \
    \         |    | Marker  | Marker  | SP     | SP      |\n                   |\
    \    | 8 bits  | 8 bits  | 8 bits | 8 bits  |\n                   +----+---------+---------+--------+---------+\n\
    \   4. Hasp\n                   The file is transmitted as a sequence of 8-bit\
    \ bytes\n                   in the standard Hasp-compressed data format (document\n\
    \                   to be issued by Bob Braden, UCLA).  This mode\n          \
    \         achieves considerable compression of data for print\n              \
    \     files.  Record structures are allowed in the Hasp\n                   mode.\n\
    \   The following matrix summarizes the legal combinations of file\n   transfer\
    \ parameters.  The decimal integers represent legal byte sizes\n   for each particular\
    \ STRU-MODE-TYPE-FORM grouping absence of a number\n   implies illegality.  Note\
    \ that HASP mode is not included since it has\n   never been defined.\n      \
    \     STRU           F               |        R\n          +-------------------------------+-----+-----+------+\n\
    \   TYPE   |\\ MODE                         |     |     |      |\n          |\
    \  \\                            |     |     |      |\n          |    \\     S\
    \       T       B    |  S  |   T |   B  |\n          | FORM +--------+-----+---------+-----+-----+------+\n\
    \       A  |   U  |   8    |  8  |    8    |  8  |   8 |   8  |\n          | \
    \     +--------+-----+---------+-----+-----+------+\n          |   P  |   8  \
    \  |  8  |    8    |  8  |   8 |   8  |\n      ----+------+--------+-----+---------+-----+-----+------+\n\
    \      E   |   U  |   8    |     |    8    |  8  |     |   8  |\n          | \
    \     +--------+-----+---------+-----+-----+------+\n          |   P  |   8  \
    \  |     |    8    |  8  |     |   8  |\n      ----+------+--------+-----+---------+-----+-----+------+\n\
    \      I   |   U  | 1-255  |     | 1-255   |     |     |1-255 |\n      ----+------+--------+-----+---------+-----+-----+------+\n\
    \      L   |   U  | 1-255  |     | 1-255   |     |     |1-255 |\n      ----+------+--------+-----+---------+-----+-----+------+\n"
- title: III.D  Error Recovery and Restart
  contents:
  - "III.D  Error Recovery and Restart\n   There is no provision for detecting bits\
    \ lost or scrambled in data\n   transfer.  This issue is perhaps handled best\
    \ at the NCP level where\n   it benefits most users.  However, a restart procedure\
    \ is provided to\n   protect user from system failures (such as failure of either\
    \ HOST,\n   FTP-process, or the IMP subnet).\n   The restart procedure is defined\
    \ only for the block mode of data\n   transfer.  It requires the sender of data\
    \ to insert a special marker\n   code in the data stream with some marker information.\
    \  The marker\n   information has meaning only to the sender, but must consist\
    \ of\n   printable ASCII characters.  The printable ASCII characters are\n   defined\
    \ to be octal codes 41 through 176 (i.e., not including codes 0\n   through 37\
    \ and the characters SP and DEL).  The marker could\n   represent a bit-count,\
    \ a record-count, or any other information by\n   which a system may identify\
    \ a data checkpoint.  The receiver of data,\n   if it implements the restart procedure,\
    \ would then mark the\n   corresponding position of this marker in the receiving\
    \ system, and\n   return this information to the user.\n   In the event of a system\
    \ failure, the user can restart the data\n   transfer by identifying the marker\
    \ point with the FTP restart pro-\n   cedure.  The following examples illustrate\
    \ the use of the restart\n   procedure.\n"
- title: 1.     When server is the sender of data, the server-FTP process inserts
  contents:
  - "1.     When server is the sender of data, the server-FTP process inserts\n  \
    \     an appropriate marker block in the data stream at a convenient\n       data\
    \ point.  The user-FTP process, receiving the data, marks the\n       corresponding\
    \ data point in its file system and conveys the last\n       known sender and\
    \ receiver marker information to the user.  In the\n       event of system failure,\
    \ the user or user-FTP process restarts\n       the server at the last server\
    \ marker by sending a restart command\n       with the server's marker code as\
    \ its argument.  The restart com-\n       mand is transmitted over the TELNET\
    \ connection and is immediately\n       followed by the command (such as store\
    \ or retrieve) which was\n       being executed when the system failure occurred.\n"
- title: 2.     When user is the sender of data, the user-FTP process inserts the
  contents:
  - "2.     When user is the sender of data, the user-FTP process inserts the\n  \
    \     appropriate marker block in the data stream.  The server-FTP pro-\n    \
    \   cess, receiving the data, marks the corresponding data point in\n       its\
    \ file system.  The server does not store this marker but con-\n       veys the\
    \ last known sender and receiver marker information to the\n       user over the\
    \ TELNET connections by appropriate reply codes.  The\n       user or the user-FTP\
    \ process then restarts transfer in a manner\n       identical to that described\
    \ in the first example.\n"
- title: IV.  FILE TRANSFER FUNCTIONS
  contents:
  - "IV.  FILE TRANSFER FUNCTIONS\n   The TELNET connections on which FTP commands\
    \ and replies are\n   transmitted are initiated by the user-FTP process via an\
    \ ICP to a\n   standard server socket.  FTP commands are then transmitted from\
    \ user\n   to server, and replies are transmitted from server to user.  The user\n\
    \   file transfer functions involve sending the FTP commands, interpret-\n   ing\
    \ the replies received and transferring data over the data connec-\n   tion in\
    \ the specified manner.  The server file transfer functions\n   involve accepting\
    \ and interpreting FTP commands, sending replies,\n   setting up the data connection,\
    \ and transferring data.\n"
- title: IV.A  FTP Commands
  contents:
  - "IV.A  FTP Commands\n   FTP commands are ASCII strings terminated by the ASCII\
    \ character\n   sequence CRLF (Carriage Return followed by Line Feed).  The command\n\
    \   codes themselves are ASCII alphabetic characters terminated by the\n   ASCII\
    \ character 'space' (octal code 40).  For convenience, the com-\n   mand codes\
    \ are defined to be four (or less) ASCII alphanumeric char-\n   acters (including\
    \ both upper and lower case alphabetic characters).\n   The command codes and\
    \ the semantics of commands are described in this\n   section, but the detailed\
    \ syntax of commands is specified in Section\n   V.B, the reply sequences are\
    \ discussed in Section V.C, and scenarios\n   illustrating the use of commands\
    \ are provided in Section V.D.\n   FTP commands may be partitioned as those specifying\
    \ access-control\n   identifiers, data transfer parameters, or FTP service requests.\
    \  Cer-\n   tain commands (such as ABOR, STAT, BYE) may be sent over the TELNET\n\
    \   connections while a data transfer is in progress.  Some servers may\n   not\
    \ be able to monitor the TELNET and data connections simultane-\n   ously, in\
    \ which case these commands should be preceded by a TELNET\n   SYNC to awaken\
    \ the server. (For other servers this may not be neces-\n   sary and the SYNC\
    \ will be ignored.)\n"
- title: IV.A.1  Access Control Commands
  contents:
  - "IV.A.1  Access Control Commands\n   The following commands specify access control\
    \ identifiers (command\n   codes are shown in parentheses).\n      User name (USER)\
    \ - The argument field is an ASCII string identify-\n      ing the user.  The\
    \ user identification is that which is required\n      by the server for access\
    \ to its file system.  This command will\n      normally be the first command\
    \ transmitted by the user after the\n      TELNET connections are made (some servers\
    \ may require this).\n      Additional identification information in the form\
    \ of a password\n      and/or an account command may also be required by some\
    \ servers.\n      Servers may allow a new USER command to be entered at any point\
    \ in\n      order to change the accounting information.  All parameters are\n\
    \      unchanged and any file transfer in progress is completed under the\n  \
    \    old account.\n      Password (PASS) - The argument field is an ASCII string\
    \ identify-\n      ing the user's password.  This command must be immediatly preceded\n\
    \      by the user name command, and, for some sites, completes the user'\n  \
    \    s identification for access control.  Since password information\n      is\
    \ quite sensitive, it is desirable in general to \"mask\" it or\n      suppress\
    \ type out.  It appears that the server has no foolproof\n      way to achieve\
    \ this.  It is therefore the responsibility of the\n      user-FTP process to\
    \ hide the sensitive password information.\n      Account (ACCT) - The argument\
    \ field is an ASCII string identifying\n      the user's account.  The command\
    \ is not necessarily related to the\n      USER command, as some sites may require\
    \ an account for login and\n      others only for specific access, such as storing\
    \ files.  In the\n      latter case the command may arrive at any time.  There\
    \ are two\n      reply codes to differentiate these cases for the automaton: When\n\
    \      account information is required for login and the server receives\n   \
    \   another command which he buffers, the legal response is reply code\n     \
    \ 331 when an account is required for a specific transfer requested,\n      the\
    \ reply code 433 is returned and the request command is flushed.\n      Reinitialize\
    \ (REIN) - This command terminates a USER, flushing all\n      I/O and account\
    \ information, except to allow any transfer in pro-\n      gress to be completed.\
    \  All parameters are reset to the default\n      setting and the TELNET connection\
    \ is left open.  A USER command is\n      expected to follow.\n      Logout (BYE)\
    \ - This command terminates a USER and if file transfer\n      is not in progress,\
    \ closes the TELNET connection.  If file\n      transfer is in progress, the connection\
    \ will remain open for\n      result response and will then close.  For \"hot\
    \ card-reader\" mode\n      the REIN command should be used instead.\n      An\
    \ unexpected close on the TELNET connection will cause the server\n      to take\
    \ the effective action of an abort (ABOR) and a logout\n      (BYE).\n"
- title: IV.A.2  Transfer Parameter Commands
  contents:
  - "IV.A.2  Transfer Parameter Commands\n   All data transfer parameters have default\
    \ values, and the commands\n   specifying data transfer parameters are required\
    \ only if the default\n   parameter values are to be changed.  The default value\
    \ is the last\n   specified value, or if no value has been specified, the standard\n\
    \   default value as stated here.  This implies that the server must\n   \"remember\"\
    \ the applicable default values.  The commands may be in any\n   order except\
    \ that they must precede the FTP service request.  The\n   following commands\
    \ specify data transfer parameters\n      Byte size (BYTE) - The argument is an\
    \ ASCII-represented decimal\n      integer (1 through 255), specifying the byte\
    \ size for the data\n      connection.  The default byte size is 8 bits.  The\
    \ byte size is\n      always 8 bits in the ASCII and EBCDIC representation types.\
    \  A\n      server may reject specific byte size/type combinations by sending\n\
    \      an error reply code in response to a transfer request command.\n      Data\
    \ socket (SOCK) - The argument is a HOST-socket specification\n      for the data\
    \ socket to be used in data connection.  There may be\n      two data sockets,\
    \ one from server to user and the other for user\n      to server data transfer.\
    \  An odd socket number defines a send\n      socket and an even socket number\
    \ defines a receive socket.  The\n      default HOST is the user HOST to which\
    \ TELNET connections are\n      made.  The default data sockets are (U+4) and\
    \ (U+5) where U is the\n      socket number used in the TELNET ICP and the TELNET\
    \ connections\n      are on sockets (U+2) and (U+3).\n      Listen (LSTN) - The\
    \ argument is a single ASCII character code to\n      specify the direction of\
    \ the socket that the server must allocate\n      for use as a data connection.\
    \  The server is to \"listen\" on the\n      allocated socket when an appropriate\
    \ transfer command is given.\n      The following codes are assigned:\n      \
    \      S - send\n            R - receive\n      Representation Type (TYPE) - The\
    \ argument is a single ASCII char-\n      acter code specifying the representation\
    \ types described in Sec-\n      tion III.B.  The following codes are assigned\
    \ for type:\n            A - ASCII\n            I - Image\n            L - Local\
    \ Byte\n            E - EBCDIC\n      The default representation type is ASCII.\n\
    \      Format (FORM) - The argument is a single ASCII character code\n      specifying\
    \ the formats described in Section III.B. The following\n      codes are assigned\
    \ for format:\n            U - Unformatted\n            P - Printfile\n      The\
    \ default format is Unformatted.\n      File Structure (STRU) - The argument is\
    \ a single ASCII character\n      code specifying file structure described in\
    \ Section III.C.  The\n      following codes are assigned for structure:\n   \
    \         F - File (no ecord structure)\n            R - Record structure\n  \
    \    The default structure is File (ie. no records).\n      Transfer Mode (MODE)\
    \ - The argument is a single ASCII character\n      code specifying the data transfer\
    \ modes described in Section\n      III.C.  The following codes are assigned for\
    \ transfer modes:\n            S - Stream (bytes, close is EOF)\n            B\
    \ - Block (header with descriptor and count)\n            T - Text (TELNET control\
    \ code for EOR, EOF)\n            H - Hasp (specially formatted compressed data)\n\
    \      The default transfer mode is Stream.\n"
- title: IV.A.3  FTP Service Commands
  contents:
  - "IV.A.3  FTP Service Commands\n   The FTP service commands define the file transfer\
    \ or the file system\n   function requested by the user.  The argument of an FTP\
    \ service com-\n   mand will normally be a pathname.  The syntax of pathnames\
    \ must con-\n   form to server site conventions (with standard defaults applicable),\n\
    \   except that ASCII characters must be used (in conformance with the\n   TELNET\
    \ Protocol).  The suggested default handling is to use the last\n   specified\
    \ device, directory or file name, or the standard default\n   defined for local\
    \ users.  The command may be in any order except that\n   a \"rename from\" command,\
    \ must be followed by a \"rename to\" command,\n   and some servers may require\
    \ an \"allocate\" command before a \"store\"\n   command.  The data, when transferred\
    \ in response to FTP service\n   commands, shall always be sent over the data\
    \ connection.  The follow-\n   ing commands specify FTP service requests:\n  \
    \    Retrieve (RETR) - This command achieves the transfer of a copy of\n     \
    \ the file specified in the pathname, from server to user site.  The\n      status\
    \ and contents of the file at the server site shall be unaf-\n      fected.\n\
    \      Store (STOR) - This command achieves the transfer of a copy of a\n    \
    \  file from user to server site.  If the file specified in the path-\n      name\
    \ exists at the server site, then its contents shall be\n      replaced by the\
    \ contents of the file being transferred.  A new\n      file is created at the\
    \ server site if the file specified in the\n      pathname does not already exist.\n\
    \      Append (with create) (APPE) - This command achieves the transfer\n    \
    \  of data from using to serving site.  If the file specified in the\n      pathname\
    \ exists at the server site, then the data transferred\n      shall be appended\
    \ to that file, otherwise the file specified in\n      the pathname shall be created\
    \ at the server site.\n      Allocate (ALLO) - This command may required by some\
    \ servers to\n      reserve sufficient storage to accommodate the new file to\
    \ be\n      transferred.  The argument field shall be a decimal integer\n    \
    \  representing the number of bytes (of size specified by the byte\n      size\
    \ command) of storage to be reserved for the file.  This\n      command shall\
    \ be followed by a store or append command.  The ALLO\n      command should be\
    \ treated as a NO-OP (no operation) by those\n      servers which do not require\
    \ that the maximum size of the file be\n      declared beforehand.\n      Restart\
    \ (REST) - The argument field represents the server marker\n      at which file\
    \ transfer is to be restarted.  This command does not\n      cause file transfer\
    \ but \"spaces\" over the file to the specified\n      data checkpoint.  This\
    \ command shall be immediately followed by\n      the appropriate FTP service\
    \ command which shall cause file\n      transfer to resume.\n      Rename from\
    \ - (RNFR) - This command specifies the file which is to\n      be renamed.  This\
    \ command must be immediately followed by a\n      \"rename to\" command specifying\
    \ the new file pathname.\n      Rename to (RNTO) - This command specifies the\
    \ new pathname of the\n      file specified in the immediately preceding \"rename\
    \ from\" command.\n      Together the two commands cause a file to be renamed.\n\
    \      Abort (ABOR) - This command indicates to the server to abort the\n    \
    \  previous FTP service command and any associated transfer of data.\n      The\
    \ abort command should be preceded by the TELNET SYNCH condition\n      (indicated\
    \ by the combination of the DATA MARK and the INS).  No\n      action is to be\
    \ taken if the previous command has been completed\n      (including data transfer).\
    \  The TELNET connections are not to be\n      closed by the server, but the data\
    \ connection may be closed.  An\n      appropriate reply should be sent by the\
    \ server.\n      Delete (DELE) - This command causes the file specified in the\n\
    \      pathname to be deleted at the server site.  If an extra level of\n    \
    \  protection is desired (such as the query, \"Do you really wish to\n      delete?\"\
    ), it should be provided by the user-FTP process.\n      List (LIST) - This command\
    \ causes a list to be sent from server to\n      user site.  If the pathname specifies\
    \ a directory, the server\n      should transfer a list of files in the specified\
    \ directory.  If\n      the pathname specifies a file then server should send\
    \ current\n      information on the file.  A null argument implies the user's\n\
    \      current working or default directory.  The data transfer is over\n    \
    \  the data connection in type ASCII or type EBCDIC.  (It is the user\n      's\
    \ responsibility to ensure the correct parameters.)\n      NList (NLST) - This\
    \ command causes a directory listing to be sent\n      from server to user site.\
    \  The pathname should specify a directory\n      and the server will return a\
    \ stream of names of files and no other\n      information.  The data will be\
    \ transferred in ASCII or EBCDIC type\n      over the data connection as valid\
    \ pathname strings separated by\n      CRLF.  This command will allow automatic\
    \ copying of an entire\n      directory when used with the appropriate transfer\
    \ commands.\n      Status (STAT) - This command shall cause a status response\
    \ to be\n      sent over the TELNET connection in form of a reply.  The command\n\
    \      may be sent during a file transfer (preceded by a TELNET SYNC) in\n   \
    \   which case the server will respond with the status of the opera-\n      tion\
    \ in progress, or it may be sent between file transfers.  In\n      the latter\
    \ case the command may have an argument field such as a\n      pathname.  If the\
    \ argument is a pathname, the command is analogous\n      to the \"list\" command\
    \ except that data shall be transferred in\n      ASCII on the TELNET connection.\
    \  If a partial pathname is given,\n      the server may respond with a list of\
    \ file names or attributes\n      associated with that specification.  If no argument\
    \ is given, the\n      server should return general status information about the\
    \ server\n      FTP process.  This should include current values of all transfer\n\
    \      parameters and the status of connections.\n      Help (HELP) - This command\
    \ shall cause the server to send helpful\n      information regarding its implementation\
    \ status over the TELNET\n      connection to the user.  The command may take\
    \ an argument (e.g.\n      any command name) and return more specific information\
    \ as a\n      response.  The reply is type 100, general system status.  It is\n\
    \      suggested that HELP be allowed before entering a USER command.\n      Mail\
    \ File (MLFL) - The intent of this command is to enable a user\n      site to\
    \ mail data (in form of a file) to another user at the\n      server site.  It\
    \ should be noted that the files to be mailed are\n      transmitted via the data\
    \ connection in ASCII or EBCDIC type. (It\n      is the user's responsibility\
    \ to ensure that the type is correct.)\n      These files should be appended to\
    \ the destination user's mail by\n      the server in accordance with serving\
    \ HOST mail conventions.  The\n      mail may be marked as sent from the particular\
    \ using HOST and the\n      user specified by the 'USER' command.  The argument\
    \ field may con-\n      tain one or more system or NIC idents (it is recommended\
    \ that mul-\n      tiple ident be allowed so the same mail can easily be sent\
    \ to\n      several users), or it may be empty.  If the argument field is\n  \
    \    empty or blank (one or more spaces), then the mail is destined for\n    \
    \  a printer or other designated place for site mail.  A NIC ident\n      refers\
    \ to the standard identification described in the NIC Direc-\n      tory of Network\
    \ Participants.  A serving host may keep a table\n      mapping NIC indents into\
    \ system idents, although NIC idents are\n      not required in the implementation.\
    \  A system ident is the user's\n      normal identification at the serving host.\
    \  The use of system\n      idents would allow a network user to send mail to\
    \ other users who\n      do not have NIC identification but whose system ident\
    \ is known.\n      Mail (MAIL) - This command allows a user to send mail that\
    \ is not\n      in a file over the TELNET connection.  The argument field may\
    \ con-\n      tain one or more system or NIC idents, or it may be empty.  The\n\
    \      idents are defined as above for the MLFL command.  After the\n      'MAIL'\
    \ command is received, the server is to treat the following\n      lines as text\
    \ of the mail sent by the user.  The mail text is to\n      be terminated by a\
    \ line containing only a single period, that is,\n      the character sequence\
    \ \".CRLF\" in a new line.  It is suggested\n      that a modest volume of mail\
    \ service should be free; i.e., it may\n      be entered before a USER command.\n"
- title: IV.A.4 Miscellaneous Commands
  contents:
  - "IV.A.4 Miscellaneous Commands\n      NoOP (NOOP) - This command does not affect\
    \ any parameters or pre-\n      viously entered command.  The server simply sends\
    \ a no-op reply.\n      Quote (QUOT) - This command allows the user to talk directly\
    \ to\n      the FTP-server.  After parsing this command, the user-FTP process\n\
    \      will pass without examination all succeeding liners until the NQUO\n  \
    \    command is received.  Between these two commands the server will\n      respond\
    \ appropriately to his implementation and the user's\n      requests.\n      NoQuote\
    \ (NQUO) - This command returns the user and server\n      processes to normal\
    \ interactive mode.  Both QUOT and NQUO have\n      reply codes to be sent by\
    \ th server process to the user process to\n      ensure agreement on the current\
    \ mode.\n   The quote commands provide a convenient method of testing server-\n\
    \   implemented experimental commands.  The names of the latter should\n   begin\
    \ with an X, and can be listed in the system HELP reply.  It\n   should be noted\
    \ that the official command set is expandable; sugges-\n   tions should go first\
    \ to Alexander A. McKenzie (BBN).\n"
- title: IV.B  FTP Replies
  contents:
  - "IV.B  FTP Replies\n   The server sends FTP replies over the TELNET connection\
    \ in response\n   to user FTP commands.  The FTP replies constitute the acknowledgment\n\
    \   or completion code (including errors).  The FTP-server replies are\n   formatted\
    \ for human or program interpretation.  Single line replies\n   consist of a leading\
    \ three-digit numeric code followed by a space,\n   followed by a one-line text\
    \ explanation of the code.  For replies\n   that contain several lines of text,\
    \ the first line will have a lead-\n   ing three-digit numeric code followed immediately\
    \ by the ASCII char-\n   acter \"-\" (Hyphen, Code 55 (octal)) and possibly some\
    \ text.  All\n   succeeding continuation lines except the last are constrained\
    \ not to\n   begin with three digits; the last line must repeat the numeric code\n\
    \   of the first line and be followed immediately by a space.\n   For example:\n\
    \           100-First Line\n           Continuation Line\n           Another Line\n\
    \           100 Last Line\n   The numeric codes are assigned by groups and for\
    \ ease of interpreta-\n   tion by programs in a manner consistent with other protocols\
    \ such as\n   the RJE protocol.  The three digits of the code are to be interpreted\n\
    \   as follows:\n   a) The first digit specifies type of response as indicated\
    \ below:\n       000 These replies are purely informative and constitute neither\
    \ a\n           positive nor a negative acknowledgment.\n       1xx Informative\
    \ replies to status inquiries.  These constitute a\n           positive acknowledgment\
    \ to the status command.\n       2xx Positive acknowledgment of previous command\
    \ or other success-\n           ful action.\n       3xx Incomplete information.\
    \  Activity cannot proceed without\n           further specification and input.\n\
    \       4xx Unsuccessful reply.  The request is correctly specified but\n    \
    \       the server is unsuccessful in correctly fulfilling it.\n       5xx Incorrect\
    \ or illegal command.  The command or its parameters\n           were invalid\
    \ or incomplete from a syntactic viewpoint, or the\n           command is inconsistent\
    \ with a previous command.  The command\n           in question has been completely\
    \ ignored.\n       6xx-9xx Reserved for future expansion.\n   b) The second digit\
    \ specifies the general category to which the\n       response refers:\n     \
    \  x00-x29 General purpose replies, not assignable to other\n       categories.\n\
    \       x30 Primary access.  Informative replies to the \"log-on\" attempt.\n\
    \       x40 Secondary access.  The primary server is commenting on its\n     \
    \  ability to access a secondary service.\n       x5x FTP results\n       x6x\
    \ RJE results.\n       x7x-x9x Reserved for future expansion.\n   c) The final\
    \ digit specifies a particular message type.  Since the\n       code is designed\
    \ for an automation process to interpret, it is\n       not necessary for every\
    \ variation of a reply to have a unique\n       number.  Only the basic meaning\
    \ of replies need have unique\n       numbers.  The text of a reply can explain\
    \ the specific reason for\n       that reply to a human user.\n       Each TELNET\
    \ line delimited by a numeric code and CRLF (or group\n       of text lines bounded\
    \ by coded lines) that is sent by the server\n       is intended to be a complete\
    \ reply message.  It should be noted\n       that the text of replies is intended\
    \ for a human user.  Only the\n       reply codes and in some instances the first\
    \ line of text are\n       intended for programs.\n"
- title: 'The assigned reply codes relating to FTP are:'
  contents:
  - 'The assigned reply codes relating to FTP are:

    '
- title: 000 General information message (site, time of day, etc.).
  contents:
  - '000 General information message (site, time of day, etc.).

    '
- title: 010 Message from system operator.
  contents:
  - '010 Message from system operator.

    '
- title: 030 Server availability information.
  contents:
  - '030 Server availability information.

    '
- title: 050 FTP commentary or user information.
  contents:
  - '050 FTP commentary or user information.

    '
- title: 100 System status reply.
  contents:
  - '100 System status reply.

    '
- title: 110 System busy doing...
  contents:
  - '110 System busy doing...

    '
- title: 150 File status reply
  contents:
  - '150 File status reply

    '
- title: 151 Directory listing reply.
  contents:
  - '151 Directory listing reply.

    '
- title: 200 Last command received correctly.
  contents:
  - '200 Last command received correctly.

    '
- title: 201 An ABORT has terminated activity, as requested.
  contents:
  - '201 An ABORT has terminated activity, as requested.

    '
- title: 202 Abort request ignored, no activity in progress.
  contents:
  - '202 Abort request ignored, no activity in progress.

    '
- title: 230 User is "logged in". May proceed.
  contents:
  - '230 User is "logged in". May proceed.

    '
- title: 231 User is "logged out". Service terminated.
  contents:
  - '231 User is "logged out". Service terminated.

    '
- title: 232 Logout command noted, will complete when transfer done.
  contents:
  - '232 Logout command noted, will complete when transfer done.

    '
- title: 233 User is "logged out". Parameters reinitialized.
  contents:
  - '233 User is "logged out". Parameters reinitialized.

    '
- title: 250 FTP file transfer started correctly.
  contents:
  - '250 FTP file transfer started correctly.

    '
- title: 251 FTP Restart-marker reply.
  contents:
  - "251 FTP Restart-marker reply.\n        Text is : MARK yyyy = mmmm\n        where\
    \ yyyy is user's data stream marker (yours)\n        and mmmm is server's equivalent\
    \ marker (mine)\n        (Note the spaces between the markers and '=')\n"
- title: 252 FTP transfer completed correctly.
  contents:
  - '252 FTP transfer completed correctly.

    '
- title: 253 Rename completed.
  contents:
  - '253 Rename completed.

    '
- title: 254 Delete completed.
  contents:
  - '254 Delete completed.

    '
- title: 255 FTP server data socket reply
  contents:
  - "255 FTP server data socket reply\n        Text is: SOCK nnnn\n        where nnnn\
    \ is a decimal integer representing\n        the server socket for data connection\n"
- title: 256 Mail completed.
  contents:
  - '256 Mail completed.

    '
- title: 300 Connection greeting message, awaiting input.
  contents:
  - '300 Connection greeting message, awaiting input.

    '
- title: 301 Current command incompleted (no CRLF for long time).
  contents:
  - '301 Current command incompleted (no CRLF for long time).

    '
- title: 330 Enter password
  contents:
  - '330 Enter password

    '
- title: 331 Enter account (if account required as part of login
  contents:
  - "331 Enter account (if account required as part of login\n    sequence).\n"
- title: 350 Enter mail, terminate by a line with only a '.'
  contents:
  - '350 Enter mail, terminate by a line with only a ''.''

    '
- title: 400 This service not implemented.
  contents:
  - '400 This service not implemented.

    '
- title: 401 This service not accepting user now, goodbye.
  contents:
  - '401 This service not accepting user now, goodbye.

    '
- title: 430 Log-on time or tries exceeded, goodbye.
  contents:
  - '430 Log-on time or tries exceeded, goodbye.

    '
- title: 431 Log-on unsuccessful.  Usre and/or password invalid.
  contents:
  - '431 Log-on unsuccessful.  Usre and/or password invalid.

    '
- title: 432 User not valid for this service.
  contents:
  - '432 User not valid for this service.

    '
- title: 433 Cannot transfer files without valid account.  Enter account.
  contents:
  - '433 Cannot transfer files without valid account.  Enter account.

    '
- title: 434 Log-out forced by operator action.  Phone site.
  contents:
  - '434 Log-out forced by operator action.  Phone site.

    '
- title: 435 Log-out forced by system problem.
  contents:
  - '435 Log-out forced by system problem.

    '
- title: 436 Service shutting down, goodbye.
  contents:
  - '436 Service shutting down, goodbye.

    '
- title: '450 FTP: File not found.'
  contents:
  - '450 FTP: File not found.

    '
- title: '451 FTP: File access denied to you.'
  contents:
  - '451 FTP: File access denied to you.

    '
- title: '452 FTP: File transfer incomplete, data connection closed.'
  contents:
  - '452 FTP: File transfer incomplete, data connection closed.

    '
- title: '453 FTP: File transfer incomplete, insufficient storage space.'
  contents:
  - '453 FTP: File transfer incomplete, insufficient storage space.

    '
- title: '454 FTP: Cannot connect to your data socket.'
  contents:
  - '454 FTP: Cannot connect to your data socket.

    '
- title: '455 FTP: File system error not covered by other reply codes.'
  contents:
  - '455 FTP: File system error not covered by other reply codes.

    '
- title: '456 FTP: Name duplication rename failed.'
  contents:
  - '456 FTP: Name duplication rename failed.

    '
- title: '457 FTP: Transfer parameters in error.'
  contents:
  - '457 FTP: Transfer parameters in error.

    '
- title: 500 Last command line completely unrecognized.
  contents:
  - '500 Last command line completely unrecognized.

    '
- title: 501 Syntax of last command is incorrect.
  contents:
  - '501 Syntax of last command is incorrect.

    '
- title: 502 Last command incomplete, parameters missing.
  contents:
  - '502 Last command incomplete, parameters missing.

    '
- title: '123456789012345678901234567890123456789012345678901234567890123456789012'
  contents:
  - '123456789012345678901234567890123456789012345678901234567890123456789012

    '
- title: 503 Last command invalid (ignored), illegal parameter combination.
  contents:
  - '503 Last command invalid (ignored), illegal parameter combination.

    '
- title: 504 Last command invalid, action not possible at this time.
  contents:
  - '504 Last command invalid, action not possible at this time.

    '
- title: 505 Last command conflicts illegally with previous command(s).
  contents:
  - '505 Last command conflicts illegally with previous command(s).

    '
- title: 506 Requested action not implemented by the server.
  contents:
  - '506 Requested action not implemented by the server.

    '
- title: 507 Catchall error reply.
  contents:
  - '507 Catchall error reply.

    '
- title: 550 Bad pathname specification (e.g., syntax error).
  contents:
  - '550 Bad pathname specification (e.g., syntax error).

    '
- title: V.  DECLARATIVE SPECIFICATIONS
  contents:
  - "V.  DECLARATIVE SPECIFICATIONS\n   In order to make FTP workable without needless\
    \ error messages, the\n   following minimum implementation is required for servers:\n"
- title: TYPE -- ASCII  (with 8-bit bytes)
  contents:
  - "TYPE -- ASCII  (with 8-bit bytes)\n                 MODE -- Stream\n        \
    \         STRUCTURE -- File\n                              Record (with ASCII\
    \ type and CRLF for EOR)\n                 FORM -- Unformatted\n             \
    \    COMMANDS -- USER, BYE, SOCK\n                             TYPE, BYTE, MODE,\
    \ STRU, FORM\n                                 for the default values\n      \
    \                       RETR, STOR\n                             NOOP\n   The\
    \ initial default values for transfer parameters are:\n      TYPE -- ASCII\n \
    \                     BYTE -- 8\n                      MODE -- Stream\n      \
    \                STRU -- File\n                      FORM -- Unformatted\n"
- title: V.A Connections
  contents:
  - "V.A Connections\n   The server-FTP process at the server site shall \"listen\"\
    \ on Socket 3,\n   via its server-TELNET.  The user or user-FTP process at the\
    \ user site\n   shall initiate the full-duplex TELNET connections via its user-TELNET\n\
    \   performing the ARPANET standard initial connection protocol (ICP) to\n   server\
    \ socket 3.  Servers may specify that interaction over the TEL-\n   NET connections\
    \ be line-at-a-time with local echo.  The server is not\n   obliged to provide\
    \ remote echo and may ignore TELNET control charac-\n   ters; he should not, however,\
    \ return error response to the latter.\n   All editing of command lines similarly\
    \ must be local.  The TELNET\n   connections shall be closed by the user site\
    \ upon completion of use\n   and receipt of the last server reply.\n   The user\
    \ site must \"listen\" on the specified data socket or sockets\n   (a send and/or\
    \ a receive socket).  The server site shall initiate the\n   data connection using\
    \ the specified data socket and byte size.  The\n   direction of data connection\
    \ and the data socket used shall be\n   determined by the FTP service command.\
    \  The server shall send a reply\n   to the user indicating the server data socket\
    \ so that the user may\n   ensue the security of data transfer.  This can be done\
    \ at any time\n   prior to the first transfer of data over a data connection.\
    \  It\n   should be emphasized that the user-FTP should not wait for a 255\n \
    \  (server data socket) reply before doing the \"listen\", since there is\n  \
    \ no guarantee that the reply will arrive before the user site receives\n   the\
    \ initiating RFC.  The security check can be done when the reply\n   arrives and\
    \ the data connection closed if it was made to a socket\n   other than the one\
    \ specified.\n   The data connection shall be closed by the server site under\
    \ the con-\n   ditions described in Section III.A.  If the server wishes to close\n\
    \   the connection in modes where that is not required, it is recommended\n  \
    \ that the close be sent immediately after the file transfer is com-\n   pleted\
    \ rather than after a new transfer command is received, because\n   the user or\
    \ server may have to test the state of the socket before\n   doing a \"listen\"\
    \ or \"init\".  The server should in general send a\n   reply before closing the\
    \ data connection to avoid problems at the\n   user end, though, for reasons stated\
    \ above, the user-FTP should not\n   wait for the reply before doing his close.\n"
- title: V.B  Commands
  contents:
  - "V.B  Commands\n   The commands are ASCII character strings transmitted over the\
    \ TELNET\n   connections as described in section IV.A.  The command functions\
    \ and\n   semantics are described in sections IV.A.1, IV.A.2, IV.A.3, and\n  \
    \ IV.A.4.  The command syntax is specified here.\n   The commands begin with a\
    \ command code followed by an argument field.\n   The command codes are four or\
    \ less ASCII alphabetic characters.\n   Upper and lower case alphabetic characters\
    \ are to be treated identi-\n   cally.  Thus any of the following may represent\
    \ the retrieve command:\n   RETR    Retr    retr   ReTr     rETr\n   This also\
    \ applies to any symbols representing parameters values, such\n   as A or a for\
    \ ASCII TYPE.  The command codes and the argument fields\n   are separated by\
    \ one or more spaces.\n   The argument field consists of a variable length ASCII\
    \ character\n   string ending with the character sequence CRLF (Carriage Return\n\
    \   immediately followed by Line Feed).  In the following section on syn-\n  \
    \ tax it should be stressed that all characters in the argument field\n   are\
    \ ASCII characters.  Thus a decimal integer shall mean an ASCII\n   represented\
    \ decimal integer.\n   The following are all the currently defined FTP commands:\n\
    \      USER <username> CRLF\n      PASS <password> CRLF\n      ACCT <acctno> CRLF\n\
    \      REIN CRLF\n      BYE CRLF\n      BYTE <byte size> CRLF\n      SOCK <HOST-socket>\
    \ CRLF\n      LSTN <direction> CRLF\n      TYPE <type code> CRLF\n      FORM <form\
    \ code> CRLF\n      STRU <structure code> CRLF\n      MODE <mode code> CRLF\n\
    \      RETR <pathname> CRLF\n      STOR <pathname> CRLF\n      APPE <pathname>\
    \ CRLF\n      ALLO <decimal integer> CRLF\n      REST <marker> CRLF\n      RNFR\
    \ <pathname> CRLF\n      RNTO <pathname> CRLF\n      ABOR CRLF\n      DELE <pathname>\
    \ CRLF\n      LIST <pathname> CRLF\n      NLST <pathname> CRLF\n      STAT <pathname>\
    \ CRLF\n      HELP <string> CRLF\n      MLFL <users> CRLF\n      MAIL <users>\
    \ CRLF\n      NOOP CRLF\n      QUOT CRLF\n      NQUO CRLF\n   The syntax of the\
    \ above argument fields (using BNF notation where\n   applicable) is:\n      <username>\
    \ ::= <string>\n      <password> ::= <string>\n      <acctno> ::= <string>\n \
    \     <string> ::= <empty>/<char>/<char><string>\n      <char> ::= any of the\
    \ 128 ASCII characters except CR and LF.\n      <marker> ::= <pr string>\n   \
    \   <pr string> ::= <empty>/<pr char>/<pr char> <pr string>\n      <pr char> ::=\
    \ any ASCII code 33 through 126\n      <byte size> ::= any decimal integer 1 through\
    \ 255.\n      <HOST-socket> ::= <socket>/HOST number>,<socket>\n      <HOST number>\
    \ ::= a decimal integer specifying an ARPANET HOST\n      <socket> ::= decimal\
    \ integer between 0 and (2**32)-1\n      <direction> ::= S/R\n      <form code>\
    \ ::= U/P\n      <type code> ::= A/E/I/L\n      <structure code> ::= F/R\n   \
    \   <mode code> ::= S/B/T/H\n      <pathname> ::= <string>\n      <decimal integer>\
    \ ::= <digit>/<digit><decimal integer>\n      <digit> ::= 0|1|2|3|4|5|6|7|8|9\n\
    \      <empty> ::= the null string (specifies use the default).\n      <users>\
    \ ::= <user>|<user,<users>\n      <user> ::= <empty>|<NIC ident>|<sys ident>\n\
    \      <NIC ident> ::= <string>\n      <sys ident> ::= <string>\n"
- title: V.C  Sequencing of Commands and Replies
  contents:
  - "V.C  Sequencing of Commands and Replies\n   The communication between the user\
    \ and server is intended to be an\n   alternating dialogue.  As such, the user\
    \ issues an FTP command and\n   the server responds with a prompt primary reply.\
    \  The user should\n   wait for this initial primary success or failure response\
    \ before\n   sending further commands.\n   A second type of reply is sent asynchronously\
    \ with respect to user\n   commands.  These replies may, for example, report on\
    \ the progress or\n   completion of file transfer and as such are secondary replies\
    \ to file\n   transfer commands.\n   The third class of replies are informational\
    \ and spontaneous replies\n   which may arrive at any time.  These replies are\
    \ listed below as\n   spontaneous.\n"
- title: COMMAND-REPLY CORRESPONDENCE TABLE
  contents:
  - 'COMMAND-REPLY CORRESPONDENCE TABLE

    '
- title: COMMAND              SUCCESS       FAIL
  contents:
  - 'COMMAND              SUCCESS       FAIL

    '
- title: '-------              -------       ----'
  contents:
  - '-------              -------       ----

    '
- title: USER                 230,330       430-432,500-505,507
  contents:
  - 'USER                 230,330       430-432,500-505,507

    '
- title: PASS                 230,331       430-432,500-507
  contents:
  - 'PASS                 230,331       430-432,500-507

    '
- title: ACCT                 230           430-432,500-507
  contents:
  - 'ACCT                 230           430-432,500-507

    '
- title: REIN                 232,233       401,436,500-507
  contents:
  - "REIN                 232,233       401,436,500-507\n   Secondary Reply   300\n"
- title: BYE                  231,232       430-432,500-505,507
  contents:
  - 'BYE                  231,232       430-432,500-505,507

    '
- title: BYTE                 200,331       500-507
  contents:
  - 'BYTE                 200,331       500-507

    '
- title: SOCK                 200,331       500-505,507
  contents:
  - 'SOCK                 200,331       500-505,507

    '
- title: LSTN                 255,331       500-507
  contents:
  - 'LSTN                 255,331       500-507

    '
- title: TYPE                 200,331       500-507
  contents:
  - 'TYPE                 200,331       500-507

    '
- title: FORM                 200,331       500-507
  contents:
  - 'FORM                 200,331       500-507

    '
- title: STRU                 200,331       500-507
  contents:
  - 'STRU                 200,331       500-507

    '
- title: MODE                 200,331       500-507
  contents:
  - 'MODE                 200,331       500-507

    '
- title: RETR                 250,331       433,450,451,454,455,500-505,507,550
  contents:
  - "RETR                 250,331       433,450,451,454,455,500-505,507,550\n   Secondary\
    \ Reply   252           452\n"
- title: STOR                 250,331       433,451,454,455,457,500-505,507,550
  contents:
  - "STOR                 250,331       433,451,454,455,457,500-505,507,550\n   Secondary\
    \ Reply   252           452,453\n"
- title: APPE                 250,331       433,451,454,455,457,500-507,550
  contents:
  - "APPE                 250,331       433,451,454,455,457,500-507,550\n   Secondary\
    \ Reply   252           452,453\n"
- title: ALLO                 200,331       500-507
  contents:
  - 'ALLO                 200,331       500-507

    '
- title: REST                 200,331       500-507
  contents:
  - 'REST                 200,331       500-507

    '
- title: RNFR                 200,331       433,450,451,455,500-507,550
  contents:
  - 'RNFR                 200,331       433,450,451,455,500-507,550

    '
- title: RNTO                 253,331       433,450,451,455,456,500-505,507,550
  contents:
  - 'RNTO                 253,331       433,450,451,455,456,500-505,507,550

    '
- title: ABOR                 201,202,331   500-507
  contents:
  - 'ABOR                 201,202,331   500-507

    '
- title: DELE                 254,331       433,450,451,455,500-507,550
  contents:
  - 'DELE                 254,331       433,450,451,455,500-507,550

    '
- title: LIST                 250,331       433,450,451,454,455,457,500-507,550
  contents:
  - "LIST                 250,331       433,450,451,454,455,457,500-507,550\n   Secondary\
    \ Reply   252           452\n"
- title: NLST                 250,331       433,450,451,454,455,457,500-507
  contents:
  - "NLST                 250,331       433,450,451,454,455,457,500-507\n   Secondary\
    \ Reply   252           452\n"
- title: STAT                 100,110,150,  450,451,454,455,500-507,550
  contents:
  - "STAT                 100,110,150,  450,451,454,455,500-507,550\n            \
    \             151,331\n"
- title: HELP                 000,030,050,  500-507
  contents:
  - "HELP                 000,030,050,  500-507\n                         331\n"
- title: MLFL                 250,331       433,450,451,454,455,457,500-507
  contents:
  - "MLFL                 250,331       433,450,451,454,455,457,500-507\n   Secondary\
    \ Reply   252           452,453\n"
- title: MAIL                 331,350       433,450,451,455,500-507
  contents:
  - "MAIL                 331,350       433,450,451,455,500-507\n   Secondary Reply\
    \   256\n"
- title: NOOP                 200           500-505,507
  contents:
  - 'NOOP                 200           500-505,507

    '
- title: QUOT                 200,331       500-507
  contents:
  - 'QUOT                 200,331       500-507

    '
- title: NQUO                 200           500-505,507
  contents:
  - 'NQUO                 200           500-505,507

    '
- title: Spontaneous          0xx,300,301   400,401,434-436
  contents:
  - 'Spontaneous          0xx,300,301   400,401,434-436

    '
- title: Replies              251,255
  contents:
  - 'Replies              251,255

    '
- title: V.D  Typical FTP Scenarios
  contents:
  - "V.D  Typical FTP Scenarios\n   1. TIP User wanting to transfer file from HOST\
    \ X to local printer:\n      a) TIP user opens TELNET connections by ICP to HOST\
    \ X, socket 3.\n      b) The following commands and replies are exchanged:\n \
    \        TIP                            HOST X\n         ---                 \
    \           ------\n         USER username CRLF ---------->\n         <----------330\
    \ Enter Password CRLF\n         PASS password CRLF ---------->\n         <----------230\
    \ User logged in CRLF\n         SOCK 65538 CRLF    ---------->\n         <----------200\
    \ Command received OK CRLF\n         RETR this.file CRLF ---------->\n       \
    \  <----------255 SOCK 5533 CRLF\n         (HOST X initiates data connection to\n\
    \          TIP socket 65538, i.e., PORT 1 receive)\n         <----------250 File\
    \ transfer started\n         BYE CRLF   ----------------->\n         <----------252\
    \ File transfer completed\n      c) HOST X closes the TELNET and data connections.\n\
    \      Note: The TIP user should be in line mode.\n   2. User at HOST U wanting\
    \ to transfer files to/from HOST S:\n      In general the user would communicate\
    \ to the server via a mediat-\n      ing user-FTP process.  The following may\
    \ be a typical scenario.\n      The user-FTP prompts are shown in parentheses,\
    \ '---->' represents\n      commands from HOST U to HOST S, and '<----' represents\
    \ replies\n      from HOST S to HOST U.\n"
- title: Local Commands by User            Action Involved
  contents:
  - 'Local Commands by User            Action Involved

    '
- title: '----------------------            ---------------'
  contents:
  - '----------------------            ---------------

    '
- title: ftp (host) multics CR             ICP to HOST S, socket 3,
  contents:
  - "ftp (host) multics CR             ICP to HOST S, socket 3,\n                \
    \                  establishing TELNET connections.\n"
- title: username Doe CR                   USER Doe CRLF ---->
  contents:
  - "username Doe CR                   USER Doe CRLF ---->\n                     \
    \             <---- 330 password CRLF\n"
- title: password mumble CR                PASS mumble CRLF ---->
  contents:
  - "password mumble CR                PASS mumble CRLF ---->\n                  \
    \                <---- 230 Doe logged in. CRLF\n"
- title: retrieve (local type) ASCII CR
  contents:
  - 'retrieve (local type) ASCII CR

    '
- title: (local pathname) test 1 CR        User-FTP opens local file in ASCII.
  contents:
  - '(local pathname) test 1 CR        User-FTP opens local file in ASCII.

    '
- title: (for.pathname) test.p11 CR        RETR test.p11 CRLF
  contents:
  - "(for.pathname) test.p11 CR        RETR test.p11 CRLF\n                      \
    \            <---- 255 SOCK 1233 CRLF\n                                  Server\
    \ makes data connection to (U+4).\n                                  <---- 250\
    \ File transfer starts CRLF\n                                  <---- 252 File\
    \ transfer complete CRLF\n"
- title: type ImageCR                      TYPE I CRLF ---->
  contents:
  - "type ImageCR                      TYPE I CRLF ---->\n                       \
    \           <---- 200 Command OK CRLF\n"
- title: byte 36CR                         BYTE 36 CRLF ---->
  contents:
  - "byte 36CR                         BYTE 36 CRLF ---->\n                      \
    \            <---- 200 Command OK CRLF\n"
- title: store (local type) image CR
  contents:
  - 'store (local type) image CR

    '
- title: (local pathname) file dump CR     User-FTP opens local file in Image.
  contents:
  - '(local pathname) file dump CR     User-FTP opens local file in Image.

    '
- title: (for.pathname) >udd>cn>fd CR      STOR >udd>cn>fd CRLF ---->
  contents:
  - "(for.pathname) >udd>cn>fd CR      STOR >udd>cn>fd CRLF ---->\n              \
    \                    <---- 451 Access denied CRLF\n"
- title: terminate                         <---- 231 Doe logged out CRLF
  contents:
  - "terminate                         <---- 231 Doe logged out CRLF\n           \
    \                       Server closes all connections.\n       [ This RFC was\
    \ put into machine readable form for entry ]\n          [ into the online RFC\
    \ archives by Via Genie 03/00 ]\n"
