- title: __initial_text__
  contents:
  - "                 Media Gateway Control Protocol (MGCP)\n                    \
    \          Version 1.0\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
- title: IESG Note
  contents:
  - "IESG Note\n   This document is being published for the information of the\n \
    \  community.  It describes a protocol that is currently being deployed\n   in\
    \ a number of products.  Implementers should be aware of RFC 3015,\n   which was\
    \ developed in the IETF Megaco Working Group and the ITU-T\n   SG16 and which\
    \ is considered by the IETF and ITU-T to be the\n   standards-based (including\
    \ reviewed security considerations) way to\n   meet the needs that MGCP was designed\
    \ to address.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes an application programming interface and\
    \ a\n   corresponding protocol (MGCP) which is used between elements of a\n  \
    \ decomposed multimedia gateway.  The decomposed multimedia gateway\n   consists\
    \ of a Call Agent, which contains the call control\n   \"intelligence\", and a\
    \ media gateway which contains the media\n   functions, e.g., conversion from\
    \ TDM voice to Voice over IP.\n   Media gateways contain endpoints on which the\
    \ Call Agent can create,\n   modify and delete connections in order to establish\
    \ and control media\n   sessions with other multimedia endpoints.  Also, the Call\
    \ Agent can\n   instruct the endpoints to detect certain events and generate signals.\n\
    \   The endpoints automatically communicate changes in service state to\n   the\
    \ Call Agent.  Furthermore, the Call Agent can audit endpoints as\n   well as\
    \ the connections on endpoints.\n   The basic and general MGCP protocol is defined\
    \ in this document,\n   however most media gateways will need to implement one\
    \ or more MGCP\n   packages, which define extensions to the protocol suitable\
    \ for use\n   with specific types of media gateways.  Such packages are defined\
    \ in\n   separate documents.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.     Introduction.................................................5\n\
    \   1.1    Relation with the H.323 Standards............................7\n  \
    \ 1.2    Relation with the IETF Standards.............................8\n   1.3\
    \    Definitions..................................................9\n   1.4  \
    \  Conventions used in this Document............................9\n   2.     Media\
    \ Gateway Control Interface.............................10\n   2.1    Model and\
    \ Naming Conventions................................10\n   2.1.1  Types of Endpoints..........................................10\n\
    \   2.1.2  Endpoint Identifiers........................................14\n  \
    \ 2.1.3  Calls and Connections.......................................16\n   2.1.4\
    \  Names of Call Agents and Other Entities.....................22\n   2.1.5  Digit\
    \ Maps..................................................23\n   2.1.6  Packages....................................................26\n\
    \   2.1.7  Events and Signals..........................................28\n  \
    \ 2.2    Usage of SDP................................................33\n   2.3\
    \    Gateway Control Commands....................................33\n   2.3.1\
    \  Overview of Commands........................................33\n   2.3.2  EndpointConfiguration.......................................36\n\
    \   2.3.3  NotificationRequest.........................................37\n  \
    \ 2.3.4  Notify......................................................44\n   2.3.5\
    \  CreateConnection............................................46\n   2.3.6  ModifyConnection............................................52\n\
    \   2.3.7  DeleteConnection (from the Call Agent)......................54\n  \
    \ 2.3.8  DeleteConnection (from the gateway).........................58\n   2.3.9\
    \  DeleteConnection (multiple connections from the Call Agent) 59\n   2.3.10 AuditEndpoint...............................................60\n\
    \   2.3.11 AuditConnection.............................................65\n  \
    \ 2.3.12 RestartInProgress...........................................66\n   2.4\
    \    Return Codes and Error Codes................................69\n   2.5  \
    \  Reason Codes................................................74\n   2.6    Use\
    \ of Local Connection Options and Connection Descriptors..75\n   2.7    Resource\
    \ Reservations.......................................77\n   3.     Media Gateway\
    \ Control Protocol..............................77\n   3.1    General Description.........................................78\n\
    \   3.2    Command Header..............................................79\n  \
    \ 3.2.1  Command Line................................................79\n   3.2.2\
    \  Parameter Lines.............................................82\n   3.3    Format\
    \ of response headers.................................101\n   3.3.1  CreateConnection\
    \ Response..................................104\n   3.3.2  ModifyConnection Response..................................105\n\
    \   3.3.3  DeleteConnection Response..................................106\n  \
    \ 3.3.4  NotificationRequest Response...............................106\n   3.3.5\
    \  Notify Response............................................106\n   3.3.6  AuditEndpoint\
    \ Response.....................................106\n   3.3.7  AuditConnection\
    \ Response...................................107\n   3.3.8  RestartInProgress\
    \ Response.................................108\n   3.4    Encoding of the Session\
    \ Description (SDP)..................108\n   3.4.1  Usage of SDP for an Audio\
    \ Service..........................110\n   3.4.2  Usage of SDP for LOCAL Connections.........................110\n\
    \   3.5    Transmission over UDP......................................111\n  \
    \ 3.5.1  Providing the At-Most-Once Functionality...................112\n   3.5.2\
    \  Transaction Identifiers and Three Ways Handshake...........113\n   3.5.3  Computing\
    \ Retransmission Timers............................114\n   3.5.4  Maximum Datagram\
    \ Size, Fragmentation and Reassembly........115\n   3.5.5  Piggybacking...............................................116\n\
    \   3.5.6  Provisional Responses......................................117\n  \
    \ 4.     States, Failover and Race Conditions.......................119\n   4.1\
    \    Failover Assumptions and Highlights........................119\n   4.2  \
    \  Communicating with Gateways................................121\n   4.3    Retransmission,\
    \ and Detection of Lost Associations:........122\n   4.4    Race Conditions............................................126\n\
    \   4.4.1  Quarantine List............................................127\n  \
    \ 4.4.2  Explicit Detection.........................................133\n   4.4.3\
    \  Transactional Semantics....................................134\n   4.4.4  Ordering\
    \ of Commands, and Treatment of Misorder............135\n   4.4.5  Endpoint Service\
    \ States....................................137\n   4.4.6  Fighting the Restart\
    \ Avalanche.............................140\n   4.4.7  Disconnected Endpoints.....................................143\n\
    \   4.4.8  Load Control in General....................................146\n  \
    \ 5.     Security Requirements......................................147\n   5.1\
    \    Protection of Media Connections............................148\n   6.   \
    \  Packages...................................................148\n   6.1    Actions....................................................150\n\
    \   6.2    BearerInformation..........................................150\n  \
    \ 6.3    ConnectionModes............................................151\n   6.4\
    \    ConnectionParameters.......................................151\n   6.5  \
    \  DigitMapLetters............................................151\n   6.6    Events\
    \ and Signals.........................................152\n   6.6.1  Default and\
    \ Reserved Events................................155\n   6.7    ExtensionParameters........................................156\n\
    \   6.8    LocalConnectionOptions.....................................157\n  \
    \ 6.9    Reason Codes...............................................157\n   6.10\
    \   RestartMethods.............................................158\n   6.11  \
    \ Return Codes...............................................158\n   7.     Versions\
    \ and Compatibility.................................158\n   7.1    Changes from\
    \ RFC 2705......................................158\n   8.     Security Considerations....................................164\n\
    \   9.     Acknowledgments............................................164\n  \
    \ 10.    References.................................................164\n   Appendix\
    \ A: Formal Syntax Description of the Protocol.............167\n   Appendix B:\
    \ Base Package..........................................175\n   B.1    Events.....................................................175\n\
    \   B.2    Extension Parameters.......................................176\n  \
    \ B.2.1  PersistentEvents...........................................176\n   B.2.2\
    \  NotificationState..........................................177\n   B.3    Verbs......................................................177\n\
    \   Appendix C: IANA Considerations...................................179\n  \
    \ C.1    New MGCP Package Sub-Registry..............................179\n   C.2\
    \    New MGCP Package...........................................179\n   C.3  \
    \  New MGCP LocalConnectionOptions Sub-Registry...............179\n   Appendix\
    \ D: Mode Interactions.....................................180\n   Appendix E:\
    \ Endpoint Naming Conventions...........................182\n   E.1    Analog\
    \ Access Line Endpoints...............................182\n   E.2    Digital Trunks.............................................182\n\
    \   E.3    Virtual Endpoints..........................................183\n  \
    \ E.4    Media Gateway..............................................184\n   E.5\
    \    Range Wildcards............................................184\n   Appendix\
    \ F: Example Command Encodings.............................185\n   F.1    NotificationRequest........................................185\n\
    \   F.2    Notify.....................................................186\n  \
    \ F.3    CreateConnection...........................................186\n   F.4\
    \    ModifyConnection...........................................189\n   F.5  \
    \  DeleteConnection (from the Call Agent).....................189\n   F.6    DeleteConnection\
    \ (from the gateway)........................190\n   F.7    DeleteConnection (multiple\
    \ connections\n          from the Call Agent).......................................190\n\
    \   F.8    AuditEndpoint..............................................191\n  \
    \ F.9    AuditConnection............................................192\n   F.10\
    \   RestartInProgress..........................................193\n   Appendix\
    \ G: Example Call Flows....................................194\n   G.1    Restart....................................................195\n\
    \   G.1.1  Residential Gateway Restart................................195\n  \
    \ G.1.2  Call Agent Restart.........................................198\n   G.2\
    \    Connection Creation........................................200\n   G.2.1\
    \  Residential Gateway to Residential Gateway.................200\n   G.3    Connection\
    \ Deletion........................................206\n   G.3.1  Residential Gateway\
    \ to Residential Gateway.................206\n   Authors' Addresses................................................209\n\
    \   Full Copyright Statement..........................................210\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This document describes an abstract application programming\
    \ interface\n   (MGCI) and a corresponding protocol (MGCP) for controlling media\n\
    \   gateways from external call control elements called media gateway\n   controllers\
    \ or Call Agents.  A media gateway is typically a network\n   element that provides\
    \ conversion between the audio signals carried on\n   telephone circuits and data\
    \ packets carried over the Internet or over\n   other packet networks.  Examples\
    \ of media gateways are:\n   * Trunking gateways, that interface between the telephone\
    \ network and\n     a Voice over IP network.  Such gateways typically manage a\
    \ large\n     number of digital circuits.\n   * Voice over ATM gateways, which\
    \ operate much the same way as voice\n     over IP trunking gateways, except that\
    \ they interface to an ATM\n     network.\n   * Residential gateways, that provide\
    \ a traditional analog (RJ11)\n     interface to a Voice over IP network.  Examples\
    \ of residential\n     gateways include cable modem/cable set-top boxes, xDSL\
    \ devices, and\n     broad-band wireless devices.\n   * Access gateways, that\
    \ provide a traditional analog (RJ11) or\n     digital PBX interface to a Voice\
    \ over IP network.  Examples of\n     access gateways include small-scale voice\
    \ over IP gateways.\n   * Business gateways, that provide a traditional digital\
    \ PBX interface\n     or an integrated \"soft PBX\" interface to a Voice over\
    \ IP network.\n   * Network Access Servers, that can attach a \"modem\" to a telephone\n\
    \     circuit and provide data access to the Internet.  We expect that in\n  \
    \   the future, the same gateways will combine Voice over IP services\n     and\
    \ Network Access services.\n   * Circuit switches, or packet switches, which can\
    \ offer a control\n     interface to an external call control element.\n   MGCP\
    \ assumes a call control architecture where the call control\n   \"intelligence\"\
    \ is outside the gateways and handled by external call\n   control elements known\
    \ as Call Agents.  The MGCP assumes that these\n   call control elements, or Call\
    \ Agents, will synchronize with each\n   other to send coherent commands and responses\
    \ to the gateways under\n   their control.  If this assumption is violated, inconsistent\
    \ behavior\n   should be expected.  MGCP does not define a mechanism for\n   synchronizing\
    \ Call Agents.  MGCP is, in essence, a master/slave\n   protocol, where the gateways\
    \ are expected to execute commands sent by\n   the Call Agents.  In consequence,\
    \ this document specifies in great\n   detail the expected behavior of the gateways,\
    \ but only specifies\n   those parts of a Call Agent implementation, such as timer\
    \ management,\n   that are mandated for proper operation of the protocol.\n  \
    \ MGCP assumes a connection model where the basic constructs are\n   endpoints\
    \ and connections.  Endpoints are sources and/or sinks of\n   data and can be\
    \ physical or virtual.  Examples of physical endpoints\n   are:\n   * An interface\
    \ on a gateway that terminates a trunk connected to a\n     PSTN switch (e.g.,\
    \ Class 5, Class 4, etc.).  A gateway that\n     terminates trunks is called a\
    \ trunking gateway.\n   * An interface on a gateway that terminates an analog\
    \ POTS connection\n     to a phone, key system, PBX, etc.  A gateway that terminates\n\
    \     residential POTS lines (to phones) is called a residential gateway.\n  \
    \ An example of a virtual endpoint is an audio source in an audio-\n   content\
    \ server.  Creation of physical endpoints requires hardware\n   installation,\
    \ while creation of virtual endpoints can be done by\n   software.\n   Connections\
    \ may be either point to point or multipoint.  A point to\n   point connection\
    \ is an association between two endpoints with the\n   purpose of transmitting\
    \ data between these endpoints.  Once this\n   association is established for\
    \ both endpoints, data transfer between\n   these endpoints can take place.  A\
    \ multipoint connection is\n   established by connecting the endpoint to a multipoint\
    \ session.\n   Connections can be established over several types of bearer networks,\n\
    \   for example:\n   * Transmission of audio packets using RTP and UDP over an\
    \ IP network.\n   * Transmission of audio packets using AAL2, or another adaptation\n\
    \     layer, over an ATM network.\n   * Transmission of packets over an internal\
    \ connection, for example\n     the TDM backplane or the interconnection bus of\
    \ a gateway.  This is\n     used, in particular, for \"hairpin\" connections,\
    \ connections that\n     terminate in a gateway but are immediately rerouted over\
    \ the\n     telephone network.\n   For point-to-point connections the endpoints\
    \ of a connection could be\n   in separate gateways or in the same gateway.\n"
- title: 1.1 Relation with the H.323 Standards
  contents:
  - "1.1 Relation with the H.323 Standards\n   MGCP is designed as an internal protocol\
    \ within a distributed system\n   that appears to the outside as a single VoIP\
    \ gateway.  This system is\n   composed of a Call Agent, that may or may not be\
    \ distributed over\n   several computer platforms, and of a set of gateways, including\
    \ at\n   least one \"media gateway\" that perform the conversion of media\n  \
    \ signals between circuits and packets, and at least one \"signaling\n   gateway\"\
    \ when connecting to an SS7 controlled network.  In a typical\n   configuration,\
    \ this distributed gateway system will interface on one\n   side with one or more\
    \ telephony (i.e., circuit) switches, and on the\n   other side with H.323 conformant\
    \ systems, as indicated in the\n   following table:\n    ------------------------------------------------------------------\n\
    \   | Functional|  Phone     |  Terminating    |  H.323 conformant     |\n   |\
    \ Plane     |  switch    |  Entity         |  systems              |\n   |-----------|------------|-----------------|-----------------------|\n\
    \   | Signaling |  Signaling |  Call agent     |  Signaling exchanges  |\n   |\
    \ Plane     |  exchanges |                 |  with the Call Agent  |\n   |   \
    \        |  through   |                 |  through H.225/RAS and|\n   |      \
    \     |  SS7/ISUP  |                 |  H.225/Q.931.         |\n   |-----------|------------|-----------------|-----------------------|\n\
    \   |           |            |                 |  Possible negotiation |\n   |\
    \           |            |                 |  of logical channels  |\n   |   \
    \        |            |                 |  and transmission     |\n   |      \
    \     |            |                 |  parameters through   |\n   |         \
    \  |            |                 |  H.245 with the call  |\n   |           |\
    \            |                 |  agent.               |\n   |-----------|------------|-----------------|-----------------------|\n\
    \   |           |            |  Internal       |                       |\n   |\
    \           |            |  synchronization|                       |\n   |   \
    \        |            |  through MGCP   |                       |\n   |-----------|------------|-----------------|-----------------------|\n\
    \   | Bearer    |  Connection|  Telephony      |  Transmission of VoIP |\n   |\
    \ Data      |  through   |  gateways       |  data using RTP       |\n   | Transport\
    \ |  high speed|                 |  directly between the |\n   | Plane     | \
    \ trunk     |                 |  H.323 station and the|\n   |           |  groups\
    \    |                 |  gateway.             |\n    ------------------------------------------------------------------\n\
    \   In the MGCP model, the gateways focus on the audio signal translation\n  \
    \ function, while the Call Agent handles the call signaling and call\n   processing\
    \ functions.  As a consequence, the Call Agent implements\n   the \"signaling\"\
    \ layers of the H.323 standard, and presents itself as\n   an \"H.323 Gatekeeper\"\
    \ or as one or more \"H.323 Endpoints\" to the\n   H.323 systems.\n"
- title: 1.2  Relation with the IETF Standards
  contents:
  - "1.2  Relation with the IETF Standards\n   While H.323 is the recognized standard\
    \ for VoIP terminals, the IETF\n   has also produced specifications for other\
    \ types of multi-media\n   applications.  These other specifications include:\n\
    \   * the Session Description Protocol (SDP), RFC 2327\n   * the Session Announcement\
    \ Protocol (SAP), RFC 2974\n   * the Session Initiation Protocol (SIP), RFC 3261\n\
    \   * the Real Time Streaming Protocol (RTSP), RFC 2326.\n   The latter three\
    \ specifications are in fact alternative signaling\n   standards that allow for\
    \ the transmission of a session description to\n   an interested party.  SAP is\
    \ used by multicast session managers to\n   distribute a multicast session description\
    \ to a large group of\n   recipients, SIP is used to invite an individual user\
    \ to take part in\n   a point-to-point or unicast session, RTSP is used to interface\
    \ a\n   server that provides real time data.  In all three cases, the session\n\
    \   description is described according to SDP; when audio is transmitted,\n  \
    \ it is transmitted through the Real-time Transport Protocol, RTP.\n   The distributed\
    \ gateway systems and MGCP will enable PSTN telephony\n   users to access sessions\
    \ set up using SAP, SIP or RTSP.  The Call\n   Agent provides for signaling conversion,\
    \ according to the following\n   table:\n    ------------------------------------------------------------------\n\
    \   | Functional|  Phone     |  Terminating  |  IETF conforming systems|\n   |\
    \ Plane     |  switch    |  Entity       |                         |\n   |-----------|------------|---------------|-------------------------|\n\
    \   | Signaling |  Signaling |  Call agent   |  Signaling exchanges    |\n   |\
    \ Plane     |  exchanges |               |  with the Call Agent    |\n   |   \
    \        |  through   |               |  through SAP, SIP or    |\n   |      \
    \     |  SS7/ISUP  |               |  RTSP.                  |\n   |-----------|------------|---------------|-------------------------|\n\
    \   |           |            |               |  Negotiation of session |\n   |\
    \           |            |               |  description parameters |\n   |   \
    \        |            |               |  through SDP (telephony |\n   |      \
    \     |            |               |  gateway terminated but |\n   |         \
    \  |            |               |  passed via the call    |\n   |           |\
    \            |               |  agent to and from the  |\n   |           |   \
    \         |               |  IETF conforming system)|\n   |-----------|------------|---------------|-------------------------|\n\
    \   |           |            | Internal syn- |                         |\n   |\
    \           |            | chronization  |                         |\n   |   \
    \        |            | through MGCP  |                         |\n   |-----------|------------|---------------|-------------------------|\n\
    \   | Bearer    |  Connection|  Telephony    |  Transmission of VoIP   |\n   |\
    \ Data      |  through   |  gateways     |  data using RTP,        |\n   | Transport\
    \ |  high speed|               |  directly between the   |\n   | Plane     | \
    \ trunk     |               |  remote IP end system   |\n   |           |  groups\
    \    |               |  and the gateway.       |\n    ------------------------------------------------------------------\n\
    \   The SDP standard has a pivotal status in this architecture.  We will\n   see\
    \ in the following description that we also use it to carry session\n   descriptions\
    \ in MGCP.\n"
- title: 1.3 Definitions
  contents:
  - "1.3 Definitions\n   Trunk:  A communication channel between two switching systems,\
    \ e.g.,\n   a DS0 on a T1 or E1 line.\n"
- title: 1.4 Conventions used in this Document
  contents:
  - "1.4 Conventions used in this Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"NOT RECOMMENDED, \"MAY\", and\n   \"OPTIONAL\" in this document are to be\
    \ interpreted as described in BCP\n   14, RFC 2119 [2].\n"
- title: 2. Media Gateway Control Interface
  contents:
  - "2. Media Gateway Control Interface\n   The interface functions provide for connection\
    \ control and endpoint\n   control.  Both use the same system model and the same\
    \ naming\n   conventions.\n"
- title: 2.1 Model and Naming Conventions
  contents:
  - "2.1 Model and Naming Conventions\n   The MGCP assumes a connection model where\
    \ the basic constructs are\n   endpoints and connections.  Connections are grouped\
    \ in calls.  One or\n   more connections can belong to one call.  Connections\
    \ and calls are\n   set up at the initiative of one or more Call Agents.\n"
- title: 2.1.1 Types of Endpoints
  contents:
  - "2.1.1 Types of Endpoints\n   In the introduction, we presented several classes\
    \ of gateways.  Such\n   classifications, however, can be misleading.  Manufacturers\
    \ can\n   arbitrarily decide to provide several types of services in a single\n\
    \   package.  A single product could well, for example, provide some\n   trunk\
    \ connections to telephony switches, some primary rate\n   connections and some\
    \ analog line interfaces, thus sharing the\n   characteristics of what we described\
    \ in the introduction as\n   \"trunking\", \"access\" and \"residential\" gateways.\
    \  MGCP does not make\n   assumptions about such groupings.  We simply assume\
    \ that media\n   gateways support collections of endpoints.  The type of the endpoint\n\
    \   determines its functionality.  Our analysis, so far, has led us to\n   isolate\
    \ the following basic endpoint types:\n   * Digital channel (DS0),\n   * Analog\
    \ line,\n   * Announcement server access point,\n   * Interactive Voice Response\
    \ access point,\n   * Conference bridge access point,\n   * Packet relay,\n  \
    \ * ATM \"trunk side\" interface.\n   In this section, we will describe the expected\
    \ behavior of such\n   endpoints.\n   This list is not final.  There may be other\
    \ types of endpoints\n   defined in the future, for example test endpoints that\
    \ could be used\n   to check network quality, or frame-relay endpoints that could\
    \ be used\n   to manage audio channels multiplexed over a frame-relay virtual\n\
    \   circuit.\n"
- title: 2.1.1.1 Digital Channel (DS0)
  contents:
  - "2.1.1.1 Digital Channel (DS0)\n   Digital channels provide a 64 Kbps service.\
    \  Such channels are found\n   in trunk and ISDN interfaces.  They are typically\
    \ part of digital\n   multiplexes, such as T1, E1, T3 or E3 interfaces.  Media\
    \ gateways\n   that support such channels are capable of translating the digital\n\
    \   signals received on the channel, which may be encoded according to\n   A-law\
    \ or mu-law, using either the complete set of 8 bits per sample\n   or only 7\
    \ of these bits, into audio packets.  When the media gateway\n   also supports\
    \ a Network Access Server (NAS) service, the gateway\n   shall be capable of receiving\
    \ either audio-encoded data (modem\n   connection) or binary data (ISDN connection)\
    \ and convert them into\n   data packets.\n                                  \
    \       +-------\n                           +------------+|\n              (channel)\
    \ ===|DS0 endpoint| -------- Connections\n                           +------------+|\n\
    \                                         +-------\n   Media gateways should be\
    \ able to establish several connections\n   between the endpoint and the packet\
    \ networks, or between the endpoint\n   and other endpoints in the same gateway.\
    \  The signals originating\n   from these connections shall be mixed according\
    \ to the connection\n   \"mode\", as specified later in this document.  The precise\
    \ number of\n   connections that an endpoint supports is a characteristic of the\n\
    \   gateway, and may in fact vary according to the allocation of\n   resources\
    \ within the gateway.\n   In some cases, digital channels are used to carry signaling.\
    \  This is\n   the case for example for SS7 \"F\" links, or ISDN \"D\" channels.\
    \  Media\n   gateways that support these signaling functions shall be able to\
    \ send\n   and receive the signaling packets to and from a Call Agent, using the\n\
    \   \"backhaul\" procedures defined by the SIGTRAN working group of the\n   IETF.\
    \  Digital channels are sometimes used in conjunction with\n   channel associated\
    \ signaling, such as \"MF R2\".  Media gateways that\n   support these signaling\
    \ functions shall be able to detect and produce\n   the corresponding signals,\
    \ such as for example \"wink\" or \"A\",\n   according to the event signaling\
    \ and reporting procedures defined in\n   MGCP.\n"
- title: 2.1.1.2 Analog Line
  contents:
  - "2.1.1.2 Analog Line\n   Analog lines can be used either as a \"client\" interface,\
    \ providing\n   service to a classic telephone unit, or as a \"service\" interface,\n\
    \   allowing the gateway to send and receive analog calls.  When the\n   media\
    \ gateway also supports a NAS service, the gateway shall be\n   capable of receiving\
    \ audio-encoded data (modem connection) and\n   convert them into data packets.\n\
    \                                         +-------\n                        +---------------+|\n\
    \              (line) ===|analog endpoint| -------- Connections\n            \
    \            +---------------+|\n                                         +-------\n\
    \   Media gateways should be able to establish several connections\n   between\
    \ the endpoint and the packet networks, or between the endpoint\n   and other\
    \ endpoints in the same gateway.  The audio signals\n   originating from these\
    \ connections shall be mixed according to the\n   connection \"mode\", as specified\
    \ later in this document.  The precise\n   number of connections that an endpoint\
    \ supports is a characteristic\n   of the gateway, and may in fact vary according\
    \ to the allocation of\n   resources within the gateway.  A typical gateway should\
    \ however be\n   able to support two or three connections per endpoint, in order\
    \ to\n   support services such as \"call waiting\" or \"three way calling\".\n"
- title: 2.1.1.3 Announcement Server Access Point
  contents:
  - "2.1.1.3 Announcement Server Access Point\n   An announcement server endpoint\
    \ provides access to an announcement\n   service.  Under requests from the Call\
    \ Agent, the announcement server\n   will \"play\" a specified announcement. \
    \ The requests from the Call\n   Agent will follow the event signaling and reporting\
    \ procedures\n   defined in MGCP.\n                  +----------------------+\n\
    \                  | Announcement endpoint| -------- Connection\n            \
    \      +----------------------+\n   A given announcement endpoint is not expected\
    \ to support more than\n   one connection at a time.  If several connections were\
    \ established to\n   the same endpoint, then the same announcements would be played\n\
    \   simultaneously over all the connections.\n   Connections to an announcement\
    \ server are typically one way, or \"half\n   duplex\" -- the announcement server\
    \ is not expected to listen to the\n   audio signals from the connection.\n"
- title: 2.1.1.4 Interactive Voice Response Access Point
  contents:
  - "2.1.1.4 Interactive Voice Response Access Point\n   An Interactive Voice Response\
    \ (IVR) endpoint provides access to an\n   IVR service.  Under requests from the\
    \ Call Agent, the IVR server will\n   \"play\" announcements and tones, and will\
    \ \"listen\" to responses, such\n   as DTMF input or voice messages, from the\
    \ user.  The requests from\n   the Call Agent will follow the event signaling\
    \ and reporting\n   procedures defined in MGCP.\n                      +-------------+\n\
    \                      | IVR endpoint| -------- Connection\n                 \
    \     +-------------+\n   A given IVR endpoint is not expected to support more\
    \ than one\n   connection at a time.  If several connections were established\
    \ to the\n   same endpoint, then the same tones and announcements would be played\n\
    \   simultaneously over all the connections.\n"
- title: 2.1.1.5 Conference Bridge Access Point
  contents:
  - "2.1.1.5 Conference Bridge Access Point\n   A conference bridge endpoint is used\
    \ to provide access to a specific\n   conference.\n                          \
    \                 +-------\n               +--------------------------+|\n   \
    \            |Conference bridge endpoint| -------- Connections\n             \
    \  +--------------------------+|\n                                           +-------\n\
    \   Media gateways should be able to establish several connections\n   between\
    \ the endpoint and the packet networks, or between the endpoint\n   and other\
    \ endpoints in the same gateway.  The signals originating\n   from these connections\
    \ shall be mixed according to the connection\n   \"mode\", as specified later\
    \ in this document.  The precise number of\n   connections that an endpoint supports\
    \ is a characteristic of the\n   gateway, and may in fact vary according to the\
    \ allocation of\n   resources within the gateway.\n"
- title: 2.1.1.6 Packet Relay
  contents:
  - "2.1.1.6 Packet Relay\n   A packet relay endpoint is a specific form of conference\
    \ bridge, that\n   typically only supports two connections.  Packets relays can\
    \ be found\n   in firewalls between a protected and an open network, or in\n \
    \  transcoding servers used to provide interoperation between\n   incompatible\
    \ gateways, for example gateways that do not support\n   compatible compression\
    \ algorithms, or gateways that operate over\n   different transmission networks\
    \ such as IP and ATM.\n                                           +-------\n \
    \                  +---------------------+ |\n                   |Packet relay\
    \ endpoint|  2 connections\n                   +---------------------+ |\n   \
    \                                        +-------\n"
- title: 2.1.1.7 ATM "trunk side" Interface
  contents:
  - "2.1.1.7 ATM \"trunk side\" Interface\n   ATM \"trunk side\" endpoints are typically\
    \ found when one or several\n   ATM permanent virtual circuits are used as a replacement\
    \ for the\n   classic \"TDM\" trunks linking switches.  When ATM/AAL2 is used,\n\
    \   several trunks or channels are multiplexed on a single virtual\n   circuit;\
    \ each of these trunks correspond to a single endpoint.\n                    \
    \                      +-------\n                      +------------------+|\n\
    \          (channel) = |ATM trunk endpoint| -------- Connections\n           \
    \           +------------------+|\n                                          +-------\n\
    \   Media gateways should be able to establish several connections\n   between\
    \ the endpoint and the packet networks, or between the endpoint\n   and other\
    \ endpoints in the same gateway.  The signals originating\n   from these connections\
    \ shall be mixed according to the connection\n   \"mode\", as specified later\
    \ in this document.  The precise number of\n   connections that an endpoint supports\
    \ is a characteristic of the\n   gateway, and may in fact vary according to the\
    \ allocation of\n   resources within the gateway.\n"
- title: 2.1.2 Endpoint Identifiers
  contents:
  - "2.1.2 Endpoint Identifiers\n   Endpoint identifiers have two components that\
    \ both are case-\n   insensitive:\n   * the domain name of the gateway that is\
    \ managing the endpoint\n   * a local name within that gateway\n   Endpoint names\
    \ are of the form:\n      local-endpoint-name@domain-name\n   where domain-name\
    \ is an absolute domain-name as defined in RFC 1034\n   and includes a host portion,\
    \ thus an example domain-name could be:\n      mygateway.whatever.net\n   Also,\
    \ domain-name may be an IP-address of the form defined for domain\n   name in\
    \ RFC 821, thus another example could be (see RFC 821 for\n   details):\n    \
    \  [192.168.1.2]\n   Both IPv4 and IPv6 addresses can be specified, however use\
    \ of IP\n   addresses as endpoint identifiers is generally discouraged.\n   Note\
    \ that since the domain name portion is part of the endpoint\n   identifier, different\
    \ forms or different values referring to the same\n   entity are not freely interchangeable.\
    \  The most recently supplied\n   form and value MUST always be used.\n   The\
    \ local endpoint name is case-insensitive.  The syntax of the local\n   endpoint\
    \ name is hierarchical, where the least specific component of\n   the name is\
    \ the leftmost term, and the most specific component is the\n   rightmost term.\
    \  The precise syntax depends on the type of endpoint\n   being named and MAY\
    \ start with a term that identifies the endpoint\n   type.  In any case, the local\
    \ endpoint name MUST adhere to the\n   following naming rules:\n   1) The individual\
    \ terms of the naming path MUST be separated by a\n      single slash (\"/\",\
    \ ASCII 2F hex).\n   2) The individual terms are character strings composed of\
    \ letters,\n      digits or other printable characters, with the exception of\n\
    \      characters used as delimiters (\"/\", \"@\"), characters used for\n   \
    \   wildcarding (\"*\", \"$\") and white spaces.\n   3) Wild-carding is represented\
    \ either by an asterisk (\"*\") or a\n      dollar sign (\"$\") for the terms\
    \ of the naming path which are to be\n      wild-carded.  Thus, if the full local\
    \ endpoint name is of the\n      form:\n          term1/term2/term3\n      then\
    \ the entity name field looks like this depending on which\n      terms are wild-carded:\n\
    \          */term2/term3 if term1 is wild-carded\n          term1/*/term3 if term2\
    \ is wild-carded\n          term1/term2/* if term3 is wild-carded\n          term1/*/*\
    \     if term2 and term3 are wild-carded, etc.\n      In each of these examples\
    \ a dollar sign could have appeared\n      instead of an asterisk.\n   4) A term\
    \ represented by an asterisk (\"*\") is to be interpreted as:\n      \"use ALL\
    \ values of this term known within the scope of the Media\n      Gateway\".  Unless\
    \ specified otherwise, this refers to all\n      endpoints configured for service,\
    \ regardless of their actual\n      service state, i.e., in-service or out-of-service.\n\
    \   5) A term represented by a dollar sign (\"$\") is to be interpreted as:\n\
    \      \"use ANY ONE value of this term known within the scope of the\n      Media\
    \ Gateway\".  Unless specified otherwise, this only refers to\n      endpoints\
    \ that are in-service.\n   Furthermore, it is RECOMMENDED that Call Agents adhere\
    \ to the\n   following:\n   * Wild-carding should only be done from the right,\
    \ thus if a term is\n     wild-carded, then all terms to the right of that term\
    \ should be\n     wild-carded as well.\n   * In cases where mixed dollar sign\
    \ and asterisk wild-cards are used,\n     dollar-signs should only be used from\
    \ the right, thus if a term had\n     a dollar sign wild-card, all terms to the\
    \ right of that term should\n     also contain dollar sign wild-cards.\n   The\
    \ description of a specific command may add further criteria for\n   selection\
    \ within the general rules given above.\n   Note, that wild-cards may be applied\
    \ to more than one term in which\n   case they shall be evaluated from left to\
    \ right.  For example, if we\n   have the endpoint names \"a/1\", \"a/2\", \"\
    b/1\", and \"b/2\", then \"$/*\"\n   (which is not recommended) will evaluate\
    \ to either \"a/1, a/2\", or\n   \"b/1, b/2\".  However, \"*/$\" may evaluate\
    \ to \"a/1, b/1\", \"a/1, b/2\",\n   \"a/2, b/1\", or \"a/2, b/2\".  The use of\
    \ mixed wild-cards in a command\n   is considered error prone and is consequently\
    \ discouraged.\n   A local name that is composed of only a wildcard character\
    \ refers to\n   either all (*) or any ($) endpoints within the media gateway.\n"
- title: 2.1.3 Calls and Connections
  contents:
  - "2.1.3 Calls and Connections\n   Connections are created on the Call Agent on\
    \ each endpoint that will\n   be involved in the \"call\".  In the classic example\
    \ of a connection\n   between two \"DS0\" endpoints (EP1 and EP2), the Call Agents\n\
    \   controlling the endpoints will establish two connections (C1 and C2):\n  \
    \                +---+                            +---+\n    (channel1) ===|EP1|--(C1)--...\
    \        ...(C2)--|EP2|===(channel2)\n                  +---+                \
    \            +---+\n   Each connection will be designated locally by an endpoint\
    \ unique\n   connection identifier, and will be characterized by connection\n\
    \   attributes.\n   When the two endpoints are located on gateways that are managed\
    \ by\n   the same Call Agent, the creation is done via the three following\n \
    \  steps:\n   1) The Call Agent asks the first gateway to \"create a connection\"\
    \ on\n      the first endpoint.  The gateway allocates resources to that\n   \
    \   connection, and responds to the command by providing a \"session\n      description\"\
    .  The session description contains the information\n      necessary for a third\
    \ party to send packets towards the newly\n      created connection, such as for\
    \ example IP address, UDP port, and\n      codec parameters.\n   2) The Call Agent\
    \ then asks the second gateway to \"create a\n      connection\" on the second\
    \ endpoint.  The command carries the\n      \"session description\" provided by\
    \ the first gateway.  The gateway\n      allocates resources to that connection,\
    \ and responds to the\n      command by providing its own \"session description\"\
    .\n   3) The Call Agent then uses a \"modify connection\" command to provide\n\
    \      this second \"session description\" to the first endpoint.  Once\n    \
    \  this is done, communication can proceed in both directions.\n   When the two\
    \ endpoints are located on gateways that are managed by\n   two different Call\
    \ Agents, the Call Agents exchange information\n   through a Call-Agent to Call-Agent\
    \ signaling protocol, e.g., SIP [7],\n   in order to synchronize the creation\
    \ of the connection on the two\n   endpoints.\n   Once a connection has been established,\
    \ the connection parameters can\n   be modified at any time by a \"modify connection\"\
    \ command.  The Call\n   Agent may for example instruct the gateway to change\
    \ the codec used\n   on a connection, or to modify the IP address and UDP port\
    \ to which\n   data should be sent, if a connection is \"redirected\".\n   The\
    \ Call Agent removes a connection by sending a \"delete connection\"\n   command\
    \ to the gateway.  The gateway may also, under some\n   circumstances, inform\
    \ a gateway that a connection could not be\n   sustained.\n   The following diagram\
    \ provides a view of the states of a connection,\n   as seen from the gateway:\n\
    \           Create connection\n              received\n                  |\n \
    \                 V\n         +-------------------+\n         |resource allocation|-(failed)-+\n\
    \         +-------------------+          |\n                  |           (connection\
    \ refused)\n            (successful)\n                  |\n                  v\n\
    \     +----------->+\n     |            |\n     |   +-------------------+\n  \
    \   |   |  remote session   |\n     |   |   description     |----------(yes)--------+\n\
    \     |   |    available ?    |                       |\n     |   +-------------------+\
    \                       |\n     |            |                               \
    \   |\n     |          (no)                                 |\n     |        \
    \    |                                  |\n     |      +-----------+         \
    \                +------+\n     | +--->| half open |------> Delete   <-------|\
    \ open |<----------+\n     | |    |  (wait)   |      Connection         |(wait)|\
    \           |\n     | |    +-----------+       received          +------+    \
    \       |\n     | |          |                 |                |            \
    \   |\n     | |   Modify Connection        |         Modify Connection      |\n\
    \     | |      received              |            received            |\n    \
    \ | |          |                 |                |               |\n     | |\
    \ +--------------------+     |       +--------------------+   |\n     | | |assess\
    \ modification |     |       |assess modification |   |\n     | | +--------------------+\
    \     |       +--------------------+   |\n     | |    |             |        \
    \ |          |             |       |\n     | |(failed)     (successful)   |  \
    \    (failed)     (successful) |\n     | |    |             |         |      \
    \    |             |       |\n     | +<---+             |         |          +-------------+-------+\n\
    \     |                    |         |\n     +<-------------------+         |\n\
    \                                    |\n                           +-----------------+\n\
    \                           | Free connection |\n                           |\
    \ resources.      |\n                           | Report.         |\n        \
    \                   +-----------------+\n                                    |\n\
    \                                    V\n"
- title: 2.1.3.1 Names of Calls
  contents:
  - "2.1.3.1 Names of Calls\n   One of the attributes of each connection is the \"\
    call identifier\",\n   which as far as the MGCP protocol is concerned has little\
    \ semantic\n   meaning, and is mainly retained for backwards compatibility.\n\
    \   Calls are identified by unique identifiers, independent of the\n   underlying\
    \ platforms or agents.  Call identifiers are hexadecimal\n   strings, which are\
    \ created by the Call Agent.  The maximum length of\n   call identifiers is 32\
    \ characters.\n   Call identifiers are expected to be unique within the system,\
    \ or at a\n   minimum, unique within the collection of Call Agents that control\
    \ the\n   same gateways.  From the gateway's perspective, the Call identifier\n\
    \   is thus unique.  When a Call Agent builds several connections that\n   pertain\
    \ to the same call, either on the same gateway or in different\n   gateways, these\
    \ connections that belong to the same call should share\n   the same call-id.\
    \  This identifier can then be used by accounting or\n   management procedures,\
    \ which are outside the scope of MGCP.\n"
- title: 2.1.3.2 Names of Connections
  contents:
  - "2.1.3.2 Names of Connections\n   Connection identifiers are created by the gateway\
    \ when it is\n   requested to create a connection.  They identify the connection\n\
    \   within the context of an endpoint.  Connection identifiers are\n   treated\
    \ in MGCP as hexadecimal strings.  The gateway MUST make sure\n   that a proper\
    \ waiting period, at least 3 minutes, elapses between the\n   end of a connection\
    \ that used this identifier and its use in a new\n   connection for the same endpoint\
    \ (gateways MAY decide to use\n   identifiers that are unique within the context\
    \ of the gateway).  The\n   maximum length of a connection identifier is 32 characters.\n"
- title: 2.1.3.3 Management of Resources, Attributes of Connections
  contents:
  - "2.1.3.3 Management of Resources, Attributes of Connections\n   Many types of\
    \ resources will be associated to a connection, such as\n   specific signal processing\
    \ functions or packetization functions.\n   Generally, these resources fall in\
    \ two categories:\n   1) Externally visible resources, that affect the format\
    \ of \"the bits\n      on the network\" and must be communicated to the second\
    \ endpoint\n      involved in the connection.\n   2) Internal resources, that\
    \ determine which signal is being sent over\n      the connection and how the\
    \ received signals are processed by the\n      endpoint.\n   The resources allocated\
    \ to a connection, and more generally the\n   handling of the connection, are\
    \ chosen by the gateway under\n   instructions from the Call Agent.  The Call\
    \ Agent will provide these\n   instructions by sending two sets of parameters\
    \ to the gateway:\n   1) The local directives instruct the gateway on the choice\
    \ of\n      resources that should be used for a connection,\n   2) When available,\
    \ the \"session description\" provided by the other\n      end of the connection\
    \ (referred to as the remote session\n      description).\n   The local directives\
    \ specify such parameters as the mode of the\n   connection (e.g., send-only,\
    \ or send-receive), preferred coding or\n   packetization methods, usage of echo\
    \ cancellation or silence\n   suppression.  (A detailed list can be found in the\
    \ specification of\n   the LocalConnectionOptions parameter of the CreateConnection\n\
    \   command.)  Depending on the parameter, the Call Agent MAY either\n   specify\
    \ a value, a range of values, or no value at all.  This allows\n   various implementations\
    \ to implement various levels of control, from\n   a very tight control where\
    \ the Call Agent specifies minute details of\n   the connection handling to a\
    \ very loose control where the Call Agent\n   only specifies broad guidelines,\
    \ such as the maximum bandwidth, and\n   lets the gateway choose the detailed\
    \ values subject to the\n   guidelines.\n   Based on the value of the local directives,\
    \ the gateway will\n   determine the resources to allocate to the connection.\
    \  When this is\n   possible, the gateway will choose values that are in line\
    \ with the\n   remote session description - but there is no absolute requirement\n\
    \   that the parameters be exactly the same.\n   Once the resources have been\
    \ allocated, the gateway will compose a\n   \"session description\" that describes\
    \ the way it intends to send and\n   receive packets.  Note that the session description\
    \ may in some cases\n   present a range of values.  For example, if the gateway\
    \ is ready to\n   accept one of several compression algorithms, it can provide\
    \ a list\n   of these accepted algorithms.\n                 Local Directives\n\
    \                (from Call Agent 1)\n                        |\n            \
    \            V\n                 +-------------+\n                 | resource\
    \    |\n                 | allocation  |\n                 | (gateway 1) |\n \
    \                +-------------+\n                   |         |\n           \
    \        V         |\n                 Local       |\n              Parameters\
    \     V\n                   |      Session\n                   |    Description\
    \               Local Directives\n                   |         |             \
    \      (from Call Agent 2)\n                   |         +---> Transmission----+\
    \      |\n                   |                (CA to CA)     |      |\n      \
    \             |                               V      V\n                   | \
    \                          +-------------+\n                   |             \
    \              | resource    |\n                   |                         \
    \  | allocation  |\n                   |                           | (gateway\
    \ 2) |\n                   |                           +-------------+\n     \
    \              |                               |      |\n                   |\
    \                               |      V\n                   |               \
    \                |    Local\n                   |                            \
    \   |  Parameters\n                   |                            Session\n \
    \                  |                          Description\n                  \
    \ |         +---- Transmission<---+\n                   |         |      (CA to\
    \ CA)\n                   V         V\n                 +-------------+\n    \
    \             | modification|\n                 | (gateway 1) |\n            \
    \     +-------------+\n                   |\n                   V\n          \
    \       Local\n              Parameters\n      -- Information flow: local directives\
    \ & session descriptions --\n"
- title: 2.1.3.4 Special Case of Local Connections
  contents:
  - "2.1.3.4 Special Case of Local Connections\n   Large gateways include a large\
    \ number of endpoints which are often of\n   different types.  In some networks,\
    \ we may often have to set-up\n   connections between endpoints that are located\
    \ within the same\n   gateway.  Examples of such connections may be:\n   * Connecting\
    \ a call to an Interactive Voice-Response unit,\n   * Connecting a call to a Conferencing\
    \ unit,\n   * Routing a call from one endpoint to another, something often\n \
    \    described as a \"hairpin\" connection.\n   Local connections are much simpler\
    \ to establish than network\n   connections.  In most cases, the connection will\
    \ be established\n   through some local interconnecting device, such as for example\
    \ a TDM\n   bus.\n   When two endpoints are managed by the same gateway, it is\
    \ possible to\n   specify the connection in a single command that conveys the\
    \ names of\n   the two endpoints that will be connected.  The command is essentially\n\
    \   a \"Create Connection\" command which includes the name of the second\n  \
    \ endpoint in lieu of the \"remote session description\".\n"
- title: 2.1.4 Names of Call Agents and Other Entities
  contents:
  - "2.1.4 Names of Call Agents and Other Entities\n   The media gateway control protocol\
    \ has been designed to allow the\n   implementation of redundant Call Agents,\
    \ for enhanced network\n   reliability.  This means that there is no fixed binding\
    \ between\n   entities and hardware platforms or network interfaces.\n   Call\
    \ Agent names consist of two parts, similar to endpoint names.\n   Semantically,\
    \ the local portion of the name does not exhibit any\n   internal structure. \
    \ An example Call Agent name is:\n      ca1@ca.whatever.net\n   Note that both\
    \ the local part and the domain name have to be\n   supplied. Nevertheless, implementations\
    \ are encouraged to accept call\n   agent names consisting of only the domain\
    \ name.\n   Reliability can be improved by using the following procedures:\n \
    \  * Entities such as endpoints or Call Agents are identified by their\n     domain\
    \ name, not their network addresses.  Several addresses can be\n     associated\
    \ with a domain name.  If a command or a response cannot\n     be forwarded to\
    \ one of the network addresses, implementations MUST\n     retry the transmission\
    \ using another address.\n   * Entities MAY move to another platform.  The association\
    \ between a\n     logical name (domain name) and the actual platform is kept in\
    \ the\n     domain name service.  Call Agents and Gateways MUST keep track of\n\
    \     the time-to-live of the record they read from the DNS.  They MUST\n    \
    \ query the DNS to refresh the information if the time to live has\n     expired.\n\
    \   In addition to the indirection provided by the use of domain names\n   and\
    \ the DNS, the concept of \"notified entity\" is central to\n   reliability and\
    \ fail-over in MGCP.  The \"notified entity\" for an\n   endpoint is the Call\
    \ Agent currently controlling that endpoint.  At\n   any point in time, an endpoint\
    \ has one, and only one, \"notified\n   entity\" associated with it.  The \"notified\
    \ entity\" determines where\n   the endpoint will send commands to; when the endpoint\
    \ needs to send a\n   command to the Call Agent, it MUST send the command to its\
    \ current\n   \"notified entity\".  The \"notified entity\" however does not determine\n\
    \   where commands can be received from; any Call Agent can send commands\n  \
    \ to the endpoint.  Please refer to Section 5 for the relevant security\n   considerations.\n\
    \   Upon startup, the \"notified entity\" MUST be set to a provisioned\n   value.\
    \  Most commands sent by the Call Agent include the ability to\n   explicitly\
    \ name the \"notified entity\" through the use of a\n   \"NotifiedEntity\" parameter.\
    \  The \"notified entity\" will stay the same\n   until either a new \"NotifiedEntity\"\
    \ parameter is received or the\n   endpoint does a warm or cold (power-cycle)\
    \ restart.\n   If a \"NotifiedEntity\" parameter is sent with an \"empty\" value,\
    \ the\n   \"notified entity\" for the endpoint will be set to empty.  If the\n\
    \   \"notified entity\" for an endpoint is empty or has not been set\n   explicitly\
    \ (neither by a command nor by provisioning), the \"notified\n   entity\" will\
    \ then default to the source address (i.e., IP address and\n   UDP port number)\
    \ of the last successful non-audit command received\n   for the endpoint.  Auditing\
    \ will thus not change the \"notified\n   entity\".  Use of an empty \"NotifiedEntity\"\
    \ parameter value is\n   strongly discouraged as it is error prone and eliminates\
    \ the DNS-\n   based fail-over and reliability mechanisms.\n"
- title: 2.1.5 Digit Maps
  contents:
  - "2.1.5 Digit Maps\n   The Call Agent can ask the gateway to collect digits dialed\
    \ by the\n   user.  This facility is intended to be used with residential gateways\n\
    \   to collect the numbers that a user dials; it can also be used with\n   trunking\
    \ gateways and access gateways alike, to collect access codes,\n   credit card\
    \ numbers and other numbers requested by call control\n   services.\n   One procedure\
    \ is for the gateway to notify the Call Agent of each\n   individual dialed digit,\
    \ as soon as they are dialed.  However, such a\n   procedure generates a large\
    \ number of interactions.  It is preferable\n   to accumulate the dialed numbers\
    \ in a buffer, and to transmit them in\n   a single message.\n   The problem with\
    \ this accumulation approach, however, is that it is\n   hard for the gateway\
    \ to predict how many numbers it needs to\n   accumulate before transmission.\
    \  For example, using the phone on our\n   desk, we can dial the following numbers:\n\
    \        ------------------------------------------------------\n       |  0 \
    \                    |  Local operator             |\n       |  00           \
    \         |  Long distance operator     |\n       |  xxxx                  | \
    \ Local extension number     |\n       |  8xxxxxxx              |  Local number\
    \               |\n       |  #xxxxxxx              |  Shortcut to local number\
    \ at|\n       |                        |  other corporate sites      |\n     \
    \  |  *xx                   |  Star services              |\n       |  91xxxxxxxxxx\
    \          |  Long distance number       |\n       |  9011 + up to 15 digits|\
    \  International number       |\n        ------------------------------------------------------\n\
    \   The solution to this problem is to have the Call Agent load the\n   gateway\
    \ with a digit map that may correspond to the dial plan.  This\n   digit map is\
    \ expressed using a syntax derived from the Unix system\n   command, egrep.  For\
    \ example, the dial plan described above results\n   in the following digit map:\n\
    \      (0T|00T|[1-7]xxx|8xxxxxxx|#xxxxxxx|*xx|91xxxxxxxxxx|9011x.T)\n   The formal\
    \ syntax of the digit map is described by the DigitMap rule\n   in the formal\
    \ syntax description of the protocol (see Appendix A) -\n   support for basic\
    \ digit map letters is REQUIRED while support for\n   extension digit map letters\
    \ is OPTIONAL.  A gateway receiving a digit\n   map with an extension digit map\
    \ letter not supported SHOULD return\n   error code 537 (unknown digit map extension).\n\
    \   A digit map, according to this syntax, is defined either by a (case\n   insensitive)\
    \ \"string\" or by a list of strings.  Each string in the\n   list is an alternative\
    \ numbering scheme, specified either as a set of\n   digits or timers, or as an\
    \ expression over which the gateway will\n   attempt to find a shortest possible\
    \ match.  The following constructs\n   can be used in each numbering scheme:\n\
    \   * Digit:    A digit from \"0\" to \"9\".\n   * Timer:    The symbol \"T\"\
    \ matching a timer expiry.\n   * DTMF:     A digit, a timer, or one of the symbols\
    \ \"A\", \"B\", \"C\",\n               \"D\", \"#\", or \"*\".  Extensions may\
    \ be defined.\n   * Wildcard: The symbol \"x\" which matches any digit (\"0\"\
    \ to \"9\").\n   * Range:    One or more DTMF symbols enclosed between square\
    \ brackets\n               (\"[\" and \"]\").\n   * Subrange: Two digits separated\
    \ by hyphen (\"-\") which matches any\n               digit between and including\
    \ the two.  The subrange\n               construct can only be used inside a range\
    \ construct,\n               i.e., between \"[\" and \"]\".\n   * Position: A\
    \ period (\".\") which matches an arbitrary number,\n               including\
    \ zero, of occurrences of the preceding\n               construct.\n   A gateway\
    \ that detects events to be matched against a digit map MUST\n   do the following:\n\
    \   1) Add the event code as a token to the end of an internal state\n      variable\
    \ for the endpoint called the \"current dial string\".\n   2) Apply the current\
    \ dial string to the digit map table, attempting a\n      match to each expression\
    \ in the digit map.\n   3) If the result is under-qualified (partially matches\
    \ at least one\n      entry in the digit map and doesn't completely match another\n\
    \      entry), do nothing further.\n   If the result matches an entry, or is over-qualified\
    \ (i.e., no\n   further digits could possibly produce a match), send the list\
    \ of\n   accumulated events to the Call Agent.  A match, in this\n   specification,\
    \ can be either a \"perfect match,\" exactly matching one\n   of the specified\
    \ alternatives, or an impossible match, which occurs\n   when the dial string\
    \ does not match any of the alternatives.\n   Unexpected timers, for example,\
    \ can cause \"impossible matches\".  Both\n   perfect matches and impossible matches\
    \ trigger notification of the\n   accumulated digits (which may include other\
    \ events - see Section\n   2.3.3).\n   The following example illustrates the above.\
    \  Assume we have the\n   digit map:\n      (xxxxxxx|x11)\n   and a current dial\
    \ string of \"41\".  Given the input \"1\" the current\n   dial string becomes\
    \ \"411\".  We have a partial match with \"xxxxxxx\",\n   but a complete match\
    \ with \"x11\", and hence we send \"411\" to the Call\n   Agent.\n   The following\
    \ digit map example is more subtle:\n     (0[12].|00|1[12].1|2x.#)\n   Given the\
    \ input \"0\", a match will occur immediately since position\n   (\".\") allows\
    \ for zero occurrences of the preceding construct.  The\n   input \"00\" can thus\
    \ never be produced in this digit map.\n   Given the input \"1\", only a partial\
    \ match exists.  The input \"12\" is\n   also only a partial match, however both\
    \ \"11\" and \"121\" are a match.\n   Given the input \"2\", a partial match exists.\
    \  A partial match also\n   exists for the input \"23\", \"234\", \"2345\", etc.\
    \  A full match does not\n   occur here until a \"#\" is generated, e.g., \"2345#\"\
    .  The input \"2#\"\n   would also have been a match.\n   Note that digit maps\
    \ simply define a way of matching sequences of\n   event codes against a grammar.\
    \  Although digit maps as defined here\n   are for DTMF input, extension packages\
    \ can also be defined so that\n   digit maps can be used for other types of input\
    \ represented by event\n   codes that adhere to the digit map syntax already defined\
    \ for these\n   event codes (e.g., \"1\" or \"T\").  Where such usage is envisioned,\
    \ the\n   definition of the particular event(s) SHOULD explicitly state that in\n\
    \   the package definition.\n   Since digit maps are not bounded in size, it is\
    \ RECOMMENDED that\n   gateways support digit maps up to at least 2048 bytes per\
    \ endpoint.\n"
- title: 2.1.6 Packages
  contents:
  - "2.1.6 Packages\n   MGCP is a modular and extensible protocol, however with extensibility\n\
    \   comes the need to manage, identify, and name the individual\n   extensions.\
    \  This is achieved by the concept of packages, which are\n   simply well-defined\
    \ groupings of extensions.  For example, one\n   package may support a certain\
    \ group of events and signals, e.g.,\n   off-hook and ringing, for analog access\
    \ lines.  Another package may\n   support another group of events and signals\
    \ for analog access lines\n   or for another type of endpoint such as video. \
    \ One or more packages\n   may be supported by a given endpoint.\n   MGCP allows\
    \ the following types of extensions to be defined in a\n   package:\n   * BearerInformation\n\
    \   * LocalConnectionOptions\n   * ExtensionParameters\n   * ConnectionModes\n\
    \   * Events\n   * Signals\n   * Actions\n   * DigitMapLetters\n   * ConnectionParameters\n\
    \   * RestartMethods\n   * ReasonCodes\n   * Return codes\n   each of which will\
    \ be explained in more detail below.  The rules for\n   defining each of these\
    \ extensions in a package are described in\n   Section 6, and the encoding and\
    \ syntax are defined in Section 3 and\n   Appendix A.\n   With the exception of\
    \ DigitMapLetters, a package defines a separate\n   name space for each type of\
    \ extension by adding the package name as a\n   prefix to the extension, i.e.:\n\
    \      package-name/extension\n   Thus the package-name is followed by a slash\
    \ (\"/\") and the name of\n   the extension.\n   An endpoint supporting one or\
    \ more packages may define one of those\n   packages as the default package for\
    \ the endpoint.  Use of the package\n   name for events and signals in the default\
    \ package for an endpoint is\n   OPTIONAL, however it is RECOMMENDED to always\
    \ include the package\n   name.  All other extensions, except DigitMapLetter,\
    \ defined in the\n   package MUST include the package-name when referring to the\n\
    \   extension.\n   Package names are case insensitive strings of letters, hyphens\
    \ and\n   digits, with the restriction that hyphens shall never be the first or\n\
    \   last character in a name.  Examples of package names are \"D\", \"T\",\n \
    \  and \"XYZ\".  Package names are not case sensitive - names such as\n   \"XYZ\"\
    , \"xyz\", and \"xYz\" are equal.\n   Package definitions will be provided in\
    \ other documents and with\n   package names and extensions names registered with\
    \ IANA.  For more\n   details, refer to section 6.\n   Implementers can gain experience\
    \ by using experimental packages.  The\n   name of an experimental package MUST\
    \ start with the two characters\n   \"x-\"; the IANA SHALL NOT register package\
    \ names that start with these\n   characters, or the characters \"x+\", which\
    \ are reserved.  A gateway\n   that receives a command referring to an unsupported\
    \ package MUST\n   return an error (error code 518 - unsupported package, is\n\
    \   RECOMMENDED).\n"
- title: 2.1.7 Events and Signals
  contents:
  - "2.1.7 Events and Signals\n   The concept of events and signals is central to\
    \ MGCP.  A Call Agent\n   may ask to be notified about certain events occurring\
    \ in an endpoint\n   (e.g., off-hook events) by including the name of the event\
    \ in a\n   RequestedEvents parameter (in a NotificationRequest command - see\n\
    \   Section 2.3.3).\n   A Call Agent may also request certain signals to be applied\
    \ to an\n   endpoint (e.g., dial-tone) by supplying the name of the event in a\n\
    \   SignalRequests parameter.\n   Events and signals are grouped in packages,\
    \ within which they share\n   the same name space which we will refer to as event\
    \ names in the\n   following.  Event names are case insensitive strings of letters,\n\
    \   hyphens and digits, with the restriction that hyphens SHALL NOT be\n   the\
    \ first or last character in a name.  Some event codes may need to\n   be parameterized\
    \ with additional data, which is accomplished by\n   adding the parameters between\
    \ a set of parentheses.  Event names are\n   not case sensitive - values such\
    \ as \"hu\", \"Hu\", \"HU\" or \"hU\" are\n   equal.\n   Examples of event names\
    \ can be \"hu\" (off hook or \"hang-up\"\n   transition), \"hf\" (hook-flash)\
    \ or \"0\" (the digit zero).\n   The package name is OPTIONAL for events in the\
    \ default package for an\n   endpoint, however it is RECOMMENDED to always include\
    \ the package\n   name.  If the package name is excluded from the event name,\
    \ the\n   default package name for that endpoint MUST be assumed.  For example,\n\
    \   for an analog access line which has the line package (\"L\") as a\n   default\
    \ with dial-tone (\"dl\") as one of the events in that package,\n   the following\
    \ two event names are equal:\n      L/dl\n   and\n      dl\n   For any other non-default\
    \ packages that are associated with that\n   endpoint, (such as the generic package\
    \ for an analog access\n   endpoint-type for example), the package name MUST be\
    \ included with\n   the event name.  Again, unconditional inclusion of the package\
    \ name\n   is RECOMMENDED.\n   Digits, or letters, are supported in some packages,\
    \ notably \"DTMF\".\n   Digits and letters are defined by the rules \"Digit\"\
    \ and \"Letter\" in\n   the definition of digit maps.  This definition refers\
    \ to the digits\n   (0 to 9), to the asterisk or star (\"*\") and orthotrope,\
    \ number or\n   pound sign (\"#\"), and to the letters \"A\", \"B\", \"C\" and\
    \ \"D\", as well\n   as the timer indication \"T\".  These letters can be combined\
    \ in \"digit\n   string\" that represents the keys that a user punched on a dial.\
    \  In\n   addition, the letter \"X\" can be used to represent all digits (0 to\n\
    \   9).  Also, extensions MAY define use of other letters.  The need to\n   easily\
    \ express the digit strings in earlier versions of the protocol\n   has a consequence\
    \ on the form of event names:\n   An event name that does not denote a digit MUST\
    \ always contain at\n   least one character that is neither a digit, nor one of\
    \ the letters\n   A, B, C, D, T or X (such names also MUST NOT just contain the\
    \ special\n   signs \"*\", or \"#\").  Event names consisting of more than one\n\
    \   character however may use any of the above.\n   A Call Agent may often have\
    \ to ask a gateway to detect a group of\n   events.  Two conventions can be used\
    \ to denote such groups:\n   * The \"*\" and \"all\" wildcard conventions (see\
    \ below) can be used to\n     detect any event belonging to a package, or a given\
    \ event in many\n     packages, or any event in any package supported by the gateway.\n\
    \   * The regular expression Range notation can be used to detect a range\n  \
    \   of digits.\n   The star sign (*) can be used as a wildcard instead of a package\n\
    \   name, and the keyword \"all\" can be used as a wildcard instead of an\n  \
    \ event name:\n   * A name such as \"foo/all\" denotes all events in package \"\
    foo\".\n   * A name such as \"*/bar\" denotes the event \"bar\" in any package\n\
    \     supported by the gateway.\n   * The name \"*/all\" denotes all events supported\
    \ by the endpoint.\n   This specification purposely does not define any additional\
    \ detail\n   for the \"all packages\" and \"all events\" wildcards.  They provide\n\
    \   limited benefits, but introduce significant complexity along with the\n  \
    \ potential for errors.  Their use is consequently strongly\n   discouraged.\n\
    \   The Call Agent can ask a gateway to detect a set of digits or letters\n  \
    \ either by individually describing those letters, or by using the\n   \"range\"\
    \ notation defined in the syntax of digit strings.  For\n   example, the Call\
    \ Agent can:\n   * Use the letter \"x\" to denote\" digits from 0 to 9.\n   *\
    \ Use the notation \"[0-9#]\" to denote the digits 0 to 9 and the pound\n    \
    \ sign.\n   The individual event codes are still defined in a package though\n\
    \   (e.g., the \"DTMF\" package).\n   Events can by default only be generated\
    \ and detected on endpoints,\n   however events can be also be defined so they\
    \ can be generated or\n   detected on connections rather than on the endpoint\
    \ itself (see\n   Section 6.6).  For example, gateways may be asked to provide\
    \ a\n   ringback tone on a connection.  When an event is to be applied on a\n\
    \   connection, the name of the connection MUST be added to the name of\n   the\
    \ event, using an \"at\" sign (@) as a delimiter, as in:\n      G/rt@0A3F58\n\
    \   where \"G\" is the name of the package and \"rt\" is the name of the\n   event.\
    \  Should the connection be deleted while an event or signal is\n   being detected\
    \ or applied on it, that particular event detection or\n   signal generation simply\
    \ stops.  Depending on the signal, this may\n   generate a failure (see below).\n\
    \   The wildcard character \"*\" (star) can be used to denote \"all\n   connections\"\
    .  When this convention is used, the gateway will\n   generate or detect the event\
    \ on all the connections that are\n   connected to the endpoint.  This applies\
    \ to existing as well as\n   future connections created on the endpoint.  An example\
    \ of this\n   convention could be:\n      R/qa@*\n   where \"R\" is the name of\
    \ the package and \"qa\" is the name of the\n   event.\n   When processing a command\
    \ using the \"all connections\" wildcard, the\n   \"*\" wildcard character applies\
    \ to all current and future connections\n   on the endpoint, however it will not\
    \ be expanded.  If a subsequent\n   command either explicitly (e.g., by auditing)\
    \ or implicitly (e.g., by\n   persistence) refers to such an event, the \"*\"\
    \ value will be used.\n   However, when the event is actually observed, that particular\n\
    \   occurrence of the event will include the name of the specific\n   connection\
    \ it occurred on.\n   The wildcard character \"$\" can be used to denote \"the\
    \ current\n   connection\".  It can only be used by the Call Agent, when the event\n\
    \   notification request is \"encapsulated\" within a connection creation\n  \
    \ or modification command.  When this convention is used, the gateway\n   will\
    \ generate or detect the event on the connection that is currently\n   being created\
    \ or modified.  An example of this convention is:\n      G/rt@$\n   When processing\
    \ a command using the \"current connection\" wildcard,\n   the \"$\" wildcard\
    \ character will be expanded to the value of the\n   current connection.  If a\
    \ subsequent command either explicitly (e.g.,\n   by auditing) or implicitly (e.g.,\
    \ by persistence) refers to such an\n   event, the expanded value will be used.\
    \  In other words, the \"current\n   connection\" wildcard is expanded once, which\
    \ is at the initial\n   processing of the command in which it was explicitly included.\n\
    \   The connection id, or a wildcard replacement, can be used in\n   conjunction\
    \ with the \"all packages\" and \"all events\" conventions. For\n   example, the\
    \ notation:\n      */all@*\n   can be used to designate all events on all current\
    \ and future\n   connections on the endpoint.  However, as mentioned before, the\
    \ use\n   of the \"all packages\" and \"all events\" wildcards are strongly\n\
    \   discouraged.\n   Signals are divided into different types depending on their\
    \ behavior:\n   * On/off (OO):  Once applied, these signals last until they are\n\
    \     turned off.  This can only happen as the result of a reboot/restart\n  \
    \   or a new SignalRequests where the signal is explicitly turned off\n     (see\
    \ later).  Signals of type OO are defined to be idempotent, thus\n     multiple\
    \ requests to turn a given OO signal on (or off) are\n     perfectly valid and\
    \ MUST NOT result in any errors.  An On/Off\n     signal could be a visual message-waiting\
    \ indicator (VMWI).  Once\n     turned on, it MUST NOT be turned off until explicitly\
    \ instructed to\n     by the Call Agent, or as a result of an endpoint restart,\
    \ i.e.,\n     these signals will not turn off as a result of the detection of\
    \ a\n     requested event.\n   * Time-out (TO):  Once applied, these signals last\
    \ until they are\n     either cancelled (by the occurrence of an event or by not\
    \ being\n     included in a subsequent (possibly empty) list of signals), or a\n\
    \     signal-specific period of time has elapsed.  A TO signal that times\n  \
    \   out will generate an \"operation complete\" event.  A TO signal could\n  \
    \   be \"ringback\" timing out after 180 seconds.  If an event occurs\n     prior\
    \ to the 180 seconds, the signal will, by default, be stopped\n     (the \"Keep\
    \ signals active\" action - see Section 2.3.3 - will\n     override this behavior).\
    \  If the signal is not stopped, the signal\n     will time out, stop and generate\
    \ an \"operation complete\" event,\n     about which the Call Agent may or may\
    \ not have requested to be\n     notified.  If the Call Agent has asked for the\
    \ \"operation complete\"\n     event to be notified, the \"operation complete\"\
    \ event sent to the\n     Call Agent SHALL include the name(s) of the signal(s)\
    \ that timed\n     out (note that if parameters were passed to the signal, the\n\
    \     parameters will not be reported).  If the signal was generated on a\n  \
    \   connection, the name of the connection SHALL be included as\n     described\
    \ above.  Time-out signals have a default time-out value\n     defined for them,\
    \ which MAY be altered by the provisioning process.\n     Also, the time-out period\
    \ may be provided as a parameter to the\n     signal (see Section 3.2.2.4).  A\
    \ value of zero indicates that the\n     time-out period is infinite.  A TO signal\
    \ that fails after being\n     started, but before having generated an \"operation\
    \ complete\" event\n     will generate an \"operation failure\" event which will\
    \ include the\n     name of the signal that failed.  Deletion of a connection\
    \ with an\n     active TO signal will result in such a failure.\n   * Brief (BR):\
    \  The duration of these signals is normally so short\n     that they stop on\
    \ their own.  If a signal stopping event occurs, or\n     a new SignalRequests\
    \ is applied, a currently active BR signal will\n     not stop.  However, any\
    \ pending BR signals not yet applied MUST be\n     cancelled (a BR signal becomes\
    \ pending if a NotificationRequest\n     includes a BR signal, and there is already\
    \ an active BR signal). As\n     an example, a brief tone could be a DTMF digit.\
    \ If the DTMF digit\n     \"1\" is currently being played, and a signal stopping\
    \ event occurs,\n     the \"1\" would play to completion.  If a request to play\
    \ DTMF digit\n     \"2\" arrives before DTMF digit \"1\" finishes playing, DTMF\
    \ digit \"2\"\n     would become pending.\n   Signal(s) generated on a connection\
    \ MUST include the name of that\n   connection.\n"
- title: 2.2 Usage of SDP
  contents:
  - "2.2 Usage of SDP\n   The Call Agent uses the MGCP to provide the endpoint with\
    \ the\n   description of connection parameters such as IP addresses, UDP port\n\
    \   and RTP profiles.  These descriptions will follow the conventions\n   delineated\
    \ in the Session Description Protocol which is now an IETF\n   proposed standard,\
    \ documented in RFC 2327.\n"
- title: 2.3 Gateway Control Commands
  contents:
  - '2.3 Gateway Control Commands

    '
- title: 2.3.1 Overview of Commands
  contents:
  - "2.3.1 Overview of Commands\n   This section describes the commands of the MGCP.\
    \  The service\n   consists of connection handling and endpoint handling commands.\n\
    \   There are currently nine commands in the protocol:\n   * The Call Agent can\
    \ issue an EndpointConfiguration command to a\n     gateway, instructing the gateway\
    \ about the coding characteristics\n     expected by the \"line-side\" of the\
    \ endpoint.\n   * The Call Agent can issue a NotificationRequest command to a\n\
    \     gateway, instructing the gateway to watch for specific events such\n   \
    \  as hook actions or DTMF tones on a specified endpoint.\n   * The gateway will\
    \ then use the Notify command to inform the Call\n     Agent when the requested\
    \ events occur.\n   * The Call Agent can use the CreateConnection command to create\
    \ a\n     connection that terminates in an \"endpoint\" inside the gateway.\n\
    \   * The Call Agent can use the ModifyConnection command to change the\n    \
    \ parameters associated with a previously established connection.\n   * The Call\
    \ Agent can use the DeleteConnection command to delete an\n     existing connection.\
    \  The DeleteConnection command may also be used\n     by a gateway to indicate\
    \ that a connection can no longer be\n     sustained.\n   * The Call Agent can\
    \ use the AuditEndpoint and AuditConnection\n     commands to audit the status\
    \ of an \"endpoint\" and any connections\n     associated with it.  Network management\
    \ beyond the capabilities\n     provided by these commands is generally desirable.\
    \  Such\n     capabilities are expected to be supported by the use of the Simple\n\
    \     Network Management Protocol (SNMP) and definition of a MIB which is\n  \
    \   outside the scope of this specification.\n   * The Gateway can use the RestartInProgress\
    \ command to notify the\n     Call Agent that a group of endpoints managed by\
    \ the gateway is\n     being taken out-of-service or is being placed back in-service.\n\
    \   These services allow a controller (normally, the Call Agent) to\n   instruct\
    \ a gateway on the creation of connections that terminate in\n   an \"endpoint\"\
    \ attached to the gateway, and to be informed about\n   events occurring at the\
    \ endpoint.  An endpoint may be for example:\n   * A specific trunk circuit, within\
    \ a trunk group terminating in a\n     gateway,\n   * A specific announcement\
    \ handled by an announcement server.\n   Connections are logically grouped into\
    \ \"calls\" (the concept of a\n   \"call\" has however little semantic meaning\
    \ in MGCP itself).  Several\n   connections, that may or may not belong to the\
    \ same call, can\n   terminate in the same endpoint.  Each connection is qualified\
    \ by a\n   \"mode\" parameter, which can be set to \"send only\" (sendonly),\n\
    \   \"receive only\" (recvonly), \"send/receive\" (sendrecv), \"conference\"\n\
    \   (confrnce), \"inactive\" (inactive), \"loopback\", \"continuity test\"\n \
    \  (conttest), \"network loop back\" (netwloop) or \"network continuity\n   test\"\
    \ (netwtest).\n   Media generated by the endpoint is sent on connections whose\
    \ mode is\n   either \"send only\", \"send/receive\", or \"conference\", unless\
    \ the\n   endpoint has a connection in \"loopback\" or \"continuity test\" mode.\n\
    \   However, media generated by applying a signal to a connection is\n   always\
    \ sent on the connection, regardless of the mode.\n   The handling of the media\
    \ streams received on connections is\n   determined by the mode parameters:\n\
    \   * Media streams received through connections in \"receive\",\n     \"conference\"\
    \ or \"send/receive\" mode are mixed and sent to the\n     endpoint, unless the\
    \ endpoint has another connection in \"loopback\"\n     or \"continuity test\"\
    \ mode.\n   * Media streams originating from the endpoint are transmitted over\n\
    \     all the connections whose mode is \"send\", \"conference\" or\n     \"send/receive\"\
    , unless the endpoint has another connection in\n     \"loopback\" or \"continuity\
    \ test\" mode.\n   * In addition to being sent to the endpoint, a media stream\
    \ received\n     through a connection in \"conference\" mode is forwarded to all\
    \ the\n     other connections whose mode is \"conference\".  This also applies\n\
    \     when the endpoint has a connection in \"loopback\" or \"continuity\n   \
    \  test\" mode.  The details of this forwarding, e.g., RTP translator\n     or\
    \ mixer, is outside the scope of this document.\n   Note that in order to detect\
    \ events on a connection, the connection\n   must by default be in one of the\
    \ modes \"receive\", \"conference\",\n   \"send/receive\", \"network loopback\"\
    \ or \"network continuity test\".  The\n   event detection only applies to the\
    \ incoming media.  Connections in\n   \"sendonly\", \"inactive\", \"loopback\"\
    , or \"continuity test\" mode will\n   thus normally not detect any events, although\
    \ requesting to do so is\n   not considered an error.\n   The \"loopback\" and\
    \ \"continuity test\" modes are used during\n   maintenance and continuity test\
    \ operations.  An endpoint may have\n   more than one connection in either \"\
    loopback\" or \"continuity test\"\n   mode.  As long as there is one connection\
    \ in that particular mode,\n   and no other connection on the endpoint is placed\
    \ in a different\n   maintenance or test mode, the maintenance or test operation\
    \ shall\n   continue undisturbed.  There are two flavors of continuity test, one\n\
    \   specified by ITU and one used in the US.  In the first case, the test\n  \
    \ is a loopback test.  The originating switch will send a tone (the go\n   tone)\
    \ on the bearer circuit and expects the terminating switch to\n   loopback the\
    \ tone.  If the originating switch sees the same tone\n   returned (the return\
    \ tone), the COT has passed.  If not, the COT has\n   failed.  In the second case,\
    \ the go and return tones are different.\n   The originating switch sends a certain\
    \ go tone.  The terminating\n   switch detects the go tone, it asserts a different\
    \ return tone in the\n   backwards direction.  When the originating switch detects\
    \ the return\n   tone, the COT is passed.  If the originating switch never detects\
    \ the\n   return tone, the COT has failed.\n   If the mode is set to \"loopback\"\
    , the gateway is expected to return\n   the incoming signal from the endpoint\
    \ back into that same endpoint.\n   This procedure will be used, typically, for\
    \ testing the continuity of\n   trunk circuits according to the ITU specifications.\
    \  If the mode is\n   set to \"continuity test\", the gateway is informed that\
    \ the other end\n   of the circuit has initiated a continuity test procedure according\
    \ to\n   the GR specification (see [22]).  The gateway will place the circuit\n\
    \   in the transponder mode required for dual-tone continuity tests.\n   If the\
    \ mode is set to \"network loopback\", the audio signals received\n   from the\
    \ connection will be echoed back on the same connection.  The\n   media is not\
    \ forwarded to the endpoint.\n   If the mode is set to \"network continuity test\"\
    , the gateway will\n   process the packets received from the connection according\
    \ to the\n   transponder mode required for dual-tone continuity test, and send\
    \ the\n   processed signal back on the connection.  The media is not forwarded\n\
    \   to the endpoint.  The \"network continuity test\" mode is included for\n \
    \  backwards compatibility only and use of it is discouraged.\n"
- title: 2.3.2 EndpointConfiguration
  contents:
  - "2.3.2 EndpointConfiguration\n   The EndpointConfiguration command can be used\
    \ to specify the encoding\n   of the signals that will be received by the endpoint.\
    \  For example,\n   in certain international telephony configurations, some calls\
    \ will\n   carry mu-law encoded audio signals, while others will use A-law.  The\n\
    \   Call Agent can use the EndpointConfiguration command to pass this\n   information\
    \ to the gateway.  The configuration may vary on a call by\n   call basis, but\
    \ can also be used in the absence of any connection.\n         ReturnCode,\n \
    \        [PackageList]\n         <-- EndpointConfiguration(EndpointId,\n     \
    \                              [BearerInformation])\n   EndpointId is the name\
    \ of the endpoint(s) in the gateway where\n   EndpointConfiguration executes.\
    \  The \"any of\" wildcard convention\n   MUST NOT be used.  If the \"all of\"\
    \ wildcard convention is used, the\n   command applies to all the endpoints whose\
    \ name matches the wildcard.\n   BearerInformation is a parameter defining the\
    \ coding of the data sent\n   to and received from the line side.  The information\
    \ is encoded as a\n   list of sub-parameters.  The only sub-parameter defined\
    \ in this\n   version of the specification is the bearer encoding, whose value\
    \ can\n   be set to \"A-law\" or \"mu-law\".  The set of sub-parameters may be\n\
    \   extended.\n   In order to allow for extensibility, while remaining backwards\n\
    \   compatible, the BearerInformation parameter is conditionally optional\n  \
    \ based on the following conditions:\n   * if Extension Parameters (vendor, package\
    \ or other) are not used,\n     the BearerInformation parameter is REQUIRED,\n\
    \   * otherwise, the BearerInformation parameter is OPTIONAL.\n   When omitted,\
    \ BearerInformation MUST retain its current value.\n   ReturnCode is a parameter\
    \ returned by the gateway.  It indicates the\n   outcome of the command and consists\
    \ of an integer number optionally\n   followed by commentary.\n   PackageList\
    \ is a list of supported packages that MAY be included with\n   error code 518\
    \ (unsupported package).\n"
- title: 2.3.3 NotificationRequest
  contents:
  - "2.3.3 NotificationRequest\n   The NotificationRequest command is used to request\
    \ the gateway to\n   send notifications upon the occurrence of specified events\
    \ in an\n   endpoint.  For example, a notification may be requested for when a\n\
    \   gateway detects that an endpoint is receiving tones associated with\n   fax\
    \ communication.  The entity receiving this notification may then\n   decide to\
    \ specify use of a different type of encoding method in the\n   connections bound\
    \ to this endpoint and instruct the gateway\n   accordingly with a ModifyConnection\
    \ Command.\n         ReturnCode,\n         [PackageList]\n         <-- NotificationRequest(EndpointId,\n\
    \                                 [NotifiedEntity,]\n                        \
    \         [RequestedEvents,]\n                                 RequestIdentifier,\n\
    \                                 [DigitMap,]\n                              \
    \   [SignalRequests,]\n                                 [QuarantineHandling,]\n\
    \                                 [DetectEvents,]\n                          \
    \       [encapsulated EndpointConfiguration])\n   EndpointId is the identifier\
    \ for the endpoint(s) in the the gateway\n   where the NotificationRequest executes.\
    \  The \"any of\" wildcard MUST\n   NOT be used.\n   NotifiedEntity is an optional\
    \ parameter that specifies a new\n   \"notified entity\" for the endpoint.\n \
    \  RequestIdentifier is used to correlate this request with the\n   notifications\
    \ that it triggers.  It will be repeated in the\n   corresponding Notify command.\n\
    \   RequestedEvents is a list of events, possibly qualified by event\n   parameters\
    \ (see Section 3.2.2.4), that the gateway is requested to\n   detect and report.\
    \  Such events may include, for example, fax tones,\n   continuity tones, or on-hook\
    \ transition.  Unless otherwise specified,\n   events are detected on the endpoint,\
    \ however some events can be\n   detected on a connection.  A given event MUST\
    \ NOT appear more than\n   once in a RequestedEvents.  If the parameter is omitted,\
    \ it defaults\n   to empty.\n   To each event is associated one or more actions,\
    \ which can be:\n   * Notify the event immediately, together with the accumulated\
    \ list of\n     observed events,\n   * Swap audio,\n   * Accumulate the event\
    \ in an event buffer, but don't notify yet,\n   * Accumulate according to Digit\
    \ Map,\n   * Keep Signal(s) active,\n   * Process the Embedded Notification Request,\n\
    \   * Ignore the event.\n   Support for Notify, Accumulate, Keep Signal(s) Active,\
    \ Embedded\n   Notification Request, and Ignore is REQUIRED.  Support for Accumulate\n\
    \   according to Digit Map is REQUIRED on any endpoint capable of\n   detecting\
    \ DTMF.  Support for any other action is OPTIONAL.  The set\n   of actions can\
    \ be extended.\n   A given action can by default be specified for any event, although\n\
    \   some actions will not make sense for all events.  For example, an\n   off-hook\
    \ event with the Accumulate according to Digit Map action is\n   valid, but will\
    \ of course immediately trigger a digit map mismatch\n   when the off-hook event\
    \ occurs.  Needless to say, such practice is\n   discouraged.\n   Some actions\
    \ can be combined as shown in the table below, where \"Y\"\n   means the two actions\
    \ can be combined, and \"N\" means they cannot:\n       --------------------------------------------------------------\n\
    \      |       | Notif | Swap | Accum | AccDi | KeSiA | EmbNo | Ignor |\n    \
    \  |--------------------------------------------------------------|\n      | Notif\
    \ |   N   |   Y  |   N   |   N   |   Y   |   Y*  |   N   |\n      | Swap  |  \
    \ -   |   N  |   Y   |   N   |   N   |   N   |   Y   |\n      | Accum |   -  \
    \ |   -  |   N   |   N   |   Y   |   Y   |   N   |\n      | AccDi |   -   |  \
    \ -  |   -   |   N   |   Y   |   N   |   N   |\n      | KeSiA |   -   |   -  |\
    \   -   |   -   |   N   |   Y   |   Y   |\n      | EmbNo |   -   |   -  |   -\
    \   |   -   |   -   |   N   |   N   |\n      | Ignor |   -   |   -  |   -   |\
    \   -   |   -   |   -   |   N   |\n       --------------------------------------------------------------\n\
    \      Note (*):  The \"Embedded Notification Request\" can only be\n      combined\
    \ with \"Notify\", if the gateway is allowed to issue more\n      than one Notify\
    \ command per Notification request (see below and\n      Section 4.4.1).\n   If\
    \ no action is specified, the Notify action will be applied.  If one\n   or more\
    \ actions are specified, only those actions apply.  When two or\n   more actions\
    \ are specified, each action MUST be combinable with all\n   the other actions\
    \ as defined by the table above - the individual\n   actions are assumed to occur\
    \ simultaneously.\n   If a client receives a request with an invalid or unsupported\
    \ action\n   or an illegal combination of actions, it MUST return an error to\
    \ the\n   Call Agent (error code 523 - unknown or illegal combination of\n   actions,\
    \ is RECOMMENDED).\n   In addition to the RequestedEvents parameter specified\
    \ in the\n   command, some MGCP packages may contain \"persistent events\" (this\
    \ is\n   generally discouraged though - see Appendix B for an alternative).\n\
    \   Persistent events in a given package are always detected on an\n   endpoint\
    \ that implements that package.  If a persistent event is not\n   included in\
    \ the list of RequestedEvents, and the event occurs, the\n   event will be detected\
    \ anyway and processed like all other events, as\n   if the persistent event had\
    \ been requested with a Notify action.  A\n   NotificationRequest MUST still be\
    \ in place for a persistent event to\n   trigger a Notify though. Thus, informally,\
    \ persistent events can be\n   viewed as always being implicitly included in the\
    \ list of\n   RequestedEvents with an action to Notify, although no glare\n  \
    \ detection, etc., will be performed.\n   Non-persistent events are those events\
    \ that need to be explicitly\n   included in the RequestedEvents list. The (possibly\
    \ empty) list of\n   requested events completely replaces the previous list of\
    \ requested\n   events.  In addition to the persistent events, only the events\n\
    \   specified in the requested events list will be detected by the\n   endpoint.\
    \  If a persistent event is included in the RequestedEvents\n   list, the action\
    \ specified will replace the default action associated\n   with the event for\
    \ the life of the RequestedEvents list, after which\n   the default action is\
    \ restored.  For example, if \"off-hook\"was a\n   persistent event, the \"Ignore\
    \ off-hook\" action was specified, and a\n   new request without any off-hook\
    \ instructions were received, the\n   default \"Notify off-hook\" operation would\
    \ be restored.\n   The gateway will detect the union of the persistent events\
    \ and the\n   requested events.  If an event is not included in either list, it\n\
    \   will be ignored.\n   The Call Agent can send a NotificationRequest with an\
    \ empty (or\n   omitted) RequestedEvents list to the gateway.  The Call Agent\
    \ can do\n   so, for example, to a gateway when it does not want to collect any\n\
    \   more DTMF digits.  However, persistent events will still be detected\n   and\
    \ notified.\n   The Swap Audio action can be used when a gateway handles more\
    \ than\n   one connection on an endpoint.  This will be the case for call\n  \
    \ waiting, and possibly other feature scenarios.  In order to avoid the\n   round-trip\
    \ to the Call Agent when just changing which connection is\n   attached to the\
    \ audio functions of the endpoint, the\n   NotificationRequest can map an event\
    \ (usually hook flash, but could\n   be some other event) to a local swap audio\
    \ function, which selects\n   the \"next\" connection in a round robin fashion.\
    \  If there is only one\n   connection, this action is effectively a no-op.  If\
    \ there are more\n   than two connections, the order is undefined.  If the endpoint\
    \ has\n   exactly two connections, one of which is \"inactive\", the other of\n\
    \   which is in \"send/receive\" mode, then swap audio will attempt to make\n\
    \   the \"send/receive\" connection \"inactive\", and vice versa.  This\n   specification\
    \ intentionally does not provide any additional detail on\n   the swap audio action.\n\
    \   If signal(s) are desired to start when an event being looked for\n   occurs,\
    \ the \"Embedded NotificationRequest\" action can be used.  The\n   embedded NotificationRequest\
    \ may include a new list of\n   RequestedEvents, SignalRequests and a new digit\
    \ map as well.  The\n   semantics of the embedded NotificationRequest is as if\
    \ a new\n   NotificationRequest was just received with the same NotifiedEntity,\n\
    \   RequestIdentifier, QuarantineHandling and DetectEvents.  When the\n   \"Embedded\
    \ NotificationRequest\" is activated, the \"current dial\n   string\" will be\
    \ cleared; however the list of observed events and the\n   quarantine buffer will\
    \ be unaffected (if combined with a Notify, the\n   Notify will clear the list\
    \ of observed events though - see Section\n   4.4.1).  Note, that the Embedded\
    \ NotificationRequest action does not\n   accumulate the triggering event, however\
    \ it can be combined with the\n   Accumulate action to achieve that.  If the Embedded\n\
    \   NotificationRequest fails, an Embedded NotificationRequest failure\n   event\
    \ SHOULD be generated (see Appendix B).\n   MGCP implementations SHALL be able\
    \ to support at least one level of\n   embedding.  An embedded NotificationRequest\
    \ that respects this\n   limitation MUST NOT contain another Embedded NotificationRequest.\n\
    \   DigitMap is an optional parameter that allows the Call Agent to\n   provision\
    \ the endpoint with a digit map according to which digits\n   will be accumulated.\
    \  If this optional parameter is absent, the\n   previously defined value is retained.\
    \  This parameter MUST be\n   defined, either explicitly or through a previous\
    \ command, if the\n   RequestedEvents parameter contains a request to \"accumulate\
    \ according\n   to the digit map\".  The collection of these digits will result\
    \ in a\n   digit string.  The digit string is initialized to a null string upon\n\
    \   reception of the NotificationRequest, so that a subsequent\n   notification\
    \ only returns the digits that were collected after this\n   request.  Digits\
    \ that were accumulated according to the digit map are\n   reported as any other\
    \ accumulated event, in the order in which they\n   occur.  It is therefore possible\
    \ that other events accumulated are\n   found in between the list of digits. \
    \ If the gateway is requested to\n   \"accumulate according to digit map\" and\
    \ the gateway currently does\n   not have a digit map for the endpoint in question,\
    \ the gateway MUST\n   return an error (error code 519 - endpoint does not have\
    \ a digit map,\n   is RECOMMENDED).\n   SignalRequests is an optional parameter\
    \ that contains the set of\n   signals that the gateway is asked to apply.  When\
    \ omitted, it\n   defaults to empty.  When multiple signals are specified, the\
    \ signals\n   MUST be applied in parallel.  Unless otherwise specified, signals\
    \ are\n   applied to the endpoint.  However some signals can be applied to a\n\
    \   connection.  Signals are identified by their name, which is an event\n   name,\
    \ and may be qualified by signal parameters (see Section\n   3.2.2.4).  The following\
    \ are examples of signals:\n   * Ringing,\n   * Busy tone,\n   * Call waiting\
    \ tone,\n   * Off hook warning tone,\n   * Ringback tones on a connection.\n \
    \  Names and descriptions of signals are defined in the appropriate\n   package.\n\
    \   Signals are, by default, applied to endpoints.  If a signal applied\n   to\
    \ an endpoint results in the generation of a media stream (audio,\n   video, etc.),\
    \ then by default the media stream MUST NOT be forwarded\n   on any connection\
    \ associated with that endpoint, regardless of the\n   mode of the connection.\
    \  For example, if a call-waiting tone is\n   applied to an endpoint involved\
    \ in an active call, only the party\n   using the endpoint in question will hear\
    \ the call-waiting tone.\n   However, individual signals may define a different\
    \ behavior.\n   When a signal is applied to a connection that has received a\n\
    \   RemoteConnectionDescriptor, the media stream generated by that signal\n  \
    \ will be forwarded on the connection regardless of the current mode of\n   the\
    \ connection (including loopback and continuity test).  If a\n   RemoteConnectionDescriptor\
    \ has not been received, the gateway MUST\n   return an error (error code 527\
    \ - missing RemoteConnectionDescriptor,\n   is RECOMMENDED).  Note that this restriction\
    \ does not apply to\n   detecting events on a connection.\n   When a (possibly\
    \ empty) list of signal(s) is supplied, this list\n   completely replaces the\
    \ current list of active time-out signals.\n   Currently active time-out signals\
    \ that are not provided in the new\n   list MUST be stopped and the new signal(s)\
    \ provided will now become\n   active.  Currently active time-out signals that\
    \ are provided in the\n   new list of signals MUST remain active without interruption,\
    \ thus the\n   timer for such time-out signals will not be affected.  Consequently,\n\
    \   there is currently no way to restart the timer for a currently active\n  \
    \ time-out signal without turning the signal off first.  If the time-\n   out\
    \ signal is parameterized, the original set of parameters MUST\n   remain in effect,\
    \ regardless of what values are provided\n   subsequently.  A given signal MUST\
    \ NOT appear more than once in a\n   SignalRequests.  Note that applying a signal\
    \ S to an endpoint,\n   connection C1 and connection C2, constitutes three different\
    \ and\n   independent signals.\n   The action triggered by the SignalRequests\
    \ is synchronized with the\n   collection of events specified in the RequestedEvents\
    \ parameter.  For\n   example, if the NotificationRequest mandates \"ringing\"\
    \ and the\n   RequestedEvents asks to look for an \"off-hook\" event, the ringing\n\
    \   SHALL stop as soon as the gateway detects an off-hook event.  The\n   formal\
    \ definition is that the generation of all \"Time Out\" signals\n   SHALL stop\
    \ as soon as one of the requested events is detected, unless\n   the \"Keep signals\
    \ active\" action is associated to the detected event.\n   The RequestedEvents\
    \ and SignalRequests may refer to the same event\n   definitions.  In one case,\
    \ the gateway is asked to detect the\n   occurrence of the event, and in the other\
    \ case it is asked to\n   generate it.  The specific events and signals that a\
    \ given endpoint\n   can detect or perform are determined by the list of packages\
    \ that are\n   supported by that endpoint.  Each package specifies a list of events\n\
    \   and signals that can be detected or performed.  A gateway that is\n   requested\
    \ to detect or perform an event belonging to a package that\n   is not supported\
    \ by the specified endpoint MUST return an error\n   (error code 518 - unsupported\
    \ or unknown package, is RECOMMENDED).\n   When the event name is not qualified\
    \ by a package name, the default\n   package name for the endpoint is assumed.\
    \  If the event name is not\n   registered in this default package, the gateway\
    \ MUST return an error\n   (error code 522 - no such event or signal, is RECOMMENDED).\n\
    \   The Call Agent can send a NotificationRequest whose requested signal\n   list\
    \ is empty.  It will do so for example when a time-out signal(s)\n   should stop.\n\
    \   If signal(s) are desired to start as soon as a \"looked-for\" event\n   occurs,\
    \ the \"Embedded NotificationRequest\" action can be used.  The\n   embedded NotificationRequest\
    \ may include a new list of\n   RequestedEvents, SignalRequests and a new Digit\
    \ Map as well.  The\n   embedded NotificationRequest action allows the Call Agent\
    \ to set up a\n   \"mini-script\" to be processed by the gateway immediately following\n\
    \   the detection of the associated event.  Any SignalRequests specified\n   in\
    \ the embedded NotificationRequest will start immediately.\n   Considerable care\
    \ must be taken to prevent discrepancies between the\n   Call Agent and the gateway.\
    \  However, long-term discrepancies should\n   not occur as a new SignalRequests\
    \ completely replaces the old list of\n   active time-out signals, and BR-type\
    \ signals always stop on their\n   own.  Limiting the number of On/Off-type signals\
    \ is encouraged.  It\n   is considered good practice for a Call Agent to occasionally\
    \ turn on\n   all On/Off signals that should be on, and turn off all On/Off signals\n\
    \   that should be off.\n   The Ignore action can be used to ignore an event,\
    \ e.g., to prevent a\n   persistent event from being notified.  However, the synchronization\n\
    \   between the event and an active time-out signal will still occur by\n   default\
    \ (e.g., a time-out dial-tone signal will stop when an off-hook\n   occurs even\
    \ if off-hook was a requested event with action \"Ignore\").\n   To prevent this\
    \ synchronization from happening, the \"Keep Signal(s)\n   Active\" action will\
    \ have to be specified as well.\n   The optional QuarantineHandling parameter\
    \ specifies the handling of\n   \"quarantine\" events, i.e., events that have\
    \ been detected by the\n   gateway before the arrival of this NotificationRequest\
    \ command, but\n   have not yet been notified to the Call Agent.  The parameter\
    \ provides\n   a set of handling options (see Section 4.4.1 for details):\n  \
    \ * whether the quarantined events should be processed or discarded\n     (the\
    \ default is to process them).\n   * whether the gateway is expected to generate\
    \ at most one\n     notification (step by step), or multiple notifications (loop),\
    \ in\n     response to this request (the default is at most one).\n   When the\
    \ parameter is absent, the default value is assumed.\n   We should note that the\
    \ quarantine-handling parameter also governs\n   the handling of events that were\
    \ detected and processed but not yet\n   notified when the command is received.\n\
    \   DetectEvents is an optional parameter, possibly qualified by event\n   parameters,\
    \ that specifies a list of events that the gateway is\n   requested to detect\
    \ during the quarantine period.  When this\n   parameter is absent, the events\
    \ to be detected in the quarantine\n   period are those listed in the last received\
    \ DetectEvents list.  In\n   addition, the gateway will also detect persistent\
    \ events and the\n   events specified in the RequestedEvents list, including those\
    \ for\n   which the \"ignore\" action is specified.\n   Some events and signals,\
    \ such as the in-line ringback or the quality\n   alert, are performed or detected\
    \ on connections terminating in the\n   endpoint rather than on the endpoint itself.\
    \  The structure of the\n   event names (see Section 2.1.7) allows the Call Agent\
    \ to specify the\n   connection(s) on which the events should be performed or\
    \ detected.\n   The NotificationRequest command may carry an encapsulated\n  \
    \ EndpointConfiguration command, that will apply to the same\n   endpoint(s).\
    \  When this command is present, the parameters of the\n   EndpointConfiguration\
    \ command are included with the normal parameters\n   of the NotificationRequest,\
    \ with the exception of the EndpointId,\n   which is not replicated.\n   The encapsulated\
    \ EndpointConfiguration command shares the fate of the\n   NotificationRequest\
    \ command.  If the NotificationRequest is rejected,\n   the EndpointConfiguration\
    \ is not executed.\n   ReturnCode is a parameter returned by the gateway.  It\
    \ indicates the\n   outcome of the command and consists of an integer number optionally\n\
    \   followed by commentary.\n   PackageList is a list of supported packages that\
    \ MAY be included with\n   error code 518 (unsupported package).\n"
- title: 2.3.4 Notify
  contents:
  - "2.3.4 Notify\n   Notifications with the observed events are sent by the gateway\
    \ via\n   the Notify command when a triggering event occurs.\n         ReturnCode,\n\
    \         [PackageList]\n         <-- Notify(EndpointId,\n                   \
    \ [NotifiedEntity,]\n                    RequestIdentifier,\n                \
    \    ObservedEvents)\n   EndpointId is the name for the endpoint in the gateway\
    \ which is\n   issuing the Notify command.  The identifier MUST be a fully qualified\n\
    \   endpoint identifier, including the domain name of the gateway.  The\n   local\
    \ part of the name MUST NOT use any of the wildcard conventions.\n   NotifiedEntity\
    \ is a parameter that identifies the entity which\n   requested the notification.\
    \  This parameter is equal to the\n   NotifiedEntity parameter of the NotificationRequest\
    \ that triggered\n   this notification.  The parameter is absent if there was\
    \ no such\n   parameter in the triggering request.  Regardless of the value of\
    \ the\n   NotifiedEntity parameter, the notification MUST be sent to the\n   current\
    \ \"notified entity\" for the endpoint.\n   RequestIdentifier is a parameter that\
    \ repeats the RequestIdentifier\n   parameter of the NotificationRequest that\
    \ triggered this\n   notification.  It is used to correlate this notification\
    \ with the\n   request that triggered it.  Persistent events will be viewed here\
    \ as\n   if they had been included in the last NotificationRequest.  An\n   implicit\
    \ NotificationRequest MAY be in place right after restart -\n   the RequestIdentifier\
    \ used for it will be zero (\"0\") - see Section\n   4.4.1 for details.\n   ObservedEvents\
    \ is a list of events that the gateway detected and\n   accumulated.  A single\
    \ notification may report a list of events that\n   will be reported in the order\
    \ in which they were detected (FIFO).\n   The list will only contain the identification\
    \ of events that were\n   requested in the RequestedEvents parameter of the triggering\n\
    \   NotificationRequest.  It will contain the events that were either\n   accumulated\
    \ (but not notified) or treated according to digit map (but\n   no match yet),\
    \ and the final event that triggered the notification or\n   provided a final\
    \ match in the digit map.  It should be noted that\n   digits MUST be added to\
    \ the list of observed events as they are\n   accumulated, irrespective of whether\
    \ they are accumulated according\n   to the digit map or not.  For example, if\
    \ a user enters the digits\n   \"1234\" and some event E is accumulated between\
    \ the digits \"3\" and \"4\"\n   being entered, the list of observed events would\
    \ be \"1, 2, 3, E, 4\".\n   Events that were detected on a connection SHALL include\
    \ the name of\n   that connection as in \"R/qa@0A3F58\" (see Section 2.1.7).\n\
    \   If the list of ObservedEvents reaches the capacity of the endpoint,\n   an\
    \ ObservedEvents Full event (see Appendix B) SHOULD be generated\n   (the endpoint\
    \ shall ensure it has capacity to include this event in\n   the list of ObservedEvents).\
    \  If the ObservedEvents Full event is not\n   used to trigger a Notify, event\
    \ processing continues as before\n   (including digit map matching); however,\
    \ the subsequent events will\n   not be included in the list of ObservedEvents.\n\
    \   ReturnCode is a parameter returned by the Call Agent.  It indicates\n   the\
    \ outcome of the command and consists of an integer number\n   optionally followed\
    \ by commentary.\n   PackageList is a list of supported packages that MAY be included\
    \ with\n   error code 518 (unsupported package).\n"
- title: 2.3.5 CreateConnection
  contents:
  - "2.3.5 CreateConnection\n   This command is used to create a connection between\
    \ two endpoints.\n         ReturnCode,\n         [ConnectionId,]\n         [SpecificEndPointId,]\n\
    \         [LocalConnectionDescriptor,]\n         [SecondEndPointId,]\n       \
    \  [SecondConnectionId,]\n         [PackageList]\n         <-- CreateConnection(CallId,\n\
    \                              EndpointId,\n                              [NotifiedEntity,]\n\
    \                              [LocalConnectionOptions,]\n                   \
    \           Mode,\n                              [{RemoteConnectionDescriptor\
    \ |\n                              SecondEndpointId}, ]\n                    \
    \          [Encapsulated NotificationRequest,]\n                             \
    \ [Encapsulated EndpointConfiguration])\n   A connection is defined by its endpoints.\
    \  The input parameters in\n   CreateConnection provide the data necessary to\
    \ build a gateway's\n   \"view\" of a connection.\n   CallId is a parameter that\
    \ identifies the call (or session) to which\n   this connection belongs.  This\
    \ parameter SHOULD, at a minimum, be\n   unique within the collection of Call\
    \ Agents that control the same\n   gateways.  Connections that belong to the same\
    \ call SHOULD share the\n   same call-id.  The call-id has little semantic meaning\
    \ in the\n   protocol; however it can be used to identify calls for reporting\
    \ and\n   accounting purposes.  It does not affect the handling of connections\n\
    \   by the gateway.\n   EndpointId is the identifier for the connection endpoint\
    \ in the\n   gateway where CreateConnection executes.  The EndpointId can be\n\
    \   fully-specified by assigning a value to the parameter EndpointId in\n   the\
    \ function call or it may be under-specified by using the \"any of\"\n   wildcard\
    \ convention.  If the endpoint is underspecified, the endpoint\n   identifier\
    \ SHALL be assigned by the gateway and its complete value\n   returned in the\
    \ SpecificEndPointId parameter of the response.  When\n   the \"any of\" wildcard\
    \ is used, the endpoint assigned MUST be in-\n   service and MUST NOT already\
    \ have any connections on it.  If no such\n   endpoint is available, error code\
    \ 410 (no endpoint available) SHOULD\n   be returned.  The \"all of\" wildcard\
    \ MUST NOT be used.\n   The NotifiedEntity is an optional parameter that specifies\
    \ a new\n   \"notified entity\" for the endpoint.\n   LocalConnectionOptions is\
    \ an optional structure used by the Call\n   Agent to direct the handling of the\
    \ connection by the gateway.  The\n   fields contained in a LocalConnectionOptions\
    \ structure may include\n   one or more of the following (each field MUST NOT\
    \ be supplied more\n   than once):\n   * Codec compression algorithm:  One or\
    \ more codecs, listed in order\n     of preference.  For interoperability, it\
    \ is RECOMMENDED to support\n     G.711 mu-law encoding (\"PCMU\").  See Section\
    \ 2.6 for details on the\n     codec selection process.\n   * Packetization period:\
    \  A single millisecond value or a range may be\n     specified.  The packetization\
    \ period SHOULD NOT contradict the\n     specification of the codec compression\
    \ algorithm.  If a codec is\n     specified that has a frame size which is inconsistent\
    \ with the\n     packetization period, and that codec is selected, the gateway\
    \ is\n     authorized to use a packetization period that is consistent with\n\
    \     the frame size even if it is different from that specified.  In so\n   \
    \  doing, the gateway SHOULD choose a non-zero packetization period as\n     close\
    \ to that specified as possible.  If a packetization period is\n     not specified,\
    \ the endpoint SHOULD use the default packetization\n     period(s) for the codec(s)\
    \ selected.\n   * Bandwidth:  The allowable bandwidth, i.e., payload plus any\
    \ header\n     overhead from the transport layer and up, e.g., IP, UDP, and RTP.\n\
    \     The bandwidth specification SHOULD NOT contradict the specification\n  \
    \   of codec compression algorithm or packetization period.  If a codec\n    \
    \ is specified, then the gateway is authorized to use it, even if it\n     results\
    \ in the usage of a larger bandwidth than specified.  Any\n     discrepancy between\
    \ the bandwidth and codec specification will not\n     be reported as an error.\n\
    \   * Type of Service:  This indicates the class of service to be used\n     for\
    \ this connection.  When the Type of Service is not specified,\n     the gateway\
    \ SHALL use a default value of zero unless provisioned\n     otherwise.\n   *\
    \ Usage of echo cancellation:  By default, the telephony gateways\n     always\
    \ perform echo cancellation on the endpoint.  However, it may\n     be necessary,\
    \ for some calls, to turn off these operations.  The\n     echo cancellation parameter\
    \ can have two values, \"on\" (when the\n     echo cancellation is requested)\
    \ and \"off\" (when it is turned off).\n     The parameter is optional.  If the\
    \ parameter is omitted when\n     creating a connection and there are no other\
    \ connections on the\n     endpoint, the endpoint SHALL apply echo cancellation\
    \ initially.  If\n     the parameter is omitted when creating a connection and\
    \ there are\n     existing connections on the endpoint, echo cancellation is\n\
    \     unchanged.  The endpoint SHOULD subsequently enable or disable echo\n  \
    \   cancellation when voiceband data is detected - see e.g., ITU-T\n     recommendation\
    \ V.8, V.25, and G.168.  Following termination of\n     voiceband data, the handling\
    \ of echo cancellation SHALL then revert\n     to the current value of the echo\
    \ cancellation parameter.  It is\n     RECOMMENDED that echo cancellation handling\
    \ is left to the gateway\n     rather than having this parameter specified by\
    \ the Call Agent.\n   * Silence Suppression:  The telephony gateways may perform\
    \ voice\n     activity detection, and avoid sending packets during periods of\n\
    \     silence.  However, it is necessary, for example for modem calls, to\n  \
    \   turn off this detection.  The silence suppression parameter can\n     have\
    \ two values, \"on\" (when the detection is requested) and \"off\"\n     (when\
    \ it is not requested).  The default is \"off\" (unless\n     provisioned otherwise).\
    \  Upon detecting voiceband data, the\n     endpoint SHOULD disable silence suppression.\
    \  Following termination\n     of voiceband data, the handling of silence suppression\
    \ SHALL then\n     revert to the current value of the silence suppression parameter.\n\
    \   * Gain Control:  The telephony gateways may perform gain control on\n    \
    \ the endpoint, in order to adapt the level of the signal.  However,\n     it\
    \ is necessary, for example for some modem calls, to turn off this\n     function.\
    \  The gain control parameter may either be specified as\n     \"automatic\",\
    \ or as an explicit number of decibels of gain.  The\n     gain specified will\
    \ be added to media sent out over the endpoint\n     (as opposed to the connection)\
    \ and subtracted from media received\n     on the endpoint.  The parameter is\
    \ optional.  When there are no\n     other connections on the endpoint, and the\
    \ parameter is omitted,\n     the default is to not perform gain control (unless\
    \ provisioned\n     otherwise), which is equivalent to specifying a gain of 0\
    \ decibels.\n     If there are other connections on the endpoint, and the parameter\n\
    \     is omitted, gain control is unchanged.  Upon detecting voiceband\n     data,\
    \ the endpoint SHOULD disable gain control if needed.\n     Following termination\
    \ of voiceband data, the handling of gain\n     control SHALL then revert to the\
    \ current value of the gain control\n     parameter.  It should be noted, that\
    \ handling of gain control is\n     normally best left to the gateway and hence\
    \ use of this parameter\n     is NOT RECOMMENDED.\n   * RTP security:  The Call\
    \ agent can request the gateway to enable\n     encryption of the audio Packets.\
    \  It does so by providing a key\n     specification, as specified in RFC 2327.\
    \  By default, encryption is\n     not performed.\n   * Network Type:  The Call\
    \ Agent may instruct the gateway to prepare\n     the connection on a specified\
    \ type of network.  If absent, the\n     value is based on the network type of\
    \ the gateway being used.\n   * Resource reservation:  The Call Agent may instruct\
    \ the gateway to\n     use network resource reservation for the connection.  See\
    \ Section\n     2.7 for details.\n   The Call Agent specifies the relevant fields\
    \ it cares about in the\n   command and leaves the rest to the discretion of the\
    \ gateway.  For\n   those of the above parameters that were not explicitly included,\
    \ the\n   gateway SHOULD use the default values if possible.  For a detailed\n\
    \   list of local connection options included with this specification\n   refer\
    \ to section 3.2.2.10.  The set of local connection options can\n   be extended.\n\
    \   The Mode indicates the mode of operation for this side of the\n   connection.\
    \  The basic modes are \"send\", \"receive\", \"send/receive\",\n   \"conference\"\
    , \"inactive\", \"loopback\", \"continuity test\", \"network\n   loop back\" and\
    \ \"network continuity test\".  The expected handling of\n   these modes is specified\
    \ in the introduction of the \"Gateway Control\n   Commands\", Section 2.3.  Note\
    \ that signals applied to a connection do\n   not follow the connection mode.\
    \  Some endpoints may not be capable of\n   supporting all modes.  If the command\
    \ specifies a mode that the\n   endpoint does not support, an error SHALL be returned\
    \ (error 517 -\n   unsupported mode, is RECOMMENDED).  Also, if a connection has\
    \ not yet\n   received a RemoteConnectionDescriptor, an error MUST be returned\
    \ if\n   the connection is attempted to be placed in any of the modes \"send\n\
    \   only\", \"send/receive\", \"conference\", \"network loopback\", \"network\n\
    \   continuity test\", or if a signal (as opposed to detecting an event)\n   is\
    \ to be applied to the connection (error code 527 - missing\n   RemoteConnectionDescriptor,\
    \ is RECOMMENDED).  The set of modes can be\n   extended.\n   The gateway returns\
    \ a ConnectionId, that uniquely identifies the\n   connection within the endpoint,\
    \ and a LocalConnectionDescriptor,\n   which is a session description that contains\
    \ information about the\n   connection, e.g., IP address and port for the media,\
    \ as defined in\n   SDP.\n   The SpecificEndPointId is an optional parameter that\
    \ identifies the\n   responding endpoint.  It is returned when the EndpointId\
    \ argument\n   referred to an \"any of\" wildcard name and the command succeeded.\n\
    \   When a SpecificEndPointId is returned, the Call Agent SHALL use it as\n  \
    \ the EndpointId value in successive commands referring to this\n   connection.\n\
    \   The SecondEndpointId can be used instead of the\n   RemoteConnectionDescriptor\
    \ to establish a connection between two\n   endpoints located on the same gateway.\
    \  The connection is by\n   definition a local connection.  The SecondEndpointId\
    \ can be fully-\n   specified by assigning a value to the parameter SecondEndpointId\
    \ in\n   the function call or it may be under-specified by using the \"any of\"\
    \n   wildcard convention.  If the SecondEndpointId is underspecified, the\n  \
    \ second endpoint identifier will be assigned by the gateway and its\n   complete\
    \ value returned in the SecondEndPointId parameter of the\n   response.\n   When\
    \ a SecondEndpointId is specified, the command really creates two\n   connections\
    \ that can be manipulated separately through\n   ModifyConnection and DeleteConnection\
    \ commands.  In addition to the\n   ConnectionId and LocalConnectionDescriptor\
    \ for the first connection,\n   the response to the creation provides a SecondConnectionId\
    \ parameter\n   that identifies the second connection.  The second connection\
    \ is\n   established in \"send/receive\" mode.\n   After receiving a \"CreateConnection\"\
    \ request that did not include a\n   RemoteConnectionDescriptor parameter, a gateway\
    \ is in an ambiguous\n   situation.  Because it has exported a LocalConnectionDescriptor\n\
    \   parameter, it can potentially receive packets.  Because it has not\n   yet\
    \ received the RemoteConnectionDescriptor parameter of the other\n   gateway,\
    \ it does not know whether the packets that it receives have\n   been authorized\
    \ by the Call Agent.  It must thus navigate between two\n   risks, i.e., clipping\
    \ some important announcements or listening to\n   insane data.  The behavior\
    \ of the gateway is determined by the value\n   of the Mode parameter:\n   * If\
    \ the mode was set to ReceiveOnly, the gateway MUST accept the\n     media and\
    \ transmit them through the endpoint.\n   * If the mode was set to Inactive, Loopback,\
    \ or Continuity Test, the\n     gateway MUST NOT transmit the media through to\
    \ the endpoint.\n   Note that the mode values SendReceive, Conference, SendOnly,\
    \ Network\n   Loopback and Network Continuity Test do not make sense in this\n\
    \   situation.  They MUST be treated as errors, and the command MUST be\n   rejected\
    \ (error code 527 - missing RemoteConnectionDescriptor, is\n   RECOMMENDED).\n\
    \   The command may optionally contain an encapsulated Notification\n   Request\
    \ command, which applies to the EndpointId, in which case a\n   RequestIdentifier\
    \ parameter MUST be present, as well as, optionally,\n   other parameters of the\
    \ NotificationRequest with the exception of the\n   EndpointId, which is not replicated.\
    \  The encapsulated\n   NotificationRequest is executed simultaneously with the\
    \ creation of\n   the connection.  For example, when the Call Agent wants to initiate\
    \ a\n   call to a residential gateway, it could:\n   * ask the residential gateway\
    \ to prepare a connection, in order to be\n     sure that the user can start speaking\
    \ as soon as the phone goes off\n     hook,\n   * ask the residential gateway\
    \ to start ringing,\n   * ask the residential gateway to notify the Call Agent\
    \ when the phone\n     goes off-hook.\n   This can be accomplished in a single\
    \ CreateConnection command, by\n   also transmitting the RequestedEvents parameters\
    \ for the off-hook\n   event, and the SignalRequests parameter for the ringing\
    \ signal.\n   When these parameters are present, the creation and the\n   NotificationRequest\
    \ MUST be synchronized, which means that both MUST\n   be accepted, or both MUST\
    \ be refused.  In our example, the\n   CreateConnection may be refused if the\
    \ gateway does not have\n   sufficient resources, or cannot get adequate resources\
    \ from the local\n   network access, and the off-hook NotificationRequest can\
    \ be refused\n   in the glare condition, if the user is already off-hook.  In\
    \ this\n   example, the phone must not ring if the connection cannot be\n   established,\
    \ and the connection must not be established if the user\n   is already off-hook.\n\
    \   The NotifiedEntity parameter, if present, defines the new \"notified\n   entity\"\
    \ for the endpoint.\n   The command may carry an encapsulated EndpointConfiguration\
    \ command,\n   which applies to the EndpointId.  When this command is present,\
    \ the\n   parameters of the EndpointConfiguration command are included with the\n\
    \   normal parameters of the CreateConnection with the exception of the\n   EndpointId,\
    \ which is not replicated.  The EndpointConfiguration\n   command may be encapsulated\
    \ together with an encapsulated\n   NotificationRequest command.  Note that both\
    \ of these apply to the\n   EndpointId only.\n   The encapsulated EndpointConfiguration\
    \ command shares the fate of the\n   CreateConnection command.  If the CreateConnection\
    \ is rejected, the\n   EndpointConfiguration is not executed.\n   ReturnCode is\
    \ a parameter returned by the gateway.  It indicates the\n   outcome of the command\
    \ and consists of an integer number optionally\n   followed by commentary.\n \
    \  PackageList is a list of supported packages that MAY be included with\n   error\
    \ code 518 (unsupported package).\n"
- title: 2.3.6 ModifyConnection
  contents:
  - "2.3.6 ModifyConnection\n   This command is used to modify the characteristics\
    \ of a gateway's\n   \"view\" of a connection.  This \"view\" of the call includes\
    \ both the\n   local connection descriptor as well as the remote connection\n\
    \   descriptor.\n         ReturnCode,\n         [LocalConnectionDescriptor,]\n\
    \         [PackageList]\n         <-- ModifyConnection(CallId,\n             \
    \                 EndpointId,\n                              ConnectionId,\n \
    \                             [NotifiedEntity,]\n                            \
    \  [LocalConnectionOptions,]\n                              [Mode,]\n        \
    \                      [RemoteConnectionDescriptor,]\n                       \
    \       [Encapsulated NotificationRequest,]\n                              [Encapsulated\
    \ EndpointConfiguration])\n   The parameters used are the same as in the CreateConnection\
    \ command,\n   with the addition of a ConnectionId that identifies the connection\n\
    \   within the endpoint.  This parameter was returned by the\n   CreateConnection\
    \ command, in addition to the local connection\n   descriptor.  It uniquely identifies\
    \ the connection within the context\n   of the endpoint.  The CallId used when\
    \ the connection was created\n   MUST be included as well.\n   The EndpointId\
    \ MUST be a fully qualified endpoint identifier.  The\n   local name MUST NOT\
    \ use the wildcard conventions.\n   The ModifyConnection command can be used to\
    \ affect parameters of a\n   connection in the following ways:\n   * Provide information\
    \ about the other end of the connection, through\n     the RemoteConnectionDescriptor.\
    \  If the parameter is omitted, it\n     retains its current value.\n   * Activate\
    \ or deactivate the connection, by changing the value of the\n     Mode parameter.\
    \  This can occur at any time during the connection,\n     with arbitrary parameter\
    \ values.  If the parameter is omitted, it\n     retains its current value.\n\
    \   * Change the parameters of the connection through the\n     LocalConnectionOptions,\
    \ for example by switching to a different\n     coding scheme, changing the packetization\
    \ period, or modifying the\n     handling of echo cancellation.  If one or more\n\
    \     LocalConnectionOptions parameters are omitted, then the gateway\n     SHOULD\
    \ refrain from changing that parameter from its current value,\n     unless another\
    \ parameter necessitating such a change is explicitly\n     provided.  For example,\
    \ a codec change might require a change in\n     silence suppression.  Note that\
    \ if a RemoteConnectionDescriptor is\n     supplied, then only the LocalConnectionOptions\
    \ actually supplied\n     with the ModifyConnection command will affect the codec\
    \ negotiation\n     (as described in Section 2.6).\n   Connections can only be\
    \ fully activated if the\n   RemoteConnectionDescriptor has been provided to the\
    \ gateway.  The\n   receive-only mode, however, can be activated without the provision\
    \ of\n   this descriptor.\n   The command will only return a LocalConnectionDescriptor\
    \ if the local\n   connection parameters, such as RTP ports, were modified.  Thus,\
    \ if,\n   for example, only the mode of the connection is changed, a\n   LocalConnectionDescriptor\
    \ will not be returned.  Note however, that\n   inclusion of LocalConnectionOptions\
    \ in the command is not a\n   prerequisite for local connection parameter changes\
    \ to occur.  If a\n   connection parameter is omitted, e.g., silence suppression,\
    \ the old\n   value of that parameter will be retained if possible.  If a parameter\n\
    \   change necessitates a change in one or more unspecified parameters,\n   the\
    \ gateway is free to choose suitable values for the unspecified\n   parameters\
    \ that must change.  This can for instance happen if the\n   packetization period\
    \ was not specified.  If the new codec supported\n   the old packetization period,\
    \ the value of this parameter would not\n   change, as a change would not be necessary.\
    \  However, if it did not\n   support the old packetization period, it would choose\
    \ a suitable\n   value.\n   The command may optionally contain an encapsulated\
    \ Notification\n   Request command, in which case a RequestIdentifier parameter\
    \ MUST be\n   present, as well as, optionally, other parameters of the\n   NotificationRequest\
    \ with the exception of the EndpointId, which is\n   not replicated.  The encapsulated\
    \ NotificationRequest is executed\n   simultaneously with the modification of\
    \ the connection.  For example,\n   when a connection is accepted, the calling\
    \ gateway should be\n   instructed to place the circuit in send-receive mode and\
    \ to stop\n   providing ringing tones.  This can be accomplished in a single\n\
    \   ModifyConnection command, by also transmitting the RequestedEvents\n   parameters,\
    \ for the on-hook event, and an empty SignalRequests\n   parameter, to stop the\
    \ provision of ringing tones.\n   When these parameters are present, the modification\
    \ and the\n   NotificationRequest MUST be synchronized, which means that both\
    \ MUST\n   be accepted, or both MUST be refused.\n   The NotifiedEntity parameter,\
    \ if present, defines the new \"notified\n   entity\" for the endpoint.\n   The\
    \ command may carry an encapsulated EndpointConfiguration command,\n   that will\
    \ apply to the same endpoint.  When this command is present,\n   the parameters\
    \ of the EndpointConfiguration command are included with\n   the normal parameters\
    \ of the ModifyConnection with the exception of\n   the EndpointId, which is not\
    \ replicated.  The EndpointConfiguration\n   command may be encapsulated together\
    \ with an encapsulated\n   NotificationRequest command.\n   The encapsulated EndpointConfiguration\
    \ command shares the fate of the\n   ModifyConnection command.  If the ModifyConnection\
    \ is rejected, the\n   EndpointConfiguration is not executed.\n   ReturnCode is\
    \ a parameter returned by the gateway.  It indicates the\n   outcome of the command\
    \ and consists of an integer number optionally\n   followed by commentary.\n \
    \  PackageList is a list of supported packages that MAY be included with\n   error\
    \ code 518 (unsupported package).\n"
- title: 2.3.7 DeleteConnection (from the Call Agent)
  contents:
  - "2.3.7 DeleteConnection (from the Call Agent)\n   This command is used to terminate\
    \ a connection.  As a side effect, it\n   collects statistics on the execution\
    \ of the connection.\n         ReturnCode,\n         ConnectionParameters,\n \
    \        [PackageList]\n         <-- DeleteConnection(CallId,\n              \
    \                EndpointId,\n                              ConnectionId,\n  \
    \                            [NotifiedEntity,]\n                             \
    \ [Encapsulated NotificationRequest,]\n                              [Encapsulated\
    \ EndpointConfiguration])\n   The endpoint identifier, in this form of the DeleteConnection\n\
    \   command, SHALL be fully qualified.  Wildcard conventions SHALL NOT be\n  \
    \ used.\n   The ConnectionId identifies the connection to be deleted.  The CallId\n\
    \   used when the connection was created is included as well.\n   The NotifiedEntity\
    \ parameter, if present, defines the new \"notified\n   entity\" for the endpoint.\n\
    \   In the case of IP multicast, connections can be deleted individually\n   and\
    \ independently.  However, in the unicast case where a connection\n   has two\
    \ ends, a DeleteConnection command has to be sent to both\n   gateways involved\
    \ in the connection.  After the connection has been\n   deleted, media streams\
    \ previously supported by the connection are no\n   longer available.  Any media\
    \ packets received for the old connection\n   are simply discarded and no new\
    \ media packets for the stream are\n   sent.\n   After the connection has been\
    \ deleted, any loopback that has been\n   requested for the connection must be\
    \ cancelled (unless the endpoint\n   has another connection requesting loopback).\n\
    \   In response to the DeleteConnection command, the gateway returns a\n   list\
    \ of connection parameters that describe statistics for the\n   connection.\n\
    \   When the connection was for an Internet media stream, these\n   parameters\
    \ are:\n   Number of packets sent:\n      The total number of media packets transmitted\
    \ by the sender since\n      starting transmission on this connection.  In the\
    \ case of RTP, the\n      count is not reset if the sender changes its synchronization\n\
    \      source identifier (SSRC, as defined in RTP), for example as a\n      result\
    \ of a ModifyConnection command.  The value is zero if the\n      connection was\
    \ always set in \"receive only\" mode and no signals\n      were applied to the\
    \ connection.\n   Number of octets sent:\n      The total number of payload octets\
    \ (i.e., not including header or\n      padding) transmitted in media packets\
    \ by the sender since starting\n      transmission on this connection.  In the\
    \ case of RTP, the count is\n      not reset if the sender changes its SSRC identifier,\
    \ for example\n      as a result of a ModifyConnection command.  The value is\
    \ zero if\n      the connection was always set in \"receive only\" mode and no\n\
    \      signals were applied to the connection.\n   Number of packets received:\n\
    \      The total number of media packets received by the sender since\n      starting\
    \ reception on this connection.  In the case of RTP, the\n      count includes\
    \ packets received from different SSRC, if the sender\n      used several values.\
    \  The value is zero if the connection was\n      always set in \"send only\"\
    \ mode.\n   Number of octets received:\n      The total number of payload octets\
    \ (i.e., not including header,\n      e.g., RTP, or padding) transmitted in media\
    \ packets by the sender\n      since starting transmission on this connection.\
    \  In the case of\n      RTP, the count includes packets received from different\
    \ SSRC, if\n      the sender used several values.  The value is zero if the\n\
    \      connection was always set in \"send only\" mode.\n   Number of packets\
    \ lost:\n      The total number of media packets that have been lost since the\n\
    \      beginning of reception.  This number is defined to be the number\n    \
    \  of packets expected less the number of packets actually received,\n      where\
    \ the number of packets received includes any which are late\n      or duplicates.\
    \  For RTP, the count includes packets received from\n      different SSRC, if\
    \ the sender used several values.  Thus packets\n      that arrive late are not\
    \ counted as lost, and the loss may be\n      negative if there are duplicates.\
    \  The count includes packets\n      received from different SSRC, if the sender\
    \ used several values.\n      The number of packets expected is defined to be\
    \ the extended last\n      sequence number received, as defined next, less the\
    \ initial\n      sequence number received.  The count includes packets received\n\
    \      from different SSRC, if the sender used several values.  The value\n  \
    \    is zero if the connection was always set in \"send only\" mode.\n   Interarrival\
    \ jitter:\n      An estimate of the statistical variance of the media packet\n\
    \      interarrival time measured in milliseconds and expressed as an\n      unsigned\
    \ integer.  For RTP, the interarrival jitter J is defined\n      to be the mean\
    \ deviation (smoothed absolute value) of the\n      difference D in packet spacing\
    \ at the receiver compared to the\n      sender for a pair of packets.  Detailed\
    \ computation algorithms are\n      found in RFC 1889.  The count includes packets\
    \ received from\n      different SSRC, if the sender used several values.  The\
    \ value is\n      zero if the connection was always set in \"send only\" mode.\n\
    \   Average transmission delay:\n      An estimate of the network latency, expressed\
    \ in milliseconds. For\n      RTP, this is the average value of the difference\
    \ between the NTP\n      timestamp indicated by the senders of the RTCP messages\
    \ and the\n      NTP timestamp of the receivers, measured when the messages are\n\
    \      received.  The average is obtained by summing all the estimates,\n    \
    \  then dividing by the number of RTCP messages that have been\n      received.\
    \  When the gateway's clock is not synchronized by NTP,\n      the latency value\
    \ can be computed as one half of the round trip\n      delay, as measured through\
    \ RTCP.  When the gateway cannot compute\n      the one way delay or the round\
    \ trip delay, the parameter conveys a\n      null value.\n   For a detailed definition\
    \ of these variables, refer to RFC 1889.\n   When the connection was set up over\
    \ a LOCAL interconnect, the meaning\n   of these parameters is defined as follows:\n\
    \   Number of packets sent:\n      Not significant - MAY be omitted.\n   Number\
    \ of octets sent:\n      The total number of payload octets transmitted over the\
    \ local\n      connection.\n   Number of packets received:\n      Not significant\
    \ - MAY be omitted.\n   Number of octets received:\n      The total number of\
    \ payload octets received over the connection.\n   Number of packets lost:\n \
    \     Not significant - MAY be omitted.  A value of zero is assumed.\n   Interarrival\
    \ jitter:\n      Not significant - MAY be omitted.  A value of zero is assumed.\n\
    \   Average transmission delay:\n      Not significant - MAY be omitted.  A value\
    \ of zero is assumed.\n   The set of connection parameters can be extended.  Also,\
    \ the meaning\n   may be further defined by other types of networks which MAY\n\
    \   furthermore elect to not return all, or even any, of the above\n   specified\
    \ parameters.\n   The command may optionally contain an encapsulated Notification\n\
    \   Request command, in which case a RequestIdentifier parameter MUST be\n   present,\
    \ as well as, optionally, other parameters of the\n   NotificationRequest with\
    \ the exception of the EndpointId, which is\n   not replicated.  The encapsulated\
    \ NotificationRequest is executed\n   simultaneously with the deletion of the\
    \ connection.  For example,\n   when a user hang-up is notified, the gateway should\
    \ be instructed to\n   delete the connection and to start looking for an off-hook\
    \ event.\n   This can be accomplished in a single DeleteConnection command, by\n\
    \   also transmitting the RequestedEvents parameters, for the off-hook\n   event,\
    \ and an empty SignalRequests parameter.\n   When these parameters are present,\
    \ the DeleteConnection and the\n   NotificationRequest must be synchronized, which\
    \ means that both MUST\n   be accepted, or both MUST be refused.\n   The command\
    \ may carry an encapsulated EndpointConfiguration command,\n   that will apply\
    \ to the same endpoint.  When this command is present,\n   the parameters of the\
    \ EndpointConfiguration command are included with\n   the normal parameters of\
    \ the DeleteConnection with the exception of\n   the EndpointId, which is not\
    \ replicated.  The EndpointConfiguration\n   command may be encapsulated together\
    \ with an encapsulated\n   NotificationRequest command.\n   The encapsulated EndpointConfiguration\
    \ command shares the fate of the\n   DeleteConnection command.  If the DeleteConnection\
    \ is rejected, the\n   EndpointConfiguration is not executed.\n   ReturnCode is\
    \ a parameter returned by the gateway.  It indicates the\n   outcome of the command\
    \ and consists of an integer number optionally\n   followed by commentary.\n \
    \  PackageList is a list of supported packages that MAY be included with\n   error\
    \ code 518 (unsupported package).\n"
- title: 2.3.8 DeleteConnection (from the gateway)
  contents:
  - "2.3.8 DeleteConnection (from the gateway)\n   In some rare circumstances, a gateway\
    \ may have to clear a connection,\n   for example because it has lost the resource\
    \ associated with the\n   connection, or because it has detected that the endpoint\
    \ no longer is\n   capable or willing to send or receive media.  The gateway may\
    \ then\n   terminate the connection by using a variant of the DeleteConnection\n\
    \   command:\n         ReturnCode,\n         [PackageList]\n         <-- DeleteConnection(CallId,\n\
    \                              EndpointId,\n                              ConnectionId,\n\
    \                              ReasonCode,\n                              Connection-parameters)\n\
    \   The EndpointId, in this form of the DeleteConnection command, MUST be\n  \
    \ fully qualified.  Wildcard conventions MUST NOT be used.\n   The ReasonCode\
    \ is a text string starting with a numeric reason code\n   and optionally followed\
    \ by a descriptive text string.  The reason\n   code indicates the cause of the\
    \ DeleteConnection.  A list of reason\n   codes can be found in Section 2.5.\n\
    \   In addition to the call, endpoint and connection identifiers, the\n   gateway\
    \ will also send the connection parameters that would have been\n   returned to\
    \ the Call Agent in response to a DeleteConnection command.\n   ReturnCode is\
    \ a parameter returned by the Call Agent.  It indicates\n   the outcome of the\
    \ command and consists of an integer number\n   optionally followed by commentary.\n\
    \   PackageList is a list of supported packages that MAY be included with\n  \
    \ error code 518 (unsupported package).\n   Note that use of this command is generally\
    \ discouraged and should\n   only be done as a last resort.  If a connection can\
    \ be sustained,\n   deletion of it should be left to the discretion of the Call\
    \ Agent\n   which is in a far better position to make intelligent decisions in\n\
    \   this area.\n"
- title: 2.3.9 DeleteConnection (multiple connections from the Call Agent)
  contents:
  - "2.3.9 DeleteConnection (multiple connections from the Call Agent)\n   A variation\
    \ of the DeleteConnection function can be used by the Call\n   Agent to delete\
    \ multiple connections at the same time.  Note that\n   encapsulating other commands\
    \ with this variation of the\n   DeleteConnection command is not permitted.  The\
    \ command can be used\n   to delete all connections that relate to a Call for\
    \ an endpoint:\n         ReturnCode,\n         [PackageList]\n         <-- DeleteConnection(CallId,\n\
    \                              EndpointId)\n   The EndpointId, in this form of\
    \ the DeleteConnection command, MUST\n   NOT use the \"any of\" wildcard.  All\
    \ connections for the endpoint(s)\n   with the CallId specified will be deleted.\
    \  Note that the command\n   will still succeed if there were no connections with\
    \ the CallId\n   specified, as long as the EndpointId was valid.  However, if\
    \ the\n   EndpointId is invalid, the command will fail.  The command does not\n\
    \   return any individual statistics or call parameters.\n   It can also be used\
    \ to delete all connections that terminate in a\n   given endpoint:\n        \
    \ ReturnCode,\n         [PackageList]\n         <-- DeleteConnection(EndpointId)\n\
    \   The EndpointId, in this form of the DeleteConnection command, MUST\n   NOT\
    \ use the \"any of\" wildcard.  Again, the command succeeds even if\n   there\
    \ were no connections on the endpoint(s).\n   Finally, Call Agents can take advantage\
    \ of the hierarchical structure\n   of endpoint names to delete all the connections\
    \ that belong to a\n   group of endpoints.  In this case, the \"local name\" component\
    \ of the\n   EndpointId will be specified using the \"all of\" wildcarding\n \
    \  convention.  The \"any of\" convention SHALL NOT be used.  For example,\n \
    \  if endpoint names are structured as the combination of a physical\n   interface\
    \ name and a circuit number, as in \"X35V3+A4/13\", the Call\n   Agent may replace\
    \ the circuit number by the \"all of\" wild card\n   character \"*\", as in \"\
    X35V3+A4/*\".  This \"wildcard\" command instructs\n   the gateway to delete all\
    \ the connections that were attached to\n   circuits connected to the physical\
    \ interface \"X35V3+A4\".\n   After all the connections have been deleted, any\
    \ loopback that has\n   been requested for the connections MUST be cancelled by\
    \ the gateway.\n   This command does not return any individual statistics or call\n\
    \   parameters.\n   ReturnCode is a parameter returned by the gateway.  It indicates\
    \ the\n   outcome of the command and consists of an integer number optionally\n\
    \   followed by commentary.\n   PackageList is a list of supported packages that\
    \ MAY be included with\n   error code 518 (unsupported package).\n"
- title: 2.3.10 AuditEndpoint
  contents:
  - "2.3.10 AuditEndpoint\n   The AuditEndPoint command can be used by the Call Agent\
    \ to find out\n   the status of a given endpoint.\n         ReturnCode,\n    \
    \     EndPointIdList,|{\n         [RequestedEvents,]\n         [QuarantineHandling,]\n\
    \         [DigitMap,]\n         [SignalRequests,]\n         [RequestIdentifier,]\n\
    \         [NotifiedEntity,]\n         [ConnectionIdentifiers,]\n         [DetectEvents,]\n\
    \         [ObservedEvents,]\n         [EventStates,]\n         [BearerInformation,]\n\
    \         [RestartMethod,]\n         [RestartDelay,]\n         [ReasonCode,]\n\
    \         [MaxMGCPDatagram,]\n         [Capabilities]}\n         [PackageList]\n\
    \         <-- AuditEndPoint(EndpointId,\n                           [RequestedInfo])\n\
    \   The EndpointId identifies the endpoint(s) being audited.  The \"any\n   of\"\
    \ wildcard convention MUST NOT be used.\n   The EndpointId identifies the endpoint(s)\
    \ being audited.  The \"all\n   of\" wildcard convention can be used to start\
    \ auditing of a group of\n   endpoints (regardless of their service-state).  If\
    \ this convention is\n   used, the gateway SHALL return the list of endpoint identifiers\
    \ that\n   match the wildcard in the EndPointIdList parameter, which is simply\n\
    \   one or more SpecificEndpointIds (each supplied separately).  In the\n   case\
    \ where the \"all of\" wildcard is used, RequestedInfo SHOULD NOT be\n   included\
    \ (if it is included, it MUST be ignored).  Note that the use\n   of the \"all\
    \ of\" wildcard can potentially generate a large\n   EndPointIdList.  If the resulting\
    \ EndPointIdList is considered too\n   large, the gateway returns an error (error\
    \ code 533 - response too\n   large, is RECOMMENDED).\n   When a non-wildcard\
    \ EndpointId is specified, the (possibly empty)\n   RequestedInfo parameter describes\
    \ the information that is requested\n   for the EndpointId specified.  The following\
    \ endpoint info can be\n   audited with this command:\n      RequestedEvents,\
    \ DigitMap, SignalRequests, RequestIdentifier,\n      QuarantineHandling, NotifiedEntity,\
    \ ConnectionIdentifiers,\n      DetectEvents, ObservedEvents, EventStates, BearerInformation,\n\
    \      RestartMethod, RestartDelay, ReasonCode, PackageList,\n      MaxMGCPDatagram,\
    \ and Capabilities.\n   The list may be extended by extension parameters.  The\
    \ response will\n   in turn include information about each of the items for which\n\
    \   auditing info was requested.  Supported parameters with empty values\n   MUST\
    \ always be returned.  However, if an endpoint is queried about a\n   parameter\
    \ it does not understand, the endpoint MUST NOT generate an\n   error; instead\
    \ the parameter MUST be omitted from the response:\n   * RequestedEvents: The\
    \ current value of RequestedEvents the endpoint\n     is using including the action(s)\
    \ and event parameters associated\n     with each event - if no actions are included,\
    \ the default action is\n     assumed. Persistent events are included in the list.\
    \ If an embedded\n     NotificationRequest is active, the RequestedEvents will\
    \ reflect the\n     events requested in the embedded NotificationRequest, not\
    \ any\n     surrounding RequestedEvents (whether embedded or not).\n   * DigitMap:\
    \  The digit map the endpoint is currently using.  The\n     parameter will be\
    \ empty if the endpoint does not have a digit map.\n   * SignalRequests:  A list\
    \ of the; Time-Out signals that are currently\n     active, On/Off signals that\
    \ are currently \"on\" for the endpoint\n     (with or without parameter), and\
    \ any pending Brief signals.  Time-\n     Out signals that have timed-out, and\
    \ currently playing Brief\n     signals are not included.  Any signal parameters\
    \ included in the\n     original SignalRequests will be included.\n   * RequestIdentifier:\
    \  The RequestIdentifier for the last\n     NotificationRequest received by this\
    \ endpoint (includes\n     NotificationRequests encapsulated in other commands).\
    \  If no\n     NotificationRequest has been received since reboot/restart, the\n\
    \     value zero will be returned.\n   * QuarantineHandling:  The QuarantineHandling\
    \ for the last\n     NotificationRequest received by this endpoint.  If\n    \
    \ QuarantineHandling was not included, or no notification request has\n     been\
    \ received, the default values will be returned.\n   * DetectEvents:  The value\
    \ of the most recently received DetectEvents\n     parameter plus any persistent\
    \ events implemented by the endpoint.\n     If no DetectEvents parameter has been\
    \ received, the (possibly\n     empty) list only includes persistent events.\n\
    \   * NotifiedEntity:  The current \"notified entity\" for the endpoint.\n   *\
    \ ConnectionIdentifiers:  The list of ConnectionIdentifiers for all\n     connections\
    \ that currently exist for the specified endpoint.\n   * ObservedEvents:  The\
    \ current list of observed events for the\n     endpoint.\n   * EventStates: \
    \ For events that have auditable states associated with\n     them, the event\
    \ corresponding to the state the endpoint is in,\n     e.g., off-hook if the endpoint\
    \ is off-hook.  Note that the\n     definition of the individual events will state\
    \ if the event in\n     question has an auditable state associated with it.\n\
    \   * BearerInformation:  The value of the last received\n     BearerInformation\
    \ parameter for this endpoint (this includes the\n     case where BearerInformation\
    \ was provisioned).  The parameter will\n     be empty if the endpoint has not\
    \ received a BearerInformation\n     parameter and a value was also not provisioned.\n\
    \   * RestartMethod:  \"restart\" if the endpoint is in-service and\n     operation\
    \ is normal, or if the endpoint is in the process of\n     becoming in-service\
    \ (a non-zero RestartDelay will indicate the\n     latter).  Otherwise, the value\
    \ of the restart method parameter in\n     the last RestartInProgress command\
    \ issued (or should have been\n     issued) by the endpoint.  Note that a \"disconnected\"\
    \ endpoint will\n     thus only report \"disconnected\" as long as it actually\
    \ is\n     disconnected, and \"restart\" will be reported once it is no longer\n\
    \     disconnected.  Similarly, \"cancel-graceful\" will not be reported,\n  \
    \   but \"graceful\" might (see Section 4.4.5 for further details).\n   * RestartDelay:\
    \  The value of the restart delay parameter if a\n     RestartInProgress command\
    \ was to be issued by the endpoint at the\n     time of this response, or zero\
    \ if the command would not include\n     this parameter.\n   * ReasonCode:  The\
    \ value of the ReasonCode parameter in the last\n     RestartInProgress or DeleteConnection\
    \ command issued by the gateway\n     for the endpoint, or the special value 000\
    \ if the endpoint's state\n     is normal.\n   * PackageList:  The packages supported\
    \ by the endpoint including\n     package version numbers.  For backwards compatibility,\
    \ support for\n     the parameter is OPTIONAL although implementations with package\n\
    \     versions higher than zero SHOULD support it.\n   * MaxMGCPDatagram:  The\
    \ maximum size of an MGCP datagram in bytes\n     that can be received by the\
    \ endpoint (see Section 3.5.4).  The\n     value excludes any lower layer overhead.\
    \  For backwards\n     compatibility, support for this parameter is OPTIONAL.\
    \  The default\n     maximum MGCP datagram size SHOULD be assumed if a value is\
    \ not\n     returned.\n   * Capabilities:  The capabilities for the endpoint similar\
    \ to the\n     LocalConnectionOptions parameter and including packages and\n \
    \    connection modes.  Extensions MAY be included as well.  If any\n     unknown\
    \ capabilities are reported, they MUST simply be ignored.  If\n     there is a\
    \ need to specify that some parameters, such as e.g.,\n     silence suppression,\
    \ are only compatible with some codecs, then the\n     gateway MUST return several\
    \ capability sets, each of which may\n     include:\n     - Compression Algorithm:\
    \  A list of supported codecs.  The rest of\n       the parameters in the capability\
    \ set will apply to all codecs\n       specified in this list.\n     - Packetization\
    \ Period:  A single value or a range may be\n       specified.\n     - Bandwidth:\
    \  A single value or a range corresponding to the range\n       for packetization\
    \ periods may be specified (assuming no silence\n       suppression).\n     -\
    \ Echo Cancellation:  Whether echo cancellation is supported or not\n       for\
    \ the endpoint.\n     - Silence Suppression:  Whether silence suppression is supported\
    \ or\n       not.\n     - Gain Control:  Whether gain control is supported or\
    \ not.\n     - Type of Service:  Whether type of service is supported or not.\n\
    \     - Resource Reservation:  Whether resource reservation is supported\n   \
    \    or not.\n     - Security:  Whether media encryption is supported or not.\n\
    \     - Type of network:  The type(s) of network supported.\n     - Packages:\
    \  A list of packages supported.  The first package in\n       the list will be\
    \ the default package.\n     - Modes:  A list of supported connection modes.\n\
    \   The Call Agent may then decide to use the AuditConnection command to\n   obtain\
    \ further information about the connections.\n   If no info was requested and\
    \ the EndpointId refers to a valid\n   endpoint (in-service or not), the gateway\
    \ simply returns a positive\n   acknowledgement.\n   ReturnCode is a parameter\
    \ returned by the gateway.  It indicates the\n   outcome of the command and consists\
    \ of an integer number optionally\n   followed by commentary.\n   Note that PackageList\
    \ MAY also be included with error code 518\n   (unsupported package).\n"
- title: 2.3.11 AuditConnection
  contents:
  - "2.3.11 AuditConnection\n   The AuditConnection command can be used by the Call\
    \ Agent to retrieve\n   the parameters attached to a connection.\n         ReturnCode,\n\
    \         [CallId,]\n         [NotifiedEntity,]\n         [LocalConnectionOptions,]\n\
    \         [Mode,]\n         [RemoteConnectionDescriptor,]\n         [LocalConnectionDescriptor,]\n\
    \         [ConnectionParameters,]\n         [PackageList]\n         <-- AuditConnection(EndpointId,\n\
    \                             ConnectionId,\n                             RequestedInfo)\n\
    \   The EndpointId parameter specifies the endpoint that handles the\n   connection.\
    \  The wildcard conventions SHALL NOT be used.\n   The ConnectionId parameter\
    \ is the identifier of the audited\n   connection, within the context of the specified\
    \ endpoint.\n   The (possibly empty) RequestedInfo describes the information that\
    \ is\n   requested for the ConnectionId within the EndpointId specified.  The\n\
    \   following connection info can be audited with this command:\n      CallId,\
    \ NotifiedEntity, LocalConnectionOptions, Mode,\n      RemoteConnectionDescriptor,\
    \ LocalConnectionDescriptor,\n      ConnectionParameters\n   The AuditConnection\
    \ response will in turn include information about\n   each of the items auditing\
    \ info was requested for:\n   * CallId, the CallId for the call the connection\
    \ belongs to.\n   * NotifiedEntity, the current \"notified entity\" for the Connection.\n\
    \     Note this is the same as the \"notified entity\" for the endpoint\n    \
    \ (included here for backwards compatibility).\n   * LocalConnectionOptions, the\
    \ most recent LocalConnectionOptions\n     parameters that was actually supplied\
    \ for the connection (omitting\n     LocalConnectionOptions from a command thus\
    \ does not change this\n     value).  Note that default parameters omitted from\
    \ the most recent\n     LocalConnectionOptions will not be included.\n     LocalConnectionOptions\
    \ that retain their value across\n     ModifyConnection commands and which have\
    \ been included in a\n     previous command for the connection are also included,\
    \ regardless\n     of whether they were supplied in the most recent\n     LocalConnectionOptions\
    \ or not.\n   * Mode, the current mode of the connection.\n   * RemoteConnectionDescriptor,\
    \ the RemoteConnectionDescriptor that was\n     supplied to the gateway for the\
    \ connection.\n   * LocalConnectionDescriptor, the LocalConnectionDescriptor the\n\
    \     gateway supplied for the connection.\n   * ConnectionParameters, the current\
    \ values of the connection\n     parameters for the connection.\n   If no info\
    \ was requested and the EndpointId is valid, the gateway\n   simply checks that\
    \ the connection exists, and if so returns a\n   positive acknowledgement.  Note,\
    \ that by definition, the endpoint\n   must be in-service for this to happen,\
    \ as out-of-service endpoints do\n   not have any connections.\n   ReturnCode\
    \ is a parameter returned by the gateway.  It indicates the\n   outcome of the\
    \ command and consists of an integer number optionally\n   followed by commentary.\n\
    \   PackageList is a list of supported packages that MAY be included with\n  \
    \ error code 518 (unsupported package).\n"
- title: 2.3.12 RestartInProgress
  contents:
  - "2.3.12 RestartInProgress\n   The RestartInProgress command is used by the gateway\
    \ to signal that\n   an endpoint, or a group of endpoints, is put in-service or\
    \ out-of-\n   service.\n         ReturnCode,\n         [NotifiedEntity,]\n   \
    \      [PackageList]\n         <-- RestartInProgress(EndPointId,\n           \
    \                    RestartMethod,\n                               [RestartDelay,]\n\
    \                               [ReasonCode])\n   The EndPointId identifies the\
    \ endpoint(s) that are put in-service or\n   out-of-service.  The \"all of\" wildcard\
    \ convention may be used to\n   apply the command to a group of endpoints managed\
    \ by the same Call\n   Agent, such as for example all endpoints that are attached\
    \ to a\n   specified interface, or even all endpoints that are attached to a\n\
    \   given gateway.  The \"any of\" wildcard convention SHALL NOT be used.\n  \
    \ The RestartMethod parameter specifies the type of restart.  The\n   following\
    \ values have been defined:\n   * A \"graceful\" restart method indicates that\
    \ the specified endpoints\n     will be taken out-of-service after the specified\
    \ delay.  The\n     established connections are not yet affected, but the Call\
    \ Agent\n     SHOULD refrain from establishing new connections, and SHOULD try\
    \ to\n     gracefully tear down the existing connections.\n   * A \"forced\" restart\
    \ method indicates that the specified endpoints\n     are taken abruptly out-of-service.\
    \  The established connections, if\n     any, are lost.\n   * A \"restart\" method\
    \ indicates that service will be restored on the\n     endpoints after the specified\
    \ \"restart delay\", i.e., the endpoints\n     will be in-service.  The endpoints\
    \ are in their clean default state\n     and there are no connections that are\
    \ currently established on the\n     endpoints.\n   * A \"disconnected\" method\
    \ indicates that the endpoint has become\n     disconnected and is now trying\
    \ to establish connectivity (see\n     Section 4.4.7).  The \"restart delay\"\
    \ specifies the number of\n     seconds the endpoint has been disconnected.  Established\n\
    \     connections are not affected.\n   * A \"cancel-graceful\" method indicates\
    \ that a gateway is canceling a\n     previously issued \"graceful\" restart command.\
    \  The endpoints are\n     still in-service.\n   The list of restart methods may\
    \ be extended.\n   The optional \"restart delay\" parameter is expressed as a\
    \ number of\n   seconds.  If the number is absent, the delay value MUST be considered\n\
    \   null (i.e., zero).  In the case of the \"graceful\" method, a null\n   delay\
    \ indicates that the Call Agent SHOULD simply wait for the\n   natural termination\
    \ of the existing connections, without establishing\n   new connections.  The\
    \ restart delay is always considered null in the\n   case of the \"forced\" and\
    \ \"cancel-graceful\" methods, and hence the\n   \"restart delay\" parameter MUST\
    \ NOT be used with these restart\n   methods.  When the gateway sends a \"restart\"\
    \ or \"graceful\"\n   RestartInProgress message with a non-zero restart delay,\
    \ the gateway\n   SHOULD send an updated RestartInProgress message after the \"\
    restart\n   delay\" has passed.\n   A restart delay of null for the \"restart\"\
    \ method indicates that\n   service has already been restored.  This typically\
    \ will occur after\n   gateway startup/reboot.  To mitigate the effects of a gateway\
    \ IP\n   address change as a result of a re-boot, the Call Agent MAY wish to\n\
    \   either flush its DNS cache for the gateway's domain name or resolve\n   the\
    \ gateway's domain name by querying the DNS regardless of the TTL\n   of a current\
    \ DNS resource record for the restarted gateway.\n   The optional reason code\
    \ parameter indicates the cause of the\n   restart.\n   Gateways SHOULD send a\
    \ \"graceful\" or \"forced\" RestartInProgress\n   message (for the relevant endpoints)\
    \ as a courtesy to the Call Agent\n   when they are taken out-of-service, e.g.,\
    \ by being shutdown, or taken\n   out-of-service by a network management system,\
    \ however the Call Agent\n   cannot rely on always receiving such a message. \
    \ Gateways MUST send a\n   \"restart\" RestartInProgress message (for the relevant\
    \ endpoints) with\n   a null delay to their Call Agent when they are back in-service\n\
    \   according to the restart procedure specified in Section 4.4.6 - Call\n   Agents\
    \ can rely on receiving this message.  Also, gateways MUST send\n   a \"disconnected\"\
    \ RestartInProgress message (for the relevant\n   endpoints) to their current\
    \ \"notified entity\" according to the\n   \"disconnected\" procedure specified\
    \ in Section 4.4.7.\n   The RestartInProgress message will be sent to the current\
    \ \"notified\n   entity\" for the EndpointId in question.  It is expected that\
    \ a\n   default Call Agent, i.e., \"notified entity\", has been provisioned so\n\
    \   that after a reboot/restart, the default Call Agent will always be\n   the\
    \ \"notified entity\" for the endpoint.  Gateways SHOULD take full\n   advantage\
    \ of wild-carding to minimize the number of RestartInProgress\n   messages generated\
    \ when multiple endpoints in a gateway restart and\n   the endpoints are managed\
    \ by the same Call Agent.\n   ReturnCode is a parameter returned by the Call Agent.\
    \  It indicates\n   the outcome of the command and consists of an integer number\n\
    \   optionally followed by commentary.\n   A NotifiedEntity may additionally be\
    \ returned with the response to\n   the RestartInProgress from the Call Agent\
    \ - this SHOULD normally only\n   be done in response to \"restart\" or \"disconnected\"\
    \ (see also Section\n   4.4.6 and 4.4.7):\n   * If the response indicated success\
    \ (return code 200 - transaction\n     executed), the restart in question completed\
    \ successfully, and the\n     NotifiedEntity returned is the new \"notified entity\"\
    \ for the\n     endpoint(s).\n   * If the response from the Call Agent indicated\
    \ an error, the restart\n     in question did not complete successfully.  If a\
    \ NotifiedEntity\n     parameter was included in the response returned, it specifies\
    \ a new\n     \"notified entity\" for the endpoint(s), which MUST be used when\n\
    \     retrying the restart in question (as a new transaction).  This\n     SHOULD\
    \ only be done with error code 521 (endpoint redirected).\n   Note that the above\
    \ behavior for returning a NotifiedEntity in the\n   response is only defined\
    \ for RestartInProgress responses and SHOULD\n   NOT be done for responses to\
    \ other commands.  Any other behavior is\n   undefined.\n   PackageList is a list\
    \ of supported packages that MAY be included with\n   error code 518 (unsupported\
    \ package).\n"
- title: 2.4 Return Codes and Error Codes
  contents:
  - "2.4 Return Codes and Error Codes\n   All MGCP commands are acknowledged.  The\
    \ acknowledgment carries a\n   return code, which indicates the status of the\
    \ command.  The return\n   code is an integer number, for which the following\
    \ ranges of values\n   have been defined:\n   * values between 000 and 099 indicate\
    \ a response acknowledgement\n   * values between 100 and 199 indicate a provisional\
    \ response\n   * values between 200 and 299 indicate a successful completion\n\
    \   * values between 400 and 499 indicate a transient error\n   * values between\
    \ 500 and 599 indicate a permanent error\n   * values between 800 and 899 are\
    \ package specific response codes.\n   A broad description of transient errors\
    \ (4XX error codes) versus\n   permanent errors (5XX error codes) is as follows:\n\
    \   * If a Call Agent receives a transient error, there is the\n     expectation\
    \ of the possibility that a future similar request will\n     be honored by the\
    \ endpoint.  In some cases, this may require some\n     state change in the environment\
    \ of the endpoint (e.g., hook state\n     as in the case of error codes 401 or\
    \ 402; resource availability as\n     in the case of error code 403, or bandwidth\
    \ availability as in the\n     case of error code 404).\n   * Permanent errors\
    \ (error codes 500 to 599) indicate one or more\n     permanent conditions either\
    \ due to protocol error or\n     incompatibility between the endpoint and the\
    \ Call Agent, or because\n     of some error condition over which the Call Agent\
    \ has no control.\n     Examples are protocol errors, requests for endpoint capabilities\n\
    \     that do not exist, errors on interfaces associated with the\n     endpoint,\
    \ missing or incorrect information in the request or any\n     number of other\
    \ conditions which will simply not disappear with\n     time.\n   The values that\
    \ have been already defined are the following:\n   000 Response Acknowledgement.\n\
    \   100 The transaction is currently being executed.  An actual\n       completion\
    \ message will follow later.\n   101 The transaction has been queued for execution.\
    \  An actual\n       completion message will follow later.\n   200 The requested\
    \ transaction was executed normally.  This return\n       code can be used for\
    \ a successful response to any command.\n   250 The connection was deleted.  This\
    \ return code can only be used\n       for a successful response to a DeleteConnection\
    \ command.\n   400 The transaction could not be executed, due to some unspecified\n\
    \       transient error.\n   401 The phone is already off hook.\n   402 The phone\
    \ is already on hook.\n   403 The transaction could not be executed, because the\
    \ endpoint does\n       not have sufficient resources at this time.\n   404 Insufficient\
    \ bandwidth at this time.\n   405 The transaction could not be executed, because\
    \ the endpoint is\n       \"restarting\".\n   406 Transaction time-out.  The transaction\
    \ did not complete in a\n       reasonable period of time and has been aborted.\n\
    \   407 Transaction aborted.  The transaction was aborted by some\n       external\
    \ action, e.g., a ModifyConnection command aborted by a\n       DeleteConnection\
    \ command.\n   409 The transaction could not be executed because of internal\n\
    \       overload.\n   410 No endpoint available.  A valid \"any of\" wildcard\
    \ was used,\n       however there was no endpoint available to satisfy the request.\n\
    \   500 The transaction could not be executed, because the endpoint is\n     \
    \  unknown.\n   501 The transaction could not be executed, because the endpoint\
    \ is\n       not ready.  This includes the case where the endpoint is out-of-\n\
    \       service.\n   502 The transaction could not be executed, because the endpoint\
    \ does\n       not have sufficient resources (permanent condition).\n   503 \"\
    All of\" wildcard too complicated.\n   504 Unknown or unsupported command.\n \
    \  505 Unsupported RemoteConnectionDescriptor.  This SHOULD be used when\n   \
    \    one or more mandatory parameters or values in the\n       RemoteConnectionDescriptor\
    \ is not supported.\n   506 Unable to satisfy both LocalConnectionOptions and\n\
    \       RemoteConnectionDescriptor.  This SHOULD be used when the\n       LocalConnectionOptions\
    \ and RemoteConnectionDescriptor contain one\n       or more mandatory parameters\
    \ or values that conflict with each\n       other and/or cannot be supported at\
    \ the same time (except for\n       codec negotiation failure - see error code\
    \ 534).\n   507 Unsupported functionality. Some unspecified functionality\n  \
    \     required to carry out the command is not supported. Note that\n       several\
    \ other error codes have been defined for specific areas of\n       unsupported\
    \ functionality (e.g. 508, 511, etc.), and this error\n       code SHOULD only\
    \ be used if there is no other more specific error\n       code for the unsupported\
    \ functionality.\n   508 Unknown or unsupported quarantine handling.\n   509 Error\
    \ in RemoteConnectionDescriptor.  This SHOULD be used when\n       there is a\
    \ syntax or semantic error in the\n       RemoteConnectionDescriptor.\n   510\
    \ The transaction could not be executed, because some unspecified\n       protocol\
    \ error was detected.  Automatic recovery from such an\n       error will be very\
    \ difficult, and hence this code SHOULD only be\n       used as a last resort.\n\
    \   511 The transaction could not be executed, because the command\n       contained\
    \ an unrecognized extension.  This code SHOULD be used\n       for unsupported\
    \ critical parameter extensions (\"X+\").\n   512 The transaction could not be\
    \ executed, because the gateway is not\n       equipped to detect one of the requested\
    \ events.\n   513 The transaction could not be executed, because the gateway is\
    \ not\n       equipped to generate one of the requested signals.\n   514 The transaction\
    \ could not be executed, because the gateway cannot\n       send the specified\
    \ announcement.\n   515 The transaction refers to an incorrect connection-id (may\
    \ have\n       been already deleted).\n   516 The transaction refers to an unknown\
    \ call-id, or the call-id\n       supplied is incorrect (e.g., connection-id not\
    \ associated with\n       this call-id).\n   517 Unsupported or invalid mode.\n\
    \   518 Unsupported or unknown package.  It is RECOMMENDED to include a\n    \
    \   PackageList parameter with the list of supported packages in the\n       response,\
    \ especially if the response is generated by the Call\n       Agent.\n   519 Endpoint\
    \ does not have a digit map.\n   520 The transaction could not be executed, because\
    \ the endpoint is\n       \"restarting\".  In most cases this would be a transient\
    \ error, in\n       which case, error code 405 SHOULD be used instead.  The error\n\
    \       code is only included here for backwards compatibility.\n   521 Endpoint\
    \ redirected to another Call Agent.  The associated\n       redirection behavior\
    \ is only well-defined when this response is\n       issued for a RestartInProgress\
    \ command.\n   522 No such event or signal.  The request referred to an event\
    \ or\n       signal that is not defined in the relevant package (which could\n\
    \       be the default package).\n   523 Unknown action or illegal combination\
    \ of actions.\n   524 Internal inconsistency in LocalConnectionOptions.\n   525\
    \ Unknown extension in LocalConnectionOptions.  This code SHOULD be\n       used\
    \ for unsupported mandatory vendor extensions (\"x+\").\n   526 Insufficient bandwidth.\
    \  In cases where this is a transient\n       error, error code 404 SHOULD be\
    \ used instead.\n   527 Missing RemoteConnectionDescriptor.\n   528 Incompatible\
    \ protocol version.\n   529 Internal hardware failure.\n   530 CAS signaling protocol\
    \ error.\n   531 Failure of a grouping of trunks (e.g., facility failure).\n \
    \  532 Unsupported value(s) in LocalConnectionOptions.\n   533 Response too large.\n\
    \   534 Codec negotiation failure.\n   535 Packetization period not supported.\n\
    \   536 Unknown or unsupported RestartMethod.\n   537 Unknown or unsupported digit\
    \ map extension.\n   538 Event/signal parameter error (e.g., missing, erroneous,\n\
    \       unsupported, unknown, etc.).\n   539 Invalid or unsupported command parameter.\
    \ This code SHOULD only\n       be used when the parameter is neither a package\
    \ or vendor\n       extension parameter.\n   540 Per endpoint connection limit\
    \ exceeded.\n   541 Invalid or unsupported LocalConnectionOptions. This code SHOULD\n\
    \       only be used when the LocalConnectionOptions is neither a package\n  \
    \     nor a vendor extension LocalConnectionOptions.\n   The set of return codes\
    \ may be extended in a future version of the\n   protocol.  Implementations that\
    \ receive an unknown or unsupported\n   return code SHOULD treat the return code\
    \ as follows:\n   * Unknown 0xx code treated as 000.\n   * Unknown 1xx code treated\
    \ as 100.\n   * Unknown 2xx code treated as 200.\n   * Unknown 3xx code treated\
    \ as 521.\n   * Unknown 4xx code treated as 400.\n   * Unknown 5xx-9xx code treated\
    \ as 510.\n"
- title: 2.5 Reason Codes
  contents:
  - "2.5 Reason Codes\n   Reason codes are used by the gateway when deleting a connection\
    \ to\n   inform the Call Agent about the reason for deleting the connection.\n\
    \   They may also be used in a RestartInProgress command to inform the\n   Call\
    \ Agent of the reason for the RestartInProgress.\n   The reason code is an integer\
    \ number, and the following values have\n   been defined:\n   000 Endpoint state\
    \ is normal (this code is only used in response to\n       audit requests).\n\
    \   900 Endpoint malfunctioning.\n   901 Endpoint taken out-of-service.\n   902\
    \ Loss of lower layer connectivity (e.g., downstream sync).\n   903 QoS resource\
    \ reservation was lost.\n   904 Manual intervention.\n   905 Facility failure\
    \ (e.g., DS-0 failure).\n   The set of reason codes can be extended.\n"
- title: 2.6 Use of Local Connection Options and Connection Descriptors
  contents:
  - "2.6 Use of Local Connection Options and Connection Descriptors\n   As indicated\
    \ previously, the normal sequence in setting up a bi-\n   directional connection\
    \ involves at least 3 steps:\n   1) The Call Agent asks the first gateway to \"\
    create a connection\" on\n      an endpoint.  The gateway allocates resources\
    \ to that connection,\n      and responds to the command by providing a \"session\
    \ description\"\n      (referred to as its LocalConnectionDescriptor).  The session\n\
    \      description contains the information necessary for another party\n    \
    \  to send packets towards the newly created connection.\n   2) The Call Agent\
    \ then asks the second gateway to \"create a\n      connection\" on an endpoint.\
    \  The command carries the \"session\n      description\" provided by the first\
    \ gateway (now referred to as the\n      RemoteConnectionDescriptor).  The gateway\
    \ allocates resources to\n      that connection, and responds to the command by\
    \ providing its own\n      \"session description\" (LocalConnectionDescriptor).\n\
    \   3) The Call Agent uses a \"modify connection\" command to provide this\n \
    \     second \"session description\" (now referred to as the\n      RemoteConnectionDescriptor\
    \ ) to the first endpoint.  Once this is\n      done, communication can proceed\
    \ in both directions.\n   When the Call Agent issues a Create or Modify Connection\
    \ command,\n   there are thus three parameters that determine the media supported\
    \ by\n   that connection:\n   * LocalConnectionOptions:  Supplied by the Call\
    \ Agent to control the\n     media parameters used by the gateway for the connection.\
    \ When\n     supplied, the gateway MUST conform to these media parameters until\n\
    \     either the connection is deleted, or a ModifyConnection command\n     with\
    \ new media parameters (LocalConnectionOptions or\n     RemoteConnectionDescriptor)\
    \ is received.\n   * RemoteConnectionDescriptor:  Supplied by the Call Agent to\
    \ convey\n     the media parameters supported by the other side of the connection.\n\
    \     When supplied, the gateway MUST conform to these media parameters\n    \
    \ until either the connection is deleted, or a ModifyConnection\n     command\
    \ with new media parameters (LocalConnectionOptions or\n     RemoteConnectionDescriptor)\
    \ is received.\n   * LocalConnectionDescriptor:  Supplied by the gateway to the\
    \ Call\n     Agent to convey the media parameters it supports for the\n     connection.\
    \ When supplied, the gateway MUST honor the media\n     parameters until either\
    \ the connection is deleted, or the gateway\n     issues a new LocalConnectionDescriptor\
    \ for that connection.\n   In determining which codec(s) to provide in the\n \
    \  LocalConnectionDescriptor, there are three lists of codecs that a\n   gateway\
    \ needs to consider:\n   * A list of codecs allowed by the LocalConnectionOptions\
    \ in the\n     current command (either explicitly by encoding method or implicitly\n\
    \     by bandwidth and/or packetization period).\n   * A list of codecs in the\
    \ RemoteConnectionDescriptor in the current\n     command.\n   * An internal list\
    \ of codecs that the gateway can support for the\n     connection. A gateway MAY\
    \ support one or more codecs for a given\n     connection.\n   Codec selection\
    \ (including all relevant media parameters) can then be\n   described by the following\
    \ steps:\n   1. An approved list of codecs is formed by taking the intersection\
    \ of\n      the internal list of codecs and codecs allowed by the\n      LocalConnectionOptions.\
    \ If LocalConnectionOptions were not\n      provided in the current command, the\
    \ approved list of codecs thus\n      contains the internal list of codecs.\n\
    \   2. If the approved list of codecs is empty, a codec negotiation\n      failure\
    \ has occurred and an error response is generated (error\n      code 534 - codec\
    \ negotiation failure, is RECOMMENDED).\n   3. Otherwise, a negotiated list of\
    \ codecs is formed by taking the\n      intersection of the approved list of codecs\
    \ and codecs allowed by\n      the RemoteConnectionDescriptor. If a RemoteConnectionDescriptor\n\
    \      was not provided in the current command, the negotiated list of\n     \
    \ codecs thus contains the approved list of codecs.\n   4. If the negotiated list\
    \ of codecs is empty, a codec negotiation\n      failure has occurred and an error\
    \ response is generated (error\n      code 534 - codec negotiation failure, is\
    \ RECOMMENDED).\n   5. Otherwise, codec negotiation has succeeded, and the negotiated\n\
    \      list of codecs is returned in the LocalConnectionDescriptor.\n   Note that\
    \ both LocalConnectionOptions and the\n   RemoteConnectionDescriptor can contain\
    \ a list of codecs ordered by\n   preference. When both are supplied in the current\
    \ command, the\n   gateway MUST adhere to the preferences provided in the\n  \
    \ LocalConnectionOptions.\n"
- title: 2.7 Resource Reservations
  contents:
  - "2.7 Resource Reservations\n   The gateways can be instructed to perform a reservation,\
    \ for example\n   using RSVP, on a given connection. When a reservation is needed,\
    \ the\n   call agent will specify the reservation profile to be used, which is\n\
    \   either \"controlled load\" or \"guaranteed service\". The absence of\n   reservation\
    \ can be indicated by asking for the \"best effort\" service,\n   which is the\
    \ default value of this parameter in a CreateConnection\n   command. For a ModifyConnection\
    \ command, the default is simply to\n   retain the current value. When reservation\
    \ has been asked on a\n   connection, the gateway will:\n   * start emitting RSVP\
    \ \"PATH\" messages if the connection is in \"send-\n     only\", \"send-receive\"\
    , \"conference\", \"network loop back\" or\n     \"network continuity test\" mode\
    \ (if a suitable remote connection\n     descriptor has been received,).\n   *\
    \ start emitting RSVP \"RESV\" messages as soon as it receives \"PATH\"\n    \
    \ messages if the connection is in \"receive-only\", \"send-receive\",\n     \"\
    conference\", \"network loop back\" or \"network continuity test\"\n     mode.\n\
    \   The RSVP filters will be deduced from the characteristics of the\n   connection.\
    \ The RSVP resource profiles will be deduced from the\n   connection's codecs,\
    \ bandwidth and packetization period.\n"
- title: 3. Media Gateway Control Protocol
  contents:
  - "3. Media Gateway Control Protocol\n   The Media Gateway Control Protocol (MGCP)\
    \ implements the media\n   gateway control interface as a set of transactions.\
    \ The transactions\n   are composed of a command and a mandatory response. There\
    \ are nine\n   commands:\n   * EndpointConfiguration\n   * CreateConnection\n\
    \   * ModifyConnection\n   * DeleteConnection\n   * NotificationRequest\n   *\
    \ Notify\n   * AuditEndpoint\n   * AuditConnection\n   * RestartInProgress\n \
    \  The first five commands are sent by the Call Agent to a gateway. The\n   Notify\
    \ command is sent by the gateway to the Call Agent. The gateway\n   may also send\
    \ a DeleteConnection as defined in Section 2.3.8.  The\n   Call Agent may send\
    \ either of the Audit commands to the gateway, and\n   the gateway may send a\
    \ RestartInProgress command to the Call Agent.\n"
- title: 3.1 General Description
  contents:
  - "3.1 General Description\n   All commands are composed of a Command header, optionally\
    \ followed by\n   a session description.\n   All responses are composed of a Response\
    \ header, optionally followed\n   by session description information.\n   Headers\
    \ and session descriptions are encoded as a set of text lines,\n   separated by\
    \ a carriage return and line feed character (or,\n   optionally, a single line-feed\
    \ character). The session descriptions\n   are preceded by an empty line.\n  \
    \ MGCP uses a transaction identifier to correlate commands and\n   responses.\
    \ The transaction identifier is encoded as a component of\n   the command header\
    \ and repeated as a component of the response header\n   (see sections 3.2.1.2\
    \ and 3.3).\n   Note that an ABNF grammar for MGCP is provided in Appendix A.\n\
    \   Commands and responses SHALL be encoded in accordance with the\n   grammar,\
    \ which, per RFC 2234, is case-insensitive except for the SDP\n   part.  Similarly,\
    \ implementations SHALL be capable of decoding\n   commands and responses that\
    \ follow the grammar.  Additionally, it is\n   RECOMMENDED that implementations\
    \ tolerate additional linear white\n   space.\n   Some productions allow for use\
    \ of quoted strings, which can be\n   necessary to avoid syntax problems.  Where\
    \ the quoted string form is\n   used, the contents will be UTF-8 encoded [20],\
    \ and the actual value\n   provided is the unquoted string (UTF-8 encoded).  Where\
    \ both a quoted\n   and unquoted string form is allowed, either form can be used\
    \ provided\n   it does not otherwise violate the grammar.\n   In the following,\
    \ we provide additional detail on the format of MGCP\n   commands and responses.\n"
- title: 3.2 Command Header
  contents:
  - "3.2 Command Header\n   The command header is composed of:\n   *  A command line,\
    \ identifying the requested action or verb, the\n      transaction identifier,\
    \ the endpoint towards which the action is\n      requested, and the MGCP protocol\
    \ version,\n   *  A set of zero or more parameter lines, composed of a parameter\n\
    \      name followed by a parameter value.\n   Unless otherwise noted or dictated\
    \ by other referenced standards\n   (e.g., SDP), each component in the command\
    \ header is case\n   insensitive.  This goes for verbs as well as parameters and\
    \ values,\n   and hence all comparisons MUST treat upper and lower case as well\
    \ as\n   combinations of these as being equal.\n"
- title: 3.2.1 Command Line
  contents:
  - "3.2.1 Command Line\n   The command line is composed of:\n   * The name of the\
    \ requested verb,\n   * The identification of the transaction,\n   * The name\
    \ of the endpoint(s) that are to execute the command (in\n     notifications or\
    \ restarts, the name of the endpoint(s) that is\n     issuing the command),\n\
    \   * The protocol version.\n     These four items are encoded as strings of printable\
    \ ASCII\n     characters, separated by white spaces, i.e., the ASCII space (0x20)\n\
    \     or tabulation (0x09) characters.  It is RECOMMENDED to use exactly\n   \
    \  one ASCII space separator.  However, MGCP entities MUST be able to\n     parse\
    \ messages with additional white space characters.\n"
- title: 3.2.1.1 Coding of the Requested Verb
  contents:
  - "3.2.1.1 Coding of the Requested Verb\n   The verbs that can be requested are\
    \ encoded as four letter upper or\n   lower case ASCII codes (comparisons SHALL\
    \ be case insensitive) as\n   defined in the following table:\n              \
    \    -----------------------------\n                 |       Verb           |\
    \ Code |\n                 |----------------------|------|\n                 |\
    \ EndpointConfiguration| EPCF |\n                 | CreateConnection     | CRCX\
    \ |\n                 | ModifyConnection     | MDCX |\n                 | DeleteConnection\
    \     | DLCX |\n                 | NotificationRequest  | RQNT |\n           \
    \      | Notify               | NTFY |\n                 | AuditEndpoint     \
    \   | AUEP |\n                 | AuditConnection      | AUCX |\n             \
    \    | RestartInProgress    | RSIP |\n                  -----------------------------\n\
    \   The transaction identifier is encoded as a string of up to 9 decimal\n   digits.\
    \  In the command line, it immediately follows the coding of\n   the verb.\n \
    \  New verbs may be defined in further versions of the protocol.  It may\n   be\
    \ necessary, for experimentation purposes, to use new verbs before\n   they are\
    \ sanctioned in a published version of this protocol.\n   Experimental verbs MUST\
    \ be identified by a four letter code starting\n   with the letter X, such as\
    \ for example XPER.\n"
- title: 3.2.1.2 Transaction Identifiers
  contents:
  - "3.2.1.2 Transaction Identifiers\n   MGCP uses a transaction identifier to correlate\
    \ commands and\n   responses.  A gateway supports two separate transaction identifier\n\
    \   name spaces:\n   * a transaction identifier name space for sending transactions,\
    \ and\n   * a transaction identifier name space for receiving transactions.\n\
    \   At a minimum, transaction identifiers for commands sent to a given\n   gateway\
    \ MUST be unique for the maximum lifetime of the transactions\n   within the collection\
    \ of Call Agents that control that gateway.\n   Thus, regardless of the sending\
    \ Call Agent, gateways can always\n   detect duplicate transactions by simply\
    \ examining the transaction\n   identifier.  The coordination of these transaction\
    \ identifiers\n   between Call Agents is outside the scope of this specification\n\
    \   though.\n   Transaction identifiers for all commands sent from a given gateway\n\
    \   MUST be unique for the maximum lifetime of the transactions\n   regardless\
    \ of which Call Agent the command is sent to.  Thus, a Call\n   Agent can always\
    \ detect a duplicate transaction from a gateway by the\n   combination of the\
    \ domain-name of the endpoint and the transaction\n   identifier.\n   The transaction\
    \ identifier is encoded as a string of up to nine\n   decimal digits.  In the\
    \ command lines, it immediately follows the\n   coding of the verb.\n   Transaction\
    \ identifiers have values between 1 and 999,999,999 (both\n   included).  Transaction\
    \ identifiers SHOULD NOT use any leading\n   zeroes, although equality is based\
    \ on numerical value, i.e., leading\n   zeroes are ignored.  An MGCP entity MUST\
    \ NOT reuse a transaction\n   identifier more quickly than three minutes after\
    \ completion of the\n   previous command in which the identifier was used.\n"
- title: 3.2.1.3 Coding of the Endpoint Identifiers and Entity Names
  contents:
  - "3.2.1.3 Coding of the Endpoint Identifiers and Entity Names\n   The endpoint\
    \ identifiers and entity names are encoded as case\n   insensitive e-mail addresses,\
    \ as defined in RFC 821, although with\n   some syntactic restrictions on the\
    \ local part of the name.\n   Furthermore, both the local endpoint name part and\
    \ the domain name\n   part can each be up to 255 characters.  In these addresses,\
    \ the\n   domain name identifies the system where the endpoint is attached,\n\
    \   while the left side identifies a specific endpoint or entity on that\n   system.\n\
    \   Examples of such addresses are:\n    ------------------------------------------------------------------\n\
    \   | hrd4/56@gw23.example.net     |  Circuit number 56 in             |\n   |\
    \                              |  interface \"hrd4\" of the Gateway  |\n   | \
    \                             |  23 of the \"Example\" network      |\n   | Call-agent@ca.example.net\
    \    |  Call Agent for the               |\n   |                             \
    \ |  \"example\" network                |\n   | Busy-signal@ann12.example.net|\
    \  The \"busy signal\" virtual        |\n   |                              | \
    \ endpoint in the announcement     |\n   |                              |  server\
    \ number 12.                |\n    ------------------------------------------------------------------\n\
    \   The name of a notified entity is expressed with the same syntax, with\n  \
    \ the possible addition of a port number as in:\n      Call-agent@ca.example.net:5234\n\
    \   In case the port number is omitted from the notified entity, the\n   default\
    \ MGCP Call Agent port (2727) MUST be used.\n"
- title: 3.2.1.4 Coding of the Protocol Version
  contents:
  - "3.2.1.4 Coding of the Protocol Version\n   The protocol version is coded as the\
    \ keyword MGCP followed by a white\n   space and the version number, and optionally\
    \ followed by a profile\n   name.  The version number is composed of a major version,\
    \ coded by a\n   decimal number, a dot, and a minor version number, coded as a\
    \ decimal\n   number.  The version described in this document is version 1.0.\n\
    \   The profile name, if present, is represented by white-space separated\n  \
    \ strings of visible (printable) characters extending to the end of the\n   line.\
    \  Profile names may be defined for user communities who want to\n   apply restrictions\
    \ or other profiling to MGCP.\n   In the initial messages, the version will be\
    \ coded as:\n      MGCP 1.0\n   An entity that receives a command with a protocol\
    \ version it does not\n   support, MUST respond with an error (error code 528\
    \ - incompatible\n   protocol version, is RECOMMENDED).  Note that this applies\
    \ to\n   unsupported profiles as well.\n"
- title: 3.2.2 Parameter Lines
  contents:
  - "3.2.2 Parameter Lines\n   Parameter lines are composed of a parameter name, which\
    \ in most cases\n   is composed of one or two characters, followed by a colon,\
    \ optional\n   white space(s) and the parameter value.  The parameters that can\
    \ be\n   present in commands are defined in the following table:\n    ------------------------------------------------------------------\n\
    \   |Parameter name        | Code |  Parameter value                   |\n   |----------------------|------|------------------------------------|\n\
    \   |BearerInformation     |   B  |  See description (3.2.2.1).        |\n   |CallId\
    \                |   C  |  See description (3.2.2.2).        |\n   |Capabilities\
    \          |   A  |  See description (3.2.2.3).        |\n   |ConnectionId   \
    \       |   I  |  See description (3.2.2.5).        |\n   |ConnectionMode    \
    \    |   M  |  See description (3.2.2.6).        |\n   |ConnectionParameters \
    \ |   P  |  See description (3.2.2.7).        |\n   |DetectEvents          | \
    \  T  |  See description (3.2.2.8).        |\n   |DigitMap              |   D\
    \  |  A text encoding of a digit map.   |\n   |EventStates           |   ES |\
    \  See description (3.2.2.9).        |\n   |LocalConnectionOptions|   L  |  See\
    \ description (3.2.2.10).       |\n   |MaxMGCPDatagram       |   MD |  See description\
    \ (3.2.2.11).       |\n   |NotifiedEntity        |   N  |  An identifier, in RFC\
    \ 821 format, |\n   |                      |      |  composed of an arbitrary\
    \ string   |\n   |                      |      |  and of the domain name of the\
    \     |\n   |                      |      |  requesting entity, possibly com-\
    \  |\n   |                      |      |  pleted by a port number, as in:   |\n\
    \   |                      |      |    Call-agent@ca.example.net:5234  |\n   |\
    \                      |      |  See also Section 3.2.1.3.         |\n   |ObservedEvents\
    \        |   O  |  See description (3.2.2.12).       |\n   |PackageList      \
    \     |   PL |  See description (3.2.2.13).       |\n   |QuarantineHandling  \
    \  |   Q  |  See description (3.2.2.14).       |\n   |ReasonCode            |\
    \   E  |  A string with a 3 digit integer   |\n   |                      |   \
    \   |  optionally followed by a set of   |\n   |                      |      |\
    \  arbitrary characters (3.2.2.15).  |\n   |RequestedEvents       |   R  |  See\
    \ description (3.2.2.16).       |\n   |RequestedInfo         |   F  |  See description\
    \ (3.2.2.17).       |\n   |RequestIdentifier     |   X  |  See description (3.2.2.18).\
    \       |\n   |ResponseAck           |   K  |  See description (3.2.2.19).   \
    \    |\n   |RestartDelay          |   RD |  A number of seconds, encoded as  \
    \ |\n   |                      |      |  a decimal number.                 |\n\
    \   |RestartMethod         |   RM |  See description (3.2.2.20).       |\n   |SecondConnectionId\
    \    |   I2 |  Connection Id.                    |\n   |SecondEndpointId     \
    \ |   Z2 |  Endpoint Id.                      |\n   |SignalRequests        | \
    \  S  |  See description (3.2.2.21).       |\n   |SpecificEndPointId    |   Z\
    \  |  An identifier, in RFC 821 format, |\n   |                      |      |\
    \  composed of an arbitrary string,  |\n   |                      |      |  followed\
    \ by an \"@\" followed by    |\n   |                      |      |  the domain\
    \ name of the gateway to |\n   |                      |      |  which this endpoint\
    \ is attached.  |\n   |                      |      |  See also Section 3.2.1.3.\
    \         |\n   |----------------------|------|------------------------------------|\n\
    \   |RemoteConnection-     |   RC |  Session Description.              |\n   |\
    \         Descriptor   |      |                                    |\n   |LocalConnection-\
    \      |   LC |  Session Description.              |\n   |         Descriptor\
    \   |      |                                    |\n    ------------------------------------------------------------------\n\
    \   The parameters are not necessarily present in all commands.  The\n   following\
    \ table provides the association between parameters and\n   commands.  The letter\
    \ M stands for mandatory, O for optional and F\n   for forbidden.  Unless otherwise\
    \ specified, a parameter MUST NOT be\n   present more than once.\n    ------------------------------------------------------------------\n\
    \   | Parameter name      | EP | CR | MD | DL | RQ | NT | AU | AU | RS |\n   |\
    \                     | CF | CX | CX | CX | NT | FY | EP | CX | IP |\n   |---------------------|----|----|----|----|----|----|----|----|----|\n\
    \   | BearerInformation   |  O*|  O |  O |  O |  O |  F |  F |  F |  F |\n   |\
    \ CallId              |  F |  M |  M |  O |  F |  F |  F |  F |  F |\n   | Capabilities\
    \        |  F |  F |  F |  F |  F |  F |  F |  F |  F |\n   | ConnectionId   \
    \     |  F |  F |  M |  O |  F |  F |  F |  M |  F |\n   | ConnectionMode    \
    \  |  F |  M |  O |  F |  F |  F |  F |  F |  F |\n   | Connection-         |\
    \  F |  F |  F |  O*|  F |  F |  F |  F |  F |\n   |   Parameters        |   \
    \ |    |    |    |    |    |    |    |    |\n   | DetectEvents        |  F | \
    \ O |  O |  O |  O |  F |  F |  F |  F |\n   | DigitMap            |  F |  O |\
    \  O |  O |  O |  F |  F |  F |  F |\n   | EventStates         |  F |  F |  F\
    \ |  F |  F |  F |  F |  F |  F |\n   | LocalConnection-    |  F |  O |  O | \
    \ F |  F |  F |  F |  F |  F |\n   |            Options  |    |    |    |    |\
    \    |    |    |    |    |\n   | MaxMGCPDatagram     |  F |  F |  F |  F |  F\
    \ |  F |  F |  F |  F |\n   | NotifiedEntity      |  F |  O |  O |  O |  O | \
    \ O |  F |  F |  F |\n   | ObservedEvents      |  F |  F |  F |  F |  F |  M |\
    \  F |  F |  F |\n   | PackageList         |  F |  F |  F |  F |  F |  F |  F\
    \ |  F |  F |\n   | QuarantineHandling  |  F |  O |  O |  O |  O |  F |  F | \
    \ F |  F |\n   | ReasonCode          |  F |  F |  F |  O |  F |  F |  F |  F |\
    \  O |\n   | RequestedEvents     |  F |  O |  O |  O |  O*|  F |  F |  F |  F\
    \ |\n   | RequestIdentifier   |  F |  O*|  O*|  O*|  M |  M |  F |  F |  F |\n\
    \   | RequestedInfo       |  F |  F |  F |  F |  F |  F |  O |  M |  F |\n   |\
    \ ResponseAck         |  O |  O |  O |  O |  O |  O |  O |  O |  O |\n   | RestartDelay\
    \        |  F |  F |  F |  F |  F |  F |  F |  F |  O |\n   | RestartMethod  \
    \     |  F |  F |  F |  F |  F |  F |  F |  F |  M |\n   | SecondConnectionId\
    \  |  F |  F |  F |  F |  F |  F |  F |  F |  F |\n   | SecondEndpointId    |\
    \  F |  O |  F |  F |  F |  F |  F |  F |  F |\n   | SignalRequests      |  F\
    \ |  O |  O |  O |  O*|  F |  F |  F |  F |\n   | SpecificEndpointId  |  F | \
    \ F |  F |  F |  F |  F |  F |  F |  F |\n   |---------------------|----|----|----|----|----|----|----|----|----|\n\
    \   | RemoteConnection-   |  F |  O |  O |  F |  F |  F |  F |  F |  F |\n   |\
    \          Descriptor |    |    |    |    |    |    |    |    |    |\n   | LocalConnection-\
    \    |  F |  F |  F |  F |  F |  F |  F |  F |  F |\n   |          Descriptor\
    \ |    |    |    |    |    |    |    |    |    |\n    ------------------------------------------------------------------\n\
    \   Notes (*):\n   * The BearerInformation parameter is only conditionally optional\
    \ as\n     explained in Section 2.3.2.\n   * The RequestIdentifier parameter is\
    \ optional in connection creation,\n     modification and deletion commands, however\
    \ it becomes REQUIRED if\n     the command contains an encapsulated notification\
    \ request.\n   * The RequestedEvents and SignalRequests parameters are optional\
    \ in\n     the NotificationRequest.  If these parameters are omitted the\n   \
    \  corresponding lists will be considered empty.\n   * The ConnectionParameters\
    \ parameter is only valid in a\n     DeleteConnection request sent by the gateway.\n\
    \   The set of parameters can be extended in two different ways:\n   * Package\
    \ Extension Parameters (preferred)\n   * Vendor Extension Parameters\n   Package\
    \ Extension Parameters are defined in packages which provides\n   the following\
    \ benefits:\n   * a registration mechanism (IANA) for the package name.\n   *\
    \ a separate name space for the parameters.\n   * a convenient grouping of the\
    \ extensions.\n   * a simple way to determine support for them through auditing.\n\
    \   The package extension mechanism is the preferred extension method.\n   Vendor\
    \ extension parameters can be used if implementers need to\n   experiment with\
    \ new parameters, for example when developing a new\n   application of MGCP. \
    \ Vendor extension parameters MUST be identified\n   by names that start with\
    \ the string \"X-\" or \"X+\", such as for\n   example:\n      X-Flower: Daisy\n\
    \   Parameter names that start with \"X+\" are critical parameter\n   extensions.\
    \  An MGCP entity that receives a critical parameter\n   extension that it cannot\
    \ understand MUST refuse to execute the\n   command.  It SHOULD respond with error\
    \ code 511 (unrecognized\n   extension).\n   Parameter names that start with \"\
    X-\" are non-critical parameter\n   extensions.  An MGCP entity that receives\
    \ a non-critical parameter\n   extension that it cannot understand MUST simply\
    \ ignore that\n   parameter.\n   Note that vendor extension parameters use an\
    \ unmanaged name space,\n   which implies a potential for name clashing.  Vendors\
    \ are\n   consequently encouraged to include some vendor specific string, e.g.,\n\
    \   vendor name, in their vendor extensions.\n"
- title: 3.2.2.1 BearerInformation
  contents:
  - "3.2.2.1 BearerInformation\n   The values of the bearer information are encoded\
    \ as a comma separated\n   list of attributes, which are represented by an attribute\
    \ name, and\n   possibly followed by a colon and an attribute value.\n   The only\
    \ attribute that is defined is the \"encoding\" (code \"e\")\n   attribute, which\
    \ MUST have one of the values \"A\" (A-law) or \"mu\"\n   (mu-law).\n   An example\
    \ of bearer information encoding is:\n      B: e:mu\n   The set of bearer information\
    \ attributes may be extended through\n   packages.\n"
- title: 3.2.2.2 CallId
  contents:
  - "3.2.2.2 CallId\n   The Call Identifier is encoded as a hexadecimal string, at\
    \ most 32\n   characters in length.  Call Identifiers are compared as strings\n\
    \   rather than numerical values.\n"
- title: 3.2.2.3 Capabilities
  contents:
  - "3.2.2.3 Capabilities\n   Capabilities inform the Call Agent about endpoints'\
    \ capabilities when\n   audited.  The encoding of capabilities is based on the\
    \ Local\n   Connection Options encoding for the parameters that are common to\n\
    \   both, although a different parameter line code is used (\"A\").  In\n   addition,\
    \ capabilities can also contain a list of supported packages,\n   and a list of\
    \ supported modes.\n   The parameters used are:\n   A list of supported codecs.\n\
    \      The following parameters will apply to all codecs specified in\n      this\
    \ list.  If there is a need to specify that some parameters,\n      such as e.g.,\
    \ silence suppression, are only compatible with some\n      codecs, then the gateway\
    \ will return several Capability\n      parameters; one for each set of codecs.\n\
    \   Packetization Period:\n      A range may be specified.\n   Bandwidth:\n  \
    \    A range corresponding to the range for packetization periods may\n      be\
    \ specified (assuming no silence suppression).  If absent, the\n      values will\
    \ be deduced from the codec type.\n   Echo Cancellation:\n      \"on\" if echo\
    \ cancellation is supported, \"off\" otherwise.  The\n      default is support.\n\
    \   Silence Suppression:\n      \"on\" if silence suppression is supported for\
    \ this codec, \"off\"\n      otherwise.  The default is support.\n   Gain Control:\n\
    \      \"0\" if gain control is not supported, all other values indicate\n   \
    \   support for gain control.  The default is support.\n   Type of Service:\n\
    \      The value \"0\" indicates no support for type of service, all other\n \
    \     values indicate support for type of service.  The default is\n      support.\n\
    \   Resource Reservation Service:\n      The parameter indicates the reservation\
    \ services that are\n      supported, in addition to best effort.  The value \"\
    g\" is encoded\n      when the gateway supports both the guaranteed and the controlled\n\
    \      load service, \"cl\" when only the controlled load service is\n      supported.\
    \  The default is \"best effort\".\n   Encryption Key:\n      Encoding any value\
    \ indicates support for encryption.  Default is\n      no support which is implied\
    \ by omitting the parameter.\n   Type of network:\n      The keyword \"nt\", followed\
    \ by a colon and a semicolon separated\n      list of supported network types.\
    \  This parameter is optional.\n   Packages:\n      The packages supported by\
    \ the endpoint encoded as the keyword \"v\",\n      followed by a colon and a\
    \ character string.  If a list of values\n      is specified, these values will\
    \ be separated by a semicolon.  The\n      first value specified will be the default\
    \ package for the\n      endpoint.\n   Modes:\n      The modes supported by this\
    \ endpoint encoded as the keyword \"m\",\n      followed by a colon and a semicolon-separated\
    \ list of supported\n      connection modes for this endpoint.\n   Lack of support\
    \ for a capability can also be indicated by excluding\n   the parameter from the\
    \ capability set.\n   An example capability is:\n     A: a:PCMU;G728, p:10-100,\
    \ e:on, s:off, t:1, v:L,\n                              m:sendonly;recvonly;sendrecv;inactive\n\
    \   The carriage return above is included for formatting reasons only and\n  \
    \ is not permissible in a real implementation.\n   If multiple capabilities are\
    \ to be returned, each will be returned as\n   a separate capability line.\n \
    \  Since Local Connection Options can be extended, the list of\n   capability\
    \ parameters can also be extended.  Individual extensions\n   may define how they\
    \ are reported as capabilities.  If no such\n   definition is provided, the following\
    \ defaults apply:\n   * Package Extension attributes:  The individual attributes\
    \ are not\n     reported.  Instead, the name of the package is simply reported\
    \ in\n     the list of supported packages.\n   * Vendor Extension attributes:\
    \  The name of the attribute is reported\n     without any value.\n   * Other\
    \ Extension attributes:  The name of the attribute is reported\n     without any\
    \ value.\n"
- title: 3.2.2.4 Coding of Event Names
  contents:
  - "3.2.2.4 Coding of Event Names\n   Event names are composed of an optional package\
    \ name, separated by a\n   slash (/) from the name of the actual event (see Section\
    \ 2.1.7).  The\n   wildcard character star (\"*\") can be use to refer to all\
    \ packages.\n   The event name can optionally be followed by an at sign (@) and\
    \ the\n   identifier of a connection (possibly using a wildcard) on which the\n\
    \   event should be observed.  Event names are used in the\n   RequestedEvents,\
    \ SignalRequests, ObservedEvents, DetectEvents, and\n   EventStates parameters.\n\
    \   Events and signals may be qualified by parameters defined for the\n   event/signal.\
    \  Such parameters may be enclosed in double-quotes (in\n   fact, some parameters\
    \ MUST be enclosed in double-quotes due to\n   syntactic restrictions) in which\
    \ case they are UTF-8 encoded [20].\n   The parameter name \"!\" (exclamation\
    \ point) is reserved for future use\n   for both events and signals.\n   Each\
    \ signal has one of the following signal-types associated with it:\n   On/Off\
    \ (OO), Time-out (TO), or Brief (BR).  (These signal types are\n   specified in\
    \ the package definitions, and are not present in the\n   messages.) On/Off signals\
    \ can be parameterized with a \"+\" to turn the\n   signal on, or a \"-\" to turn\
    \ the signal off.  If an on/off signal is\n   not parameterized, the signal is\
    \ turned on.  Both of the following\n   will turn the vmwi signal (from the line\
    \ package \"L\") on:\n      L/vmwi(+)\n      L/vmwi\n   In addition to \"!\",\
    \ \"+\" and \"-\", the signal parameter \"to\" is\n   reserved as well.  It can\
    \ be used with Time-Out signals to override\n   the default time-out value for\
    \ the current request.  A decimal value\n   in milliseconds will be supplied.\
    \  The individual signal and/or\n   package definition SHOULD indicate if this\
    \ parameter is supported for\n   one or more TO signals in the package.  If not\
    \ indicated, TO signals\n   in package version zero are assumed to not support\
    \ it, whereas TO\n   signals in package versions one or higher are assumed to\
    \ support it.\n   By default, a supplied time-out value MAY be rounded to the\
    \ nearest\n   non-zero value divisible by 1000, i.e., whole second.  The individual\n\
    \   signal and/or package definition may define other rounding rules. All\n  \
    \ new package and TO signal definitions are strongly encouraged to\n   support\
    \ the \"to\" signal parameter.\n   The following example illustrates how the \"\
    to\" parameter can be used\n   to apply a signal for 6 seconds:\n      L/rg(to=6000)\n\
    \      L/rg(to(6000))\n   The following are examples of event names:\n      -----------------------------------------------------------\n\
    \     | L/hu        |   on-hook transition, in the line package   |\n     | F/0\
    \         |   digit 0 in the MF package                 |\n     | hf         \
    \ |   Hook-flash, assuming that the line package|\n     |             |   is the\
    \ default package for the endpoint.  |\n     | G/rt@0A3F58 |   Ring back signal\
    \ on connection \"0A3F58\"   |\n      -----------------------------------------------------------\n\
    \   In addition, the range and wildcard notation of events can be used,\n   instead\
    \ of individual names, in the RequestedEvents and DetectEvents\n   parameters.\
    \  The event code \"all\" is reserved and refers to all\n   events or signals\
    \ in a package.  The star sign (\"*\") can be used to\n   denote \"all connections\"\
    , and the dollar sign (\"$\") can be used to\n   denote the \"current\" connection\
    \ (see Section 2.1.7 for details).\n   The following are examples of such notations:\n\
    \      ---------------------------------------------------------\n     | M/[0-9]\
    \   |   Digits 0 to 9 in the MF package.          |\n     | hf        |   Hook-flash,\
    \ assuming that the line package|\n     |           |   is a default package for\
    \ the endpoint.    |\n     | [0-9*#A-D]|   All digits and letters in the DTMF\
    \        |\n     |           |   packages (default for endpoint).          |\n\
    \     | T/all     |   All events in the trunk package.          |\n     | R/qa@*\
    \    |   The quality alert event on all            |\n     |           |   connections.\
    \                              |\n     | G/rt@$    |   Ringback on current connection.\
    \           |\n      ---------------------------------------------------------\n"
- title: 3.2.2.5 ConnectionId
  contents:
  - "3.2.2.5 ConnectionId\n   The Connection Identifier is encoded as a hexadecimal\
    \ string, at most\n   32 characters in length.  Connection Identifiers are compared\
    \ as\n   strings rather than numerical values.\n"
- title: 3.2.2.6 ConnectionMode
  contents:
  - "3.2.2.6 ConnectionMode\n   The connection mode describes the mode of operation\
    \ of the\n   connection.  The possible values are:\n      --------------------------------------------------------\n\
    \     |    Mode     |               Meaning                    |\n     |-------------|------------------------------------------|\n\
    \     | M: sendonly |  The gateway should only send packets    |\n     | M: recvonly\
    \ |  The gateway should only receive packets |\n     | M: sendrecv |  The gateway\
    \ should send                 |\n     |             |  and receive packets   \
    \                  |\n     | M: confrnce |  The gateway should place         \
    \       |\n     |             |  the connection in conference mode       |\n \
    \    | M: inactive |  The gateway should neither              |\n     |      \
    \       |  send nor receive packets                |\n     | M: loopback |  The\
    \ gateway should place                |\n     |             |  the circuit in\
    \ loopback mode.           |\n     | M: conttest |  The gateway should place \
    \               |\n     |             |  the circuit in test mode.           \
    \    |\n     | M: netwloop |  The gateway should place                |\n    \
    \ |             |  the connection in network loopback mode.|\n     | M: netwtest\
    \ |  The gateway should place the connection |\n     |             |  in network\
    \ continuity test mode.        |\n      --------------------------------------------------------\n\
    \   Note that irrespective of the connection mode, signals applied to the\n  \
    \ connection will still result in packets being sent (see Section\n   2.3.1).\n\
    \   The set of connection modes can be extended through packages.\n"
- title: 3.2.2.7 ConnectionParameters
  contents:
  - "3.2.2.7 ConnectionParameters\n   Connection parameters are encoded as a string\
    \ of type and value\n   pairs, where the type is either a two-letter identifier\
    \ of the\n   parameter or an extension type, and the value a decimal integer.\n\
    \   Types are separated from value by an '=' sign.  Parameters are\n   separated\
    \ from each other by a comma.  Connection parameter values\n   can contain up\
    \ to nine digits.  If the maximum value is reached, the\n   counter is no longer\
    \ updated, i.e., it doesn't wrap or overflow.\n   The connection parameter types\
    \ are specified in the following table:\n    -----------------------------------------------------------------\n\
    \   | Connection parameter| Code |  Connection parameter              |\n   |\
    \ name                |      |  value                             |\n   |---------------------|------|------------------------------------|\n\
    \   | Packets sent        |  PS  |  The number of packets that        |\n   |\
    \                     |      |  were sent on the connection.      |\n   | Octets\
    \ sent         |  OS  |  The number of octets that         |\n   |           \
    \          |      |  were sent on the connection.      |\n   | Packets received\
    \    |  PR  |  The number of packets that        |\n   |                     |\
    \      |  were received on the connection.  |\n   | Octets received     |  OR\
    \  |  The number of octets that         |\n   |                     |      | \
    \ were received on the connection.  |\n   | Packets lost        |  PL  |  The\
    \ number of packets that        |\n   |                     |      |  were lost\
    \ on the connection       |\n   |                     |      |  as deduced from\
    \ gaps in the       |\n   |                     |      |  RTP sequence number.\
    \              |\n   | Jitter              |  JI  |  The average inter-packet\
    \ arrival  |\n   |                     |      |  jitter, in milliseconds,    \
    \      |\n   |                     |      |  expressed as an integer number. \
    \  |\n   | Latency             |  LA  |  Average latency, in milliseconds, |\n\
    \   |                     |      |  expressed as an integer number.   |\n    -----------------------------------------------------------------\n\
    \   The set of connection parameters can be extended in two different\n   ways:\n\
    \   * Package Extension Parameters (preferred)\n   * Vendor Extension Parameters\n\
    \   Package Extension Connection Parameters are defined in packages which\n  \
    \ provides the following benefits:\n   * A registration mechanism (IANA) for the\
    \ package name.\n   * A separate name space for the parameters.\n   * A convenient\
    \ grouping of the extensions.\n   * A simple way to determine support for them\
    \ through auditing.\n   The package extension mechanism is the preferred extension\
    \ method.\n   Vendor extension parameters names are composed of the string \"\
    X-\"\n   followed by a two or more letters extension parameter name.\n   Call\
    \ agents that receive unrecognized package or vendor connection\n   parameter\
    \ extensions SHALL silently ignore these parameters.\n   An example of connection\
    \ parameter encoding is:\n      P: PS=1245, OS=62345, PR=0, OR=0, PL=0, JI=0,\
    \ LA=48\n"
- title: 3.2.2.8 DetectEvents
  contents:
  - "3.2.2.8 DetectEvents\n   The DetectEvents parameter is encoded as a comma separated\
    \ list of\n   events (see Section 3.2.2.4), such as for example:\n      T: L/hu,L/hd,L/hf,D/[0-9#*]\n\
    \   It should be noted, that no actions can be associated with the\n   events,\
    \ however event parameters may be provided.\n"
- title: 3.2.2.9 EventStates
  contents:
  - "3.2.2.9 EventStates\n   The EventStates parameter is encoded as a comma separated\
    \ list of\n   events (see Section 3.2.2.4), such as for example:\n      ES: L/hu\n\
    \   It should be noted, that no actions can be associated with the\n   events,\
    \ however event parameters may be provided.\n"
- title: 3.2.2.10 LocalConnectionOptions
  contents:
  - "3.2.2.10 LocalConnectionOptions\n   The local connection options describe the\
    \ operational parameters that\n   the Call Agent provides to the gateway in connection\
    \ handling\n   commands.  These include:\n   * The allowed codec(s), encoded as\
    \ the keyword \"a\", followed by a\n     colon and a character string.  If the\
    \ Call Agent specifies a list\n     of values, these values will be separated\
    \ by a semicolon.  For RTP,\n     audio codecs SHALL be specified by using encoding\
    \ names defined in\n     the RTP AV Profile [4] or its replacement, or by encoding\
    \ names\n     registered with the IANA.  Non-audio media registered as a MIME\n\
    \     type MUST use the \"<MIME type>/<MIME subtype>\" form, as in\n     \"image/t38\"\
    .\n   * The packetization period in milliseconds, encoded as the keyword\n   \
    \  \"p\", followed by a colon and a decimal number.  If the Call Agent\n     specifies\
    \ a range of values, the range will be specified as two\n     decimal numbers\
    \ separated by a hyphen (as specified for the \"ptime\"\n     parameter for SDP).\n\
    \   * The bandwidth in kilobits per second (1000 bits per second),\n     encoded\
    \ as the keyword \"b\", followed by a colon and a decimal\n     number.  If the\
    \ Call Agent specifies a range of values, the range\n     will be specified as\
    \ two decimal numbers separated by a hyphen.\n   * The type of service parameter,\
    \ encoded as the keyword \"t\", followed\n     by a colon and the value encoded\
    \ as two hexadecimal digits.  When\n     the connection is transmitted over an\
    \ IP network, the parameters\n     encode the 8-bit type of service value parameter\
    \ of the IP header\n     (a.k.a. DiffServ field).  The left-most \"bit\" in the\
    \ parameter\n     corresponds to the least significant bit in the IP header.\n\
    \   * The echo cancellation parameter, encoded as the keyword \"e\",\n     followed\
    \ by a colon and the value \"on\" or \"off\".\n   * The gain control parameter,\
    \ encoded as the keyword \"gc\", followed\n     by a colon and a value which can\
    \ be either the keyword \"auto\" or a\n     decimal number (positive or negative)\
    \ representing the number of\n     decibels of gain.\n   * The silence suppression\
    \ parameter, encoded as the keyword \"s\",\n     followed by a colon and the value\
    \ \"on\" or \"off\".\n   * The resource reservation parameter, encoded as the\
    \ keyword \"r\",\n     followed by a colon and the value \"g\" (guaranteed service),\
    \ \"cl\"\n     (controlled load) or \"be\" (best effort).\n   * The encryption\
    \ key, encoded as the keyword \"k\" followed by a colon\n     and a key specification,\
    \ as defined for the parameter \"K\" in SDP\n     (RFC 2327).\n   * The type of\
    \ network, encoded as the keyword \"nt\" followed by a\n     colon and the type\
    \ of network encoded as the keyword \"IN\"\n     (internet), \"ATM\", \"LOCAL\"\
    \ (for a local connection), or possibly\n     another type of network registered\
    \ with the IANA as per SDP (RFC\n     2327).\n   * The resource reservation parameter,\
    \ encoded as the keyword \"r\",\n     followed by a colon and the value \"g\"\
    \ (guaranteed service), \"cl\"\n     (controlled load) or \"be\" (best effort).\n\
    \   The encoding of the first three attributes, when they are present,\n   will\
    \ be compatible with the SDP and RTP profiles.  Note that each of\n   the attributes\
    \ is optional.  When several attributes are present,\n   they are separated by\
    \ a comma.\n   Examples of local connection options are:\n      L: p:10, a:PCMU\n\
    \      L: p:10, a:G726-32\n      L: p:10-20, b:64\n      L: b:32-64, e:off\n \
    \  The set of Local Connection Options attributes can be extended in\n   three\
    \ different ways:\n   * Package Extension attributes (preferred)\n   * Vendor\
    \ Extension attributes\n   * Other Extension attributes\n   Package Extension\
    \ Local Connection Options attributes are defined in\n   packages which provides\
    \ the following benefits:\n   * A registration mechanism (IANA) for the package\
    \ name.\n   * A separate name space for the attributes.\n   * A convenient grouping\
    \ of the extensions.\n   * A simple way to determine support for them through\
    \ auditing.\n   The package extension mechanism is the preferred extension method.\n\
    \   Vendor extension attributes are composed of an attribute name, and\n   possibly\
    \ followed by a colon and an attribute value.  The attribute\n   name MUST start\
    \ with the two characters \"x+\", for a mandatory\n   extension, or \"x-\", for\
    \ a non-mandatory extension.  If a gateway\n   receives a mandatory extension\
    \ attribute that it does not recognize,\n   it MUST reject the command (error\
    \ code 525 - unknown extension in\n   LocalConnectionOptions, is RECOMMENDED).\n\
    \   Note that vendor extension attributes use an unmanaged name space,\n   which\
    \ implies a potential for name clashing.  Vendors are\n   consequently encouraged\
    \ to include some vendor specific string, e.g.,\n   vendor name, in their vendor\
    \ extensions.\n   Finally, for backwards compatibility with some existing\n  \
    \ implementations, MGCP allows for other extension attributes as well\n   (see\
    \ grammar in Appendix A).  Note however, that these attribute\n   extensions do\
    \ not provide the package extension attribute benefits.\n   Use of this mechanism\
    \ for new extensions is discouraged.\n"
- title: 3.2.2.11 MaxMGCPDatagram
  contents:
  - "3.2.2.11 MaxMGCPDatagram\n   The MaxMGCPDatagram can only be used for auditing,\
    \ i.e., it is a\n   valid RequestedInfo code and can be provided as a response\
    \ parameter.\n   In responses, the MaxMGCPDatagram value is encoded as a string\
    \ of up\n   to nine decimal digits -- leading zeroes are not permitted.  The\n\
    \   following example illustrates the use of this parameter:\n      MD: 8100\n"
- title: 3.2.2.12 ObservedEvents
  contents:
  - "3.2.2.12 ObservedEvents\n   The observed events parameter provides the list of\
    \ events that have\n   been observed.  The event codes are the same as those used\
    \ in the\n   NotificationRequest.  Events that have been accumulated according\
    \ to\n   the digit map may be grouped in a single string, however such\n   practice\
    \ is discouraged; they SHOULD be reported as lists of isolated\n   events if other\
    \ events were detected during the digit accumulation.\n   Examples of observed\
    \ events are:\n      O: L/hu\n      O: D/8295555T\n      O: D/8,D/2,D/9,D/5,D/5,L/hf,D/5,D/5,D/T\n\
    \      O: L/hf, L/hf, L/hu\n"
- title: 3.2.2.13 PackageList
  contents:
  - "3.2.2.13 PackageList\n   The Package List can only be used for auditing, i.e.,\
    \ it is a valid\n   RequestedInfo code and can be provided as a response parameter.\n\
    \   The response parameter will consist of a comma separated list of\n   packages\
    \ supported.  The first package returned in the list is the\n   default package.\
    \  Each package in the list consists of the package\n   name followed by a colon,\
    \ and the highest version number of the\n   package supported.\n   An example\
    \ of a package list is:\n     PL: L:1,G:1,D:0,FOO:2,T:1\n   Note that for backwards\
    \ compatibility, support for this parameter is\n   OPTIONAL.\n"
- title: 3.2.2.14 QuarantineHandling
  contents:
  - "3.2.2.14 QuarantineHandling\n   The quarantine handling parameter contains a\
    \ list of comma separated\n   keywords:\n   * The keyword \"process\" or \"discard\"\
    \ to indicate the treatment of\n     quarantined and observed events.  If neither\
    \ \"process\" or \"discard\"\n     is present, \"process\" is assumed.\n   * The\
    \ keyword \"step\" or \"loop\" to indicate whether at most one\n     notification\
    \ per NotificationRequest is allowed, or whether\n     multiple notifications\
    \ per NotificationRequest are allowed.  If\n     neither \"step\" nor \"loop\"\
    \ is present, \"step\" is assumed.\n   The following values are valid examples:\n\
    \      Q: loop\n      Q: process\n      Q: loop,discard\n"
- title: 3.2.2.15 ReasonCode
  contents:
  - "3.2.2.15 ReasonCode\n   Reason codes are three-digit numeric values.  The reason\
    \ code is\n   optionally followed by a white space and commentary, e.g.:\n   \
    \   E: 900 Endpoint malfunctioning\n   A list of reason codes can be found in\
    \ Section 2.5.\n   The set of reason codes can be extended through packages.\n"
- title: 3.2.2.16 RequestedEvents
  contents:
  - "3.2.2.16 RequestedEvents\n   The RequestedEvents parameter provides the list\
    \ of events that are\n   requested.  The event codes are described in Section\
    \ 3.2.2.4.\n   Each event can be qualified by a requested action, or by a list\
    \ of\n   actions.  The actions, when specified, are encoded as a list of\n   keywords,\
    \ enclosed in parenthesis and separated by commas.  The codes\n   for the various\
    \ actions are:\n                -------------------------------------\n      \
    \         |          Action              | Code |\n               |------------------------------|------|\n\
    \               | Notify immediately           |  N   |\n               | Accumulate\
    \                   |  A   |\n               | Treat according to digit map |\
    \  D   |\n               | Swap                         |  S   |\n           \
    \    | Ignore                       |  I   |\n               | Keep Signal(s)\
    \ active        |  K   |\n               | Embedded Notification Request|  E \
    \  |\n                -------------------------------------\n   When no action\
    \ is specified, the default action is to notify the\n   event.  This means that,\
    \ for example, ft and ft(N) are equivalent.\n   Events that are not listed are\
    \ ignored (unless they are persistent).\n   The digit-map action SHOULD only be\
    \ specified for the digits, letters\n   and interdigit timers in packages that\
    \ define the encoding of digits,\n   letters, and timers (including extension\
    \ digit map letters).\n   The requested events list is encoded on a single line,\
    \ with\n   event/action groups separated by commas.  Examples of RequestedEvents\n\
    \   encodings are:\n      R: L/hu(N), L/hf(S,N)\n      R: L/hu(N), D/[0-9#T](D)\n\
    \   In the case of the \"Embedded Notification Request\" action, the\n   embedded\
    \ notification request parameters are encoded as a list of up\n   to three parameter\
    \ groups separated by commas.  Each group starts by\n   a one letter identifier,\
    \ followed by a list of parameters enclosed\n   between parentheses. The first\
    \ optional parameter group, identified\n   by the letter \"R\", is the value of\
    \ the embedded RequestedEvents\n   parameter.  The second optional group, identified\
    \ by the letter \"S\",\n   is the embedded value of the SignalRequests parameter.\
    \  The third\n   optional group, identified by the letter \"D\", is the embedded\
    \ value\n   of the DigitMap.  (Note that some existing implementations and\n \
    \  profiles may encode these three components in a different order.\n   Implementers\
    \ are encouraged to accept such encodings, but they SHOULD\n   NOT generate them.)\n\
    \   If the RequestedEvents parameter is not present, the parameter will\n   be\
    \ set to a null value.  If the SignalRequests parameter is not\n   present, the\
    \ parameter will be set to a null value.  If the DigitMap\n   is absent, the current\
    \ value MUST be used.  The following are valid\n   examples of embedded requests:\n\
    \      R: L/hd(E(R(D/[0-9#T](D),L/hu(N)),S(L/dl),D([0-9].[#T])))\n      R: L/hd(E(R(D/[0-9#T](D),L/hu(N)),S(L/dl)))\n\
    \   Some events can be qualified by additional event parameters.  Such\n   event\
    \ parameters will be separated by commas and enclosed within\n   parentheses.\
    \  Event parameters may be enclosed in double-quotes (in\n   fact, some event\
    \ parameters MUST be enclosed in double-quotes due to\n   syntactic restrictions),\
    \ in which case the quoted string itself is\n   UTF-8 encoded.  Please refer to\
    \ Section 3.2.2.4 for additional detail\n   on event parameters.\n   The following\
    \ example shows the foobar event with an event parameter\n   \"epar\":\n     \
    \ R: X/foobar(N)(epar=2)\n   Notice that the Action was included even though it\
    \ is the default\n   Notify action - this is required by the grammar.\n"
- title: 3.2.2.17 RequestedInfo
  contents:
  - "3.2.2.17 RequestedInfo\n   The RequestedInfo parameter contains a comma separated\
    \ list of\n   parameter codes, as defined in Section 3.2.2.  For example, if one\n\
    \   wants to audit the value of the NotifiedEntity, RequestIdentifier,\n   RequestedEvents,\
    \ SignalRequests, DigitMap, QuarantineHandling and\n   DetectEvents parameters,\
    \ the value of the RequestedInfo parameter\n   will be:\n      F: N,X,R,S,D,Q,T\n\
    \   Note that extension parameters in general can be audited as well.\n   The\
    \ individual extension will define the auditing operation.\n   The capabilities\
    \ request, in the AuditEndPoint command, is encoded by\n   the parameter code\
    \ \"A\", as in:\n      F: A\n"
- title: 3.2.2.18 RequestIdentifier
  contents:
  - "3.2.2.18 RequestIdentifier\n   The request identifier correlates a Notify command\
    \ with the\n   NotificationRequest that triggered it.  A RequestIdentifier is\
    \ a\n   hexadecimal string, at most 32 characters in length.\n   RequestIdentifiers\
    \ are compared as strings rather than numerical\n   value.  The string \"0\" is\
    \ reserved for reporting of persistent events\n   in the case where a NotificationRequest\
    \ has not yet been received\n   after restart.\n"
- title: 3.2.2.19 ResponseAck
  contents:
  - "3.2.2.19 ResponseAck\n   The response acknowledgement parameter is used to manage\
    \ the \"at-\n   most-once\" facility described in Section 3.5.  It contains a\
    \ comma\n   separated list of \"confirmed transaction-id ranges\".\n   Each \"\
    confirmed transaction-id range\" is composed of either one\n   decimal number,\
    \ when the range includes exactly one transaction, or\n   two decimal numbers\
    \ separated by a single hyphen, describing the\n   lower and higher transaction\
    \ identifiers included in the range.\n   An example of a response acknowledgement\
    \ is:\n      K: 6234-6255, 6257, 19030-19044\n"
- title: 3.2.2.20 RestartMethod
  contents:
  - "3.2.2.20 RestartMethod\n   The RestartMethod parameter is encoded as one of the\
    \ keywords\n   \"graceful\", \"forced\", \"restart\", \"disconnected\" or \"cancel-graceful\"\
    \n   as for example:\n      RM: restart\n   The set of restart methods can be\
    \ extended through packages.\n"
- title: 3.2.2.21 SignalRequests
  contents:
  - "3.2.2.21 SignalRequests\n   The SignalRequests parameter provides the name of\
    \ the signal(s) that\n   have been requested.  Each signal is identified by a\
    \ name, as\n   described in Section 3.2.2.4.\n   Some signals, such as for example\
    \ announcement or ADSI display, can\n   be qualified by additional parameters,\
    \ e.g.:\n   * the name and parameters of the announcement,\n   * the string that\
    \ should be displayed.\n   Such parameters will be separated by commas and enclosed\
    \ within\n   parenthesis, as in:\n      S: L/adsi(\"123456 Francois Gerard\")\n\
    \      S: A/ann(http://ann.example.net/no-such-number.au, 1234567)\n   When a\
    \ quoted-string is provided, the string itself is UTF-8 encoded\n   [20].\n  \
    \ When several signals are requested, their codes are separated by a\n   comma,\
    \ as in:\n      S: L/adsi(\"123456 Your friend\"), L/rg\n   Please refer to Section\
    \ 3.2.2.4 for additional detail on signal\n   parameters.\n"
- title: 3.3 Format of response headers
  contents:
  - "3.3 Format of response headers\n   The response header is composed of a response\
    \ line, optionally\n   followed by headers that encode the response parameters.\n\
    \   An example of a response header could be:\n      200 1203 OK\n   The response\
    \ line starts with the response code, which is a three\n   digit numeric value.\
    \  The code is followed by a white space, and the\n   transaction identifier.\
    \  Response codes defined in packages (8xx) are\n   followed by white space, a\
    \ slash (\"/\") and the package name.  All\n   response codes may furthermore\
    \ be followed by optional commentary\n   preceded by a white space.\n   The following\
    \ table describes the parameters whose presence is\n   mandatory or optional in\
    \ a response header, as a function of the\n   command that triggered the response.\
    \  The letter M stands for\n   mandatory, O for optional and F for forbidden.\
    \  Unless otherwise\n   specified, a parameter MUST NOT be present more than once.\
    \  Note that\n   the table only reflects the default for responses that have not\n\
    \   defined any other behavior.  If a response is received with a\n   parameter\
    \ that is either not understood or marked as forbidden, the\n   offending parameter(s)\
    \ MUST simply be ignored.\n    ------------------------------------------------------------------\n\
    \   | Parameter name      | EP | CR | MD | DL | RQ | NT | AU | AU | RS |\n   |\
    \                     | CF | CX | CX | CX | NT | FY | EP | CX | IP |\n   |---------------------|----|----|----|----|----|----|----|----|----|\n\
    \   | BearerInformation   |  F |  F |  F |  F |  F |  F |  O |  F |  F |\n   |\
    \ CallId              |  F |  F |  F |  F |  F |  F |  F |  O |  F |\n   | Capabilities\
    \        |  F |  F |  F |  F |  F |  F |  O*|  F |  F |\n   | ConnectionId   \
    \     |  F |  O*|  F |  F |  F |  F |  O*|  F |  F |\n   | ConnectionMode    \
    \  |  F |  F |  F |  F |  F |  F |  F |  O |  F |\n   | Connection-         |\
    \  F |  F |  F |  O*|  F |  F |  F |  O |  F |\n   |   Parameters        |   \
    \ |    |    |    |    |    |    |    |    |\n   | DetectEvents        |  F | \
    \ F |  F |  F |  F |  F |  O |  F |  F |\n   | DigitMap            |  F |  F |\
    \  F |  F |  F |  F |  O |  F |  F |\n   | EventStates         |  F |  F |  F\
    \ |  F |  F |  F |  O |  F |  F |\n   | LocalConnection-    |  F |  F |  F | \
    \ F |  F |  F |  F |  O |  F |\n   |            Options  |    |    |    |    |\
    \    |    |    |    |    |\n   | MaxMGCPDatagram     |  F |  F |  F |  F |  F\
    \ |  F |  O |  F |  F |\n   | NotifiedEntity      |  F |  F |  F |  F |  F | \
    \ F |  O |  O |  O |\n   | ObservedEvents      |  F |  F |  F |  F |  F |  F |\
    \  O |  F |  F |\n   | QuarantineHandling  |  F |  F |  F |  F |  F |  F |  O\
    \ |  F |  F |\n   | PackageList         |  O*|  O*|  O*|  O*|  O*|  O*|  O | \
    \ O*|  O*|\n   | ReasonCode          |  F |  F |  F |  F |  F |  F |  O |  F |\
    \  F |\n   | RequestIdentifier   |  F |  F |  F |  F |  F |  F |  O |  F |  F\
    \ |\n   | ResponseAck         |  O*|  O*|  O*|  O*|  O*|  O*|  O*|  O*|  O*|\n\
    \   | RestartDelay        |  F |  F |  F |  F |  F |  F |  O |  F |  F |\n   |\
    \ RestartMethod       |  F |  F |  F |  F |  F |  F |  O |  F |  F |\n   | RequestedEvents\
    \     |  F |  F |  F |  F |  F |  F |  O |  F |  F |\n   | RequestedInfo     \
    \  |  F |  F |  F |  F |  F |  F |  F |  F |  F |\n   | SecondConnectionId  |\
    \  F |  O |  F |  F |  F |  F |  F |  F |  F |\n   | SecondEndpointId    |  F\
    \ |  O |  F |  F |  F |  F |  F |  F |  F |\n   | SignalRequests      |  F | \
    \ F |  F |  F |  F |  F |  O |  F |  F |\n   | SpecificEndpointId  |  F |  O |\
    \  F |  F |  F |  F |  O*|  F |  F |\n   |---------------------|----|----|----|----|----|----|----|----|----|\n\
    \   | LocalConnection-    |  F |  O*|  O |  F |  F |  F |  F |  O*|  F |\n   |\
    \         Descriptor  |    |    |    |    |    |    |    |    |    |\n   | RemoteConnection-\
    \   |  F |  F |  F |  F |  F |  F |  F |  O*|  F |\n   |         Descriptor  |\
    \    |    |    |    |    |    |    |    |    |\n    ------------------------------------------------------------------\n\
    \   Notes (*):\n   * The PackageList parameter is only allowed with return code\
    \ 518\n     (unsupported package), except for AuditEndpoint, where it may also\n\
    \     be returned if audited.\n   * The ResponseAck parameter MUST NOT be used\
    \ with any other responses\n     than a final response issued after a provisional\
    \ response for the\n     transaction in question.  In that case, the presence\
    \ of the\n     ResponseAck parameter SHOULD trigger a Response Acknowledgement\
    \ -\n     any ResponseAck values provided will be ignored.\n   * In the case of\
    \ a CreateConnection message, the response line is\n     followed by a Connection-Id\
    \ parameter and a\n     LocalConnectionDescriptor.  It may also be followed a\
    \ Specific-\n     Endpoint-Id parameter, if the creation request was sent to a\n\
    \     wildcarded Endpoint-Id.  The connection-Id and\n     LocalConnectionDescriptor\
    \ parameter are marked as optional in the\n     Table.  In fact, they are mandatory\
    \ with all positive responses,\n     when a connection was created, and forbidden\
    \ when the response is\n     negative, and no connection was created.\n   * A\
    \ LocalConnectionDescriptor MUST be transmitted with a positive\n     response\
    \ (code 200) to a CreateConnection.  It MUST also be\n     transmitted in response\
    \ to a ModifyConnection command, if the\n     modification resulted in a modification\
    \ of the session parameters.\n     The LocalConnectionDescriptor is encoded as\
    \ a \"session\n     description\", as defined in section 3.4.  It is separated\
    \ from the\n     response header by an empty line.\n   * Connection-Parameters\
    \ are only valid in a response to a non-\n     wildcarded DeleteConnection command\
    \ sent by the Call Agent.\n   * Multiple ConnectionId, SpecificEndpointId, and\
    \ Capabilities\n     parameters may be present in the response to an AuditEndpoint\n\
    \     command.\n   * When several session descriptors are encoded in the same\
    \ response,\n     they are encoded one after each other, separated by an empty\
    \ line.\n     This is the case for example when the response to an audit\n   \
    \  connection request carries both a local session description and a\n     remote\
    \ session description, as in:\n          200 1203 OK\n          C: A3C47F21456789F0\n\
    \          N: [128.96.41.12]\n          L: p:10, a:PCMU;G726-32\n          M:\
    \ sendrecv\n          P: PS=1245, OS=62345, PR=780, OR=45123, PL=10, JI=27,LA=48\n\
    \          v=0\n          o=- 25678 753849 IN IP4 128.96.41.1\n          s=-\n\
    \          c=IN IP4 128.96.41.1\n          t=0 0\n          m=audio 1296 RTP/AVP\
    \ 0\n          v=0\n          o=- 33343 346463 IN IP4 128.96.63.25\n         \
    \ s=-\n          c=IN IP4 128.96.63.25\n          t=0 0\n          m=audio 1296\
    \ RTP/AVP 0 96\n          a=rtpmap:96 G726-32/8000\n     In this example, according\
    \ to the SDP syntax, each description\n     starts with a \"version\" line, (v=...).\
    \  The local description is\n     always transmitted before the remote description.\
    \  If a connection\n     descriptor is requested, but it does not exist for the\
    \ connection\n     audited, that connection descriptor will appear with the SDP\n\
    \     protocol version field only.\n   The response parameters are described for\
    \ each of the commands in the\n   following.\n"
- title: 3.3.1 CreateConnection Response
  contents:
  - "3.3.1 CreateConnection Response\n   In the case of a CreateConnection message,\
    \ the response line is\n   followed by a Connection-Id parameter with a successful\
    \ response\n   (code 200).  A LocalConnectionDescriptor is furthermore transmitted\n\
    \   with a positive response.  The LocalConnectionDescriptor is encoded\n   as\
    \ a \"session description\", as defined by SDP (RFC 2327).  It is\n   separated\
    \ from the response header by an empty line, e.g.:\n      200 1204 OK\n      I:\
    \ FDE234C8\n      v=0\n      o=- 25678 753849 IN IP4 128.96.41.1\n      s=-\n\
    \      c=IN IP4 128.96.41.1\n      t=0 0\n      m=audio 3456 RTP/AVP 96\n    \
    \  a=rtpmap:96 G726-32/8000\n   When a provisional response has been issued previously,\
    \ the final\n   response SHOULD furthermore contain the Response Acknowledgement\n\
    \   parameter (final responses issued by entities adhering to this\n   specification\
    \ will include the parameter, but older RFC 2705\n   implementations MAY not):\n\
    \      200 1204 OK\n      K:\n      I: FDE234C8\n      v=0\n      o=- 25678 753849\
    \ IN IP4 128.96.41.1\n      s=-\n      c=IN IP4 128.96.41.1\n      t=0 0\n   \
    \   m=audio 3456 RTP/AVP 96\n      a=rtpmap:96 G726-32/8000\n   The final response\
    \ SHOULD then be acknowledged by a Response\n   Acknowledgement:\n      000 1204\n"
- title: 3.3.2 ModifyConnection Response
  contents:
  - "3.3.2 ModifyConnection Response\n   In the case of a successful ModifyConnection\
    \ message, the response\n   line is followed by a LocalConnectionDescriptor, if\
    \ the modification\n   resulted in a modification of the session parameters (e.g.,\
    \ changing\n   only the mode of a connection does not alter the session parameters).\n\
    \   The LocalConnectionDescriptor is encoded as a \"session description\",\n \
    \  as defined by SDP.  It is separated from the response header by an\n   empty\
    \ line.\n      200 1207 OK\n      v=0\n      o=- 25678 753849 IN IP4 128.96.41.1\n\
    \      s=-\n      c=IN IP4 128.96.41.1\n      t=0 0\n      m=audio 3456 RTP/AVP\
    \ 0\n   When a provisional response has been issued previously, the final\n  \
    \ response SHOULD furthermore contain the Response Acknowledgement\n   parameter\
    \ as in:\n      200 1207 OK\n      K:\n   The final response SHOULD then be acknowledged\
    \ by a Response\n   Acknowledgement:\n      000 1207 OK\n"
- title: 3.3.3 DeleteConnection Response
  contents:
  - "3.3.3 DeleteConnection Response\n   Depending on the variant of the DeleteConnection\
    \ message, the\n   response line may be followed by a Connection Parameters parameter\n\
    \   line, as defined in Section 3.2.2.7.\n      250 1210 OK\n      P: PS=1245,\
    \ OS=62345, PR=780, OR=45123, PL=10, JI=27, LA=48\n"
- title: 3.3.4 NotificationRequest Response
  contents:
  - "3.3.4 NotificationRequest Response\n   A successful NotificationRequest response\
    \ does not include any\n   additional response parameters.\n"
- title: 3.3.5 Notify Response
  contents:
  - "3.3.5 Notify Response\n   A successful Notify response does not include any additional\
    \ response\n   parameters.\n"
- title: 3.3.6 AuditEndpoint Response
  contents:
  - "3.3.6 AuditEndpoint Response\n   In the case of a successful AuditEndPoint the\
    \ response line may be\n   followed by information for each of the parameters\
    \ requested - each\n   parameter will appear on a separate line.  Parameters for\
    \ which no\n   value currently exists, e.g., digit map, will still be provided\
    \ but\n   with an empty value.  Each local endpoint name \"expanded\" by a\n \
    \  wildcard character will appear on a separate line using the\n   \"SpecificEndPointId\"\
    \ parameter code, e.g.:\n      200 1200 OK\n      Z: aaln/1@rgw.whatever.net\n\
    \      Z: aaln/2@rgw.whatever.net\n   When connection identifiers are audited\
    \ and multiple connections\n   exist on the endpoint, a comma-separated list of\
    \ connection\n   identifiers SHOULD be returned as in:\n      200 1200 OK\n  \
    \    I: FDE234C8, DFE233D1\n   Alternatively, multiple connection id parameter\
    \ lines may be returned\n   - the two forms should not be mixed although doing\
    \ so does not\n   constitute an error.\n   When capabilities are audited, the\
    \ response may include multiple\n   capabilities parameter lines as in:\n    \
    \  200 1200 OK\n      A: a:PCMU;G728, p:10-100, e:on, s:off, t:1, v:L,\n     \
    \     m:sendonly;recvonly;sendrecv;inactive\n      A: a:G729, p:30-90, e:on, s:on,\
    \ t:1, v:L,\n          m:sendonly;recvonly;sendrecv;inactive;confrnce\n   Note:\
    \  The carriage return for Capabilities shown above is present\n   for formatting\
    \ reasons only.  It is not permissible in a real command\n   encoding.\n"
- title: 3.3.7 AuditConnection Response
  contents:
  - "3.3.7 AuditConnection Response\n   In the case of a successful AuditConnection,\
    \ the response may be\n   followed by information for each of the parameters requested.\n\
    \   Parameters for which no value currently exists will still be\n   provided.\
    \  Connection descriptors will always appear last and each\n   will be preceded\
    \ by an empty line, as for example:\n      200 1203 OK\n      C: A3C47F21456789F0\n\
    \      N: [128.96.41.12]\n      L: p:10, a:PCMU;G728\n      M: sendrecv\n    \
    \  P: PS=622, OS=31172, PR=390, OR=22561, PL=5, JI=29, LA=50\n      v=0\n    \
    \  o=- 4723891 7428910 IN IP4 128.96.63.25\n      s=-\n      c=IN IP4 128.96.63.25\n\
    \      t=0 0\n      m=audio 1296 RTP/AVP 96\n      a=rtpmap:96 G726-32/8000\n\
    \   If both a local and a remote connection descriptor are provided, the\n   local\
    \ connection descriptor will be the first of the two.  If a\n   connection descriptor\
    \ is requested, but it does not exist for the\n   connection audited, that connection\
    \ descriptor will appear with the\n   SDP protocol version field only (\"v=0\"\
    ), as for example:\n      200 1203 OK\n      v=0\n"
- title: 3.3.8 RestartInProgress Response
  contents:
  - "3.3.8 RestartInProgress Response\n   A successful RestartInProgress response\
    \ may include a NotifiedEntity\n   parameter, but otherwise does not include any\
    \ additional response\n   parameters.\n   Also, a 521 response to a RestartInProgress\
    \ MUST include a\n   NotifiedEntity parameter with the name of another Call Agent\
    \ to\n   contact when the first Call Agent redirects the endpoint to another\n\
    \   Call Agent as in:\n      521 1204 Redirect\n      N: CA-1@whatever.net\n"
- title: 3.4 Encoding of the Session Description (SDP)
  contents:
  - "3.4 Encoding of the Session Description (SDP)\n   The session description (SDP)\
    \ is encoded in conformance with the\n   session description protocol, SDP.  MGCP\
    \ implementations are REQUIRED\n   to be fully capable of parsing any conformant\
    \ SDP message, and MUST\n   send session descriptions that strictly conform to\
    \ the SDP standard.\n   The general description and explanation of SDP parameters\
    \ can be\n   found in RFC 2327 (or its successor).  In particular, it should be\n\
    \   noted that the\n   * Origin (\"o=\"),\n   * Session Name (\"s=\"), and\n \
    \  * Time active (\"t=\")\n   are all mandatory in RFC 2327.  While they are of\
    \ little use to MGCP,\n   they MUST be provided in conformance with RFC 2327 nevertheless.\
    \  The\n   following suggests values to be used for each of the fields, however\n\
    \   the reader is encouraged to consult RFC 2327 (or its successor) for\n   details:\n\
    \   Origin\n   o = <username> <session id> <version> <network type> <address type>\n\
    \       <address>\n   * The username SHOULD be set to hyphen (\"-\").\n   * The\
    \ session id is RECOMMENDED to be an NTP timestamp as suggested\n     in RFC 2327.\n\
    \   * The version is a version number that MUST increment with each\n     change\
    \ to the SDP.  A counter initialized to zero or an NTP\n     timestamp as suggested\
    \ in RFC 2327 is RECOMMENDED.\n   * The network type defines the type of network.\
    \  For RTP sessions the\n     network type SHOULD be \"IN\".\n   * The address\
    \ type defines the type of address.  For RTP sessions the\n     address type SHOULD\
    \ be \"IP4\" (or \"IP6\").\n   * The address SHOULD be the same address as provided\
    \ in the\n     connection information (\"c=\") field.\n   Session Name\n   s =\
    \ <session name>\n   The session name should be hyphen (\"-\").\n   Time active\n\
    \   t = <start time> <stop time>\n   * The start time may be set to zero.\n  \
    \ * The stop time should be set to zero.\n   Each of the three fields can be ignored\
    \ upon reception.\n   To further accommodate the extensibility principles of MGCP,\n\
    \   implementations are ENCOURAGED to support the PINT \"a=require\"\n   attribute\
    \ - please refer to RFC 2848 for further details.\n   The usage of SDP actually\
    \ depends on the type of session that is\n   being established.  Below we describe\
    \ usage of SDP for an audio\n   service using the RTP/AVP profile [4], or the\
    \ LOCAL interconnect\n   defined in this document.  In case of any conflicts between\
    \ what is\n   described below and SDP (RFC 2327 or its successor), the SDP\n \
    \  specification takes precedence.\n"
- title: 3.4.1 Usage of SDP for an Audio Service
  contents:
  - "3.4.1 Usage of SDP for an Audio Service\n   In a telephony gateway, we only have\
    \ to describe sessions that use\n   exactly one media, audio.  The usage of SDP\
    \ for this is\n   straightforward and described in detail in RFC 2327.\n   The\
    \ following is an example of an RFC 2327 conformant session\n   description for\
    \ an audio connection:\n      v=0\n      o=- A7453949499 0 IN IP4 128.96.41.1\n\
    \      s=-\n      c=IN IP4 128.96.41.1\n      t=0 0\n      m=audio 3456 RTP/AVP\
    \ 0 96\n      a=rtpmap:96 G726-32/8000\n"
- title: 3.4.2 Usage of SDP for LOCAL Connections
  contents:
  - "3.4.2 Usage of SDP for LOCAL Connections\n   When MGCP is used to set up internal\
    \ connections within a single\n   gateway, the SDP format is used to encode the\
    \ parameters of that\n   connection.  The connection and media parameters will\
    \ be used as\n   follows:\n   * The connection parameter (c=) will specify that\
    \ the connection is\n     local, using the keyword \"LOCAL\" as network type,\
    \ the keyword \"EPN\"\n     (endpoint name) as address type, and the local name\
    \ of the endpoint\n     as the connection-address.\n   * The \"m=audio\" parameter\
    \ will specify a port number, which will\n     always be set to 0, the type of\
    \ protocol, always set to the keyword\n     LOCAL, and the type of encoding, using\
    \ the same conventions used\n     for the RTP AVP profile (RTP payload numbers).\
    \  The type of\n     encoding should normally be set to 0 (PCMU).\n   A session-level\
    \ attribute identifying the connection MAY furthermore\n   be present.  This enables\
    \ endpoints to support multiple LOCAL\n   connections.  Use of this attribute\
    \ is OPTIONAL and indeed\n   unnecessary for endpoints that only support a single\
    \ LOCAL\n   connection.  The attribute is defined as follows:\n   a=MGCPlocalcx:<ConnectionID>\n\
    \      The MGCP Local Connection attribute is a session level only case-\n   \
    \   insensitive attribute that identifies the MGCP LOCAL connection,\n      on\
    \ the endpoint identified in the connection information, to which\n      the SDP\
    \ applies.  The ConnectionId is a hexadecimal string\n      containing at most\
    \ 32 characters.  The ConnectionId itself is\n      case-insensitive.  The MGCP\
    \ Local Connection attribute is not\n      subject to the charset attribute.\n\
    \   An example of a LOCAL session description could be:\n      v=0\n      o=-\
    \ A7453949499 0 LOCAL EPN X35V3+A4/13\n      s=-\n      c=LOCAL EPN X35V3+A4/13\n\
    \      t=0 0\n      a=MGCPlocalcx:FDE234C8\n      m=audio 0 LOCAL 0\n   Note that\
    \ the MGCP Local Connection attribute is specified at the\n   session level and\
    \ that it could have been omitted in case only a\n   single LOCAL connection per\
    \ endpoint is supported.\n"
- title: 3.5 Transmission over UDP
  contents:
  - "3.5 Transmission over UDP\n   MGCP messages are transmitted over UDP.  Commands\
    \ are sent to one of\n   the IP addresses defined in the DNS for the specified\
    \ endpoint.  The\n   responses are sent back to the source address (i.e., IP address\
    \ and\n   UDP port number) of the commands - the response may or may not arrive\n\
    \   from the same address as the command was sent to.\n   When no port is specified\
    \ for the endpoint, the commands MUST by\n   default be sent:\n   * by the Call\
    \ Agents, to the default MGCP port for gateways, 2427.\n   * by the Gateways,\
    \ to the default MGCP port for Call Agents, 2727.\n"
- title: 3.5.1 Providing the At-Most-Once Functionality
  contents:
  - "3.5.1 Providing the At-Most-Once Functionality\n   MGCP messages, being carried\
    \ over UDP, may be subject to losses.  In\n   the absence of a timely response,\
    \ commands are retransmitted.  Most\n   MGCP commands are not idempotent.  The\
    \ state of the gateway would\n   become unpredictable if, for example, CreateConnection\
    \ commands were\n   executed several times.  The transmission procedures MUST\
    \ thus\n   provide an \"at-most-once\" functionality.\n   MGCP entities are expected\
    \ to keep in memory a list of the responses\n   that they sent to recent transactions,\
    \ and a list of the transactions\n   that are currently being executed.  The numerical\
    \ value of\n   transaction identifiers of incoming commands are compared to the\n\
    \   transaction identifiers of the recent responses.  If a match is\n   found,\
    \ the MGCP entity does not execute the transaction again, but\n   simply resends\
    \ the response.  The remaining commands will be compared\n   to the list of current\
    \ transactions, i.e., transactions received\n   previously which have not yet\
    \ finished executing.  If a match is\n   found, the MGCP entity does not execute\
    \ the transaction again, but a\n   provisional response (Section 3.5.5) SHOULD\
    \ be issued to acknowledge\n   receipt of the command.\n   The procedure uses\
    \ a long timer value, noted T-HIST in the following.\n   The timer MUST be set\
    \ larger than the maximum duration of a\n   transaction, which MUST take into\
    \ account the maximum number of\n   repetitions, the maximum value of the repetition\
    \ timer and the\n   maximum propagation delay of a packet in the network.  A suggested\n\
    \   value is 30 seconds.\n   The copy of the responses MAY be destroyed either\
    \ T-HIST seconds\n   after the response is issued, or when the gateway (or the\
    \ Call Agent)\n   receives a confirmation that the response has been received,\
    \ through\n   the \"Response Acknowledgement\".  For transactions that are\n \
    \  acknowledged through this attribute, the gateway SHALL keep a copy of\n   the\
    \ transaction-id (as opposed to the entire transaction response)\n   for T-HIST\
    \ seconds after the response is issued, in order to detect\n   and ignore duplicate\
    \ copies of the transaction request that could be\n   produced by the network.\n"
- title: 3.5.2 Transaction Identifiers and Three Ways Handshake
  contents:
  - "3.5.2 Transaction Identifiers and Three Ways Handshake\n   Transaction identifiers\
    \ are integer numbers in the range from 1 to\n   999,999,999 (both included).\
    \  Call-agents may decide to use a\n   specific number space for each of the gateways\
    \ that they manage, or\n   to use the same number space for all gateways that\
    \ belong to some\n   arbitrary group.  Call agents may decide to share the load\
    \ of\n   managing a large gateway between several independent processes.\n   These\
    \ processes MUST then share the transaction number space.  There\n   are multiple\
    \ possible implementations of this sharing, such as having\n   a centralized allocation\
    \ of transaction identifiers, or pre-\n   allocating non-overlapping ranges of\
    \ identifiers to different\n   processes.  The  implementations MUST guarantee\
    \ that unique\n   transaction identifiers are allocated to all transactions that\n\
    \   originate from a logical call agent, as defined in Section 4.\n   Gateways\
    \ can simply detect duplicate transactions by looking at the\n   transaction identifier\
    \ only.\n   The Response Acknowledgement Attribute can be found in any command.\n\
    \   It carries a set of \"confirmed transaction-id ranges\" for final\n   responses\
    \ received - provisional responses MUST NOT be confirmed.  A\n   given response\
    \ SHOULD NOT be confirmed in two separate messages.\n   MGCP entities MAY choose\
    \ to delete the copies of the responses (but\n   not the transaction-id) to transactions\
    \ whose id is included in\n   \"confirmed transaction-id ranges\" received in\
    \ the Response\n   Confirmation messages (command or response).  They SHOULD then\n\
    \   silently discard further commands from that entity when the\n   transaction-id\
    \ falls within these ranges, and the response was issued\n   less than T-HIST\
    \ seconds ago.\n   Entities MUST exercise due caution when acknowledging responses.\
    \  In\n   particular, a response SHOULD only be acknowledged if the response\n\
    \   acknowledgement is sent to the same entity as the corresponding\n   command\
    \ (i.e., the command whose response is being acknowledged) was\n   sent to.\n\
    \   Likewise, entities SHOULD NOT blindly accept a response\n   acknowledgement\
    \ for a given response.  However it is considered safe\n   to accept a response\
    \ acknowledgement for a given response, when that\n   response acknowledgement\
    \ is sent by the same entity as the command\n   that generated that response.\n\
    \   It should be noted, that use of response acknowledgments in commands\n   (as\
    \ opposed to the Response Acknowledgement response following a\n   provisional\
    \ response) is OPTIONAL.  The benefit of using it is that\n   it reduces overall\
    \ memory consumption.  However, in order to avoid\n   large messages, implementations\
    \ SHOULD NOT generate large response\n   acknowledgement lists.  One strategy\
    \ is to manage responses to\n   commands on a per endpoint basis.  A command for\
    \ an endpoint can\n   confirm a response to an older command for that same endpoint.\n\
    \   Responses to commands with wildcarded endpoint names can be confirmed\n  \
    \ selectively with due consideration to message sizes, or alternatively\n   simply\
    \ not be acknowledged (unless the response explicitly required a\n   Response\
    \ Acknowledgement).  Care must be taken to not confirm the\n   same response twice\
    \ or a response that is more than T-HIST seconds\n   old.\n   The \"confirmed\
    \ transaction-id ranges\" values SHALL NOT be used if\n   more than T-HIST seconds\
    \ have elapsed since the entity issued its\n   last response to the other entity,\
    \ or when an entity resumes\n   operation.  In this situation, commands MUST be\
    \ accepted and\n   processed, without any test on the transaction-id.\n   Commands\
    \ that carry the \"Response Acknowledgement attribute\" may be\n   transmitted\
    \ in disorder.  The union of the \"confirmed transaction-id\n   ranges\" received\
    \ in recent messages SHALL be retained.\n"
- title: 3.5.3 Computing Retransmission Timers
  contents:
  - "3.5.3 Computing Retransmission Timers\n   It is the responsibility of the requesting\
    \ entity to provide suitable\n   time outs for all outstanding commands, and to\
    \ retry commands when\n   time outs have been exceeded.  Furthermore, when repeated\
    \ commands\n   fail to be acknowledged, it is the responsibility of the requesting\n\
    \   entity to seek redundant services and/or clear existing or pending\n   associations.\n\
    \   The specification purposely avoids specifying any value for the\n   retransmission\
    \ timers.  These values are typically network dependent.\n   The retransmission\
    \ timers SHOULD normally estimate the timer by\n   measuring the time spent between\
    \ the sending of a command and the\n   return of the first response to the command.\
    \  At a minimum, a\n   retransmission strategy involving exponential backoff MUST\
    \ be\n   implemented.  One possibility is to use the algorithm implemented in\n\
    \   TCP/IP, which uses two variables:\n   * the average acknowledgement delay,\
    \ AAD, estimated through an\n     exponentially smoothed average of the observed\
    \ delays,\n   * the average deviation, ADEV, estimated through an exponentially\n\
    \     smoothed average of the absolute value of the difference between\n     the\
    \ observed delay and the current average.\n   The retransmission timer, RTO, in\
    \ TCP, is set to the sum of the\n   average delay plus N times the average deviation,\
    \ where N is a\n   constant.  In MGCP, the maximum value of the timer SHOULD however\
    \ be\n   bounded, in order to guarantee that no repeated packet will be\n   received\
    \ by the gateways after T-HIST seconds.  A suggested maximum\n   value for RTO\
    \ (RTO-MAX) is 4 seconds.  Implementers SHOULD consider\n   bounding the minimum\
    \ value of this timer as well [19].\n   After any retransmission, the MGCP entity\
    \ SHOULD do the following:\n   * It should double the estimated value of the acknowledgement\
    \ delay\n     for this transaction, T-DELAY.\n   * It should compute a random\
    \ value, uniformly distributed between 0.5\n     T-DELAY and T-DELAY.\n   * It\
    \ should set the retransmission timer (RTO) to the minimum of:\n     - the sum\
    \ of that random value and N times the average deviation,\n     - RTO-MAX.\n \
    \  This procedure has two effects.  Because it includes an exponentially\n   increasing\
    \ component, it will automatically slow down the stream of\n   messages in case\
    \ of congestion.  Because it includes a random\n   component, it will break the\
    \ potential synchronization between\n   notifications triggered by the same external\
    \ event.\n   Note that the estimators AAD and ADEV SHOULD NOT be updated for\n\
    \   transactions that involve retransmissions.  Also, the first new\n   transmission\
    \ following a successful retransmission SHOULD use the RTO\n   for that last retransmission.\
    \  If this transmission succeeds without\n   any retransmissions, the AAD and\
    \ ADEV estimators are updated and RTO\n   is determined as usual again.  See,\
    \ e.g., [18] for further details.\n"
- title: 3.5.4 Maximum Datagram Size, Fragmentation and Reassembly
  contents:
  - "3.5.4 Maximum Datagram Size, Fragmentation and Reassembly\n   MGCP messages being\
    \ transmitted over UDP rely on IP for fragmentation\n   and reassembly of large\
    \ datagrams.  The maximum theoretical size of\n   an IP datagram is 65535 bytes.\
    \  With a 20-byte IP header and an 8-\n   byte UDP header, this leaves us with\
    \ a maximum theoretical MGCP\n   message size of 65507 bytes when using UDP.\n\
    \   However, IP does not require a host to receive IP datagrams larger\n   than\
    \ 576 bytes [21], which would provide an unacceptably small MGCP\n   message size.\
    \  Consequently, MGCP mandates that implementations MUST\n   support MGCP datagrams\
    \ up to at least 4000 bytes, which requires the\n   corresponding IP fragmentation\
    \ and reassembly to be supported.  Note,\n   that the 4000 byte limit applies\
    \ to the MGCP level.  Lower layer\n   overhead will require support for IP datagrams\
    \ that are larger than\n   this:  UDP and IP overhead will be at least 28 bytes,\
    \ and, e.g., use\n   of IPSec will add additional overhead.\n   It should be noted,\
    \ that the above applies to both Call Agents and\n   endpoints.  Call Agents can\
    \ audit endpoints to determine if they\n   support larger MGCP datagrams than\
    \ specified above.  Endpoints do\n   currently not have a similar capability to\
    \ determine if a Call Agent\n   supports larger MGCP datagram sizes.\n"
- title: 3.5.5 Piggybacking
  contents:
  - "3.5.5 Piggybacking\n   There are cases when a Call Agent will want to send several\
    \ messages\n   at the same time to the same gateways, and vice versa.  When several\n\
    \   MGCP messages have to be sent in the same datagram, they MUST be\n   separated\
    \ by a line of text that contains a single dot, as in for\n   example:\n     \
    \ 200 2005 OK\n      .\n      DLCX 1244 card23/21@tgw-7.example.net MGCP 1.0\n\
    \      C: A3C47F21456789F0\n      I: FDE234C8\n   The piggybacked messages MUST\
    \ be processed exactly as if they had\n   been received one at a time in several\
    \ separate datagrams.  Each\n   message in the datagram MUST be processed to completion\
    \ and in order\n   starting with the first message, and each command MUST be responded\n\
    \   to.  Errors encountered in a message that was piggybacked MUST NOT\n   affect\
    \ any of the other messages received in that datagram - each\n   message is processed\
    \ on its own.\n   Piggybacking can be used to achieve two things:\n   * Guaranteed\
    \ in-order delivery and processing of messages.\n   * Fate sharing of message\
    \ delivery.\n   When piggybacking is used to guarantee in-order delivery of messages,\n\
    \   entities MUST ensure that this in-order delivery property is retained\n  \
    \ on retransmissions of the individual messages.  An example of this is\n   when\
    \ multiple Notify's are sent using piggybacking (as described in\n   Section 4.4.1).\n\
    \   Fate sharing of message delivery ensures that either all the messages\n  \
    \ are delivered, or none of them are delivered.  When piggybacking is\n   used\
    \ to guarantee this fate-sharing, entities MUST also ensure that\n   this property\
    \ is retained upon retransmission.  For example, upon\n   receiving a Notify from\
    \ an endpoint operating in lockstep mode, the\n   Call Agent may wish to send\
    \ the response and a new\n   NotificationRequest command in a single datagram\
    \ to ensure message\n   delivery fate-sharing of the two.\n"
- title: 3.5.6 Provisional Responses
  contents:
  - "3.5.6 Provisional Responses\n   Executing some transactions may require a long\
    \ time.  Long execution\n   times may interact with the timer based retransmission\
    \ procedure.\n   This may result either in an inordinate number of retransmissions,\
    \ or\n   in timer values that become too long to be efficient.\n   Gateways (and\
    \ Call Agents) that can predict that a transaction will\n   require a long execution\
    \ time SHOULD send a provisional response with\n   response code 100.  As a guideline,\
    \ a transaction that requires\n   external communication to complete, e.g., network\
    \ resource\n   reservation, SHOULD issue a provisional response.  Furthermore\n\
    \   entities SHOULD send a provisional response if they receive a\n   repetition\
    \ of a transaction that has not yet finished executing.\n   Gateways (or Call\
    \ Agents) that start building up queues of\n   transactions to be executed may\
    \ send a provisional response with\n   response code 101 to indicate this (see\
    \ Section 4.4.8 for further\n   details).\n   Pure transactional semantics would\
    \ imply, that provisional responses\n   SHOULD NOT return any other information\
    \ than the fact that the\n   transaction is currently executing, however an optimistic\
    \ approach\n   allowing some information to be returned enables a reduction in\
    \ the\n   delay that would otherwise be incurred in the system.\n   In order to\
    \ reduce the delay in the system, it is RECOMMENDED to\n   include a connection\
    \ identifier and session description in a 100\n   provisional response to the\
    \ CreateConnection command.  If a session\n   description would be returned by\
    \ the ModifyConnection command, the\n   session description SHOULD be included\
    \ in the provisional response\n   here as well.  If the transaction completes\
    \ successfully, the\n   information returned in the provisional response MUST\
    \ be repeated in\n   the final response.  It is considered a protocol error not\
    \ to repeat\n   this information or to change any of the previously supplied\n\
    \   information in a successful response.  If the transaction fails, an\n   error\
    \ code is returned - the information returned previously is no\n   longer valid.\n\
    \   A currently executing CreateConnection or ModifyConnection\n   transaction\
    \ MUST be cancelled if a DeleteConnection command for the\n   endpoint is received.\
    \  In that case, a final response for the\n   cancelled transaction SHOULD still\
    \ be returned automatically (error\n   code 407 - transaction aborted, is RECOMMENDED),\
    \ and a final response\n   for the cancelled transaction MUST be returned if a\
    \ retransmission of\n   the cancelled transaction is detected (see also Section\
    \ 4.4.4).\n   MGCP entities that receive a provisional response SHALL switch to\
    \ a\n   longer repetition timer (LONGTRAN-TIMER) for that transaction.  The\n\
    \   purpose of this timer is primarily to detect processing failures.\n   The\
    \ default value of LONGTRAN-TIMER is 5 seconds, however the\n   provisioning process\
    \ may alter this.  Note, that retransmissions MUST\n   still satisfy the timing\
    \ requirements specified in Section 3.5.1 and\n   3.5.3.  Consequently LONGTRAN-TIMER\
    \ MUST be smaller than T-HIST (it\n   should in fact be considerably smaller).\
    \  Also, entities MUST NOT let\n   a transaction run forever.  A transaction that\
    \ is timed out by the\n   entity SHOULD return error code 406 (transaction time-out).\
    \  Per the\n   definition of T-HIST (Section 3.5.1), the maximum transaction\n\
    \   execution time is smaller than T-HIST (in a network with low delay,\n   it\
    \ can reasonably safely be approximated as T-HIST minus T-MAX), and\n   a final\
    \ response should be received no more than T-HIST seconds after\n   the command\
    \ was sent initially.  Nevertheless, entities SHOULD wait\n   for 2*T-HIST seconds\
    \ before giving up on receiving a final response.\n   Retransmission of the command\
    \ MUST still cease after T-MAX seconds\n   though.  If a response is not received,\
    \ the outcome of the\n   transaction is not known.  If the entity sending the\
    \ command was a\n   gateway, it now becomes \"disconnected\" and SHALL initiate\
    \ the\n   \"disconnected\" procedure (see Section 4.4.7).\n   When the transaction\
    \ finishes execution, the final response is sent\n   and the by now obsolete provisional\
    \ response is deleted.  In order to\n   ensure rapid detection of a lost final\
    \ response, final responses\n   issued after provisional responses for a transaction\
    \ SHOULD be\n   acknowledged (unfortunately older RFC 2705 implementations may\
    \ not do\n   this, which is the only reason it is not an absolute requirement).\n\
    \   The endpoint SHOULD therefore include an empty \"ResponseAck\"\n   parameter\
    \ in those, and only those, final responses.  The presence of\n   the \"ResponseAck\"\
    \ parameter in the final response SHOULD trigger a\n   \"Response Acknowledgement\"\
    \ response to be sent back to the endpoint.\n   The Response Acknowledgement\"\
    \ response will then include the\n   transaction-id of the response it acknowledges\
    \ in the response\n   header.  Note that, for backwards compatibility, entities\
    \ cannot\n   depend on receiving such a \"response acknowledgement\", however\
    \ it is\n   strongly RECOMMENDED to support this behavior, as excessive delays\
    \ in\n   case of packet loss as well as excessive retransmissions may occur\n\
    \   otherwise.\n   Receipt of a \"Response Acknowledgement\" response is subject\
    \ to the\n   same time-out and retransmission strategies and procedures as\n \
    \  responses to commands, i.e., the sender of the final response will\n   retransmit\
    \ it if a \"Response Acknowledgement\" is not received in\n   time.  For backwards\
    \ compatibility, failure to receive a \"response\n   acknowledgement\" SHOULD\
    \ NOT affect the roundtrip time estimates for\n   subsequent commands, and furthermore\
    \ MUST NOT lead to the endpoint\n   becoming \"disconnected\".  The \"Response\
    \ Acknowledgment\" response is\n   never acknowledged.\n"
- title: 4. States, Failover and Race Conditions
  contents:
  - "4. States, Failover and Race Conditions\n   In order to implement proper call\
    \ signaling, the Call Agent must keep\n   track of the state of the endpoint,\
    \ and the gateway must make sure\n   that events are properly notified to the\
    \ Call Agent.  Special\n   conditions exist when the gateway or the Call Agent\
    \ are restarted:\n   the gateway must be redirected to a new Call Agent during\
    \ \"failover\"\n   procedures, the Call Agent must take special action when the\
    \ gateway\n   is taken offline, or restarted.\n"
- title: 4.1 Failover Assumptions and Highlights
  contents:
  - "4.1 Failover Assumptions and Highlights\n   The following protocol highlights\
    \ are important to understanding Call\n   Agent fail-over mechanisms:\n   * Call\
    \ Agents are identified by their domain name (and optional\n     port), not their\
    \ network addresses, and several addresses can be\n     associated with a domain\
    \ name.\n   * An endpoint has one and only one Call Agent associated with it at\n\
    \     any given point in time.  The Call Agent associated with an\n     endpoint\
    \ is the current value of the \"notified entity\".  The\n     \"notified entity\"\
    \ determines where the gateway will send it's\n     commands.  If the \"notified\
    \ entity\" does not include a port number,\n     the default Call Agent port number\
    \ (2727) is assumed.\n   * NotifiedEntity is a parameter sent by the Call Agent\
    \ to the gateway\n     to set the \"notified entity\" for the endpoint.\n   *\
    \ The \"notified entity\" for an endpoint is the last value of the\n     NotifiedEntity\
    \ parameter received for this endpoint.  If no\n     explicit NotifiedEntity parameter\
    \ has ever been received, the\n     \"notified entity\" defaults to a provisioned\
    \ value.  If no value was\n     provisioned or an empty NotifiedEntity parameter\
    \ was provided (both\n     strongly discouraged) thereby making the \"notified\
    \ entity\" empty,\n     the \"notified entity\" is set to the source address of\
    \ the last\n     non-audit command for the endpoint.  Thus auditing will not change\n\
    \     the \"notified entity\".\n   * Responses to commands are sent to the source\
    \ address of the\n     command, regardless of the current \"notified entity\"\
    .  When a\n     Notify message needs to be piggybacked with the response, the\n\
    \     datagram is still sent to the source address of the new command\n     received,\
    \ regardless of the current \"notified entity\".\n   The ability for the \"notified\
    \ entity\" to resolve to multiple network\n   addresses, allows a \"notified entity\"\
    \ to represent a Call Agent with\n   multiple physical interfaces on it and/or\
    \ a logical Call Agent made\n   up of multiple physical systems.  The order of\
    \ network addresses when\n   a DNS name resolves to multiple addresses is non-deterministic\
    \ so\n   Call Agent fail-over schemes MUST NOT depend on any order (e.g., a\n\
    \   gateway MUST be able to send a \"Notify\" to any of the resolved\n   network\
    \ addresses).  On the other hand, the system is likely to be\n   most efficient\
    \ if the gateway sends commands to the interface with\n   which it already has\
    \ a current association.  It is RECOMMENDED that\n   gateways use the following\
    \ algorithm to achieve that goal:\n   * If the \"notified entity\" resolves to\
    \ multiple network addresses,\n     and the source address of the request is one\
    \ of those addresses,\n     that network address is the preferred destination\
    \ address for\n     commands.\n   * If on the other hand, the source address of\
    \ the request is not one\n     of the resolved addresses, the gateway must choose\
    \ one of the\n     resolved addresses for commands.\n   * If the gateway fails\
    \ to contact the network address chosen, it MUST\n     try the alternatives in\
    \ the resolved list as described in Section\n     4.3.\n   If an entire Call Agent\
    \ becomes unavailable, the endpoints managed by\n   that Call Agent will eventually\
    \ become \"disconnected\".  The only way\n   for these endpoints to become connected\
    \ again is either for the\n   failed Call Agent to become available, or for a\
    \ backup call agent to\n   contact the affected endpoints with a new \"notified\
    \ entity\".\n   When a backup Call Agent has taken over control of a group of\n\
    \   endpoints, it is assumed that the failed Call Agent will communicate\n   and\
    \ synchronize with the backup Call Agent in order to transfer\n   control of the\
    \ affected endpoints back to the original Call Agent.\n   Alternatively, the failed\
    \ Call Agent could simply become the backup\n   Call Agent.\n   We should note\
    \ that handover conflict resolution between separate\n   CA's is not in place\
    \ - we are relying strictly on the CA's knowing\n   what they are doing and communicating\
    \ with each other (although\n   AuditEndpoint can be used to learn about the current\
    \ \"notified\n   entity\").  If this is not the case, unexpected behavior may\
    \ occur.\n   Note that as mentioned earlier, the default \"notified entity\" is\n\
    \   provisioned and may include both domain name and port.  For small\n   gateways,\
    \ provisioning may be done on a per endpoint basis.  For much\n   larger gateways,\
    \ a single provisioning element may be provided for\n   multiple endpoints or\
    \ even for the entire gateway itself.  In either\n   case, once the gateway powers\
    \ up, each endpoint MUST have its own\n   \"notified entity\", so provisioned\
    \ values for an aggregation of\n   endpoints MUST be copied to the \"notified\
    \ entity\" for each endpoint\n   in the aggregation before operation proceeds.\
    \  Where possible, the\n   RestartInProgress command on restart SHOULD be sent\
    \ to the\n   provisioned \"notified entity\" based on an aggregation that allows\
    \ the\n   \"all of\" wild-card to be used.  This will reduce the number of\n \
    \  RestartInProgress messages.\n   Another way of viewing the use of \"notified\
    \ entity\" is in terms of\n   associations between gateways and Call Agents. \
    \ The \"notified entity\"\n   is a means to set up that association, and governs\
    \ where the gateway\n   will send commands to.  Commands received by the gateway\
    \ however may\n   come from any source.  The association is initially provisioned\
    \ with\n   a provisioned \"notified entity\", so that on power up\n   RestartInProgress\
    \ and persistent events that occur prior to the first\n   NotificationRequest\
    \ from Call Agents will be sent to the provisioned\n   Call Agent.  Once a Call\
    \ Agent makes a request, however it may\n   include the NotifiedEntity parameter\
    \ and set up a new association.\n   Since the \"notified entity\" persists across\
    \ calls, the association\n   remains intact until a new \"notified entity\" is\
    \ provided.\n"
- title: 4.2 Communicating with Gateways
  contents:
  - "4.2 Communicating with Gateways\n   Endpoint names in gateways include a local\
    \ name indicating the\n   specific endpoint and a domain name indicating the host/gateway\
    \ where\n   the endpoint resides.  Gateways may have several interfaces for\n\
    \   redundancy.\n   In gateways that have routing capability, the domain name\
    \ may resolve\n   to a single network address with internal routing to that address\n\
    \   from any of the gateway's interfaces.  In others, the domain name may\n  \
    \ resolve to multiple network addresses, one for each interface.  In\n   the latter\
    \ case, if a Call Agent fails to contact the gateway on one\n   of the addresses,\
    \ it MUST try the alternates.\n"
- title: '4.3 Retransmission, and Detection of Lost Associations:'
  contents:
  - "4.3 Retransmission, and Detection of Lost Associations:\n   The media gateway\
    \ control protocol is organized as a set of\n   transactions, each of which is\
    \ composed of a command and a response,\n   commonly referred to as an acknowledgement.\
    \  The MGCP messages, being\n   carried over UDP, may be subject to losses.  In\
    \ the absence of a\n   timely response, commands are retransmitted.  MGCP entities\
    \ MUST keep\n   in memory a list of the responses that they sent to recent\n \
    \  transactions, i.e., a list of all the responses they sent over the\n   last\
    \ T-HIST seconds, and a list of the transactions that have not yet\n   finished\
    \ executing.\n   The transaction identifiers of incoming commands are compared\
    \ to the\n   transaction identifiers of the recent responses.  If a match is\n\
    \   found, the MGCP entity does not execute the transaction, but simply\n   repeats\
    \ the response.  If a match to a previously responded to\n   transaction is not\
    \ found, the transaction identifier of the incoming\n   command is compared to\
    \ the list of transactions that have not yet\n   finished executing.  If a match\
    \ is found, the MGCP entity does not\n   execute the transaction again, but SHOULD\
    \ simply send a provisional\n   response - a final response will be provided when\
    \ the execution of\n   the command is complete (see Section 3.5.6 for further\
    \ detail).\n   The repetition mechanism is used to guard against four types of\n\
    \   possible errors:\n   * transmission errors, when for example a packet is lost\
    \ due to noise\n     on a line or congestion in a queue,\n   * component failure,\
    \ when for example an interface to a Call Agent\n     becomes unavailable,\n \
    \  * Call Agent failure, when for example an entire Call Agent becomes\n     unavailable,\n\
    \   * failover, when a new Call Agent is \"taking over\" transparently.\n   The\
    \ elements should be able to derive from the past history an\n   estimate of the\
    \ packet loss rate due to transmission errors.  In a\n   properly configured system,\
    \ this loss rate should be very low,\n   typically less than 1%.  If a Call Agent\
    \ or a gateway has to repeat a\n   message more than a few times, it is very legitimate\
    \ to assume that\n   something other than a transmission error is occurring. \
    \ For example,\n   given a loss rate of 1%, the probability that 5 consecutive\n\
    \   transmission attempts fail is 1 in 100 billion, an event that should\n   occur\
    \ less than once every 10 days for a Call Agent that processes\n   1,000 transactions\
    \ per second.  (Indeed, the number of\n   retransmissions that is considered excessive\
    \ should be a function of\n   the prevailing packet loss rate.)  We should note\
    \ that the \"suspicion\n   threshold\", which we will call \"Max1\", is normally\
    \ lower than the\n   \"disconnection threshold\", which we will call \"Max2\"\
    .  Max2 MUST be\n   set to a larger value than Max1.\n   The MGCP retransmission\
    \ algorithm is illustrated in the Figure below\n   and explained further in the\
    \ following:\n      Command issued: N=0, T=0\n              |\n              |\
    \  +------------ retransmission: N++ <--------------+\n              |  |    \
    \                                            |\n              |  |     if T <=\
    \ T-Max then                         |\n              |  |      transmission \
    \                             |\n              |  |  +-- to new address, <-+<----------------------|--+\n\
    \              |  |  |       N=0           |                       |  |\n    \
    \          V  V  V                     |                       |  |\n        \
    \  +-----------+                   |                       |  |\n      +-->| awaiting\
    \  |- new Call Agent ->+   +------------+      |  |\n      |   |  response |---\
    \ timer elapsed  --->| T > T-Max ?|      |  |\n      |   +-----------+       \
    \                +------------+      ^  ^\n      |          |                \
    \             |    |             |  |\n      |          v             +-----(yes)-----+\
    \   (no)           |  |\n      |      (response         |                    |\
    \             |  |\n      |       received)        |              +------------+\
    \      |  |\n      |          |             |              | N >= Max1 ?|-(no)>+\
    \  |\n      |          v             |              +------------+      ^  ^\n\
    \      |      +--------+        |                    |             |  |\n    \
    \  +<(no)-| final ?|        |                  (yes)           |  |\n      ^ \
    \     +--------+        |                    |             |  |\n      |     \
    \     |             |     (if first address & N=Max1,  |  |\n      |         \
    \ v             |      or last address & N=Max2    |  |\n      |        (yes)\
    \           |               check DNS)         |  |\n      |          |      \
    \       |                    |             |  |\n      |          v          \
    \   V           +---------------+      |  |\n      |        (end)           |\
    \           |more addresses?|(yes)-|->+\n      |                        |    \
    \       +---------------+      |\n      |                        |           \
    \         |             ^\n      |                        |                  (no)\
    \            |\n      |                        |                    |        \
    \     |\n      |                        |              +------------+      |\n\
    \      |                        |              | N >= Max2 ?|(no)--+\n      |\
    \                        |              +------------+\n      |              \
    \          |                    |\n      |                        |          \
    \        (yes)\n      |                        |                    |\n      |\
    \                        |            +----------------+\n      |            \
    \            +----------->| T >= 2*T-HIST ?|\n      |                        \
    \             +----------------+\n      |                                    \
    \   |       |\n      |                                     (no)    (yes)\n   \
    \   +---------------<-----------------------+       |\n                      \
    \                                v\n                                         \
    \       (disconnected)\n   A classic retransmission algorithm would simply count\
    \ the number of\n   successive repetitions, and conclude that the association\
    \ is broken\n   after re-transmitting the packet an excessive number of times\n\
    \   (typically between 7 and 11 times). In order to account for the\n   possibility\
    \ of an undetected or in-progress \"failover\", we modify the\n   classic algorithm\
    \ as follows:\n   * We require that the gateway always checks for the presence\
    \ of a new\n     Call Agent.  It can be noticed either by:\n     - receiving a\
    \ command where the NotifiedEntity points to the new\n       Call Agent, or\n\
    \     - receiving a redirection response pointing to a new Call Agent.\n     If\
    \ a new Call Agent is detected, the gateway MUST start\n     retransmitting outstanding\
    \ commands for the endpoint(s) redirected\n     to that new Call Agent.  Responses\
    \ to new or old commands are still\n     transmitted to the source address of\
    \ the command.\n   * Prior to any retransmission, it is checked that the time\
    \ elapsed\n     since the sending of the initial datagram is no greater than T-MAX.\n\
    \     If more than T-MAX time has elapsed, then retransmissions MUST\n     cease.\
    \  If more than 2*T-HIST has elapsed, then the endpoint\n     becomes disconnected.\n\
    \   * If the number of repetitions for this Call Agent is equal to\n     \"Max1\"\
    , and its domain name was not resolved recently (e.g., within\n     the last 5\
    \ seconds or otherwise provisioned), and it is not in the\n     process of being\
    \ resolved, then the gateway MAY actively query the\n     domain name server in\
    \ order to detect the possible change of the\n     Call Agent interfaces.  Note\
    \ that the first repetition is the\n     second transmission.\n   * The gateway\
    \ may have learned several IP addresses for the call\n     agent.  If the number\
    \ of repetitions for this IP address is greater\n     than or equal to \"Max1\"\
    \ and lower than \"Max2\", and there are more\n     addresses that have not been\
    \ tried, then the gateway MUST direct\n     the retransmissions to alternate addresses.\
    \  Also, receipt of\n     explicit network notifications such as, e.g., ICMP network,\
    \ host,\n     protocol, or port unreachable SHOULD lead the gateway to try\n \
    \    alternate addresses (with due consideration to possible security\n     issues).\n\
    \   * If there are no more interfaces to try, and the number of\n     repetitions\
    \ for this address is Max2, then the gateway SHOULD\n     contact the DNS one\
    \ more time to see if any other interfaces have\n     become available, unless\
    \ the domain name was resolved recently\n     (e.g., within the last 5 seconds\
    \ or otherwise provisioned), or it\n     is already in the process of being resolved.\
    \  If there still are no\n     more interfaces to try, the gateway is then disconnected\
    \ and MUST\n     initiate the \"disconnected\" procedure (see Section 4.4.7).\n\
    \   In order to automatically adapt to network load, MGCP specifies\n   exponentially\
    \ increasing timers.  If the initial timer is set to 200\n   milliseconds, the\
    \ loss of a fifth retransmission will be detected\n   after about 6 seconds. \
    \ This is probably an acceptable waiting delay\n   to detect a failover.  The\
    \ repetitions should continue after that\n   delay not only in order to perhaps\
    \ overcome a transient connectivity\n   problem, but also in order to allow some\
    \ more time for the execution\n   of a failover - waiting a total delay of 30\
    \ seconds is probably\n   acceptable.\n   It is however important that the maximum\
    \ delay of retransmissions be\n   bounded.  Prior to any retransmission, it is\
    \ checked that the time\n   (T) elapsed since the sending of the initial datagram\
    \ is no greater\n   than T-MAX.  If more than T-MAX time has elapsed, retransmissions\n\
    \   MUST cease.  If more than 2*T-HIST time has elapsed, the endpoint\n   becomes\
    \ disconnected.  The value T-MAX is related to the T-HIST\n   value:  the T-HIST\
    \ value MUST be greater than or equal to T-MAX plus\n   the maximum propagation\
    \ delay in the network.\n   The default value for T-MAX is 20 seconds.  Thus,\
    \ if the assumed\n   maximum propagation delay is 10 seconds, then responses to\
    \ old\n   transactions would have to be kept for a period of at least 30\n   seconds.\
    \  The importance of having the sender and receiver agree on\n   these values\
    \ cannot be overstated.\n   The default value for Max1 is 5 retransmissions and\
    \ the default value\n   for Max2 is 7 retransmissions.  Both of these values may\
    \ be altered\n   by the provisioning process.\n   The provisioning process MUST\
    \ be able to disable one or both of the\n   Max1 and Max2 DNS queries.\n"
- title: 4.4 Race Conditions
  contents:
  - "4.4 Race Conditions\n   MGCP deals with race conditions through the notion of\
    \ a \"quarantine\n   list\" and through explicit detection of desynchronization,\
    \ e.g., for\n   mismatched hook state due to glare for an endpoint.\n   MGCP does\
    \ not assume that the transport mechanism will maintain the\n   order of commands\
    \ and responses.  This may cause race conditions,\n   that may be obviated through\
    \ a proper behavior of the Call Agent.\n   (Note that some race conditions are\
    \ inherent to distributed systems;\n   they would still occur, even if the commands\
    \ were transmitted in\n   strict order.)\n   In some cases, many gateways may\
    \ decide to restart operation at the\n   same time.  This may occur, for example,\
    \ if an area loses power or\n   transmission capability during an earthquake or\
    \ an ice storm.  When\n   power and transmission are reestablished, many gateways\
    \ may decide to\n   send \"RestartInProgress\" commands simultaneously, leading\
    \ to very\n   unstable operation.\n"
- title: 4.4.1 Quarantine List
  contents:
  - "4.4.1 Quarantine List\n   MGCP controlled gateways will receive \"notification\
    \ requests\" that\n   ask them to watch for a list of \"events\".  The protocol\
    \ elements that\n   determine the handling of these events are the \"Requested\
    \ Events\"\n   list, the \"Digit Map\", the \"Quarantine Handling\", and the \"\
    Detect\n   Events\" list.\n   When the endpoint is initialized, the requested\
    \ events list only\n   consists of persistent events for the endpoint, and the\
    \ digit map is\n   assumed empty.  At this point, the endpoint MAY use an implicit\n\
    \   NotificationRequest with the reserved RequestIdentifier zero (\"0\") to\n\
    \   detect and report a persistent event, e.g., off-hook.  A pre-existing\n  \
    \ off-hook condition MUST here result in the off-hook event being\n   generated\
    \ as well.\n   The endpoint awaits the reception of a NotificationRequest command,\n\
    \   after which the gateway starts observing the endpoint for occurrences\n  \
    \ of the events mentioned in the list, including persistent events.\n   The events\
    \ are examined as they occur.  The action that follows is\n   determined by the\
    \ \"action\" parameter associated with the event in the\n   list of requested\
    \ events, and also by the digit map.  The events that\n   are defined as \"accumulate\"\
    \ or \"accumulate according to digit map\"\n   are accumulated in a list of events,\
    \ the events that are marked as\n   \"accumulate according to the digit map\"\
    \ will additionally be\n   accumulated in the \"current dial string\".  This will\
    \ go on until one\n   event is encountered that triggers a notification which\
    \ will be sent\n   to the current \"notified entity\".\n   The gateway, at this\
    \ point, will transmit the Notify command and will\n   place the endpoint in a\
    \ \"notification\" state.  As long as the\n   endpoint is in this notification\
    \ state, the events that are to be\n   detected on the endpoint are stored in\
    \ a \"quarantine\" buffer (FIFO)\n   for later processing.  The events are, in\
    \ a sense, \"quarantined\".\n   All events that are specified by the union of\
    \ the RequestedEvents\n   parameter and the most recently received DetectEvents\
    \ parameter or,\n   in the absence of the latter, all events that are referred\
    \ to in the\n   RequestedEvents, SHALL be detected and quarantined, regardless\
    \ of the\n   action associated with the event.  Persistent events are here viewed\n\
    \   as implicitly included in RequestedEvents.  If the quarantine buffer\n   reaches\
    \ the capacity of the endpoint, a Quarantine Buffer Overflow\n   event (see Appendix\
    \ B) SHOULD be generated (when this event is\n   supported, the endpoint MUST\
    \ ensure it has capacity to include the\n   event in the quarantine buffer). \
    \ Excess events will now be\n   discarded.\n   The endpoint exits the \"notification\
    \ state\" when the response\n   (whether success or failure) to the Notify command\
    \ is received.  The\n   Notify command may be retransmitted in the \"notification\
    \ state\", as\n   specified in Section 3.5 and 4.  If the endpoint is or becomes\n\
    \   disconnected (see Section 4.3) during this, a response to the Notify\n   command\
    \ will never be received.  The Notify command is then lost and\n   hence no longer\
    \ considered pending, yet the endpoint is still in the\n   \"notification state\"\
    .  Should that occur, completion of the\n   disconnected procedure specified in\
    \ Section 4.4.7 SHALL then lead the\n   endpoint to exit the \"notification state\"\
    .\n   When the endpoint exits the \"notification state\" it resets the list\n\
    \   of observed events and the \"current dial string\" of the endpoint to a\n\
    \   null value.\n   Following that point, the behavior of the gateway depends\
    \ on the\n   value of the QuarantineHandling parameter in the triggering\n   NotificationRequest\
    \ command:\n   If the Call Agent had specified, that it expected at most one\n\
    \   notification in response to the notification request command, then\n   the\
    \ gateway SHALL simply keep on accumulating events in the\n   quarantine buffer\
    \ until it receives the next notification request\n   command.\n   If, however,\
    \ the gateway is authorized to send multiple successive\n   Notify commands, it\
    \ will proceed as follows.  When the gateway exits\n   the \"notification state\"\
    , it resets the list of observed events and\n   the \"current dial string\" of\
    \ the endpoint to a null value and starts\n   processing the list of quarantined\
    \ events, using the already received\n   list of requested events and digit map.\
    \  When processing these\n   events, the gateway may encounter an event which\
    \ triggers a Notify\n   command to be sent.  If that is the case, the gateway\
    \ can adopt one\n   of the two following behaviors:\n   * it can immediately transmit\
    \ a Notify command that will report all\n     events that were accumulated in\
    \ the list of observed events until\n     the triggering event, included, leaving\
    \ the unprocessed events in\n     the quarantine buffer,\n   * or it can attempt\
    \ to empty the quarantine buffer and transmit a\n     single Notify command reporting\
    \ several sets of events (in a single\n     list of observed events) and possibly\
    \ several dial strings.  The\n     \"current dial string\" is reset to a null\
    \ value after each\n     triggering event.  The events that follow the last triggering\
    \ event\n     are left in the quarantine buffer.\n   If the gateway transmits\
    \ a Notify command, the endpoint will reenter\n   and remain in the \"notification\
    \ state\" until the acknowledgement is\n   received (as described above).  If\
    \ the gateway does not find a\n   quarantined event that triggers a Notify command,\
    \ it places the\n   endpoint in a normal state.  Events are then processed as\
    \ they come,\n   in exactly the same way as if a Notification Request command\
    \ had just\n   been received.\n   A gateway may receive at any time a new Notification\
    \ Request command\n   for the endpoint, including the case where the endpoint\
    \ is\n   disconnected.  Activating an embedded Notification Request is here\n\
    \   viewed as receiving a new Notification Request as well, except that\n   the\
    \ current list of ObservedEvents remains unmodified rather than\n   being processed\
    \ again.  When a new notification request is received\n   in the notification\
    \ state, the gateway SHALL ensure that the pending\n   Notify is received by the\
    \ Call Agent prior to a new Notify (note that\n   a Notify that was lost due to\
    \ being disconnected, is no longer\n   considered pending).  It does so by using\
    \ the \"piggybacking\"\n   functionality of the protocol.  The messages will then\
    \ be sent in a\n   single packet to the current \"notified entity\".  The steps\
    \ involved\n   are the following:\n   a) the gateway sends a response to the new\
    \ notification request.\n   b) the endpoint is then taken out of the \"notification\
    \ state\" without\n      waiting for the acknowledgement of the pending Notify\
    \ command.\n   c) a copy of the unacknowledged Notify command is kept until an\n\
    \      acknowledgement is received.  If a timer elapses, the Notify will\n   \
    \   be retransmitted.\n   d) If the gateway has to transmit a new Notify before\
    \ the previous\n      Notify(s) is acknowledged, it constructs a packet that piggybacks\n\
    \      a repetition of the old Notify(s) and the new Notify (ordered by\n    \
    \  age with the oldest first).  This datagram will be sent to the\n      current\
    \ \"notified entity\".\n   f) Gateways that cannot piggyback several messages\
    \ in the same\n      datagram and hence guarantee in-order delivery of two (or\
    \ more)\n      Notify's SHALL leave the endpoint in the \"notification\" state\
    \ as\n      long as the last Notify is not acknowledged.\n   The procedure is\
    \ illustrated by the following diagram:\n    +-------------------+\n    | Processing\
    \ Events |<--------------------------------------+\n    +-------------------+\
    \                                       |\n             |                    \
    \                              |\n     Need to send NTFY                     \
    \                     |\n             |                                      \
    \            |\n             v                                               \
    \   |\n    +-------------------+                                       |\n   \
    \ | Outstanding NTFY  |---- No -------+                       |\n    |       \
    \            |               |                       |\n    +-------------------+\
    \               v                       |\n             |                    +-----------+\
    \                 |\n            Yes                   | Send NTFY |         \
    \        |\n             |                    +-----------+                 |\n\
    \             v                          |                       |\n    +--------------------+\
    \              v                       |\n    | Piggyback new NTFY |     +--------------------+\
    \           |\n    | w. old outstanding |---->| Notification State |         \
    \  |\n    | NTFY(s)            |     +--------------------+           |\n    +--------------------+\
    \       |               |              |\n                             new RQNT\
    \        NTFY response      |\n                             received        received\
    \           |\n                                 |               |            \
    \  |\n                                 |               v              |\n    \
    \                             |        +-------------+       |\n             \
    \                    |        | Step mode ? |- No ->+\n                      \
    \           |        +-------------+       ^\n                               \
    \  |               |              |\n                                 |      \
    \        Yes             |\n                                 |               |\
    \              |\n                                 |               v         \
    \     |\n                                 |       +---------------+      |\n \
    \                                |       | Wait for RQNT |      |\n          \
    \                       |       +---------------+      |\n                   \
    \              |               |              |\n                            \
    \     |         RQNT received        |\n                                 |   \
    \            |              |\n                                 |            \
    \   v              |\n                                 |       +---------------+\
    \      |\n                                 +------>| Apply RQNT and|----->+\n\
    \                                         | send response |\n                \
    \                         +---------------+\n   Gateways may also attempt to deliver\
    \ the pending Notify prior to a\n   successful response to the new NotificationRequest\
    \ by using the\n   \"piggybacking\" functionality of the protocol.  This was in\
    \ fact\n   required behavior in RFC 2705, however there are several\n   complications\
    \ in doing this, and the benefits are questionable.  In\n   particular, the RFC\
    \ 2705 mechanism did not guarantee in-order\n   delivery of Notify's and responses\
    \ to NotificationRequests in\n   general, and hence Call Agents had to handle\
    \ out-of-order delivery of\n   these messages anyway.  The change to optional\
    \ status is thus\n   backwards compatible while greatly reducing complexity.\n\
    \   After receiving the Notification Request command, the requested\n   events\
    \ list and digit map (if a new one was provided) are replaced by\n   the newly\
    \ received parameters, and the current dial string is reset\n   to a null value.\
    \  Furthermore, when the Notification Request was\n   received in the \"notification\
    \ state\", the list of observed events is\n   reset to a null value.  The subsequent\
    \ behavior is conditioned by the\n   value of the QuarantineHandling parameter.\
    \  The parameter may specify\n   that quarantined events (and observed events\
    \ which in this case is\n   now an empty list), should be discarded, in which\
    \ case they will be.\n   If the parameter specifies that the quarantined (and\
    \ observed) events\n   are to be processed, the gateway will start processing\
    \ the list of\n   quarantined (and observed) events, using the newly received\
    \ list of\n   requested events and digit map (if provided).  When processing these\n\
    \   events, the gateway may encounter an event which requires a Notify\n   command\
    \ to be sent.  If that is the case, the gateway will\n   immediately transmit\
    \ a Notify command that will report all events\n   that were accumulated in the\
    \ list of observed events until the\n   triggering event, included leaving the\
    \ unprocessed events in the\n   quarantine buffer, and will enter the \"notification\
    \ state\".\n   A new notification request may be received while the gateway has\n\
    \   accumulated events according to the previous notification request,\n   but\
    \ has not yet detected a notification-triggering events, i.e., the\n   endpoint\
    \ is not in the \"notification state\".  The handling of not-\n   yet-notified\
    \ events is determined, as with the quarantined events, by\n   the quarantine\
    \ handling parameter:\n   * If the quarantine-handling parameter specifies that\
    \ quarantined\n     events shall be ignored, the observed events list is simply\
    \ reset.\n   * If the quarantine-handling parameter specifies that quarantined\n\
    \     events shall be processed, the observed event list is transferred\n    \
    \ to the quarantined event list.  The observed event list is then\n     reset,\
    \ and the quarantined event list is processed.\n   Call Agents controlling endpoints\
    \ in lockstep mode SHOULD provide the\n   response to a successful Notify message\
    \ and the new\n   NotificationRequest in the same datagram using the piggybacking\n\
    \   mechanism.\n"
- title: 4.4.2 Explicit Detection
  contents:
  - "4.4.2 Explicit Detection\n   A key element of the state of several endpoints\
    \ is the position of\n   the hook.  A race condition may occur when the user decides\
    \ to go\n   off-hook before the Call Agent has the time to ask the gateway to\n\
    \   notify an off-hook event (the \"glare\" condition well known in\n   telephony),\
    \ or if the user goes on-hook before the Call Agent has the\n   time to request\
    \ the event's notification.\n   To avoid this race condition, the gateway MUST\
    \ check the condition of\n   the endpoint before acknowledging a NotificationRequest.\
    \  It MUST\n   return an error:\n   1. If the gateway is requested to notify an\
    \ \"off-hook\" transition\n      while the phone is already off-hook, (error code\
    \ 401 - phone off\n      hook)\n   2. If the gateway is requested to notify an\
    \ \"on-hook\" or \"flash hook\"\n      condition while the phone is already on-hook\
    \ (error code 402 -\n      phone on hook).\n   Additionally, individual signal\
    \ definitions can specify that a signal\n   will only operate under certain conditions,\
    \ e.g., ringing may only be\n   possible if the phone is already off-hook.  If\
    \ such prerequisites\n   exist for a given signal, the gateway MUST return the\
    \ error specified\n   in the signal definition if the prerequisite is not met.\n\
    \   It should be noted, that the condition check is performed at the time\n  \
    \ the notification request is received, whereas the actual event that\n   caused\
    \ the current condition may have either been reported, or\n   ignored earlier,\
    \ or it may currently be quarantined.\n   The other state variables of the gateway,\
    \ such as the list of\n   RequestedEvents or list of requested signals, are entirely\
    \ replaced\n   after each successful NotificationRequest, which prevents any long\n\
    \   term discrepancy between the Call Agent and the gateway.\n   When a NotificationRequest\
    \ is unsuccessful, whether it is included in\n   a connection-handling command\
    \ or not, the gateway MUST simply\n   continue as if the command had never been\
    \ received.  As all other\n   transactions, the NotificationRequest MUST operate\
    \ as an atomic\n   transaction, thus any changes initiated as a result of the\
    \ command\n   MUST be reverted.\n   Another race condition may occur when a Notify\
    \ is issued shortly\n   before the reception by the gateway of a NotificationRequest.\
    \  The\n   RequestIdentifier is used to correlate Notify commands with\n   NotificationRequest\
    \ commands thereby enabling the Call Agent to\n   determine if the Notify command\
    \ was generated before or after the\n   gateway received the new NotificationRequest.\
    \  This is especially\n   important to avoid deadlocks in \"step\" mode.\n"
- title: 4.4.3 Transactional Semantics
  contents:
  - "4.4.3 Transactional Semantics\n   As the potential transaction completion times\
    \ increase, e.g., due to\n   external resource reservations, a careful definition\
    \ of the\n   transactional semantics becomes increasingly important.  In\n   particular\
    \ the issue of race conditions, e.g., as it relates to\n   hook-state, must be\
    \ defined carefully.\n   An important point to consider is, that the status of\
    \ a pre-condition\n   (e.g., hook-state) may in fact change between the time a\
    \ transaction\n   starts and the time it either completes successfully (transaction\n\
    \   commit) or fails.  In general, we can say that the successful\n   execution\
    \ of a transaction depends on one or more pre-conditions\n   where the status\
    \ of one or more of the pre-conditions may change\n   dynamically between the\
    \ transaction start and transaction commit.\n   The simplest semantics for this\
    \ is simply to require that all pre-\n   conditions be met from the time the transaction\
    \ is initiated until\n   the transaction commits.  If any pre-condition is not\
    \ met before the\n   completion of the transaction, the transaction will also\
    \ fail.\n   As an example, consider a transaction that includes a request for\
    \ the\n   \"off-hook\" event.  When the transaction is initiated the phone is\n\
    \   \"on-hook\" and this pre-condition is therefore met.  If the hook-state\n\
    \   changes to \"off-hook\" before the transaction completes, the pre-\n   condition\
    \ is no longer met, and the transaction therefore immediately\n   fails.\n   Finally,\
    \ we need to consider the point in time when a new transaction\n   takes effect\
    \ and endpoint processing according to an old transaction\n   stops.  For example,\
    \ assume that transaction T1 has been executed\n   successfully and event processing\
    \ is currently being done according\n   to transaction T1.  Now we receive a new\
    \ transaction T2 specifying\n   new event processing (for example a CreateConnection\
    \ with an\n   encapsulated NotificationRequest).  Since we don't know whether\
    \ T2\n   will complete successfully or not, we cannot start processing events\n\
    \   according to T2 until the outcome of T2 is known.  While we could\n   suspend\
    \ all event processing until the outcome of T2 is known, this\n   would make for\
    \ a less responsive system and hence SHOULD NOT be done.\n   Instead, when a new\
    \ transaction Ty is received and Ty modifies\n   processing according to an old\
    \ transaction Tx, processing according\n   to Tx SHOULD remain active for as long\
    \ as possible, until a\n   successful outcome of Ty is known to occur.  If Ty\
    \ fails, then\n   processing according to Tx will of course continue as usual.\
    \  Any\n   changes incurred by Ty logically takes effect when Ty commits.  Thus,\n\
    \   if the endpoint was in the notification state when Ty commits, and Ty\n  \
    \ contained a NotificationRequest, the endpoint will be taken out of\n   the notification\
    \ state when Ty commits.  Note that this is\n   independent of whether the endpoint\
    \ was in the notification state\n   when Ty was initiated.  For example, a Notify\
    \ could be generated due\n   to processing according to Tx between the start and\
    \ commit of Ty.  If\n   the commit of Ty leads to the endpoint entering the notification\n\
    \   state, a new NotificationRequest (Tz) is needed to exit the\n   notification\
    \ state.  This follows from the fact that transaction\n   execution respects causal\
    \ order.\n   Another related issue is the use of wildcards, especially the \"\
    all\n   of\" wildcard, which may match more than one endpoint.  When a command\n\
    \   is requested, and the endpoint identifier matches more than one\n   endpoint,\
    \ transactional semantics still apply.  Thus, the command\n   MUST either succeed\
    \ for all the endpoints, or it MUST fail for all of\n   them.  A single response\
    \ is consequently always issued.\n"
- title: 4.4.4 Ordering of Commands, and Treatment of Misorder
  contents:
  - "4.4.4 Ordering of Commands, and Treatment of Misorder\n   MGCP does not mandate\
    \ that the underlying transport protocol\n   guarantees in-order delivery of commands\
    \ to a gateway or an endpoint.\n   This property tends to maximize the timeliness\
    \ of actions, but it has\n   a few drawbacks.  For example:\n   * Notify commands\
    \ may be delayed and arrive at the Call Agent after\n     the transmission of\
    \ a new Notification Request command,\n   * If a new NotificationRequest is transmitted\
    \ before a previous one\n     is acknowledged, there is no guarantee that the\
    \ previous one will\n     not be received and executed after the new one.\n  \
    \ Call Agents that want to guarantee consistent operation of the\n   endpoints\
    \ can use the following rules:\n   1) When a gateway handles several endpoints,\
    \ commands pertaining to\n      the different endpoints can be sent in parallel,\
    \ for example\n      following a model where each endpoint is controlled by its\
    \ own\n      process or its own thread.\n   2) When several connections are created\
    \ on the same endpoint,\n      commands pertaining to different connections can\
    \ be sent in\n      parallel.\n   3) On a given connection, there should normally\
    \ be only one\n      outstanding command (create or modify).  However, a\n   \
    \   DeleteConnection command can be issued at any time.  In\n      consequence,\
    \ a gateway may sometimes receive a ModifyConnection\n      command that applies\
    \ to a previously deleted connection.  Such\n      commands will fail, and an\
    \ error code MUST be returned (error code\n      515 - incorrect connection-id,\
    \ is RECOMMENDED).\n   4) On a given endpoint, there should normally be only one\
    \ outstanding\n      NotificationRequest command at any time.  The RequestId parameter\n\
    \      MUST be used to correlate Notify commands with the triggering\n      notification\
    \ request.\n   5) In some cases, an implicitly or explicitly wildcarded\n    \
    \  DeleteConnection command that applies to a group of endpoints can\n      step\
    \ in front of a pending CreateConnection command.  The Call\n      Agent should\
    \ individually delete all connections whose completion\n      was pending at the\
    \ time of the global DeleteConnection command.\n      Also, new CreateConnection\
    \ commands for endpoints named by the\n      wild-carding SHOULD NOT be sent until\
    \ the wild-carded\n      DeleteConnection command is acknowledged.\n   6) When\
    \ commands are embedded within each other, sequencing\n      requirements for\
    \ all commands must be adhered to.  For example a\n      Create Connection command\
    \ with a Notification Request in it must\n      adhere to the sequencing requirements\
    \ associated with both\n      CreateConnection and NotificationRequest at the\
    \ same time.\n   7) AuditEndpoint and AuditConnection are not subject to any\n\
    \      sequencing requirements.\n   8) RestartInProgress MUST always be the first\
    \ command sent by an\n      endpoint as defined by the restart procedure.  Any\
    \ other command\n      or non-restart response (see Section 4.4.6), except for\
    \ responses\n      to auditing, MUST be delivered after this RestartInProgress\n\
    \      command (piggybacking allowed).\n   9) When multiple messages are piggybacked\
    \ in a single packet, the\n      messages are always processed in order.\n   10)\
    \ On a given endpoint, there should normally be only one\n      outstanding EndpointConfiguration\
    \ command at any time.\n   Gateways MUST NOT make any assumptions as to whether\
    \ Call Agents\n   follow these rules or not.  Consequently gateways MUST always\
    \ respond\n   to commands, regardless of whether they adhere to the above rules\
    \ or\n   not.  To ensure consistent operation, gateways SHOULD behave as\n   specified\
    \ below when one or more of the above rules are not followed:\n   * Where a single\
    \ outstanding command is expected (ModifyConnection,\n     NotificationRequest,\
    \ and EndpointConfiguration), but the same\n     command is received in a new\
    \ transaction before the old finishes\n     executing, the gateway SHOULD fail\
    \ the previous command.  This\n     includes the case where one or more of the\
    \ commands were\n     encapsulated.  The use of error code 407 (transaction aborted)\
    \ is\n     RECOMMENDED.\n   * If a ModifyConnection command is received for a\
    \ pending\n     CreateConnection command, the ModifyConnection command SHOULD\n\
    \     simply be rejected.  The use of error code 400 (transient error) is\n  \
    \   RECOMMENDED.  Note that this situation constitutes a Call Agent\n     programming\
    \ error.\n   * If a DeleteConnection command is received for a pending\n     CreateConnection\
    \ or ModifyConnection command, the pending command\n     MUST be aborted.  The\
    \ use of error code 407 (transaction aborted)\n     is RECOMMENDED.\n   Note,\
    \ that where reception of a new command leads to aborting an old\n   command,\
    \ the old command SHOULD be aborted regardless of whether the\n   new command\
    \ succeeds or not.  For example, if a ModifyConnection\n   command is aborted\
    \ by a DeleteConnection command which itself fails\n   due to an encapsulated\
    \ NotificationRequest, the ModifyConnection\n   command is still aborted.\n"
- title: 4.4.5 Endpoint Service States
  contents:
  - "4.4.5 Endpoint Service States\n   As described earlier, endpoints configured\
    \ for operation may be\n   either in-service or out-of-service.  The actual service-state\
    \ of the\n   endpoint is reflected by the combination of the RestartMethod and\n\
    \   RestartDelay parameters, which are sent with RestartInProgress\n   commands\
    \ (Section 2.3.12) and furthermore may be audited in\n   AuditEndpoint commands\
    \ (Section 2.3.10).\n   The service-state of an endpoint affects how it processes\
    \ a command.\n   An endpoint in-service MUST process any command received, whereas\
    \ an\n   endpoint that is out-of-service MUST reject non-auditing commands,\n\
    \   but SHOULD process auditing commands if possible.  For backwards\n   compatibility,\
    \ auditing commands for an out-of-service endpoint may\n   alternatively be rejected\
    \ as well.  Any command rejected due to an\n   endpoint being out-of-service SHOULD\
    \ generate error code 501\n   (endpoint not ready/out-of-service).\n   Note that\
    \ (per Section 2.1.2), unless otherwise specified for a\n   command, endpoint\
    \ names containing the \"any of\" wildcard only refer\n   to endpoints in-service,\
    \ whereas endpoint names containing the \"all\n   of\" wildcard refer to all endpoints,\
    \ regardless of service state.\n   The above relationships are illustrated in\
    \ the table below which\n   shows the current service-states and gateway processing\
    \ of commands\n   as a function of the RestartInProgress command sent and the\
    \ response\n   (if any) received to it.  The last column also lists (in parentheses)\n\
    \   the RestartMethod to be returned if audited:\n    ------------------------------------------------------------------\n\
    \   | Restart-  | Restart- |    2xx    | Service- |   Response to      |\n   |\
    \    Method |    Delay | received ?|    State |   new command      |\n   |------------------------------------------------------------------|\n\
    \   | graceful  |   zero   |   Yes/No  |   In     | non-audit: 2xx     |\n   |\
    \           |          |           |          | audit:     2xx     |\n   |   \
    \        |          |           |          |        (graceful)  |\n   |-----------+----------+-----------+----------+--------------------|\n\
    \   | graceful  | non-zero |   Yes/No  |   In*    | non-audit: 2xx     |\n   |\
    \           |          |           |          | audit:     2xx     |\n   |   \
    \        |          |           |          |        (graceful)  |\n   |-----------+----------+-----------+----------+--------------------|\n\
    \   | forced    |   N/A    |   Yes/No  |   Out    | non-audit: 501     |\n   |\
    \           |          |           |          | audit:     2xx     |\n   |   \
    \        |          |           |          |         (forced)   |\n   |-----------+----------+-----------+----------+--------------------|\n\
    \   | restart   |   zero   |    No     |   In     | non-audit: 2xx,405*|\n   |\
    \           |          |           |          | audit:     2xx     |\n   |   \
    \        |          |           |          |         (restart)  |\n   |-----------+----------+-----------+----------+--------------------|\n\
    \   | restart   |   zero   |    Yes    |   In     | non-audit: 2xx     |\n   |\
    \           |          |           |          | audit:     2xx     |\n   |   \
    \        |          |           |          |         (restart)  |\n   |-----------+----------+-----------+----------+--------------------|\n\
    \   | restart   | non-zero |    No     |   Out*   | non-audit: 501*    |\n   |\
    \           |          |           |          | audit:     2xx     |\n   |   \
    \        |          |           |          |         (restart)  |\n   |-----------+----------+-----------+----------+--------------------|\n\
    \   | restart   | non-zero |    Yes    |   Out*   | non-audit: 501*    |\n   |\
    \           |          |           |          | audit:     2xx     |\n   |   \
    \        |          |           |          |         (restart)  |\n   |-----------+----------+-----------+----------+--------------------|\n\
    \   | discon-   |   zero/  |    No     |   In     | non-audit: 2xx,    |\n   |\
    \    nected | non-zero |           |          | audit:     2xx     |\n   |   \
    \        |          |           |          |      (disconnected)|\n   |-----------+----------+-----------+----------+--------------------|\n\
    \   | discon-   |   zero/  |    Yes    |   In     | non-audit: 2xx     |\n   |\
    \    nected | non-zero |           |          | audit:     2xx     |\n   |   \
    \        |          |           |          |         (restart)  |\n   |-----------+----------+-----------+----------+--------------------|\n\
    \   | cancel-   |   N/A    |   Yes/No  |   In     | non-audit: 2xx     |\n   |\
    \  graceful |          |           |          | audit:     2xx     |\n   |   \
    \        |          |           |          |         (restart)  |\n    ------------------------------------------------------------------\n\
    \   Notes (*):\n   * The three service-states marked with \"*\" will change after\
    \ the\n     expiration of the RestartDelay at which time an updated\n     RestartInProgress\
    \ command SHOULD be sent.\n   * If the endpoint returns 2xx when the restart procedure\
    \ has not yet\n     completed, then in-order delivery MUST still be satisfied,\
    \ i.e.,\n     piggy-backing is to be used.  If instead, the command is not\n \
    \    processed, 405 SHOULD be returned.\n   * Following a \"restart\" RestartInProgress\
    \ with a non-zero\n     RestartDelay, error code 501 is only returned until the\
    \ endpoint\n     goes in-service, i.e., until the expiration of the RestartDelay.\n"
- title: 4.4.6 Fighting the Restart Avalanche
  contents:
  - "4.4.6 Fighting the Restart Avalanche\n   Let's suppose that a large number of\
    \ gateways are powered on\n   simultaneously.  If they were to all initiate a\
    \ RestartInProgress\n   transaction, the Call Agent would very likely be swamped,\
    \ leading to\n   message losses and network congestion during the critical period\
    \ of\n   service restoration.  In order to prevent such avalanches, the\n   following\
    \ behavior is REQUIRED:\n   1) When a gateway is powered on, it MUST initiate\
    \ a restart timer to\n      a random value, uniformly distributed between 0 and\
    \ a maximum\n      waiting delay (MWD).  Care should be taken to avoid synchronicity\n\
    \      of the random number generation between multiple gateways that\n      would\
    \ use the same algorithm.\n   2) The gateway MUST then wait for either the end\
    \ of this timer, the\n      reception of a command from the Call Agent, or the\
    \ detection of a\n      local user activity, such as for example an off-hook transition\
    \ on\n      a residential gateway.\n   3) When the timer elapses, when a command\
    \ is received, or when an\n      activity is detected, the gateway MUST initiate\
    \ the restart\n      procedure.\n   The restart procedure simply requires the\
    \ endpoint to guarantee that\n   the first\n   * non-audit command, or\n   * non-restart\
    \ response (i.e., error codes other than 405, 501, and\n     520) to a non-audit\
    \ command\n   that the Call Agent sees from this endpoint is a \"restart\"\n \
    \  RestartInProgress command.  The endpoint is free to take full\n   advantage\
    \ of piggybacking to achieve this.  Endpoints that are\n   considered in-service\
    \ will have a RestartMethod of \"restart\", whereas\n   endpoints considered out-of-service\
    \ will have a RestartMethod of\n   \"forced\" (also see Section 4.4.5).  Commands\
    \ rejected due to an\n   endpoint not yet having completed the restart procedure\
    \ SHOULD use\n   error code 405 (endpoint \"restarting\").\n   The restart procedure\
    \ is complete once a success response has been\n   received.  If an error response\
    \ is received, the subsequent behavior\n   depends on the error code in question:\n\
    \   * If the error code indicates a transient error (4xx), then the\n     restart\
    \ procedure MUST be initiated again (as a new transaction).\n   * If the error\
    \ code is 521, then the endpoint is redirected, and the\n     restart procedure\
    \ MUST be initiated again (as a new transaction).\n     The 521 response MUST\
    \ have included a NotifiedEntity which then is\n     the \"notified entity\" towards\
    \ which the restart is initiated.  If\n     it did not include a NotifiedEntity,\
    \ the response is treated as any\n     other permanent error (see below).\n  \
    \ * If the error is any other permanent error (5xx), and the endpoint\n     is\
    \ not able to rectify the error, then the endpoint no longer\n     initiates the\
    \ restart procedure on its own (until\n     rebooted/restarted) unless otherwise\
    \ specified.  If a command is\n     received for the endpoint, the endpoint MUST\
    \ initiate the restart\n     procedure again.\n   Note that if the RestartInProgress\
    \ is piggybacked with the response\n   (R) to a command received while restarting,\
    \ then retransmission of\n   the RestartInProgress does not require piggybacking\
    \ of the response\n   R.  However, while the endpoint is restarting, a resend\
    \ of the\n   response R does require the RestartInProgress to be piggybacked to\n\
    \   ensure in-order delivery of the two.\n   Should the gateway enter the \"disconnected\"\
    \ state while carrying out\n   the restart procedure, the disconnected procedure\
    \ specified in\n   Section 4.4.7 MUST be carried out, except that a \"restart\"\
    \ rather\n   than \"disconnected\" message is sent during the procedure.\n   Each\
    \ endpoint in a gateway will have a provisionable Call Agent,\n   i.e., \"notified\
    \ entity\", to direct the initial restart message\n   towards.  When the collection\
    \ of endpoints in a gateway is managed by\n   more than one Call Agent, the above\
    \ procedure MUST be performed for\n   each collection of endpoints managed by\
    \ a given Call Agent.  The\n   gateway MUST take full advantage of wild-carding\
    \ to minimize the\n   number of RestartInProgress messages generated when multiple\n\
    \   endpoints in a gateway restart and the endpoints are managed by the\n   same\
    \ Call Agent.  Note that during startup, it is possible for\n   endpoints to start\
    \ out as being out-of-service, and then become in-\n   service as part of the\
    \ gateway initialization procedure.  A gateway\n   may thus choose to send first\
    \ a \"forced\" RestartInProgress for all\n   its endpoints, and subsequently a\
    \ \"restart\" RestartInProgress for the\n   endpoints that come in-service.  Alternatively,\
    \ the gateway may\n   simply send \"restart\" RestartInProgress for only those\
    \ endpoints that\n   are in-service, and \"forced\" RestartInProgress for the\
    \ specific\n   endpoints that are out-of-service.  Wild-carding MUST still be\
    \ used\n   to minimize the number of messages sent though.\n   The value of MWD\
    \ is a configuration parameter that depends on the\n   type of the gateway.  The\
    \ following reasoning can be used to\n   determine the value of this delay on\
    \ residential gateways.\n   Call agents are typically dimensioned to handle the\
    \ peak hour traffic\n   load, during which, in average, 10% of the lines will\
    \ be busy,\n   placing calls whose average duration is typically 3 minutes.  The\n\
    \   processing of a call typically involves 5 to 6 MGCP transactions\n   between\
    \ each endpoint and the Call Agent.  This simple calculation\n   shows that the\
    \ Call Agent is expected to handle 5 to 6 transactions\n   for each endpoint,\
    \ every 30 minutes on average, or, to put it\n   otherwise, about one transaction\
    \ per endpoint every 5 to 6 minutes on\n   average.  This suggest that a reasonable\
    \ value of MWD for a\n   residential gateway would be 10 to 12 minutes.  In the\
    \ absence of\n   explicit configuration, residential gateways should adopt a value\
    \ of\n   600 seconds for MWD.\n   The same reasoning suggests that the value of\
    \ MWD should be much\n   shorter for trunking gateways or for business gateways,\
    \ because they\n   handle a large number of endpoints, and also because the usage\
    \ rate\n   of these endpoints is much higher than 10% during the peak busy hour,\n\
    \   a typical value being 60%.  These endpoints, during the peak hour,\n   are\
    \ thus expected to contribute about one transaction per minute to\n   the Call\
    \ Agent load.  A reasonable algorithm is to make the value of\n   MWD per \"trunk\"\
    \ endpoint six times shorter than the MWD per\n   residential gateway, and also\
    \ inversely proportional to the number of\n   endpoints that are being restarted.\
    \  For example MWD should be set to\n   2.5 seconds for a gateway that handles\
    \ a T1 line, or to 60\n   milliseconds for a gateway that handles a T3 line.\n"
- title: 4.4.7 Disconnected Endpoints
  contents:
  - "4.4.7 Disconnected Endpoints\n   In addition to the restart procedure, gateways\
    \ also have a\n   \"disconnected\" procedure, which MUST be initiated when an\
    \ endpoint\n   becomes \"disconnected\" as described in Section 4.3.  It should\
    \ here\n   be noted, that endpoints can only become disconnected when they\n \
    \  attempt to communicate with the Call Agent.  The following steps MUST\n   be\
    \ followed by an endpoint that becomes \"disconnected\":\n   1. A \"disconnected\"\
    \ timer is initialized to a random value, uniformly\n      distributed between\
    \ 1 and a provisionable \"disconnected\" initial\n      waiting delay (Tdinit),\
    \ e.g., 15 seconds.  Care MUST be taken to\n      avoid synchronicity of the random\
    \ number generation between\n      multiple gateways and endpoints that would\
    \ use the same algorithm.\n   2. The gateway then waits for either the end of\
    \ this timer, the\n      reception of a command for the endpoint from the Call\
    \ Agent, or\n      the detection of a local user activity for the endpoint, such\
    \ as\n      for example an off-hook transition.\n   3. When the \"disconnected\"\
    \ timer elapses for the endpoint, when a\n      command is received for the endpoint,\
    \ or when local user activity\n      is detected for the endpoint, the gateway\
    \ initiates the\n      \"disconnected\" procedure for the endpoint - if a disconnected\n\
    \      procedure was already in progress for the endpoint, it is simply\n    \
    \  replaced by the new one.  Furthermore, in the case of local user\n      activity,\
    \ a provisionable \"disconnected\" minimum waiting delay\n      (Tdmin) MUST have\
    \ elapsed since the endpoint became disconnected\n      or the last time it ended\
    \ the \"disconnected\" procedure in order to\n      limit the rate at which the\
    \ procedure is performed.  If Tdmin has\n      not passed, the endpoint simply\
    \ proceeds to step 2 again, without\n      affecting any disconnected procedure\
    \ already in progress.\n   4. If the \"disconnected\" procedure still left the\
    \ endpoint\n      disconnected, the \"disconnected\" timer is then doubled, subject\
    \ to\n      a provisionable \"disconnected\" maximum waiting delay (Tdmax),\n\
    \      e.g., 600 seconds, and the gateway proceeds with step 2 again\n      (using\
    \ a new transaction-id).\n   The \"disconnected\" procedure is similar to the\
    \ restart procedure in\n   that it simply states that the endpoint MUST send a\
    \ RestartInProgress\n   command to the Call Agent informing it that the endpoint\
    \ was\n   disconnected.  Furthermore, the endpoint MUST guarantee that the\n \
    \  first non-audit message (non-audit command or response to non-audit\n   command)\
    \ that the Call Agent sees from this endpoint MUST inform the\n   Call Agent that\
    \ the endpoint is disconnected (unless the endpoint\n   goes out-of-service).\
    \  When a command (C) is received, this is\n   achieved by sending a piggy-backed\
    \ datagram with a \"disconnected\"\n   RestartInProgress command and the response\
    \ to command C to the source\n   address of command C as opposed to the current\
    \ \"notified entity\".\n   This piggy-backed RestartInProgress is not automatically\n\
    \   retransmitted by the endpoint but simply relies on fate-sharing with\n   the\
    \ piggy-backed response to guarantee the in-order delivery\n   requirement.  The\
    \ Call Agent still sends a response to the piggy-\n   backed RestartInProgress,\
    \ however, as usual, the response may be\n   lost.  In addition to the piggy-backed\
    \ RestartInProgress command, a\n   new \"disconnected\" procedure is triggered\
    \ by the command received.\n   This will lead to a non piggy-backed copy (i.e.,\
    \ same transaction) of\n   the \"disconnected\" RestartInProgress command being\
    \ sent reliably to\n   the current \"notified entity\".\n   When the Call Agent\
    \ learns that the endpoint is disconnected, the\n   Call Agent may then for instance\
    \ decide to audit the endpoint, or\n   simply clear all connections for the endpoint.\
    \  Note that each such\n   \"disconnected\" procedure will result in a new RestartInProgress\n\
    \   command, which will be subject to the normal retransmission\n   procedures\
    \ specified in Section 4.3.  At the end of the procedure,\n   the endpoint may\
    \ thus still be \"disconnected\".  Should the endpoint\n   go out-of-service while\
    \ being disconnected, it SHOULD send a \"forced\"\n   RestartInProgress message\
    \ as described in Section 2.3.12.\n   The disconnected procedure is complete once\
    \ a success response has\n   been received.  Error responses are handled similarly\
    \ to the restart\n   procedure (Section 4.4.6).  If the \"disconnected\" procedure\
    \ is to be\n   initiated again following an error response, the rate-limiting\
    \ timer\n   considerations specified above still apply.\n   Note, that if the\
    \ RestartInProgress is piggybacked with the response\n   (R) to a command received\
    \ while being disconnected, then\n   retransmission of this particular RestartInProgress\
    \ does not require\n   piggybacking of the response R.  However, while the endpoint\
    \ is\n   disconnected, resending the response R does require the\n   RestartInProgress\
    \ to be piggybacked with the response to ensure the\n   in-order delivery of the\
    \ two.\n   If a set of disconnected endpoints have the same \"notified entity\"\
    ,\n   and the set of endpoints can be named with a wildcard, the gateway\n   MAY\
    \ replace the individual disconnected procedures with a suitably\n   wildcarded\
    \ disconnected procedure instead.  In that case, the Restart\n   Delay for the\
    \ wildcarded \"disconnected\" RestartInProgress command\n   SHALL be the Restart\
    \ Delay corresponding to the oldest disconnected\n   procedure replaced.  Note\
    \ that if only a subset of these endpoints\n   subsequently have their \"notified\
    \ entity\" changed and/or are no\n   longer disconnected, then that wildcarded\
    \ disconnected procedure can\n   no longer be used.  The remaining individual\
    \ disconnected procedures\n   MUST then be resumed again.\n   A disconnected endpoint\
    \ may wish to send a command (besides\n   RestartInProgress) while it is disconnected.\
    \  Doing so will only\n   succeed once the Call Agent is reachable again, which\
    \ raises the\n   question of what to do with such a command meanwhile.  At one\n\
    \   extreme, the endpoint could drop the command right away, however that\n  \
    \ would not work very well when the Call Agent was in fact available,\n   but\
    \ the endpoint had not yet completed the \"disconnected\" procedure\n   (consider\
    \ for example the case where a NotificationRequest was just\n   received which\
    \ immediately resulted in a Notify being generated).  To\n   prevent such scenarios,\
    \ disconnected endpoints SHALL NOT blindly drop\n   new commands to be sent for\
    \ a period of T-MAX seconds after they\n   receive a non-audit command.\n   One\
    \ way of satisfying this requirement is to employ a temporary\n   buffering of\
    \ commands to be sent, however in doing so, the endpoint\n   MUST ensure, that\
    \ it:\n   * does not build up a long queue of commands to be sent,\n   * does\
    \ not swamp the Call Agent by rapidly sending too many commands\n     once it\
    \ is connected again.\n   Buffering commands for T-MAX seconds and, once the endpoint\
    \ is\n   connected again, limiting the rate at which buffered commands are\n \
    \  sent to one outstanding command per endpoint is considered acceptable\n   (see\
    \ also Section 4.4.8, especially if using wildcards).  If the\n   endpoint is\
    \ not connected within T-MAX seconds, but a \"disconnected\"\n   procedure is\
    \ initiated within T-MAX seconds, the endpoint MAY\n   piggyback the buffered\
    \ command(s) with that RestartInProgress.  Note,\n   that once a command has been\
    \ sent, regardless of whether it was\n   buffered initially, or piggybacked earlier,\
    \ retransmission of that\n   command MUST cease T-MAX seconds after the initial\
    \ send as described\n   in Section 4.3.\n   This specification purposely does\
    \ not specify any additional behavior\n   for a disconnected endpoint.  Vendors\
    \ MAY for instance choose to\n   provide silence, play reorder tone, or even enable\
    \ a downloaded wav\n   file to be played.\n   The default value for Tdinit is\
    \ 15 seconds, the default value for\n   Tdmin, is 15 seconds, and the default\
    \ value for Tdmax is 600 seconds.\n"
- title: 4.4.8 Load Control in General
  contents:
  - "4.4.8 Load Control in General\n   The previous sections have described several\
    \ MGCP mechanisms to deal\n   with congestion and overload, namely:\n   * the\
    \ UDP retransmission strategy which adapts to network and call\n     agent congestion\
    \ on a per endpoint basis,\n   * the guidelines on the ordering of commands which\
    \ limit the number\n     of commands issued in parallel,\n   * the restart procedure\
    \ which prevents flooding in case of a restart\n     avalanche, and\n   * the\
    \ disconnected procedure which prevents flooding in case of a\n     large number\
    \ of disconnected endpoints.\n   It is however still possible for a given set\
    \ of endpoints, either on\n   the same or different gateways, to issue one or\
    \ more commands at a\n   given point in time.  Although it can be argued, that\
    \ Call Agents\n   should be sized to handle one message per served endpoint at\
    \ any\n   given point in time, this may not always be the case in practice.\n\
    \   Similarly, gateways may not be able to handle a message for all of\n   its\
    \ endpoints at any given point in time.  In general, such issues\n   can be dealt\
    \ with through the use of a credit-based mechanism, or by\n   monitoring and automatically\
    \ adapting to the observed behavior.  We\n   opt for the latter approach as follows.\n\
    \   Conceptually, we assume that Call Agents and gateways maintain a\n   queue\
    \ of incoming transactions to be executed.  Associated with this\n   transaction\
    \ queue is a high-water and a low-water mark.  Once the\n   queue length reaches\
    \ the high-water mark, the entity SHOULD start\n   issuing 101 provisional responses\
    \ (transaction queued) until the\n   queue length drops to the low-water mark.\
    \  This applies to new\n   transactions as well as to retransmissions.  If the\
    \ entity is unable\n   to process any new transactions at this time, it SHOULD\
    \ return error\n   code 409 (processing overload).\n   Furthermore, gateways SHOULD\
    \ adjust the sending rate of new commands\n   to a given Call Agent by monitoring\
    \ the observed response times from\n   that Call Agent to a *set* of endpoints.\
    \  If the observed smoothed\n   average response time suddenly rises significantly\
    \ over some\n   threshold, or the gateway receives a 101 (transaction queued)\
    \ or 409\n   (overload) response, the gateway SHOULD adjust the sending rate of\n\
    \   new commands to that Call Agent accordingly.  The details of the\n   smoothing\
    \ average algorithm, the rate adjustments, and the thresholds\n   involved are\
    \ for further study, however they MUST be configurable.\n   Similarly, Call Agents\
    \ SHOULD adjust the sending rate of new\n   transactions to a given gateway by\
    \ monitoring the observed response\n   times from that gateway for a *set* of\
    \ endpoints.  If the observed\n   smoothed average response time suddenly rises\
    \ significantly over some\n   threshold, or the Call Agent receives a 101 (transaction\
    \ queued) or\n   409 (overloaded), the Call Agent SHOULD adjust the sending rate\
    \ of\n   new commands to that gateway accordingly.  The details of the\n   smoothing\
    \ average algorithm, the rate adjustments, and the thresholds\n   involved are\
    \ for further study, however they MUST be configurable.\n"
- title: 5. Security Requirements
  contents:
  - "5. Security Requirements\n   Any entity can send a command to an MGCP endpoint.\
    \  If unauthorized\n   entities could use the MGCP, they would be able to set-up\n\
    \   unauthorized calls, or to interfere with authorized calls.  We expect\n  \
    \ that MGCP messages will always be carried over secure Internet\n   connections,\
    \ as defined in the IP security architecture as defined in\n   RFC 2401, using\
    \ either the IP Authentication Header, defined in RFC\n   2402, or the IP Encapsulating\
    \ Security Payload, defined in RFC 2406.\n   The complete MGCP protocol stack\
    \ would thus include the following\n   layers:\n                -------------------------------\n\
    \               |              MGCP             |\n               |-------------------------------|\n\
    \               |              UDP              |\n               |-------------------------------|\n\
    \               |          IP security          |\n               | (authentication\
    \ or encryption)|\n               |-------------------------------|\n        \
    \       |              IP               |\n               |-------------------------------|\n\
    \               |       transmission media      |\n                -------------------------------\n\
    \   Adequate protection of the connections will be achieved if the\n   gateways\
    \ and the Call Agents only accept messages for which IP\n   security provided\
    \ an authentication service.  An encryption service\n   will provide additional\
    \ protection against eavesdropping, thus\n   preventing third parties from monitoring\
    \ the connections set up by a\n   given endpoint.\n   The encryption service will\
    \ also be requested if the session\n   descriptions are used to carry session\
    \ keys, as defined in SDP.\n   These procedures do not necessarily protect against\
    \ denial of service\n   attacks by misbehaving gateways or misbehaving Call Agents.\
    \  However,\n   they will provide an identification of these misbehaving entities,\n\
    \   which should then be deprived of their authorization through\n   maintenance\
    \ procedures.\n"
- title: 5.1 Protection of Media Connections
  contents:
  - "5.1 Protection of Media Connections\n   MGCP allows Call Agent to provide gateways\
    \ with \"session keys\" that\n   can be used to encrypt the audio messages, protecting\
    \ against\n   eavesdropping.\n   A specific problem of packet networks is \"uncontrolled\
    \ barge-in\".\n   This attack can be performed by directing media packets to the\
    \ IP\n   address and UDP port used by a connection.  If no protection is\n   implemented,\
    \ the packets will be decoded and the signals will be\n   played on the \"line\
    \ side\".\n   A basic protection against this attack is to only accept packets\
    \ from\n   known sources, however this tends to conflict with RTP principles.\n\
    \   This also has two inconveniences:  it slows down connection\n   establishment\
    \ and it can be fooled by source spoofing:\n   * To enable the address-based protection,\
    \ the Call Agent must obtain\n     the source address of the egress gateway and\
    \ pass it to the ingress\n     gateway.  This requires at least one network round\
    \ trip, and leaves\n     us with a dilemma:  either allow the call to proceed\
    \ without\n     waiting for the round trip to complete, and risk for example\n\
    \     \"clipping\" a remote announcement, or wait for the full round trip\n  \
    \   and settle for slower call-set-up procedures.\n   * Source spoofing is only\
    \ effective if the attacker can obtain valid\n     pairs of source and destination\
    \ addresses and ports, for example by\n     listening to a fraction of the traffic.\
    \  To fight source spoofing,\n     one could try to control all access points\
    \ to the network.  But\n     this is in practice very hard to achieve.\n   An\
    \ alternative to checking the source address is to encrypt and\n   authenticate\
    \ the packets, using a secret key that is conveyed during\n   the call set-up\
    \ procedure.  This will not slow down the call set-up,\n   and provides strong\
    \ protection against address spoofing.\n"
- title: 6. Packages
  contents:
  - "6. Packages\n   As described in Section 2.1.6, packages are the preferred way\
    \ of\n   extending MGCP.  In this section we describe the requirements\n   associated\
    \ with defining a package.\n   A package MUST have a unique package name defined.\
    \  The package name\n   MUST be registered with the IANA, unless it starts with\
    \ the\n   characters \"x-\" or \"x+\" which are reserved for experimental packages.\n\
    \   Please refer to Appendix C for IANA considerations.\n   A package MUST also\
    \ have a version defined which is simply a non-\n   negative integer.  The default\
    \ and initial version of a package is\n   zero, the next version is one, etc.\
    \  New package versions MUST be\n   completely backwards compatible, i.e., a new\
    \ version of a package\n   MUST NOT redefine or remove any of the extensions provided\
    \ in an\n   earlier version of the package.  If such a need arises, a new package\n\
    \   name MUST be used instead.\n   Packages containing signals of type time-out\
    \ MAY indicate if the \"to\"\n   parameter is supported for all the time-out signals\
    \ in the package as\n   well as the default rounding rules associated with these\
    \ (see Section\n   3.2.2.4).  If no such definition is provided, each time-out\
    \ signal\n   SHOULD provide these definitions.\n   A package defines one or more\
    \ of the following extensions:\n   * Actions\n   * BearerInformation\n   * ConnectionModes\n\
    \   * ConnectionParameters\n   * DigitMapLetters\n   * Events and Signals\n  \
    \ * ExtensionParameters\n   * LocalConnectionOptions\n   * ReasonCodes\n   * RestartMethods\n\
    \   * Return codes\n   For each of the above types of extensions supported by\
    \ the package,\n   the package definition MUST contain a description of the extension\
    \ as\n   defined in the following sections.  Please note, that package\n   extensions,\
    \ just like any other extension, MUST adhere to the MGCP\n   grammar.\n"
- title: 6.1 Actions
  contents:
  - "6.1 Actions\n   Extension Actions SHALL include:\n   * The name and encoding\
    \ of the extension action.\n   * If the extension action takes any action parameters,\
    \ then the name,\n     encoding, and possible values of those parameters.\n  \
    \ * A description of the operation of the extension action.\n   * A listing of\
    \ the actions in this specification the extension can be\n     combined with.\
    \  If such a listing is not provided, it is assumed\n     that the extension action\
    \ cannot be combined with any other action\n     in this specification.\n   *\
    \ If more than one extension action is defined in the package, then a\n     listing\
    \ of the actions in the package the extension can be combined\n     with.  If\
    \ such a listing is not provided, it is assumed that the\n     extension action\
    \ cannot be combined with any other action in the\n     package.\n   Extension\
    \ actions defined in two or more different packages SHOULD\n   NOT be used simultaneously,\
    \ unless very careful consideration to\n   their potential interaction and side-effects\
    \ has been given.\n"
- title: 6.2 BearerInformation
  contents:
  - "6.2 BearerInformation\n   BearerInformation extensions SHALL include:\n   * The\
    \ name and encoding of the BearerInformation extension.\n   * The possible values\
    \ and encoding of those values that can be\n     assigned to the BearerInformation\
    \ extension.\n   * A description of the operation of the BearerInformation extension.\n\
    \     As part of this description the default value (if any) if the\n     extension\
    \ is omitted in an EndpointConfiguration command MUST be\n     defined.  It may\
    \ be necessary to make a distinction between the\n     default value before and\
    \ after the initial application of the\n     parameter, for example if the parameter\
    \ retains its previous value\n     once specified, until explicitly altered. \
    \ If default values are\n     not described, then the extension parameter simply\
    \ defaults to\n     empty in all EndpointConfiguration commands.\n   Note that\
    \ the extension SHALL be included in the result for an\n   AuditEndpoint command\
    \ auditing the BearerInformation.\n"
- title: 6.3 ConnectionModes
  contents:
  - "6.3 ConnectionModes\n   Extension Connection Modes SHALL include:\n   * The name\
    \ and encoding of the extension connection mode.\n   * A description of the operation\
    \ of the extension connection mode.\n   * A description of the interaction a connection\
    \ in the extension\n     connection mode will have with other connections in each\
    \ of the\n     modes defined in this specification.  If such a description is\
    \ not\n     provided, the extension connection mode MUST NOT have any\n     interaction\
    \ with other connections on the endpoint.\n   Extension connection modes SHALL\
    \ NOT be included in the list of modes\n   in a response to an AuditEndpoint for\
    \ Capabilities, since the package\n   will be reported in the list of packages.\n"
- title: 6.4 ConnectionParameters
  contents:
  - "6.4 ConnectionParameters\n   Extension Connection Parameters SHALL include:\n\
    \   * The name and encoding of the connection parameter extension.\n   * The possible\
    \ values and encoding of those values that can be\n     assigned to the connection\
    \ parameter extension.\n   * A description of how those values are derived.\n\
    \   Note that the extension connection parameter MUST be included in the\n   result\
    \ for an AuditConnection command auditing the connection\n   parameters.\n"
- title: 6.5 DigitMapLetters
  contents:
  - "6.5 DigitMapLetters\n   Extension Digit Map Letters SHALL include:\n   * The\
    \ name and encoding of the extension digit map letter(s).\n   * A description\
    \ of the meaning of the extension digit map letter(s).\n   Note that extension\
    \ DigitMapLetters in a digit map do not follow the\n   normal naming conventions\
    \ for extensions defined in packages.  More\n   specifically the package name\
    \ and slash (\"/\") will not be part of the\n   extension name, thereby forming\
    \ a flat and limited name space with\n   potential name clashing.\n   Therefore,\
    \ a package SHALL NOT define a digit map letter extension\n   whose encoding has\
    \ already been used in another package.  If two\n   packages have used the same\
    \ encoding for a digit map letter\n   extension, and those two packages are supported\
    \ by the same endpoint,\n   the result of using that digit map letter extension\
    \ is undefined.\n   Note that although an extension DigitMapLetter does not include\
    \ the\n   package name prefix and slash (\"/\") as part of the extension name\n\
    \   within a digit map, the package name prefix and slash are included\n   when\
    \ the event code for the event that matched the DigitMapLetter is\n   reported\
    \ as an observed event.  In other words, the digit map just\n   define the matching\
    \ rule(s), but the event is still reported like any\n   other event.\n"
- title: 6.6 Events and Signals
  contents:
  - "6.6 Events and Signals\n   The event/signal definition SHALL include the precise\
    \ name of the\n   event/signal (i.e., the code used in MGCP), a plain text definition\n\
    \   of the event/signal, and, when appropriate, the precise definition of\n  \
    \ the corresponding events/signals, for example the exact frequencies\n   of audio\
    \ signals such as dial tones or DTMF tones.\n   The package description MUST provide,\
    \ for each event/signal, the\n   following information:\n   * The description\
    \ of the event/signal and its purpose, which SHOULD\n     include the actual signal\
    \ that is generated by the client (e.g., xx\n     ms FSK tone) as well as the\
    \ resulting user observed result (e.g.,\n     Message Waiting light on/off).\n\
    \   The event code used for the event/signal.\n   * The detailed characteristics\
    \ of the event/signal, such as for\n     example frequencies and amplitude of\
    \ audio signals, modulations and\n     repetitions.  Such details may be country\
    \ specific.\n   * The typical and maximum duration of the event/signal if applicable.\n\
    \   * If the signal or event can be applied to a connection (across a\n     media\
    \ stream), it MUST be indicated explicitly.  If no such\n     indication is provided,\
    \ it is assumed that the signal or event\n     cannot be applied to a connection.\n\
    \   For events, the following MUST be provided as well:\n   * An indication if\
    \ the event is persistent.  By default, events are\n     not persistent - defining\
    \ events as being persistent is discouraged\n     (see Appendix B for a preferred\
    \ alternative).  Note that persistent\n     events will automatically trigger\
    \ a Notify when they occur, unless\n     the Call Agent explicitly instructed\
    \ the endpoint otherwise.  This\n     not only violates the normal MGCP model,\
    \ but also assumes the Call\n     Agent supports the package in question.  Such\
    \ an assumption is\n     unlikely to hold in general.\n   * An indication if there\
    \ is an auditable event-state associated with\n     the event.  By default, events\
    \ do not have auditable event-states.\n   * If event parameters are supported,\
    \ it MUST be stated explicitly.\n     The precise syntax and semantics of these\
    \ MUST then be provided\n     (subject to the grammar provided in Appendix A).\
    \  It SHOULD also be\n     specified whether these parameters apply to RequestedEvents,\n\
    \     ObservedEvents, DetectEvents and EventStates.  If not specified\n     otherwise,\
    \ it is assumed that:\n     * they do not apply to RequestedEvents,\n     * they\
    \ do apply to ObservedEvents,\n     * they apply in the same way to DetectEvents\
    \ as they do to\n       RequestedEvents for a given event parameter,\n     * they\
    \ apply in the same way to EventStates as they do to\n       ObservedEvents for\
    \ a given event parameter.\n   * If the event is expected to be used in digit\
    \ map matching, it\n     SHOULD explicitly state so.  Note that only events with\
    \ single\n     letter or digit parameter codes can do this.  See Section 2.1.5\
    \ for\n     further details.\n   For signals, the following MUST be provided as\
    \ well:\n   * The type of signal (OO, TO, BR).\n   * Time-Out signals SHOULD have\
    \ an indication of the default time-out\n     value.  In some cases, time-out\
    \ values may be variable (if\n     dependent on some action to complete such as\
    \ out-pulsing digits).\n   * If signal parameters are supported, it MUST be stated\
    \ explicitly.\n     The precise syntax and semantics of these MUST then be provided\n\
    \     (subject to the grammar provided in Appendix A).\n   * Time-Out signals\
    \ may also indicate whether the \"to\" parameter is\n     supported or not as\
    \ well as what the rounding rules associated with\n     them are.  If omitted\
    \ from the signal definition, the package-wide\n     definition is assumed (see\
    \ Section 6).  If the package definition\n     did not specify this, rounding\
    \ rules default to the nearest non-\n     zero second, whereas support for the\
    \ \"to\" parameter defaults to\n     \"no\" for package version zero, and \"yes\"\
    \ for package versions one\n     and higher.\n   The following format is RECOMMENDED\
    \ for defining events and signals\n   in conformance with the above:\n    ------------------------------------------------------------------\n\
    \   | Symbol  |   Definition               |  R  |   S     Duration    |\n   |---------|----------------------------|-----|---------------------|\n\
    \   |         |                            |     |                     |\n   |\
    \         |                            |     |                     |\n    ------------------------------------------------------------------\n\
    \   where:\n   * Symbol indicates the event code used for the event/signal, e.g.,\n\
    \     \"hd\".\n   * Definition gives a brief definition of the event/signal\n\
    \   * R contains an \"x\" if the event can be detected or one or more of\n   \
    \  the following symbols:\n     - \"P\" if the event is persistent.\n     - \"\
    S\" if the events is an event-state that may be audited.\n     - \"C\" if the\
    \ event can be detected on a connection.\n   * S contains one of the following\
    \ if it is a signal:\n     - \"OO\" if the signal is On/Off signal.\n     - \"\
    TO\" if the signal is a Time-Out signal.\n     - \"BR\" if the signal is a Brief\
    \ signal.\n   * S also contains:\n     - \"C\" if the signal can be applied on\
    \ a connection.\n   The table SHOULD then be followed by a more comprehensive\
    \ description\n   of each event/signal defined.\n"
- title: 6.6.1 Default and Reserved Events
  contents:
  - "6.6.1 Default and Reserved Events\n   All packages that contain Time-Out type\
    \ signals contain the operation\n   failure (\"of\") and operation complete (\"\
    oc\") events, irrespective of\n   whether they are provided as part of the package\
    \ description or not.\n   These events are needed to support Time-Out signals\
    \ and cannot be\n   overridden in packages with Time-Out signals.  They MAY be\
    \ extended\n   if necessary, however such practice is discouraged.\n   If a package\
    \ without Time-Out signals does contain definitions for\n   the \"oc\" and \"\
    of\" events, the event definitions provided in the\n   package MAY over-ride those\
    \ indicated here.  Such practice is however\n   discouraged and is purely allowed\
    \ to avoid potential backwards\n   compatibility problems.\n   It is considered\
    \ good practice to explicitly mention that the two\n   events are supported in\
    \ accordance with their default definitions,\n   which are as follows:\n    ------------------------------------------------------------------\n\
    \   | Symbol  |   Definition               |  R  |   S     Duration    |\n   |---------|----------------------------|-----|---------------------|\n\
    \   | oc      | Operation Complete         |  x  |                     |\n   |\
    \ of      | Operation Failure          |  x  |                     |\n    ------------------------------------------------------------------\n\
    \   Operation complete (oc):  The operation complete event is generated\n   when\
    \ the gateway was asked to apply one or several signals of type TO\n   on the\
    \ endpoint or connection, and one or more of those signals\n   completed without\
    \ being stopped by the detection of a requested event\n   such as off-hook transition\
    \ or dialed digit.  The completion report\n   should carry as a parameter the\
    \ name of the signal that came to the\n   end of its live time, as in:\n     \
    \ O: G/oc(G/rt)\n   In this case, the observed event occurred because the \"rt\"\
    \ signal in\n   the \"G\" package timed out.\n   If the reported signal was applied\
    \ on a connection, the parameter\n   supplied will include the name of the connection\
    \ as well, as in:\n      O: G/oc(G/rt@0A3F58)\n   When the operation complete\
    \ event is requested, it cannot be\n   parameterized with any event parameters.\
    \  When the package name is\n   omitted (which is discouraged) as part of the\
    \ signal name, the\n   default package is assumed.\n   Operation failure (of):\
    \  The operation failure event is generated\n   when the endpoint was asked to\
    \ apply one or several signals of type\n   TO on the endpoint or connection, and\
    \ one or more of those signals\n   failed prior to timing out.  The completion\
    \ report should carry as a\n   parameter the name of the signal that failed, as\
    \ in:\n      O: G/of(G/rt)\n   In this case a failure occurred in producing the\
    \ \"rt\" signal in the\n   \"G\" package.\n   When the reported signal was applied\
    \ on a connection, the parameter\n   supplied will include the name of the connection\
    \ as well, as in:\n      O: G/of(G/rt@0A3F58)\n   When the operation failure event\
    \ is requested, event parameters can\n   not be specified.  When the package name\
    \ is omitted (which is\n   discouraged), the default package name is assumed.\n"
- title: 6.7 ExtensionParameters
  contents:
  - "6.7 ExtensionParameters\n   Extension parameter extensions SHALL include:\n \
    \  * The name and encoding of the extension parameter.\n   * The possible values\
    \ and encoding of those values that can be\n     assigned to the extension parameter.\n\
    \   * For each of the commands defined in this specification, whether the\n  \
    \   extension parameter is Mandatory, Optional, or Forbidden in\n     requests\
    \ as well as responses.  Note that extension parameters\n     SHOULD NOT normally\
    \ be mandatory.\n   * A description of the operation of the extension parameter.\
    \  As part\n     of this description the default value (if any) if the extension\
    \ is\n     omitted in a command MUST be defined.  It may be necessary to make\n\
    \     a distinction between the default value before and after the\n     initial\
    \ application of the parameter, for example if the parameter\n     retains its\
    \ previous value once specified, until explicitly\n     altered.  If default values\
    \ are not described, then the extension\n     parameter simply defaults to empty\
    \ in all commands.\n   * Whether the extension can be audited in AuditEndpoint\
    \ and/or\n     AuditConnection as well as the values returned.  If nothing is\n\
    \     specified, then auditing of the extension parameter can only be\n     done\
    \ for AuditEndpoint, and the value returned SHALL be the current\n     value for\
    \ the extension.  Note that this may be empty.\n"
- title: 6.8 LocalConnectionOptions
  contents:
  - "6.8 LocalConnectionOptions\n   LocalConnectionOptions extensions SHALL include:\n\
    \   * The name and encoding of the LocalConnectionOptions extension.\n   * The\
    \ possible values and encoding of those values that can be\n     assigned to the\
    \ LocalConnectionOptions extension.\n   * A description of the operation of the\
    \ LocalConnectionOptions\n     extension.  As part of this description the following\
    \ MUST be\n     specified:\n     - The default value (if any) if the extension\
    \ is omitted in a\n       CreateConnection command.\n     - The default value\
    \ if omitted in a ModifyConnection command.  This\n       may be to simply retain\
    \ the previous value (if any) or to apply\n       the default value.  If nothing\
    \ is specified, the current value is\n       retained if possible.\n     - If\
    \ Auditing of capabilities will result in the extension being\n       returned,\
    \ then a description to that effect as well as with what\n       possible values\
    \ and their encoding (note that the package itself\n       will always be returned).\
    \  If nothing is specified, the extension\n       SHALL NOT be returned when auditing\
    \ capabilities.\n   Also note, that the extension MUST be included in the result\
    \ for an\n   AuditConnection command auditing the LocalConnectionOptions.\n"
- title: 6.9 Reason Codes
  contents:
  - "6.9 Reason Codes\n   Extension reason codes SHALL include:\n   * The number for\
    \ the reason code.  The number MUST be in the range\n     800 to 899.\n   * A\
    \ description of the extension reason code including the\n     circumstances that\
    \ leads to the generation of the reason code.\n     Those circumstances SHOULD\
    \ be limited to events caused by another\n     extension defined in the package\
    \ to ensure the recipient will be\n     able to interpret the extension reason\
    \ code correctly.\n   Note that the extension reason code may have to be provided\
    \ in the\n   result for an AuditEndpoint command auditing the reason code.\n"
- title: 6.10 RestartMethods
  contents:
  - "6.10 RestartMethods\n   Extension Restart Methods SHALL include:\n   * The name\
    \ and encoding for the restart method.\n   * A description of the restart method\
    \ including the circumstances\n     that leads to the generation of the restart\
    \ method.  Those\n     circumstances SHOULD be limited to events caused by another\n\
    \     extension defined in the package to ensure the recipient will be\n     able\
    \ to interpret the extension restart method correctly.\n   * An indication of\
    \ whether the RestartDelay parameter is to be used\n     with the extension. \
    \ If nothing is specified, it is assumed that it\n     is not to be used.  In\
    \ that case, RestartDelay MUST be ignored if\n     present.\n   * If the restart\
    \ method defines a service state, the description MUST\n     explicitly state\
    \ and describe this.  In that case, the extension\n     restart method can then\
    \ be provided in the result for an\n     AuditEndpoint command auditing the restart\
    \ method.\n"
- title: 6.11 Return Codes
  contents:
  - "6.11 Return Codes\n   Extension Return Codes SHALL include:\n   * The number\
    \ for the extension return code.  The number MUST be in\n     the range 800 to\
    \ 899.\n   * A description of the extension return code including the\n     circumstances\
    \ that leads to the generation of the extension return\n     code.  Those circumstances\
    \ SHOULD be limited to events caused by\n     another extension defined in the\
    \ package to ensure the recipient\n     will be able to interpret the extension\
    \ return code correctly.\n"
- title: 7. Versions and Compatibility
  contents:
  - '7. Versions and Compatibility

    '
- title: 7.1 Changes from RFC 2705
  contents:
  - "7.1 Changes from RFC 2705\n   RFC 2705 was issued in October 1999, as the last\
    \ update of draft\n   version 0.5.  This updated document benefits from further\n\
    \   implementation experience.  The main changes from RFC 2705 are:\n   * Contains\
    \ several clarifications, editorial changes and resolution\n     of known inconsistencies.\n\
    \   * Firmed up specification language in accordance with RFC 2119 and\n     added\
    \ RFC 2119 conventions section.\n   * Clarified behavior of mixed wild-carding\
    \ in endpoint names.\n   * Deleted naming requirement about having first term\
    \ identify the\n     physical gateway when the gateway consists of multiple physical\n\
    \     gateways.  Also added recommendations on wild-carding naming usage\n   \
    \  from the right only, as well as mixed wildcard usage.\n   * Clarified that\
    \ synonymous forms and values for endpoint names are\n     not freely interchangeable.\n\
    \   * Allowed IPv6 addresses in endpoint names.\n   * Clarified Digit Map matching\
    \ rules.\n   * Added missing semantics for symbols used in digit maps.\n   * Added\
    \ Timer T description in Digit Maps.\n   * Added recommendation to support digit\
    \ map sizes of at least 2048\n     bytes per endpoint.\n   * Clarified use of\
    \ wildcards in several commands.\n   * Event and Signal Parameters formally defined\
    \ for events and\n     signals.\n   * Persistent events now allowed in base MGCP\
    \ protocol.\n   * Added additional detail on connection wildcards.\n   * Clarified\
    \ behavior of loopback, and continuity test connection\n     modes for mixing\
    \ and multiple connections in those modes.\n   * Modified BearerInformation to\
    \ be conditional optional in the\n     EndpointConfiguration command.\n   * Clarified\
    \ \"swap audio\" action operation for one specific scenario\n     and noted that\
    \ operation for other scenarios is undefined.\n   * Added recommendation that\
    \ all implementations support PCMU encoding\n     for interoperability.\n   *\
    \ Changed Bandwidth LocalConnectionOptions value from excluding to\n     including\
    \ overhead from the IP layer and up for consistency with\n     SDP.\n   * Clarified\
    \ that mode of second connection in a CreateConnection\n     command will be set\
    \ to \"send/receive\".\n   * Type of service default changed to zero.\n   * Additional\
    \ detail on echo cancellation, silence suppression, and\n     gain control.  Also\
    \ added recommendation for Call Agents not to\n     specify handling of echo cancellation\
    \ and gain control.\n   * Added requirement for a connection to have a\n     RemoteConnectionDescriptor\
    \ in order to use the \"network loopback\"\n     and \"network continuity test\"\
    \ modes.\n   * Removed procedures and specification for NAS's (will be provided\
    \ as\n     package instead).\n   * Removed procedures and specification for ATM\
    \ (will be provided as\n     package instead).\n   * Added missing optional NotifiedEntity\
    \ parameter to the\n     DeleteConnection (from the Call Agent) MGCI command.\n\
    \   * Added optional new MaxMGCPDatagram RequestedInfo code for\n     AuditEndpoint\
    \ to enable auditing of maximum size of MGCP datagrams\n     supported.\n   *\
    \ Added optional new PackageList RequestedInfo code for AuditEndpoint\n     to\
    \ enable auditing of packages with a package version number.\n     PackageList\
    \ parameter also allowed with return code 518\n     (unsupported package).\n \
    \  * Added missing attributes in Capabilities.\n   * Clarified that at the expiration\
    \ of a non-zero restart delay, an\n     updated RestartInProgress should be sent.\
    \  Also clarified that a\n     new NotifiedEntity can only be returned in response\
    \ to a\n     RestartInProgress command.\n   * Added Response Acknowledgement response\
    \ (return code 000) and\n     included in three-way handshake.\n   * ResponseAck\
    \ parameter changed to be allowed in all commands.\n   * Added return codes 101,\
    \ 405, 406, 407, 409, 410, 503, 504, 505,\n     506, 507, 508, 509, 533, 534,\
    \ 535, 536, 537, 538, 539, 540, 541,\n     and defined return codes in range 800-899\
    \ to be package specific\n     return codes.  Additional text provided for some\
    \ return codes and\n     additional detail on how to handle unknown return codes\
    \ added.\n   * Added reason code 903, 904, 905 and defined reason codes 800-899\
    \ to\n     be package specific reason codes.\n   * Added section clarifying codec\
    \ negotiation procedure.\n   * Clarified that resource reservation parameters\
    \ in a\n     ModifyConnection command defaults to the current value used.\n  \
    \ * Clarified that connection mode is optional in ModifyConnection\n     commands.\n\
    \   * Corrected LocalConnectionDescriptor to be optional in response to\n    \
    \ CreateConnection commands (in case of failure).\n   * Clarified that quoted-strings\
    \ are UTF-8 encoded and\n     interchangeability of quoted strings and unquoted\
    \ strings.\n   * Clarified that Transaction Identifiers are compared as numerical\n\
    \     values.\n   * Clarified bit-ordering for Type Of Service LocalConnectionOptions.\n\
    \   * Clarified the use of RequestIdentifier zero.\n   * Added example sections\
    \ for commands, responses, and some call\n     flows.\n   * Corrected usage of\
    \ and requirements for SDP to be strictly RFC 2327\n     compliant.\n   * Added\
    \ requirement that all MGCP implementations must support MGCP\n     datagrams\
    \ up to at least 4000 bytes.  Also added new section on\n     Maximum Datagram\
    \ Size, Fragmentation and reassembly.\n   * Generalized piggybacking retransmission\
    \ scheme to only state\n     underlying requirements to be satisfied.\n   * Clarified\
    \ the section on computing retransmission timers.\n   * Clarified operation of\
    \ long-running transactions, including\n     provisional responses, retransmissions\
    \ and failures.\n   * Enhanced description of provisional responses and interaction\
    \ with\n     three-way handshake.\n   * Enhanced description of fail-over and\
    \ the role of \"notified\n     entity\".  An empty \"notified entity\" has been\
    \ allowed, although\n     strongly discouraged.\n   * Clarified retransmission\
    \ procedure and removed \"wrong key\"\n     considerations from it.  Also fixed\
    \ inconsistencies between Max1\n     and Max2 retransmission boundaries and the\
    \ associated flow diagram.\n   * Updated domain name resolution for retransmission\
    \ procedure to\n     incur less overhead when multiple endpoints are retransmitting.\n\
    \   * Removed requirement for in-order delivery of NotificationRequests\n    \
    \ response and Notify commands.  Notify commands are still delivered\n     in-order.\n\
    \   * Clarified that activating an embedded Notification Request does not\n  \
    \   clear the list of ObservedEvents.\n   * Defined interactions between disconnected\
    \ state and notification\n     state.\n   * Added section on transactional semantics.\n\
    \   * Defined gateway behavior when multiple interacting transactions are\n  \
    \   received.\n   * Additional details provided on service states.  Clarified\n\
    \     relationship between endpoint service states, restart methods, and\n   \
    \  associated processing of commands.\n   * Clarified operation for transitioning\
    \ from \"restart procedure\" to\n     \"disconnected state\".\n   * Allowed auditing\
    \ commands and responses to bypass the \"restart\" and\n     \"disconnected\"\
    \ procedures.\n   * Clarified operation of \"disconnected procedure\" and in particular\n\
    \     the operation of piggy-backed \"disconnected\" RestartInProgress\n     messages.\n\
    \   * Added option to aggregate \"disconnected\" RestartInProgress messages\n\
    \     under certain conditions to reduce message volume.\n   * Defined additional\
    \ behavior for endpoints wishing to send commands\n     while in the \"disconnected\"\
    \ state.\n   * Added new section on Load Control in General which includes two\
    \ new\n     error codes (101 and 409) to handle overload.\n   * Deleted the \"\
    Proposed MoveConnection command\".\n   * Removed packages from protocol specification\
    \ (will be provided in\n     separate documents instead).\n   * Package concept\
    \ formally extended to be primary extension mechanism\n     now allowing extensions\
    \ for the following to be defined in packages\n     as well:\n     - BearerInformation\n\
    \     - LocalConnectionOptions\n     - ExtensionParameters\n     - Connection\
    \ Modes\n     - Actions\n     - Digit Map Letters\n     - Connection Parameters\n\
    \     - Restart Methods\n     - Reason Codes\n     - Return Codes\n   * Requirements\
    \ and suggested format for package definitions added.\n   * Defined \"operation\
    \ complete\" and \"operation failure\" events to be\n     automatically present\
    \ in packages with Time-Out signals.\n   * Deleted list of differences that were\
    \ prior to RFC 2705.\n   * Added Base Package to deal with quarantine buffer overflow,\n\
    \     ObservedEvents overflow, embedded NotificationRequest failure, and\n   \
    \  to enable events to be requested persistently.  A new \"Message\"\n     command\
    \ is included as well.\n   * IANA registration procedures for packages and other\
    \ extensions\n     added.\n   * Updated grammar to fix known errors and support\
    \ new extensions in a\n     backwards compatible manner.  Added new (optional)\
    \ PackageList and\n     MaxMGCPDatagram for auditing.  Changed explicit white\
    \ space rules\n     in some productions to make grammar more consistent.\n   *\
    \ Connection Mode interaction table added.\n   * Added additional detail on virtual\
    \ endpoint naming conventions.\n     Also added suggested gateway endpoint convention\
    \ and a \"Range\n     Wildcard\" option to the Endpoint Naming Conventions.\n"
- title: 8. Security Considerations
  contents:
  - "8. Security Considerations\n   Security issues are discussed in section 5.\n"
- title: 9. Acknowledgements
  contents:
  - "9. Acknowledgements\n   Special thanks are due to the authors of the original\
    \ MGCP 1.0\n   specification:  Mauricio Arango, Andrew Dugan, Isaac Elliott,\n\
    \   Christian Huitema, and Scott Picket.\n   We also want to thank the many reviewers\
    \ who provided advice on the\n   design of SGCP and then MGCP, notably Sankar\
    \ Ardhanari, Francois\n   Berard, David Auerbach, Bob Biskner, David Bukovinsky,\
    \ Charles Eckel,\n   Mario Edini, Ed Guy, Barry Hoffner, Jerry Kamitses, Oren\
    \ Kudevitzki,\n   Rajesh Kumar, Troy Morley, Dave Oran, Jeff Orwick, John Pickens,\
    \ Lou\n   Rubin, Chip Sharp, Paul Sijben, Kurt Steinbrenner, Joe Stone, and\n\
    \   Stuart Wray.\n   The version 0.1 of MGCP was heavily inspired by the \"Internet\n\
    \   Protocol Device Control\" (IPDC) designed by the Technical Advisory\n   Committee\
    \ set up by Level 3 Communications.  Whole sets of text were\n   retrieved from\
    \ the IP Connection Control protocol, IP Media Control\n   protocol, and IP Device\
    \ Management.  The authors wish to acknowledge\n   the contribution to these protocols\
    \ made by Ilya Akramovich, Bob\n   Bell, Dan Brendes, Peter Chung, John Clark,\
    \ Russ Dehlinger, Andrew\n   Dugan, Isaac Elliott, Cary FitzGerald, Jan Gronski,\
    \ Tom Hess, Geoff\n   Jordan, Tony Lam, Shawn Lewis, Dave Mazik, Alan Mikhak,\
    \ Pete\n   O'Connell, Scott Pickett, Shyamal Prasad, Eric Presworsky, Paul\n \
    \  Richards, Dale Skran, Louise Spergel, David Sprague, Raj Srinivasan,\n   Tom\
    \ Taylor and Michael Thomas.\n"
- title: 10. References
  contents:
  - "10. References\n   [1]  Bradner, S., \"The Internet Standards Process -- Revision\
    \ 3\", BCP\n        9, RFC 2026, October 1996.\n   [2]  Bradner, S., \"Key words\
    \ for use in RFCs to Indicate Requirement\n        Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [3]  Schulzrinne, H., Casner, S., Frederick, R. and V. Jacobson,\n\
    \        \"RTP:  A Transport Protocol for Real-Time Applications\", RFC\n    \
    \    1889, January 1996.\n   [4]  Schulzrinne, H., \"RTP Profile for Audio and\
    \ Video Conferences\n        with Minimal Control\", RFC 1890, January 1996.\n\
    \   [5]  Handley, M. and V. Jacobson, \"SDP: Session Description\n        Protocol\"\
    , RFC 2327, April 1998.\n   [6]  Handley, M., Perkins, C. and E. Whelan, \"Session\
    \ Announcement\n        Protocol\", RFC 2974, October 2000.\n   [7]  Rosenberg,\
    \ J., Camarillo, G., Johnston, A., Peterson, J.,\n        Sparks, R., Handley,\
    \ M., Schulzrinne, H. and E. Schooler,\n        \"Session Initiation Protocol\
    \ (SIP)\", RFC 3261, June 2002.\n   [8]  Schulzrinne, H., Rao, A. and R. Lanphier,\
    \ \"Real Time Streaming\n        Protocol (RTSP)\", RFC 2326, April 1998.\n  \
    \ [9]  ITU-T, Recommendation Q.761, \"FUNCTIONAL DESCRIPTION OF THE ISDN\n   \
    \     USER PART OF SIGNALING SYSTEM No. 7\", (Malaga-Torremolinos,\n        1984;\
    \ modified at Helsinki, 1993).\n   [10] ITU-T, Recommendation Q.762, \"GENERAL\
    \ FUNCTION OF MESSAGES AND\n        SIGNALS OF THE ISDN USER PART OF SIGNALING\
    \ SYSTEM No. 7\",\n        (MalagaTorremolinos, 1984; modified at Helsinki, 1993).\n\
    \   [11] ITU-T, Recommendation H.323 (02/98), \"PACKET-BASED MULTIMEDIA\n    \
    \    COMMUNICATIONS SYSTEMS\".\n   [12] ITU-T, Recommendation H.225, \"Call Signaling\
    \ Protocols and Media\n        Stream Packetization for Packet Based Multimedia\
    \ Communications\n        Systems\".\n   [13] ITU-T, Recommendation H.245 (02/98),\
    \ \"CONTROL PROTOCOL FOR\n        MULTIMEDIA COMMUNICATION\".\n   [14] Kent, S.\
    \ and R. Atkinson, \"Security Architecture for the\n        Internet Protocol\"\
    , RFC 2401, November 1998.\n   [15] Kent, S. and R. Atkinson, \"IP Authentication\
    \ Header\", RFC 2402,\n        November 1998.\n   [16] Kent, S. and R. Atkinson,\
    \ \"IP Encapsulating Security Payload\n        (ESP)\", RFC 2406, November 1998.\n\
    \   [17] Crocker, D. and P. Overell, \"Augmented BNF for Syntax\n        Specifications:\
    \ ABNF\", RFC 2234, November 1997.\n   [18] Stevens, W. Richard, \"TCP/IP Illustrated,\
    \ Volume 1, The\n        Protocols\", Addison-Wesley, 1994.\n   [19] Allman, M.,\
    \ Paxson, V. \"On Estimating End-to-End Network Path\n        Properties\", Proc.\
    \ SIGCOMM'99, 1999.\n   [20] Yergeau, F., \"UTF-8, a transformation format of\
    \ ISO 10646\", RFC\n        2279, January 1998.\n   [21] Braden, R., \"Requirements\
    \ for Internet Hosts -- Communication\n        Layers\", STD 3, RFC 1122, October\
    \ 1989.\n   [22] Bellcore, \"LSSGR: Switching System Generic Requirements for\
    \ Call\n        Control Using the Integrated Services Digital Network User Part\n\
    \        (ISDNUP)\", GR-317-CORE, Issue 2, December 1997.\n   [23] Narten, T.,\
    \ and Alvestrand H., \"Guidelines for Writing an IANA\n        Considerations\
    \ Section in RFCs\", RFC 2434, October 1998.\n"
- title: 'Appendix A: Formal Syntax Description of the Protocol'
  contents:
  - "Appendix A: Formal Syntax Description of the Protocol\n   In this section, we\
    \ provide a formal description of the protocol\n   syntax, following the \"Augmented\
    \ BNF for Syntax Specifications\"\n   defined in RFC 2234.  The syntax makes use\
    \ of the core rules defined\n   in RFC 2234, Section 6.1, which are not included\
    \ here.  Furthermore,\n   the syntax follows the case-sensitivity rules of RFC\
    \ 2234, i.e., MGCP\n   is case-insensitive (but SDP is not).  It should be noted,\
    \ that ABNF\n   does not provide for implicit specification of linear white space\
    \ and\n   MGCP messages MUST thus follow the explicit linear white space rules\n\
    \   provided in the grammar below.  However, in line with general\n   robustness\
    \ principles, implementers are strongly encouraged to\n   tolerate additional\
    \ linear white space in messages received.\n"
- title: MGCPMessage = MGCPCommand / MGCPResponse
  contents:
  - 'MGCPMessage = MGCPCommand / MGCPResponse

    '
- title: MGCPCommand = MGCPCommandLine 0*(MGCPParameter) [EOL *SDPinformation]
  contents:
  - 'MGCPCommand = MGCPCommandLine 0*(MGCPParameter) [EOL *SDPinformation]

    '
- title: MGCPCommandLine = MGCPVerb 1*(WSP) transaction-id 1*(WSP)
  contents:
  - "MGCPCommandLine = MGCPVerb 1*(WSP) transaction-id 1*(WSP)\n                 \
    \       endpointName 1*(WSP) MGCPversion EOL\n"
- title: MGCPVerb = "EPCF" / "CRCX" / "MDCX" / "DLCX" / "RQNT"
  contents:
  - "MGCPVerb = \"EPCF\" / \"CRCX\" / \"MDCX\" / \"DLCX\" / \"RQNT\"\n         / \"\
    NTFY\" / \"AUEP\" / \"AUCX\" / \"RSIP\" / extensionVerb\n"
- title: extensionVerb  = ALPHA 3(ALPHA / DIGIT) ; experimental starts with X
  contents:
  - 'extensionVerb  = ALPHA 3(ALPHA / DIGIT) ; experimental starts with X

    '
- title: transaction-id = 1*9(DIGIT)
  contents:
  - 'transaction-id = 1*9(DIGIT)

    '
- title: endpointName      = LocalEndpointName "@" DomainName
  contents:
  - 'endpointName      = LocalEndpointName "@" DomainName

    '
- title: LocalEndpointName = LocalNamePart 0*("/" LocalNamePart)
  contents:
  - 'LocalEndpointName = LocalNamePart 0*("/" LocalNamePart)

    '
- title: LocalNamePart     = AnyName / AllName / NameString
  contents:
  - 'LocalNamePart     = AnyName / AllName / NameString

    '
- title: AnyName           = "$"
  contents:
  - 'AnyName           = "$"

    '
- title: AllName           = "*"
  contents:
  - 'AllName           = "*"

    '
- title: NameString        = 1*(range-of-allowed-characters)
  contents:
  - 'NameString        = 1*(range-of-allowed-characters)

    '
- title: ; VCHAR except "$", "*", "/", "@"
  contents:
  - '; VCHAR except "$", "*", "/", "@"

    '
- title: range-of-allowed-characters  = %x21-23 / %x25-29 / %x2B-2E
  contents:
  - "range-of-allowed-characters  = %x21-23 / %x25-29 / %x2B-2E\n                \
    \             / %x30-3F / %x41-7E\n"
- title: DomainName = 1*255(ALPHA / DIGIT / "." / "-")    ; as defined
  contents:
  - "DomainName = 1*255(ALPHA / DIGIT / \".\" / \"-\")    ; as defined\n         \
    \  / \"#\" number                          ; in RFC 821\n           / \"[\" IPv4address\
    \ / IPv6address \"]\"   ; see RFC 2373\n"
- title: ; Rewritten to ABNF from RFC 821
  contents:
  - '; Rewritten to ABNF from RFC 821

    '
- title: number =  1*DIGIT
  contents:
  - 'number =  1*DIGIT

    '
- title: ;From RFC 2373
  contents:
  - ';From RFC 2373

    '
- title: IPv6address = hexpart [ ":" IPv4address ]
  contents:
  - 'IPv6address = hexpart [ ":" IPv4address ]

    '
- title: IPv4address = 1*3DIGIT "." 1*3DIGIT "." 1*3DIGIT "." 1*3DIGIT
  contents:
  - 'IPv4address = 1*3DIGIT "." 1*3DIGIT "." 1*3DIGIT "." 1*3DIGIT

    '
- title: ; this production, while occurring in RFC2373, is not referenced
  contents:
  - '; this production, while occurring in RFC2373, is not referenced

    '
- title: ; IPv6prefix  = hexpart "/" 1*2DIGIT
  contents:
  - '; IPv6prefix  = hexpart "/" 1*2DIGIT

    '
- title: hexpart = hexseq / hexseq "::" [ hexseq ] / "::" [ hexseq ]
  contents:
  - 'hexpart = hexseq / hexseq "::" [ hexseq ] / "::" [ hexseq ]

    '
- title: hexseq  = hex4 *( ":" hex4)
  contents:
  - 'hexseq  = hex4 *( ":" hex4)

    '
- title: hex4    = 1*4HEXDIG
  contents:
  - 'hex4    = 1*4HEXDIG

    '
- title: MGCPversion = "MGCP" 1*(WSP) 1*(DIGIT) "." 1*(DIGIT)
  contents:
  - "MGCPversion = \"MGCP\" 1*(WSP) 1*(DIGIT) \".\" 1*(DIGIT)\n                  \
    \          [1*(WSP) ProfileName]\n"
- title: ProfileName = VCHAR *( WSP / VCHAR)
  contents:
  - 'ProfileName = VCHAR *( WSP / VCHAR)

    '
- title: MGCPParameter = ParameterValue EOL
  contents:
  - 'MGCPParameter = ParameterValue EOL

    '
- title: ; Check infoCode if more parameter values defined
  contents:
  - '; Check infoCode if more parameter values defined

    '
- title: ; Most optional values can only be omitted when auditing
  contents:
  - '; Most optional values can only be omitted when auditing

    '
- title: ParameterValue = ("K"  ":" 0*(WSP)  [ResponseAck])
  contents:
  - "ParameterValue = (\"K\"  \":\" 0*(WSP)  [ResponseAck])\n               / (\"\
    B\"  \":\" 0*(WSP)  [BearerInformation])\n               / (\"C\"  \":\" 0*(WSP)\
    \  CallId)\n               / (\"I\"  \":\" 0*(WSP)  [ConnectionId])\n        \
    \       / (\"N\"  \":\" 0*(WSP)  [NotifiedEntity])\n               / (\"X\"  \"\
    :\" 0*(WSP)  [RequestIdentifier])\n               / (\"L\"  \":\" 0*(WSP)  [LocalConnectionOptions])\n\
    \               / (\"M\"  \":\" 0*(WSP)  ConnectionMode)\n               / (\"\
    R\"  \":\" 0*(WSP)  [RequestedEvents])\n               / (\"S\"  \":\" 0*(WSP)\
    \  [SignalRequests])\n               / (\"D\"  \":\" 0*(WSP)  [DigitMap])\n  \
    \             / (\"O\"  \":\" 0*(WSP)  [ObservedEvents])\n               / (\"\
    P\"  \":\" 0*(WSP)  [ConnectionParameters])\n               / (\"E\"  \":\" 0*(WSP)\
    \  ReasonCode)\n               / (\"Z\"  \":\" 0*(WSP)  [SpecificEndpointID])\n\
    \               / (\"Z2\" \":\" 0*(WSP)  SecondEndpointID)\n               / (\"\
    I2\" \":\" 0*(WSP)  SecondConnectionID)\n               / (\"F\"  \":\" 0*(WSP)\
    \  [RequestedInfo])\n               / (\"Q\"  \":\" 0*(WSP)  QuarantineHandling)\n\
    \               / (\"T\"  \":\" 0*(WSP)  [DetectEvents])\n               / (\"\
    RM\" \":\" 0*(WSP)  RestartMethod)\n               / (\"RD\" \":\" 0*(WSP)  RestartDelay)\n\
    \               / (\"A\"  \":\" 0*(WSP)  [Capabilities])\n               / (\"\
    ES\" \":\" 0*(WSP)  [EventStates])\n               / (\"PL\" \":\" 0*(WSP)  [PackageList])\
    \    ; Auditing only\n               / (\"MD\" \":\" 0*(WSP)  MaxMGCPDatagram)\
    \  ; Auditing only\n               / (extensionParameter \":\" 0*(WSP) [parameterString])\n"
- title: ; A final response may include an empty ResponseAck
  contents:
  - '; A final response may include an empty ResponseAck

    '
- title: ResponseAck =  confirmedTransactionIdRange
  contents:
  - "ResponseAck =  confirmedTransactionIdRange\n               *( \",\"  0*(WSP)\
    \ confirmedTransactionIdRange )\n"
- title: confirmedTransactionIdRange = transaction-id ["-" transaction-id]
  contents:
  - 'confirmedTransactionIdRange = transaction-id ["-" transaction-id]

    '
- title: BearerInformation = BearerAttribute 0*("," 0*(WSP) BearerAttribute)
  contents:
  - 'BearerInformation = BearerAttribute 0*("," 0*(WSP) BearerAttribute)

    '
- title: BearerAttribute   = ("e" ":" BearerEncoding)
  contents:
  - "BearerAttribute   = (\"e\" \":\" BearerEncoding)\n                  / (BearerExtensionName\
    \ [\":\" BearerExtensionValue])\n"
- title: BearerExtensionName  = PackageLCOExtensionName
  contents:
  - 'BearerExtensionName  = PackageLCOExtensionName

    '
- title: BearerExtensionValue = LocalOptionExtensionValue
  contents:
  - 'BearerExtensionValue = LocalOptionExtensionValue

    '
- title: BearerEncoding = "A" / "mu"
  contents:
  - 'BearerEncoding = "A" / "mu"

    '
- title: CallId = 1*32(HEXDIG)
  contents:
  - 'CallId = 1*32(HEXDIG)

    '
- title: ; The audit request response may include a list of identifiers
  contents:
  - '; The audit request response may include a list of identifiers

    '
- title: ConnectionId = 1*32(HEXDIG) 0*("," 0*(WSP) 1*32(HEXDIG))
  contents:
  - 'ConnectionId = 1*32(HEXDIG) 0*("," 0*(WSP) 1*32(HEXDIG))

    '
- title: SecondConnectionID = ConnectionId
  contents:
  - 'SecondConnectionID = ConnectionId

    '
- title: NotifiedEntity = [LocalName "@"] DomainName [":" portNumber]
  contents:
  - 'NotifiedEntity = [LocalName "@"] DomainName [":" portNumber]

    '
- title: LocalName  = LocalEndpointName            ; No internal structure
  contents:
  - 'LocalName  = LocalEndpointName            ; No internal structure

    '
- title: portNumber = 1*5(DIGIT)
  contents:
  - 'portNumber = 1*5(DIGIT)

    '
- title: RequestIdentifier = 1*32(HEXDIG)
  contents:
  - 'RequestIdentifier = 1*32(HEXDIG)

    '
- title: LocalConnectionOptions = LocalOptionValue 0*(WSP)
  contents:
  - "LocalConnectionOptions = LocalOptionValue 0*(WSP)\n                         \
    \  0*(\",\" 0*(WSP) LocalOptionValue 0*(WSP))\n"
- title: LocalOptionValue = ("p"  ":" packetizationPeriod)
  contents:
  - "LocalOptionValue = (\"p\"  \":\" packetizationPeriod)\n                 / (\"\
    a\"  \":\" compressionAlgorithm)\n                 / (\"b\"  \":\" bandwidth)\n\
    \                 / (\"e\"  \":\" echoCancellation)\n                 / (\"gc\"\
    \ \":\" gainControl)\n                 / (\"s\"  \":\" silenceSuppression)\n \
    \                / (\"t\"  \":\" typeOfService)\n                 / (\"r\"  \"\
    :\" resourceReservation)\n                 / (\"k\"  \":\" encryptiondata)\n \
    \                / (\"nt\" \":\" ( typeOfNetwork /\n                         \
    \           supportedTypeOfNetwork))\n                 / (LocalOptionExtensionName\n\
    \                         [\":\" LocalOptionExtensionValue])\n"
- title: Capabilities    =  CapabilityValue 0*(WSP)
  contents:
  - "Capabilities    =  CapabilityValue 0*(WSP)\n                     0*(\",\" 0*(WSP)\
    \ CapabilityValue 0*(WSP))\n"
- title: CapabilityValue = LocalOptionValue
  contents:
  - "CapabilityValue = LocalOptionValue\n                / (\"v\" \":\" supportedPackages)\n\
    \                / (\"m\" \":\" supportedModes)\n"
- title: PackageList     = pkgNameAndVers 0*("," pkgNameAndVers)
  contents:
  - 'PackageList     = pkgNameAndVers 0*("," pkgNameAndVers)

    '
- title: pkgNameAndVers  = packageName ":" packageVersion
  contents:
  - 'pkgNameAndVers  = packageName ":" packageVersion

    '
- title: packageVersion  = 1*(DIGIT)
  contents:
  - 'packageVersion  = 1*(DIGIT)

    '
- title: packetizationPeriod  = 1*4(DIGIT) ["-" 1*4(DIGIT)]
  contents:
  - 'packetizationPeriod  = 1*4(DIGIT) ["-" 1*4(DIGIT)]

    '
- title: compressionAlgorithm = algorithmName 0*(";" algorithmName)
  contents:
  - 'compressionAlgorithm = algorithmName 0*(";" algorithmName)

    '
- title: algorithmName        = 1*(SuitableLCOCharacter)
  contents:
  - 'algorithmName        = 1*(SuitableLCOCharacter)

    '
- title: bandwidth            = 1*4(DIGIT) ["-" 1*4(DIGIT)]
  contents:
  - 'bandwidth            = 1*4(DIGIT) ["-" 1*4(DIGIT)]

    '
- title: echoCancellation     = "on" / "off"
  contents:
  - 'echoCancellation     = "on" / "off"

    '
- title: gainControl          = "auto" / ["-"] 1*4(DIGIT)
  contents:
  - 'gainControl          = "auto" / ["-"] 1*4(DIGIT)

    '
- title: silenceSuppression   = "on" / "off"
  contents:
  - 'silenceSuppression   = "on" / "off"

    '
- title: typeOfService        = 1*2(HEXDIG)     ; 1 hex only for capabilities
  contents:
  - 'typeOfService        = 1*2(HEXDIG)     ; 1 hex only for capabilities

    '
- title: resourceReservation  = "g" / "cl" / "be"
  contents:
  - 'resourceReservation  = "g" / "cl" / "be"

    '
- title: ;encryption parameters are coded as in SDP (RFC 2327)
  contents:
  - ';encryption parameters are coded as in SDP (RFC 2327)

    '
- title: ';NOTE: encryption key may contain an algorithm as specified in RFC 1890'
  contents:
  - ';NOTE: encryption key may contain an algorithm as specified in RFC 1890

    '
- title: encryptiondata = ( "clear" ":" encryptionKey )
  contents:
  - "encryptiondata = ( \"clear\" \":\" encryptionKey )\n               / ( \"base64\"\
    \ \":\" encodedEncryptionKey )\n               / ( \"uri\" \":\" URItoObtainKey\
    \ )\n               / ( \"prompt\" ) ; defined in SDP, not usable in MGCP!\n"
- title: encryptionKey = 1*(SuitableLCOCharacter) / quotedString
  contents:
  - 'encryptionKey = 1*(SuitableLCOCharacter) / quotedString

    '
- title: ; See RFC 2045
  contents:
  - '; See RFC 2045

    '
- title: encodedEncryptionKey = 1*(ALPHA / DIGIT / "+" / "/" / "=")
  contents:
  - 'encodedEncryptionKey = 1*(ALPHA / DIGIT / "+" / "/" / "=")

    '
- title: URItoObtainKey = 1*(SuitableLCOCharacter) / quotedString
  contents:
  - 'URItoObtainKey = 1*(SuitableLCOCharacter) / quotedString

    '
- title: typeOfNetwork = "IN" / "ATM" / "LOCAL" / OtherTypeOfNetwork
  contents:
  - 'typeOfNetwork = "IN" / "ATM" / "LOCAL" / OtherTypeOfNetwork

    '
- title: ; Registered with IANA - see RFC 2327
  contents:
  - '; Registered with IANA - see RFC 2327

    '
- title: OtherTypeOfNetwork     = 1*(SuitableLCOCharacter)
  contents:
  - 'OtherTypeOfNetwork     = 1*(SuitableLCOCharacter)

    '
- title: supportedTypeOfNetwork = typeOfNetwork *(";" typeOfNetwork)
  contents:
  - 'supportedTypeOfNetwork = typeOfNetwork *(";" typeOfNetwork)

    '
- title: supportedModes    = ConnectionMode 0*(";" ConnectionMode)
  contents:
  - 'supportedModes    = ConnectionMode 0*(";" ConnectionMode)

    '
- title: supportedPackages = packageName 0*(";" packageName)
  contents:
  - 'supportedPackages = packageName 0*(";" packageName)

    '
- title: packageName = 1*(ALPHA / DIGIT / HYPHEN) ; Hyphen neither first or last
  contents:
  - 'packageName = 1*(ALPHA / DIGIT / HYPHEN) ; Hyphen neither first or last

    '
- title: LocalOptionExtensionName = VendorLCOExtensionName
  contents:
  - "LocalOptionExtensionName = VendorLCOExtensionName\n                         /\
    \ PackageLCOExtensionName\n                         / OtherLCOExtensionName\n"
- title: VendorLCOExtensionName   = "x" ("+"/"-") 1*32(SuitableExtLCOCharacter)
  contents:
  - 'VendorLCOExtensionName   = "x" ("+"/"-") 1*32(SuitableExtLCOCharacter)

    '
- title: PackageLCOExtensionName  = packageName "/"
  contents:
  - "PackageLCOExtensionName  = packageName \"/\"\n                            1*32(SuitablePkgExtLCOCharacter)\n"
- title: ; must not start with "x-" or "x+"
  contents:
  - '; must not start with "x-" or "x+"

    '
- title: OtherLCOExtensionName    = 1*32(SuitableExtLCOCharacter)
  contents:
  - 'OtherLCOExtensionName    = 1*32(SuitableExtLCOCharacter)

    '
- title: LocalOptionExtensionValue = (1*(SuitableExtLCOValChar)
  contents:
  - "LocalOptionExtensionValue = (1*(SuitableExtLCOValChar)\n                    \
    \                                / quotedString)\n                           \
    \   *(\";\" (1*(SuitableExtLCOValChar)\n                                     \
    \                 / quotedString))\n"
- title: ';Note: No "data" mode.'
  contents:
  - ';Note: No "data" mode.

    '
- title: ConnectionMode = "sendonly" / "recvonly" / "sendrecv"
  contents:
  - "ConnectionMode = \"sendonly\" / \"recvonly\" / \"sendrecv\"\n               /\
    \ \"confrnce\" / \"inactive\" / \"loopback\"\n               / \"conttest\" /\
    \ \"netwloop\" / \"netwtest\"\n               / ExtensionConnectionMode\n"
- title: ExtensionConnectionMode = PkgExtConnectionMode
  contents:
  - 'ExtensionConnectionMode = PkgExtConnectionMode

    '
- title: PkgExtConnectionMode    = packageName "/" 1*(ALPHA / DIGIT)
  contents:
  - 'PkgExtConnectionMode    = packageName "/" 1*(ALPHA / DIGIT)

    '
- title: RequestedEvents = requestedEvent 0*("," 0*(WSP) requestedEvent)
  contents:
  - 'RequestedEvents = requestedEvent 0*("," 0*(WSP) requestedEvent)

    '
- title: requestedEvent  = (eventName ["(" requestedActions ")"])
  contents:
  - "requestedEvent  = (eventName [\"(\" requestedActions \")\"])\n              \
    \  / (eventName \"(\" requestedActions \")\"\n                               \
    \        \"(\" eventParameters \")\" )\n"
- title: eventName = [(packageName / "*") "/"]
  contents:
  - "eventName = [(packageName / \"*\") \"/\"]\n                (eventId / \"all\"\
    \ / eventRange\n                                        / \"*\" / \"#\") ; for\
    \ DTMF\n                              [\"@\" (ConnectionId / \"$\" / \"*\")]\n"
- title: eventId = 1*(ALPHA / DIGIT / HYPHEN)   ; Hyphen neither first nor last
  contents:
  - 'eventId = 1*(ALPHA / DIGIT / HYPHEN)   ; Hyphen neither first nor last

    '
- title: eventRange = "[" 1*(DigitMapLetter / (DIGIT "-" DIGIT) /
  contents:
  - "eventRange = \"[\" 1*(DigitMapLetter / (DIGIT \"-\" DIGIT) /\n              \
    \          (DTMFLetter \"-\" DTMFLetter)) \"]\"\n"
- title: DTMFLetter = "A" / "B" / "C" / "D"
  contents:
  - 'DTMFLetter = "A" / "B" / "C" / "D"

    '
- title: requestedActions = requestedAction 0*("," 0*(WSP) requestedAction)
  contents:
  - 'requestedActions = requestedAction 0*("," 0*(WSP) requestedAction)

    '
- title: requestedAction  = "N" / "A" / "D" / "S" / "I" / "K"
  contents:
  - "requestedAction  = \"N\" / \"A\" / \"D\" / \"S\" / \"I\" / \"K\"\n          \
    \       / \"E\" \"(\" EmbeddedRequest \")\"\n                 / ExtensionAction\n"
- title: ExtensionAction  = PackageExtAction
  contents:
  - 'ExtensionAction  = PackageExtAction

    '
- title: PackageExtAction = packageName "/" Action ["(" ActionParameters ")"]
  contents:
  - 'PackageExtAction = packageName "/" Action ["(" ActionParameters ")"]

    '
- title: Action           = 1*ALPHA
  contents:
  - 'Action           = 1*ALPHA

    '
- title: ActionParameters = eventParameters        ; May contain actions
  contents:
  - 'ActionParameters = eventParameters        ; May contain actions

    '
- title: ';NOTE: Should tolerate different order when receiving, e.g., for NCS.'
  contents:
  - ';NOTE: Should tolerate different order when receiving, e.g., for NCS.

    '
- title: EmbeddedRequest = (      "R" "(" EmbeddedRequestList ")"
  contents:
  - "EmbeddedRequest = (      \"R\" \"(\" EmbeddedRequestList \")\"\n            \
    \        [\",\" 0*(WSP) \"S\" \"(\" EmbeddedSignalRequest \")\"]\n           \
    \         [\",\" 0*(WSP) \"D\" \"(\" EmbeddedDigitMap \")\"]      )\n        \
    \        / (      \"S\" \"(\" EmbeddedSignalRequest \")\"\n                  \
    \  [\",\" 0*(WSP) \"D\" \"(\" EmbeddedDigitMap \")\"] )\n                / ( \
    \     \"D\" \"(\" EmbeddedDigitMap \")\" )\n"
- title: EmbeddedRequestList   = RequestedEvents
  contents:
  - 'EmbeddedRequestList   = RequestedEvents

    '
- title: EmbeddedSignalRequest = SignalRequests
  contents:
  - 'EmbeddedSignalRequest = SignalRequests

    '
- title: EmbeddedDigitMap = DigitMap
  contents:
  - 'EmbeddedDigitMap = DigitMap

    '
- title: SignalRequests   = SignalRequest 0*("," 0*(WSP) SignalRequest )
  contents:
  - 'SignalRequests   = SignalRequest 0*("," 0*(WSP) SignalRequest )

    '
- title: SignalRequest    = eventName [ "(" eventParameters ")" ]
  contents:
  - 'SignalRequest    = eventName [ "(" eventParameters ")" ]

    '
- title: eventParameters  = eventParameter 0*("," 0*(WSP) eventParameter)
  contents:
  - 'eventParameters  = eventParameter 0*("," 0*(WSP) eventParameter)

    '
- title: eventParameter   = eventParameterValue
  contents:
  - "eventParameter   = eventParameterValue\n                 / eventParameterName\
    \ \"=\" eventParameter\n                 / eventParameterName \"(\" eventParameters\
    \ \")\"\n"
- title: eventParameterString = 1*(SuitableEventParamCharacter)
  contents:
  - 'eventParameterString = 1*(SuitableEventParamCharacter)

    '
- title: eventParameterName   = eventParameterString
  contents:
  - 'eventParameterName   = eventParameterString

    '
- title: eventParameterValue  = eventParameterString / quotedString
  contents:
  - 'eventParameterValue  = eventParameterString / quotedString

    '
- title: DigitMap           = DigitString  / "(" DigitStringList ")"
  contents:
  - 'DigitMap           = DigitString  / "(" DigitStringList ")"

    '
- title: DigitStringList    = DigitString 0*( "|" DigitString )
  contents:
  - 'DigitStringList    = DigitString 0*( "|" DigitString )

    '
- title: DigitString        = 1*(DigitStringElement)
  contents:
  - 'DigitString        = 1*(DigitStringElement)

    '
- title: DigitStringElement = DigitPosition ["."]
  contents:
  - 'DigitStringElement = DigitPosition ["."]

    '
- title: DigitPosition      = DigitMapLetter / DigitMapRange
  contents:
  - 'DigitPosition      = DigitMapLetter / DigitMapRange

    '
- title: ; NOTE "X" is now included
  contents:
  - '; NOTE "X" is now included

    '
- title: DigitMapLetter     = DIGIT / "#" / "*" / "A" / "B" / "C" / "D" / "T"
  contents:
  - "DigitMapLetter     = DIGIT / \"#\" / \"*\" / \"A\" / \"B\" / \"C\" / \"D\" /\
    \ \"T\"\n                   / \"X\" / ExtensionDigitMapLetter\n"
- title: ExtensionDigitMapLetter = "E" / "F" / "G" / "H" / "I" / "J" / "K"
  contents:
  - "ExtensionDigitMapLetter = \"E\" / \"F\" / \"G\" / \"H\" / \"I\" / \"J\" / \"\
    K\"\n                        / \"L\" / \"M\" / \"N\" / \"O\" / \"P\" / \"Q\" /\
    \ \"R\"\n                        / \"S\" / \"U\" / \"V\" / \"W\" / \"Y\" / \"\
    Z\"\n"
- title: ; NOTE "[x]" is now allowed
  contents:
  - '; NOTE "[x]" is now allowed

    '
- title: DigitMapRange = "[" 1*DigitLetter "]"
  contents:
  - 'DigitMapRange = "[" 1*DigitLetter "]"

    '
- title: DigitLetter   = *((DIGIT "-" DIGIT) / DigitMapLetter)
  contents:
  - 'DigitLetter   = *((DIGIT "-" DIGIT) / DigitMapLetter)

    '
- title: ObservedEvents = SignalRequests
  contents:
  - 'ObservedEvents = SignalRequests

    '
- title: EventStates    = SignalRequests
  contents:
  - 'EventStates    = SignalRequests

    '
- title: ConnectionParameters = ConnectionParameter
  contents:
  - "ConnectionParameters = ConnectionParameter\n                        0*( \",\"\
    \ 0*(WSP) ConnectionParameter )\n"
- title: ConnectionParameter  = ( "PS" "=" packetsSent )
  contents:
  - "ConnectionParameter  = ( \"PS\" \"=\" packetsSent )\n                     / (\
    \ \"OS\" \"=\" octetsSent )\n                     / ( \"PR\" \"=\" packetsReceived\
    \ )\n                     / ( \"OR\" \"=\" octetsReceived )\n                \
    \     / ( \"PL\" \"=\" packetsLost )\n                     / ( \"JI\" \"=\" jitter\
    \ )\n                     / ( \"LA\" \"=\" averageLatency )\n                \
    \     / ( ConnectionParameterExtensionName\n                              \"=\"\
    \ ConnectionParameterExtensionValue )\n"
- title: packetsSent     = 1*9(DIGIT)
  contents:
  - 'packetsSent     = 1*9(DIGIT)

    '
- title: octetsSent      = 1*9(DIGIT)
  contents:
  - 'octetsSent      = 1*9(DIGIT)

    '
- title: packetsReceived = 1*9(DIGIT)
  contents:
  - 'packetsReceived = 1*9(DIGIT)

    '
- title: octetsReceived  = 1*9(DIGIT)
  contents:
  - 'octetsReceived  = 1*9(DIGIT)

    '
- title: packetsLost     = 1*9(DIGIT)
  contents:
  - 'packetsLost     = 1*9(DIGIT)

    '
- title: jitter          = 1*9(DIGIT)
  contents:
  - 'jitter          = 1*9(DIGIT)

    '
- title: averageLatency  = 1*9(DIGIT)
  contents:
  - 'averageLatency  = 1*9(DIGIT)

    '
- title: ConnectionParameterExtensionName = VendorCPExtensionName
  contents:
  - "ConnectionParameterExtensionName = VendorCPExtensionName\n                  \
    \               /    PackageCPExtensionName\n"
- title: VendorCPExtensionName  = "X" "-" 2*ALPHA
  contents:
  - 'VendorCPExtensionName  = "X" "-" 2*ALPHA

    '
- title: PackageCPExtensionName = packageName "/" CPName
  contents:
  - 'PackageCPExtensionName = packageName "/" CPName

    '
- title: CPName = 1*(ALPHA / DIGIT / HYPHEN)
  contents:
  - 'CPName = 1*(ALPHA / DIGIT / HYPHEN)

    '
- title: ConnectionParameterExtensionValue = 1*9(DIGIT)
  contents:
  - 'ConnectionParameterExtensionValue = 1*9(DIGIT)

    '
- title: MaxMGCPDatagram = 1*9(DIGIT)
  contents:
  - 'MaxMGCPDatagram = 1*9(DIGIT)

    '
- title: ReasonCode = 3DIGIT
  contents:
  - "ReasonCode = 3DIGIT\n             [1*(WSP) \"/\" packageName]     ; Only for\
    \ 8xx\n             [WSP 1*(%x20-7E)]\n"
- title: SpecificEndpointID = endpointName
  contents:
  - 'SpecificEndpointID = endpointName

    '
- title: SecondEndpointID   = endpointName
  contents:
  - 'SecondEndpointID   = endpointName

    '
- title: RequestedInfo = infoCode 0*("," 0*(WSP) infoCode)
  contents:
  - 'RequestedInfo = infoCode 0*("," 0*(WSP) infoCode)

    '
- title: infoCode = "B" / "C" / "I" / "N" / "X" / "L" / "M" / "R" / "S"
  contents:
  - "infoCode = \"B\" / \"C\" / \"I\" / \"N\" / \"X\" / \"L\" / \"M\" / \"R\" / \"\
    S\"\n         / \"D\" / \"O\" / \"P\" / \"E\" / \"Z\" / \"Q\" / \"T\" / \"RC\"\
    \ / \"LC\"\n         / \"A\" / \"ES\" / \"RM\" / \"RD\" / \"PL\" / \"MD\" / extensionParameter\n"
- title: QuarantineHandling = loopControl / processControl
  contents:
  - "QuarantineHandling = loopControl / processControl\n                   / (loopControl\
    \ \",\" 0*(WSP) processControl )\n"
- title: loopControl    = "step" / "loop"
  contents:
  - 'loopControl    = "step" / "loop"

    '
- title: processControl = "process" / "discard"
  contents:
  - 'processControl = "process" / "discard"

    '
- title: DetectEvents = SignalRequests
  contents:
  - 'DetectEvents = SignalRequests

    '
- title: RestartMethod = "graceful" / "forced" / "restart" / "disconnected"
  contents:
  - "RestartMethod = \"graceful\" / \"forced\" / \"restart\" / \"disconnected\"\n\
    \              / \"cancel-graceful\" / extensionRestartMethod\n"
- title: extensionRestartMethod = PackageExtensionRM
  contents:
  - 'extensionRestartMethod = PackageExtensionRM

    '
- title: PackageExtensionRM     = packageName "/" 1*32(ALPHA / DIGIT / HYPHEN)
  contents:
  - 'PackageExtensionRM     = packageName "/" 1*32(ALPHA / DIGIT / HYPHEN)

    '
- title: RestartDelay = 1*6(DIGIT)
  contents:
  - 'RestartDelay = 1*6(DIGIT)

    '
- title: extensionParameter = VendorExtensionParameter
  contents:
  - "extensionParameter = VendorExtensionParameter\n                   / PackageExtensionParameter\n\
    \                   / OtherExtensionParameter\n"
- title: VendorExtensionParameter  = "X" ("-"/"+") 1*6(ALPHA / DIGIT)
  contents:
  - 'VendorExtensionParameter  = "X" ("-"/"+") 1*6(ALPHA / DIGIT)

    '
- title: PackageExtensionParameter = packageName "/"
  contents:
  - "PackageExtensionParameter = packageName \"/\"\n                            1*32(ALPHA\
    \ / DIGIT / HYPHEN)\n"
- title: ; must not start with "x-" or x+"
  contents:
  - '; must not start with "x-" or x+"

    '
- title: OtherExtensionParameter   = 1*32(ALPHA / DIGIT / HYPHEN)
  contents:
  - 'OtherExtensionParameter   = 1*32(ALPHA / DIGIT / HYPHEN)

    '
- title: ;If first character is a double-quote, then it is a quoted-string
  contents:
  - ';If first character is a double-quote, then it is a quoted-string

    '
- title: parameterString = (%x21 / %x23-7F) *(%x20-7F) ; first and last must not
  contents:
  - "parameterString = (%x21 / %x23-7F) *(%x20-7F) ; first and last must not\n   \
    \                                           ; be white space\n               \
    \     / quotedString\n"
- title: MGCPResponse = MGCPResponseLine 0*(MGCPParameter)
  contents:
  - "MGCPResponse = MGCPResponseLine 0*(MGCPParameter)\n                         \
    \               *2(EOL *SDPinformation)\n"
- title: MGCPResponseLine = responseCode 1*(WSP) transaction-id
  contents:
  - "MGCPResponseLine = responseCode 1*(WSP) transaction-id\n                    \
    \    [1*(WSP) \"/\" packageName]    ; Only for 8xx\n                         \
    \    [WSP responseString] EOL\n"
- title: responseCode = 3DIGIT
  contents:
  - 'responseCode = 3DIGIT

    '
- title: responseString = *(%x20-7E)
  contents:
  - 'responseString = *(%x20-7E)

    '
- title: SuitablePkgExtLCOCharacter =  SuitableLCOCharacter
  contents:
  - 'SuitablePkgExtLCOCharacter =  SuitableLCOCharacter

    '
- title: SuitableExtLCOCharacter = DIGIT / ALPHA / "+" / "-" / "_" / "&"
  contents:
  - "SuitableExtLCOCharacter = DIGIT / ALPHA / \"+\" / \"-\" / \"_\" / \"&\"\n   \
    \           / \"!\" / \"'\" / \"|\" / \"=\" / \"#\" / \"?\"\n              / \"\
    .\" / \"$\" / \"*\" /       \"@\" / \"[\" / \"]\"\n              / \"^\" / \"\
    `\" / \"{\" / \"}\" / \"~\"\n"
- title: SuitableLCOCharacter   = SuitableExtLCOCharacter / "/"
  contents:
  - 'SuitableLCOCharacter   = SuitableExtLCOCharacter / "/"

    '
- title: SuitableExtLCOValChar  = SuitableLCOCharacter / ":"
  contents:
  - 'SuitableExtLCOValChar  = SuitableLCOCharacter / ":"

    '
- title: ; VCHAR except """, "(", ")", ",", and "="
  contents:
  - '; VCHAR except """, "(", ")", ",", and "="

    '
- title: SuitableEventParamCharacter = %x21 / %x23-27 / %x2A-2B
  contents:
  - "SuitableEventParamCharacter = %x21 / %x23-27 / %x2A-2B\n                    \
    \        / %x2D-3C / %x3E-7E\n"
- title: '; NOTE: UTF8 encoded'
  contents:
  - '; NOTE: UTF8 encoded

    '
- title: quotedString  = DQUOTE 0*(quoteEscape / quoteChar) DQUOTE
  contents:
  - 'quotedString  = DQUOTE 0*(quoteEscape / quoteChar) DQUOTE

    '
- title: quoteEscape   = DQUOTE DQUOTE
  contents:
  - 'quoteEscape   = DQUOTE DQUOTE

    '
- title: quoteChar = (%x00-21 / %x23-FF)
  contents:
  - 'quoteChar = (%x00-21 / %x23-FF)

    '
- title: EOL = CRLF / LF
  contents:
  - 'EOL = CRLF / LF

    '
- title: HYPHEN = "-"
  contents:
  - 'HYPHEN = "-"

    '
- title: ; See RFC 2327 for proper SDP grammar instead.
  contents:
  - '; See RFC 2327 for proper SDP grammar instead.

    '
- title: SDPinformation = SDPLine CRLF *(SDPLine CRLF)        ; see RFC 2327
  contents:
  - 'SDPinformation = SDPLine CRLF *(SDPLine CRLF)        ; see RFC 2327

    '
- title: SDPLine        = 1*(%x01-09 / %x0B / %x0C / %x0E-FF) ; for proper def.
  contents:
  - 'SDPLine        = 1*(%x01-09 / %x0B / %x0C / %x0E-FF) ; for proper def.

    '
- title: 'Appendix B: Base Package'
  contents:
  - "Appendix B: Base Package\n   Package name: B\n   Version: 0\n   The MGCP specification\
    \ defines a base package which contains a set of\n   events and extension parameters\
    \ that are of general use to the\n   protocol.  Although not required, it is highly\
    \ RECOMMENDED to support\n   this package as it provides important functionality\
    \ for the base\n   protocol.\n"
- title: B.1 Events
  contents:
  - "B.1 Events\n   The table below lists the events:\n    ------------------------------------------------------------------\n\
    \   | Symbol  |   Definition               |  R  |   S     Duration    |\n   |---------|----------------------------|-----|---------------------|\n\
    \   | enf(##) | embedded RQNT failure      |  x  |                     |\n   |\
    \ oef     | observed events full       |  x  |                     |\n   | qbo\
    \     | quarantine buffer overflow |  x  |                     |\n    ------------------------------------------------------------------\n\
    \   The events are defined as follows:\n   Embedded NotificationRequest failure\
    \ (enf):\n     The Embedded NotificationRequest Failure (enf) event is generated\n\
    \     when an embedded Notification Request failure occurs.  When the\n     event\
    \ is requested, it should be as part of the Embedded\n     NotificationRequest\
    \ itself.  When the event is reported, it may be\n     parameterized with an error\
    \ code (see Section 2.4) detailing the\n     error that occurred.  When requested,\
    \ it cannot be parameterized.\n   Observed events full (oef):\n     The event\
    \ is generated when the endpoint is unable to accumulate\n     any more events\
    \ in the list of ObservedEvents.  If this event\n     occurs, and it is not used\
    \ to trigger a Notify, subsequent events\n     that should have been added to\
    \ the list will be lost.\n   Quarantine buffer overflow (qbo):\n     The event\
    \ is generated when the quarantine buffer overflows and one\n     or more events\
    \ have been lost.\n"
- title: B.2 Extension Parameters
  contents:
  - 'B.2 Extension Parameters

    '
- title: B.2.1 PersistentEvents
  contents:
  - "B.2.1 PersistentEvents\n   PersistentEvents:  A list of events that the gateway\
    \ is requested to\n   detect and report persistently.  The parameter is optional\
    \ but can be\n   provided in any command where the DetectEvents parameter can\
    \ be\n   provided.  The initial default value of the parameter is empty.  When\n\
    \   the parameter is omitted from a command, it retains its current\n   value.\
    \  When the parameter is provided, it completely replaces the\n   current value.\
    \  Providing an event in this list, is similar (but\n   preferable) to defining\
    \ that particular event as being persistent.\n   The current list of PersistentEvents\
    \ will implicitly apply to the\n   current as well as subsequent NotificationRequests,\
    \ however no glare\n   detection etc. will be performed (similarly to DetectEvents).\
    \  If an\n   event provided in this list is included in a RequestedEvents list,\n\
    \   the action and event parameters used in the RequestedEvents will\n   replace\
    \ the action and event parameters associated with the event in\n   the PersistentEvents\
    \ list for the life of the RequestedEvents list,\n   after which the PersistentEvents\
    \ action and event parameters are\n   restored.  Events with event states requested\
    \ through this parameter\n   will be included in the list of EventStates if audited.\n\
    \   PersistentEvents can also be used to detect events on connections.\n   Use\
    \ of the \"all connections\" wildcard is straightforward, whereas\n   using PersistentEvents\
    \ with one or more specific connections must be\n   considered carefully.  Once\
    \ the connection in question is deleted, a\n   subsequent NotificationRequest\
    \ without a new PersistentEvents value\n   will fail (error code 515 - incorrect\
    \ connection-id, is RECOMMENDED),\n   as it implicitly refers to the deleted connection.\n\
    \   The parameter generates the relevant error codes from the base\n   protocol,\
    \ e.g., error code 512 if an unknown event is specified.\n   The PersistentEvents\
    \ parameter can be audited, in which case it will\n   return its current value.\
    \  Auditing of RequestedEvents is not\n   affected by this extension, i.e., events\
    \ specified in this list are\n   not automatically reported when auditing RequestedEvents.\n\
    \   The parameter name for PersistentEvents is \"PR\" and it is defined by\n \
    \  the production:\n     PersistentEvents = \"PR\" \":\" 0*WSP  [RequestedEvents]\n\
    \   The following example illustrates the use of the parameter:\n     B/PR: L/hd(N),\
    \ L/hf(N), L/hu(N), B/enf, B/oef, B/qbo\n   which instructs the endpoint to persistently\
    \ detect and report off-\n   hook, hook-flash, and on-hook.  It also instructs\
    \ the endpoint to\n   persistently detect and report Embedded Notification Request\
    \ failure,\n   Observed events full, and Quarantine buffer overflow.\n"
- title: B.2.2 NotificationState
  contents:
  - "B.2.2 NotificationState\n   NotificationState is a RequestedInfo parameter that\
    \ can be audited\n   with the AuditEndpoint command.  It can be used to determine\
    \ if the\n   endpoint is in the notification state or not.\n   The parameter is\
    \ forbidden in any command.  In responses, it is a\n   valid response parameter\
    \ for AuditEndpoint only.\n   It is defined by the following grammar:\n     NotificationState\
    \        = \"NS\" \":\" 0*WSP NotificationStateValue\n     NotificationStateValue\
    \   = \"ns\" / \"ls\" / \"o\"\n   It is requested as part of auditing by including\
    \ the parameter code\n   in RequestedInfo, as in:\n     F: B/NS\n   The response\
    \ parameter will contain the value \"ns\" if the endpoint is\n   in the \"notification\
    \ state\", the value \"ls\" if the endpoint is in the\n   \"lockstep state\" (i.e.,\
    \ waiting for an RQNT after a response to a\n   NTFY has been received when operating\
    \ in \"step\" mode), or the value\n   \"o\" otherwise, as for example:\n     B/NS:\
    \ ns\n"
- title: B.3 Verbs
  contents:
  - "B.3 Verbs\n   MGCP packages are not intended to define new commands, however\
    \ an\n   exception is made in this case in order to add an important general\n\
    \   capability currently missing, namely the ability for the gateway to\n   send\
    \ a generic message to the Call Agent.\n   The definition of the new command is:\n\
    \          ReturnCode\n          <-- Message(EndpointId\n                    \
    \     [, ...])\n   EndpointId is the name for the endpoint(s) in the gateway which\
    \ is\n   issuing the Message command.  The identifier MUST be a fully\n   qualified\
    \ endpoint identifier, including the domain name of the\n   gateway.  The local\
    \ part of the endpoint name MUST NOT use the \"any\n   of\" wildcard.\n   The\
    \ only parameter specified in the definition of the Message command\n   is the\
    \ EndpointId, however, it is envisioned that extensions will\n   define additional\
    \ parameters to be used with the Message command.\n   Such extensions MUST NOT\
    \ alter or otherwise interfere with the normal\n   operation of the basic MGCP\
    \ protocol.  They may however define\n   additional capabilities above and beyond\
    \ that provided by the basic\n   MGCP protocol.  For example, an extension to\
    \ enable the gateway to\n   audit the packages supported by the Call Agent could\
    \ be defined,\n   whereas using the Message command as an alternative way of reporting\n\
    \   observed events would be illegal, as that would alter the normal MGCP\n  \
    \ protocol behavior.\n   In order to not interfere with normal MGCP operation,\
    \ lack of a\n   response to the Message command MUST NOT lead the endpoint to\
    \ become\n   disconnected.  The endpoint(s) MUST be prepared to handle this\n\
    \   transparently and continue normal processing unaffected.\n   If the endpoint(s)\
    \ receive a response indicating that the Call Agent\n   does not support the Message\
    \ command, the endpoint(s) MUST NOT send a\n   Message command again until the\
    \ current \"notified entity\" has\n   changed.  Similarly, if the endpoint(s)\
    \ receive a response indicating\n   that the Call Agent does not support one or\
    \ more parameters in the\n   Message command, the endpoint(s) MUST NOT send a\
    \ Message command with\n   those parameters again until the current \"notified\
    \ entity\" has\n   changed.\n   The Message command is encoded as MESG, as shown\
    \ in the following\n   example:\n      MESG 1200 aaln/1@rgw.whatever.net MGCP\
    \ 1.0\n"
- title: 'Appendix C: IANA Considerations'
  contents:
  - 'Appendix C: IANA Considerations

    '
- title: C.1 New MGCP Package Sub-Registry
  contents:
  - "C.1 New MGCP Package Sub-Registry\n   The IANA has established a new sub-registry\
    \ for MGCP packages under\n   http://www.iana.org/assignments/mgcp-packages.\n\
    \   Packages can be registered with the IANA according to the following\n   procedure:\n\
    \   The package MUST have a unique string name which MUST NOT start with\n   the\
    \ two characters \"x-\" or \"x+\".\n   The package title, name, and version (zero\
    \ assumed by default) MUST\n   be registered with IANA as well as a reference\
    \ to the document that\n   describes the package.  The document MUST have a stable\
    \ URL and MUST\n   be contained on a public web server.\n   Packages may define\
    \ one or more Extension Digit Map Letters, however\n   these are taken from a\
    \ limited and flat name space.  To prevent name\n   clashing, IANA SHALL NOT register\
    \ a package that defines an Extension\n   Digit Map Letter already defined in\
    \ another package registered by\n   IANA.  To ease this task, such packages SHALL\
    \ contain the line\n   \"Extension Digit Map Letters:  \" followed by a list of\
    \ the Extension\n   Digit Map Letters defined in the package at the beginning\
    \ of the\n   package definition.\n   A contact name, e-mail and postal address\
    \ for the package MUST be\n   provided.  The contact information SHALL be updated\
    \ by the defining\n   organization as necessary.\n   Finally, prior to registering\
    \ a package, the IANA MUST have a\n   designated expert [23] review the package.\
    \ The expert reviewer will\n   send e-mail to the IANA on the overall review determination.\n"
- title: C.2 New MGCP Package
  contents:
  - "C.2 New MGCP Package\n   This document defines a new MGCP Base Package in Appendix\
    \ B, which\n   has been registered by IANA.\n"
- title: C.3 New MGCP LocalConnectionOptions Sub-Registry
  contents:
  - "C.3 New MGCP LocalConnectionOptions Sub-Registry\n   The IANA has established\
    \ a new sub-registry for MGCP\n   LocalConnectionOptions under http://www.iana.org/assignments/mgcp-\n\
    \   localconnectionoptions.\n   Packages are the preferred extension mechanism,\
    \ however for backwards\n   compatibility, local connection options beyond those\
    \ provided in this\n   specification can be registered with IANA.  Each such local\n\
    \   connection option MUST have a unique string name which MUST NOT start\n  \
    \ with \"x-\" or \"x+\".  The local connection option field name and\n   encoding\
    \ name MUST be registered with IANA as well as a reference to\n   the document\
    \ that describes the local connection option.  The\n   document MUST have a stable\
    \ URL and MUST be contained on a public web\n   server.\n   A contact name, e-mail\
    \ and postal address for the local connection\n   option MUST be provided.  The\
    \ contact information SHALL be updated by\n   the defining organization as necessary.\n\
    \   Finally, prior to registering a LocalConnectionOption, the IANA MUST\n   have\
    \ a designated expert [23] review the LocalConnectionOption. The\n   expert reviewer\
    \ will send e-mail to the IANA on the overall review\n   determination.\n"
- title: 'Appendix D: Mode Interactions'
  contents:
  - "Appendix D: Mode Interactions\n   An MGCP endpoint can establish one or more\
    \ media streams.  These\n   streams are either incoming (from a remote endpoint)\
    \ or outgoing\n   (generated at the handset microphone).  The \"connection mode\"\
    \n   parameter establishes the direction and generation of these streams.\n  \
    \ When there is only one connection to an endpoint, the mapping of\n   these streams\
    \ is straightforward; the handset plays the incoming\n   stream over the handset\
    \ speaker and generates the outgoing stream\n   from the handset microphone signal,\
    \ depending on the mode parameter.\n   However, when several connections are established\
    \ to an endpoint,\n   there can be many incoming and outgoing streams.  Depending\
    \ on the\n   connection mode used, these streams may interact differently with\n\
    \   each other and the streams going to/from the handset.\n   The table below\
    \ describes how different connections SHALL be mixed\n   when one or more connections\
    \ are concurrently \"active\".  An active\n   connection is here defined as a\
    \ connection that is in one of the\n   following modes:\n   *  \"send/receive\"\
    \n   *  \"send only\"\n   *  \"receive only\"\n   *  \"conference\"\n   Connections\
    \ in \"network loopback\", \"network continuity test\", or\n   \"inactive\" modes\
    \ are not affected by connections in the \"active\"\n   modes.  The Table uses\
    \ the following conventions:\n   *  Ai is the incoming media stream from Connection\
    \ A\n   *  Bi is the incoming media stream from Connection B\n   *  Hi is the\
    \ incoming media stream from the Handset Microphone\n   *  Ao is the outgoing\
    \ media stream to Connection A\n   *  Bo is the outgoing media stream to Connection\
    \ B\n   *  Ho is the outgoing media stream to the Handset earpiece\n   *  NA indicates\
    \ no stream whatsoever (assuming there are no signals\n      applied on the connection)\n\
    \   \"netw\" in the following table indicates either \"netwloop\" or\n   \"netwtest\"\
    \ mode.\n     -------------------------------------------------------------\n\
    \    |       |               Connection A Mode                     |\n    |  \
    \     |-----------------------------------------------------\n    |       |sendonly|recvonly|sendrecv|confrnce|inactive|\
    \  netw  |\n    |-------|-----------------------------------------------------|\n\
    \    | |Send | Ao=Hi  | Ao=NA  | Ao=Hi  | Ao=Hi  | Ao=NA  | Ao=Ai  |\n    |C|only\
    \ | Bo=Hi  | Bo=Hi  | Bo=Hi  | Bo=Hi  | Bo=Hi  | Bo=Hi  |\n    |o|     | Ho=NA\
    \  | Ho=Ai  | Ho=Ai  | Ho=Ai  | Ho=NA  | Ho=NA  |\n    |n|-----------------------------------------------------------\n\
    \    |n|recv |        |Ao=NA   |Ao=Hi   |Ao=Hi   | Ao=NA  | Ao=Ai  |\n    |e|only\
    \ |        |Bo=NA   |Bo=NA   |Bo=NA   | Bo=NA  | Bo=NA  |\n    |c|     |     \
    \   |Ho=Ai+Bi|Ho=Ai+Bi|Ho=Ai+Bi| Ho=Bi  | Ho=Bi  |\n    |t|-----------------------------------------------------------|\n\
    \    |i|send |        |        |Ao=Hi   |Ao=Hi   | Ao=NA  | Ao=Ai  |\n    |o|recv\
    \ |        |        |Bo=Hi   |Bo=Hi   | Bo=Hi  | Bo=Hi  |\n    |n|     |     \
    \   |        |Ho=Ai+Bi|Ho=Ai+Bi| Ho=Bi  | Ho=Bi  |\n    | |-----------------------------------------------------------|\n\
    \    |B|conf |        |        |        |Ao=Hi+Bi| Ao=NA  | Ao=Ai  |\n    | |rnce\
    \ |        |        |        |Bo=Hi+Ai| Bo=Hi  | Bo=Hi  |\n    |M|     |     \
    \   |        |        |Ho=Ai+Bi| Ho=Bi  | Ho=Bi  |\n    |o|-----------------------------------------------------------|\n\
    \    |d|Inac |        |        |        |        | Ao=NA  | Ao=Ai  |\n    |e|tive\
    \ |        |        |        |        | Bo=NA  | Bo=NA  |\n    | |     |     \
    \   |        |        |        | Ho=NA  | Ho=NA  |\n    | |-----------------------------------------------------------|\n\
    \    | |netw |        |        |        |        |        | Ao=Ai  |\n    | |\
    \     |        |        |        |        |        | Bo=Bi  |\n    | |     | \
    \       |        |        |        |        | Ho=NA  |\n     -------------------------------------------------------------\n\
    \   If there are three or more \"active\" connections they will still\n   interact\
    \ as defined in the table above with the outgoing media\n   streams mixed for\
    \ each interaction (union of all streams).  If\n   internal resources are used\
    \ up and the streams cannot be mixed, the\n   gateway MUST return an error (error\
    \ code 403 or 502, not enough\n   resources, are RECOMMENDED).\n"
- title: 'Appendix E: Endpoint Naming Conventions'
  contents:
  - "Appendix E: Endpoint Naming Conventions\n   The following sections provide some\
    \ RECOMMENDED endpoint naming\n   conventions.\n"
- title: E.1 Analog Access Line Endpoints
  contents:
  - "E.1 Analog Access Line Endpoints\n   The string \"aaln\", should be used as the\
    \ first term in a local\n   endpoint name for analog access line endpoints.  Terms\
    \ following\n   \"aaln\" should follow the physical hierarchy of the gateway so\
    \ that if\n   the gateway has a number of RJ11 ports, the local endpoint name\
    \ could\n   look like the following:\n      aaln/#\n   where \"#\" is the number\
    \ of the analog line (RJ11 port) on the\n   gateway.\n   On the other hand, the\
    \ gateway may have a number of physical plug-in\n   units, each of which contain\
    \ some number of RJ11 ports, in which\n   case, the local endpoint name might\
    \ look like the following:\n      aaln/<unit #>/#\n   where <unit #> is the number\
    \ of the plug in unit in the gateway and\n   \"#\" is the number of the analog\
    \ line (RJ11 port) on that unit.\n   Leading zeroes MUST NOT be used in any of\
    \ the numbers (\"#\") above.\n"
- title: E.2 Digital Trunks
  contents:
  - "E.2 Digital Trunks\n   The string \"ds\" should be used for the first term of\
    \ digital\n   endpoints with a naming convention that follows the physical and\n\
    \   digital hierarchy such as:\n      ds/<unit-type1>-<unit #>/<unit-type2>-<unit\
    \ #>/.../<channel #>\n   where:  <unit-type> identifies the particular hierarchy\
    \ level.  Some\n   example values of <unit-type> are:  \"s\", \"su\", \"oc3\"\
    , \"ds3\", \"e3\",\n   \"ds2\", \"e2\", \"ds1\", \"e1\" where \"s\" indicates\
    \ a slot number and \"su\"\n   indicates a sub-unit within a slot.  Leading zeroes\
    \ MUST NOT be used\n   in any of the numbers (\"#\") above.\n   The <unit #> is\
    \ a decimal number which is used to reference a\n   particular instance of a <unit-type>\
    \ at that level of the hierarchy.\n   The number of levels and naming of those\
    \ levels is based on the\n   physical hierarchy within the media gateway.\n"
- title: E.3 Virtual Endpoints
  contents:
  - "E.3 Virtual Endpoints\n   Another type of endpoint is one that is not associated\
    \ with a\n   physical interface (such as an analog or digital endpoint).  This\n\
    \   type of endpoint is called a virtual endpoint and is often used to\n   represent\
    \ some DSP resources that gives the endpoint some capability.\n   Examples are\
    \ announcement, IVR or conference bridge devices.  These\n   devices may have\
    \ multiple instances of DSP functions so that a\n   possible naming convention\
    \ is:\n      <virtual-endpoint-type>/<endpoint-#>\n   where <virtual-endpoint-type>\
    \ may be some string representing the\n   type of endpoint (such as \"ann\" for\
    \ announcement server or \"cnf\" for\n   conference server) and <endpoint-#> would\
    \ identify a particular\n   virtual endpoint within the device.  Leading zeroes\
    \ MUST NOT be used\n   in the number (\"#\") above.  If the physical hierarchy\
    \ of the server\n   includes plug-in DSP cards, another level of hierarchy in\
    \ the local\n   endpoint name may be used to describe the plug in unit.\n   A\
    \ virtual endpoint may be created as the result of using the \"any of\"\n   wildcard.\
    \  Similarly, a virtual endpoint may cease to exist once the\n   last connection\
    \ on the virtual endpoint is deleted.  The definition\n   of the virtual endpoint\
    \ MUST detail both of these aspects.\n   When a <virtual-endpoint-type> creates\
    \ and deletes virtual endpoints\n   automatically, there will be cases where no\
    \ virtual endpoints exist\n   at the time a RestartInProgress command is to be\
    \ issued.  In such\n   cases, the gateway SHOULD simply use the \"all of\" wildcard\
    \ in lieu of\n   any specific <endpoint-#> as in, e.g.:\n     ann/*@mygateway.whatever.net\n\
    \   If the RestartInProgress command refers to all endpoints in the\n   gateway\
    \ (virtual or not), the <virtual-endpoint-id> can be omitted as\n   in, e.g.:\n\
    \     *@mygateway.whatever.net\n   Commands received by the gateway will still\
    \ have to refer to an\n   actual endpoint (possibly created by that command by\
    \ use of the \"any\n   of\" wildcard) in order for the command to be processed\
    \ though.\n"
- title: E.4 Media Gateway
  contents:
  - "E.4 Media Gateway\n   MGCP only defines operation on endpoints in a media gateway.\
    \  It may\n   be beneficial to define an endpoint that represents the gateway\n\
    \   itself as opposed to the endpoints managed by the gateway.\n   Implementations\
    \ that wish to do so should use the local endpoint name\n   \"mg\" (for media\
    \ gateway) as in:\n     mg@mygateway.whatever.net\n   Note that defining such\
    \ an endpoint does not change any of the\n   protocol semantics, i.e., the \"\
    mg\" endpoint and other endpoints\n   (e.g., digital trunks) in the gateway are\
    \ still independent endpoints\n   and MUST be treated as such.  For example, RestartInProgress\
    \ commands\n   MUST still be issued for all endpoints in the gateway as usual.\n"
- title: E.5 Range Wildcards
  contents:
  - "E.5 Range Wildcards\n   As described in Section 2.1.2, the MGCP endpoint naming\
    \ scheme\n   defines the \"all of\" and \"any of\" wildcards for the individual\
    \ terms\n   in a local endpoint name.  While the \"all of\" wildcard is very useful\n\
    \   for reducing the number of messages, it can by definition only be\n   used\
    \ when we wish to refer to all instances of a given term in the\n   local endpoint\
    \ name.  Furthermore, in the case where a command is to\n   be sent by the gateway\
    \ to the Call Agent, the \"all of\" wildcard can\n   only be used if all of the\
    \ endpoints named by it have the same\n   \"notified entity\".  Implementations\
    \ that prefer a finer-grained\n   wildcarding scheme can use the range wildcarding\
    \ scheme described\n   here.\n   A range wildcard is defined as follows:\n   RangeWildcard\
    \    = \"[\" NumericalRange *( \",\" NumericalRange ) \"]\"\n   NumericalRange\
    \   = 1*(DIGIT) [ \"-\" 1*(DIGIT) ]\n   Note that white space is not permitted.\
    \  Also, since range wildcards\n   use the character \"[\" to indicate the start\
    \ of a range, the \"[\"\n   character MUST NOT be used in endpoint names that\
    \ use range\n   wildcards.  The length of a range wildcard SHOULD be bounded to\
    \ a\n   reasonably small value, e.g., 128 characters.\n   Range wildcards can\
    \ be used anywhere an \"all of\" wildcard can be\n   used.  The semantics are\
    \ identical for the endpoints named.  However,\n   it MUST be noted, that use\
    \ of the range wildcarding scheme requires\n   support on both the gateway and\
    \ the Call Agent.  Therefore, a gateway\n   MUST NOT assume that it's Call Agent\
    \ supports range wildcarding and\n   vice versa.  In practice, this typically\
    \ means that both the gateway\n   and Call Agent will need to be provisioned consistently\
    \ in order to\n   use range wildcards.  Also, if a gateway or Call Agent using\
    \ range\n   wildcards receives an error response that could indicate a possible\n\
    \   endpoint naming problem, they MUST be able to automatically revert to\n  \
    \ not using range wildcards.\n   The following examples illustrates the use of\
    \ range wildcards:\n      ds/ds1-1/[1-12]\n      ds/ds1-1/[1,3,20-24]\n      ds/ds1-[1-2]/*\n\
    \      ds/ds3-1/[1-96]\n   The following example illustrates how to use it in\
    \ a command:\n      RSIP 1204 ds/ds3-1/[1-96]@tgw-18.whatever.net MGCP 1.0\n \
    \     RM: restart\n      RD: 0\n"
- title: 'Appendix F: Example Command Encodings'
  contents:
  - "Appendix F: Example Command Encodings\n   This appendix provides examples of\
    \ commands and responses shown with\n   the actual encoding used.  Examples are\
    \ provided for each command.\n   All commentary shown in the commands and responses\
    \ is optional.\n"
- title: F.1 NotificationRequest
  contents:
  - "F.1 NotificationRequest\n   The first example illustrates a NotificationRequest\
    \ that will ring a\n   phone and look for an off-hook event:\n      RQNT 1201\
    \ aaln/1@rgw-2567.whatever.net MGCP 1.0\n      N: ca@ca1.whatever.net:5678\n \
    \     X: 0123456789AC\n      R: l/hd(N)\n      S: l/rg\n   The response indicates\
    \ that the transaction was successful:\n      200 1201 OK\n   The second example\
    \ illustrates a NotificationRequest that will look\n   for and accumulate an off-hook\
    \ event, and then provide dial-tone and\n   accumulate digits according to the\
    \ digit map provided.  The \"notified\n   entity\" is set to \"ca@ca1.whatever.net:5678\"\
    , and since the\n   SignalRequests parameter is empty (it could have been omitted\
    \ as\n   well), all currently active TO signals will be stopped.  All events\n\
    \   in the quarantine buffer will be processed, and the list of events to\n  \
    \ detect in the \"notification\" state will include fax tones in addition\n  \
    \ to the \"requested events\" and persistent events:\n      RQNT 1202 aaln/1@rgw-2567.whatever.net\
    \ MGCP 1.0\n      N: ca@ca1.whatever.net:5678\n      X: 0123456789AC\n      R:\
    \ L/hd(A, E(S(L/dl),R(L/oc, L/hu, D/[0-9#*T](D))))\n      D: (0T|00T|#xxxxxxx|*xx|91xxxxxxxxxx|9011x.T)\n\
    \      S:\n      Q: process\n      T: G/ft\n   The response indicates that the\
    \ transaction was successful:\n      200 1202 OK\n"
- title: F.2 Notify
  contents:
  - "F.2 Notify\n   The example below illustrates a Notify message that notifies an\
    \ off-\n   hook event followed by a 12-digit number beginning with \"91\".  A\n\
    \   transaction identifier correlating the Notify with the\n   NotificationRequest\
    \ it results from is included.  The command is sent\n   to the current \"notified\
    \ entity\", which typically will be the actual\n   value supplied in the NotifiedEntity\
    \ parameter, i.e.,\n   \"ca@ca1.whatever.net:5678\" - a failover situation could\
    \ have changed\n   this:\n      NTFY 2002 aaln/1@rgw-2567.whatever.net MGCP 1.0\n\
    \      N: ca@ca1.whatever.net:5678\n      X: 0123456789AC\n      O: L/hd,D/9,D/1,D/2,D/0,D/1,D/8,D/2,D/9,D/4,D/2,D/6,D/6\n\
    \   The Notify response indicates that the transaction was successful:\n     \
    \ 200 2002 OK\n"
- title: F.3 CreateConnection
  contents:
  - "F.3 CreateConnection\n   The first example illustrates a CreateConnection command\
    \ to create a\n   connection on the endpoint specified.  The connection will be\
    \ part of\n   the specified CallId.  The LocalConnectionOptions specify that G.711\n\
    \   mu-law will be the codec used and the packetization period will be 10\n  \
    \ ms.  The connection mode will be \"receive only\":\n      CRCX 1204 aaln/1@rgw-2567.whatever.net\
    \ MGCP 1.0\n      C: A3C47F21456789F0\n      L: p:10, a:PCMU\n      M: recvonly\n\
    \   The response indicates that the transaction was successful, and a\n   connection\
    \ identifier for the newly created connection is therefore\n   included.  A session\
    \ description for the new connection is included\n   as well - note that it is\
    \ preceded by an empty line.\n      200 1204 OK\n      I: FDE234C8\n      v=0\n\
    \      o=- 25678 753849 IN IP4 128.96.41.1\n      s=-\n      c=IN IP4 128.96.41.1\n\
    \      t=0 0\n      m=audio 3456 RTP/AVP 0\n   The second example illustrates\
    \ a CreateConnection command containing\n   a notification request and a RemoteConnectionDescriptor:\n\
    \      CRCX 1205 aaln/1@rgw-2569.whatever.net MGCP 1.0\n      C: A3C47F21456789F0\n\
    \      L: p:10, a:PCMU\n      M: sendrecv\n      X: 0123456789AD\n      R: L/hd\n\
    \      S: L/rg\n      v=0\n      o=- 25678 753849 IN IP4 128.96.41.1\n      s=-\n\
    \      c=IN IP4 128.96.41.1\n      t=0 0\n      m=audio 3456 RTP/AVP 0\n   The\
    \ response indicates that the transaction failed, because the phone\n   was already\
    \ off-hook.  Consequently, neither a connection-id nor a\n   session description\
    \ is returned:\n      401 1205 Phone off-hook\n   Our third example illustrates\
    \ the use of the provisional response and\n   the three-way handshake.  We create\
    \ another connection and\n   acknowledge the previous response received by using\
    \ the response\n   acknowledgement parameter:\n      CRCX 1206 aaln/1@rgw-2569.whatever.net\
    \ MGCP 1.0\n      K: 1205\n      C: A3C47F21456789F0\n      L: p:10, a:PCMU\n\
    \      M: inactive\n      v=0\n      o=- 25678 753849 IN IP4 128.96.41.1\n   \
    \   s=-\n      c=IN IP4 128.96.41.1\n      t=0 0\n      m=audio 3456 RTP/AVP 0\n\
    \   A provisional response is returned initially:\n      100 1206 Pending\n  \
    \    I: DFE233D1\n      v=0\n      o=- 4723891 7428910 IN IP4 128.96.63.25\n \
    \     s=-\n      c=IN IP4 128.96.63.25\n      t=0 0\n      m=audio 3456 RTP/AVP\
    \ 0\n   A little later, the final response is received:\n      200 1206 OK\n \
    \     K:\n      I: DFE233D1\n      v=0\n      o=- 4723891 7428910 IN IP4 128.96.63.25\n\
    \      s=-\n      c=IN IP4 128.96.63.25\n      t=0 0\n      m=audio 3456 RTP/AVP\
    \ 0\n   The Call Agent acknowledges the final response as requested:\n      000\
    \ 1206\n   and the transaction is complete.\n"
- title: F.4 ModifyConnection
  contents:
  - "F.4 ModifyConnection\n   The first example shows a ModifyConnection command that\
    \ simply sets\n   the connection mode of a connection to \"send/receive\" - the\
    \ \"notified\n   entity\" is set as well:\n      MDCX 1209 aaln/1@rgw-2567.whatever.net\
    \ MGCP 1.0\n      C: A3C47F21456789F0\n      I: FDE234C8\n      N: ca@ca1.whatever.net\n\
    \      M: sendrecv\n   The response indicates that the transaction was successful:\n\
    \      200 1209 OK\n   In the second example, we pass a session description and\
    \ include a\n   notification request with the ModifyConnection command.  The endpoint\n\
    \   will start playing ring-back tones to the user:\n      MDCX 1210 aaln/1@rgw-2567.whatever.net\
    \ MGCP 1.0\n      C: A3C47F21456789F0\n      I: FDE234C8\n      M: recvonly\n\
    \      X: 0123456789AE\n      R: L/hu\n      S: G/rt\n      v=0\n      o=- 4723891\
    \ 7428910 IN IP4 128.96.63.25\n      s=-\n      c=IN IP4 128.96.63.25\n      t=0\
    \ 0\n      m=audio 3456 RTP/AVP 0\n   The response indicates that the transaction\
    \ was successful:\n      200 1206 OK\n"
- title: F.5 DeleteConnection (from the Call Agent)
  contents:
  - "F.5 DeleteConnection (from the Call Agent)\n   In this example, the Call Agent\
    \ simply instructs the gateway to\n   delete the connection \"FDE234C8\" on the\
    \ endpoint specified:\n      DLCX 1210 aaln/1@rgw-2567.whatever.net MGCP 1.0\n\
    \      C: A3C47F21456789F0\n      I: FDE234C8\n   The response indicates success,\
    \ and that the connection was deleted.\n   Connection parameters for the connection\
    \ are therefore included as\n   well:\n      250 1210 OK\n      P: PS=1245, OS=62345,\
    \ PR=780, OR=45123, PL=10, JI=27, LA=48\n"
- title: F.6 DeleteConnection (from the gateway)
  contents:
  - "F.6 DeleteConnection (from the gateway)\n   In this example, the gateway sends\
    \ a DeleteConnection command to the\n   Call Agent to instruct it that a connection\
    \ on the specified endpoint\n   has been deleted.  The ReasonCode specifies the\
    \ reason for the\n   deletion, and Connection Parameters for the connection are\
    \ provided\n   as well:\n      DLCX 1210 aaln/1@rgw-2567.whatever.net MGCP 1.0\n\
    \      C: A3C47F21456789F0\n      I: FDE234C8\n      E: 900 - Hardware error\n\
    \      P: PS=1245, OS=62345, PR=780, OR=45123, PL=10, JI=27, LA=48\n   The Call\
    \ Agent sends a success response to the gateway:\n      200 1210 OK\n"
- title: F.7 DeleteConnection (multiple connections from the Call Agent)
  contents:
  - "F.7 DeleteConnection (multiple connections from the Call Agent)\n   In the first\
    \ example, the Call Agent instructs the gateway to delete\n   all connections\
    \ related to call \"A3C47F21456789F0\" on the specified\n   endpoint:\n      DLCX\
    \ 1210 aaln/1@rgw-2567.whatever.net MGCP 1.0\n      C: A3C47F21456789F0\n   The\
    \ response indicates success and that the connection(s) were\n   deleted:\n  \
    \    250 1210 OK\n   In the second example, the Call Agent instructs the gateway\
    \ to delete\n   all connections related to all of the endpoints specified:\n \
    \     DLCX 1210 aaln/*@rgw-2567.whatever.net MGCP 1.0\n   The response indicates\
    \ success:\n      250 1210 OK\n"
- title: F.8 AuditEndpoint
  contents:
  - "F.8 AuditEndpoint\n   In the first example, the Call Agent wants to learn what\
    \ endpoints\n   are present on the gateway specified, hence the use of the \"\
    all of\"\n   wild-card for the local portion of the endpoint-name:\n      AUEP\
    \ 1200 *@rgw-2567.whatever.net MGCP 1.0\n   The gateway indicates success and\
    \ includes a list of endpoint names:\n      200 1200 OK\n      Z: aaln/1@rgw-2567.whatever.net\n\
    \      Z: aaln/2@rgw-2567.whatever.net\n   In the second example, the capabilities\
    \ of one of the endpoints is\n   requested:\n      AUEP 1201 aaln/1@rgw-2567.whatever.net\
    \ MGCP 1.0\n      F: A\n   The response indicates success and the capabilities\
    \ as well.  Two\n   codecs are supported, however with different capabilities.\n\
    \   Consequently two separate capability sets are returned:\n      200 1201 OK\n\
    \      A: a:PCMU, p:10-100, e:on, s:off, v:L;S, m:sendonly;\n               recvonly;sendrecv;inactive;netwloop;netwtest\n\
    \      A: a:G729, p:30-90, e:on, s:on, v:L;S, m:sendonly;\n               recvonly;sendrecv;inactive;confrnce;netwloop\n\
    \   Note that the carriage return in the Capabilities lines are shown for\n  \
    \ formatting reasons only - they are not permissible in a real\n   implementation.\n\
    \   In the third example, the Call Agent audits several types of\n   information\
    \ for the endpoint:\n      AUEP 2002 aaln/1@rgw-2567.whatever.net MGCP 1.0\n \
    \     F: R,D,S,X,N,I,T,O,ES\n   The response indicates success:\n      200 2002\
    \ OK\n      R: L/hu,L/oc(N),D/[0-9](N)\n      D:\n      S: L/vmwi(+)\n      X:\
    \ 0123456789B1\n      N: [128.96.41.12]\n      I: 32F345E2\n      T: G/ft\n  \
    \    O: L/hd,D/9,D/1,D/2\n      ES: L/hd\n   The list of requested events contains\
    \ three events.  Where no package\n   name is specified, the default package is\
    \ assumed.  The same goes for\n   actions, so the default action - Notify - must\
    \ therefore be assumed\n   for the \"L/hu\" event.  The omission of a value for\
    \ the \"digit map\"\n   means the endpoint currently does not have a digit map.\
    \  There are\n   currently no active time-out signals, however the OO signal \"\
    vmwi\" is\n   currently on and is consequently included - in this case it was\n\
    \   parameterized, however the parameter could have been excluded.  The\n   current\
    \ \"notified entity\" refers to an IP-address and only a single\n   connection\
    \ exists for the endpoint.  The current value of\n   DetectEvents is \"G/ft\"\
    , and the list of ObservedEvents contains the\n   four events specified.  Finally,\
    \ the event-states audited reveals\n   that the phone was off-hook at the time\
    \ the transaction was\n   processed.\n"
- title: F.9 AuditConnection
  contents:
  - "F.9 AuditConnection\n   The first example shows an AuditConnection command where\
    \ we audit the\n   CallId, NotifiedEntity, LocalConnectionOptions, Connection\
    \ Mode,\n   LocalConnectionDescriptor, and the Connection Parameters:\n      AUCX\
    \ 2003 aaln/1@rgw-2567.whatever.net MGCP 1.0\n      I: 32F345E2\n      F: C,N,L,M,LC,P\n\
    \   The response indicates success and includes information for the\n   RequestedInfo:\n\
    \      200 2003 OK\n      C: A3C47F21456789F0\n      N: ca@ca1.whatever.net\n\
    \      L: p:10, a:PCMU\n      M: sendrecv\n      P: PS=395, OS=22850, PR=615,\
    \ OR=30937, PL=7, JI=26, LA=47\n      v=0\n      o=- 4723891 7428910 IN IP4 128.96.63.25\n\
    \      s=-\n      c=IN IP4 128.96.63.25\n      t=0 0\n      m=audio 1296 RTP/AVP\
    \ 0\n   In the second example, we request to audit RemoteConnectionDescriptor\n\
    \   and LocalConnectionDescriptor:\n      AUCX 1203 aaln/2@rgw-2567.whatever.net\
    \ MGCP 1.0\n      I: FDE234C8\n      F: RC,LC\n   The response indicates success,\
    \ and includes information for the\n   RequestedInfo.  In this case, no RemoteConnectionDescriptor\
    \ exists,\n   hence only the protocol version field is included for the\n   RemoteConnectionDescriptor:\n\
    \      200 1203 OK\n      v=0\n      o=- 4723891 7428910 IN IP4 128.96.63.25\n\
    \      s=-\n      c=IN IP4 128.96.63.25\n      t=0 0\n      m=audio 1296 RTP/AVP\
    \ 0\n      v=0\n"
- title: F.10 RestartInProgress
  contents:
  - "F.10 RestartInProgress\n   The first example illustrates a RestartInProgress\
    \ message sent by an\n   gateway to inform the Call Agent that the specified endpoint\
    \ will be\n   taken out-of-service in 300 seconds:\n      RSIP 1200 aaln/1@rgw-2567.whatever.net\
    \ MGCP 1.0\n      RM: graceful\n      RD: 300\n   The Call Agent's response indicates\
    \ that the transaction was\n   successful:\n      200 1200 OK\n   In the second\
    \ example, the RestartInProgress message sent by the\n   gateway informs the Call\
    \ Agent, that all of the gateway's endpoints\n   are being placed in-service in\
    \ 0 seconds, i.e., they are currently in\n   service.  The restart delay could\
    \ have been omitted as well:\n      RSIP 1204 *@rgw-2567.whatever.net MGCP 1.0\n\
    \      RM: restart\n      RD: 0\n   The Call Agent's response indicates success,\
    \ and furthermore provides\n   the endpoints in question with a new \"notified\
    \ entity\":\n      200 1204 OK\n      N: CA-1@whatever.net\n   Alternatively,\
    \ the command could have failed with a new \"notified\n   entity\" as in:\n  \
    \    521 1204 OK\n      N: CA-1@whatever.net\n   In that case, the command would\
    \ then have to be retried in order to\n   satisfy the \"restart procedure\", this\
    \ time going to Call Agent \"CA-\n   1@whatever.net\".\n"
- title: 'Appendix G: Example Call Flows'
  contents:
  - "Appendix G: Example Call Flows\n   The message flow tables in this section use\
    \ the following\n   abbreviations:\n   * rgw = Residential Gateway\n   * ca  =\
    \ Call Agent\n   * n+  = step 'n' is repeated one or more times\n   Note that\
    \ any use of upper and lower case within the text of the\n   messages is to aid\
    \ readability and is not in any way a requirement.\n   The only requirement involving\
    \ case is to be case insensitive at all\n   times.\n"
- title: G.1 Restart
  contents:
  - 'G.1 Restart

    '
- title: G.1.1 Residential Gateway Restart
  contents:
  - "G.1.1 Residential Gateway Restart\n   The following table shows a message sequence\
    \ that might occur when a\n   call agent (ca) is contacted by two independent\
    \ residential gateways\n   (rgw1 and rgw2) which have restarted.\n           \
    \       Table F.1: Residential Gateway Restart\n ---------------------------------------------------------------------\n"
- title: '|step#|    usr1    |    rgw1    |     ca     |    rgw2    |    usr2   |'
  contents:
  - '|step#|    usr1    |    rgw1    |     ca     |    rgw2    |    usr2   |

    '
- title: '|=====|============|============|============|============|===========|'
  contents:
  - '|=====|============|============|============|============|===========|

    '
- title: '|  1  |            |    rsip -> |            |            |           |'
  contents:
  - '|  1  |            |    rsip -> |            |            |           |

    '
- title: '|     |            |            | <- ack     |            |           |'
  contents:
  - '|     |            |            | <- ack     |            |           |

    '
- title: '|-----|------------|------------|------------|------------|-----------|'
  contents:
  - '|-----|------------|------------|------------|------------|-----------|

    '
- title: '|  2  |            |            | <- auep    |            |           |'
  contents:
  - '|  2  |            |            | <- auep    |            |           |

    '
- title: '|     |            |     ack -> |            |            |           |'
  contents:
  - '|     |            |     ack -> |            |            |           |

    '
- title: '|-----|------------|------------|------------|------------|-----------|'
  contents:
  - '|-----|------------|------------|------------|------------|-----------|

    '
- title: '|  3+ |            |            | <- rqnt    |            |           |'
  contents:
  - '|  3+ |            |            | <- rqnt    |            |           |

    '
- title: '|     |            |     ack -> |            |            |           |'
  contents:
  - '|     |            |     ack -> |            |            |           |

    '
- title: '|-----|------------|------------|------------|------------|-----------|'
  contents:
  - '|-----|------------|------------|------------|------------|-----------|

    '
- title: '|  4  |            |            |            | <- rsip    |           |'
  contents:
  - '|  4  |            |            |            | <- rsip    |           |

    '
- title: '|     |            |            |     ack -> |            |           |'
  contents:
  - '|     |            |            |     ack -> |            |           |

    '
- title: '|-----|------------|------------|------------|------------|-----------|'
  contents:
  - '|-----|------------|------------|------------|------------|-----------|

    '
- title: '|  5  |            |            |    auep -> |            |           |'
  contents:
  - '|  5  |            |            |    auep -> |            |           |

    '
- title: '|     |            |            |            | <- ack     |           |'
  contents:
  - '|     |            |            |            | <- ack     |           |

    '
- title: '|-----|------------|------------|------------|------------|-----------|'
  contents:
  - '|-----|------------|------------|------------|------------|-----------|

    '
- title: '|  6+ |            |            |    rqnt -> |            |           |'
  contents:
  - '|  6+ |            |            |    rqnt -> |            |           |

    '
- title: '|     |            |            |            | <- ack     |           |'
  contents:
  - "|     |            |            |            | <- ack     |           |\n ---------------------------------------------------------------------\n\
    \   Step 1 - RestartInProgress (rsip) from rgw1 to ca\n   rgw1 uses DNS to determine\
    \ the domain name of ca and send to the\n   default port of 2727.  The command\
    \ consists of the following:\n      rsip 1 *@rgw1.whatever.net mgcp 1.0\n    \
    \  rm: restart\n   The \"*\" is used to inform ca that all endpoints of rgw1 are\
    \ being\n   restarted, and \"restart\" is specified as the restart method.  The\n\
    \   Call Agent \"ca\" acknowledges the command with an acknowledgement\n   message\
    \ containing the transaction-id (in this case 1) for the\n   command.  It sends\
    \ the acknowledgement to rgw1 using the same port\n   specified as the source\
    \ port for the rsip.  If none was indicated, it\n   uses the default port of 2727.\n\
    \      200 1 ok\n   A response code is mandatory.  In this case, \"200\", indicates\
    \ \"the\n   requested transaction was executed normally\".  The response string\
    \ is\n   optional.  In this case, \"ok\" is included as an additional\n   description.\n\
    \   Step 2 - AuditEndpoint (auep) from ca to rgw1\n   The command consists of\
    \ the following:\n      auep 153 *@rgw1.whatever.net mgcp 1.0\n   The \"*\" is\
    \ used to request audit information from rgw1 of all its\n   endpoints.  rgw1\
    \ acknowledges the command with an acknowledgement\n   message containing the\
    \ transaction-id (in this case 153) of the\n   command, and it includes a list\
    \ of its endpoints.  In this example,\n   rgw1 has two endpoints, aaln/1 and aaln/2.\n\
    \      200 153 ok\n      Z: aaln/1@rgw1.whatever.net\n      Z: aaln/2@rgw1.whatever.net\n\
    \   Once it has the list of endpoint ids, ca may send individual\n   AuditEndpoint\
    \ commands in which the \"*\" is replaced by the id of the\n   given endpoint.\
    \  As its response, rgw1 would replace the endpoint id\n   list returned in the\
    \ example with the info requested for the\n   endpoint.  This optional message\
    \ exchange is not shown in this\n   example.\n   Step 3 - NotificationRequest\
    \ (rqnt) from ca to each endpoint of rgw1\n   In this case, ca sends two rqnts,\
    \ one for aaln/1:\n      rqnt 154 aaln/1@rgw1.whatever.net mgcp 1.0\n      r:\
    \ l/hd(n)\n      x: 3456789a0\n   and a second for aaln/2:\n      rqnt 155 aaln/2@rgw1.whatever.net\
    \ mgcp 1.0\n      r: l/hd(n)\n      x: 3456789a1\n   Note that in the requested\
    \ events parameter line, the event is fully\n   specified as \"l/hd\", i.e., with\
    \ the package name, in order to avoid\n   any potential ambiguity.  This is the\
    \ recommended behavior.  For the\n   sake of clarity, the action, which in this\
    \ case is to Notify, is\n   explicitly specified by including the \"(n)\".  If\
    \ no action is\n   specified, Notify is assumed as the default regardless of the\
    \ event.\n   If any other action is desired, it must be stated explicitly.\n \
    \  The expected response from rgw1 to these requests is an\n   acknowledgement\
    \ from aaln/1 as follows:\n      200 154 ok\n   and from aaln/2:\n      200 155\
    \ ok\n   Step 4 RestartInProgress (rsip) from rgw2 to ca\n      rsip 0 *@rgw2.whatever.net\
    \ mgcp 1.0\n      rm: restart\n   followed by the acknowledgement from ca:\n \
    \     200 0 ok\n   Step 5 - AuditEndpoint (auep) from ca to rgw2\n      auep 156\
    \ *@rgw2.whatever.net mgcp 1.0\n   followed by an acknowledgement from rgw2:\n\
    \      200 156 ok\n      z: aaln/1@rgw2.whatever.net\n      z: aaln/2@rgw2.whatever.net\n\
    \   Step 6 - NotificationRequest (rqnt) from ca to each endpoint of rgw2\n   \
    \   rqnt 157 aaln/1@rgw2.whatever.net mgcp 1.0\n      r: l/hd(n)\n      x: 3456789a2\n\
    \   followed by:\n      rqnt 158 aaln/2@rgw2.whatever.net mgcp 1.0\n      r: l/hd(n)\n\
    \      x: 3456789a3\n   with rgw2 acknowledging for aaln/1:\n      200 157 ok\n\
    \   and for aaln/2:\n      200 158 ok\n"
- title: G.1.2 Call Agent Restart
  contents:
  - "G.1.2 Call Agent Restart\n   The following table shows the message sequence which\
    \ occurs when a\n   call agent (ca) restarts.  How it determines the address information\n\
    \   of the gateways, in this case rgw1 and rgw2, is not covered in this\n   document.\
    \  For interoperability, it is RECOMMENDED to provide the\n   ability to configure\
    \ the call agent to send AUEP (*) to specific\n   addresses and ports.\n     \
    \             Table F.2: Residential Gateway Restart\n ---------------------------------------------------------------------\n"
- title: '| # |     usr1    |    rgw1    |     ca     |    rgw2    |     usr2   |'
  contents:
  - '| # |     usr1    |    rgw1    |     ca     |    rgw2    |     usr2   |

    '
- title: '|===|=============|============|============|============|============|'
  contents:
  - '|===|=============|============|============|============|============|

    '
- title: '| 1 |             |            | <- auep    |            |            |'
  contents:
  - '| 1 |             |            | <- auep    |            |            |

    '
- title: '|   |             |     ack -> |            |            |            |'
  contents:
  - '|   |             |     ack -> |            |            |            |

    '
- title: '|---|-------------|------------|------------|------------|------------|'
  contents:
  - '|---|-------------|------------|------------|------------|------------|

    '
- title: '| 2+|             |            | <- rqnt    |            |            |'
  contents:
  - '| 2+|             |            | <- rqnt    |            |            |

    '
- title: '|   |             |     ack -> |            |            |            |'
  contents:
  - '|   |             |     ack -> |            |            |            |

    '
- title: '|---|-------------|------------|------------|------------|------------|'
  contents:
  - '|---|-------------|------------|------------|------------|------------|

    '
- title: '| 3 |             |            |    auep -> |            |            |'
  contents:
  - '| 3 |             |            |    auep -> |            |            |

    '
- title: '|   |             |            |            | <- ack     |            |'
  contents:
  - '|   |             |            |            | <- ack     |            |

    '
- title: '|---|-------------|------------|------------|------------|------------|'
  contents:
  - '|---|-------------|------------|------------|------------|------------|

    '
- title: '| 4+|             |            |    rqnt -> |            |            |'
  contents:
  - '| 4+|             |            |    rqnt -> |            |            |

    '
- title: '|   |             |            |            | <- ack     |            |'
  contents:
  - "|   |             |            |            | <- ack     |            |\n ---------------------------------------------------------------------\n\
    \   Step 1 - AuditEndpoint (auep) from ca to rgw1\n   The command consists of\
    \ the following:\n      auep 0 *@rgw1.whatever.net mgcp 1.0\n   The \"*\" is used\
    \ to request audit information from rgw1 of all its\n   endpoints.  rgw1 acknowledges\
    \ the command with an acknowledgement\n   message containing the transaction id\
    \ (in this case 0) of the\n   command, and it includes a list of its endpoints.\
    \  In this example,\n   rgw1 has two endpoints, aaln/1 and aaln/2.\n      200\
    \ 0 ok\n      z: aaln/1@rgw1.whatever.net\n      z: aaln/2@rgw1.whatever.net\n\
    \   Once it has the list of endpoint ids, ca may send individual\n   AuditEndpoint\
    \ commands in which the \"*\" is replaced by the id of the\n   given endpoint.\
    \  As its response, rgw1 would replace the endpoint id\n   list returned in the\
    \ example with the info requested for the\n   endpoint.  This optional message\
    \ exchange is not shown in this\n   example.\n   Step 2 - NotificationRequest\
    \ (rqnt) off-hook from ca to rgw1\n   In this case, ca sends two rqnts, one for\
    \ aaln/1:\n      rqnt 1 aaln/1@rgw1.whatever.net mgcp 1.0\n      r: l/hd(n)\n\
    \      x: 234567890\n   and a second for aaln/2:\n      rqnt 2 aaln/2@rgw1.whatever.net\
    \ mgcp 1.0\n      r: l/hd(n)\n      x: 234567891\n   The expected response from\
    \ rgw1 to these requests is an\n   acknowledgement from aaln/1 as follows:\n \
    \     200 1 ok\n   and from aaln/2:\n      200 2 ok\n   Step 3 - AuditEndpoint\
    \ (auep) from ca to rgw2\n      auep 3 *@rgw2.whatever.net mgcp 1.0\n   followed\
    \ by an acknowledgement from rgw2:\n      200 3 ok\n      z: aaln/1@rgw2.whatever.net\n\
    \      z: aaln/2@rgw2.whatever.net\n   Step 4 - NotificationRequest (rqnt) from\
    \ ca to each endpoint of rgw2\n      rqnt 4 aaln/1@rgw2.whatever.net mgcp 1.0\n\
    \      r: l/hd(n)\n      x: 234567892\n   followed by:\n      rqnt 5 aaln/2@rgw2.whatever.net\
    \ mgcp 1.0\n      r: l/hd(n)\n      x: 234567893\n   with rgw2 acknowledging for\
    \ aaln/1:\n      200 4 ok\n   and for aaln/2:\n      200 5 ok\n"
- title: G.2 Connection Creation
  contents:
  - 'G.2 Connection Creation

    '
- title: G.2.1 Residential Gateway to Residential Gateway
  contents:
  - "G.2.1 Residential Gateway to Residential Gateway\n   The following table shows\
    \ the message sequence which occurs when a\n   user (usr1) makes a call through\
    \ a residential gateway (rgw1) to a\n   user served by another residential gateway\
    \ (rgw2).  This example\n   illustrates the communication between the residential\
    \ gateways and\n   the call agent (ca) only.  The local name of the endpoints\
    \ in this\n   example is aaln/1 for both gateways, and references within the\n\
    \   description of the steps to rgw1 and rgw2 can be assumed to refer to\n   aaln/1\
    \ of rgw1 and aaln/1 of rgw2.  Note that this is only an example\n   and is not\
    \ the only legal call scenario.\n            Table F.3: Residential Gateway Connection\
    \ Creation\n ---------------------------------------------------------------------\n"
- title: '| # |     usr1    |    rgw1    |     ca     |    rgw2    |     usr2   |'
  contents:
  - '| # |     usr1    |    rgw1    |     ca     |    rgw2    |     usr2   |

    '
- title: '|===|=============|============|============|============|============|'
  contents:
  - '|===|=============|============|============|============|============|

    '
- title: '| 1 |  offhook -> |    ntfy -> |            |            |            |'
  contents:
  - '| 1 |  offhook -> |    ntfy -> |            |            |            |

    '
- title: '|   |             |            | <- ack     |            |            |'
  contents:
  - '|   |             |            | <- ack     |            |            |

    '
- title: '|---|-------------|------------|------------|------------|------------|'
  contents:
  - '|---|-------------|------------|------------|------------|------------|

    '
- title: '| 2 | <- dialtone |            | <- rqnt    |            |            |'
  contents:
  - '| 2 | <- dialtone |            | <- rqnt    |            |            |

    '
- title: '|   |             |     ack -> |            |            |            |'
  contents:
  - '|   |             |     ack -> |            |            |            |

    '
- title: '|---|-------------|------------|------------|------------|------------|'
  contents:
  - '|---|-------------|------------|------------|------------|------------|

    '
- title: '| 3 |   digits -> |    ntfy -> |            |            |            |'
  contents:
  - '| 3 |   digits -> |    ntfy -> |            |            |            |

    '
- title: '|   |             |            | <- ack     |            |            |'
  contents:
  - '|   |             |            | <- ack     |            |            |

    '
- title: '|---|-------------|------------|------------|------------|------------|'
  contents:
  - '|---|-------------|------------|------------|------------|------------|

    '
- title: '| 4 |             |            | <- rqnt    |            |            |'
  contents:
  - '| 4 |             |            | <- rqnt    |            |            |

    '
- title: '|   |             |     ack -> |            |            |            |'
  contents:
  - '|   |             |     ack -> |            |            |            |

    '
- title: '|---|-------------|------------|------------|------------|------------|'
  contents:
  - '|---|-------------|------------|------------|------------|------------|

    '
- title: '| 5 | <- recvonly |            | <- crcx    |            |            |'
  contents:
  - '| 5 | <- recvonly |            | <- crcx    |            |            |

    '
- title: '|   |             |     ack -> |            |            |            |'
  contents:
  - '|   |             |     ack -> |            |            |            |

    '
- title: '|---|-------------|------------|------------|------------|------------|'
  contents:
  - '|---|-------------|------------|------------|------------|------------|

    '
- title: '| 6 |             |            |    crcx -> |            | sendrcv -> |'
  contents:
  - '| 6 |             |            |    crcx -> |            | sendrcv -> |

    '
- title: '|   |             |            |            | <- ack     |            |'
  contents:
  - '|   |             |            |            | <- ack     |            |

    '
- title: '|---|-------------|------------|------------|------------|------------|'
  contents:
  - '|---|-------------|------------|------------|------------|------------|

    '
- title: '| 7 | <- recvonly |            | <- mdcx    |            |            |'
  contents:
  - '| 7 | <- recvonly |            | <- mdcx    |            |            |

    '
- title: '|   |             |     ack -> |            |            |            |'
  contents:
  - '|   |             |     ack -> |            |            |            |

    '
- title: '|---|-------------|------------|------------|------------|------------|'
  contents:
  - '|---|-------------|------------|------------|------------|------------|

    '
- title: '| 8 | <- ringback |            | <- rqnt    |            |            |'
  contents:
  - '| 8 | <- ringback |            | <- rqnt    |            |            |

    '
- title: '|   |             |     ack -> |            |            |            |'
  contents:
  - '|   |             |     ack -> |            |            |            |

    '
- title: '|---|-------------|------------|------------|------------|------------|'
  contents:
  - '|---|-------------|------------|------------|------------|------------|

    '
- title: '| 9 |             |            |    rqnt -> |            | ringing -> |'
  contents:
  - '| 9 |             |            |    rqnt -> |            | ringing -> |

    '
- title: '|   |             |            |            | <- ack     |            |'
  contents:
  - '|   |             |            |            | <- ack     |            |

    '
- title: '|---|-------------|------------|------------|------------|------------|'
  contents:
  - '|---|-------------|------------|------------|------------|------------|

    '
- title: '|10 |             |            |            | <- ntfy    | <- offhook |'
  contents:
  - '|10 |             |            |            | <- ntfy    | <- offhook |

    '
- title: '|   |             |            |     ack -> |            |            |'
  contents:
  - '|   |             |            |     ack -> |            |            |

    '
- title: '|---|-------------|------------|------------|------------|------------|'
  contents:
  - '|---|-------------|------------|------------|------------|------------|

    '
- title: '|11 |             |            |    rqnt -> |            |            |'
  contents:
  - '|11 |             |            |    rqnt -> |            |            |

    '
- title: '|   |             |            |            | <- ack     |            |'
  contents:
  - '|   |             |            |            | <- ack     |            |

    '
- title: '|---|-------------|------------|------------|------------|------------|'
  contents:
  - '|---|-------------|------------|------------|------------|------------|

    '
- title: '|12 |             |            | <- rqnt    |            |            |'
  contents:
  - '|12 |             |            | <- rqnt    |            |            |

    '
- title: '|   |             |     ack -> |            |            |            |'
  contents:
  - '|   |             |     ack -> |            |            |            |

    '
- title: '|---|-------------|------------|------------|------------|------------|'
  contents:
  - '|---|-------------|------------|------------|------------|------------|

    '
- title: '|13 | <- sendrcv  |            | <- mdcx    |            |            |'
  contents:
  - '|13 | <- sendrcv  |            | <- mdcx    |            |            |

    '
- title: '|   |             |     ack -> |            |            |            |'
  contents:
  - "|   |             |     ack -> |            |            |            |\n ---------------------------------------------------------------------\n\
    \   Step 1 - Notify (ntfy) offhook from rgw1 to ca\n   This ntfy is the result\
    \ of usr1 going offhook and assumes ca had\n   previously sent an rqnt with RequestId\
    \ \"445678944\" to rgw1 requesting\n   notification in the event of an offhook:\n\
    \      ntfy 12 aaln/1@rgw1.whatever.net mgcp 1.0\n      o: l/hd\n      x: 445678944\n\
    \   Acknowledgement from ca:\n      200 12 ok\n   Step 2 - Request Notification\
    \ (rqnt) for digits from ca to rgw1\n   Request rgw1 to notify if on-hook and\
    \ collect digits according to the\n   digit map, and to provide dialtone:\n  \
    \    rqnt 1057 aaln/1@rgw1.whatever.net mgcp 1.0\n      r: l/hu(n), d/[0-9#*T](d)\n\
    \      s: l/dl\n      x: 445678945\n      d: 5xxx\n   Acknowledgement from rgw1:\n\
    \      200 1057 ok\n   Step 3 - Notify (ntfy) digits from rgw1 to ca\n      ntfy\
    \ 13 aaln/1@rgw1.whatever.net mgcp 1.0\n      o: d/5, d/0, d/0, d/1\n      x:\
    \ 445678945\n   Acknowledgement from ca:\n      200 13 ok\n   Step 4 - Request\
    \ Notification (rqnt) from ca to rgw1\n   Request rgw1 to notify in the event\
    \ of an on-hook transition:\n      rqnt 1058 aaln/1@rgw1.whatever.net mgcp 1.0\n\
    \      r: l/hu(n)\n      x: 445678946\n   Acknowledgement from rgw1:\n      200\
    \ 1058 ok\n   Step 5 - Create Connection (crcx) from ca to rgw1\n   Request a\
    \ new connection on rgw1 with the specified local connection\n   options, including\
    \ 20 msec as the packetization period, G.711 mu-law\n   as the codec, and receive\
    \ only as the mode:\n      crcx 1059 aaln/1@rgw1.whatever.net mgcp 1.0\n     \
    \ c: 9876543210abcdef\n      l: p:20, a:PCMU\n      m: recvonly\n   Acknowledgement\
    \ from rgw1 that a new connection, \"456789fedcba5\", has\n   been created, followed\
    \ by a blank line and then the SDP parameters:\n      200 1059 ok\n      i: 456789fedcba5\n\
    \      v=0\n      o=- 23456789 98765432 IN IP4 192.168.5.7\n      s=-\n      c=IN\
    \ IP4 192.168.5.7\n      t=0 0\n      m=audio 6058 RTP/AVP 0\n   Step 6 - Create\
    \ Connection (crcx) from ca to rgw2\n   Request a new connection on rgw2.  The\
    \ request includes the session\n   description returned by rgw1 such that a two\
    \ way connection can be\n   initiated:\n      crcx 2052 aaln/1@rgw2.whatever.net\
    \ mgcp 1.0\n      c: 9876543210abcdef\n      l: p:20, a:PCMU\n      m: sendrecv\n\
    \      v=0\n      o=- 23456789 98765432 IN IP4 192.168.5.7\n      s=-\n      c=IN\
    \ IP4 192.168.5.7\n      t=0 0\n      m=audio 6058 RTP/AVP 0\n   Acknowledgement\
    \ from rgw2 that a new connection, \"67890af54c9\", has\n   been created; followed\
    \ by a blank line and then the SDP parameters:\n      200 2052 ok\n      i: 67890af54c9\n\
    \      v=0\n      o=- 23456889 98865432 IN IP4 192.168.5.8\n      s=-\n      c=IN\
    \ IP4 192.168.5.8\n      t=0 0\n      m=audio 6166 RTP/AVP 0\n   Step 7 - Modify\
    \ Connection (mdcx) from ca to rgw1\n   Request rgw1 to modify the existing connection,\
    \ \"456789fedcba5\", to\n   use the session description returned by rgw2 establishing\
    \ a half\n   duplex connection which, though not used in this example, could be\n\
    \   used to provide usr1 with in band ringback tone, announcements, etc:\n   \
    \   mdcx 1060 aaln/1@rgw1.whatever.net mgcp 1.0\n      c: 9876543210abcdef\n \
    \     i: 456789fedcba5\n      l: p:20, a:PCMU\n      M: recvonly\n      v=0\n\
    \      o=- 23456889 98865432 IN IP4 192.168.5.8\n      s=-\n      c=IN IP4 192.168.5.8\n\
    \      t=0 0\n      m=audio 6166 RTP/AVP 0\n   Acknowledgement from rgw1:\n  \
    \    200 1060 ok\n   Step 8 - Request Notification (rqnt) from ca for rgw1 to\
    \ provide\n   ringback\n   Request rgw1 to notify in the event of an on-hook transition,\
    \ and\n   also to provide ringback tone:\n      rqnt 1061 aaln/1@rgw1.whatever.net\
    \ mgcp 1.0\n      r: l/hu(n)\n      s: g/rt\n      x: 445678947\n   Acknowledgement\
    \ from rgw1:\n      200 1061 ok\n   Step 9 - Request Notification (rqnt) from\
    \ ca to rgw2 to provide\n   ringing\n   Request rgw2 to continue to look for offhook\
    \ and provide ringing:\n      rqnt 2053 aaln/1@rgw2.whatever.net mgcp 1.0\n  \
    \    r: l/hd(n)\n      s: l/rg\n      x: 445678948\n   Acknowledgement from rgw2:\n\
    \      200 2053 ok\n   Step 10 - Notify (ntfy) offhook from rgw2 to ca\n     \
    \ ntfy 27 aaln/1@rgw2.whatever.net mgcp 1.0\n      o: l/hd\n      x: 445678948\n\
    \   Acknowledgement from ca:\n      200 27 ok\n   Step 11 - Request Notification\
    \ (rqnt) of on-hook from ca to rgw2\n      rqnt 2054 aaln/1@rgw2.whatever.net\
    \ mgcp 1.0\n      r: l/hu(n)\n      x: 445678949\n   Acknowledgement from rgw2:\n\
    \      200 2054 ok\n   Step 12 - Request Notification (rqnt) of on-hook from ca\
    \ to rgw1\n      rqnt 1062 aaln/1@rgw1.whatever.net mgcp 1.0\n      r: l/hu(n)\n\
    \      x: 445678950\n   Acknowledgement from rgw1:\n      200 1062 ok\n   Step\
    \ 13 - Modify Connection (mdcx) from ca to rgw1\n   Request rgw1 to modify the\
    \ existing connection, \"456789fedcba5\", to\n   sendrecv such that a full duplex\
    \ connection is initiated:\n      mdcx 1063 aaln/1@rgw1.whatever.net mgcp 1.0\n\
    \      c: 9876543210abcdef\n      i: 456789fedcba5\n      m: sendrecv\n   Acknowledgement\
    \ from rgw1:\n      200 1063 ok\n"
- title: G.3 Connection Deletion
  contents:
  - 'G.3 Connection Deletion

    '
- title: G.3.1 Residential Gateway to Residential Gateway
  contents:
  - "G.3.1 Residential Gateway to Residential Gateway\n   The following table shows\
    \ the message sequence which occurs when a\n   user (usr2) initiates the deletion\
    \ of an existing connection on a\n   residential gateway (rgw2) with a user served\
    \ by another residential\n   gateway (rgw1).  This example illustrates the communication\
    \ between\n   the residential gateways and the call agent (ca) only.  The local\n\
    \   name of the endpoints in this example is aaln/1 for both gateways,\n   and\
    \ references within the description of the steps to rgw1 and rgw2\n   can be assumed\
    \ to refer to aaln/1 of rgw1 and aaln/1 of rgw2.\n            Table F.4: Residential\
    \ Gateway Connection Deletion\n ---------------------------------------------------------------------\n"
- title: '| # |     usr1    |    rgw1    |     ca     |    rgw2    |     usr2   |'
  contents:
  - '| # |     usr1    |    rgw1    |     ca     |    rgw2    |     usr2   |

    '
- title: '|===|=============|============|============|============|============|'
  contents:
  - '|===|=============|============|============|============|============|

    '
- title: '| 1 |             |            |            | <- ntfy    | <- on-hook |'
  contents:
  - '| 1 |             |            |            | <- ntfy    | <- on-hook |

    '
- title: '|   |             |            |     ack -> |            |            |'
  contents:
  - '|   |             |            |     ack -> |            |            |

    '
- title: '|---|-------------|------------|------------|------------|------------|'
  contents:
  - '|---|-------------|------------|------------|------------|------------|

    '
- title: '| 2 |             |            |    dlcx -> |            |            |'
  contents:
  - '| 2 |             |            |    dlcx -> |            |            |

    '
- title: '|   |             |            |            | <- ack     |            |'
  contents:
  - '|   |             |            |            | <- ack     |            |

    '
- title: '|---|-------------|------------|------------|------------|------------|'
  contents:
  - '|---|-------------|------------|------------|------------|------------|

    '
- title: '| 3 |             |            | <- dlcx    |            |            |'
  contents:
  - '| 3 |             |            | <- dlcx    |            |            |

    '
- title: '|   |             |     ack -> |            |            |            |'
  contents:
  - '|   |             |     ack -> |            |            |            |

    '
- title: '|---|-------------|------------|------------|------------|------------|'
  contents:
  - '|---|-------------|------------|------------|------------|------------|

    '
- title: '| 4 |             |            |    rqnt -> |            |            |'
  contents:
  - '| 4 |             |            |    rqnt -> |            |            |

    '
- title: '|   |             |            |            | <- ack     |            |'
  contents:
  - '|   |             |            |            | <- ack     |            |

    '
- title: '|---|-------------|------------|------------|------------|------------|'
  contents:
  - '|---|-------------|------------|------------|------------|------------|

    '
- title: '| 5 |  on-hook -> |    ntfy -> |            |            |            |'
  contents:
  - '| 5 |  on-hook -> |    ntfy -> |            |            |            |

    '
- title: '|   |             |            | <- ack     |            |            |'
  contents:
  - '|   |             |            | <- ack     |            |            |

    '
- title: '|---|-------------|------------|------------|------------|------------|'
  contents:
  - '|---|-------------|------------|------------|------------|------------|

    '
- title: '| 6 |             |            | <- rqnt    |            |            |'
  contents:
  - '| 6 |             |            | <- rqnt    |            |            |

    '
- title: '|   |             |     ack -> |            |            |            |'
  contents:
  - "|   |             |     ack -> |            |            |            |\n ---------------------------------------------------------------------\n\
    \   Step 1 - Notify (ntfy) offhook from rgw1 to ca\n   This ntfy is the result\
    \ of usr2 going on-hook and assumes that ca had\n   previously sent an rqnt to\
    \ rgw2 requesting notification in the event\n   of an on-hook (see end of Connection\
    \ Creation sequence):\n      ntfy 28 aaln/1@rgw2.whatever.net mgcp 1.0\n     \
    \ o: l/hu\n      x: 445678949\n   Acknowledgement from ca:\n      200 28 ok\n\
    \   Step 2 - Delete Connection (dlcx) from ca to rgw2\n   Requests rgw2 to delete\
    \ the connection \"67890af54c9\":\n      dlcx 2055 aaln/1@rgw1.whatever.net mgcp\
    \ 1.0\n      c: 9876543210abcdef\n      i: 67890af54c9\n   Acknowledgement from\
    \ rgw2.  Note the response code of \"250\" meaning\n   \"the connection was deleted\"\
    :\n      250 2055 ok\n   Step 3 - Delete Connection (dlcx) from ca to rgw1\n \
    \  Requests rgw1 to delete the connection \"456789fedcba5\":\n      dlcx 1064\
    \ aaln/1@rgw1.whatever.net mgcp 1.0\n      c: 9876543210abcdef\n      i: 456789fedcba5\n\
    \   Acknowledgement from rgw1:\n      250 1064 ok\n   Step 4 - NotificationRequest\
    \ (rqnt) from ca to rgw2\n   Requests rgw2 to notify ca in the event of an offhook\
    \ transition:\n      rqnt 2056 aaln/1@rgw2.whatever.net mgcp 1.0\n      r: l/hd(n)\n\
    \      x: 445678951\n   Acknowledgement from rgw2:\n      200 2056 ok\n   Step\
    \ 5 - Notify (ntfy) on-hook from rgw1 to ca\n   Notify ca that usr1 at rgw1 went\
    \ back on-hook:\n      ntfy 15 aaln/1@rgw1.whatever.net mgcp 1.0\n      o: l/hu\n\
    \      x: 445678950\n   Acknowledgement from ca:\n      200 15 ok\n   Step 6 -\
    \ NotificationRequest (rqnt) offhook from ca to rgw1\n   Requests rgw1 to notify\
    \ ca in the event of an offhook transition:\n      rqnt 1065 aaln/1@rgw1.whatever.net\
    \ mgcp 1.0\n      r: l/hd(n)\n      x: 445678952\n   Acknowledgement from rgw1:\n\
    \      200 1065 ok\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Flemming Andreasen\n   Cisco Systems\n   499 Thornall\
    \ Street, 8th Floor\n   Edison, NJ 08837\n   EMail: fandreas@cisco.com\n   Bill\
    \ Foster\n   Cisco Systems\n   771 Alder Drive\n   Milpitas, CA 95035\n   EMail:\
    \ bfoster@cisco.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2003).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
