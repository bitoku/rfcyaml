- contents:
  - '      Managed Objects of Ethernet Passive Optical Networks (EPON)

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2007).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document defines a portion of the Management Information Base\n
    \  (MIB) for use with network management protocols in TCP/IP based\n   Internets.
    \ In particular, it defines objects for managing interfaces\n   that conform to
    the Ethernet Passive Optical Networks (EPON) standard\n   as defined in the IEEE
    Std 802.3ah-2004, which are extended\n   capabilities to the Ethernet like interfaces.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  The Internet-Standard Management Framework . . . .
    . . . . . .  3\n   2.  Overview . . . . . . . . . . . . . . . . . . . . . . .
    . . . .  3\n     2.1.  Terminology and Abbreviations  . . . . . . . . . . . .
    . .  3\n     2.2.  EPON Architecture Highlights . . . . . . . . . . . . . . .
    \ 5\n       2.2.1.  Introduction . . . . . . . . . . . . . . . . . . . . .  5\n
    \      2.2.2.  Principles of Operation  . . . . . . . . . . . . . . .  6\n       2.2.3.
    \ The Physical Media . . . . . . . . . . . . . . . . . .  7\n       2.2.4.  PMD
    Specifications . . . . . . . . . . . . . . . . . .  8\n       2.2.5.  Point-to-Point
    Emulation . . . . . . . . . . . . . . .  8\n       2.2.6.  Principles of the MPCP
    . . . . . . . . . . . . . . . . 10\n       2.2.7.  Forward Error Correction (FEC)
    . . . . . . . . . . . . 12\n     2.3.  Management Architecture  . . . . . . .
    . . . . . . . . . . 13\n   3.  MIB Structure  . . . . . . . . . . . . . . . .
    . . . . . . . . 17\n   4.  Relation to Other MIB Modules  . . . . . . . . . .
    . . . . . . 22\n     4.1.  Relation to the Interfaces MIB and Ethernet-like\n
    \          Interfaces MIB . . . . . . . . . . . . . . . . . . . . . . 22\n     4.2.
    \ Relation to the IEEE 802.3 MAU MIBs  . . . . . . . . . . . 29\n     4.3.  Relation
    to the EFM OAM MIB  . . . . . . . . . . . . . . . 29\n     4.4.  Relation to the
    Bridge MIB . . . . . . . . . . . . . . . . 30\n   5.  Mapping of IEEE 802.3ah
    Managed Objects  . . . . . . . . . . . 31\n   6.  Definitions - The DOT3 EPON
    MIB Module . . . . . . . . . . . . 33\n   7.  IANA Considerations  . . . . . .
    . . . . . . . . . . . . . . . 85\n   8.  Acknowledgements . . . . . . . . . .
    . . . . . . . . . . . . . 86\n   9.  Security Considerations  . . . . . . . .
    . . . . . . . . . . . 86\n   10. References . . . . . . . . . . . . . . . . .
    . . . . . . . . . 88\n     10.1. Normative References . . . . . . . . . . . .
    . . . . . . . 88\n     10.2. Informative References . . . . . . . . . . . . .
    . . . . . 90\n"
  title: Table of Contents
- contents:
  - "1.  The Internet-Standard Management Framework\n   For a detailed overview of
    the documents that describe the current\n   Internet-Standard Management Framework,
    please refer to Section 7 of\n   RFC 3410 [RFC3410].  Managed objects are accessed
    via a virtual\n   information store, termed the Management Information Base or
    MIB.\n   MIB objects are generally accessed through the Simple Network\n   Management
    Protocol (SNMP).  Objects in the MIB are defined using the\n   mechanisms defined
    in the Structure of Management Information (SMI).\n   This memo specifies a MIB
    module that is compliant to the SMIv2,\n   which is described in STD 58, RFC 2578
    [RFC2578]; STD 58, RFC 2579\n   [RFC2579]; and STD 58, RFC 2580 [RFC2580].\n"
  title: 1.  The Internet-Standard Management Framework
- contents:
  - "2.  Overview\n   This document defines a portion of the Management Information
    Base\n   (MIB) for use with network management protocols in TCP/IP based\n   Internets.
    \ In particular, it defines objects for managing interfaces\n   that conform to
    the Ethernet Passive Optical Networks (EPON) standard\n   as defined in [802.3ah],
    which are extended capabilities to the\n   Ethernet like interfaces.  The document
    contains a list of management\n   objects based on the attributes defined in the
    relevant parts of\n   [802.3ah] Annex 30A, referring to EPON.\n"
  - contents:
    - "2.1.  Terminology and Abbreviations\n   The key words \"MUST\", \"MUST NOT\",
      \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",
      \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described
      in [RFC2119].\n   ACK - Acknowledge\n   BER - Bit Error Rate\n   BW - Bandwidth\n
      \  CO - Central Office\n   CPE - Customer Premises Equipment\n   CRC - Cyclic
      Redundancy Check\n   EFM - Ethernet First Mile\n   EPON - Ethernet Passive Optical
      Network\n   FCS - Frame Check Sequence\n   FEC - Forward Error Correction\n
      \  GMII - Gigabit Media Independent Interface\n   LAN - Local Area Network\n
      \  LLID - Logical Link Identifier\n   MAC - Media Access Control\n   Mbps -
      Megabit per second\n   MDI - Medium Dependent Interface\n   MDIO - Management
      Data Input/Output\n   MPCP - Multi-Point Control Protocol\n   MP2PE - Multi-Point
      to Point Emulation\n   OAM - Operation Administration Maintenance\n   OLT -
      Optical Line Terminal (Server unit of the EPON)\n   OMP - Optical Multi-Point\n
      \  ONU - Optical Network Unit (Client unit of the EPON)\n   P2MP - Point-to-Multipoint\n
      \  P2PE - Point-to-Point Emulation\n   PCS - Physical Coding Sublayer\n   PHY
      - Physical Layer\n   PMA - Physical Medium Attachment\n   PMD - Physical Medium
      Dependent\n   PON - Passive Optical Network\n   RS - Reconciliation Sublayer\n
      \  RTT - Round Trip Time\n   SLA - Service Level Agreement\n   SLD - Start of
      LLID Delimiter\n   TDM - Time Division Multiplexing\n   TQ - Time Quanta\n"
    title: 2.1.  Terminology and Abbreviations
  - contents:
    - '2.2.  EPON Architecture Highlights

      '
    - contents:
      - "2.2.1.  Introduction\n   The EPON standard, as defined in [802.3ah], defines
        the physical\n   media (Layer 1) and media access (Layer 2) of the EPON interface.\n
        \  The EPON is a variant of the Gigabit Ethernet protocol for the\n   Optical
        Access.  The Optical Access topology is based on passive\n   optical splitting
        topology.  The link of a Passive Optical Network\n   (PON) is based on a single,
        shared optical fiber with passive optical\n   splitters dividing the single
        fiber into separate subscribers.\n   The Optical Line Terminal (OLT) is the
        server unit of the network,\n   located at the Central Office (CO).\n   The
        Optical Network Unit (ONU) is the client unit of the network,\n   located
        at the Customer Premises Equipment (CPE).\n   The following diagram describes
        the PON topology:\n               Device with\n               one or more
        P2MP\n               interfaces such as OLT\n               for EPON                       An
        EPON          IP host\n               ------- OLT          ONU       \"modem\"
        \         --------\n    Other IEEE |     | interface |  interface ------ Other
        IEEE|      |\n    interface  |     |-------\\----------------|    | interface
        |      |\n    ===========|     |        \\               |    |===========|
        \     |\n               |     |         \\              ------           --------\n
        \              |     |          \\             ------           --------\n
        \              .     .           \\------------|    |           |      |\n
        \              |     |------\\                 |    |===========|      |\n
        \              |     |       \\                ------           --------\n
        \              -------        \\ etc\n   The IEEE layering architecture of
        an EPON interface is defined in the\n   diagram of Figure 56.2 [802.3ah].
        \ The following clauses in the\n   [802.3ah] define the corresponding layers
        of an EPON interface:\n   clause 30 - Management\n   clause 60 - PMD for EPON
        media (Burst PMD)\n   clause 64 - MPCP (Multi-Point Control Protocol) - defines
        the Multi-\n   Point architecture, and control protocol for the media access
        of\n   EPON.\n   clause 65 -\n   a) Virtual links definition for the EPON\n
        \  b) FEC\n   c) PMA for the EPON.\n"
      title: 2.2.1.  Introduction
    - contents:
      - "2.2.2.  Principles of Operation\n   The specification of the EPON interface
        is based on the specification\n   of the gigabit Ethernet interface as described
        in [802.3], clauses 35\n   and 36.  The Ethernet MAC is working in gigabit
        rate.  The media\n   interface to the MAC is through the GMII interface, as
        described in\n   clause 35, and the PCS layer is based on the gigabit Ethernet
        PCS as\n   described in clause 36.  The special EPON layers are added to the\n
        \  Ethernet layering in the following places:\n   The MPCP is placed in the
        MAC control layer, providing the EPON\n   control protocol.  The Emulation
        layer, located at the RS\n   (Reconciliation Sublayer), creates virtual private
        path to each ONU.\n   The FEC layer is located between the PCS and PMA layers,
        enhancing\n   reach and split performance of the optical link.\n   The following
        diagram describes the layering model of an EPON\n   interface:\n      +==========================================+\n
        \     |               Higher layers              |\n      +==========================================+\n
        \     |               802.1D Bridge              |\n      +==========================================+\n
        \     | MAC client|        ...        |MAC client|\n      +==========================================+\n
        \     |           MAC Control - (MPCP)           |            *NEW*\n      +==========================================+\n
        \     |    MAC    |        ...        |    MAC   |\n      +==========================================+\n
        \     |           P2P Emulation (P2PE)           |            *NEW*\n      +==========================================+\n
        \                     |            |\n                      |    GMII    |\n
        \                     |            |\n      +==========================================+\n
        \     |                    PCS                   |\n      +==========================================+\n
        \     |                    FEC                   |            *NEW*\n      +==========================================+\n
        \     |                    PMA                   |  *Enhanced parameters\n
        \     +==========================================+    for EPON*\n      |                    PMD
        \                  |  *Enhanced parameters\n      +==========================================+
        \   for EPON*\n                      |            |\n                      |
        \   MDI     |\n                      |            |\n                    /===================/\n
        \                  /       Media       /\n                  /===================/\n"
      title: 2.2.2.  Principles of Operation
    - contents:
      - "2.2.3.  The Physical Media\n   The physical link is a fiber optical link.
        \ The OLT and ONUs are\n   connected through passive optical splitters.  Downlink
        denotes the\n   transmission from the OLT to the ONUs.  Uplink denotes the\n
        \  transmission from the ONUs to the OLT.  Uplink and downlink are\n   multiplexed
        using separated wavelengths on the same fiber.  The\n   downlink is a broadcast
        medium where the OLT transmits the data to\n   all ONUs.  The uplink is a
        shared transmission medium for all of the\n   ONUs.  The uplink access is
        based on time division multiplexing (TDM)\n   and the management of the TDM
        media access is defined by the Multi-\n   Point Control Protocol (MPCP).  The
        MPCP is a control protocol based\n   on an inband packet messaging.  The OLT
        sends control messages (GATE\n   messages) allowing ONUs to transmit, defining
        when the transmission\n   occurs and what is its duration.  These messages
        define the\n   transmission order and the amount of BW for each ONU.  A scheduling\n
        \  algorithm at the OLT, which is not defined in the [802.3ah], is\n   responsible
        for allocating the BW and controlling the delay of each\n   ONU according
        to its SLA.\n"
      title: 2.2.3.  The Physical Media
    - contents:
      - "2.2.4.  PMD Specifications\n   PMD specifications select the same optical
        wavelength plan as the\n   [ITU-T.G.983].  The transceivers are derivatives
        of existing Ethernet\n   optical transceivers, with dual wavelength on a single
        fiber, and\n   extended burst capabilities for the uplink.  The uplink burst\n
        \  capability is the burst transmission functionality for the ONUs and\n   burst
        reception functionality for the OLT.  The [802.3ah] selected\n   very relaxed
        burst parameters to reduce the device cost of EPON\n   products.\n"
      title: 2.2.4.  PMD Specifications
    - contents:
      - "2.2.5.  Point-to-Point Emulation\n   The downstream is a broadcast link,
        which means that the OLT\n   transmission is shared for all ONUs.  The sharing
        of the transmission\n   of the OLT has some negative privacy aspects and should
        be limited to\n   broadcast traffic in nature only.  The traffic dedicated
        to each ONU\n   should not be shared.  The solution provided by [802.3ah]
        is to\n   partition the EPON link, in a virtual manner, between the ONUs.
        \ Each\n   ONU has a dedicated virtual link to the OLT.  The [802.3ah] also\n
        \  defines an additional link for broadcast transmission.  The medium\n   becomes
        an aggregation of point-to-point tunnels.  The OLT cannot\n   preserve its
        EPON interface as a single interface connected to N\n   devices (following
        the properties of the physical interface).  The\n   EPON interface of the
        OLT is partitioned into separate virtual\n   interfaces; an interface for
        each virtual link.  Hence, the OLT\n   behaves like a device with N virtual
        ports (and an additional port\n   for the broadcast transmission).  The additional
        single-copy-\n   broadcast channel (tagged as all one LLID) is added to allow
        the\n   broadcast transmission within a single copy to all ONUs, preserving\n
        \  the inherent advantage of BW efficiency of the PON shared media.  The\n
        \  ONUs filter the downlink traffic that is not intended for their\n   reception,
        according to the virtual link marking.  An LLID tag is\n   attached at the
        preamble of the Ethernet packet denoting the virtual\n   link.  The LLID marks
        the destination port in the downstream and\n   source port in the upstream.\n
        \  The virtual links concept is also used to avoid a violation of the\n   [802.1d]
        bridging rules for peer-to-peer traffic in the PON.  Peer-\n   to-peer traffic
        is traffic between ONUs in the same PON.  The OLT\n   cannot preserve the
        EPON interface as a single interface, connected\n   to N devices, and allow
        traffic between these devices without\n   violating the bridging rules.  The
        source address and destination\n   address of the peer-to-peer traffic are
        behind the same port and\n   therefore the traffic should be discarded.  The
        separation of the\n   ONUs into virtual links solves this issue.  The OLT
        has N virtual\n   ports for the single physical EPON port.  A bridge sees
        a single MAC\n   Client for every link pair.\n   The private paths concept
        solves the networking problems and provides\n   subscriber isolation.\n   As
        the tunneling is only a virtual tunneling, there is a single\n   physical
        interface and a single physical layer for the device so that\n   some attributes
        are shared.  For example, the interface has a single\n   local MAC address.\n
        \  The virtual tunneling for an OLT with 3 ONUs is illustrated in the\n   following
        diagram.\n                         Trunk Line\n                             |\n
        \                            |\n                             |\n                            \\|/\n
        \     +===============================================+\n      |                 802.1D
        Bridge                 |\n      +===============================================+\n
        \     | MAC client1|          ...         |MAC client3|\n      +===============================================+\n
        \     |                     MP2PE                     |\n      +===============================================+\n
        \     |                      PHY                      |\n      =================================================\n
        \            |                 |                 |\n             |                 |
        \                |\n            \\|/               \\|/               \\|/\n
        \     +============+    +============+    +============+\n      |    PHY     |
        \   |     PHY    |    |     PHY    |\n      +============+    +============+
        \   +============+\n      |   MP2PE    |    |    MP2PE   |    |    MP2PE   |\n
        \     +============+    +============+    +============+\n      | MAC client
        |    | MAC client |    | MAC client |\n      +============+    +============+
        \   +============+\n      |    PHY     |    |     PHY    |    |     PHY    |\n
        \     +============+    +============+    +============+\n            /|\\
        \              /|\\               /|\\\n             |                 |                 |\n
        \            |                 |                 |\n             |                 |
        \                |\n        Subscriber1       Subscriber2       Subscriber3\n"
      title: 2.2.5.  Point-to-Point Emulation
    - contents:
      - "2.2.6.  Principles of the MPCP\n   The EPON standard defines a media access
        control of an optical Access\n   network.  The Access network has some substantial
        differences from\n   the legacy LAN for which the Ethernet was designed.  The
        differences\n   lie mainly in the provisioning of the network.  An Access
        network is\n   an administrated environment, with an operator providing the
        service\n   and subscribers consuming it.  The operator is controlling the\n
        \  network and managing its traffic.  For instance, BW is controlled and\n
        \  subscribers are billed for services.  The MPCP protocol divides the\n   Ethernet
        interfaces into two unequal types of network units.  The\n   first interface
        is an OLT interface, which is a server unit,\n   controlling the network.
        \ The second interface is an ONU interface,\n   which is a client unit, participating
        in the network.\n   The OLT, which is the server unit, manages the network.
        \ The MPCP\n   controls the TDM transmission of the uplink.  The MPCP is implemented\n
        \  at the MAC control layer and the MPCP messages are MAC control\n   messages
        using the 0x8808 Ethertype.  These messages are not\n   forwarded out of the
        MAC.\n   A concept of time must exist in the protocol in order to schedule
        the\n   uplink transmission.  A timestamp, which is set by the OLT and\n   synchronized
        between the network units, is passed through the MPCP\n   messages.  The timestamp
        is also used to measure the RTT of each ONU.\n   RTT is compensated by the
        OLT in the generation of the grants for the\n   uplink transmission.  The
        difference of incoming timestamp to local\n   time allows the OLT to calculate
        the RTT.  RTT compensation is needed\n   as the RTT in an Access network can
        have a significant value.  The\n   standard allows the network to reach a
        20 km distance, which is\n   equivalent to a 200 usec RTT (25 Kbytes of data).\n
        \  The TDM control is done using GATE messages.  These messages define,\n
        \  for each ONU, the time for transmission and the length of\n   transmission.
        \ The RTT is reduced from the transmission time in the\n   GATE message to
        shift the transmission time of the ONU in the\n   opposite direction.\n   A
        scheduling algorithm at the OLT, which is not defined in the\n   [802.3ah],
        is responsible for dividing the BW and controlling the\n   transmission delay
        of each ONU according to its SLA.  The MPCP\n   defines a closed loop operation
        in order for this algorithm to be\n   efficient.  The MPCP allows the ONUs
        to report on the amount of BW\n   they require for transmission using a special
        REPORT message.  This\n   allows allocating BW to an ONU only when requested,
        relying on the\n   statistical burst property of the traffic, and allowing
        different\n   peak BW for different ONUs at different times; hence, allowing\n
        \  oversubscription of the BW.  The REPORT message reports the amount of\n
        \  data waiting in the ONU queues.\n   In addition, the MPCP defines a protocol
        of auto-discovery and\n   registration of ONUs.\n   The registration process
        is defined in the diagram below:\n      OLT                                          ONU\n
        \      |                                            |\n       |          Discovery
        Gate message           \\|\n       |--------------------------------------------|\n
        \      |                                           /|\n       |                                            |\n
        \      |/         Register Request message          |\n       |--------------------------------------------|\n
        \      |\\                                           |\n       |                                            |\n
        \      |          Register message                  |\n       |           (assigning
        LLID)                \\|\n       |--------------------------------------------|\n
        \      |                                           /|\n       |                                            |\n
        \      |               Gate message                \\|\n       |--------------------------------------------|\n
        \      |                                           /|\n       |                                            |\n
        \      |/         Register ACK message              |\n       |--------------------------------------------|\n
        \      |\\                                           |\n       |                                            |\n
        \      |                                            |\n   A new ONU requests
        to register (sends a REG_REQUEST message) in a\n   special discovery grant,
        allocated for that by the OLT.  During that\n   time, more than one ONU might
        try to register.  A collision in\n   transmission might occur, as the RTT
        of the new ONUs is not yet\n   known.  A random backoff mechanism of the transmission
        is used to\n   schedule the following registration requests to avoid these\n
        \  collisions.  When the OLT receives a REG_REQUEST message of an ONU\n   and
        approves this ONU, then it sends a REGISTER message to this ONU\n   defining
        its LLID.  From that point, the ONU transmission is\n   scheduled by its LLID,
        knowing the RTT, and no collision can occur.\n   The ONU replies with a REGISTER_ACK
        message and the registration\n   process of the MPCP ends.  Higher layer protocols
        may be needed to\n   authenticate the ONU and allow it to participate in the
        network.\n"
      title: 2.2.6.  Principles of the MPCP
    - contents:
      - "2.2.7.  Forward Error Correction (FEC)\n   The FEC is defined to enhance
        the link budget of the PON.  As each\n   splitter attenuates the optical signal,
        the number of the splits and\n   the distance are limited by the link budget.
        \ Hence an FEC that\n   improves the link budget has a benefit.  The FEC code
        used is the\n   RS(239,255,8), similar to the FEC code in [ITU-T.G.975], improving\n
        \  the BER from 1E-4 to 1E-12.\n   The FEC parity encapsulation is based on
        the framing of the Ethernet\n   packet.  The Ethernet packets are spaced by
        MAC rate adaptation, and\n   the parity bytes are inserted after the packet
        in the provided space.\n   As the start and end of packet codewords also define
        the FEC\n   boundaries, and they are outside the FEC protection, they are\n
        \  replaced by a series of symbols to reduce their vulnerability to\n   errors.\n
        \  The following diagram presents an FEC-protected frame:\n   +-------------------------------------------------------------------+\n
        \  |       |              |           |     |       |          |       |\n
        \  | S_FEC | Preamble/SFD |   Frame   | FCS | T_FEC |  Parity  | T_FEC |\n
        \  |       |              |           |     |       |          |       |\n
        \  +-------------------------------------------------------------------+\n
        \  The FEC is added in a separate layer between the PCS and PMA layers\n   of
        the [802.3].\n   The FEC layer introduces a fixed delay in receive path and
        transmit\n   path.\n   The FEC layer is optional.\n"
      title: 2.2.7.  Forward Error Correction (FEC)
    title: 2.2.  EPON Architecture Highlights
  - contents:
    - "2.3.  Management Architecture\n   Each one of the EPON layers is accompanied
      by a management interface\n   that is controlled through clause 30 of the [802.3ah].
      \ As the\n   [802.3ah] specification may be used for different applications,
      and\n   some of the clauses may be used separately, the IEEE management\n   clause
      allocates for each one of them a separate package.  The MIB\n   document follows
      this partition.\n   The following diagram presents the relation of the MIB groups
      to the\n   [802.3ah] layers:\n   +===========================+\n   |       Higher
      layers       |\n   +===========================+\n   |       802.1D Bridge       |\n
      \  +===========================+\n   |MAC client| ... |MAC client|\n   +===========================+
      \   \\ +=============================+\n   |   MAC Control - (MPCP)    |-----
      |MpcpObjects| ... |MpcpObjects|\n   +===========================+    / +=============================+\n
      \  |   MAC    | ... |   MAC    |\n   +===========================+    \\ +=============================+\n
      \  |    P2P Emulation (P2PE)   |----- |OmpEmulat  |     |OmpEmulat  |\n   +===========================+
      \   / |ionObjects | ... |ionObjects |\n             |        |               +=============================+\n
      \            |  GMII  |\n             |        |\n   +===========================+\n
      \  |            PCS            |\n   +===========================+    \\ +=============================+\n
      \  |            FEC            |----- |FecObjects | ... |FecObjects |\n   +===========================+
      \   / +=============================+\n   |            PMA            |\n   +===========================+\n
      \  |            PMD            |\n   +===========================+\n             |
      \       |\n             |  MDI   |\n             |        |\n         /===============/\n
      \       /     Media     /\n       /===============/\n   The association is straightforward
      for the ONU interface.  There is\n   one logical and one physical interface,
      and a single copy exists for\n   each layer that can be remotely queried by
      the OLT.\n   At the OLT there is a single physical interface and N virtual\n
      \  interfaces for the virtual links of the ONUs (and another virtual\n   interface
      for the broadcast virtual link).  As can be seen from the\n   layering diagram
      above, the MAC layer is virtually duplicated.\n   Therefore, in this document
      it was selected that the management of a\n   virtual interface is like a physical
      interface, an interface index is\n   allocated for each one of the virtual links,
      and an additional\n   interface index is allocated for the OLT.\n   To illustrate
      the interface modeling consider two devices; the first\n   device has two physical
      interfaces, is typically located at a\n   consumer's site, and is called an
      \"ONU modem\".\n   An \"ONU modem\" is shown in the figure below:\n                            --------\n
      \            ONU interface | ONU   | 10 megabit interface\n             --------------|
      modem |--------------------\n                           ---------\n   This device
      would have 3 entries in the IF table, and one IF stack\n   entry; for example:\n
      \  ifIndex=1 - interface for 10 megabit interface\n   ifIndex=2 - interface
      for the optical interface\n   ifIndex=200 - interface for the ONU interface\n
      \  And then in the IF stack table:\n   ifStackHigherLayer=200, ifStackLowerLayer=2
      - map between the\n   physical and the ONU\n   The second device has three physical
      interfaces, is typically located\n   at the provider's site, and may be called
      a \"headend\".\n   A \"headend\" is shown in the figure below:\n                               ---------\n
      \            1st OLT interface | Head  | gigE interface\n             ------------------|
      end   |--------------------\n                               |       |\n             ------------------|
      \      |\n             2nd OLT interface |       |\n                               ---------\n
      \  This device would have 5 entries (when there are no attached ONUs) in\n   the
      IF table, for example:\n   ifIndex=1 - interface for gigE interface\n   ifIndex=2
      - interface for 1st optical interface\n   ifIndex=3 - interface for 2nd optical
      interface\n   ifIndex=265535 - interface for the 1st OLT broadcast interface\n
      \  ifIndex=365535 - interface for the 2nd OLT broadcast interface\n   And then
      in the IF stack table:\n   ifStackHigherLayer=265535, ifStackLowerLayer=2 -
      map between the 1st\n   physical and its broadcast interface\n   ifStackHigherLayer=365535,
      ifStackLowerLayer=3 - map between the 2nd\n   physical and its broadcast interface\n
      \  If two ONUs connected to the first OLT interface, then for example,\n   the
      following entries would be added to the IF table:\n   ifIndex=200001 - interface
      for the 1st ONU of 1st OLT\n   ifIndex=200002 - interface for the 2nd ONU of
      1st OLT\n   And in the IF stack table:\n   ifStackHigherLayer=200001, ifStackLowerLayer=2
      - map between the 1st\n   physical and 1st ONU\n   ifStackHigherLayer=200002,
      ifStackLowerLayer=2 - map between the 1st\n   physical and 2nd ONU\n   For each
      physical interface, there would be an entry (ifIndex) in the\n   tables of the
      interface MIB module [RFC2863], MAU MIB module\n   [RFC4836], and Etherlike
      MIB module [RFC3635].  Additionally, there\n   would be entries (ifIndexes)
      for the virtual interfaces of the OLT\n   interface.  The justification for
      the additional allocation of\n   indexes is that the virtual interfaces are
      quite well distinguished,\n   as they connect different physical ONUs from the
      OLT side.  For\n   instance, there is a meaning for separate bad frames counter
      or bad\n   octets counter for each virtual link, as the ONUs can be differently\n
      \  distanced.  This is quite similar to a case of separate physical\n   interfaces.\n
      \  The same partition concept exists for the MIB module of this\n   document.
      \ Each row in the tables are indexed according to the\n   ifIndex; specifically,
      there is a row for each virtual link.  There\n   are some control objects that
      are shared and are the same for the\n   virtual interfaces (and they should
      have the same value for each\n   ifIndex), but most of the objects have different
      values for N+1\n   logical interfaces at the OLT.  This is done for each MIB
      group.  It\n   is a bit different from the [802.3ah] layering diagram, which\n
      \  presents the P2MP layer as a single layer, while duplicating the MAC\n   and
      MAC client layers (please see the diagram above).  However, from\n   a management
      perspective, it is more convenient and neat to partition\n   the management
      of the layers for the virtual links, as the atomic\n   managed entity is the
      virtual link.  It is also convenient to use the\n   interface index of the virtual
      link for that purpose, as it is\n   already used to index the rows of the virtual
      links at the Interface,\n   MAU, and etherLike interfaces MIBs.\n"
    title: 2.3.  Management Architecture
  title: 2.  Overview
- contents:
  - "3.  MIB Structure\n   This document defines the DOT3 EPON MIB module.  The DOT3
    EPON MIB\n   module defines the objects used for management of the [802.3ah]\n
    \  Point-to-Multipoint (P2MP) interfaces.  These MIB objects are\n   included
    in four groups.\n   i) The Multi-Point Control Protocol (MPCP) MIB objects - MIB
    objects\n   related to [802.3ah], clause 64, Multi-Point Control Protocol\n   attributes.
    \ The following tables are presented in this group:\n   The dot3MpcpControlTable
    defines the objects used for the\n   configuration and status indication, which
    are per logical link, of\n   MPCP compliant interfaces.\n   The dot3MpcpStatTable
    defines the statistics objects that are per\n   logical link, of MPCP compliant
    interfaces.\n   The operational mode of an OLT/ONU for the tables is defined by
    the\n   dot3MpcpMode object in the dot3MpcpControlTable.\n   ii) The OMPEmulation
    MIB objects - MIB objects related to [802.3ah],\n   clause 65, point-to-point
    emulation attributes.  The following tables\n   are presented in this group:\n
    \  The dot3OmpEmulationTable defines the objects used for the\n   configuration
    and status indication, which are per logical links, of\n   OMPEmulation compliant
    interfaces.\n   The dot3OmpEmulationStatTable defines the statistics objects that
    are\n   per logical link, of OMPEmulation compliant interfaces.\n   The operational
    mode of an OLT/ONU for the tables is defined by the\n   dot3OmpEmulationType object
    in the dot3OmpEmulationTable.\n   iii) The FEC MIB objects - MIB objects related
    to [802.3ah], clause\n   60 and clause 65, EPON FEC attributes.  The following
    table is\n   presented in this group:\n   The dot3EponFecTable defines the objects
    used for the configuration\n   and status indication, which are per logical link,
    of FEC EPON\n   compliant interfaces.\n   iv) The EPON extended package MIB objects
    - MIB objects used for\n   configuration and status indication with extended capabilities
    of the\n   EPON interfaces.  The following tables are presented in this group:\n
    \  The dot3ExtPkgControlTable defines the objects, which are per logical\n   link,
    used for the configuration and status indication of EPON\n   compliant interfaces.\n
    \  The dot3ExtPkgQueueTable defines the objects, which are per logical\n   link,
    and per queue, used for the configuration and status indication\n   of the ONU
    queues reported in the MPCP REPORT message, of EPON\n   compliant interfaces.\n
    \  The dot3ExtPkgQueueSetsTable defines the objects, which are per\n   logical
    link, per queue, and per queue_set, used for the\n   configuration and status
    indication of the ONU queue_sets reported in\n   the MPCP REPORT message, of EPON
    compliant interfaces.\n   The dot3ExtPkgOptIfTable defines the objects, which
    are per logical\n   link, used for the control and status indication of the optical\n
    \  interface of EPON compliant interfaces.\n   As described in the architecture
    section, each row in the tables is\n   indexed according to the ifIndex; specifically,
    there is a row for\n   each virtual link.  There are a few control objects that
    are shared\n   and have the same value for the virtual interfaces (and they should\n
    \  have the same value for each ifIndex), but most of the objects have\n   different
    values for N+1 logical interfaces at the OLT.  This is done\n   for each MIB group.
    \ It is a bit different from the [802.3ah]\n   layering diagram, which presents
    the P2MP layer as a single layer\n   while duplicating the MAC and MAC client
    layers.  However, from a\n   management perspective, it is more convenient and
    neat to partition\n   the management of the layers for the virtual links, as the
    atomic\n   managed entity is the virtual link.  It is also convenient to use the\n
    \  interface index of the virtual link for that purpose, as it is\n   already
    used to index the rows of the virtual links at the Interface,\n   MAU, and etherLike
    interfaces MIBs.\n   For example, provided below are the values of the MPCP control
    table\n   of an OLT with 3 registered ONUs:\n   The table below presents the MPCP
    control table of ONU1 in working\n   mode.  A single row exists in the table.\n
    \             +---------------------------+-----------------+\n              |
    MPCP control MIB object   | Value           |\n              +---------------------------+-----------------+\n
    \             | ifIndex                   | 100             |\n              |
    dot3MpcpOperStatus        | true            |\n              | dot3MpcpAdminState
    \       | true            |\n              | dot3MpcpMode              | onu             |\n
    \             | dot3MpcpSyncTime          | 25              |\n              |
    dot3MpcpLinkID            | 1               |\n              | dot3MpcpRemoteMACAddress
    \ | OLT_MAC_Address |\n              | dot3MpcpRegistrationState | registered
    \     |\n              | dot3MpcpTransmitElapsed   | 10              |\n              |
    dot3MpcpReceiveElapsed    | 10              |\n              | dot3MpcpRoundTripTime
    \    | 100             |\n              +---------------------------+-----------------+\n
    \                                 Table 1\n   OLT_MAC_Address is the MAC address
    of the OLT EPON interface.\n   The creation of the rows of the ONU interface is
    done at\n   initialization.\n   For example, provided below are the values for
    the MPCP control table\n   of the ONU, after initialization, before registration.\n
    \  The table below presents the MPCP control table of ONU1 after\n   initialization.
    \ A single row exists in the table.\n             +---------------------------+-------------------+\n
    \            | MPCP control MIB object   | Value             |\n             +---------------------------+-------------------+\n
    \            | ifIndex                   | 100               |\n             |
    dot3MpcpOperStatus        | true              |\n             | dot3MpcpAdminState
    \       | true              |\n             | dot3MpcpMode              | onu
    \              |\n             | dot3MpcpSyncTime          | 0                 |\n
    \            | dot3MpcpLinkID            | 0                 |\n             |
    dot3MpcpRemoteMACAddress  | 00:00:00:00:00:00 |\n             | dot3MpcpRegistrationState
    | unregistered      |\n             | dot3MpcpTransmitElapsed   | 0                 |\n
    \            | dot3MpcpReceiveElapsed    | 0                 |\n             |
    dot3MpcpRoundTripTime     | 0                 |\n             +---------------------------+-------------------+\n
    \                                 Table 2\n   The table below presents the MPCP
    control table of the OLT in working\n   mode.  Four rows exist in the table associated
    with the virtual\n   links.\n   +----------------+-----------+------------+------------+------------+\n
    \  | MPCP control   | Value     | Value      | Value      | Value      |\n   |
    MIB object     |           |            |            |            |\n   +----------------+-----------+------------+------------+------------+\n
    \  | ifIndex        | 100001    | 100002     | 100003     | 165535     |\n   |
    dot3MpcpOperSt | true      | true       | true       | true       |\n   | atus
    \          |           |            |            |            |\n   | dot3MpcpAdminS
    | true      | true       | true       | true       |\n   | tate           |           |
    \           |            |            |\n   | dot3MpcpMode   | olt       | olt
    \       | olt        | olt        |\n   | dot3MpcpSyncTi | 25        | 25         |
    25         | 25         |\n   | me             |           |            |            |
    \           |\n   | dot3MpcpLinkID | 1         | 2          | 3          | 65535
    \     |\n   | dot3MpcpRemote | ONU1_MAC_ | ONU2_MAC_A | ONU3_MAC_A | BRCT_MAC_A
    |\n   | MACAddress     | Address   | ddress     | ddress     | ddress     |\n
    \  | dot3MpcpRegist | registere | registered | registered | registered |\n   |
    rationState    | d         |            |            |            |\n   | dot3MpcpTransm
    | 10        | 10         | 10         | 10         |\n   | itElapsed      |           |
    \           |            |            |\n   | dot3MpcpReceiv | 10        | 10
    \        | 10         | 10         |\n   | eElapsed       |           |            |
    \           |            |\n   | dot3MpcpRoundT | 100       | 60         | 20
    \        | 0          |\n   | ripTime        |           |            |            |
    \           |\n   +----------------+-----------+------------+------------+------------+\n
    \                                 Table 3\n   ONU1_MAC_Address is the MAC address
    of ONU1 EPON interface.\n   ONU2_MAC_Address is the MAC address of ONU2 EPON interface.\n
    \  ONU3_MAC_Address is the MAC address of ONU3 EPON interface.\n   BRCT_MAC_Address
    is the MAC address of the broadcast EPON interface,\n   which is the OLT MAC address.\n
    \  The creation of the rows of the OLT interface and the broadcast\n   virtual
    interface is done at initialization.\n   The creation of rows of the virtual interfaces
    at the OLT is done\n   when the link is established (ONU registers) and the deletion
    is done\n   when the link is deleted (ONU deregisters).\n   For example, provided
    below are the values of the MPCP control table\n   of the OLT after initialization,
    before the ONUs register.\n   The table below presents the MPCP control table
    of the OLT after\n   initialization.  A single row exists in this table associated
    with\n   the virtual broadcast link.\n             +---------------------------+------------------+\n
    \            | MPCP control MIB object   | Value            |\n             +---------------------------+------------------+\n
    \            | ifIndex                   | 165535           |\n             |
    dot3MpcpOperStatus        | true             |\n             | dot3MpcpAdminState
    \       | true             |\n             | dot3MpcpMode              | olt              |\n
    \            | dot3MpcpSyncTime          | 25               |\n             |
    dot3MpcpLinkID            | 65535            |\n             | dot3MpcpRemoteMACAddress
    \ | BRCT_MAC_Address |\n             | dot3MpcpRegistrationState | registered
    \      |\n             | dot3MpcpTransmitElapsed   | 10               |\n             |
    dot3MpcpReceiveElapsed    | 100000           |\n             | dot3MpcpRoundTripTime
    \    | 0                |\n             +---------------------------+------------------+\n
    \                                 Table 4\n   BRCT_MAC_Address is the MAC address
    of the broadcast EPON interface,\n   which is the OLT MAC address.\n"
  title: 3.  MIB Structure
- contents:
  - '4.  Relation to Other MIB Modules

    '
  - contents:
    - "4.1.  Relation to the Interfaces MIB and Ethernet-like Interfaces MIB\n   EPON
      interface is a kind of Ether-like interface.  This MIB module\n   extends the
      objects of the Interface MIB and the Ether-like\n   Interfaces MIB for an EPON
      type interface.\n   Implementing this module therefore MUST require implementation
      of the\n   Interfaces MIB module [RFC2863] and the Ethernet-like Interfaces
      MIB\n   module [RFC3635].\n   Thus, each managed EPON interface would have a
      corresponding entry in\n   the mandatory tables of the Ether-like MIB module
      found in [RFC3635],\n   and likewise in the tables of the Interface MIB module
      found in\n   [RFC2863].  Also each managed virtual EPON interface would have
      a\n   corresponding entry in the mandatory tables of the Ether-like MIB\n   module
      found in [RFC3635], and likewise in the tables of the\n   Interface MIB module
      found in [RFC2863] with a dedicated ifIndex for\n   this interface.\n   In this
      document, there is no replication of the objects from these\n   MIBs.  Therefore,
      for instance, the document is defining\n   dot3MpcpRemoteMACAddress only while
      assuming that the local MAC\n   address object is already defined in [RFC3635].\n
      \  The interface MIB module [RFC2863] defines the interface index\n   (ifIndex).
      \ Interface Index, as specified in [RFC2863], is used in\n   this MIB Module
      as an index to the EPON MIB tables.  The ifIndex is\n   used to denote the physical
      interface and the virtual link interfaces\n   at the OLT.  The OLT interface
      and the virtual link interfaces are\n   stacked using the ifStack table defined
      in [RFC2863], and the\n   ifInvStack defined in [RFC2864].  The OLT interface
      is the lower\n   layer of all other interfaces associated with the virtual links.\n
      \  This document defines the specific EPON objects of an ONU interface\n   and
      an OLT interface.  Information in the tables is per LLID.  The\n   rows in the
      EPON MIB tables referring to the LLIDs are denoted with\n   the corresponding
      ifIndexes of the virtual link interfaces.\n   Please note that each virtual
      interface does not have a different\n   physical MAC address at the OLT, as
      the physical interface is the\n   same.  It is specified in the [802.3ah], Section
      64.1.2.  The\n   corresponding object of the Ether-like interface MIB is duplicated\n
      \  for all the virtual interfaces.\n   For example, the values of the Interface
      MIB objects are presented in\n   the following tables, for an OLT with 3 registered
      ONUs:\n   The table below presents the objects of the Interface MIB of an ONU\n
      \  in working mode.\n         +----------------------+--------------------------------+\n
      \        | Interface MIB object | Value                          |\n         +----------------------+--------------------------------+\n
      \        | ifIndex              | 1                              |\n         |
      ifDescr              | \"interface description\"        |\n         | ifType
      \              | ethernetCsmacd (6) 1000base-Px |\n         | ifMtu                |
      MTU size (1522)                |\n         | ifSpeed              | 1000000000
      \                    |\n         | ifPhysAddress        | ONU_MAC_Address                |\n
      \        | ifAdminStatus        | up                             |\n         |
      ifOperStatus         | Up                             |\n         | ifLastChange
      \        | ONUup_time                     |\n         | ifInOctets           |
      ONU_octets_number              |\n         | ifInUcastPkts        | ONU_unicast_frame_number
      \      |\n         | ifInNUcastPkts       | ONU_non_unicast_frame_number   |\n
      \        | ifInDiscards         | ONU_discard_frame_number       |\n         |
      ifInErrors           | ONU_error_frame_number         |\n         | ifInUnknownProtos
      \   | ONU_unknown_frame_number       |\n         | ifOutOctets          | ONU_octets_number
      \             |\n         | ifOutUcastPkts       | ONU_unicast_frame_number
      \      |\n         | ifOutNUcastPkts      | ONU_non_unicast_frame_number   |\n
      \        | ifOutDiscards        | ONU_discard_frame_number       |\n         |
      ifOutErrors          | ONU_error_frame_number         |\n         | ifOutQLen
      \           | ONU_queue_frame_number         |\n         +----------------------+--------------------------------+\n
      \                                 Table 5\n   ONU_MAC_Address is the MAC address
      of the ONU EPON interface.\n   The table below presents the objects of the Interface
      MIB of the ONU\n   interface.\n         +----------------------+--------------------------------+\n
      \        | Interface MIB object | Value                          |\n         +----------------------+--------------------------------+\n
      \        | ifIndex              | 100                            |\n         |
      ifDescr              | \"interface description\"        |\n         | ifType
      \              | ethernetCsmacd (6) 1000base-Px |\n         | ifMtu                |
      MTU size (1522)                |\n         | ifSpeed              | 1000000000
      \                    |\n         | ifPhysAddress        | ONU_MAC_Address                |\n
      \        | ifAdminStatus        | up                             |\n         |
      ifOperStatus         | Up                             |\n         | ifLastChange
      \        | up_time                        |\n         | ifInOctets           |
      ONU1_octets_number             |\n         | ifInUcastPkts        | ONU1_unicast_frame_number
      \     |\n         | ifInNUcastPkts       | ONU1_non_unicast_frame_number  |\n
      \        | ifInDiscards         | ONU1_discard_frame_number      |\n         |
      ifInErrors           | ONU1_error_frame_number        |\n         | ifInUnknownProtos
      \   | ONU1_unknown_frame_number      |\n         | ifOutOctets          | ONU1_octets_number
      \            |\n         | ifOutUcastPkts       | ONU1_unicast_frame_number
      \     |\n         | ifOutNUcastPkts      | ONU1_non_unicast_frame_number  |\n
      \        | ifOutDiscards        | ONU1_discard_frame_number      |\n         |
      ifOutErrors          | ONU1_error_frame_number        |\n         | ifOutQLen
      \           | ONU1_queue_frame_number        |\n         +----------------------+--------------------------------+\n
      \                                 Table 6\n   ONU_MAC_Address is the MAC address
      of the ONU EPON interface.\n   The following values will be set in the ifStack
      and ifInvStack tables\n   related to this example.\n   ifStackTable:\n   ifStackHigherLayer=100,
      ifStackLowerLayer=1 - map between the\n   physical interface and the ONU\n   ifInvStackTable:\n
      \  ifStackLowerLayer=1, ifStackHigherLayer=100,- map between the ONU and\n   the
      physical interface\n   The table below presents the Interface MIB objects of
      an OLT\n   interface.\n         +----------------------+--------------------------------+\n
      \        | Interface MIB object | Value                          |\n         +----------------------+--------------------------------+\n
      \        | ifIndex              | 2                              |\n         |
      ifDescr              | \"interface description\"        |\n         | ifType
      \              | ethernetCsmacd (6) 1000base-Px |\n         | ifMtu                |
      MTU size (1522)                |\n         | ifSpeed              | 1000000000
      \                    |\n         | ifPhysAddress        | OLT_MAC_Address                |\n
      \        | ifAdminStatus        | up                             |\n         |
      ifOperStatus         | Up                             |\n         | ifLastChange
      \        | OLTup_time                     |\n         | ifInOctets           |
      OLT_octets_number              |\n         | ifInUcastPkts        | OLT_unicast_frame_number
      \      |\n         | ifInNUcastPkts       | OLT_non_unicast_frame_number   |\n
      \        | ifInDiscards         | OLT_discard_frame_number       |\n         |
      ifInErrors           | OLT_error_frame_number         |\n         | ifInUnknownProtos
      \   | OLT_unknown_frame_number       |\n         | ifOutOctets          | OLT_octets_number
      \             |\n         | ifOutUcastPkts       | OLT_unicast_frame_number
      \      |\n         | ifOutNUcastPkts      | OLT_non_unicast_frame_number   |\n
      \        | ifOutDiscards        | OLT_discard_frame_number       |\n         |
      ifOutErrors          | OLT_error_frame_number         |\n         | ifOutQLen
      \           | OLT_queue_frame_number         |\n         +----------------------+--------------------------------+\n
      \                                 Table 7\n   OLT_MAC_Address is the MAC address
      of the OLT EPON interface.\n   The table below presents the Interface MIB objects
      of an OLT\n   interface, associated with the virtual link interfaces.\n   +----------+-------------+-------------+-------------+--------------+\n
      \  | Interfac | Value       | Value       | Value       | Value        |\n   |
      eMIB     |             |             |             |              |\n   |  object
      \ |             |             |             |              |\n   +----------+-------------+-------------+-------------+--------------+\n
      \  | ifIndex  | 200001      | 200002      | 200003      | 265535       |\n   |
      ifDescr  | \"interface  | \"interface  | \"interface  | \"interface   |\n   |
      \         | description | description | description | description\" |\n   |
      \         | \"           | \"           | \"           |              |\n   |
      ifType   | ethernetCsm | ethernetCsm | ethernetCsm | ethernetCsma |\n   |          |
      acd (6)     | acd (6)     | acd (6)     | cd (6)       |\n   | ifMtu    | MTUsize(152
      | MTUsize(152 | MTUsize(152 | MTUsize(1522 |\n   |          | 2)          |
      2)          | 2)          | )            |\n   | ifSpeed  | 1000000000  | 1000000000
      \ | 1000000000  | 1000000000   |\n   | ifPhysAd | OLT_MAC_Add | OLT_MAC_Add
      | OLT_MAC_Add | OLT_MAC_Addr |\n   | dress    | ress        | ress        |
      ress        | ess          |\n   | ifAdminS | up          | up          | up
      \         | up           |\n   | tatus    |             |             |             |
      \             |\n   | ifOperSt | Up          | Up          | Up          | Up
      \          |\n   | atus     |             |             |             |              |\n
      \  | ifLastCh | ONU1_up_tim | ONU2_up_tim | ONU3_up_tim | up_time      |\n   |
      ange     | e           | e           | e           |              |\n   | ifInOcte
      | ONU1_octets | ONU2_octets | ONU3_octets | BRCT_octets_ |\n   | ts       |
      _number     | _number     | _number     | number       |\n   | ifInUcas | ONU1_unic_f
      | ONU2_unic_f | ONU3_unic_f | BRCT_unic_fr |\n   | tPkts    | rame_num    |
      rame_num    | rame_num    | ame_num      |\n   | ifInNUca | ONU1_non_un | ONU2_non_un
      | ONU3_non_un | BRCT_non_uni |\n   | stPkts   | ic_frame_nu | ic_frame_nu |
      ic_frame_nu | c_frame_num  |\n   |          | m           | m           | m
      \          |              |\n   | ifInDisc | ONU1_disc_f | ONU2_disc_f | ONU3_disc_f
      | BRCT_disc_fr |\n   | ards     | rame_num    | rame_num    | rame_num    |
      ame_numr     |\n   | ifInErro | ONU1_err_fr | ONU2_err_fr | ONU3_err_fr | BRCT_err_fra
      |\n   | rs       | ame_num     | ame_num     | ame_num     | me_num       |\n
      \  | ifInUnkn | ONU1_unknw_ | ONU2_unknw_ | ONU3_unknw_ | BRCT_unknw_f |\n   |
      ownProto | frame_num   | frame_num   | frame_num   | rame_num     |\n   | s
      \       |             |             |             |              |\n   | ifOutOct
      | ONU1_octets | ONU2_octets | ONU3_octets | BRCT_octets_ |\n   | ets      |
      _number     | _number     | _number     | number       |\n   | ifOutUca | ONU1_unic_f
      | ONU2_unic_f | ONU3_unic_f | BRCT_unic_fr |\n   | stPkts   | rame_num    |
      rame_num    | rame_num    | ame_num      |\n   | ifOutNUc | ONU1_non_un | ONU2_non_un
      | ONU3_non_un | BRCT_non_uni |\n   | astPkts  | ic_frame_nu | ic_frame_nu |
      ic_frame_nu | c_frame_num  |\n   |          | m           | m           | m
      \          |              |\n   +----------+-------------+-------------+-------------+--------------+\n
      \  | Interfac | Value       | Value       | Value       | Value        |\n   |
      eMIB     |             |             |             |              |\n   |  object
      \ |             |             |             |              |\n   +----------+-------------+-------------+-------------+--------------+\n
      \  | ifOutDis | ONU1_disc_f | ONU2_disc_f | ONU3_disc_f | BRCT_disc_fr |\n   |
      cards    | rame_num    | rame_num    | rame_num    | ame_num      |\n   | ifOutErr
      | ONU1_err_fr | ONU2_err_fr | ONU3_err_fr | BRCT_err_fra |\n   | ors      |
      ame_num     | ame_num     | ame_num     | me_num       |\n   | ifOutQLe | ONU1_queue_
      | ONU2_queue_ | ONU3_queue_ | BRCt_queue_f |\n   | n        | frame_num   |
      frame_num   | frame_num   | rame_num     |\n   +----------+-------------+-------------+-------------+--------------+\n
      \                                 Table 8\n   OLT_MAC_Address is the MAC address
      of the OLT EPON interface.\n   The following values will be set in the ifStack
      and ifInvStack tables\n   related to this example:\n   ifStackTable:\n   ifStackHigherLayer=265535,
      ifStackLowerLayer=2 - map between the OLT\n   physical interface and its broadcast
      virtual interface\n   ifStackHigherLayer=200001, ifStackLowerLayer=2 - map between
      the OLT\n   physical interface and its virtual interface of the 1st ONU\n   ifStackHigherLayer=200002,
      ifStackLowerLayer=2 - map between the OLT\n   physical interface and its virtual
      interface of the 2nd ONU\n   ifStackHigherLayer=200003, ifStackLowerLayer=2
      - map between the OLT\n   physical interface and its virtual interface of the
      3rd ONU\n   ifInvStackTable:\n   ifStackLowerLayer=2, ifStackHigherLayer=265535,
      - map between the\n   broadcast interface of the OLT and the OLT physical interface\n
      \  ifStackLowerLayer=2, ifStackHigherLayer=200001 - map between the OLT\n   virtual
      interface of the 1st ONU and the OLT physical interface\n   ifStackLowerLayer=2,
      ifStackHigherLayer=200002 - map between the OLT\n   virtual interface of the
      2nd ONU and the OLT physical interface\n   ifStackLowerLayer=2, ifStackHigherLayer=200003
      - map between the OLT\n   virtual interface of the 3rd ONU and the OLT physical
      interface\n   The rows for the ONU interface, the OLT interface, and the OLT\n
      \  broadcast interface are created in initialization.\n   The creation of a
      row for a virtual link is done when the virtual\n   link is established (ONU
      registers), and deletion is done when the\n   virtual link is deleted (ONU deregisters).\n
      \  The EPON MIB module also extends the Interface MIB module with a set\n   of
      counters, which are specific for the EPON interface.  The EPON MIB\n   module
      implements the same handling of the counters when the\n   operation of the interface
      starts or stops.  The interface MIB\n   document describes the possible behavior
      of counters when an\n   interface is re-initialized using the ifCounterDiscontinuityTime\n
      \  indicator, indicating the discontinuity of the counters.  Please see\n   [RFC2863],
      Section 3.1.5, page 11 for more information.  The counters\n   of the EPON MIB
      should be handled in a similar manner.\n"
    title: 4.1.  Relation to the Interfaces MIB and Ethernet-like Interfaces MIB
  - contents:
    - "4.2.  Relation to the IEEE 802.3 MAU MIBs\n   The MAU types of the EPON Interface
      are defined in the amended MAU\n   MIB document.  This document assumes the
      implementation of the MAU\n   MIB for this purpose and does not repeat the EPON
      MAU types.\n   Therefore, implementing this module MUST require implementation
      of\n   the MAU-MIB module [RFC4836].\n   The handling of the ifMAU tables for
      the EPON case is similar to the\n   handling described in the former section
      for the Interface and Ether-\n   like interface MIBs.  A single row exists for
      the ONU in the\n   ifMauTable.  A row for each virtual link (N+1 rows) exists
      at the\n   OLT, with a separate value of ifMauIfIndex for each virtual link.\n
      \  As specified above, the rows for the ONU interface, the OLT\n   interface,
      and the OLT broadcast interface are created in\n   initialization.\n   The creation
      of a row for a virtual link is done when the virtual\n   link is established
      (ONU registers), and deletion is done when the\n   virtual link is deleted (ONU
      deregisters).\n"
    title: 4.2.  Relation to the IEEE 802.3 MAU MIBs
  - contents:
    - "4.3.  Relation to the EFM OAM MIB\n   The EPON interfaces are aimed to the
      optical access networks and most\n   probably will be accompanied with the implementation
      of the OAM\n   section of the [802.3ah].  Therefore, the EFM OAM MIB module\n
      \  [RFC4878] MAY be implemented when this MIB module is implemented\n   defining
      managed objects for the OAM layer that are complementary to\n   the EFM EPON
      MIB module.  As the OAM is defined for a point-to-point\n   link it is implemented
      in this case using the virtual links that are\n   defined for the P2MP network,
      so that an instance is held for each\n   Logical Link Identifier (LLID) of the
      EPON.  The corresponding\n   ifIndex of the virtual link is used as the ifIndex
      of the tables of\n   the OAM MIB module for this purpose.\n"
    title: 4.3.  Relation to the EFM OAM MIB
  - contents:
    - "4.4.  Relation to the Bridge MIB\n   It is very probable that an EPON OLT will
      implement a bridging\n   functionality above the EPON interface layer, bridging
      between the\n   EPON users and the network.  Bridge functionality is specified
      at\n   [802.1d].  In this scenario, the virtual ports of the EPON are\n   corresponding
      to the virtual bridge ports.  There is a direct mapping\n   between the bridge
      ports and the LLIDs, which are virtual EPON\n   channels.\n   Therefore, the
      bridge MIB modules ([RFC4188] and [RFC1525]) MAY be\n   implemented when the
      EFM EPON MIB module is implemented for an EPON\n   OLT, defining managed objects
      for the bridge layer.\n   The values of dot1dBasePortIfIndex would correspond
      to the ifIndex of\n   the virtual port (1 for LLID1, 2 for LLID2, etc.).\n   The
      broadcast virtual EPON interface of the OLT has no direct mapping\n   to a virtual
      bridge port as it is not port specific but used for\n   broadcast traffic.\n"
    title: 4.4.  Relation to the Bridge MIB
  title: 4.  Relation to Other MIB Modules
- contents:
  - "5.  Mapping of IEEE 802.3ah Managed Objects\n   This section contains the mapping
    between the managed objects defined\n   in this document and the attributes defined
    in [802.3ah], clause 30.\n   The tables are divided into relevant groups.\n                    oMPCP
    managed object class (30.3.5)\n   +----------------------------+-------------------------+------------+\n
    \  | dot3EPON MIB module object | IEEE802.3ah attribute   | Reference  |\n   +----------------------------+-------------------------+------------+\n
    \  | ifIndex                    | aMPCPID                 | 30.3.5.1.1 |\n   |
    dot3MpcpOperStatus         | aMPCPAdminState         | 30.3.5.1.2 |\n   | dot3MpcpMode
    \              | aMPCPMode               | 30.3.5.1.3 |\n   | dot3MpcpLinkID             |
    aMPCPLinkID             | 30.3.5.1.4 |\n   | dot3MpcpRemoteMACAddress   | aMPCPRemoteMACAddress
    \  | 30.3.5.1.5 |\n   | dot3MpcpRegistrationState  | aMPCPRegistrationState  |
    30.3.5.1.6 |\n   | dot3MpcpMACCtrlFramesTrans | aMPCPMACCtrlFramesTrans | 30.3.5.1.7
    |\n   | mitted                     | mitted                  |            |\n
    \  | dot3MpcpMACCtrlFramesRecei | aMPCPMACCtrlFramesRecei | 30.3.5.1.8 |\n   |
    ved                        | ved                     |            |\n   | dot3MpcpTxGate
    \            | aMPCPTxGate             | 30.3.5.1.9 |\n   | dot3MpcpTxRegAck           |
    aMPCPTxRegAck           | 30.3.5.1.1 |\n   |                            |                         |
    0          |\n   | dot3MpcpTxRegister         | aMPCPTxRegister         | 30.3.5.1.1
    |\n   |                            |                         | 1          |\n
    \  | dot3MpcpTxRegRequest       | aMPCPTxRegRequest       | 30.3.5.1.1 |\n   |
    \                           |                         | 2          |\n   | dot3MpcpTxReport
    \          | aMPCPTxReport           | 30.3.5.1.1 |\n   |                            |
    \                        | 3          |\n   | dot3MpcpRxGate             | aMPCPRxGate
    \            | 30.3.5.1.1 |\n   |                            |                         |
    4          |\n   | dot3MpcpRxRegAck           | aMPCPRxRegAck           | 30.3.5.1.1
    |\n   |                            |                         | 5          |\n
    \  | dot3MpcpRxRegister         | aMPCPRxRegister         | 30.3.5.1.1 |\n   |
    \                           |                         | 6          |\n   | dot3MpcpRxRegRequest
    \      | aMPCPRxRegRequest       | 30.3.5.1.1 |\n   |                            |
    \                        | 7          |\n   | dot3MpcpRxReport           | aMPCPRxReport
    \          | 30.3.5.1.1 |\n   |                            |                         |
    8          |\n   | dot3MpcpTransmitElapsed    | aMPCPTransmitElapsed    | 30.3.5.1.1
    |\n   |                            |                         | 9          |\n
    \  | dot3MpcpReceiveElapsed     | aMPCPReceiveElapsed     | 30.3.5.1.2 |\n   |
    \                           |                         | 0          |\n   | dot3MpcpRoundTripTime
    \     | aMPCPRoundTripTime      | 30.3.5.1.2 |\n   |                            |
    \                        | 1          |\n   | dot3MpcpDiscoveryWindowsSe | aMPCPDiscoveryWindowsSe
    | 30.3.5.1.2 |\n   | nt                         | nt                      | 2
    \         |\n   +----------------------------+-------------------------+------------+\n
    \  | dot3EPON MIB module object | IEEE802.3ah attribute   | Reference  |\n   +----------------------------+-------------------------+------------+\n
    \  | dot3MpcpDiscoveryTimeout   | aMPCPDiscoveryTimeout   | 30.3.5.1.2 |\n   |
    \                           |                         | 3          |\n   | dot3MpcpMaximumPendingGran
    | aMPCPMaximumPendingGran | 30.3.5.1.2 |\n   | ts                         | ts
    \                     | 4          |\n   | dot3MpcpAdminState         | aMPCPAdminControl
    \      | 30.3.5.2.1 |\n   | dot3MpcpSyncTime           | SyncTime                |
    64.3.3.2   |\n   +----------------------------+-------------------------+------------+\n
    \                                 Table 9\n                oOMPEmulation managed
    object class (30.3.7)\n   +-------------------------------------+-----------------+-----------+\n
    \  | dot3EPON MIB module object          | IEEE802.3ah     | Reference |\n   |
    \                                    | attribute       |           |\n   +-------------------------------------+-----------------+-----------+\n
    \  | ifIndex                             | aOMPEmulationID | 30.3.7.1. |\n   |
    \                                    |                 | 1         |\n   | dot3OmpEmulationType
    \               | aOMPEmulationTy | 30.3.7.1. |\n   |                                     |
    pe              | 2         |\n   | dot3OmpEmulationSLDErrors           | aSLDErrors
    \     | 30.3.7.1. |\n   |                                     |                 |
    3         |\n   | dot3OmpEmulationCRC8Errors          | aCRC8Errors     | 30.3.7.1.
    |\n   |                                     |                 | 4         |\n
    \  | dot3OmpEmulationGoodLLID            | aGoodLLID       | 30.3.7.1. |\n   |
    \                                    |                 | 5         |\n   | dot3OmpEmulationOnuPonCastLLID
    \     | aONUPONcastLLID | 30.3.7.1. |\n   |                                     |
    \                | 6         |\n   | dot3OmpEmulationOltPonCastLLID      | aOLTPONcastLLID
    | 30.3.7.1. |\n   |                                     |                 | 7
    \        |\n   | dot3OmpEmulationBadLLID             | aBadLLID        | 30.3.7.1.
    |\n   |                                     |                 | 8         |\n
    \  | dot3OmpEmulationBroadcastBitNotOnuL |                 |           |\n   |
    Lid                                 |                 |           |\n   | dot3OmpEmulationOnuLLIDNotBroadcast
    |                 |           |\n   | dot3OmpEmulationBroadcastBitPlusOnu |                 |
    \          |\n   | Llid                                |                 |           |\n
    \  | dot3OmpEmulationNotBroadcastBitNotO |                 |           |\n   |
    nuLlid                              |                 |           |\n   +-------------------------------------+-----------------+-----------+\n
    \                                Table 10\n                    oMAU managed object
    class (30.5.1)\n   +--------------------------------+---------------------+------------+\n
    \  | dot3EPON MIB module object     | IEEE802.3ah         | Reference  |\n   |
    \                               | attribute           |            |\n   +--------------------------------+---------------------+------------+\n
    \  | dot3EponFecPCSCodingViolation  | aPCSCodingViolation | 30.5.1.1.1 |\n   |
    \                               |                     | 2          |\n   | dot3EponFecAbility
    \            | aFECAbility         | 30.5.1.1.1 |\n   |                                |
    \                    | 3          |\n   | dot3EponFecMode                | aFECmode
    \           | 30.5.1.1.1 |\n   |                                |                     |
    4          |\n   | dot3EponFecCorrectedBlocks     | aFECCorrectedBlocks | 30.5.1.1.1
    |\n   |                                |                     | 5          |\n
    \  | dot3EponFecUncorrectableBlocks | aFECUncorrectableBl | 30.5.1.1.1 |\n   |
    \                               | ocks                | 6          |\n   | dot3EponFecBufferHeadCodingVio
    |                     |            |\n   | lation                         |                     |
    \           |\n   +--------------------------------+---------------------+------------+\n
    \                                Table 11\n"
  title: 5.  Mapping of IEEE 802.3ah Managed Objects
- contents:
  - '6.   Definitions - The DOT3 EPON MIB Module

    '
  - "DOT3-EPON-MIB DEFINITIONS ::= BEGIN\n     IMPORTS\n         MODULE-IDENTITY,
    mib-2, OBJECT-TYPE, Counter32,\n         Integer32, Unsigned32, Counter64\n             FROM
    SNMPv2-SMI\n         TruthValue, MacAddress\n             FROM SNMPv2-TC\n         ifIndex\n
    \            FROM IF-MIB\n         MODULE-COMPLIANCE, OBJECT-GROUP\n             FROM
    SNMPv2-CONF\n         ;\n"
  - "dot3EponMIB MODULE-IDENTITY\n    LAST-UPDATED \"200703290000Z\"  -- March 29,
    2007\n    ORGANIZATION \"IETF Ethernet Interfaces and Hub MIB Working\n                 Group\"\n
    \   CONTACT-INFO\n                 \"WG charter:\n              http://www.ietf.org/html.charters/hubmib-charter.html\n
    \                 Mailing Lists:\n                    General Discussion: hubmib@ietf.org\n
    \                   To Subscribe: hubmib-request@ietf.org\n                    In
    Body: subscribe your_email_address\n                    Chair: Bert Wijnen\n                    Postal:
    Lucent Technologies\n                            Schagen 33\n                            3461
    GL Linschoten\n                            Netherlands\n                    Tel:
    +31-348-407-775\n                    E-mail: bwijnen@lucent.com\n                    Editor:
    Lior Khermosh\n                    Postal: PMC-SIERRA\n                            Kohav
    Hertzelia bldg,\n                            4 Hasadnaot St.\n                            Hertzliya
    Pituach 46120,\n                            ISRAEL\n                            P.O.Box
    2089 Hertzliya Pituach 46120 Israel\n                    Tel: +972-9-9628000 Ext:
    302\n                    E-mail: lior_khermosh@pmc-sierra.com\"\n    DESCRIPTION\n
    \           \"The objects in this MIB module are used to manage the\n             Ethernet
    in the First Mile (EFM) Ethernet Passive Optical\n             Network (EPON)
    Interfaces as defined in IEEE P802.3ah\n             clauses 60, 64, and 65.\n
    \        The following reference is used throughout this MIB module:\n           [802.3ah]
    refers to:\n             Information technology - Telecommunications and\n             information
    exchange between systems - Local and\n             metropolitan area networks
    - Specific requirements -\n             Part 3: Carrier sense multiple access
    with collision\n             detection (CSMA/CD) access method and physical layer\n
    \            specifications - Media Access Control Parameters,\n             Physical
    Layers and Management Parameters for subscriber\n             access networks.
    \ IEEE Std 802.3ah-2004, October 2004.\n          Of particular interest are clause
    64 (Multi-Point Control\n          Protocol - MPCP), clause 65 (Point-to-Multipoint\n
    \         Reconciliation Sublayer - P2MP RS), clause 60 (Ethernet\n          Passive
    Optical Network Physical Medium Dependent - EPON\n          PMDs), clause 30,
    'Management', and clause 45, 'Management\n          Data Input/Output (MDIO) Interface'.\n
    \         Copyright (C) The IETF Trust (2007).  This version\n          of this
    MIB module is part of 4837; see the RFC itself for\n          full legal notices.\n
    \         Key abbreviations:\n            BER - Bit Error Rate\n            BW
    - bandwidth\n            CRC - Cyclic Redundancy Check\n            EFM - Ethernet
    First Mile\n            EPON - Ethernet Passive Optical Network\n            FEC
    \ - Forward Error Correction\n            LLID - Logical Link Identifier\n            MAC
    - Media Access Control\n            Mbps - Megabit per second\n            MDIO
    - Management Data Input/Output\n            MPCP - Multi-Point Control Protocol\n
    \           OLT - Optical Line Terminal (Server unit of the EPON)\n            OMP
    - Optical Multi-Point\n            ONU - Optical Network Unit (Client unit of
    the EPON)\n            P2MP - Point-to-Multipoint\n            PHY - Physical
    Layer\n            PMD - Physical Medium Dependent\n            PON - Passive
    Optical Network\n            RTT - Round Trip Time\n            SLD - Start of
    LLID Delimiter\n            TQ - Time Quanta\n          \"\n    REVISION    \"200703290000Z\"
    \ -- March 29, 2007\n    DESCRIPTION \"Initial version, published as RFC 4837.\"\n
    \   ::= { mib-2 155 }\n"
  - 'dot3EponObjects OBJECT IDENTIFIER ::= { dot3EponMIB 1}

    '
  - 'dot3EponConformance OBJECT IDENTIFIER ::= { dot3EponMIB 2}

    '
  - '-- MPCP MIB modules definitions ([802.3ah], clause 30.3.5)

    '
  - "dot3EponMpcpObjects\n     OBJECT IDENTIFIER ::= { dot3EponObjects 1 }\n"
  - "dot3MpcpControlTable OBJECT-TYPE\n    SYNTAX  SEQUENCE OF Dot3MpcpControlEntry\n
    \   MAX-ACCESS  not-accessible\n    STATUS  current\n    DESCRIPTION\n            \"A
    Table of dot3 Multi-Point Control Protocol (MPCP)\n             MIB objects.  The
    entries in the table are control and\n             status objects of the MPCP.\n
    \            Each object has a row for every virtual link denoted by\n             the
    corresponding ifIndex.\n             The LLID field, as defined in the [802.3ah],
    is a 2-byte\n             register (15-bit field and a broadcast bit) limiting
    the\n             number of virtual links to 32768.  Typically the number\n             of
    expected virtual links in a PON is like the number of\n             ONUs, which
    is 32-64, plus an additional entry for\n             broadcast LLID (with a value
    of 0xffff).\"\n    ::= { dot3EponMpcpObjects 1 }\n"
  - "dot3MpcpControlEntry OBJECT-TYPE\n    SYNTAX  Dot3MpcpControlEntry\n    MAX-ACCESS
    \ not-accessible\n    STATUS  current\n    DESCRIPTION\n            \"An entry
    in the dot3 MPCP Control table.\n             Rows exist for an OLT interface
    and an ONU interface.\n             A row in the table is denoted by the ifIndex
    of the link\n             and it is created when the ifIndex is created.\n             The
    rows in the table for an ONU interface are created\n             at system initialization.\n
    \            The row in the table corresponding to the OLT ifIndex\n             and
    the row corresponding to the broadcast virtual link\n             are created
    at system initialization.\n             A row in the table corresponding to the
    ifIndex of a\n             virtual links is created when a virtual link is\n             established
    (ONU registers) and deleted when the virtual\n             link is deleted (ONU
    deregisters).\"\n    INDEX  { ifIndex }\n    ::= { dot3MpcpControlTable 1}\n"
  - "Dot3MpcpControlEntry ::=\n    SEQUENCE {\n        dot3MpcpOperStatus                   TruthValue,\n
    \       dot3MpcpAdminState                   TruthValue,\n        dot3MpcpMode
    \                        INTEGER,\n        dot3MpcpSyncTime                     Unsigned32,\n
    \       dot3MpcpLinkID                       Unsigned32,\n        dot3MpcpRemoteMACAddress
    \            MacAddress,\n        dot3MpcpRegistrationState            INTEGER,\n
    \       dot3MpcpTransmitElapsed              Unsigned32,\n        dot3MpcpReceiveElapsed
    \              Unsigned32,\n        dot3MpcpRoundTripTime                Unsigned32,\n
    \       dot3MpcpMaximumPendingGrants         Unsigned32\n    }\n"
  - "dot3MpcpOperStatus OBJECT-TYPE\n    SYNTAX  TruthValue\n    MAX-ACCESS  read-only\n
    \   STATUS  current\n    DESCRIPTION\n            \"This object reflects the operational
    state of the\n             Multi-Point MAC Control sublayer as defined in\n             [802.3ah],
    clause 64.  When the value is true(1), the\n             interface will act as
    if the Multi-Point Control Protocol\n             is enabled.  When the value
    is false(2), the interface\n             will act as if the Multi-Point Control
    Protocol is\n             disabled.  The operational state can be changed using
    the\n             dot3MpcpAdminState object.\n             This object is applicable
    for an OLT, with the same\n             value for all virtual interfaces, and
    for an ONU.\"\n    REFERENCE   \"[802.3ah], 30.3.5.1.2.\"\n    ::= { dot3MpcpControlEntry
    1 }\n"
  - "dot3MpcpAdminState OBJECT-TYPE\n    SYNTAX  TruthValue\n    MAX-ACCESS  read-write\n
    \   STATUS  current\n    DESCRIPTION\n            \"This object is used to define
    the admin state of the\n             Multi-Point MAC Control sublayer, as defined
    in\n             [802.3ah], clause 64, and to reflect its state.\n             When
    selecting the value as true(1), the Multi-Point\n             Control Protocol
    of the interface is enabled.\n             When selecting the value as false(2),
    the Multi-Point\n             Control Protocol of the interface is disabled.\n
    \            This object reflects the administrative state of the\n             Multi-Point
    Control Protocol of the interface.\n             The write operation is not restricted
    in this document\n             and can be done at any time.  Changing\n             dot3MpcpAdminState
    state can lead to disabling the\n             Multi-Point Control Protocol on
    the respective interface,\n             leading to the interruption of service
    for the users\n             connected to the respective EPON interface.\n             This
    object is applicable for an OLT, with the same\n             value for all virtual
    interfaces, and for an ONU.\"\n    REFERENCE   \"[802.3ah], 30.3.5.2.1.\"\n    DEFVAL
    { false }\n    ::= { dot3MpcpControlEntry 2 }\n"
  - "dot3MpcpMode  OBJECT-TYPE\n    SYNTAX  INTEGER {\n            olt(1),\n            onu(2)\n
    \   }\n    MAX-ACCESS  read-only\n    STATUS  current\n    DESCRIPTION\n            \"This
    object is used to identify the operational\n             state of the Multi-Point
    MAC Control sublayer as\n             defined in [802.3ah], clause 64.  Reading
    olt(1) for an\n             OLT (server) mode and onu(2) for an ONU (client) mode.\n
    \            This object is used to identify the operational mode\n             for
    the MPCP tables.\n             This object is applicable for an OLT, with the
    same\n             value for all virtual interfaces, and for an ONU.\"\n    REFERENCE
    \  \"[802.3ah], 30.3.5.1.3.\"\n    DEFVAL { olt }\n    ::= { dot3MpcpControlEntry
    3 }\n"
  - "dot3MpcpSyncTime OBJECT-TYPE\n    SYNTAX  Unsigned32\n    UNITS       \"TQ (16nsec)\"\n
    \   MAX-ACCESS  read-only\n    STATUS  current\n    DESCRIPTION\n            \"An
    object that reports the 'sync lock time' of the\n             OLT receiver in
    increments of Time Quanta (TQ)-16ns\n             as defined in [802.3ah], clauses
    60, 64, and 65.  The\n             value returned shall be (sync lock time ns)/16.
    \ If\n             this value exceeds (2^32-1), the value (2^32-1) shall\n             be
    returned.  This object is applicable for an OLT,\n             with the same value
    for all virtual interfaces, and\n             for an ONU.\"\n    REFERENCE   \"[802.3ah],
    64.3.3.2.\"\n   ::= { dot3MpcpControlEntry 4 }\n"
  - "dot3MpcpLinkID OBJECT-TYPE\n    SYNTAX  Unsigned32\n    MAX-ACCESS  read-only\n
    \   STATUS  current\n    DESCRIPTION\n            \"An object that identifies
    the Logical Link\n             Identifier (LLID) associated with the MAC of the
    virtual\n             link as specified in [802.3ah], clause 65.1.3.2.2.\n             This
    object is applicable for an OLT and an ONU.  At the\n             OLT, it has
    a distinct value for each virtual interface.\n             The ONU and the corresponding
    virtual MAC of the OLT,\n             for the same virtual link, have the same
    value.\n             Value is assigned when the ONU registers.\n             Value
    is freed when the ONU deregisters.\"\n    REFERENCE   \"[802.3ah], 30.3.5.1.4.\"\n
    \   ::= { dot3MpcpControlEntry 5 }\n"
  - "dot3MpcpRemoteMACAddress OBJECT-TYPE\n    SYNTAX  MacAddress\n    MAX-ACCESS
    \ read-only\n    STATUS  current\n    DESCRIPTION\n            \"An object that
    identifies the source_address\n             parameter of the last MPCPDUs passed
    to the MAC Control.\n             This value is updated on reception of a valid
    frame with\n             1) a destination Field equal to the reserved multicast\n
    \            address for MAC Control as specified in [802.3], Annex\n             31A;
    2) the lengthOrType field value equal to the reserved\n             Type for MAC
    Control as specified in [802.3], Annex\n             31A; 3) an MPCP subtype value
    equal to the subtype\n             reserved for MPCP as specified in [802.3ah],
    Annex 31A.\n             This object is applicable for an OLT and an ONU.  At
    the\n             OLT, it has a distinct value for each virtual interface.\n             The
    value reflects the MAC address of the remote entity\n             and therefore
    the OLT holds a value for each LLID, which\n             is the MAC address of
    the ONU; the ONU has a single\n             value that is the OLT MAC address.\"\n
    \   REFERENCE   \"[802.3ah], 30.3.5.1.5.\"\n    ::= { dot3MpcpControlEntry 6 }\n"
  - "dot3MpcpRegistrationState OBJECT-TYPE\n    SYNTAX  INTEGER {\n            unregistered(1),\n
    \           registering(2),\n            registered(3)\n    }\n    MAX-ACCESS
    \ read-only\n    STATUS  current\n    DESCRIPTION\n            \"An object that
    identifies the registration state\n             of the Multi-Point MAC Control
    sublayer as defined in\n             [802.3ah], clause 64.  When this object has
    the\n             enumeration unregistered(1), the interface is\n             unregistered
    and may be used for registering a link\n             partner.  When this object
    has the enumeration\n             registering(2), the interface is in the process
    of\n             registering a link-partner.  When this object has the\n             enumeration
    registered(3), the interface has an\n             established link-partner.\n
    \            This object is applicable for an OLT and an ONU.  At the\n             OLT,
    it has a distinct value for each virtual interface.\"\n    REFERENCE   \"[802.3ah],
    30.3.5.1.6.\"\n    ::= { dot3MpcpControlEntry 7 }\n"
  - "dot3MpcpTransmitElapsed OBJECT-TYPE\n    SYNTAX  Unsigned32\n    UNITS       \"TQ
    (16nsec)\"\n    MAX-ACCESS  read-only\n    STATUS  current\n    DESCRIPTION\n
    \           \"An object that reports the interval from the last\n             MPCP
    frame transmission in increments of Time Quanta\n             (TQ)-16ns.  The
    value returned shall be (interval from\n             last MPCP frame transmission
    in ns)/16.  If this value\n             exceeds (2^32-1), the value (2^32-1) shall
    be returned.\n             This object is applicable for an OLT and an ONU.  At
    the\n             OLT, it has a distinct value for each virtual interface.\"\n
    \   REFERENCE   \"[802.3ah], 30.3.5.1.19.\"\n    ::= { dot3MpcpControlEntry 8
    }\n"
  - "dot3MpcpReceiveElapsed OBJECT-TYPE\n    SYNTAX  Unsigned32\n    UNITS       \"TQ
    (16nsec)\"\n    MAX-ACCESS  read-only\n    STATUS  current\n    DESCRIPTION\n
    \           \"An object that reports the interval from last MPCP frame\n             reception
    in increments of Time Quanta (TQ)-16ns.  The\n             value returned shall
    be (interval from last MPCP frame\n             reception in ns)/16.  If this
    value exceeds (2^32-1), the\n             value (2^32-1) shall be returned.\n
    \            This object is applicable for an OLT and an ONU.  At the\n             OLT,
    it has a distinct value for each virtual interface.\"\n    REFERENCE   \"[802.3ah],
    30.3.5.1.20.\"\n    ::= { dot3MpcpControlEntry 9 }\n"
  - "dot3MpcpRoundTripTime OBJECT-TYPE\n    SYNTAX  Unsigned32 (0..'ffff'h)\n    UNITS
    \      \"TQ (16nsec)\"\n    MAX-ACCESS  read-only\n    STATUS  current\n    DESCRIPTION\n
    \           \"An object that reports the MPCP round trip time in\n             increments
    of Time Quanta (TQ)-16ns.  The value returned\n             shall be (round trip
    time in ns)/16.  If this value\n             exceeds (2^16-1), the value (2^16-1)
    shall be returned.\n             This object is applicable for an OLT and an ONU.
    \ At the\n             OLT, it has a distinct value for each virtual interface.\"\n
    \   REFERENCE   \"[802.3ah], 30.3.5.1.21.\"\n    ::= { dot3MpcpControlEntry 10
    }\n"
  - "dot3MpcpMaximumPendingGrants OBJECT-TYPE\n    SYNTAX  Unsigned32 (0..255)\n    MAX-ACCESS
    \ read-only\n    STATUS  current\n    DESCRIPTION\n            \"An object that
    reports the maximum number of grants\n             that an ONU can store for handling.
    \ The maximum number\n             of grants that an ONU can store for handling
    has a\n             range of 0 to 255.\n             This object is applicable
    for an OLT and an ONU.  At the\n             OLT, it has a distinct value for
    each virtual interface.\n             At the OLT, the value should be zero.\"\n
    \   REFERENCE   \"[802.3ah], 30.3.5.1.24.\"\n    ::= { dot3MpcpControlEntry 11
    }\n"
  - "dot3MpcpStatTable OBJECT-TYPE\n    SYNTAX     SEQUENCE OF Dot3MpcpStatEntry\n
    \   MAX-ACCESS not-accessible\n    STATUS     current\n    DESCRIPTION\n            \"This
    table defines the list of statistics counters of\n             an interface implementing
    the [802.3ah], clause 64 MPCP.\n             Each object has a row for every virtual
    link denoted by\n             the corresponding ifIndex.\n             The LLID
    field, as defined in the [802.3ah], is a 2-byte\n             register (15-bit
    field and a broadcast bit) limiting the\n             number of virtual links
    to 32768.  Typically the number\n             of expected virtual links in a PON
    is like the number of\n             ONUs, which is 32-64, plus an additional entry
    for\n             broadcast LLID (with a value of 0xffff).\"\n"
  - '::= { dot3EponMpcpObjects 2 }

    '
  - "dot3MpcpStatEntry OBJECT-TYPE\n    SYNTAX     Dot3MpcpStatEntry\n    MAX-ACCESS
    not-accessible\n    STATUS     current\n    DESCRIPTION\n            \"An entry
    in the table of statistics counters of the\n             [802.3ah], clause 64,
    MPCP interface.\n             Rows exist for an OLT interface and an ONU interface.\n
    \            A row in the table is denoted by the ifIndex of the link\n             and
    it is created when the ifIndex is created.\n             The rows in the table
    for an ONU interface are created\n             at system initialization.\n             The
    row in the table corresponding to the OLT ifIndex\n             and the row corresponding
    to the broadcast virtual link\n             are created at system initialization.\n
    \            A row in the table corresponding to the ifIndex of a\n             virtual
    link is created when a virtual link is\n             established (ONU registers)
    and deleted when the virtual\n             link is deleted (ONU deregisters).\"\n
    \   INDEX  { ifIndex}\n    ::= { dot3MpcpStatTable 1 }\n"
  - "Dot3MpcpStatEntry ::=\n    SEQUENCE {\n            dot3MpcpMACCtrlFramesTransmitted
    \      Counter64,\n            dot3MpcpMACCtrlFramesReceived          Counter64,\n
    \           dot3MpcpDiscoveryWindowsSent           Counter32,\n            dot3MpcpDiscoveryTimeout
    \              Counter32,\n            dot3MpcpTxRegRequest                   Counter64,\n
    \           dot3MpcpRxRegRequest                   Counter64,\n            dot3MpcpTxRegAck
    \                      Counter64,\n            dot3MpcpRxRegAck                       Counter64,\n
    \           dot3MpcpTxReport                       Counter64,\n            dot3MpcpRxReport
    \                      Counter64,\n            dot3MpcpTxGate                         Counter64,\n
    \           dot3MpcpRxGate                         Counter64,\n            dot3MpcpTxRegister
    \                    Counter64,\n            dot3MpcpRxRegister                     Counter64\n
    \   }\n"
  - "dot3MpcpMACCtrlFramesTransmitted OBJECT-TYPE\n    SYNTAX  Counter64\n    UNITS
    \     \"frames\"\n    MAX-ACCESS  read-only\n    STATUS  current\n    DESCRIPTION\n
    \           \"A count of MPCP frames passed to the MAC sublayer for\n             transmission.
    \ This counter is incremented when a\n             MA_CONTROL.request service
    primitive is generated within\n             the MAC control sublayer with an opcode
    indicating an\n             MPCP frame.\n             This object is applicable
    for an OLT and an ONU.  At the\n             OLT it has a distinct value for each
    virtual interface.\n             Discontinuities of this counter can occur at\n
    \            re-initialization of the management system, and at other\n             times
    as indicated by the value of the\n             ifCounterDiscontinuityTime object
    of the Interface MIB\n             module.\"\n    REFERENCE   \"[802.3ah], 30.3.5.1.7.\"\n
    \   ::= { dot3MpcpStatEntry 1 }\n"
  - "dot3MpcpMACCtrlFramesReceived OBJECT-TYPE\n    SYNTAX  Counter64\n    UNITS      \"frames\"\n
    \   MAX-ACCESS  read-only\n    STATUS  current\n    DESCRIPTION\n            \"A
    count of MPCP frames passed by the MAC sublayer to the\n             MAC Control
    sublayer.  This counter is incremented when a\n             ReceiveFrame function
    call returns a valid frame with\n             1) a lengthOrType field value equal
    to the reserved\n             Type for 802.3_MAC_Control as specified in clause
    31.4.1.3,\n             and\n             2) an opcode indicating an MPCP frame.\n
    \            This object is applicable for an OLT and an ONU.  At the\n             OLT,
    it has a distinct value for each virtual interface.\n             Discontinuities
    of this counter can occur at\n             re-initialization of the management
    system and at other\n             times, as indicated by the value of the\n             ifCounterDiscontinuityTime
    object of the Interface MIB\n             module.\"\n   REFERENCE   \"[802.3ah],
    30.3.5.1.8.\"\n    ::= { dot3MpcpStatEntry 2}\n"
  - "dot3MpcpDiscoveryWindowsSent OBJECT-TYPE\n    SYNTAX  Counter32\n    MAX-ACCESS
    \ read-only\n    STATUS  current\n    DESCRIPTION\n            \"A count of discovery
    windows generated.  The counter is\n             incremented by one for each generated
    discovery window.\n             This object is applicable for an OLT and an ONU.
    \ At the\n             OLT, it has a distinct value for each virtual interface.\n
    \            At the ONU, the value should be zero.\n             Discontinuities
    of this counter can occur at\n             re-initialization of the management
    system and at other\n             times, as indicated by the value of the\n             ifCounterDiscontinuityTime
    object of the Interface MIB\n             module.\"\n   REFERENCE   \"[802.3ah],
    30.3.5.1.22.\"\n    ::= { dot3MpcpStatEntry 3}\n"
  - "dot3MpcpDiscoveryTimeout OBJECT-TYPE\n    SYNTAX  Counter32\n    MAX-ACCESS  read-only\n
    \   STATUS  current\n    DESCRIPTION\n            \"A count of the number of times
    a discovery timeout\n             occurs.  Increment the counter by one for each
    discovery\n             processing state-machine reset resulting from timeout\n
    \            waiting for message arrival.\n             This object is applicable
    for an OLT and an ONU.  At the\n             OLT, it has a distinct value for
    each virtual interface.\n             Discontinuities of this counter can occur
    at\n             re-initialization of the management system and at other\n             times,
    as indicated by the value of the\n             ifCounterDiscontinuityTime object
    of the Interface MIB\n             module.\"\n   REFERENCE   \"[802.3ah], 30.3.5.1.23.\"\n
    \   ::= { dot3MpcpStatEntry 4}\n"
  - "dot3MpcpTxRegRequest OBJECT-TYPE\n    SYNTAX  Counter64\n    UNITS      \"frames\"\n
    \   MAX-ACCESS  read-only\n    STATUS  current\n    DESCRIPTION\n            \"A
    count of the number of times a REGISTER_REQ MPCP\n             frame transmission
    occurs.  Increment the counter by one\n             for each REGISTER_REQ MPCP
    frame transmitted as defined\n             in [802.3ah], clause 64.\n             This
    object is applicable for an OLT and an ONU.  At the\n             OLT, it has
    a distinct value for each virtual interface.\n             At the OLT, the value
    should be zero.\n             Discontinuities of this counter can occur at\n             re-initialization
    of the management system and at other\n             times, as indicated by the
    value of the\n             ifCounterDiscontinuityTime object of the Interface
    MIB\n             module.\"\n    REFERENCE   \"[802.3ah], 30.3.5.1.12.\"\n    ::=
    { dot3MpcpStatEntry 5}\n"
  - "dot3MpcpRxRegRequest OBJECT-TYPE\n    SYNTAX  Counter64\n    UNITS      \"frames\"\n
    \   MAX-ACCESS  read-only\n    STATUS  current\n    DESCRIPTION\n            \"A
    count of the number of times a REGISTER_REQ MPCP\n             frame reception
    occurs.\n             Increment the counter by one for each REGISTER_REQ MPCP\n
    \            frame received as defined in [802.3ah], clause 64.\n             This
    object is applicable for an OLT and an ONU.  At the\n             OLT, it has
    a distinct value for each virtual interface.\n             At the ONU, the value
    should be zero.\n             Discontinuities of this counter can occur at\n             re-initialization
    of the management system and at other\n             times, as indicated by the
    value of the\n             ifCounterDiscontinuityTime object of the Interface
    MIB\n             module.\"\n  REFERENCE   \"[802.3ah], 30.3.5.1.17.\"\n    ::=
    { dot3MpcpStatEntry 6}\n"
  - "dot3MpcpTxRegAck OBJECT-TYPE\n    SYNTAX  Counter64\n    UNITS      \"frames\"\n
    \   MAX-ACCESS  read-only\n    STATUS  current\n    DESCRIPTION\n            \"A
    count of the number of times a REGISTER_ACK MPCP\n             frame transmission
    occurs.  Increment the counter by one\n             for each REGISTER_ACK MPCP
    frame transmitted as defined\n             in [802.3ah], clause 64.\n             This
    object is applicable for an OLT and an ONU.  At the\n             OLT, it has
    a distinct value for each virtual interface.\n             At the OLT, the value
    should be zero.\n             Discontinuities of this counter can occur at\n             re-initialization
    of the management system and at other\n             times, as indicated by the
    value of the\n             ifCounterDiscontinuityTime object of the Interface
    MIB\n             module.\"\n REFERENCE   \"[802.3ah], 30.3.5.1.10.\"\n    ::=
    { dot3MpcpStatEntry 7}\n"
  - "dot3MpcpRxRegAck OBJECT-TYPE\n    SYNTAX  Counter64\n    UNITS      \"frames\"\n
    \   MAX-ACCESS  read-only\n    STATUS  current\n    DESCRIPTION\n            \"A
    count of the number of times a REGISTER_ACK MPCP\n             frame reception
    occurs.\n             Increment the counter by one for each REGISTER_ACK MPCP\n
    \            frame received as defined in [802.3ah], clause 64.\n             This
    object is applicable for an OLT and an ONU.  At the\n             OLT, it has
    a distinct value for each virtual interface.\n             At the ONU, the value
    should be zero.\n             Discontinuities of this counter can occur at\n             re-initialization
    of the management system and at other\n             times, as indicated by the
    value of the\n             ifCounterDiscontinuityTime object of the Interface
    MIB\n             module.\"\n    REFERENCE   \"[802.3ah], 30.3.5.1.15.\"\n    ::=
    { dot3MpcpStatEntry 8}\n"
  - "dot3MpcpTxReport OBJECT-TYPE\n    SYNTAX  Counter64\n    UNITS      \"frames\"\n
    \   MAX-ACCESS  read-only\n    STATUS  current\n    DESCRIPTION\n            \"A
    count of the number of times a REPORT MPCP frame\n             transmission occurs.
    \ Increment the counter by one for\n             each REPORT MPCP frame transmitted
    as defined in\n             [802.3ah], clause 64.\n             This object is
    applicable for an OLT and an ONU.  At the\n             OLT, it has a distinct
    value for each virtual interface.\n             At the OLT, the value should be
    zero.\n             Discontinuities of this counter can occur at\n             re-initialization
    of the management system and at other\n             times, as indicated by the
    value of the\n             ifCounterDiscontinuityTime object of the Interface
    MIB\n             module.\"\n    REFERENCE   \"[802.3ah], 30.3.5.1.13.\"\n    ::=
    { dot3MpcpStatEntry 9}\n"
  - "dot3MpcpRxReport OBJECT-TYPE\n    SYNTAX  Counter64\n    UNITS      \"frames\"\n
    \   MAX-ACCESS  read-only\n    STATUS  current\n    DESCRIPTION\n            \"A
    count of the number of times a REPORT MPCP frame\n             reception occurs.\n
    \            Increment the counter by one for each REPORT MPCP frame\n             received
    as defined in [802.3ah], clause 64.\n             This object is applicable for
    an OLT and an ONU.  At the\n             OLT, it has a distinct value for each
    virtual interface.\n             At the ONU, the value should be zero.\n             Discontinuities
    of this counter can occur at\n             re-initialization of the management
    system and at other\n             times, as indicated by the value of the\n             ifCounterDiscontinuityTime
    object of the Interface MIB\n             module.\"\n    REFERENCE   \"[802.3ah],
    30.3.5.1.18.\"\n    ::= { dot3MpcpStatEntry 10}\n"
  - "dot3MpcpTxGate OBJECT-TYPE\n    SYNTAX  Counter64\n    UNITS      \"frames\"\n
    \   MAX-ACCESS  read-only\n    STATUS  current\n    DESCRIPTION\n            \"A
    count of the number of times a GATE MPCP frame\n             transmission occurs.\n
    \            Increment the counter by one for each GATE MPCP frame\n             transmitted
    as defined in [802.3ah], clause 64.\n             This object is applicable for
    an OLT and an ONU.  At the\n             OLT, it has a distinct value for each
    virtual interface.\n             At the ONU, the value should be zero.\n             Discontinuities
    of this counter can occur at\n             re-initialization of the management
    system and at other\n             times, as indicated by the value of the\n             ifCounterDiscontinuityTime
    object of the Interface MIB\n             module.\"\n    REFERENCE   \"[802.3ah],
    30.3.5.1.9.\"\n    ::= { dot3MpcpStatEntry 11}\n"
  - "dot3MpcpRxGate OBJECT-TYPE\n    SYNTAX  Counter64\n    UNITS      \"frames\"\n
    \   MAX-ACCESS  read-only\n    STATUS  current\n    DESCRIPTION\n            \"A
    count of the number of times a GATE MPCP frame\n             reception occurs.\n
    \            Increment the counter by one for each GATE MPCP frame\n             received
    as defined in [802.3ah], clause 64.\n             This object is applicable for
    an OLT and an ONU.  At the\n             OLT, it has a distinct value for each
    virtual interface.\n             At the OLT, the value should be zero.\n             Discontinuities
    of this counter can occur at\n             re-initialization of the management
    system and at other\n             times, as indicated by the value of the\n             ifCounterDiscontinuityTime
    object of the Interface MIB\n             module.\"\n    REFERENCE   \"[802.3ah],
    30.3.5.1.14.\"\n    ::= { dot3MpcpStatEntry 12}\n"
  - "dot3MpcpTxRegister OBJECT-TYPE\n    SYNTAX  Counter64\n    UNITS      \"frames\"\n
    \   MAX-ACCESS  read-only\n    STATUS  current\n    DESCRIPTION\n            \"A
    count of the number of times a REGISTER MPCP frame\n             transmission
    occurs.\n             Increment the counter by one for each REGISTER MPCP\n             frame
    transmitted as defined in [802.3ah], clause 64.\n             This object is applicable
    for an OLT and an ONU.  At the\n             OLT, it has a distinct value for
    each virtual interface.\n             At the ONU, the value should be zero.\n
    \            Discontinuities of this counter can occur at\n             re-initialization
    of the management system and at other\n             times, as indicated by the
    value of the\n             ifCounterDiscontinuityTime object of the Interface
    MIB\n             module.\"\n   REFERENCE   \"[802.3ah], 30.3.5.1.11.\"\n    ::=
    { dot3MpcpStatEntry 13}\n"
  - "dot3MpcpRxRegister OBJECT-TYPE\n    SYNTAX  Counter64\n    UNITS      \"frames\"\n
    \   MAX-ACCESS  read-only\n    STATUS  current\n    DESCRIPTION\n            \"A
    count of the number of times a REGISTER MPCP frame\n             reception occurs.\n
    \            Increment the counter by one for each REGISTER MPCP\n             frame
    received as defined in [802.3ah], clause 64.\n             This object is applicable
    for an OLT and an ONU.  At the\n             OLT, it has a distinct value for
    each virtual interface.\n             At the OLT, the value should be zero.\n
    \            Discontinuities of this counter can occur at\n             re-initialization
    of the management system and at other\n             times, as indicated by the
    value of the\n             ifCounterDiscontinuityTime object of the Interface
    MIB\n             module.\"\n    REFERENCE   \"[802.3ah], 30.3.5.1.16.\"\n    ::=
    { dot3MpcpStatEntry 14}\n"
  - '-- Optical Multi Point Emulation (OMPEmulation)

    '
  - '-- managed object definitions

    '
  - 'dot3OmpEmulationObjects OBJECT IDENTIFIER ::={dot3EponObjects 2}

    '
  - "dot3OmpEmulationTable OBJECT-TYPE\n    SYNTAX  SEQUENCE OF Dot3OmpEmulationEntry\n
    \   MAX-ACCESS  not-accessible\n    STATUS  current\n    DESCRIPTION\n            \"A
    table of dot3 OmpEmulation MIB objects.  The table\n             contain objects
    for the management of the OMPEmulation\n             sublayer.\n             Each
    object has a row for every virtual link denoted by\n             the corresponding
    ifIndex.\n             The LLID field, as defined in the [802.3ah], is a 2-byte\n
    \            register (15-bit field and a broadcast bit) limiting the\n             number
    of virtual links to 32768.  Typically the number\n             of expected virtual
    links in a PON is like the number of\n             ONUs, which is 32-64, plus
    an additional entry for\n             broadcast LLID (with a value of 0xffff).\"\n
    \   ::= { dot3OmpEmulationObjects 1 }\n"
  - "dot3OmpEmulationEntry OBJECT-TYPE\n    SYNTAX  Dot3OmpEmulationEntry\n    MAX-ACCESS
    \ not-accessible\n    STATUS  current\n    DESCRIPTION\n            \"An entry
    in the dot3 OmpEmulation table.\n             Rows exist for an OLT interface
    and an ONU interface.\n             A row in the table is denoted by the ifIndex
    of the link\n             and it is created when the ifIndex is created.\n             The
    rows in the table for an ONU interface are created\n             at system initialization.\n
    \            The row in the table corresponding to the OLT ifIndex\n             and
    the row corresponding to the broadcast virtual link\n             are created
    at system initialization.\n             A row in the table corresponding to the
    ifIndex of a\n             virtual links is created when a virtual link is\n             established
    (ONU registers) and deleted when the virtual\n             link is deleted (ONU
    deregisters).\"\n    INDEX  { ifIndex }\n    ::= { dot3OmpEmulationTable 1 }\n
    \   Dot3OmpEmulationEntry ::=\n    SEQUENCE {\n            dot3OmpEmulationType
    \              INTEGER\n    }\n"
  - "dot3OmpEmulationType OBJECT-TYPE\n    SYNTAX  INTEGER {\n            unknown(1),\n
    \           olt(2),\n            onu(3)\n    }\n    MAX-ACCESS  read-only\n    STATUS
    \ current\n    DESCRIPTION\n            \"An object that indicates the mode of
    operation\n             of the Reconciliation Sublayer for Point-to-Point\n             Emulation
    (see [802.3ah], clause 65.1).  unknown(1) value\n             is assigned in initialization;
    true state or type is not\n             yet known.  olt(2) value is assigned when
    the sublayer is\n             operating in OLT mode.  onu(3) value is assigned
    when the\n             sublayer is operating in ONU mode.\n             This object
    is applicable for an OLT, with the same\n             value for all virtual interfaces,
    and for an ONU.\"\n    REFERENCE   \"[802.3ah], 30.3.7.1.2.\"\n    ::= { dot3OmpEmulationEntry
    1}\n"
  - "dot3OmpEmulationStatTable OBJECT-TYPE\n    SYNTAX     SEQUENCE OF Dot3OmpEmulationStatEntry\n
    \   MAX-ACCESS not-accessible\n    STATUS     current\n    DESCRIPTION\n            \"This
    table defines the list of statistics counters of\n             [802.3ah], clause
    65, OMPEmulation sublayer.\n             Each object has a row for every virtual
    link denoted by\n             the corresponding ifIndex.\n             The LLID
    field, as defined in the [802.3ah], is a 2-byte\n             register (15-bit
    field and a broadcast bit) limiting the\n             number of virtual links
    to 32768.  Typically the number\n             of expected virtual links in a PON
    is like the number of\n             ONUs, which is 32-64, plus an additional entry
    for\n             broadcast LLID (with a value of 0xffff).\"\n    ::= { dot3OmpEmulationObjects
    2}\n"
  - "dot3OmpEmulationStatEntry OBJECT-TYPE\n    SYNTAX     Dot3OmpEmulationStatEntry\n
    \   MAX-ACCESS not-accessible\n    STATUS     current\n    DESCRIPTION\n            \"An
    entry in the table of statistics counters of\n             [802.3ah], clause 65,
    OMPEmulation sublayer.\n             Rows exist for an OLT interface and an ONU
    interface.\n             A row in the table is denoted by the ifIndex of the link\n
    \            and it is created when the ifIndex is created.\n             The
    rows in the table for an ONU interface are created\n             at system initialization.\n
    \            The row in the table corresponding to the OLT ifIndex\n             and
    the row corresponding to the broadcast virtual link\n             are created
    at system initialization.\n             A row in the table corresponding to the
    ifIndex of a\n             virtual links is created when a virtual link is\n             established
    (ONU registers) and deleted when the virtual\n             link is deleted (ONU
    deregisters).\"\n    INDEX  { ifIndex}\n    ::= { dot3OmpEmulationStatTable 1
    }\n"
  - "Dot3OmpEmulationStatEntry::=\n    SEQUENCE {\n            dot3OmpEmulationSLDErrors
    \                Counter64,\n            dot3OmpEmulationCRC8Errors                Counter64,\n
    \           dot3OmpEmulationBadLLID                   Counter64,\n            dot3OmpEmulationGoodLLID
    \                 Counter64,\n            dot3OmpEmulationOnuPonCastLLID            Counter64,\n
    \           dot3OmpEmulationOltPonCastLLID            Counter64,\n            dot3OmpEmulationBroadcastBitNotOnuLlid
    \   Counter64,\n            dot3OmpEmulationOnuLLIDNotBroadcast       Counter64,\n
    \           dot3OmpEmulationBroadcastBitPlusOnuLlid    Counter64,\n            dot3OmpEmulationNotBroadcastBitNotOnuLlid
    \ Counter64\n    }\n"
  - "dot3OmpEmulationSLDErrors OBJECT-TYPE\n    SYNTAX  Counter64\n    UNITS      \"frames\"\n
    \   MAX-ACCESS  read-only\n    STATUS  current\n    DESCRIPTION\n            \"A
    count of frames received that do not contain a valid\n             SLD field as
    defined in [802.3ah], clause 65.1.3.3.1.\n             This object is applicable
    for an OLT and an ONU.  At the\n             OLT, it has a distinct value for
    each virtual interface.\n             Discontinuities of this counter can occur
    at\n             re-initialization of the management system and at other\n             times,
    as indicated by the value of the\n             ifCounterDiscontinuityTime object
    of the Interface MIB\n             module.\"\n    REFERENCE   \"[802.3ah], 30.3.7.1.3.\"\n
    \   ::= { dot3OmpEmulationStatEntry 1}\n"
  - "dot3OmpEmulationCRC8Errors OBJECT-TYPE\n    SYNTAX  Counter64\n    UNITS      \"frames\"\n
    \   MAX-ACCESS  read-only\n    STATUS  current\n    DESCRIPTION\n            \"A
    count of frames received that contain a valid SLD\n             field, as defined
    in [802.3ah], clause 65.1.3.3.1, but do\n             not pass the CRC-8 check
    as defined in [802.3ah], clause\n             65.1.3.3.3.\n             This object
    is applicable for an OLT and an ONU.  At the\n             OLT, it has a distinct
    value for each virtual interface.\n             Discontinuities of this counter
    can occur at\n             re-initialization of the management system and at other\n
    \            times, as indicated by the value of the\n             ifCounterDiscontinuityTime
    object of the Interface MIB\n             module.\"\n    REFERENCE   \"[802.3ah],
    30.3.7.1.4.\"\n    ::= { dot3OmpEmulationStatEntry 2}\n"
  - "dot3OmpEmulationBadLLID OBJECT-TYPE\n    SYNTAX  Counter64\n    UNITS      \"frames\"\n
    \   MAX-ACCESS  read-only\n    STATUS  current\n    DESCRIPTION\n            \"A
    count of frames received that contain a valid SLD\n             field, as defined
    in [802.3ah], clause 65.1.3.3.1, and\n             pass the CRC-8 check, as defined
    in [802.3ah], clause\n             65.1.3.3.3, but are discarded due to the LLID
    check as\n             defined in [802.3ah], clause 65.1.3.3.2.\n             This
    object is applicable for an OLT and an ONU.  At the\n             OLT, it has
    a distinct value for each virtual interface.\n             Discontinuities of
    this counter can occur at\n             re-initialization of the management system
    and at other\n             times, as indicated by the value of the\n             ifCounterDiscontinuityTime
    object of the Interface MIB\n             module.\"\n    REFERENCE   \"[802.3ah],
    30.3.7.1.8.\"\n    ::= { dot3OmpEmulationStatEntry 3}\n"
  - "dot3OmpEmulationGoodLLID OBJECT-TYPE\n    SYNTAX  Counter64\n    UNITS      \"frames\"\n
    \   MAX-ACCESS  read-only\n    STATUS  current\n    DESCRIPTION\n            \"A
    count of frames received that contain a valid SLD\n             field, as defined
    in [802.3ah], clause 65.1.3.3.1, and\n             pass the CRC-8 check as defined
    in [802.3ah], clause\n             65.1.3.3.3.\n             This object is applicable
    for an OLT and an ONU.  At the\n             OLT, it has a distinct value for
    each virtual interface.\n             Discontinuities of this counter can occur
    at\n             re-initialization of the management system and at other\n             times,
    as indicated by the value of the\n             ifCounterDiscontinuityTime object
    of the Interface MIB\n             module.\"\n    REFERENCE   \"[802.3ah], 30.3.7.1.5.\"\n
    \   ::= { dot3OmpEmulationStatEntry 4}\n"
  - "dot3OmpEmulationOnuPonCastLLID OBJECT-TYPE\n    SYNTAX  Counter64\n    UNITS
    \     \"frames\"\n    MAX-ACCESS  read-only\n    STATUS  current\n    DESCRIPTION\n
    \           \"A count of frames received that contain a valid SLD\n             field,
    as defined in [802.3ah], clause 65.1.3.3.1,\n             pass the CRC-8 check,
    as defined in [802.3ah], clause\n             65.1.3.3.3, and meet the rules of
    acceptance for an\n             ONU defined in [802.3ah], clause 65.1.3.3.2.\n
    \            This object is applicable for an OLT and an ONU.  At the\n             OLT,
    it has a distinct value for each virtual interface.\n             At the OLT,
    the value should be zero.\n             Discontinuities of this counter can occur
    at\n             re-initialization of the management system and at other\n             times,
    as indicated by the value of the\n             ifCounterDiscontinuityTime object
    of the Interface MIB\n             module.\"\n    REFERENCE   \"[802.3ah], 30.3.7.1.6.\"\n
    \   ::= { dot3OmpEmulationStatEntry 5}\n"
  - "dot3OmpEmulationOltPonCastLLID OBJECT-TYPE\n    SYNTAX  Counter64\n    UNITS
    \     \"frames\"\n    MAX-ACCESS  read-only\n    STATUS  current\n    DESCRIPTION\n
    \           \"A count of frames received that contain a valid SLD\n             field,
    as defined in [802.3ah], clause 65.1.3.3.1,\n             pass the CRC-8 check,
    as defined in [802.3ah], clause\n             65.1.3.3.3, and meet the rules of
    acceptance for an\n             OLT defined in [802.3ah], 65.1.3.3.2.\n             This
    object is applicable for an OLT and an ONU.  At the\n             OLT, it has
    a distinct value for each virtual interface.\n             At the ONU, the value
    should be zero.\n             Discontinuities of this counter can occur at\n             re-initialization
    of the management system and at other\n             times, as indicated by the
    value of the\n             ifCounterDiscontinuityTime object of the Interface
    MIB\n             module.\"\n  REFERENCE   \"[802.3ah], 30.3.7.1.7.\"\n    ::=
    { dot3OmpEmulationStatEntry 6}\n"
  - "dot3OmpEmulationBroadcastBitNotOnuLlid OBJECT-TYPE\n    SYNTAX  Counter64\n    UNITS
    \     \"frames\"\n    MAX-ACCESS  read-only\n    STATUS  current\n    DESCRIPTION\n
    \           \"A count of frames received that contain a valid SLD\n             field,
    as defined in [802.3ah], clause\n             65.1.3.3.1, pass the CRC-8 check,
    as defined in\n             [802.3ah], clause 65.1.3.3.3, and contain the broadcast\n
    \            bit in the LLID and not the ONU's LLID (frame accepted)\n             as
    defined in [802.3ah], clause 65.\n             This object is applicable for an
    OLT and an ONU.  At the\n             OLT, it has a distinct value for each virtual
    interface.\n             At the OLT, the value should be zero.\n             Discontinuities
    of this counter can occur at\n             re-initialization of the management
    system and at other\n             times, as indicated by the value of the\n             ifCounterDiscontinuityTime
    object of the Interface MIB\n             module.\"\n   ::= { dot3OmpEmulationStatEntry
    7}\n"
  - "dot3OmpEmulationOnuLLIDNotBroadcast OBJECT-TYPE\n    SYNTAX  Counter64\n    UNITS
    \     \"frames\"\n    MAX-ACCESS  read-only\n    STATUS  current\n    DESCRIPTION\n
    \           \"A count of frames received that contain a valid SLD\n             field,
    as defined in [802.3ah], clause\n             65.1.3.3.1, pass the CRC-8 check,
    as defined in\n             [802.3ah], clause 65.1.3.3.3, and contain the ONU's
    LLID\n             as defined in [802.3ah], clause 65.\n             This object
    is applicable for an OLT and an ONU.  At the\n             OLT, it has a distinct
    value for each virtual interface.\n             At the OLT, the value should be
    zero.\n             Discontinuities of this counter can occur at\n             re-initialization
    of the management system and at other\n             times, as indicated by the
    value of the\n             ifCounterDiscontinuityTime object of the Interface
    MIB\n             module.\"\n   ::= { dot3OmpEmulationStatEntry 8}\n"
  - "dot3OmpEmulationBroadcastBitPlusOnuLlid OBJECT-TYPE\n    SYNTAX  Counter64\n
    \   UNITS      \"frames\"\n    MAX-ACCESS  read-only\n    STATUS  current\n    DESCRIPTION\n
    \           \"A count of frames received that contain a valid SLD\n             field,
    as defined in [802.3ah], clause\n             65.1.3.3.1, pass the CRC-8 check,
    as defined in\n             [802.3ah], clause 65.1.3.3.3, and contain the broadcast\n
    \            bit in the LLID and match the ONU's LLID (frame\n             reflected)
    as defined in [802.3ah], clause 65.\n             This object is applicable for
    an OLT and an ONU.  At the\n             OLT, it has a distinct value for each
    virtual interface.\n             At the OLT, the value should be zero.\n             Discontinuities
    of this counter can occur at\n             re-initialization of the management
    system and at other\n             times, as indicated by the value of the\n             ifCounterDiscontinuityTime
    object of the Interface MIB\n             module.\"\n    ::= { dot3OmpEmulationStatEntry
    9}\n"
  - "dot3OmpEmulationNotBroadcastBitNotOnuLlid OBJECT-TYPE\n    SYNTAX  Counter64\n
    \   UNITS      \"frames\"\n    MAX-ACCESS  read-only\n    STATUS  current\n    DESCRIPTION\n
    \           \"A count of frames received that contain a valid SLD\n             field,
    as defined in [802.3ah], clause\n             65.1.3.3.1, pass the CRC-8 check,
    as defined in\n             [802.3ah], clause 65.1.3.3.3, and do not contain\n
    \            the ONU's LLID as defined in [802.3ah], clause 65.\n             This
    object is applicable for an OLT and an ONU.  At the\n             OLT, it has
    a distinct value for each virtual interface.\n             At the OLT, the value
    should be zero.\n             Discontinuities of this counter can occur at\n             re-initialization
    of the management system and at other\n             times, as indicated by the
    value of the\n             ifCounterDiscontinuityTime object of the Interface
    MIB\n             module.\"\n    ::= { dot3OmpEmulationStatEntry 10}\n"
  - '--  FEC managed object definitions (30.5.1)

    '
  - 'dot3EponFecObjects OBJECT IDENTIFIER ::={dot3EponObjects 3}

    '
  - "dot3EponFecTable OBJECT-TYPE\n    SYNTAX  SEQUENCE OF Dot3EponFecEntry\n    MAX-ACCESS
    \ not-accessible\n    STATUS  current\n    DESCRIPTION\n            \"A table
    of dot3 EPON FEC management objects.\n             The entries in the table are
    control and status objects\n             and statistic counters for the FEC layer.\n
    \            Each object has a row for every virtual link denoted by\n             the
    corresponding ifIndex.\n             The LLID field, as defined in the [802.3ah],
    is a 2-byte\n             register (15-bit field and a broadcast bit) limiting
    the\n             number of virtual links to 32768.  Typically the number\n             of
    expected virtual links in a PON is like the number of\n             ONUs, which
    is 32-64, plus an additional entry for\n             broadcast LLID (with a value
    of 0xffff).\"\n    ::= { dot3EponFecObjects 1 }\n"
  - "dot3EponFecEntry OBJECT-TYPE\n    SYNTAX  Dot3EponFecEntry\n    MAX-ACCESS  not-accessible\n
    \   STATUS  current\n    DESCRIPTION\n            \"An entry in the dot3 EPON
    FEC table.\n             Rows exist for an OLT interface and an ONU interface.\n
    \            A row in the table is denoted by the ifIndex of the link\n             and
    it is created when the ifIndex is created.\n             The rows in the table
    for an ONU interface are created\n             at system initialization.\n             The
    row in the table corresponding to the OLT ifIndex\n             and the row corresponding
    to the broadcast virtual link\n             are created at system initialization.\n
    \            A row in the table corresponding to the ifIndex of a\n             virtual
    links is created when a virtual link is\n             established (ONU registers)
    and deleted when the virtual\n             link is deleted (ONU deregisters).\"\n
    \   INDEX  { ifIndex}\n    ::= { dot3EponFecTable 1 }\n"
  - "Dot3EponFecEntry ::=\n    SEQUENCE {\n            dot3EponFecPCSCodingViolation
    \          Counter64,\n            dot3EponFecAbility                      INTEGER,\n
    \           dot3EponFecMode                         INTEGER,\n            dot3EponFecCorrectedBlocks
    \             Counter64,\n            dot3EponFecUncorrectableBlocks          Counter64,\n
    \           dot3EponFecBufferHeadCodingViolation    Counter64\n    }\n"
  - "dot3EponFecPCSCodingViolation OBJECT-TYPE\n    SYNTAX  Counter64\n    UNITS      \"octets\"\n
    \   MAX-ACCESS  read-only\n    STATUS  current\n    DESCRIPTION\n            \"For
    a 100 Mbps operation, it is a count of the number of\n             times an invalid
    code-group is received, other than the\n             /H/ code-group.  For a 1000
    Mbps operation, it is a count\n             of the number of times an invalid
    codegroup is received,\n             other than the /V/ code-group.  /H/ denotes
    a special\n             4b5b codeword of [802.3] 100 Mbps PCS layer (clause 24),\n
    \            and /V/ denotes a special 8b10b codeword of the [802.3]\n             1000
    Mbps PCS layer (clause 36).\n             This object is applicable for an OLT
    and an ONU.  At the\n             OLT, it has a distinct value for each virtual
    interface.\n             Discontinuities of this counter can occur at\n             re-initialization
    of the management system and at other\n             times, as indicated by the
    value of the\n             ifCounterDiscontinuityTime object of the Interface
    MIB\n             module.\"\n    REFERENCE   \"[802.3ah], 30.5.1.1.12.\"\n    ::=
    { dot3EponFecEntry 1}\n"
  - "dot3EponFecAbility OBJECT-TYPE\n    SYNTAX  INTEGER {\n            unknown(1),\n
    \           supported(2),\n            unsupported(3)\n    }\n    MAX-ACCESS  read-only\n
    \   STATUS  current\n    DESCRIPTION\n            \"An object that indicates the
    support of operation of the\n             optional FEC sublayer of the 1000BASE-PX
    PHY specified\n             in [802.3ah], clause 65.2.\n             unknown(1)
    value is assigned in the initialization, for non\n             FEC support state
    or type not yet known.  unsupported(3)\n             value is assigned when the
    sublayer is not supported.\n             supported(2) value is assigned when the
    sublayer is\n             supported.\n             This object is applicable for
    an OLT, with the same\n             value for all virtual interfaces, and for
    an ONU.\n             The FEC counters will have a zero value when the\n             interface
    is not supporting FEC.\n             The counters:\n              dot3EponFecPCSCodingViolation
    - not affected by FEC\n              ability.\n              dot3EponFecCorrectedBlocks
    \   - has a zero value when\n               dot3EponFecAbility is unknown(1) and
    unsupported(3).\n              dot3EponFecUncorrectableBlocks  - has a zero value
    when\n               dot3EponFecAbility is unknown(1) and unsupported(3).\n              dot3EponFecBufferHeadCodingViolation
    - has a zero value\n               when dot3EponFecAbility is unknown(1) and\n
    \              unsupported(3).\"\n    REFERENCE   \"[802.3ah], 30.5.1.1.13.\"\n
    \   ::= { dot3EponFecEntry 2}\n"
  - "dot3EponFecMode OBJECT-TYPE\n    SYNTAX  INTEGER {\n            unknown(1),\n
    \           disabled(2),\n            enabled(3)\n    }\n    MAX-ACCESS  read-write\n
    \   STATUS  current\n    DESCRIPTION\n            \"An object that defines the
    mode of operation of the\n             optional FEC sublayer of the 1000BASE-PX
    PHY, specified\n             in [802.3ah], clause 65.2, and reflects its state.\n
    \            A GET operation returns the current mode of operation\n             of
    the PHY.  A SET operation changes the mode of\n             operation of the PHY
    to the indicated value.\n             unknown(1) value is assigned in the initialization
    for non\n               FEC support state or type not yet known.\n             disabled(2)
    value is assigned when the FEC sublayer is\n               operating in disabled
    mode.\n             enabled(3) value is assigned when the FEC sublayer is\n               operating
    in FEC mode.\n             The write operation is not restricted in this document\n
    \            and can be done at any time.  Changing dot3EponFecMode\n             state
    can lead to disabling the Forward Error Correction\n             on the respective
    interface, which can lead to a\n             degradation of the optical link,
    and therefore may lead\n             to an interruption of service for the users
    connected to\n             the respective EPON interface.\n             This object
    is applicable for an OLT and an ONU.  At the\n             OLT, it has a distinct
    value for each virtual interface.\n             The counting of\n             the
    FEC counters will stop when the FEC of the interface\n             is disabled.\n
    \            The counters:\n              dot3EponFecPCSCodingViolation - not
    affected by FEC\n              mode.\n              dot3EponFecCorrectedBlocks
    - stops counting when\n              Rx_FEC is not enabled.  (unknown(1) and disabled(2)).\n
    \             dot3EponFecUncorrectableBlocks - stops counting when\n              Rx_FEC
    is not enabled (unknown(1) and disabled(2)).\n              dot3EponFecBufferHeadCodingViolation
    - stops counting\n              when Rx_FEC is not enabled (unknown(1) and\n              disabled(2)).\n
    \            The object:\n              dot3EponFecAbility - indicates the FEC
    ability and\n              is not affected by the dot3EponFecMode object.\"\n
    \   REFERENCE   \"[802.3ah], 30.5.1.1.14.\"\n    DEFVAL { unknown }\n    ::= {
    dot3EponFecEntry 3}\n"
  - "dot3EponFecCorrectedBlocks OBJECT-TYPE\n    SYNTAX  Counter64\n    MAX-ACCESS
    \ read-only\n    STATUS  current\n    DESCRIPTION\n            \"For 10PASS-TS,
    2BASE-TL, and 1000BASE-PX PHYs, it is a\n             count of corrected FEC blocks.
    \ This counter will not\n             increment for other PHY Types.  Increment
    the counter by\n             one for each received block that is corrected by
    the FEC\n             function in the PHY.\n             This object is applicable
    for an OLT and an ONU.  At the\n             OLT, it has a distinct value for
    each virtual interface.\n             Discontinuities of this counter can occur
    at\n             re-initialization of the management system and at other\n             times,
    as indicated by the value of the\n             ifCounterDiscontinuityTime object
    of the Interface MIB\n             module.\"\n    REFERENCE   \"[802.3ah], 30.5.1.1.15.\"\n
    \   ::= { dot3EponFecEntry 4}\n"
  - "dot3EponFecUncorrectableBlocks OBJECT-TYPE\n    SYNTAX  Counter64\n    MAX-ACCESS
    \ read-only\n    STATUS  current\n    DESCRIPTION\n            \"For 10PASS-TS,
    2BASE-TL, and 1000BASE-PX PHYs, it is a\n             count of uncorrectable FEC
    blocks.  This counter will not\n             increment for other PHY Types.  Increment
    the counter by\n             one for each FEC block that is determined to be\n
    \            uncorrectable by the FEC function in the PHY.\n             This
    object is applicable for an OLT and an ONU.  At the\n             OLT, it has
    a distinct value for each virtual interface.\n             Discontinuities of
    this counter can occur at\n             re-initialization of the management system
    and at other\n             times, as indicated by the value of the\n             ifCounterDiscontinuityTime
    object of the Interface MIB\n             module.\"\n    REFERENCE   \"[802.3ah],
    30.5.1.1.16.\"\n    ::= { dot3EponFecEntry 5}\n"
  - "dot3EponFecBufferHeadCodingViolation OBJECT-TYPE\n    SYNTAX  Counter64\n    UNITS
    \     \"octets\"\n    MAX-ACCESS  read-only\n    STATUS  current\n    DESCRIPTION\n
    \           \"For a 1000 Mbps operation, it is a count of the number of\n             invalid
    code-group received directly from the link.  The\n             value has a meaning
    only in 1000 Mbps mode and it is\n             zero otherwise.\n             This
    object is applicable for an OLT and an ONU.  At the\n             OLT, it has
    a distinct value for each virtual interface.\n             Discontinuities of
    this counter can occur at\n             re-initialization of the management system
    and at other\n             times, as indicated by the value of the\n             ifCounterDiscontinuityTime
    object of the Interface MIB\n             module.\"\n    ::= { dot3EponFecEntry
    6}\n"
  - '-- ExtendedPackage managed object definitions

    '
  - 'dot3ExtPkgObjects OBJECT IDENTIFIER ::={dot3EponObjects 4}

    '
  - 'dot3ExtPkgControlObjects OBJECT IDENTIFIER ::= { dot3ExtPkgObjects 1}

    '
  - "dot3ExtPkgControlTable OBJECT-TYPE\n    SYNTAX  SEQUENCE OF Dot3ExtPkgControlEntry\n
    \   MAX-ACCESS  not-accessible\n    STATUS  current\n    DESCRIPTION\n            \"A
    table of Extended package Control management\n             objects.  Entries in
    the table are control and status\n             indication objects of an EPON interface,
    which are\n             gathered in an extended package as an addition to the\n
    \            objects based on the [802.3ah], clause 30, attributes.\n             Each
    object has a row for every virtual link denoted by\n             the corresponding
    ifIndex.\n             The LLID field, as defined in the [802.3ah], is a 2-byte\n
    \            register (15-bit field and a broadcast bit) limiting the\n             number
    of virtual links to 32768.  Typically the number\n             of expected virtual
    links in a PON is like the number of\n             ONUs, which is 32-64, plus
    an additional entry for\n             broadcast LLID (with a value of 0xffff).\"\n
    \   ::= { dot3ExtPkgControlObjects 1 }\n"
  - "dot3ExtPkgControlEntry OBJECT-TYPE\n    SYNTAX  Dot3ExtPkgControlEntry\n    MAX-ACCESS
    \ not-accessible\n    STATUS  current\n    DESCRIPTION\n            \"An entry
    in the Extended package Control table.\n             Rows exist for an OLT interface
    and an ONU interface.\n             A row in the table is denoted by the ifIndex
    of the link\n             and it is created when the ifIndex is created.\n             The
    rows in the table for an ONU interface are created\n             at system initialization.\n
    \            The row in the table corresponding to the OLT ifIndex\n             and
    the row corresponding to the broadcast virtual link\n             are created
    at system initialization.\n             A row in the table corresponding to the
    ifIndex of a\n             virtual links is created when a virtual link is\n             established
    (ONU registers) and deleted when the virtual\n             link is deleted (ONU
    deregisters).\"\n    INDEX  { ifIndex}\n    ::= { dot3ExtPkgControlTable 1 }\n"
  - "Dot3ExtPkgControlEntry ::=\n    SEQUENCE {\n     dot3ExtPkgObjectReset                       INTEGER,\n
    \    dot3ExtPkgObjectPowerDown                   TruthValue,\n     dot3ExtPkgObjectNumberOfLLIDs
    \              Unsigned32,\n     dot3ExtPkgObjectFecEnabled                  INTEGER,\n
    \    dot3ExtPkgObjectReportMaximumNumQueues      Unsigned32,\n     dot3ExtPkgObjectRegisterAction
    \             INTEGER\n    }\n"
  - "dot3ExtPkgObjectReset OBJECT-TYPE\n    SYNTAX  INTEGER {\n            running(1),\n
    \           reset(2)\n    }\n    MAX-ACCESS  read-write\n    STATUS  current\n
    \   DESCRIPTION\n            \"This object is used to reset the EPON interface.
    \ The\n             interface may be unavailable while the reset occurs and\n
    \            data may be lost.\n             Setting this object to running(1)
    will cause the\n             interface to enter into running mode.  Setting this\n
    \            object to reset(2) will cause the interface to go into\n             reset
    mode.  When getting running(1), the interface is in\n             running mode.
    \ When getting reset(2), the interface is in\n             reset mode.\n             The
    write operation is not restricted in this document\n             and can be done
    at any time.  Changing\n             dot3ExtPkgObjectReset state can lead to a
    reset of the\n             respective interface, leading to an interruption of\n
    \            service for the users connected to the respective EPON\n             interface.\n
    \            This object is applicable for an OLT and an ONU.  At the\n             OLT,
    it has a distinct value for each virtual interface.\n             A reset for
    a specific virtual interface resets only\n             this virtual interface
    and not the physical interface.\n             Thus, a virtual link that is malfunctioning
    can be\n             reset without affecting the operation of other virtual\n
    \            interfaces.\n             The reset can cause Discontinuities in
    the values of the\n             counters of the interface, similar to re-initialization\n
    \            of the management system.  Discontinuity should be\n             indicated
    by the ifCounterDiscontinuityTime object of\n             the Interface MIB module.\"\n
    \   DEFVAL { running }\n    ::= { dot3ExtPkgControlEntry 1 }\n"
  - "dot3ExtPkgObjectPowerDown OBJECT-TYPE\n    SYNTAX  TruthValue\n    MAX-ACCESS
    \ read-write\n    STATUS  current\n    DESCRIPTION\n            \"This object
    is used to power down the EPON interface.\n             The interface may be unavailable
    while the power down\n             occurs and data may be lost.\n             Setting
    this object to true(1) will cause the interface\n             to enter into power
    down mode.  Setting this object to\n             false(2) will cause the interface
    to go out of power\n             down mode.  When getting true(1), the interface
    is in\n             power down mode.  When getting false(2), the interface is\n
    \            not in power down mode.\n             The write operation is not
    restricted in this document\n             and can be done at any time.  Changing\n
    \            dot3ExtPkgObjectPowerDown state can lead to a power down\n             of
    the respective interface, leading to an interruption\n             of service
    of the users connected to the respective EPON\n             interface.\n             This
    object is applicable for an OLT and an ONU.  At the\n             OLT, it has
    a distinct value for each virtual interface.\n             A power down/up of
    a specific virtual interface affects\n             only the virtual interface
    and not the physical\n             interface.  Hence a virtual link, which needs
    a certain\n             handling, can be powered down and then powered up without\n
    \            disrupting the operation of other virtual interfaces.\n             The
    object is relevant when the admin state of the\n             interface is active
    as set by the dot3MpcpAdminState.\"\n    DEFVAL { false }\n    ::= { dot3ExtPkgControlEntry
    2 }\n"
  - "dot3ExtPkgObjectNumberOfLLIDs OBJECT-TYPE\n    SYNTAX  Unsigned32\n    MAX-ACCESS
    \ read-only\n    STATUS  current\n    DESCRIPTION\n            \"A read only object
    that indicates the number of\n             registered LLIDs.  The initialization
    value is 0.\n             This object is applicable for an OLT with the same\n
    \            value for all virtual interfaces and for an ONU.\n             The
    LLID field, as defined in the [802.3ah], is a 2-byte\n             register (15-bit
    field and a broadcast bit) limiting the\n             number of virtual links
    to 32768.  Typically the number\n             of expected virtual links in a PON
    is like the number of\n             ONUs, which is 32-64, plus an additional entry
    for\n             broadcast LLID (with a value of 0xffff).  At the ONU the\n             number
    of LLIDs for an interface is one.\"\n    ::= { dot3ExtPkgControlEntry 3 }\n"
  - "dot3ExtPkgObjectFecEnabled OBJECT-TYPE\n    SYNTAX  INTEGER {\n            noFecEnabled(1),\n
    \           fecTxEnabled(2),\n            fecRxEnabled(3),\n            fecTxRxEnabled(4)\n
    \   }\n    MAX-ACCESS  read-write\n    STATUS  current\n    DESCRIPTION\n           \"An
    object defining the FEC mode of operation of the\n            interface, and indicating
    its state.  The modes defined in\n            this object are extensions to the
    FEC modes defined in\n            the dot3EponFecMode object.\n            When
    noFECEnabled(1), the interface does not enable FEC\n            mode.\n            When
    fecTxEnabled(2), the interface enables the FEC\n            transmit mode.\n            When
    fecRxEnabled(3), the interface enables the FEC\n            receive mode.\n            When
    fecTxRxEnabled(4), the interface enables the FEC\n            transmit and receive
    mode.\n            This object is applicable for an OLT and an ONU.  At the\n
    \           OLT, it has a distinct value for each virtual interface.\n            The
    FEC counters are referring to the receive path.  The\n            FEC counters
    will stop when the FEC receive mode of the\n            interface is disabled,
    as defined by fecRxEnabled(3)\n            and fecTxRxEnabled(4) values.\n            The
    counters:\n             dot3EponFecPCSCodingViolation - not affected by FEC\n
    \            mode.\n             dot3EponFecCorrectedBlocks - stops counting when\n
    \            Rx_FEC is not enabled (noFecEnabled(1) and\n             fecTxEnabled(2)).\n
    \            dot3EponFecUncorrectableBlocks - stops counting when\n             Rx_FEC
    is not enabled (noFecEnabled(1) and\n             fecTxEnabled(2)).\n             dot3EponFecBufferHeadCodingViolation
    - stops counting\n             when Rx_FEC is not enabled (noFecEnabled(1) and\n
    \            fecTxEnabled(2)).\n            The objects:\n             dot3EponFecAbility
    - indicates the FEC ability and is\n             not affected by the FEC mode.\n
    \            dot3EponFecMode - indicates the FEC mode for combined RX\n             and
    TX.\n            The write operation is not restricted in this document\n            and
    can be done at any time.  Changing\n            dot3ExtPkgObjectFecEnabled state
    can lead to disabling\n            the Forward Error Correction on the respective
    interface,\n            which can lead to a degradation of the optical link, and\n
    \           therefore may lead to an interruption of service for the\n            users
    connected to the respective EPON interface.\"\n    DEFVAL { noFecEnabled }\n    ::=
    { dot3ExtPkgControlEntry 4 }\n"
  - "dot3ExtPkgObjectReportMaximumNumQueues OBJECT-TYPE\n    SYNTAX  Unsigned32 (0..7)\n
    \   MAX-ACCESS  read-only\n    STATUS  current\n    DESCRIPTION\n            \"An
    object, that defines the maximal number of queues in\n             the REPORT
    message as defined in [802.3ah], clause 64.  For\n             further information
    please see the description of the\n             queue table.\n             This
    object is applicable for an OLT and an ONU.  At the\n             OLT, it has
    a distinct value for each virtual interface.\"\n    DEFVAL { 0 }\n    ::= { dot3ExtPkgControlEntry
    5 }\n"
  - "dot3ExtPkgObjectRegisterAction OBJECT-TYPE\n    SYNTAX  INTEGER {\n            none(1),\n
    \           register(2),\n            deregister(3),\n            reregister(4)\n
    \   }\n    MAX-ACCESS  read-write\n    STATUS  current\n    DESCRIPTION\n           \"An
    object configuring the registration state of an\n           interface, and indicating
    its registration state.\n            Write operation changes the registration
    state to its new\n            value.\n            Read operation returns the value
    of the state.\n            The registration state is reflected in this object
    and in\n            the dot3MpcpRegistrationState object.\n            none(1)
    indicates an unknown state,\n            register(2) indicates a registered LLID,\n
    \           deregister(3) indicates a deregistered LLID,\n            reregister(4)
    indicates an LLID that is reregistering.\n            The following list describes
    the operation of the\n            interface, as specified in the [802.3ah], when
    a write\n            operation is setting a value.\n             none(1) - not
    doing any action.\n             register(2) - registering an LLID that has been
    requested\n             for registration (The LLID is in registering mode.\n               dot3MpcpRegistrationState
    - registering(2) ).\n               deregister(3) - deregisters an LLID that is
    registered\n                 (dot3MpcpRegistrationState - registered(3) ).\n               reregister(4)
    - reregister an LLID that is registered\n                 (dot3MpcpRegistrationState
    - registered(3) ).\n               The behavior of an ONU and OLT interfaces,
    at each one\n               of the detailed operation at each state, is described
    in\n               the registration state machine of figure 64-22,\n               [802.3ah].\n
    \             This object is applicable for an OLT and an ONU.  At the\n              OLT,
    it has a distinct value for each virtual interface.\n              The write operation
    is not restricted in this document\n              and can be done at any time.
    \ Changing\n              dot3ExtPkgObjectRegisterAction state can lead to a change\n
    \             in the registration state of the respective interface\n              leading
    to a deregistration and an interruption of\n              service of the users
    connected to the respective EPON\n              interface.\"\n      DEFVAL { none
    }\n      ::= { dot3ExtPkgControlEntry 6 }\n  dot3ExtPkgQueueTable OBJECT-TYPE\n
    \     SYNTAX  SEQUENCE OF Dot3ExtPkgQueueEntry\n      MAX-ACCESS  not-accessible\n
    \     STATUS  current\n      DESCRIPTION\n              \"A table of the extended
    package objects for queue\n               management.  The [802.3ah] MPCP defines
    a report message\n               of the occupancy of the transmit queues for the
    feedback\n               BW request from the ONUs.  These queues serve the uplink\n
    \              transmission of the ONU and data is gathered there until\n               the
    ONU is granted for transmission.\n               The management table of the queues
    is added here mainly\n               to control the reporting and to gather some
    statistics\n               of their operation.  This table is not duplicating\n
    \              existing management objects of bridging queues,\n               specified
    in [802.1d], since the existence of a\n               dedicated transmit queuing
    mechanism is implied in the\n               [802.3ah], and the ONU may be a device
    that is not a\n               bridge with embedded bridging queues.\n               The
    format of the REPORT message, as specified\n               in [802.3], is presented
    below:\n               +-----------------------------------+\n               |
    \         Destination Address      |\n               +-----------------------------------+\n
    \              |          Source Address           |\n               +-----------------------------------+\n
    \              |          Length/Type              |\n               +-----------------------------------+\n
    \              |          OpCode                   |\n               +-----------------------------------+\n
    \              |          TimeStamp                |\n               +-----------------------------------+\n
    \              |          Number of queue Sets     |\n               +-----------------------------------+
    \  /|\\\n               |          Report bitmap            |    |\n               +-----------------------------------+
    \   |\n               |          Queue 0 report           |    |\n               +-----------------------------------+
    \   | repeated for\n               |          Queue 1 report           |    |
    every\n               +-----------------------------------+    | queue_set\n               |
    \         Queue 2 report           |    |\n               +-----------------------------------+
    \   |\n               |          Queue 3 report           |    |\n               +-----------------------------------+
    \   |\n               |          Queue 4 report           |    |\n               +-----------------------------------+
    \   |\n               |          Queue 5 report           |    |\n               +-----------------------------------+
    \   |\n               |          Queue 6 report           |    |\n               +-----------------------------------+
    \   |\n               |          Queue 7 report           |    |\n               +-----------------------------------+
    \  \\|/\n               |          Pad/reserved             |\n               +-----------------------------------+\n
    \              |          FCS                      |\n               +-----------------------------------+\n
    \              The 'Queue report' field reports the occupancy of each\n               uplink
    transmission queue.\n               The number of queue sets defines the number
    of the\n               reported sets, as would be explained in the description\n
    \              of the dot3ExtPkgQueueSetsTable table.  For each set the\n               report
    bitmap defines which queue is present in the\n               report, meaning that
    although the MPCP REPORT message\n               can report up to 8 queues in
    a REPORT message, the\n               actual number is flexible.  The Queue table
    has a\n               variable size that is limited by the\n               dot3ExtPkgObjectReportMaximumNumQueues
    object, as an\n               ONU can have fewer queues to report.\n               The
    entries in the table are control and status\n               indication objects
    for managing the queues of an EPON\n               interface that are gathered
    in an extended package as\n               an addition to the objects that are
    based on the\n               [802.3ah] attributes.\n               Each object
    has a row for every virtual link and for\n               every queue in the report.\n
    \              The LLID field, as defined in the [802.3ah], is a 2-byte\n               register
    (15-bit field and a broadcast bit) limiting the\n               number of virtual
    links to 32768.  Typically the number\n               of expected virtual links
    in a PON is like the number of\n               ONUs, which is 32-64, plus an additional
    entry for\n               broadcast LLID (with a value of 0xffff).\n               The
    number of queues is between 0 and 7 and limited by\n               dot3ExtPkgObjectReportMaximumNumQueues.\"\n
    \     ::= { dot3ExtPkgControlObjects 2 }\n  dot3ExtPkgQueueEntry OBJECT-TYPE\n
    \     SYNTAX  Dot3ExtPkgQueueEntry\n      MAX-ACCESS  not-accessible\n      STATUS
    \ current\n      DESCRIPTION\n              \"An entry in the Extended package
    Queue table.  At the\n               OLT, the rows exist for each ifIndex and
    dot3QueueIndex.\n               At the ONU, rows exist for the single ifIndex
    for each\n               dot3QueueIndex.\n               Rows in the table are
    created when the ifIndex of the\n               link is created.  A set of rows
    per queue are added for\n               each ifIndex, denoted by the dot3QueueIndex.\n
    \              A set of rows per queue in the table, for an ONU\n               interface,
    are created at the system initialization.\n               A set of rows per queue
    in the table, corresponding to\n               the OLT ifIndex and a set of rows
    per queue\n               corresponding to the broadcast virtual link, are\n               created
    at the system initialization.\n               A set of rows per queue in the table,
    corresponding to\n               the ifIndex of a virtual link, are created when
    the\n               virtual link is established (ONU registers), and deleted\n
    \              when the virtual link is deleted (ONU deregisters).\"\n      INDEX
    \ { ifIndex, dot3QueueIndex }\n      ::= { dot3ExtPkgQueueTable 1 }\n  Dot3ExtPkgQueueEntry
    ::=\n      SEQUENCE {\n       dot3QueueIndex                              Unsigned32,\n
    \      dot3ExtPkgObjectReportNumThreshold           Unsigned32,\n       dot3ExtPkgObjectReportMaximumNumThreshold
    \   Unsigned32,\n       dot3ExtPkgStatTxFramesQueue                  Counter64,\n
    \      dot3ExtPkgStatRxFramesQueue                  Counter64,\n       dot3ExtPkgStatDroppedFramesQueue
    \            Counter64\n      }\n  dot3QueueIndex OBJECT-TYPE\n      SYNTAX  Unsigned32
    (0..7)\n      MAX-ACCESS  not-accessible\n      STATUS  current\n      DESCRIPTION\n
    \             \"An object that identifies an index for the queue table\n               reflecting
    the queue index of the queues that are\n               reported in the MPCP REPORT
    message as defined in\n               [802.3ah], clause 64.\n               The
    number of queues is between 0 and 7, and limited by\n               dot3ExtPkgObjectReportMaximumNumQueues.\"\n
    \     ::= { dot3ExtPkgQueueEntry 1 }\n  dot3ExtPkgObjectReportNumThreshold OBJECT-TYPE\n
    \     SYNTAX  Unsigned32 (0..7)\n      MAX-ACCESS  read-write\n      STATUS  current\n
    \     DESCRIPTION\n              \"An object that defines the number of thresholds
    for each\n               queue in the REPORT message as defined in [802.3ah],\n
    \              clause 64.\n               Each queue_set reporting will provide
    information on the\n               queue occupancy of frames below the matching
    Threshold.\n               Read operation reflects the number of thresholds.\n
    \              Write operation sets the number of thresholds for each\n               queue.\n
    \              The write operation is not restricted in this document\n               and
    can be done at any time.  Value cannot exceed the\n               maximal value
    defined by the\n               dot3ExtPkgObjectReportMaximumNumThreshold object.\n
    \              Changing dot3ExtPkgObjectReportNumThreshold can lead to\n               a
    change in the reporting of the ONU interface and\n               therefore to
    a change in the bandwidth allocation of the\n               respective interface.
    \ This change may lead a degradation\n               or an interruption of service
    of the users connected to\n               the respective EPON interface.\n               This
    object is applicable for an OLT and an ONU.  At the\n               OLT, it has
    a distinct value for each virtual interface\n               and for each queue.
    \ At the ONU, it has a distinct value\n               for each queue.\"\n      DEFVAL
    { 0 }\n      ::= { dot3ExtPkgQueueEntry 2 }\n  dot3ExtPkgObjectReportMaximumNumThreshold
    OBJECT-TYPE\n      SYNTAX  Unsigned32 (0..7)\n      MAX-ACCESS  read-only\n      STATUS
    \ current\n      DESCRIPTION\n              \"An object, that defines the maximal
    number of thresholds\n               for each queue in the REPORT message as defined
    in\n               [802.3ah], clause 64.  Each queue_set reporting will\n               provide
    information on the queue occupancy of frames\n               below the matching
    Threshold.\n               This object is applicable for an OLT and an ONU.  At
    the\n               OLT, it has a distinct value for each virtual interface\n
    \              and for each queue.  At the ONU, it has a distinct value\n               for
    each queue.\"\n      DEFVAL { 0 }\n      ::= { dot3ExtPkgQueueEntry 3 }\n   dot3ExtPkgStatTxFramesQueue
    OBJECT-TYPE\n      SYNTAX  Counter64\n      UNITS      \"frames\"\n      MAX-ACCESS
    \ read-only\n      STATUS  current\n      DESCRIPTION\n              \"A count
    of the number of times a frame transmission\n               occurs from the corresponding
    'Queue'.\n               Increment the counter by one for each frame transmitted,\n
    \              which is an output of the 'Queue'.\n               The 'Queue'
    marking matches the REPORT MPCP message\n               Queue field as defined
    in [802.3ah], clause 64.\n               This object is applicable for an OLT
    and an ONU.  At the\n               OLT, it has a distinct value for each virtual
    interface\n               and for each queue.  At the ONU, it has a distinct value\n
    \              for each queue.\n               At the OLT the value should be
    zero.\n               Discontinuities of this counter can occur at\n               re-initialization
    of the management system and at other\n               times, as indicated by the
    value of the\n               ifCounterDiscontinuityTime object of the Interface
    MIB\n               module.\"\n      ::= { dot3ExtPkgQueueEntry 4}\n  dot3ExtPkgStatRxFramesQueue
    OBJECT-TYPE\n      SYNTAX  Counter64\n      UNITS      \"frames\"\n      MAX-ACCESS
    \ read-only\n      STATUS  current\n      DESCRIPTION\n              \"A count
    of the number of times a frame reception\n               occurs from the corresponding
    'Queue'.\n               Increment the counter by one for each frame received,\n
    \              which is an input to the corresponding 'Queue'.\n               The
    'Queue' marking matches the REPORT MPCP message\n               Queue field as
    defined in [802.3ah], clause 64.\n               This object is applicable for
    an OLT and an ONU.  At the\n               OLT, it has a distinct value for each
    virtual interface\n               and for each queue.  At the ONU, it has a distinct
    value\n               for each queue.\n               Discontinuities of this
    counter can occur at\n               re-initialization of the management system
    and at other\n               times, as indicated by the value of the\n               ifCounterDiscontinuityTime
    object of the Interface MIB\n               module.\"\n      ::= { dot3ExtPkgQueueEntry
    5}\n  dot3ExtPkgStatDroppedFramesQueue OBJECT-TYPE\n      SYNTAX  Counter64\n
    \     UNITS      \"frames\"\n      MAX-ACCESS  read-only\n      STATUS  current\n
    \     DESCRIPTION\n               \"A count of the number of times a frame drop\n
    \              occurs from the corresponding 'Queue'.\n               Increment
    the counter by one for each frame dropped\n               from the corresponding
    'Queue'.\n               The 'Queue' marking matches the REPORT MPCP message\n
    \              Queue field as defined in [802.3ah], clause 64.\n               This
    object is applicable for an OLT and an ONU.  At the\n               OLT, it has
    a distinct value for each virtual interface\n               and for each queue.
    \ At the ONU, it has a distinct value\n               for each queue.\n               At
    the OLT, the value should be zero.\n               Discontinuities of this counter
    can occur at\n               re-initialization of the management system and at
    other\n               times, as indicated by the value of the\n               ifCounterDiscontinuityTime
    object of the Interface MIB\n               module.\"\n     ::= { dot3ExtPkgQueueEntry
    6}\n  dot3ExtPkgQueueSetsTable OBJECT-TYPE\n      SYNTAX  SEQUENCE OF Dot3ExtPkgQueueSetsEntry\n
    \     MAX-ACCESS  not-accessible\n      STATUS  current\n      DESCRIPTION\n              \"A
    table of Extended package objects used for the\n               management of the
    queue_sets.  Entries are control and\n               status indication objects
    of an EPON interface, which\n               are gathered in an extended package
    as an addition to\n               the objects based on the [802.3ah] attributes.
    \ The\n               objects in this table are specific for the queue_sets,\n
    \              which are reported in the MPCP REPORT message as defined\n               in
    [802.3ah], clause 64.\n               The [802.3ah] MPCP defines a report message
    of the\n               occupancy of the transmit queues for the feedback BW\n
    \              request from the ONUs.  These queues serve the uplink\n               transmission
    of the ONU and data is gathered there until\n               the ONU is granted
    for transmission.\n               The management table of the queues_sets is added
    here\n               mainly to control the reporting and to gather some\n               statistics
    of their operation.  This table is not\n               duplicating existing management
    objects of bridging\n               queues, specified in [802.1d], since the existence
    of a\n               dedicated transmit queuing mechanism is implied in the\n
    \              [802.3ah], and the ONU may be a device that is not a\n               bridge
    with embedded bridging queues.\n               The format of the REPORT message,
    as specified\n               in [802.3], is presented below:\n               +-----------------------------------+\n
    \              |          Destination Address      |\n               +-----------------------------------+\n
    \              |          Source Address           |\n               +-----------------------------------+\n
    \              |          Length/Type              |\n               +-----------------------------------+\n
    \              |          OpCode                   |\n               +-----------------------------------+\n
    \              |          TimeStamp                |\n               +-----------------------------------+\n
    \              |          Number of queue Sets     |\n               +-----------------------------------+
    \  /|\\\n               |          Report bitmap            |    |\n               +-----------------------------------+
    \   |\n               |          Queue 0 report           |    |\n               +-----------------------------------+
    \   | repeated for\n               |          Queue 1 report           |    |
    every\n               +-----------------------------------+    | queue_set\n               |
    \         Queue 2 report           |    |\n               +-----------------------------------+
    \   |\n               |          Queue 3 report           |    |\n               +-----------------------------------+
    \   |\n               |          Queue 4 report           |    |\n               +-----------------------------------+
    \   |\n               |          Queue 5 report           |    |\n               +-----------------------------------+
    \   |\n               |          Queue 6 report           |    |\n               +-----------------------------------+
    \   |\n               |          Queue 7 report           |    |\n               +-----------------------------------+
    \  \\|/\n               |          Pad/reserved             |\n               +-----------------------------------+\n
    \              |          FCS                      |\n               +-----------------------------------+\n
    \              As can be seen from the message format, the ONU\n               interface
    reports of the status of up to 8 queues\n               and it can report in a
    single MPCP REPORT message\n               of a few sets of queues.\n               The
    number of queue_sets defines the number of the\n               reported sets,
    and it can reach a value of up to 8.\n               It means that an ONU can
    hold a variable number of\n               sets between 0 and 7.\n               The
    dot3ExtPkgQueueSetsTable table has a variable\n               queue_set size that
    is limited by the\n               dot3ExtPkgObjectReportMaximumNumThreshold object
    as an\n               ONU can have fewer queue_sets to report.\n               The
    'Queue report' field reports the occupancy of each\n               uplink transmission
    queue.  The queue_sets can be used to\n               report the occupancy of
    the queues in a few levels as to\n               allow granting, in an accurate
    manner, of only part of\n               the data available in the queues.  A Threshold
    is\n               defined for each queue_set to define the level of the\n               queue
    that is counted for the report of the occupancy.\n               The threshold
    is reflected in the queue_set table by the\n               dot3ExtPkgObjectReportThreshold
    object.\n               For each queue set, the report bitmap defines which\n
    \              queues are present in the report, meaning that\n               although
    the MPCP REPORT message can report of up to 8\n               queues in a REPORT
    message, the actual number is\n               flexible.\n               The dot3ExtPkgQueueSetsTable
    table has a variable queue\n               size that is limited by the\n               dot3ExtPkgObjectReportMaximumNumQueues
    object as an ONU\n               can have fewer queues to report.\n               Each
    object has a row for every virtual link, for each\n               queue in the
    report and for each queue_set in the queue.\n               The LLID field, as
    defined in the [802.3ah], is a 2-byte\n               register (15-bit field and
    a broadcast bit) limiting the\n               number of virtual links to 32768.
    \ Typically the number\n               of expected virtual links in a PON is like
    the number of\n               ONUs, which is 32-64, plus an additional entry for\n
    \              broadcast LLID (with a value of 0xffff).\n               The number
    of queues is between 0 and 7 and limited by\n               dot3ExtPkgObjectReportMaximumNumQueues.\n
    \              The number of queues_sets is between 0 and 7 and limited\n               by
    dot3ExtPkgObjectReportMaximumNumThreshold.\"\n      ::= { dot3ExtPkgControlObjects
    3 }\n  dot3ExtPkgQueueSetsEntry OBJECT-TYPE\n      SYNTAX  Dot3ExtPkgQueueSetsEntry\n
    \     MAX-ACCESS  not-accessible\n      STATUS  current\n      DESCRIPTION\n              \"An
    entry in the Extended package queue_set table.  At\n               the OLT, the
    rows exist for each ifIndex,\n               dot3QueueSetQueueIndex and dot3QueueSetIndex.
    \ At the\n               ONU, rows exist for the single ifIndex, for each\n               dot3QueueSetQueueIndex
    and dot3QueueSetIndex.\n               Rows in the table are created when the
    ifIndex of the\n               link is created.  A set of rows per queue and per\n
    \              queue_set are added for each ifIndex, denoted by\n               dot3QueueSetIndex
    and dot3QueueSetQueueIndex.\n               A set of rows per queue and per queue_set
    in the table,\n               for an ONU interface are created at system\n               initialization.\n
    \              A set of rows per queue and per queue_Set in the table,\n               corresponding
    to the OLT ifIndex and a set of rows per\n               queue and per queue_set,
    corresponding to the broadcast\n               virtual link, are created at system
    initialization.\n               A set of rows per queue and per queue_set in the
    table,\n               corresponding to the ifIndex of a virtual link are\n               created
    when the virtual link is established (ONU\n               registers) and deleted
    when the virtual link is deleted\n               (ONU deregisters).\"\n               INDEX
    { ifIndex,\n              dot3QueueSetQueueIndex,dot3QueueSetIndex}\n      ::=
    { dot3ExtPkgQueueSetsTable 1 }\n  Dot3ExtPkgQueueSetsEntry ::=\n      SEQUENCE
    {\n       dot3QueueSetQueueIndex                      Unsigned32,\n       dot3QueueSetIndex
    \                          Unsigned32,\n       dot3ExtPkgObjectReportThreshold
    \            Unsigned32\n      }\n  dot3QueueSetQueueIndex OBJECT-TYPE\n      SYNTAX
    \ Unsigned32 (0..7)\n      MAX-ACCESS  not-accessible\n      STATUS  current\n
    \     DESCRIPTION\n              \"An object that identifies the queue index for
    the\n               dot3ExtPkgQueueSetsTable table.  The queues are reported\n
    \              in the MPCP REPORT message as defined in [802.3ah],\n               clause
    64.\n               The number of queues is between 0 and 7, and limited by\n
    \              dot3ExtPkgObjectReportMaximumNumQueues.\n               Value corresponds
    to the dot3QueueIndex of the queue\n               table.\"\n      ::= { dot3ExtPkgQueueSetsEntry
    1 }\n  dot3QueueSetIndex OBJECT-TYPE\n      SYNTAX  Unsigned32 (0..7)\n      MAX-ACCESS
    \ not-accessible\n      STATUS  current\n      DESCRIPTION\n              \"An
    object that identifies the queue_set index for the\n               dot3ExtPkgQueueSetsTable
    table.  The queues are reported\n               in the MPCP REPORT message as
    defined in [802.3ah],\n               clause 64.\n               The number of
    queues_sets is between 0 and 7, and\n               limited by dot3ExtPkgObjectReportMaximumNumThreshold.\"\n
    \     ::= { dot3ExtPkgQueueSetsEntry 2 }\n      dot3ExtPkgObjectReportThreshold
    OBJECT-TYPE\n      SYNTAX  Unsigned32\n      UNITS       \"TQ (16nsec)\"\n      MAX-ACCESS
    \ read-write\n      STATUS  current\n      DESCRIPTION\n              \"An object
    that defines the value of a threshold report\n               for each queue_set
    in the REPORT message as defined in\n               [802.3ah], clause 64.  The
    number of sets for each queue\n               is dot3ExtPkgObjectReportNumThreshold.\n
    \              In the REPORT message, each queue_set reporting will\n               provide
    information on the occupancy of the queues for\n               frames below the
    matching Threshold.\n               The value returned shall be in Time quanta
    (TQ), which\n               is 16nsec or 2 octets increments.\n               Read
    operation provides the threshold value.  Write\n               operation sets
    the value of the threshold.\n               The write operation is not restricted
    in this document\n               and can be done at any time.  Changing\n               dot3ExtPkgObjectReportThreshold
    can lead to a change in\n               the reporting of the ONU interface and
    therefore to a\n               change in the bandwidth allocation of the respective\n
    \              interface.  This change may lead a degradation or an\n               interruption
    of service for the users connected to the\n               respective EPON interface.\n
    \              This object is applicable for an OLT and an ONU.  At the\n               OLT,
    it has a distinct value for each virtual interface,\n               for each queue
    and for each queue_set.  At the ONU, it has\n               a distinct value for
    each queue and for each queue_set.\"\n      DEFVAL { 0 }\n      ::= { dot3ExtPkgQueueSetsEntry
    3 }\n  --Optical Interface status tables\n  dot3ExtPkgOptIfTable OBJECT-TYPE\n
    \     SYNTAX     SEQUENCE OF Dot3ExtPkgOptIfEntry\n      MAX-ACCESS not-accessible\n
    \     STATUS     current\n      DESCRIPTION\n              \"This table defines
    the control and status indication\n               objects for the optical interface
    of the EPON interface.\n               Each object has a row for every virtual
    link denoted by\n               the corresponding ifIndex.\n               The
    LLID field, as defined in the [802.3ah], is a 2-byte\n               register
    (15-bit field and a broadcast bit) limiting the\n               number of virtual
    links to 32768.  Typically the number\n               of expected virtual links
    in a PON is like the number of\n               ONUs, which is 32-64, plus an additional
    entry for\n               broadcast LLID (with a value of 0xffff).\n               Although
    the optical interface is a physical interface,\n               there is a row
    in the table for each virtual interface.\n               The reason for having
    a separate row for each virtual\n               link is that the OLT has a separate
    link for each one of\n               the ONUs.  For instance, ONUs could be in
    different\n               distances with different link budgets and different\n
    \              receive powers, therefore having different power alarms.\n               It
    is quite similar to a case of different physical\n               interfaces.\"\n
    \     ::= { dot3ExtPkgControlObjects 5}\n  dot3ExtPkgOptIfEntry OBJECT-TYPE\n
    \     SYNTAX     Dot3ExtPkgOptIfEntry\n      MAX-ACCESS not-accessible\n      STATUS
    \    current\n      DESCRIPTION\n              \"An entry in the optical interface
    table of the EPON\n               interface.\n               Rows exist for an
    OLT interface and an ONU interface.\n               A row in the table is denoted
    by the ifIndex of the link\n               and it is created when the ifIndex
    is created.\n               The rows in the table for an ONU interface are created\n
    \              at system initialization.\n               The row in the table
    corresponding to the OLT ifIndex\n               and the row corresponding to
    the broadcast virtual link\n               are created at system initialization.\n
    \              A row in the table corresponding to the ifIndex of a\n               virtual
    links is created when a virtual link is\n               established (ONU registers)
    and deleted when the virtual\n               link is deleted (ONU deregisters).\"\n
    \     INDEX       { ifIndex }\n      ::= { dot3ExtPkgOptIfTable 1 }\n   Dot3ExtPkgOptIfEntry
    ::=\n     SEQUENCE {\n       dot3ExtPkgOptIfSuspectedFlag             TruthValue,\n
    \      dot3ExtPkgOptIfInputPower                Integer32,\n       dot3ExtPkgOptIfLowInputPower
    \            Integer32,\n       dot3ExtPkgOptIfHighInputPower            Integer32,\n
    \      dot3ExtPkgOptIfLowerInputPowerThreshold  Integer32,\n       dot3ExtPkgOptIfUpperInputPowerThreshold
    \ Integer32,\n       dot3ExtPkgOptIfOutputPower               Integer32,\n       dot3ExtPkgOptIfLowOutputPower
    \           Integer32,\n       dot3ExtPkgOptIfHighOutputPower           Integer32,\n
    \      dot3ExtPkgOptIfLowerOutputPowerThreshold Integer32,\n       dot3ExtPkgOptIfUpperOutputPowerThreshold
    Integer32,\n       dot3ExtPkgOptIfSignalDetect              TruthValue,\n       dot3ExtPkgOptIfTransmitAlarm
    \            TruthValue,\n       dot3ExtPkgOptIfTransmitEnable            TruthValue\n
    \      }\n  dot3ExtPkgOptIfSuspectedFlag OBJECT-TYPE\n    SYNTAX  TruthValue\n
    \   MAX-ACCESS  read-only\n    STATUS  current\n    DESCRIPTION\n      \"This
    object is a reliability indication.\n       If true, the data in this entry may
    be unreliable.\n       This object is applicable for an OLT and an ONU.  At the\n
    \      OLT, it has a distinct value for each virtual interface.\"\n    ::= { dot3ExtPkgOptIfEntry
    1 }\n  dot3ExtPkgOptIfInputPower OBJECT-TYPE\n    SYNTAX  Integer32\n    UNITS
    \ \"0.1 dbm\"\n    MAX-ACCESS  read-only\n    STATUS  current\n    DESCRIPTION\n
    \     \"The optical power monitored at the input.\n       This object is applicable
    for an OLT and an ONU.  At the\n       OLT, it has a distinct value for each virtual
    interface.\"\n  ::= { dot3ExtPkgOptIfEntry 2 }\n  dot3ExtPkgOptIfLowInputPower
    OBJECT-TYPE\n    SYNTAX  Integer32\n    UNITS  \"0.1 dbm\"\n    MAX-ACCESS  read-only\n
    \   STATUS  current\n    DESCRIPTION\n      \"The lowest optical power monitored
    at the input during the\n       current 15-minute interval.\n       This object
    is applicable for an OLT and an ONU.  At the\n       OLT, it has a distinct value
    for each virtual interface.\"\n    ::= { dot3ExtPkgOptIfEntry 3 }\n  dot3ExtPkgOptIfHighInputPower
    OBJECT-TYPE\n    SYNTAX  Integer32\n    UNITS  \"0.1 dbm\"\n    MAX-ACCESS  read-only\n
    \   STATUS  current\n    DESCRIPTION\n      \"The highest optical power monitored
    at the input during the\n       current 15-minute interval.\n       This object
    is applicable for an OLT and an ONU.  At the\n       OLT, it has a distinct value
    for each virtual interface.\"\n    ::= { dot3ExtPkgOptIfEntry 4 }\n  dot3ExtPkgOptIfLowerInputPowerThreshold
    OBJECT-TYPE\n    SYNTAX  Integer32\n    UNITS  \"0.1 dbm\"\n    MAX-ACCESS  read-write\n
    \   STATUS  current\n    DESCRIPTION\n      \"The lower limit threshold on input
    power.  If\n       dot3ExtPkgOptIfInputPower drops to this value or below,\n       a
    Threshold Crossing Alert (TCA) should be sent.\n       Reading will present the
    threshold value.  Writing will\n       set the value of the threshold.\n       The
    write operation is not restricted in this document\n       and can be done at
    any time.  Changing\n       dot3ExtPkgOptIfLowerInputPowerThreshold can lead to
    a Threshold\n       Crossing Alert (TCA) being sent for the respective interface.\n
    \      This alert may be leading to an interruption of service for the\n       users
    connected to the respective EPON interface, depending on\n       the system action
    on such an alert.\n       This object is applicable for an OLT and an ONU.  At
    the\n       OLT, it has a distinct value for each virtual interface.\"\n    ::=
    { dot3ExtPkgOptIfEntry 5 }\n  dot3ExtPkgOptIfUpperInputPowerThreshold OBJECT-TYPE\n
    \   SYNTAX  Integer32\n    UNITS  \"0.1 dbm\"\n    MAX-ACCESS  read-write\n    STATUS
    \ current\n    DESCRIPTION\n      \"The upper limit threshold on input power.
    \ If\n       dot3ExtPkgOptIfInputPower reaches or exceeds this value,\n       a
    Threshold Crossing Alert (TCA) should be sent.\n       Reading will present the
    threshold value.  Writing will\n       set the value of the threshold.\n       The
    write operation is not restricted in this document\n       and can be done at
    any time.  Changing\n       dot3ExtPkgOptIfUpperInputPowerThreshold can lead to
    a Threshold\n       Crossing Alert (TCA) being sent for the respective interface.\n
    \      This alert may be leading to an interruption of service for the\n       users
    connected to the respective EPON interface, depending on\n       the system action
    on such an alert.\n       This object is applicable for an OLT and an ONU.  At
    the\n       OLT, it has a distinct value for each virtual interface.\"\n   ::=
    { dot3ExtPkgOptIfEntry 6 }\n  dot3ExtPkgOptIfOutputPower OBJECT-TYPE\n    SYNTAX
    \ Integer32\n    UNITS  \"0.1 dbm\"\n    MAX-ACCESS  read-only\n    STATUS  current\n
    \   DESCRIPTION\n      \"The optical power monitored at the output.\n       This
    object is applicable for an OLT and an ONU.  At the\n       OLT, it has a distinct
    value for each virtual interface.\"\n    ::= { dot3ExtPkgOptIfEntry 7 }\n  dot3ExtPkgOptIfLowOutputPower
    OBJECT-TYPE\n    SYNTAX  Integer32\n    UNITS  \"0.1 dbm\"\n    MAX-ACCESS  read-only\n
    \   STATUS  current\n    DESCRIPTION\n      \"The lowest optical power monitored
    at the output during the\n       current 15-minute interval.\n       This object
    is applicable for an OLT and an ONU.  At the\n       OLT, it has a distinct value
    for each virtual interface.\"\n    ::= { dot3ExtPkgOptIfEntry 8 }\n  dot3ExtPkgOptIfHighOutputPower
    OBJECT-TYPE\n    SYNTAX  Integer32\n    UNITS  \"0.1 dbm\"\n    MAX-ACCESS  read-only\n
    \   STATUS  current\n    DESCRIPTION\n      \"The highest optical power monitored
    at the output during the\n       current 15-minute interval.\n       This object
    is applicable for an OLT and an ONU.  At the\n       OLT, it has a distinct value
    for each virtual interface.\"\n   ::= { dot3ExtPkgOptIfEntry 9 }\n  dot3ExtPkgOptIfLowerOutputPowerThreshold
    OBJECT-TYPE\n    SYNTAX  Integer32\n    UNITS  \"0.1 dbm\"\n    MAX-ACCESS  read-write\n
    \   STATUS  current\n    DESCRIPTION\n      \"The lower limit threshold on output
    power.  If\n       dot3ExtPkgOptIfOutputPower drops to this value or below,\n
    \      a Threshold Crossing Alert (TCA) should be sent.\n       Reading will present
    the threshold value.  Writing will\n       set the value of the threshold.\n       The
    write operation is not restricted in this document\n       and can be done at
    any time.  Changing\n       dot3ExtPkgOptIfLowerOutputPowerThreshold can lead
    to a Threshold\n       Crossing Alert (TCA) being sent for the respective interface.\n
    \      This alert may be leading to an interruption of service for the\n       users
    connected to the respective EPON interface, depending on\n       the system action
    on such an alert.\n       This object is applicable for an OLT and an ONU.  At
    the\n       OLT, it has a distinct value for each virtual interface.\"\n  ::=
    { dot3ExtPkgOptIfEntry 10 }\n  dot3ExtPkgOptIfUpperOutputPowerThreshold OBJECT-TYPE\n
    \   SYNTAX  Integer32\n    UNITS  \"0.1 dbm\"\n    MAX-ACCESS  read-write\n    STATUS
    \ current\n    DESCRIPTION\n      \"The upper limit threshold on output power.
    \ If\n       dot3ExtPkgOptIfOutputPower reaches or exceeds this value,\n       a
    Threshold Crossing Alert (TCA) should be sent.\n       Reading will present the
    threshold value.  Writing will\n       set the value of the threshold.\n       The
    write operation is not restricted in this document\n       and can be done at
    any time.  Changing\n       dot3ExtPkgOptIfUpperOutputPowerThreshold can lead
    to a Threshold\n       Crossing Alert (TCA) being sent for the respective interface.\n
    \      This alert may be leading to an interruption of service of the\n       users
    connected to the respective EPON interface, depending on\n       the system action
    on such an alert.\n       This object is applicable for an OLT and an ONU.  At
    the\n       OLT, it has a distinct value for each virtual interface.\"\n    ::=
    { dot3ExtPkgOptIfEntry 11 }\n  dot3ExtPkgOptIfSignalDetect OBJECT-TYPE\n      SYNTAX
    \ TruthValue\n      MAX-ACCESS  read-only\n      STATUS  current\n      DESCRIPTION\n
    \             \"When getting true(1), there is a valid optical signal at\n               the
    receive that is above the optical power level for\n               signal detection.
    \ When getting false(2) the optical\n               signal at the receive is below
    the optical power level\n               for signal detection.\n               This
    object is applicable for an OLT and an ONU.  At the\n               OLT, it has
    a distinct value for each virtual interface.\"\n      DEFVAL { false }\n      ::=
    { dot3ExtPkgOptIfEntry 12 }\n  dot3ExtPkgOptIfTransmitAlarm OBJECT-TYPE\n      SYNTAX
    \ TruthValue\n      MAX-ACCESS  read-only\n      STATUS  current\n      DESCRIPTION\n
    \             \"When getting true(1) there is a non-valid optical signal\n               at
    the transmit of the interface, either a higher level\n               or lower
    level than expected.  When getting false(2) the\n               optical signal
    at the transmit is valid and in the\n               required range.\n               This
    object is applicable for an OLT and an ONU.  At the\n               OLT, it has
    a distinct value for each virtual interface.\"\n      DEFVAL { false }\n      ::=
    { dot3ExtPkgOptIfEntry 13 }\n  dot3ExtPkgOptIfTransmitEnable OBJECT-TYPE\n      SYNTAX
    \ TruthValue\n      MAX-ACCESS  read-write\n      STATUS  current\n      DESCRIPTION\n
    \             \"Setting this object to true(1) will cause the optical\n               interface
    to start transmission (according to the\n               control protocol specified
    for the logical interface).\n               Setting this object to false(2) will
    cause the\n               interface to stop the optical transmission.\n               When
    getting true(1), the optical interface is in\n               transmitting mode
    (obeying to the logical control\n               protocol).\n               When
    getting false(2), the optical interface is not in\n               transmitting
    mode.\n               The write operation is not restricted in this document\n
    \              and can be done at any time.  Changing\n               dot3ExtPkgOptIfTransmitEnable
    state can lead to a halt\n               in the optical transmission of the respective
    interface\n               leading to an interruption of service of the users\n
    \              connected to the respective EPON interface.\n               The
    object is relevant when the admin state of the\n               interface is active
    as set by the dot3MpcpAdminState.\n               This object is applicable for
    an OLT and an ONU.  At the\n               OLT it, has a distinct value for each
    virtual interface.\"\n      DEFVAL { false }\n      ::= { dot3ExtPkgOptIfEntry
    14 }\n  -- Conformance Statements\n  -- Conformance Groups\n  dot3EponGroups      OBJECT
    IDENTIFIER ::= { dot3EponConformance 1 }\n  dot3MpcpGroupBase OBJECT-GROUP\n      OBJECTS
    {\n              dot3MpcpOperStatus,\n              dot3MpcpAdminState,\n              dot3MpcpMode,\n
    \             dot3MpcpSyncTime,\n              dot3MpcpLinkID,\n              dot3MpcpRemoteMACAddress,\n
    \             dot3MpcpRegistrationState,\n              dot3MpcpMaximumPendingGrants,\n
    \             dot3MpcpTransmitElapsed,\n              dot3MpcpReceiveElapsed,\n
    \             dot3MpcpRoundTripTime\n      }\n      STATUS  current\n      DESCRIPTION\n
    \            \"A collection of objects of dot3 Mpcp Control entity state\n              definition.
    \ Objects are per LLID.\"\n      ::= { dot3EponGroups 1 }\n  dot3MpcpGroupStat
    OBJECT-GROUP\n      OBJECTS {\n              dot3MpcpMACCtrlFramesTransmitted,\n
    \             dot3MpcpMACCtrlFramesReceived,\n              dot3MpcpDiscoveryWindowsSent,\n
    \             dot3MpcpDiscoveryTimeout,\n              dot3MpcpTxRegRequest,\n
    \             dot3MpcpRxRegRequest,\n              dot3MpcpTxRegAck,\n              dot3MpcpRxRegAck,\n
    \             dot3MpcpTxReport,\n              dot3MpcpRxReport,\n              dot3MpcpTxGate,\n
    \             dot3MpcpRxGate,\n              dot3MpcpTxRegister,\n              dot3MpcpRxRegister\n
    \     }\n      STATUS  current\n      DESCRIPTION\n              \"A collection
    of objects of dot3 Mpcp Statistics.\n               Objects are per LLID.\"\n
    \     ::= { dot3EponGroups 2 }\n  dot3OmpeGroupID OBJECT-GROUP\n      OBJECTS
    {\n              dot3OmpEmulationType\n      }\n      STATUS  current\n      DESCRIPTION\n
    \             \"A collection of objects of dot3 OMP emulation entity\n               state
    definition.  Objects are per LLID.\"\n      ::= { dot3EponGroups 3 }\n  dot3OmpeGroupStat
    OBJECT-GROUP\n      OBJECTS {\n              dot3OmpEmulationSLDErrors,\n              dot3OmpEmulationCRC8Errors,\n
    \             dot3OmpEmulationBadLLID,\n              dot3OmpEmulationGoodLLID,\n
    \             dot3OmpEmulationOnuPonCastLLID,\n              dot3OmpEmulationOltPonCastLLID,\n
    \             dot3OmpEmulationBroadcastBitNotOnuLlid,\n              dot3OmpEmulationOnuLLIDNotBroadcast,\n
    \             dot3OmpEmulationBroadcastBitPlusOnuLlid,\n              dot3OmpEmulationNotBroadcastBitNotOnuLlid\n
    \     }\n      STATUS  current\n      DESCRIPTION\n              \"A collection
    of objects of dot3 OMP emulation\n               Statistics.  Objects are per
    LLID.\"\n      ::= { dot3EponGroups 4 }\n  dot3EponFecGroupAll OBJECT-GROUP\n
    \     OBJECTS {\n              dot3EponFecPCSCodingViolation,\n              dot3EponFecAbility,\n
    \             dot3EponFecMode,\n              dot3EponFecCorrectedBlocks,\n              dot3EponFecUncorrectableBlocks,\n
    \             dot3EponFecBufferHeadCodingViolation\n      }\n      STATUS  current\n
    \     DESCRIPTION\n              \"A collection of objects of dot3 FEC group control
    and\n              statistics.  Objects are per LLID.\"\n      ::= { dot3EponGroups
    5 }\n  dot3ExtPkgGroupControl OBJECT-GROUP\n      OBJECTS {\n              dot3ExtPkgObjectReset,\n
    \             dot3ExtPkgObjectPowerDown,\n              dot3ExtPkgObjectNumberOfLLIDs,\n
    \             dot3ExtPkgObjectFecEnabled,\n              dot3ExtPkgObjectReportMaximumNumQueues,\n
    \             dot3ExtPkgObjectRegisterAction\n      }\n      STATUS  current\n
    \     DESCRIPTION\n              \"A collection of objects of dot3ExtPkg control\n
    \              definition.  Objects are per LLID.\"\n      ::= { dot3EponGroups
    6 }\n  dot3ExtPkgGroupQueue OBJECT-GROUP\n      OBJECTS {\n       dot3ExtPkgObjectReportNumThreshold,\n
    \      dot3ExtPkgObjectReportMaximumNumThreshold,\n       dot3ExtPkgStatTxFramesQueue,\n
    \      dot3ExtPkgStatRxFramesQueue,\n       dot3ExtPkgStatDroppedFramesQueue\n
    \     }\n      STATUS  current\n      DESCRIPTION\n              \"A collection
    of objects of dot3ExtPkg Queue\n               control.  Objects are per LLID,
    per queue.\"\n      ::= { dot3EponGroups 7 }\n  dot3ExtPkgGroupQueueSets OBJECT-GROUP\n
    \     OBJECTS {\n       dot3ExtPkgObjectReportThreshold\n      }\n      STATUS
    \ current\n      DESCRIPTION\n              \"A collection of objects of dot3ExtPkg
    queue_set\n               control.  Objects are per LLID, per queue, per\n               queue_set.\"\n
    \     ::= { dot3EponGroups 8 }\n  dot3ExtPkgGroupOptIf OBJECT-GROUP\n      OBJECTS
    {\n     dot3ExtPkgOptIfSuspectedFlag,\n       dot3ExtPkgOptIfInputPower,\n       dot3ExtPkgOptIfLowInputPower,\n
    \      dot3ExtPkgOptIfHighInputPower,\n       dot3ExtPkgOptIfLowerInputPowerThreshold,\n
    \      dot3ExtPkgOptIfUpperInputPowerThreshold,\n       dot3ExtPkgOptIfOutputPower,\n
    \      dot3ExtPkgOptIfLowOutputPower,\n       dot3ExtPkgOptIfHighOutputPower,\n
    \      dot3ExtPkgOptIfLowerOutputPowerThreshold,\n       dot3ExtPkgOptIfUpperOutputPowerThreshold,\n
    \      dot3ExtPkgOptIfSignalDetect,\n       dot3ExtPkgOptIfTransmitAlarm,\n       dot3ExtPkgOptIfTransmitEnable\n
    \      }\n      STATUS  current\n      DESCRIPTION\n              \"A collection
    of objects of control and status indication\n               of the optical interface.\n
    \              Objects are per LLID.\"\n      ::= { dot3EponGroups 9 }\n  -- Compliance\n
    \    dot3EponCompliances\n         OBJECT IDENTIFIER ::= { dot3EponConformance
    2 }\n  dot3MPCPCompliance MODULE-COMPLIANCE\n      STATUS      current\n      DESCRIPTION
    \"The compliance statement for Multi-Point\n                   Control Protocol
    interfaces.\"\n      MODULE  -- this module\n      MANDATORY-GROUPS { dot3MpcpGroupBase}\n
    \     GROUP       dot3MpcpGroupStat\n     DESCRIPTION \"This group is mandatory
    for all MPCP supporting\n                  interfaces for statistics collection.\"\n
    \    ::= { dot3EponCompliances 1}\n  dot3OmpeCompliance MODULE-COMPLIANCE\n      STATUS
    \     current\n      DESCRIPTION \"The compliance statement for OMPEmulation\n
    \                  interfaces.\"\n      MODULE  -- this module\n      MANDATORY-GROUPS
    { dot3OmpeGroupID}\n      GROUP       dot3OmpeGroupStat\n      DESCRIPTION \"This
    group is mandatory for all OMPemulation\n                   supporting interfaces
    for statistics collection.\"\n      ::= { dot3EponCompliances 2}\n  dot3EponFecCompliance
    MODULE-COMPLIANCE\n      STATUS      current\n      DESCRIPTION \"The compliance
    statement for FEC EPON interfaces.\n                   This group is mandatory
    for all FEC supporting\n                   interfaces for control and statistics
    collection.\"\n      MODULE  -- this module\n      MANDATORY-GROUPS { dot3EponFecGroupAll
    }\n      ::= { dot3EponCompliances 3}\n  dot3ExtPkgCompliance MODULE-COMPLIANCE\n
    \     STATUS      current\n      DESCRIPTION \"The compliance statement for EPON
    Interfaces\n                   using the extended package.\"\n      MODULE  --
    this module\n      MANDATORY-GROUPS { dot3ExtPkgGroupControl }\n      GROUP       dot3ExtPkgGroupQueue\n
    \     DESCRIPTION \" This group is mandatory for all EPON interfaces\n                   supporting
    REPORT queue management of the extended\n                   package.\"\n      GROUP
    \      dot3ExtPkgGroupQueueSets\n      DESCRIPTION \" This group is mandatory
    for all EPON interfaces\n                   supporting REPORT queue_sets management
    of the\n                   extended package.\"\n      GROUP       dot3ExtPkgGroupOptIf\n
    \     DESCRIPTION \"This group is mandatory for all EPON interfaces\n                   supporting
    optical interfaces management,\n                   of the extended package.\"\n
    \     ::= { dot3EponCompliances 4}\n  END\n"
  title: 6.   Definitions - The DOT3 EPON MIB Module
- contents:
  - "7.  IANA Considerations\n   IANA has allocated a single object identifier for
    the MODULE-IDENTITY\n   of the DOT3-EPON-MIB module under the MIB-2 tree.\n   The
    MIB module in this document uses the following IANA-assigned\n   OBJECT IDENTIFIER
    values recorded in the SMI Numbers registry:\n         Descriptor        OBJECT
    IDENTIFIER value\n         ----------        -----------------------\n         dot3EponMIB
    \       { mib-2 155 }\n"
  title: 7.  IANA Considerations
- contents:
  - "8.  Acknowledgements\n   This document is the result of the efforts of the HUBMIB
    Working\n   Group.  Some special thanks to Dan Romascanu, who was WG chair during\n
    \  most of the development of this document, and who carefully reviewed\n   and
    commented on the initial versions of this document.  Also, some\n   special thanks
    to Bert Wijnen, who is the current WG chair, for his\n   review and comments on
    the final stages of this document.\n   Special thanks are due to David Perkins
    for his detailed and helpful\n   MIB Doctor review of this document.\n   Also,
    some special thanks to some of the IEEE802.3ah Working Group\n   people for their
    contribution and additional reviews of the document.\n"
  title: 8.  Acknowledgements
- contents:
  - "9.  Security Considerations\n   There are number of managed objects defined in
    this MIB module that\n   have a MAX-ACCESS clause of read-write or read-create.
    \ Writing to\n   these objects can have potentially disruptive effects on network\n
    \  operation, including:\n   Changing dot3MpcpAdminState state can lead to disabling
    the\n   Multi-Point Control Protocol on the respective interface, leading to\n
    \  the interruption of service for the users connected to the respective\n   EPON
    interface.\n   Changing dot3EponFecMode state can lead to disabling the Forward\n
    \  Error Correction on the respective interface, which can lead to a\n   degradation
    of the optical link, and therefore may lead to an\n   interruption of service
    for the users connected to the respective\n   EPON interface.\n   Changing dot3ExtPkgObjectReset
    state can lead to a reset of the\n   respective interface leading to an interruption
    of service for the\n   users connected to the respective EPON interface.\n   Changing
    dot3ExtPkgObjectPowerDown state can lead to a power down of\n   the respective
    interface, leading to an interruption of service for\n   the users connected to
    the respective EPON interface.\n   Changing dot3ExtPkgObjectFecEnabled state can
    lead to disabling the\n   Forward Error Correction on the respective interface,
    which can lead\n   to a degradation of the optical link, and therefore may lead
    to an\n   interruption of service for the users connected to the respective\n
    \  EPON interface.\n   Changing dot3ExtPkgObjectRegisterAction state can lead
    to a change in\n   the registration state of the respective interface, leading
    to a\n   deregistration and an interruption of service for the users connected\n
    \  to the respective EPON interface.\n   Changing dot3ExtPkgObjectReportNumThreshold
    can lead to a change in\n   the reporting of the ONU interface and therefore to
    a change in the\n   bandwidth allocation of the respective interface.  This change
    may\n   lead a degradation or an interruption of service for the users\n   connected
    to the respective EPON interface.\n   Changing dot3ExtPkgObjectReportThreshold
    can lead to a change in the\n   reporting of the ONU interface and therefore to
    a change in the\n   bandwidth allocation of the respective interface.  This change
    may\n   lead a degradation or an interruption of service for the users\n   connected
    to the respective EPON interface.\n   Changing dot3ExtPkgOptIfLowerInputPowerThreshold
    can lead to a\n   Threshold Crossing Alert (TCA) being sent for the respective\n
    \  interface.  This alert may be leading to an interruption of service\n   for
    the users connected to the respective EPON interface, depending\n   on the system
    action on such an alert.\n   Changing dot3ExtPkgOptIfUpperInputPowerThreshold
    can lead to a\n   Threshold Crossing Alert (TCA) being sent for the respective\n
    \  interface.  This alert may be leading to an interruption of service\n   for
    the users connected to the respective EPON interface, depending\n   on the system
    action on such an alert.\n   Changing dot3ExtPkgOptIfLowerOutputPowerThreshold
    can lead to a\n   Threshold Crossing Alert (TCA) being sent for the respective\n
    \  interface.  This alert may be leading to an interruption of service\n   for
    the users connected to the respective EPON interface, depending\n   on the system
    action on such an alert.\n   Changing dot3ExtPkgOptIfUpperOutputPowerThreshold
    can lead to a\n   Threshold Crossing Alert (TCA) being sent for the respective\n
    \  interface.  This alert may be leading to an interruption of service\n   for
    the users connected to the respective EPON interface, depending\n   on the system
    action on such an alert.\n   Changing dot3ExtPkgOptIfTransmitEnable state can
    lead to a halt in\n   the optical transmission of the respective interface, leading
    to an\n   interruption of service for the users connected to the respective\n
    \  EPON interface.\n   The user of this MIB module must therefore be aware that
    support for\n   SET operations in a non-secure environment without proper protection\n
    \  can have a negative effect on network operations.\n   The readable objects
    in this MIB module (i.e., those with MAX-ACCESS\n   other than not-accessible)
    may be considered sensitive in some\n   environments since, collectively, they
    provide information about the\n   performance of network interfaces and can reveal
    some aspects of\n   their configuration.  In such environments it is important
    to control\n   even GET and NOTIFY access to these objects and possibly even to\n
    \  encrypt their values when sending them over the network via SNMP.\n   SNMP
    versions prior to SNMPv3 did not include adequate security.\n   Even if the network
    itself is secure (for example by using IPsec),\n   even then, there is no control
    as to who on the secure network is\n   allowed to access and GET/SET (read/change/create/delete)
    the objects\n   in this MIB module.\n   It is RECOMMENDED that implementers consider
    the security features as\n   provided by the SNMPv3 framework (see [RFC3410],
    section 8),\n   including full support for the SNMPv3 cryptographic mechanisms
    (for\n   authentication and privacy).\n   Further, deployment of SNMP versions
    prior to SNMPv3 is NOT\n   RECOMMENDED.  Instead, it is RECOMMENDED to deploy
    SNMPv3 and to\n   enable cryptographic security.  It is then a customer/operator\n
    \  responsibility to ensure that the SNMP entity giving access to an\n   instance
    of this MIB module is properly configured to give access to\n   the objects only
    to those principals (users) that have legitimate\n   rights to indeed GET or SET
    (change/create/delete) them.\n"
  title: 9.  Security Considerations
- contents:
  - '10.  References

    '
  - contents:
    - "10.1.  Normative References\n   [802.1d]       IEEE, \"Institute of Electrical
      and Electronic\n                  Engineers,  802.1D-2004, IEEE Standard for
      Local and\n                  metropolitan area networks Media Access Control
      (MAC)\n                  Bridges.\", June 2004.\n   [802.3]        IEEE, \"Institute
      of Electrical and Electronic\n                  Engineers, IEEE Std 802.3-2002,
      \"IEEE Standard for\n                  Carrier Sense Multiple Access with Collision
      Detection\n                  (CSMA/CD) Access Method and Physical Layer\n                  Specifications.\",
      December 2002.\n   [802.3ah]      IEEE, \"Institute of Electrical and Electronic\n
      \                 Engineers, IEEE Std 802.3ah-2004.  Information\n                  technology
      - Telecommunications and information\n                  exchange between systems
      - Local and metropolitan area\n                  networks - Specific requirements
      - Part 3: Carrier\n                  sense multiple access with collision detection\n
      \                 (CSMA/CD) access method and physical layer\n                  specifications
      - Media Access Control Parameters,\n                  Physical Layers and Management
      Parameters for\n                  subscriber access networks.\", IEEE Std 802.3ah-2004,\n
      \                 October 2004.\n   [ITU-T.G.975]  ITU, \"ITU-T, SERIES G: TRANSMISSION
      SYSTEMS AND MEDIA,\n                  DIGITAL SYSTEMS AND NETWORKS Digital sections
      and\n                  digital line system - Optical fibre submarine cable\n
      \                 systems Forward error correction for submarine\n                  systems,
      ITU-T  Recommendation  G.975\", October 2000.\n   [ITU-T.G.983]  ITU, \"ITU-T,
      SERIES G: TRANSMISSION SYSTEMS AND MEDIA,\n                  DIGITAL SYSTEMS
      AND NETWORKS, Digital transmission\n                  systems - Digital sections
      and digital line system -\n                  Optical line systems for local
      and access networks\n                  Broadband optical access systems based
      on Passive\n                  Optical Networks (PON), ITU-T Recommendation G.983.1\",\n
      \                 October 1998.\n   [RFC2119]      Bradner, S., \"Key words
      for use in RFCs to Indicate\n                  Requirement Levels\", BCP 14,
      RFC 2119, March 1997.\n   [RFC2578]      McCloghrie, K., Ed., Perkins, D., Ed.,
      and J.\n                  Schoenwaelder, Ed., \"Structure of Management\n                  Information
      Version 2 (SMIv2)\", STD 58, RFC 2578,\n                  April 1999.\n   [RFC2579]
      \     McCloghrie, K., Ed., Perkins, D., Ed., and J.\n                  Schoenwaelder,
      Ed., \"Textual Conventions for SMIv2\",\n                  STD 58, RFC 2579,
      April 1999.\n   [RFC2580]      McCloghrie, K., Perkins, D., and J. Schoenwaelder,\n
      \                 \"Conformance Statements for SMIv2\", STD 58, RFC 2580,\n
      \                 April 1999.\n   [RFC2863]      McCloghrie, K. and F. Kastenholz,
      \"The Interfaces\n                  Group MIB\", RFC 2863, June 2000.\n   [RFC2864]
      \     McCloghrie, K. and G. Hanson, \"The Inverted Stack\n                  Table
      Extension to the Interfaces Group MIB\",\n                  RFC 2864, June 2000.\n
      \  [RFC3635]      Flick, J., \"Definitions of Managed Objects for the\n                  Ethernet-like
      Interface Types\", RFC 3635,\n                  September 2003.\n   [RFC4836]
      \     Beili, E., \"Definitions of Managed Objects for IEEE\n                  802.3
      Medium Attachment Units (MAUs)\", RFC 4836,\n                  April 2007.\n"
    title: 10.1.  Normative References
  - contents:
    - "10.2.  Informative References\n   [RFC1525]      Decker, E., McCloghrie, K.,
      Langille, P., and A.\n                  Rijsinghani, \"Definitions of Managed
      Objects for\n                  Source Routing Bridges\", RFC 1525, September
      1993.\n   [RFC3410]      Case, J., Mundy, R., Partain, D., and B. Stewart,\n
      \                 \"Introduction and Applicability Statements for\n                  Internet-Standard
      Management Framework\", RFC 3410,\n                  December 2002.\n   [RFC4188]
      \     Norseth, K. and E. Bell, \"Definitions of Managed\n                  Objects
      for Bridges\", RFC 4188, September 2005.\n   [RFC4878]      Squire, M., \"Definitions
      and Managed Objects for\n                  Operations, Administration, and Maintenance
      (OAM)\n                  Functions on Ethernet-Like Interfaces\", RFC 4878,\n
      \                 June 2007.\n"
    title: 10.2.  Informative References
  title: 10.  References
- contents:
  - "Author's Address\n   Lior Khermosh\n   PMC-SIERRA\n   Kohav Hertzelia bldg,\n
    \  4 Hasadnaot St.,\n   Hertzliya Pituach,  46120\n   ISRAEL\n   Phone: +972-9-9628000
    Ext: 302\n   Fax:   +972-9-9628001\n   EMail: lior_khermosh@pmc-sierra.com\n"
  title: Author's Address
- contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document
    is subject to the rights, licenses and restrictions\n   contained in BCP 78, and
    except as set forth therein, the authors\n   retain all their rights.\n   This
    document and the information contained herein are provided on an\n   \"AS IS\"
    basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE INTERNET ENGINEERING
    TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE
    ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
