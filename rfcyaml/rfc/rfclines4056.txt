Abstract This document specifies the conventions for using the RSASSA PSS (RSA Probabilistic Signature Scheme) digital signature algorithm with the Cryptographic Message Syntax (CMS).
This document specifies the conventions for using the RSA Probabilistic Signature Scheme (RSASSA PSS) [P1v2.1] digital signature algorithm with the Cryptographic Message Syntax [CMS] signed data content type.
CMS values are generated using ASN.1 [X.208 88], using the Basic Encoding Rules (BER) [X.209 88] and the Distinguished Encoding Rules (DER)
This document is written to be used in conjunction with RFC 4055 [RSA ALGS].
All of the ASN.1 structures referenced in this document are defined in RFC 4055.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 [STDWORDS].
Although there are no known defects with the PKCS #1 v1.5
[P1v1.5] signature algorithm, RSASSA PSS [P1v2.1] was developed in an effort to have more mathematically provable security.
v1.5 signatures were developed in an ad hoc manner; RSASSA PSS was developed based on mathematical foundations.
Algorithm Identifiers and Parameters 2.1.
The RSASSA PSS signature algorithm is defined in RFC 3447 [P1v2.1].
Conventions for encoding the public key are defined in RFC 4055 [RSA ALGS].
Two algorithm identifiers for RSA subject public keys in certificates are used.
When the rsaEncryption algorithm identifier is used for a public key, the AlgorithmIdentifier parameters field MUST contain NULL.
Complete details can be found in [RSA ALGS].
When the id RSASSA PSS algorithm identifier is used for a public key, the AlgorithmIdentifier parameters field MUST either be absent or contain RSASSA PSS params.
Again, complete details can be found in [RSA ALGS].
In both cases, the RSA public key, which is composed of a modulus and a public exponent, MUST be encoded using the RSAPublicKey type.
The output of this encoding is carried in the certificate subject public key.
When the id RSASSA PSS algorithm identifier is used for a signature, the AlgorithmIdentifier parameters field MUST contain RSASSA PSS  params.
Information about RSASSA PSS params can be found in [RSA  ALGS].
When signing, the RSA algorithm generates a single value, and that value is used directly as the signature value.
Signed data Conventions digestAlgorithms SHOULD contain the one way hash function used to compute the message digest on the eContent value.
The same one way hash function SHOULD be used for computing the message digest on both the eContent and the signedAttributes value if signedAttributes exist.
The same one way hash function MUST be used for computing the message digest on the signedAttributes and as the hashAlgorithm in the RSA  PSS params structure.
The algorithm parameters field MUST contain RSASSA PSS params.
signature contains the single value resulting from the signing operation.
If the subjectPublicKeyInfo algorithm identifier for the public key in the certificate is
id RSASSA PSS and the parameters field is present, the following additional steps MUST be done as part of signature validation: 1.
The hashAlgorithm field in the certificate subjectPublicKey.algorithm parameters and the signatureAlgorithm parameters MUST be the same.
The maskGenAlgorithm field in the certificate subjectPublicKey.algorithm parameters and the signatureAlgorithm parameters MUST be the same.
The saltLength in the signatureAlgorithm parameters MUST be greater or equal to the saltLength in the certificate subjectPublicKey.algorithm parameters.
The trailerField in the certificate subjectPublicKey.algorithm parameters and signatureAlgorithm parameters MUST be the same.
In doing the above comparisons, default values are considered to be the same as extant values.
If any of the above four steps is not true, the signature checking algorithm MUST fail validation.
Security Considerations Implementations must protect the RSA private key.
Compromise of the RSA private key may result in the ability to forge signatures.
The generation of RSA private key relies on random numbers.
The use of inadequate pseudo random number generators (PRNGs) to generate these values can result in little or no security.
An attacker may find it much easier to reproduce the PRNG environment that produced the keys, searching the resulting small set of possibilities, rather than brute force searching the whole key space.
The generation of quality random numbers is difficult.
RFC 1750 [RANDOM] offers important guidance in this area.
Using the same private key for different algorithms has the potential of allowing an attacker to get extra information about the key.
It is strongly suggested that the same key not be used for both the PKCS #1 v1.5 and RSASSA PSS signature algorithms.
When computing signatures, the same hash function should be used for all operations.
This reduces the number of failure points in the signature process.
The parameter checking procedures outlined in section 3 are of special importance.
It is possible to forge signatures by changing (especially to weaker values) these parameter values.
Signers using this algorithm should take care that only one set of parameter values is used as this decreases the possibility of leaking information.
Soaring Hawk Consulting PO Box
675 Gold Bar, WA 98251 EMail: jimsch@exmsft.com
