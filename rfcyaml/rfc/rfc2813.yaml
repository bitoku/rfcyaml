- title: __initial_text__
  contents:
  - '                  Internet Relay Chat: Server Protocol

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   While based on the client-server model, the IRC (Internet Relay\
    \ Chat)\n   protocol allows servers to connect to each other effectively forming\n\
    \   a network.\n   This document defines the protocol used by servers to talk\
    \ to each\n   other.  It was originally a superset of the client protocol but\
    \ has\n   evolved differently.\n   First formally documented in May 1993 as part\
    \ of RFC 1459 [IRC], most\n   of the changes brought since then can be found in\
    \ this document as\n   development was focused on making the protocol scale better.\
    \  Better\n   scalability has allowed existing world-wide networks to keep growing\n\
    \   and reach sizes which defy the old specification.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction ...............................................\
    \   3\n   2.  Global database ............................................   3\n\
    \      2.1  Servers ................................................   3\n   \
    \   2.2  Clients ................................................   4\n      \
    \   2.2.1  Users .............................................   4\n         2.2.2\
    \  Services ..........................................   4\n      2.3  Channels\
    \ ...............................................   4\n   3.  The IRC Server Specification\
    \ ...............................   5\n      3.1  Overview ...............................................\
    \   5\n      3.2  Character codes ........................................   5\n\
    \      3.3  Messages ...............................................   5\n   \
    \      3.3.1  Message format in Augmented BNF ...................   6\n      3.4\
    \  Numeric replies ........................................   7\n   4.  Message\
    \ Details ............................................   7\n      4.1  Connection\
    \ Registration ................................   8\n         4.1.1  Password\
    \ message ..................................   8\n         4.1.2  Server message\
    \ ....................................   9\n         4.1.3  Nick ..............................................\
    \  10\n         4.1.4  Service message ...................................  11\n\
    \         4.1.5  Quit ..............................................  12\n   \
    \      4.1.6  Server quit message ...............................  13\n      4.2\
    \  Channel operations .....................................  14\n         4.2.1\
    \  Join message ......................................  14\n         4.2.2  Njoin\
    \ message .....................................  15\n         4.2.3  Mode message\
    \ ......................................  16\n   5.  Implementation details  ....................................\
    \  16\n      5.1  Connection 'Liveness' ..................................  16\n\
    \      5.2  Accepting a client to server connection ................  16\n   \
    \      5.2.1  Users .............................................  16\n      \
    \   5.2.2  Services ..........................................  17\n      5.3\
    \  Establishing a server-server connection. ...............  17\n         5.3.1\
    \  Link options ......................................  17\n            5.3.1.1\
    \  Compressed server to server links ............  18\n            5.3.1.2  Anti\
    \ abuse protections .......................  18\n         5.3.2  State information\
    \ exchange when connecting ........  18\n      5.4  Terminating server-client\
    \ connections ..................  19\n      5.5  Terminating server-server connections\
    \ ..................  19\n      5.6  Tracking nickname changes ..............................\
    \  19\n      5.7  Tracking recently used nicknames .......................  20\n\
    \      5.8  Flood control of clients ...............................  20\n   \
    \   5.9  Non-blocking lookups ...................................  21\n      \
    \   5.9.1  Hostname (DNS) lookups ............................  21\n         5.9.2\
    \  Username (Ident) lookups ..........................  21\n   6.  Current problems\
    \ ...........................................  21\n      6.1  Scalability ............................................\
    \  21\n      6.2  Labels .................................................  22\n\
    \         6.2.1  Nicknames .........................................  22\n   \
    \      6.2.2  Channels ..........................................  22\n      \
    \   6.2.3  Servers ...........................................  22\n      6.3\
    \  Algorithms .............................................  22\n   7.  Security\
    \ Considerations ....................................  23\n      7.1  Authentication\
    \ .........................................  23\n      7.2  Integrity ..............................................\
    \  23\n   8.  Current support and availability ...........................  24\n\
    \   9.  Acknowledgements ...........................................  24\n   10.\
    \  References ................................................  24\n   11.  Author's\
    \ Address ..........................................  25\n   12. Full Copyright\
    \ Statement ...................................  26\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This document is intended for people working on implementing\
    \ an IRC\n   server but will also be useful to anyone implementing an IRC service.\n\
    \   Servers provide the three basic services required for realtime\n   conferencing\
    \ defined by the \"Internet Relay Chat: Architecture\"\n   [IRC-ARCH]: client\
    \ locator (via the client protocol [IRC-CLIENT]),\n   message relaying (via the\
    \ server protocol defined in this document)\n   and channel hosting and management\
    \ (following specific rules [IRC-\n   CHAN]).\n"
- title: 2. Global database
  contents:
  - "2. Global database\n   Although the IRC Protocol defines a fairly distributed\
    \ model, each\n   server maintains a \"global state database\" about the whole\
    \ IRC\n   network.  This database is, in theory, identical on all servers.\n"
- title: 2.1 Servers
  contents:
  - "2.1 Servers\n   Servers are uniquely identified by their name which has a maximum\n\
    \   length of sixty three (63) characters.  See the protocol grammar\n   rules\
    \ (section 3.3.1) for what may and may not be used in a server\n   name.\n   Each\
    \ server is typically known by all other servers, however it is\n   possible to\
    \ define a \"hostmask\" to group servers together according\n   to their name.\
    \  Inside the hostmasked area, all the servers have a\n   name which matches the\
    \ hostmask, and any other server with a name\n   matching the hostmask SHALL NOT\
    \ be connected to the IRC network\n   outside the hostmasked area.  Servers which\
    \ are outside the area have\n   no knowledge of the individual servers present\
    \ inside the area,\n   instead they are presented with a virtual server which\
    \ has the\n   hostmask for name.\n"
- title: 2.2 Clients
  contents:
  - "2.2 Clients\n   For each client, all servers MUST have the following information:\
    \ a\n   netwide unique identifier (whose format depends on the type of\n   client)\
    \ and the server to which the client is connected.\n"
- title: 2.2.1 Users
  contents:
  - "2.2.1 Users\n   Each user is distinguished from other users by a unique nickname\n\
    \   having a maximum length of nine (9) characters.  See the protocol\n   grammar\
    \ rules (section 3.3.1) for what may and may not be used in a\n   nickname.  In\
    \ addition to the nickname, all servers MUST have the\n   following information\
    \ about all users: the name of the host that the\n   user is running on, the username\
    \ of the user on that host, and the\n   server to which the client is connected.\n"
- title: 2.2.2 Services
  contents:
  - "2.2.2 Services\n   Each service is distinguished from other services by a service\
    \ name\n   composed of a nickname and a server name.  The nickname has a maximum\n\
    \   length of nine (9) characters.  See the protocol grammar rules\n   (section\
    \ 3.3.1) for what may and may not be used in a nickname.  The\n   server name\
    \ used to compose the service name is the name of the\n   server to which the\
    \ service is connected.  In addition to this\n   service name all servers MUST\
    \ know the service type.\n   Services differ from users by the format of their\
    \ identifier, but\n   more importantly services and users don't have the same\
    \ type of\n   access to the server: services can request part or all of the global\n\
    \   state information that a server maintains, but have a more restricted\n  \
    \ set of commands available to them (See \"IRC Client Protocol\" [IRC-\n   CLIENT]\
    \ for details on which) and are not allowed to join channels.\n   Finally services\
    \ are not usually subject to the \"Flood control\"\n   mechanism described in\
    \ section 5.8.\n"
- title: 2.3 Channels
  contents:
  - "2.3 Channels\n   Alike services, channels have a scope [IRC-CHAN] and are not\n\
    \   necessarily known to all servers.  When a channel existence is known\n   to\
    \ a server, the server MUST keep track of the channel members, as\n   well as\
    \ the channel modes.\n"
- title: 3. The IRC Server Specification
  contents:
  - '3. The IRC Server Specification

    '
- title: 3.1 Overview
  contents:
  - "3.1 Overview\n   The protocol as described herein is for use with server to server\n\
    \   connections.  For client to server connections, see the IRC Client\n   Protocol\
    \ specification.\n   There are, however, more restrictions on client connections\
    \ (which\n   are considered to be untrustworthy) than on server connections.\n"
- title: 3.2 Character codes
  contents:
  - "3.2 Character codes\n   No specific character set is specified. The protocol\
    \ is based on a a\n   set of codes which are composed of eight (8) bits, making\
    \ up an\n   octet.  Each message may be composed of any number of these octets;\n\
    \   however, some octet values are used for control codes which act as\n   message\
    \ delimiters.\n   Regardless of being an 8-bit protocol, the delimiters and keywords\n\
    \   are such that protocol is mostly usable from US-ASCII terminal and a\n   telnet\
    \ connection.\n   Because of IRC's Scandinavian origin, the characters {}|^ are\n\
    \   considered to be the lower case equivalents of the characters []\\~,\n   respectively.\
    \ This is a critical issue when determining the\n   equivalence of two nicknames,\
    \ or channel names.\n"
- title: 3.3 Messages
  contents:
  - "3.3 Messages\n   Servers and clients send each other messages which may or may\
    \ not\n   generate a reply.  Most communication between servers do not generate\n\
    \   any reply, as servers mostly perform routing tasks for the clients.\n   Each\
    \ IRC message may consist of up to three main parts: the prefix\n   (OPTIONAL),\
    \ the command, and the command parameters (maximum of\n   fifteen (15)).  The\
    \ prefix, command, and all parameters are separated\n   by one ASCII space character\
    \ (0x20) each.\n   The presence of a prefix is indicated with a single leading\
    \ ASCII\n   colon character (':', 0x3b), which MUST be the first character of\
    \ the\n   message itself.  There MUST be NO gap (whitespace) between the colon\n\
    \   and the prefix.  The prefix is used by servers to indicate the true\n   origin\
    \ of the message.  If the prefix is missing from the message, it\n   is assumed\
    \ to have originated from the connection from which it was\n   received.  Clients\
    \ SHOULD not use a prefix when sending a message\n   from themselves; if they\
    \ use one, the only valid prefix is the\n   registered nickname associated with\
    \ the client.\n   When a server receives a message, it MUST identify its source\
    \ using\n   the (eventually assumed) prefix.  If the prefix cannot be found in\n\
    \   the server's internal database, it MUST be discarded, and if the\n   prefix\
    \ indicates the message comes from an (unknown) server, the link\n   from which\
    \ the message was received MUST be dropped.  Dropping a link\n   in such circumstances\
    \ is a little excessive but necessary to maintain\n   the integrity of the network\
    \ and to prevent future problems.  Another\n   common error condition is that\
    \ the prefix found in the server's\n   internal database identifies a different\
    \ source (typically a source\n   registered from a different link than from which\
    \ the message\n   arrived).  If the message was received from a server link and\
    \ the\n   prefix identifies a client, a KILL message MUST be issued for the\n\
    \   client and sent to all servers.  In other cases, the link from which\n   the\
    \ message arrived SHOULD be dropped for clients, and MUST be\n   dropped for servers.\
    \  In all cases, the message MUST be discarded.\n   The command MUST either be\
    \ a valid IRC command or a three (3) digit\n   number represented in ASCII text.\n\
    \   IRC messages are always lines of characters terminated with a CR-LF\n   (Carriage\
    \ Return - Line Feed) pair, and these messages SHALL NOT\n   exceed 512 characters\
    \ in length, counting all characters including\n   the trailing CR-LF. Thus, there\
    \ are 510 characters maximum allowed\n   for the command and its parameters. \
    \ There is no provision for\n   continuation message lines.  See section 5 for\
    \ more details about\n   current implementations.\n"
- title: 3.3.1 Message format in Augmented BNF
  contents:
  - "3.3.1 Message format in Augmented BNF\n   The protocol messages must be extracted\
    \ from the contiguous stream of\n   octets.  The current solution is to designate\
    \ two characters, CR and\n   LF, as message separators.  Empty messages are silently\
    \ ignored,\n   which permits use of the sequence CR-LF between messages without\n\
    \   extra problems.\n   The extracted message is parsed into the components <prefix>,\n\
    \   <command> and list of parameters (<params>).\n   The Augmented BNF representation\
    \ for this is found in \"IRC Client\n   Protocol\" [IRC-CLIENT].\n   The extended\
    \ prefix ([\"!\" user \"@\" host ]) MUST NOT be used in server\n   to server communications\
    \ and is only intended for server to client\n   messages in order to provide clients\
    \ with more useful information\n   about who a message is from without the need\
    \ for additional queries.\n"
- title: 3.4 Numeric replies
  contents:
  - "3.4 Numeric replies\n   Most of the messages sent to the server generate a reply\
    \ of some\n   sort.  The most common reply is the numeric reply, used for both\n\
    \   errors and normal replies.  The numeric reply MUST be sent as one\n   message\
    \ consisting of the sender prefix, the three digit numeric, and\n   the target\
    \ of the reply.  A numeric reply is not allowed to originate\n   from a client;\
    \ any such messages received by a server are silently\n   dropped. In all other\
    \ respects, a numeric reply is just like a normal\n   message, except that the\
    \ keyword is made up of 3 numeric digits\n   rather than a string of letters.\
    \  A list of different replies is\n   supplied in \"IRC Client Protocol\" [IRC-CLIENT].\n"
- title: 4. Message Details
  contents:
  - "4. Message Details\n   All the messages recognized by the IRC server and client\
    \ are\n   described in the IRC Client Protocol specification.\n   Where the reply\
    \ ERR_NOSUCHSERVER is returned, it means that the\n   target of the message could\
    \ not be found.  The server MUST NOT send\n   any other replies after this error\
    \ for that command.\n   The server to which a client is connected is required\
    \ to parse the\n   complete message, returning any appropriate errors.  If the\
    \ server\n   encounters a fatal error while parsing a message, an error MUST be\n\
    \   sent back to the client and the parsing terminated.  A fatal error\n   may\
    \ follow from incorrect command, a destination which is otherwise\n   unknown\
    \ to the server (server, client or channel names fit this\n   category), not enough\
    \ parameters or incorrect privileges.\n   If a full set of parameters is presented,\
    \ then each MUST be checked\n   for validity and appropriate responses sent back\
    \ to the client.  In\n   the case of messages which use parameter lists using\
    \ the comma as an\n   item separator, a reply MUST be sent for each item.\n  \
    \ In the examples below, some messages appear using the full format:\n   :Name\
    \ COMMAND parameter list\n   Such examples represent a message from \"Name\" in\
    \ transit between\n   servers, where it is essential to include the name of the\
    \ original\n   sender of the message so remote servers may send back a reply along\n\
    \   the correct path.\n   The message details for client to server communication\
    \ are described\n   in the \"IRC Client Protocol\" [IRC-CLIENT].  Some sections\
    \ in the\n   following pages apply to some of these messages, they are additions\n\
    \   to the message specifications which are only relevant to server to\n   server\
    \ communication, or to the server implementation.  The messages\n   which are\
    \ introduced here are only used for server to server\n   communication.\n"
- title: 4.1 Connection Registration
  contents:
  - "4.1 Connection Registration\n   The commands described here are used to register\
    \ a connection with\n   another IRC server.\n"
- title: 4.1.1 Password message
  contents:
  - "4.1.1 Password message\n      Command: PASS\n   Parameters: <password> <version>\
    \ <flags> [<options>]\n   The PASS command is used to set a 'connection password'.\
    \  The\n   password MUST be set before any attempt to register the connection\
    \ is\n   made.  Currently this means that servers MUST send a PASS command\n \
    \  before any SERVER command.  Only one (1) PASS command SHALL be\n   accepted\
    \ from a connection.\n   The last three (3) parameters MUST be ignored if received\
    \ from a\n   client (e.g. a user or a service).  They are only relevant when\n\
    \   received from a server.\n   The <version> parameter is a string of at least\
    \ four (4) characters,\n   and up to fourteen (14) characters.  The first four\
    \ (4) characters\n   MUST be digits and indicate the protocol version known by\
    \ the server\n   issuing the message.  The protocol described by this document\
    \ is\n   version 2.10 which is encoded as \"0210\".  The remaining OPTIONAL\n\
    \   characters are implementation dependent and should describe the\n   software\
    \ version number.\n   The <flags> parameter is a string of up to one hundred (100)\n\
    \   characters.  It is composed of two substrings separated by the\n   character\
    \ \"|\" (%x7C).  If present, the first substring MUST be the\n   name of the implementation.\
    \  The reference implementation (See\n   Section 8, \"Current support and availability\"\
    ) uses the string \"IRC\".\n   If a different implementation is written, which\
    \ needs an identifier,\n   then that identifier should be registered through publication\
    \ of an\n   RFC. The second substring is implementation dependent.  Both\n   substrings\
    \ are OPTIONAL, but the character \"|\" is REQUIRED.  The\n   character \"|\"\
    \ MUST NOT appear in either substring.\n   Finally, the last parameter, <options>,\
    \ is used for link options.\n   The only options defined by the protocol are link\
    \ compression (using\n   the character \"Z\"), and an abuse protection flag (using\
    \ the character\n   \"P\").  See sections 5.3.1.1 (Compressed server to server\
    \ links) and\n   5.3.1.2 (Anti abuse protections) respectively for more information\
    \ on\n   these options.\n   Numeric Replies:\n           ERR_NEEDMOREPARAMS  \
    \            ERR_ALREADYREGISTRED\n   Example:\n        PASS moresecretpassword\
    \ 0210010000 IRC|aBgH$ Z\n"
- title: 4.1.2 Server message
  contents:
  - "4.1.2 Server message\n      Command: SERVER\n   Parameters: <servername> <hopcount>\
    \ <token> <info>\n   The SERVER command is used to register a new server. A new\
    \ connection\n   introduces itself as a server to its peer.  This message is also\
    \ used\n   to pass server data over whole net.  When a new server is connected\n\
    \   to net, information about it MUST be broadcasted to the whole\n   network.\n\
    \   The <info> parameter may contain space characters.\n   <hopcount> is used\
    \ to give all servers some internal information on\n   how far away each server\
    \ is.  Local peers have a value of 0, and each\n   passed server increments the\
    \ value.  With a full server list, it\n   would be possible to construct a map\
    \ of the entire server tree, but\n   hostmasks prevent this from being done.\n\
    \   The <token> parameter is an unsigned number used by servers as an\n   identifier.\
    \  This identifier is subsequently used to reference a\n   server in the NICK\
    \ and SERVICE messages sent between servers.  Server\n   tokens only have a meaning\
    \ for the point-to-point peering they are\n   used and MUST be unique for that\
    \ connection.  They are not global.\n   The SERVER message MUST only be accepted\
    \ from either (a) a connection\n   which is yet to be registered and is attempting\
    \ to register as a\n   server, or (b) an existing connection to another server,\
    \ in which\n   case the SERVER message is introducing a new server behind that\n\
    \   server.\n   Most errors that occur with the receipt of a SERVER command result\
    \ in\n   the connection being terminated by the destination host (target\n   SERVER).\
    \  Because of the severity of such event, error replies are\n   usually sent using\
    \ the \"ERROR\" command rather than a numeric.\n   If a SERVER message is parsed\
    \ and it attempts to introduce a server\n   which is already known to the receiving\
    \ server, the connection, from\n   which that message arrived, MUST be closed\
    \ (following the correct\n   procedures), since a duplicate route to a server\
    \ has been formed and\n   the acyclic nature of the IRC tree breaks.  In some\
    \ conditions, the\n   connection from which the already known server has registered\
    \ MAY be\n   closed instead.  It should be noted that this kind of error can also\n\
    \   be the result of a second running server, problem which cannot be\n   fixed\
    \ within the protocol and typically requires human intervention.\n   This type\
    \ of problem is particularly insidious, as it can quite\n   easily result in part\
    \ of the IRC network to be isolated, with one of\n   the two servers connected\
    \ to each partition therefore making it\n   impossible for the two parts to unite.\n\
    \   Numeric Replies:\n           ERR_ALREADYREGISTRED\n   Example:\n   SERVER\
    \ test.oulu.fi 1 1 :Experimental server ; New server\n                       \
    \            test.oulu.fi introducing itself and\n                           \
    \        attempting to register.\n   :tolsun.oulu.fi SERVER csd.bu.edu 5 34 :BU\
    \ Central Server ; Server\n                                   tolsun.oulu.fi is\
    \ our uplink for\n                                   csd.bu.edu which is 5 hops\
    \ away.  The\n                                   token \"34\" will be used by\n\
    \                                   tolsun.oulu.fi when introducing new\n    \
    \                               users or services connected to\n             \
    \                      csd.bu.edu.\n"
- title: 4.1.3 Nick
  contents:
  - "4.1.3 Nick\n      Command: NICK\n   Parameters: <nickname> <hopcount> <username>\
    \ <host> <servertoken>\n               <umode> <realname>\n   This form of the\
    \ NICK message MUST NOT be allowed from user\n   connections. However, it MUST\
    \ be used instead of the NICK/USER pair\n   to notify other servers of new users\
    \ joining the IRC network.\n   This message is really the combination of three\
    \ distinct messages:\n   NICK, USER and MODE [IRC-CLIENT].\n   The <hopcount>\
    \ parameter is used by servers to indicate how far away\n   a user is from its\
    \ home server.  A local connection has a hopcount of\n   0.  The hopcount value\
    \ is incremented by each passed server.\n   The <servertoken> parameter replaces\
    \ the <servername> parameter of\n   the USER (See section 4.1.2 for more information\
    \ on server tokens).\n   Examples:\n   NICK syrk 5 kalt millennium.stealth.net\
    \ 34 +i :Christophe Kalt ; New\n                                   user with nickname\
    \ \"syrk\", username\n                                   \"kalt\", connected from\
    \ host\n                                   \"millennium.stealth.net\" to server\n\
    \                                   \"34\" (\"csd.bu.edu\" according to the\n\
    \                                   previous example).\n   :krys NICK syrk   \
    \              ; The other form of the NICK message,\n                       \
    \            as defined in \"IRC Client Protocol\"\n                         \
    \          [IRC-CLIENT] and used between\n                                   servers:\
    \ krys changed his nickname to\n                                   syrk\n"
- title: 4.1.4 Service message
  contents:
  - "4.1.4 Service message\n      Command: SERVICE\n   Parameters: <servicename> <servertoken>\
    \ <distribution> <type>\n                <hopcount> <info>\n   The SERVICE command\
    \ is used to introduce a new service.  This form of\n   the SERVICE message SHOULD\
    \ NOT be allowed from client (unregistered,\n   or registered) connections.  However,\
    \ it MUST be used between servers\n   to notify other servers of new services\
    \ joining the IRC network.\n   The <servertoken> is used to identify the server\
    \ to which the service\n   is connected.  (See section 4.1.2 for more information\
    \ on server\n   tokens).\n   The <hopcount> parameter is used by servers to indicate\
    \ how far away\n   a service is from its home server.  A local connection has\
    \ a hopcount\n   of 0.  The hopcount value is incremented by each passed server.\n\
    \   The <distribution> parameter is used to specify the visibility of a\n   service.\
    \  The service may only be known to servers which have a name\n   matching the\
    \ distribution.  For a matching server to have knowledge\n   of the service, the\
    \ network path between that server and the server\n   to which the service is\
    \ connected MUST be composed of servers whose\n   names all match the mask.  Plain\
    \ \"*\" is used when no restriction is\n   wished.\n   The <type> parameter is\
    \ currently reserved for future usage.\n   Numeric Replies:\n           ERR_ALREADYREGISTRED\
    \            ERR_NEEDMOREPARAMS\n           ERR_ERRONEUSNICKNAME\n           RPL_YOURESERVICE\
    \                RPL_YOURHOST\n           RPL_MYINFO\n   Example:\n"
- title: SERVICE dict@irc.fr 9 *.fr 0 1 :French Dictionary r" registered on
  contents:
  - "SERVICE dict@irc.fr 9 *.fr 0 1 :French Dictionary r\" registered on\n       \
    \                            server \"9\" is being announced to\n            \
    \                       another server.  This service will\n                 \
    \                  only be available on servers whose\n                      \
    \             name matches \"*.fr\".\n"
- title: 4.1.5 Quit
  contents:
  - "4.1.5 Quit\n      Command: QUIT\n   Parameters: [<Quit Message>]\n   A client\
    \ session ends with a quit message.  The server MUST close the\n   connection\
    \ to a client which sends a QUIT message. If a \"Quit\n   Message\" is given,\
    \ this will be sent instead of the default message,\n   the nickname or service\
    \ name.\n   When \"netsplit\" (See Section 4.1.6) occur, the \"Quit Message\"\
    \ is\n   composed of the names of two servers involved, separated by a space.\n\
    \   The first name is that of the server which is still connected and the\n  \
    \ second name is either that of the server which has become\n   disconnected or\
    \ that of the server to which the leaving client was\n   connected:\n      <Quit\
    \ Message> =  \":\" servername SPACE servername\n   Because the \"Quit Message\"\
    \ has a special meaning for \"netsplits\",\n   servers SHOULD NOT allow a client\
    \ to use a <Quit Message> in the\n   format described above.\n   If, for some\
    \ other reason, a client connection is closed without the\n   client issuing a\
    \ QUIT command (e.g. client dies and EOF occurs on\n   socket), the server is\
    \ REQUIRED to fill in the quit message with some\n   sort of message reflecting\
    \ the nature of the event which caused it to\n   happen.  Typically, this is done\
    \ by reporting a system specific\n   error.\n   Numeric Replies:\n           None.\n\
    \   Examples:\n   :WiZ QUIT :Gone to have lunch   ; Preferred message format.\n"
- title: 4.1.6 Server quit message
  contents:
  - "4.1.6 Server quit message\n      Command: SQUIT\n   Parameters: <server> <comment>\n\
    \   The SQUIT message has two distinct uses.\n   The first one (described in \"\
    Internet Relay Chat: Client Protocol\"\n   [IRC-CLIENT]) allows operators to break\
    \ a local or remote server\n   link.  This form of the message is also eventually\
    \ used by servers to\n   break a remote server link.\n   The second use of this\
    \ message is needed to inform other servers when\n   a \"network split\" (also\
    \ known as \"netsplit\") occurs, in other words\n   to inform other servers about\
    \ quitting or dead servers.  If a server\n   wishes to break the connection to\
    \ another server it MUST send a SQUIT\n   message to the other server, using the\
    \ name of the other server as\n   the server parameter, which then closes its\
    \ connection to the\n   quitting server.\n   The <comment> is filled in by servers\
    \ which SHOULD place an error or\n   similar message here.\n   Both of the servers\
    \ which are on either side of the connection being\n   closed are REQUIRED to\
    \ send out a SQUIT message (to all its other\n   server connections) for all other\
    \ servers which are considered to be\n   behind that link.\n   Similarly, a QUIT\
    \ message MAY be sent to the other still connected\n   servers on behalf of all\
    \ clients behind that quitting link.  In\n   addition to this, all channel members\
    \ of a channel which lost a\n   member due to the \"split\" MUST be sent a QUIT\
    \ message.  Messages to\n   channel members are generated by each client's local\
    \ server.\n   If a server connection is terminated prematurely (e.g., the server\
    \ on\n   the other end of the link died), the server which detects this\n   disconnection\
    \ is REQUIRED to inform the rest of the network that the\n   connection has closed\
    \ and fill in the comment field with something\n   appropriate.\n   When a client\
    \ is removed as the result of a SQUIT message, the server\n   SHOULD add the nickname\
    \ to the list of temporarily unavailable\n   nicknames in an attempt to prevent\
    \ future nickname collisions. See\n   section 5.7 (Tracking recently used nicknames)\
    \ for more information\n   on this procedure.\n   Numeric replies:\n         \
    \  ERR_NOPRIVILEGES                ERR_NOSUCHSERVER\n           ERR_NEEDMOREPARAMS\n\
    \   Example:\n   SQUIT tolsun.oulu.fi :Bad Link ?  ; the server link tolson.oulu.fi\n\
    \                                   has been terminated because of \"Bad\n   \
    \                                Link\".\n   :Trillian SQUIT cm22.eng.umd.edu\
    \ :Server out of control ; message\n                                   from Trillian\
    \ to disconnect\n                                   \"cm22.eng.umd.edu\" from\
    \ the net\n                                   because \"Server out of control\"\
    .\n"
- title: 4.2 Channel operations
  contents:
  - "4.2 Channel operations\n   This group of messages is concerned with manipulating\
    \ channels, their\n   properties (channel modes), and their contents (typically\
    \ users).  In\n   implementing these, a number of race conditions are inevitable\
    \ when\n   users at opposing ends of a network send commands which will\n   ultimately\
    \ clash.  It is also REQUIRED that servers keep a nickname\n   history to ensure\
    \ that wherever a <nick> parameter is given, the\n   server check its history\
    \ in case it has recently been changed.\n"
- title: 4.2.1 Join message
  contents:
  - "4.2.1 Join message\n      Command: JOIN\n   Parameters: <channel>[ %x7 <modes>\
    \ ]\n               *( \",\" <channel>[ %x7 <modes> ] )\n   The JOIN command is\
    \ used by client to start listening a specific\n   channel. Whether or not a client\
    \ is allowed to join a channel is\n   checked only by the local server the client\
    \ is connected to; all\n   other servers automatically add the user to the channel\
    \ when the\n   command is received from other servers.\n   Optionally, the user\
    \ status (channel modes 'O', 'o', and 'v') on the\n   channel may be appended\
    \ to the channel name using a control G (^G or\n   ASCII 7) as separator.  Such\
    \ data MUST be ignored if the message\n   wasn't received from a server.  This\
    \ format MUST NOT be sent to\n   clients, it can only be used between servers\
    \ and SHOULD be avoided.\n   The JOIN command MUST be broadcast to all servers\
    \ so that each server\n   knows where to find the users who are on the channel.\
    \  This allows\n   optimal delivery of PRIVMSG and NOTICE messages to the channel.\n\
    \   Numeric Replies:\n           ERR_NEEDMOREPARAMS              ERR_BANNEDFROMCHAN\n\
    \           ERR_INVITEONLYCHAN              ERR_BADCHANNELKEY\n           ERR_CHANNELISFULL\
    \               ERR_BADCHANMASK\n           ERR_NOSUCHCHANNEL               ERR_TOOMANYCHANNELS\n\
    \           ERR_TOOMANYTARGETS              ERR_UNAVAILRESOURCE\n           RPL_TOPIC\n\
    \   Examples:\n   :WiZ JOIN #Twilight_zone        ; JOIN message from WiZ\n"
- title: 4.2.2 Njoin message
  contents:
  - "4.2.2 Njoin message\n      Command: NJOIN\n   Parameters: <channel> [ \"@@\"\
    \ / \"@\" ] [ \"+\" ] <nickname>\n                         *( \",\" [ \"@@\" /\
    \ \"@\" ] [ \"+\" ] <nickname> )\n   The NJOIN message is used between servers\
    \ only.  If such a message is\n   received from a client, it MUST be ignored.\
    \  It is used when two\n   servers connect to each other to exchange the list\
    \ of channel members\n   for each channel.\n   Even though the same function can\
    \ be performed by using a succession\n   of JOIN, this message SHOULD be used\
    \ instead as it is more efficient.\n   The prefix \"@@\" indicates that the user\
    \ is the \"channel creator\", the\n   character \"@\" alone indicates a \"channel\
    \ operator\", and the character\n   '+' indicates that the user has the voice\
    \ privilege.\n   Numeric Replies:\n           ERR_NEEDMOREPARAMS             \
    \ ERR_NOSUCHCHANNEL\n           ERR_ALREADYREGISTRED\n   Examples:\n   :ircd.stealth.net\
    \ NJOIN #Twilight_zone :@WiZ,+syrk,avalon ; NJOIN\n                          \
    \         message from ircd.stealth.net\n                                   announcing\
    \ users joining the\n                                   #Twilight_zone channel:\
    \ WiZ with\n                                   channel operator status, syrk with\n\
    \                                   voice privilege and avalon with no\n     \
    \                              privilege.\n"
- title: 4.2.3 Mode message
  contents:
  - "4.2.3 Mode message\n   The MODE message is a dual-purpose command in IRC.  It\
    \ allows both\n   usernames and channels to have their mode changed.\n   When\
    \ parsing MODE messages, it is RECOMMENDED that the entire message\n   be parsed\
    \ first, and then the changes which resulted passed on.\n   It is REQUIRED that\
    \ servers are able to change channel modes so that\n   \"channel creator\" and\
    \ \"channel operators\" may be created.\n"
- title: 5. Implementation details
  contents:
  - "5. Implementation details\n   A the time of writing, the only current implementation\
    \ of this\n   protocol is the IRC server, version 2.10. Earlier versions may\n\
    \   implement some or all of the commands described by this document with\n  \
    \ NOTICE messages replacing many of the numeric replies. Unfortunately,\n   due\
    \ to backward compatibility requirements, the implementation of\n   some parts\
    \ of this document varies with what is laid out.  One\n   notable difference is:\n\
    \        * recognition that any LF or CR anywhere in a message marks\n       \
    \   the end of that message (instead of requiring CR-LF);\n   The rest of this\
    \ section deals with issues that are mostly of\n   importance to those who wish\
    \ to implement a server but some parts\n   also apply directly to clients as well.\n"
- title: 5.1 Connection 'Liveness'
  contents:
  - "5.1 Connection 'Liveness'\n   To detect when a connection has died or become\
    \ unresponsive, the\n   server MUST poll each of its connections.  The PING command\
    \ (See \"IRC\n   Client Protocol\" [IRC-CLIENT]) is used if the server doesn't\
    \ get a\n   response from its peer in a given amount of time.\n   If a connection\
    \ doesn't respond in time, its connection is closed\n   using the appropriate\
    \ procedures.\n"
- title: 5.2 Accepting a client to server connection
  contents:
  - '5.2 Accepting a client to server connection

    '
- title: 5.2.1 Users
  contents:
  - "5.2.1 Users\n   When a server successfully registers a new user connection, it\
    \ is\n   REQUIRED to send to the user unambiguous messages stating: the user\n\
    \   identifiers upon which it was registered (RPL_WELCOME), the server\n   name\
    \ and version (RPL_YOURHOST), the server birth information\n   (RPL_CREATED),\
    \ available user and channel modes (RPL_MYINFO), and it\n   MAY send any introductory\
    \ messages which may be deemed appropriate.\n   In particular the server SHALL\
    \ send the current user/service/server\n   count (as per the LUSER reply) and\
    \ finally the MOTD (if any, as per\n   the MOTD reply).\n   After dealing with\
    \ registration, the server MUST then send out to\n   other servers the new user's\
    \ nickname (NICK message), other\n   information as supplied by itself (USER message)\
    \ and as the server\n   could discover (from DNS servers).  The server MUST NOT\
    \ send this\n   information out with a pair of NICK and USER messages as defined\
    \ in\n   \"IRC Client Protocol\" [IRC-CLIENT], but MUST instead take advantage\n\
    \   of the extended NICK message defined in section 4.1.3.\n"
- title: 5.2.2 Services
  contents:
  - "5.2.2 Services\n   Upon successfully registering a new service connection, the\
    \ server is\n   subject to the same kind of REQUIREMENTS as for a user.  Services\n\
    \   being somewhat different, only the following replies are sent:\n   RPL_YOURESERVICE,\
    \ RPL_YOURHOST, RPL_MYINFO.\n   After dealing with this, the server MUST then\
    \ send out to other\n   servers (SERVICE message) the new service's nickname and\
    \ other\n   information as supplied by the service (SERVICE message) and as the\n\
    \   server could discover (from DNS servers).\n"
- title: 5.3 Establishing a server-server connection.
  contents:
  - "5.3 Establishing a server-server connection.\n   The process of establishing\
    \ a server-to-server connection is fraught\n   with danger since there are many\
    \ possible areas where problems can\n   occur - the least of which are race conditions.\n\
    \   After a server has received a connection following by a PASS/SERVER\n   pair\
    \ which were recognized as being valid, the server SHOULD then\n   reply with\
    \ its own PASS/SERVER information for that connection as\n   well as all of the\
    \ other state information it knows about as\n   described below.\n   When the\
    \ initiating server receives a PASS/SERVER pair, it too then\n   checks that the\
    \ server responding is authenticated properly before\n   accepting the connection\
    \ to be that server.\n"
- title: 5.3.1 Link options
  contents:
  - "5.3.1 Link options\n   Server links are based on a common protocol (defined by\
    \ this\n   document) but a particular link MAY set specific options using the\n\
    \   PASS message (See Section 4.1.1).\n"
- title: 5.3.1.1 Compressed server to server links
  contents:
  - "5.3.1.1 Compressed server to server links\n   If a server wishes to establish\
    \ a compressed link with its peer, it\n   MUST set the 'Z' flag in the options\
    \ parameter to the PASS message.\n   If both servers request compression and both\
    \ servers are able to\n   initialize the two compressed streams, then the remainder\
    \ of the\n   communication is to be compressed.  If any server fails to initialize\n\
    \   the stream, it will send an uncompressed ERROR message to its peer\n   and\
    \ close the connection.\n   The data format used for the compression is described\
    \ by RFC 1950\n   [ZLIB], RFC 1951 [DEFLATE] and RFC 1952 [GZIP].\n"
- title: 5.3.1.2 Anti abuse protections
  contents:
  - "5.3.1.2 Anti abuse protections\n   Most servers implement various kinds of protections\
    \ against possible\n   abusive behaviours from non trusted parties (typically\
    \ users).  On\n   some networks, such protections are indispensable, on others\
    \ they are\n   superfluous.  To require that all servers implement and enable\
    \ such\n   features on a particular network, the 'P' flag is used when two\n \
    \  servers connect.  If this flag is present, it means that the server\n   protections\
    \ are enabled, and that the server REQUIRES all its server\n   links to enable\
    \ them as well.\n   Commonly found protections are described in sections 5.7 (Tracking\n\
    \   recently used nicknames) and 5.8 (Flood control of clients).\n"
- title: 5.3.2 State information exchange when connecting
  contents:
  - "5.3.2 State information exchange when connecting\n   The order of state information\
    \ being exchanged between servers is\n   essential.  The REQUIRED order is as\
    \ follows:\n           * all known servers;\n           * all known client information;\n\
    \           * all known channel information.\n   Information regarding servers\
    \ is sent via extra SERVER messages,\n   client information with NICK and SERVICE\
    \ messages and channels with\n   NJOIN/MODE messages.\n   NOTE: channel topics\
    \ SHOULD NOT be exchanged here because the TOPIC\n   command overwrites any old\
    \ topic information, so at best, the two\n   sides of the connection would exchange\
    \ topics.\n   By passing the state information about servers first, any collisions\n\
    \   with servers that already exist occur before nickname collisions\n   caused\
    \ by a second server introducing a particular nickname.  Due to\n   the IRC network\
    \ only being able to exist as an acyclic graph, it may\n   be possible that the\
    \ network has already reconnected in another\n   location.  In this event, the\
    \ place where the server collision occurs\n   indicates where the net needs to\
    \ split.\n"
- title: 5.4 Terminating server-client connections
  contents:
  - "5.4 Terminating server-client connections\n   When a client connection unexpectedly\
    \ closes, a QUIT message is\n   generated on behalf of the client by the server\
    \ to which the client\n   was connected.  No other message is to be generated\
    \ or used.\n"
- title: 5.5 Terminating server-server connections
  contents:
  - "5.5 Terminating server-server connections\n   If a server-server connection is\
    \ closed, either via a SQUIT command\n   or \"natural\" causes, the rest of the\
    \ connected IRC network MUST have\n   its information updated by the server which\
    \ detected the closure.\n   The terminating server then sends a list of SQUITs\
    \ (one for each\n   server behind that connection).  (See Section 4.1.6 (SQUIT)).\n"
- title: 5.6 Tracking nickname changes
  contents:
  - "5.6 Tracking nickname changes\n   All IRC servers are REQUIRED to keep a history\
    \ of recent nickname\n   changes.  This is important to allow the server to have\
    \ a chance of\n   keeping in touch of things when nick-change race conditions\
    \ occur\n   with commands manipulating them.  Messages which MUST trace nick\n\
    \   changes are:\n           * KILL (the nick being disconnected)\n          \
    \ * MODE (+/- o,v on channels)\n           * KICK (the nick being removed from\
    \ channel)\n      No other commands need to check nick changes.\n   In the above\
    \ cases, the server is required to first check for the\n   existence of the nickname,\
    \ then check its history to see who that\n   nick now belongs to (if anyone!).\
    \  This reduces the chances of race\n   conditions but they can still occur with\
    \ the server ending up\n   affecting the wrong client.  When performing a change\
    \ trace for an\n   above command it is RECOMMENDED that a time range be given\
    \ and\n   entries which are too old ignored.\n   For a reasonable history, a server\
    \ SHOULD be able to keep previous\n   nickname for every client it knows about\
    \ if they all decided to\n   change.  This size is limited by other factors (such\
    \ as memory, etc).\n"
- title: 5.7 Tracking recently used nicknames
  contents:
  - "5.7 Tracking recently used nicknames\n   This mechanism is commonly known as\
    \ \"Nickname Delay\", it has been\n   proven to significantly reduce the number\
    \ of nickname collisions\n   resulting from \"network splits\"/reconnections as\
    \ well as abuse.\n   In addition of keeping track of nickname changes, servers\
    \ SHOULD keep\n   track of nicknames which were recently used and were released\
    \ as the\n   result of a \"network split\" or a KILL message.  These nicknames\
    \ are\n   then unavailable to the server local clients and cannot be re-used\n\
    \   (even though they are not currently in use) for a certain period of\n   time.\n\
    \   The duration for which a nickname remains unavailable SHOULD be set\n   considering\
    \ many factors among which are the size (user wise) of the\n   IRC network, and\
    \ the usual duration of \"network splits\".  It SHOULD\n   be uniform on all servers\
    \ for a given IRC network.\n"
- title: 5.8 Flood control of clients
  contents:
  - "5.8 Flood control of clients\n   With a large network of interconnected IRC servers,\
    \ it is quite easy\n   for any single client attached to the network to supply\
    \ a continuous\n   stream of messages that result in not only flooding the network,\
    \ but\n   also degrading the level of service provided to others.  Rather than\n\
    \   require every 'victim' to provide their own protection, flood\n   protection\
    \ was written into the server and is applied to all clients\n   except services.\
    \  The current algorithm is as follows:\n   * check to see if client's `message\
    \ timer' is less than current time\n     (set to be equal if it is);\n   * read\
    \ any data present from the client;\n   * while the timer is less than ten (10)\
    \ seconds ahead of the current\n     time, parse any present messages and penalize\
    \ the client by two (2)\n     seconds for each message;\n   * additional penalties\
    \ MAY be used for specific commands which\n     generate a lot of traffic across\
    \ the network.\n   This in essence means that the client may send one (1) message\
    \ every\n   two (2) seconds without being adversely affected.  Services MAY also\n\
    \   be subject to this mechanism.\n"
- title: 5.9 Non-blocking lookups
  contents:
  - "5.9 Non-blocking lookups\n   In a real-time environment, it is essential that\
    \ a server process\n   does as little waiting as possible so that all the clients\
    \ are\n   serviced fairly.  Obviously this requires non-blocking IO on all\n \
    \  network read/write operations.  For normal server connections, this\n   was\
    \ not difficult, but there are other support operations that may\n   cause the\
    \ server to block (such as disk reads).  Where possible, such\n   activity SHOULD\
    \ be performed with a short timeout.\n"
- title: 5.9.1 Hostname (DNS) lookups
  contents:
  - "5.9.1 Hostname (DNS) lookups\n   Using the standard resolver libraries from Berkeley\
    \ and others has\n   meant large delays in some cases where replies have timed\
    \ out.  To\n   avoid this, a separate set of DNS routines were written for the\n\
    \   current implementation.  Routines were setup for non-blocking IO\n   operations\
    \ with local cache, and then polled from within the main\n   server IO loop.\n"
- title: 5.9.2 Username (Ident) lookups
  contents:
  - "5.9.2 Username (Ident) lookups\n   Although there are numerous ident libraries\
    \ (implementing the\n   \"Identification Protocol\" [IDENT]) for use and inclusion\
    \ into other\n   programs, these caused problems since they operated in a synchronous\n\
    \   manner and resulted in frequent delays.  Again the solution was to\n   write\
    \ a set of routines which would cooperate with the rest of the\n   server and\
    \ work using non-blocking IO.\n"
- title: 6. Current problems
  contents:
  - "6. Current problems\n   There are a number of recognized problems with this protocol,\
    \ all of\n   which are hoped to be solved sometime in the near future during its\n\
    \   rewrite.  Currently, work is underway to find working solutions to\n   these\
    \ problems.\n"
- title: 6.1 Scalability
  contents:
  - "6.1 Scalability\n   It is widely recognized that this protocol does not scale\n\
    \   sufficiently well when used in a large arena.  The main problem comes\n  \
    \ from the requirement that all servers know about all other servers\n   and clients\
    \ and that information regarding them be updated as soon as\n   it changes.  It\
    \ is also desirable to keep the number of servers low\n   so that the path length\
    \ between any two points is kept minimal and\n   the spanning tree as strongly\
    \ branched as possible.\n"
- title: 6.2 Labels
  contents:
  - "6.2 Labels\n   The current IRC protocol has 4 types of labels: the nickname,\
    \ the\n   channel name, the server name and the service name.  Each of the four\n\
    \   types has its own domain and no duplicates are allowed inside that\n   domain.\
    \  Currently, it is possible for users to pick the label for\n   any of the first\
    \ three, resulting in collisions.  It is widely\n   recognized that this needs\
    \ reworking, with a plan for unique names\n   for nicks that don't collide being\
    \ desirable as well as a solution\n   allowing a cyclic tree.\n"
- title: 6.2.1 Nicknames
  contents:
  - "6.2.1 Nicknames\n   The idea of the nickname on IRC is very convenient for users\
    \ to use\n   when talking to each other outside of a channel, but there is only\
    \ a\n   finite nickname space and being what they are, it's not uncommon for\n\
    \   several people to want to use the same nick.  If a nickname is chosen\n  \
    \ by two people using this protocol, either one will not succeed or\n   both will\
    \ be removed by use of KILL (See Section 3.7.1 of \"IRC Client\n   Protocol\"\
    \ [IRC-CLIENT]).\n"
- title: 6.2.2 Channels
  contents:
  - "6.2.2 Channels\n   The current channel layout requires that all servers know\
    \ about all\n   channels, their inhabitants and properties.  Besides not scaling\n\
    \   well, the issue of privacy is also a concern.  A collision of\n   channels\
    \ is treated as an inclusive event (people from both nets on\n   channel with\
    \ common name are considered to be members of it) rather\n   than an exclusive\
    \ one such as used to solve nickname collisions.\n   This protocol defines \"\
    Safe Channels\" which are very unlikely to be\n   the subject of a channel collision.\
    \  Other channel types are kept for\n   backward compatibility.\n"
- title: 6.2.3 Servers
  contents:
  - "6.2.3 Servers\n   Although the number of servers is usually small relative to\
    \ the\n   number of users and channels, they too are currently REQUIRED to be\n\
    \   known globally, either each one separately or hidden behind a mask.\n"
- title: 6.3 Algorithms
  contents:
  - "6.3 Algorithms\n   In some places within the server code, it has not been possible\
    \ to\n   avoid N^2 algorithms such as checking the channel list of a set of\n\
    \   clients.\n   In current server versions, there are only few database consistency\n\
    \   checks, most of the time each server assumes that a neighbouring\n   server\
    \ is correct.  This opens the door to large problems if a\n   connecting server\
    \ is buggy or otherwise tries to introduce\n   contradictions to the existing\
    \ net.\n   Currently, because of the lack of unique internal and global labels,\n\
    \   there are a multitude of race conditions that exist.  These race\n   conditions\
    \ generally arise from the problem of it taking time for\n   messages to traverse\
    \ and effect the IRC network.  Even by changing to\n   unique labels, there are\
    \ problems with channel-related commands being\n   disrupted.\n"
- title: 7. Security Considerations
  contents:
  - '7. Security Considerations

    '
- title: 7.1 Authentication
  contents:
  - "7.1 Authentication\n   Servers only have two means of authenticating incoming\
    \ connections:\n   plain text password, and DNS lookups.  While these methods\
    \ are weak\n   and widely recognized as unsafe, their combination has proven to\
    \ be\n   sufficient in the past:\n    * public networks typically allow user connections\
    \ with only few\n      restrictions, without requiring accurate authentication.\n\
    \    * private networks which operate in a controlled environment often\n    \
    \  use home-grown authentication mechanisms not available on the\n      internet:\
    \ reliable ident servers [IDENT], or other proprietary\n      mechanisms.\n  \
    \ The same comments apply to the authentication of IRC Operators.\n   It should\
    \ also be noted that while there has been no real demand over\n   the years for\
    \ stronger authentication, and no real effort to provide\n   better means to safely\
    \ authenticate users, the current protocol\n   offers enough to be able to easily\
    \ plug-in external authentication\n   methods based on the information that a\
    \ client can submit to the\n   server upon connection: nickname, username, password.\n"
- title: 7.2 Integrity
  contents:
  - "7.2 Integrity\n   Since the PASS and OPER messages of the IRC protocol are sent\
    \ in\n   clear text, a stream layer encryption mechanism (like \"The TLS\n   Protocol\"\
    \ [TLS]) could be used to protect these transactions.\n"
- title: 8. Current support and availability
  contents:
  - "8. Current support and availability\n      Mailing lists for IRC related discussion:\n\
    \        General discussion: ircd-users@irc.org\n        Protocol development:\
    \ ircd-dev@irc.org\n      Software implementations:\n        ftp://ftp.irc.org/irc/server\n\
    \        ftp://ftp.funet.fi/pub/unix/irc\n        ftp://coombs.anu.edu.au/pub/irc\n\
    \      Newsgroup: alt.irc\n"
- title: 9. Acknowledgements
  contents:
  - "9. Acknowledgements\n   Parts of this document were copied from the RFC 1459\
    \ [IRC] which\n   first formally documented the IRC Protocol.  It has also benefited\n\
    \   from many rounds of review and comments.  In particular, the\n   following\
    \ people have made significant contributions to this\n   document:\n   Matthew\
    \ Green, Michael Neumayer, Volker Paulsen, Kurt Roeckx, Vesa\n   Ruokonen, Magnus\
    \ Tjernstrom, Stefan Zehl.\n"
- title: 10. References
  contents:
  - "10. References\n   [KEYWORDS]   Bradner, S., \"Key words for use in RFCs to Indicate\n\
    \                Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [ABNF]\
    \       Crocker, D. and P. Overell, \"Augmented BNF for Syntax\n             \
    \   Specifications: ABNF\", RFC 2234, November 1997.\n   [IRC]        Oikarinen,\
    \ J. and D. Reed, \"Internet Relay Chat\n                Protocol\", RFC 1459,\
    \ May 1993.\n   [IRC-ARCH]   Kalt, C., \"Internet Relay Chat: Architecture\",\
    \ RFC 2810,\n                April 2000.\n   [IRC-CLIENT] Kalt, C., \"Internet\
    \ Relay Chat: Client Protocol\", RFC\n                2812, April 2000.\n   [IRC-CHAN]\
    \   Kalt, C., \"Internet Relay Chat: Channel Management\", RFC\n             \
    \   2811, April 2000.\n   [ZLIB]       Deutsch, P. and J-L. Gailly, \"ZLIB Compressed\
    \ Data\n                Format Specification version 3.3\", RFC 1950, May 1996.\n\
    \   [DEFLATE]    Deutsch, P., \"DEFLATE Compressed Data Format\n             \
    \   Specification version 1.3\", RFC 1951, May 1996.\n   [GZIP]       Deutsch,\
    \ P., \"GZIP file format specification version\n                4.3\", RFC 1952,\
    \ May 1996.\n   [IDENT]      St. Johns, M., \"The Identification Protocol\", RFC\
    \ 1413,\n                February 1993.\n   [TLS]        Dierks, T. and C. Allen,\
    \ \"The TLS Protocol\", RFC 2246,\n                January 1999.\n"
- title: 11. Author's Address
  contents:
  - "11. Author's Address\n   Christophe Kalt\n   99 Teaneck Rd, Apt #117\n   Ridgefield\
    \ Park, NJ 07660\n   USA\n   EMail: kalt@stealth.net\n"
- title: 12.  Full Copyright Statement
  contents:
  - "12.  Full Copyright Statement\n   Copyright (C) The Internet Society (2000).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
