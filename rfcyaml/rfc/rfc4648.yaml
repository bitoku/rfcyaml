- contents:
  - '             The Base16, Base32, and Base64 Data Encodings

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document describes the commonly used base 64, base 32, and
    base\n   16 encoding schemes.  It also discusses the use of line-feeds in\n   encoded
    data, use of padding in encoded data, use of non-alphabet\n   characters in encoded
    data, use of different encoding alphabets, and\n   canonical encodings.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \  2. Conventions Used in This Document ...............................3\n   3.
    Implementation Discrepancies ....................................3\n      3.1.
    Line Feeds in Encoded Data .................................3\n      3.2. Padding
    of Encoded Data ....................................4\n      3.3. Interpretation
    of Non-Alphabet Characters in Encoded Data ..4\n      3.4. Choosing the Alphabet
    ......................................4\n      3.5. Canonical Encoding .........................................5\n
    \  4. Base 64 Encoding ................................................5\n   5.
    Base 64 Encoding with URL and Filename Safe Alphabet ............7\n   6. Base
    32 Encoding ................................................8\n   7. Base 32 Encoding
    with Extended Hex Alphabet ....................10\n   8. Base 16 Encoding ...............................................10\n
    \  9. Illustrations and Examples .....................................11\n   10.
    Test Vectors ..................................................12\n   11. ISO
    C99 Implementation of Base64 ..............................14\n   12. Security
    Considerations .......................................14\n   13. Changes Since
    RFC 3548 ........................................15\n   14. Acknowledgements ..............................................15\n
    \  15. Copying Conditions ............................................15\n   16.
    References ....................................................16\n      16.1.
    Normative References .....................................16\n      16.2. Informative
    References ...................................16\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Base encoding of data is used in many situations to store
    or transfer\n   data in environments that, perhaps for legacy reasons, are restricted\n
    \  to US-ASCII [1] data.  Base encoding can also be used in new\n   applications
    that do not have legacy restrictions, simply because it\n   makes it possible
    to manipulate objects with text editors.\n   In the past, different applications
    have had different requirements\n   and thus sometimes implemented base encodings
    in slightly different\n   ways.  Today, protocol specifications sometimes use
    base encodings in\n   general, and \"base64\" in particular, without a precise
    description or\n   reference.  Multipurpose Internet Mail Extensions (MIME) [4]
    is often\n   used as a reference for base64 without considering the consequences\n
    \  for line-wrapping or non-alphabet characters.  The purpose of this\n   specification
    is to establish common alphabet and encoding\n   considerations.  This will hopefully
    reduce ambiguity in other\n   documents, leading to better interoperability.\n"
  title: 1.  Introduction
- contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\",
    \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",
    \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described
    in [2].\n"
  title: 2.  Conventions Used in This Document
- contents:
  - "3.  Implementation Discrepancies\n   Here we discuss the discrepancies between
    base encoding\n   implementations in the past and, where appropriate, mandate
    a\n   specific recommended behavior for the future.\n"
  - contents:
    - "3.1.  Line Feeds in Encoded Data\n   MIME [4] is often used as a reference
      for base 64 encoding.  However,\n   MIME does not define \"base 64\" per se,
      but rather a \"base 64 Content-\n   Transfer-Encoding\" for use within MIME.
      \ As such, MIME enforces a\n   limit on line length of base 64-encoded data
      to 76 characters.  MIME\n   inherits the encoding from Privacy Enhanced Mail
      (PEM) [3], stating\n   that it is \"virtually identical\"; however, PEM uses
      a line length of\n   64 characters.  The MIME and PEM limits are both due to
      limits within\n   SMTP.\n   Implementations MUST NOT add line feeds to base-encoded
      data unless\n   the specification referring to this document explicitly directs
      base\n   encoders to add line feeds after a specific number of characters.\n"
    title: 3.1.  Line Feeds in Encoded Data
  - contents:
    - "3.2.  Padding of Encoded Data\n   In some circumstances, the use of padding
      (\"=\") in base-encoded data\n   is not required or used.  In the general case,
      when assumptions about\n   the size of transported data cannot be made, padding
      is required to\n   yield correct decoded data.\n   Implementations MUST include
      appropriate pad characters at the end of\n   encoded data unless the specification
      referring to this document\n   explicitly states otherwise.\n   The base64 and
      base32 alphabets use padding, as described below in\n   sections 4 and 6, but
      the base16 alphabet does not need it; see\n   section 8.\n"
    title: 3.2.  Padding of Encoded Data
  - contents:
    - "3.3.  Interpretation of Non-Alphabet Characters in Encoded Data\n   Base encodings
      use a specific, reduced alphabet to encode binary\n   data.  Non-alphabet characters
      could exist within base-encoded data,\n   caused by data corruption or by design.
      \ Non-alphabet characters may\n   be exploited as a \"covert channel\", where
      non-protocol data can be\n   sent for nefarious purposes.  Non-alphabet characters
      might also be\n   sent in order to exploit implementation errors leading to,
      e.g.,\n   buffer overflow attacks.\n   Implementations MUST reject the encoded
      data if it contains\n   characters outside the base alphabet when interpreting
      base-encoded\n   data, unless the specification referring to this document explicitly\n
      \  states otherwise.  Such specifications may instead state, as MIME\n   does,
      that characters outside the base encoding alphabet should\n   simply be ignored
      when interpreting data (\"be liberal in what you\n   accept\").  Note that this
      means that any adjacent carriage return/\n   line feed (CRLF) characters constitute
      \"non-alphabet characters\" and\n   are ignored.  Furthermore, such specifications
      MAY ignore the pad\n   character, \"=\", treating it as non-alphabet data, if
      it is present\n   before the end of the encoded data.  If more than the allowed
      number\n   of pad characters is found at the end of the string (e.g., a base
      64\n   string terminated with \"===\"), the excess pad characters MAY also be\n
      \  ignored.\n"
    title: 3.3.  Interpretation of Non-Alphabet Characters in Encoded Data
  - contents:
    - "3.4.  Choosing the Alphabet\n   Different applications have different requirements
      on the characters\n   in the alphabet.  Here are a few requirements that determine
      which\n   alphabet should be used:\n   o  Handled by humans.  The characters
      \"0\" and \"O\" are easily\n      confused, as are \"1\", \"l\", and \"I\".
      \ In the base32 alphabet below,\n      where 0 (zero) and 1 (one) are not present,
      a decoder may\n      interpret 0 as O, and 1 as I or L depending on case.  (However,
      by\n      default it should not; see previous section.)\n   o  Encoded into
      structures that mandate other requirements.  For base\n      16 and base 32,
      this determines the use of upper- or lowercase\n      alphabets.  For base 64,
      the non-alphanumeric characters (in\n      particular, \"/\") may be problematic
      in file names and URLs.\n   o  Used as identifiers.  Certain characters, notably
      \"+\" and \"/\" in\n      the base 64 alphabet, are treated as word-breaks by
      legacy text\n      search/index tools.\n   There is no universally accepted
      alphabet that fulfills all the\n   requirements.  For an example of a highly
      specialized variant, see\n   IMAP [8].  In this document, we document and name
      some currently used\n   alphabets.\n"
    title: 3.4.  Choosing the Alphabet
  - contents:
    - "3.5.  Canonical Encoding\n   The padding step in base 64 and base 32 encoding
      can, if improperly\n   implemented, lead to non-significant alterations of the
      encoded data.\n   For example, if the input is only one octet for a base 64
      encoding,\n   then all six bits of the first symbol are used, but only the first\n
      \  two bits of the next symbol are used.  These pad bits MUST be set to\n   zero
      by conforming encoders, which is described in the descriptions\n   on padding
      below.  If this property do not hold, there is no\n   canonical representation
      of base-encoded data, and multiple base-\n   encoded strings can be decoded
      to the same binary data.  If this\n   property (and others discussed in this
      document) holds, a canonical\n   encoding is guaranteed.\n   In some environments,
      the alteration is critical and therefore\n   decoders MAY chose to reject an
      encoding if the pad bits have not\n   been set to zero.  The specification referring
      to this may mandate a\n   specific behaviour.\n"
    title: 3.5.  Canonical Encoding
  title: 3.  Implementation Discrepancies
- contents:
  - "4.  Base 64 Encoding\n   The following description of base 64 is derived from
    [3], [4], [5],\n   and [6].  This encoding may be referred to as \"base64\".\n
    \  The Base 64 encoding is designed to represent arbitrary sequences of\n   octets
    in a form that allows the use of both upper- and lowercase\n   letters but that
    need not be human readable.\n   A 65-character subset of US-ASCII is used, enabling
    6 bits to be\n   represented per printable character.  (The extra 65th character,
    \"=\",\n   is used to signify a special processing function.)\n   The encoding
    process represents 24-bit groups of input bits as output\n   strings of 4 encoded
    characters.  Proceeding from left to right, a\n   24-bit input group is formed
    by concatenating 3 8-bit input groups.\n   These 24 bits are then treated as 4
    concatenated 6-bit groups, each\n   of which is translated into a single character
    in the base 64\n   alphabet.\n   Each 6-bit group is used as an index into an
    array of 64 printable\n   characters.  The character referenced by the index is
    placed in the\n   output string.\n                      Table 1: The Base 64 Alphabet\n
    \    Value Encoding  Value Encoding  Value Encoding  Value Encoding\n         0
    A            17 R            34 i            51 z\n         1 B            18
    S            35 j            52 0\n         2 C            19 T            36
    k            53 1\n         3 D            20 U            37 l            54
    2\n         4 E            21 V            38 m            55 3\n         5 F
    \           22 W            39 n            56 4\n         6 G            23 X
    \           40 o            57 5\n         7 H            24 Y            41 p
    \           58 6\n         8 I            25 Z            42 q            59 7\n
    \        9 J            26 a            43 r            60 8\n        10 K            27
    b            44 s            61 9\n        11 L            28 c            45
    t            62 +\n        12 M            29 d            46 u            63
    /\n        13 N            30 e            47 v\n        14 O            31 f
    \           48 w         (pad) =\n        15 P            32 g            49 x\n
    \       16 Q            33 h            50 y\n   Special processing is performed
    if fewer than 24 bits are available\n   at the end of the data being encoded.
    \ A full encoding quantum is\n   always completed at the end of a quantity.  When
    fewer than 24 input\n   bits are available in an input group, bits with value
    zero are added\n   (on the right) to form an integral number of 6-bit groups.
    \ Padding\n   at the end of the data is performed using the '=' character.  Since\n
    \  all base 64 input is an integral number of octets, only the following\n   cases
    can arise:\n   (1) The final quantum of encoding input is an integral multiple
    of 24\n       bits; here, the final unit of encoded output will be an integral\n
    \      multiple of 4 characters with no \"=\" padding.\n   (2) The final quantum
    of encoding input is exactly 8 bits; here, the\n       final unit of encoded output
    will be two characters followed by\n       two \"=\" padding characters.\n   (3)
    The final quantum of encoding input is exactly 16 bits; here, the\n       final
    unit of encoded output will be three characters followed by\n       one \"=\"
    padding character.\n"
  title: 4.  Base 64 Encoding
- contents:
  - "5.  Base 64 Encoding with URL and Filename Safe Alphabet\n   The Base 64 encoding
    with an URL and filename safe alphabet has been\n   used in [12].\n   An alternative
    alphabet has been suggested that would use \"~\" as the\n   63rd character.  Since
    the \"~\" character has special meaning in some\n   file system environments,
    the encoding described in this section is\n   recommended instead.  The remaining
    unreserved URI character is \".\",\n   but some file system environments do not
    permit multiple \".\" in a\n   filename, thus making the \".\" character unattractive
    as well.\n   The pad character \"=\" is typically percent-encoded when used in
    an\n   URI [9], but if the data length is known implicitly, this can be\n   avoided
    by skipping the padding; see section 3.2.\n   This encoding may be referred to
    as \"base64url\".  This encoding\n   should not be regarded as the same as the
    \"base64\" encoding and\n   should not be referred to as only \"base64\".  Unless
    clarified\n   otherwise, \"base64\" refers to the base 64 in the previous section.\n
    \  This encoding is technically identical to the previous one, except\n   for
    the 62:nd and 63:rd alphabet character, as indicated in Table 2.\n         Table
    2: The \"URL and Filename safe\" Base 64 Alphabet\n     Value Encoding  Value
    Encoding  Value Encoding  Value Encoding\n         0 A            17 R            34
    i            51 z\n         1 B            18 S            35 j            52
    0\n         2 C            19 T            36 k            53 1\n         3 D
    \           20 U            37 l            54 2\n         4 E            21 V
    \           38 m            55 3\n         5 F            22 W            39 n
    \           56 4\n         6 G            23 X            40 o            57 5\n
    \        7 H            24 Y            41 p            58 6\n         8 I            25
    Z            42 q            59 7\n         9 J            26 a            43
    r            60 8\n        10 K            27 b            44 s            61
    9\n        11 L            28 c            45 t            62 - (minus)\n        12
    M            29 d            46 u            63 _\n        13 N            30
    e            47 v           (underline)\n        14 O            31 f            48
    w\n        15 P            32 g            49 x\n        16 Q            33 h
    \           50 y         (pad) =\n"
  title: 5.  Base 64 Encoding with URL and Filename Safe Alphabet
- contents:
  - "6.  Base 32 Encoding\n   The following description of base 32 is derived from
    [11] (with\n   corrections).  This encoding may be referred to as \"base32\".\n
    \  The Base 32 encoding is designed to represent arbitrary sequences of\n   octets
    in a form that needs to be case insensitive but that need not\n   be human readable.\n
    \  A 33-character subset of US-ASCII is used, enabling 5 bits to be\n   represented
    per printable character.  (The extra 33rd character, \"=\",\n   is used to signify
    a special processing function.)\n   The encoding process represents 40-bit groups
    of input bits as output\n   strings of 8 encoded characters.  Proceeding from
    left to right, a\n   40-bit input group is formed by concatenating 5 8bit input
    groups.\n   These 40 bits are then treated as 8 concatenated 5-bit groups, each\n
    \  of which is translated into a single character in the base 32\n   alphabet.
    \ When a bit stream is encoded via the base 32 encoding, the\n   bit stream must
    be presumed to be ordered with the most-significant-\n   bit first.  That is,
    the first bit in the stream will be the high-\n   order bit in the first 8bit
    byte, the eighth bit will be the low-\n   order bit in the first 8bit byte, and
    so on.\n   Each 5-bit group is used as an index into an array of 32 printable\n
    \  characters.  The character referenced by the index is placed in the\n   output
    string.  These characters, identified in Table 3, below, are\n   selected from
    US-ASCII digits and uppercase letters.\n                     Table 3: The Base
    32 Alphabet\n     Value Encoding  Value Encoding  Value Encoding  Value Encoding\n
    \        0 A             9 J            18 S            27 3\n         1 B            10
    K            19 T            28 4\n         2 C            11 L            20
    U            29 5\n         3 D            12 M            21 V            30
    6\n         4 E            13 N            22 W            31 7\n         5 F
    \           14 O            23 X\n         6 G            15 P            24 Y
    \        (pad) =\n         7 H            16 Q            25 Z\n         8 I            17
    R            26 2\n   Special processing is performed if fewer than 40 bits are
    available\n   at the end of the data being encoded.  A full encoding quantum is\n
    \  always completed at the end of a body.  When fewer than 40 input bits\n   are
    available in an input group, bits with value zero are added (on\n   the right)
    to form an integral number of 5-bit groups.  Padding at\n   the end of the data
    is performed using the \"=\" character.  Since all\n   base 32 input is an integral
    number of octets, only the following\n   cases can arise:\n   (1) The final quantum
    of encoding input is an integral multiple of 40\n       bits; here, the final
    unit of encoded output will be an integral\n       multiple of 8 characters with
    no \"=\" padding.\n   (2) The final quantum of encoding input is exactly 8 bits;
    here, the\n       final unit of encoded output will be two characters followed
    by\n       six \"=\" padding characters.\n   (3) The final quantum of encoding
    input is exactly 16 bits; here, the\n       final unit of encoded output will
    be four characters followed by\n       four \"=\" padding characters.\n   (4)
    The final quantum of encoding input is exactly 24 bits; here, the\n       final
    unit of encoded output will be five characters followed by\n       three \"=\"
    padding characters.\n   (5) The final quantum of encoding input is exactly 32
    bits; here, the\n       final unit of encoded output will be seven characters
    followed by\n       one \"=\" padding character.\n"
  title: 6.  Base 32 Encoding
- contents:
  - "7.  Base 32 Encoding with Extended Hex Alphabet\n   The following description
    of base 32 is derived from [7].  This\n   encoding may be referred to as \"base32hex\".
    \ This encoding should not\n   be regarded as the same as the \"base32\" encoding
    and should not be\n   referred to as only \"base32\".  This encoding is used by,
    e.g.,\n   NextSECure3 (NSEC3) [10].\n   One property with this alphabet, which
    the base64 and base32\n   alphabets lack, is that encoded data maintains its sort
    order when\n   the encoded data is compared bit-wise.\n   This encoding is identical
    to the previous one, except for the\n   alphabet.  The new alphabet is found in
    Table 4.\n                 Table 4: The \"Extended Hex\" Base 32 Alphabet\n         Value
    Encoding  Value Encoding  Value Encoding  Value Encoding\n             0 0             9
    9            18 I            27 R\n             1 1            10 A            19
    J            28 S\n             2 2            11 B            20 K            29
    T\n             3 3            12 C            21 L            30 U\n             4
    4            13 D            22 M            31 V\n             5 5            14
    E            23 N\n             6 6            15 F            24 O         (pad)
    =\n             7 7            16 G            25 P\n             8 8            17
    H            26 Q\n"
  title: 7.  Base 32 Encoding with Extended Hex Alphabet
- contents:
  - "8.  Base 16 Encoding\n   The following description is original but analogous
    to previous\n   descriptions.  Essentially, Base 16 encoding is the standard case-\n
    \  insensitive hex encoding and may be referred to as \"base16\" or \"hex\".\n
    \  A 16-character subset of US-ASCII is used, enabling 4 bits to be\n   represented
    per printable character.\n   The encoding process represents 8-bit groups (octets)
    of input bits\n   as output strings of 2 encoded characters.  Proceeding from
    left to\n   right, an 8-bit input is taken from the input data.  These 8 bits
    are\n   then treated as 2 concatenated 4-bit groups, each of which is\n   translated
    into a single character in the base 16 alphabet.\n   Each 4-bit group is used
    as an index into an array of 16 printable\n   characters.  The character referenced
    by the index is placed in the\n   output string.\n                         Table
    5: The Base 16 Alphabet\n         Value Encoding  Value Encoding  Value Encoding
    \ Value Encoding\n             0 0             4 4             8 8            12
    C\n             1 1             5 5             9 9            13 D\n             2
    2             6 6            10 A            14 E\n             3 3             7
    7            11 B            15 F\n   Unlike base 32 and base 64, no special padding
    is necessary since a\n   full code word is always available.\n"
  title: 8.  Base 16 Encoding
- contents:
  - "9.  Illustrations and Examples\n   To translate between binary and a base encoding,
    the input is stored\n   in a structure, and the output is extracted.  The case
    for base 64 is\n   displayed in the following figure, borrowed from [5].\n            +--first
    octet--+-second octet--+--third octet--+\n            |7 6 5 4 3 2 1 0|7 6 5 4
    3 2 1 0|7 6 5 4 3 2 1 0|\n            +-----------+---+-------+-------+---+-----------+\n
    \           |5 4 3 2 1 0|5 4 3 2 1 0|5 4 3 2 1 0|5 4 3 2 1 0|\n            +--1.index--+--2.index--+--3.index--+--4.index--+\n
    \  The case for base 32 is shown in the following figure, borrowed from\n   [7].
    \ Each successive character in a base-32 value represents 5\n   successive bits
    of the underlying octet sequence.  Thus, each group\n   of 8 characters represents
    a sequence of 5 octets (40 bits).\n                        1          2          3\n
    \            01234567 89012345 67890123 45678901 23456789\n            +--------+--------+--------+--------+--------+\n
    \           |< 1 >< 2| >< 3 ><|.4 >< 5.|>< 6 ><.|7 >< 8 >|\n            +--------+--------+--------+--------+--------+\n
    \                                                   <===> 8th character\n                                              <====>
    7th character\n                                         <===> 6th character\n
    \                                  <====> 5th character\n                             <====>
    4th character\n                        <===> 3rd character\n                  <====>
    2nd character\n             <===> 1st character\n   The following example of Base64
    data is from [5], with corrections.\n      Input data:  0x14fb9c03d97e\n      Hex:
    \    1   4    f   b    9   c     | 0   3    d   9    7   e\n      8-bit:   00010100
    11111011 10011100  | 00000011 11011001 01111110\n      6-bit:   000101 001111
    101110 011100 | 000000 111101 100101 111110\n      Decimal: 5      15     46     28
    \      0      61     37     62\n      Output:  F      P      u      c        A
    \     9      l      +\n      Input data:  0x14fb9c03d9\n      Hex:     1   4    f
    \  b    9   c     | 0   3    d   9\n      8-bit:   00010100 11111011 10011100
    \ | 00000011 11011001\n                                                      pad
    with 00\n      6-bit:   000101 001111 101110 011100 | 000000 111101 100100\n      Decimal:
    5      15     46     28       0      61     36\n                                                         pad
    with =\n      Output:  F      P      u      c        A      9      k      =\n
    \     Input data:  0x14fb9c03\n      Hex:     1   4    f   b    9   c     | 0
    \  3\n      8-bit:   00010100 11111011 10011100  | 00000011\n                                             pad
    with 0000\n      6-bit:   000101 001111 101110 011100 | 000000 110000\n      Decimal:
    5      15     46     28       0      48\n                                                  pad
    with =      =\n      Output:  F      P      u      c        A      w      =      =\n"
  title: 9.  Illustrations and Examples
- contents:
  - "10.  Test Vectors\n   BASE64(\"\") = \"\"\n   BASE64(\"f\") = \"Zg==\"\n   BASE64(\"fo\")
    = \"Zm8=\"\n   BASE64(\"foo\") = \"Zm9v\"\n   BASE64(\"foob\") = \"Zm9vYg==\"\n
    \  BASE64(\"fooba\") = \"Zm9vYmE=\"\n   BASE64(\"foobar\") = \"Zm9vYmFy\"\n   BASE32(\"\")
    = \"\"\n   BASE32(\"f\") = \"MY======\"\n   BASE32(\"fo\") = \"MZXQ====\"\n   BASE32(\"foo\")
    = \"MZXW6===\"\n   BASE32(\"foob\") = \"MZXW6YQ=\"\n   BASE32(\"fooba\") = \"MZXW6YTB\"\n
    \  BASE32(\"foobar\") = \"MZXW6YTBOI======\"\n   BASE32-HEX(\"\") = \"\"\n   BASE32-HEX(\"f\")
    = \"CO======\"\n   BASE32-HEX(\"fo\") = \"CPNG====\"\n   BASE32-HEX(\"foo\") =
    \"CPNMU===\"\n   BASE32-HEX(\"foob\") = \"CPNMUOG=\"\n   BASE32-HEX(\"fooba\")
    = \"CPNMUOJ1\"\n   BASE32-HEX(\"foobar\") = \"CPNMUOJ1E8======\"\n   BASE16(\"\")
    = \"\"\n   BASE16(\"f\") = \"66\"\n   BASE16(\"fo\") = \"666F\"\n   BASE16(\"foo\")
    = \"666F6F\"\n   BASE16(\"foob\") = \"666F6F62\"\n   BASE16(\"fooba\") = \"666F6F6261\"\n
    \  BASE16(\"foobar\") = \"666F6F626172\"\n"
  title: 10.  Test Vectors
- contents:
  - "11.  ISO C99 Implementation of Base64\n   An ISO C99 implementation of Base64
    encoding and decoding that is\n   believed to follow all recommendations in this
    RFC is available from:\n      http://josefsson.org/base-encoding/\n   This code
    is not normative.\n   The code could not be included in this RFC for procedural
    reasons\n   (RFC 3978 section 5.4).\n"
  title: 11.  ISO C99 Implementation of Base64
- contents:
  - "12.  Security Considerations\n   When base encoding and decoding is implemented,
    care should be taken\n   not to introduce vulnerabilities to buffer overflow attacks,
    or other\n   attacks on the implementation.  A decoder should not break on invalid\n
    \  input including, e.g., embedded NUL characters (ASCII 0).\n   If non-alphabet
    characters are ignored, instead of causing rejection\n   of the entire encoding
    (as recommended), a covert channel that can be\n   used to \"leak\" information
    is made possible.  The ignored characters\n   could also be used for other nefarious
    purposes, such as to avoid a\n   string equality comparison or to trigger implementation
    bugs.  The\n   implications of ignoring non-alphabet characters should be understood\n
    \  in applications that do not follow the recommended practice.\n   Similarly,
    when the base 16 and base 32 alphabets are handled case\n   insensitively, alteration
    of case can be used to leak information or\n   make string equality comparisons
    fail.\n   When padding is used, there are some non-significant bits that\n   warrant
    security concerns, as they may be abused to leak information\n   or used to bypass
    string equality comparisons or to trigger\n   implementation problems.\n   Base
    encoding visually hides otherwise easily recognized information,\n   such as passwords,
    but does not provide any computational\n   confidentiality.  This has been known
    to cause security incidents\n   when, e.g., a user reports details of a network
    protocol exchange\n   (perhaps to illustrate some other problem) and accidentally
    reveals\n   the password because she is unaware that the base encoding does not\n
    \  protect the password.\n   Base encoding adds no entropy to the plaintext, but
    it does increase\n   the amount of plaintext available and provide a signature
    for\n   cryptanalysis in the form of a characteristic probability\n   distribution.\n"
  title: 12.  Security Considerations
- contents:
  - "13.  Changes Since RFC 3548\n   Added the \"base32 extended hex alphabet\", needed
    to preserve sort\n   order of encoded data.\n   Referenced IMAP for the special
    Base64 encoding used there.\n   Fixed the example copied from RFC 2440.\n   Added
    security consideration about providing a signature for\n   cryptoanalysis.\n   Added
    test vectors.\n   Fixed typos.\n"
  title: 13.  Changes Since RFC 3548
- contents:
  - "14.  Acknowledgements\n   Several people offered comments and/or suggestions,
    including John E.\n   Hadstate, Tony Hansen, Gordon Mohr, John Myers, Chris Newman,
    and\n   Andrew Sieber.  Text used in this document are based on earlier RFCs\n
    \  describing specific uses of various base encodings.  The author\n   acknowledges
    the RSA Laboratories for supporting the work that led to\n   this document.\n
    \  This revised version is based in parts on comments and/or suggestions\n   made
    by Roy Arends, Eric Blake, Brian E Carpenter, Elwyn Davies, Bill\n   Fenner, Sam
    Hartman, Ted Hardie, Per Hygum, Jelte Jansen, Clement\n   Kent, Tero Kivinen,
    Paul Kwiatkowski, and Ben Laurie.\n"
  title: 14.  Acknowledgements
- contents:
  - "15.  Copying Conditions\n   Copyright (c) 2000-2006 Simon Josefsson\n   Regarding
    the abstract and sections 1, 3, 8, 10, 12, 13, and 14 of\n   this document, that
    were written by Simon Josefsson (\"the author\",\n   for the remainder of this
    section), the author makes no guarantees\n   and is not responsible for any damage
    resulting from its use.  The\n   author grants irrevocable permission to anyone
    to use, modify, and\n   distribute it in any way that does not diminish the rights
    of anyone\n   else to use, modify, and distribute it, provided that redistributed\n
    \  derivative works do not contain misleading author or version\n   information
    and do not falsely purport to be IETF RFC documents.\n   Derivative works need
    not be licensed under similar terms.\n"
  title: 15.  Copying Conditions
- contents:
  - '16.  References

    '
  - contents:
    - "16.1.  Normative References\n   [1]   Cerf, V., \"ASCII format for network
      interchange\", RFC 20,\n         October 1969.\n   [2]   Bradner, S., \"Key
      words for use in RFCs to Indicate Requirement\n         Levels\", BCP 14, RFC
      2119, March 1997.\n"
    title: 16.1.  Normative References
  - contents:
    - "16.2.  Informative References\n   [3]   Linn, J., \"Privacy Enhancement for
      Internet Electronic Mail:\n         Part I: Message Encryption and Authentication
      Procedures\", RFC\n         1421, February 1993.\n   [4]   Freed, N. and N.
      Borenstein, \"Multipurpose Internet Mail\n         Extensions (MIME) Part One:
      Format of Internet Message Bodies\",\n         RFC 2045, November 1996.\n   [5]
      \  Callas, J., Donnerhacke, L., Finney, H., and R. Thayer,\n         \"OpenPGP
      Message Format\", RFC 2440, November 1998.\n   [6]   Arends, R., Austein, R.,
      Larson, M., Massey, D., and S. Rose,\n         \"DNS Security Introduction and
      Requirements\", RFC 4033, March\n         2005.\n   [7]   Klyne, G. and L. Masinter,
      \"Identifying Composite Media\n         Features\", RFC 2938, September 2000.\n
      \  [8]   Crispin, M., \"INTERNET MESSAGE ACCESS PROTOCOL - VERSION\n         4rev1\",
      RFC 3501, March 2003.\n   [9]   Berners-Lee, T., Fielding, R., and L. Masinter,
      \"Uniform\n         Resource Identifier (URI): Generic Syntax\", STD 66, RFC
      3986,\n         January 2005.\n   [10]  Laurie, B., Sisson, G., Arends, R.,
      and D. Blacka, \"DNSSEC Hash\n         Authenticated Denial of Existence\",
      Work in Progress, June\n         2006.\n   [11]  Myers, J., \"SASL GSSAPI mechanisms\",
      Work in Progress, May\n         2000.\n   [12]  Wilcox-O'Hearn, B., \"Post to
      P2P-hackers mailing list\",\n         http://zgp.org/pipermail/p2p-hackers/2001-September/\n
      \        000315.html, September 2001.\n"
    title: 16.2.  Informative References
  title: 16.  References
- contents:
  - "Author's Address\n   Simon Josefsson\n   SJD\n   EMail: simon@josefsson.org\n"
  title: Author's Address
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This
    document is subject to the rights, licenses and restrictions\n   contained in
    BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n
    \  Administrative Support Activity (IASA).\n"
  title: Acknowledgement
