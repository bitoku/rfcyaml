- contents:
  - "            TLS Fallback Signaling Cipher Suite Value (SCSV)\n               for
    Preventing Protocol Downgrade Attacks\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This document defines a Signaling Cipher Suite Value (SCSV) that\n
    \  prevents protocol downgrade attacks on the Transport Layer Security\n   (TLS)
    and Datagram Transport Layer Security (DTLS) protocols.  It\n   updates RFCs 2246,
    4346, 4347, 5246, and 6347.  Server update\n   considerations are included.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7507.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   2\n   2.  Protocol Values . . . . . . . . . . . . . . . . . . . .
    . . .   3\n   3.  Server Behavior . . . . . . . . . . . . . . . . . . . . . .
    .   4\n   4.  Client Behavior . . . . . . . . . . . . . . . . . . . . . . .   4\n
    \  5.  Operational Considerations  . . . . . . . . . . . . . . . . .   5\n   6.
    \ Security Considerations . . . . . . . . . . . . . . . . . . .   6\n   7.  IANA
    Considerations . . . . . . . . . . . . . . . . . . . . .   6\n   8.  References
    \ . . . . . . . . . . . . . . . . . . . . . . . . .   7\n     8.1.  Normative
    References  . . . . . . . . . . . . . . . . . .   7\n     8.2.  Informative References
    \ . . . . . . . . . . . . . . . . .   7\n   Acknowledgements  . . . . . . . .
    . . . . . . . . . . . . . . . .   8\n   Authors' Addresses  . . . . . . . . .
    . . . . . . . . . . . . . .   8\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   To work around interoperability problems with legacy servers,
    many\n   TLS client implementations do not rely on the TLS protocol version\n
    \  negotiation mechanism alone but will intentionally reconnect using a\n   downgraded
    protocol if initial handshake attempts fail.  Such clients\n   may fall back to
    connections in which they announce a version as low\n   as TLS 1.0 (or even its
    predecessor, Secure Socket Layer (SSL) 3.0)\n   as the highest supported version.\n
    \  While such fallback retries can be a useful last resort for\n   connections
    to actual legacy servers, there's a risk that active\n   attackers could exploit
    the downgrade strategy to weaken the\n   cryptographic security of connections.
    \ Also, handshake errors due to\n   network glitches could similarly be misinterpreted
    as interaction\n   with a legacy server and result in a protocol downgrade.\n
    \  All unnecessary protocol downgrades are undesirable (e.g., from TLS\n   1.2
    to TLS 1.1, if both the client and the server actually do support\n   TLS 1.2);
    they can be particularly harmful when the result is loss of\n   the TLS extension
    feature by downgrading to SSL 3.0.  This document\n   defines an SCSV that can
    be employed to prevent unintended protocol\n   downgrades between clients and
    servers that comply with this document\n   by having the client indicate that
    the current connection attempt is\n   merely a fallback and by having the server
    return a fatal alert if it\n   detects an inappropriate fallback.  (The alert
    does not necessarily\n   indicate an intentional downgrade attack, since network
    glitches too\n   could result in inappropriate fallback retries.)\n   The fallback
    SCSV defined in this document is not a suitable\n   substitute for proper TLS
    version negotiation.  TLS implementations\n   need to properly handle TLS version
    negotiation and extensibility\n   mechanisms to avoid the security issues and
    connection delays\n   associated with fallback retries.\n   This specification
    applies to implementations of TLS 1.0 [RFC2246],\n   TLS 1.1 [RFC4346], and TLS
    1.2 [RFC5246], and to implementations of\n   DTLS 1.0 [RFC4347] and DTLS 1.2 [RFC6347].
    \ (It is particularly\n   relevant if the TLS implementations also include support
    for\n   predecessor protocol SSL 3.0 [RFC6101].)  It can be applied similarly\n
    \  to later protocol versions.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
    and \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n"
  title: 1.  Introduction
- contents:
  - "2.  Protocol Values\n   This document defines a new TLS cipher suite value:\n
    \       TLS_FALLBACK_SCSV          {0x56, 0x00}\n   This is an SCSV, i.e., it
    does not actually correspond to a suite of\n   cryptosystems, and it can never
    be selected by the server in the\n   handshake; rather, its presence in the Client
    Hello message serves as\n   a backwards-compatible signal from the client to the
    server.\n   This document also allocates a new alert value in the TLS Alert\n
    \  Registry [RFC5246]:\n        enum {\n          /* ... */\n          inappropriate_fallback(86),\n
    \         /* ... */\n          (255)\n        } AlertDescription;\n   This alert
    is only generated by servers, as described in Section 3.\n   It is always fatal.\n"
  title: 2.  Protocol Values
- contents:
  - "3.  Server Behavior\n   This section specifies server behavior when receiving
    the\n   TLS_FALLBACK_SCSV cipher suite from a client in\n   ClientHello.cipher_suites.\n
    \  o  If TLS_FALLBACK_SCSV appears in ClientHello.cipher_suites and the\n      highest
    protocol version supported by the server is higher than\n      the version indicated
    in ClientHello.client_version, the server\n      MUST respond with a fatal inappropriate_fallback
    alert (unless it\n      responds with a fatal protocol_version alert because the
    version\n      indicated in ClientHello.client_version is unsupported).  The\n
    \     record layer version number for this alert MUST be set to either\n      ClientHello.client_version
    (as it would for the Server Hello\n      message if the server was continuing
    the handshake) or to the\n      record layer version number used by the client.\n
    \  o  Otherwise (either TLS_FALLBACK_SCSV does not appear or it appears\n      and
    the client's protocol version is at least the highest protocol\n      version
    supported by the server), the server proceeds with the\n      handshake as usual.\n
    \  (A protocol version is supported by the server if, in response to\n   appropriate
    Client Hello messages, the server would use it for\n   ServerHello.server_version.
    \ If a particular protocol version is\n   implemented but completely disabled
    by server settings, it is not\n   considered supported.  For example, if the implementation's
    highest\n   protocol version is TLS 1.2 but the server operator has disabled this\n
    \  version, a TLS 1.1 Client Hello with TLS_FALLBACK_SCSV does not\n   warrant
    responding with an inappropriate_fallback alert.)\n"
  title: 3.  Server Behavior
- contents:
  - "4.  Client Behavior\n   The TLS_FALLBACK_SCSV cipher suite value is meant for
    use by clients\n   that repeat a connection attempt with a downgraded protocol
    (perform\n   a \"fallback retry\") in order to work around interoperability problems\n
    \  with legacy servers.\n   o  If a client sends a ClientHello.client_version
    containing a lower\n      value than the latest (highest-valued) version supported
    by the\n      client, it SHOULD include the TLS_FALLBACK_SCSV cipher suite value\n
    \     in ClientHello.cipher_suites; see Section 6 for security\n      considerations
    for this recommendation.  (The client SHOULD put\n      TLS_FALLBACK_SCSV after
    all cipher suites that it actually intends\n      to negotiate.)\n   o  As an
    exception to the above, when a client intends to resume a\n      session and sets
    ClientHello.client_version to the protocol\n      version negotiated for that
    session, it MUST NOT include\n      TLS_FALLBACK_SCSV in ClientHello.cipher_suites.
    \ (In this case, it\n      is assumed that the client already knows the highest
    protocol\n      version supported by the server: see Appendix E.1 of [RFC5246].)\n
    \  o  If a client sets ClientHello.client_version to its highest\n      supported
    protocol version, it MUST NOT include TLS_FALLBACK_SCSV\n      in ClientHello.cipher_suites.\n
    \  (A protocol version is supported by the client if the client normally\n   attempts
    to use it in handshakes.  If a particular protocol version\n   is implemented
    but completely disabled by client settings, it is not\n   considered supported.
    \ For example, if the implementation's highest\n   protocol version is TLS 1.2
    but the user has disabled this version, a\n   TLS 1.1 handshake is expected and
    does not warrant sending\n   TLS_FALLBACK_SCSV.)\n   Fallback retries could be
    caused by events such as network glitches,\n   and a client including TLS_FALLBACK_SCSV
    in ClientHello.cipher_suites\n   may receive an inappropriate_fallback alert in
    response, indicating\n   that the server supports a higher protocol version.  Thus,
    if a\n   client intends to use retries to work around network glitches, it\n   should
    then retry with the highest version it supports.\n   If a client keeps track of
    the highest protocol version apparently\n   supported by a particular server for
    use in\n   ClientHello.client_version later, then if the client receives an\n
    \  inappropriate_fallback alert from that server, it MUST clear the\n   memorized
    highest supported protocol version.  (Without the alert, it\n   is a good idea
    -- but outside of the scope of this document -- for\n   clients to clear that
    state after a timeout since the server's\n   highest protocol version could change
    over time.)\n   For clients that use client-side TLS False Start [false-start],
    it is\n   important to note that the TLS_FALLBACK_SCSV mechanism cannot protect\n
    \  the first round of application data sent by the client: refer to the\n   Security
    Considerations (Section 6) of [false-start].\n"
  title: 4.  Client Behavior
- contents:
  - "5.  Operational Considerations\n   Updating legacy server clusters to simultaneously
    add support for\n   newer protocol versions and support for TLS_FALLBACK_SCSV
    can have\n   complications if the legacy server implementation is not \"version-\n
    \  tolerant\" (cannot properly handle Client Hello messages for newer\n   protocol
    versions): fallback retries required for interoperability\n   with old server
    nodes might be rejected by updated server nodes.\n   Updating the server cluster
    in two consecutive steps makes this safe:\n   first, update the server software
    but leave the highest supported\n   version unchanged (by disabling newer versions
    in server settings);\n   then, after all legacy (version-intolerant) implementations
    have been\n   removed, change server settings to allow new protocol versions.\n"
  title: 5.  Operational Considerations
- contents:
  - "6.  Security Considerations\n   Section 4 does not require client implementations
    to send\n   TLS_FALLBACK_SCSV in any particular case, it merely recommends it;\n
    \  behavior can be adapted according to the client's security needs.  It\n   is
    important to remember that omitting TLS_FALLBACK_SCSV enables\n   downgrade attacks,
    so implementors must take into account whether the\n   protocol version given
    by ClientHello.client_version still provides\n   an acceptable level of protection.
    \ For example, during the initial\n   deployment of a new protocol version (when
    some interoperability\n   problems may have to be expected), smoothly falling
    back to the\n   previous protocol version in case of problems may be preferable
    to\n   potentially not being able to connect at all: so TLS_FALLBACK_SCSV\n   could
    be omitted for this particular protocol downgrade step.\n   However, it is strongly
    recommended to send TLS_FALLBACK_SCSV when\n   downgrading to SSL 3.0 as the Cipher
    Block Chaining (CBC) cipher\n   suites in SSL 3.0 have weaknesses that cannot
    be addressed by\n   implementation workarounds like the remaining weaknesses in
    later\n   (TLS) protocol versions.\n"
  title: 6.  Security Considerations
- contents:
  - "7.  IANA Considerations\n   IANA has added TLS cipher suite number 0x56,0x00
    with the name\n   TLS_FALLBACK_SCSV to the TLS Cipher Suite Registry and alert
    number\n   86 with the name inappropriate_fallback to the TLS Alert Registry,
    as\n   shown below.  The registries are available from\n   <http://www.iana.org/assignments/tls-parameters>.\n
    \         +-----------+-------------------+---------+-----------+\n          |
    \  Value   |    Description    | DTLS-OK | Reference |\n          +-----------+-------------------+---------+-----------+\n
    \         | 0x56,0x00 | TLS_FALLBACK_SCSV |    Y    |  RFC 7507 |\n          +-----------+-------------------+---------+-----------+\n
    \                Addition to the TLS Cipher Suite Registry\n         +-------+------------------------+---------+-----------+\n
    \        | Value |      Description       | DTLS-OK | Reference |\n         +-------+------------------------+---------+-----------+\n
    \        |   86  | inappropriate_fallback |    Y    |  RFC 7507 |\n         +-------+------------------------+---------+-----------+\n
    \                   Addition to the TLS Alert Registry\n"
  title: 7.  IANA Considerations
- contents:
  - '8.  References

    '
  - contents:
    - "8.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC2246]
      \ Dierks, T. and C. Allen, \"The TLS Protocol Version 1.0\",\n              RFC
      2246, January 1999,\n              <http://www.rfc-editor.org/info/rfc2246>.\n
      \  [RFC4346]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n              (TLS)
      Protocol Version 1.1\", RFC 4346, April 2006,\n              <http://www.rfc-editor.org/info/rfc4346>.\n
      \  [RFC4347]  Rescorla, E. and N. Modadugu, \"Datagram Transport Layer\n              Security\",
      RFC 4347, April 2006,\n              <http://www.rfc-editor.org/info/rfc4347>.\n
      \  [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n              (TLS)
      Protocol Version 1.2\", RFC 5246, August 2008,\n              <http://www.rfc-editor.org/info/rfc5246>.\n
      \  [RFC6347]  Rescorla, E. and N. Modadugu, \"Datagram Transport Layer\n              Security
      Version 1.2\", RFC 6347, January 2012,\n              <http://www.rfc-editor.org/info/rfc6347>.\n"
    title: 8.1.  Normative References
  - contents:
    - "8.2.  Informative References\n   [RFC6101]  Freier, A., Karlton, P., and P.
      Kocher, \"The Secure\n              Sockets Layer (SSL) Protocol Version 3.0\",
      RFC 6101,\n              August 2011, <http://www.rfc-editor.org/info/rfc6101>.\n
      \  [false-start]\n              Langley, A., Modadugu, N., and B. Moeller, \"Transport\n
      \             Layer Security (TLS) False Start\", Work in Progress,\n              draft-bmoeller-tls-falsestart-01,
      November 2014.\n"
    title: 8.2.  Informative References
  title: 8.  References
- contents:
  - "Acknowledgements\n   This specification was inspired by an earlier proposal by
    Eric\n   Rescorla.  We also thank Daniel Kahn Gillmor, Joe Saloway, Brian\n   Smith,
    Martin Thomson, and others in the TLS Working Group for their\n   feedback and
    suggestions.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Bodo Moeller\n   Google Switzerland GmbH\n   Brandschenkestrasse
    110\n   Zurich  8002\n   Switzerland\n   EMail: bmoeller@acm.org\n   Adam Langley\n
    \  Google Inc.\n   345 Spear St\n   San Francisco, CA  94105\n   United States\n
    \  EMail: agl@google.com\n"
  title: Authors' Addresses
