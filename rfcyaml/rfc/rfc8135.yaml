- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                      M. Danielson
  contents:
  - "Independent Submission                                      M. Danielson\n  \
    \                     Complex Addressing in IPv6\n"
- title: Abstract
  contents:
  - "Abstract\n   The 128-bit length of IPv6 addresses (RFC 4291) allows for new and\n\
    \   innovative address schemes that can adapt to the challenges of\n   today's\
    \ complex network world.  It also allows for new and improved\n   security measures\
    \ and supports advanced cloud computing challenges.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This is a contribution to the RFC Series, independently\n   of any other RFC\
    \ stream.  The RFC Editor has chosen to publish this\n   document at its discretion\
    \ and makes no statement about its value for\n   implementation or deployment.\
    \  Documents approved for publication by\n   the RFC Editor are not a candidate\
    \ for any level of Internet\n   Standard; see Section 2 of RFC 7841.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8135.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Requirements Language ...........................................3\n  \
    \ 3. Natural Addresses ...............................................3\n    \
    \  3.1. Integer Addresses ..........................................3\n      3.2.\
    \ Prime Addresses ............................................3\n      3.3. Composite\
    \ Addresses ........................................4\n   4. Complex Addresses\
    \ ...............................................4\n      4.1. Floating Addresses\
    \ .........................................4\n      4.2. Real Addresses .............................................5\n\
    \      4.3. Imaginary Addresses ........................................5\n  \
    \    4.4. Flying Addresses ...........................................5\n    \
    \  4.5. Complex Addresses ..........................................6\n   5. Supported\
    \ Addressing Schemes ....................................6\n      5.1. Absolute\
    \ Addresses .........................................6\n      5.2. Address Argument\
    \ ...........................................6\n      5.3. Safe Addresses .............................................6\n\
    \      5.4. Virtual Addresses ..........................................7\n  \
    \    5.5. Rational Addresses .........................................7\n    \
    \  5.6. Irrational Addresses .......................................7\n      5.7.\
    \ Transcendent Addresses .....................................8\n   6. Geometric\
    \ Addresses .............................................8\n      6.1. Round Addresses\
    \ ............................................8\n      6.2. Square Addresses ...........................................8\n\
    \      6.3. Polar Addresses ............................................9\n  \
    \    6.4. Root Server ................................................9\n    \
    \  6.5. Implementation Considerations ..............................9\n   7. IPv6\
    \ Address Mapping ...........................................10\n   8. IANA Considerations\
    \ ............................................10\n   9. Security Considerations\
    \ ........................................10\n   10. References ....................................................11\n\
    \      10.1. Normative References .....................................11\n  \
    \    10.2. Informative References ...................................12\n   Appendix\
    \ A.  Square Pi ............................................13\n   Appendix B.\
    \  Implementation Example ...............................14\n   Authors' Addresses\
    \ ................................................16\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document introduces the fundamental concepts of complex\n\
    \   addressing in IPv6, allowing for a wide range of complex addressing\n   schemes\
    \ to be supported and further developed.\n   Traditional network addressing schemes\
    \ such as those used in IPv4\n   [RFC791] and IPv6 [RFC4291] have been confined\
    \ to unsigned or integer\n   numbers, representing fixed-point numbers.  This\
    \ has provided natural\n   numbers for early implementations but is not well adapted\
    \ to the\n   challenges of future networks.  Further, these fixed addresses have\n\
    \   been proven unsuitable for mobility and virtualization in today's\n   world,\
    \ where cloud computing defies the traditional fixed addressing\n   model.  The\
    \ increased size of addresses as allowed in IPv6, the\n   significant drop in\
    \ price of floating-point hardware, and the\n   availability of a well-established\
    \ floating-point format in IEEE 754\n   [IEEE754] allow for taking not only the\
    \ step to floating-point\n   addressing but also the step to complex addressing.\n"
- title: 2.  Requirements Language
  contents:
  - "2.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: 3.  Natural Addresses
  contents:
  - '3.  Natural Addresses

    '
- title: 3.1.  Integer Addresses
  contents:
  - "3.1.  Integer Addresses\n   Traditional addresses are integer addresses and can\
    \ be expressed in a\n   three-dot format, for example, 113.129.213.11 for the\
    \ integer\n   1904334091, a rare IPv4 double-palindromic address.  These fixed-\n\
    \   point addresses were well adapted to early network usage where each\n   computer\
    \ on the Internet had a fixed location and thus a fixed\n   address.  These addresses\
    \ are also known as natural addresses.  As\n   computers have become more powerful\
    \ and able to handle larger numbers\n   and thus larger addresses, they have also\
    \ become more transportable\n   (e.g., laptops and mobile phones).  The transportable\
    \ aspect of\n   computers makes fixed-point addresses moot, as machines can move\n\
    \   around rather than be confined to a relatively fixed point.\n"
- title: 3.2.  Prime Addresses
  contents:
  - "3.2.  Prime Addresses\n   The prime address (that is, the primary address of\
    \ a recipient) is an\n   important subclass of integer addresses.  Such an address\
    \ is not\n   divisible by anything but the recipient itself, which means it must\n\
    \   be regarded as a unique address.  While many prime addresses have\n   been\
    \ experimentally identified, it has proven to be quite hard to\n   identify a\
    \ prime address amongst other addresses without resorting to\n   time-consuming\
    \ computations.  Current use includes security and\n   intelligence, where post\
    \ boxes are obscured amongst others using\n   large prime addresses.\n"
- title: 3.3.  Composite Addresses
  contents:
  - "3.3.  Composite Addresses\n   Composite addresses are formed by two or more prime\
    \ addresses and\n   thus constitute a shared address, allowing the address to\
    \ be home for\n   multiple prime addresses.  Large composite addresses can be\
    \ difficult\n   to distinguish from prime addresses, which can be a factor to\n\
    \   consider.  Composite addresses have also become quite important in\n   addressing\
    \ new light structures and are used in airplanes to make\n   them lightweight\
    \ and durable.  This is important in connecting to the\n   cloud.\n"
- title: 4.  Complex Addresses
  contents:
  - '4.  Complex Addresses

    '
- title: 4.1.  Floating Addresses
  contents:
  - "4.1.  Floating Addresses\n   Floating-point addresses allow for a more flexible\
    \ addressing scheme\n   better adapted for today's mobile computers, thus allowing\
    \ for mobile\n   IP [RFC5944].  Support for floating-point numbers is well established\n\
    \   in the form of floating numbers as described in IEEE 754 [IEEE754],\n   which\
    \ allows both 32-bit and 64-bit floating-point numbers to be\n   represented;\
    \ this is well matched to the requirements of fitting into\n   a 128-bit IPv6\
    \ address.\n   The use of floating addresses does not, however, imply that devices\n\
    \   will be watertight.  Please download the watertight app from your app\n  \
    \ store or distribution server.  Also, keep your device well patched,\n   as long-term\
    \ durability of duct tape is limited, particularly if\n   exposure to salt water\
    \ is expected.  Apply suitable environmentally\n   sound lubricants for best sliding\
    \ performance.\n   Duct tape can be used to affix a floating address to a fixed\
    \ address,\n   such as a physical address.  For long-term outdoor adhesion, please\n\
    \   use UV-stable, nuclear-grade duct tape in layers: Layer 1 [OSI], the\n   physical\
    \ layer, for affixing the floating address to the physical\n   address and then\
    \ final layer, called Layer 7, for the application of\n   UV protection.  Intermediate\
    \ layers can be applied depending on the\n   complexity needed.\n"
- title: 4.2.  Real Addresses
  contents:
  - "4.2.  Real Addresses\n   An important aspect of floating-point addresses is that\
    \ one needs to\n   establish the real address of a device that has a floating\
    \ address,\n   such that IP packets can be routed to it through the network.\n\
    \   Letting part of the address act as the real floating-point value\n   allows\
    \ means to express real addresses within this address scheme,\n   thus solving\
    \ a complex addressing problem.\n   Real addresses are typically assigned to real\
    \ estate.  Multi-homing\n   is supported when the real estate connects to two\
    \ or more road\n   networks over individual road interfaces.  Each road interface\
    \ can\n   often handle multiple real addresses.  Mobile homes are assigned\n \
    \  their current real address.\n"
- title: 4.3.  Imaginary Addresses
  contents:
  - "4.3.  Imaginary Addresses\n   Another important aspect of floating-point addresses\
    \ is that they can\n   be in several possible locations; thus, one must be able\
    \ to imagine\n   the address as being somewhere other than where the real address\n\
    \   would make you believe.  The imaginary address provides this\n   orthogonal\
    \ property.  When the imaginary address is found to be 0,\n   then the imaginary\
    \ address and the real address are considered equal,\n   and the real address\
    \ has been found.\n   Imaginary addresses are important in handling home locations\
    \ above\n   the normal real estate, that is, for cloud computing.  The cloud can\n\
    \   be identified using the imaginary address, whose floating address is\n   adapted\
    \ to a real address as the cloud gently floats by.  During\n   windy conditions,\
    \ this may be difficult to achieve; during network\n   storms, the real address\
    \ of a cloud can become very unstable.  Such\n   storms can occasionally become\
    \ so strong that they impact real estate\n   and rearrange homes, making the real\
    \ address quite surreal.\n"
- title: 4.4.  Flying Addresses
  contents:
  - "4.4.  Flying Addresses\n   An extension to the imaginary address is the flying\
    \ address format,\n   which is adapted to the mobility of avian carriers.  Avian\
    \ carriers\n   and their datagrams, as described in [RFC6214], are best addressed\n\
    \   with flying addresses, which typically take up ICAO Class G\n   [ICAO-A11]\
    \ airspace, below the cloud, as can be expected from a\n   lower-layer technology.\n"
- title: 4.5.  Complex Addresses
  contents:
  - "4.5.  Complex Addresses\n   With the introduction of the real address and imaginary\
    \ address\n   parts, the full width of complex addresses can be realized.  Both\
    \ the\n   real and imaginary parts are represented in 64-bit floating-point\n\
    \   numbers as described in [IEEE754], thus allowing for the floating-\n   point\
    \ aspect of addresses.  The real address part provides for the\n   real address\
    \ of a device, whereas the imaginary part allows for the\n   orthogonal addressing\
    \ of the floating-point address.  This allows for\n   complex addressing schemes\
    \ where both the real and imaginary\n   addresses can be found.\n   Complex addresses\
    \ allow for address arithmetic in the usual way but\n   can now go beyond the\
    \ fixed-point limitations.  Adding imaginary\n   parts to the address has not\
    \ been possible before due to the high\n   cost of early floating-point hardware,\
    \ which hampered imagination.\n"
- title: 5.  Supported Addressing Schemes
  contents:
  - '5.  Supported Addressing Schemes

    '
- title: 5.1.  Absolute Addresses
  contents:
  - "5.1.  Absolute Addresses\n   It has become increasingly important to establish\
    \ the absolute\n   address of a device for many purposes, including but not limited\
    \ to,\n   use by law enforcement.  This was manageable with fixed-point\n   addresses\
    \ but has become increasingly difficult with increased\n   address mobility and\
    \ floating-point addresses.  The complex address\n   scheme provides a method\
    \ for getting the absolute address by\n   performing the absolute function on\
    \ the complex address.\n"
- title: 5.2.  Address Argument
  contents:
  - "5.2.  Address Argument\n   It has become increasingly obvious that there is debate\
    \ about the\n   address of certain services or functions, leading to address\n\
    \   arguments.  This is another difficulty with fixed-point addresses, as\n  \
    \ their one-dimensional form does not allow for an argument to be\n   resolved.\
    \  The complex addressing scheme provides an elegant solution\n   to these address\
    \ arguments, as the result of the address argument can\n   trivially be found\
    \ by taking the argument (i.e., arctan or atan)\n   function of the complex address.\
    \  Using the appropriate function,\n   full argument resolution can be found without\
    \ signs of ambiguity.\n"
- title: 5.3.  Safe Addresses
  contents:
  - "5.3.  Safe Addresses\n   A safe address is the address of a safe house.  This\
    \ is used in\n   various security scenarios -- the safety lies in that those in\
    \ need\n   can reach the safe house at the safe address but there is no\n   indication\
    \ that the address has this role.  By use of the\n   imagination, this address\
    \ can be made less real, simply by making the\n   imaginary part large enough\
    \ not to be taken as a real address.  Since\n   it is a floating address, the\
    \ real address can be made 0, thus making\n   it completely imaginary, and the\
    \ address argument will be orthogonal\n   to any real address, providing it is\
    \ hard to establish its real\n   address.  It is naturally still possible to establish\
    \ the absolute\n   address when needed.\n"
- title: 5.4.  Virtual Addresses
  contents:
  - "5.4.  Virtual Addresses\n   Virtual addresses, where the same network interface\
    \ can have multiple\n   addresses, have traditionally been an important concept.\
    \  With the\n   complex addressing scheme, the imaginary part allows for a much\
    \ wider\n   range of virtualization than just normal multiple real addresses for\n\
    \   a particular interface.  This goes beyond normal cloud computing,\n   where\
    \ virtualization just allows you to operate somebody else's\n   computer.  The\
    \ new imaginative address capabilities and higher\n   altitude addresses due to\
    \ the increased range allow you to operate a\n   cloud within a cloud, so that\
    \ you just run on top of somebody else's\n   cloud.  This high altitude allows\
    \ for supersonic cruise speed for\n   high-performance computing.\n"
- title: 5.5.  Rational Addresses
  contents:
  - "5.5.  Rational Addresses\n   Engineers tend to always look at problems rationally,\
    \ including the\n   problem of addressing.  The traditional fixed-point address\
    \ has,\n   however, only supported a subset of rational addresses, but with the\n\
    \   new complex addressing scheme, a larger subset of rational addresses\n   can\
    \ be reached or approximated, allowing for a larger rationale to be\n   found.\n\
    \   The rationale for this is that with the use of floating addresses,\n   the\
    \ power of 2 now can perfectly divide.  Further, approximations for\n   other\
    \ dividends can often be sufficiently precise.  The full scope of\n   rational\
    \ numbers has not been reached, however, as the committee was\n   quite imprecise\
    \ on the use of floating addresses but agreed that this\n   initial support of\
    \ rational addresses could be acknowledged and\n   helpful while its usage is\
    \ TBD.\n"
- title: 5.6.  Irrational Addresses
  contents:
  - "5.6.  Irrational Addresses\n   Support for irrational addresses has been very\
    \ poor in the\n   traditional addressing scheme, since fixed-point addresses did\
    \ not\n   support any irrational behavior by design, even if proofs for\n   irrational\
    \ addresses have been known to be jotted down.  The new\n   scheme allows for\
    \ approximations of irrational addresses to be\n   supported; even though no rationale\
    \ for why this would be needed\n   could be found, it is a neat feature to handle\
    \ the irrationality of\n   the world today.\n"
- title: 5.7.  Transcendent Addresses
  contents:
  - "5.7.  Transcendent Addresses\n   As a natural extension to irrational addresses,\
    \ one can include\n   approximation to the transcendent addresses, which transcend\
    \ beyond\n   the physical address or even the real address.  While only\n   approximated\
    \ due to limited precision, they can still be used to\n   locate the floating\
    \ address for the life of Pi [PI], as Pi's life\n   floats by.\n"
- title: 6.  Geometric Addresses
  contents:
  - '6.  Geometric Addresses

    '
- title: 6.1.  Round Addresses
  contents:
  - "6.1.  Round Addresses\n   In order to cope with the complexity of the real world,\
    \ real\n   addresses (both rational or irrational) have always needed to be\n\
    \   rounded up for them to be represented.  This rounding provides what\n   is\
    \ known as round addresses and is achieved using a rounding\n   function.  This\
    \ practice is maintained in the complex addressing\n   scheme and is a necessity\
    \ for support of rational and irrational\n   addresses.\n   Round addresses are\
    \ needed to efficiently forward packets around\n   ring-type networks like Token\
    \ Ring [IEEE-802.5] or Resilient Packet\n   Ring (RPR) [IEEE-802.17].\n   Common\
    \ round words include \"ring\", \"circle\", and \"sphere\"; other\n   round words\
    \ are discouraged, especially when using the network.\n"
- title: 6.2.  Square Addresses
  contents:
  - "6.2.  Square Addresses\n   As is well established, some addresses regularly in\
    \ use cannot be\n   directly used on the Internet.  Addresses in text form are\
    \ often\n   referred to as square addresses, because the characters traditionally\n\
    \   take up a square on the screen and because they act as a square peg\n   in\
    \ the round hole of Internet addresses.  In order to convert these\n   square\
    \ addresses into round floating-point numbers, the Domain Name\n   Service (DNS)\
    \ was introduced to replace the host tables.\n   Host tables are the old-school\
    \ way of looking up a square number and\n   converting it to round form.  Such\
    \ tables were published for all\n   known square numbers, but they where inherently\
    \ out of date as new\n   square numbers kept occurring -- new round numbers had\
    \ to be\n   calculated from these square numbers and then had to be tabulated\
    \ and\n   published.\n   Square addresses often use square pi (see Appendix A).\n"
- title: 6.3.  Polar Addresses
  contents:
  - "6.3.  Polar Addresses\n   A misconception on square addresses is that they would\
    \ represent the\n   world as being a flat earth.  While the complex addressing\
    \ scheme\n   supports Cartesian coordinates, alternative polar addresses can be\n\
    \   formed.  Since a flat earth would not have poles through which the\n   rotation\
    \ axis would fit, this proves that the earth is not flat in\n   terms of square\
    \ addresses but only has a square address\n   representation.  Polar addresses\
    \ are trivially achieved using the\n   absolute address and address argument methods.\
    \  Recovering the\n   complex address is trivially achieved using the exponential\
    \ function\n   on the complex polar address.\n   The polar address also has a\
    \ use for addressing Santa Claus, who is\n   well known for living at the North\
    \ Pole.  This address can only be\n   reached by use of the imaginary address,\
    \ as it takes a certain amount\n   of imagination in order to address Santa Claus.\
    \  Traditional integer\n   and fixed addressing schemes do not allow for such\
    \ imaginative\n   addresses, but the complex addressing scheme trivially handles\
    \ it.\n   The North American Aerospace Defense Command (NORAD) Santa Tracker\n\
    \   would not have been possible without imaginative use of polar\n   addresses\
    \ when their secret phone address was revealed.\n"
- title: 6.4.  Root Server
  contents:
  - "6.4.  Root Server\n   The DNS system uses a small set of known root servers,\
    \ which provides\n   the root service in order to attain the address of a node.\
    \  The\n   complex address provides a solution such that each client can in\n\
    \   itself act as a root server as they now can use built-in floating-\n   point\
    \ hardware or software to get the root address from the squared\n   address. \
    \ This offloads the root servers for common benefits, but the\n   traditional\
    \ root servers can operate in parallel, easing the\n   transition to the complex\
    \ address system.\n"
- title: 6.5.  Implementation Considerations
  contents:
  - "6.5.  Implementation Considerations\n   Implementation of floating-point addresses\
    \ and complex addresses, as\n   needed for complex addressing schemes, is trivial\
    \ in today's context.\n   IEEE 754 [IEEE754] allows for a common and agreed-upon\
    \ format for\n   representing floating-point numbers.  The 64-bit floating-point\n\
    \   representation is well established and supported throughout a wide\n   range\
    \ of devices.  Support also exists in a wide range of computer\n   languages,\
    \ including C and FORTRAN.  The C standard library (or libc)\n   essentially makes\
    \ all modern languages support it in a consistent\n   manner.  An independent\
    \ implementation exists for Intercal.  With ISO\n   C99 [C99], the <complex.h>\
    \ include provides even more direct support\n   for complex numbers, enabling\
    \ efficient handling of all aspects of\n   complex addressing with minimal implementation\
    \ effort.\n"
- title: 7.  IPv6 Address Mapping
  contents:
  - "7.  IPv6 Address Mapping\n   In order to convey complex addresses in the IPv6\
    \ address format, the\n   following mapping is provided:\n    3 3 2 2 2 2 2 2\
    \ 2 2 2 2 1 1 1 1 1 1 1 1 1 1\n    1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0\
    \ 9 8 7 6 5 4 3 2 1 0\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |6                                                             3|\n   |3 \
    \              complex address (real part)                   2|\n   +---------------------------------------------------------------+\n\
    \   |3                                                              |\n   |1 \
    \              complex address (real part)                   0|\n   +---------------------------------------------------------------+\n\
    \   |6                                                             3|\n   |3 \
    \           complex address (imaginary part)                 2|\n   +---------------------------------------------------------------+\n\
    \   |3                                                              |\n   |1 \
    \           complex address (imaginary part)                 0|\n   +---------------------------------------------------------------+\n\
    \   The 128-bit IPv6 address is divided into two 64-bit parts, where the\n   upper\
    \ half holds the real part of the address while the lower half\n   holds the imaginary\
    \ part of the complex address.  These are\n   represented as 64-bit floating-point\
    \ numbers as defined in [IEEE754];\n   therefore, the real and imaginary address\
    \ MUST be in the format\n   described in IEEE 754.\n   Since the real address\
    \ is held in the real part of the complex\n   address and the imaginary address\
    \ is held in the imaginary part of\n   the complex address, the proposed representation\
    \ allows for compiler\n   optimization such that these operations can be performed\
    \ without\n   performance hits, as could otherwise be expected with any real or\n\
    \   complex addressing scheme.\n"
- title: 8.  IANA Considerations
  contents:
  - "8.  IANA Considerations\n   This document does not require any IANA actions,\
    \ though IANA may find\n   it mildly amusing.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   Complex addressing is considered unsafe, as division\
    \ by 0 still\n   provides Not a Number (NaN) values.  Users will have to be careful\
    \ to\n   identify the NaN as they can indicate infinity addresses, which are\n\
    \   unrealistic as one needs to confine the address length to the address\n  \
    \ space.  Many other traditional unsafe operations for fixed-point\n   addresses\
    \ have, however, been resolved.  For example, the error\n   condition of having\
    \ the square address of -1 is readily resolved as\n   the root address becomes\
    \ the complex address i.  Thus, it has the\n   real part of 0, which is reasonable\
    \ for an address that is not real,\n   and an imaginary part of 1, which is in\
    \ itself reasonable since one\n   can imagine this error to occur.\n   Division\
    \ by 0 and other floating-point address calculations can cause\n   a floating-point\
    \ interrupt, which causes the execution address to\n   deviate; it is typically\
    \ pushed on a stack and replaced by the\n   interrupt handler address.  Recovery\
    \ from such interrupts may require\n   further recursive calls; hence, the overall\
    \ computation time is\n   unpredictable.  It can cause a complete core dump, and\
    \ dumping the\n   core can have significant effects on the propulsion system and\
    \ the\n   time to reach anywhere in the address space.  Care must be taken to\n\
    \   avoid such measures, or engineering will be quite upset.  Dumping the\n  \
    \ core also widely breaks security protocols, as leaks can have\n   widespread\
    \ consequences.  NaN is also known as \"No Agency Number\", to\n   mark the importance\
    \ of keeping things secure.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [C99]      ISO, \"Information technology -- Programming\
    \ Languages --\n              C\", ISO/IEC 9899, 1999.\n   [IEEE754]  IEEE, \"\
    IEEE Standard for Floating-Point Arithmetic\",\n              IEEE 754, DOI 10.1109/IEEESTD.2008.4610935.\n\
    \   [OSI]      ISO, \"Information technology -- Open Systems\n              Interconnection\
    \ -- Basic Reference Model: The Basic\n              Model\", ISO/IEC 7498-1,\
    \ 1994.\n   [RFC791]   Postel, J., \"Internet Protocol\", STD 5, RFC 791,\n  \
    \            DOI 10.17487/RFC0791, September 1981,\n              <http://www.rfc-editor.org/info/rfc791>.\n\
    \   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119,\
    \ March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC4291]\
    \  Hinden, R. and S. Deering, \"IP Version 6 Addressing\n              Architecture\"\
    , RFC 4291, DOI 10.17487/RFC4291, February\n              2006, <http://www.rfc-editor.org/info/rfc4291>.\n\
    \   [RFC6214]  Carpenter, B. and R. Hinden, \"Adaptation of RFC 1149 for\n   \
    \           IPv6\", RFC 6214, DOI 10.17487/RFC6214, April 2011,\n            \
    \  <http://www.rfc-editor.org/info/rfc6214>.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [ICAO-A11] ICAO, \"Air Traffic Services, Annex\
    \ 11 to the Convention on\n              International Civil Aviation\", July\
    \ 2001,\n              <http://www.icao.int/secretariat/PostalHistory/\n     \
    \         annex_11_air_traffic_services.htm>.\n   [IEEE-802.17]\n            \
    \  IEEE, \"IEEE Standard for Information Technology -\n              Telecommunications\
    \ and Information Exchange between\n              Systems - Local and Metropolitan\
    \ Area Networks - Specific\n              Requirements Part 17: Resilient Packet\
    \ Ring (RPR) Access\n              Method and Physical Layer Specifications\"\
    , IEEE 802.17,\n              DOI 10.1109/IEEESTD.2011.6026209.\n   [IEEE-802.5]\n\
    \              IEEE, \"IEEE Standard for Information Technology -\n          \
    \    Telecommunications and Information Exchange between\n              Systems\
    \ - Local and Metropolitan Area Networks - Part 5:\n              Token Ring Access\
    \ Method and Physical Layer\n              Specifications\", IEEE 802.5,\n   \
    \           DOI 10.1109/IEEESTD.1992.7438701.\n   [PI]       \"Life of Pi\", 20th\
    \ Century Fox, 2012.\n   [pibill]   Wikipedia, \"Indiana Pi Bill\", March 2017,\n\
    \              <https://en.wikipedia.org/w/\n              index.php?title=Indiana_Pi_Bill&oldid=770393894>.\n\
    \   [RFC5944]  Perkins, C., Ed., \"IP Mobility Support for IPv4, Revised\",\n\
    \              RFC 5944, DOI 10.17487/RFC5944, November 2010,\n              <http://www.rfc-editor.org/info/rfc5944>.\n"
- title: Appendix A.  Square Pi
  contents:
  - "Appendix A.  Square Pi\n   When using square numbers, it is customary to use\
    \ square pi, a number\n   that has seen limited exposure in traditional texts\
    \ but is widely\n   used in computer science.  It is thus appropriate to publish\
    \ a few\n   related notes on square pi in order to assist users of square\n  \
    \ addresses on its correct usage.\n   While traditional pi or round pi is an irrational\
    \ number, it can be\n   rounded off to 3.14 or 3.14159; it has an incomprehensible\
    \ number of\n   decimals, which is quite inappropriate for a round number, but\
    \ as we\n   keep rounding it to fit our needs, we keep rationalizing it from its\n\
    \   irrational behavior.\n   The radius of an object is the closest to the center\
    \ of the object\n   you get.  The circumference is the radius times 2 pi.  The\
    \ diameter\n   is the shortest distance across the object, which is thus the radius\n\
    \   times 2.  The area is pi times the square of radius.\n   For a round circle,\
    \ the radius is from the center to anywhere on the\n   circumference.  For a square\
    \ circle, the radius only reaches the\n   circumference on the four points located\
    \ closest to the center.\n   These are typically oriented such that the real and\
    \ imaginary axis\n   goes through them, which is helpful in calculations, and\
    \ no rotation\n   symmetries need to be considered.\n   The square pi fills the\
    \ same purpose as the round pi, but rather than\n   being adapted to round objects,\
    \ it is adapted to square objects.  For\n   a square circle, the math is exactly\
    \ the same as for round circles,\n   provided that the square pi is used with\
    \ square circles and that\n   round pi is used with round circles.\n   The value\
    \ of square pi is 4.\n   The value of square pi adapts really well to the way\
    \ that computers\n   calculate, which is also why computer results often are represented\n\
    \   in square numbers, providing a bit of a square feeling.  It should be\n  \
    \ noted that the square root of pi is often used, and the square root\n   of square\
    \ pi is naturally 2, which is very easy to handle in\n   calculations and effectively\
    \ reduces the risk of irrational numbers.\n   Please note that the square pi should\
    \ not be confused with the\n   Indiana Pi Bill [pibill], which does not discuss\
    \ the square pi but a\n   failed attempt to do square calculation of the area\
    \ and circumference\n   of a round circle using traditional tools like rulers\
    \ and compasses.\n"
- title: Appendix B.  Implementation Example
  contents:
  - "Appendix B.  Implementation Example\n   The following is a simple implementation\
    \ example to illustrate how\n   some core concepts can be implemented in <complex.h>\
    \ (as defined in\n   ISO C99 [C99]).\n   #include <complex.h>\n   #include <math.h>\n\
    \   #include <stdio.h>\n   // Define type for complex address\n   typedef complex\
    \ ca;\n   // Create complex address\n   ca ca_create_complex_address(double real_address,\n\
    \           double imaginary_address)\n   {\n           return real_address +\
    \ I * imaginary_address;\n   }\n   // Get real address\n   double  ca_get_real_address(ca\
    \ ca_val)\n   {\n           return creal(ca_val);\n   }\n   // Get imaginary address\n\
    \   double  ca_get_imaginary_address(ca ca_val)\n   {\n           return cimag(ca_val);\n\
    \   }\n   // Get complex address\n   complex ca_get_complex_address(ca ca_val)\n\
    \   {\n           return ca_val;\n   }\n   // Get floating address\n   double\
    \  ca_get_floating_address(ca ca_val)\n   {\n           return creal(ca_val);\n\
    \   }\n   // Get physical address\n   double  ca_get_physical_address(ca ca_val)\n\
    \   {\n           return cimag(ca_val);\n   }\n   // Get absolute address\n  \
    \ double  ca_get_absolute_address(ca ca_val)\n   {\n           return cabs(ca_val);\n\
    \   }\n   // Get address argument\n   double  ca_get_address_argument(ca ca_val)\n\
    \   {\n           return carg(ca_val)*360/(2*M_PI);\n   }\n   int main()\n   {\n\
    \           ca ca1, ca2;\n           ca1 = ca_create_complex_address(1.0, 0.0);\n\
    \           printf(\"The complex address (%f,%f)\\n\",\n                   creal(ca1),\
    \ cimag(ca1));\n           printf(\"has the real address %f and imaginary address\
    \ %f\\n\",\n                   ca_get_real_address(ca1),\n                   ca_get_imaginary_address(ca1));\n\
    \           printf(\"This represents the floating address %e and \\\n   physical\
    \ address %f\\n\", \\\n                   ca_get_floating_address(ca1),\n    \
    \               ca_get_physical_address(ca1));\n           ca2 = ca_create_complex_address(0.0,\
    \ 1.0);\n           printf(\"The complex address (%f,%f)\\n\",\n             \
    \      creal(ca2), cimag(ca2));\n           printf(\"This represents the absolute\
    \ address %f\\n\",\n                   ca_get_absolute_address(ca2));\n      \
    \     printf(\"The address argument resolution is %f\\n\",\n                 \
    \  ca_get_address_argument(ca2));\n           return 0;\n   }\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Magnus Danielson\n   Net Insight AB\n   Vastberga Alle\
    \ 9\n   Hagersten  12630\n   Sweden\n   Email: magda@netinsight.net\n   Mans Nilsson\n\
    \   Besserwisser Networks\n   Email: mansaxel@besserwisser.org\n"
