Slave/Token Passing (MS/TP) is a medium access control method for the RS 485 physical layer and is used primarily in building automation networks.
This specification defines the frame format for transmission of IPv6 packets and the method of forming link local and statelessly autoconfigured IPv6 addresses on MS/TP networks.
/Token Passing (MS/TP) is a Medium Access Control (MAC) protocol for the RS 485
[TIA 485 A] physical layer and is used primarily in building automation networks.
This specification defines the frame format for transmission of IPv6 [RFC2460] packets and the method of forming link local and statelessly autoconfigured IPv6 addresses on MS/TP networks.
The general approach is to adapt elements of the 6LoWPAN specifications ([RFC4944], [RFC6282], and [RFC6775]) to constrained wired networks, as noted below.
An MS/TP device is typically based on a low cost microcontroller with limited processing power and memory.
These constraints, together with low data rates and a small MAC address space, are similar to those faced in 6LoWPAN networks.
MS/TP differs significantly from 6LoWPAN in at least three respects
: a) MS/TP devices are typically mains powered, b) all MS/TP devices on a segment can communicate directly so there are no hidden node or mesh routing issues, and c)
the latest MS/TP specification provides support for large payloads, eliminating the need for fragmentation and reassembly below IPv6.
The following sections provide a brief overview of MS/TP and then describe how to form IPv6 addresses and encapsulate IPv6 packets in MS/TP frames.
This specification (subsequently referred to as "6LoBAC") includes a REQUIRED header compression mechanism that is based on LOWPAN IPHC [RFC6282] and improves MS/TP link utilization.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
Abbreviations Used ASHRAE:  American Society of Heating, Refrigerating, and Air  Conditioning Engineers
An ISO/ANSI/ASHRAE Standard Data Communication Protocol for Building Automation and Control Networks CRC:
This section provides a brief overview of MS/TP, as specified in Clause 9 of the ANSI/ASHRAE Standard 135 2016
The latest version of [BACnet] integrates changes to legacy MS/TP (approved as [Addendum an]) that provide support for larger frame sizes and improved error handling.
[BACnet], Clause 9 also covers physical  layer deployment options.
MS/TP is designed to enable multidrop networks over shielded twisted pair wiring.
It can support network segments up to 1000 meters in length at a data rate of 115.2 kbit/s or segments up to 1200 meters in length at lower bit rates.
An MS/TP interface requires only a UART, an RS 485
[TIA 485 A] transceiver with a driver that can be disabled, and a 5 ms resolution timer.
The MS/TP MAC is typically implemented in software.
The differential signaling used by [TIA 485 A] requires a contention  free MAC.
MS/TP uses a token to control access to a multidrop bus.
Only an MS/TP master node can initiate the unsolicited transfer of data, and only when it holds the token.
After sending at most a configured maximum number of data frames, a master node passes the token to the next master node (as determined by the MAC address).
If present on the link, legacy MS/TP implementations (including any slave nodes) ignore the frame format defined in this specification.
[BACnet], Clause 9 defines a range of Frame Type values used to designate frames that contain Data and Data CRC fields encoded using Consistent Overhead
Byte Stuffing [COBS] (see Appendix B).
The purpose of COBS encoding is to eliminate preamble sequences from the Encoded Data and Encoded CRC 32K fields.
The Encoded Data field is covered by a 32 bit CRC [CRC32K]
(see Appendix C) that is also COBS encoded.
MS/TP COBS encoded frames have the following format:
Encoded CRC 32K (5 octets)
Encoded Frame Format MS/TP COBS encoded
frame fields are defined as follows:
The Frame Type is used to distinguish between different types of MAC frames.
The types relevant to this specification (in decimal) are: 0
Token 1  Poll For Master 2
For Master 3  Test Request 4  Test Response ...
34  IPv6 over MS/TP (LoBAC)
Encapsulation Frame Types 8 31 and 35 127 are reserved for assignment by ASHRAE.
127 designate COBS encoded frames that convey Encoded Data and Encoded CRC 32K fields.
See Section 2 for additional details.
The Destination and Source Addresses are each one octet in length.
See Section 3 for additional details.
For COBS encoded frames, the Length field indicates the size of the [COBS]
Encoded Data field in octets, plus three.
(This adjustment is required in order for legacy MS/TP devices to ignore COBS encoded frames.)
See Section 4 and the Appendices for additional details.
The Header CRC field covers the Frame Type, Destination Address, Source Address, and Length fields.
The Header CRC generation and check procedures are specified in [BACnet], Annex G.1.
Use of the optional 0xFF trailer octet is discussed in [BACnet], Clause 9. 1.4.
The main goals of this specification are a) to enable IPv6 directly on wired end devices in building automation and control networks by leveraging existing standards to the greatest extent possible, and b) to co exist with legacy MS/TP implementations.
Co existence allows MS/TP networks to be incrementally upgraded to support IPv6.
In order to co exist with legacy devices, no changes are permitted to the MS/TP addressing modes, frame header format, control frames, or Master Node state machine as specified in [BACnet], Clause 9.
Profile for IPv6 over MS/TP ASHRAE has assigned an MS/TP Frame Type value of 34 to indicate IPv6 over MS/TP (LoBAC) Encapsulation.
This falls within the range of values that designate COBS encoded data frames.
Mandatory Features [BACnet], Clause 9 specifies mandatory to implement features of MS/TP devices.
For example, it is mandatory that all MS/TP nodes respond to a Test Request with a Test Response frame.
All MS/TP master nodes must implement the Master Node state machine and handle Token, Poll For Master, and Reply To Poll For Master control frames.
nodes are MS/TP master nodes that implement a Receive Frame state machine capable of handling COBS encoded frames.
6LoBAC nodes must support a data rate of 115.2 kbit/s and may support lower data rates as specified in [BACnet], Clause 9.
The method of selecting the data rate is outside the scope of this specification.
The following constants are used by the Receive Frame state machine.
The minimum valid Length value of any LoBAC  encapsulated frame: 5 Nmax COBS length
The maximum valid Length value of any LoBAC  encapsulated frame: 1509 2.3.
The following parameters are used by the Master Node state machine.
The default maximum number of information frames the node may send before it must pass the token: 1 Nmax master
The default highest allowable address for master nodes:
127 The mechanisms for setting parameters or monitoring MS/TP performance are outside the scope of this specification.
Addressing Modes MS/TP node (MAC)
addresses are one octet in length and are assigned dynamically.
The method of assigning MAC addresses is outside the scope of this specification.
However, each MS/TP node on the link MUST have a unique address in order to ensure correct MAC operation.
[BACnet], Clause 9 specifies that addresses 0 through 127 are valid for master nodes.
The method specified in Section 6 for creating a MAC address derived Interface Identifier (IID) ensures that an IID of all zeros can never be generated.
A Destination Address of 255 (all nodes) indicates a MAC layer broadcast.
MS/TP does not support multicast; therefore, all IPv6 multicast packets MUST be broadcast at the MAC layer and filtered at the IPv6 layer.
A Source Address of 255 MUST NOT be used.
Hosts learn IPv6 prefixes via router advertisements according to [RFC4861].
Upon transmission, the network layer MTU is formatted according to Section 5 and becomes the MAC service data unit (MSDU).
The MSDU is then COBS encoded by MS/TP.
Upon reception, the steps are reversed.
[BACnet], Clause 9 supports MSDUs up to 2032 octets in length.
IPv6 [RFC2460] requires that every link in an internet have an MTU of 1280 octets or greater.
Additionally, a node must be able to accept a fragmented packet that, after reassembly, is as large as 1500 octets.
This specification defines an MTU length of at least 1280 octets and at most 1500 octets.
Support for an MTU length of 1500 octets is RECOMMENDED.
This section specifies an adaptation layer to support compressed IPv6 headers as specified in Section 10.
IPv6 header compression MUST be implemented on all 6LoBAC nodes.
Implementations MAY also support Generic Header Compression [RFC7400] for transport layer headers.
The LoBAC encapsulation format defined in this section describes the MSDU of an IPv6 over MS/TP frame.
The LoBAC payload (i.e., an IPv6 packet) follows an encapsulation header stack.
LoBAC is a subset of the LoWPAN encapsulation defined in [RFC4944], as updated by [RFC6282], so the use of "LOWPAN" in literals below is intentional.
The primary difference between LoWPAN and LoBAC encapsulation is omission of the Mesh, Broadcast, Fragmentation, and LOWPAN HC1 headers in the latter.
All LoBAC encapsulated datagrams transmitted over MS/TP are prefixed by an encapsulation header stack consisting of a Dispatch value followed by zero or more header fields.
The Dispatch value is treated as an unstructured namespace.
Only a single pattern is used to represent current LoBAC functionality.
Dispatch Value Bit Pattern Other IANA assigned 6LoWPAN Dispatch values do not apply to 6LoBAC unless otherwise specified.
This section defines how to obtain an IPv6 Interface Identifier.
This specification distinguishes between two types of IIDs, MAC  address derived and semantically opaque.
A MAC address derived IID is the RECOMMENDED type for use in forming a link local address, as it affords the most efficient header compression provided by the LOWPAN IPHC [RFC6282] format specified in Section 10.
The general procedure for creating a MAC address derived IID is described in Appendix A of [RFC4291], "Creating Modified EUI 64 Format Interface Identifiers", as updated by [RFC7136].
The Interface Identifier for link local addresses SHOULD be formed by concatenating the node's 8 bit MS/TP MAC address to the seven octets 0x00, 0x00, 0x00, 0xFF, 0xFE, 0x00, and 0x00.
A semantically opaque IID having 64 bits of entropy is RECOMMENDED for each globally scoped address and MAY be locally generated according to one of the methods cited in Section 12.
A node that generates a 64 bit semantically opaque IID MUST register the IID with its local router(s) by sending a Neighbor Solicitation (NS) message with the Address Registration Option (ARO) and process Neighbor Advertisements (NAs) according to [RFC6775].
An IPv6 address prefix used for stateless autoconfiguration [RFC4862] of an MS/TP interface MUST have a length of 64 bits.
The IPv6 link local address [RFC4291] for an MS/TP interface is formed by appending the Interface Identifier, as defined above, to the prefix FE80::/64.
The address resolution procedure for mapping IPv6 non multicast addresses into MS/TP MAC layer addresses follows the general description in Section 7.2 of [RFC4861], unless otherwise specified.
The Source/Target Link Layer Address option has the following form when the addresses are 8 bit MS/TP MAC layer (node) addresses.
Type: 1: for Source Link Layer address.
2: for Target Link Layer address.
This is the length of this option (including the Type and Length fields) in units of 8 octets.
The value of this field is 1 for 8 bit MS/TP MAC addresses.
The 8 bit address in canonical bit order [RFC2469].
This is the unicast address the interface currently responds to.
All IPv6 multicast packets MUST be sent to MS/TP Destination Address 255 (broadcast) and filtered at the IPv6 layer.
IPv6 compression, which is specified in [RFC6282] and included herein by reference.
This section will simply identify substitutions that should be made when interpreting the text of [RFC6282].
If LOWPAN IPHC compression [RFC6282] is used with context,
the router(s) directly attached to the MS/TP segment MUST disseminate the 6LoWPAN Context Option (6CO) according to Section 7.2 of [RFC6775].
This document uses values previously reserved by [RFC4944] and [RFC6282]; it does not require any IANA actions.
Security Considerations See [RFC8065] for a general discussion of privacy threats faced by constrained nodes.
[RFC8065] makes a distinction between "stable" and "temporary" addresses.
The former are long lived and typically advertised by servers.
The latter are typically used by clients and SHOULD be changed frequently to mitigate correlation of activities over time.
Nodes that engage in both activities SHOULD support simultaneous use of multiple addresses per device.
Globally scoped addresses that contain MAC address derived IIDs may expose a network to address scanning attacks.
For this reason, it is RECOMMENDED that a 64 bit semantically opaque IID be generated for each globally scoped address in use according to, for example, [RFC3315], [RFC3972], [RFC4941], [RFC5535], or [RFC7217].
Appendix A.  Abstract MAC Interface
This Appendix is informative and not part of the standard.
[BACnet], Clause 9 provides support for MAC layer clients through its SendFrame and ReceivedDataNoReply procedures.
However, it does not define a network protocol independent abstract interface for the MAC.
This is provided below as an aid to implementation.
This primitive defines the transfer of data from a MAC client entity to a single peer entity or multiple peer entities in the case of a broadcast address.
Semantics of the Service Primitive
The semantics of the primitive are as follows:
MA DATA.request ( destination address, source address, data, type )
The 'destination address' parameter may specify either an individual or a broadcast MAC entity address.
It must contain sufficient information to create the Destination Address field (see Section 1.3) that is prepended to the frame by the local MAC sublayer entity.
The 'source address' parameter, if present, must specify an individual MAC address.
If the source address parameter is omitted, the local MAC sublayer entity will insert a value associated with that entity.
The 'data' parameter specifies the MAC service data unit (MSDU) to be transferred by the MAC sublayer entity.
There is sufficient information associated with the MSDU for the MAC sublayer entity to determine the length of the data unit.
The 'type' parameter specifies the value of the MS/TP Frame Type field that is prepended to the frame by the local MAC sublayer entity.
When Generated This primitive is generated by the MAC client entity whenever data shall be transferred to a peer entity or entities.
This can be in response to a request from higher protocol layers or from data generated internally to the MAC client, such as a Token frame.
Effect on Receipt Receipt of this primitive will cause the MAC entity to insert all MAC specific fields, including Destination Address, Source Address, Frame Type, and any fields that are unique to the particular media access method, and pass the properly formed frame to the lower protocol layers for transfer to the peer MAC sublayer entity or entities.
This primitive defines the transfer of data from the MAC sublayer entity to the MAC client entity or entities in the case of a broadcast address.
Semantics of the Service Primitive
The semantics of the primitive are as follows:
MA DATA.indication ( destination address, source address, data, type )
The 'destination address' parameter may be either an individual or a broadcast address as specified by the Destination Address field of the incoming frame.
The 'source address' parameter is an individual address as specified by the Source Address field of the incoming frame.
The 'data' parameter specifies the MAC service data unit (MSDU) as received by the local MAC entity.
There is sufficient information associated with the MSDU for the MAC sublayer client to determine the length of the data unit.
The 'type' parameter is the value of the MS/TP Frame Type field of the incoming frame.
When Generated The MA DATA.indication is passed from the MAC sublayer entity to the MAC client entity or entities to indicate the arrival of a frame to the local MAC sublayer entity that is destined for the MAC client.
Such frames are reported only if they are validly formed and received without error, and their Destination Address designates the local MAC entity.
Frames destined for the MAC Control sublayer are not passed to the MAC client.
The effect of receipt of this primitive by the MAC client is unspecified.
Consistent Overhead Byte Stuffing (COBS)
This Appendix is informative and not part of the standard.
[BACnet], Clause 9 corrects a long standing issue with the MS/TP specification, namely that preamble sequences were not escaped whenever they appeared in the Data or Data CRC fields.
In rare cases, this resulted in dropped frames due to loss of frame synchronization.
The solution is to encode the Data and 32 bit Data CRC fields before transmission using Consistent Overhead
Stuffing [COBS] and decode these fields upon reception.
COBS is a run length encoding method that nominally removes '0x00' octets from its input.
Any selected octet value may be removed by XOR'ing that value with each octet of the COBS output.
[BACnet], Clause 9 specifies the preamble octet '0x55' for removal.
The minimum overhead of COBS is one octet per encoded field.
The worst case overhead in long fields is bounded to one octet per 254 as described in [COBS].
Frame encoding proceeds logically in two passes.
The Encoded Data field is prepared by passing the MSDU through the COBS encoder and XOR'ing the preamble octet '0x55' with each octet of the output.
The Encoded CRC 32K field is then prepared by calculating a CRC 32K over the Encoded Data field and formatting it for transmission as described in Appendix C.
The combined length of these fields, minus two octets for compatibility with legacy MS/TP devices, is placed in the MS/TP header Length field before transmission.
Example COBS encoder and decoder functions are shown below for illustration.
Complete examples of use and test vectors are provided in [BACnet], Annex T. <CODE BEGINS> #
Returns the length of the encoded data.
In the case of encountering a non zero octet in the data,   simply copy input to output and increment the code octet.
Otherwise, encode the last chunk normally, as if   a "phantom zero" is appended to the data.
Returns the length of the encoded data or zero if error.
/ size t cobs decode (uint8 t  to, const
uint8 t  from, size t length, uint8 t mask)
{ size t read index   0; size t write index   0; uint8 t code, last code; while (read index < length) { code   from[read index] ^ mask; last code   code
/ if (read index   code
/ if ((last code !
&& (read index < length)) to[write
This Appendix is informative and not part of the standard.
Extending the payload of MS/TP to 1500 octets requires upgrading the Data CRC from 16 bits to 32 bits.
P. Koopman has authored several papers on evaluating CRC polynomials for network applications.
In [CRC32K], he surveyed the entire 32 bit polynomial space and noted some that exceed the [IEEE.802.3] polynomial in performance.
[BACnet], Clause 9 specifies one of these, the CRC 32K (Koopman) polynomial.
The specified use of the calc
crc32K() function is as follows.
Before a frame is transmitted, 'crc value' is initialized to all ones.
After passing each octet of the [COBS] Encoded Data field through the function, the ones complement of the resulting 'crc value' is arranged in LSB first order and is itself [COBS] encoded.
The length of the resulting Encoded CRC 32K field is always five octets.
Upon reception of a frame, 'crc value' is initialized to all ones.
The octets of the Encoded Data field are accumulated by the calc
The Encoded CRC 32K field is then decoded and the resulting four octets are accumulated by the calc crc32K() function.
If the result is the expected residue value 'CRC32K RESIDUE', then the frame was received correctly.
An example CRC 32K function is shown below for illustration.
Complete examples of use and test vectors are provided in [BACnet], Annex G.3.
/ #define CRC32K INITIAL VALUE (0xFFFFFFFF)
Accumulate 'data value' into the CRC in 'crc value'.
crc value must be set to CRC32K INITIAL VALUE   before initial call.
crc32K (uint8 t data value, uint32 t crc value) { int b;
This Appendix is informative and not part of the standard.
BACnet MS/TP, Src (2), Dst (1), IPv6 Encapsulation Preamble 55: 0x55
Frame Type: IPv6 Encapsulation (34)
Destination Address: 1 Source Address: 2 Length: 537 Header CRC: 0x1c
Extended Data CRC: 0x9e7259e2 [correct]
Destination address mode: 16 bits inline (0x0002)
Hop limit: 63 Source: aaaa::1 (aaaa::1
Internet Protocol Version 6, Src: aaaa::1 (aaaa::1),
Differentiated Services Field: Default (0x00000000)
Hop limit: 63 Source: aaaa::1 (aaaa::1
[Length: 510] Frame (547 bytes):
55 ff 22 01 02
19 1c 56 2d 83 56
54 54 54 54 57 54 56 54 d5 50 2d
j{.\W b1 8e bd 00 6e f5 51
5d 5c 5f 5e 59 58 5b
49 48 4b 4a   EDGFA@CBMLONIHKJ
77 76 71 70 73 72 7d 7c 7f
7e 79 78 7b 7a   utwvqpsr} .~yx{z
6d 6c 6f 6e 69
14 17 16 11 10
13 12 1d 1c 1f 1e 19
02 0d 0c 0f 0e 09 08
31 30 33 32 3d 3c 3f 3e 39 38 3b 3a
>98;: 25 24 27 26 21 20 23 22 2d 2c 2f 2e 29
(   d5 d4 d7 d6 d1 d0 d3 d2 dd dc df de d9 d8
c5 c4 c7 c6 c1 c0 c3 c2
cf ce c9 c8 cb
f5 f4 f7 f6 f1 f0 f3 f2 fd fc ff fe f9 f8
e5 e4 e7 e6 e1 e0
e3 e2 ed ec ef ee e9 e8
84 87 86 81 80 83 82
8d 8c 8f 8e 89 88
b6 b1 b0 b3 b2 bd bc bf be b9 b8
a5 a4 a7 a6 a1
a0 a3 a2 ad ac af ae a9 a8
ab 54 57 56 51 50 53 52
5d 5c 5f 5e 59 58 5b
44 47 46 41 40 43 42
4d 4c 4f 4e 49 48 4b 4a   EDGFA@CBMLONIHKJ
77 76 71 70 73 72 7d 7c 7f
7e 79 78 7b 7a   utwvqpsr} .~yx{z
6d 6c 6f 6e 69
14 17 16 11 10
13 12 1d 1c 1f 1e 19
02 0d 0c 0f 0e 09 08
31 30 33 32 3d 3c 3f 3e 39 38 3b 3a
>98;: 25 24 27 26 21 20 23 22 2d 2c 2f 2e 29
(   d5 d4 d7 d6 d1 d0 d3 d2 dd dc df de d9 d8
c5 c4 c7 c6 c1 c0 c3 c2
cf ce c9 c8 cb
f5 f4 f7 f6 f1 f0 f3 f2 fd fc ff fe f9 f8
e5 e4 e7 e6 e1 e0
e3 e2 ed ec ef ee e9 e8
84 87 86 81 80 83 82
8d 8c 8f 8e 89 88
b6 b1 b0 b3 b2 bd bc bf be b9 b8
a5 a4 a7 a6 a1
Decoded Data and CRC32K (537 bytes)
: 78 d6 00 3a 3f 00 00 00 00 00 00 00
e4 db e8 55 3b a0 04 00 08   .x?
0e 0f 10 11 12 13 14 15 16
19 1a 1b 1c 1d
1e 1f 20 21 22
2d 2e 2f 30 31 32 33 34 35 36 37 38   )
, ./012345678 39 3a 3b 3c 3d 3e 3f 40 41 42 43 44 45 46 47 48
@ABCDEFGH 49 4a 4b 4c 4d 4e 4f 50 51 52 53 54 55 56 57 58
5d 5e 5f 60 61 62 63 64 65
6a 6b 6c 6d 6e 6f 70
71 72 73 74 75 76 77 78   ijklmnopqrstuvwx
89 8a 8b 8c 8d 8e 8f 90 91 92 93 94 95
af b0 b1 b2 b3 b4 b5 b6 b7
bf c0 c1 c2 c3 c4 c5 c6 c7 c8
fc fd fe ff 00 01
02 03 04 05 06 07
0e 0f 10 11 12 13 14 15 16
19 1a 1b 1c 1d
1e 1f 20 21 22
2d 2e 2f 30 31 32 33 34 35 36 37 38   )
, ./012345678 39 3a 3b 3c 3d 3e 3f 40 41 42 43 44 45 46 47 48
@ABCDEFGH 49 4a 4b 4c 4d 4e 4f 50 51 52 53 54 55 56 57 58
5d 5e 5f 60 61 62 63 64 65
6a 6b 6c 6d 6e 6f 70
71 72 73 74 75 76 77 78   ijklmnopqrstuvwx
89 8a 8b 8c 8d 8e 8f 90 91 92 93 94 95
af b0 b1 b2 b3 b4 b5 b6 b7
bf c0 c1 c2 c3 c4 c5 c6 c7 c8
rY. Decompressed 6LoWPAN IPHC (558 bytes): 60 00 00
e4 db e8 55 3b a0 04 00 08 09
20 21 22 23 24 25 26 27
28 29 2a 2b 2c
41 42 43 44 45 46 47 48 49
4a 4b 4c 4d 4e 4f
@ABCDEFGHIJKLMNO 50 51 52 53 54 55 56 57
58 59 5a 5b 5c
60 61 62 63 64
68 69 6a 6b 6c 6d 6e 6f
`abcdefghijklmno 70 71 72 73 74 75 76 77 78 79
7a 7b 7c 7d 7e 7f
90 91 92 93 94 95
96 97 98 99 9a 9b 9c 9d 9e
b0 b1 b2 b3 b4 b5 b6 b7 b8 b9 ba bb
d0 d1 d2 d3 d4 d5 d6 d7
e3 e4 e5 e6 e7 e8 e9
f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 fa
02 03 04 05 06 07 08 09
11 12 13 14 15 16 17
18 19 1a 1b 1c 1d 1e
20 21 22 23 24 25 26 27
28 29 2a 2b 2c
41 42 43 44 45 46 47 48 49
4a 4b 4c 4d 4e 4f
@ABCDEFGHIJKLMNO 50 51 52 53 54 55 56 57
58 59 5a 5b 5c
60 61 62 63 64
68 69 6a 6b 6c 6d 6e 6f
`abcdefghijklmno 70 71 72 73 74 75 76 77 78 79
7a 7b 7c 7d 7e 7f
90 91 92 93 94 95
96 97 98 99 9a 9b 9c 9d 9e
b0 b1 b2 b3 b4 b5 b6 b7 b8 b9 ba bb
d0 d1 d2 d3 d4 d5 d6 d7
e3 e4 e5 e6 e7 e8 e9
f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 fa
