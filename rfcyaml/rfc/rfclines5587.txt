Abstract This document introduces new application programming interfaces (APIs) to the Generic Security Services API (GSS API) for extended mechanism attribute inquiry.
These interfaces are primarily intended to reduce instances of hardcoding of mechanism identifiers in GSS applications.
These interfaces include mechanism attributes and attribute sets, a function for inquiring the attributes of a mechanism, a function for indicating mechanisms that possess given attributes, and a function for displaying mechanism attributes.
Introduction GSS API [RFC2743] mechanisms have a number of properties that may be of interest to applications.
The lack of APIs for inquiring about available mechanisms' properties has meant that many GSS API applications must hardcode mechanism Object Identifiers (OIDs).
Ongoing work may result in a variety of new GSS API mechanisms.
Applications should not have to hardcode their OIDs.
For example, the Secure Shell version 2 (SSHv2) protocol [RFC4251] supports the use of GSS API mechanisms for authentication [RFC4462] but explicitly prohibits the use of Simple and Protected GSS API Negotiation (SPNEGO) [RFC4178].
Future mechanisms that negotiate mechanisms would have to be forbidden as well, but there is no way to implement applications that inquire what mechanisms are available and then programmatically exclude mechanisms "like SPNEGO".
Conventions Used in This Document
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "
SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
We introduce a new concept   that of mechanism attributes.
By allowing applications to query the set of attributes associated with individual mechanisms and to find out which mechanisms support a given set of attributes, we allow applications to select mechanisms based on their attributes without having to hardcode mechanism OIDs.
Section 3.1 describes the mechanism attributes concept.
Sections 3.4.2, 3.4.3, and 3.4.4 describe three new interfaces that deal in mechanisms and attribute sets:  GSS Indicate mechs by attrs
GSS Inquire attrs for mech()
GSS Display mech attr() 3.1.
Mechanism Attributes and Attribute Sets
An abstraction for the features provided by mechanisms and pseudo  mechanisms is needed in order to facilitate the programmatic selection of mechanisms.
Pseudo mechanisms are mechanisms that make reference to other mechanisms in order to provide their services.
For example, SPNEGO is a pseudo mechanism, for without other mechanisms SPNEGO is useless.
Two data types are needed: one for individual mechanism attributes and one for mechanism attribute sets.
To simplify the mechanism attribute interfaces, we reuse the 'OID' and 'OID set' data types and model individual mechanism attribute types as OIDs.
To this end, we define an open namespace of mechanism attributes and assign them arcs off of this OID: <1.3.6.1.5.5.13
Each mechanism has a set of mechanism attributes that it supports as described in its specification.
List of Known Mechanism Attributes
GSS C MA MECH CONCRETE
GSS C MA MECH CONCRETE
GSS C MA CTX TRANS
Mechanism Attribute Sets of Existing Mechs
The Kerberos V mechanism [RFC1964] provides the following mechanism attributes:
GSS C MA MECH CONCRETE
GSS C MA ITOK FRAMED  GSS C MA
GSS C MA DELEG CRED
GSS C MA INTEG PROT
GSS C MA CONF PROT
GSS C MA MIC  GSS C MA WRAP  GSS C MA PROT READY  GSS C MA REPLAY DET  GSS C MA OOS DET  GSS C MA CBINDINGS
GSS C MA CTX TRANS (some implementations, using implementation  specific exported context token formats)
The Kerberos V mechanism also has a deprecated OID that has the same mechanism attributes as above as well as GSS C MA DEPRECATED.
The mechanism attributes of the Simple Public Key GSS API Mechanism (SPKM)
[RFC2025] family of mechanisms will be provided in a separate document, as SPKM is currently being reviewed for possibly significant changes due to problems in its specifications.
The Low Infrastructure Public Key (LIPKEY) mechanism [RFC2847] offers the following attributes:
GSS C MA MECH CONCRETE
GSS C MA ITOK FRAMED  GSS C MA
GSS C MA AUTH TARG (from SPKM 3)
TARG ANON (from SPKM 3)
GSS C MA INTEG PROT  GSS C MA CONF PROT
GSS C MA REPLAY DET  GSS C MA OOS DET  GSS C MA CTX TRANS (some implementations, using implementation  specific exported context token formats)
(LIPKEY should also provide GSS C MA CBINDINGS, but SPKM 3 requires clarifications on this point.)
The SPNEGO mechanism [RFC4178] provides the following attributes:  GSS C MA MECH NEGO
GSS C MA ITOK FRAMED All other mechanisms' attributes will be described elsewhere.
New GSS API Function Interfaces
Several new interfaces are given by which, for example, GSS API applications may determine what features are provided by a given mechanism and what mechanisms provide what features.
These new interfaces are all OPTIONAL.
Applications should use GSS Indicate mechs by attrs() instead of GSS Indicate mechs() wherever possible.
Applications can use GSS Indicate mechs by attrs() to determine what, if any, mechanisms provide a given set of features.
GSS Indicate mechs by attrs
() can also be used to indicate (as in GSS Indicate mechs())
the set of available mechanisms of each type (concrete, mechanism negotiation pseudo mechanism, etc.).
Mechanism Attribute Criticality Mechanism attributes may be added at any time.
Not only may attributes be added to the list of known mechanism attributes at any time, but the set of mechanism attributes supported by a mechanism can be changed at any time.
For example, new attributes might be added to reflect whether a mechanism's initiator must contact an online infrastructure and/or whether the acceptor must do so.
In this example, the Kerberos V mechanism would gain a new attribute even though the mechanism itself is not modified.
Applications making use of attributes not defined herein would then have no way of knowing whether a GSS API implementation and its mechanisms know about new mechanism attributes.
To address this problem, GSS Indicate mechs by attrs
() and GSS Inquire attrs for mech() support a notion of critical mechanism attributes.
Applications can search for mechanisms that understand mechanism attributes that are critical to the application, and the application may ask what mechanism attributes are understood by a given mechanism.
GSS Indicate mechs by attrs
desired mech attrs SET OF OBJECT
IDENTIFIER   set of GSS C MA   OIDs that the mechanisms indicated in the mechs output parameter MUST offer.
except mech attrs SET OF OBJECT
IDENTIFIER   set of GSS C MA   OIDs that the mechanisms indicated in the mechs output parameter MUST NOT offer.
critical mech attrs SET OF OBJECT
IDENTIFIER   set of GSS C MA   OIDs that the mechanisms indicated in the mechs output parameter MUST understand (i.e., mechs must know whether critical attributes are or are not supported).
Outputs:  major status INTEGER  minor status INTEGER
IDENTIFIER   set of mechanisms that support the given desired mech attrs but not the except mech attrs, and all of which understand the given critical mech attrs
(the caller must release this output with GSS Release oid set()).
GSS S COMPLETE indicates success; the output mechs parameter MAY be the empty set (GSS C
GSS S FAILURE indicates that the request failed for some other reason.
GSS Indicate mechs by attrs
() returns the set of OIDs corresponding to mechanisms that offer at least the desired mech attrs
but none of the except mech attrs, and that understand all of the attributes listed in critical mech attrs.
When all three sets of OID input parameters are the empty set, this function acts as a version of GSS indicate mechs() that outputs the set of all supported mechanisms.
GSS Inquire attrs for mech
() Inputs:  mech OBJECT IDENTIFIER
mechanism OID Outputs:  major status INTEGER  minor status INTEGER
set of mech attrs OIDs (GSS C MA  ) supported by the mechanism
(the caller must release this output with GSS Release oid set()).
known mech attrs SET OF OBJECT
set of mech attrs OIDs known to the mechanism implementation
(the caller must release this output with GSS Release oid set()).
GSS S COMPLETE indicates success; the output mech attrs parameter MAY be the empty set (GSS C
GSS S BAD MECH indicates that the mechanism named by the mech parameter does not exist or that the mech is GSS C
NO OID and no default mechanism could be determined.
GSS S FAILURE indicates that the request failed for some other reason.
GSS Inquire attrs for mech() indicates the set of mechanism attributes supported by a given mechanism.
() Inputs:  mech attr OBJECT
IDENTIFIER   mechanism attribute OID Outputs:  major status INTEGER  minor status INTEGER  name
name of mechanism attribute (e.g., GSS C MA  ).
a short description of the mechanism attribute (the caller must release this output with GSS Release buffer()).
OCTET STRING   a longer description of the mechanism attribute
(the caller must release this output with GSS Release buffer()).
GSS S COMPLETE indicates success.
GSS S BAD MECH ATTR indicates that the mechanism attribute referenced by the mech attr parameter is unknown to the implementation.
GSS S FAILURE indicates that the request failed for some other reason.
This function can be used to obtain human readable descriptions of GSS API mechanism attributes.
For the C bindings of the GSS API [RFC2744], GSS S BAD MECH ATTR shall have a routine error number of 19 (this is shifted to the left by GSS C ROUTINE ERROR OFFSET).
C Bindings Note that there is a bug in the C bindings of the GSS
[RFC2744] in that the C 'const' attribute is applied to types that are pointer typedefs.
This is a bug because it declares that the pointer argument is 'const' rather than that the object pointed by it is const.
To avoid this error, we hereby define new typedefs, which include const properly: typedef const gss buffer desc
; typedef const struct gss channel bindings struct   gss const channel bindings t; typedef const <platform specific>
id t; typedef const <platform specific>
gss const cred id t;
typedef const <platform specific> gss const name t; typedef const gss OID desc
gss const OID; typedef const gss OID set desc
; Figure 1: const typedefs Note that only gss const OID and gss const OID set are used below.
We include the other const typedefs for convenience since the C bindings of the GSS API do use const with pointer typedefs when it should often instead use the above typedefs instead.
#define GSS S BAD MECH ATTR (19ul
<< GSS C ROUTINE ERROR OFFSET)
Output OID sets must be released via gss release oid set().
Please see Appendix A for a full set of typedef fragments defined in this document and the necessary code license.
All future GSS API mechanism specifications MUST:
list the set of GSS API mechanism attributes associated with them.
The namespace of programming language symbols with names beginning with GSS C MA   is reserved for allocation by IETF Consensus.
IANA allocated a base OID, as an arc of 1.3.6.1.5.5, for the set of GSS C MA   described herein, and registered all of the GSS C MA   values described in Section 3.2.
This document specifies extensions to a security related API.
It imposes new requirements on future GSS API mechanisms, and the specifications of future protocols that use the GSS API should make reference to this document where applicable.
The ability to inquire about specific properties of mechanisms should improve security.
The semantics of each mechanism attribute may include a security component.
Application developers must understand that mechanism attributes may be added at any time   both to the set of known mechanism attributes as well as to existing mechanisms' sets of supported mechanism attributes.
Therefore, application developers using the APIs described herein must understand what mechanism attributes their applications depend critically on, and must use the mechanism attribute criticality features of these APIs.
Appendix A.  Typedefs and C Bindings
This appendix contains the full set of code fragments defined in this document.
Copyright (c) 2009 IETF Trust and the persons identified as authors of the code.
Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
Neither the name of Internet Society, IETF or IETF Trust, nor the names of specific contributors, may be used to endorse or promote products derived from this software without specific prior written permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
typedef const gss buffer desc
; typedef const struct gss channel bindings struct   gss const channel bindings t; typedef const <platform specific>
id t; typedef const <platform specific>
gss const cred id t;
typedef const <platform specific> gss const name t; typedef const gss OID desc
gss const OID; typedef const gss OID set desc
gss const OID set; #define GSS S BAD MECH ATTR (19ul
<< GSS C ROUTINE ERROR OFFSET)
