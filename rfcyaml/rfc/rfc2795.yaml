- title: __initial_text__
  contents:
  - '               The Infinite Monkey Protocol Suite (IMPS)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo describes a protocol suite which supports an infinite\n\
    \   number of monkeys that sit at an infinite number of typewriters in\n   order\
    \ to determine when they have either produced the entire works of\n   William\
    \ Shakespeare or a good television show.  The suite includes\n   communications\
    \ and control protocols for monkeys and the\n   organizations that interact with\
    \ them.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction . . . . . . . . . . . . . . . . . . . .\
    \ . . .  2\n   2. Objects In The Suite . . . . . . . . . . . . . . . . . . . \
    \ 2\n   3. IMPS Packet Structure  . . . . . . . . . . . . . . . . . .  4\n   4.\
    \ Infinite Threshold Accounting Gadget (I-TAG) Encoding  . .  5\n   5. KEEPER\
    \ Specification . . . . . . . . . . . . . . . . . . .  6\n    5.1 KEEPER Message\
    \ Request Codes (ZOO-to-SIMIAN) . . . . . .  7\n    5.2 KEEPER Message Response\
    \ Codes (SIMIAN-to-ZOO)  . . . . .  8\n    5.3 Requirements for KEEPER Request\
    \ and Response Codes . . .  8\n    5.4 Example ZOO-to-SIMIAN Exchanges using KEEPER\
    \ . . . . . .  9\n   6. CHIMP Specification  . . . . . . . . . . . . . . . . .\
    \ . .  9\n    6.1 SIMIAN Client Requests . . . . . . . . . . . . . . . . . 10\n\
    \    6.2 ZOO Server Responses . . . . . . . . . . . . . . . . . . 11\n    6.3\
    \ Example SIMIAN-to-ZOO Session using CHIMP  . . . . . . . 11\n   7. IAMB-PENT\
    \ SPECIFICATION  . . . . . . . . . . . . . . . . . 12\n    7.1 ZOO Client Requests\
    \  . . . . . . . . . . . . . . . . . . 12\n    7.2 BARD Responses . . . . . .\
    \ . . . . . . . . . . . . . . . 12\n    7.3 Example ZOO-to-BARD Session using\
    \ IAMB-PENT  . . . . . . 13\n   8. PAN Specification  . . . . . . . . . . . .\
    \ . . . . . . . . 13\n    8.1 ZOO Requests . . . . . . . . . . . . . . . . . .\
    \ . . . . 14\n    8.2 CRITIC Responses . . . . . . . . . . . . . . . . . . . .\
    \ 14\n    8.3 Table of CRITIC Reject Codes . . . . . . . . . . . . . . 15\n  \
    \  8.4 Example ZOO-to-CRITIC Session using PAN  . . . . . . . . 16\n   9. Security\
    \ Considerations  . . . . . . . . . . . . . . . . . 16\n   10. Acknowledgements\
    \  . . . . . . . . . . . . . . . . . . . . 18\n   11. References  . . . . . .\
    \ . . . . . . . . . . . . . . . . . 18\n   12. Author's Address  . . . . . . .\
    \ . . . . . . . . . . . . . 19\n   13. Full Copyright Statement . . . . . . .\
    \ . . . . . . . . . .20\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   It has been posited that if an infinite number of monkeys\
    \ sit at an\n   infinite number of typewriters and randomly press keys, they will\n\
    \   eventually produce the complete works of Shakespeare [1] [2].  But if\n  \
    \ such a feat is accomplished, how would anybody be able to know?  And\n   what\
    \ if the monkey has flawlessly translated Shakespeare's works into\n   Esperanto?\
    \  How could one build a system that obtains these works\n   while addressing\
    \ the basic needs of monkeys, such as sleep and food?\n   Nobody has addressed\
    \ the practical implications of these important\n   questions [3].\n   In addition,\
    \ it would be a waste of resources if such a sizable\n   effort only focused on\
    \ Shakespeare.  With an infinite number of\n   monkeys at work, it is also equally\
    \ likely that a monkey could\n   produce a document that describes how to end\
    \ world poverty, cure\n   disease, or most importantly, write a good situation\
    \ comedy for\n   television [4].  Such an environment would be ripe for innovation\n\
    \   and, with the proper technical design, could be effectively utilized\n   to\
    \ \"make the world a whole lot brighter\" [5].\n   The Infinite Monkey Protocol\
    \ Suite (IMPS) is an experimental set of\n   protocols that specifies how monkey\
    \ transcripts may be collected,\n   transferred, and reviewed for either historical\
    \ accuracy (in the case\n   of Shakespearean works) or innovation (in the case\
    \ of new works).  It\n   also provides a basic communications framework for performing\
    \ normal\n   monkey maintenance.\n"
- title: 2. Objects in the Suite
  contents:
  - "2. Objects in the Suite\n   There are four primary entities that communicate\
    \ within an IMPS\n   network.  Groups of monkeys are physically located in Zone\
    \ Operations\n   Organizations (ZOOs).  The ZOOs maintain the monkeys and their\n\
    \   equipment, obtain transcripts from the monkeys' typewriters, and\n   interact\
    \ with other entities who evaluate the transcripts.\n   A SIMIAN (Semi-Integrated,\
    \ Monkey-Interfacing Anthropomorphic Node)\n   is a device that is physically\
    \ attached to the monkey.  It provides\n   the communications interface between\
    \ a monkey and its ZOO.  It is\n   effectively a translator for the monkey.  It\
    \ sends status reports and\n   resource requests to the ZOO using human language\
    \ phrases, and\n   responds to ZOO requests on behalf of the monkey.\n   The SIMIAN\
    \ uses the Cross-Habitat Idiomatic Message Protocol (CHIMP)\n   to communicate\
    \ with the ZOO.  The ZOO uses the Knowledgeable and\n   Efficient Emulation Protocol\
    \ for Ecosystem Resources (KEEPER) to\n   interact with the SIMIAN.\n   The ZOO\
    \ obtains typewriter transcripts from the SIMIAN, which is\n   responsible for\
    \ converting the monkey's typed text into an electronic\n   format if non-digital\
    \ typewriters are used.  The ZOO may then forward\n   the transcripts to one or\
    \ more entities who review the transcript's\n   contents.  IMPS defines two such\
    \ reviewer protocols, although others\n   could be added.\n   For Shakespearean\
    \ works, as well as any other classic literature that\n   has already been published,\
    \ the ZOO forwards the transcript to a BARD\n   (Big Annex of Reference Documents).\
    \  The BARD determines if a\n   transcript matches one or more documents in its\
    \ annex.  The ZOO sends\n   the transcript to a BARD using the Inter-Annex Message\
    \ Broadcasting\n   Protocol for Evaluating Neoclassical Transcripts (IAMB-PENT).\
    \  The\n   transcripts are considered Neoclassical because (a) they are\n   transferred\
    \ in electronic media instead of the original paper medium,\n   and (b) the word\
    \ \"classical\" does not begin with the letter N.\n   For new and potentially\
    \ innovative works, the ZOO submits a\n   transcript to a CRITIC (Collective Reviewer's\
    \ Innovative Transcript\n   Integration Center).  The CRITIC determines if a transcript\
    \ is\n   sufficiently innovative to be published.  The ZOO uses the Protocol\n\
    \   for Assessment of Novelty (PAN) to communicate with the CRITIC.  The\n   process\
    \ of using PAN to send a transcript to a CRITIC is sometimes\n   referred to as\
    \ foreshadowing.\n   A diagram of IMPS concepts is provided below.  Non-technical\
    \ readers\n   such as mid-level managers, marketing personnel, and liberal arts\n\
    \   majors are encouraged to skip the next two sections.  The rest of\n   this\
    \ document assumes that senior management has already stopped\n   reading.\n \
    \           -+-+-+-+-+-   CHIMP     -+-+-+-+-+-\n            | SIMIAN/ | ---------->\
    \ *         *\n            | MONKEY  |             *   ZOO   *\n            |\
    \         | <---------- *         *\n            -+-+-+-+-+-    KEEPER   -+-+-+-+-+-\n\
    \                           /    \\\n                          /      \\\n   \
    \            IAMB-PENT /        \\ PAN\n                        /          \\\n\
    \                       V            V\n                -+-+-+-+-+-     -+-+-+-+-+-\n\
    \                *         *     *         *\n                *  BARD   *    \
    \ *  CRITIC *\n                *         *     *         *\n                -+-+-+-+-+-\
    \     -+-+-+-+-+-\n"
- title: 3. IMPS Packet Structure
  contents:
  - "3. IMPS Packet Structure\n   All IMPS protocols must utilize the following packet\
    \ structure.\n    |-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+--|\n    |Version\
    \ | Seq  # | Protocol # | Reserved  | Size  |\n    |-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+--|\n\
    \    |         Source        |      Destination         |\n    |-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+--|\n\
    \    |           Data                        | Padding  |\n    |-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+--|\n\
    \   The Version, Sequence Number, Protocol Number, and Reserved fields\n   are\
    \ 32 bit unsigned integers.  For IMPS version 1.0, the Version must\n   be 1.\
    \  Reserved must be 0 and will always be 0 in future uses.  It is\n   included\
    \ because every other protocol specification includes a\n   \"future use\" reserved\
    \ field which never, ever changes and is\n   therefore a waste of bandwidth and\
    \ memory. [6] [7] [8].\n   The Source and Destination are identifiers for the\
    \ IMPS objects that\n   are communicating.  They are represented using Infinite\
    \ TAGs (see\n   next section).\n   The Data section contains data which is of\
    \ arbitrary length.\n   The Size field records the size of the entire packet using\
    \ Infinite\n   TAG encoding.\n   The end of the packet may contain extra padding,\
    \ between 0 and 7\n   bits, to ensure that the size of packet is rounded out to\
    \ the next\n   byte.\n"
- title: 4. Infinite Threshold Accounting Gadget (I-TAG) Encoding
  contents:
  - "4. Infinite Threshold Accounting Gadget (I-TAG) Encoding\n   Each SIMIAN requires\
    \ a unique identifier within IMPS.  This section\n   describes design considerations\
    \ for the IMPS identifier, referred to\n   as an Infinite Threshold Accounting\
    \ Gadget (I-TAG).  The I-TAG can\n   represent numbers of any size.\n   To uniquely\
    \ identify each SIMIAN, a system is required that is\n   capable of representing\
    \ an infinite number of identifiers.  The set\n   of all integers can be used\
    \ as a compact representation.  However,\n   all existing protocols inherently\
    \ limit the number of available\n   integers by specifying a maximum number of\
    \ bytes to be used for an\n   integer.  This approach cannot work well in an IMPS\
    \ network with an\n   infinite number of monkeys to manage.\n   Practically speaking,\
    \ one could select a byte size which could\n   represent an integer that is greater\
    \ than the number of atoms in the\n   known universe.  There are several limitations\
    \ to this approach,\n   however: (a) it would needlessly exclude IMPS implementations\
    \ that\n   may utilize sub-atomic monkeys and/or multiple universes; (b) there\n\
    \   is not a consensus as to how many atoms there are in this universe;\n   and\
    \ (c) while the number is extremely large, it still falls pitifully\n   short\
    \ of infinity.  Since any entity that fully implements IMPS is\n   probably very,\
    \ very good at handling infinite numbers, IMPS must\n   ensure that it can represent\
    \ them.\n   Netstrings, i.e. strings which encode their own size, were\n   considered.\
    \  However, netstrings have not been accepted as a\n   standard, and they do not\
    \ scale to infinity.  As stated in [9],\n   \"[Greater than] 999999999 bytes is\
    \ bad.\"  Well put.\n   A scheme for identifying arbitrary dates was also considered\
    \ for\n   implementation [10].  While it solves the Y10K problem and does scale\n\
    \   to infinity, its ASCII representation wastes memory by a factor\n   greater\
    \ than 8.  While this may not seem important in an environment\n   that has enough\
    \ resources to support an infinite number of monkeys,\n   it is inelegant for\
    \ the purpose of monkey identification.  It is also\n   CPU intensive to convert\
    \ such a representation to a binary number (at\n   least based on the author's\
    \ implementation, which was written in a\n   combination of LISP, Perl, and Java).\
    \  The algorithm is complicated\n   and could lead to incorrect implementations.\
    \  Finally, the author of\n   this document sort of forgot about that RFC until\
    \ it was too late to\n   include it properly, and was already emotionally attached\
    \ to the I-\n   TAG idea anyway.  It should be noted, however, that if a monkey\
    \ had\n   typed this particular section and it was submitted to a CRITIC, it\n\
    \   would probably receive a PAN rejection code signifying the\n   reinvention\
    \ of the wheel.\n   Since there is no acceptable representation for I-TAGs available,\
    \ one\n   is defined below.\n   An I-TAG is divided into three sections:\n   \
    \           |-+-+-+-+-+-+-+-+-+-|-+-+-+-+-+-+-|-+-+-+-+-+-+|\n              |\
    \    META-SIZE      |    SIZE     |     ID     |\n              |-+-+-+-+-+-+-+-+-+-|-+-+-+-+-+-+-|-+-+-+-+-+-+|\n\
    \   SIZE specifies how many bytes are used to represent the ID, which is\n   an\
    \ arbitrary integer.  META-SIZE specifies an upper limit on how many\n   bits\
    \ are used to represent SIZE.\n   META-SIZE is an arbitrary length sequence of\
    \ N '1' bits terminated by\n   a '0' bit, i.e. it has the form:\n       11111...1110\n\
    \   where N is the smallest number such that 2^N exceeds the number of\n   bits\
    \ required to represent the number of bytes that are necessary to\n   store the\
    \ ID (i.e., SIZE).\n   The SIZE is then encoded using N bits, ordered from the\
    \ most\n   significant bit to the least significant bit.\n   Finally, the ID is\
    \ encoded using SIZE bytes.\n   This representation, while clunky, makes efficient\
    \ use of memory and\n   is scalable to infinity.  For any number X which is less\
    \ than 2^N\n   (for any N), a maximum of (N + log(N) + log(log(N)))/8 bytes is\n\
    \   necessary to represent X.  The math could be slightly incorrect, but\n   it\
    \ sounds right.\n   A remarkable, elegant little C function was written to implement\
    \ I-\n   TAG processing, but it has too many lines of code to include in this\n\
    \   margin [11].\n"
- title: 5. KEEPER Specification
  contents:
  - "5. KEEPER Specification\n   Following is a description of the Knowledgeable and\
    \ Efficient\n   Emulation Protocol for Ecosystem Resources (KEEPER), which the\
    \ ZOO\n   uses to communicate with the SIMIAN.  The IMPS protocol number for\n\
    \   KEEPER is 1.\n   KEEPER is a connectionless protocol.  The ZOO sends a request\
    \ to the\n   SIMIAN using a single IMPS packet.  The SIMIAN sends a response back\n\
    \   to the ZOO with another IMPS packet.  The data portion of the packet\n   is\
    \ of the following form:\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Version  | Type | Message ID    | Message Code  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Version, Type, Message ID, and Message are all 16-bit integers.\n   Version\
    \ = the version of KEEPER being used (in this document, the\n             version\
    \ is 1)\n   Type = the type of message being sent.  '0' is a request; '1' is a\n\
    \          response\n   Message ID = a unique identifier to distinguish different\
    \ messages\n   Message Code = the specific message being sent\n   When a ZOO sends\
    \ a KEEPER request, the SIMIAN must send a KEEPER\n   response which uses the\
    \ same Message ID as the original request.\n"
- title: 5.1 KEEPER Message Request Codes (ZOO-to-SIMIAN)
  contents:
  - "5.1 KEEPER Message Request Codes (ZOO-to-SIMIAN)\n    CODE    NAME       DESCRIPTION\n\
    \   +-----------------------------------------------------------+\n   | 0    |\
    \ RESERVED | Reserved                                |\n   +-----------------------------------------------------------+\n\
    \   | 1    | STATUS   | Determine status of monkey              |\n   +-----------------------------------------------------------+\n\
    \   | 2    | HEARTBEAT| Check to see if monkey has a heartbeat  |\n   +-----------------------------------------------------------+\n\
    \   | 3    | WAKEUP   | Wake up monkey                          |\n   +-----------------------------------------------------------+\n\
    \   | 4    | TYPE     | Make sure monkey is typing              |\n   +-----------------------------------------------------------+\n\
    \   | 5    | FASTER   | Monkey must type faster                 |\n   +-----------------------------------------------------------+\n\
    \   | 6    |TRANSCRIPT| Send transcript                         |\n   +-----------------------------------------------------------+\n\
    \   | 7    | STOP     | Stop all monkey business                |\n   +-----------------------------------------------------------+\n\
    \   |8-512 | FUTURE   | Reserved for future use                 |\n   +-----------------------------------------------------------+\n\
    \   | 513+ | USER     | User defined                            |\n   +-----------------------------------------------------------+\n"
- title: 5.2 KEEPER Message Response Codes (SIMIAN-to-ZOO)
  contents:
  - "5.2 KEEPER Message Response Codes (SIMIAN-to-ZOO)\n    CODE    NAME       DESCRIPTION\n\
    \   +-------------------------------------------------------------+\n   | 0  \
    \  | RESERVED | Reserved                                  |\n   +-------------------------------------------------------------+\n\
    \   | 1    | ASLEEP   | Status: Monkey is asleep                  |\n   +-------------------------------------------------------------+\n\
    \   | 2    | GONE     | Status: Monkey is not at typewriter       |\n   +-------------------------------------------------------------+\n\
    \   | 3    |DISTRACTED| Status: Monkey is distracted (not typing) |\n   +-------------------------------------------------------------+\n\
    \   | 4    |NORESPONSE| Status: Monkey is not responding          |\n   +-------------------------------------------------------------+\n\
    \   | 5    | ALIVE    | Status: Monkey is alive                   |\n   +-------------------------------------------------------------+\n\
    \   | 6    | DEAD     | Status: Monkey is dead                    |\n   +-------------------------------------------------------------+\n\
    \   | 7    | ACCEPT   | Monkey accepts request                    |\n   +-------------------------------------------------------------+\n\
    \   | 8    | REFUSE   | Monkey refuses request                    |\n   +-------------------------------------------------------------+\n\
    \   | 9-512| FUTURE   | Reserved for future use                   |\n   +-------------------------------------------------------------+\n\
    \   | 513+ | USER     | User defined                              |\n   +-------------------------------------------------------------+\n"
- title: 5.3 Requirements for KEEPER Request and Response Codes
  contents:
  - "5.3 Requirements for KEEPER Request and Response Codes\n   Below are the requirements\
    \ for request and response codes within\n   KEEPER.\n   1. A SIMIAN must respond\
    \ to a STATUS request with an ALIVE, DEAD,\n   ASLEEP, GONE, DISTRACTED, or NORESPONSE\
    \ code.\n   2. A SIMIAN must respond to a HEARTBEAT request with an ALIVE or DEAD\n\
    \   code.  SIMIAN implementors must be careful when checking the\n   heartbeat\
    \ of very relaxed monkeys who practice transcendental\n   meditation or yoga,\
    \ as they may appear DEAD even if they are still\n   alive.\n   3. A SIMIAN must\
    \ respond to a STOP request with a NORESPONSE, ALIVE,\n   DEAD, or GONE code.\
    \  How a SIMIAN stops the monkey is\n   implementation-specific.  However, the\
    \ SIMIAN should preserve the\n   monkey's ALIVE status to protect the ZOO from\
    \ being shut down by\n   authorities or animal rights groups.  If the monkey is\
    \ present but\n   the SIMIAN interface is unable to verify whether the monkey\
    \ is ALIVE\n   or DEAD, then it must use a NORESPONSE.\n   4. A SIMIAN should\
    \ respond to a TYPE or FASTER request with an ACCEPT\n   code, especially if there\
    \ are deadlines.  The only other allowed\n   responses are REFUSE, ASLEEP, GONE,\
    \ NORESPONSE, or DEAD.  This\n   protocol does not define what actions should\
    \ be taken if a SIMIAN\n   responds with REFUSE, although a BRIBE_BANANA command\
    \ may be added in\n   future versions.\n   5. A SIMIAN must respond to a WAKEUP\
    \ request with ACCEPT, REFUSE,\n   GONE, NORESPONSE, or DEAD.\n   6. A SIMIAN\
    \ must respond to a TRANSCRIPT request by establishing a\n   CHIMP session to\
    \ send the transcript to the ZOO.\n"
- title: 5.4 Example ZOO-to-SIMIAN Exchanges using KEEPER
  contents:
  - "5.4 Example ZOO-to-SIMIAN Exchanges using KEEPER\n   Assume a ZOO (SanDiego)\
    \ must interact with a monkey named BoBo.\n   Using KEEPER, SanDiego would interface\
    \ with BoBo's SIMIAN (BoBoSIM).\n   The following exchange might take place if\
    \ BoBo begins to evolve\n   self-awareness and independence.\n   SanDiego> STATUS\n\
    \   BoBoSIM>  DISTRACTED\n   SanDiego> TYPE\n   BoBoSIM>  REFUSE\n   SanDiego>\
    \ TYPE\n   BoBoSIM>  REFUSE\n   SanDiego> TYPE\n   BoBoSIM>  GONE\n   The following\
    \ exchange might take place early in the morning, if\n   BoBo was being poorly\
    \ maintained and was working at its typewriter\n   very late the night before.\n\
    \   SanDiego> WAKEUP\n   BoBoSIM>  NORESPONSE\n   SanDiego> WAKEUP\n   BoBoSIM>\
    \  NORESPONSE\n   SanDiego> WAKEUP\n   BoBoSIM>  NORESPONSE\n   SanDiego> HEARTBEAT\n\
    \   BoBoSIM>  DEAD\n   SanDiego> TRANSCRIPT\n"
- title: 6. CHIMP Specification
  contents:
  - "6. CHIMP Specification\n   Following is a description of the Cross-Habitat Idiomatic\
    \ Message\n   Protocol (CHIMP), which the SIMIAN uses to communicate with the\
    \ ZOO.\n   The IMPS protocol number for CHIMP is 2.\n   CHIMP is a connection-oriented\
    \ protocol.  A SIMIAN (the \"client\")\n   sends a series of requests to the ZOO\
    \ (the \"server\"), which sends\n   replies back to the SIMIAN.\n"
- title: 6.1. SIMIAN Client Requests
  contents:
  - "6.1. SIMIAN Client Requests\n   SEND <resource>\n     The SIMIAN is requesting\
    \ a specific resource.  The resource\n     may be FOOD, WATER, MEDICINE, VETERINARIAN,\
    \ or TECHNICIAN.\n     The SIMIAN makes requests for FOOD or WATER by interpreting\n\
    \     the monkey's behavior and environment, e.g. its food dish.  It\n     requests\
    \ MEDICINE or VETERINARIAN if it observes that the\n     monkey's health is declining\
    \ in any way, e.g. carpal tunnel\n     syndrome or sore buttocks.  How the SIMIAN\
    \ determines health\n     is implementation-specific.  In cases where the SIMIAN\
    \ itself\n     may be malfunctioning, it may request a TECHNICIAN.\n   REPLACE\
    \ <item>\n     The ZOO must replace an item that is used by the monkey during\n\
    \     typing activities.  The item to be replaced may be TYPEWRITER,\n     PAPER,\
    \ RIBBON, CHAIR, TABLE, or MONKEY.\n   CLEAN <item>\n     The SIMIAN is requesting\
    \ that the ZOO must clean an item.  The\n     item may be CHAIR, TABLE, or MONKEY.\
    \  How the ZOO cleans the\n     item is implementation-specific.  This command\
    \ is identified\n     in the protocol because it has been theorized that if an\n\
    \     infinite number of monkeys sit at an infinite number of\n     typewriters,\
    \ the smell would be unbearable [12].  If this\n     theory is proven true, then\
    \ CLEAN may become the most critical\n     command in the entire protocol suite.\n\
    \   NOTIFY <status>\n     The SIMIAN notifies the ZOO of the monkey's status.\
    \  The status\n     may be any status as defined in the KEEPER protocol,\n   \
    \  i.e. ASLEEP, GONE, DISTRACTED, NORESPONSE, ALIVE, or DEAD.\n   TRANSCRIPT <size>\n\
    \     The SIMIAN notifies the ZOO of a new transcript from the monkey.\n     The\
    \ number of characters in the transcript is specified in the\n     size parameter.\n\
    \   BYE\n     The SIMIAN is terminating the connection.\n"
- title: 6.2. ZOO Server Responses
  contents:
  - "6.2. ZOO Server Responses\n   HELO <free text>\n     Upon initial connection,\
    \ the ZOO must send a HELO reply.\n   ACCEPT\n     The ZOO will fulfill the SIMIAN's\
    \ request.\n   DELAY\n     The ZOO will fulfill the SIMIAN's request at a later\
    \ time.\n   REFUSE\n     The ZOO refuses to fulfill the SIMIAN's request.\n  \
    \ RECEIVED\n     The ZOO has received the full text of a transcript that has been\n\
    \     submitted by the SIMIAN.\n"
- title: 6.3 Example SIMIAN-to-ZOO Session using CHIMP
  contents:
  - "6.3 Example SIMIAN-to-ZOO Session using CHIMP\n   Assume a monkey BoBo with a\
    \ SIMIAN interface named BoBoSIM, and a ZOO\n   named SanDiego.  Once the BoBoSIM\
    \ client has established a connection\n   to the SanDiego server, the following\
    \ session might take place.\n      SanDiego> HELO CHIMP version 1.0 4/1/2000\n\
    \      BoBoSIM> REPLACE PAPER\n      SanDiego> ACCEPT\n      BoBoSIM>  TRANSCRIPT\
    \ 87\n      SanDiego> ACCEPT\n      BoBoSIM>  xvkxvn i hate Binky xFnk , feEL\
    \ hungry and sIck sbNf\n      BoBoSIM>  so so sad sDNfkodgv .,n.,  ,HELP MEEEEEEEEE\
    \ cv.Cvn l\n      SanDiego> RECEIVED\n      BoBoSIM>  SEND FOOD\n      SanDiego>\
    \ ACCEPT\n      BoBoSIM>  SEND MEDICINE\n      SanDiego> DELAY\n      BoBoSIM>\
    \  SEND VETERINARIAN\n      SanDiego> REFUSE\n      BoBoSIM>  SEND VETERINARIAN\n\
    \      SanDiego> REFUSE\n      BoBoSIM>  NOTIFY NORESPONSE\n      SanDiego> ACCEPT\n\
    \      BoBoSIM>  NOTIFY DEAD\n      SanDiego> ACCEPT\n      BoBoSIM>  REPLACE\
    \ MONKEY\n      SanDiego> ACCEPT\n"
- title: 7. IAMB-PENT Specification
  contents:
  - "7. IAMB-PENT Specification\n   Following is a description of the Inter-Annex\
    \ Message Broadcasting\n   Protocol for Evaluating Neoclassical Transcripts (IAMB-PENT),\
    \ which a\n   ZOO uses to send transcripts to a BARD.  The IMPS protocol number\
    \ is\n   5.\n   IAMB-PENT is a connection-oriented protocol.  A ZOO (the \"client\"\
    )\n   sends a transcript phrases to the BARD (the \"server\"), which\n   evaluates\
    \ the transcript and notifies the ZOO if the transcript\n   matches all of a classical\
    \ work or a portion thereof.\n"
- title: 7.1. ZOO Client Requests
  contents:
  - "7.1. ZOO Client Requests\n   RECEIVETH <transcript name>\n     The ZOO notifies\
    \ the BARD of a new transcript to be evaluated.\n     The name of the transcript\
    \ is provided.\n   ANON <size>\n     The ZOO notifies the BARD that a transcript\
    \ of the given size is\n     to be provided soon.  The text of the transcript\
    \ is then sent.\n   ABORTETH <A2> <U3> <A3> <U4> <A4> <U5> <A5>\n     The ZOO\
    \ notifies the BARD that it is about to close the\n     connection.  The ZOO must\
    \ specify a closing message.  A2, A3,\n     A4, and A5 must be accented syllables.\
    \  U3, U4, and U5 must not\n     be accented.\n"
- title: 7.2 BARD Responses
  contents:
  - "7.2 BARD Responses\n    HARK <U1> <A2> <U3> <A3> <U4> <A4> <U5> <A5>\n      When\
    \ the ZOO establishes a connection, the BARD must send a HARK\n      command.\
    \  A2, A3, A4, and A5 must be accented syllables.  U1,\n      U2, U3, U4, and\
    \ U5 must not be accented.\n    PRITHEE <A2> <U3> <A3> <U4> <A4> <U5> <A5>\n \
    \     When a ZOO uses a RECEIVETH command to specify a forthcoming\n      transcript,\
    \ the BARD must respond with a PRITHEE.  A2, A3, A4,\n      and A5 must be accented\
    \ syllables.  U3, U4, and U5 must not be\n      accented.\n    REGRETTETH <A2>\
    \ <U3> <A3> <U4> <A4> <U5> <A5>\n      If the BARD does not have the transcript\
    \ in its Annex, it uses\n      the REGRETTETH command to notify the ZOO.  A2,\
    \ A3, A4, and A5\n      must be accented syllables.  U3, U4, and U5 must not be\n\
    \      accented.\n   ACCEPTETH  <A2> <U3> <A3> <U4> <A4> <U5> <A5>\n      If the\
    \ BARD has located the transcript in its Annex, it uses the\n      ACCEPTETH command\
    \ to notify the ZOO.  A2, A3, A4, and A5\n      must be accented syllables.  U3,\
    \ U4, and U5 must not be\n      accented.\n"
- title: 7.3 Example ZOO-to-BARD Session using IAMB-PENT
  contents:
  - "7.3 Example ZOO-to-BARD Session using IAMB-PENT\n   This is a sample IAMB-PENT\
    \ session in which a ZOO (SanDiego) sends a\n   transcript to a BARD (William).\n\
    \     William> HARK now, what light through yonder window breaks?\n     SanDiego>\
    \ RECEIVETH TRANSCRIPT SanDiego.BoBo.17\n     William> PRITHEE thy monkey's wisdom\
    \ poureth forth!\n     SanDiego> ANON 96\n     SanDiego> I must be cruel, only\
    \ to be kind.  Thus bad begins,\n               and worse remains in front.\n\
    \     William> REGRETTETH none hath writ thy words before\n     SanDiego> ABORTETH\
    \ Fate may one day bless my zone\n"
- title: 8. PAN Specification
  contents:
  - "8. PAN Specification\n   Following is a description of the Protocol for Assessment\
    \ of Novelty\n   (PAN).  A ZOO uses PAN to send monkey transcripts for review\
    \ by a\n   CRITIC.  The IMPS protocol number for PAN is 10 [13].\n   PAN is a\
    \ connection-oriented protocol.  A ZOO (the \"unwashed masses\")\n   sends a request\
    \ to the CRITIC (the \"all-powerful\"), which sends a\n   response back to the\
    \ ZOO.\n"
- title: 8.1. ZOO Requests
  contents:
  - "8.1. ZOO Requests\n   COMPLIMENT <text>\n     The ZOO may say something nice\
    \ to the CRITIC using the given\n     text.  The CRITIC does not respond to the\
    \ compliment within the\n     protocol.  However, it is generally believed that\
    \ the CRITIC is\n     more likely to accept a new transcript when a ZOO uses many\n\
    \     compliments.\n   TRANSCRIPT <name> <size>\n     The ZOO notifies the CRITIC\
    \ of a new transcript for review.\n     The name of the transcript, plus the number\
    \ of characters, are\n     specified as parameters to this request.  The text\
    \ of the\n     transcript is then sent.\n   THANKS\n     This is an indicator\
    \ that a ZOO is about to terminate the\n     connection.\n"
- title: 8.2. CRITIC Responses
  contents:
  - "8.2. CRITIC Responses\n   SIGH <insult>\n     When the ZOO establishes a connection,\
    \ the CRITIC must respond\n     with a SIGH and an optional insult.\n   IMPRESS_ME\n\
    \     A CRITIC must respond with an IMPRESS_ME once a ZOO has made a\n     TRANSCRIPT\
    \ request.\n   REJECT <code> REJECT 0 <text>\n     When a transcript has been\
    \ received, the CRITIC must respond\n     with a REJECT and a code that indicates\
    \ the reason for\n     rejection.  A table of rejection codes is provided below.\
    \  When\n     the code is 0, the CRITIC may respond using free text.  A CRITIC\n\
    \     may send a REJECT before it has received or processed the full\n     text\
    \ of the transcript.\n   DONT_CALL_US_WE'LL_CALL_YOU\n     The CRITIC makes this\
    \ statement before terminating the\n     connection.\n   GRUDGING_ACCEPTANCE\n\
    \     THIS RESPONSE IS NOT SUPPORTED IN THIS VERSION OF PAN.  The\n     Working\
    \ group for the Infinite Monkey Protocol Suite (WIMPS)\n     agreed that it is\
    \ highly unlikely that a CRITIC will ever use\n     this response when a REJECT\
    \ is available.  It is only included\n     as an explanation to implementors who\
    \ do not fully understand\n     how CRITICs work.  In time, it is possible that\
    \ a CRITIC may\n     evolve (in much the same way that a monkey might).  Should\
    \ such\n     a time ever come, the WIMPS may decide to support this response\n\
    \     in later versions of PAN.\n"
- title: 8.3. Table of CRITIC Reject Codes
  contents:
  - "8.3. Table of CRITIC Reject Codes\n   CODE  DESCRIPTION\n   -------------------------------------------------------------------\n\
    \   | 0 | <Encrypted response following; see below>\n   -------------------------------------------------------------------\n\
    \   | 1 | \"You're reinventing the wheel.\"\n   -------------------------------------------------------------------\n\
    \   | 2 | \"This will never, ever sell.\"\n   -------------------------------------------------------------------\n\
    \   | 3 | \"Huh?  I don't understand this at all.\"\n   -------------------------------------------------------------------\n\
    \   | 4 | \"You forgot one little obscure reference from twenty years\n   |  \
    \ |  ago that renders your whole idea null and void.\"\n   -------------------------------------------------------------------\n\
    \   | 5 | \"Due to the number of submissions, we could not accept every\n   |\
    \   |  transcript.\"\n   -------------------------------------------------------------------\n\
    \   | 6 | \"There aren't enough charts and graphs.  Where is the color?\"\n  \
    \ -------------------------------------------------------------------\n   | 7\
    \ | \"I'm cranky and decided to take it out on you.\"\n   -------------------------------------------------------------------\n\
    \   | 8 | \"This is not in within the scope of what we are looking for.\"\n  \
    \ -------------------------------------------------------------------\n   | 9\
    \ | \"This is too derivative.\"\n   -------------------------------------------------------------------\n\
    \   |10 | \"Your submission was received after the deadline.  Try again\n   |\
    \   |  next year.\"\n   -------------------------------------------------------------------\n\
    \   If the CRITIC uses a reject code of 0, then the textual response\n   must\
    \ use an encryption scheme that is selected by the CRITIC.\n   Since the PAN protocol\
    \ does not specify how a ZOO may determine\n   what scheme is being used, the\
    \ ZOO might not be able to understand\n   the CRITIC's response.\n"
- title: 8.4. Example ZOO-to-CRITIC Session using PAN
  contents:
  - "8.4. Example ZOO-to-CRITIC Session using PAN\n   Below is a sample session from\
    \ a ZOO (SanDiego) to a CRITIC\n   (NoBrainer).\n     NoBrainer> SIGH Abandon\
    \ hope all who enter here\n     SanDiego> COMPLIMENT We love your work.  Your\
    \ words are like\n     SanDiego> COMPLIMENT jewels and you are always correct.\n\
    \     SanDiego> TRANSCRIPT RomeoAndJuliet.BoBo.763 251\n     NoBrainer> IMPRESS_ME\n\
    \     SanDiego> Two households, both alike in dignity,\n     SanDiego> In fair\
    \ Verona, where we lay our scene,\n     SanDiego> From ancient grudge break to\
    \ new mutiny,\n     SanDiego> Where civil blood makes civil hands unclean.\n \
    \    SanDiego> From forth the fatal loins of these two foes\n     SanDiego> A\
    \ pair of star-cross'd lovers take their life;\n     NoBrainer> REJECT 2    (\"\
    This will never, ever sell.\")\n     SanDiego> THANKS\n     NoBrainer> DONT_CALL_US_WE'LL_CALL_YOU\n"
- title: 9. Security Considerations
  contents:
  - "9. Security Considerations\n   In accordance with the principles of the humane\
    \ treatment of\n   animals, the design of IMPS specifically prohibits the CRITIC\
    \ from\n   contacting the SIMIAN directly and hurting its feelings.  BARDs\n \
    \  and CRITICs are also separated because of fundamental\n   incompatibilities\
    \ and design flaws.\n   The security considerations for the rest of IMPS are similar\
    \ to\n   those for the original Internet protocols.  Specifically, IMPS\n   refuses\
    \ to learn from the mistakes of the past and blithely\n   repeats the same errors\
    \ without batting an eye.  Spoofing and\n   denial of service attacks abound if\
    \ untrusted entities gain access\n   to an IMPS network.  Since all transmissions\
    \ occur in cleartext\n   without encryption, innovative works are subject to theft,\
    \ which\n   is not a significant problem unless the network contains entities\n\
    \   other than CRITICs.  The open nature of BARDs with respect to\n   IAMB-PENT\
    \ messages allows a BARD to borrow heavily from\n   transmitted works, but by\
    \ design BARDs are incapable of stealing\n   transcripts outright.\n   The ZOO\
    \ may be left open to exploitation by pseudo-SIMIANs from\n   around the world.\
    \  A third party could interrupt communications\n   between a ZOO and a SIMIAN\
    \ by flooding the SIMIAN with packets,\n   incrementing the message ID by 1 for\
    \ each packet.  More heinously,\n   the party could exploit the KEEPER protocol\
    \ by sending a single\n   STOP request to each SIMIAN, thus causing a massive\
    \ denial of\n   service throughout the ZOO.  The party could also spoof a CHIMP\n\
    \   request or send false information such as a DEAD status, which\n   could cause\
    \ a ZOO to attempt to replace a monkey that is still\n   functioning properly.\n\
    \   In addition, if a ZOO repeatedly rejects a SIMIAN's requests\n   (especially\
    \ those for FOOD, WATER, and VETERINARIAN), then the ZOO\n   may inadvertently\
    \ cause its own denial of service with respect to\n   that particular SIMIAN.\
    \  However, both KEEPER and CHIMP allow the\n   ZOO to detect this condition in\
    \ a timely fashion via the\n   NORESPONSE or DEAD status codes.\n   All BARDs\
    \ are inherently insecure because they face insurmountable\n   financial problems\
    \ and low prioritization, which prevents them\n   from working reliably.  In the\
    \ rare cases when a BARD\n   implementation overcomes these obstacles, it is only\
    \ successful\n   for 15 minutes, and reverts to being insecure immediately\n \
    \  thereafter [14].  Since a CRITIC could significantly reduce the\n   success\
    \ of a BARD with an appropriate PAN response, this is one\n   more reason why\
    \ BARDs and CRITICs should always be kept separate\n   from each other.\n   It\
    \ is expected that very few people will care about most\n   implementations of\
    \ CRITIC, and CRITICs themselves are inherently\n   insecure.  Therefore, security\
    \ is not a priority for CRITICs.  The\n   CRITIC may become the victim of a denial\
    \ of service attack if too\n   many SIMIANs submit transcripts at the same time.\
    \  In addition,\n   one SIMIAN may submit a non-innovative work by spoofing another\n\
    \   SIMIAN (this is referred to as the Plagiarism Problem).  A CRITIC\n   response\
    \ can also be spoofed, but since the only response\n   supported in PAN version\
    \ 1 is REJECT, this is of little\n   consequence.  Care must be taken in future\
    \ versions if a\n   GRUDGING_ACCEPTANCE response is allowed.  Finally, a transcript\n\
    \   may be lost in transmission, and PAN does not provide a mechanism\n   for\
    \ a ZOO to determine if this has happened.  Future versions of\n   IMPS may be\
    \ better suited to answer this fundamental design\n   problem: if an innovative\
    \ work is lost in transmission, can a\n   CRITIC still PAN it?\n   Based on the\
    \ number of packet-level vulnerabilities discovered in\n   recent years, it is\
    \ a foregone conclusion that some\n   implementations will behave extremely poorly\
    \ when processing\n   malformed IMPS packets with incorrect padding or reserved\
    \ bits\n   [15] [16] [17].\n   Finally, no security considerations are made with\
    \ respect to the\n   fact that over the course of infinite time, monkeys may evolve\
    \ and\n   discover how to control their own SIMIAN interfaces and send false\n\
    \   requests, or to compose and submit their own transcripts.  There\n   are indications\
    \ that this may already be happening [18].\n"
- title: 10. Acknowledgements
  contents:
  - "10. Acknowledgements\n   The author wishes to thank Andre Frech for technical\
    \ comments that\n   tripled the size of this document, Kean Kaufmann and Amanda\n\
    \   Vizedom for lectures on Shakespearean grammar, Rohn Blake for\n   clarifying\
    \ the nature of the entire universe, William Shakespeare\n   for accents, the\
    \ number 16, and the color yellow.\n"
- title: 11. References
  contents:
  - "11. References\n   [1]  The Famous Brett Watson, \"The Mathematics of Monkeys\
    \ and\n        Shakespeare.\"  http://www.nutters.org/monkeys.html\n   [2]  Dr.\
    \ Math. \"Monkeys Typing Shakespeare: Infinity Theory.\"\n        http://forum.swarthmore.edu/dr.math/problems/bridge8.5.98.html\n\
    \   [3]  K. Clark, Stark Mill Brewery, Manchester, NH, USA.  Feb 18,\n       \
    \ 2000.  (personal communication).  \"Good question!  I never thought\n      \
    \  of that!  I bet nobody else has, either.  Please pass the french\n        fries.\"\
    \n   [4]  The author was unable to find a reference in any issue of TV\n     \
    \   Guide published between 1956 and the date of this document.\n   [5]  \"Dough\
    \ Re Mi,\" The Brady Bunch.  Original air date January 14,\n        1972.\n  \
    \ [6]  Postel, J., \" Internet Protocol\", STD 5, RFC 791, September 1981.\n \
    \  [7]  Postel, J., \"Transmission Control Protocol\", STD 7, RFC 793,\n     \
    \   September 1981.\n   [8]  Brown, C. and A. Malis, \"Multiprotocol Interconnect\
    \ over Frame\n        Relay\", STD 55, RFC 2427, September 1998.\n   [9]  Internet-Draft,\
    \ bernstein-netstrings-06 (expired Work in\n        Progress).  D.J. Bernstein.\
    \  Inclusion of this reference is a\n        violation of RFC 2026 section 2.2.\n\
    \   [10] Glassman, S., Manasse, M. and J. Mogul, \"Y10K and Beyond\", RFC\n  \
    \      2550, 1 April 1999.\n   [11] \"My Last Theorem: A Prankster's Guide to\
    \ Ageless Mathematical\n        Jokes That are Funny Because They're True and\
    \ People Can't Prove\n        Them for Centuries.\"  P. Fermat.  Circa 1630.\n\
    \   [12] .signature in various USENET postings, circa 1994.  Author\n        unknown.\n\
    \   [13] \"Recognizing Irony, or How Not to be Duped When Reading.\"\n       \
    \ Faye Halpern.  1998.\n        http://www.brown.edu/Student_Services/Writing_Center/halpern1.htm\n\
    \   [14] Andy Warhol.  Circa 1964.\n   [15] CERT Advisory CA-98-13.  CERT.  December\
    \ 1998.\n        http://www.cert.org/advisories/\n   [16] CERT Advisory CA-97.28.\
    \  CERT.  December 1997.\n        http://www.cert.org/advisories/\n   [17] CERT\
    \ Advisory CA-96.26.  CERT.  December 1996.\n        http://www.cert.org/advisories/\n\
    \   [18] All issues of TV Guide published between 1956 and the date of\n     \
    \   this document.\n"
- title: 12. Author's Address
  contents:
  - "12. Author's Address\n   SteQven M. Christey\n   EMail: steqve@shore.net\n"
- title: 13.  Full Copyright Statement
  contents:
  - "13.  Full Copyright Statement\n   Copyright (C) The Internet Society (2000).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
