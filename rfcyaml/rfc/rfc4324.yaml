- title: __initial_text__
  contents:
  - '                     Calendar Access Protocol (CAP)

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
- title: Abstract
  contents:
  - "Abstract\n   The Calendar Access Protocol (CAP) described in this memo permits\
    \ a\n   Calendar User (CU) to utilize a Calendar User Agent (CUA) to access\n\
    \   an iCAL-based Calendar Store (CS).  At the time of this writing,\n   three\
    \ vendors are implementing CAP, but it has already been\n   determined that some\
    \ changes are needed.  In order to get\n   implementation experience, the participants\
    \ felt that a CAP\n   specification is needed to preserve many years of work.\
    \  Many\n   properties in CAP which have had many years of debate, can be used\
    \ by\n   other iCalendar protocols.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................5\n\
    \      1.1. Formatting Conventions .....................................5\n  \
    \    1.2. Related Documents ..........................................6\n    \
    \  1.3. Definitions ................................................7\n   2. Additions\
    \ to iCalendar .........................................11\n      2.1.  New Value\
    \ Types (Summary) ................................14\n         2.1.1. New Parameters\
    \ (summary) .............................14\n         2.1.2. New or Updated Properties\
    \ (summary) ..................14\n         2.1.3. New Components (summary) .............................17\n\
    \      2.2.  Relationship of RFC-2446 (ITIP) to CAP ...................18\n  \
    \ 3. CAP Design .....................................................20\n    \
    \  3.1. System Model ..............................................20\n      3.2.\
    \ Calendar Store Object Model ...............................20\n      3.3. Protocol\
    \ Model ............................................21\n         3.3.1. Use of\
    \ BEEP, MIME, and iCalendar .....................22\n   4. Security Model .................................................23\n\
    \      4.1. Calendar User and UPNs ....................................23\n  \
    \       4.1.1. UPNs and Certificates ................................24\n    \
    \     4.1.2. Anonymous Users and Authentication ...................25\n      \
    \   4.1.3. User Groups ..........................................25\n      4.2.\
    \ Access Rights .............................................26\n         4.2.1.\
    \ Access Control and NOCONFLICT ........................26\n         4.2.2. Predefined\
    \ VCARs .....................................26\n         4.2.3. Decreed VCARs\
    \ ........................................28\n      4.3. CAP Session Identity\
    \ ......................................28\n   5. CAP URL and Calendar Address\
    \ ...................................29\n   6. New Value Types ................................................30\n\
    \      6.1. Property Value Data Types .................................30\n  \
    \       6.1.1. CAL-QUERY Value Type .................................30\n    \
    \        6.1.1.1. [NOT] CAL-OWNERS() ..............................36\n      \
    \      6.1.1.2. CURRENT-TARGET() ................................37\n        \
    \    6.1.1.3. PARAM() .........................................37\n          \
    \  6.1.1.4. SELF() ..........................................38\n            6.1.1.5.\
    \ STATE() .........................................38\n            6.1.1.6. Use\
    \ of Single Quote .............................38\n            6.1.1.7. Comparing\
    \ DATE and DATE-TIME Values .............39\n            6.1.1.8. DTEND and DURATION\
    \ ..............................40\n            6.1.1.9. [NOT] LIKE ......................................40\n\
    \            6.1.1.10. Empty vs. NULL .................................41\n  \
    \          6.1.1.11. [NOT] IN .......................................41\n    \
    \        6.1.1.12. DATE-TIME and TIME Values in a WHERE Clause ....42\n      \
    \      6.1.1.13. Multiple Contained Components ..................43\n        \
    \    6.1.1.14. Example, Query by UID ..........................43\n          \
    \  6.1.1.15. Query by Date-Time Range .......................43\n            6.1.1.16.\
    \ Query for All Unprocessed Entries ..............44\n            6.1.1.17. Query\
    \ with Subset of Properties by Date/Time ...44\n            6.1.1.18. Query with\
    \ Components and Alarms in A Range ....45\n         6.1.2. UPN Value Type .......................................45\n\
    \         6.1.3. UPN-FILTER Value .....................................46\n  \
    \ 7. New Parameters .................................................48\n    \
    \  7.1. ACTION Parameter ..........................................48\n      7.2.\
    \ ENABLE Parameter ..........................................48\n      7.3. ID\
    \ Parameter ..............................................49\n      7.4. LATENCY\
    \ Parameter .........................................50\n      7.5. LOCAL Parameter\
    \ ...........................................50\n      7.6. LOCALIZE Parameter\
    \ ........................................51\n      7.7. OPTIONS Parameter .........................................52\n\
    \   8. New Properties .................................................52\n  \
    \    8.1. ALLOW-CONFLICT Property ...................................52\n    \
    \  8.2. ATT-COUNTER Property ......................................53\n      8.3.\
    \ CALID Property ............................................54\n      8.4. CALMASTER\
    \ Property ........................................54\n      8.5. CAP-VERSION\
    \ Property ......................................55\n      8.6. CARID Property\
    \ ............................................55\n      8.7. CAR-LEVEL Property\
    \ ........................................56\n      8.8. COMPONENTS Property .......................................56\n\
    \      8.9. CSID Property .............................................58\n  \
    \    8.10. DECREED Property .........................................58\n    \
    \  8.11. DEFAULT-CHARSET Property .................................59\n      8.12.\
    \ DEFAULT-LOCALE Property ..................................60\n      8.13. DEFAULT-TZID\
    \ Property ....................................61\n      8.14. DEFAULT-VCARS Property\
    \ ...................................62\n      8.15. DENY Property ............................................62\n\
    \      8.16. EXPAND property ..........................................63\n  \
    \    8.17. GRANT Property ...........................................64\n    \
    \  8.18. ITIP-VERSION Property ....................................64\n      8.19.\
    \ MAX-COMP-SIZE Property ...................................65\n      8.20. MAXDATE\
    \ Property .........................................65\n      8.21. MINDATE Property\
    \ .........................................66\n      8.22. MULTIPART Property\
    \ .......................................66\n      8.23. NAME Property ............................................67\n\
    \      8.24. OWNER Property ...........................................68\n  \
    \    8.25. PERMISSION Property ......................................68\n    \
    \  8.26. QUERY property ...........................................69\n      8.27.\
    \ QUERYID property .........................................70\n      8.28. QUERY-LEVEL\
    \ Property .....................................70\n      8.29. RECUR-ACCEPTED\
    \ Property ..................................71\n      8.30. RECUR-LIMIT Property\
    \ .....................................71\n      8.31. RECUR-EXPAND Property ....................................72\n\
    \      8.32. RESTRICTION Property .....................................72\n  \
    \    8.33. SCOPE Property ...........................................73\n    \
    \  8.34. STORES-EXPANDED Property .................................74\n      8.35.\
    \ TARGET Property ..........................................74\n      8.36. TRANSP\
    \ Property ..........................................75\n   9. New Components\
    \ .................................................76\n      9.1. VAGENDA Component\
    \ .........................................76\n      9.2. VCALSTORE Component\
    \ .......................................78\n      9.3. VCAR Component ............................................80\n\
    \      9.4. VRIGHT Component ..........................................82\n  \
    \    9.5. VREPLY Component ..........................................83\n    \
    \  9.6. VQUERY Component ..........................................83\n   10.\
    \ Commands and Responses ........................................85\n      10.1.\
    \ CAP Commands (CMD) .......................................85\n      10.2. ABORT\
    \ Command ............................................88\n      10.3. CONTINUE\
    \ Command .........................................89\n      10.4. CREATE Command\
    \ ...........................................90\n      10.5. DELETE Command ...........................................96\n\
    \      10.6. GENERATE-UID Command .....................................98\n  \
    \    10.7. GET-CAPABILITY Command ..................................100\n    \
    \  10.8. IDENTIFY Command ........................................103\n      10.9.\
    \ MODIFY Command ..........................................105\n      10.10. MOVE\
    \ Command ...........................................110\n      10.11. REPLY Response\
    \ to a Command ............................112\n      10.12. SEARCH Command .........................................113\n\
    \      10.13. SET-LOCALE Command .....................................116\n  \
    \    10.14. TIMEOUT Command ........................................118\n    \
    \  10.15. Response Codes .........................................118\n   11.\
    \ Object Registration ..........................................120\n      11.1.\
    \ Registration of New and Modified Entities ...............120\n      11.2. Post\
    \ the Item Definition ................................120\n      11.3. Allow a\
    \ Comment Period ..................................120\n      11.4. Release a\
    \ New RFC .......................................120\n   12. BEEP and CAP .................................................120\n\
    \      12.1. BEEP Profile Registration ...............................120\n  \
    \    12.2. BEEP Exchange Styles ....................................123\n    \
    \  12.3. BEEP Connection Details .................................123\n   13.\
    \ IANA Considerations ..........................................125\n   14. Security\
    \ Considerations ......................................125\n   Appendix A.  Acknowledgements\
    \ ....................................127\n   Appendix B.  References ..........................................127\n\
    \       Appendix B.1.  Normative References ..........................127\n  \
    \     Appendix B.2.  Informative References ........................128\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document specifies the Calendar Access Protocol (CAP).\
    \  CAP\n   permits a Calendar User (CU) to utilize a Calendar User Agent (CUA)\n\
    \   to access an iCAL-based Calendar Store (CS) and manage calendar\n   information.\
    \  In particular, the document specifies how to query,\n   create, modify, and\
    \ delete iCalendar components (e.g., events, to-\n   dos, or daily journal entries).\
    \  It further specifies how to search\n   for available busy time information.\
    \  Synchronization with CUAs is\n   not covered, but it is believed to be possible\
    \ using CAP.\n   At the time of this writing, three vendors are implementing CAP.\
    \  It\n   has already been determined that some changes are needed.  In order\n\
    \   to get implementation experience, the participants felt that a CAP\n   specification\
    \ is needed to preserve many years of work.  Many\n   properties in CAP can be\
    \ used by other iCalendar protocols and have\n   had many years of debate.\n \
    \  CAP is specified as a BEEP (Block Extensible Exchange Protocol)\n   \"profile\"\
    \ [BEEP] [BEEPGUIDE].  Many aspects of the protocol (e.g.,\n   authentication\
    \ and privacy) are provided within BEEP.  The protocol\n   data units of CAP leverage\
    \ the standard iCalendar format iCAL [iCAL]\n   to convey calendar-related information.\n\
    \   CAP can also be used to store and fetch iCalendar Transport-\n   Independent\
    \ Interoperability Protocol (iTIP) objects [iTIP].  iTIP\n   objects used are\
    \ exactly as defined in [iTIP].  When iCalendar\n   objects are transferred between\
    \ the CUA and a CS, some additional\n   properties and parameters may be added;\
    \ the CUA is responsible for\n   correctly generating iCalendar objects to non-CAP\
    \ processes.\n   The definition of new components, properties, parameters, and\
    \ value\n   types are broken into two parts.  The first part summarizes and\n\
    \   defines the new objects.  The second part provides detail and ABNF\n   for\
    \ those objects.  The ABNF rules for CAP, as for other iCalendar\n   specifications,\
    \ are order-independent.  That is, properties in a\n   component may occur in\
    \ any order, and parameters in any property may\n   occur in any order.\n"
- title: 1.1.  Formatting Conventions
  contents:
  - "1.1.  Formatting Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\" and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n   Calendaring and scheduling roles are referred to in quoted-strings\
    \ of\n   text with the first character of each word in upper case.  For\n   example,\
    \ \"Organizer\" refers to a role of a \"Calendar User\" (CU)\n   within the protocol\
    \ defined by [iTIP].  Calendar components defined\n   by [iCAL] are referred to\
    \ with capitalized, quoted-strings of text.\n   All iCalendar components should\
    \ start with the letter \"V\".  For\n   example, \"VEVENT\" refers to the event\
    \ calendar component, \"VTODO\"\n   refers to the to-do component, and \"VJOURNAL\"\
    \ refers to the daily\n   journal component.\n   Scheduling methods defined by\
    \ [iTIP] are referred to with\n   capitalized, quoted-strings of text.  For example,\
    \ \"REPLY\" refers to\n   the method for replying to a \"REQUEST\".\n   CAP commands\
    \ are referred to by upper-case, quoted-strings of text,\n   followed by the word\
    \ \"command\".  For example, '\"CREATE\" command'\n   refers to the command for\
    \ creating a calendar entry, '\"SEARCH\"\n   command' refers to the command for\
    \ reading calendar components.  CAP\n   commands are named using the \"CMD\" property.\n\
    \   Properties defined by this memo are referred to with capitalized,\n   quoted-strings\
    \ of text, followed by the word \"property\".  For\n   example, '\"ATTENDEE\"\
    \ property' refers to the iCalendar property used\n   to convey the calendar address\
    \ that has been invited to a \"VEVENT\" or\n   \"VTODO\" component.\n   Property\
    \ parameters defined by this memo are referred to with\n   capitalized, quoted-strings\
    \ of text, followed by the word\n   \"parameter\".  For example, \"PARTSTAT\"\
    \ parameter refers to the\n   iCalendar property parameter used to specify the\
    \ participation status\n   of an attendee.  Enumerated values defined by this\
    \ memo are referred\n   to with capitalized text, either alone or followed by\
    \ the word\n   \"value\".\n   Object states defined by this memo are referred\
    \ to with capitalized,\n   quoted-strings of text, followed by the word \"state\"\
    .  For example,\n   '\"BOOKED\" state' refers to an object in the booked state.\n\
    \   Within a query, the different parts are referred to as a \"clause\" and\n\
    \   its value as \"clause value\" and the clause name will be in uppercase\n \
    \  enclosed in quotes, for example, 'The \"SELECT\" claus' or 'if the\n   \"SELECT\"\
    \ clause value contains ...'.\n   In tables, the quoted-string text is specified\
    \ without quotes in\n   order to minimize the table length.\n"
- title: 1.2.  Related Documents
  contents:
  - "1.2.  Related Documents\n   Implementers will need to be familiar with several\
    \ other memos that,\n   along with this one, describe the Internet calendaring\
    \ and scheduling\n   standards.  These documents are as follows.\n      [iCAL]\
    \ (RFC2445) specifies the objects, data types, properties and\n         property\
    \ parameters used in the protocols, along with the\n         methods for representing\
    \ and encoding them.\n      [iTIP] (RFC2446) specifies an interoperability protocol\
    \ for\n         scheduling between different installations.\n      [iMIP] (RFC2447)\
    \ specifies the Internet email binding for [iTIP].\n      [GUIDE] (RFC3283) is\
    \ a guide to implementers and describes the\n         elements of a calendaring\
    \ system, how they interact with each\n         other, how they interact with\
    \ end users, and how the standards\n         and protocols are used.\n   This\
    \ memo does not attempt to repeat the specification of concepts\n   and definitions\
    \ from these earlier memos.  Where possible, references\n   are made to the memo\
    \ that provides the specification of these\n   concepts and definitions.\n"
- title: 1.3  Definitions
  contents:
  - "1.3  Definitions\n   UNPROCESSED, BOOKED, DELETED -  A conceptual state of an\
    \ object in\n      the calendar store.  There are three conceptual states:\n \
    \     \"UNPROCESSED\" state, \"BOOKED\" state, and marked for deletion,\n    \
    \  which is the \"DELETED\" state.  How the implementation stores the\n      state\
    \ of any object is not a protocol issue and is not discussed.\n      An object\
    \ can be said to be booked, unprocessed, or marked for\n      deletion.\n    \
    \  1.  An \"UNPROCESSED\" state scheduling object has been stored in\n       \
    \   the calendar store but has not been acted on by a CU or CUA.\n          All\
    \ scheduled entries are [iTIP] objects.  No [iTIP] objects\n          in the store\
    \ are in the \"BOOKED\" state.  To retrieve any\n          [iTIP] object, simply\
    \ do a query asking for any objects that\n          are stored in the \"UNPROCESSED\"\
    \ state.\n      2.  A \"BOOKED\" state entry is stored with the \"CREATE\" command.\n\
    \          It is an object that has been acted on by a CU or CUA and\n       \
    \   there has been a decision to store an object.  To retrieve any\n         \
    \ booked object, simply do a query asking for any objects that\n          were\
    \ stored in the \"BOOKED\" state.\n      3.  A \"DELETED\" state entry is created\
    \ by sending a \"DELETE\"\n          command with the \"OPTION\" parameter value\
    \ set to \"MARK\".  To\n          retrieve any deleted object, simply do a query\
    \ asking for any\n          objects that were stored in the \"DELETED\" state.\
    \  By default\n          objects marked for delete are not returned.  The CUA\
    \ must\n          specifically ask for marked-for-deletion objects.  You cannot\n\
    \          ask for components in the \"DELETED\" state and in other states\n \
    \         in the same \"VQUERY\" component, as there would be no way to\n    \
    \      distinguish between them in the reply.\n   Calendar -  A collection of\
    \ logically related objects or entities\n      each of which may be associated\
    \ with a calendar date and possibly\n      time of day.  These entities can include\
    \ calendar properties or\n      components.  In addition, a calendar might be\
    \ related to other\n      calendars with the \"RELATED-TO\" property.  A calendar\
    \ is\n      identified by its unique calendar identifier.  The [iCAL] defines\n\
    \      the initial calendar properties, calendar components and\n      properties\
    \ that make up the contents of a calendar.\n   Calendar Access Protocol (CAP)\
    \ -  The Internet protocol that permits\n      a CUA to access and manipulate\
    \ calendars residing on a Calendar\n      Store.  (This memo.)\n   Calendar Access\
    \ Rights (VCAR) -  The mechanism for specifying the CAP\n      operations (\"\
    PERMISSION\") that a particular calendar user (\"UPN\",\n      defined below)\
    \ is granted or denied permission to perform on a\n      given calendar object\
    \ (\"SCOPE\").  The calendar access rights are\n      specified with a \"VCAR\"\
    \ component.  (Section 9.3)\n   Calendar Address -  Also see Calendar URL, which\
    \ is the same as a CAP\n      address.  The calendar address can also be the value\
    \ to the\n      \"ATTENDEE\" and \"ORGANIZER\" properties, as defined in [iCAL].\n\
    \      Calendar URL -  A calendar URL is a URL, defined in this memo,\n      that\
    \ specifies the address of a CS or Calendar.\n   Component -  Any object that\
    \ conforms to the iCalendar object format\n      and that is either defined in\
    \ an Internet Draft, registered with\n      IANA, or is an experimental object\
    \ that is prefixed with \"x-\".\n      Some types of components include calendars,\
    \ events, to-dos,\n      journals, alarms, and time zones.  A component consists\
    \ of\n      properties and possibly other contained components.  For example,\n\
    \      an event may contain an alarm component.\n   Container -  This is a generic\
    \ name for VCALSTORE or VAGENDA.\n   Properties -  An attribute of a particular\
    \ component.  Some\n      properties are applicable to different types of components.\
    \  For\n      example, the \"DTSTART\" property is applicable to the \"VEVENT\"\
    ,\n      \"VTODO\", and \"VJOURNAL\" components.  Other components are\n     \
    \ applicable only to an individual type of calendar component.  For\n      example,\
    \ the \"TZURL\" property may only be applicable to the\n      \"VTIMEZONE\" components.\n\
    \   Calendar Identifier (CALID) -  A globally unique identifier\n      associated\
    \ with a calendar.  Calendars reside within a CS.  See\n      Qualified Calendar\
    \ Identifier and Relative Calendar Identifier.\n      All CALIDs start with \"\
    cap:\".\n   Calendar Policy -  A CAP operational restriction on the access or\n\
    \      manipulation of a calendar.  These may be outside the scope of the\n  \
    \    CAP protocol.  An example of an implementation or site policy is,\n     \
    \ \"events MUST be scheduled in unit intervals of one hour\".\n   Calendar Property\
    \ -  An attribute of a calendar (\"VAGENDA\").  The\n      attribute applies to\
    \ the calendar, as a whole.  For example, the\n      \"CALSCALE\" property specifies\
    \ the calendar scale (e.g., the\n      \"GREGORIAN\" value) for the all entries\
    \ within the calendar.\n   Calendar Store (CS) -  The data and service model definitions\
    \ for a\n      Calendar Store as defined in this memo.  This memo does not\n \
    \     specify how the CS is implemented.\n   Calendar Server -  An implementation\
    \ of a Calendar Store (CS) that\n      manages one or more calendars.\n   Calendar\
    \ Store Identifier (CSID) -  The globally unique identifier\n      for an individual\
    \ CS.  A CSID consists of the host and port\n      portions of a \"Common Internet\
    \ Scheme Syntax\" part of a URL, as\n      defined by [URL].  The CSID excludes\
    \ any reference to a specific\n      calendar.  (Section 8.9)\n   Calendar Store\
    \ Components -  Components maintained in a CS specify a\n      grouping of calendar\
    \ store-wide information.\n   Calendar Store Properties -  Properties maintained\
    \ in a Calendar\n      Store represent store-wide information.\n   Calendar User\
    \ (CU) -  An entity (often biological) that uses a\n      calendaring system.\n\
    \   Calendar User Agent (CUA) -  The client application that a CU\n      utilizes\
    \ to access and manipulate a calendar.\n   CAP Session -  An open communication\
    \ channel between a CUA and a CS.\n      If the CAP session is authenticated,\
    \ the CU is \"authenticated\" and\n      it is an \"authenticated CAP session\"\
    .\n   Contained Component / Contained Properties -  A component or property\n\
    \      that is contained inside of another component.  For example, a\n      \"\
    VALARM\" component may be contained inside a \"VEVENT\" component,\n      and\
    \ a \"TRIGGER\" property could be a contained property of a\n      \"VALARM\"\
    \ component.\n   Delegate -  A CU (sometimes called the delegatee) who has been\n\
    \      assigned participation in a scheduled component (e.g., VEVENT) by\n   \
    \   one of the attendees in the scheduled component (sometimes called\n      the\
    \ delegator).  An example of a delegate is a team member told to\n      go to\
    \ a particular meeting in place of another invitee who is\n      unable to attend.\n\
    \   Designate -  A CU who is authorized to act on behalf of another CU.\n    \
    \  An example of a designate is an assistant.\n   Experimental -  The CUA and\
    \ CS may implement experimental extensions\n      to the protocol.  They might\
    \ also have experimental components,\n      properties, and parameters.  These\
    \ extensions MUST start with \"x-\"\n      (or \"X-\") and should include a vendor\
    \ prefix (such as \"x-\n      myvendor-\").  There is no guarantee that these\
    \ experimental\n      extensions will interoperate with other implementations.\
    \  There is\n      no guarantee that they will not interact in unpredictable ways\n\
    \      with other vendor experimental extensions.  There is no guarantee\n   \
    \   that the same specific experimental extension is not used by\n      multiple\
    \ vendors in incompatible ways.  Implementations should\n      limit sending those\
    \ extensions to other implementations.\n   Object -  A generic name for any component,\
    \ property, parameter, or\n      value type to be used in iCalendar.\n   Overlapped\
    \ Booking -  A policy that indicates whether or not\n      components with a \"\
    TRANSP\" property not set to \"TRANSPARENT-\n      NOCONFLICT\" or \"OPAQUE-NOCONFLICT\"\
    \ value can overlap one another.\n      When the policy is applied to a calendar\
    \ it indicates whether or\n      not the time span of any component (VEVENT, VTODO,\
    \ ...) in the\n      calendar can overlap the time span of any other component\
    \ in the\n      same calendar.  When applied to an individual object, it indicates\n\
    \      whether or not any other component's time span can overlap that\n     \
    \ individual component.  If the CS does not allow overlapped\n      booking, then\
    \ the CS is unwilling to allow any overlapped bookings\n      within any calendar\
    \ or entry in the CS.\n   Owner -  One or more CUs or UGs that are listed in the\
    \ \"OWNER\"\n      property in a calendar.  There can be more than one owner.\n\
    \   Qualified Calendar Identifier (Qualified CALID) -  A CALID in which\n    \
    \  both the scheme and CSID of the CAP URI are present.\n   Realm -  A collection\
    \ of calendar user accounts, identified by a\n      string.  The name of the Realm\
    \ is only used in UPNs.  In order to\n      avoid namespace conflict, the Realm\
    \ SHOULD be postfixed with an\n      appropriate DNS domain name (e.g., the foobar\
    \ Realm could be\n      called foobar.example.com).\n   Relative Calendar Identifier\
    \ (Relative CALID) -  An identifier for an\n      individual calendar in a calendar\
    \ store.  It MUST be unique within\n      a calendar store.  A Relative CALID\
    \ consists of the \"URL path\" of\n      the \"Common Internet Scheme Syntax\"\
    \ portion of a URL, as defined\n      by [URI] and [URLGUIDE].\n   Session Identity\
    \ -  A UPN associated with a CAP session.  A session\n      gains an identity\
    \ after successful authentication.  The identity\n      is used in combination\
    \ with VCAR to determine access to data in\n      the CS.\n   User Group (UG)\
    \ -  A collection of Calendar Users and/or User Groups.\n      These groups are\
    \ expanded by the CS and may reside either locally\n      or in an external database\
    \ or directory.  The group membership may\n      be fixed or dynamic over time.\n\
    \   Username -  A name that denotes a Calendar User within a Realm.  This\n  \
    \    is part of a UPN.\n   User Principal Name (UPN) -  A unique identifier that\
    \ denotes a CU or\n      a group of CUs.  (Section 6.1.2)\n"
- title: 2.  Additions to iCalendar
  contents:
  - "2.  Additions to iCalendar\n   Several new components, properties, parameters,\
    \ and value types are\n   added in CAP.  This section summarizes those new objects.\n\
    \   This memo extends the properties that can go into 'calprops' as\n   defined\
    \ in [iCAL] section 4.6 page 51, to allow [iTIP] objects\n   transmitted between\
    \ a CAP aware CUA and the CS to contain the\n   \"TARGET\" and \"CMD\" properties.\
    \  This memo also adds to the [iCAL]\n   ABNF to allow IANA and experimental extensions.\
    \  This memo does not\n   address how a CUA transmits [iTIP] or [iMIP] objects\
    \ to non-CAP\n   programs.  What follows is ABNF, as described in [ABNF].\n  \
    \    calprops= 2*(\n                    ; 'prodid' and 'version' are both REQUIRED,\n\
    \                    ; but MUST NOT occur more than once.\n                  \
    \  ;\n                prodid /version /\n                    ;\n             \
    \       ; These are optional, but MUST NOT occur\n                    ; more than\
    \ once.\n                    ;\n                calscale        /\n          \
    \      method          /\n                cmd             /\n                \
    \    ;\n                    ; Target is optional, and may occur more\n       \
    \             ; than once.\n                    ;\n                target / other-props\
    \ )\n                    ;\n      other-props  = *(x-prop) *(iana-prop) *(other-props)\n\
    \                    ;\n      iana-prop   = ; Any property registered by IANA\
    \ directly or\n                    ; included in an RFC that may be applied to\n\
    \                    ; the component and within the rules published.\n       \
    \             ;\n      x-prop      = ; As defined in [iCAL].\n               \
    \     ;\n      methodp     = ; As defined in [iCAL].\n                    ;\n\
    \      prodid      = ; As defined in [iCAL].\n                    ;\n      calscale\
    \    = ; As defined in [iCAL].\n                    ;\n   Another change is that\
    \ the 'component' part of the 'icalbody' ABNF as\n   described in [iCAL] section\
    \ 4.6 is optional when sending a command,\n   as shown in the following updated\
    \ ABNF:\n      icalbody = calprops component\n                ; If the \"VCALENDAR\"\
    \ component contains the \"CMD\"\n                ; property then the 'component'\
    \ is optional:\n                ;\n                / calprops     ; Which MUST\
    \ include a \"CMD\" property\n                ;\n      component = ; As defined\
    \ in [iCAL].\n   In addition, a problem exists with the control of \"VALARM\"\
    \ components\n   and their \"TRIGGER\" properties.  A CU may wish to set its own\
    \ alarms\n   (local alarms) on components.  These local alarms are not to be\n\
    \   forwarded to other CUs, CUAs, or CSs.  Similarly, the \"SEQUENCE\"\n   property\
    \ and the \"ENABLE\" parameter in local alarms are not to be\n   forwarded to\
    \ other CUs, CUAs, or CSs.  Therefore, for the protocol\n   between a CUA and\
    \ a CS, the following changes from [iCAL] section\n   4.6.6 page 67 apply to the\
    \ CAP protocol:\n        alarmc     = \"BEGIN\" \":\" \"VALARM\" CRLF\n      \
    \               alarm-seq\n                     other-props\n                \
    \     (audioprop / dispprop / emailprop / procprop)\n                     \"END\"\
    \ \":\" \"VALARM\" CRLF\n                     ;\n       emailprop   = ; As defined\
    \ in [iCAL]\n                     ;\n       procprop    = ; As defined in [iCAL]\n\
    \                     ;\n       dispprop    = ; As defined in [iCAL]\n       \
    \              ;\n       audioprop   = ; As defined in [iCAL]\n              \
    \       ;\n       alarm-seq   = \"SEQUENCE\" alarmseqparams \":\" posint0 CRLF\n\
    \                     ;\n       alarmseqparams = other-params [\";\" local-param]\
    \ other-params\n                     ;\n                     ; Where DIGIT is\
    \ defined in [iCAL]\n                     ;\n       posint0     = 1*DIGIT\n  \
    \     posint1     = posintfirst 1*DIGIT\n                     ;\n            \
    \         ; A number starting with 1 through 9.\n                     ;\n    \
    \   posintfirst = %x31-39\n                     ;\n       other-params = *(\"\
    ;\" xparam) *(\";\" iana-params)\n                                    *(\";\"\
    \ other-params)\n                     ;\n       iana-params = ; Any parameter\
    \ registered by IANA directly or\n                     ; included in an RFC that\
    \ may be applied to\n                     ; the property and within the rules\
    \ published.\n                     ;\n       xparam        ; As defined in [iCAL].\n\
    \                     ;\n   The CUA adds a \"SEQUENCE\" property to each \"VALARM\"\
    \ component as it\n   books the component.  This property, along with the \"LOCAL\"\
    \ and\n   \"ENABLE\" parameters, allows the CUA to uniquely identify any VALARM\n\
    \   in any component.  The CUA should remove those before forwarding to\n   non-CAP-aware\
    \ CUAs.\n   In addition, if a CUA wished to ignore a \"TRIGGER\" property in a\n\
    \   \"VALARM\" component that was supplied to it by the \"Organizer\", the\n \
    \  CUA needs a common way to tag that trigger as disabled.  So the\n   following\
    \ is a modification to [iCAL] section 4.8.6.3 page 127:\n      trigger    = \"\
    TRIGGER\" 1*(\";\" enable-param) (trigrel / trigabs)\n                   ;\n \
    \     trigrel    = ; As defined in [iCAL].\n                   ;\n      trigabs\
    \    = ; As defined in [iCAL].\n   See Section 7.2 and Section 7.5.\n"
- title: 2.1.  New Value Types (Summary)
  contents:
  - "2.1.  New Value Types (Summary)\n   UPN: The UPN value type is a text value type\
    \ restricted to only UPN\n      values (see Section 6.1.2).\n   UPN-FILTER: Like\
    \ the UPN value type, but also includes filter rules\n      that allow wildcards\
    \ (see Section 6.1.3).\n   CALQUERY: The \"CAL-QUERY\" value type is a query syntax\
    \ that is used\n      by the CUA to specify the rules that apply to a CAP command\
    \ (see\n      Section 6.1.1).\n"
- title: 2.1.1.  New Parameters (summary)
  contents:
  - "2.1.1.  New Parameters (summary)\n   ACTION -  The \"ACTION\" parameter informs\
    \ the endpoint if it should\n         abort or ask to continue on timeout.  (Section\
    \ 7.1)\n   ENABLE -  The \"ENABLE\" parameter in CAP is used to tag a property\
    \ in\n      a component as disabled or enabled.  (Section 7.2)\n   ID -  The \"\
    ID\" parameter specifies a unique identifier to be used for\n      any outstanding\
    \ commands.\n   LATENCY -  The \"LATENCY\" parameter supplies the timeout value\
    \ for\n      command completion to the other endpoint.  (Section 7.4)\n   LOCAL\
    \ -  The \"LOCAL\" parameter in CAP is used to tag a property in a\n      component\
    \ to signify that the component is local or to be\n      distributed.  (Section\
    \ 7.5)\n   LOCALIZE -  The \"LOCALIZE\" parameter specifies the locale to be used\n\
    \      in error and warning messages.\n   OPTIONS -  The \"OPTIONS\" parameter\
    \ passes optional information for\n      the command being sent.\n"
- title: 2.1.2.  New or Updated Properties (summary)
  contents:
  - "2.1.2.  New or Updated Properties (summary)\n   ALLOW-CONFLICT -  Some entries\
    \ in a calendar might not be valid if\n      other entries were allowed to overlap\
    \ the same time span.\n      (Section 8.1)\n   ATT-COUNTER -  When storing a \"\
    METHOD\" property with the \"COUNTER\"\n      method, there needs to be a way\
    \ to remember the \"ATTENDEE\" value\n      that sent the COUNTER.  (Section 8.2)\n\
    \   CAP-VERSION -  The version of CAP that the implementation supports.\n    \
    \  (Section 8.5)\n   CAR-LEVEL -  The level of calendar access supported.  (Section\
    \ 8.7)\n   COMPONENTS -  The list of components supported.  (Section 8.8)\n  \
    \ CSID -  The Calendar Store IDentifier (CSID) uniquely identifies a\n      CAP\
    \ server.  (Section 8.9)\n   CALID -  Each calendar within a CS needs to be uniquely\
    \ identifiable.\n      The \"CALID\" property identifies a unique calendar within\
    \ a CS.  It\n      can be a full CALID or a relative CALID.  (Section 8.3)\n \
    \  CALMASTER -  The \"CALMASTER\" property specifies the contact\n      information\
    \ for the CS.  (Section 8.4)\n   CARID -  Access rights can be saved and fetched\
    \ by unique ID - the\n      \"CARID\" property.  (Section 8.6)\n   CMD -  The\
    \ CAP commands, as well as replies are transmitted using the\n      \"CMD\" property.\
    \  (Section 10.1)\n   DECREED -  Some access rights are not changeable by the\
    \ CUA.  When\n      that is the case, the \"DECREED\" property value in the \"\
    VCAR\"\n      component will be \"TRUE\".  (Section 8.10)\n   DEFAULT-CHARSET\
    \ -  The list of charsets supported by the CS.  The\n      first entry is the\
    \ default for the CS.  (Section 8.11)\n   DEFAULT-LOCALE -  The list of locales\
    \ supported by the CS.  The first\n      entry in the list is the default locale.\
    \  (Section 8.12)\n   DEFAULT-TZID -  This is the list of known timezones supported.\
    \  The\n      first entry is the default.  (Section 8.13)\n   DEFAULT-VCARS -\
    \  A list of the \"CARID\" properties that will be used\n      to create new calendars.\
    \  (Section 8.14)\n   DENY -  The UPNs listed in the \"DENY\" property of a \"\
    VCAR\" component\n      will be denied access, as described in the \"VRIGHT\"\
    \ component.\n      (Section 8.15)\n   EXPAND -  This property tells the CS if\
    \ the query reply should expand\n      components into multiple instances.  The\
    \ default is \"FALSE\" and is\n      ignored for CSs that cannot expand recurrence\
    \ rules.  (Section\n      8.16)\n   GRANT -  The UPNs listed in the \"GRANT\"\
    \ property of a \"VCAR\"\n      component will be allowed access as described\
    \ in the \"VRIGHT\"\n      component.  (Section 8.17)\n   ITIP-VERSION -  The\
    \ version of [iTIP] supported.  (Section 8.18)\n   MAXDATE -  The maximum date\
    \ supported by the CS.  (Section 8.20)\n   MAX-COMP-SIZE -  The largest component\
    \ size allowed in the\n      implementation including attachments in octets. \
    \ (Section 8.19)\n   MINDATE -  The minimum date supported by the CS.  (Section\
    \ 8.21)\n   MULTIPART -  Passed in the capability messages to indicate which MIME\n\
    \      multipart types the sender supports.  (Section 8.22)\n   NAME -  The \"\
    NAME\" property is used to add locale-specific\n      descriptions into components.\
    \  (Section 8.23)\n   OWNER -  Each calendar has at least one \"OWNER\" property.\
    \  (xref\n      target=\"OWNER\"/>) Related to the \"CAL-OWNERS()\" query clause.\n\
    \      (Section 6.1.1.1)\n   PERMISSION -  This property specifies the permission\
    \ being granted or\n      denied.  Examples are the \"SEARCH\" and \"MODIFY\"\
    \ values.  (Section\n      8.25)\n   QUERY -  Used to hold the CAL-QUERY (Section\
    \ 8.26) for the component.\n   QUERYID -  A unique id for a stored query.  (Section\
    \ 8.27)\n   QUERY-LEVEL -  The level of the query language supported.  (Section\n\
    \      8.28)\n   RECUR-ACCEPTED -  If the implementation support recurrence rules.\n\
    \      (Section 8.29)\n   RECUR-EXPAND -  If the implementation support expanding\
    \ recurrence\n      rules.  (Section 8.31)\n   RECUR-LIMIT -  Any maximum limit\
    \ on the number of instances the\n      implementation will expand recurring objects.\
    \  (Section 8.30)\n   REQUEST-STATUS -  The [iCAL] \"REQUEST-STATUS\" property\
    \ is extended to\n      include new error numbers.\n   RESTRICTION -  In the final\
    \ check when granting calendar access\n      requests, the CS test the results\
    \ of a command for the value of\n      the \"RESTRICTION\" property in the corresponding\
    \ \"VRIGHT\"\n      component, to determine if the access meets that restriction.\n\
    \      (Section 8.32)\n   SCOPE -  The \"SCOPE\" property is used in \"VRIGHT\"\
    s component to\n      select the subset of data that may be acted upon when checking\n\
    \      access rights.  (Section 8.33)\n   SEQUENCE -  When the \"SEQUENCE\" property\
    \ is used in a \"VALARM\"\n      component, it uniquely identifies the instances\
    \ of the \"VALARM\"\n      within that component.\n   STORES-EXPANDED -  Specifies\
    \ if the implementation stores recurring\n      objects expanded or not.  (Section\
    \ 8.34)\n   TARGET -  The new \"VCALENDAR\" component property \"TARGET\" (Section\n\
    \      8.35) is used to specify which calendar(s) will be the subject of\n   \
    \   the CAP command.\n   TRANSP -  This is a modification of the [iCAL] \"TRANSP\"\
    \ property and\n      it allows more values.  The new values are related to conflict\n\
    \      control.  (Section 8.36)\n"
- title: 2.1.3.  New Components (summary)
  contents:
  - "2.1.3.  New Components (summary)\n   VAGENDA -  CAP allows the fetching and storing\
    \ of the entire contents\n      of a calendar.  The \"VCALENDAR\" component is\
    \ not sufficient to\n      encapsulate all of the needed data that describes a\
    \ calendar.  The\n      \"VAGENDA\" component is the encapsulating object for\
    \ an entire\n      calendar.  (Section 9.1)\n   VCALSTORE -  Each CS contains\
    \ one or more calendars (VAGENDAs), the\n      \"VCALSTORE\" component is the\
    \ encapsulating object that can hold\n      all of the \"VAGENDA\" components\
    \ along with any components and\n      properties that are unique to the store\
    \ level.  (Section 9.2)\n   VCAR -  Calendar Access Rights are specified and encapsulated\
    \ in the\n      new iCalendar \"VCAR\" component.  The \"VCAR\" component holds\
    \ some\n      new properties and at least one \"VRIGHT\" component.  (Section\
    \ 9.3)\n      VRIGHT -  This component encapsulates a set of instructions to the\n\
    \      CS to define the rights or restrictions needed.  (Section 9.4)\n   VREPLY\
    \ -  This component encapsulates a set of data that can consist\n      of an arbitrary\
    \ number of properties and components.  Its contents\n      are dependent on the\
    \ command that was issued.  (Section 9.5)\n   VQUERY -  The search operation makes\
    \ use of a new component, called\n      \"VQUERY\" and a new value type \"CAL-QUERY\"\
    \ (Section 6.1.1).  The\n      \"VQUERY\" component is used to fetch objects from\
    \ the CS.  (Section\n      9.6)\n"
- title: 2.2.  Relationship of RFC-2446 (ITIP) to CAP
  contents:
  - "2.2.  Relationship of RFC-2446 (ITIP) to CAP\n   [iTIP] describes scheduling\
    \ methods that result in indirect\n   manipulation of components.  In CAP, the\
    \ \"CREATE\" command is used to\n   deposit entities into the store.  Other CAP\
    \ commands, such as\n   \"DELETE\", \"MODIFY\", and \"MOVE\" command values, provide\
    \ direct\n   manipulation of components.  In the CAP calendar store model,\n \
    \  scheduling messages are conceptually kept separate from other\n   components\
    \ by their state.\n   All scheduling operations are as defined in [iTIP].  This\
    \ memo makes\n   no changes to any of the methods or procedures described in [iTIP].\n\
    \   In this memo, referring to the presence of the \"METHOD\" property in\n  \
    \ an object is the same as saying an [iTIP] object.\n   A CUA may create a \"\
    BOOKED\" state object by depositing an iCalendar\n   object into the store.  This\
    \ is done by depositing an object that\n   does not have a \"METHOD\" property.\
    \  The CS then knows to set the\n   state of the object to the \"BOOKED\" state.\
    \  If the object has a\n   \"METHOD\" property, then the object is stored in the\
    \ \"UNPROCESSED\"\n   state.\n   If existing \"UNPROCESSED\" state objects exist\
    \ in the CS for the same\n   UID (UID is defined in [iCAL]), then a CUA may wish\
    \ to consolidate\n   the objects into one \"BOOKED\" state object.  The CUA would\
    \ fetch the\n   \"UNPROCESSED\" state objects for that UID and process them in\
    \ the CUA\n   as described in [iTIP].  Then, if the CUA wished to book the UID,\
    \ the\n   CUA would issue a \"CREATE\" command to create the new \"BOOKED\" state\n\
    \   object in the CS, followed by a \"DELETE\" command to remove any\n   related\
    \ old [iTIP] objects from the CS.  It might also involve the\n   CUA sending some\
    \ [iMIP] objects or contacting other CSs and\n   performing CAP operations on\
    \ those CSs.\n   The CUA could also decide not to book the object.  In this case,\
    \ the\n   \"UNPROCESSED\" state objects could be removed from the CS, or the CUA\n\
    \   could set those objects to the marked-for-delete state.  The CUA\n   could\
    \ also ignore objects for later processing.\n   The marked-for-delete state is\
    \ used to keep the object around so that\n   the CUA can process duplicate requests\
    \ automatically.  If a duplicate\n   [iTIP] object is deposited into the CS and\
    \ there exists identical\n   marked-for-delete objects, then a CUA acting on behalf\
    \ of the \"OWNER\"\n   can silently drop those duplicate entries.\n   Another\
    \ purpose for the marked-for-delete state is so that, when a CU\n   decides they\
    \ do not wish to have the object show in their calendar,\n   the CUA can book\
    \ the object by changing the \"PARTSTAT\" parameter to\n   \"DECLINED\" in the\
    \ \"ATTENDEE\" property that corresponds to their UPN.\n   Then the CUA can perform\
    \ [iTIP] processing such as sending back a\n   decline, and then mark that object\
    \ as marked-fo-delete.  The CUA\n   might be configurable to automatically drop\
    \ any updates for that\n   object, knowing the CU has already declined.\n   When\
    \ synchronizing with multiple CUAs, the marked-for-delete state\n   could be used\
    \ to inform the synchronization process that an object is\n   to be deleted. \
    \ How synchronization is done is not specified in this\n   memo.\n   Several \"\
    UNPROCESSED\" state entries can be in the CS for the same\n   UID.  However, once\
    \ consolidated, only one object exists in the CS\n   and that is the booked object.\
    \  The other objects MUST be removed or\n   have their state changed to \"DELETED\"\
    .\n   There MUST NOT be more than one \"BOOKED\" state object in a calendar\n\
    \   for the same \"UID\".  The \"ADD\" method value may create multiple\n   objects\
    \ in the \"BOOKED\" state for the same UID; however, for the\n   purpose of this\
    \ memo, they are the same object and simply have\n   multiple \"VCALENDAR\" components.\n\
    \   For example, if you were on vacation, you could have received a\n   \"REQUEST\"\
    \ method to attend a meeting and several updates to that\n   meeting.  Your CUA\
    \ would have to issue \"SEARCH\" commands to find them\n   in the CS using CAP,\
    \ process them, and determine the final state of\n   the object from a possible\
    \ combination of user input and programmed\n   logic.  Then the CUA would instruct\
    \ the CS to create a new booked\n   object from the consolidated results.  Finally,\
    \ the CUA could do a\n   \"DELETE\" command to remove the related \"UNPROCESSED\"\
    \ state objects.\n   See [iTIP] for details on resolving multiple [iTIP] scheduling\n\
    \   entries.\n"
- title: 3.  CAP Design
  contents:
  - '3.  CAP Design

    '
- title: 3.1.  System Model
  contents:
  - "3.1.  System Model\n   The system model describes the high level components of\
    \ a calendar\n   system and how they interact with each other.\n   CAP is used\
    \ by a CUA to send commands to, and receive responses from,\n   a CS.\n   The\
    \ CUA prepares a [MIME] encapsulated message, sends it to the CS,\n   and receives\
    \ a [MIME] encapsulated response.  The calendaring-related\n   information within\
    \ these messages are represented by iCalendar\n   objects.  In addition, the \"\
    GET-CAPABILITY\" command can be sent from\n   the CS to the CUA.\n   There are\
    \ two distinct protocols in operation to accomplish this\n   exchange.  [BEEP]\
    \ is the transport protocol used to move these\n   encapsulations between a CUA\
    \ and a CS.  CAP's [BEEP] profile defines\n   the application protocol that specifies\
    \ the content and semantics of\n   the messages sent between the CUA and the CS.\n"
- title: 3.2.  Calendar Store Object Model
  contents:
  - "3.2.  Calendar Store Object Model\n   [iCAL] describes components such as events,\
    \ todos, alarms, and\n   timezones.  CAP requires additional object infrastructure,\
    \ in\n   particular, detailed definitions of the containers for events and\n \
    \  todos (calendars), access control objects, and a query language.\n   The conceptual\
    \ model for a calendar store is shown below.  The\n   calendar store (VCALSTORE\
    \ - Section 9.2) contains \"VCAR\"s, \"VQUERY\"s,\n   \"VTIMEZONE\"s, \"VAGENDA\"\
    s and calendar store properties.\n   Calendars (VAGENDAs) contain \"VEVENT\"s,\
    \ \"VTODO\"s, \"VJOURNAL\"s,\n   \"VCAR\"s, \"VTIMEZONE\"s, \"VFREEBUSY\", \"\
    VQUERY\"s, and calendar\n   properties.\n   The component \"VCALSTORE\" is used\
    \ to denote the root of the calendar\n   store and contains all of the calendars.\n\
    \   Calendar Store\n         VCALSTORE\n         |\n         +-- properties\n\
    \         +-- VCARs\n         +-- VQUERYs\n         +-- VTIMEZONEs\n         +--\
    \ VAGENDA\n         |     |\n         |     +--properties\n         |     +--VEVENTs\n\
    \         |     |    |\n         |     |    +--VALARMs\n         |     +--VTODOs\n\
    \         |     |    |\n         |     |    +--VALARMs\n         |     +--VJOURNALs\n\
    \         |     +--VCARs\n         |     +--VTIMEZONEs\n         |     +--VQUERYs\n\
    \         |     +--VFREEBUSYs\n         |     |\n         |     |   ...\n    \
    \     .\n         .\n         +-- VAGENDA\n         .     .\n         .     .\n\
    \         .     .\n   Calendars within a Calendar Store are identified by their\
    \ unique\n   Relative CALID.\n"
- title: 3.3.  Protocol Model
  contents:
  - "3.3.  Protocol Model\n   CAP uses [BEEP] as the transport and authentication\
    \ protocol.\n   The initial charset MUST be UTF-8 for a session in an unknown\
    \ locale.\n   If the CS supplied the [BEEP] 'localize' attribute in the [BEEP]\n\
    \   'greeting', then the CUA may tell the CS to switch locales for the\n   session\
    \ by issuing the \"SET-LOCALE\" CAP command and supplying one of\n   the locales\
    \ supplied by the [BEEP] 'localize' attribute.  If a locale\n   is supplied, the\
    \ first locale in the [BEEP] 'localize' attribute is\n   the default locale of\
    \ the CS.  The locale is switched only after a\n   successful reply.\n   The \"\
    DEFAULT-CHARSET\" property of the CS contains the list of\n   charsets supported\
    \ by the CS with the first value being the default\n   for new calendars.  If\
    \ the CUA wishes to switch to one of those\n   charsets for the session, the CUA\
    \ issues the \"SET-LOCALE\" command.\n   The CUA would have to first perform a\
    \ \"GET-CAPABILITY\" command on the\n   CS to get the list of charsets supported\
    \ by the CS.  The charset is\n   switched only after a successful reply.\n   The\
    \ CUA may switch locales and charsets as needed.  There is no\n   requirement\
    \ that a CS support multiple locales or charsets.\n"
- title: 3.3.1.  Use of BEEP, MIME, and iCalendar
  contents:
  - "3.3.1.  Use of BEEP, MIME, and iCalendar\n   CAP uses the [BEEP] application\
    \ protocol over TCP.  Refer to [BEEP]\n   and [BEEPTCP] for more information.\
    \  The default port on which the CS\n   listens for connections is user port 1026.\n\
    \   The [BEEP] data exchanged in CAP is a iCalendar MIME content that\n   fully\
    \ conforms to [iCAL] iCalendar format.\n   This example tells the CS to generate\
    \ and return 10 UIDs to be used\n   by the CUA.  Note that throughout this memo,\
    \ 'C:' refers to what the\n   CUA sends, 'S:' refers to what the CS sends, 'I:'\
    \ refers to what the\n   initiator sends, and 'L:' refers to what the listener\
    \ sends.  Here\n   initiator and listener are used as defined in [BEEP].\n   \
    \   C: MSG 1 2 . 432 62\n      C: Content-Type: text/calendar\n      C:\n    \
    \  C: BEGIN:VCALENDAR\n      C: VERSION:2.0\n      C: PRODID:-//someone's prodid\n\
    \      C: CMD;ID=unique-per-cua-123;OPTIONS=10:GENERATE-UID\n      C: END:VCALENDAR\n\
    \   NOTE: The following examples will not include the [BEEP] header and\n   footer\
    \ information.  Only the iCalendar objects that are sent between\n   the CUA and\
    \ CS will be shown because the [BEEP] payload boundaries\n   are independent of\
    \ CAP.\n   The commands listed below are used to manipulate or access the data\n\
    \   on the calendar store:\n   ABORT -  Sent to halt the processing of some of\
    \ the commands.\n      (Section 10.2)\n   CONTINUE -  Sent to continue processing\
    \ a command that has reached\n      its specified timeout time.  (Section 10.3)\n\
    \   CREATE -  Create a new object on the CS.  Initiated only by the CUA.\n   \
    \   (Section 10.4)\n   SET-LOCALE -  Tell the CS to use any named locale and charset\n\
    \      supplied.  Initiated by the CUA only.  (Section 10.13)\n   DELETE -  Delete\
    \ objects from the CS.  Initiated only by the CUA.\n      Can also be used to\
    \ mark an object for deletion.  (Section 10.5)\n   GENERATE-UID -  Generate one\
    \ or more unique ids.  Initiated only by\n      the CUA.  (Section 10.6)\n   GET-CAPABILITY\
    \ - Query the capabilities of the other end point of the\n      session.  (Section\
    \ 10.7)\n   IDENTIFY -  Set a new identity for the session.  Initiated only by\n\
    \      the CUA.  (Section 10.8)\n   MODIFY -  Modify components.  Initiated by\
    \ the CUA only.  (Section\n      10.9)\n   MOVE -  Move components to another\
    \ container.  Initiated only by the\n      CUA.  (Section 10.10)\n   REPLY - \
    \ When replying to a command, the \"CMD\" value will be set to\n      \"REPLY\"\
    \ so that it will not be confused with a new command.\n      (Section 10.11)\n\
    \   SEARCH -  Search for components.  Initiated only by the CUA.\n      (Section\
    \ 10.12)\n   TIMEOUT -  Sent when a specified amount of time has lapsed and a\n\
    \      command has not finished.  (Section 10.14)\n"
- title: 4.  Security Model
  contents:
  - "4.  Security Model\n   BEEP transport performs all session authentication.\n"
- title: 4.1.  Calendar User and UPNs
  contents:
  - "4.1.  Calendar User and UPNs\n   A CU is an entity that can be authenticated.\
    \  It is represented in\n   CAP as a UPN, which is a key part of access rights.\
    \  The UPN\n   representation is independent of the authentication mechanism used\n\
    \   during a particular CUA/CS interaction.  This is because UPNs are\n   used\
    \ within VCARs.  If the UPN were dependent on the authentication\n   mechanism,\
    \ a VCAR could not be consistently evaluated.  A CU may use\n   one mechanism\
    \ while using one CUA, but the same CU may use a\n   different authentication\
    \ mechanism when using a different CUA, or\n   while connecting from a different\
    \ location.\n   The user may also have multiple UPNs for various purposes.\n \
    \  Note that the immutability of the user's UPN may be achieved by using\n   SASL's\
    \ authorization identity feature.  The transmitted authorization\n   identity\
    \ may be different than the identity in the client's\n   authentication credentials\
    \ [SASL, section 3].  This also permits a CU\n   to authenticate using their own\
    \ credentials, yet request the access\n   privileges of the identity for which\
    \ they are proxying SASL.  Also,\n   the form of authentication identity supplied\
    \ by a service like TLS\n   may not correspond to the UPNs used to express a server's\
    \ access\n   rights, requiring a server-specific mapping to be done.  The method\n\
    \   by which a server determines a UPN, based on the authentication\n   credentials\
    \ supplied by a client, is implementation-specific.  See\n   [BEEP] for authentication\
    \ details; [BEEP] relies on SASL.\n"
- title: 4.1.1.  UPNs and Certificates
  contents:
  - "4.1.1.  UPNs and Certificates\n   When using X.509 certificates for purposes\
    \ of CAP authentication, the\n   UPN should appear in the certificate.  Unfortunately,\
    \ there is no\n   single correct guideline for which field should contain the\
    \ UPN.\n   Quoted from RFC-2459, section 4.1.2.6 (Subject):\n         If subject\
    \ naming information is present only in the\n         subjectAlt-Name extension\
    \ (e.g., a key bound only to an email\n         address or URI), then the subject\
    \ name MUST be an empty\n         sequence and the subjectAltName extension MUST\
    \ be critical.\n         Implementations of this specification MAY use these comparison\n\
    \         rules to process unfamiliar attribute types (i.e., for name\n      \
    \   chaining).  This allows implementations to process certificates\n        \
    \ with unfamiliar attributes in the subject name.\n         In addition, legacy\
    \ implementations exist where an RFC 2822\n         name [RFC2822] is embedded\
    \ in the subject distinguished name as\n         an EmailAddress attribute.  The\
    \ attribute value for\n         EmailAddress is of type IA5String to permit inclusion\
    \ of the\n         character '@', which is not part of the PrintableString\n \
    \        character set.  EmailAddress attribute values are not case\n        \
    \ sensitive (e.g., \"fanfeedback@redsox.example.com\" is the same\n         as\
    \ \"FANFEEDBACK@REDSOX.EXAMPLE.COM\").\n         Conforming implementations generating\
    \ new certificates with\n         electronic mail addresses MUST use the rfc822Name\
    \ in the\n         subject alternative name field (see sec. 4.2.1.7 of [X509CRL])\n\
    \         to describe such identities.  Simultaneous inclusion of the\n      \
    \   EmailAddress attribute in the subject distinguished name to\n         support\
    \ legacy implementations is deprecated but permitted.\n   Since no single method\
    \ of including the UPN in the certificate will\n   work in all cases, CAP implementations\
    \ MUST support the ability to\n   configure what the mapping will be by the CS\
    \ administrator.\n   Implementations MAY support multiple mapping definitions,\
    \ for\n   example, the UPN may be found in either the subject alternative name\n\
    \   field, or the UPN may be embedded in the subject distinguished name\n   as\
    \ an EmailAddress attribute.\n   Note: If a CS or CUA is validating data received\
    \ via [iMIP], if the\n   \"ORGANIZER\" or \"ATTENDEE\" properties said, for example,\n\
    \   \"ATTENDEE;CN=Joe Random User:MAILTO:juser@example.com\", then the\n   email\
    \ address should be checked against the UPN.  This is so the\n   \"ATTENDEE\"\
    \ property cannot be changed to something misleading like\n   \"ATTENDEE;CN=Joe\
    \ Rictus User:MAILTO:jrictus@example.com\" and have it\n   pass validation.  Note\
    \ that it is the email addresses that\n   miscompare, the CN miscompare is irrelevant.\n"
- title: 4.1.2.  Anonymous Users and Authentication
  contents:
  - "4.1.2.  Anonymous Users and Authentication\n   Anonymous access is often desirable.\
    \  For example, an organization\n   may publish calendar information that does\
    \ not require any access\n   control for viewing or login.  Conversely, a user\
    \ may wish to view\n   unrestricted calendar information without revealing their\
    \ identity.\n"
- title: 4.1.3.  User Groups
  contents:
  - "4.1.3.  User Groups\n   A User Group is used to represent a collection of CUs\
    \ or other UGs\n   that can be referenced in VCARs.  A UG is represented in CAP\
    \ as a\n   UPN.  The CUA cannot distinguish between a UPN that represents a CU\n\
    \   or a UG.\n   UGs are expanded as necessary by the CS.  The CS MAY expand a\
    \ UG\n   (including nested UGs) to obtain a list of unique CUs.  Duplicate\n \
    \  UPNs are filtered during expansion.\n   How the UG expansion is maintained\
    \ across commands is\n   implementation-specific.  A UG may reference a static\
    \ list of\n   members, or it may represent a dynamic list.  Operations SHOULD\n\
    \   recognize changes to UG membership.\n   CAP does not define commands or methods\
    \ for managing UGs.\n"
- title: 4.2.  Access Rights
  contents:
  - "4.2.  Access Rights\n   Access rights are used to grant or deny access to calendars,\n\
    \   components, properties, and parameters in a CS to a CU.  CAP defines\n   a\
    \ new component type called a Calendar Access Right (VCAR).\n   Specifically,\
    \ a \"VCAR\" component grants, or denies, UPNs the right to\n   search and write\
    \ components, properties, and parameters on calendars\n   within a CS.\n   The\
    \ \"VCAR\" component model does not put any restriction on the\n   sequence in\
    \ which the object and access rights are created.  That is,\n   an object associated\
    \ with a particular \"VCAR\" component might be\n   created before or after the\
    \ actual \"VCAR\" component is defined.  In\n   addition, the \"VCAR\" and \"\
    VEVENT\" components might be created in the\n   same iCalendar object and passed\
    \ together in a single object.\n   All rights MUST be denied unless specifically\
    \ granted.\n   If two rights specified in \"VCAR\" components are in conflict,\
    \ the\n   right that denies access always takes precedence over the right that\n\
    \   grants access.  Any attempt to create a \"VCAR\" component that\n   conflicts\
    \ with a \"VCAR\" components with a \"DECREED\" property set to\n   the \"TRUE\"\
    \ value must fail.\n"
- title: 4.2.1.  Access Control and NOCONFLICT
  contents:
  - "4.2.1.  Access Control and NOCONFLICT\n   The \"TRANSP\" property can take on\
    \ values -- \"TRANSPARENT-NOCONFLICT\"\n   and \"OPAQUE-NOCONFLICT\" -- that prohibit\
    \ other components from\n   overlapping it.  This setting overrides access.  The\
    \ \"ALLOW-CONFLICT\"\n   CS, Calendar or component setting may also prevent overlap,\
    \ returning\n   an error code \"6.3\".\n"
- title: 4.2.2.  Predefined VCARs
  contents:
  - "4.2.2.  Predefined VCARs\n   The predefined calendar access CARIDs that MUST\
    \ be implemented are:\n      CARID:READBUSYTIMEINFO -  Specifies the \"GRANT\"\
    \ and \"DENY\" rules\n         that allow UPNs to search \"VFREEBUSY\" components.\
    \  An example\n         definition for this VCAR is:\n            BEGIN:VCAR\n\
    \            CARID:READBUSYTIMEINFO\n            BEGIN:VRIGHT\n            GRANT:*\n\
    \            PERMISSION:SEARCH\n            SCOPE:SELECT * FROM VFREEBUSY WHERE\
    \ STATE() = 'BOOKED'\n            END:VRIGHT\n            END:VCAR\n      CARID:REQUESTONLY\
    \ -  Specifies the \"GRANT\" and \"DENY\" rules to\n         UPNs other than the\
    \ owner of the calendar and specifies the\n         ability to write new objects\
    \ with the \"METHOD\" property set to\n         the \"REQUEST\" value.  This CARID\
    \ allows the owner to specify\n         which UPNs are allowed to make scheduling\
    \ requests.  An example\n         definition for this VCAR is:\n            BEGIN:VCAR\n\
    \            CARID:REQUESTONLY\n            BEGIN:VRIGHT\n            GRANT:NON\
    \ CAL-OWNERS()\n            PERMISSION:CREATE\n            RESTRICTION:SELECT\
    \ VEVENT FROM VAGENDA\n                WHERE METHOD = 'REQUEST'\n            RESTRICTION:SELECT\
    \ VTODO FROM VAGEND\n                WHERE METHOD = 'REQUEST'\n            RESTRICTION:SELECT\
    \ VJOURNAL FROM VAGEND\n                WHERE METHOD = 'REQUEST'\n           \
    \ END:VRIGHT\n            END:VCAR\n      CARID:UPDATEPARTSTATUS -  Grants authenticated\
    \ users the right to\n         modify the instances of the \"ATTENDEE\" property\
    \ set to one of\n         their calendar addresses in any components for any booked\n\
    \         component containing an \"ATTENDEE\" property.  This allows (or\n  \
    \       denies) a CU the ability to update their own participation\n         status\
    \ in a calendar where they might not otherwise have\n         \"MODIFY\" command\
    \ access.  They are not allowed to change the\n         \"ATTENDEE\" property\
    \ value.  An example definition for this VCAR\n         (only affecting the \"\
    VEVENT\" components) is:\n            BEGIN:VCAR\n            CARID:UPDATEPARTSTATUS\n\
    \            BEGIN:VRIGHT\n            GRANT:*\n            PERMISSION:MODIFY\n\
    \            SCOPE:SELECT ATTENDEE FROM VEVENT\n             WHERE ATTENDEE =\
    \ SELF()\n             AND ORGANIZER = CURRENT-TARGET()\n             AND STATE()\
    \ = 'BOOKED'\n            RESTRICTION:SELECT * FROM VEVENT\n             WHERE\
    \ ATTENDEE = SELF()\n            END:VRIGHT\n            END:VCAR\n      CARID:DEFAULTOWNER\
    \ -  Grants to any owner the permission they have\n         for the target.  An\
    \ example definition for this VCAR is:\n            BEGIN:VCAR\n            CARID:DEFAULTOWNER\n\
    \            BEGIN:VRIGHT\n            GRANT:CAL-OWNERS()\n            PERMISSION:*\n\
    \            SCOPE:SELECT * FROM VAGENDA\n            END:VRIGHT\n           \
    \ END:VCAR\n"
- title: 4.2.3.  Decreed VCARs
  contents:
  - "4.2.3.  Decreed VCARs\n   A CS MAY choose to implement and allow persistent immutable\
    \ VCARs\n   that may be configured by the CS administrator.  A reply from the\
    \ CS\n   may dynamically create \"VCAR\" components that are decreed depending\n\
    \   on the implementation.  To the CUA, any \"VCAR\" component with the\n   \"\
    DECREED\" property set to \"TRUE\" cannot be changed by the currently\n   authenticated\
    \ UPN, and, depending on the implementation and other\n   \"VCAR\" components,\
    \ might not be able to be changed by any UPN using\n   CAP (never when the CUA\
    \ gets a \"DECREED:TRUE\" VCAR).\n   When a user attempts to modify or override\
    \ a decreed \"VCAR\" component\n   rules, an error will be returned indicating\
    \ that the user has\n   insufficient authorization to perform the operation. \
    \ The reply to\n   the CUA MUST be the same as if a non-decreed VCAR caused the\
    \ failure.\n   The CAP protocol does not define the semantics used to initially\n\
    \   create a decreed VCAR.  This administrative task is outside the scope\n  \
    \ of the CAP protocol.\n   For example, an implementation or a CS administrator\
    \ may wish to\n   define a VCAR that will always allow the calendar owners to\
    \ have full\n   access to their own calendars.\n   Decreed \"VCAR\" components\
    \ MUST be readable by the calendar owner in\n   standard \"VCAR\" component format.\n"
- title: 4.3.  CAP Session Identity
  contents:
  - "4.3.  CAP Session Identity\n   A [BEEP] session has an associated set of authentication\
    \ credentials,\n   from which is derived a UPN.  This UPN is the identity of the\
    \ CAP\n   session, and is used to determine access rights for the session.\n \
    \  The CUA may change the identity of a CAP session by calling the\n   \"IDENTIFY\"\
    \ command.  The CS only permits the operation if the\n   session's authentication\
    \ credentials are good for the requested\n   identity.  The method of checking\
    \ this permission is implementation-\n   dependent, but it may be thought of as\
    \ a mapping from authentication\n   credentials to UPNs.  The \"IDENTIFY\" command\
    \ allows a single set of\n   authentication credentials to choose from multiple\
    \ identities, and\n   allows multiple sets of authentication credentials to assume\
    \ the same\n   identity.\n   For anonymous access, the identity of the session\
    \ is \"@\".  A UPN with\n   a null Username and null Realm is anonymous.  A UPN\
    \ with a null\n   Username but non-null Realm (e.g.,\"@example.com\") may be used\
    \ to mean\n   any identity from that Realm.  This is useful to grant access rights\n\
    \   to all users in a given Realm.  A UPN with a non-null Username and\n   null\
    \ Realm (e.g., \"bob@\") could be a security risk and MUST NOT be\n   used.\n\
    \   Because the UPN includes Realm information, it may be used to govern\n   calendar\
    \ store access rights across Realms.  However, governing\n   access rights across\
    \ Realms is only useful if login access is\n   available.  This could be done\
    \ through a trusted server relationship\n   or a temporary account.  Note that\
    \ trusted server relationships are\n   outside the scope of CAP.\n   The \"IDENTIFY\"\
    \ command also provides for a weak group implementation.\n   By allowing multiple\
    \ sets of authentication credentials belonging to\n   different users to identify\
    \ as the same UPN, that UPN essentially\n   identifies a group of people, and\
    \ may be used for group calendar\n   ownership, or the granting of access rights\
    \ to a group.\n"
- title: 5.  CAP URL and Calendar Address
  contents:
  - "5.  CAP URL and Calendar Address\n   The CAP URL scheme is used to designate\
    \ both calendar stores and\n   calendars accessible using the CAP protocol.\n\
    \   The CAP URL scheme conforms to the generic URL syntax defined in RFC\n   2396\
    \ and follows the Guidelines for URL Schemes set forth in RFC\n   2718.\n   A\
    \ CAP URL begins with the protocol prefix \"cap\" and is defined by the\n   following\
    \ grammar.\n      capurl   = \"cap://\" csidpart [ \"/\" relcalid ]\n        \
    \              ;\n      csidpart = hostport   ; As defined in Section 3.2.2 of\
    \ RFC 2396\n                            ;\n      relcalid = *uric      ; As defined\
    \ in Section 2 of RFC 2396\n   A 'relcalid' is an identifier that uniquely identifies\
    \ a calendar on\n   a particular calendar store.  There is no implied structure\
    \ in a\n   Relative CALID (relcalid).  It may refer to the calendar of a user\
    \ or\n   of a resource such as a conference room.  It MUST be unique within\n\
    \   the calendar store.\n   Here are some examples:\n      cap://cal.example.com\n\
    \      cap://cal.example.com/Company/Holidays\n      cap://cal.example.com/abcd1234Usr\n\
    \   A 'relcalid' is permitted and is resolved according to the rules\n   defined\
    \ in Section 5 of RFC 2396.\n   Examples of valid relative CAP URLs:\n      opqaueXzz123String\n\
    \      UserName/Personal\n   Calendar addresses can be described as qualified\
    \ or relative CAP\n   URLs.\n   For a user currently authenticated to the CS on\
    \ cal.example.com,\n   these two example calendar addresses refer to the same\
    \ calendar:\n      cap://cal.example.com/abcd1234USR\n      abcd1234USR\n"
- title: 6.  New Value Types
  contents:
  - "6.  New Value Types\n   The following sections contains new components, properties,\n\
    \   parameters, and value definitions.\n   The purpose of these is to extend the\
    \ iCalendar objects in a\n   compatible way so that existing iCalendar \"VERSION\"\
    \ property \"2.0\"\n   value parsers can still parse the objects without modification.\n"
- title: 6.1.  Property Value Data Types
  contents:
  - '6.1.  Property Value Data Types

    '
- title: 6.1.1.  CAL-QUERY Value Type
  contents:
  - "6.1.1.  CAL-QUERY Value Type\n   Subject: Registration of text/calendar MIME\
    \ value type CAL-QUERY\n   Value Name: CAL-QUERY\n   Value Type Purpose: This\
    \ value type is used to identify values and\n      contains query statements targeted\
    \ at locating those values.  This\n      is based on [SQL92] and [SQLCOM].\n \
    \     1.  For the purpose of a query, all components should be handled\n     \
    \     as tables, and the properties of those components should be\n          handled\
    \ as columns.\n      2.  All VAGENDAs and CSs look like tables for the purpose\
    \ of a\n          QUERY, and all of their properties look like columns in those\n\
    \          tables.\n      3.  You MUST NOT do any cross-component-type joins.\
    \  That means\n          you can ONLY have one component OR one \"VAGENDA\" component\
    \ OR\n          one \"VCALSTORE\" component in the \"FROM\" clause.\n      4.\
    \  Everything in the \"SELECT\" clause and \"WHERE\" clauses MUST be\n       \
    \   from the same component type or \"VAGENDA\" component OR\n          \"VCALSTORE\"\
    \ component in the \"FROM\" clause.\n      5.  When multiple \"QUERY\" properties\
    \ are supplied in a single\n          \"VQUERY\" component, the results returned\
    \ are the same as the\n          results returned for multiple \"VQUERY\" components\
    \ that each\n          have a single \"QUERY\" property.\n      6.  The '.' is\
    \ used to separate the table name (component) and\n          column name (property\
    \ or component) when selecting a property\n          that is contained inside\
    \ a component that is targeted in the\n          TARGET property.\n      7.  A\
    \ contained component without a '.' is not the same as\n          \"component-name.*\"\
    .  If given as \"component-name\" (no dot),\n          the encapsulating BEGIN/END\
    \ statement will be supplied for\n          \"component-name\".\n   In the following\
    \ example, '.' is used to separate the \"TRIGGER\"\n   property from its contained\
    \ component (VALARM), which is contained in\n   any \"VEVENT\" component in the\
    \ selected \"TARGET\" property value (a\n   relcalid).  All \"TRIGGER\" properties\
    \ in any \"VEVENT\" component in\n   relcalid would be returned.\n      TARGET:relcalid\n\
    \      QUERY:SELECT VALARM.TRIGGER FROM VEVENT\n      SELECT VALARM FROM VEVENT\
    \ WHERE UID = \"123\"\n   This returns one BEGIN/END \"VALARM\" component for\
    \ each \"VALARM\"\n   component in the matching \"VEVENT\" component.  As there\
    \ is no '.'\n   (dot) in the VALARM after the SELECT above, it returns:\n    \
    \  BEGIN:VALARM\n      TRIGGER;RELATED=END:PT5M\n      REPEAT:4\n      ...\n \
    \     END:VALARM\n      BEGIN:VALARM\n      TRIGGER;RELATED=START:PT5M\n     \
    \ DURATION:PT10M\n      ...\n      END:VALARM\n      ...\n      ...\n  If the\
    \ SELECT parameter is provided as \"component-name.*\", then only\n  the properties\
    \ and any contained components will be returned.  The\n  example:\n     SELECT\
    \ VALARM.* FROM VEVENT WHERE UID = \"123\"\n  will return all of the properties\
    \ in each \"VALARM\" component in the\n  matching \"VEVENT\" component:\n    \
    \  TRIGGER;RELATED=END:PT5M\n      REPEAT:4\n      ...\n      TRIGGER;RELATED=START:PT5M\n\
    \      DURATION:PT10M\n      ...\n      ...\n  In the following SELECT clauses:\n\
    \     (a) SELECT <a-property-name> FROM VEVENT\n     (b) SELECT VALARM FROM VEVENT\n\
    \     (c) SELECT VALARM.* FROM VEVENT\n     (d) SELECT * FROM VEVENT\n     (e)\
    \ SELECT * FROM VEVENT WHERE\n             VALARM.TRIGGER < '20020201T000000Z'\n\
    \             AND VALARM.TRIGGER > '20020101T000000Z'\n  Clause (a) elects all\
    \ instances of <a-property-name> from all \"VEVENT\"\n  components.\n  Clauses\
    \ (b) and (c) select all \"VALARM\" components from all \"VEVENT\"\n  components.\
    \ (b) would return them in BEGIN/END VALARM tags. (c) would\n  return all of the\
    \ properties without BEGIN/END VALARM tags.\n  Clause (d) selects every property\
    \ and every component that is in any\n  \"VEVENT\" component, with each \"VEVENT\"\
    \ component wrapped in a\n  BEGIN/END VEVENT tags.\n  Clause (e) selects all properties\
    \ and all contained components in all\n  \"VEVENT\" components that have a \"\
    VALARM\" component with a \"TRIGGER\"\n  property value between the provided dates\
    \ and times, with each\n  \"VEVENT\" component wrapped in BEGIN/END VEVENT tags.\n\
    \   Here are two invalid SELECT clauses:\n      (f) SELECT VEVENT.VALARM.TRIGGER\
    \ FROM VEVENT\n      (g) SELECT DTSTART,UID FROM VEVENT\n            WHERE VTODO.SUMMERY\
    \ = \"Fix typo in CAP\"\n   Clause (f) is invalid because it contains two '.'\
    \ characters.\n   Clause (g) Is invalid because it mixes VEVENT\n   and VTODO\
    \ properties in the same VQUERY.\n   Formal Definition: The value type is defined\
    \ by the following\n   notation:\n     cal-query  = \"SELECT\"   SP   cap-val\
    \  SP\n                  \"FROM\"     SP   comp-name SP\n                  \"\
    WHERE\"    SP   cap-expr\n                / \"SELECT\" SP cap-cols SP\n      \
    \            \"FROM\"   SP comp-name\n                  ;\n     cap-val    = cap-cols\
    \ / param\n                / ( cap-val \",\" cap-val )\n                  ; NOTE:\
    \ there is NO space around the \",\" on\n                  ; the next line\n \
    \    cap-cols   = cap-col / ( cap-cols \",\" cap-col)\n                  / \"\
    *\"\n                  / \"*.*\" ; only valid when the target is a \"VAGENDA\"\
    \n                  ;\n                  ; A 'cap-col' is:\n                 \
    \ ;\n                  ; Any property name ('cap-prop') found in the\n       \
    \           ; component named in the 'comp-name' used in the\n               \
    \   ; \"FROM\" clause.\n                  ;\n                  ;   SELECT ORGANIZER\
    \ FROM VEVENT ...\n                  ;\n                  ; OR\n             \
    \     ;\n                  ; A component name ('comp-name') of an existing\n \
    \                 ; component contained inside of the 'comp-name'\n          \
    \        ; used in the \"FROM\" clause.\n                  ;\n               \
    \   ;   SELECT VALARM FROM VEVENT ...\n                  ;\n                 \
    \ ; OR\n                  ;\n                  ; A component name ('comp-name')\
    \ of an existing\n                  ; component contained inside of the 'comp-name'\
    \ used\n                  ; in the \"FROM\" clause followed by a property\n  \
    \                ; name ('cap-prop') to be selected from that\n              \
    \    ; component.\n                  ; (comp-name \".\" cap-prop)\n          \
    \        ;   SELECT VALARM.TRIGGER FROM VEVENT ...\n     cap-col    = comp-name\n\
    \                / comp-name \".\" cap-prop\n                / cap-prop\n    \
    \ comp-name  = \"VEVENT\"  / \"VTODO\"     / \"VJOURNAL\" / \"VFREEBUSY\"\n  \
    \              / \"VALARM\"  / \"DAYLIGHT\"  / \"STANDARD\" / \"VAGENDA\"\n  \
    \              / \"VCAR\"    / \"VCALSTORE\" / \"VQUERY\"   / \"VTIMEZONE\"\n\
    \                / \"VRIGHT\"  / x-comp    / iana-comp\n     cap-prop   = ; A\
    \ property that may be in the 'cap-comp' named\n                  ; in the \"\
    SELECT\" clause.\n     cap-expr   = \"(\" cap-expr \")\"\n                / cap-term\n\
    \     cap-term   = cap-expr SP cap-logical SP cap-expr\n                / cap-factor\n\
    \     cap-logical= \"AND\" / \"OR\"\n     cap-factor = cap-colval SP cap-oper\
    \ SP col-value\n                / cap-colval SP \"LIKE\" SP col-value\n      \
    \          / cap-colval SP \"NOT LIKE\" SP col-value\n                / cap-colval\
    \ SP \"IS NULL\"\n                / cap-colval SP \"IS NOT NULL\"\n          \
    \      / col-value SP \"IN\" cap-colval\n                / col-value SP \"NOT\
    \ IN\" cap-colval\n                / \"STATE()\" \"=\" ( \"BOOKED\"\n        \
    \                         / \"UNPROCESSED\"\n                                \
    \ / \"DELETED\"\n                                 / iana-state\n             \
    \                    / x-state )\n                  ;\n     iana-state = ; Any\
    \ state registered by IANA directly or\n                  ; included in an RFC\
    \ that may be applied to\n                  ; the component and within the rules\
    \ published.\n                  ;\n     x-state    = ; Any experimental state\
    \ that starts with\n                  ; \"x-\" or \"X-\".\n     cap-colval = cap-col\
    \ /  param\n                  ;\n     param      = \"PARAM(\" cap-col \",\" cap-param\
    \ \")\"\n                  ;\n     cap-param  = ; Any parameter that may be contained\
    \ in the cap-col\n                  ; in the supplied PARAM() function\n     col-value\
    \  = col-literal\n                / \"SELF()\"\n                / \"CAL-OWNERS()\"\
    \n                / \"CAL-OWNERS(\" cal-address \")\"\n                / \"CURRENT-TARGET()\"\
    \n                   ;\n     cal-address = ; A CALID as define by CAP\n      \
    \             ;\n     col-literal = \"'\" literal-data \"'\"\n               \
    \    ;\n     literal-data = ; Any data that matches the value type of the\n  \
    \                 ; column that is being compared.  That is, you\n           \
    \        ; cannot compare PRIORITY to \"some string\" because\n              \
    \     ; PRIORITY has a value type of integer.  If it is\n                   ;\
    \ not preceded by the LIKE element, any '%' and '_'\n                   ; characters\
    \ in the literal data are not treated as\n                   ; wildcard characters\
    \ and do not have to be\n                   ; backslash-escaped.\n           \
    \        ;\n                   ; OR\n                   ;\n                  \
    \ ; If the literal-data is preceded by the LIKE\n                   ; element\
    \ it may also contain the '%' and '_'\n                   ; wildcard characters.\
    \  And, if the literal data\n                   ; that is comparing contains any\
    \ '%' or '_'\n                   ; characters, they MUST be backslash-escaped\
    \ as\n                   ; described in the notes below, in order for them\n \
    \                  ; not to be treated as wildcard characters.\n             \
    \      ;\n                   ; And, if the literal data contains any characters\n\
    \                   ; that would have to be backslash-escaped if\n           \
    \        ; a property or parameter value, then they must\n                   ;\
    \ be backslash-escaped in the literal-data.\n                   ; Also, the quote\
    \ character (') must be backslash\n                   ; escaped.  Example:\n \
    \                  ;\n                   ; ... WHERE SUBJECT = 'It\\'s time to\
    \ ski'\n                   ;\n     cap-oper    = \"=\"\n                 / \"\
    !=\"\n                 / \"<\"\n                 / \">\"\n                 / \"\
    <=\"\n                 / \">=\"\n                   ;\n     SP          = ; A\
    \ single white space ASCII character\n                   ; (value in HEX %x20).\n\
    \                   ;\n     x-comp      = ; As defined in [iCAL] section 4.6.\n\
    \                   ;\n     iana-comp   = ; As defined in [iCAL] section 4.6.\n"
- title: 6.1.1.1.  [NOT] CAL-OWNERS()
  contents:
  - "6.1.1.1.  [NOT] CAL-OWNERS()\n   This function returns the list of \"OWNER\"\
    \ properties for the named\n   calendar when used in the \"SELECT\" clause.\n\
    \   If called as 'CAL-OWNERS()', it is equivalent to the comma-separated\n   list\
    \ of all of the owners of the calendar that match the provided\n   \"TARGET\"\
    \ property value.  If the target is a \"VCALSTORE\", it returns\n   the \"CALMASTER\"\
    \ property.\n   If called as 'CAL-OWNERS(cal-address)', then it is the equivalent\
    \ to\n   the comma-separated list of owners for the named calendar id.  If\n \
    \  'cal-address' is a CS, it returns the \"CALMASTER\" property.\n   If used in\
    \ the \"WHERE\" clause, it returns true if the currently\n   authenticated UPN\
    \ is an owner of the currently selected object\n   matched in the provided \"\
    TARGET\" property.  Used in a CAL-QUERY\n   \"WHERE\" clause and in the UPN-FILTER.\n"
- title: 6.1.1.2.  CURRENT-TARGET()
  contents:
  - "6.1.1.2.  CURRENT-TARGET()\n   This is equivalent to the value of the \"TARGET\"\
    \ property in the\n   current command.  It is used in a CAL-QUERY \"WHERE\" clause.\n"
- title: 6.1.1.3.  PARAM()
  contents:
  - "6.1.1.3.  PARAM()\n   This is used in a CAL-QUERY.  It returns or tests for the\
    \ value of\n   the named parameter from the named property.\n"
- title: 6.1.1.3.1.  PARAM() in SELECT
  contents:
  - "6.1.1.3.1.  PARAM() in SELECT\n   When used in a \"SELECT\" clause, it returns\
    \ the entire property and\n   all of that property's parameters; the result is\
    \ not limited to the\n   supplied parameter.  If the property does not contain\
    \ the named\n   parameter, then the property is not returned.  However, it could\
    \ be\n   returned as a result of another \"SELECT\" clause value.  If multiple\n\
    \   properties of the supplied name have the named parameter, all\n   properties\
    \ with that named parameter are returned.  If multiple\n   PARAM() clauses in\
    \ a single \"SELECT\" CLAUSE match the same property,\n   then the single matching\
    \ property is returned only once.\n   Also, note that many parameters have default\
    \ values defined in [iCAL]\n   that must be treated as existing with their default\
    \ value in the\n   properties, as defined in [iCAL], even when not explicitly\
    \ present.\n   For example, if a query were performed with PARAM(ATTENDEE,ROLE)\
    \ then\n   ALL \"ATTENDEE\" properties would match because, even when they do\
    \ not\n   explicitly contain the \"ROLE\" parameter, it has a default value and\n\
    \   therefore must match.\n   Therefore, when PARAM() is used in a \"SELECT\"\
    \ clause, it is more\n   accurate to say that it means return the property, if\
    \ it contains the\n   named parameter explicitly in the property or simply because\
    \ the\n   parameter has a default for that property.\n"
- title: 6.1.1.3.2.  PARAM() in WHERE
  contents:
  - "6.1.1.3.2.  PARAM() in WHERE\n   When PARAM() is used in the \"WHERE\" clause,\
    \ a match is true when the\n   parameter value matches the compare clause (according\
    \ to the supplied\n   WHERE values).  If multiple named properties contain the\
    \ named\n   parameter, then each parameter value is compared in turn to the\n\
    \   condition; if any match, the results would be true for that condition\n  \
    \ the same as if only one had existed.  Each matching property or\n   component\
    \ is returned only once.\n   Because a parameter may be multi-valued, the comparison\
    \ might need to\n   be done with an \"IN\" or \"NOT IN\" comparator.\n   Given\
    \ the following query:\n      ATTENDEE;PARTSTAT=ACCEPTED:cap://host.com/joe\n\
    \      SELECT VEVENT FROM VAGENDA\n       WHERE PARAM(ATTENDEE,PARTSTAT) = 'ACCEPTED'\n\
    \   Thus, all \"VEVENT\" components that contain one or more \"ATTENDEE\"\n  \
    \ properties that have a \"PARTSTAT\" parameter with a \"ACCEPTED\" value\n  \
    \ would be returned.  Also, each uniquely matching VEVENT would be\n   returned\
    \ only once, no matter how many \"ATTENDEE\" properties had\n   matching roles,\
    \ in each unique \"VEVENT\" component.\n   Also note that many parameters have\
    \ default values defined in [iCAL].\n   Therefore, if the following query were\
    \ performed on the \"ATTENDEE\"\n   property in the above example:\n      SELECT\
    \ VEVENT FROM VAGENDA\n       WHERE PARAM(ATTENDEE,ROLE) = 'REQ-PARTICIPANT'\n\
    \   It would return the \"ATTENDEE\" property shown above because the\n   default\
    \ value for the \"ROLE\" parameter is \"REQ-PARTICIPANT\".\n"
- title: 6.1.1.4.  SELF()
  contents:
  - "6.1.1.4.  SELF()\n   Used in a CAL-QUERY \"WHERE\" clause.  Returns the UPN of\
    \ the currently\n   authenticated UPN or their current UPN as a result of an IDENTIFY\n\
    \   command.\n"
- title: 6.1.1.5.  STATE()
  contents:
  - "6.1.1.5.  STATE()\n   Returns one of three values, \"BOOKED\", \"UNPROCESSED\"\
    , or \"DELETED\"\n   depending on the state of the object.  \"DELETED\" is a component\
    \ in\n   the marked-for-delete state.  Components that have been removed from\n\
    \   the store are never returned.\n   If not specified in a query then both \"\
    BOOKED\" and \"UNPROCESSED\" data\n   is returned.  Each unique \"METHOD\" property\
    \ must be in a separate\n   MIME object, per the [iCAL] section 3.2 restriction.\n"
- title: 6.1.1.6.  Use of Single Quote
  contents:
  - "6.1.1.6.  Use of Single Quote\n   All literal values are surrounded by single\
    \ quotes ('), not double\n   quotes (\"), and not without any quotes.  If the\
    \ value contains quotes\n   or any other ESCAPED-CHAR, they MUST be backslash-escaped\
    \ as\n   described in section 4.3.11 \"Text\" of [iCAL].  Any \"LIKE\" clause\n\
    \   wildcard characters that are part of any literal data that is\n   preceded\
    \ by a \"LIKE\" clause or \"NOT LIKE\" clause and is not intended\n   to mean\
    \ wildcard search MUST be escaped as described in note (7)\n   below.\n"
- title: 6.1.1.7.  Comparing DATE and DATE-TIME Values
  contents:
  - "6.1.1.7.  Comparing DATE and DATE-TIME Values\n   When comparing \"DATE-TIME\"\
    \ values to \"DATE\" values and when comparing\n   \"DATE\" values to \"DATE-TIME\"\
    \ values, the result will be true if the\n   \"DATE\" value is on the same day\
    \ as the \"DATE-TIME\" value.  They are\n   compared in UTC no matter what time\
    \ zone the data may have been\n   stored in.\n   Local time event, as described\
    \ in section 4.2.19 of [iCAL], must be\n   considered to be in the CUA default\
    \ timezone that was supplied by the\n   CUA in the \"CAPABILITY\" exchange.\n\
    \      VALUE-1             VALUE-2            Compare Results\n      20020304\
    \            20020304T123456    TRUE\n      (in UTC-3)          (in UTC-3)\n \
    \     20020304            20020304T003456    FALSE\n      (in UTC)           \
    \ (in UTC-4)\n      20020304T003456Z    20020205T003456    FALSE\n      (in UTC-0)\
    \          (in UTC-7)\n   When \"DATE\" values and \"DATE-TIME\" values are compared\
    \ with the\n   \"LIKE\" clause, the comparison will be done as if the value is\
    \ a\n   [iCAL] DATE or DATE-TIME string value.\n      LIKE '2002%' will match\
    \ anything in the year 2002.\n      LIKE '200201%' will match anything in January\
    \ 2002.\n      LIKE '%T000000' will match anything at midnight.\n      LIKE '____01__T%'\
    \ will match anything for any year or\n                    time that is in January.\n\
    \                    (Four '_', '01', two '_' 'T%').\n   Using a \"LIKE\" clause\
    \ value of \"%00%\", would return any value that\n   contained two consecutive\
    \ zeros.\n   All comparisons will be done in UTC.\n"
- title: 6.1.1.8.  DTEND and DURATION
  contents:
  - "6.1.1.8.  DTEND and DURATION\n   The \"DTEND\" property value is not included\
    \ in the time occupied by\n   the component.  That is, a \"DTEND\" property value\
    \ of 20030614T12000\n   includes all of the time up to, but not including, noon\
    \ on that day.\n   The \"DURATION\" property value end time is also not inclusive.\
    \  So an\n   object with a \"DTSTART\" property value of 20030514T110000 and a\n\
    \   \"DURATION\" property value of \"1H\" does not include noon on that day.\n\
    \   When a \"QUERY\" property value contains a \"DTEND\" value, then the CS\n\
    \   MUST also evaluate any existing \"DURATION\" property value and\n   determine\
    \ if it has an effective end time that matches the \"QUERY\"\n   property supplied\
    \ \"DTEND\" value or any range of values supplied by\n   the \"QUERY\" property.\n\
    \   When a \"QUERY\" property contains a \"DURATION\" value, then the CS MUST\n\
    \   also evaluate any existing \"DTEND\" property values and determine if\n  \
    \ they have an effective duration that matches the value, or any range\n   of\
    \ values, supplied by the \"QUERY\" property.\n"
- title: 6.1.1.9.  [NOT] LIKE
  contents:
  - "6.1.1.9.  [NOT] LIKE\n   The pattern matching characters are the '%' that matches\
    \ zero or more\n   characters, and '_' that matches exactly one character (where\n\
    \   character does not always mean octet).\n   \"LIKE\" clause pattern matches\
    \ always cover the entire string.  To\n   match a pattern anywhere within a string,\
    \ the pattern must start and\n   end with a percent sign.\n   To match a '%' or\
    \ '_' in the data and not have it interpreted as a\n   wildcard character, they\
    \ MUST be backslash-escaped.  Thus, to search\n   for a '%' or '_' in the string:\n\
    \      LIKE '%\\%%'    Matches any string with a '%' in it.\n      LIKE '%\\_%'\
    \    Matches any string with a '_' in it.\n   Strings compared using the \"LIKE\"\
    \ clause MUST be performed using case\n   insensitive comparisoison assumes 'a'\
    \ = 'A').\n   If the \"LIKE\" clause is preceded by 'NOT' then there is a match\
    \ when\n   the string compare fails.\n   Some property values (such as the 'recur'\
    \ value type), contain commas\n   and are not multi-valued.  The CS must understand\
    \ the objects being\n   compared and understand how to determine how any multi-valued\
    \ or\n   multi-instances properties or parameter values are separated, quoted,\n\
    \   and backslash-escaped.  THE CS must perform the comparisons as if\n   each\
    \ value existed by itself and was not quoted or backslash-escaped,\n   when comparing\
    \ using the LIKE element.\n   See related examples in Section 6.1.1.11.\n"
- title: 6.1.1.10.  Empty vs. NULL
  contents:
  - "6.1.1.10.  Empty vs. NULL\n   When used in a CAL-QUERY value, \"NULL\" means\
    \ that the property or\n   parameter is not present in the object.  Paramaters\
    \ that are not\n   provided and have a default value in the property are considered\
    \ to\n   exist with their default value and will not be \"NULL\".\n      If the\
    \ property exists but has no value, then \"NULL\" MUST NOT\n      match.\n   \
    \   If the parameter exists but has no value, then \"NULL\" MUST NOT\n      match.\n\
    \      If the parameter not present and has a default value, then \"NULL\"\n \
    \     MUST NOT match.\n      If the property (or parameter) exists but has no\
    \ value, then it\n      matches the empty string '' (quote quote).\n"
- title: 6.1.1.11.  [NOT] IN
  contents:
  - "6.1.1.11.  [NOT] IN\n   This is similar to the \"LIKE\" clause, except it does\
    \ value matching\n   and not string comparison matches.\n   Some iCalendar objects\
    \ can be multi-instance and multi-valued.  The\n   \"IN\" clause will return a\
    \ match if the literal value supplied as part\n   of the \"IN\" clause is contained\
    \ in the value of any instance of the\n   named property or parameter, or is in\
    \ any of the multiple values in\n   the named property or parameter.  Unlike the\
    \ \"LIKE\" clause, the '%'\n   and '_' matching characters are not used with the\
    \ \"IN\" clause and\n   have no special meaning.\n             BEGIN:A-COMPONENT\n\
    \      (a)      property:value1,value2        One property, two values.\n    \
    \  (b)      property:\"value1,value2\"      One property, one value.\n      (c)\
    \      property:parameter=1,2:x      One parameter, two values.\n      (d)   \
    \   property:parameter=\"1,2\",3:y  One parameter, one value.\n      (e)     \
    \ property:parameter=\",\":z      One parameter, one value.\n      (f)      property:x,y,z\
    \                One property, three values\n             END:A-COMPONENT\n  \
    \ In this example:\n      'value1' IN property          would match (a) only.\n\
    \      'value1,value2' IN property   would match (b) only.\n      'value%'  IN\
    \ property         would NOT match any.\n      ',' IN property               would\
    \ NOT match any.\n      '%,%' IN property             would NOT match any.\n \
    \     'x' IN property               would match (f) and (c).\n      '2' IN parameter\
    \              would match (c) only.\n      '1,2' IN parameter            would\
    \ match (d) only.\n      ',' IN parameter              would match (e) only.\n\
    \      '%,%' IN parameter            would NOT match any.\n      property  LIKE\
    \ 'value1%'      would match (a) and (b).\n      property  LIKE 'value%'     \
    \  would match (a) and (b).\n      property  LIKE 'x'            would match (f)\
    \ and (c).\n      parameter LIKE '1%'           would match (c) and (d).\n   \
    \   parameter LIKE '%2%'          would match (c) and (d).\n      parameter LIKE\
    \ ','            would match (e) only.\n   Some property values (such as the \"\
    RECUR\" value type), contain commas\n   and are not multi-valued.  The CS must\
    \ understand the objects being\n   compared and understand how to determine how\
    \ any multi-valued or\n   multi-instance properties or parameter values are separated,\
    \ quoted,\n   and backslash-escaped and perform the comparisons as if each value\n\
    \   existed by itself and not quoted or backslash-escaped when comparing\n   using\
    \ the IN element.\n   If the \"IN\" clause is preceded by 'NOT', then there is\
    \ a match when\n   the value does not exist in the property or parameter value.\n"
- title: 6.1.1.12.  DATE-TIME and TIME Values in a WHERE Clause
  contents:
  - "6.1.1.12.  DATE-TIME and TIME Values in a WHERE Clause\n   All \"DATE-TIME\"\
    \ and \"TIME\" literal values supplied in a \"WHERE\"\n   clause MUST be terminated\
    \ with 'Z'.  That means that the CUA MUST\n   supply the values in UTC.\n   Valid:\n\
    \      WHERE alarm.TRIGGER < '20020201T000000Z'\n      AND alarm.TRIGGER > '20020101T000000Z'\n\
    \   Not valid; it is a syntax error and the CS MUST reject the QUERY:\n      WHERE\
    \ alarm.TRIGGER < '20020201T000000'\n      AND alarm.TRIGGER > '20020101T000000'\n"
- title: 6.1.1.13.  Multiple Contained Components
  contents:
  - "6.1.1.13.  Multiple Contained Components\n   If a query references a component\
    \ and a component or property\n   contained in the component, any clauses referring\
    \ to the contained\n   component or property must be evaluated on all of the contained\n\
    \   components or properties.  If any of the contained components or\n   properties\
    \ match the query, and the conditions on the containing\n   component are also\
    \ true, the component matches the query.\n   For example, in the query below,\
    \ if a BOOKED VEVENT contains multiple\n   VALARMs, and the VALARM.TRIGGER clause\
    \ is true for any of the VALARMs\n   in the VEVENT, then the UID, SUMMARY, and\
    \ DESCRIPTION of this VEVENT\n   would be included in the QUERY results.\n   \
    \   BEGIN:VQUERY\n      EXPAND:TRUE\n      QUERY:SELECT UID,SUMMARY,DESCRIPTION\
    \ FROM VEVENT\n      WHERE VALARM.TRIGGER >= '20000101T030405Z'\n      AND VALARM.TRIGGER\
    \ <= '20001231T235959Z'\n      AND STATE() = 'BOOKED'\n      END:VQUERY\n"
- title: 6.1.1.14.  Example, Query by UID
  contents:
  - "6.1.1.14.  Example, Query by UID\n   The following example would match the entire\
    \ content of a \"VEVENT\" or\n   \"VTODO\" component with the \"UID\" property\
    \ equal to \"uid123\" , and it\n   would not expand any multiple instances of\
    \ the component.  If the CUA\n   does not know  if \"uid123\" was a \"VEVENT\"\
    , \"VTODO\", \"VJOURNAL\", or\n   any other component, then all components that\
    \ the CUA supports MUST\n   be supplied in a QUERY property.  This example assumes\
    \ the CUA is\n   only interested in \"VTODO\" and \"VEVENT\" components.\n   If\
    \ the results were empty it could also mean that \"uid123\" was a\n   property\
    \ in a component other than a VTODO or VEVENT.\n      BEGIN:VQUERY\n      QUERY:SELECT\
    \ * FROM VTODO WHERE UID = 'uid123'\n      QUERY:SELECT * FROM VEVENT WHERE UID\
    \ = 'uid123'\n      END:VQUERY\n"
- title: 6.1.1.15.  Query by Date-Time Range
  contents:
  - "6.1.1.15.  Query by Date-Time Range\n      This query selects the entire content\
    \ of every booked \"VEVENT\"\n      component that has an instance greater than\
    \ or equal to July 1,\n      2000 00:00:00 UTC and less than or equal to July\
    \ 30, 2000 23:59:59\n      UTC.  This includes single instance \"VEVENT\" components\
    \ that do\n      not explicitly contain any recurrence properties or \"RECURRENCE-\n\
    \      ID\" properties.  This works only for CSs that have the \"RECUR-\n    \
    \  EXPAND\" property value set to \"TRUE\" in the \"GET-CAPABILITY\"\n      exchange.\n\
    \      BEGIN:VQUERY\n      EXPAND:TRUE\n      QUERY:SELECT * FROM VEVENT\n   \
    \   WHERE RECURRENCE-ID >= '20000701T000000Z'\n      AND RECURRENCE-ID <= '20000730T235959Z'\n\
    \      AND STATE() = 'BOOKED'\n      END:VQUERY\n"
- title: 6.1.1.16.  Query for All Unprocessed Entries
  contents:
  - "6.1.1.16.  Query for All Unprocessed Entries\n   The following example selects\
    \ the entire contents of all non-booked\n   \"VTODO\" and \"VEVENT\" components\
    \ in the \"UNPROCESSED\" state.  The\n   default for the \"EXPAND\" property is\
    \ \"FALSE\", so the recurrence rules\n   will not be expanded.\n      BEGIN:VQUERY\n\
    \      QUERYID:Fetch VEVENT and VTODO iTIP components\n      QUERY:SELECT * FROM\
    \ VEVENT WHERE STATE() = 'UNPROCESSED'\n      QUERY:SELECT * FROM VTODO WHERE\
    \ STATE() = 'UNPROCESSED'\n      END:VQUERY\n   The following example fetches\
    \ all \"VEVENT\" and \"VTODO\" components in\n   the \"BOOKED\" state.\n     \
    \ BEGIN:VQUERY\n      QUERYID:Fetch All Booked VEVENT and VTODO components\n \
    \     QUERY:SELECT * FROM VEVENT WHERE STATE() = 'BOOKED'\n      QUERY:SELECT\
    \ * FROM VTODO WHERE STATE() = 'BOOKED'\n      END:VQUERY\n   The following fetches\
    \ the \"UID\" property for all \"VEVENT\" and \"VTODO\"\n   components that have\
    \ been marked for delete.\n      BEGIN:VQUERY\n      QUERYID:Fetch UIDs of marked-for-delete\
    \ VEVENTs and VTODOs\n      QUERY:SELECT UID FROM VEVENT WHERE STATE() = 'DELETED'\n\
    \      QUERY:SELECT UID FROM VTODO WHERE STATE() = 'DELETED'\n      END:VQUERY\n"
- title: 6.1.1.17.  Query with Subset of Properties by Date/Time
  contents:
  - "6.1.1.17.  Query with Subset of Properties by Date/Time\n   In this example,\
    \ only the named properties will be selected, and all\n   booked and non-booked\
    \ components have a \"DTSTART\" value from February\n   1st to February 10th 2000\
    \ (in UTC) will also be selected.\n      BEGIN:VQUERY\n      QUERY:SELECT UID,DTSTART,DESCRIPTION,SUMMARY\
    \ FROM VEVENT\n      WHERE DTSTART >= '20000201T000000Z'\n      AND DTSTART <=\
    \ '20000210T235959Z'\n      END:VQUERY\n"
- title: 6.1.1.18.  Query with Components and Alarms in A Range
  contents:
  - "6.1.1.18.  Query with Components and Alarms in A Range\n   This example fetches\
    \ all booked \"VEVENT\" components with an alarm\n   that triggers within the\
    \ specified time range.  In this case only the\n   \"UID\", \"SUMMARY\", and \"\
    DESCRIPTION\" properties will be selected for\n   all booked \"VEVENTS\" components\
    \ that have an alarm between the two\n   date-times supplied.\n      BEGIN:VQUERY\n\
    \      EXPAND:TRUE\n      QUERY:SELECT UID,SUMMARY,DESCRIPTION FROM VEVENT\n \
    \     WHERE VALARM.TRIGGER >= '20000101T030405Z'\n      AND VALARM.TRIGGER <=\
    \ '20001231T235959Z'\n      AND STATE() = 'BOOKED'\n      END:VQUERY\n"
- title: 6.1.2.  UPN Value Type
  contents:
  - "6.1.2.  UPN Value Type\n   Value Name: UPN\n   Purpose: This value type is used\
    \ to identify values that contain user\n      principal name of a CU or a group\
    \ of CUs.\n   Formal Definition: The value type is defined by the following\n\
    \      notation:\n                   ;\n         upn        = \"@\"\n        \
    \         / [ dot-atom-text ] \"@\" dot-atom-text\n                   ;\n    \
    \               ; dot-atom-text is defined in RFC 2822 [RFC2822]\n           \
    \        ;\n                   ;\n         dot-atom-text = ; As defined in [iCAL].\n\
    \   Description: This data type is an identifier that denotes a CU or a\n    \
    \  group of CU.  A UPN is an RFC 2822-compliant email address\n      [RFC2822],\
    \ with exceptions listed below, and in most cases it is\n      deliverable to\
    \ the CU.  In some cases it is identical to the CU's\n      well known email address.\
    \  A CU's UPN MUST never be an e-mail\n      address that is deliverable to a\
    \ different person.  And there is\n      no requirement that a person's UPN MUST\
    \ be their e-mail address.\n      A UPN is formatted as a user name followed by\
    \ \"@\", followed by a\n      Realm in the form of a valid and unique DNS domain\
    \ name.  The user\n      name MUST be unique within the Realm.  In its simplest\
    \ form it\n      looks like \"user@example.com\".\n      In certain cases a UPN\
    \ will not be RFC 2822-compliant.  When\n      anonymous authentication is used,\
    \ or anonymous authorization is\n      being defined, the special UPN \"@\" will\
    \ be used.  When\n      authentication MUST be used, but unique identity MUST\
    \ be obscured,\n      a UPN of the form @DNS-domain-name may be used.  For example,\n\
    \      \"@example.com\".\n   Example:\n      The following is a UPN for a CU:\n\
    \         jdoe@example.com\n      The following is an example of a UPN that could\
    \ be for a group of\n      CU:\n         staff@example.com\n      The following\
    \ is a UPN for an anonymous CU that belongs to a\n      specific realm.  When\
    \ used as a UPN-FILTER, it applies to all UPNs\n      in a specific realm:\n \
    \        @example.com\n      The following is a UPN for an anonymous CU:\n   \
    \      @\n"
- title: 6.1.3.  UPN-FILTER Value
  contents:
  - "6.1.3.  UPN-FILTER Value\n   Value Name: UPN-FILTER\n   Purpose: This value type\
    \ is used to identify values that contain a\n      user principal name filter.\n\
    \   Formal Definition: The value type is defined by the following\n      notation:\n\
    \                      ;\n                      ; NOTE: \"CAL-OWNERS(cal-address)\"\
    \n                      ;       and \"NOT CAL-OWNERS(cal-address)\"\n        \
    \              ;       are both NOT allowed below.\n                      ;\n\
    \         upn-filter    = \"CAL-OWNERS()\" /\n                         \"NOT CAL-OWNERS()\"\
    \ /\n                         \"*\" /\n                   [ \"*\" / dot-atom-text\
    \ ] \"@\" ( \"*\" / dot-atom-text )\n                      ;\n               \
    \       ; dot-atom-text is defined in RFC 2822\n   Description: The value is used\
    \ to match user principal names (UPNs).\n   For \"CAL-OWNERS()\" and \"NOT CAL-OWNERS()\"\
    , see Section 8.24.\n      *           Matches all UPNs.\n      @           Matches\
    \ the UPN of anonymous CUs\n                  belonging to the null realm\n  \
    \    @*          Matches the UPN of anonymous CUs\n                  belonging\
    \ to any non-null realm\n      @realm      Matches the UPN of anonymous CUs\n\
    \                  belonging to the specified realm.\n      *@*         Matches\
    \ the UPN of non-anonymous CUs\n                  belonging to any non-null realm\n\
    \      *@realm     Matches the UPN of non-anonymous CUs\n                  belonging\
    \ to the specified realm\n      user@realm  Matches the UPN of the specified CU\n\
    \                  belonging to the specified realm\n      user@*      Not allowed.\n\
    \      user@       Not allowed.\n   Example: The following are examples of this\
    \ value type:\n      DENY:NON CAL-OWNERS()\n      DENY:@hackers.example.com\n\
    \      DENY:*@hackers.example.com\n      GRANT:sam@example.com\n"
- title: 7.  New Parameters
  contents:
  - '7.  New Parameters

    '
- title: 7.1.  ACTION Parameter
  contents:
  - "7.1.  ACTION Parameter\n   Parameter Name: ACTION\n   Purpose: This parameter\
    \ indicates the action to be taken when a\n      timeout occurs.\n   Value Type:\
    \ TEXT\n   Conformance: This property can be specified in the \"CMD\" property.\n\
    \      When present in a \"CMD\" property, the \"ACTION\" parameter specifies\n\
    \      the action to be taken when the command timeout expires.\n   Formal Definition:\
    \ The parameter is defined by the following\n      notation:\n         action-param\
    \     = \";\" \"ACTION\" \"=\" ( \"ASK\" / \"ABORT\" )\n                     \
    \        ; If 'action-param' is supplied then\n                             ;\
    \ 'latency-param' MUST be supplied.\n   Example:\n         CMD;LATENCY=10;ACTION=ASK:CREATE\n"
- title: 7.2.  ENABLE Parameter
  contents:
  - "7.2.  ENABLE Parameter\n   Parameter Name: ENABLE\n   Purpose: This parameter\
    \ indicates whether or not the property should\n      be ignored.  For example,\
    \ it can indicate that a \"TRIGGER\"\n      property in a \"VALARM\" component\
    \ should be ignored.\n   Value Type: BOOLEAN\n   Conformance: This property can\
    \ be specified in the \"TRIGGER\"\n      properties.\n   Description: When a non\
    \ owner sends an [iTIP] \"REQUEST\" to a calendar\n      that object might contain\
    \ a \"VALARM\" component.  The owner may\n      wish to have local control over\
    \ their own CUA and when or how\n      alarms are triggered.\n      A CUA may\
    \ add the \"ENABLE\" parameter to any \"TRIGGER\" property\n      before booking\
    \ the component.  If the \"ENABLE\" parameter is set to\n      \"FALSE\", then\
    \ the alarm will be ignored by the CUA.  If set to\n      \"TRUE\", or if the\
    \ \"ENABLE\" property is not in the \"TRIGGER\"\n      property, the alarm is\
    \ enabled.  This parameter may not be known\n      by pre-CAP implementations,\
    \ but this should not be an issue as it\n      conforms to an 'ianaparam' [iCAL].\n\
    \   Formal Definition: The property is defined by the following notation:\n  \
    \       enable-param       = \"ENABLE\" \"=\" boolean\n                      \
    \        ;\n         boolean            = ; As defined in [iCAL].\n   Example:\
    \ The following is an example of this property for a \"VAGENDA\"\n      component:\n\
    \         TRIGGER;ENABLE=FALSE;RELATED=END:PT5M\n"
- title: 7.3.  ID Parameter
  contents:
  - "7.3.  ID Parameter\n   Parameter Name: ID\n   Purpose: When used in a \"CMD\"\
    \ component, it provides a unique\n      identifier.\n   Value Type: TEXT\n  \
    \ Conformance: This parameter can be specified in the \"CMD\" property.\n   Description:\
    \ If more than one command is sent, then the \"ID\"\n      parameter is used to\
    \ uniquely identify the command.\n      A CUA may add the \"ID\" parameter to\
    \ any \"CMD\" property before\n      sending the command.  There must not be more\
    \ than one outstanding\n      command tagged with the same \"ID\" parameter value.\n\
    \   Formal Definition: The property is defined by the following notation:\n  \
    \       id-param         = \";\" \"ID\" \"=\" unique-id\n                    \
    \      ; The text value supplied is a unique value\n                         \
    \ ; shared between the CUA and CS to uniquely\n                          ; identify\
    \ the instance of command in the\n                          ; the current CUA\
    \ session.  The value has\n                          ; no meaning to other CUAs\
    \ or other sessions.\n                          ;\n         unique-id        =\
    \ ; text\n                          ;\n         text             = ; As defined\
    \ in [iCAL].\n      Example: The following is an example of this parameter component:\n\
    \         CMD;UD=some-unique-value:CREATE\n"
- title: 7.4.  LATENCY Parameter
  contents:
  - "7.4.  LATENCY Parameter\n   Parameter Name: LATENCY\n   Purpose: This parameter\
    \ indicates time in seconds for when a timeout\n      occurs.\n   Value Type:\
    \ TEXT\n   Conformance: This property can be specified in the \"CMD\" property.\n\
    \   When present in a \"CMD\" property, the \"LATENCY\" parameter specifies\n\
    \      the time in seconds when the command timeout expires.\n   Formal Definition:\
    \ The parameter is defined by the following\n      notation:\n         latency-param\
    \    = \";\" \"LATENCY\" \"=\" latency-sec\n                          ; The value\
    \ supplied in the time in seconds.\n                          ; If 'latency-param'\
    \ is supplied then\n                          ; 'action-param' MUST be supplied.\n\
    \                          ;\n         latency-sec      = posint1\n          \
    \                ; Default is zero (0) meaning no timeout.\n   Example: The following\
    \ is an example of this parameter:\n         CMD;LATENCY=10;ACTION=ASK:CREATE\n"
- title: 7.5.  LOCAL Parameter
  contents:
  - "7.5.  LOCAL Parameter\n   Parameter Name: LOCAL\n   Purpose: Indicates if the\
    \ named component should be exported to any\n      non-organizer calendar.\n \
    \  Value Type: BOOLEAN\n   Conformance: This parameter can be specified in the\
    \ \"SEQUENCE\"\n      properties in a \"VALARM\" component.\n   Description: When\
    \ a non-owner sends an [iTIP] \"REQUEST\" to a calendar\n      that object might\
    \ contain a \"VALARM\" component.  The owner may\n      wish to have local control\
    \ over their own CUA and when or how\n      alarms are triggered.\n      A CUA\
    \ may add the \"LOCAL\" parameter to the \"SEQUENCE\" property\n      before booking\
    \ the component.  If the \"LOCAL\" parameter is set to\n      \"TRUE\", then the\
    \ alarm MUST NOT be forwarded to any other\n      calendar.  If set to \"FALSE\"\
    , or if the \"LOCAL\" parameter is not\n      in the \"SEQUENCE\" property, the\
    \ alarm is global.\n   Formal Definition: The property is defined by the following\
    \ notation:\n         local-param        = \"LOCAL\" \"=\" boolean\n      Example:\
    \ The following is an example of this parameter:\n         SEQUENCE;LOCAL=TRUE:4\n"
- title: 7.6.  LOCALIZE Parameter
  contents:
  - "7.6.  LOCALIZE Parameter\n   Parameter Name: LOCALIZE\n   Purpose: If provided,\
    \ specifies the desired language for error and\n      warning messages.\n   Value\
    \ Type: TEXT\n   Conformance: This parameter can be specified in the \"CMD\" properties.\n\
    \      When the \"LOCALIZE\" parameter is supplied, its value MUST be one\n  \
    \    of the values listed in the initial [BEEP] greeting 'localize'\n      attribute.\n\
    \      A CUA may add the \"LOCALIZE\" parameter to the \"CMD\" property to\n \
    \     specify the language of any error or warning messages.\n   Formal Definition:\
    \ The property is defined by the following notation:\n         localize-param\
    \   = \";\" \"LOCALIZE\" \"=\" beep-localize\n                          ;\n  \
    \       beep-localize    = text ; As defined in [BEEP]\n                     \
    \     ; The value supplied MUST be one value from\n                          ;\
    \ the initial [BEEP] greeting 'localize'\n                          ; attribute,\
    \ specifying the locale to use\n                          ; for error messages\
    \ during\n                          ; this instance of the command.\n   Example:\
    \ The following is an example of this parameter:\n         CMD;LOCALIZE=fr_CA:CREATE\n"
- title: 7.7.  OPTIONS Parameter
  contents:
  - "7.7.  OPTIONS Parameter\n   Parameter Name: OPTIONS\n   Purpose: If provided\
    \ the \"OPTIONS\" parameter specifies some \"CMD\"\n      property-specific options.\n\
    \   Value Type: TEXT\n   Conformance: This parameter can be specified in the \"\
    CMD\" properties.\n      A CUA adds the \"OPTIONS\" parameter to the \"CMD\" property\
    \ when the\n      command needs extra values.\n   Formal Definition: The property\
    \ is defined by the following notation:\n         option-param     = \";\" \"\
    OPTIONS\" \"=\" cmd-specific\n                            ;\n         cmd-specific\
    \     = ; The value supplied is dependent on the\n                           \
    \ ; CMD value.  See the specific CMDs for the\n                            ; correct\
    \ values to use for each CMD.\n   Example: The following is an example of this\
    \ parameter:\n         CMD;OPTIONS=10:GENERATE-UID\n"
- title: 8.  New Properties
  contents:
  - '8.  New Properties

    '
- title: 8.1.  ALLOW-CONFLICT Property
  contents:
  - "8.1.  ALLOW-CONFLICT Property\n   Property Name: ALLOW-CONFLICT\n   Purpose:\
    \ This property indicates whether or not the calendar and CS\n      supports component\
    \ conflicts.  That is, whether or not any of the\n      components in the calendar\
    \ can overlap.\n   Value Type: BOOLEAN\n   Property Parameters: Non-standard property\
    \ parameters can be\n      specified on this property.\n   Conformance: This property\
    \ can be specified in \"VAGENDA\" and\n      \"VCALSTORE\" component.\n   Description:\
    \ This property is used to indicate whether components may\n      conflict, that\
    \ is, whether their expanded instances may share the\n      same time or overlap\
    \ the same time periods.  If it has a value of\n      \"TRUE\", then conflicts\
    \ are allowed.  If \"FALSE\", the no two\n      components may conflict.\n   \
    \   If \"FALSE\" in the \"VCALSTORE\" component, then all \"VAGENDA\"\n      component\
    \ \"ALLOW-CONFLICT\" property values MUST be \"FALSE\" in the\n      CS.\n   Formal\
    \ Definition: The property is defined by the following notation:\n         allow-conflict\
    \     = \"ALLOW-CONFLICT\" other-params \":\" boolean\n      CRLF\n   Example:\
    \ The following is an example of this property for a \"VAGENDA\"\n      component:\n\
    \         ALLOW-CONFLICT:FALSE\n"
- title: 8.2.  ATT-COUNTER Property
  contents:
  - "8.2.  ATT-COUNTER Property\n   Property Name: ATT-COUNTER\n   Property Parameters:\
    \ Non-standard property parameters can be\n      specified on this property.\n\
    \   Conformance: This property MUST be specified in an iCalendar object\n    \
    \  that specifies a counter proposal to a group-scheduled calendar\n      entity.\
    \  When storing a \"METHOD\" property with the \"COUNTER\"\n      method, there\
    \ needs to be a way to remember who sent the COUNTER.\n      The ATT-COUNTER property\
    \ MUST be added to all \"COUNTER\" [iTIP]\n      components by the CUA before\
    \ storing in a CS.\n   Description: This property is used to identify the CAL-ADDRESS\
    \ of the\n      entity that sent the \"COUNTER\" [iTIP] object.\n   Formal Definition:\
    \ The property is defined by the following notation:\n         attcounter   =\
    \ \"ATT-COUNTER\" other-params \":\" cal-address CRLF\n   Examples:\n        \
    \    ATT-COUNTER:cap:example.com/Doug\n            ATT-COUNTER:mailto:Doug@Example.com\n"
- title: 8.3.  CALID Property
  contents:
  - "8.3.  CALID Property\n   Property Name: CALID\n   Property Parameters: Non-standard\
    \ property parameters can be\n      specified on this property.\n   Conformance:\
    \ This property can be specified in the \"VAGENDA\"\n      component.\n   Description:\
    \ This property is used to specify a fully-qualified\n      CALID.\n   Formal\
    \ Definition: The property is defined by the following notation:\n         calid\
    \   = \"CALID\" other-params \":\" relcalid CRLF\n   Example:\n         CALID:cap://cal.example.com/sdfifgty4321\n"
- title: 8.4.  CALMASTER Property
  contents:
  - "8.4.  CALMASTER Property\n   Property Name: CALMASTER\n   Purpose: The property\
    \ specifies an e-mail address of a person\n   responsible for the calendar store.\n\
    \   Value Type: URI\n   Property Parameters: Non-standard property parameters\
    \ can be\n   specified on this property.\n   Conformance: The property can be\
    \ specified in a \"VCALSTORE\"\n   component.\n   Description: The parameter value\
    \ SHOULD be a MAILTO URI as defined in\n   [URL].  It MUST be a contact URI such\
    \ as a MAILTO URI and not a home\n   page or file URI that describes how to contact\
    \ the calmasters.\n   Formal Definition: The property is defined by the following\
    \ notation:\n      calmaster = \"CALMASTER\" other-params \":\" uri CRLF\n   \
    \             ;\n      uri       = ; IANA registered uri as defined in [iCAL].\n\
    \   Example: The following is an example of this property:\n         CALMASTER:mailto:administrator@example.com\n"
- title: 8.5.  CAP-VERSION Property
  contents:
  - "8.5.  CAP-VERSION Property\n   Property Name: CAP-VERSION\n   Purpose: This property\
    \ specifies the version of CAP supported.\n   Value Type: TEXT\n   Property Parameters:\
    \ Non-standard property parameters can be\n      specified on this property.\n\
    \   Conformance: This property is specified in the \"VREPLY\" component\n    \
    \  that is sent in response to a \"GET-CAPABILITY\" command.\n   Description:\
    \ This specifies the version of CAP that the endpoint\n      supports.  The list\
    \ is a comma-separated list of supported RFC\n      numbers.  The list MUST contain\
    \ at least 4324.\n   Formal Definition: The property is defined by the following\
    \ notation:\n         cap-version   = \"CAP-VERSION\" other-params \":\" text\
    \ CRLF\n   Example: The following are examples of this property:\n         CAP-VERSION:4324\n"
- title: 8.6.  CARID Property
  contents:
  - "8.6.  CARID Property\n   Property Name: CARID\n   Purpose: This property specifies\
    \ the identifier for an access right\n      component.\n   Value Type: TEXT\n\
    \   Property Parameters: Non-standard property parameters can be\n      specified\
    \ on this property.\n   Conformance: This property MUST be specified once in a\
    \ \"VCAR\"\n      component.\n   Description: This property is used in the \"\
    VCAR\" component to specify\n      an identifier.  A \"CARID\" property value\
    \ is unique per container.\n   Formal Definition: The property is defined by the\
    \ following notation:\n         carid      = \"CARID\" other-params \":\" text\
    \ CRLF\n   Example: The following are examples of this property:\n         CARID:xyzzy-007\n\
    \         CARID:User Rights\n"
- title: 8.7.  CAR-LEVEL Property
  contents:
  - "8.7.  CAR-LEVEL Property\n   Property Name: CAR-LEVEL\n   Purpose: The property\
    \ specifies the level of VCAR supported.\n   Value Type: TEXT\n   Property Parameters:\
    \ Non-standard property parameters can be\n      specified on this property.\n\
    \   Conformance: The property can be specified in a \"VREPLY\" component\n   \
    \   that is sent in response to a \"GET-CAPABILITY\" command.\n   Description:\
    \ The value is one from a list of \"CAR-NONE\", \"CAR-MIN\",\n      or \"CAR-FULL-1\"\
    .  If \"CAR-FULL-1\" is supplied, then \"CAR-MIN\" is\n      also available. \
    \ A \"CAR-MIN\" implementation only supported the\n      \"DEFAULT-VCARS\" property\
    \ values listed in the \"VCALSTORE\"\n      component, and a \"CAR-MIN\" implementation\
    \ does not support the\n      creation or modification of \"VCAR\" components\
    \ from the CUA.\n   Formal Definition: The property is defined by the following\
    \ notation:\n         car-level        = \"CAR-LEVEL\" \":\" other-params \":\"\
    \n                                                car-level-values\n         car-level-values\
    \ = ( \"CAR-NONE\" / \"CAR-MIN\" / \"CAR-FULL-1\"\n                          \
    \    / other-levels )\n         other-levels     = ; Any name published in an\
    \ RFC for a\n                            ; \"CAR-LEVEL\" property value.\n   Example:\
    \ The following is an example of this property:\n            CAR-LEVEL:CAR-FULL-1\n"
- title: 8.8.  COMPONENTS Property
  contents:
  - "8.8.  COMPONENTS Property\n   Property Name: COMPONENTS\n   Purpose: The property\
    \ specifies a the list of components supported by\n      the endpoint.\n   Value\
    \ Type: TEXT\n   Property Parameters: Non-standard property parameters can be\n\
    \      specified on this property.\n   Conformance: The property can be specified\
    \ in a \"VREPLY\" component in\n      response to a \"GET-CAPABILITY\" command.\n\
    \   Description: A comma-separated list of components that are supported\n   \
    \   by the endpoint.  A component that is not in the list sent from\n      the\
    \ endpoint is not supported by that endpoint.  Sending an\n      unsupported component\
    \ results in unpredictable results.  This\n      includes any components inside\
    \ of other components (VALARM for\n      example).  The recommended list is\n\
    \      \"VCALSTORE,VCALENDAR,VREPLY,VAGENDA,\n      VEVENT,VALARM,VTIMEZONE,VJOURNAL,VTODO,VALARM,\n\
    \      DAYLIGHT,STANDARD,VCAR,VRIGHT,VQUERY\".\n   Formal Definition: The property\
    \ is defined by the following notation:\n      components     = \"COMPONENTS\"\
    \ other-params \":\" comp-list CRLF\n                     ;\n                \
    \     ; All of these MUST be supplied only once.\n                     ;\n   \
    \   comp-list-req  = \"VCALSTORE\" \",\" \"VCALENDAR\" \",\" \"VTIMEZONE\" \"\
    ,\"\n                       \"VREPLY\"    \",\" \"VAGENDA\"   \",\" \"STANDARD\"\
    \  \",\"\n                       \"DAYLIGHT\"\n                     ; At least\
    \ one MUST be supplied. The same value\n                     ; MUST NOT occur\
    \ more than once.\n                     ;\n      comp-list-min  = ( \",\" \"VEVENT\"\
    )\n                     / ( \",\" \"VTODO\")\n                     / ( \",\" \"\
    VJOURNAL\" )\n                     ; The same value MUST NOT occur\n         \
    \            ; more than once.  If \"VCAR\" is supplied then\n               \
    \      ; \"VRIGHT\" must be supplied.\n                     ;\n      comp-list-opt\
    \  = ( \",\" \"VFREEBUSY\" ) / ( \",\" \"VALARM\" )\n                       /\
    \ ( \",\" \"VCAR\" )    / ( \",\" \"VRIGHT\" )\n                       / ( \"\
    ,\" \"VQUERY\")   / ( \",\" x-comp )\n                       / ( \",\" iana-comp\
    \ )\n                     ;\n      comp-list      = comp-list-req 1*3comp-list-min\
    \ *(comp-list-opt)\n   Example: The following is an example of this property:\n\
    \         COMPONENTS:VCALSTORE,VCALENDAR,VREPLY,VAGENDA,\n         VEVENT,VALARM,VTIMEZONE,VJOURNAL,VTODO,\n\
    \         DAYLIGHT,STANDARD,VFREEBUSY,VCAR,VRIGHT,VQUERY\n"
- title: 8.9.  CSID Property
  contents:
  - "8.9.  CSID Property\n   Property Name: CSID\n   Purpose: The property specifies\
    \ a globally unique identifier for the\n      calendar store.\n   Value Type:\
    \ URI\n   Property Parameters: Non-standard property parameters can be\n     \
    \ specified on this property.\n   Conformance: The property can be specified in\
    \ a \"VCALSTORE\"\n      component.\n   Description: The identifier MUST be globally\
    \ unique.  Each CS needs\n      its own unique identifier.  The \"CSID\" property\
    \ is the official\n      unique identifier for the CS.  If the BEEP 'serverName'\
    \ attribute\n      was supplied in the BEEP 'start' message, then the CSID will\
    \ be\n      mapped to the virtual host name supplied, and the host name part\n\
    \      of the CSID MUST be the same as the 'serverName' value.  This\n      allows\
    \ one CS implementation to service multiple virtual hosts.\n      CS's are not\
    \ required to support virtual hosting.  If a CS does\n      not support virtual\
    \ hosting, then it must ignore the BEEP\n      'serverName' attribute.\n   Formal\
    \ Definition: The property is defined by the following notation:\n         csid\
    \ = \"CSID\" other-params \":\" capurl CRLF\n   Example: The following is an example\
    \ of this property:\n         CSID:cap://calendar.example.com\n"
- title: 8.10.  DECREED Property
  contents:
  - "8.10.  DECREED Property\n   Property Name: DECREED\n   Purpose: This property\
    \ specifies if an access right calendar\n      component is decreed or not.\n\
    \   Value Type: BOOLEAN\n   Property Parameters: Non-standard property parameters\
    \ can be\n      specified on this property.\n   Conformance: This property MAY\
    \ be specified once in a \"VCAR\"\n      component.\n   Description: This property\
    \ is used in the \"VCAR\" component to specify\n      whether the component is\
    \ decreed or not.  If the \"DECREED\"\n      property value is \"TRUE\" then the\
    \ CUA will be unable to change the\n      contents of the \"VCAR\" component and\
    \ any attempt will fail with an\n      error.\n   Formal Definition: The property\
    \ is defined by the following notation:\n         decreed      = \"DECREED\" other-params\
    \ \":\" boolean CRLF\n   Example: The following is an example of this property:\n\
    \         DECREED:TRUE\n"
- title: 8.11.  DEFAULT-CHARSET Property
  contents:
  - "8.11.  DEFAULT-CHARSET Property\n   Property Name: DEFAULT-CHARSET\n   Purpose:\
    \ This property indicates the default charset.\n   Value Type: TEXT\n   Property\
    \ Parameters: Non-standard property parameters can be\n      specified on this\
    \ property.\n   Conformance: This property can be specified in \"VAGENDA\" and\n\
    \      \"VCALSTORE\" calendar component.\n   Description: In a \"VAGENDA\" component\
    \ this property is used to\n      indicate the charset of calendar.  If not specified,\
    \ the default\n      is the first value in the \"VCALSTORE\" components \"DEFAULT-CHARSET\"\
    \n      property value list.  The value MUST be an IANA registered\n      character\
    \ set as defined in [CHARREG].\n   In a \"VCALSTORE\" component it is a comma-separated\
    \ list of charsets\n      supported by the CS.  The first entry is the default\
    \ entry for all\n      newly created \"VAGENDA\" components.  The \"UTF-8\" value\
    \ MUST be in\n      the \"VCALSTORE\" component \"DEFAULT-CHARSET\" property list.\
    \  All\n      compliant\n      CAP implementations (CS and CUA) MUST support at\
    \ least the \"UTF-8\"\n      charset.\n      If a charset name contains a comma\
    \ (,), that comma must be\n      backslash-escaped in the value.\n   Formal Definition:\
    \ The property is defined by the following notation:\n         default-charset\
    \     = \"DEFAULT-CHARSET\" other-params \":\" text\n         *( \",\" text) CRLF\n\
    \   Example: The following is an example of this property for a \"VAGENDA\"\n\
    \   component:\n      DEFAULT-CHARSET:Shift_JIS,UTF-8\n"
- title: 8.12.  DEFAULT-LOCALE Property
  contents:
  - "8.12.  DEFAULT-LOCALE Property\n   Property Name: DEFAULT-LOCALE\n   Purpose:\
    \ This property specifies the default language for text\n      values.\n   Value\
    \ Type: TEXT\n   Property Parameters: Non-standard property parameters can be\n\
    \      specified on this property.\n   Conformance: This property can be specified\
    \ in \"VAGENDA\" and\n      \"VCALSTORE\" components.\n   Description: In a \"\
    VAGENDA\" component, the \"DEFAULT-LOCALE\" property\n      is used to indicate\
    \ the locale of the calendar.  The full locale\n      SHOULD be used.  The default\
    \ and minimum locale is POSIX (aka the\n      'C' locale).\n      In a \"VCALSTORE\"\
    \ component, it is a comma-separated list of\n      locales supported by the CS.\
    \  The first value in the list is the\n      default for all newly created VAGENDAs.\
    \  \"POSIX\" MUST be in the\n      list.\n   Formal Definition: The property is\
    \ defined by the following notation:\n         default-locale     = \"DEFAULT-LOCALE\"\
    \ other-params \":\" language\n                               *( \",\" language)\
    \ CRLF\n                    ;\n         language = ; Text identifying a locale,\
    \ as defined in [CHARPOL]\n   Example: The following is an example of this property:\n\
    \      DEFAULT-LOCALE:en-US.iso-8859-1,POSIX\n"
- title: 8.13.  DEFAULT-TZID Property
  contents:
  - "8.13.  DEFAULT-TZID Property\n   Property Name: DEFAULT-TZID\n   Purpose: This\
    \ property specifies the text value that specifies the\n      time zones.\n  \
    \ Value Type: TEXT\n   Property Parameters: Non-standard property parameters can\
    \ be\n      specified on this property.\n   Conformance: This property may be\
    \ specified once in a \"VAGENDA\" and\n      \"VCALSTORE\" components.\n   Description:\
    \ A multi-valued property that lists the known time zones.\n      The first is\
    \ the default.  Here \"TZID\" property values are the\n      same as the \"TZID\"\
    \ property defined in [iCAL].\n      If used in a \"VCALSTORE\" component, it\
    \ is a comma-separated list\n      of TZIDs known to the CS.  The entry is used\
    \ as the default TZID\n      list for all newly created calendars.  The list MUST\
    \ contain at\n      least \"UTC\".  A \"VCALSTORE\" components MUST contain one\n\
    \      \"VTIMEZONE\" component for each value in the \"DEFAULT-TZID\"\n      property\
    \ value.\n      If used in a \"VAGENDA\" component, it is a comma-separated list\
    \ of\n      \"TZID\" property values naming the time zones known to the\n    \
    \  calendar.  The first time zone in the list is the default and is\n      used\
    \ as the localtime for objects that contain a date or date-time\n      value without\
    \ a time zone.  All \"VAGENDA\" components MUST have one\n      \"VTIMEZONE\"\
    \ component contained for each value in the \"DEFAULT-\n      TZID\" property\
    \ value.\n      If a \"TZID\" property value contains a comma (,), the comma must\
    \ be\n      backslash-escaped.\n   Formal Definition: This property is defined\
    \ by the following\n      notation:\n         default-tzid       = \"DEFAULT-TZID\"\
    \ other-params\n                              \":\" [tzidprefix] text\n      \
    \                        *(\",\" [tzidprefix] text) CRLF\n                   \
    \           ;\n         txidprefix         = ; As defined in [iCAL].\n   Example:\
    \ The following is an example of this property:\n      DEFAULT-TZID:US/Mountain,UTC\n"
- title: 8.14.  DEFAULT-VCARS Property
  contents:
  - "8.14.  DEFAULT-VCARS Property\n   Property Name: DEFAULT-VCARS\n   Purpose: This\
    \ property is used to specify the \"CARID\" property ids of\n      the default\
    \ \"VCAR\" components for newly created \"VAGENDA\"\n      components.\n   Value\
    \ Type: TEXT\n   Property Parameters: Non-standard property parameters can be\n\
    \      specified on this property.\n   Conformance: This property MUST be specified\
    \ in \"VCALSTORE\" calendar\n      component and MUST at least specify the following\
    \ values:\n      \"READBUSYTIMEINFO\", \"REQUESTONLY\", \"UPDATEPARTSTATUS\",\
    \ and\n      \"DEFAULTOWNER\".\n   Description: This property is used in the \"\
    VCALSTORE\" component to\n      specify the \"CARID\" value of the \"VCAR\" components\
    \ that MUST be\n      copied into now \"VAGENDA\" components at creation time\
    \ by the CS.\n      All \"DEFAULT-VCAR\" values must have \"VCARS\" components\
    \ stored in\n      the \"VCALSTORE\".\n   Formal Definition: The property is defined\
    \ by the following notation:\n         defautl-vcars      = \"DEFAULT-VCARS\"\
    \ other-params \":\" text\n         *( \",\" text ) CRLF\n   Example: The following\
    \ is an example of this property:\n         DEFAULT-VCARS:READBUSYTIMEINFO,REQUESTONLY,\n\
    \          UPDATEPARTSTATUS,DEFAULTOWNER\n"
- title: 8.15.  DENY Property
  contents:
  - "8.15.  DENY Property\n   Property Name: DENY\n   Purpose: This property identifies\
    \ the UPN(s) being denied access in\n      the \"VRIGHT\" component.\n   Value\
    \ Type: UPN-FILTER\n   Property Parameters: Non-standard property parameters can\
    \ be\n      specified on this property.\n   Conformance: This property can be\
    \ specified in \"VRIGHT\" components.\n   Description: This property is used in\
    \ the \"VRIGHT\" component to\n      define the CU or UG being denied access.\n\
    \   Formal Definition: The property is defined by the following notation:\n  \
    \       deny       = \"DENY\" other-params \":\" upn-filter CRLF\n   Example:\
    \ The following are examples of this property:\n         DENY:*\n         DENY:bob@example.com\n"
- title: 8.16.  EXPAND property
  contents:
  - "8.16.  EXPAND property\n   Property Name: EXPAND\n   Purpose: This property is\
    \ used to notify the CS whether to expand any\n      component with recurrence\
    \ rules into multiple instances, in a\n      query reply.\n   Value Type: BOOLEAN\n\
    \   Property Parameters: Non-standard property parameters can be\n      specified\
    \ on this property.\n   Conformance: This property can be specified in \"VQUERY\"\
    \ components.\n   Description: If a CUA wishes to see all of the instances of\
    \ a\n      recurring component, the CUA sets EXPAND=TRUE in the \"VQUERY\"\n \
    \     component.  If not specified, the default is \"FALSE\".  Note that\n   \
    \   if the CS has its \"RECUR-EXPAND\" CS property value set to \"FALSE\",\n \
    \     then the \"EXPAND\" property will be ignored and the result will be\n  \
    \    as if the \"EXPAND\" value was set to \"FALSE\".  The results will be\n \
    \     bounded by any date range or other limits in the query.\n   Formal Definition:\
    \ The property is defined by the following notation:\n         expand     = \"\
    EXPAND\" other-params \":\" (\"TRUE\" / \"FALSE\") CRLF\n   Example: The following\
    \ are examples of this property:\n         EXPAND:FALSE\n         EXPAND:TRUE\n"
- title: 8.17.  GRANT Property
  contents:
  - "8.17.  GRANT Property\n   Property Name: GRANT\n   Purpose: This property identifies\
    \ the UPN(s) being granted access in\n      the \"VRIGHT\" component.\n   Value\
    \ Type: UPN-FILTER\n   Property Parameters: Non-standard property parameters can\
    \ be\n      specified on this property.\n   Conformance: This property can be\
    \ specified in \"VRIGHT\" calendar\n      components.\n   Description: This property\
    \ is used in the \"VRIGHT\" component to\n      specify the CU or UG being granted\
    \ access.\n   Formal Definition: The property is defined by the following notation:\n\
    \         grant     = \"GRANT\" other-params \":\" upn-filter CRLF\n   Example:\
    \ The following are examples of this property:\n         GRANT:*\n         GRANT:bob@example.com\n"
- title: 8.18.  ITIP-VERSION Property
  contents:
  - "8.18.  ITIP-VERSION Property\n   Property Name: ITIP-VERSION\n   Purpose: This\
    \ property specifies the version of ITIP supported.\n   Value Type: TEXT\n   Property\
    \ Parameters: Non-standard property parameters can be\n      specified on this\
    \ property.\n   Conformance: This property is specified in the \"VREPLY\" component\n\
    \      that is sent in response to a \"GET-CAPABILITY\" command.\n   Description:\
    \ This specifies the version of ITIP that the endpoint\n      supports.  The list\
    \ is a comma-separated list of supported RFC\n      numbers.  The list MUST contain\
    \ at least 2446, which is [iTIP]\n   Formal Definition: The property is defined\
    \ by the following notation:\n         itip-version   = \"ITIP-VERSION\" other-params\
    \ \":\" text CRLF\n   Example: The following are examples of this property:\n\
    \         ITIP-VERSION:2446\n"
- title: 8.19.  MAX-COMP-SIZE Property
  contents:
  - "8.19.  MAX-COMP-SIZE Property\n   Property Name: MAX-COMP-SIZE\n   Purpose: This\
    \ property specifies the largest size of any object\n      accepted.\n   Value\
    \ Type: TEXT\n   Property Parameters: Non-standard property parameters can be\n\
    \      specified on this property.\n   Conformance: This property is specified\
    \ in the \"VREPLY\" component\n      that is sent in response to a \"GET-CAPABILITY\"\
    \ command.\n   Description: A positive integer value that specifies the size of\
    \ the\n      largest iCalendar object that can be accepted in octets.  Objects\n\
    \      larger than this will be rejected.  A value of zero (0) means no\n    \
    \  limit.  This is also the maximum value of any [BEEP] payload that\n      will\
    \ be accepted or sent.\n   Formal Definition: The property is defined by the following\
    \ notation:\n         max-comp-size   = \"MAX-COMP-SIZE\" other-params \":\" posint0\
    \ CRLF\n   Example: The following are examples of this property:\n         MAX-COMP-SIZE:1024\n"
- title: 8.20.  MAXDATE Property
  contents:
  - "8.20.  MAXDATE Property\n   Property Name: MAXDATE\n   Purpose: This property\
    \ specifies the date/time in the future, beyond\n      which the CS or CUA cannot\
    \ represent.\n   Value Type: DATE-TIME\n   Property Parameters: Non-standard property\
    \ parameters can be\n      specified on this property.\n   Conformance: The property\
    \ can be specified in the \"VCALSTORE\"\n      component.\n   Description: The\
    \ date and time MUST be a UTC value and end with 'Z'.\n   Formal Definition: The\
    \ property is defined by the following notation:\n         maxdate    = \"MAXDATE\"\
    \ other-params \":\" date-time CRLF\n   Example: The following is an example of\
    \ this property:\n         MAXDATE:20990101T000000Z\n"
- title: 8.21.  MINDATE Property
  contents:
  - "8.21.  MINDATE Property\n   Property Name: MINDATE\n   Purpose: This property\
    \ specifies the date/time in the past, prior to\n      which the server cannot\
    \ represent.\n   Value Type: DATE-TIME\n   Property Parameters: Non-standard property\
    \ parameters can be\n      specified on this property.\n   Conformance: The property\
    \ can be specified in the \"VCALSTORE\"\n      component.\n   Description: The\
    \ date and time MUST be a UTC value and end with 'Z'.\n   Formal Definition: The\
    \ property is defined by the following notation:\n         mindate    = \"MINDATE\"\
    \ other-params \":\" date-time CRLF\n         date-time = ; As defined in [iCAL].\n\
    \   Example: The following is an example of this property:\n         MINDATE:19710101T000000Z\n"
- title: 8.22.  MULTIPART Property
  contents:
  - "8.22.  MULTIPART Property\n   Property Name: MULTIPART\n   Purpose: This property\
    \ provides a comma-separated list of supported\n      MIME multipart types supported\
    \ by the sender.\n   Value Type: TEXT\n   Property Parameters: Non-standard property\
    \ parameters can be\n      specified on this property.\n   Conformance: This property\
    \ is specified in the \"VREPLY\" component\n      that is sent in response to\
    \ a \"GET-CAPABILITY\" command.\n   Description: This property is used in the\
    \ in the \"GET-CAPABILITY\"\n      command reply to indicate the MIME multipart\
    \ types supported.  A\n      CS and CUA SHOULD support all registered MIME multipart\
    \ types.\n   Formal Definition: The property is defined by the following notation:\n\
    \         multipart = \"MULTIPART\" other-params \":\" text *( \",\" text) CRLF\n\
    \   Example: The following is an example of this property:\n         MULTIPART:related,alternate,mixed\n"
- title: 8.23.  NAME Property
  contents:
  - "8.23.  NAME Property\n   Property Name: NAME\n   Purpose: This property provides\
    \ a localizable display name for a\n      component.\n   Value Type: TEXT\n  \
    \ Property Parameters: Non-standard property parameters can be\n      specified\
    \ on this property.\n   Conformance: This property can be specified in a component.\n\
    \   Description: This property is used in the component to specify a\n      localizable\
    \ display name.  If more than one \"NAME\" properties are\n      in a component,\
    \ then they MUST have unique \"LANG\" parameters.  If\n      the \"LANG\" parameter\
    \ is not supplied, then it defaults to the\n      \"VAGENDA\" component's \"DEFAULT-LOCALE\"\
    \ first value.  If the\n      component is a \"VAGENDA\", then the default value\
    \ is the \"VAGENDA\"s\n      component's \"DEFAULT-LOCALE\" first value.  A \"\
    VCALSTORE\"\n      component's \"DEFAULT-LOCALE\" first value is the default if\
    \ the\n      component is stored at the \"VCALSTORE\" level.\n   Formal Definition:\
    \ The property is defined by the following notation:\n         name          =\
    \ \"NAME\" nameparam \":\" text CRLF\n                         ;\n         nameparam\
    \     = other-params [ \";\" languageparam ] other-params\n                  \
    \       ;\n         languageparam = ; As defined in [iCAL].\n   Example: The following\
    \ is an example of this property:\n         NAME:Restrict Guests From Creating\
    \ VALARMs On VEVENTs\n"
- title: 8.24.  OWNER Property
  contents:
  - "8.24.  OWNER Property\n   Property Name: OWNER\n   Purpose: The property specifies\
    \ an owner of the component.\n   Value Type: UPN\n   Property Parameters: Non-standard,\
    \ alternate text representation and\n      language property parameters can be\
    \ specified on this property.\n   Conformance: The property MUST be specified\
    \ in a \"VAGENDA\" component.\n   Description: A multi-instanced property indicating\
    \ the calendar\n      owner.\n   Formal Definition: The property is defined by\
    \ the following notation:\n         owner = \"OWNER\" other-params \":\" upn CRLF\n\
    \   Example: The following is an example of this property:\n         OWNER:jsmith@example.com\n\
    \         OWNER:jdough@example.com\n"
- title: 8.25.  PERMISSION Property
  contents:
  - "8.25.  PERMISSION Property\n   Property Name: PERMISSION\n   Purpose: This property\
    \ defines a permission that is granted or denied\n      in a \"VRIGHT\" component.\n\
    \   Value Type: TEXT\n   Property Parameters: Non-standard property parameters\
    \ can be\n      specified on this property.\n   Conformance: This property can\
    \ be specified in \"VRIGHT\" components.\n   Description: This property is used\
    \ in the \"VRIGHT\" component to\n      define a permission that is granted or\
    \ denied.\n   Formal Definition: The property is defined by the following notation:\n\
    \         permission  = \"PERMISSION\" other-params \":\" permvalue CRLF\n   \
    \                    ;\n         permvalue = ( \"SEARCH\" / \"CREATE\" / \"DELETE\"\
    \n                     / \"MODIFY\" / \"MOVE\" / all\n                     / iana-cmd\
    \ / x-cmd )\n                       ;\n         all         = \"*\"\n        \
    \               ;\n         iana-cmd    = ; Any command registered by IANA directly\
    \ or\n                       ; included in an RFC that may be applied as\n   \
    \                    ; a command.\n                       ;\n         x-cmd  \
    \     = ; Any experimental command that starts with\n                       ;\
    \ \"x-\" or \"X-\".\n   Example: The following is an example of this property:\n\
    \      PERMISSION:SEARCH\n"
- title: 8.26.  QUERY property
  contents:
  - "8.26.  QUERY property\n   Property Name: QUERY\n   Purpose: Specifies the query\
    \ for the component.\n   Value Type: CAL-QUERY\n   Property Parameters: Non-standard\
    \ property parameters can be\n      specified on this property.\n   Conformance:\
    \ This property can be specified in \"VQUERY\" components.\n   Description: A\
    \ \"QUERY\" is used to specify the \"CAL-QUERY\" (Section\n      6.1.1 for the\
    \ query.\n   Formal Definition: The property is defined by the following notation:\n\
    \         query      = \"QUERY\" other-params \":\" cal-query CRLF\n   Example:\
    \ The following is an example of this property:\n         QUERY:SELECT * FROM\
    \ VEVENT\n"
- title: 8.27.  QUERYID property
  contents:
  - "8.27.  QUERYID property\n   Property Name: QUERYID\n   Purpose: Specifies a unique\
    \ ID for a query in the targeted container.\n   Value Type: TEXT\n   Property\
    \ Parameters: Non-standard property parameters are specified\n      on this property.\n\
    \   Conformance: This property can be specified in \"VQUERY\" components.\n  \
    \ Description: A \"QUERYID\" property is used to specify the unique id\n     \
    \ for a query.  A \"QUERYID\" property value is unique per container.\n   Formal\
    \ Definition: The property is defined by the following notation:\n         queryid\
    \      = \"QUERYID\" other-params \":\" text CRLF\n   Example: The following are\
    \ examples of this property:\n      QUERYID:Any Text String\n      QUERYID:fetchUnProcessed\n"
- title: 8.28.  QUERY-LEVEL Property
  contents:
  - "8.28.  QUERY-LEVEL Property\n   Property Name: QUERY-LEVEL\n   Purpose: This\
    \ property specifies the level of query supported.\n   Value Type: TEXT\n   Property\
    \ Parameters: Non-standard property parameters can be\n      specified on this\
    \ property.\n   Conformance: The property can be specified in the \"VREPLY\" component\n\
    \      in response to a \"GET-CAPABILITY\" command.\n   Description: Indicates\
    \ level of query support.  CAL-QL-NONE is for\n      CS's that allow ITIP methods\
    \ only to be deposited and nothing\n      else.\n   Formal Definition: The property\
    \ is defined by the following notation:\n         query-level = \"QUERY-LEVEL\"\
    \ other-params\n                         \":\" ( \"CAL-QL-1\" / \"CAL-QL-NONE\"\
    ) CRLF\n   Example: The following is an example of this property:\n         QUERY-LEVEL:CAL-QL-1\n"
- title: 8.29.  RECUR-ACCEPTED Property
  contents:
  - "8.29.  RECUR-ACCEPTED Property\n   Property Name: RECUR-ACCEPTED\n   Purpose:\
    \ This property specifies if the endpoint supports recurring\n      instances.\n\
    \   Value Type: BOOLEAN\n   Property Parameters: Non-standard property parameters\
    \ can be\n      specified on this property.\n   Conformance: The property can\
    \ be specified in the \"VREPLY\" component\n      in response to a \"GET-CAPABILITY\"\
    \ command.\n   Description: Indicates if recurrence rules are supported.  If \"\
    FALSE\"\n      then the endpoint cannot process any kind of recurring rules.\n\
    \   Formal Definition: The property is defined by the following notation:\n  \
    \       recur-accepted = \"RECUR-ACCEPTED\" other-params \":\" boolean CRLF\n\
    \   Example: The following is an example of this property:\n         RECUR-ACCEPTED:TRUE\n\
    \         RECUR-ACCEPTED:FALSE\n"
- title: 8.30.  RECUR-LIMIT Property
  contents:
  - "8.30.  RECUR-LIMIT Property\n   Property Name: RECUR-LIMIT\n   Purpose: This\
    \ property specifies the maximum number of instances the\n      endpoint will\
    \ expand instances at query or storage time.\n   Value Type: INTEGER\n   Property\
    \ Parameters: Non-standard property parameters can be\n      specified on this\
    \ property.\n   Conformance: The property can be specified in the \"VREPLY\" component\n\
    \      in response to a \"GET-CAPABILITY\" command.\n   Description: For implementations\
    \ that have the \"STORES-EXPANDED\"\n      value set to \"TRUE\", this value specifies\
    \ the maximum number of\n      instances that will be stored and fetched.  For\
    \ all\n      implementations, this is the maximum number of instances that will\n\
    \      be returned when the \"EXPAND\" parameter is specified as \"TRUE\" and\n\
    \      the results contain an infinite or large number of recurring\n      instances.\n\
    \   Formal Definition: The property is defined by the following notation:\n  \
    \       recur-limit = \"RECUR-LIMIT\" other-params \":\" posint1 CRLF\n   Example:\
    \ The following is an example of this property:\n         RECUR-LIMIT:1000\n"
- title: 8.31.  RECUR-EXPAND Property
  contents:
  - "8.31.  RECUR-EXPAND Property\n   Property Name: RECUR-EXPAND\n   Purpose: This\
    \ property specifies if the endpoint can expand\n      recurrences into multiple\
    \ objects.\n   Value Type: BOOLEAN\n   Property Parameters: Non-standard property\
    \ parameters can be\n      specified on this property.\n   Conformance: The property\
    \ can be specified in the \"VREPLY\" component\n      in response to a \"GET-CAPABILITY\"\
    \ command.\n   Description: If \"TRUE\", then the endpoint can expand an object\
    \ into\n      multiple instances as defined by its recurrence rules when the\n\
    \      \"EXPAND\" property is supplied.  If \"FALSE\", then the endpoint\n   \
    \   ignores the \"EXPAND\" property.\n   Formal Definition: The property is defined\
    \ by the following notation:\n         recur-expand = \"RECUR-EXPAND\" other-params\
    \ \":\" boolean CRLF\n   Example: The following is an example of this property:\n\
    \         RECUR-EXPAND:TRUE\n         RECUR-EXPAND:FALSE\n"
- title: 8.32.  RESTRICTION Property
  contents:
  - "8.32.  RESTRICTION Property\n   Property Name: RESTRICTION\n   Purpose: This\
    \ property defines restrictions on the result value of\n      new or existing\
    \ components.\n   Value Type: CAL-QUERY\n   Property Parameters: Non-standard\
    \ property parameters can be\n      specified on this property.\n   Conformance:\
    \ This property can be specified in \"VRIGHT\" components,\n      but only when\
    \ the \"PERMISSION\" property is set to \"CREATE\",\n      \"MODIFY\", or \"*\"\
    \ property value.\n   Description: This property is used in the \"VRIGHT\" component\
    \ to\n      define restrictions on the components that can be written (i.e.,\n\
    \      by using the \"CREATE\" or \"MOVE\" commands) as well as on the values\n\
    \      that may take existent calendar store properties, calendar\n      properties,\
    \ components, and properties (i.e., by using the\n      \"MODIFY\" command). \
    \ Accepted values MUST match any specified\n      \"RESTRICTION\" property values.\n\
    \   Formal Definition: The property is defined by the following notation:\n  \
    \       restriction  = \"RESTRICTION\" other-params \":\" cal-query CRLF\n   Example:\
    \ The following are examples of this property:\n         RESTRICTION:SELECT *\
    \ FROM VCALENDAR WHERE METHOD = 'REQUEST'\n         RESTRICTION:SELECT * FROM\
    \ VEVENT WHERE\n         SELF() IN ORGANIZER\n         RESTRICTION:SELECT * FROM\
    \ VEVENT WHERE 'BUSINESS' IN\n         CATEGORIES\n"
- title: 8.33.  SCOPE Property
  contents:
  - "8.33.  SCOPE Property\n   Property Name: SCOPE\n   Purpose: This property identifies\
    \ the objects in the CS to which the\n      access rights apply.\n   Value Type:\
    \ CAL-QUERY\n   Property Parameters: Non-standard property parameters can be\n\
    \      specified on this property.\n   Conformance: This property can be specified\
    \ in \"VRIGHT\" components.\n   Description: This property is used in the \"VRIGHT\"\
    \ component to\n      define the set of objects, subject to the access right being\n\
    \      defined.\n   Formal Definition: The property is defined by the following\
    \ notation:\n         scope    = \"SCOPE\" other-params \":\" cal-query CRLF\n\
    \   Example: The following is an example of this property:\n         SCOPE:SELECT\
    \ DTSTART,DTEND FROM VEVENT WHERE CLASS = 'PUBLIC'\n"
- title: 8.34.  STORES-EXPANDED Property
  contents:
  - "8.34.  STORES-EXPANDED Property\n   Property Name: STORES-EXPANDED\n   Purpose:\
    \ This property specifies if the sending endpoint expands\n      recurrence rules\
    \ prior to storing them into the CS.\n   Value Type: BOOLEAN\n   Property Parameters:\
    \ Non-standard property parameters can be\n      specified on this property.\n\
    \   Conformance: This property can be specified in a \"VREPLY\" component\n  \
    \    in response to a \"GET-CAPABILITY\" command.\n   Description: If the value\
    \ is \"TRUE\", then the endpoint expands\n      recurrence rules and stores the\
    \ results into the CS.  If this is\n      \"TRUE\", then the \"RECUR-LIMIT\" property\
    \ is significant because an\n      infinitely-recurring appointment will store\
    \ no more than \"RECUR-\n      LIMIT\" property values into the CS and all other\
    \ instances will be\n      lost.\n   Formal Definition: The property is specified\
    \ by the following\n      notation:\n         stores-expanded   = \"STORES-EXPANDED\"\
    \ other-params \":\" boolean\n      CRLF\n   The following is an example of this\
    \ property:\n         STORES-EXPANDED:TRUE\n         STORES-EXPANDED:FALSE\n"
- title: 8.35.  TARGET Property
  contents:
  - "8.35.  TARGET Property\n   Property Name: TARGET\n   Purpose: This property defines\
    \ the container that the issued command\n      will act upon.  Its value is a\
    \ capurl, as defined in Section 5.\n   Value Type: URI\n   Property Parameters:\
    \ Non-standard property parameters can be\n      specified on this property.\n\
    \   Conformance: This property can be specified in a command component.\n   Description:\
    \ This property value is used to specify the container\n      that the command\
    \ will effect.  When used in a command, the command\n      will be performed on\
    \ the container that has a capurl matching the\n      value.\n   Formal Definition:\
    \ The property is specified by the following\n      notation:\n         target\
    \   = \"TARGET\" other-params \":\" ( capurl / relcalid ) CRLF\n   Example: The\
    \ following is an example of this property:\n         TARGET:cap://mycal.example.com\n\
    \         TARGET:SomeRelCalid\n"
- title: 8.36.  TRANSP Property
  contents:
  - "8.36.  TRANSP Property\n   Property Name: TRANSP\n   Purpose: This property defines\
    \ whether a component is transparent or\n      not to busy-time searches.  This\
    \ is a modification to [iCAL]\n      \"TRANSP\" property, in that it adds some\
    \ values.\n   Value Type: TEXT\n   Property Parameters: Non-standard property\
    \ parameters can be\n      specified on this property.\n   Conformance: This property\
    \ can be specified in a component.\n   Description: Time Transparency is the characteristic\
    \ of an object\n      that determines whether it appears to consume time on a\
    \ calendar.\n      Objects that consume actual time for the individual or resource\n\
    \      associated with the calendar SHOULD be recorded as \"OPAQUE\",\n      allowing\
    \ them to be detected by free-busy time searches.  Other\n      objects, which\
    \ do not take up the individual's (or resource's)\n      time SHOULD be recorded\
    \ as \"TRANSPARENT\", making them invisible to\n      free/busy time searches.\n\
    \   Formal Definition: The property is specified by the following\n      notation:\n\
    \         transp    = \"TRANSP\" other-params \":\" transvalue CRLF\n        \
    \             ;\n         transvalue = \"OPAQUE\" ;Blocks or opaque on busy time\
    \ searches.\n                   / \"TRANSPARENT\"\n                          \
    \ ; Transparent on busy time searches.\n                   / \"TRANSPARENT-NOCONFLICT\"\
    \n                           ; Transparent on busy time searches,\n          \
    \                 ; and no other OPAQUE or OPAQUE-\n                         \
    \  ; NOCONFLICT objects can overlap it.\n                           ;\n      \
    \             / \"OPAQUE-NOCONFLICT\"\n                           ; Opaque on\
    \ busy time searches, and\n                           ; no other OPAQUE or OPAQUE-NOCONFLICT\n\
    \                           ; objects can overlap it.\n                      \
    \     ;\n                           ; Default value is OPAQUE\n      The following\
    \ is an example of this property for an object that is\n      opaque or blocks\
    \ on free/busy time searches, and no other object\n      can overlap it:\n   \
    \      TRANSP:OPAQUE-NOCONFLICT\n"
- title: 9.  New Components
  contents:
  - '9.  New Components

    '
- title: 9.1.  VAGENDA Component
  contents:
  - "9.1.  VAGENDA Component\n   Component Name: VAGENDA\n   Purpose: Provide a grouping\
    \ of properties that defines an agenda.\n   Formal Definition: There are two formats\
    \ of the \"VAGENDA\" component.\n      (1) When it is being created, and (2) how\
    \ it exists in the\n      \"VCALSTORE\" component.\n      A \"VAGENDA\" component\
    \ in a \"VCALSTORE\" component is defined by the\n      following notes and ABNF\
    \ notation:\n         CALSCALE -  The value MUST be from the \"VCALSTORE\" \"\
    CALSCALE\"\n            property list.  The default is the first entry in the\n\
    \            VCALSTORE CALSCALE list.\n         CREATED -  The timestamp of the\
    \ calendar's create date.  This\n            is a READ ONLY property in a \"VAGENDA\"\
    .\n         LAST-MODIFIED - The timestamp of any change to the \"VAGENDA\"\n \
    \           properties or when any component was last created, modified,\n   \
    \         or deleted.\n      agenda      = \"BEGIN\" \":\" \"VAGENDA\" CRLF\n\
    \                    agendaprop\n                    *(icalobject)     ; as defined\
    \ in [iCAL]\n                    \"END\" \":\" \"VAGENDA\" CRLF\n      agendaprop\
    \  = *(\n                    ; The following MUST occur exactly once.\n      \
    \              ;\n                      allow-conflict / relcalid / calscale /\
    \ created\n                    / default-charset / default-locale\n          \
    \          / default-tzid / last-mod\n                    ;\n                \
    \    ; The following MUST occur at least once.\n                    ; and the\
    \ value MUST NOT be empty.\n                    ;\n                    / owner\n\
    \                    ;\n                    ; The following are optional,\n  \
    \                  ; and MAY occur more than once.\n                    ;\n  \
    \                  / name / related-to / other-props / x-comp\n              \
    \    )\n      icalobject = ; As defined in [iCAL].\n                   ;\n   \
    \   created    = ; As defined in [iCAL].\n                   ;\n      related-to\
    \ = ; As defined in [iCAL].\n   When creating a VAGENDA, use the following notation:\n\
    \      agendac     = \"BEGIN\" \":\" \"VAGENDA\" CRLF\n                    agendacprop\n\
    \                    *(icalobject)     ; as defined in [iCAL].\n             \
    \       \"END\" \":\" \"VAGENDA\" CRLF\n      agendacprop  = *(\n            \
    \         ; The following MUST occur exactly once.\n                     ;\n \
    \                      allow-conflict / relcalid / calscale\n                \
    \     / default-charset / default-locale\n                     / default-tzid\n\
    \                     ;\n                     ; The following MUST occur at least\
    \ once.\n                     ; and the value MUST NOT be empty.\n           \
    \          ;\n                     / owner\n                     ;\n         \
    \            ; The following are optional,\n                     ; and MAY occur\
    \ more than once.\n                     ;\n                     / name / related-to\
    \ / other-props / x-comp\n                    )\n   To fetch all of the properties\
    \ from the targeted \"VAGENDA\" component\n   but do not fetch any components,\
    \ use:\n      SELECT * FROM VAGENDA\n   To fetch all of the properties from the\
    \ targeted VAGENDA and all of\n   the contained components, use the special '*.*'\
    \ value:\n      SELECT *.* FROM VAGENDA\n"
- title: 9.2.  VCALSTORE Component
  contents:
  - "9.2.  VCALSTORE Component\n   Component Name: VCALSTORE\n   Purpose: Provide\
    \ a grouping of properties that defines a calendar\n      store.\n   Formal Definition:\
    \ A \"VCALSTORE\" component is defined by the\n      following table and ABNF\
    \ notation.  The creation of a \"VCALSTORE\"\n      component is an administrative\
    \ task and not part of the CAP\n      protocol.\n      The following are notes\
    \ to some of the properties in the\n      \"VCALSTORE\" component.\n         CALSCALE\
    \ -  A comma-separated list of CALSCALEs supported by\n            this CS.  All\
    \ \"VAGENDA\" component calendar CALSCALE\n            properties MUST be from\
    \ this list.  This list MUST contain\n            at least \"GREGORIAN\".  The\
    \ default for newly created\n            \"VAGENDA\" components is the first entry.\n\
    \         RELATED-TO -  This is a multiple-instance property.  There MUST\n  \
    \          be a \"RELATED-TO\" property for each of the \"VAGENDA\"\n        \
    \    components contained in the \"VCALSTORE\" component, each with\n        \
    \    the \"RELTYPE\" parameter value set to \"CHILD\".  Other\n            \"\
    RELATED-TO\" properties may be included.\n         CREATED -  The timestamp of\
    \ the CS creation time.  This is a\n            READ ONLY property.\n        \
    \ CSID -  The CSID of this calendar store.  This MUST NOT be\n            empty.\
    \  How this property is set in the VCALSTORE is an\n            administrative\
    \ or implementation-specific issue and is not\n            covered in CAP.  This\
    \ is a READ ONLY property.  A suggested\n            value is the fully-qualified\
    \ host name or a fully-qualified\n            virtual host name supported by the\
    \ system.\n         LAST-MODIFIED -  The timestamp when the Properties of the\n\
    \            \"VCALSTORE\" component were last updated or calendars were\n   \
    \         created or deleted.  This is a READ ONLY PROPERTY.\n      calstorec\
    \     = \"BEGIN\" \":\" \"VCALSTORE\" CRLF\n                   calstoreprop\n\
    \                   *(vagendac)\n                   \"END\" \":\" \"VCALSTORE\"\
    \ CRLF\n                        ;\n      calstoreprop  = *(\n                \
    \        ; the following MUST occur exactly once\n                        ;\n\
    \                          allow-conflict / calscale / calmaster\n           \
    \             / created / csid / default-charset\n                        / default-locale\
    \ / default-vcars\n                        / default-tzid / last-mod / maxdate\
    \ / mindate\n                        ;\n                        ; the following\
    \ are optional,\n                        ; and MAY occur more than once\n    \
    \                    ;\n                        / name / related-to / other-props\
    \ / x-comp\n                       )\n                     ;\n      vagendac \
    \    = ; As defined in [iCAL].\n                     ;\n      last-mod     = ;\
    \ As defined in [iCAL].\n   To fetch all of the properties from the targeted VCALSTORE\
    \ and not\n   fetch the calendars that it contains, use:\n      SELECT * FROM\
    \ VCALSTORE\n   To fetch all of the properties from the targeted \"VCALSTORE\"\
    \n   component and all of the contained calendars and all of those\n   calendars'\
    \ contained properties and components, use the special '*.*'\n   value:\n    \
    \  SELECT *.* FROM VCALSTORE\n"
- title: 9.3.  VCAR Component
  contents:
  - "9.3.  VCAR Component\n   Component Name: VCAR\n   Purpose: Provide a grouping\
    \ of calendar access rights.\n   Formal Definition: A \"VCAR\" component is defined\
    \ by the following\n      notation:\n         carc    =  \"BEGIN\" \":\" \"VCAR\"\
    \ CRLF\n                    carprop 1*rightc\n                    \"END\" \":\"\
    \ \"VCAR\" CRLF\n                 ;\n         carprop = 1*(\n                \
    \ ;\n                 ; 'carid' is REQUIRED,\n                 ; but MUST NOT\
    \ occur more than once\n                 ;\n                  carid /\n      \
    \           ;\n                 ; the following are OPTIONAL,\n              \
    \   ; and MAY occur more than once\n                 ;\n          name / decreed\
    \ / other-props\n         )\n   Description: A \"VCAR\" component is a grouping\
    \ of properties, and\n      \"VRIGHT\" components, that represents access rights\
    \ granted or\n      denied to UPNs.\n      The \"CARID\" property specifies the\
    \ local identifier for the \"VCAR\"\n      component.  The \"NAME\" property specifies\
    \ a localizable display\n      name.\n   Example: In the following example, the\
    \ UPN \"foo@example.com\" is given\n      search access to the \"DTSTART\" and\
    \ \"DTEND\" VEVENT properties.  No\n      other access is specified:\n       \
    \  BEGIN:VCAR\n         CARID:View Start and End Times\n         NAME:View Start\
    \ and End Times\n         BEGIN:VRIGHT\n         GRANT:foo@example.com\n     \
    \    PERMISSION:SEARCH\n         SCOPE:SELECT DTSTART,DTEND FROM VEVENT\n    \
    \     END:VRIGHT\n         END:VCAR\n      In this example, all UPNs are given\
    \ search access to \"DTSTART\" and\n      \"DTEND\" properties of VEVENT components.\
    \  \"All CUs and UGs\" are\n      specified by the UPN value \"*\".  Note that\
    \ this enumerated UPN\n      value is not in quotes:\n         BEGIN:VCAR\n  \
    \       CARID:ViewStartEnd2\n         NAME:View Start and End Times 2\n      \
    \   BEGIN:VRIGHT\n         GRANT:*\n         PERMISSION:SEARCH\n         SCOPE:SELECT\
    \ DTSTART,DTEND FROM VEVENT\n         END:VRIGHT\n         END:VCAR\n      In\
    \ these examples, full calendar access rights are given to the\n      CAL-OWNERS(),\
    \ and a hypothetical administrator is given access\n      rights to specify calendar\
    \ access rights.  If no other rights are\n      specified, only these two UPNs\
    \ can specify calendar access rights:\n         BEGIN:VCAR\n         CARID:some-id-3\n\
    \         NAME:Only OWNER or ADMIN Settable VCARs\n         BEGIN:VRIGHT\n   \
    \      GRANT:CAL-OWNERS()\n         PERMISSION:*\n         SCOPE:SELECT * FROM\
    \ VAGENDA\n         END:VRIGHT\n         BEGIN:VRIGHT\n         GRANT:cal-admin@example.com\n\
    \         PERMISSION:*\n         SCOPE:SELECT * FROM VCAR\n         RESTRICTION:SELECT\
    \ * FROM VCAR\n         END:VRIGHT\n         END:VCAR\n      In this example,\
    \ rights to write, search, modify or delete\n      calendar access are denied\
    \ to all UPNs.  This example would\n      disable providing different access rights\
    \ to the calendar store or\n      calendar.  This calendar access right should\
    \ be specified with\n      great care, as it removes the ability to change calendar\
    \ access;\n      even for the owner or administrator.  It could be used by small\n\
    \      devices that do not support changing any VCAR:\n         BEGIN:VCAR\n \
    \        CARID:VeryRestrictiveVCAR-2\n         NAME:No CAR At All\n         BEGIN:VRIGHT\n\
    \         DENY:*\n         PERMISSION:*\n         SCOPE:SELECT * FROM VCAR\n \
    \        END:VRIGHT\n         END:VCAR\n"
- title: 9.4.  VRIGHT Component
  contents:
  - "9.4.  VRIGHT Component\n   Component Name: \"VRIGHT\"\n   Purpose: Provide a\
    \ grouping of properties that describe an access\n      right (granted or denied).\n\
    \   Formal Definition: A \"VRIGHT\" component is defined by the following\n  \
    \    notation:\n         rightc    = \"BEGIN\" \":\" \"VRIGHT\" CRLF\n       \
    \              rightprop\n                     \"END\" \":\" \"VRIGHT\" CRLF\n\
    \                   ;\n         rightprop = 2*(\n                   ;\n      \
    \             ; either 'grant' or 'deny' MUST\n                   ; occur at least\
    \ once\n                   ; and MAY occur more than once\n                  \
    \ ;\n                    grant / deny /\n                   ;\n              \
    \     ; 'permission' MUST occur at least once\n                   ; and MAY occur\
    \ more than once\n                   ;\n                    permission /\n   \
    \                ;\n                   ; the following are optional,\n       \
    \            ; and MAY occur more than once\n                   ;\n          \
    \          scope / restriction / other-props\n                )\n   Description:\
    \ A \"VRIGHT\" component is a grouping of calendar access\n      right properties.\n\
    \      The \"GRANT\" property specifies the UPN that is being granted\n      access.\
    \  The \"DENY\" property specifies the UPN that is being\n      denied access.\
    \  The \"PERMISSION\" property specifies the actual\n      permission being set.\
    \  The \"SCOPE\" property identifies the\n      calendar store properties, calendar\
    \ properties, components, or\n      properties to which the access right applies.\
    \  The \"RESTRICTION\"\n      property specifies restrictions on commands and\
    \ results.  If the\n      command does not match the restrictions, or if the results\
    \ of the\n      command do not match the restrictions, then it is an access\n\
    \      violation.\n"
- title: 9.5.  VREPLY Component
  contents:
  - "9.5.  VREPLY Component\n   Component Name: \"VREPLY\"\n   Purpose: Provide a\
    \ grouping of arbitrary properties and components\n      that are the data set\
    \ result from an issued command.\n   Formal Definition: A \"VREPLY\" component\
    \ is defined by the following\n      notation:\n      replyc           =  \"BEGIN\"\
    \ \":\" \"VREPLY\" CRLF\n                          any-prop-or-comp\n        \
    \                  \"END\" \":\" \"VREPLY\" CRLF\n                       ;\n \
    \     any-prop-or-comp = ; Zero or more iana or experimental\n               \
    \          ; properties and components, in any order.\n   Description: Provide\
    \ a grouping of arbitrary properties and\n      components that are the data set\
    \ result from an issued command.\n      A query can return a predictable set of\
    \ arbitrary properties and\n      components.  This component is used by query\
    \ and other commands to\n      return data that does not fit into any other component.\
    \  It may\n      contain any valid property or component, even if they are not\n\
    \      registered.\n"
- title: 9.6.  VQUERY Component
  contents:
  - "9.6.  VQUERY Component\n   Component Name: VQUERY\n   Purpose: A component describes\
    \ a set of objects to be acted upon.\n   Formal Definition: A \"VQUERY\" component\
    \ is defined by the following\n      notation:\n      queryc    =  \"BEGIN\" \"\
    :\" \"VQUERY\" CRLF\n                   queryprop\n                   \"END\"\
    \ \":\" \"VCAR\" CRLF\n                ;\n      queryprop = 1*(\n            \
    \    ;\n                ; 'queryid' is OPTIONAL but MUST NOT occur\n         \
    \       ; more than once. If the \"TARGET\" property\n                ; is supplied\
    \ then the \"QUERYID\" property\n                ; MUST be supplied.\n       \
    \         ;\n                 queryid / target\n                ;\n          \
    \      ; 'expand' is OPTIONAL but MUST NOT occur\n                ; more than\
    \ once.\n                ;\n                 expand\n                ;\n     \
    \           ; the following are OPTIONAL, and MAY occur\n                ; more\
    \ than once\n                ;\n                / name / other-props\n       \
    \         ;\n                ; the following MUST occur at least once if\n   \
    \             ; queryid is not supplied.\n                ;\n                /\
    \ query\n              )\n   Description: A \"VQUERY\" contains properties that\
    \ describe which\n      properties and components the CS is requested to act upon.\n\
    \      The \"QUERYID\" property specifies the local identifier for a\n      \"\
    VQUERY\" component.\n      For a search, if the \"TARGET\" property is supplied\
    \ in a \"VQUERY\"\n      component, then the CS is to search for the query in\
    \ the CALID\n      supplied by the \"TARGET\" property value.\n      For a create,\
    \ the \"TARGET\" property MUST NOT be supplied because\n      the destination\
    \ container is already supplied in the \"TARGET\"\n      property of the \"VCALENDAR\"\
    \ component.\n   Examples: see Section 6.1.1.\n"
- title: 10.  Commands and Responses
  contents:
  - "10.  Commands and Responses\n   CAP commands and responses are described in this\
    \ section.\n"
- title: 10.1.  CAP Commands (CMD)
  contents:
  - "10.1.  CAP Commands (CMD)\n   All commands are sent using the CMD property.\n\
    \   Property Name: CMD\n   Purpose: This property defines the command to be sent.\n\
    \   Value Type: TEXT\n   Property Parameters: Non-standard, id, localize, latency,\
    \ action or\n      options.\n   Conformance: This property is the method used\
    \ to specify the commands\n      to a CS; it can exist in any object sent to the\
    \ CS.\n   Description: All of the commands to the CS are supplied in this\n  \
    \    property.  The \"OPTIONS\" parameter is overloaded and its meaning\n    \
    \  is dependent on the CMD value supplied.\n      Formal Definition: The property\
    \ is defined by the following\n      notation:\n         cmd              = \"\
    CMD\" (\n                            abort-cmd\n                          / continue-cmd\n\
    \                          / create-cmd\n                          / delete-cmd\n\
    \                          / generate-uid-cmd\n                          / get-capability-cmd\n\
    \                          / identify-cmd\n                          / modify-cmd\n\
    \                          / move-cmd\n                          / reply-cmd\n\
    \                          / search-cmd\n                          / set-locale-cmd\n\
    \                          / iana-cmd\n                          / x-cmd\n   \
    \                        ) CRLF\n                         ;\n         option-value\
    \    = \"OPTION\" \"=\" paramtext\n                         ;\n         paramtext\
    \       ; As defined in [iCAL].\n   Calendaring commands allow a CUA to directly\
    \ manipulate a calendar.\n   Calendar access rights can be granted or denied for\
    \ any commands.\n"
- title: 10.1.1.  Bounded Latency
  contents:
  - "10.1.1.  Bounded Latency\n   A CAP command can have an associated maximum latency\
    \ time by\n   specifying the \"LATENCY\" parameter.  If the command is unable\
    \ to be\n   completed in the specified amount of time (as specified by the\n \
    \  \"LATENCY\" parameter value with an \"ACTION\" parameter set to the \"ASK\"\
    \n   value), then a \"TIMEOUT\" command MUST be sent on the same channel\".\n\
    \   The reply MUST be a an \"ABORT\" or a \"CONTINUE\" command.  If the CUA\n\
    \   initiated the original command, then the CS would issue the \"TIMEOUT\"\n\
    \   command and the CUA would then have to issue an \"ABORT\" or \"CONTINUE\"\n\
    \   command.  If the CS initiated the original command then the CUA would\n  \
    \ have to issue the \"TIMEOUT\" and the CS would send the \"ABORT\" or\n   \"\
    CONTINUE\".\n   Upon receiving an \"ABORT\" command, the command must then be\n\
    \   terminated.  Only the \"ABORT\", \"TIMEOUT\", \"REPLY, and \"CONTINUE\"\n\
    \   commands cannot be aborted.  The \"ABORT\", \"TIMEOUT\", and \"REPLY\"\n \
    \  commands MUST NOT have latency set.\n   Upon receiving a \"CONTINUE\" command\
    \ the work continues as if it had\n   not been delayed or stopped.  Note that\
    \ a new latency time MAY be\n   included in a \"CONTINUE\" command indicating\
    \ to continue the original\n   command until the \"LATENCY\" parameter value expires\
    \ or the results of\n   the original command can be returned.\n   Both the \"\
    LATENCY\" parameter and the \"ACTION\" parameter MUST be\n   supplied to any \"\
    CMD\" property, or nether can be added to the \"CMD\"\n   property.  The \"LATENCY\"\
    \ parameter MUST be set to the maximum latency\n   time in seconds.  The \"ACTION\"\
    \ parameter accepts the following\n   values: \"ASK\" and \"ABORT\" parameters.\n\
    \   If the maximum latency time is exceeded and the \"ACTION\" parameter is\n\
    \   set to the \"ASK\" value, then \"TIMEOUT\" command MUST be sent.\n   Otherwise,\
    \ if the \"ACTION\" parameter is set to the \"ABORT\" value,\n   then the command\
    \ MUST be terminated and return a REQUEST-STATUS code\n   of 2.0.3 for the original\
    \ command.\n   If a CS can both start sending the reply to a command and guarantee\n\
    \   that all of the results can be sent from a command (short of\n   something\
    \ like network or power failure) prior to the \"LATENCY\"\n   timeout value, then\
    \ the \"LATENCY\" time has not expired.\n   Example:\n   In this example the initiator\
    \ asks for the listeners capabilities.\n      I: Content-Type: text/calendar\n\
    \      I:\n      I: BEGIN:VCALENDAR\n      I: VERSION:2.0\n      I: PRODID:The\
    \ CUA's PRODID\n      I: CMD;ID=xyz12346;LATENCY=3;ACTION=ask:GET-CAPABILITY\n\
    \      I: END:VCALENDAR\n   # After 3 seconds\n      L: Content-Type: text/calendar\n\
    \      L:\n      L: BEGIN:VCALENDAR\n      L: PRODID:-//someone's prodid\n   \
    \   L: VERSION:2.0\n      L: CMD;ID=xyz12346:TIMEOUT\n      L: END:VCALENDAR\n\
    \   In order to continue and give the CS more time, the CUA would issue a\n  \
    \ \"CONTINUE\" command:\n      I: Content-Type: text/calendar\n      I:\n    \
    \  I: BEGIN:VCALENDAR\n      I: VERSION:2.0\n      I: PRODID:-//someone's prodid\n\
    \      I: CMD;ID=xyz12346;LATENCY=3;ACTION=ask:CONTINUE\n      I: END:VCALENDAR\n\
    \      L: Content-Type: text/calendar\n      L:\n      L: BEGIN:VCALENDAR\n  \
    \    L: VERSION:2.0\n      L: PRODID:-//someone's prodid\n      L: CMD;ID=xyz12346:REPLY\n\
    \      L: BEGIN:VREPLY\n      L: REQUEST-STATUS:2.0.3;Continued for 3 more seconds\n\
    \      L: END:VREPLY\n      L: END:VCALENDAR\n   Here the \"2.0.3\" status is\
    \ returned because it is not an error, it is\n   a progress status sent in reply\
    \ to the \"CONTINUE\" command.\n   To abort the command and not wait any further,\
    \ issue an \"ABORT\"\n   command:\n      I: Content-Type: text/calendar\n    \
    \  I:\n      I: BEGIN:VCALENDAR\n      I: VERSION:2.0\n      I: PRODID:-//someone's\
    \ prodid\n      I: CMD;ID=xyz12346:ABORT\n      I: END:VCALENDAR\n   # Which would\
    \ result in a 2.0.3 reply.\n      L: Content-Type: text/calendar\n      L:\n \
    \     L: BEGIN:VCALENDAR\n      L: VERSION:2.0\n      L: PRODID:-//someone's prodid\n\
    \      L: CMD;ID=xyz12346:REPLY\n      L: BEGIN:VREPLY\n      L: REQUEST-STATUS:2.0.3;Aborted\
    \ As Requested.\n      L: END:VREPLY\n      L: END:VCALENDAR\n   If the \"ACTION\"\
    \ value had been set to \"ABORT\", then the listner would\n   send a \"7.0\" error\
    \ on timeout in the reply to the command that\n   initiated the command that timed\
    \ out.\n"
- title: 10.2.  ABORT Command
  contents:
  - "10.2.  ABORT Command\n   CMD: ABORT\n   Purpose: The \"ABORT\" command is sent\
    \ to request that the named or the\n      only in-process command be aborted.\
    \  Latency MUST not be supplied\n      with the \"ABORT\" command.\n   Formal\
    \ Definition: An \"ABORT\" command is defined by the following\n      notation:\n\
    \         abort-cmd    = abortparam \":\" \"ABORT\"\n                      ;\n\
    \         abortparam   = *(\n                      ;\n                      ;\
    \ the following are optional,\n                      ; but MUST NOT occur more\
    \ than once\n                      ;\n                        id-param\n     \
    \                 / localize-param\n                      ;\n                \
    \      ; the following is optional,\n                      ; and MAY occur more\
    \ than once\n                      ;\n                      / other-params\n \
    \                     )\n         The REPLY of any \"ABORT\" command is:\n   \
    \      abort-reply  = \"BEGIN\" \":\" \"VCALENDAR\" CRLF\n                   \
    \      calprops\n                         abort-vreply\n                     \
    \   \"END\" \":\" \"VCALENDAR\" CRLF\n                      ;\n         abort-vreply\
    \ = \"BEGIN\" \":\" \"VREPLY\" CRLF\n                         rstatus\n      \
    \                   other-props\n                         \"END\" \":\" \"VREPLY\"\
    \ CRLF\n"
- title: 10.3.  CONTINUE Command
  contents:
  - "10.3.  CONTINUE Command\n   CMD: CONTINUE\n   Purpose: The \"CONTINUE\" command\
    \ is only sent after a \"TIMEOUT\"\n      command has been received to inform\
    \ the other end of the session\n      to resume working on a command.\n   Formal\
    \ Definition: A \"CONTINUE\" command is defined by the following\n      notation:\n\
    \         continue-cmd   = continueparam \":\" \"CONTINUE\"\n                \
    \      ;\n         continueparam  = *(\n                      ;\n            \
    \          ; the following are optional,\n                      ; but MUST NOT\
    \ occur more than once\n                      ;\n                           id-param\n\
    \                         / localize-param\n                         / latency-param\n\
    \                      ;\n                      ; the following MUST occur exactly\
    \ once and only\n                      ; when the latency-param has been supplied\
    \ and\n                      ; MUST NOT be supplied if the latency-param is\n\
    \                      ; not supplied.\n                      ;\n            \
    \             / action-param\n                      ;\n                      ;\
    \ the following are optional,\n                      ; and MAY occur more than\
    \ once\n                      ;\n                         / other-params\n   \
    \                      )\n      The REPLY of any \"CONTINUE\" command is:\n  \
    \       continue-reply   = \"BEGIN\" \":\" \"VCALENDAR\" CRLF\n              \
    \              calprops\n                            continue-vreply\n       \
    \                     \"END\" \":\" \"VCALENDAR\" CRLF\n                     \
    \     ;\n         continue-vreply  = \"BEGIN\" \":\" \"VREPLY\" CRLF\n       \
    \                     rstatus\n                            other-props\n     \
    \                       \"END\" \":\" \"VREPLY\" CRLF\n"
- title: 10.4.  CREATE Command
  contents:
  - "10.4.  CREATE Command\n   CMD: CREATE\n   Purpose:  The \"CREATE\" command is\
    \ used to create one or more\n      iCalendar objects in the store in the \"BOOKED\"\
    \ or \"UNPROCESSED\"\n      state.\n      A CUA MAY send a \"CREATE\" command\
    \ to a CS.  The \"CREATE\" command\n      MUST be implemented by all CSs.\n  \
    \    The CS MUST NOT send a \"CREATE\" command to any CUA.\n   Formal Definition:\
    \ A \"CREATE\" command is defined by the following\n      notation and the hierarchy\
    \ restrictions, as defined in Section\n      3.2:\n         create-cmd     = createparam\
    \ \":\" \"CREATE\"\n                      ;\n         createparam    = *(\n  \
    \                    ;\n                      ; the following are optional,\n\
    \                      ; but MUST NOT occur more than once\n                 \
    \     ;\n                          id-param\n                        / localize-param\n\
    \                        / latency-param\n                      ;\n          \
    \            ; the following MUST occur exactly once and only\n              \
    \        ; when the latency-param has been supplied and\n                    \
    \  ; MUST NOT be supplied if the latency-param is\n                      ; not\
    \ supplied.\n                      ;\n                        / action-param\n\
    \                      ;\n                      ; the following is optional,\n\
    \                      ; and MAY occur more than once\n                      ;\n\
    \                        / other-params\n                       )\n   Response:\n\
    \      One iCalendar object per TARGET property MUST be returned.\n      The REPLY\
    \ of any \"CREATE\" command is limited to the restriction\n      tables defined\
    \ in [iTIP] for iTIP objects, in addition to this\n      ABNF:\n      create-reply\
    \   = \"BEGIN\" \":\" \"VCALENDAR\" CRLF\n                        creply-props\n\
    \                        1*(create-vreply)\n                        \"END\" \"\
    :\" \"VCALENDAR\" CRLF\n                     ;\n      create-vreply  = \"BEGIN\"\
    \ \":\" \"VREPLY\" CRLF\n                       created-id\n                 \
    \      rstatus\n                       other-props\n                       \"\
    END\" \":\" \"VREPLY\" CRLF\n                     ;\n                     ; Where\
    \ the id is appropriate for the\n                     ; type of object created:\n\
    \                     ;\n                     ; VAGENDA = relcalid\n         \
    \            ; VALARM = sequence\n                     ; VCAR = carid\n      \
    \               ; VEVENT, VFREEBUSY, VJOURNAL, VTODO = uid\n                 \
    \    ; VQUERY = queryid\n                     ; VTIMEZONE = tzid\n           \
    \          ; x-comp = x-id\n                     ;\n      created-id    = ( relcalid\
    \ / carid / uid / queryid /\n                        tzid / sequence / x-id)\n\
    \                      ;\n      tzid          = ; As defined in [iCAL].\n    \
    \                  ;\n      sequence      = ; As defined in [iCAL].\n        \
    \              ;\n      uid           = ; As defined in [iCAL].\n            \
    \          ;\n      x-id          = ; An ID for an x-component.\n            \
    \          ;\n      creply-props  = 4*(\n                      ; These are REQUIRED\
    \ and MUST NOT occur\n                      ; more than once.\n              \
    \        ;\n                       prodid /version / target / reply-cmd\n    \
    \                  ;\n                      ; These are optional, and may occur\
    \ more\n                      ; than once.\n                      ;\n        \
    \               other-props )\n      For a \"CREATE\" command, the \"TARGET\"\
    \ property specifies the\n      containers where the components will be created.\n\
    \      If the iCalendar object being created does not have a \"METHOD\"\n    \
    \  property, then its state is \"BOOKED\" and it is not an [iTIP]\n      scheduling\
    \ object.  Use the \"DELETE\" command to set the state of\n      an object to\
    \ the \"DELETED\" state (tagged for deletion).  A CUA\n      cannot use the \"\
    CREATE\" command to create an object in the\n      \"DELETED\" state.\n      If\
    \ the intention is to book an [iTIP] object, then the \"METHOD\"\n      property\
    \ MUST NOT be supplied.  Otherwise, any [iTIP] object MUST\n      have a valid\
    \ [iTIP] \"METHOD\" property value and it is a scheduling\n      request being\
    \ deposited into the CS with its state set to\n      \"UNPROCESSED\".\n   Format\
    \ Definition: ABNF for a \"CREATE\" object is:\n      create-object = \"BEGIN\"\
    \ \":\" \"VCALENDAR\" CRLF\n                ; If 'calprops' contain the \"METHOD\"\
    \ property\n                ; then this 'create-object' component MUST\n     \
    \           ; conform to [iTIP] restrictions.\n                ;\n           \
    \     ; calprops MUST include 'create-cmd'\n                ;\n              \
    \        calprops\n                      other-props\n                      1*(create-comp)\n\
    \                      \"END\" \":\" \"VCALENDAR\" CRLF\n                ; NOTE:\
    \ The 'VCALSTORE' component is not included in\n                ; 'create-comp'\
    \ as it is out of scope for CAP to create\n                ; a new CS.\n     \
    \           ;\n       create-comp =  agendac / carc / queryc\n               \
    \      / timezonec / freebusyc\n                     / eventc / todoc / journalc\n\
    \                     / iana-comp / x-comp\n                     ;\n      freebusyc\
    \    = ; As defined in [iCAL].\n                     ;\n      eventc       = ;\
    \ As defined in [iCAL].\n                     ;\n      journalc     = ; As defined\
    \ in [iCAL].\n                     ;\n      timezonec    = ; As defined in [iCAL].\n\
    \                     ;\n      todoc        = ; As defined in [iCAL].\n   In the\
    \ following example, two new top level \"VAGENDA\" components are\n   created.\
    \  Note that the \"CSID\" value of the server is\n   cal.example.com, which is\
    \ where the new \"VAGENDA\" components are\n   going to be created.\n      C:\
    \ Content-Type: text/calendar\n      C:\n      C: BEGIN:VCALENDAR\n      C: PRODID:-//someone's\
    \ prodid\n      C: VERSION:2.0\n      C: CMD;ID=creation01:CREATE\n      C: TARGET:cal.example.com\n\
    \      C: BEGIN:VAGENDA                 <- data for 1st new calendar\n      C:\
    \ CALID:relcalz1\n      C: NAME;LANGUAGE=en_US:Bill's Soccer Team\n      C: OWNER:bill\n\
    \      C: CALMASTER:mailto:bill@example.com\n      C: TZID:US/Pacific\n      C:\
    \ END:VAGENDA\n      C: BEGIN:VAGENDA                 <- data for 2nd new calendar\n\
    \      C: CALID:relcalz2\n      C: NAME;LANGUAGE=EN-us:Mary's personal calendar\n\
    \      C: OWNER:mary\n      C: CALMASTER:mailto:mary@example.com\n      C: TZID:US/Pacific\n\
    \      C: END:VAGENDA\n      C: END:VCALENDAR\n      S: Content-Type: text/calendar\n\
    \      S:\n      S: BEGIN:VCALENDAR\n      S: VERSION:2.0\n      S: PRODID:-//someone's\
    \ prodid\n      S: CMD;ID=creation01:REPLY\n      S: TARGET:cal.example.com\n\
    \      S: BEGIN:VREPLY                <- Reply for 1st calendar create\n     \
    \ S: CALID:relcalz1\n      S: REQUEST-STATUS:2.0\n      S: END:REPLY\n      S:\
    \ BEGIN:VREPLY                <- Reply for 2nd calendar create\n      S: CALID:relcalz2\n\
    \      S: REQUEST-STATUS:2.0\n      S: END:VREPLY\n      S: END:VCALENDAR\n  \
    \    To create a new component in multiple containers, simply name all\n     \
    \ of the containers in the \"TARGET\" in the create command.  A new\n      \"\
    VEVENT\" component is created in two TARGET components.  In this\n      example,\
    \ the \"VEVENT\" component is one new [iTIP] \"REQUEST\" to be\n      stored in\
    \ two calendars.  The results would be iCalendar objects\n      that conform to\
    \ the [iTIP] replies as defined in [iTIP].\n      This example shows two [iTIP]\
    \ \"VEVENT\" components being created in\n      each of the two supplied \"TARGET\"\
    \ properties.  As it contains the\n      \"METHOD\" property, they will be stored\
    \ in the \"UNPROCESSED\" state:\n      C: Content-Type: text/calendar\n      C:\n\
    \      C: BEGIN:VCALENDAR\n      C: VERSION:2.0\n      C: PRODID:-//someone's\
    \ prodid\n      C: CMD;ID=creation02:CREATE\n      C: METHOD:REQUEST\n      C:\
    \ TARGET:relcalz1\n      C: TARGET:relcalz2\n      C: BEGIN:VEVENT\n      C: DTSTART:20030307T180000Z\n\
    \      C: UID:FirstInThisExample-1\n      C: DTEND:20030307T190000Z\n      C:\
    \ SUMMARY:Important Meeting\n      C: END:VEVENT\n      C: BEGIN:VEVENT\n    \
    \  C: DTSTART:20040307T180000Z\n      C: UID:SecondInThisExample-2\n      C: DTEND:20040307T190000Z\n\
    \      C: SUMMARY:Important Meeting\n      C: END:VEVENT\n      C: END:VCALENDAR\n\
    \      The CS sends the \"VREPLY\" commands in separate MIME objects, one\n  \
    \    per supplied \"TARGET\" property value.\n      S: Content-Type: text/calendar\n\
    \      S:\n      S: BEGIN:VCALENDAR\n      S: VERSION:2.0\n      S: PRODID:-//someone's\
    \ prodid\n      S: CMD;ID=creation02:REPLY\n      S: TARGET:relcalz1  <- 1st TARGET\
    \ listed.\n      S: BEGIN:REPLY      <- Reply for 1st VEVENT create in 1st TARGET.\n\
    \      S: UID:FirstInThisExample-1\n      S: REQUEST-STATUS:2.0\n      S: END:VREPLY\n\
    \      S: BEGIN:REPLY        <- Reply for 2nd VEVENT crate in 1st TARGET.\n  \
    \    S: UID:SecondInThisExample-2\n      S: REQUEST-STATUS:2.0\n      S: END:VREPLY\n\
    \      S: END:VCALENDAR\n   And the second reply for the 2nd TARGET:\n      S:\
    \ Content-Type: text/calendar\n      S:\n      S: BEGIN:VCALENDAR\n      S: VERSION:2.0\n\
    \      S: PRODID:-//someone's prodid\n      S: CMD;ID=creation02:REPLY\n     \
    \ S: TARGET:relcalz2  <- 2nd TARGET listed\n      S: BEGIN:REPLY      <- Reply\
    \ for 1st VEVENT create in 2nd TARGET.\n      S: UID:FirstInThisExample-1\n  \
    \    S: REQUEST-STATUS:2.0\n      S: END:VREPLY\n      S: BEGIN:REPLY      <-\
    \ Reply for 2nd VEVENT crate in 2nd TARGET.\n      S: UID:SecondInThisExample-2\n\
    \      S: REQUEST-STATUS:2.0\n      S: END:VREPLY\n      S: END:VCALENDAR\n"
- title: 10.5.  DELETE Command
  contents:
  - "10.5.  DELETE Command\n   CMD: DELETE\n   Purpose: The \"DELETE\" command physically\
    \ removes the QUERY result\n      from the store or marks it for deletion.\n \
    \     A CUA MAY send a \"DELETE\" command to a CS.  The \"DELETE\" command\n \
    \     MUST be implemented by all CSs.\n      The CS MUST NOT send a \"DELETE\"\
    \ command to any CUA.\n   Formal Definition: A \"DELETE\" command is defined by\
    \ the following\n      notation:\n         delete-cmd   = deleteparam \":\" \"\
    DELETE\"\n                  ;\n         deleteparam  = *(\n                  ;\n\
    \                  ; the following are optional,\n                  ; but MUST\
    \ NOT occur more than once\n                  ;\n                       id-param\n\
    \                      / localize-param\n                      / latency-param\n\
    \                      / option-param \"MARK\"\n                  ;\n        \
    \          ; The following MUST occur exactly once and\n                  ; only\
    \ when the latency-param has been supplied.\n                  ; It MUST NOT be\
    \ supplied if the latency-param\n                  ; is not supplied.\n      \
    \            ;\n                      / action-param\n                  ;\n  \
    \                ; the following is optional,\n                  ; and MAY occur\
    \ more than once\n                  ;\n                      / other-params\n\
    \                     )\n      The \"DELETE\" command is used to delete calendars\
    \ or components.\n      The included \"VQUERY\" component(s) specifies the container(s)\
    \ to\n      delete.\n      To mark a component for delete without physically removing\
    \ it,\n      include the \"OPTIONS\" parameter with its value set to the \"MARK\"\
    \n      value in order to alter its state to \"DELETED\".\n      When components\
    \ are deleted, only the top-most component\n      \"REQUEST-STATUS\" properties\
    \ are returned.  No \"REQUEST-STATUS\"\n      properties are returned for components\
    \ inside of the selected\n      components.  There MUST be one \"VREPLY\" component\
    \ returned for\n      each object that is deleted or marked for delete.  Note\
    \ that if no\n      \"VREPLY\" components are returned, then nothing matched and\
    \ nothing\n      was deleted.\n      Restriction Table for the \"REPLY\" command\
    \ for any \"DELETE\"\n      command.\n         delete-reply   = \"BEGIN\" \":\"\
    \ \"VCALENDAR\" CRLF\n                          calprops   ; MUST include 'reply-cmd'\n\
    \                          *(delete-vreply)\n                          \"END\"\
    \ \":\" \"VCALENDAR\" CRLF\n                        ;\n         delete-vreply\
    \  = \"BEGIN\" \":\" \"VREPLY\" CRLF\n                          deleted-id\n \
    \                         rstatus\n                          \"END\" \":\" \"\
    VREPLY\" CRLF\n                        ;\n                        ; Where the\
    \ id is appropriate for the\n                        ; type of object deleted:\n\
    \                        ;\n                        ; VAGENDA = relcalid\n   \
    \                     ; VCAR = carid\n                        ; VEVENT, VFREEBUSY,\
    \ VJOURNAL, VTODO = uid\n                        ; VQUERY = queryid\n        \
    \                ; ALARM = sequence\n                        ; VTIMEZONE = tzid\n\
    \                        ; x-comp = x-id\n                        ; An instance\
    \ = uid recurid\n                        ;\n         deleted-id    = ( relcalid\
    \ / carid / uid / uid recurid\n                        / queryid / tzid / sequence\
    \ / x-id )\n   Example: to delete a \"VEVENT\" component with \"UID\" value of\n\
    \      \"abcd12345\" from the calendar \"relcalid-22\" from the current CS:\n\
    \         C: Content-Type: text/calendar\n         C:\n         C: BEGIN:VCALENDAR\n\
    \         C: TARGET:relcalid-22\n         C: CMD;ID:\"random but unique per CUA\"\
    :DELETE\n         C: BEGIN:VQUERY\n         C: QUERY:SELECT VEVENT FROM VAGENDA\
    \ WHERE UID = 'abcd12345'\n         C: END:VQUERY\n         C: END:VCALENDAR\n\
    \         S: BEGIN:VCALENDAR\n         S: TARGET:relcalid-22\n         S: CMD;ID:\"\
    random but unique per CUA\":REPLY\n         S: BEGIN:VREPLY\n         S: UID:abcd12345\n\
    \         S: REQUEST-STATUS:3.0\n         S: END:VREPLY\n         S: END:VCALENDAR\n\
    \      One or more iCalendar objects will be returned that contain\n      \"REQUEST-STATUS\"\
    \ properties for the deleted components.  More than\n      one component could\
    \ have been deleted.  Any booked component and\n      any number of unprocessed\
    \ [iTIP] scheduling components that\n      matched the QUERY value in the above\
    \ example will be returned.\n      Each unique \"METHOD\" property value that\
    \ was deleted from the\n      store MUST be in a separate iCalendar object.  This\
    \ is because\n      only one \"METHOD\" property is allowed in a single \"VCALENDAR\"\
    \n      BEGIN/END block.\n"
- title: 10.6.  GENERATE-UID Command
  contents:
  - "10.6.  GENERATE-UID Command\n   CMD: GENERATE-UID\n   Purpose: The \"GENERATE-UID\"\
    \ command returns one or more unique\n      identifiers that MUST be globally\
    \ unique.\n      The \"GENERATE-UID\" command MAY be sent to any CS.  The \"GENERATE-\n\
    \      UID\" command MUST be implemented by all CSs.\n      The \"GENERATE-UID\"\
    \ command MUST NOT be sent to a CUA.\n   Formal Definition: A \"GENERATE-UID\"\
    \ command is defined by the\n      following notation:\n         generate-uid-cmd\
    \   = genuidparam \":\" \"GENERATE-UID\"\n                        ;\n        \
    \ genuidparam        = *(\n                        ;\n                       \
    \ ; The following are optional,\n                        ; but MUST NOT occur\
    \ more than once.\n                            ;\n                           \
    \   id-param\n                            / localize-param\n                 \
    \           / latency-param\n                        ;\n                     \
    \   ; The following MUST occur exactly once and\n                        ; only\
    \ when the latency-param has been supplied.\n                        ; It MUST\
    \ NOT be supplied if the latency-param\n                        ; is not supplied.\n\
    \                        ;\n                            / action-param\n     \
    \                   ;\n                        ; The following is optional,\n\
    \                        ; and MAY occur more than once.\n                   \
    \     ;\n                            / other-params\n                        ;\n\
    \                        ; The following MUST be supplied exactly once.\n    \
    \                    ; The value specifies the number of UIDs to\n           \
    \             ; be returned.\n                        ;\n                    \
    \        / option-param posint1\n                          )\n   Response:\n \
    \        gen-reply   = \"BEGIN\" \":\" \"VCALENDAR\" CRLF\n         calprops \
    \             ; Which MUST include 'reply-cmd'\n         1*(gen-vreply)\n    \
    \     \"END\" \":\" \"VCALENDAR\" CRLF\n         gen-vreply  = \"BEGIN\" \":\"\
    \ \"VREPLY\" CRLF\n                       1*(uid)\n                       rstatus\n\
    \                       \"END\" \":\" \"VREPLY\" CRLF\n         {%%%IS THIS RIGHT%%%?]\n\
    \   Example:\n         C: BEGIN:VCALENDAR\n         C: VERSION:2.0\n         C:\
    \ PRODID:-//someone's prodid\n         C: CMD;ID=unique-per-cua-124;OPTIONS=5:GENERATE-UID\n\
    \         C: END:VCALENDAR\n         S: Content-Type: text/calendar\n        \
    \ S:\n         S: BEGIN:VCALENDAR\n         S: VERSION:2.0\n         S: PRODID:-//someone's\
    \ prodid\n         S: CMD;ID=unique-per-cua-124:REPLY\n         S: BEGIN:VREPLY\n\
    \         S: UID:20011121T120000Z-12340@cal.example.com\n         S: UID:20011121T120000Z-12341@cal.example.com\n\
    \         S: UID:20011121T120000Z-12342@cal.example.com\n         S: UID:20011121T120000Z-12343@cal.example.com\n\
    \         S: UID:20011121T120000Z-12344@cal.example.com\n         S: REQUEST-STATUS:2.0\n\
    \         S: END:VREPLY\n         S: END:VCALENDAR\n"
- title: 10.7.  GET-CAPABILITY Command
  contents:
  - "10.7.  GET-CAPABILITY Command\n   CMD: GET-CAPABILITY\n   Purpose: The \"GET-CAPABILITY\"\
    \ command returns the capabilities of the\n      other end point of the session.\n\
    \      A CUA MUST send a \"GET-CAPABILITY\" command to a CS after the\n      initial\
    \ connection.  A CS MUST send a \"GET-CAPABILITY\" command to\n      a CUA after\
    \ the initial connection.  The \"GET-CAPABILITY\" command\n      and reply MUST\
    \ be implemented by all CSs and CUAs.\n   Formal Definition: A \"GET-CAPABILITY\"\
    \ command is defined by the\n      following notation:\n         get-capability-cmd\
    \   = capabilityparam \":\" \"GET-CAPABILITY\"\n         capabilityparam     =\
    \ *(\n                       ; the following are optional,\n                 \
    \      ; but MUST NOT occur more than once\n                       ;\n       \
    \                      id-param / localize-param / latency-param\n           \
    \            ;\n                       ; the following MUST occur exactly once\
    \ and only\n                       ; when the latency-param has been supplied\
    \ and\n                       ; MUST NOT be supplied if the latency-param is\n\
    \                       ; not supplied.\n                       ;\n          \
    \                  / action-param\n                       ;\n                \
    \       ; the following is optional,\n                       ; and MAY occur more\
    \ than once\n                       ;\n                            / other-params\n\
    \                            )\n      Response:\n      The \"GET-CAPABILITY\"\
    \ command returns information about the\n      implementation at the other end\
    \ of the session.  The values\n      returned may differ depending on current\
    \ user identify and the\n      security level of the connection.\n      Client\
    \ implementations SHOULD NOT require any capability element\n      beyond those\
    \ defined in this specification or future RFC\n      publications.  They MAY ignore\
    \ any nonstandard, experimental\n      capability elements.  The \"GET-CAPABILITY\"\
    \ reply may return\n      different results, depending on the UPN and if the UPN\
    \ is\n      authenticated.\n      When sending a reply to a \"GET-CAPABILITY\"\
    \ command, all of these\n      MUST be supplied.  The following properties are\
    \ returned in\n      response to a \"GET-CAPABILITY\" command:\n         cap-vreply\
    \     = \"BEGIN\" \":\" \"VCALENDAR\" CRLF\n                        ; The following\
    \ properties may be in any order.\n                        ;\n               \
    \         rodid\n                        version\n                        reply-cmd\n\
    \                        other-props\n                        \"BEGIN\" \":\"\
    \ \"VREPLY\" CRLF\n                        ; The following properties may be in\
    \ any order.\n                        ;\n                        cap-version\n\
    \                        car-level\n                        components\n     \
    \                   stores-expanded\n                        maxdate\n       \
    \                 mindate\n                        itip-version\n            \
    \            max-comp-size\n                        multipart\n              \
    \          query-level\n                        recur-accepted\n             \
    \           recur-expand\n                        recur-limit\n              \
    \          other-props\n                       \"END\" \":\" \"VREPLY\" CRLF\n\
    \                       \"END\" \":\" \"VCALENDAR\" CRLF\n   Example:\n      \
    \   I: Content-Type: text/calendar\n         I:\n         I: BEGIN:VCALENDAR\n\
    \         I: VERSION:2.0\n         I: PRODID:-//someone's prodid\n         I:\
    \ CMD;ID=unique-per-cua-125:GET-CAPABILITY\n         I: END:VCALENDAR\n      \
    \   L: Content-Type: text/calendar\n         L:\n         L: BEGIN:VCALENDAR\n\
    \         L: VERSION:2.0\n         L: PRODID:-//someone's prodid\n         L:\
    \ CMD;ID=unique-per-cua-125:REPLY\n         L: BEGIN:VREPLY\n         L: CAP-VERSION:1.0\n\
    \         L: PRODID:The CS prodid\n         L: QUERY-LEVEL:CAL-QL-1\n        \
    \ L: CAR-LEVEL:CAR-FULL-1\n         L: MAXDATE:99991231T235959Z\n         L: MINDATE:00000101T000000Z\n\
    \         L: MAX-COMPONENT-SIZE:0\n         L: COMPONENTS:VCALENDAR,VTODO,VJOURNAL,VEVENT,VCAR,\n\
    \         L: VALARM,VFREEBUSY,VTIMEZONE,STANDARD,DAYLIGHT,VREPLY\n         L:\
    \ ITIP-VERSION:2446\n         L: RECUR-ACCEPTED:TRUE\n         L: RECUR-EXPAND:TRUE\n\
    \         L: RECUR-LIMIT:0\n         L: STORES-EXPANDED:FALSE\n         L: X-INET-PRIVATE-COMMANDS:1.0\n\
    \         L: END:VREPLY\n         L: END:VCALENDAR\n"
- title: 10.8.  IDENTIFY Command
  contents:
  - "10.8.  IDENTIFY Command\n   CMD: IDENTIFY\n   Purpose: The \"IDENTIFY\" command\
    \ allows the CUA to set a new identity\n      to be used for calendar access.\n\
    \      A CUA MAY send an \"IDENTIFY\" command to a CS.  The \"IDENTIFY\"\n   \
    \   command MUST be implemented by all CSs.  A CS implementation MAY\n      reject\
    \ all \"IDENTIFY\" commands.\n      The CS MUST NOT send an \"IDENTIFY\" command\
    \ to any CUA.\n   Formal Definition: An \"IDENTIFY\" command is defined by the\
    \ following\n      notation:\n         identify-cmd    = identifyparam \":\" \"\
    IDENTIFY\"\n                       ;\n         identifyparam   = *(\n        \
    \               ;\n                       ; the following are optional,\n    \
    \                   ; but MUST NOT occur more than once\n                    \
    \   ;\n                           id-param\n                         / localize-param\n\
    \                         / latency-param\n                       ;\n        \
    \               ; the following MUST occur exactly once and only\n           \
    \            ; when the latency-param has been supplied and\n                \
    \       ; MUST NOT be supplied if the latency-param is\n                     \
    \  ; not supplied.\n                       ;\n                         / action-param\n\
    \                       ;\n                       ; the following is optional,\n\
    \                       ; and MAY occur more than once\n                     \
    \  ;\n                         / other-params\n                       ;\n    \
    \                   ; The value is the UPN of the requested\n                \
    \       ; identity.  If option is not supplied it is\n                       ;\
    \ a request to return to the original\n                       ; authenticated\
    \ identity.\n                       ;\n                         / option-param\
    \ upn\n                         )\n   Response:\n      A \"REQUEST-STATUS\" property\
    \ wrapped in a \"VREPLY\" component with\n      only one of the following request-status\
    \ codes:\n         2.0 Successful.\n      6.4 Identity not permitted.  VCAR restriction.\n\
    \   The CS determines, through an internal mechanism, if the credentials\n   supplied\
    \ at authentication permit the operation as the selected\n   identity.  If they\
    \ do, the session assumes the new identity;\n   otherwise, a security error is\
    \ returned.\n   Example:\n         C: Content-Type: text/calendar\n         C:\n\
    \         C: BEGIN:VCALENDAR\n         C: VERSION:2.0\n         C: PRODID:-//someone's\
    \ prodid\n         C: CMD;ID=unique-per-cua-999;OPTIONS=newUserId:IDENTIFY\n \
    \        C: END:VCALENDAR\n         S: Content-Type: text/calendar\n         S:\n\
    \         S: BEGIN:VCALENDAR\n         S: VERSION:2.0\n         S: PRODID:-//someone's\
    \ prodid\n         S: BEGIN:VREPLY\n         S: REQUEST-STATUS:2.0;Request Approved\n\
    \         S: END:VREPLY\n         S: END:VCALENDAR\n      Or if denied:\n    \
    \     S: Content-Type: text/calendar\n         S:\n         S: BEGIN:VCALENDAR\n\
    \         S: PRODID:-//someone's prodid\n         S: VERSION:2.0\n         S:\
    \ BEGIN:VREPLY\n         S: REQUEST-STATUS:6.4;Request Denied\n         S: END:VREPLY\n\
    \         S: END:VCALENDAR\n      For the CUA to return to its original authenticated\
    \ identity, the\n      OPTIONS parameter is omitted:\n      C: Content-Type: text/calendar\n\
    \      C:\n      C: BEGIN:VCALENDAR\n      C: VERSION:2.0\n      C: PRODID:-//someone's\
    \ prodid\n      C: CMD;ID=unique-per-cua-995:IDENTIFY\n      C: END:VCALENDAR\n\
    \   The CS may accept (2.0) or deny (6.4) the request to return to the\n   original\
    \ identity.\n   If a CS considers the \"IDENTIFY\" command an attempt to violate\n\
    \   security, the CS MAY terminate the [BEEP] session without any further\n  \
    \ notice to the CUA after sending the \"REQUEST-STATUS\" 6.4 reply.\n"
- title: 10.9.  MODIFY Command
  contents:
  - "10.9.  MODIFY Command\n   CMD: MODIFY\n   Purpose: The \"MODIFY\" command is\
    \ used to modify existing components.\n      A CUA MAY send a \"MODIFY\" command\
    \ to a CS.  The \"MODIFY\" command\n      MUST be implemented by all CSs.\n  \
    \    The CS MUST NOT send a \"MODIFY\" command to any CUA.\n   Formal Definition:\
    \ A \"MODIFY\" command is defined by the following\n      notation:\n        \
    \ modify-cmd    = modifyparam \":\" \"MODIFY\"\n                       ;\n   \
    \      modifyparam   = *(\n                       ;\n                       ;\
    \ the following are optional,\n                       ; but MUST NOT occur more\
    \ than once\n                       ;\n                         id-param\n   \
    \                    / localize-param\n                       / latency-param\n\
    \                       ;\n                       ; the following MUST occur exactly\
    \ once and only\n                       ; when the latency-param has been supplied\
    \ and\n                       ; MUST NOT be supplied if the latency-param is\n\
    \                       ; not supplied.\n                       ;\n          \
    \             / action-param\n                       ;\n                     \
    \  ; the following is optional,\n                       ; and MAY occur more than\
    \ once\n                       ;\n                       / other-params\n    \
    \                   )\n      The \"MODIFY\" command is used to modify existing\
    \ components.  The\n      TARGET property specifies the calendars that contain\
    \ the\n      components that are going to be modified.\n      The format of the\
    \ request is three components inside of\n      \"VCALENDAR\" component:\n    \
    \     BEGIN:VCALENDAR\n         BEGIN:VQUERY\n         END:VQUERY\n         BEGIN:XXX\n\
    \         END:XXX\n         BEGIN:XXX\n         END:XXX\n         END:VCALENDAR\n\
    \      The \"VQUERY\" component selects the components that are to be\n      modified.\n\
    \      The \"XXX\" above is a named component type (VEVENT, VTODO, ...).\n   \
    \   Both the old and new components MUST be of the same type.\n      The old-values\
    \ is a component and the contents of that component\n      are going to change\
    \ and may contain information that helps\n      uniquely identify the original\
    \ component (SEQUENCE in the example\n      below).  If the CS cannot find a component\
    \ that matches the QUERY\n      and does not have at least all of the OLD-VALUES,\
    \ then a 6.1 error\n      is returned.\n      The new-values is a component of\
    \ the same type as old-values and\n      new-values contains the new data for\
    \ each selected component.  Any\n      data that is in old-values and not in new-values\
    \ is deleted from\n      the selected component.  Any values in new-values that\
    \ was not in\n      old-values is added to the component.\n      In this example,\
    \ the \"VEVENT\" component with a \"UID\" property\n      value of 'unique-58'\
    \ has the \"LOCATION\" property and \"LAST-\n      MODIFIED\" properties changed,\
    \ the \"VALARM\" component with the\n      \"SEQUENCE\" property with a value\
    \ of \"3\" has its \"TRIGGER\" property\n      disabled, the \"X-LOCAL\" property\
    \ is removed from the \"VEVENT\"\n      component, and a \"COMMENT\" property\
    \ is added.\n      Because \"SEQUENCE\" property is used to locate the \"VALARM\"\
    \n      component in this example, both the old-values and the new-values\n  \
    \    contain the \"SEQUENCE\" property with a value of \"3\".  If the\n      \"\
    SEQUENCE\" property were to be left out of new-values, it would\n      have been\
    \ deleted.\n   Example:\n         C: Content-Type: text/calendar\n         C:\n\
    \         C: BEGIN:VCALENDAR\n         C: VERSION:2.0\n         C: PRODID:-//someone's\
    \ prodid\n         C: TARGET:my-cal\n         C: CMD:ID=unique-mod:MODIFY\n  \
    \       C: BEGIN:VQUERY                   <- Query to select data set.\n     \
    \    C: QUERY:SELECT * FROM VEVENT WHERE UID = 'unique-58'\n         C: END:VQUERY\n\
    \         C: BEGIN:VEVENT                   <- Start of old data.\n         C:\
    \ LOCATION:building 3\n         C: LAST-MODIFIED:20020101T123456Z\n         C:\
    \ X-LOCAL:some private stuff\n         C: BEGIN:VALARM\n         C: SEQUENCE:3\n\
    \         C: TRIGGER;RELATED=END:PT5M\n         C: END:VALARM\n         C: END:VEVENT\
    \                     <- End of old data.\n         C: BEGIN:VEVENT          \
    \         <- Start of new data.\n         C: LOCATION:building 4\n         C:\
    \ LAST-MODIFIED:20020202T010203Z\n         C: COMMENT:Ignore global trigger.\n\
    \         C: BEGIN:VALARM\n         C: SEQUENCE:3\n         C: TRIGGER;ENABLE=FALSE:RELATED=END:PT5M\n\
    \         C: END:VALARM\n         C: END:VEVENT                     <- End of\
    \ new data.\n         C: END:VCALENDAR\n      The \"X-LOCAL\" property was not\
    \ supplied in the new-values, so it\n      was deleted.  The \"LOCATION\" property\
    \ value was altered, as was\n      the \"LAST-MODIFIED\" value.  The \"VALARM\"\
    \ component with a\n      \"SEQUENCE\" property value of \"3\" had its \"TRIGGER\"\
    \ property\n      disabled, and the \"SEQUENCE\" property value did not change\
    \ so it\n      was not effected.  The \"COMMENT\" property was added.\n      When\
    \ it comes to inline ATTACHMENTs, the CUA only needs to\n      uniquely identify\
    \ the contents of the ATTACHMENT value in the\n      old-values in order to delete\
    \ them.  When the CS compares the\n      attachment data, it is compared in its\
    \ binary form.  The\n      ATTACHMENT value supplied by the CUA MUST be valid\
    \ encoded\n      information.\n      For example, to delete the same huge inline\
    \ attachment from every\n      VEVENT in 'my-cal' that has an \"ATTACH\" property\
    \ value with the\n      old-values:\n      BEGIN:VCALENDAR\n      VERSION:2.0\n\
    \      PRODID:-//someone's prodid\n      TARGET:my-cal\n      CMD:MODIFY\n   \
    \   BEGIN:VQUERY\n      QUERY:SELECT ATTACH FROM VEVENT\n      END:VQUERY\n  \
    \    BEGIN:VEVENT\n      ATTACH;FMTTYPE=image/basic;ENCODING=BASE64;VALUE=BINARY:\n\
    \       MIICajCCAdOgAwIBAgICbeUwDQYJKoZIhvcNAQEEBQAwdzELMAkGA1U\n       EBhMCVVMxLDAqBgNVBAoTI05ldHNjYXBlIENvbW11bmljYXRpb25zIE\n\
    \       ...< remainder of attachment data NOT supplied >....\n      END:VEVENT\n\
    \      BEGIN:VEVENT\n      END:VEVENT\n      END:VCALENDAR\n   Here the new-values\
    \ is empty, so everything in the old-values is\n   deleted.\n   Furthermore, the\
    \ following additional restrictions apply:\n   1.   One cannot change the \"UID\"\
    \ property of a component.\n   2.   If a contained component is changed inside\
    \ of a selected\n        component, and that contained component has multiple\
    \ instances,\n        then old-values MUST contain information that uniquely\n\
    \        identifies the instance or instances that are changing.  It is\n    \
    \    valid to change more than one.  All contained components that\n        match\
    \ old-values will be modified.  In the first modify example\n        above, if\
    \ \"SEQUENCE\" properties were to be deleted from both the\n        old-values\
    \ and new-values, then all \"TRIGGER\" properties that\n        matched the old-values\
    \ in all \"VALARM\" components in the\n        selected \"VEVENT\" components\
    \ would be disabled.\n   3.   The result of the modify MUST be a valid iCalendar\
    \ object.\n   Response:\n   A \"VCALENDAR\" component is returned with one ore\
    \ more \"REQUEST-\n   STATUS\" property values.\n   If any error occurred:\n \
    \     No component will be changed at all.  That is, it will appear just\n   \
    \   as it was prior to the modify and the CAP server SHOULD return a\n      \"\
    REQUEST-STATUS\" property for each error that occurred.  There\n      MUST be\
    \ at least one error reported.\n   If multiple components are selected, then what\
    \ uniquely identified\n   the component MUST be returned (UID, QUERYID, ...) if\
    \ the component\n   contains a unique identifier.  If it does not, sufficient\
    \ information\n   to uniquely identify the modified components MUST be returned\
    \ in the\n   reply.\n      S: Content-Type: text/calendar\n      S:\n      S:\
    \ BEGIN:VCALENDAR\n      S: TARGET:relcalid\n      S: CMD;ID=delete#1:REPLY\n\
    \      S: BEGIN:VREPLY\n      S: BEGIN:VEVENT\n      S: UID:123\n      S: REQUEST-STATUS:2.0\n\
    \      S: END:VEVENT\n      S: END:VREPLY\n      S: END:VCALENDAR\n"
- title: 10.10.  MOVE Command
  contents:
  - "10.10.  MOVE Command\n   CMD: MOVE\n   Purpose: The \"MOVE\" command is used\
    \ to move components within the CS.\n      A CUA MAY send a \"MOVE\" command to\
    \ a CS.  The \"MOVE\" command MUST\n      be implemented by all CSs.\n      The\
    \ CS MUST NOT send a \"MOVE\" command to any CUA.\n   Formal Definition: A \"\
    MOVE\" command is defined by the following\n      notation:\n         move-cmd\
    \    = moveparam \":\" \"MOVE\"\n                     ;\n         moveparam  \
    \ = *(\n                     ;\n                     ; the following are optional,\n\
    \                     ; but MUST NOT occur more than once\n                  \
    \   ;\n                       id-param\n                     / localize-param\n\
    \                     / latency-param\n                     ;\n              \
    \       ; the following MUST occur exactly once and only\n                   \
    \  ; when the latency-param has been supplied and\n                     ; MUST\
    \ NOT be supplied if the latency-param is\n                     ; not supplied.\n\
    \                     ;\n                     / action-param\n               \
    \      ;\n                     ; the following is optional,\n                \
    \     ; and MAY occur more than once\n                     ;\n               \
    \      / other-params\n                     ;\n                     )\n   Response:\n\
    \         The REQUEST-STATUS in a VCALENDAR object.\n      The content of each\
    \ \"result\" is subject to the result restriction\n      table defined below.\n\
    \      The access control on the \"VAGENDA\" component, after it has been\n  \
    \    moved to its new location in the calstore, MUST be at least as\n      secure\
    \ as it was prior to the move.  If the CS is not able to\n      ensure the same\
    \ level of security, a permission-denied \"REQUEST-\n      STATUS\" property value\
    \ MUST be returned, and the \"MOVE\" command\n      MUST NOT be performed.\n \
    \     The \"TARGET\" property value specifies the new location, and the\n    \
    \  \"VQUERY\" component specifies the old location.\n      Restriction Table for\
    \ the \"REPLY\" command of any \"MOVE\" command.\n         move-reply  = \"BEGIN\"\
    \ \":\" \"VCALENDAR\" CRLF\n                        calprops\n               \
    \         1*(move-vreply)\n                       \"END\" \":\" \"VCALENDAR\"\
    \ CRLF\n         move-vreply  = \"BEGIN\" \":\" \"VREPLY\" CRLF\n            \
    \             move-id\n                          rstatus\n                   \
    \     \"END\" \":\" \"VREPLY\" CRLF\n                       ; Where the id is\
    \ appropriate for the\n                       ; type of object moved:\n      \
    \                 ;\n                       ; VAGENDA = relcalid\n           \
    \            ; VCAR = carid\n                       ; VEVENT, VFREEBUSY, VJOURNAL,\
    \ VTODO = uid\n                       ; VQUERY = queryid\n                   \
    \    ; ALARM = sequence\n                       ; An instance = uid recurid\n\
    \                       ; x-comp = x-id\n                       ;\n         move-id\
    \    =  ( relcalid / carid / uid / uid recurid\n                        / queryid\
    \ / tzid / sequence / x-id)\n   Example: moving the VAGENDA Nellis to Area-51\n\
    \         C: Content-Type: text/calendar\n         C:\n         C: BEGIN:VCALENDAR\n\
    \         C: VERSION:2.0\n         C: PRODID:-//someone's prodid\n         C:\
    \ CMD:MOVE\n         C: TARGET:Area-51\n         C: BEGIN:VQUERY\n         C:\
    \ QUERY: SELECT *.* FROM VAGENDA WHERE CALID='Nellis'\n         C: END:VQUERY\n\
    \         C: END:VCALENDAR\n         S: Content-Type: text/calendar\n        \
    \ S:\n         S: BEGIN:VCALENDAR\n         S: VERSION:2.0\n         S: PRODID:-//someone's\
    \ prodid\n         S: TARGET:Area-51\n         S: BEGIN:VREPLY\n         S: CALID:Nellis\n\
    \         S: REQUEST-STATUS: 2.0\n         S: END:VREPLY\n         S: END:VCALENDAR\n"
- title: 10.11.  REPLY Response to a Command
  contents:
  - "10.11.  REPLY Response to a Command\n   CMD: REPLY\n   Purpose: The \"REPLY\"\
    \ value to the \"CMD\" property is used to return\n      the results of all other\
    \ commands to the CUA.\n      A CUA MUST send a \"REPLY\" command to a CS for\
    \ any command a CS MAY\n      send to the CUA.  The \"REPLY\" command MUST be\
    \ implemented by all\n      CUAs that support getting the \"GET-CAPABILITY\" command.\n\
    \      A CS MUST send a \"REPLY\" command to a CUA for any command a CUA\n   \
    \   MAY send to the CS.  The \"REPLY\" command MUST be implemented by\n      all\
    \ CSs.\n   Formal Definition: A \"REPLY\" command is defined by the following\n\
    \      notation:\n         reply-cmd    = replyparam \":\" \"REPLY\"\n       \
    \                 ;\n         replyparam    = *(\n                        ;\n\
    \                        ; The 'id' parameter value MUST be exactly the\n    \
    \                    ; same as the value sent in the original\n              \
    \          ; CMD property.  If the original CMD did\n                        ;\
    \ not have an 'id' parameter, then the 'id'\n                        ; MUST NOT\
    \ be supplied in the REPLY.\n                        ;\n                    id-param\n\
    \                        ;\n                        ; the following is optional,\n\
    \                        ; and MAY occur more than once\n                    \
    \    ;\n                     / other-params\n                        )\n"
- title: 10.12.  SEARCH Command
  contents:
  - "10.12.  SEARCH Command\n   CMD: SEARCH\n   Purpose: The \"SEARCH\" command is\
    \ used to return selected components\n      to the CUA.\n      A CUA MAY send\
    \ a \"SEARCH\" command to a CS.  The \"SEARCH\" command\n      MUST be implemented\
    \ by all CSs.\n      The CS MUST NOT send a \"SEARCH\" command to any CUA.\n \
    \  Formal Definition: A \"SEARCH\" command is defined by the following\n     \
    \ notation:\n          search-cmd   = searchparam \":\" \"SEARCH\"\n         \
    \              ;\n         searchparam   = *(\n                       ;\n    \
    \                   ; the following are optional,\n                       ; but\
    \ MUST NOT occur more than once\n                       ;\n                  \
    \       id-param\n                       / localize-param\n                  \
    \     / latency-param\n                       ;\n                       ; the\
    \ following MUST occur exactly once and only\n                       ; when the\
    \ latency-param has been supplied and\n                       ; MUST NOT be supplied\
    \ if the latency-param is\n                       ; not supplied.\n          \
    \             ;\n                       / action-param\n                     \
    \  ;\n                       ; the following is optional,\n                  \
    \     ; and MAY occur more than once\n                       ;\n             \
    \          / other-params\n                       )\n      The format of the request\
    \ is the search command (search-cmd)\n      followed by one or more (query) \"\
    VQUERY\" components\n   Response:\n      The data in each result set contains\
    \ one or more iCalendar\n      components composed of all the selected results\
    \ enclosed in a\n      single \"VREPLY\" component per \"QUERY\".\n      Only\
    \ \"REQUEST-STATUS\" property and the properties mentioned in the\n      \"SELECT\"\
    \ clause of the QUERY are included in the components.  Each\n      \"VCALENDAR\"\
    \ component is tagged with the \"TARGET\" property.\n   Searching for objects\n\
    \      In the example below, objects on March 10,1999 between 080000Z and\n  \
    \    190000Z are read.  In this case only four properties for each\n      object\
    \ are returned.  Two calendars are specified.  Only booked\n      (vs.  scheduled)\
    \ entries are to be returned (this example only\n      selected VEVENT objects\
    \ are to be returned):\n         C: Content-Type: text/calendar\n         C:\n\
    \         C: BEGIN:VCALENDAR\n         C: VERSION:2.0\n         C: PRODID:-//someone's\
    \ prodid\n         C: CMD:SEARCH\n         C: TARGET:relcal2\n         C: TARGET:relcal3\n\
    \         C: BEGIN:VQUERY\n         C: QUERY:SELECT DTSTART,DTEND,SUMMARY,UID\n\
    \         C:  FROM VEVENT\n         C:  WHERE DTEND >= '19990310T080000Z'\n  \
    \       C:  AND DTSTART <= '19990310T190000Z'\n         C:  AND STATE() = 'BOOKED'\n\
    \         C: END:VQUERY\n         C: END:VCALENDAR\n      The return values are\
    \ subject to VCAR filtering.  That is, if the\n      request contains properties\
    \ to which the UPN does not have access,\n      those properties will not appear\
    \ in the return values.  If the UPN\n      has access to at least one property\
    \ of the component, but has been\n      denied access to all properties called\
    \ out in the request, the\n      response will contain a single \"REQUEST-STATUS\"\
    \ property\n      indicating the error.\n      Here the request was successful,\
    \ however one of the \"VEVENT\"\n      components contents were not accessible\
    \ (4.1).\n         S: Content-Type: text/calendar\n         S:\n         S: BEGIN:VCALENDAR\n\
    \         S: TARGET:relcalid\n         S: CMD:REPLY\n         S: VERSION:2.0\n\
    \         S: PRODID:-//someone's prodid\n         S: BEGIN:VREPLY\n         S:\
    \ BEGIN:VEVENT\n         S: REQUEST-STATUS:4.1\n         S: END:VEVENT\n     \
    \    S: BEGIN:VEVENT\n         S: REQUEST-STATUS:2.0\n         S: UID:123\n  \
    \       S: DTEND:19990310T080000Z\n         S: DSTART:19990310T190000Z\n     \
    \    S: SUMMARY: Big meeting\n         S: END:VEVENT\n         S: END:VREPLY\n\
    \         S: END:VCALENDAR\n      If the UPN has no access to any components at\
    \ all, the response\n      will simply be an empty data set.  The response will\
    \ look the same\n      if the particular components do not exist.\n         S:\
    \ Content-Type: text/calendar\n         S:\n         S: BEGIN:VCALENDAR\n    \
    \     S: VERSION:2.0\n         S: PRODID:-//someone's prodid\n         S: CMD:REPLY\n\
    \         S: TARGET:ralcalid\n         S: BEGIN:VREPLY\n         S: REQUEST-STATUS:2.0\n\
    \         S: END:VREPLY\n         S: END:VCALENDAR\n      If there are multiple\
    \ targets, each iCalendar reply is contained\n      within its own iCalendar object.\n"
- title: 10.12.1.  Searching for VFREEBUSY
  contents:
  - "10.12.1.  Searching for VFREEBUSY\n   If a CS sets the \"RECUR-EXPAND\" property\
    \ to \"TRUE\" and contains the\n   \"VFREEBUSY\" component in the \"COMPONENTS\"\
    \ value in a reply to the\n   \"GET-CAPABILITY\" command, then it is the CS's\
    \ responsibility (and not\n   the CUA's responsibility) to provide the correct\
    \ \"VFREEBUSY\"\n   information for a calendar.\n   If a CUA issues a \"CREATE\"\
    \ \"VFREEBUSY\", such a CS MUST return success\n   and not store the \"VFREEBUSY\"\
    \ component as the results would never be\n   used.\n   Such a CS MUST dynamically\
    \ create the results of a search for\n   \"VFREEBUSY\" components at search time\
    \ when searching for STATE() =\n   'BOOKED' items.\n   If a CUA searches for \"\
    VFREEBUSY\" components with STATE() =\n   'UNPROCESSED', such a CS MUST return\
    \ a \"VREPLY\" with no components.\n   If a CUA searches for \"VFREEBUSY\" components\
    \ without specifying the\n   STATE, such a CS MUST return the same result as if\
    \ STATE()='BOOKED'\n   had been specified.\n   For CSs that set the \"CAPABILITY\"\
    \ \"RECUR-EXPAND\" property to \"FALSE\"\n   and have the \"VFREEBUSY\" component\
    \ in the \"COMPONENTS\" value in the\n   \"CAPABILITY\" reply, a CUA MAY store\
    \ the \"VFREEBUSY\" information on\n   the CS.  These CSs then MUST return a \"\
    VFREEBUSY\" component\n   calculated from the stored components.  If no \"VFREEBUSY\"\
    \ information\n   is available for the \"TARGET\" calendar, then a \"VFREEBUSY\"\
    \ with no\n   blocked out time will be returned with a success code.  A CUA sets\n\
    \   the \"VFREEBUSY\" time on a/those calendars by creating a \"VFREEBUSY\"\n\
    \   component without a \"METHOD\" creating a \"BOOKED\" entry.\n   If a CS does\
    \ not set the \"VFREEBUSY\" value in the \"COMPONENTS\"\n   \"CAPABILITY\" value,\
    \ the CS does not support the \"VFREEBUSY\" component\n   and all creation and\
    \ searching for a \"VFREEBUSY\" component MUST fail.\n   Examples of calendars\
    \ that may be in this category are public event\n   calendars that will never\
    \ require scheduling with other UPNs.\n"
- title: 10.13.  SET-LOCALE Command
  contents:
  - "10.13.  SET-LOCALE Command\n   CMD: SET-LOCALE\n   Purpose: The \"SET-LOCALE\"\
    \ command is used to select the locale that\n      will be used in error codes\
    \ that are used in the \"REQUEST-STATUS\"\n      property.\n      A CUA MAY send\
    \ a \"SET-LOCALE\" command to a CS.  The SET-LOCALE\n      command MUST be implemented\
    \ by all CSs.\n      The CS MUST NOT send a \"SET-LOCALE\" command to any CUA.\n\
    \   Formal Definition: A \"SET-LOCALE\" command is defined by the following\n\
    \      notation:\n         setlocale-cmd   = setlocaleparam \":\" \"SET-LOCALE\"\
    \n                        ;\n         setlocaleparam   = *(\n                \
    \        ;\n                        ; the following are optional,\n          \
    \              ; but MUST NOT occur more than once\n                        ;\n\
    \                            id-param\n                          / localize-param\n\
    \                          / latency-param\n                          / setlocale-option\n\
    \                        ;\n                        ; the following MUST occur\
    \ exactly once and only\n                        ; only when the latency-param\
    \ has been supplied.\n                        ; It MUST NOT be supplied if the\
    \ latency-param\n                        ; is not supplied.\n                \
    \        ;\n                          / action-param\n                       \
    \ ;\n                        ; the following is optional,\n                  \
    \      ; and MAY occur more than once\n                        ;\n           \
    \               / other-params )\n         setlocale-option   = option-param newlocale\n\
    \                          ;\n         newlocale     =  ; Any locale supplied\
    \ in the initial [BEEP]\n                          ; \"greeting\" \"localize\"\
    \ parameter and\n                          ; and any charset supported by the\
    \ CS\n                          ; and listed in the DEFAULT-CHARSET property\n\
    \                          ; of the VCALSTORE\n   Examples:\n         CMD:OPTIONS=en_US.UTF-8:SET-LOCALE\n\
    \         CMD:OPTIONS=th_TH.ISO8859-11:SET-LOCALE\n         CMD:OPTIONS=es_MX.ISO8859-1:SET-LOCALE\n\
    \      Restriction Table for the \"REPLY\" command of any \"SET-LOCALE\"\n   \
    \   command.\n         setlocale-reply  = \"BEGIN\" \":\" \"VCALENDAR\" CRLF\n\
    \                            calprops\n                            1*(setlocale-vreply)\n\
    \                           \"END\" \":\" \"VCALENDAR\" CRLF\n         setlocale-vreply\
    \  = \"BEGIN\" \":\" \"VREPLY\" CRLF\n                             rstatus\n \
    \                            \"END\" \":\" \"VREPLY\" CRLF\n"
- title: 10.14.  TIMEOUT Command
  contents:
  - "10.14.  TIMEOUT Command\n   CMD: TIMEOUT\n   Purpose: The \"TIMEOUT\" command\
    \ is only sent after a command has been\n      sent with a latency value set.\
    \  When received, it means the\n      command could not be completed in the time\
    \ allowed.\n   Formal Definition: A \"TIMEOUT\" command is defined by the following\n\
    \      notation:\n         timeout-cmd   = timeoutparam \":\" \"TIMEOUT\"\n  \
    \       timeoutparam   = *(\n                         ; the following are optional,\n\
    \                         ; but MUST NOT occur more than once\n              \
    \             id-param\n                         / localize-param\n          \
    \               / other-params\n                         )\n"
- title: 10.15.  Response Codes
  contents:
  - "10.15.  Response Codes\n   Numeric response codes are returned using the \"REQUEST-STATUS\"\
    \n   property.\n   The format of these codes is described in [iCAL] and extended\
    \ in\n   [iTIP] and [iMIP].  The following describes new codes added to this\n\
    \   set and how existing codes apply to CAP.\n   At the application layer, response\
    \ codes are returned as the value of\n   a \"REQUEST-STATUS\" property.  The value\
    \ type of this property is\n   modified from that defined in [iCAL], in order\
    \ to make the\n   accompanying \"REQUEST-STATUS\" property text optional.\n  \
    \    Code              Description\n      --------------------------------------------------------------\n\
    \      2.0               Success.  The parameters vary with the\n            \
    \            operation and are specified.\n      2.0.3             In response\
    \ to the client issuing an\n                        \"abort\" reply, this reply\
    \ code indicates\n                        that any command currently underway\
    \ was\n                        successfully aborted.\n      3.1.4            \
    \ Capability not supported.\n      4.1               Calendar store access denied.\n\
    \      6.1               Container not found.\n      6.2               Attempt\
    \ to create or modify an object\n                        that would overlap another\
    \ object\n                        in either of the following two circumstances:\n\
    \                        (a) One of the objects has a TRANSP\n               \
    \         property set to OPAQUE-NOCONFLICT or\n                        TRANSPARENT-NOCONFLICT.\n\
    \                        (b) The calendar's ALLOW-CONFLICT\n                 \
    \       property is set to FALSE.\n      6.3               Bad args.\n      6.4\
    \               Permission denied - VCAR restriction.\n                      \
    \  A VCAR exists and the CS will not perform\n                        the operation.\n\
    \      7.0               A timeout has occurred.  The server was\n           \
    \             unable to complete the operation in the\n                      \
    \  requested time.\n      8.0               A failure has occurred in the CS\n\
    \                        that prevents the operation from\n                  \
    \      succeeding.\n      8.1               A query was performed and the query\
    \ is\n                        too complex for the CS.  The operation\n       \
    \                 was not performed.\n      8.2               Used to signal that\
    \ an iCalendar object has\n                        exceeded the server's size\
    \ limit\n      8.3               A DATETIME value was too far in the future\n\
    \                        to be represented on this Calendar.\n      8.4      \
    \         A DATETIME value was too far in the past\n                        to\
    \ be represented on this Calendar.\n      8.5               An attempt was made\
    \ to create a new\n                        object, but the unique UID specified\
    \ is\n                        already in use.\n      9.0               An unrecognized\
    \ command was received.\n                        Or an unsupported command was\
    \ received.\n      10.4              The operation has not been performed\n  \
    \                      because it would cause the resources\n                \
    \        (memory, disk, CPU, etc) to exceed the\n                        allocated\
    \ quota.\n        --------------------------------------------------------------\n"
- title: 11.  Object Registration
  contents:
  - "11.  Object Registration\n   This section provides the process for registration\
    \ of new or modified\n   properties, parameters, commands, or other modifications,\
    \ additions,\n   or deletions to objects.\n"
- title: 11.1.  Registration of New and Modified Entities
  contents:
  - "11.1.  Registration of New and Modified Entities\n   New objects are registered\
    \ by the publication of an IETF Request for\n   Comment (RFC).  Changes to objects\
    \ are registered by the publication\n   of a revision to the RFC in a new RFC.\n"
- title: 11.2.  Post the Item Definition
  contents:
  - "11.2.  Post the Item Definition\n   The object description MUST be posted to\
    \ the new object discussion\n   list: ietf-calendar@imc.org.\n"
- title: 11.3.  Allow a Comment Period
  contents:
  - "11.3.  Allow a Comment Period\n   Discussion on a new object MUST be allowed\
    \ to take place on the list\n   for a minimum of two weeks.  Consensus MUST be\
    \ reached on the object\n   before proceeding to the next step.\n"
- title: 11.4.  Release a New RFC
  contents:
  - "11.4.  Release a New RFC\n   The new object will be submitted for publication\
    \ like any other\n   Internet Draft requesting RFC status.\n"
- title: 12.  BEEP and CAP
  contents:
  - '12.  BEEP and CAP

    '
- title: 12.1.  BEEP Profile Registration
  contents:
  - "12.1.  BEEP Profile Registration\n   BEEP replies will be one-to-one (1:1 MSG/RPY)\
    \ if possible, and one-\n      to-many (1:many MSG/ANS) when the \"TARGET\" property\
    \ value changes.\n      No more than one \"TARGET\" property value is allowed\
    \ per reply.\n   Profile Identification: specify a [URI] that authoritatively\n\
    \      identifies this profile.\n   http://iana.org/beep/cap/1.0\n   Message Exchanged\
    \ during Channel Creation:\n      CUAs SHOULD supply the BEEP \"localize\" attributes\
    \ in the BEEP\n      \"greeting\" messages.\n      CSs SHOULD supply the BEEP\
    \ \"localize\" attributes in the BEEP\n      \"greeting\" messages.\n      CUAs\
    \ SHOULD supply the BEEP \"serverName\" attribute at channel\n      creation time\
    \ to the CS, so that, if the CS is performing virtual\n      hosting, the CS can\
    \ determine the intended virtual host.  CSs that\n      do not support virtual\
    \ hosting may ignore the BEEP \"serverName\"\n      attribute.\n   Messages starting\
    \ one-to-one exchanges:\n      The initial message, after authentication in each\
    \ direction, MUST\n      be a single \"text/calendar\" object containing a CAP\
    \ \"CAPABILITY\"\n      CMD.  It must not be part of a MIME multipart message.\n\
    \      After the initial message, a BEEP \"MSG\" may contain one or more\n   \
    \   MIME objects (at least one of which MUST be \"text/calendar\"), and\n    \
    \  each \"text/calendar\" MIME object MUST contain a CAP \"CMD\"\n      property.\n\
    \      Multiple iCalendar objects may be sent in a single BEEP message\n     \
    \ either by representing them as separate MIME text/calendar parts\n      contained\
    \ within a MIME multipart/mixed part or by simple\n      concatenation within\
    \ a single text/calendar MIME object.\n      In either case, all iCalendar objects\
    \ that are transmitted\n      together must have the same TARGET property.\n \
    \     The sending of multipart MIME entities over BEEP is not permitted\n    \
    \  for CAP unless the other endpoint has indicated its ability to\n      accept\
    \ them via the appropriate CAPABILITY.\n   Messages in positive replies:\n   \
    \   After the initial message, a BEEP \"RPY\" may contain one or more\n      MIME\
    \ objects (at least one of which MUST be \"text/calendar\"), and\n      each \"\
    text/calendar\" MIME object MUST contain a CAP \"CMD\"\n      property.  All \"\
    text/calendar\" MIME objects in a single BEEP \"RPY\"\n      messages MUST have\
    \ the same \"TARGET\" property value.\n      Multiple iCalendar objects may be\
    \ sent in a single BEEP message by\n      either representing them as separate\
    \ MIME text/calendar parts\n      contained within a MIME multipart/mixed part\
    \ or by simple\n      concatenation within a single text/calendar MIME object.\n\
    \      In either case, all iCalendar objects transmitted together must\n     \
    \ have the same TARGET property.\n      Sending multipart MIME entities over BEEP\
    \ is not permitted for CAP\n      unless the other endpoint has indicated its\
    \ ability to accept them\n      via the appropriate CAPABILITY.\n   Messages in\
    \ negative replies:\n      Will contain any valid \"text/calendar\" MIME object\
    \ that contains\n      CAP \"REQUEST-STATUS\" property and a CAP \"CMD\" property\
    \ with a\n      property value of \"REPLY\".  And where the CS has determined\
    \ the\n      requested operation to be a fatal error.  And when the CS has\n \
    \     performed NO operation that effected the contents of any part of\n     \
    \ the CS or any calendar controlled by the CS.\n   Messages in one-to-many exchanges:\n\
    \      After the initial message then a BEEP \"MSG\" may contain one or\n    \
    \  more MIME objects at least one of which MUST be \"text/calendar\"\n      and\
    \ each \"text/calendar\" MIME object MUST contain a CAP \"CMD\"\n      property.\n\
    \      The BEEP \"MSG\" messages can only contain MIME \"multipart\" MIME\n  \
    \    objects if the other endpoint has received a CAP \"CAPABILITY\"\n      indicating\
    \ the other endpoint supports multipart MIME objects.\n      This does not prevent\
    \ the endpoint from sending multiple [iCAL]\n      'icalobject' objects in a single\
    \ BEEP \"MSG\" so long as all of them\n      have the same \"TARGET\" property\
    \ value.\n      Multiple iCalendar objects may be sent in a single BEEP message\
    \ by\n      either representing them as separate MIME text/calendar parts\n  \
    \    contained within a MIME multipart/mixed part or by simple\n      concatenation\
    \ within a single text/calendar MIME object.\n      In either case, all iCalendar\
    \ objects transmitted together must\n      have the same TARGET property.\n  \
    \    The sending of multipart MIME entities over BEEP is not permitted\n     \
    \ for CAP unless the other endpoint has indicated its ability to\n      accept\
    \ them via the appropriate CAPABILITY.\n   Message Syntax:\n      They are CAP\
    \ \"text/calendar\" MIME objects as specified in this\n      memo.\n   Message\
    \ Semantics:\n      As defined in this memo.\n"
- title: 12.2.  BEEP Exchange Styles
  contents:
  - "12.2.  BEEP Exchange Styles\n   [BEEP] defines three styles of message exchange:\n\
    \      MSG/ANS,ANS,...,NUL -  For one to many exchanges.\n      MSG/RPY -  For\
    \ one to one exchanges.\n      MSG/ERR -  For requests the cannot be processed\
    \ due to an error.\n   A CAP request targeted at more than one container MAY use\
    \ a one- to-\n   many exchange with a distinct answer associated with each target.\
    \  A\n   CAP request targeted at a single container MAY use a one-to-one\n   exchange\
    \ or a one-to-many exchange.  \"MSG/ERR\" MAY only be used when\n   an error condition\
    \ prevents the execution of the request on all the\n   targeted calendars.\n"
- title: 12.3.  BEEP Connection Details
  contents:
  - "12.3.  BEEP Connection Details\n   All CAP communications must be done securely,\
    \ so the initial greeting\n   includes the TLS profile.\n      L: <wait for incoming\
    \ connection>\n      I: <open connection>\n      L: RPY 0 0 . 0 110\n      L:\
    \ Content-Type: application/beep+xml\n      L:\n      L: <greeting>\n      L:\
    \    <profile uri='http://iana.org/beep/TLS' />\n      L: </greeting>\n      L:\
    \ END\n      I: RPY 0 0 . 0 52\n      I: Content-Type: application/beep+xml\n\
    \      I:\n      I: <greeting/>\n      I: END\n   At this point, the connection\
    \ is secure.  The TLS profile 'resets'\n   the connection, so it resends the greetings,\
    \ advertises the CAP\n   profiles that are supported, and replies with the profile\
    \ selected\n   (only one profile exists at this time):\n      L: <wait for incoming\
    \ connection>\n      I: <open connection>\n      L: RPY 0 0 . 0 110\n      L:\
    \ Content-Type: application/beep+xml\n      L:\n      L: <greeting>\n      L:\
    \    <profile uri='http://iana.org/beep/cap/1.0'/>\n      L: </greeting>\n   \
    \   L: END\n      I: RPY 0 0 . 0 110\n      I: Content-Type: application/beep+xml\n\
    \      I:\n      I: <greeting>\n      I:    <profile uri='http://iana.org/beep/cap/1.0'/>\n\
    \      I: </greeting>\n      I: END\n   Each channel must be authenticated before\
    \ work can start, but\n   starting a channel involves authentication.  Any SASL\
    \ profile may be\n   included, for example:\n      <profile uri='http://iana.org/beep/SASL/OTP'/>\n\
    \      <profile uri='http://iana.org/beep/SASL/DIGEST-MD5'/>\n      <profile uri='http://iana.org/beep/SASL/ANONYMOUS'/>\n\
    \   Example of anonymous channel:\n      C: <start number='1'>\n      C:    <profile\
    \ uri='http://iana.org/beep/SASL/ANONYMOUS'/>\n      C: </start>\n      S: RPY\
    \ 0 1 . 221 87\n      S: Content-Type: application/beep+xml\n      S:\n      S:\
    \ <profile uri='http://iana.org/beep/SASL/ANONYMOUS'/>\n      S: END\n   Example\
    \ of DIGEST-MD5 channel:\n      C: <start number='1'>\n      C:    <profile uri='http://iana.org/beep/SASL/DIGEST-MD5'/>\n\
    \      C: </start>\n      S: RPY 0 1 . 221 87\n      S: Content-Type: application/beep+xml\n\
    \      S:\n      S: <profile uri='http://iana.org/beep/SASL/DIGEST-MD5'/>\n  \
    \    S: END\n   Piggybacking the \"CAPABILITY\" command.\n   The \"CAPABILITY\"\
    \ reply may be included during channel start (see\n   RFC3080, section 2.3.1.2),\
    \ as BEEP allows the start command to\n   include the initial data transfer. \
    \ This reduces the number of round\n   trips to initiate a CAP session.\n"
- title: 13.  IANA Considerations
  contents:
  - "13.  IANA Considerations\n   This memo defines IANA-registered extensions to\
    \ the attributes\n   defined by iCalendar, as defined in [iCAL], and [iTIP].\n\
    \   IANA registration proposals for iCalendar and [iTIP] are to be mailed\n  \
    \ to the registration agent for the \"text/calendar\" [MIME] content-\n   type,\
    \ <MAILTO: ietf-calendar@imc.org> using the format defined in\n   section 7 of\
    \ [iCAL].\n   The the IANA has registered the profile specified in Section 12.1,\n\
    \   and has selected an IANA-specific URI: http://iana.org/beep/cap/1.0.\n"
- title: 14.  Security Considerations
  contents:
  - "14.  Security Considerations\n   Access rights should be granted cautiously.\
    \  Without careful\n   planning, it is possible to open up access to a greater\
    \ degree than\n   desired.\n   The \"IDENTIFY\" command should be carefully implemented.\
    \  If it is\n   done incorrectly, UPNs may gain access as other, unintended, UPNs.\n\
    \   The \"IDENTIFY\" command may not chain; that is, the identity is always\n\
    \   validated against the original UPN and not the new UPN.\n   Since CAP is a\
    \ profile of [BEEP], consult [BEEP]'s Section 9 for a\n   discussion of BEEP-specific\
    \ security issues.\n   There are risks of allowing anonymous UPNs to deposit REQUEST\
    \ and\n   REFRESH objects (calendar spam and denial-of-service, for example).\n\
    \   Implementations should consider methods to restrict anonymous\n   requests\
    \ to within acceptable usages.\n   CS implementations might consider automatically\
    \ creating VCARs that\n   allow CAP ATTENDEEs in booked objects to deposit REFRESH\
    \ and REPLY\n   objects for those UIDs if they otherwise do not have access rather\n\
    \   then opening up world access.  And they may also consider allowing\n   COUNTER\
    \ objects for those ATTENDEEs.\n   When an object is booked by a CUA ,the CS reply\
    \ may wish to include\n   warning messages to the CUA for ATTENDEEs that have\
    \ CAP urls that do\n   not have local UPNs as those ATTENDEES may be unable to\
    \ REPLY or\n   REFRESH.  Some CSs may wish this to be an error.\n   Although service\
    \ provisioning is a policy matter, at a minimum, all\n   implementations must\
    \ provide the following tuning profiles:\n      o for authentication: http://iana.org/beep/SASL/DIGEST-MD5\n\
    \      o for confidentiality: http://iana.org/beep/TLS (using the\n      TLS_RSA_WITH_3DES_EDE_CBC_SHA\
    \ cipher)\n      o for both: http://iana.org/beep/TLS (using the\n      TLS_RSA_WITH_3DES_EDE_CBC_SHA\
    \ cipher supporting client-side\n      certificates)\n"
- title: Appendix A.  Acknowledgements
  contents:
  - "Appendix A.  Acknowledgements\n   The following individuals were major contributors\
    \ to the drafting and\n   discussion of this memo, and they are greatly appreciated:\n\
    \   Alan Davies, Andrea Campi, Andre Courtemanche, Andrew Davison, Anil\n   Srivastava,\
    \ ArentJan Banck, Arnaud Quillaud, Benjamin Sonntag,\n   Bernard Desruisseaux,\
    \ Bertrand Guiheneuf, Bob Mahoney, Bob Morgan,\n   Bruce Kahn, Chris Dudding,\
    \ Chris Olds, Christopher Apple, Cortlandt\n   Winters, Craig Johnson, Cyrus Daboo,\
    \ Damon Chaplin, Dan Hickman, Dan\n   Kohn, Dan Winship, Darryl Champagne, David\
    \ C.  Thewlis, David Nicol,\n   David Nusbaum, David West, Derik Stenerson, Eric\
    \ R. Plamondon, Frank\n   Dawson, Frank Nitsch, Gary Frederick, Gary McGath, Gilles\
    \ Fortin,\n   Graham Gilmore, Greg Barnes, Greg FitzPatrick, Harald Alvestrand,\n\
    \   Harrie Hazewinkel, Helge Hess, Jagan Garimella, Jay Parker, Jim Ray,\n   Jim\
    \ Smith, Joerg Reichelt, John Berthels, John Smith, John Stracke,\n   Jonathan\
    \ Lennox, JP Rosevear, Karen Chu, Katie Capps Parlante, Kees\n   Cook, Ken Crawford,\
    \ Ki Wong, Lars Eggert, Lata Kannan, Lawrence\n   Greenfield, Libby Miller, Lisa\
    \ Dusseault, Lyndon Nerenberg, Mark\n   Davidson, Mark Paterson, Mark Smith, Mark\
    \ Swanson, Mark Tearle,\n   Marshall Rose, Martijn van Beers, Martin Jackson,\
    \ Matthias Laabs, Max\n   Froumentin, Micah Gorrell, Michael Fair, Mike Higginbottom,\
    \ Mike\n   Hixson, Murata Makoto, Natalia Syracuse, Nathaniel Borenstein, Ned\n\
    \   Freed, Olivier Gutknecht, Patrice Lapierre, Patrice Scattolin, Paul\n   Hoffman,\
    \ Paul Sharpe, Payod Deshpande, Pekka Pessi, Peter Thompson,\n   Preston Stephenson,\
    \ Prometeo Sandino Roman Corral, Ralph Patterson,\n   Robert Lusardi, Robert Ransdell,\
    \ Rob Siemborski, Satyanarayana\n   Vempati, Satya Vempati, Scott Hollenbeck,\
    \ Seamus Garvey, Shannon\n   Clark, Shriram Vishwanathan, Steve Coya, Steve Mansour,\
    \ Steve Miller,\n   Steve Vinter, Stuart Guthrie, Suchet Singh Khalsa, Ted Hardie,\
    \ Tim\n   Hare, Timo Sirainen, Vicky Oliver, Paul Hill, and Yael Shaham-Gafni.\n"
- title: Appendix B.  References
  contents:
  - 'Appendix B.  References

    '
- title: Appendix B.1.  Normative References
  contents:
  - "Appendix B.1.  Normative References\n   [ABNF]      Crocker, D., Ed. and P. Overell,\
    \ \"Augmented BNF for\n               Syntax Specifications: ABNF\", RFC 4234,\
    \ October 2005.\n   [BEEP]      Rose, M., \"The Blocks Extensible Exchange Protocol\
    \ Core\",\n               RFC 3080, March 2001.\n   [BEEPTCP]   Rose, M., \"Mapping\
    \ the BEEP Core onto TCP\", RFC 3081,\n               March 2001.\n   [BEEPGUIDE]\
    \ Rose, M., \"BEEP, The Definitive Guide\", ISBN 0-596-\n               00244-0,\
    \ O'Reilly & Associates, Inc.\n   [GUIDE]     Mahoney, B., Babics, G., and A.\
    \ Taler, \"Guide to Internet\n               Calendaring\", RFC 3283, June 2002.\n\
    \   [iCAL]      Dawson, F. and D. Stenerson, \"Internet Calendaring and\n    \
    \           Scheduling Core Object Specification (iCalendar)\", RFC\n        \
    \       2445, November 1998.\n   [iTIP]      Silverberg, S., Mansour, S., Dawson,\
    \ F., and R. Hopson,\n               \"iCalendar Transport-Independent Interoperability\n\
    \               Protocol (iTIP) Scheduling Events, BusyTime, To-dos and\n    \
    \           Journal Entries\", RFC 2446, November 1998.\n   [iMIP]      Dawson,\
    \ F., Mansour, S., and S. Silverberg, \"iCalendar\n               Message-Based\
    \ Interoperability Protocol (iMIP)\", RFC\n               2447, November 1998.\n\
    \   [MIME]      Freed, N. and N. Borenstein, \"Multipurpose Internet Mail\n  \
    \             Extensions (MIME) Part One: Format of Internet Message\n       \
    \        Bodies\", RFC 2045, November 1996.\n   [RFC2119]   Bradner, S., \"Key\
    \ words for use in RFCs to Indicate\n               Requirement Levels\", RFC\
    \ 2119, BCP 14, March 1997.\n"
- title: Appendix B.2.  Informative References
  contents:
  - "Appendix B.2.  Informative References\n   [CHARREG]   Freed, N. and J. Postel,\
    \ \"IANA Charset Registration\n               Procedures\", RFC 2278, January\
    \ 1998.\n   [CHARPOL]   Alvestrand, H., \"IETF Policy on Character Sets and\n\
    \               Languages\", RFC 2277, January 1998.\n   [RFC2822]   Resnick,\
    \ P., Ed., \"Internet Message Format\", RFC 2822,\n               April 2001.\n\
    \   [SASL]      Myers, J., \"Simple Authentication and Security Layer\n      \
    \         (SASL)\", RFC 2222, October 1997.\n   [SQL92]     \"Database Language\
    \ SQL\", ANSI/ISO/IEC 9075: 1992, aka\n               ANSI X3.135-1992, aka FIPS\
    \ PUB 127-2\n   [SQLCOM]    ANSI/ISO/IEC 9075:1992/TC-1-1995, Technical corrigendum\
    \ 1\n               to ISO/IEC 9075: 1992, also adopted as Amendment 1 to\n  \
    \             ANSI X3.135.1992\n   [URLGUIDE]  Masinter, L., Alvestrand, H., Zigmond,\
    \ D., and R. Petke,\n               \"Guidelines for new URL Schemes\", RFC 2718,\
    \ November\n               1999.\n   [URI]       Berners-Lee, T., Fielding, R.,\
    \ and L. Masinter, \"Uniform\n               Resource Identifiers (URI): Generic\
    \ Syntax\", RFC 3986,\n               January 2005.\n   [URL]       Berners-Lee,\
    \ T, Masinter, L., and M. McCahil, \"Uniform\n               Resource Locators\
    \ (URL)\", RFC 1738, December 1994.\n   [X509CRL]   Housley, R., Polk, W., Ford,\
    \ W., and D. Solo, \"Internet\n               X.509 Public Key Infrastructure\
    \ Certificate and\n               Certificate Revocation List (CRL) Profile\"\
    , RFC 3280,\n               April 2002.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Doug Royer\n   IntelliCal, LLC\n   267 Kentlands Blvd.\
    \ #3041\n   Gaithersburg, MD  20878\n   US\n   Phone: +1-866-594-8574\n   Fax:\
    \   +1-866-594-8574\n   EMail: Doug@IntelliCal.com\n   URI:   http://Royer.com\n\
    \   George Babics\n   Oracle\n   600 Blvd. de Maisonneuve West\n   Suite 1900\n\
    \   Montreal, Quebec  H3A 3J2\n   CA\n   Phone: +1-514-905-8694\n   EMail: george.babics@oracle.com\n\
    \   Steve Mansour\n   eBay\n   2145 Hamilton Avenue\n   San Jose, CA  95125\n\
    \   USA\n   Phone: +1-408-376-8817\n   EMail: smansour@ebay.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
