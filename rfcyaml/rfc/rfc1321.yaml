- title: __initial_text__
  contents:
  - "                     The MD5 Message-Digest Algorithm\nStatus of this Memo\n\
    \   This memo provides information for the Internet community.  It does\n   not\
    \ specify an Internet standard.  Distribution of this memo is\n   unlimited.\n\
    Acknowlegements\n   We would like to thank Don Coppersmith, Burt Kaliski, Ralph\
    \ Merkle,\n   David Chaum, and Noam Nisan for numerous helpful comments and\n\
    \   suggestions.\nTable of Contents\n   1. Executive Summary                 \
    \                               1\n   2. Terminology and Notation            \
    \                             2\n   3. MD5 Algorithm Description             \
    \                           3\n   4. Summary                                 \
    \                         6\n   5. Differences Between MD4 and MD5           \
    \                       6\n   References                                     \
    \                     7\n   APPENDIX A - Reference Implementation            \
    \                   7\n   Security Considerations                            \
    \                21\n   Author's Address                                     \
    \              21\n1. Executive Summary\n   This document describes the MD5 message-digest\
    \ algorithm. The\n   algorithm takes as input a message of arbitrary length and\
    \ produces\n   as output a 128-bit \"fingerprint\" or \"message digest\" of the\
    \ input.\n   It is conjectured that it is computationally infeasible to produce\n\
    \   two messages having the same message digest, or to produce any\n   message\
    \ having a given prespecified target message digest. The MD5\n   algorithm is\
    \ intended for digital signature applications, where a\n   large file must be\
    \ \"compressed\" in a secure manner before being\n   encrypted with a private\
    \ (secret) key under a public-key cryptosystem\n   such as RSA.\n   The MD5 algorithm\
    \ is designed to be quite fast on 32-bit machines. In\n   addition, the MD5 algorithm\
    \ does not require any large substitution\n   tables; the algorithm can be coded\
    \ quite compactly.\n   The MD5 algorithm is an extension of the MD4 message-digest\
    \ algorithm\n   1,2]. MD5 is slightly slower than MD4, but is more \"conservative\"\
    \ in\n   design. MD5 was designed because it was felt that MD4 was perhaps\n \
    \  being adopted for use more quickly than justified by the existing\n   critical\
    \ review; because MD4 was designed to be exceptionally fast,\n   it is \"at the\
    \ edge\" in terms of risking successful cryptanalytic\n   attack. MD5 backs off\
    \ a bit, giving up a little in speed for a much\n   greater likelihood of ultimate\
    \ security. It incorporates some\n   suggestions made by various reviewers, and\
    \ contains additional\n   optimizations. The MD5 algorithm is being placed in\
    \ the public domain\n   for review and possible adoption as a standard.\n   For\
    \ OSI-based applications, MD5's object identifier is\n   md5 OBJECT IDENTIFIER\
    \ ::=\n     iso(1) member-body(2) US(840) rsadsi(113549) digestAlgorithm(2) 5}\n\
    \   In the X.509 type AlgorithmIdentifier [3], the parameters for MD5\n   should\
    \ have type NULL.\n2. Terminology and Notation\n   In this document a \"word\"\
    \ is a 32-bit quantity and a \"byte\" is an\n   eight-bit quantity. A sequence\
    \ of bits can be interpreted in a\n   natural manner as a sequence of bytes, where\
    \ each consecutive group\n   of eight bits is interpreted as a byte with the high-order\
    \ (most\n   significant) bit of each byte listed first. Similarly, a sequence\
    \ of\n   bytes can be interpreted as a sequence of 32-bit words, where each\n\
    \   consecutive group of four bytes is interpreted as a word with the\n   low-order\
    \ (least significant) byte given first.\n   Let x_i denote \"x sub i\". If the\
    \ subscript is an expression, we\n   surround it in braces, as in x_{i+1}. Similarly,\
    \ we use ^ for\n   superscripts (exponentiation), so that x^i denotes x to the\
    \ i-th\n   power.\n   Let the symbol \"+\" denote addition of words (i.e., modulo-2^32\n\
    \   addition). Let X <<< s denote the 32-bit value obtained by circularly\n  \
    \ shifting (rotating) X left by s bit positions. Let not(X) denote the\n   bit-wise\
    \ complement of X, and let X v Y denote the bit-wise OR of X\n   and Y. Let X\
    \ xor Y denote the bit-wise XOR of X and Y, and let XY\n   denote the bit-wise\
    \ AND of X and Y.\n3. MD5 Algorithm Description\n   We begin by supposing that\
    \ we have a b-bit message as input, and that\n   we wish to find its message digest.\
    \ Here b is an arbitrary\n   nonnegative integer; b may be zero, it need not be\
    \ a multiple of\n   eight, and it may be arbitrarily large. We imagine the bits\
    \ of the\n   message written down as follows:\n          m_0 m_1 ... m_{b-1}\n\
    \   The following five steps are performed to compute the message digest\n   of\
    \ the message.\n3.1 Step 1. Append Padding Bits\n   The message is \"padded\"\
    \ (extended) so that its length (in bits) is\n   congruent to 448, modulo 512.\
    \ That is, the message is extended so\n   that it is just 64 bits shy of being\
    \ a multiple of 512 bits long.\n   Padding is always performed, even if the length\
    \ of the message is\n   already congruent to 448, modulo 512.\n   Padding is performed\
    \ as follows: a single \"1\" bit is appended to the\n   message, and then \"0\"\
    \ bits are appended so that the length in bits of\n   the padded message becomes\
    \ congruent to 448, modulo 512. In all, at\n   least one bit and at most 512 bits\
    \ are appended.\n3.2 Step 2. Append Length\n   A 64-bit representation of b (the\
    \ length of the message before the\n   padding bits were added) is appended to\
    \ the result of the previous\n   step. In the unlikely event that b is greater\
    \ than 2^64, then only\n   the low-order 64 bits of b are used. (These bits are\
    \ appended as two\n   32-bit words and appended low-order word first in accordance\
    \ with the\n   previous conventions.)\n   At this point the resulting message\
    \ (after padding with bits and with\n   b) has a length that is an exact multiple\
    \ of 512 bits. Equivalently,\n   this message has a length that is an exact multiple\
    \ of 16 (32-bit)\n   words. Let M[0 ... N-1] denote the words of the resulting\
    \ message,\n   where N is a multiple of 16.\n3.3 Step 3. Initialize MD Buffer\n\
    \   A four-word buffer (A,B,C,D) is used to compute the message digest.\n   Here\
    \ each of A, B, C, D is a 32-bit register. These registers are\n   initialized\
    \ to the following values in hexadecimal, low-order bytes\n   first):\n      \
    \    word A: 01 23 45 67\n          word B: 89 ab cd ef\n          word C: fe\
    \ dc ba 98\n          word D: 76 54 32 10\n3.4 Step 4. Process Message in 16-Word\
    \ Blocks\n   We first define four auxiliary functions that each take as input\n\
    \   three 32-bit words and produce as output one 32-bit word.\n          F(X,Y,Z)\
    \ = XY v not(X) Z\n          G(X,Y,Z) = XZ v Y not(Z)\n          H(X,Y,Z) = X\
    \ xor Y xor Z\n          I(X,Y,Z) = Y xor (X v not(Z))\n   In each bit position\
    \ F acts as a conditional: if X then Y else Z.\n   The function F could have been\
    \ defined using + instead of v since XY\n   and not(X)Z will never have 1's in\
    \ the same bit position.) It is\n   interesting to note that if the bits of X,\
    \ Y, and Z are independent\n   and unbiased, the each bit of F(X,Y,Z) will be\
    \ independent and\n   unbiased.\n   The functions G, H, and I are similar to the\
    \ function F, in that they\n   act in \"bitwise parallel\" to produce their output\
    \ from the bits of X,\n   Y, and Z, in such a manner that if the corresponding\
    \ bits of X, Y,\n   and Z are independent and unbiased, then each bit of G(X,Y,Z),\n\
    \   H(X,Y,Z), and I(X,Y,Z) will be independent and unbiased. Note that\n   the\
    \ function H is the bit-wise \"xor\" or \"parity\" function of its\n   inputs.\n\
    \   This step uses a 64-element table T[1 ... 64] constructed from the\n   sine\
    \ function. Let T[i] denote the i-th element of the table, which\n   is equal\
    \ to the integer part of 4294967296 times abs(sin(i)), where i\n   is in radians.\
    \ The elements of the table are given in the appendix.\n   Do the following:\n\
    \   /* Process each 16-word block. */\n   For i = 0 to N/16-1 do\n     /* Copy\
    \ block i into X. */\n     For j = 0 to 15 do\n       Set X[j] to M[i*16+j].\n\
    \     end /* of loop on j */\n     /* Save A as AA, B as BB, C as CC, and D as\
    \ DD. */\n     AA = A\n     BB = B\n     CC = C\n     DD = D\n     /* Round 1.\
    \ */\n     /* Let [abcd k s i] denote the operation\n          a = b + ((a + F(b,c,d)\
    \ + X[k] + T[i]) <<< s). */\n     /* Do the following 16 operations. */\n    \
    \ [ABCD  0  7  1]  [DABC  1 12  2]  [CDAB  2 17  3]  [BCDA  3 22  4]\n     [ABCD\
    \  4  7  5]  [DABC  5 12  6]  [CDAB  6 17  7]  [BCDA  7 22  8]\n     [ABCD  8\
    \  7  9]  [DABC  9 12 10]  [CDAB 10 17 11]  [BCDA 11 22 12]\n     [ABCD 12  7\
    \ 13]  [DABC 13 12 14]  [CDAB 14 17 15]  [BCDA 15 22 16]\n     /* Round 2. */\n\
    \     /* Let [abcd k s i] denote the operation\n          a = b + ((a + G(b,c,d)\
    \ + X[k] + T[i]) <<< s). */\n     /* Do the following 16 operations. */\n    \
    \ [ABCD  1  5 17]  [DABC  6  9 18]  [CDAB 11 14 19]  [BCDA  0 20 20]\n     [ABCD\
    \  5  5 21]  [DABC 10  9 22]  [CDAB 15 14 23]  [BCDA  4 20 24]\n     [ABCD  9\
    \  5 25]  [DABC 14  9 26]  [CDAB  3 14 27]  [BCDA  8 20 28]\n     [ABCD 13  5\
    \ 29]  [DABC  2  9 30]  [CDAB  7 14 31]  [BCDA 12 20 32]\n     /* Round 3. */\n\
    \     /* Let [abcd k s t] denote the operation\n          a = b + ((a + H(b,c,d)\
    \ + X[k] + T[i]) <<< s). */\n     /* Do the following 16 operations. */\n    \
    \ [ABCD  5  4 33]  [DABC  8 11 34]  [CDAB 11 16 35]  [BCDA 14 23 36]\n     [ABCD\
    \  1  4 37]  [DABC  4 11 38]  [CDAB  7 16 39]  [BCDA 10 23 40]\n     [ABCD 13\
    \  4 41]  [DABC  0 11 42]  [CDAB  3 16 43]  [BCDA  6 23 44]\n     [ABCD  9  4\
    \ 45]  [DABC 12 11 46]  [CDAB 15 16 47]  [BCDA  2 23 48]\n     /* Round 4. */\n\
    \     /* Let [abcd k s t] denote the operation\n          a = b + ((a + I(b,c,d)\
    \ + X[k] + T[i]) <<< s). */\n     /* Do the following 16 operations. */\n    \
    \ [ABCD  0  6 49]  [DABC  7 10 50]  [CDAB 14 15 51]  [BCDA  5 21 52]\n     [ABCD\
    \ 12  6 53]  [DABC  3 10 54]  [CDAB 10 15 55]  [BCDA  1 21 56]\n     [ABCD  8\
    \  6 57]  [DABC 15 10 58]  [CDAB  6 15 59]  [BCDA 13 21 60]\n     [ABCD  4  6\
    \ 61]  [DABC 11 10 62]  [CDAB  2 15 63]  [BCDA  9 21 64]\n     /* Then perform\
    \ the following additions. (That is increment each\n        of the four registers\
    \ by the value it had before this block\n        was started.) */\n     A = A\
    \ + AA\n     B = B + BB\n     C = C + CC\n     D = D + DD\n   end /* of loop on\
    \ i */\n3.5 Step 5. Output\n   The message digest produced as output is A, B,\
    \ C, D. That is, we\n   begin with the low-order byte of A, and end with the high-order\
    \ byte\n   of D.\n   This completes the description of MD5. A reference implementation\
    \ in\n   C is given in the appendix.\n4. Summary\n   The MD5 message-digest algorithm\
    \ is simple to implement, and provides\n   a \"fingerprint\" or message digest\
    \ of a message of arbitrary length.\n   It is conjectured that the difficulty\
    \ of coming up with two messages\n   having the same message digest is on the\
    \ order of 2^64 operations,\n   and that the difficulty of coming up with any\
    \ message having a given\n   message digest is on the order of 2^128 operations.\
    \ The MD5 algorithm\n   has been carefully scrutinized for weaknesses. It is,\
    \ however, a\n   relatively new algorithm and further security analysis is of\
    \ course\n   justified, as is the case with any new proposal of this sort.\n5.\
    \ Differences Between MD4 and MD5\n     The following are the differences between\
    \ MD4 and MD5:\n       1.   A fourth round has been added.\n       2.   Each step\
    \ now has a unique additive constant.\n       3.   The function g in round 2 was\
    \ changed from (XY v XZ v YZ) to\n       (XZ v Y not(Z)) to make g less symmetric.\n\
    \       4.   Each step now adds in the result of the previous step.  This\n  \
    \     promotes a faster \"avalanche effect\".\n       5.   The order in which\
    \ input words are accessed in rounds 2 and\n       3 is changed, to make these\
    \ patterns less like each other.\n       6.   The shift amounts in each round\
    \ have been approximately\n       optimized, to yield a faster \"avalanche effect.\"\
    \ The shifts in\n       different rounds are distinct.\nReferences\n   [1] Rivest,\
    \ R., \"The MD4 Message Digest Algorithm\", RFC 1320, MIT and\n       RSA Data\
    \ Security, Inc., April 1992.\n   [2] Rivest, R., \"The MD4 message digest algorithm\"\
    , in A.J.  Menezes\n       and S.A. Vanstone, editors, Advances in Cryptology\
    \ - CRYPTO '90\n       Proceedings, pages 303-311, Springer-Verlag, 1991.\n  \
    \ [3] CCITT Recommendation X.509 (1988), \"The Directory -\n       Authentication\
    \ Framework.\"\nAPPENDIX A - Reference Implementation\n   This appendix contains\
    \ the following files taken from RSAREF: A\n   Cryptographic Toolkit for Privacy-Enhanced\
    \ Mail:\n     global.h -- global header file\n     md5.h -- header file for MD5\n\
    \     md5c.c -- source code for MD5\n   For more information on RSAREF, send email\
    \ to <rsaref@rsa.com>.\n   The appendix also includes the following file:\n  \
    \   mddriver.c -- test driver for MD2, MD4 and MD5\n   The driver compiles for\
    \ MD5 by default but can compile for MD2 or MD4\n   if the symbol MD is defined\
    \ on the C compiler command line as 2 or 4.\n   The implementation is portable\
    \ and should work on many different\n   plaforms. However, it is not difficult\
    \ to optimize the implementation\n   on particular platforms, an exercise left\
    \ to the reader. For example,\n   on \"little-endian\" platforms where the lowest-addressed\
    \ byte in a 32-\n   bit word is the least significant and there are no alignment\n\
    \   restrictions, the call to Decode in MD5Transform can be replaced with\n  \
    \ a typecast.\nA.1 global.h\n/* GLOBAL.H - RSAREF types and constants\n */\n/*\
    \ PROTOTYPES should be set to one if and only if the compiler supports\n  function\
    \ argument prototyping.\nThe following makes PROTOTYPES default to 0 if it has\
    \ not already\n  been defined with C compiler flags.\n */\n#ifndef PROTOTYPES\n\
    #define PROTOTYPES 0\n#endif\n/* POINTER defines a generic pointer type */\ntypedef\
    \ unsigned char *POINTER;\n/* UINT2 defines a two byte word */\ntypedef unsigned\
    \ short int UINT2;\n/* UINT4 defines a four byte word */\ntypedef unsigned long\
    \ int UINT4;\n/* PROTO_LIST is defined depending on how PROTOTYPES is defined\
    \ above.\nIf using PROTOTYPES, then PROTO_LIST returns the list, otherwise it\n\
    \  returns an empty list.\n */\n#if PROTOTYPES\n#define PROTO_LIST(list) list\n\
    #else\n#define PROTO_LIST(list) ()\n#endif\nA.2 md5.h\n/* MD5.H - header file\
    \ for MD5C.C\n */\n/* Copyright (C) 1991-2, RSA Data Security, Inc. Created 1991.\
    \ All\nrights reserved.\nLicense to copy and use this software is granted provided\
    \ that it\nis identified as the \"RSA Data Security, Inc. MD5 Message-Digest\n\
    Algorithm\" in all material mentioning or referencing this software\nor this function.\n\
    License is also granted to make and use derivative works provided\nthat such works\
    \ are identified as \"derived from the RSA Data\nSecurity, Inc. MD5 Message-Digest\
    \ Algorithm\" in all material\nmentioning or referencing the derived work.\nRSA\
    \ Data Security, Inc. makes no representations concerning either\nthe merchantability\
    \ of this software or the suitability of this\nsoftware for any particular purpose.\
    \ It is provided \"as is\"\nwithout express or implied warranty of any kind.\n\
    These notices must be retained in any copies of any part of this\ndocumentation\
    \ and/or software.\n */\n/* MD5 context. */\ntypedef struct {\n  UINT4 state[4];\
    \                                   /* state (ABCD) */\n  UINT4 count[2];    \
    \    /* number of bits, modulo 2^64 (lsb first) */\n  unsigned char buffer[64];\
    \                         /* input buffer */\n} MD5_CTX;\nvoid MD5Init PROTO_LIST\
    \ ((MD5_CTX *));\nvoid MD5Update PROTO_LIST\n  ((MD5_CTX *, unsigned char *, unsigned\
    \ int));\nvoid MD5Final PROTO_LIST ((unsigned char [16], MD5_CTX *));\nA.3 md5c.c\n\
    /* MD5C.C - RSA Data Security, Inc., MD5 message-digest algorithm\n */\n/* Copyright\
    \ (C) 1991-2, RSA Data Security, Inc. Created 1991. All\nrights reserved.\nLicense\
    \ to copy and use this software is granted provided that it\nis identified as\
    \ the \"RSA Data Security, Inc. MD5 Message-Digest\nAlgorithm\" in all material\
    \ mentioning or referencing this software\nor this function.\nLicense is also\
    \ granted to make and use derivative works provided\nthat such works are identified\
    \ as \"derived from the RSA Data\nSecurity, Inc. MD5 Message-Digest Algorithm\"\
    \ in all material\nmentioning or referencing the derived work.\nRSA Data Security,\
    \ Inc. makes no representations concerning either\nthe merchantability of this\
    \ software or the suitability of this\nsoftware for any particular purpose. It\
    \ is provided \"as is\"\nwithout express or implied warranty of any kind.\nThese\
    \ notices must be retained in any copies of any part of this\ndocumentation and/or\
    \ software.\n */\n#include \"global.h\"\n#include \"md5.h\"\n/* Constants for\
    \ MD5Transform routine.\n */\n#define S11 7\n#define S12 12\n#define S13 17\n\
    #define S14 22\n#define S21 5\n#define S22 9\n#define S23 14\n#define S24 20\n\
    #define S31 4\n#define S32 11\n#define S33 16\n#define S34 23\n#define S41 6\n\
    #define S42 10\n#define S43 15\n#define S44 21\nstatic void MD5Transform PROTO_LIST\
    \ ((UINT4 [4], unsigned char [64]));\nstatic void Encode PROTO_LIST\n  ((unsigned\
    \ char *, UINT4 *, unsigned int));\nstatic void Decode PROTO_LIST\n  ((UINT4 *,\
    \ unsigned char *, unsigned int));\nstatic void MD5_memcpy PROTO_LIST ((POINTER,\
    \ POINTER, unsigned int));\nstatic void MD5_memset PROTO_LIST ((POINTER, int,\
    \ unsigned int));\nstatic unsigned char PADDING[64] = {\n  0x80, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0\n};\n/* F, G, H and I are basic MD5 functions.\n */\n\
    #define F(x, y, z) (((x) & (y)) | ((~x) & (z)))\n#define G(x, y, z) (((x) & (z))\
    \ | ((y) & (~z)))\n#define H(x, y, z) ((x) ^ (y) ^ (z))\n#define I(x, y, z) ((y)\
    \ ^ ((x) | (~z)))\n/* ROTATE_LEFT rotates x left n bits.\n */\n#define ROTATE_LEFT(x,\
    \ n) (((x) << (n)) | ((x) >> (32-(n))))\n/* FF, GG, HH, and II transformations\
    \ for rounds 1, 2, 3, and 4.\nRotation is separate from addition to prevent recomputation.\n\
    \ */\n#define FF(a, b, c, d, x, s, ac) { \\\n (a) += F ((b), (c), (d)) + (x) +\
    \ (UINT4)(ac); \\\n (a) = ROTATE_LEFT ((a), (s)); \\\n (a) += (b); \\\n  }\n#define\
    \ GG(a, b, c, d, x, s, ac) { \\\n (a) += G ((b), (c), (d)) + (x) + (UINT4)(ac);\
    \ \\\n (a) = ROTATE_LEFT ((a), (s)); \\\n (a) += (b); \\\n  }\n#define HH(a, b,\
    \ c, d, x, s, ac) { \\\n (a) += H ((b), (c), (d)) + (x) + (UINT4)(ac); \\\n (a)\
    \ = ROTATE_LEFT ((a), (s)); \\\n (a) += (b); \\\n  }\n#define II(a, b, c, d, x,\
    \ s, ac) { \\\n (a) += I ((b), (c), (d)) + (x) + (UINT4)(ac); \\\n (a) = ROTATE_LEFT\
    \ ((a), (s)); \\\n (a) += (b); \\\n  }\n/* MD5 initialization. Begins an MD5 operation,\
    \ writing a new context.\n */\nvoid MD5Init (context)\nMD5_CTX *context;     \
    \                                   /* context */\n{\n  context->count[0] = context->count[1]\
    \ = 0;\n  /* Load magic initialization constants.\n*/\n  context->state[0] = 0x67452301;\n\
    \  context->state[1] = 0xefcdab89;\n  context->state[2] = 0x98badcfe;\n  context->state[3]\
    \ = 0x10325476;\n}\n/* MD5 block update operation. Continues an MD5 message-digest\n\
    \  operation, processing another message block, and updating the\n  context.\n\
    \ */\nvoid MD5Update (context, input, inputLen)\nMD5_CTX *context;           \
    \                             /* context */\nunsigned char *input;           \
    \                     /* input block */\nunsigned int inputLen;              \
    \       /* length of input block */\n{\n  unsigned int i, index, partLen;\n  /*\
    \ Compute number of bytes mod 64 */\n  index = (unsigned int)((context->count[0]\
    \ >> 3) & 0x3F);\n  /* Update number of bits */\n  if ((context->count[0] += ((UINT4)inputLen\
    \ << 3))\n   < ((UINT4)inputLen << 3))\n context->count[1]++;\n  context->count[1]\
    \ += ((UINT4)inputLen >> 29);\n  partLen = 64 - index;\n  /* Transform as many\
    \ times as possible.\n*/\n  if (inputLen >= partLen) {\n MD5_memcpy\n   ((POINTER)&context->buffer[index],\
    \ (POINTER)input, partLen);\n MD5Transform (context->state, context->buffer);\n\
    \ for (i = partLen; i + 63 < inputLen; i += 64)\n   MD5Transform (context->state,\
    \ &input[i]);\n index = 0;\n  }\n  else\n i = 0;\n  /* Buffer remaining input\
    \ */\n  MD5_memcpy\n ((POINTER)&context->buffer[index], (POINTER)&input[i],\n\
    \  inputLen-i);\n}\n/* MD5 finalization. Ends an MD5 message-digest operation,\
    \ writing the\n  the message digest and zeroizing the context.\n */\nvoid MD5Final\
    \ (digest, context)\nunsigned char digest[16];                         /* message\
    \ digest */\nMD5_CTX *context;                                       /* context\
    \ */\n{\n  unsigned char bits[8];\n  unsigned int index, padLen;\n  /* Save number\
    \ of bits */\n  Encode (bits, context->count, 8);\n  /* Pad out to 56 mod 64.\n\
    */\n  index = (unsigned int)((context->count[0] >> 3) & 0x3f);\n  padLen = (index\
    \ < 56) ? (56 - index) : (120 - index);\n  MD5Update (context, PADDING, padLen);\n\
    \  /* Append length (before padding) */\n  MD5Update (context, bits, 8);\n  /*\
    \ Store state in digest */\n  Encode (digest, context->state, 16);\n  /* Zeroize\
    \ sensitive information.\n*/\n  MD5_memset ((POINTER)context, 0, sizeof (*context));\n\
    }\n/* MD5 basic transformation. Transforms state based on block.\n */\nstatic\
    \ void MD5Transform (state, block)\nUINT4 state[4];\nunsigned char block[64];\n\
    {\n  UINT4 a = state[0], b = state[1], c = state[2], d = state[3], x[16];\n  Decode\
    \ (x, block, 64);\n  /* Round 1 */\n  FF (a, b, c, d, x[ 0], S11, 0xd76aa478);\
    \ /* 1 */\n  FF (d, a, b, c, x[ 1], S12, 0xe8c7b756); /* 2 */\n  FF (c, d, a,\
    \ b, x[ 2], S13, 0x242070db); /* 3 */\n  FF (b, c, d, a, x[ 3], S14, 0xc1bdceee);\
    \ /* 4 */\n  FF (a, b, c, d, x[ 4], S11, 0xf57c0faf); /* 5 */\n  FF (d, a, b,\
    \ c, x[ 5], S12, 0x4787c62a); /* 6 */\n  FF (c, d, a, b, x[ 6], S13, 0xa8304613);\
    \ /* 7 */\n  FF (b, c, d, a, x[ 7], S14, 0xfd469501); /* 8 */\n  FF (a, b, c,\
    \ d, x[ 8], S11, 0x698098d8); /* 9 */\n  FF (d, a, b, c, x[ 9], S12, 0x8b44f7af);\
    \ /* 10 */\n  FF (c, d, a, b, x[10], S13, 0xffff5bb1); /* 11 */\n  FF (b, c, d,\
    \ a, x[11], S14, 0x895cd7be); /* 12 */\n  FF (a, b, c, d, x[12], S11, 0x6b901122);\
    \ /* 13 */\n  FF (d, a, b, c, x[13], S12, 0xfd987193); /* 14 */\n  FF (c, d, a,\
    \ b, x[14], S13, 0xa679438e); /* 15 */\n  FF (b, c, d, a, x[15], S14, 0x49b40821);\
    \ /* 16 */\n /* Round 2 */\n  GG (a, b, c, d, x[ 1], S21, 0xf61e2562); /* 17 */\n\
    \  GG (d, a, b, c, x[ 6], S22, 0xc040b340); /* 18 */\n  GG (c, d, a, b, x[11],\
    \ S23, 0x265e5a51); /* 19 */\n  GG (b, c, d, a, x[ 0], S24, 0xe9b6c7aa); /* 20\
    \ */\n  GG (a, b, c, d, x[ 5], S21, 0xd62f105d); /* 21 */\n  GG (d, a, b, c, x[10],\
    \ S22,  0x2441453); /* 22 */\n  GG (c, d, a, b, x[15], S23, 0xd8a1e681); /* 23\
    \ */\n  GG (b, c, d, a, x[ 4], S24, 0xe7d3fbc8); /* 24 */\n  GG (a, b, c, d, x[\
    \ 9], S21, 0x21e1cde6); /* 25 */\n  GG (d, a, b, c, x[14], S22, 0xc33707d6); /*\
    \ 26 */\n  GG (c, d, a, b, x[ 3], S23, 0xf4d50d87); /* 27 */\n  GG (b, c, d, a,\
    \ x[ 8], S24, 0x455a14ed); /* 28 */\n  GG (a, b, c, d, x[13], S21, 0xa9e3e905);\
    \ /* 29 */\n  GG (d, a, b, c, x[ 2], S22, 0xfcefa3f8); /* 30 */\n  GG (c, d, a,\
    \ b, x[ 7], S23, 0x676f02d9); /* 31 */\n  GG (b, c, d, a, x[12], S24, 0x8d2a4c8a);\
    \ /* 32 */\n  /* Round 3 */\n  HH (a, b, c, d, x[ 5], S31, 0xfffa3942); /* 33\
    \ */\n  HH (d, a, b, c, x[ 8], S32, 0x8771f681); /* 34 */\n  HH (c, d, a, b, x[11],\
    \ S33, 0x6d9d6122); /* 35 */\n  HH (b, c, d, a, x[14], S34, 0xfde5380c); /* 36\
    \ */\n  HH (a, b, c, d, x[ 1], S31, 0xa4beea44); /* 37 */\n  HH (d, a, b, c, x[\
    \ 4], S32, 0x4bdecfa9); /* 38 */\n  HH (c, d, a, b, x[ 7], S33, 0xf6bb4b60); /*\
    \ 39 */\n  HH (b, c, d, a, x[10], S34, 0xbebfbc70); /* 40 */\n  HH (a, b, c, d,\
    \ x[13], S31, 0x289b7ec6); /* 41 */\n  HH (d, a, b, c, x[ 0], S32, 0xeaa127fa);\
    \ /* 42 */\n  HH (c, d, a, b, x[ 3], S33, 0xd4ef3085); /* 43 */\n  HH (b, c, d,\
    \ a, x[ 6], S34,  0x4881d05); /* 44 */\n  HH (a, b, c, d, x[ 9], S31, 0xd9d4d039);\
    \ /* 45 */\n  HH (d, a, b, c, x[12], S32, 0xe6db99e5); /* 46 */\n  HH (c, d, a,\
    \ b, x[15], S33, 0x1fa27cf8); /* 47 */\n  HH (b, c, d, a, x[ 2], S34, 0xc4ac5665);\
    \ /* 48 */\n  /* Round 4 */\n  II (a, b, c, d, x[ 0], S41, 0xf4292244); /* 49\
    \ */\n  II (d, a, b, c, x[ 7], S42, 0x432aff97); /* 50 */\n  II (c, d, a, b, x[14],\
    \ S43, 0xab9423a7); /* 51 */\n  II (b, c, d, a, x[ 5], S44, 0xfc93a039); /* 52\
    \ */\n  II (a, b, c, d, x[12], S41, 0x655b59c3); /* 53 */\n  II (d, a, b, c, x[\
    \ 3], S42, 0x8f0ccc92); /* 54 */\n  II (c, d, a, b, x[10], S43, 0xffeff47d); /*\
    \ 55 */\n  II (b, c, d, a, x[ 1], S44, 0x85845dd1); /* 56 */\n  II (a, b, c, d,\
    \ x[ 8], S41, 0x6fa87e4f); /* 57 */\n  II (d, a, b, c, x[15], S42, 0xfe2ce6e0);\
    \ /* 58 */\n  II (c, d, a, b, x[ 6], S43, 0xa3014314); /* 59 */\n  II (b, c, d,\
    \ a, x[13], S44, 0x4e0811a1); /* 60 */\n  II (a, b, c, d, x[ 4], S41, 0xf7537e82);\
    \ /* 61 */\n  II (d, a, b, c, x[11], S42, 0xbd3af235); /* 62 */\n  II (c, d, a,\
    \ b, x[ 2], S43, 0x2ad7d2bb); /* 63 */\n  II (b, c, d, a, x[ 9], S44, 0xeb86d391);\
    \ /* 64 */\n  state[0] += a;\n  state[1] += b;\n  state[2] += c;\n  state[3] +=\
    \ d;\n  /* Zeroize sensitive information.\n*/\n  MD5_memset ((POINTER)x, 0, sizeof\
    \ (x));\n}\n/* Encodes input (UINT4) into output (unsigned char). Assumes len\
    \ is\n  a multiple of 4.\n */\nstatic void Encode (output, input, len)\nunsigned\
    \ char *output;\nUINT4 *input;\nunsigned int len;\n{\n  unsigned int i, j;\n \
    \ for (i = 0, j = 0; j < len; i++, j += 4) {\n output[j] = (unsigned char)(input[i]\
    \ & 0xff);\n output[j+1] = (unsigned char)((input[i] >> 8) & 0xff);\n output[j+2]\
    \ = (unsigned char)((input[i] >> 16) & 0xff);\n output[j+3] = (unsigned char)((input[i]\
    \ >> 24) & 0xff);\n  }\n}\n/* Decodes input (unsigned char) into output (UINT4).\
    \ Assumes len is\n  a multiple of 4.\n */\nstatic void Decode (output, input,\
    \ len)\nUINT4 *output;\nunsigned char *input;\nunsigned int len;\n{\n  unsigned\
    \ int i, j;\n  for (i = 0, j = 0; j < len; i++, j += 4)\n output[i] = ((UINT4)input[j])\
    \ | (((UINT4)input[j+1]) << 8) |\n   (((UINT4)input[j+2]) << 16) | (((UINT4)input[j+3])\
    \ << 24);\n}\n/* Note: Replace \"for loop\" with standard memcpy if possible.\n\
    \ */\nstatic void MD5_memcpy (output, input, len)\nPOINTER output;\nPOINTER input;\n\
    unsigned int len;\n{\n  unsigned int i;\n  for (i = 0; i < len; i++)\n output[i]\
    \ = input[i];\n}\n/* Note: Replace \"for loop\" with standard memset if possible.\n\
    \ */\nstatic void MD5_memset (output, value, len)\nPOINTER output;\nint value;\n\
    unsigned int len;\n{\n  unsigned int i;\n  for (i = 0; i < len; i++)\n ((char\
    \ *)output)[i] = (char)value;\n}\nA.4 mddriver.c\n/* MDDRIVER.C - test driver\
    \ for MD2, MD4 and MD5\n */\n/* Copyright (C) 1990-2, RSA Data Security, Inc.\
    \ Created 1990. All\nrights reserved.\nRSA Data Security, Inc. makes no representations\
    \ concerning either\nthe merchantability of this software or the suitability of\
    \ this\nsoftware for any particular purpose. It is provided \"as is\"\nwithout\
    \ express or implied warranty of any kind.\nThese notices must be retained in\
    \ any copies of any part of this\ndocumentation and/or software.\n */\n/* The\
    \ following makes MD default to MD5 if it has not already been\n  defined with\
    \ C compiler flags.\n */\n#ifndef MD\n#define MD MD5\n#endif\n#include <stdio.h>\n\
    #include <time.h>\n#include <string.h>\n#include \"global.h\"\n#if MD == 2\n#include\
    \ \"md2.h\"\n#endif\n#if MD == 4\n#include \"md4.h\"\n#endif\n#if MD == 5\n#include\
    \ \"md5.h\"\n#endif\n/* Length of test block, number of test blocks.\n */\n#define\
    \ TEST_BLOCK_LEN 1000\n#define TEST_BLOCK_COUNT 1000\nstatic void MDString PROTO_LIST\
    \ ((char *));\nstatic void MDTimeTrial PROTO_LIST ((void));\nstatic void MDTestSuite\
    \ PROTO_LIST ((void));\nstatic void MDFile PROTO_LIST ((char *));\nstatic void\
    \ MDFilter PROTO_LIST ((void));\nstatic void MDPrint PROTO_LIST ((unsigned char\
    \ [16]));\n#if MD == 2\n#define MD_CTX MD2_CTX\n#define MDInit MD2Init\n#define\
    \ MDUpdate MD2Update\n#define MDFinal MD2Final\n#endif\n#if MD == 4\n#define MD_CTX\
    \ MD4_CTX\n#define MDInit MD4Init\n#define MDUpdate MD4Update\n#define MDFinal\
    \ MD4Final\n#endif\n#if MD == 5\n#define MD_CTX MD5_CTX\n#define MDInit MD5Init\n\
    #define MDUpdate MD5Update\n#define MDFinal MD5Final\n#endif\n/* Main driver.\n\
    Arguments (may be any combination):\n  -sstring - digests string\n  -t       -\
    \ runs time trial\n  -x       - runs test script\n  filename - digests file\n\
    \  (none)   - digests standard input\n */\nint main (argc, argv)\nint argc;\n\
    char *argv[];\n{\n  int i;\n  if (argc > 1)\n for (i = 1; i < argc; i++)\n   if\
    \ (argv[i][0] == '-' && argv[i][1] == 's')\n     MDString (argv[i] + 2);\n   else\
    \ if (strcmp (argv[i], \"-t\") == 0)\n     MDTimeTrial ();\n   else if (strcmp\
    \ (argv[i], \"-x\") == 0)\n     MDTestSuite ();\n   else\n     MDFile (argv[i]);\n\
    \  else\n MDFilter ();\n  return (0);\n}\n/* Digests a string and prints the result.\n\
    \ */\nstatic void MDString (string)\nchar *string;\n{\n  MD_CTX context;\n  unsigned\
    \ char digest[16];\n  unsigned int len = strlen (string);\n  MDInit (&context);\n\
    \  MDUpdate (&context, string, len);\n  MDFinal (digest, &context);\n  printf\
    \ (\"MD%d (\\\"%s\\\") = \", MD, string);\n  MDPrint (digest);\n  printf (\"\\\
    n\");\n}\n/* Measures the time to digest TEST_BLOCK_COUNT TEST_BLOCK_LEN-byte\n\
    \  blocks.\n */\nstatic void MDTimeTrial ()\n{\n  MD_CTX context;\n  time_t endTime,\
    \ startTime;\n  unsigned char block[TEST_BLOCK_LEN], digest[16];\n  unsigned int\
    \ i;\n  printf\n (\"MD%d time trial. Digesting %d %d-byte blocks ...\", MD,\n\
    \  TEST_BLOCK_LEN, TEST_BLOCK_COUNT);\n  /* Initialize block */\n  for (i = 0;\
    \ i < TEST_BLOCK_LEN; i++)\n block[i] = (unsigned char)(i & 0xff);\n  /* Start\
    \ timer */\n  time (&startTime);\n  /* Digest blocks */\n  MDInit (&context);\n\
    \  for (i = 0; i < TEST_BLOCK_COUNT; i++)\n MDUpdate (&context, block, TEST_BLOCK_LEN);\n\
    \  MDFinal (digest, &context);\n  /* Stop timer */\n  time (&endTime);\n  printf\
    \ (\" done\\n\");\n  printf (\"Digest = \");\n  MDPrint (digest);\n  printf (\"\
    \\nTime = %ld seconds\\n\", (long)(endTime-startTime));\n  printf\n (\"Speed =\
    \ %ld bytes/second\\n\",\n  (long)TEST_BLOCK_LEN * (long)TEST_BLOCK_COUNT/(endTime-startTime));\n\
    }\n/* Digests a reference suite of strings and prints the results.\n */\nstatic\
    \ void MDTestSuite ()\n{\n  printf (\"MD%d test suite:\\n\", MD);\n  MDString\
    \ (\"\");\n  MDString (\"a\");\n  MDString (\"abc\");\n  MDString (\"message digest\"\
    );\n  MDString (\"abcdefghijklmnopqrstuvwxyz\");\n  MDString\n (\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\
    );\n  MDString\n (\"1234567890123456789012345678901234567890\\\n1234567890123456789012345678901234567890\"\
    );\n}\n/* Digests a file and prints the result.\n */\nstatic void MDFile (filename)\n\
    char *filename;\n{\n  FILE *file;\n  MD_CTX context;\n  int len;\n  unsigned char\
    \ buffer[1024], digest[16];\n  if ((file = fopen (filename, \"rb\")) == NULL)\n\
    \ printf (\"%s can't be opened\\n\", filename);\n  else {\n MDInit (&context);\n\
    \ while (len = fread (buffer, 1, 1024, file))\n   MDUpdate (&context, buffer,\
    \ len);\n MDFinal (digest, &context);\n fclose (file);\n printf (\"MD%d (%s) =\
    \ \", MD, filename);\n MDPrint (digest);\n printf (\"\\n\");\n  }\n}\n/* Digests\
    \ the standard input and prints the result.\n */\nstatic void MDFilter ()\n{\n\
    \  MD_CTX context;\n  int len;\n  unsigned char buffer[16], digest[16];\n  MDInit\
    \ (&context);\n  while (len = fread (buffer, 1, 16, stdin))\n MDUpdate (&context,\
    \ buffer, len);\n  MDFinal (digest, &context);\n  MDPrint (digest);\n  printf\
    \ (\"\\n\");\n}\n/* Prints a message digest in hexadecimal.\n */\nstatic void\
    \ MDPrint (digest)\nunsigned char digest[16];\n{\n  unsigned int i;\n  for (i\
    \ = 0; i < 16; i++)\n printf (\"%02x\", digest[i]);\n}\nA.5 Test suite\n   The\
    \ MD5 test suite (driver option \"-x\") should print the following\n   results:\n\
    MD5 test suite:\nMD5 (\"\") = d41d8cd98f00b204e9800998ecf8427e\nMD5 (\"a\") =\
    \ 0cc175b9c0f1b6a831c399e269772661\nMD5 (\"abc\") = 900150983cd24fb0d6963f7d28e17f72\n\
    MD5 (\"message digest\") = f96b697d7cb7938d525a2f31aaf161d0\nMD5 (\"abcdefghijklmnopqrstuvwxyz\"\
    ) = c3fcd3d76192e4007dfb496cca67e13b\nMD5 (\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\
    ) =\nd174ab98d277d9f5a5611c2c9f419d9f\nMD5 (\"123456789012345678901234567890123456789012345678901234567890123456\n\
    78901234567890\") = 57edf4a22be3c955ac49da2e2107b67a\nSecurity Considerations\n\
    \   The level of security discussed in this memo is considered to be\n   sufficient\
    \ for implementing very high security hybrid digital-\n   signature schemes based\
    \ on MD5 and a public-key cryptosystem.\nAuthor's Address\n   Ronald L. Rivest\n\
    \   Massachusetts Institute of Technology\n   Laboratory for Computer Science\n\
    \   NE43-324\n   545 Technology Square\n   Cambridge, MA  02139-1986\n   Phone:\
    \ (617) 253-5880\n   EMail: rivest@theory.lcs.mit.edu\n"
