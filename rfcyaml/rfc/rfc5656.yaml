- contents:
  - ''
  title: __initial_text__
- contents:
  - 'Elliptic Curve Algorithm Integration in the Secure Shell Transport Layer

    '
  title: Elliptic Curve Algorithm Integration in the Secure Shell Transport Layer
- contents:
  - "Abstract\n   This document describes algorithms based on Elliptic Curve\n   Cryptography
    (ECC) for use within the Secure Shell (SSH) transport\n   protocol.  In particular,
    it specifies Elliptic Curve Diffie-Hellman\n   (ECDH) key agreement, Elliptic
    Curve Menezes-Qu-Vanstone (ECMQV) key\n   agreement, and Elliptic Curve Digital
    Signature Algorithm (ECDSA) for\n   use in the SSH Transport Layer protocol.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the BSD License.\n   This document may contain material from
    IETF Documents or IETF\n   Contributions published or made publicly available
    before November\n   10, 2008.  The person(s) controlling the copyright in some
    of this\n   material may not have granted the IETF Trust the right to allow\n
    \  modifications of such material outside the IETF Standards Process.\n   Without
    obtaining an adequate license from the person(s) controlling\n   the copyright
    in such materials, this document may not be modified\n   outside the IETF Standards
    Process, and derivative works of it may\n   not be created outside the IETF Standards
    Process, except to format\n   it for publication as an RFC or to translate it
    into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \  2. Notation ........................................................4\n   3.
    SSH ECC Public Key Algorithm ....................................4\n      3.1.
    Key Format .................................................4\n           3.1.1.
    Signature Algorithm .................................5\n           3.1.2. Signature
    Encoding ..................................5\n   4. ECDH Key Exchange ...............................................5\n
    \  5. ECMQV Key Exchange ..............................................8\n   6.
    Method Names ...................................................10\n      6.1.
    Elliptic Curve Domain Parameter Identifiers ...............10\n      6.2. ECC
    Public Key Algorithm (ecdsa-sha2-*) ...................11\n           6.2.1. Elliptic
    Curve Digital Signature Algorithm .........11\n      6.3. ECDH Key Exchange Method
    Names (ecdh-sha2-*) ..............12\n      6.4. ECMQV Key Exchange and Verification
    Method Name\n           (ecmqv-sha2) ..............................................12\n
    \  7. Key Exchange Messages ..........................................13\n      7.1.
    ECDH Message Numbers ......................................13\n      7.2. ECMQV
    Message Numbers .....................................13\n   8. Manageability Considerations
    ...................................13\n      8.1. Control of Function through
    Configuration and Policy ......13\n      8.2. Impact on Network Operation ...............................14\n
    \  9. Security Considerations ........................................14\n   10.
    Named Elliptic Curve Domain Parameters ........................16\n      10.1.
    Required Curves ..........................................16\n      10.2. Recommended
    Curves .......................................17\n   11. IANA Considerations ...........................................17\n
    \  12. References ....................................................18\n      12.1.
    Normative References .....................................18\n      12.2. Informative
    References ...................................19\n   Appendix A.  Acknowledgements
    .....................................20\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document adds the following elliptic curve cryptography\n
    \  algorithms to the Secure Shell arsenal: Elliptic Curve Diffie-Hellman\n   (ECDH)
    and Elliptic Curve Digital Signature Algorithm (ECDSA), as\n   well as utilizing
    the SHA2 family of secure hash algorithms.\n   Additionally, support is provided
    for Elliptic Curve Menezes-Qu-\n   Vanstone (ECMQV).\n   Due to its small key
    sizes and its inclusion in the National Security\n   Agency's Suite B, Elliptic
    Curve Cryptography (ECC) is becoming a\n   widely utilized and attractive public-key
    cryptosystem.\n   Compared to cryptosystems such as RSA, the Digital Signature\n
    \  Algorithm (DSA), and Diffie-Hellman (DH) key exchange, ECC variations\n   on
    these schemes offer equivalent security with smaller key sizes.\n   This is illustrated
    in the following table, based on Section 5.6.1 of\n   NIST 800-57 [NIST-800-57],
    which gives approximate comparable key\n   sizes for symmetric- and asymmetric-key
    cryptosystems based on the\n   best known algorithms for attacking them.  L is
    the field size and N\n   is the sub-field size.\n      +-----------+------------------------------+-------+---------+\n
    \     | Symmetric | Discrete Log (e.g., DSA, DH) |  RSA  |   ECC   |\n      +-----------+------------------------------+-------+---------+\n
    \     |     80    |       L = 1024, N = 160      |  1024 | 160-223 |\n      |
    \          |                              |       |         |\n      |    112
    \   |       L = 2048, N = 256      |  2048 | 224-255 |\n      |           |                              |
    \      |         |\n      |    128    |       L = 3072, N = 256      |  3072 |
    256-383 |\n      |           |                              |       |         |\n
    \     |    192    |       L = 7680, N = 384      |  7680 | 384-511 |\n      |
    \          |                              |       |         |\n      |    256
    \   |      L = 15360, N = 512      | 15360 |   512+  |\n      +-----------+------------------------------+-------+---------+\n
    \  Implementation of this specification requires familiarity with both\n   SSH
    [RFC4251] [RFC4253] [RFC4250] and ECC [SEC1] (additional\n   information on ECC
    available in [HMV04], [ANSI-X9.62], and\n   [ANSI-X9.63]).\n   This document is
    concerned with SSH implementation details;\n   specification of the underlying
    cryptographic algorithms is left to\n   other standards documents.\n"
  title: 1.  Introduction
- contents:
  - "2.  Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in [RFC2119].\n   The
    data types boolean, byte, uint32, uint64, string, and mpint are\n   to be interpreted
    in this document as described in [RFC4251].\n   The size of a set of elliptic
    curve domain parameters on a prime\n   curve is defined as the number of bits
    in the binary representation\n   of the field order, commonly denoted by p.  Size
    on a\n   characteristic-2 curve is defined as the number of bits in the binary\n
    \  representation of the field, commonly denoted by m.  A set of\n   elliptic
    curve domain parameters defines a group of order n generated\n   by a base point
    P.\n"
  title: 2.  Notation
- contents:
  - "3.  SSH ECC Public Key Algorithm\n   The SSH ECC public key algorithm is defined
    by its key format,\n   corresponding signature algorithm ECDSA, signature encoding,
    and\n   algorithm identifiers.\n   This section defines the family of \"ecdsa-sha2-*\"
    public key formats\n   and corresponding signature formats.  Every compliant SSH
    ECC\n   implementation MUST implement this public key format.\n"
  - contents:
    - "3.1.  Key Format\n   The \"ecdsa-sha2-*\" key formats all have the following
      encoding:\n      string   \"ecdsa-sha2-[identifier]\"\n      byte[n]  ecc_key_blob\n
      \  The ecc_key_blob value has the following specific encoding:\n      string
      \  [identifier]\n      string   Q\n   The string [identifier] is the identifier
      of the elliptic curve\n   domain parameters.  The format of this string is specified
      in\n   Section 6.1.  Information on the REQUIRED and RECOMMENDED sets of\n   elliptic
      curve domain parameters for use with this algorithm can be\n   found in Section
      10.\n   Q is the public key encoded from an elliptic curve point into an\n   octet
      string as defined in Section 2.3.3 of [SEC1]; point compression\n   MAY be used.\n
      \  The algorithm for ECC key generation can be found in Section 3.2 of\n   [SEC1].
      \ Given some elliptic curve domain parameters, an ECC key pair\n   can be generated
      containing a private key (an integer d), and a\n   public key (an elliptic curve
      point Q).\n"
    - contents:
      - "3.1.1.  Signature Algorithm\n   Signing and verifying is done using the Elliptic
        Curve Digital\n   Signature Algorithm (ECDSA).  ECDSA is specified in [SEC1].
        \ The\n   message hashing algorithm MUST be from the SHA2 family of hash\n
        \  functions [FIPS-180-3] and is chosen according to the curve size as\n   specified
        in Section 6.2.1.\n"
      title: 3.1.1.  Signature Algorithm
    - contents:
      - "3.1.2.  Signature Encoding\n   Signatures are encoded as follows:\n      string
        \  \"ecdsa-sha2-[identifier]\"\n      string   ecdsa_signature_blob\n   The
        string [identifier] is the identifier of the elliptic curve\n   domain parameters.
        \ The format of this string is specified in\n   Section 6.1.  Information
        on the REQUIRED and RECOMMENDED sets of\n   elliptic curve domain parameters
        for use with this algorithm can be\n   found in Section 10.\n   The ecdsa_signature_blob
        value has the following specific encoding:\n      mpint    r\n      mpint
        \   s\n   The integers r and s are the output of the ECDSA algorithm.\n   The
        width of the integer fields is determined by the curve being\n   used.  Note
        that the integers r and s are integers modulo the order\n   of the cryptographic
        subgroup, which may be larger than the size of\n   the finite field.\n"
      title: 3.1.2.  Signature Encoding
    title: 3.1.  Key Format
  title: 3.  SSH ECC Public Key Algorithm
- contents:
  - "4.  ECDH Key Exchange\n   The Elliptic Curve Diffie-Hellman (ECDH) key exchange
    method\n   generates a shared secret from an ephemeral local elliptic curve\n
    \  private key and ephemeral remote elliptic curve public key.  This key\n   exchange
    method provides explicit server authentication as defined in\n   [RFC4253] using
    a signature on the exchange hash.  Every compliant\n   SSH ECC implementation
    MUST implement ECDH key exchange.\n   The primitive used for shared key generation
    is ECDH with cofactor\n   multiplication, the full specification of which can
    be found in\n   Section 3.3.2 of [SEC1].  The algorithm for key pair generation
    can\n   be found in Section 3.2.1 of [SEC1].\n   The family of key exchange method
    names defined for use with this key\n   exchange can be found in Section 6.3.
    \ Algorithm negotiation chooses\n   the public key algorithm to be used for signing
    and the method name\n   of the key exchange.  The method name of the key exchange
    chosen\n   determines the elliptic curve domain parameters and hash function to\n
    \  be used in the remainder of this section.\n   Information on the REQUIRED and
    RECOMMENDED elliptic curve domain\n   parameters for use with this method can
    be found in Section 10.\n   All elliptic curve public keys MUST be validated after
    they are\n   received.  An example of a validation algorithm can be found in\n
    \  Section 3.2.2 of [SEC1].  If a key fails validation, the key exchange\n   MUST
    fail.\n   The elliptic curve public keys (points) that must be transmitted are\n
    \  encoded into octet strings before they are transmitted.  The\n   transformation
    between elliptic curve points and octet strings is\n   specified in Sections 2.3.3
    and 2.3.4 of [SEC1]; point compression\n   MAY be used.  The output of shared
    key generation is a field element\n   xp.  The SSH framework requires that the
    shared key be an integer.\n   The conversion between a field element and an integer
    is specified in\n   Section 2.3.9 of [SEC1].\n   Specification of the message
    numbers SSH_MSG_KEX_ECDH_INIT and\n   SSH_MSG_KEX_ECDH_REPLY is found in Section
    7.\n   The following is an overview of the key exchange process:\n      Client
    \                                               Server\n      ------                                                ------\n
    \     Generate ephemeral key pair.\n      SSH_MSG_KEX_ECDH_INIT  -------------->\n
    \                                     Verify received key is valid.\n                                       Generate
    ephemeral key pair.\n                                             Compute shared
    secret.\n                                   Generate and sign exchange hash.\n
    \                            <------------- SSH_MSG_KEX_ECDH_REPLY\n      Verify
    received key is valid.\n      *Verify host key belongs to server.\n      Compute
    shared secret.\n      Generate exchange hash.\n      Verify server's signature.\n
    \     *  It is RECOMMENDED that the client verify that the host key sent\n         is
    the server's host key (for example, using a local database).\n         The client
    MAY accept the host key without verification, but\n         doing so will render
    the protocol insecure against active\n         attacks; see the discussion in
    Section 4.1 of [RFC4251].\n   This is implemented using the following messages.\n
    \  The client sends:\n      byte     SSH_MSG_KEX_ECDH_INIT\n      string   Q_C,
    client's ephemeral public key octet string\n   The server responds with:\n      byte
    \    SSH_MSG_KEX_ECDH_REPLY\n      string   K_S, server's public host key\n      string
    \  Q_S, server's ephemeral public key octet string\n      string   the signature
    on the exchange hash\n   The exchange hash H is computed as the hash of the concatenation
    of\n   the following.\n      string   V_C, client's identification string (CR
    and LF excluded)\n      string   V_S, server's identification string (CR and LF
    excluded)\n      string   I_C, payload of the client's SSH_MSG_KEXINIT\n      string
    \  I_S, payload of the server's SSH_MSG_KEXINIT\n      string   K_S, server's
    public host key\n      string   Q_C, client's ephemeral public key octet string\n
    \     string   Q_S, server's ephemeral public key octet string\n      mpint    K,
    \  shared secret\n"
  title: 4.  ECDH Key Exchange
- contents:
  - "5.  ECMQV Key Exchange\n   The Elliptic Curve Menezes-Qu-Vanstone (ECMQV) key
    exchange algorithm\n   generates a shared secret from two local elliptic curve
    key pairs and\n   two remote public keys.  This key exchange method provides implicit\n
    \  server authentication as defined in [RFC4253].  The ECMQV key\n   exchange
    method is OPTIONAL.\n   The key exchange method name defined for use with this
    key exchange\n   is \"ecmqv-sha2\".  This method name gives a hashing algorithm
    that is\n   to be used for the Hashed Message Authentication Code (HMAC) below.\n
    \  Future RFCs may define new method names specifying new hash\n   algorithms
    for use with ECMQV.  More information about the method\n   name and HMAC can be
    found in Section 6.4.\n   In general, the ECMQV key exchange is performed using
    the ephemeral\n   and long-term key pair of both the client and server, which
    is a\n   total of 4 keys.  Within the framework of SSH, the client does not\n
    \  have a long-term key pair that needs to be authenticated.  Therefore,\n   we
    generate an ephemeral key and use that as both the clients keys.\n   This is more
    efficient than using two different ephemeral keys, and\n   it does not adversely
    affect security (it is analogous to the one-\n   pass protocol in Section 6.1
    of [LMQSV98]).\n   A full description of the ECMQV primitive can be found in Section
    3.4\n   of [SEC1].  The algorithm for key pair generation can be found in\n   Section
    3.2.1 of [SEC1].\n   During algorithm negotiation with the SSH_MSG_KEXINIT messages,
    the\n   ECMQV key exchange method can only be chosen if a public key\n   algorithm
    supporting ECC host keys can also be chosen.  This is due\n   to the use of implicit
    server authentication in this key exchange\n   method.  This case is handled the
    same way that key exchange methods\n   requiring encryption/signature capable
    public key algorithms are\n   handled in Section 7.1 of [RFC4253].  If ECMQV key
    exchange is\n   chosen, then the public key algorithm supporting ECC host keys
    MUST\n   also be chosen.\n   ECMQV requires that all the keys used to generate
    a shared secret are\n   generated over the same elliptic curve domain parameters.
    \ Since the\n   host key is used in the generation of the shared secret, allowing
    for\n   implicit server authentication, the domain parameters associated with\n
    \  the host key are used throughout this section.\n   All elliptic curve public
    keys MUST be validated after they are\n   received.  An example of a validation
    algorithm can be found in\n   Section 3.2.2 of [SEC1].  If a key fails validation,
    the key exchange\n   MUST fail.\n   The elliptic curve ephemeral public keys (points)
    that must be\n   transmitted are encoded into octet strings before they are\n
    \  transmitted.  The transformation between elliptic curve points and\n   octet
    strings is specified in Sections 2.3.3 and 2.3.4 of [SEC1];\n   point compression
    MAY be used.  The output of shared key generation\n   is a field element xp.  The
    SSH framework requires that the shared\n   key be an integer.  The conversion
    between a field element and an\n   integer is specified in Section 2.3.9 of [SEC1].\n
    \  The following is an overview of the key exchange process:\n      Client                                                Server\n
    \     ------                                                ------\n      Generate
    ephemeral key pair.\n      SSH_MSG_KEX_ECMQV_INIT ------------->\n                                      Verify
    received key is valid.\n                                       Generate ephemeral
    key pair.\n                                             Compute shared secret.\n
    \                               Generate exchange hash and compute\n                              HMAC
    over it using the shared secret.\n                            <------------- SSH_MSG_KEX_ECMQV_REPLY\n
    \     Verify received keys are valid.\n      *Verify host key belongs to server.\n
    \     Compute shared secret.\n      Verify HMAC.\n      *  It is RECOMMENDED that
    the client verify that the host key sent\n         is the server's host key (for
    example, using a local database).\n         The client MAY accept the host key
    without verification, but\n         doing so will render the protocol insecure
    against active\n         attacks.\n   The specification of the message numbers
    SSH_MSG_ECMQV_INIT and\n   SSH_MSG_ECMQV_REPLY can be found in Section 7.\n   This
    key exchange algorithm is implemented with the following\n   messages.\n   The
    client sends:\n      byte     SSH_MSG_ECMQV_INIT\n      string   Q_C, client's
    ephemeral public key octet string\n   The server sends:\n      byte     SSH_MSG_ECMQV_REPLY\n
    \     string   K_S, server's public host key\n      string   Q_S, server's ephemeral
    public key octet string\n      string   HMAC tag computed on H using the shared
    secret\n   The hash H is formed by applying the algorithm HASH on a\n   concatenation
    of the following:\n      string   V_C, client's identification string (CR and
    LF excluded)\n      string   V_S, server's identification string (CR and LF excluded)\n
    \     string   I_C, payload of the client's SSH_MSG_KEXINIT\n      string   I_S,
    payload of the server's SSH_MSG_KEXINIT\n      string   K_S, server's public host
    key\n      string   Q_C, client's ephemeral public key octet string\n      string
    \  Q_S, server's ephemeral public key octet string\n      mpint    K,   shared
    secret\n"
  title: 5.  ECMQV Key Exchange
- contents:
  - "6.  Method Names\n   This document defines a new family of key exchange method
    names, a\n   new key exchange method name, and a new family of public key\n   algorithm
    names in the SSH name registry.\n"
  - contents:
    - "6.1.  Elliptic Curve Domain Parameter Identifiers\n   This section specifies
      identifiers encoding named elliptic curve\n   domain parameters.  These identifiers
      are used in this document to\n   identify the curve used in the SSH ECC public
      key format, the ECDSA\n   signature blob, and the ECDH method name.\n   For
      the REQUIRED elliptic curves nistp256, nistp384, and nistp521,\n   the elliptic
      curve domain parameter identifiers are the strings\n   \"nistp256\", \"nistp384\",
      and \"nistp521\".\n   For all other elliptic curves, including all other NIST
      curves and\n   all other RECOMMENDED curves, the elliptic curve domain parameter\n
      \  identifier is the ASCII period-separated decimal representation of\n   the
      Abstract Syntax Notation One (ASN.1) [ASN1] Object Identifier\n   (OID) of the
      named curve domain parameters that are associated with\n   the server's ECC
      host keys.  This identifier is defined provided that\n   the concatenation of
      the public key format identifier and the\n   elliptic curve domain parameter
      identifier (or the method name and\n   the elliptic curve domain parameter identifier)
      does not exceed the\n   maximum specified by the SSH protocol architecture [RFC4251],
      namely\n   64 characters; otherwise, the identifier for that curve is undefined,\n
      \  and the curve is not supported by this specification.\n   A list of the REQUIRED
      and RECOMMENDED curves and their OIDs can be\n   found in Section 10.\n   Note
      that implementations MUST use the string identifiers for the\n   three REQUIRED
      NIST curves, even when an OID exists for that curve.\n"
    title: 6.1.  Elliptic Curve Domain Parameter Identifiers
  - contents:
    - "6.2.  ECC Public Key Algorithm (ecdsa-sha2-*)\n   The SSH ECC public key algorithm
      is specified by a family of public\n   key format identifiers.  Each identifier
      is the concatenation of the\n   string \"ecdsa-sha2-\" with the elliptic curve
      domain parameter\n   identifier as defined in Section 6.1.  A list of the required
      and\n   recommended curves and their OIDs can be found in Section 10.\n   For
      example, the method name for ECDH key exchange with ephemeral\n   keys generated
      on the nistp256 curve is \"ecdsa-sha2-nistp256\".\n"
    - contents:
      - "6.2.1.  Elliptic Curve Digital Signature Algorithm\n   The Elliptic Curve
        Digital Signature Algorithm (ECDSA) is specified\n   for use with the SSH
        ECC public key algorithm.\n   The hashing algorithm defined by this family
        of method names is the\n   SHA2 family of hashing algorithms [FIPS-180-3].
        \ The algorithm from\n   the SHA2 family that will be used is chosen based
        on the size of the\n   named curve specified in the public key:\n                    +----------------+----------------+\n
        \                   |   Curve Size   | Hash Algorithm |\n                    +----------------+----------------+\n
        \                   |    b <= 256    |     SHA-256    |\n                    |
        \               |                |\n                    | 256 < b <= 384 |
        \    SHA-384    |\n                    |                |                |\n
        \                   |     384 < b    |     SHA-512    |\n                    +----------------+----------------+\n"
      title: 6.2.1.  Elliptic Curve Digital Signature Algorithm
    title: 6.2.  ECC Public Key Algorithm (ecdsa-sha2-*)
  - contents:
    - "6.3.  ECDH Key Exchange Method Names (ecdh-sha2-*)\n   The Elliptic Curve Diffie-Hellman
      (ECDH) key exchange is defined by a\n   family of method names.  Each method
      name is the concatenation of the\n   string \"ecdh-sha2-\" with the elliptic
      curve domain parameter\n   identifier as defined in Section 6.1.  A list of
      the required and\n   recommended curves and their OIDs can be found in Section
      10.\n   For example, the method name for ECDH key exchange with ephemeral\n
      \  keys generated on the sect409k1 curve is \"ecdh-sha2-1.3.132.0.36\".\n   The
      hashing algorithm defined by this family of method names is the\n   SHA2 family
      of hashing algorithms [FIPS-180-3].  The hashing\n   algorithm is defined in
      the method name to allow room for other\n   algorithms to be defined in future
      documents.  The algorithm from the\n   SHA2 family that will be used is chosen
      based on the size of the\n   named curve specified in the method name according
      to the table in\n   Section 6.2.1.\n   The concatenation of any so encoded ASN.1
      OID specifying a set of\n   elliptic curve domain parameters with \"ecdh-sha2-\"
      is implicitly\n   registered under this specification.\n"
    title: 6.3.  ECDH Key Exchange Method Names (ecdh-sha2-*)
  - contents:
    - "6.4.  ECMQV Key Exchange and Verification Method Name (ecmqv-sha2)\n   The
      Elliptic Curve Menezes-Qu-Vanstone (ECMQV) key exchange is\n   defined by the
      method name \"ecmqv-sha2\".  Unlike the ECDH key\n   exchange method, ECMQV
      relies on a public key algorithm that uses ECC\n   keys: it does not need a
      family of method names because the curve\n   information can be gained from
      the public key algorithm.\n   The hashing and message authentication code algorithms
      are defined by\n   the method name to allow room for other algorithms to be
      defined for\n   use with ECMQV in future documents.\n   The hashing algorithm
      defined by this method name is the SHA2 family\n   of hashing algorithms [FIPS-180-3].
      \ The algorithm from the SHA2\n   family that will be used is chosen based on
      the size of the named\n   curve specified for use with ECMQV by the chosen public
      key algorithm\n   according to the table in Section 6.2.1.\n   The keyed-hash
      message authentication code that is used to identify\n   the server and verify
      communications is based on the hash chosen\n   above.  The information on implementing
      the HMAC based on the chosen\n   hash algorithm can be found in [RFC2104].\n"
    title: 6.4.  ECMQV Key Exchange and Verification Method Name (ecmqv-sha2)
  title: 6.  Method Names
- contents:
  - "7.  Key Exchange Messages\n   The message numbers 30-49 are key-exchange-specific
    and in a private\n   namespace defined in [RFC4250] that may be redefined by any
    key\n   exchange method [RFC4253] without requiring an IANA registration\n   process.\n
    \  The following message numbers have been defined in this document:\n"
  - contents:
    - "7.1.  ECDH Message Numbers\n      #define SSH_MSG_KEX_ECDH_INIT                30\n
      \     #define SSH_MSG_KEX_ECDH_REPLY               31\n"
    title: 7.1.  ECDH Message Numbers
  - contents:
    - "7.2.  ECMQV Message Numbers\n      #define SSH_MSG_ECMQV_INIT                   30\n
      \     #define SSH_MSG_ECMQV_REPLY                  31\n"
    title: 7.2.  ECMQV Message Numbers
  title: 7.  Key Exchange Messages
- contents:
  - "8.  Manageability Considerations\n   As this document only provides new public
    key algorithms and key\n   exchange methods within the existing Secure Shell protocol\n
    \  architecture, there are few manageability considerations beyond those\n   that
    apply for existing Secure Shell implementations.  Additional\n   manageability
    considerations are listed below.\n"
  - contents:
    - "8.1.  Control of Function through Configuration and Policy\n   Section 10 specifies
      REQUIRED and RECOMMENDED elliptic curve domain\n   parameters to be used with
      the public key algorithms and key exchange\n   methods defined in this document.
      \ Implementers SHOULD allow system\n   administrators to disable some curves,
      including REQUIRED or\n   RECOMMENDED curves, to meet local security policy.\n"
    title: 8.1.  Control of Function through Configuration and Policy
  - contents:
    - "8.2.  Impact on Network Operation\n   As this document provides new functionality
      within the Secure Shell\n   protocol architecture, the only impact on network
      operations is the\n   impact on existing Secure Shell implementations.  The
      Secure Shell\n   protocol provides negotiation mechanisms for public key algorithms\n
      \  and key exchange methods: any implementations that do not recognize\n   the
      algorithms and methods defined in this document will ignore them\n   in the
      negotiation and use the next mutually supported algorithm or\n   method, causing
      no negative impact on backward compatibility.\n   The use of elliptic curve
      cryptography should not place a significant\n   computational burden on an implementing
      server.  In fact, due to its\n   smaller key sizes, elliptic curve cryptography
      can be implemented\n   more efficiently for the same security level than RSA,
      finite field\n   Diffie-Hellman, or DSA.\n"
    title: 8.2.  Impact on Network Operation
  title: 8.  Manageability Considerations
- contents:
  - "9.  Security Considerations\n   This document provides new public key algorithms
    and new key\n   agreement methods for the Secure Shell protocol.  For the most
    part,\n   the security considerations involved in using the Secure Shell\n   protocol
    apply.  Additionally, implementers should be aware of\n   security considerations
    specific to elliptic curve cryptography.\n   For all three classes of functionality
    added by this document (the\n   public key algorithms involving ECDSA, key exchange
    involving ECDH,\n   and authenticated key exchange involving ECMQV), the current
    best\n   known technique for breaking the cryptosystems is by solving the\n   elliptic
    curve discrete logarithm problem (ECDLP).\n   The difficulty of breaking the ECDLP
    depends on the size and quality\n   of the elliptic curve parameters.  Certain
    types of curves can be\n   more susceptible to known attacks than others.  For
    example, curves\n   over finite fields GF(2^m), where m is composite, may be susceptible\n
    \  to an attack based on the Weil descent.  All of the RECOMMENDED\n   curves
    in Section 10 do not have this problem.  System administrators\n   should be cautious
    when enabling curves other than the ones specified\n   in Section 10 and should
    make a more detailed investigation into the\n   security of the curve in question.\n
    \  It is believed (see, for example, Section B.2.1 of [SEC1]) that when\n   curve
    parameters are generated at random, the curves will be\n   resistant to special
    attacks, and must rely on the most general\n   attacks.  The REQUIRED curves in
    Section 10 were all generated\n   verifiably pseudorandomly.  The runtime of general
    attacks depends on\n   the algorithm used.  At present, the best known algorithm
    is the\n   Pollard-rho method.  (Shor's algorithm for quantum computers can\n
    \  solve the ECDLP in polynomial time, but at present large-scale\n   quantum
    computers have not been constructed and significant\n   experimental physics and
    engineering work needs to be done before\n   large-scale quantum computers can
    be constructed.  There is no solid\n   estimate as to when this may occur, but
    it is widely believed to be\n   at least 20 years from the present.)\n   Based
    on projections of computation power, it is possible to estimate\n   the running
    time of the best known attacks based on the size of the\n   finite field.  The
    table in Section 1 gives an estimate of the\n   equivalence between elliptic curve
    field size and symmetric key size.\n   Roughly speaking, an N-bit elliptic curve
    offers the same security as\n   an N/2-bit symmetric cipher, so a 256-bit elliptic
    curve (such as the\n   REQUIRED nistp256 curve) is suitable for use with 128-bit
    AES, for\n   example.\n   Many estimates consider that 2^80-2^90 operations are
    beyond\n   feasible, so that would suggest using elliptic curves of at least\n
    \  160-180 bits.  The REQUIRED curves in this document are 256-, 384-,\n   and
    521-bit curves; implementations SHOULD NOT use curves smaller\n   than 160 bits.\n
    \  A detailed discussion on the security considerations of elliptic\n   curve
    domain parameters and the ECDH, ECDSA, and ECMQV algorithms can\n   be found in
    Appendix B of [SEC1].\n   Additionally, the key exchange methods defined in this
    document rely\n   on the SHA2 family of hash functions, defined in [FIPS-180-3].
    \ The\n   appropriate security considerations of that document apply.  Although\n
    \  some weaknesses have been discovered in the predecessor, SHA-1, no\n   weaknesses
    in the SHA2 family are known at present.  The SHA2 family\n   consists of four
    variants -- SHA-224, SHA-256, SHA-384, and SHA-521\n   -- named after their digest
    lengths.  In the absence of special\n   purpose attacks exploiting the specific
    structure of the hash\n   function, the difficulty of finding collisions, preimages,
    and second\n   preimages for the hash function is related to the digest length.\n
    \  This document specifies in Section 6.2.1 which SHA2 variant should be\n   used
    with which elliptic curve size based on this guidance.\n   Since ECDH and ECMQV
    allow for elliptic curves of arbitrary sizes and\n   thus arbitrary security strength,
    it is important that the size of\n   elliptic curve be chosen to match the security
    strength of other\n   elements of the SSH handshake.  In particular, host key
    sizes,\n   hashing algorithms and bulk encryption algorithms must be chosen\n
    \  appropriately.  Information regarding estimated equivalence of key\n   sizes
    is available in [NIST-800-57]; the discussion in [RFC3766] is\n   also relevant.
    \ We note in particular that when ECDSA is used as the\n   signature algorithm
    and ECDH is used as the key exchange method, if\n   curves of different sizes
    are used, then it is possible that\n   different hash functions from the SHA2
    family could be used.\n   The REQUIRED and RECOMMENDED curves in this document
    are at present\n   believed to offer security at the levels indicated in this
    section\n   and as specified with the table in Section 1.\n   System administrators
    and implementers should take careful\n   consideration of the security issues
    when enabling curves other than\n   the REQUIRED or RECOMMENDED curves in this
    document.  Not all\n   elliptic curves are secure, even if they are over a large
    field.\n   Implementers SHOULD ensure that any ephemeral private keys or random\n
    \  values -- including the value k used in ECDSA signature generation\n   and
    the ephemeral private key values in ECDH and ECMQV -- are\n   generated from a
    random number generator or a properly seeded\n   pseudorandom number generator,
    are protected from leakage, are not\n   reused outside of the context of the protocol
    in this document, and\n   are erased from memory when no longer needed.\n"
  title: 9.  Security Considerations
- contents:
  - "10.  Named Elliptic Curve Domain Parameters\n   Implementations MAY support any
    ASN.1 object identifier (OID) in the\n   ASN.1 object tree that defines a set
    of elliptic curve domain\n   parameters [ASN1].\n"
  - contents:
    - "10.1.  Required Curves\n   Every SSH ECC implementation MUST support the named
      curves below.\n   These curves are defined in [SEC2]; the NIST curves were originally\n
      \  defined in [NIST-CURVES].  These curves SHOULD always be enabled\n   unless
      specifically disabled by local security policy.\n              +----------+-----------+---------------------+\n
      \             |   NIST*  |    SEC    |         OID         |\n              +----------+-----------+---------------------+\n
      \             | nistp256 | secp256r1 | 1.2.840.10045.3.1.7 |\n              |
      \         |           |                     |\n              | nistp384 | secp384r1
      |     1.3.132.0.34    |\n              |          |           |                     |\n
      \             | nistp521 | secp521r1 |     1.3.132.0.35    |\n              +----------+-----------+---------------------+\n
      \     *  For these three REQUIRED curves, the elliptic curve domain\n         parameter
      identifier is the string in the first column of the\n         table, the NIST
      name of the curve.  (See Section 6.1.)\n"
    title: 10.1.  Required Curves
  - contents:
    - "10.2.  Recommended Curves\n   It is RECOMMENDED that SSH ECC implementations
      also support the\n   following curves.  These curves are defined in [SEC2].\n
      \             +----------+-----------+---------------------+\n              |
      \  NIST   |    SEC    |         OID*        |\n              +----------+-----------+---------------------+\n
      \             | nistk163 | sect163k1 |     1.3.132.0.1     |\n              |
      \         |           |                     |\n              | nistp192 | secp192r1
      | 1.2.840.10045.3.1.1 |\n              |          |           |                     |\n
      \             | nistp224 | secp224r1 |     1.3.132.0.33    |\n              |
      \         |           |                     |\n              | nistk233 | sect233k1
      |     1.3.132.0.26    |\n              |          |           |                     |\n
      \             | nistb233 | sect233r1 |     1.3.132.0.27    |\n              |
      \         |           |                     |\n              | nistk283 | sect283k1
      |     1.3.132.0.16    |\n              |          |           |                     |\n
      \             | nistk409 | sect409k1 |     1.3.132.0.36    |\n              |
      \         |           |                     |\n              | nistb409 | sect409r1
      |     1.3.132.0.37    |\n              |          |           |                     |\n
      \             | nistt571 | sect571k1 |     1.3.132.0.38    |\n              +----------+-----------+---------------------+\n
      \     *  For these RECOMMENDED curves, the elliptic curve domain\n         parameter
      identifier is the string in the third column of the\n         table, the ASCII
      representation of the OID of the curve.  (See\n         Section 6.1.)\n"
    title: 10.2.  Recommended Curves
  title: 10.  Named Elliptic Curve Domain Parameters
- contents:
  - "11.  IANA Considerations\n   Consistent with Section 8 of [RFC4251] and Section
    4.6 of [RFC4250],\n   this document makes the following registrations:\n   In
    the Public Key Algorithm Names registry: The family of SSH public\n   key algorithm
    names beginning with \"ecdsa-sha2-\" and not containing\n   the at-sign ('@'),
    to name the public key algorithms defined in\n   Section 3.\n   In the Key Exchange
    Method Names registry: The family of SSH key\n   exchange method names beginning
    with \"ecdh-sha2-\" and not containing\n   the at-sign ('@'), to name the key
    exchange methods defined in\n   Section 4.\n   In the Key Exchange Method Names
    registry: The SSH key exchange\n   method name \"ecmqv-sha2\" to name the key
    exchange method defined in\n   Section 5.\n   This document creates no new registries.\n"
  title: 11.  IANA Considerations
- contents:
  - '12.  References

    '
  - contents:
    - "12.1.  Normative References\n   [ASN1]         International Telecommunications
      Union, \"Abstract\n                  Syntax Notation One (ASN.1): Specification
      of basic\n                  notation\",  X.680, July 2002.\n   [FIPS-180-3]
      \  National Institute of Standards and Technology,\n                  \"Secure
      Hash Standard\", FIPS 180-3, October 2008.\n   [RFC2104]      Krawczyk, H.,
      Bellare, M., and R. Canetti, \"HMAC:\n                  Keyed-Hashing for Message
      Authentication\", RFC 2104,\n                  February 1997.\n   [RFC2119]
      \     Bradner, S., \"Key words for use in RFCs to Indicate\n                  Requirement
      Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC3766]      Orman, H. and P.
      Hoffman, \"Determining Strengths For\n                  Public Keys Used For
      Exchanging Symmetric Keys\",\n                  BCP 86, RFC 3766, April 2004.\n
      \  [RFC4250]      Lehtinen, S. and C. Lonvick, \"The Secure Shell (SSH)\n                  Protocol
      Assigned Numbers\", RFC 4250, January 2006.\n   [RFC4251]      Ylonen, T. and
      C. Lonvick, \"The Secure Shell (SSH)\n                  Protocol Architecture\",
      RFC 4251, January 2006.\n   [RFC4253]      Ylonen, T. and C. Lonvick, \"The
      Secure Shell (SSH)\n                  Transport Layer Protocol\", RFC 4253,
      January 2006.\n   [SEC1]         Standards for Efficient Cryptography Group,
      \"Elliptic\n                  Curve Cryptography\", SEC 1, May 2009,\n                  <http://www.secg.org/download/aid-780/sec1-v2.pdf>.\n
      \  [SEC2]         Standards for Efficient Cryptography Group,\n                  \"Recommended
      Elliptic Curve Domain Parameters\", SEC 2,\n                  September 2000,\n
      \                 <http://www.secg.org/download/aid-386/sec2_final.pdf>.\n"
    title: 12.1.  Normative References
  - contents:
    - "12.2.  Informative References\n   [ANSI-X9.62]   American National Standards
      Institute, \"Public Key\n                  Cryptography For The Financial Services
      Industry: The\n                  Elliptic Curve Digital Signature Algorithm
      (ECDSA)\",\n                  ANSI X9.62, 1998.\n   [ANSI-X9.63]   American
      National Standards Institute, \"Public Key\n                  Cryptography For
      The Financial Services Industry: Key\n                  Agreement and Key Transport
      Using Elliptic Curve\n                  Cryptography\", ANSI X9.63, January
      1999.\n   [HMV04]        Hankerson, D., Menezes, A., and S. Vanstone, \"Guide
      to\n                  Elliptic Curve Cryptography\", Springer ISBN\n                  038795273X,
      2004.\n   [LMQSV98]      Law, L., Menezes, A., Qu, M., Solinas, J., and S.\n
      \                 Vanstone, \"An Efficient Protocol for Authenticated Key\n
      \                 Agreement\", University of Waterloo Technical Report\n                  CORR
      98-05, August 1998, <http://\n                  www.cacr.math.uwaterloo.ca/techreports/1998/\n
      \                 corr98-05.pdf>.\n   [NIST-800-57]  National Institute of Standards
      and Technology,\n                  \"Recommendation for Key Management - Part
      1: General\n                  (Revised)\", NIST Special Publication 800-57,\n
      \                 March 2007.\n   [NIST-CURVES]  National Institute of Standards
      and Technology,\n                  \"Recommended Elliptic Curves for Federal
      Government\n                  Use\", July 1999.\n"
    title: 12.2.  Informative References
  title: 12.  References
- contents:
  - "Appendix A.  Acknowledgements\n   The authors acknowledge helpful comments from
    James Blaisdell, David\n   Harrington, Alfred Hoenes, Russ Housley, Jeffrey Hutzelman,
    Kevin\n   Igoe, Rob Lambert, Jan Pechanek, Tim Polk, Sean Turner, Nicolas\n   Williams,
    and members of the ietf-ssh@netbsd.org mailing list.\n"
  title: Appendix A.  Acknowledgements
- contents:
  - "Authors' Addresses\n   Douglas Stebila\n   Queensland University of Technology\n
    \  Information Security Institute\n   Level 7, 126 Margaret St\n   Brisbane, Queensland
    \ 4000\n   Australia\n   EMail: douglas@stebila.ca\n   Jon Green\n   Queen's University\n
    \  Parallel Processing Research Laboratory\n   Department of Electrical and Computer
    Engineering\n   Room 614, Walter Light Hall\n   Kingston, Ontario  K7L 3N6\n   Canada\n
    \  EMail: jonathan.green@queensu.ca\n"
  title: Authors' Addresses
