- title: __initial_text__
  contents:
  - '                          PPP in HDLC Framing

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Point-to-Point Protocol (PPP) [1] provides a standard method\
    \ for\n   transporting multi-protocol datagrams over point-to-point links.\n \
    \  This document describes the use of HDLC for framing PPP encapsulated\n   packets.\
    \ This document is the product of the Point-to-Point Protocol\n   Working Group\
    \ of the Internet Engineering Task Force (IETF).\n   Comments should be submitted\
    \ to the ietf-ppp@ucdavis.edu mailing\n   list.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.   Introduction ..................................................2\n\
    \   1.1  Specification of Requirements .................................2\n  \
    \ 1.2  Terminology ...................................................3\n   2.\
    \   Physical Layer Requirements ...................................3\n   3.  \
    \ The Data Link Layer ...........................................4\n   3.1  Frame\
    \ Format ..................................................5\n   3.2  Modification\
    \ of the Basic Frame ...............................7\n   4.   Asynchronous HDLC\
    \ .............................................7\n   5.   Bit-synchronous HDLC\
    \ ..........................................5\n   6.   Octet-synchronous HDLC\
    \ ........................................12\n   APPENDIX A. Fast Frame Check\
    \ Sequence (FCS) Implementation .........13\n   A.1  FCS Computation Method ........................................13\n\
    \   A.2  Fast FCS table generator ......................................15\n \
    \  SECURITY CONSIDERATIONS ............................................16\n  \
    \ REFERENCES .........................................................17\n   ACKNOWLEDGEMENTS\
    \ ...................................................17\n   CHAIR'S ADDRESS ....................................................18\n\
    \   EDITOR'S ADDRESS ...................................................18\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This specification provides for framing over both bit-oriented\
    \ and\n   octet-oriented synchronous links, and asynchronous links with 8 bits\n\
    \   of data and no parity.  These links MUST be full-duplex, but MAY be\n   either\
    \ dedicated or circuit-switched.  PPP uses HDLC as a basis for\n   the framing.\n\
    \   An escape mechanism is specified to allow control data such as\n   XON/XOFF\
    \ to be transmitted transparently over the link, and to remove\n   spurious control\
    \ data which may be injected into the link by\n   intervening hardware and software.\n\
    \   Some protocols expect error free transmission, and either provide\n   error\
    \ detection only on a conditional basis, or do not provide it at\n   all.  PPP\
    \ uses the HDLC Frame Check Sequence for error detection.\n   This is commonly\
    \ available in hardware implementations, and a\n   software implementation is\
    \ provided.\n"
- title: 1.1 Specification of Requirements
  contents:
  - "1.1 Specification of Requirements\n   In this document, several words are used\
    \ to signify the requirements\n   of the specification.  These words are often\
    \ capitalized.\n    MUST\n      This word, or the adjective \"required\", means\
    \ that the definition\n      is an absolute requirement of the specification.\n\
    \    MUST NOT\n      This phrase means that the definition is an absolute prohibition\n\
    \      of the specification.\n    SHOULD\n      This word, or the adjective \"\
    recommended\", means that there may\n      exist valid reasons in particular circumstances\
    \ to ignore this\n      item, but the full implications must be understood and\
    \ carefully\n      weighed before choosing a different course.\n    MAY\n    \
    \  This word, or the adjective \"optional\", means that this item is\n      one\
    \ of an allowed set of alternatives.  An implementation which\n      does not\
    \ include this option MUST be prepared to interoperate with\n      another implementation\
    \ which does include the option.\n"
- title: 1.2 Terminology
  contents:
  - "1.2 Terminology\n   This document frequently uses the following terms:\n    datagram\n\
    \      The unit of transmission in the network layer (such as IP).  A\n      datagram\
    \ may be encapsulated in one or more packets passed to the\n      data link layer.\n\
    \    frame\n      The unit of transmission at the data link layer.  A frame may\n\
    \      include a header and/or a trailer, along with some number of units\n  \
    \    of data.\n    packet\n      The basic unit of encapsulation, which is passed\
    \ across the\n      interface between the network layer and the data link layer.\
    \  A\n      packet is usually mapped to a frame; the exceptions are when data\n\
    \      link layer fragmentation is being performed, or when multiple\n      packets\
    \ are incorporated into a single frame.\n    peer\n      The other end of the\
    \ point-to-point link.\n    silently discard\n      This means the implementation\
    \ discards the packet without further\n      processing.  The implementation SHOULD\
    \ provide the capability of\n      logging the error, including the contents of\
    \ the silently\n      discarded packet, and SHOULD record the event in a statistics\n\
    \      counter.\n"
- title: 2. Physical Layer Requirements
  contents:
  - "2. Physical Layer Requirements\n   PPP is capable of operating across most DTE/DCE\
    \ interfaces (such as,\n   EIA RS-232-C, EIA RS-422, EIA RS-423 and CCITT V.35).\
    \  The only\n   absolute requirement imposed by PPP is the provision of a full-duplex\n\
    \   circuit, either dedicated or circuit-switched, which can operate in\n   either\
    \ an asynchronous (start/stop), bit-synchronous, or octet-\n   synchronous mode,\
    \ transparent to PPP Data Link Layer frames.\n    Interface Format\n      PPP\
    \ presents an octet interface to the physical layer.  There is\n      no provision\
    \ for sub-octets to be supplied or accepted.\n    PPP does not impose any restrictions\
    \ regarding transmission rate,\n      other than that of the particular DTE/DCE\
    \ interface.\n    Control Signals\n      PPP does not require the use of control\
    \ signals, such as Request\n      To Send (RTS), Clear To Send (CTS), Data Carrier\
    \ Detect (DCD), and\n      Data Terminal Ready (DTR).\n      When available, using\
    \ such signals can allow greater functionality\n      and performance.  In particular,\
    \ such signals SHOULD be used to\n      signal the Up and Down events in the LCP\
    \ Option Negotiation\n      Automaton [1].  When such signals are not available,\
    \ the\n      implementation MUST signal the Up event to LCP upon\n      initialization,\
    \ and SHOULD NOT signal the Down event.\n      Because signalling is not required,\
    \ the physical layer MAY be\n      decoupled from the data link layer, hiding\
    \ the transient details\n      of the physical transport.  This has implications\
    \ for mobility in\n      cellular radio networks, and other rapidly switching\
    \ links.\n      When moving from cell to cell within the same zone, an\n     \
    \ implementation MAY choose to treat the entire zone as a single\n      link,\
    \ even though transmission is switched among several\n      frequencies.  The\
    \ link is considered to be with the central\n      control unit for the zone,\
    \ rather than the individual cell\n      transceivers.  However, the link SHOULD\
    \ re-establish its\n      configuration whenever the link is switched to a different\n\
    \      administration.\n      Due to the bursty nature of data traffic, some implementations\n\
    \      have choosen to disconnect the physical layer during periods of\n     \
    \ inactivity, and reconnect when traffic resumes, without informing\n      the\
    \ data link layer.  Robust implementations should avoid using\n      this trick\
    \ over-zealously, since the price for decreased setup\n      latency is decreased\
    \ security.  Implementations SHOULD signal the\n      Down event whenever \"significant\
    \ time\" has elapsed since the link\n      was disconnected.  The value for \"\
    significant time\" is a matter of\n      considerable debate, and is based on\
    \ the tariffs, call setup\n      times, and security concerns of the installation.\n"
- title: 3. The Data Link Layer
  contents:
  - "3. The Data Link Layer\n   PPP uses the principles, terminology, and frame structure\
    \ of the\n   International Organization For Standardization's (ISO) 3309-1979\n\
    \   High-level Data Link Control (HDLC) frame structure [2], as modified\n   by\
    \ \"Addendum 1: Start/stop transmission\" [3], which specifies\n   modifications\
    \ to allow HDLC use in asynchronous environments.\n   The PPP control procedures\
    \ use the definitions and Control field\n   encodings standardized in ISO 4335-1979\
    \ [4] and ISO 4335-\n   1979/Addendum 1-1979 [5].  PPP framing is also consistent\
    \ with CCITT\n   Recommendation X.25 LAPB [6], and CCITT Recommendation Q.922\
    \ [7],\n   since those are also based on HDLC.\n   The purpose of this specification\
    \ is not to document what is already\n   standardized in ISO 3309.  It is assumed\
    \ that the reader is already\n   familiar with HDLC, or has access to a copy of\
    \ [2] or [6].  Instead,\n   this document attempts to give a concise summary and\
    \ point out\n   specific options and features used by PPP.\n   To remain consistent\
    \ with standard Internet practice, and avoid\n   confusion for people used to\
    \ reading RFCs, all binary numbers in the\n   following descriptions are in Most\
    \ Significant Bit to Least\n   Significant Bit order, reading from left to right,\
    \ unless otherwise\n   indicated.  Note that this is contrary to standard ISO\
    \ and CCITT\n   practice which orders bits as transmitted (network bit order).\
    \  Keep\n   this in mind when comparing this document with the international\n\
    \   standards documents.\n"
- title: 3.1 Frame Format
  contents:
  - "3.1 Frame Format\n   A summary of the PPP HDLC frame structure is shown below.\
    \  This\n   figure does not include start/stop bits (for asynchronous links),\
    \ nor\n   any bits or octets inserted for transparency.  The fields are\n   transmitted\
    \ from left to right.\n              +----------+----------+----------+\n    \
    \          |   Flag   | Address  | Control  |\n              | 01111110 | 11111111\
    \ | 00000011 |\n              +----------+----------+----------+\n           \
    \   +----------+-------------+---------+\n              | Protocol | Information\
    \ | Padding |\n              | 16 bits  |      *      |    *    |\n          \
    \    +----------+-------------+---------+\n              +----------+----------+------------------+\n\
    \              |   FCS    |   Flag   | Inter-frame Fill |\n              | 16\
    \ bits  | 01111110 | or next Address  |\n              +----------+----------+------------------+\n\
    \   The Protocol, Information and Padding fields are described in the\n   Point-to-Point\
    \ Protocol Encapsulation [1].\n    Flag Sequence\n      The Flag Sequence indicates\
    \ the beginning or end of a frame, and\n      always consists of the binary sequence\
    \ 01111110 (hexadecimal\n      0x7e).\n      The Flag Sequence is a frame separator.\
    \  Only one Flag Sequence is\n      required between two frames.  Two consecutive\
    \ Flag Sequences\n      constitute an empty frame, which is ignored, and not counted\
    \ as a\n      FCS error.\n    Address Field\n      The Address field is a single\
    \ octet and contains the binary\n      sequence 11111111 (hexadecimal 0xff), the\
    \ All-Stations address.\n      PPP does not assign individual station addresses.\
    \  The All-\n      Stations address MUST always be recognized and received.  The\
    \ use\n      of other address lengths and values may be defined at a later\n \
    \     time, or by prior agreement.  Frames with unrecognized Addresses\n     \
    \ SHOULD be silently discarded.\n    Control Field\n      The Control field is\
    \ a single octet and contains the binary\n      sequence 00000011 (hexadecimal\
    \ 0x03), the Unnumbered Information\n      (UI) command with the P/F bit set to\
    \ zero.  The use of other\n      Control field values may be defined at a later\
    \ time, or by prior\n      agreement.  Frames with unrecognized Control field\
    \ values SHOULD\n      be silently discarded.\n    Frame Check Sequence (FCS)\
    \ Field\n      The Frame Check Sequence field is normally 16 bits (two octets).\n\
    \      The use of other FCS lengths may be defined at a later time, or by\n  \
    \    prior agreement.  The FCS is transmitted with the coefficient of\n      the\
    \ highest term first.\n      The FCS field is calculated over all bits of the\
    \ Address, Control,\n      Protocol, Information and Padding fields, not including\
    \ any start\n      and stop bits (asynchronous) nor any bits (synchronous) or\
    \ octets\n      (asynchronous or synchronous) inserted for transparency.  This\n\
    \      also does not include the Flag Sequences nor the FCS field itself.\n  \
    \       Note: When octets are received which are flagged in the Async-\n     \
    \    Control-Character-Map, they are discarded before calculating\n         the\
    \ FCS.\n         For more information on the specification of the FCS, see ISO\n\
    \         3309 [2] or CCITT X.25 [6].\n   The end of the Information and Padding\
    \ fields is found by locating\n   the closing Flag Sequence and removing the Frame\
    \ Check Sequence\n   field.\n"
- title: 3.2.  Modification of the Basic Frame
  contents:
  - "3.2.  Modification of the Basic Frame\n   The Link Control Protocol can negotiate\
    \ modifications to the basic\n   HDLC frame structure.  However, modified frames\
    \ will always be\n   clearly distinguishable from standard frames.\n    Address-and-Control-Field-Compression\n\
    \      When using the default HDLC framing, the Address and Control\n      fields\
    \ contain the hexadecimal values 0xff and 0x03 respectively.\n      On transmission,\
    \ compressed Address and Control fields are formed\n      by simply omitting them.\n\
    \      On reception, the Address and Control fields are decompressed by\n    \
    \  examining the first two octets.  If they contain the values 0xff\n      and\
    \ 0x03, they are assumed to be the Address and Control fields.\n      If not,\
    \ it is assumed that the fields were compressed and were not\n      transmitted.\n\
    \      By definition, the first octet of a two octet Protocol field will\n   \
    \   never be 0xff (since it is not even).  The Protocol field value\n      0x00ff\
    \ is not allowed (reserved) to avoid ambiguity when\n      Protocol-Field-Compression\
    \ is enabled and the first Information\n      field octet is 0x03.\n      When\
    \ other Address or Control field values are in use, Address-\n      and-Control-Field-Compression\
    \ MUST NOT be negotiated.\n"
- title: 4.  Asynchronous HDLC
  contents:
  - "4.  Asynchronous HDLC\n   This section summarizes the use of HDLC with 8-bit\
    \ asynchronous\n   links.\n    Flag Sequence\n      The Flag Sequence indicates\
    \ the beginning or end of a frame.  The\n      octet stream is examined on an\
    \ octet-by-octet basis for the value\n      01111110 (hexadecimal 0x7e).\n   \
    \ Transparency\n      An octet stuffing procedure is used.  The Control Escape\
    \ octet is\n      defined as binary 01111101 (hexadecimal 0x7d) where the bit\n\
    \      positions are numbered 87654321 (not 76543210, BEWARE).\n      Each end\
    \ of the link maintains two Async-Control-Character-Maps.\n      The receiving\
    \ ACCM is 32 bits, but the sending ACCM may be up to\n      256 bits.  This results\
    \ in four distinct ACCMs, two in each\n      direction of the link.\n      The\
    \ default receiving ACCM is 0xffffffff.  The default sending\n      ACCM is 0xffffffff,\
    \ plus the Control Escape and Flag Sequence\n      characters themselves, plus\
    \ whatever other outgoing characters are\n      known to be intercepted.\n   \
    \   After FCS computation, the transmitter examines the entire frame\n      between\
    \ the two Flag Sequences.  Each Flag Sequence, Control\n      Escape octet, and\
    \ octet with value less than hexadecimal 0x20\n      which is flagged in the sending\
    \ Async-Control-Character-Map, is\n      replaced by a two octet sequence consisting\
    \ of the Control Escape\n      octet and the original octet with bit 6 complemented\
    \ (exclusive-\n      or'd with hexadecimal 0x20).\n      Prior to FCS computation,\
    \ the receiver examines the entire frame\n      between the two Flag Sequences.\
    \  Each octet with value less than\n      hexadecimal 0x20 is checked.  If it\
    \ is flagged in the receiving\n      Async-Control-Character-Map, it is simply\
    \ removed (it may have\n      been inserted by intervening data communications\
    \ equipment).  For\n      each Control Escape octet, that octet is also removed,\
    \ but bit 6\n      of the following octet is complemented, unless it is the Flag\n\
    \      Sequence.\n         Note: The inclusion of all octets less than hexadecimal\
    \ 0x20\n         allows all ASCII control characters [8] excluding DEL (Delete)\n\
    \         to be transparently communicated through all known data\n         communications\
    \ equipment.\n      The transmitter may also send octets with value in the range\
    \ 0x40\n      through 0xff (except 0x5e) in Control Escape format.  Since these\n\
    \      octet values are not negotiable, this does not solve the problem\n    \
    \  of receivers which cannot handle all non-control characters.\n      Also, since\
    \ the technique does not affect the 8th bit, this does\n      not solve problems\
    \ for communications links that can send only 7-\n      bit characters.\n    \
    \  A few examples may make this more clear.  Packet data is\n      transmitted\
    \ on the link as follows:\n         0x7e is encoded as 0x7d, 0x5e.  0x7d is encoded\
    \ as 0x7d, 0x5d.\n         0x01 is encoded as 0x7d, 0x21.\n      Some modems with\
    \ software flow control may intercept outgoing DC1\n      and DC3 ignoring the\
    \ 8th (parity) bit.  This data would be\n      transmitted on the link as follows:\n\
    \         0x11 is encoded as 0x7d, 0x31.  0x13 is encoded as 0x7d, 0x33.\n   \
    \      0x91 is encoded as 0x7d, 0xb1.  0x93 is encoded as 0x7d, 0xb3.\n    Aborting\
    \ a Transmission\n      On asynchronous links, frames may be aborted by transmitting\
    \ a \"0\"\n      stop bit where a \"1\" bit is expected (framing error) or by\n\
    \      transmitting a Control Escape octet followed immediately by a\n      closing\
    \ Flag Sequence.\n    Time Fill\n      For asynchronous links, inter-octet and\
    \ inter-frame time fill MUST\n      be accomplished by transmitting continuous\
    \ \"1\" bits (mark-hold\n      state).\n      Inter-frame time fill can be viewed\
    \ as extended inter-octet time\n      fill.  Doing so can save one octet for every\
    \ frame, decreasing\n      delay and increasing bandwidth.  This is possible since\
    \ a Flag\n      Sequence may serve as both a frame close and a frame begin.  After\n\
    \      having received any frame, an idle receiver will always be in a\n     \
    \ frame begin state.\n      Robust transmitters should avoid using this trick\
    \ over-zealously,\n      since the price for decreased delay is decreased reliability.\n\
    \      Noisy links may cause the receiver to receive garbage characters\n    \
    \  and interpret them as part of an incoming frame.  If the\n      transmitter\
    \ does not send a new opening Flag Sequence before\n      sending the next frame,\
    \ then that frame will be appended to the\n      noise characters causing an invalid\
    \ frame (with high reliability).\n      It is suggested that implementations will\
    \ achieve the best results\n      by always sending an opening Flag Sequence if\
    \ the new frame is not\n      back-to-back with the last.  Transmitters SHOULD\
    \ send an open Flag\n      Sequence whenever \"appreciable time\" has elapsed\
    \ after the prior\n      closing Flag Sequence.  The maximum value for \"appreciable\
    \ time\"\n      is likely to be no greater than the typing rate of a slow typist,\n\
    \      say 1 second.\n    Encoding\n      All octets are transmitted with one\
    \ start bit, eight bits of data,\n      and one stop bit.  There is no provision\
    \ for seven bit\n      asynchronous links.\n"
- title: 5. Bit-synchronous HDLC
  contents:
  - "5. Bit-synchronous HDLC\n   This section summarizes the use of HDLC with bit-synchronous\
    \ links.\n    Flag Sequence\n      The Flag Sequence indicates the beginning or\
    \ end of a frame, and\n      is used for frame synchronization.  The bit stream\
    \ is examined on\n      a bit-by-bit basis for the binary sequence 01111110 (hexadecimal\n\
    \      0x7e).\n      The \"shared zero mode\" Flag Sequence \"011111101111110\"\
    \ SHOULD NOT\n      be used.  When not avoidable, such an implementation MUST\
    \ ensure\n      that the first Flag Sequence detected (the end of the frame) is\n\
    \      promptly communicated to the link layer.  Use of the shared zero\n    \
    \  mode hinders interoperability with synchronous-to-asynchronous\n      converters.\n\
    \    Transparency\n      The transmitter examines the entire frame between the\
    \ two Flag\n      Sequences.  A \"0\" bit is inserted after all sequences of five\n\
    \      contiguous \"1\" bits (including the last 5 bits of the FCS) to\n     \
    \ ensure that a Flag Sequence is not simulated.\n      When receiving, any \"\
    0\" bit that directly follows five contiguous\n      \"1\" bits is discarded.\n\
    \      Since the Control Escape octet-stuffing method is not used, the\n     \
    \ default receiving and sending Async-Control-Character-Maps are 0.\n      There\
    \ may be some use of synchronous-to-asynchronous converters\n      (some built\
    \ into modems) in point-to-point links resulting in a\n      synchronous PPP implementation\
    \ on one end of a link and an\n      asynchronous implementation on the other.\
    \  It is the\n      responsibility of the converter to do all mapping conversions\n\
    \      during operation.\n      To enable this functionality, bit-synchronous\
    \ PPP implementations\n      MUST always respond to the Async-Control-Character-Map\n\
    \      Configuration Option with an LCP Configure-Ack.  However,\n      acceptance\
    \ of the Configuration Option does not imply that the\n      bit-synchronous implementation\
    \ will do any octet mapping.\n      Instead, all such octet mapping will be performed\
    \ by the\n      asynchronous-to-synchronous converter.\n    Aborting a Transmission\n\
    \      A sequence of more than six \"1\" bits indicates an invalid frame,\n  \
    \    which is ignored, and not counted as a FCS error.\n    Inter-frame Time Fill\n\
    \      For bit-synchronous links, the Flag Sequence SHOULD be transmitted\n  \
    \    during inter-frame time fill.  There is no provision for inter-\n      octet\
    \ time fill.\n      Mark idle (continuous ones) SHOULD NOT be used for inter-frame\n\
    \      ill.  However, certain types of circuit-switched links require the\n  \
    \    use of mark idle, particularly those that calculate accounting\n      based\
    \ on periods of bit activity.  When mark idle is used on a\n      bit-synchronous\
    \ link, the implementation MUST ensure at least 15\n      consecutive \"1\" bits\
    \ between Flags during the idle period, and\n      that the Flag Sequence is always\
    \ generated at the beginning of a\n      frame after an idle period.\n    Encoding\n\
    \      The definition of various encodings and scrambling is the\n      responsibility\
    \ of the DTE/DCE equipment in use, and is outside the\n      scope of this specification.\n\
    \      While PPP will operate without regard to the underlying\n      representation\
    \ of the bit stream, lack of standards for\n      transmission will hinder interoperability\
    \ as surely as lack of\n      data link standards.  At speeds of 56 Kbps through\
    \ 2.0 Mbps, NRZ\n      is currently most widely available, and on that basis is\n\
    \      recommended as a default.\n      When configuration of the encoding is\
    \ allowed, NRZI is recommended\n      as an alternative, because of its relative\
    \ immunity to signal\n      inversion configuration errors, and instances when\
    \ it MAY allow\n      connection without an expensive DSU/CSU.  Unfortunately,\
    \ NRZI\n      encoding obviates the (1 + x) factor of the 16-bit FCS, so that\n\
    \      one error in 2**15 goes undetected (instead of one in 2**16), and\n   \
    \   triple errors are not detected.  Therefore, when NRZI is in use,\n      it\
    \ is recommended that the 32-bit FCS be negotiated, which does\n      not include\
    \ the (1 + x) factor.\n      At higher speeds of up to 45 Mbps, some implementors\
    \ have chosen\n      the ANSI High Speed Synchronous Interface [HSSI].  While\
    \ this\n      experience is currently limited, implementors are encouraged to\n\
    \      cooperate in choosing transmission encoding.\n"
- title: 6.  Octet-synchronous HDLC
  contents:
  - "6.  Octet-synchronous HDLC\n   This section summarizes the use of HDLC with octet-synchronous\
    \ links,\n   such as SONET and optionally ISDN B or H channels.\n   Although the\
    \ bit rate is synchronous, there is no bit-stuffing.\n   Instead, the octet-stuffing\
    \ feature of 8-bit asynchronous HDLC is\n   used.\n    Flag Sequence\n      The\
    \ Flag Sequence indicates the beginning or end of a frame.  The\n      octet stream\
    \ is examined on an octet-by-octet basis for the value\n      01111110 (hexadecimal\
    \ 0x7e).\n    Transparency\n      An octet stuffing procedure is used.  The Control\
    \ Escape octet is\n      defined as binary 01111101 (hexadecimal 0x7d).\n    \
    \  The octet stuffing procedure is described in \"Asynchronous HDLC\"\n      above.\n\
    \      The sending and receiving implementations need escape only the\n      Flag\
    \ Sequence and Control Escape octets.\n      Considerations concerning the use\
    \ of converters are described in\n      \"Bit-synchronous HDLC\" above.\n    Aborting\
    \ a Transmission\n      Frames may be aborted by transmitting a Control Escape\
    \ octet\n      followed immediately by a closing Flag Sequence.  The preceding\n\
    \      frame is ignored, and not counted as a FCS error.\n    Inter-frame Time\
    \ Fill\n      The Flag Sequence MUST be transmitted during inter-frame time\n\
    \      fill.  There is no provision for inter-octet time fill.\n    Encoding\n\
    \      The definition of various encodings and scrambling is the\n      responsibility\
    \ of the DTE/DCE equipment in use, and is outside the\n      scope of this specification.\n"
- title: A.  Fast Frame Check Sequence (FCS) Implementation
  contents:
  - "A.  Fast Frame Check Sequence (FCS) Implementation\n   The FCS was originally\
    \ designed with hardware implementations in\n   mind.  A serial bit stream is\
    \ transmitted on the wire, the FCS is\n   calculated over the serial data as it\
    \ goes out, and the complement of\n   the resulting FCS is appended to the serial\
    \ stream, followed by the\n   Flag Sequence.\n   The receiver has no way of determining\
    \ that it has finished\n   calculating the received FCS until it detects the Flag\
    \ Sequence.\n   Therefore, the FCS was designed so that a particular pattern results\n\
    \   when the FCS operation passes over the complemented FCS.  A good\n   frame\
    \ is indicated by this \"good FCS\" value.\n"
- title: A.1 FCS Computation Method
  contents:
  - "A.1 FCS Computation Method\n   The following code provides a table lookup computation\
    \ for\n   calculating the Frame Check Sequence as data arrives at the\n   interface.\
    \  This implementation is based on [9], [10], and [11].  The\n   table is created\
    \ by the code in section B.2.\n"
- title: /*
  contents:
  - "/*\n * u16 represents an unsigned 16-bit number.  Adjust the typedef for\n *\
    \ your hardware.\n */\n"
- title: typedef unsigned short u16;
  contents:
  - 'typedef unsigned short u16;

    '
- title: /*
  contents:
  - "/*\n * FCS lookup table as calculated by the table generator in section B.2\n\
    \ */\n"
- title: static u16 fcstab[256] = {
  contents:
  - "static u16 fcstab[256] = {\n   0x0000, 0x1189, 0x2312, 0x329b, 0x4624, 0x57ad,\
    \ 0x6536, 0x74bf,\n   0x8c48, 0x9dc1, 0xaf5a, 0xbed3, 0xca6c, 0xdbe5, 0xe97e,\
    \ 0xf8f7,\n   0x1081, 0x0108, 0x3393, 0x221a, 0x56a5, 0x472c, 0x75b7, 0x643e,\n\
    \   0x9cc9, 0x8d40, 0xbfdb, 0xae52, 0xdaed, 0xcb64, 0xf9ff, 0xe876,\n   0x2102,\
    \ 0x308b, 0x0210, 0x1399, 0x6726, 0x76af, 0x4434, 0x55bd,\n   0xad4a, 0xbcc3,\
    \ 0x8e58, 0x9fd1, 0xeb6e, 0xfae7, 0xc87c, 0xd9f5,\n   0x3183, 0x200a, 0x1291,\
    \ 0x0318, 0x77a7, 0x662e, 0x54b5, 0x453c,\n   0xbdcb, 0xac42, 0x9ed9, 0x8f50,\
    \ 0xfbef, 0xea66, 0xd8fd, 0xc974,\n   0x4204, 0x538d, 0x6116, 0x709f, 0x0420,\
    \ 0x15a9, 0x2732, 0x36bb,\n   0xce4c, 0xdfc5, 0xed5e, 0xfcd7, 0x8868, 0x99e1,\
    \ 0xab7a, 0xbaf3,\n   0x5285, 0x430c, 0x7197, 0x601e, 0x14a1, 0x0528, 0x37b3,\
    \ 0x263a,\n   0xdecd, 0xcf44, 0xfddf, 0xec56, 0x98e9, 0x8960, 0xbbfb, 0xaa72,\n\
    \   0x6306, 0x728f, 0x4014, 0x519d, 0x2522, 0x34ab, 0x0630, 0x17b9,\n   0xef4e,\
    \ 0xfec7, 0xcc5c, 0xddd5, 0xa96a, 0xb8e3, 0x8a78, 0x9bf1,\n   0x7387, 0x620e,\
    \ 0x5095, 0x411c, 0x35a3, 0x242a, 0x16b1, 0x0738,\n   0xffcf, 0xee46, 0xdcdd,\
    \ 0xcd54, 0xb9eb, 0xa862, 0x9af9, 0x8b70,\n   0x8408, 0x9581, 0xa71a, 0xb693,\
    \ 0xc22c, 0xd3a5, 0xe13e, 0xf0b7,\n   0x0840, 0x19c9, 0x2b52, 0x3adb, 0x4e64,\
    \ 0x5fed, 0x6d76, 0x7cff,\n   0x9489, 0x8500, 0xb79b, 0xa612, 0xd2ad, 0xc324,\
    \ 0xf1bf, 0xe036,\n   0x18c1, 0x0948, 0x3bd3, 0x2a5a, 0x5ee5, 0x4f6c, 0x7df7,\
    \ 0x6c7e,\n   0xa50a, 0xb483, 0x8618, 0x9791, 0xe32e, 0xf2a7, 0xc03c, 0xd1b5,\n\
    \   0x2942, 0x38cb, 0x0a50, 0x1bd9, 0x6f66, 0x7eef, 0x4c74, 0x5dfd,\n   0xb58b,\
    \ 0xa402, 0x9699, 0x8710, 0xf3af, 0xe226, 0xd0bd, 0xc134,\n   0x39c3, 0x284a,\
    \ 0x1ad1, 0x0b58, 0x7fe7, 0x6e6e, 0x5cf5, 0x4d7c,\n   0xc60c, 0xd785, 0xe51e,\
    \ 0xf497, 0x8028, 0x91a1, 0xa33a, 0xb2b3,\n   0x4a44, 0x5bcd, 0x6956, 0x78df,\
    \ 0x0c60, 0x1de9, 0x2f72, 0x3efb,\n   0xd68d, 0xc704, 0xf59f, 0xe416, 0x90a9,\
    \ 0x8120, 0xb3bb, 0xa232,\n   0x5ac5, 0x4b4c, 0x79d7, 0x685e, 0x1ce1, 0x0d68,\
    \ 0x3ff3, 0x2e7a,\n   0xe70e, 0xf687, 0xc41c, 0xd595, 0xa12a, 0xb0a3, 0x8238,\
    \ 0x93b1,\n   0x6b46, 0x7acf, 0x4854, 0x59dd, 0x2d62, 0x3ceb, 0x0e70, 0x1ff9,\n\
    \   0xf78f, 0xe606, 0xd49d, 0xc514, 0xb1ab, 0xa022, 0x92b9, 0x8330,\n   0x7bc7,\
    \ 0x6a4e, 0x58d5, 0x495c, 0x3de3, 0x2c6a, 0x1ef1, 0x0f78\n   };\n"
- title: '#define PPPINITFCS16    0xffff  /* Initial FCS value */'
  contents:
  - '#define PPPINITFCS16    0xffff  /* Initial FCS value */

    '
- title: '#define PPPGOODFCS16    0xf0b8  /* Good final FCS value */'
  contents:
  - '#define PPPGOODFCS16    0xf0b8  /* Good final FCS value */

    '
- title: /*
  contents:
  - "/*\n * Calculate a new fcs given the current fcs and the new data.\n */\n"
- title: u16 pppfcs16(fcs, cp, len)
  contents:
  - "u16 pppfcs16(fcs, cp, len)\n    register u16 fcs;\n    register unsigned char\
    \ *cp;\n    register int len;\n"
- title: '{'
  contents:
  - "{\n    ASSERT(sizeof (u16) == 2);\n    ASSERT(((u16) -1) > 0);\n    while (len--)\n\
    \        fcs = (fcs >> 8) ^ fcstab[(fcs ^ *cp++) & 0xff];\n    return (fcs);\n"
- title: '}'
  contents:
  - '}

    '
- title: /*
  contents:
  - "/*\n * How to use the fcs\n */\n"
- title: tryfcs16(cp, len)
  contents:
  - "tryfcs16(cp, len)\n    register unsigned char *cp;\n    register int len;\n"
- title: '{'
  contents:
  - "{\n    u16 trialfcs;\n    /* add on output */\n    trialfcs = pppfcs16( PPPINITFCS16,\
    \ cp, len );\n    trialfcs ^= 0xffff;             /* complement */\n    cp[len]\
    \ = (trialfcs & 0x00ff);  /* least significant byte first */\n    cp[len+1] =\
    \ ((trialfcs >> 8) & 0x00ff);\n    /* check on input */\n    trialfcs = pppfcs16(\
    \ PPPINITFCS16, cp, len + 2 );\n    if ( trialfcs == PPPGOODFCS16 )\n        printf(\"\
    Good FCS0);\n"
- title: '}'
  contents:
  - '}

    '
- title: A.2.  Fast FCS table generator
  contents:
  - 'A.2.  Fast FCS table generator

    '
- title: The following code creates the lookup table used to calculate the FCS.
  contents:
  - 'The following code creates the lookup table used to calculate the FCS.

    '
- title: /*
  contents:
  - "/*\n * Generate a FCS table for the HDLC FCS.\n *\n * Drew D. Perkins at Carnegie\
    \ Mellon University.\n *\n * Code liberally borrowed from Mohsen Banan and D.\
    \ Hugh Redelmeier.\n */\n"
- title: /*
  contents:
  - "/*\n * The HDLC polynomial: x**0 + x**5 + x**12 + x**16 (0x8408).\n */\n"
- title: '#define P       0x8408'
  contents:
  - '#define P       0x8408

    '
- title: main()
  contents:
  - 'main()

    '
- title: '{'
  contents:
  - "{\n    register unsigned int b, v;\n    register int i;\n    printf(\"typedef\
    \ unsigned short u16;0);\n    printf(\"static u16 fcstab[256] = {\");\n    for\
    \ (b = 0; ; ) {\n        if (b % 8 == 0)\n            printf(\"0);\n        v\
    \ = b;\n        for (i = 8; i--; )\n            v = v & 1 ? (v >> 1) ^ P : v >>\
    \ 1;\n        printf(\"0x%04x\", v & 0xFFFF);\n        if (++b == 256)\n     \
    \       break;\n        printf(\",\");\n    }\n    printf(\"0;0);\n"
- title: '}'
  contents:
  - '}

    '
- title: Security Considerations
  contents:
  - "Security Considerations\n   As noted in the Physical Layer Requirements section,\
    \ the link layer\n   might not be informed when the connected state of physical\
    \ layer is\n   changed.  This results in possible security lapses due to over-\n\
    \   reliance on the integrity and security of switching systems and\n   administrations.\
    \  An insertion attack might be undetected.  An\n   attacker which is able to\
    \ spoof the same calling identity might be\n   able to avoid link authentication.\n"
- title: References
  contents:
  - "References\n   [1]  Simpson, W., Editor, \"The Point-to-Point Protocol (PPP)\"\
    ,\n        RFC 1548, December 1993\n   [2]  International Organization For Standardization,\
    \ ISO Standard\n        3309-1979, \"Data communication - High-level data link\
    \ control\n        procedures - Frame structure\", 1979.\n   [3]  International\
    \ Organization For Standardization, Proposed Draft\n        International Standard\
    \ ISO 3309-1991/PDAD1, \"Information\n        processing systems - Data communication\
    \ - High-level data link\n        control procedures - Frame structure - Addendum\
    \ 1: Start/stop\n        transmission\", 1991.\n   [4]  International Organization\
    \ For Standardization, ISO Standard\n        4335-1979, \"Data communication -\
    \ High-level data link control\n        procedures - Elements of procedures\"\
    , 1979.\n   [5]  International Organization For Standardization, ISO Standard\n\
    \        4335-1979/Addendum 1, \"Data communication - High-level data\n      \
    \  link control procedures - Elements of procedures - Addendum 1\",\n        1979.\n\
    \   [6]  International Telecommunication Union, CCITT Recommendation\n       \
    \ X.25, \"Interface Between Data Terminal Equipment (DTE) and Data\n        Circuit\
    \ Terminating Equipment (DCE) for Terminals Operating in\n        the Packet Mode\
    \ on Public Data Networks\", CCITT Red Book,\n        Volume VIII, Fascicle VIII.3,\
    \ Rec. X.25., October 1984.\n   [7]  International Telegraph and Telephone Consultative\
    \ Committee,\n        CCITT Recommendation Q.922, \"ISDN Data Link Layer Specification\n\
    \        for Frame Mode Bearer Services\", April 1991.\n   [8]  American National\
    \ Standards Institute, ANSI X3.4-1977,\n        \"American National Standard Code\
    \ for Information Interchange\",\n        1977.\n   [9]  Perez, \"Byte-wise CRC\
    \ Calculations\", IEEE Micro, June, 1983.\n   [10] Morse, G., \"Calculating CRC's\
    \ by Bits and Bytes\", Byte,\n        September 1986.\n   [11] LeVan, J., \"A\
    \ Fast CRC\", Byte, November 1987.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   This specification is based on previous RFCs, where many\n\
    \   contributions have been acknowleged.\n   Additional implementation detail\
    \ for this version was provided by\n   Fred Baker (ACC), Craig Fox (NSC), and\
    \ Phil Karn (Qualcomm).\n   Special thanks to Morning Star Technologies for providing\
    \ computing\n   resources and network access support for writing this specification.\n"
- title: Chair's Address
  contents:
  - "Chair's Address\n   The working group can be contacted via the current chair:\n\
    \      Fred Baker\n      Advanced Computer Communications\n      315 Bollay Drive\n\
    \      Santa Barbara, California, 93111\n      EMail: fbaker@acc.com\n"
- title: Editor's Address
  contents:
  - "Editor's Address\n   Questions about this memo can also be directed to:\n   \
    \   William Allen Simpson\n      Daydreamer\n      Computer Systems Consulting\
    \ Services\n      1384 Fontaine\n      Madison Heights, Michigan  48071\n    \
    \  EMail: Bill.Simpson@um.cc.umich.edu\n"
