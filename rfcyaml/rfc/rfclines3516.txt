Abstract This memo defines the Binary extension to the Internet Message Access Protocol (IMAP4).
It provides a mechanism for IMAP4 clients and servers to exchange message body data without using a MIME content  transfer encoding.
Conventions Used in this Document
The key words "MUST", "MUST NOT", "SHOULD", "SHOULD NOT", and "MAY" in this document are to be interpreted as described in [KEYWORD].
The abbreviation "CTE" means content transfer encoding.
The MIME extensions to Internet messaging allow for the transmission of non textual (binary) message content [MIME IMB].
Since the traditional transports for messaging are not always capable of passing binary data transparently, MIME provides encoding schemes that allow binary content to be transmitted over transports that are not otherwise able to do so.
The overhead of MIME encoding this content can be considerable in some contexts (e.g., slow radio links, streaming multimedia).
Reducing the overhead associated with CTE schemes such as base64 can give a noticeable reduction in resource consumption.
The Binary extension lets the server perform CTE decoding prior to transmitting message data to the client.
Every IMAP4 body section has a MIME content transfer encoding.
(Those without an explicit Content Transfer Encoding header are implicitly labeled as "7bit" content.)
In the terminology of [MIME  IMB], the CTE specifies both a decoding algorithm and the domain of the decoded data.
In this memo, "decoding" refers to the CTE decoding step described in [MIME IMB].
Certain CTEs use an identity encoding transformation.
For these CTEs there is no decoding required, however the domain of the underlying data may not be expressible in the IMAP4 protocol (e.g., MIME "binary" content containing NUL octets).
To accommodate these cases the Binary extension introduces a new type of literal protocol element that is fully eight bit transparent.
Thus, server  processing of the FETCH BINARY command involves two logical steps: 1)  perform any CTE related decoding 2)
determine the domain of the decoded data Step 2 is necessary to determine which protocol element should be used to transmit the decoded data.
(See FETCH Response Extensions for further details.)
Framework for the IMAP4 Binary Extension
This memo defines the following extensions to [IMAP4rev1].
CAPABILITY Identification IMAP4 servers that support this extension MUST include "BINARY" in the response list to the CAPABILITY command.
This extension defines three new FETCH command data items.
BINARY<section binary>[<partial>] Requests that the specified section be transmitted after performing CTE related decoding.
The <partial> argument, if present, requests that a subset of the data be returned.
The semantics of a partial FETCH BINARY command are the same as for a partial FETCH BODY command, with the exception that the <partial> arguments refer to the DECODED section data.
An alternate form of FETCH BINARY that does not implicitly set the \Seen flag.
> Requests the decoded size of the section (i.e., the size to expect in response to the corresponding FETCH BINARY request).
: client authors are cautioned that this might be an expensive operation for some server implementations.
Needlessly issuing this request could result in degraded performance due to servers having to calculate the value every time the request is issued.
This extension defines two new FETCH response data items.
expressing the content of the specified section after removing any CTE related encoding.
If <number> is present it refers to the offset within the DECODED section data.
If the domain of the decoded data is "8bit" and the data does not contain the NUL octet
, the server SHOULD return the data in a <string> instead of a <literal8>; this allows the client to determine if the "8bit" data contains the NUL octet without having to explicitly scan the data stream for for NULs.
If the server does not know how to decode the section's CTE, it MUST fail the request and issue a "NO" response that contains the "UNKNOWN CTE" extended response code.
The size of the section after removing any CTE related encoding.
The value returned MUST match the size of the <nstring> or <literal8>
that will be returned by the corresponding FETCH BINARY request.
If the server does not know how to decode the section's CTE, it MUST fail the request and issue a "NO" response that contains the "UNKNOWN CTE" extended response code.
The APPEND command is extended to allow the client to append data containing NULs by using the <literal8
The server MAY modify the CTE of the appended data, however any such transformation MUST NOT result in a loss of data.
If the destination mailbox does not support the storage of binary content, the server MUST fail the request and issue a "NO" response that contains the "UNKNOWN CTE" extended response code.
MIME Encoded Headers [MIME MHE] defines an encoding that allows for non US ASCII text in message headers.
This encoding is not the same as the content  transfer encoding applied to message bodies, and the decoding transformations described in this memo do not apply to [MIME MHE] encoded header text.
A server MUST NOT perform any conversion of [MIME MHE] encoded header text in response to any binary FETCH or APPEND request.
Implementation Considerations Messaging clients and servers have been notoriously lax in their adherence to the Internet CRLF convention for terminating lines of textual data in Internet protocols.
When sending data using the Binary extension, servers MUST ensure that textual line oriented sections are always transmitted using the IMAP4 CRLF line termination syntax, regardless of the underlying storage representation of the data on the server.
A server may choose to store message body binary content in a non  encoded format.
Regardless of the internal storage representation used, the server MUST issue BODYSTRUCTURE responses that describe the message as though the binary encoded sections are encoded in a CTE acceptable to the IMAP4 base specification.
Furthermore, the results of a FETCH BODY MUST return the message body content in the format described by the corresponding FETCH BODYSTRUCTURE response.
While the server is allowed to modify the CTE of APPENDed <literal8
> data, this should only be done when it is absolutely necessary.
Gratuitous encoding changes will render useless most cryptographic operations that have been performed on the message.
This extension provides an optimization that is useful in certain specific situations.
It does not absolve clients from providing basic functionality (content transfer decoding) that should be available in all messaging clients.
Clients supporting this extension SHOULD be prepared to perform their own CTE decoding operations.
The following syntax specification uses the augmented Backus Naur Form (ABNF) notation as used in [ABNF], and incorporates by reference the Core Rules defined in that document.
This syntax augments the grammar specified in [IMAP4rev1].
<number> represents the number of OCTETs ; in the response string.
