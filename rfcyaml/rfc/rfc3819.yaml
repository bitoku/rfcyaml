- title: __initial_text__
  contents:
  - '                Advice for Internet Subnetwork Designers

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet Best Current Practices\
    \ for the\n   Internet Community, and requests discussion and suggestions for\n\
    \   improvements.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document provides advice to the designers of digital\n   communication\
    \ equipment, link-layer protocols, and packet-switched\n   local networks (collectively\
    \ referred to as subnetworks), who wish to\n   support the Internet protocols\
    \ but may be unfamiliar with the\n   Internet architecture and the implications\
    \ of their design choices on\n   the performance and efficiency of the Internet.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction and Overview. . . . . . . . . . . . .\
    \ . . . . . .  2\n   2.  Maximum Transmission Units (MTUs) and IP Fragmentation\
    \ . . . .  4\n       2.1.  Choosing the MTU in Slow Networks. . . . . . . . .\
    \ . . .  6\n   3.  Framing on Connection-Oriented Subnetworks . . . . . . . .\
    \ . .  7\n   4.  Connection-Oriented Subnetworks. . . . . . . . . . . . . . .\
    \ .  9\n   5.  Broadcasting and Discovery . . . . . . . . . . . . . . . . . .\
    \ 10\n   6.  Multicasting . . . . . . . . . . . . . . . . . . . . . . . . . 11\n\
    \   7.  Bandwidth on Demand (BoD) Subnets. . . . . . . . . . . . . . . 13\n  \
    \ 8.  Reliability and Error Control. . . . . . . . . . . . . . . . . 14\n    \
    \   8.1.  TCP vs Link-Layer Retransmission . . . . . . . . . . . . 14\n      \
    \ 8.2.  Recovery from Subnetwork Outages . . . . . . . . . . . . 17\n       8.3.\
    \  CRCs, Checksums and Error Detection. . . . . . . . . . . 18\n       8.4.  How\
    \ TCP Works. . . . . . . . . . . . . . . . . . . . . . 20\n       8.5.  TCP Performance\
    \ Characteristics. . . . . . . . . . . . . 22\n             8.5.1.  The Formulae\
    \ . . . . . . . . . . . . . . . . . . 22\n             8.5.2.  Assumptions. .\
    \ . . . . . . . . . . . . . . . . . 23\n             8.5.3.  Analysis of Link-Layer\
    \ Effects on TCP\n                     Performance. . . . . . . . . . . . . .\
    \ . . . . . 24\n   9.  Quality-of-Service (QoS) Considerations. . . . . . . .\
    \ . . . . 26\n   10. Fairness vs Performance. . . . . . . . . . . . . . . . .\
    \ . . . 29\n   11. Delay Characteristics. . . . . . . . . . . . . . . . . . .\
    \ . . 30\n   12. Bandwidth Asymmetries. . . . . . . . . . . . . . . . . . . .\
    \ . 31\n   13. Buffering, Flow and Congestion Control . . . . . . . . . . . .\
    \ 31\n   14. Compression. . . . . . . . . . . . . . . . . . . . . . . . . . 34\n\
    \   15. Packet Reordering. . . . . . . . . . . . . . . . . . . . . . . 36\n  \
    \ 16. Mobility . . . . . . . . . . . . . . . . . . . . . . . . . . . 37\n   17.\
    \ Routing. . . . . . . . . . . . . . . . . . . . . . . . . . . . 39\n   18. Security\
    \ Considerations. . . . . . . . . . . . . . . . . . . . 41\n   19. Contributors\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . 44\n   20. Informative References\
    \ . . . . . . . . . . . . . . . . . . . . 45\n   21. Contributors' Addresses.\
    \ . . . . . . . . . . . . . . . . . . . 57\n   22. Authors' Addresses . . . .\
    \ . . . . . . . . . . . . . . . . . . 58\n   23. Full Copyright Statement . .\
    \ . . . . . . . . . . . . . . . . . 60\n"
- title: 1.  Introduction and Overview
  contents:
  - "1.  Introduction and Overview\n   IP, the Internet Protocol [RFC791] [RFC2460],\
    \ is the core protocol of\n   the Internet.  IP defines a simple \"connectionless\"\
    \ packet-switched\n   network.  The success of the Internet is largely attributed\
    \ to IP's\n   simplicity, the \"end-to-end principle\" [SRC81] on which the Internet\n\
    \   is based, and the resulting ease of carrying IP on a wide variety of\n   subnetworks,\
    \ not necessarily designed with IP in mind.  A subnetwork\n   refers to any network\
    \ operating immediately below the IP layer to\n   connect two or more systems\
    \ using IP (i.e., end hosts or routers).\n   In its simplest form, this may be\
    \ a direct connection between the IP\n   systems (e.g., using a length of cable\
    \ or a wireless medium).\n   This document defines a subnetwork as a layer 2 network,\
    \ which is a\n   network that does not rely upon the services of IP routers to\
    \ forward\n   packets between parts of the subnetwork.  However, IP routers may\n\
    \   bridge frames at Layer 2 between parts of a subnetwork.  Sometimes,\n   it\
    \ is convenient to aggregate a group of such subnetworks into a\n   single logical\
    \ subnetwork.  IP routing protocols (e.g., OSPF, IS-IS,\n   and PIM) can be configured\
    \ to support this aggregation, but typically\n   present a layer-3 subnetwork\
    \ rather than a layer-2 subnetwork.  This\n   may also result in a specific packet\
    \ passing several times over the\n   same layer-2 subnetwork via an intermediate\
    \ layer-3 gateway (router).\n   Because that aggregation requires layer-3 components,\
    \ issues thereof\n   are beyond the scope of this document.\n   However, while\
    \ many subnetworks carry IP, they do not necessarily do\n   so with maximum efficiency,\
    \ minimum complexity, or cost, nor do they\n   implement certain features to efficiently\
    \ support newer Internet\n   features of increasing importance, such as multicasting\
    \ or quality of\n   service.\n   With the explosive growth of the Internet, IP\
    \ packets comprise an\n   increasingly large fraction of the traffic carried by\
    \ the world's\n   telecommunications networks.  It therefore makes sense to optimize\n\
    \   both existing and new subnetwork technologies for IP as much as\n   possible.\n\
    \   Optimizing a subnetwork for IP involves three complementary\n   considerations:\n\
    \   1.  Providing functionality sufficient to carry IP.\n   2.  Eliminating unnecessary\
    \ functions that increase cost or\n       complexity.\n   3.  Choosing subnetwork\
    \ parameters that maximize the performance of\n       the Internet protocols.\n\
    \   Because IP is so simple, consideration 2 is more of an issue than\n   consideration\
    \ 1.  That is to say, subnetwork designers make many more\n   errors of commission\
    \ than errors of omission.  However, certain\n   enhancements to Internet features,\
    \ such as multicasting and quality-\n   of-service, benefit significantly from\
    \ support given by the\n   underlying subnetworks beyond that necessary to carry\
    \ \"traditional\"\n   unicast, best-effort IP.\n   A major consideration in the\
    \ efficient design of any layered\n   communication network is the appropriate\
    \ layer(s) in which to\n   implement a given function.  This issue was first addressed\
    \ in the\n   seminal paper, \"End-to-End Arguments in System Design\" [SRC81].\
    \  That\n   paper argued that many functions can be implemented properly *only*\n\
    \   on an end-to-end basis, i.e., at the highest protocol layers, outside\n  \
    \ the subnetwork.  These functions include ensuring the reliable\n   delivery\
    \ of data and the use of cryptography to provide\n   confidentiality and message\
    \ integrity.\n   Such functions cannot be provided solely by the concatenation\
    \ of\n   hop-by-hop services; duplicating these functions at the lower\n   protocol\
    \ layers (i.e., within the subnetwork) can be needlessly\n   redundant or even\
    \ harmful to cost and performance.\n   However, partial duplication of functionality\
    \ in a lower layer can\n   *sometimes* be justified by performance, security,\
    \ or availability\n   considerations.  Examples include link-layer retransmission\
    \ to\n   improve the performance of an unusually lossy channel, e.g., mobile\n\
    \   radio, link-level encryption intended to thwart traffic analysis, and\n  \
    \ redundant transmission links to improve availability, increase\n   throughput,\
    \ or to guarantee performance for certain classes of\n   traffic.  Duplication\
    \ of protocol functions should be done only with\n   an understanding of system-level\
    \ implications, including possible\n   interactions with higher-layer mechanisms.\n\
    \   The original architecture of the Internet was influenced by the\n   end-to-end\
    \ principle [SRC81], and has been, in our view, part of the\n   reason for the\
    \ Internet's success.\n   The remainder of this document discusses the various\
    \ subnetwork\n   design issues that the authors consider relevant to efficient\
    \ IP\n   support.\n"
- title: 2.  Maximum Transmission Units (MTUs) and IP Fragmentation
  contents:
  - "2.  Maximum Transmission Units (MTUs) and IP Fragmentation\n   IPv4 packets (datagrams)\
    \ vary in size, from 20 bytes (the size of the\n   IPv4 header alone) to a maximum\
    \ of 65535 bytes.  Subnetworks need not\n   support maximum-sized (64KB) IP packets,\
    \ as IP provides a scheme that\n   breaks packets that are too large for a given\
    \ subnetwork into\n   fragments that travel as independent IP packets and are\
    \ reassembled\n   at the destination.  The maximum packet size supported by a\n\
    \   subnetwork is known as its Maximum Transmission Unit (MTU).\n   Subnetworks\
    \ may, but are not required to, indicate the length of each\n   packet they carry.\
    \  One example is Ethernet with the widely used DIX\n   [DIX82] (not IEEE 802.3\
    \ [IEEE8023]) header, which lacks a length\n   field to indicate the true data\
    \ length when the packet is padded to a\n   minimum of 60 bytes.  This is not\
    \ a problem for uncompressed IP\n   because each IP packet carries its own length\
    \ field.\n   If optional header compression [RFC1144] [RFC2507] [RFC2508]\n  \
    \ [RFC3095] is used, however, it is required that the link framing\n   indicate\
    \ frame length because that is needed for the reconstruction\n   of the original\
    \ header.\n   In IP version 4 (the version now in widespread use), fragmentation\n\
    \   can occur at either the sending host or in an intermediate router,\n   and\
    \ fragments can be further fragmented at subsequent routers if\n   necessary.\n\
    \   In IP version 6 [RFC2460], fragmentation can occur only at the\n   sending\
    \ host; it cannot occur in a router (called \"router\n   fragmentation\" in this\
    \ document).\n   Both IPv4 and IPv6 provide a \"path MTU discovery\" procedure\
    \ [RFC1191]\n   [RFC1435] [RFC1981] that allows the sending host to avoid\n  \
    \ fragmentation by discovering the minimum MTU along a given path and\n   reduce\
    \ its packet sizes accordingly.  This procedure is optional in\n   IPv4 and IPv6.\n\
    \   Path MTU discovery is widely deployed, but it sometimes encounters\n   problems.\
    \  Some routers fail to generate the ICMP messages that\n   convey path MTU information\
    \ to the sender, and sometimes the ICMP\n   messages are blocked by overly restrictive\
    \ firewalls.  The result can\n   be a \"Path MTU Black Hole\" [RFC2923] [RFC1435].\n\
    \   The Path MTU Discovery procedure, the persistence of path MTU black\n   holes,\
    \ and the deletion of router fragmentation in IPv6 reflect a\n   consensus of\
    \ the Internet technical community that router\n   fragmentation is best avoided.\
    \  This requires that subnetworks\n   support MTUs that are \"reasonably\" large.\
    \  All IPv4 end hosts are\n   required to accept and reassemble IP packets of\
    \ size 576 bytes\n   [RFC791], but such a small value would clearly be inefficient.\n\
    \   Because IPv6 omits fragmentation by routers, [RFC2460] specifies a\n   larger\
    \ minimum MTU of 1280 bytes.  Any subnetwork with an internal\n   packet payload\
    \ smaller than 1280 bytes must implement a mechanism\n   that performs fragmentation/reassembly\
    \ of IP packets to/from\n   subnetwork frames if it is to support IPv6.\n   If\
    \ a subnetwork cannot directly support a \"reasonable\" MTU with\n   native framing\
    \ mechanisms, it should internally fragment.  That is,\n   it should transparently\
    \ break IP packets into internal data elements\n   and reassemble them at the\
    \ other end of the subnetwork.\n   This leaves the question of what is a \"reasonable\"\
    \ MTU.  Ethernet (10\n   and 100 Mb/s) has an MTU of 1500 bytes, and because of\
    \ the ubiquity\n   of Ethernet few Internet paths currently have MTUs larger than\
    \ this\n   value.  This severely limits the utility of larger MTUs provided by\n\
    \   other subnetworks.  Meanwhile, larger MTUs are increasingly desirable\n  \
    \ on high-speed subnetworks to reduce the per-packet processing\n   overhead in\
    \ host computers, and implementers are encouraged to\n   provide them even though\
    \ they may not be usable when Ethernet is also\n   in the path.\n   Various \"\
    tunneling\" schemes, such as GRE [RFC2784] or IP Security in\n   tunnel mode [RFC2406],\
    \ treat IP as a subnetwork for IP.  Since\n   tunneling adds header overhead,\
    \ it can trigger fragmentation, even\n   when the same physical subnetworks (e.g.,\
    \ Ethernet) are used on both\n   sides of the host performing IPsec encapsulation.\
    \  Tunneling has made\n   it more difficult to avoid router fragmentation and\
    \ has increased the\n   incidence of path MTU black holes [RFC2401] [RFC2923].\
    \  Larger\n   subnetwork MTUs may help to alleviate this problem.\n"
- title: 2.1.  Choosing the MTU in Slow Networks
  contents:
  - "2.1.  Choosing the MTU in Slow Networks\n   In slow networks, the largest possible\
    \ packet may take a considerable\n   amount of time to send.  This is known as\
    \ channelisation or\n   serialisation delay.  Total end-to-end interactive response\
    \ time\n   should not exceed the well-known human factors limit of 100 to 200\n\
    \   ms.  This includes all sources of delay: electromagnetic propagation\n   delay,\
    \ queuing delay, serialisation delay, and the store-and-forward\n   time, i.e.,\
    \ the time to transmit a packet at link speed.\n   At low link speeds, store-and-forward\
    \ delays can dominate total\n   end-to-end delay; these are in turn directly influenced\
    \ by the\n   maximum transmission unit (MTU) size.  Even when an interactive\n\
    \   packet is given a higher queuing priority, it may have to wait for a\n   large\
    \ bulk transfer packet to finish transmission.  This worst-case\n   wait can be\
    \ set by an appropriate choice of MTU.\n   For example, if the MTU is set to 1500\
    \ bytes, then an MTU-sized\n   packet will take about 8 milliseconds to send on\
    \ a T1 (1.536 Mb/s)\n   link.  But if the link speed is 19.2kb/s, then the transmission\
    \ time\n   becomes 625 ms -- well above our 100-200ms limit.  A 256-byte MTU\n\
    \   would lower this delay to a little over 100 ms.  However, care should\n  \
    \ be taken not to lower the MTU excessively, as this will increase\n   header\
    \ overhead and trigger frequent router fragmentation (if Path\n   MTU discovery\
    \ is not in use).  This is likely to be the case with\n   multicast, where Path\
    \ MTU discovery is ineffective.\n   One way to limit delay for interactive traffic\
    \ without imposing a\n   small MTU is to give priority to this traffic and to\
    \ preempt (abort)\n   the transmission of a lower-priority packet when a higher\
    \ priority\n   packet arrives in the queue.  However, the link resources used\
    \ to\n   send the aborted packet are lost, and overall throughput will\n   decrease.\n\
    \   Another way to limit delay is to implement a link-level multiplexing\n   scheme\
    \ that allows several packets to be in progress simultaneously,\n   with transmission\
    \ priority given to segments of higher-priority IP\n   packets.  For links using\
    \ the Point-To-Point Protocol (PPP)\n   [RFC1661], multi-class multilink [RFC2686]\
    \ [RFC2687] [RFC2689]\n   provides such a facility.\n   ATM (asynchronous transfer\
    \ mode), where SNDUs are fragmented and\n   interleaved across smaller 53-byte\
    \ ATM cells, is another example of\n   this technique.  However, ATM is generally\
    \ used on high-speed links\n   where the store-and-forward delays are already\
    \ minimal, and it\n   introduces significant (~9%) increases in overhead due to\
    \ the\n   addition of 5-byte cell overhead to each 48-byte ATM cell.\n   A third\
    \ example is the Data-Over-Cable Service Interface\n   Specification (DOCSIS)\
    \ with typical upstream bandwidths of 2.56 Mb/s\n   or 5.12 Mb/s.  To reduce the\
    \ impact of a 1500-byte MTU in DOCSIS 1.0\n   [DOCSIS1], a data link layer fragmentation\
    \ mechanism is specified in\n   DOCSIS 1.1 [DOCSIS2].  To accommodate the installed\
    \ base, DOCSIS 1.1\n   must be backward compatible with DOCSIS 1.0 cable modems,\
    \ which\n   generally do not support fragmentation.  Under the co-existence of\n\
    \   DOCSIS 1.0 and DOCSIS 1.1, the unfragmented large data packets from\n   DOCSIS\
    \ 1.0 cable modems may affect the quality of service for voice\n   packets from\
    \ DOCSIS 1.1 cable modems.  In this case, it has been\n   shown in [DOCSIS3] that\
    \ the use of bandwidth allocation algorithms\n   can mitigate this effect.\n \
    \  To summarize, there is a fundamental tradeoff between efficiency and\n   latency\
    \ in the design of a subnetwork, and the designer should keep\n   this tradeoff\
    \ in mind.\n"
- title: 3.  Framing on Connection-Oriented Subnetworks
  contents:
  - "3.  Framing on Connection-Oriented Subnetworks\n   IP requires that subnetworks\
    \ mark the beginning and end of each\n   variable-length, asynchronous IP packet.\
    \  Some examples of links and\n   subnetworks that do not provide this as an intrinsic\
    \ feature include:\n   1.  leased lines carrying a synchronous bit stream;\n \
    \  2.  ISDN B-channels carrying a synchronous octet stream;\n   3.  dialup telephone\
    \ modems carrying an asynchronous octet stream;\n       and\n   4.  Asynchronous\
    \ Transfer Mode (ATM) networks carrying an\n       asynchronous stream of fixed-sized\
    \ \"cells\".\n   The Internet community has defined packet framing methods for\
    \ all\n   these subnetworks.  The Point-To-Point Protocol (PPP) [RFC1661],\n \
    \  which uses a variant of HDLC, is applicable to bit synchronous,\n   octet-synchronous,\
    \ and octet asynchronous links (i.e., examples 1-3\n   above).  PPP is one preferred\
    \ framing method for IP, since a large\n   number of systems interoperate with\
    \ PPP.  ATM has its own framing\n   methods, described in [RFC2684] [RFC2364].\n\
    \   At high speeds, a subnetwork should provide a framed interface\n   capable\
    \ of carrying asynchronous, variable-length IP datagrams.  The\n   maximum packet\
    \ size supported by this interface is discussed above in\n   the MTU/Fragmentation\
    \ section.  The subnetwork may implement this\n   facility in any convenient manner.\n\
    \   IP packet boundaries need not coincide with any framing or\n   synchronization\
    \ mechanisms internal to the subnetwork.  When the\n   subnetwork implements variable\
    \ sized data units, the most\n   straightforward approach is to place exactly\
    \ one IP packet into each\n   subnetwork data unit (SNDU), and to rely on the\
    \ subnetwork's existing\n   ability to delimit SNDUs to also delimit IP packets.\
    \  A good example\n   is Ethernet.  However, some subnetworks have SNDUs of one\
    \ or more\n   fixed sizes, as dictated by switching, forward error correction\n\
    \   and/or interleaving considerations.  Examples of such subnetworks\n   include\
    \ ATM, with a single cell payload size of 48 octets plus a 5-\n   octet header,\
    \ and IS-95 digital cellular, with two \"rate sets\" of\n   four fixed frame sizes\
    \ each that may be selected on 20 millisecond\n   boundaries.\n   Because IP packets\
    \ are of variable length, they may not necessarily\n   fit into an integer multiple\
    \ of fixed-sized SNDUs.  An \"adaptation\n   layer\" is needed to convert IP packets\
    \ into SNDUs while marking the\n   boundary between each IP packet in some manner.\n\
    \   There are several approaches to this problem.  The first is to encode\n  \
    \ each IP packet into one or more SNDUs with no SNDU containing pieces\n   of\
    \ more than one IP packet, and to pad out the last SNDU of the\n   packet as needed.\
    \  Bits in a control header added to each SNDU\n   indicate where the data segment\
    \ belongs in the IP packet.  If the\n   subnetwork provides in-order, at-most-once\
    \ delivery, the header can\n   be as simple as a pair of bits indicating whether\
    \ the SNDU is the\n   first and/or the last in the IP packet.  Alternatively,\
    \ for\n   subnetworks that do not reorder the fragments of an SNDU, only the\n\
    \   last SNDU of the packet could be marked, as this would implicitly\n   indicate\
    \ the next SNDU as the first in a new IP packet.  The AAL5\n   (ATM Adaptation\
    \ Layer 5) scheme used with ATM is an example of this\n   approach, though it\
    \ adds other features, including a payload length\n   field and a payload CRC.\n\
    \   In AAL5, the ATM User-User Indication, which is encoded in the\n   Payload\
    \ Type field of an ATM cell, indicates the last cell of a\n   packet.  The packet\
    \ trailer is located at the end of the SNDU and\n   contains the packet length\
    \ and a CRC.\n   Another framing technique is to insert per-segment overhead to\n\
    \   indicate the presence of a segment option.  When present, the option\n   carries\
    \ a pointer to the end of the packet.  This differs from AAL5\n   in that it permits\
    \ another packet to follow within the same segment.\n   MPEG-2 Transport Streams\
    \ [EN301192] [ISO13818] support this style of\n   fragmentation, and may either\
    \ use padding (limiting each MPEG\n   transport stream packet to carry only part\
    \ of one IP packet), or\n   allow a second IP packet to start in the same Transport\
    \ Stream packet\n   (no padding).\n   A third approach is to insert a special\
    \ flag sequence into the data\n   stream between each IP packet, and to pack the\
    \ resulting data stream\n   into SNDUs without regard to SNDU boundaries.  This\
    \ may have\n   implications when frames are lost.  The flag sequence can also\
    \ pad\n   unused space at the end of an SNDU.  If the special flag appears in\n\
    \   the user data, it is escaped to an alternate sequence (usually larger\n  \
    \ than a flag) to avoid being misinterpreted as a flag.  The HDLC-based\n   framing\
    \ schemes used in PPP are all examples of this approach.\n   All three adaptation\
    \ schemes introduce overhead; how much depends on\n   the distribution of IP packet\
    \ sizes, the size(s) of the SNDUs, and in\n   the HDLC-like approaches, the content\
    \ of the IP packet (since flag-\n   like sequences occurring in the packet must\
    \ be escaped, which expands\n   them).  The designer must also weigh implementation\
    \ complexity and\n   performance in the choice and design of an adaptation layer.\n"
- title: 4.  Connection-Oriented Subnetworks
  contents:
  - "4.  Connection-Oriented Subnetworks\n   IP has no notion of a \"connection\"\
    ; it is a purely connectionless\n   protocol.  When a connection is required by\
    \ an application, it is\n   usually provided by TCP [RFC793], the Transmission\
    \ Control Protocol,\n   running atop IP on an end-to-end basis.\n   Connection-oriented\
    \ subnetworks can be (and are widely) used to carry\n   IP, but often with considerable\
    \ complexity.  Subnetworks consisting\n   of few nodes can simply open a permanent\
    \ connection between each pair\n   of nodes.  This is frequently done with ATM.\
    \  However, the number of\n   connections increases as the square of the number\
    \ of nodes, so this\n   is clearly impractical for large subnetworks.  A \"shim\"\
    \ layer between\n   IP and the subnetwork is therefore required to manage connections.\n\
    \   This is one of the most common functions of a Subnetwork Dependent\n   Convergence\
    \ Function (SNDCF) sublayer between IP and a subnetwork.\n   SNDCFs typically\
    \ open subnetwork connections as needed when an IP\n   packet is queued for transmission\
    \ and close them after an idle\n   timeout.  There is no relation between subnetwork\
    \ connections and any\n   connections that may exist at higher layers (e.g., TCP).\n\
    \   Because Internet traffic is typically bursty and transaction-\n   oriented,\
    \ it is often difficult to pick an optimal idle timeout.  If\n   the timeout is\
    \ too short, subnetwork connections are opened and\n   closed rapidly, possibly\
    \ over-stressing the subnetwork connection\n   management system (especially if\
    \ it was designed for voice traffic\n   call holding times).  If the timeout is\
    \ too long, subnetwork\n   connections are idle much of the time, wasting any\
    \ resources\n   dedicated to them by the subnetwork.\n   Purely connectionless\
    \ subnets (such as Ethernet), which have no state\n   and dynamically share resources,\
    \ are optimal for supporting best-\n   effort IP, which is stateless and dynamically\
    \ shares resources.\n   Connection-oriented packet networks (such as ATM and Frame\
    \ Relay),\n   which have state and dynamically share resources, are less optimal,\n\
    \   since best-effort IP does not benefit from the overhead of creating\n   and\
    \ maintaining state.  Connection-oriented circuit-switched networks\n   (including\
    \ the PSTN and ISDN) have state and statically allocate\n   resources for a call,\
    \ and thus require state creation and maintenance\n   overhead, but do not benefit\
    \ from the efficiencies of statistical\n   multiplexing sharing of capacity inherent\
    \ in IP.\n   In any event, if an SNDCF that opens and closes subnet connections\
    \ is\n   used to support IP, care should be taken to make sure that connection\n\
    \   processing in the subnet can keep up with relatively short holding\n   times.\n"
- title: 5.  Broadcasting and Discovery
  contents:
  - "5.  Broadcasting and Discovery\n   Subnetworks fall into two categories: point-to-point\
    \ and shared.  A\n   point-to-point subnet has exactly two endpoint components\
    \ (hosts or\n   routers); a shared link has more than two endpoint components,\
    \ using\n   either an inherently broadcast medium (e.g., Ethernet, radio) or a\n\
    \   switching layer hidden from the network layer (e.g., switched\n   Ethernet,\
    \ Myrinet [MYR95], ATM).  Switched subnetworks handle\n   broadcast by copying\
    \ broadcast packets, providing each interface that\n   supports one, or more,\
    \ systems (hosts or routers) with a copy of each\n   packet.\n   Several Internet\
    \ protocols for IPv4 make use of broadcast\n   capabilities, including link-layer\
    \ address lookup (ARP), auto-\n   configuration (RARP, BOOTP, DHCP), and routing\
    \ (RIP).\n   A lack of broadcast capability can impede the performance of these\n\
    \   protocols, or render them inoperable (e.g., DHCP).  ARP-like link\n   address\
    \ lookup can be provided by a centralized database, but at the\n   expense of\
    \ potentially higher response latency and the need for nodes\n   to have explicit\
    \ knowledge of the ARP server address.  Shared links\n   should support native,\
    \ link-layer subnet broadcast.\n   A corresponding set of IPv6 protocols uses\
    \ multicasting (see next\n   section) instead of broadcasting to provide similar\
    \ functions with\n   improved scaling in large networks.\n"
- title: 6.  Multicasting
  contents:
  - "6.  Multicasting\n   The Internet model includes \"multicasting\", where IP packets\
    \ are sent\n   to all the members of a multicast group [RFC1112] [RFC3376]\n \
    \  [RFC2710].  Multicast is an option in IPv4, but a standard feature of\n   IPv6.\
    \  IPv4 multicast is currently used by multimedia,\n   teleconferencing, gaming,\
    \ and file distribution (web, peer-to-peer\n   sharing) applications, as well\
    \ as by some key network and host\n   protocols (e.g., RIPv2, OSPF, NTP).  IPv6\
    \ additionally relies on\n   multicast for network configuration (DHCP-like autoconfiguration)\
    \ and\n   link-layer address discovery [RFC2461] (replacing ARP).  In the case\n\
    \   of IPv6, this can allow autoconfiguration and address discovery to\n   span\
    \ across routers, whereas the IPv4 broadcast-based services cannot\n   without\
    \ ad-hoc router support [RFC1812].\n   Multicast-enabled IP routers organize each\
    \ multicast group into a\n   spanning tree, and route multicast packets by making\
    \ copies of each\n   multicast packet and forwarding the copies to each output\
    \ interface\n   that includes at least one downstream member of the multicast\
    \ group.\n   Multicasting is considerably more efficient when a subnetwork\n \
    \  explicitly supports it.  For example, a router relaying a multicast\n   packet\
    \ onto an Ethernet segment need send only one copy of the\n   packet, no matter\
    \ how many members of the multicast group are\n   connected to the segment.  Without\
    \ native multicast support, routers\n   and switches on shared links would need\
    \ to use broadcast with\n   software filters, such that every multicast packet\
    \ sent incurs\n   software overhead for every node on the subnetwork, even if\
    \ a node is\n   not a member of the multicast group.  Alternately, the router\
    \ would\n   transmit a separate copy to every member of the multicast group on\n\
    \   the segment, as is done on multicast-incapable switched subnets.\n   Subnetworks\
    \ using shared channels (e.g., radio LANs, Ethernets) are\n   especially suitable\
    \ for native multicasting, and their designers\n   should make every effort to\
    \ support it.  This involves designating a\n   section of the subnetwork's own\
    \ address space for multicasting.  On\n   these networks, multicast is basically\
    \ broadcast on the medium, with\n   Layer-2 receiver filters.\n   Subnet interfaces\
    \ also need to be designed to accept packets\n   addressed to some number of multicast\
    \ addresses, in addition to the\n   unicast packets specifically addressed to\
    \ them.  The number of\n   multicast addresses that needs to be supported by a\
    \ host depends on\n   the requirements of the associated host; at least several\
    \ dozen will\n   meet most current needs.\n   On low-speed networks, the multicast\
    \ address recognition function may\n   be readily implemented in host software,\
    \ but on high-speed networks,\n   it should be implemented in subnetwork hardware.\
    \  This hardware need\n   not be complete; for example, many Ethernet interfaces\
    \ implement a\n   \"hashing\" function where the IP layer receives all of the\
    \ multicast\n   (and unicast) traffic to which the associated host subscribes,\
    \ plus\n   some small fraction of multicast traffic to which the host does not\n\
    \   subscribe.  Host/router software then has to discard the unwanted\n   packets\
    \ that pass the Layer-2 multicast address filter [RFC1112].\n   There does not\
    \ need to be a one-to-one mapping between a Layer-2\n   multicast address and\
    \ an IP multicast address.  An address overlap\n   may significantly degrade the\
    \ filtering capability of a receiver's\n   hardware multicast address filter.\
    \  A subnetwork supporting only\n   broadcast should use this service for multicast\
    \ and must rely on\n   software filtering.\n   Switched subnetworks must also\
    \ provide a mechanism for copying\n   multicast packets to ensure the packets\
    \ reach at least all members of\n   a multicast group.  One option is to \"flood\"\
    \ multicast packets in the\n   same manner as broadcast.  This can lead to unnecessary\
    \ transmissions\n   on some subnetwork links (notably non-multicast-aware Ethernet\n\
    \   switches).  Some subnetworks therefore allow multicast filter tables\n   to\
    \ control which links receive packets belonging to a specific group.\n   To configure\
    \ this automatically requires access to Layer-3 group\n   membership information\
    \ (e.g., IGMP [RFC3376], or MLD [RFC2710]).\n   Various implementation options\
    \ currently exist to provide a subnet\n   node with a list of mappings of multicast\
    \ addresses to\n   ports/interfaces.  These employ a range of approaches, including\n\
    \   signaling from end hosts (e.g., IEEE 802 GARP/GMRP [802.1p]),\n   signaling\
    \ from switches (e.g., CGMP [CGMP] and RGMP [RFC3488]),\n   interception and proxy\
    \ of IP group membership packets (e.g., IGMP/MLD\n   Proxy [MAGMA-PROXY]), and\
    \ enabling Layer-2 devices to\n   snoop/inspect/peek into forwarded Layer-3 protocol\
    \ headers (e.g.,\n   IGMP, MLD, PIM) so that they may infer Layer-3 multicast\
    \ group\n   membership [MAGMA-SNOOP].  These approaches differ in their\n   complexity,\
    \ flexibility, and ability to support new protocols.\n"
- title: 7.  Bandwidth on Demand (BoD) Subnets
  contents:
  - "7.  Bandwidth on Demand (BoD) Subnets\n   Some subnets allow a number of subnet\
    \ nodes to share a channel\n   efficiently by assigning transmission opportunities\
    \ dynamically.\n   Transmission opportunities are requested by a subnet node when\
    \ it has\n   packets to send.  The subnet schedules and grants transmission\n\
    \   opportunities sufficient to allow the transmitting subnet node to\n   send\
    \ one or more packets (or packet fragments).  We call these\n   subnets Bandwidth\
    \ on Demand (BoD) subnets.  Examples of BoD subnets\n   include Demand Assignment\
    \ Multiple Access (DAMA) satellite and\n   terrestrial wireless networks, IEEE\
    \ 802.11 point coordination\n   function (PCF) mode, and DOCSIS.  A connection-oriented\
    \ network (such\n   as the PSTN, ATM or Frame Relay) reserves resources on a much\
    \ longer\n   timescale, and is therefore not a BoD subnet in our taxonomy.\n \
    \  The design parameters for BoD are similar to those in connection-\n   oriented\
    \ subnetworks, although the implementations may vary\n   significantly.  In BoD,\
    \ the user typically requests access to the\n   shared channel for some duration.\
    \  Access may be allocated for a\n   period of time at a specific rate, for a\
    \ certain number of packets,\n   or until the user releases the channel.  Access\
    \ may be coordinated\n   through a central management entity or with a distributed\
    \ algorithm\n   amongst the users.  Examples of the resource that may be shared\n\
    \   include a terrestrial wireless hop, an upstream channel in a cable\n   television\
    \ system, a satellite uplink, and an end-to-end satellite\n   channel.\n   Long-delay\
    \ BoD subnets pose problems similar to connection-oriented\n   subnets in anticipating\
    \ traffic.  While connection-oriented subnets\n   hold idle channels open expecting\
    \ new data to arrive, BoD subnets\n   request channel access based on buffer occupancy\
    \ (or expected buffer\n   occupancy) on the sending port.  Poor performance will\
    \ likely result\n   if the sender does not anticipate additional traffic arriving\
    \ at that\n   port during the time it takes to grant a transmission request. \
    \ It is\n   recommended that the algorithm have the capability to extend a hold\n\
    \   on the channel for data that has arrived after the original request\n   was\
    \ generated (this may be done by piggybacking new requests on user\n   data).\n\
    \   There is a wide variety of BoD protocols available.  However, there\n   has\
    \ been relatively little comprehensive research on the interactions\n   between\
    \ BoD mechanisms and Internet protocol performance.  Research\n   on some specific\
    \ mechanisms is available (e.g., [AR02]).  One item\n   that has been studied\
    \ is TCP's retransmission timer [KY02].  BoD\n   systems can cause spurious timeouts\
    \ when adjusting from a relatively\n   high data rate, to a relatively low data\
    \ rate.  In this case, TCP's\n   transmitted data takes longer to get through\
    \ the network than\n   predicted by the TCP sender's computed retransmission timeout.\n\
    \   Therefore, the TCP sender is prone to resending a segment\n   prematurely.\n"
- title: 8.  Reliability and Error Control
  contents:
  - "8.  Reliability and Error Control\n   In the Internet architecture, the ultimate\
    \ responsibility for error\n   recovery is at the end points [SRC81].  The Internet\
    \ may occasionally\n   drop, corrupt, duplicate, or reorder packets, and the transport\n\
    \   protocol (e.g., TCP) or application (e.g., if UDP is used as the\n   transport\
    \ protocol) must recover from these errors on an end-to-end\n   basis [RFC3155].\
    \  Error recovery in the subnetwork is therefore\n   justifiable only to the extent\
    \ that it can enhance overall\n   performance.  It is important to recognize that\
    \ a subnetwork can go\n   too far in attempting to provide error recovery services\
    \ in the\n   Internet environment.  Subnet reliability should be \"lightweight\"\
    ,\n   i.e., it only has to be \"good enough\", *not* perfect.\n   In this section,\
    \ we discuss how to analyze characteristics of a\n   subnetwork to determine what\
    \ is \"good enough\".  The discussion below\n   focuses on TCP, which is the most\
    \ widely-used transport protocol in\n   the Internet.  It is widely believed (and\
    \ is a stated goal within the\n   IETF) that non-TCP transport protocols should\
    \ attempt to be \"TCP-\n   friendly\" and have many of the same performance characteristics.\n\
    \   Thus, the discussion below should be applicable, even to portions of\n   the\
    \ Internet where TCP may not be the predominant protocol.\n"
- title: 8.1.  TCP vs Link-Layer Retransmission
  contents:
  - "8.1.  TCP vs Link-Layer Retransmission\n   Error recovery involves the generation\
    \ and transmission of redundant\n   information computed from user data.  Depending\
    \ on how much redundant\n   information is sent and how it is generated, the receiver\
    \ can use it\n   to reliably detect transmission errors, correct up to some maximum\n\
    \   number of transmission errors, or both.  The general approach is\n   known\
    \ as Error Control Coding, or ECC.\n   The use of ECC to detect transmission errors\
    \ so that retransmissions\n   (hopefully without errors) can be requested is widely\
    \ known as \"ARQ\"\n   (Automatic Repeat Request).\n   When enough ECC information\
    \ is available to permit the receiver to\n   correct some transmission errors\
    \ without a retransmission, the\n   approach is known as Forward Error Correction\
    \ (FEC).  Due to the\n   greater complexity of the required ECC and the need to\
    \ tailor its\n   design to the characteristics of a specific modem and channel,\
    \ FEC\n   has traditionally been implemented in special-purpose hardware\n   integral\
    \ to a modem.  This effectively makes it part of the physical\n   layer.\n   Unlike\
    \ ARQ, FEC was rarely used for telecommunications outside of\n   space links prior\
    \ to the 1990s.  It is now nearly universal in\n   telephone, cable and DSL modems,\
    \ digital satellite links, and digital\n   mobile telephones.  FEC is also heavily\
    \ used in optical and magnetic\n   storage where \"retransmissions\" are not possible.\n\
    \   Some systems use hybrid combinations of ARQ layered atop FEC; V.90\n   dialup\
    \ modems (in the upstream direction) with V.42 error control are\n   one example.\
    \  Most errors are corrected by the trellis (FEC) code\n   within the V.90 modem,\
    \ and most remaining errors are detected and\n   corrected by the ARQ mechanisms\
    \ in V.42.\n   Work is now underway to apply FEC above the physical layer, primarily\n\
    \   in connection with reliable multicasting [RFC3048] [RFC3450-RFC3453]\n   where\
    \ conventional ARQ mechanisms are inefficient or difficult to\n   implement. \
    \ However, in this discussion, we will assume that if FEC\n   is present, it is\
    \ implemented within the physical layer.\n   Depending on the layer in which it\
    \ is implemented, error control can\n   operate on an end-to-end basis or over\
    \ a shorter span, such as a\n   single link.  TCP is the most important example\
    \ of an end-to-end\n   protocol that uses an ARQ strategy.\n   Many link-layer\
    \ protocols use ARQ, usually some flavor of HDLC\n   [ISO3309].  Examples include\
    \ the X.25 link layer, the AX.25 protocol\n   used in amateur packet radio, 802.11\
    \ wireless LANs, and the reliable\n   link layer specified in IEEE 802.2.\n  \
    \ Only end-to-end error recovery can ensure reliable service to the\n   application\
    \ (see Section 8).  However, some subnetworks (e.g., many\n   wireless links)\
    \ also have link-layer error recovery as a performance\n   enhancement [RFC3366].\
    \  For example, many cellular links have small\n   physical frame sizes (< 100\
    \ bytes) and relatively high frame loss\n   rates.  Relying solely on end-to-end\
    \ error recovery can clearly yield\n   a performance degradation, as retransmissions\
    \ across the end-to-end\n   path take much longer to be received than when link\
    \ layer\n   retransmissions are used.  Thus, link-layer error recovery can often\n\
    \   increase end-to-end performance.  As a result, link-layer and end-\n   to-end\
    \ recovery often co-exist; this can lead to the possibility of\n   inefficient\
    \ interactions between the two layers of ARQ protocols.\n   This inter-layer \"\
    competition\" might lead to the following wasteful\n   situation.  When the link\
    \ layer retransmits (parts of) a packet, the\n   link latency momentarily increases.\
    \  Since TCP bases its\n   retransmission timeout on prior measurements of total\
    \ end-to-end\n   latency, including that of the link in question, this sudden\
    \ increase\n   in latency may trigger an unnecessary retransmission by TCP of\
    \ a\n   packet that the link layer is still retransmitting.  Such spurious\n \
    \  end-to-end retransmissions generate unnecessary load and reduce end-\n   to-end\
    \ throughput.  As a result, the link layer may even have\n   multiple copies of\
    \ the same packet in the same link queue at the same\n   time.  In general, one\
    \ could say the competing error recovery is\n   caused by an inner control loop\
    \ (link-layer error recovery) reacting\n   to the same signal as an outer control\
    \ loop (end-to-end error\n   recovery) without any coordination between the loops.\
    \  Note that this\n   is solely an efficiency issue; TCP continues to provide\
    \ reliable\n   end-to-end delivery over such links.\n   This raises the question\
    \ of how persistent a link-layer sender should\n   be in performing retransmission\
    \ [RFC3366].  We define the link-layer\n   (LL) ARQ persistency as the maximum\
    \ time that a particular link will\n   spend trying to transfer a packet before\
    \ it can be discarded.  This\n   deliberately simplified definition says nothing\
    \ about the maximum\n   number of retransmissions, retransmission strategies,\
    \ queue sizes,\n   queuing disciplines, transmission delays, or the like.  The\
    \ reason we\n   use the term LL ARQ persistency, instead of a term such as \"\
    maximum\n   link-layer packet holding time,\" is that the definition closely\n\
    \   relates to link-layer error recovery.  For example, on links that\n   implement\
    \ straightforward error recovery strategies, LL ARQ\n   persistency will often\
    \ correspond to a maximum number of\n   retransmissions permitted per link-layer\
    \ frame.\n   For link layers that do not or cannot differentiate between flows\n\
    \   (e.g., due to network layer encryption), the LL ARQ persistency\n   should\
    \ be small.  This avoids any harmful effects or performance\n   degradation resulting\
    \ from indiscriminate high persistence.  A\n   detailed discussion of these issues\
    \ is provided in [RFC3366].\n   However, when a link layer can identify individual\
    \ flows and apply\n   ARQ selectively [LKJK02], then the link ARQ persistency\
    \ should be\n   high for a flow using reliable unicast transport protocols (e.g.,\n\
    \   TCP) and must be low for all other flows.  Setting the link ARQ\n   persistency\
    \ larger than the largest link outage allows TCP to rapidly\n   restore transmission\
    \ without needing to wait for a retransmission\n   time out.  This generally improves\
    \ TCP performance in the face of\n   transient outages.  However, excessively\
    \ high persistence may be\n   disadvantageous; a practical upper limit of 30-60\
    \ seconds may be\n   desirable.  Implementation of such schemes remains a research\
    \ issue.\n   (See also the following section \"Recovery from Subnetwork Outages\"\
    ).\n   Many subnetwork designers have opportunities to reduce the\n   probability\
    \ of packet loss, e.g., with FEC, ARQ, and interleaving, at\n   the cost of increased\
    \ delay.  TCP performance improves with\n   decreasing loss but worsens with increasing\
    \ end-to-end delay, so it\n   is important to find the proper balance through\
    \ analysis and\n   simulation.\n"
- title: 8.2.  Recovery from Subnetwork Outages
  contents:
  - "8.2.  Recovery from Subnetwork Outages\n   Some types of subnetworks, particularly\
    \ mobile radio, are subject to\n   frequent temporary outages.  For example, an\
    \ active cellular data\n   user may drive or walk into an area (such as a tunnel)\
    \ that is out of\n   range of any base station.  No packets will be delivered\
    \ successfully\n   until the user returns to an area with coverage.\n   The Internet\
    \ protocols currently provide no standard way for a\n   subnetwork to explicitly\
    \ notify an upper layer protocol (e.g., TCP)\n   that it is experiencing an outage\
    \ rather than severe congestion.\n   Under these circumstances TCP will, after\
    \ each unsuccessful\n   retransmission, wait even longer before trying again;\
    \ this is its\n   \"exponential back-off\" algorithm.  Furthermore, TCP will not\
    \ discover\n   that the subnetwork outage has ended until its next retransmission\n\
    \   attempt.  If TCP has backed off, this may take some time.  This can\n   lead\
    \ to extremely poor TCP performance over such subnetworks.\n   It is therefore\
    \ highly desirable that a subnetwork subject to outages\n   does not silently\
    \ discard packets during an outage.  Ideally, the\n   subnetwork should define\
    \ an interface to the next higher layer (i.e.,\n   IP) that allows it to refuse\
    \ packets during an outage, and to\n   automatically ask IP for new packets when\
    \ it is again able to deliver\n   them.  If it cannot do this, then the subnetwork\
    \ should hold onto at\n   least some of the packets it accepts during an outage\
    \ and attempt to\n   deliver them when the outage ends.  When packets are discarded,\
    \ IP\n   should be notified so that the appropriate ICMP messages can be sent.\n\
    \   Note that it is *not* necessary to completely avoid dropping packets\n   during\
    \ an outage.  The purpose of holding onto a packet during an\n   outage, either\
    \ in the subnetwork or at the IP layer, is so that its\n   eventual delivery will\
    \ implicitly notify TCP that the subnetwork is\n   again operational.  This is\
    \ to enhance performance, not to ensure\n   reliability -- reliability, as discussed\
    \ earlier, can only be ensured\n   on an end-to-end basis.\n   Only a few packets\
    \ per TCP connection, including ACKs, need be held\n   in this way to cause the\
    \ TCP sender to recover from the additional\n   losses once the flow resumes [RFC3366].\n\
    \   Because it would be a layering violation (and possibly a performance\n   hit)\
    \ for IP or a subnetwork layer to look at TCP headers (which would\n   in any\
    \ event be impossible if IPsec encryption [RFC2401] is in use),\n   it would be\
    \ reasonable for the IP or subnetwork layers to choose, as\n   a design parameter,\
    \ some small number of packets that will be\n   retained during an outage.\n"
- title: 8.3.  CRCs, Checksums and Error Detection
  contents:
  - "8.3.  CRCs, Checksums and Error Detection\n   The TCP [RFC793], UDP [RFC768],\
    \ ICMP, and IPv4 [RFC791] protocols all\n   use the same simple 16-bit 1's complement\
    \ checksum algorithm\n   [RFC1071] to detect corrupted packets.  The IPv4 header\
    \ checksum\n   protects only the IPv4 header, while the TCP, ICMP, and UDP checksums\n\
    \   provide end-to-end error detection for both the transport pseudo\n   header\
    \ (including network and transport layer information) and the\n   transport payload\
    \ data.  Protection of the data is optional for\n   applications using UDP [RFC768]\
    \ for IPv4, but is required for IPv6.\n   The Internet checksum is not very strong\
    \ from a coding theory\n   standpoint, but it is easy to compute in software,\
    \ and various\n   proposals to replace the Internet checksums with stronger checksums\n\
    \   have failed.  However, it is known that undetected errors can and do\n   occur\
    \ in packets received by end hosts [SP2000].\n   To reduce processing costs, IPv6\
    \ has no IP header checksum.  The\n   destination host detects \"important\" errors\
    \ in the IP header, such as\n   the delivery of the packet to the wrong destination.\
    \  This is done by\n   including the IP source and destination addresses (pseudo\
    \ header) in\n   the computation of the checksum in the TCP or UDP header, a practice\n\
    \   already performed in IPv4.  Errors in other IPv6 header fields may go\n  \
    \ undetected within the network; this was considered a reasonable price\n   to\
    \ pay for a considerable reduction in the processing required by\n   each router,\
    \ and it was assumed that subnetworks would use a strong\n   link CRC.\n   One\
    \ way to provide additional protection for an IPv4 or IPv6 header\n   is by the\
    \ authentication and packet integrity services of the IP\n   Security (IPsec)\
    \ protocol [RFC2401].  However, this may not be a\n   choice available to the\
    \ subnetwork designer.\n   Most subnetworks implement error detection just above\
    \ the physical\n   layer.  Packets corrupted in transmission are detected and\
    \ discarded\n   before delivery to the IP layer.  A 16-bit cyclic redundancy check\n\
    \   (CRC) is usually the minimum for error detection.  This is\n   significantly\
    \ more robust against most patterns of errors than the\n   16-bit Internet checksum.\
    \  Note that the error detection properties\n   of a specific CRC code diminish\
    \ with increasing frame size.  The\n   Point-to-Point Protocol [RFC1662] requires\
    \ support of a 16-bit CRC\n   for each link frame, with a 32-bit CRC as an option.\
    \  (PPP is often\n   used in conjunction with a dialup modem, which provides its\
    \ own error\n   control).  Other subnetworks, including 802.3/Ethernet, AAL5/ATM,\n\
    \   FDDI, Token Ring, and PPP over SONET/SDH all use a 32-bit CRC.  Many\n   subnetworks\
    \ can also use other mechanisms to enhance the error\n   detection capability\
    \ of the link CRC (e.g., FEC in dialup modems,\n   mobile radio and satellite\
    \ channels).\n   Any new subnetwork designed to carry IP should therefore provide\n\
    \   error detection for each IP packet that is at least as strong as the\n   32-bit\
    \ CRC specified in [ISO3309].  While this will achieve a very\n   low undetected\
    \ packet error rate due to transmission errors, it will\n   not (and need not)\
    \ achieve a very low packet loss rate as the\n   Internet protocols are better\
    \ suited to dealing with lost packets\n   than to dealing with corrupted packets\
    \ [SRC81].\n   Packet corruption may be, and is, also caused by bugs in host and\n\
    \   router hardware and software.  Even if every subnetwork implemented\n   strong\
    \ error detection, it is still essential that end-to-end\n   checksums are used\
    \ at the receiving end host [SP2000].\n   Designers of complex subnetworks consisting\
    \ of internal links and\n   packet switches should consider implementing error\
    \ detection on an\n   edge-to-edge basis to cover an entire SNDU (or IP packet).\
    \  A CRC\n   would be generated at the entry point to the subnetwork and checked\n\
    \   at the exit endpoint.  This may be used instead of, or in combination\n  \
    \ with, error detection at the interface to each physical link.  An\n   edge-to-edge\
    \ check has the significant advantage of protecting\n   against errors introduced\
    \ anywhere within the subnetwork, not just\n   within its transmission links.\
    \  Examples of this approach include the\n   way in which the Ethernet CRC-32\
    \ is handled by LAN bridges [802.1D].\n   ATM AAL5 [ITU-I363] also uses an edge-to-edge\
    \ CRC-32.\n   Some specific applications may be tolerant of residual errors in\
    \ the\n   data they exchange, but removal of the link CRC may expose the\n   network\
    \ to an undesirable increase in undetected errors in the IP and\n   transport\
    \ headers.  Applications may also require a high level of\n   error protection\
    \ for control information exchanged by protocols\n   acting above the transport\
    \ layer.  One example is a voice codec,\n   which is robust against bit errors\
    \ in the speech samples.  For such\n   mechanisms to work, the receiving application\
    \ must be able to\n   tolerate receiving corrupted data.  This also requires that\
    \ an\n   application uses a mechanism to signal that payload corruption is\n \
    \  permitted and to indicate the coverage (headers and data) required to\n   be\
    \ protected by the subnetwork CRC.  The UDP-Lite protocol [RFC3828]\n   is the\
    \ first Internet standards track transport protocol supporting\n   partial payload\
    \ protection.  Receipt of corrupt data by arbitrary\n   application protocols\
    \ carries a serious danger that a subnet delivers\n   data with errors that remain\
    \ undetected by the application and hence\n   corrupt the communicated data [SRC81].\n"
- title: 8.4.  How TCP Works
  contents:
  - "8.4.  How TCP Works\n   One of TCP's functions is end-host based congestion control\
    \ for the\n   Internet.  This is a critical part of the overall stability of the\n\
    \   Internet, so it is important that link-layer designers understand\n   TCP's\
    \ congestion control algorithms.\n   TCP assumes that, at the most abstract level,\
    \ the network consists of\n   links and queues.  Queues provide output-buffering\
    \ on links that are\n   momentarily oversubscribed.  They smooth instantaneous\
    \ traffic bursts\n   to fit the link bandwidth.  When demand exceeds link capacity\
    \ long\n   enough to fill the queue, packets must be dropped.  The traditional\n\
    \   action of dropping the most recent packet (\"tail dropping\") is no\n   longer\
    \ recommended [RFC2309] [RFC2914], but it is still widely\n   practiced.\n   TCP\
    \ uses sequence numbering and acknowledgments (ACKs) on an\n   end-to-end basis\
    \ to provide reliable, sequenced delivery.  TCP ACKs\n   are cumulative, i.e.,\
    \ each implicitly ACKs every segment received so\n   far.  If a packet with an\
    \ unexpected sequence number is received, the\n   ACK field in the packets returned\
    \ by the receiver will cease to\n   advance.  Using an optional enhancement, TCP\
    \ can send selective\n   acknowledgments (SACKs) [RFC2018] to indicate which segments\
    \ have\n   arrived at the receiver.\n   Since the most common cause of packet\
    \ loss is congestion, TCP treats\n   packet loss as an indication of potential\
    \ Internet congestion along\n   the path between TCP end hosts.  This happens\
    \ automatically, and the\n   subnetwork need not know anything about IP or TCP.\
    \  A subnetwork node\n   simply drops packets whenever it must, though some packet-dropping\n\
    \   strategies (e.g., RED) are more fair to competing flows than others.\n   TCP\
    \ recovers from packet losses in two different ways.  The most\n   important mechanism\
    \ is the retransmission timeout.  If an ACK fails\n   to arrive after a certain\
    \ period of time, TCP retransmits the oldest\n   unacked packet.  Taking this\
    \ as a hint that the network is congested,\n   TCP waits for the retransmission\
    \ to be ACKed before it continues, and\n   it gradually increases the number of\
    \ packets in flight as long as a\n   timeout does not occur again.\n   A retransmission\
    \ timeout can impose a significant performance\n   penalty, as the sender is idle\
    \ during the timeout interval and\n   restarts with a congestion window of one\
    \ TCP segment following the\n   timeout.  To allow faster recovery from the occasional\
    \ lost packet in\n   a bulk transfer, an alternate scheme, known as \"fast recovery\"\
    , was\n   introduced [RFC2581] [RFC2582] [RFC2914] [TCPF98].\n   Fast recovery\
    \ relies on the fact that when a single packet is lost in\n   a bulk transfer,\
    \ the receiver continues to return ACKs to subsequent\n   data packets that do\
    \ not actually acknowledge any newly-received\n   data.  These are known as \"\
    duplicate acknowledgments\" or \"dupacks\".\n   The sending TCP can use dupacks\
    \ as a hint that a packet has been lost\n   and retransmit it without waiting\
    \ for a timeout.  Dupacks effectively\n   constitute a negative acknowledgment\
    \ (NAK) for the packet sequence\n   number in the acknowledgment field.  TCP waits\
    \ until a certain number\n   of dupacks (currently 3) are seen prior to assuming\
    \ a loss has\n   occurred; this helps avoid an unnecessary retransmission during\n\
    \   out-of-sequence delivery.\n   A technique called \"Explicit Congestion Notification\"\
    \ (ECN) [RFC3168]\n   allows routers to directly signal congestion to hosts without\n\
    \   dropping packets.  This is done by setting a bit in the IP header.\n   Since\
    \ ECN support is likely to remain optional, the lack of an ECN\n   bit must *never*\
    \ be interpreted as a lack of congestion.  Thus, for\n   the foreseeable future,\
    \ TCP must interpret a lost packet as a signal\n   of congestion.\n   The TCP\
    \ \"congestion avoidance\" [RFC2581] algorithm maintains a\n   congestion window\
    \ (cwnd) controlling the amount of data TCP may have\n   in flight at any moment.\
    \  Reducing cwnd reduces the overall bandwidth\n   obtained by the connection;\
    \ similarly, raising cwnd increases\n   performance, up to the limit of the available\
    \ capacity.\n   TCP probes for available network capacity by initially setting\
    \ cwnd\n   to one or two packets and then increasing cwnd by one packet for each\n\
    \   ACK returned from the receiver.  This is TCP's \"slow start\"\n   mechanism.\
    \  When a packet loss is detected (or congestion is signaled\n   by other mechanisms),\
    \ cwnd is reset to one and the slow start process\n   is repeated until cwnd reaches\
    \ one half of its previous setting\n   before the reset.  Cwnd continues to increase\
    \ past this point, but at\n   a much slower rate than before.  If no further losses\
    \ occur, cwnd\n   will ultimately reach the window size advertised by the receiver.\n\
    \   This is an \"Additive Increase, Multiplicative Decrease\" (AIMD)\n   algorithm.\
    \  The steep decrease of cwnd in response to congestion\n   provides for network\
    \ stability; the AIMD algorithm also provides for\n   fairness between long running\
    \ TCP connections sharing the same path.\n"
- title: 8.5.  TCP Performance Characteristics
  contents:
  - "8.5.  TCP Performance Characteristics\n   Caveat\n   Here we present a current\
    \ \"state-of-the-art\" understanding of TCP\n   performance.  This analysis attempts\
    \ to characterize the performance\n   of TCP connections over links of varying\
    \ characteristics.\n   Link designers may wish to use the techniques in this section\
    \ to\n   predict what performance TCP/IP may achieve over a new link-layer\n \
    \  design.  Such analysis is encouraged.  Because this is a relatively\n   new\
    \ analysis, and the theory is based on single-stream TCP\n   connections under\
    \ \"ideal\" conditions, it should be recognized that\n   the results of such analysis\
    \ may differ from actual performance in\n   the Internet.  That being said, we\
    \ have done our best to provide the\n   designers with helpful information to\
    \ get an accurate picture of the\n   capabilities and limitations of TCP under\
    \ various conditions.\n"
- title: 8.5.1.  The Formulae
  contents:
  - "8.5.1.  The Formulae\n   The performance of TCP's AIMD Congestion Avoidance algorithm\
    \ has been\n   extensively analyzed.  The current best formula for the performance\n\
    \   of the specific algorithms used by Reno TCP (i.e., the TCP specified\n   in\
    \ [RFC2581]) is given by Padhye, et al. [PFTK98].  This formula is:\n        \
    \                                 MSS\n           BW = --------------------------------------------------------\n\
    \                RTT*sqrt(1.33*p) + RTO*p*[1+32*p^2]*min[1,3*sqrt(.75*p)]\n  \
    \ where\n           BW   is the maximum TCP throughout achievable by an\n    \
    \            individual TCP flow\n           MSS  is the TCP segment size being\
    \ used by the connection\n           RTT  is the end-to-end round trip time of\
    \ the TCP connection\n           RTO  is the packet timeout (based on RTT)\n \
    \          p    is the packet loss rate for the path\n                (i.e., .01\
    \ if there is 1% packet loss)\n   Note that the speed of the links making up the\
    \ Internet path does not\n   explicitly appear in this formula.  Attempting to\
    \ send faster than\n   the slowest link in the path causes the queue to grow at\
    \ the\n   transmitter driving the bottleneck.  This increases the RTT, which in\n\
    \   turn reduces the achievable throughput.\n   This is currently considered to\
    \ be the best approximate formula for\n   Reno TCP performance.  A further simplification\
    \ of this formula is\n   generally made by assuming that RTO is approximately\
    \ 5*RTT.\n   TCP is constantly being improved.  A simpler formula, which gives\
    \ an\n   upper bound on the performance of any AIMD algorithm which is likely\n\
    \   to be implemented in TCP in the future, was derived by Ott, et al.\n   [MSMO97].\n\
    \                     MSS   1\n           BW = C    --- -------\n            \
    \         RTT sqrt(p)\n   where C is 0.93.\n"
- title: 8.5.2.  Assumptions
  contents:
  - "8.5.2.  Assumptions\n   Both formulae assume that the TCP Receiver Window is\
    \ not limiting the\n   performance of the connection.  Because the receiver window\
    \ is\n   entirely determined by end-hosts, we assume that hosts will maximize\n\
    \   the announced receiver window to maximize their network performance.\n   Both\
    \ of these formulae allow BW to become infinite if there is no\n   loss.  However,\
    \ an Internet path will drop packets at bottlenecked\n   queues if the load is\
    \ too high.  Thus, a completely lossless TCP/IP\n   network can never occur (unless\
    \ the network is being underutilized).\n   The RTT used is the arithmetic average,\
    \ including queuing delays.\n   The formulae are for a single TCP connection.\
    \  If a path carries many\n   TCP connections, each will follow the formulae above\
    \ independently.\n   The formulae assume long-running TCP connections.  For connections\n\
    \   that are extremely short (<10 packets) and don't lose any packets,\n   performance\
    \ is driven by the TCP slow-start algorithm.  For\n   connections of medium length,\
    \ where on average only a few segments\n   are lost, single connection performance\
    \ will actually be slightly\n   better than given by the formulae above.\n   The\
    \ difference between the simple and complex formulae above is that\n   the complex\
    \ formula includes the effects of TCP retransmission\n   timeouts.  For very low\
    \ levels of packet loss (significantly less\n   than 1%), timeouts are unlikely\
    \ to occur, and the formulae lead to\n   very similar results.  At higher packet\
    \ losses (1% and above), the\n   complex formula gives a more accurate estimate\
    \ of performance (which\n   will always be significantly lower than the result\
    \ from the simple\n   formula).\n   Note that these formulae break down as p approaches\
    \ 100%.\n"
- title: 8.5.3.  Analysis of Link-Layer Effects on TCP Performance
  contents:
  - "8.5.3.  Analysis of Link-Layer Effects on TCP Performance\n   Consider the following\
    \ example:\n   A designer invents a new wireless link layer which, on average,\
    \ loses\n   1% of IP packets.  The link layer supports packets of up to 1040\n\
    \   bytes, and has a one-way delay of 20 msec.\n   If this link were to be used\
    \ on an Internet path with a round trip\n   time greater than 80ms, the upper\
    \ bound may be computed by:\n   For MSS, use 1000 bytes to exclude the 40 bytes\
    \ of minimum IPv4 and\n   TCP headers.\n   For RTT, use 120 msec (80 msec for\
    \ the Internet part, plus 20 msec\n   each way for the new wireless link).\n \
    \  For p, use .01.  For C, assume 1.\n   The simple formula gives:\n      BW =\
    \ (1000 * 8 bits) / (.120 sec * sqrt(.01)) = 666 kbit/sec\n   The more complex\
    \ formula gives:\n      BW = 402.9 kbit/sec\n   If this were a 2 Mb/s wireless\
    \ LAN, the designers might be somewhat\n   disappointed.\n   Some observations\
    \ on performance:\n   1.  We have assumed that the packet losses on the link layer\
    \ are\n       interpreted as congestion by TCP.  This is a \"fact of life\" that\n\
    \       must be accepted.\n   2.  The equations for TCP performance are all expressed\
    \ in terms of\n       packet loss, but many subnetwork designers think in terms\
    \ of\n       bit-error ratio.  *If* channel bit errors are independent, then\n\
    \       the probability of a packet being corrupted is:\n         p = 1 - ([1\
    \ - BER]^[FRAME_SIZE*8])\n       Here we assume FRAME_SIZE is in bytes and \"\
    ^\" represents\n       exponentiation.  It includes the user data and all headers\n\
    \       (TCP,IP and subnetwork).  (Note: this analysis assumes the\n       subnetwork\
    \ does not perform ARQ or transparent fragmentation\n       [RFC3366].)  If the\
    \ inequality\n         BER * [FRAME_SIZE*8] << 1\n       holds, the packet loss\
    \ probability p can be approximated by:\n         p = BER * [FRAME_SIZE*8]\n \
    \      These equations can be used to apply BER to the performance\n       equations\
    \ above.\n       Note that FRAME_SIZE can vary from one packet to the next.  Small\n\
    \       packets (such as TCP acks) generally have a smaller probability\n    \
    \   of packet error than, say, a TCP packet carrying one MSS (maximum\n      \
    \ segment size) of user data.  A flow of small TCP acks can be\n       expected\
    \ to be slightly more reliable than a stream of larger TCP\n       data segments.\n\
    \       It bears repeating that the above analysis assumes that bit\n       errors\
    \ are statistically independent.  Because this is not true\n       for many real\
    \ links, our computation of p is actually an upper\n       bound, not the exact\
    \ probability of packet loss.\n       There are many reasons why bit errors are\
    \ not independent on real\n       links.  Many radio links are affected by propagation\
    \ fading or by\n       interference that lasts over many bit times.  Also, links\
    \ with\n       Forward Error Correction (FEC) generally have very non-uniform\n\
    \       bit error distributions that depend on the type of FEC, but in\n     \
    \  general the uncorrected errors tend to occur in bursts even when\n       channel\
    \ symbol errors are independent.  In all such cases, our\n       computation of\
    \ p from BER can only place an upper limit on the\n       packet loss rate.\n\
    \       If the distribution of errors under the FEC scheme is known, one\n   \
    \    could apply the same type of analysis as above, using the correct\n     \
    \  distribution function for the BER.  It is more likely in these\n       FEC\
    \ cases, however, that empirical methods are needed to\n       determine the actual\
    \ packet loss rate.\n   3.  Note that the packet size plays an important role.\
    \  If the\n       subnetwork loss characteristics are such that large packets\
    \ have\n       the same probability of loss as smaller packets, then larger\n\
    \       packets will yield improved performance.\n   4.  We have chosen a specific\
    \ RTT that might occur on a wide-area\n       Internet path within the USA.  It\
    \ is important to recognize that\n       a variety of RTT values are experienced\
    \ in the Internet.\n       For example, RTTs are typically less than 10 msec in\
    \ a wired LAN\n       environment when communicating with a local host.  International\n\
    \       connections may have RTTs of 200 msec or more.  Modems and other\n   \
    \    low-capacity links can add considerable delay due to their long\n       packet\
    \ transmission (serialisation) times.\n       Links over geostationary repeater\
    \ satellites have one-way speed-\n       of-light delays of around 250ms, a minimum\
    \ of 125ms propagation\n       delay up to the satellite and 125ms down.  The\
    \ RTT of an end-to-\n       end TCP connection that includes such a link can be\
    \ expected to\n       be greater than 250ms.\n       Queues on heavily-congested\
    \ links may back up, increasing RTTs.\n       Finally, virtual private networks\
    \ (VPNs) and other forms of\n       encryption and tunneling can add significant\
    \ end-to-end delay to\n       network connections.\n"
- title: 9.  Quality-of-Service (QoS) considerations
  contents:
  - "9.  Quality-of-Service (QoS) considerations\n   It is generally recognized that\
    \ specific service guarantees are\n   needed to support real-time multimedia,\
    \ toll-quality telephony, and\n   other performance-critical applications.  The\
    \ provision of such\n   Quality of Service guarantees in the Internet is an active\
    \ area of\n   research and standardization.  The IETF has not converged on a single\n\
    \   service model, set of services, or single mechanism that will offer\n   useful\
    \ guarantees to applications and be scalable to the Internet.\n   Indeed, the\
    \ IETF does not have a single definition of Quality of\n   Service.  [RFC2990]\
    \ represents a current understanding of the\n   challenges in architecting QoS\
    \ for the Internet.\n   There are presently two architectural approaches to providing\n\
    \   mechanisms for QoS support in the Internet.\n   IP Integrated Services (Intserv)\
    \ [RFC1633] provides fine-grained\n   service guarantees to individual flows.\
    \  Flows are identified by a\n   flow specification (flowspec), which creates\
    \ a stateful association\n   between individual packets by matching fields in\
    \ the packet header.\n   Capacity is reserved for the flow, and appropriate traffic\n\
    \   conditioning and scheduling is installed in routers along the path.\n   The\
    \ ReSerVation Protocol (RSVP) [RFC2205] [RFC2210] is usually, but\n   need not\
    \ necessarily be, used to install the flow QoS state.  Intserv\n   defines two\
    \ services, in addition to the Default (best effort)\n   service.\n   1.  Guaranteed\
    \ Service (GS) [RFC2212] offers hard upper bounds on\n       delay to flows that\
    \ conform to a traffic specification (TSpec).\n       It uses a fluid-flow model\
    \ to relate the TSpec and reserved\n       bandwidth (RSpec) to variable delay.\
    \  Non-conforming packets are\n       forwarded on a best-effort basis.\n   2.\
    \  Controlled Load Service (CLS) [RFC2211] offers delay and packet\n       loss\
    \ equivalent to that of an unloaded network to flows that\n       conform to a\
    \ TSpec, but no hard bounds.  Non-conforming packets\n       are forwarded on\
    \ a best-effort basis.\n   Intserv requires installation of state information\
    \ in every\n   participating router.  Performance guarantees cannot be made unless\n\
    \   this state is present in every router along the path.  This, along\n   with\
    \ RSVP processing and the need for usage-based accounting, is\n   believed to\
    \ have scalability problems, particularly in the core of\n   the Internet [RFC2208].\n\
    \   IP Differentiated Services (Diffserv) [RFC2475] provides a \"toolkit\"\n \
    \  offering coarse-grained controls to aggregates of flows.  Diffserv in\n   itself\
    \ does *not* provide QoS guarantees, but can be used to\n   construct services\
    \ with QoS guarantees across a Diffserv domain.\n   Diffserv attempts to address\
    \ the scaling issues associated with\n   Intserv by requiring state awareness\
    \ only at the edge of a Diffserv\n   domain.  At the edge, packets are classified\
    \ into flows, and the\n   flows are conditioned (marked, policed, or shaped) to\
    \ a traffic\n   conditioning specification (TCS).  A Diffserv Codepoint (DSCP),\n\
    \   identifying a per-hop behavior (PHB), is set in each packet header.\n   The\
    \ DSCP is carried in the DS-field, subsuming six bits of the former\n   Type-of-Service\
    \ (ToS) byte [RFC791] of the IP header [RFC2474].   The\n   PHB denotes the forwarding\
    \ behavior to be applied to the packet in\n   each node in the Diffserv domain.\
    \  Although there is a \"recommended\"\n   DSCP associated with each PHB, the\
    \ mappings from DSCPs to PHBs are\n   defined by the DS-domain.  In fact, there\
    \ can be several DSCPs\n   associated with the same PHB.  Diffserv presently defines\
    \ three PHBs.\n   1.  The class selector PHB [RFC2474] replaces the IP precedence\
    \ field\n       of the former ToS byte.  It offers relative forwarding\n     \
    \  priorities.\n   2.  The Expedited Forwarding (EF) PHB [RFC3246] [RFC3248] guarantees\n\
    \       that packets will have a well-defined minimum departure rate\n       which,\
    \ if not exceeded, ensures that the associated queues are\n       short or empty.\
    \  EF is intended to support services that offer\n       tightly-bounded loss,\
    \ delay, and delay jitter.\n   3.  The Assured Forwarding (AF) PHB group [RFC2597]\
    \ offers different\n       levels of forwarding assurance for each aggregated\
    \ flow of\n       packets.  Each AF group is independently allocated forwarding\n\
    \       resources.  Packets are marked with one of three drop\n       precedences;\
    \ those with the highest drop precedence are dropped\n       with lower probability\
    \ than those marked with the lowest drop\n       precedence.  DSCPs are recommended\
    \ for four independent AF\n       groups, although a DS domain can have more or\
    \ fewer AF groups.\n   Ongoing work in the IETF is addressing ways to support\
    \ Intserv with\n   Diffserv.  There is some belief (e.g., as expressed in [RFC2990])\n\
    \   that such an approach will allow individual flows to receive service\n   guarantees\
    \ and scale to the global Internet.\n   The QoS guarantees that can be offered\
    \ by the IP layer are a product\n   of two factors:\n   1.  the concatenation\
    \ of the QoS guarantees offered by the subnets\n       along the path of a flow.\
    \  This implies that a subnet may wish to\n       offer multiple services (with\
    \ different QoS guarantees) to the IP\n       layer, which can then determine\
    \ which flows use which subnet\n       service.  To put it another way, forwarding\
    \ behavior in the\n       subnet needs to be \"clued\" by the forwarding behavior\
    \ (service or\n       PHB) at the IP layer, and\n   2.  the operation of a set\
    \ of cooperating mechanisms, such as\n       bandwidth reservation and admission\
    \ control, policy management,\n       traffic classification, traffic conditioning\
    \ (marking, policing\n       and/or shaping), selective discard, queuing, and\
    \ scheduling.\n       Note that support for QoS in subnets may require similar\n\
    \       mechanisms, especially when these subnets are general topology\n     \
    \  subnets (e.g., ATM, frame relay, or MPLS) or shared media\n       subnets.\n\
    \   Many subnetwork designers face inherent tradeoffs between delay,\n   throughput,\
    \ reliability, and cost.  Other subnetworks have parameters\n   that manage bandwidth,\
    \ internal connection state, and the like.\n   Therefore, the following subnetwork\
    \ capabilities may be desirable,\n   although some might be trivial or moot if\
    \ the subnet is a dedicated\n   point-to-point link.\n   1.  The subnetwork should\
    \ have the ability to reserve bandwidth for a\n       connection or flow and schedule\
    \ packets accordingly.\n   2.  Bandwidth reservations should be based on a one-\
    \ or two-token\n       bucket model, depending on whether the service is intended\
    \ to\n       support constant-rate or bursty traffic.\n   3.  If a connection\
    \ or flow does not use its reserved bandwidth at a\n       given time, the unused\
    \ bandwidth should be available for other\n       flows.\n   4.  Packets in excess\
    \ of a connection or flow's agreed rate should be\n       forwarded as best-effort\
    \ or discarded, depending on the service\n       offered by the subnet to the\
    \ IP layer.\n   5.  If a subnet contains error control mechanisms (retransmission\n\
    \       and/or FEC), it should be possible for the IP layer to influence\n   \
    \    the inherent tradeoffs between uncorrected errors, packet losses,\n     \
    \  and delay.  These capabilities at the subnet/IP layer service\n       boundary\
    \ correspond to selection of more or less error control\n       and/or to selection\
    \ of particular error control mechanisms within\n       the subnetwork.\n   6.\
    \  The subnet layer should know, and be able to inform the IP layer,\n       how\
    \ much fixed delay and delay jitter it offers for a flow or\n       connection.\
    \  If the Intserv model is used, the delay jitter\n       component may be best\
    \ expressed in terms of the TSpec/RSpec model\n       described in [RFC2212].\n\
    \   7.  Support of the Diffserv class selectors [RFC2474] suggests that\n    \
    \   the subnet might consider mechanisms that support priorities.\n"
- title: 10.  Fairness vs Performance
  contents:
  - "10.  Fairness vs Performance\n   Subnetwork designers should be aware of the\
    \ tradeoffs between\n   fairness and efficiency inherent in many transmission\
    \ scheduling\n   algorithms.  For example, many local area networks use contention\n\
    \   protocols to resolve access to a shared transmission channel.  These\n   protocols\
    \ represent overhead.  While limiting the amount of data that\n   a subnet node\
    \ may transmit per contention cycle helps assure timely\n   access to the channel\
    \ for each subnet node, it also increases\n   contention overhead per unit of\
    \ data sent.\n   In some mobile radio networks, capacity is limited by interference,\n\
    \   which in turn depends on average transmitter power.  Some receivers\n   may\
    \ require considerably more transmitter power (generating more\n   interference\
    \ and consuming more channel capacity) than others.\n   In each case, the scheduling\
    \ algorithm designer must balance\n   competing objectives: providing a fair share\
    \ of capacity to each\n   subnet node while maximizing the total capacity of the\
    \ network.  One\n   approach for balancing performance and fairness is outlined\
    \ in\n   [ES00].\n"
- title: 11.  Delay Characteristics
  contents:
  - "11.  Delay Characteristics\n   The TCP sender bases its retransmission timeout\
    \ (RTO) on measurements\n   of the round trip delay experienced by previous packets.\
    \  This allows\n   TCP to adapt automatically to the very wide range of delays\
    \ found on\n   the Internet.  The recommended algorithms are described in [RFC2988].\n\
    \   Evaluations of TCP's retransmission timer can be found in [AP99] and\n   [LS00].\n\
    \   These algorithms model the delay along an Internet path as a\n   normally-distributed\
    \ random variable with a slowly-varying mean and\n   standard deviation.  TCP\
    \ estimates these two parameters by\n   exponentially smoothing individual delay\
    \ measurements, and it sets\n   the RTO to the estimated mean delay plus some\
    \ fixed number of\n   standard deviations.  (The algorithm actually uses mean\
    \ deviation as\n   an approximation to standard deviation, because it is easier\
    \ to\n   compute.)\n   The goal is to compute an RTO that is small enough to detect\
    \ and\n   recover from packet losses while minimizing unnecessary (\"spurious\"\
    )\n   retransmissions when packets are unexpectedly delayed but not lost.\n  \
    \ Although these goals conflict, the algorithm works well when the\n   delay variance\
    \ along the Internet path is low, or the packet loss\n   rate is low.\n   If the\
    \ path delay variance is high, TCP sets an RTO that is much\n   larger than the\
    \ mean of the measured delays.  If the packet loss rate\n   is low, the large\
    \ RTO is of little consequence, as timeouts occur\n   only rarely.  Conversely,\
    \ if the path delay variance is low, then TCP\n   recovers quickly from lost packets;\
    \ again, the algorithm works well.\n   However, when delay variance and the packet\
    \ loss rate are both high,\n   these algorithms perform poorly, especially when\
    \ the mean delay is\n   also high.\n   Because TCP uses returning acknowledgments\
    \ as a \"clock\" to time the\n   transmission of additional data, excessively\
    \ high delays (even if the\n   delay variance is low) also affect TCP's ability\
    \ to fully utilize a\n   high-speed transmission pipe.  It also slows the recovery\
    \ of lost\n   packets, even when delay variance is small.\n   Subnetwork designers\
    \ should therefore minimize all three parameters\n   (delay, delay variance, and\
    \ packet loss) as much as possible.\n   In many subnetworks, these parameters\
    \ are inherently in conflict.\n   For example, on a mobile radio channel, the\
    \ subnetwork designer can\n   use retransmission (ARQ) and/or forward error correction\
    \ (FEC) to\n   trade off delay, delay variance, and packet loss in an effort to\n\
    \   improve TCP performance.  While ARQ increases delay variance, FEC\n   does\
    \ not.  However, FEC (especially when combined with interleaving)\n   often increases\
    \ mean delay, even on good channels where ARQ\n   retransmissions are not needed\
    \ and ARQ would not increase either the\n   delay or the delay variance.\n   The\
    \ tradeoffs among these error control mechanisms and their\n   interactions with\
    \ TCP can be quite complex, and are the subject of\n   much ongoing research.\
    \  We therefore recommend that subnetwork\n   designers provide as much flexibility\
    \ as possible in the\n   implementation of these mechanisms, and provide access\
    \ to them as\n   discussed above in the section on Quality of Service.\n"
- title: 12.  Bandwidth Asymmetries
  contents:
  - "12.  Bandwidth Asymmetries\n   Some subnetworks may provide asymmetric bandwidth\
    \ (or may cause TCP\n   packet flows to experience asymmetry in the capacity)\
    \ and the\n   Internet protocol suite will generally still work fine.  However,\n\
    \   there is a case when such a scenario reduces TCP performance.  Since\n   TCP\
    \ data segments are \"clocked\" out by returning acknowledgments, TCP\n   senders\
    \ are limited by the rate at which ACKs can be returned\n   [BPK98].  Therefore,\
    \ when the ratio of the available capacity of the\n   Internet path carrying the\
    \ data to the bandwidth of the return path\n   of the acknowledgments is too large,\
    \ the slow return of the ACKs\n   directly impacts performance.  Since ACKs are\
    \ generally smaller than\n   data segments, TCP can tolerate some asymmetry, but\
    \ as a general\n   rule, designers of subnetworks should be aware that subnetworks\
    \ with\n   significant asymmetry can result in reduced performance, unless\n \
    \  issues are taken to mitigate this [RFC3449].\n   Several strategies have been\
    \ identified for reducing the impact of\n   asymmetry of the network path between\
    \ two TCP end hosts, e.g.,\n   [RFC3449].  These techniques attempt to reduce\
    \ the number of ACKs\n   transmitted over the return path (low bandwidth channel)\
    \ by changes\n   at the end host(s), and/or by modification of subnetwork packet\n\
    \   forwarding.  While these solutions may mitigate the performance\n   issues\
    \ caused by asymmetric subnetworks, they do have associated cost\n   and may have\
    \ other implications.  A fuller discussion of strategies\n   and their implications\
    \ is provided in [RFC3449].\n"
- title: 13.  Buffering, flow and congestion control
  contents:
  - "13.  Buffering, flow and congestion control\n   Many subnets include multiple\
    \ links with varying traffic demands and\n   possibly different transmission speeds.\
    \  At each link there must be a\n   queuing system, including buffering, scheduling,\
    \ and a capability to\n   discard excess subnet packets.  These queues may also\
    \ be part of a\n   subnet flow control or congestion control scheme.\n   For the\
    \ purpose of this discussion, we talk about packets without\n   regard to whether\
    \ they refer to a complete IP packet or a subnetwork\n   frame.  At each queue,\
    \ a packet experiences a delay that depends on\n   competing traffic and the scheduling\
    \ discipline, and is subjected to\n   a local discarding policy.\n   Some subnets\
    \ may have flow or congestion control mechanisms in\n   addition to packet dropping.\
    \  Such mechanisms can operate on\n   components in the subnet layer, such as\
    \ schedulers, shapers, or\n   discarders, and can affect the operation of IP forwarders\
    \ at the\n   edges of the subnet.  However, with the exception of Explicit\n \
    \  Congestion Notification [RFC3168] (discussed below), IP has no way to\n   pass\
    \ explicit congestion or flow control signals to TCP.\n   TCP traffic, especially\
    \ aggregated TCP traffic, is bursty.  As a\n   result, instantaneous queue depths\
    \ can vary dramatically, even in\n   nominally stable networks.  For optimal performance,\
    \ packets should\n   be dropped in a controlled fashion, not just when buffer\
    \ space is\n   unavailable.  How much buffer space should be supplied is still\
    \ a\n   matter of debate, but as a rule of thumb, each node should have\n   enough\
    \ buffering to hold one link_bandwidth*link_delay product's\n   worth of data\
    \ for each TCP connection sharing the link.\n   This is often difficult to estimate,\
    \ since it depends on parameters\n   beyond the subnetwork's control or knowledge.\
    \  Internet nodes\n   generally do not implement admission control policies, and\
    \ cannot\n   limit the number of TCP connections that use them.  In general, it\
    \ is\n   wise to err in favor of too much buffering rather than too little.\n\
    \   It may also be useful for subnets to incorporate mechanisms that\n   measure\
    \ propagation delays to assist in buffer sizing calculations.\n   There is a rough\
    \ consensus in the research community that active\n   queue management is important\
    \ to improving fairness, link\n   utilization, and throughput [RFC2309].  Although\
    \ there are questions\n   and concerns about the effectiveness of active queue\
    \ management\n   (e.g., [MBDL99]), it is widely considered an improvement over\
    \ tail-\n   drop discard policies.\n   One form of active queue management is\
    \ the Random Early Detection\n   (RED) algorithm [RED93], a family of related\
    \ algorithms.  In one\n   version of RED, an exponentially-weighted moving average\
    \ of the queue\n   depth is maintained:\n      When this average queue depth is\
    \ between a maximum threshold\n      max_th and a minimum threshold min_th, the\
    \ probability of packets\n      that are dropped is proportional to the amount\
    \ by which the\n      average queue depth exceeds min_th.\n      When this average\
    \ queue depth is equal to max_th, the drop\n      probability is equal to a configurable\
    \ parameter max_p.\n      When this average queue depth is greater than max_th,\
    \ packets are\n      always dropped.\n   Numerous variants on RED appear in the\
    \ literature, and there are\n   other active queue management algorithms which\
    \ claim various\n   advantages over RED [GM02].\n   With an active queue management\
    \ algorithm, dropped packets become a\n   feedback signal to trigger more appropriate\
    \ congestion behavior by\n   the TCPs in the end hosts.  Randomization of dropping\
    \ tends to break\n   up the observed tendency of TCP windows belonging to different\
    \ TCP\n   connections to become synchronized by correlated drops, and it also\n\
    \   imposes a degree of fairness on those connections that implement TCP\n   congestion\
    \ avoidance properly.  Another important property of active\n   queue management\
    \ algorithms is that they attempt to keep average\n   queue depths short while\
    \ accommodating large short-term bursts.\n   Since TCP neither knows nor cares\
    \ whether congestive packet loss\n   occurs at the IP layer or in a subnet, it\
    \ may be advisable for\n   subnets that perform queuing and discarding to consider\
    \ implementing\n   some form of active queue management.  This is especially true\
    \ if\n   large aggregates of TCP connections are likely to share the same\n  \
    \ queue.  However, active queue management may be less effective in the\n   case\
    \ of many queues carrying smaller aggregates of TCP connections,\n   e.g., in\
    \ an ATM switch that implements per-VC queuing.\n   Note that the performance\
    \ of active queue management algorithms is\n   highly sensitive to settings of\
    \ configurable parameters, and also to\n   factors such as RTT [MBB00] [FB00].\n\
    \   Some subnets, most notably ATM, perform segmentation and reassembly\n   at\
    \ the subnetwork edges.  Care should be taken here in designing\n   discard policies.\
    \  If the subnet discards a fragment of an IP packet,\n   then the remaining fragments\
    \ become an unproductive load on the\n   subnet that can markedly degrade end-to-end\
    \ performance [RF95].\n   Subnetworks should therefore attempt to discard these\
    \ extra fragments\n   whenever one of them must be discarded.  If the IP packet\
    \ has already\n   been partially forwarded when discarding becomes necessary,\
    \ then\n   every remaining fragment except the one marking the end of the IP\n\
    \   packet should also be discarded.  For ATM subnets, this specifically\n   means\
    \ using Early Packet Discard and Partial Packet Discard [ATMFTM].\n   Some subnets\
    \ include flow control mechanisms that effectively require\n   that the rate of\
    \ traffic flows be shaped upon entry to the subnet.\n   One example of such a\
    \ subnet mechanism is in the ATM Available Bit\n   rate (ABR) service category\
    \ [ATMFTM].  Such flow control mechanisms\n   have the effect of making the subnet\
    \ nearly lossless by pushing\n   congestion into the IP routers at the edges of\
    \ the subnet.  In such a\n   case, adequate buffering and discard policies are\
    \ needed in these\n   routers to deal with a subnet that appears to have varying\
    \ bandwidth.\n   Whether there is a benefit in this kind of flow control is\n\
    \   controversial; there are numerous simulation and analytical studies\n   that\
    \ go both ways.  It appears that some of the issues leading to\n   such different\
    \ results include sensitivity to ABR parameters, use of\n   binary rather than\
    \ explicit rate feedback, use (or not) of per-VC\n   queuing, and the specific\
    \ ATM switch algorithms selected for the\n   study.  Anecdotally, some large networks\
    \ that used IP over ABR to\n   carry TCP traffic have claimed it to be successful,\
    \ but have\n   published no results.\n   Another possible approach to flow control\
    \ in the subnet would be to\n   work with TCP Explicit Congestion Notification\
    \ (ECN) semantics\n   [RFC3168] through utilizing explicit congestion indicators\
    \ in subnet\n   frames.  Routers at the edges of the subnet, rather than shaping,\n\
    \   would set the explicit congestion bit in those IP packets that are\n   received\
    \ in subnet frames that have an ECN indication.  Nodes in the\n   subnet would\
    \ need to implement an active queue management protocol\n   that marks subnet\
    \ frames instead of dropping them.\n   ECN is currently a proposed standard, but\
    \ it is not yet widely\n   deployed.\n"
- title: 14.  Compression
  contents:
  - "14.  Compression\n   Application data compression is a function that can usually\
    \ be\n   omitted in the subnetwork.  The endpoints typically have more CPU and\n\
    \   memory resources to run a compression algorithm and a better\n   understanding\
    \ of what is being compressed.  End-to-end compression\n   benefits every network\
    \ element in the path, while subnetwork-layer\n   compression, by definition,\
    \ benefits only a single subnetwork.\n   Data presented to the subnetwork layer\
    \ may already be in a compressed\n   format (e.g., a JPEG file), compressed at\
    \ the application layer\n   (e.g., the optional \"gzip\", \"compress\", and \"\
    deflate\" compression in\n   HTTP/1.1 [RFC2616]), or compressed at the IP layer\
    \ (the IP Payload\n   Compression Protocol [RFC3173] supports DEFLATE [RFC2394]\
    \ and LZS\n   [RFC2395]).  Compression at the subnetwork edges is of no benefit\
    \ for\n   any of these cases.\n   The subnetwork may also process data that has\
    \ been encrypted by the\n   application (OpenPGP [RFC2440] or S/MIME [RFC2633]),\
    \ just above TCP\n   (SSL, TLS [RFC2246]), or just above IP (IPsec ESP [RFC2406]).\n\
    \   Ciphers generate high-entropy bit streams lacking any patterns that\n   can\
    \ be exploited by a compression algorithm.\n   However, much data is still transmitted\
    \ uncompressed over the\n   Internet, so subnetwork compression may be beneficial.\
    \  Any\n   subnetwork compression algorithm must not expand uncompressible data,\n\
    \   e.g., data that has already been compressed or encrypted.\n   We make a strong\
    \ recommendation that subnetworks operating at low\n   speed or with small MTUs\
    \ compress IP and transport-level headers (TCP\n   and UDP) using several header\
    \ compression schemes developed within\n   the IETF [RFC3150].  An uncompressed\
    \ 40-byte TCP/IP header takes\n   about 33 milliseconds to send at 9600 bps. \
    \ \"VJ\" TCP/IP header\n   compression [RFC1144] compresses most headers to 3-5\
    \ bytes, reducing\n   transmission time to several milliseconds on dialup modem\
    \ links.\n   This is especially beneficial for small, latency-sensitive packets\
    \ in\n   interactive sessions.\n   Similarly, RTP compression schemes, such as\
    \ CRTP [RFC2508] and ROHC\n   [RFC3095], compress most IP/UDP/RTP headers to 1-4\
    \ bytes.  The\n   resulting savings are especially significant when audio packets\
    \ are\n   kept small to minimize store-and-forward latency.\n   Designers should\
    \ consider the effect of the subnetwork error rate on\n   the performance of header\
    \ compression.  TCP ordinarily recovers from\n   lost packets by retransmitting\
    \ only those packets that were actually\n   lost; packets arriving correctly after\
    \ a packet loss are kept on a\n   resequencing queue and do not need to be retransmitted.\
    \  In VJ TCP/IP\n   [RFC1144] header compression, however, the receiver cannot\
    \ explicitly\n   notify a sender of data corruption and subsequent loss of\n \
    \  synchronization between compressor and decompressor.  It relies\n   instead\
    \ on TCP retransmission to re-synchronize the decompressor.\n   After a packet\
    \ is lost, the decompressor must discard every\n   subsequent packet, even if\
    \ the subnetwork makes no further errors,\n   until the sending TCP retransmits\
    \ to re-synchronize the decompressor.\n   This effect can substantially magnify\
    \ the effect of subnetwork packet\n   losses if the sending TCP window is large,\
    \ as it will often be on a\n   path with a large bandwidth*delay product [LRKOJ99].\n\
    \   Alternate header compression schemes, such as those described in\n   [RFC2507],\
    \ include an explicit request for retransmission of an\n   uncompressed packet\
    \ to allow decompressor resynchronization without\n   waiting for a TCP retransmission.\
    \  However, these schemes are not yet\n   in widespread use.\n   Both TCP header\
    \ compression schemes do not compress widely-used TCP\n   options such as selective\
    \ acknowledgements (SACK).  Both fail to\n   compress TCP traffic that makes use\
    \ of explicit congestion\n   notification (ECN).  Work is under way in the IETF\
    \ ROHC WG to address\n   these shortcomings in a ROHC header compression scheme\
    \ for TCP\n   [RFC3095] [RFC3096].\n   The subnetwork error rate also is important\
    \ for RTP header\n   compression.  CRTP uses delta encoding, so a packet loss\
    \ on the link\n   causes uncertainty about the subsequent packets, which often\
    \ must be\n   discarded until the decompressor has notified the compressor and\
    \ the\n   compressor has sent re-synchronizing information.  This typically\n\
    \   takes slightly more than the end-to-end path round-trip time.  For\n   links\
    \ that combine significant error rates with latencies that\n   require multiple\
    \ packets to be in flight at a time, this leads to\n   significant error propagation,\
    \ i.e., subsequent losses caused by an\n   initial loss.\n   For links that are\
    \ both high-latency (multiple packets in flight from\n   a typical RTP stream)\
    \ and error-prone, RTP ROHC provides a more\n   robust way of RTP header compression,\
    \ at a cost of higher complexity\n   at the compressor and decompressor.  For\
    \ example, within a talk\n   spurt, only extended losses of (depending on the\
    \ mode chosen) 12-64\n   packets typically cause error propagation.\n"
- title: 15.  Packet Reordering
  contents:
  - "15.  Packet Reordering\n   The Internet architecture does not guarantee that\
    \ packets will arrive\n   in the same order in which they were originally transmitted;\n\
    \   transport protocols like TCP must take this into account.\n   However, reordering\
    \ does come at a cost with TCP as it is currently\n   defined.  Because TCP returns\
    \ a cumulative acknowledgment (ACK)\n   indicating the last in-order segment that\
    \ has arrived, out-of-order\n   segments cause a TCP receiver to transmit a duplicate\
    \ acknowledgment.\n   When the TCP sender notices three duplicate acknowledgments,\
    \ it\n   assumes that a segment was dropped by the network and uses the fast\n\
    \   retransmit algorithm [Jac90] [RFC2581] to resend the segment.  In\n   addition,\
    \ the congestion window is reduced by half, effectively\n   halving TCP's sending\
    \ rate.  If a subnetwork reorders segments\n   significantly such that three duplicate\
    \ ACKs are generated, the TCP\n   sender needlessly reduces the congestion window\
    \ and performance\n   suffers.\n   Packet reordering frequently occurs in parts\
    \ of the Internet, and it\n   seems to be difficult or impossible to eliminate\
    \ [BPS99].  For this\n   reason, research on improving TCP's behavior in the face\
    \ of packet\n   reordering [LK00] [BA02] has begun.\n   [BPS99] cites reasons\
    \ why it may even be undesirable to eliminate\n   reordering.  There are situations\
    \ where average packet latency can be\n   reduced, link efficiency can be increased,\
    \ and/or reliability can be\n   improved if reordering is permitted.  Examples\
    \ include certain high\n   speed switches within the Internet backbone and the\
    \ parallel links\n   used over many Internet paths for load splitting and redundancy.\n\
    \   This suggests that subnetwork implementers should try to avoid packet\n  \
    \ reordering whenever possible, but not if doing so compromises\n   efficiency,\
    \ impairs reliability, or increases average packet delay.\n   Note that every\
    \ header compression scheme currently standardized for\n   the Internet requires\
    \ in-order packet delivery on the link between\n   compressor and decompressor.\
    \  PPP is frequently used to carry\n   compressed TCP/IP packets; since it was\
    \ originally designed for\n   point-to-point and dialup links, it is assumed to\
    \ provide in-order\n   delivery.  For this reason, subnetwork implementers who\
    \ provide PPP\n   interfaces to VPNs and other more complex subnetworks, must\
    \ also\n   maintain in-order delivery of PPP frames.\n"
- title: 16.  Mobility
  contents:
  - "16.  Mobility\n   Internet users are increasingly mobile.  Not only are many\
    \ Internet\n   nodes laptop computers, but pocket organizers and mobile embedded\n\
    \   systems are also becoming nodes on the Internet.  These nodes may\n   connect\
    \ to many different access points on the Internet over time,\n   and they expect\
    \ this to be largely transparent to their activities.\n   Except when they are\
    \ not connected to the Internet at all, and for\n   performance differences when\
    \ they are connected, they expect that\n   everything will \"just work\" regardless\
    \ of their current Internet\n   attachment point or local subnetwork technology.\n\
    \   Changing a host's Internet attachment point involves one or more of\n   the\
    \ following steps.\n   First, if use of the local subnetwork is restricted, the\
    \ user's\n   credentials must be verified and access granted.  There are many\
    \ ways\n   to do this.  A trivial example would be an \"Internet cafe\" that\n\
    \   grants physical access to the subnetwork for a fee.  Subnetworks may\n   implement\
    \ technical access controls of their own; one example is IEEE\n   802.11 Wireless\
    \ Equivalent Privacy [IEEE80211].  It is common\n   practice for both cellular\
    \ telephone and Internet service providers\n   (ISPs) to agree to serve one anothers'\
    \ users; RADIUS [RFC2865] is the\n   standard method for ISPs to exchange authorization\
    \ information.\n   Second, the host may have to be reconfigured with IP parameters\n\
    \   appropriate for the local subnetwork.  This usually includes setting\n   an\
    \ IP address, default router, and domain name system (DNS) servers.\n   On multiple-access\
    \ networks, the Dynamic Host Configuration Protocol\n   (DHCP) [RFC2131] is almost\
    \ universally used for this purpose.  On PPP\n   links, these functions are performed\
    \ by the IP Control Protocol\n   (IPCP) [RFC1332].\n   Third, traffic destined\
    \ for the mobile host must be routed to its\n   current location.  This roaming\
    \ function is the most common meaning\n   of the term \"Internet mobility\".\n\
    \   Internet mobility can be provided at any of several layers in the\n   Internet\
    \ protocol stack, and there is ongoing debate as to which is\n   the most appropriate\
    \ and efficient.  Mobility is already a feature of\n   certain application layer\
    \ protocols; the Post Office Protocol (POP)\n   [RFC1939] and the Internet Message\
    \ Access Protocol (IMAP) [RFC3501]\n   were created specifically to provide mobility\
    \ in the receipt of\n   electronic mail.\n   Mobility can also be provided at\
    \ the IP layer [RFC3344].  This\n   mechanism provides greater transparency, viz.,\
    \ IP addresses that\n   remain fixed as the nodes move, but at the cost of potentially\n\
    \   significant network overhead and increased delay because of the sub-\n   optimal\
    \ network routing and tunneling involved.\n   Some subnetworks may provide internal\
    \ mobility, transparent to IP, as\n   a feature of their own internal routing\
    \ mechanisms.  To the extent\n   that these simplify routing at the IP layer,\
    \ reduce the need for\n   mechanisms like Mobile IP, or exploit mechanisms unique\
    \ to the\n   subnetwork, this is generally desirable.  This is especially true\n\
    \   when the subnetwork covers a relatively small geographic area and the\n  \
    \ users move rapidly between the attachment points within that area.\n   Examples\
    \ of internal mobility schemes include Ethernet switching and\n   intra-system\
    \ handoff in cellular telephony.\n   However, if the subnetwork is physically\
    \ large and connects to other\n   parts of the Internet at multiple geographic\
    \ points, care should be\n   taken to optimize the wide-area routing of packets\
    \ between nodes on\n   the external Internet and nodes on the subnet.  This is\
    \ generally\n   done with \"nearest exit\" routing strategies.  Because a given\n\
    \   subnetwork may be unaware of the actual physical location of a\n   destination\
    \ on another subnetwork, it simply routes packets bound for\n   the other subnetwork\
    \ to the nearest router between the two.  This\n   implies some awareness of IP\
    \ addressing and routing within the\n   subnetwork.  The subnetwork may wish to\
    \ use IP routing internally for\n   wide area routing and restrict subnetwork-specific\
    \ routing to\n   constrained geographic areas where the effects of suboptimal\
    \ routing\n   are minimized.\n"
- title: 17.  Routing
  contents:
  - "17.  Routing\n   Subnetworks connecting more than two systems must provide their\
    \ own\n   internal Layer-2 forwarding mechanisms, either implicitly (e.g.,\n \
    \  broadcast) or explicitly (e.g., switched).  Since routing is the\n   major\
    \ function of the Internet layer, the question naturally arises\n   as to the\
    \ interaction between routing at the Internet layer and\n   routing in the subnet,\
    \ and proper division of function between the\n   two.\n   Layer-2 subnetworks\
    \ can be point-to-point, connecting two systems, or\n   multipoint.  Multipoint\
    \ subnetworks can be broadcast (e.g., shared\n   media or emulated) or non-broadcast.\
    \  Generally, IP considers\n   multipoint subnetworks as broadcast, with shared-medium\
    \ Ethernet as\n   the canonical (and historical) example, and point-to-point\n\
    \   subnetworks as a degenerate case.  Non-broadcast subnetworks may\n   require\
    \ additional mechanisms, e.g., above IP at the routing layer\n   [RFC2328].\n\
    \   IP is ignorant of the topology of the subnetwork layer.  In\n   particular,\
    \ reconfiguration of subnetwork paths is not tracked by the\n   IP layer.  IP\
    \ is only affected by whether it can send/receive packets\n   sent to the remotely\
    \ connected systems via the subnetwork interface\n   (i.e., the reachability from\
    \ one router to another).  IP further\n   considers that subnetworks are largely\
    \ static -- that both their\n   membership and existence are stable at routing\
    \ timescales (tens of\n   seconds); changes to these are considered re-provisioning,\
    \ rather\n   than routing.\n   Routing functionality in a subnetwork is related\
    \ to addressing in\n   that subnetwork.  Resolution of addresses on subnetwork\
    \ links is\n   required for forwarding IP packets across links (e.g., ARP for\
    \ IPv4,\n   or ND for IPv6).  There is unlikely to be direct interaction between\n\
    \   subnetwork routing and IP routing.  Where broadcast is provided or\n   explicitly\
    \ emulated, address resolution can be used directly; where\n   not provided, the\
    \ link layer routing may interface to a protocol for\n   resolution, e.g., to\
    \ the Next-Hop Resolution Protocol [RFC2322] to\n   provide context-dependent\
    \ address resolution capabilities.\n   Subnetwork routing can either complement\
    \ or compete with IP routing.\n   It complements IP when a subnetwork encapsulates\
    \ its internal\n   routing, and where the effects of that routing are not visible\
    \ at the\n   IP layer.  However, if different paths in the subnetwork have\n \
    \  characteristics that affect IP routing, it can affect or even inhibit\n   the\
    \ convergence of IP routing.\n   Routing protocols generally consider Layer-2\
    \ subnetworks, i.e., with\n   subnet masks and no intermediate IP hops, to have\
    \ uniform routing\n   metrics to all members.  Routing can break when a link's\n\
    \   characteristics do not match the routing metric, in this case, e.g.,\n   when\
    \ some member pairs have different path characteristics.  Consider\n   a virtual\
    \ Ethernet subnetwork that includes both nearby (sub-\n   millisecond latency)\
    \ and remote (100's of milliseconds away) systems.\n   Presenting that group as\
    \ a single subnetwork means that some routing\n   protocols will assume that all\
    \ pairs have the same delay, and that\n   that delay is small.  Because this is\
    \ not the case, the routing\n   tables constructed may be suboptimal or may even\
    \ fail to converge.\n   When a subnetwork is used for transit between a set of\
    \ routers, it\n   conventionally provides the equivalent of a full mesh of point-to-\n\
    \   point links.  Simplicity of the internal subnet structure can be used\n  \
    \ (e.g., via NHRP [RFC2332]) to reduce the size of address resolution\n   tables,\
    \ but routing exchanges will continue to reflect the full mesh\n   they emulate.\
    \  In general, subnetworks should not be used as a\n   transit among a set of\
    \ routers where routing protocols would break if\n   a full mesh of equivalent\
    \ point-to-point links were used.\n   Some subnetworks have special features that\
    \ allow the use of more\n   effective or responsive routing mechanisms that cannot\
    \ be implemented\n   in IP because of its need for generality.  One example is\
    \ the self-\n   learning bridge algorithm widely used in Ethernet networks.  Learning\n\
    \   bridges perform Layer-2 subnetwork forwarding, avoiding the need for\n   dynamic\
    \ routing at each subnetwork hop.  Another is the \"handoff\"\n   mechanism in\
    \ cellular telephone networks, particularly the \"soft\n   handoff\" scheme in\
    \ IS-95 CDMA.\n   Subnetworks that cover large geographic areas or include links\
    \ of\n   widely-varying capabilities should be avoided.  IP routing generally\n\
    \   considers all multipoint subnets equivalent to a local, shared-medium\n  \
    \ link with uniform metrics between any pair of systems, and ignores\n   internal\
    \ subnetwork topology.  Where a subnetwork diverges from that\n   assumption,\
    \ it is the obligation of subnetwork designers to provide\n   compensating mechanisms.\
    \  Not doing so can affect the scalability and\n   convergence of IP routing,\
    \ as noted above.\n   The subnetwork designer who decides to implement internal\
    \ routing\n   should consider whether a custom routing algorithm is warranted,\
    \ or\n   if an existing Internet routing algorithm or protocol may suffice.\n\
    \   The designer should consider whether this decision is to reduce the\n   address\
    \ resolution table size (possible, but with additional protocol\n   support required),\
    \ or is trying to reduce routing table complexity.\n   The latter may be better\
    \ achieved by partitioning the subnetwork,\n   either physically or logically,\
    \ and using network-layer protocols to\n   support partitioning (e.g., AS's in\
    \ BGP).  Protocols and routing\n   algorithms can be notoriously subtle, complex,\
    \ and difficult to\n   implement correctly.  Much work can be avoided if existing\
    \ protocols\n   or implementations can be readily reused.\n"
- title: 18.  Security Considerations
  contents:
  - "18.  Security Considerations\n   Security has become a high priority in the design\
    \ and operation of\n   the Internet.  The Internet is vast, and countless organizations\
    \ and\n   individuals own and operate its various components.  A consensus has\n\
    \   emerged for what might be called a \"security placement principle\": a\n \
    \  security mechanism is most effective when it is placed as close as\n   possible\
    \ to, and under the direct control of the owner of the asset\n   that it protects.\n\
    \   A corollary of this principle is that end-to-end security (e.g.,\n   confidentiality,\
    \ authentication, integrity, and access control)\n   cannot be ensured with subnetwork\
    \ security mechanisms.  Not only are\n   end-to-end security mechanisms much more\
    \ closely associated with the\n   end-user assets they protect, they are also\
    \ much more comprehensive.\n   For example, end-to-end security mechanisms cover\
    \ gaps that can\n   appear when otherwise good subnetwork mechanisms are concatenated.\n\
    \   This is an important application of the end-to-end principle [SRC81].\n  \
    \ Several security mechanisms that can be used end-to-end have already\n   been\
    \ deployed in the Internet and are enjoying increasing use.  The\n   most important\
    \ are the Secure Sockets Layer (SSL) [SSL2] [SSL3] and\n   TLS [RFC2246] primarily\
    \ used to protect web commerce, Pretty Good\n   Privacy (PGP) [RFC1991] and S/MIME\
    \ [RFCs-2630-2634], primarily used\n   to protect and authenticate email and software\
    \ distributions, the\n   Secure Shell (SSH), used for secure remote access and\
    \ file transfer,\n   and IPsec [RFC2401], a general purpose encryption and authentication\n\
    \   mechanism that sits just above IP and can be used by any IP\n   application.\
    \  (IPsec can actually be used either on an end-to-end\n   basis or between security\
    \ gateways that do not include either or both\n   end systems.)\n   Nonetheless,\
    \ end-to-end security mechanisms are not used as widely as\n   might be desired.\
    \  However, the group could not reach consensus on\n   whether subnetwork designers\
    \ should be actively encouraged to\n   implement mechanisms to protect user data.\n\
    \   The clear consensus of the working group held that subnetwork\n   security\
    \ mechanisms, especially when weak or incorrectly implemented\n   [BGW01], may\
    \ actually be counterproductive.  The argument is that\n   subnetwork security\
    \ mechanisms can lull end users into a false sense\n   of security, diminish the\
    \ incentive to deploy effective end-to-end\n   mechanisms, and encourage \"risky\"\
    \ uses of the Internet that would not\n   be made if users understood the inherent\
    \ limits of subnetwork\n   security mechanisms.\n   The other point of view encourages\
    \ subnetwork security on the\n   principle that it is better than the default\
    \ situation, which all too\n   often is no security at all.  Users of especially\
    \ vulnerable subnets\n   (such as consumers who have wireless home networks and/or\
    \ shared\n   media Internet access) often have control over at most one endpoint\n\
    \   -- usually a client -- and therefore cannot enforce the use of end-\n   to-end\
    \ mechanisms.  However, subnet security can be entirely adequate\n   for protecting\
    \ low-valued assets against the most likely threats.  In\n   any event, subnet\
    \ mechanisms do not preclude the use of end-to-end\n   mechanisms, which are typically\
    \ used to protect highly-valued assets.\n   This viewpoint recognizes that many\
    \ security policies implicitly\n   assume that the entire end-to-end path is composed\
    \ of a series of\n   concatenated links that are nominally physically secured.\
    \  That is,\n   these policies assume that all endpoints of all links are trusted,\n\
    \   and that access to the physical medium by attackers is difficult.  To\n  \
    \ meet the assumptions of such policies, explicit mechanisms are needed\n   for\
    \ links (especially shared medium links) that lack physical\n   protection.  This,\
    \ for example, is the rationale that underlies Wired\n   Equivalent Privacy (WEP)\
    \ in the IEEE 802.11 [IEEE80211] wireless LAN\n   standard, and the Baseline Privacy\
    \ Interface in the DOCSIS [DOCSIS1]\n   [DOCSIS2] data over cable television networks\
    \ standards.\n   We therefore recommend that subnetwork designers who choose to\n\
    \   implement security mechanisms to protect user data be as candid as\n   possible\
    \ with the details of such security mechanisms and the\n   inherent limits of\
    \ even the most secure mechanisms when implemented\n   in a subnetwork rather\
    \ than on an end-to-end basis.\n   In keeping with the \"placement principle\"\
    , a clear consensus exists\n   for another subnetwork security role: the protection\
    \ of the\n   subnetwork itself.  Possible threats to subnetwork assets include\n\
    \   theft of service and denial of service; shared media subnets tend to\n   be\
    \ especially vulnerable to such attacks.  In some cases, mechanisms\n   that protect\
    \ subnet assets can also improve (but cannot ensure) end-\n   to-end security.\n\
    \   One security service can be provided by the subnetwork that will aid\n   in\
    \ the solution of an overall Internet problem: subnetwork security\n   should\
    \ provide a mechanism to authenticate the source of a subnetwork\n   frame.  This\
    \ function is missing in some current protocols, e.g., the\n   use of ARP [RFC826]\
    \ to associate an IPv4 address with a MAC address.\n   The IPv6 Neighbor Discovery\
    \ (ND) [RFC2461] performs a similar\n   function.\n   There are well-known security\
    \ flaws with this address resolution\n   mechanism [Wilbur89].  However, the inclusion\
    \ of subnetwork frame\n   source authentication will permit a secure subnetwork\
    \ address.\n   Another potential role for subnetwork security is to protect users\n\
    \   against traffic analysis, i.e., identifying the communicating parties\n  \
    \ and determining their communication patterns and volumes even when\n   their\
    \ actual contents are protected by strong end-to-end security\n   mechanisms.\
    \  Lower-layer security can be more effective against\n   traffic analysis due\
    \ to its inherent ability to aggregate the\n   communications of multiple parties\
    \ sharing the same physical\n   facilities while obscuring higher-layer protocol\
    \ information that\n   indicates specific end points, such as IP addresses and\
    \ TCP/UDP port\n   numbers.\n   However, traffic analysis is a notoriously subtle\
    \ and difficult\n   threat to understand and defeat, far more so than threats\
    \ to\n   confidentiality and integrity.  We therefore urge extreme care in the\n\
    \   design of subnetwork security mechanisms specifically intended to\n   thwart\
    \ traffic analysis.\n   Subnetwork designers must keep in mind that design and\
    \ implementation\n   for security is difficult [Schneier00].  [Schneier95] describes\n\
    \   protocols and algorithms which are considered well-understood and\n   believed\
    \ to be sound.\n   Poor design process, subtle design errors and flawed implementation\n\
    \   can result in gaping vulnerabilities.  In recent years, a number of\n   subnet\
    \ standards have had problems exposed.  The following are\n   examples of mistakes\
    \ that have been made:\n   1.  Use of weak and untested algorithms [Crypto9912]\
    \ [BGW01].  For a\n       variety of reasons, algorithms were chosen which had\
    \ subtle\n       flaws, making them vulnerable to a variety of attacks.\n   2.\
    \  Use of \"security by obscurity\" [Schneier00] [Crypto9912].  One\n       common\
    \ mistake is to assume that keeping cryptographic algorithms\n       secret makes\
    \ them more secure.  This is intuitive, but wrong.\n       Full public disclosure\
    \ early in the design process attracts peer\n       review by knowledgeable cryptographers.\
    \  Exposure of flaws by\n       this review far outweighs any imagined benefit\
    \ from forcing\n       attackers to reverse engineer security algorithms.\n  \
    \ 3.  Inclusion of trapdoors [Schneier00] [Crypto9912].  Trapdoors are\n     \
    \  flaws surreptitiously left in an algorithm to allow it to be\n       broken.\
    \  This might be done to recover lost keys or to permit\n       surreptitious\
    \ access by governmental agencies.  Trapdoors can be\n       discovered and exploited\
    \ by malicious attackers.\n   4.  Sending passwords or other identifying information\
    \ as clear text.\n       For many years, analog cellular telephones could be cloned\
    \ and\n       used to steal service.  The cloners merely eavesdropped on the\n\
    \       registration protocols that exchanged everything in clear text.\n   5.\
    \  Keys which are common to all systems on a subnet [BGW01].\n   6.  Incorrect\
    \ use of a sound mechanism.  For example [BGW01], one\n       subnet standard\
    \ includes an initialization vector which is poorly\n       designed and poorly\
    \ specified.  A determined attacker can easily\n       recover multiple ciphertexts\
    \ encrypted with the same key stream\n       and perform statistical attacks to\
    \ decipher them.\n   7.  Identifying information sent in clear text that can be\
    \ resolved\n       to an individual, identifiable device.  This creates a\n  \
    \     vulnerability to attacks targeted to that device (or its owner).\n   8.\
    \  Inability to renew and revoke shared secret information.\n   9.  Insufficient\
    \ key length.\n   10. Failure to address \"man-in-the-middle\" attacks, e.g.,\
    \ with mutual\n       authentication.\n   11. Failure to provide a form of replay\
    \ detection, e.g., to prevent a\n       receiver from accepting packets from an\
    \ attacker that simply\n       resends previously captured network traffic.\n\
    \   12. Failure to provide integrity mechanisms when providing\n       confidentiality\
    \ schemes [Bel98].\n   This list is by no means comprehensive.  Design problems\
    \ are\n   difficult to avoid, but expert review is generally invaluable in\n \
    \  avoiding problems.\n   In addition, well-designed security protocols can be\
    \ compromised by\n   implementation defects.  Examples of such defects include\
    \ use of\n   predictable pseudo-random numbers [RFC1750], vulnerability to buffer\n\
    \   overflow attacks due to unsafe use of certain I/O system calls\n   [WFBA2000],\
    \ and inadvertent exposure of secret data.\n"
- title: 19.  Contributors
  contents:
  - "19.  Contributors\n   This document represents a consensus of the members of\
    \ the IETF\n   Performance Implications of Link Characteristics (PILC) working\n\
    \   group.\n   This document would not have been possible without the contributions\n\
    \   of a great number of people in the Performance Implications of Link\n   Characteristics\
    \ Working Group.  In particular, the following people\n   provided major contributions\
    \ of text, editing, and advice on this\n   document: Mark Allman provided the\
    \ final editing to complete this\n   document.  Carsten Bormann provided text\
    \ on robust header\n   compression.  Gorry Fairhurst provided text on broadcast\
    \ and\n   multicast issues, routing,  and many valuable comments on the entire\n\
    \   document.  Aaron Falk provided text on bandwidth on demand.  Dan\n   Grossman\
    \ provided text on many facets of the document.  Reiner Ludwig\n   provided thorough\
    \ document review and text on TCP vs. Link-Layer\n   Retransmission.  Jamshid\
    \ Mahdavi provided text on TCP performance\n   calculations.  Saverio Mascolo\
    \ provided feedback on the document.\n   Gabriel Montenegro provided feedback\
    \ on the document.  Marie-Jose\n   Montpetit provided text on bandwidth on demand.\
    \  Joe Touch provided\n   text on multicast, broadcast, and routing, and Lloyd\
    \ Wood provided\n   many valuable comments on versions of the document.\n"
- title: 20.  Informative References
  contents:
  - "20.  Informative References\n   References of the form RFCnnnn are Internet Request\
    \ for Comments\n   (RFC) documents available online at www.rfc-editor.org.\n \
    \  [802.1D]      Information Technology Telecommunications and\n             \
    \    information exchange between systems Local and\n                 metropolitan\
    \ area networks, Common specifications Media\n                 access control\
    \ (MAC) bridges, IEEE 802.1D, 1998.  ISO\n                 15802-3.\n   [802.1p]\
    \      IEEE, 802.1p, Standard for Local and Metropolitan Area\n              \
    \   Networks - Supplement to Media Access Control (MAC)\n                 Bridges:\
    \ Traffic Class Expediting and Multicast.\n   [AP99]        Allman, M. and V.\
    \ Paxson, On Estimating End-to-End\n                 Network Path Properties,\
    \ In Proceedings of ACM SIGCOMM\n                 99.\n   [AR02]        Acar,\
    \ G. and C. Rosenberg, Weighted Fair Bandwidth-on-\n                 Demand (WFBoD)\
    \ for Geo-Stationary Satellite Networks\n                 with On-Board Processing,\
    \ Computer Networks, 39(1),\n                 2002.\n   [ATMFTM]      The ATM\
    \ Forum, \"Traffic Management Specification,\n                 Version 4.0\",\
    \ April 1996, document af-tm-0056.000.\n                 http://www.atmforum.com/\n\
    \   [BA02]        Blanton, E. and M. Allman, On Making TCP More Robust to\n  \
    \               Packet Reordering. ACM Computer Communication Review,\n      \
    \           32(1), January 2002.\n   [Bel98]       Bellovin, S., \"Cryptography\
    \ and the Internet\", in\n                 Proceedings of CRYPTO '98, August 1998.\n\
    \                 http://www.research.att.com/~smb/papers/inet-crypto.pdf\n  \
    \ [BGW01]       Borisov, N., Goldberg, I. and D. Wagner, \"Intercepting\n    \
    \             Mobile Communications: The Insecurity of 802.11,\" In\n        \
    \         Proceedings of ACM MobiCom, July 2001.\n   [BPK98]       Balakrishnan,\
    \ H., Padmanabhan, V. and R. Katz.  \"The\n                 Effects of Asymmetry\
    \ on TCP Performance.\"  ACM Mobile\n                 Networks and Applications\
    \ (MONET), 1998.\n   [BPS99]       Bennet,, J.C.R., Partridge, C. and N. Shectman,\
    \ \"Packet\n                 Reordering is Not Pathological Network Behavior\"\
    ,\n                 IEEE/ACM Transactions on Networking, Vol. 7, No. 6,\n    \
    \             December 1999.\n   [CGMP]        Farinacci D., Tweedly A. and T.\
    \ Speakman, \"Cisco Group\n                 Management Protocol (CGMP)\", 1996/1997.\n\
    \                 ftp://ftpeng.cisco.com/ipmulticast/specs/cgmp.txt\n   [Crypto9912]\
    \  Schneier, B., \"European Cellular Encryption Algorithms\"\n               \
    \  Crypto-Gram, December 15, 1999.\n                 http://www.counterpane.com\n\
    \   [DIX82]       Digital Equipment Corp, Intel Corp, Xerox Corp,\n          \
    \       Ethernet Local Area Network Specification Version 2.0,\n             \
    \    November 1982.\n   [DOCSIS1]     Data-Over-Cable Service Interface Specifications,\
    \ Radio\n                 Frequency Interface Specification 1.0, SP-RFI-I05-\n\
    \                 991105, November 1999, Cable Television Laboratories,\n    \
    \             Inc.\n   [DOCSIS2]     Data-Over-Cable Service Interface Specifications,\
    \ Radio\n                 Frequency Interface Specification 1.1, SP-RFIv1.1-I05-\n\
    \                 000714, July 2000, Cable Television Laboratories, Inc.\n   [DOCSIS3]\
    \     Lai, W.S., \"DOCSIS-Based Cable Networks: Impact of\n                 Large\
    \ Data Packets on Upstream Capacity\", 14th ITC\n                 Specialists\
    \ Seminar on Access Networks and Systems,\n                 Barcelona, Spain,\
    \ April 25-27, 2001.\n   [EN301192]    ETSI, European Broadcasting Union, Digital\
    \ Video\n                 Broadcasting (DVB); DVB Specification for Data\n   \
    \              Broadcasting, European Standard (Telecommunications\n         \
    \        Series)  EN 301 192 v1.2.1(1999-06).\n   [ES00]        Eckhardt, D. and\
    \ P. Steenkiste, \"Effort-limited Fair\n                 (ELF) Scheduling for\
    \ Wireless Networks, Proceedings of\n                 IEEE Infocom 2000.\n   [FB00]\
    \        Firoiu V. and M. Borden, \"A Study of Active Queue\n                \
    \ Management for Congestion Control\" to appear in Infocom\n                 2000.\n\
    \   [GM02]        Grieco1, L. and S. Mascolo, \"TCP Westwood and Easy RED\n  \
    \               to Improve Fairness in High-Speed Networks\",\n              \
    \   Proceedings of the 7th International Workshop on\n                 Protocols\
    \ for High-Speed Networks, April 2002.\n   [IEEE8023]    IEEE 802.3 CSMA/CD Access\
    \ Method.\n                 http://standards.ieee.org/\n   [IEEE80211]   IEEE\
    \ 802.11 Wireless LAN standard.\n                 http://standards.ieee.org/\n\
    \   [ISO3309]     ISO/IEC 3309:1991(E), \"Information Technology -\n         \
    \        Telecommunications and information exchange between\n               \
    \  systems - High-level data link control (HDLC)\n                 procedures\
    \ - Frame structure\", International\n                 Organization For Standardization,\
    \ Fourth edition 1991-\n                 06-01.\n   [ISO13818]    ISO/IEC, ISO/IEC\
    \ 13818-1:2000(E)  Information\n                 Technology - Generic coding of\
    \ moving pictures and\n                 associated audio information:  Systems,\
    \ Second edition,\n                 2000-12-01 International Organization for\n\
    \                 Standardization and International Electrotechnical\n       \
    \          Commission.\n   [ITU-I363]    ITU-T I.363.5 B-ISDN ATM Adaptation Layer\
    \ Specification\n                 Type AAL5, International Standards Organisation\
    \ (ISO),\n                 1996.\n   [Jac90]       Jacobson, V., Modified TCP\
    \ Congestion Avoidance\n                 Algorithm.  Email to the end2end-interest\
    \ mailing list,\n                 April 1990.\n                 ftp://ftp.ee.lbl.gov/email/vanj.90apr30.txt\n\
    \   [KY02]        Khafizov, F. and M. Yavuz, Running TCP Over IS-2000,\n     \
    \            Proceedings of IEEE ICC, 2002.\n   [LK00]        Ludwig, R. and R.\
    \ H. Katz, \"The Eifel Algorithm: Making\n                 TCP Robust Against\
    \ Spurious Retransmissions\", ACM\n                 Computer Communication Review,\
    \ Vol. 30, No. 1, January\n                 2000.\n   [LKJK02]      Ludwig, R.,\
    \ Konrad, A., Joseph, A. D. and R. H. Katz,\n                 \"Optimizing the\
    \ End-to-End Performance of Reliable\n                 Flows over Wireless Links\"\
    , Kluwer/ACM Wireless\n                 Networks Journal, Vol. 8, Nos. 2/3, pp.\
    \ 289-299,\n                 March-May 2002.\n   [LRKOJ99]     Ludwig, R., Rathonyi,\
    \ B., Konrad, A., Oden, K. and A.\n                 Joseph, Multi-Layer Tracing\
    \ of TCP over a Reliable\n                 Wireless Link, pp. 144-154, In Proceedings\
    \ of ACM\n                 SIGMETRICS 99.\n   [LS00]        Ludwig, R. and K.\
    \ Sklower, The Eifel Retransmission\n                 Timer, ACM Computer Communication\
    \ Review, Vol. 30, No.\n                 3, July 2000.\n   [MAGMA-PROXY] Fenner,\
    \ B., He, H., Haberman, B. and H. Sandick,\n                 \"IGMP/MLD-based\
    \ Multicast Forwarding (\"IGMP/MLD\n                 Proxying\")\", Work in Progress.\n\
    \   [MAGMA-SNOOP] Christensen, M., Kimball, K. and F. Solensky,\n            \
    \     \"Considerations for IGMP and MLD Snooping Switches\",\n               \
    \  Work in Progress.\n   [MBB00]       May, M., Bonald, T. and J-C. Bolot, \"\
    Analytic\n                 Evaluation of RED Performance\", INFOCOM 2000.\n  \
    \ [MBDL99]      May, M., Bolot, J., Diot, C. and B. Lyles, \"Reasons not\n   \
    \              to deploy RED\", Proc. of 7th. International Workshop on\n    \
    \             Quality of Service (IWQoS'99), June 1999.\n   [MSMO97]      Mathis,\
    \ M., Semke, J., Mahdavi, J. and T. Ott, \"The\n                 Macroscopic Behavior\
    \ of the TCP Congestion Avoidance\n                 Algorithm\", Computer Communication\
    \ Review, Vol. 27,\n                 number 3, July 1997.\n   [MYR95]       Boden,\
    \ N., Cohen, D., Felderman, R., Kulawik, A.,\n                 Seitz, C., et al.\
    \  MYRINET: A Gigabit per Second Local\n                 Area Network, IEEE-Micro,\
    \ Vol. 15, No.1, February 1995,\n                 pp. 29-36.\n   [PFTK98]    \
    \  Padhye, J., Firoiu, V., Towsley, D. and J. Kurose,\n                 \"Modeling\
    \ TCP Throughput: a Simple Model and its\n                 Empirical Validation\"\
    , UMASS CMPSCI Tech Report TR98-\n                 008, Feb. 1998.\n   [RED93]\
    \       Floyd, S. and V. Jacobson, \"Random Early Detection\n                \
    \ gateways for Congestion Avoidance\", IEEE/ACM\n                 Transactions\
    \ in Networking, Vol. 1 No. 4, August 1993.\n                 http://www.aciri.org/floyd/papers/red/red.html\n\
    \   [RF95]        Romanow, A. and S. Floyd, \"Dynamics of TCP Traffic over\n \
    \                ATM Networks\".  IEEE Journal of Selected Areas in\n        \
    \         Communication, Vol.13 No.  4, May 1995, p. 633-641.\n   [RFC791]   \
    \   Postel, J., \"Internet Protocol\", STD 5, RFC 791,\n                 September\
    \ 1981.\n   [RFC793]      Postel, J., \"Transmission Control Protocol\", STD 7,\
    \ RFC\n                 793, September 1981.\n   [RFC768]      Postel, J., \"\
    User Datagram Protocol\", STD 6, RFC 768,\n                 August 1980.\n   [RFC826]\
    \      Plummer, D.C., \"Ethernet Address Resolution Protocol:\n              \
    \   Or converting network protocol addresses to 48-bit\n                 Ethernet\
    \ address for transmission on Ethernet\n                 hardware\", STD 37, RFC\
    \ 826, November 1982.\n   [RFC1071]     Braden, R., Borman, D. and C. Partridge,\
    \ \"Computing the\n                 Internet checksum\", RFC 1071, September 1988.\n\
    \   [RFC1112]     Deering, S., \"Host Extensions for IP Multicasting\", STD\n\
    \                 5, RFC 1112, August 1989.\n   [RFC1144]     Jacobson, V., \"\
    Compressing TCP/IP Headers for Low-Speed\n                 Serial Links\", RFC\
    \ 1144, February 1990.\n   [RFC1191]     Mogul, J. and S. Deering, \"Path MTU\
    \ Discovery\", RFC\n                 1191, November 1990.\n   [RFC1332]     McGregor,\
    \ C., \"The PPP Internet Protocol Control\n                 Protocol (IPCP)\"\
    , RFC 1332, May 1992.\n   [RFC1435]     Knowles, S., \"IESG Advice from Experience\
    \ with Path MTU\n                 Discovery\", RFC 1435, March 1993.\n   [RFC1633]\
    \     Braden, R., Clark, D. and S. Shenker, \"Integrated\n                 Services\
    \ in the Internet Architecture: an Overview\",\n                 RFC 1633, June\
    \ 1994.\n   [RFC1661]     Simpson, W., \"The Point-to-Point Protocol (PPP)\",\
    \ STD\n                 51, RFC 1661, July 1994.\n   [RFC1662]     Simpson, W.,\
    \ Ed., \"PPP in HDLC-like Framing\", STD 51,\n                 RFC 1662, July\
    \ 1994.\n   [RFC1750]     Eastlake 3rd, D., Crocker, S. and J. Schiller,\n   \
    \              \"Randomness Recommendations for Security\", RFC 1750,\n      \
    \           December 1994.\n   [RFC1812]     Baker, F., Ed., \"Requirements for\
    \ IP Version 4\n                 Routers\", RFC 1812, June 1995.\n   [RFC1939]\
    \     Myers, J. and M. Rose, \"Post Office Protocol - Version\n              \
    \   3\", STD 53, RFC 1939, May 1996.\n   [RFC1981]     McCann, J., Deering, S.\
    \ and J. Mogul, \"Path MTU\n                 Discovery for IP version 6\", RFC\
    \ 1981, August 1996.\n   [RFC1991]     Atkins, D., Stallings, W. and P. Zimmermann,\
    \ \"PGP\n                 Message Exchange Formats\", RFC 1991, August 1996.\n\
    \   [RFC2018]     Mathis, M., Mahdavi, J., Floyd, S. and A. Romanow, \"TCP\n \
    \                Selective Acknowledgement Options\", RFC 2018, October\n    \
    \             1996.\n   [RFC2131]     Droms, R., \"Dynamic Host Configuration\
    \ Protocol\", RFC\n                 2131, March 1997.\n   [RFC2205]     Braden,\
    \ R., Ed., Zhang, L., Berson, S., Herzog, S. and\n                 S. Jamin, \"\
    Resource ReSerVation Protocol (RSVP) --\n                 Version 1 Functional\
    \ Specification\", RFC 2205,\n                 September 1997.\n   [RFC2208] \
    \    Mankin, A., Baker, F., Braden, B., Bradner, S., O`Dell,\n               \
    \  M., Romanow, A., Weinrib, A. and L. Zhang, \"Resource\n                 ReSerVation\
    \ Protocol (RSVP) -- Version 1 Applicability\n                 Statement Some\
    \ Guidelines on Deployment\", RFC 2208,\n                 September 1997.\n  \
    \ [RFC2210]     Wroclawski, J., \"The Use of RSVP with IETF Integrated\n     \
    \            Services\", RFC 2210, September 1997.\n   [RFC2211]     Wroclawski,\
    \ J., \"Specification of the Controlled-Load\n                 Network Element\
    \ Service\", RFC 2211, September 1997.\n   [RFC2212]     Shenker, S., Partridge,\
    \ C. and R. Guerin,\n                 \"Specification of Guaranteed Quality of\
    \ Service\", RFC\n                 2212, September 1997.\n   [RFC2246]     Dierks,\
    \ T. and C. Allen, \"The TLS Protocol Version\n                 1.0\", RFC 2246,\
    \ January 1999.\n   [RFC2309]     Braden, B., Clark, D., Crowcroft, J., Davie,\
    \ B.,\n                 Deering, S., Estrin, D., Floyd, S., Jacobson, V.,\n  \
    \               Minshall, G., Partridge, C., Peterson, L.,\n                 Ramakrishnan,\
    \ K., Shenker, S., Wroclawski, J. and L.\n                 Zhang, \"Recommendations\
    \ on Queue Management and\n                 Congestion Avoidance in the Internet\"\
    , RFC 2309, April\n                 1998.\n   [RFC2322]     van den Hout, K.,\
    \ Koopal, A. and R. van Mook,\n                 \"Management of IP numbers by\
    \ peg-dhcp\", RFC 2322, 1\n                 April 1998.\n   [RFC2328]     Moy,\
    \ J., \"OSPF Version 2\", STD 54, RFC 2328, April\n                 1998.\n  \
    \ [RFC2332]     Luciani, J., Katz, D., Piscitello, D., Cole, B. and N.\n     \
    \            Doraswamy, \"NBMA Next Hop Resolution Protocol (NHRP)\",\n      \
    \           RFC 2332, April 1998.\n   [RFC2364]     Gross, G., Kaycee, M., Li,\
    \ A., Malis, A. and J.\n                 Stephens, \"PPP Over AAL5\", RFC 2364,\
    \ July 1998.\n   [RFC2394]     Pereira, R., \"IP Payload Compression Using DEFLATE\"\
    ,\n                 RFC 2394, December 1998.\n   [RFC2395]     Friend, R. and\
    \ R. Monsour, \"IP Payload Compression\n                 Using LZS\", RFC 2395,\
    \ December 1998.\n   [RFC2401]     Kent, S. and R. Atkinson, \"Security Architecture\
    \ for\n                 the Internet Protocol\", RFC 2401, November 1998.\n  \
    \ [RFC2406]     Kent, S. and R. Atkinson, \"IP Encapsulating Security\n      \
    \           Payload (ESP)\", RFC 2406, November 1998.\n   [RFC2440]     Callas,\
    \ J., Donnerhacke, L., Finney, H. and R. Thayer,\n                 \"OpenPGP Message\
    \ Format\", RFC 2440, November 1998.\n   [RFC2460]     Deering, S. and R. Hinden,\
    \ \"Internet Protocol, Version\n                 6 (IPv6) Specification\", RFC\
    \ 2460, December 1998.\n   [RFC2461]     Narten, T., Nordmark, E. and W. Simpson,\
    \ \"Neighbor\n                 Discovery for IP Version 6 (IPv6)\", RFC 2461,\
    \ December\n                 1998.\n   [RFC2474]     Nichols, K., Blake, S., Baker,\
    \ F. and D. Black,\n                 \"Definition of the Differentiated Services\
    \ Field (DS\n                 Field) in the IPv4 and IPv6 Headers\", RFC 2474,\n\
    \                 December 1998.\n   [RFC2475]     Blake, S., Black, D., Carlson,\
    \ M., Davies, E., Wang, Z.\n                 and W. Weiss, \"An Architecture for\
    \ Differentiated\n                 Services\", RFC 2475, December 1998.\n   [RFC2507]\
    \     Degermark, M., Nordgren, B. and S. Pink, \"IP Header\n                 Compression\"\
    , RFC 2507, February 1999.\n   [RFC2508]     Casner, S. and V. Jacobson, \"Compressing\
    \ IP/UDP/RTP\n                 Headers for Low-Speed Serial Links\", RFC 2508,\
    \ February\n                 1999.\n   [RFC2581]     Allman, M., Paxson, V. and\
    \ W. Stevens, \"TCP Congestion\n                 Control\", RFC 2581, April 1999.\n\
    \   [RFC2582]     Floyd, S. and T. Henderson, \"The NewReno Modification\n   \
    \              to TCP's Fast Recovery Algorithm\", RFC 2582, April\n         \
    \        1999.\n   [RFC2597]     Heinanen, J., Baker, F., Weiss, W. and J. Wroclawski,\n\
    \                 \"Assured Forwarding PHB Group\", RFC 2597, June 1999.\n   [RFC2616]\
    \     Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,\n                 Masinter,\
    \ L., Leach, P. and T. Berners-Lee, \"Hypertext\n                 Transfer Protocol\
    \ -- HTTP/1.1\", RFC 2616, June 1999.\n   [RFC2630]     Housley, R., \"Cryptographic\
    \ Message Syntax\", RFC 2630,\n                 June 1999.\n   [RFC2631]     Rescorla,\
    \ E., \"Diffie-Hellman Key Agreement Method\",\n                 RFC 2631, June\
    \ 1999.\n   [RFC2632]     Ramsdell, B., Ed., \"S/MIME Version 3 Certificate\n\
    \                 Handling\", RFC 2632, June 1999.\n   [RFC2633]     Ramsdell,\
    \ B., \"S/MIME Version 3 Message Specification\",\n                 RFC 2633,\
    \ June 1999.\n   [RFC2634]     Hoffman, P., \"Enhanced Security Services for S/MIME\"\
    ,\n                 RFC 2634, June 1999.\n   [RFC2684]     Grossman, D. and J.\
    \ Heinanen, \"Multiprotocol\n                 Encapsulation over ATM Adaptation\
    \ Layer 5\", RFC 2684,\n                 September 1999.\n   [RFC2686]     Bormann,\
    \ C., \"The Multi-Class Extension to Multi-Link\n                 PPP\", RFC 2686,\
    \ September 1999.\n   [RFC2687]     Bormann, C., \"PPP in a Real-time Oriented\
    \ HDLC-like\n                 Framing\", RFC 2687, September 1999.\n   [RFC2689]\
    \     Bormann, C., \"Providing Integrated Services over Low-\n               \
    \  bitrate Links\", RFC 2689, September 1999.\n   [RFC2710]     Deering, S., Fenner,\
    \ W. and B. Haberman, \"Multicast\n                 Listener Discovery (MLD) for\
    \ IPv6\", RFC 2710, October\n                 1999.\n   [RFC2784]     Farinacci,\
    \ D., Li, T., Hanks, S., Meyer, D. and P.\n                 Traina, \"Generic\
    \ Routing Encapsulation (GRE)\", RFC\n                 2784, March 2000.\n   [RFC2865]\
    \     Rigney, C., Willens, S., Rubens, A. and W. Simpson,\n                 \"\
    Remote Authentication Dial In User Service (RADIUS)\",\n                 RFC 2865,\
    \ June 2000.\n   [RFC2914]     Floyd, S., \"Congestion Control Principles\", BCP\
    \ 41, RFC\n                 2914, September 2000.\n   [RFC2923]     Lahey, K.,\
    \ \"TCP Problems with Path MTU Discovery\", RFC\n                 2923, September\
    \ 2000.\n   [RFC2988]     Paxson, V. and M. Allman, \"Computing TCP's\n      \
    \           Retransmission Timer\", RFC 2988, November 2000.\n   [RFC2990]   \
    \  Huston, G., \"Next Steps for the IP QoS Architecture\",\n                 RFC\
    \ 2990, November 2000.\n   [RFC3048]     Whetten, B., Vicisano, L., Kermode, R.,\
    \ Handley, M.,\n                 Floyd, S. and M. Luby, \"Reliable Multicast Transport\n\
    \                 Building Blocks for One-to-Many Bulk-Data Transfer\",\n    \
    \             RFC 3048, January 2001.\n   [RFC3095]     Bormann, C., Ed., Burmeister,\
    \ C., Degermark, M.,\n                 Fukushima, H., Hannu, H., Jonsson, L-E.,\
    \ Hakenberg, R.,\n                 Koren, T., Le, K., Liu, Z., Martensson, A.,\
    \ Miyazaki,\n                 A., Svanbro, K., Wiebke, T., Yoshimura, T. and H.\n\
    \                 Zheng, \"RObust Header Compression (ROHC):  Framework\n    \
    \             and four profiles: RTP, UDP, ESP, and uncompressed\",\n        \
    \         RFC 3095, July 2001.\n   [RFC3096]     Degermark, M., Ed., \"Requirements\
    \ for robust IP/UDP/RTP\n                 header compression\", RFC 3096, July\
    \ 2001.\n   [RFC3150]     Dawkins, S., Montenegro, G., Kojo, M. and V. Magret,\n\
    \                 \"End-to-end Performance Implications of Slow Links\",\n   \
    \              BCP 48, RFC 3150, July 2001.\n   [RFC3155]     Dawkins, S., Montenegro,\
    \ G., Kojo, M., Magret, V. and\n                 N. Vaidya, \"End-to-end Performance\
    \ Implications of\n                 Links with Errors\", BCP 50, RFC 3155, August\
    \ 2001.\n   [RFC3168]     Ramakrishnan, K., Floyd, S. and D. Black, \"The Addition\n\
    \                 of Explicit Congestion Notification (ECN) to IP\", RFC\n   \
    \              3168, September 2001.\n   [RFC3173]     Shacham, A., Monsour, B.,\
    \ Pereira, R. and M. Thomas,\n                 \"IP Payload Compression Protocol\
    \ (IPComp)\", RFC 3173,\n                 September 2001.\n   [RFC3246]     Davie,\
    \ B., Charny, A., Bennet, J.C.R., Benson, K., Le\n                 Boudec, J.Y.,\
    \ Courtney, W., Davari, S., Firoiu, V. and\n                 D. Stiliadis, \"\
    An Expedited Forwarding PHB (Per-Hop\n                 Behavior)\", RFC 3246,\
    \ March 2002.\n   [RFC3248]     Armitage, G., Carpenter, B., Casati, A., Crowcroft,\
    \ J.,\n                 Halpern, J., Kumar, B. and J. Schnizlein, \"A Delay\n\
    \                 Bound alternative revision of RFC 2598\", RFC 3248,\n      \
    \           March 2002.\n   [RFC3344]     Perkins, C., Ed., \"IP Mobility Support\
    \ for IPv4\", RFC\n                 3344, August 2002.\n   [RFC3366]     Fairhurst,\
    \ G. and L. Wood, \"Advice to link designers on\n                 link Automatic\
    \ Repeat reQuest (ARQ)\", BCP 62, RFC 3366,\n                 August 2002.\n \
    \  [RFC3376]     Cain, B., Deering, S., Kouvelas, I., Fenner, B. and A.\n    \
    \             Thyagarajan, \"Internet Group Management Protocol,\n           \
    \      Version 3\", RFC 3376, October 2002.\n   [RFC3449]     Balakrishnan, H.,\
    \ Padmanabhan, V., Fairhurst, G. and M.\n                 Sooriyabandara, \"TCP\
    \ Performance Implications of\n                 Network Path Asymmetry\", BCP\
    \ 69, RFC 3449, December\n                 2002.\n   [RFC3450]     Luby, M., Gemmell,\
    \ J., Vicisano, L., Rizzo, L. and J.\n                 Crowcroft, \"Asynchronous\
    \ Layered Coding (ALC) Protocol\n                 Instantiation\", RFC 3450, December\
    \ 2002.\n   [RFC3451]     Luby, M., Gemmell, J., Vicisano, L., Rizzo, L.,\n  \
    \               Handley, M. and J. Crowcroft, \"Layered Coding Transport\n   \
    \              (LCT) Building Block\", RFC 3451, December 2002.\n   [RFC3452]\
    \     Luby, M., Vicisano, L., Gemmell, J., Rizzo, L.,\n                 Handley,\
    \ M. and J. Crowcroft, \"Forward Error Correction\n                 (FEC) Building\
    \ Block\", RFC 3452, December 2002.\n   [RFC3453]     Luby, M., Vicisano, L.,\
    \ Gemmell, J., Rizzo, L.,\n                 Handley, M. and J. Crowcroft, \"The\
    \ Use of Forward Error\n                 Correction (FEC) in Reliable Multicast\"\
    , RFC 3453,\n                 December 2002.\n   [RFC3488]     Wu, I. and T. Eckert,\
    \ \"Cisco Systems Router-port Group\n                 Management Protocol (RGMP)\"\
    , RFC 3488, February 2003.\n   [RFC3501]     Crispin, M., \"INTERNET MESSAGE ACCESS\
    \ PROTOCOL -\n                 VERSION 4rev1\", RFC 3501, March 2003.\n   [RFC3828]\
    \     Larzon, L-A., Degermark, M., Pink, S., Jonsson, L-E.,\n                \
    \ Ed. and G. Fairhurst, Ed., \"The User Datagram Protocol\n                 (UDP)-Lite\
    \ Protocol\", RFC 3828, June 2004.\n   [Schneier95]  Schneier, B., Applied Cryptography:\
    \ Protocols,\n                 Algorithms and Source Code in C (John Wiley and\
    \ Sons,\n                 October 1995).\n   [Schneier00]  Schneier, B., Secrets\
    \ and Lies: Digital Security in a\n                 Networked World (John Wiley\
    \ and Sons, August 2000).\n   [SP2000]      Stone, J. and C. Partridge, \"When\
    \ the CRC and TCP\n                 Checksum Disagree\", ACM SIGCOMM, September\
    \ 2000.\n                 http://www.acm.org/sigcomm/sigcomm2000/conf/\n     \
    \            paper/sigcomm2000-9-1.pdf\n   [SRC81]       Saltzer, J., Reed D.\
    \ and D. Clark, \"End-to-End\n                 Arguments in System Design\". \
    \ Second International\n                 Conference on Distributed Computing Systems\
    \ (April,\n                 1981) pages 509-512. Published with minor changes\
    \ in\n                 ACM Transactions in Computer Systems 2, 4, November,\n\
    \                 1984, pages 277-288. Reprinted in Craig Partridge,\n       \
    \          editor Innovations in internetworking. Artech House,\n            \
    \     Norwood, MA, 1988, pages 195-206. ISBN 0-89006-337-0.\n   [SSL2]       \
    \ Hickman, K., \"The SSL Protocol\", Netscape\n                 Communications\
    \ Corp., Feb 9, 1995.\n   [SSL3]        Frier, A., Karlton, P. and P. Kocher,\
    \ \"The SSL 3.0\n                 Protocol\", Netscape Communications Corp., Nov\
    \ 18, 1996.\n   [TCPF98]      Lin, D. and H.T. Kung, \"TCP Fast Recovery Strategies:\n\
    \                 Analysis and Improvements\", IEEE Infocom, March 1998.\n   \
    \              http://www.eecs.harvard.edu/networking/papers/infocom-\n      \
    \           tcp-final-198.pdf\n   [WFBA2000]    Wagner, D., Foster, J., Brewer,\
    \ E. and A. Aiken, \"A\n                 First Step Toward Automated Detection\
    \ of Buffer Overrun\n                 Vulnerabilities\", Proceedings of NDSS2000.\n\
    \                 http://www.isoc.org/isoc/conferences/ndss/\n               \
    \  2000/proceedings/039.pdf\n   [Wilbur89]    Wilbur, Steve R., Jon Crowcroft,\
    \ and Yuko Murayama.\n                 \"MAC layer Security Measures in Local\
    \ Area Networks\",\n                 Local Area Network Security, Workshop LANSEC\
    \ '89\n                 Proceedings, Springer-Verlag, April 1989, pp. 53-64.\n"
- title: 21. Contributors' Addresses
  contents:
  - "21. Contributors' Addresses\n   Aaron Falk\n   USC/Information Sciences Institute\n\
    \   4676 Admiralty Way\n   Marina Del Rey, CA 90292\n   Phone: 310-448-9327\n\
    \   EMail: falk@isi.edu\n   Saverio Mascolo\n   Dipartimento di Elettrotecnica\
    \ ed Elettronica,\n   Politecnico di Bari Via Orabona 4, 70125 Bari, Italy\n \
    \  Phone: +39 080 596 3621\n   EMail: mascolo@poliba.it\n   URL: http://www-dee.poliba.it/dee-web/Personale/mascolo.html\n\
    \   Marie-Jose Montpetit\n   MJMontpetit.com\n   EMail: marie@mjmontpetit.com\n"
- title: 22.  Authors' Addresses
  contents:
  - "22.  Authors' Addresses\n   Phil Karn, Editor\n   Qualcomm 5775 Morehouse Drive\n\
    \   San Diego CA 92121\n   Phone: 858 587 1121\n   EMail: karn@qualcomm.com\n\
    \   Carsten Bormann\n   Universitaet Bremen TZI\n   Postfach 330440\n   D-28334\
    \ Bremen, Germany\n   Phone: +49 421 218 7024\n   Fax:   +49 421 218 7000\n  \
    \ EMail: cabo@tzi.org\n   Godred (Gorry) Fairhurst\n   Department of Engineering,\
    \ University of Aberdeen,\n   Aberdeen, AB24 3UE, United Kingdom\n   EMail: gorry@erg.abdn.ac.uk\n\
    \   URL: http://www.erg.abdn.ac.uk/users/gorry\n   Dan Grossman\n   Motorola,\
    \ Inc.\n   111 Locke Drive\n   Marlboro, MA 01752\n   EMail: Dan.Grossman@motorola.com\n\
    \   Reiner Ludwig\n   Ericsson Research\n   Ericsson Allee\n   1 52134 Herzogenrath,\
    \ Germany\n   Phone: +49 2407 575 719\n   EMail: Reiner.Ludwig@ericsson.com\n\
    \   Jamshid Mahdavi\n   Novell, Inc.\n   EMail: jmahdavi@earthlink.net\n   Gabriel\
    \ Montenegro\n   Sun Microsystems Laboratories, Europe\n   180, Avenue de l'Europe\n\
    \   38334 Saint Ismier CEDEX\n   France\n   EMail: gab@sun.com\n   Joe Touch\n\
    \   USC/Information Sciences Institute\n   4676 Admiralty Way\n   Marina del Rey\
    \ CA 90292\n   Phone: 310 448 9151\n   EMail: touch@isi.edu\n   URL: http://www.isi.edu/touch\n\
    \   Lloyd Wood\n   Cisco Systems\n   9 New Square Park, Bedfont Lakes\n   Feltham\
    \ TW14 8HA\n   United Kingdom\n   Phone: +44 (0)20 8824 4236\n   EMail: lwood@cisco.com\n\
    \   URL: http://www.ee.surrey.ac.uk/Personal/L.Wood/\n"
- title: 23.  Full Copyright Statement
  contents:
  - "23.  Full Copyright Statement\n   Copyright (C) The Internet Society (2004).\
    \  This document is subject\n   to the rights, licenses and restrictions contained\
    \ in BCP 78, and\n   except as set forth therein, the authors retain all their\
    \ rights.\n   This document and the information contained herein are provided\
    \ on an\n   \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE\n   REPRESENTS\
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE\n   INTERNET ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR\n   IMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed\n   to pertain to the implementation or use of the technology\n   described\
    \ in this document or the extent to which any license\n   under such rights might\
    \ or might not be available; nor does it\n   represent that it has made any independent\
    \ effort to identify any\n   such rights.  Information on the procedures with\
    \ respect to\n   rights in RFC documents can be found in BCP 78 and BCP 79.\n\
    \   Copies of IPR disclosures made to the IETF Secretariat and any\n   assurances\
    \ of licenses to be made available, or the result of an\n   attempt made to obtain\
    \ a general license or permission for the use\n   of such proprietary rights by\
    \ implementers or users of this\n   specification can be obtained from the IETF\
    \ on-line IPR repository\n   at http://www.ietf.org/ipr.\n   The IETF invites\
    \ any interested party to bring to its attention\n   any copyrights, patents or\
    \ patent applications, or other\n   proprietary rights that may cover technology\
    \ that may be required\n   to implement this standard.  Please address the information\
    \ to the\n   IETF at ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
