- contents:
  - '             SMTP Service Extension for Command Pipelining

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This memo defines an extension to the Simple Mail Transfer Protocol\n
    \  (SMTP) service whereby a server can indicate the extent of its\n   ability
    to accept multiple commands in a single Transmission Control\n   Protocol (TCP)
    send operation. Using a single TCP send operation for\n   multiple commands can
    improve SMTP performance significantly.\n"
  title: Abstract
- contents:
  - "1.  Introduction\n   Although SMTP is widely and robustly deployed, certain extensions
    may\n   nevertheless prove useful. In particular, many parts of the Internet\n
    \  make use of high latency network links.  SMTP's intrinsic one\n   command-one
    response structure is significantly penalized by high\n   latency links, often
    to the point where the factors contributing to\n   overall connection time are
    dominated by the time spent waiting for\n   responses to individual commands (turnaround
    time).\n   In the best of all worlds it would be possible to simply deploy SMTP\n
    \  client software that makes use of command pipelining: batching up\n   multiple
    commands into single TCP send operations. Unfortunately, the\n   original SMTP
    specification [RFC-821] did not explicitly state that\n   SMTP servers must support
    this. As a result a non-trivial number of\n   Internet SMTP servers cannot adequately
    handle command pipelining.\n   Flaws known to exist in deployed servers include:\n
    \   (1)   Connection handoff and buffer flushes in the middle of the\n          SMTP
    dialogue.  Creation of server processes for incoming SMTP\n          connections
    is a useful, obvious, and harmless implementation\n          technique. However,
    some SMTP servers defer process forking\n          and connection handoff until
    some intermediate point in the\n          SMTP dialogue.  When this is done material
    read from the TCP\n          connection and kept in process buffers can be lost.\n
    \   (2)   Flushing the TCP input buffer when an SMTP command fails. SMTP\n          commands
    often fail but there is no reason to flush the TCP\n          input buffer when
    this happens.  Nevertheless, some SMTP\n          servers do this.\n    (3)   Improper
    processing and promulgation of SMTP command failures.\n          For example,
    some SMTP servers will refuse to accept a DATA\n          command if the last
    RCPT TO command fails, paying no attention\n          to the success or failure
    of prior RCPT TO command results.\n          Other servers will accept a DATA
    command even when all\n          previous RCPT TO commands have failed. Although
    it is possible\n          to accommodate this sort of behavior in a client that
    employs\n          command pipelining, it does complicate the construction of
    the\n          client unnecessarily.\n   This memo uses the mechanism described
    in [RFC-1869] to define an\n   extension to the SMTP service whereby an SMTP server
    can declare that\n   it is capable of handling pipelined commands. The SMTP client
    can\n   then check for this declaration and use pipelining only when the\n   server
    declares itself capable of handling it.\n"
  - contents:
    - "1.1.  Requirements Notation\n   This document occasionally uses terms that
      appear in capital letters.\n   When the terms \"MUST\", \"MUST NOT\", \"SHOULD\",
      \"SHOULD NOT\", and \"MAY\"\n   appear capitalized, they are being used to indicate
      particular\n   requirements of this specification. A discussion of the meanings
      of\n   the terms \"MUST\", \"SHOULD\", and \"MAY\" appears in [RFC-1123]; the\n
      \  terms \"MUST NOT\" and \"SHOULD NOT\" are logical extensions of this\n   usage.\n"
    title: 1.1.  Requirements Notation
  title: 1.  Introduction
- contents:
  - "2.  Framework for the Command Pipelining Extension\n   The Command Pipelining
    extension is defined as follows:\n    (1)   the name of the SMTP service extension
    is Pipelining;\n    (2)   the EHLO keyword value associated with the extension
    is\n          PIPELINING;\n    (3)   no parameter is used with the PIPELINING
    EHLO keyword;\n    (4)   no additional parameters are added to either the MAIL
    FROM or\n          RCPT TO commands.\n    (5)   no additional SMTP verbs are defined
    by this extension; and,\n    (6)   the next section specifies how support for
    the extension\n          affects the behavior of a server and client SMTP.\n"
  title: 2.  Framework for the Command Pipelining Extension
- contents:
  - "3.  The Pipelining Service Extension\n   When a client SMTP wishes to employ
    command pipelining, it first\n   issues the EHLO command to the server SMTP. If
    the server SMTP\n   responds with code 250 to the EHLO command, and the response
    includes\n   the EHLO keyword value PIPELINING, then the server SMTP has indicated\n
    \  that it can accommodate SMTP command pipelining.\n"
  - contents:
    - "3.1.  Client use of pipelining\n   Once the client SMTP has confirmed that
      support exists for the\n   pipelining extension, the client SMTP may then elect
      to transmit\n   groups of SMTP commands in batches without waiting for a response
      to\n   each individual command. In particular, the commands RSET, MAIL FROM,\n
      \  SEND FROM, SOML FROM, SAML FROM, and RCPT TO can all appear anywhere\n   in
      a pipelined command group.  The EHLO, DATA, VRFY, EXPN, TURN,\n   QUIT, and
      NOOP commands can only appear as the last command in a\n   group since their
      success or failure produces a change of state which\n   the client SMTP must
      accommodate. (NOOP is included in this group so\n   it can be used as a synchronization
      point.)\n   Additional commands added by other SMTP extensions may only appear
      as\n   the last command in a group unless otherwise specified by the\n   extensions
      that define the commands.\n   The actual transfer of message content is explicitly
      allowed to be\n   the first \"command\" in a group. That is, a RSET/MAIL FROM
      sequence\n   used to initiate a new message transaction can be placed in the
      same\n   group as the final transfer of the headers and body of the previous\n
      \  message.\n   Client SMTP implementations that employ pipelining MUST check
      ALL\n   statuses associated with each command in a group. For example, if\n
      \  none of the RCPT TO recipient addresses were accepted the client must\n   then
      check the response to the DATA command -- the client cannot\n   assume that
      the DATA command will be rejected just because none of\n   the RCPT TO commands
      worked.  If the DATA command was properly\n   rejected the client SMTP can just
      issue RSET, but if the DATA command\n   was accepted the client SMTP should
      send a single dot.\n   Command statuses MUST be coordinated with responses by
      counting each\n   separate response and correlating that count with the number
      of\n   commands known to have been issued.  Multiline responses MUST be\n   supported.
      Matching on the basis of either the error code value or\n   associated text
      is expressly forbidden.\n   Client SMTP implementations MAY elect to operate
      in a nonblocking\n   fashion, processing server responses immediately upon receipt,
      even\n   if there is still data pending transmission from the client's\n   previous
      TCP send operation. If nonblocking operation is not\n   supported, however,
      client SMTP implementations MUST also check the\n   TCP window size and make
      sure that each group of commands fits\n   entirely within the window. The window
      size is usually, but not\n   always, 4K octets.  Failure to perform this check
      can lead to\n   deadlock conditions.\n   Clients MUST NOT confuse responses
      to multiple commands with\n   multiline responses. Each command requires one
      or more lines of\n   response, the last line not containing a dash between the
      response\n   code and the response string.\n"
    title: 3.1.  Client use of pipelining
  - contents:
    - "3.2.  Server support of pipelining\n   A server SMTP implementation that offers
      the pipelining extension:\n    (1)   MUST respond to commands in the order they
      are received from\n          the client.\n    (2)   SHOULD elect to store responses
      to grouped RSET, MAIL FROM,\n          SEND FROM, SOML FROM, SAML FROM, and
      RCPT TO commands in an\n          internal buffer so they can sent as a unit.\n
      \   (3)   SHOULD issue a positive response to the DATA command if and\n          only
      if one or more valid RCPT TO addresses have been\n          previously received.\n
      \   (4)   MUST NOT, after issuing a positive response to a DATA command\n          with
      no valid recipients and subsequently receiving an empty\n          message,
      send any message whatsoever to anybody.\n    (5)   MUST NOT buffer responses
      to EHLO, DATA, VRFY, EXPN, TURN,\n          QUIT, and NOOP.\n    (6)   MUST
      NOT buffer responses to unrecognized commands.\n    (7)   MUST send all pending
      responses immediately whenever the local\n          TCP input buffer is emptied.\n
      \   (8)   MUST NOT make assumptions about commands that are yet to be\n          received.\n
      \   (9)   MUST NOT flush or otherwise lose the contents of the TCP input\n          buffer
      under any circumstances whatsoever.\n    (10)  SHOULD issue response text that
      indicates, either implicitly\n          or explicitly, what command the response
      matches.\n   The overriding intent of these server requirements is to make it
      as\n   easy as possible for servers to conform to these pipelining\n   extensions.\n"
    title: 3.2.  Server support of pipelining
  title: 3.  The Pipelining Service Extension
- contents:
  - "4.  Examples\n   Consider the following SMTP dialogue that does not use pipelining:\n
    \  S: <wait for open connection>\n   C: <open connection to server>\n   S: 220
    Innosoft.com SMTP service ready\n   C: HELO dbc.mtview.ca.us\n   S: 250 Innosoft.com\n
    \  C: MAIL FROM:<mrose@dbc.mtview.ca.us>\n   S: 250 sender <mrose@dbc.mtview.ca.us>
    OK\n   C: RCPT TO:<ned@innosoft.com>\n   S: 250 recipient <ned@innosoft.com> OK\n
    \  C: RCPT TO:<dan@innosoft.com>\n   S: 250 recipient <dan@innosoft.com> OK\n
    \  C: RCPT TO:<kvc@innosoft.com>\n   S: 250 recipient <kvc@innosoft.com> OK\n
    \  C: DATA\n   S: 354 enter mail, end with line containing only \".\"\n    ...\n
    \  C: .\n   S: 250 message sent\n   C: QUIT\n   S: 221 goodbye\n   The client
    waits for a server response a total of 9 times in this\n   simple example. But
    if pipelining is employed the following dialogue\n   is possible:\n   S: <wait
    for open connection>\n   C: <open connection to server>\n   S: 220 innosoft.com
    SMTP service ready\n   C: EHLO dbc.mtview.ca.us\n   S: 250-innosoft.com\n   S:
    250 PIPELINING\n   C: MAIL FROM:<mrose@dbc.mtview.ca.us>\n   C: RCPT TO:<ned@innosoft.com>\n
    \  C: RCPT TO:<dan@innosoft.com>\n   C: RCPT TO:<kvc@innosoft.com>\n   C: DATA\n
    \  S: 250 sender <mrose@dbc.mtview.ca.us> OK\n   S: 250 recipient <ned@innosoft.com>
    OK\n   S: 250 recipient <dan@innosoft.com> OK\n   S: 250 recipient <kvc@innosoft.com>
    OK\n   S: 354 enter mail, end with line containing only \".\"\n    ...\n   C:
    .\n   C: QUIT\n   S: 250 message sent\n   S: 221 goodbye\n   The total number
    of turnarounds has been reduced from 9 to 4.\n   The next example illustrates
    one possible form of behavior when\n   pipelining is used and all recipients are
    rejected:\n   S: <wait for open connection>\n   C: <open connection to server>\n
    \  S: 220 innosoft.com SMTP service ready\n   C: EHLO dbc.mtview.ca.us\n   S:
    250-innosoft.com\n   S: 250 PIPELINING\n   C: MAIL FROM:<mrose@dbc.mtview.ca.us>\n
    \  C: RCPT TO:<nsb@thumper.bellcore.com>\n   C: RCPT TO:<galvin@tis.com>\n   C:
    DATA\n   S: 250 sender <mrose@dbc.mtview.ca.us> OK\n   S: 550 remote mail to <nsb@thumper.bellore.com>
    not allowed\n   S: 550 remote mail to <galvin@tis.com> not allowed\n   S: 554
    no valid recipients given\n   C: QUIT\n   S: 221 goodbye\n   The client SMTP waits
    for the server 4 times here as well. If the\n   server SMTP does not check for
    at least one valid recipient prior to\n   accepting the DATA command, the following
    dialogue would result:\n   S: <wait for open connection>\n   C: <open connection
    to server>\n   S: 220 innosoft.com SMTP service ready\n   C: EHLO dbc.mtview.ca.us\n
    \  S: 250-innosoft.com\n   S: 250 PIPELINING\n   C: MAIL FROM:<mrose@dbc.mtview.ca.us>\n
    \  C: RCPT TO:<nsb@thumper.bellcore.com>\n   C: RCPT TO:<galvin@tis.com>\n   C:
    DATA\n   S: 250 sender <mrose@dbc.mtview.ca.us> OK\n   S: 550 remote mail to <nsb@thumper.bellore.com>
    not allowed\n   S: 550 remote mail to <galvin@tis.com> not allowed\n   S: 354
    enter mail, end with line containing only \".\"\n   C: .\n   C: QUIT\n   S: 554
    no valid recipients\n   S: 221 goodbye\n"
  title: 4.  Examples
- contents:
  - "5.  Security Considerations\n   This RFC does not discuss security issues and
    is not believed\n   to raise any security issues not endemic in electronic mail\n
    \  and present in fully conforming implementations of [RFC-821].\n"
  title: 5.  Security Considerations
- contents:
  - "6.  Acknowledgements\n   This document is based on the SMTP service extension
    model\n   presented in RFC 1425. Marshall Rose's description of SMTP\n   command
    pipelining in his book \"The Internet Message\" also\n   served as a source of
    inspiration for this extension.\n"
  title: 6.  Acknowledgements
- contents:
  - "7.  References\n   [RFC-821]  Postel, J., \"Simple Mail Transfer Protocol\",
    STD 10, RFC\n              821, August 1982.\n   [RFC-1123] Braden, R., \"Requirements
    for Internet Hosts --\n              Application and Support\", STD 3, RFC 1123,
    October, 1989.\n   [RFC-1854] Freed, N., \"SMTP Service Extension for Command\n
    \             Pipelining\", RFC 1854, October 1995.\n   [RFC-1869] Klensin, J.,
    Freed, N., Rose, M., Stefferud, E. and D.\n              Crocker, \"SMTP Service
    Extensions\", STD 10, RFC 1869,\n              November 1995.\n   [RFC-2197] Freed,
    N., \"SMTP Service Extension for Command\n              Pipelining\", RFC 2197,
    September 1997.\n"
  title: 7.  References
- contents:
  - "8.  Author's Address\n   Ned Freed\n   Innosoft International, Inc.\n   1050
    Lakes Drive\n   West Covina, CA 91790\n   USA\n   Phone: +1 626 919 3600\n   Fax:
    \  +1 626 919 361\n   EMail: ned.freed@innosoft.com\n   This document is a product
    of work done by the Internet Engineering\n   Task Force Working Group on Messaging
    Extensions, Alan Cargille,\n   chair.\n"
  title: 8.  Author's Address
- contents:
  - "9.  Full Copyright Statement\n   Copyright (C) The Internet Society (2000).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: 9.  Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
