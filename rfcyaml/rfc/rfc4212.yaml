- title: __initial_text__
  contents:
  - "                Alternative Certificate Formats for the\n             Public-Key\
    \ Infrastructure Using X.509 (PKIX)\n                    Certificate Management\
    \ Protocols\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
- title: IESG Note
  contents:
  - "IESG Note\n   This document is not a candidate for any level of Internet Standard.\n\
    \   The IETF disclaims any knowledge of the fitness of this document for\n   any\
    \ purpose, and in particular notes that it has not had IETF review\n   for such\
    \ things as security, congestion control, or inappropriate\n   interaction with\
    \ deployed protocols.  The RFC Editor has chosen to\n   publish this document\
    \ at its discretion.  Readers of this document\n   should exercise caution in\
    \ evaluating its value for implementation\n   and deployment.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Public-Key Infrastructure using X.509 (PKIX) Working Group of\
    \ the\n   Internet Engineering Task Force (IETF) has defined a number of\n   certificate\
    \ management protocols.  These protocols are primarily\n   focused on X.509v3\
    \ public-key certificates.  However, it is sometimes\n   desirable to manage certificates\
    \ in alternative formats as well.\n   This document specifies how such certificates\
    \ may be requested using\n   the Certificate Request Message Format (CRMF) syntax\
    \ that is used by\n   several different protocols.  It also explains how alternative\n\
    \   certificate formats may be incorporated into such popular protocols\n   as\
    \ PKIX Certificate Management Protocol (PKIX-CMP) and Certificate\n   Management\
    \ Messages over CMS (CMC).\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Full certificate life-cycle management in a Public-Key Infrastructure\n\
    \   (PKI) requires protocol support in order to achieve automated\n   processing\
    \ and end user transparency.  Such protocols require\n   standardization in order\
    \ to allow more than one vendor to supply\n   various pieces -- End Entity (EE),\
    \ Certification Authority (CA),\n   Registration Authority (RA) -- in the PKI\
    \ deployment of a single\n   organization, or to allow multiple, independently-deployed\
    \ PKIs to be\n   interconnected usefully.\n   The IETF PKIX (Public-Key Infrastructure\
    \ using X.509) Working Group\n   currently has several certificate management\
    \ protocols and\n   certificate request syntax specifications on the standards\
    \ track.\n   Although these specifications are primarily focused on X.509v3\n\
    \   public-key certificates, some of them can be easily extended to\n   handle\
    \ certificates in alternative formats as well.\n   This document focuses on a\
    \ popular certificate request syntax called\n   CRMF (Certificate Request Message\
    \ Format) [CRMF].  Although the\n   original specification of CRMF is X.509-specific,\
    \ extensions have\n   already been proposed to allow for alternative certificate\
    \ templates\n   [CMP].  However, those extensions have only defined a framework;\
    \ they\n   did not define the exact format to be used for various certificate\n\
    \   types.\n   This document builds on top of the framework mentioned above and\n\
    \   defines how CRMF can be used to request certificates of the following\n  \
    \ types:\n   - X.509 attribute certificates [ATTCERT]\n   - OpenPGP certificates\
    \ [OPENPGP]\n   The CRMF syntax is used by such popular protocols as PKIX-CMP\
    \ (PKIX\n   Certificate Management Protocol) [CMP] and CMC (Certificate\n   Management\
    \ Messages over CMS) [CMC].  This means that CRMF extensions\n   proposed in this\
    \ document enable these protocols to request\n   certificates of the above types.\
    \  However, it is not enough to be\n   able to request a certificate.  The protocol\
    \ should be prepared to\n   handle certificates of a particular type and, for\
    \ example, return\n   them to the user.\n   This document proposes extensions\
    \ to the PKIX-CMP and CMC protocols\n   that are required to manage certificates\
    \ in alternative formats.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: 2.  Certificate Template
  contents:
  - "2.  Certificate Template\n   One of the features of the CRMF format is its use\
    \ of the CertTemplate\n   construct, which allows a requester (EE, or RA acting\
    \ on behalf of an\n   EE) to specify as much or as little as they wish regarding\
    \ the\n   content of the requested certificate.  It is explicitly noted that\n\
    \   the CA has final authority over the actual certificate content; that\n   is,\
    \ the CA may alter certificate fields or may add, delete, or alter\n   extensions\
    \ according to its operating policy (if the resulting\n   certificate is unacceptable\
    \ to the EE or RA, then that certificate\n   may be rejected and/or revoked prior\
    \ to any publication/use).\n   A similar flexibility in the request must be available\
    \ for\n   alternative certificate types as well.  For this purpose, an\n   AltCertTemplate\
    \ extension was introduced in [CMP] as follows (where\n   id-regCtrl = {1 3 6\
    \ 1 5 5 7 5 1}, as defined in [CRMF]).\n      CertRequest ::= SEQUENCE {\n   \
    \       certReqId     INTEGER,\n          certTemplate  CertTemplate,\n      \
    \    controls      Controls OPTIONAL }\n      -- If certTemplate is an empty SEQUENCE\
    \ (i.e., all fields\n      -- omitted), then controls MAY contain the\n      --\
    \ id-regCtrl-altCertTemplate control, specifying a template\n      -- for a certificate\
    \ other than an X.509v3 public-key\n      -- certificate.  Conversely, if certTemplate\
    \ is not empty\n      -- (i.e., at least one field is present), then controls\n\
    \      -- MUST NOT contain id-regCtrl-altCertTemplate.  The new\n      -- control\
    \ is defined as follows:\n      id-regCtrl-altCertTemplate OBJECT IDENTIFIER ::=\
    \ {id-regCtrl 7}\n      AltCertTemplate ::= AttributeTypeAndValue\n   In this\
    \ section, an AltCertTemplate is specified for each of the\n   alternative certificate\
    \ types defined in Section 1.\n"
- title: 2.1.  X.509 Attribute Certificate CertTemplate
  contents:
  - "2.1.  X.509 Attribute Certificate CertTemplate\n   A CertTemplate for an X.509\
    \ attribute certificate can be used by\n   simply defining an object identifier\
    \ (OID) and corresponding value\n   for use in the id-regCtrl-altCertTemplate\
    \ control.  These are\n   specified as follows.\n   OID:\n      id-acTemplate\
    \ OBJECT IDENTIFIER ::=\n         {id-regCtrl-altCertTemplate 1}\n   Value:\n\
    \      AttCertTemplate ::= SEQUENCE {\n         version                 AttCertVersion\
    \            OPTIONAL,\n         holder                  Holder              \
    \      OPTIONAL,\n         issuer                  AttCertIssuer             OPTIONAL,\n\
    \         signature               AlgorithmIdentifier       OPTIONAL,\n      \
    \   serialNumber            CertificateSerialNumber   OPTIONAL,\n         attrCertValidityPeriod\
    \  OptionalAttCertValidity   OPTIONAL,\n         attributes              SEQUENCE\
    \ OF Attribute     OPTIONAL,\n         issuerUniqueID          UniqueIdentifier\
    \          OPTIONAL,\n         extensions              Extensions            \
    \    OPTIONAL\n      }\n      OptionalAttCertValidity  ::= SEQUENCE {\n      \
    \   notBeforeTime  GeneralizedTime  OPTIONAL,\n         notAfterTime   GeneralizedTime\
    \  OPTIONAL\n      } -- at least one must be present\n"
- title: 2.2.  OpenPGP Certificate CertTemplate
  contents:
  - "2.2.  OpenPGP Certificate CertTemplate\n   Similar to certificate templates defined\
    \ above, a CertTemplate for an\n   OpenPGP certificate can be used by defining\
    \ an object identifier\n   (OID) and corresponding value for use in the\n   id-regCtrl-altCertTemplate\
    \ control.  These are specified as follows:\n   OID:\n      id-openPGPCertTemplateExt\
    \ OBJECT IDENTIFIER ::=\n         {id-regCtrl-altCertTemplate 2}\n   Value:\n\
    \      OpenPGPCertTemplateExtended ::= SEQUENCE {\n         nativeTemplate   OpenPGPCertTemplate,\n\
    \         controls         Controls  OPTIONAL }\n      OpenPGPCertTemplate ::=\
    \ OCTET STRING\n      -- contains the OpenPGP CertTemplate data structure defined\n\
    \      -- below (binary format without Radix-64 conversions)\n      -- encoded\
    \ as an ASN.1 OCTET STRING\n"
- title: 2.2.1.  OpenPGP CertTemplate Data Structure
  contents:
  - "2.2.1.  OpenPGP CertTemplate Data Structure\n   Similar to the X.509 CertTemplate,\
    \ the OpenPGP CertTemplate is an\n   OpenPGP certificate (OpenPGP Transferable\
    \ Public Key) [OPENPGP] with\n   all fields optional.  The essential elements\
    \ of an OpenPGP\n   CertTemplate are:\n   - Zero or one Public Key packet.\n \
    \  - Zero or more Direct Key Self Signature packets.\n   - Zero or more Certification\
    \ Signature packets (only if no User ID\n     packets are present).\n   - Zero\
    \ or more User ID packets.\n   - After each User ID packet, zero or more Certification\
    \ Signature\n     packets.\n   - Zero or more Subkey packets.\n   - After each\
    \ Subkey packet, zero or one Subkey Binding Signature\n     packet.\n   Each packet\
    \ in the OpenPGP CertTemplate MUST be a syntactically\n   correct OpenPGP packet.\
    \  This will enable conformant implementations\n   to use existing PGP libraries\
    \ for building and parsing OpenPGP\n   CertTemplates.\n   The following implications\
    \ of this rule should be explicitly noted:\n   - Fields for which the OpenPGP\
    \ specification defines a set of\n     permitted values (e.g., the signature type\
    \ or the public key\n     algorithm fields of the Signature packet) MUST have\
    \ a value from\n     the defined set.  Even if the requester does not have any\n\
    \     particular preferences for, for example, the signature algorithm,\n    \
    \ it MUST choose one value that is the most desirable.\n     Rationale: An alternative\
    \ solution could be to define extra \"any\"\n     values, but this would be a\
    \ modification of the OpenPGP syntax,\n     which is not considered appropriate\
    \ in this document.\n   - All subpackets of the Signature packet defined by the\
    \ OpenPGP\n     specification as mandatory (e.g., the creation time and the\n\
    \     issuer's key id subpackets) MUST be present even though they do not\n  \
    \   make much sense in the context of a certificate request.\n   - The number\
    \ of MPIs at the end of the Key Material and the Signature\n     packets MUST\
    \ match the number defined by the OpenPGP specification\n     for the given algorithm\
    \ (the algorithm is controlled by the value\n     of the \"algorithm\" field).\
    \  For example, there should be 2 MPIs for\n     DSA signatures.  Note that the\
    \ OpenPGP specification does not\n     define validation rules for the content\
    \ of those MPIs.\n   Though it is not considered appropriate here to define extra\
    \ \"any\"\n   values for fields of enumerated types, such values can still be\n\
    \   defined for some other fields where the OpenPGP specification is not\n   that\
    \ strict.\n   The following extra values are defined in the context of the OpenPGP\n\
    \   CertTemplate.  Note that these definitions do not modify the syntax\n   of\
    \ OpenPGP packets, and existing PGP libraries can still be used to\n   generate\
    \ and parse them.\n   - For fields representing time (e.g., signature creation\
    \ time): the\n     value of zero means \"any time\".\n   - For fields holding\
    \ key IDs: the value of 0xFFFFFFFFFFFFFFFF means\n     \"any key id\".\n   - For\
    \ signature fields: the \"any signature\" value is encoded as a\n     sequence\
    \ of MPIs such that:\n     * the number of MPIs matches the number of MPIs defined\
    \ by the\n       OpenPGP specification for the given algorithm, and\n     * the\
    \ value of each MPI is 0xFF.\n     A Signature packet with the \"any\" value in\
    \ the signature fields is\n     called a Signature Template.\n       Example:\
    \ The \"any signature\" value for a DSA signature would look\n       like [00\
    \ 08 FF 00 08 FF]\n   - For key material fields: the \"any key\" value is encoded\
    \ as a\n     sequence of MPIs such that:\n     * the number of MPIs matches the\
    \ number of MPIs defined by the\n       OpenPGP specification for the given algorithm,\
    \ and\n     * the value of at least one of the MPIs is a bit string with all\n\
    \       its bits set to 1.\n     A Key Material packet with the \"any\" value\
    \ in the key material\n     fields is called a Key Template.  (See Key Template\
    \ section for\n     further details.)\n       Example: The \"any key\" value for\
    \ a DSA public key may look like\n       [00 08 FF 00 10 FF FF 00 10 85 34 00\
    \ 08 FF]\n   The following rules apply to the sequence of packets within the\n\
    \   OpenPGP CertTemplate:\n   - If the Public Key packet is omitted from the OpenPGP\
    \ CertTemplate,\n     then this CertTemplate does not constrain the value of the\
    \ public\n     key (i.e., it refers to \"any\" public key).\n   - The order of\
    \ Signature packets following a User ID packet and the\n     order of User ID\
    \ packets within the CertTemplate are not important.\n   - If an OpenPGP CertTemplate\
    \ does not contain any User ID packets,\n     then it refers to \"any\" user IDs\
    \ that are relevant to a given\n     request.\n"
- title: 2.2.2.  OpenPGP CertTemplate in Certificate Requests
  contents:
  - "2.2.2.  OpenPGP CertTemplate in Certificate Requests\n   Since an OpenPGP certificate\
    \ can have several certification\n   signatures, the OpenPGP CertTemplate uses\
    \ Signature Templates to\n   define where certification signatures should occur.\
    \  The values of\n   the fields of the Signature Templates define the parameters\
    \ of the\n   new certification signatures.  The following rules apply:\n   - A\
    \ Signature Template that is present in the list of signatures\n     following\
    \ a User ID packet requests that the CA certify this User\n     ID and the public\
    \ key and replace the Signature Template with the\n     new certification signature.\
    \  The Signature Template does not\n     mandate the exact place of the certification\
    \ signature within the\n     list.  The certification signature may be inserted\
    \ at any position\n     within the list of signatures (following the certified\
    \ User ID\n     packet).\n   - A Signature Template may be present in the OpenPGP\
    \ CertTemplate\n     without any preceding User ID packet.  In this case, it is\
    \ assumed\n     that the CA knows the ID(s) of the user by some other means. \
    \ A\n     Signature Template without a preceding User ID requests that the CA\n\
    \     insert all known User IDs of the user into the OpenPGP certificate\n   \
    \  and certify each of them.  The Signature Template defines the\n     parameters\
    \ of these certification signatures.\n   - If an OpenPGP CertTemplate contains\
    \ no Signature Templates, then\n     the CA is requested to certify all User IDs\
    \ that are present in the\n     OpenPGP CertTemplate.  Such a CertTemplate does\
    \ not define\n     parameters of the certification signatures explicitly, but\
    \ the CA\n     SHOULD use parameters of the certification self-signatures (if\n\
    \     present in the CertTemplate) as a guide (e.g., key flags fields).\n   -\
    \ If neither Signature Templates nor User IDs are present in the\n     OpenPGP\
    \ CertTemplate, then the CA is expected to know the ID(s) of\n     the user by\
    \ some other means.  In this case, the CertTemplate\n     requests that the CA\
    \ insert these User IDs into the OpenPGP\n     certificate and certify each of\
    \ them.  The parameters of the\n     certification signatures are left to the\
    \ CA.\n   If several certification signatures have to be produced according to\n\
    \   an OpenPGP CertTemplate, and any of them cannot be granted (even with\n  \
    \ modifications) for whatever reason, then the whole request with this\n   OpenPGP\
    \ CertTemplate MUST be rejected.\n   The client SHOULD provide enough information\
    \ in its request that the\n   CA could produce a complete OpenPGP certificate.\
    \  For example, the\n   client SHOULD include in the template all relevant subkeys\
    \ with their\n   binding signatures so that the CA can include them in the resultant\n\
    \   OpenPGP certificate as well.  Rationale: In some environments, the\n   CA/RA\
    \ is responsible for publishing certificates.\n"
- title: 2.2.3.  Key Templates and Central Key Generation
  contents:
  - "2.2.3.  Key Templates and Central Key Generation\n   The OpenPGP CertTemplate\
    \ can also be used to request certification of\n   centrally-generated keys. \
    \ This is accomplished by using Key\n   Templates.\n   If the Public Key packet\
    \ of an OpenPGP CertTemplate is a Key\n   Template, then this OpenPGP CertTemplate\
    \ requests that the CA/RA\n   generate the key pair prior to certifying it.  Fields\
    \ of the Key\n   Template define parameters of the new key pair as follows (see\n\
    \   examples in the Appendix):\n   - The \"public key algorithm\" field specifies\
    \ the algorithm to be used\n     for the key generation.\n   - MPI fields with\
    \ the value of 0xFF ([00 08 FF]) specify that no\n     constraint is placed on\
    \ the corresponding part of the key.\n   - MPI fields that contain any other bit\
    \ strings in which all bits are\n     set to 1, specify that the corresponding\
    \ part of the key should be\n     of the same length as the length of the MPI\
    \ (e.g., the length of\n     the public modulus n of the RSA key).\n   - MPI fields\
    \ that contain any other values specify that the\n     corresponding part of the\
    \ key should be of the given value (key\n     generation parameters).\n   In order\
    \ to return a complete OpenPGP certificate, in addition to\n   certifying the\
    \ new key and the User ID, the CA (or RA) SHOULD also\n   create a self-signature\
    \ (i.e., sign the new public key and the User\n   ID with the new private key)\
    \ and include it after the User ID packet.\n   This SHOULD be done for all User\
    \ IDs certified by the CA.\n   If a Subkey packet of an OpenPGP CertTemplate is\
    \ a Key Template, then\n   this OpenPGP CertTemplate requests that the CA/RA generate\
    \ a subkey.\n   Fields of the Key Template define parameters of the new subkey.\
    \  The\n   new subkey obviously does not have to be certified.  However, the\n\
    \   CA/RA SHOULD produce the binding signature and include it after the\n   subkey,\
    \ if the CA/RA knows the user's primary private key (e.g., it\n   was centrally\
    \ generated as well).  Note that if the CA/RA does not\n   know the user's primary\
    \ private key, then the resultant OpenPGP\n   certificate returned from the CA/RA\
    \ to the client will be incomplete\n   (i.e., there will be no binding signature\
    \ for the subkey).  It will\n   be the responsibility of the client to produce\
    \ and add the binding\n   signature and to publish the final OpenPGP certificate.\n\
    \   If an OpenPGP CertTemplate contains neither PublicKey/Subkey packets\n   nor\
    \ Key Template packets, then it requests that the CA generate\n   keys/subkeys\
    \ according to the CA's policies.\n"
- title: 2.2.4.  OpenPGPCertTemplateExtended
  contents:
  - "2.2.4.  OpenPGPCertTemplateExtended\n   The OpenPGPCertTemplateExtended structure\
    \ enables additional\n   extensions and controls to be added to the basic OpenPGP\n\
    \   CertTemplate.\n"
- title: 2.2.5.  OpenPGP CertTemplate Required Profile
  contents:
  - "2.2.5.  OpenPGP CertTemplate Required Profile\n   A conformant implementation\
    \ is REQUIRED to support OpenPGP\n   CertTemplates that are valid OpenPGP certificates,\
    \ i.e., that have\n   the following structure (see examples in the Appendix):\n\
    \   - One Public Key packet (not a Key Template).\n   - Zero or more Direct Key\
    \ Self Signature packets (without Signature\n     Templates).\n   - One or more\
    \ User ID packets.\n   - After each User ID packet, zero or more Certification\
    \ Signature\n     packets (without Signature Templates).\n   - Zero or more Subkey\
    \ packets (without Key Templates).\n   - After each Subkey packet, one Subkey\
    \ Binding Signature packet (not\n     a Signature Template).\n   A conformant\
    \ implementation is REQUIRED to recognise Key Templates\n   and Signature Templates\
    \ and is REQUIRED to either support them or\n   reject requests containing them\
    \ if it does not.\n"
- title: 3.  Proof-of-Possession
  contents:
  - "3.  Proof-of-Possession\n   A CRMF request includes a Proof-of-Possession (POP)\
    \ field that\n   contains proof that an End Entity has possession of the private\
    \ key\n   corresponding to the public key for which a certificate is requested.\n\
    \   The following rule applies to this field (with modifications from\n   [CMP]):\n\
    \      * NOTE: If CertReqMsg certReq certTemplate (or the\n      * altCertTemplate\
    \ control) contains the subject and\n      * publicKey values, then poposkInput\
    \ MUST be omitted\n      * and the signature MUST be computed on the DER-encoded\n\
    \      * value of CertReqMsg certReq (or the DER-encoded value\n      * of AltCertTemplate).\n\
    \   An OpenPGP CertTemplate is considered to satisfy the conditions of\n   this\
    \ note if it has a Public Key packet (not a Key Template) and at\n   least one\
    \ User ID packet.\n"
- title: 4.  Protocol-specific Issues
  contents:
  - "4.  Protocol-specific Issues\n   This section explains how alternative certificate\
    \ formats may be\n   incorporated into such popular protocols as PKIX-CMP and\
    \ CMC.\n"
- title: 4.1.  PKIX-CMP
  contents:
  - "4.1.  PKIX-CMP\n   In PKIX-CMP, the ASN.1 [ASN1] construct, and corresponding\
    \ comment\n   for a certificate is given as follows.\n      CMPCertificate ::=\
    \ CHOICE {\n         x509v3PKCert        Certificate\n      }\n      -- This syntax,\
    \ while bits-on-the-wire compatible with the\n      -- standard X.509 definition\
    \ of \"Certificate\", allows the\n      -- possibility of future certificate types\
    \ (such as X.509\n      -- attribute certificates, WAP WTLS certificates, or\n\
    \      -- other kinds of certificates) within this certificate\n      -- management\
    \ protocol, should a need ever arise to support\n      -- such generality.\n \
    \  Building on this framework, this document expands the above CHOICE\n   construct\
    \ as follows.\n      CMPCertificate ::= CHOICE {\n         x509v3PKCert      \
    \  Certificate,\n         x509v2AttCert   [0] AttributeCertificate,\n        \
    \                     -- defined in [ATTCERT]\n         openPGPCert     [2] OpenPGPCert\n\
    \      }\n      OpenPGPCert ::= OCTET STRING\n         -- contains the OpenPGP\
    \ certificate (OpenPGP Transferable\n         -- Public Key) data structure from\
    \ the OpenPGP specification\n         -- [OPENPGP] (binary format without Radix-64\
    \ conversions),\n         -- encoded as an ASN.1 OCTET STRING\n   Expanding the\
    \ CHOICE construct as above allows X.509 attribute\n   certificates and OpenPGP\
    \ certificates to be used within the PKIX-CMP\n   management messages.  In the\
    \ future, this construct may be expanded\n   further (in subsequent revisions\
    \ of this document) to accommodate\n   other certificate types, if this is found\
    \ to be necessary.\n"
- title: 4.2.  CMC
  contents:
  - "4.2.  CMC\n   The CMC protocol uses the CMS (Cryptographic Message Syntax) syntax\n\
    \   [CMS], which defines the certificate type as\n    CertificateChoices ::= CHOICE\
    \ {\n      certificate Certificate,\n      extendedCertificate [0] IMPLICIT ExtendedCertificate,\
    \  -- Obsolete\n      v1AttrCert [1] IMPLICIT AttributeCertificateV1,        --\
    \ Obsolete\n      v2AttrCert [2] IMPLICIT AttributeCertificateV2 }\n   Similar\
    \ to PKIX-CMP, this CHOICE can be extended to include\n   additional types of\
    \ certificates as follows.\n    CertificateChoices ::= CHOICE {\n      certificate\
    \ Certificate,\n      extendedCertificate [0] IMPLICIT ExtendedCertificate,  --\
    \ Obsolete\n      v1AttrCert [1] IMPLICIT AttributeCertificateV1,        -- Obsolete\n\
    \      v2AttrCert [2] IMPLICIT AttributeCertificateV2,\n      openPGPCert [3]\
    \ IMPLICIT OpenPGPCert }\n   This allows both X.509 attribute certificates and\
    \ OpenPGP\n   certificates to be used within the CMC management messages.  In\
    \ the\n   future, this construct may be expanded further (in subsequent\n   revisions\
    \ of this document) to accommodate other certificate types,\n   if this is found\
    \ to be necessary.\n   The CMC specification defines certain constraints on the\
    \ subject and\n   publicKey fields of the CRMF's CertTemplate structure.  The\
    \ same\n   constraints should apply to the AltCertTemplate structure if\n   alternative\
    \ certificate types are used.  For example, the CMC\n   specification mandates\
    \ that\n      When CRMF message bodies are used in the Full Enrollment Request\n\
    \      message, each CRMF message MUST include both the subject and\n      publicKey\
    \ fields in the CertTemplate.\n   If alternative certificate types are used, this\
    \ should be extended as\n      When CRMF message bodies are used in the Full Enrollment\
    \ Request\n      message, each CRMF message MUST include both the subject and\n\
    \      publicKey fields in the CertTemplate (or in the altCertTemplate\n     \
    \ control).\n"
- title: 5.  Security Considerations
  contents:
  - '5.  Security Considerations

    '
- title: 5.1.  Protection of Alternative Certificate Templates
  contents:
  - "5.1.  Protection of Alternative Certificate Templates\n   This document defines\
    \ extensions to the CRMF format, so security\n   considerations from the CRMF\
    \ specification [CRMF] apply here as well.\n   In particular, the security of\
    \ alternative certificate templates\n   relies upon the security mechanisms of\
    \ the protocol or process used\n   to communicate with CAs.\n   Exact security\
    \ requirements depend on a particular PKI deployment,\n   but integrity protection\
    \ and message origin authentication are\n   typically required for certification\
    \ requests.  The CMP and CMC\n   certificate management protocols mentioned in\
    \ this document provide\n   both integrity protection and message origin authentication\
    \ for\n   request messages (which includes certificate templates as well).\n \
    \  Confidentiality may also be required where alternative certificate\n   templates\
    \ contain subscriber-sensitive information.  The CMC protocol\n   allows the content\
    \ of request messages to be encrypted.  CMP does not\n   include confidentiality\
    \ mechanisms for certification requests, but if\n   confidentiality is needed,\
    \ it can be achieved with a lower-layer\n   security protocol (e.g., TLS or IPsec).\n"
- title: 5.2.  Request Authorisation
  contents:
  - "5.2.  Request Authorisation\n   In order to make a decision as to whether a request\
    \ should be\n   accepted, a CA should normally be able to compare the (authenticated)\n\
    \   name of the sender of the request with the request subject name.\n   For example,\
    \ an End Entity may be allowed to request additional\n   certificates for himself/herself.\
    \  In this case, the CA will accept a\n   request if the Sender is equal to the\
    \ Subject (of course, other\n   conditions will have to be checked as well before\
    \ the certificate is\n   granted).\n   If a PGP certificate is requested using\
    \ the extensions proposed here,\n   the Sender field of the request will be encoded\
    \ as an ASN.1\n   GeneralName (in both CMP and CMC), while the Subject will be\n\
    \   represented as a PGP UserID.  Since the PGP UserID is effectively an\n   unrestricted\
    \ octet string, it is not always trivial to compare these\n   two types.  It is\
    \ possible that an attacker may try to submit\n   requests with specially crafted\
    \ UserIDs (e.g., that include obscure\n   characters) in order to trick the CA\
    \ comparison algorithm and obtain\n   a PGP certificate with a UserID that belongs\
    \ to someone else.\n   In these circumstances, it is safer for the CA, when building\
    \ the PGP\n   certificate's UserID, to completely rebuild the UserID based on\
    \ the\n   content of the authenticated Sender name rather than take the UserID\n\
    \   from the request.  To achieve this, additional information about the\n   End\
    \ Entity may be required at the CA (e.g., the EE's email address).\n"
- title: 5.3.  PGP Parser
  contents:
  - "5.3.  PGP Parser\n   Software components that implement the proposed extensions\
    \ (e.g., CMP\n   or CMC servers) will necessarily increase in complexity.  If\
    \ a\n   \"standard\" server is expected to be able to parse ASN.1 streams, the\n\
    \   \"extended\" server is required to be able to parse PGP streams as\n   well.\
    \  A PGP parser code may introduce new security vulnerabilities\n   that can be\
    \ exploited by an attacker to mount a DoS attack or gain\n   access to the server.\n\
    \   In order to reduce the consequences of a successful attack, it is\n   recommended\
    \ that the CMP or CMC servers be run on a separate machine\n   from the main CA\
    \ server.  These protocol servers should not have\n   access to the main CA key\
    \ and should not have write access to the CA\n   store.\n"
- title: Appendix A.  Examples of OpenPGP CertTemplates
  contents:
  - "Appendix A.  Examples of OpenPGP CertTemplates\n   This Appendix presents examples\
    \ of OpenPGP CertTemplates that are\n   used for requesting OpenPGP certificates\
    \ from a CA.\n"
- title: A1.  Simple Certificate Request
  contents:
  - "A1.  Simple Certificate Request\n   Alice requests an OpenPGP certificate for\
    \ her public key accompanied\n   by a subkey.\n   The content of the OpenPGP CertTemplate\
    \ in the request is as follows.\n   This CertTemplate conforms to the OpenPGP\
    \ CertTemplate Required\n   Profile.\n      0000:  99 01 A2         === Pub Key\
    \ packet ===\n      0003:  04 3C 58 27 A2 11      ver 4, created 30 Jan 2002,\
    \ DSA\n      0009:  00 E3 FB 9D .. 2B EF   DSA prime p\n      008B:  00 A0 FF\
    \ 7E .. BA 71   DSA group order q\n      00A1:  03 FF 68 BC .. 56 71   DSA group\
    \ generator g\n      0123:  03 FE 38 1F .. F2 63   DSA public key value y\n  \
    \    01A5:  B4 19            === User ID packet ===\n      01A7:  41 6C .. 6D\
    \ 3E         \"Alice <alice@example.com>\"\n      01C0:  89 00 49         ===\
    \ Signature packet (self-signature) ===\n      01C3:  04 10 11 02            ver\
    \ 4, gen cert, DSA, SHA1\n      01C7:  00 09 05 02 3C 58 27 A2 02 1B 03\n    \
    \                                created 30 Jan 2002, key usage:\n           \
    \                         sign data and certify other keys\n      01D2:  00 0A\
    \ 09 10 43 5C .. 06 77   issuer key id\n      01DE:  5A C2                  left\
    \ 16 bits of signed hash value\n      01E0:  00 A0 EB 00 .. 1B 75   DSA value\
    \ r\n      01F6:  00 A0 F4 E4 .. A8 3D   DSA value s\n      020C:  B9 02 0D  \
    \       === Public Subkey packet ===\n      020F:  04 3C 58 27 A2 10      ver\
    \ 4, created 30 Jan 2002,\n                                    Elgamal (encrypt-only)\
    \ algorithm\n      0215:  08 00 F6 42 .. 0B 3B   Elgamal prime p\n      0317:\
    \  00 02 02               Elgamal group generator g\n      031A:  07 FE 37 BA\
    \ .. DF 21   Elgamal public key value y\n      041C:  89 00 49         === Signature\
    \ packet (subkey binding) ===\n      041F:  04 18 11 02            ver 4, subkey\
    \ binding, DSA, SHA1\n      0423:  00 09 05 02 3C 58 27 A2 02 1B 0C\n        \
    \                            created 30 Jan 2002, key usage:\n               \
    \                     encrypt communications and storage\n      042E:  00 0A 09\
    \ 10 43 5C .. 06 77   issuer key id\n      043A:  C7 DE                  left\
    \ 16 bits of signed hash value\n      043C:  00 9E 21 33 .. 39 1B   DSA value\
    \ r\n      0452:  00 9F 64 D7 .. 63 08   DSA value s\n      0468:\n   CA certifies\
    \ Alice's User ID and the public key and creates the\n   following OpenPGP certificate:\n\
    \      0000:  99 01 A2             === Pub Key packet ===\n      0003:    <the\
    \ same as in the request>\n      01A5:  B4 19            === User ID packet ===\n\
    \      01A7:    <the same as in the request>\n      01C0:  89 00 49         ===\
    \ Signature packet (self-signature) ===\n      01C3:    <the same as in the request>\n\
    \      020C:  89 00 49         === Signature packet (certification) ===\n    \
    \  020F:  04 13 11 02            ver 4, positive cert, DSA, SHA1\n      0213:\
    \  00 09 05 02 3C 58 28 1A 02 1B 03\n                                    created\
    \ 30 Jan 2002, key usage:\n                                    sign data and certify\
    \ other keys\n      021E:  00 0A 09 10 F0 0D .. 1F CA   issuer key id\n      022A:\
    \  06 DF                  left 16 bits of signed hash value\n      022C:  00 9F\
    \ 57 2D .. 26 E3   DSA value r\n      0242:  00 A0 B3 02 .. CE 65   DSA value\
    \ s\n      0258:  B9 02 0D         === Public Subkey packet ===\n      025B: \
    \   <the same as in the request>\n      0468:  89 00 49         === Signature\
    \ packet (subkey binding) ===\n      046B:    <the same as in the request>\n \
    \     04B4:\n"
- title: A2.  Certificate Request with Central Key Generation
  contents:
  - "A2.  Certificate Request with Central Key Generation\n   Alice requests that\
    \ the CA generate an RSA key pair that will be used\n   for signing, an RSA key\
    \ pair that will be used for encryption, and\n   requests that the CA certify\
    \ these keys.  The RSA keys are requested\n   to be 2048 bits long with the public\
    \ exponent 65537.\n   The content of the OpenPGP CertTemplate in the request is\
    \ as follows:\n      0000:  99 01 0D         === Pub Key packet (Template) ===\n\
    \      0003:  04 FF FF FF FF 01      ver 4, any creation date, RSA\n      0009:\
    \  08 00 FF FF .. FF FF   RSA public modulus n - given length\n      010B:  00\
    \ 11 01 00 01         RSA public exponent e\n      0110:  B4 19            ===\
    \ User ID packet ===\n      0112:  41 6C .. 6D 3E         \"Alice <alice@example.com>\"\
    \n      012B:  89 00 23         === Signature packet (Template) ===\n      012E:\
    \  04 10 11 02            ver 4, gen cert, DSA, SHA1\n      0132:  00 09 05 02\
    \ FF FF FF FF 02 1B 03\n                                    any creation date,\
    \ key usage:\n                                    sign data and certify other\
    \ keys\n      013D:  00 0A 09 10 FF FF .. FF FF   issuer key id - any\n      0149:\
    \  05 3A                  left 16 bits of signed hash value\n      014B:  00 08\
    \ FF               DSA value r - any\n      014E:  00 08 FF               DSA\
    \ value s - any\n      0151:  99 01 0D         === Public Subkey packet (Template)\
    \ ===\n      0154:  04 FF FF FF FF 01      ver 4, any creation date, RSA\n   \
    \   015A:  08 00 FF FF .. FF FF   RSA public modulus n - given length\n      025C:\
    \  00 11 01 00 01         RSA public exponent e\n      0261:  89 00 20       \
    \  === Signature packet (Template) ===\n      0264:  04 18 01 02            ver\
    \ 4, subkey binding, RSA, SHA1\n      0268:  00 09 05 02 FF FF FF FF 02 1B 0C\n\
    \                                    any creation date, key usage:\n         \
    \                           encrypt communications and storage\n      0273:  00\
    \ 0A 09 10 FF FF .. FF FF   issuer key id - any\n      027F:  12 E6          \
    \        left 16 bits of signed hash value\n      0281:  00 08 FF            \
    \   RSA signature value - any\n      0284:\n   CA generates keys, certifies Alice's\
    \ User ID and the public key, and\n   creates the following OpenPGP certificate:\n\
    \      0000:  99 01 0D         === Pub Key packet  ===\n      0003:  04 3C 5A\
    \ A5 BB 01      ver 4, created 01 Feb 2002, RSA\n      0009:  08 00 C7 21 .. 5B\
    \ EB   RSA public modulus n\n      010B:  00 11 01 00 01         RSA public exponent\
    \ e\n      0110:  B4 19            === User ID packet ===\n      0112:  41 6C\
    \ .. 6D 3E         \"Alice <alice@example.com>\"\n      012B:  89 01 1F      \
    \   === Signature packet (self-signature) ===\n      012E:  04 10 01 02      \
    \      ver 4, gen cert, RSA, SHA1\n      0132:  00 09 05 02 3C 5A A5 BB 02 1B\
    \ 03\n                                    created 01 Feb 2002, key usage:\n  \
    \                                  sign data and certify other keys\n      014D:\
    \  00 0A 09 10 8E AF .. 1A 18   issuer key id\n      0149:  3B 21            \
    \      left 16 bits of signed hash value\n      014B:  07 FE 2F 1D .. C0 81  \
    \ RSA signature value\n      024D:  89 00 49         === Signature packet (certification)\
    \ ===\n      0250:  04 13 11 02            ver 4, positive cert, DSA, SHA1\n \
    \     0254:  00 09 05 02 3C 5A A5 DC 02 1B 03\n                              \
    \      created 01 Feb 2002, key usage:\n                                    sign\
    \ data and certify other keys\n      025F:  00 0A 09 10 F0 0D .. 1F CA   issuer\
    \ key id\n      026B:  BA C2                  left 16 bits of signed hash value\n\
    \      026D:  00 9F 5E 58 .. 30 B3   DSA value r\n      0283:  00 A0 D1 D7 ..\
    \ 5A AF   DSA value s\n      0299:  99 01 0D         === Public Subkey packet\
    \ ===\n      029C:  04 3C 5A A5 C5 01      ver 4, created 01 Feb 2002, RSA\n \
    \     02A2:  08 00 C3 03 .. 8C 53   RSA public modulus n\n      03A4:  00 11 01\
    \ 00 01         RSA public exponent e\n      03A9:  89 01 1F         === Signature\
    \ packet (subkey binding) ===\n      03AC:  04 18 01 02            ver 4, subkey\
    \ binding, RSA, SHA1\n      03B0:  00 09 05 02 3C 5A A5 C5 05 1B 0C\n        \
    \                            created 01 Feb 2002, key usage:\n               \
    \                     encrypt communications and storage\n      03BB:  00 0A 09\
    \ 10 8E AF .. 1A 18   issuer key id\n      03C7:  C8 44                  left\
    \ 16 bits of signed hash value\n      03C9:  07 FB 04 D7 .. 75 BE   RSA signature\
    \ value\n      04CB:\n"
- title: Normative References
  contents:
  - "Normative References\n   [ASN1]    CCITT Recommendation X.208: Specification\
    \ of Abstract\n             Syntax Notation One (ASN.1), 1988.\n   [ATTCERT] Farrell,\
    \ S. and R. Housley, \"An Internet Attribute\n             Certificate Profile\
    \ for Authorization\", RFC 3281, April\n             2002.\n   [CMC]     Myers,\
    \ M., Liu, X., Schaad, J., and J. Weinstein,\n             \"Certificate Management\
    \ Messages over CMS\", RFC 2797, April\n             2000.\n   [CMS]     Housley,\
    \ R., \"Cryptographic Message Syntax (CMS)\", RFC\n             3852, July 2004.\n\
    \   [CMP]     Adams, C., Farrell, S., Kause, T., and T. Mononen,\n           \
    \  \"Internet X.509 Public Key Infrastructure: Certificate\n             Management\
    \ Protocol (CMP)\", RFC 4210, September 2005.\n   [CRMF]    Schaad, J., \"Internet\
    \ X.509 Public Key Infrastructure:\n             Certificate Request Message Format\
    \ (CRMF)\", RFC 4211,\n             September 2005.\n   [OPENPGP] Callas, J.,\
    \ Donnerhacke, L., Finney, H., and R. Thayer,\n             \"OpenPGP Message\
    \ Format\", RFC 2440, November 1998.\n   [RFC2119] Bradner, S., \"Key words for\
    \ use in RFCs to Indicate\n             Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Mikhail Blinov\n   Guardeonic Solutions\n   Fitzwilliam\
    \ Court, Leeson Close\n   Dublin 2, Ireland\n   EMail:  mikblinov@online.ie\n\
    \   Carlisle Adams\n   School of Information Technology and Engineering (SITE)\n\
    \   University of Ottawa\n   800 King Edward Avenue\n   P.O. Box 450, Stn A\n\
    \   Ottawa, Ontario, Canada K1N 6N5\n   EMail:  cadams@site.uottawa.ca\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78 and at www.rfc-editor.org/copyright.html, and\n   except as set forth\
    \ therein, the authors retain all their rights.\n   This document and the information\
    \ contained herein are provided on an\n   \"AS IS\" basis and THE CONTRIBUTOR,\
    \ THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED BY (IF ANY), THE INTERNET\
    \ SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES,\
    \ EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE\
    \ OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n\
    \   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
