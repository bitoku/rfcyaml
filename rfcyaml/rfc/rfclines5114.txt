Abstract This document describes eight Diffie Hellman groups that can be used in conjunction with IETF protocols to provide security for Internet communications.
The groups allow implementers to use the same groups with a variety of security protocols, e.g., SMIME, Secure SHell (SSH), Transport Layer Security (TLS), and Internet Key Exchange (IKE).
All of these groups comply in form and structure with relevant standards from ISO, ANSI, NIST, and the IEEE.
These groups are compatible with all IETF standards that make use of Diffie Hellman or Elliptic Curve Diffie Hellman cryptography.
These groups and the associated test data are defined by NIST on their web site [EX80056A], but have not yet (as of this writing) been published in a formal NIST document.
Publication of these groups and associated test data, as well as describing how to use Diffie Hellman and Elliptic Curve Diffie Hellman for key agreement in all of the protocols cited below, in one RFC, will facilitate development of interoperable implementations and support the Federal Information Processing Standard (FIPS) validation of implementations that make use of these groups.
This document provides parameters and test data for several Diffie Hellman (D H) groups that can be used with IETF protocols that employ D H keys, (e.g., IKE, TLS, SSH, and SMIME) and with IETF standards, such as Public Key Infrastructure for X.509 Certificates (PKIX) (for certificates that carry D H keys).
These groups complement others already documented for the IETF, including the "Oakley" groups defined in RFC 2409 [RFC2409] for use with IKEv1, and several additional D H groups defined later, e.g., [RFC3526] and [RFC4492].
The initial impetus for the definition of D H groups (in the IETF) arose in the IPsec (IKE) context, because of the use of an ephemeral, unauthenticated D H exchange as the starting point for that protocol.
RFC 2409 defined five standard Oakley Groups: three modular exponentiation groups and two elliptic curve groups over GF[2^N].
One modular exponentiation group (768 bits Oakley Group 1) was declared to be mandatory for all IKEv1 implementations to support, while the other four were optional.
Sixteen additional groups subsequently have been defined and registered with IANA for use with IKEv1, including eight that have also been registered for use with IKEv2.
All of these additional groups are optional in the IKE context.
Of the twenty one groups defined so far for use with IKE, eight are MODP groups (exponentiation groups modulo a prime),
ten are EC2N groups (elliptic curve groups over GF[2^N]), and three are ECP groups (elliptic curve groups over GF[P]).
The purpose of this document is to provide the parameters and test data for eight additional groups, in a format consistent with existing RFCs along with instructions on how these groups can be used with IETF protocols such as SMIME, SSH, TLS, and IKE.
Three of these groups were previously specified for use with IKE [RFC4753], and five of these groups were previously specified for use with TLS
(The latter document does not provide or reference test data for the specified groups).
By combining the specification of all eight groups with test data and instructions for use in a variety of protocols, this document serves as a resource for implementers who may wish to offer the same Diffie Hellman groups for use with multiple IETF protocols.
All of these groups are compatible with applicable ISO [ISO 14888 3], ANSI [X9.62], and NIST [NIST80056A] standards for Diffie Hellman key exchange.
These groups and the associated test data are defined by NIST on their web site [EX80056A], but have not yet (as of this writing) been published in a formal NIST document.
Publication of these groups with associated test data as an RFC will facilitate development of interoperable implementations and support FIPS validation of implementations that make use of these groups.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119
This section contains the specification for eight groups for use in IKE, TLS, SSH, etc.
There are three standard prime modulus groups and five elliptic curve groups.
All groups were taken from publications of the National Institute of Standards and Technology, specifically [DSS] and [NIST80056A].
Test data for each group is provided in Appendix A. 2.1.
1024 bit MODP Group with 160 bit Prime Order Subgroup
The hexadecimal value of the prime is: p
The hexadecimal value of the generator is: g
9E2749F4 D7FBD7D3 B9A92EE1 909D0D22 63F80A76
The generator generates a prime order subgroup of size:
2048 bit MODP Group with 224 bit Prime Order Subgroup
The hexadecimal value of the prime is: p    AD107E1E 9123A9D0 D660FAA7
7310F712 1FD5A074 15987D9A DC0A486D CDF93ACC 44328387
The hexadecimal value of the generator is:
118E98D1 19529A45 D6F83456 6E3025E3 16A330EF BB77A86F 0C1AB15B
The generator generates a prime order subgroup of size: q    801C0D34
2048 bit MODP Group with 256 bit Prime Order Subgroup
The hexadecimal value of the prime is: p
87A8E61D B4B6663C FFBBD19C 65195999 8CEEF608
E00DF8F1 D61957D4 FAF7DF45 61B2AA30 16C3D911
34096FAA 3BF4296D 830E9A7C 209E0C64 97517ABD
D45F9088 B941F54E B1E59BB8 BC39A0BF 12307F5C
E6B486F6 B3CA3F79 71506026 C0B857F6 89962856
The hexadecimal value of the generator is: g
2E775066 60EDBD48 4CA7B18F 21EF2054 07F4793A
FB3F2E55 A4BD1BFF E83B9C80 D052B985 D182EA0A DB2A3B73
The generator generates a prime order subgroup of size: q   8CF83642 A709A097 B4479976 40129DA2
The curve is based on the integers modulo the prime p given by: p   2^(192) 2^(64)
1 Group prime (in hexadecimal):
The equation for the elliptic curve is: y^2   x^3   ax   b
(mod p) Group curve parameter A (in hexadecimal):
FFFFFFFF FFFFFFFE FFFFFFFF FFFFFFFC Group curve parameter B (in hexadecimal)
: b   64210519 E59C80E7 0FA7E9AB 72243049
The generator for this group is given by: g (gx,gy) where gx   188DA80E
6B24CDD5 73F977A1 1E794811 Group order (in hexadecimal):
FFFFFFFF FFFFFFFF FFFFFFFF 99DEF836 146BC9B1
224 bit Random ECP Group
The curve is based on the integers modulo the prime p given by: p   2^(224) 2^(96)
1 Group prime (in hexadecimal):
FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF 00000000 00000000 00000001
The equation for the elliptic curve is: y^2   x^3   ax   b
(mod p) Group curve parameter A (in hexadecimal):
FFFFFFFF FFFFFFFE Group curve parameter B (in hexadecimal)
: b   B4050A85 0C04B3AB F5413256 5044B0B7 D7BFD8BA 270B3943 2355FFB4
The generator for this group is given by: g (gx,gy) where gx
44D58199 85007E34 Group Order (in hexadecimal):
FFFFFFFF FFFFFFFF FFFFFFFF FFFF16A2 E0B8F03E
The curve is based on the integers modulo the prime p given by: p   2^(256) 2^(224) 2^(192) 2^(96)
1 Group prime (in hexadecimal):
The equation for the elliptic curve is: y^2   x^3   ax   b
(mod p) Group curve parameter A (in hexadecimal): a   FFFFFFFF 00000001 00000000 00000000
00000000 FFFFFFFF FFFFFFFF FFFFFFFC Group curve parameter B (in hexadecimal)
: b   5AC635D8 AA3A93E7 B3EBBD55
The generator for this group is given by: g (gx,gy) where gx   6B17D1F2
CBB64068 37BF51F5 Group Order (in hexadecimal):
384 bit Random ECP Group
The curve is based on the integers modulo the prime p given by: p   2^(384)
1 Group prime (in hexadecimal):
FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF
The equation for the elliptic curve is: y^2   x^3   ax   b
(mod p) Group curve parameter A (in hexadecimal):
a   FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE FFFFFFFF 00000000
FFFFFFFC Group curve parameter B (in hexadecimal)
FE814112 0314088F 5013875A C656398D 8A2ED19D
The generator for this group is given by: g (gx,gy)
where gx   AA87CA22 BE8B0537 8EB1C71E F320AD74
521 bit Random ECP Group
The curve is based on the integers modulo the prime p given by: p   2^(521)
FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF
The equation for the elliptic curve is: y^2   x^3   ax   b
(mod p) Group curve parameter A (in hexadecimal): a   000001FF
FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFC Group curve parameter B (in hexadecimal)
The generator for this group is given by: g (gx,gy) where gx   000000C6 858E06B7 0404E9CD
9FD16650 Group Order (in hexadecimal):
FFFFFFFF FFFFFFFA 51868783 BF2F966B 7FCC0148
Using These Groups with IETF Standards 3.1.
X.509 Certificates Representation of both MODP and Elliptic Curve Diffie Hellman public keys (and associated parameters) in X.509 certificates is defined in [RFC3279].
The MODP groups defined above MUST be represented via the syntax defined in Section 2.3.3, and the elliptic curve groups via the syntax defined in Section in 2.3.5 of that RFC.
When a Diffie Hellman public key is encoded in a certificate, if the KeyUsage extension is present, the keyAgreement bits MUST be asserted, and encipherOnly or decipherOnly (but not both)
IKE Use of MODP Diffie Hellman groups with IKEv2 is defined in [RFC4306], and the use of MODP groups with IKEv1 is defined in [RFC2409].
However, in the case of ECP Diffie Hellman groups, the format of key exchange payloads and the derivation of a shared secret has thus far been specified on a group by group basis.
For the ECP Diffie Hellman groups defined in this document, the key exchange payload format and shared key derivation procedure specified in [RFC4753] MUST be used (with both IKEv2 and IKEv1).
In order to use a Diffie Hellman group with IKE, it is required that a transform ID for the group be registered with IANA.
The following table provides the Transform IDs of each Diffie Hellman group described in this document, as registered in both [IANA IKE] and [IANA IKE2].
1024 bit MODP Group with 160 bit
TLS Use of MODP Diffie Hellman groups in TLS 1.1 is defined in [RFC4346].
TLS 1.0, the widely deployed predecessor of TLS 1.1, is specified in [RFC2246] and is the same as TLS 1.1 with respect to the use of (MODP)
Diffie Hellman to compute a pre Master secret.
(Currently, the TLS working group is in the process of producing a specification for TLS 1.2.
It is unlikely that TLS 1.2 will make significant changes to the use of Diffie Hellman, and thus the following will likely also be applicable to TLS 1.2).
A server may employ a certificate containing (fixed)
Diffie Hellman parameters, and likewise for a client using a certificate.
Thus, the relevant PKIX RFCs (see 3.1 above) are applicable.
Alternatively, a server may send ephemeral Diffie Hellman parameters in the server key exchange message, where the message signature is verified using an RSA  or DSS signed server certificate.
The details for accomplishing this for MODP Diffie Hellman groups are provided in [RFC2246].
Use of Elliptic Curve Diffie Hellman in TLS 1.1 (and 1.0) is defined in [RFC4492].
The elliptic curves in this document appear in the IANA EC Named Curve Registry [IANA TLS], although the names in the registry are taken from the Standards for Efficient Cryptography Group (SECG) specification [SECG] and differ from the names appearing in NIST publications.
The following table provides the EC Named Curve ID for each of the elliptic curves along with both the NIST name and the SECG name for the curve.
SSH Use of Diffie Hellman with SSH was defined initially in [RFC4253].
That RFC defined two MODP Diffie Hellman groups, and called for the registration of additional groups via an IANA registry.
However, [RFC4419] extended the original model to allow MODP Diffie Hellman parameters to be transmitted as part of the key exchange messages.
Thus, using RFC 4419, no additional specifications (or IANA registry actions) are required to enable use of the MODP groups defined in this document.
At this time, no RFC describes the use of Elliptic Curve Diffie Hellman with SSH.
However, [SSH ECC] provides a description of how to make use of Elliptic Curve Diffie Hellman with SSH.
SMIME Use of Diffie Hellman in SMIME is defined via a discussion of Cryptographic Message Syntax (CMS) enveloped data [RFC3852].
For MODP Diffie Hellman, the appropriate reference is [RFC2631].
This specification calls for a sender to extract the Diffie Hellman (MODP) parameters from a recipient's certificate, and thus the PKIX specifications for representation of Diffie Hellman parameters suffice.
The sender transmits his public key via the OriginatorIdentifierorKey field, or via a reference to the sender's certificate.
Use of Elliptic Curve Diffie Hellman in CMS is defined in [RFC3278].
As with use of MODP Diffie Hellman in the CMS context, the sender is assumed to acquire the recipient's public key and parameters from a certificate.
The sender includes his Elliptic Curve Diffie Hellman public key in the KeyAgreeRecipientInfo originator field.
(See Section 8.2 of RFC 3278 for details of the ECC CMS SharedInfo).
The strength of a key derived from a Diffie Hellman exchange using any of the groups defined here depends on the inherent strength of the group, the size of the exponent used, and the entropy provided by the random number generator used.
The groups defined in this document were chosen to make the work factor for solving the discrete logarithm problem roughly comparable to an attack on the subgroup.
Using secret keys of an appropriate size is crucial to the security of a Diffie Hellman exchange.
For modular exponentiation groups, the size of the secret key should be equal to the size of q (the size of the prime order subgroup).
For elliptic curve groups, the size of the secret key must be equal to the size of n (the order of the group generated by the point g).
Using larger secret keys provides absolutely no additional security, and using smaller secret keys is likely to result in dramatically less security.
(See [NIST80056A] for more information on selecting secret keys.)
When secret keys of an appropriate size are used, an approximation of the strength of each of the Diffie Hellman groups is provided in the table below.
For each group, the table contains an RSA key size and symmetric key size that provide roughly equivalent levels of security.
This data is based on the recommendations in [NIST80057].
1024 bit MODP with 160 bit Prime Subgroup
IANA Considerations IANA has taken the following actions:
Updated the IKE and IKEv2
registries to include the following five groups defined in this document:
(Note that the other three ECP groups defined in this document have already been added to the IKE registry).
1024 bit MODP Group with 160 bit
2048 bit MODP Group with 224 bit
2048 bit MODP Group with 256 bit Prime Order Subgroup  192 bit Random ECP Group
224 bit Random ECP Group Updated [IANA IKE] and [IANA IKE2] to reflect the above, which now appear as entries in the list of Diffie Hellman groups given by Group Description.
The descriptions are as stated above.
The test data in this appendix is a protocol independent subset of the test data in [EX80056A].
In the test data for the three modular exponentiation groups, we use the following notation:
The secret key of party A yA:
The public key of party A
The secret key of party B yB:
The public key of party B Z:
The shared secret that results from the Diffie Hellman computation In the test data for the five elliptic curve groups, we use the following notation:
The secret value of party A x qA:
The x coordinate of the public key of party A y qA:
The y coordinate of the public key of party
The secret value of party B x qA:
The x coordinate of the public key of party B y qA:
The y coordinate of the public key of party B x Z:
The x coordinate of the shared secret that results from the Diffie Hellman computation y
The y coordinate of the shared secret that results form the Diffie Hellman computation A.1.
1024 bit MODP Group with 160 bit
2A853B3D 92197501 B9015B2D EB3ED84F 5E021DCC 3E52F109 D3273D2B 7521281C
DDD5A56C 7833F6BC FDFF0955 82AD868E 440E8D09
FD769E3C ECCDC3D3 B1E4CFA0 57776CAA F9739B6A
9CAAC1B2 8F8ACBA9 CD3E39F3 CB614525 D9521D2E
4CD40A52 EC360E84 B3C926E2 2C4380A3 BF309D56
8D256F8F C97C074A 861D827E 2EBC8C61 34553115
D7172083 A97A8166 4EAD2C47 9E444E4C 0654CC19
703FFF42 4567A46B DF75530E DE0A9DA5 229DE7D7 6732286C
ABDBE66C 59BEE024 2911BFB9 67235CEB A35AE13E
75689E82 44AC134A F544711C E79A02DC C3422668 4780DDDC
85BF6658 AFF5E4B0 93003CBE AF665B3C 2E113A3A
47B9A551 B88F39DC 26DA14A0 9EF74774 D47C762D D177F9ED 5BC2F11E 52C879BD 95098504
CD9EECD8 A8F9B3EF BD1F008A C5853097 D9D1837F 2B18F77C
192 bit Random ECP Group
41D0EDA3 2C671112 B7FDDD51 461FCF32 A.5.
224 bit Random ECP Group dA
3D9770E6 F6A708EE 9F3B8E0A B3B480E9 F27F85C8
256 bit Random ECP Group dA
CC0AB26A 19CE6BCC AD562B8E EE1B5937 61CF7F41 x qB
AE06AAEA 279FA775 B3AB0715 F6CE51B0 y qB
384 bit Random ECP Group dA
44DD14E9 FD126071 5DFD8A79 65571C48 D709EE7A
793148F1 787634D5 DA4C6D90 74417D05 E057AB62
331D23E6 F480F4FB 4CD40504 C947392E 94F4C3F0
52D1791F DB4B70F8 9C0F00D4 56C2F702 3B612526 2C36A7DF 1F802311 21CCE3D3
9F2776D2 8BAE6169 52D1791F DB4B70F7 C3378732 AA1B2292 8448BCD1 DC2496D4
CDE54ED1 866A0DD3 E6126C9D 2F845DAF F82CEB1D
FBECAB1F 2BD4D8B5 5EBCB5E3 A53143CE B2C511B1 AE0AF5AC 827F60F2 FD872565
