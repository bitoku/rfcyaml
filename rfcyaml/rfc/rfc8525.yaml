- contents:
  - '                              YANG Library

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document describes a YANG library that provides information\n
    \  about the YANG modules, datastores, and datastore schemas used by a\n   network
    management server.  Simple caching mechanisms are provided to\n   allow clients
    to minimize retrieval of this information.  This\n   version of the YANG library
    supports the Network Management Datastore\n   Architecture (NMDA) by listing all
    datastores supported by a network\n   management server and the schema that is
    used by each of these\n   datastores.\n   This document obsoletes RFC 7895.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8525.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2019 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \     1.1. Terminology ................................................4\n   2.
    Objectives ......................................................5\n   3. YANG
    Library Data Model .........................................6\n   4. YANG Library
    YANG Module ........................................8\n   5. IANA Considerations
    ............................................20\n   6. Security Considerations
    ........................................21\n   7. References .....................................................22\n
    \     7.1. Normative References ......................................22\n      7.2.
    Informative References ....................................23\n   Appendix A.
    \ Summary of Changes from RFC 7895 .....................25\n   Appendix B.  Example
    YANG Library Instance for a Basic Server .....25\n   Appendix C.  Example YANG
    Library Instance for an Advanced Server .27\n   Authors' Addresses ................................................32\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   There is a need for a standard mechanism to expose which
    YANG modules\n   [RFC7950], datastores [RFC8342], and datastore schemas [RFC8342]
    are\n   in use by a network management server.\n   This document defines the YANG
    module \"ietf-yang-library\" that\n   provides this information.  This version
    of the YANG library is\n   compatible with the Network Management Datastore Architecture
    (NMDA)\n   [RFC8342].  The previous version of the YANG library, defined in\n
    \  [RFC7895], is not compatible with the NMDA since it assumes that all\n   datastores
    have exactly the same schema.  This is not necessarily\n   true in the NMDA since
    dynamic configuration datastores may have\n   their own datastore schema.  Furthermore,
    the operational state\n   datastore may support non-configurable YANG modules
    in addition to\n   the YANG modules supported by conventional configuration datastores.\n
    \  The old YANG library definitions have been retained (for backwards-\n   compatibility
    reasons), but the definitions have been marked as\n   deprecated.  For backwards
    compatibility, an NMDA-supporting server\n   SHOULD populate the deprecated \"/modules-state\"
    tree in a backwards-\n   compatible manner.  The new \"/yang-library\" tree will
    be ignored by\n   legacy clients but will provide all the data needed for NMDA-aware\n
    \  clients (which will ignore the \"/modules-state\" tree).  The\n   recommended
    approach to populate \"/modules-state\" is to report the\n   YANG modules with
    \"config true\" data nodes that are configurable via\n   conventional configuration
    datastores and the YANG modules with\n   \"config false\" data nodes that are
    returned via a Network\n   Configuration Protocol (NETCONF) <get> operation or
    equivalent.\n   The YANG library information can be different on every server,
    and it\n   can change at runtime or across a server reboot.  If a server\n   implements
    multiple network management protocols to access the\n   server's datastores, then
    each such protocol may have its own\n   conceptual instantiation of the YANG library.\n
    \  If a large number of YANG modules are utilized by a server, then the\n   YANG
    library contents can be relatively large.  Since the YANG\n   library contents
    change very infrequently, it is important that\n   clients be able to cache the
    YANG library contents and easily\n   identify whether their cache is out of date.\n"
  - contents:
    - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
      \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\",
      \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described
      in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all\n
      \  capitals, as shown here.\n   The following terms are defined in [RFC7950]:\n
      \  o  module\n   o  submodule\n   o  data node\n   This document uses the phrase
      \"implement a module\" as defined in\n   Section 5.6.5 of [RFC7950].\n   The
      following terms are defined in [RFC8342]:\n   o  datastore\n   o  datastore
      schema\n   o  configuration\n   o  conventional configuration datastore\n   o
      \ operational state\n   o  operational state datastore\n   o  dynamic configuration
      datastore\n   o  client\n   o  server\n   The following terms are used within
      this document:\n   o  YANG library: A collection of YANG modules, submodules,\n
      \     datastores, and datastore schemas used by a server.\n   o  YANG library
      content identifier: A server-generated identifier of\n      the contents of
      the YANG library.\n   Tree diagrams in this document use the notation defined
      in [RFC8340].\n"
    title: 1.1.  Terminology
  title: 1.  Introduction
- contents:
  - "2.  Objectives\n   The following information is needed by a client application
    (for each\n   YANG module in the library) to fully utilize the YANG data modeling\n
    \  language:\n   o  name: The name of the YANG module.\n   o  revision: If defined
    in the YANG module or submodule, the revision\n      is derived from the most
    recent revision statement within the\n      module or submodule.\n   o  submodule
    list: The name and (if defined) revision of each\n      submodule used by the
    module must be identified.\n   o  feature list: The name of each YANG feature
    supported by the\n      server must be identified.\n   o  deviation list: The
    name of each YANG module with deviation\n      statements affecting a given YANG
    module must be identified.\n   In addition, the following information is needed
    by a client\n   application for each datastore supported by a server:\n   o  identity:
    The YANG identity for the datastore.\n   o  schema: The schema (i.e., the set
    of modules) implemented by the\n      datastore.\n   In order to select one out
    of several possible designs for the YANG\n   library data model, the following
    criteria were used:\n   1.  The information must be efficient for a client to
    consume.  Since\n       the size of the YANG library can be quite large, it should
    be\n       possible for clients to cache the YANG library information.\n   2.
    \ A dynamic configuration datastore must be able to implement a\n       module
    or feature that is not implemented in the conventional\n       configuration datastores.\n
    \  3.  It must be possible to not implement a module or feature in\n       <operational>,
    even if it is implemented in some other datastore.\n       This is required for
    transition purposes; a server that wants to\n       implement <operational> should
    not have to implement all modules\n       at once.\n   4.  A given module can
    only be implemented in one revision in all\n       datastores.  If a module is
    implemented in more than one\n       datastore, the same revision is implemented
    in all these\n       datastores.\n   5.  Multiple revisions can be used for import,
    if import-by revision\n       is used.\n   6.  It must be possible to use the
    YANG library by schema mount\n       [RFC8528].\n"
  title: 2.  Objectives
- contents:
  - "3.  YANG Library Data Model\n   The \"ietf-yang-library\" YANG module provides
    information about the\n   modules, submodules, datastores, and datastore schemas
    supported by a\n   server.  All data nodes in the \"ietf-yang-library\" module
    are \"config\n   false\" and thus only accessible in the operational state datastore.\n
    \  +-----------+\n   | datastore |\n   +-----------+\n        |\n        | has
    a\n        V\n   +-----------+            +--------+                +------------+\n
    \  | datastore |  union of  | module |  consists of   | modules +  |\n   |  schema
    \  |----------->|  set   |--------------->| submodules |\n   +-----------+            +--------+
    \               +------------+\n                                 Figure 1\n   The
    conceptual model of the YANG library is depicted in Figure 1.\n   Following the
    NMDA, every datastore has an associated datastore\n   schema.  A datastore schema
    is a union of module sets, and every\n   module set is a collection of modules
    and submodules, including the\n   modules and submodules used for imports.  Note
    that multiple\n   datastores may refer to the same datastore schema.  Furthermore,
    it\n   is possible for individual datastore schemas to share module sets.  A\n
    \  common use case is the operational state datastore schema, which is a\n   superset
    of the schema used by conventional configuration datastores.\n   Below is the
    YANG tree diagram for the \"ietf-yang-library\" module,\n   excluding the deprecated
    \"/modules-state\" tree:\n   module: ietf-yang-library\n     +--ro yang-library\n
    \       +--ro module-set* [name]\n        |  +--ro name                  string\n
    \       |  +--ro module* [name]\n        |  |  +--ro name         yang:yang-identifier\n
    \       |  |  +--ro revision?    revision-identifier\n        |  |  +--ro namespace
    \   inet:uri\n        |  |  +--ro location*    inet:uri\n        |  |  +--ro submodule*
    [name]\n        |  |  |  +--ro name        yang:yang-identifier\n        |  |
    \ |  +--ro revision?   revision-identifier\n        |  |  |  +--ro location*   inet:uri\n
    \       |  |  +--ro feature*     yang:yang-identifier\n        |  |  +--ro deviation*
    \  -> ../../module/name\n        |  +--ro import-only-module* [name revision]\n
    \       |     +--ro name         yang:yang-identifier\n        |     +--ro revision
    \    union\n        |     +--ro namespace    inet:uri\n        |     +--ro location*
    \   inet:uri\n        |     +--ro submodule* [name]\n        |        +--ro name
    \       yang:yang-identifier\n        |        +--ro revision?   revision-identifier\n
    \       |        +--ro location*   inet:uri\n        +--ro schema* [name]\n        |
    \ +--ro name          string\n        |  +--ro module-set*   -> ../../module-set/name\n
    \       +--ro datastore* [name]\n        |  +--ro name      ds:datastore-ref\n
    \       |  +--ro schema    -> ../../schema/name\n        +--ro content-id    string\n
    \    notifications:\n       +---n yang-library-update\n          +--ro content-id
    \   -> /yang-library/content-id\n   The \"/yang-library\" container holds the
    entire YANG library.  The\n   container has the following child nodes:\n   o  The
    \"/yang-library/module-set\" contains entries representing\n      module sets.
    \ The list \"/yang-library/module-set/module\"\n      enumerates the modules that
    belong to the module set.  A module is\n      listed together with its submodules
    (if any), a set of features,\n      and any deviation modules.  The list \"/yang-library/module-set/\n
    \     import-only-module\" lists all modules (and their submodules) used\n      only
    for imports.  The assignment of a module to a module set is\n      at the server's
    discretion.  This revision of the YANG library\n      attaches no semantics as
    to which module set a module is listed\n      in.\n   o  The \"/yang-library/schema\"
    list contains an entry for each\n      datastore schema supported by the server.
    \ All conventional\n      configuration datastores use the same \"schema\" list
    entry.  A\n      dynamic configuration datastore may use a different datastore\n
    \     schema from the conventional configuration datastores and hence\n      may
    require a separate \"schema\" entry.  A \"schema\" entry has a\n      leaf-list
    of references to entries in the \"module-set\" list.  The\n      schema consists
    of the union of all modules in all referenced\n      module sets.\n   o  The \"/yang-library/datastore\"
    list contains one entry for each\n      datastore supported by the server, and
    it identifies the datastore\n      schema associated with a datastore via a reference
    to an entry in\n      the \"schema\" list.  Each supported conventional configuration\n
    \     datastore has a separate entry, pointing to the same \"schema\" list\n      element.\n
    \  o  The \"/yang-library/content-id\" leaf contains the YANG library\n      content
    identifier, which is an implementation-specific identifier\n      representing
    the current information in the YANG library on a\n      specific server.  The
    value of this leaf MUST change whenever the\n      information in the YANG library
    changes.  There is no requirement\n      that the same information always result
    in the same \"content-id\"\n      value.  This leaf allows a client to fetch all
    schema information\n      once, cache it, and only refetch it if the value of
    this leaf has\n      been changed.  If the value of this leaf changes, the server
    also\n      generates a \"yang-library-update\" notification.\n   Note that for
    a NETCONF server implementing the NETCONF extensions to\n   support the NMDA [RFC8526],
    a change of the YANG library content\n   identifier results in a new value for
    the :yang-library:1.1\n   capability defined in [RFC8526].  Thus, if such a server
    implements\n   NETCONF notifications [RFC5277] and the \"netconf-capability-change\"\n
    \  notification [RFC6470], a \"netconf-capability-change\" notification is\n   generated
    whenever the YANG library content identifier changes.\n"
  title: 3.  YANG Library Data Model
- contents:
  - "4.  YANG Library YANG Module\n   The \"ietf-yang-library\" YANG module imports
    definitions from the\n   \"ietf-yang-types\" and \"ietf-inet-types\" modules defined
    in [RFC6991]\n   and from the \"ietf-datastores\" module defined in [RFC8342].
    \ While\n   the YANG module is defined using YANG version 1.1, the YANG library\n
    \  supports YANG modules written in any version of YANG.\n   <CODE BEGINS> file
    \"ietf-yang-library@2019-01-04.yang\"\n   module ietf-yang-library {\n     yang-version
    1.1;\n     namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-library\";\n     prefix
    yanglib;\n     import ietf-yang-types {\n       prefix yang;\n       reference\n
    \        \"RFC 6991: Common YANG Data Types\";\n     }\n     import ietf-inet-types
    {\n       prefix inet;\n       reference\n         \"RFC 6991: Common YANG Data
    Types\";\n     }\n     import ietf-datastores {\n       prefix ds;\n       reference\n
    \        \"RFC 8342: Network Management Datastore Architecture\n                    (NMDA)\";\n
    \    }\n     organization\n       \"IETF NETCONF (Network Configuration) Working
    Group\";\n     contact\n       \"WG Web:   <https://datatracker.ietf.org/wg/netconf/>\n
    \       WG List:  <mailto:netconf@ietf.org>\n        Author:   Andy Bierman\n
    \                 <mailto:andy@yumaworks.com>\n        Author:   Martin Bjorklund\n
    \                 <mailto:mbj@tail-f.com>\n        Author:   Juergen Schoenwaelder\n
    \                 <mailto:j.schoenwaelder@jacobs-university.de>\n        Author:
    \  Kent Watsen\n                  <mailto:kent+ietf@watsen.net>\n        Author:
    \  Robert Wilton\n                  <mailto:rwilton@cisco.com>\";\n     description\n
    \      \"This module provides information about the YANG modules,\n        datastores,
    and datastore schemas used by a network\n        management server.\n        The
    key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL\n        NOT', 'SHOULD',
    'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',\n        'MAY', and 'OPTIONAL'
    in this document are to be interpreted as\n        described in BCP 14 (RFC 2119)
    (RFC 8174) when, and only when,\n        they appear in all capitals, as shown
    here.\n        Copyright (c) 2019 IETF Trust and the persons identified as\n        authors
    of the code.  All rights reserved.\n        Redistribution and use in source and
    binary forms, with or\n        without modification, is permitted pursuant to,
    and subject\n        to the license terms contained in, the Simplified BSD License\n
    \       set forth in Section 4.c of the IETF Trust's Legal Provisions\n        Relating
    to IETF Documents\n        (https://trustee.ietf.org/license-info).\n        This
    version of this YANG module is part of RFC 8525; see\n        the RFC itself for
    full legal notices.\";\n     revision 2019-01-04 {\n       description\n         \"Added
    support for multiple datastores according to the\n          Network Management
    Datastore Architecture (NMDA).\";\n       reference\n         \"RFC 8525: YANG
    Library\";\n     }\n     revision 2016-04-09 {\n       description\n         \"Initial
    revision.\";\n       reference\n         \"RFC 7895: YANG Module Library\";\n
    \    }\n     /*\n      * Typedefs\n      */\n     typedef revision-identifier
    {\n       type string {\n         pattern '\\d{4}-\\d{2}-\\d{2}';\n       }\n
    \      description\n         \"Represents a specific date in YYYY-MM-DD format.\";\n
    \    }\n     /*\n      * Groupings\n      */\n     grouping module-identification-leafs
    {\n       description\n         \"Parameters for identifying YANG modules and
    submodules.\";\n       leaf name {\n         type yang:yang-identifier;\n         mandatory
    true;\n         description\n           \"The YANG module or submodule name.\";\n
    \      }\n       leaf revision {\n         type revision-identifier;\n         description\n
    \          \"The YANG module or submodule revision date.  If no revision\n            statement
    is present in the YANG module or submodule, this\n            leaf is not instantiated.\";\n
    \      }\n     }\n     grouping location-leaf-list {\n       description\n         \"Common
    leaf-list parameter for the locations of modules and\n          submodules.\";\n
    \      leaf-list location {\n         type inet:uri;\n         description\n           \"Contains
    a URL that represents the YANG schema\n            resource for this module or
    submodule.\n            This leaf will only be present if there is a URL\n            available
    for retrieval of the schema for this entry.\";\n       }\n     }\n     grouping
    module-implementation-parameters {\n       description\n         \"Parameters
    for describing the implementation of a module.\";\n       leaf-list feature {\n
    \        type yang:yang-identifier;\n         description\n           \"List of
    all YANG feature names from this module that are\n            supported by the
    server, regardless whether they are defined\n            in the module or any
    included submodule.\";\n       }\n       leaf-list deviation {\n         type
    leafref {\n           path \"../../module/name\";\n         }\n         description\n
    \          \"List of all YANG deviation modules used by this server to\n            modify
    the conformance of the module associated with this\n            entry.  Note that
    the same module can be used for deviations\n            for multiple modules,
    so the same entry MAY appear within\n            multiple 'module' entries.\n
    \           This reference MUST NOT (directly or indirectly)\n            refer
    to the module being deviated.\n            Robust clients may want to make sure
    that they handle a\n            situation where a module deviates itself (directly
    or\n            indirectly) gracefully.\";\n       }\n     }\n     grouping module-set-parameters
    {\n       description\n         \"A set of parameters that describe a module set.\";\n
    \      leaf name {\n         type string;\n         description\n           \"An
    arbitrary name of the module set.\";\n       }\n       list module {\n         key
    \"name\";\n         description\n           \"An entry in this list represents
    a module implemented by the\n            server, as per Section 5.6.5 of RFC 7950,
    with a particular\n            set of supported features and deviations.\";\n
    \        reference\n           \"RFC 7950: The YANG 1.1 Data Modeling Language\";\n
    \        uses module-identification-leafs;\n         leaf namespace {\n           type
    inet:uri;\n           mandatory true;\n           description\n             \"The
    XML namespace identifier for this module.\";\n         }\n         uses location-leaf-list;\n
    \        list submodule {\n           key \"name\";\n           description\n
    \            \"Each entry represents one submodule within the\n              parent
    module.\";\n           uses module-identification-leafs;\n           uses location-leaf-list;\n
    \        }\n         uses module-implementation-parameters;\n       }\n       list
    import-only-module {\n         key \"name revision\";\n         description\n
    \          \"An entry in this list indicates that the server imports\n            reusable
    definitions from the specified revision of the\n            module but does not
    implement any protocol-accessible\n            objects from this revision.\n            Multiple
    entries for the same module name MAY exist.  This\n            can occur if multiple
    modules import the same module but\n            specify different revision dates
    in the import statements.\";\n         leaf name {\n           type yang:yang-identifier;\n
    \          description\n             \"The YANG module name.\";\n         }\n
    \        leaf revision {\n           type union {\n             type revision-identifier;\n
    \            type string {\n               length \"0\";\n             }\n           }\n
    \          description\n             \"The YANG module revision date.\n              A
    zero-length string is used if no revision statement\n              is present
    in the YANG module.\";\n         }\n         leaf namespace {\n           type
    inet:uri;\n           mandatory true;\n           description\n             \"The
    XML namespace identifier for this module.\";\n         }\n         uses location-leaf-list;\n
    \        list submodule {\n           key \"name\";\n           description\n
    \            \"Each entry represents one submodule within the\n              parent
    module.\";\n           uses module-identification-leafs;\n           uses location-leaf-list;\n
    \        }\n       }\n     }\n     grouping yang-library-parameters {\n       description\n
    \        \"The YANG library data structure is represented as a grouping\n          so
    it can be reused in configuration or another monitoring\n          data structure.\";\n
    \      list module-set {\n         key \"name\";\n         description\n           \"A
    set of modules that may be used by one or more schemas.\n            A module
    set does not have to be referentially complete,\n            i.e., it may define
    modules that contain import statements\n            for other modules not included
    in the module set.\";\n         uses module-set-parameters;\n       }\n       list
    schema {\n         key \"name\";\n         description\n           \"A datastore
    schema that may be used by one or more\n            datastores.\n            The
    schema must be valid and referentially complete, i.e.,\n            it must contain
    modules to satisfy all used import\n            statements for all modules specified
    in the schema.\";\n         leaf name {\n           type string;\n           description\n
    \            \"An arbitrary name of the schema.\";\n         }\n         leaf-list
    module-set {\n           type leafref {\n             path \"../../module-set/name\";\n
    \          }\n           description\n             \"A set of module-sets that
    are included in this schema.\n              If a non-import-only module appears
    in multiple module\n              sets, then the module revision and the associated
    features\n              and deviations must be identical.\";\n         }\n       }\n
    \      list datastore {\n         key \"name\";\n         description\n           \"A
    datastore supported by this server.\n            Each datastore indicates which
    schema it supports.\n            The server MUST instantiate one entry in this
    list per\n            specific datastore it supports.\n            Each datastore
    entry with the same datastore schema SHOULD\n            reference the same schema.\";\n
    \        leaf name {\n           type ds:datastore-ref;\n           description\n
    \            \"The identity of the datastore.\";\n         }\n         leaf schema
    {\n           type leafref {\n             path \"../../schema/name\";\n           }\n
    \          mandatory true;\n           description\n             \"A reference
    to the schema supported by this datastore.\n              All non-import-only
    modules of the schema are implemented\n              with their associated features
    and deviations.\";\n         }\n       }\n     }\n     /*\n      * Top-level container\n
    \     */\n     container yang-library {\n       config false;\n       description\n
    \        \"Container holding the entire YANG library of this server.\";\n       uses
    yang-library-parameters;\n       leaf content-id {\n         type string;\n         mandatory
    true;\n         description\n           \"A server-generated identifier of the
    contents of the\n            '/yang-library' tree.  The server MUST change the
    value of\n            this leaf if the information represented by the\n            '/yang-library'
    tree, except '/yang-library/content-id', has\n            changed.\";\n       }\n
    \    }\n     /*\n      * Notifications\n      */\n     notification yang-library-update
    {\n       description\n         \"Generated when any YANG library information
    on the\n          server has changed.\";\n       leaf content-id {\n         type
    leafref {\n           path \"/yanglib:yang-library/yanglib:content-id\";\n         }\n
    \        mandatory true;\n         description\n           \"Contains the YANG
    library content identifier for the updated\n            YANG library at the time
    the notification is generated.\";\n       }\n     }\n     /*\n      * Legacy groupings\n
    \     */\n     grouping module-list {\n       status deprecated;\n       description\n
    \        \"The module data structure is represented as a grouping\n          so
    it can be reused in configuration or another monitoring\n          data structure.\";\n
    \      grouping common-leafs {\n         status deprecated;\n         description\n
    \          \"Common parameters for YANG modules and submodules.\";\n         leaf
    name {\n           type yang:yang-identifier;\n           status deprecated;\n
    \          description\n             \"The YANG module or submodule name.\";\n
    \        }\n         leaf revision {\n           type union {\n             type
    revision-identifier;\n             type string {\n               length \"0\";\n
    \            }\n           }\n           status deprecated;\n           description\n
    \            \"The YANG module or submodule revision date.\n              A zero-length
    string is used if no revision statement\n              is present in the YANG
    module or submodule.\";\n         }\n       }\n       grouping schema-leaf {\n
    \        status deprecated;\n         description\n           \"Common schema
    leaf parameter for modules and submodules.\";\n         leaf schema {\n           type
    inet:uri;\n           description\n             \"Contains a URL that represents
    the YANG schema\n              resource for this module or submodule.\n              This
    leaf will only be present if there is a URL\n              available for retrieval
    of the schema for this entry.\";\n         }\n       }\n       list module {\n
    \        key \"name revision\";\n         status deprecated;\n         description\n
    \          \"Each entry represents one revision of one module\n            currently
    supported by the server.\";\n         uses common-leafs {\n           status deprecated;\n
    \        }\n         uses schema-leaf {\n           status deprecated;\n         }\n
    \        leaf namespace {\n           type inet:uri;\n           mandatory true;\n
    \          status deprecated;\n           description\n             \"The XML
    namespace identifier for this module.\";\n         }\n         leaf-list feature
    {\n           type yang:yang-identifier;\n           status deprecated;\n           description\n
    \            \"List of YANG feature names from this module that are\n              supported
    by the server, regardless of whether they are\n              defined in the module
    or any included submodule.\";\n         }\n         list deviation {\n           key
    \"name revision\";\n           status deprecated;\n           description\n             \"List
    of YANG deviation module names and revisions\n              used by this server
    to modify the conformance of\n              the module associated with this entry.
    \ Note that\n              the same module can be used for deviations for\n              multiple
    modules, so the same entry MAY appear\n              within multiple 'module'
    entries.\n              The deviation module MUST be present in the 'module'\n
    \             list, with the same name and revision values.\n              The
    'conformance-type' value will be 'implement' for\n              the deviation
    module.\";\n           uses common-leafs {\n             status deprecated;\n
    \          }\n         }\n         leaf conformance-type {\n           type enumeration
    {\n             enum implement {\n               description\n                 \"Indicates
    that the server implements one or more\n                  protocol-accessible
    objects defined in the YANG module\n                  identified in this entry.
    \ This includes deviation\n                  statements defined in the module.\n
    \                 For YANG version 1.1 modules, there is at most one\n                  'module'
    entry with conformance type 'implement' for a\n                  particular module
    name, since YANG 1.1 requires that\n                  at most one revision of
    a module is implemented.\n                  For YANG version 1 modules, there
    SHOULD NOT be more\n                  than one 'module' entry for a particular
    module\n                  name.\";\n             }\n             enum import {\n
    \              description\n                 \"Indicates that the server imports
    reusable definitions\n                  from the specified revision of the module
    but does\n                  not implement any protocol-accessible objects from\n
    \                 this revision.\n                  Multiple 'module' entries
    for the same module name MAY\n                  exist.  This can occur if multiple
    modules import the\n                  same module but specify different revision
    dates in\n                  the import statements.\";\n             }\n           }\n
    \          mandatory true;\n           status deprecated;\n           description\n
    \            \"Indicates the type of conformance the server is claiming\n              for
    the YANG module identified by this entry.\";\n         }\n         list submodule
    {\n           key \"name revision\";\n           status deprecated;\n           description\n
    \            \"Each entry represents one submodule within the\n              parent
    module.\";\n           uses common-leafs {\n             status deprecated;\n
    \          }\n           uses schema-leaf {\n             status deprecated;\n
    \          }\n         }\n       }\n     }\n     /*\n      * Legacy operational
    state data nodes\n      */\n     container modules-state {\n       config false;\n
    \      status deprecated;\n       description\n         \"Contains YANG module
    monitoring information.\";\n       leaf module-set-id {\n         type string;\n
    \        mandatory true;\n         status deprecated;\n         description\n
    \          \"Contains a server-specific identifier representing\n            the
    current set of modules and submodules.  The\n            server MUST change the
    value of this leaf if the\n            information represented by the 'module'
    list instances\n            has changed.\";\n       }\n       uses module-list
    {\n         status deprecated;\n       }\n     }\n     /*\n      * Legacy notifications\n
    \     */\n     notification yang-library-change {\n       status deprecated;\n
    \      description\n         \"Generated when the set of modules and submodules
    supported\n          by the server has changed.\";\n       leaf module-set-id
    {\n         type leafref {\n           path \"/yanglib:modules-state/yanglib:module-set-id\";\n
    \        }\n         mandatory true;\n         status deprecated;\n         description\n
    \          \"Contains the module-set-id value representing the\n            set
    of modules and submodules supported at the server\n            at the time the
    notification is generated.\";\n       }\n     }\n   }\n   <CODE ENDS>\n"
  title: 4.  YANG Library YANG Module
- contents:
  - "5.  IANA Considerations\n   RFC 7895 previously registered one URI in the \"IETF
    XML Registry\"\n   [RFC3688].  This document takes over this registration entry
    made by\n   RFC 7895 and changes the Registrant Contact to the IESG according
    to\n   Section 4 of [RFC3688].\n     URI: urn:ietf:params:xml:ns:yang:ietf-yang-library\n
    \    Registrant Contact: The IESG.\n     XML: N/A, the requested URI is an XML
    namespace.\n   This document registers a YANG module in the \"YANG Module Names\"\n
    \  registry [RFC6020]:\n     name:         ietf-yang-library\n     namespace:
    \   urn:ietf:params:xml:ns:yang:ietf-yang-library\n     prefix:       yanglib\n
    \    reference:    RFC 8525\n"
  title: 5.  IANA Considerations
- contents:
  - "6.  Security Considerations\n   The YANG module specified in this document defines
    a schema for data\n   that is designed to be accessed via network management protocols
    such\n   as NETCONF [RFC6241] or RESTCONF [RFC8040].  The lowest NETCONF layer\n
    \  is the secure transport layer, and the mandatory-to-implement secure\n   transport
    is Secure Shell (SSH) [RFC6242].  The lowest RESTCONF layer\n   is HTTPS, and
    the mandatory-to-implement secure transport is TLS\n   [RFC8446].\n   The Network
    Configuration Access Control Model (NACM) [RFC8341]\n   provides the means to
    restrict access for particular NETCONF or\n   RESTCONF users to a preconfigured
    subset of all available NETCONF or\n   RESTCONF protocol operations and content.\n
    \  Some of the readable data nodes in this YANG module may be considered\n   sensitive
    or vulnerable in some network environments.  It is thus\n   important to control
    read access (e.g., via get, get-config, or\n   notification) to these data nodes.
    \ These are the subtrees and data\n   nodes and their sensitivity/vulnerability:\n
    \  The \"/yang-library\" subtree of the YANG library may help an attacker\n   identify
    the server capabilities and server implementations with\n   known bugs since the
    set of YANG modules supported by a server may\n   reveal the kind of device and
    the manufacturer of the device.\n   Although some of this information may be available
    to all NETCONF\n   users via the NETCONF <hello> message (or similar messages
    in other\n   management protocols), this YANG module potentially exposes\n   additional
    details that could be of some assistance to an attacker.\n   Server vulnerabilities
    may be specific to particular modules, module\n   revisions, module features,
    or even module deviations.  For example,\n   if a particular operation on a particular
    data node is known to cause\n   a server to crash or significantly degrade device
    performance, then\n   the \"module\" list information will help an attacker identify
    server\n   implementations with such a defect, in order to launch a denial-of-\n
    \  service attack on the device.\n"
  title: 6.  Security Considerations
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC3688]  Mealling, M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n              DOI
      10.17487/RFC3688, January 2004,\n              <https://www.rfc-editor.org/info/rfc3688>.\n
      \  [RFC6020]  Bjorklund, M., Ed., \"YANG - A Data Modeling Language for\n              the
      Network Configuration Protocol (NETCONF)\", RFC 6020,\n              DOI 10.17487/RFC6020,
      October 2010,\n              <https://www.rfc-editor.org/info/rfc6020>.\n   [RFC6241]
      \ Enns, R., Ed., Bjorklund, M., Ed., Schoenwaelder, J., Ed.,\n              and
      A. Bierman, Ed., \"Network Configuration Protocol\n              (NETCONF)\",
      RFC 6241, DOI 10.17487/RFC6241, June 2011,\n              <https://www.rfc-editor.org/info/rfc6241>.\n
      \  [RFC6242]  Wasserman, M., \"Using the NETCONF Protocol over Secure\n              Shell
      (SSH)\", RFC 6242, DOI 10.17487/RFC6242, June 2011,\n              <https://www.rfc-editor.org/info/rfc6242>.\n
      \  [RFC6991]  Schoenwaelder, J., Ed., \"Common YANG Data Types\",\n              RFC
      6991, DOI 10.17487/RFC6991, July 2013,\n              <https://www.rfc-editor.org/info/rfc6991>.\n
      \  [RFC7950]  Bjorklund, M., Ed., \"The YANG 1.1 Data Modeling Language\",\n
      \             RFC 7950, DOI 10.17487/RFC7950, August 2016,\n              <https://www.rfc-editor.org/info/rfc7950>.\n
      \  [RFC8040]  Bierman, A., Bjorklund, M., and K. Watsen, \"RESTCONF\n              Protocol\",
      RFC 8040, DOI 10.17487/RFC8040, January 2017,\n              <https://www.rfc-editor.org/info/rfc8040>.\n
      \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8341]  Bierman, A. and M.
      Bjorklund, \"Network Configuration\n              Access Control Model\", STD
      91, RFC 8341,\n              DOI 10.17487/RFC8341, March 2018,\n              <https://www.rfc-editor.org/info/rfc8341>.\n
      \  [RFC8342]  Bjorklund, M., Schoenwaelder, J., Shafer, P., Watsen, K.,\n              and
      R. Wilton, \"Network Management Datastore Architecture\n              (NMDA)\",
      RFC 8342, DOI 10.17487/RFC8342, March 2018,\n              <https://www.rfc-editor.org/info/rfc8342>.\n
      \  [RFC8446]  Rescorla, E., \"The Transport Layer Security (TLS) Protocol\n
      \             Version 1.3\", RFC 8446, DOI 10.17487/RFC8446, August 2018,\n
      \             <https://www.rfc-editor.org/info/rfc8446>.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [RFC5277]  Chisholm, S. and H. Trevino, \"NETCONF
      Event\n              Notifications\", RFC 5277, DOI 10.17487/RFC5277, July 2008,\n
      \             <https://www.rfc-editor.org/info/rfc5277>.\n   [RFC6470]  Bierman,
      A., \"Network Configuration Protocol (NETCONF)\n              Base Notifications\",
      RFC 6470, DOI 10.17487/RFC6470,\n              February 2012, <https://www.rfc-editor.org/info/rfc6470>.\n
      \  [RFC7895]  Bierman, A., Bjorklund, M., and K. Watsen, \"YANG Module\n              Library\",
      RFC 7895, DOI 10.17487/RFC7895, June 2016,\n              <https://www.rfc-editor.org/info/rfc7895>.\n
      \  [RFC8340]  Bjorklund, M. and L. Berger, Ed., \"YANG Tree Diagrams\",\n              BCP
      215, RFC 8340, DOI 10.17487/RFC8340, March 2018,\n              <https://www.rfc-editor.org/info/rfc8340>.\n
      \  [RFC8343]  Bjorklund, M., \"A YANG Data Model for Interface\n              Management\",
      RFC 8343, DOI 10.17487/RFC8343, March 2018,\n              <https://www.rfc-editor.org/info/rfc8343>.\n
      \  [RFC8344]  Bjorklund, M., \"A YANG Data Model for IP Management\",\n              RFC
      8344, DOI 10.17487/RFC8344, March 2018,\n              <https://www.rfc-editor.org/info/rfc8344>.\n
      \  [RFC8345]  Clemm, A., Medved, J., Varga, R., Bahadur, N.,\n              Ananthakrishnan,
      H., and X. Liu, \"A YANG Data Model for\n              Network Topologies\",
      RFC 8345, DOI 10.17487/RFC8345, March\n              2018, <https://www.rfc-editor.org/info/rfc8345>.\n
      \  [RFC8348]  Bierman, A., Bjorklund, M., Dong, J., and D. Romascanu, \"A\n
      \             YANG Data Model for Hardware Management\", RFC 8348,\n              DOI
      10.17487/RFC8348, March 2018,\n              <https://www.rfc-editor.org/info/rfc8348>.\n
      \  [RFC8349]  Lhotka, L., Lindem, A., and Y. Qu, \"A YANG Data Model for\n              Routing
      Management (NMDA Version)\", RFC 8349,\n              DOI 10.17487/RFC8349,
      March 2018,\n              <https://www.rfc-editor.org/info/rfc8349>.\n   [RFC8526]
      \ Bjorklund, M., Schoenwaelder, J., Shafer, P., Watsen, K.,\n              and
      R. Wilton, \"NETCONF Extensions to Support the Network\n              Management
      Datastore Architecture\", RFC 8526,\n              DOI 10.17487/RFC8526, March
      2019,\n              <https://www.rfc-editor.org/info/rfc8526>.\n   [RFC8528]
      \ Bjorklund, M. and L. Lhotka, \"YANG Schema Mount\",\n              RFC 8528,
      DOI 10.17487/RFC8528, March 2019,\n              <https://www.rfc-editor.org/info/rfc8528>.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "Appendix A.  Summary of Changes from RFC 7895\n   This document changes [RFC7895]
    in the following ways:\n   o  Renamed document title from \"YANG Module Library\"
    to \"YANG\n      Library\".\n   o  Added a new top-level \"/yang-library\" container
    to hold the entire\n      YANG library providing information about module sets,
    schemas, and\n      datastores.\n   o  Refactored the \"/modules-state\" container
    into a new\n      \"/yang-library/module-set\" list.\n   o  Added a new \"/yang-library/schema\"
    list and a new \"/yang-library/\n      datastore\" list.\n   o  Added a set of
    new groupings as replacements for the deprecated\n      groupings.\n   o  Added
    a \"yang-library-update\" notification as a replacement for\n      the deprecated
    \"yang-library-change\" notification.\n   o  Deprecated the \"/modules-state\"
    tree.\n   o  Deprecated the \"/module-list\" grouping.\n   o  Deprecated the \"/yang-library-change\"
    notification.\n"
  title: Appendix A.  Summary of Changes from RFC 7895
- contents:
  - "Appendix B.  Example YANG Library Instance for a Basic Server\n   The following
    example shows the YANG library of a basic server\n   implementing the \"ietf-interfaces\"
    [RFC8343] and \"ietf-ip\" [RFC8344]\n   modules in the <running>, <startup>, and
    <operational> datastores and\n   the \"ietf-hardware\" [RFC8348] module in the
    <operational> datastore.\n   Newline characters in leaf values are added for formatting
    reasons.\n   <yang-library\n       xmlns=\"urn:ietf:params:xml:ns:yang:ietf-yang-library\"\n
    \      xmlns:ds=\"urn:ietf:params:xml:ns:yang:ietf-datastores\">\n     <module-set>\n
    \      <name>config-modules</name>\n       <module>\n         <name>ietf-interfaces</name>\n
    \        <revision>2018-02-20</revision>\n         <namespace>\n           urn:ietf:params:xml:ns:yang:ietf-interfaces\n
    \        </namespace>\n       </module>\n       <module>\n         <name>ietf-ip</name>\n
    \        <revision>2018-02-22</revision>\n         <namespace>\n           urn:ietf:params:xml:ns:yang:ietf-ip\n
    \        </namespace>\n       </module>\n       <import-only-module>\n         <name>ietf-yang-types</name>\n
    \        <revision>2013-07-15</revision>\n         <namespace>\n           urn:ietf:params:xml:ns:yang:ietf-yang-types\n
    \        </namespace>\n       </import-only-module>\n       <import-only-module>\n
    \        <name>ietf-inet-types</name>\n         <revision>2013-07-15</revision>\n
    \        <namespace>\n           urn:ietf:params:xml:ns:yang:ietf-inet-types\n
    \        </namespace>\n       </import-only-module>\n     </module-set>\n     <module-set>\n
    \      <name>state-modules</name>\n       <module>\n         <name>ietf-hardware</name>\n
    \        <revision>2018-03-13</revision>\n         <namespace>\n           urn:ietf:params:xml:ns:yang:ietf-hardware\n
    \        </namespace>\n       </module>\n       <import-only-module>\n         <name>ietf-inet-types</name>\n
    \        <revision>2013-07-15</revision>\n         <namespace>\n           urn:ietf:params:xml:ns:yang:ietf-inet-types\n
    \        </namespace>\n       </import-only-module>\n       <import-only-module>\n
    \        <name>ietf-yang-types</name>\n         <revision>2013-07-15</revision>\n
    \        <namespace>\n           urn:ietf:params:xml:ns:yang:ietf-yang-types\n
    \        </namespace>\n       </import-only-module>\n       <import-only-module>\n
    \        <name>iana-hardware</name>\n         <revision>2018-03-13</revision>\n
    \        <namespace>\n           urn:ietf:params:xml:ns:yang:iana-hardware\n         </namespace>\n
    \      </import-only-module>\n     </module-set>\n     <schema>\n       <name>config-schema</name>\n
    \      <module-set>config-modules</module-set>\n     </schema>\n     <schema>\n
    \      <name>state-schema</name>\n       <module-set>config-modules</module-set>\n
    \      <module-set>state-modules</module-set>\n     </schema>\n     <datastore>\n
    \      <name>ds:startup</name>\n       <schema>config-schema</schema>\n     </datastore>\n
    \    <datastore>\n       <name>ds:running</name>\n       <schema>config-schema</schema>\n
    \    </datastore>\n     <datastore>\n       <name>ds:operational</name>\n       <schema>state-schema</schema>\n
    \    </datastore>\n     <content-id>75a43df9bd56b92aacc156a2958fbe12312fb285</content-id>\n
    \  </yang-library>\n"
  title: Appendix B.  Example YANG Library Instance for a Basic Server
- contents:
  - "Appendix C.  Example YANG Library Instance for an Advanced Server\n   The following
    example extends the example in Appendix B by using\n   modules from [RFC8345]
    and [RFC8349] to illustrate a slightly more\n   advanced server that:\n   o  Has
    a module with features only enabled in <operational>; the\n      \"ietf-routing\"
    module is supported in <running>, <startup>, and\n      <operational>, but the
    \"multiple-ribs\" and \"router-id\" features\n      are only enabled in <operational>.
    \ Hence, the \"router-id\" leaf\n      may be read but not configured.\n   o  Supports
    a dynamic configuration datastore \"example-ds-ephemeral\",\n      with only the
    \"ietf-network\" and \"ietf-network-topology\" modules\n      configurable via
    a notional dynamic configuration protocol.\n   o  Shows an example of datastore-specific
    deviations.  The\n      \"example-vendor-hardware-deviations\" module is included
    in the\n      schema for <operational> to remove data nodes that cannot be\n      supported
    by the server.\n   o  Shows how module-sets can be used to organize related modules\n
    \     together.\n   Newline characters in leaf values are added for formatting
    reasons.\n   <yang-library\n       xmlns=\"urn:ietf:params:xml:ns:yang:ietf-yang-library\"\n
    \      xmlns:ds=\"urn:ietf:params:xml:ns:yang:ietf-datastores\"\n       xmlns:ex-ds-eph=\"urn:example:ds-ephemeral\">\n
    \    <module-set>\n       <name>config-state-modules</name>\n       <module>\n
    \        <name>ietf-interfaces</name>\n         <revision>2018-02-20</revision>\n
    \        <namespace>\n           urn:ietf:params:xml:ns:yang:ietf-interfaces\n
    \        </namespace>\n       </module>\n       <module>\n         <name>ietf-ip</name>\n
    \        <revision>2018-02-22</revision>\n         <namespace>\n           urn:ietf:params:xml:ns:yang:ietf-ip\n
    \        </namespace>\n       </module>\n       <module>\n         <name>ietf-routing</name>\n
    \        <revision>2018-03-13</revision>\n         <namespace>\n           urn:ietf:params:xml:ns:yang:ietf-routing\n
    \        </namespace>\n       </module>\n       <import-only-module>\n         <name>ietf-yang-types</name>\n
    \        <revision>2013-07-15</revision>\n         <namespace>\n           urn:ietf:params:xml:ns:yang:ietf-yang-types\n
    \        </namespace>\n       </import-only-module>\n       <import-only-module>\n
    \        <name>ietf-inet-types</name>\n         <revision>2013-07-15</revision>\n
    \        <namespace>\n           urn:ietf:params:xml:ns:yang:ietf-inet-types\n
    \        </namespace>\n       </import-only-module>\n     </module-set>\n     <module-set>\n
    \      <name>config-only-modules</name>\n       <module>\n         <name>ietf-routing</name>\n
    \        <revision>2018-03-13</revision>\n         <namespace>\n           urn:ietf:params:xml:ns:yang:ietf-routing\n
    \        </namespace>\n       </module>\n     </module-set>\n     <module-set>\n
    \      <name>dynamic-config-state-modules</name>\n       <module>\n         <name>ietf-network</name>\n
    \        <revision>2018-02-26</revision>\n         <namespace>\n           urn:ietf:params:xml:ns:yang:ietf-network\n
    \        </namespace>\n       </module>\n       <module>\n         <name>ietf-network-topology</name>\n
    \        <revision>2018-02-26</revision>\n         <namespace>\n           urn:ietf:params:xml:ns:yang:ietf-network-topology\n
    \        </namespace>\n       </module>\n       <import-only-module>\n         <name>ietf-inet-types</name>\n
    \        <revision>2013-07-15</revision>\n         <namespace>\n           urn:ietf:params:xml:ns:yang:ietf-inet-types\n
    \        </namespace>\n       </import-only-module>\n     </module-set>\n     <module-set>\n
    \      <name>state-only-modules</name>\n       <module>\n         <name>ietf-hardware</name>\n
    \        <revision>2018-03-13</revision>\n         <namespace>\n           urn:ietf:params:xml:ns:yang:ietf-hardware\n
    \        </namespace>\n         <deviation>example-vendor-hardware-deviations</deviation>\n
    \      </module>\n       <module>\n         <name>ietf-routing</name>\n         <revision>2018-03-13</revision>\n
    \        <namespace>\n           urn:ietf:params:xml:ns:yang:ietf-routing\n         </namespace>\n
    \        <feature>multiple-ribs</feature>\n         <feature>router-id</feature>\n
    \      </module>\n       <module>\n         <name>example-vendor-hardware-deviations</name>\n
    \        <revision>2018-01-31</revision>\n         <namespace>\n           urn:example:example-vendor-hardware-deviations\n
    \        </namespace>\n       </module>\n       <import-only-module>\n         <name>ietf-inet-types</name>\n
    \        <revision>2013-07-15</revision>\n         <namespace>\n           urn:ietf:params:xml:ns:yang:ietf-inet-types\n
    \        </namespace>\n       </import-only-module>\n       <import-only-module>\n
    \        <name>ietf-yang-types</name>\n         <revision>2013-07-15</revision>\n
    \        <namespace>\n           urn:ietf:params:xml:ns:yang:ietf-yang-types\n
    \        </namespace>\n       </import-only-module>\n       <import-only-module>\n
    \        <name>iana-hardware</name>\n         <revision>2018-03-13</revision>\n
    \        <namespace>\n           urn:ietf:params:xml:ns:yang:iana-hardware\n         </namespace>\n
    \      </import-only-module>\n     </module-set>\n     <schema>\n       <name>config-schema</name>\n
    \      <module-set>config-state-modules</module-set>\n       <module-set>config-only-modules</module-set>\n
    \    </schema>\n     <schema>\n       <name>dynamic-config-schema</name>\n       <module-set>dynamic-config-state-modules</module-set>\n
    \    </schema>\n     <schema>\n       <name>state-schema</name>\n       <module-set>config-state-modules</module-set>\n
    \      <module-set>dynamic-config-state-modules</module-set>\n       <module-set>state-only-modules</module-set>\n
    \    </schema>\n     <datastore>\n       <name>ds:startup</name>\n       <schema>config-schema</schema>\n
    \    </datastore>\n     <datastore>\n       <name>ds:running</name>\n       <schema>config-schema</schema>\n
    \    </datastore>\n     <datastore>\n       <name>ex-ds-eph:ds-ephemeral</name>\n
    \      <schema>dynamic-config-schema</schema>\n     </datastore>\n     <datastore>\n
    \      <name>ds:operational</name>\n       <schema>state-schema</schema>\n     </datastore>\n
    \    <content-id>14782ab9bd56b92aacc156a2958fbe12312fb285</content-id>\n   </yang-library>\n"
  title: Appendix C.  Example YANG Library Instance for an Advanced Server
- contents:
  - "Authors' Addresses\n   Andy Bierman\n   YumaWorks\n   Email: andy@yumaworks.com\n
    \  Martin Bjorklund\n   Tail-f Systems\n   Email: mbj@tail-f.com\n   Juergen Schoenwaelder\n
    \  Jacobs University\n   Email: j.schoenwaelder@jacobs-university.de\n   Kent
    Watsen\n   Watsen Networks\n   Email: kent+ietf@watsen.net\n   Robert Wilton\n
    \  Cisco Systems\n   Email: rwilton@cisco.com\n"
  title: Authors' Addresses
