- title: __initial_text__
  contents:
  - '         Framework for Interface to Network Security Functions

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes the framework for Interface to Network\n\
    \   Security Functions (I2NSF) and defines a reference model (including\n   major\
    \ functional components) for I2NSF.  Network Security Functions\n   (NSFs) are\
    \ packet-processing engines that inspect and optionally\n   modify packets traversing\
    \ networks, either directly or in the context\n   of sessions to which the packet\
    \ is associated.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are candidates for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   https://www.rfc-editor.org/info/rfc8329.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n   2.  Conventions Used in This Document . . . . . . . . . .\
    \ . . . .   3\n     2.1.  Acronyms  . . . . . . . . . . . . . . . . . . . . .\
    \ . . .   3\n     2.2.  Definitions . . . . . . . . . . . . . . . . . . . . .\
    \ . .   4\n   3.  I2NSF Reference Model . . . . . . . . . . . . . . . . . . .\
    \ .   5\n     3.1.  I2NSF Consumer-Facing Interface . . . . . . . . . . . . .\
    \   6\n     3.2.  I2NSF NSF-Facing Interface  . . . . . . . . . . . . . . .  \
    \ 6\n     3.3.  I2NSF Registration Interface  . . . . . . . . . . . . . .   7\n\
    \   4.  Threats Associated with Externally Provided NSFs  . . . . . .   8\n  \
    \ 5.  Avoiding NSF Ossification . . . . . . . . . . . . . . . . . .   9\n   6.\
    \  The Network Connecting I2NSF Components . . . . . . . . . . .  10\n     6.1.\
    \  Network Connecting I2NSF Users and the I2NSF Controller .  10\n     6.2.  Network\
    \ Connecting the I2NSF Controller and NSFs  . . . .  10\n     6.3.  Interface\
    \ to vNSFs  . . . . . . . . . . . . . . . . . . .  11\n     6.4.  Consistency\
    \ . . . . . . . . . . . . . . . . . . . . . . .  12\n   7.  I2NSF Flow Security\
    \ Policy Structure  . . . . . . . . . . . .  13\n     7.1.  Customer-Facing Flow\
    \ Security Policy Structure  . . . . .  13\n     7.2.  NSF-Facing Flow Security\
    \ Policy Structure . . . . . . . .  14\n     7.3.  Differences from ACL Data Models\
    \  . . . . . . . . . . . .  16\n   8.  Capability Negotiation  . . . . . . . .\
    \ . . . . . . . . . . .  16\n   9.  Registration Considerations . . . . . . .\
    \ . . . . . . . . . .  17\n     9.1.  Flow-Based NSF Capability Characterization\
    \  . . . . . . .  17\n     9.2.  Registration Categories . . . . . . . . . . .\
    \ . . . . . .  18\n   10. Manageability Considerations  . . . . . . . . . . .\
    \ . . . . .  21\n   11. Security Considerations . . . . . . . . . . . . . . .\
    \ . . . .  22\n   12. IANA Considerations . . . . . . . . . . . . . . . . . .\
    \ . . .  22\n   13. References  . . . . . . . . . . . . . . . . . . . . . . .\
    \ . .  22\n     13.1.  Normative References . . . . . . . . . . . . . . . . .\
    \ .  22\n     13.2.  Informative References . . . . . . . . . . . . . . . . .\
    \  23\n   Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . . .  24\n\
    \   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  25\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document describes the framework for Interface to Network\n\
    \   Security Functions (I2NSF) and defines a reference model (including\n   major\
    \ functional components) for I2NSF.  This includes an analysis of\n   the threats\
    \ implied by the deployment of Network Security Functions\n   (NSFs) that are\
    \ externally provided.  It also describes how I2NSF\n   facilitates implementing\
    \ security functions in a technology- and\n   vendor-independent manner in Software-Defined\
    \ Networking (SDN) and\n   Network Function Virtualization (NFV) environments,\
    \ while avoiding\n   potential constraints that could limit the capabilities of\
    \ NSFs.\n   I2NSF use cases [RFC8192] call for standard interfaces for users of\n\
    \   an I2NSF system (e.g., applications, overlay or cloud network\n   management\
    \ system, or enterprise network administrator or management\n   system) to inform\
    \ the I2NSF system which I2NSF functions should be\n   applied to which traffic\
    \ (or traffic patterns).  The I2NSF system\n   realizes this as a set of security\
    \ rules for monitoring and\n   controlling the behavior of different traffic.\
    \  It also provides\n   standard interfaces for users to monitor flow-based security\n\
    \   functions hosted and managed by different administrative domains.\n   [RFC8192]\
    \ also describes the motivation and the problem space for an\n   Interface to\
    \ Network Security Functions system.\n"
- title: 2.  Conventions Used in This Document
  contents:
  - "2.  Conventions Used in This Document\n   This memo does not propose a protocol\
    \ standard, and the use of words\n   such as \"should\" follow their ordinary\
    \ English meaning and not that\n   for normative languages defined in [RFC2119]\
    \ [RFC8174].\n"
- title: 2.1.  Acronyms
  contents:
  - "2.1.  Acronyms\n   The following acronyms are used in this document:\n      DOTS:\
    \ Distributed Denial-of-Service Open Threat Signaling\n      IDS: Intrusion Detection\
    \ System\n      IoT: Internet of Things\n      IPS: Intrusion Protection System\n\
    \      NSF: Network Security Function\n"
- title: 2.2.  Definitions
  contents:
  - "2.2.  Definitions\n   The following terms, which are used in this document, are\
    \ defined in\n   the I2NSF terminology document [I2NSF-TERMS]:\n      Capability\n\
    \      Controller\n      Firewall\n      I2NSF Consumer\n      I2NSF NSF-Facing\
    \ Interface\n      I2NSF Policy Rule\n      I2NSF Producer\n      I2NSF Registration\
    \ Interface\n      I2NSF Registry\n      Interface\n      Interface Group\n  \
    \    Intrusion Detection System\n      Intrusion Protection System\n      Network\
    \ Security Function\n      Role\n"
- title: 3.  I2NSF Reference Model
  contents:
  - "3.  I2NSF Reference Model\n   Figure 1 shows a reference model (including major\
    \ functional\n   components and interfaces) for an I2NSF system.  This figure\
    \ is drawn\n   from the point of view of the Network Operator Management System;\n\
    \   hence, this view does not assume any particular management\n   architecture\
    \ for either the NSFs or how the NSFs are managed (on the\n   developer's side).\
    \  In particular, the Network Operator Management\n   System does not participate\
    \ in NSF data-plane activities.\n       +-------------------------------------------------------+\n\
    \       |  I2NSF User (e.g., Overlay Network Mgmt, Enterprise   |\n       |  Network\
    \ Mgmt, another network domain's mgmt, etc.)   |\n       +--------------------+----------------------------------+\n\
    \                            |\n                            |  I2NSF Consumer-Facing\
    \ Interface\n                            |\n                            |    \
    \          I2NSF\n               +------------+---------+ Registration  +-------------+\n\
    \               | Network Operator Mgmt|  Interface    | Developer's |\n     \
    \          |        System        | < --------- > | Mgmt System |\n          \
    \     +----------------+-----+               +-------------+\n               \
    \                 |\n                                | I2NSF NSF-Facing Interface\n\
    \                                |\n           +---------------+----+------------+---------------+\n\
    \           |               |                 |               |\n       +---+---+\
    \       +---+---+         +---+---+       +---+---+\n       | NSF-1 |  ...  |\
    \ NSF-m |         | NSF-1 |  ...  | NSF-m |  ...\n       +-------+       +-------+\
    \         +-------+       +-------+\n        Developer Mgmt System A         \
    \  Developer Mgmt System B\n                      Figure 1: I2NSF Reference Model\n\
    \   When defining I2NSF Interfaces, this framework adheres to the\n   following\
    \ principles:\n   o  It is agnostic of network topology and NSF location in the\
    \ network\n   o  It is agnostic of provider of the NSF (i.e., independent of the\n\
    \      way that the provider makes an NSF available, as well as how the\n    \
    \  provider allows the NSF to be managed)\n   o  It is agnostic of any vendor-specific\
    \ operational, administrative,\n      and management implementation; hosting environment;\
    \ and form\n      factor (physical or virtual)\n   o  It is agnostic to NSF control-plane\
    \ implementation (e.g.,\n      signaling capabilities)\n   o  It is agnostic to\
    \ NSF data-plane implementation (e.g.,\n      encapsulation capabilities)\n  \
    \ In general, all I2NSF Interfaces should require at least mutual\n   authentication\
    \ and authorization for their use.  Other security and\n   privacy considerations\
    \ are specified in Section 11.\n"
- title: 3.1.  I2NSF Consumer-Facing Interface
  contents:
  - "3.1.  I2NSF Consumer-Facing Interface\n   The I2NSF Consumer-Facing Interface\
    \ is used to enable different users\n   of a given I2NSF system to define, manage,\
    \ and monitor security\n   policies for specific flows within an administrative\
    \ domain.  The\n   location and implementation of I2NSF policies are irrelevant\
    \ to the\n   consumer of I2NSF policies.\n   Some examples of I2NSF Consumers\
    \ include:\n   o  A video-conference network manager that needs to dynamically\n\
    \      inform the underlay network to allow, rate-limit, or deny flows\n     \
    \ (some of which are encrypted) based on specific fields in the\n      packets\
    \ for a certain time span.\n   o  Enterprise network administrators and management\
    \ systems that need\n      to request their provider network to enforce specific\
    \ I2NSF\n      policies for particular flows.\n   o  An IoT management system\
    \ sending requests to the underlay network\n      to block flows that match a\
    \ set of specific conditions.\n"
- title: 3.2.  I2NSF NSF-Facing Interface
  contents:
  - "3.2.  I2NSF NSF-Facing Interface\n   The I2NSF NSF-Facing Interface (NSF-Facing\
    \ Interface for short) is\n   used to specify and monitor flow-based security\
    \ policies enforced by\n   one or more NSFs.  Note that the I2NSF Management System\
    \ does not\n   need to use all features of a given NSF, nor does it need to use\
    \ all\n   available NSFs.  Hence, this abstraction enables NSF features to be\n\
    \   treated as building blocks by an NSF system; thus, developers are\n   free\
    \ to use the security functions defined by NSFs independent of\n   vendor and\
    \ technology.\n   Flow-based NSFs [RFC8192] inspect packets in the order that\
    \ they are\n   received.  Note that all Interface Groups require the NSF to be\n\
    \   registered using the Registration Interface.  The interface to flow-\n   based\
    \ NSFs can be categorized as follows:\n   1.  NSF Operational and Administrative\
    \ Interface: an Interface Group\n       used by the I2NSF Management System to\
    \ program the operational\n       state of the NSF; this also includes administrative\
    \ control\n       functions.  I2NSF Policy Rules represent one way to change this\n\
    \       Interface Group in a consistent manner.  Since applications and\n    \
    \   I2NSF Components need to dynamically control the behavior of\n       traffic\
    \ that they send and receive, much of the I2NSF effort is\n       focused on this\
    \ Interface Group.\n   2.  Monitoring Interface: an Interface Group used by the\
    \ I2NSF\n       Management System to obtain monitoring information from one or\n\
    \       more selected NSFs.  Each interface in this Interface Group could\n  \
    \     be a query- or a report-based interface.  The difference is that\n     \
    \  a query-based interface is used by the I2NSF Management System to\n       obtain\
    \ information, whereas a report-based interface is used by\n       the NSF to\
    \ provide information.  The functionality of this\n       Interface Group may\
    \ also be defined by other protocols, such as\n       SYSLOG and DOTS.  The I2NSF\
    \ Management System may take one or\n       more actions based on the receipt\
    \ of information; this should be\n       specified by an I2NSF Policy Rule.  This\
    \ Interface Group does NOT\n       change the operational state of the NSF.\n\
    \   This document uses the flow-based paradigm to develop the NSF-Facing\n   Interface.\
    \  A common trait of flow-based NSFs is in the processing of\n   packets based\
    \ on the content (e.g., header/payload) and/or context\n   (e.g., session state\
    \ and authentication state) of the received\n   packets.  This feature is one\
    \ of the requirements for defining the\n   behavior of I2NSF.\n"
- title: 3.3.  I2NSF Registration Interface
  contents:
  - "3.3.  I2NSF Registration Interface\n   NSFs provided by different vendors may\
    \ have different capabilities.\n   In order to automate the process of utilizing\
    \ multiple types of\n   security functions provided by different vendors, it is\
    \ necessary to\n   have a dedicated interface for vendors to define the capabilities\
    \ of\n   (i.e., register) their NSFs.  This interface is called the I2NSF\n  \
    \ Registration Interface.\n   An NSF's capabilities can be either pre-configured\
    \ or retrieved\n   dynamically through the I2NSF Registration Interface.  If a\
    \ new\n   function that is exposed to the consumer is added to an NSF, then the\n\
    \   capabilities of that new function should be registered in the I2NSF\n   Registry\
    \ via the I2NSF Registration Interface, so that interested\n   management and\
    \ control entities may be made aware of them.\n"
- title: 4.  Threats Associated with Externally Provided NSFs
  contents:
  - "4.  Threats Associated with Externally Provided NSFs\n   While associated with\
    \ a much higher flexibility, and in many cases a\n   necessary approach given\
    \ the deployment conditions, the usage of\n   externally provided NSFs implies\
    \ several additional concerns in\n   security.  The most relevant threats associated\
    \ with a security\n   platform of this nature are:\n   o  An unknown/unauthorized\
    \ user can try to impersonate another user\n      that can legitimately access\
    \ external NSF services.  This attack\n      may lead to accessing the I2NSF Policy\
    \ Rules and applications of\n      the attacked user and/or generating network\
    \ traffic outside the\n      security functions with a falsified identity.\n \
    \  o  An authorized user may misuse assigned privileges to alter the\n      network\
    \ traffic processing of other users in the NSF underlay or\n      platform.\n\
    \   o  A user may try to install malformed elements (e.g., I2NSF Policy\n    \
    \  Rules or configuration files) to directly take control of an NSF\n      or\
    \ the whole provider platform.  For example, a user may exploit a\n      vulnerability\
    \ on one of the functions or may try to intercept or\n      modify the traffic\
    \ of other users in the same provider platform.\n   o  A malicious provider can\
    \ modify the software (e.g., the operating\n      system or the specific NSF implementation)\
    \ to alter the behavior\n      of one or more NSFs.  This event has a high impact\
    \ on all users\n      accessing NSFs, since the provider has the highest level\
    \ of\n      privileges controlling the operation of the software.\n   o  A user\
    \ that has physical access to the provider platform can\n      modify the behavior\
    \ of the hardware/software components or the\n      components themselves.  For\
    \ example, the user can access a serial\n      console (most devices offer this\
    \ interface for maintenance\n      reasons) to access the NSF software with the\
    \ same level of\n      privilege of the provider.\n   The use of authentication,\
    \ authorization, accounting, and audit\n   mechanisms is recommended for all users\
    \ and applications to access\n   the I2NSF environment.  This can be further enhanced\
    \ by requiring\n   attestation to be used to detect changes to the I2NSF environment\
    \ by\n   authorized parties.  The characteristics of these procedures will\n \
    \  define the level of assurance of the I2NSF environment.\n"
- title: 5.  Avoiding NSF Ossification
  contents:
  - "5.  Avoiding NSF Ossification\n   A basic tenet in the introduction of I2NSF\
    \ standards is that the\n   standards should not make it easier for attackers\
    \ to compromise the\n   network.  Therefore, in constructing standards for I2NSF\
    \ Interfaces\n   as well as I2NSF Policy Rules, it is equally important to allow\n\
    \   support for specific functions, as this enables the introduction of\n   NSFs\
    \ that evolve to meet new threats.  Proposed standards for I2NSF\n   Interfaces\
    \ to communicate with NSFs, as well as I2NSF Policy Rules to\n   control NSF functionality,\
    \ should not:\n   o  Narrowly define NSF categories, or their roles, when implemented\n\
    \      within a network.  Security is a constantly evolving discipline.\n    \
    \  The I2NSF framework relies on an object-oriented information\n      model,\
    \ which provides an extensible definition of NSF information\n      elements and\
    \ categories; it is recommended that implementations\n      follow this model.\n\
    \   o  Attempt to impose functional requirements or constraints, either\n    \
    \  directly or indirectly, upon NSF developers.  Implementations\n      should\
    \ be free to realize and apply NSFs in a way that best suits\n      the needs\
    \ of the applications and environment using them.\n   o  Be a limited lowest common\
    \ denominator approach, where interfaces\n      can only support a limited set\
    \ of standardized functions, without\n      allowing for developer-specific functions.\
    \  NSFs, interfaces, and\n      the data communicated should be extensible, so\
    \ that they can\n      evolve to protect against new threats.\n   o  Be seen as\
    \ endorsing a best common practice for the implementation\n      of NSFs; rather,\
    \ this document describes the conceptual structure\n      and reference model\
    \ of I2NSF.  The purpose of this reference model\n      is to define a common\
    \ set of concepts in order to facilitate the\n      flexible implementation of\
    \ an I2NSF system.\n   To prevent constraints on NSF developers' creativity and\
    \ innovation,\n   this document recommends flow-based NSF interfaces to be designed\n\
    \   from the paradigm of processing packets in the network.  Flow-based\n   NSFs\
    \ are ultimately packet-processing engines that inspect packets\n   traversing\
    \ networks, either directly or in the context of sessions in\n   which the packet\
    \ is associated.  The goal is to create a workable\n   interface to NSFs that\
    \ aids in their integration within legacy, SDN,\n   and/or NFV environments, while\
    \ avoiding potential constraints that\n   could limit their functional capabilities.\n"
- title: 6.  The Network Connecting I2NSF Components
  contents:
  - '6.  The Network Connecting I2NSF Components

    '
- title: 6.1.  Network Connecting I2NSF Users and the I2NSF Controller
  contents:
  - "6.1.  Network Connecting I2NSF Users and the I2NSF Controller\n   As a general\
    \ principle, in the I2NSF environment, users directly\n   interact with the I2NSF\
    \ Controller.  Given the role of the I2NSF\n   Controller, a mutual authentication\
    \ of users and the I2NSF Controller\n   is required.  I2NSF does not mandate a\
    \ specific authentication\n   scheme; it is up to the users to choose available\
    \ authentication\n   schemes based on their needs.\n   Upon successful authentication,\
    \ a trusted connection between the user\n   and the I2NSF Controller (or an endpoint\
    \ designated by it) will be\n   established.  This means that a direct, physical\
    \ point-to-point\n   connection, with physical access restricted according to\
    \ access\n   control, must be used.  All traffic to and from the NSF environment\n\
    \   will flow through this connection.  The connection is intended not\n   only\
    \ to be secure but trusted in the sense that it should be bound to\n   the mutual\
    \ authentication between the user and the I2NSF Controller,\n   as described in\
    \ [I2NSF-ATTESTATION].  The only possible exception is\n   when the required level\
    \ of assurance is lower (see Section 4.1 of\n   [I2NSF-ATTESTATION]), in which\
    \ case the user must be made aware of\n   this circumstance.\n"
- title: 6.2.  Network Connecting the I2NSF Controller and NSFs
  contents:
  - "6.2.  Network Connecting the I2NSF Controller and NSFs\n   Most likely, the NSFs\
    \ are not directly attached to the I2NSF\n   Controller; for example, NSFs can\
    \ be distributed across the network.\n   The network that connects the I2NSF Controller\
    \ with the NSFs can be\n   the same network that carries the data traffic, or\
    \ it can be a\n   dedicated network for management purposes only.  In either case,\n\
    \   packet loss could happen due to failure, congestion, or other\n   reasons.\n\
    \   Therefore, the transport mechanism used to carry management data and\n   information\
    \ must be secure.  It does not have to be a reliable\n   transport; rather, a\
    \ transport-independent reliable messaging\n   mechanism is required, where communication\
    \ can be performed reliably\n   (e.g., by establishing end-to-end communication\
    \ sessions and by\n   introducing explicit acknowledgement of messages into the\n\
    \   communication flow).  Latency requirements for control message\n   delivery\
    \ must also be evaluated.  Note that monitoring does not\n   require reliable\
    \ transport.\n   The network connection between the I2NSF Controller and NSFs\
    \ can rely\n   on either:\n   o  Open environments, where one or more NSFs can\
    \ be hosted in one or\n      more external administrative domains that are reached\
    \ via secure\n      external network connections.  This requires more restrictive\n\
    \      security control to be placed over the I2NSF Interface.  The\n      information\
    \ over the I2NSF Interfaces shall be exchanged by using\n      the trusted connection\
    \ described in Section 6.1, or\n   o  Closed environments, where there is only\
    \ one administrative\n      domain.  Such environments provide a more **isolated**\
    \ environment\n      but still communicate over the same set of I2NSF Interfaces\n\
    \      present in open environments (see above).  Hence, the security\n      control\
    \ and access requirements for closed environments are the\n      same as those\
    \ for open environments.\n   The network connection between the I2NSF Controller\
    \ and NSFs will use\n   the trusted connection mechanisms described in Section\
    \ 6.1.\n   Following these mechanisms, the connections need to rely on the use\n\
    \   of properly verified peer identities (e.g., through an\n   Authentication,\
    \ Authorization, and Accounting (AAA) framework).  The\n   implementations of\
    \ identity management functions, as well as the AAA\n   framework, are out of\
    \ scope for I2NSF.\n"
- title: 6.3.  Interface to vNSFs
  contents:
  - "6.3.  Interface to vNSFs\n   There are some unique characteristics in interfacing\
    \ to virtual NSFs\n   (vNSFs):\n   o  There could be multiple instantiations of\
    \ one single NSF that has\n      been distributed across a network.  When different\
    \ instantiations\n      are visible to the I2NSF Controller, different policies\
    \ may be\n      applied to different instantiations of an individual NSF (e.g.,\
    \ to\n      reflect the different roles that each vNSF is designated for).\n \
    \     Therefore, it is recommended that Roles, in addition to the use of\n   \
    \   robust identities, be used to distinguish between different\n      instantiations\
    \ of the same vNSF.  Note that this also applies to\n      physical NSFs.\n  \
    \ o  When multiple instantiations of one single NSF appear as one\n      single\
    \ entity to the I2NSF Controller, the I2NSF Controller may\n      need to get\
    \ assistance from other entities in the I2NSF Management\n      System and/or\
    \ delegate the provisioning of the multiple\n      instantiations of the (single)\
    \ NSF to other entities in the I2NSF\n      Management System.  This is shown\
    \ in Figure 2 below.\n   o  Policies enforced by one vNSF instance may need to\
    \ be retrieved\n      and moved to another vNSF of the same type when user flows\
    \ are\n      moved from one vNSF to another.\n   o  Multiple vNSFs may share the\
    \ same physical platform.\n   o  There may be scenarios where multiple vNSFs collectively\
    \ perform\n      the security policies needed.\n                          +------------------------+\n\
    \                          |    I2NSF Controller    |\n                      \
    \    +------------------------+\n                                   ^        ^\n\
    \                                   |        |\n                       +-----------+\
    \        +------------+\n                       |                            \
    \     |\n                       v                                 v\n    + - -\
    \ - - - - - - - - - - - - - +  + - - - - - - - - - - - - - - - +\n    |  NSF-A\
    \  +--------------+      |  |  NSF-B  +--------------+      |\n    |         |\
    \ NSF Manager  |      |  |         | NSF Manager  |      |\n    |         +--------------+\
    \      |  |         +--------------+      |\n    | + - - - - - - - - - - - - -\
    \ + |  | + - - - - - - - - - - - - - + |\n    | |+---------+     +---------+|\
    \ |  | |+---------+     +---------+| |\n    | || NSF-A#1 | ... | NSF-A#n || |\
    \  | || NSF-B#1 | ... | NSF-B#m || |\n    | |+---------+     +---------+| |  |\
    \ |+---------+     +---------+| |\n    | |         NSF-A cluster     | |  | |\
    \          NSF-B cluster    | |\n    | + - - - - - - - - - - - - - + |  | + -\
    \ - - - - - - - - - - - - + |\n    + - - - - - - - - - - - - - - - +  + - - -\
    \ - - - - - - - - - - - - +\n            Figure 2: Cluster of NSF Instantiations\
    \ Management\n"
- title: 6.4.  Consistency
  contents:
  - "6.4.  Consistency\n   There are three basic models of consistency:\n   o  centralized,\
    \ which uses a single manager to impose behavior\n   o  decentralized, in which\
    \ managers make decisions without being\n      aware of each other (i.e., managers\
    \ do not exchange information)\n   o  distributed, in which managers make explicit\
    \ use of information\n      exchange to arrive at a decision\n   This document\
    \ does NOT make a recommendation on which of the above\n   three models to use.\
    \  I2NSF Policy Rules, coupled with an appropriate\n   management strategy, is\
    \ applicable to the design and integration of\n   any of the above three consistency\
    \ models.\n"
- title: 7.  I2NSF Flow Security Policy Structure
  contents:
  - "7.  I2NSF Flow Security Policy Structure\n   Even though security functions come\
    \ in a variety of form factors and\n   have different features, provisioning to\
    \ flow-based NSFs can be\n   standardized by using policy rules.\n   In this version\
    \ of I2NSF, policy rules are limited to imperative\n   paradigms.  I2NSF is using\
    \ an Event-Condition-Action (ECA) policy,\n   where:\n   o  An Event clause is\
    \ used to trigger the evaluation of the Condition\n      clause of the I2NSF Policy\
    \ Rule.\n   o  A Condition clause is used to determine whether or not the set\
    \ of\n      Actions in the I2NSF Policy Rule can be executed or not.\n   o  An\
    \ Action clause defines the type of operations that may be\n      performed on\
    \ this packet or flow.\n   Each of the above three clauses are defined to be Boolean\
    \ clauses.\n   This means that each is a logical statement that evaluates to either\n\
    \   TRUE or FALSE.\n   The above concepts are described in detail in [I2NSF-CAPABILITIES].\n"
- title: 7.1.  Customer-Facing Flow Security Policy Structure
  contents:
  - "7.1.  Customer-Facing Flow Security Policy Structure\n   This layer is for the\
    \ user's network management system to express and\n   monitor the needed flow\
    \ security policies for their specific flows.\n   Some customers may not have\
    \ the requisite security skills to express\n   security requirements or policies\
    \ that are precise enough to\n   implement in an NSF.  These customers may instead\
    \ express\n   expectations (e.g., goals or intent) of the functionality desired\
    \ by\n   their security policies.  Customers may also express guidelines, such\n\
    \   as which types of destinations are (or are not) allowed for certain\n   users.\
    \  As a result, there could be different levels of content and\n   abstractions\
    \ used in Service Layer policies.  Here are some examples\n   of more abstract\
    \ security policies that can be developed based on the\n   I2NSF-defined Customer-Facing\
    \ Interface:\n   o  Enable Internet access for authenticated users\n   o  Any\
    \ operation on a HighValueAsset must use the corporate network\n   o  The use\
    \ of FTP from any user except the CxOGroup must be audited\n   o  Streaming media\
    \ applications are prohibited on the corporate\n      network during business\
    \ hours\n   o  Scan email for malware detection; protect traffic to corporate\n\
    \      network with integrity and confidentiality\n   o  Remove tracking data\
    \ from Facebook [website = *.facebook.com]\n   One flow policy over the Customer-Facing\
    \ Interface may need multiple\n   NSFs at various locations to achieve the desired\
    \ enforcement.  Some\n   flow security policies from users may not be granted\
    \ because of\n   resource constraints.  [I2NSF-DEMO] describes an implementation\
    \ of\n   translating a set of 1) user policies to flow policies and 2) flow\n\
    \   policies to individual NSFs.\n   I2NSF will first focus on user policies that\
    \ can be modeled as\n   closely as possible to the flow security policies used\
    \ by individual\n   NSFs.  An I2NSF user flow policy should be similar in structure\
    \ to\n   the structure of an I2NSF Policy Rule, but with more of a user-\n   oriented\
    \ expression for the packet content, the context, and other\n   parts of an ECA\
    \ policy rule.  This enables the user to construct an\n   I2NSF Policy Rule without\
    \ having to know the exact syntax of the\n   desired content (e.g., actual tags\
    \ or addresses) to match in the\n   packets.  For example, when used in the context\
    \ of policy rules over\n   the Client-Facing Interface:\n   o  An Event can be\
    \ \"the client has passed the AAA process\"\n   o  A Condition can be matching\
    \ the user identifier or from specific\n      ingress or egress points\n   o \
    \ An Action can be establishing an IPsec tunnel\n"
- title: 7.2.  NSF-Facing Flow Security Policy Structure
  contents:
  - "7.2.  NSF-Facing Flow Security Policy Structure\n   The NSF-Facing Interface\
    \ is to pass explicit rules to individual NSFs\n   to treat packets, as well as\
    \ methods to monitor the execution status\n   of those functions.\n   Here are\
    \ some examples of Events over the NSF-Facing Interface:\n   o  time == 08:00\n\
    \   o  notification that a NSF state changes from standby to active\n   o  user\
    \ logon or logoff\n   Here are some examples of Conditions over the NSF-Facing\
    \ Interface:\n   o  Packet content values that look for one or more packet headers,\n\
    \      data from the packet payload, bits in the packet, or data that are\n  \
    \    derived from the packet.\n   o  Context values that are based on measured\
    \ and/or inferred\n      knowledge, which can be used to define the state and\
    \ environment\n      in which a managed entity exists or has existed.  In addition\
    \ to\n      state data, this includes data from sessions, direction of the\n \
    \     traffic, time, and geo-location information.  State refers to the\n    \
    \  behavior of a managed entity at a particular point in time.\n      Hence, it\
    \ may refer to situations in which multiple pieces of\n      information that\
    \ are not available at the same time must be\n      analyzed.  For example, tracking\
    \ established TCP connections\n      (connections that have gone through the initial\
    \ three-way\n      handshake).\n   Actions to individual flow-based NSFs include:\n\
    \   o  Actions performed on ingress packets, such as pass, drop, rate\n      limiting,\
    \ and mirroring.\n   o  Actions performed on egress packets, such as invoke signaling,\n\
    \      tunnel encapsulation, packet forwarding, and/or transformation.\n   o \
    \ Applying a specific functional profile or signature -- e.g., an\n      IPS Profile,\
    \ a signature file, an anti-virus file, or a URL\n      filtering file.  Many\
    \ flow-based NSFs utilize profile and/or\n      signature files to achieve more\
    \ effective threat detection and\n      prevention.  It is not uncommon for an\
    \ NSF to apply different\n      profiles and/or signatures for different flows.\
    \  Some profiles/\n      signatures do not require any knowledge of past or future\n\
    \      activities, while others are stateful and may need to maintain\n      state\
    \ for a specific length of time.\n   The functional profile or signature file\
    \ is one of the key properties\n   that determine the effectiveness of the NSF\
    \ and is mostly NSF\n   specific today.  The rulesets and software interfaces\
    \ of I2NSF aim to\n   specify the format to pass profile and signature files while\n\
    \   supporting specific functionalities of each.\n   Policy consistency among\
    \ multiple security function instances is very\n   critical because security policies\
    \ are no longer maintained by one\n   central security device; instead, they are\
    \ enforced by multiple\n   security functions instantiated at various locations.\n"
- title: 7.3.  Differences from ACL Data Models
  contents:
  - "7.3.  Differences from ACL Data Models\n   Policy rules are very different from\
    \ Access Control Lists (ACLs).  An\n   ACL is NOT a policy.  Rather, policies\
    \ are used to manage the\n   construction and life cycle of an ACL.\n   [ACL-YANG]\
    \ has defined rules for ACLs supported by most routers/\n   switches that forward\
    \ packets based on their L2, L3, or sometimes L4\n   headers.  The actions for\
    \ ACLs include Pass, Drop, or Redirect.\n   The functional profiles (or signatures)\
    \ for NSFs are not present in\n   [ACL-YANG] because the functional profiles are\
    \ unique to specific\n   NSFs.  For example, most IPS/IDS implementations have\
    \ their\n   proprietary functions/profiles.  One of the goals of I2NSF is to\n\
    \   define a common envelope format for exchanging or sharing profiles\n   among\
    \ different organizations to achieve more effective protection\n   against threats.\n\
    \   The \"packet content matching\" of the I2NSF policies should not only\n  \
    \ include the matching criteria specified by [ACL-YANG] but also the\n   L4-L7\
    \ fields depending on the NSFs selected.\n   Some flow-based NSFs need matching\
    \ criteria that include the context\n   associated with the packets.  This may\
    \ also include metadata.\n   The I2NSF \"actions\" should extend the actions specified\
    \ by [ACL-YANG]\n   to include applying statistics functions, threat profiles,\
    \ or\n   signature files that clients provide.\n"
- title: 8.  Capability Negotiation
  contents:
  - "8.  Capability Negotiation\n   It is very possible that the underlay network\
    \ (or provider network)\n   does not have the capability or resources to enforce\
    \ the flow\n   security policies requested by the overlay network (or enterprise\n\
    \   network).  Therefore, it is required that the I2NSF system support\n   dynamic\
    \ discovery capabilities, as well as a query mechanism, so that\n   the I2NSF\
    \ system can expose appropriate security services using I2NSF\n   capabilities.\
    \  This may also be used to support negotiation between a\n   user and the I2NSF\
    \ system.  Such dynamic negotiation facilitates the\n   delivery of the required\
    \ security service(s).  The outcome of the\n   negotiation would feed the I2NSF\
    \ Management System, which would then\n   dynamically allocate appropriate NSFs\
    \ (along with any resources\n   needed by the allocated NSFs) and configure the\
    \ set of security\n   services that meet the requirements of the user.\n   When\
    \ an NSF cannot perform the desired provisioning (e.g., due to\n   resource constraints),\
    \ it must inform the I2NSF Management System.\n   The protocol needed for this\
    \ security function/capability negotiation\n   may be somewhat correlated to the\
    \ dynamic service parameter\n   negotiation procedure described in [RFC7297].\
    \  The Connectivity\n   Provisioning Profile (CPP) template, even though currently\
    \ covering\n   only connectivity requirements, includes security clauses such\
    \ as\n   isolation requirements and non-via nodes.  Hence, it could be\n   extended\
    \ as a basis for the negotiation procedure.  Likewise, the\n   companion Connectivity\
    \ Provisioning Negotiation Protocol (CPNP) could\n   be a candidate for the negotiation\
    \ procedure.\n   \"Security-as-a-Service\" would be a typical example of the kind\
    \ of\n   (CPP-based) negotiation procedures that could take place between a\n\
    \   corporate customer and a service provider.  However, more security-\n   specific\
    \ parameters have to be considered.\n   [I2NSF-CAPABILITIES] describes the concepts\
    \ of capabilities in\n   detail.\n"
- title: 9.  Registration Considerations
  contents:
  - '9.  Registration Considerations

    '
- title: 9.1.  Flow-Based NSF Capability Characterization
  contents:
  - "9.1.  Flow-Based NSF Capability Characterization\n   There are many types of\
    \ flow-based NSFs.  Firewall, IPS, and IDS are\n   the commonly deployed flow-based\
    \ NSFs.  However, the differences\n   among them are definitely blurring, due\
    \ to more powerful technology,\n   integration of platforms, and new threats.\
    \  Basic types of flow-based\n   NSFs include:\n   o  Firewall -- A device or\
    \ a function that analyzes packet headers\n      and enforces policy based on\
    \ protocol type, source address,\n      destination address, source port, destination\
    \ port, and/or other\n      attributes of the packet header.  Packets that do\
    \ not match policy\n      are rejected.  Note that additional functions, such\
    \ as logging and\n      notification of a system administrator, could optionally\
    \ be\n      enforced as well.\n   o  IDS (Intrusion Detection System) -- A device\
    \ or function that\n      analyzes packets, both header and payload, looking for\
    \ known\n      events.  When a known event is detected, a log message is\n   \
    \   generated detailing the event.  Note that additional functions,\n      such\
    \ as notification of a system administrator, could optionally\n      be enforced\
    \ as well.\n   o  IPS (Intrusion Prevention System) -- A device or function that\n\
    \      analyzes packets, both header and payload, looking for known\n      events.\
    \  When a known event is detected, the packet is rejected.\n      Note that additional\
    \ functions, such as logging and notification\n      of a system administrator,\
    \ could optionally be enforced as well.\n   Flow-based NSFs differ in the depth\
    \ of packet header or payload they\n   can inspect, the various session/context\
    \ states they can maintain,\n   and the specific profiles and the actions they\
    \ can apply.  An example\n   of a session is as follows: allowing outbound connection\
    \ requests and\n   only allowing return traffic from the external network.\n"
- title: 9.2.  Registration Categories
  contents:
  - "9.2.  Registration Categories\n   Developers can register their NSFs using packet\
    \ content matching\n   categories.  The Inter-Domain Routing (IDR) Flow Specification\n\
    \   [RFC5575] has specified 12 different packet header matching types.\n   IP\
    \ Flow Information Export (IPFIX) data [IPFIX-D] defines IP flow\n   information\
    \ and mechanisms to transmit such information.  This\n   includes flow attributes\
    \ as well as information about the metering\n   and exporting processes.  Such\
    \ information may be stored in an IPFIX\n   registry [IPFIX-R].  As such, IPFIX\
    \ information should be considered\n   when defining categories of registration\
    \ information.\n   More packet content matching types have been proposed in the\
    \ IDR WG.\n   I2NSF should reuse the packet matching types being specified as\
    \ much\n   as possible.  More matching types might be added for flow-based NSFs.\n\
    \   Figures 3-6 below list the applicable packet content categories that\n   can\
    \ be potentially used as packet matching types by flow-based NSFs:\n        +-----------------------------------------------------------+\n\
    \        |         Packet Content Matching Capability Index          |\n     \
    \   +---------------+-------------------------------------------+\n        | Layer\
    \ 2       | Layer 2 header fields:                    |\n        | Header    \
    \    |            Source                         |\n        |               |\
    \            Destination                    |\n        |               |     \
    \       s-VID                          |\n        |               |          \
    \  c-VID                          |\n        |               |            Ethertype\
    \                      |\n        |---------------+-------------------------------------------+\n\
    \        | Layer 3       | Layer 3 header fields:                    |\n     \
    \   |               |            protocol                       |\n        | IPv4\
    \ Header   |            dest port                      |\n        |          \
    \     |            src port                       |\n        |               |\
    \            src address                    |\n        |               |     \
    \       dest address                   |\n        |               |          \
    \  dscp                           |\n        |               |            length\
    \                         |\n        |               |            flags      \
    \                    |\n        |               |            ttl             \
    \               |\n        | IPv6 Header   |                                 \
    \          |\n        |               |            protocol/nh               \
    \     |\n        |               |            src port                       |\n\
    \        |               |            dest port                      |\n     \
    \   |               |            src address                    |\n        | \
    \              |            dest address                   |\n        |      \
    \         |            length                         |\n        |           \
    \    |            traffic class                  |\n        |               |\
    \            hop limit                      |\n        |               |     \
    \       flow label                     |\n        |               |          \
    \  dscp                           |\n        |---------------+-------------------------------------------+\n\
    \        | Layer 4       | Layer 4 header fields:                    |\n     \
    \   | TCP           |            Port                           |\n        | SCTP\
    \          |            syn                            |\n        | DCCP     \
    \     |            ack                            |\n        |               |\
    \            fin                            |\n        |               |     \
    \       rst                            |\n        |               |          ?\
    \ psh                            |\n        |               |          ? urg \
    \                           |\n        |               |          ? window   \
    \                      |\n        |               |            sockstress    \
    \                 |\n        |               | Note: bitmap could be used to \
    \            |\n        |               |   represent all the fields         \
    \       |\n        | UDP           |                                         \
    \  |\n        |               |            flood abuse                    |\n\
    \        |               |            fragment abuse                 |\n     \
    \   |               |            Port                           |\n        |---------------+-------------------------------------------+\n\
    \        | HTTP layer    |                                           |\n     \
    \   |               |          | hash collision                 |\n        | \
    \              |          | http - get flood               |\n        |      \
    \         |          | http - post flood              |\n        |           \
    \    |          | http - random/invalid url      |\n        |               |\
    \          | http - slowloris               |\n        |               |     \
    \     | http - slow read               |\n        |               |          |\
    \ http - r-u-dead-yet (rudy)     |\n        |               |          | http\
    \ - malformed request       |\n        |               |          | http - xss\
    \                     |\n        |               |          | https - ssl session\
    \ exhaustion |\n        +---------------+----------+--------------------------------+\n\
    \        | IETF PCP      | Configurable                              |\n     \
    \   |               | Ports                                     |\n        +---------------+-------------------------------------------+\n\
    \        | IETF TRAM     | profile                                   |\n     \
    \   +---------------+-------------------------------------------+\n        Notes:\n\
    \           DCCP:  Datagram Congestion Control Protocol\n           PCP:   Port\
    \ Control Protocol\n           TRAM:  TURN Revised and Modernized, where TURN\
    \ stands for\n                  Traversal Using Relays around NAT\n          \
    \  Figure 3: Packet Content Matching Capability Index\n        +-----------------------------------------------------------+\n\
    \        |             Context Matching Capability Index             |\n     \
    \   +---------------+-------------------------------------------+\n        | Session\
    \       |   Session State,                          |\n        |             \
    \  |   Bidirectional State                     |\n        +---------------+-------------------------------------------+\n\
    \        | Time          |   Time span                               |\n     \
    \   |               |   Time occurrence                         |\n        +---------------+-------------------------------------------+\n\
    \        | Events        |   Event URL, variables                    |\n     \
    \   +---------------+-------------------------------------------+\n        | Location\
    \      |   Text string, GPS coords, URL            |\n        +---------------+-------------------------------------------+\n\
    \        | Connection    |   Internet (unsecured), Internet          |\n     \
    \   |   Type        |   (secured by VPN, etc.), Intranet, ...   |\n        +---------------+-------------------------------------------+\n\
    \        | Direction     |   Inbound, Outbound                       |\n     \
    \   +---------------+-------------------------------------------+\n        | State\
    \         |   Authentication State                    |\n        |           \
    \    |   Authorization State                     |\n        |               |\
    \   Accounting State                        |\n        |               |   Session\
    \ State                           |\n        +---------------+-------------------------------------------+\n\
    \        Note:\n          These fields are used to provide context information\
    \ for\n          I2NSF Policy Rules to make decisions on how to handle\n     \
    \     traffic.  For example, GPS coordinates define the location\n          of\
    \ the traffic that is entering and exiting an I2NSF\n          system; this enables\
    \ the developer to apply different\n          rules for ingress and egress traffic\
    \ handling.\n                Figure 4: Context Matching Capability Index\n   \
    \     +-----------------------------------------------------------+\n        |\
    \                  Action Capability Index                  |\n        +---------------+-------------------------------------------+\n\
    \        | Ingress port  |   SFC header termination,                 |\n     \
    \   |               |   VxLAN header termination                |\n        +---------------+-------------------------------------------+\n\
    \        |               |   Pass                                    |\n     \
    \   | Actions       |   Deny                                    |\n        | \
    \              |   Mirror                                  |\n        |      \
    \         |   Simple Statistics: Count (X min; Day;..)|\n        |           \
    \    |   Client-Specified Functions: URL         |\n        +---------------+-------------------------------------------+\n\
    \        | Egress        |   Encap SFC, VxLAN, or other header       |\n     \
    \   +---------------+-------------------------------------------+\n        Note:\n\
    \          SFC:  Service Function Chaining\n                     Figure 5: Action\
    \ Capability Index\n        +-----------------------------------------------------------+\n\
    \        |                 Functional Profile Index                  |\n     \
    \   +---------------+-------------------------------------------+\n        | Profile\
    \ types |   name, type, or flexible                 |\n        |             \
    \  |                                           |\n        | Signature     |  \
    \ Profile/signature URL command for the   |\n        |               |   I2NSF\
    \ Controller to enable/disable      |\n        +---------------+-------------------------------------------+\n\
    \                    Figure 6: Functional Profile Index\n"
- title: 10.  Manageability Considerations
  contents:
  - "10.  Manageability Considerations\n   Management of NSFs include:\n   o  Life-cycle\
    \ management and resource management of NSFs\n   o  Configuration of devices,\
    \ such as address configuration, device\n      internal attributes configuration,\
    \ etc.\n   o  Signaling\n   o  Policy rules provisioning\n   Currently, I2NSF\
    \ only focuses on the policy rule provisioning part.\n"
- title: 11.  Security Considerations
  contents:
  - "11.  Security Considerations\n   The configuration, control, and monitoring of\
    \ NSFs provide access to\n   and information about security functions that are\
    \ critical for\n   delivering network security and for protecting end-to-end traffic.\n\
    \   Therefore, it is important that the messages that are exchanged\n   within\
    \ this architecture utilize a trustworthy, robust, and fully\n   secure communication\
    \ channel.  The mechanisms adopted within the\n   solution space must include\
    \ proper secure communication channels that\n   are carefully specified for carrying\
    \ the controlling and monitoring\n   information between the NSFs and their management\
    \ entity or entities.\n   The threats associated with remotely managed NSFs are\
    \ discussed in\n   Section 4, and solutions must address those concerns.\n   This\
    \ framework is intended for enterprise users, with or without\n   cloud service\
    \ offerings.  Privacy of users must be provided by using\n   existing standard\
    \ mechanisms, such as encryption; anonymization of\n   data should also be done\
    \ if possible (depending on the transport\n   used).  Such mechanisms require\
    \ confidentiality and integrity.\n"
- title: 12.  IANA Considerations
  contents:
  - "12.  IANA Considerations\n   This document has no IANA actions.\n"
- title: 13.  References
  contents:
  - '13.  References

    '
- title: 13.1.  Normative References
  contents:
  - "13.1.  Normative References\n   [IPFIX-D]  \"IP Flow Information Export (ipfix)\"\
    ,\n              <https://datatracker.ietf.org/wg/ipfix/documents/>.\n   [IPFIX-R]\
    \  IANA, \"IP Flow Information Export (IPFIX) Entities\",\n              <https://www.iana.org/assignments/ipfix>.\n\
    \   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119,\
    \ March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC5575]\
    \  Marques, P., Sheth, N., Raszuk, R., Greene, B., Mauch, J.,\n              and\
    \ D. McPherson, \"Dissemination of Flow Specification\n              Rules\",\
    \ RFC 5575, DOI 10.17487/RFC5575, August 2009,\n              <https://www.rfc-editor.org/info/rfc5575>.\n\
    \   [RFC7297]  Boucadair, M., Jacquenet, C., and N. Wang, \"IP\n             \
    \ Connectivity Provisioning Profile (CPP)\", RFC 7297,\n              DOI 10.17487/RFC7297,\
    \ July 2014,\n              <https://www.rfc-editor.org/info/rfc7297>.\n   [RFC8174]\
    \  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119\
    \ Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,\
    \ <https://www.rfc-editor.org/info/rfc8174>.\n"
- title: 13.2.  Informative References
  contents:
  - "13.2.  Informative References\n   [ACL-YANG]\n              Jethanandani, M.,\
    \ Huang, L., Agarwal, S., and D. Blair,\n              \"Network Access Control\
    \ List (ACL) YANG Data Model\", Work\n              in Progress, draft-ietf-netmod-acl-model-15,\
    \ January 2018.\n   [I2NSF-ATTESTATION]\n              Pastor, A., Lopez, D.,\
    \ and A. Shaw, \"Remote Attestation\n              Procedures for Network Security\
    \ Functions (NSFs) through\n              the I2NSF Security Controller\", Work\
    \ in Progress,\n              draft-pastor-i2nsf-nsf-remote-attestation-02, September\n\
    \              2017.\n   [I2NSF-CAPABILITIES]\n              Xia, L., Strassner,\
    \ J., Basile, C., and D. Lopez,\n              \"Information Model of NSFs Capabilities\"\
    , Work in\n              Progress, draft-i2nsf-capability-00, September 2017.\n\
    \   [I2NSF-DEMO]\n              Xie, Y., Xia, L., and J. Wu, \"Interface to Network\n\
    \              Security Functions Demo Outline Design\", Work in\n           \
    \   Progress, draft-xie-i2nsf-demo-outline-design-00, April\n              2015.\n\
    \   [I2NSF-TERMS]\n              Hares, S., Strassner, J., Lopez, D., Xia, L.,\
    \ and H.\n              Birkholz, \"Interface to Network Security Functions (I2NSF)\n\
    \              Terminology\", Work in Progress, draft-ietf-i2nsf-\n          \
    \    terminology-05, January 2018.\n   [RFC8192]  Hares, S., Lopez, D., Zarny,\
    \ M., Jacquenet, C., Kumar, R.,\n              and J. Jeong, \"Interface to Network\
    \ Security Functions\n              (I2NSF): Problem Statement and Use Cases\"\
    , RFC 8192,\n              DOI 10.17487/RFC8192, July 2017,\n              <https://www.rfc-editor.org/info/rfc8192>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   This document includes significant contributions from Christian\n\
    \   Jacquenet (Orange), Seetharama Rao Durbha (Cablelabs), Mohamed\n   Boucadair\
    \ (Orange), Ramki Krishnan (Dell), Anil Lohiya (Juniper\n   Networks), Joe Parrott\
    \ (BT), Frank Xialing (Huawei), and XiaoJun\n   Zhuang (China Mobile).\n   Some\
    \ of the results leading to this work have received funding from\n   the European\
    \ Union Seventh Framework Programme (FP7/2007-2013) under\n   grant agreement\
    \ no. 611458.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Diego R. Lopez\n   Telefonica I+D\n   Editor Jose Manuel\
    \ Lara, 9\n   Seville,   41013\n   Spain\n   Email: diego.r.lopez@telefonica.com\n\
    \   Edward Lopez\n   Curveball Networks\n   Chantilly, Virginia\n   United States\
    \ of America\n   Email: ed@curveballnetworks.com\n   Linda Dunbar\n   Huawei Technologies\n\
    \   United States of America\n   Email: Linda.Dunbar@huawei.com\n   John Strassner\n\
    \   Huawei Technologies\n   Santa Clara, CA\n   United States of America\n   Email:\
    \ John.sc.Strassner@huawei.com\n   Rakesh Kumar\n   Juniper Networks\n   United\
    \ States of America\n   Email: rakeshkumarcloud@gmail.com\n"
