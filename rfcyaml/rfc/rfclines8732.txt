Abstract This document specifies additions and amendments to RFC 4462.
It defines a new key exchange method that uses SHA 2 for integrity and deprecates weak Diffie Hellman (DH) groups.
The purpose of this specification is to modernize the cryptographic primitives used by Generic Security Service (GSS) key exchanges.
Introduction Secure Shell (SSH) Generic Security Service Application Program Interface (GSS API
) methods [RFC4462] allow the use of GSS API [RFC2743] for authentication and key exchange in SSH.
[RFC4462] defines three exchange methods all based on DH groups and SHA 1.
This document updates [RFC4462] with new methods intended to support environments that desire to use the SHA 2 cryptographic hash functions.
Due to security concerns with SHA 1
[RFC6194] and with modular exponentiation (MODP) groups with less than 2048 bits
[NIST SP 800 131Ar2], we propose the use of hashes based on SHA 2 [RFC6234] with DH group14, group15, group16, group17, and group18
Additionally, we add support for key exchange based on Elliptic Curve Diffie Hellman with the NIST P 256, P 384, and P 521 [SEC2v2], as well as the X25519 and X448 [RFC7748] curves.
Following the practice of [RFC8268], only SHA 256 and SHA 512 hashes are used for DH groups.
For NIST curves, the same curve to hashing algorithm pairing used in [RFC5656] is adopted for consistency.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14
when, and only when, they appear in all capitals, as shown here.
New Diffie Hellman Key Exchange Methods
This document adopts the same naming convention defined in [RFC4462] to define families of methods that cover any GSS API mechanism used with a specific Diffie Hellman group and SHA 2 hash combination.
Each key exchange method prefix is registered by this document.
The IESG is the change controller of all these key exchange methods; this does NOT imply that the IESG is considered to be in control of the corresponding GSS API mechanism.
Each method in any family of methods (Table 2) specifies GSS API
authenticated Diffie Hellman key exchanges as described in Section 2.1 of [RFC4462].
The method name for each method (Table 1) is the concatenation of the family name prefix with the base64 encoding of the MD5 hash [RFC1321] of the ASN.1 DER encoding [ISO IEC 8825 1] of the corresponding GSS API mechanism's OID.
Base64 encoding is described in Section 4 of [RFC4648].
Section 7 of   Table 2:
New Elliptic Curve Diffie Hellman Key Exchange Methods
In [RFC5656], new SSH key exchange algorithms based on elliptic curve cryptography are introduced.
We reuse much of Section 4 of [RFC5656] to define GSS API authenticated Elliptic Curve Diffie Hellman (ECDH) key exchanges.
Additionally, we also utilize the curves defined in [RFC8731] to complement the three classic NIST defined curves required by [RFC5656].
Generic GSS API Key Exchange with ECDH
This section reuses much of the scheme defined in Section 2.1 of [RFC4462] and combines it with the scheme defined in Section 4 of [RFC5656]; in particular, all checks and verification steps prescribed in Section 4 of [RFC5656] apply here as well.
The key agreement schemes "
ECDHE Curve25519" and "ECDHE Curve448" perform the Diffie Hellman protocol using the functions X25519 and X448, respectively.
Implementations MUST compute these functions using the algorithms described in [RFC7748].
When they do so, implementations MUST check whether the computed Diffie Hellman shared secret
is the all zero value and abort
if so, as described in Section 6 of [RFC7748].
Alternative implementations of these functions SHOULD abort when either the client or the server input forces the shared secret to one of a small set of values, as described in Sections 6 and 7 of [RFC7748].
This section defers to [RFC7546] as the source of information on GSS  API context establishment operations, Section 3 being the most relevant.
All security considerations described in [RFC7546] apply here, too.
The parties each generate an ephemeral key pair, according to Section 3.2.1 of [SEC1v2].
Keys are verified upon receipt by the parties according to Section 3.2.3.1 of [SEC1v2].
For NIST curves, the keys use the uncompressed point representation and MUST be converted using the algorithm in Section 2.3.4 of [SEC1v2].
If the conversion fails or the point is transmitted using the compressed representation, the key exchange MUST fail.
A GSS context is established according to Section 4 of [RFC5656]; the client initiates the establishment using GSS Init sec context(), and the server responds to it using GSS Accept sec context().
For the negotiation, the client MUST set mutual req flag and integ req flag to "true".
In addition, deleg req flag MAY be set to "true" to request access delegation, if requested by the user.
Since the key exchange process authenticates only the host, the setting of anon req flag is immaterial to this process.
If the client does not support the "gssapi keyex" user authentication method described in Section 4 of [RFC4462], or does not intend to use that method in conjunction with the GSS API context established during key exchange, then anon req flag SHOULD be set to "true".
Otherwise, this flag MAY be set to "true" if the client wishes to hide its identity.
This key exchange process will exchange only a single message token once the context has been established; therefore, the replay det req flag and sequence req flag SHOULD be set to "false".
The client MUST include its public key with the first message it sends to the server during this process; if the server receives more than one key or none at all, the key exchange MUST fail.
During GSS context establishment, multiple tokens may be exchanged by the client and the server.
When the GSS context is established (major status is GSS S COMPLETE), the parties check that mutual state and integ avail are both "true".
If not, the key exchange MUST fail.
Once a party receives the peer's public key, it proceeds to compute a shared secret
For NIST curves, the computation is done according to Section 3.3.1 of [SEC1v2], and the resulting value z is converted to the octet string K using the conversion defined in Section 2.3.5 of [SEC1v2].
For curve25519 and curve448, the algorithms in Section 6 of [RFC7748] are used instead.
To verify the integrity of the handshake, peers use the hash function defined by the selected key exchange method to calculate H:
Q C    Q S    K).
The server uses the GSS GetMIC() call with H as the payload to generate a Message Integrity Code (MIC).
The GSS VerifyMIC() call is used by the client to verify the MIC.
If any GSS Init sec context() or GSS Accept sec context() returns a major status other than GSS S COMPLETE or GSS S CONTINUE NEEDED, or any other GSS API call returns a major status other than GSS S COMPLETE, the key exchange MUST fail.
The same recommendations expressed in Section 2.1 of [RFC4462] are followed with regard to error reporting.
Calls GSS Init sec context().
Computes hash H. Calls GSS
string    Q C, client's ephemeral public key octet string
server public host key and certificates
output token (from GSS Accept sec context())
Each time the client receives the message described above, it makes another call to GSS Init sec context().
TRUE string    output token (from GSS Accept sec context())
The hash H is computed as the HASH hash of the concatenation of the following: string    V C, the client's version string (CR, NL excluded)
string    V S, server's version string (CR, NL excluded)
I C, payload of the client's SSH MSG KEXINIT string
I S, payload of the server's SSH MSG KEXINIT string    K S, server's public host key string    Q C, client's ephemeral public key octet string string    Q S, server's ephemeral public key octet string mpint
This value is called the "exchange hash", and it is used to authenticate the key exchange.
The exchange hash SHOULD be kept secret.
If no SSH MSG KEXGSS HOSTKEY message has been sent by the server or received by the client, then the empty string is used in place of K S when computing the exchange hash.
Since this key exchange method does not require the host key to be used for any encryption operations, the SSH MSG KEXGSS HOSTKEY message is OPTIONAL.
If the "null" host key algorithm described in Section 5 of [RFC4462] is used, this message MUST NOT be sent.
If the client receives an SSH MSG KEXGSS CONTINUE message after a call to GSS Init sec context() has returned a major status code of GSS S COMPLETE, a protocol error has occurred, and the key exchange MUST fail.
If the client receives an SSH MSG KEXGSS COMPLETE message and a call to GSS Init sec context() does not result in a major status code of GSS S COMPLETE, a protocol error has occurred, and the key exchange MUST fail.
Each key exchange method prefix is registered by this document.
The IESG is the change controller of all these key exchange methods; this does NOT imply that the IESG is considered to be in control of the corresponding GSS API mechanism.
Each method in any family of methods (Table 4) specifies GSS API  authenticated Elliptic Curve Diffie Hellman key exchanges as described in Section 5.1.
The method name for each method (Table 3) is the concatenation of the family method name with the base64 encoding of the MD5 hash [RFC1321] of the ASN.1 DER encoding [ISO IEC 8825 1] of the corresponding GSS API mechanism's OID.
Base64 encoding is described in Section 4 of [RFC4648].
Because they have small key lengths and are no longer strong in the face of brute force attacks, the algorithms in the following table are considered deprecated and SHOULD NOT be used.
This document augments the SSH key exchange message names that were defined in [RFC4462] (see and Section 6); IANA has listed this document as reference for those entries in the "SSH Protocol Parameters" [IANA KEX NAMES] registry.
In addition, IANA has updated the registry to include the SSH key exchange message names described in Sections 4 and 5.
Additions/Changes to the Key Exchange Method Names Registry 8.
New Finite Field DH Mechanisms
Except for the use of a different secure hash function and larger DH groups, no significant changes have been made to the protocol described by [RFC4462]; therefore, all the original security considerations apply.
New Elliptic Curve DH Mechanisms
Although a new cryptographic primitive is used with these methods, the actual key exchange closely follows the key exchange defined in [RFC5656]; therefore, all the original security considerations, as well as those expressed in [RFC5656], apply.
GSS API Delegation Some GSS API mechanisms can act on a request to delegate credentials to the target host when the deleg req flag is set.
In this case, extra care must be taken to ensure that the acceptor being authenticated matches the target the user intended.
Some mechanism implementations (such as commonly used krb5 libraries) may use insecure DNS resolution to canonicalize the target name; in these cases, spoofing a DNS response that points to an attacker controlled machine may result in the user silently delegating credentials to the attacker, who can then impersonate the user at will.
