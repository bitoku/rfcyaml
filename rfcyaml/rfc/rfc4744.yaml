- title: __initial_text__
  contents:
  - "                    Using the NETCONF Protocol over\n             the Blocks\
    \ Extensible Exchange Protocol (BEEP)\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies an application protocol mapping for the\n\
    \   Network Configuration Protocol (NETCONF) over the Blocks Extensible\n   Exchange\
    \ Protocol (BEEP).\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \      1.1. Why BEEP? ..................................................2\n  \
    \ 2. BEEP Transport Mapping ..........................................2\n    \
    \  2.1. NETCONF Session Establishment ..............................2\n      2.2.\
    \ Starting a Channel for NETCONF .............................4\n      2.3. NETCONF\
    \ Session Usage ......................................5\n      2.4. NETCONF Session\
    \ Teardown ...................................5\n      2.5. BEEP Profile for NETCONF\
    \ ...................................6\n   3. Security Considerations .........................................6\n\
    \   4. IANA Considerations .............................................7\n  \
    \ 5. Acknowledgments .................................................7\n   6.\
    \ References ......................................................8\n      6.1.\
    \ Normative References .......................................8\n      6.2. Informative\
    \ References .....................................8\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The NETCONF protocol [1] defines a simple mechanism through\
    \ which a\n   network device can be managed.  NETCONF is designed to be usable\
    \ over\n   a variety of application protocols.  This document specifies an\n \
    \  application protocol mapping for NETCONF over the Blocks Extensible\n   Exchange\
    \ Protocol (BEEP) [7].\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [2].\n"
- title: 1.1.  Why BEEP?
  contents:
  - "1.1.  Why BEEP?\n   Use of BEEP is natural as an application protocol for transport\
    \ of\n   XML.  As a peer-to-peer protocol, BEEP provides an easy way to\n   implement\
    \ NETCONF, no matter which side of the connection was the\n   initiator.  This\
    \ \"bidirectionality\" allows for either manager or\n   agent to initiate a connection.\
    \  This is particularly important to\n   support large numbers of intermittently\
    \ connected devices, as well as\n   those devices that must reverse the management\
    \ connection in the face\n   of firewalls and network address translators (NATs).\n\
    \   BEEP makes use of the Simple Authentication and Security Layer (SASL)\n  \
    \ [3].  The SASL profile used by BEEP allows for a simple and direct\n   mapping\
    \ to the existing security model for command line interface\n   (CLI), while Transport\
    \ Layer Security (TLS) [4] provides a strong,\n   well-tested encryption mechanism\
    \ with either server or server and\n   client-side authentication.\n"
- title: 2.  BEEP Transport Mapping
  contents:
  - "2.  BEEP Transport Mapping\n   All NETCONF over BEEP implementations MUST implement\
    \ the profile and\n   functional mapping between NETCONF and BEEP as described\
    \ below.\n   For purposes of this document, a manager is a NETCONF client, and\
    \ an\n   agent is a NETCONF server.  Use of client/server language in BEEP is\n\
    \   avoided because of the common notion that in networking clients\n   connect\
    \ to servers.\n"
- title: 2.1.  NETCONF Session Establishment
  contents:
  - "2.1.  NETCONF Session Establishment\n   Managers may be either BEEP listeners\
    \ or initiators.  Similarly,\n   agents may be either listeners or initiators.\
    \  To establish a\n   connection, the initiator connects to the listener on TCP\
    \ port 831.\n   Thus, the initial exchange takes place without regard to whether\
    \ a\n   manager or the agent is the initiator.  After the transport\n   connection\
    \ is established, as greetings are exchanged, they SHOULD\n   each announce their\
    \ support for TLS and optionally SASL.  Once BEEP\n   greeting messages are exchanged,\
    \ if TLS is to be used and available\n   by both parties, the listener STARTs\
    \ a channel with the TLS profile.\n   Once TLS has been started, a new BEEP greeting\
    \ message is sent by\n   both initiator and listener, as required by the BEEP\
    \ RFC.\n   After all BEEP greeting messages are exchanged in order for roles to\n\
    \   be clear, the agent MUST advertise the NETCONF profile.  The manager\n   MUST\
    \ NOT advertise the NETCONF profile.  If the agent side of the\n   communication\
    \ (either initiator or listener) receives a BEEP\n   <greeting> element that contains\
    \ the NETCONF profile, it MUST close\n   the connection.  Similarly, if neither\
    \ side issues a NETCONF profile\n   it is equally an error, and the listener MUST\
    \ close the connection.\n   At this point, if SASL is desired, the initiator starts\
    \ a BEEP\n   channel to perform a SASL exchange to authenticate itself.  Upon\n\
    \   completion of authentication the channel is closed.  That is, the\n   channel\
    \ is exclusively used to authenticate.\n   Examples of both TLS and SASL profiles\
    \ can be found in [7].\n   It is anticipated that the SASL PLAIN mechanism will\
    \ be heavily used\n   in conjunction with TLS [5].  In such cases, in accordance\
    \ with RFC\n   2595 the PLAIN mechanism MUST NOT be advertised in the first BEEP\n\
    \   <greeting>, but only in the one following a successful TLS\n   negotiation.\
    \  This applies only if TLS and SASL PLAIN mechanisms are\n   both to be used.\
    \  To avoid risk of eavesdropping, the SASL PLAIN\n   mechanism MUST NOT be used\
    \ over unencrypted channels.  More specifics\n   about the use of SASL and TLS\
    \ are mentioned in Security\n   Considerations below.\n   Once authentication\
    \ has occurred, there is no need to distinguish\n   between initiator and listener.\
    \  We now distinguish between manager\n   and agent, and it is assumed that each\
    \ knows its role in the\n   conversation.\n"
- title: 2.2.  Starting a Channel for NETCONF
  contents:
  - "2.2.  Starting a Channel for NETCONF\n   The manager now establishes a new channel\
    \ and specifies the single\n   NETCONF profile.  For example:\n         (M = Manager;\
    \ A = Agent)\n         M: MSG 0 1 . 10 48 118\n         M: Content-type: application/beep+xml\n\
    \         M:\n         M: <start number=\"1\">\n         M:   <profile uri=\"\
    http://iana.org/beep/netconf\" />\n         M: </start>\n         M: END\n   \
    \      A: RPY 0 1 . 38 87\n         A: Content-Type: application/beep+xml\n  \
    \       A:\n         A: <profile uri=\"http://iana.org/beep/netconf\" />\n   \
    \      A: END\n   At this point, we are ready to proceed on BEEP channel 1 with\
    \ NETCONF\n   operations.\n   NETCONF messages are transmitted with a Content-type\
    \ header set to\n   \"text/xml\".\n   Next the manager and the agent exchange\
    \ NETCONF <hello> elements on\n   the new channel so that each side learns the\
    \ other's capabilities.\n   This occurs through a MSG.  Each side will then respond\
    \ positively.\n   The following example is adapted from [1] Section 8.1:\n   \
    \    A: MSG 1 0 . 0 457\n       A: Content-type: application/beep+xml\n      \
    \ A:\n       A: <?xml version='1.0' encoding=\"UTF-8\"?>\n       A: <hello xmlns=\"\
    urn:ietf:params:xml:ns:netconf:base:1.0\">\n       A:   <capabilities>\n     \
    \  A:     <capability>\n       A:       urn:ietf:params:netconf:base:1.0\n   \
    \    A:     </capability>\n       A:     <capability>\n       A:       urn:ietf:params:netconf:capability:startup:1.0\n\
    \       A:     </capability>\n       A:     <capability>\n       A:       http://example.net/router/2.3/core#myfeature\n\
    \       A:     </capability>\n       A:   </capabilities>\n       A:   <session-id>4</session-id>\n\
    \       A: </hello>\n       A: END\n       M: RPY 1 0 . 0 0\n       M: END\n \
    \  Future NETCONF capabilities may require additional BEEP channels.\n   When\
    \ such capabilities are defined, a BEEP mapping must be defined as\n   well.\n\
    \   At this point, the NETCONF session is established, and capabilities\n   have\
    \ been exchanged.\n"
- title: 2.3.  NETCONF Session Usage
  contents:
  - "2.3.  NETCONF Session Usage\n   Nearly all NETCONF operations are executed through\
    \ the <rpc> element.\n   To issue a remote procedure call (RPC), the manager transmits\
    \ on the\n   operational channel a BEEP MSG containing the RPC and its arguments.\n\
    \   In accordance with the BEEP standard, RPC requests may be split\n   across\
    \ multiple BEEP frames.\n   Once received and processed, the agent responds with\
    \ BEEP RPY\n   messages on the same channel with the response to the RPC.  In\n\
    \   accordance with the BEEP standard, responses may be split across\n   multiple\
    \ BEEP frames.\n"
- title: 2.4.  NETCONF Session Teardown
  contents:
  - "2.4.  NETCONF Session Teardown\n   Upon receipt of <close-session> from the manager,\
    \ once the agent has\n   completed all RPCs, it will close BEEP channel 0.  When\
    \ an agent\n   needs to initiate a close, it will do so by closing BEEP channel\
    \ 0.\n   Although not required to do so, the agent should allow for a\n   reasonable\
    \ period for a manager to release an existing lock prior to\n   initiating a close.\
    \  Once the agent has closed channel 0, all locks\n   are released, and each side\
    \ follows teardown procedures as specified\n   in [8].  Having received a BEEP\
    \ close or having sent <close-session>,\n   a manager MUST NOT send further requests.\
    \  If there are additional\n   activities due to expanded capabilities, they MUST\
    \ cease in an\n   orderly manner and should be properly described in the capability\n\
    \   mapping.\n"
- title: 2.5.  BEEP Profile for NETCONF
  contents:
  - "2.5.  BEEP Profile for NETCONF\n   Profile Identification: http://iana.org/beep/netconf\n\
    \   Messages exchanged during Channel Creation: not applicable\n   Messages starting\
    \ one-to-one exchanges: \"hello\", \"rpc\", \"rpc-reply\"\n   Messages in positive\
    \ replies: \"rpc-reply\"\n   Messages in negative replies: \"rpc-reply\"\n   Messages\
    \ in one-to-many exchanges: none\n   Message syntax: [1]\n   Message semantics:\
    \ [1]\n   Contact Information: See the \"Author's Address\" section of this memo.\n"
- title: 3.  Security Considerations
  contents:
  - "3.  Security Considerations\n   Configuration information is by its very nature\
    \ sensitive.  Its\n   transmission in the clear and without integrity checking\
    \ leaves\n   devices open to classic so-called \"person-in-the-middle\" attacks.\n\
    \   Configuration information often times contains passwords, user names,\n  \
    \ service descriptions, and topological information, all of which are\n   sensitive.\
    \  A NETCONF application protocol, therefore, must minimally\n   support options\
    \ for both confidentiality and authentication.\n   The BEEP mapping described\
    \ in this document addresses both\n   confidentiality and authentication in a\
    \ flexible manner through the\n   use of TLS and SASL profiles.  Confidentiality\
    \ is provided via the\n   TLS profile and is used as discussed above.  In addition,\
    \ the server\n   certificate shall serve as the server's authentication to the\
    \ client.\n   The client MUST be prepared to recognize and validate a server\n\
    \   certificate and SHOULD by default reject invalid certificates.\n   In order\
    \ to validate a certificate, the client must be able to access\n   a trust anchor.\
    \  While such validation methods are beyond the scope\n   of this document, they\
    \ will depend on the type of device and\n   circumstance.  Both the implementor\
    \ and the administrator are\n   cautioned to be aware of any circular dependencies\
    \ that various\n   methods may introduce.  For instance, Online Certificate Status\n\
    \   Protocol (OCSP) servers may not be available in a network cold-start\n   scenario\
    \ and would be ill-advised for core routers to depend on to\n   receive configuration\
    \ at boot.\n   For client-side authentication, there are several options.  The\n\
    \   client MAY provide a certificate during the initiation phase of TLS,\n   in\
    \ which case the subject of that certificate shall be considered\n   principle\
    \ for authentication purposes.  Once again, server\n   implementors should be\
    \ aware of any interdependencies that could be\n   created through protocols used\
    \ to validate trust anchors.\n   TLS endpoints may be authorized based on subject\
    \ name or certificate\n   authority (CA), depending on circumstances.  For instance,\
    \ it would\n   be unwise for a core Internet router to allow a netconf agent\n\
    \   connection simply based on a valid certificate signed by a common CA,\n  \
    \ but not unreasonable to allow a connection from an agent with a\n   particular\
    \ distinguished name.  On the other hand, it might be\n   desirable for enterprises\
    \ to trust certificates signed by CAs of\n   their network operations team.\n\
    \   In the case where the client has not authenticated through TLS, the\n   server\
    \ SHOULD advertise one or more SASL profiles, from which the\n   client will choose.\
    \  In the singular case where TLS is established,\n   the minimum profile MAY\
    \ be PLAIN.  Otherwise, implementations MUST\n   support the DIGEST-MD5 profile\
    \ as described in [6], and they MAY\n   support other profiles such as the One-Time\
    \ Password (OTP) mechanism\n   [10].\n   Different environments may well allow\
    \ different rights prior to and\n   then after authentication.  An authorization\
    \ model is not specified\n   in this document.  When an operation is not properly\
    \ authorized, then\n   a simple rpc-error containing \"permission denied\" is\
    \ sufficient.\n   Note that authorization information may be exchanged in the\
    \ form of\n   configuration information, which is all the more reason to ensure\
    \ the\n   security of the connection.\n"
- title: 4.  IANA Considerations
  contents:
  - "4.  IANA Considerations\n   IANA assigned TCP port (831) for NETCONF over BEEP.\n"
- title: 5.  Acknowledgments
  contents:
  - "5.  Acknowledgments\n   This work is the product of the NETCONF IETF working\
    \ group, and many\n   people have contributed to the NETCONF discussion.  Most\
    \ notably, Rob\n   Ens, Phil Schafer, Andy Bierman, Wes Hardiger, Ted Goddard,\
    \ and\n   Margaret Wasserman all contributed in some fashion to this work,\n \
    \  which was originally to be found in the NETCONF base protocol\n   specification.\
    \  Thanks also to Weijing Chen, Keith Allen, Juergen\n   Schoenwaelder, Marshall\
    \ Rose, and Eamon O'Tuathail for their very\n   constructive participation.  The\
    \ authors would also like to thank\n   Elwyn Davies for his constructive review.\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [1]  Enns, R., Ed., \"NETCONF Configuration Protocol\"\
    , RFC 4741,\n        December 2006.\n   [2]  Bradner, S., \"Key words for use\
    \ in RFCs to Indicate Requirement\n        Levels\", BCP 14, RFC 2119, March 1997.\n\
    \   [3]  Melnikov, A. and K. Zeilenga, \"Simple Authentication and\n        Security\
    \ Layer (SASL)\", RFC 4422, June 2006.\n   [4]  Dierks, T. and E. Rescorla, \"\
    The Transport Layer Security (TLS)\n        Protocol Version 1.1\", RFC 4346,\
    \ April 2006.\n   [5]  Newman, C., \"Using TLS with IMAP, POP3 and ACAP\", RFC\
    \ 2595,\n        June 1999.\n   [6]  Leach, P. and C. Newman, \"Using Digest Authentication\
    \ as a SASL\n        Mechanism\", RFC 2831, May 2000.\n   [7]  Rose, M., \"The\
    \ Blocks Extensible Exchange Protocol Core\",\n        RFC 3080, March 2001.\n\
    \   [8]  Rose, M., \"Mapping the BEEP Core onto TCP\", RFC 3081,\n        March\
    \ 2001.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [9]   Sperberg-McQueen, C., Paoli, J., Maler,\
    \ E., and T. Bray,\n         \"Extensible Markup Language (XML) 1.0 (Second Edition)\"\
    , World\n         Wide Web Consortium, First Edition,\n         http://www.w3.org/TR/2000/REC-xml-20001006,\
    \ October 2000.\n   [10]  Newman, C., \"The One-Time-Password SASL Mechanism\"\
    , RFC 2444,\n         October 1998.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Eliot Lear\n   Cisco Systems\n   Glatt-com\n   CH-8301\
    \ Glattzentrum, Zurich\n   CH\n   EMail: lear@cisco.com\n   Ken Crozier\n   EMail:\
    \ ken.crozier@gmail.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2006).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST,\n   AND THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES,\n   EXPRESS OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT\n   THE USE OF THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY\n   IMPLIED WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR\n   PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
