Abstract This document defines the Opus interactive speech and audio codec.
Opus is designed to handle a wide range of interactive audio applications, including Voice over IP, videoconferencing, in game chat, and even live, distributed music performances.
It scales from low bitrate narrowband speech at 6 kbit
/s to very high quality stereo music at 510 kbit/s.
Opus uses both Linear Prediction (LP) and the Modified Discrete Cosine Transform (MDCT) to achieve good compression of both speech and music.
The Opus codec is a real time interactive audio codec designed to meet the requirements described in [REQUIREMENTS].
It is composed of a layer based on Linear Prediction (LP) [LPC] and a layer based on the Modified Discrete Cosine Transform (MDCT) [MDCT].
The main idea behind using two layers is as follows:
in speech, linear prediction techniques (such as Code Excited Linear Prediction, or CELP) code low frequencies more efficiently than transform (e.g., MDCT) domain techniques, while the situation is reversed for music and higher speech frequencies.
Thus, a codec with both layers available can operate over a wider range than either one alone and can achieve better quality by combining them than by using either one individually.
The primary normative part of this specification is provided by the source code in Appendix A.
Only the decoder portion of this software is normative, though a significant amount of code is shared by both the encoder and decoder.
Section 6 provides a decoder conformance test.
The decoder contains a great deal of integer and fixed point arithmetic that needs to be performed exactly, including all rounding considerations, so any useful specification requires domain specific symbolic language to adequately define these operations.
Additionally, any conflict between the symbolic representation and the included reference implementation must be resolved.
For the practical reasons of compatibility and testability, it would be advantageous to give the reference implementation priority in any disagreement.
The C language is also one of the most widely understood, human readable symbolic representations for machine behavior.
For these reasons, this RFC uses the reference implementation as the sole symbolic representation of the codec.
While the symbolic representation is unambiguous and complete, it is not always the easiest way to understand the codec's operation.
For this reason, this document also describes significant parts of the codec in prose and takes the opportunity to explain the rationale behind many of the more surprising elements of the design.
These descriptions are intended to be accurate and informative, but the limitations of common English sometimes result in ambiguity, so it is expected that the reader will always read them alongside the symbolic representation.
Numerous references to the implementation are provided for this purpose.
The descriptions sometimes differ from the reference in ordering or through mathematical simplification wherever such deviation makes an explanation easier to understand.
For example, the right shift and left shift operations in the reference implementation are often described using division and multiplication in the text.
In general, the text is focused on the "what" and "why" while the symbolic representation most clearly provides the "how". 1.1.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119
Various operations in the codec require bit exact fixed point behavior, even when writing a floating point implementation.
The notation "Q<n>", where n is an integer, denotes the number of binary digits to the right of the decimal point in a fixed point number.
For example, a signed Q14 value in a 16 bit word can represent values from  2.0 to 1.99993896484375, inclusive.
This notation is for informational purposes only.
Arithmetic, when described, always operates on the underlying integer.
For example, the text will explicitly indicate any shifts required after a multiplication.
Expressions, where included in the text, follow C operator rules and precedence, with the exception that the syntax "x  y" indicates
x raised to the power y.
The text also makes use of the following functions.
The smallest of two values x and y. 1.1.2.
The largest of two values x and y. 1.1.3.
With this definition, if lo
hi, then lo is returned.
x   0 (  1,  x > 0 1.1.5.
The absolute value of x, i.e., abs(x)
The largest integer z such that z <  f. 1.1.7.
The smallest integer z such that z >
The integer z nearest to f, with ties rounded towards negative infinity, i.e., round(f)
The base two logarithm of f. 1.1.10.
The minimum number of bits required to store a positive integer n in binary, or 0 for a non positive integer n. ( 0,
< ( floor(log2(n)) 1,  n > 0
Examples:  ilog( 1)   0  ilog(0)   0
The Opus codec scales from 6 kbit/s narrowband mono speech to 510 kbit/s fullband stereo music, with algorithmic delays ranging from 5 ms to 65.2 ms.
At any given time, either the LP layer, the MDCT layer, or both, may be active.
It can seamlessly switch between all of its various operating modes, giving it a great deal of flexibility to adapt to varying content and network conditions without renegotiating the current session.
Although the sampling theorem allows a bandwidth as large as half the sampling rate, Opus never codes audio above 20 kHz, as that is the generally accepted upper limit of human hearing.
Opus defines super wideband (SWB) with an effective sample rate of 24 kHz, unlike some other audio coding standards that use 32 kHz.
This was chosen for a number of reasons.
The band layout in the MDCT layer naturally allows skipping coefficients for frequencies over 12 kHz, but does not allow cleanly dropping just those frequencies over 16 kHz.
A sample rate of 24 kHz also makes resampling in the MDCT layer easier, as 24 evenly divides 48, and when 24 kHz is sufficient, it can save computation in other processing, such as Acoustic Echo Cancellation (AEC).
Experimental changes to the band layout to allow a 16 kHz cutoff (32 kHz effective sample rate) showed potential quality degradations at other sample rates, and, at typical bitrates, the number of bits saved by using such a cutoff instead of coding in fullband (FB) mode is very small.
Therefore, if an application wishes to process a signal sampled at 32 kHz, it should just use FB.
The LP layer is based on the SILK codec [SILK].
It supports NB, MB, or WB audio and frame sizes from 10 ms to 60 ms, and requires an additional 5 ms look ahead for noise shaping estimation.
A small additional delay (up to 1.5 ms) may be required for sampling rate conversion.
Like Vorbis [VORBIS WEBSITE] and many other modern codecs, SILK is inherently designed for variable bitrate (VBR) coding, though the encoder can also produce constant bitrate (CBR) streams.
The version of SILK used in Opus is substantially modified from, and not compatible with, the stand alone SILK codec previously deployed by Skype.
This document does not serve to define that format, but those interested in the original SILK codec should see [SILK] instead.
The MDCT layer is based on the Constrained Energy Lapped Transform (CELT) codec [CELT].
It supports NB, WB, SWB, or FB audio and frame sizes from 2.5 ms to 20 ms, and requires an additional 2.5 ms look  ahead due to the overlapping MDCT windows.
The CELT codec is inherently designed for CBR coding, but unlike many CBR codecs, it is not limited to a set of predetermined rates.
It internally allocates bits to exactly fill any given target budget, and an encoder can produce a VBR stream by varying the target on a per frame basis.
The MDCT layer is not used for speech when the audio bandwidth is WB or less, as it is not useful there.
On the other hand, non speech signals are not always adequately coded using linear prediction.
Therefore, the MDCT layer should be used for music signals.
A "Hybrid" mode allows the use of both layers simultaneously with a frame size of 10 or 20 ms and an SWB or FB audio bandwidth.
The LP layer codes the low frequencies by resampling the signal down to WB.
The MDCT layer follows, coding the high frequency portion of the signal.
The cutoff between the two lies at 8 kHz, the maximum WB audio bandwidth.
In the MDCT layer, all bands below 8 kHz are discarded, so there is no coding redundancy between the two layers.
The sample rate (in contrast to the actual audio bandwidth) can be chosen independently on the encoder and decoder side, e.g., a fullband signal can be decoded as wideband, or vice versa.
This approach ensures a sender and receiver can always interoperate, regardless of the capabilities of their actual audio hardware.
Internally, the LP layer always operates at a sample rate of twice the audio bandwidth, up to a maximum of 16 kHz, which it continues to use for SWB and FB.
The decoder simply resamples its output to support different sample rates.
The MDCT layer always operates internally at a sample rate of 48 kHz.
Since all the supported sample rates evenly divide this rate, and since the decoder may easily zero out the high frequency portion of the spectrum in the frequency domain, it can simply decimate the MDCT layer output to achieve the other supported sample rates very cheaply.
After conversion to the common, desired output sample rate, the decoder simply adds the output from the two layers together.
To compensate for the different look ahead required by each layer, the CELT encoder input is delayed by an additional 2.7 ms.
This ensures that low frequencies and high frequencies arrive at the same time.
This extra delay may be reduced by an encoder by using less look  ahead for noise shaping or using a simpler resampler in the LP layer, but this will reduce quality.
However, the base 2.5 ms look ahead in the CELT layer cannot be reduced in the encoder because it is needed for the MDCT overlap, whose size is fixed by the decoder.
Both layers use the same entropy coder, avoiding any waste from "padding bits" between them.
The hybrid approach makes it easy to support both CBR and VBR coding.
Although the LP layer is VBR, the bit allocation of the MDCT layer can produce a final stream that is CBR by using all the bits left unused by the LP layer.
The Opus codec includes a number of control parameters that can be changed dynamically during regular operation of the codec, without interrupting the audio stream from the encoder to the decoder.
These parameters only affect the encoder since any impact they have on the bitstream is signaled in band such that a decoder can decode any Opus stream without any out of band signaling.
Any Opus implementation can add or modify these control parameters without affecting interoperability.
The most important encoder control parameters in the reference encoder are listed below.
Bitrate Opus supports all bitrates from 6 kbit/s to 510 kbit/s.
All other parameters being equal, higher bitrate results in higher quality.
For a frame size of 20 ms, these are the bitrate "sweet spots" for Opus in various configurations:  8 12 kbit/s for NB speech,  16 20 kbit/s for WB speech,  28 40 kbit/s for FB speech,  48 64 kbit/s for FB mono music, and  64 128 kbit/s for FB stereo music.
(Mono/Stereo) Opus can transmit either mono or stereo frames within a single stream.
When decoding a mono frame in a stereo decoder, the left and right channels are identical, and when decoding a stereo frame in a mono decoder, the mono output is the average of the left and right channels.
In some cases, it is desirable to encode a stereo input stream in mono (e.g., because the bitrate is too low to encode stereo with sufficient quality).
The number of channels encoded can be selected in real time, but by default the reference encoder attempts to make the best decision possible given the current bitrate.
The audio bandwidths supported by Opus are listed in Table 1.
Just like for the number of channels, any decoder can decode audio that is encoded at any bandwidth.
For example, any Opus decoder operating at 8 kHz can decode an FB Opus frame, and any Opus decoder operating at 48 kHz can decode an NB frame.
Similarly, the reference encoder can take a 48 kHz input signal and encode it as NB.
The higher the audio bandwidth, the higher the required bitrate to achieve acceptable quality.
The audio bandwidth can be explicitly specified in real  time, but, by default, the reference encoder attempts to make the best bandwidth decision possible given the current bitrate.
Frame Duration Opus can encode frames of 2.5, 5, 10, 20, 40, or 60
It can also combine multiple frames into packets of up to 120 ms.  For real time applications, sending fewer packets per second reduces the bitrate, since it reduces the overhead from IP, UDP, and RTP headers.
However, it increases latency and sensitivity to packet losses, as losing one packet constitutes a loss of a bigger chunk of audio.
Increasing the frame duration also slightly improves coding efficiency, but the gain becomes small for frame sizes above 20 ms.
For this reason, 20 ms frames are a good choice for most applications.
There are various aspects of the Opus encoding process where trade  offs can be made between CPU complexity and quality/bitrate.
In the reference encoder, the complexity is selected using an integer from 0 to 10, where 0 is the lowest complexity and 10 is the highest.
Examples of computations for which such trade offs may occur are:  The order of the pitch analysis whitening filter [WHITENING],  The order of the short term noise shaping filter,
The number of states in delayed decision quantization of the residual signal, and  The use of certain bitstream features such as variable time  frequency resolution and the pitch post filter.
Packet Loss Resilience Audio codecs often exploit inter frame correlations to reduce the bitrate at a cost in error propagation: after losing one packet, several packets need to be received before the decoder is able to accurately reconstruct the speech signal.
The extent to which Opus exploits inter frame dependencies can be adjusted on the fly to choose a trade off between bitrate and amount of error propagation.
Another mechanism providing robustness against packet loss is the in  band
Packets that are determined to contain perceptually important speech information, such as onsets or transients, are encoded again at a lower bitrate and this re encoded information is added to a subsequent packet.
Constant/Variable Bitrate Opus is more efficient when operating with variable bitrate (VBR), which is the default.
When low latency transmission is required over a relatively slow connection, then constrained VBR can also be used.
This uses VBR in a way that simulates a "bit reservoir" and is equivalent to what MP3 (MPEG 1, Layer 3) and AAC (Advanced Audio Coding) call
CBR (i.e., not true CBR due to the bit reservoir).
In some (rare) applications, constant bitrate (CBR) is required.
There are two main reasons to operate in CBR mode:  When the transport only supports a fixed size for each compressed frame, or  When encryption is used for an audio stream that is either highly constrained (e.g., yes/no, recorded prompts) or highly sensitive [SRTP VBR].
Bitrate may still be allowed to vary, even with sensitive data, as long as the variation is not driven by the input signal (for example, to match changing network conditions).
To achieve this, an application should still run Opus in CBR mode, but change the target rate before each packet.
Discontinuous Transmission (DTX) reduces the bitrate during silence or background noise.
When DTX is enabled, only one frame is encoded every 400 milliseconds.
The Opus encoder produces "packets", which are each a contiguous set of bytes meant to be transmitted as a single unit.
The packets described here do not include such things as IP, UDP, or RTP headers, which are normally found in a transport layer packet.
A single packet may contain multiple audio frames, so long as they share a common set of parameters, including the operating mode, audio bandwidth, frame size, and channel count (mono vs. stereo).
This section describes the possible combinations of these parameters and the internal framing used to pack multiple frames into a single packet.
This framing is not self delimiting.
Instead, it assumes that a lower layer (such as UDP or RTP [RFC3550] or Ogg [RFC3533] or Matroska [MATROSKA WEBSITE]) will communicate the length, in bytes, of the packet, and it uses this information to reduce the framing overhead in the packet itself.
A decoder implementation MUST support the framing described in this section.
An alternative, self  delimiting variant of the framing is described in Appendix B. Support for that variant is OPTIONAL.
All bit diagrams in this document number the bits
so that bit 0 is the most significant bit of the first byte, and bit 7 is the least significant.
Bit 8 is thus the most significant bit of the second byte, etc.
Well formed Opus packets obey certain requirements, marked [R1] through [R7] below.
These are summarized in Section 3.4 along with appropriate means of handling malformed packets.
The TOC Byte A well formed Opus packet MUST contain at least one byte [R1].
This byte forms a table of contents (TOC) header that signals which of the various modes and configurations a given packet uses.
It is composed of a configuration number, "config", a stereo flag, "s", and a frame count code, "c", arranged as illustrated in Figure 1.
A description of each of these fields follows.
The top five bits of the TOC byte, labeled "config", encode one of 32 possible configurations of operating mode, audio bandwidth, and frame size.
As described, the LP (SILK) layer and MDCT (CELT) layer can be combined in three possible operating modes: 1.
A SILK only mode for use in low bitrate connections with an audio bandwidth of WB or less, 2.
A Hybrid (SILK CELT) mode for SWB or FB speech at medium bitrates, and 3.
A CELT only mode for very low delay speech transmission as well as music transmission (NB to FB).
The 32 possible configurations each identify which one of these operating modes the packet uses, as well as the audio bandwidth and the frame size.
Table 2 lists the parameters for each configuration.
The configuration numbers in each range (e.g., 0...3 for NB SILK  only) correspond to the various choices of frame size, in the same order.
For example, configuration 0 has a 10 ms frame size and configuration 3 has a 60 ms frame size.
One additional bit, labeled "s", signals mono vs. stereo, with 0 indicating mono and 1 indicating stereo.
The remaining two bits of the TOC byte, labeled "c", code the number of frames per packet (codes 0 to 3) as follows:  0: 1 frame in the packet  1: 2 frames in the packet, each with equal compressed size
2: 2 frames in the packet, with different compressed sizes
3: an arbitrary number of frames in the packet
This document refers to a packet as a code 0 packet, code 1 packet, etc., based on the value of "c".
This section describes how frames are packed according to each possible value of "c" in the TOC byte.
Frame Length Coding When a packet contains multiple VBR frames (i.e., code 2 or 3), the compressed length of one or more of these frames is indicated with a one  or two byte sequence, with the meaning of the first byte as follows:  0:
No frame (Discontinuous Transmission (DTX) or lost packet)  1...251: Length of the frame in bytes  252...255: A second byte is needed.
The total length is (second byte 4)
first byte The special length
0 indicates that no frame is available, either because it was dropped during transmission by some intermediary or because the encoder chose not to transmit it.
Any Opus frame in any mode MAY have a length of 0.
The maximum representable length is 255 4 255 1275 bytes.
For 20 ms frames, this represents a bitrate of 510 kbit/s, which is approximately the highest useful rate for lossily compressed fullband stereo music.
Beyond this point, lossless codecs are more appropriate.
It is also roughly the maximum useful rate of the MDCT layer as, shortly thereafter, quality no longer improves with additional bits due to limitations on the codebook sizes.
No length is transmitted for the last frame in a VBR packet, or for any of the frames in a CBR packet, as it can be inferred from the total size of the packet and the size of all other data in the packet.
However, the length of any individual frame MUST NOT exceed 1275 bytes [R2] to allow for repacketization by gateways, conference bridges, or other software.
: One Frame in the Packet For code 0 packets, the TOC byte is immediately followed by N 1 bytes of compressed data for a single frame (where N is the size of the packet), as illustrated in Figure 2. 0
Figure 2: A Code 0 Packet 3.2.3.
Two Frames in the Packet, Each with Equal Compressed Size
For code 1 packets, the TOC byte is immediately followed by the (N 1)/2 bytes of compressed data for the first frame, followed by (N 1)/2 bytes of compressed data for the second frame, as illustrated in Figure 3.
The number of payload bytes available for compressed data, N 1, MUST be even for all code 1 packets [R3].
A Code 1 Packet 3.2.4.
Two Frames in the Packet, with Different Compressed Sizes
For code 2 packets, the TOC byte is followed by a one  or two byte sequence indicating the length of the first frame (marked N1 in Figure 4), followed by N1 bytes of compressed data for the first frame.
The remaining N N1 2 or N N1 3 bytes are the compressed data for the second frame.
This is illustrated in Figure 4.
A code 2 packet MUST contain enough bytes to represent a valid length.
For example, a 1 byte code 2 packet is always invalid, and a 2 byte code 2 packet whose second byte is in the range
The length of the first frame, N1, MUST also be no larger than the size of the payload remaining after decoding that length for all code 2 packets [R4].
This makes, for example, a 2 byte code 2 packet with a second byte in the range
(the only valid 2 byte code 2 packet is one where the length of both frames is zero).
A Code 2 Packet 3.2.5.
A Signaled Number of Frames in the Packet Code 3 packets signal the number of frames, as well as additional padding, called "Opus padding" to indicate that this padding is added at the Opus layer rather than at the transport layer.
Code 3 packets MUST have at least 2 bytes [R6,R7].
The TOC byte is followed by a byte encoding the number of frames in the packet in bits 2 to 7 (marked "M" in Figure 5), with bit 1 indicating whether or not Opus padding is inserted (marked "p" in Figure 5), and bit 0 indicating VBR (marked "v" in Figure 5).
M MUST NOT be zero, and the audio duration contained within a packet MUST NOT exceed 120 ms [R5].
This limits the maximum frame count for any frame size to 48 (for 2.5 ms frames), with lower limits for longer frame sizes.
Figure 5 illustrates the layout of the frame count byte.
0 0 1 2 3 4 5 6 7    v
When Opus padding is used, the number of bytes of padding is encoded in the bytes following the frame count byte.
254 indicate that 0...254 bytes of padding are included, in addition to the byte(s) used to indicate the size of the padding.
If the value is 255, then the size of the additional padding is 254 bytes, plus the padding value encoded in the next byte.
There MUST be at least one more byte in the packet in this case [R6,R7].
The additional padding bytes appear at the end of the packet and MUST be set to zero by the encoder to avoid creating a covert channel.
The decoder MUST accept any value for the padding bytes, however.
Although this encoding provides multiple ways to indicate a given number of padding bytes, each uses a different number of bytes to indicate the padding size and thus will increase the total packet size by a different amount.
For example, to add 255 bytes to a packet, set the padding bit, p, to 1, insert a single byte after the frame count byte with a value of 254, and append 254 padding bytes with the value zero to the end of the packet.
To add 256 bytes to a packet, set the padding bit to 1, insert two bytes after the frame count byte with the values 255 and 0, respectively, and append 254 padding bytes with the value zero to the end of the packet.
By using the value 255 multiple times, it is possible to create a packet of any specific, desired size.
Let P be the number of header bytes used to indicate the padding size plus the number of padding bytes themselves
(i.e., P is the total number of bytes added to the packet).
Then, P MUST be no more than N 2 [R6,R7].
In the CBR case, let R N 2 P be the number of bytes remaining in the packet after subtracting the (optional) padding.
Then, the compressed length of each frame in bytes is equal to R/M.
The value R MUST be a non negative integer multiple of M [R6].
The compressed data for all M frames follows, each of size R/M bytes, as illustrated in Figure 6. 0
A CBR Code 3 Packet
In the VBR case, the (optional) padding length is followed by M 1 frame lengths (indicated by "N1" to "N[M 1]" in Figure 7), each encoded in a one  or two byte sequence as described above.
The packet MUST contain enough data for the M 1 lengths after removing the (optional) padding, and the sum of these lengths MUST be no larger than the number of bytes remaining in the packet after decoding them [R7].
The compressed data for all M frames follows, each frame consisting of the indicated number of bytes, with the final frame consuming any remaining bytes before the final padding, as illustrated in Figure 6.
The number of header bytes (TOC byte, frame count byte, padding length bytes, and frame length bytes), plus the signaled length of the first M 1 frames themselves, plus the signaled length of the padding MUST be no larger than N, the total size of the packet. 0
Four FB stereo 20 ms CELT frames of the same compressed size:
A receiver MUST NOT process packets that violate any of the rules above as normal Opus packets.
They are reserved for future applications, such as in band headers (containing metadata, etc.).
Packets that violate these constraints may cause implementations of  this  specification to treat them as malformed and discard them.
These constraints are summarized here for reference: [R1]  Packets are at least one byte.
[R2]  No implicit frame length is larger than 1275 bytes.
[R3]  Code 1 packets have an odd total length, N, so that (N 1)/2 is an integer.
[R4]  Code 2 packets have enough bytes after the TOC for a valid frame length, and that length is no larger than the number of bytes remaining in the packet.
[R5]  Code 3 packets contain at least one frame, but
no more than 120 ms of audio total.
[R6]  The length of a CBR code 3 packet, N, is at least two bytes, the number of bytes added to indicate the padding size plus the trailing padding bytes themselves, P, is no more than N 2, and the frame count, M, satisfies the constraint that (N 2 P) is a non negative integer multiple of M. [R7]  VBR code 3 packets are large enough to contain all the header bytes (TOC byte, frame count byte, any padding length bytes, and any frame length bytes), plus the length of the first M 1 frames, plus any trailing padding bytes.
The Opus decoder consists of two main blocks: the SILK decoder and the CELT decoder.
At any given time, one or both of the SILK and CELT decoders may be active.
The output of the Opus decode is the sum of the outputs from the SILK and CELT decoders with proper sample rate conversion and delay compensation on the SILK side, and optional decimation (when decoding to sample rates less than 48 kHz) on the CELT side, as illustrated in the block diagram below.
Range Decoder Opus uses an entropy coder based on range coding [RANGE CODING] [MARTIN79], which is itself a rediscovery of the FIFO arithmetic code introduced by [CODING THESIS].
It is very similar to arithmetic encoding, except that encoding is done with digits in any base instead of with bits, so it is faster when using larger bases (i.e., a byte).
All of the calculations in the range coder must use bit  exact integer arithmetic.
Symbols may also be coded as "raw bits" packed directly into the bitstream, bypassing the range coder.
These are packed backwards starting at the end of the frame, as illustrated in Figure 12.
This reduces complexity and makes the stream more resilient to bit errors, as corruption in the raw bits will not desynchronize the decoding process, unlike corruption in the input to the range decoder.
Raw bits are only used in the CELT layer. 0
LSB   Least Significant Bit MSB
Most Significant Bit Figure 12:
Illustrative Example of Packing Range Coder and Raw Bits Data
Each symbol coded by the range coder is drawn from a finite alphabet and coded in a separate "context", which describes the size of the alphabet and the relative frequency of each symbol in that alphabet.
Suppose there is a context with n symbols, identified with an index that ranges from 0 to n 1.
The parameters needed to encode or decode symbol k in this context are represented by a three tuple (fl[k], fh[k], ft), all 16 bit unsigned integers, with 0 <
The values of this tuple are derived from the probability model for the symbol, represented by traditional "frequency counts".
Because Opus uses static contexts, those are not updated as symbols are decoded.
Let f[i] be the frequency of symbol i.
The range decoder extracts the symbols and integers encoded using the range encoder in Section 5.1.
The range decoder maintains an internal state vector composed of the two tuple (val, rng), where val represents the difference between the high end of the current range and the actual coded value, minus one, and rng represents the size of the current range.
Both val and rng are 32 bit unsigned integer values.
Range Decoder Initialization Let b0 be an 8 bit unsigned integer containing first input byte (or containing zero
if there are no bytes in this Opus frame).
The decoder initializes rng to 128 and initializes val to (127 (b0>>1)), where (b0>>1) is the top 7 bits of the first input byte.
It saves the remaining bit, (b0&1), for use in the renormalization procedure described in Section 4.1.2.1, which the decoder invokes immediately after initialization to read additional bits and establish the invariant that rng > 2  23.
Decoding Symbols Decoding a symbol is a two step process.
The first step determines a 16 bit unsigned value fs, which lies within the range of some symbol in the current context.
The second step updates the range decoder state with the three tuple (fl[k], fh[k], ft) corresponding to that symbol.
The first step is implemented by ec decode() (entdec.c), which computes val fs
The divisions here are integer division.
The decoder then identifies the symbol in the current context corresponding to fs; i.e., the value of k whose three tuple (fl[k], fh[k], ft) satisfies fl[k]
ft If fl[k] is greater than zero
, then the decoder updates rng using rng rng
ft Using a special case for the first symbol (rather than the last symbol, as is commonly done in other arithmetic coders) ensures that all the truncation error from the finite precision arithmetic accumulates in symbol 0.
This makes the cost of coding a 0 slightly smaller, on average, than its estimated probability indicates and makes the cost of coding any other symbol slightly larger.
When contexts are designed so that 0 is the most probable symbol, which is often the case, this strategy minimizes the inefficiency introduced by the finite precision.
It also makes some of the special case decoding routines in Section 4.1.3 particularly simple.
After the updates, implemented by ec dec update() (entdec.c), the decoder normalizes the range using the procedure in the next section, and returns the index k. 4.1.2.1.
To normalize the range, the decoder repeats the following process, implemented by ec dec normalize()
until rng > 2  23.
If rng is already greater than 2  23, the entire process is skipped.
First, it sets rng to (rng<<8).
Then, it reads the next byte of the Opus frame and forms an 8 bit value sym, using the leftover bit buffered from the previous byte as the high bit and the top 7 bits of the byte just read as the other 7 bits of sym.
The remaining bit in the byte just read is buffered for use in the next iteration.
If no more input bytes remain, it uses zero bits instead.
See Section 4.1.1 for the initialization used to process the first byte.
It is normal and expected that the range decoder will read several bytes into the data of the raw bits (if any) at the end of the frame by the time the frame is completely decoded, as illustrated in Figure 13.
This same data MUST also be returned as raw bits when requested.
The encoder is expected to terminate the stream in such a way that the range decoder will decode the intended values regardless of the data contained in the raw bits.
Section 5.1.5 describes a procedure for doing this.
If the range decoder consumes all of the bytes belonging to the current frame, it MUST continue to use zero when any further input bytes are required, even if there is additional data in the current packet from padding or other frames.
Illustrative Example of Raw Bits Overlapping Range Coder Data 4.1.3.
The reference implementation uses three additional decoding methods that are exactly equivalent to the above but make assumptions and simplifications that allow for a more efficient implementation.
The first is ec decode bin()
defined using the parameter ftb instead of ft.
It is mathematically equivalent to calling ec decode() with ft   (1<<ftb), but it avoids one of the divisions.
The next is ec dec bit logp() (entdec.c), which decodes a single binary symbol, replacing both the ec decode() and ec dec update() steps.
The context is described by a single parameter, logp, which is the absolute value of the base 2 logarithm of the probability of a "1".
It is mathematically equivalent to calling ec decode() with ft   (1<<logp), followed by ec dec update() with the 3 tuple (fl[k]   0, fh[k]
if the returned value of fs is less than (1<<logp)
1 (a "0" was decoded), and with (fl[k]
otherwise (a "1" was decoded).
The implementation requires no multiplications or divisions.
The last is ec dec icdf() (entdec.c), which decodes a single symbol with a table based context of up to 8 bits, also replacing both the ec decode() and ec dec update() steps, as well as the search for the decoded symbol in between.
The context is described by two parameters, an icdf ("inverse" cumulative distribution function) table and ftb.
fl[0] is assumed to be 0, and the table is terminated by a value of 0 (where fh[k]   ft).
The function is mathematically equivalent to calling ec decode() with ft   (1<<ftb), using the returned value fs to search the table for the first entry where fs < (1<<ftb) icdf[k], and calling ec dec update() with fl[k]
Combining the search with the update allows the division to be replaced by a series of multiplications (which are usually much cheaper), and using an inverse CDF allows the use of an ftb as large as 8 in an 8 bit table without any special cases.
This is the primary interface with the range decoder in the SILK layer, though it is used in a few places in the CELT layer as well.
Although icdf[k] is more convenient for the code, the frequency counts, f[k], are a more natural representation of the probability distribution function (PDF) for a given symbol.
Therefore, this document lists the latter, not the former, when describing the context in which a symbol is coded as a list, e.g., {4, 4, 4, 4}/16 for a uniform context with four possible values and ft   16.
The value of ft after the slash is always the sum of the entries in the PDF, but is included for convenience.
Contexts with identical probabilities, f[k]/ft, but different values of ft (or equivalently, ftb) are not the same, and cannot, in general, be used in place of one another.
An icdf table is also not capable of representing a PDF where the first symbol has 0 probability.
In such contexts, ec dec icdf() can decode the symbol by using a table that drops the entries for any initial zero probability values and by adding the constant offset of the first value with a non zero probability to its return value.
The raw bits used by the CELT layer are packed at the end of the frame, with the least significant bit of the first value packed in the least significant bit of the last byte, filling up to the most significant bit in the last byte, continuing on to the least significant bit of the penultimate byte, and so on.
The reference implementation reads them using ec dec bits()
Because the range decoder must read several bytes ahead in the stream, as described in Section 4.1.2.1, the input consumed by the raw bits may overlap with the input consumed by the range coder, and a decoder MUST allow this.
The format should render it impossible to attempt to read more raw bits than there are actual bits in the frame, though a decoder may wish to check for this and report an error.
The function ec dec uint() (entdec.c) decodes one of ft equiprobable values in the range 0 to (ft 1), inclusive, each with a frequency of 1, where ft may be as large as (2  32 1).
Because ec decode() is limited to a total frequency of (2  16 1), it splits up the value into a range coded symbol representing up to 8 of the high bits, and, if necessary, raw bits representing the remainder of the value.
The limit of 8 bits in the range coded symbol is a trade off between implementation complexity, modeling error (since the symbols no longer truly have equal coding cost), and rounding error introduced by the range coder itself (which gets larger as more bits are included).
Using raw bits reduces the maximum number of divisions required in the worst case, but means that it may be possible to decode a value outside the range 0 to (ft 1), inclusive.
ec dec uint() takes a single, positive parameter, ft, which is not necessarily a power of two, and returns an integer, t, whose value lies between 0 and (ft 1), inclusive.
Let ftb   ilog(ft 1), i.e., the number of bits required to store (ft 1) in two's complement notation.
If ftb is 8 or less, then t is decoded with t
the range coder state is updated using the three tuple (t,
If ftb is greater than 8, then the top 8 bits of t are decoded using t
1) the decoder state is updated using the three tuple (t, t   1, ((ft 1) >
the remaining bits are decoded as raw bits, setting t
If, at this point, t >  ft, then the current frame is corrupt.
In that case, the decoder should assume there has been an error in the coding, decoding, or transmission and SHOULD take measures to conceal the error (e.g., saturate to ft 1 or use the Packet Loss Concealment (PLC))
and/or report to the application that the error has occurred.
The bit allocation routines in the CELT decoder need a conservative upper bound on the number of bits that have been used from the current frame thus far, including both range coder bits and raw bits.
This drives allocation decisions that must match those made in the encoder.
The upper bound is computed in the reference implementation to whole bit precision by the function
(entcode.h) and to fractional 1/8th bit precision by the function ec tell frac() (entcode.c).
Like all operations in the range coder, it must be implemented in a bit exact manner, and it must produce exactly the same value returned by the same functions in the encoder after encoding the same symbols.
ec tell() is guaranteed to return ceil(ec tell frac()/8.0).
In various places, the codec will check to ensure there is enough room to contain a symbol before attempting to decode it.
In practice, although the number of bits used so far is an upper bound, decoding a symbol whose probability model suggests it has a worst case cost of p 1/8th bits may actually advance the return value of ec tell frac() by p 1, p, or p 1 1/8th bits, due to approximation error in that upper bound, truncation error in the range coder, and for large values of ft, modeling error in ec dec uint().
However, this error is bounded, and periodic calls to ec tell() or ec tell frac() at precisely defined points in the decoding process prevent it from accumulating.
For a range coder symbol that requires a whole number of bits (i.e., for which ft/(fh[k] fl[k]) is a power of two), where there are at least p 1/8th bits available, decoding the symbol will never cause ec tell() or ec tell frac() to exceed the size of the frame ("bust the budget").
In this case, the return value of ec tell frac() will only advance by more than p 1/8th bits if there were an additional, fractional number of bits remaining, and it will never advance beyond the next whole bit boundary, which is safe, since frames always contain a whole number of bits.
However, when p is not a whole number of bits, an extra 1/8th bit is required to ensure that decoding the symbol will not bust the budget.
The reference implementation keeps track of the total number of whole bits that have been processed by the decoder so far in the variable nbits total, including the (possibly fractional) number of bits that are currently buffered, but not consumed, inside the range coder.
nbits total is initialized to 9 just before the initial range renormalization process completes (or equivalently, it can be initialized to 33 after the first renormalization).
The extra two bits over the actual amount buffered by the range coder guarantees that it is an upper bound and that there is enough room for the encoder to terminate the stream.
Each iteration through the range coder's renormalization loop increases nbits total by 8.
Reading raw bits increases nbits total by the number of raw bits read.
The whole number of bits buffered in rng may be estimated via lg   ilog(rng).
ec tell() then becomes a simple matter of removing these bits from the total.
It returns (nbits total lg).
In a newly initialized decoder, before any symbols have been read, this reports that 1 bit has been used.
This is the bit reserved for termination of the encoder.
() ec tell frac() estimates the number of bits buffered in rng to fractional precision.
Since rng must be greater than 2  23 after renormalization, lg must be at least 24.
(lg 16) so that 32768 <  r Q15 < 65536, an unsigned Q15 value representing the fractional part of rng.
Then, the following procedure can be used to add one bit of precision to lg.
First, update r Q15   (r Q15 r Q15)
Then, add the 16th bit of r Q15 to lg via lg   2 lg
Finally, if this bit was a 1, reduce r Q15 by a factor of two via r Q15   r Q15
> 1 so that it once again lies in the range 32768 <  r Q15 < 65536.
This procedure is repeated three times to extend lg to 1/8th bit precision.
ec tell frac() then returns (nbits total 8 lg).
The decoder's LP layer uses a modified version of the SILK codec (herein simply called "SILK"), which runs a decoded excitation signal through adaptive long term and short term prediction synthesis filters.
It runs at NB, MB, and WB sample rates internally.
When used in a SWB or FB Hybrid frame, the LP layer itself still only runs in WB.
An overview of the decoder is given in Figure 14.
Pulses, LSBs, and signs 4:
Pitch lags, Long Term Prediction (LTP) coefficients 5: Linear Predictive Coding (LPC) coefficients and gains 6:
Decoded signal (mono or mid side stereo) 7:
Unmixed signal (mono or left right stereo)
The decoder feeds the bitstream (1) to the range decoder from Section 4.1 and then decodes the parameters in it (2) using the procedures detailed in Sections 4.2.3 through 4.2.7.8.5.
These parameters (3, 4, 5) are used to generate an excitation signal (see Section 4.2.7.8.6), which is fed to an optional Long Term Prediction (LTP) filter (voiced frames only, see Section 4.2.7.9.1)
and then a short term prediction filter (see Section 4.2.7.9.2), producing the decoded signal (6).
For stereo streams, the mid side representation is converted to separate left and right channels (7).
The result is finally resampled to the desired output sample rate (e.g., 48 kHz) so that the resampled signal (8) can be mixed with the CELT layer.
Internally, the LP layer of a single Opus frame is composed of either a single 10 ms regular SILK frame or between one and three 20 ms regular SILK frames.
A stereo Opus frame may double the number of regular SILK frames (up to a total of six), since it includes separate frames for a mid channel and, optionally, a side channel.
Optional Low Bit Rate Redundancy (LBRR) frames, which are reduced  bitrate encodings of previous SILK frames, may be included to aid in recovery from packet loss.
If present, these appear before the regular SILK frames.
They are, in most respects, identical to regular, active SILK frames, except that they are usually encoded with a lower bitrate.
This document uses "SILK frame" to refer to either one and "regular SILK frame" if it needs to draw a distinction between the two.
Logically, each SILK frame is, in turn, composed of either two or four 5 ms subframes.
Various parameters, such as the quantization gain of the excitation and the pitch lag and filter coefficients can vary on a subframe by subframe basis.
Physically, the parameters for each subframe are interleaved in the bitstream, as described in the relevant sections for each parameter.
All of these frames and subframes are decoded from the same range coder, with no padding between them.
Thus, packing multiple SILK frames in a single Opus frame saves, on average, half a byte per SILK frame.
It also allows some parameters to be predicted from prior SILK frames in the same Opus frame, since this does not degrade packet loss robustness (beyond any penalty for merely using fewer, larger packets to store multiple frames).
Stereo support in SILK uses a variant of mid side coding, allowing a mono decoder to simply decode the mid channel.
However, the data for the two channels is interleaved, so a mono decoder must still unpack the data for the side channel.
It would be required to do so anyway for Hybrid Opus frames or to support decoding individual 20 ms frames.
Table 3 summarizes the overall grouping of the contents of the LP layer.
Figures 15 and 16 illustrate the ordering of the various SILK frames for a 60 ms Opus frame, for both mono and stereo, respectively.
Side LBRR Frame 1 (Optional)
Mid LBRR Frame 3 (Optional)
Figure 16: A 60 ms Stereo Frame 4.2.3.
The LP layer begins with two to eight header bits, decoded in silk Decode() (dec API.c).
These consist of one Voice Activity Detection (VAD) bit per frame (up to 3), followed by a single flag indicating the presence of LBRR frames.
For a stereo packet, these first flags correspond to the mid channel, and a second set of flags is included for the side channel.
Because these are the first symbols decoded by the range coder and because they are coded as binary values with uniform probability, they can be extracted directly from the most significant bits of the first byte of compressed data.
Thus, a receiver can determine if an Opus frame contains any active SILK frames without the overhead of using the range decoder.
For Opus frames longer than 20 ms, a set of LBRR flags is decoded for each channel that has its LBRR flag set.
Each set contains one flag per 20 ms SILK frame.
40 ms Opus frames use the 2 frame LBRR flag PDF from Table 4, and 60 ms Opus frames use the 3 frame LBRR flag PDF.
For each channel, the resulting 2  or 3 bit integer contains the corresponding LBRR flag for each frame, packed in order from the LSB to the MSB.
A 10 or 20 ms Opus frame does not contain any per frame LBRR flags, as there may be at most one LBRR frame per channel.
The global LBRR flag in the header bits (see Section 4.2.3) is already sufficient to indicate the presence of that single LBRR frame.
The LBRR frames, if present, contain an encoded representation of the signal immediately prior to the current Opus frame as if it were encoded with the current mode, frame size, audio bandwidth, and channel count, even if those differ from the prior Opus frame.
When one of these parameters changes from one Opus frame to the next, this implies that the LBRR frames of the current Opus frame may not be simple drop in replacements for the contents of the previous Opus frame.
For example, when switching from 20 ms to 60 ms, the 60 ms Opus frame may contain LBRR frames covering up to three prior 20 ms Opus frames, even if those frames already contained LBRR frames covering some of the same time periods.
When switching from 20 ms to 10 ms, the 10 ms Opus frame can contain an LBRR frame covering at most half the prior 20 ms Opus frame, potentially leaving a hole that needs to be concealed from even a single packet loss (see Section 4.4).
When switching from mono to stereo, the LBRR frames in the first stereo Opus frame MAY contain a non trivial side channel.
In order to properly produce LBRR frames under all conditions, an encoder might need to buffer up to 60 ms of audio and re encode it during these transitions.
However, the reference implementation opts to disable LBRR frames at the transition point for simplicity.
Since transitions are relatively infrequent in normal usage, this does not have a significant impact on packet loss robustness.
The LBRR frames immediately follow the LBRR flags, prior to any regular SILK frames.
Section 4.2.7 describes their exact contents.
LBRR frames do not include their own separate VAD flags.
LBRR frames are only meant to be transmitted for active speech, thus all LBRR frames are treated as active.
In a stereo Opus frame longer than 20 ms, although the per frame LBRR flags for the mid channel are coded as a unit before the per frame LBRR flags for the side channel, the LBRR frames themselves are interleaved.
The decoder parses an LBRR frame for the mid channel of a given 20 ms interval (if present) and then immediately parses the corresponding LBRR frame for the side channel (if present), before proceeding to the next 20 ms interval.
The regular SILK frame(s) follow the LBRR frames (if any).
Section 4.2.7 describes their contents, as well.
Unlike the LBRR frames, a regular SILK frame is coded for each time interval in an Opus frame, even if the corresponding VAD flags are unset.
For stereo Opus frames longer than 20 ms, the regular mid and side SILK frames for each 20 ms interval are interleaved, just as with the LBRR frames.
The side frame may be skipped by coding an appropriate flag, as detailed in Section 4.2.7.2.
Each SILK frame includes a set of side information that encodes  The frame type and quantization type (Section 4.2.7.3),  Quantization gains (Section 4.2.7.4),  Short term prediction filter coefficients (Section 4.2.7.5),  A Line Spectral Frequencies (LSFs) interpolation weight (Section 4.2.7.5.5),  LTP filter lags and gains (Section 4.2.7.6), and  A Linear Congruential Generator (LCG) seed (Section 4.2.7.7).
The quantized excitation signal (see Section 4.2.7.8) follows these at the end of the frame.
Table 5 details the overall organization of a SILK frame.
Order of the Symbols in an Individual SILK Frame 4.2.7.1.
A SILK frame corresponding to the mid channel of a stereo Opus frame begins with a pair of side channel prediction weights, designed such that zeros indicate normal mid side coupling.
Since these weights can change on every frame, the first portion of each frame linearly interpolates between the previous weights and the current ones, using zeros for the previous weights if none are available.
These prediction weights are never included in a mono Opus frame, and the previous weights are reset to zeros on any transition from mono to stereo.
They are also not included in an LBRR frame for the side channel, even if the LBRR flags indicate the corresponding mid channel was not coded.
In that case, the previous weights are used, again substituting in zeros if no previous weights are available since the last decoder reset (see Section 4.5.2).
To summarize, these weights are coded if and only if  This is a stereo Opus frame (Section 3.1), and  The current SILK frame corresponds to the mid channel.
The prediction weights are coded in three separate pieces, which are decoded by silk stereo decode pred()
The first piece jointly codes the high order part of a table index for both weights.
The second piece codes the low order part of each table index.
The third piece codes an offset used to linearly interpolate between table indices.
The details are as follows.
Let n be an index decoded with the 25 element stage 1 PDF in Table 6.
Then, let i0 and i1 be indices decoded with the stage 2 and stage 3 PDFs in Table 6, respectively, and let i2 and i3 be two more indices decoded with the stage 2 and stage 3 PDFs, all in that order.
Then, use n, i0, and i2 to form two table indices, wi0 and wi1, according to wi0   i0
i2   3 (n%5) where the division is integer division.
The range of these indices is 0 to 14, inclusive.
Let w Q13[i] be the i'th weight from Table 7.
Then, the two prediction weights, w0 Q13 and w1 Q13, are w1 Q13
(((w Q13[wi1 1] w Q13[wi1]) 6554)
(((w Q13[wi0 1] w Q13[wi0]) 6554) >
(2 i1   1) w1 Q13 N.B.,
w1 Q13 is computed first here, because w0 Q13 depends on it.
The constant 6554 is approximately 0.1 in Q16.
Although wi0 and wi1 only have 15 possible values, Table 7 contains 16 entries to allow interpolation between entry wi0 and (wi0   1) (and likewise for wi1).
Mid Only Flag A flag appears after the stereo prediction weights that indicates if only the mid channel is coded for this time interval.
It appears only when  This is a stereo Opus frame (see Section 3.1),  The current SILK frame corresponds to the mid channel, and  Either
This is a regular SILK frame where the VAD flags (see Section 4.2.3)
indicate that the corresponding side channel is not active.
This is an LBRR frame where the LBRR flags (see Sections 4.2.3 and 4.2.4) indicate that the corresponding side channel is not coded.
It is omitted when there are no stereo weights, for all of the same reasons.
It is also omitted for a regular SILK frame when the VAD flag of the corresponding side channel frame is set (indicating it is active).
The side channel must be coded in this case, making the mid only flag redundant.
It is also omitted for an LBRR frame when the corresponding LBRR flags indicate the side channel is coded.
When the flag is present, the decoder reads a single value using the PDF in Table 8, as implemented in silk stereo decode mid only
If the flag is set, then there is no corresponding SILK frame for the side channel, the entire decoding process for the side channel is skipped, and zeros are fed to the stereo unmixing process (see Section 4.2.8) instead.
As stated above, LBRR frames still include this flag when the LBRR flag indicates that the side channel is not coded.
In that case, if this flag is zero (indicating that there should be a side channel), then Packet Loss Concealment (PLC, see Section 4.4) SHOULD be invoked to recover a side channel signal.
Otherwise, the stereo image will collapse.
Mid only Flag PDF 4.2.7.3.
Each SILK frame contains a single "frame type" symbol that jointly codes the signal type and quantization offset type of the corresponding frame.
If the current frame is a regular SILK frame whose VAD bit was not set (an "inactive" frame), then the frame type symbol takes on a value of either 0 or 1 and is decoded using the first PDF in Table 9.
If the frame is an LBRR frame or a regular SILK frame whose VAD flag was set (an "active" frame), then the value of the symbol may range from 2 to 5, inclusive, and is decoded using the second PDF in Table 9.
Table 10 translates between the value of the frame type symbol and the corresponding signal type and quantization offset type.
Signal Type and Quantization Offset Type from Frame Type 4.2.7.4.
Subframe Gains A separate quantization gain is coded for each 5 ms subframe.
These gains control the step size between quantization levels of the excitation signal and, therefore, the quality of the reconstruction.
They are independent of and unrelated to the pitch contours coded for voiced frames.
The quantization gains are themselves uniformly quantized to 6 bits on a log scale, giving them a resolution of approximately 1.369 dB and a range of approximately 1.94 dB to 88.21 dB.
The subframe gains are either coded independently, or relative to the gain from the most recent coded subframe in the same channel.
Independent coding is used if and only if  This is the first subframe in the current SILK frame, and  Either
This is the first SILK frame of its type (LBRR or regular) for this channel in the current Opus frame, or    The previous SILK frame of the same type (LBRR or regular) for this channel in the same Opus frame was not coded.
In an independently coded subframe gain, the 3 most significant bits of the quantization gain are decoded using a PDF selected from Table 11 based on the decoded signal type (see Section 4.2.7.3).
Independent Quantization Gain MSB Coding
PDF for Independent Quantization Gain LSB Coding
These 6 bits are combined to form a value, gain index, between 0 and 63.
When the gain for the previous subframe is available, then the current gain is limited as follows:
max(gain index, previous log gain 16)
This may help some implementations limit the change in precision of their internal LTP history.
The indices to which this clamp applies cannot simply be removed from the codebook, because previous log gain will not be available after packet loss.
The clamping is skipped after a decoder reset, and in the side channel if the previous frame in the side channel was not coded, since there is no value for previous log gain available.
It MAY also be skipped after packet loss.
For subframes that do not have an independent gain (including the first subframe of frames not listed as using independent coding above), the quantization gain is coded relative to the gain from the previous subframe (in the same channel).
The PDF in Table 13 yields a delta
gain index value between 0 and 40, inclusive.
PDF for Delta Quantization Gain Coding The following formula translates this index into a quantization gain for the current subframe using the gain from the previous subframe:
max(2 delta gain index 16,
previous log gain   delta gain index 4), 63) silk gains dequant()
dequantizes log gain for the k'th subframe and converts it into a linear Q16 scale factor via gain
Q16[k]   silk log2lin((0x1D1C71 log gain>>16)   2090)
(log2lin.c) computes an approximation of 2  (inLog Q7/128.0), where inLog Q7 is its Q7 input.
inLog Q7>>7 be the integer part of inLogQ7 and f   inLog Q7&127 be the fractional part.
(( 174 f (128 f)>>16) f)
((1<<i)>>7) yields the approximate exponential.
The final Q16 gain values lies between 81920 and 1686110208, inclusive (representing scale factors of 1.25 to 25728, respectively).
Normalized Line Spectral Frequency (LSF) and Linear Predictive Coding (LPC)
Coefficients A set of normalized Line Spectral Frequency (LSF) coefficients follow the quantization gains in the bitstream and represent the Linear Predictive Coding (LPC) coefficients for the current SILK frame.
Once decoded, the normalized LSFs form an increasing list of Q15 values between 0 and 1.
These represent the interleaved zeros on the upper half of the unit circle (between 0 and pi, hence "normalized") in the standard decomposition [SPECTRAL PAIRS] of the LPC filter into a symmetric part and an anti symmetric part (P and Q in Section 4.2.7.5.6).
Because of non linear effects in the decoding process, an implementation SHOULD match the fixed point arithmetic described in this section exactly.
An encoder SHOULD also use the same process.
The normalized LSFs are coded using a two stage vector quantizer (VQ) (Sections 4.2.7.5.1 and 4.2.7.5.2).
NB and MB frames use an order 10 predictor, while WB frames use an order 16 predictor.
Thus, each of these two cases uses a different set of tables.
After reconstructing the normalized LSFs (Section 4.2.7.5.3), the decoder runs them through a stabilization process (Section 4.2.7.5.4), interpolates them between frames (Section 4.2.7.5.5), converts them back into LPC coefficients (Section 4.2.7.5.6), and then runs them through further processes to limit the range of the coefficients (Section 4.2.7.5.7) and the gain of the filter (Section 4.2.7.5.8).
All of this is necessary to ensure the reconstruction process is stable.
The first VQ stage uses a 32 element codebook, coded with one of the PDFs in Table 14, depending on the audio bandwidth and the signal type of the current SILK frame.
This yields a single index, I1, for the entire frame, which 1.
Indexes an element in a coarse codebook, 2.
Selects the PDFs for the second stage of the VQ, and 3.
Selects the prediction weights used to remove intra frame redundancy from the second stage.
The actual codebook elements are listed in Tables 23 and 24, but they are not needed until the last stages of reconstructing the LSF coefficients.
PDFs for Normalized LSF Stage 1 Index Decoding 4.2.7.5.2.
Decoding A total of 16 PDFs are available for the LSF residual in the second stage: the 8 (a...h) for NB and MB frames given in Table 15, and the 8 (i...p) for WB frames given in Table 16.
Which PDF is used for which coefficient is driven by the index, I1, decoded in the first stage.
Table 17 lists the letter of the corresponding PDF for each normalized LSF coefficient for NB and MB, and Table 18 lists the same information for WB.
d d c c c
c h f f f f f g f
c f e g h g f g f
g h e g f f g
c f f g f g e g
f f d h e f f
c d e f f g e f f
e f f g g
e f e f g f g f
Codebook Selection for NB/MB Normalized LSF Stage 2 Index
i  j  i  j  j  j  j  j  j
j  j  j  j  j
WB Normalized LSF Stage 2 Index Decoding Decoding the second stage residual proceeds as follows.
For each coefficient, the decoder reads a symbol using the PDF corresponding to I1 from either Table 17 or Table 18, and subtracts 4 from the result to give an index in the range  4 to 4, inclusive.
If the index is either  4 or 4, it reads a second symbol using the PDF in Table 19, and adds the value of this second symbol to the index, using the same sign.
This gives the index, I2[k], a total range of  10 to 10, inclusive.
Normalized LSF Index Extension Decoding
The decoded indices from both stages are translated back into normalized LSF coefficients in silk NLSF decode() (NLSF decode.c).
The stage 2 indices represent residuals after both the first stage of the VQ and a separate backwards prediction step.
The backwards prediction process in the encoder subtracts a prediction from each residual formed by a multiple of the coefficient that follows it.
The decoder must undo this process.
Table 20 contains lists of prediction weights for each coefficient.
There are two lists for NB and MB, and another two lists for WB, giving two possible prediction weights for each coefficient.
The prediction is undone using the procedure implemented in silk NLSF residual dequant() (NLSF decode.c), which is as follows.
Each coefficient selects its prediction weight from one of the two lists based on the stage 1 index, I1.
Table 21 gives the selections for each coefficient for NB and MB, and Table 22 gives the selections for WB.
Let d LPC be the order of the codebook, i.e., 10 for NB and MB, and 16 for WB, and let pred Q8[k] be the weight for the k'th coefficient selected by this process for 0 <  k
102) qstep)>>16) , where qstep is the Q16 quantization step size, which is 11796 for NB and MB and 9830 for WB (representing step sizes of approximately 0.18 and 0.15, respectively).
B A A A A
B A A A A A A
A A A A A A
A A A A A
A A A A A
A B B B B B
A A B B A B
A A B B B
A A A B B B
A A A A B B B B
A A A A A A
A A A A A A
A A B A B B
A A A B B
C  C  C  C  C  C  C  C  C  C  D
C  C  C  C  C  C  C  C
C  C  C  C  D
C  C  C  C  C  C  C  C  C  C  C  C  D
C  C  C  C  C  C  C  C  C  C  C  C  C  C
C  C  C  C  C  D
C  C  C  C  C  C  C  C  C  C  C  C  C  C  D
C  C  C  C  C  C  C  C  C  C  C  C  C  C  D
C  C  C  C  C  C  C  C  C  C  D
Reconstructing the Normalized LSF Coefficients
Once the stage 1 index I1 and the stage 2 residual res Q10[] have been decoded, the final normalized LSF coefficients can be reconstructed.
The spectral distortion introduced by the quantization of each LSF coefficient varies, so the stage 2 residual is weighted accordingly, using the low complexity Inverse Harmonic Mean Weighting (IHMW) function proposed in [LAROIA ICASSP].
The weights are derived directly from the stage 1 codebook vector.
Let cb1 Q8[k] be the k'th entry of the stage 1 codebook vector from Table 23 or Table 24.
Then, for 0 <  k < d LPC, the following expression computes the square of the weight as a Q18 value:
where cb1 Q8[ 1]   0 and cb1 Q8[d LPC]   256, and the division is integer division.
This is reduced to an unsquared, Q9 value using the following square root approximation:
The constant 46214 here is approximately the square root of 2 in Q15.
The cb1 Q8[] vector completely determines these weights, and they may be tabulated and stored as 13 bit unsigned values (with a range of 1819 to 5227, inclusive) to avoid computing them when decoding.
The reference implementation already requires code to compute these weights on unquantized coefficients in the encoder, in silk NLSF VQ weights laroia() (NLSF VQ weights laroia.c) and its callers, so it reuses that code in the decoder instead of using a pre computed table to reduce the amount of ROM required.
114 137 162 184 209 230
120 147 172 200 223
53  80 106 130 156 180 205 228
100 120 145 168 190 214
120 151 170 203 227
65 106 124 150 171 196 224
116 143 166 192 219
118 145 167 194 217
117 146 168 196 222
114 155 177 205 229
129 158 178 200 231
154 170 188 208 227
NB/MB Normalized LSF Stage 1
116 131 147 162 178 193 208 223 239
127 142 157 171 187 203 220 236
136 152 167 185 205 225
157 173 189 205 221 237
107 123 134 150 164 184 205 224 240
10 15 32 51 67
118 131 148 167 185 203 219 236
154 171 186 204 220 237
123 137 156 169 185 199
89 105 121 135 152
169 186 202 218 234
92 106 123 134 152 167 185 204 222 237
107 115 132 151 171 188
171 189 205 222 237
87 105 118 132 150 167 185
174 190 204 220 235
91 108 121 138 154
172 189 205 222 238
107 123 138 154 171
167 185 203 220 237
103 117 126 138 149 163
90 106 119 133 147
WB Normalized LSF Stage 1 Codebook Vectors
Given the stage 1 codebook entry cb1 Q8[], the stage 2 residual res Q10[], and their corresponding weights, w Q9[], the reconstructed normalized LSF coefficients are NLSF
(res Q10[k]<<14)/w Q9[k], 32767) where the division is integer division.
However, nothing in either the reconstruction process or the quantization process in the encoder thus far guarantees that the coefficients are monotonically increasing and separated well enough to ensure a stable filter [KABAL86].
When using the reference encoder, roughly 2% of frames violate this constraint.
The next section describes a stabilization procedure used to make these guarantees.
The normalized LSF stabilization procedure is implemented in silk NLSF stabilize() (NLSF stabilize.c).
This process ensures that consecutive values of the normalized LSF coefficients, NLSF Q15[], are spaced some minimum distance apart (predetermined to be the 0.01 percentile of a large training set).
Table 25 gives the minimum spacings for NB and MB and those for WB, where row k is the minimum allowed value of NLSF Q15[k
For the purposes of computing this spacing for the first and last coefficient, NLSF Q15[ 1] is taken to be 0 and NLSF Q15[d LPC] is taken to be 32768.
The procedure starts off by trying to make small adjustments that attempt to minimize the amount of distortion introduced.
After 20 such adjustments, it falls back to a more direct method that guarantees the constraints are enforced but may require large adjustments.
Let NDeltaMin Q15[k] be the minimum required spacing for the current audio bandwidth from Table 25.
First, the procedure finds the index i where NLSF Q15[i]
NDeltaMin Q15[i] is the smallest, breaking ties by using the lower value of i.
If this value is non negative, then the stabilization stops; the coefficients satisfy all the constraints.
Otherwise, if i   0, it sets NLSF Q15[0] to NDeltaMin Q15[0], and if i   d LPC, it sets NLSF Q15[d LPC 1] to (32768 NDeltaMin Q15[d LPC]).
For all other values of i, both NLSF Q15[i 1] and NLSF Q15[i] are updated as follows: i 1   min center Q15
/  k i 1 center freq
NLSF Q15[i 1]   center freq Q15
Then, the procedure repeats again, until it has either executed 20 times or stopped because the coefficients satisfy all the constraints.
After the 20th repetition of the above procedure, the following fallback procedure executes once.
First, the values of NLSF Q15[k] for 0 <  k
< d LPC are sorted in ascending order.
Then, for each value of k from 0 to d LPC 1, NLSF Q15[k] is set to max(NLSF Q15[k]
, NLSF Q15[k 1]   NDeltaMin
Next, for each value of k from d LPC 1 down to 0, NLSF Q15[k] is set to min(NLSF Q15[k], NLSF Q15[k 1]
There is no need to check if the coefficients satisfy all the constraints before applying this fallback procedure.
If they do, then it will not change their values.
For 20 ms SILK frames, the first half of the frame (i.e., the first two subframes) may use normalized LSF coefficients that are interpolated between the decoded LSFs for the most recent coded frame (in the same channel) and the current frame.
A Q2 interpolation factor follows the LSF coefficient indices in the bitstream, which is decoded using the PDF in Table 26.
This happens in silk decode indices() (decode indices.c).
After either  An uncoded regular SILK frame in the side channel, or  A decoder reset (see Section 4.5.2), the decoder still decodes this factor, but ignores its value and always uses 4 instead.
For 10 ms SILK frames, this factor is not stored at all.
PDF for Normalized LSF Interpolation Index Let n2 Q15[k] be the normalized LSF coefficients decoded by the procedure in Section 4.2.7.5, n0
Q15[k] be the LSF coefficients decoded for the prior frame, and w Q2 be the interpolation factor.
Then, the normalized LSF coefficients used for the first half of a 20 ms frame, n1 Q15[k], are n1 Q15[k]
(w Q2 (n2 Q15[k] n0 Q15[k])
This interpolation is performed in silk decode parameters() (decode parameters.c).
Converting Normalized LSFs to LPC Coefficients
Any LPC filter A(z) can be split into a symmetric part P(z) and an anti symmetric part Q(z) such that d LPC
The even normalized LSF coefficients correspond to a pair of conjugate roots of P(z), while the odd coefficients correspond to a pair of conjugate roots of Q(z), all of which lie on the unit circle.
In addition, P(z) has a root at pi and Q(z) has a root at 0.
z    z  ) k 0
However, SILK performs this reconstruction using a fixed point approximation so that all decoders can reproduce it in a bit exact manner to avoid prediction drift.
To start, it approximates cos(pi n[k]) using a table lookup with linear interpolation.
The encoder SHOULD use the inverse of this piecewise linear approximation, rather than the true inverse of the cosine function, when deriving the normalized LSF coefficients.
These values are also re ordered to improve numerical accuracy when constructing the LPC polynomials.
LSF Ordering for Polynomial Evaluation
The top 7 bits of each normalized LSF coefficient index a value in the table, and the next 8 bits interpolate between it and the next value.
> 8) be the integer index and f   (n[k] & 255) be the fractional part of a given coefficient.
Then, the re ordered, approximated cosine, c Q17[ordering[k]], is c Q17[ordering[k]]
3 where ordering[k] is the k'th entry of the column of Table
27 corresponding to the current audio bandwidth and cos Q12[i] is the i'th entry of Table 28.
Q12 Cosine Table for LSF Conversion
Given the list of cosine values, silk NLSF2A find poly()
(NLSF2A.c) computes the coefficients of P and Q, described here via a simple recurrence.
Let p Q16[k][j] and q Q16[k][j] be the coefficients of the products of the first (k 1) root pairs for P and Q, with j indexing the coefficient number.
Only the first (k 2) coefficients are needed, as the products are symmetric.
As boundary conditions, assume p Q16[k][j]
q Q16[k][j]   0 for all j < 0.
Also, assume p Q16[k][k 2]
p Q16[k][k] and q Q16[k][k 2]
Then, for 0 < k < d2 and 0 <  j
<  k 1, p Q16[k][j]
The use of Q17 values for the cosine terms in an otherwise Q16 expression implicitly scales them by a factor of 2.
The multiplications in this recurrence may require up to 48 bits of precision in the result to avoid overflow.
In practice, each row of the recurrence only depends on the previous row, so an implementation does not need to store all of them.
silk NLSF2A() uses the values from the last row of this recurrence to reconstruct a 32 bit version of the LPC filter (without the leading 1.0 coefficient),
a32 Q17[k], 0 <  k < d2: a32
(p Q16[d2 1][k 1]   p Q16[d2 1][k]))
(p Q16[d2 1][k 1]   p Q16[d2 1][k]))
The sum and difference of two terms from each of the p Q16 and q Q16 coefficient lists reflect the (1
and (1 z   1) factors of P and Q, respectively.
The promotion of the expression from Q16 to Q17 implicitly scales the result by 1/2.
Limiting the Range of the LPC Coefficients
The a32 Q17[] coefficients are too large to fit in a 16 bit value, which significantly increases the cost of applying this filter in fixed point decoders.
Reducing them to Q12 precision doesn't incur any significant quality loss, but still does not guarantee they will fit.
() applies up to 10 rounds of bandwidth expansion to limit the dynamic range of these coefficients.
Even floating point decoders SHOULD perform these steps, to avoid mismatch.
For each round, the process first finds the index k such that abs(a32 Q17[k]) is largest, breaking ties by choosing the lowest value of k.
Then, it computes the corresponding Q12 precision value, maxabs Q12, subject to an upper bound to avoid overflow in subsequent computations:
> 2 where the division here is integer division.
This is an approximation of the chirp factor needed to reduce the target coefficient to 32767, though it is both less than 0.999
and, for k > 0 when maxabs Q12 is much greater than 32767, still slightly too large.
The upper bound on maxabs Q12, 163838, was chosen because it is equal to ((2  31 1) >
32767, i.e., the largest value of maxabs Q12 that would not overflow the numerator in the equation above when stored in a signed 32 bit integer.
silk bwexpander 32() (bwexpander 32.c) performs the bandwidth expansion (again, only when maxabs Q12 is greater than 32767) using the following recurrence:
The first multiply may require up to 48 bits of precision in the result to avoid overflow.
The second multiply must be unsigned to avoid overflow with only 32 bits of precision.
The reference implementation uses a slightly more complex formulation that avoids the 32 bit overflow using signed multiplication, but is otherwise equivalent.
After 10 rounds of bandwidth expansion are performed, they are simply saturated to 16 bits: a32
clamp( 32768, (a32 Q17[k]   16) >
Because this performs the actual saturation in the Q12 domain, but converts the coefficients back to the Q17 domain for the purposes of prediction gain limiting, this step must be performed after the 10th round of bandwidth expansion, regardless of whether or not the Q12 version of any coefficient still overflows a 16 bit integer.
This saturation is not performed if maxabs Q12 drops to 32767 or less prior to the 10th round.
Limiting the Prediction Gain of the LPC Filter
The prediction gain of an LPC synthesis filter is the square root of the output energy when the filter is excited by a unit energy impulse.
Even if the Q12 coefficients would fit, the resulting filter may still have a significant gain (especially for voiced sounds), making the filter unstable.
() applies up to 16 additional rounds of bandwidth expansion to limit the prediction gain.
Instead of controlling the amount of bandwidth expansion using the prediction gain itself (which may diverge to infinity for an unstable filter), silk NLSF2A() uses silk LPC inverse pred gain QA()
(LPC inv pred gain.c) to compute the reflection coefficients associated with the filter.
The filter is stable if and only if the magnitude of these coefficients is sufficiently less than one.
The reflection coefficients, rc[k], can be computed using a simple Levinson recurrence, initialized with the LPC coefficients a[d LPC  1][n]   a[n], and then updated via rc[k]
However, silk LPC inverse pred gain QA() approximates this using fixed point arithmetic to guarantee reproducible results across platforms and implementations.
Since small changes in the coefficients can make a stable filter unstable, it takes the real Q12 coefficients that will be used during reconstruction as input.
> 5 be the Q12 version of the LPC coefficients that will eventually be used.
As a simple initial check, the decoder computes the DC response as d
and if DC resp > 4096, the filter is unstable.
Increasing the precision of these Q12 coefficients to Q24 for intermediate computations allows more accurate computation of the reflection coefficients, so the decoder initializes the recurrence via inv gain Q30[d LPC]   1 << 30 a32
Then, for each k from d LPC 1 down to 0, if abs(a32 Q24[k][k])
> 16773022, the filter is unstable and the recurrence stops.
The constant 16773022 here is approximately 0.99975 in Q24.
> 32) inv gain Q30[k]
if inv gain Q30[k] < 107374, the filter is unstable and the recurrence stops.
The constant 107374 here is approximately 1/10000 in Q30.
If neither of these checks determine that the filter is unstable and k > 0, row k 1 of a32 Q24 is computed from row k as b1[k]   ilog(div
(err Q29[k] inv Qb2[k] >
num Q24[k 1][n]   a32 Q24[k][n]
> 31) a32 Q24[k 1][n]
where 0 <  n < k.
In the above, rc Q31[k] are the reflection coefficients.
div Q30[k] is the denominator for each iteration, and gain Qb1[k]
is its multiplicative inverse (with b1[k] fractional bits, where b1[k] ranges from 20 to 31).
inv Qb2[k], which ranges from 16384 to 32767, is a low precision version of that inverse (with b2[k] fractional bits).
err Q29[k] is the residual error, ranging from  32763 to 32392, which is used to improve the accuracy.
The values t Q24[k 1][n] for each n are the numerators for the next row of coefficients in the recursion, and a32 Q24[k 1][n] is the final version of that row.
Every multiply in this procedure except the one used to compute gain Qb1[k] requires more than 32 bits of precision, but otherwise all intermediate results fit in 32 bits or less.
In practice, because each row only depends on the next one, an implementation does not need to store them all.
< d LPC, then the filter is considered stable.
However, the problem of determining stability is ill conditioned when the filter contains several reflection coefficients whose magnitude is very close to one.
This fixed point algorithm is not mathematically guaranteed to correctly classify filters as stable or unstable in this case, though it does very well in practice.
On round i, 0 <  i < 16, if the filter passes these stability checks, then this procedure stops, and the final LPC coefficients to use for reconstruction in Section 4.2.7.9.2 are a Q12[k]
Otherwise, a round of bandwidth expansion is applied using the same procedure as in Section 4.2.7.5.7, with sc Q16[0]
During round 15, sc Q16[0] becomes 0 in the above equation, so a Q12[k] is set to 0 for all k, guaranteeing a stable filter.
Long Term Prediction (LTP) Parameters After the normalized LSF indices and, for 20 ms frames, the LSF interpolation index, voiced frames (see Section 4.2.7.3) include additional LTP parameters.
There is one primary lag index for each SILK frame, but this is refined to produce a separate lag index per subframe using a vector quantizer.
Each subframe also gets its own prediction gain coefficient.
The primary lag index is coded either relative to the primary lag of the prior frame in the same channel or as an absolute index.
Absolute coding is used if and only if  This is the first SILK frame of its type (LBRR or regular) for this channel in the current Opus frame,  The previous SILK frame of the same type (LBRR or regular) for this channel in the same Opus frame was not coded, or  That previous SILK frame was coded, but was not voiced (see Section 4.2.7.3).
With absolute coding, the primary pitch lag may range from 2 ms (inclusive) up to 18 ms (exclusive), corresponding to pitches from 500 Hz down to 55.6 Hz, respectively.
It is comprised of a high part and a low part, where the decoder first reads the high part using the 32 entry codebook in Table 29 and then the low part using the codebook corresponding to the current audio bandwidth from Table 30.
The final primary pitch lag is then lag   lag high lag scale   lag low   lag min where lag high is the high part, lag low is the low part, and lag scale and lag min are the values from the "Scale" and "Minimum Lag" columns of Table 30, respectively.
PDF for High Part of Primary Pitch Lag
All frames that do not use absolute coding for the primary lag index use relative coding instead.
The decoder reads a single delta value using the 21 entry PDF in Table 31.
If the resulting value is zero, it falls back to the absolute coding procedure from the prior paragraph.
Otherwise, the final primary pitch lag is then lag   previous lag   (delta lag index 9) where previous lag is the primary pitch lag from the most recent frame in the same channel and delta lag index is the value just decoded.
This allows a per frame change in the pitch lag of  8 to  11 samples.
The decoder does no clamping at this point, so this value can fall outside the range of 2 ms to 18 ms, and the decoder must use this unclamped value when using relative coding in the next SILK frame (if any).
However, because an Opus frame can use relative coding for at most two consecutive SILK frames, integer overflow should not be an issue.
After the primary pitch lag, a "pitch contour", stored as a single entry from one of four small VQ codebooks, gives lag offsets for each subframe in the current SILK frame.
The codebook index is decoded using one of the PDFs in Table 32 depending on the current frame size and audio bandwidth.
Tables 33 through 36 give the corresponding offsets to apply to the primary pitch lag for each subframe given the decoded codebook index.
Codebook Vectors for Subframe Pitch
Codebook Vectors for Subframe Pitch
Codebook Vectors for Subframe Pitch Contour: MB or WB, 10
Codebook Vectors for Subframe Pitch Contour: MB or WB, 20 ms Frames
The final pitch lag for each subframe is assembled in silk decode pitch()
Let lag be the primary pitch lag for the current SILK frame, contour index be index of the VQ codebook, and lag
cb[contour index][k] be the corresponding entry of the codebook from the appropriate table given above for the k'th subframe.
Then the final pitch lag for that subframe is pitch lags[k]   clamp(lag
cb[contour index][k], lag max) where lag min and lag max are the values from the "Minimum Lag" and "Maximum Lag" columns of Table 30, respectively.
LTP Filter Coefficients SILK uses a separate 5 tap pitch filter for each subframe, selected from one of three codebooks.
The three codebooks each represent different rate distortion trade offs, with average rates of 1.61 bits/subframe, 3.68 bits/subframe, and 4.85 bits/subframe, respectively.
The importance of the filter coefficients generally depends on two factors: the periodicity of the signal and relative energy between the current subframe and the signal from one period earlier.
Greater periodicity and decaying energy both lead to more important filter coefficients.
Thus, they should be coded with lower distortion and higher rate.
These properties are relatively stable over the duration of a single SILK frame.
Hence, all of the subframes in a SILK frame choose their filter from the same codebook.
This is signaled with an explicitly coded "periodicity index".
This immediately follows the subframe pitch lags, and is coded using the 3 entry PDF from Table 37.
The indices of the filters for each subframe follow.
They are all coded using the PDF from Table 38 corresponding to the periodicity index.
Tables 39 through 41 contain the corresponding filter taps as signed Q7 integers.
Codebook Vectors for LTP Filter, Periodicity Index 2 4.2.7.6.3.
An LTP scaling parameter appears after the LTP filter coefficients if and only if  This is a voiced frame (see Section 4.2.7.3), and  Either
This SILK frame corresponds to the first time interval of the current Opus frame for its type (LBRR or regular), or
This is an LBRR frame where the LBRR flags (see Section 4.2.4)
indicate the previous LBRR frame in the same channel is not coded.
This allows the encoder to trade off the prediction gain between packets against the recovery time after packet loss.
Unlike absolute coding for pitch lags, regular SILK frames that are not at the start of an Opus frame (i.e., that do not correspond to the first 20 ms time interval in Opus frames of 40 or 60 ms)
do not include this field, even if the prior frame was not voiced, or (in the case of the side channel) not even coded.
After an uncoded frame in the side channel, the LTP buffer (see Section 4.2.7.9.1) is cleared to zero, and is thus in a known state.
In contrast, LBRR frames do include this field when the prior frame was not coded, since the LTP buffer contains the output of the PLC, which is non normative.
If present, the decoder reads a value using the 3 entry PDF in Table 42.
The three possible values represent Q14 scale factors of 15565, 12288, and 8192, respectively (corresponding to approximately 0.95, 0.75, and 0.5).
Frames that do not code the scaling parameter use the default factor of 15565 (approximately 0.95).
Linear Congruential Generator (LCG) Seed
As described in Section 4.2.7.8.6, SILK uses a Linear Congruential Generator (LCG) to inject pseudorandom noise into the quantized excitation.
To ensure synchronization of this process between the encoder and decoder, each SILK frame stores a 2 bit seed after the LTP parameters (if any).
The encoder may consider the choice of seed during quantization, and the flexibility of this choice lets it reduce distortion, helping to pay for the bit cost required to signal it.
The decoder reads the seed using the uniform 4 entry PDF in Table 43, yielding a value between 0 and 3, inclusive.
Excitation SILK codes the excitation using a modified version of the Pyramid Vector Quantizer (PVQ) codebook [PVQ].
The PVQ codebook is designed for Laplace distributed values and consists of all sums of K signed, unit pulses in a vector of dimension N, where two pulses at the same position are required to have the same sign.
Thus, the codebook includes all integer codevectors y of dimension
N that satisfy N 1
Unlike regular PVQ, SILK uses a variable length, rather than fixed  length, encoding.
This encoding is better suited to the more Gaussian like distribution of the coefficient magnitudes and the non  uniform distribution of their signs (caused by the quantization offset described below).
SILK also handles large codebooks by coding the least significant bits (LSBs) of each coefficient directly.
This adds a small coding efficiency loss, but greatly reduces the computation time and ROM size required for decoding, as implemented in silk decode pulses() (decode pulses.c).
SILK fixes the dimension of the codebook to N   16.
The excitation is made up of a number of "shell blocks", each 16 samples in size.
Table 44 lists the number of shell blocks required for a SILK frame for each possible audio bandwidth and frame size.
10 ms MB frames nominally contain 120 samples (10 ms at 12 kHz), which is not a multiple of 16.
This is handled by coding 8 shell blocks (128 samples) and discarding the final 8 samples of the last block.
The decoder contains no special case that prevents an encoder from placing pulses in these samples, and they must be correctly parsed from the bitstream if present, but they are otherwise ignored.
The first symbol in the excitation is a "rate level", which is an index from 0 to 8, inclusive, coded using the PDF in Table 45 corresponding to the signal type of the current frame (from Section 4.2.7.3).
the PDF used to decode the number of pulses in the individual shell blocks.
It does not directly convey any information about the bitrate or the number of pulses itself, but merely changes the probability of the symbols in Section 4.2.7.8.2.
Level 0 provides a more efficient encoding at low rates generally, and level 8 provides a more efficient encoding at high rates generally, though the most efficient level for a particular SILK frame may depend on the exact distribution of the coded symbols.
An encoder should, but is not required to, use the most efficient rate level.
The total number of pulses in each of the shell blocks follows the rate level.
The pulse counts for all of the shell blocks are coded consecutively, before the content of any of the blocks.
Each block may have anywhere from 0 to 16 pulses, inclusive, coded using the 18  entry PDF in Table 46 corresponding to the rate level from Section 4.2.7.8.1.
The special value 17 indicates that this block has one or more additional LSBs to decode for each coefficient.
If the decoder encounters this value, it decodes another value for the actual pulse count of the block, but uses the PDF corresponding to the special rate level 9 instead of the normal rate level.
This process repeats until the decoder reads a value less than 17, and it then sets the number of extra LSBs used to the number of 17's decoded for that block.
If it reads the value 17 ten times, then the next iteration uses the special rate level 10 instead of 9.
The probability of decoding a 17 when using the PDF for rate level 10 is zero, ensuring that the number of LSBs for a block will not exceed 10.
The cumulative distribution for rate level 10 is just a shifted version of that for 9 and thus does not require any additional storage.
The locations of the pulses in each shell block follow the pulse counts, as decoded by silk shell decoder()
As with the pulse counts, these locations are coded for all the shell blocks before any of the remaining information for each block.
Unlike many other codecs, SILK places no restriction on the distribution of pulses within a shell block.
All of the pulses may be placed in a single location, or each one in a unique location, or anything in between.
The location of pulses is coded by recursively partitioning each block into halves, and coding how many pulses fall on the left side of the split.
All remaining pulses must fall on the right side of the split.
The process then recurses into the left half, and after that returns, the right half (preorder traversal).
The PDF to use is chosen by the size of the current partition (16, 8, 4, or 2) and the number of pulses in the partition (1 to 16, inclusive).
Tables 47 through 50 list the PDFs used for each partition size and pulse count.
This process skips partitions without any pulses, i.e., where the initial pulse count from Section 4.2.7.8.2 was zero, or where the split in the prior level indicated that all of the pulses fell on the other side.
These partitions have nothing to code, so they require no PDF.
{7, 36, 84, 87, 36, 6}/256
LSB Decoding After the decoder reads the pulse locations for all blocks, it reads the LSBs (if any) for each block in turn.
Inside each block, it reads all the LSBs for each coefficient in turn, even those where no pulses were allocated, before proceeding to the next one.
For 10 ms MB frames, it reads LSBs even for the extra 8 samples in the last block.
The LSBs are coded from most significant to least significant, and they all use the PDF in Table 51.
The number of LSBs read for each coefficient in a block is determined in Section 4.2.7.8.2.
The magnitude of the coefficient is initially equal to the number of pulses placed at that location in Section 4.2.7.8.3.
As each LSB is decoded, the magnitude is doubled, and then the value of the LSB added to it, to obtain an updated magnitude.
After decoding the pulse locations and the LSBs, the decoder knows the magnitude of each coefficient in the excitation.
It then decodes a sign for all coefficients with a non zero magnitude, using one of the PDFs from Table 52.
If the value decoded is 0, then the coefficient magnitude is negated.
The decoder chooses the PDF for the sign based on the signal type and quantization offset type (from Section 4.2.7.3) and the number of pulses in the block (from Section 4.2.7.8.2).
The number of pulses in the block does not take into account any LSBs.
Most PDFs are skewed towards negative signs because of the quantization offset, but the PDFs for zero pulses are highly skewed towards positive signs.
If a block contains many positive coefficients, it is sometimes beneficial to code it solely using LSBs (i.e., with zero pulses), since the encoder may be able to save enough bits on the signs to justify the less efficient coefficient magnitude encoding.
After the signs have been read, there is enough information to reconstruct the complete excitation signal.
This requires adding a constant quantization offset to each non zero sample and then pseudorandomly inverting and offsetting every sample.
The constant quantization offset varies depending on the signal type and quantization offset type (see Section 4.2.7.3).
Excitation Quantization Offsets Let e raw[i] be the raw excitation value at position
i, with a magnitude composed of the pulses at that location (see Section 4.2.7.8.3) combined with any additional LSBs (see Section 4.2.7.8.4), and with the corresponding sign decoded in Section 4.2.7.8.5.
Additionally, let seed be the current pseudorandom seed, which is initialized to the value decoded from Section 4.2.7.7 for the first sample in the current SILK frame, and updated for each subsequent sample according to the procedure below.
Finally, let offset Q23 be the quantization offset from Table 53.
Then the following procedure produces the final reconstructed excitation value, e Q23[i]:
20   offset Q23; seed   (196314165 seed   907633515) & 0xFFFFFFFF;
When e raw[i] is zero, sign() returns 0 by the definition in Section 1.1.4, so the factor of 20 does not get added.
The final e Q23[i] value may require more than 16 bits per sample, but it will not require more than 23, including the sign.
The remainder of the reconstruction process for the frame does not need to be bit exact, as small errors should only introduce proportionally small distortions.
Although the reference implementation only includes a fixed point version of the remaining steps, this section describes them in terms of a floating point version for simplicity.
This produces a signal with a nominal range of  1.0 to 1.0.
(decode core.c) contains the code for the main reconstruction process.
It proceeds subframe by subframe, since quantization gains, LTP parameters, and (in 20 ms SILK frames) LPC coefficients can vary from one to the next.
Let a Q12[k] be the LPC coefficients for the current subframe.
If this is the first or second subframe of a 20 ms SILK frame and the LSF interpolation factor, w Q2 (see Section 4.2.7.5.5), is less than 4, then these correspond to the final LPC coefficients produced by Section 4.2.7.5.8 from the interpolated LSF coefficients, n1 Q15[k] (computed in Section 4.2.7.5.5).
Otherwise, they correspond to the final LPC coefficients produced from the uninterpolated LSF coefficients for the current frame, n2 Q15[k].
Also, let n be the number of samples in a subframe (40 for NB, 60 for MB, and 80 for WB), s be the index of the current subframe in this SILK frame (0 or 1 for 10 ms frames, or 0 to 3 for 20 ms frames), and j be the index of the first sample in the residual corresponding to the current subframe.
LTP Synthesis For unvoiced frames
(see Section 4.2.7.3), the LPC residual for i such that j
<  i < (j   n) is simply a normalized copy of the excitation signal
The LTP filter requires LPC residual values from before the current subframe as input.
However, since the LPC coefficients may have changed, it obtains this residual by "rewhitening" the corresponding output signal using the LPC coefficients from the current subframe.
Let out[i] for i such that (j pitch lags[s]
i < j be the fully reconstructed output signal from the last (pitch lags[s]
LPC   2) samples of previous subframes (see Section 4.2.7.9.2), where pitch lags[s] is the pitch lag for the current subframe from Section 4.2.7.6.1.
Additionally, let lpc[i] for i such that (j s n d LPC)
i < j be the fully reconstructed output signal from the last (s n   d LPC) samples of previous subframes before clamping (see Section 4.2.7.9.2).
During reconstruction of the first subframe for this channel after either  An uncoded regular SILK frame (if this is the side channel), or  A decoder reset (see Section 4.5.2), out[i] and lpc[i] are initially cleared to all zeros.
If this is the third or fourth subframe of a 20 ms SILK frame and the LSF interpolation factor, w Q2 (see Section 4.2.7.5.5), is less than 4, then let out end be set to (j (s 2) n) and let LTP scale Q14 be set to 16384.
Otherwise, set out end to (j s n) and set LTP scale Q14 to the Q14 LTP scaling value from Section 4.2.7.6.3.
Then, for i such that (j pitch lags[s] 2) <
This requires storage to buffer up to 306 values of out[i] from previous subframes.
This corresponds to WB with a maximum pitch lag of 18
16 kHz samples, plus 16 samples for d LPC, plus 2 samples for the width of the LTP filter.
Then, for i such that out end
This requires storage to buffer up to 256 values of lpc[i] from previous subframes (240 from the current SILK frame and 16 from the previous SILK frame).
This corresponds to WB with up to three previous subframes in the current SILK frame, plus 16 samples for d LPC.
The astute reader will notice that, given the definition of lpc[i] in Section 4.2.7.9.2, the output of this latter equation is merely a scaled version of the values of res[i] from previous subframes.
(j   n) be the excitation for the current subframe, and b Q7[k] for 0 <  k < 5 be the coefficients of the LTP filter taken from the codebook entry in one of Tables 39 through 41 corresponding to the index decoded for the current subframe in Section 4.2.7.6.2.
Then for i such that j
<  i < (j   n), the LPC residual is 4 e
LPC Synthesis LPC synthesis uses the short term LPC filter to predict the next output coefficient.
For i such that (j d LPC)
i < j, let lpc[i] be the result of LPC synthesis from the last d LPC samples of the previous subframe or zeros in the first subframe for this channel after either  An uncoded regular SILK frame (if this is the side channel), or  A decoder reset (see Section 4.5.2).
Then, for i such that j
<  i < (j   n), the result of LPC synthesis for the current subframe is
The decoder saves the final d LPC values, i.e., lpc[i]
such that (j   n d LPC)
i < (j   n), to feed into the LPC synthesis of the next subframe.
This requires storage for up to 16 values of lpc[i]
Then, the signal is clamped into the final nominal range: out[i]   clamp( 1.0, lpc[i], 1.0)
This clamping occurs entirely after the LPC synthesis filter has run.
The decoder saves the unclamped values, lpc[i], to feed into the LPC filter for the next subframe, but saves the clamped values, out[i], for rewhitening in voiced frames.
Stereo Unmixing For stereo streams, after decoding a frame from each channel, the decoder must convert the mid side (MS) representation into a left  right (LR) representation.
The function silk stereo MS to LR (stereo MS to LR.c)
In it, the decoder predicts the side channel using a) a simple low passed version of the mid channel, and b) the unfiltered mid channel, using the prediction weights decoded in Section 4.2.7.1.
This simple low pass filter imposes a one sample delay, and the unfiltered mid channel is also delayed by one sample.
In order to allow seamless switching between stereo and mono, mono streams must also impose the same one sample delay.
The encoder requires an additional one sample delay for both mono and stereo streams, though an encoder may omit the delay for mono if it knows it will never switch to stereo.
The unmixing process operates in two phases.
The first phase lasts for 8 ms, during which it interpolates the prediction weights from the previous frame, prev w0 Q13 and prev w1 Q13, to the values for the current frame, w0 Q13 and w1 Q13.
The second phase simply uses these weights for the remainder of the frame.
Let mid[i] and side[i] be the contents of out[i] (from Section 4.2.7.9.2) for the current mid and side channels, respectively, and let left[i] and right[i] be the corresponding stereo output channels.
If the side channel is not coded (see Section 4.2.7.2), then side[i] is set to zero.
Also, let j be defined as in Section 4.2.7.9, n1 be the number of samples in phase 1 (64 for NB, 96 for MB, and 128 for WB), and n2 be the total number of samples in the frame.
Then, for i such that j
<  i < (j   n2), the left and right channel output is prev w0 Q13
(w0 Q13 prev w0 Q13)
(w1 Q13 prev w1 Q13)
w0 p0, 1.0) right[i]   clamp( 1.0, (1 w1) mid[i 1] side[i
These formulas require two samples prior to index j, the start of the frame, for the mid channel, and one prior sample for the side channel.
For the first frame after a decoder reset, zeros are used instead.
Resampling After stereo unmixing (if any), the decoder applies resampling to convert the decoded SILK output to the sample rate desired by the application.
This is necessary when decoding a Hybrid frame at SWB or FB sample rates, or whenever the decoder wants the output at a different sample rate than the internal SILK sampling rate (e.g., to allow a constant sample rate when the audio bandwidth changes, or to allow mixing with audio from other applications).
The resampler itself is non normative, and a decoder can use any method it wants to perform the resampling.
However, a minimum amount of delay is imposed to allow the resampler to operate, and this delay is normative, so that the corresponding delay can be applied to the MDCT layer in the encoder.
A decoder is always free to use a resampler that requires more delay than allowed for here (e.g., to improve quality), but it must then delay the output of the MDCT layer by this extra amount.
Keeping as much delay as possible on the encoder side allows an encoder that knows it will never use any of the SILK or Hybrid modes to skip this delay.
By contrast, if it were all applied by the decoder, then a decoder that processes audio in fixed size blocks would be forced to delay the output of CELT frames just in case of a later switch to a SILK or Hybrid mode.
Table 54 gives the maximum resampler delay in samples at 48 kHz for each SILK audio bandwidth.
Because the actual output rate may not be 48 kHz, it may not be possible to achieve exactly these delays while using a whole number of input or output samples.
The reference implementation is able to resample to any of the supported output sampling rates (8, 12, 16, 24, or 48 kHz) within or near this delay constraint.
Some resampling filters (including those used by the reference implementation) may add a delay that is not an exact integer, or is not linear phase, and so cannot be represented by a single delay at all frequencies.
However, such deviations are unlikely to be perceptible, and the comparison tool described in Section 6 is designed to be relatively insensitive to them.
The delays listed here are the ones that should be targeted by the encoder.
SILK Resampler Delay Allocations NB is given a smaller decoder delay allocation than MB and WB to allow a higher order filter when resampling to 8 kHz in both the encoder and decoder.
This implies that the audio content of two SILK frames operating at different bandwidths is not perfectly aligned in time.
This is not an issue for any transitions described in Section 4.5, because they all involve a SILK decoder reset.
When the decoder is reset, any samples remaining in the resampling buffer are discarded, and the resampler is re initialized with silence.
The CELT layer of Opus is based on the Modified Discrete Cosine Transform [MDCT] with partially overlapping windows of 5 to 22.5 ms.
The main principle behind CELT is that the MDCT spectrum is divided into bands that (roughly) follow the Bark scale, i.e., the scale of the ear's critical bands [ZWICKER61].
The normal CELT layer uses 21 of those bands, though Opus Custom (see Section 6.2) may use a different number of bands.
In Hybrid mode, the first 17 bands (up to 8 kHz) are not coded.
A band can contain as little as one MDCT bin per channel, and as many as 176 bins per channel, as detailed in Table 55.
In each band, the gain (energy) is coded separately from the shape of the spectrum.
Coding the gain explicitly makes it easy to preserve the spectral envelope of the signal.
The remaining unit  norm shape vector is encoded using a Pyramid Vector Quantizer (PVQ) Section 4.3.4.
Frame    2.5 ms   5 ms   10
MDCT Bins per Channel per Band for Each Frame Size Transients are notoriously difficult for transform codecs to code.
CELT uses two different strategies for them: 1.
Using multiple smaller MDCTs instead of a single large MDCT, and 2.
Dynamic time frequency resolution changes (See Section 4.3.4.5).
To improve quality on highly tonal and periodic signals, CELT includes a pre filter/post filter combination.
The pre filter on the encoder side attenuates the signal's harmonics.
The post filter on the decoder side restores the original gain of the harmonics, while shaping the coding noise to roughly follow the harmonics.
Such noise shaping reduces the perception of the noise.
When coding a stereo signal, three coding methods are available:  mid side stereo: encodes the mean and the difference of the left and right channels,  intensity stereo: only encodes the mean of the left and right channels (discards the difference),  dual stereo:
encodes the left and right channels separately.
An overview of the decoder is given in Figure 17.
Structure of the CELT decoder
The decoder is based on the following symbols and sets of symbols:
: Order of the Symbols in the CELT Section of the Bitstream
The decoder extracts information from the range coded bitstream in the order described in Table 56.
In some circumstances, it is possible for a decoded value to be out of range due to a very small amount of redundancy in the encoding of large integers by the range coder.
In that case, the decoder should assume there has been an error in the coding, decoding, or transmission and SHOULD take measures to conceal the error and/or report to the application that a problem has occurred.
Such out of range errors cannot occur in the SILK layer.
The "transient" flag indicates whether the frame uses a single long MDCT or several short MDCTs.
When it is set, then the MDCT coefficients represent multiple short MDCTs in the frame.
When not set, the coefficients represent a single long MDCT for the frame.
The flag is encoded in the bitstream with a probability of 1/8.
In addition to the global transient flag is a per band binary flag to change the time frequency (tf) resolution independently in each band.
The tf select flag uses a 1/2 probability, but is only decoded if it can have an impact on the result knowing the value of all per band tf change flags.
It is important to quantize the energy with sufficient resolution because any energy quantization error cannot be compensated for at a later stage.
Regardless of the resolution used for encoding the spectral shape of a band, it is perceptually important to preserve the energy in each band.
CELT uses a three step coarse fine fine strategy for encoding the energy in the base 2 log domain, as implemented in quant bands.c.
Coarse Energy Decoding Coarse quantization of the energy uses a fixed resolution of 6 dB (integer part of base 2 log).
To minimize the bitrate, prediction is applied both in time (using the previous frame) and in frequency (using the previous bands).
The part of the prediction that is based on the previous frame can be disabled, creating an "intra" frame where the energy is coded without reference to prior frames.
The decoder first reads the intra flag to determine what prediction is used.
(1 z b  ) A(z l, z b)
1 1 beta z b where b is the band index and l is the frame index.
The prediction coefficients applied depend on the frame size in use when not using intra energy and are alpha 0, beta 4915/32768 when using intra energy.
The time domain prediction is based on the final fine quantization of the previous frame, while the frequency domain (within the current frame) prediction is based on coarse quantization only (because the fine quantization has not been computed yet).
The prediction is clamped internally so that fixed point implementations with limited dynamic range always remain in the same state as floating point implementations.
We approximate the ideal probability distribution of the prediction error using a Laplace distribution with separate parameters for each frame size in intra  and inter  frame modes.
These parameters are held in the e prob model table in quant bands.c.
The coarse energy decoding is performed by unquant coarse energy() (quant bands.c).
The decoding of the Laplace distributed values is implemented in ec laplace decode() (laplace.c).
The number of bits assigned to fine energy quantization in each band is determined by the bit allocation computation described in Section 4.3.3.
Let B i be the number of fine energy bits for band i; the refinement is an integer f in the range [0,2
The mapping between f and the correction applied to the coarse energy is equal to (f 1/2)/2  B
Fine energy quantization is implemented in quant fine energy() (quant bands.c).
When some bits are left "unused" after all other flags have been decoded, these bits are assigned to a "final" step of fine allocation.
In effect, these bits are used to add one extra fine energy bit per band per channel.
The allocation process determines two "priorities" for the final fine bits.
Any remaining bits are first assigned only to bands of priority 0, starting from band 0 and going up.
If all bands of priority 0 have received one bit per channel, then bands of priority 1 are assigned an extra bit per channel, starting from band 0.
If any bits are left after this, they are left unused.
This is implemented in unquant energy finalise() (quant bands.c).
Because the bit allocation drives the decoding of the range coder stream, it MUST be recovered exactly so that identical coding decisions are made in the encoder and decoder.
Any deviation from the reference's resulting bit allocation will result in corrupted output, though implementers are free to implement the procedure in any way that produces identical results.
The per band gain shape structure of the CELT layer ensures that using the same number of bits for the spectral shape of a band in every frame will result in a roughly constant signal to noise ratio in that band.
This results in coding noise that has the same spectral envelope as the signal.
The masking curve produced by a standard psychoacoustic model also closely follows the spectral envelope of the signal.
This structure means that the ideal allocation is more consistent from frame to frame than it is for other codecs without an equivalent structure and that a fixed allocation provides fairly consistent perceptual performance [VALIN2010].
Many codecs transmit significant amounts of side information to control the bit allocation within a frame.
Often this control is only indirect, and it must be exercised carefully to achieve the desired rate constraints.
The CELT layer, however, can adapt over a very wide range of rates, so it has a large number of codebook sizes to choose from for each band.
Explicitly signaling the size of each of these codebooks would impose considerable overhead, even though the allocation is relatively static from frame to frame.
This is because all of the information required to compute these codebook sizes must be derived from a single frame by itself, in order to retain robustness to packet loss, so the signaling cannot take advantage of knowledge of the allocation in neighboring frames.
This problem is exacerbated in low latency (small frame size) applications, which would include this overhead in every frame.
For this reason, in the MDCT mode, Opus uses a primarily implicit bit allocation.
The available bitstream capacity is known in advance to both the encoder and decoder without additional signaling, ultimately from the packet sizes expressed by a higher level protocol.
Using this information, the codec interpolates an allocation from a hard  coded table.
While the band energy structure effectively models intra band masking, it ignores the weaker inter band masking, band temporal masking, and other less significant perceptual effects.
While these effects can often be ignored, they can become significant for particular samples.
One mechanism available to encoders would be to simply increase the overall rate for these frames, but this is not possible in a constant rate mode and can be fairly inefficient.
As a result three explicitly signaled mechanisms are provided to alter the implicit allocation:  Band boost  Allocation trim  Band skipping The first of these mechanisms, band boost, allows an encoder to boost the allocation in specific bands.
The second, allocation trim, works by biasing the overall allocation towards higher or lower frequency bands.
The third, band skipping, selects which low precision high frequency bands will be allocated no shape bits at all.
In stereo mode, there are two additional parameters potentially coded as part of the allocation procedure: a parameter to allow the selective elimination of allocation for the 'side' (i.e., intensity stereo) in jointly coded bands, and a flag to deactivate joint coding (i.e., dual stereo).
These values are not signaled if they would be meaningless in the overall context of the allocation.
Because every signaled adjustment increases overhead and implementation complexity, none were included speculatively: the reference encoder makes use of all of these mechanisms.
While the decision logic in the reference was found to be effective enough to justify the overhead and complexity, further analysis techniques may be discovered that increase the effectiveness of these parameters.
As with other signaled parameters, an encoder is free to choose the values in any manner, but, unless a technique is known to deliver superior perceptual results, the methods used by the reference implementation should be used.
The allocation process consists of the following steps: determining the per band maximum allocation vector, decoding the boosts, decoding the tilt, determining the remaining capacity of the frame, searching the mode table for the entry nearest but not exceeding the available space (subject to the tilt, boosts, band maximums, and band minimums), linear interpolation, reallocation of unused bits with concurrent skip decoding, determination of the fine energy vs. shape split, and final reallocation.
This process results in a per band shape allocation (in 1/8th bit units), a per band fine energy allocation (in 1 bit per channel units), a set of band priorities for controlling the use of remaining bits at the end of the frame, and a remaining balance of unallocated space, which is usually zero except at very high rates.
The allocation is obtained by linearly interpolating between two values of q (in steps of 1/64) to find the highest allocation that does not exceed the number of bits remaining.
Rows indicate the MDCT bands, columns are the different quality (q) parameters.
The units are 1/32 bit per MDCT bin.
Table 57: CELT Static Allocation Table
The maximum allocation vector is an approximation of the maximum space that can be used by each band for a given mode.
The value is approximate because the shape encoding is variable rate (due to entropy coding of splitting parameters).
Setting the maximum too low reduces the maximum achievable quality in a band while setting it too high may result in waste: bitstream capacity available at the end of the frame that cannot be put to any use.
The maximums specified by the codec reflect the average maximum.
In the reference implementation, the maximums in bits/sample are precomputed in a static table (see cache caps50[] in static modes float.h) for each band, for each value of LM, and for both mono and stereo.
Implementations are expected to simply use the same table data, but the procedure for generating this table is included in rate.c as part of compute pulse cache().
To convert the values in cache.caps into the actual maximums: first, set nbBands to the maximum number of bands for this mode, and stereo to zero if stereo is not in use and one otherwise.
For each band, set N to the number of MDCT bins covered by the band (for one channel), set LM to the shift value for the frame size.
Then, set i to nbBands (2 LM stereo).
Next, set the maximum for the band to the i th index of cache.caps   64 and multiply by the number of channels in the current frame (one or two) and by N, then divide the result by 4 using integer division.
The resulting vector will be called cap[].
The elements fit in signed 16 bit integers but do not fit in 8 bits.
This procedure is implemented in the reference in the function init caps() in celt.c.
The band boosts are represented by a series of binary symbols that are entropy coded with very low probability.
Each band can potentially be boosted multiple times, subject to the frame actually having enough room to obey the boost and having enough room to code the boost symbol.
The default coding cost for a boost starts out at six bits (probability p 1/64), but subsequent boosts in a band cost only a single bit and every time a band is boosted
the initial cost is reduced (down to a minimum of two bits, or p 1/4).
Since the initial cost of coding a boost is 6 bits, the coding cost of the boost symbols when completely unused is 0.48 bits/frame for a 21 band mode (21  log2(1 1/2  6)).
To decode the band boosts: First, set 'dynalloc logp' to 6, the initial amount of storage required to signal a boost in bits, 'total bits' to the size of the frame in 8th bits, 'total boost' to zero, and 'tell' to the total number of 8th bits decoded so far.
For each band from the coding start (0 normally, but 17 in Hybrid mode) to the coding end (which changes depending on the signaled bandwidth), the boost quanta in units of 1/8 bit is calculated as quanta
This represents a boost step size of six bits, subject to a lower limit of 1/8th bit/sample and an upper limit of 1 bit/sample.
Set 'boost' to zero and 'dynalloc loop logp' to dynalloc logp.
While dynalloc loop log (the current worst case symbol cost) in 8th bits plus tell is less than total bits plus total boost and boost is less than cap[] for this band
: Decode a bit from the bitstream with dynalloc loop logp as the cost of a one and update tell to reflect the current used capacity.
If the decoded value is zero break the loop.
Otherwise, add quanta to boost and total boost, subtract quanta from total bits, and set dynalloc loop log to 1.
When the loop finishes 'boost' contains the bit allocation boost for this band.
If boost is non zero and dynalloc logp is greater than 2, decrease dynalloc logp.
Once this process has been executed on all bands, the band boosts have been decoded.
This procedure is implemented around line 2474 of celt.c.
At very low rates, it is possible that there won't be enough available space to execute the inner loop even once.
In these cases, band boost is not possible, but its overhead is completely eliminated.
Because of the high cost of band boost when activated, a reasonable encoder should not be using it at very low rates.
The reference implements its dynalloc decision logic around line 1304 of celt.c.
The allocation trim is an integer value from 0 10.
The default value of 5 indicates no trim.
The trim parameter is entropy coded in order to lower the coding cost of less extreme adjustments.
lower than 5 bias the allocation towards lower frequencies and values above 5
bias it towards higher frequencies.
Like other signaled parameters, signaling of the trim is gated so that it is not included if there is insufficient space available in the bitstream.
To decode the trim, first set the trim value to 5, then if and only if the count of decoded 8th bits so far (ec tell frac) plus 48 (6 bits) is less than or equal to the total frame size in 8th bits minus total boost (a product of the above band boost procedure), decode the trim value using the PDF in Table 58.
For 10 ms and 20 ms frames using short blocks and that have at least LM 2 bits left prior to the allocation process, one anti collapse bit is reserved in the allocation process so it can be decoded later.
Following the anti collapse reservation, one bit is reserved for skip if available.
For stereo frames, bits are reserved for intensity stereo and for dual stereo.
Intensity stereo requires ilog2(end start) bits.
Those bits are reserved if there are enough bits left.
Following this, one bit is reserved for dual stereo if available.
The allocation computation begins by setting up some initial conditions. '
total' is set to the remaining available 8th bits, computed by taking the size of the coded frame times 8 and subtracting ec tell frac().
From this value, one (8th bit) is subtracted to ensure that the resulting allocation will be conservative. '
anti collapse rsv' is set to 8
(8th bits) if and only if the frame is a transient, LM is greater than 1, and total is greater than or equal to (LM 2)   8.
Total is then decremented by anti collapse rsv and clamped to be equal to or greater than zero. '
skip rsv' is set to 8 (8th bits)
if total is greater than 8, otherwise it is zero.
Total is then decremented by skip rsv.
This reserves space for the final skipping flag.
If the current frame is stereo, intensity rsv is set to the conservative log2 in 8th bits of the number of coded bands for this frame (given by the table LOG2 FRAC TABLE in rate.c).
If intensity rsv is greater than total, then intensity rsv is set to zero.
Otherwise, total is decremented by intensity rsv, and if total is still greater than 8, dual stereo rsv is set to 8 and total is decremented by dual stereo rsv.
The allocation process then computes a vector representing the hard minimum amounts allocation any band will receive for shape.
This minimum is higher than the technical limit of the PVQ process, but very low rate allocations produce an excessively sparse spectrum and these bands are better served by having no allocation at all.
For each coded band, set thresh[band] to 24 times the number of MDCT bins in the band and divide by 16.
If 8 times the number of channels is greater, use that instead.
This sets the minimum allocation to one bit per channel or 48 128th bits per MDCT bin, whichever is greater.
The band size dependent part of this value is not scaled by the channel count, because at the very low rates where this limit is applicable there will usually be no bits allocated to the side.
The previously decoded allocation trim is used to derive a vector of per band adjustments, 'trim offsets[]'.
For each coded band take the alloc trim and subtract 5 and LM.
Then, multiply the result by the number of channels, the number of MDCT bins in the shortest frame size for this mode, the number of remaining bands, 2  LM, and 8.
Next, divide this value by 64.
Finally, if the number of MDCT bins in the band per channel is only one, 8 times the number of channels is subtracted in order to diminish the allocation by one bit, because width 1 bands receive greater benefit from the coarse energy coding.
In each band, the normalized "shape" is encoded using Pyramid Vector Quantizer.
In the simplest case, the number of bits allocated in Section 4.3.3 is converted to a number of pulses as described by Section 4.3.4.1.
Knowing the number of pulses and the number of samples in the band, the decoder calculates the size of the codebook as detailed in Section 4.3.4.2.
The size is used to decode an unsigned integer (uniform probability model), which is the codeword index.
This index is converted into the corresponding vector as explained in Section 4.3.4.2.
This vector is then scaled to unit norm.
Although the allocation is performed in 1/8th bit units, the quantization requires an integer number of pulses K.
To do this, the encoder searches for the value of K that produces the number of bits nearest to the allocated value (rounding down if exactly halfway between two values), not to exceed the total number of bits available.
For efficiency reasons, the search is performed against a precomputed allocation table that only permits some K values for each N.
The number of codebook entries can be computed as explained in Section 4.3.4.2.
The difference between the number of bits allocated and the number of bits used is accumulated to a "balance" (initialized to zero) that helps adjust the allocation for the next bands.
One third of the balance is applied to the bit allocation of each band to help achieve the target allocation.
The only exceptions are the band before the last and the last band, for which half the balance and the whole balance are applied, respectively.
PVQ Decoding Decoding of PVQ vectors is implemented in decode pulses() (cwrs.c).
The unique codeword index is decoded as a uniformly distributed integer value between 0 and V(N,K) 1, where V(N,K) is the number of possible combinations of K pulses in N samples.
The index is then converted to a vector in the same way specified in [PVQ].
The indexing is based on the calculation of V(N,K) (denoted N(L,K) in [PVQ]).
The number of combinations can be computed recursively as V(N,K)
V(N 1,K 1), with V(N,0)   1 and V(0,K)
There are many different ways to compute V(N,K), including precomputed tables and direct use of the recursive formulation.
The reference implementation applies the recursive formulation one line (or column) at a time to save on memory use, along with an alternate, univariate recurrence to initialize an arbitrary line, and direct polynomial solutions for small N.
All of these methods are equivalent, and have different trade offs in speed, memory usage, and code size.
Implementations MAY use any methods they like, as long as they are equivalent to the mathematical definition.
The decoded vector X is recovered as follows.
Let i be the index decoded with the procedure in Section 4.1.5 with ft   V(N,K), so that 0
Then, for j   0 to (N 1), inclusive, do: 1.
If i < p, then let sgn   1, else let sgn    1 and set i   i p. 3.
k0   k and set p   p V(N j 1,k).
k 1 and p   p V(N j 1,k).
The decoded vector X is then normalized such that its L2 norm equals one.
Spreading The normalized vector decoded in Section 4.3.4.2 is then rotated for the purpose of avoiding tonal artifacts.
The rotation gain is equal to g r   N
/ (N   f r K) where N is the number of dimensions, K is the number of pulses, and f r depends on the value of the "spread" parameter in the bitstream.
The rotation angle is then calculated as 2 pi
4 A 2 D rotation R(i,j) between points
i and x j is defined as:
x j An N D rotation is then achieved by applying a series of 2 D rotations back and forth, in the following order:
R(x N 1, X N), R(x N 2,
, R(x 1, x 2).
If the decoded vector represents more than one time block, then this spreading process is applied separately on each time block.
Also, if each block represents 8 samples or more, then another N D rotation, by (pi/2 theta), is applied  before  the rotation described above.
This extra rotation is applied in an interleaved manner with a stride equal to round(sqrt(N/nb blocks)), i.e., it is applied independently for each set of sample S
To avoid the need for multi precision calculations when decoding PVQ codevectors, the maximum size allowed for codebooks is 32 bits.
When larger codebooks are needed, the vector is instead split in two sub  vectors of size N/2.
A quantized gain parameter with precision derived from the current allocation is entropy coded to represent the relative gains of each side of the split, and the entire decoding process is recursively applied.
Multiple levels of splitting may be applied up to a limit of LM 1 splits.
The same recursive mechanism is applied for the joint coding of stereo audio.
The time frequency (TF) parameters are used to control the time  frequency resolution trade off in each coded band.
For each band, there are two possible TF choices.
For the first band coded, the PDF is {3, 1}/4 for frames marked as transient and {15, 1}/16 for the other frames.
For subsequent bands, the TF choice is coded relative to the previous TF choice with probability {15, 1}/16 for transient frames and {31, 1}/32 otherwise.
The mapping between the decoded TF choices and the adjustment in TF resolution is shown in the tables below.
TF Adjustments for Transient Frames and tf select 1 A negative TF adjustment means that the temporal resolution is increased, while a positive TF adjustment means that the frequency resolution is increased.
Changes in TF resolution are implemented using the Hadamard transform [HADAMARD].
To increase the time resolution by N, N "levels" of the Hadamard transform are applied to the decoded vector for each interleaved MDCT vector.
To increase the frequency resolution (assumes a transient frame), then N levels of the Hadamard transform are applied  across  the interleaved MDCT vector.
In the case of increased time resolution, the decoder uses the "sequency order" because the input vector is sorted in time.
The anti collapse feature is designed to avoid the situation where the use of multiple short MDCTs causes the energy in one or more of the MDCTs to be zero for some bands, causing unpleasant artifacts.
When the frame has the transient bit set, an anti collapse bit is decoded.
When anti collapse is set, the energy in each small MDCT is prevented from collapsing to zero.
For each band of each MDCT where a collapse is detected, a pseudo random signal is inserted with an energy corresponding to the minimum energy over the two previous frames.
A renormalization step is then required to ensure that the anti collapse step did not alter the energy preservation property.
Denormalization Just as each band was normalized in the encoder, the last step of the decoder before the inverse MDCT is to denormalize the bands.
Each decoded normalized band is multiplied by the square root of the decoded energy.
This is done by denormalise bands() (bands.c).
The inverse MDCT implementation has no special characteristics.
The input is N frequency domain samples and the output is 2 N time domain samples, while scaling by 1/2.
A "low overlap" window reduces the algorithmic delay.
It is derived from a basic (full overlap)
240  sample version of the window used by the Vorbis codec: 2
The low overlap window is created by zero padding the basic window and inserting ones in the middle, such that the resulting window still satisfies power complementarity [PRINCEN86].
The IMDCT and windowing are performed by mdct backward (mdct.c).
The output of the inverse MDCT (after weighted overlap add) is sent to the post filter.
Although the post filter is applied at the end, the post filter parameters are encoded at the beginning, just after the silence flag.
The post filter can be switched on or off using one bit (logp 1).
If the post filter is enabled, then the octave is decoded as an integer value between 0 and 6 of uniform probability.
Once the octave is known, the fine pitch within the octave is decoded using 4 octave raw bits.
The final pitch period is equal to (16<<octave) fine pitch 1
so it is bounded between 15 and 1022, inclusively.
Next, the gain is decoded as three raw bits and is equal to G 3 (int gain 1)/32.
The set of post filter taps is decoded last, using a pdf equal to {2, 1, 1}/4.
Tapset zero corresponds to the filter coefficients g0   0.3066406250, g1   0.2170410156, g2   0.1296386719.
Tapset one corresponds to the filter coefficients g0   0.4638671875, g1   0.2680664062, g2   0, and tapset two uses filter coefficients g0   0.7998046875, g1   0.1000976562, g2   0.
The post filter response is thus computed as: y(n)   x(n)
During a transition between different gains, a smooth transition is calculated using the square of the MDCT window.
It is important that values of y(n) be interpolated one at a time such that the past value of y(n) used is interpolated.
After the post filter, the signal is de emphasized using the inverse of the pre emphasis filter used in the encoder:
Packet Loss Concealment (PLC) is an optional decoder side feature that SHOULD be included when receiving from an unreliable channel.
Because PLC is not part of the bitstream, there are many acceptable ways to implement PLC with different complexity/quality trade offs.
The PLC in the reference implementation depends on the mode of last packet received.
In CELT mode, the PLC finds a periodicity in the decoded signal and repeats the windowed waveform using the pitch offset.
The windowed waveform is overlapped in such a way as to preserve the time domain aliasing cancellation with the previous frame and the next frame.
This is implemented in celt decode lost() (mdct.c).
In SILK mode, the PLC uses LPC extrapolation from the previous frame, implemented in silk PLC()
Clock Drift Compensation Clock drift refers to the gradual desynchronization of two endpoints whose sample clocks run at different frequencies while they are streaming live audio.
Differences in clock frequencies are generally attributable to manufacturing variation in the endpoints' clock hardware.
For long lived streams, the time difference between sender and receiver can grow without bound.
When the sender's clock runs slower than the receiver's, the effect is similar to packet loss: too few packets are received.
The receiver can distinguish between drift and loss if the transport provides packet timestamps.
A receiver for live streams SHOULD conceal the effects of drift, and it MAY do so by invoking the PLC.
When the sender's clock runs faster than the receiver's, too many packets will be received.
The receiver MAY respond by skipping any packet (i.e., not submitting the packet for decoding).
This is likely to produce a less severe artifact than if the frame were dropped after decoding.
A decoder MAY employ a more sophisticated drift compensation method.
For example, the NetEQ component [GOOGLE NETEQ] of the Google WebRTC codebase [GOOGLE WEBRTC] compensates for drift by adding or removing one period when the signal is highly periodic.
The reference implementation of Opus allows a caller to learn whether the current frame's signal is highly periodic, and if so what the period is, using the OPUS GET PITCH() request.
Configuration Switching Switching between the Opus coding modes, audio bandwidths, and channel counts requires careful consideration to avoid audible glitches.
Switching between any two configurations of the CELT only mode,
any two configurations of the Hybrid mode, or from WB SILK to Hybrid mode does not require any special treatment in the decoder, as the MDCT overlap will smooth the transition.
Switching from Hybrid mode to WB SILK requires adding in the final contents of the CELT overlap buffer to the first SILK only packet.
This can be done by decoding a 2.5 ms silence frame with the CELT decoder using the channel count of the SILK only packet (and any choice of audio bandwidth), which will correctly handle the cases when the channel count changes as well.
When changing the channel count for SILK only or Hybrid packets, the encoder can avoid glitches by smoothly varying the stereo width of the input signal before or after the transition, and it SHOULD do so.
However, other transitions between SILK only packets or between NB or MB SILK and Hybrid packets may cause glitches, because neither the LSF coefficients nor the LTP, LPC, stereo unmixing, and resampler buffers are available at the new sample rate.
These switches SHOULD be delayed by the encoder until quiet periods or transients, where the inevitable glitches will be less audible.
Additionally, the bitstream MAY include redundant side information ("redundancy"), in the form of additional CELT frames embedded in each of the Opus frames around the transition.
The other transitions that cannot be easily handled are those where the lower frequencies switch between the SILK LP based model and the CELT MDCT model.
However, an encoder may not have an opportunity to delay such a switch to a convenient point.
For example, if the content switches from speech to music, and the encoder does not have enough latency in its analysis to detect this in advance, there may be no convenient silence period during which to make the transition for quite some time.
To avoid or reduce glitches during these problematic mode transitions, and between audio bandwidth changes in the SILK only modes, transitions MAY include redundant side information ("redundancy"), in the form of an additional CELT frame embedded in the Opus frame.
A transition between coding the lower frequencies with the LP model and the MDCT model or a transition that involves changing the SILK bandwidth is only normatively specified when it includes redundancy.
For those without redundancy, it is RECOMMENDED that the decoder use a concealment technique (e.g., make use of a PLC algorithm) to "fill in" the gap or discontinuity caused by the mode transition.
Therefore, PLC MUST NOT be applied during any normative transition, i.e., when  A packet includes redundancy for this transition (as described below),  The transition is between any WB SILK packet and any Hybrid packet, or vice versa,
The transition is between any two Hybrid mode packets, or  The transition is between any two CELT mode packets, unless there is actual packet loss.
Transition Side Information (Redundancy) Transitions with side information include an extra 5 ms "redundant" CELT frame within the Opus frame.
This frame is designed to fill in the gap or discontinuity in the different layers without requiring the decoder to conceal it.
For transitions from CELT only to SILK  only or Hybrid, the redundant frame is inserted in the first Opus frame after the transition (i.e., the first SILK only or Hybrid frame).
For transitions from SILK only or Hybrid to CELT only, the redundant frame is inserted in the last Opus frame before the transition (i.e., the last SILK only or Hybrid frame).
The presence of redundancy is signaled in all SILK only and Hybrid frames, not just those involved in a mode transition.
This allows the frames to be decoded correctly even if an adjacent frame is lost.
For SILK only frames, this signaling is implicit, based on the size of the Opus frame and the number of bits consumed decoding the SILK portion of it.
After decoding the SILK portion of the Opus frame, the decoder uses ec tell() (see Section 4.1.6.1) to check if there are at least 17 bits remaining.
If so, then the frame contains redundancy.
For Hybrid frames, this signaling is explicit.
After decoding the SILK portion of the Opus frame, the decoder uses ec tell() (see Section 4.1.6.1) to ensure there are at least 37 bits remaining.
If so, it reads a symbol with the PDF in Table 64, and if the value is 1, then the frame contains redundancy.
Otherwise (if there were fewer than 37 bits left or the value was 0), the frame does not contain redundancy.
Redundancy Position Flag Since the current frame is a SILK only or a Hybrid frame, it must be at least 10 ms.
Therefore, it needs an additional flag to indicate whether the redundant 5 ms CELT frame should be mixed into the beginning of the current frame, or the end.
After determining that a frame contains redundancy, the decoder reads a 1 bit symbol with a uniform PDF (Table 65).
If the value is zero, this is the first frame in the transition, and the redundancy belongs at the end.
If the value is one, this is the second frame in the transition, and the redundancy belongs at the beginning.
There is no way to specify that an Opus frame contains separate redundant CELT frames at both the beginning and the end.
Redundancy Size Unlike the CELT portion of a Hybrid frame
, the redundant CELT frame does not use the same entropy coder state as the rest of the Opus frame, because this would break the CELT bit allocation mechanism in Hybrid frames.
Thus, a redundant CELT frame always starts and ends on a byte boundary, even in SILK only frames, where this is not strictly necessary.
For SILK only frames, the number of bytes in the redundant CELT frame is simply the number of whole bytes remaining, which must be at least 2, due to the space check in Section 4.5.1.1.
For Hybrid frames, the number of bytes is equal to 2, plus a decoded unsigned integer less than 256 (see Section 4.1.5).
This may be more than the number of whole bytes remaining in the Opus frame, in which case the frame is invalid.
However, a decoder is not required to ignore the entire frame, as this may be the result of a bit error that desynchronized the range coder.
There may still be useful data before the error, and a decoder MAY keep any audio decoded so far instead of invoking the PLC, but it is RECOMMENDED that the decoder stop decoding and discard the rest of the current Opus frame.
It would have been possible to avoid these invalid states in the design of Opus by limiting the range of the explicit length decoded from Hybrid frames by the actual number of whole bytes remaining.
However, this would require an encoder to determine the rate allocation for the MDCT layer up front, before it began encoding that layer.
By allowing some invalid sizes, the encoder is able to defer that decision until much later.
When encoding Hybrid frames that do not include redundancy, the encoder must still decide up front if it wishes to use the minimum 37 bits required to trigger encoding of the redundancy flag, but this is a much looser restriction.
After determining the size of the redundant CELT frame, the decoder reduces the size of the buffer currently in use by the range coder by that amount.
The MDCT layer reads any raw bits from the end of this reduced buffer, and all calculations of the number of bits remaining in the buffer must be done using this new, reduced size, rather than the original size of the Opus frame.
The redundant frame is decoded like any other CELT only frame, with the exception that it does not contain a TOC byte.
The frame size is fixed at 5 ms, the channel count is set to that of the current frame, and the audio bandwidth is also set to that of the current frame, with the exception that for MB SILK frames, it is set to WB.
If the redundancy belongs at the beginning (in a CELT only to SILK  only or Hybrid transition), the final reconstructed output uses the first 2.5 ms of audio output by the decoder for the redundant frame as is, discarding the corresponding output from the SILK only or Hybrid portion of the frame.
The remaining 2.5 ms is cross lapped with the decoded SILK/Hybrid signal using the CELT's power  complementary MDCT window to ensure a smooth transition.
If the redundancy belongs at the end (in a SILK only or Hybrid to CELT only transition), only the second half (2.5 ms) of the audio output by the decoder for the redundant frame is used.
In that case, the second half of the redundant frame is cross lapped with the end of the SILK/Hybrid signal, again using CELT's power complementary MDCT window to ensure a smooth transition.
When a transition occurs, the state of the SILK or the CELT decoder (or both) may need to be reset before decoding a frame in the new mode.
This avoids reusing "out of date" memory, which may not have been updated in some time or may not be in a well defined state due to, e.g., PLC.
The SILK state is reset before every SILK only or Hybrid frame where the previous frame was CELT only.
The CELT state is reset every time
the operating mode changes and the new mode is either Hybrid or CELT only, except when the transition uses redundancy as described above.
When switching from SILK only or Hybrid to CELT only with redundancy, the CELT state is reset before decoding the redundant CELT frame embedded in the SILK only or Hybrid frame, but it is not reset before decoding the following CELT only frame.
When switching from CELT only mode to SILK only or Hybrid mode with redundancy, the CELT decoder is not reset for decoding the redundant CELT frame.
Summary of Transitions Figure 18 illustrates all of the normative transitions involving a mode change, an audio bandwidth change, or both.
Each one uses an S, H, or C to represent an Opus frame in the corresponding mode.
In addition, an R indicates the presence of redundancy in the Opus frame with which it is cross lapped.
Its location in the first or last 5 ms is assumed to correspond to whether it is the frame before or after the transition.
Other uses of redundancy are non normative.
Finally, a c indicates the contents of the CELT overlap buffer after the previously decoded frame (i.e., as extracted by decoding a silence frame).
S   S   S NB or MB SILK to Hybrid with Redundancy:
R  ;H   H   H WB SILK to Hybrid:
C Hybrid to NB or MB SILK with Redundancy:
H   H   H & !
S Hybrid to CELT with Redundancy:
H   H   H & !
R   C   C   C CELT to SILK with Redundancy:
The first two and the last two Opus frames in each example are illustrative, i.e., there is no requirement that a stream remain in the same configuration for three consecutive frames before or after a switch.
The behavior of transitions without redundancy where PLC is allowed is non normative.
An encoder might still wish to use these transitions if, for example, it doesn't want to add the extra bitrate required for redundancy or if it makes a decision to switch after it has already transmitted the frame that would have had to contain the redundancy.
Figure 19 illustrates the recommended cross lapping and decoder resets for these transitions.
SILK to SILK (audio bandwidth change):
C Hybrid to NB or MB SILK:
C   C   C CELT to SILK without Redundancy
: Recommended Non Normative Transitions Encoders SHOULD NOT use other transitions, e.g., those that involve redundancy in ways not illustrated in Figure 18.
Just like the decoder, the Opus encoder also normally consists of two main blocks: the SILK encoder and the CELT encoder.
However, unlike the case of the decoder, a valid (though potentially suboptimal)
Opus encoder is not required to support all modes and may thus only include a SILK encoder module or a CELT encoder module.
The output bitstream of the Opus encoding contains bits from the SILK and CELT encoders, though these are not separable due to the use of a range coder.
A block diagram of the encoder is illustrated below.
For a normal encoder where both the SILK and the CELT modules are included, an optimal encoder should select which coding mode to use at run time depending on the conditions.
In the reference implementation, the frame size is selected by the application, but the other configuration parameters (number of channels, bandwidth, mode) are automatically selected (unless explicitly overridden by the application) depending on the following:  Requested bitrate  Input sampling rate  Type of signal (speech vs. music)
Frame size in use The type of signal currently needs to be provided by the application (though it can be changed in real time).
An Opus encoder implementation could also do automatic detection, but since Opus is an interactive codec, such an implementation would likely have to either delay the signal (for non interactive applications) or delay the mode switching decisions (for interactive applications).
When the encoder is configured for voice over IP applications, the input signal is filtered by a high pass filter to remove the lowest part of the spectrum that contains little speech energy and may contain background noise.
This is a second order Auto Regressive Moving Average (i.e., with poles and zeros) filter with a cut off frequency around 50 Hz.
In the future, a music detector may also be used to lower the cut off frequency when the input signal is detected to be music rather than speech.
The range coder acts as the bit packer for Opus.
It is used in three different ways: to encode  Entropy
coded symbols with a fixed probability model using ec encode()
Integers from 0 to (2  M 1) using ec enc uint
() or ec enc bits() (entenc.c),  Integers from 0 to (ft 1)
(where ft is not a power of two) using ec enc uint()
The range encoder maintains an internal state vector composed of the four tuple (val, rng, rem, ext) representing the low end of the current range, the size of the current range, a single buffered output byte, and a count of additional carry propagating output bytes.
Both val and rng are 32 bit unsigned integer values, rem is a byte value or less than 255 or the special value  1, and ext is an unsigned integer with at least 11 bits.
This state vector is initialized at the start of each frame to the value (0, 2  31,  1, 0).
After encoding a sequence of symbols, the value of rng in the encoder should exactly match the value of rng in the decoder after decoding the same sequence of symbols.
This is a powerful tool for detecting errors in either an encoder or decoder implementation.
The value of val, on the other hand, represents different things in the encoder and decoder, and is not expected to match.
The decoder has no analog for rem and ext.
These are used to perform carry propagation in the renormalization loop below.
Each iteration of this loop produces 9 bits of output, consisting of 8 data bits and a carry flag.
The encoder cannot determine the final value of the output bytes until it propagates these carry flags.
Therefore, the reference implementation buffers a single non propagating output byte (i.e., one less than 255) in rem and keeps a count of additional propagating (i.e., 255) output bytes in ext.
An implementation may choose to use any mathematically equivalent scheme to perform carry propagation.
The main encoding function is ec encode() (entenc.c), which encodes symbol k in the current context using the same three tuple (fl[k], fh[k], ft)
as the decoder to describe the range of the symbol (see Section 4.1).
ec encode() updates the state of the encoder as follows.
If fl[k] is greater than zero, then rng val
ft Otherwise, val is unchanged and rng rng
The divisions here are integer division.
After this update, the range is normalized using a procedure very similar to that of Section 4.1.2.1, implemented by ec enc normalize() (entenc.c).
The following process is repeated until rng > 2  23.
First, the top 9 bits of val, (val>>23), are sent to the carry buffer, described in Section 5.1.1.2.
Then, the encoder sets val   (val<<8) & 0x7FFFFFFF
Carry Propagation and Output Buffering
The function ec enc carry out() (entenc.c) implements carry propagation and output buffering.
It takes, as input, a 9 bit unsigned value, c, consisting of 8 data bits and an additional carry bit.
If c is equal to the value 255, then ext is simply incremented, and no other state updates are performed.
Otherwise, let b   (c>>8) be the carry bit.
Then,  If the buffered byte rem contains a value other than  1, the encoder outputs the byte (rem   b).
Otherwise, if rem is  1, no byte is output.
If ext is non zero, then the encoder outputs ext bytes
all with a value of 0 if b is set, or 255
if b is unset   and sets ext to 0.
rem is set to the 8 data bits: rem   c & 255 5.1.2.
The reference implementation uses three additional encoding methods that are exactly equivalent to the above, but make assumptions and simplifications that allow for a more efficient implementation.
The first is ec encode bin() (entenc.c),
defined using the parameter ftb instead of ft.
It is mathematically equivalent to calling ec encode() with ft   (1<<ftb), but it avoids using division.
The next is ec enc bit logp() (entenc.c), which encodes a single binary symbol.
The context is described by a single parameter, logp, which is the absolute value of the base 2 logarithm of the probability of a "1".
It is mathematically equivalent to calling ec encode() with the 3 tuple (fl[k]   0, fh[k]
if k is 0 and with (fl[k]
The implementation requires no multiplications or divisions.
The last is ec enc icdf() (entenc.c), which encodes a single binary symbol with a table based context of up to 8 bits.
This uses the same icdf table as ec dec icdf() from Section 4.1.3.3.
The function is mathematically equivalent to calling ec encode() with fl[k]
(or 0 if k   0), fh[k]
(1<<ftb) icdf[k], and ft   (1<<ftb).
This only saves a few arithmetic operations over ec encode bin(), but it allows the encoder to use the same icdf tables as the decoder.
The raw bits used by the CELT layer are packed at the end of the buffer using ec enc bits()
Because the raw bits may continue into the last byte output by the range coder if there is room in the low order bits, the encoder must be prepared to merge these values into a single byte.
The procedure in Section 5.1.5 does this in a way that ensures both the range coded data and the raw bits can be decoded successfully.
The function ec enc uint() (entenc.c) encodes one of ft equiprobable symbols in the range 0 to (ft 1), inclusive, each with a frequency of 1, where ft may be as large as (2  32 1).
Like the decoder (see Section 4.1.5), it splits up the value into a range coded symbol representing up to 8 of the high bits, and, if necessary, raw bits representing the remainder of the value.
ec enc uint() takes a two tuple (t, ft), where t is the unsigned integer to be encoded, 0 <  t < ft, and ft is not necessarily a power of two.
Let ftb   ilog(ft 1), i.e., the number of bits required to store (ft 1) in two's complement notation.
If ftb is 8 or less, then t is encoded directly using ec encode() with the three tuple (t,
After all symbols are encoded, the stream must be finalized by outputting a value inside the current range.
Let end be the unsigned integer in the interval [val, val   rng) with the largest number of trailing zero bits, b, such that (end
1) is also in the interval [val, val   rng).
This choice of end allows the maximum number of trailing bits to be set to arbitrary values while still ensuring the range coded part of the buffer can be decoded correctly.
Then, while end is not zero, the top 9 bits of end, i.e., (end>>23), are passed to the carry buffer in accordance with the procedure in Section 5.1.1.2, and end is updated via end   (end<<8) & 0x7FFFFFFF
Finally, if the buffered output byte, rem, is neither zero nor the special value  1, or the carry count, ext, is greater than zero, then 9 zero bits are sent to the carry buffer to flush it to the output buffer.
When outputting the final byte from the range coder, if it would overlap any raw bits already packed into the end of the output buffer, they should be ORed into the same byte.
The bit allocation routines in the CELT layer should ensure that this can be done without corrupting the range coder data so long as end is chosen as described above.
If there is any space between the end of the range coder data and the end of the raw bits, it is padded with zero bits.
This entire process is implemented by ec enc done() (entenc.c).
The bit allocation routines in Opus need to be able to determine a conservative upper bound on the number of bits that have been used to encode the current frame thus far.
This drives allocation decisions and ensures that the range coder and raw bits will not overflow the output buffer.
This is computed in the reference implementation to whole bit precision by the function
(entcode.h) and to fractional 1/8th bit precision by the function ec tell frac() (entcode.c).
Like all operations in the range coder, it must be implemented in a bit exact manner, and it must produce exactly the same value returned by the same functions in the decoder after decoding the same symbols.
In many respects, the SILK encoder mirrors the SILK decoder described in Section 4.2.
Details such as the quantization and range coder tables can be found there, while this section describes the high  level design choices that were made.
The diagram below shows the basic modules of the SILK encoder.
The input signal's sampling rate is adjusted by a sample rate conversion module so that it matches the SILK internal sampling rate.
The input to the sample rate converter is delayed by a number of samples depending on the sample rate ratio, such that the overall delay is constant for all input and output sample rates.
The stereo mixer is only used for stereo input signals.
It converts a stereo left right signal into an adaptive mid side representation.
The first step is to compute non adaptive mid side signals as half the sum and difference between left and right signals.
The side signal is then minimized in energy by subtracting a prediction of it based on the mid signal.
This prediction works well when the left and right signals exhibit linear dependency, for instance, for an amplitude panned input signal.
Like in the decoder, the prediction coefficients are linearly interpolated during the first 8 ms of the frame.
The mid signal is always encoded, whereas the residual side signal is only encoded if it has sufficient energy compared to the mid signal's energy.
If it has not, the "mid only flag" is set without encoding the side signal.
The predictor coefficients are coded regardless of whether the side signal is encoded.
For each frame, two predictor coefficients are computed, one that predicts between low passed mid and side channels, and one that predicts between high passed mid and side channels.
The low pass filter is a simple three tap filter and creates a delay of one sample.
The high pass filtered signal is the difference between the mid signal delayed by one sample and the low passed signal.
Instead of explicitly computing the high passed signal, it is computationally more efficient to transform the prediction coefficients before applying them to the filtered mid signal, as follows:
w1 where w0 and w1 are the low pass and high pass prediction coefficients, mid(n 1) is
the mid signal delayed by one sample, LP(n) and HP(n) are the low passed and high passed signals and pred(n)
is the prediction signal that is subtracted from the side signal.
What follows is a description of the core encoder and its components.
For simplicity, the core encoder is referred to simply as the encoder in the remainder of this section.
An overview of the encoder is given in Figure 22.
Voice activity estimate 4:  Pitch lags (per 5 ms) and voicing decision (per 20 ms) 5:
Noise shaping quantization coefficients Short term synthesis and analysis noise shaping coefficients (per 5 ms)
Long term synthesis and analysis noise shaping coefficients (per 5 ms and for voiced speech only)
Noise shaping tilt (per 5 ms) Quantizer gain/step size (per 5 ms)
Input signal filtered with analysis noise shaping filters 7:  Short  and Long Term Prediction coefficients LTP (per 5 ms) and LPC (per 20 ms) 8:
LSF quantization indices 9:  LSF coefficients 10:
Quantized LSF coefficients 11: Processed gains, and synthesis noise shape coefficients 12: LTP state scaling coefficient.
Controlling error propagation / prediction gain trade off 13:
The input signal is processed by a Voice Activity Detection (VAD) algorithm to produce a measure of voice activity, spectral tilt, and signal to noise estimates for each frame.
The VAD uses a sequence of half band filterbanks to split the signal into four subbands:
, and Fs/4...Fs/2, where Fs is the sampling frequency (8, 12, 16, or 24 kHz).
The lowest subband, from 0 Fs/16, is high pass filtered with a first order moving average (MA) filter (with transfer function H(z)
z  ( 1)) to reduce the energy at the lowest frequencies.
For each frame, the signal energy per subband is computed.
In each subband, a noise level estimator tracks the background noise level and a Signal to
Noise Ratio (SNR) value is computed as the logarithm of the ratio of energy to noise level.
Using these intermediate variables, the following parameters are calculated for use in other SILK modules:  Average SNR.
The average of the subband SNR values.
Temporally smoothed subband SNR values.
Based on the average SNR and a weighted average of the subband energies.
A weighted average of the subband SNRs, with positive weights for the low subbands and negative weights for the high subbands.
The input signal is processed by the open loop pitch estimator shown in Figure 23.
Lag candidates from stage 1 3:
Lag candidates from stage 2 4: Correlation threshold 5:
Voiced/unvoiced flag 6: Pitch correlation 7:
Block Diagram of the Pitch Estimator
The pitch analysis finds a binary voiced/unvoiced classification, and, for frames classified as voiced, four pitch lags per frame   one for each 5 ms subframe   and a pitch correlation indicating the periodicity of the signal.
The input is first whitened using a Linear Prediction (LP) whitening filter, where the coefficients are computed through standard Linear Predictive Coding (LPC) analysis.
The order of the whitening filter is 16 for best results, but is reduced to 12 for medium complexity and 8 for low complexity modes.
The whitened signal is analyzed to find pitch lags for which the time correlation is high.
The analysis consists of three stages for reducing the complexity:
In the first stage, the whitened signal is downsampled to 4 kHz (from 8 kHz), and the current frame is correlated to a signal delayed by a range of lags, starting from a shortest lag corresponding to 500 Hz, to a longest lag corresponding to 56 Hz.
The second stage operates on an 8 kHz signal (downsampled from 12, 16, or 24 kHz) and measures time correlations only near the lags corresponding to those that had sufficiently high correlations in the first stage.
The resulting correlations are adjusted for a small bias towards short lags to avoid ending up with a multiple of the true pitch lag.
If the threshold is exceeded, the current frame is classified as voiced and the lag with the highest adjusted correlation is stored for a final pitch analysis of the highest precision in the third stage.
The last stage operates directly on the whitened input signal to compute time correlations for each of the four subframes independently in a narrow range around the lag with highest correlation from the second stage.
The noise shaping analysis finds gains and filter coefficients used in the pre filter and noise shaping quantizer.
These parameters are chosen such that they will fulfill several requirements:  Balancing quantization noise and bitrate.
The quantization gains determine the step size between reconstruction levels of the excitation signal.
Therefore, increasing the quantization gain amplifies quantization noise, but also reduces the bitrate by lowering the entropy of the quantization indices.
Spectral shaping of the quantization noise; the noise shaping quantizer is capable of reducing quantization noise in some parts of the spectrum at the cost of increased noise in other parts without substantially changing the bitrate.
By shaping the noise such that it follows the signal spectrum, it becomes less audible.
In practice, best results are obtained by making the shape of the noise spectrum slightly flatter than the signal spectrum.
De emphasizing spectral valleys; by using different coefficients in the analysis and synthesis part of the pre filter and noise shaping quantizer, the levels of the spectral valleys can be decreased relative to the levels of the spectral peaks such as speech formants and harmonics.
This reduces the entropy of the signal, which is the difference between the coded signal and the quantization noise, thus lowering the bitrate.
Matching the levels of the decoded speech formants to the levels of the original speech formants; an adjustment gain and a first order tilt coefficient are computed to compensate for the effect of the noise shaping quantization on the level and spectral tilt.
De emphasized and level matched spectrum 3:
Quantization noise spectrum Figure 24:
Noise Shaping and Spectral De emphasis Illustration Figure 24 shows an example of an input signal spectrum (1).
After de emphasis and level matching, the spectrum has deeper valleys (2).
The quantization noise spectrum (3) more or less follows the input signal spectrum, while having slightly less pronounced peaks.
The entropy, which provides a lower bound on the bitrate for encoding the excitation signal, is proportional to the area between the de  emphasized spectrum (2) and the quantization noise spectrum (3).
Without de emphasis, the entropy is proportional to the area between input spectrum (1) and quantization noise (3)   clearly higher.
The transformation from input signal to de emphasized signal can be described as a filtering operation with a filter  1    Wana(z) H(z)
The parameter d determines the number of long term shaping filter taps.
First, an LPC analysis is performed on a windowed signal block of 15 ms.
The signal block has a look ahead of 5 ms relative to the current subframe, and the window is an asymmetric sine window.
The LPC analysis is done with the autocorrelation method, with an order of between 8, in lowest complexity mode, and 16, for best quality.
Optionally, the LPC analysis and noise shaping filters are warped by replacing the delay elements by first order allpass filters.
This increases the frequency resolution at low frequencies and reduces it at high ones, which better matches the human auditory system and improves quality.
The warped analysis and filtering comes at a cost in complexity and is therefore only done in higher complexity modes.
The quantization gain is found by taking the square root of the residual energy from the LPC analysis and multiplying it by a value inversely proportional to the coding quality control parameter and the pitch correlation.
Next, the two sets of short term noise shaping coefficients a ana(k) and a syn(k) are obtained by applying different amounts of bandwidth expansion to the coefficients found in the LPC analysis.
This bandwidth expansion moves the roots of the LPC polynomial towards the origin, using the formulas k a ana(k)   a(k)
g syn where a(k) is the k'th LPC coefficient, and the bandwidth expansion factors g ana and g syn are calculated as g ana
0.95 0.01 C  and g syn
0.01 C where C is the coding quality control parameter between 0 and 1.
Applying more bandwidth expansion to the analysis part than to the synthesis part gives the desired de emphasis of spectral valleys in between formants.
The long term shaping is applied only during voiced frames.
It uses a three tap filter, described by b ana
F ana   [0.25, 0.5, 0.25]  and b syn   F syn   [0.25, 0.5, 0.25].
For unvoiced frames, these coefficients are set to 0.
The multiplication factors F ana and F syn are chosen between 0 and 1, depending on the coding quality control parameter, as well as the calculated pitch correlation and smoothed subband SNR of the lowest subband.
By having F ana less than F syn, the pitch harmonics are emphasized relative to the valleys in between the harmonics.
The tilt coefficient c tilt is for unvoiced frames chosen as c tilt   0.25 and as c tilt   0.25
V for voiced frames, where V is the voice activity level between 0 and 1.
The adjustment gain G serves to correct any level mismatch between the original and decoded signals that might arise from the noise shaping and de emphasis.
This gain is computed as the ratio of the prediction gain of the short term analysis and synthesis filter coefficients.
The prediction gain of an LPC synthesis filter is the square root of the output energy when the filter is excited by a unit energy impulse on the input.
k 1 where r k is the k'th reflection coefficient.
Initial values for the quantization gains are computed as the square root of the residual energy of the LPC analysis, adjusted by the coding quality control parameter.
These quantization gains are later adjusted based on the results of the prediction analysis.
The prediction analysis is performed in one of two ways depending on how the pitch estimator classified the frame.
The processing for voiced and unvoiced speech is described in Section 5.2.3.4.1 and Section 5.2.3.4.2, respectively.
Inputs to this function include the pre whitened signal from the pitch estimator (see Section 5.2.3.2).
For a frame of voiced speech, the pitch pulses will remain dominant in the pre whitened input signal.
Further whitening is desirable as it leads to higher quality at the same available bitrate.
To achieve this, a Long Term Prediction (LTP) analysis is carried out to estimate the coefficients of a fifth order LTP filter for each of four subframes.
The LTP coefficients are quantized using the method described in Section 5.2.3.6, and the quantized LTP coefficients are used to compute the LTP residual signal.
This LTP residual signal is the input to an LPC analysis where the LPC coefficients are estimated using Burg's method [BURG], such that the residual energy is minimized.
The estimated LPC coefficients are converted to a Line Spectral Frequency (LSF) vector and quantized as described in Section 5.2.3.5.
After quantization, the quantized LSF vector is converted back to LPC coefficients using the full procedure in Section 4.2.7.5.
By using quantized LTP coefficients and LPC coefficients derived from the quantized LSF coefficients, the encoder remains fully synchronized with the decoder.
The quantized LPC and LTP coefficients are also used to filter the input signal and measure residual energy for each of the four subframes.
Unvoiced Speech For a speech signal that has been classified as unvoiced
, there is no need for LTP filtering, as it has already been determined that the pre whitened input signal is not periodic enough within the allowed pitch period range for LTP analysis to be worth the cost in terms of complexity and bitrate.
The pre whitened input signal is therefore discarded, and, instead, the input signal is used for LPC analysis using Burg's method.
The resulting LPC coefficients are converted to an LSF vector and quantized as described in the following section.
They are then transformed back to obtain quantized LPC coefficients, which are then used to filter the input signal and measure residual energy for each of the four subframes.
The main purpose of linear prediction in SILK is to reduce the bitrate by minimizing the residual energy.
At least at high bitrates, perceptual aspects are handled independently by the noise shaping filter.
Burg's method is used because it provides higher prediction gain than the autocorrelation method and, unlike the covariance method, produces stable filters (assuming numerical errors don't spoil that).
SILK's implementation of Burg's method is also computationally faster than the autocovariance method.
The implementation of Burg's method differs from traditional implementations in two aspects.
The first difference is that it operates on autocorrelations, similar to the Schur algorithm [SCHUR], but with a simple update to the autocorrelations after finding each reflection coefficient to make the result identical to Burg's method.
This brings down the complexity of Burg's method to near that of the autocorrelation method.
The second difference is that the signal in each subframe is scaled by the inverse of the residual quantization step size.
Subframes with a small quantization step size will, on average, spend more bits for a given amount of residual energy than subframes with a large step size.
Without scaling, Burg's method minimizes the total residual energy in all subframes, which doesn't necessarily minimize the total number of bits needed for coding the quantized residual.
The residual energy of the scaled subframes is a better measure for that number of bits.
LSF Quantization Unlike many other speech codecs, SILK uses variable bitrate coding for the LSFs.
This improves the average rate distortion (R D) trade  off and reduces outliers.
The variable bitrate coding minimizes a linear combination of the weighted quantization errors and the bitrate.
The weights for the quantization errors are the Inverse Harmonic Mean Weighting (IHMW) function proposed by Laroia et al.
These weights are referred to here as Laroia weights.
The LSF quantizer consists of two stages.
The first stage is an (unweighted) vector quantizer (VQ), with a codebook size of 32 vectors.
The quantization errors for the codebook vector are sorted, and for the N best vectors a second stage quantizer is run.
By varying the number N, a trade off is made between R D performance and computational efficiency.
For each of the N codebook vectors, the Laroia weights corresponding to that vector (and not to the input vector) are calculated.
Then, the residual between the input LSF vector and the codebook vector is scaled by the square roots of these Laroia weights.
This scaling partially normalizes error sensitivity for the residual vector so that a uniform quantizer with fixed step sizes can be used in the second stage without too much performance loss.
Additionally, by scaling with Laroia weights determined from the first stage codebook vector, the process can be reversed in the decoder.
The second stage uses predictive delayed decision scalar quantization.
The quantization error is weighted by Laroia weights determined from the LSF input vector.
The predictor multiplies the previous quantized residual value by a prediction coefficient that depends on the vector index from the first stage VQ and on the location in the LSF vector.
The prediction is subtracted from the LSF residual value before quantizing the result and is added back afterwards.
This subtraction can be interpreted as shifting the quantization levels of the scalar quantizer, and as a result the quantization error of each value depends on the quantization decision of the previous value.
This dependency is exploited by the delayed decision mechanism to search for a quantization sequency with best R D performance with a Viterbi like algorithm [VITERBI].
The quantizer processes the residual LSF vector in reverse order (i.e., it starts with the highest residual LSF value).
This is done because the prediction works slightly better in the reverse direction.
The quantization index of the first stage is entropy coded.
The quantization sequence from the second stage is also entropy coded, where for each element the probability table is chosen depending on the vector index from the first stage and the location of that element in the LSF vector.
If the input is stable, finding the best candidate usually results in a quantized vector that is also stable.
Because of the two stage approach, however, it is possible that the best quantization candidate is unstable.
The encoder applies the same stabilization procedure applied by the decoder (see Section 4.2.7.5.4) to ensure the LSF parameters are within their valid range, increasingly sorted, and have minimum distances between each other and the border values.
LTP Quantization For voiced frames
, the prediction analysis described in Section 5.2.3.4.1 resulted in four sets (one set per subframe) of five LTP coefficients, plus four weighting matrices.
The LTP coefficients for each subframe are quantized using entropy constrained vector quantization.
A total of three vector codebooks are available for quantization, with different rate distortion trade  offs.
The three codebooks have 10, 20, and 40 vectors and average rates of about 3, 4, and 5 bits per vector, respectively.
Consequently, the first codebook has larger average quantization distortion at a lower rate, whereas the last codebook has smaller average quantization distortion at a higher rate.
Given the weighting matrix W ltp and LTP vector b, the weighted rate distortion measure for a codebook vector cb i with rate r
i is give by RD
r i where u is a fixed, heuristically determined parameter balancing the distortion and rate.
Which codebook gives the best performance for a given LTP vector depends on the weighting matrix for that LTP vector.
For example, for a low valued W ltp, it is advantageous to use the codebook with 10 vectors as it has a lower average rate.
For a large W ltp, on the other hand, it is often better to use the codebook with 40 vectors, as it is more likely to contain the best codebook vector.
The weighting matrix W ltp depends mostly on two aspects of the input signal.
The first is the periodicity of the signal; the more periodic, the larger W ltp.
The second is the change in signal energy in the current subframe, relative to the signal one pitch lag earlier.
A decaying energy leads to a larger W ltp than an increasing energy.
Both aspects fluctuate relatively slowly, which causes the W ltp matrices for different subframes of one frame often to be similar.
Because of this, one of the three codebooks typically gives good performance for all subframes.
Therefore, the codebook search for the subframe LTP vectors is constrained to only allow codebook vectors to be chosen from the same codebook, resulting in a rate reduction.
To find the best codebook, each of the three vector codebooks is used to quantize all subframe LTP vectors and produce a combined weighted rate distortion measure for each vector codebook.
The vector codebook with the lowest combined rate distortion over all subframes is chosen.
The quantized LTP vectors are used in the noise shaping quantizer, and the index of the codebook plus the four indices for the four subframe codebook vectors are passed on to the range encoder.
In the pre filter, the input signal is filtered using the spectral valley de emphasis filter coefficients from the noise shaping analysis (see Section 5.2.3.3).
By applying only the noise shaping analysis filter to the input signal, it provides the input to the noise shaping quantizer.
The noise shaping quantizer independently shapes the signal and coding noise spectra to obtain a perceptually higher quality at the same bitrate.
The pre filter output signal is multiplied with a compensation gain G computed in the noise shaping analysis.
Then, the output of a synthesis shaping filter is added, and the output of a prediction filter is subtracted to create a residual signal.
The residual signal is multiplied by the inverse quantized quantization gain from the noise shaping analysis and input to a scalar quantizer.
The quantization indices of the scalar quantizer represent a signal of pulses that is input to the pyramid range encoder.
The scalar quantizer also outputs a quantization signal, which is multiplied by the quantized quantization gain from the noise shaping analysis to create an excitation signal.
The output of the prediction filter is added to the excitation signal to form the quantized output signal y(n).
The quantized output signal y(n) is input to the synthesis shaping and prediction filters.
Optionally, the noise shaping quantizer operates in a delayed decision mode.
In this mode, it uses a Viterbi algorithm to keep track of multiple rounding choices in the quantizer and select the best one after a delay of 32 samples.
This improves the rate/ distortion performance of the quantizer.
Constant Bitrate Mode SILK was designed to run in variable bitrate (VBR) mode.
However, the reference implementation also has a constant bitrate (CBR) mode for SILK.
In CBR mode, SILK will attempt to encode each packet with no more than the allowed number of bits.
The Opus wrapper code then pads the bitstream if any unused bits are left in SILK mode, or it encodes the high band with the remaining number of bits in Hybrid mode.
The number of payload bits is adjusted by changing the quantization gains and the rate/distortion trade off in the noise shaping quantizer, in an iterative loop around the noise shaping quantizer and entropy coding.
Compared to the SILK VBR mode, the CBR mode has lower audio quality at a given average bitrate and has higher computational complexity.
CELT Encoder Most of the aspects of the CELT encoder can be directly derived from the description of the decoder.
For example, the filters and rotations in the encoder are simply the inverse of the operation performed by the decoder.
Similarly, the quantizers generally optimize for the mean square error (because noise shaping is part of the bitstream itself), so no special search is required.
For this reason, only the less straightforward aspects of the encoder are described here.
The pitch pre filter is applied after the pre emphasis.
It is applied in such a way as to be the inverse of the decoder's post  filter.
The main non obvious aspect of the pre filter is the selection of the pitch period.
The pitch search should be optimized for the following criteria:  continuity: it is important that the pitch period does not change abruptly between frames; and  avoidance of pitch multiples: when the period used is a multiple of the real period (lower frequency fundamental), the post filter loses most of its ability to reduce noise 5.3.2.
The MDCT output is divided into bands that are designed to match the ear's critical bands for the smallest (2.5 ms) frame size.
The larger frame sizes use integer multiples of the 2.5 ms layout.
For each band, the encoder computes the energy that will later be encoded.
Each band is then normalized by the square root of the  unquantized  energy, such that each band now forms a unit vector X. The energy and the normalization are computed by compute band energies() and normalise bands() (bands.c), respectively.
Energy Envelope Quantization Energy quantization (both coarse and fine) can be easily understood from the decoding process.
For all useful bitrates, the coarse quantizer always chooses the quantized log energy value that minimizes the error for each band.
Only at very low rate does the encoder allow larger errors to minimize the rate and avoid using more bits than are available.
When the available CPU requirements allow it, it is best to try encoding the coarse energy both with and without inter frame prediction such that the best prediction mode can be selected.
The optimal mode depends on the coding rate, the available bitrate, and the current rate of packet loss.
The fine energy quantizer always chooses the quantized log energy value that minimizes the error for each band because the rate of the fine quantization depends only on the bit allocation and not on the values that are coded.
The encoder must use exactly the same bit allocation process as used by the decoder and described in Section 4.3.3.
The three mechanisms that can be used by the encoder to adjust the bitrate on a frame by  frame basis are band boost, allocation trim, and band skipping.
The reference encoder makes a decision to boost a band when the energy of that band is significantly higher than that of the neighboring bands.
Let E j be the log energy of band j, we define D j   2
E j E j 1 E j 1
The allocation of band j is boosted once if D j
> t1 and twice if D j
1, t1 2 and t2 4, while for LM<1, t1 3 and t2 5.
The allocation trim is a value between 0 and 10 (inclusively) that controls the allocation balance between the low and high frequencies.
The encoder starts with a safe "default" of 5 and deviates from that default in two different ways.
For signals with more low frequencies, the trim is increased by up to 2, while for signals with more high frequencies, the trim is decreased by up to 2.
For stereo inputs, the trim value can be decreased by up to 4 when the inter channel correlation at low frequency (first 8 bands) is high.
The encoder uses band skipping to ensure that the shape of the bands is only coded if there is at least 1/2 bit per sample available for the PVQ.
If not, then no bit is allocated and folding is used instead.
To ensure continuity in the allocation, some amount of hysteresis is added to the process, such that a band that received PVQ bits in the previous frame only needs 7/16 bit/sample to be coded for the current frame, while a band that did not receive PVQ bits in the previous frames needs at least 9/16 bit/sample to be coded.
Stereo Decisions Because CELT applies mid side stereo coupling in the normalized domain, it does not suffer from important stereo image problems even when the two channels are completely uncorrelated.
For this reason, it is always safe to use stereo coupling on any audio frame.
That being said, there are some frames for which dual (independent) stereo is still more efficient.
This decision is made by comparing the estimated entropy with and without coupling over the first 13 bands, taking into account the fact that all bands with more than two MDCT bins require one extra degree of freedom when coded in mid side.
Let L1 ms and L1 lr be the L1 norm of the mid side vector and the L1 norm of the left right vector, respectively.
For LM>1, E 13, otherwise E 5.
The reference encoder decides on the intensity stereo threshold based on the bitrate alone.
: Thresholds for Intensity Stereo 5.3.6.
The choice of time frequency resolution used in Section 4.3.4.5 is based on R D optimization.
The distortion is the L1 norm (sum of absolute values) of each band after each TF resolution under consideration.
The L1 norm is used because it represents the entropy for a Laplacian source.
The number of bits required to code a change in TF resolution between two bands is higher than the cost of having those two bands use the same resolution, which is what requires the R D optimization.
The optimal decision is computed using the Viterbi algorithm.
See tf analysis() in celt/celt.c.
The choice of the spreading value in Table 59 has an impact on the nature of the coding noise introduced by CELT.
The larger the f r value, the lower the impact of the rotation, and the more tonal the coding noise.
The more tonal the signal, the more tonal the noise should be, so the CELT encoder determines the optimal value for f r by estimating how tonal the signal is.
The tonality estimate is based on discrete pdf (4 bin histogram) of each band.
Bands that have a large number of small values are considered more tonal and a decision is made by combining all bands with more than 8 samples.
See spreading decision() in celt/bands.c.
Spherical Vector Quantization CELT uses a Pyramid Vector Quantizer (PVQ) [PVQ] for quantizing the details of the spectrum in each band that have not been predicted by the pitch predictor.
The PVQ codebook consists of all sums of K signed pulses in a vector of N samples, where two pulses at the same position are required to have the same sign.
Thus, the codebook includes all integer codevectors
y of N dimensions that satisfy sum(abs(y(j)))
In bands where there are sufficient bits allocated, PVQ is used to encode the unit vector that results from the normalization in Section 5.3.2 directly.
Given a PVQ codevector y, the unit vector X is obtained as X   y/
The search for the best codevector y is performed by alg quant() (vq.c).
There are several possible approaches to the search, with a trade off between quality and complexity.
The method used in the reference implementation computes an initial codeword y1 by projecting the normalized spectrum X onto the codebook pyramid of K 1 pulses: y0   truncate towards zero
( (K 1)   X / sum(abs(X)))
Depending on N, K and the input data, the initial codeword y0 may contain from 0 to K 1 non zero values.
All the remaining pulses, with the exception of the last one, are found iteratively with a greedy search that minimizes the normalized correlation between y and X: T J    X
The search described above is considered to be a good trade off between quality and computational cost.
However, there are other possible ways to search the PVQ codebook and the implementers MAY use any other search methods.
See alg quant() in celt/vq.c.
The vector to encode, X, is converted into an index i such
i < V(N,K) as follows.
i   0 and k   0.
(N 1) down to 0, inclusive, do: 1.
If k > 0, set i
The index i is then encoded using the procedure in Section 5.1.4 with ft   V(N,K).
It is our intention to allow the greatest possible choice of freedom in implementing the specification.
For this reason, outside of the exceptions noted in this section, conformance is defined through the reference implementation of the decoder provided in Appendix A.
Although this document includes a prose description of the codec, should the description contradict the source code of the reference implementation, the latter shall take precedence.
Compliance with this specification means that, in addition to following the normative keywords in this document, a decoder's output MUST also be within the thresholds specified by the opus compare.c tool (included with the code) when compared to the reference implementation for each of the test vectors provided (see Appendix A.4) and for each output sampling rate and channel count supported.
In addition, a compliant decoder implementation MUST have the same final range decoder state as that of the reference decoder.
It is therefore RECOMMENDED that the decoder implement the same functional behavior as the reference.
A decoder implementation is not required to support all output sampling rates or all output channel counts.
Testing Using the reference code provided in Appendix A, a test vector can be decoded with opus demo  d <rate>
<channels> testvectorX.bit testX.out where <rate> is the sampling rate and can be 8000, 12000, 16000, 24000, or 48000, and <channels
> is 1 for mono or 2 for stereo.
If the range decoder state is incorrect for one of the frames, the decoder will exit with "Error:
Range coder state mismatch between encoder and decoder".
If the decoder succeeds, then the output can be compared with the "reference" output with opus compare  s  r <rate> testvectorX.dec testX.out for stereo or opus compare  r <rate> testvectorX.dec testX.out for mono.
In addition to indicating whether the test vector comparison passes, the opus compare tool outputs an "Opus quality metric" that indicates how well the tested decoder matches the reference implementation.
A quality of 0 corresponds to the passing threshold, while a quality of 100 is the highest possible value and means that the output of the tested decoder is identical to the reference implementation.
The passing threshold (quality 0) was calibrated in such a way that it corresponds to additive white noise with a 48 dB SNR (similar to what can be obtained on a cassette deck).
It is still possible for an implementation to sound very good with such a low quality measure (e.g., if the deviation is due to inaudible phase distortion), but unless this is verified by listening tests, it is RECOMMENDED that implementations achieve a quality above 90 for 48 kHz decoding.
For other sampling rates, it is normal for the quality metric to be lower (typically, as low as 50 even for a good implementation) because of harmless mismatch with the delay and phase of the internal sampling rate conversion.
On POSIX environments, the run vectors.sh script can be used to verify all test vectors.
This can be done with run vectors.sh <exec path> <vector path
> <rate> where <exec path> is the directory where the opus demo and opus compare executables are built and <vector path
> is the directory containing the test vectors.
Opus Custom Opus Custom is an OPTIONAL part of the specification that is defined to handle special sample rates and frame rates that are not supported by the main Opus specification.
Use of Opus Custom is discouraged for all but very special applications for which a frame size different from 2.5, 5, 10, or 20 ms is needed (for either complexity or latency reasons).
Because Opus Custom is optional, streams encoded using Opus Custom cannot be expected to be decodable by all Opus implementations.
Also, because no in band mechanism exists for specifying the sampling rate and frame size of Opus Custom streams, out of band signaling is required.
In Opus Custom operation, only the CELT layer is available, using the opus custom   function calls in opus custom.h.
Security Considerations Like any other audio codec, Opus should not be used with insecure ciphers or cipher modes that are vulnerable to known plaintext attacks.
In addition to the zeros used in Opus padding, digital silence frames generate predictable compressed results and the TOC byte may have an easily predictable value.
Implementations of the Opus codec need to take appropriate security considerations into account, as outlined in [DOS].
It is extremely important for the decoder to be robust against malicious payloads.
Malicious payloads must not cause the decoder to overrun its allocated memory or to take an excessive amount of resources to decode.
Although problems in encoders are typically rarer, the same applies to the encoder.
Malicious audio streams must not cause the encoder to misbehave because this would allow an attacker to attack transcoding gateways.
The reference implementation contains no known buffer overflow or cases where a specially crafted packet or audio segment could cause a significant increase in CPU load.
However, on certain CPU architectures where denormalized floating point operations are much slower than normal floating point operations, it is possible for some audio content (e.g., silence or near silence) to cause an increase in CPU load.
Denormals can be introduced by reordering operations in the compiler and depend on the target architecture, so it is difficult to guarantee that an implementation avoids them.
For architectures on which denormals are problematic, adding very small floating point offsets to the affected signals to prevent significant numbers of denormalized operations is RECOMMENDED.
Alternatively, it is often possible to configure the hardware to treat denormals as zero (DAZ).
No such issue exists for the fixed point reference implementation.
The reference implementation was validated in the following conditions: 1.
Sending the decoder valid packets generated by the reference encoder and verifying that the decoder's final range coder state matches that of the encoder.
Sending the decoder packets generated by the reference encoder and then subjected to random corruption.
Sending the decoder random packets.
Sending the decoder packets generated by a version of the reference encoder modified to make random coding decisions (internal fuzzing), including mode switching, and verifying that the range coder final states match.
In all of the conditions above, both the encoder and the decoder were run inside the Valgrind [VALGRIND] memory debugger, which tracks reads and writes to invalid memory regions as well as the use of uninitialized memory.
There were no errors reported on any of the tested conditions.
This appendix contains the complete source code for the reference implementation of the Opus codec written in C.  By default, this implementation relies on floating point arithmetic, but it can be compiled to use only fixed point arithmetic by defining the FIXED POINT macro.
The normative behavior is defined as the output using the floating point configuration.
Information on building and using the reference implementation is available in the README file.
The implementation can be compiled with either a C89 or a C99 compiler.
It is reasonably optimized for most platforms such that only architecture specific optimizations are likely to be useful.
The Fast Fourier Transform (FFT) [FFT] used is a slightly modified version of the KISS FFT library, but it is easy to substitute any other FFT library.
While the reference implementation does not rely on any  undefined behavior  as defined by C89 or C99, it relies on common  implementation defined behavior  for two's complement architectures:
In its current form, the reference implementation also requires the following architectural characteristics to obtain acceptable performance:  Two's complement arithmetic,  At least a 16 bit by 16 bit integer multiplier (32 bit result), and  At least a 32 bit adder/accumulator.
The complete source code can be extracted from this document, by running the following command line:
make On systems where the provided Makefile does not work, the following command line may be used to compile the source code:
o opus demo src/opus demo.c
On systems where the base64 utility is not present, the following commands can be used instead:
The SHA1 hash of the opus rfc6716.tar.gz file is 86a927223e73d2476646a1b933fcd3fffb6ecc8c.
As of the time of publication of this memo, an up to date implementation conforming to this RFC is available in a Git repository [OPUS GIT].
Releases and other resources are available at [OPUS WEBSITE].
However, although that implementation is expected to remain conformant with the RFC, it is the code in this document that shall remain normative.
###D 4kEsV00VJzbGY0S2CgiMTPuHXv6JF0i4LjBpbJyvgMzWQjJ2KwrIrrk5YDqzNt ###w5ozr5JXP9aT0D qHxUbhybbuwgg1CqMXTOcMycwomY5QoujS2IJbDvmWYbtL63L ###m4RYJkXn2nSZxYnooWPMGYmiOsjAYQFormmx4KEsehBWkOxJjsupCkQlWmHBTGpo ###UkVU4nroDnPjAW4ZeQ1q5QJzxnibETcUD3sRKwhboTePUe67yGe5dXx3EtxT60tn ##
###aghXvXZTGWhQ7zbxbnc4UC9Gw95AK/zzn3UNSb//nj qdz B8rE/UDQNegNQO/22 ###iuyQ/6DeHaqKhibqNtqjJo42ZUAW0O0NC221ow6x2BC7P1W7Sga9S gog8YVXtYv ###1LY6/MTru1SHXarrsjco1KFfHwzVxqhdH0B/NOj3NAVIsaaqNdp1taM0K1g71gjK ###tdIdgnZVb7czevZuusqggKInlYQLBdpq/aKtUEVcyaY6UBpD0mb5q4GmQ/HaGDL7 ###SkPFHwXlo4K61AefyiB4asp/j7AQPoRmvVNvoWrFVYtAwiIFbJTGaKB0SGQ0gza6 ###0IbqcDRUoNXrNbmdNWVwrTYU7T20exo31khTyljDsE4VEwu0FD7GshcjTeU2U7tD ###ZTAY9Ydqr1vCBr5Bq6CMdSRtcuP2ulxVNFBv8AmZFsgG3PZluLlS8P6A7MktVScT ###aGixxhASxbA NOAwoWOhq7TaakvpNhR62iMuN6qmlLCpVJSsRSyp2ps61jniKlMT ###oVTip6oVIpct84YE9RLqzWuVxJaFsek1VboJN1njSpq7Unj18lnBfyazA10MDn5l
###/vlb4b/zM4H/T8 rteo54f T4/PjF/z3LT5vYIkAi2YJCAASCqylxq4MnlsDqd4U ###3gDsC1YhqxSy4sz3gK6Qyx4AFnKJMRaX7Mk4C3k8DWqtEePxcOuJkkSIC9nsBXRJ ###vZ4OvEivJ2MvZLIH EVcEghMdJw9oDBksw8ghmz2g8WQ0R7hGHLbGyJDXvsAZchm ##
###5bpU0p suP iKsi3Eum92bE2udbXOtYm13oux9rkWvtyLIDItVos8LnMZDIyA0qX ###bm6R14Qeo4lFTOM86YxEQHfSPpUY NYOr1MW8BYqft2QJEJ blTPjD/wuPEn0eOa
###n7w8JsXnIp0DuMleQulZondku0fppXt8i 6xPtdZuui cp0ITPwFcp1d8o4xe2ze ###EePvOO9IhYh1ecdK4rUp1dgtAcsmHSvSUN05K4P/iZcDxTfaNmedkWR4rv1ftLTo ##
bUXOr S/L125nD4ryCQXOtp14 jC9WzCN1FeHDdKMivfKG qZL4LbPOANK88R4iS ###yIyd640eN7M4Zx31zwf/SMbAX5JdSFPzpIiejtTVmjPEq ZIEmdNIKVNRCXa7aLI
/tYqLupNvT5oLWs4rPIqhrTFm8Y1eXZ9YfAz ###K5YfVbid8 jyUhnow15P1zrU6w9r4viAI/aD0kYzYYZ7g6JtwDiM2MaWd5tuva1j ###50HXRYFPYoETh2vkCahIaNp0Fi52439db6tNvV9v/KoMif p3F0u7Iz5UbhYYC6L ###vKIdb3JT1jbWoy4FWh5MsIsQ67PIItHhDbTGOLvhLGl0QlDyaOvEY49Qhx8453We
###CJH8IEVttY4tFCerdXTqHzH dZs3anN4laFDitPVOrZQnK3WcX0xyJVIUpyv1rGF ###4m2OrdZIJCl yLHVZop3q3U0ehS6PuJAvkpyiknpah1bKHLaXO2SXPql0silyGnz ##
#LRQ5bS7Cuk5QTe8jwE3SIUVOm2 hyGnz5vDjhhas5rT5Foq3 X5FqBZ9nlbyU8Sn ###x7XjfL/aQJHTHoi6G4pOOUBXaWsrFDntsYUipz00tUWDQ67ySJHTHlsozlYp2r3e ###r/UrBZFOnrfXaOyCFBFmVFQRHzKxwA8rUZDrqnIx6t2WkhPTTqo5nqQOG1dr2hkp ###Tvj2k45hei4/E4hD13TKPI5qLFsM0hww eL8I8X8e49mdDlqFfMc8eyGCwYfAhKi
J ###F/8qWa6c74ng 8NX8tVGfZoSyjBHvqecb7X2lXwvR 12rrxnnG/teBvfZaKZnXpZ ###xuc4B/KYzU9 UwSmaB0lQTJrwuB1h GJR6
###Jb9KxVa iq0dVeTI9ksp11ciBCbXD6Xyoq0GBh075itRZwgLMcbQmzXxF9/6QQd5 ###fcaxr1izNAhyTUL Oi765xnpW6yRHYg1K3RBiX5TaJFjUiOauUtgyKU7CTdawZiI ###K5JLa6YRyl30pIRJt0KBm Z0Zpf0FCHQpyO5SFxGCGOZ/JAzFiTRs68o4lvyyT40
###FGFsrU/ cKKVSVJfQfdNhISIpo/AYwWRaxhNLOi/gAJzoI5zDiMFQk8VQUYb4TqE ###knWZBP37knN9345Cllhpb KtFB4hozYw2iFvQmQnsf3jt3sgCN8HxLXHfCUq9zXF ###07MH4dySMA9bi8GiDYMW2Wd6DRfG1bSuNrXl0krZR/JGNp5ZOzG9EY3uvsKezJrn
###Yv510B nqCxZmwFT2mHD4MWxR9wKzEEi8z4i6wVdKDwMd3GpgJNeHObchQVw wr7 ###sdyepDuxHk2S1HAHWok5j848elKv05N6vcCkFFWZT1ZQrh7S7Zu m9PIIMaltZnA ###qPno8kDGbEKhLu/k7OwiyrzsMaiVump8G4066AIngI9aqnCAwjsuCIs2ievNme3x
Z5lPCXMpZfaUspcygjw7Uqlh21LxO2Q0Ystq ###yjfMl4T1UcKE6RdkWkmlTzwQsKfQspG1FAfC2HfPiOczohhmUZL5C8l5EM24Uo3K ###IRvpVVMNCwOteIzO08AMiRs2aZxFNw3qWk10VcK7K2HB82VmWUaU8XE46VynjLXM ###SNvwOWE4Rfboue oatJKq/
mAldajLaseGE qQnKC2H77toQLB3 fYhzGLeQXG0 i ##
#GdVXKZwVuTZQNgo1QDbjQI9mtCgiK/Yuye1sr8DHEE1LlhGm6UOdt6LEWhmA9AhR ###jMmv0KfrSZLPimC0lP5ATDh5uqUZ rl2YjxA4FvDURf3W23dwQuKHLRcwYngsBXc ###84/DEz50LH7VdItaVCmWyZSpGzjhiKOVUbQ2WTdW56kbq69zKZd9IffIy7gsfq0f ###tjGKDlvgwJcI1UxGXB3tVZ1prfwpiCYY8IU9sI2MP9A1HgvX04GPR7/
c5t6TR6TI0RFn3g4iNrM F/Pkvljkfhfda/RaCTi ###f3mN6jL/xzL 1zL 1zL 1zL 1zL
1zL 1zL 13PF/3pE3K dt0cZEb8Skb7mRPhK ###PFeBxx4X 4uGOwCiP0bNHY74hUMPUfJnq3hSvZDKWkTWJaMRJG4 328LuxGkuuxy
#e4QQaSWVIPM4UuWhLwTt0JJWnhAcpDUbmvCIa2qyliMN2dC6eGZlsKVg66I FivN ###uqlQPySys8rbvE4pQAeb0nwm5WFOV9Q5TJOuE51bhl7fSU1AphL9UDFutLwlGBt1 ###k9QOKmjAcxHyg906zMB8SiMKhxNz2fDXDKHWkwEZyesIASOykwopI0YERy3iCizR ##
JaRcxsixk8R0wpHg3UtYvW7YrrVLxmUd7eyTu/fDIexw5ZrgWkfRDVZcxMGQxB ###3N1GQJsHAzY3Jn0uAXSigySKSydyBhYjFZdewwAJJ8jdKyJUKodfGNAZIXpFIoCr ###duvzJZuYqjQyTmyZrMvMUtrBXJj2WNeYs2sZsQp0DIUF6wobb7Z0Jr45P3dX6Dn5 ###0ZU2QYoz3M2dHLAweV3YiO9AhxabdxMj4CLkMFID7zwXC7BN060d8oIQFeNlxGZM ###DN2HMQ9SXLHCIcP9pJT2GaAbnEyHAT5zg4DPbzMGDQ6HHpoWFaQCU86uSvdCWvSA ###ojeJODB0RMWcfluY7644J4hlRlm7mMRPkX2dr0inEd8jGp6KTAZGYrB09UuXTgY6 ###ACkTQVll3BvKcQ P6VwyLoCRY5AO89qNOQfsW8mB/3HhPPhXq2CDxMrlyZ6Xzlm8 ###w3yV2AZ92FwWuWaspAotMVIz0T1zUqjcuWvx5weR1Nma9rf5Qz/cNlqWuKNHR1fZ ###KrMN3YARJFTQ2gR88lur0KRqWw9UNt2VjrmC1ol h8pOOYe7RBxJidYEjytawnAD ###QEsin0xR2K9mkhEEGcODsWLKbk0DTLYoHdmSIQ1MlBRNyftK0UDO9dYaMgBCbNJV ###cwqrAuxJ4pNj6cQCJ4JFHaisFkyMisPdAtrJIQmizkPSTh6iCSYpW 1tMZFhcOWj ###BLq12t5W0UdArGcWiabsi3iLFBp51CHv4K667jXb5SMoBuqEYysZVvUMn 4o4Mte ###NLwWBhhCyCeldG7/4n1eb843Q6G7TRzUePNK6Xsw7gS0hFfLoVoakcRe7MqHThiZ
###pDlQApql1Arw8FVmLo7dbnLXxufNF9a1p0qvleJr8Y3Bbgu1l4DSjhIrWMckRYXY ###kB8V9GhHRjJkNUxUGrpQdMJXQuSmUzPb/QrNm2OAEhxCc8yecXnJ9OIFGWSJo58V ###PsHwmrQ/tHB2BIA2K3bKZELQC/sTjsQhtB0osQzGQArCfxEykRppwtO 9iPg/MIO ###dPFmzNdbsISIfELJiEyQ0pvAzyxzeeEug7HwHf8KEWxiqjZWRHbiMBbtkNMkYfP9 ###mMyHMDJnIoT3rohjo7hrAgDqNEpyXgg8gCOptQQQYyO2EnGxMd4tGsZZyv HYLgy ##
###iMw2k82ZLmV2i3uaPDm52XRpdQ7ary6MEdY0yf7IsqmRNkgsaahEIy U7f0ZsDRR ###lxw9xF6PLcgiigsuSsGHHa6RkZhIVb6hySTtOJl3spEoCl2R1NkntMUjMxaWal E ##
###hqx3ZG0ZUuD2Ax9NbuDQ8LTEsSICKiKN0utUkO8L G3Uy kO0nvPWN5Zu0 CcEzw ###ESZIMzcgnc6kXsH20FZUhbNijlnY7Ts5lagX9S1Yo8XqCxTj0wNNFLIHu5O4eCGU ###FB1t4mXc9xMii8nQqWYcQGUFK2Aq3dQ5XZYYMypssf/8U7bznI3MlrWGPq0A2KG3 ###r6HWe5FKRewUcIy6sA2p dudEb5n3/5KsWVJCP5cQkDL8JVoALW93P5/5fYXmvCH
###iABr0Z9//x9Ggd79sm/NUSc5YWZJUwEcZ P4ueFCRxn4VtIQQeeAbGVrAiBy0G/Z ###Kklk7JEOG8K1NaVHpMGSay5pmeRdcxCzGjGetmP8ivyQyjCANEY62PKtJobRTidA ###MFj3RL6bB1g4vD5MLrdwVqWhlZyVlRXTYyJt3SKdlmjC 0GWdYsdu8W0YCHZMduM
#PPxp0B vRn9g69bwtWpPi Rx4j7FEDywmpdXdUR TtT2XI/6bBRu QhRRAmHA1j1 ###0XYhJy9KQSbAu3AWC3SLyZsTvu8dBreo8haXC7aTJO81ZWMjVz7L5iUB969t8/Jl ###9i5pDDLtXeRUZtm7MLY9YO8iGyH5iqy/
#WGu48uKFdftqk5NH376K6s92 2qfL6UUjZ15 7pvsDbic9J9lXBPj30/mQV65ekK ###RZvzx47mMHQpsp9x zvv0jdrzf4NNKqzr1ueouG0zvcs1uRxes3H3xxkbhy5Qx6
###yZQP5IsYc5JJW0k9dYPjizWbQlfawN/dBhy3UbBW6njVsJVVVOTex2/BOZuP1Whz ###VWTI6lsb9UGNOz7TS5CxgQ1dOAkpCZ26kYrtf9jenr21LX32V9nVD2u1lxv632RD ###J7XjX7StF9Ghz9jRD2ucTdnpT9I4G44SCzAnUuNsgjBL45y FpA10tcCNhM671og ###Qccedy0guzGvBYxpqEXyMTyFpLpS4Ea9Amqspb8h78UVpVcUrbPWVvg7s55tNA6E ###PoPoEhuposkVupVYfHyXZXfTYn0qLS2TaRSMR9rOnRRlar/FJUPvizFYmFAzkqgv
###ODMVJjAUVF4rLx48GN4YUOKVGCMAuwvQfSl8a22VSenhV2sy6qQ6vHizJ0efriRI ###pKrzobZ SfXwYsUfx1POTM3F0tXVZSUFmtOV2UVaO8o93JI4wFqjXg lpoR0a6p0 ###lW5kJFU8fCGIJ33C30NdEdq0Uqun9GhmbGNuqUVLRPRwPuUzCV ijFie0sxGeCwI ###QypDECVAqkckZNuAepEKMGaYOmoV01MxNC2sZSY6OtXe9zkr9Xx XgNG2qOToBvC ###olADjYUbUMmMfgm7AVdeX7iynQ7pfApU51Y1YyeOn9uOypF0OO33ubadHj6j9tHp
###PBj2aE0F7GyMQZHNAaWG ndZATGwFgxMqM1nkxNbbzFnYZS65RnXIw3TlJb2Lwbl ###sN2SQ3oSOouDLxw CDFxmDwGh9NH97EyZJkPZvN4/FsAmQeUCWIu OGyJI 9BajH
QDzPaUfJDZkXie7AhDebQ Tv3hxIQDjH08osS06uHx25aM0trq ###AN3r9fS70 PzQwE44 H5T9YXKNDHQvrh2 M9/SW Dvr9VgL2Ewox0cJBph4eX7xN
7FfhsNP ###0HjQzdoWLVzLzii2V9fbSax2DIVDtElM4UrrNiD HLA GoW gQm0F4J40uItoN8A ###J09qqCjjUas7uh16rerMV1kvgOn5BLSntXM29zXWbx0enc0rc3R09lCR6dhr/fBT
###hXdZb81geVnvaVqIyzPfwQBmvVNUOZ5dBLdHZxT0MosMR2EMh/ 1Pw40MDLKQSuz ###QSQpI9HtrAJRcIUJPWGTtcg6qM8mDNlF47A79fsttDO5uncbCxTKKhKP p QBGS9 ###A/liDEDx4dwwhpNVkrKIAm80DFogo8Euyywk2sl6155GVy2WlqHHjAI3nj/r8U/Z
cVqun4nCOyQUhbHlIC2P8xfLdJHLdJHLdJHLdJHLdJHLdJHPly5S ###Znr8 ScjzyN9MbI5Buid3rEzPMIz1GNbzzi8HaZ75IgGV0E78nFz4p1D ZN1yAFB ###Zf959uu744QF477f0bkX4 kAiIlyYCHJiqOKo5kiUl15UvKtBnupiUDH6DUD9Bip ##
TjG/KSwPe/GhX8/e23dmIO47OBL4 ###jJaTgQ7kLIW2xMlJq0z5oiuD9pghqn9BL7JOMMY0HA7rs6WjEEUV59DLFFwwR7kz ###hhiUfDpEgmq2c5phYD6R6WmMcj8a5QQIuTujzNh5S3AXy5fjENIYQGggz/Bx8Y6D ###Tk2H8JYLmsPBTGIHePsxvk8GYGaDVCBjAz kT6mOD Oe0BXVLEMXUMeC1HQCehY
###QNp/Pb34QRQQhu6f/L7bcFABII3W LWO5WFhvmMmLJQ4sy88H3GMwCIiQuBhNokA ###53PSrWuBNeW2v3BNUV2DTCAjPHCIfD7fmf2jqbNcxG7wzIvoJFdxOvyydcTRsiVx ###YsVwjcicFDaPBL3QsGR3llGfOuZ7DGSaJn6ipvHtVzFMKi3axCa0kSMS2 c1cVz  ##
XHqAh T/Rq2WkP raBK6lP//dPl/b5b8v5gBKNKbQ5DDXzkmEikR ###XXAXOaCF93nnzTlIgjEJ68hq9P175IF2dG4moMDXK9dCKOS62BSF0iPGSMQSjO B
9d cXb07kC/ZREMJ B7b2aKBPvZfagUeW2UIiMrxaud62nmFUyuSjftjG ###ZzpOpbhd5gRkHJM3v0LRYEfOPRB1CoTXvQd6grnJOOwIHyZwUEMBFWUDymvVgh1v ###Q4cHxQAjyIQrCAFynAGmtzh9y/Hxm70XKOxAX Gwj AiGYK92Kh3h0IGtzgKQv4F ##
###plWgN3mnCIPiUmUqlHfy SfMr8TsLA4c2KKoD0tNsRSCK86 aMyeBP5FIDATACfw ###1QYAPkkDYABDeQYInAOvNHSCfsAhnTBATkw6vn8F0ajE4fYpxP4EGXF0xHbiOat3 ###fLBzllg fMTDFyOPg4kceCVr0NYIlWfm69N3e63Wi2/HkX818J3XexSYJ4aNAYzU ###cIIMHP3NKsEEj9AcVo2/dOiP6IkOI 3maZw85Oz858r/RHr7487zWQE8IP/XapXk ##
Wpz/HS7WaHMm I28Qqv2CQK ###U2CJ1ts3sKtfvDBkrB5wR61u EliCj/1LTmsLe7uDCEs6ow3X9gyIvB40z4ceFEw ###2JRR8GlYTlNIpBg1JdfOl70NKuDDi5
###rvBdek2Hm8lFTj3wkk/u5cqc0ciAt6GcrB/KbqO6XitVvbXG2qWT 1CurNCIYR4A ###k/yKWLchAPeujKXWZUOvKRdfhFf1Mg2fczXFy0BJFIiKiM2CNIQ8A6DUAIpjnlWM ###FRTRnbQNw9w05rvUPsUm5kQ7MKRYCjiY6dhdqVXX1jY2KrWG667Vq43isJCD0a97 ###1eoGvKqvV9eq3jo8razUKhuNmrvRaKzX6hu1dZiWaGlvFMhcv0DCgygoaZY1RC8J ##
### HmNrTD zDod/kwxW0bmft iuiA C1dYHFN7koyhbNIpKXw1cJkrOKuVGob9cZB ###uQaYhb4UXCDvnJ0AZwQFvJX1ysbaxkG5Lk5I2dY48G/QRhfPSKNBb8Vr1DfcVQLJ
hln ###4R2cdAR3m7C8hfndle6soTMk3NLJ0Sn8xWE3SvAM5sl4fuyW7pCqJFrxCIZQ6tib ###866afHcMO/vOm6eSe9KPXitchSldsRy76pOnPlXVp9qLFKuBwJ3FaCAG331XuUMt ###cA9 9IbYZq7p4P3FwSlO2iUakJebBCsCJBGeGeXW8nI5qC3uoLIGHVB9yWDTy62s
###eFG P4rjIJoAIdwGDuilajrPJqJMDzibNKcggwOSUtTHLwWi2ALJnTrlh8z41Pm4 ###lbw2sK0mu6qocAh8SN7mXc/RhE0e1kh//MgG16sXJqe5Dkxl3duoAaPZqK1VGsAr ###qC91elktDE1Ot2PylZKjFLyYYCQTkoJbr3mVUrWyXqtcpnhMepwk32WuAtyQgotM ###7zi5HTmnwe0E5RHJ8sR6SmXkfHK5qDAE8XkF2XyNWfpVMReJtwqsEe/
###k1FmU98li54Vo3/ LueX2nknZ4jReUORlc/5 UL6HV5G4ss2ejsZber7LGqVNU5C ###c2XeY6HinNhvaB4v0krwLQet8aUaygz82hynXQFLm0oMeAri35x6bVnPz6jHGgm3 ###cVf11FWDPF75kOAwWr68LuRbSDpwMEIBisvIM1AaSwfvN/EjOprZAKf7u4YJHA0Q ###nJk11szZYKmMuaNuS3X2E5ID0imVcBzm6uKirdSLuTtYVWvN3fzWVo5K54015ZZI
NtwnNMOdt ###B9IDoEdm01RHAdeqVIrfJGBhqRV7wiEwB0QABNmS85IafMUaMZa3J9zVK cf3f8a ###vixhtvtJXiidPovrY6fplO9mdAmvlYpyZn sdpvTIbaiVWhIaIrFxG00CtM2jMjS #
#OJKrcbcAVpngYgUOQ4s LwgsnLmu8mdAirr6iwAFdIuOHj678vy9pR4sjl2iIkJD ###5KQVDTwZdH7e eMPx37Go3wApDQUAU8O3WRDdHt7Blz1rOeA19/e1jZWj6WiYmgz ##
T qce2ZmqHPnaB ###RZW/zwLTgL7iApfbT1DHiEE9w9o uKxsrviOsEkt8jtzG7975D7WPlawfLKyemit ##
###4Wlsmd31vAuKBe8m0heiYnvqnh51UhvVFuam5 51io5 erc5oZyfv5wlOOa2N0 ###z3pkz1/mnT1e5U6JLvPI1VeL9U1PuFnkOvmSfTOL4DYlaeNC971AkZ/y1lOJOT89 ##
#EnlEZYE/Fg3HZz89MzItdNYbQ/tHNxudivPZv58W5ABxuDu75 iom99uZiiA3Hrx ###p/zDeCWHKiyxye4Prb5GI/YA/7Khyl1gbwPjW5sUNT89fV/I8WfujcJMhUJ67LP3 ###DI7rp2ZTG9Ubp1OVShiuHMa72gKEVDgq0yZLbJU2WlwkdqQoLnblAztSFDZ3ZYbM ###tHPx7mzn4iDzUISJ 9ttOW2/qemXv1XWz/FiuJ2UCKrm7P0ZunrTkN6FAWeN4uvT ###fez8iSd0JoHHV9vbTcd1v4Te86hmHN6M2ZkC48zb9OqDev0kr/STW/3LVqT6VVak
###YndxQH8Sy6tWvf70u4PEuB hc15cO k fMWcXNW3fxmNfPv8NLLYdDCyxhcdWzQs ###6b63AF18Ntr89lloc
#I5wkcEdDSnb7yumG6I F1vqYBAbhs/q0G6lkQITPixr6PIjnerBpzfjqQ5zKYy7S ###Vr/ApkEPchZLsoq/mvOH aAWQgwP3m2TM4AVXgInYQWXEEW3pK9AoqwROyHJAlXr ###D K hfiP0vuKKn8 xn9VdH m22Ix0D8f1R8m7GJoz3tnvFaZcyf49gxG1To5enuu
#LuimvzlbdFHQOcsRXRl70SvO5ipMiGA/ zIQr1U/7Zf LIEA/j4 9LYH/cL 8wuP
###cWTyNYgIt0NzYCkPRxW3ppgz4wQnfRlLJkAeGB/G/2fJJ7oi YSi6QPjP8SNiaE1 ###jQE9k0skDuvl2c4vL0HI6ESjGMuPpv0uqcykzAEiQ4zaSApMirlmAFog85AobePE ###HIzI9Gm01zsZl8WA9SMgrTqStmLs5omunNs4qH86 PuVg6FjyvygrJ5ImJzTwtCB ###SkkLEC8UzviANCYGywOWebNZe9T2Op3naYoD2FcKYAymazTzdPdT3JLdLrVnjtFi
###A6QraTtJTBNMY9H63pajPpfBc d2Il0bU534 XKyXWvYJtCTwxbRexLE2hwpfm9n ###DXRms9K1I6PZcqpZyWi6jQSHZuzs2W4AaYseCSKyZs4lAYVMQHIJaAzOLFbfuQIS ##
###UjqbYWHU7x6Il3aXzCl2Rj4QPmrl6n7B7s3py6Gk pUjmjEWM9lye9q9CiayKasR ###TCVUcoIODLADX4cdMQv c3wiK G3YXvnkx/2/
###6Pv3QfeI3hjNTG5HrbEfi r9URy3IjjCEnBDvHwk1OZBwp4vVilQD9RZFgASw GR ###tCgXbRgHf8KQ9AM68UI8lMlLAQTGFl4gzB31dPgF6DcHvcU6Q8 wwXGNkwiTGsHz ###LWTWqiVGker9edftiYuUMUgW2jHHmEF7kfFfytx/b
t5D/55oBX4QgCV3fO7srzgUcA2Ebft0vpDHIrEmy5FKXsNQlLHUJ ###S13CUpew1CV8TV0CqhJ 2Pn5oAWTODyitF9K1Ift2wuvSPyXibnUu1Hciqfj8Sia ###2OoB4qtmKQzSKgmVOezd cWbk9bJm/2Dc7yLez31I DMAyYVMowRic9wkJLxUP e ###Q2Q5QTzBJNOBzDMsCHJ/dMWGSQgqon49OCr5og5NGPHcpJMQyAfQESYWQCqgOZFE ###24cDfAxybQiSsrwAFO6Bqr1mrWRc0IvcwZTB 1MQiZEheQb6VVmpNLx6zatVaRDo ###EcSS85XXwqZMczC8aBRyObxhF0wqjD57/ebBXuvo M3rHJQiv76whx /w19lN59n ###J8fVArEK8D8 397uY97gkgPk2LmywYtsjjMdg5DzCfgSkGeQTUD3UBioH0vWpx0A ###UHiebAlwS4ZVHR9ZBOls7uSClauVEsGvcncIP3fwkxcZuHGg/W0YBgyoyaPK0bDQ ###FoqnkHO3tsQznErR/q7Ksy8oZX6HaltbTbdR7vNDaBmhsLWFoNsUoDiF84V5jls4
I/SNlQmwS04MKCqMLaTp3HQsDvEB8GQKGrKtAfGUQwFKv/sbsgBY ###H5YruIIzdYyZ0QVqKpyU8OiOfjdUKm3p4dpukgsnQ4iyPfPzfrHZNuflOBKQxTbA ###pp18WsA3lbs1WAY0KmPfYvZHZefLHLZVLm9X8hJQRz2sLZ1MgzvYJbDTKnfrwO4j ###ywIIArO 9gEeBuoI85QBsF9wcMvZiX3bL9JEuA3qCEewWjjAxmGH3QYRbUk0XYqC
###LcCZdZNLvmkvN3a 8Ionl7uWp/G0eTydJ LmNNbWXTgcMdAFUQnh/AW4ZLU5/LQp ###WD/9M/Djm/RTlUzJfgz8zWYKQcV5n8LaGj2mlhSP2er N/xDXowb/9TUOMwvRL6s ###S1W3XMaP0HPTNZI84bCb8LDsJrZGrtUWTeTLuVZHfi6 IJNaLvAd1s4XsToU4W95 ##
Dl3WvqR23hHH2lQ4mmTtVrT ###QRv6JUXbACVEUZWdaIJx3 8EqEwrYZFTlAhQuTnxb4D4/kjAgsVx0BWuxBTZJ2dV ###h2TCGJdTaLX8zjXVFnWhWp/8K0YIvFy4EqyQZsMe02m5Cy0PY0aIKSyGBTwhb/7I ##
yn0if1WAPhxu L80wGinLtpuisrKz WgGu9KXSu ###R6M4gEI3efn5x7JbusG97rxyXBooC7fiNS2IkLFHgxDGKlcBh7QjyPaoJ10PkCyf ##
###Nf5coZG4G/TMqdar9Le vsGz3PA2TMASINbwl0dj2KAHXrWBwKhXqzTbyjr99Spe ###vcGN1iyYuFiYZlxrQHW3QTCpbdTwi9eoUZPr61SsvrFRoUbden1j3WykgYWxkQbC ###xFun1YE2oJa3VqnwmxoOzK2vuevYWBXAum41so4N0UTW4GOttk7jWfPgT73q1rFy ###bb3hQdPVtZq3ho2sN2qwbCjEImvtCKKTojTxFGiBSW54MwHjc1p2nVH7t6AjIk1J ###WsG3J0AtYB9qikNqKbG30ecFr45o/Kpf3toV3NqwgWHf4zbO581LK0kFcvwWyuWd ###IpMI3O rHuz4yoqg5UBhkRUM7oApivkc6gPjNIBhxk6njycSnQNiAOhC5/d7GdOn ###mFNZEKD7jTBCwkhwIMKSpphEVuRRDVQR2TnhycfDoKNG3F6wkiW2DrSSMUZ1TwGc ###h0G6kITejqIbJrJE3AOYBamE4NDPYgboLI1L4jJHENoVjQlCe3Ib9Ptl6eNLtLBZ ###4TNZ3cYEdxOm 2JBKybFrigqTOCS423D8YhXLfH9YBBMorDzSmPCu9yPpdO8ONfw ###jBqEfVwtJMxIcd9lUtzKE4iu3EPwAOmTS4SHqY7xO/FH/01UrxLJoZdrTHW4EdFW ###VbRSF3/XEtXxORfyqEiN6zX4z3pdNMbNuLV6ojp2yRUbWMT1qHevStWrazyi ho3 ###s16tJqpjaeqRK1Y9qtdY50fr3JjHYwI6uWFXpznSSLlDUa xjkOpNuo0aCBfNLJq ###ZS3RO02KZkgDFf2Jeusb9A0OF5peDYhiAvIIUgYMzU8Mk7tT1dYb1Q08PtbrSdC5 ##
t73Txd7r4 ###O7u4RjXCtIogwCCC9oKIdDZ4HlFoRH3NP8HzAJHmR4mZKEngnX/sAI4SZz MJ9G0 ###g5xANLrFFcf7CnGbQMsSi8sJZgzEEQco9ykcQRtUSdzrwy7D72oPILKASMYCMOLK ###jxpZaBVSSMGTepPDDRoMRhFxIdMYi5AuRgq1VDsWHsnyEv4XPli5SULV9jTs0 WB ###uOMPAKoe7RkYNTZBp/
###hJQTdq7l5QM6vdNdj9im4ykxAu Sp7zAUSF SVMFEFEV IUYpE57wtDTVzaC5XJe ###4RRVGAq9ygLTPHQV1AhHT2xsc3m/sGiumQ/FGZQMHkBuB3HFgY3AYC10yRzvj8Z4
jb2r4K4 bLeWC X6 tVUWYw ###Gk6um/9n2uev9yDbNYH9bCC3aLq9JO921bUJIWfrhuizvuwn9lLSaYCxNIRr3TQp
m zfKYvJGZCvC3QdjvLls5m62tkDs4mR2wsyyWLzZkpST ###pIkc1ruB/bR5Uyzm fRpTUF0Qiyn4x6tJGcvOJpDMohtHBa9WnvDk09hfN5lE78D ##
/H5i3frhBoPdJFTGQAWAMNAdH cRwqv1OJA2EyQMBmQvHIMw ###BljOFzlxPOqEZPYgrQ5Iw9C6f WYnYsbKqjNlgIzzjoklqEr EL7WAvJEqnQus9L ###k3NK9hM3y2SR3AqJKN0jfYJdUIzz/
###WaFsGCJ9JLxgJNCYUX0KZnjPhhmuu YlEAOxgpxgBGLUvgJi1L4iYtjPbvoZzyID ###gWo5oTVYDH9 kbd0MRrWoVvTtI35fmDKN8Roabs9qcxlx80IDSWgEnvnIq/H2IQ6 ###Yzgmuw7AM j3mOtGYzRysJA2dzpMM7khO0ciTDRJHOTrQ35TcYDOWajkYwUuY RN ###n/nRm0hMA7mFzU3BIiDVuukXbyJJtkz0rGn0pFN9vNUKFWuBjCMc8lDTOuOhO9YG ###aX8VcgDB6ttQnYYhGZeA VtR/fOjtkE1tQ0e0nA8apOkdoXaEq2hurh48rYQYtQJ ###uhwJ4ckJ0OUWhA0tMnEc8FvokW M87i25Me2IqB9hCMdYQAgcm1jc/BuwBcyfMXL
/lw4Vcgyfucyfucyfucyfucyfucy ###fuezxe9cLVAsmc5oMAAKwglv6ZgYj/AuD/18xn1/gqStrDbbaDwJB G/ NTAjHU6 ###pify15P7cSI1yBZG8Fy53jaesOmg9czIMtJzvhFO7yCUCT6r9UP xbeOiMNnPHVy ###bl5NRBMEMWr2UCBLWDHsoOtw1RinEklFIQpZg7YIAMZRaGIdD0D7irI3GLphxdM2
###6t8TussVPdhrnRydHkGZUkvkb6VoUxSKFJ6UqfZ3ZfqyRV84T QesHpk20veWejw ###rT0KCU2klSr5xMoTk6xVB2PWwWNFkFRDdAzLl1BryH7fYttw1Iu YAYINEbwNRmY ###K68isNEu7jlq052c77WAGuKOU1tWijvbGPBy6LT2D3bfvUZWT8cNorhxQ2N/te l
###NM QG0f 1cDXBXKt3XByDph7FlBUNgCP0N 3WmJjUiqOTqsdR9owm Kvte5IzWE/ ##
###hkRaGWKFYre07sjU2 8ASe4KJT7dinU6aa47x7y6ryL07p6fmeRGRDqU zbGfQpP ###79Ybeek2O/B/o4wxyisf2HzpWz9EBHYwSxJWRFKhvNe1z3oJ3wnPYElOUQPXTZIr ###DseHkBQLUtbQJeSKgxdivxFlsexwPqHyMbMxWVy0Yi7H/1z9zw2IF61eb/J8OWDm
###UxOUVAT9XfRAthLIKXyhFkhqXnQM9qdogrJH8mhN0HMMxtAGOUuN0CM0Qs gEHJe ###kjLoJfLaT9UGJVVB0NaTlEGZmiAc2FN0QRmKoBfO01RBth4IWnmSJiihBsLIKI9X ###BGVqgRDej9UDZSuBeG6PUAPN1AHRsi2oBXpQBQSNzVECsSqBzxGinxgUG4hTSNIu ###b7TEofZ97Px4dH5ePjy8II3ANQj47YD32HXgfwoNW28O4E2RIOMp8KhvgItyrGAc ###Px69NRLHoPlLRj4ZNslO55RxUqy/LNSS3FnrajqZkTnm4VQ0mYlnQD7t3LRQddOZ ###1wqDFYQGTPYCcOmSHC7ck31h 2WH/CFCryJgCX0RnY5I4YwokCImJogUdyI0SryC ##
ZQFDQ74zs4 YBFmcy41GKb ###G5TuWhOnh6dKN5hbVDWNwwmcQjyrZZRLBnPenc6rN8h8xzYWWbNjH1JjhKzkCkSR ###yS07jlAi1BK7B2S00moHV06TPm7KGEC5sFnZDLdON0NhFiWtbrCUKEz1ik5YGAw2 ###jbeeeA2v1HMYCUZvnZS3xQhj QbtsND94betweZv2gTr9xfZqzrZ1C wk/J2BA2f ##
#flHwrFdV81V1HrGzu03OiOeuFxK Fg1AroSb6RqhXSN0ymaNKFWjmtFJeX4n1Yxe ###irN6eQTDsaTWS2q9AEPyGGq99yhqvbcwtf4fQmP/3alh dHUsPh4alh8PDUsP5Ya ###SlXS2c7 0fvWxS9vWm9Oj3
###bHrZ WHn LD15tAY8EqUn0GCJN eWStMQ3f31/O9neOds5xNxRGpoL001NS5opvN ###IKCengJPp2g0n0HZPD14nkjZLB9lg6jcnN8oEeHmzIYSBFK44ZbLwoFvFuv4v5go ###lpakcCFS PuLh3nDmTRsb0nEnouIlf/3UbEHiRhzdvWlwp3Wv1KiPy7/8fhPlf/U ###TOl1OptyudXLh7T2TCuypNHZBDObHN77pfv2Qkp LHPvkxycTQnv21kvPfl6cpsg
###dM9wbVBpmshKkKcnlaJ9uyAeylNFPK6Kx1X7cU08ruFjU8J3pjBQZwoyPuySqZPP ###5FAlHtRNdtQRWJHx0Mt6WM16WMOHukeDMjVFp/NYXUdiJizEh2lBLM/lPJbXkViM ###VbzCIpWqslKVKlUXqlSTlWpUqWZXmqliWMs8b2qXc7QLbmWhOlY36 ZZZtP3Wd1s ###zK5iU MKHmUGMV6zD4X1tJxfwWPMrhHaNUKzE0sbYBN9qHVuLQN2Xrr34RRNvVqn ##
###GsXfDHTrmape1beNLGb0zMf3m4k8jrir7 mJAxyMuctFjif5hUcrWSooM0ijOywa ###ttqe9jjN/Hjap4C87Xtn7JYGbmnslQawECsrKyI4vcgi74wxWVbBGeCfJv4pu5ec ###Z7UC34dp9lmF3iUP4ptei2dDoQ5F5jsDmWFEAjcFWtY2JRpxPQcnNR7dBhH5jwHP ###or94lIdrKDIBDvxwiE5xgH7obCZyRlkXuCL/3ND5hzO2ODwVNNHJpV4YcQydMd4J
o5Dzq Jj7E72jhkEniGPKJiOy ###IcZjv6MzcmKflOoaPfCx gVlAaQlpnjhlPSaPK7CqykmEW1D8zcUBSeAHXC/4jg7 ###MeVcKmH1IxVAoRcF0jUWP
YLdwnhoTMo8iPp91Y7O3vsF9osYDF7hJW0sZoCV2 ###vyoad/w bhh3ZVVUsAkgjpBSzgrI5LNJo6lngdawRvraXnd6HfYQdhXrjSSLMIyt ###LV3sG9kcbWVYGP1qy4HjJXGwqLfAFr5IHFfq3XYzXfFqBAdNzw/7Bnm3 aysmRof
###Kri3PeJs0t7pXUmmASBN3wxU4BawtrWMUEyuiI5oztX1Dq3kE0Ijt5PeK1RLTsuO ###tW5UMQgtjnIzITvPjr4voZCbqctPvCAC2wuHpcQTYP1N4QAFlIFOzGUk7jrWH4WA ###9OFk5/3hzh5GLbjUL0P9kYCmZA1jW4vjv zKnSZ3uyZpFeefRoVXjtQGG1HaPScH ###E0KK2iNz8JdHw/K4j5wL stjqCnhIx50X6r0ws5uOClHHKpMJGOBXSXHYfBy8uRR
/h1m3p4R8REK/sLx7PD JhFakrShiXYcyhlSgIr/SUEi ###EW9XrvFrOwrx8jMZj0qHOcfThLKp4c0KRe4O5JdpNxy9EBkkl/lIlvlIlvlIlvlI ###lvlIlvlIniMfiWS837x9d94SWsYfXnwrgo7bT18kE49wKQrXKG9kWyAX96cx/nsB ###JxMmzHi591InFcw0A8rqDrYVAo0e8ec5xTAZIGwCuzRJU7PrqJEcHF 09hZo3Mpz
###BrI/RicF k5skeBnDswxEouCuWgQquJSFOOP7hHLLoumnmwyUM4lHOiACgxAiC9J ###QKSAQLN6HCBSQBD3HgsBYu5094PkdMUTMV1KQ4BcSypEqcGRGZfycFp2YKiYIoaD ###mitc2R2JU10ijGIe4bPIV4CHrgETtjxCbiC4A9axf69zuOCYSsxC3MrZf5xCtck9 ###1IAhtinDzT1n1vS7c4GAGXMSX8X092guaDAwDG4ZEFx7hZlb2RXmYeAZ6O3hcDxW
###jSQKliewAekMgXML6MrF2ZtfgRJOh5Owb0KI2CuzCRH0lfhcGfsVhjO6h659GAxK ###CC c/xz7sOzOYeyc 4Mx5d JcEFybC8EY9xo4Icf/pVXhQlRWpSl/ZTixhJzhNVh
###kxZd7uSmejyG4dGRyxgcSn PRTpjOxskXYBFAhhatFiL1AZ0FtyBcgbpTWhMQg6N ###H HI HxHpgx1L7PHpV6MOwPn7d4Jl0cC3uuP4ERhTBYaEh8l5YHfh1NjeEWtF1fL ###7kqFzN3Uz7k4HEQVLtsO7kdwqnN5IlvqkoZCwiMJt1oBYHX64XjMlscpAkhJvoIr
QYPAAuR 3j0jbCGWgTNlQZt9TCQYGWh81IOXV0DCPwUl ###TR4xb8Go05lGeELkUC pySYcC4J1PzrBnbwD0j7imG4TB8IuEIpRoQNnNAiuR7fO ##
kKqAEQ/W5OOUhHVRmA31344oQwkholP1aN/jMOmtRskDzdQ BpTAn076WfDEi7VJ ###FHYmDkIWK4uxkzeUEIWk3uRxopDAkOcShSyN0zxRyFZNsRj0QvBff6IoZCYkkwbL ###T5OJJAp dXnIBvGszZrWpxWylv1PE4hkhwmBSA3uSwWiFFj07t8PnkMekhNIy0PG ###HPTIFuAyrHGpF3SU7yWOdnEnSiKJb gRRB04FFLHIMwT1lZcAb7EVl4KjoB0fVp6 ###4HtLqm3tBNWSPmvuTURfcd7Rme6Lw0 QyF Ojo9Jk/jLm7MfVyzm6Y06yHPzWZ48 ##
# QtRRbDsWH4G2z4Dfx6DPV CNw/wTdlMkCSBJhPkzMYi53GMkPMoVsjJYoYeBb4k ###N6Rg DA3lHGj llfoyrXEOuOFsf2P9X
diZA9bCwGtDBXuv8 ###15PWLqwoqrbX86KZyWji95ONCesVbWGF ooouAIaiGmTE 3uvdk/EA3nMH4BNzwQ ###Cvn4ftAe9ZkbzxrRyc57Urbn3HdbW8Yo82UXm9oVk2NnuDZZUQ3wbPBly8B3s475 ###Gk6K8igiwWMU06mQOdTzH44OAbXMkZeNjrnfPR YEISGBILROl/ocveZPVy8eUtT ##
NpJWGEMJgjft9fxwHrYEf ###3 TyKzxDxP7VpmPEarcCU2WeGLjcsOXNiI5GpFCOz8nAsS4U7bPwfTEsEAGhX6IC ###fCg5HTMq0LxKQIKRFuR1KuFkjNaHa5djs7cvHntZD94Mbg/o7t8EbE08poBUnwIi ###JFKYkkYsIHCH3anfF 9LMnApV8Ut/oKNgX32XnGu0G7ljz/GxavC/R9/NF1qcRDe ###iRqqPSVgUfcrOgo U3p2sQkBO2QNiktqmFuEIGIZR4B 8b70wkxnZQYMP7u/LyWp ###9CIBySkwvxkKymhzkiL92uYj0cyNJG8h7RcYTX572zXbxSBwP/NBSWP1Crmb8pqg
###XWIouq2tMJGvHNfnt63TSt4MgEeLtrXLzwTAEuCGtVQr4fevWh n/nCSwVudZjBR ###YkFLTtBBo3GnAL9UuoOD819PL37AjlNbzkB4gQw/75ztH wd635Lzj2PWr6BnhA3 ###7Ye63RL5v9zlzaxyvyV3ZqxDOk6BMMfHQc/
evbCd4 kg ejuPtnQPT Zg8LnKCSe ##
eRhfVRwTUMeIgidKNV 3TbnV97cjsCDhjY ###C9ToxC8FNeBw1rAXTw26yc3zq5DfAXjMpwTWkklH3YZo0doM76kMjAzQAZBEcNkq ###9uXrYOJEaMQsbhOhVRn7cjpQ2yS5E3DPv//w2 W2GXyRRgQPm64Zb9FKPydLmPHG ##
#nff0BH9vJqL5wd767dKM W59tzeYmNLdPby/v dCpENTGAXPflTz3keDRIBFOQ5Q ###mKf8MdHoNzhMKXoFa1/H95E/CGUaEZz0j862Awu97ebTwa4ZBaPOeA79QKAWm441 ###WSdrHjzKo57zHnnfyWjkxHDu9kvMBkcBhxQNJ9KPlaaJqFbB0WYfc5JvgTFsASzs
###nL0 cBubaahQ0W4w5MNqNs1G23URsVpGu5pVNpIRq92iIdD8WNbTKYZFN7ltxWzM ###k3aVQyjFwMqgl93AvwJajerrSQDM51WANipdFERhK9z6sBLxCHF0QNfJItKL3pBQ ###FDF8NJ3EqAIhe5bRaKzJEq3szj4qlHBZXYsoqnRNJrE34HiGxOFM8H56 AGSRkq4 ##
###oZsFQPtQwZWBfwkgIWIBGvjM2Tid6wAIDO492DaruB 2m2obrcpNwjST9Rn vTVu ###lCGBw2BIyltVJNHd8FOIvLY1TnLpuHjlnPg3GOYjCqQburq69vtkxRZnHJ1A87RQ ##
###QTp/wFM1dMb3bLx8ZgX AfJjrADIUOVnKfuNUd3NsG84TbHzB aCHpS4qvijSOod ###2RnIXJ LXCIczLlCOPjCC4TFJyfhMP9qgedqXi0kp0xnlsQSHBsxlgeU2hrQhG/R ###4WActUK68U0giPHtV2kAgKUF6qSIEn3Sl/
###epLAJL69wwFYwMqEZCINtprIQBoX6MQjzLMAfOE3XumU3HyJv/3K3yxtEtoG0N35 ###ghXEfDSq0oQx 7hVSkxXF4vJ0CK27j8zEoJ/6eTfU74ha3q/2o efQJkpEttGigJ ###D4TNArdjvMIn VmUCFiyykqj2mig/YG3Og6l1lcaVNiSjVIDikq9klvPl/jkmvhD ##
#wP4wCigtWvYQT6FHGEUjn2FO1mkJkFEsyF4UfHRz6m0vrgg776Dj3yftycRFHF1P ###EYCAYpsTL S8gjkEtEGHFk0FRW9SyBGnXOYeQMSuaz2FMTgRddSwfxJBCcnV3Qgo ###2ovnjbivpFGoB8Pm6jyNvtYTgTgJL1KXhFoNrDN2s2RUxvJbFSXPcOv4sBjn/1vV ##
#oz56 itWzVwBnAXPwNDGn7Nli7Aa9UnNjf7jUuX/dv9wRamwhfjnbmIv204FTS5Q ###dwVD2nSyxUEomLh3h/EWccBFvZC4sJtWHZhnLy4YeSry5lraNxmYuwGV7nBwwuBF ###lHZiuTBGrrkZzf6SxiS9OMv6mNwRNu0HQB5aA//OeCqe4KgJZ8u9ftHsq zCwJO7
###ahkHRl3QaNKEAopvI2QsaoEbv/gFu76YtQyPJQGcmpm2v3UeASUQg 7Dxs7cTLNJ ###QWrvQwdlmzzkHyAGD GaBbxnpRzQ7Zbd7SKEhPYzrDNutO3tXJI4FK0tjVsepmY1 ###wLDDXZ65wT bI0SjOEL/vN0mnDFIujMTX1trk7R9gj25ZezH7M2YKN/sDTKeD7aI
uW1 r ###ryX1f95S/7fM//xA/uel/nCpP1zqD5f6w6X cKk//Gv1h1uoKly53p4f8ANzUzwQ ###UCQdciSe J2bFnnSLBZpJDOUiYo1YgQ7ZC6937lqRTBWMwwiHpQyAoN04wT re7V ###nQK9c4qOW3GrG5UaMGrCek456PtA6OJcPuHpA1NncZldg9rhpEx5Ahwi1vcOCLUT ##
###X7TRZyx0WXAV2pxZ4Gd2 ZKTws4ry0JYuSef/3BMxspVe7c RFfkTk/ZTIph4TJb ###xKDs5ktXC5PNVBE6RlKG94zkeCbTzgOkNk5l1iMtD bnPZj5NHGDsrfWM68zsFkb ###aRKruvmb7ioZJ4HwpCA/
K X8InxD2orYttJbzTHKFWct55eh ###okHODMpVuNqciyOfzRRiCcrDeVjLasVNtNCOZOyiKdMrSwVgQHxLWZS2qVE3eBwS ###ZaHKbOT6uyCR6Ry2t9UEYfdleuJ5ChpFoQJRNywSsG57KjuodDVLoGTm/JVhwmzQ ##
###WRSGl1Q2ZDkw6q1txhdS0AEoFIzZrrgePKDZqpoZjed4JvkkPgi6Ps HrfA m6ug ###jTP7lZdNiA g8152rSghAip32n8FlhKLOobZqZ37waLlRYtk01BEYe hwqhf2ms2 ###3ZmaJdn1yc57wDH6VtLDsNtNUHU5EF3VK lBza5qaDQIdiyCsj4lcz75snoP 8Qa ###pmc7SormeESVEj Yu0cFjLjmlkMmxjYXiE60XoE7xtfV9AbVEjR3mE84cNpGWKLN ###SmKZjk azWq6a1OQruW8qrtWkeQCvjQ2Sk5k9RUxX4Dxx2jIkuRGeZsjiBT/YIvq ##
#vNWovNQWJKKCASWNhCM 3 yI0zLkPGkeXmh7BdqjXh4pazAU jo45 StjS3z0Snb
QS0EnCL/E6 ###KshTLBkI7T1yfS3gx/AcL5pnyKUgWbZYcgPE4GbLJcJ8Y3E3vycVoPvBJACmUzEv ###Cf0lR9CzOYwPYWGv2Ln8Dtq/ydsASGmFUWLBWGPEBA1HYboHLUpVNjG4aVpqymoX ###1xgvEZuJG0jiNDYzSr//kPuNYFW8oZhyWPC7yt16pVJx/gngf WUo3TFz8kHBsE1 ###Y4unSn9OhHISIccpzFU8UggoY10NA77VNMIjpIIFGV0nsC4dUwHDPNBpVnI4nHqW ##
### KlXiiyvFXTbB0ltSPEIKdg5mlep3dbx 51pH M58V5L7QMRhyJGde6DYShMZP7t ###S6AxIzrAylplza001tY5PoBjxWmKFq/3q1lPQLdfVJzlr/wkKvc358FkAOQrmAuT ###ZKSNbBiZMZjHzQoH5BC8rMkT94H3ijIieHhzw8FArZtoVlB3ADun8Ijwj4q0aWry ###aTKjnvO
t5TK8CPWe S0dqSa6VtRUs6qTTsnyemQKg ###nwjf01fi702UeBXNC 0D2Ju76ZfXtGTcN7O8pEVis3KElSOzcjSn8qxN1MMRABTX ###JFhocmsK/DeR9TLil4YA
###5dHo1AOYBvTQrKTizOVglOScpPI ZF0fyA1wUsgZ uSy/lx2L/Po8rWeSGZh5Hr6 ###wpssisM2GYwtzQ mXRG0 HkQxXR8vdKCf77vJmptjIuHehewVDp4x2D2S5fo RM ###3aVWXCYk49Ot5rotoqDZejgU7s5ql8uTNqJQ0Xv7h3jU/
###wjulzFE/uVWZMUrfHnin1iljUw0Kgungb9impwmZEKeH1bccQ nq1YG1quZTUqtY ###h8qldVsxq5VK44F23AXbcesPteTZLX22YwFTOFRp9tsbTSMiA KCMLfu3PzwL/Zj ###GedTQmq4bUg05YTii7ccXsZXvUJOz0rBKb9qGioJK1ivoEaNnqOnyAnoh27Ww4p4 ###uJnKlgBtFrx6w/SqZuqScPtMiclyvyu6lspOxbMzZiymu9p09gq5WtlUQZr3UwZB ###xekaX4uiSUN5LtpsmrXMWK1JYtxseukRARxqVl6N7JqVdM2yUVPP2dl2PLObVFNe ##
###L9kCg N8N5ti/MCY6NRafv/Wv4/ZTkZkbyOTRrrbHmHGObwyRY4 nW3DiKEhb682 ###OXDGbcgO1bekyZaGJHjNN yoVHVon3MVTDA8RzfoyshZH9sy9Fy7rBavnKttbQl7 ###xRJw1MVTr8CrnF899YSiRtdcl4UR3oYa52N7C118 R3l4FQ77eNQCwI2taI3Jkp8 ###bIOouHa5vZ1za2Voc3tbWlJumlVyH4dFjO2HPsXZgbKg2FaTBGbTGfnj0DI47k2H
##QKnXHAYRxNIlO2LqLNdr3bYIRqgaSVW3vV7syaJuXU03kaKv3Mx68zlpH0ioY4Ph ###jvMY0wD/6ZRJEXm t3OMEXFeOeZXM10uIkmmWsYtCrbJ1GoZ9Mfo3HjKY5C5aSqX ###JZ3qWAYHMRLakfZOsz9EtJxm06mkcO/GHIWislYicbW9kZmUJQxDA1QZqUKcjhqv #
###CeS0Eo/PQ8IM1HsQrq1dlfntkTBN1SR4/tGkv0DcjDe7Dszesq3G800L0kJK1ce5 ###dZmtppgO5KvYgYxTUt7JjaIrf4jW3cJVAI5ANrdBSLOWNgRkR3ucUc gEPzKCvlL ###O3xxKGdrNRnq29sKGwCMla0t46tmChZamOxuzIV6ZGefrVykRz1lz 6u1EGQiDhu ##
cNG6 OXN2x92zg ARbJe2GK9oXkCkRDEQaltMjRNGeySxshwu6lE ###RQNDDAVEJrn43bLWYfhg muMPIJB1PLyUilCs18QmCe3QcBgz lYRokgGWTpC3sQ ###hJwV5xcU2MljhZRJajFKcgdHQZnsL5VaQYe0Mk2HjfusG5VfGeAPQ7lnRRNGIGAr
###xUoAw0ObZIxe5euQ66wWXEIsv5APrXFsoT9I1cutF8wovvnegBqk7EF2DIdMhCg6 ###2UX0aidX9mGX26x9NH8unkACN4v8IWJkzzVHKAUzxslS9blTfgjFVfqdxyFqChwP ###ktr52JutL1SwMoILiwWiu8FVLVRYRAO5AyPd9SyNrLxnTB9AKdfiAaWt/1U42lJk ###mNMFKKnlmskNnOZnRbnEQOgHr0C6l47SyHcp97WBf19wroM MFDhXdAtj0e4O30O ##
###FfDjZjLQzZQSEMnTh8Kpp8zaR2TppaACHMF04pgBj/TBaNuqsdKw0w IPmL9/uiW ###zdTwNibsJxSEHZSnDDMgaQI0IO4DNxTaQZBlrdSRC3MeNuWRZjyGCY9ht1NyktY5 ###aJljmeNw82x447CVDZvWpOxpFMzyKZByACtWjCPpI5soCh0E80OHBE415WKcrAoI ###hpiVjCBclvZ2yUD7QkcWBd/
llE4KunS7uzSqbbZsfW9DQk9G441gBbfmT1RGY4lMKOMbN 9zASA2b47YyZm 25m ###sL00cQFkfckxq18KZCUyaO1HfZoNgztkSGgXeE02R3qoHO4pN1mWvOeoEO6ydC4P ###vo6Kgrbf94edIKGMf41XT/KWkuLPQV8yJjKHaaWrS7qLYCNWbdfa5fSDqdOTlI9w ###bBq3j JERdfCHgb0e1h6FudiPuPUOSPrXDuTUY yvgXloHM9cjBOW5iIa2fyiXCi
###d0kiKdbAfYVnKTaEscJSd0nzeYz3j2cxMnQuDzIdqbXLaoUHotdKciQCjP8UsQKB ###YdYH2Vs4yIhjQWExg21JciyJxRb8Px7y4mE5sf4Z9xO6gW2nauqAmDB k6FW5M1d ###bBqdQ6dVwyIgiT6HxCWZLhIlwgbS9JkcJcmEwjniX0E0IsZrOEqrzhhHbrFKm5g2 ##
###0ouosd /alEjZBRbcn609k7QyXC2sX9Y95KKri1/HjyX1Cimw3nj4G4WlpmPeqYq ###hmDK 0gbxvrDezjgbKAl7u8WUaQYvkkUyTtJRHelKx6GRcf0hvjBbdCRyvnCKVzy ##
#T2moeGcgh5/Pue OUzdOxjVQ5vTIGpgd1uYqdRe5AhWu45UF7bkMybHJnlcLGWdQ ###CrDsiOkLjvP37PSahczQ6YWZsdP1jLUXfN7KS0x1t7e9Smb9zxnPaC9lLtQcSEre ###sE9h1MdBZxJNB88OHjO9TFLh CUwxLimpFqtraN2pB30ySQ2cF4OhdZMcRYkSWfO ##
###0mf/TeKsfzcUp7xwF42kBw2f81cjFWXJ8KDBC6BZnjMZzjPanuQLvWMyRg6DKuNY ###HOa2RfgElB6A2w/8qB8mBoe SE3tZqx9NqwHhg d4ag0NxlH2sVJ9Jb0hlJSRmcA ###Ytzmoq5apiXZQy5 qcE94OhnORXNcPVDb7 7SqUEv6r4aw9/HcKvKj6r4rMqPqse ###llLV9rDIHhbZwyJ7WO0Qnx3is0N8dnhoU4nNNOs2Y6SdweUsIFYyXQENCpTtqCe8 ###
M7QSmCbSN5xW8iXPS4r7D2diMd16 ###f0vfeQ1LVrxtG1iwCBnWQp9VRAzhDNwZ6Ng7LEiDNCGSMS4QxyGR2y7tno4p9MzY ###Dg9n1JsXVEEmvLPSyo2iCROddIyILshCLemlkREtogCSf6TbMz2qRhOoykK 8Vjo ###R6xAElYOQEp8sct3xqmoD6m4kdadWUpR/4To25nxpjkeVuKBNytulhHxKuNtQgmh ###I2zp2A8nRrgGgb/amc0IV66dpF31ag 94VsyZgJwTR7wTO5zhnZw7DBg P2E7WlE ###Yj08XgykgjGc8BgcGR9MgGKvoEJ423m6E3HDuFJKe6Oj25q1y lnGO021ajIWdPi ###pDviAV6D0Yuikzm0TRHYwlwVJVotkBky5XGot2Hb/HKa4aLIChB5LazLBr0e8KDh ###J4UPTU2tZmW7Nb79aral9Hj6YloRm7tWZ5B6eE8PZYwyTvyVkWoVT4xfW980E9Lk
A bv ###m4pmzMVugbhm4c8G8r0O0Gwfj6gg uTjBnZgT6KBhDL7tE7272NlnMdhpm6D7yPz ##
5b MNFDsSiroQVmqv2iNQck ###5ND6Pf pJPvG1HbGIqYSYFN1lOfsNItct7BXTNiJ3T9QfK9sGX4ZAXy4yJacWcox ###Gi1QtF0JW1y20aRTxhs53nstrTdJK xjAeZJ6GY15/cHo3hijJavZvPYzHA0LOMV ###rVbx2meSDUUtJhg7zWCe6Q6xmXagT4fSsYUywO3ONbrqEycuL7tgUt2RZsVt03qj ###0 TqiljZFuZTsGwjdHZSikLyxbLTDzvHhyCLiQdF4pdM8elz9tQzpipgt9C9Y3vV ###e/ytY3rbczCNf9J0iunXr0SHKI18l3FHmeyAmjHgptyEKvJekq8jMy4dcfLmdrxv
c//p1 kpP7N/kh ###uW98zyluc52841Uqa2VYDM85Org4dC6iaTwpOXvnR2dvgL6E4 uVN9GVcziaDrt0 ###TbDi7ADzQPUptC0aVXfJ0/aXKJwA3cHrmv8T MPyiR91nJ/RkAcxebXwQiVm6CGP ###g0zuHbCynQnsNLp1ODvcQ7Rccd72KaYfEAlW8cMLOr/9bpc2kd9nRQ1eVPOgqO2z ###oBuiXN/mYEWU94rjHcejadThoDntcOhH99jcAMgWuUxAy/h3NCVmaDDqhr2Qvf1K ###ZLI2DqIBTq2LMU3wbqDLwxL7G7Yl7nBgyHl0ZOCL9QbB5BUNrJwYGlnEiTHR5dcA ###jVSiYOKLmL5 e4S M3KhWEEzCVFzSIJ4P0TNXs/oU7qJGAOCHjt9PxwE0cqMUUBv ###BjjkKETIr68xECP2dHfUmQ5AgPHlWq1iLFNyXEEhMAr9fqzhrVxbzAnIaZ0Kpxoy ###CcPsijCgI7w5GIKEdz7qhAGehITe0IeJ5kMdrAcr8rqgB2OPL1C4q1EEmDLw75m/ ##
#TnZewxxzaeiYoMFmYJn23p0dnODYASTn73bPL44u3l0cOK/fvNknsJ8fnP18tHdw ###vukcvzknwL07B4Zof diB/sWrQDgoAQU3313fkQgPDq9ODg7e/f24ujNaR5W/ReA ###EIx0B2rvE6zfnNKcAVhvzn6FdnnlxGqUnF9 OIBXZwhegtoOguMcoLd3YRaDLgGY ###F8ZkKWrxwevjo9cHp3sHWOANNvTL0flBHhbv6Byj1R5x57/sQM/vaO64aDA2/nhE ###6CgRukSr6xwdOjv7Px
###6wUUl/GndPIg88YswFbiD17dTCDkVqoltwKM QaIWOt1 GfkDVorOWvwGDMlrK3D ###v7p VYWvrnhcKzmNDf1K1oDHaw0qJl814LH9D9MG8QXMY2aJz0R KDQcAZiSwoOT
###kyUgYFy9ZgKgsVKrrtUrlR4MZ8WrI0sHH sra/pj1fXq4iPm/8SPonJtZV2 q61Q ###Bf5ILfLHdf2xsb5mV643VGU1CLuGpz7KQejKmd0ZNdQMdOuiclW/W/wjLxVtKFgr ###kDm7IWc66IxAZAzhsB1O4ldOZWUDBL2VdfzVqOPvOq5JBl7PWiZsuoWNfqjRQnkb ###tRrm6mi4mJMKE3hQoqzqeg1GNKuRNvBUZiPVikt5PzxvHZNWYSuw4PX6g22ASB2h ###D1xtw61LXH3UyDmEwoqYgP6G81DfOJ4Pf3vsrHSTODndJPagvuFUF2zfnLGosmkk ##
###dSeUOQNJASfQjoEOlEz0m9yPiQXLkc3IKo0 z7EViXgMp4M2csLUE0ggEUyZn2FH ###1DL1KgzcE9ELKyXF18YBMruinMhJCbwhku4Sxdgk6rSOY MskytJWmRbMAQt7KtF ##
###WlefsPc6prur4tjIULOKGe7qdX5rNCcfAVhoflgBDzxnAweJx56zTkn06vLT pp6 ###IRbCaG4DJ4lZiOgYduoIvQoNEafrVSSoPErIhy1t4K9aVQK9XrGMdEqMPV7t6diz ###rtpep0G79pT0NGlerlp4rLZR5bfmDMUjmNeGnA1BrYpgxpV2EOrGJ5ocoQAjg4mM ###bo1wAcHU8CR NOoKP3CclMCQYE2pCml0lF6RsMfZeBT2VGWrhCmEzg18VvHEpnI2 ###aNvQVtiwVpphYzn2MJBcBeANCdH1itxK3GZVbkXqh9GCnllbqVLjRwJ6ddrFWKxW
###ZNVabk5EiS9xH5vEAhe5qpChRokvsbM6IQPOH6GGzhFGc/V1RiiHEoBRGktBU7Aq ###YTRhCq0EYQ8hPaa9FM1VHoU9rsKeDTlnwgreRbSf6mqjKdwgFOAtVzWxh3ecp4hu ###XWIfEXyCMk6QoazxldCCtly9noItETs6IequhC3tUSRADiKOgO2G7IzoJmOPl4U9 ###G42nY0 N2TNJTunQInJYo2SkriIgaxLJCd2rniSWVWu5ETV4DnQaVhWJJzpTxbe0 ##
x0ex ql83fvZJbqhg1JTtb ###9Zz KI5bqDgEeR34sVyK3xV3VFZWrcKo3z0QjzNMVUWSrqGd75pMOEumdSaPADtX ###99HJLEtzLOdsPDBG11VJejhCjLIG6xRgUJcwEzl69SxfsgIeiiGd7OyRRXAOv5ec ###
#gX/XIgnCTkraUTatbb87DOI4leUMxgwixqcPLCtUCPltJEEJMfmsTeFvpbMMTrpY ###RUs7hohEulTEzSHbKePYqzqdLQtZdi5bkO4Nw4s2x8vUAmVWrkazEEm1xyeXm3aD ###WqSW75QL0cFQJrr0OSislC1TuXYWMFHtaNPPdB40vOluYYrNhBHXR1ivj2EqmBGv ###0cfNzA18l126V0r4sRlVEKGz3xD tNp4R5dIDWbQBduSVzcDrRIdeA9EoKw81TZW
###eiW5k/NJcpLIRz8zFiXCnAiV5c5wly tYVzUt0w2lFNCDte3hD1Bh tYgvC7c2mb ###x53hNIWt3xCDy3Hy5OAKJHmpQ4gCcmoG0gIkH0jON5aR0MeQkroUebIwhJW6nmxx ###DUNJ54yvVnBSBWhoAmaEinMYOUAPmtHQ89Yt8CUtI4BmQ/GcXvf8bPiWNIFAevqt ###bYeF4L0rI
/EqvcEY7Jh85l/xnV5eLMvMMyNtqU9r/icgitl74S4b26HFp ###aqyJMS6ayRGhP3OapTPkvmTpnf19LUtVPQq7YgdhsRTbJVvPnS9Z7SX0iPZIBM6n ###PYAMqQSj9z1SJpknZ9jSBMVDoR6osyzxInXDYfNpWDl6ktbeiHGCe5PjceixJHzc ###rRd492Fqk9DoPxxO1baceyHw0ZuhqRcu0fOEYkxI48fCYV36BERSU2spX5HA5rJV ###B0XFV5o6bEuDXbbmm1Yhc/NatzurJ ggX0DwZojopLH0gATi 3IiGBh1wC82k1W2
#DEP0ls65tcS64POV3iqHWAZ6DUUfpQopNp2UJ/4MdVM5o hqYRwBDsCivPxHz3lZ ###knUxwxEXzm8aiRGz9SI2uRFsQA8jzIZx8CeQHP2AfGpUnCalz32YKmFFkzZhLmvM ###W03xB4XLKx/NBnXCSkAn8M WR38SBCpNwyyV9nZzz5lx558mWNukSmsdHp0etHaP ###Ls6Rf7HmDIW aeIXe2slKZtN3FL0LYvEZVO51P7NRrstjGJZUbGQ5u9w94FdbW1s ###vmFhnamn92J5kY1MSZe/TaluzV1bnr1rMQi7uW83swIWP3LTmjclVhTp7F1nmM2I ###3SciHj9NCTnHAkYKtZSKDFmdpNpQ7KQHrCcQQbIZ 82U/cMsWwfnMcYOWaYfyafa ###g/vvYdcggpVj6p9OeRuZPP8qKKwrsrQf/FlGD9Z94gN2DQhIy3oB7x8nIhVTG5PL
CPd9284FbPpGbkK7wiCg8dGmnDAo hpjRgm77 ###vnMfM6IHLvXKyXS/3VTOxMfd2z31Sm3u1dWXmNwsfGk3o4XlVd5m9qH5fDJylkCc ###ODizTP40cX 6PPznSrkJ5s/IVEozXQprC/B9i6Ln88pUKRRdUIKai8ZLCeoZJKjk
lcqSewcM9PspBJkrUqYZFhU5IUHfXhZalj2XMFDZztD9W7s5fpX VIt ###FTxPzsuo/UjgZCCFxAN/MPaOARdmIYK0TZiNCSJ mYkC AgaPXgyBnCviVnKVjPm ###
7x dGQlhS2gipRfg0hFvr ###zj d0Hnl5NadIrD 363l887WlpPLhdvb1XzZTfh1q3bNpL8zhCzOhWy6GZB1aDKz
###0g1HVvR3fNQP2/azVIz4LaRTwyt8ZqsWdvZ PLjAOIT1F8TWokkEieF dAUcHgss ###8PnTh0tDLA6iiKUW4Q56CEdoCdjZ6QQ/0avDI0B25CXheQ9esJstzHSPJio4ZPjd ###VNlE9Vv2wYmEk6X1is2RIrL40MJ5MEza0FKMxxYHZsacU0OQ 0oUF1k70aP3WQvo ##
###vBqmhZDrgPI0LjAm2drAgcgv6 aXNdvmRbpkAMLB pecl 9i/yp4RVaxLQOHnS2E ###8razJcEOH3WY7G3nZVKse lssV8gimW8FNvOhy0NYvjGj8m3nxbx8jKjna1wCDIZ ###dMep07f
6uwy5zXps8Ef S /PrhoHb958 PODwc7 ##
###0PgXlWgGyf8 lodYOIwnsJP00hk4BPXkYjsmK2ldWSEFazaJHxbDcSuVypZeTzoV ###gbnLqw4MWGF8DjllXPW86csVEXeVprFMXjmTLcXvhrmYGzKffUM2vznew3ObI3Rl ###Ri69jbN3sejhgV0MjSY9GYwdBG8VKUtYbcJIP5CJZjikCAkCDZ5XtlpsNMYOJNmL ###g6eiQTkPMl9wVyoF 5HlZijmUpaT0a7qtgU6SXB6Y
###O1JykGwCv0iBKghyqgH8wrWfWcRG7MeV3U6wY0LUjj9GEyqwmsOVzmIAaOkMtit1 ###AB7gdnglqRTI8gG5hQ4wpbRk6Ez5LN3C2cm5MwhjrgE07B892m84rhl8nO3wmzEm ###MRhqMojlML75Rg3ERFDRdiU7dfNXsv/FX3 m/a9bqdaS939epbG8//v3uP b4yji ###
MuYwzubqoAIUKM8 YBvgb sMd9f5 ###BSdZrFQ8YckJ1BdjQiNVx2McSDOlneVLN52Vlngdp9I8AmQYAzQxcQmnwqMXbvMc ###5UsHag6yGyCTxNugS8W95vEIs7hg6awiqJybPZXcXX7eDEuAB4xaBHIYDVTIgM3R
AA6IzcxB P3PJzy/g6Grt4ozskbiV ###eYWtsaTbWBQ/DqBKVt/e7KJWz8n6i2IDKiCSfdZpt74OmB1WJIf4JJA8KM080wM2 ###jmYzh9Xsxi10MXsrzaZVmRA6P3p9CsxCeve4jXmF7fVJtTELWwzq58STaa9HJI s
###R1gGzKQ bibM0kXVkJQxzeOGlGgwYxVUw1mrkIAxq6tVBktrjVTtzMUygr Q2blA ###Vwv8nUl/1j2jXcG49Jx1GZrJpHzWnAn9pcDZxFnhOi19/B n/xNsY fP0v95Va9W ###Ter/apX6Uv/3V n/3LT 7yIcjCbX987uinMRRFHYhl/3c1V/C7sKLH0Blvq2pb5t
###0POY2CzAmLOTsO EE6g5RHYH6BEyIzjs2 uAuCygFGjYjuSjM5lCi9wJhi0g86NO ###ZxrpIbL1FVTrMaulu5I5FnF0PeAUeUhmwkUYQGck9OZAkFBDgMkNsXESI66AxcLp ###Q41RhJsXBtMPgVVHNs53esEtgKvfx01pJHTEHJDDq76yUBwRz1X1MJgFlKPNy11g
###mufdxPouDvMmAc4sh3u0WdlMrAm5eszgN3p988u1 WVCS2IuFLn8Rk09oVUotSkI ###eK viI6eRtEoXD46eYcRgaMSFJ6UoUI hYVNs8y1LpOkC9hcM9neNZdNUQemChlQ
### bTMJfEdttPM0WnG/QKnvLWl rN1Mork8jHJkiLJjtd DBIhSIOcGOdffM1ooA5q ###ZiopxUsuZ73 7v/hcPJ/tIiZp0HY2zElPM4YDl7xTJC39W/9kFxoU8J0YnzIkhpt ###Z4xk1kBQUDJFDTimGJLW4KJAngksyvdHozFBbYiqIIZdNH1AwPnu/9mkC8dIQo8p ###av3BW8kqyNPIWSWLNnx5mNIcC0ZGGf0 BdJESyImMkRovuLcB0JutMRXYsjLbmo3 ###xNdROLyZRxmVTGSh9GyF4FZT 3eS5/zJm58PDHwq0utyohYpb81CtrYwWTqpOpwt
###RaN53pF96X8KReEYEqzG3MY/K/2Ilmrm6kKgtRlKEOoHfi2ireiX0 oHoeq5RaL7 ###CdWbSolLpI81g FE61EENpjKwiQd/eMPS5M2Y2bMOFi9q77JesThkKo8BOh6gPlE ##
###q Odt6qg M5BnZwc/wXB4FMQ9f1x3ozvRvUPz3ZODlDRrlNYySfJNnDw56jmUo0g ###FLARIKNAqRwVoFpejZt fyoQcje4m53HSYras1L3jFG57bzF5Cl7Io8PunWSKyeN ###nw4O1Dj6H6cBppXhqDCJAuQfLUadiIr9eyKc82Gsok7raGkMTRF903yjMhWn3mDK ###XP3KcLMjUh8Eg/H1h9plNtQcmXh6k TQwpazr dKUW0wM8/LcRxMu6NyB6g/2bxh ###jp2X5K6YGMzAvzs SQ1x2CYP9BNY5vT4Y/nqnNY2Y I7GK7z56CDR9wmj1Jn/sGk #
###7GckBrRn 1Py3QC2fjK5B1IK3ClSQujEwfusFX36AYXt 52AzaN/HkVteIbFcuLA ###4hfBHdpEx0jOdt4e5UtsPE0B732cCXqo0A1UEMf36s6IXiJLCmQXuNfudNyno4zO ###py7RqNyAzn5xNaqCe1NPOAzkpO9vccx5OejA8A4MtecKQI7GHA7jcRgJapd3Dn2Q ###v D82IXmAUDf03mYtTAArsPDk7cHr8k5hsxR4OhVLpF4boNoALSXLAhhDnSwQofo ###OCB8ZThbKsHTlurPfzx6a6aFelyuqHTKqLQYfwM0utXrJZ625OPW1XRiqwvSSaJm ###up1iydE4oW2IJ37nhtOfmvHbzAjMIlJMf9IiIYacA0xxptAnw9hTjuwCMiFb4WSl
rSG ###H7e3vU3xSo4Hs/KKj8lky031IpVnGWP728H/ockbWAmOck7CHq4L55jAfre3w5JT ###gf9nBH2fU1 CJLYbKqk6lUsOok3IeHCKJ1Hr4qi1fw6n5W69bmZ3UL00myrxkBVs ###2kpE9VkAC9cAhiX 5DLWqZCnMfN8c6e1opuXaTQySud14hTRujUcPRSO8/ LMMEI ###
eXxyc4tcwX3LX8qVTD/5ZgfIX ###6TITUNBrziu8PSqEq6f5zXT8bsP8TO3EDlpqJLZiatuZIzK2gzk0hYUUql2jjhHv ###nd5k44NYWLYbNoInGRREBEQGiY PNyLccOTF1 Jg4mRLfhT5tKj2NMWhKIIxJiiP ###o0ijpCPonp56qENQYS4FFbg/W2HDhEwo50T2Z4SZTAQdgfiQTd5KQJ9K86gcojG9
###/HnnbP9g7ziXGGnJ6THUz/FUOb/Y2fuRyRrgDdI58WV7u6kNaKFPpnluBgUE7vbN ###Xq7HA0t0lpf7DkaFkeD X9O5I8ZCbCzS6 o9hYVpGyZ2Te4n5GYv3EausrK2Xq9u ###rLvQn1vPF2F/rJ4au0PUztwAhPy5Fder90QlPi15hHuwVGFXyGOMLcAptANivEYo ###PwGf1QPp12kDYbqJXzkfMAFOycFEGpdCeYcURixwfD3t9cjrdNSXuUZ NxKOBIMx
J5CwCdg aAIxJuE7CUsJEdfgOdTD4AI1wO ###8 q12UioG6GiZiNF2Qg1P7sRADzqD9AfpeNL4Ro4RhSch3ASwYk0GgaZOAmTKIpO ###7sMSHsBZuAajLMtSkV3qs87QB8NI6DpKFDSiTE73MSrpa6unYhiSqVT8JE
Bd0C0Tspu8T7gQ8 NlPFuE XmIR3kSt/21 ###2O1eFrvdS7DbpP/9ni9i0A8L2UmPSB9f5cjEsCE6MaEvKkaMGzqD8A4pBd2x0WkT ##
m4Evfj32vbfQ3ug9uDcs6W0/KAvFl6K70DHq2GWIjAFhiLq0 ###ZL/e0bB/n0C/BRhldwYWziqP5LhHGqzHE2HCWMqU6oTOFjIMTjbeCmpSBsi5WWqG ###nqV96Al zHrEjFgavmh/AW/wHJFWspJDANCfhJSQGqTm9mhy7aAyk6F sb z95i9 ###TWD1ioBsi8DpTkohiwNWVajJeax6j9UOPlohmKmDkiuKC2qMZdbS8lwTKwsPOaCL ###XlL93dITPYA5SZjdWb3Inq2 UFYAtCo2s
###bsBV1ePx6AkhQGUh0ZKwoav9fvs7Wyy5KMEuV3ff 6huA5kZy4kTJ84WJ074EfwN ###vTI6oFHo2ffgvQeNdhOLQlKLQtQkwvdQNQr48uGjD TDUIeCDmgUJoKpAycxEdKD ##
###h785/dvz0ZRKfBqdL g4yyld40FcXS40GgzALMtfafT//jKdr52dLdZe9mcfeq/x ###EpXhZHDfO8ENiNWrxXXuKuyX28d/okukTwCwpULzDJu6gKbemfIrPvNwNmeR9Bwi ###JmLo CvkX8Da2RCOaXkCYdGvNKVfXV4JXsaFgPbpOcroV0pfoT36FQZcCMrgc jH ###9Iufooh
###Vw1yBUChYz/c6AqPbC3ASW6tNQMcU6utnf/FgXN9GTg3kVueuxO E8zOjKzmRPyB ###Z Rond2XEaBJwJ4dQwQ4QxvOaAkXGSm012JCauie3ufJnWj6fRUuLDCsyltOgfcu ###6cKUsk9B
faYXb/yvJ/GOyxkGw36b/0Wb98o7 uYOrgbHLQr67lWL6216ljrY7wv ###c8iZeK9vFvdMxav5Wfylbh7tsWzJ37 8L0/nysov7zetsnn svkLr/kqHJYwiBSJ ###h305jQ55b8 GfGcXeUP7EyuZLRRZtWK8rCTplUjb2CzNtFt8Y25EYVh0Rh8FymQK ###ncMqUsB8GsniQVpRgQ83s HH0fSWwn8egDBHJhubQbsadpHWHHVUELaFm9GUQmWc ###AD1yMjR3dvdPKbdUmzJpWRGToBytN x74jjPVS7tkSp83b/7Uh1FtiCGeEmEnZ4J ###msh5SKiPfr5AWQjls/a2m7km2qofUQzNAVK73SrppAXTztVw8IEzOIG6f44HDq8J ###a1qp4z6qVTv lktTlSNwi3vWAV7QvmzgmXsW/TxGtnBDBTSWptIat8Uz9i7o8ky
###49IaPOnbw9nNdGw0Mtq2I1JD776Lmz4Dl9aK5d4iG4o iyzlEpJ6qyRQ8uRQZA5U ###EDnWLxsFbP1SuUWO5PrB3mvH h g/ocNRcXrH3J4/jW3k4hzXZxfTdsfUJgwGJo1 ###VlDC6/naMpKw
kWEZZn2w7fq53NwABwZbfC06QDVZjuc8ZNiV52w6dfPifjUg61 K22bfay/H7woC ###X7c5Xf5vBTBZ2yLIe h0pZ8L6flcFZp6M4MBA/E8 /Js9b6t19ptDkoXfzHufOs ###8yDCNMhl0Ajy4d1o0fRa65Ir8BGcrP7MuJF4NP8DSq9I7qneABbcYvgYd0ObLx7I ###HTCocj7B17yE3WR7R2opY2xJgr9yTkCpJxkSZbI4dAazFnyn0hb8uH3cw33Kv5y0
###nOfPzfu3J7s9qrXdUoLrcjw96497tLeTl4GXU7wduD8a386G6 WMI0s9hzmaOj0C ###muLPlWbRL tl8oqW8W7tPLGcij3cm0fNCIXv8 fFldU0U7ex8UtraeXckm9XFrGT ###UNbKByGOAiRMM0CtdFHF0Z/yfEX0N62QtVsVMCxf3Y/1oxapswRuHsqX26 Ajr5f
DVVOXxv3BL5ZsN8s Fq ###kiaxHybQOEITtvIri7EURApLoL98MZoS7x JpigKom43S2LvG6IpWA3ibpalSTcO ###l6MJscRoAn3zi9GU4ngz Bl GZoehd0SmlJAUpr635aa/NUQ/ksjLwijMpqg5egr ###Vln2 FVmV/
O AB3 ah4JjxurPULLoKG051BUNHtlJRmFExnZxkbuc95ctv3Ta X6 ###osJhO9pXtVLlhUCXedV722Wnt4MKG7VoLlXU7fD27POCH2497zur2iTKyxALAJWx ###XjsYctnt6Ta8fLvvChWNp6bSCVMojUcXRF4d8RkP7fw9H30czUcYsIW5KoRKuboc ###B0GUNyv6wgw4GxtBS6V6X KiJcdsAVfLHZdljMmJu02565TMzFzKvRywbXtbj8pa
###Ql6uJqzrUF/ekD9QblmEue5snya3zq7MP/vx0eFuG0 sr8ZtDPjg4 vqoTlaWY1b ###a7m2Ws4jyizJrPcooA72DsOgGQZpknYuxtPpDLpawcds9feAtJVL2scf9WQqNwFv #
vCoNEcw ###OCqEQSqhDO6RIxfzHDrs0LG U4jmRX/RHzeBu7acXv5FB3p9vbe/2 vhX/tAgTBw ###HQ4iV2psnwAtIzmeWPeszBfno2nuohV8NR6d8Tuqr/DS6PX6C2a4w16v2QTeTDZp ###S195KvGeowmeU CwTxtSPlfEQZwEtf0CVQ6ObMHKYqVfqIgcAGo4gxrPXmNLYGmT ###9OiPWw77I0Bs/cecTtIMnf84fwEP/z151nG4UXzbwYycbNGByJwtmmyc2fiVEFiU ###lC3nV7TSv MHeLJG8YzLURhhH9qH3p45/04F1z9XNhlQMx26gKh/Ofy6xh0MStJN ##
###/N1yXjj0SwKU2xvO9tl8OsYgTJwp3Gqm6PlV wZNOYnDzWXb8xPXLzNSdqyG4N1 ###Co1puKE5gBwb7FNrZ9QaNXYgxwkKbeUa2/4519jW8sb6dw81BsMEjH7RMMOgZpj2 ###9DximIW2CsPMNfbwMGsaA8l6 EWA4VKvbmj75y8CallDb/mSG93UCtGy/grS3v7q ##
###3H1zsrcPeoyv34CO85ce6GXf7wK0tj wRRC0bLh6CFhVGQMmCkOkKmEs8Ef G gu ###6iN y0/
### bft07fH26e7gHfiDzm0Hx 9PXxlDz5XFUzY14xhYTqr8UU7Nw1YgnFdLGFk/qtX ###tgKRlzwgeOyPbu5jrcyqFFlamnNCRPo/lyHgtBJXKmcXMiu1RRXs51zl7R2uO hY ###tQcA50MtFPuXxI0PA0oFK0eUKwnFsGTo15ck KXv0hgqG2ac/tn3ewr3D AVyoaP ###LRg9tmD8uIJvHl8wfGzBqBajdJ9ggZoKxNBas9lnrh jfBRVUuEVFIPELi8JV2j ###L9BI/LVC ZZ9cOO7otxTDo3v949ebu/zsQc6qVKlHKqeS4UdCn3zCvZbTbH8qQcN ###HvtRELCnzbp/yP6fucb2H7T/5yVBVNz/S6P4af/
###X R4GSJzuHq5igmfAAQ 7zq5BIEJNOZc9edO5Fz0KfS1gYf7LqB5 IWtY3FAP0i6 ###AUrL84YTtfF/
QSPnL5VhmIHjFViMI9zEmFzgTXxLji U0EU3Stnh eYKQsavtSkh ###YL8L2mbAcpS7lOyxfTZazIYf7a9FBDptecBUB4XhUHri2gG3zfPg4pKyKlAYW9tc ###rypLz G3exiuBgv4b6BP4SVmThPVD/ij5fTHl1MQ FfXfwDsX1yuUQfO2e3FBWlt ###XB goXxpt7jn aJwTwnUcq7v4edmvvMmHrHueB0MDqcfuHnM7eEpUIlY55xgpJ3o ##
gw8XiEKRQZoD9AO394UR4dHjzGEZLiW/WubcpS ###nitgO9Pby6sONcWa9HAiWVQnA1KFCZg5XwkGKAGgsAGlWdM5epkY1bpuDAsxluZY ###qXpGcvA1HWuecCbb YI20K06qFW3umVrGCoRHgxHtyCIpeGYkdBk48LKrzxJOKJp ###R63peVOxnw7NdhtH08E2eyBNZMyd0nVn3OQZmJoYCl/f1WN6aK1rTqDvWYaxdkaT ##
PLx1 rqqtO5eIfwUqocbOR2wUsNSzuvufhrq/hru/jhVA5uO0PM1TYcD9FG ###YxnBYOLcyrLpD2CGkRTHow9s1128 /B dUZl6M RzKc56EK4qZwPxFjhC7FsGHCn ##
fUAlohJk1koyrbsNX8rPhC ###HX7vD jq78oLSuzyMMB3MJre0TGwnPd23gd21MF3aA3xoB05Jr Bufn5JnfbKjZK ###eQ08k0UY4XG
###VejPTW5mpYD3WQebaJWrcXNcLaiuVsj6amXslQXDv91C3WJLs1anaoZe9kdjuogc ###3avOp6GDtxiEHl49dtln1bl6JRZS0W1owvHed3yvladFyXWsl2ix8ioYZBdtqryk ###onbEmrQMlWBZuSJyiV56mqpUiCK/6PiJycPyWfgrHxoZzZrly6PvrNPH5a T2 tO ###eQXjl/
tOPkn1YeF5OjtfUhOdNzYr/aWUp WwlHrVIvc5cKBNCS41sayYC6MqvZWV ###phUgWpKoFZs0144DKmHYyFYA0ncWT/mcbxPac/31X7Y24YfrVjTL1Tfpl5UBWjWD ###7ykR2J2VKvU P6cAWWlUn/PTOipNK8q6 mk9H046lYz5207rF8 qjYlHz5xrzxyM ###7B84c/
eiOXfufHbdCvdvatKNOOcyf5YU5Q95UE1SphdfMOMD/pWKOWXC/WGbrJlld KYPd ###2vRKmcsnNie/u2M60cRvFSxm Pq1UCcf9YsvOzoDmKZDKDxx8QaOigr8oVhpmTCq ##
###8RDDa1klGE6QYmdr50P6zRNMgUQd9AxLamYq gkk08IdoApVaBZ g6XL2oskUeeG ###uHWRbPPb2dBoOBwsiVskkznIYnoHdHU5ZJVscu/cTOeUhV1guj2b093rC qTjxBh ###xCSDyPJe3VOE WzxzhEsLcBBneEYbDuS9jxYUBaGFE4owOKltKg5fmAoCULc5KD3
z IwtQr ###2v9B9BT/90 z/9Oy/c/pfn 3nL5Cc1ZS3zf4Bhhvf3xP107x Yknr8KTV HJq/Dk ###VXjyKjx5Ff7JXgUWWTmfwnTek3slC1GDwJ/nXx5hWB2lqNLP0n78BZhUvbPhfNEj
#bNQ9U6yFy5Dpl37xJQLimVBH/c4vvCPsl0ryWyrrm114jj BmbbjTwBNuJOuspvB ###Y8e5x6iTex1zYl86pSigfJ80WOw08nej91teRRiKNQsTCSIp7b9TA5hN0Wxf8xsA ###0eQAVFvZ0ltH5qFlB89NKASnECDAbXXkt10coc nZ8NgMQvrmI41X8Cauw5grVV7 ##
FgCgxP7 FnqkEDKquRyoz ###ypeQOykfGHxt1/4juvarul5y9bcsn4rIj/t3oxVYaLiK I9W515yLrpVhamgKbRe ###WJyYrdjv4GMxao6A7p1PP004dqqp0os6bbS8QNMcAM969z7P9K1PIEM6VsALygH6 ##
###EFbr5cNhhSB2pv0ZOY2Rn7DDMLrD/awR 4jJC73ESMLRPXhMwFt/JIq5uLbU6DSF ###xjJjabRinRNQ9pHWIF0gFai1lCMgZ2ZOoKvIs65nSSOEuOBqkLL3 WVro6PjfLHP ##
###nNXT2gqc58 dim8 fmvljsEsRpPb4TLi8SuIpypCHVnVL2ym/II6YX6N/fNIyEj4 ###PM/ CvIRJ9OXkNAx50gDCXAzH96eTylMY3YzHWsKklnMzd6Wh5OXe7XRtMEHLruM
###MMvI4tBy1Fur3tY4eHcdDOcphSuY7BM4MP/MqOHYwQflMsuTDve9cuptlVaZgvuM ###1pU1kXkJYZVZOdV4 GyXsvrjojD8HHv/8L4KL5/10jRreNkyzvdSu5j9XH6HJUvV ###z5V bMtnj2r6rKr8599zpVct8d9jhfvfcnX75ZUdrF60YXX78Kuwwi3l/tR3LXHT ###guVcUN hXS2cS3pUZQtkHMTtD 0PsEpPvXJ7wkqNzK/WpqR0zh6BcW6ZK71WQ9LT
xT/ xT/ xT/ xT/ 4 K/6VbSN7sneItk a2XnmuCuL9
dS9j9v rP tZQ7IUFsvcXr2oB1fuK/rKpr ###eVDevD35wYakg5cZWvDwrX9zBYPcM0asFAs6f8Cff0BdQAP9BfDpnDGqXasINe c ###4k9ToDwAFZH9sT9TUL8agkCaYUYdkDMYtao1lRxk8BlUKikCiD7nauUuOLYZiteh ##
###AtUOTAMK7ED 9yBEvcX05hFQYbFlkGl8FLkozAA9tjC rMkoBw2yOZ5OLlvyqeU8 ###tz75LUPsS1ih01SD7x1s/2m3d7B70Ds82t4BuX6iihchd7mvDoMoPXdsgliTBxx5 ###q9Upd
nsDN5h ###saYILP4wvAPJiJemgVb8Zq/VwfubBrRL qmPI8Gc8YspAD6cz F6cI48eOQU1Xf ###3jjntzdjEmUkn86JRzU5cTSU zQESY4Skryo2BOCMfw4nN1/QphbCmjMbn05BQZ1 ###dY3YVjnpAXME82gyvxnNhNu1nNf9sxlICOclNA8I gPJw6qJAXS9fn3wZhdWEHBZ ##
#5wpAAtF7AT1PED0ot9Ez3cG7/ICfTi5JsEKH80GfcnBDiWs6a0X4zLvwsUPLdy P ###lpnyAVhs7 JiseSeADQqsB2YbuDojj5fOTHnGft35goxjtdRbfYod7vT/gB/v4ve ###F0ssPo3Oz8fDHo4DLRQTvgM
/MVzdQaW8N55OP9zegI2CvQ0wxQO xVTcTeu70x53 ###rGAbBVVrXa5eVPUGoFTNChUx3matjSohJ5jvO4qqab4Urum0dLQGPQDtz6 EQkeT ###G7yiYDYDyQiYz/cm7UgcUwFcC0 CAQwxKL0EKamiicrhUHKTHx80ldv6THoT RPQ
###XQVPvoAnX8CTL DJF/DkC3jyBXzDwC29 4SKMRpv8/J1bz3RdXo/YEiEWIbmpdP0 ###8b2ONRiDnbuYc4CVHXUFFfMvn8HqRf4woS7X2kdvTl/g5VOsjqvLuDBnBgqzhYNJ ###c6BlNnsBwPvpLd ZhBfGgbhAQ3uIqYqQG3IuxdklMjXaO8PSg/4EmQZwFTAj7Mu0 ###wAy5pVucRgv2OwB2lClrX2tm/tNwrhdtXrktzSoIj48oBeb7I0oBxGiDqGnY3en9
###BKvx6CfanHSadEeT7KtqEFttYCTHvZd7py3EM3omCleAyfVXF8zM S4zl68/u nP ###SD7dTtCtMDzXV 4hjmw43sKKwj5O0NLLdE gwUzHrE5AK5hmgPUPTOQwGNHtfOiU ###uZ33L1He9/GmNYqYArtrdbhKbCB0NrfATsxAgtGtXHbPfIuVE6r 8DI
###FoG2hHsuPw3z/htGNt7whgg4AxHaAWHDGspgen0NIF7cTgYsnMejD0N1PV6TDtIj ###VSm5BkVFlE4nREW5ifyVU968vCV3zTn7AtZAlMEvvu7LoJl3Yc9uL9a5Eo6NYsvE ###3XZGjUitAo3OQeACOq2akkcAXV3oEKMWxrhszu4XQ8INKE50jVn/E5MEusRmw/75 ###mojV6p5AiPewbenqJRETedTwsj5yAfZZhqt2HFH7oKY0aZa8o5pUS4saNcF0YLmP ##
6mqKfZrQoDJZ1dlK11UV7mm/hisCL ###6KjW4HY2A5Kjy96sewCJ5paAZS5xe2CCJkCvdns8WTZm6yfHmpj8mqfr8uYKYhkC ###91Td0mxyKQ3tTWzG UI0SuV BLgWn4ZDLrOY3ihizXWBqqpKwqwdYgRSBw/E3c5p ###7XCJvdxNj9wd6MQ495VtV4P/UaO6CnwKdEBF9hqv6mNt gLYFPACUj6Z60L5ZqsG ###KoPdKQiuPjuTB30wAFGnvelfsj95fn99Nh3Pl6ymu4XAuS3ru8AkpDoYVZ/6o0VF
###D ru0iLRAU9Vq2k6wQsXUYAC3wIDFY2GASHxvLoulVlvfF7XuQBHkzGy3sKFoTQB ###PaTRecWVoZJXRC4kZNL8XGyxwP2glcvhoseoeLBN4pWlJuWSWmyHBvJgM2q4KFCO ###6cu8MMG08J8hv3 GmoMhhXNzseO5mmmUJBf9GVIOsROSONKWSA65qPScmJoxxKzL ###Ii2a5YtrR2Qiz29HCwpFRrl13f8gGxZkMYpwpSsseRgvnLLkt0 jEXjEXfrjT/37 ###OYI2H6PRCtxN6VJ4N6bZaOF7N5vD1cvVDgZD266OGXo0EBSmsZHmNzfT Qh3hYBv ###gAqANNtiSVkxbSRlH5oxi6O6lTdh/v9jLnnT4ZyydLfbrBf9C83vI68X/pf0sJf9
yRs F18maYRAOlnQYZPWRbgr26IkPjdrIv3eHmR ###j5jzutht4FPTgd NodsgiCK88CvoEprCCAEMwiwFcIMoDLEI6K/4FAMSoUicBIjK ###
###Ah6vmwzlHtRBydqFciSEI5R88A85hYc0jXLU90iEp0qOk7zzcen5JBVJJqLUC2QV ###gFDEDwHRdCYgh4w RAsNOxXQUPCGDAqBAZyWBCMuZh8lgtU9ShsfJ8hH0pb TFcI ###A04ZCScfemv4OFM ThFJDj
###lQuSOpMSEa0kTL3ncwniOvCiG9PcBlHX59USMPkAnCEtF0AIQxqRRw5edJk QB4Q ###QYIKGHEbYYqKCbyIYx5tGKVcIku4jZBUdJd Uwn4QoBBSW4D6lK3YPkyTtElhy w ###NyoB/VMJgCegEgAhtQEQ82hhDAG96PqMDxgltYGjphKAByoBeGFIAVMZM4eQekFc ###dukF4BZLILapW8B zCWChMYC65EgxRmjXnAGqQTMKZWAOY64BJkfLlEBlQC6INBT ###WbRIOVwi9RmO1GdIkdaoBFAflUBqpBJAn/wiTDMu4flUBSmaSgCNUy9I81QCVgGN
#YNAhPXd52oGBU3vIz/E7Mnh6Bn6P30EA8HPAXAMERJefGb5Y4Ed5gt/Z e6SvMHv ###IIAyfs6YC2fE90leEYuN0HBySZ4x7 ty wkjCGicyycJrw6fcY7yUkiO6wOV8ixl ##
###gpDlvcjKTBZcwjCjAiBlukEiEpfJlES LZRZ5rPcZvWahb6IdilTlP4s9kVBSKRM ###mnRFh5BxWWqGwIySXzQRVUYknC8qEct 0Wd4LmyVR9pB6S9akSqTEi8ndUDKGN2K ###aYMUAFG/BD oAYiGJuOylDjpC3UA0fOkTFEVZC1AtEWZL1QDRKFUZbTOqWC21FIp ###g5qAaK6xlDHKbSBljP4rfWUsJ0g54DKWFi20geqAKNoyLtQHRBdXZdhMIwVBynRJ ###RJOGwAzZUvoZhyW7gJUCMR0CKWOsi0jKGANElTE2ivRlmTEMM2kGYumkUkbbQpkU
###iYghoa4gJWLij8qaci1zK5ASady17DFWECyDzbUsOl4QlsnH81S0CV3LaAylBEOK ###SoOU0GanQGrsUtVGREIW9QYpoS1bQZoxfRMpkYSs3HVVL9p4DlQJZV0LUo35rdpI ###iUco 9zV9nviqQJs3osIsk1/9VGJY6krpr8rtr/dNHn0Uo3HRLyzoQ2 Mv1dsf2V ###6a8QoEx
/hSFl rti yvTX FYmf5qEpTp74rtr0x/NY3K9FfzbE0zEYIy/RWlKNPf ###FdvfoiTiLxapETEq098V298iVrL9lemv6F2Z
/kkzb9XbH9tenviu2vTX8lCLXp74rtr01/V2x/bfq7Yvtr ###018JZW36u2L7a9PfFdtfm/5K lvCn21/bfq7Yvtr098V29/SMtj216a/K7a/Nv1d ###sf216e K7W9pPGz7a9PfFdtfm/6u2P5GtRLbX5v rtj 2vR3xfa3dDi2/bXpr1RB ###SxNk21 b
###bX9t rti 2vT3xXbX5v rtj 2vR3xfa3dH62C2yzgGx
###zHXjqWRj3bgy2VTXlroY6sYZyma68Zayka5tdDHRtYVe5MpinmvrXIxz49Jl01xb ###5mKYa7tczHItOsQo1za5mOTaIheD3Dim2RzX1rgY49oWF1NcW JiiBvnOJvh2goX ###I1zb4EUhLAa4tr/F/NbWtyXnI7UJELAikKpdgoQ1hURtI6SsSgTWPoO2ucXk1ha3 ##
eVTpKTXaUSxxHb6OpQpRNZOsXm0xlEzjTwJO/NFyOEQY4lAo7i7kOM9YwoZ ###8jloC4tS8EMswUxBSqEQsUQOZSp4lqR/F6P3SIUIqf Y4zl9DhBGeHEcBC6ZKF0K ###XPY4cpPC2UIsH2GcDsWGUQRdiBWilIgfB lJBBqF5erAnCCjJ49DSilADpYMYIdX
###JZiQ49MyigWWoGAKwAsp2pBQSvE0FAlKIcJs/EnQJMefw0gacSJRQgGOJMKRcHAh ###6dT4inBKgacUAh1TnDM SjwcSvNGyOchJOQzII0duTZJIrJPMAIvwvIcUIivsHxE ###IaIS4tcgzSpMJYyaDt6Q4k1nWlIVPRpi YhCAnUMZEhx1wkHeftsceNrUmNTDnV1
###WLfGJhIVU0TGVYTluyqIM8TyUUxhgRIKGdDwcBwMLr7CcUS nECgAMMQy0fEMDmI ###Ed9BhQYpLBR/S8G6ZP/Q SeS02T84hO2wRGhpB9TgHkgEdAYtNog4zKiCqmELwY0 ###QBxJnEqYbYAjiXAkmQoaC7E8n0fycVykcMeEZvxLHypAA4EO4oQSIx2Q7deVuHQK ###XcMTNwB52GmQmkxGBQWiU2Czis0li50Uj0iFIpLLIkKzPFWxXXg8ARhPJmHlFJUa ###UsBlImdVOE6VTi1kHPbHAZ1kU2ITicS6NUKP3J0Zh64HZERj YjKhxLVF9DwcBwE ###bsqaPuIrpCD0RsDWK0X2hxINyhYzVog40o3UGYmdDfEVFSW1E5uO8FBSqsLm6IRT ###RCil NdAHZyIuIIEYwc8wIzDtn12cCB6cCTk7fHUUZGIcEpWDB1JwApRynGqPgdw
###RnLOg1QvPLpESlZIB 5U2F6IemeE5UnhRW9QGNJxBgrxk5C ADUe8i1S Drp2qhw ##
###X5XuE2oFSNQoVrZQsYiUMoQ6U4OC1pWWEyhVJxBdhTUaUlhiiQYnZQf74eB41GBS ###pcH4SisJlWoSiGrBCggpUEpNYW1Gzpc2 ExIqjQO1iLkfEgm2kKqNAZRCORoQSy6 ###RSPSRxgSpSEoqR8o0R I7GYJTwJc1ABUFhqkC8RKmCvLleV4qmQ5x8qLqGWBTAqF
###cXx8ShWvp4DoQFgxM2wSOIqtM/cP5NQNH05KFYdWXDegc77CXVPFYZmBChum8yzE ###iyPFTJnnBsxHkXnyMadMuGGmOSIxPHUoKVa8M1bMj3lkyHyPz6OEirUFwpqYgXly ###IITYHHNDOiGhmBXztPAhPmWfIc /fZhP5c6Ri8GXaF7EXChVnEgMr0R4TCDGU6bM ###I18MoFSbOGLEZMpMEUMkUTyBjQm2HjzmA6Hwgq5wgVhxAt/Xp3x4jXu8vEm5zrT6 ###zApyIiqwL0puqlamKKoJrznSPWO1In1ZZ5Faa54ss1gtNZ/XT8hrqNGV1RMpbcvj ###dRHK2uiKThSz1iOUz4oMay6e6CaxInmf6TgUWu4KFUeKkj2iTxLsiRLdIpwzTYEi
XzoKyohSvBUQlTCeHoYQRpNzlJEcbe/F6KCOkQFX4qogBBFZJJHVLAE ###UY mpEcgirv9vRAV1iEq/FJEhYSoxNPrTCEqXIKox2LIwtNSRHG3vw1RBYTRdbjq ###oJZ9gKv0YVk2GrrHVIHAB7YkR8ZDGToSTuIR2nk 4q5sBvOvkFOB LwlrHaG6VfI ###28YhF5Et5YDThEh6EZ/rsbM0kc3hrmflI0nSRDaQqQhvRfMOLZi9nuwm06/AoyLk ###5MatKNlapl 8lRzziGIycWWrQOdG4X3smLR93lWAXykbzjzoiLfb0R7HIryJHLKZ ###EXKiFfY0BOi5wVwsDBknduFtDfjFsKCDD4qwscs7IPCLHdrsuw9QcW3IZgn84vwY ###HhlsYEtEsoWNRTzGrse7z11yafAWTIjpcyh1DDkawQjIZHObfpGxAVYhDhqU9ER2 ###ujnzDLWScsxFklICGtoDgl80jQAfVYh5hxyj1qBITM4ZPyJvhh/xZjoZ/IAHck/5
###XTRj0HkkkQTkf2O3ZUhu04R2pCTYD/gRuzjYE594NGjeKIdfvJ/BoXRxxvZYym44 ###2ZxMPM6CwF5WjgaMQ4Il5pRWMa0ctVnPgTHAx8gHE3VptLKxH/FsRmnKv j8twQB ###RDE1HUU0AVHEzlNy2gPHo922SFIO JIsguz8sEtpskLuIcyiQIIAyUlDjYVItFAk ##
###3XHTEoYY8L4mDIFcdR7n3eCIRJ D XzaxYWClAhBghP9OGA3RMR Fho0xSlCEc5K ###4rMDGhhSLNES5BJJPfL5sMOaMqupABIvpo0BD7c70c1Og5ZgE48zNHjcpuchMUhg
###29jvmYg/lrKjcLCUH5F8gF/kmI04qQIFVuGBfd6O7rK3PeMd JS3ipA0GrC0AvZG ###cX6akFO8sEs4RPdbAzMxhxJ3Ta49jtMmdctHHoReMWKHfhBJKi7 FfAv9GqiJcFb ###AV3e28n4V8ovE3R IAYzmvEv0LZz5MN2pBTwoQq4oRcK7ypnMreMqYKkjBP35O9
###2JC92 Se5IhPKOLR1kuXtrczClcgpHQTdM91Y6SRLu36c4Bdl7DaJQ9xRjGFHIcH ###Ygo9UQn6ULIYFzqH62W0kZqRkM6IxVBUXyPtUtAKBTimFIvGwX8gTWJ0C5Ibi7az ###OUYwJXdj6qEXNSG64lDCJEWXT0J59ZIIeTNHHCa00ZeQbzrxEAYKIW0AwyePFS6y ##
###D63GvzuiNOt3TtPH1 qKho354hyKrF5tWS/x8jjkxXJ73B5eWoQ3qg/n9hXIeOkp ###3uj9wqErlfhub QHc ASwA34nnO6RRxaptJzaIMvPMa/1A1jXBNv/6IcpnSlurqY ###DWHGS5P0lWx0t3CncL04gtGxryWmnlrrADxffAesWK5 di6BGU0cvGX5Yjb86y00 ##
###t3N9GbVwRsDKAkpeIwh7fHMcig3qBNAKQ51csiiqBK6DDHiIg NJWoxmxIiVwB/f ###XPXPhsDp51OwNAG /twGnO69xrucDTh0S9bdQuaJmTqDPr7Xl2vb6OEb7wj0 e3N
/YOPwJULaTxT1ejwZVCKP2nLifnq/boYu LvsLUQhbM7bVaL2ooIxbSymSWAeUX ###j32bYWHpIEzWw5X9sOArDXf/ejsCoICWSM7rFltqyIvNTX9jg6z91VLH8HryFZ1j ###Y9y9ubUS3jEd4GrqO/5aE7sdTy9vWqho2HcWng1xBvs0fwVGAq1QnQJQeOsg7upb ##
#kCsQ0IJm7WJxZt0qf6ruepxrLnc9BQV3OpG78CbTiQtLBDjUHDDc0crtuD X Ut ###cFQTnhDxWeU99/AbOMpghPqdGpi1ZnMKblEowKCq5nHeqUqL3abyOQo/K87vrP/J ###1IK2hpdaSbcYs2ZdqkR QtVyNQOVcoqPAeEYVuI0kUqvman1uavr/l3LsBjkJwqX
###XkRLNQHkSlUMGeTVpyEsN5 Gi7s3xKTnQB2r5cU9f2CcFdN/BIsOzQ0a6MVQBicG ###LXy7RxfijF2TEzDSgSKRvfCwYRIuFmxs3bOo/4hyFqU9GkgAtyUyeFz9D6gNLRyQ ###jfORCHauRr1fjPuXJJJABk8War2yRIWpJ O0oSXGjBDYH DdsAjEtTaobkCNUoLs
###cHzh9BFxM Tigyk5asQqe733 ghEDnAWkDnEus7JBcGc/By3a7jhN/15mnw2my3s ###7Rldj8CWIb KaUP5PTogpgfDG/
###qQKshjbIOIAD2eKcQkUkIsFB TkeqvECtBubuzugI7/a7b08OqUuHJoAgHCdHqQo ###bTr0FtNFf7yCVU7 coAZYU5yhbC9jfLXtfZbsIfVjkOeixMTgRXE YGL8RP7683
C5C3Ws bVmOuT1B9RvK3 ###qVKFnRmCfETYGa8wIiuz/jax4Lp5JaU2VXHrk1qQm17hJR8Ayr2e4HucN34LEytm ###Fe1pQCPDBWOVVUij0ZCqpLF/g1ISVrbSfCT bQQsXohN73KXF2yLdkW08kV6Drqd
### cGaTftlgQbXbOpoFxavxadzyIaVvum/JcoyTdnfl685i0pNY67vNk3V2jVjN0JW ###ippvzarNNjt0wngqzZSCB6hckzEXkhixKjrHaBCkZf1ibsNyt7AGtAZl8eN8s6lK ###t6w1uWYq0XiUHLtY4GgP9g73mvMVv8PhJ5UwqnCySjhph5iYeR7Uali3tqgCFXgk ##
###27pofgePLWs1n7tF5EKBP85fzB5AnCYmggnQaOFDxbVZuHh0QNtXYsl sViCtvkD ###aJttzgFtAITCmutTsSkrWAsmQ4tyZx2OS1xZgdLvRQIrbQ1QXuScZVwvvhTL9jjV ###ypTgOAvbxWC4HPtjFpdnMRpbMnqMWZCIGwyaQTcZsmhgFnv7R983Wx1x991OJGBf ###iz6Wth4zcNyc7oEdM5wtmgDHFmspuMpd/AM621RNMtMkEoXXW/D67d7hKcs3xn9p ##
###14pkBa2pgKd6 QUF5Ky3I4e iytS xmLa1eWqmiKJd0Rv m6m0UdUujHDE4X3bCE ###
Rvjd1TMjIql roYnmpIvjiG51sAY/k7 ###nadYni I5fkGoTzOMwrjQd/9V8fxFIN4MB7ga8J4KmN4ELCvieKpCOFpOF8XxJOP ###4IFWviqGpxDAA818RQhPZfwO4vtLI3iqw3d4bF8QwLM0eoem7ZHxOw8G70BjNeE7 ###Er1DWYn
###aplC2z bQluFQnjKUilAqxy8IqdXTVLoQR8jYvog35gfUUos5BB952I8RdFxf8M7 ###3cAmpTrtJ8JrHBZwNmAezq lJmfrpVejdeezfje4uVunzE86tMiASqFFGFpwdzPu ##
uq9 YI1lZFAFfDZAY42T54A vyFZ8Jxx acvAT7ppgjrg0ysIk ##
mT71WLDkupPDNv9XKDtydGEej8MDkr6Zy1js6r8bquMmvIO Nnni ###7NmHfvnjyPqoqEBRgMGe1VeeNZb7Ynpb0pf5 HBfJeZZ6kuvRnnuONSt1WGhBHTa ###p06LfVqdlpj6w91W9CoDzffqlLtFfydnppwubAlASkYls23iINuoFNioKjFYmw0Q
VOLK0Ix ###et1TzRWZzq9gLo8ciPtFA3EfHohbORD3gYHUcK6HByI8ZUW4yuPKj6T8ksGgtknN ###WTxKXo2 khc dhzuF47DrR2HWx6Hq8ZRng5aNriQaEIctXlnHb
###z8Aeh6YPXrUegLh3fd2bDxd 72beRHSq9w/BmqsHUFbVK0DZtuusxhetFsvnByBs ###FizilgXmA0CWqxpIa BE2IxQUNzzw0VvMLy7AZ1WWreV0F8r1Exoyt1CMV0xqvUl ###xUd2cTMSq3gFI1GgBQXYbLA0MLlFQFvqgE4KFmgqQlvPVRo9qhItnQyr5tQvxSEK ###DhvkEU9bb/ i 3
DT7P5t8z /ND nxcFYVo8/ /7ydP 3z/r/H9a3gDcOdk7PupU
###HeqvTQJQmTZgye4hFP J90bwFFRlTXKo/u9hf Ie9GcD50f0aTpP QOe8gc85Q94 ###yh/wlD/gKX/At8wfwL6gn47tjUd5rM0AMF/0Bx/4zptSagC6WKM6XYCymXfenpwe ###HfCNLBQHPZ5eBj08rm6H6/HBIPyMX1rmliIKs78cLnqYE3c0G3LkXdO6pLvNh9yx
###7iH/ lOuJYnU54y1N7dgoc2bHHGNhdq9 2JdlcYLfujqckJBqi vSLGf8MNk/yKH ##
/W5XwQcFE7wjWp6yOIjDKOWnOM4yvLeYW0nCNEy73S5/SwMALvGl ###vwxASaNAxtj1Ai9NVQ9QJY187AFa8X0PE ZwI4C3DG9h54cQb7wO5EsUxniFMT/E ###MWimacoNJGnmh5kUywDGOGZcIgagPj8AAH7spzysIPCgzyygBgJoOQwi7jSIQDsC ##
###zMMGMgK9VeYnjWH1wAt gJWQZl0m6jTDG65jbhrmKgmjkGcOMRBFEbeW4aXvUczg ###ZAHgKQ15cWWAebCKeKQZUluaygOYQX4iSMwA0Z4vNJplHt5IzzjIAAVgOkmdLoAa ###Sh1YXIhHhhrwBOQnk4VXWgdByjiA0QSwpqROGCZxV3DQDbvARQTqbhSHcSKk3I29 ###BOeRGwDaz2A585fE82FAqTxEUaDIv5tkwH5kTrup3wWmwYQEQAPtyDQCbkJPrcZu ###5gNyZHl3oRMgPk8egLAzxBs2kKVAH13pB2gAGIjUAeRA4zLsbpAkGoIuLgDVQDfq ##
QiufeCI plgjxUZT7BLhg YaNI4uTQ jEdHW1YAREJ6CJMQ2 ###
###fkC6p47wPb4B/DUybMbTPAwh8pH4ZZjYJ06wj8AEHsmeSHg1qJn4Az/gsgmIe/FS ###QbLt ooCiM5wGnxcij6uOT8mho1FcKnIQKAVRmXXU0IB6TaglU1dMu5izfUIdzFL ###RZw2hDrD SJSpz5xqfPMIdVK 0keR
###tqoJA4sCNXEg9pJuGkW6ZhAmXYV7mJcoikONIfTtegogEN2gEJp5SWKY5EwwD39l ###PnptVU3QUuJAkBCkgExAvqpJZVNVM4swtDdSNWOYwW5X1YReIlD9dE3QrZJYoAXQ ###YLK7epwRoNPzpdkQFIGwG maUZCgi1E hmEGc6/HGQI8vpqyEMaJripVE2hVHH4u
##CtosSQDeSOg2zrOjLO7CyCOpCeMIYHo1tLAegW4EQzGoAt1MMxRgETDMTIYSh2EO ###WkAzzJOgL46iJES JTVDUNS7ieozRs9zEKqaoIQSF CPMCNeEuiaYJsApSqAAAlR ###rPlQpiiVP2YpLmVFQ5kHpg5QoHxELhAliiekSH6hIs3EA8T6moagFfQEC4EBZF43 ###7KpVlhIIXQEI2G8IKq1aK8iiIl8tXsAArBVP95l4kRd3BUNJ1AVGqFd2GkO1roIW ###SC M4kzhFmgYVrpuNiEnvK9qAvGD2aBqAtF4XqqhDZD7hqpPYKCwAJRwScGSAKag ###kNBNU5gxtVZSLwW9OhWK109cU5flj6odrql74Y8KAqmp4OOPCnapqUbGH9WopabC ##
FFJU6mpZK18FDksNZWU5o9KgktNJd/lo8h qZnjt1pr4Jpa ###p5CPom9wTa2NyEfRVKSm0mP4o9JxpKbSgOSjaEdSU lO8lH0KqmptC7 qDQyqan0
/Kv2Ra2rtUj6K5ik1lV4qH0VnlZpKo5WPou1KTaUL ###y0fRk6Wm0qL5o9KwpabSv Wj6OZSU2nu8lG0eq5plH75KhYBVzUGg3wVa0LqamND ###voolInW1oSJfxYqRutrIka9iAUldbSCpr2w9SV1tXKmvbHlh3WTVB oI/WzospLn ###5 w0t762W9 1Ww 3Wz9otx5jbj263fq5cmvn2a0lEbeWutxawnRradqtXQ5u7Upy ###axehW7t 3dql79ZyDbeW4bi1vMqtZXNuLYd0a5mrW8uX3VqW7tZKA7dWkLi1Msit ###FV9ureRza4WmWytv3VpR7dZKebdWQXBrdQu3Vi1xazUat1YZcmv1KLdWBXNrtTe3 #
##VvFza3VGt1bddGs1VbdWyXVr9WO3VrV2a7Vyt1ahd2ttAbfWjHBrLRC31nhxa 0e ###t9ZkcmutLbfWUHNrbTy31jx0ay1Lt9YodWvtWbfWFHZrrWi31gB3a213t9bsd2s9 ###Bm6ts8Gt9VO4tS4Ot9Y74tY6Vtxan4xb685xaz1Bbq0Tya31P7m1riu31uvl1jrM ###3Fpfm1vrpnNrPXxurXPQrfUrurUuSbfWm
nWOkLdWh qW t dWs9t26t09et9Re7 ###ta5mt9ZL7dY6uN1a37hb61Z3az3ybq0z363dB3BrtxDc2t0Ht3bjwq3d83Brt0vc ###2p0Wt3aTxq3d33Hr94bc o0lt35Xyq3f0nLr98Pc s00t34nzs3t4flAA8DAkwiM ###xaSieql2ru/qrhXglXDrUVcOWqOsEmMa35Xo1pNVOVd6oqvmWdNIFYlo8qqgLkOZ
###o4wOVqGCGfWtQnszml F4meUxgqd0eibFeqmUVUrNFWj5VYouUZBrtCPjW5dVq0t ###tbyslVsafYVCb4yBClvA2BEVZoQxQSosEGO9VBgvxvCpsHuMzVRhMhlzq8LaMpZa ###haFmjLyyjWfZh2Xz0DItKyxLY5VWGKXGoK2wZ40tXGEKGzO6woo2FniFAW6M9wrb ###3dj9FWa
nAp3 ###jnEFVXiCjBepwolkVKOy/8nyXZVdV5bbq8LrZTxmFQ4z42yr8LUZP12Fm864 Co8 ###fMY7WOEcNI7Fsl/R8kmWXZKWO7PCm2k8oRWOUONErfChGv9rhfvVuG4rPLfG61vh ###9LX5bdFfbPmay65my01d4aU2Hu4KB7dxjlf4xo1fvcKtblzyFR55482vcOabjYDy ###PoC1h1DeQrC2Hyp2H8zORcXGhdn0qNjzMPslFdslZqulYqfF7NJUbNKYDZ7y/o69 ###OVTeG7J3lio2lqxtqYpdKWtPq2JLy9oQq9gPs3bTKjbTrK244k6cD1wvAYhjss3s #
###UKdM1GkhdepLnd5TpzDVaVp1KlqdblenFNZpk3VqaJ3 Wqf41mnMdap2nY5ep9zX ###WQV15kSdHVJnwNRZPnUmU52tVWek1Vl3dWZhnT1ZZ4jWWbB1pm dzVxnbNdZ6XXm ###fZ1foM6hUOeJqHNh1Pk 6pwmdd6WOjdNnX nzjFU51Gqc0XV bDqnF91XrM6d1ud ###n67OwVfnGaxzKdb5IuucmHXezzq3aZ2/tc5RW
HX7Q3UbSrU7UbUbWPU7X/U7pzUbrrU7tfUbvXU7hLVbjDV7U3hATnr ###YNzLvdPj3R B3 cOxJm3y/J24BG4s9FiNvwIpczRN09OvHOmiITSRcgJ 4BSQeAR
###rpSggTJ3UIVEchlwWhgYSSNO5PBugCOJcCR85h8LYPmIcEr5ICgzSUzpR/BRjqlj ###AoJGiFlFKBMFnqQPUsoREHCyETqxHuLB AjL8zl/fIXlI8rcICfvGwEmFglTyW7i ###46H3IKNcKZjBQyV1CLF8RCf1dWqCkNKhJJx7xedkBfg6SflEOmagALjwCZtI1FHf ###EFuIsHxX5VYIsXwU02l9yVAQ0PBwHAwuvsJxRL4kBqJz/yGWjyijAecWwHdQoRHR
##KtkvAhxJhCPJ1FnuEMtHhFMfxxVSOg1CM/6lc/1g3hTM xCGkrokSCmViqSLoRPl ###IWY0iDDzCr4OfCqOryjfiEqZEVACIMwOEKkMAUFG6VkyzmlCR64xaxAwnkyyvVCy ###iJDyICSSQorTR1AyoYxP43OehZQy5GSctgaPoDdCbCHC8px8gjId4SsqH8ph 4CG ###h MgcFNKuETZbULKDdOg1BFhQAl3QknSEISUfQjf8QF0/BdKSosQX1HRJJQUTiCK ###gfGo0 yhTwVCSQYRBCqfUcQVJEdKwAPMOJsKJVYIuogeHEmWSUYKyuAUEU59Glcm ###yZailNNH JxXIZL0S5QSI8aT8ZjUIsTj9Ik6TR/iwfgIy3cjyb0RhpRliE7ey0n7 ###ADNchJgchLLKYN6aAFO3RJhJhHKGYBaQ0KcsIpSkpitZT0LMYRNhha5kzAnwDeiI
QaFK759TA2ApR2rYAGeo77QI ###uyEYx6kduib94EZ mPAlH8AEYdWp2Q6jNFL3rsj vvoCik QqC94cUxXZiEE3pIG
A ###DQCnAnSpLwl kwaQ3H3FiDk Qn3BG2ti4QdgFyInlQg5mLtMhTtyvIV6SPCKGxVk ###FwNVJoIDLwSmpMIg7fgNZGIaggyZfCZfMuAbGDbAF51wPIjEmwHBBequlgwjezJZ ###gNCHYQ4mvoRvSol9xbgymAToU6LJMlhaiYLAjldB5ggTlEkDPqBbRadlXpiGIgpy
MEnh1CqW5bgolULBqWD g0njSAEWKhsHWOJ1R4i0CIZqpYhJDK oHuQxBH ###kR1yKTiAxRiTvkMBl7A4VTQ5SFnqKR KyQ94iZfwgzQAxShSUaAAM8j31A7RVPGa ###ITC4TH3xYB5iGYKPtxgJwUo8pnpAqhR9J0X qAL9AdWgdnoyBA7plKa9CGZfBax6 ##
###4ppB7wC7WJDoB6mXqFnw0FiUmZOQY2naw/sYZaFHwCphJiK5mjFFbSOyQpFFnQzR ###zRELVYUZ6JDKeAjx8sJI7rPLnZ8B0gVykSD5ENYoLA2JEIa2wPBKrNBlISQwM0Ff ###ySSoGZhi6olcQOLXhCQhzXK7ZAwKhpdJAzAjsfJkAcsBSRflQp3VQwjqoBpCiH4c ###0Q9C1Aa7WWiHQEtrIV77KRw2BLELYlMADTCOOJYLMik0WowUYMrQhEIiaGKhUo/R ###ToM2UjtkWiAAQeSp2yVBvUlReZboaXQxBblQaolJBlkEa4shgNWDXEiKZXgVqNAb ###h1gLEmHxZOiQkABrkBFhyhAEoLzg3X9W6LXwEFRgs66s0wD9PrHwN4w0TjNRMCQk ###WzqNgW0kwqJRmMLyCdT9o2GgPAsSqs1yAaQUimoVqN3FYHZpAOg4UMa3hHALOKgK ###Bp4MAZZCqph3AGZspuzT3Hk6sA9iIAQpBhMHE8GLCb0cvjpWISHfgirQdzxlFAd4 ###EW0cqDtYgXOpxcSh4DJZPlnFIml9wC2oGIE8xMhFUjtEnFVdP 3Sdbn8JcWlFKoH ###sItCIUsOHRfbGeQ5cLQgk8tig0y7RP0YaUcIiUPKQ/UAuoIv0 ijXy2R5QwGD6jb
###qhiHmkunoE/rw4XA5zzmo/QAVNSVa0olBF1GCmo3WC3ST4DenUh98dIsURfZ6vOc ###dGFuhFcKyx25wCpDpQUAT07BKojskHVpDYABKcV04CEZpYoTgxqSAtOXghLMLsTo ###ZaBKBEp19dAaD ggK7aSoR3pe7k4d5EiYFD53SQI1BOqe7GgCY9PoFtCLjSmEHhP ##
NSOjk ZrryInB2xurMYlR6lI3iorHaV444D ###59X1vIA69JenAgusNFT4VBR9lwSbHVOvxKyH3nc91x7dn6qcrR7eswwYjK1w yhV ###dz130Tehlir6Q4DjKgcHCnXQ8zPi 24EUsBHe2vo0m3E1j5IbjdjZ3f/9GB6PnTw
###2MhPs9FiMZw4Z/fFrnBlr7XbWOg/L0a43hV90quz2Wh4ASVno ntnL45F7eTAfY2 ###b1DVBpY7vRrNHaoOv4d3i1l/sBieOxez6bVz/HoHqX/VeTMe9udDZz4cAovpL/CD ###czGdOf3z8xE22B9jU6MJvLvm8VDbx8Nz4Byz0dktvnOAwzu30AyAPp/ezgZDenM2 ###mvRn99gcSqBPI4ATWsbf09sFtgJsZnQxUmKhPxs6N8PZNWLlHKTY9OPoHP4gsJD9 ###XUxBWgDPv0Q xtDNsRWsdz1cvCDA3AJoc2SgAtOAhDjMLczDog wElM9AyENn4Qe
cG3zRP2Ko9ADWsw GI6uH3Sf96iADt ###TaCNyXDhnEwHo HivsOrCPqwV9NkOlPwYEWel5vhAAkAx8RdgR4AMrZ/75wNkaBg ###eFMHdDJ4PcQGAcjr6YIaYdTBmjqHAXxUdE2Ymk8vFp
###b/O5HuHpD3snzsnR69Ofto93Hfj7zfHRj3uvdl85L/8CH3ednaM3fzne /6HU eH ###o/1Xu8cnzvbhK3h7eHq89/Lt6dHxCTbz//w/2ydQ w9/
4UBH/10uEutwRjsATsv ###dwHS7Zf7u9gdjfbV3vHuzikOy/y1A2gEIPc7zsmb3Z09 APb2v15Fwa1ffyXjjR7 ###svvnt1AOvjuvtg 2v4cxNsvYsVGDzcA07bw93j1A2AElJ29fnpzunb493XW Pzp6 ##
###p3tHhy2Y9Z8AQwDpNtR Rbg OqQxA7KOjv8C7fLMyWx0nJ9 2IVPx4hewto2ouME ###sLdzaheDLgGZp9ZgsZ3D3e/3977fPdzZxQJH2NBPeye7LZi8PYDve2wVO/9pG3p  ##
bjUa lbh0fyvM6jI5W6pEQdj31rrVkzi3s 7r3pvjoCUGhqcN3tOuEpx ###PhghdKHfo0Law0abdwjjxXjaX7TkuZUvNdPF/NWLNbtiVcEesOBrKp2rXCg6gFnR ##
###zx3vLr3g/ xZJ Bosv99OJ4P88xGlpjhJD7ukeHWeuRlWYZ xCylAZfZGM25VRee ##
###2QgaD0DTwarzdsIAn5OR9rchiDtkSJPhJdAxmA T2 uzIfvS8qRtHf hsY4IUUbw ###aSqnr8BSh7MFIGPL6zjPrAotZzoZ3zs2EGgkDBbw8mY6H9lAPMut1d0dGhxgzvVx ##
###QBrndQQjaY42vfXRBlRcH62sqOWmCwJM0BM/dhwCr3n3bvQ z5P4uz3C5bP5qjCX ###HQdMILT66M2XT rfzKQCDNakCmx3zgaM1/kj/HthkwFyHFhORexaWkOuzXVTFJ6N ###2rGskGpPqxbFgvWTvGxQldM66RiODGyQJFBMAVu49L2QjhVTdHA368KS9sMs7OLB
##WZQFLu4Mi6SG9gtTiyY3vP3x5IdjULTuOiMXVFiqkrmkAtuSZPvVK6DrnXfe 44D ###yvKpn/Tg/3/24yagVn306z4GdR/Dqo877yJYRfyfvZZOfkBlHcANOxpHKzAKeInQ ###dvzI4E6kf0MkX8OWfI2i5GuUJV/DshReeXhuOTPnhl75eITai8yLAA87 13zIsTT
#P4d 06qERk5HN0bGjtWiZRlZb/sdmxTO7F4PfIeYgHkROG5gDmEehDBBfjcyRH0Q ###OVE3TMic2gZjuUCjt3O0ofpORG7bc5jim n4fjK9BnJeBYEGlEqm9gRIN3bYP0zu ###WNRH8Gk8 hvItjNQDEZr0apzRMRdqrKc2BX/7wNsnl9F7jKHZqrfwFTfERkA3g5y
###/BuPw0lwY PkvuNUMQRYofewNu9oZf5qWyNCUbNLZaPAn0p2IPXCOrUXxn2rA u7 ###I/JEmsYqW5tMeC1jC3BLRibZHB1Zjj2t0AG6xNApM7sECei3xDwiDvNbIL5jiO9/ ##
###7S1bEFZ7kxH6McCkmzPfGeLHGQYy9c5uL3ArTtkw8HiB3GeKzAELHJMm/cLxHOBs ###89vBYDgHBoLyy/g4yfDB7yBkpzMUkB nYCIBtAjxCHpv8t9Ou4f8o6M3YAdX/Rm8 ###hF47uT3YOfCp/uWwRbGUO/3x4HYMfJShB1aLT9jxxWz419vhZEA8n1kmiGFnfn99 ##
###bhMEfUcLBSPBLUAsQe7gy9GMeWz//GN/goJoiq0tA1WFgiHM6EoGiAf9MW5QXk9n ###pEBMAM8Dw3j7wNlnoJrcoMxCwU3xptSHoP/2BpSZYbNFk0Yzj U jaAc9gA4GAxx ###JrAZ3AogqrhYMFEspovc6GizfihQzx0l4cc3V/2z4aI4LOdTf65VLqg/VdLPJqzt
###6glF0Q0a14Q2g2kHWOobjKn/9i6W04UVgauAPhteMC6RZId6gtV/ALOBFf6 GJsZ ###f2QXdnO3NzT7k3NZnGo42LXqBif qsM0it/YeoUPtLBywOG0XWB3gvpZf3I5dN4B ###kBdXLVx5emnx9EP7y9YeTDKvr12gUugJd9dRGdD1WqypQLnNTX9jg0Kgq7uAT5Ol
###VC2kx09XowErtgW61fTMGjjhHolYs5qv5TVCADKARuUaHk2sgVGgEXZ/JrhGDRsK ###3 CmKfFplgsw zY7tUmnKN6Evy5dZGP74api TmvqGVg5RgvRSRxBSD1HX8NN5lw ###C 2mlZNVgJmzITt4kb4BINw7EHigEaqyFCJqj3rmjrErQeQl0BPaL86z0eTjEEyC ###Z87Oq9fOAs8tIBYPpwWMaOmCPEyvGad/sSAThoSvzPNocC6aRq7xDioVVzxsgWJO
###xDHPsTiLCb6bb3l/vFi41OK7ueu/f F1zPN7kHSfgHhhYSyIbV0szixpcarI0xDC ###9RQE4XQyQlDvQShOXFgvM7DaAcWG94 RURUZsmrCE1I 4xHypi/NE8YqwW8kqRFa ###QWpU1gLOm4FGMp5qNnmuUbOan2wccmGied yqGFhwRztnQnvZ68F0sCs/8lUUztD
/poEBvAAZefojzxXl/dlkeZG98U2j241/zxwHe ###vD3pAR2eAFFqZNsvnWe3kw T6afJs K5g523J6dHB5zHIV9VvhweYe77vZ3CuYmq ##
###8lDoq09/ 5kNqwRNjmg3AgFs5uEeWOHSoDFuejr8ebCBaLTCmGFE9nQNtrbC97o0 ###fd90StH4vg6Rzn AX39vDp57dykHkpbBVRhdBrCAmD26y/wUNRH losz9XfHgsTE ###Jdo0TCcaNcM/Onj5em8fRCYeznmze7x39ApD3qPKEnuHqkRsDROxPe9f38BwL3t8
###KBFA6FZvgKNZH8MzelhU533au5DTXz PCZn8/mUAgeGH9HaW4CB AHMKm2 YZ8W ###ysbT bzHcMihp12odw8GE5iNZ8P7KdmSYD3xcejLIZhWg/Gwj0EFaDWSUyJ3UB60 ###UiC34x5I1l26Lwe019nk0gxfvKYza3AiWM9liyJ3 gSKng/H/fvh V5uehbohej1 #
izx86q6cg6SmQ ns9G ###F4uqD3yMvurLYHpLAykjlY8Qji6d f0EQQaI3wVtEDM9liLvTWY u/SIC/vv13Fo ###lItuU3MMYj7ulpWBT5KsqdpmGrCR9x2n1IIl0ESalVuR9pe2sQQKi1Jg9jntH9aX
RzURW/T68AvX3mfsI250fg1DeKHMxCxH/TT ###4dKuzkYT4c8n6NEH tv5Ez0Sj2kCJB0eaE7vwALUA0oLHtga 0YON6H0mumdm8Fe ###QCwUWhG t7O56eck7fLMKhjEfn3zbvSecxEASYwm8NQpkFLhKPCXtMdHurlV/LkC ##
jyysVQToeNgxdO08f0EO2//Y/rg0YHv4KWs8Zv5d1q3ObX ###rLAsAbDiKPNd514pGrgsGHj15p5zIQD8SCwdyjFQvRBxwx2KID8HegKA7gE2Pgx9 ###p84lcxlMiXFHHxE79/Tx3y2nYbmZoH1XUR9zwd0XPE8a9WYJQzfQSdBqGe0Jz0SP ###Zhi8O/zE6syQQ6DP ufO2XDQx2iDT0PnfDr5A50suOlfIienKLvhNQZElLDsBzYV
###Lc7ZKl0vggfnFXQa2kVQUy1aWiv8qs4shI9sZP9qkI7shqr98h7UtIXfyjFuRsnK ###yvrSCsGDFaylYZexPayfreQC/HVrM7Qatnn6pnZOl9uR8Y5WfBjx4eNGHP5eA0jr ###B0BVQMU5PTrWQkaxprf/9V yxV2QZvDnebP13LvzbcYhgt0uq13T2zc343uV5R9D ###YlAVuxVmgDdQc0ATHle4PXMvZhR9AuUIdnytVVYMqXKogLU/SKqWNNnDXep5jclM ##
###MobmyspgY8dKcIKrc8dajHu0GimRqr1mv93yHE0 fu0S/blj75uVV6e4busK5X28 ###lYsZZfB6I7dIHloBj1tORTU/DFgVLOj4RjsHs0qTi50uiusU6b2kSZzlFjFK/MOK ###9fr4BRr81hVKoSHDjyAYKJbxbDy8tk4tjOjeFbPIlEu3f35ulprlUbnT66OlR7Fs ###wVvDwKVONM4nB/k4H6774Xlx2dsLXK/us/7gQ3l5P/ ZF3FAq/huBf44 8ar XOj ###rE8pf09ehVVLYfAetQvQ8/HXSo746VNOYSnqKkvaWX80EMXeqIHDFWmiiiEV9BDj ###DCAGck77YH3yAuilDabg 1y6rPbN4JpX9GFufcMMTNhI6ZSTObYH0 GFzWkA6BI7 ###YOX8dqKCTGrXXxXzuatQ6e3v96XK12zBAf4s4xKGPMiZljDilUHFvCxTPXXzYMtA ###9fYd0Ma1tYqvjZaPue5Ay0f0UBpJdIDYQs tKogpJdt3thTijtiOragQSssdJ7Br ##
cL/rXg5nDttF MVnHwr ###MN1PSAay9THAK0V9jy KLH70MdNtlqR0Zyh8/Nyp7iHiUlkaV/WQZAJAxcf6dtMu #
a prHDhu7 t spXVQ9078Fvqr5Ca6LoM9WrwvKcfhlJIzN/LG6R5z8e ###lab0yqNKB1 AKFOa8fK5ELydi0G/6M2H4yFeZkmRwdH7d5ktjn71MO94x5FfGHbd ###4WfX15zfLhRQIX7wS4UCLsRXjgaPKRTahazYbkupGPtgJ6AWLE4BUlEx9bDTpp0u ##
F2isICG9tcZ/oDORSMVha0YtLFZcWzffB8BNWBPx9v0O1DOziwd73 ###14sb0RfFHWjLa1XadJYN4FPlBe9YBmIbmgKjg8tMztDzBo/z4fnL 8VQObuY8H8W ###svc03Rfamd9eL921hjcdh5dUy7Je5wsv9 SXK930F1deq/q9n3 vgbV2xjnu9/rs ###3AoOVgxKKL/o7MKZL6Fiw4/bO7n1IEMurYSlG8iEaZYU1mysVyW2/7wcjkhbeDws
###Lmpb1LQStHWZFc IDEV4DNFva1b5xT43jELGGodG/4Z0yLTtF8labbcxXS mIF H ###gw8qaSidFiuQO7YfrI 2UOFw3TzFwywqtXAFYQCsLtEYBe9Qqpp/Fct6puzjYmps ###BmAH1Ji26Tx54dOSJV0ASP2NeP4fp9nUjbxu8SnnirgdDU9pXwC
###R3Vpc Xn5WEXmGJrf3q5W2CCSpnbUd7ppVf4Yq4IEIvWoSgTR8Uppibnwzs iVf0 ###iVXsfiuPIopnvGxV yPWTAArxfK5ygNHl1hwbn6a0DHGsUpC ZEd3mfNdmZLtILb
###4i0n35ovA4KyZI8W9xXf2TrKf8jNJhLBeIyxqL3r/vyDFDUnFnLptIqBTO3pmNK5 ###gV2Af7KFoP4KTBI5c8QllxVBG3TqEIU ObWzU8hOUvwun0tpAy1ZcVB2rOg3k7PX ###I7w7T6h1crb9sT8ao7VJb3Q5TGQyObeiZEr563hrUj8a28vkhcM0lywTN6tyaRaR ###iuHBfi5NBFoygKjFvYW989v
tYdjJ6y56iysghys7bd35/YSB ###znuVrHxxKhei9Z4u5OrpdVv Mp3OS8nizvpjvOOtVEP54KuS6FljA inJqkfLLtR ##
###XgIDjzbHHWRNcvq lR3Q2q2sRJIqRfgFejsMYbZbzULFoG1VXanKz9bSDSKvwQwn ###qukV4B4W1NpfYxUPuDzVXFpcJwWbDKyp1w4roFpz7j/HT4S8Ctu6VKFqryNfl92Y ###UWtrK1S2Y1U IYtArNRKz5871dASp6JzV82KLE2u5HCCTn2TIU2lddoDnDf9TlV6 ##
gr3tgIl35l78/GRrBuO3bwcrgF5XKfnOM2MILz ###DFV1zFALNmnfZJ0traDX881NSn GWFpC1JubfuAtcfgMPJ0zupkDt3iQa BtFM6B ###LVts1XgbeOW9fVXCHIIr8SkxRT bxC92QuE8oeBJtVzuTcRuXzKz0AUn5iozP0hj ##
###Lbet8dZPyRLKVTwm6CwjoOIJCYyiW4na9ly21ppZ/oX73XeFKdArtYTdUpeW3265 ###DJBtVEpL LxHm6i2aVRq1PQPRs6m81zbOaYjPc1erifj1p6riwnRanJpTlF9 0QX ###M1KmaUoNqF1zH0dT9Hqzd87C4wJddAtOOk13P9Ht3lDOuhDzJ7l96XwqMWs3GJE0 ###WejrcM/gq3vDp/jRsQ4q5GiAPqBLvGWxYR9PlSukORJWzG4KmBtOpreXV3x9X5l3
/Uy4mxlX KPFP6twwJqnqT 5h1OPFCNMeTi/M0gETnxp3 ###gAvcDPlObXPhsGPdmTvu37dWcy/pai 8GXEMqqC6JWmOgYmfhtyruk8SnavMZkcX
###djL1fB98i 1iNBsCSofXN3iJEwYj4rTjCB0PqeHq/mw2Yim5mjuyrBFlMZb1QtYr ###ISph6rRASYXZ9P8YvPDKS1K1s6Ibd4Vfm4zToGA0mXethK1WqY2idMhL1qYN1ka5 ###8LJY2Sp kxMwK9WEUS2ulpYVZjC/
#z5euKFA 7lfqlxJ9QD tB9KsVqYKKTenEowUQNNLT/0FtgCPrkxFk5tczhAL25w4 ###6OjNX5q4 AfQVc6RAWuqigN0nCV8YWm7K9XNPLRqO86h2frIbcjutMxFC9b2nBC3
###Ahyq4R 291 D2vSIBqLf2kBW3UDuYFRh50eMlNJlUMu0rFKb oQXsMXv fZo2fsi ###VXg46RNdEYvTna/dTOcL/tPwN3vfLJdWgLMKrFsdbZ9jujAdDKVrnfXnfC Xdrjg ##
###fG4F098oTnkFI9ss17O09CqT K94C0qTe13xwWpFHcFrrYWun0/cr8tiQoWL8XQ6 ###AzK9WKGK7TBYw0s/y7YuVSGPnScu9bQDL/Mn2aum3S9Muy2xVix3B04JYRMD6XZ6 ###e/tH39s8q XG5Z7wPAr3wlU7TlINz5xL2TywCQS8wdVAdYlW5M8lkLp5SEst//Wy ###44RFeWUroSvBg8sFLwsWOAtyq2PfJ1xIYllMH1Ah87yKVWeFt3ndMJW0N82/Xq7k ###Z0sWpL 5KA/n6HioNmcDiQSHG RqfVncRxSzn2Y2z91zXv78qGcWyEnyDaJSqtV ###sCp1rtrYrrKnO3YswiAfitBxSoEJhhB4jMUM/CYZ5sPGe53tX EceYwCqt4ycB2n
###e9Z5kpkYZZe2g8cq1YzDKAMgusCqokrJPrCubc5q7phtWiRPDRyfgpQwLgUwgVYG ###6ec6qCSpnBx8L68HK0ecfWDYzqBYHs9O YQ/NZ/33RNkhx2K9H4u Q/t07oSuT3a ###UNvk9dlRuLjrv7cHRtH7OPtVIysuczoJ0BtM zPAJc3wvb2qlVluzZcasJ4wy7rS ###cfWG5ctpAryzfmAV3WEcFG3jTvH2S6vKc/KNW1e3dyp84xG/1D48mXKT/6VqSJUT
###h DZ6V7Iza8vBs1fMI by2 Od7df9Q6Pjg 29010gy0Ko3pRaMmZv/ 9OLQNJ8S3
###kFLHV7icHJCpK8tnAFQuAI1L7AEIdKeUg70iJNxiIdLhO0uSAJd9dT/pX48GfAqE ###uSzljdE56Q4wQwzFfVH83HlFeQrDpUwyt3MKsCPXl2TOMCfQCiGMW05MGiNojgV9 ###gEK/6a5A2524f4BJhKp0REr3FdqJLgJ9LL SfqlCUKwQFQlCJ4EQrrHiG a89HCz ###nT7A7uIcuwja5szze9f8DVzcerKSdlUn21TNifIDf6/kml4pU8J7t0IltgGorGPD
/qsHKOlN/m ###U48AR2Jo0DmfOKxlYBzpZGqfAMAPa6xom2lghdIZDzETHxVby6yCZudDepBAUoJZ ###Bb132EudmGdO5K4JrYwZzF9UOrGGqy83bfpYNWcJoU2QZrkx1W8Lb93UVOFahJAj ###O Cv3M2GJG1Zd35ZmiDkYty3dyDwEYD5ZcPQ7kPeeKzSqUDB8hxFBfq0gu wrfwa
#3Vy4920dMBhNnGzBMf4YJWzuhCwdWaFK5favR5NC1DXlQbvuUeYMez Cr85zHWRy ###Dfukg4l0xxhfFZrO1LK1JU21oGazGYEhsBJ4LU0QqikY2glqwGdsXGCzfU52IssH ###BipIZT46H2E4Eihw93rO8VLsW7Cgrq/pwAQGY3Fr IE2SGFh4kmJPml4Q3PfYYVt ###I4mRNxw3YBkwlLB7kkeW1NRISNv855pS0HRiG9PW41oKVUtBsaUD2/2oaribTf5j ###xY9aa0Fm4RTJBROkDc0WE8gjjv85N3dCSs8oeOjGNkqqeTsfnuueJBczVO6fnw/P ##
###UanEbK06XzH2llT0gwdqJtmymskDNbNoWc2HoPW9YFnV7kNVw2UjDbzqQ0i55j3P ###cp3p17RoleWtY9BMnm8u2CoYzi9HC9tVb4cRmGRgj9qv4Pxfjyqay/D10AYHACnn ###h 30sYMPwwXzicqjeJ/o3BWsWbRAXWfevxgu7nlw0lizaUu ikM xlSGBkruB3jH ###7qBS0qZ8Guznz3H7Inj HLvd2mxikrvAavqPDkpW9fRCeDj7aDaXZIQyKbvokhHe
###258vdvRoWutqBzX/nkZpspSZnWnq4FH70mbzWTacbTgJIvsY4sHu9snb413ar 0d ###nOySY3w8BeXwZ 9d6Hke zn5FYUSeO8SeZmPGKmJXPnZo7S2h3wRG/9JLZQjN6xW
###Quw4eg0Q dDtgppIZU96Nrm0opvKnGLLyadEKaZ5UwkDQeNFBqR4CmaQqtxVq6hv ###X6 Tz8ZTDCEvVs7nu eJ5bWG647ia37LoiswhwoGnDtEaa/SijO4FZFiD60UKyRF #
### SldkddHhyAFoPWuc QEbOFnLxf tetRCuBDHkTpuHeReisGlSuS76vI79S RWWc ###9XIy1/
#YBbL2 zRMcqH2rXPr6gpxRQg9t/LW19 WqfiPNQDR0/weEpVq3x6peqYSlVpOa5S ###1VX59MqSmP2iH2YpmlaWjdR5TJlHHel5LC4r0Sln2TqPPeSzpNHHHvtZegrkfKgy ##
###s Ef5pSgdDadXjvj4cXCaeJGC VNuOrf3Az5crPCjr3OtDnCvE79Mbp97lVyKJMF ###SohSnB3n08lQgscen4G8tSw7NeLBYmXlQ5JyxuMSeCI5QKjrqmz1e4eg2R1u7/d2 ##
#AC FX/tHJyfo0t75nVfi45eiPor KnUg/rx5XGP7L3jbRAm35haqyItvw7Ebw/X ###18Gibm75vVb1Zsz3MNFT7W0xy0lCdUuxXPTQcYLEg//athpVRIg69PTl7GDnh 3D ###w939k38Erwu gHPnrkD8wskGDYrl1OnukvU9Wq 8Z/YRVz/mvTp1V77Z8
/UFl7/l ###PEH5K ByLS65DC7vj8xdCff46pz1a393 7jZRE2w3aJolt3DHVC7jg1 j09Lew1V ###qhj6P1DxKwQraGIuHTx/qFc80MYlQPFqVefbeWi0pf1W4wbdtNy5D7rUqgLdvaKI ###s9KSOPnj4Y9NF2JK5xJiYMRonBRKmEwYFbAU0mDk4zVyy2r5TWB5FrJ3 OYtMJL9 ###vTdv9g6//z3E0Hh08wALyIWDFPTVve8PwcD8fUCz7in8Mt77PUCGKK2BqXiZeLsK
###tZ5X DOvwlF1 xbdRkX4vgX8QJ1usDRoVC0qNZSqkHITCI65 uyGV8otuOWjFzay ##
#HtXGemNJEm/Aa6XX2RrZykOjaktblhsbml3ZMSqW lx2QgfLXMeVPuelpfPzaeoE ###ztJaDZkHpCA6e2JOv1hHVdzD9UZFTlRV0bcr sWKhOAhOkUPVyqWY6N4DxxzRLx0 ###USVlJqZbjMcGBnQ4Hc2H7v/H3tv3p5Eji8L77 FTaGfOyYLdOHTjlySOvZfYOOGO ##
###pVJVqVTFM6adHx88PTh9HV/2Sjrf4LWViPi013gtzGE/2l/i9UxxLSwmXUW5Dv04 ###w7cIiYEBxQu2TNp nHI bybuXMm4zTQHC2Q5mBHGPlcAe7UZcY/OlvtAz5dQsOQC ###jGlAQcNc1zP1taBe0kzmHmN1Hv0DVnv7QctWqnBT/nLP2Lkxedpf4zBJ7sZWz2HR
/e5Fl9XjcELsoDlsZQm ###lCiqUBB54lpn3RKUVwxIr8K56IIhfNVgt RYR336ycRYIh25mDlasf0OqkGDbhEf ###lhJ5zn/8QKNaJ4e8mLOWtKAgWHV/36uUslKcj5Wbup990sN XKfGHUKDIwS2lPzG ###Yn6LqVdRBbnYrojaSOar4pLP/e4501/gXrGFzshj1BUTnuNW74xlsJR7vWlZWRKw
#xK1QfsjQSgTj1bOPp6W/LoqulhI5ry2ayCglD514XnbROJUv3bWsYiqxii bcUBj ###uQlpTbagV7G1pK4toQRHssozLSXu14zL3GYW9Cooltq6VYjZv 98iHWDj7vW9A3t ##
###XRxKVO7plLo64PvtF9iqofU73OyIByIJFjHQORQIhxRkugd8Xt/1jLwvMZ su3uu ###w renptUWfRr7DGrUDeWlyrveuollNHUy/upiY61Wmrbu7ZlhhgW/Zy9xOpuzAjE ###YgBC0fekMm8NJEgn7UXJeZbUfOpejra9tdTWlVfJ9r8m5gCGsg8wS5Yh7rG6gSu5 ###V3J70M/
###jCZlA5hb0qEmg7iuuVKsO W6ZbHNAIOsPU/Laq182DFa/po3zqJdBhCWWf9DCpkB ###mWRxBQTJ8xpIAgJtROEklIzm2qfEHYFPuZ8GpVSu4f8GHKJs5Qblb8kjMpZTzmlS ###Jyndgs75uhG9jkzlUcA6x3CkyhuxLukfhUGBLGEcvia8FKMQCRneRtyhx4jK0G1P ###2tzNiE6XZngkqXEX
/A7CJrce1T/JQR i09j5X7 OFrvqcB8CDBi9K2IqYWv4T0oI ###kdiLId2FIdt/Qb4NoojRFD3a8pLH2bW86Eg3Hu2pCIKfBkXGpba854HD9RfaDJnR ###hEvfyNtKbzHFr8p0w1rE1yoijDiwaux9FocMi5/hPUeaS9MrLdUtDeMtn8T3PoRb
#cr5kXtybUY5bI/YMEMk3w4HSfxHYO/ot8Z64FmSL7xNzDDTx6nzxf4an3VJd7VJ8 ###7f7ozna5w NhyAPckv4c 1irWZfwVWUP//1Q ajkaD4YDgBFE
/V2yNs0fwg2DO nxrrXRsWL ###WD0/87p9zvb5VB0 aT0cHDgHpQU8P5fh9jmnz2dWSp95khYknLWSiooVjgWGcGSy ###5RSaAaSgcDc8Okf6EYT1Ung9aelJ1FsRUSi309inyBqvLqbFeLE8NeUILQ4z6hGi ###N1ofuIrBLxE9wa OLmqvlUgZgt7HLBCbYk8irSQGEmVheFSI6eDjHhAwD5ssnzjZ
###AahVLVRJwb6HWF/jWeb0JOeID2Wy6OW mr49is4rskhK75I47zVUUZJOxOUERqER ###EkARksOk/4wa0TeqUdnNyreDXmQw2Twa9F8 Y07pdhfFc5740b8DUZvujOOIo81c ##
/sFXoN5P3yZtbWXJaWv5a3vW2oUz1iJR581R ###S7j8VjlqEyqFxh4kOSyYOzYXJdL61nRFg3yyUoQ Oi/oEpKCFh53g3VJKXH/UchM ###6Dpfxtwo31DBnuX0kSlO42SkygkPpjfVfmIqUsu50WkcHUdLSGlt1NUbdbMaXZq5 ###0HZDMNViqImy8rZihuGwkO/q41z3HmdcerSN56vNPDlfiIfFYjzYcrP Y3bG9rSU
/VNl1q05urTWrxTe34qOoVa4fogC0eOxHIkspS6fyMpASY8c8 6NiahXuB7KiW ###m6Oqsm3SmdXBSElimvQ9ysxgaq1j5EW1vZ7RrOl5icQhs6LK7xltZ3hRzczlafGb ###sjaa4VBlLW9zqsqXFdWWEtWOoOx8qLPKpGDNNGHOkxXVirO8XmmzPdLyJUdNdRNI ###pSCZBNMaizSFQJJ1ImeVVCJJ1lF8SKw9oOu8FncZC2i9aHZn9LKqI0t6mtK5EbcQ ##
###kul0CRS OInrSUlZkVN8TiKX3pZzJOlUwwVnUMa3T9K5ymr5r5HV8l8sjV2UIgrn ###i6KRc0ltRtrKtcyBpSVUUjlc3pxKcWaWpIRYmSNv1PHZ2Q 1N gx8wcYmWDi8kav ###xWP1W Ye7I86Tv4MhEu5m5KWUtK4q6Kl0tNvrWRkK/QWSFHoLZSX0JJaKDMvYSKC #
###sj/tTtAfKOdfolp21r9CgdMnV5MIhyhmkM0mypkmBGWR5EKtQK xBkx9 OEZSv5y ###zr4Lp52OH4bfSeb5XTAAxAZdBsOb3vmDSfxGRFGdDIcsvANCUuvAUsZrOwQpfo4B ##
#GKejCV7rIakofiOQwQZD2Bxxq0VQfjfZDUqgFz GLW44fmCxmxTrtYM VKSZ29VS ###DJErOEhw/MdLVt4xdLrvpoNPA9jsRbdT0uDo2CvTz480LYlJwc0FT2ahX6JCEZON ###iJmJwPaDayzOvuPz/a5 0WycnUZGsqu//x0YgLIGviv3pr/8Aq19l4wLhB350
iVHfIQBuVvd4R15kpNLCXnfG8EAHT1ioKR27WKeNVKgYwkTSPE4O5N7 ###toYX1RQCVK/oaUZykcqOo1m/tTZjPbdm4ktGYVTWYqj44ltmST 95DfclCcYSNml ###x4XkYSe 9HgddUISyUpxtOozPbWfrXTshSLkQqTLfyX7H4mjnT/9Zva/LXfT80z7
#7hZpkBswiQIRpCBhpMZgUPVIwWsJtan1yeZ7orjv37XvTz 4W6rjCd6p2HGMP 7m ###zrbDvGdV Fp57jC2DWo226xE55kePgQ8wj/4xn3mEJbhH3zmVr/uzujGD3m6IXvj ###7njQmyoCeb4F/2xVo45UEShMJfzj6R3ZUjqCriitwf6eu2mEkYTHn6LHmrdJxR4d ###WbxtDTBWEqGz9emj7Q6jLPhJFPzhQ2sgr5h Lej2YVLAWp1255bf1dDUcwxdHF2r ###OIgj50fffopj9U/HYyUQ/eAazQSBHyrPYKmNH4AGKhisg378oP5o0A8lc4B698OX ###QZLuZEwLKniOvT
### XxDUn4a/BEzsO 5YocZDgDBtMO0KaEAYpYkXjo0I7nWTMRJnL4C2xzywSRHl13k ###kV5dCi91BGpeC6ivGQWCnJE7OrEtWG/BjmIBJnGZhZu9FQYzvctXsOsPEgUR9cl0 ###9yeVfAVP8xXjcSrzlR10h718JX zlcuuVfC KzJT4F 6p/9QRmXUleQ0XVwc0Mm ###K5DOTvc8eZAW4pE3HpaJ LzBnb9h2atrITe63YFOxTY3vUr1eWWHOC5vfd8l9cv/ ##
/ncAIKUdOo99emrBRJxtHSMH32HI ###lZtT2FjWizRxn L4viUU8staf1JGfpk6ZL79i4srtCziZBl0lG79BCGO99qP8L5h ###L4hwhTuGdJboagTP44tXNp4936m4xLNC4KJpjuLt0Wg8BJGmjdagW4w BWLJ5tbz ###p1uudaXzrWgPSqypEZiLRW/ttAwrQOSAl4OwrmvYova0 M2i8suXz0tlaNlW5 dr ##
###f1Nr1l9oj61YxE0dYNBc8rZKGWtnFg1HZ0yAuRE7PzySDn3JT2Xj Za7vRnTegpV ###P9vJpmpEEKEASr2A0iWdxCWe13GggtDT6JtwrVTGKkTeOoD5KZ3X3958sZ2SVH1J ###NJ9G2HSWKGVrwepAwbEhVWzK/iCUuhK59eEpMzscHtFJMF8VybqClg7WTikfHgXj ###RoPFvoch2F0MvF6y7ZfW/Sjur7obQcMk13OKtpHWzI0oY8uxLjkci7nolD7YBoTS ###KG4N5LRFCevJnwkNa92hH6KQBlTe4UulMx1/9lPYyamNncQdBSqI4trv73u2rlym ###IHXGfpeybo3NzkYDtCJtqy7RO7HisAjtIzYlbebS0jW9ROVcC0tdVQdrP1/bu6Iv
###6NdtfFQUOMppEXC9OOsz77Ml6/OeMMTFiZ97/aEIP6NA7fs9DPfrjztDv9eLEy6D ###dh79UDM0N/EgWgn5pTSNG4u2MMU2BI/x5EME68c8rccnWrn MLIo3AaMOKZCvKa9 ###TX1lS0p0F2AspGJ/uH4blJQzF8SvarnAIaq/hT0OI3D VJZhRFMOfiZ3I6GsumL/
###AaiaWEP0Du/295X mvEasBlMUUgrARv69VfqVqoBUPTZTZjuDoe4ZUWbRZz36ItP ###Vpd2ZwIULqymxp5AiFkXHJxsxpg16KePam NQ9LEEBQySOyGsn2TCi28TcaQwxr7 ###fPkrzRFxAKLtJ7xERfIttabN
###hffC z3eHvn LNenOudSPHEt5ogYvWVLgXhfuPDp1kBEpgzUyRtM9taPgnRJS1mi ###CwS/vCdlp3VN01XlS 1FlJsukleUd3sJ19yfyiLTliGTpQLTGIlFRtV24UbP5Ffk
###m2YWca2pOF 98vilAKFhKRLrDGtQZDHQH8cZ2SQAs8DsaUjhcbqBKmZ3BsaUUpbE ###vVpOSQNBes04OXpNanWxrZlEYFzOnNjsAuOjpMXHiYpCM ca U8v45qqK1UkyeHJ ###Acp2kUCXaQsu5YSQtAEQEFpM3MKWBWU32UlFCZbYiZVgmirFfYyMEtATbuAofvcf ###XfadI1sr7crH/
WKcvSaTT2vD9vpHnq1xEnBFVRG1ktlEZ7GPscKI Sdk0qHaKLMDRWOZueX ###zcO0GCNa ICOTu8P1k6NczmyBWnLFR789DJmZfHBXUntBEc9ZdwZrOlnZWiELRkd ###Fgd8srOPOORb7HQvPtfjHaczPOy6do5XWOIRnv3wLj62A DawZ0 v5hHLIr6EONO ###6ivijTCIcDNOMO7q8q8p45i9i7VPAeElTaYXSeQpPZcY9AyzX1aj1byNVg1MHAaf
#tCDfjQXsgnp7KOo 9z6dIAm0u5/bgwl6CkXRdcp8p QmB4UYzNA0Jc3yC8ujDXTV ###HSZbQQOKamQqCqwoCqhxrkabJCY793dtL4xj8bh0tFgIwP5 kS/adYFqR1s6ZT8S ##
HUV2XUV ###2XUV2XUV2XUV2XUV2XVpkV1hk3rHU50yd8NlarKmo Oz2mXroNa8VDI2aQ9teZug ###xb0lfgpra8ITfUDsqM/Ogd8FoKgCm8BzJ9SRij7xAdK0zxuNBrFPeH9NIbrON0t0 ###0vDZH6NPRNQisRWeSwR4EZnaQwaFHlgIPHeDXQ5h8xH3zQ I04SOCPwAAxYMni7B ##
sYnRwzZ64Hv82tC6Ed6w/eHo/Or2GsBIwZFDV77PW5S ###8PWO8tFwr/4QWR1uPeiQv7YW1dW8QxIgGNnRwujlKBj5dCeXX93u9afhLTTIGpOo ###QbJyouCB75SMKFFVfhGK2DRHodqdo F4Mh3ApgQzgrUazTN28Px5xMHbfOMTZEYj ###Fr72sEGO6SSC/
###dI8gw UXUL/QcNTDGYlcj la0qjf5lLDXdQk3QCgvRsjjeDVgnEXqQzVCLGGo7J4 ###eIlYhf6Cqvgw8vnRhYIojifuwSDEi/CFio7YqENnqRNZpcgp8L7EdmeUZazYHU4B ###8aIwZzNR
/wwUMRkuUJlw7F6E3u50LMk4mhAF33xipMBEJt6QR6o vgAOT2/in0fU ###Nnr7tDud4RjXQx9zi0UNxmA2bknGjiJgs6LSTEkbU gLwsVbMG0cuRwLJUFD1Eh2 ###EQlh7nOYJ1oFEWw5uxvY5kN064M33VW5AbFdWv90JIYhtvECiWzIH9y0OXO5I6ob
###iUzb8lGLP4utYzGQ 7s7pNFggJCi962WCNQQre8YOOcGtNziBpMRjGQg67u7Vufz ###JAxbYVD1ivgT6ndbYVh8wttQjN5fbYOpesnBwDPbYCTGCoqlnj7vMUJt5JcJmjGm ###3opiGGu8OqqrcNYxX39RonsZxkJsxaGF53Pvo7ixpxnILcTXrgSSJc/t9ScKjpXD ###GfjvxgxjS223w8RlrqhiD6/79SepyaV7oB2OeNOJMl ZBZqYY6rB1GkUl74485Qr ###qdV6fXp10GpRXOD4YfPyUD6UP5TvIJg3QUqHZ3igD5yz4h6X1PkVqQFIHmM3HQwx
XYfr9fiu33 6XZfr9fku33 6XYfr9/pO23 ###cHZ 1RTqaRPdcMcdklE2Ouw/C/
###dR2qvatdtHB5/K35gl2F/Mjzc3uMKbn8ct8f3KB1dTxuP/CehBMMRBhfgMH Nust ###ugZU4y3wl8VSWvlGD7jbgLZaYbOmwzMR4BKKUqzDAM ZoVwZvXfb3bDd89lNf3jd ###7vPuFA6Ojmuvm zFHisfxl1g/17kL0qF79US8TCVEtAZfuKIp3G0RdCRtvQCQL9g
Kyg7h9w/7CH/ FffIf ###vgzHXVZEzNVOmw3VA6LEG8Fb8 OgM0k0Il8YzYzGfhk7rLajIkY9z03BHe/envJa ###fSvh7mmItX5Y/ZSWUPYiKMjm17F5Uq6E5X7vL9 5G5WNynd/KUhTfRj0PynG4Og5 ###Xfq1PDeMx4WCiL4Xr6ZCs3H8Q6TOreOw1CctKloq0HHMrKJoVYei/DgAWHfz6giq ###s73CceMV7G/0HU9y8bd8xzbahbNX
###aqUC7FupNdrjAmyHANL etweYJcOzjNgjgqFzmiEQSfDMkoSZXlmzyuASAx0h74j ###5UPn34tuqWQUF9MRJoo3RPF Vynd70KHusE4Wfw4Kg4lZGn4Zp6rGdX6oloBuPwp ##
#g2brgJlMHwfNz2/j36qBEGriOHDv/PfiqD0Jp9egqcJ4HG2EQAccAFIC1j sn5y1 ###IpiKWfEO5i4ukbNto0UJBLFZw9tHCTgiCpgAJcvNAU1vmjx/2MW0D/MDU9Ke9kGg ###gfVQKMA/L3DLobko4ebIooEytSuFArxTihYK0Vd8ih0oIYUY9AnlovZUQn7BFKxQ ##
###hNyPbhxICkITPoEAuZ1SkVNTA04OnwFtETVEKUdu9MEHPF4aWlS4J65s1xF2ZmFo ###weyMIVCNW2IH/eFAxuON2in22yjfmmMd9ozZEPZ9TOFYgJej6XVfHAqgjES961D7 ###8ZQYWJYTA6U7XS74FLwSRTgFSsFGNp62p5PhjT/YCG/pZ wrLon DJ3OI0dlQa7d ###CMEdsuiQSZmcoGH6403cv/c704kgpwKNZjhiXRLYABVAq1dh 8Z/oVT5UPY/spft ###0UgOdp
arp v/1QEI29KJR9i3PpCx4mdTwdhCKqEx0msyIHJCPQl/lRcqkAg5jdiDimZkUy ###uhlt4D0HGg001rkeWxoTLvsUjKzN40AgunZZJORJ26J8BS19TjaltzRuk6OyWVVp ###Fc2bUcFCGSPc8JweL09f/Xry6tf3r35twn9Hr/ahaY7yuEyRFvegPR4Pv/AUPUPK ###e43frTlBjZyKog8agRRApcNzm AXn730NrZ 3frVrfzqVX7drPy6XcFe0HtGBYDn ###3IXKaLxKoYxZA0ftB3TtBuJ9AOaAleBpcIc3tsQbWZ0KOHELbsXbBMwOkZvcU3x0
###j8lN7oaDoVaanjJ6TMQKyHIo3bswFVP0LyIwINbJfTp9EbzDyx8LsFbCkL3E4N/7 ###SjHYFqfIUBn3mmBYCoM5UFhzNIIXK2W3UlHHWMGgfLhsRGoO gocrB9MJn0KmRa0 ###B0wEKnW3McAFOz84ESIJbnLALeLEJCHfhWh/9hVOAjLLaBxM6GgTCAAwsPE/zpvj ##
#UYrjUGFZTkO6/rkEb6EluApFfkKPdRGSXjmFxfyDluEatAy/oKU4BS3DH jxzkBL ###8ARS3YCW4AHE/t9//x/y//l///1/Cws7AJneP4WFvH srj FhVx/LH4/hYX8fnSn ###n8JCTj Gx09hAY8fq7tPYW53H7uvT2E X59UR59CbkefmV4
##gHsxfNnaNeEj NZoMt4165LRifdB3L3FRBsUWXBI6uJ0xFHQldGycW8IJ3RVeRBr ###hWNgsuLeKGxCxbhPFEtW flSH7T6io7pEyNmam5Dpbt4FIdz1Dy5On7/SoX4hFXu ##
###ul1ZxX9Z2f9X9v V/X9l/1/Z/1f2/5X9/zew/3 fvDEWl0b/1eg4gK4omu Oz7W2 ###5MvJFFWKlpJ6kQcgnz0AMqEDK233UQ9tgnDG6sITkYvxVGZ2O1II59K9Kt8VY6Ff ###PBGmjKN7xUdsbRQCXDbzI81O50MydSGXpE7j7TNf63j j2KViYYBeyJPLRdpPyAK ###jIWn5iQY wY0Q7cJ/UmR0ZAcVnEiVSUFC7G5gqqASnRwN9iQDpOtN et8G5y66qm ###Tq6TixZBwfb6w5siedYhASEpNuHtO1hPdOMQmjhpnLYOgJUdHbXe/J3UdwDLyqyI ###X0HZ2mElhz2TSmJWRzzRkZmdjbF3JXa0rt/Ge12IsePmkW6udNgIAynjnedu0JEG ###TLMzvWAcTlpkvGm1e1AdbQg0Wa56KqST9LvaoWwLJ3ZdIBEet7BokT1RQYRYXM6I ##
###6/ FGl22nhapZ xQXOxqCtUmSyuzKmNC2FKUMfGkZWhLoIgd p3ZCpjsEa8 EurY ##
#yf8r f93k//ZAc/Kyo793uTpBbFecaE dq1qd9sjjGvCToLu0ybm8ETOiSkkJxZ3 ###X0PEEoI/fwgCdytxSLImxO9Zgn9zjtOVHA7A967uoZsGFjEj/TQJJQ46Gg6Rn94F ##
###eEQQHqMYAdPFnRi74XxgJ8NJu08wEaR1tOSpfYnlZDiS SjZVoT0P4wl3LltgTDZ ###evvMsYJtUhFG icG9 j7n/0 hbeABoLhNBTBRXKCnQxPhoNh9rrFv8fouclbFvlT ##
NK4WWi8jg6i I0tU gzZwY6XXEi f05DEHd2tphCJJRMdnK ###S56fWiGYQxEH14b5F wZXRPjOt2JQH9xa726hvNbUl7i5rnBwuELJuGhRAL1n6Jv ###YhU4ZhW5GtQij8U1MXyuUqhUWFVJCfhGkVVjwVj226KTqgzhsPGu6rU
t8dviwk9 ###0iTHZ9C1LUGS65rc7W6vVxVENXqEAYmnax8jywKCMRikk0WASAtpHX6ZnCKVRtLH ###aVbbzazDuZO5EtKa31WvsfKh7LFNmLOiEINEDWphwL WaKLx9qw202tqCeWKZKTB ###2KZM841NGQ6XXstJ5Sh5C1NuRWmMaD1T28LdyN1c1ySGRO/JyltU9bKKnfFtKiK3 ##
###LROAC6DTxuwkwy/8yPdnbr31LfJ7qiR6oTr0S6k3hej1BkrqokwVLRdr37W1Pw R ###RJj Lak4fe/TiS/Pzqc0m1jnbs6F8OecC8H9hgvBy1oIl7HpFzgdknmZz5CYrhW1 ##
rzr 9wi2MgvTZgyDbm oWTctfVpl4UrKsyJ ###dytEU4bDZCMsnI4xnwP75PsjzPsh47yzKeCWJ3GZtEcU8kOE07uF7fMaNWySWYSb ##
###yrVB8okiE7LI8BF59MpjNjyiKQtE0hISe3VVUYaig7iMwq4sTAdoMv2ecUXTJhM4 ###aKsV44xOFpmu0uIJjEtxcNAWlkX/cUvyYJK6nGL9VmyqCkuLVKwkPpTDT JM2xo8 ###d354bgY8dxY8juoEllUZyaI4mujXIURzYZ4yZLOdxLFDTGDAweLZ0PcJVyvg6gUk ##
JhW9vjVxQXCE PCn2Q5BjyIRwPyfQs5L qinskt slDxfkYqUIS ##
###VRyO5XfCAnQgffQVbeCCOHA3PxhMDLeCOHRNM1rKMUEll7lxIi13Kns7 K80f4W ###tjTPXAo1Id9Ex8pdsdFIndYfj82T/VlReirpDgZvgC/0tTzj7PqBW4PMYED5MO8m ###nCOz5zOmKCHe8ZQgGyx6n13fNgn9yQgvKEmWur Xxmnp9PazODy2Vy5niDjiItTd ###8LMfwYZRvKKMJdrvD9YefJSiWHw
###T3CPVGT3A78jc3fFJOVzT/ib4bDLaT1UWcSSehMFh7rpT4UCqIg1hKrjxTHwNL5G ###edcbjtFKGMDKusGrS3zNPGV OAm4VdRggk8fMaKD09fpS 9YC/PFF1U4BF6iK6gy ###UHFoRPkCIe4c BOeIEnZncIRH8ei73UrnF73xvzgR5HjgXVoypkkPOEdPDqFRo/1 ###cML/
###tiq2qJdI0OV9Hpe9BWJc8Bl0p9bbZxj6ksVaUt5aLy2ZSjcqmv TtSmyM0R47/K1 ###SuGxQcGThWREVXzLS/Ml4WFJ4YHq5QhPGcdgbPc7U3KzvZuyz 3 NI5sOLOuIAT0
###h6psVCpVIDL8626xNd7hBH52ZdsKDZnOa5bkw5Wqg2bCUjKzfZkAwltym8uYlVKc ###U12WigIy7lEkWT2068m0PwlG/QeMJOBubJHYDsr0XSiivWoxZC2jQY9Cmb9Vee3o ###P8x4rxphqK3upxGiWshCeYieLY481b06nnWsz774XL9R3dOp4XdvW Jdq98eD4N2 ##
#MV6QTswWY8wLx2xYc2d0iT8ZU1MDiFgNFKKPdyjymlMZETqz5VgreHygFExfLy/Z ###pkoUOiyDGGJ08ThGRodl6IAeF9MZxRJmt 1 LxH9V6lbNNmhYzB7FcEFPTL6jMHN ##
x7RxfU3wL6IDLj mIZO 2xlISM8OXjkKp7Ex2rgKPTxpAuU1p PPwWdS ###hU24cQhyjQ8KKVlKyJK0r4HH01258wNdgDQ5pFcrGoIpeVXPwRkfwXwcpd//3GxI ##
##Zf f3/4PsuZSPmsFkhNB6FRlowXaWF5vjGCOJzUZznHulg7aAxCwKdVSCEy6/4BZ ###WB4oxRlvcaaNf7mje9y5jRF92xL3MkIV7N99ckCimC5GcGHtGCee9eLMIwUz/Kfq ###ma FKpkfL7Pil6y9ArXwmWMHDcPWJvJD9eMyQdcyQBsBL9kHb17QmVlbm07qIZkR ###fDQ/3HwnV2YUWTU2aZSRdoHJzoFwSpKaRmahFga0SIIcSC7 Z39Qeny8GpS7un4K ###6LORT/
###12glX8wNBQUYmcJ9 dLdLGHOOY6Ef0K7YVb N0ya4LWqjzYDzor/4G26Zv63zS1v ###Zf9b2f9W9r V/W9l/1vZ/1b2v5X97zf1/82RxS3KjvtdIcqERq6QmGfKljCNp7oC ###mcqWRudp1UE1a1YeHSGSFR9lFjFSsmyzj7 ZWcRMsNPrD0EH9NYowdTTaimrKzkc ##
###8CIkiR5KkksVG3DrXpr1DpqosVHgd/wvAfCLfjDw27BLjYBb3Ad8cwLeMgrpltnL ###8j50JyzC95LWxCUwN7 HKgh2A7oz7U9wdwQWzNqdDtfXqN oDfL9B52QlCZ600FH ###8GVoJqoUEIY46
/Hp ###gejZBNtsYXPppwdrIycz6ghj51F3FvJiFBlbutmp7jQwfMkV9 Rq5b fkmUxJdbG ###J9jVdw0XM49czPYAdtLFLMpSgy/RAPAJ/pTLyZvCmP2lTCaU8h7/9dHUpUW5T3E5
###zeGMXn3UghN8zUEpnCwUrPjodciZh4pxnQbUfHoKJWBdTgiIcRFlEBnGyNa Q5Zs ###cc6ScRCSRTv6lDpRc3N6v9472XRTj5EyGkIthzwFl0qa/NroQsc2ePaQOF2551kR ###H6qeIFj4xoi2oCcfd2cDouxY23JI1Jzp5Aho20ykjoPmy8wlcufZmQx65/2IrY3v ##
#i4LgqbOOgMT9O/U fFWDV9LAvhZmMadgEAjneuvEr7UJTbyAlfjOs16 dWxNywm3 ###8I/kJXZFVCDTH 38KCsMMWOiwqMFEs4/
qoKnzMW01uQv15fV28sn0ZbjYXyZYPQXDeN3I9QPVVUVstcGK5U1p2m ###JkTrSPBPlwgjMfttPOQnSsr1 XaQbHlbGCYMmdsim0Z2KYxxrXSLx D0ZrqbSVZK ###
###hGtN2JHjlsOqKARuL o5cZ3N7KJVJ67jZRfddOI6seOcJjfoG46cEpH Ss5JHHzG ###XMjV3K16eqvVrFa93K26eqteVqvRadGsRit6o25Wo5V5GvW0Rt3sRnOP39PG7y5n #
/p0KxTOgVFOh5NnQU1HmGSir ###pqLMfQTKNo3BbKUOxnsEyrYNKDupUKqLoswzUOaloyynUJA6M5vGzGylzoz3iJl5 ###ZuDseSrONhefGddYMm76ktl6DDFvGyjbSUVZdXGUucbKdNNX5vYjUGYsGTd9ycwU ###PVb F3/k/B/j4d1SPEBm5f/YgXdG/g osPL/WPl/rPw/Vv4fK/ Plf/Hyv9j5f/x ###G/h/0L34ZMgF3FUajYunGKoYfbpHt7jxCDkJuRpZYTAF7uVw0u5TMOMXzN15zt4P ###x92QFatbz9irh4kfljIOG2cmGcF4IRQtjTrk3VO0blEQG0gkxrDmDqmwPfb82Y63
###03v DP5Un1eeVSVo9nU3b3tu3N72s61Nh3lbO9vPHba1tbXpqe3hYE7ak377Wpi3 ###5GXl4aRza4vA8UJENXkFjX9wHVbZcDd3oL8YFacWP6vs4J9nz Hxa7oZ8ry6S7dJ ###fym Bkp55TBY t5/
QC3Iq ###pcNycr0qX1nUU34f6v3ZxWGrBozrlNm7HsfDr7Y2eTz8DxTQowqzEWf9OIQNphVF ###Jq9Q0A8aW HfQJ7dfr6JE1N9tr3jFP4NBljefM4NkNvCEOnu4N yu0V/
/WrD4DrHd ulV ###7bLeeqeDouaxXZR QUqMm98i0 ScrV/pzSud955vPnfNzqddgyQVApufjrrA34ux ###56BwGW3x1II2j82Es6bw0jzkNZlWU3VKlE0TRx/27U0fTMb91Ka1muhxuZs9Oijf ###8dv9P9jwnLzDmxVAO45qhEkhP3xMeOxiwGSQ6ILulA5EKHVkjLmCjiwKDDMvqtg8 ###qJIOslSzvB/iah4Fk87tcevtMzPYmShEjq4tfsOXx9GLPLC0Zsb 59fALniIfH6b
### PUR7A/8EgRL32E5PlEWaXwvQ0zkqI1ETpkDSAMF7bmD5g 8IdLufKK4amF0E0O0 ###hLsLX4KXaHWJVnwA4m7HDzfC6B3vpjqa E6wwpCSFfE6x XfzkH4PAMF59CMuk5p ##
###8nrtFWcja/59h8ZvA7cW8tW/mXwLTYiaPLAc7hDNq1f6FfWPiTo1zjKwNDbNuVey ###GM4KL5XVHqbjRRwQE5edsFWwq40JVdFoW EblQ evOKvPa0kNhsLzxG3xLcl61Mb ###cPM14MoGEpYtjIjW4hbWdm Clw0pOLiyXdp2Eo2xV5yIxSVfxyz7q5HzDuhreMcG ###Q0zGjlGkhgOMMhZnDm0i7dFog EU3Q86gTicFqtWRpeICRCDf/Ff9piHXkrKaUVs
/RDya9kkdZWDQc9sVzWjcf ujLdq 9o7R0OgDCIoBAhLRsdF2y27SrvuEtv1 ###lHa9JbZbVdqtLrHdTaXdzWS7aml0XDJJKfKtQrFFMU5Z5THch T UsN9JX5sgOW7
###qgnxr8dtNLyDWjXm8iEyMVPo011LNNHb5iUi5vCnGSd3hsVdqYWSxJbdMmbrsjLZ ###Zs/tknwuiTsp3GxpohPy3v7wC3QjkDnRuWcOslOVDaecI8qZTko0ySf8/PbwAgWh ###o9oBJVVNOiAkQEjxN9lg kkmmtw5uOPa69ZJ0zF8LpNmSxzvvLLaXNsqrOdHbavq ###oYe EaaJT4njDNkXvMzHO6SKTZoar0KLkBc9JNOo3vyMA0lNiEyIdPt73CMBO9e5
###2VLgbH5DONsKnK1vCGdHgbP9DeE8U DsfEM4zxU4z74dHB6rWMB5rsOJRBdXyC5J ###TdImwiyzez9xj9qohz/pPdTlsVq3S5JuwK8 AHNMF2dngY7Er9rhoSpnzqrmGEPc ###TMg9ZD0gQ FrU1QkN48856/Js1gpN2gnsDl6q5 tusrZKkv3mErfwK1b9hO9H5aN ###E3sy18b NO9dAstVizD1tsLcLZuWOGF7MyxztjOyqJTulGIKGYiU01foTHJksdVb
FeFSXK66 ###GS5Xj7yKZbuJNddVLE6XyatY4gVe6VdBpLpc8fNgfiKf4v2UfZ1jxm0Oy5mUIYAe ###tPudaR8xLM6m8ZpHRAmR 5h5m8j0JRBUjDVbvCHH9pCXF/enHGZ4ECjLAV0phLMO ###3QqDbSblyFQZIt01M2tabGfxmKPxwag5vXXlzAU97s8hnD7oDD cmEaPDMcKR36Z ###PWjRr1M8yewDZ NzEejne3KwaqNsn6UhOcsPWCmc4lSlTaTWbDkDonH0Fztta8Ve ##
2wADwEV z3Fw4ouzE4wF ###J2K5pRaQIeRYq9UZ9ach/leADQnYCvvu4LvCPyyh4yawwUEdPXpcLFRxk1GoxZJL ###D5Ovf9xnM6u4RhVvc2YVz6hS3bZU0aI5Jz7PZmcnEVjLmaRkd77y7pxJSXI2ruUm ##
#2Z2zlitqLSXnxaw Pya7xW7epudP8JC7aSNZAn5mJEyYo lq3qa9uZve/HZNb3 r ##
##Cz8zy/74M 9bnrLn3BEO787PLNu8bdPh32aO/oa1C0/B0JvaeT09hg7GCjpq1S6S ###sX8QauSmZTxsDIKkw87FIQ8E JUpEq0wv zOnti3cRhBS6PG4/ufrR1OHwr55oe3
###20dxFoOguRXikPuUvFMRqltJHwX3zqObnzNGceGX aVhgBDfncX2K3lGIe6dbGWN ###Im4WhLzOLYqGYkgBjW GCyBdynRY5iiaMkTQYHp3DcSbYy7UVwMi9lAQzaGgGUcD ###ccpbBpkR6BHpykJS1rmIrxAqN7Gso4gRhSVlsmmWl2iVSIGqfyo68UYg8nwyRiHd ###WRPtK6M4j26MLQSCOwG2kGU7qdPNHQWxzCIgJFOg U4BIYkAZztRiGmpQZ7OGa79 ###lOJUhLitop16MAl AcJCdXY4UKJdzRemPT08O4XFaBG4VgROMtXi3Iz8GzPxBRi4 ###
###RA7KmbFIpwhUM5R9ftHLpu9nauizjAAZBoCoSIYhYFGZUoBtBl2/MegNGzxDjXmt ###TTx2coN9y6VifiphaTRDEIy1 XSDQepmOfb5cos0Yf12XIaAOEtQZBnSnRgtnmJR ###vp3QnrfLJl3Ijx5bX0a1Vgx9zvxyUw6wKdlI1mzqaF55KgdYbtOsGlrvmt3EKfjS ##
#EecAm2UzSQOrsYtw4o/oTvRcSM6yo8yUrcO5DR6zZLxMAyGw46d4AgvLl o7a4P ###0tw8YLXonvnAzrKF2S/2xleSHPbJ4eoKtDKe8M39uHnU4n5OQ 7o1OpRkffBYABb ###ZjDoOkxkuEjXgMJJKyQDPc/
/a cs/7YmAh1G6Q1ipW03VWdfG93/vDtb ###5c5MMWBrl0cHJO/RHDVnK2u7OTSA9DYvDu 4Vu9IdSejcGRBz5XYIcuEkHYKlmm4 ###IqhQHP47wBREl/VmVj28b39ohOCWYWpRYQYJk3LnyRDQw4HvsOFnf4zuAhjhfiKM
###U0aJkMVlRgQhDooSGBivaquL2FOitMvHZlF pKiAqZglomNEWYKmLuSPtUNEpQPx ###CS1PSSzqxMeOHyIsJuKCuSoyzKAhh3HMEEe2qvw0D7vTo4NkARBnxhJA9FMhlvhx ###IgBKzFbi LrqDt06owIhX jKhCp5LSlK60ftLVnKeVUqIrO0KOyekygsnYBURFBA
Q56nN/coS ###4fx4EAcbUjJil6cu0dSorrPRoL11IgkJ04oYgYjV5NxKTGZbeAoc6L4RCX7urvDw ###yHm6ULCh9BSkDvJOG3HlxUPM6jny7HKJcn3ZHFtqBTcl34SIpUuh6UggInvJ9FoP ###pA8yhkUkA95JS/D 51Q2Eu97Ct9R41bbapl1ZHnJRNPryLxklRk7Rio5kgQWjU5X ##
###cgFxKezpthZsgUhwzIOnGytvYRYpZuCdJqzp4UUVFpeMSBP5ZShhQdUOIY0 gX r ###QJwaRtJ0HJ7kp5TMjKG2 glfe6mRG57SJaD6JaOtCkYs966mLeqF3K8wj9MX0rDS ###SkVivwhSz8U0kGU2VB8s8xNrbckky4n4Ga6MDpotTGbF1VBjHvEeBlEPoel4EFkN ###pA83mDFc67CD9LJfC/mfJoOoPh5NAaoYSmdnYcWK1nWUxJMx9TfTopZY Zq1ZZOr ###5UVfGplTGN1egKbUkdxfiVOE3DVcrABu04BdeDidoMkX3eb7w8FNmax26rF4mLZa ###SMHRFBoFyx/tI9LNFijxqILsus1wMYtG9CozSSLRg6L5iOcBe2IIxJb44xYLONIc ###NKDLdVq8xmclazhn1ECEl63RnY 2xMgaaBSIZkBNz9InujCbipW8fdBX6eWb7Kxi
/sDi/J4xl1Phj28yzUCKCz0rXs0mkZM ###nCtYrvBTVPUcXTxUzISWzTqGDxr1DPhuEr4FnvnQpTte3LKT0RdLWwAOq5lis7hB ###aQgBCVuumxS49ZpyFLEJjXdSOcuxbfukDA1HdHvXRFpCkSGJ SdS4OHPS7OX HA9 ###7U7GPLOTTiE6Vn S7kDJF s02LKwxGXMlG22RLt8xixpb3Ph3tVxL9u0J3CdFzXu
###bNSs2wkYX QkYjtq1lOJeVGy/GkWEzU7YTKt9NlaZKbsrZuKkdmyZOpxy 5Mhq4x ###dpczdi9pPZg1BMNTKHZrTXRAaNczICSH4s03FC9tj5KWe9MQkvAE085TdNdc2ZW0 ###sZgQIsPHUQq2kk3PwJYOIcaWhLAsbFGkA2QLd8FgGqoaLyYZYuSSE /zmUdiSpNo
###UsquHSteLqxY6VR2ZFlYKT8KLfnx8g DyXAcvUQUWYR6 0r6l1qjj0N8OQfi9b1h ###bKMmwX0FUowGjI5H2riUJLEfsZOJ5n1Cl1iTDWb2wbP3wcvRBy 7D4kNQo7sZdS
###ZcakmNZb/ZZQfAVIE/p/1r3pksZJOQWqK5YpHWqQNE0upTEtHNweS4sDZ1RScA6V ###tBRT9hoqmlGVFSmuZtN26GMKyN MxN3fhsRXNJ5B4 4yadxdhMbduWncTadxC2fT ##
###xrijqxoUlgHt9L/ CggDzmmKRvqkR4FGfpOIcd8kSNxc4UYS0e4TO3UyDsmjYpEs ###EBouvmRkAa8GBk6HpeS0Tof1NSXSigChesAn4OPLQh6F6zEiljV6ve2THtE 8m/P ###3Yx127I5XxnR6e0NIuxEkBXD7STLVT0OZYPtmHpa3IiS8NxwbUh0Jr0RJcP6rEbe ###Jre8BOWlt2GxZwCSVAXftTu8pXtwJHqYzDRuuaUwix5iwbc1/Nzrf1GNKg6zssQI
###O5wB2sehqApZ40imTlCa0NMnZJGfKaDECz Z/CNz7vUbqV NoEN471tnAIsu/pRL ###LdYd3szMkLgA8ojoTF8xcM4q5fwq5fwq5XzmKFYp59kq5XxuEMtMOZ8n7Vl67itK ##
###qPJ2T6swV/f0U/5ZPVNsUzm7ZtRIvb m2KVytmzUyFhN0hDxp9VniR9UB8rjXmd7 ###x91 irP1lOT1lh9OWpP2dd8PNzqPhVGBz/b2Jv2Fj/l3x93a/pPrVdzNbbdaqe78 #
/zA6EjZ4XI/tIl/h9NJ4W7YDXpBh1p0WHvssxFsfMEEezca ###Dz8HXfhCvUG1ojfs94dfeOjeAe9UWMBKd/7kRaHM9A6Rz4/oCdo 2R3ibOxPUFbF ###5trXw8/4SuJ5MJwEHd8pTBBb/SCka80xJBqO3g0A1 m3gzt/vGEBjzEy49FL8CMK ##
hQkfmhNG areuG4UXt1 ###XOeAYJCHjYv6wSWOJv52AMiD7h07rHkOAhN qf9Yh7HULv7mQJsFaLNZf3sFheAl ###
###oBfikdSN77XcSusu/MBAfdBM1phQ CM9hkcHr35oYiDZ13Usf9JE VmYdf Bh6gO ###q3x1op/4BKTh3Tzwq1nwmaUD1UQHmADplF35r eUPflv1SlXZeeY6KxSzlXK4b8Z ###HT9u36Br6I2fs ue2sty1WE7sh8IaScvirwkBOvE1H 8NOaFhsf/
HyFJjl Zr ht ###RSkmvhvTai2jFeMIjbAcFaNu5KaKXEOukveqPuRoapUvgi4kRYgvVeonUodT3qQv ##
ectiWU96mL/DvDv4LT9gzp/w8HSHK/8vKwI3 qESqUmtMsF7Uscw5UkjZ ###WAHip6dRuUru4ktVwOV0b4FlXSqu7J4XtyDwViW8cUxui3/xCUcd4ROR XyONfaB ###NRvHP7QENRycwY5Y/1GEr7ESibroMLAR0BQlkffb484tCeEg7slDUB7qHcCwzvWn
Wdl/1nZf1b2n5X9Z2X/Wdl/FrL/DNAARGJus/EaJwrFGrQCcQuO7ZU0G7FW ###q4Px//C/AmxCwErYdwffgWAszUVP12QzJGSf1A4uzkCOvgI6WHuq38OPmAYeqbH3 ###J2fnTWAv08FEePvoHUJ5nM6Y8bRZPQ9V80JSw6hb8GDBwLjIlQkqtGHvewgD4uhh ###53Y6xnD5wIo/ee1iiUOTNq2X4aTbD643bvfzhKqj7fU65I2obYxhGHO0ceffhf6k ###WHKY8F7n3ygnrN623RAHogLdThkL/8NQf33X7oyH3DhXeLocWoKOWz5AOKfAKJB4 ###YMHi2ji6Oj3A9dq0 2kuqTfQzp8LDO Nw0bb7ge/
E9ReuJSR4Qc4Z5Dk8ZuAowk ###PWoHRCnkEvhUXL j4kiHGGQvLED7kRsp0XWM7QDgKTlo1WmAqlGaq2a6Q/yF0bl5 ###Phn 3/JzFLbe/
AIvnVRHeW2wrPjml9JSQQNKLVnpziyIzgs7w19c8QapDzop1wN6 ###zH3BxNWLXbxIW3mBPlHDbop/uuFYvBsRWzR1L1Aw uyPxXVcSoOsjQwYXXtAIlyB ###pVPTH4aQdKbKPzCPibsE8iKBnE3u/c0WAW27JhE7e1pTCas0vAjkPDQcDI6BSdhB ###xxcPgngh WFe0JKQ0N31y4BXZt498v1uMOyMKbl2P5g8IP JLxfFlIHusV5x5hCy
XuAlmsQCDB3gf2W/GAmSwjEUmOwfCYUNI ###JzMBU9wgLpJl8Nqn5DSl UZtK4LqY9dPAX024on2hnjbFFZs32 jZU30CMRZ9AOY ##
##CHdOOu6O Xxhmp7xgsSaxeI7iFS665UEzREu5Mvi5GEUdNr9/oM4rmDkN8EqiBLr ###qJcxbZhaYfY2tZq5rJmj0ATbiyy44R0wyvi6KYwEbaoKA8NrLA4ZVDPbg7YmFJuN ###N6BJLHgSFNL1ClbEnOSjIcq1ODnQ7 kgmLBOMO70/ZJoS0FJtDGJDvL4r9inonXP
ak7aScNnThHdKnhOwvi0IiyM3gFzn45ElvHD dLY84zQm0291VXE/ao5BjgRNd ###JnHG5Med4VsU3GU2k q3byhporN8g6sK pmlCF5HHE7HGvjIO2x5oG1FeOQbjB0S
###80kJepO/lYkLl00HR2Hr05tf7IeZ0bWD3pirig s Gm Kx1ZoAfXLR652QJaCegw ###vWYU9T cUx7Rbf4cxZG3GRC2X0zXGd8NQfaCgfvhhE4 X4DMACTdwR3ZZdMB/744 ###y6EBOVkuVTBywWrP61o859ZJc41P2mKMliNCc6IzSQ0DAM9LbnlsQJbFHR1wAkie ###LfWbrO01y KOZB8asygwZyfyIPz48hyVcVWji1Kk4PX5PuVnVjjtLuf4L8SBB5c1 ##
UgJwQGYex9 M ylXA2wPsPOUNfmX3CeSeUSFoHufej FCyYCXI8HVWGiN37fv4sZ ###2iI8
/DjD55i940AX8fLPAfqHDKIwVdHOBO2LfNCjYSji4CxGFKCYCqLgayTPol2R ###xv8I0oj5RQsEghbXhVQqySKTb0wlWQg7Zt9sqsTmiXsHudYHuEuMHRH AlEVpcIi ###c1nsmaVvjq2osppiOWOnMk7CVEySh//TqMGuun1hP0UfhBz04fjjPJvkod ftE8o ##
###dD ZeBKP2 Nh0KaL3bHawBv84vNoccl5e/e2JV62 lQ/B78cYc33rbets6tLQ tO
###2v1Fn2UPPhx fIxRd5SknQiJaaDlZ17QepHDrPnTfKm6AbBmSj9YzCHlJNWhTG8P ###7TBFvwk1Hd 0eKg9v5vvVKA1GN knArM7VMxz64nQLfeOjNBvxXmkiU5ONSSXh0z ##
##nE WduuISXdK9ObHdKGgVLgfgo w8dB3D7 XbB6bwQC26RaGcAWVChi5lDwSTGKN ###P HH49h8gjZx/Lrg5i5h6VtAezlAe0vnOinu8AT6s6rDhQvR5uyJ4RxlNT0pckrS ###USUCnbwEw29o/HNRxvamSRl4k0rQxvZmrvu7Ccr4loSRAO05/3rr9pvvKfJDcXab ##
#7DfbUy6GdK 6DQyJ32oCsfQv4 HkL7SINtipf9OeBJ9B3R1OpFsCd1RD0W MtUHk ##
csau0aiEKHebtuffRHBJ IUCTydXB0X ###ad1RzcSniC9LaHfB96XcoKYpsGiVpQBM9ofAIbR1go8RE ce33Etas/h1RMwa4eH #
rbYZF9slJDnt0TWiHm1L02vK7BP cyKlefXqEUgp25CCWDkRVtAy3ma9o6uzcqcg ###HLQxlU6EBXmqJpMesWLgY0ob1g5DurKGJ4H 9fSG3Q27fsnK2cQQbMs4Mft8JZt9 ###FwxXe0jcN7mmX71KhVe0Q2OOFZckAHHYpcT61orwfcBkMIeNdwDH3RYdUZmLZfqo ###I08ZMRNzWNRSHi6htxTvTpe3fhhNMk8RAsR563c kXcV5kNSpptj6bzROsR53bi1 ###LFYcVZIiI4GAluS1OQzOqheqB1w4V73EAprZ0bIFIC28xerN7GjZ2tHa5TN8mfKh ###ivtRVJdnlDH1r8ZvJu8J/mdhHt2a2n6pttU41duG39A2FEsMt3aJ6C3l67W7bXRb ###PHixhF5jU1q3xYO0buPs5uw2LGG92 LBMrqNTWndFg9kt/V H7ypH/zQOmqkkAo8 ###TClvn6T08nbsYPnEupQ0YCN5lUUq9KLyAp2ntpHvQzvwPyugtLVVLCosgD1hlftn ###Ff1zfFziKvpfs2Zn3rkkqE yof6ZQ5UTvL0ZT/A6VXyxGNhfcw1WBUs0G4G1sMqF ##
###teO/QyEeh o6RK0X 5/yFvWkUsJmooCELTqheCJIdwtAuttRo1DIBJnyNgJpcOe7 ###YJBuymYC6y 5GeqvZC15YTGJ37XvZ7eyb2mFTqrwwIIHXBLpgPtDcnUqc/8G6bgf ###8um797vihTJnlO4c864fnJ02QfY4cNhbln2SdsDPjhWlyKUt9i3hsbKxJboXoanE ###8F4I3bYkQwYGUetgdBFxdha5smOip3S3p6hB/BGBZ23F4 laujtJT5 0WdgtfE2B
###W7XU20jZ1VJTGyjV9Hp8f8uynxNSGBpF5cyXaUfURd5XPqzbMboVOlHDUdzsL Mh ###KPlfbv2BsEX7mA2ae7cLtfLHH8nUbwoL0Aqt85Qu8u79V6xYYQIbdOYb9vhZsYvU ###Uc5 b4WYbp7XIVZdDQD tLaHAlppLgQbE4XON7OPuPFcx0WKZJxe8XcZH1SSunn4 ###83iS1aJ4z/fq82b96vCsfFE7PTw7Ya/rp/WL2uXZxeLrjTuSn2CCjnA6Jl 2cIJG ###IR6Enpyz2zwkfSidn
#KuCQEyX9K3JPotAzRBMWEZzv34WsxxODwIjvn21bvB0X6T2wHsVX0ugzecF j/ef ###p12ffdcggSHcuP1OeUhqBIV4tTwXPk7fYSs96CxjrVZn1J G B IB9LtnP/FrYI0 ###imbj9fnF2QFpFm9woH9afewfnNTyuNfZ3nG3n
#mPEyTKnHGvXLI3Y5RvdbZKrNTxjC/BiFW7 7gZdahMEHt1B//BkeFgqXtwGl6vTx ###khTsyOgljJs0hg25ODpAWt1g533YTmj75nsMvODBfoQrbLtfCAZ4t4R2JGj1wseY ###OHS9BZk 9gYZPrpUDqfjjk9ProMBXryiOykOVyUx5gtPm1zgQUn4HudQfMWRP4ah
tCXX/33//3wK rJ3 jdV/PL oN5sM5OvG ###yflxAxoECCAcXjbqTcDR6cHx1WHj9LXDoBF2enbJSLWDYpdnDgIuJKuxsyN2Ur84 ###eAM/
NsBIA 6d yw5nn9oIFf6j/WYSy1i7850GYBjZD1t1dQCF6yw9pJ7TUMrTgDIyhp ###XF3UT7DLZ0eF5tWr5mXj8uqyzl6fnR0Snpv1i3eNg3pzlx2fNQlZV826AxAuawgY ###mwBMwWv4/uqq2UCcFRqnl/WLi6tzTNtagil D1iBcdeg6iEh9 yUhgoIOrv4GzaK ##
###Pe31MBbQAF1uKIzo/MGXiHMc v8UYmbX/wZiphj77yxmwtDmFTN1bCwqZl6QmCnb ###mlvMFNj7ncVMxJ6BhUdw/BTsKSuFtYVIYMeXiShe6TfaGrPCpUk8OWy5WyMMUNsa ###1zSQ5s6ocHC NTZncO45F1N/GE6QbdrCtFZeILeEEiHmxeN/PUH rOd3Ft0a/S/n ##
###GzLZwg3sPpdnB4nwlFNbTsA1IWjYiPpcyCA014 PC0kETTuRKunZZD0u4F0rm9ai ###4I7IhebcH59Hw0yCo21PhDQfYbA4MW47U4rNbsleNUUBC u9xPPIeLbzbBYWS67p ###
#zrt HrOA1Jx6/c9cn LpgOm KleY O1AyrXnfw4G4XBQPpyOr5G7 50p3W
###BpLnSrkP0IqadHmU73Dq8MqEwyplDzO0 KAFejiJt8HNrR9O5gEZJQ3PPJPeQh/a ###OPX1IpIvyE7 mDbUcDieoBvGGCMVDG5mWSPsyh2uqKsBNgU0 xTEPfqS5ZCZnzsG ###3XsnRdrinEKAkfEsRC98ntwmXGDijzMMIO/
###UFPH4c4Yp5d/HCGsbyT9n6ftMT abSeGkXMUnO3m6H7u3v0rJjuWp2LnDR1Esbrh ###brpbz73trep2r5QMRcqRSIH5rpk1C6kljqM9Hmm pvZnNoWR0WRTLC2 W0wApZ6I ###xWqNsxf3SY87yHig4z9q1EH8LCPyIAXavLlDFhjF0UyE0EycDPAaRfXFPTNjPyoz ##
###sFvgRG83dwsFYePdvGfTwRj4MbCn/nA4kmbiqCioKPI7JRI9Ojo6UPSdgJF6E7CX ###Suvwc32PbWoKDw3rA75hFfaRre3RSHZt790Z770Z76vm 6/RcNuDB9jD0GmT3CPk ###MZgYNI1IHwz8Wl 3DyQB5GvhX13 N6zcCyoBs
###/VztSbiR0w091SuKI5BCQKR7AuP9PL8XpmtYrN u 5mOAtzN/pCKZluJ9g1W VH ###CoW4WZDuy/wbL0tUtUeoCT8IB/1yrNBESpZ846Euwd3QAsMNTTQl4Kzx3 uyaUWH ##
###hlVJQWgcmnAaFv8GfY9tBnLyoxk2UWslXJcI10a3EQ6RSIn2WVkhY 21orJHWM2q ###Jl5rpC/Hhg6bCUoXX0rxMli3dgUtGKV4CSOgRdujPirtmYYVwmDSaKDjRZ5f4oMU ###HMVlaDp1KwZpbfrk4ZLmncBvL5krvhr9wKRaSFpyCQMZDfu4YfKrxaJJutdFNIYc ###EBER9zLngPEDtCq9kqG1YuI6gIGUkpNSIkJJ5LccBR3oFQnKvuyu2QVtJFByN/GW ###L7RAf/
Ui ZUbVXYwrjFY3Y4ZsTOkbMe7oWJejYCjfaYvMQ5e7t5xJaz4LaTSqBL ###2X6 xRb0uy6A F/Ou0O8wQ9ErYqfXCUjQzZDQzY3xBmiJWhEkwBUF5JeRVgR7QAn
swxw2PrcHgc8 Euyta7fx8BOr97X70eu OsJ4R/PRKUe0O06mIFE3KG/dogvw Kz ###NHnf gLbyfCL3/2A1r7zOgVrfN84xZSwkjVqNeIIfAyzxsaVzi4O6xfqOV
YJkfCU6opQ9FvsVY2PDEyZSbKzKtQF6JOoLiujmca gevLtjeHu5N ###ukZ04dPBikjlBq2y7nTMb/99kQl1orzHihxzLUVSneh4jZas0Xr7TMUW87a2BbKi ###6MDKOPbYq9ctfHBYP0BygqrpqFkj8XGLi4 ElFSCwBm7xv80XdJEEiW788MNzn4p ###Iwsg7PJvsLTfnTUO6ocpqLuhXMyUhdofB9DJjuDgmtynjBPUhDe1ixMaaeNUG2l5 ##
###go9VDJJOHDF0YCK l1SAhZ4BCD1qnB62zhuXB29a7980Luut07NGk2KSUsYDXUrB ###5lB12tVVwQxJkas9AIfrPfildnr4vnEIXKv 43nttIlAFPNJ1LW1 KvAM2lSyE2P ##
apxEyKICyUQBDmtxO8ETlBHz2KYPO QzoQ ###hfnhsNC8qIN36ICkcQxu35mOsGx0LC5DTwaTv4Q4qRPyJgoxbJqybiQUPShHWqef ###su2treo2n1wgEDdzKlL2/hikIiDkW3VpS9Bm5qpdcDsaETGXknOuRwsUcwe37c/J ###nTmyTHMN/wWsaTyJ7w9H0h8MJuP6AYQc2JZHqHCrTztDpbgyZXFw5NugB2I2FUCH
###28OeSu9JqMAiLLjMN7LUTnjmSFVKuRp1Kdc5WmD88Qs28O z7C6x7WVdn1c1fKMC ###YR5eJNdVu9 ZUoBycaqAhidmRGZX6xB6hHeALU57bLlyNEIQfXESgmI6ATqJd9AA ##
###9F4xGFb4QaHxZE1YHm1Cg/3AScssAHhLibjK8 d0olCzegRYVWUjBSY1k8MTZZOp ###XXgfgAmvWY2fHx11NnLSiNI4CkQhNv8xoU FP PxilB2HrOuatwuQjIcSnpyQzTo
yiLhkqD6MJjc iF3V0cpQ 7AynisZ5zzdD2jx9IM ###nzwbtYkFNh8ss6NiX9FmQ sm9XZjHpe7npZUxRtYRp9muNPm69oP3nUdLmPnC7X ###7O4FMhMRCl9Vc0L0yDKST6nWKn60I5lHRqKrJZGbukAQMH7mBe4uA7jJH87HvmRc ###sbLU04ygAldPE1wsw5UgLZZ27JSoezKFpnphcxWcazIWXXoRu6tuPH/ vJcLsamK ###SHxeRf7NX/z2J2XRZJSPbBlcB5l9vhEdJppK2fBLkXkwkw4axN1tnFrF7KF52YGQ ###kF6bydonjdPWWzx/ax2 0rzq5tZ0UveqaDCzdtv1vajr2kyo2BBWhcbp dVl67Jx
###qdemMD fj7gs0sHZaeOAST45y 0l 8QB3aCIO/TYbXss7ggpjEZUiVymVGO77Err ###1dlZ8zLlpNy0rFv8BLSji6gX1DVz5zCPbeJ rfOO8U1abha5epg4y48491WTDzLa ###k548eRw3fyMHp uTCofUHNLYXjTdsgu6vK1jzFBSAXN05HMdTMaUIstAZSpU9O6I ###pJ6zi5a6/Zr9YWs675L4nYcUsqZBlS0yBtrH91nOK/oI1 x2GZ0wU3mlOUdzHEHE ###Hhx3wyHeif MynOUkyanB8iikqfwpizvR8umFd6JjFN44nn16uii1Ty5fCP3l6Ky ###wMoZDdg1yqgQZ5hCy01tZTetpxGuObCMnsazUp7RSHqPo4Ki13vZLVl7jcw Rm0W
###t9L/VvrfSv/7/fQ/mRAc3e5g1i9qOCPNFiyixuFV7bh1evE60mPcSlT8ov4aSb3x ###dyrfOoIpAITqH9cvP tRvJoL3T/8hfAK/3KPwSXwJu XH 8xFg9Ga/
sjShjJkv FYHb5nR ###vDmCsg7J/wPw8JPpcvU1EZUA2ulIzBUV1EBH7O0HSvuBHmpNjwiJrdtu2FyP/fan ###2RfAjItU5u2bnBjnUS4zxgHjTyyzdIyp/uKxayhdBRxPB8ngldqqW OkZ48RxyMy ###7O1l7uDq6LTlTotKLHh9obmmA42ImAxvozB08qpdaOymAVc2hHdY5EnD7y23QS2O ###n1G0cPT054ELZfRjfl2k4/tk1gxF3IpHfrTYdxYjUDHXfgsICHmArtNXLXIfwbsM ###dmnDEHwovIkc 4Ib3v2Hj7k3PC3w22zk5Bl9 wMmDuLj1y5zWMBHN7WR1v1251aY
###GwHnchXLddmiWITi2ob2IxGBSMWpBlvFWHy/g0N1s6C6KlQ3D1Q3C2q0h0bRmMRW ###GhFNYu/MhW9X4tvLh 949F7W6D119N5ScB5DrmZBrqqQq4/G 2/hBZma/3k4njzO ###6y 3/99O1d0yzn qO9XN1fnP6vxndf6zOv9Znf szn9W5z r85/f4PyHLFBo9EFW
#evtY7ycy/rOfLHlp6C3PdM44EDyJiANpkuklkVcrwsZPUZZ08ZPXjWpyTCs1YyO9 ###AZkTjjptCagmxN2YmnkNDVo8N40evxlLsdKPZWwdlJ94EE8iRFrgcVZ1XsjRVheG ###dAVha0jevBhQgh2cX3HpjYxGkaj g/DxVSCJ9ZWY9x/4vB/nn3c0nShz 4M88DMm #
###Z mx UVIkHl9JvL7UWAOxoQTxcEH1mwc/4CpCLkvBJ5qc8XkA3eJMCtM7jAxIv7x ###HDbutGIvSM3qQf3f29v 9Vfx7Vn0za3EX73462b8dVvPdzd60MORp0RaEpOQ9Bg9 ###oJA80otB/uK6lxIo/VOcHj29fWsSiNf JIUstQu0hCyMM0ddEEiu0PVNmclbZkc6
###oBfCfcD1y897ibRC6DCHkgDstEbEsHj1iGB42jTp6QhsiI0GP CDH8jBg87 CX5a ###3CSJLDhyBzAydXS7iYKeLMgHaBRItoDFqf11UX0tGlGippjYOPgSr7EuWkjW/GqY ###ZS64e2NKKHvh/KhMDzlBrnTsf0b935roY0FbwCz9f8fbNu//blVW/h8r/X l/6/0 ##
###Ja59o4M2P5KiHP8TVgVNek 9aIs9A631vEFpVkU5kTCuEOecHA/vgzuZTpguFHSG ###YbEX5fnuMHFNtcxbXKM/cROYRxykjuAXX8RgUxKURwN9ieM0UpiS04pYwWp63kri ###Xqqto7BSlU5SRbQa8L6lJhKPYboJmO5MmDpiIpiUExjQZrrMXIV KLwuOtNxiElg #
###nruz6Zrn/zubq/hfK/1/pf v9P V/r/S/1f6/0r///30f VexRQ9jTGDOfAK4C2h ###MA8U1ti5lJdoD oFPHedCK8QXXDnymkBY3Yhw vA4z6q9LHWLuQuQ1ePpTEtuPTa ###eeoNDE1zydL3wwlFBtAUblIvc9S9//LBHtYjR921KCXNUePCmQ8uZopxbCpxjrpR ###0jRnobo8W1pK3axA2P32jcMy pxZ12ISkHVR943JR ScTbt XzAyutvHSbTzIRmv ###BC/2NImuPsigDu7HbGPHTFgJ2rNFhhE2nQ8cDx8XNCsxw2lGs6QcqO4yfHgfHxHv ##
IM8msb4R0yJ2khs3Zgi ###R1DwWJ4c4GKRDzWllFf0W 9b58ecFYH7YV 0TjvI3zZ1RQHbIg65bD7gMKsqnicu ###X2qFaYpxgKpxOkxHDFSubL2mPsetzt/Vd1XwpKaJluecCP5lTFR/nomWM3fUUJ5K ###U2J/NnNYYVETG9g9wvc0wq8lollSjlu4Y4RMSpvo92UZ75YsHd007I2ebo/0MWwF
# p9C/1Pofwr9T6H/ aH6n1wVlKSy9noWXDUTT5yXSqmqBO/gbDANKsaMwvhVmFlX ###GnNvNPOn5QUVFUvkBbTvTKUYIiEPMwch4M0dqs7LZ3TnSWJsEszDGTve766m/Rlo ###YUQLVFUyTalDy6x0kA9x6owDtmt2yPkzCntS0dzYvDvq7hWpLdZ4W20cT8Iryal6 ###57h4ynFLiKWK/yYvBea7E5s/ZMx3TkKO8FcUsSvaNqowaLkQr/5N5L oZPHTC8Bk ##
rny6/iolfUop7Qs57Zs5HQs5HZs5nQs6nVSgE4 ###A08CT9ujVK00fCvkBJcq3JLENxlmphWosyvu 3yAHTpYIa1NwqoehBuF6FbIf9MV ###DBXD K4eFcsJXtD V29u1DZI/ltr1hrrG2to/6utF/7fhfxXyH F/FfIf4X8V8h/
EDmjkrNFydNn54ySp58jZ1SWhzR5 KHv ###aErqKGGuCxND8hoo6K4d nQunDMq0z1 wZxRWWH0fHm9PUr4kT39BTxxVINCfmxh
Xf q5eFaBngTs1055a ###wq1XmaEAaN4IXjiJIygrWdkSaLdSEyyyFJBmzELns9EUsFGEApHahegBkVapIpm8 ###xL43CaY24avt9PHao1JtquBFxKhETz9yOafnB/sgHIKsaZ CqHlu/9o6OrFbhyCD ###2ucHnYOLhFuojKfkAxzdl6xGJRkAK1ThbcVKnn7LNMuKSPS4DD83qJJWYta8GHTD ###60WiC11f1BjBwqqMUMIFZ16HyLKBUNd1e5VQjzXzDY1mPmumZuqipx1mo7smv1OV ##
###aBaBrlsp07td3HvKKsfBOdZaSgOB2D1GZE/cIIB3j0LTmUpuNnGf42muPLcHRp7p ###h84DMJCpuSEjxqSPVv232McbzoZS9PqIFQQE3jGYb3pY797ueT6 6BDT sMegesg ###VQVwXI4/rQqGdQQyLBPmDSXTTJyhYAgNKewwyHyKxkjY6hH90gfy0rNn43H0B/HL ###aAqfRlRETaH3wG5ihZIrMHs5 8TQGDnEfG4fkceS1eCuI1qxs3bLPj26AEIO34kh ###lGsQYjzZ5yra3w1pUj/4xkiGFZx0zkRz8WtjK37DA5dc0LCdz1CLfghwsT84INGo ##
###ZMsgVSCxB7wjJzYSZ8PB90D1YZZTfGq2 MRZU2hUDKYIPyFD DxTsF5ovZtEXpWc ###z5kLmiHYDvwAX JgOBoBuK7g4O69HqptJ44feEq13vnGZkqPU1tU2bC7s mo31cl
###k5ViyjQJkUb6GQ5Nt0sk7SzZy7WNuQhGdwDvb2GpSmQAXZQaHyU5W5gGJGuJJFEf ###MYXaeqQhkuQP EJXgdZJ1Sl7XobypaqgkqRQ9Qsu/2DBLoQEQ9ujfbMDPMkdR yP ###ZA9jbehwOdV6/DuxIvk7wZ2MOcOHFnJe9nOqgUzxUXqtC6eyfka4JnFpVvF41EaJ
###xFWVTYPPK6r3ZCTjquMJQVaTRGQhJWptkiG1jlqTWF9NsDT3jhrpnrpTjhSYzoEJ ###Sbr F3mKEFO2tZM1JXEnmU6V9LTM7JHy2jAwQ4vsgSWpPbXQYFiIOZiOJm4ezJJ3 ###7jE1es24IIOrXIR1MZRMQ8PEEQ1oKGNpHpRM1sIrcnOIudk9NZyEzsnKkBzjdGRt ###eZq RE3vbzjl d8AIxsoOYuGykHDW/
###n/qbtb4Z6ImCj/wvTRrJ5Cvjs9TNs6h2DvoreTmKxSNmhMraAP87k6RFTDinlSGG ###VK0143mrEqZhpwbbTrxRspHHtENZSPhrHunDJH0mgiRJ5FRIah7SGCeHeQXQRNIo ###U7a5yaJCBWM0MjZ0LpIo078FpWOlIpfRPJhCKHNitFH6 RNbzwf8Jq8DeCU2bP3 ###1uoORtDH9Uez6xvTSeejsdozr9CEMqOmZfPCOPGkQEmn2x1NhLIIDRVVeqF1Qtqd ###Te6MWCkZinE8u 9QBO1Zfd18C6UGQgc0GF03Bp7PT7HdeX90eCEIRDXy 9igWMhE
###Bm85rqxaZ53KuVcyhE bjZL dSU2NGAj9DIOnff5S1uG85BvGfU3zeSFfE mgqTb ###o6k6xx/bn3YNU8lty/k1HjJqURx4GOinhvqbl6SR6WWrxHlX6XWq6q3KZNCK3hH5 ###QSgTzpSUp1BrsWUUy917tochzDMmvpaifa6Ad3Wn967rW421/4 4ig34iY5Fgx5c
/W8YPTdzr ###2QCwVBDEFI8RcaaL 3qohggZ/5IMtmJYHX3LulNRx7nDdA3eNb5zcd5emTq8KoaU ###Q0lZwVIZHGM4o3p2pNP6178WOXZiaMxKMXrY4cWNvObHwO/Ce0uJK7ipgH0Hkj27 ###O2zQBLlHLIvxXqr0k6pq1Jd15HcnlMLlV5aHa2Sh1WzqTPAHrWNi0BWrSMHPhH/E ###U3Jux0HIlsHmC7bmHFBSn3lMUsvoUbFO7PbBbwftjn2GeczofMpyPKaMl/
tyP9W5H8r8r8V d9 ev1X4ohE3U7yarofxQrABjkrwMbYq4xC ###sPVK veN/5hKsfWkUrGN7Fqx9aRisY3sarH1pHKxjex6sfWkgrGNH1sxtm4qGduI
ebL8Z/ji6LP6 ###BStBEMR7ICelfsKm1z 7ml2rHwFRdP0uiZ9ckrXt7ngwC/D/X8GzCMTN q 9/wLR
/Fx9dfpkvXCfIlmm3XslwQjwLlRPq4v A9Z8y1l6UUynK ###qRTlVIzlVNjNOWJZwr3fXVbBvAOXgccjTqIkO o1wszi4sL8USiAiOCK7SG2ehGM ###uMAG8tEAXmsCz8IATXVDcrQkeqKztXVYZXCpmRt V8nCAwGJtMtn1NsmE6ILiqU5 ###R6hcjRMuQ3gJWdwNXIIwdrUEncq5p483c1Dqs6/u7eCe5SLPcQuoj8U64OV3Zj1v ###JBWRmGP67o3j 7g5KqSfQn3WFtx9y1rXuCbkpjBfbZZADzHdhObo6QbN9cWix5y ###
NWP4H EVlEwHxqjhvPHC HOBeOHkSGEeL5wdLhw wp9cVGpgVG52yHDecOXLL5nW ###CbF7Vj4vX7xySD9TxJ9YTJFchyGr5x5wBLOpq8WNKrYeVpCH1aqgZEJ3zmDmamxz ###Yv2GItY9E3mWWDGLiRtkXx2tfs9oyEWa8MwXmP7Byo27Sqj9pZa4bOAwBPiiv/0t
#UOJYJTwNYeHrNEyNqUURVSrzY pcwKJytoZ/J 3OoX1WX0s7slApDG2D/C5uz40q ###C6TPypp iClF7jBLQ/b00mtK0iXdFyRfpd5uOZHYYYM0VAFeK7eQcKWlyaLRmUug ###JcAozkrQ1SD/WWVN/wnGTFmBthpViUGSFK7JkEck5/RL0B2OAG42nlclFVPZ7lkh ###49TDnYOm2oNxNwNbjcLvPJiaIqM415eWliWtkjQ97J7Ysee7p5/gDC9zTs9OPJif ##
#K fXDmU JMaXhPvUwdxd1yWKIQA31wXZvVRIofGmyPdT4XmROLoOskECd dFEZFd ##
###dDRPRL64/sgNomfN9d3JtcccFHmNxXBD9zfuhOWnjT67wWSHyBkLdRfTIKCHQdLV ###W/ifwmeJFdu04sf8BM2fXAc53jxVEGeToBduImr9MVjjrN07l5hBgO0fj01lM9Xp ###W ec1wxxiW38xhn0F9w9EYSc7NZZDkpSMBxzTC9f0zy8bt74p4ii1NfJjx27KcI0 ###d5RT9dGwmoW5kgl2z8ajDzG2PeMy5URjJrG4/QzxOoSkwhY8/V0OfoR4/TKGlbSF
###0SsnYh09CbF 5slS8q0KKnSuPAwgr8j1H13udmpUM9FXfxhf2yw8Co2BKZb18HVK ###yKGZQ82U6erLOa E6Wn3J5imbMAMSgj9Ep0G8nllq1Szqlap8b/1tWq9XM6NxljH ###z47WoE0fc1NhdSBj69DmVvlqBL3nX1fH LaymPmTzpnFa8sZfEP0ynOFsjJWtTRO
###yP9Z5P8s8n8W T L/J9F/s8i/ ePrf8QpT XM3JOZ1iJzY60IaI2ROGo8Wdz1OD1
###UiEUfJtMS yrJfZjWR7n3A1OJtf8pFRYSzhhPtltNtEQKDJNVuIXpNnYWN8gyOrF ###MwH5xshssQ2iUKDmMVNi4eRymnNDXb7obK2liBCUS0m4aq2vrTXXjWvvYODWzI/Q ###lG0Cz43AekRe1zIBH7rD7vgxPtdH/xsurCItsmLcFt3p390R0AmJioW3VRp34ART ###HIwWgVpDwhZOLOHay19HNEtoZlSEo7Wz95A2ayZStPRQAybtRCEJr5MWUZEfEaBy ###ex/2iRfYP0KuCtjLfySApBwt/8OdO0H 3HQsJI YzorXhrKunO4tvj5nNSYNwNKf
B5bRbx7v7LfvD4WHn4OKVmXtbFq32 ###D9qtfxzsw889EDJADINTU 5Dh3Ki77sD59Ht7YPsjDJy1qgg5h3svbdB9gk5T/X5 ###pWw4tgO81B0Gv5xtyshiNdYYic6a5ujk9OOFffaxRfKMNA2DCENHgOEA5sgaCwgU ###yFjyYMpY7O7lHQxGObngJyD2b2ArmRtIELiTaclwlDtY2zt8qTIav7MavHFRPOzP ###XP Lm mC5ygCna7/bzQbq3VJ/9/4C/5WK p/Ffr/Qv9f6P8L/X h/y/0/4X / fp #
###wrW9cG0vXNvnIXvkKAOPfZNRusPz1vGB3T44 fXivfA2UJrmcanZ/wTE0m6B/Hoi ###k9c8xDVGkdsXp7zPalqyYYNHUFTRB/pGdmS1GpsqBMZmb503oHczlhsN/ y8b50e ###JK eoNU
PDi ajVLawqF36xwHYJ2ZrbK 3txcpZVW4HeY7V v0ikWc76ZES6X02c7 ###biXPFsElwlrWbludCcZNmwZ7RzOkTGPAeE/1JkqbRuktWCh9GnbC0RUlZiy8dqnA ###YpbdJWHyl31jJB0B83rpmWlbHpSSsz0a0EsmxxpwMg6b9UwGzJPYYb6JuVhijd/N
###Di0y2URO1BtPcoPJci1KW0brvD6Pl1H6UI3nGkry0BBewfOghOROskh3QkRAK8kn ###eZ7uIU 02OzMbST8t8jskjvI3KAjo2F2OyWtQXZzNXNBhLrHrhPMJm4uVA0AswPX ###d4Mgez50yEAA5LqHUSqR7OYilVGSVx3fV2qJcumlO40uK741e7vn1lB6xNO4JDnL ###T7pb3aaRcdJy Wzp74jkMpz7JenMxvSeC4e7lSezShHbwv98eLi0QDz9AJTEPvl4 ##
###LrAqnHul4o dR76VDiupepyjuGlavvLjStyjUhROzTX2fHH7S 303bFNfdQxJXUl ###adPte/5d8nQ8KwYqVinJ g1yU3cuPotxXAOA7CsFxJ7t1sxV4Nfn9X2pvC9KwxNC ###c/1WCd7PR57AV67PD8DyDu7iEyygjQu8CBf3CdfwAdaUXqVdxxJSkkfHRoNaFznR ###Y7E7sO8NpSsQHsS8d8C4u6v47q6s39IrBD/
Tceej4 Lnz cygPPaFnwigWvaHoPw9xT0jqm7pB7rMZgsTSeTup6zOMxljHDO7jD ###7mK1qqa0hC6YHYbxLLbTg26ALbUKzn4sJ8PAidUSMmHqET7HV2sH5oGf2hxh7 Vt ##
###o5PaJGgeJ0OTsr oJ gJLgxfADUFsXm677FPlIst/7uauM5tGuT32XNDyQOz5maC ###21dDquQwRwYBU8NbebttCWF56V5 s1OuRCvxSiDBMtwfPD/WQWsfHhQ1yTws8Z6/
/WpZKHyNgz3mvi9gd2l1JyzdHrE4CQT6f1 HR0 ###wjOzxQzr2An3Pr8DaFgNrgMswmyMp4AZ35gQDHzntGtdOfjaA19yGFhR bg5Z Cn ##
#i/ZdqbLOwGFUAeCeVBJI 2owHdtDdyjqBYUZhDpOf/oIQqjbvVVulzAVifl31AUw ###moTQBc5MzCi8AAiNYMUY15BjDfPD/IDlr3OpvjXwA4gshmLCi8BcqoLUnWGeN2C6 ###gFm7d3vijkqNDr0J3KZ2Cz0crMDB6gdhKqrwXiEgCCDLITCrmbBkqCrQE62/ LuE
#f 4hR03uCQZo4Vz4fLmGKucswqvTvZlNxEL40yxKtAX4HQNe AZWZDjmgY8EGymr ###puxdI9f64nnurBgIVvgNdR7YpSmJxVaYL0k5XkY1aeMg744TKr/LSHTbcMLIFWn7 ###c 45zDnGVN5Umk6eRVOu42Q5ZqjICLEL4tOno4v3NsjCrZMOosP8ESThW4ZPWJgI ###lunsEU/MnOfKQiFBcMvEDDbPuMuRLKggAIg2VMTrNB/I9eqAvLz2G6nw4l954cWT ###D6z2oo136DeU3l6/VtkXfE5txsQAWwLLRLXelLuqSJp1ANvFDXyHfpiktmMETElr ##
###c0Uv6HrXdq5Tr1KIwVQfcyWsfaquREhxyj0J7Nv3v6cOLpfiMpbLLfNbFU6meb6m ###X2mllKrkA6/Xvcw/1MeT2GAppTSBcQTCUDKdcq0Ssnyxbxnnl7YwgQ6qu3AWNhhb ###c8SQS77 uxUkS/T/m02ubWbucHtPdAHMsP9trDV1 9/a2mqR/7Gw/xX2v8L V9j/
###9imCFX68gxtD0Zm IZ5SQSCfezEvc3h4PgDE5owuB4uwTpFJjC6FDJoqjFHeSg5o ###FAbECCkrKuhyw02c ZEP4gdVUAvPE1GzRlG1hMT8V3xOWXT76Z4c3U5f1N3qL1zX ###zK9tGE3LHkL11kc6ohDUNQ7qOJhhkR/HPbQ20T4pkJwkp8hIx3Pfhb7 rCEPPi r ##
#z4/upHYFMkqGe iAiPwl9nUj jqGstWIaiXFI/vJ8cjKHcJQ5Kq8EEw9Iv6owteG ###udggEZnGMaRBzMuNxo19v2yOg8YHBzaEd8L4PcFweduwXMSCqSl0nuC6vJ2 EmPv ###72nQ3k4FN98AQoiWrAHYBFwkCVGXRgbsDEf03ZQ3huGcRkKljhzr5KNVvs JY2nn ##
R1kFZVbA90KdIuovhAnpnOQ xSV1RXs5CE7lZdpfykw4NQ5B 3OlOB4/W ###jTfVk68QTINvCCS2BWmNK EOtXQVuCc8gB3NYi9t5sDHko3AQmPSS3jUk9QONw6r ###XDGaeNdUZRWFTVOGGHb4k25qBpuQC4t2obY38GT1DMtmNKhKt76bkAe3wl0VdfcX ##
LpFLEM e Mdfv2WGqpEEKbeXiTp/ qL2dROlYL2w ###NR6QgvsxiBsw/5y1MaGvQHz0rGdmEtXn6Hd3MqLXAM3glD3IMmVZQpj7TKC5ZQx3 ###EqMgAGbIOKMim5bVx4gOnBPG9dGvVynIEC0wGQ32jHiwpx8y0ng6L nxWI7jhvYt
###k ESz/l75AqUeqaSrxgmT5d0Esn3IOE8WuIoStEw5ZJVFfstm3AR3Z1nV2QQFKpH ###EHbiOiqm8QRBbmFBA/pWTUoAg9xRAXE6abWtMQjLD8zVWVeaykyKYDdqLMNuRNxi ###ZEtR96oDIiqSzKXeJKDC5pNKZnI4Stbf1LbmPtc0xicXkxIuAFvScKYWZvypYkPj ##
WWefOrNRvSV ###ycXAMOXcnghm9wN0PIiZ00PPAnQjmHRtLERTD39rxMO6Qda5tBpYRyXZA0AWGlsj ###DGFYavnuPdcB4a/WNh J7e21FkIubLvYlMKUWLPQfCuJTVE0kmxslSyqKHiy7lWm ###6NkhOVQrkcEUiTifJn2SZgMVxcpF/de/mMK4qnyqS7QcU2uh8VcVLAW4uX040hRv ###6U0aoslK2ElaoVA4bxu RCexe2cMV5oS2St6RzwaPAg6mvBD XRu5ZMx2ahvza4A
### uTdmyJTEjPsacEpzzC9KUolaXpT1MoTp8ccaqN H91fMqc/iabnzg2A/ogQMMho ###8pivfONtXKVzxRz3WQW6JSQFUViJXDv8dM8OEwfhH9hQyUgoNe7FMWpYsaBjzx1M ##
###i7nWGMaVF4WHLjQ4y Goy4mF0MTGKPimJq0Qy8Dl6BW2r9aT/ogtb2mbvgRW5hQ5 ###pRWrqQEVWw0crEBvy FIPNVbOPdrvj2G6gkzsoRjWI83KhlvWD4eSIUjc6Lfbrpr ###kjhAvgXWVJxdd3TncBThFCVaBM4cbkXZhF5qlb1Gt5S2rBTNuSR9sYyKvXo/IfYq
/n AMI3 wZKWmfLAsS ###Vab4hCFwCb2Y12xCrew5jl3wbF5E/aVskhEuVFjKOlM1XYSbNExKse3rEH4LLjda ##
F/edn1//soKaF0Rd8VAaW 23GtDc8Lzx 1eZsU3Wf Cag ###n93ZRGQw170k4zxWKS37lTuZAKX4eQm34F mo2RaFVBMTK/NqqaiwiQ9VVktxudD ##
mrhVJeKd2y3fsrjPokoRnB9NmTLLrTkZBEH59aZ0e2GooCn0Ef 7t/r1j ###dy4A85vYIvqCf9Zu/doJY aQNaOldIOzmTiPKbJVhSupJldSYBhDvL4konx3DlN ###oMayOAiGqTOZ2gOsnatOSV9gHMnC1XgSp zHI8nYlLMrK3fo2FxTJpY5midabL4p ###u2FFYG3KqFQwJlSeGoqPZwqnIIumITqP9TChOn3luUGB6AWi/zkQ/enP0d4HYFtP ###j BhBFao1f5HB5iew48ne8iqvfBzFMIrvYK64tHz28jrIqx4SXf3rVXDa951exhj
mQiqDPhRlLbMMgQVVi ###fkuM2cJbx3WRlwJ1v8yLjPV16auwvrwhKB0mY XDn3zLN Wv1Dr1hl3yBnNOnqIC ###XuK1zisGNe8J bt5vwOKSCR5i3ltvWXQZrLueOLeeaNZwElR lli47ZCPKV4dyxR ###hUfJsrtLg7KaAaI4AIjWMfRNwdjAdSaAPtObiRvUK qUh1RhC0j3NSo7oMEN5lVD
###zTDJ3l6coWzYB58vkqP7gRm7dqc8xP/KwXfSUD4zktgq3MEXCN5EpCEVP 2wDIGE ###Gz07gCtO69q3O cgLTNQGqDfs/GmZGxXGpo9njaboRL9iaPEYTN04LXYk35gYVH2 ##
/GXuA4jB rBfRB/ l7EPkGnCCnoGtwzUfBN4D i8tyul ###3kAW 8bt3tKLCPwFSqT4cCETGz1dMjsjYrg5T7m9DcTvX/ S/qw3tL/XlTqx2mzd ###uKBhmk1qtrPNMukiAh2d2Hsfjk/
###e3xwLD1By3KtXWhBt1H6HgOf2WFuxYYmRHza0KuGUTefPOomP5K rQnp26Ye6gbV ###65zSaVVvv5neni KX3yJEaL2iMtA2uLrkQlFUvtVtelmSlOxCkZKYqtgT6W8CkoD ###LfeJrUTus6o23UxpuslGjhV03qMsMobM1UvyyZeML3tZuknnbsiDj4aiCDt90rPg ###
#hogDAhi9Wo0lIItKkJMb7KXKsBJlUEpaSHtbYTWTo3WVNfAdIufmj 6xWI60eqql ###Q0nXeiLw 84dPOo1SHushHG0GCoM26Ma0rIkbfWWl2M5jgQ0qlVpSU/DykUw8 Ww ###My e5UKzchxI6MkfOvZx522slcIZMnRZnLhD5ucotSJmfTTooZKaN9VAKCHC8nas ###8nC4RBFUXWKqx7L2RTWtpwbYhGH0VlpdYH4dernugLyrclKNW1Eem05ElKhRSqpL #
###pbIxodoDliFmV3SxsIhVwOWGtSSpcwwalyY0UDu 244rimXOyvOxJ CcHSBv2XO7 ###E9fBBBOMHr4207OKJXTEijhcjVGairYciRU7CLrOGIUXxfMCqNqdO3mEx Decgaw ###lt6jRYYbDhbUKFvbCWR2Kw9T0jn 2N7djTMlIecR8iY81gNEKkHmTQEUWZxOPL6C
###v0cxTaFuEa6EaoZm7537gAXAA2oTLU4iQXgSRhRdJiKQdCqWZN6RsiAK5JK/WlbG ###Zck7I3qpy5kmguJtpdegj/6rkBh1GJ60VKOXsgauaq3x5BGyNmyZPtVzh3JzlScn ###EP2 yOGKkWSIfaHUILG0tf7daMAe3SSyzxfc1Ej/ppH0y3vAbJThnyyvxbLySUMT ###DvUjqm0lA9YI1HocFIiK0ZysBDqdWgLeqWv4EkcUpcHychxl/jCw1T5pJkEbmywC ###7dUsaCdBmn2vzk8pyyM1XLnEd1FOgD52SoH s//jOgSrc4CF7OO6BiCLREQrKKYg ##
###RV TAITdxwqLFouEox4A4jF4GTAYVHnMnqDZm5cS7AfGmplhycy pqqUEyvFWa9L ###swFLcheJvVYmBo45vGQONWf248jNwqQMkIW ZIUCzfaVzfZVfprIa8L6akp1bEXU ###66suMiUqiHpbc4utsqyabzcSf8r4tnlUJOowiCjSIneY VeHBZeXboWUmCwkLlmK ###xFgSqZXkU1zGGJGythAjOxSfV VfVbnz 0LSJWNWLRDvmacdu/wo9FN1HYy7vBqN
###XqA6Zx06h9YpT3wzxkqnGkQNA58bBjbpM2T/JNGXkvvLl4A3SjIiaWPUYloF5kzB ###fE0bEdaFFbhNrvWSITgUCLe3Yw5LMhiEO5awc8e95qRCDqEPDpJ42iv8ibfCpnU2 ###uPBU06sqyy/P69eKS4zZI0Y7J/TZ7HM7OFwKZgjFwGwHUBJu9iSCD6kdrtyuQ3Hb ###1HzghE67uj5OdjzK3r RJGWOEeP29FGkI7ASjqFeO 4Yz4EXFTKcBfSxh4HpRNQV
### TyT3tqoZofsUAvLD3dSVZ6mrayeS9uJDrrJ z49P/jNvO2S0E iOGOYDjhIw6dY ##
###F4 tiCR8bBP2WqZe8bl4IAb1gt 38gQ4AZSm4pFVZUX5GeX3jWFlvviwXAMruMPo ###gfBDN10bVfnAbNKs14pkH9wSEZKzKYoRvjFgUUH1PW621KTrmH8MGpSUlPSOUDZ6 ###IJMhxYZJMIUUiSDN2E5NySK0oJPQV1CKtJHiOqL4a0m00p2EzKH6SuzMgtMoqMYj
###WVRyNDc1kKPDmIRy2G5dYJqaDx/PGd wQtj8SiVhJDQDw2tFBbgtB6BItQ0pvj8W ###tIGnpYTFa6xUXknaJAxGBJ92q3zN3 LmpbwojZtWRcNtc5yRVupQEQ6NsmHTJBUu ###JNw2Nck035rjffIsOlmglegxiT9kchYYzN2mOO0kj6nYsS0glcaUuUAh4pJQ6Izg ##
###jbW ybgmQ8Nio wiJBcQC0wzlEhDoREc47X/SkUhI1dC02ipZ5XGnetcR4xLj3Pr ###X7Mw6rvOoglkVE2pCxaUDVl3UQRVLD1Z33NbCWNhI6XPVvqoEY9Y0r6UWMWEOCaj ###FjoSDHQbtNhA1cRE6kJD2HWzzPakKqxlfZWkxZUuDr67zp2LAGKsj8ZPvTBXl4el ###ez7E PFIwWNVng0zJH8/3f6XFzXi/kXRjHikYsyougqQTFU3wT vUUWVIn1akVXq ###3z r1LN6uLA7G8qgQVwIpRyIktTJmNk31pEoZkZ4eedO2FDY//5mNHAV4zXzfxkM
###lsfEhFvhkZeWWS HLMEG6Hn9fiFVFFJFIVU8Wap4OaGBG0UjkqZxZTl58DwMquqR ###w 27uQJuKB1J3a02Exwj GjMKqL4b0jURgKKztDL5NDAmCufI1WjTIV5BCCAUz7Q ##
##y9O8QWAQtzHeG7l9 wx1HqvReLuzybUFj15IDkQ5m/4M F8l9I2DXeghrqCnzbhO ###t8f0EE7FeqhISKmiSyVcWxQqkbBfxV9ctAH25ijcsdtjt/n1a uvogEpxm1WAsDp ###
jGxzzmDMnld k0kIIeX1EXhyPqf1p jCMHSSViSPS ###u0ex8sAMUnyiMpU4vmrK eFlgDPEhD4qeFbIzXZJO8/kk9Y7Z590mOQxLLPEDljP ###5NJqEMmn9QriXxErzzlJR0q1r14iUdSJzCxcRBj5jDfGMmNuED/xOIyRTIlrwurQ ##
#Wc1ftjRO/EM0e DljY3EzbBaeSb18dJTj5l9UGV9P19L8lsR40eUJ6aavE5r Rlm ###xxqbClhyz2441X3kWoHIYIoQl2To7mwyAYlcOkxgKtjFcCgBP7JLcHedWFgtviQa ##
###MofuvedMnewENzmnR jBu1HJM/0n1laWGp7qlBlLb5PLJ5TVsnsGd252jvkMH3LA ###AetXcu9cv5yYeiZueQCWxtOzsFjWdDhG3 LhuBH/jmxMTF0PxBprwYYqeVbXetv6 ###
p1WrZPyf9T0 8t4l/XiGkYUSngmBotgRwkYxhghRsMSh95oqT25vS XU0ag3Go2Z ###SpM5KQaKU6LPHMD9sIYe/K650yE0sXAaosgltPyi PFFwzuDwRiWFNVs1n34pKj5 ###EXN 9NBBr2FScPIc2oCa2rC6PgFPmdVXwGNlVe35FcQ0BtEX7AyqbDt6noGo9zY1 ###0Co5heXCecMa QvGG8658Lq88GVefzxh8Q2x Ebi4gWWRYivbIBPEN9Ew RbyBsx ###zIqDZS/6Khkschn38aOa2wBlmIiGjhjUmOwTK/
#NKtZN U9xLxF8cDRxJ8UMxxI6XeZ8Iup errW/hLpKDxHjTpNwhzul5Cw6pV/6L6 ###tVG5 Cr6zMjuvZI
###iGp1ps18M20 faZ6Ld9UXMn1pKkaOadqPH2qnEfFjfYLTtXjmXuS6 XVDN1V9 oO ###UOAUIi2Isxw8MHSHQLfDRYfJf4Gn8H53R33Vi5rFdL/6g/r/sjRk9ng2CNzgqalf ###8/
###ynOJTQhmQzwN1iFtWBA6UqVffza8QimhLwQFmiNIU3pSitehrMC8ZYGZt0x9Cb/o ###qktY7bYVwu2SUuPdUohr7EMKTY1kHMzlhd13JADFgoQ5ltSNhTEiJKCazKiyw9VL ###UhPvXtviloC5rkCkrVJED6ajcrv4aQIijINzLC8Os1XSMiJj4T3gLgM4dUpOAJwD ###PNOzibuYeoRpVy6Aj62kIkaHaWGmyPA g1KIgPmh3wdB0zi3mFZrN89V2jQ0YYeR ###rAtTptXPevHdsnRpJquDOu0h5YpLbpfD/kAZOb9WKCFfBVhg5AnbwAgFXWfg2r3R
###PZCpc2BF2 6dOzjye 4DXVZlnGYDmOPA/kbpWjuz4a43DeyzNbrn/PctfWLswKEb ###T3j8JdYcRlKaY4649wfttr3b/rD3946hh38e3Hj9aXDJEylk91Cu qahwVK0aGaD ##
###8/8PO9y /122LuHSlpe31PkE rwWl0iZ AuhUuJmQgyLcoSWdb3hBS6VicmU0drl ##
###YAVfZRKp5BaSpJFkgnRrKBQYv9LMts lBvnVMTThYNEH 27KxWyEzv dDccohSHJ ###ZbevXrYGmFMJNZHXIwSbj7X7lLdboQu5Myt/f2XeLOJKItBUgmXmDpDVBIYWeM0E
###cTyNzsQGNCAll/rFeO 0c9W3Ezt1TWwR/2Jy0G08g3gkttse8PmYKTsS09UBKvET ###9fb2Dw3HyV wbC47i/mGbVY/uWi cHvVU3YTSF2BlyNZVl18Ti7qJKI927AG2C/z ##
###253d7I2vPOk mTatSA v8 1ORSkfDn3bgO6vnpchI8WUWt9CF6oiLq2cwBJiyWhY ###LxaN3sGlfDWU0gn5Jm9q4va VaBzGRNrbhm7Jd4pUsnRcIPgiq6O4X7G72i0FAYB ###48RPm/
ib2qOAU319hYYg8W u5 ###XdoVi85O2xphO82mbXG1Eq0Kf9bMW/2lwprillfNW27i4nmTDb4J1P14iA7WPRwi ###HO4QzdCXmyCDYGv2Y51 NFbpxyp 9wWbXuJ3FVwYjLz6BZf
###VtORl5Zm/Xn4JysVdO1hxZGx403COL0VObIIKQcCnS5daP7WFuTBfFLsZvQFzWQz ###xzZrqVNJ9IU71xY3zz/NW6zZML5673/XHDu1IEl5s1aJHphnnHqkFCsSU38wADrv ###3El oaqG7EB3Ugx33bfqby2uFt2yvL5Vewskhv5cxGENcP8hqkezB0KwOEpTQFqH ###3FqUILQEpCnLZW7YUZGZW1Kqol6Ub1VXl5bCk7esv25bSGGwvqnyIRGj Kfrpk J ##
###o3 ZUGnvH/3WbNj19ZJM7Oq0qy2pF4xH3RJ6EZ0SvcS1O4ncAXmw6Xgy6roB8phk ###rXem3RtxG2Ea ruDjNy2utYlCyT8Fki2B dotbd3Wxd77 3O0f8c2MedaL5D5hEp ###XoRQucL0SzK19EL/AKQ/kf8rYmIEvx0ZwkpZ6I MPVbcLNS 2xxQxx
###mc yWmzn51EyrKhUhp0il6XjePoaOL j3iV gLGrFBY5VyjBu8Qj3Rfyk o7s8Ay ###BXulxSxo2EA3ZpXVZDNhStOAKSbUaMLvqwbgHiKwJk43wDZbpm9ZTPe2dLf2P3w6 ###YVXpcP21WC MXA9CW1i48aa9au99ODjsxNAicePN5I0rVyTpMjQzdtx42R03YM9z ###
ccerP3vH ###c9/j9SfueP1n73g9YcexB 1kBEK1c d4A1RLxZxrF P3YpOFwgramszyNJpdSOP1 ###lkxX8krmeKywq 5wfk6MkVGcjzz9iT29o6b2WX1dwLRNnhHNRkniD0v6VxGRr69a
###2KoU9kAbSjgaJ0QLhuiFB TfAUowyxkikCqyT0dwzsw4yNRs6WdPR gMjOYcskD ###GflkBcsfRrcSqdyjf7DDWBieiMQVCo5cGajyROOpC/D8eADgIrmvFlDreH47FoAr ###po7kJc Xb17OqWO6Fb/DBpAkMnS2Z17VmI8cA47C2SiW1BSqxZa8o8lk0S1lgmrX ###8f82xVBY8ueH6ypGv5qhEl7SuyiDq9Luu/gk1EXsRBcMq2r/LbWmLEYV0LBsCbpG ##
/f5yZOyPVqHNLNK ###qtQPMmiVzLP8e9d/RnfY1unRs3l/Zvl/btQ21hvk/7nWrDXWN9b Uqs3VuuNwv z ###8P8s/D8L/8/C/7Pw
###xKt4sBYRwJyexWm4lBJQ8nWTt3M2cyeP4d2I0DPCmnJyiquaptDIfbEN1zxh2cRq ###5rr06SRA3ecLkgBmbkgmBEkkgMxLfyoSkP4s6ETCDq ItRT upVES7JJQzTctqVf ###Qt4k3LZ2oZR/26Y7t5XYP7xzyf1Fk9ggMLDNtKjn2jlvWxIBqVlf3gR7Q/8Ntu j ###OTI20tB5ELN01AHNI0ntk0b0
HcVnYfZC1m43AxFlpcGNeM EEd vP5kZ y6cC250y5DtDtA ###o9HkSdK0MPSZpox7tHt 2sx8yrSs30mZv8VZ7s2R7XsenYFPMvsHOb5ITGnQGfCL ###ZpVos2 tY
LyxqhkZ ZRrLVqhXnNzLmv4cS8 ###Css0V7H6MCT8mA7HtkYmtlFoxM lh5Y YxxtLZ55mqPExWiX1oJzUGrjD/16DQ0r ###osEhiC3Mgcg0TEAIazvdqT29mdggmPKHwj7bjOXfVnmOinUMl1p8EuBHPAdol7Gf ###UcP27vm5HTwOr/
###sTTb04njBx6zMXVnE54zrILRuuzXYEuRgk2vnE J0QNGfXsG3p Ssia0rUl QRgD ###JkKHAa/
FzlMF5xJHDAogs3lTm25CSXqOQGD K0tUly0566 0JE3L7xtDD5SRH6V9 ###4JrkVnEpZSdZaaCFPRyP4FpVd DJcCfuSDoreNVRA8f0g0jwXLSECXQjW1jA ijh ###enxj fUmWgLmuIoHWrPFvcFCqlhN9c4 qzcVzU9aQ9XnI238oOP13LRxqYE6ntZi ###6PXsABrZQA/ssxoroBvSgjwd6tShnr9DY94ZmhkzMBaWg281dexgCC1Ze9aUtAGH
###wZhHD1upkzGRxPNLBoVVnZ4e7bnKhmM5PqOs49JygcQWlTpFaOes5FjIkmKqidhG ###pvzFM0KfUwqpVMMpUhUmoeT5 nU26sXl05BQer30s1ZVUoaM6BK1j8HZzFhRyAzq ###5HxWjEY8rqxspp9cVCN64hGhWXQtKXEmcAFGgIuhBBwIj1/ ZDBFz/2N6/NYN1Zu #
###1x2AnNRHEUriKTQC QRcYZWU49Qf4JwHdzR0K0UGn7Ik0tjnHz6e7FPxFEwOll5L ###5t K6JGmgAX9IEfPHjoiSRXLuXMn6OnDk2TOBrwyGf49vR/piTMDa5F3kdByDsNY ###gs7qJajCjyYMpjou0qXJyWonX6VcT1xOLFv2l8ku8yrJ/i6Xk3nuaV9lu18sW893 ###cmxSeDfjZ/Q9hU48gZ9IzdWTLU9yil/PS/GTDT ErJKLSgxvl7Q6u0BX40qGgkeU ###zzRiAELAWnKXaPKlDBuR6s1jVQ1jSOyGlLRQotMpeiatPi5lrh7c6jELiaoiI2h2
###HXMf 2Hsm9GHOPV6GZ2KU3vEHU5N pS4aPX 1L7jYWV2dzYd9Q0TmgSgCyqdxUIM ##
/Abu1dHP12dPGPxeFAKHON6fTORHj9trW ttZcX2jM ###JMfmWKmWdMlOFol7I/u31j7OkydANJcaIWUDONUiL4NJ/fzd B5lSh5PVfLNs 7y ###VtZz85xAylLSPZdi7hkg8D1LuE7CL2ADdvWSFom qjm40NhmA CaK SylSeBfeKU ###ymhP9ghQGLEv Zf3/dWC177Gju6V2VSX4UC3oHInNAAMnQcmRIrcQyYseO/4vag2 ###D2W/mACdnRrVT3xELTCPf2rma
###2 ZdSdJqGubVaCtSZ6nPPQvueXWx 4//eKYq9cz4h7HTkKBXDRMzzi30Ju9RS/SB ###rIIhLVnuJzI nCHDiG/yFw2DH0MnB0NPfLV3MvAiBG8KDwX37FfMC4UharMx6hTq ##
#Kw2hCBxiFhovdLt0hNCVYh4RuFE1XkRAF UaLEXlyBbSTRMOa4BOg0p C6QSSdc5 ###Oc8wX iLKCcMy81RHnC5Yxf Q0sR5ih/NLdFaj6nmSoS7yxqspBZSKIpvmYYSxK3 ###09aAEWN96961gltvPMaaWkzGZ1ChUgCeUBJWsF1v5P9tmmZ1Iatr LUCroOPipb ###hOD0AUlXMNy9OxhUWSrv3ps0HM AEEoXMLDd2Wu1j05 TQXYPMeQwwb4PRFJlAhR ###ziEwniOJQaAQUSmLlcw Rour6G95emh/vsDQed6Q5wuAzwy jHzh5uyqXkNR3jDV #
###yL2kJTfPqv JNrDus5fGTK7/uba ulHT6n/W1 trRf3Pov5nUf zqP9Z1P8s6n8W ###9T L p8vX/9TK6eJ37xCtgtuqecPMGEN1RghztkPvtloeXBZSoGgJFV0iJfz4gUE ###9iqaZhZ/ypXFTDUq5FojNGvUbkl3y5OGproUnbNYvUrD0GodimYDP3uwz5qXXyrG ###oYlRJ69poOFnzbSh1UHZvwcAHHD8NX14Uf FDU3A5QS/
###3zQeNZHrGHnYMiyaoSmIWIZKeln/UjAEjyRAHzlW5eJk1wbKd3iORqZco6eseoyC ###dDt53FMSwwcGH8jMoVk8mD1VnAglgDAfQyv2vTQ0avkSycLIC4AkoAekTTFkIItO ###Si99gY1IJQW LbjRZNqQeIHnQSox6KYs7FKsXPwKi1s259ByfaSHbybKsPDQOWkD ###HWNEG bAV7Z2B8ZtGBYeHuPNCOOQgG1EvUnPY1E53ZHbD7KGvkKakDJ0ewQ0LHnk ###tKFb53AHxlhMRB0/LAuF18TCa4J0EthBadgMvIZbX0nyMJiDNpiO8b0zGZLz8uHR ###ORmEeoxqLojXShyRN5hqJFg9RiznNsH7iE77c626fchhvfost1Ee lfuBZ206icA ###pO0Mr3qI3LXKcw89orDdFxmauXMm8xdHclWJOek1uwzt070Pk547qWReGQzvwBBK
###bJ0 NL Yuj4lYmutzao8uZFrxw8Sxn8rmWZWN60oH4ilE/ghcMmCU q9fRnFgPz ##
###2lIk6bMSaV Ub7VMNiGQmB9N2AxjZMleMmZPXQN9CVYVs7YZkSPDc8yDI7FDXXHZ ###EOcwtsYjah5E9RXQHDO7UqMUCIyE0ngtrmZ9vGfCl2IPTmA6xtgukb5Y6yPas7jO ###tD5wpQyEYtt6TYM9fLtM6C1uBXkRsOp08ONd2Nq/skmjB59qjgN088NpVG6nhGPt ###sOR7/ JuWAkALpfjnFHkG7AbUUOYROFtbqFfxN9IfSIShH1CxoQoXhJHomZ6jRgT ###rIiFx0kHLXm4KVfFwITcYoDMtupbbiYyuDEr1VFdpOs0T1NRg1gSJtGzQMqlu3JN ###UidvxHXFa5CRLpeU1Nr1Mlxa6eZv80BoioLeN W6/U2hWJI6Ba8B5wtuTf7j50Jp ###bojfZJEItxY6ojZFMlQBETN60sbp/xIdxWhSNiczAPjuvdXiHJbJKVK8tok3GpaG
###O62GX sycVVC/BWrsZVewzCacMcyu30yQMBtcOCEHgMvsJnMVbJeszc1GgLTmYQk ###Jfp4ma6WWC9RjCic1Oj0xxmHRAhITEkSGExbMeGkwf0xTmLTyavBBfCVSgxiNjZL ###qBRIxkfZtxLyBBXiVSohr1NBXkwzf4Rcd4VjfCXhNslgSNHrs3UYh5AXxqTlCj4o ###8vr4cTE275Uq Qlyy9nJJM1kJDQRRZGFGfpAEjNYg4gRf5WkMjNhnPSprqbKg0l4 ###UhblJDcNLhVLJkDlaMde5tR2EXPB3a9Ffgvk3nz3YWpgKkSTiCDqb7YSY4OMi3Pn ###Wt9CzQZzNCa/F1
F9wHr4NpIG4Y99mRLNpGAG O2StJqzbhP/8VrfP A/6s8G/7sEHDfqlgb8Y ###hnQfuuyK4HrCPx6 RfJDgoZyOhzXK/jfBrL4h3ZI2lYNjZfGAY7P1LvYDOgQFj6A
###ZfJyOPDGRD4slr WMkH6Bi2Y17di6q538XsqFl dRHpS9dVTtkdh9DbukGtuq6Vm ###3Xr3DqRVuHLNGvtVp4mHHuaVuB8JwzvziB4A5zawurA6D 39LPvE0HWC2YSyV3gT ###yjtelXyKpf0xXbEGdr4oyS9TukekZNYZNqFyVpsiYWPNTaSNT51MrUtCoV2nUldn ###H1snF3b74LeDNlyj//uxc6EvzTAqJ3ZifeYtUb9GWr96rRGjQFytrueUEl0iE068
###0mToxkZX5B84rGPnNrQCRzUd4GpKXp7MJy7TRkx03R7d9Qf3 u2sKKSjnOCyCvu0 ###gkd/emNdUQEl3Y TyhcpNvFKzEYeuUsarOWprpJF6iOz906R khbdZH66D8m9VHc ###v8ujEIWYkxNFODq9r8znx
/NFzGOzLv/VaHLiq2wocr9nPvdcXy8PIkjs0clvB ed ###AyCzd87kjD/PQ ehJJ8RH4VHXK1uKM7oQjmrjK6EZaIW1hl0Zxj8SfuyYF zYIpZ ###K62 052OQsKMnGV8YhzOEPspM2cyuDB6TUp4zzYW718xbzH0DIppr7Q5mJ5lPRaK
###ScyUcnHl8zKrvtTz3RRLMNbT0KM1Yu5YirJL0dwiy4XEmWnBlGXFnlCKzPCwxnbA ###T02O9FBPYtsAyujwW1i10 IBUBQEF6s0NPOrjOJVrGDEiB8j39EaYRoJSeIxVTIE ###yHRPyzAqNzB6ZEQL6I3ufRGnrkfmGW6L4J8UXbh6dmrMfFnj0r6rhkMvtLDFfQT1 ###gDpCgFhjc9kU9WJCv1jgua7PDrlHHWViG2TRd57JKBchT4suOIUKYamOa4SvjEN4
A6Kibr0mx4UdqMgL0DfZ6Pbi6sgYvZqCu ###k4F622pX62aLtGklHq6kJP1dhRuwrK3NizkSoOtEONw7dZ8mBwYNEOLXeC5n3LqX ###7LQgZyFxzDCXpilx1xhck7LLtmmX7ViKnLw7zLU73Fk7wW1lESZDyU9xzzNKsHfW ###gNX yK/67jU8o3d5UTzH3AgkZfM7JvcYkCRnE9 4dRzgKNHXDHkKiZkASQ6o6gAl
###UpNh7jTL5RxYOfdd2k28SylLaeRZigL8jFVnYtvcl2U3 7Jk3e/sK5B5Znxv0aUw ###n8HF4megoP18EO mrQogePEcEFRwna1vfTW6jvStafZ2CdrFJ7dKwgV8fbWETcoV ###aR3wJ4OHdCr4GTsthVBFYDMTqE/mI6EGsLyS/BgRQCoW23XF4n/GFdPUoBI7KRkU ###KechLUkBib4keijkJVUsBoDwT8PKutrKer2VYHZFoikXE3lMhDOdYZ7RXmyJ6JXf ##
###bBm3ITOrs5RnhiuCp2ix8L2rq0GUeCAcBTd0eFirxZKiRN/WanFbNX27g84rjYyS ###E2z5y9vW6pZ5hM2YpUgfRlvsYXw54SSbCZOs5l2lsh8DHOGZZ8oWDm0TPPeSgbmp ###6dH5KHx62UiNi0xrWt/KAayD9Oka adrSmE/mXgNlEP61POBnnO8FmAk2wj8hHWG ###EAW5785l3pBxLyq2LRiN4wBipRH9pbulcAHUmT/9CaBLH4G2gYBfl0AB zkf3VtX ###TqC QkNnOvEeMOl76Zj9ik1spzepWJPRPbyZo8Fs6Fesk4i8LulN6T2G1uWl0gmQ ###atYFWQdtFmiafxYr9yzMIRP/
###eAbSxNq0m4ZhvQfK4EJVPBPynlNmljO5JJIHL3HXDXIC2TTtEoDIHvmDR8q7WUmc ###9hC fWthQxmoyMb05smPHnkV92wEko2a1MC GgexZDE07a43pRbE OHEzIM3hG4w ###37TT0dQZ0Jw4ZXIu9QtshzqCSTZGpyQ/l6ql3tnAELjdGxs4Xftss2JOMkNNLGji ###3XnTR17fAvgoHMAbzQAMlCs957TT0fHIH6XfWwqyI6dkGpnX0nA4PajuDGEEC8Dg
/PXvaDuVDoppdVgl6lJ8GZNqAbUzQo0wbRQ2yhExB rTo3yqR ###4UxSC Q4kVSbyPBxB8lw 1whw0D/CzL8YmTYlPFfuqpUziZp8jBNP0u0CxLC3EB
#Q7gh6El07cmwzRGb/ZB S8IT3HUClFKNWdcWyML2mHPaC2dy7U7zzZuTbQC42YCE ###9lktvoaQBA5HiD8E10oEaQyJDxa4JuyCZN/OOa9J1rQB7cLG9AiUgz6RKFA7poYK ###Mylk3s4zca0ARitEKccRTTO9VHQP6Yplpy3MQ0bxoCQyWhrNpm jIkzlRbhZmYm2 ###
no J5hA7QJlu/MiUd6iHCiH3zTSeCYascpIERHjo4bOEmcfBOcb4H/jdShoQ90ZD ###ZEECIGGUboKJrZgzwHohIB49LxCrJFdQ4v8UoAlJ5Q8LOEWUEvvdd5muN cl67lx ###BIHP0vcJc7zUPtMvd/oLOyePFANYBlpwUMXQ4meCyzgtXyihBj70KSI2sy2EYjbW
###N7DpTEtRqimsXMW 6rCuYiI3/CINbHvKvOarYVTKUS P7MBw4iR2oSA04TWowtXT ###IsXinVkPRPUrELzvvd70RtqGWtlUvu16iVOzODOipaASsAPDhWA1FSqVE3UlQC8D ###eM8Evc7JOdNH9JiULESwSTIAoctPBVoad8pUDudcx5 pmhg6D6GivwQdyqlA002Q ###6Kl14w6YJWTCMhXGzJQhl2aWE7N5NnaTn0/u6T6VYZuPNP8ksiym1drN8wZuLvD8 ##
#KtPOZ6hL221eVe0h2XGS25lpAUNifvMqsASXmd3wEUP1bIjj3E4EOFtfFy MKpxh ###U0ES/rAou8SWXsviJHCut5jVLUzqxjgqemems56mrVWgyRjK54AmH6mULWrybVUy ###dN9zbusnCtZph8g2u5rJDvqhWlZiiejXalh On6IVJYbK6U6E/Uuk4vazSNpIQIv ###qFgz3yOHOvhuMOKlsdVjvKbqszRKKVv/5vfi5aENh0gGlAzCMse7KarYJs0tDpH2 ###YpVCRS0665ef4IBAxnHYRiWdSxigkRqauQ8JBvH5cCd0YkR7YQru9Ck3FQN1wDJE ##
###ooGXoRFbTY5pe9k3T fDolTtmbjYvji1ps5YVUtEWMis0liNm 5uNibusqpiypVd ###kgqHfzEk2C/N/HL0jOGKVEKR4/3oXuGNgWchlVqol2EPCPjVaHQL9xHfk8WeLXfi ##
###njrHtBeAkhmzxc92DAQTsz9OoXPel1C9QO1DO7gZ55s42u29VDkivuMc05KmME15 ###l XaEEzdMVyh3925gDz2pt2bdh4QS QC 1jALQcLy8VtZ3jVc2C7tUpuKoUG5BVk ###A0esfkP4OM8xLVxVUrPaUh3yjGlRtmRPAfbEc02Si9WrNgso h4L0AOF67ldL4hZ ##
###G5F3fjqQJe/8t1Ztpb7SmMeTS7HskMEqEJVF8aBGE6TDooy4YsRk9uPfziKTk6q0 ###wsP67SzbHREmhRNdT9RqGGP/ Uov//5lURzmNSUzwwGOpD0HMcvtZQikL/lMmWO4 ###vmeb2dPuqVZL3OqSMtd8yPT3nN4NUSaMrr6AhSTQEIXyTgs9grzs8z7TmlZDrWnk ###aoTISdRH5BAJTK6IhKNcs8q9vF/qzcpwHMfnar4bIFwSLy0G4C9z34AH1AykKBPV
bK5ogmB4ak3GruFrDCG5sDW9Fnf9s8BO2 uoR5pgWI5H2GBOWOu3F ###jctSOMilQFgucGLgRlR0JS5j07JCzg8LZ2ANrunEdYbGREy86fPdhQXyIv8Bs8mR ###decoOZBHtQJx3 75bB mJvxQ2rvn56k6UwproaNzyBaIHdi PUxhx5zUeBa7PwpS ##
#StFohJdj53EwcnpGrIza/lTEVKbtqimC2LR708mgkutl76ZkGPrD0I89TEvPN/wG ###I9SogBNK7CSJowsgS7OBojh6gSwjO2w8wi4M9VL80Q85PPz5hMMzhud y8wn9yGa ###tife1afKkXJqs8Pz1vGB3T44 fXivRBeQrvifGns1OudI lSKUziBChYNl98NQfT ##
### MCmr15Kgs17Bz Oe6QaxhW6wdQbUgkLVAI6Y5CyUAEH7wF e3/j hbq GA/905A ##
###gPq/tbWNtXWq/7u6Xm/Wmht/qdWbjbXVov5vUf 3qP9b1P8t6v8W9X L r9F/d F
###6v9i d/3rd8ObADC4dGvWABYLsLb91jBXca Sd8NgeiKEruFq0rhqjK3q8qrf ry ###iLf1SgM6ntbjltnJbglLfLoDezydgHzB0YF/YG1br0NoVXfYF5fSVpYs6Wvmx7WC ##
###lL8U/36q/S hCuITZMF0 a/eWG3UNflvvQYfFfJfIf8V8l8h/xXyXyH/FfJfIf/9 ###DPkv mQ684GASQEeQjwsqkwvVmU6biFjwZ9beuAdfIyfvoriQ8lYgsut7sh9qKFu ###sRERpXVgyoSY4fVLojHJSZKYExZjnlg3TmB9xUfwCrMbemGOz55sRWXDiEmHnl8K ##
tkCifmttGuCiE5MUdDPhxbs07GM yGE2R07d53eIyXuNfVJ ###Ww8H0j7cLcrd8ZZdlBKIzb3RDHMSY/xgr5wEI/NxVBvmhWSgkPoXLjo/lZmNF6Ux ###756NxsTX8LRLIWEuf8SfAXU3BebW15MvzXMRuNofmqC9yr4N5iNNQPv602hB9tPz ###4pc/ebu5dzzXPf/OTQ30g5V7DkWP/zjzQ1z/H2Au8pHd9/yeHfp3PskTLEP/X1vb ###2Ij0/6vweX1trV7E/
X j/C/1/of8v9P F/v/n X8dAidk4WMzrQbfZnCJ ###A7nq2zWSZ3x3Rn6YgiasoOP4jJIpRU68qSlJuJHtKmWn3BFJwqNQHMwSXm/miM1P ###qm/ujZJrjYfTYjMlcwPucej1gDC6k2tPzgCcx0cso9pglDY7QGqaN9NP1rSPOae9 ##
###an52fmG3ToGz swwDB1N2RrKgJamUV4lUSy OKZAZGCgVw6vC92aKsX ISzhB Hv #
GkxfanPQdhXu5TMGt ###L7RR1FnJaa y1rQ8B2Bnvoev8WYc6yN1HT7keLYCZUIIhSHvdZEFjVbmX9nUNB4A ###n7p079lQIpVQ6rcGk8 J9H/p5G/FdIeleoLzYPVrPoyUdIxyzxFClFJQYmeHJyyL ###D D/xrNqfJGAEcuZyJ4hoRPdrMQGqmRu0ZQUIb4clkRte1t8FVWYLicl0TMOEUej ##
#dLpuAC22I8jyJxhRTQaSIIA4sMmPEz6vZr0kNNnB5wsdG7U4IzZFapo7w zLT5o9 ###6f4pB st13XspdVWUxaq0wrpSkV5V8hH2JHtfsyBVqEVCBQc/GQXdfqH52lkgy0b ##
###t 3d9oe9v3eotlW469kQoS2UixxPkCW0rgaj7m12wBJXQlSsrxVrHHOm4N CXHwZ ###VW KIerSN1YkylxGCntLRaTYYMxYwpUF33hJKbZ6niBPz6K3UdHjDErxU5Ixph6l ##
lnIDWa6v2UD kqAt5yHBtX9na ###vsLakvYC3xqUdmJh39icX2ENf03L58KIrKpuIaKqPCLScEDisbHBxJCdZSVCsOXt ###5H1FBapCxVKO94Pr9tX3Y2EPtxf0csv7fuDUxftRvB8v n7EehfvR/F aO/HTnom ###Smc6dbo3dFwkhHh9q5bUVvZf9TCYPNL1JCT9otR1SSaB8CHKzFkm72fbqkZ/GbOH #
# qKPcWEc Y 0/1zduw9jx8fYhGbjWUxAWfU/a6sx 896rbD
Jhq5cXUFv0KskaknaoF3Iygy8XSIbW ###RbhqicHCmjIEc 6AT3nt1ueZ2hQZGUsHxuYHKRs GfkuT6UUrapqra tNdeTKmWi ###5SuuBnAmLFDDspSsUJ9K0cCVsJGkVY2mXVZUGfb5h48n 9z6BiMp45h2gPa9dTUM ###EKej5crpfYyLEq3I1a6QA/ z5D9mCn5z87yiUbL812iC2Efy31qz1ljfWPsLlgSt
###1HWBj2HhmCHJhQft4ANPx0C38 h/DtLPWumCGZPhA9PlWNN70Ot5ikZt 9h4mTal ###VOisym YDV0bCq7k0Qe7c/
###03UlDlbfDAeDX/lo63ww apHb52Sb0e uGGSjJR/q6/U902UIUDPqDDxU0g8AZGP ###D465 0LCDohURecKeCT7PCR1WlNWrvcy9SgZx16SqVw5/sJmLCNt0CjnSOKwSVAu ###GRegrZVO1xuAcOeiYEcC0mA0unVuXKdH6M0Q1gEUf8TaHPLJtGyGYYlnIshIvEfr ###c1qPkjK2YckfKFcPrLV9usdENqzSgpUc2HL1BwjIIx8vSloXJ0rEMoTacBwahNre ###6D5jBm30T0cJJKmEz myVZL3hqUGytLhGseyG3bnUB rvtBYJriXEnYwN6r4Iw81 ###NjcOpfAzIgzIfPBiZiDMmqFHDoQJxzYtnFOwQdrxZq2fTZAKS3E4a6ZF9HZh/jt3
###z28gj7AJksdeXxUiFYhlE1L eb5hhjC5iLz4/YP2RcumHRAvYZqguS4mAIFqrgkQ ###LjkmqLKHzeByDCIbdx1kOqhVRXr7cHjYAaHmtzaVbkj 12zEurzP6FKXxBDe52PW ###PMY GRM1VmuRaMm4OTp1u7X/fz8CA2LsvFkzcBcEHw9YKIcpGYVCLpg6V94AC2w5
IwIa5AUE1KkuBHCCZqPvLuDyxUEnkY WD3b342EGSwgHW2 onHWr8/csS3tJH50H ###g0rKp6MOXgRYc sfuciX2iV5FSV98CgO9cQgiyATIoUTuVjTevwo5X NXvKEcIDk
/Eu CbHqaJq6xthYaJf63PxiNJqXB6LpR ###0sFYLlfr3IVXnoIk6M7xxfvkhVur603xjNbeNNb t1RfWS2newnLU9D9zpiiDlNs ##
###eefH72d OL0zCZNKqg5rwO3Aa517IeEyIgQhD2eaAB6dQJhvuKgIbznsm7tzoEfb ###RF0sz7fIoRUuOLZC5IcZqqGkY58BvWUWKwPSbXD8BnFrzGXv6WSkeLMBb4qvGQbS ###XxyhKHOeSbjrfNQ T/WGagYmCPapJK0DUmJ3NJm4vGhgWPVJ9Q3MxSMxvi983U1e ###KixiXypNGCI2MUH7GVyQwg/
###V9pJikLOY7FFC3CS6hAX8GfN/0PB5DYw5nb/WWoAZth/6xuNupb/Z7VeL y/hf23 ###sP8W9t/C/lvYfwv7b2H//Wn1/zC/RZhhJ8xlIlLchKlFpZJEgndiGV/VLzCWSylK ###lFaPKMz ui mp 5kvXAni1cF6gf27fvfc5TliWduKUHH8uLTYtqW979nTAuNjFOb ###ZjZleSXx1xalj AFZcVqotNwAmA1piUOBywlsmn961/Sn8C3qH HqVSV
#wwRqE8vbo5OqJCTUKXUKiNGbhkV2bqux8luJoAsoBGBvN6w2xv mXHC7852DMr0c ###ALrA9J92k84oDiN8rrKwY Bc2yCU2VfeNFBQZOZ7KP9tJuOdNlnj6ZOt551s8 lz ##
###/rfQ/xb630L/ yP0vytLxFEdDAbeGCjbyp4zQ3URd2fsuejGI4hQ7U2dPMmBo0MH ###BHjFxuMBUGOWtw6/Gno S4g0HY2piYNXfCYeD79HbS/RA9N6i OxH821L5QrmDRX ###PXRlt2RXds8NAEYrScrq9 6AsuTOfF6RmBRw49GAHLCIGPMyYs6YvDNQLwVkyPMx
1XBJfKskdWvEOLdHBWK/M83umb/mgfaeL ###gftxlbB/BYTe2YqUZJgJ711yggVNBcaGNVfulr5/ZzUbG sko1rMV5s ZjFUE5Hh ###2QH5vArSKR6NSYaksC6361bljDXRWXDHs116XVumAahGmX/FipTBz3fqgeBnCXXA
##YV0ROsDu LHEsLqSgSJfKhrnsSR0hDKfEFuZMlErcaJW4kStHBOxzcY2Ot8mE9iV ###BfY9357zzZsFhu onsTA3tF9VYpwZey0UDlaTOUoWYavHJS4gWqyqECWzC FuIrg ##
#QBNpX8ly5zG1uwfD7sMPzVQnejCzh/NgNxslAWG2rqugZJUiKJW7lzDWF9l4Ia H ###jQNPBDQusU/5QHvt/wnHht6ANRvhJu9NqwBKeQlA lJhv 3Ds7HPrCti6tyT0u/H ###H9slvJaKAjIMvPm0WxIoxZdYsVaZJRsmXTNPCSuVpwxPNA/
###zp3Q09UfuMzDRgmfADIhlRHVIysimZEzW9ny4RKGAqxWdPHgg bmo8x0SRkIv1jQ ###8Sk M0sTHsNikEzOE/YfTm0KLMs/NUuhmOncZGq2gHfGLTwJMW M1nQ4vmTFPtDP ###gpI4YjpHNFVGUtMtk5puQWqixcCvmuTEoox5kDE0u4UfBlMmm84nwzkdOf1hMlrm ###HTAcRLFLfipJ31T4tLdWFf7kAZ7s1PHDBKsp739LI1cV65rUt4KZG cISyn /WT5 ###j0qM2YHnuzYwbr3R/UvGf6zWtPx/62uF/a Q/wr5r5D/
###mHe4hnE4GolGnGe4A6qMyqg6K4hh0YuB6VsGj3KOQswaQBXFXWQP0mHHs37QQ3UV ###Va0GYRMfHuAorRIeaJn dKDdYOrh1EDjV9 I4ViByenAuWKvLs4 xcQsb18x8cq6 ###3a6vv/1lafVtfX25sQS/
###rFil27erb2 XN5dWy XyVtTn//l/gz8B5V5F6RelaB/MfGPTCpj01Ngg0YrkuXqj ###Xq TCP7LZo3pATYbzTX6ZaNeq9Ev643mL/TL2to6 2qt1mjQL6trG
yT1UatwRI6 ###NTc32UfN9Tpr1GzyRs36 gb90vhlk03W2GywOYBP55 srbJejdUGH7HRrDfZR406 ##
/gvkGi7RhoIt3zEx5DA2PC8TVmTIPnx4 ###kNLtad8dfTZ1tXsj 7fWvrFr F1CV1aqIuxp g56vlpJOFP0JWJLtA65HM4LOyXg ###AJZEhbcqXnAqVmfK6Tlj/gqFJafG3rR7Yw2cazImw5PjdTXR/X1aJacESNP34qPL ###L7lSKIhdU7/Asp7oMYZWPQmWiKehYkPdYOxYk/d39FmpVgWD508RIbnDdGBoCwdz
###W3 HaIHczA2/q TBOQGxpxCVOfPQXziTa3d6jtC9GgeVbOJC7fHiWuIqlKBj dmW ###GG/moPRuX93bwT3yQ5W8N5f6WawTEj5n1vNGwFz5vXuvl12ucZ4ldm8c33cHJ1eV ###nNn8WXtB954j3VPWEomO2f3Avn3/O7 hJvb2dOIqReYMrSLmbCwavxzXcvCEW5oK
###srEuTr7rjqZXUURHBCWhmB7izwssMWc9mpC9liM6LtVixsvWwGEYZ32Z6y5Zrdl0 ###JOeUZOYO696ZjEnZHGoyHjwNzVkT21EHiBCd29qTi Vgr3zZFD8wp4BgNphyHwDm ###0PxULFKXaGgWdJ2BW8m9xA40R5oBIg/yx92nlPfJi0UU6FOZE4tIygVuSqzQfb67 ##
###gg8GvhFpqAu8eqyeRBJeXAFSrLLyoCe7dufj7uG5RTMwT3ZLHInAC/E Bc HF1na ###1E8wZ8oKtdWqOlVWkA7W/G3m FPv99w2wflI2hJMAWcLVI3hxkYl/XYxKBL5mh8R
###Fny77MG4m OGCdQN2TF wZw WueQavIPljn5Qgj3vQlMXq9Zw ApsrtzrZ2zebmh ###7A5QJLb/pWhUHCM/AU6x4IT0dYol3rvMffnFlhhvFsyu hM7Ww8ilkjt0SfWlJnl ###ZZboX9k0ayUnLkb B2KxwUsvcegO7VG
/H7jTyrxL5Okn4FojgsJAo8njU hiMh81 ###mdgTVp5Sx0ejgEUEkZezxFRJHvNVVpTG8z1GqoIoNJHoVsesRwjJZ7aGXyWfOn0C ###yHME1l6KEj67kXpdvh5WeQ4df75a5lkJnMi70JlaGJ5AdvoSkwvasBZYZ9d16VUQ ###SDQPhQeo7MHLzB50 X3USJVEPnmTmNCJNN11uhosQ0qx8K1iW80m8iEUhWqnQiVo ###w2WlrOSpFN5j/F3AchclL1Rn8RQGAx/1YP41vxCFj3TcCwPvpSn8yY n8BJVmNNS
###gBYhw12ldExkqp5arx8ua1 Szz6uhneDiKK5vju59li4CSceIVDub9wJlmAeSJ/d ###OHcucma2sCww5Sg6ZyZQlCe98HI1O7Zim1b8mN9i6E ugzysnmQxlEDziHFVC6Nx ###ToshLvEsxxrFEs YB8GTlvbnE5hVKMaXiJUrGpeYDoqBErFUFSzVJbbOuXQZXh0G ###yBtn0H8hlp5odb6DpiWexQj9H46l7/zxWfqfQPBlCpmL4IOsO3fmgEzljUbK3vLC ###8/cPD1aVUt7df37AxHfAqnb/Rn9
###gQJWWerl6GhfcIk3rtOzJ6PRMGfwxT5wNcBnUD/s9gMsTHMUVdcDIekyGC7JJUfR ###B/7zy1MtTFzRm5c6n8vKXqIt8yt5U7UVBpdYgMU0Thh oy//xITBsMTpfEvkUVnh ###Or 8PGEoaNfzEIbpEwjD1HRJROa754JiTroQ SS9CGFo9Xo82ga2zq9Zz3OuiZfR
###dIbXQEEm3u uLU8dNxY9A7EmShiTCLuLqxryos0c4pa RB6H9NJPHh3WHJfvRByu ###Ayf9gyRCaz4SFkmEgNafPz91iRyzO6PBHZxH68Hatq4qlhMEsyFy5i3MPhY8Docu ##
J r67V6kf zyP9Z5P8s8n8W T L/J9F #
###FR69pkwjDaGbiYbH2prRX6yfaAzfhWu9jJwlRQXRUNYT3zRQ5tuhGqJetaoIe9KQ ###StlQaXwPA lEu4q8xLCmpzKSPhT5DqDbAJJekNYBfSpWgzQN0ajV LDAFs0mPhvr ###6AToYueg2cBKPGf
#F7Hinmosfo6INaVGWOE2/tRGx7MXtNyVt ynLdtqdFtGu9CgzRLelb2zwfi6zBJd ###l/USRsJfyrYbeV77 DyMur F3R1K5/wuGt
/tDIfJhL2JX2l8lu8Zf7ro9flD0Jhq ###gaNLggPTDsIHzB9eRsO yJ2HgyhfodlX o1/pzLiVJbrbN3RdTfuTzjv2/m0/zDy ###lc BYuC6mwogGcPsdjkmJmNaOvYNcLXhGATdVylo9zOLB2z9ErbftU73laxua6kt ###WXt1HF/1yQKZptU0X3W91jr3GQf3Mkd0vxbM Rrth4fwHgTT4X3cpTfTVz4dHofQ ###iXjJ2kovH8LRBITKdJvj99RISDF8FKqJKSLR/svuO7QaBJf9IWiofLdSh0CZmBRM
###O9Xf1pceQBGYctrVczbNTKFKnK4uFFRy2WJDylVu4zia6EneWjdNzQrbEnVYiXN1 ###4xG6nGGc3cBLrD2tbkvJ3VzTfmtBlDLa8OLd X4bPUPDs OL8OTgoL1/wcQxkzLm ##
###u9w lXNLVLiv90Ogm51P wxnHFnksXfTu76xCpMJy5tiFTDFbgUR HZqBzHRcHB4 ###vBeeHl7svgs/vTu82A PTw4BtwfodHp4cix2CMNRaryA8VLrhctgbY6z0zre 3S4 ###B/x9/5fT1nFb9l1esSWnT7n3Cbo1RMPCKmsjHDa41cUzsZPZubitE4dTbaZYXs5U ##
###9fsoLYnARlZIjL0MyOXusL1JKqBw6rPBZcvvNw2lTwWfMKazexXOQAmUMyVDxTRo ###nZDIrfsY1QBy4B3uJd6YOahyCw7N9A6DIDSuzm4ApiNsK11zy7ySR2/ytwTtBxOK ###aEhuAUEKD1NBMjhYBuQzyMl1SFV9phZkKkQ6FNW5uFkWa3NdjsjiD6hpycTWTxzF ###FAldAp8t6smreWYJ/AlwPohRnxuJOBVYoMtHkKGjiTdCY576a2eoNFeWUZqwSHAs ###swboKA6fsSf6qEiz4ifDGMfka
###zF8B36u Wr icrr8O5 w95oxZNS0XtWuQB7iDbXnWzMwRdzWkmM0XxlbcV1nRjl5 ###l53FBmAurCgum4/qUuDotSZvUy2TkwYPGf/9elH/4SwhIg0Z1MNMdCdjO5AvJSG5 ###2tpBYE6s9moTPcaZ22hxupDzIS809E6FiZ35NYI7maAphEJkyQ3mdaa3aM6Abh9S
###ZQ1pfn4Nl 9lhtNRT8 iBJoho6PWhTQW6V4T0rGInJZ93w6W0QAIvgMAQQ4A3/JN ###LKmXD0WU38fRrcJYc9pLKzqzruS4eODyop8Pu8lmBCrrXfIOTfGE3T4Nr4M yicV #
###hk ec5x0DBVcJF43T1MBT7cSBX7ol44EGN YFMNjh/4IctilFjx1FbtBccXq9Hsj ###r5SArNnvDv428W6i0ShmXtsgpoKY2X9MJXXKb4JuNauZAKvOjsoDM98BuYvqfZBn ###y63lPWlxFj3gzlUZVS7LgC3LQC5/xbuFr67lR27GFn4A FVxvGU1DERDht0tk5DM
uAs ###RDHq2YZMRwFU9u/T0cXpZ80xy3vpwW88NFP9/CWji97gqxKVpnWFZqlhJ qztK72 ###w08g6DAbhv5ky20CPz5qH6TNrWz0GYnlMzrDh OY5WJiweD43cKFPtIafVfToWai ###hdXOhF6vpdMffDtkyMIY6C33SiHC0UCThGOyz9m4EfaG xgFReGzyL6BYISiO8hA ###v09BJJLmHRUQK50DptxuuusVuj3EzZBjV 93GEqqz98dx6iVG3w6DICQvR4KsizE ##
#Ab zk5kT3m67oubQFLymnEKvbaKGh6nkYYJFUiW TtnY1EgVdKWm1FL1Mh2DZV4b ###Rz4G OAoZ zaSCIvhSVHpF96rJUzs9SVM5P7CgZXzkFk2TokTJSc8XTuhBvKkzSK ###0HUby7xbKKLIUcIRy76eiSUXgUGDw0E3fiinlYXUx6f75 yxNmGGbrX93ZQAODOC
###w A3msrR8B6z9/Tjhx6aGlwIsxNvkOSMCMBEYK7UOTgiJQkLOzBZhUKUVS2rIp05 ###xjhGDQKHkEZ/1xiybhhL5cMGSmWOslWnxtga5awVyQrREoSoco0cYixAgOZmFZhw ###3DC zGAmH45z2YnRmuOWy 5kmgIYMHIZa0qISASe8p3Sh/JsPjafZTkj2bXPDExv ###qS8x6RBeSpdqq1CKlmwhJc2Fz8huOHoMv8adyXCMJ5sikfIkofbJ5Q6dcayqUaXH ###sYCaaiWnm5NbM79Lq0OO9NxknY7MYSLjVhJPsllRNaMGga68mPm37DCHTH7vCJZh ##
#F7nccgrK7/voof37 CMocbL O8 ym5aQRMXSiL7e0rlgZhtnVUmhDerSlQOih5j ##
###WYWjECZlnLeubLjSi6TsVTLHcdYbsWeQVWDEBZu7BxG9o86 UmD6Zh0TtYaMvvT6 ###nt/SWoqzQM3jzXN4qwBx2qA8wulBovM4RL3W5RuJIr9JTjuOwjjjuJMWMBPlSWNU ###okAhShxFvlxAiwqfmfhkHgkq4DmVcbQR3tq1cDiC7fRn2ourWxkyxdlGKqq4uiQv ###JAaq7fO0MXdhHr2uEet3g0HH7zVUYJx0 9wJV58x4dw8vsVnTN24Z2ycd
/Zl4w5SaS yAJF800AyW/3ZI Usb1DVGtBv/81q1J7 ###OgmlijbFh1MJ7fR SSQ/fOUdRePrtEWWuIpZydHmgznrhfRa6lG28soIeMLqYmRZ ###47C0pMm17GKeLL/khOVL4yWm37qzW67/lcp56xvrTC7Z5XA66KJhkYXi3ymR0aby
VlYvDTcSKNFOgtZ2XPmDk G9zHbqM/ b3v7bf4dMvgPPv ###f6uNZr1p3//Wlve/y/vf5f3v8v53ef 7vP9d3v8u73//vPhvxYeTsvddsYgNumNV ###4jbS215H0MYySvzf7bpXgjlG60fYHyaJUsXFYRUDVrV
/un MPOroV/Oa6GTQf2SB ###JPC6R4763DWWAqc6t7GebE6O6emhDafU9AgehHDWdIxwicEBhaycxmPWbmslzxok ###yZyZSJX8bhssjz9xyVJOUSrVQJKCnOvFn1Gwtextspu6qlKAwJVbcC iqbM8ifi
n9M/W85BM d85 SSFPMMssx ###zT6KdNI1//sm/t 9iTu3PLzzK6hhXb2uKKnKLMPKm23Dw1ALwmf0Ruofw26 Y42S
#TMIuyzGLX /Dy94ksac5ie9GtQBhHQzvaoGVToQU65AtpPUQaII9oTHO7c/hPb5e ###9o7 O7FmgOkmMf34ABMK4BcEX/7Q7X1FjFpvnY8NVI7H UU3EFddgAnTV/Lpy1X3 ###ttln9oZYWzSI4mf261hJuvyCHWzKhhWjmXb77GwOnBahKeu54pXYYXQ7I0E8u7yb ###3oXJ7xztJQBozDN2vFDWgpO9kYKC4upZc7L9l7yKfMejcFbVxN5KqMDCDcisJLIq ###tmpYTKPIMnR7 8UM sdmb5zirGmAF1C5bwLEDF09VWgUw8SdzmptG5Bb6L00UYLO ###6RhYssctfTWw7fsI1P8HlmiVr23ZOBflmjonUZaEB6toj84D1KnNVY9lo bL52hs
###X3dUFWEGAwZCWTkazRIRmfmplS4HPJWQWE4jG7XfBLR jThrkEOpDBCxoXF8jiXK ###M45wwBCIjjlYIEo4eKKDQMpavIZDQUL6Unmw5lVfVX1KKmYcncocVYFIyVWCooaD ###47iPLYXuuNzlzlKi cELkNVqYzRhvI5d0 FahR8wuYITQ1Zb4x7aTo0kXfE17t1s ##
###HDRjTrE55Ao4i53Dt5UZM6EjwpqHz7uO6BYMvSwpxdLlo/dHPB5q3Ijbr1yOlPmG ###Lz213UtHOafUWdVb1YIjaxzTcMYG/eF1SQKxSlYmXv6IcXH3FnEM5xqP1a kz Qm ###WHzg9AhJ2URyNxxiZdFrJXUsJXGc3pW8HY51/ijDdFd8B3LLKzspiogXbpFC6WZt
###O4WKhAmXAJHH4VNM3NHq3gNj7/6NEuGWGBLuSaD340qNo0K8cNAD0UnUa40uQd9E ###fsuMOMMrBqV0sCGJhDxTgGDvdRFWsxinmEktxxprnesw0fqV5wnufsNMzSjxMimp ###2F01CtnyU76XzHFIC0TRPAZx3KXSUvLtLCahTN4BOHsCQnQAXahi4b2AwC1b5x2Y ###JrZKDdJXGrDo90O89exESVz2eq/iV5oYUFEzqh4ea2H6Ymvrfb9BQuO9KwwBvRTg ###zLuLBo8MWz2JMCrN/BLoMgtz3AFNBRSLBMPpSUP LQElADd5jInS8C5Ih4jDbKjX ###yhqs2ajWeyAxvK5khJxeklMgHNtwpt/H3vVwksbRbPEJDoR7OjBnb9SfJuqsXEBV ##
###FexNxHvSmBAgzBYS8UJLU9y0JN3PgLessV5KkpBKUzOgZYcd3bO5pB6EWWDZT2 2 ###nn2gI22gKs1gJmfKvGMBa6qXmAnIuC0IzDdu3fnK3ftG4Dlwjzsjjarep24EvM 5 #
NcPiP96 ###zmG48tI7RZnJYzITsKKr6YASeDxjRhQ9lpWUKH3AhDX0QGCRZon uBtfTmmeMhKt ###vXveuth9F7YP/3ufIs2C502epTVi/Dbq9x8ZlxQISAqEATxz9FT5Og1bgyjEGmPk ###6Bcmk1opIz6sM8Y0qKLVZ 90P9Tdzekn
L798iAJb9/98aRIwJcMEaCalK1Z1z16SDuXJxx7ahCiK34cY/h4 ###rUA7whmGZHmwnx0XvuFqgioeqNzq8GJoJs3xBnMCUQThRxenmI2QVfjTk Yfo9Wi ###T8UoFTFii6XG 4k7gZByORrHX3vDaeKJM7XI0PjSkcGlZTA0XsEyFm10vuVxlk0O
/N50K k95rpHKSjK7YrUnOyqm7UiSjJV6MzgPv99 neguwY6UeOrQgvqE8 ###X4Wf2eJuWV3T3nle13VHrxvP7nWDL81VaGTE2Xa9oU9Q50A5L9XN9hv57TlQnFcp ###QhW1R9oGJmzDo/K2rPZ1velGTtON1AXdBQU7q1UoUPbW3rEgUd p6003cppusJ5X ###rHziuxT8bqYQZ86F6uKXsuQLbUOdx4kQ8zHJAmU4Z7900fGVTxJ0qw0PPyhRVDpP ###y8p noqjvADW7OznIoqboBiH3eH9INA7SiVq
###x57w2IGpjqPBNXkVkSOUesdmHSIK3G 3lSXMTGqhvLBmynJvtB7WHJxUDfmUBhuY ###s9JrxdBOFz3jdNhiE07bP3O Wvoalj6UX11KZ6zL Aqz5PSHw5EKf2rAEnuuh0wu ###xPdC4BLXg7irrkw5Bdq0GKjTTG1hed0qXT21W34YIpdU7W9a1LDJPuvk3a4h0On/ ##
L4xYb0z86GFjwXvOXXfdefbbK5onqo7UCitzcSIwBsN ###ewNF1DcObEyIouHBkUHkEl3RsJJVev0DXcJXkC76enJDLjSziksjrL2U3AzHkwqa ###D9AcqarM8pDf3rZs0U6JTecBPdyC2nFp6SfcLULFdC1YFZWQWEyS8cTnT7Zmoty2 ###52kpNvCOAk0M2yKvnhWkozRatRgIQe1svDXH1ToCXfFnQ 3KPlTpsWg81wTy2ufN
###T9iNO2NggFh7giZd8l4IhOiCVtkTd6OanbRiST/GXapqytkHJXmE9jyNAYOo9TUe ###P2JOWS/qAzTdR4 8BIrparZEynQ1yaulysZdDQsKIernosYBfQRFjhZ31z4LAi1G ###TpJ377I0dJI2V91LtDUvlaZeKds6LvldMMtsV5j6AzXJDHqARDyFKDzpDu MJF7a ##
###nLgl1mX7Ke0qKQRNY4 2mWxDD2F6APtnktr4e4NurxMn6UUabHTd34upFfFDJ467 ###CbVJwTUSHDhJbY24ZdYieYrHhRpxLUPo00drWr9Gdk5n0gOTc/b0s IS MetbcKy ##
###mFTr1JlnQ6BKh GLTShag7W1TKvnn49b45daFraxyVOwXZ F7SxMs f6 IRphDsD ###29goB9sL/yevUvZ3T473bEszsEFimmW0/6CUm8Q8sIguH9BHUWWc3 MuxLgR Y43 ##
#ScYdEktIONcN0ncwxb8ueC1lhlsUvIjJuGHMsog 8RZmY8YtzEb LczGn3QLo1zE ###4BJw8XV4ZWAchOTfYoqTRxnIwxxaNz3MEA8SG8XFpzbJLpDSY/J9tsnrLF8K0xST ###4ztBThZO3wtx/
###vRK2EgI3hTaoLJJKexweb6VPw0vHU/aYwjHYSYV1s4RMzSxCKL5OBywvQlcNcRRG ###4Agzh1f8LV51a h16PTpXdEjUkCSyXiIUaGD4VTXRCiz6WUcD2DePL5ZCrDcv95i ###nbmOlEr4np6J07pCkUF lGC95jDZ5LqXOgY6d/TsypRnBA6I12UGcfU6QQyR5Zxp ###96WZamb4vZtXNlYDyR1Tp3cWfxikhAz7nmRqZwj4E64dRVCG8Ee2I32UCggydALF ###XMYJd9AsgKE8AGfA7X5VVZrS13UDHf/VUAZ3JIOx9Ojzd8UdlYHrbaCfF2XLioDq ###gVmMU/zQLcBl3IkomRY170cykNO8rlcDVGbP38niZvaRWftPRqpYd6DaHYUdKOqg
###hcB4JYcvzD1kWUdGGcuGqEpO5grKPARcJHwCCk/P9z8 B4OO91fNml1ZAl2aHtoI ###uARUqxipmNJOjhUioz99Su5GlkaYBVv20meEj2aMxxbakiy1UNLc4eZdmrJ e7zK ###Vb8MfToTFlWJo1o4jgDYzCm7H2CVIx9LczQdvkPKHqxs24O54FfYHmO8aRdvpVo0 ##
###coZ8IadfK0YRQ5hg61LO00vyh2B6bYHsG/TPFkCESqqsiWO9SdYzAveVA4oLg13j ###TabQ4ptyYhlXEUgVpMGiCmv6JByj52VvgiVT0kwnqab6r fOoWg bzGAT5vuoq84 ###hNpI1g0e0vn0qzu9qNF3gvVJV3jFr/HKRqqGNPTZOCndd3ccyPfoBc4xic7ALJMK ###YO5Oaplo3dcwzivCYHreQecGd67FHSgKV7xcoyIzWt8sbKTMlVy/SQ2Ej/OViD8w ##
u6aUSnx9VOkuzY4iGdiW7il1N4oHCWNFYzhIKURWcexwid8OsdsW0HKtan3b0KUJ ###IZS9o8YrFs5vS1O6Fxa6vm1Dc/pSpW asDgXQh2JzOBUXUpNWCK9QzV9ROSosQpT ###4W8VL5Cvq2/xdDapaVbWy8Zf17zAORbPfUNvweeizouSper2WlXZ5ScjO0fm8Aqe ###3XW2cztPyoPmIKuWr3buqc6hdohHZp9Mcj1hpcwGztRw gbbVQoiO7R96Ezm80uw
/k4dq5GgnH ###iF6s1gFkE6lZ6 hKEuzpeYzKJivU0jgp2YPS/KGKldVU9N05YrXETM8eUNtePF9V ###Ts3cIlzTTEFk3zk4FLKDo9YF5hw/ XDOlTJ4kWn/Zuwmt7lLu9UowskD3EiXKVk6 ###Evbggqv5aUyP2KLWeIf11N6nWgNOt7XPKliG4cqw/zoMspQBS3/JsAG7jcA1l/m3 ###gJncDYNuFC4Kuf1WMdCz7dff7HhNSfs8UJOfNO4YzSeYiK2gx2rm3bCllzyNLTp3 ###oUmbQK511yWzAc7atuP2OM3wRhz1N/w/lRewIk10mqCUC7rIoJyefLK8osO4bYHN ###QTGPuwzkmtAaCeMWDe03W3Iu5q0isrL0sNiI sJrmVwb2A66UoEKN 1PKG7C7aHx
VvHnmWT9NXdGygtrW0N 2 ###ZhwF30zFWhw2erDDAtUeAj37wve2LBPIpre W/m9pty7ZDxUFPyMNHpOf53UAKtH ###1pbkBGT86Gq2bVa ubGqGnUEsav31YpvimFLjb7GiB mzxn6rVO9JY9Sriz/WYr3 ###QpXkH0wpPMxiYeSihBqbXsNFCcZ27EpHVOVNWBp CRAlxo0Q/x3457fn1quwaldI ###I0RiWyGo6pFidmD6xyvvEC2i3ZgX7/nKkmag1Qmzot0
###75ZnZdGmq/yy1 s 5GTU1hL a XVvuSkxaZLZj5FNU32j09GPY/NTINc2nrSX132 ###MZfVR7caFTd3mQ6g89vodCtXrnUuP19sHsownm11a06sZdvIimCrqIfobKvebAyl ###7b9lxuRlZWoUSRqRRZzyO1YM9ul1u32K39JuoIsLVpblu D1Qe7lN2cYHoWS69KZ ###
#vTsuzlAkI4bquoRKpE3bl4GoFSXGkERGLtGkdIwrbl5hEp/vPjhmq2gZPVXBwPBL ###RNBWrrXdEuCyLe7a4iMsa9RD3sLnvKaSgeMtUyi95RmkhKO2RlKi1y9PDpcSzHBR ###OoeubhBhyCtOXGgWEKnlz3vlXaitIpafCbpR8jUriTJfFbcQLUrJeL0snPnvUTjz ###X12vYCtn6Qa3IkojryhUAQWCdYB24qUqsVQllqpEW7X PUGT
H6KAmfh6YlrSFUF ###5e4iAqbuWTcrD6IibM Su4vc3ecK2Co3dAjW2u/8cq9USOkBPBVDjXFFLCVwnydp ###E9w0S/jm6aVHKBeDDJ7gHTvebdz3Bl3bjYDjqLI9OwU0zKCXlQGaPcvVgIzVMMGO ###ul0GM kIwIJEkuRcuLNzW2ZNp2LOoUKAzwP691byTBr836Tg2cE08 h4s6JT/s30 ###Pl1VeIrW5yb1jC5d9P80tfEvU bdKK8L8Awue5Ok7D2EdFFHT mz7sVB1I4/R5dJ ###KasKlxQSWQdvTDcQM0pJ6hAIgnDulWlTp3ci31Py zQax1qML0ENIMIEKponlsYG
###0CBGUaO8jeMR41w RsH1JljTMdZTXCAAb6CBtkjpdasTb yxeLsCk0oTBXxb Y/l ###vz/zH27xyviq01z3m6 RpF5f9R7i7mtiOkenu jb/arzvDGq8K/ZrNNf Gf89ZtB
###u1RBx8kcxz16B58N0GwJkByigDiIJ1572OnFWJ BiBH6T4mSqtcTIAOyTuIawOGM ###q5yWIoIzGuPYHinANGGnZQzq1xjIh5UauxtO4hVZcqwLYH8VBEvISYZXk3uRqBKP ###ZDnIaNxDAhsjEQ1WiJyShCZ18e6w7bVPDi4 tc73Pfh8en7y8XBvf8/b dW7eLfv
HiBH74f/ f/2 rDe/ v//P/28F ###H7aOf/
8u49PT7CXT4ft/VVYqsM2Njhkw35qwZgf ###cMq0RAAV 6gQbZkW0js88Fp7Hw8RbNZ4BZa fcjJBH5qf9h9x9H9amVxqbr/T q ##
AM8w7X0/52puNrDySOCHbrI6bw ###FaajqykoH3q1AmS3l9A ZII 3rK8kKv6QlmmiNUEeigbO1PfEmUJa3pXnjF/zTAm ###2oCseSgxEHcZa3zxwvtP0YAupHjEeHQFLXEFQeCFNubIeK2YeQ2LzHc06d1hxg5R ###RoVl6gWu5FfRH8AMoXehiRNuWfvG0MV3EaBMZALQ8JSPxWA22kSu4eklaYu4j3rd ##
###Kg96LbOtSbMkuye9jI1oVRGNqaHKq6TMwJkzZ9sRupo fuPVAqf9nXfKh8NPRrCd ###tnxPSRyj58fgCX4qdrJuMb5nZluR 6wiokIrNiM1egGEbbtYpp2bRqm/xbaRSc t
###AH8vSXlFI9qC1NdWcmPrrEtU 4LhKQkTEga62pA C4QRJzbJukKLanix/ZZdcDvq ###NeLxnzIMPtP05vom6l85s6alwMal9NTQ5v01xN9/Z7 nSLothhx7FVBYRsjMWceY ###ftuKrZKQ4shBq5Seg UMeGeCIi/5TQhoTY4zxQMNHDwFxcEC8nsf2pfESUrHgwKn ###zfWKgktDCRs/7Y70XKoitxUiDx85 5i15FztdK7kQVQUIF8C5BcACANMNZwUB8hV ###Y1p6raWekqiJKeRvuXdrvJghEjmPEB7djNbJhxXG5HtpAg0Xl/MzmKxLPsT08xyw ###rWIFAARpzACimvLaeaDwt3KCavXXFEcEvHWz5Xc3k2BFKWkfKiunbE 0oNk7tIzG
Z3bscDhKnu8BMOP vxZUA P v H768v7/
###gK3vOIvYrqpuOVkCbjGLG7A3 M4 alFJzuldma8f3 B8K6qH0Tc1FSK8saVGmDXr ###JuFg9BYjnRA4yWy5w0E 35N6rKGD8r8b9eCaPZd6jp5HPujqKip1k5mDPWdBraJy
###XHRJPkT83o17wWgLo3AwWNrM MEMF9H3 jgxG4gKzfzkBf/jNyr 8 gLoCy7/SoP ###1Vl4nwHjXxbq6plBX4epnDy80lH5ZPqCgXlVdIr97X/t888DnmeZSscBPNvsmjMN ###8mNPB1ikAZ9XRBE2JRpURFYCkJ pKdBY lmQmCRg1k2AZMx8W3qGbwuDztF12rEu ###hRPw8NJbj8V06pdZDFJ4blzt0px6GaX08P5tiEY3gYpasN7cIJ8yEAfuMfQbH16R ###bAByiMepe0iWI5A/yGwErPayH99hLVOMXk7dShBihAsQ4FfXa831ZrCxiZDrpFBi ###BL76P6iaKA2VqyERb2mG1WaEZ LAytq8cVxqix4r9hpm3n Kd7yMd5YBoH/p 5/R ###OGbuTAsIAM2//wka6 vrdP/TqFWD5noD4z
###LP3xit84XOCqnvn1ck7MJrZxDDPvrI4OwuRm5B5MXroN7ytX4/h3INDOY8bUCswq ###J2NtOlTEaovfmIic78om71rGuErEI5yIIsmwhGytKPdncCqP4q4rkCPdheyfG m0 ###w7LplXZhm3bh5yEPePC/zMrX5h6KtmDgHktsjXNj631miPsypw2sQz6fvnMjCnTv ###qq6pbHJfnmBuI96Yg0Ar4to1pWJD9aO7y25kXoLrQ30CekDyvIqy7WvFLMWZSZdt ###eu1lRpQXGIqRVf7WOGCnE2tair/
Gg9XCcd6g6fRcwd2dDmDSL MdNvv/IA26Ze7G ###pEKAzIzjaTG2wum4xCF6gck9uaVRvS4dMOv2gFm3McjcGxgG7rRCF ARtIwR9I11 ###
###9zkPw86oP03wfytwgAEb8v5r979W/iFdzV/Phl 7y0TmKStYSPmxQC98DsJYoFtF ###XNldjqJkgpcOh4C7h61C9jV2DZPcTW7wxmqruE2OrmmKv0d6TNr8G8 Agz2lVtOt ###oshN7bmuykrPR64rl5KQyplis/PhINuhwH6X6QOfnReZa8xSPcvClswyfjneyLZm ##
# cxCEngJmHNqn6YMCXvY3Tn37lDIKcrwPwx z b5eVpSX9WSNEnT4UFf CxsT0ck
##LQ1kZ3 fkf HahGTcBCC3Pe8IhAz7n aVd 8/2lWG83l
###/jccTcaWOfQTTIUbmw6AY4enhxe778h49 nwmFnI4X1sZb8OsERwRIdotWZ6vNFF ###5gUZDDzGeP7GZ2Hhcr5pWw5b4VmgmNaKvIXWSmYfnvUWN23Mwej0WOFLdo0g8pDH ###k453GaHQAuLVQXptMPcInCQ8Pd6mHzHWJio8859ZyUfuz68/6k9G4V18J2N0JPjR ###1eTR69zEnVtnrhgx
/lsdAMZYEYMgYJoBRURxGBktInXzYZgL3fvsKiSmSuZmpU51 ###9xftVzqOyqqgMKMuWhyUoCLR6IDqIh 10AnVS6K7UT 1Vsp9hjMnDKxJ7FVmIo/R ###rdhr6GGKnxVjfDQa9R/DpDeIQwZgSbYup2OXPb/sppTVdM3fk3nDmyJc6WT12aSQ ###rLlJb8uYdG4zmgEsfWf0mAF2aTZ5VXRXaNdoFA4N/3kJTf Ih1cllROsqjhAf4uM ###hcyc rOgmoGvBfQ9F5kEs8kk3RHI6dXryYRFMMc6x CNSunBUPZe0DFWJhjKMyfs ###aMH3O4yq1K73VTCxAP39TQ/ApAtbSg1/hbYLhHR4ZdRGVg4tI66VstxoT8vWdzMG ##
#xk3t9BFEopw9lgV2pDA Dx0VSL7ynzz5yvEJy78SIq/4iDq5qM8tpLmMMt68NIiW ###KubiBp7dDPtdMsYyVp56jagpCKQCAdRmrm31VRNWsKGljFDb62kbFFXE7KhSfVWt ###1llfhRH47CGpLtK6Zw6ZkN4WUvl3unPeWMxo8DOfoLY7tdmO469tufRcOpk19qeC ###M/Wb5kzZffyE RHMWkbGWNQnevKS bZWerb1LfLLy7r6lHFwkzH/NZIh5GaGAyjm ###W9lKNVBOc2yp 7IfXdNdcsZjNJgMp2PWZMWchnhF8fcqW8t/FF3n7gC5cyntjDWG ##
###VmfuQjpCtQDOWHIte7UsdQHrqb4b8 hDj2WdRSrO1gqVpM XpXiW9X U 38Uod9H ###k3Hv4fkFgGbU/6nWm b9f6O6vr68/1/e
jicpnF8W7RHg8PsvBqEjKxqDMvn IPK6EYVBfB89UAgZUr5Kfd8xKfzL ###X4qttHD9OGVptpHqaDM4NklGnZsnY3Gc3PSuJklhLJ6T6MdfImlLgpgsxvVDyfrX ###y8zUPhn7ZfqTFbWbFpbnpjx8BfMzP2iFGrbo1gfRThcsZGjmt6Bsdv3p3cCr4udf ###fvJ fxTufpF3grB6Fg0Ysu zhKsTNjoBJbf2vZqBaEooBLXMSuUsDTk1S36IKuU
###HrfLs z7gHgTR91wPBzelYuBuBcnPcwDgO/hawv0tMw bn95xnH7i2uTiMPiQVYJ ###enpYIjUreN4Kf9Ufddz2ylhYhQ5dDmHYH3aifjld95A/yDhwmXNJoQPbPi 5Zwqd ###wIMum2/
###hXI2mXcU6vWIfPmwFjoEq7 LHkrpU GwtHv033hg8vnBuZgWmOO/WYermIM9Egda ###mxuezo4lykQx0BATcvgJUqquasIN7ANNyKEw3TtmdhukxkvZTYpSw3fMlDVkQ1vm ###4KBV8uWMBy5kPPCKXgalpq4fhtDFH79J954hgbW6v6GpUfeOKrJCssOKGxR7sbbl
###zSps/UhbsHSxhldXcncb3AAOOdeUTWKjgz5zj2e9VeUv5r9l7vCSJFZc6FV34ZIF ###7/mg6J5f9N4PCu39nGWBBczjBHlv/6Z0kP/2N1PDDLiGyeusjVLB2LSIqNpnCYZb ###RdGsiMb9F9nzhdXyP23/LGzTf8eNWGznzd5owsFQdJ61m/7iW2exO2dFUxS3dUZC ###xYD Dfx/MI2Yo7TdkxyBZuT/qDb9dTP/R7MRLP1/lv4/S/ fpf/P0v9n6f z9P9Z
#DtrY6K5c2oKz2t0QHLeUxuY3x8UpvhcnE5kthOfMSKtl8k558TT4tpXeotwyU/Wt ###90YSAnzjNh2lfjWfHyXjwL8VySC0OvaW VtM2W0GT3HD4rU1vojl7lOUrWETZ/3D ###19QsDXNOi95b1wUKZNrhsqaQmBtSBY8C2Af5RQn0FAANB9cVqjCshNsbpjW bmYZ
###TolrlWCwpiQWz5b4qtoWLdNUp A y0hngYCWtHD49ap/XxIPy9kQcYtdCpXDzvYt ###b856oUI5ICvaDmgcD6egfaEGVnnrnVVF6hi1aMP0kjRrr18Q48YiZmUIKKVbbDVd ###aJixmMGqvehtTM6RSjuzB9eKdeqn2S0i1nrFHFSuzNpa1tbQbYqJCpXKG/AWKnNH
###t7T/Le1/S/vf0v63tP/9efY/USzybNfz/Gr6tQ1f6 Tp39LFJGZaijwmRAEbYFnq ###Hr3ooWckB86Ws0qKuJptyHnJ8qwV9rk j5Npf8LDmDAb3DOC2TQpPdsE8ZJn3isK ###IuoCzOPCcoXjsQsLT8D7kqyX5cJ2z0MydlKUBBwFAsLvamtCQsHk05ibpwiIn1h7 ###1eL5vW1Ns211WbYmZjxeeKbljECPOQzcahgve7cUf40Hq4vLtMxyLPeTGzvD8t3I ###D8/gRIYPAXywGrCU4WftnIqgoCn
/w6t63/R3m3Wi2fBs97NX5F3hvcoSpJFgCJIQ ###IsKZqVc4Or2gLGNqVJfWDAsjAg tIF99u6145pMRaDjyQNgcO93aB8wWNfDeeMLw ###NDDMNBx5wlJwJL0HVesEkd1n6OdLGSFRzC8aCFG/PwKgQdXoMO6eYxvjLnU91PED ###l0/
#J5gLOantL31DhEA5FiuFRzRa4GJxqxjwKIH73aP/xh7lqPQuvFNrbJlNSVIu4S9l ###r IH1HHZq1W1EZiIAK9USvjrGnXg4hm8IbCLCnTx4oX44c025R/dki7y2MFbMz2l ###OyZmzRUTI5BqGTuBbTAUvNvfxWSIqUvykcS0xAttUZqLvbZuD93vBt15BnSVLPBs ###5GvLzTk2nZRX3uU4jm5hV5VB9 2MyTBztovVYZc55f41/T9ZoQ6e8/WZGeDy7b N ###at2vkv23UasGzfUG5n rNepL
/S/ru0/y7tv0v779L u7T/Lu2/f X6b0fDe2 n ###B fUJEa2Oh10IzT3lo52zs9XWdEzePEVPMMThzKTp4WrgcHwumiMvWGR4THmWhjr
RdosCC e7gDMXy4tppDtAyKmYnYDL0rqIx ###L9veozo3WS6zaNZLSZVTaXcYfmztzUus3p9FrMJw 7pQ6ZCPQxCLvBYv8 DtwT7X
#FcOuMG/OT/he7256p6z2kN1HUa6zhYIIc97dOS9 93yAKRFYRkYyCYEcGg0mFaEY ###DEfxuHDWQUWEyZS5hajtiKDolb3eBDMkAroO6cMVupeH09Eo/UJ6CxYDnqTcUQ/T ###eGAcBjN3oe801UyiXxyhGVyuZqVy8VwJj/aPf7545wwAkd19pvsr6501LLDJSsVR ###MeEte2fKTRiifatsfA Uu6hB8jvjhl5y3D4TzcVHV0LcJI67vN2AUSn9ERhjXzgu ##
#K4s5Gm6Qr0eUTNBHP 1NRdSUN4PusNgdPv7s cF6QymI7JFVuIdpAiegQT9608Eg ###hpM2QYsl6tB30eCRuGOvj2p1iantyHCuO51VstZOhkOvCzsdt9U4jvo9FKBkylcH ###jEDJylLJb4RT KYvlvqDaFEV6Y8dIkIbyMIop0y7QUqW3guv9nRpPq9INNNC WkH ###9IjyPJALyvxMaugNuFMOLyftPUPId8Ehgyp4AiBm
###uoRlu 910SQ jgZJT/NOma9vXpASq6j2oss 7OPpZHh1pWudr5Kj02zNs5xdAfwp ###OqmijI4evUF8n67Y1RiOrdRvjJPoEwj0tV0TWpAYHRnML p9G86UWWXuCmJiRj1o ###1Ob 0yjcd9Xr90kW0JP8Pakq4gGmdx2JeGPY L0BUA3QpVbt9JlVEQmfmEiWbyQc ###ibQKjysML1KrntxcZYn5QsUftVkdY7llL7mJRvF8kzBgprLNIfWThvnPAlzINHOB ###P9d6obE3GmdWHy7h2q1hSNrq01ZuxhqOSXiJr ZYw7Jqc3wSQjQsnI6HeNAzkaaA ###N/
###aKZmHkXSdpQ69sleqcaBS2VKtzIpKpf gEv6wuOOUe/hnrv MwXKHrIvWRVYra4l ###OBXffiYgUp JY3vEJSG8lucZQiYGyrTT94WphqnGEXFycr1Nc1ozekkVM11 gd/T ###fgxtTu9PqGyGgK7K7krqYoe2ZLxoNLHeNVQo99tpIzNvwIQThbdFn12FSWDGklK2 ###jZV1RbiTqqMrQEZ8emqBdnTMyGJ2x4p anRsv0nZ0JPJEB1vZlOWOvMes4VXnQBZ
JOD516gAJ975//1Fqq/ugz ###CRQpphv34X8d80LQRWEOMkmPQk3NmMKGS8orOSZEcZa ApGly1ONBOQLXE6fKVlI ###lF9b5wH8UlN eReN79oo4
###omMKU Xt5fSqrN6SlN3dP1siDZ4uktLJ8Uq7S8H0ZFn3P9kUmUG6DkK1aWo2oWpb ###6q0rWFOhQ16iCIlKGgf lnhIXa/RE304ZiQ4jroxFgpAuwG6ukdjjAuIv/aG08T7 ##
###i3Qdl/HkPo4HXtD4/5B8sg5/0d2t34X9A7zOKw2GEx5LaQD8xgB4NcvKqiLorUtm ###yfducmAmyFEQHBTy/NGyZJuZ830jyzW5IDC9uxY03 ePNqdeaCYpcF0gZdfts01A ###Wj5Xxk0xj6xW542yfGhvfhj8Ll82dr9xm aYAmyTMy7E8xtls R3riYjIemrD05B
###6vnO62N20IOJIUMQo eYeefsXSMJrEnHwyyiK/TFwKwHyqSIFhgESDNiSB0BSj6X ###ktuaCHS5XvZqksRUPH0TEauVRUSsxqnpF t96KGry4jVZcTqv2TEqpGmj3B4Ed N ##
###TC/QMxzZLIHll7oDfY2SFwmylweoWttL8S2T5pu3b11FcNRjmXEe1q0GDWejaS4w ###x1lrpZMAXMj0LyxnRkmsXZmhsCxYJjmglfS1Q3DJ7UeQTIpc40KNbv8poxFdLEnM ###cCd78k7tiDl2nTNTi5KntMZXFL6hi5IY3kga8BtDNRa8d84AHjn8 ADs986VfDQv ###mAiZyfQuTH4fh7RfSt4LJlP0ADturK0BPIDSF2KDaRtIq7PuKiMPtMxP ITf9MeC ###7roZUHIJYgZEGPfCQLJHfY9aMWYMRX8tiROzhr2yOGvbnDRcKW/NDpWTVenyQXSU ###T3uGW5TXGo36j4SV5PdphEiR8Gq216yt6NyFB1NKxzdipbhYPyxzir6/8R/wS6WI ###GLp5MoIgN1AsIaYEzQBbNdpyIUBpqxb8qwV2ub/0DWLT5gak/EoCFZb1Weuz/Z58 ###uem3Mn
#CI8DsHzTz2pNhGli2X/O6hv8wTdgt1/DvRC1V1R7KHYWA0yY7oOsdtx7gC1KFX6O ###9o7YGZAXwLF3xENwoZv0SsFlwH3ZKptxD2rYwyPgcgxDtBko7xkoTwsieF 2DIRt ###nCaw9dn9zh5Km9URczjKmBWbzAcKvISBowFzAc GQvjLs3XSH9GPWQjksXg3wz5Z ###tXpUuinGBCTRNUVBxP34jjIFAxb2hJmTEUIbxXzvCD2OL8t4azXwjlDoYoE8Ctx4 ###lN9E0MUAD8kBP4P5AHlk0g5pDPKcTsnEZe03EYp/lWkeEUgXRVD5FDLx9np3Cpmg
###M76pN9Yy xZP3tTioW7wV Zx2tkpIfm Z3f3eIdvJ4k7ODzeCzF8DENUw4PWbtmr ###0VU3ZjF988bbFEFb5KGQrh9zVVC
###gGf1 v30RsxOBeBa PfZC4//DMz16L 4p9IUeA4Ey2Z5s7KTMJoMYWbiT/Ubo0Lm ###PMUG3cpTKaL
###OIzrJbn7qc1MDpB1esiubhkjuWUnyG0OIzE4pJPh33KGH9DH3CPkWzEWLE8PhRHN ###t/sFB2Bvv2Zs5rcv3k/eHukrKDE6ljKDInoKRaj803DHc 0yzDaZnRVaJGgrsF R ###9xCDyCjR4V0PpTtoZ9if3g1ckyPyWwPhLosnazkU9RoFUkqqzlKKltbcxVtzHZqK
#PFyXl6HLW6659ymeHTmGA8d2Fbu46JakXtwyRc WJ1zCganG9txqbL4wQGB8ZpEZ ###D8wk/xuJA474hQcrrTM/ S/NY9 1 ZZXzMvN92M333sKJIGPb9lGrFSK7sCq0KkL
##/4c1VTJ90FW79q 2UTdNvVqKg5dpDgyM9K qlYb8KPfBAkDrwuaFOpfh4fYE82Z ###j3qW42IZNGSz43AH6C58t9/aC89PTt5rzdIpHB5zA1vb6qziN7WpZrUrUVD5WWuV ###5dMa3o3QwWscX/VjFhGDCYWAIfbIj4M4Z09NhKQ5sWrS6Wwn1peYeGEwvi4XyFm1
###XaHrOAfBlW1dZT 76vdG026pdbXqlQp1rbO9SmBtl/l27Hy7llr76ONdMY4tlaVR ###f7hN3WmLQaxVT0SNqPymdWpoYwcFx7Z2MnGM8nPGRpndPq7nmPdZC6GwvIRp7LNW ###xW9mDRsUGjZryk8b1nQFHeS7gmr8 VaNKzhqYfVt8zlXewTCKvAb4 nKP5mcMGXB ###LkhNjQZHt4fXnpeRkuTwFuLWVFfVIsNz9Q5G5SrSreqblkVEAjimDEoVcSZSnNw4 #
#K 7qCIPhXY F3aBLTjdOv4sk RRbxGoUKHeypVE0Bt16Vb0kNBKk4y4wzDtfthZJ ##
###Zd1KsBuPy6QkX141ryn09 gqgcv eBFoWvhabolIakz0xrNwBDCuUTdWiKI6NCZF ###SIdnB6Nq39Ou87Sjkp9WqobDgZ4lCainozV YI5v2GYXMD7fH47x6aZVHx JVzJ2 ###h3zwlPH1PaLXUDDGtzbSLbulLItza43nqlhZ9C7Pnt MXZgyfAJxwEGkKPuFSiO5 ###iOYLp4wd/LCxkcB0HkiERXS/
#KJ2K/KmgoJu9Y/IGUk1xBSVaNnShgVJilMN9yWIAdMyRnDbP3pRD6lfAJjE7joBz ###1sbFx8UJgGUKWHyRQrCTofdHPB6yEmwPwOUx0ZWJXUnKA YycMvu7rPMO8qqW6ln ###9A1tZIVybjN q44A0sfLnE2WQpi9vYSBaet7i52q3SFVW9aeuc9mjyktawvbckXG ###1Cf4/N2XP6aWnWbmHjFZcQbtyup7WSw9dZTnxF0pZDVvur36cLjpJcUrCqd d3lv ###im/YrWZ7hlR/
### DL4Ye4R82aps96WKaJnbQ4NIeoOcThHsn1SyYQ6DyF5G p/R34MO/ Do/r1MwuA ###5ud/8KuBH1D h3rTr1Vr65j/oeo3l/kflvkflvkflvkflvkflvkflvkflvkf/sz8 ###Dyuv5xoZREoMChJSlMekqKwoZ7yh2PlPrz2hG63Eu41HE6/HK4b2HyUXla15dzxj ###cjKJxsBziDOS3S hjpTWGEvT9YDrUAg6t0AgM0IjorAWzq5EauFXSa1oy4x6VgZX
###AenVAtA9MTkwfsyK3 8NWAC/HbDexXyR0gyoPSp1vRd4LSTSaTvefbONqJbxgSwZ ###JSY 7W7h3zf4FD8ZZggGDjR70Rt8xoYVJZ5em5ea0B/zRLI3P3vMTWxHOIlphioh ###pN2PoxHwh EUGE8y5PLs/ZB T7xONMD/deK hwZaJqu98i6AQ42BqajqfQcE9IQn ###ckUOBiL tD
ojg5mM4 guUbRyxySPWjs7 ###4fDrVf pK6tmHXF57P29Vk/oaeA9xQ8u6ca76n27J7qvKf6s3tq8J4aek8yhWmT ###JRHu4p 1bc8OX3zCmL
###ZZQs3aBZL0nd/0i u4ovr rpV3tpQkw0WBpehmVi4Hm2FyzDFgPb77H3NScrMjBO ###oks4xUsRHPOjIeoJyP A808HvYnX6Y07/ZhnuORVW9Ta70wQRQBTYTQ8a5VcliS0 ###GjJ/liQzKgBd6JmLS3d4R
Wv9DKrK3LWsvp42Rr2uxSJ97I1iO p ###CbXh39CbmXDPZvNCsXTlZKqSvjzsrQrzbX1Lrj1GwRXcBzdx55akRqTUXr83eTRd ###8koCHual8lbu7VXvn/80n77xKuljK5CGuVtVM40QIKmc71K9nz4r93cdoWDJHdJV ###wFIPe834oMKieitrw6jL5I2jwXX8k4c2ip 84H9qaBXUx0nbPj
IRjOCan2/FUEn ###fiMrnBtBj0kUFSgGrnMV9fqaP2f2EG/0wBY3VoIUI4SNn8wAJQ09bHdg9u1A4MCK ###ZtVgWNWSeIohMyrT6vuJj7XGImzygqHMCChooW4YOcGqc8n1vVXMFVGfo GUqK2I ###2jvWW9KSa8x JX8N2/fRCI4ZujrTiIJzGuQogtPIRwazudUYjY5gPTLE8iBUsuDd #
X931 j/qMlHfHwAO/DiD1A19XIu4qo1H1Q9m6AU3poy JGNGyK ###XrHBgJeH8KJ fxQlIkogkSk5gwdvyjoFzlnmTJT5xkbqDRxw4c6NCAr4jQ5a4tPH
###j79PgUu mke/SF36s8TA2dUWqau2rXm9PqGSh6xXHqXw2WvKrBbGLZwrZMAVNuAO ###GUDl5yX5WH8pZgRyhQU4QwI y169WXeHuu 9Ux9Mi/
### v2HIyw68Gs5n9AsR3XfyOjY5kb8X9SmfHijKQPtF tCKEZhdHEYkFusbUUSPAEJ ###zliEwEaC70KCbyNBQmfhAfSp8cLRwGghmIEGVoDi13IuJoKC5BC4MBFkYcJFEa3R ###qP8o7YtnfqOMhwJtvcuoc4v7j50MbG8Px STn FEjyfMba4ffabbvs/26xw7dtjt ###PnnD1p5Hq37xDVtzrVBtIRv2CQhQ92v92Tgoul/rLhzUF7Rfn4wFRgmNZ29Xv/h2 ###bbgQ0fiTt6vIZfacLSvyvxQQl0MMdhuJcFhqnyeBt9vlImJzaTpAO8TqUmzOF5uN ##
Ua 4uenxR6xJ9LL8bm3GP6n/2mPgEOuN9ssL915k3l ###c68qvyomyAfb4N5W60qJt6YAnP tcwBr/G/AJ I3OMAbcwMefK4FGuBBnQ0WBKzT ##
###DicJUyBGyHSSU/ruCfPTUnIUwVEtDicWSBB0TZfqrf4FRxSSTV3Kh64NIwlTbBCp ###eTQzCGKDbyguF1cDbeEqfs29YIIAfGPDeQYD4oRcEQsrFYSA97 RgX8ubVTr/P2M ###De9v6Jy2vqEzRIugOR7WOZ42ajp8vsmwGhrD8v11fUObDELSW01rnzKsWv6G3Gzo ###J6axXvIEExtTMCBOfxVzgwl683TFTa5fJYNBCHyK9QrEOjTcDFHQQd34XjPwKfAs ###TlypzYr94mccYGK m4Iuxb5wM0SxD8X rYj3zAOgqu/vDUF/gm43M9qLA6Ch0X/F ###
OiAb2vjyANjMoB8p0RgHvdBsTHwKehN0wyWflN6M9RJ8r7muM9pKBn8T8 Tj IEu ###GFRqTYM a9o8fblvBf0Y Bf4FniSB2nNfUBaEuemLrBsbGQcGJa8DmcGSunh2bpb ###UC8p766
/U//tNMun2e5evbt4aVh5h ###u2mDpASC1h5wjx4wgX78FcshagI/L2jQG/SxnENqmYG3wp/jyTG eITvJaWZySy9 ###0S fcbjwONyBlW9jYK0IhUyml6gHs2SZvXw7jFqdDbuTpWKVJqOkzR9bBp9Tllsb ###2Z9EgKMLafDZKlQ4l5LYHA7gzAC1 g GP55GUo5SrDhtmpA0nSJ2XCqcAkdPTup9 ###jfpTON
###HkKZvT 1p1HXJ8C/wiPgZ0ftcOewBQflJcWSo/3MrpSoTJ8bIZ8L9RGDVInWJ uF ###X62WZ05PicBXm2KVP9GvakQsGUUPyk5ItKTHaoPOcEpEvO2hWVcjFm5a4MzqsTIZ ###VhgZjHHbPxtH4 tz7KcNund4tiEmBijyXnpBo7mV7jb5m1epvAVtxevueO3jc7FM ###Wh7ZEu2pVZHj/
FOMsi/ZqSjJF0/Y1etPYHtFyXQcK9zfYurYjvWQGBwdXTi8GuqO ###Za9J/18BpTj9633bKl6HnHjqzzHTQ5g5xRPmFH5aYUKFjXmqfru4KwzRbgGuSz E ###u p2fZW7ogWmPNd9xfMreY8OB5 /zK7L453uvudZCp6a4hlRjIbVEZBo2N0h2yCz
###9K79 xTUmW6Zb kQsz2j4X/LTEbx7pTQfXE3sh6ZMs1nD81VB et98hpj3 eOe9 ###
###2fYaflC8PYC2QdV8rWsBvSHZ0xWZIYuzyPxHdBGK4uweJ JUppjxbrWy4d2 wMF ###h2qlTh xnzr/WUP2IArxzhUvkG5Dv4RbWeEeL9RDpTWI2rjAonT6i1
## VmrdOaQpRRVXGb6ZKU3 dKPUB6dXlYY1GbVNqlEkvYMYted1J1QK 5H6NQupqy8 ##
##EoH2R44GJj13pmM8ZZ0kLbxJssmT8wibkNTdIPIOhqcnbUz5h9YO bysTsici4dO ###f24yPRoObyvRTRx1M0GfFw6VKNQl9PUakg4su8hmbdu59YwCgOapp3MLBFoCYti7 ###8k480sEczjA5b2XZyUEsJBRxYVvqW08T/BQYmXteZdSfJtwghYUHU8tUUfBnjuVi ##
#lqkmn/4214meKq4orkkiq7jMdltacVvlzbemXxbDzB4d 2VxAMnil M4GfanunOT ###WjQ3BeOFV304ONggrwgYYXvbMRCldHQo7BmWSeH3omyYDebCaJsp1zy/8FYuBkLW ###NnWMzvxtXCBYnFHJAO5y T5U8kwY7lfZsGNnoOopsMZtGUN2J7eVYZXlYTIMTFH ###KnagCEMRh0ut2wsjYD4ZvIczD1nDVGpx JQo34hyr0HVUVBZTKQT9bGy3v2ATLhk ##
###U62DZU ucLchLpwIHsaqywDsqS8rU89voq xd8f0GPIVUyukpwBiYVRxjWlac2fI ###EeXUNJ1yj1NCJO5hvB5T6peqLN08/3XSF8OLK4/0bpVxOeuAqAXrzQ2twzT4wjZa ###Y22N9CHFQdgKrbqCCtUKMV29J0Dn4hmceK7uGnpZbpUoGMOsjIGDZizn9ozTaSsD
#ItAglkPO/TnEbkL2FnR4X1voeRlXhxu38u/5yeil2joLXuQbUQb57cuFxKHK7H4s ###NBlGSJ7f3lAYgfi7O86JSiGzllqr0kCqHGguNYFe3c4AhQig2hanXMmrvgoaNAQT ###EehcZTKPhnb1uHYEVimoN8QSuUXZhKj7lyyHYV2tk5DpSpHvvXCc6VmX Yi3e4c ###Xnf/Cm53RWpED/pljxg8OgHBB uuG8m9jKFURPhbpmdT/9G7ihKEKo3bUg58lz/Q
###U90umtWCvnySyCsTBOWZ03jzRrdYfTOWeRYHMGFCv0oS7XSmYl3nUT/S7dNFRy73 ###xdt84UBpJrmdce5rTQRkTirMGt9FleKmT UJl49seiQwR9eGiY YQVE/THX41fnY ##
###Yvh2c0dOqmPfwwvEQDNpqNdQ5C8SDr9e9e9LzNb4QD7a4q qtRZ4b415fqef1fdT ###G4vTi0lxETHcPtjApRRJq2oB4ClZLUqy9As8JoAC07eDIy7Qf70cx9Gt7WwhEToT ###l6qLqMiSlItE/QUDkdz7cyYyM3CCVkQNL4QKEzlsEMLHX2191rQFUlcDwevhlRnV ###7dVNuyeDWJTa7sdX5KAFgh4FK rW1rkXqziSnXhVvHbwCCEvDQCO7v4jdItH7/Ah
hRAe Xa7WZm32edbDWIt0GrwU ###dTS Jo1A4pcdGRQUIrkaP8HQUoS8DDpZ2nIWY//pxqh9qvlKO9/V/uMH63U7/7tf ##
###DyPYWfG4EMIUeMs4btg6AEk3RNFYONjP370/b/fZbCspUKwlK0JEY0BCchTVehKd ###QWWIrVkdUGCrvZuEyIltrKnAoFwwMB6gODecjtWHDKvUz5FsL2rFZEkNOqAgecSX ###w GtR/1q7qBSTJJRUHodThPA0/1z1skXitHEM2qU sGDDD3m1gY ooo503vbAN72 ###4MZ/hw8pTxZAAIwEhOGS7ToFcDokKWYnNFGwDK056dax75fp68D9e6lDq/BLTtH3 ###GQG12pe9nHBjjZUXploYwQzlK9RDBh5DCu0lbG6tuDHCmiBOFBqhq6EknFBhDULX ###4YNM6GSyfyOjrUXUWvVYXdCRlG1zUGi0ajElxyjKolIO3XSNXhYYRT0KHAKY3A96 ###lp0cDMqIhjwfWNv 3xsMQCpEW1YIi389iLvfuf5rfX29btr/19eDpf1/af9f2v X ###9v l/X9p/1
l/K/0v5fyn//wD5n7IMYOYEZEUo ###B3klTHHBjpX OI66j/D3bohZ1 Ep7HCqbZas/sTkQXh/B6tG4LU9/HRSGqwymQ j ###ukQH6puGPInVpYZj2QG8/z/Bqnifp8XoZ/XA3n/6P/Z ybGnKk3MAROyruZTEY/ #
###c5L3YcCR8RqYPH1whk/lOSa97HW1uDBRpIrfYQnHA3ZKCNzH/ZiFKOSrIEdlt3eT ###91FVPJ6m3vw9w3NKCaPrDMdjGCglmdEw4UezU39hOKd7xi0nwnpl77d5qhn93Xvr ###pWnhtUdHuY 24VXlzvoTJYFll378QgTlh566QmotDEXD rutX8GCCx MnhmDglQk ###epSLfPkoapWl1Orx 3ZjVD9zVJaXeNuLaGyj9sJvCAsrkYJfWNIW78UL Mbee4Pv
B7yuH3RJvcUTnb87fo2fjEof e43Rc9Ogsag5kx6X2Ez9c/42P0HSP/OAj ###9O3Tj9AnH6DL4/NHHJ9vn398vn3e8fmsw/OvfXQK5biABhdGoA6ytVbPv7wD8Duf ###f3lHwZH33Q4hx8VQllo1r0qVMv0FqyxHf6LKkm6m7I3kZJhyB7jp/9sy/ Pc8f/k ###aZmEPA4n/
ES2DAIdYlkPTJ1qXuoFMOB9 DEh8S ###Dg7vxoY8Z1I4OP45baV0KtYnMPDB4arVHHxMnHMNAw5Bp s5fN3kY1l8XaxH4KBT ###jm8BT53D0agZ 7aRzU/5npf44Lwn3S98HapNna r/NTb1OlUrkvVwIe5Lgof42ua
/mYGPlI Kmgz5euCbwh8cDxw3udv ###VjPOl4Zj35p02jDkwmb2OSf56YaxX4IZ 8V17nO887M7haOaAYfrfNnI2LfrBj58 ##
###7DY/dcincr Y8ljVkE F/rIp96 tRzVn6FGbOhwuPUrwVaFHNQU/5883mobeoO7b ##
#XU6XdCn0Wj5nRXZI9Vpf5xtyn3C69AWd8t/rSqojc79KPGxY56sGR6Dq2RvGPuFt ###ucxSjJ a5/16Bv qSvnH5qe1shsvzXw61fQ5U89uGPvFz6BXVQ6qljU6kfqdb9DH ###hnHur69825ppMunt7h2En3Y e826bjOR9C74Y9XX9FixP T4jZTPStgbNV229jf1 ###89xP RRbh03JNyQONze0PSzPQkFTgsYEToVMVVfONcGvpd4m9Kh1/ZwR rdXk/lJ ###JD44vwwavjw32d qvi8FnoRuvqHsdcHzm02dthvGmRnUDbwousZmVef1gpbFGSRs ###SA1D9lb1Fd6/pEuhRwm9zuPveHUTH7NpKgjb 0f7uxdEVUGjaZriquWn/VVYt2Bj ###1UD7K0lC/BXiizimNhU2I8RVIUoJ8t0w1OEN49hUWLfXrOvHjjme KvMQZChJKvq ###ht6/2NZCpBHql4BDHNsaSTR10aZa18nMwJP8W1Oz1PnF1sE3VH9li3gbxjYWR3p1 ##
oUKL9Sg ###wBbJJfsV4om5T8z9IsQrT9kvflVjvxJWgVtJY u6CUxlf5vGulQNPAj Io843 pD
###tEnZ7obxvWnwhlQNMPmHuU8t/uUFZXOPWmub2YeBW9FO5UHi6BIiecPgSWL/VtcN ###80Rg4SOQYoqg UBfD9 g51rgUJUy1lDyN OaQF0XjlNhLpT8o27QhzhyJZ0qovBm ###kMG
V9YvPbQJqFLdFHiDjrGX1t1A14A8e5v27wQt1c4W8Ktaw j9giReF1 ###4/owFf34mnE GQgzszBXSDEpsM8Tjhu7r0BTH TVpNJX1hlt9 VrKokUAT2F9zl4
###ibMvoYZupleTaR/1crG hKgcyPMmlRVEH vl eBSeJ9Ql8Rfv164L7m2Uq7Y0ExJ ###0hQnRWG7L9lHfUNTiaWqKmha0KcNVxG63Dm8aNPVdiOPNPW/4jZFLJUvSaRhg5/R ##
###tGP89mnH2 Zu9kKeE64z7cOjv2PkOXr9tC9KXvUVshFMsOp 7r qeq95K9nI4ebj ###esBPcPNRSqn2S4q1wvUwo0edLZtPzWUuEyqf4v/
###PLMVVoiLyjByoPGRPkWhvvEGTyd1LyM8Hud mlbiaUPXEppkjhqVBs4IREQ2g7/N ###NH6lWSyflWeByKiHIYqZDjArxdP/PWlZyzNBZO1BsHzAzNdjRF0JXlxdGIh2M6o9 ###GF7eh6xUYHkWiAf9iIptspqF7CWU46Nptzf0LkFcv 91CyZIKAgilkscxP3jy/
#U4j8UpJ7xmTa8cSxxlfj PcpIPvRW8BK25O5MidR1pgiJ2WhFT1/gnK7dxzKyfeY ###oKKLZVJw5a0KzfMnqVaGpT16F0eY142SYl4BwQKRPmOSKrNjWusRjBSO4nHHONNG ###8ukpPEQj8XX87Nmh9udNE hqtiC4kCUkddNYPEMDXHWIiPlHJ6btWlkxz4Rvf2kb ###zpOMOLZ0zaRqusM9Pgn3z89Pzq2iOwMm1SXhJL4bZcgmHBqQHPinf/4zT4YwJIz0
#b5DR6cHhMXCcw4vdd9Tw0 ExMIYwCNsHWSNk6w0bznTkNkSoMg6nY/IgFfDoT/wq ###TDE83qEm vBOsf154zgGydcSZtCHccgb6 Ziy6uFKArfBJy0P wcnD NhDAq6DvS
/Th742X3qDQtDfHT66nAAXCFsM1E4C2K9nd69 ###2pBqfu9Mrw4fPMdlctX9EmfL wN2dVTsJZfDi/pSwU244ta/BsNB5Y94PPRSbzeV ###Tk3MH0XXTkERBYkM KmKScgOgOgKBgjZ/uCv2S9xYnzVj67h49eiY9GmeHUUJZOf ###I7zxxqIc5mtuCJFMs0bLmRi9RuR4jY6IZ2qFjm2v2WjUmluZiGz3roH/XaBDvzHe #
X R X R X
### R X R X R /f/5HNX0iCUGUFNGdjp48e5iIRG0/e3Wz6JhR303WF23mZLk3pS5y
###P4GvoP58 GTpw7pefViWoPON7 t2MSBZRd2gAVErqmkWKUr/pqUBZR0rnUEFRhlK ###ASeHSwpCgi5l0SK16n1VhysLn0/An0qr2txE5XQxtoBXlFHcUKs5GzgX5SBrRtVz ###A3/a/khpIhc C5
###6obOUHXJtsbxUpXVO3X2syHnZq2LKHTf2NB1PFl5vJlZFdmqQMphlvQgKupuCDbe ###lJV20xKODanfaXQhZf0ClUHlmm7otC2qDpuVdeXc1Sri1bJO8xuGbl6bAw6uK9YD ###zVYgqxULPuvEB8eDqPwtdd26VUbQ0mMLc1DfyUE39ZmJOtSNqsFBxQ4RWmHVwUH1 ###op4pBzX6EphSLAeyX8lBm26uE4hV3ZQHtGUh8OoZHLSmFfX0hZWmqVBEUM3oQ8dD ###YCiAeBKmmuy6UWO95t65Ysf661KYsk7tDd8QPPw56u8KAVXn9rLWeNMv63MuUFtZ ###WkZqugVnvarvsg3FciNoSXA1Sc1 PkfTTgOBo2bGaVC1hClBR7NrPAfG6SDWuFqA ###gzYNi1/NoJ88Dhpo yY9UTfn4BjrBgf1M8efzUHX9TrzYp80awYHrdlVYIW1y998 ###AgetGyeZb6xDQ6/9LPiMr9CpkGYtC6wpcQTP4KBBIQ5ak3KZzkHrBget5XDQui4X
###UNXKUdUxkKmlmhx0fQ4OanAUebHQtIuMWxzU0DDFjhaUrHHQhrGb/Iy NvU5KWd7 ###Kh83DC43i/v4ZfNmV1ochLwgLEd109pQn81Brd1W02VDxeKV4qOWUbB9lkyo7LKa ###oE9h9DRu/YWlQNLAxhwc1Lgxk6dD3b7Jk8bJum418M2b Odw0JquRcvTQtWeNw0O ###2ngGB63ly8LCkijGUmVQyUHXM9b4CXDIvb5Zdp
###/RZALL5iGhciTopUX3ehEcQgFBNFmZTjKv1qt6G cZun3BAIUUuaVpu6OV aXqU5 ###P8BF Y9/03 2///lffwwigbdePwMl/85
n//yP9/9u969PxsIPBnRQEQOkFe ORV0prXjMxadU7OvWA ###oDHdM0vA8HXY6zKRPhWlSlpYtSubxMtobBW8FkHiaffAeIAH8V67XkmwEzgLKVbW ###Xy0UTK436ToqbYtgch6WD2wxmru2tpGD0C6YjsW AalGboK0sDcinNd7K00eR3Dw ###9vuPokztmKr0VhElzlk74t17VnQ7G/ uN4BfhoOYINlWoKqIHNgiTcfxzk/eHpwL
###UwB4 iN01hvE m9KoDgfLgw7o/40wf twNkFHMj7r93/AmVEjAKS/mkv7sSV x7w
xv ###wLEWcPDqwRzYAnWDaYHH5xyeM38GPPJeT1w b hhAOIOj1/gSgfFjTpdSmItaaJl ###EqJAlR3HQ5FgMs3FZVGbAJS9EOIL4e YnRMArn0GjrN/vn/C60AQyIf/va8AXfFr
###YYuE8ZI RRzRnS15D0gXF7r2pLteWixyNJJ BXR/y3yOaIXp6rU6eyrDQf RXZPf ###9bpp0BdOxkMXw6pnLz lXLvqR9eJseLKfTVlUqM2YcC7rfFuyYmHQvSo85nv1/j7 ###6 J9vNf18YKWHMQoegqdfAln7i5fcguX2TV2HI4mYznnNFujNYGy8xkDTtsjDEft ###
HfeuUObYTy4NjFPAohPlF6ftTtSPcxB cZpgCwPZ5DuXtZAJlWjzJqh0oTTOfCRm ###wo3tuT9F LG1J9wSDK Emunuo3ptzO54MFT6Nj0ealpnxqwwkServ0mJg1Fx4GbC ###zBlR7k/tlZC9wsdvCNJD3ylyaqEwUArWkYiltMO9P9iI3N3EyRLZmGrz8IQ1B7ZY ###5RGJ6pT/AWLQQRt4 4ePR9iknH5
/h9 9b W0jdFEtHCQqJumFLYtWiTylKkrlNVo ###oHeLHwToM7EBCBGI MAq8oASNBmDNugxKSgb 7yCT80kXXRBRnfXHDahFf RNMhX ##
###YdwM9YYOZji3muB5eZS9/8uFwUN9PALx7EdjJpwVCKlCyt5 v98bgfr ejeagt4s ###TMrdGFmG0LSrr3yUM0dRkuC9hzfujUb9WEntUcXHd71B7256B0LDcETNItRlp8JK ###MujK9p rrzYb3k/YL/tTa3xBBfyOCnl2vc4UTQhXspJuD0RrKvxJBT/V/T7Cs5lx ###A3410hnGV6BQ92L8nbR0bjdJb2xAqh4kZJvwkrshMzJky8 yMZZS3QnPgg2QwEDf ###bR iRhYeYmWrD 9xJyu/Hu IOGPuPbjeXPfJBapR9Ru1epXEMvm752H4MHfo22iu ###1yisqQ5iQg0oFI94 XvaFCTMzY31DZIRatC2ub5Bzk7yd6VpDQb16yRrBM1atd7c
###MsfT9fXNxmYNCD3Fba1R31z3WbKMxnq96sNKCXw69MZvUln88fb/cUwFreMxCMG9 ###r6gQdYf3g/Dg8PyptwEz8r82QJIm z9gN2gGlP 17teW9v l
#IyoaT7xrOG4SpodxJ8Hp1VU8Jr1rBKeNUTID/3H8AXzwyVtTHbBKKv6Z45MLAqQI ###JmipQOhmOU0RdEChrpZZxyTFzAuv nAA/8opJWYBdTgYxHQi40mcOyKb/Au5Qz5n ###L7D3mgpTacB 2bK6ZqRqTsNA Gev6n0pa2DQT2Z9bFeHRy3skP1aTjv07Q79Z3UY ##
###4gZr6INt2IM1FjdYUx9s3R6subjB1vXBmvZg64sbbEMfrGEPtrG4wTb1wer2YJsL ###G8zXOYhvcxB/cRzE1zmIb3MQ3/ 3OAOD5Rn4vc7AWuMHnoG1 g88A2u1H3gG1oIf ###eAbW/
###8BfHQfzaLP3AXxwH8euz9AN/cRzEb8zSD/zFcRC/OUs/8BfHQfz1WfqBv/6/RSLr ###xlfRtD/RRS/qP0qSeDwpYUF5NS6cl94GEDGYG13ZzvndHHMtiLwAvaTpAijNusD8 ###F0COunxEPBp3HFrKh yrPnbDRy3zYvbb7bIrBYQAE0MzcEly8iy4skvQ8 nk85ey
###6WIKJnvXG5QY1dEsL6NJ5wYh0DgmcsoYPZ0qJq8ocf4InPJsY1VlkBn8oXUO3Bvx ###eoh4fUH0oGGXjMoEC7vJV2FWYdKIT8zmiPgsHhDpW5Y6p3n0ivQiSCFs4ypzQNel ###ba wUwO2LzPKST0RtNmVNdbNnzBfgwK7SZsFYByUZ3N3pjykoj9Mn17x9fbeGsTB ###cfOeTj4iUHJrgw3THW6RH5zXj2DbjfjuMRFH2Xque4MBur5Zu0ujC22XMSJQlvlL ###4Q0nj00v7iexMRfj9PzGD0aNPcyaEDrYsSPoasjd7eKHiYepeZxsQ3KMZ0zq279t
###es4/If/LCB1hwjiZhCzeOXl1833zv1RrtWrq/73e A/MBBP4S//vpf/30v976f 9 ###9P9e n8v/b
###cB8Zw3P0drwTAqkfnGu91dVW9Dg82j/ eJd L6dtmowfaPh3SVmz0cXp H7/ff2 ##
MC yZ/XIrhN VN6E/732 ###P5n6cKGmsWz7X8P364GR/zlo1htL 9/S/re0/y3tf0v739L t7T/Le1/z7T/wdw/ #
###n83tMZaghS 5GbFElhmgFOjldJf1QJYxYf8SPax5x 2zENvsfDiYp9vWeaB0 66F ###FknoRXPkyofrIGydi/ltZebrEP9AHzsdx19nNyS0octor/tQsDUC4XzDBTjocV1Q ##
###PHDIxfJrjBrD4DkgFcEK9n E/WJBORskiRU2dnoFeQnNX/MM4Qsq7zecog6WRysH ###tH14Qy1XLF2XYnKhG9TzZ4HCWT9ONmX93scIFEhMh92ZTiqYWRhor4LpjIW7rhSO ###5mbfsJ6YjNbNwmHoo G95xxpZsdpatyQmEs4GG4pHe9yXMHBByQDbBBrhzClNJLz
###TO9vjRGd LsbdjM3NIYJjMj3FQRLbFj23lR/4gmzeKTI2/SH6WjLg2/dIdonbvgd ###hrVMgDhlldqE8 k4JpUbzn58jZK8oyHkcji8zVyh3MiEwccYU7wnW7Obkht3gXYk ##
###F2xZdHxoiqVWkvCsUQB/L7txfxK9J5GwIYU8Qs3uDg/VAEKaW2 h8iYhCZxUrCQw ###ZXDnS8n7Xrdw23avGzsaO7c9ludIoH0Y3YF8X6UkPEXGQJGAcmrbSoHzBdaWT7vI ###C4Bu9Lcn2OCT/saGl4HYw4fPqfLVDk/3z8PT1u7f9y/4ZQ2/UprZF6KFaphQOY7M ###PokuWMUTYHuSu/zFiULC3I0LwuzE0c/AM5PDQbfXiTmG0lvHAigGfe4Qgyue8Cru ##
F0XLQ5sylcADoLNCbOzqp0FHyDzR3jZjCwJTwL ###CrwDJFsUetKyMRyz6AttUrC/eUhfh4OrIV Xwkrw/gCP27FbEf5OSjBKUe ypKhU ###AnnXu75xSFML1bG8r1xYRICQq/p03mQqN1e9MRYcEsULvisoQT4oCcWizQ LGrAj ###RDKHMWxrRjeZ0u78C6QL8SYo8GBrJigfhz28zOtMel xVF43npAUWBwkFRRpSjJB ###OW6fzQaF6Vntm2gUi JBgJt2cdwUCe2lswp50e9IJCYXpg2FJQehVW84TfqPiu2V ###ZOyvDD1zguJsk4ziuHMTCtyjiOkyD1CrdIWeazBxtonwyjGU9UZCpp5smdonHD4Y ###WEh3uqB00N0ta8pj9ijWGy3TaekSULkiHhBuguJm5Dvn57hIR1EywZO6KD/Hd9oZ ###R5iX9cIR2kFnt6QgL6SSexCrQai7ntwUeA0jMtmraG7Nonpk1mjgGQ2TpIfKN/N1 ###RlSXePju6rM5ZOv0MLxKwnd/bOVtQGjl8mkuvftjdXHMmjZgPjzKBnwyTIUU ejh
###cz1JXaLzoctegb/sHd0v5QmgTJNYSVTSRfUlse/8SKjHfTZN5EWCnrJpEecEc7UB ###EZqyV2SQ1gHThlmSGH3r06nOq24 DxRepXteUPhrVD13JhxFQUGWv89uFKFjFxXr ###ZMvuIAsHRD4dFBd2kDmj98ggXQsVP4UAKqQg6KBc3Izj5GbY77Lcr5I5i5/nRscc ###WAEZgQwRR8P7LBaj7iDQcr1OulooYeTt4fkUhCnFY55t5mpweKRV0Nt3OKYR4eTq ###xnjDCfylEDhFQKG7pPftj2dhezr 2vuKd4Z5R1YiWiEUxF/w5YUsEFkV b1vdAUU ##
#iYmW4slWxgJ1YzKjMOuFzenKnI6UvV4cFPJ/Hvb7Md5LDTogoEcA2ih67A j7pYF ###SjwAtDBvd7zN4G97eHfjjafo3w59oMO8caoXAeU GiPDVDaMU9JirTB9EaBvwvcx ###vguHkM55n75AcAbt7pzP0uAIK QmztwP8H4TCFWKXguhFVhV4Fr9g0xjjAYKN3Px ###cAlaFpaQKmGRDKyzuIsu8aJCvArKjCtlYRYKye7WmyTsNliXtNLc1PiQ1Q2XjAZf ##
###cV0Ek9uSJzO6Ej74vscOBEediZUiR2eIPT7n1GcHa3437mOXOyzGzL1Gso/U85Um ###zq2QaKxE7tqJoz4h5SleNSTCHrmu33XBUwrasMsxFhrh IruE1221TgIz3FPgEOD ###eUdh3BPq 4pbgmqvh7MFi8WKWrFzA1QAFGL4FNkV2F4SBYKppF4O22KSae2PEhqI
fhLTgffC KFDUYEyyjEv9NKFZOyEPJqZ ###57vLn6kQIMnjAJ1 mFvh03pAKH52BiLOEeKYt8R8KWiwdCmKJRP88Z6aOYGZruZI ###CYWoIC8AN7wUmmbm8rmIaJinor50B/
###wA9Ndz bDQqudbb561miagEvGCY1W94vAFKx M6ipwaAgq5bN3/kn6XSaSt khtZ ###IawUcMj5UR45BRxyfpRHTgGHnB/lkVPAIedHeeQgPxxm3fYqoJzu8hvNJ/4rKFZn ###n9YSlA88cU5PqTSC9/cL5SuzL8/muT2bBUreNUSBC5EfdSNS4EJkUTciwsaC5sLU ###sMyvDMkiirG86PSDNVU431KuBItwSWaWZSJQAWnLtvwu0Pb4BNOj2/KYN8i8lxbP ###vLMofmUxv7k077aswGXZom7LVtJLp9R5gBuKihiV5HWMLJ0DOpMW4G1I9vqJBr8r ###VDiBfcJsl2QGOtotdBQNk2R3UOAawyTPFLpUBfQS AyPuELSjXVD1etCuoi475 p
###Q8UP38GJhude0r3mxQF8uPaBxb9svIWT6J3jWzWlcXA3FLzA 5Dv2w3Ht37St8s5 ###LzZHgQhQpZ9pvqlM9Q1BSeuQ6WysvhEL9/7DFOO8b7Y6vzTfrGV9o7vviDzdU80H ###03B/UQV5nN/EnIWWh8Aggx5F4ZTYMrr/NIfjkW7TaYWgno0L2sZmW9sJS1zcjH n ###7cydbVZhT5/
xioUFQvik2eXBWaCYaQDq z8BFo0GNChOBoMhAwVxpDF0 ###MTgcKEABDNZpE/7Z0jqAv1dWWFH4gAjfGg9ammwoVD5HMi1IEHY7E2Dh8SNDkzw0 ###soYun7oR/oEPuRxHsdguagZdPoMuzMBuC0 tecR5SxcO723dgunVC6wQbeCiBi61
#k LlKMD0cyopskH8Uo4KI7xQZ3A4UMZ qjAnppyTxiXcUqSYkoK2xqIHGRjTbSV ###04plGDsrVorEeOsoOlIylYHMTdrp8NhfXIQEBislBQd3xVcfmHnwY6nuoslp5ami ###c6rudUEcA3SyW QqhGsY0l rwy6VMAg rnM8FvTCIPFz68MyKa p/anfhFyPW59t ##
/zV7//fXu/sVZ8 Bw7 1Lrfy7 XSJbEri1R2KQOx60m9zPkZcBwu090PM ###N8VtkzxkjFEHVBfzGUqBu6H2XbvV/9uYmEaf99wRvJLONv72fjD6xAcQPodHxz81 ###SQajnFfPbpmYCreZin5YgUNexGc/qIfc140mtn/29vSyCF/S2Fyw3T048OpLGNYF ###jKfbR0dA3X4ctdHsGaxV0ttcFWMl9EYqphJ A8m/xVbYlcOUS2
kE7CEM0GiQhRACoYV8arTO2kjrss0WP ###73N cDHhG5wf5ZnODyVPZEs3kselHyAx/DiPEMWUy487QZL4DFMnCfX/L71zc6ik ###A6WcfaBYvdIHLLX76FwpP 5cKc90rij5K1sa/BbnSnlep0o AhAHDQ36L/eISZAk
###nTzl7JMncST6lOUcMjqKytFR5DqLyouz6A88i8pTnUWv355kcFmMMJxePrcS HDl ###rF7b1LWzKuashO/VQ2i1HWMryzZbiXMnvYHQ7Xhvxc0YBYrkl jOdY2ZyMwoTJe6 ###Bwggb0IXniYmoujvgv4mQtfEia JhTAnauJznRiTNZ7pOJsopM0HEye7WcRysptB ###LMbf7VTiiXCxQqf4MrbPtfrZKo9JVW2JoMchJ5FMTAzloxLzQTsv2fwnoAr9xt7v ###ZUl31Gh21sNRgoINseN6UZ8ISri6SHwlTAckRNF5iGfgEfxkflYU3efDdgp3k2Do ###3aUiEePBM5FIQeNz3pK60Yn60xeM99jWxT8dKfm/
###uuyZKh3jl8UpXC/UNyyRIb2e9MbdYe h3Gq3J3cTyjlPzj0hN7G10C8xUsmko6Xw ###IGWFbkDFcDkkoqT91eSG3H2KGi LdNbB5 vevfIxMh8X5KoTNorc9ChvYwvyeMRX
TaXEyX2KcK71d5OHPF1PwZ c0cvFdtVSglrqX6iIf ###A72YioFOD7Btis2EOJPBXUzF4KaH2DYzZUKcyYAu0hkQNnsMxNusXp0S5Fw7 GLq ###HTwD6FNgG4UnzlVyuNqKTAfJ3uBTHYnTHgswL6 4afn0F65sXjONXSpusNdYV5x3 ###OVJmRYAjw09Ebi5P5mwpY4HgJATn2nxWc cGnOTC9OTxqPb/81B9kZdRXPwpGYVk
###8z5omZd7/GI BfJMC6LWMh34 K2Lfjv9jcDPXH tZTr4DqdXPQDw0eBb96rqzvCU ###nwMYcFH1m/
Yzm7S ZDXBxJBLxHV4 QX D6U81VOz4A5d1On9 ###fvn/
3yP 3yP 3yP 3yP 3yP 3yP/3 ##
###qjNzsvuy boBQ2qPYUTxuAgDwmgYJbCaazA QTGclwdzMTzidzlHwzMFzni5fLVp ###x8PRqrVpRzvdEwN6000QR/OmnptXad6FckA//4A0mj/baGqG1bzj4WjQOgdNTnph ###EDbhaG5e9QbtT2Kg0
bF7uWh2Hq4DZE2z9 eNODIWGGxacNw3kYlx Ts0fbgYKDi ###HOaAVK0gcVAcre7nmBxmF2n2gs9BL1Rb7qNzrM2sldvInpw mprX1ANGo2UMd9f6
#O3ghNGr1Q 58Ft4N OVR9hqqj5on58295ht/4wO7vNg9bRyjxb15DHz/9O1rnJf2 ###9HTPnCPOpV6ZdrTdvKPtJo1G9WrwdomKp5JBuT0I0a5NKWFzrCWwlf1BeNm6amJi ###hDceaPTEac4agpzweabai1bktQ1Zo8a2i39VxnDx78Lh4k/
##/CAc8 UzSCkvEZXmTUSxYUkgH/TMYffHo14p17DW53kYPFrL7J/rEWgK6pRMHrbB ###j ZZzpXkIyx9p2rHGSgySkiYaqfSSRJOrq5Hm7FzZ3LXfFNHVeiLos9NG1 73JZI ###npqwr84uQDNhH2N9EaF3bzizxMZHF7uv0QHs9OXlK9jJzu8VdxMXJEABSMjb7Km2 ###ObRqW Lpddj89OrfGIVJ7dUDq/YWsUxBnHYFqYil8k5VFma
XlK KM2tn7VZ/mUVfYHYiK0RigzAa33RuQ1McMPRj0qesUHXFcWn3sQ/5hvElA ###V/ qyXePE1uKApBtlXdwTLxBqXMk7JiA2B87IE3sazP2pTWTrtniqxuXGl1p2o/Q ###AQitulIU2Tsk5u19dBfc3Q0 g7z5VFtuQwCSOxl7aAqm97HE3M1LrGDjnZxHMZ21 ###
m ###DH27e/63GUPf817124yhb3yv9m3G0He/59j X5fsg00I8nQkh/YBlTHgR61cj8yP ###nPlNSU2nZkgekQnF7lnYRqOXJVeBKdlr3RQavroFlCSZ5KkBfiSnTyOrxEpSy5GF ###mcA9csUhmS2z9IGWvi59N/8fQModCpDzcwJK9/ p1KuVtcj/
20bAJ ###v2j N6q7nW2MImWksZjmDZHjtqLnjN7vdYd6/zEtSrQ74QFqRnwfHs 9weATmwxF ###5IulyOLNn2VmJRhh4WwVWeZRjRMCdoLbUauyXnDuMmpYElh4yipfvCOXUhqbIUbi ##
#Z/tRAPz749OqzxsUeDLZToE/LKIviv5o/7BYjMbYAh7ZGdyHz253ZIEdYpUwmb Q ###IC F98kX5DuvW218o74OH8JV/AA V1Oa9NGzB3hRDwuikNT9Mhi/AvZ9EYSDHvHP
###8w13q4BfNnVzkgz0YSCgj26DVockceCiKHQPo1Elz457En/i/pafsPI67Fz4zeFt ###OQXH9CyT0BSf tanjhaKH7LytgvZ6n3cM6uAwYKuLk8G99TjFq1DMeazw1cn5UuX ###M8pUJ4ZYTDJ346k36Y1D4RhsetJzCsAVe1a53kxcyDj5u5cVBZXYdvz0kWJTkjzW ###cPyVbVbwgjpbtpkGfLtqM6xPaFIFHCadbGYv/IvsEIXrIUz3egDSREFxgBJ7cv9E ###9ycW9wfXQ3iTZUMHPql
/dFvzOevZX8jfFKKnXmf ###PtouYdwWnDKYlzkYg9HW5zSanz0aDlef03DVHMPheGvTjJfdI3ZZy9el8Rff3vPb ###XeZYJgVtPPOvAUIxWEGlTq/XCpYAIUdB0S9NRE0ey/NhMPbXOh SzjM4bp5VYGCc ###8qriLQ5ukN1xjlmAeDKHWVQ6sPVLqSB
###ivIcVd FP8 NMasvFgx6waDTGbS5xh1m9sCZZSoPucZPClywL7o4vONdDj4Yg4QY ###3n8KN9OTRVLwo2Zgk0km UOqDrrEmZJIEnA1uQG1ejAKmtfDD0ypk43Ls4tDUicx
#upubTXhFQkfSq4/mbM xnUzwOYPnNyXy lRivRbdFJQYXTk2KUlkiNWQMJ8J/eUq ###pAJflcTgmIkqluZrWeQfWd7jOVGWh19 FSHJzfHdMCMBGHSAILiQEM86hrCS8zBW
###Uy4KtvU lujMvlOVzBc Mdgw/tABZebNOwcuztkNZtP4JNiYmSsL2vQGrQ7hGwsS ###yXpEmKZ6NALNEEsPjVvtT8/YS1D9QOG7a/V6hueFnXLQWCl1bpaivF6xHBH2 nhW
YaWsoR0qMkm1KSCZTRMvSpy3MBau6HyXeWQtTokzblGQHMdabP o9Nw6 ###Cf1gJfJ2ruB2MvJNYqKMcKx1NZoMx3qlMTLuwLs28PHzk31kBZO LuPm77H9T4r ###fZ4jiWFm9ldK/XoA7VyHo0MQ 8H
q6wWRk5G05ioI/UDY5QIVAg8CZk3Z 277Gl9e3Pu29f69ufcd1Xruzrnvmta3wmZ ###NfUvVlbc553KfI3qvDtLuG1L OBOg1n1C8oyIoxs5gS8pDM3NR9nCnOLWfsMCB05 ###pG1TDCJlCm1NM6YMDYuPxeBmZhHIyFCfTWON/
#zTZPi0uxXIUgrQTnusqaOo3InQEtGBt2fjRd SQ/du4K30S3swIap58N23clRo4b ###05jH7LJi0mYA6yFK2LhrqMWvJZ9G00uomzRt7Rh1Tbmy7RRBl7S14b kNYxuW ka ###Iv221XnHGs0170y
###04IaWLPZHvYmIf5vCY5IYHTsyf6Tpd8SMr lpALbdOcCw iFu9YnHVNa2jbg1e3B ###3RCmMvpbyKIwWYzPFQnuJDZxLhK/PGpXyuDxtUC80hvDZdTVriLa8ckKfKED4WjS ###008rIakjXBXZTHUIi7rbgM152ZDNJkQxeohxFqAEQASvG1atwsAR3rehoDIJ6Q6c
###YzLuIz3NIXE/dIPIAw2x MhuOgPUMwvdfvMzxvKIu4YWegEVKVn86iq0IWVWuq44 ###oTmbCzRzwg2KkpjPzJIn0bETpLJrjLIKvnCWWiCxCyO4it8KGivXyhP5Nwx/0Bq3 ###no2/jJ8UN78XbmT6FZQv 4N70mjiAKV3kyuHzKY4FL6w/uTuCnYgSMuCfwG5AdPA ##
#quB4OvQGXEcKizpjcyT4i8OyVpFjCCMQjEECPSblkCzm2bNiiQgUfskYQeZ0jEao ###AkMVJ2ZWEsrNzIYqD6Vq q1SUYrTVIzyiJSUoofHZKa0u8ifoFJ8aeaCzJVyMuvL ###5MSTmV8mpsbM jI1cSWQMQjBpyAyv Dn4ioe6O1WH/T/VjiBzTro9x6o3MaAVZ55 ###TORJYa2xzLDLBSqHZIr9IYWc7r4 LLLfcjGLf4rkrlQPh5eG6fKkJzN9fXyAMS/e
###EtGDdMW0OsAfWrVPm1MCL3 uRkErLwL/afkczor2r49bcpCScc5IqtNtFANjrtXK ###9XX8w5WVzdxjx1jN8cFHE5ro/HF8TWJ5jFigD51aNrPHRnbOR07hFYlfI0uf/Wtk ###zuLrL0cyL27 r FQmGLs2Wnt66OYk2tB0
###YNYTbD4n2XxOtPmcbPM54eamQCWcWdOcePM5 eZzAs6HO82HS WUYV21eBJ7Samo ###g lKXEwtypCu78a02jyiQgYvcINBusnYTe1mB7NHJ3PAfy4ln5p5 HhKL/L0XNlO ###w9gmS5AYUyflOimLuU/UHODkh2XLdeZnwqJkg9ywzGcHuM7rcnlzil5i2tyjT1rT ###RgzHOsK3 YgzcnHSLk7axUn7h560YhfnEeZz9JJwqm7m3o0F2VPWqZqOXdVNxqn6 ##
/gN/KGd/o6EppjgLucBL8BPmqFGBBzjynirtF5aiTTqxBC ###NRKIR ioleWeos3zy4sSO23u/Xx52DAPYUNCUglgpbBVYu1 HqnL6IVjBOv9zLTH ###0Eaq5Kzi9ALTvGUbjgH3SmXxeItr2ASCXX9UVY7 oq3ak/uryA1onhzsmvZkoSDJ ###olhiBUEY8KtXSgG0uCk42BJPlNfjDuoiZAH4B9IpOk8VijGnRJ1E90/OGodNnGwj
###a3X/aeYl7m4 ZuZWmoGEvSczDaRJu7wAjRtVPKvdNz N CpQkRz0/oi5Mr08vESf ##
###y4Ypu6c0JDm Eg8g3LruDVpjioeKwugKIAO/PH2732yyohVW2B/rsVPG6PAOM A1 ###0XKCRgr8fcyNQNnTYHpPBBNXPXhBUtd7bnA52DvBX Q1VFI39GtyL0cnl6IXpxuJ
###8RlQdHN/t3F4DBv3tHF8eUylnl4DozksfCmxhyJr4jmBFxH0pxO07E7wLgOEDb0b ###N87rNWF6Kuj6WeXL pH5c3KC6hyGAPn/qlcp36it 4nejk/jvW1UzB/VW5l6c/RU #
##9QVcESgpiimHq oRXNvwu1dbr21U67X1pL4tKKu BmXR7rtMfePPNvwu 95w9e3V ###DbgzFGoOt7cm4a766/X1pG4tkL26ALno6rZM3QqQsVsntBvS7ojQZqr/HNp1Ahah ###9fz1hE4JVA3WDQK1mNBpGTuVsHr RtxQOtEoIvKAo49haXyBvpr/vPa8vu4/X4uB
###NdGWvfJFkmG8jVw PoiCEJBZF4PU19aq7v7lGvH 4 83FGVEdMFRuiH69tfcPUuM ###Ys8WZi4v3h4q87D56mj3pCHfVch2wpNRkqQrIp8LZugzXmP9oD CM1V7VJCMvWg8
###jYKSMXqX6YcPHxEeMnUOtEfjztWNHl/OPz4U9jtmsDqRPxNEggMkn6ZsSw gsR7N ###jEPjyIenKFmJpnBMNIzxZXi7/bDXvaKnBpNvjVu9AjBTZMvGgxIccmRPauJvJyAA ###AVai0DeBp6VmszXmInnQbBYKILoH48moX1QMWTkJ9HBQimnUR Jl2XhYI42qP0CF ###s0QGffxYlFMT1a4ZAAlSPXzx5Ah7QuM2KhetXpHB4wGpM38FLYHG/WvnBfxBNbV5
f ny4wT5hP vQpEVPgfA ###MCmVGHA0 CMk1sOVnW7fB2mqUCyKQo3Sb417kgETaVFkYAs0kXarFwi1WHNU5N1w ###gayQ6XPZ7Z8Mbppv1uOmfz4ggA19RWNN4e5pXwXAwMDFSHtow4jCmseTKwsgtiw9 ###m4dqStOh0JiQFVqapsxeJw3OssMSW49sF2Jc FaN95SirjddgPiV2obtgXneDdpB
#UFPz PT87SX8993uyfEBTv3sqNnYhd132JATLXsVj8erYpAVBaOOgl8nQb/9QGBh ###ei5UO AfhMar4y vQKP t3PEowYMc9lsvD0/BxoH6ov/wIg jXjO4ad0eX3yAymB ##
###C3JGV7dV55lr5/hfWIz gPjP5u758Xe7/6/5tXrdvv vweuF/Wdh/1nYfxb2n4X9 ###Z2H/Wdh/Fvafb37/H71C QefTxEPaigtjckQ/0uhk6kqy qSKLck4izFNa/mu0tF
###VcfafX0btJd 0OOPPzAQuM9g71OFQqlqSTdwLD0YDMgf2 pEeDg3qMFmZhQnd5Lf ###5yOHgJ1pP5EaZM7vMI O9F3GSK7mXbfT6QWbS18N1GwmrYexGNeTfltl6U5qr7wu ###VC21pvi 2QDtrZCWxZ0CWC/onjsU iod4NOk70psBlNFAPZINzSHjPJocc0RTlTU
###cPfXHj44RYNnUsAVEmkp1qjiamRYjKy3TWHvtKJFXCsgMmEnrfKm88NoeTKOcjcZ ###WdS3E9chUBxBukj5aosc1mIS2fZ0e4zvywJ9aopoCLTU6nHrH53svpT aCdnjUsk ###6hlEIRA3jlJVckPUNxNZvNs9YNcADr/7Q5WP/tQbz0HSslO/5DhS4plhUo4VmEWT #
###BOXOiUsM32Rz5ERZNyoqIEMKNXyU4H2RPU0C GtGGqCv2i4w8jop3rcteB 3cjdP ###zy5e757E5kOXEjeTXmukcv68YOGn7hC98PhuIrOgpUtl4LMyFT7nsDvz7h ZgSxl ###VZXGqifmNBJXfdzM/hhNGPuETi2pnwvafGJYP1kRjidwUxeclAp3hNXS9d2mmfCS ##
###x9eU9f1TdziEVWvxg0S5OGj SJQdvjPo/2285PR6gq9PLs8p0RYSDwUl0AO694du ###7oNer8zD5jrPnJe36SuGTA46bDb2d9FsnFNImEq7yrrW4cwyh7LzNObc00fnHjJk ###PbWdhCIntQjY6XKop4wGp545niM9Ol2fOQ2vmZ4kVg2Jed1MJVSOfd3trNJNznjA ##
###KO8RFJVoKpkjRPqbSvQmL5Uffhli6pghLigj4ekuaGEVLBBix6y2QQWvVHqLkcaj ###EpwlbcVaaNakVh YpA2qC6YKao5bVx9YVThJ10usVoK/vkYzMFzFoPtzBPakdeNW ###oKQhYVnrPOVAAwUCr0R3diJ/8Ni6pQBQyVbxda8Kbf7oc983fTJHwR0GSaPIf4OR ###2 0eIF5sMxw3IOfsz/QE2gT9YHTzwJ5cDSb9dkDl1Z8s6Roe7mTKLsxHCfnu1T4F ###deKGdnhncK nfUXGYVBpkouMoFhtVLedpBuz1ESGGhvdWbYylmgNSQgmeiny5vBK ##
wV3fcBY8Aj3bXGFyMj8J3RF/PhKkaQoUmjd ###cd81XCQx8tzNV1r836zDabfUcprx4SiCUDi/YxCrdPdxhzgBaqUnVwyqhmjgCOQi ###thIt4tThdN0SE/4nyfGLZBAQGAbq91zJqMueTnX0hY0kymP9 OFzusmt7nUkw7 ###lSgx/GYUngyBHO9oQqGiiRQYPJcCedNwbyy6s7GjB3gDyxtDrKJQntbRJBWbD7po ##
###x38JRiO04Ud/0C8RWsmtjew2UltSa5TgSuBwZsLLp9FkHJShbRvliNaoDYf9ZzhE ###ftVn3cOa6UaIhQZelC0F5tR8vfvT5lKSkbABu/nwrPnmLbDIJjBJnhiVqz0Oi6HA ###jxxAkBbNniOCHKtiVkKJTfkdXgZhKZ/0TlboAr6sFiVmuyQF j4J9xHDVC9Ks/W ###2Ko5JeB7TXhwDkeIfefmKkPs/ja5MrEgjmheJ7t4yeUgI7Se/sK11LgTqqAm2U3r ###
/I s/ERbOTuwC ###UNFjTfsXOXnJAJC/LpRKOIuuQiouX47miBRIKPZkfKE7HiT8eM4xyEc74cdPLb S #
##nFE3ykh5Tfk3SVAkpxJZGGYADEzVn51 DGcyZDSBvDDuqMWNZ7jJvFWfzfoTz7Vo ###phX5owa3UpNICHidLuF1aHrzwFFKVbA2KeHIKhXIWqXqWKtYSaOyWqUntZqH/6Wk ###JC4ITD9Ga/jXomKNqpuTF4TcCLhrfTmOZUiyoej2vzUU6NySAUUDTnNGVYIw8oy0 ###40eBE4eiE4Rd0PoyIYkn Q G QMA8PfdWF/csUUCRboAQigslrPiQ9mZvWyBt/r ###jmmanQk5cIOQDlKPzHEq0h6u8sE3FYpA7 1x6T
/HYkAPjkm/RRR/0t2uKE2jqGxW ###qJSBzIuz70XRMVZSO d9tm5sELTyZ6ATBJugqlNRvPsARUqP/roFGRkJpB21zQ1C ###9I01MHkpkPhJjlDdfpmXRxuMQLzsCGPN/mA0CnigZOHocL8I4K16 QYG8fa4v8d9
DZrNVuT0gPQbhLDDgc ###NcIweb2LqHAici71UZcwxHll0EKfSeK88YlouG50b85Hgza6EJqFNSmeM Q3beIW ###682uuNeq04qg55RWxZHOeC6jFp49I/MGqtXASbt9RBWL3HF5qyZ02mkOB72HZG/c ###5YGq3SU9X0mvuoOVxynj1/3BHZxFJQTvQ6ez4n1MDb/kvS 3AYSSEdgpan9RYKdM
m04sWAoedl72NJBCgWopkUtcDB5sXZ29ODeq0QecieFAiCEu/iIyvq ###0zL8iT9tUpYpmErfClGUkPU/YtoE q3sf5wdjD7MJA7IVwMLHvkHXkeJVES0NF4f ###TIBu729BzO6j4OXiXCSe9FFC7qEjOXEaEkxA4O7BW7zg6kNby8tdbL7M2njLreYb ###zy85/crvBn3YsenggYDIv//AOrqXunO
###5pvdD9zpBNOsn11gPdaT831H5cFzZ7tV5nNHfeAJ6Q3iHRJXeUP/vcZn M81rH6J ###gPuM51on6I1bsS9bVR/g9nICDrTXugKJAv5DfXY7X7Yx0r0NnKC qQXEy0pEiJb9 ###swaPh
###rI93gLBFA1Ype/46K4xwbwMB4o1g0Sj2QR9YYfFiBNxXcPqsxwfhCz/CDH0vWOXZ ###M39tzewUG0CvEtSyecwKAnL0rs Tg4aztJOvGQ22XCRgQYwXPbjPR9yEBMI6A qa ###uJaP71qi6Eg6ONofhJetK4pfgRPlg0CbKWRIQcPz9b5oUzCW2ZcMoBFjb8q hAmp ###xbGNUh/
iu1Ih8Vgb9oRTJYmEwHSVC5U J8FCJP3BylhFN7hEYaVwUPubFw2hdyBq ###FPjUJB9AQcOvwARI2uASlxxfhDp0OjahdUpaDgj45AYz0qC4TBoPLtUAPooE01Bs ###Rtyug95En6P75GHnWGlK454U1QF96swh/tUb6ysv srmGImQAhfR BpShSaihEaY ##
###2ZfnLREeFnBQICUEYkPD/sC3msatS4QUeSStqw9/w6JUapJYhnd1yRV351XiAXZU ###4grQmAAGYrhLEqhWYoDEVjrfzNTqOfg/IY ORCPuTOLz00dXbSTxwY4c1BVgpuDh ###jR3xap0vfI0/bWYGWqnOHCxFHuzAFZDVlbH0YHEz/8WtJInyjuSwRopBMfSOCqb0 ###6ihruEv4kDn6rnXT747RhMAvFl30YoejmROkJJFyXl69ulHdoCnBGAUrqJPKNNYi ##
#bMzMpg20H/PrPvgcdYCOdQRKyQWOeMQtHlXCb4K1KOFgosdG3m1dX1ur1m2h3 dF ###3FxB3dl09q1oLX2bfZ2JLQFt/t/2/yCaJdkZZOi5uIFk H9Uql7Fyv9VXatXFv4f ###
H8s/D a/4vzS2Baq6EeFNoumBwuzOeOOiHofmNcOcJ ###FEiFga7A7/fgeezOMsmq7DCKr4gUPqYUu E9t65Y4UnFfrIRa7NeKVn9rMXaVGP9 ###VGrWk8q6b/VTqVpt1p8/jz2p1a0nG8/rZj/rGzVr9PX19Q37iWf3XK/VrH7W6vZX
###1e7Ht1enXlm3 ll7XrXws7Zu089avWbBs7ZWsdtU16x5rXn2LNYq9grWNux51dZt ###PNfWbDqsVW3qrfk2DmuVqtVPdaNutanWNyz8VGPzAqRa 6LqVa019Z/b PHX69a8
WbDNbAcc6/V/kSpsqLk3Nyl0zFuVrgHTwxOmeex ###mBt6Q5Uy54nNqfbbFLjV1pMDmepp5ywgKGzRU1RuoNoNWCP1DUZgiCTklSgcDP K ###XCGVMw8BWFbF3OK13GRPtjuxUbxajau7ihhrTGXdiuTXvKkHRVHXtluVpEj8iPKz ###6Ynhr9VwbIdVXEFdOrjA39ErTAFouxbRTudlDU6A/Z00dw/ hw/p8JTTx97KHnv3 ##
###qBJGJy lUZuMRjh7mK/pcB9R9YR6LHDKkEfRRimaWimOIC3YQxPgpARmSHKx8eJy ###mqCxEntqDESRJXFwyjv0WQOYZUPJBbH10iB8H3AbCCmMbbkfBQeIgffuTfOef9Ds ###tUaDbqugaLrENBaXNuIuuaQKt1kWAryjoDwaDNCSITqntWp1SNsdcOkwIcQim8Tk ###HlIHzZuLy buOeg9PxWSHaCjncqP7Q1W5nvwffONeaTpO1M7LNG11aTukl0xJnFw ###xVb42Oh3H03DGDy2f2LuraQuFgwoqQRw1V vO3YQnTroPNztSakxRgTydVBIWHKK ###73pNlYcSaAELycTtvzBvyr02EidJ OhKMBn1X9e8imfXf133Fvbfhf13Yf9d2H8X ###9t F/Xdh/13Yfx9b/
wVIfheW vCiCVh4u3/ZsCvBuBqkV39hUfWXhJ5QwTw6vhAK ###pv1Trad9d5z4XX3JTvncJLlQl9yAdQr57Te3VhtC/x/Sx/24yePOgX/RYXDFTwGu ###xUqllUK2KfqcIIknKBbDHSUMd6QN59bXQZBtPexNrj9gJuCPm27jQzR3mSgsoeFV ###a9y Ra0sQdsHlegCzyKescTZBYFMek7y yOQWcKk9/hn89Orfye/RwtacgOy6B4g
###WjbdxuLlfTRpq4TIbsLISIvM/6EKlwnbg8K4Fy40/8v8fzCIlFcHnlcO6Az/n7Xa ###Wt3K/wx68dpC/1vofwv9b6H/LfS/hf630P8W t8f4/8jFbSzo6PGoaMEZwH 7/Xx ###afMNpg1pHuyxZZ69kK2yOt7X1uWDSNXb3z05pOvzeE889QYmIDrlF/gN3jEmv6B8 ##
###KoGPovGS/Oe6N4C jByfRMRapij0kEIfHbWRxZVmr9v3ocOCRn74FaYZE8zLTqsp ###MgajN1wY0UFEjrRWhWh/mmBdFyLQtiLii7kwyUYrKy4PJHt2dLAi4qPe6abUxV7M ###6eyLnNecsnR/A6o3asP CbOOVdjTpzoB82eOtE9HE1BUYukAc08gws4K8dKDw5PL
###Xco0xb21kubn3N4wkuw5I/MaeZ4IbKRCrn4tR8No2JV90T4gEftXt0cj6l/A5W8C ###yVLbI1TSzMyNmHyOv 8Fn4Mea7ew1gIWy6N8bxaUyZsP4Mb09shjbXyin4CJ0BV9 ###YnaqRTX9nbThXFmtNBymfLliOjpq2E79yCvFqeDr0vTU56Y4J96K8VXfbYOCNum1 ###5NaKpVV8HAa1rRH32RQT4On809iwgSLXVogNFd9CDvSi8fO2ez3medU/gWo56Jf7 ###wU2LnImS9lN524lynf3pjKtBUg4yKi23m0hTrSSguGyhrTqwfb HOe9kYsumyvYo ###TwtD9CsZ7HpFnA8lVn2O3igiATD9sc2qHnmfr0fZXL8qoS6UUp3yphKWkbxynPSv ###modIdaY8stXhFeaR5BK92PMJkMePFCAXkty3kOSSi5xgmmhyv5qjVDe9PPFSEAyu ###nKjJI0oNw96/
###ONlFDFiknQMhNmUplwKtvLbeJLZ9avEu9Y1h9r8jNkWe5jA7u3nkDCSPDJnZz9zD ###0mlmYQdZ2H k/YeiPQYipyoV1H6sKSjL/2O94sfyv60t8r8t7D8L 8/C/rOw/yzs ###Pwv7z8L 88fZf0Ty7rtuBwQk
n9qx8 phuSzqOpshxe5Q5jAxyTmMzdZx8/sKoj ###xTqcCwhIieJb8LfIEHAoEogTQvHwEBPrgx7DcdrstjvXBabjUF8JmuUvAxiIbqs1 ###B28EqYIg VGgQpQSGmBe01t6Ucs K8O7ZaMDzS29z80LfbbFfPjHDhOCj/r4UYX6
xLCP QQBZPn/V P539fqi/vfhf630P8W t9C/1vo ###fwv9b6H/fQ/97zGH4dIyO0eRCVhYq/cARxmThageMSMUIyOAG92b89GgjfdVBLV6 ###wUN0g3Dc5IneeeKCSP7WRbrCUnJ9dHFf17o5RlfekkP5e8xPDslbRBkbw8trmjkO ###7WqiEjqEH2JZRWv8Lfvc6k2CcKah01z/j0Ks9VVyattUuAtPzutR8OsEdIkHVoDG ###xTkN7crz5sztxrISbuZR/EnV YTKT79Jv2OOSvqlffWJUiRuOhPiLZ 0brC0/
XA8 ###EqYDTODI0YbxAxuxbJxqXvD2/LBpJNCz3fyjzrECO20Y BMpoUml2n1hhKjYyYIl ###0PArjQIj7O/92AD9HRiZ3zz86TIjwaZpvkgBeWcnngk6E2weqz8j8F7ldcP2J4/N ###Yd6Yrs4EbBUH
###Vn3fTIKoEkY t5Iirmt5 upWys2alXrTNzGuMg0 17zbZQLF6VNxRn3w/H1pVeIX ###GtT/Uv2PktKAnn6613y99zhFMF3/8yvrtVj891p1kf9/of8t9L F/rfQ/xb630L/
###9JLptLZh8qvna1af9XiBjxisNQunnslP5ZpXdTrdsPZ xaRTRfsb5vpsaGur0T H ###9bnaU 61rys4I5xWFU8xzhXPKgSyLguG1BTfi3C6btHpmolLeUaJ/aIqYqxH FCF ###VyR9qvWvW
###IvmoKNzjV5TlOsJp1ZJR5PrXTR4t b LTivrFp0 t877dcPy7lWlpVvb 3J/bmyY #
###b1X1r5opFFQsQbGub1CrlJRsW98w/7UP3o21WB9yk0t4IkHUsyp PY8J5kq5lMxN ###KmxKsFk3lFBfUpouNMnDRfYvmU3FVDrsuRkHmmRMsi/577pV707CpeBdjzFf2VZv ###owsL6rCWisuapgxLhqnmZAl6G1XzAFmLDgMbp3InR33WTCGubgpxKDBHAo JUzWn ##
###KvLVTJyq6oIWndQ0GpPKldqfz82/5anjbdi4z8OJ9QN 3bfv0uWNvwBLlqaUB6mX ###6 645O7LN8BWtrH0wn4JfZkFH5XwwLTljHtJuPuS5Pa8pg7NeEHHrL584 D39CNl ###w7cKG btS2ddFUN3ZlI3zOqrpm/VmqG7q0qGUgBSfgHxvuKeJXVDv5Q6o5JXle B ##
###vsJdzjOTJNLqMlFp1MhJyiOQdpoo1lCHhLSS ZDnNjAeqUyqszBIsVwgiWOfvOYq ###1r8MRljBWFZfDbnQFb2IvsTPwlWEZTAiia9EIl/7djAAyegqCLXGswIYm7LM/0D4 ###i1J/2EkqqvHsFGrVmcohIbg516zfrOF7nkciSj8RkYH 1edfqS08/SAbxr5SST/0 ###r
###ViHl7NRGxlDODRQNRSOoWraOGrYrwNUZJ qMoRRuS27eZxT/tutgTzcrtcIJQ/EJ ###oWrFc6xMmZbKFhw4obtTUanVmS35ljGU3IkJsyL9txf0b4Dx4NEVtNq3eajDMVTS ###SS2HkucwLNL4Hku9KBLhVIEMzSaJFASKPZ9xJMpC4d1 HqxaQ9llhJ3cESsTg5Td ###bOxSaWLrHHFslVi3EQNZ2Y6kVjO1UcR/9Da6lKtnNtK53C4J1v0Az5xrzCIOFNyK ###VfxOnB6cCgXrGGBlvGYyW
###Yf9f2P8X9v F/X9h// 9v/EVNuRdAR7W1WIBkGJP2ZXD6DGXLdIQfXNKjiWYFXI ###rNK83CgllrxpjFF0F5owL5A0azZs193FMvCoUoLV/mwyRvNG2L2BMxbGBj099 hO ##
###1g3Dfyoh6nypMVyQxoDKOoFRivIQa990 h6DouD/8D /UkouEZ Yxe1NStsh1Vk ###j9nNPVCCKkp/
EbxmKpCUYRcCE1uM9je3 ###Jeg9moZB2cXONovZgbhTIgCH24F4ozU6UaNtook5bvPlMldaQ1W8H25gk89Lqh/f ###7MeftZ q2U911n5qZj 19H7kekf9eLMNWzGHrcSGtYhC9WOxkVJ8I1sEEAao6c2B ###AtbntHIbc1q553/MytWzNsJsK fFVw400tEcFs6b01bx/pit4mVyjNkQ7scRfj2Y ###jEBAejzG/
ufxf3P4v5ncf zuP Z ###4f5ndfkH9k86RkhQV4LNEltm7J9Xo25wbb2BnXuNvwFzwifS0xA2djsI8eKGXU/6 ###5LoUPlti4o6pj5dMKsXY8ekJLh/
###agLoUKVDQVMQuggLesCKU0biACWPpA i4Nd9paDHGzhJohsAcz3wpLtGMYUEDzZs ###jUAOwoFpPH5et67H4oCS3w76QXztojtAgKd5BDu3EF mUvx6gt93TesDu9z7dyl2 ###Z5c0y4yuEAGoLOpd4XTXc2HBQY49Puy2vjzdvlStl
###ekiUnFhFkwe2s2N4aRcQZk/zju722yN 2z/hx4TFC5TbuOrRtD0BWh9KxkWNj0VS ###JFbkSAKjD5JyD7ooFrPxPfmPwvIIkqAbUN4W1KpJD7ZdyCTvYC1200UH6DflzgAd ###HbJJ5OD4XdVvfm6N3hS0i30 Qoj9DQYd1rK30ZNCCzrY2mJvAIgiW2VXVf9J6l17
DgzzzMI/O8oTDPP8R ###rvZsMBo13 A0H3WEP/4E//Ofjv8JZ Ms52KEMk4aMNBmfhWUQ1P3HIe0BdCcj0Uy ###dAs9HkcQhBwLNfS2tvznRenkJoSAK/s4oTNL1 DeuNyPY3PKdYq9V7xYbbZpTrF8 ###uM11iJldJZ1c23/
LWOAP5hHESK ###tnTBOTEBpb8L psI3IkT3sl8ADbgPdnNQunJbgZKjb/bj0DxCpm/lrGPbESf7CYi ###2oQ H57NB 3HIH6aaXAbSdYNPjekzIew13Rw6QZ3Z4cMXsvGNizoCYjIELjCCgVq ###j94VqAMdwU/
Mvb9peP794nwv4/B/94B//vE8d/Hxn9/Gd9oJ1nK ###LLaZbptJDTdGmhtutlivFQvibFtd1p8ur5I8l3vjZc8F2mgDsFa9NuW2yzc36Nfg ###ijjDq4QZtpNm6Jpg4tFtTFE7u 1JenV2hUHY2t9tYAQ5J1nLnCRnMfFJZglemO V ###JwinovIn//DqyUzUbqkdONAahoo7WfOss8qeYnLMSnRJjJ9TlIXrihhTAUU3q5j2 ##
LgqEE2Egap5YXSmI8Dj RdojlTufC5n4zMDVZ0XYiL4fWLcQQyram3mQNZ ###h nD fmHq2oxMWI3mARe9fNuhapfsDKby60gkXzbvbnFf5EPSHy3I 8KbSOpaBRt ###p/j6RhH6FupaFZuQxRRjG9VQvqkLQymLoTxPPzRN8haKIzJyR8rjjp/3mNMwUq8Z #
##XA3lrVVuBHQB0Uzjaqbr1PSgWKavZFAau5cbCWBsRC2MI8Q6IDbY G6YLHvCSzNf ###RqHQAvVbeYNtkDPY362/2Qv2zyWXnxB9vaW3Pj41v4a/4WtoZh4yBQCk6Jp 4jIA ###3WuZv1MwAA2nQQGSu4kDr24hQTxIxIKNBmxv4EE8SEWEhYfMbcEdoVLwAA2nwQOp
e jjBlcJVkdtlNypF185XjbLXS4M7cx8bbfNPcpbdbU zYkxU7O7MiSbNNJM6 ###zeqkuWc6C73GZ1qxZhvR7Gyzrdcy1Byjbf7ZwqM8s02Yofw5OdHnWq9NN1epz3FX #
lTVk0ORudlkM10dywYXGn0beDO3jGxm ###yFqZ8OY0vE0PbybRy2YJ9G5B64SMBEMNtCSyFDalPPgTEVM5cfg4qPJc82tNzRvo ###9JWdzGlpbcgv8mzzi6m2eQoOQZtSOHQCkrmJL6bcxI8BJnOHXky5Qx8DTOb2u0jf ###fthsFmDc0OQi9YsZSH1GqPDA5TsrhxwiglMSF 1qbkwW7zbUdowbGB0RJzxQA4Oy
HFH XQDauMqLti1GBh JNvrLNj3etb6YY7S TDXGTo4x ##
###Ekdrtn caJa8M2zUykcx5Caa3v4T0Wuj1oHbxO1tNkre3jZm5SPfESv2vwazTrql ###cCQZLBp8eSdTKsWTLFkhpVFqJJkyVGUQXST9TM3/eXrSOGq e9O8p8ryYbPXGg26 ###rWftb5X
5yP 5yP 5yP 5yP 5yP 5yP 5yP85U/5PlMxf ###7b47bAISjo5f6sk8n8D2vu7ePLt9EuWWV 4LEnv1DMR140p5/
##IGjfspPG dJ5awTcCLhXyN5SPbnGeAScZTICpvIuaGMpBv3rJ0CEABnsnsPDQ2R7 ###z7AIwTUcr6AQhONnJdF3aanBC5qeq4KmJTYcPmP1mleu12ol5j1/7sESUPFUMTWs ###0gms8G7YC750xw8M5UMmhEO0AkX1Kt2SY8HWBeM1HIb45fvmmybQU0mvHgk/54Nu ##
###wc8a02MfWTkVCH9qIHwdCJ20qXfXBa800kdTWFEdleyoXNdaxEexqgC9RiGyNxgM ###5YKAiFdgnxia5 CfLVjLMv8VvXmM7Bh5lu4TupbaqPxkoHI axpH6af5oTQDrZ8s ###tOalMUSOH0cOYSyOoEfSmwtBfG2 F5L4aBrXiAqsnrRy8wUxY5hv0UQcEeqcOYU5 ###BTHCd9iociSBrK9Lfwb7T9BH7RPm0QHdLnyM3Sef/
#Wa8t7D8L 8/C/rOw/yzsPwv7z8L s7D/fFf7D1ZsFEYedkgCEchxnaCsnShsGBlp ###gB8MWw 9QatjWkRMWaoQyYP8xaiJ98SBbo4IYbT9UkoRyuPVMyZAGjHr8zRTRNDG
##uw8HPa5oX7foGlyTf2zWjxsUwTrdw jHo4tcpwCfJw60Pwium2981ykQb7TF1qbl ###67FO9OUz5trkc01g8xa5a/wU5n/58/lh893Z8f7hgaj2oIs7yUqEif5hd9y ZaAA ###GhJOju FsgzalvY8SdFkKiwkt0RLy8JXHVAOXPhzI3n6FtUDeAd4hPJJWtIv/phq ###L9vWsayelm0ATgw1WZ N1d8WK2 glmM9hjPQi8HqBKdiDuHc2s4PrQcr7PnmUoI9 ##
###A8TXdB4s1g942Ib WD QMb/A77 7i6SkjAM8MT4OdDf3cfwp5 PPNg7o29PNxzf3 ###VB4BQx/
SpkvxTifJ9HPdJRacXJ6bVqt8X58fXnA0GE4/aUKZ sIhi6l3W2jDmA5D ###8lvBBGA zWEwatI2SkANbLZOcDUYfGLKRh3Br/znKtx/Lm6M GTpeWmzBnAIOuFk ##
###2McLkeL 4kDoz8Ay3/hrefzeNhxNhF/Th4 l9GGNuFTxEfvA E3ox6lDLL8033iV ##
QOIIs h6fO0wrHIzGH9QT7b794PAE/rffbFzuXoI48nHTzemhjw8mtlP6SPPh ###1SkBLUNNwBHxcNuHJB0wHV ACAnbzH0IhH6YFkFGH3yFcvcR433Lkt25YuULyf09 ##
### Er60mbY0Q yLDly jcr6hgV33j8myTmBkr4FHxN3wP4ehoXXtf321N L8/
###43grhpmS/5nnhD2M4 1sw5j3O/YwFfcH0WWOicdsjsKTeQZ37eFDgcuNxpAl7Zns ###tWTdmC3TZe7guqDdxGWY7SjpRHsUoLubCOABrt3F9BPoeia8xQJdzPwGIqUp3G b ###8V3GUVdK7r95cvbST56tPND5nLkx2pqKtQvtaOAepooNW5h1/AW7BrDoxAlGJbUl ###6ZzC409UFlNeMjJOWFphJPlErMpFHjZqU 8p4 iVvEhx/UQOanBMN7eMQP8ljiEX ###sCK1QAwoGcX9S6Qgyb6fskLKFi3Twf3Rgs247TQ639lOv4ZKjDgzetnaZixPL1 X ###jNlVEgiZLpDykbAbpgqHKQ9IRgeKELSoC0Gl4tWfJgIh7v9PXq DXrNxejGP5L85 ###6j9V16pW/t9qtbbw/1/4/y/8/xf /wv//4X//8L
/f H//8f4/0dPxhO0dzWjpL8y ###PGCfy0sM5CXkHujOjZEAWpSAFhLA5URNxJpfTmCtWlEDuhN5Ttw5gq1oAdPfmP9c ###tkY3wRgdt5tXwzAlXS21Q8MLpkrE zBWgA Ked1/P5VEkVpyjjk9awLNn13EXDiv ##
K AHFqrFkX ###O4HTuqhZGQ CttOyeBA4DIloytu0xpx2tNI0o8W6FkZUd9f741GvlNS18aVlCnXV ###p9eMGXeBledCWl9Fkadpa5HJn94gHDstrCeDEERhTK4es6Ta6G/e9CZBk9dMmctS
PyF2Yq759mKe4n9T9Dql1 3Rm32DjP0Jujtf1n6 ###C5YvnI/u/hd08NLUd p8Dio89DIHLR56UYo8QfZYbR77eIw6/SwJjOm1 kdCIhV7 ##
###bwDcsd3CI1e9kj1QKNkVH IvioMDdwwD9JkZB72HCIUVQiGf2xf23wpP8ZmRzoYH ###DJ0OUUtrPuQ08kJpeHB 8Sm90D xVpCTw7bx82RJ4RMHRWJLabe0hEILF3b6DFTz ###is8qVVapscoaq9RZZZ1VNljlOboSeB7z/KXOQDiH4MwDY4VWEZ0cm/ NXT67Akh1 ##
#SJ0E9J4 CT5Ab9AaN0Gm2/7vv0fL uS/1XNgQ8Gv7EnliXsdeb4sFIXatwEK0tew ###w/rtIH3m4qvOAD7BxaTPrY/dmCCS7Qz6QS7a53z1/wz156B8f3rKjw6nPwPth48g ##
/kRkEw9yi73l87WbGCPIQMqryfV1MNqM6I2s ###IZLg4FA7vOTOdIybiNQiONbAbOColnH7cDXqdoT23iRko3 eYwafWyC3YKTPq/Nm ###eDe 9aGdXmvkc6tH7W6HmKLoQ 2ja1HdC0X5mNLepZAZvefeQ91
###9j KmEhVrwPROMLqsEcgwPY2l75uUsTuJUZFkiAqqx5dcxGPEzoJpyDmdtvP2BHC ###AkJeb3LXR2VEyIF33U4HtJMCrM9gBHpKGBbhFWg9t4MeaEKXt6iXoLhrfgpEQvQR ###donECphelhutItmVd02YQb8rLmKa0a5oU2ryPanWpKmGDz9sYLKfKCLL80AfxbTy ##
###Awmau fnJ8f7u6h9N9 dHZ9jVfusdrugP5 pbnN8AFIsKeSgp52cvT84PNn9uRij ##
zyU8PxtZfj6z3H2Hu5x95zjL03xdh wtd xtdy ###RU DG1womq4s2UVyNmg4Y3K5ux gSYanfFwysoVWeLZQlAVi6UHxkoUqZZTwX499 ###fMHeeL6RNhKXlsqPfGCfljmt6VVFkB4w/68o5EF4Xhb0oBqJt9jMw6SZ NEyUcMK ###odb1gUcfqLYeb
###M6/mrT2H9 LO87lK48lHNTLGNrH6q1GiNX vJQ2 IppXUJuVVVmMeYiBsRTo06fy ###ry1W9dfrpMnRUUvbZ9sxPt46Ys7kspb71W5VefbcLzECSnQvugUCvMKSwjCHD5ib ###F6RzpN5NQXhYvw9ei1fQCBtibb0ydIkTP2r/C0vZsNG//Ogrsch82xDgm9pjLyqU
6YANyQldZ ###ZvGsT3y54n0sxvo2p3jDi3hHrfD81rvfjj0pW g0XnNjRfzZivbR12gNYQEj ppi ###Db8/nvw/BFGw63Uv32XjArpNNy2FaXwJ IPlYDQCbSQyxkjPD2Ms4WT4jX0Dvo1r ###wGM8A37TDKUCUZGmSQ8im7N2767sDKdvT04iwwQZtQsGYou0YuTaXsjlUYCQYD/b
###jYqp9WE0tcEIcTEYEfBwrFvxNfI3rrrGA/lrwSJr97mGN05oOW1ekXMEbQ6g/R i ###dsXo121xl1Lj9718geJ3bdvb6n6pqF9G1CvLooOoS6yKQM WdccE7F2ZDFOGkMUx ##
###nDBvA/lr6VMQ3ajpLhbqCtT4NAJrx6ukfa6uMBM B/DXphteXnBvqztn8UlJW7WU ###sleWnwgWm/47S7zAZS/MDzI6tvxJI70wdYN7Nrv4QfMMc6xr 2qkHc64t8UDyZz5 ###VtWpZIXVNFoqrhY29D ZYx/o6DJ2lhpsmZm9qG9iJ4YJ8Fd1rIgNpu0OWzKNrmIO ###8cBs9fD2zK U70Kmgjpw8VcFylejpe0E7W6oV5yLjlyxI/R5lVH8LsTl7zLSp8UD
###IoeLYClHzRUn06j2lQpod/BstegJboAsBp3N3Yz9pbrbqSR8rticYwMbnG2bGTzN ###hO1FjIa0Cb /DfoMQ1CiwqkymdUoQH/3/mByc8t4QAyWdQlLlF MXNzjKEqIbxHE ###khFgs8MKnr9RVusG61Ozj n0XSEnRPY/5DdRAgSMndGLw2IAHMZtyIAWLCiNc6IB
qlh8RztKxdP3rSOmrPPwYgceXBq ###7dtBSHHfHaqXTSmwwwlm48I0bWL I6AjgJfSdmEaMRKtrZOHevjBpnmcryaOb2nR ###FcUcJ85ShujgSaoxEn3AGz9OTuPBaxC74GjQ8C0aJcNubukf3Fv6N420eKQIFyKw ###4/6AFyTnqTeuHsjljGccYeGAp8sjmmoDD 0MWIuFd4MB6j
###87YVMl6OQRfw6HzmqZbf73G9jXTxyagf8PzSMqSbnZxjQnFAHhtcXxvRKQYNZGtB ###P5gnTrf/fg9/ec8TNr8T452cy540arHPahUGuJRyq5f0kVPMi1YslmPAUDH1/mMt ###LVXTymbwQ8yomdSpnZlUynWU3X0o6WAS8vzXwKuA98r0ZWP0G2pdB3hmrwJ0jCdq ###y61nqyu5LeZh0hKHYVcHl64azdvRxMWyxVRF0eg3xedy3 Ilaq668BiI 5qMBn2Q ###N0Ku5WKKb8qaHhnoAnb6AHsWk6sj3INretbVgy2t2R FGHBDvqo5iM0MPF3KSW3G ##
###Ucxts0LJG1PhUBus2oP15UQyanYXdLqTO0QMt5MCegJysOuClhW0OjnVutiabG/P ###gRgiGlQTaenA33ZveEkBWAUFOMqHOz7ZNIRtS5uCbsuQpgzhLpOttObZXhajk65y ###hhcm95ZDMoiOb FUyCE2nl61 FFXot80Bol/Rl7T Nd4QLWR1OfIES8CbruGKY/Y ###aGh2TY6XQzTR4riA5qUoQ4dA3jZz4cxfA0KtApFGaSyszlDQNoh9VfVZrkbaLzkJ ###FiQ StHAy1Z/JdOTVbsGIQV7pE2TO5Y/HQ21RhKLqXZp0S7rINWaZngK6FvUkRwo ###5kvlzF5kkJ7RNJaTyOkAoIErCETPpKeZXCN4cato7e1rgdi4nnFjZLW27OGpQJqZ ###V8Ru0JU843KTZ69oaslnsq3J5sVLdNNLggPZSUWyCcHHS4wYeSv8xKvbSDYvcmn3 ###6NKFCN6wXnCvOG7WBO7S3d6OyN9zXLo6qCP5AlZM2oynEG7m5JY4bN tdJcNs8ey ###4nbFUsT5IlYE7WM7znoQc6IQcGzZN9xpCdKMVnIGxu5tt2jzpoMmho6BBJ3OAs7X ###pQygQLfgQHE2leTj5gQhM19cMg1ItpXOIQymlc4hdKa1mXH/4jpSUr0PVYJfIZ2b ##
###BRJtsqDLyjKLGe0 NMTIv3k4iTjw6X7DtT B4 oxCQURz1Fihbgb IoWj2VESukR
###THCgx0eYm0lExbgdArSNFfWQvKG0PZUBHlthtOuguUp2F5mSeFrk0QCLz2ref3mu ###335LSGIRv7EU8Xt0nWx55xqBVdSUx57RPf mqTLJ5yZel3WER90UDZ d5KTD22xj ###Wefey3asmEiHy5LOrKJlt3cPs5quBKhRbPkh3TwWG1wH9oj76FQq5knj kQQg19j ###n5DyuXuE5ReRhcYCKyS8W6HiGCIYV6bsXWY8KQ78gpk Vlk1fkOR6AthwevPG15v
lnSmYXmaLICjM2hzVnDrif4r Y9bdPqkzUiOVJqjBbq2cTct ###9BQe3KPHr9gIVGFY3Pvp1xXuKbgrJ8TBd2I7V08W1Sy5vaDceXXjngO69xWoUm00 ###kTW1gEEz4t0NqLPCRGzK8YDUHSsglfQkFxDxh8v ajXWtePbLeZVK5Yrps0Qc87G ##
###VXdlWxDO37a1zlLgbeNF3JSXasQwh P2waOTs91LH0Dy6oWYrbD7Ma7Z617imAgp ###sX5UZFsoOaqPlCg3FnyDSIpykkpuk4IyDV3CKrOSZR21sDi9 ScNa9OYhuLo1Kpy ###TYNQ3Q7DDdNP 6JAYoUVTWMKDhGX5K65mR73PqwKrMcTjUczyoD2Qlrusf7XpiW3
###OS9cnhxabuxuLcWhyWGtyDs8d0aaYXxH3YiZxq/POL7pv5ZP9IrrgznByyGIoXix ###3 o3ZJyQ ZZfZV4Erc5DmohhdJKwD5PCzeKRTBW30qNHM8X2zFfTpyxuLP/NiJQB ###XoprtO17ukhIvVtWgKRzut0Kg2TafhF35OYjIuwOo6TlbJ00QES8LzLbSkJLBWV9 ###ZlAME3fqGM9nHkMGLaV173uZ3X81QxszCuAdnh4QCAUxhpYhN9f3 692T08PTxqu
###OKXn4gmYuWvoUk7uRxLAS B uBaFp6oHm tRlYyUOVutfb0wFnCRQioOipnmNhr  ##
###1qZVSlGOheoXvpQlppBd3pHVTxx AMnuUtr3sgiKU hIL7mbujIJqh5u5IyYTFPQ ###89ZXfJEA0yVJUhzXciF2Z2DL0LBrj2RtYm4l4ul/lHbbxZtLYEEjygU0uONXFrza ###Xr6LAZ5nMeoR9q85leo6h9Y8bouGXCRcUIF5oNveULihRr2WmOdbCVxcMm9crqZr ###L9XSXGb3oLp D8MWN53CXdYNiUqpqhsS4utVNpFiy0GugOo8vRZcakMx5nNyKe43
###zZm40 zWeTXD2OlnliyhfFUf/I9xS3ZupFjX5edclzTzu1q9Okgrpk5LDZogBP4Z ###o6DpDXIGvZsJdK7ZdQsYTgmNga3eCK8K2NWEMiGSe8SkgwciGmvvg7/1emi6xdMN ###5wHn25Pzk32RFfOJLR0ZvNEp8CTdNIzz70ddtOU3y/aGtDivVtYptgOnub/8ms0a ###kaTLO3Shkcgaf5iKN2aRMH5wigSjSd2nflQhwtede05r0Yuanl51Bt7wDRl3Ij3r ###ZHx6dnn4gr0PQJ d9DoU2NfhIXpAq2Gve3M7BkW9IKJrgy9oe6BsHHTrzY2uVw
###H xrxjWcQEjJj jG6SpotyZhYKxfH/gxjsY 9Qf3JpSt9ngCCBYWFkqGgCUmeYDh ###cDIaYgz3s4jTUh4zPL93/KdPaSXh94/oQAT/ys39VbkTDCZwJl4O9kmE0c5e0SEu ###Owb rth8b9NZ6waPbPxkZ5tV7bo36ByIpZNxoxR4vPAIadoK6s8bwm/QpdmHPkeH ###f5IeNu/2qcNnfXx4cNyggFNybGvunh9PVzyQXqbWDcxdJ1AVde2WlDLsClzsiuQM ###sTJw3WvtkNsiaojXJlNfFrDWdIIXoBXiuDS16yBW6XW4C3K/SuYoWlrg1T1NcTY5
/Tq5Mp2lFJK83Or2cMsdK2hOKr5LEVZW9WG ###tPUC1lAXg0mZ5pHF YSBriB7tR1blPcQCvpmNZc3bwGTLxIM2loczudWb4KCCswC ###hAmag Z7HzdzYkp2/k1a ebkFkbhZiPffvI3abUH5Q9W3YtnrrTKQtMQxQxHCm2J #
###gRPBloc8jX7dMZbewSuN7LMuKdnJyJwpqWZb6ZlR8whW5SoEOMVqAn/QnG6/Nc/a ###SilFKpc5nr5KugLPuLhGIuP42hrXBGbTKSLQHxPnaVsFMoBIDkR/VGRtopPgrJHH ###sbInmftnVmJ8xPaxslxPe9Z/h50zn60zV3YZS/aXsqXstn/MnsqE4n/vpvrOG2r2 ###zXRw dO3kya4MFGJhAlvRtqPVaybVViYbrqPWBEb4qkXZv/s9fnJ4U
/Wp ###PHqBtAJCThaVx EjmntBqM1TL/RM6JvLekcImHrNj0 RbzSPDvf/0/ZkVDFz1p05 ###09zntUEV FMv2fnu/o/wz8lZo9E8P7zY/
/ID3m Dh9GGPgAR0 RwTp4ZfiPz44PL4/Y5WiCLgU/dYe3z85GN xo ##
Y2GRoeMZWbxuHJRjkchfHFr0A4qAFNN972zgmFFIwwMXbc9RCi7Dq ###77E0Hdvfha8PCNdnpzRnQNbZxc/QL185sRol9v7VIby6QPQS1nYRHVyX1ZvBkIDM ###S22y2M/p4cuT45egxhxigzPs6P1x47AIi3cM8L3EXnHw97sw8luaOy4awMZ/PSZy ###lARdotVlx0ds9 DdMcIv2gM9NI4F RD69l8J7D9bggNFxi282n13iNaqo OXzVfw ###sN
/uTYClPoHte929eXb7JHJ3V 9i0g62Mt7GnzRhn34GzmS Ccet9qcmRaQYL7ZA ###dgXp8NntjtaY/MSboBqMre7DpqgtjM X0GqCMwu5xisKbZy0HpBtKLd5DMzT1TLx ##
###sYV3Iv2NGW/Fh1R9LQS1ghdLhLX8ao9xEOQZA tOBGl9umJb/gIPuv3AUcNUfyRi ###I/I15gEAis4QFuDriAFZ bHJoS6IdErGhJb5OzMiAp2WxPJyc4D2ALPw0SflnWjB ###V7RHrgWXZcBFHzv 2ppU9ISywm1gWqyE3qMdJyG1VuxWtpNU1P2I8U86wKBnOhqB ###0qlBYQPydcnIoYwxnRpib4Jxsxdcj UQaZjl0RHCstHt8D/RU1ZHOUcS2pDwzVal ###yP7OsBw6/rXiRah5FF62txUUy3584t3YxMt85tbESRb7D575ijf73LEs7H/s1FM2 ###6WwYUfxFmhOm4jNhNMMQdny4FWcrm6FjjiHbYtkz0Qxb
FFsx8p1AuG67BW3t 0L ###SYMbmP2YG2DajuIee7Jfg7im7tbNtTSLni12qFXDsdGcXDAP8VLCCa4toXpDgdcy ###hRdOIwrF7l4Xoj63vN9/j/eorbjrdRQuyWerj2rGwmlzETZKBUxiQ6 ox78BRd/0
iUZ 6sEAMrGy7tmp03ukpZmNENDtEXg6I9M1v8XMVDAtMwdrpidyhDX Ng8Kf ###iA3oj5epRovOGGSscIyTIdVaD4s0HdJ9C9lHmzrTbL5bVFswHG9vUzYZW AgMLXT ###l8Mtb3R4ePjR7vHJprn7sC9jFeWuSOTjaBREStELRrvBLkke4qApmUDqBxVAHafX ##
###niGruHVJcZwLDBkq5eMRJKaWjRP8VZ9VmpCjTRq2Tn9ydwUEPrgWaaOISgorl4O2 ###lqFe0ncs9xArmzyWiVKRdFHMMEsUJVxTtT5boZR06ObQV2/oLjB0jFjeBg5ScLOQ ###sBglhOblYOKW2wJ5QMWyQ0rmXFIjFfWdB71tVRy7K6n m BUGlvQUPw oIxXeHbI ###TFg6a6Dc0B1 jRoGvetyJ h177rEz3geLC2TF W7YuPWJ14mDj9ttymrFd3CYok5 ###dVstz642kGd/cC A1DN1yfrpuFA8UyV82mLjLvxWCJ7dPGN1qidPaX0xPZlGE3EW ###B0IRcjgduQB/0bFCxmewqE3yOGx274Y93oMsGWI0xA0Gq8 PXOKl7pQ7ZUmSsOtk ###jljX SMBwy9xt2irp04P7fHX1EQ 0TZ4RJatZJksUxjTkm/
H4qNvWGawbyR6KE5T ###o0cXqZIMAXNwHHpExuQMO4NTGecURKp40q240idMH5P8yY51zBl33I9KfZzgYOR2 ###MpzWI8JRnzNtzfMhf7Zr7NxX2c7r7HzOErlJw3ZFyuuOlOiSZBBYJqW5ElWnUtfc ###1/z/0KKnp63O9pVxZBKeZq1t/xnhjuDwn8nHYxJ8aWLLvByrdpLfp2YefjXpvjUp ##
N/e pq3yP/9587/XWKNT1iF5gQDkoPOTOnA ###MdD7xwG8ezcIF7nBF7nBF7nBF7nBF7nBF7nB/zS5wdOzf5PhVISQK790buZ02IWl ###qxfqPmiF3GL mm9YCiklVOUj1SSKsqZESUTjV8fRF9DXCvX7tPKlaniofKDUN/Su ##
#jBAWxUfFnR3fGsMX6gfoFwvR P u/C 1yDnpAenyf73mVWz5v1qr Qv5/4 S/ysL
###RW hatrGEYbkE3 KHrFN9yvdF9T5GcwQBbl 4FDovs6ML3IM1ZPcriSqmirnqqK ###xL3bGrvkkBUt6pci0z2YvrAdhu566 zv4t8X8GyLlcmHDx6KX14wze
clhyRoZLHOsFToA gBoa0GQPU7iViIr1J5t24B/q6bKnLQ8vWZUn8Q7znSWT BUf ###0eJLAEhsoSaOUWBPbRiYdI7DO25nf7EvtpUnkvlCBFlZU0JvabFXTSQpBKUGlCsP ###pxV7uJU48r46FoUCCY2bbxSnzBhP5lgwrRS49ILBLKOqFzkp0xXSBjIKESschT9s ###1zZAK3v6FH/1a pXrx796qtfsSlfEFh1hS1o8vRp9IefHf8cLy2uEJC8JirpOFbs ###BgEXTUVYw1nlbOUcL43WnrrpQ7hTuGPXQFRA/
yoQGM4uREj7dNSnCq1HnF/7Ik5V ###6iPrPBEZ9qyuVuLLq5007orv1hEkx8HGGj0tFwvmtxY82uxSS6Ibsf7ykyN8fBQF ###9kcn0jM4w5ohnm7BBR5t26K9q2lf1G8K8dyjH7sa 1KUXVl6jzoIBSlKzLoQ4c5g ##
###aTEBAjo9AMBOz8kBu4eB0JnPqzfh/994awUO6YcuYKD9ES142p 6xxcFDixLYHjM ###VePVRdUvvN7dp 4KquPCfQnwaTYvlmJuZo4fgOjs9LB8j3j27A6Yt2ZnTnVkMxBh ###xDxaT5FAyi0T5Q6QqgEQp7j0eVr5smEGYQheSMnkiHuenZ78rN81EQeKPq9Xirg1 ###6Zekfl79vHdxfOC6sNJboVSjjabRP4fcgQYZwIDsOi5aThmOo6VsyBeOM7Vg2uVi ###aRNzs1S4zsF/pxYgYuD5Kz/QfUjxI0uHc0WDAehNbFtMTPeALcagz4XdqCqRq53U ###B8dNiiotRvop/W3lpNBUzqhzMSuemqU1GjdRodVkdKlwau2ih6JmhDyTiR8htsYD ###mqD2TYTdI7 5Btwa/ cBdo98mXXLzbc2bT03mvOof6OGjgVTfT8hE2ag5MDVNQ4O ##
KI8WDGa0TFfvJVX5wuKN rD6kFYcsibBulMsIFqv2X3A ###blufA0TozQC2cf9B5KJgD6gugzyGTbAASGeA92yCMv4djAZmxLh2IisIlw31wxnY ###3P1ohcdkZH4w YwzSl7Dumn7io7OpSg Crff6u3D1QiYNlAoUnNEUT4WL0GCY Q9
DxP C bBJIu1X9GKxDU2WMUQZ9ChD4ZL2 ###s2kbjrIeYGA6P4MQALtjQ26UCrQ0YnNWEnGSEntq4iPbJKPxQg0S6Ii6E7yvxG/s ###NDVcX0CiTwlZbNuCAiSHiNMmaljA5q5b3d4ExNHwdjDpddBjCl2HrmExetZySyQY ###h1RcJ0lNPpQhsEsRECcel9yTdkaSRJ8vYZy9C5YsOFDKtOe9zNzCqU1C8U8tYbUQ
###g4Gb0YqYSm9jGbVGU6xi 7dB xMCI3Q9clgQ0gWrlDfYp1f/JreCiKBigqIYQ1fH ###pBAL0xUK7VV33OwNboZcqQWuHZWUMSJtjW89M9uhKRobCqtu6UketGimQIvZju67 ###
mWuCxpkSsHgnUkgs6jJdSmCvo645a6N nZ0mKw0 ###IYhjk/3d3lzapVBRTA NUGJq/lq9uOKzF/ZXsOTlQsGklfXizk61aNTupTyTNlwm ###ssijFv6/xcIWiGMPfHrP2PFY8Z
/gM/Dp29ZwCP2RHy2j3N mXk8GhBILBba YFHR ###qwBorzuYjHAAZGN97nH7OXhmYE7YhZY3YKsZc0rMKsfLglrHaqLN0E2FFXfeQhSp ###b0Er aSOqKug3UJPYBA0R617BtRnmkHQpyscD0atmyAN318N9ShFOLc5i7fOZVBd
/o6AFyd25XtJXUkCynMBfXh6QAMWRMdRfbw8X6Nf7Onh ###SaPgUCWK unkZq6GlaASWUW054lnVnFpvuYCocGuocoWHU9c LsWdrryzv /vS
/t ###aiNJFn2f RVl5tit0gKqYjENiLk2hm6f217a0NvjMTqSKKBsbaMSWLTNf78ZkVtk ###VtYiyXb3nYdPt62qyjUyMjK2jAB2UQu1ZAuzcdLzwTgDSzkCgHseX4mmcw3a4Gzd ##
#GSBEDlUxsIjgi5fFrS5EdArpjpgd4wiVor9t05B7k/bnqv8cjrvLLjP37xWPNaUe ###5OEX/0HEgcW7UI0TC7VfoXE 7V7RLViB5ZPhwAIweYU6FIQztRkVrSSQY4Br5Ymq ###qheTG5XllodvjQNiaL4vPPdgWzQOCCVJH3yPFjn5MsnXIoi77HH5rQ5F4IyJhxRD ###kBpFtSqxCjfQHp4amVkeN56DKpdpmG9aU6cvXaeUuplKCSW5HSt0dcqFKjMGNQwo ###O/q0HXPagku6jM0NU8AXAzUNwtKwFg4f84KX L/YvoTEfAUuFPlgTI0lx/Btcsdm
ePQmbBhHALIO ###tM1J3RpRfDlg Kn0oVYTUyp3uInCFDHlqy910EkXdLbonMliclZnPO7zvBwIDnZu ###gJsUSn9I99cssuykAqlJqKPiW6CF0XNqJ1RSoJRYVB6g90qCJH4uz4VpPgapfDia ###qlM4mo37cS e9u/q/ON4lCRxtx9pMIM24Doyt5y8CFEBNwexBmqZJJrKDesD e53 ###JvyyS2eomwrCp1tr3rvofdRDW8bAg8R7aybXoXb4AZafC7VMeNq7UsvmHH yrlFy
###00UaZIIKkXPIjxmyYqGUKFektKxIEzalBV5Cv5qYQItKrDl/ IjqIsio1bErCofM ###DPXt7krmSeoCXDSXriFZ6wskpnjNBqGv2JljpmL1dGQk2mWUY3PHm3nhGtpgWkJe ###kCGDjKXU92TVRPjxoJ8PgjI5pHk aqyp7g9Z9crc8KHwFeyhocVpFkr7GhhGpAOh ###XnNeKsb7w6okcb1OFVffrDqGJ0BZHQNVPLrjbNgtkfRwcgArRNAq3nQ2Yj5BIsCX ###QBjU6cVMIqqlMokL2rRCSCbBQbIK5IPRZtUCnCspdOG1Tb1zhKSWeQBQ7w2STTnv #
##8plYJn4QpBC0oftOp/7TV9Nc8hPpP O4MeFnfRR31mTuQNst2LywJvu612cSzSdu ###Xfeo2tnGLdoiJkAJljvnqk2Qv/2tdQfVmTtdIBImYbUtl0M1lTf1f3nW1HK5UhfN ###k0nhO1/CzBLpUS F38TlMglShW/
###gB4i6VBDGatNFUxF5EA0SsC0CVAKGYSCvA64LtfZPC94dq7U1wR7iL R7dWQpZeU ###ejHRLI5xw1RstVq2XiswlY7C Ljhu9y8HA5mxQYOsoaipBhfcC78JO4zIn1rrYuA ###
yAj2kBHsISPYQ0awh4xgDxnBvmBGMJLgKx4Z b3gVT/umu8YXbm2S00YgYJ3Zl6o ###ty 9ysZasBlsfR9ubx371ufDNyfHlfbM11pbbkfqjRJ47ZulGUicpZN4yEsb6QGq ###GNBHZFngbyCGlg iTXxZgd9CtclldEu9t/rmBgnyIGJCxN3a/xuuCik9msXTytHv ###L08xpQJDS3wPwrQQBaDlVLICLs8M GhA0G5PPe7P8EnXpCMWRXkZP6O9SWRPr16m ###bVkNKzh6EG2wYhftcW8QbFeEzbmq3BqOXzKCUG2zxamDWNgeqlAs0KcpX0Jg07Og ###GW6imwJvSmlniYApulXRdbM/9bI/zWJXUzAVfC88QmTMbdlHq2f4irBTvLK3JxAD ###K7cu4e8Km0k9rOrZ1mFa6xX6yq8DVASyMETD6uD3T1Ti8Fp0WMPvB7J//5MOhtyz ##
###2i0loE8gP8yFvHSzoU42lDCA3rYNN2 v7mSvbTC0y9/jpM51QGgMQh1/IrYw/70i ###dESyQmqHKxIzFL6X JnfmW0nf7IG8EUyjcb8E3svhovLLBrWkSHEixn53SO/6S7n ##
###sZ90cIim47PwvPWpSYMOVRDUWOOM1QjOKbDLk1PZw8SIisrfxQP6jm kaUzfTWPj ###mhtrpRUPzFfloMsr11q9s2l8XnXA2rosNWi0knJFp3GtxSmBESZ6Gh Q/edP40bL ###3KKOC1BshNUWIVcGdAaZnxhNRdTATV9jCG4fGqxZNnfWQjyoBagMo9XHbIbntVZR ###K6nIxcSsXgEST6ANjxxbOcrVusZJdt4anzXPGQkh2NVQD dmUF9drdUKjRUt6IU1 ###yvoJSvVzn9o9SCDARC0oMndSEuLAa7BjMtExDLSI8Pr43dHP8A4ubq6sV59DN5Cz
###eFp8j3IEkZDNGcGEjgB76ExHsSgRnmsZC77xHI9PnvDfIvWjeNgmDyJVJH/gwRzU ###WWwuhKROq2bKbdTudiNME1Dn8frrPLh83cPG66DMxJa11iBzNSTNIwDhGQIlMqoA ###t/DCNwLa4hB2BbCDjb10kFccnSqx5SqxTUs8dZTAOakS39MSfOjG4q7bZyRHFI42 ###SNQZ6WldjsbRkCz1pMsBBT7J8D1PMXOEiSahAViS7x4n34F2pi4bK0Z oHXGCMLU
###PB9eAaVqRwW 13SFzBIN9DVnrKU2N dwXEKZdnTJV voUirgi2ivrNiVy3zU1br7 ###AjLw5Al7piqsxQh1WeMDg1A jq X35PxgMmjjf7oqjKJ/AZNXcOw ZVFSC362Zkw ###tOWcP0SjX0dlMOcNRreYnNWMr6zQGK zARd9MRroGMb9aTRJ1ozkdcB0vT9oPf0e ###IdzaCXwwLcBBsmeXarV2ms6vR91ai8LPtggcdb31llchy9lQ60wAp9DiEijIUbcq ###MUXySL8kPMfEZTyLLngWq378J/c05NfqBhHbs2xffocOeX2kCHz7R
OpOqVWVJpB ###IB3/vmGtTNFX0kVMFLyOLteJChGeqy25CdjeqbGHKn F7tpPPpYYf uS9EoWGuu ###i1yzP7eCZrNaCcCkWgXcCGqspL OP9eCDV qJX7eb2ZI8acQ7fqWiZBs3CBun2j1 ###XlrgF5lPP0YAAQjMhTqjOPEeX4KsD30XCvFARIqH8vbZyclR9lg47FfhQoiC/CCa ###TuLervd4Lbj0Hj/2KnHeeDHl8M8ZQz755fDw6OSED/k/4fKD2/ fwfSW4eba9Tfw
bGiwU5aAoyrh8VXA8UMGOH4oCw64pgIgcexBdoCx rhxyX4KcMfm ###FDaWJN2Ge0W4ox1fCh5zHa8qYFg1VyyMvS8RetiO1jxv6OGyQYf3gPKQTLSQ 5xr ##
###hrqYkPMGvE7biJA8hm3qPKpOxnyK3egqHtZl2vB6NnwHnRlGy0vDCuDCI NhWh7j ###2IRpP4RL M P/0CR75vEfwg2tp8 tfU/m083HvQ/D/
###vUnEZk9n4OqUNz5uOUbE3Zi5F3MOiHwZ77zCmuFXEMRgZcQCI/Z3GhaTsW FhDXK ###0LiwGSDTwWFlW 5l7XWmGbJXsTQrurKUhoNxmyoOQSWk4wrWJzqHzUnET1aQzr3T ###0SEJ68ejPxbF78N48iZqtKzQ8vCZp22ys/mORWzmOXO6iLSxVuBR0Q0EJzj0IeUG #
##CZrJ3vhm3q9UCGIYITsQ8Q7ErtecPZ55twn CzZ7OYm6nIMZgTg36xgqa40VyI36 ###qGLOKwQ2KxctiozdiEsK3IoI2MhE83hwM5D5yRDmerWtTmrGmvpVc6kOvO tmK6F ###MBD7rZXOr0Vi7D8RiMt
oBaSFha9UHaiiMhFAKdCjSkd2roOc6hacE5706JCFI1ka48g u ###84XzhR327cNnJ0cvGXPz uTl6Us8RV8xluyoMqt7dz7EOGdUcDDmjyIf/D9Q8DJO ###wwSPw3lahliYTMCjbfMTmoZ6h4NuOoK0jJMKzecc22qY3vXZ5rk8/thDExKhxwcH ###4eaefAWWC6/C3gXbPkbKV19C WXH rCBrYh3Ogo9HQn0DkMED/qcIUm/cDoLH8e5 ###vx9ugkYy9Qli/7Ohai2lo0zIyng7UN2zP22cpwLnc19/mVSRH1kV4vEPJ4X0beDK ###
pecF9f ###sHK4ROU63DlZqPLmzhKVxZzDZeYcLjPncJk5h/d4j0 iQBAuhAM60fMCOGBXDpeo ###PN8y0spz44BjzuEycw6XmXO4zJxtHNheCAdkRuwFMMCsGi5cdb4F1FXnXvvUXMPF ###5xouPtdw8bmSNb 607ii3BzoVU3kqGLgZWHo1Ubx7Zwbew7XKrvFFQ2FzsTZX75 ###uQGiK84JC6vHcNEeCQR6UX aM3t1RTunSfzjBEF27TIYlV1bV1ykb3pA0tqLTdy5 ##
###cVV7iT0eLrXHw6X2eLjUHg X2 PhUns8XGqPh0vt8XC5PR4utcfDpfZ4uNQeD5fb ###4 FSezxcao HS 1xnLhxxF// 4ud8uWHttw2Wg4XsxZUQkVlccIkTkJNw81XUleG
###GqnJRGrhoEA8PI77Ud2rjm6m8It/4xlaIUEr 5t94W/Ba tIWFGq0bCnMqHyTyoq ###xUVEP4khJfoJvOHCc/1MQ1CY4UWJ85ewQbS740TGoXX4i6l27ShBqH1PNSrNCG2d ###MAcGdJNEbfTIlS Ipr9NWkJkVPp4s75Sq5uvL6YzMnHQjZszxiYND2B4I66PgHIa
###9PIQIq 8bj/75cXLN3s02DAYMSEefB1/tRnwyBMOTT6F/OdwckWyM0pjUEuG36V6 ###R/W1zdXjBKtGCdxlYM3Br/Z4Et3ChQNdYDq6uupHGrBU2cywGTLvdvrcdVChES3D ###0JqW0Q0T7S0sAVGGUkgDDmlMZ8MASXqbrDrcy8F0wXR5PkbRGHDexAc2gIvRoK1s ###W9DtMPoof6JRNbpoA6FMt4brUZcP8bDlaJjtYPK2UgVLbhvckXxGbq3NPey24TOg ###IhahNXFS8NX5si3QlgAJvXrxrkd7Gg8ATCIx2Ir0YAby5u17Wx5X4CsnaMN4D3TP ###03cHcvJnua1FjxOhi2bLD5eebqMJeAwJpMOrllgRCBvBMvBe5pnIkPDC13O0T
abO19s5ps7ZWe ufOXzlz5wS7HXKpWcuarChXOdSP8ipMVHkHLz1c2VDRl ###Ue4LrbA5WKFl8FaPIJcqXLidsJFeDRmHcuEl0XQaD6 4EVCbAQVA7GM z2hbrBK4
#pXzCjloGPSpXYyfBsp3ca7c5dnrBlQSb eW7RHu1a9u KTYbFn7hEW8Ku7QV05 N ##
#MjYvnPkOZxHjIolldbnP9JAp3IP3K lfdNsxIqM33EbOhisvMojGNqEtfy jf9c5 ###bPs2pCNRWW5DE7C8X4JDMKNxdS oe5t1z2ZdeX XQAjhk8N5MY3PcG2O32ECekvD
###on1tqyR4aPN4gol62BEZeta6sfr7dIbzwu5dB7U1EA8Z ad6GS xaDaOelNkvYTa ###zLtiElWhZjOFPHVDoCu3KM7NjkmT0tBRasVHPAndcvRKKzlUu2fqAtk54z1cdKs8 ###DXQ22ly8UaVdcDa84WzYIJjOeuF52d1yKcJMGhxhVUvz9K5tGrnVXQZIsSEvChOH ##
/fO8OkR4aiUk HpRaSZ7tSqJ ###FbG9FGKlj4EiYdQBUOfp4IS8nwfURU6MeQ6PQkDcl0TOfY6c8LfXaOWeOIaQghWc ###omLe/k6BBQ3uKn48Z0SlVb5QpyRFAWW4N0fvF 71TN7xkZN5lP0pzwUmeiBNcose
###VrwmOhxGsMEFBa5bYgkPS6gUMRMGittO/4anLJNv4ciSSV6s AxuPu5fxpl6zqRm ###DAFCJ6fnBh QtsofeMIa360JwR4p1XHqmE6LTsLL9B22y6cI QEibxAngw5k3i7Q ##
###T/XRZyyA XFXfdxbWYCPHU7AZaK51kzLO4 cZpkcVZz3ASkj 4dq8byqDi7ofajV ###MplXGAqDTzw8Yy2cs2oVHtfOF2/KUzVlQK9go vsX d42FB8Bt0g2nIOSsbNy1k1 ###
/T39qbLfIYd005VtL2K FUzMcD3nkh1 ###5v2Kmyh1bqNJ50qln9o1Zvr4qXQ4yaYPQdTYqMKELKNthWhl5eLiBHwze5DpaI5Z ###nXLG0v0wLjUY2CPWgAxXlFy8d0CpN41vM4BUACU9JNZIWRhB2Ww4iWHA6TG86Ezg ###DLiNRciyvNHgUJJ/T6YVRMB1TjYaiI44xPUKz2turVcRICEjL1BZdh7doWt0AtLo ###
x u4B3LoNJqALx0MeBIlELjK xhNYPSjCSPuYmtgGPoXR89/ aF9cvrm3VH78Kc3 ###J0dtCJJ6wt0I4/6H9imkYD1hOFsR6QjjAbCa05m6SGLoTS8g8tzoDlRA9LPkbeRn
Because of size constraints, the Opus test vectors are not distributed in this document.
They are available in the proceedings of the 83rd IETF meeting (Paris) [VECTORS PROC] and from the Opus codec website at [VECTORS WEBSITE].
These test vectors were created specifically to exercise all aspects of the decoder.
Therefore, the audio quality of the decoded output is significantly lower than what Opus can achieve in normal operation.
The SHA1 hash of the files in the test vector package are e49b2862ceec7324790ed8019eb9744596d5be01  testvector01.bit b809795ae1bcd606049d76de4ad24236257135e0  testvector02.bit
testvector08.dec 12862add5d53a9d2a7079340a542a2f039b992bb  testvector09.dec a081252bb2b1a902fdc500530891f47e2a373d84  testvector10.dec
To use the internal framing described in Section 3, the decoder must know the total length of the Opus packet, in bytes.
This section describes a simple variation of that framing that can be used when the total length of the packet is not known.
Nothing in the encoding of the packet itself allows a decoder to distinguish between the regular, undelimited framing and the self delimiting framing described in this appendix.
Which one is used and where must be established by context at the transport layer.
It is RECOMMENDED that a transport layer choose exactly one framing scheme, rather than allowing an encoder to signal which one it wants to use.
For example, although a regular Opus stream does not support more than two channels, a multi channel Opus stream may be formed from several one  and two channel streams.
To pack an Opus packet from each of these streams together in a single packet at the transport layer, one could use the self delimiting framing for all but the last stream, and then the regular, undelimited framing for the last one.
Reverting to the undelimited framing for the last stream saves overhead (because the total size of the transport layer packet will still be known), and ensures that a "multi channel" stream that only has a single Opus stream uses the same framing as a regular Opus stream does.
This avoids the need for signaling to distinguish these two cases.
The self delimiting framing is identical to the regular, undelimited framing from Section 3, except that each Opus packet contains one extra length field, encoded using the same one  or two byte scheme from Section 3.2.1.
This extra length immediately precedes the compressed data of the first Opus frame in the packet, and is interpreted in the various modes as follows:
: It is the length of the single Opus frame (see Figure 25).
: It is the length used for both of the Opus frames (see Figure 26).
: It is the length of the second Opus frame (see Figure 27).
: It is the length used for all of the Opus frames (see Figure 28).
: It is the length of the last Opus frame (see Figure 29). 0
