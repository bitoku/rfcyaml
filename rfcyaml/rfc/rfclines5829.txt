Link Relation Types for Simple Version Navigation between Web Resources Abstract
This specification defines a set of link relation types that may be used on Web resources for navigation between a resource and other resources related to version control, such as past versions and working copies.
This specification defines a set of link relation types that may be used on Web resources that exist in a system that supports versioning to navigate among the different resources available, such as past versions and working copies.
These link relations are used in the AtomPub ([RFC5023]) bindings of the "Content Management Interoperability Services" (CMIS).
See Section 3.4.3.3 of [CMIS] for further information.
When a resource is put under version control, it becomes a "versioned resource".
Many servers protect versioned resources from modifications by considering them "checked in", and by requiring a "checkout" operation before modification, and a "checkin" operation to get back to the "checked in" state.
Other servers allow modification, in which case the checkout/checkin operation may happen implicitly.
Version History A "version history" resource is a resource that contains all the versions of a particular versioned resource.
Predecessor, Successor When a versioned resource is checked out and then subsequently checked in, the version that was checked out becomes a "predecessor" of the version created by the checkin.
A client can specify multiple predecessors for a new version if the new version is logically a merge of those predecessors.
The inverse of the predecessor relation is the "successor" relation.
Therefore, if X is a predecessor of Y, then Y is a successor of X. Working Copy
A "working copy" is a resource at a server defined URL that can be used to create a new version of a versioned resource.
Checkout A "checkout" is an operation on a versioned resource that creates a working copy, or changes the versioned resource to be a working copy as well ("in place versioning").
Checkin A "checkin" is an operation on a working copy that creates a new version of its corresponding versioned resource.
Note: the operations for putting a resource under version control and for checking in and checking out depend on the protocol in use and are beyond the scope of this document; see [CMIS], [RFC3253], and [JSR 283] for examples.
The following link relations are defined.
'version history' When included on a versioned resource, this link points to a resource containing the version history for this resource.
3.2.  'latest version' When included on a versioned resource, this link points to a resource containing the latest (e.g., current) version.
The latest version is defined by the system.
For linear versioning systems, this is probably the latest version by timestamp.
For systems that support branching, there will be multiple latest versions, one for each branch in the version history.
Some systems may allow more than one of these link relations.
3.3.  'working copy' When included on a versioned resource, this link points to a working copy for this resource.
Some systems may allow more than one of these link relations.
3.4.  'working copy of' When included on a working copy, this link points to the versioned resource from which this working copy was obtained.
3.5.  'predecessor version' When included on a versioned resource, this link points to a resource containing the predecessor version in the version history.
Some systems may allow more than one of these link relations in the case of multiple branches merging.
3.6.  'successor version' When included on a versioned resource, this link points to a resource containing the successor version in the version history.
Some systems may allow more than one of these link relations in order to support branching.
The link relations below have been registered by IANA per Section 7.1 of [RFC4287]
'version history' Link Relation Registration Attribute Value:
Undefined; this relation can be used for background processing or to provide extended functionality without displaying its value.
'latest version' Link Relation Registration Attribute Value:
Undefined; this relation can be used for background processing or to provide extended functionality without displaying its value.
'working copy' Link Relation Registration Attribute Value:
Undefined; this relation can be used for background processing or to provide extended functionality without displaying its value.
'working copy of' Link Relation Registration Attribute Value:  working copy of Description:
Undefined; this relation can be used for background processing or to provide extended functionality without displaying its value.
'predecessor version' Link Relation Registration Attribute Value:
Undefined; this relation can be used for background processing or to provide extended functionality without displaying its value.
See Section 5. 4.6.  'successor version' Link Relation Registration Attribute Value:  successor version Description:
Undefined; this relation can be used for background processing or to provide extended functionality without displaying its value.
Automated agents should take care when these relations cross administrative domains (e.g., the URI has a different authority than the current document).
Such agents should also take care to detect circular references.
Care should be applied when versioned resources are subject to differing access policies.
In this case, exposing links may leak information even if the linked resource itself is properly secured.
In particular, the syntax of the link target could expose sensitive information (see Section 16.2 of [RFC3253] for a similar consideration in WebDAV Versioning).
Note that this applies to exposing link metadata in general, not only to links related to versioning.
Appendix A.  Relationship to Java Content Repository (JCR) and WebDAV
The link relations defined in Section 3 correspond to various properties used in WebDAV Versioning [RFC3253] and JCR [JSR 283]:
the resource identified by the DAV:version history property ([RFC3253], Sections 5.2.1 and 5.3.1).
JCR: the node identified by jcr:
versionHistory property ([JSR 283], Section 3.13.2.4) for versionable nodes, the parent folder for version nodes.
WebDAV: for version controlled resources, DAV:checked in
([RFC3253], Section 3.2.1) or DAV:checked out ([RFC3253], Section 3.3.1), depending on checkin state.
For version resources, a successor version that itself does not have any successors.
the version node identified by the jcr:baseVersion property ([JSR 283], Section 3.13.2.5) for versionable nodes; for version nodes, a successor version that itself does not have any successors.
working copy WebDAV: for version controlled resources that are checked out in place: the resource itself.
For version resources: each resource identified by a member of the DAV:checkout set property (see [RFC3253], Section 3.4.3).
JCR: for checked out versionable nodes:
the resource identified by the DAV:checked out property (see [RFC3253], Section 3.3.1).
JCR: for checked out versionable nodes:
the node identified by the jcr:baseVersion property ([JSR 283], Section 3.13.12.5).
each resource identified by a member of DAV:predecessor  set ([RFC3253], Sections 3.3.2 and 3.4.1).
JCR: each node identified by a member of jcr:predecessors ([JSR 283], Section 3.13.3.3).
successor version WebDAV: each resource identified by a member of DAV:successor set ([RFC3253], Section 3.4.2).
JCR: each node identified by a member of jcr:successors ([JSR 283], Section 3.13.3.4).
Use of Link Relations in HTTP Link Header
The "Web Linking" specification ([WEB LINKING]) generalizes Atom link relations, and also reintroduces the HTTP "Link" header as a way to expose link relations in HTTP responses.
This will make it possible to expose version links independently from a specific vocabulary, be it the Atom Feed Format ([RFC4287]) or WebDAV properties ([RFC3253]).
For instance, a response to a VERSION CONTROL request ([RFC3253], Section 3.5) could expose a newly created version history and checked in version as link relations: >>
Host: example.net >> Response: HTTP/1.1 204
</system/v/84345634/1>; rel latest version; anchor </docs/test.txt> Link: </system/vh/84345634>; rel version history;
(Note that in this case, the anchor parameter is used, as the response to a VERSION CONTROL request is not a representation of the resource at the Request URI.)
A subsequent HEAD request on that resource could expose the version  history and latest version relations as well: >
Host: example.net >> Response: HTTP/1.1 200 OK Content Type:
text/plain; charset UTF 8 Content Length: 12345 Link: </system/v/84345634/1>; rel latest version Link: </system/vh/84345634>; rel version history
After creating more versions, following the latest version would then expose predecessors of a version: >
Host: example.net >> Response: HTTP/1.1 200 OK Content Type:
8 Content Length: 12323 Link: </system/v/84345634/2>; rel predecessor version
