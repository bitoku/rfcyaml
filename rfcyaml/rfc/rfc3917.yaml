- title: __initial_text__
  contents:
  - "          Requirements for IP Flow Information Export (IPFIX)\nStatus of this\
    \ Memo\n   This memo provides information for the Internet community.  It does\n\
    \   not specify an Internet standard of any kind.  Distribution of this\n   memo\
    \ is unlimited.\nCopyright Notice\n   Copyright (C) The Internet Society (2004).\n\
    Abstract\n   This memo defines requirements for the export of measured IP flow\n\
    \   information out of routers, traffic measurement probes, and\n   middleboxes.\n\
    Table of Contents\n   1.   Introduction. . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  3\n   2.   Terminology . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  3\n        2.1.   IP Traffic Flow. . . . . . . . . . . . . . . . .\
    \ . . .  3\n        2.2.   Observation Point. . . . . . . . . . . . . . . . .\
    \ . .  4\n        2.3.   Metering Process . . . . . . . . . . . . . . . . . .\
    \ .  4\n        2.4.   Flow Record. . . . . . . . . . . . . . . . . . . . . .\
    \  5\n        2.5.   Exporting Process. . . . . . . . . . . . . . . . . . .  5\n\
    \        2.6.   Collecting Process . . . . . . . . . . . . . . . . . .  5\n  \
    \ 3.   Applications Requiring IP Flow Information Export . . . . . .  6\n    \
    \    3.1.   Usage-based Accounting . . . . . . . . . . . . . . . .  6\n      \
    \  3.2.   Traffic Profiling. . . . . . . . . . . . . . . . . . .  7\n        3.3.\
    \   Traffic Engineering. . . . . . . . . . . . . . . . . .  7\n        3.4.  \
    \ Attack/Intrusion Detection . . . . . . . . . . . . . .  7\n        3.5.   QoS\
    \ Monitoring . . . . . . . . . . . . . . . . . . . .  8\n   4.   Distinguishing\
    \ Flows. . . . . . . . . . . . . . . . . . . . .  8\n        4.1.   Encryption\
    \ . . . . . . . . . . . . . . . . . . . . . .  9\n        4.2.   Interfaces .\
    \ . . . . . . . . . . . . . . . . . . . . .  9\n        4.3.   IP Header Fields\
    \ . . . . . . . . . . . . . . . . . . .  9\n        4.4.   Transport Header Fields.\
    \ . . . . . . . . . . . . . . . 10\n        4.5.   MPLS Label . . . . . . . .\
    \ . . . . . . . . . . . . . . 10\n        4.6.   DiffServ Code Point. . . . .\
    \ . . . . . . . . . . . . . 10\n   5.   Metering Process. . . . . . . . . . .\
    \ . . . . . . . . . . . . 10\n        5.1.   Reliability. . . . . . . . . . .\
    \ . . . . . . . . . . . 10\n        5.2.   Sampling . . . . . . . . . . . . .\
    \ . . . . . . . . . . 11\n        5.3.   Overload Behavior. . . . . . . . . .\
    \ . . . . . . . . . 11\n        5.4.   Timestamps . . . . . . . . . . . . . .\
    \ . . . . . . . . 12\n        5.5.   Time Synchronization . . . . . . . . . .\
    \ . . . . . . . 12\n        5.6.   Flow Expiration. . . . . . . . . . . . . .\
    \ . . . . . . 13\n        5.7.   Multicast Flows. . . . . . . . . . . . . . .\
    \ . . . . . 13\n        5.8.   Packet Fragmentation . . . . . . . . . . . . .\
    \ . . . . 13\n        5.9.   Ignore Port Copy . . . . . . . . . . . . . . . .\
    \ . . . 13\n   6.   Data Export . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . 14\n        6.1.   Information Model. . . . . . . . . . . . . . . . . .\
    \ . 14\n        6.2.   Data Model . . . . . . . . . . . . . . . . . . . . . .\
    \ 16\n        6.3.   Data Transfer. . . . . . . . . . . . . . . . . . . . . 16\n\
    \               6.3.1. Congestion Awareness. . . . . . . . . . . . . . 16\n  \
    \             6.3.2. Reliability . . . . . . . . . . . . . . . . . . 17\n    \
    \           6.3.3. Security. . . . . . . . . . . . . . . . . . . . 18\n      \
    \  6.4.   Push and Pull Mode Reporting . . . . . . . . . . . . . 18\n        6.5.\
    \   Regular Reporting Interval . . . . . . . . . . . . . . 18\n        6.6.  \
    \ Notification on Specific Events. . . . . . . . . . . . 18\n        6.7.   Anonymization.\
    \ . . . . . . . . . . . . . . . . . . . . 18\n   7.   Configuration . . . . .\
    \ . . . . . . . . . . . . . . . . . . . 19\n        7.1.   Configuration of the\
    \ Metering Process. . . . . . . . . 19\n        7.2.   Configuration of the Exporting\
    \ Process . . . . . . . . 19\n   8.   General Requirements. . . . . . . . . .\
    \ . . . . . . . . . . . 20\n        8.1.   Openness . . . . . . . . . . . . .\
    \ . . . . . . . . . . 20\n        8.2.   Scalability. . . . . . . . . . . . .\
    \ . . . . . . . . . 20\n        8.3.   Several Collecting Processes . . . . .\
    \ . . . . . . . . 20\n   9.   Special Device Considerations . . . . . . . . .\
    \ . . . . . . . 20\n   10.  Security Considerations . . . . . . . . . . . . .\
    \ . . . . . . 23\n        10.1.  Disclosure of Flow Information Data. . . . .\
    \ . . . . . 23\n        10.2.  Forgery of Flow Records. . . . . . . . . . . .\
    \ . . . . 24\n        10.3.  Denial of Service (DoS) Attacks. . . . . . . . .\
    \ . . . 24\n   11.  Acknowledgments . . . . . . . . . . . . . . . . . . . . .\
    \ . . 25\n   12.  Appendix: Derivation of Requirements from Applications. . .\
    \ . 26\n   13.  References  . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ 31\n        13.1.  Normative References . . . . . . . . . . . . . . . . . 31\n\
    \        13.2.  Informative References . . . . . . . . . . . . . . . . 31\n  \
    \ 14. Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . 32\n   15.\
    \ Full Copyright Statement . . . . . . . . . . . . . . . . . . . 33\n1.  Introduction\n\
    \   There are several applications that require flow-based IP traffic\n   measurements.\
    \  Such measurements could be performed by a router while\n   forwarding the traffic,\
    \ by a middlebox [RFC3234], or by a traffic\n   measurement probe attached to\
    \ a line or a monitored port.  This memo\n   defines requirements for exporting\
    \ traffic flow information out of\n   these boxes for further processing by applications\
    \ located on other\n   devices.  They serve as input to the standardization of\
    \ the IPFIX\n   protocol specifications.\n   In section 3, a selection of such\
    \ applications is presented.  The\n   following sections list requirements derived\
    \ from these applications.\n   In its early discussions the IPFIX Working Group\
    \ chose to evaluate\n   existing flow export protocols at the same time it was\
    \ developing\n   this 'requirements' document.\n   Flow export, however, is not\
    \ performed by a protocol acting alone, it\n   also requires a system of co-operating\
    \ processes.  In producing IPFIX\n   requirements, therefore, the Working Group\
    \ decided to specify what\n   was required by these various processes - the metering\
    \ process, the\n   exporting process, etc.  In these specifications we use lower-case\n\
    \   for the words must, may, and should, to indicate that IPFIX\n   implementors\
    \ have some freedom as to how to meet the requirements.\n   The Working Group's\
    \ goal is to produce standards-track RFCs\n   describing the IPFIX information\
    \ model and export protocol RFCs.  As\n   well as meeting the requirements set\
    \ out in this document, the\n   information model and protocol documents will\
    \ provide a full\n   specification of the IPFIX system, and will use uppercase\
    \ keywords as\n   in [RFC 2119].\n2.  Terminology\n   The following terminology\
    \ is used in this document:\n2.1.  IP Traffic Flow\n   There are several definitions\
    \ of the term 'flow' being used by the\n   Internet community.  Within this document\
    \ we use the following one:\n   A flow is defined as a set of IP packets passing\
    \ an observation point\n   in the network during a certain time interval.  All\
    \ packets belonging\n   to a particular flow have a set of common properties.\
    \  Each property\n   is defined as the result of applying a function to the values\
    \ of:\n      1. one or more packet header field (e.g., destination IP address),\n\
    \         transport header field (e.g., destination port number), or\n       \
    \  application header field (e.g., RTP header fields [RFC3550])\n      2. one\
    \ or more characteristics of the packet itself (e.g., number\n         of MPLS\
    \ labels, etc.)\n      3. one or more of fields derived from packet treatment\
    \ (e.g., next\n         hop IP address, the output interface, etc.)\n   A packet\
    \ is defined to belong to a flow if it completely satisfies\n   all the defined\
    \ properties of the flow.\n   This definition covers the range from a flow containing\
    \ all packets\n   observed at a network interface to a flow consisting of just\
    \ a single\n   packet between two applications with a specific sequence number.\n\
    \   Please note that the flow definition does not necessarily match a\n   general\
    \ application-level end-to-end stream.  However, an application\n   may derive\
    \ properties of application-level streams by processing\n   measured flow data.\
    \  Also, please note that although packet\n   properties may depend on application\
    \ headers, there is no requirement\n   defined in this document related to application\
    \ headers.\n2.2.  Observation Point\n   The observation point is a location in\
    \ the network where IP packets\n   can be observed.  Examples are a line to which\
    \ a probe is attached, a\n   shared medium such as an Ethernet-based LAN, a single\
    \ port of a\n   router, or a set of interfaces (physical or logical) of a router.\n\
    \   Note that one observation point may be a superset of several other\n   observation\
    \ points.  For example one observation point can be an\n   entire line card. \
    \ This would be the superset of the individual\n   observation points at the line\
    \ card's interfaces.\n2.3.  Metering Process\n   The metering process generates\
    \ flow records.  Input to the process\n   are packet headers observed at an observation\
    \ point and packet\n   treatment at the observation point, for example the selected\
    \ output\n   interface.  The metering process consists of a set of functions that\n\
    \   includes packet header capturing, timestamping, sampling,\n   classifying,\
    \ and maintaining flow records.\n   The maintenance of flow records may include\
    \ creating new records,\n   updating existing ones, computing flow statistics,\
    \ deriving further\n   flow properties, detecting flow expiration, passing flow\
    \ records to\n   the exporting process, and deleting flow records.\n   The sampling\
    \ function and the classifying function may be applied\n   more than once with\
    \ different parameters.  Figure 1 shows the\n   sequence in which the functions\
    \ are applied.  Sampling is not\n   illustrated in the figure; it may be applied\
    \ before any other\n   function.\n                           packet header capturing\n\
    \                                     |\n                                timestamping\n\
    \                                     |\n                                    \
    \ v\n                              +----->+\n                              | \
    \     |\n                              | classifying\n                       \
    \       |      |\n                              +------+\n                   \
    \                  |\n                          maintaining flow records\n   \
    \                                  |\n                                     v\n\
    \                 Figure 1: Functions of the metering process\n2.4.  Flow Record\n\
    \   A flow record contains information about a specific flow that was\n   metered\
    \ at an observation point.  A flow record contains measured\n   properties of\
    \ the flow (e.g., the total number of bytes of all\n   packets of the flow) and\
    \ usually characteristic properties of the\n   flow (e.g., source IP address).\n\
    2.5.  Exporting Process\n   The exporting process sends flow records to one or\
    \ more collecting\n   processes.  The flow records are generated by one or more\
    \ metering\n   processes.\n2.6.  Collecting Process\n   The collecting process\
    \ receives flow records from one or more\n   exporting processes.  The collecting\
    \ process might store received\n   flow records or further process them, but these\
    \ actions are out of\n   the scope of this document.\n3.  Applications Requiring\
    \ IP Flow Information Export\n   This section describes a selection of applications\
    \ requiring IP flow\n   information export.  Because requirements for flow export\
    \ listed in\n   further sections below are derived from these applications, their\n\
    \   selection is crucial.  The goal of this requirements document is not\n   to\
    \ cover all possible applications with all their flow export\n   requirements,\
    \ but to cover applications which are considered to be of\n   significant importance\
    \ in today's and/or future IP networks, and for\n   which requirements can be\
    \ met with reasonable technical effort.\n   The list of applications should lead\
    \ to a better understanding of the\n   requirements which is particularly important\
    \ when designing or\n   implementing traffic flow metering functions.  A detailed\
    \ overview of\n   which requirement was derived from which application(s) is given\
    \ in\n   the appendix.\n   Please note that the described applications can have\
    \ a large number\n   of differing implementations.  Requirement details or requirement\n\
    \   significance (required (must), recommended (should), optional (may))\n   could\
    \ differ for specific implementations and/or for specific\n   application scenarios.\
    \  Therefore we derive the requirements from the\n   general functionality of\
    \ the selected applications.  Some particular\n   cases will even mandate more\
    \ stringent requirements than the ones\n   defined in this document.  For example,\
    \ usage-based accounting is\n   certainly the application that will probably mandate\
    \ the highest\n   degree of reliability amongst the applications discussed below.\
    \  The\n   reliability requirements defined in sections 5.1 and 6.3.2. are not\n\
    \   sufficient to guarantee the level of reliability that is needed for\n   many\
    \ usage-based accounting systems.  Particular reliability\n   requirements for\
    \ accounting systems are discussed in [RFC2975].\n3.1.  Usage-based Accounting\n\
    \   Several new business models for selling IP services and IP-based\n   services\
    \ are currently under investigation.  Beyond flat rate\n   services which do not\
    \ need accounting, accounting can be based on\n   time or volume.  Accounting\
    \ data can serve as input for billing\n   systems.  Accounting can be performed\
    \ per user or per user group, it\n   can be performed just for basic IP service\
    \ or individually per high-\n   level service and/or per content type delivered.\
    \  For advanced/future\n   services, accounting may also be performed per class\
    \ of service, per\n   application, per time of day, per (label switched) path\
    \ used, etc.\n3.2.  Traffic Profiling\n   Traffic profiling is the process of\
    \ characterizing IP flows by using\n   a model that represents key parameters\
    \ of the flows such as flow\n   duration, volume, time, and burstiness.  It is\
    \ a prerequisite for\n   network planning, network dimensioning, trend analysis,\
    \ business\n   model development, and other activities.  It depends heavily on\
    \ the\n   particular traffic profiling objective(s), which statistics, and\n \
    \  which accuracy are required from the measurements.  Typical\n   information\
    \ needed for traffic profiling is the distribution of used\n   services and protocols\
    \ in the network, the amount of packets of a\n   specific type (e.g., percentage\
    \ of IPv6 packets) and specific flow\n   profiles.\n   Since objectives for traffic\
    \ profiling can vary, this application\n   requires a high flexibility of the\
    \ measurement infrastructure,\n   especially regarding the options for measurement\
    \ configuration and\n   packet classification.\n3.3.  Traffic Engineering\n  \
    \ Traffic Engineering (TE) comprises methods for measurement,\n   modelling, characterization\
    \ and control of a network.  The goal of TE\n   is the optimization of network\
    \ resource utilization and traffic\n   performance [RFC2702].  Since control and\
    \ administrative reaction to\n   measurement results requires access to the involved\
    \ network nodes, TE\n   mechanisms and the required measurement function usually\
    \ are\n   performed within one administrative domain.  Typical parameters\n  \
    \ required for TE are link utilization, load between specific network\n   nodes,\
    \ number, size and entry/exit points of the active flows and\n   routing information.\n\
    3.4.  Attack/Intrusion Detection\n   Capturing flow information plays an important\
    \ role for network\n   security, both for detection of security violation, and\
    \ for\n   subsequent defense.  In case of a Denial of Service (DOS) attack,\n\
    \   flow monitoring can allow detection of unusual situations or\n   suspicious\
    \ flows.  In a second step, flow analysis can be performed\n   in order to gather\
    \ information about the attacking flows, and for\n   deriving a defense strategy.\n\
    \   Intrusion detection is a potentially more demanding application which\n  \
    \ would not only look at specific characteristics of flows, but may\n   also use\
    \ a stateful packet flow analysis for detecting specific,\n   suspicious activities,\
    \ or unusually frequent activities.  Such\n   activities may be characterized\
    \ by specific communication patterns,\n   detectable by characteristic sequences\
    \ of certain packet types.\n3.5.  QoS Monitoring\n   QoS monitoring is the passive\
    \ measurement of quality parameters for\n   IP flows.  In contrast to active measurements,\
    \ passive measurements\n   utilize the existing traffic in the network for QoS\
    \ analysis.  Since\n   no test traffic is sent, passive measurements can only\
    \ be applied in\n   situations where the traffic of interest is already present\
    \ in the\n   network.  One example application is the validation of QoS parameters\n\
    \   negotiated in a service level specification.  Note that\n   passive/active\
    \ measurement is also referred to as non-\n   intrusive/intrusive measurement\
    \ or as measurement of\n   observed/synthetic traffic.\n   Passive measurements\
    \ cannot provide the kind of controllable\n   experiments that can be achieved\
    \ with active measurements.  On the\n   other hand passive measurements do not\
    \ suffer from undesired side\n   effects caused by sending test traffic (e.g.,\
    \ additional load,\n   potential differences in treatment of test traffic and\
    \ real customer\n   traffic).\n   QoS monitoring often requires the correlation\
    \ of data from multiple\n   observation points (e.g., for measuring one-way metrics).\
    \  This\n   requires proper clock synchronization of the involved metering\n \
    \  processes.  For some measurements, flow records and/or notifications\n   on\
    \ specific events at the different observation points must be\n   correlated,\
    \ for example the arrival of a certain packet.  For this,\n   the provisioning\
    \ of post-processing functions (e.g., the generation\n   of packet IDs) at the\
    \ metering processes would be useful.  Since QoS\n   monitoring can lead to a\
    \ huge amount of measurement result data, it\n   would highly benefit from mechanisms\
    \ to reduce the measurement data,\n   like aggregation of results and sampling.\n\
    \   Please note that not all requirements for QoS monitoring are covered\n   by\
    \ the IPFIX requirements specified in the following sections.  The\n   IPFIX requirements\
    \ are targeted at per flow information including\n   summaries of per-packet properties\
    \ for packets within a flow, but not\n   per-packet information itself.  For example\
    \ jitter measurement\n   requires timestamping each packet and reporting of all\
    \ timestamps of\n   a flow, but the IPFIX requirements only cover timestamps of\
    \ first and\n   last packet of a flow.\n4.  Distinguishing Flows\n   Packets are\
    \ mapped to flows by evaluating their properties.  Packets\n   with common properties\
    \ are considered to belong to the same flow.  A\n   packet showing at least one\
    \ difference in the set of properties is\n   considered to belong to a different\
    \ flow.\n   The following subsections list a set of properties which a metering\n\
    \   process must, should, or may be able to evaluate for mapping packets\n   to\
    \ flows.  Please note that requiring the ability to evaluate a\n   certain property\
    \ does not imply that this property must be evaluated\n   for each packet.  In\
    \ other words, meeting the IPFIX requirements\n   means that the metering process\
    \ in general must be able, via its\n   configuration, to somehow support to distinguish\
    \ flows via all the\n   must fields, even if in certain circumstances/for certain\n\
    \   applications, only a subset of the must fields is needed and\n   effectively\
    \ used to distinguish flows.\n   Which combination of properties is used for distinguishing\
    \ flows and\n   how these properties are evaluated depends on the configuration\
    \ of\n   the metering process.  The configured choice of evaluated properties\n\
    \   strongly depends on the environment and purpose of the measurement\n   and\
    \ on the information required by the collecting process.  But in\n   any case,\
    \ a collecting process must be able to clearly identify, for\n   each received\
    \ flow record, which set of properties was used for\n   distinguishing this flow\
    \ from other ones.\n   For specific deployments, only a subset of the required\
    \ properties\n   listed below can be used to distinguish flows. For example, in\
    \ order\n   to aggregate the flow records and reduce the number of flow records\n\
    \   exported.  On the other hand, some other deployments will require\n   distinguishing\
    \ flows by some extra parameters, such as the TTL field\n   of the IP header or\
    \ the BGP Autonomous System number [RFC1771] of the\n   IP destination address.\n\
    4.1.  Encryption\n   If encryption is used, the metering process might not be\
    \ able to\n   access all header fields.  A metering process must meet the\n  \
    \ requirements stated in this section 4 only for packets that have the\n   relevant\
    \ header fields not encrypted.\n4.2.  Interfaces\n   The metering process must\
    \ be able to separate flows by the incoming\n   interface or by the outgoing interface\
    \ or by both of them.\n4.3.  IP Header Fields\n   The metering process must be\
    \ able to separate flows by the following\n   fields of the IP header:\n     \
    \ 1. source IP address\n      2. destination IP address\n      3. protocol type\
    \ (TCP, UDP, ICMP, ...)\n   For source address and destination address, separating\
    \ by full match\n   must be supported as well as separation by prefix match.\n\
    \   The metering process should be able to separate flows by the IP\n   version\
    \ number if the observation point is located at a device that\n   is supporting\
    \ more than one IP version.\n4.4.  Transport Header Fields\n   The metering process\
    \ must be able to separate flows by the port\n   numbers of the transport header\
    \ in case of TCP or UDP being used as\n   transport protocol.  The metering process\
    \ should be able to separate\n   flows by the port numbers of the transport header\
    \ in case of SCTP\n   [RFC2960].\n   For separation, both, source and destination\
    \ port number must be\n   supported for distinguishing flows, individually as\
    \ well as in\n   combination.\n4.5.  MPLS Label\n   If the observation point is\
    \ located at a device supporting\n   Multiprotocol Label Switching (MPLS, see\
    \ [RFC3031]) then the metering\n   process must be able to separate flows by the\
    \ MPLS label.\n4.6.  DiffServ Code Point\n   If the observation point is located\
    \ at a device supporting\n   Differentiated Services (DiffServ) then the metering\
    \ process must be\n   able to separate flows by the DiffServ Code Point (DSCP,\
    \ see\n   [RFC2474]).\n5.  Metering Process\n   The following are requirements\
    \ for the metering process.  All\n   measurements must be conducted from the point\
    \ of view of the\n   observation point.\n5.1.  Reliability\n   The metering process\
    \ must either be reliable or the absence of\n   reliability must be known and\
    \ indicated.  The metering process is\n   reliable if each packet passing the\
    \ observation point is metered\n   according to the configuration of the metering\
    \ process.  If, e.g.,\n   due to some overload, not all passing packets can be\
    \ included into\n   the metering process, then the metering process must be able\
    \ to\n   detect this failure and to report it.\n5.2.  Sampling\n   Sampling describes\
    \ the systematic or random selection of a subset of\n   elements (the sample)\
    \ out of a set of elements (the parent\n   population).  Usually the purpose of\
    \ applying sampling techniques is\n   to estimate a parameter of the parent population\
    \ by using only the\n   elements of the subset.  Sampling techniques can be applied\
    \ for\n   instance to select a subset of packets out of all packets of a flow\n\
    \   or to select a subset of flows out of all flows on a link.  Sampling\n   methods\
    \ differ in their sampling strategy (e.g., systematic or\n   random) and in the\
    \ event that triggers the selection of an element.\n   The selection of one packet\
    \ can for instance be triggered by its\n   arrival time (time-based sampling),\
    \ by its position in the flow\n   (count-based sampling) or by the packet content\
    \ (content-based\n   sampling).\n   The metering process may support packet sampling.\
    \  If sampling is\n   supported, the sampling configuration must be well defined.\
    \  The\n   sampling configuration includes the sampling method and all its\n \
    \  parameters.\n   If the sampling configuration is changed during operation,\
    \ the new\n   sampling configuration with its parameters must be indicated to\
    \ all\n   collecting processes receiving the affected flow records.  Changing\n\
    \   the sampling configuration includes: adding a sampling function to\n   the\
    \ metering process, removing a sampling function from the metering\n   process,\
    \ change sampling method, and change sampling parameter(s).\n   In case of any\
    \ change in the sampling configuration, all flow records\n   metered by the previous\
    \ sampling configuration must be terminated and\n   exported according to the\
    \ export configuration.  The metering process\n   must not merge the flow records\
    \ generated with the new sampling\n   configuration with the flow records generated\
    \ with the previous\n   sampling configuration.\n5.3.  Overload Behavior\n   In\
    \ case of an overload, for example lack of memory or processing\n   power, the\
    \ metering process may change its behavior in order to cope\n   with the lack\
    \ of resources.  Possible reactions include:\n         -  Reduce the number of\
    \ flows to be metered.  This can be\n            achieved by more coarse-grained\
    \ flow measurement or by a\n            restriction of the flow records to a subset\
    \ of the set of\n            original ones.\n         -  Start sampling packets\
    \ before they are processed by the\n            metering process or - if sampling\
    \ is already performed -\n            reduce the sampling frequency.\n       \
    \  -  Stop metering.\n         -  Reducing the resource usage of competing processes\
    \ on the\n            same device.  Example: reducing the packet forwarding\n\
    \            throughput\n   Overload behavior is not restricted to the four options\
    \ listed above.\n   But in case the overload behavior induces a change of the\
    \ metering\n   process behavior, the overload behavior must be clearly defined.\n\
    \   For some flows, the change of behavior might have an impact on the\n   data\
    \ that would be stored in the associated flow records after the\n   change, for\
    \ example if the packet classification is changed or the\n   sampling frequency.\
    \  These flows must be considered as terminated and\n   the associated flow records\
    \ must be exported separately from new ones\n   generated after the behavior change.\
    \  The terminated flow records and\n   new ones generated after the behavior change\
    \ must not be merged by\n   the metering process.  The collecting process must\
    \ be able to\n   distinguish the affected flow records generated before and after\
    \ the\n   change of behavior.  This requirement does not apply to flows and\n\
    \   associated flow records not affected by the change of metering\n   process\
    \ behavior.\n5.4.  Timestamps\n   The metering process must be able to generate\
    \ timestamps for the\n   first and the last observation of a packet of a flow\
    \ at the\n   observation point.  The timestamp resolution must be at least the\
    \ one\n   of the sysUpTime [RFC3418], which is one centisecond.\n5.5.  Time Synchronization\n\
    \   It must be possible to synchronize timestamps generated by a metering\n  \
    \ process with Coordinated Universal Time (UTC).\n   Note that the possibility\
    \ of synchronizing timestamps of each single\n   metering process with UTC implies\
    \ the possibility of synchronizing\n   timestamps generated by different metering\
    \ processes.\n   Note that this does not necessarily imply that timestamps generated\n\
    \   by the metering process are UTC timestamps.  For example, this\n   requirement\
    \ can be met by using local system clock values as\n   timestamps and adding an\
    \ additional timestamp when exporting a report\n   to a collecting process.  Then\
    \ the collecting process can synchronize\n   the timestamps by calculating the\
    \ offset between UTC and the system\n   clock of the metering process.\n5.6. \
    \ Flow Expiration\n   The metering process must be able to detect flow expirations.\
    \  A flow\n   is considered to be expired if no packet of this flow has been\n\
    \   observed for a given timeout interval.  The metering process may\n   support\
    \ means for detecting the expiration of a flow before a timeout\n   occurs, for\
    \ example by detecting the FIN or RST bits in a TCP\n   connection.  The procedure\
    \ for detecting a flow expiration must be\n   clearly defined.\n5.7.  Multicast\
    \ Flows\n   For multicast flows containing packets replicated to multiple output\n\
    \   interfaces, the metering process should be able to maintain discrete\n   flow\
    \ records per different output interface.  For example, the\n   metering process\
    \ should be able to report an incoming multicast\n   packet that is replicated\
    \ to four output interfaces in four different\n   flow records that differ by\
    \ the output interface.\n5.8.  Packet Fragmentation\n   In case of IP packet fragmentation\
    \ and depending on the\n   classification scheme, only the zero-offset fragment\
    \ of a single\n   initial packet might contain sufficient information to classify\
    \ the\n   packet.  Note that this fragment should be the first one generated by\n\
    \   the router imposing the fragmentation [RFC791], but might not be the\n   first\
    \ one observed by the IPFIX device, due to reordering reasons.\n   The metering\
    \ process may keep state of IP packet fragmentation in\n   order to map fragments\
    \ that do not contain sufficient header\n   information correctly to flows.\n\
    5.9.  Ignore Port Copy\n   The metering process may be able to ignore packets\
    \ which are\n   generated by a port copy function acting at the device where the\n\
    \   observation point of a flow is located.\n6.  Data Export\n   The following\
    \ are requirements for exporting flow records out of the\n   exporting process.\
    \  Beside requirements on the data transfer, we\n   separate requirements concerning\
    \ the information model from\n   requirements concerning the data model.  Furthermore,\
    \ we list\n   requirements on reporting times and notification on specific events,\n\
    \   and on anonymization of flow records.\n6.1.  Information Model\n   The information\
    \ model for the flow information export is the list of\n   attributes of a flow\
    \ to be contained in the report (including the\n   semantics of the attributes).\n\
    \   This section lists attributes an exporting process must, should or\n   may\
    \ be able to report.  This does not imply that each exported flow\n   record must\
    \ contain all required attributes.  But it implies that it\n   must be possible\
    \ to configure the exporting process in a way that the\n   information of all\
    \ required attributes can be transmitted from the\n   exporting process to the\
    \ receiving collecting process(es) for each\n   exported flow.\n   In other words,\
    \ meeting the IPFIX requirements means that the\n   exporting process in general\
    \ must be able, via its configuration, to\n   somehow support to report all the\
    \ must fields, even if in certain\n   circumstances or for certain applications,\
    \ only a subset of the set\n   of all must fields is needed and effectively reported.\n\
    \   Beyond that, the exporting process might offer to report further\n   attributes\
    \ not mentioned here.  A particular flow record may contain\n   some of the \"\
    required\" attributes as well as some additional ones,\n   for example covering\
    \ future technologies.\n   This document does not impose that the following attributes\
    \ are\n   reported for every single flow record, especially for repetitive\n \
    \  attributes.  For example, if the observation point is the incoming\n   packet\
    \ stream at the IP interface with the ifIndex value 3, then this\n   observation\
    \ point does not have to be exported as part of every\n   single flow record.\
    \  Exporting it just once might give sufficient\n   information to the collecting\
    \ process.\n   The exporting process must be able to report the following attributes\n\
    \   for each metered flow:\n      1.  IP version number\n          This requirement\
    \ only applies if the observation point is\n          located at a device supporting\
    \ more than one version of IP.\n      2.  source IP address\n      3.  destination\
    \ IP address\n      4.  IP protocol type (TCP,UDP,ICMP,...)\n      5.  if protocol\
    \ type is TCP or UDP: source TCP/UDP port number\n      6.  if protocol type is\
    \ TCP or UDP: destination TCP/UDP port\n          number\n      7.  packet counter\n\
    \          If a packet is fragmented, each fragment is counted as an\n       \
    \   individual packet.\n      8.  byte counter\n          The sum of the total\
    \ length in bytes of all IP packets\n          belonging to the flow.  The total\
    \ length of a packet covers IP\n          header and IP payload.\n      9.  type\
    \ of service octet (in case of IPv4), traffic class octet\n          (in case\
    \ of IPv6).  According to [RFC2474], these octets\n          include the DiffServ\
    \ Code Point that has a length of 6 bits.\n      10. in case of IPv6: Flow Label\n\
    \      11. if MPLS is supported at the observation point: the top MPLS\n     \
    \     label or the corresponding forwarding equivalence class (FEC,\n        \
    \  [RFC3031]) bound to that label.  The FEC is typically defined\n          by\
    \ an IP prefix.\n      12. timestamp of the first packet of the flow\n      13.\
    \ timestamp of the last packet of the flow\n      14. if sampling is used: sampling\
    \ configuration\n      15. unique identifier of the observation point\n      16.\
    \ unique identifier of the exporting process\n   The exporting process should\
    \ be able to report the following\n   attributes for each metered flow:\n    \
    \  17. if protocol type is ICMP: ICMP type and code\n      18. input interface\
    \ (ifIndex)\n          This requirement does not apply if the observation point\
    \ is\n          located at a probe device.\n      19. output interface (ifIndex)\n\
    \          This requirement does not apply if the observation point is\n     \
    \     located at a probe device.\n      20. multicast replication factor\n   \
    \       the number of outgoing packets originating from a single\n          incoming\
    \ multicast packet.  This is a dynamic property of\n          multicast flows,\
    \ that may change over time.  For unicast flows\n          it has the constant\
    \ value 1.  The reported value must be the\n          value of the factor at the\
    \ time the flow record is exported.\n   The exporting process may be able to report\
    \ the following attributes\n   for each metered flow:\n      21. Time To Live\
    \ (in case of IPv4) or Hop Limit (in case of IPv6)\n      22. IP header flags\n\
    \      23. TCP header flags\n      24. dropped packet counter at the observation\
    \ point\n          If a packet is fragmented, each fragment must be counted as\
    \ an\n          individual packet.\n      25. fragmented packet counter\n    \
    \      counter of all packets for which the fragmented bit is set in\n       \
    \   the IP header\n      26. next hop IP address\n      27. source BGP Autonomous\
    \ System number (see [RFC1771])\n      28. destination BGP Autonomous System number\n\
    \      29. next hop BGP Autonomous System number\n6.2.  Data Model\n   The data\
    \ model describes how information is represented in flow\n   records.\n   The\
    \ data model must be extensible for future attributes to be added.\n   Even if\
    \ a set of attributes is fixed in the flow record, the data\n   model must provide\
    \ a way of extending the record by configuration or\n   for certain implementations.\n\
    \   The data model used for exporting flow information must be flexible\n   concerning\
    \ the flow attributes contained in flow records.  A flexible\n   record format\
    \ would offer the possibility of defining records in a\n   flexible (customizable)\
    \ way regarding the number and type of\n   contained attributes.\n   The data\
    \ model should be independent of the underlying transport\n   protocol, i.e.,\
    \ the data transfer.\n6.3.  Data Transfer\n   Requirements for the data transfer\
    \ include reliability, congestion\n   awareness, and security requirements.  For\
    \ meeting these requirements\n   the exporting process can utilize existing security\
    \ features provided\n   by the device hosting the process and/or provided by the\
    \ transport\n   network.  For example it can use existing security technologies\
    \ for\n   authentication and encryption or it can rely on physical protection\n\
    \   of a separated network for transferring flow information.\n6.3.1.  Congestion\
    \ Awareness\n   For the data transfer, a congestion aware protocol must be supported.\n\
    6.3.2.  Reliability\n   Loss of flow records during the data transfer from the\
    \ exporting\n   process to the collecting process must be indicated at the collecting\n\
    \   process.  This indication must allow the collecting process to gauge\n   the\
    \ number of flow records lost.  Possible reasons for flow records\n   loss include\
    \ but are not limited to:\n      1. Metering process limitations: lack of memory,\
    \ processing power,\n         etc.  These limitations are already covered in section\
    \ 5.1.\n      2. Exporting process limitations: lack of memory, processing\n \
    \        power, etc.\n      3. Data transfer problems: packets that carry flow\
    \ records sent\n         from the exporting process to the collecting process,\
    \ are\n         dropped by the network.  Examples are connection failures and\n\
    \         losses by a transport protocol that specifically offers\n         congestion\
    \ avoidance without persistent transport-level\n         reliability.\n      4.\
    \ Collecting process limitations: it may be experiencing\n         congestion\
    \ and not able to buffer new flows records.\n      5. Operation and Maintenance:\
    \ the collecting process is taken down\n         for maintenance or other administrative\
    \ purposes.\n   Please note that if an unreliable transport protocol is used,\n\
    \   reliability can be provided by higher layers.  If reliability is\n   provided\
    \ by higher layers, only lack of overall reliability must be\n   indicated.  For\
    \ example reordering could be dealt with by adding a\n   sequence number to each\
    \ packet.\n   The data transfer between exporting process and collecting process\n\
    \   must be open to reliability extensions including at least\n      - retransmission\
    \ of lost flow records,\n      - detection of disconnection and fail-over, and\n\
    \      - acknowledgement of flow records by the collecting process.\n   This extensibility\
    \ may be used to provide additional reliability.\n   The extended protocol must\
    \ still meet the requirements described in\n   this section, particularly, it\
    \ must still be congestion aware.\n   Therefore, extensions using retransmissions\
    \ must use exponential\n   backoff.\n6.3.3.  Security\n   Confidentiality of IPFIX\
    \ data transferred from an exporting process\n   to a collecting process must\
    \ be ensured.\n   Integrity of IPFIX data transferred from an exporting process\
    \ to a\n   collecting process must be ensured.\n   Authenticity of IPFIX data\
    \ transferred from an exporting process to a\n   collecting process must be ensured.\n\
    \   The security requirements have been derived from an analysis of\n   potential\
    \ security threads.  The analysis is summarized in Section\n   10.\n6.4.  Push\
    \ and Pull Mode Reporting\n   In general, there are two ways of deciding on reporting\
    \ times: push\n   mode and pull mode.  In push mode, the exporting process decides\n\
    \   without an external trigger when to send flow records.  In pull mode,\n  \
    \ sending flow records is triggered by an explicit request from a\n   collecting\
    \ process.  The exporting process must support push mode\n   reporting, it may\
    \ support pull mode reporting.\n6.5.  Regular Reporting Interval\n   The exporting\
    \ process should be capable of reporting measured traffic\n   data regularly according\
    \ to a given interval length.\n6.6.  Notification on Specific Events\n   The exporting\
    \ process may be capable of sending notifications to a\n   collecting process,\
    \ if a specific event occurs.  Such an event can\n   be, for instance, the arrival\
    \ of the first packet of a new flow, or\n   the termination of a flow after flow\
    \ timeout.\n6.7.  Anonymization\n   The exporting process may be capable of anonymizing\
    \ source and\n   destination IP addresses in flow data before exporting them.\
    \  It may\n   support anonymization of port numbers and other fields.  Please\
    \ note\n   that anonymization is not originally an application requirement, but\n\
    \   derived from general requirements for treatment of measured traffic\n   data\
    \ within a network.\n   For several applications anonymization cannot be applied,\
    \ for example\n   for accounting and traffic engineering.  However, for protecting\
    \ the\n   network user's privacy, anonymization should be applied whenever\n \
    \  possible.  In many cases it is sufficient if anonymization is\n   performed\
    \ at the collecting process after flow information has been\n   exported.  This\
    \ provides a reasonable protection of privacy as long\n   as confidentiality of\
    \ the export is provided.\n   It would be desirable to request that all IPFIX\
    \ exporters provide\n   anonymization of flow records, but algorithms for anonymization\
    \ are\n   still a research issue.  Several are known but the security they\n \
    \  provide and their other properties are not yet studied sufficiently.\n   Also,\
    \ there is no standardized method for anonymization.  Therefore,\n   the requirement\
    \ for the exporting process supporting anonymization is\n   qualified with 'may'\
    \ and not with 'must'.\n   If anonymized flow data is exported, this must be clearly\
    \ indicated\n   to all receiving collecting processes, such that they can distinguish\n\
    \   anonymized data from non-anonymized data.\n7.  Configuration\n   If configuration\
    \ is done remotely, security should be provided for\n   the configuration process\
    \ covering confidentiality, integrity, and\n   authenticity.  The means used for\
    \ remote configuration are out of the\n   scope of this document.\n7.1.  Configuration\
    \ of the Metering Process\n   The metering process must provide a way of configuring\
    \ traffic\n   measurement.  The following parameters of the metering process should\n\
    \   be configurable:\n         1. specification of the observation point\n   \
    \         e.g., an interface or a list of interfaces to be monitored.\n      \
    \   2. specifications of flows to be metered\n         3. flow timeouts\n   The\
    \ following parameters may be configurable:\n         4. sampling method and parameters,\
    \ if feature is supported\n         5. overload behavior, if feature is supported\n\
    7.2.  Configuration of the Exporting Process\n   The exporting process must provide\
    \ a way of configuring the data\n   export.  The following parameters of the exporting\
    \ process should be\n   configurable:\n         1. reporting data format\n   \
    \         Specifying the reporting data format must include a\n            selection\
    \ of attributes to be reported for each flow.\n         2. the collecting process(es)\
    \ to which flows are reported\n         3. the reporting interval\n          \
    \  This requirement only applies if the exporting process\n            supports\
    \ reporting in regular intervals.\n         4. notifications to be sent to the\
    \ collecting process(es)\n            This requirement only applies if the exporting\
    \ process\n            supports notifications.\n         5. flow anonymization\n\
    \            This requirement only applies if the exporting process\n        \
    \    supports flow anonymization.\n8.  General Requirements\n8.1.  Openness\n\
    \   IPFIX specifications should be open to future technologies.  This\n   includes\
    \ extensibility of configuration of the metering process and\n   the exporting\
    \ process.\n   Openness is also required concerning the extensibility of the data\n\
    \   model, as stated in section 6.2.\n8.2.  Scalability\n   Data collection from\
    \ hundreds of different exporting processes must\n   be supported.  The collecting\
    \ process must be able to distinguish\n   several hundred exporting processes\
    \ by their identifiers.\n8.3.  Several Collecting Processes\n   The exporting\
    \ process may be able to export flow information to more\n   than one collecting\
    \ process.  If an exporting process is able to\n   export flow records to multiple\
    \ collecting processes then it must be\n   able to ensure that the flow records\
    \ can be identified so that\n   duplicates can be detected between different collecting\
    \ processes and\n   double counting problems can be avoided.\n9.  Special Device\
    \ Considerations\n   This document intends to avoid constraining the architecture\
    \ of\n   probes, routers, and other devices hosting observation points,\n   metering\
    \ processes, exporting processes, and/or collecting processes.\n   It can be expected\
    \ that typically observation point, metering\n   process, and exporting process\
    \ are co-located at a single device.\n   However, the requirements defined in\
    \ this document do not exclude\n   devices that derive from this configuration.\
    \  Figure 2 shows some\n   examples.\n   All examples are composed of one or more\
    \ of the following elements:\n   observation point (O), metering process (M),\
    \ exporting process (E),\n   and collecting process (C).  The observation points\
    \ shown in the\n   figure are always the most fine-granular ones supported by\
    \ the\n   respective device.\n         +---+     +-----+     +---------+     \
    \  +---------+\n         | E-+->   |  E--+->   |    E----+->   <-+--E   E--+->\n\
    \         | | |     |  |  |     |   / \\   |       |  |   |  |\n         | M |\
    \     |  M  |     |  M   M  |       |  M   M  |\n         | | |     | /|\\ | \
    \    | /|\\ /|\\ |       | /|\\ /|\\ |\n         | O |     | OOO |     | OOO OOO\
    \ |       | OOO OOO |\n         +---+     +-----+     +---------+       +---------+\n\
    \         Probe      Basic        Complex          Multiple\n                \
    \    Router       Router           Exporting\n                               \
    \                   Processes\n       +---+     +---+     +---+\n       | E-+->\
    \   | E-+->   | E-+------------->---+\n       | | |     | | |     | | | +---+\
    \         +-+-----+\n       +-+-+     | M |     | M | | E-+------->-+-C-M-E-+->\n\
    \         |       | | |     | | | | | | +---+   +-+-----+\n       +-+-+     +-+-+\
    \     | O | | M | | E-+->---+\n       | | |       |       +---+ | | | | | |\n\
    \       | M |     +-+-+           | O | | M |\n       | | |     | | |        \
    \   +---+ | | |           +-----+\n       | O |     | O |                 | O\
    \ |        ->-+-C-E-+->\n       +---+     +---+                 +---+        \
    \   +-----+\n      Protocol   Remote             Concentrator        Proxy\n \
    \     Converter  Observation\n                   Figure 2: IPFIX-related Devices\n\
    \   A very simple device is a probe.  A typical probe contains a single\n   observation\
    \ point, a single metering process, and a single exporting\n   process.\n   A\
    \ basic router extends this structure by multiple observation points.\n   Here,\
    \ the observation point of a particular flow may be one of the\n   displayed most\
    \ fine-granular observation points, but also it may be a\n   set of them.\n  \
    \ A more complex router may host more than one metering process, for\n   example\
    \ one per line card.  Please note that here, the observation\n   point of a single\
    \ flow cannot exceed the set of most fine-granular\n   observation points linked\
    \ to a single metering process, because only\n   the metering process can merge\
    \ packets observed at different fine-\n   granular observation points to a joint\
    \ flow.  An observation point\n   containing all most fine-granular observation\
    \ points of this router\n   is not possible with this structure.  Alternatively,\
    \ a complex router\n   may host different exporting processes for flow records\
    \ generated by\n   different metering processes.\n   A protocol converter makes\
    \ use of a metering process that can be\n   accessed only by protocol(s) other\
    \ than the one defined for IPFIX,\n   for example, the SNMP and the Meter MIB\
    \ module [RFC2720].  Then the\n   exporting process receives flow records from\
    \ a remote metering\n   process and exports these records using the IPFIX protocol.\
    \  Please\n   note that this document does not make any particular assumption\
    \ on\n   how metering processes and export processes exchange information, as\n\
    \   long as all individual requirements for these processes are met.\n   Also\
    \ the locations of metering processes are not of any relevance for\n   this document\
    \ (in contrast to the locations of observation points and\n   the exporting processes).\n\
    \   In the example of remote packet observation in Figure 2 the metering\n   process\
    \ and the observation point are not co-located.  Packet headers\n   captured at\
    \ an observation point may be exported as raw data to a\n   device hosting metering\
    \ process and exporting process.  Again, this\n   document does not make any particular\
    \ assumption on how packet\n   headers are transferred from observation points\
    \ to metering\n   processes, as long as all requirements for the metering processes\
    \ are\n   met.\n   An intermediate structure between protocol converter and remote\n\
    \   observation (not shown in the Figure) would be a split metering\n   process,\
    \ for example performing timestamping and sampling at the\n   device hosting the\
    \ observation point and performing packet\n   classification at another device\
    \ hosting the exporting process.\n   A concentrator receives flow records via\
    \ the IPFIX protocol, merges\n   them into more aggregated flow records, and exports\
    \ them again using\n   the IPFIX protocol.  Please note that for the final flow\
    \ records the\n   resulting observation point may be a superset of the more fine-\n\
    \   granular observation points at the first level devices.  The metering\n  \
    \ process of the final flow records is composed by the (partial)\n   metering\
    \ processes at the first level devices and the partial\n   metering process at\
    \ the concentrator.\n   Finally, a very simple IPFIX-related device is a proxy.\
    \  It just\n   receives flow records using the IPFIX protocol and sends them further\n\
    \   using the same protocol.  A proxy might be useful for traversing\n   firewalls\
    \ or other gateways.\n10.  Security Considerations\n   An IPFIX protocol must\
    \ be capable of transporting data over the\n   public Internet.  Therefore it\
    \ cannot be excluded that an attacker\n   captures or modifies packets or inserts\
    \ additional packets.\n   This section describes security requirements for IPFIX.\
    \  Like other\n   requirements, the security requirements differ among the considered\n\
    \   applications.  The incentive to modify collected data for accounting\n   or\
    \ intrusion detection for instance is usually higher than the\n   incentive to\
    \ change data collected for traffic profiling.  A detailed\n   list of the required\
    \ security features per application can be found\n   in the appendix.\n   The\
    \ suggestion of concrete solutions for achieving the required\n   security properties\
    \ should be part of an IPFIX architecture and\n   protocol.  It is out of scope\
    \ of this document.  Also methods for\n   remote configuration of the metering\
    \ processes and exporting\n   processes are out of scope.  Therefore, threats\
    \ that are caused by\n   data exchange for remote configuration are not considered\
    \ here.\n   The following potential security hazards for an IPFIX protocol have\n\
    \   been identified: disclosure of IP flow information, forgery of flow\n   records,\
    \ and Denial of Service (DoS) attacks.\n10.1.  Disclosure of Flow Information\
    \ Data\n   The content of data exchanged by an IPFIX protocol (for example IPFIX\n\
    \   flow records) should be kept confidential between the involved\n   parties\
    \ (exporting process and collecting process).  Observation of\n   IPFIX flow records\
    \ gives an attacker information about the active\n   flows in the network, communication\
    \ endpoints and traffic patterns.\n   This information cannot only be used to\
    \ spy on user behavior but also\n   to plan and conceal future attacks.  Therefore,\
    \ the requirements\n   specified in section 6.3.3. include confidentiality of\
    \ the\n   transferred data.  This can be achieved for instance by encryption.\n\
    \   Also the privacy of users acting as sender or receiver of the\n   measured\
    \ traffic needs to be protected when they use the Internet.\n   In many countries\
    \ the right to store user-specific data (including\n   the user's traffic profiles)\
    \ is restricted by law or by regulations.\n   In addition to encryption, this\
    \ kind of privacy can also be protected\n   by anonymizing flow records.  For\
    \ many traffic flow measurements,\n   anonymized data is as useful as precise\
    \ data.  Therefore, it is\n   desirable to support anonymization in IPFIX implementations.\
    \  It is\n   beyond the scope of the IPFIX Working Group to develop and\n   standardize\
    \ anonymization methods.  However, the requirements for\n   extensibility of the\
    \ IPFIX protocol are sufficient to support\n   anonymized flow records when appropriate\
    \ methods are standardized.\n10.2.  Forgery of Flow Records\n   If flow records\
    \ are used in accounting and/or security applications,\n   there are potentially\
    \ strong incentives to forge exported IPFIX flow\n   records (for example, to\
    \ save money or prevent the detection of an\n   attack).  This can be done either\
    \ by altering flow records on the\n   path or by injecting forged flow records\
    \ that pretend to be\n   originated by the original exporting process.\n   Special\
    \ caution is required if security applications rely on flow\n   measurements.\
    \  With forged flow records it is possible to trick\n   security applications.\
    \  For example, an application may be lead to\n   falsely conclude that a DoS\
    \ attack is in progress.  If such an\n   injection of IPFIX traffic flow records\
    \ fools the security\n   application, causing it to erroneously conclude that\
    \ a DoS attack is\n   underway, then the countermeasures employed by the security\n\
    \   application may actually deny useful non-malicious services.\n   In order\
    \ to make an IPFIX protocol resistant against such attacks,\n   authentication\
    \ and integrity must be provided, as specified in\n   section 6.3.3.\n10.3.  Denial\
    \ of Service (DoS) Attacks\n   DoS attacks on routers or other middleboxes that\
    \ have the IPFIX\n   protocol implemented would also affect the IPFIX protocol\
    \ and impair\n   the sending of IPFIX records.  Nevertheless, since such hazards\
    \ are\n   not induced specifically by the IPFIX protocol the prevention of such\n\
    \   attacks is out of scope of this document.\n   However, IPFIX itself also causes\
    \ potential hazards for DoS attacks.\n   All processes that expect the reception\
    \ of traffic can be target of a\n   DoS attack.  With the exporting process this\
    \ is only the case if it\n   supports the pull mode (which can be an optional\
    \ feature of the IPFIX\n   protocol according to this document).  The collecting\
    \ process always\n   expects data and therefore can be flooded by flow records.\n\
    11.  Acknowledgments\n   Many thanks to Georg Carle for contributing to the application\n\
    \   analysis, to K.C. Norseth for several fine-tunings, to Sandra\n   Tartarelli\
    \ for checking the appendix, and to a lot of people on the\n   mailing list for\
    \ providing valuable comments and suggestions\n   including Nevil Brownlee, Carter\
    \ Bullard, Paul Calato, Ram Gopal, Tal\n   Givoly, Jeff Meyer, Reinaldo Penno,\
    \ Sonia Panchen, Simon Leinen,\n   David Plonka, Ganesh Sadasivan, Kevin Zhang,\
    \ and many more.\n12.  Appendix: Derivation of Requirements from Applications\n\
    \   The following table documents, how the requirements stated in\n   sections\
    \ 3-7 are derived from requirements of the applications listed\n   in section\
    \ 2.\n   Used abbreviations:\n      M = must\n      S = should\n      O = may\
    \ (optional)\n      - = DONT CARE\n-----------------------------------------------------------------------.\n\
    \   IPFIX                                                               |\n----------------------------------------------------------------.\
    \      |\nE: QoS Monitoring                                               |  \
    \    |\n----------------------------------------------------------.     |    \
    \  |\nD: Attack/Intrusion Detection                             |     |      |\n\
    ----------------------------------------------------.     |     |      |\nC: Traffic\
    \ Engineering                              |     |     |      |\n----------------------------------------------.\
    \     |     |     |      |\nB: Traffic Profiling                          |  \
    \   |     |     |      |\n----------------------------------------.     |    \
    \ |     |     |      |\nA: Usage-based Accounting               |     |     |\
    \     |     |      |\n----------------------------------.     |     |     |  \
    \   |     |      |\n                                  |     |     |     |    \
    \ |     |      |\n| Sect. |    Requirement          |  A  |  B  |  C  |  D  |\
    \  E  | IPFIX|\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 4.    | DISTINGUISHING FLOWS                                         |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 4.    | Combination of          |  M  |  M  |  M  |  M  |  M  |  M   |\n|  \
    \     | required attributes     |     |     |     |     |     |      |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 4.1.  | in/out IF               |  S  |  M  |  M  |  S  |  S  |  M   |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 4.2.  | src/dst address         |  M  |  M  |  M  |  M  |  M  |  M   |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 4.2.  | Masking of IP addresses |  M  |  M  |  M  |  M  |  M  |  M   |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 4.2.  | transport protocol      |  M  |  M  |  -  |  M  |  M  |  M   |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 4.2.  | version field           |  -  |  S  |  S  |  O  |  O  |  S   |\n|  \
    \     |                         |     |     | (b) |     |     |      |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    |-------+-------------------------+-----+-----+-----+-----+-----+------|\n| Sect.\
    \ |    Requirement          |  A  |  B  |  C  |  D  |  E  | IPFIX|\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 4.3.  | src/dst port            |  M  |  M  |  -  |  M  |  M  |  M   |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 4.4.  | MPLS label (a)          |  S  |  S  |  M  |  O  |  S  |  M   |\n|  \
    \     |                         |     |     | (c) |     |     |      |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 4.5.  | DSCP (a)                |  M  |  S  |  M  |  O  |  M  |  M   |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 5.    | METERING PROCESS                                             |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 5.1.  | Reliability             |  M  |  S  |  S  |  S  |  S  |      |\n|-------+-------------------------+-----+-----+-----+-----+-----+\
    \  M   |\n| 5.1.  | Indication of           |  -  |  M  |  M  |  M  |  M  |  \
    \    |\n|       | missing reliability     |     |     |     |     |     |    \
    \  |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 5.2.  | Sampling (d,e)          |  O  |  O  |  O  |  O  |  O  |  O   |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 5.3.  | Overload Behavior (f)   |  O  |  O  |  O  |  O  |  O  |  O   |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 5.4.  | Timestamps              |  M  |  O  |  O  |  S  |  M  |  M   |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 5.5.  | Time synchronization    |  M  |  S  |  S  |  S  |  M  |  M   |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 5.6.  | Flow timeout            |  M  |  S  |  -  |  O  |  O  |  M   |\n|  \
    \     |                         | (g) |     |     |     |     |      |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 5.7.  | Multicast flows         |  S  |  O  |  O  |  O  |  S  |  S   |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 5.8.  | Packet fragmentation    |  O  |  O  |  -  |  -  |  -  |  O   |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 5.9.  | Ignore port copy        |  O  |  O  |  O  |  O  |  O  |  O   |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 6.    | DATA EXPORT                                                  |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 6.1.  | INFORMATION MODEL                                            |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 6.1.  | IP Version              |  -  |  M  |  M  |  O  |  O  |  M   |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 6.1.  | src/dst address         |  M  |  M  |  M  |  M  |  M  |  M   |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 6.1.  | transport protocol      |  M  |  M  |  -  |  M  |  M  |  M   |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 6.1.  | src/dst port            |  M  |  M  |  -  |  M  |  M  |  M   |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 6.1.  | Packet counter (h)      |  S  |  M  |  M  |  S  |  S  |  M   |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    |-------+-------------------------+-----+-----+-----+-----+-----+------|\n| Sect.\
    \ |    Requirement          |  A  |  B  |  C  |  D  |  E  | IPFIX|\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 6.1.  | Byte counter            |  M  |  M  |  M  |  S  |  S  |  M   |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 6.1.  | ToS (IPv4) or traffic   |  M  |  S  |  M  |  O  |  M  |  M   |\n|  \
    \     | class octet (IPv6)      |     |     |     |     |     |      |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 6.1.  | Flow Label (IPv6)       |  M  |  S  |  M  |  O  |  M  |  M   |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 6.1.  | MPLS label (a)          |  S  |  S  |  M  |  O  |  S  |  M   |\n|  \
    \     |                         |     |     | (c) |     |     |      |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 6.1.  | Timestamps for          |  M  |  O  |  O  |  S  |  S  |  M   |\n|  \
    \     | first/last packet       |     |     |     |     |     |      |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 6.1.  | Sampling configuration  |  M  |  M  |  M  |  M  |  M  |  M   |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 6.1.  | observation point       |  M  |  M  |  M  |  M  |  M  |  M   |\n|  \
    \     | identifier              |     |     |     |     |     |      |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 6.1.  | export process          |  M  |  M  |  M  |  M  |  M  |  M   |\n|  \
    \     | identifier              |     |     |     |     |     |      |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 6.1.  | ICMP type and code (i)  |  S  |  S  |  -  |  S  |  S  |  S   |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 6.1.  | input/output interface  |  S  |  S  |  S  |  S  |  S  |  S   |\n|  \
    \     | (j)                     |     |     |     |     |     |      |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 6.1.  | Multicast               |  O  |  S  |  S  |  -  |  S  |  S   |\n|  \
    \     | replication factor      |     |     |     |     |     |      |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 6.1.  | TTL                     |  O  |  O  |  O  |  O  |  O  |  O   |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 6.1.  | IP header flags         |  -  |  O  |  O  |  O  |  O  |  O   |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 6.1.  | TCP header flags        |  -  |  O  |  O  |  O  |  -  |  O   |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 6.1.  | Dropped Packet          |  O  |  O  |  O  |  O  |  O  |  O   |\n|  \
    \     | Counter (h,k)           |     |     |     |     |     |      |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 6.1.  | Fragment counter        |  -  |  O  |  O  |  O  |  O  |  O   |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 6.1.  | next hop IP address     |  O  |  O  |  O  |  O  |  -  |  O   |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 6.1.  | src / dst / next hop    |  -  |  O  |  O  |  -  |  -  |  O   |\n|  \
    \     | BGP AS #                |     |     |     |     |     |      |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    |-------+-------------------------+-----+-----+-----+-----+-----+------|\n| Sect.\
    \ |    Requirement          |  A  |  B  |  C  |  D  |  E  | IPFIX|\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 6.2.  | DATA MODEL                                                   |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 6.2.  | Flexibility             |  M  |  S  |  M  |  M  |  M  |  M   |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 6.2.  | Extensibility           |  M  |  S  |  M  |  M  |  M  |  M   |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 6.3.  | DATA TRANSFER                                                |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 6.3.1.| Congestion aware        |  M  |  M  |  M  |  M  |  M  |  M   |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 6.3.2.| Reliability             |  M  |  S  |  S  |  S  |  S  |  M   |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 6.3.3.| Confidentiality         |  M  |  S  |  S  |  M  |  S  |  M   |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 6.3.4.| Integrity               |  M  |  M  |  M  |  M  |  M  |  M   |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 6.3.5.| Authenticity            |  M  |  M  |  M  |  M  |  M  |  M   |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 6.4.  | REPORTING TIMES                                              |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 6.4.  | Push mode               |  M  |  O  |  O  |  M  |  S  |  M   |\n|  \
    \     |                         |     | (l) | (l) |     |(l,m)|      |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 6.4.  | Pull mode               |  O  |  O  |  O  |  O  |  O  |  O   |\n|  \
    \     |                         |     | (l) | (l) |     | (l) |      |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 6.4.1.| Regular interval        |  S  |  S  |  S  |  S  |  S  |  S   |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 6.6.  | Notifications           |  O  |  O  |  O  |  O  |  O  |  O   |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 6.7.  | Anonymization (n)       |  O  |  O  |  O  |  O  |  O  |  O   |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 7.    | CONFIGURATION                                                |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 7.    | Secure remote           |  S  |  S  |  S  |  S  |  S  |  S   |\n|  \
    \     | configuration (a)       |     |     |     |     |     |      |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 7.1.  | Config observation point|  S  |  S  |  S  |  S  |  S  |  S   |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 7.1.  | Config flow             |  S  |  S  |  S  |  S  |  S  |  S   |\n|  \
    \     | specifications          |     |     |     |     |     |      |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 7.1.  | Config flow timeouts    |  S  |  S  |  S  |  S  |  O  |  S   |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    |-------+-------------------------+-----+-----+-----+-----+-----+------|\n| Sect.\
    \ |    Requirement          |  A  |  B  |  C  |  D  |  E  | IPFIX|\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 7.1.  | Config sampling         |  O  |  O  |  O  |  O  |  O  |  O   |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 7.1.  | Config overload         |  O  |  O  |  O  |  O  |  O  |  O   |\n|  \
    \     | behavior (a)            |     |     |     |     |     |      |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 7.2.  | Config report           |  S  |  S  |  S  |  S  |  S  |  S   |\n|  \
    \     | data format             |     |     |     |     |     |      |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 7.2.  | Config                  |  S  |  S  |  S  |  S  |  S  |  S   |\n|  \
    \     | notifications           |     |     |     |     |     |      |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 8.    | GENERAL REQUIREMENTS                                         |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 8.1.  | Openness                |  S  |  S  |  S  |  S  |  S  |  S   |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 8.2.  | Scalability:            |     |     |     |     |     |      |\n|  \
    \     | data collection         |  M  |  S  |  M  |  O  |  S  |  M   |\n|    \
    \   | from hundreds of        |     |     |     |     |     |      |\n|      \
    \ | measurement devices     |     |     |     |     |     |      |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    | 8.3.  | Several collectors      |  O  |  O  |  O  |  O  |  O  |  O   |\n|-------+-------------------------+-----+-----+-----+-----+-----+------|\n\
    \   Remarks:\n      (a) If feature is supported.\n      (b) The differentiation\
    \ of IPv4 and IPv6 is for TE of importance.\n          So we tended to make this\
    \ a must.  Nevertheless, a should\n          seems to be sufficient to perform\
    \ most TE tasks and allows us\n          to have a should for IPFIX instead of\
    \ a must.\n      (c) For TE in an MPLS network the label is essential.  Therefore\
    \ a\n          must is given here leading to a must in IPFIX.\n      (d) If sampling\
    \ is supported, the methods and parameters must be\n          well defined.\n\
    \      (e) If sampling is supported, sampling configuration changes must\n   \
    \       be indicated to all collecting processes.\n      (f) If overload behavior\
    \ is supported and it induces changes in\n          the metering process behavior,\
    \ the overload behavior must be\n          clearly defined.\n      (g) Precise\
    \ time-based accounting requires reaction to a flow\n          timeout.\n    \
    \  (h) If a packet is fragmented, each fragment is counted as an\n          individual\
    \ packet.\n      (i) If protocol type is ICMP.\n      (j) This requirement does\
    \ not apply if the observation point is\n          located at a probe device.\n\
    \      (k) Only if measurement is done on data path i.e., has access to\n    \
    \      forwarding decision.\n      (l) Either push or pull has to be supported.\n\
    \      (m) Required, in order to immediately report drop indications for\n   \
    \       SLA validation.\n      (n) Anonymization must be clearly indicated to\
    \ all receiving\n          collecting processes.\n13.  References\n13.1.  Normative\
    \ References\n   [RFC2960]   Stewart, R., Xie, Q., Morneault, K., Sharp, C.,\n\
    \               Schwarzbauer, H., Taylor, T., Rytina, I., Kalla, M.,\n       \
    \        Zhang, L., and V. Paxson, \"Stream Control Transmission\n           \
    \    Protocol\", RFC 2960, October 2000.\n   [RFC3031]   Rosen, E., Viswanathan,\
    \ A., and R. Callon, \"Multiprotocol\n               Label Switching Architecture\"\
    , RFC 3031, January 2001.\n   [RFC2474]   Nichols, K., Blake, S., Baker, F., and\
    \ D. Black,\n               \"Definition of the Differentiated Services Field\
    \ (DS\n               Field) in the IPv4 and IPv6 Headers\", RFC 2474, December\n\
    \               1998.\n   [RFC791]    Postel, J., \"Internet Protocol\", STD 5,\
    \ RFC 791,\n               September 1981.\n13.2.  Informative References\n  \
    \ [RFC3234]   Carpenter, B. and S. Brim, \"Middleboxes: Taxonomy and\n       \
    \        Issues\", RFC 3234, February 2002.\n   [RFC2119]   Bradner, S., \"Key\
    \ words for use in RFCs to Indicate\n               Requirement Levels\", BCP\
    \ 14, RFC 2119, March 1997.\n   [RFC3550]   Schulzrinne, H.,  Casner, S., Frederick,\
    \ R., and V.\n               Jacobson, \"RTP: A Transport Protocol for Real-Time\n\
    \               Applications\", STD 64, RFC 3550, July 2003.\n   [RFC2975]   Aboba,\
    \ B., Arkko, J., and D. Harrington, \"Introduction to\n               Accounting\
    \ Management\", RFC 2975, October 2000.\n   [RFC2702]   Awduche, D., Malcolm,\
    \ J., Agogbua, J., O'Dell, M., and J.\n               McManus, \"Requirements\
    \ for Traffic Engineering Over\n               MPLS\", RFC 2702, September 1999.\n\
    \   [RFC1771]   Rekhter, Y. and T. Li, \"A Border Gateway Protocol 4\n       \
    \        (BGP-4)\", RFC 1771, March 1995.\n   [RFC3418]   Presuhn, R., \"Management\
    \ Information Base (MIB) for the\n               Simple Network Management Protocol\
    \ (SNMP)\", STD 62, RFC\n               3418, December 2002.\n   [RFC2720]   Brownlee,\
    \ N., \"Traffic Flow Measurement: Meter MIB\", RFC\n               2720, October\
    \ 1999.\n14.  Authors' Addresses\n   Juergen Quittek\n   NEC Europe Ltd., Network\
    \ Laboratories\n   Kurfuersten-Anlage 36\n   69115 Heidelberg\n   Germany\n  \
    \ Phone: +49 6221 90511 15\n   EMail: quittek@netlab.nec.de\n   Tanja Zseby\n\
    \   Fraunhofer Institute for Open Communication Systems (FOKUS)\n   Kaiserin-Augusta-Allee\
    \ 31\n   10589 Berlin\n   Germany\n   Phone: +49 30 3463 7153\n   EMail: zseby@fokus.fhg.de\n\
    \   Benoit Claise\n   Cisco Systems\n   De Kleetlaan 6a b1\n   1831 Diegem\n \
    \  Belgium\n   Phone: +32 2 704 5622\n   EMail: bclaise@cisco.com\n   Sebastian\
    \ Zander\n   Centre for Advanced Internet Architectures, Mail H31\n   Swinburne\
    \ University of Technology\n   PO Box 218\n   John Street, Hawthorn\n   Victoria\
    \ 3122, Australia\n   Phone: +61 3 9214 8089\n   EMail: szander@swin.edu.au\n\
    15.  Full Copyright Statement\n   Copyright (C) The Internet Society (2004).\n\
    \   This document is subject to the rights, licenses and restrictions\n   contained\
    \ in BCP 78, and except as set forth therein, the authors\n   retain all their\
    \ rights.\n   This document and the information contained herein are provided\
    \ on an\n   \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n\
    \   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\nIntellectual Property\n   The IETF takes no position\
    \ regarding the validity or scope of any\n   Intellectual Property Rights or other\
    \ rights that might be claimed to\n   pertain to the implementation or use of\
    \ the technology described in\n   this document or the extent to which any license\
    \ under such rights\n   might or might not be available; nor does it represent\
    \ that it has\n   made any independent effort to identify any such rights.  Information\n\
    \   on the IETF's procedures with respect to rights in IETF Documents can\n  \
    \ be found in BCP 78 and BCP 79.\n   Copies of IPR disclosures made to the IETF\
    \ Secretariat and any\n   assurances of licenses to be made available, or the\
    \ result of an\n   attempt made to obtain a general license or permission for\
    \ the use of\n   such proprietary rights by implementers or users of this\n  \
    \ specification can be obtained from the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n\
    \   The IETF invites any interested party to bring to its attention any\n   copyrights,\
    \ patents or patent applications, or other proprietary\n   rights that may cover\
    \ technology that may be required to implement\n   this standard.  Please address\
    \ the information to the IETF at ietf-\n   ipr@ietf.org.\nAcknowledgement\n  \
    \ Funding for the RFC Editor function is currently provided by the\n   Internet\
    \ Society.\n"
