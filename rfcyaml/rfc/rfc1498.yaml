- title: __initial_text__
  contents:
  - '           On the Naming and Binding of Network Destinations

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard.  Distribution of this memo is\n\
    \   unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This brief paper offers a perspective on the subject of names of\n\
    \   destinations in data communication networks. It suggests two ideas:\n   First,\
    \ it is helpful to distinguish among four different kinds of\n   objects that\
    \ may be named as the destination of a packet in a\n   network.  Second, the operating\
    \ system concept of binding is a useful\n   way to describe the relations among\
    \ the four kinds of objects. To\n   illustrate the usefulness of this approach,\
    \ the paper interprets some\n   more subtle and confusing properties of two real-world\
    \ network\n   systems for naming destinations.\n"
- title: Note
  contents:
  - "Note\n   This document was originally published in: \"Local Computer Networks\"\
    ,\n   edited by P. Ravasio et al., North-Holland Publishing Company,\n   Amsterdam,\
    \ 1982, pp. 311-317.  Copyright IFIP, 1982.  Permission is\n   granted by IFIP\
    \ for reproduction for non-commercial purposes.\n   Permission to copy without\
    \ fee this document is granted provided that\n   the copies are not made or distributed\
    \ for commercial advantage, the\n   IFIP copyright notice and the title of the\
    \ publication and its date\n   appear, and notice is given that copying is by\
    \ permission of IFIP. To\n   copy otherwise, or to republish, requires a specific\
    \ permission.\n   This research was supported in part by the Defense Advanced\
    \ Research\n   Projects Agency of the United States Government and monitored by\
    \ the\n   Office of Naval Research under contract number N00014-75-C-0661.\n"
- title: What is the Problem?
  contents:
  - "What is the Problem?\n   Despite a very helpful effort of John Shoch [1] to impose\
    \ some\n   organization on the discussion of names, addresses, and routes to\n\
    \   destinations in computer networks, these discussions continue to be\n   more\
    \ confusing than one would expect. This confusion stems sometimes\n   from making\
    \ too tight an association between various types of network\n   objects and the\
    \ most common form for their names.  It also stems from\n   trying to discuss\
    \ the issues with too few well-defined concepts at\n   hand.  This paper tries\
    \ a different approach to develop insight, by\n   applying a perspective that\
    \ has proven helpful in the corresponding\n   area of computer operating systems.\n\
    \   Operating systems have a similar potential for confusion concerning\n   names\
    \ and addresses, since there are file names, unique identifiers,\n   virtual and\
    \ real memory addresses, page numbers, block numbers, I/O\n   channel addresses,\
    \ disk track addresses, a seemingly endless list.\n   But most of that potential\
    \ has long been rendered harmless by\n   recognizing that the concept of binding\
    \ provides a systematic way to\n   think about naming [2]. (Shoch pointed out\
    \ this opportunity to\n   exploit the operating system concept; in this paper\
    \ we make it the\n   central theme.) In operating systems, it was apparent very\
    \ early that\n   there were too many different kinds of identifiers and therefore\
    \ one\n   does not get much insight by trying to make a distinction just\n   between\
    \ names and addresses.  It is more profitable instead to look\n   upon all identifiers\
    \ as examples of a single phenomenon, and ask\n   instead \"where is the context\
    \ in which a binding for this name (or\n   address, or indentifier, or whatever)\
    \ will be found?\", and \"to what\n   object, identified by what kind of name,\
    \ is it therein bound?\"  This\n   same approach is equally workable in data communications\
    \ networks.\n   To start with, let us review Shoch's suggested terminology in\
    \ its\n   broadest form:\n        -  a name identifies what you want,\n      \
    \  -  an address identifies where it is, and\n        -  an route identifies a\
    \ way to get there.\n   There will be no need to tamper with these definitions,\
    \ but it will\n   be seen that they will leave a lot of room for interpretation.\n\
    \   Shoch's suggestion implies that there are three abstract concepts\n   that\
    \ together provide an intellectual cover for discussion. In this\n   paper, we\
    \ propose that a more mechanical view may lead to an easier-\n   to-think-with\
    \ set of concepts. This more mechanical view starts by\n   listing the kinds of\
    \ things one finds in a communication network.\n"
- title: Types of Network Destinations, and Bindings Among Them
  contents:
  - "Types of Network Destinations, and Bindings Among Them\n   In a data communication\
    \ network, when thinking about how to describe\n   the destination of a packet,\
    \ there are several types of things for\n   which there are more than one instance,\
    \ so one attaches names to them\n   to distinguish one instance from another.\
    \ Of these several types,\n   four turn up quite often:\n    1. Service and Users.\
    \ These are the functions that one uses, and\n       the clients that use them.\
    \ Examples of services are one that\n       tells the time of day, one that performs\
    \ accounting, or one\n       that forwards packets. An example of a client is\
    \ a particular\n       desktop computer.\n    2. Nodes. These are computers that\
    \ can run services or user\n       programs. Some nodes are clients of the network,\
    \ while others\n       help implement the network by running forwarding services.\n\
    \       (We will not need to distinguish between these two kinds of\n       nodes.)\n\
    \    3. Network attachment points. These are the ports of a network, the\n   \
    \    places where a node is attached. In many discussions about data\n       communication\
    \ networks, the term \"address\" is an identifier of a\n       network attachment\
    \ point.\n    4. Paths. These run between network attachment points, traversing\n\
    \       forwarding nodes and communication links.\n   We might note that our first\
    \ step, the listing and characterization\n   of the objects of discussion, is\
    \ borrowed from the world of abstract\n   data types. Our second step is to make\
    \ two observations about the\n   naming of network objects, the first about form\
    \ and the second about\n   bindings.\n   First, one is free to choose any form\
    \ of name that seems helpful --\n   binary identifiers, printable character strings,\
    \ or whatever, and\n   they may be chosen from either a flat or hierarchical name\
    \ space.\n   There may be more than one form of name for a single type of object.\n\
    \   A node might, for example, have both a hierarchical character string\n   name\
    \ and a unique binary identifier.  There are two semantic traps\n   that one can\
    \ fall into related to name form.  First, the word \"name\"\n   is, in the network\
    \ world, usually associated with a printable\n   character string, while the word\
    \ \"address\" is usually associated with\n   machine-interpretable binary strings.\
    \ In the world of systems and\n   languages, the term \"print name\" is commonly\
    \ used for the first and\n   \"machine name\" or \"address\" for the second, while\
    \ \"name\" broadly\n   encompasses both forms. (In this paper we are using the\
    \ broad meaning\n   of \"name\".)  The second semantic trap is to associate some\n\
    \   conventional form of name for a particular type of object as a\n   property\
    \ of that type. For example, services might be named by\n   character strings,\
    \ nodes by unique ID's, and network attachment\n   points named by hierarchical\
    \ addresses.  When one participant in a\n   discussion assumes a particular name\
    \ form is invariably associated\n   with a particular type of object and another\
    \ doesn't, the resulting\n   conversation can be very puzzling to all participants.\n\
    \   The second observation about the four types of network objects listed\n  \
    \ above is that most of the naming requirements in a network can simply\n   and\
    \ concisely be described in terms of bindings and changes of\n   bindings among\
    \ the four types of objects. To wit:\n    1. A given service may run at one or\
    \ more nodes, and may need to move\n       from one node to another without losing\
    \ its identity as a service.\n    2. A given node may be connected to one or more\
    \ network attachment\n       points, and may need to move from one attachment\
    \ point to another\n       without losing its identity as a node.\n    3. A given\
    \ pair of attachment points may be connected by one or more\n       paths, and\
    \ those paths may need to change with time without\n       affecting the identity\
    \ of the attachment points.\n   (This summary of network naming requirements is\
    \ intentionally brief.\n   An excellent in-depth review of these requirements\
    \ can be found in a\n   recent paper by Sunshine [3].)\n   Each of these three\
    \ requirements includes the idea of preserving\n   identity, whether of service,\
    \ node or attachment point. To preserve\n   an identity, one must arrange that\
    \ the name used for identification\n   not change during moves of the kind required.\
    \ If the associations\n   among services, nodes, attachment points and routes\
    \ are maintained as\n   lists of bindings this goal can easily be met. Whether\
    \ or not all the\n   flexibility implied by these possibilities should be provided\
    \ in a\n   particular network design is a matter of engineering judgment. A\n\
    \   judgment that a particular binding can be made at network design time\n  \
    \ and will never need to be changed (e.g., a particular service might\n   always\
    \ run at a particular node) should not be allowed to confuse the\n   question\
    \ of what names and bindings are in principle present. In\n   principle, to send\
    \ a data packet to a service one must discover three\n   bindings:\n    1. find\
    \ a node on which the required service operates,\n    2. find a network attachment\
    \ point to which that node is connected,\n    3. find a path from this attachment\
    \ point to that attachment point.\n   There are, in turn, three conceptually distinct\
    \ binding services that\n   the network needs to provide:\n    1. Service name\
    \ resolution, to identify the nodes that run the\n       service.\n    2. Node\
    \ name location, to identify attachment points that reach the\n       nodes found\
    \ in 1.\n    3. Route service, to identify the paths that lead from the\n    \
    \   requestor's attachment point to the ones found in 2.\n   At each level of\
    \ binding, there can be several alternatives, so a\n   choice of which node, which\
    \ attachment point, and which path must be\n   made. These choices are distinct,\
    \ but can interact. For example, one\n   might chose the node only after first\
    \ looking over the various paths\n   leading to the possible choices. In this\
    \ case, the network tables may\n   only produce a partial binding, which means\
    \ that an enquiry produces\n   a list of answers rather than a single one. The\
    \ final binding choice\n   may be delayed until the last moment and recorded outside\
    \ the three\n   binding services provided within the network.\n   There is a very\
    \ important subtlety about bindings that often leads\n   designers astray. Suppose\
    \ we have recorded in a network table the\n   fact that the \"Lockheed DIALOG\
    \ Service\" is running on node \"5\". There\n   are actually three different bindings\
    \ involved here but only one of\n   these three is recorded in this table and\
    \ changeable by simply\n   adjusting the table.\n    1. The name \"Lockheed DIALOG\
    \ Service\" is properly associate with a\n       specific service, management,\
    \ and collection of stored files. One\n       does not usually reassign such a\
    \ name to a different service. The\n       association of the name with the service\
    \ is quite permanent, and\n       because of that permanence is not usually expressed\
    \ in a single,\n       easily changed table.\n    2. Similarly, the name \"5\"\
    \ is assigned to a particular node on a\n       fairly long-term basis, without\
    \ the expectation that it will\n       change. So that assignment is also not\
    \ typically expressed in a\n       single, easily changed table.\n    3. The fact\
    \ that \"DIALOG\" is now operating on node \"5\"is the one\n       binding that\
    \ our table does express, because we anticipate that\n       this association\
    \ might reasonably change. The function of our\n       table is to allow us to\
    \ express changes such as \"DIALOG\" is now\n       operating at node \"6\" or\
    \ the \"Pipe-fitting Service\" is now\n       operating at node \"5\".\n   The\
    \ design mistake is to believe that this table allows one to give\n   the Lockheed\
    \ DIALOG service a new name, merely by changing this table\n   entry. That is\
    \ not the function of this table of bindings, and such a\n   name change is actually\
    \ quite difficult to accomplish, since the\n   association in question is not\
    \ usually expressed as a binding in a\n   single table. One would have to change\
    \ not only this table, but also\n   user programs, documentation, scribbled notes\
    \ and advertising copy to\n   accomplish such a name change.\n"
- title: Some Real-World Examples
  contents:
  - "Some Real-World Examples\n   Although the ideas outlined so far seem fairly straightforward,\
    \ it is\n   surprisingly easy to find real-world examples that pose a challenge\n\
    \   in interpretation. In the Xerox/DEC/Intel Ethernet [5, 6], for\n   example,\
    \ the concept of a network attachment point is elusive,\n   because it collapses\
    \ into the node name. A node can physical attach\n   to an Ethernet anywhere along\
    \ it; the node brings with it a 48-bit\n   unique identifier that its interfaces\
    \ watches for in packets passing\n   by. This identifier should probably be thought\
    \ of as the name of a\n   network attachment point, even though the physical point\
    \ of\n   attachment can be anywhere. At the same time, one can adopt a policy\n\
    \   that the node will supply from its own memory the 48-bit identifier\n   that\
    \ is to be used by the Ethernet interface, so a second, equally\n   reasonable,\
    \ view (likely to be taken elsewhere in the network in\n   interpreting the meaning\
    \ of these identifiers) is that this 48-bit\n   identifier is the name of the\
    \ node itself.  From a binding\n   perspective this way of using the Ethernet\
    \ binds the node name and\n   the network attachment point name to be the same\
    \ 48-bit unique\n   identifier.\n   This permanent binding of node name to attachment\
    \ point name has\n   several network management advantages:\n     - a node can\
    \ be moved from one physical location to another\n       without changing any\
    \ network records.\n     - one level of binding tables is omitted. This advantage\
    \ is\n       particularly noticeable in implementing internetwork routing.\n \
    \    - a node that is attached to two Ethernets can present the same\n       attachment\
    \ point name to both networks, which simplifies\n       communication among internet\
    \ routers and alternate path\n       finding.\n   But permanent binding also produces\
    \ a curiosity if is happens that\n   one wants one node to connect to two attachment\
    \ points on the same\n   Ethernet. The curiosity arises because the only way to\
    \ make the\n   second attachment point independently addressable by others is\
    \ to\n   allow the node to use two different 48-bit identifiers, which means\n\
    \   that some other network records (the ones that interpret the ID to be\n  \
    \ a node name) will likely be fooled into believing that there are not\n   one,\
    \ but two nodes. To avoid this confusion, the same 48-bit\n   identifier could\
    \ be used in both attachment points, but then there\n   will be no way intentionally\
    \ to direct a message to one rather than\n   the other. One way or another, the\
    \ permanent binding of attachment\n   point name to node name has made some function\
    \ harder to accomplish,\n   though the overall effect of the advantages probably\
    \ outweighs the\n   lost function in this case.\n   For another example, the ARPANET\
    \ NCP protocol provides character\n   string names that appear, from their mnemonics,\
    \ to be node names or\n   service names, but in fact they are the names of network\
    \ attachment\n   points [6]. Thus the character string name RADC-Multics is the\
    \ name\n   of the network attachment point at ARPANET IMP 18, port 0, so\n   reattaching\
    \ the node (a Honeywell 68/80 computer) to another network\n   attachment point\
    \ requires either that the users learn a new name for\n   the service or else\
    \ a change of tables in all other nodes.  Changing\n   tables superficially appears\
    \ to be what rebinding is all about, but\n   the need to change more than one\
    \ table is the tip-off that something\n   deeper is going on. What is actually\
    \ happening is the change of the\n   permanent name of the network attachment\
    \ point. We can see this more\n   clearly by noting that a parallel attachment\
    \ of that Honeywell 68/80\n   to a second ARPANET port would be achievable only\
    \ by assigning a\n   second character string identity; this requirement emphasizes\
    \ that\n   the name is really of the attachment point, not the node.\n   Unfortunately,\
    \ because of their mnemonic value, the ARPANET NCP name\n   mnemonics are often\
    \ thought of as service names. Thus one expects\n   that that the Rome Air Development\
    \ Center Multics service is operated\n   on the node reached by the name RADC-Multics.\
    \  This particular\n   assumption doesn't produce any surprises. But any one of\
    \ the four\n   Digital PDP-10 computers at Bolt, Beranek and Newman can accept\
    \ mail\n   for any of the others, as can the groups of PDP-10's at the USC\n \
    \  Information Sciences Institute, and at the Massachusetts Institute of\n   Technology.\
    \ If the node to which ones tries to send mail is down, the\n   customer must\
    \ realize that the same service is available by asking\n   for a different node,\
    \ using what appears to be a different service\n   name. The need for a customer\
    \ to realize that he must give a\n   different name to get the same service comes\
    \ about because in the\n   ARPANET the name is not of a service that is bound\
    \ to a node that is\n   bound to an attachment point, but rather it is directly\
    \ the name of\n   an attachment point.\n   Finally, confusion can arise because\
    \ the three conceptually distinct\n   binding services (service name resolution,\
    \ node name location, and\n   route dispensing) may not be mechanically distinct.\
    \ There is usually\n   suggested only one identifiable service, a \"name server\"\
    . The name\n   server starts with a service name and returns a list of network\n\
    \   attachment points that can provide that service. It thereby performs\n   both\
    \ the first and second conceptual binding services, though it may\n   leave to\
    \ the customer the final choice of which attachment point to\n   use. Path choice\
    \ may be accomplished by a distributed routing\n   algorithm that provides the\
    \ final binding service without anyone\n   noticing it.\n"
- title: Correspondence with Names, Addresses, and Routes
  contents:
  - "Correspondence with Names, Addresses, and Routes\n   With this model of binding\
    \ among services, nodes, network attachment\n   points, and paths in mind, one\
    \ possible interpretation of Shoch's\n   names, addresses and routes is as follows:\n\
    \   1.  Any of the four kinds of objects (service, node, network\n       attachment\
    \ point, and path) may have a name, though Shoch would\n       restrict that term\
    \ to human-readable character strings.\n   2.  The address of an object is a name\
    \ (in the broad sense, not\n       Shoch's restricted sense) of the object it\
    \ is bound to. Thus, an\n       address of a service is the name of some node\
    \ that runs it. An\n       address of a node is the name of some network attachment\
    \ point to\n       which it connects. An address of a network attachment point\
    \ (a\n       concept not usually discussed) can be taken to be the name of a\n\
    \       path that leads to it. This interpretation captures Shoch's\n       meaning\
    \ \"An address indicates where it is,\" but does not very\n       well match Shoch's\
    \ other notion that an address is a\n       machine-processable, rather than a\
    \ human-processable form of\n       identification. This is probably the primary\
    \ point where our\n       perspectives differ on which definitions provide the\
    \ most clarity.\n   3.  A route is a more sophisticated concept. A route to either\
    \ a\n       network attachment point or a node is just a path, as we have\n  \
    \     been using the term. Because a single node can run several\n       services\
    \ at once, a route to a service consists of a path to the\n       network attachment\
    \ point of a node that runs the service, plus\n       some identification of which\
    \ activity within that node runs the\n       service (e.g., a \"socket identifier\"\
    \ in the PUP internet [4] or\n       the ARPA Internet [7] protocols). But note\
    \ that a route may\n       actually consist of a series of names, typically a\
    \ list of\n       forwarding name nodes or attachment points and the names used\
    \ by\n       the forwarding nodes for the paths between them.\n   Whether or not\
    \ one likes this particular interpretation of Shoch's\n   terms, it seems clear\
    \ that there are more than three concepts\n   involved, so more than three labels\
    \ are needed to discuss them.\n"
- title: Summary
  contents:
  - "Summary\n   This paper has argued that some insight into the naming of\n   destinations\
    \ in a network can be obtained by recognizing four kinds\n   of named objects\
    \ at or leading to every destination (services, nodes,\n   attachment points,\
    \ and routes) and then identifying three successive,\n   changeable, bindings\
    \ (service to node, node to attachment point, and\n   attachment point to route).\
    \ This perspective, modeled on analogous\n   successive bindings of storage management\
    \ systems (file--storage\n   region--physical location) and virtual memories (object--segment--\n\
    \   page--memory block) provides a systematic explanation for some design\n  \
    \ problems that are encountered in network naming systems.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Discussions with David D. Clark, J. Noel Chiappa, David\
    \ P. Reed, and\n   Danny Cohen helped clarify the reasoning used here. John F.\
    \ Shoch\n   provided both inspiration and detailed comments, but should not be\n\
    \   held responsible for the result.\n"
- title: References
  contents:
  - "References\n   1.  Shoch, John F., \"Inter-Network Naming, Addressing, and Routing,\"\
    \n       IEEE Proc. COMPCON Fall 1978, pp. 72-79. Also in Thurber, K.\n      \
    \ (ed.), Tutorial: Distributed Processor Communication\n       Architecture, IEEE\
    \ Publ. #EHO 152-9, 1979, pp. 280-287.\n   2.  Saltzer, J. H., \"Naming and Binding\
    \ of Objects\", in: Operating\n       Systems, Lecture notes in Computer Science,\
    \ Vol. 60, Edited by R.\n       Bayer, New York; Springer-Verlag, 1978.\n   3.\
    \  Sunshine, Carl A., \"Addressing Problems in Multi-Network\n       Systems\"\
    , to appear in Proc. IEEE INFOCOM 82, Las Vegas, Nevada,\n       March 30 - April\
    \ 1, 1982.\n   4.  Boggs, D. R., Shoch, J. F., Taft, E. A., and Metcalfe, R. M.,\n\
    \       \"PUP: An Internetwork Architecture\", IEEE Trans. on Comm. 28, 4\n  \
    \     (April, 1980) pp.  612-623.\n   5.  (Anonymous), \"The Ethernet, A Local\
    \ Area Network: Data Link Layer\n       and Physical Layer Specifications, Version\
    \ 1.0\", published by\n       Xerox Corp., Palo Alto, Calif., Intel Corp., Sunnyvale,\
    \ Calif.,\n       and Digital Equipment Corp., Tewksbury, Mass., September 30,\n\
    \       1980.\n   6.  Dalal, Y. K., and Printis, R. S., \"48-bit Absolute Internet\
    \ and\n       Ethernet Host Numbers\", Proc. Seventh Data Communications\n   \
    \    Symposium, Mexico City, Mexico, October 1981, pp. 240-245.\n   7.  Feinler,\
    \ E., and J. Postel, Editors, \"ARPANET Protocol Handbook\",\n       SRI International,\
    \ Menlo Park, Calif., January, 1978.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Jerome H. Saltzer\n   M.I.T. Laboratory for Computer Science\n\
    \   545 Technology Square\n   Cambridge, MA 02139\n   U.S.A.\n   Phone: (617)\
    \ 253-6016\n   EMail: Saltzer@MIT.EDU\n"
