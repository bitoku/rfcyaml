- contents:
  - " Use of the HSS/LMS Hash-Based Signature Algorithm in the Cryptographic\n                          Message
    Syntax (CMS)\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This document specifies the conventions for using the Hierarchical\n
    \  Signature System (HSS) / Leighton-Micali Signature (LMS) hash-based\n   signature
    algorithm with the Cryptographic Message Syntax (CMS).  In\n   addition, the algorithm
    identifier and public key syntax are\n   provided.  The HSS/LMS algorithm is one
    form of hash-based digital\n   signature; it is described in RFC 8554.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8708.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction\n     1.1.  ASN.1\n     1.2.  Terminology\n
    \    1.3.  Motivation\n   2.  HSS/LMS Hash-Based Signature Algorithm Overview\n
    \    2.1.  Hierarchical Signature System (HSS)\n     2.2.  Leighton-Micali Signature
    (LMS)\n     2.3.  Leighton-Micali One-Time Signature (LM-OTS) Algorithm\n   3.
    \ Algorithm Identifiers and Parameters\n   4.  HSS/LMS Public Key Identifier\n
    \  5.  Signed-Data Conventions\n   6.  Security Considerations\n   7.  IANA Considerations\n
    \  8.  References\n     8.1.  Normative References\n     8.2.  Informative References\n
    \  Appendix A.  ASN.1 Module\n   Acknowledgements\n   Author's Address\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document specifies the conventions for using the Hierarchical\n
    \  Signature System (HSS) / Leighton-Micali Signature (LMS) hash-based\n   signature
    algorithm with the Cryptographic Message Syntax (CMS) [CMS]\n   signed-data content
    type.  The LMS system provides a one-time digital\n   signature that is a variant
    of Merkle Tree Signatures (MTS).  The HSS\n   is built on top of the LMS system
    to efficiently scale for a larger\n   numbers of signatures.  The HSS/LMS algorithm
    is one form of hash-\n   based digital signature, and it is described in [HASHSIG].
    \ The HSS/\n   LMS signature algorithm can only be used for a fixed number of\n
    \  signing operations with a given private key, and the number of\n   signing
    operations depends upon the size of the tree.  The HSS/LMS\n   signature algorithm
    uses small public keys, and it has low\n   computational cost; however, the signatures
    are quite large.  The\n   HSS/LMS private key can be very small when the signer
    is willing to\n   perform additional computation at signing time; alternatively,
    the\n   private key can consume additional memory and provide a faster\n   signing
    time.  The HSS/LMS signatures [HASHSIG] are currently defined\n   to exclusively
    use SHA-256 [SHS].\n"
  - contents:
    - "1.1.  ASN.1\n   CMS values are generated using ASN.1 [ASN1-B], using the Basic\n
      \  Encoding Rules (BER) and the Distinguished Encoding Rules (DER)\n   [ASN1-E].\n"
    title: 1.1.  ASN.1
  - contents:
    - "1.2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
      \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\",
      \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described
      in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all\n
      \  capitals, as shown here.\n"
    title: 1.2.  Terminology
  - contents:
    - "1.3.  Motivation\n   Recent advances in cryptanalysis [BH2013] and progress
      in the\n   development of quantum computers [NAS2019] pose a threat to widely\n
      \  deployed digital signature algorithms.  As a result, there is a need\n   to
      prepare for a day when cryptosystems such as RSA and DSA that\n   depend on
      discrete logarithms and factoring cannot be depended upon.\n   If large-scale
      quantum computers are ever built, these computers will\n   be able to break
      many of the public key cryptosystems currently in\n   use.  A post-quantum cryptosystem
      [PQC] is a system that is secure\n   against quantum computers that have more
      than a trivial number of\n   quantum bits (qubits).  It is open to conjecture
      when it will be\n   feasible to build such computers; however, RSA, DSA, Elliptic
      Curve\n   Digital Signature Algorithm (ECDSA), and Edwards-curve Digital\n   Signature
      Algorithm (EdDSA) are all vulnerable if large-scale quantum\n   computers are
      ever developed.\n   Since the HSS/LMS signature algorithm does not depend on
      the\n   difficulty of discrete logarithms or factoring, the HSS/LMS signature\n
      \  algorithm is considered to be post-quantum secure.  One use of post-\n   quantum-secure
      signatures is the protection of software updates,\n   perhaps using the format
      described in [FWPROT], to enable deployment\n   of software that implements
      new cryptosystems.\n"
    title: 1.3.  Motivation
  title: 1.  Introduction
- contents:
  - "2.  HSS/LMS Hash-Based Signature Algorithm Overview\n   Merkle Tree Signatures
    (MTS) are a method for signing a large but\n   fixed number of messages.  An MTS
    system depends on a one-time\n   signature method and a collision-resistant hash
    function.\n   This specification makes use of the hash-based algorithm specified
    in\n   [HASHSIG], which is the Leighton and Micali adaptation [LM] of the\n   original
    Lamport-Diffie-Winternitz-Merkle one-time signature system\n   [M1979] [M1987]
    [M1989a] [M1989b].\n   As implied by the name, the hash-based signature algorithm
    depends on\n   a collision-resistant hash function.  The hash-based signature\n
    \  algorithm specified in [HASHSIG] uses only the SHA-256 one-way hash\n   function
    [SHS], but it establishes an IANA registry [IANA-LMS] to\n   permit the registration
    of additional one-way hash functions in the\n   future.\n"
  - contents:
    - "2.1.  Hierarchical Signature System (HSS)\n   The MTS system specified in [HASHSIG]
      uses a hierarchy of trees.  The\n   N-time Hierarchical Signature System (HSS)
      allows subordinate trees\n   to be generated when needed by the signer.  Otherwise,
      generation of\n   the entire tree might take weeks or longer.\n   An HSS signature
      as specified in [HASHSIG] carries the number of\n   signed public keys (Nspk),
      followed by that number of signed public\n   keys, followed by the LMS signature
      as described in Section 2.2.  The\n   public key for the topmost LMS tree is
      the public key of the HSS\n   system.  The LMS private key in the parent tree
      signs the LMS public\n   key in the child tree, and the LMS private key in the
      bottom-most\n   tree signs the actual message.  The signature over the public
      key and\n   the signature over the actual message are LMS signatures as described\n
      \  in Section 2.2.\n   The elements of the HSS signature value for a standalone
      tree (a top\n   tree with no children) can be summarized as:\n      u32str(0)
      ||\n      lms_signature  /* signature of message */\n   where, u32str() and
      || are used as defined in [HASHSIG].\n   The elements of the HSS signature value
      for a tree with Nspk signed\n   public keys can be summarized as:\n      u32str(Nspk)
      ||\n      signed_public_key[0] ||\n      signed_public_key[1] ||\n         ...\n
      \     signed_public_key[Nspk-2] ||\n      signed_public_key[Nspk-1] ||\n      lms_signature
      \ /* signature of message */\n   where, as defined in Section 3.3 of [HASHSIG],
      the signed_public_key\n   structure contains the lms_signature over the public
      key, followed by\n   the public key itself.  Note that Nspk is the number of
      levels in the\n   hierarchy of trees minus 1.\n"
    title: 2.1.  Hierarchical Signature System (HSS)
  - contents:
    - "2.2.  Leighton-Micali Signature (LMS)\n   Each tree in the system specified
      in [HASHSIG] uses the Leighton-\n   Micali Signature (LMS) system.  LMS systems
      have two parameters.  The\n   first parameter is the height of the tree, h,
      which is the number of\n   levels in the tree minus one.  The [HASHSIG] specification
      supports\n   five values for this parameter: h=5, h=10, h=15, h=20, and h=25.\n
      \  Note that there are 2^h leaves in the tree.  The second parameter, m,\n   is
      the number of bytes output by the hash function, and it is the\n   amount of
      data associated with each node in the tree.  The [HASHSIG]\n   specification
      supports only the SHA-256 hash function [SHS], with\n   m=32.  As a result,
      the [HASHSIG] specification supports five tree\n   sizes; they are identified
      as:\n   *  LMS_SHA256_M32_H5\n   *  LMS_SHA256_M32_H10\n   *  LMS_SHA256_M32_H15\n
      \  *  LMS_SHA256_M32_H20\n   *  LMS_SHA256_M32_H25\n   The [HASHSIG] specification
      establishes an IANA registry [IANA-LMS]\n   to permit the registration of additional
      hash functions and\n   additional tree sizes in the future.\n   As specified
      in [HASHSIG], the LMS public key consists of four\n   elements: the lms_algorithm_type
      from the list above, the otstype to\n   identify the Leighton-Micali One-Time
      Signature (LM-OTS) type as\n   discussed in Section 2.3, the private key identifier
      (I) as described\n   in Section 5.3 of [HASHSIG], and the m-byte string associated
      with\n   the root node of the tree (T[1]).\n   The LMS public key can be summarized
      as:\n      u32str(lms_algorithm_type) || u32str(otstype) || I || T[1]\n   As
      specified in [HASHSIG], an LMS signature consists of four\n   elements: the
      number of the leaf (q) associated with the LM-OTS\n   signature value, an LM-OTS
      signature value as described in\n   Section 2.3, a typecode indicating the particular
      LMS algorithm, and\n   an array of values that is associated with the path through
      the tree\n   from the leaf associated with the LM-OTS signature value to the
      root.\n   The array of values contains the siblings of the nodes on the path\n
      \  from the leaf to the root but does not contain the nodes on the path\n   itself.
      \ The array for a tree with height h will have h values.  The\n   first value
      is the sibling of the leaf, the next value is the sibling\n   of the parent
      of the leaf, and so on up the path to the root.\n   The four elements of the
      LMS signature value can be summarized as:\n      u32str(q) ||\n      ots_signature
      ||\n      u32str(type) ||\n      path[0] || path[1] || ... || path[h-1]\n"
    title: 2.2.  Leighton-Micali Signature (LMS)
  - contents:
    - "2.3.  Leighton-Micali One-Time Signature (LM-OTS) Algorithm\n   Merkle Tree
      Signatures (MTS) depend on a one-time signature method,\n   and [HASHSIG] specifies
      the use of the LM-OTS, which has five\n   parameters:\n   n:   The length in
      bytes of the hash function output.  [HASHSIG]\n        supports only SHA-256
      [SHS], with n=32.\n   H:   A preimage-resistant hash function that accepts byte
      strings of\n        any length and returns an n-byte string.\n   w:   The width
      in bits of the Winternitz coefficients.  [HASHSIG]\n        supports four values
      for this parameter: w=1, w=2, w=4, and w=8.\n   p:   The number of n-byte string
      elements that make up the LM-OTS\n        signature value.\n   ls:  The number
      of bits that are left-shifted in the final step of\n        the checksum function,
      which is defined in Section 4.4 of\n        [HASHSIG].\n   The values of p and
      ls are dependent on the choices of the parameters\n   n and w, as described
      in Appendix B of [HASHSIG].\n   The [HASHSIG] specification supports four LM-OTS
      variants:\n   *  LMOTS_SHA256_N32_W1\n   *  LMOTS_SHA256_N32_W2\n   *  LMOTS_SHA256_N32_W4\n
      \  *  LMOTS_SHA256_N32_W8\n   The [HASHSIG] specification establishes an IANA
      registry [IANA-LMS]\n   to permit the registration of additional variants in
      the future.\n   Signing involves the generation of C, an n-byte random value.\n
      \  The LM-OTS signature value can be summarized as the identifier of the\n   LM-OTS
      variant, the random value, and a sequence of hash values (y[0]\n   through y[p-1])
      that correspond to the elements of the public key, as\n   described in Section
      4.5 of [HASHSIG]:\n      u32str(otstype) || C || y[0] || ... || y[p-1]\n"
    title: 2.3.  Leighton-Micali One-Time Signature (LM-OTS) Algorithm
  title: 2.  HSS/LMS Hash-Based Signature Algorithm Overview
- contents:
  - "3.  Algorithm Identifiers and Parameters\n   The algorithm identifier for an
    HSS/LMS hash-based signature is:\n      id-alg-hss-lms-hashsig OBJECT IDENTIFIER
    ::= { iso(1)\n          member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)\n
    \         smime(16) alg(3) 17 }\n   When this object identifier is used for an
    HSS/LMS signature, the\n   AlgorithmIdentifier parameters field MUST be absent
    (that is, the\n   parameters are not present, and the parameters are not set to
    NULL).\n   The signature value is a large OCTET STRING, as described in\n   Section
    2 of this document.  The signature format is designed for\n   easy parsing.  The
    HSS, LMS, and LM-OTS components of the signature\n   value each include a counter
    and a typecode that indirectly provide\n   all of the information that is needed
    to parse the value during\n   signature validation.\n   The signature value identifies
    the hash function used in the HSS/LMS\n   tree.  [HASHSIG] uses only the SHA-256
    hash function [SHS], but it\n   establishes an IANA registry [IANA-LMS] to permit
    the registration of\n   additional hash functions in the future.\n"
  title: 3.  Algorithm Identifiers and Parameters
- contents:
  - "4.  HSS/LMS Public Key Identifier\n   The AlgorithmIdentifier for an HSS/LMS
    public key uses the id-alg-\n   hss-lms-hashsig object identifier, and the parameters
    field MUST be\n   absent.\n   When this AlgorithmIdentifier appears in the SubjectPublicKeyInfo\n
    \  field of an X.509 certificate [RFC5280], the certificate key usage\n   extension
    MAY contain digitalSignature, nonRepudiation, keyCertSign,\n   and cRLSign; however,
    it MUST NOT contain other values.\n      pk-HSS-LMS-HashSig PUBLIC-KEY ::= {\n
    \         IDENTIFIER id-alg-hss-lms-hashsig\n          KEY HSS-LMS-HashSig-PublicKey\n
    \         PARAMS ARE absent\n          CERT-KEY-USAGE\n            { digitalSignature,
    nonRepudiation, keyCertSign, cRLSign } }\n      HSS-LMS-HashSig-PublicKey ::=
    OCTET STRING\n   Note that the id-alg-hss-lms-hashsig algorithm identifier is
    also\n   referred to as id-alg-mts-hashsig.  This synonym is based on the\n   terminology
    used in an early draft version of the document that\n   became [HASHSIG].\n   The
    public key value is an OCTET STRING.  Like the signature format,\n   it is designed
    for easy parsing.  The value is the number of levels\n   in the public key, L,
    followed by the LMS public key.\n   The HSS/LMS public key value can be described
    as:\n         u32str(L) || lms_public_key\n   Note that the public key for the
    topmost LMS tree is the public key\n   of the HSS system.  When L=1, the HSS system
    is a single tree.\n"
  title: 4.  HSS/LMS Public Key Identifier
- contents:
  - "5.  Signed-Data Conventions\n   As specified in [CMS], the digital signature
    is produced from the\n   message digest and the signer's private key.  The signature
    is\n   computed over different values depending on whether signed attributes\n
    \  are absent or present.\n   When signed attributes are absent, the HSS/LMS signature
    is computed\n   over the content.  When signed attributes are present, a hash
    is\n   computed over the content using the same hash function that is used\n   in
    the HSS/LMS tree, then a message-digest attribute is constructed\n   with the
    hash of the content, and then the HSS/LMS signature is\n   computed over the DER-encoded
    set of signed attributes (which MUST\n   include a content-type attribute and
    a message-digest attribute).  In\n   summary:\n      IF (signed attributes are
    absent)\n      THEN HSS_LMS_Sign(content)\n      ELSE message-digest attribute
    = Hash(content);\n           HSS_LMS_Sign(DER(SignedAttributes))\n   When using
    [HASHSIG], the fields in the SignerInfo are used as\n   follows:\n   *  digestAlgorithm
    MUST contain the one-way hash function used in the\n      HSS/LMS tree.  In [HASHSIG],
    SHA-256 is the only supported hash\n      function, but other hash functions might
    be registered in the\n      future.  For convenience, the AlgorithmIdentifier
    for SHA-256 from\n      [PKIXASN1] is repeated here:\n            mda-sha256 DIGEST-ALGORITHM
    ::= {\n                IDENTIFIER id-sha256\n                PARAMS TYPE NULL
    ARE preferredAbsent }\n            id-sha256 OBJECT IDENTIFIER ::= { joint-iso-itu-t(2)\n
    \               country(16) us(840) organization(1) gov(101) csor(3)\n                nistAlgorithms(4)
    hashalgs(2) 1 }\n   *  signatureAlgorithm MUST contain id-alg-hss-lms-hashsig,
    and the\n      algorithm parameters field MUST be absent.\n   *  signature contains
    the single HSS signature value resulting from\n      the signing operation as
    specified in [HASHSIG].\n"
  title: 5.  Signed-Data Conventions
- contents:
  - "6.  Security Considerations\n   Implementations MUST protect the private keys.
    \ Compromise of the\n   private keys may result in the ability to forge signatures.
    \ Along\n   with the private key, the implementation MUST keep track of which\n
    \  leaf nodes in the tree have been used.  Loss of integrity of this\n   tracking
    data can cause a one-time key to be used more than once.  As\n   a result, when
    a private key and the tracking data are stored on non-\n   volatile media or in
    a virtual machine environment, failed writes,\n   virtual machine snapshotting
    or cloning, and other operational\n   concerns must be considered to ensure confidentiality
    and integrity.\n   When generating an LMS key pair, an implementation MUST generate
    each\n   key pair independently of all other key pairs in the HSS tree.\n   An
    implementation MUST ensure that an LM-OTS private key is used to\n   generate
    a signature only one time and ensure that it cannot be used\n   for any other
    purpose.\n   The generation of private keys relies on random numbers.  The use
    of\n   inadequate pseudorandom number generators (PRNGs) to generate these\n   values
    can result in little or no security.  An attacker may find it\n   much easier
    to reproduce the PRNG environment that produced the keys,\n   searching the resulting
    small set of possibilities, rather than\n   brute-force searching the whole key
    space.  The generation of quality\n   random numbers is difficult, and [RFC4086]
    offers important guidance\n   in this area.\n   The generation of hash-based signatures
    also depends on random\n   numbers.  While the consequences of an inadequate pseudorandom
    number\n   generator (PRNG) to generate these values is much less severe than
    in\n   the generation of private keys, the guidance in [RFC4086] remains\n   important.\n
    \  When computing signatures, the same hash function SHOULD be used to\n   compute
    the message digest of the content and the signed attributes,\n   if they are present.\n"
  title: 6.  Security Considerations
- contents:
  - "7.  IANA Considerations\n   In the \"SMI Security for S/MIME Module Identifier\n
    \  (1.2.840.113549.1.9.16.0)\" registry, IANA has updated the reference\n   for
    value 64 to point to this document.\n   In the \"SMI Security for S/MIME Algorithms
    (1.2.840.113549.1.9.16.3)\"\n   registry, IANA has updated the description for
    value 17 to \"id-alg-\n   hss-lms-hashsig\" and updated the reference to point
    to this document.\n   IANA has also added the following note to the \"SMI Security
    for\n   S/MIME Algorithms (1.2.840.113549.1.9.16.3)\" registry:\n      Value 17,
    \"id-alg-hss-lms-hashsig\", is also referred to as \"id-\n      alg-mts-hashsig\".\n"
  title: 7.  IANA Considerations
- contents:
  - '8.  References

    '
  - contents:
    - "8.1.  Normative References\n   [ASN1-B]   ITU-T, \"Information technology --
      Abstract Syntax Notation\n              One (ASN.1): Specification of basic
      notation\",\n              ITU-T Recommendation X.680, August 2015.\n   [ASN1-E]
      \  ITU-T, \"Information technology -- ASN.1 encoding rules:\n              Specification
      of Basic Encoding Rules (BER), Canonical\n              Encoding Rules (CER)
      and Distinguished Encoding Rules\n              (DER)\", ITU-T Recommendation
      X.690, August 2015.\n   [CMS]      Housley, R., \"Cryptographic Message Syntax
      (CMS)\", STD 70,\n              RFC 5652, DOI 10.17487/RFC5652, September 2009,\n
      \             <https://www.rfc-editor.org/info/rfc5652>.\n   [HASHSIG]  McGrew,
      D., Curcio, M., and S. Fluhrer, \"Leighton-Micali\n              Hash-Based
      Signatures\", RFC 8554, DOI 10.17487/RFC8554,\n              April 2019, <https://www.rfc-editor.org/info/rfc8554>.\n
      \  [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n
      \             <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC5280]  Cooper,
      D., Santesson, S., Farrell, S., Boeyen, S.,\n              Housley, R., and
      W. Polk, \"Internet X.509 Public Key\n              Infrastructure Certificate
      and Certificate Revocation List\n              (CRL) Profile\", RFC 5280, DOI
      10.17487/RFC5280, May 2008,\n              <https://www.rfc-editor.org/info/rfc5280>.\n
      \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n   [SHS]      National Institute
      of Standards and Technology (NIST),\n              \"Secure Hash Standard (SHS)\",
      FIPS PUB 180-4,\n              DOI 10.6028/NIST.FIPS.180-4, August 2015,\n              <https://doi.org/10.6028/NIST.FIPS.180-4>.\n"
    title: 8.1.  Normative References
  - contents:
    - "8.2.  Informative References\n   [BH2013]   Ptacek, T., Ritter, T., Samuel,
      J., and A. Stamos, \"The\n              Factoring Dead: Preparing for the Cryptopocalypse\",
      August\n              2013, <https://media.blackhat.com/us-13/us-13-Stamos-The-\n
      \             Factoring-Dead.pdf>.\n   [CMSASN1]  Hoffman, P. and J. Schaad,
      \"New ASN.1 Modules for\n              Cryptographic Message Syntax (CMS) and
      S/MIME\", RFC 5911,\n              DOI 10.17487/RFC5911, June 2010,\n              <https://www.rfc-editor.org/info/rfc5911>.\n
      \  [CMSASN1U] Schaad, J. and S. Turner, \"Additional New ASN.1 Modules\n              for
      the Cryptographic Message Syntax (CMS) and the Public\n              Key Infrastructure
      Using X.509 (PKIX)\", RFC 6268,\n              DOI 10.17487/RFC6268, July 2011,\n
      \             <https://www.rfc-editor.org/info/rfc6268>.\n   [FWPROT]   Housley,
      R., \"Using Cryptographic Message Syntax (CMS) to\n              Protect Firmware
      Packages\", RFC 4108,\n              DOI 10.17487/RFC4108, August 2005,\n              <https://www.rfc-editor.org/info/rfc4108>.\n
      \  [IANA-LMS] IANA, \"Leighton-Micali Signatures (LMS)\",\n              <https://www.iana.org/assignments/leighton-micali-\n
      \             signatures/>.\n   [LM]       Leighton, T. and S. Micali, \"Large
      provably fast and\n              secure digital signature schemes based on secure
      hash\n              functions\", U.S. Patent 5,432,852, July 1995.\n   [M1979]
      \   Merkle, R., \"Secrecy, Authentication, and Public Key\n              Systems\",
      Technical Report No. 1979-1, Information Systems\n              Laboratory,
      Stanford University, 1979.\n   [M1987]    Merkle, R., \"A Digital Signature
      Based on a Conventional\n              Encryption Function\", Advances in Cryptology
      -- CRYPTO '87\n              Proceedings, Lecture Notes in Computer Science
      Vol. 293,\n              DOI 10.1007/3-540-48184-2_32, 1988,\n              <https://doi.org/10.1007/3-540-48184-2_32>.\n
      \  [M1989a]   Merkle, R., \"A Certified Digital Signature\", Advances in\n              Cryptology
      -- CRYPTO '89 Proceedings, Lecture Notes in\n              Computer Science
      Vol. 435, DOI 10.1007/0-387-34805-0_21,\n              1990, <https://doi.org/10.1007/0-387-34805-0_21>.\n
      \  [M1989b]   Merkle, R., \"One Way Hash Functions and DES\", Advances in\n
      \             Cryptology -- CRYPTO '89 Proceedings, Lecture Notes in\n              Computer
      Science Vol. 435, DOI 10.1007/0-387-34805-0_40,\n              1990, <https://doi.org/10.1007/0-387-34805-0_40>.\n
      \  [NAS2019]  National Academies of Sciences, Engineering, and Medicine,\n              \"Quantum
      Computing: Progress and Prospects\", The National\n              Academies Press,
      DOI 10.17226/25196, 2019,\n              <https://doi.org/10.17226/25196>.\n
      \  [PKIXASN1] Hoffman, P. and J. Schaad, \"New ASN.1 Modules for the\n              Public
      Key Infrastructure Using X.509 (PKIX)\", RFC 5912,\n              DOI 10.17487/RFC5912,
      June 2010,\n              <https://www.rfc-editor.org/info/rfc5912>.\n   [PQC]
      \     Bernstein, D., \"Introduction to post-quantum\n              cryptography\",
      DOI 10.1007/978-3-540-88702-7_1, 2009,\n              <http://www.springer.com/cda/content/document/\n
      \             cda_downloaddocument/9783540887010-c1.pdf>.\n   [RFC4086]  Eastlake
      3rd, D., Schiller, J., and S. Crocker,\n              \"Randomness Requirements
      for Security\", BCP 106, RFC 4086,\n              DOI 10.17487/RFC4086, June
      2005,\n              <https://www.rfc-editor.org/info/rfc4086>.\n"
    title: 8.2.  Informative References
  title: 8.  References
- contents:
  - "Appendix A.  ASN.1 Module\n   <CODE STARTS>\n   MTS-HashSig-2013\n     { iso(1)
    member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)\n       id-smime(16) id-mod(0)
    id-mod-mts-hashsig-2013(64) }\n   DEFINITIONS IMPLICIT TAGS ::= BEGIN\n   EXPORTS
    ALL;\n   IMPORTS\n     PUBLIC-KEY, SIGNATURE-ALGORITHM, SMIME-CAPS\n       FROM
    AlgorithmInformation-2009  -- RFC 5911 [CMSASN1]\n         { iso(1) identified-organization(3)
    dod(6) internet(1)\n           security(5) mechanisms(5) pkix(7) id-mod(0)\n           id-mod-algorithmInformation-02(58)
    } ;\n   --\n   -- Object Identifiers\n   --\n   id-alg-hss-lms-hashsig OBJECT
    IDENTIFIER ::= { iso(1)\n       member-body(2) us(840) rsadsi(113549) pkcs(1)
    pkcs9(9)\n       smime(16) alg(3) 17 }\n   id-alg-mts-hashsig OBJECT IDENTIFIER
    ::= id-alg-hss-lms-hashsig\n   --\n   -- Signature Algorithm and Public Key\n
    \  --\n   sa-HSS-LMS-HashSig SIGNATURE-ALGORITHM ::= {\n       IDENTIFIER id-alg-hss-lms-hashsig\n
    \      PARAMS ARE absent\n       PUBLIC-KEYS { pk-HSS-LMS-HashSig }\n       SMIME-CAPS
    { IDENTIFIED BY id-alg-hss-lms-hashsig } }\n   pk-HSS-LMS-HashSig PUBLIC-KEY ::=
    {\n       IDENTIFIER id-alg-hss-lms-hashsig\n       KEY HSS-LMS-HashSig-PublicKey\n
    \      PARAMS ARE absent\n       CERT-KEY-USAGE\n           { digitalSignature,
    nonRepudiation, keyCertSign, cRLSign } }\n   HSS-LMS-HashSig-PublicKey ::= OCTET
    STRING\n   --\n   -- Expand the signature algorithm set used by CMS [CMSASN1U]\n
    \  --\n   SignatureAlgorithmSet SIGNATURE-ALGORITHM ::=\n       { sa-HSS-LMS-HashSig,
    ... }\n   --\n   -- Expand the S/MIME capabilities set used by CMS [CMSASN1]\n
    \  --\n   SMimeCaps SMIME-CAPS ::=\n       { sa-HSS-LMS-HashSig.&smimeCaps, ...
    }\n   END\n   <CODE ENDS>\n"
  title: Appendix A.  ASN.1 Module
- contents:
  - "Acknowledgements\n   Many thanks to Joe Clarke, Roman Danyliw, Scott Fluhrer,
    Jonathan\n   Hammell, Ben Kaduk, Panos Kampanakis, Barry Leiba, John Mattsson,
    Jim\n   Schaad, Sean Turner, Daniel Van Geest, and Dale Worley for their\n   careful
    review and comments.\n"
  title: Acknowledgements
- contents:
  - "Author's Address\n   Russ Housley\n   Vigil Security, LLC\n   516 Dranesville
    Road\n   Herndon, VA 20170\n"
  title: Author's Address
