- title: __initial_text__
  contents:
  - '               Lightweight Directory Access Protocol (v3)

    '
- title: 1. Status of this Memo
  contents:
  - "1. Status of this Memo\n   This document specifies an Internet standards track\
    \ protocol for the\n   Internet community, and requests discussion and suggestions\
    \ for\n   improvements.  Please refer to the current edition of the \"Internet\n\
    \   Official Protocol Standards\" (STD 1) for the standardization state\n   and\
    \ status of this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1997).  All Rights Reserved.\n"
- title: IESG Note
  contents:
  - "IESG Note\n   This document describes a directory access protocol that provides\n\
    \   both read and update access.  Update access requires secure\n   authentication,\
    \ but this document does not mandate implementation of\n   any satisfactory authentication\
    \ mechanisms.\n   In accordance with RFC 2026, section 4.4.1, this specification\
    \ is\n   being approved by IESG as a Proposed Standard despite this\n   limitation,\
    \ for the following reasons:\n   a. to encourage implementation and interoperability\
    \ testing of\n      these protocols (with or without update access) before they\n\
    \      are deployed, and\n   b. to encourage deployment and use of these protocols\
    \ in read-only\n      applications.  (e.g. applications where LDAPv3 is used as\n\
    \      a query language for directories which are updated by some\n      secure\
    \ mechanism other than LDAP), and\n   c. to avoid delaying the advancement and\
    \ deployment of other Internet\n      standards-track protocols which require\
    \ the ability to query, but\n      not update, LDAPv3 directory servers.\n   Readers\
    \ are hereby warned that until mandatory authentication\n   mechanisms are standardized,\
    \ clients and servers written according to\n   this specification which make use\
    \ of update functionality are\n   UNLIKELY TO INTEROPERATE, or MAY INTEROPERATE\
    \ ONLY IF AUTHENTICATION\n   IS REDUCED TO AN UNACCEPTABLY WEAK LEVEL.\n   Implementors\
    \ are hereby discouraged from deploying LDAPv3 clients or\n   servers which implement\
    \ the update functionality, until a Proposed\n   Standard for mandatory authentication\
    \ in LDAPv3 has been approved and\n   published as an RFC.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Status of this Memo ....................................\
    \  1\n       Copyright Notice .......................................  1\n   \
    \    IESG Note ..............................................  1\n   2.  Abstract\
    \ ...............................................  3\n   3.  Models .................................................\
    \  4\n   3.1. Protocol Model ........................................  4\n   3.2.\
    \ Data Model ............................................  5\n   3.2.1. Attributes\
    \ of Entries ...............................  5\n   3.2.2. Subschema Entries and\
    \ Subentries ....................  7\n   3.3. Relationship to X.500 .................................\
    \  8\n   3.4. Server-specific Data Requirements .....................  8\n   4.\
    \  Elements of Protocol ...................................  9\n   4.1. Common\
    \ Elements .......................................  9\n   4.1.1. Message Envelope\
    \ ....................................  9\n   4.1.1.1. Message ID ........................................\
    \ 11\n   4.1.2. String Types ........................................ 11\n   4.1.3.\
    \ Distinguished Name and Relative Distinguished Name .. 11\n   4.1.4. Attribute\
    \ Type ...................................... 12\n   4.1.5. Attribute Description\
    \ ............................... 13\n   4.1.5.1. Binary Option .....................................\
    \ 14\n   4.1.6. Attribute Value ..................................... 14\n   4.1.7.\
    \ Attribute Value Assertion ........................... 15\n   4.1.8. Attribute\
    \ ........................................... 15\n   4.1.9. Matching Rule Identifier\
    \ ............................ 15\n   4.1.10. Result Message .....................................\
    \ 16\n   4.1.11. Referral ........................................... 18\n   4.1.12.\
    \ Controls ........................................... 19\n   4.2. Bind Operation\
    \ ........................................ 20\n   4.2.1. Sequencing of the Bind\
    \ Request ...................... 21\n   4.2.2. Authentication and Other Security\
    \ Services .......... 22\n   4.2.3. Bind Response .......................................\
    \ 23\n   4.3. Unbind Operation ...................................... 24\n   4.4.\
    \ Unsolicited Notification .............................. 24\n   4.4.1. Notice\
    \ of Disconnection ............................. 24\n   4.5. Search Operation\
    \ ...................................... 25\n   4.5.1. Search Request ......................................\
    \ 25\n   4.5.2. Search Result ....................................... 29\n   4.5.3.\
    \ Continuation References in the Search Result ........ 31\n   4.5.3.1. Example\
    \ ........................................... 31\n   4.6. Modify Operation ......................................\
    \ 32\n   4.7. Add Operation ......................................... 34\n   4.8.\
    \ Delete Operation ...................................... 35\n   4.9. Modify DN\
    \ Operation ................................... 36\n   4.10. Compare Operation\
    \ .................................... 37\n   4.11. Abandon Operation ....................................\
    \ 38\n   4.12. Extended Operation ................................... 38\n   5.\
    \  Protocol Element Encodings and Transfer ................ 39\n   5.1. Mapping\
    \ Onto BER-based Transport Services ............. 39\n   5.2. Transfer Protocols\
    \ .................................... 40\n   5.2.1. Transmission Control Protocol\
    \ (TCP) ................. 40\n   6.  Implementation Guidelines ..............................\
    \ 40\n   6.1. Server Implementations ................................ 40\n   6.2.\
    \ Client Implementations ................................ 40\n   7.  Security\
    \ Considerations ................................ 41\n   8.  Acknowledgements\
    \ ....................................... 41\n   9.  Bibliography ...........................................\
    \ 41\n   10. Authors' Addresses ..................................... 42\n   Appendix\
    \ A - Complete ASN.1 Definition ..................... 44\n   Full Copyright Statement\
    \ ................................... 50\n"
- title: 2.  Abstract
  contents:
  - "2.  Abstract\n   The protocol described in this document is designed to provide\
    \ access\n   to directories supporting the X.500 models, while not incurring the\n\
    \   resource requirements of the X.500 Directory Access Protocol (DAP).\n   This\
    \ protocol is specifically targeted at management applications and\n   browser\
    \ applications that provide read/write interactive access to\n   directories.\
    \ When used with a directory supporting the X.500\n   protocols, it is intended\
    \ to be a complement to the X.500 DAP.\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    ,  and \"MAY\" in this document\n   are to be interpreted as described in RFC\
    \ 2119 [10].\n   Key aspects of this version of LDAP are:\n   - All protocol elements\
    \ of LDAPv2 (RFC 1777) are supported. The\n     protocol is carried directly over\
    \ TCP or other transport, bypassing\n     much of the session/presentation overhead\
    \ of X.500 DAP.\n   - Most protocol data elements can be encoded as ordinary strings\n\
    \     (e.g., Distinguished Names).\n   - Referrals to other servers may be returned.\n\
    \   - SASL mechanisms may be used with LDAP to provide association\n     security\
    \ services.\n   - Attribute values and Distinguished Names have been\n     internationalized\
    \ through the use of the ISO 10646 character set.\n   - The protocol can be extended\
    \ to support new operations, and\n     controls may be used to extend existing\
    \ operations.\n   - Schema is published in the directory for use by clients.\n"
- title: 3.  Models
  contents:
  - "3.  Models\n   Interest in X.500 [1] directory technologies in the Internet has\
    \ led\n   to efforts to reduce the high cost of entry associated with use of\n\
    \   these technologies.  This document continues the efforts to define\n   directory\
    \ protocol alternatives, updating the LDAP [2] protocol\n   specification.\n"
- title: 3.1. Protocol Model
  contents:
  - "3.1. Protocol Model\n   The general model adopted by this protocol is one of\
    \ clients\n   performing protocol operations against servers. In this model, a\n\
    \   client transmits a protocol request describing the operation to be\n   performed\
    \ to a server. The server is then responsible for performing\n   the necessary\
    \ operation(s) in the directory. Upon completion of the\n   operation(s), the\
    \ server returns a response containing any results or\n   errors to the requesting\
    \ client.\n   In keeping with the goal of easing the costs associated with use\
    \ of\n   the directory, it is an objective of this protocol to minimize the\n\
    \   complexity of clients so as to facilitate widespread deployment of\n   applications\
    \ capable of using the directory.\n   Note that although servers are required\
    \ to return responses whenever\n   such responses are defined in the protocol,\
    \ there is no requirement\n   for synchronous behavior on the part of either clients\
    \ or servers.\n   Requests and responses for multiple operations may be exchanged\n\
    \   between a client and server in any order, provided the client\n   eventually\
    \ receives a response for every request that requires one.\n   In LDAP versions\
    \ 1 and 2, no provision was made for protocol servers\n   returning referrals\
    \ to clients.  However, for improved performance\n   and distribution this version\
    \ of the protocol permits servers to\n   return to clients referrals to other\
    \ servers.  This allows servers to\n   offload the work of contacting other servers\
    \ to progress operations.\n   Note that the core protocol operations defined in\
    \ this document can\n   be mapped to a strict subset of the X.500(1997) directory\
    \ abstract\n   service, so it can be cleanly provided by the DAP.  However there\
    \ is\n   not a one-to-one mapping between LDAP protocol operations and DAP\n \
    \  operations: server implementations acting as a gateway to X.500\n   directories\
    \ may need to make multiple DAP requests.\n"
- title: 3.2. Data Model
  contents:
  - "3.2. Data Model\n   This section provides a brief introduction to the X.500 data\
    \ model,\n   as used by LDAP.\n   The LDAP protocol assumes there are one or more\
    \ servers which jointly\n   provide access to a Directory Information Tree (DIT).\
    \  The tree is\n   made up of entries.  Entries have names: one or more attribute\
    \ values\n   from the entry form its relative distinguished name (RDN), which\
    \ MUST\n   be unique among all its siblings.  The concatenation of the relative\n\
    \   distinguished names of the sequence of entries from a particular\n   entry\
    \ to an immediate subordinate of the root of the tree forms that\n   entry's Distinguished\
    \ Name (DN), which is unique in the tree.  An\n   example of a Distinguished Name\
    \ is\n   CN=Steve Kille, O=Isode Limited, C=GB\n   Some servers may hold cache\
    \ or shadow copies of entries, which can be\n   used to answer search and comparison\
    \ queries, but will return\n   referrals or contact other servers if modification\
    \ operations are\n   requested.\n   Servers which perform caching or shadowing\
    \ MUST ensure that they do\n   not violate any access control constraints placed\
    \ on the data by the\n   originating server.\n   The largest collection of entries,\
    \ starting at an entry that is\n   mastered by a particular server, and including\
    \ all its subordinates\n   and their subordinates, down to the entries which are\
    \ mastered by\n   different servers, is termed a naming context.  The root of\
    \ the DIT\n   is a DSA-specific Entry (DSE) and not part of any naming context:\n\
    \   each server has different attribute values in the root DSE.  (DSA is\n   an\
    \ X.500 term for the directory server).\n"
- title: 3.2.1. Attributes of Entries
  contents:
  - "3.2.1. Attributes of Entries\n   Entries consist of a set of attributes.  An\
    \ attribute is a type with\n   one or more associated values.  The attribute type\
    \ is identified by a\n   short descriptive name and an OID (object identifier).\
    \ The attribute\n   type governs whether there can be more than one value of an\
    \ attribute\n   of that type in an entry, the syntax to which the values must\n\
    \   conform, the kinds of matching which can be performed on values of\n   that\
    \ attribute, and other functions.\n   An example of an attribute is \"mail\".\
    \ There may be one or more values\n   of this attribute, they must be IA5 (ASCII)\
    \ strings, and they are\n   case insensitive (e.g. \"foo@bar.com\" will match\
    \ \"FOO@BAR.COM\").\n   Schema is the collection of attribute type definitions,\
    \ object class\n   definitions and other information which a server uses to determine\n\
    \   how to match a filter or attribute value assertion (in a compare\n   operation)\
    \ against the attributes of an entry, and whether to permit\n   add and modify\
    \ operations.  The definition of schema for use with\n   LDAP is given in [5]\
    \ and [6].  Additional schema elements may be\n   defined in other documents.\n\
    \   Each entry MUST have an objectClass attribute.  The objectClass\n   attribute\
    \ specifies the object classes of an entry, which along with\n   the system and\
    \ user schema determine the permitted attributes of an\n   entry.  Values of this\
    \ attribute may be modified by clients, but the\n   objectClass attribute cannot\
    \ be removed.  Servers may restrict the\n   modifications of this attribute to\
    \ prevent the basic structural class\n   of the entry from being changed (e.g.\
    \ one cannot change a person into\n   a country).  When creating an entry or adding\
    \ an objectClass value to\n   an entry, all superclasses of the named classes\
    \ are implicitly added\n   as well if not already present, and the client must\
    \ supply values for\n   any mandatory attributes of new superclasses.\n   Some\
    \ attributes, termed operational attributes, are used by servers\n   for administering\
    \ the directory system itself.  They are not returned\n   in search results unless\
    \ explicitly requested by name.  Attributes\n   which are not operational, such\
    \ as \"mail\", will have their schema and\n   syntax constraints enforced by servers,\
    \ but servers will generally\n   not make use of their values.\n   Servers MUST\
    \ NOT permit clients to add attributes to an entry unless\n   those attributes\
    \ are permitted by the object class definitions, the\n   schema controlling that\
    \ entry (specified in the subschema - see\n   below), or are operational attributes\
    \ known to that server and used\n   for administrative purposes.  Note that there\
    \ is a particular\n   objectClass 'extensibleObject' defined in [5] which permits\
    \ all user\n   attributes to be present in an entry.\n   Entries MAY contain,\
    \ among others, the following operational\n   attributes, defined in [5]. These\
    \ attributes are maintained\n   automatically by the server and are not modifiable\
    \ by clients:\n   - creatorsName: the Distinguished Name of the user who added\
    \ this\n     entry to the directory.\n   - createTimestamp: the time this entry\
    \ was added to the directory.\n   - modifiersName: the Distinguished Name of the\
    \ user who last modified\n     this entry.\n   - modifyTimestamp: the time this\
    \ entry was last modified.\n   - subschemaSubentry:  the Distinguished Name of\
    \ the subschema entry\n     (or subentry) which controls the schema for this entry.\n"
- title: 3.2.2. Subschema Entries and Subentries
  contents:
  - "3.2.2. Subschema Entries and Subentries\n   Subschema entries are used for administering\
    \ information about the\n   directory schema, in particular the object classes\
    \ and attribute\n   types supported by directory servers.  A single subschema\
    \ entry\n   contains all schema definitions used by entries in a particular part\n\
    \   of the directory tree.\n   Servers which follow X.500(93) models SHOULD implement\
    \ subschema\n   using the X.500 subschema mechanisms, and so these subschemas\
    \ are not\n   ordinary entries.  LDAP clients SHOULD NOT assume that servers\n\
    \   implement any of the other aspects of X.500 subschema.  A server\n   which\
    \ masters entries and permits clients to modify these entries\n   MUST implement\
    \ and provide access to these subschema entries, so that\n   its clients may discover\
    \ the attributes and object classes which are\n   permitted to be present. It\
    \ is strongly recommended that all other\n   servers implement this as well.\n\
    \   The following four attributes MUST be present in all subschema\n   entries:\n\
    \   - cn: this attribute MUST be used to form the RDN of the subschema\n     entry.\n\
    \   - objectClass: the attribute MUST have at least the values \"top\" and\n \
    \    \"subschema\".\n   - objectClasses: each value of this attribute specifies\
    \ an object\n     class known to the server.\n   - attributeTypes: each value\
    \ of this attribute specifies an attribute\n     type known to the server.\n \
    \  These are defined in [5]. Other attributes MAY be present in\n   subschema\
    \ entries, to reflect additional supported capabilities.\n   These include matchingRules,\
    \ matchingRuleUse, dITStructureRules,\n   dITContentRules, nameForms and ldapSyntaxes.\n\
    \   Servers SHOULD provide the attributes createTimestamp and\n   modifyTimestamp\
    \ in subschema entries, in order to allow clients to\n   maintain their caches\
    \ of schema information.\n   Clients MUST only retrieve attributes from a subschema\
    \ entry by\n   requesting a base object search of the entry, where the search\
    \ filter\n   is \"(objectClass=subschema)\". (This will allow LDAPv3 servers which\n\
    \   gateway to X.500(93) to detect that subentry information is being\n   requested.)\n"
- title: 3.3. Relationship to X.500
  contents:
  - "3.3. Relationship to X.500\n   This document defines LDAP in terms of X.500 as\
    \ an X.500 access\n   mechanism.  An LDAP server MUST act in accordance with the\n\
    \   X.500(1993) series of ITU recommendations when providing the service.\n  \
    \ However, it is not required that an LDAP server make use of any X.500\n   protocols\
    \ in providing this service, e.g. LDAP can be mapped onto any\n   other directory\
    \ system so long as the X.500 data and service model as\n   used in LDAP is not\
    \ violated in the LDAP interface.\n"
- title: 3.4. Server-specific Data Requirements
  contents:
  - "3.4. Server-specific Data Requirements\n   An LDAP server MUST provide information\
    \ about itself and other\n   information that is specific to each server.  This\
    \ is represented as\n   a group of attributes located in the root DSE (DSA-Specific\
    \ Entry),\n   which is named with the zero-length LDAPDN.  These attributes are\n\
    \   retrievable if a client performs a base object search of the root\n   with\
    \ filter \"(objectClass=*)\", however they are subject to access\n   control restrictions.\
    \  The root DSE MUST NOT be included if the\n   client performs a subtree search\
    \ starting from the root.\n   Servers may allow clients to modify these attributes.\n\
    \   The following attributes of the root DSE are defined in section 5 of\n   [5].\
    \  Additional attributes may be defined in other documents.\n   - namingContexts:\
    \ naming contexts held in the server. Naming contexts\n     are defined in section\
    \ 17 of X.501 [6].\n   - subschemaSubentry: subschema entries (or subentries)\
    \ known by this\n     server.\n   - altServer: alternative servers in case this\
    \ one is later\n     unavailable.\n   - supportedExtension: list of supported\
    \ extended operations.\n   - supportedControl: list of supported controls.\n \
    \  - supportedSASLMechanisms: list of supported SASL security features.\n   -\
    \ supportedLDAPVersion: LDAP versions implemented by the server.\n   If the server\
    \ does not master entries and does not know the locations\n   of schema information,\
    \ the subschemaSubentry attribute is not present\n   in the root DSE.  If the\
    \ server masters directory entries under one\n   or more schema rules, there may\
    \ be any number of values of the\n   subschemaSubentry attribute in the root DSE.\n"
- title: 4.  Elements of Protocol
  contents:
  - "4.  Elements of Protocol\n   The LDAP protocol is described using Abstract Syntax\
    \ Notation 1\n   (ASN.1) [3], and is typically transferred using a subset of ASN.1\n\
    \   Basic Encoding Rules [11]. In order to support future extensions to\n   this\
    \ protocol, clients and servers MUST ignore elements of SEQUENCE\n   encodings\
    \ whose tags they do not recognize.\n   Note that unlike X.500, each change to\
    \ the LDAP protocol other than\n   through the extension mechanisms will have\
    \ a different version\n   number.  A client will indicate the version it supports\
    \ as part of\n   the bind request, described in section 4.2.  If a client has\
    \ not sent\n   a bind, the server MUST assume that version 3 is supported in the\n\
    \   client (since version 2 required that the client bind first).\n   Clients\
    \ may determine the protocol version a server supports by\n   reading the supportedLDAPVersion\
    \ attribute from the root DSE. Servers\n   which implement version 3 or later\
    \ versions MUST provide this\n   attribute.  Servers which only implement version\
    \ 2 may not provide\n   this attribute.\n"
- title: 4.1. Common Elements
  contents:
  - "4.1. Common Elements\n   This section describes the LDAPMessage envelope PDU\
    \ (Protocol Data\n   Unit) format, as well as data type definitions which are\
    \ used in the\n   protocol operations.\n"
- title: 4.1.1. Message Envelope
  contents:
  - "4.1.1. Message Envelope\n   For the purposes of protocol exchanges, all protocol\
    \ operations are\n   encapsulated in a common envelope, the LDAPMessage, which\
    \ is defined\n   as follows:\n        LDAPMessage ::= SEQUENCE {\n           \
    \     messageID       MessageID,\n                protocolOp      CHOICE {\n \
    \                       bindRequest     BindRequest,\n                       \
    \ bindResponse    BindResponse,\n                        unbindRequest   UnbindRequest,\n\
    \                        searchRequest   SearchRequest,\n                    \
    \    searchResEntry  SearchResultEntry,\n                        searchResDone\
    \   SearchResultDone,\n                        searchResRef    SearchResultReference,\n\
    \                        modifyRequest   ModifyRequest,\n                    \
    \    modifyResponse  ModifyResponse,\n                        addRequest     \
    \ AddRequest,\n                        addResponse     AddResponse,\n        \
    \                delRequest      DelRequest,\n                        delResponse\
    \     DelResponse,\n                        modDNRequest    ModifyDNRequest,\n\
    \                        modDNResponse   ModifyDNResponse,\n                 \
    \       compareRequest  CompareRequest,\n                        compareResponse\
    \ CompareResponse,\n                        abandonRequest  AbandonRequest,\n\
    \                        extendedReq     ExtendedRequest,\n                  \
    \      extendedResp    ExtendedResponse },\n                 controls       [0]\
    \ Controls OPTIONAL }\n        MessageID ::= INTEGER (0 .. maxInt)\n        maxInt\
    \ INTEGER ::= 2147483647 -- (2^^31 - 1) --\n   The function of the LDAPMessage\
    \ is to provide an envelope containing\n   common fields required in all protocol\
    \ exchanges. At this time the\n   only common fields are the message ID and the\
    \ controls.\n   If the server receives a PDU from the client in which the LDAPMessage\n\
    \   SEQUENCE tag cannot be recognized, the messageID cannot be parsed,\n   the\
    \ tag of the protocolOp is not recognized as a request, or the\n   encoding structures\
    \ or lengths of data fields are found to be\n   incorrect, then the server MUST\
    \ return the notice of disconnection\n   described in section 4.4.1, with resultCode\
    \ protocolError, and\n   immediately close the connection. In other cases that\
    \ the server\n   cannot parse the request received by the client, the server MUST\n\
    \   return an appropriate response to the request, with the resultCode\n   set\
    \ to protocolError.\n   If the client receives a PDU from the server which cannot\
    \ be parsed,\n   the client may discard the PDU, or may abruptly close the connection.\n\
    \   The ASN.1 type Controls is defined in section 4.1.12.\n"
- title: 4.1.1.1. Message ID
  contents:
  - "4.1.1.1. Message ID\n   All LDAPMessage envelopes encapsulating responses contain\
    \ the\n   messageID value of the corresponding request LDAPMessage.\n   The message\
    \ ID of a request MUST have a value different from the\n   values of any other\
    \ requests outstanding in the LDAP session of which\n   this message is a part.\n\
    \   A client MUST NOT send a second request with the same message ID as\n   an\
    \ earlier request on the same connection if the client has not\n   received the\
    \ final response from the earlier request.  Otherwise the\n   behavior is undefined.\
    \  Typical clients increment a counter for each\n   request.\n   A client MUST\
    \ NOT reuse the message id of an abandonRequest or of the\n   abandoned operation\
    \ until it has received a response from the server\n   for another request invoked\
    \ subsequent to the abandonRequest, as the\n   abandonRequest itself does not\
    \ have a response.\n"
- title: 4.1.2. String Types
  contents:
  - "4.1.2. String Types\n   The LDAPString is a notational convenience to indicate\
    \ that, although\n   strings of LDAPString type encode as OCTET STRING types,\
    \ the ISO\n   10646 [13] character set (a superset of Unicode) is used, encoded\n\
    \   following the UTF-8 algorithm [14]. Note that in the UTF-8 algorithm\n   characters\
    \ which are the same as ASCII (0x0000 through 0x007F) are\n   represented as that\
    \ same ASCII character in a single byte.  The other\n   byte values are used to\
    \ form a variable-length encoding of an\n   arbitrary character.\n        LDAPString\
    \ ::= OCTET STRING\n   The LDAPOID is a notational convenience to indicate that\
    \ the\n   permitted value of this string is a (UTF-8 encoded) dotted-decimal\n\
    \   representation of an OBJECT IDENTIFIER.\n        LDAPOID ::= OCTET STRING\n\
    \   For example,\n        1.3.6.1.4.1.1466.1.2.3\n"
- title: 4.1.3. Distinguished Name and Relative Distinguished Name
  contents:
  - "4.1.3. Distinguished Name and Relative Distinguished Name\n   An LDAPDN and a\
    \ RelativeLDAPDN are respectively defined to be the\n   representation of a Distinguished\
    \ Name and a Relative Distinguished\n   Name after encoding according to the specification\
    \ in [4], such that\n        <distinguished-name> ::= <name>\n        <relative-distinguished-name>\
    \ ::= <name-component>\n   where <name> and <name-component> are as defined in\
    \ [4].\n        LDAPDN ::= LDAPString\n        RelativeLDAPDN ::= LDAPString\n\
    \   Only Attribute Types can be present in a relative distinguished name\n   component;\
    \ the options of Attribute Descriptions (next section) MUST\n   NOT be used in\
    \ specifying distinguished names.\n"
- title: 4.1.4. Attribute Type
  contents:
  - "4.1.4. Attribute Type\n   An AttributeType takes on as its value the textual\
    \ string associated\n   with that AttributeType in its specification.\n      \
    \  AttributeType ::= LDAPString\n   Each attribute type has a unique OBJECT IDENTIFIER\
    \ which has been\n   assigned to it.  This identifier may be written as decimal\
    \ digits\n   with components separated by periods, e.g. \"2.5.4.10\".\n   A specification\
    \ may also assign one or more textual names for an\n   attribute type.  These\
    \ names MUST begin with a letter, and only\n   contain ASCII letters, digit characters\
    \ and hyphens.  They are case\n   insensitive.  (These ASCII characters are identical\
    \ to ISO 10646\n   characters whose UTF-8 encoding is a single byte between 0x00\
    \ and\n   0x7F.)\n   If the server has a textual name for an attribute type, it\
    \ MUST use a\n   textual name for attributes returned in search results.  The\
    \ dotted-\n   decimal OBJECT IDENTIFIER is only used if there is no textual name\n\
    \   for an attribute type.\n   Attribute type textual names are non-unique, as\
    \ two different\n   specifications (neither in standards track RFCs) may choose\
    \ the same\n   name.\n   A server which masters or shadows entries SHOULD list\
    \ all the\n   attribute types it supports in the subschema entries, using the\n\
    \   attributeTypes attribute.  Servers which support an open-ended set of\n  \
    \ attributes SHOULD include at least the attributeTypes value for the\n   'objectClass'\
    \ attribute. Clients MAY retrieve the attributeTypes\n   value from subschema\
    \ entries in order to obtain the OBJECT IDENTIFIER\n   and other information associated\
    \ with attribute types.\n   Some attribute type names which are used in this version\
    \ of LDAP are\n   described in [5].  Servers may implement additional attribute\
    \ types.\n"
- title: 4.1.5. Attribute Description
  contents:
  - "4.1.5. Attribute Description\n   An AttributeDescription is a superset of the\
    \ definition of the\n   AttributeType.  It has the same ASN.1 definition, but\
    \ allows\n   additional options to be specified.  They are also case insensitive.\n\
    \        AttributeDescription ::= LDAPString\n   A value of AttributeDescription\
    \ is based on the following BNF:\n        <AttributeDescription> ::= <AttributeType>\
    \ [ \";\" <options> ]\n        <options>  ::= <option> | <option> \";\" <options>\n\
    \        <option>   ::= <opt-char> <opt-char>*\n        <opt-char> ::=  ASCII-equivalent\
    \ letters, numbers and hyphen\n   Examples of valid AttributeDescription:\n  \
    \      cn\n        userCertificate;binary\n   One option, \"binary\", is defined\
    \ in this document.  Additional\n   options may be defined in IETF standards-track\
    \ and experimental RFCs.\n   Options beginning with \"x-\" are reserved for private\
    \ experiments.\n   Any option could be associated with any AttributeType, although\
    \ not\n   all combinations may be supported by a server.\n   An AttributeDescription\
    \ with one or more options is treated as a\n   subtype of the attribute type without\
    \ any options.  Options present\n   in an AttributeDescription are never mutually\
    \ exclusive.\n   Implementations MUST generate the <options> list sorted in ascending\n\
    \   order, and servers MUST treat any two AttributeDescription with the\n   same\
    \ AttributeType and options as equivalent.  A server will treat an\n   AttributeDescription\
    \ with any options it does not implement as an\n   unrecognized attribute type.\n\
    \   The data type \"AttributeDescriptionList\" describes a list of 0 or\n   more\
    \ attribute types.  (A list of zero elements has special\n   significance in the\
    \ Search request.)\n        AttributeDescriptionList ::= SEQUENCE OF\n       \
    \         AttributeDescription\n"
- title: 4.1.5.1. Binary Option
  contents:
  - "4.1.5.1. Binary Option\n   If the \"binary\" option is present in an AttributeDescription,\
    \ it\n   overrides any string-based encoding representation defined for that\n\
    \   attribute in [5]. Instead the attribute is to be transferred as a\n   binary\
    \ value encoded using the Basic Encoding Rules [11].  The syntax\n   of the binary\
    \ value is an ASN.1 data type definition which is\n   referenced by the \"SYNTAX\"\
    \ part of the attribute type definition.\n   The presence or absence of the \"\
    binary\" option only affects the\n   transfer of attribute values in protocol;\
    \ servers store any\n   particular attribute in a single format.  If a client\
    \ requests that a\n   server return an attribute in the binary format, but the\
    \ server\n   cannot generate that format, the server MUST treat this attribute\n\
    \   type as an unrecognized attribute type.  Similarly, clients MUST NOT\n   expect\
    \ servers to return an attribute in binary format if the client\n   requested\
    \ that attribute by name without the binary option.\n   This option is intended\
    \ to be used with attributes whose syntax is a\n   complex ASN.1 data type, and\
    \ the structure of values of that type is\n   needed by clients.  Examples of\
    \ this kind of syntax are \"Certificate\"\n   and \"CertificateList\".\n"
- title: 4.1.6. Attribute Value
  contents:
  - "4.1.6. Attribute Value\n   A field of type AttributeValue takes on as its value\
    \ either a string\n   encoding of a AttributeValue data type, or an OCTET STRING\
    \ containing\n   an encoded binary value, depending on whether the \"binary\"\
    \ option is\n   present in the companion AttributeDescription to this AttributeValue.\n\
    \   The definition of string encodings for different syntaxes and types\n   may\
    \ be found in other documents, and in particular [5].\n        AttributeValue\
    \ ::= OCTET STRING\n   Note that there is no defined limit on the size of this\
    \ encoding;\n   thus protocol values may include multi-megabyte attributes (e.g.\n\
    \   photographs).\n   Attributes may be defined which have arbitrary and non-printable\n\
    \   syntax.  Implementations MUST NEITHER simply display nor attempt to\n   decode\
    \ as ASN.1 a value if its syntax is not known.  The\n   implementation may attempt\
    \ to discover the subschema of the source\n   entry, and retrieve the values of\
    \ attributeTypes from it.\n   Clients MUST NOT send attribute values in a request\
    \ which are not\n   valid according to the syntax defined for the attributes.\n"
- title: 4.1.7. Attribute Value Assertion
  contents:
  - "4.1.7. Attribute Value Assertion\n   The AttributeValueAssertion type definition\
    \ is similar to the one in\n   the X.500 directory standards.  It contains an\
    \ attribute description\n   and a matching rule assertion value suitable for that\
    \ type.\n        AttributeValueAssertion ::= SEQUENCE {\n                attributeDesc\
    \   AttributeDescription,\n                assertionValue  AssertionValue }\n\
    \        AssertionValue ::= OCTET STRING\n   If the \"binary\" option is present\
    \ in attributeDesc, this signals to\n   the server that the assertionValue is\
    \ a binary encoding of the\n   assertion value.\n   For all the string-valued\
    \ user attributes described in [5], the\n   assertion value syntax is the same\
    \ as the value syntax.  Clients may\n   use attribute values as assertion values\
    \ in compare requests and\n   search filters.\n   Note however that the assertion\
    \ syntax may be different from the\n   value syntax for other attributes or for\
    \ non-equality matching rules.\n   These may have an assertion syntax which contains\
    \ only part of the\n   value.  See section 20.2.1.8 of X.501 [6] for examples.\n"
- title: 4.1.8. Attribute
  contents:
  - "4.1.8. Attribute\n   An attribute consists of a type and one or more values of\
    \ that type.\n   (Though attributes MUST have at least one value when stored,\
    \ due to\n   access control restrictions the set may be empty when transferred\
    \ in\n   protocol.  This is described in section 4.5.2, concerning the\n   PartialAttributeList\
    \ type.)\n        Attribute ::= SEQUENCE {\n                type    AttributeDescription,\n\
    \                vals    SET OF AttributeValue }\n   Each attribute value is distinct\
    \ in the set (no duplicates).  The\n   order of attribute values within the vals\
    \ set is undefined and\n   implementation-dependent, and MUST NOT be relied upon.\n"
- title: 4.1.9. Matching Rule Identifier
  contents:
  - "4.1.9. Matching Rule Identifier\n   A matching rule is a means of expressing\
    \ how a server should compare\n   an AssertionValue received in a search filter\
    \ with an abstract data\n   value.  The matching rule defines the syntax of the\
    \ assertion value\n   and the process to be performed in the server.\n   An X.501(1993)\
    \ Matching Rule is identified in the LDAP protocol by\n   the printable representation\
    \ of its OBJECT IDENTIFIER, either as one\n   of the strings given in [5], or\
    \ as decimal digits with components\n   separated by periods, e.g. \"caseIgnoreIA5Match\"\
    \ or\n   \"1.3.6.1.4.1.453.33.33\".\n        MatchingRuleId ::= LDAPString\n \
    \  Servers which support matching rules for use in the extensibleMatch\n   search\
    \ filter MUST list the matching rules they implement in\n   subschema entries,\
    \ using the matchingRules attributes.  The server\n   SHOULD also list there,\
    \ using the matchingRuleUse attribute, the\n   attribute types with which each\
    \ matching rule can be used.  More\n   information is given in section 4.4 of\
    \ [5].\n"
- title: 4.1.10. Result Message
  contents:
  - "4.1.10. Result Message\n   The LDAPResult is the construct used in this protocol\
    \ to return\n   success or failure indications from servers to clients. In response\n\
    \   to various requests servers will return responses containing fields\n   of\
    \ type LDAPResult to indicate the final status of a protocol\n   operation request.\n\
    \        LDAPResult ::= SEQUENCE {\n                resultCode      ENUMERATED\
    \ {\n                             success                      (0),\n        \
    \                     operationsError              (1),\n                    \
    \         protocolError                (2),\n                             timeLimitExceeded\
    \            (3),\n                             sizeLimitExceeded            (4),\n\
    \                             compareFalse                 (5),\n            \
    \                 compareTrue                  (6),\n                        \
    \     authMethodNotSupported       (7),\n                             strongAuthRequired\
    \           (8),\n                                        -- 9 reserved --\n \
    \                            referral                     (10),  -- new\n    \
    \                         adminLimitExceeded           (11),  -- new\n       \
    \                      unavailableCriticalExtension (12),  -- new\n          \
    \                   confidentialityRequired      (13),  -- new\n             \
    \                saslBindInProgress           (14),  -- new\n                \
    \             noSuchAttribute              (16),\n                           \
    \  undefinedAttributeType       (17),\n                             inappropriateMatching\
    \        (18),\n                             constraintViolation          (19),\n\
    \                             attributeOrValueExists       (20),\n           \
    \                  invalidAttributeSyntax       (21),\n                      \
    \                  -- 22-31 unused --\n                             noSuchObject\
    \                 (32),\n                             aliasProblem           \
    \      (33),\n                             invalidDNSyntax              (34),\n\
    \                             -- 35 reserved for undefined isLeaf --\n       \
    \                      aliasDereferencingProblem    (36),\n                  \
    \                      -- 37-47 unused --\n                             inappropriateAuthentication\
    \  (48),\n                             invalidCredentials           (49),\n  \
    \                           insufficientAccessRights     (50),\n             \
    \                busy                         (51),\n                        \
    \     unavailable                  (52),\n                             unwillingToPerform\
    \           (53),\n                             loopDetect                   (54),\n\
    \                                        -- 55-63 unused --\n                \
    \             namingViolation              (64),\n                           \
    \  objectClassViolation         (65),\n                             notAllowedOnNonLeaf\
    \          (66),\n                             notAllowedOnRDN              (67),\n\
    \                             entryAlreadyExists           (68),\n           \
    \                  objectClassModsProhibited    (69),\n                      \
    \                  -- 70 reserved for CLDAP --\n                             affectsMultipleDSAs\
    \          (71), -- new\n                                        -- 72-79 unused\
    \ --\n                             other                        (80) },\n    \
    \                         -- 81-90 reserved for APIs --\n                matchedDN\
    \       LDAPDN,\n                errorMessage    LDAPString,\n               \
    \ referral        [3] Referral OPTIONAL }\n   All the result codes with the exception\
    \ of success, compareFalse and\n   compareTrue are to be treated as meaning the\
    \ operation could not be\n   completed in its entirety.\n   Most of the result\
    \ codes are based on problem indications from X.511\n   error data types.  Result\
    \ codes from 16 to 21 indicate an\n   AttributeProblem, codes 32, 33, 34 and 36\
    \ indicate a NameProblem,\n   codes 48, 49 and 50 indicate a SecurityProblem,\
    \ codes 51 to 54\n   indicate a ServiceProblem, and codes 64 to 69 and 71 indicates\
    \ an\n   UpdateProblem.\n   If a client receives a result code which is not listed\
    \ above, it is\n   to be treated as an unknown error condition.\n   The errorMessage\
    \ field of this construct may, at the server's option,\n   be used to return a\
    \ string containing a textual, human-readable\n   (terminal control and page formatting\
    \ characters should be avoided)\n   error diagnostic. As this error diagnostic\
    \ is not standardized,\n   implementations MUST NOT rely on the values returned.\
    \  If the server\n   chooses not to return a textual diagnostic, the errorMessage\
    \ field of\n   the LDAPResult type MUST contain a zero length string.\n   For\
    \ result codes of noSuchObject, aliasProblem, invalidDNSyntax and\n   aliasDereferencingProblem,\
    \ the matchedDN field is set to the name of\n   the lowest entry (object or alias)\
    \ in the directory that was matched.\n   If no aliases were dereferenced while\
    \ attempting to locate the entry,\n   this will be a truncated form of the name\
    \ provided, or if aliases\n   were dereferenced, of the resulting name, as defined\
    \ in section 12.5\n   of X.511 [8]. The matchedDN field is to be set to a zero\
    \ length\n   string with all other result codes.\n"
- title: 4.1.11. Referral
  contents:
  - "4.1.11. Referral\n   The referral error indicates that the contacted server does\
    \ not hold\n   the target entry of the request.  The referral field is present\
    \ in an\n   LDAPResult if the LDAPResult.resultCode field value is referral, and\n\
    \   absent with all other result codes.  It contains a reference to\n   another\
    \ server (or set of servers) which may be accessed via LDAP or\n   other protocols.\
    \  Referrals can be returned in response to any\n   operation request (except\
    \ unbind and abandon which do not have\n   responses). At least one URL MUST be\
    \ present in the Referral.\n   The referral is not returned for a singleLevel\
    \ or wholeSubtree search\n   in which the search scope spans multiple naming contexts,\
    \ and several\n   different servers would need to be contacted to complete the\n\
    \   operation. Instead, continuation references, described in section\n   4.5.3,\
    \ are returned.\n        Referral ::= SEQUENCE OF LDAPURL  -- one or more\n  \
    \      LDAPURL ::= LDAPString -- limited to characters permitted in URLs\n   If\
    \ the client wishes to progress the operation, it MUST follow the\n   referral\
    \ by contacting any one of servers.  All the URLs MUST be\n   equally capable\
    \ of being used to progress the operation.  (The\n   mechanisms for how this is\
    \ achieved by multiple servers are outside\n   the scope of this document.)\n\
    \   URLs for servers implementing the LDAP protocol are written according\n  \
    \ to [9].  If an alias was dereferenced, the <dn> part of the URL MUST\n   be\
    \ present, with the new target object name.  If the <dn> part is\n   present,\
    \ the client MUST use this name in its next request to\n   progress the operation,\
    \ and if it is not present the client will use\n   the same name as in the original\
    \ request.  Some servers (e.g.\n   participating in distributed indexing) may\
    \ provide a different filter\n   in a referral for a search operation.  If the\
    \ filter part of the URL\n   is present in an LDAPURL, the client MUST use this\
    \ filter in its next\n   request to progress this search, and if it is not present\
    \ the client\n   MUST use the same filter as it used for that search.  Other aspects\n\
    \   of the new request may be the same or different as the request which\n   generated\
    \ the referral.\n   Note that UTF-8 characters appearing in a DN or search filter\
    \ may not\n   be legal for URLs (e.g. spaces) and MUST be escaped using the %\n\
    \   method in RFC 1738 [7].\n   Other kinds of URLs may be returned, so long as\
    \ the operation could\n   be performed using that protocol.\n"
- title: 4.1.12. Controls
  contents:
  - "4.1.12. Controls\n   A control is a way to specify extension information. Controls\
    \ which\n   are sent as part of a request apply only to that request and are not\n\
    \   saved.\n        Controls ::= SEQUENCE OF Control\n        Control ::= SEQUENCE\
    \ {\n                controlType             LDAPOID,\n                criticality\
    \             BOOLEAN DEFAULT FALSE,\n                controlValue           \
    \ OCTET STRING OPTIONAL }\n   The controlType field MUST be a UTF-8 encoded dotted-decimal\n\
    \   representation of an OBJECT IDENTIFIER which uniquely identifies the\n   control.\
    \  This prevents conflicts between control names.\n   The criticality field is\
    \ either TRUE or FALSE.\n   If the server recognizes the control type and it is\
    \ appropriate for\n   the operation, the server will make use of the control when\n\
    \   performing the operation.\n   If the server does not recognize the control\
    \ type and the criticality\n   field is TRUE, the server MUST NOT perform the\
    \ operation, and MUST\n   instead return the resultCode unsupportedCriticalExtension.\n\
    \   If the control is not appropriate for the operation and criticality\n   field\
    \ is TRUE, the server MUST NOT perform the operation, and MUST\n   instead return\
    \ the resultCode unsupportedCriticalExtension.\n   If the control is unrecognized\
    \ or inappropriate but the criticality\n   field is FALSE, the server MUST ignore\
    \ the control.\n   The controlValue contains any information associated with the\n\
    \   control, and its format is defined for the control.  The server MUST\n   be\
    \ prepared to handle arbitrary contents of the controlValue octet\n   string,\
    \ including zero bytes.  It is absent only if there is no value\n   information\
    \ which is associated with a control of its type.\n   This document does not define\
    \ any controls.  Controls may be defined\n   in other documents.  The definition\
    \ of a control consists of:\n     - the OBJECT IDENTIFIER assigned to the control,\n\
    \     - whether the control is always noncritical, always critical, or\n     \
    \  critical at the client's option,\n     - the format of the controlValue contents\
    \ of the control.\n   Servers list the controls which they recognize in the\n\
    \   supportedControl attribute in the root DSE.\n"
- title: 4.2. Bind Operation
  contents:
  - "4.2. Bind Operation\n   The function of the Bind Operation is to allow authentication\n\
    \   information to be exchanged between the client and server.\n   The Bind Request\
    \ is defined as follows:\n        BindRequest ::= [APPLICATION 0] SEQUENCE {\n\
    \                version                 INTEGER (1 .. 127),\n               \
    \ name                    LDAPDN,\n                authentication          AuthenticationChoice\
    \ }\n        AuthenticationChoice ::= CHOICE {\n                simple       \
    \           [0] OCTET STRING,\n                                         -- 1 and\
    \ 2 reserved\n                sasl                    [3] SaslCredentials }\n\
    \        SaslCredentials ::= SEQUENCE {\n                mechanism           \
    \    LDAPString,\n                credentials             OCTET STRING OPTIONAL\
    \ }\n   Parameters of the Bind Request are:\n   - version: A version number indicating\
    \ the version of the protocol to\n     be used in this protocol session.  This\
    \ document describes version\n     3 of the LDAP protocol.  Note that there is\
    \ no version negotiation,\n     and the client just sets this parameter to the\
    \ version it desires.\n     If the client requests protocol version 2, a server\
    \ that supports\n     the version 2 protocol as described in [2] will not return\
    \ any v3-\n     specific protocol fields.  (Note that not all LDAP servers will\n\
    \     support protocol version 2, since they may be unable to generate\n     the\
    \ attribute syntaxes associated with version 2.)\n   - name: The name of the directory\
    \ object that the client wishes to\n     bind as.  This field may take on a null\
    \ value (a zero length\n     string) for the purposes of anonymous binds, when\
    \ authentication\n     has been performed at a lower layer, or when using SASL\
    \ credentials\n     with a mechanism that includes the LDAPDN in the credentials.\n\
    \   - authentication: information used to authenticate the name, if any,\n   \
    \  provided in the Bind Request.\n   Upon receipt of a Bind Request, a protocol\
    \ server will authenticate\n   the requesting client, if necessary.  The server\
    \ will then return a\n   Bind Response to the client indicating the status of\
    \ the\n   authentication.\n   Authorization is the use of this authentication\
    \ information when\n   performing operations.  Authorization MAY be affected by\
    \ factors\n   outside of the LDAP Bind request, such as lower layer security\n\
    \   services.\n"
- title: 4.2.1. Sequencing of the Bind Request
  contents:
  - "4.2.1. Sequencing of the Bind Request\n   For some SASL authentication mechanisms,\
    \ it may be necessary for the\n   client to invoke the BindRequest multiple times.\
    \  If at any stage the\n   client wishes to abort the bind process it MAY unbind\
    \ and then drop\n   the underlying connection.  Clients MUST NOT invoke operations\n\
    \   between two Bind requests made as part of a multi-stage bind.\n   A client\
    \ may abort a SASL bind negotiation by sending a BindRequest\n   with a different\
    \ value in the mechanism field of SaslCredentials, or\n   an AuthenticationChoice\
    \ other than sasl.\n   If the client sends a BindRequest with the sasl mechanism\
    \ field as an\n   empty string, the server MUST return a BindResponse with\n \
    \  authMethodNotSupported as the resultCode.  This will allow clients to\n   abort\
    \ a negotiation if it wishes to try again with the same SASL\n   mechanism.\n\
    \   Unlike LDAP v2, the client need not send a Bind Request in the first\n   PDU\
    \ of the connection.  The client may request any operations and the\n   server\
    \ MUST treat these as unauthenticated. If the server requires\n   that the client\
    \ bind before browsing or modifying the directory, the\n   server MAY reject a\
    \ request other than binding, unbinding or an\n   extended request with the \"\
    operationsError\" result.\n   If the client did not bind before sending a request\
    \ and receives an\n   operationsError, it may then send a Bind Request.  If this\
    \ also fails\n   or the client chooses not to bind on the existing connection,\
    \ it will\n   close the connection, reopen it and begin again by first sending\
    \ a\n   PDU with a Bind Request.  This will aid in interoperating with\n   servers\
    \ implementing other versions of LDAP.\n   Clients MAY send multiple bind requests\
    \ on a connection to change\n   their credentials.  A subsequent bind process\
    \ has the effect of\n   abandoning all operations outstanding on the connection.\
    \  (This\n   simplifies server implementation.)  Authentication from earlier binds\n\
    \   are subsequently ignored, and so if the bind fails, the connection\n   will\
    \ be treated as anonymous. If a SASL transfer encryption or\n   integrity mechanism\
    \ has been negotiated, and that mechanism does not\n   support the changing of\
    \ credentials from one identity to another,\n   then the client MUST instead establish\
    \ a new connection.\n"
- title: 4.2.2. Authentication and Other Security Services
  contents:
  - "4.2.2. Authentication and Other Security Services\n   The simple authentication\
    \ option provides minimal authentication\n   facilities, with the contents of\
    \ the authentication field consisting\n   only of a cleartext password.  Note\
    \ that the use of cleartext\n   passwords is not recommended over open networks\
    \ when there is no\n   authentication or encryption being performed by a lower\
    \ layer; see\n   the \"Security Considerations\" section.\n   If no authentication\
    \ is to be performed, then the simple\n   authentication option MUST be chosen,\
    \ and the password be of zero\n   length.  (This is often done by LDAPv2 clients.)\
    \  Typically the DN is\n   also of zero length.\n   The sasl choice allows for\
    \ any mechanism defined for use with SASL\n   [12].  The mechanism field contains\
    \ the name of the mechanism.  The\n   credentials field contains the arbitrary\
    \ data used for\n   authentication, inside an OCTET STRING wrapper.  Note that\
    \ unlike\n   some Internet application protocols where SASL is used, LDAP is not\n\
    \   text-based, thus no base64 transformations are performed on the\n   credentials.\n\
    \   If any SASL-based integrity or confidentiality services are enabled,\n   they\
    \ take effect following the transmission by the server and\n   reception by the\
    \ client of the final BindResponse with resultCode\n   success.\n   The client\
    \ can request that the server use authentication information\n   from a lower\
    \ layer protocol by using the SASL EXTERNAL mechanism.\n"
- title: 4.2.3. Bind Response
  contents:
  - "4.2.3. Bind Response\n   The Bind Response is defined as follows.\n        BindResponse\
    \ ::= [APPLICATION 1] SEQUENCE {\n             COMPONENTS OF LDAPResult,\n   \
    \          serverSaslCreds    [7] OCTET STRING OPTIONAL }\n    BindResponse consists\
    \ simply of an indication from the server of he\n   status of the client's request\
    \ for authentication.\n   f the bind was successful, the resultCode will be success,\
    \ therwise\n   it will be one of:\n   - operationsError: server encountered an\
    \ internal error,\n   - protocolError: unrecognized version number or incorrect\
    \ PDU\n     structure,\n   - authMethodNotSupported: unrecognized SASL mechanism\
    \ name,\n   - strongAuthRequired: the server requires authentication be\n    \
    \ performed with a SASL mechanism,\n   - referral: this server cannot accept this\
    \ bind and the client\n     should try another,\n   - saslBindInProgress: the\
    \ server requires the client to send a\n     new bind request, with the same sasl\
    \ mechanism, to continue the\n     authentication process,\n   - inappropriateAuthentication:\
    \ the server requires the client\n     which had attempted to bind anonymously\
    \ or without supplying\n     credentials to provide some form of credentials,\n\
    \   - invalidCredentials: the wrong password was supplied or the SASL\n     credentials\
    \ could not be processed,\n   - unavailable: the server is shutting down.\n  \
    \ If the server does not support the client's requested protocol\n   version,\
    \ it MUST set the resultCode to protocolError.\n   If the client receives a BindResponse\
    \ response where the resultCode\n   was protocolError, it MUST close the connection\
    \ as the server will be\n   unwilling to accept further operations.  (This is\
    \ for compatibility\n   with earlier versions of LDAP, in which the bind was always\
    \ the first\n   operation, and there was no negotiation.)\n   The serverSaslCreds\
    \ are used as part of a SASL-defined bind mechanism\n   to allow the client to\
    \ authenticate the server to which it is\n   communicating, or to perform \"challenge-response\"\
    \ authentication. If\n   the client bound with the password choice, or the SASL\
    \ mechanism does\n   not require the server to return information to the client,\
    \ then this\n   field is not to be included in the result.\n"
- title: 4.3. Unbind Operation
  contents:
  - "4.3. Unbind Operation\n   The function of the Unbind Operation is to terminate\
    \ a protocol\n   session.  The Unbind Operation is defined as follows:\n     \
    \   UnbindRequest ::= [APPLICATION 2] NULL\n   The Unbind Operation has no response\
    \ defined. Upon transmission of an\n   UnbindRequest, a protocol client may assume\
    \ that the protocol session\n   is terminated. Upon receipt of an UnbindRequest,\
    \ a protocol server\n   may assume that the requesting client has terminated the\
    \ session and\n   that all outstanding requests may be discarded, and may close\
    \ the\n   connection.\n"
- title: 4.4. Unsolicited Notification
  contents:
  - "4.4. Unsolicited Notification\n   An unsolicited notification is an LDAPMessage\
    \ sent from the server to\n   the client which is not in response to any LDAPMessage\
    \ received by\n   the server. It is used to signal an extraordinary condition\
    \ in the\n   server or in the connection between the client and the server.  The\n\
    \   notification is of an advisory nature, and the server will not expect\n  \
    \ any response to be returned from the client.\n   The unsolicited notification\
    \ is structured as an LDAPMessage in which\n   the messageID is 0 and protocolOp\
    \ is of the extendedResp form.  The\n   responseName field of the ExtendedResponse\
    \ is present. The LDAPOID\n   value MUST be unique for this notification, and\
    \ not be used in any\n   other situation.\n   One unsolicited notification is\
    \ defined in this document.\n"
- title: 4.4.1. Notice of Disconnection
  contents:
  - "4.4.1. Notice of Disconnection\n   This notification may be used by the server\
    \ to advise the client that\n   the server is about to close the connection due\
    \ to an error\n   condition.  Note that this notification is NOT a response to\
    \ an\n   unbind requested by the client: the server MUST follow the procedures\n\
    \   of section 4.3. This notification is intended to assist clients in\n   distinguishing\
    \ between an error condition and a transient network\n   failure.  As with a connection\
    \ close due to network failure, the\n   client MUST NOT assume that any outstanding\
    \ requests which modified\n   the directory have succeeded or failed.\n   The\
    \ responseName is 1.3.6.1.4.1.1466.20036, the response field is\n   absent, and\
    \ the resultCode is used to indicate the reason for the\n   disconnection.\n \
    \  The following resultCode values are to be used in this notification:\n   -\
    \ protocolError: The server has received data from the client in\n   which\n \
    \    the LDAPMessage structure could not be parsed.\n   - strongAuthRequired:\
    \ The server has detected that an established\n     underlying security association\
    \ protecting communication between\n     the client and server has unexpectedly\
    \ failed or been compromised.\n   - unavailable: This server will stop accepting\
    \ new connections and\n     operations on all existing connections, and be unavailable\
    \ for an\n     extended period of time.  The client may make use of an alternative\n\
    \     server.\n   After sending this notice, the server MUST close the connection.\n\
    \   After receiving this notice, the client MUST NOT transmit any further\n  \
    \ on the connection, and may abruptly close the connection.\n"
- title: 4.5. Search Operation
  contents:
  - "4.5. Search Operation\n   The Search Operation allows a client to request that\
    \ a search be\n   performed on its behalf by a server.  This can be used to read\n\
    \   attributes from a single entry, from entries immediately below a\n   particular\
    \ entry, or a whole subtree of entries.\n"
- title: 4.5.1. Search Request
  contents:
  - "4.5.1. Search Request\n   The Search Request is defined as follows:\n       \
    \ SearchRequest ::= [APPLICATION 3] SEQUENCE {\n                baseObject   \
    \   LDAPDN,\n                scope           ENUMERATED {\n                  \
    \      baseObject              (0),\n                        singleLevel     \
    \        (1),\n                        wholeSubtree            (2) },\n      \
    \          derefAliases    ENUMERATED {\n                        neverDerefAliases\
    \       (0),\n                        derefInSearching        (1),\n         \
    \               derefFindingBaseObj     (2),\n                        derefAlways\
    \             (3) },\n                sizeLimit       INTEGER (0 .. maxInt),\n\
    \                timeLimit       INTEGER (0 .. maxInt),\n                typesOnly\
    \       BOOLEAN,\n                filter          Filter,\n                attributes\
    \      AttributeDescriptionList }\n        Filter ::= CHOICE {\n             \
    \   and             [0] SET OF Filter,\n                or              [1] SET\
    \ OF Filter,\n                not             [2] Filter,\n                equalityMatch\
    \   [3] AttributeValueAssertion,\n                substrings      [4] SubstringFilter,\n\
    \                greaterOrEqual  [5] AttributeValueAssertion,\n              \
    \  lessOrEqual     [6] AttributeValueAssertion,\n                present     \
    \    [7] AttributeDescription,\n                approxMatch     [8] AttributeValueAssertion,\n\
    \                extensibleMatch [9] MatchingRuleAssertion }\n        SubstringFilter\
    \ ::= SEQUENCE {\n                type            AttributeDescription,\n    \
    \            -- at least one must be present\n                substrings     \
    \ SEQUENCE OF CHOICE {\n                        initial [0] LDAPString,\n    \
    \                    any     [1] LDAPString,\n                        final  \
    \ [2] LDAPString } }\n        MatchingRuleAssertion ::= SEQUENCE {\n         \
    \       matchingRule    [1] MatchingRuleId OPTIONAL,\n                type   \
    \         [2] AttributeDescription OPTIONAL,\n                matchValue     \
    \ [3] AssertionValue,\n                dnAttributes    [4] BOOLEAN DEFAULT FALSE\
    \ }\n   Parameters of the Search Request are:\n   - baseObject: An LDAPDN that\
    \ is the base object entry relative to\n     which the search is to be performed.\n\
    \   - scope: An indicator of the scope of the search to be performed. The\n  \
    \   semantics of the possible values of this field are identical to the\n    \
    \ semantics of the scope field in the X.511 Search Operation.\n   - derefAliases:\
    \ An indicator as to how alias objects (as defined in\n     X.501) are to be handled\
    \ in searching.  The semantics of the\n     possible values of this field are:\n\
    \             neverDerefAliases: do not dereference aliases in searching\n   \
    \          or in locating the base object of the search;\n             derefInSearching:\
    \ dereference aliases in subordinates of\n             the base object in searching,\
    \ but not in locating the\n             base object of the search;\n         \
    \    derefFindingBaseObj: dereference aliases in locating\n             the base\
    \ object of the search, but not when searching\n             subordinates of the\
    \ base object;\n             derefAlways: dereference aliases both in searching\
    \ and in\n             locating the base object of the search.\n   - sizelimit:\
    \ A sizelimit that restricts the maximum number of entries\n     to be returned\
    \ as a result of the search. A value of 0 in this\n     field indicates that no\
    \ client-requested sizelimit restrictions are\n     in effect for the search.\
    \  Servers may enforce a maximum number of\n     entries to return.\n   - timelimit:\
    \ A timelimit that restricts the maximum time (in seconds)\n     allowed for a\
    \ search. A value of 0 in this field indicates that no\n     client-requested\
    \ timelimit restrictions are in effect for the\n     search.\n   - typesOnly:\
    \ An indicator as to whether search results will contain\n     both attribute\
    \ types and values, or just attribute types.  Setting\n     this field to TRUE\
    \ causes only attribute types (no values) to be\n     returned.  Setting this\
    \ field to FALSE causes both attribute types\n     and values to be returned.\n\
    \   - filter: A filter that defines the conditions that must be fulfilled\n  \
    \   in order for the search to match a given entry.\n     The 'and', 'or' and\
    \ 'not' choices can be used to form combinations of\n     filters. At least one\
    \ filter element MUST be present in an 'and' or\n     'or' choice.  The others\
    \ match against individual attribute values of\n     entries in the scope of the\
    \ search.  (Implementor's note: the 'not'\n     filter is an example of a tagged\
    \ choice in an implicitly-tagged\n     module.  In BER this is treated as if the\
    \ tag was explicit.)\n     A server MUST evaluate filters according to the three-valued\
    \ logic\n     of X.511(93) section 7.8.1.  In summary, a filter is evaluated to\n\
    \     either \"TRUE\", \"FALSE\" or \"Undefined\".  If the filter evaluates\n\
    \     to TRUE for a particular entry, then the attributes of that entry\n    \
    \ are returned as part of the search result (subject to any applicable\n     access\
    \ control restrictions). If the filter evaluates to FALSE or\n     Undefined,\
    \ then the entry is ignored for the search.\n     A filter of the \"and\" choice\
    \ is TRUE if all the filters in the SET\n     OF evaluate to TRUE, FALSE if at\
    \ least one filter is FALSE, and\n     otherwise Undefined.  A filter of the \"\
    or\" choice is FALSE if all\n     of the filters in the SET OF evaluate to FALSE,\
    \ TRUE if at least\n     one filter is TRUE, and Undefined otherwise.  A filter\
    \ of the \"not\"\n     choice is TRUE if the filter being negated is FALSE, FALSE\
    \ if it is\n     TRUE, and Undefined if it is Undefined.\n     The present match\
    \ evaluates to TRUE where there is an attribute or\n     subtype of the specified\
    \ attribute description present in an entry,\n     and FALSE otherwise (including\
    \ a presence test with an unrecognized\n     attribute description.)\n     The\
    \ extensibleMatch is new in this version of LDAP.  If the\n     matchingRule field\
    \ is absent, the type field MUST be present, and\n     the equality match is performed\
    \ for that type.  If the type field is\n     absent and matchingRule is present,\
    \ the matchValue is compared\n     against all attributes in an entry which support\
    \ that matchingRule,\n     and the matchingRule determines the syntax for the\
    \ assertion value\n     (the filter item evaluates to TRUE if it matches with\
    \ at least\n     one attribute in the entry, FALSE if it does not match any attribute\n\
    \     in the entry, and Undefined if the matchingRule is not recognized\n    \
    \ or the assertionValue cannot be parsed.)  If the type field is\n     present\
    \ and matchingRule is present, the matchingRule MUST be one\n     permitted for\
    \ use with that type, otherwise the filter item is\n     undefined.  If the dnAttributes\
    \ field is set to TRUE, the match is\n     applied against all the attributes\
    \ in an entry's distinguished name\n     as well, and also evaluates to TRUE if\
    \ there is at least one\n     attribute in the distinguished name for which the\
    \ filter item\n     evaluates to TRUE.  (Editors note: The dnAttributes field\
    \ is present\n     so that there does not need to be multiple versions of generic\n\
    \     matching rules such as for word matching, one to apply to entries\n    \
    \ and another to apply to entries and dn attributes as well).\n     A filter item\
    \ evaluates to Undefined when the server would not\n     be able to determine\
    \ whether the assertion value matches an\n     entry.  If an attribute description\
    \ in an equalityMatch, substrings,\n     greaterOrEqual, lessOrEqual, approxMatch\
    \ or extensibleMatch\n     filter is not recognized by the server, a matching\
    \ rule id in the\n     extensibleMatch is not recognized by the server, the assertion\n\
    \     value cannot be parsed, or the type of filtering requested is not\n    \
    \ implemented, then the filter is Undefined.  Thus for example if a\n     server\
    \ did not recognize the attribute type shoeSize, a filter of\n     (shoeSize=*)\
    \ would evaluate to FALSE, and the filters (shoeSize=12),\n     (shoeSize>=12)\
    \ and (shoeSize<=12) would evaluate to Undefined.\n     Servers MUST NOT return\
    \ errors if attribute descriptions or matching\n     rule ids are not recognized,\
    \ or assertion values cannot be parsed.\n     More details of filter processing\
    \ are given in section 7.8 of X.511\n     [8].\n   - attributes: A list of the\
    \ attributes to be returned from each entry\n     which matches the search filter.\
    \ There are two special values which\n     may be used: an empty list with no\
    \ attributes, and the attribute\n     description string \"*\".  Both of these\
    \ signify that all user\n     attributes are to be returned.  (The \"*\" allows\
    \ the client to\n     request all user attributes in addition to specific operational\n\
    \     attributes).\n     Attributes MUST be named at most once in the list, and\
    \ are returned\n     at most once in an entry.   If there are attribute descriptions\
    \ in\n     the list which are not recognized, they are ignored by the server.\n\
    \     If the client does not want any attributes returned, it can specify\n  \
    \   a list containing only the attribute with OID \"1.1\".  This OID was\n   \
    \  chosen arbitrarily and does not correspond to any attribute in use.\n     Client\
    \ implementors should note that even if all user attributes are\n     requested,\
    \ some attributes of the entry may not be included in\n     search results due\
    \ to access control or other restrictions.\n     Furthermore, servers will not\
    \ return operational attributes, such\n     as objectClasses or attributeTypes,\
    \ unless they are listed by name,\n     since there may be extremely large number\
    \ of values for certain\n     operational attributes. (A list of operational attributes\
    \ for use\n     in LDAP is given in [5].)\n   Note that an X.500 \"list\"-like\
    \ operation can be emulated by the client\n   requesting a one-level LDAP search\
    \ operation with a filter checking\n   for the existence of the objectClass attribute,\
    \ and that an X.500\n   \"read\"-like operation can be emulated by a base object\
    \ LDAP search\n   operation with the same filter.  A server which provides a gateway\
    \ to\n   X.500 is not required to use the Read or List operations, although it\n\
    \   may choose to do so, and if it does must provide the same semantics\n   as\
    \ the X.500 search operation.\n"
- title: 4.5.2. Search Result
  contents:
  - "4.5.2. Search Result\n   The results of the search attempted by the server upon\
    \ receipt of a\n   Search Request are returned in Search Responses, which are\
    \ LDAP\n   messages containing either SearchResultEntry, SearchResultReference,\n\
    \   ExtendedResponse or SearchResultDone data types.\n        SearchResultEntry\
    \ ::= [APPLICATION 4] SEQUENCE {\n                objectName      LDAPDN,\n  \
    \              attributes      PartialAttributeList }\n        PartialAttributeList\
    \ ::= SEQUENCE OF SEQUENCE {\n                type    AttributeDescription,\n\
    \                vals    SET OF AttributeValue }\n        -- implementors should\
    \ note that the PartialAttributeList may\n        -- have zero elements (if none\
    \ of the attributes of that entry\n        -- were requested, or could be returned),\
    \ and that the vals set\n        -- may also have zero elements (if types only\
    \ was requested, or\n        -- all values were excluded from the result.)\n \
    \       SearchResultReference ::= [APPLICATION 19] SEQUENCE OF LDAPURL\n     \
    \   -- at least one LDAPURL element must be present\n        SearchResultDone\
    \ ::= [APPLICATION 5] LDAPResult\n   Upon receipt of a Search Request, a server\
    \ will perform the necessary\n   search of the DIT.\n   If the LDAP session is\
    \ operating over a connection-oriented transport\n   such as TCP, the server will\
    \ return to the client a sequence of\n   responses in separate LDAP messages.\
    \  There may be zero or more\n   responses containing SearchResultEntry, one for\
    \ each entry found\n   during the search.  There may also be zero or more responses\n\
    \   containing SearchResultReference, one for each area not explored by\n   this\
    \ server during the search.  The SearchResultEntry and\n   SearchResultReference\
    \ PDUs may come in any order. Following all the\n   SearchResultReference responses\
    \ and all SearchResultEntry responses\n   to be returned by the server, the server\
    \ will return a response\n   containing the SearchResultDone, which contains an\
    \ indication of\n   success, or detailing any errors that have occurred.\n   Each\
    \ entry returned in a SearchResultEntry will contain all\n   attributes, complete\
    \ with associated values if necessary, as\n   specified in the attributes field\
    \ of the Search Request.  Return of\n   attributes is subject to access control\
    \ and other administrative\n   policy.  Some attributes may be returned in binary\
    \ format (indicated\n   by the AttributeDescription in the response having the\
    \ binary option\n   present).\n   Some attributes may be constructed by the server\
    \ and appear in a\n   SearchResultEntry attribute list, although they are not\
    \ stored\n   attributes of an entry. Clients MUST NOT assume that all attributes\n\
    \   can be modified, even if permitted by access control.\n   LDAPMessage responses\
    \ of the ExtendedResponse form are reserved for\n   returning information associated\
    \ with a control requested by the\n   client.  These may be defined in future\
    \ versions of this document.\n"
- title: 4.5.3. Continuation References in the Search Result
  contents:
  - "4.5.3. Continuation References in the Search Result\n   If the server was able\
    \ to locate the entry referred to by the\n   baseObject but was unable to search\
    \ all the entries in the scope at\n   and under the baseObject, the server may\
    \ return one or more\n   SearchResultReference, each containing a reference to\
    \ another set of\n   servers for continuing the operation.  A server MUST NOT\
    \ return any\n   SearchResultReference if it has not located the baseObject and\n\
    \   thus has not searched any entries; in this case it would return a\n   SearchResultDone\
    \ containing a referral resultCode.\n   In the absence of indexing information\
    \ provided to a server from\n   servers holding subordinate naming contexts, SearchResultReference\n\
    \   responses are not affected by search filters and are always returned\n   when\
    \ in scope.\n   The SearchResultReference is of the same data type as the Referral.\n\
    \   URLs for servers implementing the LDAP protocol are written according\n  \
    \ to [9].  The <dn> part MUST be present in the URL, with the new target\n   object\
    \ name.  The client MUST use this name in its next request.\n   Some servers (e.g.\
    \ part of a distributed index exchange system) may\n   provide a different filter\
    \ in the URLs of the SearchResultReference.\n   If the filter part of the URL\
    \ is present in an LDAP URL, the client\n   MUST use the new filter in its next\
    \ request to progress the search,\n   and if the filter part is absent the client\
    \ will use again the same\n   filter.  Other aspects of the new search request\
    \ may be the same or\n   different as the search which generated the continuation\
    \ references.\n   Other kinds of URLs may be returned so long as the operation\
    \ could be\n   performed using that protocol.\n   The name of an unexplored subtree\
    \ in a SearchResultReference need not\n   be subordinate to the base object.\n\
    \   In order to complete the search, the client MUST issue a new search\n   operation\
    \ for each SearchResultReference that is returned.  Note that\n   the abandon\
    \ operation described in section 4.11 applies only to a\n   particular operation\
    \ sent on a connection between a client and server,\n   and if the client has\
    \ multiple outstanding search operations to\n   different servers, it MUST abandon\
    \ each operation individually.\n"
- title: 4.5.3.1. Example
  contents:
  - "4.5.3.1. Example\n   For example, suppose the contacted server (hosta) holds\
    \ the entry\n   \"O=MNN,C=WW\" and the entry \"CN=Manager,O=MNN,C=WW\".  It knows\
    \ that\n   either LDAP-capable servers (hostb) or (hostc) hold\n   \"OU=People,O=MNN,C=WW\"\
    \ (one is the master and the other server a\n   shadow), and that LDAP-capable\
    \ server (hostd) holds the subtree\n   \"OU=Roles,O=MNN,C=WW\".  If a subtree\
    \ search of \"O=MNN,C=WW\" is\n   requested to the contacted server, it may return\
    \ the following:\n     SearchResultEntry for O=MNN,C=WW\n     SearchResultEntry\
    \ for CN=Manager,O=MNN,C=WW\n     SearchResultReference {\n       ldap://hostb/OU=People,O=MNN,C=WW\n\
    \       ldap://hostc/OU=People,O=MNN,C=WW\n     }\n     SearchResultReference\
    \ {\n       ldap://hostd/OU=Roles,O=MNN,C=WW\n     }\n     SearchResultDone (success)\n\
    \   Client implementors should note that when following a\n   SearchResultReference,\
    \ additional SearchResultReference may be\n   generated.  Continuing the example,\
    \ if the client contacted the\n   server (hostb) and issued the search for the\
    \ subtree\n   \"OU=People,O=MNN,C=WW\", the server might respond as follows:\n\
    \     SearchResultEntry for OU=People,O=MNN,C=WW\n     SearchResultReference {\n\
    \      ldap://hoste/OU=Managers,OU=People,O=MNN,C=WW\n     }\n     SearchResultReference\
    \ {\n      ldap://hostf/OU=Consultants,OU=People,O=MNN,C=WW\n     }\n     SearchResultDone\
    \ (success)\n   If the contacted server does not hold the base object for the\
    \ search,\n   then it will return a referral to the client.  For example, if the\n\
    \   client requests a subtree search of \"O=XYZ,C=US\" to hosta, the server\n\
    \   may return only a SearchResultDone containing a referral.\n     SearchResultDone\
    \ (referral) {\n       ldap://hostg/\n     }\n"
- title: 4.6. Modify Operation
  contents:
  - "4.6. Modify Operation\n   The Modify Operation allows a client to request that\
    \ a modification\n   of an entry be performed on its behalf by a server.  The\
    \ Modify\n   Request is defined as follows:\n        ModifyRequest ::= [APPLICATION\
    \ 6] SEQUENCE {\n                object          LDAPDN,\n                modification\
    \    SEQUENCE OF SEQUENCE {\n                        operation       ENUMERATED\
    \ {\n                                                add     (0),\n          \
    \                                      delete  (1),\n                        \
    \                        replace (2) },\n                        modification\
    \    AttributeTypeAndValues } }\n        AttributeTypeAndValues ::= SEQUENCE {\n\
    \                type    AttributeDescription,\n                vals    SET OF\
    \ AttributeValue }\n   Parameters of the Modify Request are:\n   - object: The\
    \ object to be modified. The value of this field contains\n     the DN of the\
    \ entry to be modified.  The server will not perform\n     any alias dereferencing\
    \ in determining the object to be modified.\n   - modification: A list of modifications\
    \ to be performed on the entry.\n     The entire list of entry modifications MUST\
    \ be performed\n     in the order they are listed, as a single atomic operation.\
    \  While\n     individual modifications may violate the directory schema, the\n\
    \     resulting entry after the entire list of modifications is performed\n  \
    \   MUST conform to the requirements of the directory schema. The\n     values\
    \ that may be taken on by the 'operation' field in each\n     modification construct\
    \ have the following semantics respectively:\n             add: add values listed\
    \ to the given attribute, creating\n             the attribute if necessary;\n\
    \             delete: delete values listed from the given attribute,\n       \
    \      removing the entire attribute if no values are listed, or\n           \
    \  if all current values of the attribute are listed for\n             deletion;\n\
    \             replace: replace all existing values of the given attribute\n  \
    \           with the new values listed, creating the attribute if it\n       \
    \      did not already exist.  A replace with no value will delete\n         \
    \    the entire attribute if it exists, and is ignored if the\n             attribute\
    \ does not exist.\n   The result of the modify attempted by the server upon receipt\
    \ of a\n   Modify Request is returned in a Modify Response, defined as follows:\n\
    \        ModifyResponse ::= [APPLICATION 7] LDAPResult\n   Upon receipt of a Modify\
    \ Request, a server will perform the necessary\n   modifications to the DIT.\n\
    \   The server will return to the client a single Modify Response\n   indicating\
    \ either the successful completion of the DIT modification,\n   or the reason\
    \ that the modification failed. Note that due to the\n   requirement for atomicity\
    \ in applying the list of modifications in\n   the Modify Request, the client\
    \ may expect that no modifications of\n   the DIT have been performed if the Modify\
    \ Response received indicates\n   any sort of error, and that all requested modifications\
    \ have been\n   performed if the Modify Response indicates successful completion\
    \ of\n   the Modify Operation.  If the connection fails, whether the\n   modification\
    \ occurred or not is indeterminate.\n   The Modify Operation cannot be used to\
    \ remove from an entry any of\n   its distinguished values, those values which\
    \ form the entry's\n   relative distinguished name.  An attempt to do so will\
    \ result in the\n   server returning the error notAllowedOnRDN.  The Modify DN\
    \ Operation\n   described in section 4.9 is used to rename an entry.\n   If an\
    \ equality match filter has not been defined for an attribute type,\n   clients\
    \ MUST NOT attempt to delete individual values of that attribute\n   from an entry\
    \ using the \"delete\" form of a modification, and MUST\n   instead use the \"\
    replace\" form.\n   Note that due to the simplifications made in LDAP, there is\
    \ not a\n   direct mapping of the modifications in an LDAP ModifyRequest onto\
    \ the\n   EntryModifications of a DAP ModifyEntry operation, and different\n \
    \  implementations of LDAP-DAP gateways may use different means of\n   representing\
    \ the change.  If successful, the final effect of the\n   operations on the entry\
    \ MUST be identical.\n"
- title: 4.7. Add Operation
  contents:
  - "4.7. Add Operation\n   The Add Operation allows a client to request the addition\
    \ of an entry\n   into the directory. The Add Request is defined as follows:\n\
    \        AddRequest ::= [APPLICATION 8] SEQUENCE {\n                entry    \
    \       LDAPDN,\n                attributes      AttributeList }\n        AttributeList\
    \ ::= SEQUENCE OF SEQUENCE {\n                type    AttributeDescription,\n\
    \                vals    SET OF AttributeValue }\n   Parameters of the Add Request\
    \ are:\n   - entry: the Distinguished Name of the entry to be added. Note that\n\
    \     the server will not dereference any aliases in locating the entry\n    \
    \ to be added.\n   - attributes: the list of attributes that make up the content\
    \ of the\n     entry being added.  Clients MUST include distinguished values\n\
    \     (those forming the entry's own RDN) in this list, the objectClass\n    \
    \ attribute, and values of any mandatory attributes of the listed\n     object\
    \ classes.  Clients MUST NOT supply the createTimestamp or\n     creatorsName\
    \ attributes, since these will be generated\n     automatically by the server.\n\
    \   The entry named in the entry field of the AddRequest MUST NOT exist\n   for\
    \ the AddRequest to succeed.  The parent of the entry to be added\n   MUST exist.\
    \  For example, if the client attempted to add\n   \"CN=JS,O=Foo,C=US\", the \"\
    O=Foo,C=US\" entry did not exist, and the\n   \"C=US\" entry did exist, then the\
    \ server would return the error\n   noSuchObject with the matchedDN field containing\
    \ \"C=US\".  If the\n   parent entry exists but is not in a naming context held\
    \ by the\n   server, the server SHOULD return a referral to the server holding\
    \ the\n   parent entry.\n   Servers implementations SHOULD NOT restrict where\
    \ entries can be\n   located in the directory.  Some servers MAY allow the administrator\n\
    \   to restrict the classes of entries which can be added to the\n   directory.\n\
    \   Upon receipt of an Add Request, a server will attempt to perform the\n   add\
    \ requested.  The result of the add attempt will be returned to the\n   client\
    \ in the Add Response, defined as follows:\n        AddResponse ::= [APPLICATION\
    \ 9] LDAPResult\n   A response of success indicates that the new entry is present\
    \ in the\n   directory.\n"
- title: 4.8. Delete Operation
  contents:
  - "4.8. Delete Operation\n   The Delete Operation allows a client to request the\
    \ removal of an\n   entry from the directory. The Delete Request is defined as\
    \ follows:\n        DelRequest ::= [APPLICATION 10] LDAPDN\n   The Delete Request\
    \ consists of the Distinguished Name of the entry to\n   be deleted. Note that\
    \ the server will not dereference aliases while\n   resolving the name of the\
    \ target entry to be removed, and that only\n   leaf entries (those with no subordinate\
    \ entries) can be deleted with\n   this operation.\n   The result of the delete\
    \ attempted by the server upon receipt of a\n   Delete Request is returned in\
    \ the Delete Response, defined as\n   follows:\n        DelResponse ::= [APPLICATION\
    \ 11] LDAPResult\n   Upon receipt of a Delete Request, a server will attempt to\
    \ perform\n   the entry removal requested. The result of the delete attempt will\
    \ be\n   returned to the client in the Delete Response.\n"
- title: 4.9. Modify DN Operation
  contents:
  - "4.9. Modify DN Operation\n   The Modify DN Operation allows a client to change\
    \ the leftmost (least\n   significant) component of the name of an entry in the\
    \ directory, or\n   to move a subtree of entries to a new location in the directory.\
    \  The\n   Modify DN Request is defined as follows:\n        ModifyDNRequest ::=\
    \ [APPLICATION 12] SEQUENCE {\n                entry           LDAPDN,\n     \
    \           newrdn          RelativeLDAPDN,\n                deleteoldrdn    BOOLEAN,\n\
    \                newSuperior     [0] LDAPDN OPTIONAL }\n   Parameters of the Modify\
    \ DN Request are:\n   - entry: the Distinguished Name of the entry to be changed.\
    \  This\n     entry may or may not have subordinate entries.\n   - newrdn: the\
    \ RDN that will form the leftmost component of the new\n     name of the entry.\n\
    \   - deleteoldrdn: a boolean parameter that controls whether the old RDN\n  \
    \   attribute values are to be retained as attributes of the entry, or\n     deleted\
    \ from the entry.\n   - newSuperior: if present, this is the Distinguished Name\
    \ of the entry\n     which becomes the immediate superior of the existing entry.\n\
    \   The result of the name change attempted by the server upon receipt of\n  \
    \ a Modify DN Request is returned in the Modify DN Response, defined\n   as follows:\n\
    \        ModifyDNResponse ::= [APPLICATION 13] LDAPResult\n   Upon receipt of\
    \ a ModifyDNRequest, a server will attempt to\n   perform the name change. The\
    \ result of the name change attempt will\n   be returned to the client in the\
    \ Modify DN Response.\n   For example, if the entry named in the \"entry\" parameter\
    \ was\n   \"cn=John Smith,c=US\", the newrdn parameter was \"cn=John Cougar Smith\"\
    ,\n   and the newSuperior parameter was absent, then this operation would\n  \
    \ attempt to rename the entry to be \"cn=John Cougar Smith,c=US\".  If\n   there\
    \ was already an entry with that name, the operation would fail\n   with error\
    \ code entryAlreadyExists.\n   If the deleteoldrdn parameter is TRUE, the values\
    \ forming the old\n   RDN are deleted from the entry.  If the deleteoldrdn parameter\
    \ is\n   FALSE, the values forming the old RDN will be retained as\n   non-distinguished\
    \ attribute values of the entry.  The server may\n   not perform the operation\
    \ and return an error code if the setting of\n   the deleteoldrdn parameter would\
    \ cause a schema inconsistency in the\n   entry.\n   Note that X.500 restricts\
    \ the ModifyDN operation to only affect\n   entries that are contained within\
    \ a single server.  If the LDAP\n   server is mapped onto DAP, then this restriction\
    \ will apply, and the\n   resultCode affectsMultipleDSAs will be returned if this\
    \ error\n   occurred.  In general clients MUST NOT expect to be able to perform\n\
    \   arbitrary movements of entries and subtrees between servers.\n"
- title: 4.10. Compare Operation
  contents:
  - "4.10. Compare Operation\n   The Compare Operation allows a client to compare\
    \ an assertion\n   provided with an entry in the directory. The Compare Request\
    \ is\n   defined as follows:\n        CompareRequest ::= [APPLICATION 14] SEQUENCE\
    \ {\n                entry           LDAPDN,\n                ava            \
    \ AttributeValueAssertion }\n   Parameters of the Compare Request are:\n   - entry:\
    \ the name of the entry to be compared with.\n   - ava: the assertion with which\
    \ an attribute in the entry is to be\n     compared.\n   The result of the compare\
    \ attempted by the server upon receipt of a\n   Compare Request is returned in\
    \ the Compare Response, defined as\n   follows:\n        CompareResponse ::= [APPLICATION\
    \ 15] LDAPResult\n   Upon receipt of a Compare Request, a server will attempt\
    \ to perform\n   the requested comparison. The result of the comparison will be\n\
    \   returned to the client in the Compare Response. Note that errors and\n   the\
    \ result of comparison are all returned in the same construct.\n   Note that some\
    \ directory systems may establish access controls which\n   permit the values\
    \ of certain attributes (such as userPassword) to be\n   compared but not read.\
    \  In a search result, it may be that an\n   attribute of that type would be returned,\
    \ but with an empty set of\n   values.\n"
- title: 4.11. Abandon Operation
  contents:
  - "4.11. Abandon Operation\n   The function of the Abandon Operation is to allow\
    \ a client to request\n   that the server abandon an outstanding operation.  The\
    \ Abandon\n   Request is defined as follows:\n        AbandonRequest ::= [APPLICATION\
    \ 16] MessageID\n   The MessageID MUST be that of a an operation which was requested\n\
    \   earlier in this connection.\n   (The abandon request itself has its own message\
    \ id.  This is distinct\n    from the id of the earlier operation being abandoned.)\n\
    \   There is no response defined in the Abandon Operation. Upon\n   transmission\
    \ of an Abandon Operation, a client may expect that the\n   operation identified\
    \ by the Message ID in the Abandon Request has\n   been abandoned. In the event\
    \ that a server receives an Abandon\n   Request on a Search Operation in the midst\
    \ of transmitting responses\n   to the search, that server MUST cease transmitting\
    \ entry responses to\n   the abandoned request immediately, and MUST NOT send\
    \ the\n   SearchResponseDone.  Of course, the server MUST ensure that only\n \
    \  properly encoded LDAPMessage PDUs are transmitted.\n   Clients MUST NOT send\
    \ abandon requests for the same operation\n   multiple times, and MUST also be\
    \ prepared to receive results from\n   operations it has abandoned (since these\
    \ may have been in transit\n   when the abandon was requested).\n   Servers MUST\
    \ discard abandon requests for message IDs they do not\n   recognize, for operations\
    \ which cannot be abandoned, and for\n   operations which have already been abandoned.\n"
- title: 4.12. Extended Operation
  contents:
  - "4.12. Extended Operation\n   An extension mechanism has been added in this version\
    \ of LDAP, in\n   order to allow additional operations to be defined for services\
    \ not\n   available elsewhere in this protocol, for instance digitally signed\n\
    \   operations and results.\n   The extended operation allows clients to make\
    \ requests and receive\n   responses with predefined syntaxes and semantics. \
    \ These may be\n   defined in RFCs or be private to particular implementations.\
    \  Each\n   request MUST have a unique OBJECT IDENTIFIER assigned to it.\n   \
    \     ExtendedRequest ::= [APPLICATION 23] SEQUENCE {\n                requestName\
    \      [0] LDAPOID,\n                requestValue     [1] OCTET STRING OPTIONAL\
    \ }\n   The requestName is a dotted-decimal representation of the OBJECT\n   IDENTIFIER\
    \ corresponding to the request. The requestValue is\n   information in a form\
    \ defined by that request, encapsulated inside an\n   OCTET STRING.\n   The server\
    \ will respond to this with an LDAPMessage containing the\n   ExtendedResponse.\n\
    \        ExtendedResponse ::= [APPLICATION 24] SEQUENCE {\n                COMPONENTS\
    \ OF LDAPResult,\n                responseName     [10] LDAPOID OPTIONAL,\n  \
    \              response         [11] OCTET STRING OPTIONAL }\n   If the server\
    \ does not recognize the request name, it MUST return\n   only the response fields\
    \ from LDAPResult, containing the\n   protocolError result code.\n"
- title: 5.  Protocol Element Encodings and Transfer
  contents:
  - "5.  Protocol Element Encodings and Transfer\n   One underlying service is defined\
    \ here.  Clients and servers SHOULD\n   implement the mapping of LDAP over TCP\
    \ described in 5.2.1.\n"
- title: 5.1. Mapping Onto BER-based Transport Services
  contents:
  - "5.1. Mapping Onto BER-based Transport Services\n   The protocol elements of LDAP\
    \ are encoded for exchange using the\n   Basic Encoding Rules (BER) [11] of ASN.1\
    \ [3]. However, due to the\n   high overhead involved in using certain elements\
    \ of the BER, the\n   following additional restrictions are placed on BER-encodings\
    \ of LDAP\n   protocol elements:\n   (1) Only the definite form of length encoding\
    \ will be used.\n   (2) OCTET STRING values will be encoded in the primitive form\
    \ only.\n   (3) If the value of a BOOLEAN type is true, the encoding MUST have\n\
    \       its contents octets set to hex \"FF\".\n   (4) If a value of a type is\
    \ its default value, it MUST be absent.\n       Only some BOOLEAN and INTEGER\
    \ types have default values in this\n       protocol definition.\n   These restrictions\
    \ do not apply to ASN.1 types encapsulated inside of\n   OCTET STRING values,\
    \ such as attribute values, unless otherwise\n   noted.\n"
- title: 5.2. Transfer Protocols
  contents:
  - "5.2. Transfer Protocols\n   This protocol is designed to run over connection-oriented,\
    \ reliable\n   transports, with all 8 bits in an octet being significant in the\
    \ data\n   stream.\n"
- title: 5.2.1. Transmission Control Protocol (TCP)
  contents:
  - "5.2.1. Transmission Control Protocol (TCP)\n   The LDAPMessage PDUs are mapped\
    \ directly onto the TCP bytestream.  It\n   is recommended that server implementations\
    \ running over the TCP MAY\n   provide a protocol listener on the assigned port,\
    \ 389.  Servers may\n   instead provide a listener on a different port number.\
    \ Clients MUST\n   support contacting servers on any valid TCP port.\n"
- title: 6.  Implementation Guidelines
  contents:
  - "6.  Implementation Guidelines\n   This document describes an Internet protocol.\n"
- title: 6.1. Server Implementations
  contents:
  - "6.1. Server Implementations\n   The server MUST be capable of recognizing all\
    \ the mandatory attribute\n   type names and implement the syntaxes specified\
    \ in [5].  Servers MAY\n   also recognize additional attribute type names.\n"
- title: 6.2. Client Implementations
  contents:
  - "6.2. Client Implementations\n   Clients which request referrals MUST ensure that\
    \ they do not loop\n   between servers. They MUST NOT repeatedly contact the same\
    \ server for\n   the same request with the same target entry name, scope and filter.\n\
    \   Some clients may be using a counter that is incremented each time\n   referral\
    \ handling occurs for an operation, and these kinds of clients\n   MUST be able\
    \ to handle a DIT with at least ten layers of naming\n   contexts between the\
    \ root and a leaf entry.\n   In the absence of prior agreements with servers,\
    \ clients SHOULD NOT\n   assume that servers support any particular schemas beyond\
    \ those\n   referenced in section 6.1. Different schemas can have different\n\
    \   attribute types with the same names.  The client can retrieve the\n   subschema\
    \ entries referenced by the subschemaSubentry attribute in\n   the server's root\
    \ DSE or in entries held by the server.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   When used with a connection-oriented transport,\
    \ this version of the\n   protocol provides facilities for the LDAP v2 authentication\n\
    \   mechanism, simple authentication using a cleartext password, as well\n   as\
    \ any SASL mechanism [12].  SASL allows for integrity and privacy\n   services\
    \ to be negotiated.\n   It is also permitted that the server can return its credentials\
    \ to\n   the client, if it chooses to do so.\n   Use of cleartext password is\
    \ strongly discouraged where the\n   underlying transport service cannot guarantee\
    \ confidentiality and may\n   result in disclosure of the password to unauthorized\
    \ parties.\n   When used with SASL, it should be noted that the name field of\
    \ the\n   BindRequest is not protected against modification.  Thus if the\n  \
    \ distinguished name of the client (an LDAPDN) is agreed through the\n   negotiation\
    \ of the credentials, it takes precedence over any value in\n   the unprotected\
    \ name field.\n   Implementations which cache attributes and entries obtained\
    \ via LDAP\n   MUST ensure that access controls are maintained if that information\n\
    \   is to be provided to multiple clients, since servers may have access\n   control\
    \ policies which prevent the return of entries or attributes in\n   search results\
    \ except to particular authenticated clients.  For\n   example, caches could serve\
    \ result information only to the client\n   whose request caused it to be cache.\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   This document is an update to RFC 1777, by Wengyik Yeong,\
    \ Tim Howes,\n   and Steve Kille.  Design ideas included in this document are\
    \ based on\n   those discussed in ASID and other IETF Working Groups.  The\n \
    \  contributions of individuals in these working groups is gratefully\n   acknowledged.\n"
- title: 9.  Bibliography
  contents:
  - "9.  Bibliography\n   [1] ITU-T Rec. X.500, \"The Directory: Overview of Concepts,\
    \ Models\n       and Service\",  1993.\n   [2] Yeong, W., Howes, T., and S. Kille,\
    \ \"Lightweight Directory Access\n       Protocol\", RFC 1777, March 1995.\n \
    \  [3] ITU-T Rec. X.680, \"Abstract Syntax Notation One (ASN.1) -\n       Specification\
    \ of Basic Notation\", 1994.\n   [4] Kille, S., Wahl, M., and T. Howes, \"Lightweight\
    \ Directory Access\n       Protocol (v3): UTF-8 String Representation of Distinguished\n\
    \       Names\", RFC 2253, December 1997.\n   [5] Wahl, M., Coulbeck, A., Howes,\
    \ T., and S. Kille, \"Lightweight\n       Directory Access Protocol (v3): Attribute\
    \ Syntax Definitions\",\n       RFC 2252, December 1997.\n   [6] ITU-T Rec. X.501,\
    \ \"The Directory: Models\", 1993.\n   [7] Berners-Lee, T., Masinter, L., and\
    \ M. McCahill, \"Uniform\n       Resource  Locators (URL)\", RFC 1738, December\
    \ 1994.\n   [8] ITU-T Rec. X.511, \"The Directory: Abstract Service Definition\"\
    ,\n       1993.\n   [9] Howes, T., and M. Smith, \"The LDAP URL Format\", RFC\
    \ 2255,\n       December 1997.\n   [10] Bradner, S., \"Key words for use in RFCs\
    \ to Indicate Requirement\n        Levels\", RFC 2119, March 1997.\n   [11] ITU-T\
    \ Rec. X.690, \"Specification of ASN.1 encoding rules: Basic,\n        Canonical,\
    \ and Distinguished Encoding Rules\", 1994.\n   [12] Meyers, J., \"Simple Authentication\
    \ and Security Layer\",\n        RFC 2222, October 1997.\n   [13] Universal Multiple-Octet\
    \ Coded Character Set (UCS) -\n        Architecture and Basic Multilingual Plane,\
    \ ISO/IEC 10646-1 :\n        1993.\n   [14] Yergeau, F., \"UTF-8, a transformation\
    \ format of Unicode and ISO\n        10646\", RFC 2044, October 1996.\n"
- title: 10. Authors' Addresses
  contents:
  - "10. Authors' Addresses\n   Mark Wahl\n   Critical Angle Inc.\n   4815 W Braker\
    \ Lane #502-385\n   Austin, TX 78759\n   USA\n   Phone:  +1 512 372-3160\n   EMail:\
    \  M.Wahl@critical-angle.com\n   Tim Howes\n   Netscape Communications Corp.\n\
    \   501 E. Middlefield Rd., MS MV068\n   Mountain View, CA 94043\n   USA\n   Phone:\
    \  +1 650 937-3419\n   EMail:   howes@netscape.com\n   Steve Kille\n   Isode Limited\n\
    \   The Dome, The Square\n   Richmond\n   TW9 1DT\n   UK\n   Phone:  +44-181-332-9091\n\
    \   EMail:  S.Kille@isode.com\n"
- title: Appendix A - Complete ASN.1 Definition
  contents:
  - "Appendix A - Complete ASN.1 Definition\n        Lightweight-Directory-Access-Protocol-V3\
    \ DEFINITIONS\n        IMPLICIT TAGS ::=\n        BEGIN\n        LDAPMessage ::=\
    \ SEQUENCE {\n                messageID       MessageID,\n                protocolOp\
    \      CHOICE {\n                        bindRequest     BindRequest,\n      \
    \                  bindResponse    BindResponse,\n                        unbindRequest\
    \   UnbindRequest,\n                        searchRequest   SearchRequest,\n \
    \                       searchResEntry  SearchResultEntry,\n                 \
    \       searchResDone   SearchResultDone,\n                        searchResRef\
    \    SearchResultReference,\n                        modifyRequest   ModifyRequest,\n\
    \                        modifyResponse  ModifyResponse,\n                   \
    \     addRequest      AddRequest,\n                        addResponse     AddResponse,\n\
    \                        delRequest      DelRequest,\n                       \
    \ delResponse     DelResponse,\n                        modDNRequest    ModifyDNRequest,\n\
    \                        modDNResponse   ModifyDNResponse,\n                 \
    \       compareRequest  CompareRequest,\n                        compareResponse\
    \ CompareResponse,\n                        abandonRequest  AbandonRequest,\n\
    \                        extendedReq     ExtendedRequest,\n                  \
    \      extendedResp    ExtendedResponse },\n                 controls       [0]\
    \ Controls OPTIONAL }\n        MessageID ::= INTEGER (0 .. maxInt)\n        maxInt\
    \ INTEGER ::= 2147483647 -- (2^^31 - 1) --\n        LDAPString ::= OCTET STRING\n\
    \        LDAPOID ::= OCTET STRING\n        LDAPDN ::= LDAPString\n        RelativeLDAPDN\
    \ ::= LDAPString\n        AttributeType ::= LDAPString\n        AttributeDescription\
    \ ::= LDAPString\n        AttributeDescriptionList ::= SEQUENCE OF\n         \
    \       AttributeDescription\n        AttributeValue ::= OCTET STRING\n      \
    \  AttributeValueAssertion ::= SEQUENCE {\n                attributeDesc   AttributeDescription,\n\
    \                assertionValue  AssertionValue }\n        AssertionValue ::=\
    \ OCTET STRING\n        Attribute ::= SEQUENCE {\n                type    AttributeDescription,\n\
    \                vals    SET OF AttributeValue }\n        MatchingRuleId ::= LDAPString\n\
    \        LDAPResult ::= SEQUENCE {\n                resultCode      ENUMERATED\
    \ {\n                             success                      (0),\n        \
    \                     operationsError              (1),\n                    \
    \         protocolError                (2),\n                             timeLimitExceeded\
    \            (3),\n                             sizeLimitExceeded            (4),\n\
    \                             compareFalse                 (5),\n            \
    \                 compareTrue                  (6),\n                        \
    \     authMethodNotSupported       (7),\n                             strongAuthRequired\
    \           (8),\n                                        -- 9 reserved --\n \
    \                            referral                     (10),  -- new\n    \
    \                         adminLimitExceeded           (11),  -- new\n       \
    \                      unavailableCriticalExtension (12),  -- new\n          \
    \                   confidentialityRequired      (13),  -- new\n             \
    \                saslBindInProgress           (14),  -- new\n                \
    \             noSuchAttribute              (16),\n                           \
    \  undefinedAttributeType       (17),\n                             inappropriateMatching\
    \        (18),\n                             constraintViolation          (19),\n\
    \                             attributeOrValueExists       (20),\n           \
    \                  invalidAttributeSyntax       (21),\n                      \
    \                  -- 22-31 unused --\n                             noSuchObject\
    \                 (32),\n                             aliasProblem           \
    \      (33),\n                             invalidDNSyntax              (34),\n\
    \                             -- 35 reserved for undefined isLeaf --\n       \
    \                      aliasDereferencingProblem    (36),\n                  \
    \                      -- 37-47 unused --\n                             inappropriateAuthentication\
    \  (48),\n                             invalidCredentials           (49),\n  \
    \                           insufficientAccessRights     (50),\n             \
    \                busy                         (51),\n                        \
    \     unavailable                  (52),\n                             unwillingToPerform\
    \           (53),\n                             loopDetect                   (54),\n\
    \                                        -- 55-63 unused --\n                \
    \             namingViolation              (64),\n                           \
    \  objectClassViolation         (65),\n                             notAllowedOnNonLeaf\
    \          (66),\n                             notAllowedOnRDN              (67),\n\
    \                             entryAlreadyExists           (68),\n           \
    \                  objectClassModsProhibited    (69),\n                      \
    \                  -- 70 reserved for CLDAP --\n                             affectsMultipleDSAs\
    \          (71), -- new\n                                        -- 72-79 unused\
    \ --\n                             other                        (80) },\n    \
    \                         -- 81-90 reserved for APIs --\n                matchedDN\
    \       LDAPDN,\n                errorMessage    LDAPString,\n               \
    \ referral        [3] Referral OPTIONAL }\n        Referral ::= SEQUENCE OF LDAPURL\n\
    \        LDAPURL ::= LDAPString -- limited to characters permitted in URLs\n \
    \       Controls ::= SEQUENCE OF Control\n        Control ::= SEQUENCE {\n   \
    \             controlType             LDAPOID,\n                criticality  \
    \           BOOLEAN DEFAULT FALSE,\n                controlValue            OCTET\
    \ STRING OPTIONAL }\n        BindRequest ::= [APPLICATION 0] SEQUENCE {\n    \
    \            version                 INTEGER (1 .. 127),\n                name\
    \                    LDAPDN,\n                authentication          AuthenticationChoice\
    \ }\n        AuthenticationChoice ::= CHOICE {\n                simple       \
    \           [0] OCTET STRING,\n                                         -- 1 and\
    \ 2 reserved\n                sasl                    [3] SaslCredentials }\n\
    \        SaslCredentials ::= SEQUENCE {\n                mechanism           \
    \    LDAPString,\n                credentials             OCTET STRING OPTIONAL\
    \ }\n        BindResponse ::= [APPLICATION 1] SEQUENCE {\n             COMPONENTS\
    \ OF LDAPResult,\n             serverSaslCreds    [7] OCTET STRING OPTIONAL }\n\
    \        UnbindRequest ::= [APPLICATION 2] NULL\n        SearchRequest ::= [APPLICATION\
    \ 3] SEQUENCE {\n                baseObject      LDAPDN,\n                scope\
    \           ENUMERATED {\n                        baseObject              (0),\n\
    \                        singleLevel             (1),\n                      \
    \  wholeSubtree            (2) },\n                derefAliases    ENUMERATED\
    \ {\n                        neverDerefAliases       (0),\n                  \
    \      derefInSearching        (1),\n                        derefFindingBaseObj\
    \     (2),\n                        derefAlways             (3) },\n         \
    \       sizeLimit       INTEGER (0 .. maxInt),\n                timeLimit    \
    \   INTEGER (0 .. maxInt),\n                typesOnly       BOOLEAN,\n       \
    \         filter          Filter,\n                attributes      AttributeDescriptionList\
    \ }\n        Filter ::= CHOICE {\n                and             [0] SET OF Filter,\n\
    \                or              [1] SET OF Filter,\n                not     \
    \        [2] Filter,\n                equalityMatch   [3] AttributeValueAssertion,\n\
    \                substrings      [4] SubstringFilter,\n                greaterOrEqual\
    \  [5] AttributeValueAssertion,\n                lessOrEqual     [6] AttributeValueAssertion,\n\
    \                present         [7] AttributeDescription,\n                approxMatch\
    \     [8] AttributeValueAssertion,\n                extensibleMatch [9] MatchingRuleAssertion\
    \ }\n        SubstringFilter ::= SEQUENCE {\n                type            AttributeDescription,\n\
    \                -- at least one must be present\n                substrings \
    \     SEQUENCE OF CHOICE {\n                        initial [0] LDAPString,\n\
    \                        any     [1] LDAPString,\n                        final\
    \   [2] LDAPString } }\n        MatchingRuleAssertion ::= SEQUENCE {\n       \
    \         matchingRule    [1] MatchingRuleId OPTIONAL,\n                type \
    \           [2] AttributeDescription OPTIONAL,\n                matchValue   \
    \   [3] AssertionValue,\n                dnAttributes    [4] BOOLEAN DEFAULT FALSE\
    \ }\n        SearchResultEntry ::= [APPLICATION 4] SEQUENCE {\n              \
    \  objectName      LDAPDN,\n                attributes      PartialAttributeList\
    \ }\n        PartialAttributeList ::= SEQUENCE OF SEQUENCE {\n               \
    \ type    AttributeDescription,\n                vals    SET OF AttributeValue\
    \ }\n        SearchResultReference ::= [APPLICATION 19] SEQUENCE OF LDAPURL\n\
    \        SearchResultDone ::= [APPLICATION 5] LDAPResult\n        ModifyRequest\
    \ ::= [APPLICATION 6] SEQUENCE {\n                object          LDAPDN,\n  \
    \              modification    SEQUENCE OF SEQUENCE {\n                      \
    \  operation       ENUMERATED {\n                                            \
    \    add     (0),\n                                                delete  (1),\n\
    \                                                replace (2) },\n            \
    \            modification    AttributeTypeAndValues } }\n        AttributeTypeAndValues\
    \ ::= SEQUENCE {\n                type    AttributeDescription,\n            \
    \    vals    SET OF AttributeValue }\n        ModifyResponse ::= [APPLICATION\
    \ 7] LDAPResult\n        AddRequest ::= [APPLICATION 8] SEQUENCE {\n         \
    \       entry           LDAPDN,\n                attributes      AttributeList\
    \ }\n        AttributeList ::= SEQUENCE OF SEQUENCE {\n                type  \
    \  AttributeDescription,\n                vals    SET OF AttributeValue }\n  \
    \      AddResponse ::= [APPLICATION 9] LDAPResult\n        DelRequest ::= [APPLICATION\
    \ 10] LDAPDN\n        DelResponse ::= [APPLICATION 11] LDAPResult\n        ModifyDNRequest\
    \ ::= [APPLICATION 12] SEQUENCE {\n                entry           LDAPDN,\n \
    \               newrdn          RelativeLDAPDN,\n                deleteoldrdn\
    \    BOOLEAN,\n                newSuperior     [0] LDAPDN OPTIONAL }\n       \
    \ ModifyDNResponse ::= [APPLICATION 13] LDAPResult\n        CompareRequest ::=\
    \ [APPLICATION 14] SEQUENCE {\n                entry           LDAPDN,\n     \
    \           ava             AttributeValueAssertion }\n        CompareResponse\
    \ ::= [APPLICATION 15] LDAPResult\n        AbandonRequest ::= [APPLICATION 16]\
    \ MessageID\n        ExtendedRequest ::= [APPLICATION 23] SEQUENCE {\n       \
    \         requestName      [0] LDAPOID,\n                requestValue     [1]\
    \ OCTET STRING OPTIONAL }\n        ExtendedResponse ::= [APPLICATION 24] SEQUENCE\
    \ {\n                COMPONENTS OF LDAPResult,\n                responseName \
    \    [10] LDAPOID OPTIONAL,\n                response         [11] OCTET STRING\
    \ OPTIONAL }\n        END\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1997).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
