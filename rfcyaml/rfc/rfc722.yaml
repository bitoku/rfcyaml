- title: __initial_text__
  contents:
  - "I. ABSTRACT\n     This paper addresses some issues concerned with the\ndesign\
    \ of distributed services.  In particular, it is\nconcerned with the characteristics\
    \ of the interactions,\nbetween programs which support some service at various\n\
    network sites.  The ideas presented are derived mainly from\nexperience with various\
    \ service protocols [Reference 1]\non the ARPANET.\n     A model is developed\
    \ of interactions between programs.\nSalient features of this model which promote\
    \ and simplify\nthe construction of reliable, responsive services are\nidentified.\
    \  These dualities are motivated by problems\nexperienced with various ARPANET\
    \ protocols and in the design\nand maintenance of programs which use these protocols\
    \ in the\nperformance of some service.\n     Using this model as a template, the\
    \ general\narchitecture of one possible interaction protocol is\npresented.  This\
    \ mechanism provides a foundation on which\nprotocols would be constructed for\
    \ particular services,\nsimplifying the process of creating services which are\
    \ easy\nto implement and maintain, and appear reliable and\nresponsive to the\
    \ customer.  This presentation is meant to\nserve as an introduction to a specific\
    \ instance of such a\nprotocol, called the RRP, which is defined in one of the\n\
    references.\nII. OVERVIEW AND TERMINOLOGY\n     This paper considers the interaction\
    \ of two programs\nwhich support some network service.  It develops a model of\n\
    the interactions of a class of such applications, and\nincludes some thoughts\
    \ on desirable goals and\ncharacteristics of implementations.  The model is derived\n\
    from a proposal [Reference 2] for mail-handling\nsystems.  Terminology, as introduced,\
    \ is highlighted by\ncapitalization.\n     Many uses of computer networks involve\
    \ communication\ndirectly between programs, without human intervention or\nmonitoring.\
    \  Some examples would include an advanced\nmail-handling system, or any kind\
    \ of multi-site data base\nmanager.\n     Such programs will be termed SERVERs.\
    \  They are the\nusers of some mechanism which provides the needed\ncommunication\
    \ and synchronization.  The particular facility\nwhich the servers implement will\
    \ be termed a SERVICE.\nServers for any particular service may be written in several\n\
    languages, operate in various system environments on\ndifferent kinds of computers.\
    \  The entity which utilizes the\nservice will be termed the CUSTOMER.\n     Servers\
    \ interact during ENCOUNTERs, which are the\nperiods when two servers are in communication.\
    \  An encounter\nbegins when one server establishes a CHANNEL, a\nbidirectional\
    \ communication link with another server.  The\ninteraction between servers is\
    \ effected by the exchange of\ninformation over the channel.  The conventions\
    \ used in such\nan exchange are defined by the PROTOCOLs for the\ninteraction.\n\
    \     The theme of this paper is a model for a particular\nclass of process interactions\
    \ which may be used as a basis\nfor many possible services, where the interactions\
    \ are\nfairly simple.  Services which fit in this category interact\nin a manner\
    \ which can be modeled by a REQUEST-REPLY\nDISCIPLINE, which is defined herein.\n\
    \     A set of guidelines and goals is developed, which\naddress issues relevant\
    \ to ease or implementation and\nreliability of operation of servers.  These guidelines\
    \ may\nbe used to assist in the formulation of protocols specific\nto appropriate\
    \ services.\n     Additionally, the guidelines presented may be used as a\nbasis\
    \ for a general process interaction protocol, by\nextracting the primitives and\
    \ operational concepts which\nwould be common to a protocol constructed for virtually\
    \ any\nsuch service.\n     From these ideas, a protocol which provides a\nfoundation\
    \ can be constructed, to be extended for particular\nservices by adding primitives\
    \ specific to each.  The RRP\n[Reference 4] is one such possible protocol.  It\n\
    provides basic primitives to control the interaction between\nservers, and a mechanism\
    \ for extending the primitives to\ninclude service-specific operations.\n    \
    \ The discussion here is primarily intended to explain\nthe basis for the design\
    \ of the RRP, and to present some\ngeneral issues of design of services.\nIII.\
    \ THE REQUEST-REPLY DISCIPLINE\n     The class of services relevant to this discussion\
    \ are\nthose whose interactions could be performed in the following\nmanner.\n\
    \     Two servers have established a channel by some external\nmeans.  A single\
    \ interaction between servers begins with one\nserver, called the REQUESTER, issuing\
    \ a request.  The server\nreceiving that request, the RESPONDER, issues a REPLY.\
    \  The\nrequester interprets the reply sequence to determine whether\nthe request\
    \ was successful, failed, or partially failed, and\ntakes appropriate action.\
    \  Such a sequence of events is\ntermed an EXCHANGE.  This is analogous to a subroutine\
    \ call\nin a simple single-processor operating system.\n     This model is termed\
    \ a REQUEST-REPLY DISCIPLINE of\nprogram interaction.  It should be noted that\
    \ this is only a\nmodel of program behavior, and does not necessarily exclude\n\
    services which require, for example, some measure of\npipelining of requests for\
    \ efficiency in long-delay\nsituation;.  In fact, most network services would\
    \ require\nsuch measures, put their interactions can still be reduced\nto the\
    \ request-reply model.\n     At any time, one of the partners is in control of\
    \ the\ninteraction, and is termed the MASTER of the interaction.\nThe other partner\
    \ is called the SLAVE.  In the simplest\ncases, the requester is always the master,\
    \ although this is\nnot always true in particular implementations, such as the\n\
    RRP [Reference 4].\nIV. CHARACTERISTICS OF AN INTERACTION MECHANISM\n     The\
    \ following set of characteristics desirable in an\ninteraction mechanism is the\
    \ result of experience with\nprogram communication in various ARPANET applications,\
    \ such\nas message services, file transfer, Datacomputer, and remote\njob entry\
    \ applications.\n     In attempting to produce such systems, several\nqualities\
    \ recurred which would be desirable in the\nsubstructure upon which the systems\
    \ are built.  These\ncharacteristics would promote ease of writing and debugging\n\
    servers, maintaining reliability, and providing services\nwhich are responsive\
    \ to customer needs, while avoiding\ndisruptions of service.\n     The qualities\
    \ desired in the interaction mechanism are\npresented along with a discussion\
    \ of the effects which they\nare intended to produce in the associated services.\
    \  It must\nbe emphasized that this discussion is related to a class of\nsimple\
    \ services, and might not be appropriate for more\ncomplex applications.\n   \
    \  1/ Servers must be able to transfer data in a precise\n        fashion, retaining\
    \ the structure and semantic\n        meaning of the data, despite the dissimilarities\
    \ of\n        the computer systems in which they function.\n     2/ Synchronization\
    \ and timing problems due to the\n        characteristics of the communications\
    \ link must be\n        isolated and handled separately from any which\n     \
    \   might be characteristic of the service itself.\n     3/ Since services may\
    \ wish to provide expanded\n        facilities as they are used and developed,\
    \ a\n        mechanism must be included to enable the service\n        protocol\
    \ to evolve.\n     4/ Since various programs which act as servers may\n      \
    \  undergo simultaneous development, care must be\n        taken to insure that\
    \ servers with different\n        capabilities interact reliably, maintaining\
    \ at\n        least the same level of service as existed\n        previously.\n\
    \     5/ The mechanisms for extending the facilities must\n        avoid requiring\
    \ servers to be modified when new\n        capabilities are introduced, but not\
    \ impede\n        progress by maintainers who are anxious to provide\n       \
    \ a new or experimental service.\n     These qualities may be placed in three\
    \ categories, data\nprecision (1), process synchronization (2), and service\n\
    enhancement (3, 4, 5).  Each will be discussed separately in\nthe following sections.\
    \  The significance of each quality\nand its effect on the associated service\
    \ characteristics\nwill be included, with some references to related problems\n\
    with current and past services.\n     Since these considerations are common to\
    \ many possible\nservices, it is appropriate for the interaction protocol to\n\
    include them within its machinery as much as possible.  This\npermits services\
    \ to be implemented which, if carefully\ndesigned, inherit these properties from\
    \ the interaction\nsubstrate.\nV. PRECISE DATA TRANSFER\n     Precision in data\
    \ transfer permits semantic and\nstructural information which exists in the sender's\
    \ instance\nof a datum to be reproduced in the receiver's image of the\ndatum,\
    \ even though it may be represented in the systems\ninvolved in entirely different\
    \ fashions.\n     For programs to provide powerful, reliable\ncapabilities, they\
    \ must be able to interact using data which\nis meaningful to the particular service\
    \ involved.  The\ninteraction mechanism must permit services to define their\n\
    own relevant data types, and transfer such items efficiently\nand precisely. \
    \ This facility provides a 'standard' for data,\npermitting the service's designers\
    \ to concentrate on\nhigher-level issues of concern to the service itself.\n \
    \    Data of a given type should be recognizable as such\nwithout need for context.\
    \  The mechanism should also permit\nnew data types to be handled by older servers\
    \ without error,\neven though they cannot interpret the semantics of the new\n\
    data.\n     These characteristic permits services to be designed in\nterms of\
    \ the abstract data they need to function, without\ncontinued detailed concern\
    \ for the particular formats in\nwhich it is represented within various machines.\n\
    \     For example, servers may need to transfer a datum\nidentifying a particular\
    \ date, which may be represented\ninternally within systems in different forms.\
    \  The data\ntransfer mechanism should be capable of transferring such a\ndatum\
    \ as a date per se, rather than a strict pattern or bits\nor characters.\n   \
    \  For example, in current FTP-based mail systems,\nmessages often contain information\
    \ with significant semantic\nmeaning, which is lost or obscured when transferred\
    \ between\nsites.  An example might be a file specification, which\neffectively\
    \ loses all identity as such when translated into\na simple character stream.\
    \  People can usually recognize\nsuch streams as file names, but it is often extremely\n\
    difficult, time-consuming, and inefficient to construct a\nprogram to do so reliably.\
    \  As a result, services which\nshould be easy to provide to the customer, such\
    \ as automatic\nretrieval of relevant files, become difficult and\nunreliable.\n\
    \     Some success has been achieved in handling certain\ndata, such as dates\
    \ and times, by defining a particular\ncharacter pattern which, if seen in a particular\
    \ context,\ncan be recognized as a date or time.  Each of these cases\nhas been\
    \ done on an individual basis, by defining a format\nfor the individual data of\
    \ concern.  Generally, the format\ndepends to some extent on the datum occurring\
    \ within a\nparticular context, and is not unique enough to be\nidentifiable outside\
    \ of that context.\n     A particular service can achieve data precision by\n\
    meticulous specification of the protocols by which data is\ntransferred.  This\
    \ need is widespread enough, however, that\nit is appropriate to consider inclusion\
    \ of a facility to\nprovide data precision within the interaction mechanism\n\
    itself.\n     The major effect of this would be to facilitate the\ndesign of reliable,\
    \ responsive services, by relieving the\nservice's designers from the need to\
    \ consider very low-level\ndetails of data representation, which are usually the\
    \ least\ninteresting, but highly critical, aspects of the design.  By\nisolating\
    \ the data transfer mechanism, thIs architecture\nalso promotes modularity or\
    \ implementations, which can\nreduce the cost and time needed to implement or\
    \ modify\nservices.\nVI. PROCESS SYNCHRONIZATION\n     A major source of problems\
    \ in many services involved\nsynchronization of server; interacting over a relatively\n\
    low-bandwidth, high-delay communications link.\n     Interactions in most services\
    \ involve issuing a command\nand waiting for a response.  The number of responses\
    \ which\ncan be elicited by a given command often varies, and there\nis usually\
    \ no way to determine if all replies have arrived.\nPrograms can easily issue\
    \ a request before the responses to\na previous request have completed, and get\
    \ out of\nsynchronization in a response is incorrectly matched to a\nrequest.\
    \  Each server program must be meticulously designed\nto be capable of recovering\
    \ if an unexpected reply arrives\nafter a subsequent command is issued.\n    \
    \ Note that, for reliable operation, it is always\nnecessary that each response\
    \ cause a reply to occur, at\nleast in the sense that the request ts confirmed\
    \ at some\npoint.  No service should perform a critical operation, such\nas deleting\
    \ a file, which depends on the success of a\nprevious request unless it has been\
    \ confirmed.  Requests in\ncurrent protocols which do not appear to cause a reply\
    \ may\nbe viewed as confirmed later when a subsequent request is\nacknowledged,\
    \ while such protocols work, they are more\nopaque than desirable, and consequently\
    \ more difficult to\nimplement.\n     These characteristics of protocols have\
    \ often resulted\nin implementation of ad hoc methods for interaction, such as\n\
    timeouts or sufficient length to assure correctness in an\nacceptably high percentage\
    \ of situations.  Often this has\nrequired careful tuning of programs as experience\
    \ in using a\nprotocol shows which commands are most likely to cause\nproblems.\
    \  Such methods generally result in a service which\nis less responsive, powerful,\
    \ or efficient than desirable,\nand expensive to build and maintain.\n     Additionally,\
    \ protocol specifications for services have\noften been incomplete, in that an\
    \ enumeration of the\nresponses which may occur for a given command is inaccurate\n\
    or non-existent.  This greatly complicates the task of the\nprogrammer trying\
    \ to construct an intelligent server.  In\nmost cases, servers are slowly improved\
    \ over time as\nexperience shows which responses are common in each\ninstance.\n\
    \     The synchronization problems mentioned above are in\naddition to those which\
    \ naturally occur as part of the\nservice operation.  Thus, problems of synchronization\
    \ may\nbe split into two classes, those inherent in the service,\nand those associated\
    \ with the interaction mechanism itself.\n     Construction of reliable, responsive\
    \ servers can be\nassisted by careful design of the interaction mechanism and\n\
    protocols.  An unambiguous, completely specified mapping\nbetween commands and\
    \ responses is desirable.\nSynchronization considerations of the two types can\
    \ be\nattacked separately.  An interaction mechanism which handles\nits own synchronization\
    \ can be provided as a base for\nservice' designers to use, relieving them of\
    \ considerations\nof the low-level, protocol-derived problems, by providing\n\
    primitives which encourage the design of reliable services.\n     To achieve a\
    \ reasonable effective bandwidth, it is\nusually desirable to permit interacting\
    \ programs to operate\nin a full-duplex fashion.  Significant amounts of data\
    \ are\noften in transit at any time.  This magnifies the problems\nassociated\
    \ with interaction by introducing parallelism.  The\ninteraction mechanism can\
    \ also be structured to provide ways\nof handling these problems, and to provide\
    \ a basis on which\nservers which exploit parallelism can be constructed.\n  \
    \   Many of these problems are too complex to warrant their\nconsideration in\
    \ any but the most active services.  As a\nresult, services are often constructed\
    \ which avoid\nproblems by inefficiencies in their operation, as mentioned\nabove.\
    \  Provision of an interaction mechanism and primitives\nfor use by such services\
    \ would promote efficiency interaction\neven by simple services which do not have\
    \ the resources to\nconsider all the problems in detail.\nVII. SERVICE ENHANCEMENT\n\
    \     When particular programs implementing a service are\nundergoing development\
    \ simultaneously by several\norganizations, or are maintained at many distributed\
    \ sites.\nmany problems can develop concerning the compatibility of\ndissimilar\
    \ servers.\n     This situation occurs in the initial phase of\nimplementing a\
    \ service, as well as whenever the protocols\nare modified to fix problems or\
    \ expand the service.\nVirtually every interaction protocol is modified from time\n\
    to time to add new capabilities.  Two particular examples\narc the TELNET protocol\
    \ and mail header formats.\n     In most cases, the basic protocol had no facility\
    \ for\nimplementing changes in an invisible fashion.  This has had\nseveral consequences.\n\
    \     First, it is very difficult to change a protocol unless\nthe majority of\
    \ concerned maintainers are interested in the\nchanges and therefore willing to\
    \ exert effort to change the\nprograms involved.  This situation has occurred\
    \ in previous\ncases because any change necessarily impacts all servers.\nThe\
    \ services involved therefore often stagnate, and it\nbecomes inappropriately\
    \ difficult to provide a customer with\na seemingly simple enhancement.\n    \
    \ Second, when protocols change by will of the majority,\nexisting servers often\
    \ stop working or behave erratically\nwhich they suddenly find their partner speaking\
    \ a new\nlanguage.  This is equally disconcerting to the service\ncustomer, as\
    \ well as annoying to the maintainers of the\nservers at the various sites affected.\n\
    \     These problems can be easily avoided, or at least\nsignificantly reduced,\
    \ by careful design of the interaction\nprotocols.  In particular, the interaction\
    \ mechanism itself\ncan be structured to avoid the problem entirely, leaving\n\
    only those problems associated with the particular service\noperations themselves.\n\
    \     The interaction machinery should be structured so that\nthe mechanisms of\
    \ the interaction substrate itself may be\nimproved or expanded in a fashion which\
    \ is absolutely\ninvisible to current servers.\n     1/ No server should be required\
    \ to implement a change\n        which is unimportant to its customers.\n    \
    \ 2/ No server should be prevented from utilizing a new\n        facility when\
    \ interacting with a willing partner.\n     3/ Service should not be degraded\
    \ in any way when a\n        new protocol facility is made available.\n     In\
    \ cases where a single service is provided by\ndifferent server programs at many\
    \ sites, it is desirable for\nthe various sites to be able to participate at a\
    \ level\nappropriate to them.  A new server program should be able to\nparticipate\
    \ quickly, using only simple mechanisms of the\nprotocol, and evolve into more\
    \ advanced, powerful, or\nefficient interaction as desired.  Sites wishing to\
    \ utilize\nadvanced or experimental features must be allowed to do so\nwithout\
    \ imposing implementation of such features on others.\nConversely, sites wishing\
    \ to participate in a minimal\nfashion must not prevent others from using advanced\n\
    features.  In all cases, the various servers must be capable\nof continued interaction\
    \ at the highest level supported by\nboth.\n     The goal is an evolving system\
    \ which maintains\nreliability as well as both upward and downward\ncompatibility.\
    \  The protocol itself should have these\ncharacteristics, and it should provide\
    \ the mechanisms to\nservice interaction protocols to be defined which\ninherit\
    \ these qualities.\nVIII. STRUCTURING AN INTERACTION MECHANISM\n     The qualities\
    \ presented previously should provide at\nleast a starting point for implementation\
    \ of services which\navoid the problems mentioned.  The rest of this paper\naddresses\
    \ issues of a particular possible architecture of an\ninteraction mechanism.\n\
    \     The design architecture splits the service-specific\nconventions from those\
    \ of the interaction per se.  An\ninteraction protocol is provided which implements\
    \ the\nmachinery of the request-reply model, and includes handling\nof the problems\
    \ of data precision, synchronization, and\nenhancement.  This protocol is not\
    \ specific to any service,\nbut rather provides primitives, in the form of\nservice-designed\
    \ requests and replies, on which a particular\nservice protocol is built.\n  \
    \   An actual implementation for a particular service could\nmerge the code of\
    \ the interaction protocol with the service\nitself, or the interaction protocol\
    \ could be provided as a\n'service' whose customer is the service being implemented.\n\
    \     The goals of this design architecture follow.\n     1/ Provision of a general\
    \ interaction mechanism to be\n        used by services which follow a request-reply\n\
    \        discipline.  Services would design their protocols\n        using the\
    \ primitives of the mechanism as a\n        foundation.\n     2/ INTERACTION MECHANISM\
    \ EXTENSIBILITY.  The\n        interaction mechanism may be expanded as desired\n\
    \        without impacting on existing servers unless they\n        wish to use\
    \ the new features.\n     3/ SERVER EXTENSIBILITY.  Servers can be implemented\n\
    \        using the most basic primitives.  Implementations\n        may later\
    \ be extended to utilize additional\n        capabilities to negate some of the\
    \ inefficiency\n        inherent in a strict request-reply structure.\n     4/\
    \ SERVICE EXTENSIBILITY.  The primitives permit a\n        service to be expanded\
    \ as desired without impacting\n        on existing servers in any way unless\
    \ they wish to\n        use the new features.\n     5/ SERVER COMPATIBILITY. \
    \ Within the set of servers of\n        a given application, it is possible to\
    \ have\n        different servers operating at different levels of\n        sophistication,\
    \ and still maintain the ability for\n        any pair of servers to interact\
    \ successfully.\n     These goals involve two basic areas of design.  First,\n\
    the interaction mechanism itself is designed to meet the\ngoals.  Secondly, guidelines\
    \ for structure of the particular\nservice' protocols are necessary, in order\
    \ for it to inherit\nthe qualities needed to meet the goals.\nIX. PARTITIONING\
    \ THE PROBLEM\n     In defining the interaction mechanism itself, the\nproblem\
    \ may be simplified by considering two areas of\nconcern separately.\n     1/\
    \ The characteristics and format of the data conveyed\n        by the channel\
    \ may be defined.\n     2/ The conventions used to define the interaction may\n\
    \        be defined, in terms of the available data\n        supported by the\
    \ channel.\n     For purposes of this paper, the data repertoire and\ncharacteristics\
    \ of the channel are assumed to be as\ndescribed in [Reference 3] and summarized\
    \ in an\nappendix.  Discussions of the interaction between servers\nwill use only\
    \ the abstract concepts of primitive and\nsemantic data items, to isolate the\
    \ issues of interaction\nfrom those of data formats and communication details,\
    \ and\ntherefore simplify the problem.\n     Additionally, actual implementation\
    \ of a mechanism\nfollowing the ideas presented here can be accomplished in a\n\
    modular fashion, isolating code which is concerned with the\nchannel itself from\
    \ code concerned with the interaction\nbehavior.\n     The interaction mechanism\
    \ provides primitives to the\nservice' designer which are likewise defined in\
    \ terms of the\ndata items available.  Service designers are encouraged, but\n\
    not required, to define interactions in terms of these data\nonly.\nX. THE PRIMITIVES\n\
    \     The interaction mechanism assumes the existence of a\nchannel [Reference\
    \ 3] between two servers.  Two\nnew semantic data types are defined to implement\
    \ the\ninteraction.  These are, unsurprisingly, called CONTROL\nREQUESTs and CONTROL\
    \ REPLYs.  Each of these data items\ncontains at least two elements.\n     1/\
    \ The TYPE element identifies a particular type of\n        request or reply.\n\
    \     2/ The SEQUENCE element is used to match replies to\n        their corresponding\
    \ request.\n     Other elements may appear.  Their interpretation\ndepends on\
    \ the particular type of request or reply in which\nthey appear.\n     The interaction\
    \ protocol itself is defined in terms of\ncontrol requests and control replies.\
    \  A very small number\nof request and reply types is defined as the minimal\n\
    implementation level.  Additional request and reply types\nare also defined, for\
    \ use by more advanced servers, to\nProvide additional capabilities to the service,\
    \ or simply to\nincrease efficiency of operation.\n     Two additional data items\
    \ are defined, called USER\nREQUESTs and USER REPLYs.  These are structured like\n\
    requests and replies, but the various types are defined by\nthe service itself,\
    \ to implement the primitives needed in\nits operation.\n     Control and user\
    \ requests and replies are generically\nreferenced as simply REQUESTs and REPLYs.\n\
    \     The protocol of the interaction has several\ncharacteristics which form\
    \ the basis of the request-reply\nmodel, and attempt to meet the goals mentioned\
    \ previously.\n     1/ Every request elicits a reply.\n     2/ Every reply is\
    \ associated unambiguously with a\n        previous request.\n     3/ Each server\
    \ always knows the state of the\n        interaction, such as whether or not more\
    \ data is\n        expected from its partner.\n     4/ The protocol definition\
    \ includes enumeration of the\n        possible responses for each request.  Service\n\
    \        protocols are encouraged to do likewise for user\n        requests and\
    \ user replies.\n     5/ Servers who receive requests of unknown type issue\n\
    \        a response which effectively refuses the request.\n        Servers attempting\
    \ to use advanced features of a\n        protocol 'rephrase' their requests in\
    \ simpler terms\n        where possible to maintain the previous level of\n  \
    \      service.\n     The minimal implementation will support interaction\nalmost\
    \ exactly along the lines of the request-reply\ndiscipline.\n     Extensions to\
    \ the minimal configuration are defined for\ntwo reasons.  First, the strict request-reply\
    \ discipline\nmodel is inefficient for use in high-volume situations\nbecause\
    \ of the delays involved.  Several extensions are\ndefined to cope with this problem.\
    \  Thus, although the\ninteraction is based on such a discipline, it does not\n\
    necessarily implement the interaction in that fashion.\nSecond, additional primitives\
    \ are defined which provide some\nstandard process synchronization operations,\
    \ for use by the\nservices.\n     The protocol architecture presented here is\
    \ defined in\ndetail in an associated document.  [Reference 4]\nAppendix I --\
    \ The Channel\n     The following discussion is a summary of the ideas\npresented\
    \ in [Reference 3], which should be\nconsulted for further detail.\n     The communication\
    \ link between two servers is termed a\nCHANNEL.  Channels provide bidirectional\
    \ communications\ncapabilities, and will usually be full-duplex.  The programs\n\
    involved establish the channel as their individual\napplications require, using\
    \ some form of initial connection\nprotocol.\n     The channel acts as an interface\
    \ between servers.  It\nconveys abstract data items whose semantics are understood\n\
    by the programmers involved, such as INTEGERs, STRINGs, FILE\nPATH NAMEs, and\
    \ so on.  Because the users of the channel may\noperate in dissimilar computer\
    \ environments, their\ncommunication is defined only in terms of such abstract\
    \ data\nitems, which are the atomic units of information carried on\nthe channel.\
    \  The program implementing the channel at each\nsite converts the data between\
    \ an encoded transmission\nformat appropriate to the particular communication\
    \ link\ninvolved, and whatever internal representational form is\nappropriate\
    \ in the computer itself.\n     The channel protocol provides a mechanism for\n\
    definition of various types of data items of semantic value\nfor the particular\
    \ service concerned, for example, possibly,\nuser-name, set, syllable, sentence,\
    \ and other data items of\ninterest to the particular service.  The channel provides\
    \ a\nmechanism for transportation of such user-defined data from\nhost to host.\n\
    \     The channel may actually be implemented by one or more\nseparate encoding\
    \ mechanisms which would be used in\ndifferent conditions, initially, the channel\
    \ machinery would\nprovide a rudimentary facility based on a single mechanism\n\
    such as the MSDTP [Reference 3].\n     The mechanism is not dependent on the existence\
    \ of\nactual line-style network connections but will operate in\nother environments,\
    \ such as a message-oriented (as opposed\nto connection-oriented) communications\
    \ architecture, and in\nfact is more naturally structured for such an environment.\n\
    \                             -13-\fXI. REFERENCES\n[1] Network Information Center,\
    \ ARPANET Protocol Handbook,\nApril, 1976.\n[2] Broos, Haverty, Vezza, Message\
    \ Services Protocol\nproposal, December, 1975.\n[3] Haverty, Jack, Message Services\
    \ Data Transfer Protocol,\nNWG RFC 713, NIC 34729, April, 1976.\n[4] Haverty,\
    \ Jack, RRP, A Process Communication Protocol for\nRequest-reply Disciplines,\
    \ NWG RFC 723, NIC 36807, (to\nbe issued)\n"
