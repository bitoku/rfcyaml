- contents:
  - '                   PASSporT: Personal Assertion Token

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document defines a method for creating and validating a token\n
    \  that cryptographically verifies an originating identity or, more\n   generally,
    a URI or telephone number representing the originator of\n   personal communications.
    \ The Personal Assertion Token, PASSporT, is\n   cryptographically signed to protect
    the integrity of the identity of\n   the originator and to verify the assertion
    of the identity\n   information at the destination.  The cryptographic signature
    is\n   defined with the intention that it can confidently verify the\n   originating
    persona even when the signature is sent to the\n   destination party over an insecure
    channel.  PASSporT is particularly\n   useful for many personal-communications
    applications over IP networks\n   and other multi-hop interconnection scenarios
    where the originating\n   and destination parties may not have a direct trusted
    relationship.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8225.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n
    \  2. Terminology .....................................................4\n   3.
    PASSporT Overview ...............................................5\n   4. PASSporT
    Header .................................................6\n      4.1. \"typ\"
    (Type) Header Parameter ..............................6\n      4.2. \"alg\" (Algorithm)
    Header Parameter .........................6\n      4.3. \"x5u\" (X.509 URL) Header
    Parameter .........................6\n      4.4. Example PASSporT Header ....................................7\n
    \  5. PASSporT Payload ................................................7\n      5.1.
    JWT-Defined Claims .........................................7\n           5.1.1.
    \"iat\" (Issued At) Claim .............................7\n      5.2. PASSporT-Specific
    Claims ...................................8\n           5.2.1. Originating and
    Destination Identity Claims .........8\n           5.2.2. \"mky\" (Media Key)
    Claim ............................10\n   6. PASSporT Signature .............................................11\n
    \  7. Compact Form of PASSporT .......................................12\n      7.1.
    Example Compact Form of PASSporT ..........................13\n   8. Extending
    PASSporT .............................................13\n      8.1. \"ppt\" (PASSporT)
    Header Parameter .........................13\n      8.2. Example Extended PASSporT
    Header ..........................14\n      8.3. Extended PASSporT Claims ..................................14\n
    \  9. Deterministic JSON Serialization ...............................15\n      9.1.
    Example PASSporT Deterministic JSON Form ..................16\n   10. Security
    Considerations .......................................17\n      10.1. Avoidance
    of Replay and Cut-and-Paste Attacks ............17\n      10.2. Solution Considerations
    ..................................18\n   11. IANA Considerations ...........................................18\n
    \     11.1. Media Type Registration ..................................18\n      11.2.
    Registrations in \"JSON Web Token Claims\" .................19\n      11.3. Registration
    in \"JSON Web Signature and\n            Encryption Header Parameters\" ............................20\n
    \     11.4. PASSporT Extensions Registry .............................20\n   12.
    References ....................................................20\n      12.1.
    Normative References .....................................20\n      12.2. Informative
    References ...................................22\n   Appendix A. Example ES256-Based
    PASSporT JWS Serialization and\n               Signature .............................................23\n
    \    A.1. X.509 Private Key in PKCS #8 Format for ES256 Example ......24\n     A.2.
    X.509 Public Key for ES256 Example .........................25\n   Acknowledgments
    ...................................................25\n   Authors' Addresses ................................................25\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   In today's IP-enabled telecommunications world, there is
    a growing\n   concern about the ability to trust incoming invitations for\n   communications
    sessions, including video, voice, and messaging\n   [RFC7340].  As an example,
    modern telephone networks provide the\n   ability to spoof the calling party's
    telephone number for many\n   legitimate purposes, including providing network
    features and\n   services on behalf of a legitimate telephone number.  However,
    as we\n   have seen, bad actors have taken advantage of this ability for\n   illegitimate
    and fraudulent purposes meant to trick telephone users\n   into believing that
    they are someone they are not.  This problem can\n   be extended to many emerging
    forms of personal communications.\n   This document defines a method for creating
    and validating a token\n   that cryptographically verifies an originating identity
    or, more\n   generally, a URI or telephone number representing the originator
    of\n   personal communications.  Through the extensions defined in Section 8\n
    \  of this document, other information relevant to the personal\n   communications
    can also be added to the token.  The goal of PASSporT\n   is to provide a common
    framework for signing information related to\n   the originating identity in an
    extensible way.  Additionally, this\n   functionality is independent of any specific
    call logic for\n   personal-communications signaling, so that the assertion of\n
    \  information related to the originating identity can be implemented in\n   a
    flexible way and can be used in such applications as end-to-end\n   applications
    that require different signaling protocols or gateways\n   between different communications
    systems.  It is anticipated that\n   guidance specific to the signaling protocol
    will be provided in other\n   related documents and specifications to specify
    how to use and\n   transport PASSporTs; however, this is intentionally out of
    scope for\n   this document.\n   [RFC8224] provides details of the use of PASSporT
    within the SIP\n   [RFC3261] signaling protocol for the signing and verification
    of\n   telephone numbers and SIP URIs.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\",
    \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described
    in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all\n   capitals,
    as shown here.\n"
  title: 2.  Terminology
- contents:
  - "3.  PASSporT Overview\n   \"JSON Web Token (JWT)\" [RFC7519], \"JSON Web Signature
    (JWS)\"\n   [RFC7515], and other related specifications define a standard token\n
    \  format that can be used as a way of encapsulating claimed or asserted\n   information
    with an associated digital signature using X.509-based\n   certificates.  JWT
    provides a set of claims in JSON format that can\n   conveniently accommodate
    asserted originating-identity information\n   and that are easily extensible for
    use in the extension mechanisms\n   defined below.  Additionally, JWS provides
    a path for updating\n   methods and cryptographic algorithms used for the associated
    digital\n   signatures.\n   JWS defines the use of JSON data structures in a specified
    canonical\n   format for signing data corresponding to the JSON Object Signing
    and\n   Encryption (JOSE) Header, JWS Payload, and JWS Signature.  JWT\n   defines
    a set of claims that are represented by specified JSON\n   objects that can be
    extended with custom keys for specific\n   applications.  The next sections define
    the header and claims that\n   MUST be minimally used with JWT and JWS for PASSporT.\n
    \  PASSporT specifically uses this token format and defines claims that\n   convey
    the identity of the origination and destination of personal\n   communications.
    \ The primary value asserted in a PASSporT object is\n   the originating identity
    representing the identity of the calling\n   party or the initiator of a personal-communications
    session.  The\n   signer of a PASSporT object may or may not correspond to the\n
    \  originating identity.  For a given application's use or using\n   protocol
    of PASSporT, the creation of the PASSporT object is\n   performed by an entity
    that is authoritative to assert the caller's\n   identity.  This authority is
    represented by the certificate\n   credentials and the signature, and the PASSporT
    object is created and\n   initiated to the destination(s) per the application's
    choice of\n   authoritative point(s) in the network.  For example, the PASSporT\n
    \  object could be created at a device that has authenticated with a\n   user
    or at a network entity with an authenticated trust relationship\n   with that
    device and its user.  Destination identities represent the\n   intended destination
    of the personal communications, i.e., the\n   identity(s) being called by the
    caller.  The destination point or\n   points determined by the application need
    to have the capability to\n   verify the PASSporT and the digital signature.  The
    PASSporT-\n   associated certificate is used to validate the authority of the\n
    \  originating signer, generally via a certificate chain to the trust\n   anchor
    for that application.\n"
  title: 3.  PASSporT Overview
- contents:
  - "4.  PASSporT Header\n   The JWS token header is a JOSE Header ([RFC7515], Section
    4) that\n   defines the type and encryption algorithm used in the token.\n   The
    PASSporT header should include, at a minimum, the Header\n   Parameters defined
    in the next three subsections.\n"
  - contents:
    - "4.1.  \"typ\" (Type) Header Parameter\n   The \"typ\" (Type) Header Parameter
      is defined in JWS ([RFC7515],\n   Section 4.1.9) to declare the media type of
      the complete JWS.\n   For the PASSporT, the \"typ\" header MUST be the string
      \"passport\".\n   This signifies that the encoded token is a JWT of type \"passport\".\n"
    title: 4.1.  "typ" (Type) Header Parameter
  - contents:
    - "4.2.  \"alg\" (Algorithm) Header Parameter\n   The \"alg\" (Algorithm) Header
      Parameter is defined in JWS ([RFC7515],\n   Section 4.1.1).  This definition
      includes the ability to specify the\n   use of a cryptographic algorithm for
      the signature part of the JWS.\n   It also refers to a list of defined \"alg\"
      values as part of a\n   registry established by JSON Web Algorithms (JWA) ([RFC7518],\n
      \  Section 3.1).\n   For the creation and verification of PASSporTs and their
      digital\n   signatures, implementations MUST support ES256 as defined in JWA\n
      \  ([RFC7518], Section 3.4).  Implementations MAY support other\n   algorithms
      registered in the \"JSON Web Signature and Encryption\n   Algorithms\" registry
      created by [RFC7518].  The contents of that\n   registry may be updated in the
      future, depending on cryptographic\n   strength requirements guided by current
      security best practices.  The\n   mandatory-to-support algorithm for PASSporTs
      may likewise be updated\n   in future updates to this document.\n   Implementations
      of PASSporT digital signatures using ES256 as defined\n   above SHOULD use the
      deterministic Elliptic Curve Digital Signature\n   Algorithm (ECDSA) if or when
      supported for the reasons stated in\n   [RFC6979].\n"
    title: 4.2.  "alg" (Algorithm) Header Parameter
  - contents:
    - "4.3.  \"x5u\" (X.509 URL) Header Parameter\n   As defined in JWS ([RFC7515],
      Section 4.1.5), the \"x5u\" Header\n   Parameter defines a URI [RFC3986] referring
      to the resource for the\n   X.509 public key certificate or certificate chain
      [RFC5280]\n   corresponding to the key used to digitally sign the JWS.  Generally,\n
      \  as defined in JWS ([RFC7515], Section 4.1.5), this would correspond\n   to
      an HTTPS or DNSSEC resource using integrity protection.\n"
    title: 4.3.  "x5u" (X.509 URL) Header Parameter
  - contents:
    - "4.4.  Example PASSporT Header\n   An example of the header would be the following,
      including the\n   specified passport type, ES256 algorithm, and a URI referencing
      the\n   network location of the certificate needed to validate the PASSporT\n
      \  signature.\n   {\n     \"typ\":\"passport\",\n     \"alg\":\"ES256\",\n     \"x5u\":\"https://cert.example.org/passport.cer\"\n
      \  }\n"
    title: 4.4.  Example PASSporT Header
  title: 4.  PASSporT Header
- contents:
  - "5.  PASSporT Payload\n   The token claims consist of the information that needs
    to be verified\n   at the destination party.  These claims follow the definition
    of a\n   JWT claim ([RFC7519], Section 4) and are encoded as defined by the\n
    \  JWS Payload ([RFC7515], Section 3).\n   PASSporT defines the use of a standard
    JWT-defined claim as well as\n   custom claims corresponding to the two parties
    associated with\n   personal communications -- the originator and destination,
    as\n   detailed below.\n   For PASSporT, any claim names MUST use the ASCII character
    set.  Any\n   claim values can contain characters that are outside the ASCII range,\n
    \  consistent with the rules of creating a JWT Claims Set as defined in\n   [RFC7519],
    Section 7.1.\n"
  - contents:
    - '5.1.  JWT-Defined Claims

      '
    - contents:
      - "5.1.1.  \"iat\" (Issued At) Claim\n   The JSON claim MUST include the \"iat\"
        (Issued At) claim ([RFC7519],\n   Section 4.1.6).  As defined, the \"iat\"
        claim should be set to the\n   date and time of issuance of the JWT and MUST
        indicate the date and\n   time of the origination of the personal communications.
        \ The time\n   value should be of the NumericDate format as defined in [RFC7519],\n
        \  Section 2.  This is included for securing the token against replay\n   and
        cut-and-paste attacks, as explained further in Section 10\n   (\"Security
        Considerations\").\n"
      title: 5.1.1.  "iat" (Issued At) Claim
    title: 5.1.  JWT-Defined Claims
  - contents:
    - '5.2.  PASSporT-Specific Claims

      '
    - contents:
      - "5.2.1.  Originating and Destination Identity Claims\n   The originating identity
        and the destination identity are represented\n   by two claims that are required
        for PASSporT -- the \"orig\" and \"dest\"\n   claims.  Both \"orig\" and \"dest\"
        MUST contain claim values that are\n   identity claim JSON objects where the
        child claim name represents an\n   identity type and the claim value is the
        identity string, both\n   defined in subsequent subsections.  Currently, these
        identities can\n   be represented as either telephone numbers or Uniform Resource\n
        \  Indicators (URIs).\n   The \"orig\" claim is a JSON object with the claim
        name of \"orig\" and a\n   claim value that is a JSON object representing
        the asserted identity\n   of any type (currently either \"tn\" or \"uri\")
        of the originator of the\n   personal-communications signaling.  There MUST
        be exactly one \"orig\"\n   claim with exactly one identity claim object in
        a PASSporT object.\n   Note: As explained in Section 3, the originating identity
        represents\n   the calling party and may or may not correspond to the authoritative\n
        \  signer of the token.\n   The \"dest\" claim is a JSON object with the claim
        name of \"dest\" and\n   MUST have at least one identity claim object.  The
        \"dest\" claim value\n   is an array containing one or more identity claim
        JSON objects\n   representing the destination identities of any type (currently
        \"tn\"\n   or \"uri\").  If the \"dest\" claim value array contains both \"tn\"
        and\n   \"uri\" claim names, the JSON object should list the \"tn\" array
        first\n   and the \"uri\" array second.  Within the \"tn\" and \"uri\" arrays,
        the\n   identity strings should be put in lexicographical order, including\n
        \  the scheme-specific portion of the URI characters.\n   Note: As explained
        in Section 3, the destination identity represents\n   the called party and
        may or may not correspond to the authoritative\n   party verifying the token
        signature.\n"
      - contents:
        - "5.2.1.1.  \"tn\" (Telephone Number) Identity\n   If the originating or
          destination identity is a telephone number, the\n   claim name representing
          the identity MUST be \"tn\".\n   The claim value for the \"tn\" claim is
          the telephone number and MUST\n   be canonicalized according to the procedures
          specified in [RFC8224],\n   Section 8.3.\n"
        title: 5.2.1.1.  "tn" (Telephone Number) Identity
      - contents:
        - "5.2.1.2.  \"uri\" (URI) Identity\n   If any of the originating or destination
          identities is in the form of\n   a URI as defined in [RFC3986], the claim
          name representing the\n   identity MUST be \"uri\", and the claim value
          is the URI form of the\n   identity.\n"
        title: 5.2.1.2.  "uri" (URI) Identity
      - contents:
        - "5.2.1.3.  Future Identity Forms\n   We recognize that in the future there
          may be other standard\n   mechanisms for representing identities.  The \"orig\"
          and \"dest\" claims\n   currently support \"tn\" and \"uri\" but could be
          extended in the future\n   to allow for other identity types with new IANA-registered
          unique\n   types to represent these forms.\n"
        title: 5.2.1.3.  Future Identity Forms
      - contents:
        - "5.2.1.4.  Examples\n   The following is an example of a single originator
          with telephone\n   number identity +12155551212, to a single destination
          with URI\n   identity \"sip:alice@example.com\":\n   {\n     \"dest\":{\"uri\":[\"sip:alice@example.com\"]},\n
          \    \"iat\":1443208345,\n     \"orig\":{\"tn\":\"12155551212\"}\n   }\n
          \  The following is an example of a single originator with telephone\n   number
          identity +12155551212, to multiple destination identities with\n   telephone
          number identity +12125551212 and two URI identities --\n   \"sip:alice@example.com\"
          and \"sip:bob@example.com\":\n   {\n     \"dest\":{\n       \"tn\":[\"12125551212\"],\n
          \      \"uri\":[\"sip:alice@example.com\",\n         \"sip:bob@example.net\"]\n
          \    },\n     \"iat\":1443208345,\n     \"orig\":{\"tn\":\"12155551212\"}\n
          \  }\n"
        title: 5.2.1.4.  Examples
      title: 5.2.1.  Originating and Destination Identity Claims
    - contents:
      - "5.2.2.  \"mky\" (Media Key) Claim\n   Some protocols that use PASSporT may
        also want to protect media\n   security keys delivered within their signaling
        in order to bind those\n   keys to the identities established in the signaling
        layers.  The\n   \"mky\" claim is an optional PASSporT claim defining the
        assertion of\n   media key fingerprints carried in the Session Description
        Protocol\n   (SDP) [RFC4566] via the \"a=fingerprint\" attribute ([RFC4572],\n
        \  Section 5).  This claim can support either a single fingerprint or\n   multiple
        fingerprints appearing in a single SDP body corresponding to\n   one or more
        media streams offered as defined in [RFC8122].\n   The \"mky\" claim MUST
        be formatted as a JSON object with an array that\n   includes the \"alg\"
        and \"dig\" claims with the corresponding algorithm\n   and hexadecimal values.
        \ If there is more than one fingerprint value\n   associated with different
        media streams in SDP, the fingerprint\n   values MUST be constructed as a
        JSON array denoted by square brackets\n   (\"[\" and \"]\").  For the \"dig\"
        claim, the claim value MUST be the hash\n   of the hexadecimal value without
        any colons.\n   The \"mky\" claim is a JSON object with a claim name of \"mky\"
        and a\n   claim value of a JSON array denoted by brackets.  The \"mky\" claim\n
        \  value JSON array MUST be constructed as follows:\n   1.  Take each \"a=fingerprint\"
        line carried in the SDP.\n   2.  Sort the lines based on the UTF-8 [RFC3629]
        encoding of the\n       concatenation of the \"alg\" and \"dig\" claim value
        strings.\n   3.  Encode the array in the order of the sorted lines, where
        each\n       \"mky\" array element is a JSON object with two elements\n       corresponding
        to the \"alg\" and \"dig\" objects, with \"alg\" first\n       and \"dig\"
        second.\n   An example claim with the \"mky\" claim is as follows:\n   For
        an SDP offer that includes the following fingerprint values,\n   a=fingerprint:sha-256
        4A:AD:B9:B1:3F:82:18:3B:54:02:12:DF:3E:\n   5D:49:6B:19:E5:7C:AB:3E:4B:65:2E:7D:46:3F:54:42:CD:54:F1\n
        \  a=fingerprint:sha-256 02:1A:CC:54:27:AB:EB:9C:53:3F:3E:4B:65\n   :2E:7D:46:3F:54:42:CD:54:F1:7A:03:A2:7D:F9:B0:7F:46:19:B2\n
        \  the PASSporT Payload object would be:\n   {\n     \"dest\":{\"uri\":[\"sip:alice@example.com\"]},\n
        \    \"iat\":1443208345,\n     \"mky\":[\n       {\n         \"alg\":\"sha-256\",\n
        \        \"dig\":\"021ACC5427ABEB9C533F3E4B652E7D463F5442CD54\n           F17A03A27DF9B07F4619B2\"\n
        \      },\n       {\n         \"alg\":\"sha-256\",\n         \"dig\":\"4AADB9B13F82183B540212DF3E5D496B19E57C\n
        \          AB3E4B652E7D463F5442CD54F1\"\n       }\n     ],\n     \"orig\":{\"tn\":\"12155551212\"}\n
        \  }\n"
      title: 5.2.2.  "mky" (Media Key) Claim
    title: 5.2.  PASSporT-Specific Claims
  title: 5.  PASSporT Payload
- contents:
  - "6.  PASSporT Signature\n   The signature of the PASSporT is created as specified
    by JWS\n   ([RFC7515], Section 5.1, Steps 1 through 6).  PASSporT MUST use the\n
    \  JWS Protected Header.  For the JWS Payload and the JWS Protected\n   Header,
    however, the lexicographic ordering and whitespace rules\n   described in Sections
    4 and 5 of this document, and the JSON\n   serialization rules in Section 9 of
    this document, MUST be followed.\n   Appendix A of this document has a detailed
    example of how to follow\n   the steps to create the JWS Signature.\n   Step 7
    of the JSON serialization procedure in [RFC7515], Section 5.1\n   is not supported
    for PASSporT.\n   [RFC7515], Section 5.1, Step 8 describes the method to create
    the\n   final JWS Compact Serialization form of the PASSporT.\n"
  title: 6.  PASSporT Signature
- contents:
  - "7.  Compact Form of PASSporT\n   For a using protocol of PASSporT, the PASSporT
    claims as well as the\n   PASSporT header may include redundant or default information
    that\n   could be reconstructed at the destination based on information\n   provided
    in the signaling protocol transporting the PASSporT object.\n   In this case,
    it may be advantageous to have a more compact form of\n   PASSporT to save the
    transmission of the bytes needed to represent\n   the header and claims.\n   This
    specification defines the compact form of the PASSporT, in the\n   spirit of the
    form defined in [RFC7515], Appendix F, with the use of\n   two periods (\"..\")
    to represent the header and claim objects being\n   removed, followed by the PASSporT
    signature as defined in Section 6,\n   and the need for the destination to reconstruct
    the header and claim\n   objects in order to verify the signature.\n   In order
    to construct the compact form of the PASSporT string, the\n   procedure described
    in Section 6 MUST be used, with the exception of\n   [RFC7515], Section 5.1, Step
    8.  This step would be replaced by the\n   following construction of the compact
    form of PASSporT, \"..\" ||\n   BASE64URL(JWS Signature).\n   The using protocol
    of the compact form of PASSporT MUST be\n   accompanied by a specification for
    how the header and claims objects\n   can be reconstructed from information in
    the signaling protocol being\n   used.\n   Note that the full form of the PASSporT,
    containing the entire\n   header, payload, and signature, should also use the
    lexicographic\n   ordering and whitespace serialization rules, particularly in
    the case\n   where some using protocols or interworking between protocols may\n
    \  require switching between full and compact forms and maintaining the\n   integrity
    of the signature.\n"
  - contents:
    - "7.1.  Example Compact Form of PASSporT\n   The compact form of the following
      example token (with line breaks\n   between periods used for readability purposes
      only)\n   eyJhbGciOiJFUzI1NiIsInR5cCI6InBhc3Nwb3J0IiwieDV1IjoiaHR0cHM6Ly9j\n
      \  ZXJ0LmV4YW1wbGUub3JnL3Bhc3Nwb3J0LmNlciJ9\n   .\n   eyJkZXN0Ijp7InVyaSI6WyJzaXA6YWxpY2VAZXhhbXBsZS5jb20iXX0sImlhdCI\n
      \  6IjE0NDMyMDgzNDUiLCJvcmlnIjp7InRuIjoiMTIxNTU1NTEyMTIifX0\n   .\n   rq3pjT1hoRwakEGjHCnWSwUnshd0-zJ6F1VOgFWSjHBr8Qjpjlk-cpFYpFYsojN\n
      \  CpTzO3QfPOlckGaS6hEck7w\n   would be as follows:\n   ..rq3pjT1hoRwakEGjHCnWSwUnshd0-zJ6F1VOgFWSjHBr8Qjpjlk-cpFYpFYsojN\n
      \  CpTzO3QfPOlckGaS6hEck7w\n"
    title: 7.1.  Example Compact Form of PASSporT
  title: 7.  Compact Form of PASSporT
- contents:
  - "8.  Extending PASSporT\n   PASSporT includes the bare-minimum set of claims needed
    to securely\n   assert the originating identity and support the secure properties\n
    \  discussed in various parts of this document.  JWT supports a\n   straightforward
    way to add additional asserted or signed information\n   by simply adding new
    claims.  PASSporT can be extended beyond the\n   defined base set of claims to
    represent other information requiring\n   assertion or validation beyond the originating
    identity itself as\n   needed.\n"
  - contents:
    - "8.1.  \"ppt\" (PASSporT) Header Parameter\n   Any using protocol can extend
      the payload of PASSporT with additional\n   JWT claims.  JWT claims are managed
      by the \"JSON Web Token Claims\"\n   IANA registry as defined in [RFC7519],
      Section 10.1.  Implementations\n   of PASSporT MUST support the baseline claims
      defined in Section 5.2\n   and MAY support extended claims.  If it is necessary
      for an extension\n   to PASSporT to require that a relying party support a particular\n
      \  extended claim or set of claims in the PASSporT object, it can do so\n   by
      specifying a \"ppt\" element for the PASSporT JOSE Header.  All\n   values of
      \"ppt\" need to be defined in a specification that associates\n   the new value
      of the \"ppt\" element with the required claims and\n   behaviors.  Relying
      parties MUST fail to validate PASSporT objects\n   containing an unsupported
      \"ppt\".\n   Using protocols MUST explicitly define how they carry each claim
      and\n   the rules for how the header and payload objects are constructed\n   beyond
      the lexicographical and serialization rules defined in this\n   document.\n
      \  Using protocols that carry the compact form of PASSporT (Section 7)\n   instead
      of the full form MUST use only mandatory extensions signaled\n   with \"ppt\"
      -- if a using protocol were to add additional optional\n   claims to a PASSporT
      object it carried in compact form, relying\n   parties would have no way to
      reconstruct the token.  Moreover, using\n   protocols that support the compact
      form of PASSporT MUST have some\n   field to signal \"ppt\" to relying parties,
      as the compact form of\n   PASSporT omits the JOSE Header.\n"
    title: 8.1.  "ppt" (PASSporT) Header Parameter
  - contents:
    - "8.2.  Example Extended PASSporT Header\n   An example header with a PASSporT
      extension type of \"foo\" is as\n   follows:\n   {\n     \"alg\":\"ES256\",\n
      \    \"ppt\":\"foo\",\n     \"typ\":\"passport\",\n     \"x5u\":\"https://tel.example.org/passport.cer\"\n
      \  }\n"
    title: 8.2.  Example Extended PASSporT Header
  - contents:
    - "8.3.  Extended PASSporT Claims\n   Specifications that define extensions to
      the PASSporT mechanism MUST\n   explicitly specify what claims they include
      beyond the base set of\n   claims from this document, the order in which they
      will appear, and\n   any further information necessary to implement the extension.
      \ All\n   extensions MUST include the baseline PASSporT claim elements\n   specified
      in Section 5; claims may only be appended to the claims\n   object specified;
      they can never be removed or reordered.  Specifying\n   new claims follows the
      baseline JWT procedures ([RFC7519],\n   Section 10.1).  Understanding an extension
      or new claims defined by\n   the extension on the destination verification of
      the PASSporT is\n   optional.  The creator of a PASSporT object cannot assume
      that\n   destination systems will understand any given extension.\n   Verification
      of PASSporTs by destination systems that do support an\n   extension may then
      trigger appropriate application-level behavior in\n   the presence of an extension;
      authors of extensions should provide\n   appropriate extension-specific guidance
      to application developers on\n   this point.\n   An example set of extended
      claims, extending the first example in\n   Section 5.2.1.4 using \"bar\" as
      the newly defined claim, would be as\n   follows:\n   {\n     \"bar\":\"beyond
      all recognition\"\n     \"dest\":{\"uri\":[\"sip:alice@example.com\"]},\n     \"iat\":1443208345,\n
      \    \"orig\":{\"tn\":\"12155551212\"}\n   }\n"
    title: 8.3.  Extended PASSporT Claims
  title: 8.  Extending PASSporT
- contents:
  - "9.  Deterministic JSON Serialization\n   JSON objects can include spaces and
    line breaks, and key value pairs\n   can occur in any order.  It is therefore
    a non-deterministic string\n   format.  In order to make the digital signature
    verification work\n   deterministically, the JSON representation of the JWS Protected\n
    \  Header object and JWS Payload object MUST be computed as follows.\n   The JSON
    object MUST follow the following rules.  These rules are\n   based on the thumbprint
    of a JSON Web Key (JWK) as defined in\n   Section 3 Step 1 of [RFC7638].\n   1.
    \ The JSON object MUST contain no whitespace or line breaks before\n       or
    after any syntactic elements.\n   2.  JSON objects MUST have the keys ordered
    lexicographically by the\n       Unicode [UNICODE] code points of the member names.\n
    \  3.  JSON value literals MUST be lowercase.\n   4.  JSON numbers are to be encoded
    as integers unless the field is\n       defined to be encoded otherwise.\n   5.
    \ Encoding rules MUST be applied recursively to member values and\n       array
    values.\n   Note: For any PASSporT extension claims, member names within the\n
    \  scope of a JSON object MUST NOT be equal to other member names;\n   otherwise,
    serialization will not be deterministic.\n"
  - contents:
    - "9.1.  Example PASSporT Deterministic JSON Form\n   This section demonstrates
      the deterministic JSON serialization for\n   the example PASSporT Payload shown
      in Section 5.2.1.4.\n   The initial JSON object is shown here:\n   {\n     \"dest\":{\"uri\":[\"sip:alice@example.com\"]},\n
      \    \"orig\":{\"tn\":\"12155551212\"}\n     \"iat\":1443208345,\n     \"mky\":[\n
      \      {\n         \"alg\":\"sha-256\",\n         \"dig\":\"021ACC5427ABEB9C533F3E4B652E7D463F5442CD54\n
      \          F17A03A27DF9B07F4619B2\"\n       },\n       {\n         \"alg\":\"sha-256\",\n
      \        \"dig\":\"4AADB9B13F82183B540212DF3E5D496B19E57C\n           AB3E4B652E7D463F5442CD54F1\"\n
      \      }\n     ],\n   }\n   The parent members of the JSON object are as follows:\n
      \  o  \"dest\"\n   o  \"orig\"\n   o  \"iat\"\n   o  \"mky\"\n   Their lexicographic
      order is:\n   o  \"dest\"\n   o  \"iat\"\n   o  \"mky\"\n   o  \"orig\"\n   The
      final constructed deterministic JSON serialization\n   representation, with
      whitespace and line breaks removed (with line\n   breaks used for display purposes
      only), is:\n   {\"dest\":{\"uri\":[\"sip:alice@example.com\"],\"iat\":1443208345,\"mky\":\n
      \  [{\"alg\":\"sha-256\",\"dig\":\"021ACC5427ABEB9C533F3E4B652E7D463F5442CD5\n
      \  4F17A03A27DF9B07F4619B2\"},{\"alg\":\"sha-256\",\"dig\":\"4AADB9B13F82183B5\n
      \  40212DF3E5D496B19E57CAB3E4B652E7D463F5442CD54F1\"}],\n   \"orig\":{\"tn\":\"12155551212\"}}\n"
    title: 9.1.  Example PASSporT Deterministic JSON Form
  title: 9.  Deterministic JSON Serialization
- contents:
  - '10.  Security Considerations

    '
  - contents:
    - "10.1.  Avoidance of Replay and Cut-and-Paste Attacks\n   There are a number
      of security considerations regarding the use of\n   the token for the avoidance
      of replay and cut-and-paste attacks.\n   PASSporTs SHOULD only be sent with
      application-level protocol\n   information (e.g., for SIP, an INVITE as defined
      in [RFC3261])\n   corresponding to the required fields in the token.  A unique
      set of\n   token claims and token signature is constructed using the originating\n
      \  identity being asserted with the \"orig\" claim along with the\n   following
      two claims:\n   o  The \"iat\" claim should correspond to a date/time that the
      message\n      was originated.  It should also be within a relative time that
      is\n      reasonable for clock drift and transmission time characteristics\n
      \     associated with the application using the PASSporT.  Therefore,\n      validation
      of the token should consider date and time correlation,\n      which could be
      influenced by usage specific to the signaling\n      protocol and by network
      time differences.\n   o  The \"dest\" claim is included to further restrict
      the use of a\n      valid PASSporT being sent as a replay attack to other destination\n
      \     parties.  The verification of the PASSporT at the destination\n      should
      verify that the \"dest\" claim matches the destination party\n      as the intended
      recipient of the message.\n"
    title: 10.1.  Avoidance of Replay and Cut-and-Paste Attacks
  - contents:
    - "10.2.  Solution Considerations\n   The use of PASSporTs based on the validation
      of the digital signature\n   and the associated certificate requires consideration
      of the\n   authentication and authority or reputation of the signer to attest
      to\n   the identity being asserted.  The following considerations should be\n
      \  recognized when using PASSporT:\n   o  The use of this token should not,
      in its own right, be considered\n      a full solution for absolute non-repudiation
      of the identity being\n      asserted.\n   o  In many applications, the signer
      and the end user represented by\n      the asserted identity may not be one
      and the same.  For example,\n      when a service provider signs and validates
      the token on behalf of\n      the user consuming the service, the provider MUST
      have an\n      authenticated and secure relationship with the end user or the\n
      \     device initiating and terminating the communications signaling.\n   o
      \ Applications that use PASSporT should ensure that the verification\n      of
      the signature includes a means for verifying that the signer is\n      authoritative
      through the use of an application-specific or\n      service-specific set of
      common trust anchors for the application.\n"
    title: 10.2.  Solution Considerations
  title: 10.  Security Considerations
- contents:
  - '11.  IANA Considerations

    '
  - contents:
    - "11.1.  Media Type Registration\n   This section registers the \"application/passport\"
      media type (see\n   [RFC2046] for the definition of \"media type\") in the \"Media
      Types\"\n   registry in the manner described in [RFC6838], to indicate that
      the\n   content is a PASSporT-defined JWT.\n   o  Type name: application\n   o
      \ Subtype name: passport\n   o  Required parameters: N/A\n   o  Optional parameters:
      N/A\n   o  Encoding considerations: 8bit; application/passport values are\n
      \     encoded as a series of base64url-encoded values (some of which may\n      be
      the empty string) separated by period (\".\") characters.\n   o  Security considerations:
      See the Security Considerations section\n      of [RFC7515].\n   o  Interoperability
      considerations: N/A\n   o  Published specification: RFC 8225\n   o  Applications
      that use this media type: Secure Telephone Identity\n      Revisited (STIR)
      and other applications that require\n      identity-related assertion\n   o
      \ Fragment identifier considerations: N/A\n   o  Additional information:\n         Magic
      number(s): N/A\n         File extension(s): N/A\n         Macintosh file type
      code(s): N/A\n   o  Person & email address to contact for further information:
      Chris\n      Wendt, chris-ietf@chriswendt.net\n   o  Intended usage: COMMON\n
      \  o  Restrictions on usage: none\n   o  Author: Chris Wendt <chris-ietf@chriswendt.net>\n
      \  o  Change Controller: IESG\n   o  Provisional registration?  No\n"
    title: 11.1.  Media Type Registration
  - contents:
    - "11.2.  Registrations in \"JSON Web Token Claims\"\n   Claim Name: \"orig\"\n
      \  Claim Description: Originating Identity String\n   Change Controller: IESG\n
      \  Reference: Section 5.2.1 of RFC 8225\n   Claim Name: \"dest\"\n   Claim Description:
      Destination Identity String\n   Change Controller: IESG\n   Reference: Section
      5.2.1 of RFC 8225\n   Claim Name: \"mky\"\n   Claim Description: Media Key Fingerprint
      String\n   Change Controller: IESG\n   Reference: Section 5.2.2 of RFC 8225\n"
    title: 11.2.  Registrations in "JSON Web Token Claims"
  - contents:
    - "11.3.  Registration in \"JSON Web Signature and Encryption Header\n       Parameters\"\n
      \  Header Parameter Name: \"ppt\"\n   Header Parameter Description: PASSporT
      extension identifier\n   Header Parameter Usage Location(s): JWS\n   Change
      Controller: IESG\n   Reference: Section 8.1 of RFC 8225\n"
    title: 11.3.  Registration in "JSON Web Signature and Encryption Header
  - contents:
    - "11.4.  PASSporT Extensions Registry\n   The IANA has created a new PASSporT
      Type registry for \"ppt\" parameter\n   values.  That parameter and its values
      are defined in Section 8.1.\n   New registry entries must contain the name of
      the \"ppt\" parameter\n   value and the specification in which the value is
      described.  The\n   policy for this registry is Specification Required [RFC8126].\n"
    title: 11.4.  PASSporT Extensions Registry
  title: 11.  IANA Considerations
- contents:
  - '12.  References

    '
  - contents:
    - "12.1.  Normative References\n   [RFC2046]  Freed, N. and N. Borenstein, \"Multipurpose
      Internet Mail\n              Extensions (MIME) Part Two: Media Types\", RFC
      2046,\n              DOI 10.17487/RFC2046, November 1996,\n              <https://www.rfc-editor.org/info/rfc2046>.\n
      \  [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n
      \             <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC3629]  Yergeau,
      F., \"UTF-8, a transformation format of\n              ISO 10646\", STD 63,
      RFC 3629, DOI 10.17487/RFC3629,\n              November 2003, <https://www.rfc-editor.org/info/rfc3629>.\n
      \  [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n              Resource
      Identifier (URI): Generic Syntax\", STD 66,\n              RFC 3986, DOI 10.17487/RFC3986,
      January 2005,\n              <https://www.rfc-editor.org/info/rfc3986>.\n   [RFC4566]
      \ Handley, M., Jacobson, V., and C. Perkins, \"SDP: Session\n              Description
      Protocol\", RFC 4566, DOI 10.17487/RFC4566,\n              July 2006, <https://www.rfc-editor.org/info/rfc4566>.\n
      \  [RFC4572]  Lennox, J., \"Connection-Oriented Media Transport over the\n              Transport
      Layer Security (TLS) Protocol in the Session\n              Description Protocol
      (SDP)\", RFC 4572,\n              DOI 10.17487/RFC4572, July 2006,\n              <https://www.rfc-editor.org/info/rfc4572>.\n
      \  [RFC6838]  Freed, N., Klensin, J., and T. Hansen, \"Media Type\n              Specifications
      and Registration Procedures\", BCP 13,\n              RFC 6838, DOI 10.17487/RFC6838,
      January 2013,\n              <https://www.rfc-editor.org/info/rfc6838>.\n   [RFC6979]
      \ Pornin, T., \"Deterministic Usage of the Digital Signature\n              Algorithm
      (DSA) and Elliptic Curve Digital Signature\n              Algorithm (ECDSA)\",
      RFC 6979, DOI 10.17487/RFC6979,\n              August 2013, <https://www.rfc-editor.org/info/rfc6979>.\n
      \  [RFC7515]  Jones, M., Bradley, J., and N. Sakimura, \"JSON Web\n              Signature
      (JWS)\", RFC 7515, DOI 10.17487/RFC7515,\n              May 2015, <https://www.rfc-editor.org/info/rfc7515>.\n
      \  [RFC7518]  Jones, M., \"JSON Web Algorithms (JWA)\", RFC 7518,\n              DOI
      10.17487/RFC7518, May 2015,\n              <https://www.rfc-editor.org/info/rfc7518>.\n
      \  [RFC7519]  Jones, M., Bradley, J., and N. Sakimura, \"JSON Web Token\n              (JWT)\",
      RFC 7519, DOI 10.17487/RFC7519, May 2015,\n              <https://www.rfc-editor.org/info/rfc7519>.\n
      \  [RFC7638]  Jones, M. and N. Sakimura, \"JSON Web Key (JWK)\n              Thumbprint\",
      RFC 7638, DOI 10.17487/RFC7638,\n              September 2015, <https://www.rfc-editor.org/info/rfc7638>.\n
      \  [RFC8122]  Lennox, J. and C. Holmberg, \"Connection-Oriented Media\n              Transport
      over the Transport Layer Security (TLS) Protocol\n              in the Session
      Description Protocol (SDP)\", RFC 8122,\n              DOI 10.17487/RFC8122,
      March 2017,\n              <https://www.rfc-editor.org/info/rfc8122>.\n   [RFC8174]
      \ Leiba, B., \"Ambiguity of Uppercase vs Lowercase in\n              RFC 2119
      Key Words\", BCP 14, RFC 8174,\n              DOI 10.17487/RFC8174, May 2017,\n
      \             <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8224]  Peterson,
      J., Jennings, C., Rescorla, E., and C. Wendt,\n              \"Authenticated
      Identity Management in the Session\n              Initiation Protocol (SIP)\",
      RFC 8224,\n              DOI 10.17487/RFC8224, February 2018,\n              <https://www.rfc-editor.org/info/rfc8224>.\n
      \  [UNICODE]  The Unicode Consortium, \"The Unicode Standard\",\n              <http://www.unicode.org/versions/latest/>.\n"
    title: 12.1.  Normative References
  - contents:
    - "12.2.  Informative References\n   [RFC3261]  Rosenberg, J., Schulzrinne, H.,
      Camarillo, G., Johnston,\n              A., Peterson, J., Sparks, R., Handley,
      M., and E.\n              Schooler, \"SIP: Session Initiation Protocol\", RFC
      3261,\n              DOI 10.17487/RFC3261, June 2002,\n              <https://www.rfc-editor.org/info/rfc3261>.\n
      \  [RFC5280]  Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,\n              Housley,
      R., and W. Polk, \"Internet X.509 Public Key\n              Infrastructure Certificate
      and Certificate Revocation List\n              (CRL) Profile\", RFC 5280, DOI
      10.17487/RFC5280, May 2008,\n              <https://www.rfc-editor.org/info/rfc5280>.\n
      \  [RFC7340]  Peterson, J., Schulzrinne, H., and H. Tschofenig, \"Secure\n              Telephone
      Identity Problem Statement and Requirements\",\n              RFC 7340, DOI
      10.17487/RFC7340, September 2014,\n              <https://www.rfc-editor.org/info/rfc7340>.\n
      \  [RFC8126]  Cotton, M., Leiba, B., and T. Narten, \"Guidelines for\n              Writing
      an IANA Considerations Section in RFCs\", BCP 26,\n              RFC 8126, DOI
      10.17487/RFC8126, June 2017,\n              <https://www.rfc-editor.org/info/rfc8126>.\n"
    title: 12.2.  Informative References
  title: 12.  References
- contents:
  - "Appendix A.  Example ES256-Based PASSporT JWS Serialization and\n             Signature\n
    \  For PASSporT, there will always be a JWS with the following members:\n   o
    \ \"protected\", with the value BASE64URL(UTF8(JWS Protected Header))\n   o  \"payload\",
    with the value BASE64URL(JWS Payload)\n   o  \"signature\", with the value BASE64URL(JWS
    Signature)\n   This example will follow the steps in JWS ([RFC7515], Section 5.1,\n
    \  Steps 1-6 and 8); it incorporates the additional serialization steps\n   required
    for PASSporT.\n   Step 1 for JWS references the JWS Payload.  An example PASSporT\n
    \  Payload is as follows:\n   {\n     \"dest\":{\"uri\":[\"sip:alice@example.com\"]}\n
    \    \"iat\":1471375418,\n     \"orig\":{\"tn\":\"12155551212\"}\n   }\n   This
    would be serialized to the following form (with line break used\n   for display
    purposes only):\n   {\"dest\":{\"uri\":[\"sip:alice@example.com\"]},\"iat\":1471375418,\n
    \  \"orig\":{\"tn\":\"12155551212\"}}\n   Step 2 computes the BASE64URL(JWS Payload),
    producing this value\n   (with line break used for display purposes only):\n   eyJkZXN0Ijp7InVyaSI6WyJzaXA6YWxpY2VAZXhhbXBsZS5jb20iXX0sImlhdCI\n
    \  6MTQ3MTM3NTQxOCwib3JpZyI6eyJ0biI6IjEyMTU1NTUxMjEyIn19\n   For Step 3, an example
    PASSporT Protected Header constructed as a\n   JOSE Header is as follows:\n   {\n
    \    \"alg\":\"ES256\",\n     \"typ\":\"passport\",\n     \"x5u\":\"https://cert.example.org/passport.cer\"\n
    \  }\n   This would be serialized to the following form (with line break used\n
    \  for display purposes only):\n   {\"alg\":\"ES256\",\"typ\":\"passport\",\"x5u\":\"https://cert.example.org\n
    \    /passport.cer\"}\n   Step 4 performs the BASE64URL(UTF8(JWS Protected Header))
    operation\n   and encoding, producing this value (with line break used for display\n
    \  purposes only):\n   eyJhbGciOiJFUzI1NiIsInR5cCI6InBhc3Nwb3J0IiwieDV1IjoiaHR0cHM6Ly9j\n
    \  ZXJ0LmV4YW1wbGUub3JnL3Bhc3Nwb3J0LmNlciJ9\n   Steps 5 and 6 perform the computation
    of the digital signature of the\n   PASSporT Signing Input ASCII(BASE64URL(UTF8(JWS
    Protected Header)) ||\n   \".\" || BASE64URL(JWS Payload)), using ES256 as the
    algorithm and the\n   BASE64URL(JWS Signature).\n   VLBCIVDCaeK6M4hLJb6SHQvacAQVvoiiEOWQ_iUkqk79UD81fHQ0E1b3_GluIkb\n
    \  a7UWYRM47ZbNFdOJquE35cw\n   Step 8 describes how to create the final PASSporT,
    concatenating the\n   values in the order Header.Payload.Signature with period
    (\".\")\n   characters.  For the above example values, this would produce the\n
    \  following (with line breaks between periods used for readability\n   purposes
    only):\n   eyJhbGciOiJFUzI1NiIsInR5cCI6InBhc3Nwb3J0IiwieDV1IjoiaHR0cHM6Ly9j\n
    \  ZXJ0LmV4YW1wbGUub3JnL3Bhc3Nwb3J0LmNlciJ9\n   .\n   eyJkZXN0Ijp7InVyaSI6WyJzaXA6YWxpY2VAZXhhbXBsZS5jb20iXX0sImlhdCI\n
    \  6MTQ3MTM3NTQxOCwib3JpZyI6eyJ0biI6IjEyMTU1NTUxMjEyIn19\n   .\n   VLBCIVDCaeK6M4hLJb6SHQvacAQVvoiiEOWQ_iUkqk79UD81fHQ0E1b3_GluIkb\n
    \  a7UWYRM47ZbNFdOJquE35cw\n"
  - contents:
    - "A.1.  X.509 Private Key in PKCS #8 Format for ES256 Example\n   -----BEGIN
      PRIVATE KEY-----\n   MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgi7q2TZvN9VDFg8Vy\n
      \  qCP06bETrR2v8MRvr89rn4i+UAahRANCAAQWfaj1HUETpoNCrOtp9KA8o0V79IuW\n   ARKt9C1cFPkyd3FBP4SeiNZxQhDrD0tdBHls3/wFe8++K2FrPyQF9vuh\n
      \  -----END PRIVATE KEY-----\n"
    title: 'A.1.  X.509 Private Key in PKCS #8 Format for ES256 Example'
  - contents:
    - "A.2.  X.509 Public Key for ES256 Example\n   -----BEGIN PUBLIC KEY-----\n   MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE8HNbQd/TmvCKwPKHkMF9fScavGeH\n
      \  78YTU8qLS8I5HLHSSmlATLcslQMhNC/OhlWBYC626nIlo7XeebYS7Sb37g==\n   -----END
      PUBLIC KEY-----\n"
    title: A.2.  X.509 Public Key for ES256 Example
  title: Appendix A.  Example ES256-Based PASSporT JWS Serialization and
- contents:
  - "Acknowledgments\n   Particular thanks to members of the ATIS and SIP Forum NNI
    Task\n   Group, including Jim McEachern, Martin Dolly, Richard Shockey, John\n
    \  Barnhill, Christer Holmberg, Victor Pascual Avila, Mary Barnes, and\n   Eric
    Burger, for their review, ideas, and contributions.  Thanks also\n   to Henning
    Schulzrinne, Russ Housley, Alan Johnston, Richard Barnes,\n   Mark Miller, Ted
    Hardie, Dave Crocker, Robert Sparks, and Jim Schaad\n   for valuable feedback
    on the technical and security aspects of the\n   document.  Additional thanks
    to Harsha Bellur for assistance in\n   coding the example tokens.\n"
  title: Acknowledgments
- contents:
  - "Authors' Addresses\n   Chris Wendt\n   Comcast\n   One Comcast Center\n   Philadelphia,
    PA  19103\n   United States of America\n   Email: chris-ietf@chriswendt.net\n
    \  Jon Peterson\n   Neustar Inc.\n   1800 Sutter St. Suite 570\n   Concord, CA
    \ 94520\n   United States of America\n   Email: jon.peterson@neustar.biz\n"
  title: Authors' Addresses
