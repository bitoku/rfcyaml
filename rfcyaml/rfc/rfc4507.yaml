- title: __initial_text__
  contents:
  - "                 Transport Layer Security (TLS) Session\n                  Resumption\
    \ without Server-Side State\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a mechanism that enables the Transport Layer\n\
    \   Security (TLS) server to resume sessions and avoid keeping per-client\n  \
    \ session state.  The TLS server encapsulates the session state into a\n   ticket\
    \ and forwards it to the client.  The client can subsequently\n   resume a session\
    \ using the obtained ticket.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Terminology .....................................................3\n  \
    \ 3. Protocol ........................................................3\n    \
    \  3.1. Overview ...................................................4\n      3.2.\
    \ SessionTicket TLS Extension ................................6\n      3.3. NewSessionTicket\
    \ Handshake Message .........................7\n      3.4. Interaction with TLS\
    \ Session ID ............................8\n   4. Recommended Ticket Construction\
    \ .................................9\n   5. Security Considerations ........................................10\n\
    \      5.1. Invalidating Sessions .....................................11\n  \
    \    5.2. Stolen Tickets ............................................11\n    \
    \  5.3. Forged Tickets ............................................11\n      5.4.\
    \ Denial of Service Attacks .................................11\n      5.5. Ticket\
    \ Protection Key Management ..........................12\n      5.6. Ticket Lifetime\
    \ ...........................................12\n      5.7. Alternate Ticket Formats\
    \ and Distribution Schemes .........12\n      5.8. Identity Privacy, Anonymity,\
    \ and Unlinkability ............12\n   6. Acknowledgements ...............................................13\n\
    \   7. IANA Considerations ............................................13\n  \
    \ 8. References .....................................................14\n    \
    \  8.1. Normative References ......................................14\n      8.2.\
    \ Informative References ....................................14\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document defines a way to resume a Transport Layer\
    \ Security\n   (TLS) session without requiring session-specific state at the TLS\n\
    \   server.  This mechanism may be used with any TLS ciphersuite.  This\n   document\
    \ applies to both TLS 1.0 defined in [RFC2246] and TLS 1.1\n   defined in [RFC4346].\
    \  The mechanism makes use of TLS extensions\n   defined in [RFC4366] and defines\
    \ a new TLS message type.\n   This mechanism is useful in the following situations:\n\
    \   1.  servers that handle a large number of transactions from different\n  \
    \     users\n   2.  servers that desire to cache sessions for a long time\n  \
    \ 3.  ability to load balance requests across servers\n   4.  embedded servers\
    \ with little memory\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   Within this document, the term 'ticket' refers to a cryptographically\n\
    \   protected data structure that is created by the server and consumed\n   by\
    \ the server to rebuild session-specific state.\n   The key words \"MUST\", \"\
    MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\"\
    , \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted\
    \ as described in [RFC2119].\n"
- title: 3.  Protocol
  contents:
  - "3.  Protocol\n   This specification describes a mechanism to distribute encrypted\n\
    \   session-state information in the form of a ticket.  The ticket is\n   created\
    \ by a TLS server and sent to a TLS client.  The TLS client\n   presents the ticket\
    \ to the TLS server to resume a session.\n   Implementations of this specification\
    \ are expected to support both\n   mechanisms.  Other specifications can take\
    \ advantage of the session\n   tickets, perhaps specifying alternative means for\
    \ distribution or\n   selection.  For example, a separate specification may describe\
    \ an\n   alternate way to distribute a ticket and use the TLS extension in\n \
    \  this document to resume the session.  This behavior is beyond the\n   scope\
    \ of the document and would need to be described in a separate\n   specification.\n"
- title: 3.1.  Overview
  contents:
  - "3.1.  Overview\n   The client indicates that it supports this mechanism by including\
    \ a\n   SessionTicket TLS extension in the ClientHello message.  The\n   extension\
    \ will be empty if the client does not already possess a\n   ticket for the server.\
    \  The extension is described in Section 3.2.\n   If the server wants to use this\
    \ mechanism, it stores its session\n   state (such as ciphersuite and master secret)\
    \ to a ticket that is\n   encrypted and integrity-protected by a key known only\
    \ to the server.\n   The ticket is distributed to the client using the NewSessionTicket\n\
    \   TLS handshake message described in Section 3.3.  This message is sent\n  \
    \ during the TLS handshake before the ChangeCipherSpec message, after\n   the\
    \ server has successfully verified the client's Finished message.\n      Client\
    \                                               Server\n      ClientHello\n  \
    \    (empty SessionTicket extension)------->\n                               \
    \                       ServerHello\n                                  (empty\
    \ SessionTicket extension)\n                                                 \
    \    Certificate*\n                                               ServerKeyExchange*\n\
    \                                              CertificateRequest*\n         \
    \                          <--------      ServerHelloDone\n      Certificate*\n\
    \      ClientKeyExchange\n      CertificateVerify*\n      [ChangeCipherSpec]\n\
    \      Finished                     -------->\n                              \
    \                   NewSessionTicket\n                                       \
    \        [ChangeCipherSpec]\n                                   <--------    \
    \         Finished\n      Application Data             <------->     Application\
    \ Data\n   Figure 1: Message flow for full handshake issuing new session ticket\n\
    \   The client caches this ticket along with the master secret and other\n   parameters\
    \ associated with the current session.  When the client\n   wishes to resume the\
    \ session, it includes the ticket in the\n   SessionTicket extension within the\
    \ ClientHello message.  The server\n   then decrypts the received ticket, verifies\
    \ the ticket's validity,\n   retrieves the session state from the contents of\
    \ the ticket, and uses\n   this state to resume the session.  The interaction\
    \ with the TLS\n   Session ID is described in Section 3.4.  If the server successfully\n\
    \   verifies the client's ticket, then it may renew the ticket by\n   including\
    \ a NewSessionTicket handshake message after the ServerHello.\n      Client  \
    \                                              Server\n      ClientHello\n   \
    \   (SessionTicket extension)      -------->\n                               \
    \                        ServerHello\n                                   (empty\
    \ SessionTicket extension)\n                                                 \
    \ NewSessionTicket\n                                                [ChangeCipherSpec]\n\
    \                                    <--------             Finished\n      [ChangeCipherSpec]\n\
    \      Finished                      -------->\n      Application Data       \
    \       <------->     Application Data\n        Figure 2: Message flow for abbreviated\
    \ handshake using new\n                              session ticket\n   A recommended\
    \ ticket format is given in Section 4.\n   If the server cannot or does not want\
    \ to honor the ticket, then it\n   can initiate a full handshake with the client.\n\
    \   In the case that the server does not wish to issue a new ticket at\n   this\
    \ time, it just completes the handshake without including a\n   SessionTicket\
    \ extension or NewSessionTicket handshake message.  This\n   is shown below (this\
    \ flow is identical to Figure 1 in RFC 2246,\n   except for the session ticket\
    \ extension in the first message):\n      Client                             \
    \                  Server\n      ClientHello\n      (SessionTicket extension)\
    \    -------->\n                                                      ServerHello\n\
    \                                                     Certificate*\n         \
    \                                      ServerKeyExchange*\n                  \
    \                            CertificateRequest*\n                           \
    \        <--------      ServerHelloDone\n      Certificate*\n      ClientKeyExchange\n\
    \      CertificateVerify*\n      [ChangeCipherSpec]\n      Finished          \
    \           -------->\n                                               [ChangeCipherSpec]\n\
    \                                   <--------             Finished\n      Application\
    \ Data             <------->     Application Data\n       Figure 3: Message flow\
    \ for server completing full handshake\n                    without issuing new\
    \ session ticket\n   If the server rejects the ticket, it may still wish to issue\
    \ a new\n   ticket after performing the full handshake as shown below (this flow\n\
    \   is identical to Figure 1, except the SessionTicket extension in the\n   Client\
    \ Hello is not empty):\n      Client                                         \
    \      Server\n      ClientHello\n      (SessionTicket extension) -------->\n\
    \                                                      ServerHello\n         \
    \                         (empty SessionTicket extension)\n                  \
    \                                   Certificate*\n                           \
    \                    ServerKeyExchange*\n                                    \
    \          CertificateRequest*\n                               <--------     \
    \     ServerHelloDone\n      Certificate*\n      ClientKeyExchange\n      CertificateVerify*\n\
    \      [ChangeCipherSpec]\n      Finished                 -------->\n        \
    \                                         NewSessionTicket\n                 \
    \                              [ChangeCipherSpec]\n                          \
    \     <--------                 Finished\n      Application Data         <------->\
    \         Application Data\n   Figure 4: Message flow for server rejecting ticket,\
    \ performing full\n                 handshake and issuing new session ticket\n"
- title: 3.2.  SessionTicket TLS Extension
  contents:
  - "3.2.  SessionTicket TLS Extension\n   The SessionTicket TLS extension is based\
    \ on [RFC4366].  The format of\n   the ticket is an opaque structure used to carry\
    \ session-specific\n   state information.  This extension may be sent in the ClientHello\
    \ and\n   ServerHello.\n   If the client possesses a ticket that it wants to use\
    \ to resume a\n   session, then it includes the ticket in the SessionTicket extension\n\
    \   in the ClientHello.  If the client does not have a ticket and is\n   prepared\
    \ to receive one in the NewSessionTicket handshake message,\n   then it MUST include\
    \ a zero-length ticket in the SessionTicket\n   extension.  If the client is not\
    \ prepared to receive a ticket in the\n   NewSessionTicket handshake message then\
    \ it MUST NOT include a\n   SessionTicket extension unless it is sending a non-empty\
    \ ticket it\n   received through some other means from the server.\n   The server\
    \ uses an zero length SessionTicket extension to indicate to\n   the client that\
    \ it will send a new session ticket using the\n   NewSessionTicket handshake message\
    \ described in Section 3.3.  The\n   server MUST send this extension in the ServerHello\
    \ if it wishes to\n   issue a new ticket to the client using the NewSessionTicket\
    \ handshake\n   message.  The server MUST NOT send this extension if it does not\n\
    \   receive one in the ClientHello.\n   If the server fails to verify the ticket,\
    \ then it falls back to\n   performing a full handshake.  If the ticket is accepted\
    \ by the server\n   but the handshake fails, the client SHOULD delete the ticket.\n\
    \   The SessionTicket extension has been assigned the number 35.  The\n   format\
    \ of the SessionTicket extension is given at the end of this\n   section.\n  \
    \    struct {\n          opaque ticket<0..2^16-1>;\n      } SessionTicket;\n"
- title: 3.3.  NewSessionTicket Handshake Message
  contents:
  - "3.3.  NewSessionTicket Handshake Message\n   This message is sent by the server\
    \ during the TLS handshake before\n   the ChangeCipherSpec message.  This message\
    \ MUST be sent if the\n   server included a SessionTicket extension in the ServerHello.\
    \  This\n   message MUST NOT be sent if the server did not include a\n   SessionTicket\
    \ extension in the ServerHello.  In the case of a full\n   handshake, the server\
    \ MUST verify the client's Finished message\n   before sending the ticket.  The\
    \ client MUST NOT treat the ticket as\n   valid until it has verified the server's\
    \ Finished message.  If the\n   server determines that it does not want to include\
    \ a ticket after it\n   has included the SessionTicket extension in the ServerHello,\
    \ then it\n   sends a zero-length ticket in the NewSessionTicket handshake message.\n\
    \   If the server successfully verifies the client's ticket, then it MAY\n   renew\
    \ the ticket by including a NewSessionTicket handshake message\n   after the ServerHello\
    \ in the abbreviated handshake.  The client\n   should start using the new ticket\
    \ as soon as possible after it\n   verifies the server's Finished message for\
    \ new connections.  Note\n   that since the updated ticket is issued before the\
    \ handshake\n   completes, it is possible that the client may not put the new\
    \ ticket\n   into use before it initiates new connections.  The server MUST NOT\n\
    \   assume that the client actually received the updated ticket until it\n   successfully\
    \ verifies the client's Finished message.\n   The NewSessionTicket handshake message\
    \ has been assigned the number 4\n   and its definition is given at the end of\
    \ this section.  The\n   ticket_lifetime_hint field contains a hint from the server\
    \ about how\n   long the ticket should be stored.  The value indicates the lifetime\n\
    \   in seconds as a 32-bit unsigned integer in network byte order.  A\n   value\
    \ of zero is reserved to indicate that the lifetime of the ticket\n   is unspecified.\
    \  A client SHOULD delete the ticket and associated\n   state when the time expires.\
    \  It MAY delete the ticket earlier based\n   on local policy.  A server MAY treat\
    \ a ticket as valid for a shorter\n   or longer period of time than what is stated\
    \ in the\n   ticket_lifetime_hint.\n      struct {\n          HandshakeType msg_type;\n\
    \          uint24 length;\n          select (HandshakeType) {\n              case\
    \ hello_request:       HelloRequest;\n              case client_hello:       \
    \ ClientHello;\n              case server_hello:        ServerHello;\n       \
    \       case certificate:         Certificate;\n              case server_key_exchange:\
    \ ServerKeyExchange;\n              case certificate_request: CertificateRequest;\n\
    \              case server_hello_done:   ServerHelloDone;\n              case\
    \ certificate_verify:  CertificateVerify;\n              case client_key_exchange:\
    \ ClientKeyExchange;\n              case finished:            Finished;\n    \
    \          case session_ticket:      NewSessionTicket; /* NEW */\n          }\
    \ body;\n      } Handshake;\n      struct {\n          uint32 ticket_lifetime_hint;\n\
    \          opaque ticket<0..2^16-1>;\n      } NewSessionTicket;\n"
- title: 3.4.  Interaction with TLS Session ID
  contents:
  - "3.4.  Interaction with TLS Session ID\n   If a server is planning on issuing\
    \ a SessionTicket to a client that\n   does not present one, it SHOULD include\
    \ an empty Session ID in the\n   ServerHello.  If the server includes a non-empty\
    \ session ID, then it\n   is indicating intent to use stateful session resume.\
    \  If the client\n   receives a SessionTicket from the server, then it discards\
    \ any\n   Session ID that was sent in the ServerHello.\n   When presenting a ticket,\
    \ the client MAY generate and include a\n   Session ID in the TLS ClientHello.\
    \  If the server accepts the ticket\n   and the Session ID is not empty, then\
    \ it MUST respond with the same\n   Session ID present in the ClientHello.  This\
    \ allows the client to\n   easily differentiate when the server is resuming a\
    \ session from when\n   it is falling back to a full handshake.  Since the client\
    \ generates a\n   Session ID, the server MUST NOT rely upon the Session ID having\
    \ a\n   particular value when validating the ticket.  If a ticket is\n   presented\
    \ by the client, the server MUST NOT attempt to use the\n   Session ID in the\
    \ ClientHello for stateful session resume.\n   Alternatively, the client MAY include\
    \ an empty Session ID in the\n   ClientHello.  In this case, the client ignores\
    \ the Session ID sent in\n   the ServerHello and determines if the server is resuming\
    \ a session by\n   the subsequent handshake messages.\n"
- title: 4.  Recommended Ticket Construction
  contents:
  - "4.  Recommended Ticket Construction\n   This section describes a recommended\
    \ format and protection for the\n   ticket.  Note that the ticket is opaque to\
    \ the client, so the\n   structure is not subject to interoperability concerns,\
    \ and\n   implementations may diverge from this format.  If implementations do\n\
    \   diverge from this format, they must take security concerns seriously.\n  \
    \ Clients MUST NOT examine the ticket under the assumption that it\n   complies\
    \ with this document.\n   The server uses two different keys: one 128-bit key\
    \ for AES [AES] in\n   CBC mode [CBC] encryption and one 128-bit key for HMAC-SHA1\
    \ [RFC2104]\n   [SHA1].\n   The ticket is structured as follows:\n      struct\
    \ {\n          opaque key_name[16];\n          opaque iv[16];\n          opaque\
    \ encrypted_state<0..2^16-1>;\n          opaque mac[20];\n      } ticket;\n  \
    \ Here, key_name serves to identify a particular set of keys used to\n   protect\
    \ the ticket.  It enables the server to easily recognize\n   tickets it has issued.\
    \  The key_name should be randomly generated to\n   avoid collisions between servers.\
    \  One possibility is to generate new\n   random keys and key_name every time\
    \ the server is started.\n   The actual state information in encrypted_state is\
    \ encrypted using\n   128-bit AES in CBC mode with the given IV.  The MAC is calculated\n\
    \   using HMAC-SHA1 over key_name (16 octets)and IV (16 octets), followed\n  \
    \ by the length of the encrypted_state field (2 octets) and its\n   contents (variable\
    \ length).\n      struct {\n          ProtocolVersion protocol_version;\n    \
    \      CipherSuite cipher_suite;\n          CompressionMethod compression_method;\n\
    \          opaque master_secret[48];\n          ClientIdentity client_identity;\n\
    \          uint32 timestamp;\n      } StatePlaintext;\n      enum {\n        \
    \ anonymous(0),\n         certificate_based(1),\n         psk(2)\n     } ClientAuthenticationType;\n\
    \      struct {\n          ClientAuthenticationType client_authentication_type;\n\
    \          select (ClientAuthenticationType) {\n              case anonymous:\
    \ struct {};\n              case certificate_based:\n                  ASN.1Cert\
    \ certificate_list<0..2^24-1>;\n              case psk:\n                  opaque\
    \ psk_identity<0..2^16-1>; /* from [RFC4279] */\n          }\n       } ClientIdentity;\n\
    \   The structure StatePlaintext stores the TLS session state including\n   the\
    \ master_secret.  The timestamp within this structure allows the\n   TLS server\
    \ to expire tickets.  To cover the authentication and key\n   exchange protocols\
    \ provided by TLS, the ClientIdentity structure\n   contains the authentication\
    \ type of the client used in the initial\n   exchange (see ClientAuthenticationType).\
    \  To offer the TLS server\n   with the same capabilities for authentication and\
    \ authorization, a\n   certificate list is included in case of public-key-based\n\
    \   authentication.  The TLS server is therefore able to inspect a number\n  \
    \ of different attributes within these certificates.  A specific\n   implementation\
    \ might choose to store a subset of this information or\n   additional information.\
    \  Other authentication mechanisms, such as\n   Kerberos [RFC2712], would require\
    \ different client identity data.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   This section addresses security issues related\
    \ to the usage of a\n   ticket.  Tickets must be authenticated and encrypted to\
    \ prevent\n   modification or eavesdropping by an attacker.  Several attacks\n\
    \   described below will be possible if this is not carefully done.\n   Implementations\
    \ should take care to ensure that the processing of\n   tickets does not increase\
    \ the chance of denial of service as\n   described below.\n"
- title: 5.1.  Invalidating Sessions
  contents:
  - "5.1.  Invalidating Sessions\n   The TLS specification requires that TLS sessions\
    \ be invalidated when\n   errors occur.  [CSSC] discusses the security implications\
    \ of this in\n   detail.  In the analysis in this paper, failure to invalidate\n\
    \   sessions does not pose a security risk.  This is because the TLS\n   handshake\
    \ uses a non-reversible function to derive keys for a session\n   so information\
    \ about one session does not provide an advantage to\n   attack the master secret\
    \ or a different session.  If a session\n   invalidation scheme is used, the implementation\
    \ should verify the\n   integrity of the ticket before using the contents to invalidate\
    \ a\n   session to ensure that an attacker cannot invalidate a chosen\n   session.\n"
- title: 5.2.  Stolen Tickets
  contents:
  - "5.2.  Stolen Tickets\n   An eavesdropper or man-in-the-middle may obtain the\
    \ ticket and\n   attempt to use the ticket to establish a session with the server;\n\
    \   however, since the ticket is encrypted and the attacker does not know\n  \
    \ the secret key, a stolen ticket does not help an attacker resume a\n   session.\
    \  A TLS server MUST use strong encryption and integrity\n   protection for the\
    \ ticket to prevent an attacker from using a brute\n   force mechanism to obtain\
    \ the ticket's contents.\n"
- title: 5.3.  Forged Tickets
  contents:
  - "5.3.  Forged Tickets\n   A malicious user could forge or alter a ticket in order\
    \ to resume a\n   session, to extend its lifetime, to impersonate as another user,\
    \ or\n   to gain additional privileges.  This attack is not possible if the\n\
    \   ticket is protected using a strong integrity protection algorithm\n   such\
    \ as a keyed HMAC-SHA1.\n"
- title: 5.4.  Denial of Service Attacks
  contents:
  - "5.4.  Denial of Service Attacks\n   The key_name field defined in the recommended\
    \ ticket format helps the\n   server efficiently reject tickets that it did not\
    \ issue.  However, an\n   adversary could store or generate a large number of\
    \ tickets to send\n   to the TLS server for verification.  To minimize the possibility\
    \ of a\n   denial of service, the verification of the ticket should be\n   lightweight\
    \ (e.g., using efficient symmetric key cryptographic\n   algorithms).\n"
- title: 5.5.  Ticket Protection Key Management
  contents:
  - "5.5.  Ticket Protection Key Management\n   A full description of the management\
    \ of the keys used to protect the\n   ticket is beyond the scope of this document.\
    \  A list of RECOMMENDED\n   practices is given below.\n   o  The keys should\
    \ be generated securely following the randomness\n      recommendations in [RFC4086].\n\
    \   o  The keys and cryptographic protection algorithms should be at\n      least\
    \ 128 bits in strength.\n   o  The keys should not be used for any other purpose\
    \ than generating\n      and verifying tickets.\n   o  The keys should be changed\
    \ regularly.\n   o  The keys should be changed if the ticket format or cryptographic\n\
    \      protection algorithms change.\n"
- title: 5.6.  Ticket Lifetime
  contents:
  - "5.6.  Ticket Lifetime\n   The TLS server controls the lifetime of the ticket.\
    \  Servers\n   determine the acceptable lifetime based on the operational and\n\
    \   security requirements of the environments in which they are deployed.\n  \
    \ The ticket lifetime may be longer than the 24-hour lifetime\n   recommended\
    \ in [RFC2246].  TLS clients may be given a hint of the\n   lifetime of the ticket.\
    \  Since the lifetime of a ticket may be\n   unspecified, a client has its own\
    \ local policy that determines when\n   it discards tickets.\n"
- title: 5.7.  Alternate Ticket Formats and Distribution Schemes
  contents:
  - "5.7.  Alternate Ticket Formats and Distribution Schemes\n   If the ticket format\
    \ or distribution scheme defined in this document\n   is not used, then great\
    \ care must be taken in analyzing the security\n   of the solution.  In particular,\
    \ if confidential information, such as\n   a secret key, is transferred to the\
    \ client, it MUST be done using\n   secure communication so as to prevent attackers\
    \ from obtaining or\n   modifying the key.  Also, the ticket MUST have its integrity\
    \ and\n   confidentiality protected with strong cryptographic techniques to\n\
    \   prevent a breach in the security of the system.\n"
- title: 5.8.  Identity Privacy, Anonymity, and Unlinkability
  contents:
  - "5.8.  Identity Privacy, Anonymity, and Unlinkability\n   This document mandates\
    \ that the content of the ticket is\n   confidentiality protected in order to\
    \ avoid leakage of its content,\n   such as user-relevant information.  As such,\
    \ it prevents disclosure\n   of potentially sensitive information carried within\
    \ the ticket.\n   The initial handshake exchange, which was used to obtain the\
    \ ticket,\n   might not provide identity confidentiality of the client based on\
    \ the\n   properties of TLS.  Another relevant security threat is the ability\n\
    \   for an on-path adversary to observe multiple TLS handshakes where the\n  \
    \ same ticket is used and therefore to conclude that they belong to the\n   same\
    \ communication endpoints.  Application designers that use the\n   ticket mechanism\
    \ described in this document should consider that\n   unlinkability [ANON] is\
    \ not necessarily provided.\n   While a full discussion of these topics is beyond\
    \ the scope of this\n   document, it should be noted that it is possible to issue\
    \ a ticket\n   using a TLS renegotiation handshake that occurs after a secure\
    \ tunnel\n   has been established by a previous handshake.  This may help address\n\
    \   some privacy and unlinkability issues in some environments.\n"
- title: 6.  Acknowledgements
  contents:
  - "6.  Acknowledgements\n   The authors would like to thank the following people\
    \ for their help\n   with preparing and reviewing this document: Eric Rescorla,\
    \ Mohamad\n   Badra, Tim Dierks, Nelson Bolyard, Nancy Cam-Winget, David McGrew,\n\
    \   Rob Dugal, Russ Housley, Amir Herzberg, Bernard Aboba, and members of\n  \
    \ the TLS working group.\n   [CSSC] describes a solution that is very similar\
    \ to the one described\n   in this document and gives a detailed analysis of the\
    \ security\n   considerations involved.  [RFC2712] describes a mechanism for using\n\
    \   Kerberos [RFC4120] in TLS ciphersuites, which helped inspire the use\n   of\
    \ tickets to avoid server state.  [EAP-FAST] makes use of a similar\n   mechanism\
    \ to avoid maintaining server state for the cryptographic\n   tunnel.  [SC97]\
    \ also investigates the concept of stateless sessions.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   IANA has assigned a TLS extension number of 35 to\
    \ the SessionTicket\n   TLS extension from the TLS registry of ExtensionType values\
    \ defined\n   in [RFC4366].\n   IANA has assigned a TLS HandshakeType number 4\
    \ to the\n   NewSessionTicket handshake type from the TLS registry of\n   HandshakeType\
    \ values defined in [RFC4346].\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC2119]   Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC2246]   Dierks, T. and C. Allen, \"The TLS Protocol Version 1.0\"\
    ,\n               RFC 2246, January 1999.\n   [RFC4346]   Dierks, T. and E. Rescorla,\
    \ \"The Transport Layer Security\n               (TLS) Protocol Version 1.1\"\
    , RFC 4346, April 2006.\n   [RFC4366]   Blake-Wilson, S., Nystrom, M., Hopwood,\
    \ D., Mikkelsen,\n               J., and T. Wright, \"Transport Layer Security\
    \ (TLS)\n               Extensions\", RFC 4366, April 2006.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [AES]       National Institute of Standards\
    \ and Technology, \"Advanced\n               Encryption Standard (AES)\", Federal\
    \ Information\n               Processing Standards (FIPS) Publication 197,\n \
    \              November 2001.\n   [ANON]      Pfitzmann, A. and M. Hansen, \"\
    Anonymity, Unlinkability,\n               Unobservability, Pseudonymity, and Identity\
    \ Management -\n               A Consolidated Proposal for Terminology\",\n  \
    \             http://dud.inf.tu-dresden.de/literatur/\n               Anon_Terminology_v0.26-1.pdf,\
    \ Draft 0.26, December 2005.\n   [CBC]       National Institute of Standards and\
    \ Technology,\n               \"Recommendation for Block Cipher Modes of Operation\
    \ -\n               Methods and Techniques\", NIST Special Publication 800-\n\
    \               38A, December 2001.\n   [CSSC]      Shacham, H., Boneh, D., and\
    \ E. Rescorla, \"Client-side\n               caching for TLS\", Transactions on\
    \ Information and System\n               Security (TISSEC) , Volume 7, Issue 4,\
    \ November 2004.\n   [EAP-FAST]  Cam-Winget, N., McGrew, D., Salowey, J., and\
    \ H. Zhou,\n               \"EAP Flexible Authentication via Secure Tunneling\
    \ (EAP-\n               FAST)\", Work in Progress, April 2005.\n   [RFC2104] \
    \  Krawczyk, H., Bellare, M., and R. Canetti, \"HMAC: Keyed-\n               Hashing\
    \ for Message Authentication\", RFC 2104,\n               February 1997.\n   [RFC2712]\
    \   Medvinsky, A. and M. Hur, \"Addition of Kerberos Cipher\n               Suites\
    \ to Transport Layer Security (TLS)\", RFC 2712,\n               October 1999.\n\
    \   [RFC4086]   Eastlake, D., Schiller, J., and S. Crocker, \"Randomness\n   \
    \            Requirements for Security\", BCP 106, RFC 4086, June 2005.\n   [RFC4120]\
    \   Neuman, C., Yu, T., Hartman, S., and K. Raeburn, \"The\n               Kerberos\
    \ Network Authentication Service (V5)\", RFC 4120,\n               July 2005.\n\
    \   [RFC4279]   Eronen, P. and H. Tschofenig, \"Pre-Shared Key\n             \
    \  Ciphersuites for Transport Layer Security (TLS)\",\n               RFC 4279,\
    \ December 2005.\n   [SC97]      Aura, T. and P. Nikander, \"Stateless Connections\"\
    ,\n               Proceedings of the First International Conference on\n     \
    \          Information and Communication Security (ICICS '97), 1997.\n   [SHA1]\
    \      National Institute of Standards and Technology, \"Secure\n            \
    \   Hash Standard (SHS)\", Federal Information Processing\n               Standards\
    \ (FIPS) Publication 180-2, August 2002.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Joseph Salowey\n   Cisco Systems\n   2901 3rd Ave\n  \
    \ Seattle, WA  98121\n   US\n   EMail: jsalowey@cisco.com\n   Hao Zhou\n   Cisco\
    \ Systems\n   4125 Highlander Parkway\n   Richfield, OH  44286\n   US\n   EMail:\
    \ hzhou@cisco.com\n   Pasi Eronen\n   Nokia Research Center\n   P.O. Box 407\n\
    \   FIN-00045 Nokia Group\n   Finland\n   EMail: pasi.eronen@nokia.com\n   Hannes\
    \ Tschofenig\n   Siemens\n   Otto-Hahn-Ring 6\n   Munich, Bayern  81739\n   Germany\n\
    \   EMail: Hannes.Tschofenig@siemens.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
