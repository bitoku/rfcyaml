- title: __initial_text__
  contents:
  - '            IP Flow Information Export (IPFIX) Applicability

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\
    \ in effect on the date of\n   publication of this document (http://trustee.ietf.org/license-info).\n\
    \   Please review these documents carefully, as they describe your rights\n  \
    \ and restrictions with respect to this document.\n   This document may contain\
    \ material from IETF Documents or IETF\n   Contributions published or made publicly\
    \ available before November\n   10, 2008.  The person(s) controlling the copyright\
    \ in some of this\n   material may not have granted the IETF Trust the right to\
    \ allow\n   modifications of such material outside the IETF Standards Process.\n\
    \   Without obtaining an adequate license from the person(s) controlling\n   the\
    \ copyright in such materials, this document may not be modified\n   outside the\
    \ IETF Standards Process, and derivative works of it may\n   not be created outside\
    \ the IETF Standards Process, except to format\n   it for publication as an RFC\
    \ or to translate it into languages other\n   than English.\n"
- title: Abstract
  contents:
  - "Abstract\n   In this document, we describe the applicability of the IP Flow\n\
    \   Information eXport (IPFIX) protocol for a variety of applications.\n   We\
    \ show how applications can use IPFIX, describe the relevant\n   Information Elements\
    \ (IEs) for those applications, and present\n   opportunities and limitations\
    \ of the protocol.  Furthermore, we\n   describe relations of the IPFIX framework\
    \ to other architectures and\n   frameworks.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Terminology ................................................4\n  \
    \ 2. Applications of IPFIX ...........................................4\n    \
    \  2.1. Accounting .................................................4\n      \
    \     2.1.1. Example .............................................5\n      2.2.\
    \ Traffic Profiling ..........................................7\n      2.3. Traffic\
    \ Engineering ........................................8\n      2.4. Network Security\
    \ ...........................................9\n      2.5. QoS Monitoring ............................................11\n\
    \           2.5.1. Correlating Events from Multiple\n                  Observation\
    \ Points .................................12\n           2.5.2. Examples ...........................................12\n\
    \      2.6. Inter-Domain Exchange of IPFIX Data .......................14\n  \
    \    2.7. Export of Derived Metrics .................................14\n    \
    \  2.8. Summary ...................................................15\n   3. Relation\
    \ of IPFIX to Other Frameworks and Protocols ............16\n      3.1. IPFIX\
    \ and IPv6 ............................................16\n      3.2. IPFIX and\
    \ PSAMP ...........................................16\n      3.3. IPFIX and RMON\
    \ ............................................16\n      3.4. IPFIX and IPPM ............................................18\n\
    \      3.5. IPFIX and AAA .............................................18\n  \
    \         3.5.1. Connecting via a AAA Client ........................20\n    \
    \       3.5.2. Connecting via an Application Specific\n                  Module\
    \ (ASM) .......................................21\n      3.6. IPFIX and RTFM ............................................21\n\
    \           3.6.1. Architecture .......................................21\n  \
    \         3.6.2. Flow Definition ....................................22\n    \
    \       3.6.3. Configuration and Management .......................22\n      \
    \     3.6.4. Data Collection ....................................22\n        \
    \   3.6.5. Data Model Details .................................23\n          \
    \ 3.6.6. Transport Protocol .................................23\n           3.6.7.\
    \ Summary ............................................23\n   4. Limitations ....................................................24\n\
    \      4.1. Using IPFIX for Other Applications than Listed in\n           RFC\
    \ 3917 ..................................................24\n      4.2. Using\
    \ IPFIX for Billing (Reliability Limitations) .........24\n      4.3. Using a\
    \ Different Transport Protocol than SCTP ............25\n      4.4. Push vs. Pull\
    \ Mode ........................................25\n      4.5. Template ID Number\
    \ ........................................26\n      4.6. Exporting Bidirectional\
    \ Flow Information ..................26\n      4.7. Remote Configuration ......................................27\n\
    \   5. Security Considerations ........................................27\n  \
    \ 6. Acknowledgements ...............................................28\n   7.\
    \ Normative References ...........................................28\n   8. Informative\
    \ References .........................................28\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The IPFIX protocol defines how IP Flow information can be\
    \ exported\n   from routers, measurement probes, or other devices.  IP Flow\n\
    \   information provides important input data for a variety of\n   applications.\
    \  The IPFIX protocol is a general data transport\n   protocol that is easily\
    \ extensible to suit the needs of such\n   applications.  In this document, we\
    \ describe how typical applications\n   can use the IPFIX protocol and show opportunities\
    \ and limitations of\n   the protocol.  Furthermore, we describe the relationship\
    \ of IPFIX to\n   other frameworks and architectures.  Although examples in this\n\
    \   document are shown for IPv4 only, the applicability statements apply\n   to\
    \ IPv4 and IPv6.  IPFIX provides appropriate Information Elements\n   for both\
    \ IP versions.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   IPFIX-specific terminology used in this document is defined\
    \ in\n   Section 2 of [RFC5101].  In this document, as in [RFC5101], the first\n\
    \   letter of each IPFIX-specific term is capitalized.\n"
- title: 2.  Applications of IPFIX
  contents:
  - "2.  Applications of IPFIX\n   IPFIX data enables several critical applications.\
    \  The IPFIX target\n   applications and the requirements that originate from\
    \ those\n   applications are described in [RFC3917].  Those requirements were\n\
    \   used as basis for the design of the IPFIX protocol.  This section\n   describes\
    \ how these target applications can use the IPFIX protocol.\n   Considerations\
    \ for using IPFIX for other applications than those\n   described in [RFC3917]\
    \ can be found in Section 4.1.\n"
- title: 2.1.  Accounting
  contents:
  - "2.1.  Accounting\n   Usage-based accounting is one of the target applications\
    \ for IPFIX as\n   defined in [RFC3917].  IPFIX records provide fine-grained measurement\n\
    \   results for highly flexible and detailed usage reporting.  Such data\n   is\
    \ used to realize usage-based accounting.  Nevertheless, IPFIX does\n   not provide\
    \ the reliability required by usage-based billing systems\n   as defined in [RFC2975]\
    \ (see Section 4.2).  The accounting scenarios\n   described in this document\
    \ only provide limited reliability as\n   explained in Section 4.2 and should\
    \ not be used in environments where\n   reliability as demanded by [RFC2975] is\
    \ mandatory.\n   In order to realize usage-based accounting with IPFIX, the Flow\n\
    \   definition has to be chosen in accordance to the accounting purpose,\n   such\
    \ as trend analysis, capacity planning, auditing, or billing and\n   cost allocation\
    \ where some loss of data can be tolerated (see Section\n   4.2).\n   Flows can\
    \ be distinguished by various IEs (e.g., packet header\n   fields) from [RFC5102].\
    \  Due to the flexible IPFIX Flow definition,\n   arbitrary Flow-based accounting\
    \ models can be realized without\n   extensions to the IPFIX protocol.\n   Accounting\
    \ can, for instance, be based on individual end-to-end\n   Flows.  In this case,\
    \ it can be realized with a Flow definition\n   determined by the quintuple consisting\
    \ of source address\n   (sourceIPv4Address), destination address (destinationIPv4Address),\n\
    \   protocol (protocolIdentifier), and port numbers (udpSourcePort,\n   udpDestinationPort).\
    \  Another example is class-dependent accounting\n   (e.g., in a Diffserv network).\
    \  In this case, Flows could be\n   distinguished just by the Diffserv codepoint\
    \ (DSCP)\n   (ipDiffServCodePoint) and IP addresses (sourceIPv4Address,\n   destinationIPv4Address).\
    \  The essential elements needed for\n   accounting are the number of transferred\
    \ packets and bytes per Flow,\n   which can be represented by the per-flow counter\
    \ IEs (e.g.,\n   packetTotalCount, octetTotalCount).\n   For accounting purposes,\
    \ it would be advantageous to have the ability\n   to use IPFIX Flow Records as\
    \ accounting input in an Authentication,\n   Authorization, and Accounting (AAA)\
    \ infrastructure.  AAA servers then\n   could provide the mapping between user\
    \ and Flow information.  Again\n   for such scenarios the limited reliability\
    \ currently provided by\n   IPFIX has to be taken into account.\n"
- title: 2.1.1.  Example
  contents:
  - "2.1.1.  Example\n   Please note: As noted in [RFC3330], the address block 192.0.2.0/24\n\
    \   may be used for example addresses.  In the example below, we use two\n   example\
    \ networks.  In order to be conformant to [RFC3330], we divide\n   the given address\
    \ block into two networks by subnetting with a 25-bit\n   netmask (192.0.2.0/25)\
    \ as follows:\n   Network A: 192.0.2.0 ...  192.0.2.127\n   Network B: 192.0.2.128\
    \ ...  192.0.2.255\n   Let's suppose someone needs to monitor the individual Flows\
    \ in a\n   Diffserv network in order to compare traffic amount trend with the\n\
    \   terms outlined in a Service Level Agreement (SLA).  Flows are\n   distinguished\
    \ by source and destination address.  The information to\n   export in this case\
    \ is:\n      - IPv4 source IP address: sourceIPv4Address in [RFC5102], with a\n\
    \        length of 4 octets\n      - IPv4 destination IP address: destinationIPv4Address\
    \ in\n        [RFC5102], with a length of 4 octets\n      - DSCP: ipDiffServCodePoint\
    \ in [RFC5102], with a length of 1 octet\n      - Number of octets of the Flow:\
    \ octetDeltaCount in [RFC5102], with\n        a length of 4 octets\n   The Template\
    \ set will look as follows:\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |         Set ID = 2            |      Length = 24 octets       |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \       Template ID 256         |       Field Count = 4         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |0|    sourceIPv4Address = 8    |       Field Length = 4        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |0|\
    \ destinationIPv4Address = 12 |       Field Length = 4        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |0|  ipDiffServCodePoint = 195  |       Field Length = 1        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |0|\
    \     octetDeltaCount = 1     |       Field Length = 4        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The information to be exported might be as listed in the following\n   example\
    \ table:\n      Src. IP addr. | Dst. IP addr. |  DSCP  | Octets Number\n     \
    \ --------------+---------------+--------+--------------\n      192.0.2.12   \
    \ |  192.0.2.144  |   46   |   120868\n      192.0.2.24    |  192.0.2.156  | \
    \  46   |   310364\n      192.0.2.36    |  192.0.2.168  |   46   |   241239\n\
    \   In the example we use Diffserv codepoint 46, recommended for the\n   Expedited\
    \ Forwarding Per Hop Behavior (EF PHB) in [RFC3246].\n   The Flow Records will\
    \ then look as follows:\n       0                   1                   2    \
    \               3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |          Set ID = 256         |          Length = 43          |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                          192.0.2.12                           |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                          192.0.2.144                          |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \      46       |               120868                          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |               |               192.0.2.24                      |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \               |               192.0.2.156                     |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |               |       46      |                 310364        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                               |         192.0.2.36            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                               |         192.0.2.168           |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                               |       46      |               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                   241239                      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 2.2.  Traffic Profiling
  contents:
  - "2.2.  Traffic Profiling\n   Measurement results reported in IPFIX records can\
    \ provide useful\n   input for traffic profiling.  IPFIX records captured over\
    \ a long\n   period of time can be used to track and anticipate network growth\
    \ and\n   usage.  Such information is valuable for trend analysis and network\n\
    \   planning.\n   The parameters of interest are determined by the profiling\n\
    \   objectives.  Example parameters for traffic profiling are Flow\n   duration,\
    \ Flow volume, burstiness, the distribution of used services\n   and protocols,\
    \ the amount of packets of a specific type, etc.\n   [RFC3917].\n   The distribution\
    \ of services and protocols in use can be analyzed by\n   configuring appropriate\
    \ Flows Keys for Flow discrimination.\n   Protocols can be distinguished by the\
    \ protocolIdentifier IE.\n   Portnumbers (e.g., udpDestinationPort) often provide\
    \ information\n   about services in use.  Those Flow Keys are defined in [RFC5102].\
    \  If\n   portnumbers are not sufficient for service discrimination, further\n\
    \   parts of the packet may be needed.  Header fields can be expressed by\n  \
    \ IEs from [RFC5102].\n   Packet payload can be reported by using the IE ipPayloadPacketSection\n\
    \   in [RFC5477].\n   The Flow duration can be calculated from the Flow Timestamp\
    \ IEs\n   defined in [RFC5102] (e.g., flowEndMicroseconds -\n   flowStartMicroseconds).\
    \  The number of packets and number of bytes of\n   a Flow are represented in\
    \ the per-flow counter IEs (e.g.,\n   packetTotalCount, octetTotalCount).  The\
    \ burstiness of a Flow can be\n   calculated from the Flow volume measured at\
    \ different time intervals.\n"
- title: 2.3.  Traffic Engineering
  contents:
  - "2.3.  Traffic Engineering\n   Traffic engineering aims at the optimization of\
    \ network resource\n   utilization and traffic performance [RFC2702].  Typical\
    \ parameters\n   are link utilization, load between specific network, nodes, number,\n\
    \   size and entry/exit points of active Flows, and routing information\n   [RFC3917].\n\
    \   The size of Flows in packets and bytes can be reported by the IEs\n   packetTotalCount\
    \ and octetTotalCount.  Utilization of a physical link\n   can be reported by\
    \ using a coarse-grained Flow definition (e.g.,\n   based on identifier IEs such\
    \ as egressInterface or ingressInterface)\n   and per-flow counter IEs (e.g.,\
    \ packetTotalCount, octetTotalCount)\n   defined in [RFC5102].\n   The load between\
    \ specific network nodes can be reported in the same\n   way if one interface\
    \ of a network node receives only traffic from\n   exactly one neighbor node (as\
    \ is usually the case).  If the ingress\n   interface is not sufficient for an\
    \ unambiguous identification of the\n   neighbor node, sub-IP header fields IEs\
    \ (like sourceMacAddress) can\n   be added as Flow Keys.\n   The IE observedFlowTotalCount\
    \ provides the number of all Flows\n   exported for the Observation Domain since\
    \ the last initialization of\n   the Metering Process [RFC5102].  If this IE is\
    \ exported at subsequent\n   points in time, one can derive the number of active\
    \ Flows in a\n   specific time interval from the difference of the reported counters.\n\
    \   The configured Flow termination criteria have to be taken into\n   account\
    \ to interpret those numbers correctly.\n   Entry and exit points can be derived\
    \ from Flow Records if Metering\n   Processes are installed at all edges of the\
    \ network and results are\n   mapped in accordance to Flow Keys.  For this and\
    \ other analysis\n   methods that require the mapping of records from different\n\
    \   Observation Points, the same Flow Keys should be used at all\n   Observation\
    \ Points.  The path that packets take through a network can\n   be investigated\
    \ by using hash-based sampling techniques as described\n   in [DuGr00] and [RFC5475].\
    \  For this, IEs from [RFC5477] are needed.\n   Neither [RFC5102] nor [RFC5477]\
    \ defines IEs suitable for exporting\n   routing information.\n"
- title: 2.4.  Network Security
  contents:
  - "2.4.  Network Security\n   Attack and intrusion detection are among the IPFIX\
    \ target\n   applications described in [RFC3917].  Due to the enormous amount\
    \ of\n   different network attack types, only general requirements could be\n\
    \   addressed in [RFC3917].\n   The number of metrics useful for attack detection\
    \ is as diverse as\n   attack patterns themselves.  Attackers adapt rapidly to\
    \ circumvent\n   detection methods and try to hide attack patterns using slow\
    \ or\n   stealth attacks.  Furthermore, unusual traffic patterns are not\n   always\
    \ caused by malicious activities.  A sudden traffic increase may\n   be caused\
    \ by legitimate users who seek access to a recently published\n   web content.\
    \  Strange traffic patterns may also be caused by\n   misconfiguration.\n   IPFIX\
    \ can export Flow information for arbitrary Flow definitions as\n   defined in\
    \ [RFC5101].  Packet information can be exported with IPFIX\n   by using the additional\
    \ Information Elements described in [RFC5477].\n   With this, theoretically all\
    \ information about traffic in the network\n   at the IP layer and above is accessible.\
    \  This data either can be\n   used directly to detect anomalies or can provide\
    \ the basis for\n   further post-processing to generate more complex attack detection\n\
    \   metrics.\n   Depending on the attack type, different metrics are useful. \
    \ A sudden\n   increase of traffic load can be a hint that an attack has been\n\
    \   launched.  The overall traffic at an Observation Point can be\n   monitored\
    \ using per-flow counter IEs like packetTotalCount or\n   octetTotalCount as described\
    \ in Section 2.3.  The number of active\n   Flows can be monitored by regular\
    \ reporting of the\n   observedFlowTotalCount defined in [RFC5102].\n   A sudden\
    \ increase of Flows from different sources to one destination\n   may be caused\
    \ by an attack on a specific host or network node using\n   spoofed addresses.\
    \  The number of Flows from or to specific networks\n   or hosts can be observed\
    \ by using source and destination addresses as\n   Flow Keys and observing the\
    \ number of active Flows as explained\n   above.  Many Flows to the same machine,\
    \ but on different ports, or\n   many Flows to the same port and different machines\
    \ may be an\n   indicator for vertical or horizontal port scanning activities.\
    \  The\n   number of Flows to different ports can be reported by using the\n \
    \  portnumber Information Elements (udpSourcePort, udpDestinationPort,\n   tcpSourcePort,\
    \ tcpDestinationPort) defined in [RFC5102] as Flow Keys.\n   An unusual ratio\
    \ of TCP-SYN to TCP-FIN packets can refer to SYN-\n   flooding.  The number of\
    \ SYN and FIN packets in a Flow can be\n   reported with the IPFIX Information\
    \ Elements tcpSynTotalCount and\n   tcpFinTotalCount defined in [RFC5102].\n \
    \  Worms may leave signatures in traffic patterns.  Detecting such\n   events\
    \ requires more detailed measurements and post-processing than\n   detecting simple\
    \ changes in traffic volumes.\n   A difficult task is the separation of good from\
    \ bad packets to\n   prepare and launch counteraction.  This may require a deeper\
    \ look\n   into packet content by using further header field IEs from [RFC5102]\n\
    \   and/or packet payloads from IE ipPayloadPacketSection in [RFC5477].\n   Furthermore,\
    \ the amount of resources needed for measurement and\n   reporting increases with\
    \ the level of granularity required to detect\n   an attack.  Multi-step analysis\
    \ techniques may be useful, e.g., to\n   launch an in-depth analysis (e.g., based\
    \ on packet information) in\n   case the Flow information shows suspicious patterns.\
    \  In order to\n   supervise traffic to a specific host or network node, it is\
    \ useful to\n   apply filtering methods such as those described in [RFC5475].\n\
    \   Mapping the two directions of communication is often useful for\n   checking\
    \ correct protocol behavior (see Section 4.6).  A correlation\n   of IPFIX data\
    \ from multiple Observation Points (see Section 2.5.1)\n   allows assessing the\
    \ propagation of an attack and can help to locate\n   its source.\n   The integration\
    \ of previous measurement results helps to review\n   traffic changes over time\
    \ for detection of traffic anomalies and\n   provides the basis for forensic analysis.\
    \  A standardized storage\n   format for IPFIX data would support the offline\
    \ analysis of data from\n   different operators.\n   Nevertheless, capturing full\
    \ packet traces at all Observation Points\n   in the network is not viable due\
    \ to resource limitations and privacy\n   concerns.  Therefore, metrics should\
    \ be chosen wisely to allow a\n   solid detection with minimal resource consumption.\
    \  Resources can be\n   saved, for instance, by using coarser-grained Flow definitions,\n\
    \   reporting pre-processed metrics (e.g., with additional Information\n   Elements),\
    \ or deploying sampling methods.\n   In many cases, only derived metrics provide\
    \ sufficient evidence about\n   security incidents.  For example, comparing the\
    \ number of SYN and FIN\n   packets for a specific time interval can reveal an\
    \ ongoing SYN\n   attack, which is not obvious from unprocessed packet and Flow\
    \ data.\n   Further metrics like the cumulated sum of various counters,\n   distributions\
    \ of packet attributes, or spectrum coefficients have\n   been used to identify\
    \ a variety of attacks.\n   In order to detect attacks early, it is useful to\
    \ process the data as\n   soon as possible in order to generate significant metrics\
    \ for the\n   detection.  Pre-processing of raw packet and Flow data already at\
    \ the\n   measurement device can speed up the detection process and reduces the\n\
    \   amount of data that need to be exported.  Furthermore, it is possible\n  \
    \ to directly report derived metrics by defining appropriate\n   Information Elements.\
    \  Immediate data export in case of a potential\n   incident is desired.  IPFIX\
    \ supports such source-triggered exporting\n   of information due to the push\
    \ model approach.  Nevertheless, further\n   exporting criteria have to be implemented\
    \ to export IPFIX records\n   upon incident detection events and not only upon\
    \ flow-end or fixed-\n   time intervals.\n   Intrusion detection would profit\
    \ from the combination of IPFIX\n   functions with AAA functions (see Section\
    \ 3.5).  Such an\n   interoperation enables further means for attacker detection,\
    \ advanced\n   defense strategies, and secure inter-domain cooperation.\n"
- title: 2.5.  QoS Monitoring
  contents:
  - "2.5.  QoS Monitoring\n   Quality of service (QoS) monitoring is one target application\
    \ of the\n   IPFIX protocol [RFC3917].  QoS monitoring is the passive observation\n\
    \   of the transmission quality for single Flows or traffic aggregates in\n  \
    \ the network.  One example of its use is the validation of QoS\n   guarantees\
    \ in service level agreements (SLAs).  Typical QoS\n   parameters are loss [RFC2680],\
    \ one-way [RFC2679] and round-trip delay\n   [RFC2681], and delay variation [RFC3393].\
    \  Whenever applicable, the\n   IP Performance Metrics (IPPM) definitions [RFC4148]\
    \ should be used\n   when reporting QoS metrics.\n   The calculation of those\
    \ QoS metrics requires per-packet processing.\n   Reporting packet information\
    \ with IPFIX is possible by simply\n   considering a single packet as Flow.  [RFC5101]\
    \ also allows the\n   reporting of multiple identical Information Elements in\
    \ one Flow\n   Record.  Using this feature for reporting information about multiple\n\
    \   packets in one record would require additional agreement on semantics\n  \
    \ regarding the order of Information Elements (e.g., which timestamp\n   belongs\
    \ to which packet payload in a sequence of Information\n   Elements).  [RFC5477]\
    \ defines useful additional Information Elements\n   for exporting per-packet\
    \ information with IPFIX.\n"
- title: 2.5.1.  Correlating Events from Multiple Observation Points
  contents:
  - "2.5.1.  Correlating Events from Multiple Observation Points\n   Some QoS metrics\
    \ require the correlation of data from multiple\n   Observation Points.  For this,\
    \ the clocks of the involved Metering\n   Processes must be synchronized.  Furthermore,\
    \ it is necessary to\n   recognize that the same packet was observed at different\
    \ Observation\n   Points.\n   This can be done by capturing parts of the packet\
    \ content (packet\n   header and/or parts of the payload) that do not change on\
    \ the way to\n   the destination.  Based on the packet content, it can be recognized\n\
    \   when the same packet arrived at another Observation Point.  To reduce\n  \
    \ the amount of measurement data, a unique packet ID can be calculated\n   from\
    \ the packet content, e.g., by using a Cyclic Redundancy Check\n   (CRC) or hash\
    \ function instead of transferring and comparing the\n   unprocessed content.\
    \  Considerations on collision probability and\n   efficiency of using such packet\
    \ IDs are described in [GrDM98],\n   [DuGr00], and [ZsZC01].\n   IPFIX allows\
    \ the reporting of several IP and transport header fields\n   (see Sections 5.3\
    \ and 5.4 in [RFC5102]).  Using only those fields for\n   packet recognition or\
    \ ID generation can be sufficient in scenarios\n   where those header fields vary\
    \ a lot among subsequent packets, where\n   a certain amount of packet ID collisions\
    \ are tolerable, or where\n   packet IDs need to be unique only for a small time\
    \ interval.\n   For including packet payload information, the Information Element\n\
    \   ipPayloadPacketSection defined in [RFC5477] can be used.  The\n   Information\
    \ Element ipHeaderPacketSection can also be used.  However,\n   header fields\
    \ that can change on the way from source to destination\n   have to be excluded\
    \ from the packet ID generation because they may\n   differ at different Observation\
    \ Points.\n   For reporting packet IDs generated by a CRC or hash function, the\n\
    \   Information Element digestHashValue defined in [RFC5477] can be used.\n"
- title: 2.5.2.  Examples
  contents:
  - "2.5.2.  Examples\n   The following examples show which Information Elements need\
    \ to be\n   reported by IPFIX to generate specific QoS metrics.  As an\n   alternative,\
    \ the metrics can be generated directly at the exporter\n   and IPFIX can be used\
    \ to export the metrics (see Section 2.7).\n"
- title: 2.5.2.1.  RTT Measurements with Packet Pair Matching (Single-Point)
  contents:
  - "2.5.2.1.  RTT Measurements with Packet Pair Matching (Single-Point)\n   The passive\
    \ measurement of round-trip time (RTT) can be performed by\n   using packet pair\
    \ matching techniques as described in [Brow00].  For\n   the measurements, request/response\
    \ packet pairs from protocols such\n   as DNS, ICMP, SNMP or TCP (SYN/SYN_ACK,\
    \ DATA/ACK) are utilized to\n   passively observe the RTT [Brow00].  This technique\
    \ requires the\n   correlation of data from both directions.\n   Required Information\
    \ Elements per packet (DNS example):\n   - Packet arrival time: observationTimeMicroseconds\
    \ [RFC5477]\n   - DNS header: ipPayloadPacketSection [RFC5477]\n   Required functions:\n\
    \   - Recognition of request/response packet pairs\n   Remarks:\n   - Requires\
    \ Information Elements from [RFC5477].\n   - observationTimeMicroseconds can be\
    \ substituted by\n     flowStartMicroseconds [RFC5102] because a single packet\
    \ can be\n     represented as a Flow.\n   - If time values with a finer granularity\
    \ are needed,\n     observationTimeNanoseconds can be used.\n"
- title: 2.5.2.2.  One-Way Delay Measurements (Multi-Point)
  contents:
  - "2.5.2.2.  One-Way Delay Measurements (Multi-Point)\n   Passive one-way delay\
    \ measurements require the collection of data at\n   two Observation Points. \
    \ As mentioned above, synchronized clocks are\n   needed to avoid time-differences\
    \ at the involved Observation Points.\n   The recognition of packets at the second\
    \ Observation Point can be\n   based on parts of the packet content directly.\
    \  A more efficient way\n   is to use a packet ID (generated from packet content).\n\
    \   Required Information Elements per packet (with packet ID):\n   - Packet arrival\
    \ time: observationTimeMicroseconds [RFC5477]\n   - Packet ID: digestHashValue\
    \ [RFC5477]\n   Required functions:\n   - Packet ID generation\n   - Delay calculation\
    \ (from arrival times at the two Observation\n     Points)\n   Remarks:\n   -\
    \ Requires Information Elements from [RFC5477].\n   - observationTimeMicroseconds\
    \ can be substituted by\n     flowStartMicroseconds [RFC5102], because a single\
    \ packet can be\n     represented as a Flow.\n   - If time values with a finer\
    \ granularity are needed,\n     observationTimeNanoseconds can be used.\n   -\
    \ The amount of content used for ID generation influences the number\n     of\
    \ collisions (different packets that map to the same ID) that can\n     occur.\
    \  Investigations on this and other considerations on packet\n     ID generation\
    \ can be found in [GrDM98], [DuGr00], and [ZsZC01].\n"
- title: 2.6.  Inter-Domain Exchange of IPFIX Data
  contents:
  - "2.6.  Inter-Domain Exchange of IPFIX Data\n   IPFIX data can be used to share\
    \ information with neighbor providers.\n   A few recommendations should be considered\
    \ if IPFIX records travel\n   over the public Internet, compared to its usage\
    \ within a single\n   domain.  First of all, security threat levels are higher\
    \ if data\n   travels over the public Internet.  Protection against disclosure\
    \ or\n   manipulation of data is even more important than for intra-domain\n \
    \  usage.  Therefore, Transport Layer Security (TLS) or Datagram\n   Transport\
    \ Layer Security should be used as described in [RFC5101].\n   Furthermore, data\
    \ transfer should be congestion-aware in order to\n   allow untroubled coexistence\
    \ with other data Flows in public or\n   foreign networks.  That means transport\
    \ over Stream Control\n   Transmission Protocol (SCTP) or TCP is required.\n \
    \  Some ISPs are still reluctant to share information due to concerns\n   that\
    \ competing ISPs might exploit network information from neighbor\n   providers\
    \ to strengthen their own position in the market.\n   Nevertheless, technical\
    \ needs have already triggered the exchange of\n   data in the past (e.g., exchange\
    \ of routing information by BGP).  The\n   need to provide inter-domain guarantees\
    \ is one big incentive to\n   increase inter-domain cooperation.  The necessity\
    \ to defend networks\n   against current and future threats (denial-of-service\
    \ attacks, worm\n   distributions, etc.) will hopefully increase the willingness\
    \ to\n   exchange measurement data between providers.\n"
- title: 2.7.  Export of Derived Metrics
  contents:
  - "2.7.  Export of Derived Metrics\n   The IPFIX protocol is used to transport Flow\
    \ and packet information\n   to provide the input for the calculation of a variety\
    \ of metrics\n   (e.g., for QoS validation or attack detection).  IPFIX can also\
    \ be\n   used to transfer these metrics directly, e.g., if the metric\n   calculation\
    \ is co-located with the Metering and Exporting Processes.\n   It doesn't matter\
    \ which measurement and post-processing functions are\n   applied to generate\
    \ a specific metric.  IPFIX can be used to\n   transport the results from passive\
    \ and active measurements and from\n   post-processing operations.  For the reporting\
    \ of derived metrics,\n   additional Information Elements need to be defined.\n\
    \   For most QoS metrics like loss, delay, delay variation, etc.,\n   standard\
    \ IPPM definitions exist.  In case such metrics are reported\n   with IPFIX, the\
    \ IPPM standard definition should be used.\n"
- title: 2.8.  Summary
  contents:
  - "2.8.  Summary\n   The following table shows an overview of the Information Elements\n\
    \   required for the target applications described in [RFC3917]\n   (M-mandatory,\
    \ R-recommended, O-optional).\n      | Application |  [RFC5102] |   [RFC5477]\
    \  | additional IEs  |\n      +-------------+------------+--------------+-----------------+\n\
    \      | Accounting  |     M      |      -       |       -         |\n      +-------------+------------+--------------+-----------------+\n\
    \      | Traffic     |     M      |      O       |       -         |\n      |\
    \ Profiling   |            |              |                 |\n      +-------------+------------+--------------+-----------------+\n\
    \      | Traffic     |     M      |      -       |       O         |\n      |\
    \ Engineering |            |              | (routing info)  |\n      +-------------+------------+--------------+-----------------+\n\
    \      | Attack      |     M      |      R       |       R         |\n      |\
    \ Detection   |            |              |(derived metrics)|\n      +-------------+------------+--------------+-----------------+\n\
    \      | QoS         |     M      |      M       |       O         |\n      |\
    \ Monitoring  |            |(most metrics)|(derived metrics)|\n      +-------------+------------+--------------+-----------------+\n\
    \   For accounting, the IEs in [RFC5102] are sufficient.  As mentioned\n   above,\
    \ IPFIX does not conform to the reliability requirements\n   demanded by [RFC2975]\
    \ for usage-based billing systems (see Section\n   4.2).  For traffic profiling,\
    \ additional IEs from [RFC5477] can be\n   useful to gain more insight into the\
    \ traffic.  For traffic\n   engineering, Flow information from [RFC5102] is sufficient,\
    \ but it\n   would profit from routing information, which could be exported by\n\
    \   IPFIX.  Attack detection usually profits from further insight into\n   the\
    \ traffic.  This can be achieved with IEs from [RFC5477].\n   Furthermore, the\
    \ reporting of derived metrics in additional IEs would\n   be useful.  Most QoS\
    \ metrics require the use of IEs from [RFC5477].\n   IEs from [RFC5477] are also\
    \ useful for the mapping of results from\n   different Observation Points as described\
    \ in Section 2.5.1.\n"
- title: 3.  Relation of IPFIX to Other Frameworks and Protocols
  contents:
  - '3.  Relation of IPFIX to Other Frameworks and Protocols

    '
- title: 3.1.  IPFIX and IPv6
  contents:
  - "3.1.  IPFIX and IPv6\n   From the beginning, IPFIX has been designed for IPv4\
    \ and IPv6.\n   Therefore, IPFIX can be used in IPv4 and IPv6 networks without\n\
    \   limitations.  The usage of IPFIX in IPv6 networks has two aspects:\n   - Generation\
    \ and reporting of IPFIX records about IPv6 traffic\n   - Exporting IPFIX records\
    \ over IPv6\n   The generation and reporting of IPFIX records about IPv6 traffic\
    \ is\n   possible.  Appropriate Information Elements for the reporting of IPv6\n\
    \   traffic are defined in [RFC5102].  Exporting IPFIX records over IPv6\n   is\
    \ not explicitly addressed in [RFC5101].  Since IPFIX runs over a\n   transport\
    \ protocol (SCTP, PR-SCTP, UDP, or TCP) and all potential\n   IPFIX transport\
    \ protocols can run in IPv6 networks, one just needs to\n   provide the chosen\
    \ transport protocol in the IPv6 network to run\n   IPFIX over IPv6.\n"
- title: 3.2.  IPFIX and PSAMP
  contents:
  - "3.2.  IPFIX and PSAMP\n   PSAMP defines packet selection methods, their configuration\
    \ at\n   routers and probes, and the reporting of packet information.\n   PSAMP\
    \ uses IPFIX as a basis for exporting packet information\n   [RFC5476].  [RFC5477]\
    \ describes further Information Elements for\n   exporting packet information\
    \ and reporting configuration information.\n   The main difference between IPFIX\
    \ and PSAMP is that IPFIX addresses\n   the export of Flow Records, whereas PSAMP\
    \ addresses the export of\n   packet records.  Furthermore, PSAMP explicitly addresses\
    \ remote\n   configuration.  It defines a MIB for the configuration of packet\n\
    \   selection processes.  Remote configuration is not (yet) addressed in\n   IPFIX,\
    \ but one could consider extending the PSAMP MIB to also allow\n   configuration\
    \ of IPFIX processes.\n"
- title: 3.3.  IPFIX and RMON
  contents:
  - "3.3.  IPFIX and RMON\n   Remote Monitoring (RMON) [RFC3577] is a widely used\
    \ monitoring system\n   that gathers traffic data from RMON Agents in network\
    \ devices.  One\n   major difference between RMON and IPFIX is that RMON uses\
    \ SNMP for\n   data export, whereas IPFIX defines its own push-oriented protocol.\n\
    \   RMON defines MIBs that contain the information to be exported.  In\n   IPFIX,\
    \ the data to be exported is defined as Information Elements.\n   The most relevant\
    \ MIBs for comparison with IPFIX are the Application\n   Performance Measurement\
    \ MIB (APM-MIB) [RFC3729] and the Transport\n   Performance Metrics MIB (TPM-MIB)\
    \ [RFC4150].  The APM-MIB has a\n   complex system for tracking user application\
    \ performance, with\n   reporting about transactions and SLA threshold notification-trigger\n\
    \   configuration, and persistence across DHCP lease expirations.  It\n   requires\
    \ a full RMON2-MIB protocolDirTable implementation.\n   The APM-MIB reports the\
    \ performance of transactions.  A transaction\n   is a service-oriented term and\
    \ describes the data exchange from the\n   transaction start (when a user requests\
    \ a service) until its\n   completion.  The performance parameters include response\
    \ times,\n   throughput, streaming responsiveness, and availability of services.\n\
    \   The RMON transaction concept differs from the IPFIX Flow concept.  A\n   Flow\
    \ is a very generic term that allows one to group IP packets in\n   accordance\
    \ with common properties.  In contrast to this, the term\n   transaction is service-oriented\
    \ and contains all data exchange\n   required for service completion.\n   In order\
    \ to report such data with IPFIX, one would probably need a\n   specific combination\
    \ of multiple Flows and the ability to map those\n   to the transaction.  Due\
    \ to the service-oriented focus of APM, the\n   required metrics also differ.\
    \  For instance, the RMON APM requires a\n   metric for the responsiveness of\
    \ services.  Such metrics are not\n   addressed in IPFIX.\n   Furthermore, the\
    \ APM-MIB allows the configuration of the transaction\n   type to be monitored,\
    \ which is currently not addressed in IPFIX.\n   The APM MIB could be considered\
    \ as an extension of the IPFIX Metering\n   Process where the application performance\
    \ of a combination of\n   multiple Flows is measured.  If appropriate, IEs would\
    \ be defined in\n   the IPFIX information model and the IPFIX Device would support\
    \ the\n   APM MIB data collection, the solutions could be complementary.  That\n\
    \   means one could use IPFIX to export APM MIB transaction information.\n   The\
    \ TPM-MIB breaks out the APM-MIB transactions into sub-application\n   level transactions.\
    \  For instance, a web request is broken down into\n   DNS, TCP, and HTTP sub-transactions.\
    \  Such sub-transactions can be\n   considered as bidirectional Flows.  With an\
    \ appropriate Flow\n   definition and the ability to map both directions of a\
    \ Flow (see\n   Section 4.6), one could measure and report Flow characteristics\
    \ of\n   such sub-application level transaction with IPFIX.\n   The TPM-MIB requires\
    \ APM-MIB and RMON2-MIB.\n"
- title: 3.4.  IPFIX and IPPM
  contents:
  - "3.4.  IPFIX and IPPM\n   The IPFIX protocol can be used to carry IPPM network\
    \ performance\n   metrics or information that can be used to calculate those metrics\n\
    \   (see Sections 2.5 and 2.7 for details and references).\n"
- title: 3.5.  IPFIX and AAA
  contents:
  - "3.5.  IPFIX and AAA\n   AAA defines a protocol and architecture for authentication,\n\
    \   authorization, and accounting for service usage [RFC2903].  The\n   DIAMETER\
    \ protocol [RFC3588] is used for AAA communication, which is\n   needed for network\
    \ access services (Mobile IP, NASREQ, and ROAMOPS).\n   The AAA architecture [RFC2903]\
    \ provides a framework for extending AAA\n   support to other services.  DIAMETER\
    \ defines the exchange of messages\n   between AAA entities, e.g., between AAA\
    \ clients at access devices and\n   AAA servers, and among AAA servers.  DIAMETER\
    \ is used for the\n   transfer of accounting records.  In order to form accounting\
    \ records\n   for usage-based accounting measurement, data from the network is\n\
    \   required.  IPFIX defines a protocol to export such data from routers,\n  \
    \ measurement probes, and other devices.  Therefore, it looks promising\n   to\
    \ connect those two architectures.\n   For all scenarios described here, one has\
    \ to keep in mind that IPFIX\n   does not conform to the reliability requirements\
    \ for usage-based\n   billing described in [RFC2975] (see Section 4.2).  Using\
    \ IPFIX\n   without reliability extensions together with AAA would result in\n\
    \   accounting scenarios that do not conform to usage-based billing\n   requirements\
    \ described in [RFC2975].\n   As shown in Section 2.1, accounting applications\
    \ can directly\n   incorporate an IPFIX Collecting Process to receive IPFIX records\
    \ with\n   information about the transmitted volume.  Nevertheless, if a AAA\n\
    \   infrastructure is in place, the cooperation between IPFIX and AAA\n   provides\
    \ many valuable synergistic benefits.  IPFIX records can\n   provide the input\
    \ for AAA accounting functions and provide the basis\n   for the generation of\
    \ DIAMETER accounting records.  However, as\n   stated in Section 4.2, the use\
    \ of IPFIX as described in [RFC5101] is\n   currently limited to situations where\
    \ the purpose of the accounting\n   does not require reliability.\n   Further\
    \ potential features include the mapping of a user ID to Flow\n   information\
    \ (by using authentication information) or using the secure\n   authorized exchange\
    \ of DIAMETER accounting records with neighbor\n   domains.  The last feature\
    \ is especially useful in roaming scenarios\n   where the user connects to a foreign\
    \ network and the home provider\n   generates the invoice.\n   Coupling an IPFIX\
    \ Collecting Process with AAA functions also has high\n   potential for intrusion\
    \ and attack detection.  AAA controls network\n   access and maintains data about\
    \ users and nodes.  AAA functions can\n   help to identify the source of malicious\
    \ traffic.  Authorization\n   functions are able to deny access to suspicious\
    \ users or nodes.\n   Therefore, coupling those functions with an IPFIX Collecting\
    \ Process\n   can provide an efficient defense against network attacks.\n   Sharing\
    \ IPFIX records (either directly or encapsulated in DIAMETER)\n   with neighbor\
    \ providers allows an efficient inter-domain attack\n   detection.  For this,\
    \ it would be useful to allow remote\n   configuration of measurement and record\
    \ generation in order to\n   provide information in the required granularity and\
    \ accuracy.  Since\n   remote configuration is currently not addressed in IPFIX,\
    \ this would\n   require additional work.  The AAA infrastructure itself may be\
    \ used\n   to configure measurement functions in the network as proposed in\n\
    \   [RFC3334].\n   Furthermore, the transport of IPFIX records with DIAMETER would\n\
    \   require the translation of IPFIX Information Elements into DIAMETER\n   attribute\
    \ value pairs (AVPs) defined in [RFC3588].  Since the\n   DIAMETER AVPs do not\
    \ comprise all IPFIX Information Elements, it is\n   necessary to define new AVPs\
    \ to transport them over DIAMETER.\n   Two possibilities exist to connect IPFIX\
    \ and AAA:\n   - Connecting via a AAA Client\n   - Connecting via an Application\
    \ Specific Module (ASM)\n   Both are explained in the following sections.  The\
    \ approaches only\n   require a few additional functions.  They do not require\
    \ any changes\n   to IPFIX or DIAMETER.\n"
- title: 3.5.1.  Connecting via a AAA Client
  contents:
  - "3.5.1.  Connecting via a AAA Client\n   One possibility of connecting IPFIX and\
    \ AAA is to run a AAA client on\n   the IPFIX Collector.  This client can generate\
    \ DIAMETER accounting\n   messages and send them to a AAA server.  The mapping\
    \ of the Flow\n   information to a user ID can be done in the AAA server by using\
    \ data\n   from the authentication process.  DIAMETER accounting messages can\
    \ be\n   sent to the accounting application or to other AAA servers (e.g., in\n\
    \   roaming scenarios).\n                    +---------+  DIAMETER    +---------+\n\
    \                    |  AAA-S  |------------->|  AAA-S  |\n                  \
    \  +---------+              +---------+\n                         ^\n        \
    \                 | DIAMETER\n                         |\n                   \
    \      |\n                  +--+--------+--+\n                  |  |  AAA-C |\
    \  |\n                  +  +--------+  |\n                  |              |\n\
    \                  |  Collector   |\n                  +--------------+\n    \
    \                     ^\n                         | IPFIX\n                  \
    \       |\n                   +------------+\n                   |  Exporter \
    \ |\n                   +------------+\n      Figure 1: IPFIX Collector connects\
    \ to AAA server via AAA client\n"
- title: 3.5.2.  Connecting via an Application Specific Module (ASM)
  contents:
  - "3.5.2.  Connecting via an Application Specific Module (ASM)\n   Another possibility\
    \ is to directly connect the IPFIX Collector with\n   the AAA server via an application\
    \ specific module (ASM).  Application\n   specific modules have been proposed\
    \ by the IRTF AAA architecture\n   research group (AAARCH) in [RFC2903].  They\
    \ act as an interface\n   between AAA server and service equipment.  In this case,\
    \ the IPFIX\n   Collector is part of the ASM.  The ASM acts as an interface between\n\
    \   the IPFIX protocol and the input interface of the AAA server.  The\n   ASM\
    \ translates the received IPFIX data into an appropriate format for\n   the AAA\
    \ server.  The AAA server then can add information about the\n   user ID and generate\
    \ a DIAMETER accounting record.  This accounting\n   record can be sent to an\
    \ accounting application or to other AAA\n   servers.\n                      \
    \ +---------+  DIAMETER    +---------+\n                       |  AAA-S  |------------->|\
    \  AAA-S  |\n                       +---------+              +---------+\n   \
    \                         ^\n                            |\n                 \
    \   +------------------+\n                    |     ASM          |\n         \
    \           |  +------------+  |\n                    |  |  Collector |  |\n \
    \                   +------------------+\n                            ^\n    \
    \                        | IPFIX\n                            |\n            \
    \          +------------+\n                      |  Exporter  |\n            \
    \          +------------+\n            Figure 2: IPFIX connects to AAA server\
    \ via ASM\n"
- title: 3.6.  IPFIX and RTFM
  contents:
  - "3.6.  IPFIX and RTFM\n   The Realtime Traffic Flow Measurement (RTFM) working\
    \ group defined an\n   architecture for Flow measurement [RFC2722].  This section\
    \ compares\n   the RTFM framework with the IPFIX framework.\n"
- title: 3.6.1.  Architecture
  contents:
  - "3.6.1.  Architecture\n   The RTFM architecture [RFC2722] is very similar to the\
    \ IPFIX\n   architecture.  It defines meter, meter reader, and a manager as\n\
    \   building blocks of the measurement architecture.  The manager\n   configures\
    \ the meter, and the meter reader collects data from the\n   meter.  In RTFM,\
    \ the building blocks communicate via SNMP.\n   The IPFIX architecture [RFC5470]\
    \ defines Metering, Exporting, and\n   Collecting Processes.  IPFIX speaks about\
    \ processes instead of\n   devices to clarify that multiple of those processes\
    \ may be co-located\n   on the same machine.\n   These definitions do not contradict\
    \ each other.  One could see the\n   Metering Process as part of the meter, and\
    \ the Collecting Process as\n   part of the meter reader.\n   One difference is\
    \ that IPFIX currently does not define a managing\n   process because remote configuration\
    \ was (at least initially) out of\n   scope for the working group.\n"
- title: 3.6.2.  Flow Definition
  contents:
  - "3.6.2.  Flow Definition\n   RTFM and IPFIX both consider Flows as a group of\
    \ packets that share a\n   common set of properties.  A Flow is completely specified\
    \ by that set\n   of values, together with a termination criterion (like inactivity\n\
    \   timeout).\n   A difference is that RTFM defines Flows as bidirectional.  An\
    \ RTFM\n   meter matches packets from B to A and A to B as separate parts of a\n\
    \   single Flow, and it maintains two sets of packet and byte counters,\n   one\
    \ for each direction.\n   IPFIX does not explicitly state whether Flows are uni-\
    \ or\n   bidirectional.  Nevertheless, Information Elements for describing\n \
    \  Flow properties were defined for only one direction in [RFC5102].\n   There\
    \ are several solutions for reporting bidirectional Flow\n   information (see\
    \ Section 4.6).\n"
- title: 3.6.3.  Configuration and Management
  contents:
  - "3.6.3.  Configuration and Management\n   In RTFM, remote configuration is the\
    \ only way to configure a meter.\n   This is done by using SNMP and a specific\
    \ Meter MIB [RFC2720].  The\n   IPFIX group currently does not address IPFIX remote\
    \ configuration.\n   IPFIX Metering Processes export the layout of data within\
    \ their\n   Templates, from time to time.  IPFIX Collecting Processes use that\n\
    \   Template information to determine how they should interpret the IPFIX\n  \
    \ Flow data they receive.\n"
- title: 3.6.4.  Data Collection
  contents:
  - "3.6.4.  Data Collection\n   One major difference between IPFIX and RTFM is the\
    \ data collection\n   model.  RTFM retrieves data in pull mode, whereas IPFIX\
    \ uses a push\n   mode model to send data to Collecting Processes.\n   An RTFM\
    \ meter reader pulls data from a meter by using SNMP.  SNMP\n   security on the\
    \ meter determines whether a reader is allowed to pull\n   data from it.  An IPFIX\
    \ Exporting Process is configured to export\n   records to a specified list of\
    \ IPFIX Collecting Processes.  The\n   condition of when to send IPFIX records\
    \ (e.g., Flow termination) has\n   to be configured in the Exporting or Metering\
    \ Process.\n"
- title: 3.6.5.  Data Model Details
  contents:
  - "3.6.5.  Data Model Details\n   RTFM defines all its attributes in the RTFM Meter\
    \ MIB [RFC2720].\n   IPFIX Information Elements are defined in [RFC5102].\n  \
    \ RTFM uses continuously-incrementing 64-bit counters for the storage\n   of the\
    \ number of packets of a Flow.  The counters are never reset and\n   just wrap\
    \ back to zero if the maximum value is exceeded.  Flows can\n   be read at any\
    \ time.  The difference between counter readings gives\n   the counts for activity\
    \ in the interval between readings.\n   IPFIX allows absolute (totalCounter) and\
    \ relative counters\n   (deltaCounter) [RFC5102].  The totalCounter is never reset\
    \ and just\n   wraps to zero if values are too large, exactly as the counters\
    \ used\n   in RTFM.  The deltaCounter is reset to zero when the associated Flow\n\
    \   Record is exported.\n"
- title: 3.6.6.  Transport Protocol
  contents:
  - "3.6.6.  Transport Protocol\n   RTFM has a Standards-Track Meter MIB [RFC2720],\
    \ which is used both to\n   configure a meter and to store metering results. \
    \ The MIB provides a\n   way to read lists of attributes with a single Object\
    \ Identifier\n   (called a 'package'), which reduces the SNMP overhead for Flow\
    \ data\n   collection.  SNMP, of course, normally uses UDP as its transport\n\
    \   protocol.  Since RTFM requires a reliable Flow data transport system,\n  \
    \ an RTFM meter reader must time out and resend unanswered SNMP\n   requests.\
    \  Apart from being clumsy, this can limit the maximum data\n   transfer rate\
    \ from meter to meter reader.\n   IPFIX is designed to work over a variety of\
    \ different transport\n   protocols.  SCTP [RFC4960] and PR-SCTP [RFC3758] are\
    \ mandatory.  UDP\n   and TCP are optional.  In addition, the IPFIX protocol encodes\
    \ data\n   much more efficiently than SNMP does, hence IPFIX has lower data\n\
    \   transport overheads than RTFM.\n"
- title: 3.6.7.  Summary
  contents:
  - "3.6.7.  Summary\n   IPFIX exports Flow information in a push model by using SCTP,\
    \ TCP, or\n   UDP.  It currently does not address remote configuration.  RTFM\
    \ data\n   collection is using the pull model and runs over SNMP.  RTFM\n   addresses\
    \ remote configuration, which also runs over SNMP.  Both\n   frameworks allow\
    \ a very flexible Flow definition, although RTFM is\n   based on a bidirectional\
    \ Flow definition.\n"
- title: 4.  Limitations
  contents:
  - "4.  Limitations\n   The goal of this section is to show the limitations of IPFIX\
    \ and to\n   give advice where not to use IPFIX or in which cases additional\n\
    \   considerations are required.\n"
- title: 4.1.  Using IPFIX for Other Applications than Listed in RFC 3917
  contents:
  - "4.1.  Using IPFIX for Other Applications than Listed in RFC 3917\n   IPFIX provides\
    \ a generic export mechanism.  Due to its Template-based\n   structure, it is\
    \ a quite flexible protocol.  Network operators and\n   users may want to use\
    \ it for other applications than those described\n   in [RFC3917].\n   Apart from\
    \ sending raw Flow information, it can be used to send per-\n   packet data, aggregated\
    \ or post-processed data.  For this, new\n   Templates and Information Elements\
    \ can be defined if needed.  Due to\n   its push mode operation, IPFIX is also\
    \ suited to send network\n   initiated events like alarms and other notifications.\
    \  It can be used\n   for exchanging information among network nodes to autonomously\n\
    \   improve network operation.\n   Nevertheless, the IPFIX design is based on\
    \ the requirements that\n   originate only from the target applications stated\
    \ in [RFC3917].\n   Using IPFIX for other purposes requires a careful checking\
    \ of IPFIX\n   capabilities against application requirements.  Only with this,\
    \ one\n   can decide whether IPFIX is a suitable protocol to meet the needs of\n\
    \   a specific application.\n"
- title: 4.2.  Using IPFIX for Billing (Reliability Limitations)
  contents:
  - "4.2.  Using IPFIX for Billing (Reliability Limitations)\n   The reliability requirements\
    \ defined in [RFC3917] are not sufficient\n   to guarantee the level of reliability\
    \ that is needed for usage-based\n   billing systems as described in [RFC2975].\
    \  In particular, IPFIX does\n   not support the following features required by\
    \ [RFC2975]:\n   - Record loss: IPFIX allows the usage of different transport\n\
    \     protocols for the transfer of data records.  Resilience against the\n  \
    \   loss of IPFIX data records can be only provided if TCP or SCTP is\n     used\
    \ for the transfer of data records.\n   - Network or device failures: IPFIX does\
    \ allow the usage of multiple\n     Collectors for one Exporter, but it neither\
    \ specifies nor demands\n     the use of multiple Collectors for the provisioning\
    \ of fault\n     tolerance.\n   - Detection and elimination of duplicate records:\
    \ This is currently\n     not supported by IPFIX.\n   - Application layer acknowledgements:\
    \ IPFIX does not support the\n     control of measurement and Exporting Processes\
    \ by higher-level\n     applications.  Application layer acknowledgements are\
    \ necessary,\n     e.g., to inform the Exporter in case the application is not\
    \ able to\n     process the data exported with IPFIX.  Such acknowledgements are\n\
    \     not supported in IPFIX.\n   Further features like archival accounting and\
    \ pre-authorization are\n   out of scope of the IPFIX specification but need to\
    \ be realized in\n   billing system architectures as described in [RFC2975].\n"
- title: 4.3.  Using a Different Transport Protocol than SCTP
  contents:
  - "4.3.  Using a Different Transport Protocol than SCTP\n   SCTP is the preferred\
    \ protocol for IPFIX, i.e., a conforming\n   implementation must work over SCTP.\
    \  Although IPFIX can also work\n   over TCP or UDP, both protocols have drawbacks\
    \ [RFC5101].  Users\n   should make sure they have good reasons before using protocols\
    \ other\n   than SCTP in a specific environment.\n"
- title: 4.4.  Push vs. Pull Mode
  contents:
  - "4.4.  Push vs. Pull Mode\n   IPFIX works in push mode.  That means IPFIX records\
    \ are automatically\n   exported without the need to wait for a request.  The\
    \ responsibility\n   for initiating a data export lies with the Exporting Process.\n\
    \   Criteria for exporting data need to be configured at the Exporting\n   Process.\
    \  Therefore, push mode has more benefits if the trigger for\n   data export is\
    \ related to events at the Exporting Process (e.g., Flow\n   termination, memory\
    \ shortage due to large amount of Flows, etc.).  If\n   the protocol used pull\
    \ mode, the Exporting Process would need to wait\n   for a request to send the\
    \ data.  With push mode, it can send data\n   immediately, e.g., before memory\
    \ shortage would require a discarding\n   of data.\n   With push mode, one can\
    \ prevent the overloading of resources at the\n   Exporting Process by simply\
    \ exporting the information as soon as\n   certain thresholds are about to be\
    \ exceeded.  Therefore, exporting\n   criteria are often related to traffic characteristics\
    \ (e.g., Flow\n   timeout) or resource limitations (e.g., size of Flow cache).\n\
    \   However, traffic characteristics are usually quite dynamic and often\n   impossible\
    \ to predict.  If they are used to trigger Flow export, the\n   exporting rate\
    \ and the resource consumption for Flow export becomes\n   variable and unpredictable.\n\
    \   Pull mode has advantages if the trigger for data export is related to\n  \
    \ events at the Collecting Process (e.g., a specific application\n   requests\
    \ immediate input).\n   In a pull mode, a request could simply be forwarded to\
    \ the Exporting\n   Process.  In a push mode, the exporting configuration must\
    \ be changed\n   to trigger the export of the requested data.  Furthermore, with\
    \ pull\n   mode, one can prevent the overloading of the Collecting Process by\n\
    \   the arrival of more records than it can process.\n   Whether this is a relevant\
    \ drawback depends on the flexibility of the\n   IPFIX configuration and how IPFIX\
    \ configuration rules are\n   implemented.\n"
- title: 4.5.  Template ID Number
  contents:
  - "4.5.  Template ID Number\n   The IPFIX specification limits the different Template\
    \ ID numbers that\n   can be assigned to the newly generated Template records\
    \ in an\n   Observation Domain.  In particular, Template IDs up to 255 are\n \
    \  reserved for Template or option sets (or other sets to be created)\n   and\
    \ Template IDs from 256 to 65535 are assigned to data sets.  In the\n   case of\
    \ many exports requiring many different Templates, the set of\n   Template IDs\
    \ could be exhausted.\n"
- title: 4.6.  Exporting Bidirectional Flow Information
  contents:
  - "4.6.  Exporting Bidirectional Flow Information\n   Although IPFIX does not explicitly\
    \ state that Flows are\n   unidirectional, Information Elements that describe\
    \ Flow\n   characteristics are defined only for one direction in [RFC5102].\n\
    \   [RFC5101] allows the reporting of multiple identical Information\n   Elements\
    \ in one Flow Record.  With this, Information Elements for\n   forward and reverse\
    \ directions can be reported in one Flow Record.\n   However, this is not sufficient.\
    \  Using this feature for reporting\n   bidirectional Flow information would require\
    \ an agreement on the\n   semantics of Information Elements (e.g., first counter\
    \ is the counter\n   for the forward direction, the second counter for the reverse\n\
    \   direction).\n   Another option is to use two adjacent Flow Records to report\
    \ both\n   directions of a bidirectional Flow separately.  This approach\n   requires\
    \ additional means for mapping those records and is quite\n   inefficient due\
    \ to the redundant reporting of Flow Keys.\n"
- title: 4.7.  Remote Configuration
  contents:
  - "4.7.  Remote Configuration\n   Remote configuration was initially out of scope\
    \ of the IPFIX working\n   group in order to concentrate on the protocol specification.\n\
    \   Therefore, there is currently no standardized way to configure IPFIX\n   processes\
    \ remotely.  Nevertheless, due to the broad need for this\n   feature, it is quite\
    \ likely that solutions for this will be\n   standardized soon.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   This document describes the usage of IPFIX in\
    \ various scenarios.\n   Security requirements for IPFIX target applications and\
    \ security\n   considerations for IPFIX are addressed in [RFC3917] and [RFC5101].\n\
    \   Those requirements have to be met for the usage of IPFIX for all\n   scenarios\
    \ described in this document.  To our current knowledge, the\n   usage scenarios\
    \ proposed in Section 2 do not induce further security\n   hazards.\n   The threat\
    \ level to IPIFX itself may depend on the usage scenario of\n   IPFIX.  The usage\
    \ of IPFIX for accounting or attack detection may\n   increase the incentive to\
    \ attack IPFIX itself.  Nevertheless,\n   security considerations have to be taken\
    \ into account in all\n   described scenarios.\n   As described in the security\
    \ considerations in [RFC5101], security\n   incidents can become a threat to IPFIX\
    \ processes themselves, even if\n   IPIFX is not the target of the attack.  If\
    \ an attack generates a\n   large amount of Flows (e.g., by sending packets with\
    \ spoofed\n   addresses or simulating Flow termination), Exporting and Collecting\n\
    \   Processes may get overloaded by the immense amount of records that\n   are\
    \ exported.  A flexible deployment of packet or Flow sampling\n   methods can\
    \ be useful to prevent the exhaustion of resources.\n   Section 3 of this document\
    \ describes how IPFIX can be used in\n   combination with other technologies.\
    \  New security hazards can arise\n   when two individually secure technologies\
    \ or architectures are\n   combined.  For the combination of AAA with IPFIX, an\
    \ application\n   specific module (ASM) or an IPFIX Collector can function as\
    \ a transit\n   point for the messages.  One has to ensure that at this point\
    \ the\n   applied security mechanisms (e.g., encryption of messages) are\n   maintained.\n"
- title: 6.  Acknowledgements
  contents:
  - "6.  Acknowledgements\n   We would like to thank the following people for their\
    \ contributions,\n   discussions on the mailing list, and valuable comments:\n\
    \      Sebastian Zander\n      Robert Loewe\n      Reinaldo Penno\n      Lutz\
    \ Mark\n      Andy Biermann\n   Part of the work has been developed in the research\
    \ project 6QM,\n   co-funded with support from the European Commission.\n"
- title: 7.  Normative References
  contents:
  - "7.  Normative References\n   [RFC4148]  Stephan, E., \"IP Performance Metrics\
    \ (IPPM) Metrics\n              Registry\", BCP 108, RFC 4148, August 2005.\n\
    \   [RFC5101]  Claise, B., Ed., \"Specification of the IP Flow Information\n \
    \             Export (IPFIX) Protocol for the Exchange of IP Traffic\n       \
    \       Flow Information\", RFC 5101, January 2008.\n   [RFC5102]  Quittek, J.,\
    \ Bryant, S., Claise, B., Aitken, P., and J.\n              Meyer, \"Information\
    \ Model for IP Flow Information Export\",\n              RFC 5102, January 2008.\n\
    \   [RFC5477]  Dietz, T., Claise, B., Aitken, P., Dressler, F., and G.\n     \
    \         Carle, \"Information Model for Packet Sampling Exports\",\n        \
    \      RFC 5477, March 2009.\n"
- title: 8.  Informative References
  contents:
  - "8.  Informative References\n   [Brow00]   Brownlee, N., \"Packet Matching for\
    \ NeTraMet\n              Distributions\", <http://www.caida.org/tools/measurement/\n\
    \              netramet/packetmatching/>.\n   [DuGr00]   Duffield, N. and M. Grossglauser,\
    \ \"Trajectory Sampling for\n              Direct Traffic Observation\", Proceedings\
    \ of ACM SIGCOMM\n              2000, Stockholm, Sweden, August 28 - September\
    \ 1, 2000.\n   [GrDM98]   Graham, I., Donnelly, S., Martin, S., Martens, J., and\
    \ J.\n              Cleary, \"Nonintrusive and Accurate Measurement of\n     \
    \         Unidirectional Delay and Delay Variation on the Internet\",\n      \
    \        INET'98, Geneva, Switzerland, 21-24 July, 1998.\n   [RFC2679]  Almes,\
    \ G., Kalidindi, S., and M. Zekauskas, \"A One-way\n              Delay Metric\
    \ for IPPM\", RFC 2679, September 1999.\n   [RFC2680]  Almes, G., Kalidindi, S.,\
    \ and M. Zekauskas, \"A One-way\n              Packet Loss Metric for IPPM\",\
    \ RFC 2680, September 1999.\n   [RFC2681]  Almes, G., Kalidindi, S., and M. Zekauskas,\
    \ \"A Round-trip\n              Delay Metric for IPPM\", RFC 2681, September 1999.\n\
    \   [RFC2702]  Awduche, D., Malcolm, J., Agogbua, J., O'Dell, M., and J.\n   \
    \           McManus, \"Requirements for Traffic Engineering Over MPLS\",\n   \
    \           RFC 2702, September 1999.\n   [RFC2720]  Brownlee, N., \"Traffic Flow\
    \ Measurement: Meter MIB\", RFC\n              2720, October 1999.\n   [RFC2722]\
    \  Brownlee, N., Mills, C., and G. Ruth, \"Traffic Flow\n              Measurement:\
    \ Architecture\", RFC 2722, October 1999.\n   [RFC2903]  de Laat, C., Gross, G.,\
    \ Gommans, L., Vollbrecht, J., and\n              D. Spence, \"Generic AAA Architecture\"\
    , RFC 2903, August\n              2000.\n   [RFC2975]  Aboba, B., Arkko, J., and\
    \ D. Harrington, \"Introduction to\n              Accounting Management\", RFC\
    \ 2975, October 2000.\n   [RFC3246]  Davie, B., Charny, A., Bennet, J., Benson,\
    \ K., Le Boudec,\n              J., Courtney, W., Davari, S., Firoiu, V., and\
    \ D.\n              Stiliadis, \"An Expedited Forwarding PHB (Per-Hop\n      \
    \        Behavior)\", RFC 3246, March 2002.\n   [RFC3330]  IANA, \"Special-Use\
    \ IPv4 Addresses\", RFC 3330, September\n              2002.\n   [RFC3334]  Zseby,\
    \ T., Zander, S., and C. Carle, \"Policy-Based\n              Accounting\", RFC\
    \ 3334, October 2002.\n   [RFC3393]  Demichelis, C. and P. Chimento, \"IP Packet\
    \ Delay Variation\n              Metric for IP Performance Metrics (IPPM)\", RFC\
    \ 3393,\n              November 2002.\n   [RFC3577]  Waldbusser, S., Cole, R.,\
    \ Kalbfleisch, C., and D.\n              Romascanu, \"Introduction to the Remote\
    \ Monitoring (RMON)\n              Family of MIB Modules\", RFC 3577, August 2003.\n\
    \   [RFC3588]  Calhoun, P., Loughney, J., Guttman, E., Zorn, G., and J.\n    \
    \          Arkko, \"Diameter Base Protocol\", RFC 3588, September 2003.\n   [RFC3729]\
    \  Waldbusser, S., \"Application Performance Measurement MIB\",\n            \
    \  RFC 3729, March 2004.\n   [RFC3758]  Stewart, R., Ramalho, M., Xie, Q., Tuexen,\
    \ M., and P.\n              Conrad, \"Stream Control Transmission Protocol (SCTP)\n\
    \              Partial Reliability Extension\", RFC 3758, May 2004.\n   [RFC3917]\
    \  Quittek, J., Zseby, T., Claise, B., and S. Zander,\n              \"Requirements\
    \ for IP Flow Information Export (IPFIX)\", RFC\n              3917, October 2004.\n\
    \   [RFC4150]  Dietz, R. and R. Cole, \"Transport Performance Metrics\n      \
    \        MIB\", RFC 4150, August 2005.\n   [RFC4960]  Stewart, R., Ed., \"Stream\
    \ Control Transmission Protocol\",\n              RFC 4960, September 2007.\n\
    \   [RFC5470]  Sadasivan, G., Brownlee, N., Claise, B., and J. Quittek,\n    \
    \          \"Architecture for IP Flow Information Export\", RFC 5470,\n      \
    \        March 2009.\n   [RFC5475]  Zseby, T., Molina, M., Duffield, N., Niccolini,\
    \ S., and F.\n              Raspall, \"Sampling and Filtering Techniques for IP\
    \ Packet\n              Selection\", RFC 5475, March 2009.\n   [RFC5476]  Claise,\
    \ B., Ed., \"Packet Sampling (PSAMP) Protocol\n              Specifications\"\
    , RFC 5476, March 2009.\n   [ZsZC01]   Zseby, T., Zander, S., and G. Carle, \"\
    Evaluation of\n              Building Blocks for Passive One-way-delay Measurements\"\
    ,\n              Proceedings of Passive and Active Measurement Workshop\n    \
    \          (PAM 2001), Amsterdam, The Netherlands, April 23-24, 2001\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Tanja Zseby\n   Fraunhofer Institute for Open Communication\
    \ Systems (FOKUS)\n   Kaiserin-Augusta-Allee 31\n   10589 Berlin, Germany\n  \
    \ Phone: +49 30 3463 7153\n   EMail: tanja.zseby@fokus.fraunhofer.de\n   Elisa\
    \ Boschi\n   Hitachi Europe\n   c/o ETH Zurich\n   Gloriastrasse 35\n   8092 Zurich\n\
    \   Switzerland\n   Phone: +41 44 6327057\n   EMail: elisa.boschi@hitachi-eu.com\n\
    \   Nevil Brownlee\n   CAIDA (UCSD/SDSC)\n   9500 Gilman Drive\n   La Jolla, CA\
    \ 92093-0505\n   Phone: +1 858 534 8338\n   EMail: nevil@caida.org\n   Benoit\
    \ Claise\n   Cisco Systems, Inc.\n   De Kleetlaan 6a b1\n   1831 Diegem\n   Belgium\n\
    \   Phone: +32 2 704 5622\n   EMail: bclaise@cisco.com\n"
