- title: __initial_text__
  contents:
  - "                Suggested Practices for Registration of\n                  Internationalized\
    \ Domain Names (IDN)\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
- title: IESG Note
  contents:
  - "IESG Note\n   This RFC is not a candidate for any level of Internet Standard.\
    \  The\n   IETF disclaims any knowledge of the fitness of this RFC for any\n \
    \  purpose and notes that the decision to publish is not based on IETF\n   review\
    \ apart from IESG review for conflict with IETF work.  The RFC\n   Editor has\
    \ chosen to publish this document at its discretion.  See\n   RFC 3932 for more\
    \ information.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document explores the issues in the registration of\n   internationalized\
    \ domain names (IDNs).  The basic IDN definition\n   allows a very large number\
    \ of possible characters in domain names,\n   and this richness may lead to serious\
    \ user confusion about similar-\n   looking names.  To avoid this confusion, the\
    \ IDN registration process\n   must impose rules that disallow some otherwise-valid\
    \ name\n   combinations.  This document suggests a set of mechanisms that\n  \
    \ registries might use to define and implement such rules for a broad\n   range\
    \ of languages, including adaptation of methods developed for\n   Chinese, Japanese,\
    \ and Korean domain names.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Background .................................................3\n  \
    \    1.2. The Nature and Status of these Recommendations .............4\n    \
    \  1.3. Terminology ................................................5\n      \
    \   1.3.1. Languages and Scripts .................................5\n        \
    \ 1.3.2. Characters, Variants, Registrations, and Other\n                Issues\
    \ ................................................6\n         1.3.3. Confusion,\
    \ Fraud, and Cybersquatting ..................9\n      1.4. A Review of the JET\
    \ Guidelines .............................9\n         1.4.1. JET Model .............................................9\n\
    \         1.4.2. Reserved Names and Label Packages ....................10\n  \
    \    1.5. Languages, Scripts, and Variants ..........................11\n    \
    \     1.5.1. Languages versus Scripts .............................11\n      \
    \   1.5.2. Variant Selection ....................................13\n      1.6.\
    \ Variants are not a Universal Remedy .......................14\n      1.7. Reservations\
    \ and Exclusions ...............................14\n         1.7.1. Sequence Exclusions\
    \ for Valid Characters .............14\n         1.7.2. Character Pairing Issues\
    \ .............................15\n      1.8. The Registration Bundle ...................................15\n\
    \         1.8.1. Definitions and Structure ............................15\n  \
    \       1.8.2. Application of the Registration Bundle ...............16\n   2.\
    \ Some Implications of This Approach .............................17\n   3. Possible\
    \ Modifications of the JET Model ........................18\n   4. Conclusions\
    \ and Recommendations About the General Approach .....18\n   5. A Model Table\
    \ Format ...........................................19\n   6. A Model Label Registration\
    \ Procedure: \"CreateBundle\" ...........20\n      6.1. Description of the CreateBundle\
    \ Mechanism .................21\n      6.2. The \"no-variants\" Case ....................................22\n\
    \      6.3. CreateBundle and Nameprep Mapping .........................22\n  \
    \ 7. IANA Considerations ............................................23\n   8.\
    \ Internationalization Considerations ............................24\n   9. Security\
    \ Considerations ........................................24\n   10. Acknowledgements\
    \ ..............................................25\n   11. Informative References\
    \ ........................................26\n"
- title: 1.  Introduction
  contents:
  - '1.  Introduction

    '
- title: 1.1.  Background
  contents:
  - "1.1.  Background\n   The IDNA (Internationalized Domain Names in Applications)\n\
    \   specification [RFC3490] defines the basic model for encoding non-\n   ASCII\
    \ strings in the DNS.  Additional specifications [RFC3491]\n   [RFC3492] define\
    \ the mechanisms and tables needed to support IDNA.\n   As work on these specifications\
    \ neared completion, it became apparent\n   that it would be desirable for registries\
    \ to impose additional\n   restrictions on the names that could actually be registered\
    \ (e.g.,\n   see [IESG-IDN] and [ICANN-IDN]) to reduce potential confusion among\n\
    \   characters that were similar in some way.  This document explores\n   these\
    \ IDN (international domain name) registration issues and\n   suggests a set of\
    \ mechanisms that IDN registries might use.\n   Registration restrictions are\
    \ part of a long tradition.  For example,\n   while the original DNS specifications\
    \ [RFC1035] permitted any string\n   of octets in a DNS label, they also recommended\
    \ the use of a much\n   more restricted subset.  This subset was derived from\
    \ the much older\n   \"hostname\" rules [RFC952] and defined by the \"LDH\" convention\
    \ (for\n   the three permitted types of characters: letters, digits, and the\n\
    \   hyphen).  Enforcement of this restricted subset in registrations was\n   the\
    \ responsibility of the registry or domain administrator.  The\n   definition\
    \ of the subset was embedded in the DNS protocol itself,\n   although some applications\
    \ protocols, notably those concerned with\n   electronic mail, did impose and\
    \ enforce similar rules.\n   If there are no constraints on registration in a\
    \ zone, people can\n   register characters that increase the risk of misunderstandings,\n\
    \   cybersquatting, and other forms of confusion.  A similar situation\n   existed\
    \ even before the introduction of IDNA, as exemplified by\n   domain names such\
    \ as example.com and examp1e.com (note that the\n   latter domain contains the\
    \ digit \"1\" instead of the letter \"l\").\n   For non-ASCII names (so-called\
    \ \"internationalized domain names\" or\n   \"IDNs\"), the problem is more complicated.\
    \  In the earlier situation\n   that led to the LDH (hostname) rules, all protocols,\
    \ hosts, and DNS\n   zones used ASCII exclusively in practice, so the LDH restriction\n\
    \   could reasonably be applied uniformly across the Internet.  Support\n   for\
    \ IDNs introduces a very large character repertoire, different\n   geographical\
    \ and political locations, and languages that require\n   different collections\
    \ of characters.  The optimal registration\n   restrictions are no longer a global\
    \ matter; they may be different in\n   different areas and, hence, in different\
    \ DNS zones.\n   For some human writing systems, there are characters and/or strings\n\
    \   that have equivalent or near-equivalent usages.  If a name can be\n   registered\
    \ with such a character or string, the registry might want\n   to automatically\
    \ associate all of the names that have the same\n   meaning with the registered\
    \ name.  The registry might also decide\n   whether the names that are associated\
    \ with, or generated by, one\n   registration should, as a group or individually,\
    \ go into the zone or\n   should be blocked from registration by different parties.\n\
    \   To date, the best-developed system for handling registration\n   restrictions\
    \ for IDNs is the JET Guidelines for Chinese, Japanese,\n   and Korean [RFC3743],\
    \ the so-called \"CJK\" languages.  The JET\n   Guidelines are limited to the\
    \ CJK languages and, in particular, to\n   their common script base.  Those languages\
    \ are also the best-known\n   and most widely-used examples of writing systems\
    \ constructed on\n   \"ideographic\" or \"pictographic\" principles.  This document\
    \ explores\n   the principles behind the JET guidelines.  It then examines some\
    \ of\n   the issues that might arise in adapting them to alphabetic languages,\n\
    \   i.e., to languages whose characters primarily represent sounds rather\n  \
    \ than meanings.\n   This document describes five things:\n   1.  The general\
    \ background and considerations for non-ASCII scripts\n       in names.\n   2.\
    \  Suggested practices for describing character variants.\n   3.  A method for\
    \ using a zone's character variants to determine which\n       names should be\
    \ associated with a registration.\n   4.  A format for publishing a zone's table\
    \ of character variants;\n       Such tables are referred to below simply as \"\
    language tables\" or\n       simply \"tables\".\n   5.  A model algorithm for\
    \ name registration given the presence of\n       language tables.\n"
- title: 1.2.  The Nature and Status of these Recommendations
  contents:
  - "1.2.  The Nature and Status of these Recommendations\n   The document makes recommendations\
    \ for consideration by registries\n   and, where relevant, by those who coordinate\
    \ them, and by those who\n   use their services.  None of the recommendations\
    \ are intended to be\n   normative.  Instead, the intent of the document is to\
    \ illustrate a\n   framework for developing variations to meet the needs of particular\n\
    \   registries and their processing of particular languages.  Of course,\n   if\
    \ registries make similar decisions and utilize similar tools, costs\n   and confusion\
    \ may be reduced -- both between registries and for users\n   and registrars who\
    \ have relationships with more than one domain.\n   Just as the JET Guidelines\
    \ contain some suggestions that may not be\n   applicable to alphabetic scripts,\
    \ some of the suggestions here,\n   especially the more specific ones, may be\
    \ applicable to some scripts\n   and not others.\n"
- title: 1.3.  Terminology
  contents:
  - '1.3.  Terminology

    '
- title: 1.3.1.  Languages and Scripts
  contents:
  - "1.3.1.  Languages and Scripts\n   This document uses the term \"language\" in\
    \ what may be, to many\n   readers, an odd way.  Neither this specification, nor\
    \ IDNA, nor the\n   DNS are directly concerned with natural language, but only\
    \ with the\n   characters that make up a given label.  In some respects, the term\n\
    \   \"script\", used in the character coding community for a collection of\n \
    \  characters, might be more appropriate.  However, different subsets of\n   the\
    \ same script may be used with different languages, and the same\n   language\
    \ may be written using different characters (or even\n   completely different\
    \ scripts) in different locations, so \"script\" is\n   not precisely correct\
    \ either.\n   Long-standing confusion has also resulted from the fact that most\n\
    \   scripts are, informally at least, named after one of the languages\n   written\
    \ in them.  \"Chinese\" describes both a language and a\n   collection of characters\
    \ that are also used in writing Japanese,\n   Korean, and, at least historically,\
    \ some other languages.  \"Latin\"\n   describes a language, the characters used\
    \ to write that language,\n   and, often, characters used to write a number of\
    \ contemporary\n   languages that are derived from or similar to those used to\
    \ write the\n   Latin language.  The script used to write the Arabic language\
    \ is\n   called \"Arabic\", but it is also used (typically with some additions\n\
    \   or deletions) to write a number of other languages.  Situations in\n   which\
    \ a script has a clearly-defined name that is independent of the\n   name of a\
    \ language are the exception, rather than the rule; examples\n   include Hangul,\
    \ used to write Korean, Katakana and Hiragana, used to\n   write Japanese, and\
    \ a few others.  Some scholars have historically\n   used \"Roman\" or \"Roman-derived\"\
    \ for the script in an attempt to\n   distinguish between a script and the Latin\
    \ language.\n   The term \"language\" is therefore used in this document in the\n\
    \   informal sense of a written language and is defined, for this\n   purpose,\
    \ by the characters used to write it, i.e., as a language-\n   specific subset\
    \ of a script.  In this context, a \"language\" is\n   defined by the combination\
    \ of a code (see Section 1.4.1) and an\n   authority that has chosen to use that\
    \ code and establish a\n   character-listing for it.  Authorities are normally\
    \ TLD (top-level\n   domain) registries; see Section 7 and [IANA-language-registry].\n\
    \   However, it is expected that TLD registries will find appropriate\n   experts\
    \ and that advice from language and script experts selected by\n   international\
    \ neutral bodies will also become part of the\n   registration system.  In addition,\
    \ as discussed below in Section 7,\n   registries may conclude that the best interests\
    \ of registrants,\n   stakeholders, and the Internet community would be served\
    \ by\n   constructing \"language tables\" that mix scripts and characters in\n\
    \   ways that conform to no known language.  Conventions should be\n   developed\
    \ for such registrations that do not misleadingly reflect\n   specific language\
    \ codes.\n"
- title: 1.3.2.  Characters, Variants, Registrations, and Other Issues
  contents:
  - "1.3.2.  Characters, Variants, Registrations, and Other Issues\n   1.  Characters\
    \ in this document are specified by their Unicode\n       codepoints in U+xxxx\
    \ format, by their official names, or both.\n   2.  The following terms are used\
    \ in this document.\n       *  String\n          A \"string\" is an sequence of\
    \ one or more characters.\n       *  Base Character\n          This document discusses\
    \ characters that may have equivalent or\n          near-equivalent characters\
    \ or strings.  A \"base character\" is\n          a character that has zero or\
    \ more equivalents.  In the JET\n          Guidelines, base characters are referred\
    \ to as \"valid\n          characters\".  In a table with variants, as described\
    \ in\n          Section 5, the base characters occupy the first column.\n    \
    \      Normally (and always, if the recommendation of Section 6.3 is\n       \
    \   adopted), the base characters will be the characters that\n          appear\
    \ in registration requests from registrants; any other\n          character will\
    \ invalidate the registration attempt.\n       *  Native Script\n          Native\
    \ script is the form in which the relevant string would\n          normally be\
    \ represented.  For example, it might use Lower\n          Slobbovian characters\
    \ and the glyphs normally used to write\n          them.  It would not be punycode\
    \ as a presentation form.\n       *  Variant Characters/Strings\n          The\
    \ \"variant(s)\" are character(s) and/or string(s) that are\n          treated\
    \ as equivalent to the base character.  Note that these\n          might not be\
    \ exactly equivalent characters; a particular\n          original character may\
    \ be a base character with a mapping to a\n          particular variant character,\
    \ but that variant character may\n          not have a mapping to the original\
    \ base character.  Indeed,\n          the variant character may not appear in\
    \ the base character\n          list, and hence may not be valid for use in a\
    \ registration.\n          Usually, characters or strings to be designated as\
    \ variants\n          are considered either equivalent or sufficiently similar\
    \ (by\n          some registry-specific definition) that confusion between them\n\
    \          and the base character might occur.\n       *  Base Registration\n\
    \          The \"base registration\" is the single name that the registrant\n\
    \          requested from the registry.  The JET Guidelines use the term\n   \
    \       \"label string\" for this concept.\n       *  Registered, Activated\n\
    \          A label (or \"name\") is described as \"registered\" if it is\n   \
    \       actually entered into a domain (i.e., into a zone file) by the\n     \
    \     registry, so that it can be accessed and resolved using\n          standard\
    \ DNS tools.  The JET Guidelines describe a\n          \"registered\" label as\
    \ \"activated\".  However, some domains use\n          a slightly different registration\
    \ logic in which a name can be\n          registered with the registrar (if one\
    \ is involved) and with\n          the registry, but not actually entered into\
    \ the zone file\n          until an additional activation or delegation step occurs.\n\
    \          This document does not make that distinction, but is\n          compatible\
    \ with it.\n          As specified in the IDNA Standard, the name actually placed\
    \ in\n          the zone file is always the internal (\"punycode\") form.  There\n\
    \          is no provision for actually entering any other form of an IDN\n  \
    \        into the DNS.  It remains controversial, with different\n          registrars\
    \ and registries having adopted different policies,\n          as to whether the\
    \ registration, as submitted by the\n          registrant, is in the form of:\n\
    \          o  The native-script name, either in UTF-8 or in some coding\n    \
    \         specified by the registrar, or\n          o  the internal-form (\"punycode\"\
    ) name, or\n          o  both forms of the name together, so that the registrar\
    \ and\n             registry can verify the intended translation.\n          If\
    \ any of the approaches defined in this document is used, it\n          is almost\
    \ certain to be necessary that the native-script form\n          of the requested\
    \ string be available to the registry.\n       *  Registration Bundle\n      \
    \    A \"registration bundle\" is the set of all labels that come\n          from\
    \ expanding the base characters for a single name into\n          their variants.\
    \  The presence of a label in a registration\n          bundle does not imply\
    \ that it is registered.  In the JET\n          Guidelines, a registration bundle\
    \ is called an \"IDN Package\".\n       *  Reserved Label\n          A \"reserved\
    \ label\" is a label in a registration bundle that is\n          not actually\
    \ registered.\n       *  Registry\"\n          A \"registry\" is the administrative\
    \ authority for a DNS zone.\n          The registry is the body that enforces,\
    \ and typically makes,\n          policies that are used in a particular zone\
    \ in the DNS.\n       *  Coded Character Set\n          A \"Coded Character Set\"\
    \ (CCS) is a list of characters and the\n          code positions assigned to\
    \ them.  ASCII and Unicode are CCSs.\n       *  Language\n          A \"language\"\
    \ is something spoken by humans, independent of how\n          it is written or\
    \ coded.  ISO Standard 639 and IETF BCP 47 (RFC\n          3066) [RFC3066] list\
    \ and define codes for identifying\n          languages.\n       *  Script\n \
    \         A \"script\" is a collection of characters (glyphs, independent\n  \
    \        of coding) that are used together, typically to represent one\n     \
    \     or more languages.  Note that the script for one language may\n        \
    \  heavily overlap the script for another.  This does not imply\n          that\
    \ they have identical scripts.\n       *  Charset\n          \"Charset\" is an\
    \ IETF-invented term to describe, more or less,\n          the combination of\
    \ a script, a CCS that encodes that script,\n          and rules for serializing\
    \ encoded bytes that are stored on a\n          computer or transmitted over the\
    \ network.\n   The last four of these definitions are redundant with, but\n  \
    \ deliberately somewhat less precise than, the definitions in\n   [RFC3536], which\
    \ also provides sources.  The two sets of definitions\n   are intended to be consistent.\n"
- title: 1.3.3.  Confusion, Fraud, and Cybersquatting
  contents:
  - "1.3.3.  Confusion, Fraud, and Cybersquatting\n   The term \"confusion\" is used\
    \ very generically in this document to\n   cover the entire range from accidental\
    \ user misperception of the\n   relationship between characters with some characteristic\
    \ in common\n   (typically appearance, sound, or meaning) to cybersquatting and\n\
    \   (other) deliberately fraudulent attempts to exploit those\n   relationships\
    \ based on the nature of the characters.\n"
- title: 1.4.  A Review of the JET Guidelines
  contents:
  - '1.4.  A Review of the JET Guidelines

    '
- title: 1.4.1.  JET Model
  contents:
  - "1.4.1.  JET Model\n   In the JET Guidelines model, a prospective registrant approaches\
    \ the\n   registry for a zone (perhaps through an intermediate registrar) with\n\
    \   a candidate base registration -- a proposed name to be registered --\n   and\
    \ a list of languages in which that name is to be interpreted.  The\n   languages\
    \ are defined according to the fairly high-resolution coding\n   of [RFC3066]\
    \ or, if the registry considers it more appropriate, a\n   coding based on scripts\
    \ such as those in [LTRU-Registry].  In this\n   way, Chinese as used on the mainland\
    \ of the People's Republic of\n   China (\"zh-cn\") can, at registry option, consist\
    \ of a somewhat\n   different list of characters (code points) and be represented\
    \ by a\n   separate table compared to Chinese as used in Taiwan (\"zh-tw\").\n\
    \   The design of the JET Guidelines took one important constraint as a\n   basis:\
    \ IDNA was treated as a firm standard.  A procedure that\n   modified some portion\
    \ of the IDNA functions, or was a variant on\n   them, was considered a violation\
    \ of those standards and should not be\n   encouraged (or, probably, even permitted).\n\
    \   Each registry is expected to construct (or obtain) a table for each\n   language\
    \ it considers relevant and appropriate.  These tables list,\n   for the particular\
    \ zone, the characters permitted for that language.\n   If a character does not\
    \ appear as a base character (called a \"valid\n   code point\" in the JET document)\
    \ in that table, then a name\n   containing it cannot be registered.  If multiple\
    \ languages are listed\n   for the registration, then the character must appear\
    \ in the tables\n   for each of those languages.\n   The tables may also contain\
    \ columns that specify alternate or variant\n   forms of the valid character.\
    \  If these variants appear, they are\n   used to synthesize labels that are alternatives\
    \ to the original one.\n   These labels are all reserved and can be registered\
    \ or \"activated\"\n   (placed into the DNS) only by the action or request of\
    \ the original\n   registrant; some (the \"preferred variant labels\") are typically\n\
    \   registered automatically.  The zone is expected to establish\n   appropriate\
    \ policies for situations in which the variant forms of one\n   label conflict\
    \ with already-reserved or already-registered labels.\n   Most of these concepts\
    \ were introduced because of concerns about\n   specific issues with CJK characters,\
    \ beginning from the requirement\n   that the use of Simplified Chinese by some\
    \ registrants and\n   Traditional Chinese by others not be permitted to create\
    \ confusion or\n   opportunities for fraud.  While they may be applicable to registry\n\
    \   tables constructed for alphabetic scripts, the translation should be\n   done\
    \ with care, since many analogies are not exact.\n   Some of the important issues\
    \ are discussed in the sections that\n   follow, especially Section 3.  The JET\
    \ model may be considered as a\n   variation on, and inspiration for, the model\
    \ and method presented by\n   the rest of this document, although the JET model\
    \ has been completely\n   developed only for CJK characters.  Other languages\
    \ or scripts,\n   especially alphabetic ones, may require other variations.\n"
- title: 1.4.2.  Reserved Names and Label Packages
  contents:
  - "1.4.2.  Reserved Names and Label Packages\n   A basic assumption of the JET model\
    \ is that, if the evolution of\n   specific characters or the properties of Unicode\
    \ [Unicode]\n   [Unicode32] or IDNA cause two strings to appear similar enough\
    \ to\n   cause confusion, then both should be registered by the same party or\n\
    \   one of them should become unregisterable.  The definition of \"appear\n  \
    \ similar enough\" will differ for different cultures and circumstance,\n   and\
    \ hence DNS zones, but the principle is fairly general.  In the JET\n   model,\
    \ all of the variant strings are identified, some are registered\n   into the\
    \ DNS automatically, and others are simply reserved and can be\n   registered,\
    \ if at all, only by the original registrant.  Other zones\n   might find other\
    \ policies appropriate.  For example, a zone might\n   conclude that having similar\
    \ strings registered in the DNS was\n   undesirable.  If so, the list of variant\
    \ strings would be used only\n   to build a list of names that would be reserved\
    \ and prohibited from\n   being registered.\n"
- title: 1.5.  Languages, Scripts, and Variants
  contents:
  - '1.5.  Languages, Scripts, and Variants

    '
- title: 1.5.1.  Languages versus Scripts
  contents:
  - "1.5.1.  Languages versus Scripts\n   Conversations about scripts -- collections\
    \ of characters associated\n   with particular languages -- are common when discussing\
    \ character\n   sets and codes.  However, the boundaries between one script and\n\
    \   another are not well-defined.  The Unicode Standard ([Unicode],\n   [Unicode32]),\
    \ for example, does not define script boundaries at all,\n   even though it is\
    \ structured in terms of usually-related blocks of\n   characters.  The issue\
    \ is complicated by the common origin of most\n   alphabetic scripts in use in\
    \ the world today (see, for example,\n   [Drucker] or the more scholarly [Daniels]).\n\
    \   Because of that history, certain characters (or, more precisely,\n   symbols\
    \ representing characters) appear in the scripts associated\n   with multiple\
    \ languages, sometimes with very different sounds or\n   meanings.  This differs\
    \ from the CJK situation in which, if a\n   character appears in more than one\
    \ of the relevant languages, it will\n   usually have the same interpretation\
    \ in each one.  For the subset of\n   characters that actually are ideographs\
    \ or pictographs, pronunciation\n   is expected to vary widely while meaning is\
    \ preserved.  At least in\n   part because of that similarity of meaning, it made\
    \ sense in the JET\n   case to permit a registration to specify multiple languages,\
    \ to\n   verify that the characters in the label string (the requested \"Base\n\
    \   registration\") were valid for each, and then to generate variant\n   labels\
    \ using each language in turn.  For many alphabetic languages,\n   it may be more\
    \ sensible to prohibit the label string submitted for\n   registration from being\
    \ associated with more than one language.\n   Indeed, \"one label, one language\"\
    \ has been suggested as an important\n   barrier against common sources of \"\
    look-alike\" confusion.  For\n   example, the imposition of that rule in a zone\
    \ would prevent the\n   insertion of a few Greek or Cyrillic characters with shapes\
    \ identical\n   to the Latin ones into what was otherwise a Latin-based string.\
    \  For\n   a particular table, the list of base characters may be thought of as\n\
    \   the script associated with the relevant language, with the\n   understanding\
    \ that the table design does not prevent the same\n   character from appearing\
    \ in the tables for multiple languages.\n   Indeed, this notion of a script that\
    \ is local and specifically\n   identified can be turned around: so-called \"\
    language tables\" are\n   associated with languages only insofar as thinking about\
    \ the\n   character structure and word forms associated with a given language\n\
    \   helps to inform the construction of the table.  A country like\n   Finland,\
    \ for example, might select among:\n   o  One table each for Finnish, Swedish,\
    \ and English characters and\n      conventions, permitting a string to be registered\
    \ in one, two, or\n      all three languages.  However, a three-language registration\
    \ would\n      necessarily prohibit any characters that did not appear in all\n\
    \      three languages, since the label would make little sense\n      otherwise.\n\
    \   o  One table each, but with a \"one label, one language\" rule for the\n \
    \     zone.\n   o  A combined table based on the observation that all three writing\n\
    \      systems were based on Roman characters and that the possibilities\n   \
    \   for confusion of interest to the registry would not be reduced by\n      \"\
    language\" differentiation.  This option raises an interesting\n      issue about\
    \ language labeling as described in Section 1.4.1; see\n      the discussion in\
    \ Section 7 below.\n   Regardless of what decisions were made about those languages\
    \ and\n   scripts, they might have a separate table for registration of labels\n\
    \   containing Cyrillic characters.  That table might contain some\n   Roman-derived\
    \ characters (either as base characters or as variants),\n   just as some CJK\
    \ tables do.  See also Section 2, below.\n   Tables that present multiple languages,\
    \ as described above, have\n   introduced confusion and discomfort among those\
    \ who have failed to\n   understand these definitions.  The consequence of these\
    \ definitions\n   is that use of a language or script code in a registration is\
    \ a\n   mnemonic, rather than a normative statement about the language or\n  \
    \ script itself.  When that confusion is likely to occur, it is\n   appropriate\
    \ to simply use the registry identifier and a sequence\n   number to identify\
    \ the registration.\n   As the JET Guidelines stress, no tables or systems of\
    \ this type --\n   even if identified with a language as a means of defining or\n\
    \   describing the table -- can assure linguistic or even syntactic\n   correctness\
    \ of labels with regard to that language.  That assurance\n   may not be possible\
    \ without human intervention or at least dictionary\n   lookups of complete proposed\
    \ labels.  It may even not be desirable to\n   attempt that level of correctness\
    \ (see Section 2).\n   Of course, if any language-based tests or constraints,\
    \ including \"one\n   label, one language\", are to be applied to limit the associated\n\
    \   sources of confusion, each zone must have a table for each language\n   in\
    \ which it expects to accept registrations.  The notion of a single\n   combined\
    \ table for the zone is, in the general case, simply\n   unworkable.  One could\
    \ use a single table for the zone if the intent\n   were to impose only minimal\
    \ restrictions, e.g., to force alphabetic\n   and numeric characters only, excluding\
    \ symbols and punctuation.  That\n   type of restriction might be useful in eliminating\
    \ some problems,\n   such as those of unreadable labels, but it would be unlikely\
    \ to be\n   very helpful with, e.g., confusion caused by similar-looking\n   characters.\n"
- title: 1.5.2.  Variant Selection
  contents:
  - "1.5.2.  Variant Selection\n   The area of character variants is rife with difficulties\
    \ (and perhaps\n   opportunities).  There is no universal agreement about which\
    \ base\n   characters have variants, or if they do, what those variants are.\n\
    \   For example, in some regions of the world and in some languages,\n   LATIN\
    \ SMALL LETTER O WITH DIAERESIS (U+00F6) and LATIN SMALL LETTER O\n   WITH STROKE\
    \ (U+00F8) are variants of each other, while in other\n   regions, most people\
    \ would think that LATIN SMALL LETTER O WITH\n   STROKE has no variants.  In some\
    \ cases, the list of variants is\n   difficult to enumerate.  For example, it\
    \ required several years for\n   the Chinese language community to create variant\
    \ tables for use with\n   IDNA, and it remains, at the time of this writing, questionable\
    \ how\n   widely those tables will be accepted among users of Chinese from\n \
    \  areas of the world other than those represented by the groups that\n   created\
    \ them.\n   Thus, the first thing a registry should ask is whether or not any\
    \ of\n   the characters that they want to permit to be used have variants.  If\n\
    \   not, the registry's work is much simpler.  This is not to say that a\n   registry\
    \ should ignore variants if they exist: adding variants after\n   a registry has\
    \ started to take registrations will be nearly as\n   difficult administratively\
    \ as removing characters from the list of\n   acceptable characters.  That is,\
    \ if a registry later decides that two\n   characters are variants of each other,\
    \ and there are actively-used\n   names in the zones that differ only on the new\
    \ variants, the registry\n   might have to transfer ownership of one of the names\
    \ to a different\n   owner, using some process that is certain to be controversial.\n\
    \   This situation in likely to be much easier for areas and zones that\n   use\
    \ characters that previously did not occur in the DNS at all than\n   it will\
    \ be for zones in which non-English labels have been registered\n   in ASCII characters\
    \ for some time, presumably because the language of\n   interest uses additional\
    \ \"Latin\" characters with some conventions\n   when only ASCII is available.\
    \  In the former case, the rules and\n   conventions can be established before\
    \ any registrations occur.  In\n   the latter, there may be conflicts or opportunities\
    \ for confusion\n   between existing registrations and now-permitted Roman-based\n\
    \   characters that do not appear in ASCII.  For example, a domain name\n   might\
    \ exist today that uses the name of a city in Canada spelled as\n   \"Montreal\"\
    .  If the zone in which it occurs changes its rules to\n   permit the use of the\
    \ character LATIN SMALL LETTER E WITH ACUTE\n   (U+00E9), does the name of the\
    \ city, spelled (correctly) using that\n   character, conflict with the existing\
    \ domain name registration?\n   Certainly, if both are permitted, and permitted\
    \ to be registered by\n   separate parties, there are many opportunities for confusion.\n\
    \   Of course, zone managers should inform all current registrants when\n   the\
    \ registration policy for the zone changes.  This includes the\n   times when\
    \ IDN characters are first allowed in the zone, when\n   additional characters\
    \ are permitted, and when any change occurs in\n   the character variant tables.\n\
    \   Many languages contain two variants for a character, one of which is\n   strongly\
    \ preferred.  A registry might restrict the base registration\n   to the preferred\
    \ form, or it might allow any form for the base\n   registration.  If the variant\
    \ tables are created carefully, the\n   resulting bundles will be the same, but\
    \ some registries will give\n   special status to the base registration such as\
    \ its appearance in\n   \"Whois\" databases.\n"
- title: 1.6.  Variants are not a Universal Remedy
  contents:
  - "1.6.  Variants are not a Universal Remedy\n   It is worth stressing that there\
    \ are many obvious opportunities for\n   confusion that variant systems, by virtue\
    \ of being based on\n   processing of individual characters, cannot address. \
    \ For example, if\n   a language can be written with more than one script, or\n\
    \   transliterations of the language into another script are common,\n   variant\
    \ models are insufficient to prevent conflicting registration\n   of the related\
    \ forms.  Avoiding those types of problems would require\n   different mechanisms,\
    \ perhaps based on phonetic or natural language\n   processing techniques for\
    \ the entire proposed base registration.\n"
- title: 1.7.  Reservations and Exclusions
  contents:
  - '1.7.  Reservations and Exclusions

    '
- title: 1.7.1.  Sequence Exclusions for Valid Characters
  contents:
  - "1.7.1.  Sequence Exclusions for Valid Characters\n   The JET Guidelines are based\
    \ on processing only single characters.\n   Pairs or longer sequences of characters\
    \ can, at the option of the\n   registry, be handled through what the Guidelines\
    \ describe as\n   \"additional processing\".  These registry-specific string processing\n\
    \   procedures are specifically permitted by the guidelines to supplement\n  \
    \ the per-character processing that generates the variants.\n   A different zone\
    \ with different needs could use a modified version of\n   the table structure,\
    \ or different types of additional processing, to\n   prohibit particular sequences\
    \ of characters by marking them as\n   invalid, and to accept characters by marking\
    \ them as valid.  Other\n   modifications or extensions might be designed to prevent\
    \ certain\n   letters from appearing at the beginning or end of labels.  The use\
    \ of\n   regular expressions in the \"valid characters\" column might be one way\n\
    \   to implement these types of restrictions, but there has been no\n   experience\
    \ so far with that approach.\n   In particular, in some scripts derived from Roman\
    \ characters,\n   sequences that have historically been typographically represented\
    \ by\n   single \"ligature\" or \"digraph\" characters may also be represented\
    \ by\n   the separate characters (e.g., \"ae\" for U+00E6 or \"ij\" for U+0133).\n\
    \   If it is desired to either prohibit these, or to treat them as\n   variants,\
    \ some extensions to the single-character JET model may be\n   needed.  Some careful\
    \ thinking about IDNA (especially nameprep) may\n   also be needed, since some\
    \ of these combinations are excluded there).\n"
- title: 1.7.2.  Character Pairing Issues
  contents:
  - "1.7.2.  Character Pairing Issues\n   Some character pairings -- the use of a\
    \ character form (glyph) in one\n   language and a different form with the same\
    \ properties in a related\n   one -- closely approximate the issues with mapping\
    \ between\n   Traditional and Simplified Chinese, although the history is\n  \
    \ different.  For example, it might be useful to have \"o\" with a stroke\n  \
    \ (U+00F8) as a variant for \"o\" with diaeresis above it (U+00F6) (and\n   the\
    \ equivalent upper-case pair) in a Swedish table, and vice versa in\n   a Norwegian\
    \ one, or to prohibit one of these characters entirely in\n   each table.  In\
    \ a German table, U+00F8 would presumably be\n   prohibited, while U+00F6 might\
    \ have \"oe\" as a variant.  Obviously, if\n   the relevant language of registration\
    \ is unknown, this type of\n   variant matching cannot be applied in any sensible\
    \ way.\n"
- title: 1.8.  The Registration Bundle
  contents:
  - '1.8.  The Registration Bundle

    '
- title: 1.8.1.  Definitions and Structure
  contents:
  - "1.8.1.  Definitions and Structure\n   As one of its critical innovations, the\
    \ JET model defines an \"IDN\n   package\", known in this document as a \"registration\
    \ bundle\", which\n   consists of the primary registered string (which is used\
    \ as the name\n   of the bundle), the information about the language table(s)\
    \ used, the\n   variant labels for that string, and indications of which of those\n\
    \   labels are registered in the relevant zone file (\"activated\" in the\n  \
    \ JET terminology).  Registration bundles are also atomic -- one can\n   not add\
    \ or remove variant labels from one without unregistering the\n   entire package.\
    \  A label exists in only one registration bundle at a\n   time; if a new label\
    \ is registered that would generate a variant that\n   matches one that appears\
    \ in an existing package, that variant simply\n   is not included in the second\
    \ package.  A subsequent de-registration\n   of the first package does not cause\
    \ the variant to be added to the\n   second.  While it might be possible to change\
    \ this in other models,\n   the JET conclusion was that other options would be\
    \ far too complex to\n   implement and operate and would cause many new types\
    \ of name\n   conflicts.\n"
- title: 1.8.2.  Application of the Registration Bundle
  contents:
  - "1.8.2.  Application of the Registration Bundle\n   A registry has three options\
    \ for handling the case where the\n   registration bundle contains more than one\
    \ label.  The policy options\n   are:\n   o  Register and resolve all labels in\
    \ the zone, making the zone\n      information identical to that of the registered\
    \ labels.  This\n      option will allow end users to find names with variants\
    \ more\n      easily, but will result in larger zone files.  For some language\n\
    \      tables, the zone file could become so large that it could\n      negatively\
    \ affect the ability of the registry to perform name\n      resolution.  If the\
    \ base registration contains several characters\n      that have equivalents,\
    \ the owner could end up having to take care\n      of large numbers of zones.\
    \  For instance, if DIGIT ONE is a\n      variant of LATIN SMALL LETTER L, the\
    \ owner of the domain name all-\n      lollypops.example.com will have to manage\
    \ 32 zones.  If the intent\n      is to keep the contents of those zones identical,\
    \ the owner may\n      then face a significant administrative problem.  If other\
    \ concerns\n      dictate short times to live and absolute consistency of DNS\n\
    \      responses, the challenges may be nearly impossible.\n   o  Block all labels\
    \ other than the registered label so they cannot be\n      registered in the future.\
    \  This option does not increase the size\n      of the zone file and provides\
    \ maximum safety against false\n      positives, but it may cause end users to\
    \ not be able to find names\n      with variants that they would expect.  If the\
    \ base registration\n      contains characters that have equivalents, Internet\
    \ users who do\n      not know what base characters were used in the registration\
    \ will\n      not know what character to type in to get a DNS response.  For\n\
    \      instance, if DIGIT ONE is a variant of LATIN SMALL LETTER L, and\n    \
    \  LATIN SMALL LETTER L is a variant of DIGIT ONE, the user who sees\n      \"\
    pale.example.com\" will not know whether to type a \"1\" or a \"l\"\n      after\
    \ the \"pa\" in the first label.\n   o  Resolve some labels and block some other\
    \ labels.  This option is\n      likely to cause the most confusion with users\
    \ because including\n      some variants will cause a name to be found, but using\
    \ other\n      variants will cause the name to be not found.  For example, even\n\
    \      if people understood that DIGIT ONE and LATIN SMALL LETTER L were\n   \
    \   variants, a typical DNS user wouldn't know which character to type\n     \
    \ because they wouldn't know whether this pair were used to register\n      or\
    \ block the labels.  However, this option can be used to balance\n      the desires\
    \ of the name owner (that every possible attempt to\n      enter their name will\
    \ work) with the desires of the zone\n      administrator (to make the zone more\
    \ manageable and possibly to be\n      compensated for greater amounts of work\
    \ needed for a single\n      registration).  For many circumstances, it may be\
    \ the most\n      attractive option.\n   In all cases, at least the registered\
    \ label should appear in the\n   zone.  It would be almost impossible to describe\
    \ to name owners why\n   the name that they asked for is not in the zone, but\
    \ some other name\n   that they now control is.  By implication, if the requested\
    \ label is\n   already registered, the entire registration request must be rejected.\n"
- title: 2.  Some Implications of This Approach
  contents:
  - "2.  Some Implications of This Approach\n   Historically, DNS labels were considered\
    \ to be arbitrary identifier\n   strings, without any inherent meaning.  Even\
    \ in ASCII, there was no\n   requirement that labels form words.  Labels that\
    \ could not possibly\n   represent words in any Romance or Germanic language (the\
    \ languages\n   that have been written in \"Latin\" scripts since medieval times\
    \ or\n   earlier) have actually been quite common.  In general, in those\n   languages,\
    \ words contain at least one vowel and do not have embedded\n   numbers.  As a\
    \ result, a string such as \"bc345df\" cannot possibly be\n   a \"word\" in these\
    \ languages.  More generally, the more one moves\n   toward \"language\"-based\
    \ registry restrictions, the less it is going\n   to be possible to construct\
    \ labels out of fanciful strings.  While\n   fanciful strings are terrible candidates\
    \ for \"words\", they may make\n   very good identifiers.  To take a trivial example\
    \ using only ASCII\n   characters, \"rtr32w\", \"rtr32x\", and \"rtr32z\" might\
    \ be very good DNS\n   labels for a particular zone and application.  However,\
    \ given the\n   embedded digits and lack of vowels, they, like the \"bc345df\"\
    \ example\n   given above, would fail even the most superficial of tests for valid\n\
    \   English (or German or French (etc.)) word forms.\n   It is worth noting that\
    \ several DNS experts have suggested that a\n   number of problems could be solved\
    \ by prohibiting meaningful names in\n   labels, requiring instead that the labels\
    \ be random or nonsense\n   strings.  If methods similar to those discussed in\
    \ this document were\n   used to force identifiers to be closer to meaningful\
    \ words in real\n   languages, the result would be directly contradictory to those\n\
    \   \"random name\" approaches.\n   Interestingly, if one were trying to develop\
    \ an \"only words\" system,\n   a rather different -- but very restrictive --\
    \ model could be\n   developed using lookups in a dictionary for the relevant\
    \ language and\n   a listing of valid business names for the relevant area.  If\
    \ a string\n   did not appear in either, it would not be permitted to be registered.\n\
    \   Models that require a prior national business listing (or\n   registration)\
    \ that is identical to the proposed domain name label\n   have historically been\
    \ used to restrict registrations in some\n   country-code top level domains, so\
    \ this is not a new idea.  On the\n   other hand, if look-alike characters are\
    \ a concern, even that type of\n   rule (or restriction) would still not avoid\
    \ the need to consider\n   character variants.\n   Consequently, registries applying\
    \ the principles outlined in this\n   document should be careful not to apply\
    \ more severe restrictions than\n   are reasonable and appropriate while, at the\
    \ same time, being aware\n   of how difficult it usually is to add restrictions\
    \ at a later time.\n"
- title: 3.  Possible Modifications of the JET Model
  contents:
  - "3.  Possible Modifications of the JET Model\n   The JET model was designed for\
    \ CJK characters.  The discussion above\n   implies that some extensions to it\
    \ may be needed to handle the\n   characteristics of various alphabetic scripts\
    \ and the decisions that\n   might be made about them in different zones.  Those\
    \ extensions might\n   include facilities to process:\n   o  Two-character (or\
    \ more) sequences, such as ligatures and\n      typographic spelling conventions,\
    \ as variants.\n   o  Regular expressions or some other mechanism for dealing\
    \ with\n      string positions of characters (e.g., characters that must, or\n\
    \      must not, appear at the beginning or end of strings).\n   o  Delimiter\
    \ breaks to permit multiple languages to be used,\n      separately, within the\
    \ same label.  E.g., is it possible to define\n      a label as consisting of\
    \ two or more components, each in a\n      different language, with some particular\
    \ delimiter to define the\n      boundaries of the components?\n"
- title: 4.  Conclusions and Recommendations About the General Approach
  contents:
  - "4.  Conclusions and Recommendations About the General Approach\n   After examining\
    \ the implications of the potential use of the full\n   range of characters permitted\
    \ by IDNA in DNS labels, multiple groups,\n   including IESG [IESG-IDN] and ICANN\
    \ [ICANN-IDN] [ICANN-IDN2], have\n   concluded that some restrictions are needed\
    \ to prevent many forms of\n   user confusion about the actual structure of a\
    \ name or the word,\n   phrase, or term that it appears to spell out.  The best\
    \ way to\n   approach such restrictions appears to draw from the language and\n\
    \   culture of the community of registrants and users in the relevant\n   zone:\
    \ if particular characters are likely to be surprising or\n   unintelligible to\
    \ both of those groups, it is probably wise to not\n   permit them to be used\
    \ in registrations.  Registration restrictions\n   can be carried much further\
    \ than restricting permitted characters to\n   a selected Unicode subset.  The\
    \ idea of a reserved \"bundle\" of\n   related labels permits probably-confusing\
    \ combinations or sets of\n   characters to be bound together, under the control\
    \ of a single\n   registrant.  While that registrant might still use the package\
    \ in a\n   way that confused his or her own users (the approach outlined here\n\
    \   will not prevent either ill-though-out ideas or stupidity), the\n   possibility\
    \ of turning potential confusion into a hostile attack\n   would be considerably\
    \ reduced.\n   At the same time, excessive restrictions may make DNS identifiers\n\
    \   less useful for their original purpose: identifying particular hosts\n   and\
    \ similar resources on the network in an orderly way.  Registries\n   creating\
    \ rules and policies about what can be registered in\n   particular zones -- whether\
    \ those are based on the JET Guidelines or\n   the suggestions in this document\
    \ -- should balance the need for\n   restrictions against the need for flexibility\
    \ in constructing\n   identifiers.\n   The discussion above provides many options\
    \ that could be selected,\n   defined, and applied in different ways in different\
    \ registries\n   (zones).  Registrars and registrants would almost certainly prefer\n\
    \   systems in which they can predict, at least to a first order\n   approximation,\
    \ the implications of a particular potential\n   registration.  Predictability\
    \ of that sort probably requires more\n   standards, and less flexibility, than\
    \ the model itself might suggest.\n"
- title: 5.  A Model Table Format
  contents:
  - "5.  A Model Table Format\n   The format of the table is meant to be machine-readable\
    \ but not\n   human-readable.  It is fairly trivial to convert the table into\
    \ one\n   that can be read by people.\n   Each character in the table is given\
    \ in the \"U+\" notation for Unicode\n   characters.  The lines of the table are\
    \ terminated with either a\n   carriage return character (ASCII 0x0D), a linefeed\
    \ character (ASCII\n   0x0A), or a sequence of carriage return followed by linefeed\
    \ (ASCII\n   0x0D 0x0A).  The order of the lines in the table may or may not\n\
    \   matter, depending on how the table is constructed.\n   Comment lines in the\
    \ table are preceded with a \"#\" character (ASCII\n   0x2C).\n   Each non-comment\
    \ line in the table starts with the character that is\n   allowed in the registry\
    \ and expected to be used in registrations,\n   which is also called the \"base\
    \ character\".  If the base character has\n   any variants, the base character\
    \ is followed by a vertical bar\n   character (\"|\", ASCII 0x7C) and the variant\
    \ string.  If the base\n   character has more than one variant, the variants are\
    \ separated by a\n   colon (\":\", ASCII 0x3A).  Strings are given with a hyphen\
    \ (\"-\", ASCII\n   0x2D) between each character.  Comments beginning with a \"\
    #\" (ASCII\n   0x2C), and may be preceded by spaces (\" \", ASCII 0x20).\n   The\
    \ following is an example of how a table might look.  The entries\n   in this\
    \ table are purposely silly and should not be used by any\n   registry as the\
    \ basis for choosing variants.  For the example, assume\n   that the registry:\n\
    \   o  allows the FOR ALL character (U+2200) with no variants\n   o  allows the\
    \ COMPLEMENT character (U+2201) which has a single\n      variant of LATIN CAPITAL\
    \ LETTER C (U+0043)\n   o  allows the PROPORTION character (U+2237) which has\
    \ one variant\n      which is the string COLON (U+003A) COLON (U+003A)\n   o \
    \ allows the PARTIAL DIFFERENTIAL character (U+2202) which has two\n      variants:\
    \ LATIN SMALL LETTER D (U+0064) and GREEK SMALL LETTER\n      DELTA (U+03B4)\n\
    \   The table contents (after any required header information, see\n   [IANA-language-registry]\
    \ and the discussion in Section 7 below) would\n   look like:\n       # An example\
    \ of a table\n       U+2200\n       U+2201|U+0043\n       U+2237|U+003A-U+003A\
    \ # Note that the variant is a string\n       U+2202|U+0064:U+03B4 # Two variants\
    \ for the same character\n   Implementers of table processors should remember\
    \ that there are tens\n   of thousands of characters whose codepoints are greater\
    \ than 0xFFFF.\n   Thus, any program that assumes that each character in the table\
    \ is\n   represented in exactly six octets (\"U\", \"+\", and four octets\n  \
    \ representing the character value) will fail with tables that use\n   characters\
    \ whose value is greater than 0xFFFF.\n"
- title: '6.  A Model Label Registration Procedure: "CreateBundle"'
  contents:
  - "6.  A Model Label Registration Procedure: \"CreateBundle\"\n   This procedure\
    \ has three inputs:\n   1.  the proposed base registration,\n   2.  the language\
    \ (or script, if the registration is script-based, but\n       \"language\" is\
    \ used for convenience below) for the proposed base\n       registration, and\n\
    \   3.  the processing table associated with that language.\n   The output of\
    \ the process is either failure (the base registration\n   cannot be registered\
    \ at all), or a registration bundle that contains\n   one or more labels (always\
    \ including the base registration).  As\n   described earlier, the registration\
    \ bundle should be stored with its\n   date of creation so that issues with overlapping\
    \ elements between\n   bundles can later be resolved on a first-come, first-served\
    \ basis.\n   There are two steps to processing the registration:\n   1.  Check\
    \ whether the proposed base registration exists in any\n       bundle.  If it\
    \ does, stop immediately with a failure.\n   2.  Process the base registration\
    \ with the mechanism described as\n       \"CreateBundle\" in Section 6.1, below.\n\
    \   Note that the process must be executed only once.  The process must\n   not\
    \ be performed on any output of the process, only on the proposed\n   base registration.\n"
- title: 6.1.  Description of the CreateBundle Mechanism
  contents:
  - "6.1.  Description of the CreateBundle Mechanism\n   The CreateBundle mechanism\
    \ determines whether a registration bundle\n   can be created and, if so, populates\
    \ that bundle with valid labels.\n   During the processing, a \"temporary bundle\"\
    \ contains partial labels,\n   that is, labels that are being built and are not\
    \ complete labels.\n   The partial labels in the temporary bundle consist of strings.\n\
    \   The steps are:\n   1.  Split the base registration into individual characters,\
    \ called\n       \"candidate characters\".  Compare every candidate character\n\
    \       against the base characters in the table.  If any candidate\n       character\
    \ does not exist in the set of base characters, the\n       system must stop and\
    \ not register any names (that is, it must not\n       register either the base\
    \ registration or any labels that would\n       have come from character variants).\n\
    \   2.  Perform the steps in IDNA's ToASCII sequence for the base\n       registration.\
    \  If ToASCII fails for the base registration, the\n       system must stop and\
    \ not register any label (that is, it must not\n       register either the base\
    \ registration or labels that might have\n       been created from variants of\
    \ characters contained in it).  If\n       ToASCII succeeds, place the base registration\
    \ into the\n       registration bundle.\n   3.  For every candidate character\
    \ in the base registration, do the\n       following:\n       o  Create the set\
    \ of characters that consists of the candidate\n          character and any variants.\n\
    \       o  For each character in the set from the previous step,\n          duplicate\
    \ the temporary bundle that resulted from the previous\n          candidate character,\
    \ and add the new character to the end of\n          each partial label.\n   4.\
    \  The temporary bundle now contains zero or more labels that\n       consist\
    \ of Unicode characters.  For every label in the temporary\n       bundle, do\
    \ the following:\n       o  Process the label with ToASCII to see if ToASCII succeeds.\
    \  If\n          it does, add the label to the registration bundle.  Otherwise,\n\
    \          do not process this label from the temporary bundle any\n         \
    \ further; it will not go into the registration bundle.\n   The result of the\
    \ processing outlined above is the registration\n   bundle with the base registration\
    \ and possibly other labels.\n"
- title: 6.2.  The "no-variants" Case
  contents:
  - "6.2.  The \"no-variants\" Case\n   It is clear that, for many scripts, registries\
    \ will choose to create\n   tables without variants, either because variants are\
    \ clearly not\n   necessary or because they are determined to cause more confusion\
    \ and\n   overhead than is justified by the circumstances.  For those\n   situations\
    \ the table model of Section 5 becomes a trivial listing of\n   base characters\
    \ and only the first two steps of CreateBundle\n   (verifying that all candidate\
    \ character are in the base (\"valid\")\n   character list and verifying that\
    \ the resulting characters will\n   succeed in the ToASCII operation) are applicable.\
    \  Even the second of\n   those steps becomes pro forma if the advice in the next\
    \ subsection is\n   followed.\n"
- title: 6.3.  CreateBundle and Nameprep Mapping
  contents:
  - "6.3.  CreateBundle and Nameprep Mapping\n   One of the functions of Nameprep,\
    \ and IDNA more generally, is to map\n   a large number of Unicode characters\
    \ (code points) into a smaller\n   number to avoid a different but overlapping\
    \ set of confusion\n   problems.  For example, when a non-ASCII script makes distinctions\n\
    \   between \"upper case\" and \"lower case\", nameprep maps the upper case\n\
    \   characters to the lower case ones in order to simulate the DNS\n   protocol's\
    \ rule that ASCII characters are interpreted in a case-\n   insensitive way. \
    \ Unicode also contains many code points that are\n   typographic variants on\
    \ each other (e.g., forms with different widths\n   and code points that designate\
    \ font variations for mathematical\n   uses), the Unicode standard explicitly\
    \ identifies them that way, and\n   Nameprep maps these onto base characters.\n\
    \   While having these mapping functions available during lookup may be\n   quite\
    \ helpful to users who type equivalent forms, registrations are\n   probably best\
    \ performed in terms of the IDNA base characters only,\n   i.e., those characters\
    \ that nameprep will not change.  This will have\n   two advantages.\n   o  Registrants\
    \ will never find themselves in the rather confusing\n      position of having\
    \ submitted one string for registration and\n      finding a different string\
    \ in the registry database (which could\n      otherwise occur even if the relevant\
    \ language table does not\n      contain variants).\n   o  Those who are interested\
    \ in what characters are permitted by a\n      given registry will only need to\
    \ examine the relevant tables,\n      rather than simulating the IDNA algorithm\
    \ to determine the result\n      of processing particular characters.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   Under ICANN (not IETF) direction and management,\
    \ the IANA has created\n   a registry for language variant tables.  The authoritative\n\
    \   documentation for that registry is in [IANA-language-registry].\n   Since\
    \ the registry exists and is being managed under ICANN direction,\n   the material\
    \ that follows is a review of the theory of this registry,\n   rather than new\
    \ instructions for IANA.\n   As described above and suggested in the JET Guidelines,\
    \ the\n   registration rules generally require only that:\n   o  The application\
    \ be submitted or endorsed by a TLD registry, to\n      ensure that someone cares\
    \ about the particular table.\n   o  The table be identified by the following:\n\
    \      *  the name -- usually the top-level domain name -- of the\n         submitting\
    \ or endorsing registry;\n      *  one of: a language designation (consistent\
    \ with [RFC3066] or\n         with some other system approved by the IANA), a\
    \ script\n         designation, a combination of the two, or a sequence number\n\
    \         acceptable to IANA for this purpose;\n      *  a version number; and\n\
    \      *  a date.\n   o  Characters listed in the table be identified by Unicode\
    \ code\n      points, as discussed above.\n   o  The table format may correspond\
    \ to that identified in [RFC3743],\n      or in Section 5 above, or may be some\
    \ variation on those themes\n      appropriate to the local processing model (with\
    \ or without\n      variants).\n   This raises some issues that will need to be\
    \ worked out as\n   experiences accumulate.  For example, more standardization\
    \ of table\n   formats would be desirable to allow processing by the same computer\n\
    \   tools for different registries and languages.  But standardization\n   seems\
    \ premature at this time due to differences in languages,\n   processing, and\
    \ requirements and lack of experience with them.\n   Similarly, if a registry\
    \ concludes that it should use a table that\n   contains characters from several\
    \ scripts, it is not clear how such a\n   table should be designated.  Identifying\
    \ it with a language code\n   (either according to [RFC3066] or an independent\
    \ code registered with\n   IANA) is likely to just introduce more confusion, especially\
    \ given\n   other Internet uses of the language codes.  It appears that some\n\
    \   other convention will be needed for those cases, and it should be\n   developed\
    \ (if it has not already been established by the time this\n   document is published).\n"
- title: 8.  Internationalization Considerations
  contents:
  - "8.  Internationalization Considerations\n   This document specifies a model mechanism\
    \ for registering\n   Internationalized Domain Names (IDNs) that can be used to\
    \ reduce\n   confusion among similar-appearing names.  The proposal is designed\
    \ to\n   facilitate internationalization while permitting a balance between\n\
    \   internationalization concerns and concerns about keeping the Internet\n  \
    \ global and domain name system references unique in the perception of\n   the\
    \ user as well as in practice.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   Registration of labels in the DNS that contain\
    \ essentially\n   unrestricted sequences of arbitrary Unicode characters may introduce\n\
    \   opportunities for either attacks or simple confusion.  Some of these\n   risks,\
    \ such as confusion about which character (of several that look\n   alike) is\
    \ actually intended, may be associated with the presentation\n   form of DNS names.\
    \  Others may be linked to databases associated with\n   the DNS, e.g., with the\
    \ difficulty of finding an entry in a \"Whois\n   file\" when it is not clear\
    \ how to enter or to search for the\n   characters that make up a name.  This\
    \ document discusses a family of\n   restrictions on the names that can be registered.\
    \  Restrictions of\n   the type described can be imposed by a DNS zone (\"registry\"\
    ).  The\n   document also describes some possible tools for implementing such\n\
    \   restrictions.\n   While the increased number and types of characters made\
    \ available by\n   Unicode considerably increases the scale of the potential problems,\n\
    \   the problems addressed by this document are not new.  No plausible\n   set\
    \ of restrictions will eliminate all problems and sources of\n   confusion: for\
    \ example, it has often been pointed out that, even in\n   ASCII, the characters\
    \ digit-one (\"1\") and lower case L (\"l\") can\n   easily be confused in some\
    \ display fonts.  But, to the degree to\n   which security may be aided by sensible\
    \ risk reduction, these\n   techniques may be helpful.\n"
- title: 10.  Acknowledgements
  contents:
  - "10.  Acknowledgements\n   Discussions in the process of developing the JET Guidelines\
    \ were\n   vital in developing this document and all of the JET participants are\n\
    \   consequently acknowledged.  Attempts to explain some of the issues\n   uncovered\
    \ there to, and feedback from, Vint Cerf, Wendy Rickard, and\n   members of the\
    \ ICANN IDN Committee were also helpful in the thinking\n   leading up to this\
    \ document.\n   An effort by Paul Hoffman to create a generic specification for\n\
    \   registration restrictions of this type helped to inspire this\n   document,\
    \ which takes a somewhat different, more language-oriented,\n   approach than\
    \ his initial draft.  While the initial version of that\n   draft indicated that\
    \ multiple languages (or multiple language tables)\n   for a single zone were\
    \ infeasible, more recent versions [Hoffman-reg]\n   shifted to inclusion of language-based\
    \ approaches.  The current\n   version of this document incorporates considerable\
    \ text, and even\n   more ideas, from those drafts, with Paul Hoffman's generous\n\
    \   permission.\n   Feedback was provided by several registry operators (of both\
    \ country\n   code and generic TLDs), including Edmon Chung and Ram Mohan of\n\
    \   Afilias, and by ICANN and IANA staff, notably Tina Dam and Theresa\n   Swinehart.\
    \  This feedback about issues encountered in registering\n   tables and designing\
    \ IDN implementations resulted in the addition of\n   significant clarifying text\
    \ to the current version of the document.\n   The opinions expressed here are\
    \ the sole responsibility of the\n   author.  Some of those whose ideas and comments\
    \ are reflected in this\n   document may disagree with the conclusions the author\
    \ has drawn from\n   them.  The first draft version of this document was posted\
    \ in June\n   2003.\n"
- title: 11.  Informative References
  contents:
  - "11.  Informative References\n   [Daniels]     P.T. Daniels and W. Bright, The\
    \ World's Writing\n                 Systems, Oxford: Oxford University Press:\
    \ 1996.\n   [Drucker]     Drucker, J., \"The Alphabetic Labyrinth: The Letters\
    \ in\n                 History and Imagination\", 1995.\n   [Hoffman-reg] Hoffman,\
    \ P., \"A Method for Registering\n                 Internationalized Domain Names\"\
    , Work in Progress,\n                 October 2003.\n   [IESG-IDN]    Internet\
    \ Engineering Steering Group, IETF, \"IESG\n                 Statement on IDN\"\
    , IESG Statement available from\n                 http://www.ietf.org/IESG/STATEMENTS/IDNstatement.txt,\n\
    \                 February 2003.\n   [ICANN-IDN]   Internet Corporation for Assigned\
    \ Names and Numbers\n                 (ICANN), \"Guidelines for the Implementation\
    \ of\n                 Internationalized Domain Names, Version 1.0\", June\n \
    \                2003.\n   [ICANN-IDN2]  Internet Corporation for Assigned Names\
    \ and Numbers\n                 (ICANN), \"Guidelines for the Implementation of\n\
    \                 Internationalized Domain Names, Version 2.0\", September\n \
    \                2005.\n   [IANA-language-registry]\n                 Internet\
    \ Assigned Numbers Authority (IANA), \"IDN\n                 Language Table Registry\"\
    , April 2004.\n   [LTRU-Registry]\n                 Phillips, A., Ed. and M. Davis,\
    \ Ed., \"Tags for\n                 Identifying Languages\", Work in Progress,\
    \ October 2005.\n   [RFC952]      Harrenstien, K., Stahl, M., and E. Feinler,\
    \ \"DoD\n                 Internet host table specification\", RFC 952, October\n\
    \                 1985.\n   [RFC1035]     Mockapetris, P., \"Domain names - implementation\
    \ and\n                 specification\", STD 13, RFC 1035, November 1987.\n  \
    \ [RFC3066]     Alvestrand, H., \"Tags for the Identification of\n           \
    \      Languages\", BCP 47, RFC 3066, January 2001.\n   [RFC3490]     Faltstrom,\
    \ P., Hoffman, P., and A. Costello,\n                 \"Internationalizing Domain\
    \ Names in Applications\n                 (IDNA)\", RFC 3490, March 2003.\n  \
    \ [RFC3491]     Hoffman, P. and M. Blanchet, \"Nameprep: A Stringprep\n      \
    \           Profile for Internationalized Domain Names (IDN)\", RFC\n        \
    \         3491, March 2003.\n   [RFC3492]     Costello, A., \"Punycode: A Bootstring\
    \ encoding of\n                 Unicode for Internationalized Domain Names in\n\
    \                 Applications (IDNA)\", RFC 3492, March 2003.\n   [RFC3536] \
    \    Hoffman, P., \"Terminology Used in Internationalization\n               \
    \  in the IETF\", RFC 3536, May 2003.\n   [RFC3743]     Konishi, K., Huang, K.,\
    \ Qian, H., and Y. Ko, \"Joint\n                 Engineering Team (JET) Guidelines\
    \ for Internationalized\n                 Domain Names (IDN) Registration and\
    \ Administration for\n                 Chinese, Japanese, and Korean\", RFC 3743,\
    \ April 2004.\n   [Unicode]     The Unicode Consortium, \"The Unicode Standard\
    \ --\n                 Version 3.0\", January 2000.\n   [Unicode32]   The Unicode\
    \ Consortium, \"Unicode Standard Annex #28:\n                 Unicode 3.2\", March\
    \ 2002.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   John C Klensin\n   1770 Massachusetts Ave, #322\n   Cambridge,\
    \ MA  02140\n   USA\n   Phone: +1 617 491 5735\n   EMail: john-ietf@jck.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78 and at www.rfc-editor.org/copyright.html, and\n   except as set forth\
    \ therein, the authors retain all their rights.\n   This document and the information\
    \ contained herein are provided on an\n   \"AS IS\" basis and THE CONTRIBUTOR,\
    \ THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED BY (IF ANY), THE INTERNET\
    \ SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES,\
    \ EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE\
    \ OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n\
    \   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
