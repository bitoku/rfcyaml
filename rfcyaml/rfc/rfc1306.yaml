- title: __initial_text__
  contents:
  - '     Experiences Supporting By-Request Circuit-Switched T3 Networks

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This RFC provides information for the Internet community.\
    \  It does\n   not specify an Internet standard.  Distribution of this memo is\n\
    \   unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo describes the experiences of a project team at Cray\n\
    \   Research, Inc., in implementing support for circuit-switched T3\n   services.\
    \  While the issues discussed may not be directly relevant to\n   the research\
    \ problems of the Internet, they may be interesting to a\n   number of researchers\
    \ and implementers.\n   Developers at Cray Research, Inc. were presented with\
    \ an opportunity\n   to use a circuit-switched T3 network for wide area networking.\
    \  They\n   devised an architectural model for using this new resource.  This\n\
    \   involves activating the circuit-switched connection when an\n   application\
    \ program engages in a bulk data transfer, and releasing\n   the connection when\
    \ the transfer is complete.\n   Three software implementations for this feature\
    \ have been tested, and\n   the results documented here.  A variety of issues\
    \ are involved, and\n   further research is necessary.  Network users are beginning\
    \ to\n   recognize the value of this service, and are planning to make use of\n\
    \   by-request circuit-switched networks.  A standard method of access\n   will\
    \ be needed to ensure interoperability among vendors of circuit-\n   switched\
    \ network support products.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors thank the T3 project team and other members\
    \ of the\n   Networking Group at Cray Research, Inc., for their efforts: Wayne\n\
    \   Roiger, Gary Klesk, Joe Golio, John Renwick, Dave Borman and Craig\n   Alesso.\n"
- title: Overview
  contents:
  - "Overview\n   Users of wide-area networks often must make a compromise between\
    \ low\n   cost and high speed when accessing long haul connections.  The high\n\
    \   money cost of dedicated high speed connections makes them\n   uneconomical\
    \ for scientists and engineers with limited budgets.  For\n   many traditional\
    \ applications this has not been a problem.  Datasets\n   can be maintained on\
    \ the remote computer and results were presented\n   in a text-only form where\
    \ a low-speed connection would suffice.\n   However, for visualization and other\
    \ data transfer intensive\n   applications, this limitation can severely impact\
    \ the usability of\n   high performance computing tools which are available only\
    \ through\n   long-haul network connections.\n   Supercomputers are one such high\
    \ performance tool.  Many users who\n   can benefit from access to supercomputers\
    \ are limited by slow network\n   connections to a centrally located supercomputer.\
    \  A solution to this\n   problem is to use a circuit-switched network to provide\
    \ high speed\n   network connectivity at a reduced cost by allocating the network\
    \ only\n   when it is needed.\n   Consider how a researcher using a visualization\
    \ application might\n   efficiently use a dedicated low speed link and a circuit\
    \ switched\n   high speed link.  The researcher logs in to the remote supercomputer\n\
    \   over the low speed link.  After running whatever programs are\n   necessary\
    \ to prepare the visualization, the high speed connection is\n   activated and\
    \ used to transfer the graphics data to the researcher's\n   workstation.\n  \
    \ We built and demonstrated this capability in September, 1990, at the\n   Telecommunications\
    \ Association show in San Diego, using this type of\n   visualization application.\
    \  Further, it will be available in a\n   forthcoming release of our system software.\n"
- title: Architectural Model
  contents:
  - "Architectural Model\n   We developed our support for circuit switched services\
    \ around a\n   simple model of a switched network.  At some point in the path\n\
    \   between two hosts, there is a switched network connection.  This\n   connection\
    \ is likely to connect two enterprise networks operated by\n   the same organization.\
    \  Administrative overlap between the two\n   networks is useful for accounting\
    \ and configuration purposes.  We\n   believe that with further investigation\
    \ circuit switched network\n   support could be extended to multiple switched\
    \ links in an internet\n   environment.\n   The switch which makes the network\
    \ connection operates on a \"by-\n   request\" basis (also called \"on-demand\"\
    ).  When it receives a request\n   to make a network connection it will do so\
    \ (if possible), and breaks\n   the connection when requested.  The switch will\
    \ not activate\n   automatically if there is an attempt to transfer data over\
    \ an\n   incomplete connection.\n   We also made the assumption that the circuit\
    \ would be switched on a\n   connection basis rather than a packet basis.  When\
    \ an application\n   begins sending data utilizing the switched connection, it\
    \ will send\n   all the data it has, without stopping, until it is finished. \
    \ At this\n   time it will release the connection.  It is assumed that the quantity\n\
    \   of data will be large enough that the circuit setup time is\n   negligible\
    \ relative to the period of the transfer.  Otherwise, it is\n   not worth the\
    \ effort to support the circuit switched network for\n   small data transfers.\n\
    \   This model requires that just before the application begins a large\n   bulk\
    \ transfer of data, a request message is sent to the switch asking\n   that the\
    \ switched network connection be activated.  Once the link is\n   up, the application\
    \ begins sending data, and the network routes all\n   the data from the application\
    \ through the switched network.  As soon\n   as all the data has been sent, a\
    \ message is sent to the switch to\n   turn off the switched link, and the network\
    \ returns to routing data\n   through the slower link.\n   The prototype system\
    \ we built for the TCA show was designed around\n   this model of circuit switched\
    \ services.  We connected a FDDI\n   backbone at Cray Research in Eagan, Minnesota\
    \ to the TCA show's FDDI\n   network through 2 NSC 703 FDDI/T1/T3 routers.  MCI\
    \ provided a\n   dedicated T1 line and a switched T3 line, using a DSC DS3 T3\
    \ switch\n   located in Dallas, Texas.  These networks provided connectivity\n\
    \   between a Cray Research computer in Eagan to a Sun workstation on the\n  \
    \ show floor in San Diego.\n"
- title: Alternative Solution Strategies
  contents:
  - "Alternative Solution Strategies\n   The first aspect of using the switched services\
    \ involved the circuit\n   switch.  The DS3 switch available to us was accessed\
    \ via a dial up\n   modem, and it communicated using a subset of the CCITT Q.295\n\
    \   protocol.  Activating the switch required a 4 message exchange and\n   deactivation\
    \ required a 3 message exchange.  We felt the protocol was\n   awkward and might\
    \ be different for other switch hardware.\n   Furthermore, we believed that the\
    \ dial up aspect of communicating\n   with the switch suffered from the same drawbacks.\
    \  A good solution\n   would require a cleaner method of controlling the switch\
    \ from the\n   source host requesting the switched line.\n   The next aspect of\
    \ using switched services involves the source host\n   software which requests\
    \ and releases the switched network.  Ideally,\n   the switched network is activated\
    \ just before data transfer takes\n   place and it is released as soon as all\
    \ data has been sent.  We\n   considered using special utility programs which\
    \ a user could execute\n   to control the link, special system libraries which\
    \ application\n   programs could call, or building the capability into the kernel.\
    \  We\n   also considered the possibility that these methods could send\n   messages\
    \ to a daemon running on the source host which would then\n   communicate with\
    \ another entity actually controlling the switch.\n   The last aspect of using\
    \ switched services we considered is selection\n   of the switch controlled network.\
    \  This involves both policy issues\n   and routing issues.  Policy issues include\
    \ which users running which\n   applications will be able to use higher cost switched\
    \ links.  And\n   packets must be routed amongst multiple connections offering\
    \ varying\n   levels of service after they leave their source.\n"
- title: Implementations
  contents:
  - "Implementations\n   We have developed a model for switch control through the\
    \ internetwork\n   which we believe to be reasonable.  However, we have experimented\n\
    \   with three different source host implementations.  These different\n   implementations\
    \ are detailed here.\n"
- title: Switch control
  contents:
  - "Switch control\n   Our simplest design decisions involved the switch itself.\
    \  We decided\n   that the complex protocol and dial up line must be hidden from\
    \ the\n   source host requesting the switched link.  We decided that the source\n\
    \   host would use a simple request/release protocol with messages sent\n   through\
    \ the regular network (as opposed to dial up lines or other\n   connections).\
    \  Some host accessible through the local network would\n   run a program translating\
    \ the simple request and release messages\n   into the more complicated switch\
    \ protocol and also have the modem to\n   handle the dial up connection.\n   This\
    \ has a variety of advantages.  First, it isolates differences in\n   switch hardware.\
    \  Second, multiple hosts may access the switch\n   without requiring multiple\
    \ modems for the dial up line.  And it\n   provides a central point of control\
    \ for switch access.  We did not\n   consider any alternatives to this model of\
    \ switch control.\n   Our initial implementation used a simple translator daemon\
    \ running on\n   a Sun workstation.  Listening on a raw IP port, this program\
    \ would\n   wait for switch control messages.  Upon receipt of such a message,\
    \ it\n   would dial up the switch and attempt to handle the request.  It would\n\
    \   then send back a success or failure response.  This host, in\n   conjunction\
    \ with the translator daemon software, is referred to as\n   the switch controller.\
    \  The switch controller we used was local to\n   our enterprise network; however,\
    \ it could reside anywhere in the\n   Internet.\n   Later we designed a simple\
    \ protocol for switch control, which was\n   implemented in the translator daemon.\
    \  This protocol is documented in\n   RFC 1307, \"Dynamically Switched Link Control\
    \ Protocol\".\n"
- title: Source Control of the Switched Link
  contents:
  - "Source Control of the Switched Link\n   This problem involves a decision regarding\
    \ what entity on the source\n   host will issue the switch request and release\
    \ messages to the switch\n   controller, and when those messages will be issued.\
    \  Because we do\n   not have very much field experience with this service, we\
    \ do not feel\n   that it is appropriate to recommend one method over the others.\
    \  They\n   all have advantages and disadvantages.\n   What we did do is make\
    \ 3 different implementations of the request\n   software and can report our experiences\
    \ with each.  These are one set\n   of special utility programs which communicate\
    \ with the switch\n   controller, and 2 kernel implementations.  We did not experiment\
    \ with\n   special libraries, nor did we implement a daemon for switch control\n\
    \   messages on the source host.\n"
- title: Switch control user programs
  contents:
  - "Switch control user programs\n   This implementation of source host control of\
    \ the switch is the\n   simplest.  Two programs were written which would communicate\
    \ requests\n   to the switch controller; one for activating the connection, and\n\
    \   another to deactivate the connection.  The applications using this\n   feature\
    \ were then put into shell scripts with the switch control\n   programs for simple\
    \ execution.\n   This approach has the significant advantage of not requiring\
    \ any\n   kernel modifications to any machine.  Furthermore, application\n   programs\
    \ do not need to be modified to access this feature.  And\n   access to the circuit-switched\
    \ links can be controlled using the\n   access permissions for the switch-control\
    \ programs.\n   However, there are disadvantages as well.  First, there is\n \
    \  significant potential for the switch to be active (and billing the\n   user)\
    \ for the dead time while the application program is doing tasks\n   other than\
    \ transferring bulk data.  The granularity of turning the\n   switch on and off\
    \ is limited to a per-application basis.\n   Another disadvantage is that most\
    \ applications use only the\n   destination host's address for transfer, and this\
    \ is the only\n   information available to the transport and network layers for\
    \ routing\n   data packets.  Some other method must be used to distinguish between\n\
    \   traffic which should use the circuit-switched connection and lower-\n   priority\
    \ traffic.  This problem can be addressed using route aliases,\n   described below.\n"
- title: Kernel switch control
  contents:
  - "Kernel switch control\n   We have made two different implementations of switch\
    \ control\n   facilities within the operating system kernel.  Both rely upon the\n\
    \   routing lookup code in the kernel to send switch connect and tear\n   down\
    \ messages.  The difference is in how the time delay between\n   request of the\
    \ switch and a response is handled.\n   For starters, routing table entries were\
    \ expanded to include the\n   internet address of the switch controller and state\
    \ information for\n   the switched connection.  If there is a switch controller\
    \ address\n   specified, then the connection must be set up before packets may\
    \ be\n   sent on this route.  We also added a separate module to handle the\n\
    \   sending and receiving of the switch control messages.\n   When a routing lookup\
    \ is satisfied, the routing code would check\n   whether the routing table entry\
    \ specified a switch controller.  If\n   so, then the routine requesting switch\
    \ setup would be called.  This\n   would send a message on the Internet to the\
    \ switch controller to\n   setup the connection.\n   In our first implementation,\
    \ the routing lookup call would return\n   immediately after sending the switch\
    \ connection request message.  It\n   would be the responsibility of the transport\
    \ protocol to deal with\n   the time delay while the connection is setup, and\
    \ to tear down if the\n   switched connection could not be made.  This has significant\n\
    \   ramifications.  In the case of UDP and IP, packets must be buffered\n   for\
    \ later transmission or face almost certain extermination as they\n   will probably\
    \ start arriving at the switched connection before it is\n   ready to carry traffic.\
    \  Because of this problem, we decided that\n   this feature would not be available\
    \ for UDP or IP traffic.\n   We did make this work for TCP.  Since TCP is already\
    \ designed to work\n   so that it buffers all data for possible later retransmission,\
    \ this\n   was not a problem.  Our first cut was to change TCP to check that the\n\
    \   route it was using was up if it is a switch controlled route.  TCP\n   would\
    \ not send any data until the route was complete, and it would\n   close the connection\
    \ if the switch did not come up.\n   This did not work well at first because every\
    \ time TCP tried to send\n   data before the switch came up, the retransmit time\
    \ would be reset\n   and backed off.  The rtt estimate, retransmit timeouts and\
    \ the\n   congestion control mechanism were seriously skewed before any data\n\
    \   was ever sent.  The retransmit timer would expire as many as 3 times\n   before\
    \ data could be transmitted.  We solved this problem by adding\n   another timer\
    \ for handling the delay while the route came up, and not\n   allowing the delay\
    \ to affect any of the normal rtt timers.\n   Our experiences with this approach\
    \ were not particularly positive,\n   and we decided to try another.  We also\
    \ felt that unreliable datagram\n   protocols should be able to use the service\
    \ without excessive\n   reworking.  Our alternative still sends the switch control\
    \ message\n   when a routing lookup finds a controlled route.  However, we now\n\
    \   suspend execution of the thread of control until a response comes\n   back\
    \ from the switch controller.\n   This proved to be easier to implement in many\
    \ ways.  However, there\n   were two major areas requiring changes outside the\
    \ routing code.\n   First, we decided that if the switch refused to activate the\n\
    \   connection, it was pointless to try again.  So we changed the routing\n  \
    \ lookup interface so that it could return an error specifying a\n   permanent\
    \ error condition.  The transport layer could then return an\n   appropriate error\
    \ such as a host unreachable condition.\n   The other, more complex issue deals\
    \ with the suspension of the thread\n   of execution.  Our operating system, UNICOS,\
    \ is an ATT System V\n   derivative, and our networking subsystem is based on\
    \ the BSD tahoe\n   and reno releases.  The only way to suspend execution is to\
    \ sleep.\n   This is fine, as long as there is a user context to put to sleep.\n\
    \   However, it is not a good idea to go to sleep when processing network\n  \
    \ interrupts, as when forwarding a packet.\n   We solved this problem by using\
    \ a global flag regarding whether it\n   was ok for the switch control message\
    \ code to sleep.  If it is\n   necessary to send a message and sleep, then the\
    \ flag must be set and\n   an error is returned if sleeping is not allowed.  User\
    \ system calls\n   which might cause a switch control message to be sent set and\
    \ clear\n   the flag upon entrance and exit.  We also made it impossible to\n\
    \   forward packets on a switch controlled route.  We feel that this is\n   reasonable\
    \ since the overhead of switch control should be incurred\n   only when an application\
    \ program has made an explicit request to\n   begin transfer of data.\n   The\
    \ one other change we made was to make sure that TCP freed the\n   route it is\
    \ using upon entering TIME_WAIT state.  There is no point\n   in holding the circuit\
    \ open for two minutes in case we need to\n   retransmit the final ack.  Of course,\
    \ this assumes that an alternate\n   path exists for the the peer to retransmit\
    \ its fin.\n   The advantage of building this facility into the kernel is that\
    \ it\n   allows a fine degree of control over when the switch will and will\n\
    \   not need to be activated.  Many applications which open a data\n   connection,\
    \ transmit their bulk data, and then close the connection\n   will not require\
    \ modifications and will make efficient use of the\n   resource.  It also opens\
    \ the possibility that applications written to\n   use type-of-service can use\
    \ the same network connection for low-\n   bandwidth interactive traffic, change\
    \ the type-of-service (thus\n   activating the switched connection) for bulk transfers,\
    \ and then\n   release the switch upon returning to interactive traffic.\n   Putting\
    \ this feature into the kernel also allows strong control over\n   when and how\
    \ the switched link can be used, keeping accounting\n   information, and limiting\
    \ multiple use access to the switched link.\n   The disadvantage is that significant\
    \ kernel modifications are\n   required, and some implementation details can be\
    \ very difficult to\n   handle.\n"
- title: Switch control libraries
  contents:
  - "Switch control libraries\n   The switch control programs we used were built on\
    \ a library of simple\n   switch control routines; however, we did not alter any\
    \ standard\n   applications to use this library.  We did consider some advantages\n\
    \   and disadvantages.  On the plus side, it is possible to achieve a\n   satisfactory\
    \ degree of switch control without requiring any kernel\n   modifications.\n \
    \  The primary disadvantage of this approach is that all applications\n   must\
    \ be altered and recompiled.  This is particularly inconvenient\n   when source\
    \ is not available.\n"
- title: Link Selection
  contents:
  - "Link Selection\n   When an application wishes to send data over a circuit-switched\n\
    \   connection, it will be necessary to select the switched link over\n   other\
    \ links.  This selection process may need to take place many\n   times, depending\
    \ on the local network between the source host and the\n   bridge to the circuit\
    \ switched connection.\n   For example, if the kernel routing code is controlling\
    \ the link, then\n   there must be a way to choose a controlled route over another\
    \ route.\n   Further downstream, there must be a way to route packets to the\n\
    \   switched link rather than other links.\n   This issue has the potential for\
    \ great complexity, and we avoided as\n   much of the complexity as possible.\
    \  Policy routing and local routing\n   across multiple connections are fertile\
    \ areas for work and it is\n   outside the scope of this work to address those\
    \ issues.  Instead we\n   opted for simple answers to difficult questions.\n \
    \  First of all, we added no special policies to link accessibility\n   beyond\
    \ that already found in UNICOS.  And we handled local routing\n   issues to the\
    \ NSC FDDI/T1/T3 routers with routing table manipulation\n   and IP Type-of-Service.\n\
    \   We came up with three solutions for selecting a routing table entry.\n   The\
    \ first possibility is to use the type-of-service bits, which\n   seemed natural\
    \ to us.  We changed the routing table to include type-\n   of-service values\
    \ associated with routing entries, and the routing\n   lookups would select using\
    \ the type-of-service.  UNICOS already\n   supports a facility to mark connections\
    \ with a type-of-service value.\n   A controlled route could be marked with high\
    \ throughput type-of-\n   service and an application wishing to transfer bulk\
    \ data could set\n   the socket for high throughput before making the connection.\
    \  It\n   could also be possible to change the type-of-service on an existing\n\
    \   connection and start using the switched link if one is available.\n   Using\
    \ the type-of-service bits have the advantage that downstream\n   routers can\
    \ also use this information.  In our demonstration system,\n   the NSC FDDI/T1/T3\
    \ routers were configured to transfer packets with\n   high throughput type-of-service\
    \ over the T3 connection and all others\n   over the T1 connection.\n   Another\
    \ possibility is to take advantage of the multiple addresses of\n   a multi-homed\
    \ host.  Routing tables could be set up so that packets\n   for one of the addresses\
    \ get special treatment by traveling over the\n   switched link.  The routing\
    \ table in the source host would have an\n   entry for accessing the switch controller\
    \ when sending to the high\n   throughput destination address.\n   We also derived\
    \ a method we call route aliasing.  Route aliasing\n   involves associating extra\
    \ addresses to a single host.  However,\n   rather than the destination being\
    \ an actual multi-homed host, the\n   alias is known only to the source host and\
    \ is used as an alternative\n   lookup key.  When an application tries to connect\
    \ to the alias\n   address the routing lookup returns an aliased route.  The route\
    \ alias\n   contains the actual address of the host, but because of looking up\n\
    \   the special address, the switch is activated.  The alias could also\n   specify\
    \ a type-of-service value to send in the packets so that\n   downstream routers\
    \ could properly route the packets to the switched\n   link.  We realize that\
    \ some may bemoan the waste of the limited\n   Internet address space for aliases;\
    \ however, only the source host is\n   aware of the alias, and the primary shortage\
    \ is with Internet network\n   addresses rather than host addresses.  In fact,\
    \ we argue that this is\n   a more efficient use of the already sparse allocation\
    \ of host\n   addresses available with each network address.\n"
- title: Future considerations
  contents:
  - "Future considerations\n   We believe that by-request services will become increasingly\n\
    \   important to certain classes of users.  Many data centers make high\n   performance\
    \ resources available over a wide area, and these will be\n   the first users\
    \ to take advantage of wide-area circuit-switched\n   networks.  Some users, such\
    \ as CICNet ([2]), are already interested\n   in deploying this capability and\
    \ telecom vendors are working to\n   satisfy this need.  However, there are a\
    \ lot of issues involved in\n   providing this functionality.  We are working\
    \ to involve others in\n   this process.\n"
- title: References
  contents:
  - "References\n   [1]  Nicholson, et. al., \"High Speed Networking at Cray Research\"\
    ,\n        Computer Communications Review, January 1991.\n   [2]  CICNet DS3 Working\
    \ Group, \"High Performance Applications on\n        CICNet: Impact on Design\
    \ and Capacity\", public report, CICNet,\n        Inc., June 1991.\n   [3]  Young,\
    \ J., and A. Nicholson, \"Dynamically Switched Link Control\n        Protocol\"\
    , RFC 1307, Cray Research, Inc., March 1992.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Andy Nicholson\n   Cray Research, Inc.\n   655F Lone Oak\
    \ Drive\n   Eagan, MN 55123\n   Phone: (612) 452-6650\n   EMail: droid@cray.com\n\
    \   Jeff Young\n   Cray Research, Inc.\n   655F Lone Oak Drive\n   Eagan, MN 55123\n\
    \   Phone: (612) 452-6650\n   EMail: jsy@cray.com\n"
