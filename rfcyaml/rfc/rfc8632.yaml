- contents:
  - '                 A YANG Data Model for Alarm Management

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document defines a YANG module for alarm management.  It\n
    \  includes functions for alarm-list management, alarm shelving, and\n   notifications
    to inform management systems.  There are also\n   operations to manage the operator
    state of an alarm and\n   administrative alarm procedures.  The module carefully
    maps to\n   relevant alarm standards.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8632.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2019 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   3\n     1.1.  Terminology and Notation  . . . . . . . . . . . . .
    . . .   3\n   2.  Objectives  . . . . . . . . . . . . . . . . . . . . . . . .
    .   5\n   3.  Alarm Data Model Concepts . . . . . . . . . . . . . . . . . .   5\n
    \    3.1.  Alarm Definition  . . . . . . . . . . . . . . . . . . . .   5\n     3.2.
    \ Alarm Type  . . . . . . . . . . . . . . . . . . . . . . .   6\n     3.3.  Identifying
    the Alarming Resource . . . . . . . . . . . .   8\n     3.4.  Identifying Alarm
    Instances . . . . . . . . . . . . . . .   9\n     3.5.  Alarm Lifecycle . . .
    . . . . . . . . . . . . . . . . . .   9\n       3.5.1.  Resource Alarm Lifecycle
    \ . . . . . . . . . . . . . .  10\n       3.5.2.  Operator Alarm Lifecycle  .
    . . . . . . . . . . . . .  11\n       3.5.3.  Administrative Alarm Lifecycle  .
    . . . . . . . . . .  11\n     3.6.  Root Cause, Impacted Resources, and Related
    Alarms  . . .  11\n     3.7.  Alarm Shelving  . . . . . . . . . . . . . . . .
    . . . . .  13\n     3.8.  Alarm Profiles  . . . . . . . . . . . . . . . . . .
    . . .  13\n   4.  Alarm Data Model  . . . . . . . . . . . . . . . . . . . . .
    .  13\n     4.1.  Alarm Control . . . . . . . . . . . . . . . . . . . . . .  15\n
    \      4.1.1.  Alarm Shelving  . . . . . . . . . . . . . . . . . . .  15\n     4.2.
    \ Alarm Inventory . . . . . . . . . . . . . . . . . . . . .  16\n     4.3.  Alarm
    Summary . . . . . . . . . . . . . . . . . . . . . .  16\n     4.4.  The Alarm
    List  . . . . . . . . . . . . . . . . . . . . .  17\n     4.5.  The Shelved-Alarm
    List  . . . . . . . . . . . . . . . . .  19\n     4.6.  Alarm Profiles  . . .
    . . . . . . . . . . . . . . . . . .  19\n     4.7.  Operations  . . . . . . .
    . . . . . . . . . . . . . . . .  20\n     4.8.  Notifications . . . . . . . .
    . . . . . . . . . . . . . .  20\n   5.  Relationship to the ietf-hardware YANG
    Module . . . . . . . .  20\n   6.  Alarm YANG Module . . . . . . . . . . . . .
    . . . . . . . . .  21\n   7.  The X.733 Mapping Module  . . . . . . . . . . .
    . . . . . . .  53\n   8.  IANA Considerations . . . . . . . . . . . . . . . .
    . . . . .  65\n   9.  Security Considerations . . . . . . . . . . . . . . . .
    . . .  65\n   10. References  . . . . . . . . . . . . . . . . . . . . . . . .
    .  67\n     10.1.  Normative References . . . . . . . . . . . . . . . . . .  67\n
    \    10.2.  Informative References . . . . . . . . . . . . . . . . .  68\n   Appendix
    A.  Vendor-Specific Alarm Types Example  . . . . . . . .  70\n   Appendix B.  Alarm
    Inventory Example  . . . . . . . . . . . . . .  71\n   Appendix C.  Alarm List
    Example . . . . . . . . . . . . . . . . .  71\n   Appendix D.  Alarm Shelving
    Example . . . . . . . . . . . . . . .  73\n   Appendix E.  X.733 Mapping Example
    \ . . . . . . . . . . . . . . .  74\n   Appendix F.  Relationship to Other Alarm
    Standards  . . . . . . .  74\n     F.1.  Definition of \"Alarm\" . . . . . . .
    . . . . . . . . . . .  74\n     F.2.  Data Model  . . . . . . . . . . . . . .
    . . . . . . . . .  76\n       F.2.1.  X.733 . . . . . . . . . . . . . . . . .
    . . . . . . .  76\n       F.2.2.  The Alarm MIB (RFC 3877)  . . . . . . . . .
    . . . . .  77\n       F.2.3.  3GPP Alarm IRP  . . . . . . . . . . . . . . . .
    . . .  77\n       F.2.4.  G.7710  . . . . . . . . . . . . . . . . . . . . . .
    .  78\n   Appendix G.  Alarm-Usability Requirements . . . . . . . . . . . .  78\n
    \  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . . .  82\n   Authors'
    Addresses  . . . . . . . . . . . . . . . . . . . . . . .  82\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document defines a YANG module [RFC7950] for alarm
    management.\n   The purpose is to define a standardized alarm interface for network\n
    \  devices that can be easily integrated into management applications.\n   The
    model is also applicable as a northbound alarm interface in the\n   management
    applications.\n   Alarm monitoring is a fundamental part of monitoring the network.\n
    \  Raw alarms from devices do not always tell the status of the network\n   services
    or necessarily point to the root cause.  However, being able\n   to feed alarms
    to the alarm-management application in a standardized\n   format is a starting
    point for performing higher-level network\n   assurance tasks.\n   The design
    of the module is based on experience from using and\n   implementing available
    alarm standards from ITU [X.733], 3GPP\n   [ALARMIRP], and ANSI [ISA182].\n"
  - contents:
    - "1.1.  Terminology and Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT
      RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted
      as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear
      in all\n   capitals, as shown here.\n   The following terms are defined in [RFC7950]:\n
      \  o  action\n   o  client\n   o  data tree\n   o  server\n   The following
      terms are used within this document:\n   Alarm (the general concept):  An alarm
      signifies an undesirable state\n      in a resource that requires corrective
      action.\n   Fault:  A fault is the underlying cause of an undesired behavior.\n
      \     There is no trivial one-to-one mapping between faults and alarms.\n      One
      fault may result in several alarms in case the system lacks\n      root-cause
      and correlation capabilities.  An alarm might not have\n      an underlying
      fault as a cause.  For example, imagine a bad Mean\n      Opinion Score (MOS)
      alarm from a Voice over IP (VOIP) probe and\n      the cause being non-optimal
      QoS configuration.\n   Alarm Type:  An alarm type identifies a possible unique
      alarm state\n      for a resource.  Alarm types are names to identify the state
      like\n      \"link-alarm\", \"jitter-violation\", and \"high-disk-utilization\".\n
      \  Resource:  A fine-grained identification of the alarming resource,\n      for
      example, an interface and a process.\n   Alarm Instance:  The alarm state for
      a specific resource and alarm\n      type, for example, (\"GigabitEthernet0/15\",
      \"link-alarm\").  An\n      entry in the alarm list.\n   Cleared Alarm:  A cleared
      alarm is an alarm where the system\n      considers the undesired state to be
      cleared.  Operators cannot\n      clear alarms; clearance is managed by the
      system.  For example, a\n      \"linkUp\" notification can be considered a clear
      condition for a\n      \"linkDown\" state.\n   Closed Alarm:  Operators can
      close alarms irrespective of the alarm\n      being cleared or not.  A closed
      alarm indicates that the alarm\n      does not need attention because either
      the corrective action has\n      been taken or it can be ignored for other reasons.\n
      \  Alarm Inventory:  A list of all possible alarm types on a system.\n   Alarm
      Shelving:  Blocking alarms according to specific criteria.\n   Corrective Action:
      \ An action taken by an operator or automation\n      routine in order to minimize
      the impact of the alarm or resolve\n      the root cause.\n   Management System:
      \ The alarm-management application that consumes\n      the alarms, i.e., acts
      as a client.\n   System:  The system that implements this YANG module, i.e.,
      acts as a\n      server.  This corresponds to a network device or a management\n
      \     application that provides a northbound alarm interface.\n   Tree diagrams
      used in this document follow the notation defined in\n   [RFC8340].\n"
    title: 1.1.  Terminology and Notation
  title: 1.  Introduction
- contents:
  - "2.  Objectives\n   The objectives for the design of the alarm data model are:\n
    \  o  Users find it simple to use.  If a system supports this module, it\n      shall
    be straightforward to integrate it into a YANG-based alarm\n      manager.\n   o
    \ Alarms are viewed as states on resources and not as discrete\n      notifications.\n
    \  o  A precise definition of \"alarm\" is provided in order to exclude\n      general
    events that should not be forwarded as alarm\n      notifications.\n   o  Precise
    identification of alarm types and alarm instances is\n      provided.\n   o  A
    management system should be able to pull all available alarm\n      types from
    a system, i.e., read the alarm inventory from a system.\n      This makes it possible
    to prepare alarm operators with\n      corresponding alarm instructions.\n   o
    \ Alarm-usability requirements are addressed; see Appendix G.  While\n      IETF
    and telecom standards have addressed alarms mostly from a\n      protocol perspective,
    the process industry has published several\n      relevant standards addressing
    requirements for a useful alarm\n      interface; see [EEMUA] and [ISA182].  This
    document defines\n      usability requirements as well as a YANG data model.\n
    \  o  Mapping to [X.733], which is a requirement for some alarm systems,\n      is
    achievable.  Still, keep some of the X.733 concepts out of the\n      core model
    in order to make the model small and easy to\n      understand.\n"
  title: 2.  Objectives
- contents:
  - "3.  Alarm Data Model Concepts\n   This section defines the fundamental concepts
    behind the data model.\n   This section is rooted in the works of Vallin et. al
    [ALARMSEM].\n"
  - contents:
    - "3.1.  Alarm Definition\n   An alarm signifies an undesirable state in a resource
      that requires\n   corrective action.\n   There are two main things to remember
      from this definition:\n   1.  It focuses on leaving out events and logging information
      in\n       general.  Alarms should only be used for undesired states that\n
      \      require action.\n   2.  It also focuses on alarms as a state on a resource,
      not the\n       notifications that report the state changes.\n   See Appendix
      F for information on how this definition relates to\n   other alarm standards.\n"
    title: 3.1.  Alarm Definition
  - contents:
    - "3.2.  Alarm Type\n   This document defines an alarm type with an alarm-type
      id and an\n   alarm-type qualifier.\n   The alarm-type id is modeled as a YANG
      identity.  With YANG\n   identities, new alarm types can be defined in a distributed
      fashion.\n   YANG identities are hierarchical, which means that a hierarchy
      of\n   alarm types can be defined.\n   Standards and vendors should define their
      own alarm-type identities\n   based on this definition.\n   The use of YANG
      identities means that all possible alarms are\n   identified at design time.
      \ This explicit declaration of alarm types\n   makes it easier to allow for
      alarm qualification reviews and\n   preparation of alarm actions and documentation.\n
      \  There are occasions where the alarm types are not known at design\n   time.
      \ An example is a system with digital inputs that allows users\n   to connect
      detectors, such as smoke detectors, to the inputs.  In\n   this case, it is
      a configuration action that says certain connectors\n   are fire alarms, for
      example.\n   In order to allow for dynamic addition of alarm types, the alarm
      data\n   model permits further qualification of the identity-based alarm type\n
      \  using a string.  A potential drawback of this is that there is a\n   significant
      risk that alarm operators will receive alarm types as a\n   surprise.  They
      do not know how to resolve the problem since a\n   defined alarm procedure does
      not necessarily exist.  To avoid this\n   risk, the system MUST publish all
      possible alarm types in the alarm\n   inventory; see Section 4.2.\n   A vendor
      or standards organization can define their own alarm-type\n   hierarchy.  The
      example below shows a hierarchy based on X.733 event\n   types:\n     import
      ietf-alarms {\n       prefix al;\n     }\n     identity vendor-alarms {\n       base
      al:alarm-type;\n     }\n     identity communications-alarm {\n       base vendor-alarms;\n
      \    }\n     identity link-alarm {\n       base communications-alarm;\n     }\n
      \  Alarm types can be abstract.  An abstract alarm type is used as a\n   base
      for defining hierarchical alarm types.  Concrete alarm types are\n   used for
      alarm states and appear in the alarm inventory.  There are\n   two kinds of
      concrete alarm types:\n   1.  The last subordinate identity in the \"alarm-type-id\"
      hierarchy is\n       concrete, for example, \"alarm-identity.environmental-\n
      \      alarm.smoke\".  In this example, \"alarm-identity\" and\n       \"environmental-alarm\"
      are abstract YANG identities, whereas\n       \"smoke\" is a concrete YANG identity.\n
      \  2.  The YANG identity hierarchy is abstract, and the concrete alarm\n       type
      is defined by the dynamic alarm-qualifier string, for\n       example, \"alarm-identity.environmental-alarm.external-detector\"\n
      \      with alarm-type-qualifier \"smoke\".\n   For example:\n     // Alternative
      1: concrete alarm type identity\n     import ietf-alarms {\n       prefix al;\n
      \    }\n     identity environmental-alarm {\n       base al:alarm-type;\n       description
      \"Abstract alarm type\";\n     }\n     identity smoke {\n       base environmental-alarm;\n
      \      description \"Concrete alarm type\";\n     }\n     // Alternative 2:
      concrete alarm type qualifier\n     import ietf-alarms {\n       prefix al;\n
      \    }\n     identity environmental-alarm {\n       base al:alarm-type;\n       description
      \"Abstract alarm type\";\n     }\n     identity external-detector {\n       base
      environmental-alarm;\n       description\n         \"Abstract alarm type; a
      runtime configuration\n          procedure sets the type of alarm detected.
      \ This will\n          be reported in the alarm-type-qualifier.\";\n     }\n
      \  A server SHOULD strive to minimize the number of dynamically defined\n   alarm
      types.\n"
    title: 3.2.  Alarm Type
  - contents:
    - "3.3.  Identifying the Alarming Resource\n   It is of vital importance to be
      able to refer to the alarming\n   resource.  This reference must be as fine-grained
      as possible.  If\n   the alarming resource exists in the data tree, an instance-identifier\n
      \  MUST be used with the full path to the object.\n   When the module is used
      in a controller/orchestrator/manager, the\n   original device resource identification
      can be modified to include\n   the device in the path.  The details depend on
      how devices are\n   identified and are out of scope for this specification.\n
      \  Example:\n      The original device alarm might identify the resource as\n
      \     \"/dev:interfaces/dev:interface[dev:name='FastEthernet1/0']\".\n      The
      resource identification in the manager could look something\n      like: \"/mgr:devices/mgr:device[mgr:name='xyz123']/dev:interfaces/\n
      \     dev:interface[dev:name='FastEthernet1/0']\"\n   This module also allows
      for alternate naming of the alarming resource\n   if it is not available in
      the data tree.\n"
    title: 3.3.  Identifying the Alarming Resource
  - contents:
    - "3.4.  Identifying Alarm Instances\n   A primary goal of the alarm data model
      is to remove any ambiguity in\n   how alarm notifications are mapped to an update
      of an alarm instance.\n   The X.733 [X.733] and 3GPP [ALARMIRP] documents were
      not clear on\n   this point.  This alarm data model states that the tuple (resource,\n
      \  alarm-type identifier, and alarm-type qualifier) corresponds to a\n   single
      alarm instance.  This means that alarm notifications for the\n   same resource
      and same alarm type are matched to update the same\n   alarm instance.  These
      three leafs are therefore used as the key in\n   the alarm list:\n     list
      alarm {\n       key \"resource alarm-type-id alarm-type-qualifier\";\n       ...\n
      \    }\n"
    title: 3.4.  Identifying Alarm Instances
  - contents:
    - "3.5.  Alarm Lifecycle\n   The alarm model clearly separates the resource alarm
      lifecycle from\n   the operator and administrative lifecycles of an alarm.\n
      \  o  resource alarm lifecycle: the alarm instrumentation that controls\n      alarm
      raise, clearance, and severity changes.\n   o  operator alarm lifecycle: operators
      acting upon alarms with\n      actions like acknowledging and closing.  Closing
      an alarm implies\n      that the operator considers the corrective action performed.\n
      \     Operators can also shelve (block/filter) alarms in order to avoid\n      nuisance
      alarms.\n   o  administrative alarm lifecycle: purging (deleting) unwanted alarms\n
      \     and compressing the alarm status-change list.  This module exposes\n      operations
      to manage the administrative lifecycle.  The server may\n      also perform
      these operations based on other policies, but how\n      that is done is out
      of scope for this document.\n   A server SHOULD describe how long it retains
      cleared/closed alarms\n   until they are manually purged or if it has an automatic
      removal\n   policy.  How this is done is outside the scope of this document.\n"
    - contents:
      - "3.5.1.  Resource Alarm Lifecycle\n   From a resource perspective, an alarm
        can, for example, have the\n   following lifecycle: raise, change severity,
        change severity, clear,\n   being raised again, etc.  All of these status
        changes can have\n   different alarm texts generated by the instrumentation.
        \ Two\n   important things to note:\n   1.  Alarms are not deleted when they
        are cleared.  Deleting alarms is\n       an administrative process.  The \"ietf-alarms\"
        YANG module defines\n       an action \"purge-alarms\" that deletes alarms.\n
        \  2.  Alarms are not cleared by operators; only the underlying\n       instrumentation
        can clear an alarm.  Operators can close alarms.\n   The YANG tree representation
        below illustrates the resource-oriented\n   lifecycle:\n     +--ro alarm*
        [resource alarm-type-id alarm-type-qualifier]\n        ...\n        +--ro
        is-cleared                 boolean\n        +--ro last-raised                yang:date-and-time\n
        \       +--ro last-changed               yang:date-and-time\n        +--ro
        perceived-severity         severity\n        +--ro alarm-text                 alarm-text\n
        \       +--ro status-change* [time] {alarm-history}?\n           +--ro time
        \                   yang:date-and-time\n           +--ro perceived-severity
        \     severity-with-clear\n           +--ro alarm-text              alarm-text\n
        \  For every status change from the resource perspective, a row is added\n
        \  to the \"status-change\" list, if the server implements the feature\n   \"alarm-history\".
        \ The feature \"alarm-history\" is optional to\n   implement, since keeping
        the alarm history may have an impact on the\n   server's memory resources.\n
        \  The last status values are also represented as leafs for the alarm.\n   Note
        well that the alarm severity does not include \"cleared\"; alarm\n   clearance
        is a boolean flag.\n   Therefore, an alarm can look like this: ((\"GigabitEthernet0/25\",\n
        \  \"link-alarm\",\"\"), false, 2018-04-08T08:20:10.00Z,\n   2018-04-08T08:20:10.00Z,
        major, \"Interface GigabitEthernet0/25\n   down\").\n"
      title: 3.5.1.  Resource Alarm Lifecycle
    - contents:
      - "3.5.2.  Operator Alarm Lifecycle\n   Operators can act upon alarms using
        the set-operator-state action:\n     +--ro alarm* [resource alarm-type-id
        alarm-type-qualifier]\n        ...\n        +--ro operator-state-change* [time]
        {operator-actions}?\n        |  +--ro time        yang:date-and-time\n        |
        \ +--ro operator    string\n        |  +--ro state       operator-state\n
        \       |  +--ro text?       string\n        +---x set-operator-state {operator-actions}?\n
        \          +---w input\n              +---w state    writable-operator-state\n
        \             +---w text?    string\n   The operator state for an alarm can
        be \"none\", \"ack\", \"shelved\", and\n   \"closed\".  Alarm deletion (using
        the action \"purge-alarms\") can use\n   this state as a criterion.  For example,
        a closed alarm is an alarm\n   where the operator has performed any required
        corrective actions.\n   Closed alarms are good candidates for being purged.\n"
      title: 3.5.2.  Operator Alarm Lifecycle
    - contents:
      - "3.5.3.  Administrative Alarm Lifecycle\n   Deleting alarms from the alarm
        list is considered an administrative\n   action.  This is supported by the
        \"purge-alarms\" action.  The \"purge-\n   alarms\" action takes a filter
        as input.  The filter selects alarms\n   based on the operator and resource
        alarm lifecycle such as \"all\n   closed cleared alarms older than a time
        specification\".  The server\n   may also perform these operations based on
        other policies, but how\n   that is done is out of scope for this document.\n
        \  Purged alarms are removed from the alarm list.  Note well that if the\n
        \  alarm resource state changes after a purge, the alarm will reappear\n   in
        the alarm list.\n   Alarms can be compressed.  Compressing an alarm deletes
        all entries\n   in the alarm's \"status-change\" list except for the last
        status\n   change.  A client can perform this using the \"compress-alarms\"\n
        \  action.  The server may also perform these operations based on other\n
        \  policies, but how that is done is out of scope for this document.\n"
      title: 3.5.3.  Administrative Alarm Lifecycle
    title: 3.5.  Alarm Lifecycle
  - contents:
    - "3.6.  Root Cause, Impacted Resources, and Related Alarms\n   The alarm data
      model does not mandate any requirements for the system\n   to support alarm
      correlation or root-cause and service-impact\n   analysis.  However, if such
      features are supported, this section\n   describes how the results of such analysis
      are represented in the\n   data model.  These parts of the model are optional.
      \ The module\n   supports three scenarios:\n   Root-cause analysis:  An alarm
      can indicate candidate root-cause\n      resources, for example, a database
      issue alarm referring to a\n      full-disk partition.\n   Service-impact analysis:
      \ An alarm can refer to potential impacted\n      resources, for example, an
      interface alarm referring to impacted\n      network services.\n   Alarm correlation:
      \ Dependencies between alarms; several alarms can\n      be grouped as relating
      to each other, for example, a streaming\n      media alarm relating to a high-jitter
      alarm.\n   Different systems have varying degrees of alarm correlation and\n
      \  analysis capabilities, and the intent of the alarm data model is to\n   enable
      any capability, including none.\n   The general principle of this alarm data
      model is to limit the amount\n   of alarms.  In many cases, several resources
      are affected for a given\n   underlying problem.  A full disk will of course
      impact databases and\n   applications as well.  The recommendation is to have
      a single alarm\n   for the underlying problem and list the affected resources
      in the\n   alarm rather than having separate alarms for each resource.\n   The
      alarm has one leaf-list to identify a possible \"impacted-\n   resource\" and
      a leaf-list to identify a possible \"root-cause-\n   resource\".  These serve
      as hints only.  It is up to the client\n   application to use this information
      to present the overall status.\n   Using the disk-full example, a good alarm
      would be to use the hard-\n   disk partition as the alarming resource and add
      the database and\n   applications into the \"impacted-resource\" leaf-list.\n
      \  A system should always strive to identify the resource that can be\n   acted
      upon as the \"resource\" leaf.  The \"impacted-resource\" leaf-list\n   shall
      be used to identify any side effects of the alarm.  The\n   impacted resources
      cannot be acted upon to fix the problem.  The disk\n   full example above illustrates
      the principle; you cannot fix the\n   underlying issue by database operations.
      \ However, you need to pay\n   attention to the database to perform any operations
      that limit the\n   impact of the problem.\n   On some occasions, the system
      might not be capable of detecting the\n   root cause, the resource that can
      be acted upon.  The instrumentation\n   in this case only monitors the side
      effect and raises an alarm to\n   indicate a situation requiring attention.
      \ The instrumentation still\n   might identify possible candidates for the root-cause
      resource.  In\n   this case, the \"root-cause-resource\" leaf-list can be used
      to\n   indicate the candidate root-cause resources.  An example of this kind\n
      \  of alarm might be an active test tool that detects a Service Level\n   Agreement
      (SLA) violation on a VPN connection and identifies the\n   devices along the
      chain as candidate root causes.\n   The alarm data model also supports a way
      to associate different\n   alarms with each other using the \"related-alarm\"
      list.  This list\n   enables the server to inform the client that certain alarms
      are\n   related to other alarms.\n   Note well that this module does not prescribe
      any dependencies or\n   preference between the above alarm correlation mechanisms.
      \ Different\n   systems have different capabilities, and the above described\n
      \  mechanisms are available to support the instrumentation features.\n"
    title: 3.6.  Root Cause, Impacted Resources, and Related Alarms
  - contents:
    - "3.7.  Alarm Shelving\n   Alarm shelving is an important function in order for
      alarm-management\n   applications and operators to stop superfluous alarms.
      \ A shelved\n   alarm implies that any alarms fulfilling these criteria are
      ignored\n   (blocked/filtered).  Shelved alarms appear in a dedicated shelved-\n
      \  alarm list; thus, they can be filtered out so that the main alarm\n   list
      only contains entries of interest.  Shelved alarms do not\n   generate notifications,
      but the shelved-alarm list is updated with\n   any alarm-state changes.\n   Alarm
      shelving is optional to implement, since matching alarms\n   against shelf criteria
      may have an impact on the server's processing\n   resources.\n"
    title: 3.7.  Alarm Shelving
  - contents:
    - "3.8.  Alarm Profiles\n   Alarm profiles are used to configure further information
      to an alarm\n   type.  This module supports configuring severity levels overriding\n
      \  the system-default levels.  This corresponds to the Alarm Severity\n   Assignment
      Profile (ASAP) functionality in M.3100 [M.3100] and M.3160\n   [M.3160].  Other
      standard or enterprise modules can augment this list\n   with further alarm-type
      information.\n"
    title: 3.8.  Alarm Profiles
  title: 3.  Alarm Data Model Concepts
- contents:
  - "4.  Alarm Data Model\n   The fundamental parts of the data model are the \"alarm-list\"
    with\n   associated notifications and the \"alarm-inventory\" list of all\n   possible
    alarm types.  These MUST be implemented by a system.  The\n   rest of the data
    model is made conditional with these YANG features:\n   \"operator-actions\",
    \"alarm-shelving\", \"alarm-history\", \"alarm-\n   summary\", \"alarm-profile\",
    and \"severity-assignment\".\n   The data model has the following overall structure:\n
    \    +--rw control\n     |  +--rw max-alarm-status-changes?   union\n     |  +--rw
    notify-status-changes?      enumeration\n     |  +--rw notify-severity-level?
    \     severity\n     |  +--rw alarm-shelving {alarm-shelving}?\n     |        ...\n
    \    +--ro alarm-inventory\n     |  +--ro alarm-type* [alarm-type-id alarm-type-qualifier]\n
    \    |        ...\n     +--ro summary {alarm-summary}?\n     |  +--ro alarm-summary*
    [severity]\n     |  |     ...\n     |  +--ro shelves-active?   empty {alarm-shelving}?\n
    \    +--ro alarm-list\n     |  +--ro number-of-alarms?   yang:gauge32\n     |
    \ +--ro last-changed?       yang:date-and-time\n     |  +--ro alarm* [resource
    alarm-type-id alarm-type-qualifier]\n     |  |     ...\n     |  +---x purge-alarms\n
    \    |  |     ...\n     |  +---x compress-alarms {alarm-history}?\n     |        ...\n
    \    +--ro shelved-alarms {alarm-shelving}?\n     |  +--ro number-of-shelved-alarms?
    \     yang:gauge32\n     |  +--ro shelved-alarms-last-changed?   yang:date-and-time\n
    \    |  +--ro shelved-alarm*\n     |  |       [resource alarm-type-id alarm-type-qualifier]\n
    \    |  |     ...\n     |  +---x purge-shelved-alarms\n     |  |     ...\n     |
    \ +---x compress-shelved-alarms {alarm-history}?\n     |        ...\n     +--rw
    alarm-profile*\n             [alarm-type-id alarm-type-qualifier-match resource]\n
    \            {alarm-profile}?\n        +--rw alarm-type-id                        alarm-type-id\n
    \       +--rw alarm-type-qualifier-match           string\n        +--rw resource
    \                            resource-match\n        +--rw description                          string\n
    \       +--rw alarm-severity-assignment-profile\n                {severity-assignment}?\n
    \             ...\n"
  - contents:
    - "4.1.  Alarm Control\n   The \"/alarms/control/notify-status-changes\" leaf
      controls whether\n   notifications are sent for all state changes, only raise
      and clear,\n   or only notifications more severe than a configured level.  This\n
      \  feature, in combination with alarm shelving, corresponds to the ITU\n   Alarm
      Report Control functionality; see Appendix F.2.4.\n   Every alarm has a list
      of status changes.  The length of this list is\n   controlled by \"/alarms/control/max-alarm-status-changes\".
      \ When the\n   list is full and a new entry created, the oldest entry is removed.\n"
    - contents:
      - "4.1.1.  Alarm Shelving\n   The shelving control tree is shown below:\n     +--rw
        control\n        +--rw alarm-shelving {alarm-shelving}?\n           +--rw
        shelf* [name]\n              +--rw name           string\n              +--rw
        resource*      resource-match\n              +--rw alarm-type*\n              |
        \      [alarm-type-id alarm-type-qualifier-match]\n              |  +--rw
        alarm-type-id                 alarm-type-id\n              |  +--rw alarm-type-qualifier-match
        \   string\n              +--rw description?   string\n   Shelved alarms are
        shown in a dedicated shelved-alarm list.  Matching\n   alarms MUST appear
        in the \"/alarms/shelved-alarms/shelved-alarm\"\n   list, and non-matching
        alarms MUST appear in the \"/alarms/alarm-list/\n   alarm\" list.  The server
        does not send any notifications for shelved\n   alarms.\n   Shelving and unshelving
        can only be performed by editing the shelf\n   configuration.  It cannot be
        performed on individual alarms.  The\n   server will add an operator state
        indicating that the alarm was\n   shelved/unshelved.\n   A leaf, \"/alarms/summary/shelves-active\",
        in the alarm summary\n   indicates if there are shelved alarms.\n   A system
        can select not to support the shelving feature.\n"
      title: 4.1.1.  Alarm Shelving
    title: 4.1.  Alarm Control
  - contents:
    - "4.2.  Alarm Inventory\n   The alarm inventory represents all possible alarm
      types that may\n   occur in the system.  A management system may use this to
      build alarm\n   procedures.  The alarm inventory is relevant for the following\n
      \  reasons:\n      The system might not implement all defined alarm type identities,\n
      \     and some alarm identities are abstract.\n      The system has configured
      dynamic alarm types using the alarm\n      qualifier.  The inventory makes it
      possible for the management\n      system to discover these.\n   Note that the
      mechanism whereby dynamic alarm types are added using\n   the alarm-type qualifier
      MUST populate this list.\n   The optional leaf-list \"resource\" in the alarm
      inventory enables the\n   system to publish for which resources a given alarm
      type may appear.\n   A server MUST implement the alarm inventory in order to
      enable\n   controlled alarm procedures in the client.\n   A server implementer
      may want to document the alarm inventory for\n   offline processing by clients.
      \ The file format defined in\n   [YANG-INSTANCE] can be used for this purpose.\n
      \  The alarm inventory tree is shown below:\n     +--ro alarm-inventory\n        +--ro
      alarm-type* [alarm-type-id alarm-type-qualifier]\n           +--ro alarm-type-id
      \          alarm-type-id\n           +--ro alarm-type-qualifier    alarm-type-qualifier\n
      \          +--ro resource*               resource-match\n           +--ro will-clear
      \             boolean\n           +--ro severity-level*         severity\n           +--ro
      description             string\n"
    title: 4.2.  Alarm Inventory
  - contents:
    - "4.3.  Alarm Summary\n   The alarm summary list summarizes alarms per severity:
      how many\n   cleared, cleared and closed, and closed.  It also gives an indication\n
      \  if there are shelved alarms.\n   The alarm summary tree is shown below:\n
      \    +--ro summary {alarm-summary}?\n        +--ro alarm-summary* [severity]\n
      \       |  +--ro severity                  severity\n        |  +--ro total?
      \                   yang:gauge32\n        |  +--ro not-cleared?              yang:gauge32\n
      \       |  +--ro cleared?                  yang:gauge32\n        |  +--ro cleared-not-closed?
      \      yang:gauge32\n        |  |       {operator-actions}?\n        |  +--ro
      cleared-closed?           yang:gauge32\n        |  |       {operator-actions}?\n
      \       |  +--ro not-cleared-closed?       yang:gauge32\n        |  |       {operator-actions}?\n
      \       |  +--ro not-cleared-not-closed?   yang:gauge32\n        |          {operator-actions}?\n
      \       +--ro shelves-active?   empty {alarm-shelving}?\n"
    title: 4.3.  Alarm Summary
  - contents:
    - "4.4.  The Alarm List\n   The alarm list, \"/alarms/alarm-list\", is a function
      from the tuple\n   (resource, alarm type, alarm-type qualifier) to the current
      composite\n   alarm state.  The composite state includes states for the resource\n
      \  alarm lifecycle such as severity, clearance flag, and operator states\n   such
      as acknowledged.  This means that for a given resource and alarm\n   type, the
      alarm list shows the current states of the alarm such as\n   acknowledged and
      cleared.\n   +--ro alarm-list\n      +--ro number-of-alarms?   yang:gauge32\n
      \     +--ro last-changed?       yang:date-and-time\n      +--ro alarm* [resource
      alarm-type-id alarm-type-qualifier]\n      |  +--ro resource                 resource\n
      \     |  +--ro alarm-type-id            alarm-type-id\n      |  +--ro alarm-type-qualifier
      \    alarm-type-qualifier\n      |  +--ro alt-resource*            resource\n
      \     |  +--ro related-alarm*\n      |  |       [resource alarm-type-id alarm-type-qualifier]\n
      \     |  |       {alarm-correlation}?\n      |  |  +--ro resource\n      |  |
      \ |       -> /alarms/alarm-list/alarm/resource\n      |  |  +--ro alarm-type-id
      \          leafref\n      |  |  +--ro alarm-type-qualifier    leafref\n      |
      \ +--ro impacted-resource*       resource\n      |  |       {service-impact-analysis}?\n
      \     |  +--ro root-cause-resource*     resource\n      |  |       {root-cause-analysis}?\n
      \     |  +--ro time-created             yang:date-and-time\n      |  +--ro is-cleared
      \              boolean\n      |  +--ro last-raised              yang:date-and-time\n
      \     |  +--ro last-changed             yang:date-and-time\n      |  +--ro perceived-severity
      \      severity\n      |  +--ro alarm-text               alarm-text\n      |
      \ +--ro status-change* [time] {alarm-history}?\n      |  |  +--ro time                  yang:date-and-time\n
      \     |  |  +--ro perceived-severity    severity-with-clear\n      |  |  +--ro
      alarm-text            alarm-text\n      |  +--ro operator-state-change* [time]
      {operator-actions}?\n      |  |  +--ro time        yang:date-and-time\n      |
      \ |  +--ro operator    string\n      |  |  +--ro state       operator-state\n
      \     |  |  +--ro text?       string\n      |  +---x set-operator-state {operator-actions}?\n
      \     |  |  +---w input\n      |  |     +---w state    writable-operator-state\n
      \     |  |     +---w text?    string\n      |  +---n operator-action {operator-actions}?\n
      \     |     +-- time        yang:date-and-time\n      |     +-- operator    string\n
      \     |     +-- state       operator-state\n      |     +-- text?       string\n
      \     +---x purge-alarms\n      |  +---w input\n      |  |  +---w alarm-clearance-status
      \   enumeration\n      |  |  +---w older-than!\n      |  |  |  +---w (age-spec)?\n
      \     |  |  |     +--:(seconds)\n      |  |  |     |  +---w seconds?   uint16\n
      \     |  |  |     +--:(minutes)\n      |  |  |     |  +---w minutes?   uint16\n
      \     |  |  |     +--:(hours)\n      |  |  |     |  +---w hours?     uint16\n
      \     |  |  |     +--:(days)\n      |  |  |     |  +---w days?      uint16\n
      \     |  |  |     +--:(weeks)\n      |  |  |        +---w weeks?     uint16\n
      \     |  |  +---w severity!\n      |  |  |  +---w (sev-spec)?\n      |  |  |
      \    +--:(below)\n      |  |  |     |  +---w below?   severity\n      |  |  |
      \    +--:(is)\n      |  |  |     |  +---w is?      severity\n      |  |  |     +--:(above)\n
      \     |  |  |        +---w above?   severity\n      |  |  +---w operator-state-filter!
      {operator-actions}?\n      |  |     +---w state?   operator-state\n      |  |
      \    +---w user?    string\n      |  +--ro output\n      |     +--ro purged-alarms?
      \  uint32\n      +---x compress-alarms {alarm-history}?\n         +---w input\n
      \        |  +---w resource?               resource-match\n         |  +---w
      alarm-type-id?\n         |  |       -> /alarms/alarm-list/alarm/alarm-type-id\n
      \        |  +---w alarm-type-qualifier?   leafref\n         +--ro output\n            +--ro
      compressed-alarms?   uint32\n   Every alarm has three important states: the
      resource clearance state\n   \"is-cleared\", the severity \"perceived-severity\",
      and the operator\n   state available in the operator-state change list.\n   In
      order to see the alarm history, the resource state changes are\n   available
      in the \"status-change\" list, and the operator history is\n   available in
      the \"operator-state-change\" list.\n"
    title: 4.4.  The Alarm List
  - contents:
    - "4.5.  The Shelved-Alarm List\n   The shelved-alarm list has the same structure
      as the alarm list\n   above.  It shows all the alarms that match the shelving
      criteria\n   \"/alarms/control/alarm-shelving\".\n"
    title: 4.5.  The Shelved-Alarm List
  - contents:
    - "4.6.  Alarm Profiles\n   Alarm profiles, \"/alarms/alarm-profile\", is a list
      of configurable\n   alarm types.  The list supports configurable alarm severity
      levels in\n   the container \"alarm-severity-assignment-profile\".  If an alarm\n
      \  matches the configured alarm type, it MUST use the configured\n   severity
      level(s) instead of the system default.  This configuration\n   MUST also be
      represented in the alarm inventory.\n     +--rw alarm-profile*\n             [alarm-type-id
      alarm-type-qualifier-match resource]\n             {alarm-profile}?\n        +--rw
      alarm-type-id                        alarm-type-id\n        +--rw alarm-type-qualifier-match
      \          string\n        +--rw resource                             resource-match\n
      \       +--rw description                          string\n        +--rw alarm-severity-assignment-profile\n
      \               {severity-assignment}?\n           +--rw severity-level*    severity\n"
    title: 4.6.  Alarm Profiles
  - contents:
    - "4.7.  Operations\n   The alarm data model supports the following actions to
      manage the\n   alarms:\n   \"/alarms/alarm-list/purge-alarms\":  Delete alarms
      from the \"alarm-\n      list\" according to specific criteria, for example,
      all cleared\n      alarms older than a specific date.\n   \"/alarms/alarm-list/compress-alarms\":
      \ Compress the \"status-change\"\n      list for the alarms.\n   \"/alarms/alarm-list/alarm/set-operator-state\":
      \ Change the operator\n      state for an alarm.  For example, an alarm can
      be acknowledged by\n      setting the operator state to \"ack\".\n   \"/alarms/shelved-alarm-list/purge-shelved-alarms\":
      \ Delete alarms\n      from the \"shelved-alarm-list\" according to specific
      criteria, for\n      example, all alarms older than a specific date.\n   \"/alarms/shelved-alarm-list/compress-shelved-alarms\":
      \ Compress the\n      \"status-change\" list for the alarms.\n"
    title: 4.7.  Operations
  - contents:
    - "4.8.  Notifications\n   The alarm data model supports a general notification
      to report alarm-\n   state changes.  It carries all relevant parameters for
      the alarm-\n   management application.\n   There is also a notification to report
      that an operator changed the\n   operator state on an alarm, like acknowledged.\n
      \  If the alarm inventory is changed, for example, a new card type is\n   inserted,
      a notification will tell the management application that\n   new alarm types
      are available.\n"
    title: 4.8.  Notifications
  title: 4.  Alarm Data Model
- contents:
  - "5.  Relationship to the ietf-hardware YANG Module\n   RFC 8348 [RFC8348] defines
    the \"ietf-hardware\" YANG data model for\n   the management of hardware.  The
    \"alarm-state\" in RFC 8348 is a\n   summary of the alarm severity levels that
    may be active on the\n   specific hardware component.  It does not say anything
    about how\n   alarms are reported, and it doesn't provide any details of the\n
    \  alarms.\n   The mapping between the alarm YANG data model, prefix \"al\", and
    the\n   \"alarm-state\" in RFC 8348, prefix \"hw\", is as follows:\n   \"al:resource\":
    \ Corresponds to an entry in the list\n      \"/hw:hardware/hw:component/\".\n
    \  \"al:is-cleared\":  No bit set in \"/hw:hardware/hw:component/hw:state/\n      hw:alarm-state\".\n
    \  \"al:perceived-severity\":  Corresponding bit set in\n      \"/hw:hardware/hw:component/hw:state/hw:alarm-state\".\n
    \  \"al:operator-state-change/al:state\":  If the alarm is acknowledged by\n      the
    operator, the bit \"hw:under-repair\" is set in\n      \"/hw:hardware/hw:component/hw:state/hw:alarm-state\".\n"
  title: 5.  Relationship to the ietf-hardware YANG Module
- contents:
  - "6.  Alarm YANG Module\n   This YANG module references [RFC6991] and [XSD-TYPES].\n
    \ <CODE BEGINS> file \"ietf-alarms@2019-09-11.yang\"\n  module ietf-alarms {\n
    \   yang-version 1.1;\n    namespace \"urn:ietf:params:xml:ns:yang:ietf-alarms\";\n
    \   prefix al;\n    import ietf-yang-types {\n      prefix yang;\n      reference\n
    \       \"RFC 6991: Common YANG Data Types.\";\n    }\n    organization\n      \"IETF
    CCAMP Working Group\";\n    contact\n      \"WG Web:   <https://trac.ietf.org/trac/ccamp>\n
    \      WG List:  <mailto:ccamp@ietf.org>\n       Editor:   Stefan Vallin\n                 <mailto:stefan@wallan.se>\n
    \      Editor:   Martin Bjorklund\n                 <mailto:mbj@tail-f.com>\";\n
    \   description\n      \"This module defines an interface for managing alarms.
    \ Main\n       inputs to the module design are the 3GPP Alarm Integration\n       Reference
    Point (IRP), ITU-T X.733, and ANSI/ISA-18.2 alarm\n       standards.\n       Main
    features of this module include:\n         * Alarm list:\n                   A
    list of all alarms.  Cleared alarms stay in\n                   the list until
    explicitly purged.\n         * Operator actions on alarms:\n                   Acknowledging
    and closing alarms.\n         * Administrative actions on alarms:\n                   Purging
    alarms from the list according to specific\n                   criteria.\n         *
    Alarm inventory:\n                   A management application can read all\n                   alarm
    types implemented by the system.\n         * Alarm shelving:\n                   Shelving
    (blocking) alarms according\n                   to specific criteria.\n         *
    Alarm profiles:\n                   A management system can attach further\n                   information
    to alarm types, for example,\n                   overriding system-default severity\n
    \                  levels.\n       This module uses a stateful view on alarms.
    \ An alarm is a state\n       for a specific resource (note that an alarm is not
    a\n       notification).  An alarm type is a possible alarm state for a\n       resource.
    \ For example, the tuple:\n         ('link-alarm', 'GigabitEthernet0/25')\n       is
    an alarm of type 'link-alarm' on the resource\n       'GigabitEthernet0/25'.\n
    \      Alarm types are identified using YANG identities and an optional\n       string-based
    qualifier.  The string-based qualifier allows for\n       dynamic extension of
    the statically defined alarm types.  Alarm\n       types identify a possible alarm
    state and not the individual\n       notifications.  For example, the traditional
    'link-down' and\n       'link-up' notifications are two notifications referring
    to the\n       same alarm type 'link-alarm'.\n       With this design, there is
    no ambiguity about how alarm and\n       alarm clear correlation should be performed;
    notifications that\n       report the same resource and alarm type are considered
    updates\n       of the same alarm, e.g., clearing an active alarm or changing\n
    \      the severity of an alarm.  The instrumentation can update the\n       severity
    and alarm text on an existing alarm.  The above alarm\n       example can therefore
    look like the following:\n         (('link-alarm', 'GigabitEthernet0/25'),\n          warning,\n
    \         'interface down while interface admin state is up')\n       There is
    a clear separation between updates on the alarm from\n       the underlying resource,
    like clear, and updates from an\n       operator, like acknowledging or closing
    an alarm:\n         (('link-alarm', 'GigabitEthernet0/25'),\n          warning,\n
    \         'interface down while interface admin state is up',\n          cleared,\n
    \         closed)\n       Administrative actions like removing closed alarms older
    than a\n       given time is supported.\n       This YANG module does not define
    how the underlying\n       instrumentation detects and clears the specific alarms.
    \ That\n       belongs to the Standards Development Organization (SDO) or\n       enterprise
    that owns that specific technology.\n       The key words 'MUST', 'MUST NOT',
    'REQUIRED', 'SHALL', 'SHALL\n       NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED',
    'NOT RECOMMENDED',\n       'MAY', and 'OPTIONAL' in this document are to be interpreted
    as\n       described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,\n       they
    appear in all capitals, as shown here.\n       Copyright (c) 2019 IETF Trust and
    the persons identified as\n       authors of the code.  All rights reserved.\n
    \      Redistribution and use in source and binary forms, with or\n       without
    modification, is permitted pursuant to, and subject to\n       the license terms
    contained in, the Simplified BSD License set\n       forth in Section 4.c of the
    IETF Trust's Legal Provisions\n       Relating to IETF Documents\n       (https://trustee.ietf.org/license-info).\n
    \      This version of this YANG module is part of RFC 8632; see\n       the RFC
    itself for full legal notices.\";\n    revision 2019-09-11 {\n      description\n
    \       \"Initial revision.\";\n      reference\n        \"RFC 8632: A YANG Data
    Model for Alarm Management\";\n    }\n    /*\n     * Features\n     */\n    feature
    operator-actions {\n      description\n        \"This feature indicates that the
    system supports operator\n         states on alarms.\";\n    }\n    feature alarm-shelving
    {\n      description\n        \"This feature indicates that the system supports
    shelving\n         (blocking) alarms.\n         Alarm shelving may have an impact
    on server processing\n         resources in order to match alarms against shelf\n
    \        criteria.\";\n    }\n    feature alarm-history {\n      description\n
    \       \"This feature indicates that the server maintains a history\n         of
    state changes for each alarm.  For example, if an alarm\n         toggles between
    cleared and active 10 times, these state\n         changes are present in a separate
    list in the alarm.\n         Keeping the alarm history may have an impact on server\n
    \        memory resources.\";\n    }\n    feature alarm-summary {\n      description\n
    \       \"This feature indicates that the server summarizes the number\n         of
    alarms per severity and operator state.\";\n    }\n    feature alarm-profile {\n
    \     description\n        \"The system enables clients to configure further information\n
    \        to each alarm type.\";\n    }\n    feature severity-assignment {\n      description\n
    \       \"The system supports configurable alarm severity levels.\";\n      reference\n
    \       \"ITU-T Recommendation M.3100:\n           Generic network information
    model\n         ITU-T Recommendation M.3160:\n           Generic, protocol-neutral
    management information model\";\n    }\n    feature root-cause-analysis {\n      description\n
    \       \"The system supports identifying candidate root-cause\n         resources
    for an alarm, for example, a disk partition\n         root cause for a logger
    failure alarm.\";\n    }\n    feature service-impact-analysis {\n      description\n
    \       \"The system supports identifying candidate-impacted\n         resources
    for an alarm, for example, an interface state change\n         resulting in a
    link alarm, which can refer to a link as being\n         impacted.\";\n    }\n
    \   feature alarm-correlation {\n      description\n        \"The system supports
    correlating/grouping alarms\n         that belong together.\";\n    }\n    /*\n
    \    * Identities\n     */\n    identity alarm-type-id {\n      description\n
    \       \"Base identity for alarm types.  A unique identification of\n         the
    alarm, not including the resource.  Different resources\n         can share alarm
    types.  If the resource reports the same\n         alarm type, it is considered
    to be the same alarm.  The alarm\n         type is a simplification of the different
    X.733 and 3GPP Alarm\n         IRP correlation mechanisms, and it allows for\n
    \        hierarchical extensions.\n         A string-based qualifier can be used
    in addition to the\n         identity in order to have different alarm types based
    on\n         information not known at design time, such as values in\n         textual
    SNMP Notification varbinds.\n         Standards and vendors can define sub-identities
    to clearly\n         identify specific alarm types.\n         This identity is
    abstract and MUST NOT be used for alarms.\";\n    }\n    /*\n     * Common types\n
    \    */\n    typedef resource {\n      type union {\n        type instance-identifier
    {\n          require-instance false;\n        }\n        type yang:object-identifier;\n
    \       type string;\n        type yang:uuid;\n      }\n      description\n        \"This
    is an identification of the alarming resource, such as an\n         interface.
    \ It should be as fine-grained as possible to both\n         guide the operator
    and guarantee uniqueness of the alarms.\n         If the alarming resource is
    modeled in YANG, this type will\n         be an instance-identifier.\n         If
    the resource is an SNMP object, the type will be an\n         'object-identifier'.\n
    \        If the resource is anything else, for example, a distinguished\n         name
    or a Common Information Model (CIM) path, this type will\n         be a string.\n
    \        If the alarming object is identified by a Universally Unique\n         Identifier
    (UUID), use the uuid type.  Be cautious when using\n         this type, since
    a UUID is hard to use for an operator.\n         If the server supports several
    models, the precedence should\n         be in the order as given in the union
    definition.\";\n    }\n    typedef resource-match {\n      type union {\n        type
    yang:xpath1.0;\n        type yang:object-identifier;\n        type string;\n      }\n
    \     description\n        \"This type is used to match resources of type 'resource'.\n
    \        Since the type 'resource' is a union of different types, the\n         'resource-match'
    type is also a union of corresponding types.\n         If the type is given as
    an XPath 1.0 expression, a resource\n         of type 'instance-identifier' matches
    if the instance is part\n         of the node set that is the result of evaluating
    the XPath 1.0\n         expression.  For example, the XPath 1.0 expression:\n
    \         /ietf-interfaces:interfaces/ietf-interfaces:interface\n              [ietf-interfaces:type='ianaift:ethernetCsmacd']\n
    \        would match the resource instance-identifier:\n          /if:interfaces/if:interface[if:name='eth1'],\n
    \        assuming that the interface 'eth1' is of type\n         'ianaift:ethernetCsmacd'.\n
    \        If the type is given as an object identifier, a resource of\n         type
    'object-identifier' matches if the match object\n         identifier is a prefix
    of the resource's object identifier.\n         For example, the value:\n          1.3.6.1.2.1.2.2\n
    \        would match the resource object identifier:\n          1.3.6.1.2.1.2.2.1.1.5\n
    \        If the type is given as an UUID or a string, it is interpreted\n         as
    an XML Schema regular expression, which matches a resource\n         of type 'yang:uuid'
    or 'string' if the given regular\n         expression matches the resource string.\n
    \        If the type is given as an XPath expression, it is evaluated\n         in
    the following XPath context:\n           o  The set of namespace declarations
    is the set of prefix\n              and namespace pairs for all YANG modules implemented
    by\n              the server, where the prefix is the YANG module name and\n              the
    namespace is as defined by the 'namespace' statement\n              in the YANG
    module.\n              If a leaf of this type is encoded in XML, all namespace\n
    \             declarations in scope on the leaf element are added to\n              the
    set of namespace declarations.  If a prefix found in\n              the XML is
    already present in the set of namespace\n              declarations, the namespace
    in the XML is used.\n           o  The set of variable bindings is empty.\n           o
    \ The function library is the core function library, and\n              the functions
    are defined in Section 10 of RFC 7950.\n           o  The context node is the
    root node in the data tree.\";\n      reference\n        \"XML Schema Part 2:
    Datatypes Second Edition,\n           World Wide Web Consortium Recommendation\n
    \          REC-xmlschema-2-20041028\";\n    }\n    typedef alarm-text {\n      type
    string;\n      description\n        \"The string used to inform operators about
    the alarm.  This\n         MUST contain enough information for an operator to
    be able to\n         understand the problem and how to resolve it.  If this string\n
    \        contains structure, this format should be clearly documented\n         for
    programs to be able to parse that information.\";\n    }\n    typedef severity
    {\n      type enumeration {\n        enum indeterminate {\n          value 2;\n
    \         description\n            \"Indicates that the severity level could not
    be\n             determined.  This level SHOULD be avoided.\";\n        }\n        enum
    warning {\n          value 3;\n          description\n            \"The 'warning'
    severity level indicates the detection of a\n             potential or impending
    service-affecting fault, before any\n             significant effects have been
    felt.  Action should be\n             taken to further diagnose (if necessary)
    and correct the\n             problem in order to prevent it from becoming a more\n
    \            serious service-affecting fault.\";\n        }\n        enum minor
    {\n          value 4;\n          description\n            \"The 'minor' severity
    level indicates the existence of a\n             non-service-affecting fault condition
    and that corrective\n             action should be taken in order to prevent a
    more serious\n             (for example, service-affecting) fault.  Such a severity\n
    \            can be reported, for example, when the detected alarm\n             condition
    is not currently degrading the capacity of the\n             resource.\";\n        }\n
    \       enum major {\n          value 5;\n          description\n            \"The
    'major' severity level indicates that a service-\n             affecting condition
    has developed and an urgent corrective\n             action is required.  Such
    a severity can be reported, for\n             example, when there is a severe
    degradation in the\n             capability of the resource and its full capability
    must be\n             restored.\";\n        }\n        enum critical {\n          value
    6;\n          description\n            \"The 'critical' severity level indicates
    that a service-\n             affecting condition has occurred and an immediate\n
    \            corrective action is required.  Such a severity can be\n             reported,
    for example, when a resource becomes totally out\n             of service and
    its capability must be restored.\";\n        }\n      }\n      description\n        \"The
    severity level of the alarm.  Note well that the value\n         'clear' is not
    included.  Whether or not an alarm is cleared\n         is a separate boolean
    flag.\";\n      reference\n        \"ITU-T Recommendation X.733: Information Technology\n
    \          - Open Systems Interconnection\n           - System Management: Alarm
    Reporting Function\";\n    }\n    typedef severity-with-clear {\n      type union
    {\n        type enumeration {\n          enum cleared {\n            value 1;\n
    \           description\n              \"The alarm is cleared by the instrumentation.\";\n
    \         }\n        }\n        type severity;\n      }\n      description\n        \"The
    severity level of the alarm including clear.  This is used\n         only in notifications
    reporting state changes for an alarm.\";\n    }\n    typedef writable-operator-state
    {\n      type enumeration {\n        enum none {\n          value 1;\n          description\n
    \           \"The alarm is not being taken care of.\";\n        }\n        enum
    ack {\n          value 2;\n          description\n            \"The alarm is being
    taken care of.  Corrective action not\n             taken yet or has failed\";\n
    \       }\n        enum closed {\n          value 3;\n          description\n
    \           \"Corrective action taken successfully.\";\n        }\n      }\n      description\n
    \       \"Operator states on an alarm.  The 'closed' state indicates\n         that
    an operator considers the alarm being resolved.  This is\n         separate from
    the alarm's 'is-cleared' leaf.\";\n    }\n    typedef operator-state {\n      type
    union {\n        type writable-operator-state;\n        type enumeration {\n          enum
    shelved {\n            value 4;\n            description\n              \"The
    alarm is shelved.  Alarms in /alarms/shelved-alarms/\n               MUST be assigned
    this operator state by the server as\n               the last entry in the 'operator-state-change'
    list.  The\n               text for that entry SHOULD include the shelf name.\";\n
    \         }\n          enum un-shelved {\n            value 5;\n            description\n
    \             \"The alarm is moved back to 'alarm-list' from a shelf.\n               Alarms
    that are moved from /alarms/shelved-alarms/ to\n               /alarms/alarm-list
    MUST be assigned this state by the\n               server as the last entry in
    the 'operator-state-change'\n               list.  The text for that entry SHOULD
    include the shelf\n               name.\";\n          }\n        }\n      }\n
    \     description\n        \"Operator states on an alarm.  The 'closed' state
    indicates\n         that an operator considers the alarm being resolved.  This
    is\n         separate from the alarm's 'is-cleared' leaf.\";\n    }\n    /* Alarm
    type */\n    typedef alarm-type-id {\n      type identityref {\n        base alarm-type-id;\n
    \     }\n      description\n        \"Identifies an alarm type.  The description
    of the alarm type\n         id MUST indicate whether or not the alarm type is
    abstract.\n         An abstract alarm type is used as a base for other alarm type\n
    \        ids and will not be used as a value for an alarm or be present\n         in
    the alarm inventory.\";\n    }\n    typedef alarm-type-qualifier {\n      type
    string;\n      description\n        \"If an alarm type cannot be fully specified
    at design time by\n         'alarm-type-id', this string qualifier is used in
    addition to\n         fully define a unique alarm type.\n         The definition
    of alarm qualifiers is considered to be part of\n         the instrumentation
    and is out of scope for this module.  An\n         empty string is used when this
    is part of a key.\";\n    }\n    /*\n     * Groupings\n     */\n    grouping common-alarm-parameters
    {\n      description\n        \"Common parameters for an alarm.\n         This
    grouping is used both in the alarm list and in the\n         notification representing
    an alarm-state change.\";\n      leaf resource {\n        type resource;\n        mandatory
    true;\n        description\n          \"The alarming resource.  See also 'alt-resource'.
    \ This could\n           be, for example, a reference to the alarming interface\";\n
    \     }\n      leaf alarm-type-id {\n        type alarm-type-id;\n        mandatory
    true;\n        description\n          \"This leaf and the leaf 'alarm-type-qualifier'
    together\n           provide a unique identification of the alarm type.\";\n      }\n
    \     leaf alarm-type-qualifier {\n        type alarm-type-qualifier;\n        description\n
    \         \"This leaf is used when the 'alarm-type-id' leaf cannot\n           uniquely
    identify the alarm type.  Normally, this is not the\n           case, and this
    leaf is the empty string.\";\n      }\n      leaf-list alt-resource {\n        type
    resource;\n        description\n          \"Used if the alarming resource is available
    over other\n           interfaces.  This field can contain SNMP OIDs, CIM paths,
    or\n           3GPP distinguished names, for example.\";\n      }\n      list
    related-alarm {\n        if-feature \"alarm-correlation\";\n        key \"resource
    alarm-type-id alarm-type-qualifier\";\n        description\n          \"References
    to related alarms.  Note that the related alarm\n           might have been purged
    from the alarm list.\";\n        leaf resource {\n          type leafref {\n            path
    \"/alarms/alarm-list/alarm/resource\";\n            require-instance false;\n
    \         }\n          description\n            \"The alarming resource for the
    related alarm.\";\n        }\n        leaf alarm-type-id {\n          type leafref
    {\n            path \"/alarms/alarm-list/alarm\"\n               + \"[resource=current()/../resource]\"\n
    \              + \"/alarm-type-id\";\n            require-instance false;\n          }\n
    \         description\n            \"The alarm type identifier for the related
    alarm.\";\n        }\n        leaf alarm-type-qualifier {\n          type leafref
    {\n            path \"/alarms/alarm-list/alarm\"\n               + \"[resource=current()/../resource]\"\n
    \              + \"[alarm-type-id=current()/../alarm-type-id]\"\n               +
    \"/alarm-type-qualifier\";\n            require-instance false;\n          }\n
    \         description\n            \"The alarm qualifier for the related alarm.\";\n
    \       }\n      }\n      leaf-list impacted-resource {\n        if-feature \"service-impact-analysis\";\n
    \       type resource;\n        description\n          \"Resources that might
    be affected by this alarm.  If the\n           system creates an alarm on a resource
    and also has a mapping\n           to other resources that might be impacted,
    these resources\n           can be listed in this leaf-list.  In this way, the
    system\n           can create one alarm instead of several.  For example, if an\n
    \          interface has an alarm, the 'impacted-resource' can\n           reference
    the aggregated port channels.\";\n      }\n      leaf-list root-cause-resource
    {\n        if-feature \"root-cause-analysis\";\n        type resource;\n        description\n
    \         \"Resources that are candidates for causing the alarm.  If the\n           system
    has a mechanism to understand the candidate root\n           causes of an alarm,
    this leaf-list can be used to list the\n           root-cause candidate resources.
    \ In this way, the system can\n           create one alarm instead of several.
    \ An example might be a\n           logging system (alarm resource) that fails;
    the alarm can\n           reference the file system in the 'root-cause-resource'\n
    \          leaf-list.  Note that the intended use is not to also send\n           an
    alarm with the 'root-cause-resource' as an alarming\n           resource.  The
    'root-cause-resource' leaf-list is a hint and\n           should not also generate
    an alarm for the same problem.\";\n      }\n    }\n    grouping alarm-state-change-parameters
    {\n      description\n        \"Parameters for an alarm-state change.\n         This
    grouping is used both in the alarm list's status-change\n         list and in
    the notification representing an alarm-state\n         change.\";\n      leaf
    time {\n        type yang:date-and-time;\n        mandatory true;\n        description\n
    \         \"The time the status of the alarm changed.  The value\n           represents
    the time the real alarm-state change appeared in\n           the resource and
    not when it was added to the alarm\n           list.  The /alarm-list/alarm/last-changed
    MUST be set to the\n           same value.\";\n      }\n      leaf perceived-severity
    {\n        type severity-with-clear;\n        mandatory true;\n        description\n
    \         \"The severity of the alarm as defined by X.733.  Note that\n           this
    may not be the original severity since the alarm may\n           have changed
    severity.\";\n        reference\n          \"ITU-T Recommendation X.733: Information
    Technology\n             - Open Systems Interconnection\n             - System
    Management: Alarm Reporting Function\";\n      }\n      leaf alarm-text {\n        type
    alarm-text;\n        mandatory true;\n        description\n          \"A user-friendly
    text describing the alarm-state change.\";\n        reference\n          \"ITU-T
    Recommendation X.733: Information Technology\n             - Open Systems Interconnection\n
    \            - System Management: Alarm Reporting Function\";\n      }\n    }\n
    \   grouping operator-parameters {\n      description\n        \"This grouping
    defines parameters that can be changed by an\n         operator.\";\n      leaf
    time {\n        type yang:date-and-time;\n        mandatory true;\n        description\n
    \         \"Timestamp for operator action on the alarm.\";\n      }\n      leaf
    operator {\n        type string;\n        mandatory true;\n        description\n
    \         \"The name of the operator that has acted on this alarm.\";\n      }\n
    \     leaf state {\n        type operator-state;\n        mandatory true;\n        description\n
    \         \"The operator's view of the alarm state.\";\n      }\n      leaf text
    {\n        type string;\n        description\n          \"Additional optional
    textual information provided by the\n           operator.\";\n      }\n    }\n
    \   grouping resource-alarm-parameters {\n      description\n        \"Alarm parameters
    that originate from the resource view.\";\n      leaf is-cleared {\n        type
    boolean;\n        mandatory true;\n        description\n          \"Indicates
    the current clearance state of the alarm.  An\n           alarm might toggle from
    active alarm to cleared alarm and\n           back to active again.\";\n      }\n
    \     leaf last-raised {\n        type yang:date-and-time;\n        mandatory
    true;\n        description\n          \"An alarm may change severity level and
    toggle between\n           active and cleared during its lifetime.  This leaf
    indicates\n           the last time it was raised ('is-cleared' = 'false').\";\n
    \     }\n      leaf last-changed {\n        type yang:date-and-time;\n        mandatory
    true;\n        description\n          \"A timestamp when the 'status-change' or\n
    \          'operator-state-change' list was last changed.\";\n      }\n      leaf
    perceived-severity {\n        type severity;\n        mandatory true;\n        description\n
    \         \"The last severity of the alarm.\n           If an alarm was raised
    with severity 'warning' but later\n           changed to 'major', this leaf will
    show 'major'.\";\n      }\n      leaf alarm-text {\n        type alarm-text;\n
    \       mandatory true;\n        description\n          \"The last reported alarm
    text.  This text should contain\n           information for an operator to be
    able to understand the\n           problem and how to resolve it.\";\n      }\n
    \     list status-change {\n        if-feature \"alarm-history\";\n        key
    \"time\";\n        min-elements 1;\n        description\n          \"A list of
    status-change events for this alarm.\n           The entry with latest timestamp
    in this list MUST\n           correspond to the leafs 'is-cleared', 'perceived-severity',\n
    \          and 'alarm-text' for the alarm.\n           This list is ordered according
    to the timestamps of alarm\n           state changes.  The first item corresponds
    to the latest\n           state change.\n           The following state changes
    create an entry in this\n           list:\n           - changed severity (warning,
    minor, major, critical)\n           - clearance status; this also updates the
    'is-cleared'\n             leaf\n           - alarm-text update\";\n        uses
    alarm-state-change-parameters;\n      }\n    }\n    grouping filter-input {\n
    \     description\n        \"Grouping to specify a filter construct on alarm information.\";\n
    \     leaf alarm-clearance-status {\n        type enumeration {\n          enum
    any {\n            description\n              \"Ignore alarm-clearance status.\";\n
    \         }\n          enum cleared {\n            description\n              \"Filter
    cleared alarms.\";\n          }\n          enum not-cleared {\n            description\n
    \             \"Filter not-cleared alarms.\";\n          }\n        }\n        mandatory
    true;\n        description\n          \"The clearance status of the alarm.\";\n
    \     }\n      container older-than {\n        presence \"Age specification\";\n
    \       description\n          \"Matches the 'last-status-change' leaf in the
    alarm.\";\n        choice age-spec {\n          description\n            \"Filter
    using date and time age.\";\n          case seconds {\n            leaf seconds
    {\n              type uint16;\n              description\n                \"Age
    expressed in seconds.\";\n            }\n          }\n          case minutes {\n
    \           leaf minutes {\n              type uint16;\n              description\n
    \               \"Age expressed in minutes.\";\n            }\n          }\n          case
    hours {\n            leaf hours {\n              type uint16;\n              description\n
    \               \"Age expressed in hours.\";\n            }\n          }\n          case
    days {\n            leaf days {\n              type uint16;\n              description\n
    \               \"Age expressed in days.\";\n            }\n          }\n          case
    weeks {\n            leaf weeks {\n              type uint16;\n              description\n
    \               \"Age expressed in weeks.\";\n            }\n          }\n        }\n
    \     }\n      container severity {\n        presence \"Severity filter\";\n        choice
    sev-spec {\n          description\n            \"Filter based on severity level.\";\n
    \         leaf below {\n            type severity;\n            description\n
    \             \"Severity less than this leaf.\";\n          }\n          leaf
    is {\n            type severity;\n            description\n              \"Severity
    level equal to this leaf.\";\n          }\n          leaf above {\n            type
    severity;\n            description\n              \"Severity level higher than
    this leaf.\";\n          }\n        }\n        description\n          \"Filter
    based on severity.\";\n      }\n      container operator-state-filter {\n        if-feature
    \"operator-actions\";\n        presence \"Operator state filter\";\n        leaf
    state {\n          type operator-state;\n          description\n            \"Filter
    on operator state.\";\n        }\n        leaf user {\n          type string;\n
    \         description\n            \"Filter based on which operator.\";\n        }\n
    \       description\n          \"Filter based on operator state.\";\n      }\n
    \   }\n    /*\n     * The /alarms data tree\n     */\n    container alarms {\n
    \     description\n        \"The top container for this module.\";\n      container
    control {\n        description\n          \"Configuration to control the alarm
    behavior.\";\n        leaf max-alarm-status-changes {\n          type union {\n
    \           type uint16;\n            type enumeration {\n              enum infinite
    {\n                description\n                  \"The status-change entries
    are accumulated\n                   infinitely.\";\n              }\n            }\n
    \         }\n          default \"32\";\n          description\n            \"The
    'status-change' entries are kept in a circular list\n             per alarm.  When
    this number is exceeded, the oldest\n             status change entry is automatically
    removed.  If the\n             value is 'infinite', the status-change entries
    are\n             accumulated infinitely.\";\n        }\n        leaf notify-status-changes
    {\n          type enumeration {\n            enum all-state-changes {\n              description\n
    \               \"Send notifications for all status changes.\";\n            }\n
    \           enum raise-and-clear {\n              description\n                \"Send
    notifications only for raise, clear, and\n                 re-raise.  Notifications
    for severity-level changes or\n                 alarm-text changes are not sent.\";\n
    \           }\n            enum severity-level {\n              description\n
    \               \"Only send notifications for alarm-state changes\n                 crossing
    the level specified in\n                 'notify-severity-level'.  Always send
    clear\n                 notifications.\";\n            }\n          }\n          must
    '. != \"severity-level\" or ../notify-severity-level' {\n            description\n
    \             \"When notify-status-changes is 'severity-level', a value\n               must
    be given for 'notify-severity-level'.\";\n          }\n          default \"all-state-changes\";\n
    \         description\n            \"This leaf controls the notifications sent
    for alarm status\n             updates.  There are three options:\n             1.
    \ Notifications are sent for all updates, severity-level\n                 changes,
    and alarm-text changes.\n             2.  Notifications are only sent for alarm
    raise and clear.\n             3.  Notifications are sent for status changes equal
    to or\n                 above the specified severity level.  Clear\n                 notifications
    shall always be sent.  Notifications\n                 shall also be sent for
    state changes that make an\n                 alarm less severe than the specified
    level.\n             For example, in option 3, assume that the severity level\n
    \            is set to major and that the alarm has the following state\n             changes:\n
    \            [(Time, severity, clear)]:\n             [(T1, major, -), (T2, minor,
    -), (T3, warning, -),\n              (T4, minor, -), (T5, major, -), (T6, critical,
    -),\n              (T7, major.  -), (T8, major, clear)]\n             In that
    case, notifications will be sent at times\n             T1, T2, T5, T6, T7, and
    T8.\";\n        }\n        leaf notify-severity-level {\n          when '../notify-status-changes
    = \"severity-level\"';\n          type severity;\n          description\n            \"Only
    send notifications for alarm-state changes crossing\n             the specified
    level.  Always send clear notifications.\";\n        }\n        container alarm-shelving
    {\n          if-feature \"alarm-shelving\";\n          description\n            \"The
    'alarm-shelving/shelf' list is used to shelve\n             (block/filter) alarms.
    \ The conditions in the shelf\n             criteria are logically ANDed.  The
    first matching shelf is\n             used, and an alarm is shelved only for this
    first match.\n             Matching alarms MUST appear in the\n             /alarms/shelved-alarms/shelved-alarm
    list, and\n             non-matching /alarms MUST appear in the\n             /alarms/alarm-list/alarm
    list.  The server does not send\n             any notifications for shelved alarms.\n
    \            The server MUST maintain states (e.g., severity\n             changes)
    for the shelved alarms.\n             Alarms that match the criteria shall have
    an\n             operator state 'shelved'.  When the shelf\n             configuration
    removes an alarm from the shelf, the server\n             shall add the operator
    state 'un-shelved'.\";\n          list shelf {\n            key \"name\";\n            ordered-by
    user;\n            leaf name {\n              type string;\n              description\n
    \               \"An arbitrary name for the alarm shelf.\";\n            }\n            description\n
    \             \"Each entry defines the criteria for shelving alarms.\n               Criteria
    are ANDed.  If no criteria are specified,\n               all alarms will be shelved.\";\n
    \           leaf-list resource {\n              type resource-match;\n              description\n
    \               \"Shelve alarms for matching resources.\";\n            }\n            list
    alarm-type {\n              key \"alarm-type-id alarm-type-qualifier-match\";\n
    \             description\n                \"Any alarm matching the combined criteria
    of\n                 'alarm-type-id' and 'alarm-type-qualifier-match'\n                 MUST
    be matched.\";\n              leaf alarm-type-id {\n                type alarm-type-id;\n
    \               description\n                  \"Shelve all alarms that have an
    'alarm-type-id' that\n                   is equal to or derived from the given\n
    \                  'alarm-type-id'.\";\n              }\n              leaf alarm-type-qualifier-match
    {\n                type string;\n                description\n                  \"An
    XML Schema regular expression that is used to\n                   match an alarm
    type qualifier.  Shelve all alarms\n                   that match this regular
    expression for the alarm\n                   type qualifier.\";\n                reference\n
    \                 \"XML Schema Part 2: Datatypes Second Edition,\n                     World
    Wide Web Consortium Recommendation\n                     REC-xmlschema-2-20041028\";\n
    \             }\n            }\n            leaf description {\n              type
    string;\n              description\n                \"An optional textual description
    of the shelf.  This\n                 description should include the reason for
    shelving\n                 these alarms.\";\n            }\n          }\n        }\n
    \     }\n      container alarm-inventory {\n        config false;\n        description\n
    \         \"The 'alarm-inventory/alarm-type' list contains all possible\n           alarm
    types for the system.\n           If the system knows for which resources a specific
    alarm\n           type can appear, it is also identified in the inventory.\n           The
    list also tells if each alarm type has a corresponding\n           clear state.
    \ The inventory shall only contain concrete\n           alarm types.\n           The
    alarm inventory MUST be updated by the system when new\n           alarms can
    appear.  This can be the case when installing new\n           software modules
    or inserting new card types.  A\n           notification 'alarm-inventory-changed'
    is sent when the\n           inventory is changed.\";\n        list alarm-type
    {\n          key \"alarm-type-id alarm-type-qualifier\";\n          description\n
    \           \"An entry in this list defines a possible alarm.\";\n          leaf
    alarm-type-id {\n            type alarm-type-id;\n            description\n              \"The
    statically defined alarm type identifier for this\n               possible alarm.\";\n
    \         }\n          leaf alarm-type-qualifier {\n            type alarm-type-qualifier;\n
    \           description\n              \"The optionally dynamically defined alarm
    type identifier\n               for this possible alarm.\";\n          }\n          leaf-list
    resource {\n            type resource-match;\n            description\n              \"Optionally,
    specifies for which resources the alarm type\n               is valid.\";\n          }\n
    \         leaf will-clear {\n            type boolean;\n            mandatory
    true;\n            description\n              \"This leaf tells the operator if
    the alarm will be\n               cleared when the correct corrective action has
    been\n               taken.  Implementations SHOULD strive for detecting the\n
    \              cleared state for all alarm types.\n               If this leaf
    is 'true', the operator can monitor the\n               alarm until it becomes
    cleared after the corrective\n               action has been taken.\n               If
    this leaf is 'false', the operator needs to validate\n               that the
    alarm is no longer active using other\n               mechanisms.  Alarms can
    lack a corresponding clear due\n               to missing instrumentation or no
    logical\n               corresponding clear state.\";\n          }\n          leaf-list
    severity-level {\n            type severity;\n            description\n              \"This
    leaf-list indicates the possible severity levels of\n               this alarm
    type.  Note well that 'clear' is not part of\n               the severity type.
    \ In general, the severity level\n               should be defined by the instrumentation
    based on the\n               dynamic state, rather than being defined statically
    by\n               the alarm type, in order to provide a relevant severity\n               level
    based on dynamic state and context.  However, most\n               alarm types
    have a defined set of possible severity\n               levels, and this should
    be provided here.\";\n          }\n          leaf description {\n            type
    string;\n            mandatory true;\n            description\n              \"A
    description of the possible alarm.  It SHOULD include\n               information
    on possible underlying root causes and\n               corrective actions.\";\n
    \         }\n        }\n      }\n      container summary {\n        if-feature
    \"alarm-summary\";\n        config false;\n        description\n          \"This
    container gives a summary of the number of alarms.\";\n        list alarm-summary
    {\n          key \"severity\";\n          description\n            \"A global
    summary of all alarms in the system.  The summary\n             does not include
    shelved alarms.\";\n          leaf severity {\n            type severity;\n            description\n
    \             \"Alarm summary for this severity level.\";\n          }\n          leaf
    total {\n            type yang:gauge32;\n            description\n              \"Total
    number of alarms of this severity level.\";\n          }\n          leaf not-cleared
    {\n            type yang:gauge32;\n            description\n              \"Total
    number of alarms of this severity level\n               that are not cleared.\";\n
    \         }\n          leaf cleared {\n            type yang:gauge32;\n            description\n
    \             \"For this severity level, the number of alarms that are\n               cleared.\";\n
    \         }\n          leaf cleared-not-closed {\n            if-feature \"operator-actions\";\n
    \           type yang:gauge32;\n            description\n              \"For this
    severity level, the number of alarms that are\n               cleared but not
    closed.\";\n          }\n          leaf cleared-closed {\n            if-feature
    \"operator-actions\";\n            type yang:gauge32;\n            description\n
    \             \"For this severity level, the number of alarms that are\n               cleared
    and closed.\";\n          }\n          leaf not-cleared-closed {\n            if-feature
    \"operator-actions\";\n            type yang:gauge32;\n            description\n
    \             \"For this severity level, the number of alarms that are\n               not
    cleared but closed.\";\n          }\n          leaf not-cleared-not-closed {\n
    \           if-feature \"operator-actions\";\n            type yang:gauge32;\n
    \           description\n              \"For this severity level, the number of
    alarms that are\n               not cleared and not closed.\";\n          }\n
    \       }\n        leaf shelves-active {\n          if-feature \"alarm-shelving\";\n
    \         type empty;\n          description\n            \"This is a hint to
    the operator that there are active\n             alarm shelves.  This leaf MUST
    exist if the\n             /alarms/shelved-alarms/number-of-shelved-alarms is
    > 0.\";\n        }\n      }\n      container alarm-list {\n        config false;\n
    \       description\n          \"The alarms in the system.\";\n        leaf number-of-alarms
    {\n          type yang:gauge32;\n          description\n            \"This object
    shows the total number of\n             alarms in the system, i.e., the total
    number\n             of entries in the alarm list.\";\n        }\n        leaf
    last-changed {\n          type yang:date-and-time;\n          description\n            \"A
    timestamp when the alarm list was last\n             changed.  The value can be
    used by a manager to\n             initiate an alarm resynchronization procedure.\";\n
    \       }\n        list alarm {\n          key \"resource alarm-type-id alarm-type-qualifier\";\n
    \         description\n            \"The list of alarms.  Each entry in the list
    holds one\n             alarm for a given alarm type and resource.  An alarm can\n
    \            be updated from the underlying resource or by the user.\n             The
    following leafs are maintained by the resource:\n             'is-cleared', 'last-change',
    'perceived-severity', and\n             'alarm-text'.  An operator can change
    'operator-state' and\n             'operator-text'.\n             Entries appear
    in the alarm list the first time an alarm\n             becomes active for a given
    alarm type and resource.\n             Entries do not get deleted when the alarm
    is cleared.\n             Clear status is represented as a boolean flag.\n             Alarm
    entries are removed, i.e., purged, from the list by\n             an explicit
    purge action.  For example, purge all alarms\n             that are cleared and
    in closed operator state that are\n             older than 24 hours.  Purged alarms
    are removed from the\n             alarm list.  If the alarm resource state changes
    after a\n             purge, the alarm will reappear in the alarm list.\n             Systems
    may also remove alarms based on locally configured\n             policies; this
    is out of scope for this module.\";\n          uses common-alarm-parameters;\n
    \         leaf time-created {\n            type yang:date-and-time;\n            mandatory
    true;\n            description\n              \"The timestamp when this alarm
    entry was created.  This\n               represents the first time the alarm appeared;
    it can\n               also represent that the alarm reappeared after a purge.\n
    \              Further state changes of the same alarm do not change\n               this
    leaf; these changes will update the 'last-changed'\n               leaf.\";\n
    \         }\n          uses resource-alarm-parameters;\n          list operator-state-change
    {\n            if-feature \"operator-actions\";\n            key \"time\";\n            description\n
    \             \"This list is used by operators to indicate the state of\n               human
    intervention on an alarm.  For example, if an\n               operator has seen
    an alarm, the operator can add a new\n               item to this list indicating
    that the alarm is\n               acknowledged.\";\n            uses operator-parameters;\n
    \         }\n          action set-operator-state {\n            if-feature \"operator-actions\";\n
    \           description\n              \"This is a means for the operator to indicate
    the level\n               of human intervention on an alarm.\";\n            input
    {\n              leaf state {\n                type writable-operator-state;\n
    \               mandatory true;\n                description\n                  \"Set
    this operator state.\";\n              }\n              leaf text {\n                type
    string;\n                description\n                  \"Additional optional
    textual information.\";\n              }\n            }\n          }\n          notification
    operator-action {\n            if-feature \"operator-actions\";\n            description\n
    \             \"This notification is used to report that an operator\n               acted
    upon an alarm.\";\n            uses operator-parameters;\n          }\n        }\n
    \       action purge-alarms {\n          description\n            \"This operation
    requests that the server delete entries\n             from the alarm list according
    to the supplied criteria.\n             Typically, this operation is used to delete
    alarms that\n             are in closed operator state and older than a specified\n
    \            time.\n             The number of purged alarms is returned as an
    output\n             parameter.\";\n          input {\n            uses filter-input;\n
    \         }\n          output {\n            leaf purged-alarms {\n              type
    uint32;\n              description\n                \"Number of purged alarms.\";\n
    \           }\n          }\n        }\n        action compress-alarms {\n          if-feature
    \"alarm-history\";\n          description\n            \"This operation requests
    that the server compress\n             entries in the alarm list by removing all
    but the\n             latest 'status-change' entry for all matching alarms.\n
    \            Conditions in the input are logically ANDed.  If no\n             input
    condition is given, all alarms are compressed.\";\n          input {\n            leaf
    resource {\n              type resource-match;\n              description\n                \"Compress
    the alarms matching this resource.\";\n            }\n            leaf alarm-type-id
    {\n              type leafref {\n                path \"/alarms/alarm-list/alarm/alarm-type-id\";\n
    \               require-instance false;\n              }\n              description\n
    \               \"Compress alarms with this 'alarm-type-id'.\";\n            }\n
    \           leaf alarm-type-qualifier {\n              type leafref {\n                path
    \"/alarms/alarm-list/alarm/alarm-type-qualifier\";\n                require-instance
    false;\n              }\n              description\n                \"Compress
    the alarms with this\n                 'alarm-type-qualifier'.\";\n            }\n
    \         }\n          output {\n            leaf compressed-alarms {\n              type
    uint32;\n              description\n                \"Number of compressed alarm
    entries.\";\n            }\n          }\n        }\n      }\n      container shelved-alarms
    {\n        if-feature \"alarm-shelving\";\n        config false;\n        description\n
    \         \"The shelved alarms.  Alarms appear here if they match the\n           criteria
    in /alarms/control/alarm-shelving.  This list does\n           not generate any
    notifications.  The list represents alarms\n           that are considered not
    relevant by the operator.  Alarms in\n           this list have an 'operator-state'
    of 'shelved'.  This\n           cannot be changed.\";\n        leaf number-of-shelved-alarms
    {\n          type yang:gauge32;\n          description\n            \"This object
    shows the total number of current\n             alarms, i.e., the total number
    of entries\n             in the alarm list.\";\n        }\n        leaf shelved-alarms-last-changed
    {\n          type yang:date-and-time;\n          description\n            \"A
    timestamp when the shelved-alarm list was last changed.\n             The value
    can be used by a manager to initiate an alarm\n             resynchronization
    procedure.\";\n        }\n        list shelved-alarm {\n          key \"resource
    alarm-type-id alarm-type-qualifier\";\n          description\n            \"The
    list of shelved alarms.  Shelved alarms can only be\n             updated from
    the underlying resource; no operator actions\n             are supported.\";\n
    \         uses common-alarm-parameters;\n          leaf shelf-name {\n            type
    leafref {\n              path \"/alarms/control/alarm-shelving/shelf/name\";\n
    \             require-instance false;\n            }\n            description\n
    \             \"The name of the shelf.\";\n          }\n          uses resource-alarm-parameters;\n
    \         list operator-state-change {\n            if-feature \"operator-actions\";\n
    \           key \"time\";\n            description\n              \"This list
    is used by operators to indicate the state of\n               human intervention
    on an alarm.  For shelved alarms, the\n               system has set the list
    item in the list to 'shelved'.\";\n            uses operator-parameters;\n          }\n
    \       }\n        action purge-shelved-alarms {\n          description\n            \"This
    operation requests that the server delete entries from\n             the shelved-alarm
    list according to the supplied criteria.\n             In the shelved-alarm list,
    it makes sense to delete alarms\n             that are not relevant anymore.\n
    \            The number of purged alarms is returned as an output\n             parameter.\";\n
    \         input {\n            uses filter-input;\n          }\n          output
    {\n            leaf purged-alarms {\n              type uint32;\n              description\n
    \               \"Number of purged alarms.\";\n            }\n          }\n        }\n
    \       action compress-shelved-alarms {\n          if-feature \"alarm-history\";\n
    \         description\n            \"This operation requests that the server compress
    entries\n             in the shelved-alarm list by removing all but the latest\n
    \            'status-change' entry for all matching shelved alarms.\n             Conditions
    in the input are logically ANDed.  If no input\n             condition is given,
    all alarms are compressed.\";\n          input {\n            leaf resource {\n
    \             type leafref {\n                path \"/alarms/shelved-alarms/shelved-alarm/resource\";\n
    \               require-instance false;\n              }\n              description\n
    \               \"Compress the alarms with this resource.\";\n            }\n
    \           leaf alarm-type-id {\n              type leafref {\n                path
    \"/alarms/shelved-alarms/shelved-alarm\"\n                   + \"/alarm-type-id\";\n
    \               require-instance false;\n              }\n              description\n
    \               \"Compress alarms with this 'alarm-type-id'.\";\n            }\n
    \           leaf alarm-type-qualifier {\n              type leafref {\n                path
    \"/alarms/shelved-alarms/shelved-alarm\"\n                   + \"/alarm-type-qualifier\";\n
    \               require-instance false;\n              }\n              description\n
    \               \"Compress the alarms with this\n                 'alarm-type-qualifier'.\";\n
    \           }\n          }\n          output {\n            leaf compressed-alarms
    {\n              type uint32;\n              description\n                \"Number
    of compressed alarm entries.\";\n            }\n          }\n        }\n      }\n
    \     list alarm-profile {\n        if-feature \"alarm-profile\";\n        key
    \"alarm-type-id alarm-type-qualifier-match resource\";\n        ordered-by user;\n
    \       description\n          \"This list is used to assign further information
    or\n           configuration for each alarm type.  This module supports a\n           mechanism
    where the client can override the system-default\n           alarm severity levels.
    \ The 'alarm-profile' is also a useful\n           augmentation point for specific
    additions to alarm types.\";\n        leaf alarm-type-id {\n          type alarm-type-id;\n
    \         description\n            \"The alarm type identifier to match.\";\n
    \       }\n        leaf alarm-type-qualifier-match {\n          type string;\n
    \         description\n            \"An XML Schema regular expression that is
    used to match the\n             alarm type qualifier.\";\n          reference\n
    \           \"XML Schema Part 2: Datatypes Second Edition,\n               World
    Wide Web Consortium Recommendation\n               REC-xmlschema-2-20041028\";\n
    \       }\n        leaf resource {\n          type resource-match;\n          description\n
    \           \"Specifies which resources to match.\";\n        }\n        leaf
    description {\n          type string;\n          mandatory true;\n          description\n
    \           \"A description of the alarm profile.\";\n        }\n        container
    alarm-severity-assignment-profile {\n          if-feature \"severity-assignment\";\n
    \         description\n            \"The client can override the system-default
    severity\n             level.\";\n          reference\n            \"ITU-T Recommendation
    M.3100:\n               Generic network information model\n             ITU-T
    Recommendation M.3160:\n               Generic, protocol-neutral management information
    model\";\n          leaf-list severity-level {\n            type severity;\n            ordered-by
    user;\n            description\n              \"Specifies the configured severity
    level(s) for the\n               matching alarm.  If the alarm has several severity\n
    \              levels, the leaf-list shall be given in rising severity\n               order.
    \ The original M3100/M3160 ASAP function only\n               allows for a one-to-one
    mapping between alarm type and\n               severity, but since YANG module
    supports stateful\n               alarms, the mapping must allow for several severity\n
    \              levels.\n               Assume a high-utilization alarm type with
    two thresholds\n               with the system-default severity levels of threshold1
    =\n               warning and threshold2 = minor.  Setting this leaf-list\n               to
    (minor, major) will assign the severity levels as\n               threshold1 =
    minor and threshold2 = major\";\n          }\n        }\n      }\n    }\n    /*\n
    \    * Notifications\n     */\n    notification alarm-notification {\n      description\n
    \       \"This notification is used to report a state change for an\n         alarm.
    \ The same notification is used for reporting a newly\n         raised alarm,
    a cleared alarm, or changing the text and/or\n         severity of an existing
    alarm.\";\n      uses common-alarm-parameters;\n      uses alarm-state-change-parameters;\n
    \   }\n    notification alarm-inventory-changed {\n      description\n        \"This
    notification is used to report that the list of possible\n         alarms has
    changed.  This can happen when, for example, a new\n         software module is
    installed or a new physical card is\n         inserted.\";\n    }\n  }\n  <CODE
    ENDS>\n"
  title: 6.  Alarm YANG Module
- contents:
  - "7.  The X.733 Mapping Module\n   Many alarm systems are based on the X.733 [X.733]
    and X.736 [X.736]\n   alarm standards.  This module \"ietf-alarms-x733\" augments
    the alarm\n   inventory, the alarm lists, and the alarm notification with X.733
    and\n   X.736 parameters.\n   The module also supports a feature whereby the alarm
    manager can\n   configure the mapping from alarm types to X.733 \"event-type\"
    and\n   \"probable-cause\" parameters.  This might be needed when the default\n
    \  mapping provided by the system is in conflict with other management\n   systems
    or not considered correct.\n   Note that the term \"resource\" in this document
    is synonymous to the\n   ITU term \"managed object\".\n   This YANG module references
    [RFC6991], [X.721], [X.733], and [X.736].\n   <CODE BEGINS> file \"ietf-alarms-x733@2019-09-11.yang\"\n
    \  module ietf-alarms-x733 {\n     yang-version 1.1;\n     namespace \"urn:ietf:params:xml:ns:yang:ietf-alarms-x733\";\n
    \    prefix x733;\n     import ietf-alarms {\n       prefix al;\n     }\n     import
    ietf-yang-types {\n       prefix yang;\n       reference\n         \"RFC 6991:
    Common YANG Data Types\";\n     }\n     organization\n       \"IETF CCAMP Working
    Group\";\n     contact\n       \"WG Web:   <https://trac.ietf.org/trac/ccamp>\n
    \       WG List:  <mailto:ccamp@ietf.org>\n        Editor:   Stefan Vallin\n                  <mailto:stefan@wallan.se>\n
    \       Editor:   Martin Bjorklund\n                  <mailto:mbj@tail-f.com>\";\n
    \    description\n       \"This module augments the ietf-alarms module with X.733
    alarm\n        parameters.\n        The following structures are augmented with
    the X.733 event type\n        and probable cause:\n         1) alarms/alarm-inventory:
    all possible alarm types\n         2) alarms/alarm-list: every alarm in the system\n
    \        3) alarm-notification: notifications indicating alarm-state\n            changes\n
    \        4) alarms/shelved-alarms\n        The module also optionally allows the
    alarm-management system\n        to configure the mapping from the ietf-alarms'
    alarm keys\n        to the ITU tuple (event-type, probable-cause).\n        The
    mapping does not include a corresponding problem value\n        specific to X.733.
    \ The recommendation is to use the\n        'alarm-type-qualifier' leaf, which
    serves the same purpose.\n        The module uses an integer and a corresponding
    string for\n        probable cause instead of a globally defined enumeration,
    in\n        order to be able to manage conflicting enumeration definitions.\n
    \       A single globally defined enumeration is challenging to\n        maintain.\n
    \       The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL\n        NOT',
    'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',\n        'MAY', and
    'OPTIONAL' in this document are to be interpreted as\n        described in BCP
    14 (RFC 2119) (RFC 8174) when, and only when,\n        they appear in all capitals,
    as shown here.\n        Copyright (c) 2019 IETF Trust and the persons identified
    as\n        authors of the code.  All rights reserved.\n        Redistribution
    and use in source and binary forms, with or\n        without modification, is
    permitted pursuant to, and subject to\n        the license terms contained in,
    the Simplified BSD License set\n        forth in Section 4.c of the IETF Trust's
    Legal Provisions\n        Relating to IETF Documents\n        (https://trustee.ietf.org/license-info).\n
    \       This version of this YANG module is part of RFC 8632; see\n        the
    RFC itself for full legal notices.\";\n     reference\n       \"ITU-T Recommendation
    X.733: Information Technology\n          - Open Systems Interconnection\n          -
    System Management: Alarm Reporting Function\";\n     revision 2019-09-11 {\n       description\n
    \        \"Initial revision.\";\n       reference\n         \"RFC 8632: A YANG
    Data Model for Alarm Management\";\n     }\n     /*\n      * Features\n      */\n
    \    feature configure-x733-mapping {\n       description\n         \"The system
    supports configurable X733 mapping from\n          the ietf-alarms' alarm-type
    to X733 event-type\n          and probable-cause.\";\n     }\n     /*\n      *
    Typedefs\n      */\n     typedef event-type {\n       type enumeration {\n         enum
    other {\n           value 1;\n           description\n             \"None of the
    below.\";\n         }\n         enum communications-alarm {\n           value
    2;\n           description\n             \"An alarm of this type is principally
    associated with the\n              procedures and/or processes required to convey\n
    \             information from one point to another.\";\n         }\n         enum
    quality-of-service-alarm {\n           value 3;\n           description\n             \"An
    alarm of this type is principally associated with a\n              degradation
    in the quality of a service.\";\n         }\n         enum processing-error-alarm
    {\n           value 4;\n           description\n             \"An alarm of this
    type is principally associated with a\n              software or processing fault.\";\n
    \        }\n         enum equipment-alarm {\n           value 5;\n           description\n
    \            \"An alarm of this type is principally associated with an\n              equipment
    fault.\";\n         }\n         enum environmental-alarm {\n           value 6;\n
    \          description\n             \"An alarm of this type is principally associated
    with a\n              condition relating to an enclosure in which the equipment\n
    \             resides.\";\n         }\n         enum integrity-violation {\n           value
    7;\n           description\n             \"An indication that information may
    have been illegally\n              modified, inserted, or deleted.\";\n         }\n
    \        enum operational-violation {\n           value 8;\n           description\n
    \            \"An indication that the provision of the requested service\n              was
    not possible due to the unavailability, malfunction,\n              or incorrect
    invocation of the service.\";\n         }\n         enum physical-violation {\n
    \          value 9;\n           description\n             \"An indication that
    a physical resource has been violated\n              in a way that suggests a
    security attack.\";\n         }\n         enum security-service-or-mechanism-violation
    {\n           value 10;\n           description\n             \"An indication
    that a security attack has been detected by\n              a security service
    or mechanism.\";\n         }\n         enum time-domain-violation {\n           value
    11;\n           description\n             \"An indication that an event has occurred
    at an unexpected\n              or prohibited time.\";\n         }\n       }\n
    \      description\n         \"The event types as defined by X.733 and X.736.\";\n
    \      reference\n         \"ITU-T Recommendation X.733: Information Technology\n
    \           - Open Systems Interconnection\n            - System Management: Alarm
    Reporting Function\n          ITU-T Recommendation X.736: Information Technology\n
    \           - Open Systems Interconnection\n            - System Management: Security
    Alarm Reporting Function\";\n     }\n     typedef trend {\n       type enumeration
    {\n         enum less-severe {\n           description\n             \"There is
    at least one outstanding alarm of a\n              severity higher (more severe)
    than that in the\n              current alarm.\";\n         }\n         enum no-change
    {\n           description\n             \"The Perceived severity reported in the
    current\n              alarm is the same as the highest (most severe)\n              of
    any of the outstanding alarms\";\n         }\n         enum more-severe {\n           description\n
    \            \"The Perceived severity in the current alarm is\n              higher
    (more severe) than that reported in any\n              of the outstanding alarms.\";\n
    \        }\n       }\n       description\n         \"This type is used to describe
    the\n          severity trend of the alarming resource.\";\n       reference\n
    \        \"ITU-T Recommendation X.721: Information Technology\n             -
    Open Systems Interconnection\n             - Structure of management information:\n
    \              Definition of management information\n               Module Attribute-ASN1Module\";\n
    \    }\n     typedef value-type {\n       type union {\n         type int64;\n
    \        type uint64;\n         type decimal64 {\n           fraction-digits 2;\n
    \        }\n       }\n       description\n         \"A generic union type to match
    the ITU choice of\n          integer and real.\";\n     }\n     /*\n      * Groupings\n
    \     */\n     grouping x733-alarm-parameters {\n       description\n         \"Common
    X.733 parameters for alarms.\";\n       leaf event-type {\n         type event-type;\n
    \        description\n           \"The X.733/X.736 event type for this alarm.\";\n
    \      }\n       leaf probable-cause {\n         type uint32;\n         description\n
    \          \"The X.733 probable cause for this alarm.\";\n       }\n       leaf
    probable-cause-string {\n         type string;\n         description\n           \"The
    user-friendly string matching\n            the probable cause integer value.  The
    string\n            SHOULD match the X.733 enumeration.  For example,\n            value
    27 is 'localNodeTransmissionError'.\";\n       }\n       container threshold-information
    {\n         description\n           \"This parameter shall be present when the
    alarm\n            is a result of crossing a threshold. \";\n         leaf triggered-threshold
    {\n           type string;\n           description\n             \"The identifier
    of the threshold attribute that\n              caused the notification.\";\n         }\n
    \        leaf observed-value {\n           type value-type;\n           description\n
    \            \"The value of the gauge or counter that crossed\n              the
    threshold.  This may be different from the\n              threshold value if,
    for example, the gauge may\n              only take on discrete values.\";\n         }\n
    \        choice threshold-level {\n           description\n             \"In the
    case of a gauge, the threshold level specifies\n              a pair of threshold
    values: the first is the value\n              of the crossed threshold, and the
    second is its\n              corresponding hysteresis; in the case of a counter,\n
    \             the threshold level specifies only the threshold\n              value.\";\n
    \          case up {\n             leaf up-high {\n               type value-type;\n
    \              description\n                 \"The going-up threshold for raising
    the alarm.\";\n             }\n             leaf up-low {\n               type
    value-type;\n               description\n                 \"The going-down threshold
    for clearing the alarm.\n                  This is used for hysteresis functions
    for gauges.\";\n             }\n           }\n           case down {\n             leaf
    down-low {\n               type value-type;\n               description\n                 \"The
    going-down threshold for raising the alarm.\";\n             }\n             leaf
    down-high {\n               type value-type;\n               description\n                 \"The
    going-up threshold for clearing the alarm.\n                  This is used for
    hysteresis functions for gauges.\";\n             }\n           }\n         }\n
    \        leaf arm-time {\n           type yang:date-and-time;\n           description\n
    \            \"For a gauge threshold, it's the time at which the\n              threshold
    was last re-armed; namely, it's the time after\n              the previous threshold
    crossing at which the hysteresis\n              value of the threshold was exceeded,
    thus again permitting\n              the generation of notifications when the
    threshold is\n              crossed.  For a counter threshold, it's the later
    of the\n              time at which the threshold offset was last applied or the\n
    \             counter was last initialized (for resettable counters).\";\n         }\n
    \      }\n       list monitored-attributes {\n         uses attribute;\n         key
    \"id\";\n         description\n           \"The Monitored attributes parameter,
    when present, defines\n            one or more attributes of the resource and
    their\n            corresponding values at the time of the alarm.\";\n       }\n
    \      leaf-list proposed-repair-actions {\n         type string;\n         description\n
    \          \"This parameter, when present, is used if the cause is\n            known
    and the system being managed can suggest one or\n            more solutions (such
    as switch in standby equipment,\n            retry, and replace media).\";\n       }\n
    \      leaf trend-indication {\n         type trend;\n         description\n           \"This
    parameter specifies the current severity\n            trend of the resource.  If
    present, it indicates\n            that there are one or more alarms ('outstanding\n
    \           alarms') that have not been cleared and that\n            pertain
    to the same resource as this alarm\n            ('current alarm') does.  The possible
    values are:\n              more-severe: The Perceived severity in the current\n
    \               alarm is higher (more severe) than that reported in\n                any
    of the outstanding alarms.\n              no-change: The Perceived severity reported
    in the\n                current alarm is the same as the highest (most severe)\n
    \               of any of the outstanding alarms.\n              less-severe:
    There is at least one outstanding alarm\n                of a severity higher
    (more severe) than that in the\n                current alarm.\";\n       }\n
    \      leaf backedup-status {\n         type boolean;\n         description\n
    \          \"This parameter, when present, specifies whether or not the\n            object
    emitting the alarm has been backed up; therefore, it\n            is possible
    to know whether or not services provided to the\n            user have been disrupted
    when this parameter is included.\n            The use of this field in conjunction
    with the\n            'perceived-severity' field provides information in an\n
    \           independent form to qualify the seriousness of the alarm and\n            the
    ability of the system as a whole to continue to provide\n            services.
    \ If the value of this parameter is true, it\n            indicates that the object
    emitting the alarm has been backed\n            up; if false, the object has not
    been backed up.\";\n       }\n       leaf backup-object {\n         type al:resource;\n
    \        description\n           \"This parameter SHALL be present when the 'backedup-status'\n
    \           parameter is present and has the value 'true'.  This\n            parameter
    specifies the managed object instance that is\n            providing back-up services
    for the managed object to which\n            the notification pertains.  This
    parameter is useful, for\n            example, when the back-up object is from
    a pool of objects,\n            any of which may be dynamically allocated to replace
    a\n            faulty object.\";\n       }\n       list additional-information
    {\n         key \"identifier\";\n         description\n           \"This parameter
    allows the inclusion of an additional\n            information set in the alarm.
    \ It is a series of data\n            structures, each of which contains three
    items of\n            information: an identifier, a significance indicator,\n
    \           and the problem information.\";\n         leaf identifier {\n           type
    string;\n           description\n             \"Identifies the data type of the
    information parameter.\";\n         }\n         leaf significant {\n           type
    boolean;\n           description\n             \"Set to 'true' if the receiving
    system must be able to\n              parse the contents of the information subparameter\n
    \             for the event report to be fully understood.\";\n         }\n         leaf
    information {\n           type string;\n           description\n             \"Additional
    information about the alarm.\";\n         }\n       }\n       leaf security-alarm-detector
    {\n         type al:resource;\n         description\n           \"This parameter
    identifies the detector of the security\n            alarm.\";\n       }\n       leaf
    service-user {\n         type al:resource;\n         description\n           \"This
    parameter identifies the service-user whose request\n            for service led
    to the generation of the security alarm.\";\n       }\n       leaf service-provider
    {\n         type al:resource;\n         description\n           \"This parameter
    identifies the intended service-provider\n            of the service that led
    to the generation of the security\n            alarm.\";\n       }\n       reference\n
    \        \"ITU-T Recommendation X.733: Information Technology\n            - Open
    Systems Interconnection\n            - System Management: Alarm Reporting Function\n
    \         ITU-T Recommendation X.736: Information Technology\n            - Open
    Systems Interconnection\n            - System Management: Security Alarm Reporting
    Function\";\n     }\n     grouping x733-alarm-definition-parameters {\n       description\n
    \        \"Common X.733 parameters for alarm definitions.\n          This grouping
    is used to define those alarm\n          attributes that can be mapped from the
    alarm-type\n          mechanism in the ietf-alarms module.\";\n       leaf event-type
    {\n         type event-type;\n         description\n           \"The alarm type
    has this X.733/X.736 event type.\";\n       }\n       leaf probable-cause {\n
    \        type uint32;\n         description\n           \"The alarm type has this
    X.733 probable cause value.\n            This module defines probable cause as
    an integer\n            and not as an enumeration.  The reason being that the\n
    \           primary use of probable cause is in the management\n            application
    if it is based on the X.733 standard.\n            However, most management applications
    have their own\n            defined enum definitions and merging enums from\n
    \           different systems might create conflicts.  By using\n            a
    configurable uint32, the system can be configured\n            to match the enum
    values in the management application.\";\n       }\n       leaf probable-cause-string
    {\n         type string;\n         description\n           \"This string can be
    used to give a user-friendly string\n            to the probable cause value.\";\n
    \      }\n     }\n     grouping attribute {\n       description\n         \"A
    grouping to match the ITU generic reference to\n          an attribute.\";\n       leaf
    id {\n         type al:resource;\n         description\n           \"The resource
    representing the attribute.\";\n       }\n       leaf value {\n         type string;\n
    \        description\n           \"The value represented as a string since it
    could\n            be of any type.\";\n       }\n       reference\n         \"ITU-T
    Recommendation X.721: Information Technology\n             - Open Systems Interconnection\n
    \            - Structure of management information:\n               Definition
    of management information\n          Module Attribute-ASN1Module\";\n     }\n
    \    /*\n      * Add X.733 parameters to the alarm definitions, alarms,\n      *
    and notification.\n      */\n     augment \"/al:alarms/al:alarm-inventory/al:alarm-type\"
    {\n       description\n         \"Augment X.733 mapping information to the alarm
    inventory.\";\n       uses x733-alarm-definition-parameters;\n     }\n     /*\n
    \     * Add X.733 configurable mapping.\n      */\n     augment \"/al:alarms/al:control\"
    {\n       description\n         \"Add X.733 mapping capabilities. \";\n       list
    x733-mapping {\n         if-feature \"configure-x733-mapping\";\n         key
    \"alarm-type-id alarm-type-qualifier-match\";\n         description\n           \"This
    list allows a management application to control the\n            X.733 mapping
    for all alarm types in the system.  Any entry\n            in this list will allow
    the alarm manager to override the\n            default X.733 mapping in the system,
    and the final mapping\n            will be shown in the alarm inventory.\";\n
    \        leaf alarm-type-id {\n           type al:alarm-type-id;\n           description\n
    \            \"Map the alarm type with this alarm type identifier.\";\n         }\n
    \        leaf alarm-type-qualifier-match {\n           type string;\n           description\n
    \            \"A W3C regular expression that is used when mapping an\n              alarm
    type and alarm-type-qualifier to X.733 parameters.\";\n         }\n         uses
    x733-alarm-definition-parameters;\n       }\n     }\n     augment \"/al:alarms/al:alarm-list/al:alarm\"
    {\n       description\n         \"Augment X.733 information to the alarm.\";\n
    \      uses x733-alarm-parameters;\n     }\n     augment \"/al:alarms/al:shelved-alarms/al:shelved-alarm\"
    {\n       description\n         \"Augment X.733 information to the alarm.\";\n
    \      uses x733-alarm-parameters;\n     }\n     augment \"/al:alarm-notification\"
    {\n       description\n         \"Augment X.733 information to the alarm notification.\";\n
    \      uses x733-alarm-parameters;\n     }\n   }\n   <CODE ENDS>\n"
  title: 7.  The X.733 Mapping Module
- contents:
  - "8.  IANA Considerations\n   This document registers two URIs in the \"IETF XML
    Registry\"\n   [RFC3688].  Following the format in RFC 3688, the following\n   registrations
    have been made.\n       URI: urn:ietf:params:xml:ns:yang:ietf-alarms\n       Registrant
    Contact: The IESG.\n       XML: N/A; the requested URI is an XML namespace.\n
    \      URI: urn:ietf:params:xml:ns:yang:ietf-alarms-x733\n       Registrant Contact:
    The IESG.\n       XML: N/A; the requested URI is an XML namespace.\n   This document
    registers two YANG modules in the \"YANG Module Names\"\n   registry [RFC6020].\n
    \      name:        ietf-alarms\n       namespace:   urn:ietf:params:xml:ns:yang:ietf-alarms\n
    \      prefix:      al\n       reference:   RFC 8632\n       name:        ietf-alarms-x733\n
    \      namespace:   urn:ietf:params:xml:ns:yang:ietf-alarms-x733\n       prefix:
    \     x733\n       reference:   RFC 8632\n"
  title: 8.  IANA Considerations
- contents:
  - "9.  Security Considerations\n   The YANG modules specified in this document define
    a schema for data\n   that is designed to be accessed via network management protocols
    such\n   as NETCONF [RFC6241] or RESTCONF [RFC8040].  The lowest NETCONF layer\n
    \  is the secure transport layer, and the mandatory-to-implement secure\n   transport
    is Secure Shell (SSH) [RFC6242].  The lowest RESTCONF layer\n   is HTTPS, and
    the mandatory-to-implement secure transport is TLS\n   [RFC8446].\n   The Network
    Configuration Access Control Model (NACM) [RFC8341]\n   provides the means to
    restrict access for particular NETCONF or\n   RESTCONF users to a preconfigured
    subset of all available NETCONF or\n   RESTCONF protocol operations and content.\n
    \  The list of alarms itself may be potentially sensitive from a\n   security
    perspective, in that it potentially gives an attacker an\n   authoritative picture
    of the (broken) state of the network.\n   There are a number of data nodes defined
    in the YANG modules that are\n   writable/creatable/deletable (i.e., config true,
    which is the\n   default).  These data nodes may be considered sensitive or vulnerable\n
    \  in some network environments.  Write operations (e.g., edit-config)\n   to
    these data nodes without proper protection can have a negative\n   effect on network
    operations.  These are the subtrees and data nodes\n   in the \"ietf-alarms\"
    module and their sensitivity/vulnerability:\n   \"/alarms/control/notify-status-changes\":
    \ This leaf controls whether\n      an alarm should notify based on various state
    changes.\n      Unauthorized access to this leaf could have a negative impact
    on\n      operational procedures relying on fine-grained alarm-state change\n
    \     reporting.\n   \"/alarms/control/alarm-shelving/shelf\":  This list controls
    the\n      shelving (blocking) of alarms.  Unauthorized access to this list\n
    \     could jeopardize the alarm-management procedures, since these\n      alarms
    will not be notified or be part of the alarm list.\n   \"/alarms/control/alarm-profile/alarm-severity-assignment-profile\":\n
    \     This list controls the severity levels of an alarm.  Unauthorized\n      access
    to this could, for example, downgrade the severity of an\n      alarm and thereby
    have a negative impact on the alarm-monitoring\n      process.\n   Some of the
    RPC operations in this YANG module may be considered\n   sensitive or vulnerable
    in some network environments.  It is thus\n   important to control access to these
    operations.  These are the\n   operations and their sensitivity/vulnerability:\n
    \  \"/alarms/alarm-list/purge-alarms\":  This action deletes alarms from\n      the
    alarm list.  Unauthorized use of this action could jeopardize\n      the alarm-management
    procedures since the deleted alarms may be\n      vital for the alarm-management
    application.\n   \"/alarms/alarm-list/alarm/set-operator-state\":  This action
    can be\n      used by the operator to indicate the level of human intervention\n
    \     on an alarm.  Unauthorized use of this action could result in\n      alarms
    being ignored by operators.\n"
  title: 9.  Security Considerations
- contents:
  - '10.  References

    '
  - contents:
    - "10.1.  Normative References\n   [M.3100]   International Telecommunication
      Union, \"Generic network\n              information model\", ITU-T Recommendation
      M.3100, April\n              2005, <https://www.itu.int/rec/T-REC-M.3100-200504-I/en>.\n
      \  [M.3160]   International Telecommunication Union, \"Generic,\n              protocol-neutral
      management information model\",\n              ITU-T Recommendation M.3100,
      November 2008,\n              <https://www.itu.int/rec/T-REC-M.3160-200811-I>.\n
      \  [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n
      \             <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC3688]  Mealling,
      M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n              DOI 10.17487/RFC3688,
      January 2004,\n              <https://www.rfc-editor.org/info/rfc3688>.\n   [RFC6020]
      \ Bjorklund, M., Ed., \"YANG - A Data Modeling Language for\n              the
      Network Configuration Protocol (NETCONF)\", RFC 6020,\n              DOI 10.17487/RFC6020,
      October 2010,\n              <https://www.rfc-editor.org/info/rfc6020>.\n   [RFC6241]
      \ Enns, R., Ed., Bjorklund, M., Ed., Schoenwaelder, J., Ed.,\n              and
      A. Bierman, Ed., \"Network Configuration Protocol\n              (NETCONF)\",
      RFC 6241, DOI 10.17487/RFC6241, June 2011,\n              <https://www.rfc-editor.org/info/rfc6241>.\n
      \  [RFC6242]  Wasserman, M., \"Using the NETCONF Protocol over Secure\n              Shell
      (SSH)\", RFC 6242, DOI 10.17487/RFC6242, June 2011,\n              <https://www.rfc-editor.org/info/rfc6242>.\n
      \  [RFC6991]  Schoenwaelder, J., Ed., \"Common YANG Data Types\",\n              RFC
      6991, DOI 10.17487/RFC6991, July 2013,\n              <https://www.rfc-editor.org/info/rfc6991>.\n
      \  [RFC7950]  Bjorklund, M., Ed., \"The YANG 1.1 Data Modeling Language\",\n
      \             RFC 7950, DOI 10.17487/RFC7950, August 2016,\n              <https://www.rfc-editor.org/info/rfc7950>.\n
      \  [RFC8040]  Bierman, A., Bjorklund, M., and K. Watsen, \"RESTCONF\n              Protocol\",
      RFC 8040, DOI 10.17487/RFC8040, January 2017,\n              <https://www.rfc-editor.org/info/rfc8040>.\n
      \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8341]  Bierman, A. and M.
      Bjorklund, \"Network Configuration\n              Access Control Model\", STD
      91, RFC 8341,\n              DOI 10.17487/RFC8341, March 2018,\n              <https://www.rfc-editor.org/info/rfc8341>.\n
      \  [RFC8348]  Bierman, A., Bjorklund, M., Dong, J., and D. Romascanu, \"A\n
      \             YANG Data Model for Hardware Management\", RFC 8348,\n              DOI
      10.17487/RFC8348, March 2018,\n              <https://www.rfc-editor.org/info/rfc8348>.\n
      \  [RFC8446]  Rescorla, E., \"The Transport Layer Security (TLS) Protocol\n
      \             Version 1.3\", RFC 8446, DOI 10.17487/RFC8446, August 2018,\n
      \             <https://www.rfc-editor.org/info/rfc8446>.\n   [X.721]    International
      Telecommunication Union, \"Information\n              technology - Open Systems
      Interconnection - Structure of\n              management information: Definition
      of management\n              information\", ITU-T Recommendation X.721, February
      1992,\n              <https://www.itu.int/rec/T-REC-X.721-199202-I/en>.\n   [X.733]
      \   International Telecommunication Union, \"Information\n              technology
      - Open Systems Interconnection - Systems\n              Management: Alarm reporting
      function\",\n              ITU-T Recommendation X.733, February 1992,\n              <https://www.itu.int/rec/T-REC-X.733-199202-I/en>.\n
      \  [XSD-TYPES]\n              Malhotra, A. and P. Biron, \"XML Schema Part 2:
      Datatypes\n              Second Edition\", World Wide Web Consortium Recommendation\n
      \             REC-xmlschema-2-20041028, October 2004,\n              <http://www.w3.org/TR/2004/REC-xmlschema-2-20041028>.\n"
    title: 10.1.  Normative References
  - contents:
    - "10.2.  Informative References\n   [ALARMIRP] 3GPP, \"Telecommunication management;
      Fault Management;\n              Part 2: Alarm Integration Reference Point (IRP):\n
      \             Information Service (IS)\", 3GPP TS 32.111-2, March 2005,\n              <http://www.3gpp.org/ftp/Specs/html-info/32111-2.htm>.\n
      \  [ALARMSEM] Wallin, S., Leijon, V., Nordlander, J., and N. Bystedt,\n              \"The
      semantics of alarm definitions: enabling systematic\n              reasoning
      about alarms\", International Journal of Network\n              Management,
      Volume 22, Issue 3, May 2012,\n              <http://dx.doi.org/10.1002/nem.800>.\n
      \  [EEMUA]    \"Alarm systems: a guide to design, management and\n              procurement\",
      EEMUA Publication No. 191, Engineering\n              Equipment and Materials
      Users Association, Second Edition,\n              2007.\n   [G.7710]   International
      Telecommunication Union, \"SERIES G:\n              TRANSMISSION SYSTEMS AND
      MEDIA, DIGITAL SYSTEMS AND\n              NETWORKS - Data over Transport - Generic
      aspects -\n              Transport network control aspects; Common equipment\n
      \             management function requirements\", ITU-T\n              Recommendation
      G.7710/Y.1701, Amendment 1, November 2012.\n   [ISA182]   International Society
      of Automation, \"Management of Alarm\n              Systems for the Process
      Industries\", ANSI/ISA - 18.2-2016,\n              March 2016.\n   [RFC3877]
      \ Chisholm, S. and D. Romascanu, \"Alarm Management\n              Information
      Base (MIB)\", RFC 3877, DOI 10.17487/RFC3877,\n              September 2004,
      <https://www.rfc-editor.org/info/rfc3877>.\n   [RFC8340]  Bjorklund, M. and
      L. Berger, Ed., \"YANG Tree Diagrams\",\n              BCP 215, RFC 8340, DOI
      10.17487/RFC8340, March 2018,\n              <https://www.rfc-editor.org/info/rfc8340>.\n
      \  [X.736]    International Telecommunication Union, \"Information\n              technology
      - Open Systems Interconnection - Systems\n              Management: Security
      alarm reporting function\",\n              ITU-T Recommendation X.736, January
      1992,\n              <https://www.itu.int/rec/T-REC-X.736-199201-I/en>.\n   [YANG-INSTANCE]\n
      \             Lengyel, B. and B. Claise, \"YANG Instance Data File\n              Format\",
      Work in Progress, draft-ietf-netmod-yang-\n              instance-file-format-02,
      August 2019.\n"
    title: 10.2.  Informative References
  title: 10.  References
- contents:
  - "Appendix A.  Vendor-Specific Alarm Types Example\n   This example shows how to
    define alarm types in a vendor-specific\n   module.  In this case, the vendor
    \"xyz\" has chosen to define top-\n   level identities according to X.733 event
    types.\n   module example-xyz-alarms {\n     namespace \"urn:example:xyz-alarms\";\n
    \    prefix xyz-al;\n     import ietf-alarms {\n       prefix al;\n     }\n     identity
    xyz-alarms {\n       base al:alarm-type-id;\n     }\n     identity communications-alarm
    {\n       base xyz-alarms;\n     }\n     identity quality-of-service-alarm {\n
    \      base xyz-alarms;\n     }\n     identity processing-error-alarm {\n       base
    xyz-alarms;\n     }\n     identity equipment-alarm {\n       base xyz-alarms;\n
    \    }\n     identity environmental-alarm {\n       base xyz-alarms;\n     }\n
    \    // communications alarms\n     identity link-alarm {\n       base communications-alarm;\n
    \    }\n     // QoS alarms\n     identity high-jitter-alarm {\n       base quality-of-service-alarm;\n
    \    }\n   }\n"
  title: Appendix A.  Vendor-Specific Alarm Types Example
- contents:
  - "Appendix B.  Alarm Inventory Example\n   This shows an alarm inventory: one alarm
    type is defined only with\n   the identifier and another is dynamically configured.
    \ In the latter\n   case, a digital input has been connected to a smoke detector;\n
    \  therefore, the \"alarm-type-qualifier\" is set to \"smoke-detector\" and\n
    \  the \"alarm-type-id\" to \"environmental-alarm\".\n   <alarms xmlns=\"urn:ietf:params:xml:ns:yang:ietf-alarms\"\n
    \          xmlns:xyz-al=\"urn:example:xyz-alarms\"\n           xmlns:dev=\"urn:example:device\">\n
    \    <alarm-inventory>\n       <alarm-type>\n         <alarm-type-id>xyz-al:link-alarm</alarm-type-id>\n
    \        <alarm-type-qualifier/>\n         <resource>\n           /dev:interfaces/dev:interface\n
    \        </resource>\n         <will-clear>true</will-clear>\n         <description>\n
    \          Link failure; operational state down but admin state up\n         </description>\n
    \      </alarm-type>\n       <alarm-type>\n         <alarm-type-id>xyz-al:environmental-alarm</alarm-type-id>\n
    \        <alarm-type-qualifier>smoke-alarm</alarm-type-qualifier>\n         <will-clear>true</will-clear>\n
    \        <description>\n           Connected smoke detector to digital input\n
    \        </description>\n       </alarm-type>\n     </alarm-inventory>\n   </alarms>\n"
  title: Appendix B.  Alarm Inventory Example
- contents:
  - "Appendix C.  Alarm List Example\n   In this example, we show an alarm that has
    toggled [major, clear,\n   major].  An operator has acknowledged the alarm.\n
    \  <alarms xmlns=\"urn:ietf:params:xml:ns:yang:ietf-alarms\"\n           xmlns:xyz-al=\"urn:example:xyz-alarms\"\n
    \          xmlns:dev=\"urn:example:device\">\n     <alarm-list>\n       <number-of-alarms>1</number-of-alarms>\n
    \      <last-changed>2018-04-08T08:39:50.00Z</last-changed>\n       <alarm>\n
    \        <resource>\n           /dev:interfaces/dev:interface[name='FastEthernet1/0']\n
    \        </resource>\n         <alarm-type-id>xyz-al:link-alarm</alarm-type-id>\n
    \        <alarm-type-qualifier></alarm-type-qualifier>\n         <time-created>2018-04-08T08:20:10.00Z</time-created>\n
    \        <is-cleared>false</is-cleared>\n         <alt-resource>1.3.6.1.2.1.2.2.1.1.17</alt-resource>\n
    \        <last-raised>2018-04-08T08:39:40.00Z</last-raised>\n         <last-changed>2018-04-08T08:39:50.00Z</last-changed>\n
    \        <perceived-severity>major</perceived-severity>\n         <alarm-text>\n
    \          Link operationally down but administratively up\n         </alarm-text>\n
    \        <status-change>\n           <time>2018-04-08T08:39:40.00Z</time>\n           <perceived-severity>major</perceived-severity>\n
    \          <alarm-text>\n             Link operationally down but administratively
    up\n           </alarm-text>\n         </status-change>\n         <status-change>\n
    \          <time>2018-04-08T08:30:00.00Z</time>\n           <perceived-severity>cleared</perceived-severity>\n
    \          <alarm-text>\n             Link operationally up and administratively
    up\n           </alarm-text>\n         </status-change>\n         <status-change>\n
    \          <time>2018-04-08T08:20:10.00Z</time>\n           <perceived-severity>major</perceived-severity>\n
    \          <alarm-text>\n             Link operationally down but administratively
    up\n           </alarm-text>\n         </status-change>\n         <operator-state-change>\n
    \          <time>2018-04-08T08:39:50.00Z</time>\n           <state>ack</state>\n
    \          <operator>joe</operator>\n           <text>Will investigate, ticket
    TR764999</text>\n         </operator-state-change>\n       </alarm>\n     </alarm-list>\n
    \  </alarms>\n"
  title: Appendix C.  Alarm List Example
- contents:
  - "Appendix D.  Alarm Shelving Example\n   This example shows how to shelve alarms.
    \ We shelve alarms related to\n   the smoke detectors, since they are being installed
    and tested.  We\n   also shelve all alarms from FastEthernet1/0.\n   <alarms xmlns=\"urn:ietf:params:xml:ns:yang:ietf-alarms\"\n
    \          xmlns:xyz-al=\"urn:example:xyz-alarms\"\n           xmlns:dev=\"urn:example:device\">\n
    \    <control>\n       <alarm-shelving>\n         <shelf>\n           <name>FE10</name>\n
    \          <resource>\n             /dev:interfaces/dev:interface[name='FastEthernet1/0']\n
    \          </resource>\n         </shelf>\n         <shelf>\n           <name>detectortest</name>\n
    \          <alarm-type>\n             <alarm-type-id>\n               xyz-al:environmental-alarm\n
    \            </alarm-type-id>\n             <alarm-type-qualifier-match>\n               smoke-alarm\n
    \            </alarm-type-qualifier-match>\n           </alarm-type>\n         </shelf>\n
    \      </alarm-shelving>\n     </control>\n   </alarms>\n"
  title: Appendix D.  Alarm Shelving Example
- contents:
  - "Appendix E.  X.733 Mapping Example\n   This example shows how to map a dynamic
    alarm type (alarm-type-\n   id=environmental-alarm, alarm-type-qualifier=smoke-alarm)
    to the\n   corresponding X.733 \"event-type\" and \"probable-cause\" parameters.\n
    \  <alarms xmlns=\"urn:ietf:params:xml:ns:yang:ietf-alarms\"\n           xmlns:xyz-al=\"urn:example:xyz-alarms\">\n
    \    <control>\n       <x733-mapping\n          xmlns=\"urn:ietf:params:xml:ns:yang:ietf-alarms-x733\">\n
    \        <alarm-type-id>xyz-al:environmental-alarm</alarm-type-id>\n         <alarm-type-qualifier-match>\n
    \          smoke-alarm\n         </alarm-type-qualifier-match>\n         <event-type>quality-of-service-alarm</event-type>\n
    \        <probable-cause>777</probable-cause>\n       </x733-mapping>\n     </control>\n
    \  </alarms>\n"
  title: Appendix E.  X.733 Mapping Example
- contents:
  - "Appendix F.  Relationship to Other Alarm Standards\n   This section briefly describes
    how this alarm data model relates to\n   other relevant standards.\n"
  - contents:
    - "F.1.  Definition of \"Alarm\"\n   The table below summarizes relevant definitions
      of the term \"alarm\"\n   in other alarm standards.\n   +------------+---------------------------+--------------------------+\n
      \  | Standard   | Definition                | Comment                  |\n   +------------+---------------------------+--------------------------+\n
      \  | X.733      | error: A deviation of a   | The X.733 alarm          |\n   |
      [X.733]    | system from normal        | definition is focused on |\n   |            |
      operation.  fault: The    | the notification as such |\n   |            | physical
      or algorithmic   | and not the state.       |\n   |            | cause of a
      malfunction.   | X.733 defines an alarm   |\n   |            | Faults manifest
      \          | as a deviation from a    |\n   |            | themselves as errors.
      \    | normal condition but     |\n   |            | alarm: A notification,
      of | without the requirement  |\n   |            | the form defined by this
      \ | that it needs corrective |\n   |            | function, of a specific   |
      actions.                 |\n   |            | event.  An alarm may or   |                          |\n
      \  |            | may not represent an      |                          |\n   |
      \           | error.                    |                          |\n   |            |
      \                          |                          |\n   | G.7710     | Alarms
      are indications    | The G.7710 definition is |\n   | [G.7710]   | that are
      automatically    | close to the original    |\n   |            | generated by
      a device as  | X.733 definition.        |\n   |            | a result of the
      \          |                          |\n   |            | declaration of a
      failure. |                          |\n   |            |                           |
      \                         |\n   | Alarm MIB  | Alarm: Persistent         | RFC
      3877 defines the     |\n   | [RFC3877]  | indication of a fault.    | term alarm
      as referring  |\n   |            | Fault: Lasting error or   | back to \"a deviation
      \    |\n   |            | warning condition.        | from normal operation\".
      \ |\n   |            | Error: A deviation of a   | The Alarm YANG data      |\n
      \  |            | system from normal        | model adds the           |\n   |
      \           | operation.                | requirement that it      |\n   |            |
      \                          | should require a         |\n   |            |                           |
      corrective action and    |\n   |            |                           | should
      be undesired, not |\n   |            |                           | only a deviation
      from    |\n   |            |                           | normal.  The alarm
      MIB   |\n   |            |                           | is state oriented in
      the |\n   |            |                           | same way as the Alarm    |\n
      \  |            |                           | YANG module; it focuses  |\n   |
      \           |                           | on the  \"lasting         |\n   |
      \           |                           | condition\", not the      |\n   |
      \           |                           | individual               |\n   |            |
      \                          | notifications.           |\n   |            |                           |
      \                         |\n   | ISA        | Alarm: An audible and/or  | The
      ISA standard adds an |\n   | [ISA182]   | visible means of          | important
      requirement to |\n   |            | indicating to the         | the \"deviation
      from      |\n   |            | operator an equipment     | normal condition
      state\": |\n   |            | malfunction, process      | requiring a response.
      \   |\n   |            | deviation, or abnormal    |                          |\n
      \  |            | condition requiring a     |                          |\n   |
      \           | response.                 |                          |\n   |            |
      \                          |                          |\n   | EEMUA      | An
      alarm is an event to   | This is the foundation   |\n   | [EEMUA]    | which
      an operator must    | for the definition of    |\n   |            | knowingly
      react, respond, | alarm in this document.  |\n   |            | and acknowledge
      -- not    | It focuses on the core   |\n   |            | simply acknowledge
      and    | criterion that an action |\n   |            | ignore.                   |
      is really needed.        |\n   |            |                           |                          |\n
      \  | 3GPP Alarm | 3GPP v15: An alarm        | The latest 3GPP Alarm    |\n   |
      IRP        | signifies an undesired    | IRP version uses         |\n   | [ALARMIRP]
      | condition of a resource   | literally the same alarm |\n   |            |
      (e.g., device, link) for  | definition as this alarm |\n   |            | which
      an operator action  | data model.  It is worth |\n   |            | is required.
      \ It          | noting that earlier      |\n   |            | emphasizes a key
      \         | versions used a          |\n   |            | requirement that          |
      definition not requiring |\n   |            | operators [...] should    | an
      operator action and   |\n   |            | not be informed about an  | the more-broad
      \          |\n   |            | undesired condition       | definition of deviation
      \ |\n   |            | unless it requires        | from normal condition.   |\n
      \  |            | operator action.          | The earlier version also |\n   |
      \           | 3GPP v12: alarm: abnormal | defined an alarm as a    |\n   |            |
      network entity condition, | special case of \"event\". |\n   |            |
      which categorizes an      |                          |\n   |            | event
      as a fault.         |                          |\n   |            | fault: a
      deviation of a   |                          |\n   |            | system from
      normal        |                          |\n   |            | operation, which
      may      |                          |\n   |            | result in the loss
      of     |                          |\n   |            | operational capabilities
      \ |                          |\n   |            | [...]                     |
      \                         |\n   +------------+---------------------------+--------------------------+\n
      \          Table 1: Definition of the Term \"Alarm\" in Standards\n   The evolution
      of the definition of alarm moves from focused on events\n   reporting a deviation
      from normal operation towards a definition to a\n   undesired *state* that *requires
      an operator action*.\n"
    title: F.1.  Definition of "Alarm"
  - contents:
    - "F.2.  Data Model\n   This section describes how this YANG alarm data model
      relates to\n   other standard data models.  Note well that we cover other data\n
      \  models for alarm interfaces but not other standards such as SDO-\n   specific
      alarms.\n"
    - contents:
      - "F.2.1.  X.733\n   X.733 has acted as a base for several alarm data models
        over the\n   years.  The YANG alarm data model differs in the following ways:\n
        \     X.733 models the alarm list as a list of notifications.  The YANG\n
        \     alarm data model defines the alarm list as the current alarm\n      states
        for the resources, which is generated from the state change\n      reporting
        notifications.\n      In X.733, an alarm can have the severity level \"clear\".
        \ In the\n      YANG alarm data model, \"clear\" is not a severity level;
        it is a\n      separate state of the alarm.  An alarm can have the following\n
        \     states, for example, (major, cleared) and (minor, not cleared).\n      X.733
        uses a flat, globally defined enumerated \"probable-cause\" to\n      identify
        alarm types.  This alarm data model uses a hierarchical\n      YANG identity:
        \"alarm-type\".  This enables delegation of alarm\n      types within organizations.
        \ It also enables management to reason\n      about abstract alarm types corresponding
        to base identities; see\n      Section 3.2.\n      The YANG alarm data model
        has not included the majority of the\n      X.733 alarm attributes.  Rather,
        these are defined in an\n      augmenting module [X.733] if \"strict\" X.733
        compliance is needed.\n"
      title: F.2.1.  X.733
    - contents:
      - "F.2.2.  The Alarm MIB (RFC 3877)\n   The MIB in RFC 3877 takes a different
        approach; rather than defining\n   a concrete data model for alarms, it defines
        a model to map existing\n   SNMP-managed objects and notifications into alarm
        states and alarm\n   notifications.  This was necessary since MIBs were already
        defined\n   with both managed objects and notifications indicating alarms,
        for\n   example, \"linkUp\" and \"linkDown\" notifications in combination
        with\n   \"ifAdminState\" and \"ifOperState\".  So, RFC 3877 cannot really
        be\n   compared to the alarm YANG module in that sense.\n   The Alarm MIB
        maps existing MIB definitions into alarms, such as\n   \"alarmModelTable\".
        \ The upside of that is that an SNMP Manager can,\n   at runtime, read the
        possible alarm types.  This corresponds to the\n   \"alarmInventory\" in the
        alarm YANG module.\n"
      title: F.2.2.  The Alarm MIB (RFC 3877)
    - contents:
      - "F.2.3.  3GPP Alarm IRP\n   The 3GPP Alarm IRP is an evolution of X.733.  Main
        differences\n   between the alarm YANG module and 3GPP are as follows:\n      3GPP
        keeps the majority of the X.733 attributes, but the alarm\n      YANG module
        does not.\n      3GPP introduced overlapping and possibly conflicting keys
        for\n      alarms, alarmId, and (managed object, event type, probable cause,\n
        \     specific problem).  (See Example 3 in Annex C of [ALARMIRP]).  In\n
        \     the YANG alarm data model, the key for identifying an alarm\n      instance
        is clearly defined by (\"resource\", \"alarm-type-id\",\n      \"alarm-type-qualifier\").
        \ See also Section 3.4 for more\n      information.\n      The alarm YANG
        module clearly separates the resource/\n      instrumentation lifecycle from
        the operator lifecycle. 3GPP allows\n      operators to set the alarm severity
        to clear; this is not allowed\n      by this module.  Rather, an operator
        closes an alarm, which does\n      not affect the severity.\n"
      title: F.2.3.  3GPP Alarm IRP
    - contents:
      - "F.2.4.  G.7710\n   G.7710 is different than the previously referenced alarm
        standards.\n   It does not define a data model for alarm reporting.  It defines\n
        \  common equipment management function requirements including alarm\n   instrumentation.
        \ The scope is transport networks.\n   The requirements in G.7710 correspond
        to features in the alarm YANG\n   module in the following way:\n      Alarm
        Severity Assignment Profile (ASAP): the alarm profile\n      \"/alarms/alarm-profile/\".\n
        \     Alarm Reporting Control (ARC): alarm shelving \"/alarms/control/\n      alarm-shelving/\"
        and the ability to control alarm notifications\n      \"/alarms/control/notify-status-changes\".
        \ Alarm shelving\n      corresponds to the use case of turning off alarm reporting
        for a\n      specific resource, which is the NALM (No ALarM) state in M.3100.\n"
      title: F.2.4.  G.7710
    title: F.2.  Data Model
  title: Appendix F.  Relationship to Other Alarm Standards
- contents:
  - "Appendix G.  Alarm-Usability Requirements\n   This section defines usability
    requirements for alarms.  Alarm\n   usability is important for an alarm interface.
    \ A data model will\n   help in defining the format, but if the actual alarms
    are of low\n   value, we have not gained the goal of alarm management.\n   Common
    alarm problems and their causes are summarized in Table 2.\n   This summary is
    adopted to networking based on the ISA [ISA182] and\n   Engineering Equipment
    Materials Users Association (EEMUA) [EEMUA]\n   standards.\n   +-----------------+--------------------------------+----------------+\n
    \  | Problem         | Cause                          | How this       |\n   |
    \                |                                | module         |\n   |                 |
    \                               | addresses the  |\n   |                 |                                |
    cause          |\n   +-----------------+--------------------------------+----------------+\n
    \  | Alarms are      | \"Nuisance\" alarms (chattering  | Strict         |\n   |
    generated, but  | alarms and fleeting alarms),   | definition of  |\n   | they
    are        | faulty hardware, redundant     | alarms         |\n   | ignored by
    the  | alarms, cascading alarms,      | requiring      |\n   | operator.       |
    incorrect alarm settings, and  | corrective     |\n   |                 | alarms
    that have not been      | response.  See |\n   |                 | rationalized;
    the alarms       | alarm          |\n   |                 | represent log information
    \     | requirements   |\n   |                 | rather than true alarms.       |
    in Table 3.    |\n   |                 |                                |                |\n
    \  | When alarms     | Insufficient alarm-response    | The alarm      |\n   |
    occur,          | procedures and not well-       | inventory      |\n   | operators
    do    | defined alarm types.           | lists all      |\n   | not know how to
    |                                | alarm types    |\n   | respond.        |                                |
    and corrective |\n   |                 |                                | actions.
    \ See  |\n   |                 |                                | alarm          |\n
    \  |                 |                                | requirements   |\n   |
    \                |                                | in Table 3.    |\n   |                 |
    \                               |                |\n   | The alarm       | Nuisance
    alarms, stale alarms, | The alarm      |\n   | display is full | and alarms from
    equipment not  | definition and |\n   | of alarms, even | in service.                    |
    alarm          |\n   | when there is   |                                | shelving.
    \     |\n   | nothing wrong.  |                                |                |\n
    \  |                 |                                |                |\n   |
    During a        | Incorrect prioritization of    | State-based    |\n   | failure,
    \       | alarms.  Not using advanced    | alarm model    |\n   | operators are
    \  | alarm techniques (e.g., state- | and alarm-rate |\n   | flooded with so |
    based alarming).               | requirements;  |\n   | many alarms     |                                |
    see Tables 4   |\n   | that they do    |                                | and
    5,         |\n   | not know which  |                                | respectively.
    \ |\n   | ones are the    |                                |                |\n
    \  | most important. |                                |                |\n   +-----------------+--------------------------------+----------------+\n
    \                   Table 2: Alarm Problems and Causes\n   Based upon the above
    problems, EEMUA gives the following definition\n   of a good alarm:\n   +----------------+--------------------------------------------------+\n
    \  | Characteristic | Explanation                                      |\n   +----------------+--------------------------------------------------+\n
    \  | Relevant       | Not spurious or of low operational value.        |\n   |
    \               |                                                  |\n   | Unique
    \        | Not duplicating another alarm.                   |\n   |                |
    \                                                 |\n   | Timely         | Not
    long before any response is needed or too    |\n   |                | late to
    do anything.                             |\n   |                |                                                  |\n
    \  | Prioritized    | Indicating the importance that the operator      |\n   |
    \               | deals with the problem.                          |\n   |                |
    \                                                 |\n   | Understandable | Having
    a message that is clear and easy to       |\n   |                | understand.
    \                                     |\n   |                |                                                  |\n
    \  | Diagnostic     | Identifying the problem that has occurred.       |\n   |
    \               |                                                  |\n   | Advisory
    \      | Indicative of the action to be taken.            |\n   |                |
    \                                                 |\n   | Focusing       | Drawing
    attention to the most important issues.  |\n   +----------------+--------------------------------------------------+\n
    \                   Table 3: Definition of a Good Alarm\n   Vendors SHOULD rationalize
    all alarms according to the table above.\n   Another crucial requirement is acceptable
    alarm notification rates.\n   Vendors SHOULD make sure that they do not exceed
    the recommendations\n   from EEMUA below:\n   +-----------------------------------+-------------------------------+\n
    \  | Long-Term Alarm Rate in Steady    | Acceptability                 |\n   |
    Operation                         |                               |\n   +-----------------------------------+-------------------------------+\n
    \  | More than one per minute          | Very likely to be             |\n   |
    \                                  | unacceptable.                 |\n   |                                   |
    \                              |\n   | One per 2 minutes                 | Likely
    to be overdemanding.   |\n   |                                   |                               |\n
    \  | One per 5 minutes                 | Manageable.                   |\n   |
    \                                  |                               |\n   | Less
    than one per 10 minutes      | Very likely to be acceptable. |\n   +-----------------------------------+-------------------------------+\n
    \             Table 4: Acceptable Alarm Rates -- Steady State\n   +----------------------------+--------------------------------------+\n
    \  | Number of alarms displayed | Acceptability                        |\n   |
    in 10 minutes following a  |                                      |\n   | major
    network problem      |                                      |\n   +----------------------------+--------------------------------------+\n
    \  | More than 100              | Definitely excessive and very likely |\n   |
    \                           | to lead to the operator abandoning   |\n   |                            |
    the use of the alarm system.         |\n   |                            |                                      |\n
    \  | 20-100                     | Hard to cope with.                   |\n   |
    \                           |                                      |\n   | Under
    10                   | Should be manageable, but it may be  |\n   |                            |
    difficult if several of the alarms   |\n   |                            | require
    a complex operator response. |\n   +----------------------------+--------------------------------------+\n
    \                Table 5: Acceptable Alarm Rates -- Burst\n   The numbers in Tables
    4 and 5 are the sum of all alarms for a network\n   being managed from one alarm
    console.  So every individual system or\n   Network Management System (NMS) contributes
    to these numbers.\n   Vendors SHOULD make sure that the following rules are used
    in\n   designing the alarm interface:\n   1.  Rationalize the alarms in the system
    to ensure that every alarm\n       is necessary, has a purpose, and follows the
    cardinal rule that\n       it requires an operator response.  Adheres to the rules
    of\n       Table 3.\n   2.  Audit the quality of the alarms.  Talk with the operators
    about\n       how well the alarm information supports them.  Do they know what\n
    \      to do in the event of an alarm?  Are they able to quickly\n       diagnose
    the problem and determine the corrective action?  Does\n       the alarm text
    adhere to the requirements in Table 3?\n   3.  Analyze and benchmark the performance
    of the system and compare\n       it to the recommended metrics in Tables 4 and
    5.  Start by\n       identifying nuisance alarms, as well as standing alarms at
    normal\n       state and startup.\n"
  title: Appendix G.  Alarm-Usability Requirements
- contents:
  - "Acknowledgements\n   The authors wish to thank Viktor Leijon and Johan Nordlander
    for\n   their valuable input on forming the alarm model.\n   The authors also
    wish to thank Nick Hancock, Joey Boyd, Tom Petch,\n   and Balazs Lengyel for their
    extensive reviews and contributions to\n   this document.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Stefan Vallin\n   Stefan Vallin AB\n   Email: stefan@wallan.se\n
    \  Martin Bjorklund\n   Cisco\n   Email: mbj@tail-f.com\n"
  title: Authors' Addresses
