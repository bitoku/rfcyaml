- contents:
  - '              General Switch Management Protocol (GSMP) V3

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document describes the General Switch Management Protocol\n
    \  Version 3 (GSMPv3).  The GSMPv3 is an asymmetric protocol that allows\n   one
    or more external switch controllers to establish and maintain the\n   state of
    a label switch such as, an ATM, frame relay or MPLS switch.\n   The GSMPv3 allows
    control of both unicast and multicast switch\n   connection state as well as control
    of switch system resources and\n   QoS features.\n"
  title: Abstract
- contents:
  - "Acknowledgement\n   GSMP was created by P. Newman, W. Edwards, R. Hinden, E.
    Hoffman, F.\n   Ching Liaw, T. Lyon, and G. Minshall (see [6] and [7]).  This
    version\n   of GSMP is based on their work.\n"
  title: Acknowledgement
- contents:
  - "Contributors\n   In addition to the authors/editors listed in the heading, many\n
    \  members of the GSMP group have made significant contributions to this\n   specification.
    \ Among the contributors who have contributed\n   materially are: Constantin Adam,
    Clint Bishard, Joachim Buerkle,\n   Torbjorn Hedqvist, Georg Kullgren, Aurel A.
    Lazar, Mahesan\n   Nandikesan, Matt Peters, Hans Sjostrand, Balaji Srinivasan,
    Jaroslaw\n   Sydir, Chao-Chun Wang.\n"
  title: Contributors
- contents:
  - "Specification of Requirements\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
    and \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n"
  title: Specification of Requirements
- contents:
  - "Table of Contents\n   1. Introduction ...................................................
    4\n   2. GSMP Packet Encapsulation ...................................... 6\n
    \  3. Common Definitions and Procedures .............................. 6\n    3.1
    GSMP Packet Format ........................................... 7\n      3.1.1
    Basic GSMP Message format ................................ 7\n      3.1.2 Fields
    commonly found in GSMP messages .................. 11\n      3.1.3 Labels ..................................................
    12\n      3.1.4 Failure Response Messages ............................... 17\n
    \  4. Connection Management Messages ................................ 18\n    4.1
    General Message Definitions ................................. 18\n    4.2 Add
    Branch Message .......................................... 25\n      4.2.1 ATM
    specific procedures: ................................ 29\n    4.3 Delete Tree
    Message ......................................... 30\n    4.4 Verify Tree Message
    ......................................... 30\n    4.5 Delete All Input Port Message
    ............................... 30\n    4.6 Delete All Output Port Message ..............................
    31\n    4.7 Delete Branches Message ..................................... 32\n
    \   4.8 Move Output Branch Message .................................. 35\n      4.8.1
    ATM Specific Procedures: ................................ 37\n    4.9 Move Input
    Branch Message ................................... 38\n      4.9.1 ATM Specific
    Procedures: ................................ 41\n   5. Reservation Management
    Messages ............................... 42\n    5.1 Reservation Request Message
    ................................. 43\n    5.2 Delete Reservation Message ..................................
    46\n    5.3 Delete All Reservations Message.............................. 47\n
    \  6. Management Messages ........................................... 47\n    6.1
    Port Management Message ..................................... 47\n    6.2 Label
    Range Message ......................................... 53\n      6.2.1 Labels
    .................................................. 56\n   7. State and Statistics
    Messages ................................. 60\n    7.1 Connection Activity Message
    ................................. 61\n    7.2 Statistics Messages .........................................
    64\n      7.2.1 Port Statistics Message ................................. 67\n
    \     7.2.2 Connection Statistics Message ........................... 67\n      7.2.3
    QoS Class Statistics Message ............................ 68\n    7.3 Report Connection
    State Message ............................. 68\n   8. Configuration Messages ........................................
    73\n    8.1 Switch Configuration Message ................................ 73\n
    \     8.1.1 Configuration Message Processing ........................ 75\n    8.2
    Port Configuration Message .................................. 75\n      8.2.1
    PortType Specific Data .................................. 79\n    8.3 All Ports
    Configuration Message ............................. 87\n    8.4 Service Configuration
    Message ............................... 89\n   9. Event Messages ................................................
    93\n    9.1 Port Up Message ............................................  95\n
    \   9.2 Port Down Message ..........................................  95\n    9.3
    Invalid Label Message ......................................  95\n    9.4 New
    Port Message ...........................................  96\n    9.5 Dead Port
    Message ..........................................  96\n    9.6 Adjacency Update
    Message ...................................  96\n   10. Service Model Definition
    ....................................  96\n    10.1 Overview ..................................................
    \ 96\n    10.2 Service Model Definitions .................................  97\n
    \     10.2.1 Original Specifications ...............................  97\n      10.2.2
    Service Definitions ...................................  98\n      10.2.3 Capability
    Sets .......................................  99\n    10.3 Service Model Procedures
    ..................................  99\n    10.4 Service Definitions .......................................
    100\n      10.4.1 ATM Forum Service Categories .......................... 101\n
    \     10.4.2 Integrated Services ................................... 104\n      10.4.3
    MPLS CR-LDP ........................................... 105\n      10.4.4 Frame
    Relay ........................................... 105\n      10.4.5 DiffServ ..............................................
    106\n    10.5 Format and Encoding of the Traffic Parameters ............. 106\n
    \     10.5.1 Traffic Parameters for ATM Forum Services ............. 106\n      10.5.2
    Traffic Parameters for Int-Serv Controlled Load Service 107\n      10.5.3 Traffic
    Parameters for CRLDP Service .................. 108\n      10.5.4 Traffic Parameters
    for Frame Relay Service ............ 109\n    10.6 Traffic Controls (TC) Flags
    ............................... 110\n   11. Adjacency Protocol ..........................................
    111\n    11.1 Packet Format ............................................. 112\n
    \   11.2 Procedure ................................................. 115\n      11.2.1
    State Tables .......................................... 117\n    11.3 Partition
    Information State ............................... 118\n    11.4 Loss of Synchronisation....................................
    119\n    11.5 Multiple Controllers Per Switch Partition ................. 119\n
    \     11.5.1 Multiple Controller Adjacency Process ................. 120\n   12.
    Failure Response Codes ...................................... 121\n    12.1 Description
    of Failure and Warning Response Messages ...... 121\n    12.2 Summary of Failure
    Response Codes and Warnings ............ 127\n   13. Security Considerations .....................................
    128\n   Appendix A  Summary of Messages ................................. 129\n
    \  Appendix B  IANA Considerations ................................. 130\n   References
    ...................................................... 134\n   Authors' Addresses
    .............................................. 136\n   Full Copyright Statement
    ........................................ 137\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The General Switch Management Protocol (GSMP) is a general
    purpose\n   protocol to control a label switch.  GSMP allows a controller to\n
    \  establish and release connections across the switch, add and delete\n   leaves
    on a multicast connection, manage switch ports, request\n   configuration information,
    request and delete reservation of switch\n   resources, and request statistics.
    \ It also allows the switch to\n   inform the controller of asynchronous events
    such as a link going\n   down.  The GSMP protocol is asymmetric, the controller
    being the\n   master and the switch being the slave.  Multiple switches may be\n
    \  controlled by a single controller using multiple instantiations of\n   the
    protocol over separate control connections.  Also a switch may be\n   controlled
    by more than one controller by using the technique of\n   partitioning.\n   A
    \"physical\" switch can be partitioned into several virtual switches\n   that
    are referred to as partitions.  In this version of GSMP, switch\n   partitioning
    is static and occurs prior to running GSMP.  The\n   partitions of a physical
    switch are isolated from each other by the\n   implementation and the controller
    assumes that the resources\n   allocated to a partition are at all times available
    to that\n   partition.  A partition appears to its controller as a label switch.\n
    \  Throughout the rest of this document, the term switch (or\n   equivalently,
    label switch) is used to refer to either a physical,\n   non-partitioned switch
    or to a partition.  The resources allocated to\n   a partition appear to the controller
    as if they were the actual\n   physical resources of the partition.  For example
    if the bandwidth of\n   a port were divided among several partitions, each partition
    would\n   appear to the controller to have its own independent port.\n   GSMP
    controls a partitioned switch through the use of a partition\n   identifier that
    is carried in every GSMP message.  Each partition has\n   a one-to-one control
    relationship with its own logical controller\n   entity (which in the remainder
    of the document is referred to simply\n   as a controller) and GSMP independently
    maintains adjacency between\n   each controller-partition pair.\n   Kinds of label
    switches include frame or cell switches that support\n   connection oriented switching,
    using the exact match-forwarding\n   algorithm based on labels attached to incoming
    cells or frames.  A\n   switch is assumed to contain multiple \"ports\".  Each
    port is a\n   combination of one \"input port\" and one \"output port\".  Some
    GSMP\n   requests refer to the port as a whole, whereas other requests are\n   specific
    to the input port or the output port.  Cells or labelled\n   frames arrive at
    the switch from an external communication link on\n   incoming labelled channels
    at an input port.  Cells or labelled\n   frames depart from the switch to an external
    communication link on\n   labelled channels from an output port.\n   A switch
    may support multiple label types, however, each switch port\n   can support only
    one label type.  The label type supported by a given\n   port is indicated by
    the switch to the controller in a port\n   configuration message.  Connections
    may be established between ports,\n   supporting different label types.  Label
    types include ATM, Frame\n   Relay, MPLS Generic and FEC Labels.\n   A connection
    across a switch is formed by connecting an incoming\n   labelled channel to one
    or more outgoing labelled channels.\n   Connections are referenced by the input
    port on which they originate\n   and the Label values of their incoming labelled
    channel.\n   GSMP supports point-to-point and point-to-multipoint connections.
    \ A\n   multipoint-to-point connection is specified by establishing multiple\n
    \  point-to-point connections, each of them specifying the same output\n   branch.
    \ A multipoint-to-multipoint connection is specified by\n   establishing multiple
    point-to-multipoint trees each of them\n   specifying the same output branches.\n
    \  In general a connection is established with a certain quality of\n   service
    (QoS).  This version of GSMP includes a default QoS\n   Configuration and additionally
    allows the negotiation of alternative,\n   optional QoS configurations.  The default
    QoS Configuration includes\n   three QoS Models: a Service Model, a Simple Abstract
    Model (strict\n   priorities) and a QoS Profile Model.\n   The Service Model is
    based on service definitions found external to\n   GSMP such as in Integrated
    Services or ATM Service Categories.  Each\n   connection is assigned a specific
    service that defines the handling\n   of the connection by the switch.  Additionally,
    traffic parameters\n   and traffic controls may be assigned to the connection
    depending on\n   the assigned service.\n   In the Simple Abstract Model, a connection
    is assigned a priority\n   when it is established.  It may be assumed that for
    connections that\n   share the same output port, a cell or frame on a connection
    with a\n   higher priority is much more likely to exit the switch before a cell\n
    \  or frame on a connection with a lower priority if they are both in\n   the
    switch at the same time.  The number of priorities that each port\n   of the switch
    supports may be obtained from the port configuration\n   message.\n   The QoS
    Profile Model provides a simple mechanism that allows\n   connection to be assigned
    QoS semantics defined externally to GSMP.\n   The QoS Profile Model can be used
    to indicate pre-defined\n   Differentiated Service Per Hop Behaviours (PHBs).
    \ Definition of QoS\n   profiles is outside of the scope of this specification.\n
    \  All GSMP switches MUST support the default QoS Configuration.  A GSMP\n   switch
    may additionally support one or more alternative QoS\n   Configurations.  The
    QoS models of alternative QoS configurations are\n   defined outside the GSMP
    specification.  GSMP includes a negotiation\n   mechanism that allows a controller
    to select from the QoS\n   configurations that a switch supports.\n   GSMP contains
    an adjacency protocol.  The adjacency protocol is used\n   to synchronise states
    across the link, to negotiate which version of\n   the GSMP protocol to use, to
    discover the identity of the entity at\n   the other end of a link, and to detect
    when it changes.\n"
  title: 1.  Introduction
- contents:
  - "2.  GSMP Packet Encapsulation\n   GSMP packets may be transported via any suitable
    medium.  GSMP packet\n   encapsulations for ATM, Ethernet and TCP are specified
    in [15].\n   Additional encapsulations for GSMP packets may be defined in separate\n
    \  documents.\n"
  title: 2.  GSMP Packet Encapsulation
- contents:
  - "3.  Common Definitions and Procedures\n   GSMP is a master-slave protocol.  The
    controller issues request\n   messages to the switch.  Each request message indicates
    whether a\n   response is required from the switch and contains a transaction\n
    \  identifier to enable the response to be associated with the request.\n   The
    switch replies with a response message indicating either a\n   successful result
    or a failure.  There are six classes of GSMP\n   request-response message: Connection
    Management, Reservation\n   Management, Port Management, State and Statistics,
    Configuration, and\n   Quality of Service.  The switch may also generate asynchronous
    Event\n   messages to inform the controller of asynchronous events.  The\n   controller
    can be required to acknowledge event messages, but by\n   default does not do
    so.  There is also an adjacency protocol message\n   used to establish synchronisation
    across the link and maintain a\n   handshake.\n   For the request-response messages,
    each message type has a format for\n   the request message and a format for the
    success response.  Unless\n   otherwise specified a failure response message is
    identical to the\n   request message that caused the failure, with the Code field\n
    \  indicating the nature of the failure.\n   Switch ports are described by a 32-bit
    port number.  The switch\n   assigns port numbers and it may typically choose
    to structure the 32\n   bits into opaque sub-fields that have meaning to the physical\n
    \  structure of the switch (e.g., slot, port).  In general, a port in\n   the
    same physical location on the switch will always have the same\n   port number,
    even across power cycles.  The internal structure of the\n   port number is opaque
    to the GSMP protocol.  However, for the\n   purposes of network management such
    as logging, port naming, and\n   graphical representation, a switch may declare
    the physical location\n   (physical slot and port) of each port.  Alternatively,
    this\n   information may be obtained by looking up the product identity in a\n
    \  database.\n   Each switch port also maintains a port session number assigned
    by the\n   switch.  A message, with an incorrect port session number MUST be\n
    \  rejected.  This allows the controller to detect a link failure and to\n   keep
    states synchronised.\n   Except for the adjacency protocol message, no GSMP messages
    may be\n   sent across the link until the adjacency protocol has achieved\n   synchronisation,
    and all GSMP messages received on a link that do not\n   currently have state
    synchronisation MUST be discarded.\n"
  - contents:
    - '3.1  GSMP Packet Format

      '
    - contents:
      - "3.1.1  Basic GSMP Message format\n   All GSMP messages, except the adjacency
        protocol message, have the\n   following format:\n    0                   1
        \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |    Version    | Message Type  |    Result     |     Code      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  | Partition ID  |            Transaction Identifier             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |I|      SubMessage Number      |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                                                               |\n   ~
        \                         Message Body                         ~\n   |                                                               |\n
        \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   (The
        convention in the documentation of Internet Protocols [5] is to\n   express
        numbers in decimal.  Numbers in hexadecimal format are\n   specified by prefacing
        them with the characters \"0x\".  Numbers in\n   binary format are specified
        by prefacing them with the characters\n   \"0b\".  Data is pictured in \"big-endian\"
        order.  That is, fields are\n   described left to right, with the most significant
        byte on the left\n   and the least significant byte on the right.  Whenever
        a diagram\n   shows a group of bytes, the order of transmission of those bytes
        is\n   the normal order in which they are read in English.  Whenever a byte\n
        \  represents a numeric quantity, the left most bit in the diagram is\n   the
        high order or most significant bit.  That is, the bit labelled 0\n   is the
        most significant bit.  Similarly, whenever a multi-byte field\n   represents
        a numeric quantity, the left most bit of the whole field\n   is the most significant
        bit.  When a multi-byte quantity is\n   transmitted, the most significant
        byte is transmitted first.  This is\n   the same coding convention as is used
        in the ATM layer [1] and AAL-5\n   [2][3].)\n      Version\n         The version
        number of the GSMP protocol being used in this\n         session.  It SHOULD
        be set by the sender of the message to the\n         GSMP protocol version
        negotiated by the adjacency protocol.\n      Message Type\n         The GSMP
        message type.  GSMP messages fall into the following\n         classes: Connection
        Management, Reservation Management, Port\n         Management, State and Statistics,
        Configuration, Quality of\n         Service, Events and messages belonging
        to an Abstract or\n         Resource Model (ARM) extension.  Each class has
        a number of\n         different message types.  In addition, one Message Type
        is\n         allocated to the adjacency protocol.\n      Result\n         Field
        in a Connection Management request message, a Port\n         Management request
        message, or a Quality of Service request\n         message that is used to
        indicate whether a response is required\n         to the request message if
        the outcome is successful.  A value\n         of \"NoSuccessAck\" indicates
        that the request message does not\n         expect a response if the outcome
        is successful, and a value of\n         \"AckAll\" indicates that a response
        is expected if the outcome\n         is successful.  In both cases a failure
        response MUST be\n         generated if the request fails.  For State and
        Statistics, and\n         Configuration request messages, a value of \"NoSuccessAck\"
        in\n         the request message is ignored and the request message is\n         handled
        as if the field was set to \"AckAll\".  (This facility\n         was added
        to reduce the control traffic in the case where the\n         controller periodically
        checks that the state in the switch is\n         correct.  If the controller
        does not use this capability, all\n         request messages SHOULD be sent
        with a value of \"AckAll\".)\n         In a response message, the result field
        can have three values:\n         \"Success,\" \"More,\" and \"Failure\".  The
        \"Success\" and \"More\"\n         results both indicate a success response.
        \ All messages that\n         belong to the same success response will have
        the same\n         Transaction Identifier.  The \"Success\" result indicates
        a\n         success response that may be contained in a single message or\n
        \        the final message of a success response spanning multiple\n         messages.\n
        \        \"More\" in the result indicates that the message, either request\n
        \        or response, exceeds the maximum transmission unit of the data\n
        \        link and that one or more further messages will be sent to\n         complete
        the success response.\n         ReturnReceipt is a result field used in Events
        to indicate that\n         an acknowledgement is required for the message.
        \ The default\n         for Events Messages is that the controller will not
        acknowledge\n         Events.  In the case where a switch requires acknowledgement,\n
        \        it will set the Result Field to ReturnReceipt in the header of\n
        \        the Event Message.\n         The encoding of the result field is:\n
        \                    NoSuccessAck:       Result = 1\n                     AckAll:
        \            Result = 2\n                     Success:            Result =
        3\n                     Failure:            Result = 4\n                     More:
        \              Result = 5\n                     ReturnReceipt       Result
        = 6\n         The Result field is not used in an adjacency protocol message.\n
        \     Code\n         Field gives further information concerning the result
        in a\n         response message.  It is mostly used to pass an error code
        in a\n         failure response but can also be used to give further\n         information
        in a success response message or an event message.\n         In a request
        message, the code field is not used and is set to\n         zero.  In an adjacency
        protocol message, the Code field is used\n         to determine the function
        of the message.\n      Partition ID\n         Field used to associate the
        command with a specific switch\n         partition.  The format of the Partition
        ID is not defined in\n         GSMP.  If desired, the Partition ID can be
        divided into\n         multiple sub-identifiers within a single partition.
        \ For\n         example: the Partition ID could be subdivided into a 6-bit\n
        \        partition number and a 2-bit sub-identifier which would allow a\n
        \        switch to support 64 partitions with 4 available IDs per\n         partition.\n
        \     Transaction Identifier\n         Used to associate a request message
        with its response message.\n         For request messages, the controller
        may select any transaction\n         identifier.  For response messages, the
        transaction identifier\n         is set to the value of the transaction identifier
        from the\n         message to which it is a response.  For event messages,
        the\n         transaction identifier SHOULD be set to zero.  The Transaction\n
        \        Identifier is not used, and the field is not present, in the\n         adjacency
        protocol.\n      I flag\n         If I is set then the SubMessage Number field
        indicates the\n         total number of SubMessage segments that compose the
        entire\n         message.  If it is not set then the SubMessage  Number field\n
        \        indicates the sequence number of this SubMessage segment within\n
        \        the whole message.\n      SubMessage Number\n         When a message
        is segmented because it exceeds the MTU of the\n         link layer, each
        segment will include a submessage number to\n         indicate its position.
        \ Alternatively, if it is the first\n         submessage in a sequence of
        submessages, the I flag will be set\n         and this field will contain
        the total count of submessage\n         segments.\n      Length\n         Length
        of the GSMP message including its header fields and\n         defined GSMP
        message body.  The length of additional data\n         appended to the end
        of the standard message SHOULD be included\n         in the Length field.\n"
      title: 3.1.1  Basic GSMP Message format
    - contents:
      - "3.1.2  Fields commonly found in GSMP messages\n   The following fields are
        frequently found in GSMP messages.  They are\n   defined here to avoid repetition.\n
        \     Port\n         Gives the port number of the switch port to which the
        message\n         applies.\n      Port Session Number\n         Each switch
        port maintains a Port Session Number assigned by\n         the switch.  The
        port session number of a port remains\n         unchanged while the port is
        continuously in the Available state\n         and the link status is continuously
        Up.  When a port returns to\n         the Available state after it has been
        Unavailable or in any of\n         the Loopback states, or when the line status
        returns to the Up\n         state after it has been Down or in Test, or after
        a power\n         cycle, a new Port Session Number MUST be generated.  Port\n
        \        session numbers SHOULD be assigned using some form of random\n         number.\n
        \        If the Port Session Number in a request message does not match\n
        \        the current Port Session Number for the specified port, a\n         failure
        response message MUST be returned with the Code field\n         indicating,
        \"5: Invalid port session number\".  The current port\n         session number
        for a port may be obtained using a Port\n         Configuration or an All
        Ports Configuration message.\n"
      - contents:
        - "3.1.2.1  Additional General Message Information\n   1. Any field in a GSMP
          message that is unused or defined as\n      \"reserved\" MUST be set to
          zero by the sender and ignored by the\n      receiver.\n   2. Flags that
          are undefined will be designated as:  x: reserved\n   3. It is not an error
          for a GSMP message to contain additional data\n      after the end of the
          Message Body.  This is allowed to support\n      proprietary and experimental
          purposes.  However, the maximum\n      transmission unit of the GSMP message,
          as defined by the data link\n      layer encapsulation, MUST NOT be exceeded.
          \ The length of\n      additional data appended to the end of the standard
          message SHOULD\n      be included in the message length field.\n   4. A
          success response message MUST NOT be sent until the requested\n      operation
          has been successfully completed.\n"
        title: 3.1.2.1  Additional General Message Information
      title: 3.1.2  Fields commonly found in GSMP messages
    - contents:
      - "3.1.3  Labels\n   All labels in GSMP have a common structure composed of
        tuples,\n   consisting of a Type, a Length, and a Value.  Such tuples are\n
        \  commonly known as TLV's, and are a good way of encoding information\n   in
        a flexible and extensible format.  A label TLV is encoded as a 2\n   octet
        field that uses 12 bits to specify a Type and four bits to\n   specify certain
        behaviour specified below, followed by a 2 octet\n   Length field, followed
        by a variable length Value field.\n   Additionally, a label field can be composed
        of many stacked labels\n   that together constitute the label.\n   A summary
        of TLV labels supported in this version of the protocol is\n   listed below:\n
        \     TLV Label      Type       Section Title\n      ---------      ----       -------------\n
        \     ATM Label      0x100      ATM TLV Labels\n      FR Label       0x101
        \     Frame Relay TLV Labels\n      MPLS Gen Label 0x102      MPLS Generic
        TLV Labels\n      FEC Label      0x103      FEC TLV Labels\n   All Labels
        will be designated as follow:\n    0                   1                   2
        \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |x|S|x|x|       Label Type      |          Label Length         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                                                               |\n   ~
        \                         Label Value                          ~\n   |                                                               |\n
        \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      x:
        Reserved Flags.\n         These are generally used by specific messages and
        will be\n         defined in those messages.\n      S: Stacked Label Indicator\n
        \        Label Stacking is discussed below in section 3.1.3.5\n      Label
        Type\n         A 12-bit field indicating the type of label.\n      Label Length\n
        \        A 16-bit field indicating the length of the Label Value field\n         in
        bytes.\n      Label Value\n         A variable length field that is an integer
        number of 32 bit\n         words long.  The Label Value field is interpreted
        according to\n         the Label Type as described in the following sections.\n"
      - contents:
        - "3.1.3.1  ATM Labels\n   If the Label Type = ATM Label, the labels MUST
          be interpreted as an\n   ATM labels as shown:\n    0                   1
          \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2
          3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |x|S|x|x|   ATM Label (0x100)   |          Label Length         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |x x x x|           VPI         |              VCI              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  For a virtual path connection (switched as a single virtual path\n   connection)
          or a virtual path (switched as one or more virtual\n   channel connections
          within the virtual path) the VCI field is not\n   used.\n   ATM distinguishes
          between virtual path connections and virtual\n   channel connections.  The
          connection management messages apply both\n   to virtual channel connections
          and virtual path connections.  The Add\n   Branch and Move Branch connection
          management messages have two\n   Message Types.  One Message Type indicates
          that a virtual channel\n   connection is required, and the other Message
          Type indicates that a\n   virtual path connection is required.  The Delete
          Branches, Delete\n   Tree, and Delete All connection management messages
          have only a\n   single Message Type because they do not need to distinguish
          between\n   virtual channel connections and virtual path connections.  For\n
          \  virtual path connections, neither Input VCI fields nor Output VCI\n   fields
          are required.  They SHOULD be set to zero by the sender and\n   ignored
          by the receiver.  Virtual channel branches may not be added\n   to an existing
          virtual path connection.  Conversely, virtual path\n   branches may not
          be added to an existing virtual channel connection.\n   In the Port Configuration
          message each switch input port may declare\n   whether it is capable of
          supporting virtual path switching (i.e.,\n   accepting connection management
          messages requesting virtual path\n   connections).\n"
        title: 3.1.3.1  ATM Labels
      - contents:
        - "3.1.3.2  Frame Relay Labels\n   If the TLV Type = FR Label, the labels
          MUST be interpreted as a Frame\n   Relay labels as shown:\n    0                   1
          \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2
          3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |x|S|x|x|    FR Label (0x101)   |          Label Length         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |x x x x| Res |Len|                  DLCI                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \     Res\n         The Res field is reserved in [21], i.e., it is not explicitly\n
          \        reserved by GSMP.\n      Len\n         The Len field specifies
          the number of bits of the DLCI.  The\n         following values are supported:\n
          \           Len  DLCI bits\n            0    10\n            2    23\n      DLCI\n
          \        DLCI is the binary value of the Frame Relay Label.  The\n         significant
          number of bits (10 or 23) of the label value is to\n         be encoded
          into the Data Link Connection Identifier (DLCI)\n         field when part
          of the Frame Relay data link header [13].\n"
        title: 3.1.3.2  Frame Relay Labels
      - contents:
        - "3.1.3.3  MPLS Generic Labels\n   If a port's attribute PortType=MPLS, then
          that port's labels are for\n   use on links for which label values are independent
          of the underlying\n   link technology.  Examples of such links are PPP and
          Ethernet.  On\n   such links the labels are carried in MPLS label stacks
          [14].  If the\n   Label Type = MPLS Generic Label, the labels MUST be interpreted
          as\n   Generic MPLS labels as shown:\n    0                   1                   2
          \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
          3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |x|S|x|x| MPLS Gen Label (0x102)|          Label Length         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |x x x x x x x x x x x x|              MPLS Label               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \     MPLS Label\n         This is a 20-bit label value as specified in
          [14], represented\n         as a 20-bit number in a 4-byte field.\n"
        title: 3.1.3.3  MPLS Generic Labels
      - contents:
        - "3.1.3.4  FEC Labels\n   Labels may be bound to Forwarding Equivalence Classes
          (FECs) as\n   defined in [18].  A FEC is a list of one or more FEC elements.
          \ The\n   FEC TLV encodes FEC items.  In this version of the protocol only,\n
          \  Prefix FECs are supported.  If the Label Type = FEC Label, the labels\n
          \  MUST be interpreted as Forwarding Equivalence Class Labels as shown:\n
          \   0                   1                   2                   3\n    0
          1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |x|S|x|x|   FEC Label (0x103)   |          Label Length         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  ~                        FEC Element 1                          ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  ~                        FEC Element n                          ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \     FEC Element\n         The FEC element encoding depends on the type
          of FEC element.\n         In this version of GSMP only, Prefix FECs are
          supported.\n    0                   1                   2                   3\n
          \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |  Element Type |         Address Family        | Prefix Length |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  ~                            Prefix                             ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \     Element Type\n         In this version of GSMP the only supported
          Element Type is\n         Prefix FEC Elements.  The Prefix FEC Element is
          a one-octet\n         value, encoded as 0x02.\n      Address Family\n         Two-byte
          quantity containing a value from ADDRESS FAMILY\n         NUMBERS in [5],
          that encodes the address family for the address\n         prefix in the
          Prefix field.\n      Prefix Length\n         One byte containing the length
          in bits of the address prefix\n         that follows.  A length of zero
          indicates a prefix that matches\n         all addresses (the default destination);
          in this case the\n         Prefix itself is zero bytes.\n      Prefix\n
          \        An address prefix encoded according to the Address Family\n         field,
          whose length, in bits, was specified in the Prefix\n         Length field.\n"
        title: 3.1.3.4  FEC Labels
      - contents:
        - "3.1.3.5  Label Stacking\n   Label stacking is a technique used in MPLS
          [14] that allows\n   hierarchical labelling.  MPLS label stacking is similar
          to, but\n   subtly different from, the VPI/VCI hierarchy of labels in ATM.
          \ There\n   is no set limit to the depth of label stacks that can be used
          in\n   GSMP.\n   When the Stacked Label Indicator S is set to 1 it indicates
          that an\n   additional label field will be appended to the adjacent label
          field.\n   For example, a stacked Input Short Label could be designated
          as\n   follows:\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \     |x|S|x|x|                                                       |\n
          \     +-+-+-+-+                   Input Label                         |\n
          \     ~                                                               ~\n
          \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  ** |x|S|x|x|                                                       |\n
          \     +-+-+-+-+                 Stacked Input Label                   |\n
          \     ~                                                               ~\n
          \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \     ** Note: There can be zero or more Stacked Labels fields (like\n         those
          marked **) following an Input or Output Label field.  A\n         Stacked
          Label follows the previous label field if and only if\n         the S Flag
          in the previous label is set.\n   When a label is extended by stacking,
          it is treated by the protocol\n   as a single extended label, and all operations
          on that label are\n   atomic.  For example, in an add branch message, the
          entire input\n   label is switched for the entire output label.  Likewise,
          in Move\n   Input Branch and Move Output Branch messages, the entire label
          is\n   swapped.  For that reason, in all messages that designate a label\n
          \  field, it will be depicted as a single 64-bit field, though it might\n
          \  be instantiated by many 64-bit fields in practice.\n"
        title: 3.1.3.5  Label Stacking
      title: 3.1.3  Labels
    - contents:
      - "3.1.4  Failure Response Messages\n   A failure response message is formed
        by returning the request message\n   that caused the failure with the Result
        field in the header\n   indicating failure (Result = 4) and the Code field
        giving the failure\n   code.  The failure code specifies the reason for the
        switch being\n   unable to satisfy the request message.\n   If the switch
        issues a failure response in reply to a request\n   message, no change should
        be made to the state of the switch as a\n   result of the message causing
        the failure.  (For request messages\n   that contain multiple requests, such
        as the Delete Branches message,\n   the failure response message will specify
        which requests were\n   successful and which failed.  The successful requests
        may result in\n   changed state.)\n   A warning response message is a success
        response (Result = 3) with\n   the Code field specifying the warning code.
        \ The warning code\n   specifies a warning that was generated during the successful\n
        \  operation.\n   If the switch issues a failure response it MUST choose the
        most\n   specific failure code according to the following precedence:\n      -
        \ Invalid Message\n      -  General Message Failure\n      -  Specific Message
        Failure\n         A failure response specified in the text defining the message\n
        \        type.\n      -  Connection Failures\n      -  Virtual Path Connection
        Failures\n      -  Multicast Failures\n      -  QoS Failures\n      -  General
        Failures\n      -  Warnings\n   If multiple failures match in any of the categories,
        the one that is\n   listed first should be returned.  Descriptions of the
        Failure\n   response messages can be found in section 12.\n"
      title: 3.1.4  Failure Response Messages
    title: 3.1  GSMP Packet Format
  title: 3.  Common Definitions and Procedures
- contents:
  - '4.  Connection Management Messages

    '
  - contents:
    - "4.1  General Message Definitions\n   Connection management messages are used
      by the controller to\n   establish, delete, modify and verify connections across
      the switch.\n   The Add Branch, Delete Tree, and Delete All connection management\n
      \  messages have the following format, for both request and response\n   messages:\n
      \   0                   1                   2                   3\n    0 1 2
      3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |    Version    | Message Type  |    Result     |     Code      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | Partition ID  |            Transaction Identifier             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |I|      SubMessage Number      |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                      Port Session Number                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                         Reservation ID                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                          Input Port                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                    Input Service Selector                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                          Output Port                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                   Output Service Selector                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |IQS|OQS|P|x|N|O|              Adaptation Method                |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |x|S|x|x|                                                       |\n   +-+-+-+-+
      \                 Input Label                          |\n   ~                                                               ~\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |x|S|x|x|
      \                                                      |\n   +-+-+-+-+                 Output
      Label                          |\n   ~                                                               ~\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      When
      required, the Add Branch, Move Input Branch and Move Output\n      Branch messages
      have an additional, variable length data block\n      appended to the above
      message.  This will be required when\n      indicated by the IQS and OQS flags
      (if the value of either is set\n      to 0b10) and the service selector.  The
      additional data block has\n      the following format:\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | Input TC Flags|x|x|x|x|x|x|x|x|x|x|x|x|x|x|x|x|x|x|x|x|x|x|x|x|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                                                               |\n   ~                     Traffic
      Parameters Block                  ~\n   |                                                               |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |Output
      TC Flags|x|x|x|x|x|x|x|x|x|x|x|x|x|x|x|x|x|x|x|x|x|x|x|x|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                                                               |\n   ~                     Traffic
      Parameters Block                  ~\n   |                                                               |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      Note:
      Fields and Parameters that have been explained in the\n         description
      of the general messages will not be explained in\n         this section.  Please
      refer to section 3.1 for details.\n      Reservation ID\n         Identifies
      the reservation that MUST be deployed for the branch\n         being added.
      \ Reservations are established using reservation\n         management messages
      (see Chapter 5).  A value of zero indicates\n         that no Reservation is
      being deployed for the branch.  If a\n         reservation with a corresponding
      Reservation ID exists, then\n         the reserved resources MUST be applied
      to the branch.  If the\n         numerical value of Reservation ID is greater
      than the value of\n         Max Reservations (from the Switch Configuration
      message), a\n         failure response is returned indicating \"20: Reservation
      ID out\n         of Range\".  If the value of Input Port differs from the input\n
      \        port specified in the reservation, or if the value of Output\n         Port
      differs from the output port specified in the reservation,\n         a failure
      response MUST be returned indicating \"21: Mismatched\n         reservation
      ports\".  If no reservation corresponding to\n         Reservation ID exists,
      a failure response MUST be returned\n         indicating \"23: Non-existent
      reservation ID\".\n         If a valid Reservation ID is specified and the Service
      Model is\n         used (i.e., IQS or OQS=0b10) then the Traffic Parameters
      Block\n         may be omitted from the Add Branch message indicating that the\n
      \        Traffic Parameters specified in the corresponding Reservation\n         Request
      message are to be used.\n      Input Port\n         Identifies a switch input
      port.\n      Input Label\n         Identifies an incoming labelled channel arriving
      at the switch\n         input port indicated by the Input Port field.  The value
      in the\n         Input Label field MUST be interpreted according to the Label\n
      \        Type attribute of the switch input port indicated by the Input\n         Port
      field.\n      Input Service Selector\n         Identifies details of the service
      specification being used for\n         the connection.  The interpretation depends
      upon the Input QoS\n         Model Selector (IQS).\n         IQS = 00: In this
      case, the Input Service Selector indicates a\n                   simple priority.\n
      \        IQS = 01: In this case, the Input Service Selector is an opaque\n                   service
      profile identifier.  The definition of these\n                   service profiles
      is outside the scope of this\n                   specification.  Service Profiles
      can be used to\n                   indicate pre-defined Differentiated Service
      Per Hop\n                   Behaviours.\n         IQS = 10: In this case, the
      Input Service Selector corresponds\n                   to a Service Spec as
      defined in Chapter 8.2.  When\n                   the value of either IQS or
      OQS is set to 0b10, then a\n                   Traffic Parameters Block is appended
      to the message.\n         IQS = 11: In this case the Input Service Selector
      corresponds\n                   to an ARM service specification.  Definition
      of ARM\n                   service specifications is outside the scope of this\n
      \                  specification and is determined by the MType as\n                   defined
      in Chapter 8.1.\n      Output Port\n         Identifies a switch output port.\n
      \     Output Label\n         Identifies an outgoing labelled channel departing
      at the switch\n         output port indicated by the Output Port field.  The
      value in\n         the Output Label field MUST be interpreted according to the\n
      \        Label Type attribute of the switch input port indicated by the\n         Output
      Port field\n      Output Service Selector\n         Identifies details of the
      service model being used.  The\n         interpretation depends upon the Output
      QoS Model selector\n         (OQS).\n         OQS = 00: In this case the Output
      Service Selector indicates a\n                   simple priority.\n         OQS
      = 01: In this case the Output Service Selector is an opaque\n                   service
      profile identifier.  The definition of these\n                   service profiles
      is outside the scope of this\n                   specification.  Service Profiles
      can be used to\n                   indicate pre-defined Differentiated Service
      Per Hop\n                   Behaviours.\n         OQS = 10: In this case the
      Output Service Selector corresponds\n                   to a Service Spec as
      defined in Chapter 8.2.  When\n                   the value of either IQS or
      OQS is set to 0b10 then a\n                   Traffic Parameters Block is appended
      to the message.\n         OQS = 11: In this case the Output Service Selector
      corresponds\n                   to an ARM service specification.  Definition
      of ARM\n                   service specifications is outside the scope of this\n
      \                  specification and is determined by the MType as\n                   defined
      in Chapter 8.1.\n      IQS, OQS\n         Input and Output QoS Model Selector:\n
      \        The QoS Model Selector is used to specify a QoS Model for the\n         connection.
      \ The values of IQS and OQS determine respectively\n         the interpretation
      of the Input Service Selector and the Output\n         Service Selector, and
      SHOULD be interpreted as a priority, a\n         QoS profile, a service specification,
      or an ARM specification\n         as shown:\n            IQS/OQS  QoS Model
      \             Service Selector\n            -------  ---------              ----------------\n
      \           00       Simple Abstract        Model Priority\n            01       QoS
      Profile Model      QoS Profile\n            10       Default Service Model  Service
      Specification\n            11       Optional ARM           ARM Specification\n
      \     P Flag\n         If the Parameter flag is set it indicates that a single\n
      \        instance of the Traffic Parameter block is provided.  This\n         occurs
      in cases where the Input Traffic Parameters are\n         identical to Output
      Traffic Parameters.\n      N Flag\n         The Null flag is used to indicate
      a null adaptation method.\n         This occurs when the branch is connecting
      two ports of the same\n         type.\n      O Flag\n         The Opaque flag
      indicates whether the adaptation fields are\n         opaque, or whether they
      are defined by the protocol.  See the\n         definition of Adaptation Method
      below for further information.\n      Adaptation Method\n         The adaptation
      method is used to define the adaptation framing\n         that may be in use
      when moving traffic from one port type to\n         another port type; e.g.,
      from a frame relay port to an ATM\n         port.  The content of this field
      is defined by the Opaque flag.\n         If the Opaque flag is set, then this
      field is defined by the\n         switch manufacturer and is not defined in
      this protocol.  If\n         the opaque flag is not set, the field is divided
      into two 12-\n         bit fields as follows:\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |IQS|OQS|P|x|N|O|    Input Adaptation   |   Output Adaptation   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \        Input Adaptation\n            Adaptation framing method used on incoming
      connections.\n         Output Adaptation\n            Adaptation framing method
      used on outgoing connections.\n            Adaptation Types:\n                  0x100
      \                       PPP\n                  0x200                        FRF.5\n
      \                 0x201                        FRF.8\n      Input and Output
      TC Flags\n         TC (Traffic Control) Flags are used in Add Branch, Move Input\n
      \        Branch and Move Output Branch messages for connections using\n         the
      Service Model (i.e., when IQS or OQS=0b10).  The TC Flags\n         field is
      defined in Section 10.6.\n      Input and Output Traffic Parameters Block\n
      \        This variable length field is used in Add Branch, Move Input\n         Branch
      and Move Output Branch messages for connections using\n         the Service
      Model (i.e., when IQS or OQS=0b10).  Traffic\n         Parameters Block is defined
      in Section 10.5.  The Traffic\n         Parameters Block may be omitted if a
      valid, non-zero\n         Reservation ID is specified, in which case the Traffic\n
      \        Parameters of the corresponding Reservation Request message are\n         used.
      \ If the P flag is set, then the appended message block\n         will only
      include a single traffic parameter block which will\n         be used for both
      input and output traffic.\n   For all connection management messages, except
      the Delete Branches\n   message, the success response message is a copy of the
      request\n   message returned with the Result field indicating success.  The
      Code\n   field is not used in a connection management success response\n   message.\n
      \  The failure response message is a copy of the request message\n   returned
      with a Result field indicating failure.\n   Fundamentally, no distinction is
      made between point-to-point and\n   point-to-multipoint connections.  By default,
      the first Add Branch\n   message for a particular Input Port and Input Label
      will establish a\n   point-to-point connection.  The second Add Branch message
      with the\n   same Input Port and Input Label fields will convert the connection
      to\n   a point-to-multipoint connection with two branches.  However, to\n   avoid
      possible inefficiency with some switch designs, the Multicast\n   Flag is provided.
      \ If the controller knows that a new connection is\n   point-to-multipoint when
      establishing the first branch, it may\n   indicate this in the Multicast Flag.
      \ Subsequent Add Branch messages\n   with the same Input Port and Input Label
      fields will add further\n   branches to the point-to-multipoint connection.
      \ Use of the Delete\n   Branch message on a point-to-multipoint connection with
      two branches\n   will result in a point-to-point connection.  However, the switch
      may\n   structure this connection as a point-to-multipoint connection with a\n
      \  single output branch if it chooses.  (For some switch designs this\n   structure
      may be more convenient.)  Use of the Delete Branch message\n   on a point-to-point
      connection will delete the point-to-point\n   connection.  There is no concept
      of a connection with zero output\n   branches.  All connections are unidirectional,
      one input labelled\n   channel to one or more output labelled channels.\n   In
      GSMP a multipoint-to-point connection is specified by establishing\n   multiple
      point-to-point connections, each of them specifying the same\n   output branch.
      \ (An output branch is specified by an output port and\n   output label.)\n
      \  The connection management messages may be issued regardless of the\n   Port
      Status of the switch port.  Connections may be established or\n   deleted when
      a switch port is in the Available, Unavailable, or any\n   of the Loopback states.
      \ However, all connection states on an input\n   port will be deleted when the
      port returns to the Available state\n   from any other state, i.e., when a Port
      Management message is\n   received for that port with the Function field indicating
      either\n   Bring Up, or Reset Input Port.\n"
    title: 4.1  General Message Definitions
  - contents:
    - "4.2  Add Branch Message\n   The Add Branch message is a connection management
      message used to\n   establish a connection or to add an additional branch to
      an existing\n   connection.  It may also be used to check the connection state
      stored\n   in the switch.  The connection is specified by the Input Port and\n
      \  Input Label fields.  The output branch is specified by the Output\n   Port
      and Output Label fields.  The quality of service requirements of\n   the connection
      are specified by the QoS Model Selector and Service\n   Selector fields.  To
      request a connection the Add Branch message is:\n      Message Type = 16\n    0
      \                  1                   2                   3\n    0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |    Version    | Message Type  |    Result     |     Code      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | Partition ID  |            Transaction Identifier             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |I|      SubMessage Number      |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                      Port Session Number                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                         Reservation ID                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                          Input Port                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                    Input Service Selector                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                          Output Port                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                   Output Service Selector                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |IQS|OQS|P|x|N|O|              Adaptation Method                |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |x|S|M|B|                                                       |\n   +-+-+-+-+
      \                 Input Label                          |\n   ~                                                               ~\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |x|S|M|R|
      \                                                      |\n   +-+-+-+-+                 Output
      Label                          |\n   ~                                                               ~\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   When
      the value of either IQS or OQS is set to 0b10 then the following\n   Traffic
      Parameters Block is appended to the above message:\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |Input TC Flags |x|x|x|x|x|x|x|x|x|x|x|x|x|x|x|x|x|x|x|x|x|x|x|x|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                                                               |\n   ~               Input
      Traffic Parameters Block                  ~\n   |                                                               |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |Output
      TC Flags|x|x|x|x|x|x|x|x|x|x|x|x|x|x|x|x|x|x|x|x|x|x|x|x|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                                                               |\n   ~              Output
      Traffic Parameters Block                  ~\n   |                                                               |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      Note:
      Fields and Parameters that have been explained in the\n         description
      of the general connection message will not be\n         explained in this section.
      \ Please refer to section 4.1 for\n         details.\n      M: Multicast\n         Multicast
      flags are used as a hint for point-to-multipoint or\n         multipoint-to-point
      connections in the Add Branch message.\n         They are not used in any other
      connection management messages\n         and in these messages they SHOULD be
      set to zero.  There are\n         two instances of the M-bit in the Add Branch
      message; one for\n         input branch specified by the Input Port and Input
      Label fields\n         and one for the output branch specified by the Output
      Port and\n         Output Label fields.  If set for the input branch (in front
      of\n         Input Label field), it indicates that the connection is very\n
      \        likely to be a point-to-multipoint connection.  If zero, it\n         indicates
      that this connection is very likely to be a point-\n         to-point connection
      or is unknown.  If set for the output\n         branch (in front of the Output
      Label field), it indicates that\n         the connection is very likely to be
      a multipoint-to-point\n         connection.  If zero, it indicates that this
      connection is very\n         likely to be a point-to-point connection or is
      unknown.\n         If M flags are set for input as well as output branches,
      it\n         indicates that the connection is very likely to be a\n         multipoint-to-multipoint
      connection.\n         The Multicast flags are only used in the Add Branch message\n
      \        when establishing the first branch of a new connection.  It is\n         not
      required to be set when establishing subsequent branches of\n         a point-to-multipoint
      or a multipoint-to-point connection and\n         on such connections it SHOULD
      be ignored by the receiver.\n         (Except in cases where the connection
      replace bit is enabled\n         and set, the receipt of the second and subsequent
      Add Branch\n         messages from the receiver indicates a point-to-multipoint
      or a\n         multipoint-to-point connection.)  If it is known that this is\n
      \        the first branch of a point-to-multipoint or a multipoint-to-\n         point
      connection, this flag SHOULD be set.  If it is unknown,\n         or if it is
      known that the connection is point-to-point, this\n         flag SHOULD be zero.
      \ The use of the multicast flag is not\n         mandatory and may be ignored
      by the switch.  If unused, the\n         flags SHOULD be set to zero.  Some
      switches use a different\n         data structure for multicast connections
      rather than for\n         point-to-point connections.  These flags prevent the
      switch\n         from setting up a point-to-point structure for the first branch\n
      \        of a multicast connection that MUST immediately be deleted and\n         reconfigured
      as point-to-multipoint or multipoint-to-point when\n         the second branch
      is established.\n      B: Bi-directional\n         The Bi-directional flag applies
      only to the Add Branch message.\n         In all other Connection Management
      messages it is not used.  It\n         may only be used when establishing a
      point-to-point connection.\n         The Bi-directional flag in an Add Branch
      message, if set,\n         requests that two unidirectional connections be established,\n
      \        one in the forward direction, and one in the reverse direction.\n         It
      is equivalent to two Add Branch messages, one specifying the\n         forward
      direction, and one specifying the reverse direction.\n         The forward direction
      uses the values of Input Port, Input\n         Label, Output Port and Output
      Label as specified in the Add\n         Branch message.  The reverse direction
      is derived by exchanging\n         the values specified in the Input Port and
      Input Label fields,\n         with those of the Output Port and Output Label
      fields\n         respectively.  Thus, a connection in the reverse direction\n
      \        originates at the input port specified by the Output Port\n         field,
      on the label specified by the Output Label field.  It\n         departs from
      the output port specified by the Input Port field,\n         on the label specified
      by the Input Label field.\n         The Bi-directional flag is simply a convenience
      to establish\n         two unidirectional connections in opposite directions
      between\n         the same two ports, with identical Labels, using a single
      Add\n         Branch message.  In all future messages the two unidirectional\n
      \        connections MUST be handled separately.  There is no bi-\n         directional
      delete message.  However, a single Delete Branches\n         message with two
      Delete Branch Elements, one for the forward\n         connection and one for
      the reverse, may be used.\n      R: Connection Replace\n         The Connection
      Replace flag applies only to the Add Branch\n         message and is not used
      in any other Connection Management\n         messages.  The R flag is used in
      cases when creation of\n         multipoint-to-point connections is undesirable
      (e.g., POTS\n         applications where fan-in is meaningless).  If the R flag
      is\n         set, the new connection replaces any existing connection if the\n
      \        label is already in use at the same Output Port.\n         The Connection
      Replace mechanism allows a single Add Connection\n         command to function
      as either a Move Branch message or a\n         combination of Delete Branch/Add
      Branch messages.  This\n         mechanism is provided to support existing 64k
      call handling\n         applications, such as emulating 64k voice switches.\n
      \        The use of R flag is optional and MUST be pre-configured in the\n         Port
      Management message [see section 6.1] to activate its use.\n         The R flag
      MUST NOT be set if it is not pre-configured with the\n         Port Management
      message.  The switch MUST then return a Failure\n         Response message:
      \"36:  Replace of connection is not activated\n         on switch\".  Information
      about whether the function is active\n         or not, can be obtained by using
      the Port Configuration message\n         [see section 8.2].\n         The R
      flag MUST NOT be set if either the M flag or the B flag\n         is set.  If
      a switch receives an Add connection request that\n         has the R flag set
      with either the B or the M flag set, it MUST\n         return a failure response
      message of: \"37:  Connection\n         replacement mode cannot be combined
      with Bi-directional or\n         Multicast mode\"\n   If the connection specified
      by the Input Port and Input Label fields\n   does not already exist, it MUST
      be established with the single output\n   branch specified in the request message.
      \ If the Bi-directional Flag\n   in the Flags field is set, the reverse connection
      MUST also be\n   established.  The output branch SHOULD have the QoS attributes\n
      \  specified by the Class of Service field.\n   If the connection specified
      by the Input Port and Input Label fields\n   already exists and the R flag is
      not set, but the specified output\n   branch does not, the new output branch
      MUST be added.  The new output\n   branch SHOULD have the QoS attributes specified
      by the Class of\n   Service field.\n   If the connection specified by the Input
      Port and Input Label fields\n   already exists and the specified output branch
      also already exists,\n   the QoS attributes of the connection, specified by
      the Class of\n   Service field, if different from the request message, SHOULD
      be\n   changed to that in the request message.  A success response message\n
      \  MUST be sent if the Result field of the request message is \"AckAll\".\n
      \  This allows the controller to periodically reassert the state of a\n   connection
      or to change its priority.  If the result field of the\n   request message is
      \"NoSuccessAck\" a success response message SHOULD\n   NOT be returned.  This
      may be used to reduce the traffic on the\n   control link for messages that
      are reasserting a previously\n   established state.  For messages that are reasserting
      a previously\n   established state, the switch MUST always check that this state
      is\n   correctly established in the switch hardware (i.e., the actual\n   connection
      tables used to forward cells or frames).\n   If the connection specified by
      the Input Port and Input Label fields\n   already exists, and the Bi-directional
      Flag in the Flags field is\n   set, a failure response MUST be returned indicating:
      \"15:  Point-to-\n   point bi-directional connection already exists\".\n   It
      should be noted that different switches support multicast in\n   different ways.
      \ There may be a limit to the total number of point-\n   to-multipoint or multipoint-to-point
      connections certain switches can\n   support, and possibly a limit on the maximum
      number of branches that\n   a point-to-multipoint or multipoint-to-point connection
      may specify.\n   Some switches also impose a limit on the number of different
      Label\n   values that may be assigned e.g., to the output branches of a point-\n
      \  to-multipoint connection.  Many switches are incapable of supporting\n   more
      than a single branch of any particular point-to-multipoint\n   connection on
      the same output port.  Specific failure codes are\n   defined for some of these
      conditions.\n"
    - contents:
      - "4.2.1  ATM specific procedures:\n   To request an ATM virtual path connection
        the ATM Virtual Path\n   Connection (VPC) Add Branch message is:\n      Message
        Type = 26\n   An ATM virtual path connection can only be established between
        ATM\n   ports, i.e., ports with the \"ATM\" Label Type attribute.  If an ATM\n
        \  VPC Add Branch message is received and either the switch input port\n   specified
        by the Input Port field or the switch output port specified\n   by the Output
        Port field is not an ATM port, a failure response\n   message MUST be returned
        indicating, \"28: ATM Virtual path switching\n   is not supported on non-ATM
        ports\".\n   If an ATM VPC Add Branch message is received and the switch input\n
        \  port specified by the Input Port field does not support virtual path\n
        \  switching, a failure response message MUST be returned indicating,\n   \"24:
        ATM virtual path switching is not supported on this input port\".\n   If an
        ATM virtual path connection already exists on the virtual path\n   specified
        by the Input Port and Input VPI fields, a failure response\n   message MUST
        be returned, indicating \"27:  Attempt to add an ATM\n   virtual channel connection
        branch to an existing virtual path\n   connection\".  For the VPC Add Branch
        message, if a virtual channel\n   connection already exists on any of the
        virtual channels within the\n   virtual path specified by the Input Port and
        Input VPI fields, a\n   failure response message MUST be returned indicating,
        \"26: Attempt to\n   add an ATM virtual path connection branch to an existing
        virtual\n   channel connection\".\n"
      title: '4.2.1  ATM specific procedures:'
    title: 4.2  Add Branch Message
  - contents:
    - "4.3  Delete Tree Message\n   The Delete Tree message is a Connection Management
      message used to\n   delete an entire connection.  All remaining branches of
      the\n   connection are deleted.  A connection is defined by the Input Port\n
      \  and the Input Label fields.  The Output Port and Output Label fields\n   are
      not used in this message.  The Delete Tree message is:\n      Message Type =
      18\n   If the Result field of the request message is \"AckAll\" a success\n
      \  response message MUST be sent upon successful deletion of the\n   specified
      connection.  The success message MUST NOT be sent until the\n   delete operation
      has been completed and if possible, not until all\n   data on the connection,
      queued for transmission, has been\n   transmitted.\n"
    title: 4.3  Delete Tree Message
  - contents:
    - "4.4  Verify Tree Message\n   The Verify Tree message has been removed from
      this version of GSMP.\n      Message Type = 19\n   If a request message is received
      with Message Type = 19, a failure\n   response MUST be returned with the Code
      field indicating:\n   \"3: The specified request is not implemented on this
      switch.\".\n"
    title: 4.4  Verify Tree Message
  - contents:
    - "4.5  Delete All Input Port Message\n   The Delete All Input Port message is
      a connection management message\n   used to delete all connections on a switch
      input port.  All\n   connections that originate at the specified input port
      MUST be\n   deleted.  On completion of the operation all dynamically assigned\n
      \  Label values for the specified port MUST be unassigned, i.e., there\n   MUST
      be no connections established in the Label space that GSMP\n   controls on this
      port.  The Service Selectors, Output Port, Input\n   Label and Output Label
      fields are not used in this message.  The\n   Delete All Input Port message
      is:\n      Message Type = 20\n   If the Result field of the request message
      is \"AckAll\", a success\n   response message MUST be sent upon completion of
      the operation.  The\n   success response message MUST NOT be sent until the
      operation has\n   been completed.\n   The following failure response messages
      may be returned to a Delete\n   All Input Port request.\n         3: The specified
      request is not implemented on this switch.\n         4: One or more of the specified
      ports does not exist.\n         5: Invalid Port Session Number.\n   If any field
      in a Delete All Input Port message not covered by the\n   above failure codes
      is invalid, a failure response MUST be returned\n   indicating: \"2: Invalid
      request message\".  Else, the Delete All Input\n   Port operation MUST be completed
      successfully and a success message\n   returned.  No other failure messages
      are permitted.\n"
    title: 4.5  Delete All Input Port Message
  - contents:
    - "4.6  Delete All Output Port Message\n   The Delete All message is a connection
      management message used to\n   delete all connections on a switch output port.
      \ All connections that\n   have the specified output port MUST be deleted.  On
      completion of the\n   operation all dynamically assigned Label values for the
      specified\n   port MUST be unassigned, i.e., there MUST be no connections\n
      \  established in the Label space that GSMP controls on this port.  The\n   Service
      Selectors, Input Port, Input Label and Output Label fields\n   are not used
      in this message.  The Delete All Output Port message is:\n      Message Type
      = 21\n   If the Result field of the request message is \"AckAll\", a success\n
      \  response message MUST be sent upon completion of the operation.  The\n   success
      response message MUST NOT be sent until the operation has\n   been completed.\n
      \  The following failure response messages may be returned to a Delete\n   All
      Output Port request.\n         3: The specified request is not implemented on
      this switch.\n         4: One or more of the specified ports does not exist.\n
      \        5: Invalid Port Session Number.\n   If any field in a Delete All Output
      Port message not covered by the\n   above failure codes is invalid, a failure
      response MUST be returned\n   indicating: \"2: Invalid request message\".  Else,
      the delete all\n   operation MUST be completed successfully and a success message\n
      \  returned.  No other failure messages are permitted.\n"
    title: 4.6  Delete All Output Port Message
  - contents:
    - "4.7  Delete Branches Message\n   The Delete Branches message is a connection
      management message used\n   to request one or more delete branch operations.
      \ Each delete branch\n   operation deletes a branch of a channel, or in the
      case of the last\n   branch of a connection, it deletes the connection.  The
      Delete\n   Branches message is:\n      Message Type = 17\n   The request message
      has the following format:\n    0                   1                   2                   3\n
      \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |    Version    | Message Type  |    Result     |     Code      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | Partition ID  |            Transaction Identifier             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |I|      SubMessage Number      |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |x|x|x|x|x|x|x|x|x|x|x|x|x|x|x|x|      Number of Elements       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                                                               |\n   ~                    Delete
      Branch Elements                     ~\n   |                                                               |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      Note:
      Fields and Parameters that have been explained in the\n         description
      of the general connection message will not be\n         explained in this section.
      \ Please refer to section 4.1 for\n         details.\n      Number of Elements\n
      \        Specifies the number of Delete Branch Elements to follow in the\n         message.
      \ The number of Delete Branch Elements in a Delete\n         Branches message
      MUST NOT cause the packet length to exceed the\n         maximum transmission
      unit defined by the encapsulation.\n   Each Delete Branch Element specifies
      a branch to be deleted and has\n   the following structure:\n    0                   1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | Error |x|x|x|x|x|x|x|x|x|x|x|x|       Element Length          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                      Port Session Number                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                          Input Port                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                          Output Port                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |x|S|x|x|                                                       |\n   +-+-+-+-+
      \                 Input Label                          |\n   ~                                                               ~\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |x|S|x|x|
      \                                                      |\n   +-+-+-+-+                 Output
      Label                          |\n   ~                                                               ~\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      Note:
      Fields and Parameters that have been explained in the\n         description
      of the general connection message will not be\n         explained in this section.
      \ Please refer to section 4.1 for\n         details.\n      Error\n         Is
      used to return a failure code indicating the reason for the\n         failure
      of a specific Delete Branch Element in a Delete\n         Branches failure response
      message.  The Error field is not used\n         in the request message and MUST
      be set to zero.  A value of\n         zero is used to indicate that the delete
      operation specified by\n         this Delete Branch Element was successful.
      \ Values for the\n         other failure codes are specified in Section 12,
      \"Failure\n         Response Codes\".\n         All other fields of the Delete
      Branch Element have the same\n         definition as specified for the other
      connection management\n         messages.\n   In each Delete Branch Element,
      a connection is specified by the Input\n   Port and Input Label fields.  The
      specific branch to be deleted is\n   indicated by the Output Port and Output
      Label fields.\n   If the Result field of the Delete Branches request message
      is\n   \"AckAll\" a success response message MUST be sent upon successful\n
      \  deletion of the branches specified by all of the Delete Branch\n   Elements.
      \ The success response message MUST NOT be sent until all of\n   the delete
      branch operations have been completed.  The success\n   response message is
      only sent if all of the requested delete branch\n   operations were successful.
      \ No Delete Branch Elements are returned\n   in a Delete Branches success response
      message and the Number of\n   Elements field MUST be set to zero.\n   If there
      is a failure in any of the Delete Branch Elements, a Delete\n   Branches failure
      response message MUST be returned.  The Delete\n   Branches failure response
      message is a copy of the request message\n   with the Code field of the entire
      message set to \"10: General Message\n   Failure\" and the Error field of each
      Delete Branch Element indicating\n   the result of each requested delete operation.
      \ A failure in any of\n   the Delete Branch Elements MUST NOT interfere with
      the processing of\n   any other Delete Branch Elements.\n"
    title: 4.7  Delete Branches Message
  - contents:
    - "4.8  Move Output Branch Message\n   The Move Output Branch message is used
      to move a branch of an\n   existing connection from its current output port
      label to a new\n   output port label in a single atomic transaction.  The Move
      Output\n   Branch connection management message has the following format for\n
      \  both request and response messages:\n    0                   1                   2
      \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |    Version    | Message Type  |    Result     |     Code      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | Partition ID  |            Transaction Identifier             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |I|      SubMessage Number      |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                      Port Session Number                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                           Input Port                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                    Input Service Selector                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                        Old Output Port                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                        New Output Port                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                    Output Service Selector                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |IQS|OQS|P|x|N|O|             Adaptation Method                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |x|S|x|x|                                                       |\n   +-+-+-+-+
      \                 Input Label                          |\n   ~                                                               ~\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |x|S|x|x|
      \                                                      |\n   +-+-+-+-+               Old
      Output Label                        |\n   ~                                                               ~\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |x|S|x|x|
      \                                                      |\n   +-+-+-+-+                New
      Output Label                       |\n   ~                                                               ~\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   When
      the value of either IQS or OQS is set to 0b10 then the following\n   Traffic
      Parameters Block is appended to the above message:\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |Input TC Flags |x x x x x x x x x x x x x x x x x x x x x x x x|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                                                               |\n   ~               Input
      Traffic Parameters Block                  ~\n   |                                                               |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |Output
      TC Flags|x x x x x x x x x x x x x x x x x x x x x x x x|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                                                               |\n   ~              Output
      Traffic Parameters Block                  ~\n   |                                                               |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      Note:
      Fields and Parameters that have been explained in the\n         description
      of the general connection message will not be\n         explained in this section.
      \ Please refer to section 4.1 for\n         details.\n   The Move Output Branch
      message is a connection management message\n   used to move a single output
      branch of connection from its current\n   output port and Output Label, to a
      new output port and Output Label\n   on the same connection.  None of the connection's
      other output\n   branches are modified.  When the operation is complete the
      original\n   Output Label on the original output port will be deleted from the\n
      \  connection.\n   The Move Output Branch message is:\n      Message Type =
      22\n   For the Move Output Branch message, if the connection specified by\n
      \  the Input Port and Input Label fields already exists, and the output\n   branch
      specified by the Old Output Port and Old Output Label fields\n   exists as a
      branch on that connection, the output branch specified by\n   the New Output
      Port and New Output Label fields is added to the\n   connection and the branch
      specified by the Old Output Port and Old\n   Output Label fields is deleted.
      \ If the Result field of the request\n   message is \"AckAll\", a success response
      message MUST be sent upon\n   successful completion of the operation.  The success
      response message\n   MUST NOT be sent until the Move Branch operation has been
      completed.\n   For the Move Output Branch message, if the connection specified
      by\n   the Input Port and Input Label fields already exists, but the output\n
      \  branch specified by the Old Output Port and Old Output Label fields\n   does
      not exist as a branch on that connection, a failure response\n   MUST be returned
      with the Code field indicating, \"12: The specified\n   branch does not exist\".\n"
    - contents:
      - "4.8.1  ATM Specific Procedures:\n   The ATM VPC Move Output Branch message
        is a connection management\n   message used to move a single output branch
        of a virtual path\n   connection from its current output port and output VPI,
        to a new\n   output port and output VPI on the same virtual channel connection.\n
        \  None of the other output branches are modified.  When the operation\n   is
        complete the original output VPI on the original output port will\n   be deleted
        from the connection.\n   The VPC Move Branch message is:\n       Message Type
        = 27\n   For the VPC Move Output Branch message, if the virtual path\n   connection
        specified by the Input Port and Input VPI fields already\n   exists, and the
        output branch specified by the Old Output Port and\n   Old Output VPI fields
        exists as a branch on that connection, the\n   output branch specified by
        the New Output Port and New Output VPI\n   fields is added to the connection
        and the branch specified by the Old\n   Output Port and Old Output VPI fields
        is deleted.  If the Result\n   field of the request message is \"AckAll\",
        a success response message\n   MUST be sent upon successful completion of
        the operation.  The\n   success response message MUST NOT be sent until the
        Move Branch\n   operation has been completed.\n   For the VPC Move Output
        Branch message, if the virtual path\n   connection specified by the Input
        Port and Input VPI fields already\n   exists, but the output branch specified
        by the Old Output Port and\n   Old Output VPI fields does not exist as a branch
        on that connection,\n   a failure response MUST be returned with the Code
        field indicating,\n   \"12: The specified branch does not exist\".\n   If
        the virtual channel connection specified by the Input Port and\n   Input Label
        fields; or the virtual path connection specified by the\n   Input Port and
        Input VPI fields; does not exist, a failure response\n   MUST be returned
        with the Code field indicating, \"11: The specified\n   connection does not
        exist\".\n   If the output branch specified by the New Output Port, New Output\n
        \  VPI, and New Output VCI fields for a virtual channel connection; or\n   the
        output branch specified by the New Output Port and New Output VPI\n   fields
        for a virtual path connection; is already in use by any\n   connection other
        than that specified by the Input Port and Input\n   Label fields, then the
        resulting output branch will have multiple\n   input branches.  If multiple
        point-to-point connections share the\n   same output branch, the result will
        be a multipoint-to-point\n   connection.  If multiple point-to-multipoint
        trees share the same\n   output branches, the result will be a multipoint-to-multipoint\n
        \  connection.\n"
      title: '4.8.1  ATM Specific Procedures:'
    title: 4.8  Move Output Branch Message
  - contents:
    - "4.9  Move Input Branch Message\n   The Move Input Branch message is used to
      move a branch of an existing\n   connection from its current input port label
      to a new input port\n   label in a single atomic transaction.  The Move Input
      Branch\n   connection management message has the following format for both\n
      \  request and response messages:\n    0                   1                   2
      \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |    Version    | Message Type  |    Result     |     Code      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | Partition ID  |            Transaction Identifier             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |I|      SubMessage Number      |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                      Port Session Number                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                           Output Port                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                     Input Service Selector                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                        Old Input Port                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                        New Input Port                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                     Output Service Selector                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |IQS|OQS|P|x|N|O|             Adaptation Method                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |x|S|x|x|                                                       |\n   +-+-+-+-+
      \                Output Label                          |\n   ~                                                               ~\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |x|S|x|x|
      \                                                      |\n   +-+-+-+-+                Old
      Input Label                        |\n   ~                                                               ~\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |x|S|x|x|
      \                                                      |\n   +-+-+-+-+                New
      Input Label                        |\n   ~                                                               ~\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   When
      the value of either IQS or OQS is set to 0b10, then the\n   following Traffic
      Parameters Block is appended to the above message:\n    0                   1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |Input TC Flags |x x x x x x x x x x x x x x x x x x x x x x x x|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                                                               |\n   ~               Input
      Traffic Parameters Block                  ~\n   |                                                               |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |Output
      TC Flags|x x x x x x x x x x x x x x x x x x x x x x x x|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                                                               |\n   ~              Output
      Traffic Parameters Block                  ~\n   |                                                               |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      Note:
      Fields and Parameters that have been explained in the\n         description
      of the general connection message will not be\n         explained in this section.
      \ Please refer to section 4.1 for\n         details.\n   The Move Input Branch
      message is a connection management message used\n   to move a single input branch
      of connection from its current input\n   port and Input Label, to a new input
      port and Input Label on the same\n   connection.  None of the connection's other
      input branches are\n   modified.  When the operation is complete, the original
      Input Label\n   on the original input port will be deleted from the connection.\n
      \  The Move Input Branch message is:\n      Message Type = 23\n   For the Move
      Input Branch message, if the connection specified by the\n   Output Port and
      Output Label fields already exists, and the input\n   branch specified by the
      Old Input Port and Old Input Label fields\n   exists as a branch on that connection,
      the input branch specified by\n   the New Input Port and New Input Label fields
      is added to the\n   connection and the branch specified by the Old Input Port
      and Old\n   Input Label fields is deleted.  If the Result field of the request\n
      \  message is \"AckAll\", a success response message MUST be sent upon\n   successful
      completion of the operation.  The success response message\n   MUST NOT be sent
      until the Move Input Branch operation has been\n   completed.\n   For the Move
      Input Branch message, if the connection specified by the\n   Output Port and
      Output Label fields already exists, but the input\n   branch specified by the
      Old Input Port and Old Input Label fields\n   does not exist as a branch on
      that connection, a failure response\n   MUST be returned with the Code field
      indicating, \"12: The specified\n   branch does not exist\".\n"
    - contents:
      - "4.9.1  ATM Specific Procedures:\n   The ATM VPC Move Input Branch message
        is a connection management\n   message used to move a single input branch
        of a virtual path\n   connection from its current input port and input VPI,
        to a new input\n   port and input VPI on the same virtual channel connection.
        \ None of\n   the other input branches are modified.  When the operation is\n
        \  complete, the original input VPI on the original input port will be\n   deleted
        from the connection.\n   The VPC Move Input Branch message is:\n       Message
        Type = 28\n   For the VPC Move Input Branch message, if the virtual path connection\n
        \  specified by the Output Port and Output VPI fields already exists,\n   and
        the input branch specified by the Old Input Port and Old Input\n   VPI fields
        exists as a branch on that connection, the input branch\n   specified by the
        New Input Port and New Input VPI fields is added to\n   the connection and
        the branch specified by the Old Input Port and Old\n   Input VPI fields is
        deleted.  If the Result field of the request\n   message is \"AckAll\" a success
        response message MUST be sent upon\n   successful completion of the operation.
        \ The success response message\n   MUST NOT be sent until the Move Input Branch
        operation has been\n   completed.\n   For the VPC Move Input Branch message,
        if the virtual path connection\n   specified by the Output Port and Output
        VPI fields already exists,\n   but the input branch specified by the Old Input
        Port and Old Input\n   VPI fields does not exist as a branch on that connection,
        a failure\n   response MUST be returned with the Code field indicating, \"12:
        The\n   specified branch does not exist\".\n   If the virtual channel connection
        specified by the Output Port and\n   Output Label fields, or if the virtual
        path connection specified by\n   the Output Port and Output VPI fields does
        not exist, a failure\n   response MUST be returned with the Code field indicating,
        \"11: The\n   specified connection does not exist\".\n   If the input branch
        specified by the New Input Port, New Input VPI,\n   and New Input VCI fields
        for a virtual channel connection, or the\n   input branch specified by the
        New Input Port and New Input VPI fields\n   for a virtual path connection,
        is already in use by any connection\n   other than that specified by the Output
        Port and Output Label fields,\n   then the resulting input branch will have
        multiple output branches.\n   If multiple point-to-point connections share
        the same input branch,\n   the result will be a point-to-multipoint connection.
        \ If multiple\n   multipoint-to-point trees share the same input branches,
        the result\n   will be a multipoint-to-multipoint connection.\n"
      title: '4.9.1  ATM Specific Procedures:'
    title: 4.9  Move Input Branch Message
  title: 4.  Connection Management Messages
- contents:
  - "5.  Reservation Management Messages\n   GSMP allows switch resources (e.g., bandwidth,
    buffers, queues,\n   labels, etc.) to be reserved for connections before the connections\n
    \  themselves are established.  This is achieved through the\n   manipulation
    of Reservations in the switch.\n   Reservations are hard state objects in the
    switch that can be created\n   by the controller by sending a Reservation Request
    message.  Each\n   Reservation is uniquely identified by an identifying number
    called a\n   Reservation ID.  Reservation objects can be deleted with the Delete\n
    \  Reservation message or the Delete All Reservations message.  A\n   reservation
    object is also deleted when the Reservation is deployed\n   by specifying a Reservation
    ID in a valid Add Branch message.\n   The reserved resources MUST remain reserved
    until either the\n   reservation is deployed, in which case the resources are
    applied to a\n   branch, or the reservation is explicitly deleted (with a Delete\n
    \  Reservation message or a Delete All Reservations message), in which\n   case
    the resources are freed.  Reservations and reserved resources\n   are deleted
    if the switch is reset.\n   A Reservation object includes its Reservation ID plus
    all the\n   connection state associated with a branch with the exception that
    the\n   branch's input label and/or output label may be unspecified.  The\n   Request
    Reservation message is therefore almost identical to the Add\n   Branch message.\n
    \  The switch establishes the maximum number of reservations it can\n   store
    by setting the value of Max Reservations in the Switch\n   Configuration response
    message.  The switch indicates that it does\n   not support reservations by setting
    Max Reservations to 0.  The valid\n   range of Reservation IDs is 1 to Max Reservations).\n"
  - contents:
    - "5.1  Reservation Request Message\n   The Reservation Request message creates
      a Reservation in the switch\n   and reserves switch resources for a connection
      that may later be\n   established using an Add Branch message.  The Reservation
      Request\n   Message is:\n      Message Type = 70\n   The Reservation Request
      message has the following format for the\n   request message:\n    0                   1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |    Version    | Message Type  |    Result     |     Code      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | Partition ID  |            Transaction Identifier             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |I|      SubMessage Number      |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                      Port Session Number                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                         Reservation ID                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                          Input Port                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                     Input Service Selector                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                          Output Port                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                     Output Service Selector                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |IQS|OQS|P|x|N|O|             Adaptation Method                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |x|S|M|B|                                                       |\n   +-+-+-+-+
      \                 Input Label                          |\n   ~                                                               ~\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |x|S|M|x|
      \                                                      |\n   +-+-+-+-+                 Output
      Label                          |\n   ~                                                               ~\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   When
      the value of either IQS or OQS is set to 0b10 then the following\n   Traffic
      Parameters Block is appended to the above message:\n    0                   1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |Input TC Flags |x x x x x x x x x x x x x x x x x x x x x x x x|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                                                               |\n   ~               Input
      Traffic Parameters Block                  ~\n   |                                                               |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |Output
      TC Flags|x x x x x x x x x x x x x x x x x x x x x x x x|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                                                               |\n   ~              Output
      Traffic Parameters Block                  ~\n   |                                                               |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      Note:
      Fields and Parameters that have been explained in the\n         description
      of the general connection message will not be\n         explained in this section.
      \ Please refer to section 4.1 for\n         details.\n   All the fields of the
      Reservation Request message have the same\n   meanings as they do in the Add
      Branch message with the following\n   exceptions:\n      Reservation ID\n         Specifies
      the Reservation ID of the Reservation.  If the\n         numerical value of
      the Reservation ID is greater than the value\n         of the Max Reservations
      (from the Switch Configuration\n         message), a failure response is returned
      indicating \"20:  the\n         Reservation ID out of Range\".  If the value
      of Reservation ID\n         matches that of an extant Reservation, a failure
      response is\n         returned indicating \"22: Reservation ID in use\".\n      Input
      Label\n         If a specific input label is specified, then that label is\n
      \        reserved along with the required resources.  If the Input Label\n         is
      0 then the switch reserves the resources, but will not bind\n         them to
      a label until the add branch command is given, which\n         references the
      Reservation Id.  If the input label is 0, then\n         all stacked labels
      MUST also be zeroed.\n      Output Label\n         If a specific Output Label
      is specified then that label is\n         reserved along with the required resources.
      \ If the Output\n         Label is 0 then the switch reserves the resources,
      but will not\n         bind them to a label until the add branch command is
      given\n         which references the Reservation Id.  If the Output Label is
      0,\n         then all stacked labels MUST also be zeroed\n   When the switch
      receives a valid Reservation Request it reserves all\n   the appropriate switch
      resources needed to establish a branch with\n   corresponding attributes.  If
      sufficient resources are not available,\n   a failure response is returned indicating
      \"18: Insufficient\n   resources\".  Other failure responses are as defined
      for the Add\n   Branch message.\n"
    title: 5.1  Reservation Request Message
  - contents:
    - "5.2  Delete Reservation Message\n   The Delete Reservation message deletes
      a Reservation object in the\n   switch and frees the reserved switch resources
      associated with that\n   reservation object.  The Reservation Request Message
      is:\n      Message Type = 71\n   The Delete Reservation message has the following
      format:\n    0                   1                   2                   3\n
      \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |    Version    | Message Type  |    Result     |     Code      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | Partition ID  |            Transaction Identifier             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |I|      SubMessage Number      |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                      Port Session Number                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                         Reservation ID                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  If the Reservation ID matches that of an extant Reservation then the\n   reservation
      is deleted and corresponding switch resources are freed.\n   If the numerical
      value of the Reservation ID is greater than the\n   value of the Max Reservations
      (from the Switch Configuration\n   message), a failure response is returned
      indicating \"20: Reservation\n   ID out of Range\".  If the value of Reservation
      ID does not match that\n   of any extant Reservation, a failure response is
      returned indicating\n   \"23: Non-existent reservation ID\".\n"
    title: 5.2  Delete Reservation Message
  - contents:
    - "5.3  Delete All Reservations Message\n   The Delete All Reservation message
      deletes all extant Reservation\n   objects in the switch and frees the reserved
      switch resources of\n   these reservations.  The Reservation Request Message
      is:\n      Message Type = 72\n   The Delete All Reservation message has the
      following format:\n    0                   1                   2                   3\n
      \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |    Version    | Message Type  |    Result     |     Code      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | Partition ID  |            Transaction Identifier             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |I|      SubMessage Number      |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
    title: 5.3  Delete All Reservations Message
  title: 5.  Reservation Management Messages
- contents:
  - '6.  Management Messages

    '
  - contents:
    - "6.1  Port Management Message\n   The Port Management message allows a port
      to be brought into service,\n   to be taken out of service, to be set to loop
      back, reset, or to\n   change the transmit data rate.  Only the Bring Up and
      the Reset Input\n   Port functions change the connection state (established
      connections)\n   on the input port.  Only the Bring Up function changes the
      value of\n   the Port Session Number.  The Port Management message MAY also
      be\n   used for enabling the replace connection mechanism.  The Port\n   Management
      message is also used as part of the Event Message flow\n   control mechanism.\n
      \  If the Result field of the request message is \"AckAll\", a success\n   response
      message MUST be sent upon successful completion of the\n   operation.  The success
      response message MUST NOT be sent until the\n   operation has been completed.
      \ The Port Management Message is:\n      Message Type = 32\n   The Port Management
      message has the following format for the request\n   and success response messages:\n
      \   0                   1                   2                   3\n    0 1 2
      3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |    Version    | Message Type  |    Result     |     Code      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | Partition ID  |            Transaction Identifier             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |I|      SubMessage Number      |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                             Port                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                      Port Session Number                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                     Event Sequence Number                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |R|x|x|x|x|x|x|x|   Duration    |          Function             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |           Event Flags         |        Flow Control Flags     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                      Transmit Data Rate                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     Note: Fields and Parameters that have been explained in the\n         description
      of the general messages will not be explained in\n         this section.  Please
      refer to section 3.1 for details.\n      Event Sequence Number\n         The
      success response message gives the current value of the\n         Event Sequence
      Number of the switch port indicated by the Port\n         field.  The Event
      Sequence Number is set to zero when the port\n         is initialised.  It is
      incremented by one each time the port\n         detects an asynchronous event
      that the switch would normally\n         report via an Event message.  If the
      Event Sequence Number in\n         the success response differs from the Event
      Sequence Number of\n         the most recent Event message received for that
      port, events\n         have occurred that were not reported via an Event message.\n
      \        This is most likely to be due to the flow control that\n         restricts
      the rate at which a switch can send Event messages\n         for each port.
      \ In the request message this field is not used.\n      R: Connection Replace\n
      \        The R flag shall only be checked when the Function field = 1\n         (Bring
      Up).  If the R flag is set in the Port Management\n         request message,
      it indicates that a switch controller requests\n         the switch port to
      support the Connection Replace mechanism.\n         Connection Replace behaviour
      is described in chapter 4.2.  If a\n         switch does not support the Connection
      Replace mechanism, it\n         MUST reply with the failure response:  \"45:
      Connection Replace\n         mechanism not supported on switch\" and reset the
      R-flag.  Upon\n         successful response, the R flag SHOULD remain set in
      the\n         response message.\n      Duration\n         Is the length of time
      in seconds, that any of the loopback\n         states remain in operation.  When
      the duration has expired, the\n         port will automatically be returned
      to service.  If another\n         Port Management message is received for the
      same port before\n         the duration has expired, the loopback will continue
      to remain\n         in operation for the length of time specified by the Duration\n
      \        field in the new message.  The Duration field is only used in\n         request
      messages with the Function field set to Internal\n         Loopback, External
      Loopback, or Bothway Loopback.\n      Function\n         Specifies the action
      to be taken.  The specified action will be\n         taken regardless of the
      current status of the port (Available,\n         Unavailable, or any Loopback
      state).  If the specified function\n         requires a new Port Session Number
      to be generated, the new\n         Port Session Number MUST be returned in the
      success response\n         message.  The defined values of the Function field
      are:\n         Bring Up:\n            Function = 1.  Bring the port into service.
      \ All connections\n            that originate at the specified input port MUST
      be deleted\n            and a new Port Session Number MUST be selected, preferably\n
      \           using some form of random number.  On completion of the\n            operation
      all dynamically assigned Label values for the\n            specified input port
      MUST be unassigned, i.e., no\n            connections will be established in
      the Label space that GSMP\n            controls on this input port.  Afterwards,
      the Port Status of\n            the port will be Available.\n         Take Down:\n
      \           Function = 2.  Take the port out of service.  Any data\n            received
      at this port will be discarded.  No data will be\n            transmitted from
      this port.  Afterwards, the Port Status of\n            the port will be Unavailable.\n
      \           The behaviour is undefined if the port is taken down over\n            which
      the GSMP session that controls the switch is running.\n            (In this
      case the most probable behaviour would be for the\n            switch either
      to ignore the message or to terminate the\n            current GSMP session
      and to initiate another session,\n            possibly with the backup controller,
      if any.)  The correct\n            method to reset the link over which GSMP
      is running is to\n            issue an RSTACK message in the adjacency protocol.\n
      \        Internal Loopback:\n            Function = 3.  Data arriving at the
      output port from the\n            switch fabric are looped through to the input
      port to return\n            to the switch fabric.  All of the functions of the
      input\n            port above the physical layer, e.g., header translation,
      are\n            performed upon the looped back data.  Afterwards, the Port\n
      \           Status of the port will be Internal Loopback.\n         External
      Loopback:\n            Function = 4.  Data arriving at the input port from the\n
      \           external communications link are immediately looped back to\n            the
      communications link at the physical layer without\n            entering the
      input port.  None of the functions of the input\n            port, above the
      physical layer are performed upon the looped\n            back data.  Afterwards,
      the Port Status of the port will be\n            External Loopback.\n         Bothway
      Loopback:\n            Function = 5.  Both internal and external loopbacks are\n
      \           performed.  Afterwards, the Port Status of the port will be\n            Bothway
      Loopback.\n         Reset Input Port:\n            Function = 6.  All connections
      that originate at the\n            specified input port MUST be deleted and
      the input and\n            output port hardware re-initialised.  On completion
      of the\n            operation, all dynamically assigned Label values for the\n
      \           specified input port MUST be unassigned, i.e., no\n            connections
      will be established in the Label space that GSMP\n            controls on this
      input port.  The range of labels that may\n            be controlled by GSMP
      on this port will be set to the\n            default values specified in the
      Port Configuration message.\n            The transmit data rate of the output
      port MUST be set to its\n            default value.  The Port Session Number
      is not changed by\n            the Reset Input Port function.  Afterwards, the
      Port Status\n            of the port will be Unavailable.\n         Reset Flags:\n
      \           Function = 7.  This function is used to reset the Event\n            Flags
      and Flow Control Flags.  For each bit that is set in\n            the Event
      Flags field, the corresponding Event Flag in the\n            switch port MUST
      be reset to 0.  For each bit that is set in\n            the Flow Control Flags
      field, the corresponding Flow Control\n            Flag in the switch port MUST
      be toggled; i.e., flow control\n            for the corresponding event is turned
      off if is currently on\n            and it is turned on if it is currently off.
      \ The Port Status\n            of the port is not changed by this function.\n
      \        Set Transmit Data Rate:\n            Function = 8.  Sets the transmit
      data rate of the output\n            port as close as possible to the rate specified
      in the\n            Transmit Data Rate field.  In the success response message,\n
      \           the Transmit Data Rate MUST indicate the actual transmit\n            data
      rate of the output port.  If the transmit data rate of\n            the requested
      output port cannot be changed a failure\n            response MUST be returned
      with the Code field indicating:\n            \"43: The transmit data rate of
      this output port cannot be\n            changed\".  If the transmit data rate
      of the requested output\n            port can be changed, but the value of the
      Transmit Data Rate\n            field is beyond the range of acceptable values,
      a failure\n            response MUST be returned with the Code field indicating:\n
      \           \"44: Requested transmit data rate out of range for this\n            output
      port\".  In the failure response message, the Transmit\n            Data Rate
      MUST contain the same value as contained in the\n            request message
      that caused the failure.  The transmit data\n            rate of the output
      port is not changed by the Bring Up, Take\n            Down, or any of the Loopback
      functions.  It is returned to\n            the default value by the Reset Input
      Port function.\n      Transmit Data Rate\n         This field is only used in
      request and success response\n         messages with the Function field set
      to \"Set Transmit Data\n         Rate\".  It is used to set the output data
      rate of the output\n         port.  It is specified in cells/s and bytes/s.
      \ If the Transmit\n         Data Rate field contains the value 0xFFFFFFFF the
      transmit data\n         rate of the output port SHOULD be set to the highest
      valid\n         value.\n      Event Flags\n         Field in the request message
      that is used to reset the Event\n         Flags in the switch port indicated
      by the Port field.  Each\n         Event Flag in a switch port corresponds to
      a type of Event\n         message.  When a switch port sends an Event message,
      it sets\n         the corresponding Event Flag on that port.  Depending on the\n
      \        setting in the Flow Control Flag, a port is either subject to\n         flow
      control or not.  If it is subject to flow control, then it\n         is not
      permitted to send another Event message of the same type\n         before the
      Event Flag has been reset.  To reset an event flag,\n         the Function field
      in the request message is set to \"Reset\n         Flags\".  For each bit that
      is set in the Event Flags field, the\n         corresponding Event Flag in the
      switch port is reset.\n         The Event Flags field is only used in a request
      message with\n         the Function field set to \"Reset Event Flags\".  For
      all other\n         values of the Function field, the Event Flags field is not\n
      \        used.  In the success response message the Event Flags field\n         MUST
      be set to the current value of the Event Flags for the\n         port, after
      the completion of the operation specified by the\n         request message,
      for all values of the Function field.  Setting\n         the Event Flags field
      to all zeros in a \"Reset Event Flags\"\n         request message allows the
      controller to obtain the current\n         state of the Event Flags and the
      current Event Sequence Number\n         of the port without changing the state
      of the Event Flags.\n         The correspondence between the types of Event
      messages and the\n         bits of the Event Flags field is as follows:\n                                    1\n
      \               0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \              |U|D|I|N|Z|A|x|x|x|x|x|x|x|x|x|x|\n               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \              U: Port Up          Bit  0, (most significant bit)\n               D:
      Port Down        Bit  1,\n               I: Invalid Label    Bit  2,\n               N:
      New Port         Bit  3,\n               Z: Dead Port        Bit  4,\n               A:
      Adjacency Event  Bit  5,\n               x: Unused           Bits 6-15.\n      Flow
      Control Flags Field\n         The flags in this field are used to indicate whether
      the flow\n         control mechanism described in the Events Flag field is turned\n
      \        on or not.  If the Flow Control Flag is set, then the flow\n         control
      mechanism for that event on that port is activated.  To\n         toggle the
      flow control mechanism, the Function field in the\n         request message
      is set to \"Reset Flags\".  When doing a reset,\n         for each flag that
      is set in the Flow Control Flags field, the\n         corresponding flow control
      mechanism MUST be toggled.\n         The Flow Control Flags correspond to the
      same event definitions\n         as defined for the Event Flag.\n"
    title: 6.1  Port Management Message
  - contents:
    - "6.2  Label Range Message\n   The default label range, Min Label to Max Label,
      is specified for\n   each port by the Port Configuration or the All Ports Configuration\n
      \  messages.  When the protocol is initialised, before the transmission\n   of
      any Label Range messages, the label range of each port will be set\n   to the
      default label range.  (The default label range is dependent\n   upon the switch
      design and configuration and is not specified by the\n   GSMP protocol.)  The
      Label Range message allows the range of labels\n   supported by a specified
      port, to be changed.  Each switch port MUST\n   declare whether it supports
      the Label Range message in the Port\n   Configuration or the All Ports Configuration
      messages.  The Label\n   Range message is:\n      Message Type = 33\n   The
      Label Range message has the following format for the request and\n   success
      response messages:\n    0                   1                   2                   3\n
      \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |    Version    | Message Type  |    Result     |     Code      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | Partition ID  |            Transaction Identifier             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |I|      SubMessage Number      |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                             Port                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                      Port Session Number                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |Q|M|D|x|      Range Count      |          Range Length         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                                                               |\n   ~                       Label
      Range Block                       ~\n   |                                                               |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      Note:
      Fields and Parameters that have been explained in the\n         description
      of the general messages will not be explained in\n         this section.  Please
      refer to section 3.1 for details.\n   Each element of the Label Range Block
      has the following format:\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |x|x|V|C|                                                       |\n   +-+-+-+-+
      \                  Min Label                           |\n   ~                                                               ~\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |x|x|x|x|
      \                                                      |\n   +-+-+-+-+                   Max
      Label                           |\n   ~                                                               ~\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                        Remaining
      Labels                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     Flags\n         Q: Query\n            If the Query flag is set in a request
      message, the switch\n            MUST respond with the current range of valid
      labels.  The\n            current label range is not changed by a request message
      with\n            the Query flag set.  If the Query flag is zero, the message\n
      \           is requesting a label change operation.\n         M: Multipoint
      Query\n            If the Multipoint Query flag is set the switch MUST respond\n
      \           with the current range of valid specialized multipoint\n            labels.
      \ The current label range is not changed by a request\n            message with
      the Multipoint Query flag set.\n         D: Non-contiguous Label Range Indicator\n
      \           This flag will be set in a Query response if the labels\n            available
      for assignment belong to a non-contiguous set.\n         V: Label\n            The
      Label flag use is port type specific.\n         C: Multipoint Capable\n            Indicates
      label range that can be used for multipoint\n            connections.\n      Range
      Count\n         Count of Label Range elements contained in the Label Range\n
      \        Block.\n      Range Length\n         Byte count in the Label Range
      Block.\n      Min Label\n         The minimum label value in the range.\n      Max
      Label\n         The maximum label value in the range.\n      Remaining Labels\n
      \        The maximum number of remaining labels that could be requested\n         for
      allocation on the specified port.\n   The success response to a Label Range
      message requesting a change of\n   label range is a copy of the request message
      with the Remaining\n   Labels field updated to the new values after the Label
      Range\n   operation.\n   If the switch is unable to satisfy a request to change
      the Label\n   range, it MUST return a failure response message with the Code
      field\n   set to: \"40: Cannot support one or more requested label ranges\".
      \ In\n   this failure response message, the switch MUST use the Min Label and\n
      \  Max Label fields to suggest a label range that it is able to satisfy.\n   A
      Label Range request message may be issued regardless of the Port\n   Status
      or the Line Status of the target switch port.  If the Port\n   field of the
      request message contains an invalid port (a port that\n   does not exist or
      a port that has been removed from the switch) a\n   failure response message
      MUST be returned with the Code field set to,\n   \"4: One or more of the specified
      ports does not exist\".\n   If the Query flag is set in the request message,
      the switch MUST\n   reply with a success response message containing the current
      range of\n   valid labels that are supported by the port.  The Min Label and
      Max\n   Label fields are not used in the request message.\n   If the Multipoint
      Query flag is set in the request message and the\n   switch does not support
      a range of valid multipoint labels, then the\n   switch MUST reply with a failure
      response message with the Code field\n   set to, \"42: Specialised multipoint
      labels not supported\".  The Min\n   Label and Max Label fields are not used
      in the Multipoint request\n   message.\n   If a label range changes and there
      are extant connection states with\n   labels used by the previous label range,
      a success response message\n   MUST be returned with the Code field set to,
      \"46: One or more labels\n   are still used in the previous Label Range\".  This
      action indicates\n   that the label range has successfully changed but with
      a warning that\n   there are extant connection states for the previous label
      range.\n"
    - contents:
      - '6.2.1  Labels

        '
      - contents:
        - "6.2.1.1  ATM Labels\n   If the Label Type = ATM Label, the labels range
          message MUST be\n   interpreted as an ATM Label as shown:\n   0                   1
          \                  2                   3\n   0 1 2 3 4 5 6 7 8 9 0 1 2 3
          4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |x|x|V|C|   ATM Label (0x100)   |          Label Length         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |x|x|x|x|        min VPI        |            min VCI            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |x|x|x|x|   ATM Label (0x100)   |          Label Length         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |x|x|x|x|        max VPI        |            max VCI            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |       Remaining VPI's         |        Remaining VCI's        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \     V: Label\n         If the Label flag is set, the message refers to
          a range of\n         VPI's only.  The Min VCI and Max VCI fields are unused.
          \ If the\n         Label flag is zero the message refers to a range of VCI's
          on\n         either one VPI or on a range of VPI's.\n      Min VPI, Max
          VPI\n         Specify a range of VPI values, Min VPI to Max VPI inclusive.
          \ A\n         single VPI may be specified with a Min VPI and a Max VPI having\n
          \        the same value.  In a request message, if the value of the Max\n
          \        VPI field is less than or equal to the value of the Min VPI\n         field,
          the requested range is a single VPI with a value equal\n         to the
          Min VPI field.  Zero is a valid value.  In a request\n         message,
          if the Query flag is set, and the Label flag is zero,\n         the Max
          VPI field specifies a single VPI and the Min VPI field\n         is not
          used.  The maximum valid value of these fields for both\n         request
          and response messages is 0xFFF.\n      Min VCI, Max VCI\n         Specify
          a range of VCI values, Min VCI to Max VCI inclusive.  A\n         single
          VCI may be specified with a Min VCI and a Max VCI having\n         the same
          value.  In a request message, if the value of the Max\n         VCI field
          is less than or equal to the value of the Min VCI\n         field, the requested
          range is a single VCI with a value equal\n         to the Min VCI field.
          \ Zero is a valid value.  (However, VPI=0,\n         VCI=0 is not available
          as a virtual channel connection as it is\n         used as a special value
          in ATM to indicate an unassigned cell.)\n      Remaining VPI's, Remaining
          VCI's\n         These fields are unused in the request message.  In the
          success\n         response message and in the failure response message these\n
          \        fields give the maximum number of remaining VPI's and VCI's\n         that
          could be requested for allocation on the specified port\n         (after
          completion of the requested operation in the case of the\n         success
          response).  It gives the switch controller an idea of\n         how many
          VPI's and VCI's it could request.  The number given is\n         the maximum
          possible given the constraints of the switch\n         hardware.  There
          is no implication that this number of VPI's\n         and VCI's is available
          to every switch port.\n   If the Query flag and the Label flag are set in
          the request message,\n   the switch MUST reply with a success response message
          containing the\n   current range of valid VPI's that are supported by the
          port.  The Min\n   VPI and Max VPI fields are not used in the request message.\n
          \  If the Query flag is set and the Label flag is zero in the request\n
          \  message, the switch MUST reply with a success response message\n   containing
          the current range of valid VCI's that are supported by the\n   VPI specified
          by the Max VPI field.  If the requested VPI is invalid,\n   a failure response
          MUST be returned indicating: \"13: One or more of\n   the specified Input
          Labels is invalid\".  The Min VPI field is not\n   used in either the request
          or success response messages.\n   If the Query flag is zero and the Label
          flag is set in the request\n   message, the Min VPI and Max VPI fields specify
          the new range of\n   VPI's to be allocated to the input port specified by
          the Port field.\n   The range of VPI's previously allocated to this port
          SHOULD be\n   increased or decreased to the specified value.\n   If the
          Query flag and the Label flag are zero in the request message,\n   the Min
          VCI and Max VCI fields specify the range of VCI's to be\n   allocated to
          each of the VPI's specified by the VPI range.  The range\n   of VCI's previously
          allocated to each of the VPI's within the\n   specified VPI range on this
          port, it SHOULD be increased or decreased\n   to the specified value.  The
          allocated VCI range MUST be the same on\n   each of the VPI's within the
          specified VPI range.\n   If the switch is unable to satisfy a request to
          change the label\n   range, it MUST return a failure response message with
          the Code field\n   set to: \"40: Cannot support one or more requested label
          ranges\".  If\n   the switch is unable to satisfy a request to change the
          VPI, the\n   switch MUST use the Min VPI and Max VPI fields to suggest a
          VPI range\n   that it would be able to satisfy and set the VCI fields to
          zero, or\n   if the switch is unable to satisfy a request to change the
          VCI range\n   on all VPI's within the requested VPI range, the switch MUST
          use the\n   Min VPI, Max VPI, Min VCI, and Max VCI fields to suggest a VPI
          and\n   VCI range that it would be able to satisfy.\n   In all other failure
          response messages for the label range operation,\n   the switch MUST return
          the values of Min VPI, Max VPI, Min VCI, and\n   Max VCI from the request
          message.\n   While switches can typically support all 256 or 4096 VPI's,
          the VCI\n   range that can be supported is often more constrained.  Often
          the Min\n   VCI MUST be 0 or 32.  Typically all VCI's within a particular
          VPI\n   MUST be contiguous.  The hint in the failure response message allows\n
          \  the switch to suggest a label range that it could satisfy in view of\n
          \  its particular architecture.\n   While the Label Range message is defined
          to specify both a range of\n   VPI's and a range of VCI's within each VPI,
          the most likely use is to\n   change either the VPI range or the range of
          VCI's within a single\n   VPI.  It is possible for a VPI to be valid but
          to be allocated no\n   valid VCI's.  Such a VPI could be used for a virtual
          path connection,\n   but to support virtual channel connections it would
          need to be\n   allocated a range of VCI's.\n"
        title: 6.2.1.1  ATM Labels
      - contents:
        - "6.2.1.2  Frame Relay Labels\n   If the Label Type = FR Label, the labels
          range message MUST be\n   interpreted as Frame Relay Labels as shown:\n
          \  0                   1                   2                   3\n   0 1
          2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |x|x|V|C|    FR Label (0x101)   |          Label Length         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |x|x|x|x| Res |Len|                Min DLCI                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |x|x|x|x|    FR Label (0x101)   |          Label Length         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |x|x|x|x| Res |Len|                Max DLCI                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |                         Remaining DLCI                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \     V: Label\n         The Label flag is not used.\n      Res\n         The
          Res field is reserved in [21], i.e., it is not explicitly\n         reserved
          by GSMP.\n      Len\n         The Len field specifies the number of bits
          of the DLCI.  The\n         following values are supported:\n         Len
          \ DLCI bits\n         0    10\n         2    23\n      Min DLCI, Max DLCI\n
          \        Specify a range of DLCI values, Min DLCI to Max DLCI inclusive.\n
          \        The values SHOULD be right justified in the 23-bit fields and\n
          \        the preceding bits SHOULD be set to zero.  A single DLCI may be\n
          \        specified with a Min DLCI and a Max DLCI having the same value.\n
          \        In a request message, if the value of the Max DLCI field is\n         less
          than or equal to the value of the Min DLCI field, the\n         requested
          range is a single DLCI with a value equal to the Min\n         DLCI field.
          \ Zero is a valid value.\n      Remaining DLCI's\n         This field is
          unused in the request message.  In the success\n         response message
          and in the failure response message, this\n         field gives the maximum
          number of remaining DLCI's that could\n         be requested for allocation
          on the specified port (after\n         completion of the requested operation
          in the case of the\n         success response).  It gives the switch controller
          an idea of\n         how many DLCI's it could request.  The number given
          is the\n         maximum possible given the constraints of the switch hardware.\n
          \        There is no implication that this number of DLCI's is available\n
          \        to every switch port.\n"
        title: 6.2.1.2  Frame Relay Labels
      - contents:
        - "6.2.1.3  MPLS Generic Labels\n   The Label Range Block for PortTypes using
          MPLS labels.  These types\n   of labels are for use on links for which label
          values are independent\n   of the underlying link technology.  Examples
          of such links are PPP\n   and Ethernet.  On such links the labels are carried
          in MPLS label\n   stacks [14].  If Label Type = MPLS Gen Label, the labels
          range\n   message MUST be interpreted as MPLS Generic Label as shown:\n
          \  0                   1                   2                   3\n   0 1
          2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |x|x|V|C| MPLS Gen Label (0x102)|          Label Length         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |x|x|x|x|x|x|x|x|x|x|x|x|          Min MPLS Label               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |x|x|x|x| MPLS Gen Label (0x102)|          Label Length         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |x|x|x|x|x|x|x|x|x|x|x|x|          Max MPLS Label               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |                      Remaining Labels                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \     V: Label\n         The Label flag is not used.\n      Min MPLS Label,
          Max MPLS Label\n         Specify a range of MPLS label values, Min MPLS
          Label to Max\n         MPLS Label inclusive.  The Max and Min MPLS label
          fields are 20\n         bits each.\n      Remaining MPLS Labels\n         This
          field is unused in the request message.  In the success\n         response
          message and in the failure response message this field\n         gives the
          maximum number of remaining MPLS Labels that could be\n         requested
          for allocation on the specified port (after\n         completion of the
          requested operation in the case of the\n         success response).  It
          gives the switch controller an idea of\n         how many MPLS Labels it
          could request.  The number given is the\n         maximum possible given
          the constraints of the switch hardware.\n         There is no implication
          that this number of Labels is available\n         to every switch port.\n"
        title: 6.2.1.3  MPLS Generic Labels
      - contents:
        - "6.2.1.4  FEC Labels\n   The Label Range message is not used for FEC Labels
          and is for further\n   study.\n"
        title: 6.2.1.4  FEC Labels
      title: 6.2.1  Labels
    title: 6.2  Label Range Message
  title: 6.  Management Messages
- contents:
  - "7.  State and Statistics Messages\n   The state and statistics messages permit
    the controller to request\n   the values of various hardware counters associated
    with the switch\n   input and output ports and connections.  They also permit
    the\n   controller to request the connection state of a switch input port.\n   The
    Connection Activity message is used to determine whether one or\n   more specific
    connections have recently been carrying traffic.  The\n   Statistics message is
    used to query the various port and connection\n   traffic and error counters.\n
    \  The Report Connection State message is used to request an input port\n   to
    report the connection state for a single connection, a single ATM\n   virtual
    path connection, or for the entire input port.\n"
  - contents:
    - "7.1  Connection Activity Message\n   The Connection Activity message is used
      to determine whether one or\n   more specific connections have recently been
      carrying traffic.  The\n   Connection Activity message contains one or more
      Activity Records.\n   Each Activity Record is used to request and return activity\n
      \  information concerning a single connection.  Each connection is\n   specified
      by its input port and Input Label which are specified in\n   the Input Port
      and Input Label fields of each Activity Record.\n   Two forms of activity detection
      are supported.  If the switch\n   supports per connection traffic accounting,
      the current value of the\n   traffic counter for each specified connection MUST
      be returned.  The\n   units of traffic counted are not specified but will typically
      be\n   either cells or frames.  The controller MUST compare the traffic\n   counts
      returned in the message with previous values for each of the\n   specified connections
      to determine whether each connection has been\n   active in the intervening
      period.  If the switch does not support per\n   connection traffic accounting,
      but is capable of detecting per\n   connection activity by some other unspecified
      means, the result may\n   be indicated for each connection using the Flags field.
      \ The\n   Connection Activity message is:\n      Message Type = 48\n   The Connection
      Activity request and success response messages have\n   the following format:\n
      \   0                   1                   2                   3\n    0 1 2
      3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |    Version    | Message Type  |    Result     |     Code      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | Partition ID  |            Transaction Identifier             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |I|      SubMessage Number      |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |       Number of Records       |x x x x x x x x x x x x x x x x|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                                                               |\n   ~                       Activity
      Records                        ~\n   |                                                               |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      Note:
      Fields and Parameters that have been explained in the\n         description
      of the general messages will not be explained in\n         this section.  Please
      refer to section 3.1 for details.\n      Number of Records\n         Field specifies
      the number of Activity Records to follow.  The\n         number of Activity
      records in a single Connection Activity\n         message MUST NOT cause the
      packet length to exceed the maximum\n         transmission unit defined by the
      encapsulation.\n   Each Activity Record has the following format:\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |V|C|A|x|          TC Count     |        TC Block Length        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                          Input Port                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                                                               |\n   +                         Traffic
      Count                         +\n   |                                                               |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |x|S|x|x|
      \                                                      |\n   +-+-+-+-+                  Input
      Label                          |\n   ~                                                               ~\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      Flags\n
      \        V: Valid Record\n            In the success response message the Valid
      Record flag is\n            used to indicate an invalid Activity Record.  The
      flag MUST\n            be zero if any of the fields in this Activity Record
      are\n            invalid, if the input port specified by the Input Port field\n
      \           does not exist, or if the specified connection does not\n            exist.
      \ If the Valid Record flag is zero in a success\n            response message,
      the Counter flag, the Activity flag, and\n            the Traffic Count field
      are undefined.  If the Valid Record\n            flag is set, the Activity Record
      is valid, and the Counter\n            and Activity flags are valid.  The Valid
      Record flag is not\n            used in the request message.\n         C: Counter\n
      \           In a success response message, if the Valid Record flag is\n            set,
      the Counter flag, if zero, indicates that the value in\n            the Traffic
      Count field is valid.  If set, it indicates that\n            the value in the
      Activity flag is valid.  The Counter flag\n            is not used in the request
      message.\n         A: Activity\n            In a success response message, if
      the Valid Record and\n            Counter flags are set, the Activity flag,
      if set, indicates\n            that there has been some activity on this connection
      since\n            the last Connection Activity message for this connection.\n
      \           If zero, it indicates that there has been no activity on\n            this
      connection since the last Connection Activity message\n            for this
      connection.  The Activity flag is not used in the\n            request message.\n
      \     TC Count\n         In cases where per connection traffic counting is supported,\n
      \        this field contains the count of Traffic Count entries.\n      TC Block
      Length\n         In cases where per connection traffic counting is supported,\n
      \        this field contains the Traffic Count block size in bytes.\n      Input
      Port\n         Identifies the port number of the input port on which the\n         connection
      of interest originates in order to identify the\n         connection (regardless
      of whether the traffic count for the\n         connection is maintained on the
      input port or the output port).\n      Input Label\n         Fields identify
      the specific connection for which statistics\n         are being requested.\n
      \     Traffic Count\n         Field is not used in the request message.  In
      the success\n         response message, if the switch supports per connection
      traffic\n         counting, the Traffic Count field MUST be set to the value
      of a\n         free running, connection specific, 64-bit traffic counter\n         counting
      traffic flowing across the specified connection.  The\n         value of the
      traffic counter is not modified by reading it.  If\n         per connection
      traffic counting is supported, the switch MUST\n         report the Connection
      Activity result using the traffic count\n         rather than using the Activity
      flag.\n   The format of the failure response is the same as the request message\n
      \  with the Number of Records field set to zero and no Connection\n   Activity
      records returned in the message.  If the switch is incapable\n   of detecting
      per connection activity, a failure response MUST be\n   returned indicating,
      \"3: The specified request is not implemented on\n   this switch\".\n"
    title: 7.1  Connection Activity Message
  - contents:
    - "7.2  Statistics Messages\n   The Statistics messages are used to query the
      various port,\n   connection and error counters.\n   The Statistics request
      messages have the following format:\n    0                   1                   2
      \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |    Version    | Message Type  |    Result     |     Code      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | Partition ID  |            Transaction Identifier             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |I|      SubMessage Number      |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                             Port                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |x|S|x|x|                                                       |\n   +-+-+-+-+
      \                    Label                             |\n   ~                                                               ~\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      Note:
      Fields and Parameters that have been explained in the\n         description
      of the general messages will not be explained in\n         this section.  Please
      refer to section 3.1 for details.\n      Label\n         The Label Fields identifies
      the specific connection for which\n         statistics are being requested.\n
      \  The success response for the Statistics message has the following\n   format:\n
      \   0                   1                   2                   3\n    0 1 2
      3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |    Version    | Message Type  |    Result     |     Code      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | Partition ID  |           Transaction Identifier              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |I|      SubMessage Number      |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                             Port                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |x|S|x|x|                                                       |\n   +-+-+-+-+
      \                    Label                             |\n   ~                                                               ~\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                                                               |\n
      \  +                       Input Cell Count                        +\n   |                                                               |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                                                               |\n
      \  +                       Input Frame Count                       +\n   |                                                               |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                                                               |\n
      \  +                    Input Cell Discard Count                   +\n   |                                                               |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                                                               |\n
      \  +                   Input Frame Discard Count                   +\n   |                                                               |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                                                               |\n
      \  +                  Header Checksum Error Count                  +\n   |                                                               |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                                                               |\n
      \  +                   Input Invalid Label Count                   +\n   |                                                               |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                                                               |\n
      \  +                       Output Cell Count                       +\n   |                                                               |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                                                               |\n
      \  +                      Output Frame Count                       +\n   |                                                               |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                                                               |\n
      \  +                   Output Cell Discard Count                   +\n   |                                                               |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                                                               |\n
      \  +                  Output Frame Discard Count                   +\n   |                                                               |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      Note:
      Field and Parameters that have been explained in the\n         description of
      the general messages will not be explained in\n         this section.  Please
      refer to section 3.1 for details.\n      Input Cell Count, Output Cell Count\n
      \        Give the value of a free running 64-bit counter counting cells\n         arriving
      at the input or departing from the output\n         respectively.  These fields
      are relevant for label type = ATM,\n         for all other label types these
      fields SHOULD be set to zero by\n         the sender and ignored by the receiver.\n
      \     Input Frame Count, Output Frame Count\n         Give the value of a free
      running 64-bit counter counting frames\n         (packets) arriving at the input
      or departing from the output\n         respectively.  These fields are relevant
      for label types = FR\n         and MPLS, for all other label types these fields
      SHOULD be set\n         to zero by the sender and ignored by the receiver.\n
      \     Input Cell Discard Count, Output Cell Discard Count\n         Give the
      value of a free running 64-bit counter counting cells\n         discarded due
      to queue overflow on an input port or on an\n         output port respectively.
      \ These fields are relevant for label\n         type = ATM, for all other label
      types these fields SHOULD be\n         set to zero by the sender and ignored
      by the receiver.\n      Input Frame Discard Count, Output Frame Discard Count\n
      \        Give the value of a free running 64-bit counter counting frames\n         discarded
      due to congestion on an input port or on an output\n         port respectively.
      \ These fields are relevant for label\n         types = FR and MPLS, for all
      other label types these fields\n         SHOULD be set to zero by the sender
      and ignored by the\n         receiver.\n      Header Checksum Error Count\n
      \        Gives the value of a free running 64-bit counter counting cells\n         or
      frames discarded due to header checksum errors on arrival at\n         an input
      port.  For an ATM switch this would be the HEC count.\n      Invalid Label Count\n
      \        Gives the value of a free running 64-bit counter counting cells\n         or
      frames discarded because their Label is invalid on arrival\n         at an input
      port.\n"
    - contents:
      - "7.2.1  Port Statistics Message\n   The Port Statistics message requests the
        statistics for the switch\n   port specified in the Port field.  The contents
        of the Label field in\n   the Port Statistics request message is ignored.
        \ All of the count\n   fields in the success response message refer to per-port
        counts\n   regardless of the connection to which the cells or frames belong.\n
        \  Any of the count fields in the success response message not supported\n
        \  by the port MUST be set to zero.  The Port Statistics message is:\n      Message
        Type = 49\n"
      title: 7.2.1  Port Statistics Message
    - contents:
      - "7.2.2  Connection Statistics Message\n   The Connection Statistics message
        requests the statistics for the\n   connection specified in the Label field
        that originates on the switch\n   input port specified in the Port field.
        \ All of the count fields in\n   the success response message refer only to
        the specified connection.\n   The Header Checksum Error Count and Invalid
        Label Count fields are\n   not connection specific and MUST be set to zero.
        \ Any of the other\n   count fields not supported on a per connection basis
        MUST be set to\n   zero in the success response message.  The Connection Statistics\n
        \  message is:\n      Message Type = 50\n"
      title: 7.2.2  Connection Statistics Message
    - contents:
      - "7.2.3  QoS Class Statistics Message\n   The QoS Class Statistics message
        is not supported in this version of\n   GSMP.\n      Message Type = 51 is
        reserved.\n"
      title: 7.2.3  QoS Class Statistics Message
    title: 7.2  Statistics Messages
  - contents:
    - "7.3  Report Connection State Message\n   The Report Connection State message
      is used to request an input port\n   to report the connection state for a single
      connection or for the\n   entire input port.  The Report Connection State message
      is:\n      Message Type = 52\n   The Report Connection State request message
      has the following format:\n    0                   1                   2                   3\n
      \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |    Version    | Message Type  |    Result     |     Code      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | Partition ID  |            Transaction Identifier             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |I|      SubMessage Number      |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                          Input Port                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |x|S|A|V|                                                       |\n   +-+-+-+-+
      \                 Input Label                          |\n   ~                                                               ~\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      Note:
      Field and Parameters that have been explained in the\n         description of
      the general messages will not be explained in\n         this section.  Please
      refer to section 3.1 for details.\n      Input Port\n         Identifies the
      port number of the input port for which the\n         connection state is being
      requested.\n      Flags\n         A: All Connections\n            If the All
      Connections flag is set, the message requests the\n            connection state
      for all connections that originate at the\n            input port specified
      by the Input Port field.  In this case\n            the Input Label field and
      the Label flag are unused.\n         V: ATM VPI\n            The ATM VPI flag
      may only be set for ports with\n            PortType=ATM.  If the switch receives
      a Report Connection\n            State message in which the ATM VPI flag set
      and in which the\n            input port specified by the Input Port field does
      not have\n            PortType=ATM, the switch MUST return a Failure response
      \"28:\n            ATM Virtual Path switching is not supported on non-ATM\n
      \           ports\".\n            If the All Connections flag is zero and the
      ATM VPI flag is\n            also zero, the message requests the connection
      state for the\n            connection that originates at the input port specified
      by\n            the Port and Input Label fields.\n         ATM specific procedures:\n
      \           If the All Connections flag is zero and the ATM VPI flag is\n            set
      and the input port specified by the Input Port field has\n            LabelType=ATM,
      the message requests the connection state for\n            the virtual path
      connection that originates at the input\n            port specified by the Input
      Port and Input VPI fields.  If\n            the specified Input VPI identifies
      an ATM virtual path\n            connection (i.e., a single switched virtual
      path) the state\n            for that connection is requested.  If the specified
      Input\n            VPI identifies a virtual path containing virtual channel\n
      \           connections, the message requests the connection state for\n            all
      virtual channel connections that belong to the specified\n            virtual
      path.\n      Input Label\n         Field identifies the specific connection
      for which the\n         connection state is being requested.  For requests that
      do not\n         require a connection to be specified, the Input Label field
      is\n         not used.\n   The Report Connection State success response message
      has the\n   following format:\n    0                   1                   2
      \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |    Version    | Message Type  |    Result     |     Code      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | Partition ID  |            Transaction Identifier             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |I|      SubMessage Number      |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                          Input Port                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                        Sequence Number                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                                                               |\n   ~                       Connection
      Records                      ~\n   |                                                               |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      Note:
      Fields and Parameters that have been explained in the\n         description
      of the general messages will not be explained in\n         this section.  Please
      refer to section 3.1 for details.\n      Input Port\n         Is the same as
      the Input Port field in the request message.  It\n         identifies the port
      number of the input port for which the\n         connection state is being reported.\n
      \     Sequence Number\n         In the case that the requested connection state
      cannot be\n         reported in a single success response message, each successive\n
      \        success response message, in reply to the same request message,\n         MUST
      increment the Sequence Number.  The Sequence Number of the\n         first success
      response message, in response to a new request\n         message, MUST be zero.\n
      \     Connection Records\n         Each success response message MUST contain
      one or more\n         Connection Records.  Each Connection Record specifies
      a single\n         point-to-point or point-to-multipoint connection.  The number\n
      \        of Connection Records in a single Report Connection State\n         success
      response MUST NOT cause the packet length to exceed the\n         maximum transmission
      unit defined by the encapsulation.  If the\n         requested connection state
      cannot be reported in a single\n         success response message, multiple
      success response messages\n         MUST be sent.  All success response messages
      that are sent in\n         response to the same request message MUST have the
      same Input\n         Port and Transaction Identifier fields as the request message.\n
      \        A single Connection Record MUST NOT be split across multiple\n         success
      response messages.  \"More\" in the Result field of a\n         response message
      indicates that one or more further success\n         response messages should
      be expected in response to the same\n         request message.  \"Success\"
      in the Result field indicates that\n         the response to the request has
      been completed.  The Result\n         values are defined in chapter 3.1.1.\n
      \  Each Connection Record has the following format:\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |A|V|P|     Record Count    |           Record Length           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |x|S|x|x|                                                       |\n   +-+-+-+-+
      \                   Input Label                        |\n   ~                                                               ~\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                                                               |\n
      \  ~                   Output Branch Records                       ~\n   |                                                               |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      Flags\n
      \        A: All Connections\n         V: ATM VPI\n            For the first
      Connection Record in each success response\n            message, the All Connections
      and the ATM VPI flags MUST be\n            the same as those of the request
      message.  For successive\n            Connection Records in the same success
      response message,\n            these flags are not used.\n         P: ATM VPC\n
      \           The ATM VPC flag may only be set for ports with\n            PortType=ATM.
      \ The ATM VPC flag, if set and only if set,\n            indicates that the
      Connection Record refers to an ATM\n            virtual path connection.\n      Input
      Label\n         The input label of the connection specified in this Connection\n
      \        Record.\n      Record Count\n         Count of Output Branch Records
      included in a response message.\n      Record Length\n         Length in bytes
      of Output Branch Records field\n      Output Branch Records\n         Each Connection
      Record MUST contain one or more Output Branch\n         Records.  Each Output
      Branch Record specifies a single output\n         branch belonging to the connection
      identified by the Input\n         Label field of the Connection Record and the
      Input Port field\n         of the Report Connection State message.  A point-to-point\n
      \        connection will require only a single Output Branch Record.  A\n         point-to-multipoint
      connection will require multiple Output\n         Branch Records.  If a point-to-multipoint
      connection has more\n         output branches than can fit in a single Connection
      Record\n         contained within a single success response message, that\n
      \        connection may be reported using multiple Connection Records in\n         multiple
      success response messages.\n   Each Output Branch Record has the following format:\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                          Output
      Port                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |x|S|x|x|                                                       |\n   +-+-+-+-+
      \                   Output Label                       |\n   ~                                                               ~\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      Output
      Port\n         The output port of the switch to which this output branch is\n
      \        routed.\n      Output Label\n         The output label of the output
      branch specified in this Output\n         Branch Record.\n         ATM specific
      procedures:\n            If this Output Branch Record is part of a Connection
      Record\n            that specifies a virtual path connection (the ATM VPC flag\n
      \           is set) the Output VCI field is unused.\n   A Report Connection
      State request message may be issued regardless of\n   the Port Status or the
      Line Status of the target switch port.\n   If the Input Port of the request
      message is valid, and the All\n   Connections flag is set, but there are no
      connections established on\n   that port, a failure response message MUST be
      returned with the Code\n   field set to, \"10: General Message Failure\".  For
      the Report\n   Connection State message, this failure code indicates that no\n
      \  connections matching the request message were found.  This failure\n   message
      SHOULD also be returned if the Input Port of the request\n   message is valid,
      the All Connections flag is zero, and no\n   connections are found on that port
      matching the specified connection.\n"
    title: 7.3  Report Connection State Message
  title: 7.  State and Statistics Messages
- contents:
  - "8.  Configuration Messages\n   The configuration messages permit the controller
    to discover the\n   capabilities of the switch.  Three configuration request messages\n
    \  have been defined: Switch, Port, and All Ports.\n"
  - contents:
    - "8.1  Switch Configuration Message\n   The Switch Configuration message requests
      the global (non port-\n   specific) configuration for the switch.  The Switch
      Configuration\n   message is:\n      Message Type = 64\n   The Port field is
      not used in the switch configuration message.\n   The Switch Configuration message
      has the following format:\n    0                   1                   2                   3\n
      \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |    Version    | Message Type  |    Result     |     Code      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | Partition ID  |            Transaction Identifier             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |I|      SubMessage Number      |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     MType     |     MType     |     MType     |     MType     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |    Firmware Version Number    |          Window Size          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |          Switch Type          |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \                              +\n   |                          Switch Name
      \                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                          Max Reservations                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     Note: Fields and Parameters that have been explained in the\n         description
      of the general messages will not be explained in\n         this section.  Please
      refer to section 3.1 for details.\n      MType\n         Represents an alternative
      QoS Configuration type.  In the\n         request message the requested MType
      is in the most significant\n         (leftmost) MType byte; the other three
      MType bytes are unused.\n         The reply message will either accept the MType
      request by\n         including the requested MType in the leftmost MType field
      of\n         the response message or it will reject the MType request by\n         responding
      with MType=0, the default MType, in the first MType\n         field.  Optionally,
      in the case of a rejection, the switch\n         reply can include up to 3 additional
      MType values, each of\n         which indicates an available alternative QoS
      Configuration.  A\n         switch that supports only the default QoS Configuration
      always\n         returns MType=0 in all four MType fields.  MType negotiation
      is\n         discussed in section 8.1.1.\n            0          -  Indicates
      use of the default GSMP model\n            1-200      -  Reserved\n            201-255
      \   -  Experimental\n      Firmware Version Number\n         The version number
      of the switch control firmware installed.\n      Window Size\n         The maximum
      number of unacknowledged request messages that may\n         be transmitted
      by the controller without the possibility of\n         loss.  This field is
      used to prevent request messages being\n         lost in the switch because
      of overflow in the receive buffer.\n         The field is a hint to the controller.
      \ If desired, the\n         controller may experiment with higher and lower
      window sizes to\n         determine heuristically the best window size.\n      Switch
      Type\n         A 16-bit field allocated by the manufacturer of the switch.\n
      \        (For these purposes, the manufacturer of the switch is assumed\n         to
      be the organisation identified by the OUI in the Switch Name\n         field.)
      \ The Switch Type identifies the product.  When the\n         Switch Type is
      combined with the OUI from the Switch Name the\n         product is uniquely
      identified.  Network Management may use\n         this identification to obtain
      product related information from\n         a database.\n      Switch Name\n
      \        A 48-bit quantity that is unique within the operational context\n         of
      the device.  A 48-bit IEEE 802 MAC address, if available,\n         may be used
      as the Switch Name.  The most significant 24 bits\n         of the Switch Name
      MUST be an Organisationally Unique\n         Identifier (OUI) that identifies
      the manufacturer of the\n         switch.\n      Max Reservations\n         The
      maximum number of Reservations that the switch can support\n         (see Chapter
      5).  A value of 0 indicates that the switch does\n         not support Reservations.\n"
    - contents:
      - "8.1.1  Configuration Message Processing\n   After adjacency between a controller
        and after a switch is first\n   established the controller that opts to use
        a QoS Configuration model\n   other then the default would send the Switch
        Configuration request\n   including the requested QoS Configuration's MType
        value in the\n   request message.  This request MUST be sent before any connection\n
        \  messages are exchanged.  If the switch can support the requested QoS\n
        \  configuration, then the switch includes the requested MType value in\n
        \  the response message as an indication that it accepts the request.\n   If
        the switch cannot support the requested QoS Configuration, it\n   replaces
        the MType value in the request message with that of the\n   default QoS Configuration,
        i.e., MType=0.\n   The switch configuration response messages may additionally
        include\n   the MType values of up to three alternative QoS Configurations
        that\n   the switch supports and that the controller may choose between.\n
        \  The exchange continues until the controller sends a requested MType\n   that
        the switch accepts or until it sends a connection request\n   message.  If
        the exchange ends without confirmation of an alternate\n   switch model, then
        the default Mtype=0 is be used.\n   Once an MType has been established for
        the switch, it cannot be\n   changed without full restart, that is the re-establishment
        of\n   adjacency with the resetting of all connections.\n"
      title: 8.1.1  Configuration Message Processing
    title: 8.1  Switch Configuration Message
  - contents:
    - "8.2  Port Configuration Message\n   The Port Configuration message requests
      the switch for the\n   configuration information of a single switch port.  The
      Port field in\n   the request message specifies the port for which the configuration
      is\n   requested.  The Port Configuration message is:\n      Message Type =
      65.\n   The Port Configuration success response message has the following\n
      \  format:\n    0                   1                   2                   3\n
      \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |    Version    | Message Type  |    Result     |     Code      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | Partition ID  |            Transaction Identifier             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |I|      SubMessage Number      |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                             Port                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                       Port Session Number                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                      Event Sequence Number                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |          Event Flags          |     Port Attribute Flags      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |   PortType    |S|x|x|x|x|x|x|x|      Data Fields Length       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                                                               |\n   ~                     PortType
      Specific Data                    ~\n   |                                                               |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |x
      x x x x x x x x x x x x x x x|   Number of Service Specs     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|\n
      \  |                                                               |\n   ~                      Service
      Specs List                       ~\n   |                                                               |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      Note:
      Fields and Parameters that have been explained in the\n         description
      of the general messages will not be explained in\n         this section.  Please
      refer to section 3.1 for details.\n      Port\n         The switch port to which
      the configuration information refers.\n         Configuration information relating
      to both the input and the\n         output sides of the switch port is given.
      \ Port numbers are 32\n         bits wide and allocated by the switch.  The
      switch may choose\n         to structure the 32 bits into subfields that have
      meaning to\n         the physical structure of the switch hardware (e.g., physical\n
      \        slot and port).  This structure may be indicated in the\n         Physical
      Slot Number and Physical Port Number fields.\n      Event Sequence Number\n
      \        The Event Sequence Number is set to zero when the port is\n         initialised.
      \ It is incremented by one each time the port\n         detects an asynchronous
      event that the switch would normally\n         report via an Event message.
      \ The Event Sequence Number is\n         explained in section 9.\n      Event
      Flags\n         Event Flags in a switch port corresponds to a type of Event\n
      \        message.\n      Port Attribute Flags\n         Port Attribute Flags
      indicate specific behaviour of a switch\n         port.  The format of the Port
      Attribute Flags field is given\n         below:\n                0                   1\n
      \               0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\n               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \              |R|x|x|x|x|x|x|x|x|x|x|x|x|x|x|x|x|\n               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \        R: Connection Replace flag\n            If set, indicates that connections
      being established by an\n            Add Branch message with a corresponding
      R-bit set will\n            replace any previously established connection if
      a clash\n            between the established output branch and the requested\n
      \           output branch occurs [see chapter 4.2].\n         x: Unused.\n      PortType\n
      \        1: PortType is ATM\n         2: PortType is FR\n         3: PortType
      is MPLS\n      S: Service Model\n         If set, indicates that Service Model
      data follows the\n         PortSpecific port configuration data.\n      Data
      Fields Length\n         The total length in bytes of the combined PortType Specific\n
      \        Data and Service Model Data fields.  The length of each of\n         these
      fields may be derived from the other data so the value of\n         Data Fields
      Length serves primarily as a check and to assist\n         parsing of the All
      Ports Configuration message success\n         response.\n      PortType Specific
      Data\n         This field contains the configuration data specific to the\n
      \        particular port type as specified by the PortType field.  The\n         field
      format and length also depends on the value of the\n         PortType.  PortType
      Specific Data is defined below.\n      Number of Service Specs\n         Field
      contains the total number of Service Specs following in\n         the remainder
      of the Port Configuration message response or\n         Port Configuration Record.\n
      \     Service Specs List\n         The Service Specs correspond to the Input
      and Output Service\n         selectors used in Connection Management and Reservation\n
      \        messages.  Specifically they define the possible values used\n         when
      the Service Selector (IQS or OQS) is set to 0b10\n         indicating the use
      of the default service specification model\n         defined in Chapter 10.\n
      \     Service Spec\n         The format of each service spec is given below:\n
      \   0                   1                   2                   3\n    0 1 2
      3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |         Service ID            |       Capability Set ID       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \        Each Service Spec identifies a Service supported by the switch\n         together
      with the Capability Set ID that identifies the\n         parameters of that
      instance of the Service.  The Service Spec\n         List may contain more than
      one Service Spec sharing the same\n         Service ID.  However, each Service
      Spec in the Service Specs\n         List MUST be unique.\n         Service ID\n
      \           Field contains the Service ID of a Service supported on the\n            port.
      \ Service ID values are defined as part of the Service\n            definition
      in Chapter 9.6.\n         Capability Set ID\n            Field identifies a
      Capability Set ID of the Service\n            specified by the Service ID that
      is supported on the port.\n            Capability Set ID values are defined
      by the Switch in the\n            Service Configuration response message (see
      Section 8.4).\n            The switch MUST NOT return a {Service ID, Capability
      Set ID}\n            pair that is not reported in a Service Configuration\n
      \           response message.\n"
    - contents:
      - "8.2.1  PortType Specific Data\n   The length, format and semantics of the
        PortType Specific Data field\n   in the Port Configuration message success
        response and in the Port\n   Records of the All Port Configuration message
        success response all\n   depend on the PortType value of the same message
        or record\n   respectively.  The specification of the PortType Specific Data
        field\n   is given below.  For each defined PortType value the Min and Max\n
        \  Label fields are given in the subsequent subsections.\n    0                   1
        \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |P|M|L|R|Q|  Label Range Count  |      Label Range Length       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                                                               |\n   ~
        \                  Default Label Range Block                   ~\n   |                                                               |\n
        \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |
        \                      Receive Data Rate                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                      Transmit Data Rate                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |  Port Status  |   Line Type   |  Line Status  |  Priorities   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |     Physical Slot Number      |     Physical Port Number      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     Note: Fields and Parameters that have been explained in the\n         description
        of the general messages will not be explained in\n         this section.  Please
        refer to section 3.1 for details.\n   Where each of the ranges in the Default
        Label Range Blocks will have\n   the following format:\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |x|x|V|C|                                                       |\n   +-+-+-+-+
        \                   Min Label                          |\n   ~                                                               ~\n
        \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |x|x|x|x|
        \                                                      |\n   +-+-+-+-+                    Max
        Label                          |\n   ~                                                               ~\n
        \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      Flags\n
        \        P: VP Switching\n            The ATM VPC flag may only be set for
        ports with\n            PortType=ATM.  The VP Switching flag, if set, indicates
        that\n            this input port is capable of supporting virtual path\n
        \           switching.  Else, if zero, it indicates that this input port\n
        \           is only capable of virtual channel switching.\n         M: Multicast
        Labels\n            The Multicast Labels flag, if set, indicates that this\n
        \           output port is capable of labelling each output branch of a\n
        \           point-to-multipoint tree with a different label.  If zero,\n            it
        indicates that this output port is not able to label each\n            output
        branch of a point-to-multipoint tree with a different\n            label.\n
        \        L: Logical Multicast\n            The Logical Multicast flag, if
        set, indicates that this\n            output port is capable of supporting
        more than a single\n            branch from any point-to-multipoint connection.
        \ This\n            capability is often referred to as logical multicast.
        \ If\n            zero, it indicates that this output port can only support
        a\n            single output branch from each point-to-multipoint\n            connection.\n
        \        R: Label Range\n            The Label Range flag, if set, indicates
        that this switch\n            port is capable of reallocating its label range
        and\n            therefore accepts the Label Range message.  Else, if zero,\n
        \           it indicates that this port does not accept Label Range\n            messages.\n
        \        Q: QoS\n            The QoS flag, if set, indicates that this switch
        port is\n            capable of handling the Quality of Service messages defined\n
        \           in section 9 of this specification.  Else, if zero, it\n            indicates
        that this port does not accept the Quality of\n            Service messages.\n
        \        V: Label\n            The Label flag is port type specific.\n         C:
        Multipoint Capable\n            This flag indicates that the label range may
        be used for\n            multipoint connections.\n      Label Range Count\n
        \        The total number of Default Label Range elements contained in\n         the
        Default Label Range Block.\n      Label Range Length\n         Byte count
        in the Default Label Range Block.\n      Min Label\n         The specification
        of the Min Label field for each defined\n         PortType value is given
        in the subsequent subsections.  The\n         default minimum value of a dynamically
        assigned incoming label\n         that the connection table on the input port
        supports and that\n         may be controlled by GSMP.  This value is not
        changed as a\n         result of the Label Range message.\n      Max Label\n
        \        The specification of the Max Label field for each defined\n         PortType
        value is given in the subsequent subsections.  The\n         default maximum
        value of a dynamically assigned incoming label\n         that the connection
        table on the input port supports and that\n         may be controlled by GSMP.
        \ This value is not changed as a\n         result of the Label Range message.\n
        \     Receive Data Rate\n         The maximum rate of data that may arrive
        at the input port in;\n         cells/s          for PortType = ATM\n         bytes/s
        \         for PortType = FR\n         bytes/s          for PortType = MPLS\n
        \     Transmit Data Rate\n         The maximum rate of data that may depart
        from the output port\n         in;\n         cells/s          for PortType
        = ATM\n         bytes/s          for PortType = FR\n         bytes/s          for
        PortType = MPLS\n         (The transmit data rate of the output port may be
        changed by\n         the Set Transmit Data Rate function of the Port Management\n
        \        message.)\n      Port Status\n         Gives the administrative state
        of the port.  The defined values\n         of the Port Status field are:\n
        \        Available:\n            Port Status = 1.  The port is available to
        both send and\n            receive cells or frames.  When a port changes to
        the\n            Available state from any other administrative state, all\n
        \           dynamically assigned connections MUST be cleared and a new\n            Port
        Session Number MUST be generated.\n         Unavailable:\n            Port
        Status = 2.  The port has intentionally been taken out\n            of service.
        \ No cells or frames will be transmitted from\n            this port.  No
        cells or frames will be received by this\n            port.\n         Internal
        Loopback:\n            Port Status = 3.  The port has intentionally been taken
        out\n            of service and is in internal loopback: cells or frames\n
        \           arriving at the output port from the switch fabric are\n            looped
        through to the input port to return to the switch\n            fabric.  All
        of the functions of the input port above the\n            physical layer,
        e.g., header translation, are performed upon\n            the looped back
        cells or frames.\n         External Loopback:\n            Port Status = 4.
        \ The port has intentionally been taken out\n            of service and is
        in external loopback:  cells or frames\n            arriving at the input
        port from the external communications\n            link are immediately looped
        back to the communications link\n            at the physical layer without
        entering the input port.  None\n            of the functions of the input
        port above the physical layer\n            are performed upon the looped back
        cells or frames.\n         Bothway Loopback:\n            Port Status = 5.
        \ The port has intentionally been taken out\n            of service and is
        in both internal and external loopback.\n         The Port Status of the port
        over which the GSMP session\n         controlling the switch is running MUST
        be declared Available.\n         The controller will ignore any other Port
        status for this port.\n         The Port Status of switch ports after power-on
        initialisation\n         is not defined by GSMP.\n      Line Type\n         The
        type of physical transmission interface for this port.  The\n         values
        for this field are defined by the IANAifType's specified\n         in [17].\n
        \           The following values are identified for use in this version\n
        \           of the protocol.\n               PortType = Unknown: other(1)\n
        \              PortType = MPLS:    ethernetCsmacd(6),\n                                   ppp(23)\n
        \              PortType = ATM:     atm(37)\n               PortType = FR:
        \     frameRelayService(44)\n      Line Status\n         The status of the
        physical transmission medium connected to the\n         port.  The defined
        values of the Line Status field are:\n            Up:\n                  Line
        Status = 1.  The line is able to both send and\n                     receive.
        \ When the Line Status changes to Up from\n                     either the
        Down or Test states, a new Port Session\n                     Number MUST
        be generated.\n            Down:\n                  Line Status = 2.  The
        line is unable either to send\n                     or receive or both.\n
        \           Test:\n                  Line Status = 3.  The port or line is
        in a test\n                     mode, for example, power-on test.\n      Priorities\n
        \        The number of different priority levels that this output port\n         can
        assign to connections.  Zero is invalid in this field.  If\n         an output
        port is able to support \"Q\" priorities, the highest\n         priority is
        numbered zero and the lowest priority is numbered\n         \"Q-1\".  The
        ability to offer different qualities of service to\n         different connections
        based upon their priority is assumed to\n         be a property of the output
        port of the switch.  It may be\n         assumed that for connections that
        share the same output port, a\n         cell or frame on a connection with
        a higher priority is much\n         more likely to exit the switch before
        a cell or frame on a\n         connection with a lower priority if they are
        both in the switch\n         at the same time.\n      Physical Slot Number\n
        \        The physical location of the slot in which the port is located.\n
        \        It is an unsigned 16-bit integer that can take any value except\n
        \        0xFFFF.  The value 0xFFFF is used to indicate \"unknown\".  The\n
        \        Physical Slot Number is not used by the GSMP protocol.  It is\n         provided
        to assist network management in functions such as\n         logging, port
        naming, and graphical representation.\n      Physical Port Number\n         The
        physical location of the port within the slot in which the\n         port
        is located.  It is an unsigned 16-bit integer that can\n         take any
        value except 0xFFFF.  The value 0xFFFF is used to\n         indicate \"unknown\".
        \ The Physical Port Number is not used by\n         the GSMP protocol.  It
        is provided to assist network management\n         in functions such as logging,
        port naming, and graphical\n         representation.\n         There MUST
        be a one to one mapping between the Port Number and\n         the Physical
        Slot Number and Physical Port Number combination.\n         Two different
        Port Numbers MUST NOT yield the same Physical\n         Slot Number and Physical
        Port Number combination.  The same\n         Port Number MUST yield the same
        Physical Slot Number and\n         Physical Port Number within a single GSMP
        session.  If both\n         Physical Slot Number and Physical Port Number
        indicate\n         \"unknown\" the physical location of switch ports may be\n
        \        discovered by looking up the product identity in a database to\n
        \        reveal the physical interpretation of the 32-bit Port Number.\n"
      - contents:
        - "8.2.1.1  PortType Specific data for PortType=ATM\n   If PortType=ATM, the
          Default Label Range Block has the following\n   format:\n    0                   1
          \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2
          3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |x|x|V|x|   ATM Label (0x100)   |          Label Length         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |x x x x|           VPI         |              VCI              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \     V: Label\n         If the Label flag is set, the message refers to
          a range of\n         VPI's only.  The Min VCI and Max VCI fields are unused.
          \ If the\n         Label flag is zero the message refers to a range of VCI's
          on\n         either one VPI or on a range of VPI's.\n      Min VPI\n         The
          default minimum value of dynamically assigned incoming VPI\n         that
          the connection table on the input port supports and that\n         may be
          controlled by GSMP.\n      Max VPI\n         The default maximum value of
          dynamically assigned incoming VPI\n         that the connection table on
          the input port supports and that\n         may be controlled by GSMP.\n
          \        At power-on, after a hardware reset, and after the Reset Input\n
          \        Port function of the Port Management message, the input port\n
          \        MUST handle all values of VPI within the range Min VPI to Max\n
          \        VPI inclusive and GSMP MUST be able to control all values\n         within
          this range.  It should be noted that the range Min VPI\n         to Max
          VPI refers only to the incoming VPI range that can be\n         supported
          by the associated port.  No restriction is placed on\n         the values
          of outgoing VPI's that may be written into the cell\n         header.  If
          the switch does not support virtual paths it is\n         acceptable for
          both Min VPI and Max VPI to specify the same\n         value, most likely
          zero.\n         Use of the Label Range message allows the range of VPI's\n
          \        supported by the port to be changed.  However, the Min VPI and\n
          \        Max VPI fields in the Port Configuration and All Ports\n         Configuration
          messages always report the same default values\n         regardless of the
          operation of the Label Range message.\n      Min VCI\n         The default
          minimum value of a dynamically assigned incoming\n         VCI that the
          connection table on the input port can support and\n         may be controlled
          by GSMP.  This value is not changed as a\n         result of the Label Range
          message.\n      Max VCI\n         The default maximum value of a dynamically
          assigned incoming\n         VCI that the connection table on the input port
          can support and\n         may be controlled by GSMP.\n         At power-on,
          after a hardware reset, and after the Reset Input\n         Port function
          of the Port Management message, the input port\n         MUST handle all
          values of VCI within the range Min VCI to Max\n         VCI inclusive, for
          each of the virtual paths in the range Min\n         VPI to Max VPI inclusive,
          and GSMP MUST be able to control all\n         values within this range.
          \ It should be noted that the range\n         Min VCI to Max VCI refers
          only to the incoming VCI range that\n         can be supported by the associated
          port on each of the virtual\n         paths in the range Min VPI to Max
          VPI.  No restriction is\n         placed on the values of outgoing VCI's
          that may be written into\n         the cell header.  Use of the Label Range
          message allows the\n         range of VCI's to be changed on each VPI supported
          by the port.\n         However, the Min VCI and Max VCI fields in the Port\n
          \        Configuration and All Ports Configuration messages always\n         report
          the same default values regardless of the operation of\n         the Label
          Range message.\n   For a port over which the GSMP protocol is operating,
          the VCI of the\n   GSMP control channel may or may not be reported as lying
          within the\n   range Min VCI to Max VCI.  A switch should honour a connection\n
          \  request message that specifies the VCI value of the GSMP control\n   channel
          even if it lies outside the range Min VCI to Max VCI\n"
        title: 8.2.1.1  PortType Specific data for PortType=ATM
      - contents:
        - "8.2.1.2  PortType Specific data for PortType=FR\n   If PortType=FR, the
          Default Label Range Block has the following\n   format:\n    0                   1
          \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2
          3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |x|S|x|x|    FR Label (0x101)   |          Label Length         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |x x x x|Res|Len|                   DLCI                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \     Res\n         The Res field is reserved in [21], i.e., it is not explicitly\n
          \        reserved by GSMP.\n      Len\n         This field specifies the
          number of bits of the DLCI.  The\n         following values are supported:\n
          \        Len  DLCI bits\n         0    10\n         2    23\n      Min DLCI,
          Max DLCI\n         Specify a range of DLCI values, Min DLCI to Max DLCI
          inclusive.\n         The values SHOULD be right justified in the 23-bit
          fields and\n         the preceding bits SHOULD be set to zero.  A single
          DLCI may be\n         specified with a Min DLCI and a Max DLCI having the
          same value.\n         In a request message, if the value of the Max DLCI
          field is\n         less than or equal to the value of the Min DLCI field,
          the\n         requested range is a single DLCI with a value equal to the
          Min\n         DLCI field.  Zero is a valid value.\n"
        title: 8.2.1.2  PortType Specific data for PortType=FR
      - contents:
        - "8.2.1.3  PortType Specific data for PortType=MPLS\n   The Default Label
          Range Block for PortTypes using MPLS labels.  These\n   types of labels
          are for use on links for which label values are\n   independent of the underlying
          link technology.  Examples of such\n   links are PPP and Ethernet.  On such
          links the labels are carried in\n   MPLS label stacks [14].  Ports of the
          Type MPLS have the following\n   format:\n    0                   1                   2
          \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
          3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |x|x|x|x| MPLS Gen Label (0x102)|          Label Length         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \  |x|x|x|x|x|x|x|x|x|x|x|x|              MPLS Label               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \     Min MPLS Label, Max MPLS Label\n         Specify a range of MPLS label
          values, Min MPLS Label to Max\n         MPLS Label inclusive.  The Max and
          Min MPLS label fields are 20\n         bits each.\n"
        title: 8.2.1.3  PortType Specific data for PortType=MPLS
      - contents:
        - "8.2.1.4  PortType Specific data for PortType=FEC\n   The Default Label
          Range Block for PortTypes using FEC labels is not\n   used.  The Label Range
          Count and Label Range Length fields defined in\n   [8.2.1] should be set
          to 0.\n"
        title: 8.2.1.4  PortType Specific data for PortType=FEC
      title: 8.2.1  PortType Specific Data
    title: 8.2  Port Configuration Message
  - contents:
    - "8.3  All Ports Configuration Message\n   The All Ports Configuration message
      requests the switch for the\n   configuration information of all of its ports.
      \ The All Ports\n   Configuration message is:\n      Message Type = 66\n   The
      Port field is not used in the request message.\n   The All Ports Configuration
      success response message has the\n   following format:\n    0                   1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |    Version    | Message Type  |    Result     |     Code      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | Partition ID  |            Transaction Identifier             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |I|      SubMessage Number      |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |x x x x x x x x x x x x x x x x|       Number of Records       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                                                               |\n   ~                          Port
      Records                         ~\n   |                                                               |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      Note:
      Fields and Parameters that have been explained in the\n         description
      of the general messages will not be explained in\n         this section.  Please
      refer to section 3.1 for details.\n      Number of Records\n         Field gives
      the total number of Port Records to be returned in\n         response to the
      All Ports Configuration request message.  The\n         number of port records
      in a single All Ports Configuration\n         success response MUST NOT cause
      the packet length to exceed the\n         maximum transmission unit defined
      by the encapsulation.  If a\n         switch has more ports than can be sent
      in a single success\n         response message it MUST send multiple success
      response\n         messages.  All success response messages that are sent in\n
      \        response to the same request message MUST have the same\n         Transaction
      Identifier as the request message and the same\n         value in the Number
      of Records field.  All success response\n         messages that are sent in
      response to the same request message,\n         except for the last message,
      MUST have the result field set to\n         \"More\".  The last message, or
      a single success response\n         message, MUST have the result field set
      to \"Success\".  All Port\n         records within a success response message
      MUST be complete,\n         i.e., a single Port record MUST NOT be split across
      multiple\n         success response messages.\n      Port Records\n         Follow
      in the remainder of the message.  Each port record has\n         the following
      format:\n    0                   1                   2                   3\n
      \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                             Port                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                       Port Session Number                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                      Event Sequence Number                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |          Event Flags          |     Port Attribute Flags      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |   PortType    |S|x|x|x|x|x|x|x|      Data Fields Length       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                                                               |\n   ~                     PortType
      Specific Data                    ~\n   |                                                               |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |x
      x x x x x x x x x x x x x x x|    Number of Service Specs    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                                                               |\n   ~                      Service
      Specs List                       ~\n   |                                                               |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   The
      definition of the fields in the Port Record is exactly the same\n   as that
      of the Port Configuration message [section 8.2].\n"
    title: 8.3  All Ports Configuration Message
  - contents:
    - "8.4  Service Configuration Message\n   The Service Configuration message requests
      the switch for the\n   configuration information of the Services that are supported.
      \ The\n   Service Configuration message is:\n      Message Type = 67\n   The
      Service Configuration success response message has the following\n   format:\n
      \   0                   1                   2                   3\n    0 1 2
      3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |    Version    | Message Type  |    Result     |     Code      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | Partition ID  |            Transaction Identifier             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |I|      SubMessage Number      |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |x x x x x x x x x x x x x x x x|   Number of Service Records   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                                                               |\n   ~                        Service
      Records                        ~\n   |                                                               |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      Note:
      Fields and Parameters that have been explained in the\n         description
      of the general messages will not be explained in\n         this section.  Please
      refer to section 3.1 for details.\n      Number of Service Records\n         Field
      gives the total number of Service Records to be returned\n         in the Service
      Records field.\n      Service Records\n         A sequence of zero or more Service
      Records.  The switch returns\n         one Service Record for each Service that
      it supports on any of\n         its ports.  A Service record contains the configuration
      data of\n         the specified Service.  Each Service Record has the following\n
      \        format:\n    0                   1                   2                   3\n
      \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |          Service ID           |  Number of Cap. Set. Records  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                                                               |\n   ~                     Capability
      Set Records                    ~\n   |                                                               |\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      Service
      ID\n         The Service ID Field identifies the Service supported by the\n
      \        port.  The Services are defined with their Service ID values as\n         described
      in section 10.2.\n      Number of Cap. Set. Records\n         Field gives the
      total number of Capability Set Records to be\n         returned in the Service
      Record field.\n      Capability Set Records\n         The switch returns one
      or more Capability Set Records in each\n         Service Record.  A Capability
      Set contains a set of parameters\n         that describe the QoS parameter values
      and traffic controls\n         that apply to an instance of the Service.  Each
      Capability Set\n         record has the following format:\n    0                   1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |          Cap. Set ID          |       Traffic Controls        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     CLR       |                     CTD                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |   Frequency   |                     CDV                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     Capability Set ID\n         The value in this Field defines a Capability
      Set ID supported\n         by the switch.  The values of a Capability Set ID
      are assigned\n         by the switch and used in Port Configuration messages
      to\n         identify Capability Sets supported by individual ports.  Each\n
      \        Capability Set Record within a Service Record MUST have a\n         unique
      Capability Set ID.\n      Traffic Controls\n         Field identifies the availability
      of Traffic Controls within\n         the Capability Set.  Traffic Controls are
      defined as part of\n         the respective Service definition, see Chapter
      10.  Some or all\n         of the Traffic Controls may be undefined for a given
      Service,\n         in which case the corresponding Flag is ignored by the\n
      \        controller.  The Traffic Controls field is formatted into\n         Traffic
      Control Sub-fields as follows:\n             0                   1\n             0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \           | U | D | I | E | S | V |x x x x|\n            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \        Traffic Control Sub-fields have the following encoding:\n            0b00
      Indicates that the Traffic Control is not available in\n                 the
      Capability Set.\n            0b01 Indicates that the Traffic Control is applied
      to all\n                 connections that use the Capability Set.\n            0b10
      Indicates that the Traffic Control is available for\n                 application
      to connections that use the Capability Set\n                 on a per connection
      basis.\n            0b11 Reserved\n         Traffic Control Sub-fields:\n            U:
      Usage Parameter Control\n                 The Usage Parameter Control sub-field
      indicates the\n                 availability of Usage Parameter Control for
      the\n                 specified Service and Capability Set.\n            D:
      Packet Discard\n                 The Packet Discard sub-field indicates the
      availability\n                 of Packet Discard for the specified Service and\n
      \                Capability Set.\n            I: Ingress Shaping\n                 The
      Ingress Shaping sub-field indicates the\n                 availability of Ingress
      Traffic Shaping to the Peak\n                 Cell Rate and Cell Delay Variation
      Tolerance for the\n                 specified Service and Capability Set.\n
      \           E: Egress Shaping, Peak Rate\n                 The Egress Shaping,
      Peak Rate sub-field indicates the\n                 availability of Egress Shaping
      to the Peak Cell Rate\n                 and Cell Delay Variation Tolerance for
      the specified\n                 Service and Capability Set.\n            S:
      Egress Traffic Shaping, Sustainable Rate\n                 The Egress Shaping,
      Sustainable Rate sub-field, if set,\n                 indicates that Egress
      Traffic Shaping to the\n                 Sustainable Cell Rate and Maximum Burst
      Size is\n                 available for the specified Service and Capability
      Set.\n            V: VC Merge\n                 The VC Merge sub-field indicates
      the availability of\n                 ATM Virtual Channel Merge (i.e., multipoint
      to point\n                 ATM switching with a traffic control to avoid AAL5
      PDU\n                 interleaving) capability for the specified Service and\n
      \                Capability Set.\n      QoS Parameters\n         The remaining
      four fields in the Capability Set Record contain\n         the values of QoS
      Parameters.  QoS Parameters are defined as\n         part of the respective
      Service definition, see Chapter 9.6.\n         Some or all of the QoS Parameters
      may be undefined for a given\n         Service, in which case the corresponding
      field is ignored by\n         the controller.\n            CLR: Cell Loss Ratio\n
      \                The Cell Loss Ratio parameter indicates the CLR\n                 guaranteed
      by the switch for the specified Service.  A\n                 cell loss ratio
      is expressed as an order of magnitude\n                 n, where the CLR takes
      the value of ten raised to the\n                 power of -n, i.e., log(CLR)=-n.
      \ The value n is coded\n                 as a binary integer, having a range
      of 1 <= n <= 15.\n                 In addition, the value 0b1111 1111 indicates
      that no\n                 CLR guarantees are given.\n            Frequency\n
      \                The frequency field is coded as an 8 bit unsigned\n                 integer.
      \ Frequency applies to the MPLS CR-LDP Service\n                 (see Section
      10.4.3).  Valid values of Frequency are:\n                 0 - Very frequent\n
      \                1 - Frequent\n                 2 - Unspecified\n            CTD:
      Cell Transfer Delay\n                 The CTD value is expressed in units of
      microseconds.\n                 It is coded as a 24-bit integer.\n            CDV:
      Peak-to-peak Cell Delay Variation\n                 The CDV value is expressed
      in units of microseconds.\n                 It is coded as a 24-bit integer.\n"
    title: 8.4  Service Configuration Message
  title: 8.  Configuration Messages
- contents:
  - "9.  Event Messages\n   Event messages allow the switch to inform the controller
    of certain\n   asynchronous events.  By default the controller does not acknowledge\n
    \  event messages unless ReturnReceipt is set in the Result field.  The\n   Code
    field is only used in case of Adjacency Update message,\n   otherwise it is not
    used and SHOULD be set to zero.  Event messages\n   are not sent during initialisation.
    \ Event messages have the\n   following format:\n    0                   1                   2
    \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |    Version    | Message Type  |    Result     |     Code      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  | Partition ID  |            Transaction Identifier             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |I|      SubMessage Number      |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                             Port                              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                      Port Session Number                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                     Event Sequence Number                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |x|S|x|x|                                                       |\n   +-+-+-+-+
    \                    Label                             |\n   ~                                                               ~\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      Note:
    Fields and Parameters that have been explained in the\n         description of
    the general messages will not be explained in\n         this section.  Please
    refer to section 3.1 for details.\n      Event Sequence Number\n         The current
    value of the Event Sequence Number for the\n         specified port.  The Event
    Sequence Number is set to zero when\n         the port is initialised.  It is
    incremented by one each time\n         the port detects an asynchronous event
    that the switch would\n         normally report via an Event message.  The Event
    Sequence\n         Number MUST be incremented each time an event occurs even if\n
    \        the switch is prevented from sending an Event message due to\n         the
    action of the flow control.\n      Label\n         Field gives the Label to which
    the event message refers.  If\n         this field is not required by the event
    message it is set to\n         zero.\n   Each switch port MUST maintain an Event
    Sequence Number and a set of\n   Event Flags, one Event Flag for each type of
    Event message.  When a\n   switch sends an Event message it MUST set the Event
    Flag for that\n   port corresponding to the Event type.  If Flow Control is activated\n
    \  for this Event type for this Port then the switch MUST NOT send\n   another
    Event message of the same type for that port until the Event\n   Flag has been
    reset.  Event Flags are reset by the \"Reset Event\n   Flags\" function of the
    Port Management message.  This is a simple\n   flow control preventing the switch
    from flooding the controller with\n   event messages.  The Event Sequence Number
    of the port MUST be\n   incremented every time an event is detected on that port
    even if the\n   port is prevented from reporting the event due to the action of
    the\n   flow control.  This allows the controller to detect that it has not\n
    \  been informed of some events that have occurred on the port due to\n   the
    action of the flow control.\n"
  - contents:
    - "9.1  Port Up Message\n   The Port Up message informs the controller that the
      Line Status of a\n   port has changed from, either the Down or Test state to
      the Up state.\n   When the Line Status of a switch port changes to the Up state
      from\n   either the Down or Test state a new Port Session Number MUST be\n   generated,
      preferably using some form of random number.  The new Port\n   Session Number
      is given in the Port Session Number field.  The Label\n   field is not used
      and is set to zero.  The Port Up message is:\n      Message Type = 80\n"
    title: 9.1  Port Up Message
  - contents:
    - "9.2  Port Down Message\n   The Port Down message informs the controller that
      the Line Status of\n   a port has changed from the Up state or Test state to
      the Down state.\n   This message will be sent to report link failure if the
      switch is\n   capable of detecting link failure.  The port session number that
      was\n   valid before the port went down is reported in the Port Session\n   Number
      field.  The Label field is not used and is set to zero.  The\n   Port Down message
      is:\n      Message Type = 81\n"
    title: 9.2  Port Down Message
  - contents:
    - "9.3  Invalid Label Message\n   The Invalid Label message is sent to inform
      the controller that one\n   or more cells or frames have arrived at an input
      port with a Label\n   that is currently not allocated to an assigned connection.
      \ The input\n   port is indicated in the Port field, and the Label in the Label\n
      \  field.  The Invalid Label message is:\n      Message Type = 82\n"
    title: 9.3  Invalid Label Message
  - contents:
    - "9.4  New Port Message\n   The New Port message informs the controller that
      a new port has been\n   added to the switch.  The port number of the new port
      is given in the\n   Port field.  A new Port Session Number MUST be assigned,
      preferably\n   using some form of random number.  The new Port Session Number
      is\n   given in the Port Session Number field.  The state of the new port is\n
      \  undefined so the Label field is not used and is set to zero.  The New\n   Port
      message is:\n      Message Type = 83\n"
    title: 9.4  New Port Message
  - contents:
    - "9.5  Dead Port Message\n   The Dead Port message informs the controller that
      a port has been\n   removed from the switch.  The port number of the port is
      given in the\n   Port field.  The Port Session Number that was valid before
      the port\n   was removed is reported in the Port Session Number field.  The
      Label\n   fields are not used and are set to zero.  The Dead Port message is:\n
      \     Message Type = 84\n"
    title: 9.5  Dead Port Message
  - contents:
    - "9.6  Adjacency Update Message\n   The Adjacency Update message informs the
      controller when adjacencies,\n   i.e., other controllers controlling a specific
      partition, are joining\n   or leaving.  When a new adjacency has been established,
      the switch\n   sends an Adjacency Update message to every controller with an\n
      \  established adjacency to that partition.  The Adjacency Update\n   message
      is also sent when adjacency is lost between the partition and\n   a controller,
      provided that there are any remaining adjacencies with\n   that partition.  The
      Code field is used to indicate the number of\n   adjacencies known by the switch
      partition.  The Label field is not\n   used and SHOULD be set to zero.  The
      Adjacency Update message is:\n      Message Type = 85\n"
    title: 9.6  Adjacency Update Message
  title: 9.  Event Messages
- contents:
  - '10.  Service Model Definition

    '
  - contents:
    - "10.1  Overview\n   In the GSMP Service Model a controller may request the switch
      to\n   establish a connection with a given Service.  The requested Service\n
      \  is identified by including a Service ID in the Add Branch message or\n   the
      Reservation Message.  The Service ID refers to a Service\n   Definition provided
      in this chapter of the GSMP specification.\n   A switch that implements one
      or more of the Services, as defined\n   below, advertises the availability of
      these Services in the Service\n   Configuration message response (see Section
      8.4).  Details of the\n   switch's implementation of a given Service that are
      important to the\n   controller (e.g., the value of delay or loss bounds or
      the\n   availability of traffic controls such as policers or shapers) are\n
      \  reported in the form of a Capability Set in the Service Configuration\n   message
      response.\n   Thus a switch's implementation of a Service is defined in two
      parts:\n   the Service Definition, which is part of the GSMP specification,
      and\n   the Capability Set, which describes attributes of the Service\n   specific
      to the switch.  A switch may support more than one\n   Capability Set for a
      given Service.  For example if a switch supports\n   one Service with two different
      values of a delay bound it could do\n   this by reporting two Capability Sets
      for that Service.\n   The Service Definition is identified in GSMP messages
      by the Service\n   ID, a sixteen-bit identifier.  Assigned numbers for the Service
      ID\n   are given with the Service Definitions in Section 10.4.  The\n   Capability
      Set is identified in GSMP messages by the Capability Set\n   ID, a sixteen-bit
      identifier.  Numbers for the Capability Set ID are\n   assigned by the switch
      and are advertised in the Service\n   Configuration message response.\n   The
      switch reports all its supported Services and Capability Sets in\n   the Service
      Configuration message response.  The subset of Services\n   and Capability Sets
      supported on an individual port is reported in\n   the Port Configuration message
      response or in the All Ports\n   Configuration message response.  In these messages
      the Services and\n   Capability Sets supported on the specified port are indicated
      by a\n   list of {Service ID, Capability Set ID} number pairs.\n"
    title: 10.1  Overview
  - contents:
    - "10.2  Service Model Definitions\n   Terms and objects defined for the GSMP
      Service Model are given in\n   this section.\n"
    - contents:
      - "10.2.1  Original Specifications\n   Services in GSMP are defined largely
        with reference to Original\n   Specifications, i.e., the standards or implementation
        agreements\n   published by organisations such as ITU-T, IETF, and ATM Forum
        that\n   originally defined the Service.  This version of GSMP refers to 4\n
        \  original specifications: [8], [9], [10] and [11].\n"
      title: 10.2.1  Original Specifications
    - contents:
      - "10.2.2  Service Definitions\n   Each Service Definition in GSMP includes
        definition of:\n      Traffic Parameters\n         Traffic Parameter definitions
        are associated with Services\n         while Traffic Parameter values are
        associated with connections.\n         Traffic Parameters quantitatively describe
        a connection's\n         requirements on the Service.  For example, Peak Cell
        Rate is a\n         Traffic Parameter of the Service defined by the ATM Forum\n
        \        Constant Bit Rate Service Category.\n         Some Traffic Parameters
        are mandatory and some are optional,\n         depending on the Service.\n
        \        Semantics of Traffic Parameters are defined by reference to\n         Original
        Specifications.\n      QoS Parameters\n         QoS Parameters and their values
        are associated with Services.\n         QoS Parameters express quantitative
        characteristics of a\n         switch's support of a Service.  They include,
        for example,\n         quantitative bounds on switch induced loss and delay.\n
        \        Some QoS Parameters will be mandatory and some will be\n         optional.\n
        \        Semantics of QoS Parameters are defined by reference to\n         Original
        Specifications.\n      Traffic Controls\n         The implementation of some
        Services may include the use of\n         Traffic Controls.  Traffic Controls
        include, for example\n         functions such as policing, input shaping,
        output shaping,\n         tagging and marking, frame vs. cell merge, frame
        vs. cell\n         discard.\n         Switches are not required to support
        Traffic Controls.  Any\n         function that is always required in the implementation
        of a\n         Service is considered part of the Service and is not considered\n
        \        a Traffic Control.\n         If a switch supports a Traffic Control
        then the control may be\n         applied either to all connections that use
        a given Capability\n         Set (see below) or to individual connections.\n
        \        The definition of a Traffic Control is associated with a\n         Service.
        \ Traffic Controls are defined, as far as possible, by\n         reference
        to Original Specifications.\n"
      title: 10.2.2  Service Definitions
    - contents:
      - "10.2.3  Capability Sets\n   For each Service that a switch supports the switch
        MUST also support\n   at least one Capability Set.  A Capability Set establishes\n
        \  characteristics of a switch's implementation of a Service.  It may be\n
        \  appropriate for a switch to support more than one Capability Set for\n
        \  a given Service.\n   A Capability Set may contain, depending on the Service
        definition,\n   QoS Parameter values and an indication of availability of
        Traffic\n   Controls.\n   If a switch reports QoS Parameter values in a Capability
        Set then\n   these apply to all the connections that use that Capability Set.\n
        \  For each Traffic Control defined for a given Service the switch\n   reports
        availability of that control as one of the following:\n      Not available
        in the Capability Set,\n      Applied to all connections that use the Capability
        Set, or\n      Available for application to connections that use the Capability\n
        \     Set on a per connection basis.  In this case, a controller may\n      request
        application of the Traffic Control in connection\n      management messages.\n"
      title: 10.2.3  Capability Sets
    title: 10.2  Service Model Definitions
  - contents:
    - "10.3  Service Model Procedures\n   A switch's Services and Capability Sets
      are reported to a controller\n   in a Service Configuration message.  A Service
      Configuration message\n   response includes the list of Services defined for
      GSMP that the\n   switch supports and, for each Service, a specification of
      the\n   Capability Sets supported for the Service.  Services are referred to\n
      \  by numbers standardised in the GSMP specification.  Capability Sets\n   are
      referred to by a numbering system reported by the switch.  Each\n   Capability
      Set within a given Service includes a unique identifying\n   number together
      with the switch's specification of QoS Parameters and\n   Traffic Controls.\n
      \  A switch need not support all the defined Services and Capability\n   Sets
      on every port.  The supported Services and Capability Sets are\n   reported
      to the controller on a per port basis in port configuration\n   messages.  Port
      configuration response messages list the supported\n   Services using the standardised
      identifying numbers and the\n   Capability Sets by using the identifying numbers
      established in the\n   switch Service configuration messages.\n   GSMP does
      not provide a negotiation mechanism by which a controller\n   may establish
      or modify Capability Sets.\n   When a controller establishes a connection, the
      connection management\n   message includes indication of the Service and the
      Capability Set.\n   Depending on these the connection management message may
      additionally\n   include Traffic Parameter values and Traffic Control flags.\n
      \  A connection with a given Service can only be established if both the\n   requested
      Service and the requested Capability Set are available on\n   all of the connection's
      input and output ports.\n   Refresh of an extant connection is permitted but
      the add branch\n   message requesting the message MUST NOT include indication
      of\n   Service, Capability Sets or Traffic Parameters.\n   An extant connection's
      Traffic Parameters may be changed without\n   first deleting the connection.
      \ The Service and Capability Sets of an\n   extant connection cannot be changed.\n
      \  Move branch messages may be refused on the grounds of resource\n   depletion.\n"
    title: 10.3  Service Model Procedures
  - contents:
    - "10.4  Service Definitions\n   This section sets forth the definition of Services.
      \ The following\n   Service Identifiers are defined:\n         ID          Service
      Type\n         1           CBR= 1\n         2           rt-VBR.1\n         3
      \          rt-VBR.2\n         4           rt-VBR.3\n         5           nrt-VBR.1\n
      \        6           nrt-VBR.2\n         7           nrt-VBR.3\n         8           UBR.1\n
      \        9           UBR.2\n         10-11       Reserved\n         12          GFR.1\n
      \        13          GFR.2\n         14-19       Reserved\n         20          Int-Serv
      Controlled Load\n         21-24       Reserved\n         25          MPLS CR-LDP
      QoS\n         26-29       Reserved\n         30          Frame Relay Service\n
      \        31-49       Reserved\n         50-69       Reserved GMPLS\n         70-65535
      \   Reserved\n   Each Service will be defined in its own subsection.  Each Service\n
      \  definition includes the following definitions:\n      Service Identifier\n
      \        The reference number used to identify the Service in GSMP\n         messages.\n
      \     Service Characteristics\n         A definition of the Service.\n      Traffic
      Parameters\n         A definition of the Traffic Parameters used in connection\n
      \        management messages.\n      QoS Parameters\n         A definition of
      the QoS Parameters that are included in the\n         Capability Set for instances
      of the Service.\n      Traffic Controls\n         A definition of the Traffic
      Controls that may be supported by\n         an instance of the Service.\n   Descriptive
      text is avoided wherever possible in order to minimise\n   any possibility of
      semantic conflict with the Original\n   Specifications.\n"
    - contents:
      - '10.4.1  ATM Forum Service Categories

        '
      - contents:
        - "10.4.1.1  CBR\n   Service Identifier:\n      CBR.1 - Service ID = 1\n   Service
          Characteristics:\n      Equivalent to ATM Forum CBR.1 Service, see [8].\n
          \  Traffic Parameters:\n      -  Peak Cell Rate\n      -  Cell Delay Variation
          Tolerance\n   QoS Parameters:\n      -  Cell Loss Ratio\n      -  Maximum
          Cell Transfer Delay\n      -  Peak-to-peak Cell Delay Variation\n   Traffic
          Controls:\n      -  (U) Usage Parameter Control\n      -  (I) Ingress Traffic
          Shaping to the Peak Cell Rate\n      -  (E) Egress Traffic Shaping to the
          Peak Cell Rate and Cell Delay\n             Variation Tolerance\n      -
          \ (D) Packet Discard\n"
        title: 10.4.1.1  CBR
      - contents:
        - "10.4.1.2  rt-VBR\n   Service Identifier:\n      rt-VBR.1 - Service ID =
          2\n      rt-VBR.2 - Service ID = 3\n      rt-VBR.3 - Service ID = 4\n   Service
          Characteristics:\n      Equivalent to ATM Forum rt-VBR Service, see [8].\n
          \  Traffic Parameters:\n      -  Peak Cell Rate\n      -  Cell Delay Variation
          Tolerance\n      -  Sustainable Cell Rate\n      -  Maximum Burst Size\n
          \  QoS Parameters:\n      -  Cell Loss Ratio\n      -  Maximum Cell Transfer
          Delay\n      -  Peak-to-peak Cell Delay Variation\n   Traffic Controls:\n
          \     -  (U) Usage Parameter Control\n      -  (I) Ingress Traffic Shaping
          to the Peak Cell Rate\n      -  (E) Egress Traffic Shaping to the Peak Cell
          Rate and Cell Delay\n             Variation Tolerance\n      -  (S) Egress
          Traffic Shaping to the Sustainable Cell Rate and\n             Maximum Burst
          Size\n      -  (P) Packet Discard\n      -  (V) VC Merge\n"
        title: 10.4.1.2  rt-VBR
      - contents:
        - "10.4.1.3  nrt-VBR\n   Service Identifier:\n      nrt-VBR.1 - Service ID
          = 5\n      nrt-VBR.2 - Service ID = 6\n      nrt-VBR.3 - Service ID = 7\n
          \  Service Characteristics:\n      Equivalent to ATM Forum nrt-VBR Service,
          see [8].\n   Traffic Parameters:\n      -  Peak Cell Rate\n      -  Cell
          Delay Variation Tolerance\n      -  Sustainable Cell Rate\n      -  Maximum
          Burst Size\n   QoS Parameter:\n      -  Cell Loss Ratio\n   Traffic Controls:\n
          \     -  (U) Usage Parameter Control\n      -  (I) Ingress Traffic Shaping
          to the Peak Cell Rate\n      -  (E) Egress Traffic Shaping to the Peak Cell
          Rate and Cell Delay\n             Variation Tolerance\n      -  (S) Egress
          Traffic Shaping to the Sustainable Cell Rate and\n             Maximum Burst
          Size\n      -  (P) Packet Discard\n      -  (V) VC Merge\n"
        title: 10.4.1.3  nrt-VBR
      - contents:
        - "10.4.1.4  UBR\n   Service Identifier:\n      UBR.1 - Service ID = 8\n      UBR.2
          - Service ID = 9\n   Service Characteristics:\n      Equivalent to ATM Forum
          UBR Service, see [8].\n   Traffic Parameters:\n      -  Peak Cell Rate\n
          \     -  Cell Delay Variation Tolerance\n   QoS Parameter:\n      None\n
          \  Traffic Controls:\n      -  (U) Usage Parameter Control\n      -  (I)
          Ingress Traffic Shaping to the Peak Cell Rate\n      -  (E) Egress Traffic
          Shaping to the Peak Cell Rate and Cell Delay\n             Variation Tolerance\n
          \     -  (P) Packet Discard\n      -  (V) VC Merge\n"
        title: 10.4.1.4  UBR
      - contents:
        - "10.4.1.5  ABR\n   ABR is not supported in this version of GSMP.\n"
        title: 10.4.1.5  ABR
      - contents:
        - "10.4.1.6  GFR\n   Service Identifier:\n      GFR.1 - Service ID = 12\n
          \     GFR.2 - Service ID = 13\n   Service Characteristics:\n      Equivalent
          to ATM Forum GFR Service, see [8].\n   Traffic Parameters:\n      -  Peak
          Cell Rate\n      -  Cell Delay Variation Tolerance\n      -  Minimum Cell
          Rate\n      -  Maximum Burst Size\n      -  Maximum Frame Size\n   QoS Parameter:\n
          \     -  Cell Loss Ratio\n   Traffic Controls:\n      -  (U) Usage Parameter
          Control\n      -  (I) Ingress Traffic Shaping to the Peak Cell Rate\n      -
          \ (E) Egress Traffic Shaping to the Peak Cell Rate and Cell Delay\n             Variation
          Tolerance\n      -  (V) VC Merge\n"
        title: 10.4.1.6  GFR
      title: 10.4.1  ATM Forum Service Categories
    - contents:
      - '10.4.2  Integrated Services

        '
      - contents:
        - "10.4.2.1  Controlled Load\n   Service Identifier:\n      Int-Serv Controlled
          Load - Service ID = 20\n   Service Characteristics:\n      See [9].\n   Traffic
          Parameters:\n      -  Token bucket rate (r)\n      -  Token bucket depth
          (b)\n      -  Peak rate (p)\n      -  Minimum policed unit (m)\n      -
          \ Maximum packet size (M)\n   QoS Parameter:\n      None.\n   Traffic Controls:\n
          \     None.\n"
        title: 10.4.2.1  Controlled Load
      title: 10.4.2  Integrated Services
    - contents:
      - "10.4.3  MPLS CR-LDP\n   Service Identifier:\n      MPLS CR-LDP QoS - Service
        ID = 25\n   Service Characteristics:\n      See [10].\n   Traffic Parameters:\n
        \     -  Peak Data Rate\n      -  Peak Burst Size\n      -  Committed Data
        Rate\n      -  Committed Burst Size\n      -  Excess Burst Size\n      -  Weight\n
        \  QoS Parameter:\n      -  Frequency\n   Traffic Controls:\n      None currently
        defined.\n"
      title: 10.4.3  MPLS CR-LDP
    - contents:
      - "10.4.4  Frame Relay\n   Service Identifier:\n      Frame Relay Service -
        Service ID = 30\n   Service Characteristics:\n      Equivalent to Frame Relay
        Bearer Service, see [11].\n   Traffic Parameters:\n      -  Committed Information
        Rate\n      -  Committed Burst Rate\n      -  Excess Burst Rate\n   QoS Parameters:\n
        \     None.\n   Traffic Controls:\n      -  Usage Parameter Control\n      -
        \ Egress Traffic Shaping to the Committed Information Rate and\n         Committed
        Burst Size\n"
      title: 10.4.4  Frame Relay
    - contents:
      - "10.4.5  DiffServ\n   DiffServ is not supported in this version of GSMP.\n"
      title: 10.4.5  DiffServ
    title: 10.4  Service Definitions
  - contents:
    - "10.5  Format and encoding of the Traffic Parameters\n   Connection management
      messages that use the GSMP Service Model (i.e.,\n   those that have IQS or OQS
      set to 0b10) include the Traffic\n   Parameters Block that specifies the Traffic
      Parameter values of a\n   connection.  The required Traffic Parameters of a
      given Service are\n   given in Section 10.4.  The format and encoding of these
      parameters\n   are given below.\n"
    - contents:
      - "10.5.1  Traffic Parameters for ATM Forum Services\n   The Traffic Parameters:\n
        \     -  Peak Cell Rate\n      -  Cell Delay Variation Tolerance\n      -
        \ Sustainable Cell Rate\n      -  Maximum Burst Size\n      -  Minimum Cell
        Rate\n      -  Maximum Frame Size\n   are defined in [8].  These Parameters
        are encoded as 24-bit unsigned\n   integers.  Peak Cell Rate, Sustainable
        Cell Rate, and Minimum Cell\n   Rate are in units of cells per second.  Cell
        Delay Variation\n   Tolerance is in units of microseconds.  Maximum Burst
        Size and\n   Maximum Frame Size are in units of cells.  In GSMP messages,
        the\n   individual Traffic Parameters are encoded as follows:\n    0                   1
        \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |x x x x x x x x|           24 bit unsigned integer             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  The format of the Traffic Parameters Block in connection management\n   messages
        depends on the Service.  It is a sequence of the 32 bit\n   words (as shown
        above) corresponding to the Traffic Parameters as\n   specified in the Service
        Definitions given in Section 10.4.1 in the\n   order given there.\n"
      title: 10.5.1  Traffic Parameters for ATM Forum Services
    - contents:
      - "10.5.2  Traffic Parameters for Int-Serv Controlled Load Service\n   The Traffic
        Parameters:\n      -  Token bucket rate (r)\n      -  Token bucket size (b)\n
        \     -  Peak rate (p)\n   are defined in [9].  They are encoded as 32-bit
        IEEE single-precision\n   floating point numbers.  The Traffic Parameters
        Token bucket rate (r)\n   and Peak rate (p) are in units of bytes per seconds.
        \ The Traffic\n   Parameter Token bucket size (b) is in units of bytes.\n
        \  The Traffic Parameters:\n      -  Minimum policed unit (m)\n      -  Maximum
        packet size (M)\n   are defined in [9].  They are encoded as 32 integer in
        units of\n   bytes.\n   The Traffic Parameters Block for the Int-Serv Controlled
        Load Service\n   is as follows:\n    0                   1                   2
        \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                     Token bucket rate (r)                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                     Token bucket size (b)                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                         Peak rate (p)                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                    Minimum policed unit (m)                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                    Maximum packet size (M)                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
      title: 10.5.2  Traffic Parameters for Int-Serv Controlled Load Service
    - contents:
      - "10.5.3  Traffic Parameters for CRLDP Service\n   The Traffic Parameters:\n
        \     -  Peak Data Rate\n      -  Peak Burst Size\n      -  Committed Data
        Rate\n      -  Committed Burst Size\n      -  Excess Burst Size\n   are defined
        in [10] to be encoded as a 32-bit IEEE single-precision\n   floating point
        number.  A value of positive infinity is represented\n   as an IEEE single-precision
        floating-point number with an exponent of\n   all ones (255) and a sign and
        mantissa of all zeros.  The values Peak\n   Data Rate and Committed Data Rate
        are in units of bytes per second.\n   The values Peak Burst Size, Committed
        Burst Size and Excess Burst\n   Size are in units of bytes.\n   The Traffic
        Parameter\n      -  Weight\n   is defined in [10] to be an 8-bit unsigned
        integer indicating the\n   weight of the CRLSP.  Valid weight values are from
        1 to 255.  The\n   value 0 means that weight is not applicable for the CRLSP.\n
        \  The Traffic Parameters Block for the CRLDP Service is as follows:\n    0
        \                  1                   2                   3\n    0 1 2 3
        4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                        Peak Data Rate                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                        Peak Burst Size                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                      Committed Data Rate                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                      Committed Burst Size                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                       Excess Burst Size                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |x x x x x x x x x x x x x x x x x x x x x x x x|    Weight     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
      title: 10.5.3  Traffic Parameters for CRLDP Service
    - contents:
      - "10.5.4  Traffic Parameters for Frame Relay Service\n   The Traffic Parameters:\n
        \     -  Committed Information Rate\n      -  Committed Burst Size\n      -
        \ Excess Burst Size\n   are defined in [11].  Format and encoding of these
        parameters for\n   frame relay signalling messages are defined in [12].  (Note
        than in\n   [12] the Committed Information Rate is called \"Throughput\".)
        \ GSMP\n   uses the encoding defined in [12] but uses a different format.\n
        \  The format of the Traffic Parameters Block for Frame Relay Service is\n
        \  as follows:\n    0                   1                   2                   3\n
        \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |x x x x x x x x x x x x x| Mag |x x x x x|   CIR Multiplier    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |x x x x x x x x x x x x x| Mag |x x|     CBS Multiplier        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |x x x x x x x x x x x x x| Mag |x x|     EBS Multiplier        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \     Mag\n         This field is an unsigned integer in the range from 0
        to 6.\n         The value 7 is not allowed.  Mag is the decimal exponent for\n
        \        the adjacent multiplier field (which itself functions as a\n         mantissa).\n
        \     CIR Multiplier\n         This field is an unsigned integer.  It functions
        as the\n         mantissa of the Committed Information Rate Traffic Parameter.\n
        \     CBS Multiplier\n      EBS Multiplier\n         These fields are unsigned
        integers.  They function as the\n         mantissas of the Committed Burst
        Size and Excess Burst Size\n         Traffic Parameters respectively.\n   The
        Traffic Parameter Values are related to their encoding in GSMP\n   messages
        as follows:\n      Committed Information Rate = 10^(Mag) * (CIR Multiplier)\n
        \     Committed Burst Size = 10^(Mag) * (CBS Multiplier)\n      Excess Burst
        Size = 10^(Mag) * (EBS Multiplier)\n"
      title: 10.5.4  Traffic Parameters for Frame Relay Service
    title: 10.5  Format and encoding of the Traffic Parameters
  - contents:
    - "10.6  Traffic Controls (TC) Flags\n   The TC Flags field in Add Branch messages
      for connections using the\n   Service Model are set by the controller to indicate
      that specific\n   traffic controls are requested for the requested connection.
      \ The TC\n   Flags field is shown below:\n             0 1 2 3 4 5 6 7\n            +-+-+-+-+-+-+-+-+\n
      \           |U|D|I|E|S|V|P|x|\n            +-+-+-+-+-+-+-+-+\n      U: Usage
      Parameter Control\n            When set, this flag indicates that Usage Parameter
      Control\n            is requested.\n      D: Packet Discard\n            When
      set, this flag indicates that Packet Discard is\n            requested.\n      I:
      Ingress Shaping\n            When set, this flag indicates the availability
      of Ingress\n            Traffic Shaping to the Peak Rate and Delay Variation\n
      \           Tolerance is requested.\n      E: Egress Shaping, Peak Rate\n            When
      set, this flag indicates that Egress Shaping to the\n            Peak Rate and
      Delay Variation Tolerance is requested.\n      S: Egress Traffic Shaping, Sustainable
      Rate\n            When set, this flag indicates that Egress Traffic Shaping
      to\n            the Sustainable Rate and Maximum Burst Size is requested.\n
      \     V: VC Merge\n            When set, this flag indicates that ATM Virtual
      Channel Merge\n            (i.e., multipoint to point ATM switching with a traffic\n
      \           control to avoid AAL5 PDU interleaving) is requested.\n      P:
      Port\n            When set indicates that traffic block pertains to Ingress\n
      \           Port.\n      x: Reserved\n   The controller may set (to one) the
      flag corresponding to the\n   requested Traffic Control if the corresponding
      Traffic Control has\n   been indicated in the Service Configuration response
      message (Section\n   8.4) as available for application to connections that use
      the\n   requested Capability Set on a per connection basis.  (The requested\n
      \  Capability Set is indicated by the Capability Set ID the least\n   significant
      byte of the Service Selector field of the Add Branch\n   message.)  If the Traffic
      Control has been indicated in the Service\n   Configuration response message
      as either not available in the\n   Capability Set or applied to all connections
      that use the Capability\n   Set then the controller sets the flag to zero and
      the switch ignores\n   the flag.\n"
    title: 10.6  Traffic Controls (TC) Flags
  title: 10.  Service Model Definition
- contents:
  - "11.  Adjacency Protocol\n   The adjacency protocol is used to synchronise state
    across the link,\n   to agree on which version of the protocol to use, to discover
    the\n   identity of the entity at the other end of a link, and to detect when\n
    \  it changes.  GSMP is a hard state protocol.  It is therefore\n   important
    to detect loss of contact between switch and controller,\n   and to detect any
    change of identity of switch or controller.  No\n   GSMP messages other than those
    of the adjacency protocol may be sent\n   across the link until the adjacency
    protocol has achieved\n   synchronisation.\n"
  - contents:
    - "11.1  Packet Format\n   All GSMP messages belonging to the adjacency protocol
      have the\n   following structure:\n    0                   1                   2
      \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |    Version    | Message Type  |     Timer     |M|     Code    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                          Sender Name                          |\n   +                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                               |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \                              +\n   |                         Receiver Name
      \                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                          Sender Port                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                         Receiver Port                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | PType | PFlag |               Sender Instance                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | Partition ID  |              Receiver Instance                |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     Version\n         In the adjacency protocol the Version field is used
      for version\n         negotiation.  The version negotiation is performed before\n
      \        synchronisation is achieved.  In a SYN message the Version\n         field
      always contains the highest version understood by the\n         sender.  A receiver
      receiving a SYN message with a version\n         higher than understood will
      ignore that message.  A receiver\n         receiving a SYN message with a version
      lower than its own\n         highest version, but a version that it understands,
      will reply\n         with a SYNACK with the version from the received SYN in
      its\n         GSMP Version field.  This defines the version of the GSMP\n         protocol
      to be used while the adjacency protocol remains\n         synchronised.  All
      other messages will use the agreed version\n         in the Version field.\n
      \        The version number for the version of the GSMP protocol defined\n         by
      this specification is Version = 3.\n      Message Type\n         The adjacency
      protocol is:\n            Message Type = 10\n      Timer\n         The Timer
      field is used to inform the receiver of the timer\n         value used in the
      adjacency protocol of the sender.  The timer\n         specifies the nominal
      time between periodic adjacency protocol\n         messages.  It is a constant
      for the duration of a GSMP session.\n         The timer field is specified in
      units of 100ms.\n      M-Flag\n         The M-Flag is used in the SYN message
      to indicate whether the\n         sender is a master or a slave.  If the M-Flag
      is set in the SYN\n         message, the sender is a master.  If zero, the sender
      is a\n         slave.  The GSMP protocol is asymmetric, the controller being\n
      \        the master and the switch being the slave.  The M-Flag prevents\n         a
      master from synchronising with another master, or a slave\n         with another
      slave.  If a slave receives a SYN message with a\n         zero M-Flag, it MUST
      ignore that SYN message.  If a master\n         receives a SYN message with
      the M-Flag set, it MUST ignore that\n         SYN message.  In all other messages
      the M-Flag is not used.\n      Code\n         Field specifies the function of
      the message.  Four Codes are\n         defined for the adjacency protocol:\n
      \                 SYN:     Code = 1\n                  SYNACK:  Code = 2\n                  ACK:
      \    Code = 3\n                  RSTACK:  Code = 4.\n      Sender Name\n         For
      the SYN, SYNACK, and ACK messages, is the name of the\n         entity sending
      the message.  The Sender Name is a 48-bit\n         quantity that is unique
      within the operational context of the\n         device.  A 48-bit IEEE 802 MAC
      address, if available, may be\n         used for the Sender Name.  If the Ethernet
      encapsulation is\n         used the Sender Name MUST be the Source Address from
      the MAC\n         header.  For the RSTACK message, the Sender Name field is
      set\n         to the value of the Receiver Name field from the incoming\n         message
      that caused the RSTACK message to be generated.\n      Receiver Name\n         For
      the SYN, SYNACK, and ACK messages, is the name of the\n         entity that
      the sender of the message believes is at the far\n         end of the link.
      \ If the sender of the message does not know\n         the name of the entity
      at the far end of the link, this field\n         SHOULD be set to zero.  For
      the RSTACK message, the Receiver\n         Name field is set to the value of
      the Sender Name field from\n         the incoming message that caused the RSTACK
      message to be\n         generated.\n      Sender Port\n         For the SYN,
      SYNACK, and ACK messages, is the local port number\n         of the link across
      which the message is being sent.  For the\n         RSTACK message, the Sender
      Port field is set to the value of\n         the Receiver Port field from the
      incoming message that caused\n         the RSTACK message to be generated.\n
      \     Receiver Port\n         For the SYN, SYNACK, and ACK messages, is what
      the sender\n         believes is the local port number for the link, allocated
      by\n         the entity at the far end of the link.  If the sender of the\n
      \        message does not know the port number at the far end of the\n         link,
      this field SHOULD be set to zero.  For the RSTACK\n         message, the Receiver
      Port field is set to the value of the\n         Sender Port field from the incoming
      message that caused the\n         RSTACK message to be generated.\n      PType\n
      \        PType is used to specify if partitions are used and how the\n         Partition
      ID is negotiated.\n               Type of partition being requested.\n               0
      No Partition\n               1 Fixed Partition Request\n               2 Fixed
      Partition Assigned\n      PFlag\n         Used to indicate the type of partition
      request.\n               1 - New Adjacency.\n                     In the case
      of a new adjacency, the state of the\n                     switch will be reset.\n
      \              2 - Recovered Adjacency.\n                     In the case of
      a recovered adjacency, the state of\n                     the switch will remain,
      and the Switch Controller\n                     will be responsible for confirming
      that the state\n                     of the switch matches the desired state.\n
      \     Sender Instance\n         For the SYN, SYNACK, and ACK messages, is the
      sender's instance\n         number for the link.  It is used to detect when
      the link comes\n         back up after going down or when the identity of the
      entity at\n         the other end of the link changes.  The instance number
      is a\n         24-bit number that is guaranteed to be unique within the recent\n
      \        past and to change when the link or node comes back up after\n         going
      down.  Zero is not a valid instance number.  For the\n         RSTACK message,
      the Sender Instance field is set to the value\n         of the Receiver Instance
      field from the incoming message that\n         caused the RSTACK message to
      be generated.\n      Partition ID\n         Field used to associate the message
      with a specific switch\n         partition.\n      Receiver Instance\n         For
      the SYN, SYNACK, and ACK messages, is what the sender\n         believes is
      the current instance number for the link, allocated\n         by the entity
      at the far end of the link.  If the sender of the\n         message does not
      know the current instance number at the far\n         end of the link, this
      field SHOULD be set to zero.  For the\n         RSTACK message, the Receiver
      Instance field is set to the value\n         of the Sender Instance field from
      the incoming message that\n         caused the RSTACK message to be generated.\n"
    title: 11.1  Packet Format
  - contents:
    - "11.2  Procedure\n   The adjacency protocol is described by the following rules
      and state\n   tables.\n   The rules and state tables use the following operations:\n
      \  o  The \"Update Peer Verifier\" operation is defined as storing the\n      values
      of the Sender Instance, Sender Port, Sender Name and\n      Partition ID fields
      from a SYN or SYNACK message received from the\n      entity at the far end
      of the link.\n   o  The procedure \"Reset the link\" is defined as:\n      1.
      Generate a new instance number for the link\n      2. Delete the peer verifier
      (set to zero the values of Sender\n         Instance, Sender Port, and Sender
      Name previously stored by the\n         Update Peer Verifier operation)\n      3.
      Send a SYN message\n      4. Enter the SYNSENT state.\n   o  The state tables
      use the following Boolean terms and operators:\n      A    The Sender Instance
      in the incoming message matches the value\n           stored from a previous
      message by the \"Update Peer Verifier\"\n           operation.\n      B    The
      Sender Instance, Sender Port, Sender Name and Partition\n           ID fields
      in the incoming message match the values stored\n           from a previous
      message by the \"Update Peer Verifier\"\n           operation.\n      C    The
      Receiver Instance, Receiver Port, Receiver Name and\n           Partition ID
      fields in the incoming message match the values\n           of the Sender Instance,
      Sender Port, Sender Name and\n           Partition ID currently sent in outgoing
      SYN, SYNACK, and ACK\n           messages.\n      \"&&\" Represents the logical
      AND operation\n      \"||\" Represents the logical OR operation\n      \"!\"
      Represents the logical negation (NOT) operation.\n   o  A timer is required
      for the periodic generation of SYN, SYNACK,\n      and ACK messages.  The value
      of the timer is announced in the\n      Timer field.  The period of the timer
      is unspecified but a value\n      of one second is suggested.\n      There are
      two independent events: the timer expires, and a packet\n      arrives.  The
      processing rules for these events are:\n         Timer Expires:   Reset Timer\n
      \                         If state = SYNSENT Send SYN\n                          If
      state = SYNRCVD Send SYNACK\n                          If state = ESTAB   Send
      ACK\n          Packet Arrives:\n              If incoming message is an RSTACK:\n
      \                 If (A && C && !SYNSENT) Reset the link\n                  Else
      discard the message.\n              If incoming message is a SYN, SYNACK, or
      ACK:\n                  Response defined by the following State Tables.\n              If
      incoming message is any other GSMP message and\n                  state != ESTAB:\n
      \                 Discard incoming message.\n                  If state = SYNSENT
      Send SYN (Note 1)\n                  If state = SYNRCVD Send SYNACK (Note 1)\n
      \        Note 1: No more than two SYN or SYNACK messages should be sent\n         within
      any time period of length defined by the timer.\n   o  State synchronisation
      across a link is considered to be achieved\n      when the protocol reaches
      the ESTAB state.  All GSMP messages,\n      other than adjacency protocol messages,
      that are received before\n      synchronisation is achieved, will be discarded.\n"
    - contents:
      - "11.2.1  State Tables\n  State: SYNSENT\n  +====================================================================+\n
        \ |    Condition     |                Action               | New State |\n
        \ +==================+=====================================+===========+\n
        \ |   SYNACK && C    |  Update Peer Verifier; Send ACK     |   ESTAB   |\n
        \ +------------------+-------------------------------------+-----------+\n
        \ |   SYNACK && !C   |            Send RSTACK              |  SYNSENT  |\n
        \ +------------------+-------------------------------------+-----------+\n
        \ |       SYN        |  Update Peer Verifier; Send SYNACK  |  SYNRCVD  |\n
        \ +------------------+-------------------------------------+-----------+\n
        \ |       ACK        |            Send RSTACK              |  SYNSENT  |\n
        \ +====================================================================+\n
        \ State: SYNRCVD\n  +====================================================================+\n
        \ |    Condition     |                Action               | New State |\n
        \ +==================+=====================================+===========+\n
        \ |   SYNACK && C    |  Update Peer Verifier; Send ACK     |   ESTAB   |\n
        \ +------------------+-------------------------------------+-----------+\n
        \ |   SYNACK && !C   |            Send RSTACK              |  SYNRCVD  |\n
        \ +------------------+-------------------------------------+-----------+\n
        \ |       SYN        |  Update Peer Verifier; Send SYNACK  |  SYNRCVD  |\n
        \ +------------------+-------------------------------------+-----------+\n
        \ |  ACK && B && C   |              Send ACK               |   ESTAB   |\n
        \ +------------------+-------------------------------------+-----------+\n
        \ | ACK && !(B && C) |            Send RSTACK              |  SYNRCVD  |\n
        \ +====================================================================+\n
        \ State: ESTAB\n  +====================================================================+\n
        \ |    Condition     |                Action               | New State |\n
        \ +==================+=====================================+===========+\n
        \ |  SYN || SYNACK   |           Send ACK (note 2)         |   ESTAB   |\n
        \ +------------------+-------------------------------------+-----------+\n
        \ |  ACK && B && C   |           Send ACK (note 3)         |   ESTAB   |\n
        \ +------------------+-------------------------------------+-----------+\n
        \ | ACK && !(B && C) |              Send RSTACK            |   ESTAB   |\n
        \ +====================================================================+\n
        \        Note 2: No more than two ACKs should be sent within any time\n         period
        of length defined by the timer.  Thus, one ACK MUST be\n         sent every
        time the timer expires.  In addition, one further\n         ACK may be sent
        between timer expirations if the incoming\n         message is a SYN or SYNACK.
        \ This additional ACK allows the\n         adjacency protocol to reach synchronisation
        more quickly.\n         Note 3: No more than one ACK should be sent within
        any time\n         period of length defined by the timer.\n"
      title: 11.2.1  State Tables
    title: 11.2  Procedure
  - contents:
    - "11.3  Partition Information State\n   Each instance of a [switch controller-switch
      partition] pair will\n   need to establish adjacency synchronisation independently.\n
      \  Part of the process of establishing synchronisation when using\n   partition
      will be to establish the assignment of partition\n   identifiers.  The following
      scenarios are provided for:\n      -  A controller can request a specific partition
      ID by setting the\n         PType to Fixed Partition Request.\n      -  A controller
      can let the switch decide whether it wants to\n         assign a fixed partition
      ID or not, by setting the PType to No\n         Partition.\n      -  A switch
      can assign the specific Partition ID to the session by\n         setting the
      PType to Fixed Partition Assigned.  A switch can\n         specify that no partitions
      are handled in the session by\n         setting the PType to No Partition.\n
      \  The assignment is determined by the following behaviour:\n      -  An adjacency
      message from a controller with PType = 1 and\n         Code = SYN SHOULD be
      treated as a partition request.\n      -  An adjacency message from a switch
      with PType = 2 and\n         Code = SYN SHOULD be treated as a partition assignment.\n
      \     -  An adjacency message from a controller or a switch with\n         PType
      = 2 and Code = (SYNACK || ACK) SHOULD be treated as a\n         success response,
      the partition is assigned.\n      -  An adjacency message from a controller
      with PType = 0 and\n         Code = SYN indicates that the controller has not
      specified if\n         it requests partitions or not.\n      -  An adjacency
      message from a switch with PType = 0 and\n         Code = SYN indicates that
      the switch does not support\n         partitions.\n      -  An adjacency message
      from a controller or a switch with\n         PType = 0 and Code = (SYNACK ||
      ACK) indicates that the session\n         does not support partitions.\n      -
      \ An adjacency message from a controller or a switch with\n         PType =
      (1 || 2) and Code = RSTACK indicates that requested\n         Partition ID is
      unavailable.\n      -  An adjacency message from a controller or a switch with\n
      \        PType = 0 and Code = RSTACK indicates that an unidentified\n         error
      has occurred.  The session SHOULD be reset.\n      All other combinations of
      PType and Code are undefined in this\n      version of GSMP.\n"
    title: 11.3  Partition Information State
  - contents:
    - "11.4  Loss of Synchronisation\n   If after synchronisation is achieved, no
      valid GSMP messages are\n   received in any period of time in excess of three
      times the value of\n   the Timer field announced in the incoming adjacency protocol\n
      \  messages, loss of synchronisation may be declared.\n   While re-establishing
      synchronisation with a controller, a switch\n   SHOULD maintain its connection
      state, deferring the decision about\n   resetting the state until after synchronisation
      is re-established.\n   Once synchronisation is re-established the decision about
      resetting\n   the connection state SHOULD be made on the following basis:\n
      \     -  If PFLAG = 1, then a new adjacency has been established and the\n         state
      SHOULD be reset\n      -  If PFLAG = 2, then adjacency has been re-established
      and the\n         connection state SHOULD be retained.  Verification that\n
      \        controller and connection state are the same is the\n         responsibility
      of the controller.\n"
    title: 11.4  Loss of Synchronisation
  - contents:
    - "11.5  Multiple Controllers per switch partition\n   Multiple switch controllers
      may jointly control a single switch\n   partition.  The controllers may control
      a switch partition either in\n   a primary/standby fashion or as part of multiple
      controllers\n   providing load-sharing for the same partition.  It is the\n
      \  responsibility of the controllers to co-ordinate their interactions\n   with
      the switch partition.  In order to assist the controllers in\n   tracking multiple
      controller adjacencies to a single switch\n   partition, the Adjacency Update
      message is used to inform a\n   controller that there are other controllers
      interacting with the same\n   partition.  It should be noted that the GSMP does
      not include\n   features that allow the switch to co-ordinate cache synchronization\n
      \  information among controllers.  The switch partition will service\n   each
      command it receives in turn as if it were interacting with a\n   single controller.
      \ Controller implementations without controller\n   entity synchronisation SHOULD
      NOT use multiple controllers with a\n   single switch partition.\n"
    - contents:
      - "11.5.1  Multiple Controller Adjacency Process\n   The first adjacency for
        a specific partition is determined by the\n   procedures described in section
        11.2 and an Adjacency Update message\n   will be sent.  The next adjacencies
        to the partition are identified\n   by a new partition request with the same
        Partition ID as the first\n   one but with the different Sender Name.  Upon
        establishing adjacency\n   the Adjacency count will be increased and an Adjacency
        Update message\n   will be sent.\n   When adjacency between one partition
        and a controller is lost, the\n   adjacency count will be decremented and
        an Adjacency Update message\n   will be sent.\n   Example:\n   A switch partition
        has never been used.  When the first controller\n   (A) achieves adjacency,
        an adjacency count will be initiated and (A)\n   will get an Adjacency Update
        message about itself with Code field =\n   1.  Since (A) receives an adjacency
        count of 1 this indicates that it\n   is the only controller for that partition.\n
        \  When a second adjacency (B), using the same Partition ID, achieves\n   adjacency,
        the adjacency counter will be increased by 1.  Both (A)\n   and (B) will receive
        an Adjacency Update message indicating an\n   adjacency count of 2 in the
        Code field.  Since the count is greater\n   than 1, this will indicate to
        both (A) and (B) that there is another\n   controller interacting with the
        switch; identification of the other\n   controller will not be provided by
        GSMP, but will be the\n   responsibility of the controllers.\n   If (A) looses
        adjacency, the adjacency count will be decreased and an\n   Adjacency Update
        message will be sent to (B) indicating an adjacency\n   count of 1 in the
        Code field.  If (B) leaves as well, the partition\n   is regarded as idle
        and the adjacency count may be reset.\n"
      title: 11.5.1  Multiple Controller Adjacency Process
    title: 11.5  Multiple Controllers per switch partition
  title: 11.  Adjacency Protocol
- contents:
  - '12.  Failure Response Codes

    '
  - contents:
    - "12.1  Description of Failure and Warning Response Messages\n   A failure response
      message is formed by returning the request message\n   that caused the failure
      with the Result field in the header\n   indicating failure (Result = 4) and
      the Code field giving the failure\n   code.  The failure code specifies the
      reason for the switch being\n   unable to satisfy the request message.\n   A
      warning response message is a success response (Result = 3) with\n   the Code
      field specifying the warning code.  The warning code\n   specifies a warning
      that was generated during the successful\n   operation.\n   If the switch issues
      a failure response in reply to a request\n   message, no change should be made
      to the state of the switch as a\n   result of the message causing the failure.
      \ (For request messages\n   that contain multiple requests, such as the Delete
      Branches message,\n   the failure response message will specify which requests
      were\n   successful and which failed.  The successful requests may result in
      a\n   changed state.)\n   If the switch issues a failure response it MUST choose
      the most\n   specific failure code according to the following precedence:\n
      \     -  Invalid Message\n      -  General Message Failure\n      -  Specific
      Message Failure A failure response specified in the\n         text defining
      the message type.\n      -  Connection Failures\n      -  Virtual Path Connection
      Failures\n      -  Multicast Failures\n      -  QoS Failures\n      -  General
      Failures\n      -  Warnings\n   If multiple failures match in any of the following
      categories, the\n   one that is listed first should be returned.  The following
      failure\n   response messages and failure and warning codes are defined:\n   Invalid
      Message\n      3:  The specified request is not implemented on this switch.\n
      \             The Message Type field specifies a message that is not\n              implemented
      on the switch or contains a value that is not\n              defined in the
      version of the protocol running in this\n              session of GSMP.\n      4:
      \ One or more of the specified ports does not exist.\n              At least
      one of the ports specified in the message is\n              invalid.  A port
      is invalid if it does not exist or if it\n              has been removed from
      the switch.\n      5:  Invalid Port Session Number.\n              The value
      given in the Port Session Number field does not\n              match the current
      Port Session Number for the specified\n              port.\n      7: Invalid
      Partition ID\n              The value given in the Partition ID field is not
      legal for\n              this partition.\n   General Message Failure\n      10:
      The meaning of this failure is dependent upon the\n              particular
      message type and is specified in the text\n              defining the message.\n
      \  Specific Message Failure - A failure response that is only used by a\n              specific
      message type\n   -  Failure response messages used by the Label Range message\n
      \     40: Cannot support one or more requested label ranges.\n      41: Cannot
      support disjoint label ranges.\n      42: Specialised multipoint labels not
      supported.\n   -  Failure response messages used by the Set Transmit Data Rate\n
      \             function of the Port Management message\n      43: The transmit
      data rate of this output port cannot be changed.\n      44: Requested transmit
      data rate out of range for this output\n              port.\n              The
      transmit data rate of the requested output port can be\n              changed,
      but the value of the Transmit Data Rate field is\n              beyond the range
      of acceptable values.\n   -  Failure response message of the Port Management
      message\n      45: Connection Replace mechanism not supported on switch.\n              The
      R-flag SHOULD be reset in the Response Port Management\n              message.\n
      \  -  Failure response message range reserved for the ARM extension\n      128-159:
      These failure response codes will be interpreted\n              according to
      definitions provided by the model\n              description.\n   Connection
      Failures\n      11:  The specified connection does not exist.\n              An
      operation that expects a connection to be specified\n              cannot locate
      the specified connection.  A connection is\n              specified by the input
      port and input label on which it\n              originates.  An ATM virtual
      path connection is specified\n              by the input port and input VPI
      on which it originates.\n      12:  The specified branch does not exist.\n              An
      operation that expects a branch of an existing\n              connection to
      be specified cannot locate the specified\n              branch.  A branch of
      a connection is specified by the\n              connection it belongs to and
      the output port and output\n              label on which it departs.  A branch
      of an ATM virtual\n              path connection is specified by the virtual
      path\n              connection it belongs to and the output port and output\n
      \             VPI on which it departs.\n      13: One or more of the specified
      Input Labels is invalid.\n      14: One or more of the specified Output Labels
      is invalid.\n      15: Point-to-point bi-directional connection already exists.\n
      \             The connection specified by the Input Port and Input Label\n              fields
      already exists, and the bi-directional Flag in the\n              Flags field
      is set.\n      16: Invalid Service Selector field in a Connection Management\n
      \             message.  The value of the Service Selector field is\n              invalid.\n
      \     17: Insufficient resources for QoS Profile.\n              The resources
      requested by the QoS Profile in the Service\n              Selector field are
      not available.\n      18: Insufficient Resources.\n              Switch resources
      needed to establish a branch are not\n              available.\n      20: Reservation
      ID out of Range\n              The numerical value of Reservation ID is greater
      than the\n              value of Max Reservations (from the Switch Configuration\n
      \             message).\n      21: Mismatched reservation ports\n              The
      value of Input Port differs from the input port\n              specified in
      the reservation or the value of Output Port\n              differs from the
      output port specified in the reservation.\n      22: Reservation ID in use\n
      \             The value of Reservation ID matches that of an extant\n              Reservation.\n
      \     23: Non-existent reservation ID\n              No reservation corresponding
      to Reservation ID exists.\n      36: Replace of connection is not activated
      on switch.\n              Only applicable for Add Branch messages.  The Replace\n
      \             Connection mechanism has not been activated on port by the\n              Port
      Management message.\n      37: Connection replacement mode cannot be combined
      with Bi-\n              directional or Multicast mode.  The R flag MUST NOT
      be\n              used in conjunction with either the M flag or the B flag.\n
      \  ATM Virtual Path Connections\n      24: ATM virtual path switching is not
      supported on this input\n              port.\n      25: Point-to-multipoint
      ATM virtual path connections are not\n              supported on either the
      requested input port or the\n              requested output port.\n              One
      or both of the requested input and output ports is\n              unable to
      support point-to-multipoint ATM virtual path\n              connections.\n      26:
      Attempt to add an ATM virtual path connection branch to an\n              existing
      virtual channel connection.\n              It is invalid to mix branches switched
      as virtual channel\n              connections with branches switched as ATM
      virtual path\n              connections on the same point-to-multipoint connection.\n
      \     27: Attempt to add an ATM virtual channel connection branch to an\n              existing
      ATM virtual path connection.\n              It is invalid to mix branches switched
      as virtual channel\n              connections with branches switched as ATM
      virtual path\n              connections on the same point-to-multipoint connection.\n
      \     28: ATM Virtual path switching is not supported on non-ATM ports.\n              One
      or both of the requested input and output ports is not\n              an ATM
      port.  ATM virtual path switching is only supported\n              on ATM ports.\n
      \  Multicast Failures\n      29: A branch belonging to the specified point-to-multipoint\n
      \             connection is already established on the specified output\n              port
      and the switch cannot support more than a single\n              branch of any
      point-to-multipoint connection on the same\n              output port.\n      30:
      The limit on the maximum number of multicast connections that\n              the
      switch can support has been reached.\n      31: The limit on the maximum number
      of branches that the specified\n              multicast connection can support
      has been reached.\n      32: Cannot label each output branch of a point-to-multipoint
      tree\n              with a different label.\n              Some switch designs,
      require all output branches of a\n              point-to-multipoint connection
      to use the same value of\n              Label.\n      33: Cannot add multi-point
      branch to bi-directional connection.\n              It is an error to attempt
      to add an additional branch to\n              an existing connection with the
      bi-directional flag set.\n      34: Unable to assign the requested Label value
      to the requested\n              branch on the specified multicast connection.\n
      \             Although the requested Labels are valid, the switch is\n              unable
      to support the request using the specified Label\n              values for some
      reason not covered by the above failure\n              responses.  This message
      implies that a valid value of\n              Labels exists that the switch could
      support.  For example,\n              some switch designs restrict the number
      of distinct Label\n              values available to a multicast connection.
      \ (Most switch\n              designs will not require this message.)\n      35:
      General problem related to the manner in which multicast is\n              supported
      by the switch.\n              Use this message if none of the more specific
      multicast\n              failure messages apply.  (Most switch designs will
      not\n              require this message.)\n   QoS Failures\n      60-79: These
      failure response codes will be interpreted according\n              to definitions
      provided by the model description.\n      80: Switch does not support different
      QoS parameters for different\n              branches within a multipoint connection.\n
      \  General Failures\n      2:  Invalid request message.\n              There
      is an error in one of the fields of the message not\n              covered by
      a more specific failure message.\n      6:  One or more of the specified ports
      is down.\n              A port is down if its Port Status is Unavailable.\n
      \             Connection Management, Connection State, Port Management,\n              and
      Configuration operations are permitted on a port that\n              is Unavailable.
      \ Connection Activity and Statistics\n              operations are not permitted
      on a port that is Unavailable\n              and will generate this failure
      response.  A Port\n              Management message specifying a Take Down function
      on a\n              port already in the Unavailable state will also generate\n
      \             this failure response.\n      19: Out of resources.\n              The
      switch has exhausted a resource not covered by a more\n              specific
      failure message, for example, running out of\n              memory.\n      1:
      \ Unspecified reason not covered by other failure codes.\n              The
      failure message of last resort.\n   Warnings\n      46: One or more labels are
      still used in the previous Label Range.\n"
    title: 12.1  Description of Failure and Warning Response Messages
  - contents:
    - "12.2  Summary of Failure Response Codes and Warnings\n   The following list
      gives a summary of the failure codes defined for\n   failure response messages:\n
      \      1: Unspecified reason not covered by other failure codes.\n       2:
      Invalid request message.\n       3: The specified request is not implemented
      on this switch.\n       4: One or more of the specified ports does not exist.\n
      \      5: Invalid Port Session Number.\n       6: One or more of the specified
      ports is down.\n       7: Invalid Partition ID.\n      10: General message failure.
      \ (The meaning of this failure code\n            depends upon the Message Type.
      \ It is defined within the\n            description of any message that uses
      it.)\n      11: The specified connection does not exist.\n      12: The specified
      branch does not exist.\n      13: One or more of the specified Input Labels
      is invalid.\n      14: One or more of the specified Output Labels is invalid.\n
      \     15: Point-to-point bi-directional connection already exists.\n      16:
      Invalid service selector field in a connection management\n            message.\n
      \     17: Insufficient resources for QoS profile.\n      18: Insufficient resources.\n
      \     19: Out of resources (e.g., memory exhausted, etc.).\n      20: Reservation
      ID out of Range\n      21: Mismatched reservation ports\n      22: Reservation
      ID in use\n      23: Non-existent reservation ID\n      24: ATM virtual path
      switching is not supported on this input\n            port.\n      25: Point-to-multipoint
      ATM virtual path connections are not\n            supported on either the requested
      input port or the\n            requested output port.\n      26: Attempt to
      add an ATM virtual path connection branch to an\n            existing virtual
      channel connection.\n      27: Attempt to add an ATM virtual channel connection
      branch to\n            an existing virtual path connection.\n      28: ATM Virtual
      Path switching is not supported on non-ATM\n            ports.\n      29: A
      branch belonging to the specified point-to-multipoint\n            connection
      is already established on the specified\n            output port and the switch
      cannot support more than a\n            single branch of any point-to-multipoint
      connection on\n            the same output port.\n      30: The limit on the
      maximum number of point-to-multipoint\n            connections that the switch
      can support has been\n            reached.\n      31: The limit on the maximum
      number of branches that the\n            specified point-to-multipoint connection
      can support has\n            been reached.\n      32: Cannot label each output
      branch of a point-to-multipoint\n            tree with a different label.\n
      \     33: Cannot add multi-point branch to bi-directional\n            connection.\n
      \     34: Unable to assign the requested Label value to the\n            requested
      branch on the specified point-to-multipoint\n            connection.\n      35:
      General problem related to the manner in which point-to-\n            multipoint
      is supported by the switch.\n      36: Replace of connection is not activated
      on switch.\n      37: Connection replacement mode cannot be combined with Bi-\n
      \           directional or Multicast mode.\n      40: Cannot support one or
      more requested label ranges.\n      41: Cannot support disjoint label ranges.\n
      \     42: Specialised multipoint labels not supported.\n      43: The transmit
      data rate of this output port cannot be\n            changed.\n      44: Requested
      transmit data rate out of range for this output\n            port.\n      45:
      Connection Replace mechanism not supported on switch.\n      46: Labels are
      still used in the existing Label Range.\n      60-79: Reserved for QoS failures.\n
      \     80: Switch does not support different QoS parameters for\n            different
      branches within a multipoint connection.\n      128-159: Reserved for the ARM
      extensions.\n"
    title: 12.2  Summary of Failure Response Codes and Warnings
  title: 12.  Failure Response Codes
- contents:
  - "13.  Security Considerations\n   The security of GSMP's TCP/IP control channel
    has been addressed in\n   [15].  For all uses of GSMP over an IP network it is
    REQUIRED that\n   GSMP be run over TCP/IP using the security considerations discussed\n
    \  in [15].\n"
  title: 13.  Security Considerations
- contents:
  - "Appendix A  Summary of Messages\n   Message Name                      Message
    Number  Status\n   Connection Management Messages\n       Add Branch .......................16\n
    \         ATM Specific - VPC.............26\n       Delete Tree.......................18\n
    \      Verify Tree.......................19          Obsoleted\n       Delete
    All Input..................20\n       Delete All Output.................21\n       Delete
    Branches...................17\n       Move Output Branch................22\n           ATM
    Specific - VPC............27\n       Move Input Branch.................23\n           ATM
    Specifc  - VPC............28\n   Port Management Messages\n       Port Management...................32\n
    \      Label Range.......................33\n   State and Statistics Messages\n
    \      Connection Activity...............48\n       Port Statistics...................49\n
    \      Connection Statistics.............50\n       QoS Class Statistics..............51
    \         Reserved\n       Report Connection State...........52\n   Configuration
    Messages\n       Switch Configuration..............64\n       Port Configuration................65\n
    \      All Ports Configuration...........66\n       Service Configuration.............67\n
    \  Reservation Messages\n       Reservation Request...............70\n       Delete
    Reservation................71\n       Delete All Reservations...........72\n   Event
    Messages\n       Port Up...........................80\n       Port Down.........................81\n
    \      Invalid Label.....................82\n       New Port..........................83\n
    \      Dead Port.........................84\n   Abstract and Resource Model Extension
    Messages\n       Reserved..........................200-249\n   Adjacency Protocol....................10
    \         Required\n"
  title: Appendix A  Summary of Messages
- contents:
  - "Appendix B  IANA Considerations\n   Following the policies outlined in \"Guidelines
    for Writing an IANA\n   Considerations Section in RFCs\" (RFC 2434 [19]), the
    following name\n   spaces are defined in GSMPv3.\n      -  Message Type Name Space
    [Appendix A]\n      -  Label Type Name Space [3.1.3]\n      -  Result Name Space
    [3.1.1]\n      -  Failure Response Message Name Space [3.1.4],[11]\n      -  Adaptation
    Type Name Space [4.1]\n      -  Model Type Name Space [8.1]\n      -  Port Type
    Name Space [8.2]\n      -  Service ID Name Space [10.4]\n      -  Traffic Control
    Name Space [8.4]\n      -  Event Flag Name Space [6.1]\n"
  - contents:
    - "B.1. Message Type Name Space\n   GSMPv3 divides the name space for Message
      Types into four ranges.\n   The following are the guidelines for managing these
      ranges.\n      -  Message Types 0-99.\n              Message Types in this range
      are part of the GSMPv3 base\n              protocol.  Message types in this
      range are allocated\n              through an IETF consensus action [19].\n
      \     -  Message Types 100-199.\n              Message Types in this range are
      Specification Required\n              [19].  Message Types using this range
      must be documented\n              in an RFC or other permanent and readily available\n
      \             references.\n      -  Message Types 200-249.\n              Message
      Types in this range are Specification Required\n              [19] and are intended
      for Abstract and Resource Model\n              Extension Messages.  Message
      Types using this range must\n              be documented in an RFC or other
      permanent and readily\n              available references.\n      -  Message
      Types 250-255.\n              Message Types in this range are reserved for vendor\n
      \             private extensions and are the responsibility of\n              individual
      vendors.  IANA management of this range of the\n              Message Type Name
      Space is unnecessary.\n"
    title: B.1. Message Type Name Space
  - contents:
    - "B.2. Label Type Name Space\n   GSMPv3 divides the name space for Label Types
      into three ranges.  The\n   following are the guidelines for managing these
      ranges.\n      -  Label Types 0x000-0xAFF.\n              Label Types in this
      range are part of the GSMPv3 base\n              protocol.  Label Types in this
      range are allocated through\n              an IETF consensus action [19].\n
      \     -  Label Types 0xB00-0xEFF.\n              Label Types in this range are
      Specification Required [19].\n              Label Types using this range must
      be documented in an RFC\n              or other permanent and readily available
      reference.\n      -  Label Types 0xF00-0xFFF.\n              Label Types in
      this range are reserved for vendor private\n              extensions and are
      the responsibility of individual\n              vendors.  IANA management of
      this range of the Label Type\n              Name Space is unnecessary.\n"
    title: B.2. Label Type Name Space
  - contents:
    - "B.3. Result Name Space\n   The following is the guideline for managing the
      Result Name Space:\n      -  Result values 0-255.\n              Result values
      in this range need an expert review, i.e.,\n              approval by a Designated
      Expert is required [19].\n"
    title: B.3. Result Name Space
  - contents:
    - "B.4. Failure Response Name Space\n   GSMPv3 divides the name space for Failure
      Responses into three\n   ranges.  The following are the guidelines for managing
      these ranges:\n      -  Failure Responses 0-59, 80-127, 160-255.\n              Failure
      responses in these ranges are part of the GSMPv3\n              base protocol.
      \ Failure Responses in these ranges are\n              allocated through an
      IETF consensus action [19].\n      -  Failure Responses 60-79, 128-159.\n              Failure
      responses in these ranges are reserved for vendor\n              private extensions
      and are the responsibility of\n              individual vendors.  IANA management
      of these ranges of\n              the Failure Response Name Space are unnecessary.\n"
    title: B.4. Failure Response Name Space
  - contents:
    - "B.5. Adaptation Type Name Space\n   GSMPv3 divides the name space for Adaptation
      Types into two ranges.\n   The following are the guidelines for managing these
      ranges:\n      -  Adaptation Type 0x000-0x2FF.\n              Adaptation Types
      in this range are part of the GSMPv3 base\n              protocol.  Adaptation
      Types in this range are allocated\n              through an IETF consensus action
      [19].\n      -  Adaptation Type 0x300-0xFFF.\n              Adaptation Types
      in this range are allocated by the first\n              come first served principle
      [19].\n"
    title: B.5. Adaptation Type Name Space
  - contents:
    - "B.6. Model Type Name Space\n   GSMPv3 divides the name space for Model Types
      into three ranges.  The\n   following are the guidelines for managing these
      ranges:\n      -  Model Type 0.\n              Model Types in this range are
      part of the GSMPv3 base\n              protocol.  Model Types in this range
      are allocated through\n              an IETF consensus action [19].\n      -
      \ Model Type 1-200.\n              Model Types in this range are Specification
      Required [19].\n              Message Types using this range must be documented
      in an\n              RFC or other permanent and readily available references.\n
      \     -  Model Type 201-255.\n              Model Types in this range are reserved
      for vendor private\n              extensions and are the responsibility of individual\n
      \             vendors.  IANA management of these ranges of the Model\n              Type
      Name Space are unnecessary.\n"
    title: B.6. Model Type Name Space
  - contents:
    - "B.7. Port Type Name Space\n   GSMPv3 divides the name space for Port Types
      into two ranges.  The\n   following are the guidelines for managing these ranges:\n
      \     -  Port Type 0-127.\n              Port Types in this range are part of
      the GSMPv3 base\n              protocol.  Port Types in this range are allocated
      through\n              an IETF consensus action [19].\n      -  Port Type 128-255.\n
      \             Port Types in this range are Specification Required [19].\n              Port
      Types using this range must be documented in an RFC\n              or other
      permanent and readily available references.\n"
    title: B.7. Port Type Name Space
  - contents:
    - "B.8. Service ID Name Space\n   GSMPv3 divides the name space for Service IDs
      into two ranges.  The\n   following are the guidelines for managing these ranges:\n
      \     -  Service ID 0-1023.\n              Service ID's in this range are part
      of the GSMPv3 base\n              protocol.  Service ID's in this range are
      allocated\n              through an IETF consensus action [19].\n      -  Service
      ID 1024-65535.\n              Service ID's in this range are Specification Required\n
      \             [19].  Service ID's using this range must be documented in\n              an
      RFC or other permanent and readily available\n              references.\n"
    title: B.8. Service ID Name Space
  - contents:
    - "B.9. Traffic Control Name Space\n   The following are the guidelines for managing
      Traffic Control Flags\n   in GSMPv3:\n      -  All Traffic Control Flags are
      allocated through an expert\n         review, i.e., approval by a Designated
      Expert [19].\n"
    title: B.9. Traffic Control Name Space
  - contents:
    - "B.10. Event Flag Name Space\n   The following are the guidelines for managing
      Event Flags in GSMPv3:\n      -  All Event Flags are allocated through an expert
      review, i.e.,\n         approval by a Designated Expert [19].\n   The TCP port
      for establishing GSMP connections has been defined as\n   6068.\n"
    title: B.10. Event Flag Name Space
  title: Appendix B  IANA Considerations
- contents:
  - "References\n   [1]  \"B-ISDN ATM Layer Specification\", International\n        Telecommunication
    Union, ITU-T Recommendation I.361, Feb.  1999.\n   [2]  \"B-ISDN ATM Adaptation
    Layer (AAL) Specification\", International\n        Telecommunication Union, ITU-T
    Recommendation I.363, Mar. 1993.\n   [3]  \"B-ISDN ATM Adaptation Layer specification:
    Type 5 AAL\",\n        International Telecommunication Union, ITU-T, Recommendation\n
    \       I.363.5, Aug. 1996.\n   [4]  Sjostrand, H., Buerkle, J. and B. Srinivasan,
    \"Definitions of\n        Managed Objects for the General Switch Management Protocol\n
    \       (GSMP)\", RFC 3295, June 2002.\n   [5]  IANA Assigned Port Numbers, http://www.iana.org\n
    \  [6]  Newman, P, Edwards, W., Hinden, R., Hoffman, E. Ching Liaw, F.,\n        Lyon,
    T. and G. Minshall, \"Ipsilon's General Switch Management\n        Protocol Specification
    Version 1.1\", RFC 1987, August 1996.\n   [7]  Newman, P., Edwards, W., Hinden,
    R., Hoffman, E., Ching Liaw,\n        F., Lyon, T. and G. Minshall, \"Ipsilon's
    General Switch\n        Management Protocol Specification Version 2.0\", RFC 2297,
    March\n        1998.\n   [8]  ATM Forum Technical Committee, \"Traffic Management
    Specification\n        Version 4.1\", af-tm-0121.000, 1999.\n   [9] Wroclawski,
    J., \"Specification of the Controlled-Load Network\n        Element Service\",
    RFC 2211, September 1997.\n   [10] Jamoussi, B., Andersson, L., Callon, R., Dantu,
    R., Wu, L.,\n        Doolan, P., Worster, T., Feldman, N., Fredette, A., Girish,
    M.,\n        Gray, E., Heinanen, J., Kilty, T. and A. Malis, \"Constraint-\n        Based
    LSP Setup using LDP\", RFC 3212, January 2002.\n   [11] ITU-T Recommendation I.233
    Frame Mode Bearer Services, ISDN\n        frame relaying bearer services and ISDN
    switching bearer\n        service, Nov. 1991.\n   [12] ITU-T Recommendation Q.933,
    Integrated Services Digital Network\n        (ISDN) Digital Subscriber Signaling
    System No. 1 (DSS 1)\n        Signaling Specifications For Frame Mode Switched
    And Permanent\n        Virtual Connection Control And Status Monitoring, 1995.\n
    \  [13] ITU-T Recommendation Q.922, Integrated Services Digital Network\n        (ISDN)
    Data Link Layer Specification For Frame Mode Bearer\n        Services, 1992\n
    \  [14] Rosen, E., Tappan, D., Fedorkow, G., Rekhter, Y., Farinacci, D.,\n        Li,
    T. and A. Conta, \"MPLS Label Stack Encoding\", RFC 3032,\n        January 2001.\n
    \  [15] Worster, T., Doria, A. and J. Buerkle, \"General Switch\n        Management
    Protocol (GSMP) Packet Encapsulations for\n        Asynchronous Transfer Mode
    (ATM), Ethernet and Transmission\n        Control Protocol (TCP)\", RFC 3293,
    June 2002.\n   [16] Doria, A. and K. Sundell, \"General Switch Management Protocol\n
    \       Applicability\", RFC 3294, June 2002.\n   [17] IANAifType - MIB DEFINITIONS,
    http://www.iana.org, January 2001.\n   [18] Anderson, L., Doolan, P., Feldman,
    N., Fredette, A. and B.\n        Thomas, \"LDP Specification\", RFC 3036, January
    2001.\n   [19] Narten, T. and H. Alvestrand, \"Guidelines for Writing an IANA\n
    \       Considerations Section in RFCs\", BCP 26, RFC 2434, October 1998.\n   [20]
    Bradner, S., \"Key words for use in RFCs to Indicate Requirement\n        Levels\",
    BCP 14, RFC 2119, March 1997.\n   [21] Conta, A., Doolan, P. and A. Malis, \"Use
    of Label Switching on\n        Frame Relay Networks Specification\", RFC 3034,
    January 2001.\n"
  title: References
- contents:
  - "Authors' Addresses\n   Avri Doria\n   Div. of Computer Communications\n   Lulea
    University of Technology\n   S-971 87 Lulea\n   Sweden\n   Phone: +1 401 663 5024\n
    \  EMail: avri@acm.org\n   Fiffi Hellstrand\n   Nortel Networks AB\n   S:t Eriksgatan
    115 A\n   SE-113 85 Stockholm Sweden\n   EMail: fiffi@nortelnetworks.com\n   Kenneth
    Sundell\n   Nortel Networks AB\n   S:t Eriksgatan 115 A\n   SE-113 85 Stockholm
    Sweden\n   EMail: ksundell@nortelnetworks.com\n   Tom Worster\n   Phone: +1 617
    247 2624\n   EMail: fsb@thefsb.org\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2002).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: Full Copyright Statement
