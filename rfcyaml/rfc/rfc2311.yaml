- title: __initial_text__
  contents:
  - '                 S/MIME Version 2 Message Specification

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   S/MIME (Secure/Multipurpose Internet Mail Extensions) provides\
    \ a\n   consistent way to send and receive secure MIME data. Based on the\n  \
    \ popular Internet MIME standard, S/MIME provides the following\n   cryptographic\
    \ security services for electronic messaging\n   applications: authentication,\
    \ message integrity and non-repudiation\n   of origin (using digital signatures)\
    \ and privacy and data security\n   (using encryption).\n   S/MIME can be used\
    \ by traditional mail user agents (MUAs) to add\n   cryptographic security services\
    \ to mail that is sent, and to\n   interpret cryptographic security services in\
    \ mail that is received.\n   However, S/MIME is not restricted to mail; it can\
    \ be used with any\n   transport mechanism that transports MIME data, such as\
    \ HTTP. As such,\n   S/MIME takes advantage of the object-based features of MIME\
    \ and\n   allows secure messages to be exchanged in mixed-transport systems.\n\
    \   Further, S/MIME can be used in automated message transfer agents that\n  \
    \ use cryptographic security services that do not require any human\n   intervention,\
    \ such as the signing of software-generated documents and\n   the encryption of\
    \ FAX messages sent over the Internet.\n   Please note: The information in this\
    \ document is historical material\n   being published for the public record. It\
    \ is not an IETF standard.\n   The use of the word \"standard\" in this document\
    \ indicates a standard\n   for adopters of S/MIME version 2, not an IETF standard.\n"
- title: 1.1 Specification Overview
  contents:
  - "1.1 Specification Overview\n   This document describes a protocol for adding\
    \ cryptographic signature\n   and encryption services to MIME data. The MIME standard\
    \ [MIME-SPEC]\n   provides a general structure for the content type of Internet\n\
    \   messages and allows extensions for new content type applications.\n   This\
    \ memo defines how to create a MIME body part that has been\n   cryptographically\
    \ enhanced according to PKCS #7 [PKCS-7]. This memo\n   also defines the application/pkcs7-mime\
    \ MIME type that can be used to\n   transport those body parts. This memo also\
    \ defines how to create\n   certification requests that conform to PKCS #10 [PKCS-10],\
    \ and the\n   application/pkcs10 MIME type for transporting those requests.\n\
    \   This memo also discusses how to use the multipart/signed MIME type\n   defined\
    \ in [MIME-SECURE] to transport S/MIME signed messages. This\n   memo also defines\
    \ the application/pkcs7-signature MIME type, which is\n   also used to transport\
    \ S/MIME signed messages. This specification is\n   compatible with PKCS #7 in\
    \ that it uses the data types defined by\n   PKCS #7.\n   In order to create S/MIME\
    \ messages, an agent has to follow\n   specifications in this memo, as well as\
    \ some of the specifications\n   listed in the following documents:\n    - \"\
    PKCS #1: RSA Encryption\", [PKCS-1]\n    - \"PKCS #7: Cryptographic Message Syntax\"\
    , [PKCS-7]\n    - \"PKCS #10: Certification Request Syntax\", [PKCS-10]\n   Throughout\
    \ this memo, there are requirements and recommendations made\n   for how receiving\
    \ agents handle incoming messages. There are separate\n   requirements and recommendations\
    \ for how sending agents create\n   outgoing messages. In general, the best strategy\
    \ is to \"be liberal in\n   what you receive and conservative in what you send\"\
    . Most of the\n   requirements are placed on the handling of incoming messages\
    \ while\n   the recommendations are mostly on the creation of outgoing messages.\n\
    \   The separation for requirements on receiving agents and sending\n   agents\
    \ also derives from the likelihood that there will be S/MIME\n   systems that\
    \ involve software other than traditional Internet mail\n   clients. S/MIME can\
    \ be used with any system that transports MIME\n   data. An automated process\
    \ that sends an encrypted message might not\n   be able to receive an encrypted\
    \ message at all, for example. Thus,\n   the requirements and recommendations\
    \ for the two types of agents are\n   listed separately when appropriate.\n"
- title: 1.2 Terminology
  contents:
  - "1.2 Terminology\n   Throughout this memo, the terms MUST, MUST NOT, SHOULD, and\
    \ SHOULD\n   NOT are used in capital letters. This conforms to the definitions\
    \ in\n   [MUSTSHOULD].  [MUSTSHOULD] defines the use of these key words to\n \
    \  help make the intent of standards track documents as clear as\n   possible.\
    \ The same key words are used in this document to help\n   implementors achieve\
    \ interoperability.\n"
- title: 1.3 Definitions
  contents:
  - "1.3 Definitions\n   For the purposes of this memo, the following definitions\
    \ apply.\n   ASN.1: Abstract Syntax Notation One, as defined in CCITT X.208.\n\
    \   BER: Basic Encoding Rules for ASN.1, as defined in CCITT X.209.\n   Certificate:\
    \ A type that binds an entity's distinguished name to a\n   public key with a\
    \ digital signature.\n   DER: Distinguished Encoding Rules for ASN.1, as defined\
    \ in CCITT\n   X.509.\n   7-bit data: Text data with lines less than 998 characters\
    \ long, where\n   none of the characters have the 8th bit set, and there are no\
    \ NULL\n   characters.  <CR> and <LF> occur only as part of a <CR><LF> end of\n\
    \   line delimiter.\n   8-bit data: Text data with lines less than 998 characters,\
    \ and where\n   none of the characters are NULL characters. <CR> and <LF> occur\
    \ only\n   as part of a <CR><LF> end of line delimiter.\n   Binary data: Arbitrary\
    \ data.\n   Transfer Encoding: A reversible transformation made on data so 8-bit\n\
    \   or binary data may be sent via a channel that only transmits 7-bit\n   data.\n"
- title: 1.4 Compatibility with Prior Practice of S/MIME
  contents:
  - "1.4 Compatibility with Prior Practice of S/MIME\n   Appendix C contains important\
    \ information about how S/MIME agents\n   following this specification should\
    \ act in order to have the greatest\n   interoperability with earlier implementations\
    \ of S/MIME.\n"
- title: '2. PKCS #7 Options'
  contents:
  - "2. PKCS #7 Options\n   The PKCS #7 message format allows for a wide variety of\
    \ options in\n   content and algorithm support. This section puts forth a number\
    \ of\n   support requirements and recommendations in order to achieve a base\n\
    \   level of interoperability among all S/MIME implementations.\n"
- title: 2.1 DigestAlgorithmIdentifier
  contents:
  - "2.1 DigestAlgorithmIdentifier\n   Receiving agents MUST support SHA-1 [SHA1]\
    \ and MD5 [MD5].\n   Sending agents SHOULD use SHA-1.\n"
- title: 2.2 DigestEncryptionAlgorithmIdentifier
  contents:
  - "2.2 DigestEncryptionAlgorithmIdentifier\n   Receiving agents MUST support rsaEncryption,\
    \ defined in [PKCS-1].\n   Receiving agents MUST support verification of signatures\
    \ using RSA\n   public key sizes from 512 bits to 1024 bits.\n   Sending agents\
    \ MUST support rsaEncryption. Outgoing messages are\n   signed with a user's private\
    \ key. The size of the private key is\n   determined during key generation.\n"
- title: 2.3 KeyEncryptionAlgorithmIdentifier
  contents:
  - "2.3 KeyEncryptionAlgorithmIdentifier\n   Receiving agents MUST support rsaEncryption.\
    \ Incoming encrypted\n   messages contain symmetric keys which are to be decrypted\
    \ with a\n   user's private key.  The size of the private key is determined during\n\
    \   key generation.\n   Sending agents MUST support rsaEncryption. Sending agents\
    \ MUST\n   support encryption of symmetric keys with RSA public keys at key\n\
    \   sizes from 512 bits to 1024 bits.\n"
- title: 2.4 General Syntax
  contents:
  - "2.4 General Syntax\n   The PKCS #7 defines six distinct content types: \"data\"\
    , \"signedData\",\n   \"envelopedData\", \"signedAndEnvelopedData\", \"digestedData\"\
    , and\n   \"encryptedData\". Receiving agents MUST support the \"data\",\n   \"\
    signedData\" and \"envelopedData\" content types. Sending agents may or\n   may\
    \ not send out any of the content types, depending on the services\n   that the\
    \ agent supports.\n"
- title: 2.4.1 Data Content Type
  contents:
  - "2.4.1 Data Content Type\n   Sending agents MUST use the \"data\" content type\
    \ as the content within\n   other content types to indicate the message content\
    \ which has had\n   security services applied to it.\n"
- title: 2.4.2 SignedData Content Type
  contents:
  - "2.4.2 SignedData Content Type\n   Sending agents MUST use the signedData content\
    \ type to apply a\n   digital signature to a message or, in a degenerate case\
    \ where there\n   is no signature information, to convey certificates.\n"
- title: 2.4.3 EnvelopedData Content Type
  contents:
  - "2.4.3 EnvelopedData Content Type\n   This content type is used to apply privacy\
    \ protection to a message. A\n   sender needs to have access to a public key for\
    \ each intended message\n   recipient to use this service. This content type does\
    \ not provide\n   authentication.\n"
- title: 2.5 Attribute SignerInfo Type
  contents:
  - "2.5 Attribute SignerInfo Type\n   The SignerInfo type allows the inclusion of\
    \ unauthenticated and\n   authenticated attributes to be included along with a\
    \ signature.\n   Receiving agents MUST be able to handle zero or one instance\
    \ of each\n   of the signed attributes described in this section.\n   Sending\
    \ agents SHOULD be able to generate one instance of each of the\n   signed attributes\
    \ described in this section, and SHOULD include these\n   attributes in each signed\
    \ message sent.\n   Additional attributes and values for these attributes may\
    \ be defined\n   in the future. Receiving agents SHOULD handle attributes or values\n\
    \   that it does not recognize in a graceful manner.\n"
- title: 2.5.1 Signing-Time Attribute
  contents:
  - "2.5.1 Signing-Time Attribute\n   The signing-time attribute is used to convey\
    \ the time that a message\n   was signed. Until there are trusted timestamping\
    \ services, the time\n   of signing will most likely be created by a message originator\
    \ and\n   therefore is only as trustworthy as the originator.\n   Sending agents\
    \ MUST encode signing time through the year 2049 as\n   UTCTime; signing times\
    \ in 2050 or later MUST be encoded as\n   GeneralizedTime. Agents MUST interpret\
    \ the year field (YY) as\n   follows: if YY is greater than or equal to 50, the\
    \ year is\n   interpreted as 19YY; if YY is less than 50, the year is interpreted\n\
    \   as 20YY.\n"
- title: 2.5.2 S/MIME Capabilities Attribute
  contents:
  - "2.5.2 S/MIME Capabilities Attribute\n   The S/MIME capabilities attribute includes\
    \ signature algorithms (such\n   as \"md5WithRSAEncryption\"), symmetric algorithms\
    \ (such as \"DES-CBC\"),\n   and key encipherment algorithms (such as \"rsaEncryption\"\
    ). It also\n   includes a non-algorithm capability which is the preference for\n\
    \   signedData.  SMIMECapabilities was designed to be flexible and\n   extensible\
    \ so that, in the future, a means of identifying other\n   capabilities and preferences\
    \ such as certificates can be added in a\n   way that will not cause current clients\
    \ to break.\n   The semantics of the S/MIME capabilites attribute specify a partial\n\
    \   list as to what the client announcing the SMIMECapabilites can\n   support.\
    \ A client does not have to list every capability it supports,\n   and probably\
    \ should not list all its capabilities so that the\n   capabilities list doesn't\
    \ get too long. In an SMIMECapabilities\n   encoding, the OIDs are listed in order\
    \ of their preference, but\n   SHOULD be logically separated along the lines of\
    \ their categories\n   (signature algorithms, symmetric algorithms, key encipherment\n\
    \   algorithms, etc.)\n   The structure of  SMIMECapabilities was designed to\
    \ facilitate simple\n   table lookups and binary comparisons in order to determine\
    \ matches.\n   For instance, the DER-encoding for the SMIMECapability for DES\
    \ EDE3\n   CBC MUST be identically encoded regardless of the implementation.\n\
    \   In the case of symmetric algorithms, the associated parameters for\n   the\
    \ OID MUST specify all of the parameters necessary to differentiate\n   between\
    \ two instances of the same algorithm. For instance, the number\n   of rounds\
    \ and block size for RC5 must be specified in addition to the\n   key length.\n\
    \   There is a list of OIDs (the registered SMIMECapability list) that is\n  \
    \ centrally maintained and is separate from this memo. The list of OIDs\n   is\
    \ maintained by the Internet Mail Consortium at\n   <http://www.imc.org/ietf-smime/oids.html>.\n\
    \   The OIDs that correspond to algorithms SHOULD use the same OID as the\n  \
    \ actual algorithm, except in the case where the algorithm usage is\n   ambiguous\
    \ from the OID. For instance, in an earlier memo,\n   rsaEncryption was ambiguous\
    \ because it could refer to either a\n   signature algorithm or a key encipherment\
    \ algorithm. In the event\n   that an OID is ambiguous, it needs to be arbitrated\
    \ by the maintainer\n   of the registered S/MIME capabilities list as to which\
    \ type of\n   algorithm will use the OID, and a new OID MUST be allocated under\
    \ the\n   smimeCapabilities OID to satisfy the other use of the OID.\n   The registered\
    \ S/MIME capabilities list specifies the parameters for\n   OIDs that need them,\
    \ most notably key lengths in the case of\n   variable-length symmetric ciphers.\
    \ In the event that there are no\n   differentiating parameters for a particular\
    \ OID, the parameters MUST\n   be omitted, and MUST NOT be encoded as NULL.\n\
    \   Additional values for SMIMECapability may be defined in the future.\n   Receiving\
    \ agents MUST handle a SMIMECapabilities object that has\n   values that it does\
    \ not recognize in a graceful manner.\n"
- title: 2.6 ContentEncryptionAlgorithmIdentifier
  contents:
  - "2.6 ContentEncryptionAlgorithmIdentifier\n   Receiving agents MUST support decryption\
    \ using the RC2 [RC2] or a\n   compatible algorithm at a key size of 40 bits,\
    \ hereinafter called\n   \"RC2/40\".  Receiving agents SHOULD support decryption\
    \ using DES EDE3\n   CBC, hereinafter called \"tripleDES\" [3DES] [DES].\n   Sending\
    \ agents SHOULD support encryption with RC2/40 and tripleDES.\n"
- title: 2.6.1 Deciding Which Encryption Method To Use
  contents:
  - "2.6.1 Deciding Which Encryption Method To Use\n   When a sending agent creates\
    \ an encrypted message, it has to decide\n   which type of encryption to use.\
    \ The decision process involves using\n   information garnered from the capabilities\
    \ lists included in messages\n   received from the recipient, as well as out-of-band\
    \ information such\n   as private agreements, user preferences, legal restrictions,\
    \ and so\n   on.\n   Section 2.5 defines a method by which a sending agent can\
    \ optionally\n   announce, among other things, its decrypting capabilities in\
    \ its\n   order of preference. The following method for processing and\n   remembering\
    \ the encryption capabilities attribute in incoming signed\n   messages SHOULD\
    \ be used.\n    - If the receiving agent has not yet created a list of capabilities\n\
    \      for the sender's public key, then, after verifying the signature\n    \
    \  on the incoming message and checking the timestamp, the receiving\n      agent\
    \ SHOULD create a new list containing at least the signing\n      time and the\
    \ symmetric capabilities.\n    - If such a list already exists, the receiving\
    \ agent SHOULD verify\n      that the signing time in the incoming message is\
    \ greater than the\n      signing time stored in the list and that the signature\
    \ is valid.\n      If so, the receiving agent SHOULD update both the signing time\
    \ and\n      capabilities in the list. Values of the signing time that lie far\n\
    \      in the future (that is, a greater discrepancy than any reasonable\n   \
    \   clock skew), or a capabilitie lists in messages whose signature\n      could\
    \ not be verified, MUST NOT be accepted.\n   The list of capabilities SHOULD be\
    \ stored for future use in creating\n   messages.\n   Before sending a message,\
    \ the sending agent MUST decide whether it is\n   willing to use weak encryption\
    \ for the particular data in the\n   message. If the sending agent decides that\
    \ weak encryption is\n   unacceptable for this data, then the sending agent MUST\
    \ NOT use a\n   weak algorithm such as RC2/40.  The decision to use or not use\
    \ weak\n   encryption overrides any other decision in this section about which\n\
    \   encryption algorithm to use.\n   Sections 2.6.2.1 through 2.6.2.4 describe\
    \ the decisions a sending\n   agent SHOULD use in deciding which type of encryption\
    \ should be\n   applied to a message. These rules are ordered, so the sending\
    \ agent\n   SHOULD make its decision in the order given.\n"
- title: '2.6.2.1 Rule 1: Known Capabilities'
  contents:
  - "2.6.2.1 Rule 1: Known Capabilities\n   If the sending agent has received a set\
    \ of capabilities from the\n   recipient for the message the agent is about to\
    \ encrypt, then the\n   sending agent SHOULD use that information by selecting\
    \ the first\n   capability in the list (that is, the capability most preferred\
    \ by the\n   intended recipient) for which the sending agent knows how to encrypt.\n\
    \   The sending agent SHOULD use one of the capabilities in the list if\n   the\
    \ agent reasonably expects the recipient to be able to decrypt the\n   message.\n"
- title: '2.6.2.2 Rule 2: Unknown Capabilities, Known Use of Encryption'
  contents:
  - "2.6.2.2 Rule 2: Unknown Capabilities, Known Use of Encryption\n   If:\n    -\
    \ the sending agent has no knowledge of the encryption capabilities\n      of\
    \ the recipient,\n    - and the sending agent has received at least one message\
    \ from the\n      recipient,\n    - and the last encrypted message received from\
    \ the recipient had a\n      trusted signature on it,\n   then the outgoing message\
    \ SHOULD use the same encryption algorithm as\n   was used on the last signed\
    \ and encrypted message received from the\n   recipient.\n"
- title: '2.6.2.3 Rule 3: Unknown Capabilities, Risk of Failed Decryption'
  contents:
  - "2.6.2.3 Rule 3: Unknown Capabilities, Risk of Failed Decryption\n   If:\n   \
    \ - the sending agent has no knowledge of the encryption capabilities\n      of\
    \ the recipient,\n    - and the sending agent is willing to risk that the recipient\
    \ may\n      not be able to decrypt the message,\n   then the sending agent SHOULD\
    \ use tripleDES.\n"
- title: '2.6.2.4 Rule 4: Unknown Capabilities, No Risk of Failed Decryption'
  contents:
  - "2.6.2.4 Rule 4: Unknown Capabilities, No Risk of Failed Decryption\n   If:\n\
    \    - the sending agent has no knowledge of the encryption capabilities\n   \
    \   of the recipient,\n    - and the sending agent is not willing to risk that\
    \ the recipient\n      may not be able to decrypt the message,\n   then the sending\
    \ agent MUST use RC2/40.\n"
- title: 2.6.3 Choosing Weak Encryption
  contents:
  - "2.6.3 Choosing Weak Encryption\n   Like all algorithms that use 40 bit keys,\
    \ RC2/40 is considered by\n   many to be weak encryption. A sending agent that\
    \ is controlled by a\n   human SHOULD allow a human sender to determine the risks\
    \ of sending\n   data using RC2/40 or a similarly weak encryption algorithm before\n\
    \   sending the data, and possibly allow the human to use a stronger\n   encryption\
    \ method such as tripleDES.\n"
- title: 2.6.4 Multiple Recipients
  contents:
  - "2.6.4 Multiple Recipients\n   If a sending agent is composing an encrypted message\
    \ to a group of\n   recipients where the encryption capabilities of some of the\n\
    \   recipients do not overlap, the sending agent is forced to send more\n   than\
    \ one message. It should be noted that if the sending agent\n   chooses to send\
    \ a message encrypted with a strong algorithm, and then\n   send the same message\
    \ encrypted with a weak algorithm, someone\n   watching the communications channel\
    \ can decipher the contents of the\n   strongly-encrypted message simply by decrypting\
    \ the weakly-encrypted\n   message.\n"
- title: 3. Creating S/MIME Messages
  contents:
  - "3. Creating S/MIME Messages\n   This section describes the S/MIME message formats\
    \ and how they are\n   created.  S/MIME messages are a combination of MIME bodies\
    \ and PKCS\n   objects. Several MIME types as well as several PKCS objects are\
    \ used.\n   The data to be secured is always a canonical MIME entity. The MIME\n\
    \   entity and other data, such as certificates and algorithm\n   identifiers,\
    \ are given to PKCS processing facilities which produces a\n   PKCS object. The\
    \ PKCS object is then finally wrapped in MIME.\n   S/MIME provides one format\
    \ for enveloped-only data, several formats\n   for signed-only data, and several\
    \ formats for signed and enveloped\n   data.  Several formats are required to\
    \ accommodate several\n   environments, in particular for signed messages. The\
    \ criteria for\n   choosing among these formats are also described.\n   The reader\
    \ of this section is expected to understand MIME as\n   described in [MIME-SPEC]\
    \ and [MIME-SECURE].\n"
- title: 3.1 Preparing the MIME Entity for Signing or Enveloping
  contents:
  - "3.1 Preparing the MIME Entity for Signing or Enveloping\n   S/MIME is used to\
    \ secure MIME entities. A MIME entity may be a sub-\n   part, sub-parts of a message,\
    \ or the whole message with all its sub-\n   parts. A MIME entity that is the\
    \ whole message includes only the MIME\n   headers and MIME body, and does not\
    \ include the RFC-822 headers. Note\n   that S/MIME can also be used to secure\
    \ MIME entities used in\n   applications other than Internet mail.\n   The MIME\
    \ entity that is secured and described in this section can be\n   thought of as\
    \ the \"inside\" MIME entity. That is, it is the\n   \"innermost\" object in what\
    \ is possibly a larger MIME message.\n   Processing \"outside\" MIME entities\
    \ into PKCS #7 objects is described\n   in Section 3.2, 3.4 and elsewhere.\n \
    \  The procedure for preparing a MIME entity is given in [MIME-SPEC].\n   The\
    \ same procedure is used here with some additional restrictions\n   when signing.\
    \  Description of the procedures from [MIME-SPEC] are\n   repeated here, but the\
    \ reader should refer to that document for the\n   exact procedure. This section\
    \ also describes additional requirements.\n   A single procedure is used for creating\
    \ MIME entities that are to be\n   signed, enveloped, or both signed and enveloped.\
    \ Some additional\n   steps are recommended to defend against known corruptions\
    \ that can\n   occur during mail transport that are of particular importance for\n\
    \   clear-signing using the multipart/signed format. It is recommended\n   that\
    \ these additional steps be performed on enveloped messages, or\n   signed and\
    \ enveloped messages in order that the message can be\n   forwarded to any environment\
    \ without modification.\n   These steps are descriptive rather than prescriptive.\
    \ The implementor\n   is free to use any procedure as long as the result is the\
    \ same.\n     Step 1. The MIME entity is prepared according to the local\n   \
    \          conventions\n     Step 2. The leaf parts of the MIME entity are converted\
    \ to\n             canonical form\n     Step 3. Appropriate transfer encoding\
    \ is applied to the leaves of\n             the MIME entity\n   When an S/MIME\
    \ message is received, the security services on the\n   message are removed, and\
    \ the result is the MIME entity. That MIME\n   entity is typically passed to a\
    \ MIME-capable user agent where, it is\n   further decoded and presented to the\
    \ user or receiving application.\n"
- title: 3.1.1 Canonicalization
  contents:
  - "3.1.1 Canonicalization\n   Each MIME entity MUST be converted to a canonical\
    \ form that is\n   uniquely and unambiguously representable in the environment\
    \ where the\n   signature is created and the environment where the signature will\
    \ be\n   verified. MIME entities MUST be canonicalized for enveloping as well\n\
    \   as signing.\n   The exact details of canonicalization depend on the actual\
    \ MIME type\n   and subtype of an entity, and are not described here. Instead,\
    \ the\n   standard for the particular MIME type should be consulted. For\n   example,\
    \ canonicalization of type text/plain is different from\n   canonicalization of\
    \ audio/basic. Other than text types, most types\n   have only one representation\
    \ regardless of computing platform or\n   environment which can be considered\
    \ their canonical representation.\n   In general, canonicalization will be performed\
    \ by the sending agent\n   rather than the S/MIME implementation.\n   The most\
    \ common and important canonicalization is for text, which is\n   often represented\
    \ differently in different environments. MIME\n   entities of major type \"text\"\
    \ must have both their line endings and\n   character set canonicalized. The line\
    \ ending must be the pair of\n   characters <CR><LF>, and the charset should be\
    \ a registered charset\n   [CHARSETS]. The details of the canonicalization are\
    \ specified in\n   [MIME-SPEC]. The chosen charset SHOULD be named in the charset\n\
    \   parameter so that the receiving agent can unambiguously determine the\n  \
    \ charset used.\n   Note that some charsets such as ISO-2022 have multiple\n \
    \  representations for the same characters. When preparing such text for\n   signing,\
    \ the canonical representation specified for the charset MUST\n   be used.\n"
- title: 3.1.2 Transfer Encoding
  contents:
  - "3.1.2 Transfer Encoding\n   When generating any of the secured MIME entities\
    \ below, except the\n   signing using the multipart/signed format, no transfer\
    \ encoding at\n   all is required.  S/MIME implementations MUST be able to deal\
    \ with\n   binary MIME objects. If no Content-Transfer-Encoding header is\n  \
    \ present, the transfer encoding should be considered 7BIT.\n   S/MIME implementations\
    \ SHOULD however use transfer encoding described\n   in section 3.1.3 for all\
    \ MIME entities they secure. The reason for\n   securing only 7-bit MIME entities,\
    \ even for enveloped data that are\n   not exposed to the transport, is that it\
    \ allows the MIME entity to be\n   handled in any environment without changing\
    \ it. For example, a\n   trusted gateway might remove the envelope, but not the\
    \ signature, of\n   a message, and then forward the signed message on to the end\n\
    \   recipient so that they can verify the signatures directly. If the\n   transport\
    \ internal to the site is not 8-bit clean, such as on a\n   wide-area network\
    \ with a single mail gateway, verifying the signature\n   will not be possible\
    \ unless the original MIME entity was only 7-bit\n   data.\n"
- title: 3.1.3 Transfer Encoding for Signing Using multipart/signed
  contents:
  - "3.1.3 Transfer Encoding for Signing Using multipart/signed\n   If a multipart/signed\
    \ entity is EVER to be transmitted over the\n   standard Internet SMTP infrastructure\
    \ or other transport that is\n   constrained to 7-bit text, it MUST have transfer\
    \ encoding applied so\n   that it is represented as 7-bit text. MIME entities\
    \ that are 7-bit\n   data already need no transfer encoding. Entities such as\
    \ 8-bit text\n   and binary data can be encoded with quoted-printable or base-64\n\
    \   transfer encoding.\n   The primary reason for the 7-bit requirement is that\
    \ the Internet\n   mail transport infrastructure cannot guarantee transport of\
    \ 8-bit or\n   binary data. Even though many segments of the transport\n   infrastructure\
    \ now handle 8-bit and even binary data, it is sometimes\n   not possible to know\
    \ whether the transport path is 8-bit clear. If a\n   mail message with 8-bit\
    \ data were to encounter a message transfer\n   agent that can not transmit 8-bit\
    \ or binary data, the agent has three\n   options, none of which are acceptable\
    \ for a clear-signed message:\n    - The agent could change the transfer encoding;\
    \ this would\n      invalidate the signature.\n    - The agent could transmit\
    \ the data anyway, which would most likely\n      result in the 8th bit being\
    \ corrupted; this too would invalidate\n      the signature.\n    - The agent\
    \ could return the message to the sender.\n   [MIME-SECURE] prohibits an agent\
    \ from changing the transfer encoding\n   of the first part of a multipart/signed\
    \ message. If a compliant agent\n   that can not transmit 8-bit or binary data\
    \ encounters a\n   multipart/signed message with 8-bit or binary data in the first\
    \ part,\n   it would have to return the message to the sender as undeliverable.\n"
- title: 3.1.4 Sample Canonical MIME Entity
  contents:
  - "3.1.4 Sample Canonical MIME Entity\n   This example shows a multipart/mixed message\
    \ with full transfer\n   encoding.  This message contains a text part and an attachment.\
    \ The\n   sample message text includes characters that are not US-ASCII and\n\
    \   thus must be transfer encoded. Though not shown here, the end of each\n  \
    \ line is <CR><LF>. The line ending of the MIME headers, the text, and\n   transfer\
    \ encoded parts, all must be <CR><LF>.\n   Note that this example is not of an\
    \ S/MIME message.\n       Content-Type: multipart/mixed; boundary=bar\n      \
    \ --bar\n       Content-Type: text/plain; charset=iso-8859-1\n       Content-Transfer-Encoding:\
    \ quoted-printable\n       =A1Hola Michael!\n       How do you like the new S/MIME\
    \ specification?\n       I agree. It's generally a good idea to encode lines that\
    \ begin with\n       From=20because some mail transport agents will insert a greater-\n\
    \       than (>) sign, thus invalidating the signature.\n       Also, in some\
    \ cases it might be desirable to encode any   =20\n       trailing whitespace\
    \ that occurs on lines in order to ensure  =20\n       that the message signature\
    \ is not invalidated when passing =20\n       a gateway that modifies such whitespace\
    \ (like BITNET). =20\n       --bar\n       Content-Type: image/jpeg\n       Content-Transfer-Encoding:\
    \ base64\n       iQCVAwUBMJrRF2N9oWBghPDJAQE9UQQAtl7LuRVndBjrk4EqYBIb3h5QXIX/LC//\n\
    \       jJV5bNvkZIGPIcEmI5iFd9boEgvpirHtIREEqLQRkYNoBActFBZmh9GC3C041WGq\n   \
    \    uMbrbxc+nIs1TIKlA08rVi9ig/2Yh7LFrK5Ein57U/W72vgSxLhe/zhdfolT9Brn\n      \
    \ HOxEa44b+EI=\n       --bar--\n"
- title: 3.2 The application/pkcs7-mime Type
  contents:
  - "3.2 The application/pkcs7-mime Type\n   The application/pkcs7-mime type is used\
    \ to carry PKCS #7 objects of\n   several types including envelopedData and signedData.\
    \ The details of\n   constructing these entities is described in subsequent sections.\
    \ This\n   section describes the general characteristics of the\n   application/pkcs7-mime\
    \ type.\n   This MIME type always carries a single PKCS #7 object. The PKCS #7\n\
    \   object must always be BER encoding of the ASN.1 syntax describing the\n  \
    \ object. The contentInfo field of the carried PKCS #7 object always\n   contains\
    \ a MIME entity that is prepared as described in section 3.1.\n   The contentInfo\
    \ field must never be empty.\n   Since PKCS #7 objects are binary data, in most\
    \ cases base-64 transfer\n   encoding is appropriate, in particular when used\
    \ with SMTP transport.\n   The transfer encoding used depends on the transport\
    \ through which the\n   object is to be sent, and is not a characteristic of the\
    \ MIME type.\n   Note that this discussion refers to the transfer encoding of\
    \ the PKCS\n   #7 object or \"outside\" MIME entity. It is completely distinct\
    \ from,\n   and unrelated to, the transfer encoding of the MIME entity secured\
    \ by\n   the PKCS #7 object, the \"inside\" object, which is described in\n  \
    \ section 3.1.\n   Because there are several types of application/pkcs7-mime objects,\
    \ a\n   sending agent SHOULD do as much as possible to help a receiving agent\n\
    \   know about the contents of the object without forcing the receiving\n   agent\
    \ to decode the ASN.1 for the object. The MIME headers of all\n   application/pkcs7-mime\
    \ objects SHOULD include the optional \"smime-\n   type\" parameter, as described\
    \ in the following sections.\n"
- title: 3.2.1 The name and filename Parameters
  contents:
  - "3.2.1 The name and filename Parameters\n   For the application/pkcs7-mime, sending\
    \ agents SHOULD emit the\n   optional \"name\" parameter to the Content-Type field\
    \ for compatibility\n   with older systems. Sending agents SHOULD also emit the\
    \ optional\n   Content-Disposition field [CONTDISP] with the \"filename\" parameter.\n\
    \   If a sending agent emits the above parameters, the value of the\n   parameters\
    \ SHOULD be a file name with the appropriate extension:\n   MIME Type        \
    \              File Extension\n   application/pkcs7-mime              .p7m\n \
    \  (signedData, envelopedData)\n   application/pkcs7-mime              .p7c\n\
    \   (degenerate signedData\n   \"certs-only\" message)\n   application/pkcs7-signature\
    \         .p7s\n   application/pkcs10                  .p10\n   In addition, the\
    \ file name SHOULD be limited to eight characters\n   followed by a three letter\
    \ extension. The eight character filename\n   base can be any distinct name; the\
    \ use of the filename base \"smime\"\n   SHOULD be used to indicate that the MIME\
    \ entity is associated with\n   S/MIME.\n   Including a file name serves two purposes.\
    \ It facilitates easier use\n   of S/MIME objects as files on disk. It also can\
    \ convey type\n   information across gateways. When a MIME entity of type\n  \
    \ application/pkcs7-mime (for example) arrives at a gateway that has no\n   special\
    \ knowledge of S/MIME, it will default the entity's MIME type\n   to application/octet-stream\
    \ and treat it as a generic attachment,\n   thus losing the type information.\
    \ However, the suggested filename for\n   an attachment is often carried across\
    \ a gateway.  This often allows\n   the receiving systems to determine the appropriate\
    \ application to\n   hand the attachment off to, in this case a stand-alone S/MIME\n\
    \   processing application. Note that this mechanism is provided as a\n   convenience\
    \ for implementations in certain environments. A proper\n   S/MIME implementation\
    \ MUST use the MIME types and MUST NOT rely on\n   the file extensions.\n"
- title: 3.3 Creating an Enveloped-only Message
  contents:
  - "3.3 Creating an Enveloped-only Message\n   This section describes the format\
    \ for enveloping a MIME entity\n   without signing it.\n     Step 1. The MIME\
    \ entity to be enveloped is prepared according to\n             section 3.1.\n\
    \     Step 2. The MIME entity and other required data is processed into a\n  \
    \           PKCS #7 object of type envelopedData.\n     Step 3. The PKCS #7 object\
    \ is inserted into an application/pkcs7-\n             mime MIME entity.\n   The\
    \ smime-type parameter for enveloped-only messages is \"enveloped-\n   data\"\
    .  The file extension for this type of message is \".p7m\".\n   A sample message\
    \ would be:\n       Content-Type: application/pkcs7-mime; smime-type=enveloped-data;\n\
    \            name=smime.p7m\n       Content-Transfer-Encoding: base64\n      \
    \ Content-Disposition: attachment; filename=smime.p7m\n       rfvbnj756tbBghyHhHUujhJhjH77n8HHGT9HG4VQpfyF467GhIGfHfYT6\n\
    \       7n8HHGghyHhHUujhJh4VQpfyF467GhIGfHfYGTrfvbnjT6jH7756tbB9H\n       f8HHGTrfvhJhjH776tbB9HG4VQbnj7567GhIGfHfYT6ghyHhHUujpfyF4\n\
    \       0GhIGfHfQbnj756YT64V\n"
- title: 3.4 Creating a Signed-only Message
  contents:
  - "3.4 Creating a Signed-only Message\n   There are two formats for signed messages\
    \ defined for S/MIME:\n   application/pkcs7-mime and SignedData, and multipart/signed.\
    \ In\n   general, the multipart/signed form is preferred for sending, and\n  \
    \ receiving agents SHOULD be able to handle both.\n"
- title: 3.4.1 Choosing a Format for Signed-only Messages
  contents:
  - "3.4.1 Choosing a Format for Signed-only Messages\n   There are no hard-and-fast\
    \ rules when a particular signed-only format\n   should be chosen because it depends\
    \ on the capabilities of all the\n   receivers and the relative importance of\
    \ receivers with S/MIME\n   facilities being able to verify the signature versus\
    \ the importance\n   of receivers without S/MIME software being able to view the\
    \ message.\n   Messages signed using the multipart/signed format can always be\n\
    \   viewed by the receiver whether they have S/MIME software or not. They\n  \
    \ can also be viewed whether they are using a MIME-native user agent or\n   they\
    \ have messages translated by a gateway. In this context, \"be\n   viewed\" means\
    \ the ability to process the message essentially as if it\n   were not a signed\
    \ message, including any other MIME structure the\n   message might have.\n  \
    \ Messages signed using the signedData format cannot be viewed by a\n   recipient\
    \ unless they have S/MIME facilities. However, if they have\n   S/MIME facilities,\
    \ these messages can always be verified if they were\n   not changed in transit.\n"
- title: 3.4.2 Signing Using application/pkcs7-mime and SignedData
  contents:
  - "3.4.2 Signing Using application/pkcs7-mime and SignedData\n   This signing format\
    \ uses the application/pkcs7-mime MIME type. The\n   steps to create this format\
    \ are:\n     Step 1. The MIME entity is prepared according to section 3.1\n  \
    \   Step 2. The MIME entity and other required data is processed into a\n    \
    \         PKCS #7 object of type signedData\n     Step 3. The PKCS #7 object is\
    \ inserted into an\n             application/pkcs7-mime MIME entity\n   The smime-type\
    \ parameter for messages using application/pkcs7-mime\n   and SignedData is \"\
    signed-data\". The file extension for this type of\n   message is \".p7m\".\n\
    \   A sample message would be:\n       Content-Type: application/pkcs7-mime; smime-type=signed-data;\n\
    \            name=smime.p7m\n       Content-Transfer-Encoding: base64\n      \
    \ Content-Disposition: attachment; filename=smime.p7m\n       567GhIGfHfYT6ghyHhHUujpfyF4f8HHGTrfvhJhjH776tbB9HG4VQbnj7\n\
    \       77n8HHGT9HG4VQpfyF467GhIGfHfYT6rfvbnj756tbBghyHhHUujhJhjH\n       HUujhJh4VQpfyF467GhIGfHfYGTrfvbnjT6jH7756tbB9H7n8HHGghyHh\n\
    \       6YT64V0GhIGfHfQbnj75\n"
- title: 3.4.3 Signing Using the multipart/signed Format
  contents:
  - "3.4.3 Signing Using the multipart/signed Format\n   This format is a clear-signing\
    \ format. Recipients without any S/MIME\n   or PKCS processing facilities are\
    \ able to view the message. It makes\n   use of the multipart/signed MIME type\
    \ described in [MIME-SECURE]. The\n   multipart/signed MIME type has two parts.\
    \ The first part contains the\n   MIME entity that is to be signed; the second\
    \ part contains the\n   signature, which is a PKCS #7 detached signature.\n"
- title: 3.4.3.1 The application/pkcs7-signature MIME Type
  contents:
  - "3.4.3.1 The application/pkcs7-signature MIME Type\n   This MIME type always contains\
    \ a single PKCS #7 object of type\n   signedData.  The contentInfo field of the\
    \ PKCS #7 object must be\n   empty. The signerInfos field contains the signatures\
    \ for the MIME\n   entity. The details of the registered type are given in Appendix\
    \ D.\n   The file extension for signed-only messages using application/pkcs7-\n\
    \   signature  is \".p7s\".\n"
- title: 3.4.3.2 Creating a multipart/signed Message
  contents:
  - "3.4.3.2 Creating a multipart/signed Message\n     Step 1. The MIME entity to\
    \ be signed is prepared according to\n             section 3.1, taking special\
    \ care for clear-signing.\n     Step 2. The MIME entity is presented to PKCS #7\
    \ processing in order\n             to obtain an object of type signedData with\
    \ an empty\n             contentInfo field.\n     Step 3. The MIME entity is inserted\
    \ into the first part of a\n             multipart/signed message with no processing\
    \ other than that\n             described in section 3.1.\n     Step 4. Transfer\
    \ encoding is applied to the detached signature and\n             it is inserted\
    \ into a MIME entity of type\n             application/pkcs7-signature\n     Step\
    \ 5. The MIME entity of the application/pkcs7-signature is\n             inserted\
    \ into the second part of the multipart/signed\n             entity\n   The multipart/signed\
    \ Content type has two required parameters: the\n   protocol parameter and the\
    \ micalg parameter.\n   The protocol parameter MUST be \"application/pkcs7-signature\"\
    . Note\n   that quotation marks are required around the protocol parameter\n \
    \  because MIME requires that the \"/\" character in the parameter value\n   MUST\
    \ be quoted.\n   The micalg parameter allows for one-pass processing when the\n\
    \   signature is being verified. The value of the micalg parameter is\n   dependent\
    \ on the message digest algorithm used in the calculation of\n   the Message Integrity\
    \ Check. The value of the micalg parameter SHOULD\n   be one of the following:\n\
    \   Algorithm used     Value\n   --------------     ---------\n   MD5        \
    \        md5\n   SHA-1              sha1\n   any other          unknown\n   (Historical\
    \ note: some early implementations of S/MIME emitted and\n   expected \"rsa-md5\"\
    \ and \"rsa-sha1\" for the micalg parameter.)\n   Receiving agents SHOULD be able\
    \ to recover gracefully from a micalg\n   parameter value that they do not recognize.\n"
- title: 3.4.3.3 Sample multipart/signed Message
  contents:
  - "3.4.3.3 Sample multipart/signed Message\n       Content-Type: multipart/signed;\n\
    \          protocol=\"application/pkcs7-signature\";\n          micalg=sha1; boundary=boundary42\n\
    \       --boundary42\n       Content-Type: text/plain\n       This is a clear-signed\
    \ message.\n       --boundary42\n       Content-Type: application/pkcs7-signature;\
    \ name=smime.p7s\n       Content-Transfer-Encoding: base64\n       Content-Disposition:\
    \ attachment; filename=smime.p7s\n       ghyHhHUujhJhjH77n8HHGTrfvbnj756tbB9HG4VQpfyF467GhIGfHfYT6\n\
    \       4VQpfyF467GhIGfHfYT6jH77n8HHGghyHhHUujhJh756tbB9HGTrfvbnj\n       n8HHGTrfvhJhjH776tbB9HG4VQbnj7567GhIGfHfYT6ghyHhHUujpfyF4\n\
    \       7GhIGfHfYT64VQbnj756\n       --boundary42--\n"
- title: 3.5 Signing and Encrypting
  contents:
  - "3.5 Signing and Encrypting\n   To achieve signing and enveloping, any of the\
    \ signed-only and\n   encrypted-only formats may be nested. This is allowed because\
    \ the\n   above formats are all MIME entities, and because they all secure MIME\n\
    \   entities.\n   An S/MIME implementation MUST be able to receive and process\n\
    \   arbitrarily nested S/MIME within reasonable resource limits of the\n   recipient\
    \ computer.\n   It is possible to either sign a message first, or to envelope\
    \ the\n   message first. It is up to the implementor and the user to choose.\n\
    \   When signing first, the signatories are then securely obscured by the\n  \
    \ enveloping. When enveloping first the signatories are exposed, but it\n   is\
    \ possible to verify signatures without removing the enveloping.\n   This may\
    \ be useful in an environment were automatic signature\n   verification is desired,\
    \ as no private key material is required to\n   verify a signature.\n"
- title: 3.6 Creating a Certificates-only Message
  contents:
  - "3.6 Creating a Certificates-only Message\n   The certificates only message or\
    \ MIME entity is used to transport\n   certificates, such as in response to a\
    \ registration request. This\n   format can also be used to convey CRLs.\n   \
    \  Step 1. The certificates are made available to the PKCS #7\n             generating\
    \ process which creates a PKCS #7 object of type\n             signedData.  The\
    \ contentInfo and signerInfos fields must be\n             empty.\n     Step 2.\
    \ The PKCS #7 signedData object is enclosed in an\n             application/pkcs7-mime\
    \ MIME entity\n   The smime-type parameter for a certs-only message is \"certs-only\"\
    .\n   The file extension for this type of message is \".p7c\".\n"
- title: 3.7 Creating a Registration Request
  contents:
  - "3.7 Creating a Registration Request\n   A typical application which allows a\
    \ user to generate cryptographic\n   information has to submit that information\
    \ to a certification\n   authority, who transforms it into a certificate. PKCS\
    \ #10 describes a\n   syntax for certification requests. The application/pkcs10\
    \ body type\n   MUST be used to transfer a PKCS #10 certification request.\n \
    \  The details of certification requests and the process of obtaining a\n   certificate\
    \ are beyond the scope of this memo. Instead, only the\n   format of data used\
    \ in application/pkcs10 is defined.\n"
- title: 3.7.1 Format of the application/pkcs10 Body
  contents:
  - "3.7.1 Format of the application/pkcs10 Body\n   PKCS #10 defines the ASN.1 type\
    \ CertificationRequest for use in\n   submitting a certification request. Therefore,\
    \ when the MIME content\n   type application/pkcs10 is used, the body MUST be\
    \ a\n   CertificationRequest, encoded using the Basic Encoding Rules (BER).\n\
    \   Although BER is specified, instead of the more restrictive DER, a\n   typical\
    \ application will use DER since the CertificationRequest's\n   CertificationRequestInfo\
    \ has to be DER-encoded in order to be signed.\n   A robust application SHOULD\
    \ output DER, but allow BER or DER on\n   input.\n   Data produced by BER or DER\
    \ is 8-bit, but many transports are limited\n   to 7-bit data. Therefore, a suitable\
    \ 7-bit Content-Transfer-Encoding\n   SHOULD be applied. The base64 Content-Transfer-Encoding\
    \ SHOULD be\n   used with application/pkcs10, although any 7-bit transfer encoding\n\
    \   may work.\n"
- title: 3.7.2 Sending and Receiving an application/pkcs10 Body Part
  contents:
  - "3.7.2 Sending and Receiving an application/pkcs10 Body Part\n   For sending a\
    \ certificate-signing request, the application/pkcs10\n   message format MUST\
    \ be used to convey a PKCS #10 certificate-signing\n   request. Note that for\
    \ sending certificates and CRLs messages without\n   any signed content, the application/pkcs7-mime\
    \ message format MUST be\n   used to convey a degenerate PKCS #7 signedData \"\
    certs-only\" message.\n   To send an application/pkcs10 body, the application\
    \ generates the\n   cryptographic information for the user. The details of the\n\
    \   cryptographic information are beyond the scope of this memo.\n     Step 1.\
    \ The cryptographic information is placed within a PKCS #10\n             CertificationRequest.\n\
    \     Step 2. The CertificationRequest is encoded according to BER or DER\n  \
    \           (typically, DER).\n     Step 3. As a typical step, the DER-encoded\
    \ CertificationRequest is\n             also base64 encoded so that it is 7-bit\
    \ data suitable for\n             transfer in SMTP. This then becomes the body\
    \ of an\n             application/pkcs10 body part.\n   The result might look\
    \ like this:\n       Content-Type: application/pkcs10; name=smime.p10\n      \
    \ Content-Transfer-Encoding: base64\n       Content-Disposition: attachment; filename=smime.p10\n\
    \       rfvbnj756tbBghyHhHUujhJhjH77n8HHGT9HG4VQpfyF467GhIGfHfYT6\n       7n8HHGghyHhHUujhJh4VQpfyF467GhIGfHfYGTrfvbnjT6jH7756tbB9H\n\
    \       f8HHGTrfvhJhjH776tbB9HG4VQbnj7567GhIGfHfYT6ghyHhHUujpfyF4\n       0GhIGfHfQbnj756YT64V\n\
    \   A typical application only needs to send a certification request. It\n   is\
    \ a certification authority that has to receive and process the\n   request. The\
    \ steps for recovering the CertificationRequest from the\n   message are straightforward\
    \ but are not presented here. The\n   procedures for processing the certification\
    \ request are beyond the\n   scope of this document.\n"
- title: 3.8 Identifying an S/MIME Message
  contents:
  - "3.8 Identifying an S/MIME Message\n   Because S/MIME takes into account interoperation\
    \ in non-MIME\n   environments, several different mechanisms are employed to carry\
    \ the\n   type information, and it becomes a bit difficult to identify S/MIME\n\
    \   messages. The following table lists criteria for determining whether\n   or\
    \ not a message is an S/MIME message. A message is considered an\n   S/MIME message\
    \ if it matches any below.\n   The file suffix in the table below comes from the\
    \ \"name\" parameter in\n   the content-type header, or the \"filename\" parameter\
    \ on the content-\n   disposition header. These parameters that give the file\
    \ suffix are\n   not listed below as part of the parameter section.\n   MIME type:\
    \   application/pkcs7-mime\n   parameters:  any\n   file suffix: any\n   MIME\
    \ type:   application/pkcs10\n   parameters:  any\n   file suffix: any\n   MIME\
    \ type:   multipart/signed\n   parameters:  protocol=\"application/pkcs7-signature\"\
    \n   file suffix: any\n   MIME type:   application/octet-stream\n   parameters:\
    \  any\n   file suffix: p7m, p7s, aps, p7c, p10\n"
- title: 4. Certificate Processing
  contents:
  - "4. Certificate Processing\n   A receiving agent MUST provide some certificate\
    \ retrieval mechanism\n   in order to gain access to certificates for recipients\
    \ of digital\n   envelopes.  This memo does not cover how S/MIME agents handle\n\
    \   certificates, only what they do after a certificate has been\n   validated\
    \ or rejected. S/MIME certification issues are covered in a\n   different document.\n\
    \   At a minimum, for initial S/MIME deployment, a user agent could\n   automatically\
    \ generate a message to an intended recipient requesting\n   that recipient's\
    \ certificate in a signed return message. Receiving\n   and sending agents SHOULD\
    \ also provide a mechanism to allow a user to\n   \"store and protect\" certificates\
    \ for correspondents in such a way so\n   as to guarantee their later retrieval.\n"
- title: 4.1 Key Pair Generation
  contents:
  - "4.1 Key Pair Generation\n   An S/MIME agent or some related administrative utility\
    \ or function\n   MUST be capable of generating RSA key pairs on behalf of the\
    \ user.\n   Each key pair MUST be generated from a good source of non-\n   deterministic\
    \ random input and protected in a secure fashion.\n   A user agent SHOULD generate\
    \ RSA key pairs at a minimum key size of\n   768 bits and a maximum key size of\
    \ 1024 bits. A user agent MUST NOT\n   generate RSA key pairs less than 512 bits\
    \ long. Some agents created\n   in the United States have chosen to create 512\
    \ bit keys in order to\n   get more advantageous export licenses. However, 512\
    \ bit keys are\n   considered by many to be cryptographically insecure.\n   Implementors\
    \ should be aware that multiple (active) key pairs may be\n   associated with\
    \ a single individual. For example, one key pair may be\n   used to support confidentiality,\
    \ while a different key pair may be\n   used for authentication.\n"
- title: 5. Security Considerations
  contents:
  - "5. Security Considerations\n   This entire memo discusses security. Security\
    \ issues not covered in\n   other parts of the memo include:\n   40-bit encryption\
    \ is considered weak by most cryptographers. Using\n   weak cryptography in S/MIME\
    \ offers little actual security over\n   sending plaintext. However, other features\
    \ of S/MIME, such as the\n   specification of tripleDES and the ability to announce\
    \ stronger\n   cryptographic capabilities to parties with whom you communicate,\n\
    \   allow senders to create messages that use strong encryption. Using\n   weak\
    \ cryptography is never recommended unless the only alternative is\n   no cryptography.\
    \ When feasible, sending and receiving agents should\n   inform senders and recipients\
    \ the relative cryptographic strength of\n   messages.\n   It is impossible for\
    \ most software or people to estimate the value of\n   a message. Further, it\
    \ is impossible for most software or people to\n   estimate the actual cost of\
    \ decrypting a message that is encrypted\n   with a key of a particular size.\
    \ Further, it is quite difficult to\n   determine the cost of a failed decryption\
    \ if a recipient cannot\n   decode a message. Thus, choosing between different\
    \ key sizes (or\n   choosing whether to just use plaintext) is also impossible.\
    \ However,\n   decisions based on these criteria are made all the time, and\n\
    \   therefore this memo gives a framework for using those estimates in\n   choosing\
    \ algorithms.\n   If a sending agent is sending the same message using different\n\
    \   strengths of cryptography, an attacker watching the communications\n   channel\
    \ can determine the contents of the strongly-encrypted message\n   by decrypting\
    \ the weakly-encrypted version. In other words, a sender\n   should not send a\
    \ copy of a message using weaker cryptography than\n   they would use for the\
    \ original of the message.\n"
- title: A. Object Identifiers and Syntax
  contents:
  - "A. Object Identifiers and Syntax\n   The syntax for SMIMECapability is:\n   SMIMECapability\
    \ ::= SEQUENCE {\n       capabilityID OBJECT IDENTIFIER,\n       parameters OPTIONAL\
    \ ANY DEFINED BY capabilityID }\n   SMIMECapabilities ::= SEQUENCE OF SMIMECapability\n"
- title: A.1 Content Encryption Algorithms
  contents:
  - 'A.1 Content Encryption Algorithms

    '
- title: RC2-CBC OBJECT IDENTIFIER ::=
  contents:
  - "RC2-CBC OBJECT IDENTIFIER ::=\n {iso(1) member-body(2) us(840) rsadsi(113549)\
    \ encryptionAlgorithm(3) 2}\n"
- title: For the effective-key-bits (key size) greater than 32 and less than
  contents:
  - 'For the effective-key-bits (key size) greater than 32 and less than

    '
- title: '256, the RC2-CBC algorithm parameters are encoded as:'
  contents:
  - '256, the RC2-CBC algorithm parameters are encoded as:

    '
- title: RC2-CBC parameter ::=  SEQUENCE {
  contents:
  - "RC2-CBC parameter ::=  SEQUENCE {\n rc2ParameterVersion  INTEGER,\n iv      \
    \             OCTET STRING (8)}\n"
- title: For the effective-key-bits of 40, 64, and 128, the
  contents:
  - 'For the effective-key-bits of 40, 64, and 128, the

    '
- title: rc2ParameterVersion values are 160, 120, 58 respectively.
  contents:
  - 'rc2ParameterVersion values are 160, 120, 58 respectively.

    '
- title: DES-EDE3-CBC OBJECT IDENTIFIER ::=
  contents:
  - "DES-EDE3-CBC OBJECT IDENTIFIER ::=\n {iso(1) member-body(2) us(840) rsadsi(113549)\
    \ encryptionAlgorithm(3) 7}\n"
- title: 'For DES-CBC and DES-EDE3-CBC, the parameter should be encoded as:'
  contents:
  - 'For DES-CBC and DES-EDE3-CBC, the parameter should be encoded as:

    '
- title: 'CBCParameter :: IV'
  contents:
  - 'CBCParameter :: IV

    '
- title: where IV ::= OCTET STRING -- 8 octets.
  contents:
  - 'where IV ::= OCTET STRING -- 8 octets.

    '
- title: A.2 Digest Algorithms
  contents:
  - 'A.2 Digest Algorithms

    '
- title: md5 OBJECT IDENTIFIER ::=
  contents:
  - "md5 OBJECT IDENTIFIER ::=\n {iso(1) member-body(2) us(840) rsadsi(113549) digestAlgorithm(2)\
    \ 5}\n"
- title: sha-1 OBJECT IDENTIFIER ::=
  contents:
  - "sha-1 OBJECT IDENTIFIER ::=\n {iso(1) identified-organization(3) oiw(14) secsig(3)\
    \ algorithm(2) 26}\n"
- title: A.3 Asymmetric Encryption Algorithms
  contents:
  - 'A.3 Asymmetric Encryption Algorithms

    '
- title: rsaEncryption OBJECT IDENTIFIER ::=
  contents:
  - "rsaEncryption OBJECT IDENTIFIER ::=\n {iso(1) member-body(2) us(840) rsadsi(113549)\
    \ pkcs(1) pkcs-1(1) 1}\n"
- title: rsa OBJECT IDENTIFIER ::=
  contents:
  - "rsa OBJECT IDENTIFIER ::=\n     {joint-iso-ccitt(2) ds(5) algorithm(8) encryptionAlgorithm(1)\
    \ 1}\n"
- title: A.4 Signature Algorithms
  contents:
  - 'A.4 Signature Algorithms

    '
- title: md2WithRSAEncryption OBJECT IDENTIFIER ::=
  contents:
  - "md2WithRSAEncryption OBJECT IDENTIFIER ::=\n     {iso(1) member-body(2) us(840)\
    \ rsadsi(113549) pkcs(1) pkcs-1(1) 2}\n"
- title: md5WithRSAEncryption OBJECT IDENTIFIER ::=
  contents:
  - "md5WithRSAEncryption OBJECT IDENTIFIER ::=\n     {iso(1) member-body(2) us(840)\
    \ rsadsi(113549) pkcs(1) pkcs-1(1) 4}\n"
- title: sha-1WithRSAEncryption OBJECT IDENTIFIER ::=
  contents:
  - "sha-1WithRSAEncryption OBJECT IDENTIFIER ::=\n     {iso(1) member-body(2) us(840)\
    \ rsadsi(113549) pkcs(1) pkcs-1(1) 5}\n"
- title: A.5 Signed Attributes
  contents:
  - 'A.5 Signed Attributes

    '
- title: signingTime OBJECT IDENTIFIER ::=
  contents:
  - "signingTime OBJECT IDENTIFIER ::=\n     {iso(1) member-body(2) us(840) rsadsi(113549)\
    \ pkcs(1) pkcs-9(9) 5}\n"
- title: smimeCapabilities OBJECT IDENTIFIER ::=
  contents:
  - "smimeCapabilities OBJECT IDENTIFIER ::=\n    {iso(1) member-body(2) us(840) rsadsi(113549)\
    \ pkcs(1) pkcs-9(9) 15}\n"
- title: B. References
  contents:
  - "B. References\n   [3DES] W. Tuchman, \"Hellman Presents No Shortcut Solutions\
    \ To DES,\"\n   IEEE Spectrum, v. 16, n. 7, July 1979, pp40-41.\n   [CHARSETS]\
    \ Character sets assigned by IANA. See\n   <ftp://ftp.isi.edu/in-notes/iana/assignments/character-sets>.\n\
    \   [CONTDISP] Troost, R., Dorner, S and K. Moore, \"Communicating\n   Presentation\
    \ Information in Internet Messages:  The Content-\n   Disposition Header Field\"\
    , RFC 2183, August 1997.\n   [DES] ANSI X3.106, \"American National Standard for\
    \ Information\n   Systems-Data Link Encryption,\" American National Standards\
    \ Institute,\n   1983.\n   [MD5] Rivest, R., \"The MD5 Message Digest Algorithm\"\
    , RFC 1321, April\n   1992.\n   [MIME-SPEC] The primary definition of MIME.\n\
    \   Freed, N., and N. Borenstein, \"MIME Part 1: Format of Internet\n   Message\
    \ Bodies\", RFC 2045, November 1996.\n   Freed, N., and N. Borenstein, \"MIME\
    \ Part 2: Media Types\", RFC 2046,\n   November 1996.\n   Moore, K., \"MIME Part\
    \ 3: Message Header Extensions for Non-ASCII\n   Text\", RFC 2047, November 1996.\n\
    \   Freed, N., Klensin, J., and J. Postel, \"MIME Part 4: Registration\n   Procedures\"\
    , RFC 2048, November 1996.\n   Freed, N., and N. Borenstein, \"MIME Part 5: Conformance\
    \ Criteria and\n   Examples\", RFC 2049, November 1996.\n   [MIME-SECURE] Galvin,\
    \ J., Murphy, S., Crocker, S., and N. Freed,\n   \"Security Multiparts for MIME:\
    \ Multipart/Signed and\n   Multipart/Encrypted\", RFC 1847, October 1995.\n  \
    \ [MUSTSHOULD] Bradner, S., \"Key words for use in RFCs to Indicate\n   Requirement\
    \ Levels\", BCP 14, RFC 2119, March 1997.\n   [PKCS-1] Kaliski, B., \"PKCS #1:\
    \ RSA Encryption Version 1.5\", RFC\n   2313, March 1998.\n   [PKCS-7] Kaliski,\
    \ B., \"PKCS #7: Cryptographic Message Syntax Version\n   1.5\", RFC 2315, March\
    \ 1998.\n   [PKCS-10] Kaliski, B., \"PKCS #10: Certification Request Syntax\n\
    \   Version 1.5\", RFC 2314, March 1998.\n   [RC2] Rivest, R., \"Description of\
    \ the RC2(r) Encryption Algorithm\",\n   RFC 2268, January 1998.\n   [SHA1] NIST\
    \ FIPS PUB 180-1, \"Secure Hash Standard,\" National\n   Institute of Standards\
    \ and Technology, U.S. Department of Commerce,\n   DRAFT, 31 May 1994.\n"
- title: C. Compatibility with Prior Practice in S/MIME
  contents:
  - "C. Compatibility with Prior Practice in S/MIME\n   S/MIME was originally developed\
    \ by RSA Data Security, Inc. Many\n   developers implemented S/MIME agents before\
    \ this document was\n   published. All S/MIME receiving agents SHOULD make every\
    \ attempt to\n   interoperate with these earlier implementations of S/MIME.\n"
- title: C.1 Early MIME Types
  contents:
  - "C.1 Early MIME Types\n   Some early implementations of S/MIME agents used the\
    \ following MIME\n   types:\n   application/x-pkcs7-mime\n   application/x-pkcs7-signature\n\
    \   application/x-pkcs10\n   In each case, the \"x-\" subtypes correspond to the\
    \ subtypes described\n   in this document without the \"x-\".\n"
- title: C.2 Profiles
  contents:
  - "C.2 Profiles\n   Early S/MIME documentation had two profiles for encryption:\n\
    \   \"restricted\" and \"unrestricted\". The difference between these\n   profiles\
    \ historically came about due to US Government export\n   regulations, as described\
    \ at the end of this section. It is expected\n   that in the future, there will\
    \ be few agents that only use the\n   restricted profile.\n   Briefly, the restricted\
    \ profile required the ability to encrypt and\n   decrypt using RSA's trade-secret\
    \ RC2 algorithm in CBC mode with 40-\n   bit keys. The unrestricted profile required\
    \ the ability to encrypt\n   and decrypt using RSA's trade-secret RC2 algorithm\
    \ in CBC mode with\n   40-bit keys, and to encrypt and decrypt using tripleDES.\
    \ The\n   restricted profile also had non-mandatory suggestions for other\n  \
    \ algorithms, but these were not widely implemented.\n   It is important to note\
    \ that many current implementations of S/MIME\n   use the restricted profile.\n"
- title: C.2.1 Historical Reasons for the Existence of Two Encryption Profiles
  contents:
  - "C.2.1 Historical Reasons for the Existence of Two Encryption Profiles\n   Due\
    \ to US Government export regulations, an S/MIME agent which\n   supports a strong\
    \ content encryption algorithm such as DES would not\n   be freely exportable\
    \ outside of North America. US software\n   manufacturers have been compelled\
    \ to incorporate an exportable or\n   \"restricted\" content encryption algorithm\
    \ in order to create a widely\n   exportable version of their product.  S/MIME\
    \ agents created in the US\n   and intended for US domestic use (or use under\
    \ special State\n   Department export licenses) can utilize stronger, \"unrestricted\"\
    \n   content encryption. However, in order to achieve interoperability,\n   such\
    \ agents need to support whatever exportable algorithm is\n   incorporated in\
    \ restricted S/MIME agents.\n   The RC2 symmetric encryption algorithm has been\
    \ approved by the US\n   Government for \"expedited\" export licensing at certain\
    \ key sizes.\n   Consequently, support for the RC2 algorithm in CBC mode is required\n\
    \   for baseline interoperability in all S/MIME implementations. Support\n   for\
    \ other strong symmetric encryption algorithms such as RC5 CBC, DES\n   CBC and\
    \ DES EDE3-CBC for content encryption is strongly encouraged\n   where possible.\n"
- title: D. Request for New MIME Subtypes
  contents:
  - 'D. Request for New MIME Subtypes

    '
- title: D.1 application/pkcs7-mime
  contents:
  - "D.1 application/pkcs7-mime\n   To: ietf-types@iana.org\n   Subject: Registration\
    \ of MIME media type application/pkcs7-mime\n   MIME media type name: application\n\
    \   MIME subtype name: pkcs7-mime\n   Required parameters: none\n   Optional parameters:\
    \ name, filename, smime-type\n   Encoding considerations: Will be binary data,\
    \ therefore should use\n   base64 encoding\n   Security considerations: Described\
    \ in [PKCS-7]\n   Interoperability considerations: Designed to carry data formatted\n\
    \   with PKCS-7, as described in [PKCS-7]\n   Published specification: RFC 2311\n\
    \   Applications which use this media type: Secure Internet mail and\n   other\
    \ secure data transports.\n   Additional information:\n   File extension(s): .p7m\
    \ and .p7c\n   Macintosh File Type Code(s):\n   Person & email address to contact\
    \ for further information:\n   Steve Dusse, spock@rsa.com\n   Intended usage:\
    \ COMMON\n"
- title: D.2 application/pkcs7-signature
  contents:
  - "D.2 application/pkcs7-signature\n   To: ietf-types@iana.org\n   Subject: Registration\
    \ of MIME media type application/pkcs7-signature\n   MIME media type name: application\n\
    \   MIME subtype name: pkcs7-signature\n   Required parameters: none\n   Optional\
    \ parameters: name, filename\n   Encoding considerations: Will be binary data,\
    \ therefore should use\n   base64 encoding\n   Security considerations: Described\
    \ in [PKCS-7]\n   Interoperability considerations: Designed to carry digital\n\
    \   signatures with PKCS-7, as described in [PKCS-7]\n   Published specification:\
    \ RFC 2311\n   Applications which use this media type: Secure Internet mail and\n\
    \   other secure data transports.\n   Additional information:\n   File extension(s):\
    \ .p7s\n   Macintosh File Type Code(s):\n   Person & email address to contact\
    \ for further information:\n   Steve Dusse, spock@rsa.com\n   Intended usage:\
    \ COMMON\n"
- title: D.3 application/pkcs10
  contents:
  - "D.3 application/pkcs10\n   To: ietf-types@iana.org\n   Subject: Registration\
    \ of MIME media type application/pkcs10\n   MIME media type name: application\n\
    \   MIME subtype name: pkcs10\n   Required parameters: none\n   Optional parameters:\
    \ name, filename\n   Encoding considerations: Will be binary data, therefore should\
    \ use\n   base64 encoding\n   Security considerations: Described in [PKCS-10]\n\
    \   Interoperability considerations: Designed to carry digital\n   certificates\
    \ formatted with PKCS-10, as described in [PKCS-10]\n   Published specification:\
    \ RFC 2311\n   Applications which use this media type: Secure Internet mail and\n\
    \   other transports where certificates are required.\n   Additional information:\n\
    \   File extension(s): .p10\n   Macintosh File Type Code(s):\n   Person & email\
    \ address to contact for further information:\n   Steve Dusse, spock@rsa.com\n\
    \   Intended usage: COMMON\n"
- title: E. Encapsulating Signed Messages for Internet Transport
  contents:
  - "E. Encapsulating Signed Messages for Internet Transport\n   The rationale behind\
    \ the multiple formats for signing has to do with\n   the MIME subtype defaulting\
    \ rules of the application and multipart\n   top-level types, and the behavior\
    \ of currently deployed gateways and\n   mail user agents.\n   Ideally, the multipart/signed\
    \ format would be the only format used\n   because it provides a truly backwards\
    \ compatible way to sign MIME\n   entities. In a pure MIME environment with very\
    \ capable user agents,\n   this would be possible. The world, however, is more\
    \ complex than\n   this.\n   One problem with the multipart/signed format occurs\
    \ with gateways to\n   non-MIME environments. In these environments, the gateway\
    \ will\n   generally not be S/MIME aware, will not recognize the\n   multipart/signed\
    \ type, and will default its treatment to\n   multipart/mixed as is prescribed\
    \ by the MIME standard. The real\n   problem occurs when the gateway also applies\
    \ conversions to the MIME\n   structure of the original message that is being\
    \ signed and is\n   contained in the first part of the multipart/signed structure,\
    \ such\n   as the gateway converting text and attachments to the local format.\n\
    \   Because the signature is over the MIME structure of the original\n   message,\
    \ but the original message is now decomposed and transformed,\n   the signature\
    \ cannot be verified. Because MIME encoding of a\n   particular set of body parts\
    \ can be done in many different ways,\n   there is no way to reconstruct the original\
    \ MIME entity over which\n   the signature was computed.\n   A similar problem\
    \ occurs when an attempt is made to combine an\n   existing user agent with a\
    \ stand-alone S/MIME facility. Typical user\n   agents do not have the ability\
    \ to make a multipart sub-entity\n   available to a stand-alone application in\
    \ the same way they make leaf\n   MIME entities available to \"viewer\" applications.\
    \ This user agent\n   behavior is not required by the MIME standard and thus not\
    \ widely\n   implemented. The result is that it is impossible for most user agents\n\
    \   to hand off the entire multipart/signed entity to a stand-alone\n   application.\n"
- title: E.1 Solutions to the Problem
  contents:
  - "E.1 Solutions to the Problem\n   To work around these two problems, the application/pkcs7-mime\
    \ type\n   can be used. When going through a gateway, it will be defaulted to\n\
    \   the MIME type of application/octet-stream and treated as a single\n   opaque\
    \ entity. That is, the message will be treated as an attachment\n   of unknown\
    \ type, converted into the local representation for an\n   attachment and thus\
    \ can be made available to an S/MIME facility\n   completely intact. A similar\
    \ result is achieved when a user agent\n   similarly treats the application/pkcs7-mime\
    \ MIME entity as a simple\n   leaf node of the MIME structure and makes it available\
    \ to viewer\n   applications.\n   Another way to work around these problems is\
    \ to encapsulate the\n   multipart/signed MIME entity in a MIME entity that will\
    \ not be\n   damaged by the gateway. At the time that this memo is being written,\n\
    \   there is a proposal for a MIME entity \"application/mime\" for this\n   purpose.\
    \ However, no implementations of S/MIME use this type of\n   wrapping.\n"
- title: E.2 Encapsulation in an Non-MIME Environment
  contents:
  - "E.2 Encapsulation in an Non-MIME Environment\n   While this document primarily\
    \ addresses the Internet, it is useful to\n   compose and receive S/MIME secured\
    \ messages in non-MIME environments.\n   This is particularly the case when it\
    \ is desired that security be\n   implemented end-to-end. Other discussion here\
    \ addresses the receipt\n   of S/MIME messages in non-MIME environments. Here\
    \ the composition of\n   multipart/signed entities is addressed.\n   When a message\
    \ is to be sent in such an environment, the\n   multipart/signed entity is created\
    \ as described above. That entity is\n   then treated as an opaque stream of bits\
    \ and added to the message as\n   an attachment. It must have a file name that\
    \ ends with \".aps\", as\n   this is the sole mechanism for recognizing it as\
    \ an S/MIME message by\n   the receiving agent.\n   When this message arrives\
    \ in a MIME environment, it is likely to have\n   a MIME type of application/octet-stream,\
    \ with MIME parameters giving\n   the filename for the attachment. If the intervening\
    \ gateway has\n   carried the file type, it will end in \".aps\" and be recognized\
    \ as an\n   S/MIME message.\n"
- title: F. Acknowledgements
  contents:
  - "F. Acknowledgements\n   Significant contributions to the content of this memo\
    \ were made by\n   many people, including Jim Schaad, Jeff Thompson, and Jeff\
    \ Weinstein.\n"
- title: G. Authors' Addresses
  contents:
  - "G. Authors' Addresses\n   Steve Dusse\n   RSA Data Security, Inc.\n   100 Marine\
    \ Parkway, #500\n   Redwood City, CA  94065  USA\n   Phone: (415) 595-8782\n \
    \  EMail: spock@rsa.com\n   Paul Hoffman\n   Internet Mail Consortium\n   127\
    \ Segre Place\n   Santa Cruz, CA  95060\n   Phone: (408) 426-9827\n   EMail: phoffman@imc.org\n\
    \   Blake Ramsdell\n   Worldtalk\n   13122 NE 20th St., Suite C\n   Bellevue,\
    \ WA 98005\n   Phone: (425) 882-8861\n   EMail: blaker@deming.com\n   Laurence\
    \ Lundblade\n   QUALCOMM Incorporated\n   Eudora Division\n   6455 Lusk Boulevard\n\
    \   San Diego, California 92121-2779\n   Phone: (800) 238-3672\n   EMail: lgl@qualcomm.com\n\
    \   Lisa Repka\n   Netscape Communications Corporation\n   501 East Middlefield\
    \ Road\n   Mountain View, CA  94043\n   Phone: (415) 254-1900\n   EMail: repka@netscape.com\n"
- title: H.  Full Copyright Statement
  contents:
  - "H.  Full Copyright Statement\n   Copyright (C) The Internet Society (1998). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
