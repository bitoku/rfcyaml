- title: __initial_text__
  contents:
  - ' Terminology for Benchmarking Network-layer Traffic Control Mechanisms

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes terminology for the benchmarking of devices\n\
    \   that implement traffic control using packet classification based on\n   defined\
    \ criteria.  The terminology is to be applied to measurements\n   made on the\
    \ data plane to evaluate IP traffic control mechanisms.\n   Rules for packet classification\
    \ can be based on any field in the IP\n   header, such as the Differentiated Services\
    \ Code Point (DSCP), or any\n   field in the packet payload, such as port number.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Existing Definitions ............................................3\n  \
    \ 3. Term Definitions ................................................4\n    \
    \  3.1. Configuration Terms ........................................4\n      \
    \     3.1.1. Classification ......................................4\n        \
    \   3.1.2. Codepoint Set .......................................4\n          \
    \ 3.1.3. Forwarding Congestion ...............................5\n           3.1.4.\
    \ Congestion Management ...............................6\n           3.1.5. Flow\
    \ ................................................7\n      3.2. Measurement Terms\
    \ ..........................................7\n           3.2.1. Forwarding Capacity\
    \ .................................7\n           3.2.2. Conforming Packet ...................................8\n\
    \           3.2.3. Nonconforming Packet ................................9\n  \
    \         3.2.4. Forwarding Delay ....................................9\n    \
    \       3.2.5. Jitter .............................................11\n      \
    \     3.2.6. Undifferentiated Response ..........................11\n      3.3.\
    \ Sequence Tracking .........................................12\n           3.3.1.\
    \ Test Sequence Number ...............................12\n           3.3.2. Stream\
    \ .............................................12\n           3.3.3. In-Sequence\
    \ Packet .................................13\n           3.3.4. Out-of-Order Packet\
    \ ................................14\n           3.3.5. Duplicate Packet ...................................14\n\
    \      3.4. Vectors ...................................................15\n  \
    \         3.4.1. Intended Vector ....................................15\n    \
    \       3.4.2. Offered Vector .....................................16\n      \
    \     3.4.3. Expected Vectors ...................................16\n        \
    \   3.4.4. Output Vectors .....................................23\n   4. Security\
    \ Considerations ........................................30\n   5. Acknowledgements\
    \ ...............................................30\n   6. References .....................................................31\n\
    \      6.1. Normative References ......................................31\n  \
    \    6.2. Informative References ....................................31\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   New terminology is needed because most existing measurements\
    \ assume\n   the absence of congestion and only a single per-hop behavior.  This\n\
    \   document introduces several new terms that will allow measurements to\n  \
    \ be taken during periods of congestion.\n   Another key difference from existing\
    \ terminology is the definition of\n   measurements as observed on egress and\
    \ ingress of a device/system\n   under test.  Again, the existence of congestion\
    \ requires the addition\n   of egress measurements, as well as of those taken\
    \ on ingress; without\n   observing traffic leaving a device/system, it is not\
    \ possible to say\n   whether traffic-control mechanisms effectively dealt with\
    \ congestion.\n   The principal measurements introduced in this document are vectors\n\
    \   for rate, delay, and jitter, all of which can be observed with or\n   without\
    \ congestion of the Device Under Test (DUT)/System Under Test\n   (SUT).  This\
    \ document describes only those terms relevant to\n   measuring behavior of a\
    \ DUT or SUT at the egress during periods of\n   congestion.  End-to-end and service-level\
    \ measurements are beyond the\n   scope of this document.\n"
- title: 2.  Existing Definitions
  contents:
  - "2.  Existing Definitions\n   RFC 1224, \"Techniques for Managing Asynchronously\
    \ Generated Alerts\"\n   [St91], is used for 'Time with fine enough units to distinguish\n\
    \   between two events'.\n   RFC 1242, \"Benchmarking Terminology for Network\
    \ Interconnect\n   Devices\", and RFC 2285, \"Benchmarking Terminology for LAN\
    \ Switching\n   Devices\", should be consulted before attempting to make use of\
    \ this\n   document.\n   RFC 2474, \"Definition of the Differentiated Services\
    \ Field (DS Field)\n   in the IPv4 and IPv6 Headers\", section 2, contains discussions\
    \ of a\n   number of terms relevant to network-layer traffic control mechanisms\n\
    \   and should also be consulted.\n   For the sake of clarity and continuity,\
    \ this RFC adopts the template\n   for definitions set out in Section 2 of RFC\
    \ 1242.  Definitions are\n   indexed and grouped together in sections for ease\
    \ of reference.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in BCP\
    \ 14, RFC 2119\n   [Br97].  RFC 2119 defines the use of these key words to help\
    \ make the\n   intent of standards track documents as clear as possible.  While\
    \ this\n   document uses these keywords, this document is not a standards track\n\
    \   document.\n"
- title: 2.1.  Frequently Used Acronyms
  contents:
  - "2.1.  Frequently Used Acronyms\n   DA   Destination Address\n   DS   DiffServ\n\
    \   DSCP DiffServ Code Point\n   DUT  Device Under Test\n   IP   Internet Protocol\n\
    \   PHB  Per Hop Behavior\n   SA   Source Address\n   SUT  System Under Test\n"
- title: 3.  Term Definitions
  contents:
  - '3.  Term Definitions

    '
- title: 3.1.  Configuration Terms
  contents:
  - '3.1.  Configuration Terms

    '
- title: 3.1.1.  Classification
  contents:
  - "3.1.1.  Classification\n   Definition:\n      Selection of packets according\
    \ to defined rules.\n   Discussion:\n      Classification determines the per-hop\
    \ behaviors and traffic\n      conditioning functions, such as shaping and dropping,\
    \ that are to\n      be applied to the packet.\n      Classification of packets\
    \ can be based on the DS field or IP\n      Precedence in the packet header. \
    \ Classification can be based on\n      other IP header fields, such as IP Source\
    \ Address (SA),\n      Destination Address (DA), and protocol, or on fields in\
    \ the packet\n      payload, such as port number.  Classification can also be\
    \ based on\n      ingress interface.  It is possible to base classification on\n\
    \      Multi-Field (MF) criteria such as IP source and destination\n      addresses,\
    \ protocol, and port number.  For further discussion of\n      packet classification\
    \ and its network applications, see [Bl98].\n   Measurement units:\n      n/a\n\
    \   See Also:\n      None\n"
- title: 3.1.2.  Codepoint Set
  contents:
  - "3.1.2.  Codepoint Set\n   Definition:\n      The set of all DS Code-points or\
    \ IP precedence values used during\n      the test duration.\n   Discussion:\n\
    \      Describes all the code-point markings associated with packets that\n  \
    \    are input to the DUT/SUT.  For each entry in the codepoint set,\n      there\
    \ are associated vectors describing the rate of traffic,\n      delay, loss, or\
    \ jitter containing that particular DSCP or IP\n      precedence value.\n    \
    \  The treatment that a packet belonging to a particular code-point\n      gets\
    \ is subject to the DUT classifying packets to map to the\n      correct PHB.\
    \  Moreover, the forwarding treatment in general is\n      also dependent on the\
    \ complete set of offered vectors.\n   Measurement Units:\n      n/a\n   See Also:\n\
    \      None\n"
- title: 3.1.3.  Forwarding Congestion
  contents:
  - "3.1.3.  Forwarding Congestion\n   Definition:\n      A condition in which one\
    \ or more egress interfaces are offered\n      more packets than are forwarded.\n\
    \   Discussion:\n      This condition is a superset of the overload definition\
    \ [Ma98].\n      Overload [Ma98] deals with overloading input and output interfaces\n\
    \      beyond the maximum transmission allowed by the medium.  Forwarding\n  \
    \    congestion does not assume ingress interface overload as the only\n     \
    \ source of overload on output interfaces.\n      Another difference between Forwarding\
    \ Congestion and overload\n      occurs when the SUT comprises multiple elements,\
    \ in that\n      Forwarding Congestion may occur at multiple points.  Consider\
    \ an\n      SUT comprising multiple edge devices exchanging traffic with a\n \
    \     single core device.  Depending on traffic patterns, the edge\n      devices\
    \ may induce Forwarding Congestion on multiple egress\n      interfaces on the\
    \ core device.\n      Throughput [Br91] defines the lower boundary of Forwarding\n\
    \      Congestion.  Throughput is the maximum offered rate with no\n      Forwarding\
    \ Congestion.  At offered rates above throughput, the\n      DUT/SUT is considered\
    \ to be in a state of Forwarding Congestion.\n      Packet Loss, not increased\
    \ Forwarding Delay, is the external\n      observable metric used to indicate\
    \ the condition of Forwarding\n      Congestion.  Packet Loss is a deterministic\
    \ indicator of\n      Forwarding Congestion.  The condition of increased Forwarding\n\
    \      Delay without Packet Loss is an indicator of Forwarding Congestion\n  \
    \    known as Incipient Congestion.  Incipient Congestion is a non-\n      deterministic\
    \ indicator of Forwarding Congestion [Fl93].  As\n      stated in [Ec98], RED\
    \ [Br98] detects incipient congestion before\n      the buffer overflows, but\
    \ the current Internet environment is\n      limited to packet loss as the mechanism\
    \ for indicating congestion\n      to the end-nodes.  [Ra99] implies that it is\
    \ impractical to build\n      a black-box test to observe Incipient Congestion.\
    \  [Ra99] instead\n      introduces Explicit Congestion Notification (ECN) as\
    \ a\n      deterministic Black-Box method for observing Incipient Congestion.\n\
    \      [Ra99] is an Experimental RFC with limited deployment, so ECN is\n    \
    \  not used for this particular methodology.  For the purpose of\n      \"black-box\"\
    \ testing a DUT/SUT, this methodology uses Packet Loss\n      as the indicator\
    \ of Forwarding Congestion.\n      Ingress observations alone are not sufficient\
    \ to cover all cases\n      in which Forwarding Congestion may occur.  A device\
    \ with an\n      infinite amount of memory could buffer an infinite number of\n\
    \      packets and eventually forward all of them.  However, these\n      packets\
    \ may or may not be forwarded during the test duration.\n      Congestion Collapse\
    \ [Na84] is defined as the state in which\n      buffers are full and all arriving\
    \ packets MUST be dropped across\n      the network.  Even though ingress interfaces\
    \ accept all packets\n      without loss, Forwarding Congestion is present in\
    \ this\n      hypothetical device.\n      The definition presented here explicitly\
    \ defines Forwarding\n      Congestion as an event observable on egress interfaces.\n\
    \      Regardless of internal architecture, any device exhibiting Packet\n   \
    \   Loss on one or more egress interfaces is experiencing Forwarding\n      Congestion.\n\
    \   Measurement units:\n      None\n   See Also:\n      Gateway Congestion Control\
    \ Survey [Ma91]\n"
- title: 3.1.4.  Congestion Management
  contents:
  - "3.1.4.  Congestion Management\n   Definition:\n      An implementation of one\
    \ or more per-hop behaviors to avoid or\n      minimize the condition of congestion.\n\
    \   Discussion:\n      Congestion management may seek either to control congestion\
    \ or\n      avoid it altogether through Classification.\n      Congestion avoidance\
    \ mechanisms seek to prevent congestion before\n      it actually occurs.\n  \
    \    Congestion control mechanisms give one or more flows (with a\n      discrete\
    \ IP Precedence or DSCP value) preferential treatment over\n      other classes\
    \ during periods of congestion.\n   Measurement units:\n      n/a\n   See Also:\n\
    \      Classification\n"
- title: 3.1.5.  Flow
  contents:
  - "3.1.5.  Flow\n   Definition:\n      A flow is one or more packets sharing a common\
    \ intended pair of\n      ingress and egress interfaces.\n   Discussion:\n   \
    \   Packets are grouped by the ingress and egress interfaces they use\n      on\
    \ a given DUT/SUT.\n      A flow can contain multiple source IP addresses and/or\
    \ destination\n      IP addresses.  All packets in a flow MUST enter on the same\n\
    \      ingress interface and exit on the same egress interface and have\n    \
    \  some common network layer content.\n      Microflows [Ni98] are a subset of\
    \ flows.  As defined in [Ni98],\n      microflows require application-to-application\
    \ measurement.  In\n      contrast, flows use lower-layer classification criteria.\
    \  Since\n      this document focuses on network-layer classification criteria,\
    \ it\n      concentrates here on the use of network-layer identifiers in\n   \
    \   describing a flow.  Flow identifiers also may reside at the data-\n      link,\
    \ transport, or application layers of the OSI model.  However,\n      identifiers\
    \ other than those at the network layer are out of scope\n      for this document.\n\
    \      A flow may contain a single code point/IP precedence value or may\n   \
    \   contain multiple values destined for a single egress interface.\n      This\
    \ is determined by the test methodology.\n   Measurement units:\n      n/a\n \
    \  See Also:\n      Microflow [Ni98]\n      Streams\n"
- title: 3.2.  Measurement Terms
  contents:
  - '3.2.  Measurement Terms

    '
- title: 3.2.1.  Forwarding Capacity
  contents:
  - "3.2.1.  Forwarding Capacity\n   Definition:\n      The number of packets per\
    \ second that a device can be observed to\n      transmit successfully to the\
    \ correct egress interface in response\n      to a specified offered load while\
    \ the device drops none of the\n      offered packets.\n   Discussion:\n     \
    \ Forwarding Capacity measures the packet rate at the egress\n      interface(s)\
    \ of the DUT/SUT.  In contrast, throughput (as defined\n      in RFC 1242) measures\
    \ the packet rate at the ingress interface(s)\n      of the DUT/SUT.\n      Ingress-based\
    \ measurements do not account for queuing of the\n      DUT/SUT.  Throughput rates\
    \ can be higher than the Forwarding\n      Capacity because of queueing.  The\
    \ difference is dependent upon\n      test duration, packet rate, and queue size.\
    \  Forwarding Capacity,\n      as an egress measurement, does take queuing into\
    \ account.\n      Understanding Forwarding Capacity is a necessary precursor to\
    \ any\n      measurement involving Traffic Control Mechanisms.  The\n      accompanying\
    \ methodology document MUST take into consideration\n      Forwarding Capacity\
    \ when determining the expected forwarding\n      vectors.  When the sum of the\
    \ expected forwarding vectors on an\n      interface exceeds the Forwarding Capacity,\
    \ the Forwarding Capacity\n      will govern the forwarding rate.\n      This\
    \ measurement differs from forwarding rate at maximum offered\n      load (FRMOL)\
    \ [Ma98] in that the Forwarding Capacity requires zero\n      loss.\n   Measurement\
    \ units:\n      N-octet packets per second\n   See Also:\n      Throughput [Br91]\n\
    \      Forwarding Rate at Maximum Offered Load [Ma98]\n"
- title: 3.2.2.  Conforming Packet
  contents:
  - "3.2.2.  Conforming Packet\n   Definition:\n      Packets that lie within specific\
    \ rate, delay, or jitter bounds.\n   Discussion:\n      A DUT/SUT may be configured\
    \ to allow a given traffic class to\n      consume a given amount of bandwidth,\
    \ or to fall within predefined\n      delay or jitter boundaries.  All packets\
    \ that lie within specified\n      bounds are then said to be conforming, whereas\
    \ those outside the\n      bounds are nonconforming.\n   Measurement units:\n\
    \      n/a\n   See Also:\n      Expected Vector\n      Forwarding Vector\n   \
    \   Offered Vector\n      Nonconforming\n"
- title: 3.2.3.  Nonconforming Packet
  contents:
  - "3.2.3.  Nonconforming Packet\n   Definition:\n      Packets that do not lie within\
    \ specific rate, delay, or jitter\n      bounds.\n   Discussion:\n      A DUT/SUT\
    \ may be configured to allow a given traffic class to\n      consume a given amount\
    \ of bandwidth, or to fall within predefined\n      delay or jitter boundaries.\
    \  All packets that do not lie within\n      these bounds are then said to be\
    \ nonconforming.\n   Measurement units:\n      n/a\n   See Also:\n      Expected\
    \ Vector\n      Forwarding Vector\n      Offered Vector\n      Conforming\n"
- title: 3.2.4.  Forwarding Delay
  contents:
  - "3.2.4.  Forwarding Delay\n   Definition:\n      The time interval starting when\
    \ the last bit of the input IP\n      packet is offered to the input port of the\
    \ DUT/SUT and ending when\n      the last bit of the output IP packet is received\
    \ from the output\n      port of the DUT/SUT.\n   Discussion:\n      The delay\
    \ time interval MUST be externally observed.  The delay\n      measurement MUST\
    \ NOT include delays added by test bed components\n      other than the DUT/SUT,\
    \ such as propagation time introduced by\n      cabling or non-zero delay added\
    \ by the test instrument.\n      Forwarding Delay differs from latency [Br91]\
    \ and one-way delay\n      [Al99] in several key regards:\n      1. Latency [Br91]\
    \ assumes knowledge of whether the DUT/SUT uses\n         \"store and forward\"\
    \ or \"bit forwarding\" technology.  Forwarding\n         Delay is the same metric,\
    \ measured the same way, regardless of\n         the architecture of the DUT/SUT.\n\
    \      2. Forwarding Delay is a last-in, last-out (LILO) measurement,\n      \
    \   unlike the last-in, first-out method [Br91] or the first-in,\n         last-out\
    \ method [Al99].\n         The LILO method most closely simulates the way a network-layer\n\
    \         device actually processes an IP datagram.  IP datagrams are not\n  \
    \       passed up and down the stack unless they are complete, and\n         processing\
    \ begins only once the last bit of the IP datagram has\n         been received.\n\
    \         Further, the LILO method has an additive property, where the\n     \
    \    sum of the parts MUST equal the whole.  This is a key\n         difference\
    \ from [Br91] and [Al99].  For example, the delay\n         added by two DUTs\
    \ MUST equal the sum of the delay of the DUTs.\n         This may or may not be\
    \ the case with [Br91] and [Al99].\n      3. Forwarding Delay measures the IP\
    \ datagram only, unlike [Br91],\n         which also includes link-layer overhead.\n\
    \         A metric focused exclusively on the Internet protocol relieves\n   \
    \      the tester from specifying the start/end for every link-layer\n       \
    \  protocol that IP runs on.  This avoids the need to determine\n         whether\
    \ the start/stop delimiters are included.  It also allows\n         the use of\
    \ heterogeneous link-layer protocols in a test.\n      4. Forwarding Delay can\
    \ be measured at any offered load, whereas\n         the latency methodology [Br99]\
    \ recommends measurement at, and\n         only at, the throughput level.  Comparing\
    \ the Forwarding Delay\n         below the throughput to Forwarding Delay above\
    \ the Forwarding\n         Capacity will give insight to the traffic control mechanisms.\n\
    \         For example, non-congested delay may be measured with an\n         offered\
    \ load that does not exceed the Forwarding Capacity,\n         while congested\
    \ delay may involve an offered load that exceeds\n         the Forwarding Capacity.\n\
    \         Note: Forwarding Delay SHOULD NOT be used as an absolute\n         indicator\
    \ of DUT/SUT Forwarding Congestion.  While Forwarding\n         Delay may rise\
    \ when offered load nears or exceeds the\n         Forwarding Capacity, there\
    \ is no universal point at which\n         Forwarding Delay can be said to indicate\
    \ the presence or\n         absence of Forwarding Congestion.\n   Measurement\
    \ units:\n      milliseconds\n   See Also:\n      Latency [Br91]\n      Latency\
    \ [Al99]\n      One-way Delay [Br99]\n"
- title: 3.2.5.  Jitter
  contents:
  - "3.2.5.  Jitter\n   Definition:\n      The absolute value of the difference between\
    \ the Forwarding Delay\n      of two consecutive received packets belonging to\
    \ the same stream.\n   Discussion:\n      The Forwarding Delay fluctuation between\
    \ two consecutive received\n      packets in a stream is reported as the jitter.\
    \  Jitter can be\n      expressed as |D(i) - D(i-1)|, where D equals the Forwarding\
    \ Delay\n      and i is the order the packets were received.\n      Under loss,\
    \ jitter can be measured between non-consecutive test\n      sequence numbers.\
    \  When IP Traffic Control Mechanisms are dropping\n      packets, fluctuating\
    \ Forwarding Delay may be observed.  Jitter\n      MUST be able to benchmark the\
    \ delay variation independently of\n      packet loss.\n      Jitter is related\
    \ to the IPDV [De02] (IP Delay Variation) by\n      taking the absolute value\
    \ of the ipdv.  The two metrics will\n      produce different mean values.  Mean\
    \ Jitter will produce a\n      positive value, where the mean ipdv is typically\
    \ zero.  Also, IPDV\n      is undefined when one packet from a pair is lost.\n\
    \   Measurement units:\n      milliseconds\n   See Also:\n      Forwarding Delay\n\
    \      Jitter variation [Ja99]\n      ipdv [De02]\n      interarrival jitter [Sc96]\n"
- title: 3.2.6.  Undifferentiated Response
  contents:
  - "3.2.6.  Undifferentiated Response\n   Definition:\n      The vector(s) obtained\
    \ when mechanisms used to support diff-serv\n      or IP precedence are disabled.\n\
    \   Discussion:\n      Enabling diff-serv or IP precedence mechanisms may impose\n\
    \      additional processing overhead for packets.  This overhead may\n      degrade\
    \ performance even when traffic belonging to only one class,\n      the best-effort\
    \ class, is offered to the device.  Measurements\n      with \"undifferentiated\
    \ response\" SHOULD be made to establish a\n      baseline.\n      The vector(s)\
    \ obtained with DSCP or IP precedence enabled can be\n      compared to the undifferentiated\
    \ response to determine the effect\n      of differentiating traffic.\n   Measurement\
    \ units:\n      n/a\n"
- title: 3.3.  Sequence Tracking
  contents:
  - '3.3.  Sequence Tracking

    '
- title: 3.3.1.  Test Sequence Number
  contents:
  - "3.3.1.  Test Sequence Number\n   Definition:\n      A field in the IP payload\
    \ portion of the packet that is used to\n      verify the order of the packets\
    \ on the egress of the DUT/SUT.\n   Discussion:\n      The traffic generator sets\
    \ the test sequence number value.  Upon\n      receipt of the packet,  the traffic\
    \ receiver checks the value.\n      The traffic generator changes the value on\
    \ each packet transmitted\n      based on an algorithm agreed to by the traffic\
    \ receiver.\n      The traffic receiver keeps track of the sequence numbers on\
    \ a\n      per-stream basis.  In addition to the number of received packets,\n\
    \      the traffic receiver may also report the number of in-sequence\n      packets,\
    \ the number of out-of-sequence packets, the number of\n      duplicate packets,\
    \ and the number of reordered packets.  The\n      RECOMMENDED algorithm to change\
    \ the sequence number on sequential\n      packets is an incrementing value.\n\
    \   Measurement units:\n      n/a\n   See Also:\n      Stream\n"
- title: 3.3.2.  Stream
  contents:
  - "3.3.2.  Stream\n   Definition:\n      A group of packets tracked as a single\
    \ entity by the traffic\n      receiver.  A stream MUST share common content,\
    \ such as type (IP,\n      UDP), IP SA/DA, packet size, or payload.\n   Discussion:\n\
    \      Streams are tracked by test sequence number or \"unique signature\n   \
    \   field\" [Ma00].  Streams define how individual packet statistics\n      are\
    \ grouped together to form an intelligible summary.\n      Common stream groupings\
    \ would be by egress interface, destination\n      address, source address, DSCP,\
    \ or IP precedence.  A stream using\n      test sequence numbers can track the\
    \ ordering of packets as they\n      traverse the DUT/SUT.\n      Streams are\
    \ not restricted to a pair of source and destination\n      interfaces as long\
    \ as all packets are tracked as a single entity.\n      A multicast stream can\
    \ be forwarded to multiple destination\n      interfaces.\n   Measurement units:\n\
    \      n/a\n   See Also:\n      Flow\n      Microflow [Ni98]\n      Test sequence\
    \ number\n"
- title: 3.3.3.  In-Sequence Packet
  contents:
  - "3.3.3.  In-Sequence Packet\n   Definition:\n      A received packet with the\
    \ expected Test Sequence number.\n   Discussion:\n      In-sequence is done on\
    \ a stream level.  As packets are received on\n      a stream, each packet's Test\
    \ Sequence number is compared with the\n      previous packet.  Only packets that\
    \ match the expected Test\n      Sequence number are considered in-sequence.\n\
    \      Packets that do not match the expected Test Sequence number are\n     \
    \ counted as \"not in-sequence\" or out-of-sequence.  Every packet\n      that\
    \ is received is either in-sequence or out-of-sequence.\n      Subtracting the\
    \ in-sequence from the received packets (for that\n      stream), the tester can\
    \ derive the out-of-sequence count.\n      Two types of events will prevent the\
    \ in-sequence from\n      incrementing: packet loss and reordered packets.\n \
    \  Measurement units:\n      Packet count\n   See Also:\n      Stream\n      Test\
    \ Sequence number\n"
- title: 3.3.4.  Out-of-Order Packet
  contents:
  - "3.3.4.  Out-of-Order Packet\n   Definition:\n      A received packet with a sequence\
    \ number less than the sequence\n      number of any previously arriving packet.\n\
    \   Discussion:\n      As a stream of packets enters a DUT/SUT, they include a\
    \ Stream\n      Test Sequence number indicating the order the packets were sent\
    \ to\n      the DUT/SUT.  On exiting the DUT/SUT, these packets may arrive in\n\
    \      a different order.  Each packet that was reordered is counted as\n    \
    \  an Out-of-Order Packet.\n      Certain streaming protocols (such as TCP) require\
    \ the packets to\n      be in a certain order.  Packets outside this are dropped\
    \ by the\n      streaming protocols even though they were properly received by\
    \ the\n      IP layer.  The type of reordering tolerated by a streaming\n    \
    \  protocol varies from protocol to protocol, and also by\n      implementation.\n\
    \      Packet loss does not affect the Out-of-Order Packet count.  The\n     \
    \ Out-of-Order Packet count is impacted only by packets that were\n      not received\
    \ in the order that they were transmitted.\n   Measurement units:\n      packets\n\
    \   See Also:\n      Stream\n      Test Sequence number\n      Packet Reordering\
    \ Metric for IPPM [Mo03]\n"
- title: 3.3.5.  Duplicate Packet
  contents:
  - "3.3.5.  Duplicate Packet\n   Definition:\n      A received packet with a Test\
    \ Sequence number matching a\n      previously received packet.\n   Discussion:\n\
    \      A Duplicate Packet is a packet that the DUT/SUT has successfully\n    \
    \  transmitted out an egress interface more than once.  The egress\n      interface\
    \ has previously forwarded this packet.\n      A Duplicate Packet SHOULD be a\
    \ bit-for-bit copy of an already\n      transmitted packet (including Test Sequence\
    \ number).  If the\n      Duplicate Packet traversed different paths through the\
    \ DUT/SUT,\n      some fields (such as TTL or checksum) may have changed.\n  \
    \    A multicast packet is not a Duplicate Packet by definition.  For a\n    \
    \  given IP multicast group, a DUT/SUT SHOULD forward a packet once\n      on\
    \ a given egress interface provided the path to one or more\n      multicast receivers\
    \ is through that interface.  Several egress\n      interfaces will transmit the\
    \ same packet, but only once per\n      interface.\n      To detect a Duplicate\
    \ Packet, each packet offered to the DUT/SUT\n      MUST contain a unique packet-by-packet\
    \ identifier.\n   Measurement units:\n      Packet count\n   See Also:\n     \
    \ Stream\n      Test Sequence number\n"
- title: 3.4.  Vectors
  contents:
  - "3.4.  Vectors\n   A vector is a group of packets all matching a specific\n  \
    \ classification criteria, such as DSCP.  Vectors are\n   identified by the classification\
    \ criteria and benchmarking\n   metrics, such as a Forwarding Capacity, Forwarding\
    \ Delay,\n   or Jitter.\n"
- title: 3.4.1.  Intended Vector
  contents:
  - "3.4.1.  Intended Vector\n   Definition:\n      A description of the configuration\
    \ on an external source\n      for the attempted rate of a stream transmitted\
    \ to a DUT/SUT\n      matching specific classification rules.\n   Discussion:\n\
    \      The Intended Vector of a stream influences the benchmark\n      measurements.\
    \  The Intended Vector is described by the\n      classification criteria and\
    \ attempted rate.\n   Measurement Units:\n      N-bytes packets per second\n \
    \  See Also:\n      Stream\n      Offered Vector\n      Forwarding Vector\n"
- title: 3.4.2.  Offered Vector
  contents:
  - "3.4.2.  Offered Vector\n   Definition:\n      A description for the attempted\
    \ rate of a stream offered to\n      a DUT/SUT matching specific classification\
    \ rules.\n   Discussion:\n      The Offered Vector of a stream influences the\
    \ benchmark\n      measurements.  The Offered Vector is described by the\n   \
    \   classification criteria and offered rate.\n   Measurement Units:\n      N-bytes\
    \ packets per second\n   See Also:\n      Stream\n      Intended Vector\n    \
    \  Forwarding Vector\n"
- title: 3.4.3.  Expected Vectors
  contents:
  - '3.4.3.  Expected Vectors

    '
- title: 3.4.3.1.  Expected Forwarding Vector
  contents:
  - "3.4.3.1.  Expected Forwarding Vector\n   Definition:\n      A description of\
    \ the expected output rate of packets matching a\n      specific classification,\
    \ such as DSCP.\n   Discussion:\n      The value of the Expected Forwarding Vector\
    \ is dependent on the\n      set of offered vectors and Classification configuration\
    \ on the\n      DUT/SUT.  The DUT is configured in a certain way so that\n   \
    \   classification occurs when a traffic mix consisting of multiple\n      streams\
    \ is applied.\n      This term captures the expected forwarding behavior from\
    \ the DUT\n      receiving multiple Offered Vectors.  The actual algorithm or\n\
    \      mechanism the DUT uses to achieve service differentiation is\n      implementation\
    \ specific and is not important when describing the\n      Expected Forwarding\
    \ Vector.\n   Measurement units:\n      N-octet packets per second\n   See Also:\n\
    \      Classification\n      Stream\n      Intended Vector\n      Offered Vector\n"
- title: 3.4.3.2.  Expected Loss Vector
  contents:
  - "3.4.3.2.  Expected Loss Vector\n   Definition:\n      A description of the percentage\
    \ of packets having a specific\n      classification that should not be forwarded.\n\
    \   Discussion:\n      The value of the Expected Loss Vector is dependent on the\
    \ set of\n      offered vectors and Classification configuration on the DUT/SUT.\n\
    \      The DUT is configured in a certain way so that classification\n      occurs\
    \ when a traffic mix consisting of multiple streams is\n      applied.\n     \
    \ This term captures the expected forwarding behavior from the DUT\n      receiving\
    \ multiple Offered Vectors.  The actual algorithm or\n      mechanism the DUT\
    \ uses to achieve service differentiation is\n      implementation specific and\
    \ is not important when describing the\n      Expected Loss Vector.\n   Measurement\
    \ Units:\n      Percentage of intended packets expected to be dropped.\n   See\
    \ Also:\n      Classification\n      Stream\n      Intended Vector\n      Offered\
    \ Vector\n      One-way Packet Loss Metric [Ka99]\n"
- title: 3.4.3.3.  Expected Sequence Vector
  contents:
  - "3.4.3.3.  Expected Sequence Vector\n   Definition:\n      A description of the\
    \ expected in-sequence packets matching a\n      specific classification, such\
    \ as DSCP.\n   Discussion:\n      The value of the Expected Sequence Vector is\
    \ dependent on the set\n      of offered vectors and Classification configuration\
    \ on the\n      DUT/SUT.  The DUT is configured in a certain way so that\n   \
    \   classification occurs when a traffic mix consisting of multiple\n      streams\
    \ is applied.\n      This term captures the expected forwarding behavior from\
    \ the DUT\n      receiving multiple Offered Vectors.  The actual algorithm or\n\
    \      mechanism the DUT uses to achieve service differentiation is\n      implementation\
    \ specific and is not important when describing the\n      Expected Sequence Vector.\n\
    \   Measurement Units:\n      N-octet packets per second\n   See Also:\n     \
    \ Classification\n      Stream\n      In-Sequence Packet\n      Intended Vector\n\
    \      Offered Vector\n"
- title: 3.4.3.4.  Expected Delay Vector
  contents:
  - "3.4.3.4.  Expected Delay Vector\n   Definition:\n      A description of the expected\
    \ instantaneous Forwarding Delay for\n      packets matching a specific classification,\
    \ such as DSCP.\n   Discussion:\n      The value of the Expected Delay Vector\
    \ is dependent on the set of\n      offered vectors and Classification configuration\
    \ on the DUT/SUT.\n      The DUT is configured in a certain way so that classification\n\
    \      occurs when a traffic mix consisting of multiple streams is\n      applied.\n\
    \      This term captures the expected forwarding behavior from the DUT\n    \
    \  receiving multiple Offered Vectors.  The actual algorithm or\n      mechanism\
    \ the DUT uses to achieve service differentiation is\n      implementation specific\
    \ and is not important when describing the\n      Expected Delay Vector.\n   Measurement\
    \ units:\n      milliseconds\n   See Also:\n      Classification\n      Stream\n\
    \      Forwarding Delay\n      Intended Vector\n      Offered Vector\n"
- title: 3.4.3.5.  Expected Average Delay Vector
  contents:
  - "3.4.3.5.  Expected Average Delay Vector\n   Definition:\n      A description\
    \ of the expected average Forwarding Delay for packets\n      matching a specific\
    \ classification, such as DSCP.\n   Discussion:\n      The value of the Expected\
    \ Average Delay Vector is dependent on the\n      set of offered vectors and Classification\
    \ configuration on the\n      DUT/SUT.  The DUT is configured in a certain way\
    \ so that\n      classification occurs when a traffic mix consisting of multiple\n\
    \      streams is applied.\n      This term captures the expected forwarding behavior\
    \ from the DUT\n      receiving multiple Offered Vectors.  The actual algorithm\
    \ or\n      mechanism the DUT uses to achieve service differentiation is\n   \
    \   implementation specific and is not important when describing the\n      Expected\
    \ Average Delay Vector.\n   Measurement units:\n      milliseconds\n   See Also:\n\
    \      Classification\n      Stream\n      Forwarding Delay\n      Intended Vector\n\
    \      Offered Vector\n      Expected Delay Vector\n"
- title: 3.4.3.6.  Expected Maximum Delay Vector
  contents:
  - "3.4.3.6.  Expected Maximum Delay Vector\n   Definition:\n      A description\
    \ of the expected maximum Forwarding Delay for packets\n      matching a specific\
    \ classification, such as DSCP.\n   Discussion:\n      The value of the Expected\
    \ Maximum Delay Vector is dependent on the\n      set of offered vectors and Classification\
    \ configuration on the\n      DUT/SUT.  The DUT is configured in a certain way\
    \ so that\n      classification occurs when a traffic mix consisting of multiple\n\
    \      streams is applied.\n      This term captures the expected forwarding behavior\
    \ from the DUT\n      receiving multiple Offered Vectors.  The actual algorithm\
    \ or\n      mechanism the DUT uses to achieve service differentiation is\n   \
    \   implementation specific and is not important when describing the\n      Expected\
    \ Maximum Delay Vector.\n   Measurement units:\n      milliseconds\n   See Also:\n\
    \      Classification\n      Stream\n      Forwarding Delay\n      Intended Vector\n\
    \      Offered Vector\n      Expected Delay Vector\n"
- title: 3.4.3.7.  Expected Minimum Delay Vector
  contents:
  - "3.4.3.7.  Expected Minimum Delay Vector\n   Definition:\n      A description\
    \ of the expected minimum Forwarding Delay for packets\n      matching a specific\
    \ classification, such as DSCP.\n   Discussion:\n      The value of the Expected\
    \ Minimum Delay Vector is dependent on the\n      set of offered vectors and Classification\
    \ configuration on the\n      DUT/SUT.  The DUT is configured in a certain way\
    \ so that\n      classification occurs when a traffic mix consisting of multiple\n\
    \      streams is applied.\n      This term captures the expected forwarding behavior\
    \ from the DUT\n      receiving multiple Offered Vectors.  The actual algorithm\
    \ or\n      mechanism the DUT uses to achieve service differentiation is\n   \
    \   implementation specific and is not important when describing the\n      Expected\
    \ Minimum Delay Vector.\n   Measurement units:\n      milliseconds\n   See Also:\n\
    \      Classification\n      Stream\n      Forwarding Delay\n      Intended Vector\n\
    \      Offered Vector\n      Expected Delay Vector\n"
- title: 3.4.3.8.  Expected Instantaneous Jitter Vector
  contents:
  - "3.4.3.8.  Expected Instantaneous Jitter Vector\n   Definition:\n      A description\
    \ of the expected Instantaneous Jitter between two\n      consecutive packets\
    \ arrival times matching a specific\n      classification, such as DSCP.\n   Discussion:\n\
    \      Instantaneous Jitter is the absolute value of the difference\n      between\
    \ the Forwarding Delay measurement of two packets belonging\n      to the same\
    \ stream.\n      The Forwarding Delay fluctuation between two consecutive packets\n\
    \      in a stream is reported as the \"Instantaneous Jitter\".\n      Instantaneous\
    \ Jitter can be expressed as |D(i) - D(i-1)|, where D\n      equals the Forwarding\
    \ Delay and i is the test sequence number.\n      Packets lost are not counted\
    \ in the measurement.\n      The Forwarding Vector may contain several Jitter\
    \ Vectors.  For n\n      packets received in a Forwarding Vector, there is a total\
    \ of (n-1)\n      Instantaneous Jitter Vectors.\n   Measurement units:\n     \
    \ milliseconds\n   See Also:\n      Classification\n      Stream\n      Jitter\n\
    \      Intended Vector\n      Offered Vector\n"
- title: 3.4.3.9.  Expected Average Jitter Vector
  contents:
  - "3.4.3.9.  Expected Average Jitter Vector\n   Definition:\n      A description\
    \ of the expected average jitter for packets arriving\n      in a stream matching\
    \ a specific classification, such as DSCP.\n   Discussion:\n      Average Jitter\
    \ Vector is the average of all the Instantaneous\n      Jitter Vectors measured\
    \ during the test duration for the same\n      stream.\n      The value of the\
    \ Expected Average Jitter Vector is dependent on\n      the set of offered vectors\
    \ and Classification configuration on the\n      DUT/SUT.  The DUT is configured\
    \ in a certain way so that\n      classification occurs when a traffic mix consisting\
    \ of multiple\n      streams is applied.\n      This term captures the expected\
    \ forwarding behavior from the DUT\n      receiving multiple Offered Vectors.\
    \  The actual algorithm or\n      mechanism the DUT uses to achieve service differentiation\
    \ is\n      implementation specific and is not important when describing the\n\
    \      Expected Average Jitter Vector.\n   Measurement units:\n      milliseconds\n\
    \   See Also:\n      Classification\n      Stream\n      Jitter\n      Intended\
    \ Vector\n      Offered Vector\n      Expected Instantaneous Jitter Vector\n"
- title: 3.4.3.10.  Expected Peak-to-peak Jitter Vector
  contents:
  - "3.4.3.10.  Expected Peak-to-peak Jitter Vector\n   Definition:\n      A description\
    \ of the expected maximum variation in the Forwarding\n      Delay of packet arrival\
    \ times for packets arriving in a stream\n      matching a specific classification,\
    \ such as DSCP.\n   Discussion:\n      Peak-to-peak Jitter Vector is the maximum\
    \ Forwarding Delay minus\n      the minimum Forwarding Delay of the packets (in\
    \ a vector)\n      forwarded by the DUT/SUT.\n      Peak-to-peak Jitter is not\
    \ derived from the Instantaneous Jitter\n      Vector.  Peak-to-peak Jitter is\
    \ based upon all the packets during\n      the test duration, not just two consecutive\
    \ packets.\n      The value of the Expected Peak-to-peak Jitter Vector is dependent\n\
    \      on the set of offered vectors and Classification configuration on\n   \
    \   the DUT/SUT.  The DUT is configured in a certain way so that\n      classification\
    \ occurs when a traffic mix consisting of multiple\n      streams is applied.\n\
    \      This term captures the expected forwarding behavior from the DUT\n    \
    \  receiving multiple Offered Vectors.  The actual algorithm or\n      mechanism\
    \ the DUT uses to achieve service differentiation is\n      implementation specific\
    \ and is not important when describing the\n      Expected Peak-to-peak Jitter\
    \ Vector.\n   Measurement units:\n      milliseconds\n   See Also:\n      Classification\n\
    \      Stream\n      Jitter\n      Intended Vector\n      Offered Vector\n   \
    \   Expected Instantaneous Jitter Vector\n      Expected Average Jitter Vector\n"
- title: 3.4.4.  Output Vectors
  contents:
  - '3.4.4.  Output Vectors

    '
- title: 3.4.4.1.  Forwarding Vector
  contents:
  - "3.4.4.1.  Forwarding Vector\n   Definition:\n      The number of packets per\
    \ second for a stream matching a specific\n      classification, such as DSCP,\
    \ that a DUT/SUT is measured to\n      forward to the correct destination interface\
    \ successfully in\n      response to an offered vector.\n   Discussion:\n    \
    \  Forwarding Vector is expressed as a combination of values: the\n      classification\
    \ rules AND the measured packets per second for the\n      stream matching the\
    \ classification rules.  Forwarding Vector is a\n      per-hop measurement.  The\
    \ DUT/SUT MAY remark the specific DSCP (or\n      IP precedence) value for a multi-hop\
    \ measurement.  The stream\n      remains the same.\n   Measurement units:\n \
    \     N-octet packets per second\n   See Also:\n      Classification\n      Stream\n\
    \      Forwarding Capacity\n      Intended Vector\n      Offered Vector\n    \
    \  Expected Vector\n"
- title: 3.4.4.2.  Loss Vector
  contents:
  - "3.4.4.2.  Loss Vector\n   Definition:\n      The percentage of packets per second\
    \ for a stream matching a\n      specific classification, such as DSCP, that a\
    \ DUT/SUT is measured\n      not to transmit to the correct destination interface\
    \ in response\n      to an offered vector.\n   Discussion:\n      Loss Vector\
    \ is expressed as a combination of values: the\n      classification rules AND\
    \ the measured percentage value of packet\n      loss.  Loss Vector is a per-hop\
    \ measurement.  The DUT/SUT MAY\n      remark the specific DSCP or IP precedence\
    \ value for a multi-hop\n      measurement.  The stream remains the same.\n  \
    \ Measurement Units:\n      Percentage of packets\n   See Also:\n      Classification\n\
    \      Stream\n      Intended Vector\n      Offered Vector\n      Expected Vector\n\
    \      One-way Packet Loss Metric [Ka99]\n"
- title: 3.4.4.3.  Sequence Vector
  contents:
  - "3.4.4.3.  Sequence Vector\n   Definition:\n      The number of packets per second\
    \ for all packets in a stream\n      matching a specific classification, such\
    \ as DSCP, that a DUT/SUT\n      is measured to transmit in sequence to the correct\
    \ destination\n      interface in response to an offered vector.\n   Discussion:\n\
    \      Sequence Vector is expressed as a combination of values: the\n      classification\
    \ rules AND the number of packets per second that are\n      in-sequence.\n  \
    \    Sequence Vector is a per-hop measurement.  The DUT/SUT MAY remark\n     \
    \ the specific DSCP or IP precedence value for a multi-hop\n      measurement.\
    \  The stream remains the same.\n   Measurement Units:\n      N-octet packets\
    \ per second\n   See Also:\n      Classification\n      Stream\n      In-sequence\
    \ Packet\n      Intended Vector\n      Offered Vector\n      Expected Vector\n"
- title: 3.4.4.4.  Instantaneous Delay Vector
  contents:
  - "3.4.4.4.  Instantaneous Delay Vector\n   Definition:\n      The instantaneous\
    \ Forwarding Delay for a packet in a stream\n      matching a specific classification,\
    \ such as DSCP, that a DUT/SUT\n      is measured to transmit to the correct destination\
    \ interface\n      successfully in response to an offered vector.\n   Discussion:\n\
    \      Instantaneous Delay Vector is expressed as a combination of\n      values:\
    \ the classification rules AND Forwarding Delay.  For every\n      packet received\
    \ in a Forwarding Vector, there is a corresponding\n      Instantaneous Delay\
    \ Vector.\n      Instantaneous Delay Vector is a per-hop measurement.  The DUT/SUT\n\
    \      MAY remark the specific DSCP or IP precedence value for a multi-\n    \
    \  hop measurement.  The stream remains the same.\n      Instantaneous Delay Vector\
    \ can be obtained at any offered load.\n      It is RECOMMENDED that this vector\
    \ be obtained at or below the\n      Forwarding Capacity in the absence of Forwarding\
    \ Congestion.  For\n      congested Forwarding Delay, run the offered load above\
    \ the\n      Forwarding Capacity.\n   Measurement Units:\n      milliseconds\n\
    \   See Also:\n      Classification\n      Stream\n      Forwarding Capacity\n\
    \      Forwarding Delay\n      Intended Vector\n      Offered Vector\n      Expected\
    \ Delay Vector\n"
- title: 3.4.4.5.  Average Delay Vector
  contents:
  - "3.4.4.5.  Average Delay Vector\n   Definition:\n      The average Forwarding\
    \ Delay for packets in a stream matching a\n      specific classification, such\
    \ as DSCP, that a DUT/SUT is measured\n      to transmit to the correct destination\
    \ interface successfully in\n      response to an offered vector.\n   Discussion:\n\
    \      Average Delay Vector is expressed as combination of values: the\n     \
    \ classification rules AND average Forwarding Delay.\n      The average Forwarding\
    \ Delay is computed by averaging all the\n      Instantaneous Delay Vectors for\
    \ a given stream.\n      Average Delay Vector is a per-hop measurement.  The DUT/SUT\
    \ MAY\n      remark the specific DSCP or IP precedence value for a multi-hop\n\
    \      measurement.  The stream remains the same.\n      Average Delay Vector\
    \ can be obtained at any offered load.  It is\n      recommended that the offered\
    \ load be at or below the Forwarding\n      Capacity in the absence of congestion.\
    \  For congested Forwarding\n      Delay, run the offered load above the Forwarding\
    \ Capacity.\n   Measurement Units:\n      milliseconds\n   See Also:\n      Classification\n\
    \      Stream\n      Forwarding Capacity\n      Forwarding Delay\n      Intended\
    \ Vector\n      Offered Vector\n      Expected Delay Vector\n      Instantaneous\
    \ Delay Vector\n"
- title: 3.4.4.6.  Maximum Delay Vector
  contents:
  - "3.4.4.6.  Maximum Delay Vector\n   Definition:\n      The maximum Forwarding\
    \ Delay for packets in a stream matching a\n      specific classification, such\
    \ as DSCP, that a DUT/SUT is measured\n      to transmit to the correct destination\
    \ interface successfully in\n      response to an offered vector.\n   Discussion:\n\
    \      Maximum Delay Vector is expressed as combination of values: the\n     \
    \ classification rules AND maximum Forwarding Delay.\n      The maximum Forwarding\
    \ Delay is computed by selecting the highest\n      value from the Instantaneous\
    \ Delay Vectors for a given stream.\n      Maximum Delay Vector is a per-hop measurement.\
    \  The DUT/SUT MAY\n      remark the specific DSCP or IP precedence value for\
    \ a multi-hop\n      measurement.  The stream remains the same.\n      Maximum\
    \ Delay Vector can be obtained at any offered load.  It is\n      recommended\
    \ that the offered load be at or below the Forwarding\n      Capacity in the absence\
    \ of congestion.  For congested Forwarding\n      Delay, run the offered load\
    \ above the Forwarding Capacity.\n   Measurement Units:\n      milliseconds\n\
    \   See Also:\n      Classification\n      Stream\n      Forwarding Capacity\n\
    \      Forwarding Delay\n      Intended Vector\n      Offered Vector\n      Expected\
    \ Delay Vector\n      Instantaneous Delay Vector\n"
- title: 3.4.4.7.  Minimum Delay Vector
  contents:
  - "3.4.4.7.  Minimum Delay Vector\n   Definition:\n      The minimum Forwarding\
    \ Delay for packets in a stream matching a\n      specific classification, such\
    \ as DSCP, that a DUT/SUT is measured\n      to transmit to the correct destination\
    \ interface successfully in\n      response to an offered vector.\n   Discussion:\n\
    \      Minimum Delay Vector is expressed as a combination of values: the\n   \
    \   classification rules AND minimum Forwarding Delay.  The minimum\n      Forwarding\
    \ Delay is computed by selecting the lowest value from\n      the Instantaneous\
    \ Delay Vectors for a given stream.\n      Minimum Delay Vector is a per-hop measurement.\
    \  The DUT/SUT MAY\n      remark the specific DSCP or IP precedence value for\
    \ a multi-hop\n      measurement.  The stream remains the same.\n      Minimum\
    \ Delay Vector can be obtained at any offered load.  It is\n      recommended\
    \ that the offered load be at or below the Forwarding\n      Capacity in the absence\
    \ of congestion.  For congested Forwarding\n      Delay, run the offered load\
    \ above the Forwarding Capacity.\n   Measurement Units:\n      milliseconds\n\
    \   See Also:\n      Classification\n      Stream\n      Forwarding Capacity\n\
    \      Forwarding Delay\n      Intended Vector\n      Offered Vector\n      Expected\
    \ Delay Vector\n"
- title: 3.4.4.8.  Instantaneous Jitter Vector
  contents:
  - "3.4.4.8.  Instantaneous Jitter Vector\n   Definition:\n      The jitter for two\
    \ consecutive packets in a stream matching a\n      specific classification, such\
    \ as DSCP, that a DUT/SUT is measured\n      to transmit to the correct destination\
    \ interface successfully in\n      response to an offered vector.\n   Discussion:\n\
    \      Instantaneous Jitter is the absolute value of the difference\n      between\
    \ the Forwarding Delay measurement of two packets belonging\n      to the same\
    \ stream.\n      The Instantaneous Jitter vector is expressed as a pair of numbers.\n\
    \      Both the specific DSCP (or IP precedence) value AND jitter value\n    \
    \  combine to make a vector.\n      The Forwarding Delay fluctuation between two\
    \ consecutive packets\n      in a stream is reported as the \"Instantaneous Jitter\"\
    .\n      Instantaneous Jitter Vector can be expressed as |D(i) - D(i-1)|,\n  \
    \    where D equals the Forwarding Delay and i is the test sequence\n      number.\
    \  Packets lost are not counted in the measurement.\n      The Instantaneous Jitter\
    \ Vector is a per-hop measurement.  The\n      DUT/SUT MAY remark the specific\
    \ DSCP or IP precedence value for a\n      multi-hop measurement.  The stream\
    \ remains the same.\n      There may be several Instantaneous Jitter Vectors for\
    \ a single\n      stream.  For n packets measured, there may be (n-1) Instantaneous\n\
    \      Jitter Vectors.\n   Measurement units:\n      milliseconds\n   See Also:\n\
    \      Classification\n      Stream\n      Forwarding Delay\n      Jitter\n  \
    \    Forwarding Vector\n      Expected Vectors\n"
- title: 3.4.4.9.  Average Jitter Vector
  contents:
  - "3.4.4.9.  Average Jitter Vector\n   Definition:\n      The average jitter for\
    \ packets in a stream matching a specific\n      classification, such as DSCP,\
    \ that a DUT/SUT is measured to\n      transmit to the correct destination interface\
    \ successfully in\n      response to an offered vector.\n   Discussion:\n    \
    \  Average jitter is calculated by the average of all the\n      Instantaneous\
    \ Jitter Vectors of the same stream measured during\n      the test duration.\
    \  Average Jitter Vector is expressed as a\n      combination of values:  the\
    \ classification rules AND average\n      Jitter.\n      Average Jitter Vector\
    \ is a per-hop measurement.  The DUT/SUT MAY\n      remark the specific DSCP or\
    \ IP precedence value for a multi-hop\n      measurement.  The stream remains\
    \ the same.\n   Measurement units:\n      milliseconds\n   See Also:\n      Classification\n\
    \      Stream\n      Jitter\n      Forwarding Vector\n      Expected Vector\n\
    \      Instantaneous Jitter Vector\n"
- title: 3.4.4.10.  Peak-to-peak Jitter Vector
  contents:
  - "3.4.4.10.  Peak-to-peak Jitter Vector\n   Definition:\n      The maximum possible\
    \ variation in the Forwarding Delay for packets\n      in a stream matching a\
    \ specific classification, such as DSCP, that\n      a DUT/SUT is measured to\
    \ transmit to the correct destination\n      interface successfully in response\
    \ to an offered vector.\n   Discussion:\n      Peak-to-peak Jitter Vector is calculated\
    \ by subtracting the\n      maximum Forwarding Delay from the minimum Forwarding\
    \ Delay of the\n      packets forwarded by the DUT/SUT.  Jitter vector is expressed\
    \ as a\n      combination of values:  the classification rules AND peak-to-peak\n\
    \      Jitter.\n      Peak-to-peak Jitter is not derived from the Instantaneous\
    \ Jitter\n      Vector.  Peak-to-peak Jitter is based upon all the packets during\n\
    \      the test duration, not just two consecutive packets.\n   Measurement units:\n\
    \      milliseconds\n   See Also:\n      Jitter\n      Forwarding Vector\n   \
    \   Stream\n      Expected Vectors\n      Instantaneous Jitter Vector\n      Average\
    \ Jitter Vector\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   Documents of this type do not directly affect\
    \ the security of the\n   Internet or of corporate networks as long as benchmarking\
    \ is not\n   performed on devices or systems connected to production networks.\n\
    \   Packets with unintended and/or unauthorized DSCP or IP precedence\n   values\
    \ may present security issues.  Determining the security\n   consequences of such\
    \ packets is out of scope for this document.\n"
- title: 5.  Acknowledgements
  contents:
  - "5.  Acknowledgements\n   The authors gratefully acknowledge the contributions\
    \ of the IETF's\n   Benchmarking Methodology Working Group members in reviewing\
    \ this\n   document.  The authors would like to express our thanks to David\n\
    \   Newman for his consistent and valuable assistance throughout the\n   development\
    \ of this document.  The authors would also like to thank\n   Al Morton and Kevin\
    \ Dubray for their ideas and support.\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [Br91] Bradner, S., \"Benchmarking terminology\
    \ for network\n          interconnection devices\", RFC 1242, July 1991.\n   [Br97]\
    \ Bradner, S., \"Key words for use in RFCs to Indicate\n          Requirement\
    \ Levels\", BCP 14, RFC 2119, March 1997.\n   [Br98] Braden, B., Clark, D., Crowcroft,\
    \ J., Davie, B., Deering, S.,\n          Estrin, D., Floyd, S., Jacobson, V.,\
    \ Minshall, G., Partridge,\n          C., Peterson, L., Ramakrishnan, K., Shenker,\
    \ S., Wroclawski,\n          J., and L. Zhang, \"Recommendations on Queue Management\
    \ and\n          Congestion Avoidance in the Internet\", RFC 2309, April 1998.\n\
    \   [Ma98] Mandeville, R., \"Benchmarking Terminology for LAN Switching\n    \
    \      Devices\", RFC 2285, February 1998.\n   [Ni98] Nichols, K., Blake, S.,\
    \ Baker, F., and D. Black, \"Definition\n          of the Differentiated Services\
    \ Field (DS Field) in the IPv4\n          and IPv6 Headers\", RFC 2474, December\
    \ 1998.\n   [St91] Steinberg, L., \"Techniques for managing asynchronously\n \
    \         generated alerts\", RFC 1224, May 1991.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [Al99] Almes, G., Kalidindi, S., and M. Zekauskas,\
    \ \"A One-way Delay\n          Metric for IPPM\", RFC 2679, September 1999.\n\
    \   [Bl98] Blake, S., Black, D., Carlson, M., Davies, E., Wang, Z., and\n    \
    \      W. Weiss, \"An Architecture for Differentiated Service\", RFC\n       \
    \   2475, December 1998.\n   [Br99] Bradner, S. and J. McQuaid, \"Benchmarking\
    \ Methodology for\n          Network Interconnect Devices\", RFC 2544, March 1999.\n\
    \   [De02] Demichelis, C. and P. Chimento, \"IP Packet Delay Variation\n     \
    \     Metric for IP Performance Metrics (IPPM)\", RFC 3393, November\n       \
    \   2002.\n   [Ec98] http://www3.ietf.org/proceedings/98mar/98mar-edited-135.htm\n\
    \   [Fl93] Floyd, S., and Jacobson, V., \"Random Early Detection gateways\n  \
    \        for Congestion Avoidance\", IEEE/ACM Transactions on\n          Networking,\
    \ V.1 N.4, August 1993, p. 397-413.  URL\n          \"ftp://ftp.ee.lbl.gov/papers/early.pdf\"\
    .\n   [Ja99] Davie, B., Charny, A., Bennet, J.C., Benson, K., Le Boudec,\n   \
    \       J., Courtney, W., Davari, S., Firoiu, V., and D. Stiliadis,\n        \
    \  \"An Expedited Forwarding PHB (Per-Hop Behavior)\", RFC 3246,\n          March\
    \ 2002.\n   [Ka99] Almes, G., Kalidindi, S., and M. Zekauskas, \"A One-way Packet\n\
    \          Loss Metric for IPPM\", RFC 2680, September 1999.\n   [Ma91] Mankin,\
    \ A. and K. Ramakrishnan, \"Gateway Congestion Control\n          Survey\", RFC\
    \ 1254, August 1991.\n   [Ma00] Mandeville, R. and J. Perser, \"Benchmarking Methodology\
    \ for\n          LAN Switching Devices\", RFC 2889, August 2000.\n   [Mo03] Morton,\
    \ A., Ciavattone, L., Ramachandran, G., Shalunov, S.,\n          Perser, J., \"\
    Packet Reordering Metric for IPPM\", Work in\n          Progress.\n   [Na84] Nagle,\
    \ J., \"Congestion control in IP/TCP internetworks\", RFC\n          896, January\
    \ 1984.\n   [Ra99] Ramakrishnan, K., Floyd, S., and D. Black, \"The Addition of\n\
    \          Explicit Congestion Notification (ECN) to IP\", RFC 3168,\n       \
    \   September 2001.\n   [Sc96] Schulzrinne, H., Casner, S., Frederick, R., and\
    \ V. Jacobson,\n          \"RTP: A Transport Protocol for Real-Time Applications\"\
    , STD\n          64, RFC 3550, July 2003.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Jerry Perser\n   Veriwave\n   8770 SW Nimbus Ave.\n  \
    \ Suite B\n   Beaverton, OR 97008   USA\n   USA\n   Phone: + 1 818 338 4112\n\
    \   EMail: jerry@perser.org\n   Scott Poretsky\n   Reef Point Systems\n   8 New\
    \ England Executive Park\n   Burlington, MA 01803\n   USA\n   Phone: + 1 508 439\
    \ 9008\n   EMail: sporetsky@reefpoint.com\n   Shobha Erramilli\n   Telcordia Technologies\n\
    \   331 Newman Springs Road\n   Red Bank, New Jersey 07701\n   USA\n   EMail:\
    \ shobha@research.telcordia.com\n   Sumit Khurana\n   Motorola\n   7700 West Parmer\
    \ Ln.\n   Austin, TX 78729\n   USA\n   Phone: +1 512 996 6604\n   Email: skhurana@motorola.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
