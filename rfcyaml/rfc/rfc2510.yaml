- title: __initial_text__
  contents:
  - "                Internet X.509 Public Key Infrastructure\n                  \
    \  Certificate Management Protocols\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the Internet X.509 Public Key Infrastructure\n\
    \   (PKI) Certificate Management Protocols. Protocol messages are defined\n  \
    \ for all relevant aspects of certificate creation and management.\n   Note that\
    \ \"certificate\" in this document refers to an X.509v3\n   Certificate as defined\
    \ in [COR95, X509-AM].\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHOULD\", \"SHOULD NOT\",\n   \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in\
    \ this document (in uppercase,\n   as shown) are to be interpreted as described\
    \ in [RFC2119].\n"
- title: Introduction
  contents:
  - "Introduction\n   The layout of this document is as follows:\n   - Section 1 contains\
    \ an overview of PKI management;\n   - Section 2 contains discussion of assumptions\
    \ and restrictions;\n   - Section 3 contains data structures used for PKI management\
    \ messages;\n   - Section 4 defines the functions that are to be carried out in\
    \ PKI\n     management by conforming implementations;\n   - Section 5 describes\
    \ a simple protocol for transporting PKI messages;\n   - the Appendices specify\
    \ profiles for conforming implementations and\n     provide an ASN.1 module containing\
    \ the syntax for all messages\n     defined in this specification.\n"
- title: 1 PKI Management Overview
  contents:
  - "1 PKI Management Overview\n   The PKI must be structured to be consistent with\
    \ the types of\n   individuals who must administer it.  Providing such administrators\n\
    \   with unbounded choices not only complicates the software required but\n  \
    \ also increases the chances that a subtle mistake by an administrator\n   or\
    \ software developer will result in broader compromise. Similarly,\n   restricting\
    \ administrators with cumbersome mechanisms will cause them\n   not to use the\
    \ PKI.\n   Management protocols are REQUIRED to support on-line interactions\n\
    \   between Public Key Infrastructure (PKI) components.  For example, a\n   management\
    \ protocol might be used between a Certification Authority\n   (CA) and a client\
    \ system with which a key pair is associated, or\n   between two CAs that issue\
    \ cross-certificates for each other.\n"
- title: 1.1 PKI Management Model
  contents:
  - "1.1 PKI Management Model\n   Before specifying particular message formats and\
    \ procedures we first\n   define the entities involved in PKI management and their\
    \ interactions\n   (in terms of the PKI management functions required).  We then\
    \ group\n   these functions in order to accommodate different identifiable types\n\
    \   of end entities.\n"
- title: 1.2 Definitions of PKI Entities
  contents:
  - "1.2 Definitions of PKI Entities\n   The entities involved in PKI management include\
    \ the end entity (i.e.,\n   the entity to be named in the subject field of a certificate)\
    \ and the\n   certification authority (i.e., the entity named in the issuer field\n\
    \   of a certificate). A registration authority MAY also be involved in\n   PKI\
    \ management.\n"
- title: 1.2.1 Subjects and End Entities
  contents:
  - "1.2.1 Subjects and End Entities\n   The term \"subject\" is used here to refer\
    \ to the entity named in the\n   subject field of a certificate; when we wish\
    \ to distinguish the tools\n   and/or software used by the subject (e.g., a local\
    \ certificate\n   management module) we will use the term \"subject equipment\"\
    . In\n   general, the term \"end entity\" (EE) rather than subject is preferred\n\
    \   in order to avoid confusion with the field name.\n   It is important to note\
    \ that the end entities here will include not\n   only human users of applications,\
    \ but also applications themselves\n   (e.g., for IP security). This factor influences\
    \ the protocols which\n   the PKI management operations use; for example, application\
    \ software\n   is far more likely to know exactly which certificate extensions\
    \ are\n   required than are human users. PKI management entities are also end\n\
    \   entities in the sense that they are sometimes named in the subject\n   field\
    \ of a certificate or cross-certificate. Where appropriate, the\n   term \"end-entity\"\
    \ will be used to refer to end entities who are not\n   PKI management entities.\n\
    \   All end entities require secure local access to some information --\n   at\
    \ a minimum, their own name and private key, the name of a CA which\n   is directly\
    \ trusted by this entity and that CA's public key (or a\n   fingerprint of the\
    \ public key where a self-certified version is\n   available elsewhere). Implementations\
    \ MAY use secure local storage\n   for more than this minimum (e.g., the end entity's\
    \ own certificate or\n   application-specific information). The form of storage\
    \ will also vary\n   -- from files to tamper-resistant cryptographic tokens. \
    \ Such local\n   trusted storage is referred to here as the end entity's Personal\n\
    \   Security Environment (PSE).\n   Though PSE formats are beyond the scope of\
    \ this document (they are\n   very dependent on equipment, et cetera), a generic\
    \ interchange format\n   for PSEs is defined here - a certification response message\
    \ MAY be\n   used.\n"
- title: 1.2.2 Certification Authority
  contents:
  - "1.2.2 Certification Authority\n   The certification authority (CA) may or may\
    \ not actually be a real\n   \"third party\" from the end entity's point of view.\
    \ Quite often, the\n   CA will actually belong to the same organization as the\
    \ end entities\n   it supports.\n   Again, we use the term CA to refer to the\
    \ entity named in the issuer\n   field of a certificate; when it is necessary\
    \ to distinguish the\n   software or hardware tools used by the CA we use the\
    \ term \"CA\n   equipment\".\n   The CA equipment will often include both an \"\
    off-line\" component and\n   an \"on-line\" component, with the CA private key\
    \ only available to the\n   \"off-line\" component. This is, however, a matter\
    \ for implementers\n   (though it is also relevant as a policy issue).\n   We\
    \ use the term \"root CA\" to indicate a CA that is directly trusted\n   by an\
    \ end entity; that is, securely acquiring the value of a root CA\n   public key\
    \ requires some out-of-band step(s). This term is not meant\n   to imply that\
    \ a root CA is necessarily at the top of any hierarchy,\n   simply that the CA\
    \ in question is trusted directly.\n   A \"subordinate CA\" is one that is not\
    \ a root CA for the end entity in\n   question. Often, a subordinate CA will not\
    \ be a root CA for any\n   entity but this is not mandatory.\n"
- title: 1.2.3 Registration Authority
  contents:
  - "1.2.3 Registration Authority\n   In addition to end-entities and CAs, many environments\
    \ call for the\n   existence of a Registration Authority (RA) separate from the\n\
    \   Certification Authority. The functions which the registration\n   authority\
    \ may carry out will vary from case to case but MAY include\n   personal authentication,\
    \ token distribution, revocation reporting,\n   name assignment, key generation,\
    \ archival of key pairs, et cetera.\n   This document views the RA as an OPTIONAL\
    \ component - when it is not\n   present the CA is assumed to be able to carry\
    \ out the RA's functions\n   so that the PKI management protocols are the same\
    \ from the end-\n   entity's point of view.\n   Again, we distinguish, where necessary,\
    \ between the RA and the tools\n   used (the \"RA equipment\").\n   Note that\
    \ an RA is itself an end entity. We further assume that all\n   RAs are in fact\
    \ certified end entities and that RAs have private keys\n   that are usable for\
    \ signing. How a particular CA equipment identifies\n   some end entities as RAs\
    \ is an implementation issue (i.e., this\n   document specifies no special RA\
    \ certification operation). We do not\n   mandate that the RA is certified by\
    \ the CA with which it is\n   interacting at the moment (so one RA may work with\
    \ more than one CA\n   whilst only being certified once).\n   In some circumstances\
    \ end entities will communicate directly with a\n   CA even where an RA is present.\
    \ For example, for initial registration\n   and/or certification the subject may\
    \ use its RA, but communicate\n   directly with the CA in order to refresh its\
    \ certificate.\n"
- title: 1.3 PKI Management Requirements
  contents:
  - "1.3 PKI Management Requirements\n   The protocols given here meet the following\
    \ requirements on PKI\n   management.\n      1. PKI management must conform to\
    \ the ISO 9594-8 standard and the\n         associated amendments (certificate\
    \ extensions)\n      2. PKI management must conform to the other parts of this\
    \ series.\n      3. It must be possible to regularly update any key pair without\n\
    \         affecting any other key pair.\n      4. The use of confidentiality in\
    \ PKI management protocols must be\n         kept to a minimum in order to ease\
    \ regulatory problems.\n      5. PKI management protocols must allow the use of\
    \ different\n         industry-standard cryptographic algorithms, (specifically\n\
    \         including RSA, DSA, MD5, SHA-1) -- this means that any given\n     \
    \    CA, RA, or end entity may, in principle, use whichever\n         algorithms\
    \ suit it for its own key pair(s).\n      6. PKI management protocols must not\
    \ preclude the generation of\n         key pairs by the end-entity concerned,\
    \ by an RA, or by a CA --\n         key generation may also occur elsewhere, but\
    \ for the purposes\n         of PKI management we can regard key generation as\
    \ occurring\n         wherever the key is first present at an end entity, RA,\
    \ or CA.\n      7. PKI management protocols must support the publication of\n\
    \         certificates by the end-entity concerned, by an RA, or by a CA.\n  \
    \       Different implementations and different environments may choose\n    \
    \     any of the above approaches.\n      8. PKI management protocols must support\
    \ the production of\n         Certificate Revocation Lists (CRLs) by allowing\
    \ certified end\n         entities to make requests for the revocation of certificates\
    \ -\n         this must be done in such a way that the denial-of-service\n   \
    \      attacks which are possible are not made simpler.\n      9. PKI management\
    \ protocols must be usable over a variety of\n         \"transport\" mechanisms,\
    \ specifically including mail, http,\n         TCP/IP and ftp.\n      10. Final\
    \ authority for certification creation rests with the CA;\n          no RA or\
    \ end-entity equipment can assume that any certificate\n          issued by a\
    \ CA will contain what was requested -- a CA may\n          alter certificate\
    \ field values or may add, delete or alter\n          extensions according to\
    \ its operating policy. In other words,\n          all PKI entities (end-entities,\
    \ RAs, and CAs) must be capable\n          of handling responses to requests for\
    \ certificates in which\n          the actual certificate issued is different\
    \ from that requested\n          (for example, a CA may shorten the validity period\
    \ requested).\n          Note that policy may dictate that the CA must not publish\
    \ or\n          otherwise distribute the certificate until the requesting\n  \
    \        entity has reviewed and accepted the newly-created certificate\n    \
    \      (typically through use of the PKIConfirm message).\n      11. A graceful,\
    \ scheduled change-over from one non-compromised CA\n          key pair to the\
    \ next (CA key update) must be supported (note\n          that if the CA key is\
    \ compromised, re-initialization must be\n          performed for all entities\
    \ in the domain of that CA). An end\n          entity whose PSE contains the new\
    \ CA public key (following a\n          CA key update) must also be able to verify\
    \ certificates\n          verifiable using the old public key. End entities who\
    \ directly\n          trust the old CA key pair must also be able to verify\n\
    \          certificates signed using the new CA private key.  (Required\n    \
    \      for situations where the old CA public key is \"hardwired\" into\n    \
    \      the end entity's cryptographic equipment).\n      12. The Functions of\
    \ an RA may, in some implementations or\n          environments, be carried out\
    \ by the CA itself. The protocols\n          must be designed so that end entities\
    \ will use the same\n          protocol (but, of course, not the same key!) regardless\
    \ of\n          whether the communication is with an RA or CA.\n      13. Where\
    \ an end entity requests a certificate containing a given\n          public key\
    \ value, the end entity must be ready to demonstrate\n          possession of\
    \ the corresponding private key value. This may be\n          accomplished in\
    \ various ways, depending on the type of\n          certification request. See\
    \ Section 2.3, \"Proof of Possession\n          of Private Key\", for details\
    \ of the in-band methods defined\n          for the PKIX-CMP (i.e., Certificate\
    \ Management Protocol)\n          messages.\n"
- title: PKI Management Operations
  contents:
  - "PKI Management Operations\n   The following diagram shows the relationship between\
    \ the entities\n   defined above in terms of the PKI management operations. The\
    \ letters\n   in the diagram indicate \"protocols\" in the sense that a defined\
    \ set\n   of PKI management messages can be sent along each of the lettered\n\
    \   lines.\n      +---+     cert. publish        +------------+      j\n     \
    \ |   |  <---------------------  | End Entity | <-------\n      | C |        \
    \     g            +------------+      \"out-of-band\"\n      |   |          \
    \                  | ^                loading\n      | e |                   \
    \         | |      initial\n      | r |                          a | | b     registration/\n\
    \      | t |                            | |       certification\n      |   | \
    \                           | |      key pair recovery\n      | / |          \
    \                  | |      key pair update\n      |   |                     \
    \       | |      certificate update\n      | C |  PKI \"USERS\"              \
    \ V |      revocation request\n      | R | -------------------+-+-----+-+------+-+-------------------\n\
    \      | L |  PKI MANAGEMENT    | ^              | ^\n      |   |    ENTITIES\
    \      a | | b          a | | b\n      |   |                    V |          \
    \    | |\n      | R |             g   +------+    d       | |\n      | e |   <------------\
    \ | RA   | <-----+    | |\n      | p |      cert.      |      | ----+ |    | |\n\
    \      | o |       publish   +------+   c | |    | |\n      | s |            \
    \                  | |    | |\n      | i |                              V |  \
    \  V |\n      | t |          g                 +------------+   i\n      | o |\
    \   <------------------------|     CA     |------->\n      | r |          h  \
    \               +------------+  \"out-of-band\"\n      | y |      cert. publish\
    \              | ^         publication\n      |   |      CRL publish         \
    \       | |\n      +---+                                 | |    cross-certification\n\
    \                                          e | | f  cross-certificate\n      \
    \                                      | |       update\n                    \
    \                        | |\n                                            V |\n\
    \                                          +------+\n                        \
    \                  | CA-2 |\n                                          +------+\n\
    \                           Figure 1 - PKI Entities\n   At a high level the set\
    \ of operations for which management messages\n   are defined can be grouped as\
    \ follows.\n      1 CA establishment: When establishing a new CA, certain steps\
    \ are\n        required (e.g., production of initial CRLs, export of CA public\n\
    \        key).\n      2 End entity initialization: this includes importing a root\
    \ CA\n        public key and requesting information about the options\n      \
    \  supported by a PKI management entity.\n      3 Certification: various operations\
    \ result in the creation of new\n        certificates:\n        3.1 initial registration/certification:\
    \ This is the process\n            whereby  an end entity first makes itself known\
    \ to a CA or\n            RA, prior to the CA issuing a certificate or certificates\n\
    \            for that end entity. The end result of this process (when it\n  \
    \          is successful) is that a CA issues a certificate for an end\n     \
    \       entity's public key, and returns that certificate to the end\n       \
    \     entity and/or posts that certificate in a public repository.\n         \
    \   This process may, and typically will, involve multiple\n            \"steps\"\
    , possibly including an initialization of the end\n            entity's equipment.\
    \ For example, the end entity's equipment\n            must be securely initialized\
    \ with the public key of a CA, to\n            be used in validating certificate\
    \ paths.  Furthermore, an\n            end entity typically needs to be initialized\
    \ with its own\n            key pair(s).\n        3.2 key pair update:  Every\
    \ key pair needs to be updated\n            regularly (i.e., replaced with a new\
    \ key pair), and a new\n            certificate needs to be issued.\n        3.3\
    \ certificate update: As certificates expire they may be\n            \"refreshed\"\
    \ if nothing relevant in the environment has\n            changed.\n        3.4\
    \ CA key pair update: As with end entities, CA key pairs need\n            to\
    \ be updated regularly; however, different mechanisms are\n            required.\n\
    \        3.5 cross-certification request:  One CA requests issuance of a\n   \
    \         cross-certificate from another CA.  For the purposes of this\n     \
    \       standard, the following terms are defined.  A \"cross-\n            certificate\"\
    \ is a certificate in which the subject CA and\n            the issuer CA are\
    \ distinct and SubjectPublicKeyInfo contains\n            a verification key (i.e.,\
    \ the certificate has been issued\n            for the subject CA's signing key\
    \ pair).  When it is\n            necessary to distinguish more finely, the following\
    \ terms\n            may be used: a cross-certificate is called an \"inter-domain\n\
    \            cross-certificate\" if the subject and issuer CAs belong to\n   \
    \         different administrative domains; it is called an \"intra-\n       \
    \     domain cross-certificate\" otherwise.\n   Notes:\n   Note 1. The above definition\
    \ of \"cross-certificate\" aligns with the\n   defined term \"CA-certificate\"\
    \ in X.509.  Note that this term is not\n   to be confused with the X.500 \"cACertificate\"\
    \ attribute type, which\n   is unrelated.\n   Note 2. In many environments the\
    \ term \"cross-certificate\", unless\n   further qualified, will be understood\
    \ to be synonymous with \"inter-\n   domain cross-certificate\" as defined above.\n\
    \   Note 3. Issuance of cross-certificates may be, but is not\n   necessarily,\
    \ mutual; that is, two CAs may issue cross-certificates\n   for each other.\n\
    \        3.6 cross-certificate update: Similar to a normal certificate\n     \
    \       update but involving a cross-certificate.\n      4 Certificate/CRL discovery\
    \ operations: some PKI management\n        operations result in the publication\
    \ of certificates or CRLs:\n        4.1 certificate publication: Having gone to\
    \ the trouble of\n            producing a certificate, some means for publishing\
    \ it is\n            needed.  The \"means\" defined in PKIX MAY involve the\n\
    \            messages specified in Sections 3.3.13 - 3.3.16, or MAY\n        \
    \    involve other methods (LDAP, for example) as described in\n            the\
    \ \"Operational Protocols\" documents of the PKIX series of\n            specifications.\n\
    \        4.2 CRL publication: As for certificate publication.\n      5 Recovery\
    \ operations: some PKI management operations are used\n        when an end entity\
    \ has \"lost\" its PSE:\n        5.1 key pair recovery:  As an option, user client\
    \ key materials\n            (e.g., a user's private key used for decryption purposes)\n\
    \            MAY be backed up by a CA, an RA, or a key backup system\n       \
    \     associated with a CA or RA. If an entity needs to recover\n            these\
    \ backed up key materials (e.g., as a result of a\n            forgotten password\
    \ or a lost key chain file), a  protocol\n            exchange may be needed to\
    \ support such recovery.\n      6 Revocation operations: some PKI operations result\
    \ in the\n        creation of new CRL entries and/or new CRLs:\n        6.1 revocation\
    \ request:  An authorized person advises a CA of an\n            abnormal situation\
    \ requiring certificate revocation.\n      7 PSE operations: whilst the definition\
    \ of PSE operations (e.g.,\n        moving a PSE, changing a PIN, etc.) are beyond\
    \ the scope of this\n        specification, we do define a PKIMessage (CertRepMessage)\
    \ which\n        can form the basis of such operations.\n   Note that on-line\
    \ protocols are not the only way of implementing the\n   above operations.  For\
    \ all operations there are off-line methods of\n   achieving the same result,\
    \ and this specification does not mandate\n   use of on-line protocols.  For example,\
    \ when hardware tokens are\n   used, many of the operations MAY be achieved as\
    \ part of the physical\n   token delivery.\n   Later sections define a set of\
    \ standard messages supporting the above\n   operations.  The protocols for conveying\
    \ these exchanges in different\n   environments (file based, on-line, E-mail,\
    \ and WWW) is also\n   specified.\n"
- title: 2. Assumptions and restrictions
  contents:
  - '2. Assumptions and restrictions

    '
- title: 2.1 End entity initialization
  contents:
  - "2.1 End entity initialization\n   The first step for an end entity in dealing\
    \ with PKI management\n   entities is to request information about the PKI functions\
    \ supported\n   and to securely acquire a copy of the relevant root CA public\
    \ key(s).\n"
- title: 2.2 Initial registration/certification
  contents:
  - "2.2 Initial registration/certification\n   There are many schemes that can be\
    \ used to achieve initial\n   registration and certification of end entities.\
    \ No one method is\n   suitable for all situations due to the range of policies\
    \ which a CA\n   may implement and the variation in the types of end entity which\
    \ can\n   occur.\n   We can however, classify the initial registration / certification\n\
    \   schemes that are supported by this specification. Note that the word\n   \"\
    initial\", above, is crucial - we are dealing with the situation\n   where the\
    \ end entity in question has had no previous contact with the\n   PKI. Where the\
    \ end entity already possesses certified keys then some\n   simplifications/alternatives\
    \ are possible.\n   Having classified the schemes that are supported by this\n\
    \   specification we can then specify some as mandatory and some as\n   optional.\
    \ The goal is that the mandatory schemes cover a sufficient\n   number of the\
    \ cases which will arise in real use, whilst the optional\n   schemes are available\
    \ for special cases which arise less frequently.\n   In this way we achieve a\
    \ balance between flexibility and ease of\n   implementation.\n   We will now\
    \ describe the classification of initial registration /\n   certification schemes.\n"
- title: 2.2.1 Criteria used
  contents:
  - '2.2.1 Criteria used

    '
- title: 2.2.1.1 Initiation of registration / certification
  contents:
  - "2.2.1.1 Initiation of registration / certification\n   In terms of the PKI messages\
    \ which are produced we can regard the\n   initiation of the initial registration\
    \ / certification exchanges as\n   occurring wherever the first PKI message relating\
    \ to the end entity\n   is produced. Note that the real-world initiation of the\
    \ registration\n   / certification procedure may occur elsewhere (e.g., a personnel\n\
    \   department may telephone an RA operator).\n   The possible locations are at\
    \ the end entity, an RA, or a CA.\n"
- title: 2.2.1.2 End entity message origin authentication
  contents:
  - "2.2.1.2 End entity message origin authentication\n   The on-line messages produced\
    \ by the end entity that requires a\n   certificate may be authenticated or not.\
    \ The requirement here is to\n   authenticate the origin of any messages from\
    \ the end entity to the\n   PKI (CA/RA).\n   In this specification, such authentication\
    \ is achieved by the PKI\n   (CA/RA) issuing the end entity with a secret value\
    \ (initial\n   authentication key) and reference value (used to identify the\n\
    \   transaction) via some out-of-band means. The initial authentication\n   key\
    \ can then be used to protect relevant PKI messages.\n   We can thus classify\
    \ the initial registration/certification scheme\n   according to whether or not\
    \ the on-line end entity -> PKI messages\n   are authenticated or not.\n   Note\
    \ 1: We do not discuss the authentication of the PKI -> end entity\n   messages\
    \ here as this is always REQUIRED. In any case, it can be\n   achieved simply\
    \ once the root-CA public key has been installed at the\n   end entity's equipment\
    \ or it can be based on the initial\n   authentication key.\n   Note 2: An initial\
    \ registration / certification procedure can be\n   secure where the messages\
    \ from the end entity are authenticated via\n   some out- of-band means (e.g.,\
    \ a subsequent visit).\n"
- title: 2.2.1.3 Location of key generation
  contents:
  - "2.2.1.3 Location of key generation\n   In this specification, \"key generation\"\
    \ is regarded as occurring\n   wherever either the public or private component\
    \ of a key pair first\n   occurs in a PKIMessage. Note that this does not preclude\
    \ a\n   centralized key generation service - the actual key pair MAY have\n  \
    \ been generated elsewhere and transported to the end entity, RA, or CA\n   using\
    \ a (proprietary or standardized) key generation request/response\n   protocol\
    \ (outside the scope of this specification).\n   There are thus three possibilities\
    \ for the location of \"key\n   generation\":  the end entity, an RA, or a CA.\n"
- title: 2.2.1.4 Confirmation of successful certification
  contents:
  - "2.2.1.4 Confirmation of successful certification\n   Following the creation of\
    \ an initial certificate for an end entity,\n   additional assurance can be gained\
    \ by having the end entity\n   explicitly confirm successful receipt of the message\
    \ containing (or\n   indicating the creation of) the certificate. Naturally, this\n\
    \   confirmation message must be protected (based on the initial\n   authentication\
    \ key or other means).\n   This gives two further possibilities: confirmed or\
    \ not.\n"
- title: 2.2.2 Mandatory schemes
  contents:
  - "2.2.2 Mandatory schemes\n   The criteria above allow for a large number of initial\
    \ registration /\n   certification schemes. This specification mandates that conforming\
    \ CA\n   equipment, RA equipment, and EE equipment MUST support the second\n \
    \  scheme listed below. Any entity MAY additionally support other\n   schemes,\
    \ if desired.\n"
- title: 2.2.2.1 Centralized scheme
  contents:
  - "2.2.2.1 Centralized scheme\n   In terms of the classification above, this scheme\
    \ is, in some ways,\n   the simplest possible, where:\n   - initiation occurs\
    \ at the certifying CA;\n   - no on-line message authentication is required;\n\
    \   - \"key generation\" occurs at the certifying CA (see Section 2.2.1.3);\n\
    \   - no confirmation message is required.\n   In terms of message flow, this\
    \ scheme means that the only message\n   required is sent from the CA to the end\
    \ entity. The message must\n   contain the entire PSE for the end entity. Some\
    \ out-of-band means\n   must be provided to allow the end entity to authenticate\
    \ the message\n   received and decrypt any encrypted values.\n"
- title: 2.2.2.2 Basic authenticated scheme
  contents:
  - "2.2.2.2 Basic authenticated scheme\n   In terms of the classification above,\
    \ this scheme is where:\n   - initiation occurs at the end entity;\n   - message\
    \ authentication is REQUIRED;\n   - \"key generation\" occurs at the end entity\
    \ (see Section 2.2.1.3);\n   - a confirmation message is REQUIRED.\n   In terms\
    \ of message flow, the basic authenticated scheme is as\n   follows:\n      End\
    \ entity                                          RA/CA\n      ==========    \
    \                                  =============\n           out-of-band distribution\
    \ of Initial Authentication\n           Key (IAK) and reference value (RA/CA ->\
    \ EE)\n      Key generation\n      Creation of certification request\n      Protect\
    \ request with IAK\n                    -->>--certification request-->>--\n  \
    \                                                   verify request\n         \
    \                                            process request\n               \
    \                                      create response\n                    --<<--certification\
    \ response--<<--\n      handle response\n      create confirmation\n         \
    \           -->>--confirmation message-->>--\n                               \
    \                      verify confirmation\n   (Where verification of the confirmation\
    \ message fails, the RA/CA MUST\n   revoke the newly issued certificate if it\
    \ has been published or\n   otherwise made available.)\n"
- title: 2.3 Proof of Possession (POP) of Private Key
  contents:
  - "2.3 Proof of Possession (POP) of Private Key\n   In order to prevent certain\
    \ attacks and to allow a CA/RA to properly\n   check the validity of the binding\
    \ between an end entity and a key\n   pair, the PKI management operations specified\
    \ here make it possible\n   for an end entity to prove that it has possession\
    \ of (i.e., is able\n   to use) the private key corresponding to the public key\
    \ for which a\n   certificate is requested.  A given CA/RA is free to choose how\
    \ to\n   enforce POP (e.g., out-of-band procedural means versus PKIX-CMP in-\n\
    \   band messages) in its certification exchanges (i.e., this may be a\n   policy\
    \ issue).  However, it is REQUIRED that CAs/RAs MUST enforce POP\n   by some means\
    \ because there are currently many non-PKIX operational\n   protocols in use (various\
    \ electronic mail protocols are one example)\n   that do not explicitly check\
    \ the binding between the end entity and\n   the private key.  Until operational\
    \ protocols that do verify the\n   binding (for signature, encryption, and key\
    \ agreement key pairs)\n   exist, and are ubiquitous, this binding can only be\
    \ assumed to have\n   been verified by the CA/RA. Therefore, if the binding is\
    \ not verified\n   by the CA/RA, certificates in the Internet Public-Key Infrastructure\n\
    \   end up being somewhat less meaningful.\n   POP is accomplished in different\
    \ ways depending upon the type of key\n   for which a certificate is requested.\
    \ If a key can be used for\n   multiple purposes (e.g., an RSA key) then any appropriate\
    \ method MAY\n   be used (e.g., a key which may be used for signing, as well as\
    \ other\n   purposes, SHOULD NOT be sent to the CA/RA in order to prove\n   possession).\n\
    \   This specification explicitly allows for cases where an end entity\n   supplies\
    \ the relevant proof to an RA and the RA subsequently attests\n   to the CA that\
    \ the required proof has been received (and validated!).\n   For example, an end\
    \ entity wishing to have a signing key certified\n   could send the appropriate\
    \ signature to the RA which then simply\n   notifies the relevant CA that the\
    \ end entity has supplied the\n   required proof. Of course, such a situation\
    \ may be disallowed by some\n   policies (e.g., CAs may be the only entities permitted\
    \ to verify POP\n   during certification).\n"
- title: 2.3.1 Signature Keys
  contents:
  - "2.3.1 Signature Keys\n   For signature keys, the end entity can sign a value\
    \ to prove\n   possession of the private key.\n"
- title: 2.3.2 Encryption Keys
  contents:
  - "2.3.2 Encryption Keys\n   For encryption keys, the end entity can provide the\
    \ private key to\n   the CA/RA, or can be required to decrypt a value in order\
    \ to prove\n   possession of the private key (see Section 3.2.8). Decrypting a\
    \ value\n   can be achieved either directly or indirectly.\n   The direct method\
    \ is for the RA/CA to issue a random challenge to\n   which an immediate response\
    \ by the EE is required.\n   The indirect method is to issue a certificate which\
    \ is encrypted for\n   the end entity (and have the end entity demonstrate its\
    \ ability to\n   decrypt this certificate in the confirmation message). This allows\
    \ a\n   CA to issue a certificate in a form which can only be used by the\n  \
    \ intended end entity.\n   This specification encourages use of the indirect method\
    \ because this\n   requires no extra messages to be sent (i.e., the proof can\
    \ be\n   demonstrated using the {request, response, confirmation} triple of\n\
    \   messages).\n"
- title: 2.3.3 Key Agreement Keys
  contents:
  - "2.3.3 Key Agreement Keys\n   For key agreement keys, the end entity and the PKI\
    \ management entity\n   (i.e., CA or RA) must establish a shared secret key in\
    \ order to prove\n   that the end entity has possession of the private key.\n\
    \   Note that this need not impose any restrictions on the keys that can\n   be\
    \ certified by a given CA -- in particular, for Diffie-Hellman keys\n   the end\
    \ entity may freely choose its algorithm parameters -- provided\n   that the CA\
    \ can generate a short-term (or one-time) key pair with the\n   appropriate parameters\
    \ when necessary.\n"
- title: 2.4 Root CA key update
  contents:
  - "2.4 Root CA key update\n   This discussion only applies to CAs that are a root\
    \ CA for some end\n   entity.\n   The basis of the procedure described here is\
    \ that the CA protects its\n   new public key using its previous private key and\
    \ vice versa. Thus\n   when a CA updates its key pair it must generate two extra\n\
    \   cACertificate attribute values if certificates are made available\n   using\
    \ an X.500 directory (for a total of four:  OldWithOld;\n   OldWithNew; NewWithOld;\
    \ and NewWithNew).\n   When a CA changes its key pair those entities who have\
    \ acquired the\n   old CA public key via \"out-of-band\" means are most affected.\
    \ It is\n   these end entities who will need access to the new CA public key\n\
    \   protected with the old CA private key. However, they will only\n   require\
    \ this for a limited period (until they have acquired the new\n   CA public key\
    \ via the \"out-of-band\" mechanism). This will typically\n   be easily achieved\
    \ when these end entities' certificates expire.\n   The data structure used to\
    \ protect the new and old CA public keys is\n   a standard certificate (which\
    \ may also contain extensions). There are\n   no new data structures required.\n\
    \   Note 1. This scheme does not make use of any of the X.509 v3\n   extensions\
    \ as it must be able to work even for version 1\n   certificates. The presence\
    \ of the KeyIdentifier extension would make\n   for efficiency improvements.\n\
    \   Note 2. While the scheme could be generalized to cover cases where\n   the\
    \ CA updates its key pair more than once during the validity period\n   of one\
    \ of its end entities' certificates, this generalization seems\n   of dubious\
    \ value. Not having this generalization simply means that\n   the validity period\
    \ of a CA key pair must be greater than the\n   validity period of any certificate\
    \ issued by that CA using that key\n   pair.\n   Note 3.This scheme forces end\
    \ entities to acquire the new CA public\n   key on the expiry of the last certificate\
    \ they owned that was signed\n   with the old CA private key (via the \"out-of-band\"\
    \ means).\n   Certificate and/or key update operations occurring at other times\
    \ do\n   not necessarily require this (depending on the end entity's\n   equipment).\n"
- title: 2.4.1 CA Operator actions
  contents:
  - "2.4.1 CA Operator actions\n   To change the key of the CA, the CA operator does\
    \ the following:\n      1. Generate a new key pair;\n      2. Create a certificate\
    \ containing the old CA public key signed\n         with the new private key (the\
    \ \"old with new\" certificate);\n      3. Create a certificate containing the\
    \ new CA public key signed\n         with the old private key (the \"new with\
    \ old\" certificate);\n      4. Create a certificate containing the new CA public\
    \ key signed\n         with the new private key (the \"new with new\" certificate);\n\
    \      5. Publish these new certificates via the directory and/or other\n    \
    \     means (perhaps using a CAKeyUpdAnn message);\n      6. Export the new CA\
    \ public key so that end entities may acquire\n         it using the \"out-of-band\"\
    \ mechanism (if required).\n   The old CA private key is then no longer required.\
    \ The old CA public\n   key will however remain in use for some time. The time\
    \ when the old\n   CA public key is no longer required (other than for non-repudiation)\n\
    \   will be when all end entities of this CA have securely acquired the\n   new\
    \ CA public key.\n   The \"old with new\" certificate must have a validity period\
    \ starting\n   at the generation time of the old key pair and ending at the expiry\n\
    \   date of the old public key.\n   The \"new with old\" certificate must have\
    \ a validity period starting\n   at the generation time of the new key pair and\
    \ ending at the time by\n   which all end entities of this CA will securely possess\
    \ the new CA\n   public key (at the latest, the expiry date of the old public\
    \ key).\n   The \"new with new\" certificate must have a validity period starting\n\
    \   at the generation time of the new key pair and ending at the time by\n   which\
    \ the CA will next update its key pair.\n"
- title: 2.4.2 Verifying Certificates.
  contents:
  - "2.4.2 Verifying Certificates.\n   Normally when verifying a signature, the verifier\
    \ verifies (among\n   other things) the certificate containing the public key\
    \ of the\n   signer. However, once a CA is allowed to update its key there are\
    \ a\n   range of new possibilities. These are shown in the table below.\n    \
    \           Repository contains NEW     Repository contains only OLD\n       \
    \          and OLD public keys        public key (due to, e.g.,\n            \
    \                                 delay in publication)\n                  PSE\
    \      PSE Contains  PSE Contains    PSE Contains\n               Contains   \
    \  OLD public    NEW public      OLD public\n              NEW public       key\
    \            key            key\n                  key\n   Signer's   Case 1:\
    \      Case 3:       Case 5:        Case 7:\n   certifi-   This is      In this\
    \ case  Although the   In this case\n   cate is    the          the verifier \
    \ CA operator    the CA\n   protected  standard     must access   has not    \
    \    operator  has\n   using NEW  case where   the           updated the    not\
    \ updated\n   public     the          directory in  directory the  the directory\n\
    \   key        verifier     order to get  verifier can   and so the\n        \
    \      can          the value of  verify the     verification\n              directly\
    \     the NEW       certificate    will FAIL\n              verify the   public\
    \ key    directly -\n              certificate                this is thus\n \
    \             without                    the same as\n              using the\
    \                  case 1.\n              directory\n   Signer's   Case 2:   \
    \   Case 4:       Case 6:        Case 8:\n   certifi-   In this      In this case\
    \  The verifier   Although the\n   cate is    case the     the verifier  thinks\
    \ this    CA operator\n   protected  verifier     can directly  is the       \
    \  has not\n   using OLD  must         verify the    situation of   updated the\n\
    \   public     access the   certificate   case 2 and     directory the\n   key\
    \        directory    without       will access    verifier can\n            \
    \  in order     using the     the            verify the\n              to get\
    \ the   directory     directory;     certificate\n              value of     \
    \              however, the   directly -\n              the OLD              \
    \      verification   this is thus\n              public key                 will\
    \ FAIL      the same as\n                                                    \
    \    case 4.\n"
- title: 2.4.2.1 Verification in cases 1, 4, 5 and 8.
  contents:
  - "2.4.2.1 Verification in cases 1, 4, 5 and 8.\n   In these cases the verifier\
    \ has a local copy of the CA public key\n   which can be used to verify the certificate\
    \ directly. This is the\n   same as the situation where no key change has occurred.\n\
    \   Note that case 8 may arise between the time when the CA operator has\n   generated\
    \ the new key pair and the time when the CA operator stores\n   the updated attributes\
    \ in the directory. Case 5 can only arise if the\n   CA operator has issued both\
    \ the signer's and verifier's certificates\n   during this \"gap\" (the CA operator\
    \ SHOULD avoid this as it leads to\n   the failure cases described below).\n"
- title: 2.4.2.2 Verification in case 2.
  contents:
  - "2.4.2.2 Verification in case 2.\n   In case 2 the verifier must get access to\
    \ the old public key of the\n   CA. The verifier does the following:\n      1.\
    \ Look up the caCertificate attribute in the directory and pick\n         the\
    \ OldWithNew certificate (determined based on validity\n         periods);\n \
    \     2. Verify that this is correct using the new CA key (which the\n       \
    \  verifier has locally);\n      3. If correct, check the signer's certificate\
    \ using the old CA\n         key.\n   Case 2 will arise when the CA operator has\
    \ issued the signer's\n   certificate, then changed key and then issued the verifier's\n\
    \   certificate, so it is quite a typical case.\n"
- title: 2.4.2.3 Verification in case 3.
  contents:
  - "2.4.2.3 Verification in case 3.\n   In case 3 the verifier must get access to\
    \ the new public key of the\n   CA. The verifier does the following:\n      1.\
    \ Look up the CACertificate attribute in the directory and pick\n         the\
    \ NewWithOld certificate (determined based on validity\n         periods);\n \
    \     2. Verify that this is correct using the old CA key (which the\n       \
    \  verifier has stored locally);\n      3. If correct, check the signer's certificate\
    \ using the new CA\n         key.\n   Case 3 will arise when the CA operator has\
    \ issued the verifier's\n   certificate, then changed key and then issued the\
    \ signer's\n   certificate, so it is also quite a typical case.\n"
- title: 2.4.2.4 Failure of verification in case 6.
  contents:
  - "2.4.2.4 Failure of verification in case 6.\n   In this case the CA has issued\
    \ the verifier's PSE containing the new\n   key without updating the directory\
    \ attributes. This means that the\n   verifier has no means to get a trustworthy\
    \ version of the CA's old\n   key and so verification fails.\n   Note that the\
    \ failure is the CA operator's fault.\n"
- title: 2.4.2.5 Failure of verification in case 7.
  contents:
  - "2.4.2.5 Failure of verification in case 7.\n   In this case the CA has issued\
    \ the signer's certificate protected\n   with the new key without updating the\
    \ directory attributes. This\n   means that the verifier has no means to get a\
    \ trustworthy version of\n   the CA's new key and so verification fails.\n   Note\
    \ that the failure is again the CA operator's fault.\n"
- title: 2.4.3 Revocation - Change of CA key
  contents:
  - "2.4.3 Revocation - Change of CA key\n   As we saw above the verification of a\
    \ certificate becomes more\n   complex once the CA is allowed to change its key.\
    \ This is also true\n   for revocation checks as the CA may have signed the CRL\
    \ using a newer\n   private key than the one that is within the user's PSE.\n\
    \   The analysis of the alternatives is as for certificate verification.\n"
- title: 3. Data Structures
  contents:
  - "3. Data Structures\n   This section contains descriptions of the data structures\
    \ required\n   for PKI management messages. Section 4 describes constraints on\
    \ their\n   values and the sequence of events for each of the various PKI\n  \
    \ management operations. Section 5 describes how these may be\n   encapsulated\
    \ in various transport mechanisms.\n"
- title: 3.1 Overall PKI Message
  contents:
  - "3.1 Overall PKI Message\n   All of the messages used in this specification for\
    \ the purposes of\n   PKI management use the following structure:\n     PKIMessage\
    \ ::= SEQUENCE {\n         header           PKIHeader,\n         body        \
    \     PKIBody,\n         protection   [0] PKIProtection OPTIONAL,\n         extraCerts\
    \   [1] SEQUENCE SIZE (1..MAX) OF Certificate OPTIONAL\n     }\n   The PKIHeader\
    \ contains information which is common to many PKI\n   messages.\n   The PKIBody\
    \ contains message-specific information.\n   The PKIProtection, when used, contains\
    \ bits that protect the PKI\n   message.\n   The extraCerts field can contain\
    \ certificates that may be useful to\n   the recipient. For example, this can\
    \ be used by a CA or RA to present\n   an end entity with certificates that it\
    \ needs to verify its own new\n   certificate (if, for example, the CA that issued\
    \ the end entity's\n   certificate is not a root CA for the end entity).  Note\
    \ that this\n   field does not necessarily contain a certification path - the\n\
    \   recipient may have to sort, select from, or otherwise process the\n   extra\
    \ certificates in order to use them.\n"
- title: 3.1.1 PKI Message Header
  contents:
  - "3.1.1 PKI Message Header\n   All PKI messages require some header information\
    \ for addressing and\n   transaction identification. Some of this information\
    \ will also be\n   present in a transport-specific envelope; however, if the PKI\
    \ message\n   is protected then this information is also protected (i.e., we make\n\
    \   no assumption about secure transport).\n   The following data structure is\
    \ used to contain this information:\n     PKIHeader ::= SEQUENCE {\n         pvno\
    \                INTEGER     { ietf-version2 (1) },\n         sender         \
    \     GeneralName,\n         -- identifies the sender\n         recipient    \
    \       GeneralName,\n         -- identifies the intended recipient\n        \
    \ messageTime     [0] GeneralizedTime         OPTIONAL,\n         -- time of production\
    \ of this message (used when sender\n         -- believes that the transport will\
    \ be \"suitable\"; i.e.,\n         -- that the time will still be meaningful upon\
    \ receipt)\n         protectionAlg   [1] AlgorithmIdentifier     OPTIONAL,\n \
    \        -- algorithm used for calculation of protection bits\n         senderKID\
    \       [2] KeyIdentifier           OPTIONAL,\n         recipKID        [3] KeyIdentifier\
    \           OPTIONAL,\n         -- to identify specific keys used for protection\n\
    \         transactionID   [4] OCTET STRING            OPTIONAL,\n         -- identifies\
    \ the transaction; i.e., this will be the same in\n         -- corresponding request,\
    \ response and confirmation messages\n         senderNonce     [5] OCTET STRING\
    \            OPTIONAL,\n         recipNonce      [6] OCTET STRING            OPTIONAL,\n\
    \         -- nonces used to provide replay protection, senderNonce\n         --\
    \ is inserted by the creator of this message; recipNonce\n         -- is a nonce\
    \ previously inserted in a related message by\n         -- the intended recipient\
    \ of this message\n         freeText        [7] PKIFreeText             OPTIONAL,\n\
    \         -- this may be used to indicate context-specific instructions\n    \
    \     -- (this field is intended for human consumption)\n         generalInfo\
    \     [8] SEQUENCE SIZE (1..MAX) OF\n                                InfoTypeAndValue\
    \     OPTIONAL\n         -- this may be used to convey context-specific information\n\
    \         -- (this field not primarily intended for human consumption)\n     }\n\
    \     PKIFreeText ::= SEQUENCE SIZE (1..MAX) OF UTF8String\n         -- text encoded\
    \ as UTF-8 String (note:  each UTF8String SHOULD\n         -- include an RFC 1766\
    \ language tag to indicate the language\n         -- of the contained text)\n\
    \   The pvno field is fixed (at one) for this version of this\n   specification.\n\
    \   The sender field contains the name of the sender of the PKIMessage.\n   This\
    \ name (in conjunction with senderKID, if supplied) should be\n   usable to verify\
    \ the protection on the message.  If nothing about the\n   sender is known to\
    \ the sending entity (e.g., in the init. req.\n   message, where the end entity\
    \ may not know its own Distinguished Name\n   (DN), e-mail name, IP address, etc.),\
    \ then the \"sender\" field MUST\n   contain a \"NULL\" value; that is, the SEQUENCE\
    \ OF relative\n   distinguished names is of zero length. In such a case the senderKID\n\
    \   field MUST hold an identifier (i.e., a reference number) which\n   indicates\
    \ to the receiver the appropriate shared secret information\n   to use to verify\
    \ the message.\n   The recipient field contains the name of the recipient of the\n\
    \   PKIMessage. This name (in conjunction with recipKID, if supplied)\n   should\
    \ be usable to verify the protection on the message.\n   The protectionAlg field\
    \ specifies the algorithm used to protect the\n   message. If no protection bits\
    \ are supplied (note that PKIProtection\n   is OPTIONAL) then this field MUST\
    \ be omitted; if protection bits are\n   supplied then this field MUST be supplied.\n\
    \   senderKID and recipKID are usable to indicate which keys have been\n   used\
    \ to protect the message (recipKID will normally only be required\n   where protection\
    \ of the message uses Diffie-Hellman (DH) keys).\n   The transactionID field within\
    \ the message header MAY be used to\n   allow the recipient of a response message\
    \ to correlate this with a\n   previously issued request. For example, in the\
    \ case of an RA there\n   may be many requests \"outstanding\" at a given moment.\n\
    \   The senderNonce and recipNonce fields protect the PKIMessage against\n   replay\
    \ attacks.\n   The messageTime field contains the time at which the sender created\n\
    \   the message. This may be useful to allow end entities to correct\n   their\
    \ local time to be consistent with the time on a central system.\n   The freeText\
    \ field may be used to send a human-readable message to\n   the recipient (in\
    \ any number of languages).  The first language used\n   in this sequence indicates\
    \ the desired language for replies.\n   The generalInfo field may be used to send\
    \ machine-processable\n   additional data to the recipient.\n"
- title: 3.1.2 PKI Message Body
  contents:
  - "3.1.2 PKI Message Body\n     PKIBody ::= CHOICE {       -- message-specific body\
    \ elements\n         ir      [0]  CertReqMessages,        --Initialization Request\n\
    \         ip      [1]  CertRepMessage,         --Initialization Response\n   \
    \      cr      [2]  CertReqMessages,        --Certification Request\n        \
    \ cp      [3]  CertRepMessage,         --Certification Response\n         p10cr\
    \   [4]  CertificationRequest,   --PKCS #10 Cert. Req.\n           -- the PKCS\
    \ #10 certification request (see [PKCS10])\n         popdecc [5]  POPODecKeyChallContent,\
    \ --pop Challenge\n         popdecr [6]  POPODecKeyRespContent,  --pop Response\n\
    \         kur     [7]  CertReqMessages,        --Key Update Request\n        \
    \ kup     [8]  CertRepMessage,         --Key Update Response\n         krr   \
    \  [9]  CertReqMessages,        --Key Recovery Request\n         krp     [10]\
    \ KeyRecRepContent,       --Key Recovery Response\n         rr      [11] RevReqContent,\
    \          --Revocation Request\n         rp      [12] RevRepContent,        \
    \  --Revocation Response\n         ccr     [13] CertReqMessages,        --Cross-Cert.\
    \ Request\n         ccp     [14] CertRepMessage,         --Cross-Cert. Response\n\
    \         ckuann  [15] CAKeyUpdAnnContent,     --CA Key Update Ann.\n        \
    \ cann    [16] CertAnnContent,         --Certificate Ann.\n         rann    [17]\
    \ RevAnnContent,          --Revocation Ann.\n         crlann  [18] CRLAnnContent,\
    \          --CRL Announcement\n         conf    [19] PKIConfirmContent,      --Confirmation\n\
    \         nested  [20] NestedMessageContent,   --Nested Message\n         genm\
    \    [21] GenMsgContent,          --General Message\n         genp    [22] GenRepContent,\
    \          --General Response\n         error   [23] ErrorMsgContent         --Error\
    \ Message\n     }\n   The specific types are described in Section 3.3 below.\n"
- title: 3.1.3 PKI Message Protection
  contents:
  - "3.1.3 PKI Message Protection\n   Some PKI messages will be protected for integrity.\
    \ (Note that if an\n   asymmetric algorithm is used to protect a message and the\
    \ relevant\n   public component has been certified already, then the origin of\n\
    \   message can also be authenticated.  On the other hand, if the public\n   component\
    \ is uncertified then the message origin cannot be\n   automatically authenticated,\
    \ but may be authenticated via out-of-band\n   means.)\n   When protection is\
    \ applied the following structure is used:\n     PKIProtection ::= BIT STRING\n\
    \   The input to the calculation of PKIProtection is the DER encoding of\n   the\
    \ following data structure:\n     ProtectedPart ::= SEQUENCE {\n         header\
    \    PKIHeader,\n         body      PKIBody\n     }\n   There MAY be cases in\
    \ which the PKIProtection BIT STRING is\n   deliberately not used to protect a\
    \ message (i.e., this OPTIONAL field\n   is omitted) because other protection,\
    \ external to PKIX, will instead\n   be applied. Such a choice is explicitly allowed\
    \ in this\n   specification.  Examples of such external protection include PKCS\
    \ #7\n   [PKCS7] and Security Multiparts [RFC1847] encapsulation of the\n   PKIMessage\
    \ (or simply the PKIBody (omitting the CHOICE tag), if the\n   relevant PKIHeader\
    \ information is securely carried in the external\n   mechanism); specification\
    \ of external protection using PKCS #7 will\n   be provided in a separate document.\
    \  It is noted, however, that many\n   such external mechanisms require that the\
    \ end entity already\n   possesses a public-key certificate, and/or a unique Distinguished\n\
    \   Name, and/or other such infrastructure-related information. Thus,\n   they\
    \ may not be appropriate for initial registration, key-recovery,\n   or any other\
    \ process with \"boot-strapping\" characteristics.  For\n   those cases it may\
    \ be necessary that the PKIProtection parameter be\n   used.  In the future, if/when\
    \ external mechanisms are modified to\n   accommodate boot-strapping scenarios,\
    \ the use of PKIProtection may\n   become rare or non-existent.\n   Depending\
    \ on the circumstances the PKIProtection bits may contain a\n   Message Authentication\
    \ Code (MAC) or signature. Only the following\n   cases can occur:\n   - shared\
    \ secret information\n   In this case the sender and recipient share secret information\n\
    \   (established via out-of-band means or from a previous PKI management\n   operation).\
    \  PKIProtection will contain a MAC value and the\n   protectionAlg will be the\
    \ following:\n     PasswordBasedMac ::= OBJECT IDENTIFIER --{1 2 840 113533 7\
    \ 66 13}\n     PBMParameter ::= SEQUENCE {\n         salt                OCTET\
    \ STRING,\n         owf                 AlgorithmIdentifier,\n         -- AlgId\
    \ for a One-Way Function (SHA-1 recommended)\n         iterationCount      INTEGER,\n\
    \         -- number of times the OWF is applied\n         mac                \
    \ AlgorithmIdentifier\n         -- the MAC AlgId (e.g., DES-MAC, Triple-DES-MAC\
    \ [PKCS11],\n     }   -- or HMAC [RFC2104, RFC2202])\n   In the above protectionAlg\
    \ the salt value is appended to the shared\n   secret input. The OWF is then applied\
    \ iterationCount times, where the\n   salted secret is the input to the first\
    \ iteration and, for each\n   successive iteration, the input is set to be the\
    \ output of the\n   previous iteration. The output of the final iteration (called\n\
    \   \"BASEKEY\" for ease of reference, with a size of \"H\") is what is used\n\
    \   to form the symmetric key. If the MAC algorithm requires a K-bit key\n   and\
    \ K <= H, then the most significant K bits of BASEKEY are used. If\n   K > H,\
    \ then all of BASEKEY is used for the most significant H bits of\n   the key,\
    \ OWF(\"1\" || BASEKEY) is used for the next most significant H\n   bits of the\
    \ key, OWF(\"2\" || BASEKEY) is used for the next most\n   significant H bits\
    \ of the key, and so on, until all K bits have been\n   derived. [Here \"N\" is\
    \ the ASCII byte encoding the number N and \"||\"\n   represents concatenation.]\n\
    \   - DH key pairs\n   Where the sender and receiver possess Diffie-Hellman certificates\n\
    \   with compatible DH parameters, then in order to protect the message\n   the\
    \ end entity must generate a symmetric key based on its private DH\n   key value\
    \ and the DH public key of the recipient of the PKI message.\n   PKIProtection\
    \ will contain a MAC value keyed with this derived\n   symmetric key and the protectionAlg\
    \ will be the following:\n     DHBasedMac ::= OBJECT IDENTIFIER --{1 2 840 113533\
    \ 7 66 30}\n     DHBMParameter ::= SEQUENCE {\n         owf                 AlgorithmIdentifier,\n\
    \         -- AlgId for a One-Way Function (SHA-1 recommended)\n         mac  \
    \               AlgorithmIdentifier\n         -- the MAC AlgId (e.g., DES-MAC,\
    \ Triple-DES-MAC [PKCS11],\n     }   -- or HMAC [RFC2104, RFC2202])\n   In the\
    \ above protectionAlg OWF is applied to the result of the\n   Diffie-Hellman computation.\
    \ The OWF output (called \"BASEKEY\" for ease\n   of reference, with a size of\
    \ \"H\") is what is used to form the\n   symmetric key. If the MAC algorithm requires\
    \ a K-bit key and K <= H,\n   then the most significant K bits of BASEKEY are\
    \ used. If K > H, then\n   all of BASEKEY is used for the most significant H bits\
    \ of the key,\n   OWF(\"1\" || BASEKEY) is used for the next most significant\
    \ H bits of\n   the key, OWF(\"2\" || BASEKEY) is used for the next most significant\
    \ H\n   bits of the key, and so on, until all K bits have been derived. [Here\n\
    \   \"N\" is the ASCII byte encoding the number N and \"||\" represents\n   concatenation.]\n\
    \   - signature\n   Where the sender possesses a signature key pair it may simply\
    \ sign\n   the PKI message. PKIProtection will contain the signature value and\n\
    \   the protectionAlg will be an AlgorithmIdentifier for a digital\n   signature\
    \ (e.g., md5WithRSAEncryption or dsaWithSha-1).\n   - multiple protection\n  \
    \ In cases where an end entity sends a protected PKI message to an RA,\n   the\
    \ RA MAY forward that message to a CA, attaching its own protection\n   (which\
    \ MAY be a MAC or a signature, depending on the information and\n   certificates\
    \ shared between the RA and the CA). This is accomplished\n   by nesting the entire\
    \ message sent by the end entity within a new PKI\n   message. The structure used\
    \ is as follows.\n     NestedMessageContent ::= PKIMessage\n"
- title: 3.2 Common Data Structures
  contents:
  - "3.2 Common Data Structures\n   Before specifying the specific types that may\
    \ be placed in a PKIBody\n   we define some data structures that are used in more\
    \ than one case.\n"
- title: 3.2.1 Requested Certificate Contents
  contents:
  - "3.2.1 Requested Certificate Contents\n   Various PKI management messages require\
    \ that the originator of the\n   message indicate some of the fields that are\
    \ required to be present\n   in a certificate. The CertTemplate structure allows\
    \ an end entity or\n   RA to specify as much as it wishes about the certificate\
    \ it requires.\n   CertTemplate is identical to a Certificate but with all fields\n\
    \   optional.\n   Note that even if the originator completely specifies the contents\
    \ of\n   a certificate it requires, a CA is free to modify fields within the\n\
    \   certificate actually issued.  If the modified certificate is\n   unacceptable\
    \ to the requester, the Confirmation message may be\n   withheld, or an Error\
    \ Message may be sent (with a PKIStatus of\n   \"rejection\").\n   See [CRMF]\
    \ for CertTemplate syntax.\n"
- title: 3.2.2 Encrypted Values
  contents:
  - "3.2.2 Encrypted Values\n   Where encrypted values (restricted, in this specification,\
    \ to be\n   either private keys or certificates) are sent in PKI messages the\n\
    \   EncryptedValue data structure is used.\n   See [CRMF] for EncryptedValue syntax.\n\
    \   Use of this data structure requires that the creator and intended\n   recipient\
    \ respectively be able to encrypt and decrypt. Typically,\n   this will mean that\
    \ the sender and recipient have, or are able to\n   generate, a shared secret\
    \ key.\n   If the recipient of the PKIMessage already possesses a private key\n\
    \   usable for decryption, then the encSymmKey field MAY contain a\n   session\
    \ key encrypted using the recipient's public key.\n"
- title: 3.2.3 Status codes and Failure Information for PKI messages
  contents:
  - "3.2.3 Status codes and Failure Information for PKI messages\n   All response\
    \ messages will include some status information. The\n   following values are\
    \ defined.\n     PKIStatus ::= INTEGER {\n         granted                (0),\n\
    \         -- you got exactly what you asked for\n         grantedWithMods    \
    \    (1),\n         -- you got something like what you asked for; the\n      \
    \   -- requester is responsible for ascertaining the differences\n         rejection\
    \              (2),\n         -- you don't get it, more information elsewhere\
    \ in the message\n         waiting                (3),\n         -- the request\
    \ body part has not yet been processed,\n         -- expect to hear more later\n\
    \         revocationWarning      (4),\n         -- this message contains a warning\
    \ that a revocation is\n         -- imminent\n         revocationNotification\
    \ (5),\n         -- notification that a revocation has occurred\n         keyUpdateWarning\
    \       (6)\n         -- update already done for the oldCertId specified in\n\
    \         -- the key update request message\n     }\n   Responders may use the\
    \ following syntax to provide more information\n   about failure cases.\n    \
    \ PKIFailureInfo ::= BIT STRING {\n     -- since we can fail in more than one\
    \ way!\n     -- More codes may be added in the future if/when required.\n    \
    \     badAlg           (0),\n         -- unrecognized or unsupported Algorithm\
    \ Identifier\n         badMessageCheck  (1),\n         -- integrity check failed\
    \ (e.g., signature did not verify)\n         badRequest       (2),\n         --\
    \ transaction not permitted or supported\n         badTime          (3),\n   \
    \      -- messageTime was not sufficiently close to the system time,\n       \
    \  -- as defined by local policy\n         badCertId        (4),\n         --\
    \ no certificate could be found matching the provided criteria\n         badDataFormat\
    \    (5),\n         -- the data submitted has the wrong format\n         wrongAuthority\
    \   (6),\n         -- the authority indicated in the request is different from\
    \ the\n         -- one creating the response token\n         incorrectData   \
    \ (7),\n         -- the requester's data is incorrect (used for notary services)\n\
    \         missingTimeStamp (8),\n         -- when the timestamp is missing but\
    \ should be there (by policy)\n         badPOP           (9)\n         -- the\
    \ proof-of-possession failed\n     }\n     PKIStatusInfo ::= SEQUENCE {\n    \
    \     status        PKIStatus,\n         statusString  PKIFreeText     OPTIONAL,\n\
    \         failInfo      PKIFailureInfo  OPTIONAL\n     }\n"
- title: 3.2.4 Certificate Identification
  contents:
  - "3.2.4 Certificate Identification\n   In order to identify particular certificates\
    \ the CertId data\n   structure is used.\n   See [CRMF] for CertId syntax.\n"
- title: 3.2.5 "Out-of-band" root CA public key
  contents:
  - "3.2.5 \"Out-of-band\" root CA public key\n   Each root CA must be able to publish\
    \ its current public key via some\n   \"out-of-band\" means. While such mechanisms\
    \ are beyond the scope of\n   this document, we define data structures which can\
    \ support such\n   mechanisms.\n   There are generally two methods available:\
    \ either the CA directly\n   publishes its self-signed certificate; or this information\
    \ is\n   available via the Directory (or equivalent) and the CA publishes a\n\
    \   hash of this value to allow verification of its integrity before use.\n  \
    \   OOBCert ::= Certificate\n   The fields within this certificate are restricted\
    \ as follows:\n   - The certificate MUST be self-signed  (i.e., the signature\
    \ must be\n     verifiable using the SubjectPublicKeyInfo field);\n   - The subject\
    \ and issuer fields MUST be identical;\n   - If the subject field is NULL then\
    \ both subjectAltNames and\n     issuerAltNames extensions MUST be present and\
    \ have exactly the same\n     value;\n   - The values of all other extensions\
    \ must be suitable for a self-\n     signed certificate (e.g., key identifiers\
    \ for subject and issuer\n     must be the same).\n     OOBCertHash ::= SEQUENCE\
    \ {\n         hashAlg     [0] AlgorithmIdentifier     OPTIONAL,\n         certId\
    \      [1] CertId                  OPTIONAL,\n         hashVal         BIT STRING\n\
    \         -- hashVal is calculated over the self-signed\n         -- certificate\
    \ with the identifier certID.\n     }\n   The intention of the hash value is that\
    \ anyone who has securely\n   received the hash value (via the out-of-band means)\
    \ can verify a\n   self- signed certificate for that CA.\n"
- title: 3.2.6 Archive Options
  contents:
  - "3.2.6 Archive Options\n   Requesters may indicate that they wish the PKI to archive\
    \ a private\n   key value using the PKIArchiveOptions structure\n   See [CRMF]\
    \ for PKIArchiveOptions syntax.\n"
- title: 3.2.7 Publication Information
  contents:
  - "3.2.7 Publication Information\n   Requesters may indicate that they wish the\
    \ PKI to publish a\n   certificate using the PKIPublicationInfo structure.\n \
    \  See [CRMF] for PKIPublicationInfo syntax.\n"
- title: 3.2.8  Proof-of-Possession Structures
  contents:
  - "3.2.8  Proof-of-Possession Structures\n   If the certification request is for\
    \ a signing key pair (i.e., a\n   request for a verification certificate), then\
    \ the proof of possession\n   of the private signing key is demonstrated through\
    \ use of the\n   POPOSigningKey structure.\n   See [CRMF] for POPOSigningKey syntax,\
    \ but note that\n   POPOSigningKeyInput has the following semantic stipulations\
    \ in this\n   specification.\n     POPOSigningKeyInput ::= SEQUENCE {\n      \
    \   authInfo            CHOICE {\n             sender              [0] GeneralName,\n\
    \             -- from PKIHeader (used only if an authenticated identity\n    \
    \         -- has been established for the sender (e.g., a DN from a\n        \
    \     -- previously-issued and currently-valid certificate))\n             publicKeyMAC\
    \        [1] PKMACValue\n             -- used if no authenticated GeneralName\
    \ currently exists for\n             -- the sender; publicKeyMAC contains a password-based\
    \ MAC\n             -- (using the protectionAlg AlgId from PKIHeader) on the\n\
    \             -- DER-encoded value of publicKey\n         },\n         publicKey\
    \           SubjectPublicKeyInfo    -- from CertTemplate\n     }\n   On the other\
    \ hand, if the certification request is for an encryption\n   key pair (i.e.,\
    \ a request for an encryption certificate), then the\n   proof of possession of\
    \ the private decryption key may be demonstrated\n   in one of three ways.\n \
    \     1) By the inclusion of the private key (encrypted) in the\n         CertRequest\
    \ (in the PKIArchiveOptions control structure).\n      2) By having the CA return\
    \ not the certificate, but an encrypted\n         certificate (i.e., the certificate\
    \ encrypted under a randomly-\n         generated symmetric key, and the symmetric\
    \ key encrypted under\n         the public key for which the certification request\
    \ is being\n         made) -- this is the \"indirect\" method mentioned previously\
    \ in\n         Section 2.3.2.  The end entity proves knowledge of the private\n\
    \         decryption key to the CA by MACing the PKIConfirm message using\n  \
    \       a key derived from this symmetric key.  [Note that if more than\n    \
    \     one CertReqMsg is included in the PKIMessage, then the CA uses\n       \
    \  a different symmetric key for each CertReqMsg and the MAC uses\n         a\
    \ key derived from the concatenation of all these keys.]  The\n         MACing\
    \ procedure uses the PasswordBasedMac AlgId defined in\n         Section 3.1.\n\
    \      3) By having the end entity engage in a challenge-response\n         protocol\
    \ (using the messages POPODecKeyChall and\n         POPODecKeyResp; see below)\
    \ between CertReqMessages and\n         CertRepMessage -- this is the \"direct\"\
    \ method mentioned\n         previously in Section 2.3.2.  [This method would\
    \ typically be\n         used in an environment in which an RA verifies POP and\
    \ then\n         makes a certification request to the CA on behalf of the end\n\
    \         entity.  In such a scenario, the CA trusts the RA to have done\n   \
    \      POP correctly before the RA requests a certificate for the end\n      \
    \   entity.]  The complete protocol then looks as follows (note\n         that\
    \ req' does not necessarily encapsulate req as a nested\n         message):\n\
    \                        EE            RA            CA\n                    \
    \     ---- req ---->\n                         <--- chall ---\n              \
    \           ---- resp --->\n                                       ---- req' --->\n\
    \                                       <--- rep -----\n                     \
    \                  ---- conf --->\n                         <--- rep -----\n \
    \                        ---- conf --->\n   This protocol is obviously much longer\
    \ than the 3-way exchange given\n   in choice (2) above, but allows a local Registration\
    \ Authority to be\n   involved and has the property that the certificate itself\
    \ is not\n   actually created until the proof of possession is complete.\n   If\
    \ the cert. request is for a key agreement key (KAK) pair, then the\n   POP can\
    \ use any of the 3 ways described above for enc. key pairs,\n   with the following\
    \ changes:  (1) the parenthetical text of bullet 2)\n   is replaced with \"(i.e.,\
    \ the certificate encrypted under the\n   symmetric key derived from the CA's\
    \ private KAK and the public key\n   for which the certification request is being\
    \ made)\"; (2) the first\n   parenthetical text of the challenge field of \"Challenge\"\
    \ below is\n   replaced with \"(using PreferredSymmAlg (see Appendix B6) and a\n\
    \   symmetric key derived from the CA's private KAK and the public key\n   for\
    \ which the certification request is being made)\".  Alternatively,\n   the POP\
    \ can use the POPOSigningKey structure given in [CRMF] (where\n   the alg field\
    \ is DHBasedMAC and the signature field is the MAC) as a\n   fourth alternative\
    \ for demonstrating POP if the CA already has a D-H\n   certificate that is known\
    \ to the EE.\n   The challenge-response messages for proof of possession of a\
    \ private\n   decryption key are specified as follows (see [MvOV97, p.404] for\n\
    \   details).  Note that this challenge-response exchange is associated\n   with\
    \ the preceding cert. request message (and subsequent cert.\n   response and confirmation\
    \ messages) by the nonces used in the\n   PKIHeader and by the protection (MACing\
    \ or signing) applied to the\n   PKIMessage.\n     POPODecKeyChallContent ::=\
    \ SEQUENCE OF Challenge\n     -- One Challenge per encryption key certification\
    \ request (in the\n     -- same order as these requests appear in CertReqMessages).\n\
    \     Challenge ::= SEQUENCE {\n         owf                 AlgorithmIdentifier\
    \  OPTIONAL,\n         -- MUST be present in the first Challenge; MAY be omitted\
    \ in any\n         -- subsequent Challenge in POPODecKeyChallContent (if omitted,\n\
    \         -- then the owf used in the immediately preceding Challenge is\n   \
    \      -- to be used).\n         witness             OCTET STRING,\n         --\
    \ the result of applying the one-way function (owf) to a\n         -- randomly-generated\
    \ INTEGER, A.  [Note that a different\n         -- INTEGER MUST be used for each\
    \ Challenge.]\n         challenge           OCTET STRING\n         -- the encryption\
    \ (under the public key for which the cert.\n         -- request is being made)\
    \ of Rand, where Rand is specified as\n         --   Rand ::= SEQUENCE {\n   \
    \      --      int      INTEGER,\n         --       - the randomly-generated INTEGER\
    \ A (above)\n         --      sender   GeneralName\n         --       - the sender's\
    \ name (as included in PKIHeader)\n         --   }\n     }\n     POPODecKeyRespContent\
    \ ::= SEQUENCE OF INTEGER\n     -- One INTEGER per encryption key certification\
    \ request (in the\n     -- same order as these requests appear in CertReqMessages).\
    \  The\n     -- retrieved INTEGER A (above) is returned to the sender of the\n\
    \     -- corresponding Challenge.\n"
- title: 3.3 Operation-Specific Data Structures
  contents:
  - '3.3 Operation-Specific Data Structures

    '
- title: 3.3.1 Initialization Request
  contents:
  - "3.3.1 Initialization Request\n   An Initialization request message contains as\
    \ the PKIBody an\n   CertReqMessages data structure which specifies the requested\n\
    \   certificate(s).  Typically, SubjectPublicKeyInfo, KeyId, and Validity\n  \
    \ are the template fields which may be supplied for each certificate\n   requested\
    \ (see Appendix B profiles for further information).  This\n   message is intended\
    \ to be used for entities first initializing into\n   the PKI.\n   See [CRMF]\
    \ for CertReqMessages syntax.\n"
- title: 3.3.2 Initialization Response
  contents:
  - "3.3.2 Initialization Response\n   An Initialization response message contains\
    \ as the PKIBody an\n   CertRepMessage data structure which has for each certificate\n\
    \   requested a PKIStatusInfo field, a subject certificate, and possibly\n   a\
    \ private key (normally encrypted with a session key, which is itself\n   encrypted\
    \ with the protocolEncKey).\n   See Section 3.3.4 for CertRepMessage syntax. \
    \ Note that if the PKI\n   Message Protection is \"shared secret information\"\
    \ (see Section\n   3.1.3), then any certificate transported in the caPubs field\
    \ may be\n   directly trusted as a root CA certificate by the initiator.\n"
- title: 3.3.3 Registration/Certification Request
  contents:
  - "3.3.3 Registration/Certification Request\n   A Registration/Certification request\
    \ message contains as the PKIBody\n   a CertReqMessages data structure which specifies\
    \ the requested\n   certificates.  This message is intended to be used for existing\
    \ PKI\n   entities who wish to obtain additional certificates.\n   See [CRMF]\
    \ for CertReqMessages syntax.\n   Alternatively, the PKIBody MAY be a CertificationRequest\
    \ (this\n   structure is fully specified by the ASN.1 structure\n   CertificationRequest\
    \ given in [PKCS10]).  This structure may be\n   required for certificate requests\
    \ for signing key pairs when\n   interoperation with legacy systems is desired,\
    \ but its use is\n   strongly discouraged whenever not absolutely necessary.\n"
- title: 3.3.4 Registration/Certification Response
  contents:
  - "3.3.4 Registration/Certification Response\n   A registration response message\
    \ contains as the PKIBody a\n   CertRepMessage data structure which has a status\
    \ value for each\n   certificate requested, and optionally has a CA public key,\
    \ failure\n   information, a subject certificate, and an encrypted private key.\n\
    \  CertRepMessage ::= SEQUENCE {\n      caPubs          [1] SEQUENCE SIZE (1..MAX)\
    \ OF Certificate OPTIONAL,\n      response            SEQUENCE OF CertResponse\n\
    \  }\n  CertResponse ::= SEQUENCE {\n      certReqId           INTEGER,\n    \
    \  -- to match this response with corresponding request (a value\n      -- of\
    \ -1 is to be used if certReqId is not specified in the\n      -- corresponding\
    \ request)\n      status              PKIStatusInfo,\n      certifiedKeyPair \
    \   CertifiedKeyPair    OPTIONAL,\n      rspInfo             OCTET STRING    \
    \    OPTIONAL\n      -- analogous to the id-regInfo-asciiPairs OCTET STRING defined\n\
    \      -- for regInfo in CertReqMsg [CRMF]\n  }\n  CertifiedKeyPair ::= SEQUENCE\
    \ {\n      certOrEncCert       CertOrEncCert,\n      privateKey      [0] EncryptedValue\
    \      OPTIONAL,\n      publicationInfo [1] PKIPublicationInfo  OPTIONAL\n  }\n\
    \  CertOrEncCert ::= CHOICE {\n      certificate     [0] Certificate,\n      encryptedCert\
    \   [1] EncryptedValue\n  }\n   Only one of the failInfo (in PKIStatusInfo) and\
    \ certificate (in\n   CertifiedKeyPair) fields can be present in each CertResponse\n\
    \   (depending on the status). For some status values (e.g., waiting)\n   neither\
    \ of the optional fields will be present.\n   Given an EncryptedCert and the relevant\
    \ decryption key the\n   certificate may be obtained. The purpose of this is to\
    \ allow a CA to\n   return the value of a certificate, but with the constraint\
    \ that only\n   the intended recipient can obtain the actual certificate. The\
    \ benefit\n   of this approach is that a CA may reply with a certificate even\
    \ in\n   the absence of a proof that the requester is the end entity which can\n\
    \   use the relevant private key (note that the proof is not obtained\n   until\
    \ the PKIConfirm message is received by the CA). Thus the CA will\n   not have\
    \ to revoke that certificate in the event that something goes\n   wrong with the\
    \ proof of possession.\n"
- title: 3.3.5 Key update request content
  contents:
  - "3.3.5 Key update request content\n   For key update requests the CertReqMessages\
    \ syntax is used.\n   Typically, SubjectPublicKeyInfo, KeyId, and Validity are\
    \ the template\n   fields which may be supplied for each key to be updated.  This\n\
    \   message is intended to be used to request updates to existing (non-\n   revoked\
    \ and non-expired) certificates.\n   See [CRMF] for CertReqMessages syntax.\n"
- title: 3.3.6 Key Update response content
  contents:
  - "3.3.6 Key Update response content\n   For key update responses the CertRepMessage\
    \ syntax is used.  The\n   response is identical to the initialization response.\n\
    \   See Section 3.3.4 for CertRepMessage syntax.\n"
- title: 3.3.7 Key Recovery Request content
  contents:
  - "3.3.7 Key Recovery Request content\n   For key recovery requests the syntax used\
    \ is identical to the\n   initialization request CertReqMessages.  Typically,\n\
    \   SubjectPublicKeyInfo and KeyId are the template fields which may be\n   used\
    \ to supply a signature public key for which a certificate is\n   required (see\
    \ Appendix B profiles for further information).\n   See [CRMF] for CertReqMessages\
    \ syntax.  Note that if a key history is\n   required, the requester must supply\
    \ a Protocol Encryption Key control\n   in the request message.\n"
- title: 3.3.8 Key recovery response content
  contents:
  - "3.3.8 Key recovery response content\n   For key recovery responses the following\
    \ syntax is used.  For some\n   status values (e.g., waiting) none of the optional\
    \ fields will be\n   present.\n     KeyRecRepContent ::= SEQUENCE {\n        \
    \ status          PKIStatusInfo,\n         newSigCert  [0] Certificate       \
    \            OPTIONAL,\n         caCerts     [1] SEQUENCE SIZE (1..MAX) OF\n \
    \                                     Certificate      OPTIONAL,\n         keyPairHist\
    \ [2] SEQUENCE SIZE (1..MAX) OF\n                                      CertifiedKeyPair\
    \ OPTIONAL\n     }\n"
- title: 3.3.9 Revocation Request Content
  contents:
  - "3.3.9 Revocation Request Content\n   When requesting revocation of a certificate\
    \ (or several certificates)\n   the following data structure is used. The name\
    \ of the requester is\n   present in the PKIHeader structure.\n     RevReqContent\
    \ ::= SEQUENCE OF RevDetails\n     RevDetails ::= SEQUENCE {\n         certDetails\
    \         CertTemplate,\n         -- allows requester to specify as much as they\
    \ can about\n         -- the cert. for which revocation is requested\n       \
    \  -- (e.g., for cases in which serialNumber is not available)\n         revocationReason\
    \    ReasonFlags      OPTIONAL,\n         -- the reason that revocation is requested\n\
    \         badSinceDate        GeneralizedTime  OPTIONAL,\n         -- indicates\
    \ best knowledge of sender\n         crlEntryDetails     Extensions       OPTIONAL\n\
    \         -- requested crlEntryExtensions\n     }\n"
- title: 3.3.10 Revocation Response Content
  contents:
  - "3.3.10 Revocation Response Content\n   The response to the above message. If\
    \ produced, this is sent to the\n   requester of the revocation. (A separate revocation\
    \ announcement\n   message MAY be sent to the subject of the certificate for which\n\
    \   revocation was requested.)\n  RevRepContent ::= SEQUENCE {\n      status \
    \       SEQUENCE SIZE (1..MAX) OF PKIStatusInfo,\n      -- in same order as was\
    \ sent in RevReqContent\n      revCerts  [0] SEQUENCE SIZE (1..MAX) OF CertId\
    \ OPTIONAL,\n      -- IDs for which revocation was requested (same order as status)\n\
    \      crls      [1] SEQUENCE SIZE (1..MAX) OF CertificateList  OPTIONAL\n   \
    \   -- the resulting CRLs (there may be more than one)\n  }\n"
- title: 3.3.11 Cross certification request content
  contents:
  - "3.3.11 Cross certification request content\n   Cross certification requests use\
    \ the same syntax (CertReqMessages) as\n   for normal certification requests with\
    \ the restriction that the key\n   pair MUST have been generated by the requesting\
    \ CA and the private\n   key MUST NOT be sent to the responding CA.\n   See [CRMF]\
    \ for CertReqMessages syntax.\n"
- title: 3.3.12 Cross certification response content
  contents:
  - "3.3.12 Cross certification response content\n   Cross certification responses\
    \ use the same syntax (CertRepMessage) as\n   for normal certification responses\
    \ with the restriction that no\n   encrypted private key can be sent.\n   See\
    \ Section 3.3.4 for CertRepMessage syntax.\n"
- title: 3.3.13 CA Key Update Announcement content
  contents:
  - "3.3.13 CA Key Update Announcement content\n   When a CA updates its own key pair\
    \ the following data structure MAY\n   be used to announce this event.\n  CAKeyUpdAnnContent\
    \ ::= SEQUENCE {\n      oldWithNew          Certificate, -- old pub signed with\
    \ new priv\n      newWithOld          Certificate, -- new pub signed with old\
    \ priv\n      newWithNew          Certificate  -- new pub signed with new priv\n\
    \  }\n"
- title: 3.3.14 Certificate Announcement
  contents:
  - "3.3.14 Certificate Announcement\n   This structure MAY be used to announce the\
    \ existence of certificates.\n   Note that this message is intended to be used\
    \ for those cases (if\n   any) where there is no pre-existing method for publication\
    \ of\n   certificates; it is not intended to be used where, for example, X.500\n\
    \   is the method for publication of certificates.\n     CertAnnContent ::= Certificate\n"
- title: 3.3.15 Revocation Announcement
  contents:
  - "3.3.15 Revocation Announcement\n   When a CA has revoked, or is about to revoke,\
    \ a particular\n   certificate it MAY issue an announcement of this (possibly\
    \ upcoming)\n   event.\n     RevAnnContent ::= SEQUENCE {\n         status   \
    \           PKIStatus,\n         certId              CertId,\n         willBeRevokedAt\
    \     GeneralizedTime,\n         badSinceDate        GeneralizedTime,\n      \
    \   crlDetails          Extensions  OPTIONAL\n         -- extra CRL details(e.g.,\
    \ crl number, reason, location, etc.)\n     }\n   A CA MAY use such an announcement\
    \ to warn (or notify) a subject that\n   its certificate is about to be (or has\
    \ been) revoked. This would\n   typically be used where the request for revocation\
    \ did not come from\n   the subject concerned.\n   The willBeRevokedAt field contains\
    \ the time at which a new entry will\n   be added to the relevant CRLs.\n"
- title: 3.3.16 CRL Announcement
  contents:
  - "3.3.16 CRL Announcement\n   When a CA issues a new CRL (or set of CRLs) the following\
    \ data\n   structure MAY be used to announce this event.\n     CRLAnnContent ::=\
    \ SEQUENCE OF CertificateList\n"
- title: 3.3.17 PKI Confirmation content
  contents:
  - "3.3.17 PKI Confirmation content\n   This data structure is used in three-way\
    \ protocols as the final\n   PKIMessage. Its content is the same in all cases\
    \ - actually there is\n   no content since the PKIHeader carries all the required\
    \ information.\n     PKIConfirmContent ::= NULL\n"
- title: 3.3.18 PKI General Message content
  contents:
  - "3.3.18 PKI General Message content\n  InfoTypeAndValue ::= SEQUENCE {\n     \
    \ infoType               OBJECT IDENTIFIER,\n      infoValue              ANY\
    \ DEFINED BY infoType  OPTIONAL\n  }\n  -- Example InfoTypeAndValue contents include,\
    \ but are not limited to:\n  --  { CAProtEncCert    = {id-it 1}, Certificate \
    \                    }\n  --  { SignKeyPairTypes = {id-it 2}, SEQUENCE OF AlgorithmIdentifier\
    \ }\n  --  { EncKeyPairTypes  = {id-it 3}, SEQUENCE OF AlgorithmIdentifier }\n\
    \  --  { PreferredSymmAlg = {id-it 4}, AlgorithmIdentifier             }\n  --\
    \  { CAKeyUpdateInfo  = {id-it 5}, CAKeyUpdAnnContent              }\n  --  {\
    \ CurrentCRL       = {id-it 6}, CertificateList                 }\n  -- where\
    \ {id-it} = {id-pkix 4} = {1 3 6 1 5 5 7 4}\n  -- This construct MAY also be used\
    \ to define new PKIX Certificate\n  -- Management Protocol request and response\
    \ messages, or general-\n  -- purpose (e.g., announcement) messages for future\
    \ needs or for\n  -- specific environments.\n  GenMsgContent ::= SEQUENCE OF InfoTypeAndValue\n\
    \  -- May be sent by EE, RA, or CA (depending on message content).\n  -- The OPTIONAL\
    \ infoValue parameter of InfoTypeAndValue will typically\n  -- be omitted for\
    \ some of the examples given above.  The receiver is\n  -- free to ignore any\
    \ contained OBJ. IDs that it does not recognize.\n  -- If sent from EE to CA,\
    \ the empty set indicates that the CA may send\n  -- any/all information that\
    \ it wishes.\n"
- title: 3.3.19 PKI General Response content
  contents:
  - "3.3.19 PKI General Response content\n  GenRepContent ::= SEQUENCE OF InfoTypeAndValue\n\
    \  -- The receiver is free to ignore any contained OBJ. IDs that it does\n  --\
    \ not recognize.\n"
- title: 3.3.20 Error Message content
  contents:
  - "3.3.20 Error Message content\n     ErrorMsgContent ::= SEQUENCE {\n         pKIStatusInfo\
    \          PKIStatusInfo,\n         errorCode              INTEGER           OPTIONAL,\n\
    \         -- implementation-specific error codes\n         errorDetails      \
    \     PKIFreeText       OPTIONAL\n         -- implementation-specific error details\n\
    \     }\n"
- title: 4. Mandatory PKI Management functions
  contents:
  - "4. Mandatory PKI Management functions\n   The PKI management functions outlined\
    \ in Section 1 above are\n   described in this section.\n   This section deals\
    \ with functions that are \"mandatory\" in the sense\n   that all end entity and\
    \ CA/RA implementations MUST be able to provide\n   the functionality described\
    \ (perhaps via one of the transport\n   mechanisms defined in Section 5). This\
    \ part is effectively the\n   profile of the PKI management functionality that\
    \ MUST be supported.\n   Note that not all PKI management functions result in\
    \ the creation of\n   a PKI message.\n"
- title: 4.1 Root CA initialization
  contents:
  - "4.1 Root CA initialization\n   [See Section 1.2.2 for this document's definition\
    \ of \"root CA\".]\n   A newly created root CA must produce a \"self-certificate\"\
    \ which is a\n   Certificate structure with the profile defined for the \"newWithNew\"\
    \n   certificate issued following a root CA key update.\n   In  order to make\
    \ the CA's self certificate useful to end entities\n   that do not acquire the\
    \ self certificate via \"out-of-band\" means, the\n   CA must also produce a fingerprint\
    \ for its public key.  End entities\n   that acquire this fingerprint securely\
    \ via some \"out-of-band\" means\n   can then verify the CA's self-certificate\
    \ and hence the other\n   attributes contained therein.\n   The data structure\
    \ used to carry the fingerprint is the OOBCertHash.\n"
- title: 4.2 Root CA key update
  contents:
  - "4.2 Root CA key update\n   CA keys (as all other keys) have a finite lifetime\
    \ and will have to\n   be updated on a periodic basis.  The certificates NewWithNew,\n\
    \   NewWithOld, and OldWithNew (see Section 2.4.1) are issued by the CA\n   to\
    \ aid existing end entities who hold the current self-signed CA\n   certificate\
    \ (OldWithOld) to transition securely to the new self-\n   signed CA certificate\
    \ (NewWithNew), and to aid new end entities who\n   will hold NewWithNew to acquire\
    \ OldWithOld securely for verification\n   of existing data.\n"
- title: 4.3 Subordinate CA initialization
  contents:
  - "4.3 Subordinate CA initialization\n   [See Section 1.2.2 for this document's\
    \ definition of \"subordinate\n   CA\".]\n   From the perspective of PKI management\
    \ protocols the initialization\n   of a subordinate CA is the same as the initialization\
    \ of an end\n   entity. The only difference is that the subordinate CA must also\n\
    \   produce an initial revocation list.\n"
- title: 4.4 CRL production
  contents:
  - "4.4 CRL production\n   Before issuing any certificates a newly established CA\
    \ (which issues\n   CRLs) must produce \"empty\" versions of each CRL which is\
    \ to be\n   periodically produced.\n"
- title: 4.5 PKI information request
  contents:
  - "4.5 PKI information request\n   When a PKI entity (CA, RA, or EE) wishes to acquire\
    \ information about\n   the current status of a CA it MAY send that CA a request\
    \ for such\n   information.\n   The CA must respond to the request by providing\
    \ (at least) all of the\n   information requested by the requester.  If some of\
    \ the information\n   cannot be provided then an error must be conveyed to the\
    \ requester.\n   If PKIMessages are used to request and supply this PKI information,\n\
    \   then the request must be the GenMsg message, the response must be the\n  \
    \ GenRep message, and the error must be the Error message.  These\n   messages\
    \ are protected using a MAC based on shared secret information\n   (i.e., PasswordBasedMAC)\
    \ or any other authenticated means (if the end\n   entity has an existing certificate).\n"
- title: 4.6 Cross certification
  contents:
  - "4.6 Cross certification\n   The requester CA is the CA that will become the subject\
    \ of the\n   cross-certificate; the responder CA will become the issuer of the\n\
    \   cross-certificate.\n   The requester CA must be \"up and running\" before\
    \ initiating the\n   cross-certification operation.\n"
- title: '4.6.1 One-way request-response scheme:'
  contents:
  - "4.6.1 One-way request-response scheme:\n   The cross-certification scheme is\
    \ essentially a one way operation;\n   that is, when successful, this operation\
    \ results in the creation of\n   one new cross-certificate. If the requirement\
    \ is that cross-\n   certificates be created in \"both directions\" then each\
    \ CA in turn\n   must initiate a cross-certification operation (or use another\n\
    \   scheme).\n   This scheme is suitable where the two CAs in question can already\n\
    \   verify each other's signatures (they have some common points of\n   trust)\
    \ or where there is an out-of-band verification of the origin of\n   the certification\
    \ request.\n   Detailed Description:\n   Cross certification is initiated at one\
    \ CA known as the responder.\n   The CA administrator for the responder identifies\
    \ the CA it wants to\n   cross certify and the responder CA equipment generates\
    \ an\n   authorization code.  The responder CA administrator passes this\n   authorization\
    \ code by out-of-band means to the requester CA\n   administrator. The requester\
    \ CA administrator enters the\n   authorization code at the requester CA in order\
    \ to initiate the on-\n   line exchange.\n   The authorization code is used for\
    \ authentication and integrity\n   purposes. This is done by generating a symmetric\
    \ key based on the\n   authorization code and using the symmetric key for generating\
    \ Message\n   Authentication Codes (MACs) on all messages exchanged.\n   The requester\
    \ CA initiates the exchange by generating a random number\n   (requester random\
    \ number). The requester CA then sends to the\n   responder CA the cross certification\
    \ request (ccr) message. The\n   fields in this message are protected from modification\
    \ with a MAC\n   based on the authorization code.\n   Upon receipt of the ccr\
    \ message, the responder CA checks the protocol\n   version, saves the requester\
    \ random number, generates its own random\n   number (responder random number)\
    \ and validates the MAC. It then\n   generates (and archives, if desired) a new\
    \ requester certificate that\n   contains the requester CA public key and is signed\
    \ with the responder\n   CA signature private key. The responder CA responds with\
    \ the cross\n   certification response (ccp) message. The fields in this message\
    \ are\n   protected from modification with a MAC based on the authorization\n\
    \   code.\n   Upon receipt of the ccp message, the requester CA checks that its\
    \ own\n   system time is close to the responder CA system time, checks the\n \
    \  received random numbers and validates the MAC.  The requester CA\n   responds\
    \ with the PKIConfirm message. The fields in this message are\n   protected from\
    \ modification with a MAC based on the authorization\n   code.  The requester\
    \ CA writes the requester certificate to the\n   Repository.\n   Upon receipt\
    \ of the PKIConfirm message, the responder CA checks the\n   random numbers and\
    \ validates the MAC.\n   Notes:\n   1. The ccr message must contain a \"complete\"\
    \ certification request,\n      that is, all fields (including, e.g., a BasicConstraints\n\
    \      extension) must be specified by the requester CA.\n   2. The ccp message\
    \ SHOULD contain the verification certificate of the\n      responder CA - if\
    \ present, the requester CA must then verify this\n      certificate (for example,\
    \ via the \"out-of-band\" mechanism).\n"
- title: 4.7 End entity initialization
  contents:
  - "4.7 End entity initialization\n   As with CAs, end entities must be initialized.\
    \ Initialization of end\n   entities requires at least two steps:\n      - acquisition\
    \ of PKI information\n      - out-of-band verification of one root-CA public key\n\
    \   (other possible steps include the retrieval of trust condition\n   information\
    \ and/or out-of-band verification of other CA public keys).\n"
- title: 4.7.1 Acquisition of PKI information
  contents:
  - "4.7.1 Acquisition of PKI information\n   The information REQUIRED is:\n     \
    \ - the current root-CA public key\n      - (if the certifying CA is not a root-CA)\
    \ the certification path\n        from  the root CA to the certifying CA together\
    \ with appropriate\n        revocation lists\n      - the algorithms and algorithm\
    \ parameters which the certifying CA\n        supports for each relevant usage\n\
    \   Additional information could be required (e.g., supported extensions\n   or\
    \ CA policy information) in order to produce a certification request\n   which\
    \ will be successful. However, for simplicity we do not mandate\n   that the end\
    \ entity acquires this information via the PKI messages.\n   The end result is\
    \ simply that some certification requests may fail\n   (e.g., if the end entity\
    \ wants to generate its own encryption key but\n   the CA doesn't allow that).\n\
    \   The required information MAY be acquired as described in Section 4.5.\n"
- title: 4.7.2 Out-of-Band Verification of Root-CA Key
  contents:
  - "4.7.2 Out-of-Band Verification of Root-CA Key\n   An end entity must securely\
    \ possess the public key of its root CA.\n   One method to achieve this is to\
    \ provide the end entity with the CA's\n   self-certificate fingerprint via some\
    \ secure \"out-of-band\" means. The\n   end entity can then securely use the CA's\
    \ self-certificate.\n   See Section 4.1 for further details.\n"
- title: 4.8 Certificate Request
  contents:
  - "4.8 Certificate Request\n   An initialized end entity MAY request a certificate\
    \ at any time (as\n   part of an update procedure, or for any other purpose).\
    \  This request\n   will be made using the certification request (cr) message.\
    \  If the\n   end entity already possesses a signing key pair (with a corresponding\n\
    \   verification certificate), then this cr message will typically be\n   protected\
    \ by the entity's digital signature.  The CA returns the new\n   certificate (if\
    \ the request is successful) in a CertRepMessage.\n"
- title: 4.9 Key Update
  contents:
  - "4.9 Key Update\n   When a key pair is due to expire the relevant end entity MAY\
    \ request\n   a key update - that is, it MAY request that the CA issue a new\n\
    \   certificate for a new key pair.  The request is made using a key\n   update\
    \ request (kur) message.  If the end entity already possesses a\n   signing key\
    \ pair (with a corresponding verification certificate),\n   then this message\
    \ will typically be protected by the entity's digital\n   signature. The CA returns\
    \ the new certificate (if the request is\n   successful) in a key update response\
    \ (kup) message, which is\n   syntactically identical to a CertRepMessage.\n"
- title: 5. Transports
  contents:
  - "5. Transports\n   The transport protocols specified below allow end entities,\
    \ RAs and\n   CAs to pass PKI messages between them. There is no requirement for\n\
    \   specific security mechanisms to be applied at this level if the PKI\n   messages\
    \ are suitably protected (that is, if the OPTIONAL\n   PKIProtection parameter\
    \ is used as specified for each message).\n"
- title: 5.1 File based protocol
  contents:
  - "5.1 File based protocol\n   A file containing a PKI message MUST contain only\
    \ the DER encoding of\n   one PKI message, i.e., there MUST be no extraneous header\
    \ or trailer\n   information in the file.\n   Such files can be used to transport\
    \ PKI messages using, e.g., FTP.\n"
- title: 5.2 Direct TCP-Based Management Protocol
  contents:
  - "5.2 Direct TCP-Based Management Protocol\n   The following simple TCP-based protocol\
    \ is to be used for transport\n   of PKI messages. This protocol is suitable for\
    \ cases where an end\n   entity (or an RA) initiates a transaction and can poll\
    \ to pick up the\n   results.\n   If a transaction is initiated by a PKI entity\
    \ (RA or CA) then an end\n   entity must either supply a listener process or be\
    \ supplied with a\n   polling reference (see below) in order to allow it to pick\
    \ up the PKI\n   message from the PKI management component.\n   The protocol basically\
    \ assumes a listener process on an RA or CA\n   which can accept PKI messages\
    \ on a well-defined port (port number\n   829). Typically an initiator binds to\
    \ this port and submits the\n   initial PKI message for a given transaction ID.\
    \ The responder replies\n   with a PKI message and/or with a reference number\
    \ to be used later\n   when polling for the actual PKI message response.\n   If\
    \ a number of PKI response messages are to be produced for a given\n   request\
    \ (say if some part of the request is handled more quickly than\n   another) then\
    \ a new polling reference is also returned.\n   When the final PKI response message\
    \ has been picked up by the\n   initiator then no new polling reference is supplied.\n\
    \   The initiator of a transaction sends a \"direct TCP-based PKI message\"\n\
    \   to the recipient. The recipient responds with a similar message.\n   A \"\
    direct TCP-based PKI message\" consists of:\n         length (32-bits), flag (8-bits),\
    \ value (defined below)\n   The length field contains the number of octets of\
    \ the remainder of\n   the message (i.e., number of octets of \"value\" plus one).\
    \  All 32-bit\n   values in this protocol are specified to be in network byte\
    \ order.\n    Message name   flag     value\n    pkiMsg         '00'H    DER-encoded\
    \ PKI message\n      -- PKI message\n    pollRep        '01'H    polling reference\
    \ (32 bits),\n                            time-to-check-back (32 bits)\n     \
    \ -- poll response where no PKI message response ready; use polling\n      --\
    \ reference value (and estimated time value) for later polling\n    pollReq  \
    \      '02'H    polling reference (32 bits)\n      -- request for a PKI message\
    \ response to initial message\n    negPollRep     '03'H    '00'H\n      -- no\
    \ further polling responses (i.e., transaction complete)\n    partialMsgRep  '04'H\
    \    next polling reference (32 bits),\n                            time-to-check-back\
    \ (32 bits),\n                            DER-encoded PKI message\n      -- partial\
    \ response to initial message plus new polling reference\n      -- (and estimated\
    \ time value) to use to get next part of response\n    finalMsgRep    '05'H  \
    \  DER-encoded PKI message\n      -- final (and possibly sole) response to initial\
    \ message\n    errorMsgRep    '06'H    human readable error message\n      --\
    \ produced when an error is detected (e.g., a polling reference is\n      -- received\
    \ which doesn't exist or is finished with)\n   Where a PKIConfirm message is to\
    \ be transported (always from the\n   initiator to the responder) then a pkiMsg\
    \ message is sent and a\n   negPollRep is returned.\n   The sequence of messages\
    \ which can occur is then:\n   a) end entity sends pkiMsg and receives one of\
    \ pollRep, negPollRep,\n   partialMsgRep or finalMsgRep in response.  b) end entity\
    \ sends\n   pollReq message and receives one of negPollRep, partialMsgRep,\n \
    \  finalMsgRep or errorMsgRep in response.\n   The \"time-to-check-back\" parameter\
    \ is a 32-bit integer, defined to be\n   the number of seconds which have elapsed\
    \ since midnight, January 1,\n   1970, coordinated universal time.  It provides\
    \ an estimate of the\n   time that the end entity should send its next pollReq.\n"
- title: 5.3 Management Protocol via E-mail
  contents:
  - "5.3 Management Protocol via E-mail\n   This subsection specifies a means for\
    \ conveying ASN.1-encoded\n   messages for the protocol exchanges described in\
    \ Section 4 via\n   Internet mail.\n   A simple MIME object is specified as follows.\n\
    \      Content-Type: application/pkixcmp\n      Content-Transfer-Encoding: base64\n\
    \      <<the ASN.1 DER-encoded PKIX-CMP message, base64-encoded>>\n   This MIME\
    \ object can be sent and received using common MIME\n   processing engines and\
    \ provides a simple Internet mail transport for\n   PKIX-CMP messages.  Implementations\
    \ MAY wish to also recognize and\n   use the \"application/x-pkixcmp\" MIME type\
    \ (specified in earlier\n   versions of this document) in order to support backward\
    \ compatibility\n   wherever applicable.\n"
- title: 5.4 Management Protocol via HTTP
  contents:
  - "5.4 Management Protocol via HTTP\n   This subsection specifies a means for conveying\
    \ ASN.1-encoded\n   messages for the protocol exchanges described in Section 4\
    \ via the\n   HyperText Transfer Protocol.\n   A simple MIME object is specified\
    \ as follows.\n      Content-Type: application/pkixcmp\n      <<the ASN.1 DER-encoded\
    \ PKIX-CMP message>>\n   This MIME object can be sent and received using common\
    \ HTTP\n   processing engines over WWW links and provides a simple browser-\n\
    \   server transport for PKIX-CMP messages.  Implementations MAY wish to\n   also\
    \ recognize and use the \"application/x-pkixcmp\" MIME type\n   (specified in\
    \ earlier versions of this document) in order to support\n   backward compatibility\
    \ wherever applicable.\n"
- title: SECURITY CONSIDERATIONS
  contents:
  - "SECURITY CONSIDERATIONS\n   This entire memo is about security mechanisms.\n\
    \   One cryptographic consideration is worth explicitly spelling out. In\n   the\
    \ protocols specified above, when an end entity is required to\n   prove possession\
    \ of a decryption key, it is effectively challenged to\n   decrypt something (its\
    \ own certificate). This scheme (and many\n   others!) could be vulnerable to\
    \ an attack if the possessor of the\n   decryption key in question could be fooled\
    \ into decrypting an\n   arbitrary challenge and returning the cleartext to an\
    \ attacker.\n   Although in this specification a number of other failures in security\n\
    \   are required in order for this attack to succeed, it is conceivable\n   that\
    \ some future services (e.g., notary, trusted time) could\n   potentially be vulnerable\
    \ to such attacks. For this reason we re-\n   iterate the general rule that implementations\
    \ should be very careful\n   about decrypting arbitrary \"ciphertext\" and revealing\
    \ recovered\n   \"plaintext\" since such a practice can lead to serious security\n\
    \   vulnerabilities.\n   Note also that exposing a private key to the CA/RA as\
    \ a proof-of-\n   possession technique can carry some security risks (depending\
    \ upon\n   whether or not the CA/RA can be trusted to handle such material\n \
    \  appropriately).  Implementers are advised to exercise caution in\n   selecting\
    \ and using this particular POP mechanism.\n"
- title: References
  contents:
  - "References\n   [COR95]   ISO/IEC JTC 1/SC 21, Technical Corrigendum 2 to ISO/IEC\n\
    \             9594-8: 1990 & 1993 (1995:E), July 1995.\n   [CRMF]    Myers, M.,\
    \ Adams, C., Solo, D. and D. Kemp, \"Certificate\n             Request Message\
    \ Format\", RFC 2511, March 1999.\n   [MvOV97]  A. Menezes, P. van Oorschot, S.\
    \ Vanstone, \"Handbook of\n             Applied Cryptography\", CRC Press, 1997.\n\
    \   [PKCS7]   RSA Laboratories, \"The Public-Key Cryptography Standards\n    \
    \         (PKCS)\", RSA Data Security Inc., Redwood City, California,\n      \
    \       November 1993 Release.\n   [PKCS10]  RSA Laboratories, \"The Public-Key\
    \ Cryptography Standards\n             (PKCS)\", RSA Data Security Inc., Redwood\
    \ City, California,\n             November 1993 Release.\n   [PKCS11]  RSA Laboratories,\
    \ \"The Public-Key Cryptography Standards -\n             PKCS #11:  Cryptographic\
    \ token interface standard\", RSA\n             Data Security Inc., Redwood City,\
    \ California, April 28,\n             1995.\n   [RFC1847] Galvin, J., Murphy,\
    \ S. Crocker, S. and N. Freed, \"Security\n             Multiparts for MIME: \
    \ Multipart/Signed and Multipart/\n             Encrypted\", RFC 1847, October\
    \ 1995.\n   [RFC2104] Krawczyk, H., Bellare, M. and R. Canetti, \"HMAC:  Keyed\n\
    \             Hashing for Message Authentication\", RFC 2104, February\n     \
    \        1997.\n   [RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate\n\
    \             Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2202]\
    \ Cheng, P. and R. Glenn, \"Test Cases for HMAC-MD5 and HMAC-\n             SHA-1\"\
    , RFC 2202, September 1997.\n   [X509-AM] ISO/IEC JTC1/SC 21, Draft Amendments\
    \ DAM 4 to ISO/IEC\n             9594-2, DAM 2 to ISO/IEC 9594-6, DAM 1 to ISO/IEC\
    \ 9594-7,\n             and DAM 1 to ISO/IEC 9594-8 on Certificate Extensions,\
    \ 1\n             December, 1996.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors gratefully acknowledge the contributions of\
    \ various\n   members of the PKIX Working Group.  Many of these contributions\n\
    \   significantly clarified and improved the utility of this\n   specification.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Carlisle Adams\n   Entrust Technologies\n   750 Heron\
    \ Road, Suite E08,\n   Ottawa, Ontario\n   Canada K1V 1A7\n   EMail: cadams@entrust.com\n\
    \   Stephen Farrell\n   Software and Systems Engineering Ltd.\n   Fitzwilliam\
    \ Court\n   Leeson Close\n   Dublin 2\n   IRELAND\n   EMail: stephen.farrell@sse.ie\n"
- title: 'APPENDIX A: Reasons for the presence of RAs'
  contents:
  - "APPENDIX A: Reasons for the presence of RAs\n   The reasons which justify the\
    \ presence of an RA can be split into\n   those which are due to technical factors\
    \ and those which are\n   organizational in nature. Technical reasons include\
    \ the following.\n     -If hardware tokens are in use, then not all end entities\
    \ will have\n      the equipment needed to initialize these; the RA equipment\
    \ can\n      include the necessary functionality (this may also be a matter of\n\
    \      policy).\n     -Some end entities may not have the capability to publish\n\
    \      certificates; again, the RA may be suitably placed for this.\n     -The\
    \ RA will be able to issue signed revocation requests on behalf\n      of end\
    \ entities associated with it, whereas the end entity may not\n      be able to\
    \ do this (if the key pair is completely lost).\n   Some of the organizational\
    \ reasons which argue for the presence of an\n   RA are the following.\n     -It\
    \ may be more cost effective to concentrate functionality in the\n      RA equipment\
    \ than to supply functionality to all end entities\n      (especially if special\
    \ token initialization equipment is to be\n      used).\n     -Establishing RAs\
    \ within an organization can reduce the number of\n      CAs required, which is\
    \ sometimes desirable.\n     -RAs may be better placed to identify people with\
    \ their\n      \"electronic\" names, especially if the CA is physically remote\
    \ from\n      the end entity.\n     -For many applications there will already\
    \ be in place some\n      administrative structure so that candidates for the\
    \ role of RA are\n      easy to find (which may not be true of the CA).\n"
- title: Appendix B. PKI Management Message Profiles.
  contents:
  - "Appendix B. PKI Management Message Profiles.\n   This appendix contains detailed\
    \ profiles for those PKIMessages which\n   MUST be supported by conforming implementations\
    \ (see Section 4).\n   Profiles for the PKIMessages used in the following PKI\
    \ management\n   operations are provided:\n   - root CA key update\n   - information\
    \ request/response\n   - cross-certification request/response (1-way)\n   - initial\
    \ registration/certification\n        - basic authenticated scheme\n   - certificate\
    \ request\n   - key update\n   <<Later versions of this document may extend the\
    \ above to include\n   profiles for the operations listed below (along with other\n\
    \   operations, if desired).>>\n   - revocation request\n   - certificate publication\n\
    \   - CRL publication\n"
- title: B1. General Rules for interpretation of these profiles.
  contents:
  - "B1. General Rules for interpretation of these profiles.\n   1. Where OPTIONAL\
    \ or DEFAULT fields are not mentioned in individual\n      profiles, they SHOULD\
    \ be absent from the relevant message (i.e., a\n      receiver can validly reject\
    \ a message containing such fields as\n      being syntactically incorrect).\n\
    \      Mandatory fields are not mentioned if they have an obvious value\n    \
    \  (e.g., pvno).\n   2. Where structures occur in more than one message, they\
    \ are\n      separately profiled as appropriate.\n   3. The algorithmIdentifiers\
    \ from PKIMessage structures are profiled\n      separately.\n   4. A \"special\"\
    \ X.500 DN is called the \"NULL-DN\"; this means a DN\n      containing a zero-length\
    \ SEQUENCE OF RelativeDistinguishedNames\n      (its DER encoding is then '3000'H).\n\
    \   5. Where a GeneralName is required for a field but no suitable\n      value\
    \ is available (e.g., an end entity produces a request before\n      knowing its\
    \ name) then the GeneralName is to be an X.500 NULL-DN\n      (i.e., the Name\
    \ field of the CHOICE is to contain a NULL-DN).\n      This special value can\
    \ be called a \"NULL-GeneralName\".\n   6. Where a profile omits to specify the\
    \ value for a GeneralName\n      then the NULL-GeneralName value is to be present\
    \ in the relevant\n      PKIMessage field. This occurs with the sender field of\
    \ the\n      PKIHeader for some messages.\n   7. Where any ambiguity arises due\
    \ to naming of fields, the profile\n      names these using a \"dot\" notation\
    \ (e.g., \"certTemplate.subject\"\n      means the subject field within a field\
    \ called certTemplate).\n   8. Where a \"SEQUENCE OF types\" is part of a message,\
    \ a zero-based\n      array notation is used to describe fields within the SEQUENCE\
    \ OF\n      (e.g., crm[0].certReq.certTemplate.subject refers to a\n      subfield\
    \ of the first CertReqMsg contained in a request message).\n   9. All PKI message\
    \ exchanges in Sections B7-B10 require a PKIConfirm\n      message to be sent\
    \ by the initiating entity.  This message is not\n      included in some of the\
    \ profiles given since its body is NULL and\n      its header contents are clear\
    \ from the context.  Any authenticated\n      means can be used for the protectionAlg\
    \ (e.g., password-based MAC,\n      if shared secret information is known, or\
    \ signature).\n"
- title: B2. Algorithm Use Profile
  contents:
  - "B2. Algorithm Use Profile\n   The following table contains definitions of algorithm\
    \ uses within PKI\n   management protocols.\n   The columns in the table are:\n"
- title: 'Name:      an identifier used for message profiles'
  contents:
  - 'Name:      an identifier used for message profiles

    '
- title: 'Use:       description of where and for what the algorithm is used'
  contents:
  - 'Use:       description of where and for what the algorithm is used

    '
- title: 'Mandatory: an AlgorithmIdentifier which MUST be supported by'
  contents:
  - "Mandatory: an AlgorithmIdentifier which MUST be supported by\n           conforming\
    \ implementations\n"
- title: 'Others:    alternatives to the mandatory AlgorithmIdentifier'
  contents:
  - "Others:    alternatives to the mandatory AlgorithmIdentifier\n Name         \
    \  Use                        Mandatory        Others\n MSG_SIG_ALG    Protection\
    \ of PKI          DSA/SHA-1        RSA/MD5...\n                messages using\
    \ signature\n MSG_MAC_ALG    protection of PKI          PasswordBasedMac HMAC,\n\
    \                messages using MACing                       X9.9...\n SYM_PENC_ALG\
    \   symmetric encryption of    3-DES (3-key-    RC5,\n                an end entity's\
    \ private    EDE, CBC mode)   CAST-128...\n                key where symmetric\n\
    \                key is distributed\n                out-of-band\n PROT_ENC_ALG\
    \   asymmetric algorithm       D-H              RSA\n                used for\
    \ encryption of\n                (symmetric keys for\n                encryption\
    \ of) private\n                keys transported in\n                PKIMessages\n\
    \ PROT_SYM_ALG   symmetric encryption       3-DES (3-key-    RC5,\n          \
    \      algorithm used for         EDE, CBC mode)   CAST-128...\n             \
    \   encryption of private\n                key bits (a key of this\n         \
    \       type is encrypted using\n                PROT_ENC_ALG)\n"
- title: 'Mandatory AlgorithmIdentifiers and Specifications:'
  contents:
  - 'Mandatory AlgorithmIdentifiers and Specifications:

    '
- title: 'DSA/SHA-1:'
  contents:
  - "DSA/SHA-1:\n  AlgId:  {1 2 840 10040 4 3};\n  NIST, FIPS PUB 186: Digital Signature\
    \ Standard, 1994;\n  Public Modulus size:  1024 bits.\n"
- title: 'PasswordBasedMac:'
  contents:
  - "PasswordBasedMac:\n  {1 2 840 113533 7 66 13}, with SHA-1 {1 3 14 3 2 26} as\
    \ the owf\n    parameter and HMAC-SHA1 {1 3 6 1 5 5 8 1 2} as the mac parameter;\n\
    \  (this specification), along with\n  NIST, FIPS PUB 180-1: Secure Hash Standard,\
    \ April 1995;\n  H. Krawczyk, M. Bellare, R. Canetti, \"HMAC:  Keyed-Hashing for\
    \ Message\n    Authentication\", Internet Request for Comments 2104, February\
    \ 1997.\n"
- title: '3-DES:'
  contents:
  - "3-DES:\n  {1 2 840 113549 3 7};\n  (used in RSA's BSAFE and in S/MIME).\n"
- title: 'D-H:'
  contents:
  - "D-H:\n  AlgId:  {1 2 840 10046 2 1};\n  ANSI X9.42;\n  Public Modulus Size: \
    \ 1024 bits.\n  DHParameter ::= SEQUENCE {\n    prime INTEGER, -- p\n    base\
    \  INTEGER  -- g\n  }\n"
- title: B3. "Self-signed" certificates
  contents:
  - "B3. \"Self-signed\" certificates\n   Profile of how a Certificate structure may\
    \ be \"self-signed\". These\n   structures are used for distribution of \"root\"\
    \ CA public keys. This\n   can occur in one of three ways (see Section 2.4 above\
    \ for a\n   description of the use of these structures):\n Type          Function\n\
    \ newWithNew    a true \"self-signed\" certificate; the contained public\n   \
    \            key MUST be usable to verify the signature (though this\n       \
    \        provides only integrity and no authentication whatsoever)\n oldWithNew\
    \    previous root CA public key signed with new private key\n newWithOld    new\
    \ root CA public key signed with previous private key\n   <<Such certificates\
    \ (including relevant extensions) must contain\n   \"sensible\" values for all\
    \ fields.  For example, when present\n   subjectAltName MUST be identical to issuerAltName,\
    \ and when present\n   keyIdentifiers must contain appropriate values, et cetera.>>\n"
- title: B4. Proof of Possession Profile
  contents:
  - "B4. Proof of Possession Profile\n   POP fields for use (in signature field of\
    \ pop field of\n   ProofOfPossession structure) when proving possession of a private\n\
    \   signing key which corresponds to a public verification key for which\n   a\
    \ certificate has been requested.\n    Field               Value         Comment\n\
    \    algorithmIdentifier MSG_SIG_ALG   only signature protection is\n        \
    \                              allowed for this proof\n    signature         \
    \  present       bits calculated using MSG_SIG_ALG\n   <<Proof of possession of\
    \ a private decryption key which corresponds\n   to a public encryption key for\
    \ which a certificate has been requested\n   does not use this profile; instead\
    \ the method given in protectionAlg\n   for PKIConfirm in Section B8 is used.>>\n\
    \   Not every CA/RA will do Proof-of-Possession (of signing key,\n   decryption\
    \ key, or key agreement key) in the PKIX-CMP in-band\n   certification request\
    \ protocol (how POP is done MAY ultimately be a\n   policy issue which is made\
    \ explicit for any given CA in its\n   publicized Policy OID and Certification\
    \ Practice Statement).\n   However, this specification MANDATES that CA/RA entities\
    \ MUST do POP\n   (by some means) as part of the certification process.  All end\n\
    \   entities MUST be prepared to provide POP (i.e., these components of\n   the\
    \ PKIX-CMP protocol MUST be supported).\n"
- title: B5. Root CA Key Update
  contents:
  - "B5. Root CA Key Update\n   A root CA updates its key pair. It then produces a\
    \ CA key update\n   announcement message which can be made available (via one\
    \ of the\n   transport mechanisms) to the relevant end entities.  A PKIConfirm\n\
    \   message is NOT REQUIRED from the end entities.\n   ckuann message:\n    Field\
    \        Value                        Comment\n    sender       CA name      \
    \                responding CA name\n    body         ckuann(CAKeyUpdAnnContent)\n\
    \    oldWithNew   present                      see Section B3 above\n    newWithOld\
    \   present                      see Section B3 above\n    newWithNew   present\
    \                      see Section B3 above\n    extraCerts   optionally present\
    \           can be used to \"publish\"\n                                     \
    \         certificates (e.g.,\n                                              certificates\
    \ signed using\n                                              the new private\
    \ key)\n"
- title: B6. PKI Information request/response
  contents:
  - "B6. PKI Information request/response\n   The end entity sends general message\
    \ to the PKI requesting details\n   which will be required for later PKI management\
    \ operations.  RA/CA\n   responds with general response. If an RA generates the\
    \ response then\n   it will simply forward the equivalent message which it previously\n\
    \   received from the CA, with the possible addition of the certificates\n   to\
    \ the extraCerts fields of the PKIMessage.  A PKIConfirm message is\n   NOT REQUIRED\
    \ from the end entity.\n"
- title: 'Message Flows:'
  contents:
  - 'Message Flows:

    '
- title: Step#   End entity                                    PKI
  contents:
  - "Step#   End entity                                    PKI\n  1     format genm\n\
    \  2                      ->      genm      ->\n  3                          \
    \                         handle genm\n  4                                   \
    \                produce genp\n  5                      <-      genp      <-\n\
    \  6     handle genp\n"
- title: 'genm:'
  contents:
  - 'genm:

    '
- title: Field               Value
  contents:
  - 'Field               Value

    '
- title: recipient           CA name
  contents:
  - "recipient           CA name\n  -- the name of the CA as contained in issuerAltName\
    \ extensions or\n  -- issuer fields within certificates\n"
- title: protectionAlg       MSG_MAC_ALG or MSG_SIG_ALG
  contents:
  - "protectionAlg       MSG_MAC_ALG or MSG_SIG_ALG\n  -- any authenticated protection\
    \ alg.\n"
- title: SenderKID           present if required
  contents:
  - "SenderKID           present if required\n  -- must be present if required for\
    \ verification of message protection\n"
- title: freeText            any valid value
  contents:
  - 'freeText            any valid value

    '
- title: body                genr (GenReqContent)
  contents:
  - 'body                genr (GenReqContent)

    '
- title: GenMsgContent       empty SEQUENCE
  contents:
  - "GenMsgContent       empty SEQUENCE\n  -- all relevant information requested\n"
- title: protection          present
  contents:
  - "protection          present\n  -- bits calculated using MSG_MAC_ALG or MSG_SIG_ALG\n"
- title: 'genp:'
  contents:
  - 'genp:

    '
- title: Field                Value
  contents:
  - 'Field                Value

    '
- title: sender               CA name
  contents:
  - "sender               CA name\n  -- name of the CA which produced the message\n"
- title: protectionAlg        MSG_MAC_ALG or MSG_SIG_ALG
  contents:
  - "protectionAlg        MSG_MAC_ALG or MSG_SIG_ALG\n  -- any authenticated protection\
    \ alg.\n"
- title: senderKID            present if required
  contents:
  - "senderKID            present if required\n  -- must be present if required for\
    \ verification of message protection\n"
- title: body                 genp (GenRepContent)
  contents:
  - 'body                 genp (GenRepContent)

    '
- title: CAProtEncCert        present (object identifier one
  contents:
  - "CAProtEncCert        present (object identifier one\n                     of\
    \ PROT_ENC_ALG), with relevant\n                     value\n  -- to be used if\
    \ end entity needs to encrypt information for the CA\n  -- (e.g., private key\
    \ for recovery purposes)\n"
- title: SignKeyPairTypes     present, with relevant value
  contents:
  - "SignKeyPairTypes     present, with relevant value\n  -- the set of signature\
    \ algorithm identifiers which this CA will\n  -- certify for subject public keys\n"
- title: EncKeyPairTypes      present, with relevant value
  contents:
  - "EncKeyPairTypes      present, with relevant value\n  -- the set of encryption/key\
    \ agreement algorithm identifiers which\n  -- this CA will certify for subject\
    \ public keys\n"
- title: PreferredSymmAlg     present (object identifier one
  contents:
  - "PreferredSymmAlg     present (object identifier one\n                     of\
    \ PROT_SYM_ALG) , with relevant\n                     value\n  -- the symmetric\
    \ algorithm which this CA expects to be used in later\n  -- PKI messages (for\
    \ encryption)\n"
- title: CAKeyUpdateInfo      optionally present, with
  contents:
  - "CAKeyUpdateInfo      optionally present, with\n                     relevant\
    \ value\n  -- the CA MAY provide information about a relevant root CA key pair\n\
    \  -- using this field (note that this does not imply that the responding\n  --\
    \ CA is the root CA in question)\n"
- title: CurrentCRL           optionally present, with relevant value
  contents:
  - "CurrentCRL           optionally present, with relevant value\n  -- the CA MAY\
    \ provide a copy of a complete CRL (i.e., fullest possible\n  -- one)\n"
- title: protection           present
  contents:
  - "protection           present\n  -- bits calculated using MSG_MAC_ALG or MSG_SIG_ALG\n"
- title: extraCerts           optionally present
  contents:
  - "extraCerts           optionally present\n  -- can be used to send some certificates\
    \ to the end entity. An RA MAY\n  -- add its certificate here.\n"
- title: B7. Cross certification request/response (1-way)
  contents:
  - "B7. Cross certification request/response (1-way)\n   Creation of a single cross-certificate\
    \ (i.e., not two at once). The\n   requesting CA MAY choose who is responsible\
    \ for publication of the\n   cross-certificate created by the responding CA through\
    \ use of the\n   PKIPublicationInfo control.\n   Preconditions:\n   1. Responding\
    \ CA can verify the origin of the request (possibly\n      requiring out-of-band\
    \ means) before processing the request.\n   2. Requesting CA can authenticate\
    \ the authenticity of the origin of\n      the response (possibly requiring out-of-band\
    \ means) before\n      processing the response\n"
- title: 'Message Flows:'
  contents:
  - 'Message Flows:

    '
- title: Step#   Requesting CA                                  Responding CA
  contents:
  - "Step#   Requesting CA                                  Responding CA\n  1   \
    \  format ccr\n  2                        ->       ccr       ->\n  3         \
    \                                            handle ccr\n  4                 \
    \                                    produce ccp\n  5                        <-\
    \       ccp       <-\n  6     handle ccp\n  7     format conf\n  8           \
    \             ->       conf      ->\n  9                                     \
    \                handle conf\n"
- title: 'ccr:'
  contents:
  - 'ccr:

    '
- title: Field                 Value
  contents:
  - 'Field                 Value

    '
- title: sender                Requesting CA name
  contents:
  - "sender                Requesting CA name\n  -- the name of the CA who produced\
    \ the message\n"
- title: recipient             Responding CA name
  contents:
  - "recipient             Responding CA name\n  -- the name of the CA who is being\
    \ asked to produce a certificate\n"
- title: messageTime           time of production of message
  contents:
  - "messageTime           time of production of message\n  -- current time at requesting\
    \ CA\n"
- title: protectionAlg         MSG_SIG_ALG
  contents:
  - "protectionAlg         MSG_SIG_ALG\n  -- only signature protection is allowed\
    \ for this request\n"
- title: senderKID             present if required
  contents:
  - "senderKID             present if required\n  -- must be present if required for\
    \ verification of message protection\n"
- title: transactionID         present
  contents:
  - "transactionID         present\n  -- implementation-specific value, meaningful\
    \ to requesting CA.\n  -- [If already in use at responding CA then a rejection\
    \ message\n  -- MUST be produced by responding CA]\n"
- title: senderNonce           present
  contents:
  - "senderNonce           present\n  -- 128 (pseudo-)random bits\n"
- title: freeText              any valid value
  contents:
  - 'freeText              any valid value

    '
- title: body                  ccr (CertReqMessages)
  contents:
  - "body                  ccr (CertReqMessages)\n                      only one CertReqMsg\n\
    \                      allowed\n  -- if multiple cross certificates are required\
    \ they MUST be packaged\n  -- in separate PKIMessages\n"
- title: certTemplate          present
  contents:
  - "certTemplate          present\n  -- details follow\n"
- title: version               v1 or v3
  contents:
  - "version               v1 or v3\n  -- <<v3 STRONGLY RECOMMENDED>>\n"
- title: signingAlg            present
  contents:
  - "signingAlg            present\n  -- the requesting CA must know in advance with\
    \ which algorithm it\n  -- wishes the certificate to be signed\n"
- title: subject               present
  contents:
  - "subject               present\n  -- may be NULL-DN only if subjectAltNames extension\
    \ value proposed\n"
- title: validity              present
  contents:
  - "validity              present\n  -- MUST be completely specified (i.e., both\
    \ fields present)\n"
- title: issuer                present
  contents:
  - "issuer                present\n  -- may be NULL-DN only if issuerAltNames extension\
    \ value proposed\n"
- title: publicKey             present
  contents:
  - "publicKey             present\n  -- the key to be certified (which must be for\
    \ a signing algorithm)\n"
- title: extensions            optionally present
  contents:
  - "extensions            optionally present\n  -- a requesting CA must propose values\
    \ for all extensions which it\n  -- requires to be in the cross-certificate\n"
- title: POPOSigningKey        present
  contents:
  - "POPOSigningKey        present\n  -- see \"Proof of possession profile\" (Section\
    \ B4)\n"
- title: protection            present
  contents:
  - "protection            present\n  -- bits calculated using MSG_SIG_ALG\n"
- title: extraCerts            optionally present
  contents:
  - "extraCerts            optionally present\n  -- MAY contain any additional certificates\
    \ that requester wishes\n  -- to include\n"
- title: 'ccp:'
  contents:
  - 'ccp:

    '
- title: Field                 Value
  contents:
  - 'Field                 Value

    '
- title: sender                Responding CA name
  contents:
  - "sender                Responding CA name\n  -- the name of the CA who produced\
    \ the message\n"
- title: recipient             Requesting CA name
  contents:
  - "recipient             Requesting CA name\n  -- the name of the CA who asked for\
    \ production of a certificate\n"
- title: messageTime           time of production of message
  contents:
  - "messageTime           time of production of message\n  -- current time at responding\
    \ CA\n"
- title: protectionAlg         MSG_SIG_ALG
  contents:
  - "protectionAlg         MSG_SIG_ALG\n  -- only signature protection is allowed\
    \ for this message\n"
- title: senderKID             present if required
  contents:
  - "senderKID             present if required\n  -- must be present if required for\
    \ verification of message\n  -- protection\n"
- title: recipKID              present if required
  contents:
  - 'recipKID              present if required

    '
- title: transactionID         present
  contents:
  - "transactionID         present\n  -- value from corresponding ccr message\n"
- title: senderNonce           present
  contents:
  - "senderNonce           present\n  -- 128 (pseudo-)random bits\n"
- title: recipNonce            present
  contents:
  - "recipNonce            present\n  -- senderNonce from corresponding ccr message\n"
- title: freeText              any valid value
  contents:
  - 'freeText              any valid value

    '
- title: body                  ccp (CertRepMessage)
  contents:
  - "body                  ccp (CertRepMessage)\n                      only one CertResponse\
    \ allowed\n  -- if multiple cross certificates are required they MUST be packaged\n\
    \  -- in separate PKIMessages\n"
- title: response              present
  contents:
  - 'response              present

    '
- title: status                present
  contents:
  - 'status                present

    '
- title: PKIStatusInfo.status  present
  contents:
  - "PKIStatusInfo.status  present\n  -- if PKIStatusInfo.status is one of:\n  --\
    \   granted, or\n  --   grantedWithMods,\n  -- then certifiedKeyPair MUST be present\
    \ and failInfo MUST be absent\n"
- title: failInfo              present depending on
  contents:
  - "failInfo              present depending on\n                      PKIStatusInfo.status\n\
    \  -- if PKIStatusInfo.status is:\n  --   rejection\n  -- then certifiedKeyPair\
    \ MUST be absent and failInfo MUST be present\n  -- and contain appropriate bit\
    \ settings\n"
- title: certifiedKeyPair      present depending on
  contents:
  - "certifiedKeyPair      present depending on\n                      PKIStatusInfo.status\n"
- title: certificate           present depending on
  contents:
  - "certificate           present depending on\n                      certifiedKeyPair\n\
    \  -- content of actual certificate must be examined by requesting CA\n  -- before\
    \ publication\n"
- title: protection            present
  contents:
  - "protection            present\n  -- bits calculated using MSG_SIG_ALG\n"
- title: extraCerts            optionally present
  contents:
  - "extraCerts            optionally present\n  -- MAY contain any additional certificates\
    \ that responder wishes\n  -- to include\n"
- title: B8. Initial Registration/Certification (Basic Authenticated Scheme)
  contents:
  - "B8. Initial Registration/Certification (Basic Authenticated Scheme)\n   An (uninitialized)\
    \ end entity requests a (first) certificate from a\n   CA. When the CA responds\
    \ with a message containing a certificate, the\n   end entity replies with a confirmation.\
    \ All messages are\n   authenticated.\n   This scheme allows the end entity to\
    \ request certification of a\n   locally-generated public key (typically a signature\
    \ key). The end\n   entity MAY also choose to request the centralized generation\
    \ and\n   certification of another key pair (typically an encryption key pair).\n\
    \   Certification may only be requested for one locally generated public\n   key\
    \ (for more, use separate PKIMessages).\n   The end entity MUST support proof-of-possession\
    \ of the private key\n   associated with the locally-generated public key.\n \
    \  Preconditions:\n   1. The end entity can authenticate the CA's signature based\
    \ on\n      out-of-band means\n   2. The end entity and the CA share a symmetric\
    \ MACing key\n   Message flow:\n   Step#    End entity                       \
    \             PKI\n     1      format ir\n     2                         ->  \
    \    ir       ->\n     3                                                    handle\
    \ ir\n     4                                                    format ip\n  \
    \   5                         <-      ip       <-\n     6      handle ip\n   \
    \  7      format conf\n     8                         ->      conf     ->\n  \
    \   9                                                    handle conf\n   For this\
    \ profile, we mandate that the end entity MUST include all\n   (i.e., one or two)\
    \ CertReqMsg in a single PKIMessage and that the PKI\n   (CA) MUST produce a single\
    \ response PKIMessage which contains the\n   complete response (i.e., including\
    \ the OPTIONAL second key pair, if\n   it was requested and if centralized key\
    \ generation is supported). For\n   simplicity, we also mandate that this message\
    \ MUST be the final one\n   (i.e., no use of \"waiting\" status value).\n"
- title: 'ir:'
  contents:
  - 'ir:

    '
- title: Field                Value
  contents:
  - 'Field                Value

    '
- title: recipient            CA name
  contents:
  - "recipient            CA name\n  -- the name of the CA who is being asked to produce\
    \ a certificate\n"
- title: protectionAlg        MSG_MAC_ALG
  contents:
  - "protectionAlg        MSG_MAC_ALG\n  -- only MAC protection is allowed for this\
    \ request, based on\n  -- initial authentication key\n"
- title: senderKID            referenceNum
  contents:
  - "senderKID            referenceNum\n  -- the reference number which the CA has\
    \ previously issued to\n  -- the end entity (together with the MACing key)\n"
- title: transactionID        present
  contents:
  - "transactionID        present\n  -- implementation-specific value, meaningful\
    \ to end entity.\n  -- [If already in use at the CA then a rejection message MUST\
    \ be\n  -- produced by the CA]\n"
- title: senderNonce          present
  contents:
  - "senderNonce          present\n  -- 128 (pseudo-)random bits\n"
- title: freeText             any valid value
  contents:
  - 'freeText             any valid value

    '
- title: body                 ir (CertReqMessages)
  contents:
  - "body                 ir (CertReqMessages)\n                     only one or two\
    \ CertReqMsg\n                     are allowed\n  -- if more certificates are\
    \ required requests MUST be packaged in\n  -- separate PKIMessages\n"
- title: CertReqMsg           one or two present
  contents:
  - "CertReqMsg           one or two present\n  -- see below for details, note: crm[0]\
    \ means the first (which MUST\n  -- be present), crm[1] means the second (which\
    \ is OPTIONAL, and used\n  -- to ask for a centrally-generated key)\n"
- title: crm[0].certReq.      fixed value of zero
  contents:
  - "crm[0].certReq.      fixed value of zero\n   certReqId\n  -- this is the index\
    \ of the template within the message\n"
- title: crm[0].certReq       present
  contents:
  - "crm[0].certReq       present\n   certTemplate\n  -- MUST include subject public\
    \ key value, otherwise unconstrained\n"
- title: crm[0].pop...        optionally present if public key
  contents:
  - "crm[0].pop...        optionally present if public key\n   POPOSigningKey    from\
    \ crm[0].certReq.certTemplate is\n                     a signing key\n  -- proof\
    \ of possession MAY be required in this exchange (see Section\n  -- B4 for details)\n"
- title: crm[0].certReq.      optionally present
  contents:
  - "crm[0].certReq.      optionally present\n   controls.archiveOptions\n  -- the\
    \ end entity MAY request that the locally-generated private key\n  -- be archived\n"
- title: crm[0].certReq.      optionally present
  contents:
  - "crm[0].certReq.      optionally present\n   controls.publicationInfo\n  -- the\
    \ end entity MAY ask for publication of resulting cert.\n"
- title: crm[1].certReq       fixed value of one
  contents:
  - "crm[1].certReq       fixed value of one\n   certReqId\n  -- the index of the\
    \ template within the message\n"
- title: crm[1].certReq       present
  contents:
  - "crm[1].certReq       present\n   certTemplate\n  -- MUST NOT include actual public\
    \ key bits, otherwise unconstrained\n  -- (e.g., the names need not be the same\
    \ as in crm[0])\n"
- title: crm[0].certReq.      present [object identifier MUST be PROT_ENC_ALG]
  contents:
  - "crm[0].certReq.      present [object identifier MUST be PROT_ENC_ALG]\n   controls.protocolEncKey\n\
    \  -- if centralized key generation is supported by this CA, this\n  -- short-term\
    \ asymmetric encryption key (generated by the end entity)\n  -- will be used by\
    \ the CA to encrypt (a symmetric key used to encrypt)\n  -- a private key generated\
    \ by the CA on behalf of the end entity\n"
- title: crm[1].certReq.      optionally present
  contents:
  - "crm[1].certReq.      optionally present\n   controls.archiveOptions\n"
- title: crm[1].certReq.      optionally present
  contents:
  - "crm[1].certReq.      optionally present\n   controls.publicationInfo\n"
- title: protection           present
  contents:
  - "protection           present\n  -- bits calculated using MSG_MAC_ALG\n"
- title: 'ip:'
  contents:
  - 'ip:

    '
- title: Field                Value
  contents:
  - 'Field                Value

    '
- title: sender               CA name
  contents:
  - "sender               CA name\n  -- the name of the CA who produced the message\n"
- title: messageTime          present
  contents:
  - "messageTime          present\n  -- time at which CA produced message\n"
- title: protectionAlg        MS_MAC_ALG
  contents:
  - "protectionAlg        MS_MAC_ALG\n  -- only MAC protection is allowed for this\
    \ response\n"
- title: recipKID             referenceNum
  contents:
  - "recipKID             referenceNum\n  -- the reference number which the CA has\
    \ previously issued to the\n  -- end entity (together with the MACing key)\n"
- title: transactionID        present
  contents:
  - "transactionID        present\n  -- value from corresponding ir message\n"
- title: senderNonce          present
  contents:
  - "senderNonce          present\n  -- 128 (pseudo-)random bits\n"
- title: recipNonce           present
  contents:
  - "recipNonce           present\n  -- value from senderNonce in corresponding ir\
    \ message\n"
- title: freeText             any valid value
  contents:
  - 'freeText             any valid value

    '
- title: body                 ir (CertRepMessage)
  contents:
  - "body                 ir (CertRepMessage)\n                     contains exactly\
    \ one response\n                     for each request\n  -- The PKI (CA) responds\
    \ to either one or two requests as appropriate.\n  -- crc[0] denotes the first\
    \ (always present); crc[1] denotes the\n  -- second (only present if the ir message\
    \ contained two requests and\n  -- if the CA supports centralized key generation).\n"
- title: crc[0].              fixed value of zero
  contents:
  - "crc[0].              fixed value of zero\n   certReqId\n  -- MUST contain the\
    \ response to the first request in the corresponding\n  -- ir message\n"
- title: 'crc[0].status.       present, positive values allowed:'
  contents:
  - "crc[0].status.       present, positive values allowed:\n   status           \
    \    \"granted\", \"grantedWithMods\"\n                     negative values allowed:\n\
    \                        \"rejection\"\n"
- title: crc[0].status.       present if and only if
  contents:
  - "crc[0].status.       present if and only if\n   failInfo          crc[0].status.status\
    \ is \"rejection\"\n"
- title: crc[0].              present if and only if
  contents:
  - "crc[0].              present if and only if\n   certifiedKeyPair  crc[0].status.status\
    \ is\n                        \"granted\" or \"grantedWithMods\"\n"
- title: certificate          present unless end entity's public
  contents:
  - "certificate          present unless end entity's public\n                   \
    \  key is an encryption key and POP\n                     is done in this in-band\
    \ exchange\n"
- title: encryptedCert        present if and only if end entity's
  contents:
  - "encryptedCert        present if and only if end entity's\n                  \
    \   public key is an encryption key and\n                     POP done in this\
    \ in-band exchange\n"
- title: publicationInfo      optionally present
  contents:
  - "publicationInfo      optionally present\n  -- indicates where certificate has\
    \ been published (present at\n  -- discretion of CA)\n"
- title: crc[1].              fixed value of one
  contents:
  - "crc[1].              fixed value of one\n   certReqId\n  -- MUST contain the\
    \ response to the second request in the\n  -- corresponding ir message\n"
- title: 'crc[1].status.       present, positive values allowed:'
  contents:
  - "crc[1].status.       present, positive values allowed:\n   status           \
    \    \"granted\", \"grantedWithMods\"\n                     negative values allowed:\n\
    \                        \"rejection\"\n"
- title: crc[1].status.       present if and only if
  contents:
  - "crc[1].status.       present if and only if\n   failInfo          crc[0].status.status\
    \ is \"rejection\"\n"
- title: crc[1].              present if and only if
  contents:
  - "crc[1].              present if and only if\n   certifiedKeyPair  crc[0].status.status\
    \ is \"granted\"\n                     or \"grantedWithMods\"\n"
- title: certificate          present
  contents:
  - 'certificate          present

    '
- title: privateKey           present
  contents:
  - 'privateKey           present

    '
- title: publicationInfo      optionally present
  contents:
  - "publicationInfo      optionally present\n  -- indicates where certificate has\
    \ been published (present at\n  -- discretion of CA)\n"
- title: protection           present
  contents:
  - "protection           present\n  -- bits calculated using MSG_MAC_ALG\n"
- title: extraCerts           optionally present
  contents:
  - "extraCerts           optionally present\n  -- the CA MAY provide additional certificates\
    \ to the end entity\n"
- title: 'conf:'
  contents:
  - 'conf:

    '
- title: Field                Value
  contents:
  - 'Field                Value

    '
- title: recipient            CA name
  contents:
  - "recipient            CA name\n  -- the name of the CA who was asked to produce\
    \ a certificate\n"
- title: transactionID        present
  contents:
  - "transactionID        present\n  -- value from corresponding ir and ip messages\n"
- title: senderNonce          present
  contents:
  - "senderNonce          present\n  -- value from recipNonce in corresponding ip\
    \ message\n"
- title: recipNonce           present
  contents:
  - "recipNonce           present\n  -- value from senderNonce in corresponding ip\
    \ message\n"
- title: protectionAlg        MSG_MAC_ALG
  contents:
  - "protectionAlg        MSG_MAC_ALG\n  -- only MAC protection is allowed for this\
    \ message.  The MAC is\n  -- based on the initial authentication key if only a\
    \ signing key\n  -- pair has been sent in ir for certification, or if POP is not\n\
    \  -- done in this in-band exchange.  Otherwise, the MAC is based on\n  -- a key\
    \ derived from the symmetric key used to decrypt the\n  -- returned encryptedCert.\n"
- title: senderKID            referenceNum
  contents:
  - "senderKID            referenceNum\n  -- the reference number which the CA has\
    \ previously issued to the\n  -- end entity (together with the MACing key)\n"
- title: body                 conf (PKIConfirmContent)
  contents:
  - "body                 conf (PKIConfirmContent)\n  -- this is an ASN.1 NULL\n"
- title: protection           present
  contents:
  - "protection           present\n  -- bits calculated using MSG_MAC_ALG\n"
- title: B9. Certificate Request
  contents:
  - "B9. Certificate Request\n   An (initialized) end entity requests a certificate\
    \ from a CA (for any\n   reason). When the CA responds with a message containing\
    \ a\n   certificate, the end entity replies with a confirmation. All messages\n\
    \   are authenticated.\n   The profile for this exchange is identical to that\
    \ given in Section\n   B8 with the following exceptions:\n     - protectionAlg\
    \ may be MSG_MAC_ALG or MSG_SIG_ALG in request,\n       response, and confirm\
    \ messages (the determination in the confirm\n       message being dependent upon\
    \ POP considerations for key-\n       encipherment and key- agreement certificate\
    \ requests);\n     - senderKID and recipKID are only present if required for message\n\
    \       verification;\n     - body is cr or cp;\n       - protocolEncKey is not\
    \ present;\n     - protection bits are calculated according to the protectionAlg\n\
    \       field.\n"
- title: B10. Key Update Request
  contents:
  - "B10. Key Update Request\n   An (initialized) end entity requests a certificate\
    \ from a CA (to\n   update the key pair and corresponding certificate that it\
    \ already\n   possesses). When the CA responds with a message containing a\n \
    \  certificate, the end entity replies with a confirmation. All messages\n   are\
    \ authenticated.\n   The profile for this exchange is identical to that given\
    \ in Section\n   B8 with the following exceptions:\n     - protectionAlg may be\
    \ MSG_MAC_ALG or MSG_SIG_ALG in request,\n       response, and confirm messages\
    \ (the determination in the confirm\n       message being dependent upon POP considerations\
    \ for key-\n       encipherment and key- agreement certificate requests);\n  \
    \   - senderKID and recipKID are only present if required for message\n      \
    \ verification;\n     - body is kur or kup;\n     - protection bits are calculated\
    \ according to the protectionAlg\n       field.\n"
- title: 'Appendix C: "Compilable" ASN.1 Module using 1988 Syntax'
  contents:
  - "Appendix C: \"Compilable\" ASN.1 Module using 1988 Syntax\n  PKIXCMP {iso(1)\
    \ identified-organization(3) dod(6) internet(1)\n     security(5) mechanisms(5)\
    \ pkix(7) id-mod(0) id-mod-cmp(9)}\n  DEFINITIONS EXPLICIT TAGS ::=\n  BEGIN\n\
    \  -- EXPORTS ALL --\n  IMPORTS\n      Certificate, CertificateList, Extensions,\
    \ AlgorithmIdentifier\n             FROM PKIX1Explicit88 {iso(1) identified-organization(3)\n\
    \             dod(6) internet(1) security(5) mechanisms(5) pkix(7)\n         \
    \    id-mod(0) id-pkix1-explicit-88(1)}}\n      GeneralName, KeyIdentifier, ReasonFlags\n\
    \             FROM PKIX1Implicit88 {iso(1) identified-organization(3)\n      \
    \       dod(6) internet(1) security(5) mechanisms(5) pkix(7)\n             id-mod(0)\
    \ id-pkix1-implicit-88(2)}\n      CertTemplate, PKIPublicationInfo, EncryptedValue,\
    \ CertId,\n      CertReqMessages\n             FROM PKIXCRMF {iso(1) identified-organization(3)\n\
    \             dod(6) internet(1) security(5) mechanisms(5) pkix(7)\n         \
    \    id-mod(0) id-mod-crmf(5)}}\n      -- CertificationRequest\n      --     FROM\
    \ PKCS10 {no standard ASN.1 module defined;\n      --     implementers need to\
    \ create their own module to import\n      --     from, or directly include the\
    \ PKCS10 syntax in this module}\n                       --  Locally defined OIDs\
    \  --\n  PKIMessage ::= SEQUENCE {\n      header           PKIHeader,\n      body\
    \             PKIBody,\n      protection   [0] PKIProtection OPTIONAL,\n     \
    \ extraCerts   [1] SEQUENCE SIZE (1..MAX) OF Certificate OPTIONAL\n  }\n  PKIHeader\
    \ ::= SEQUENCE {\n      pvno                INTEGER     { ietf-version2 (1) },\n\
    \      sender              GeneralName,\n      -- identifies the sender\n    \
    \  recipient           GeneralName,\n      -- identifies the intended recipient\n\
    \      messageTime     [0] GeneralizedTime         OPTIONAL,\n      -- time of\
    \ production of this message (used when sender\n      -- believes that the transport\
    \ will be \"suitable\"; i.e.,\n      -- that the time will still be meaningful\
    \ upon receipt)\n      protectionAlg   [1] AlgorithmIdentifier     OPTIONAL,\n\
    \      -- algorithm used for calculation of protection bits\n      senderKID \
    \      [2] KeyIdentifier           OPTIONAL,\n      recipKID        [3] KeyIdentifier\
    \           OPTIONAL,\n      -- to identify specific keys used for protection\n\
    \      transactionID   [4] OCTET STRING            OPTIONAL,\n      -- identifies\
    \ the transaction; i.e., this will be the same in\n      -- corresponding request,\
    \ response and confirmation messages\n      senderNonce     [5] OCTET STRING \
    \           OPTIONAL,\n      recipNonce      [6] OCTET STRING            OPTIONAL,\n\
    \      -- nonces used to provide replay protection, senderNonce\n      -- is inserted\
    \ by the creator of this message; recipNonce\n      -- is a nonce previously inserted\
    \ in a related message by\n      -- the intended recipient of this message\n \
    \     freeText        [7] PKIFreeText             OPTIONAL,\n      -- this may\
    \ be used to indicate context-specific instructions\n      -- (this field is intended\
    \ for human consumption)\n      generalInfo     [8] SEQUENCE SIZE (1..MAX) OF\n\
    \                             InfoTypeAndValue     OPTIONAL\n      -- this may\
    \ be used to convey context-specific information\n      -- (this field not primarily\
    \ intended for human consumption)\n  }\n  PKIFreeText ::= SEQUENCE SIZE (1..MAX)\
    \ OF UTF8String\n      -- text encoded as UTF-8 String (note:  each UTF8String\
    \ SHOULD\n      -- include an RFC 1766 language tag to indicate the language\n\
    \      -- of the contained text)\n  PKIBody ::= CHOICE {       -- message-specific\
    \ body elements\n      ir      [0]  CertReqMessages,        --Initialization Request\n\
    \      ip      [1]  CertRepMessage,         --Initialization Response\n      cr\
    \      [2]  CertReqMessages,        --Certification Request\n      cp      [3]\
    \  CertRepMessage,         --Certification Response\n      p10cr   [4]  CertificationRequest,\
    \   --imported from [PKCS10]\n      popdecc [5]  POPODecKeyChallContent, --pop\
    \ Challenge\n      popdecr [6]  POPODecKeyRespContent,  --pop Response\n     \
    \ kur     [7]  CertReqMessages,        --Key Update Request\n      kup     [8]\
    \  CertRepMessage,         --Key Update Response\n      krr     [9]  CertReqMessages,\
    \        --Key Recovery Request\n      krp     [10] KeyRecRepContent,       --Key\
    \ Recovery Response\n      rr      [11] RevReqContent,          --Revocation Request\n\
    \      rp      [12] RevRepContent,          --Revocation Response\n      ccr \
    \    [13] CertReqMessages,        --Cross-Cert. Request\n      ccp     [14] CertRepMessage,\
    \         --Cross-Cert. Response\n      ckuann  [15] CAKeyUpdAnnContent,     --CA\
    \ Key Update Ann.\n      cann    [16] CertAnnContent,         --Certificate Ann.\n\
    \      rann    [17] RevAnnContent,          --Revocation Ann.\n      crlann  [18]\
    \ CRLAnnContent,          --CRL Announcement\n      conf    [19] PKIConfirmContent,\
    \      --Confirmation\n      nested  [20] NestedMessageContent,   --Nested Message\n\
    \      genm    [21] GenMsgContent,          --General Message\n      genp    [22]\
    \ GenRepContent,          --General Response\n      error   [23] ErrorMsgContent\
    \         --Error Message\n  }\n  PKIProtection ::= BIT STRING\n  ProtectedPart\
    \ ::= SEQUENCE {\n      header    PKIHeader,\n      body      PKIBody\n  }\n \
    \ PasswordBasedMac ::= OBJECT IDENTIFIER --{1 2 840 113533 7 66 13}\n  PBMParameter\
    \ ::= SEQUENCE {\n      salt                OCTET STRING,\n      owf         \
    \        AlgorithmIdentifier,\n      -- AlgId for a One-Way Function (SHA-1 recommended)\n\
    \      iterationCount      INTEGER,\n      -- number of times the OWF is applied\n\
    \      mac                 AlgorithmIdentifier\n      -- the MAC AlgId (e.g.,\
    \ DES-MAC, Triple-DES-MAC [PKCS11],\n  }   -- or HMAC [RFC2104, RFC2202])\n  DHBasedMac\
    \ ::= OBJECT IDENTIFIER --{1 2 840 113533 7 66 30}\n  DHBMParameter ::= SEQUENCE\
    \ {\n      owf                 AlgorithmIdentifier,\n      -- AlgId for a One-Way\
    \ Function (SHA-1 recommended)\n      mac                 AlgorithmIdentifier\n\
    \      -- the MAC AlgId (e.g., DES-MAC, Triple-DES-MAC [PKCS11],\n  }   -- or\
    \ HMAC [RFC2104, RFC2202])\n  NestedMessageContent ::= PKIMessage\n  PKIStatus\
    \ ::= INTEGER {\n      granted                (0),\n      -- you got exactly what\
    \ you asked for\n      grantedWithMods        (1),\n      -- you got something\
    \ like what you asked for; the\n      -- requester is responsible for ascertaining\
    \ the differences\n      rejection              (2),\n      -- you don't get it,\
    \ more information elsewhere in the message\n      waiting                (3),\n\
    \      -- the request body part has not yet been processed,\n      -- expect to\
    \ hear more later\n      revocationWarning      (4),\n      -- this message contains\
    \ a warning that a revocation is\n      -- imminent\n      revocationNotification\
    \ (5),\n      -- notification that a revocation has occurred\n      keyUpdateWarning\
    \       (6)\n      -- update already done for the oldCertId specified in\n   \
    \   -- CertReqMsg\n  }\n  PKIFailureInfo ::= BIT STRING {\n  -- since we can fail\
    \ in more than one way!\n  -- More codes may be added in the future if/when required.\n\
    \      badAlg           (0),\n      -- unrecognized or unsupported Algorithm Identifier\n\
    \      badMessageCheck  (1),\n      -- integrity check failed (e.g., signature\
    \ did not verify)\n      badRequest       (2),\n      -- transaction not permitted\
    \ or supported\n      badTime          (3),\n      -- messageTime was not sufficiently\
    \ close to the system time,\n      -- as defined by local policy\n      badCertId\
    \        (4),\n      -- no certificate could be found matching the provided criteria\n\
    \      badDataFormat    (5),\n      -- the data submitted has the wrong format\n\
    \      wrongAuthority   (6),\n      -- the authority indicated in the request\
    \ is different from the\n      -- one creating the response token\n      incorrectData\
    \    (7),\n      -- the requester's data is incorrect (for notary services)\n\
    \      missingTimeStamp (8),\n      -- when the timestamp is missing but should\
    \ be there (by policy)\n      badPOP           (9)\n      -- the proof-of-possession\
    \ failed\n  }\n  PKIStatusInfo ::= SEQUENCE {\n      status        PKIStatus,\n\
    \      statusString  PKIFreeText     OPTIONAL,\n      failInfo      PKIFailureInfo\
    \  OPTIONAL\n  }\n  OOBCert ::= Certificate\n  OOBCertHash ::= SEQUENCE {\n  \
    \    hashAlg     [0] AlgorithmIdentifier     OPTIONAL,\n      certId      [1]\
    \ CertId                  OPTIONAL,\n      hashVal         BIT STRING\n      --\
    \ hashVal is calculated over DER encoding of the\n      -- subjectPublicKey field\
    \ of the corresponding cert.\n  }\n  POPODecKeyChallContent ::= SEQUENCE OF Challenge\n\
    \  -- One Challenge per encryption key certification request (in the\n  -- same\
    \ order as these requests appear in CertReqMessages).\n  Challenge ::= SEQUENCE\
    \ {\n      owf                 AlgorithmIdentifier  OPTIONAL,\n      -- MUST be\
    \ present in the first Challenge; MAY be omitted in any\n      -- subsequent Challenge\
    \ in POPODecKeyChallContent (if omitted,\n      -- then the owf used in the immediately\
    \ preceding Challenge is\n      -- to be used).\n      witness             OCTET\
    \ STRING,\n      -- the result of applying the one-way function (owf) to a\n \
    \     -- randomly-generated INTEGER, A.  [Note that a different\n      -- INTEGER\
    \ MUST be used for each Challenge.]\n      challenge           OCTET STRING\n\
    \      -- the encryption (under the public key for which the cert.\n      -- request\
    \ is being made) of Rand, where Rand is specified as\n      --   Rand ::= SEQUENCE\
    \ {\n      --      int      INTEGER,\n      --       - the randomly-generated\
    \ INTEGER A (above)\n      --      sender   GeneralName\n      --       - the\
    \ sender's name (as included in PKIHeader)\n      --   }\n  }\n  POPODecKeyRespContent\
    \ ::= SEQUENCE OF INTEGER\n  -- One INTEGER per encryption key certification request\
    \ (in the\n  -- same order as these requests appear in CertReqMessages).  The\n\
    \  -- retrieved INTEGER A (above) is returned to the sender of the\n  -- corresponding\
    \ Challenge.\n  CertRepMessage ::= SEQUENCE {\n      caPubs       [1] SEQUENCE\
    \ SIZE (1..MAX) OF Certificate OPTIONAL,\n      response         SEQUENCE OF CertResponse\n\
    \  }\n  CertResponse ::= SEQUENCE {\n      certReqId           INTEGER,\n    \
    \  -- to match this response with corresponding request (a value\n      -- of\
    \ -1 is to be used if certReqId is not specified in the\n      -- corresponding\
    \ request)\n      status              PKIStatusInfo,\n      certifiedKeyPair \
    \   CertifiedKeyPair    OPTIONAL,\n      rspInfo             OCTET STRING    \
    \    OPTIONAL\n      -- analogous to the id-regInfo-asciiPairs OCTET STRING defined\n\
    \      -- for regInfo in CertReqMsg [CRMF]\n  }\n  CertifiedKeyPair ::= SEQUENCE\
    \ {\n      certOrEncCert       CertOrEncCert,\n      privateKey      [0] EncryptedValue\
    \      OPTIONAL,\n      publicationInfo [1] PKIPublicationInfo  OPTIONAL\n  }\n\
    \  CertOrEncCert ::= CHOICE {\n      certificate     [0] Certificate,\n      encryptedCert\
    \   [1] EncryptedValue\n  }\n  KeyRecRepContent ::= SEQUENCE {\n      status \
    \                 PKIStatusInfo,\n      newSigCert          [0] Certificate  \
    \                 OPTIONAL,\n      caCerts             [1] SEQUENCE SIZE (1..MAX)\
    \ OF\n                                          Certificate       OPTIONAL,\n\
    \      keyPairHist         [2] SEQUENCE SIZE (1..MAX) OF\n                   \
    \                       CertifiedKeyPair  OPTIONAL\n  }\n  RevReqContent ::= SEQUENCE\
    \ OF RevDetails\n  RevDetails ::= SEQUENCE {\n      certDetails         CertTemplate,\n\
    \      -- allows requester to specify as much as they can about\n      -- the\
    \ cert. for which revocation is requested\n      -- (e.g., for cases in which\
    \ serialNumber is not available)\n      revocationReason    ReasonFlags      OPTIONAL,\n\
    \      -- the reason that revocation is requested\n      badSinceDate        GeneralizedTime\
    \  OPTIONAL,\n      -- indicates best knowledge of sender\n      crlEntryDetails\
    \     Extensions       OPTIONAL\n      -- requested crlEntryExtensions\n  }\n\
    \  RevRepContent ::= SEQUENCE {\n      status       SEQUENCE SIZE (1..MAX) OF\
    \ PKIStatusInfo,\n      -- in same order as was sent in RevReqContent\n      revCerts\
    \ [0] SEQUENCE SIZE (1..MAX) OF CertId OPTIONAL,\n      -- IDs for which revocation\
    \ was requested (same order as status)\n      crls     [1] SEQUENCE SIZE (1..MAX)\
    \ OF CertificateList  OPTIONAL\n      -- the resulting CRLs (there may be more\
    \ than one)\n  }\n  CAKeyUpdAnnContent ::= SEQUENCE {\n      oldWithNew      \
    \    Certificate, -- old pub signed with new priv\n      newWithOld          Certificate,\
    \ -- new pub signed with old priv\n      newWithNew          Certificate  -- new\
    \ pub signed with new priv\n  }\n  CertAnnContent ::= Certificate\n  RevAnnContent\
    \ ::= SEQUENCE {\n      status              PKIStatus,\n      certId         \
    \     CertId,\n      willBeRevokedAt     GeneralizedTime,\n      badSinceDate\
    \        GeneralizedTime,\n      crlDetails          Extensions  OPTIONAL\n  \
    \    -- extra CRL details(e.g., crl number, reason, location, etc.)\n"
- title: '}'
  contents:
  - "}\n  CRLAnnContent ::= SEQUENCE OF CertificateList\n  PKIConfirmContent ::= NULL\n\
    \  InfoTypeAndValue ::= SEQUENCE {\n      infoType               OBJECT IDENTIFIER,\n\
    \      infoValue              ANY DEFINED BY infoType  OPTIONAL\n  }\n  -- Example\
    \ InfoTypeAndValue contents include, but are not limited to:\n  --  { CAProtEncCert\
    \    = {id-it 1}, Certificate                     }\n  --  { SignKeyPairTypes\
    \ = {id-it 2}, SEQUENCE OF AlgorithmIdentifier }\n  --  { EncKeyPairTypes  = {id-it\
    \ 3}, SEQUENCE OF AlgorithmIdentifier }\n  --  { PreferredSymmAlg = {id-it 4},\
    \ AlgorithmIdentifier             }\n  --  { CAKeyUpdateInfo  = {id-it 5}, CAKeyUpdAnnContent\
    \              }\n  --  { CurrentCRL       = {id-it 6}, CertificateList      \
    \           }\n  -- where {id-it} = {id-pkix 4} = {1 3 6 1 5 5 7 4}\n  -- This\
    \ construct MAY also be used to define new PKIX Certificate\n  -- Management Protocol\
    \ request and response messages, or general-\n  -- purpose (e.g., announcement)\
    \ messages for future needs or for\n  -- specific environments.\n  GenMsgContent\
    \ ::= SEQUENCE OF InfoTypeAndValue\n  -- May be sent by EE, RA, or CA (depending\
    \ on message content).\n  -- The OPTIONAL infoValue parameter of InfoTypeAndValue\
    \ will typically\n  -- be omitted for some of the examples given above.  The receiver\
    \ is\n  -- free to ignore any contained OBJ. IDs that it does not recognize.\n\
    \  -- If sent from EE to CA, the empty set indicates that the CA may send\n  --\
    \ any/all information that it wishes.\n  GenRepContent ::= SEQUENCE OF InfoTypeAndValue\n\
    \  -- The receiver is free to ignore any contained OBJ. IDs that it does\n  --\
    \ not recognize.\n  ErrorMsgContent ::= SEQUENCE {\n      pKIStatusInfo      \
    \    PKIStatusInfo,\n      errorCode              INTEGER           OPTIONAL,\n\
    \      -- implementation-specific error codes\n      errorDetails           PKIFreeText\
    \       OPTIONAL\n      -- implementation-specific error details\n  }\n"
- title: -- The following definition is provided for compatibility reasons with
  contents:
  - '-- The following definition is provided for compatibility reasons with

    '
- title: -- 1988 and 1993 ASN.1 compilers which allow the use of UNIVERSAL class
  contents:
  - '-- 1988 and 1993 ASN.1 compilers which allow the use of UNIVERSAL class

    '
- title: -- tags (not a part of formal ASN.1); 1997 and subsequent compilers
  contents:
  - '-- tags (not a part of formal ASN.1); 1997 and subsequent compilers

    '
- title: -- SHOULD comment out this line.
  contents:
  - '-- SHOULD comment out this line.

    '
- title: UTF8String ::= [UNIVERSAL 12] IMPLICIT OCTET STRING
  contents:
  - 'UTF8String ::= [UNIVERSAL 12] IMPLICIT OCTET STRING

    '
- title: END
  contents:
  - 'END

    '
- title: 'Appendix D: Registration of MIME Type for Section 5'
  contents:
  - "Appendix D: Registration of MIME Type for Section 5\n   To: ietf-types@iana.org\n\
    \   Subject: Registration of MIME media type application/pkixcmp\n   MIME media\
    \ type name: application\n   MIME subtype name: pkixcmp\n   Required parameters:\
    \ -\n   Optional parameters: -\n   Encoding considerations:\n   Content may contain\
    \ arbitrary octet values (the ASN.1 DER encoding of\n   a PKI message, as defined\
    \ in the IETF PKIX Working Group\n   specifications).  base64 encoding is required\
    \ for MIME e-mail; no\n   encoding is necessary for HTTP.\n   Security considerations:\n\
    \   This MIME type may be used to transport Public-Key Infrastructure\n   (PKI)\
    \ messages between PKI entities.  These messages are defined by\n   the IETF PKIX\
    \ Working Group and are used to establish and maintain an\n   Internet X.509 PKI.\
    \  There is no requirement for specific security\n   mechanisms to be applied\
    \ at this level if the PKI messages themselves\n   are protected as defined in\
    \ the PKIX specifications.\n   Interoperability considerations: -\n   Published\
    \ specification: this document\n   Applications which use this media type:\n \
    \  Applications using certificate management, operational, or ancillary\n   protocols\
    \ (as defined by the IETF PKIX Working Group) to send PKI\n   messages via E-Mail\
    \ or HTTP.\n   Additional information:\n     Magic number (s): -\n     File extension\
    \ (s): \".PKI\"\n     Macintosh File Type Code (s): -\n   Person and email address\
    \ to contact for further information:\n   Carlisle Adams, cadams@entrust.com\n\
    \   Intended usage: COMMON\n   Author/Change controller: Carlisle Adams\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1999).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
