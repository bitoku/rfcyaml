- contents:
  - '            RTP/RTCP Extension for RTP Splicing Notification

    '
  title: __initial_text__
- contents:
  - "Abstract\n   Content splicing is a process that replaces the content of a main\n
    \  multimedia stream with other multimedia content and that delivers the\n   substitutive
    multimedia content to the receivers for a period of\n   time.  The splicer is
    designed to handle RTP splicing and needs to\n   know when to start and end the
    splicing.\n   This memo defines two RTP/RTCP extensions to indicate the splicing-\n
    \  related information to the splicer: an RTP header extension that\n   conveys
    the information \"in band\" and an RTP Control Protocol (RTCP)\n   packet that
    conveys the information out of band.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8286.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \     1.1. Terminology ................................................3\n   2.
    Overview ........................................................4\n      2.1.
    Overview of RTP Splicing ...................................4\n      2.2. Overview
    of Splicing Interval ..............................5\n   3. Conveying Splicing
    Interval in RTP/RTCP Extensions ..............7\n      3.1. RTP Header Extension
    .......................................7\n      3.2. RTCP Splicing Notification
    Message .........................8\n   4. Reducing Splicing Latency ......................................10\n
    \  5. Failure Cases ..................................................11\n   6.
    Session Description Protocol (SDP) Signaling ...................12\n      6.1.
    Declarative SDP ...........................................12\n      6.2. Offer/Answer
    without BUNDLE ...............................13\n      6.3. Offer/Answer with
    BUNDLE: All Media Are Spliced ...........14\n      6.4. Offer/Answer with BUNDLE:
    A Subset of Media Are Spliced ...16\n   7. Security Considerations ........................................18\n
    \  8. IANA Considerations ............................................19\n      8.1.
    RTCP Control Packet Types .................................19\n      8.2. RTP
    Compact Header Extensions .............................20\n      8.3. SDP Grouping
    Semantic Extension ...........................20\n   9. References .....................................................20\n
    \     9.1. Normative References ......................................20\n      9.2.
    Informative References ....................................21\n   Acknowledgements
    ..................................................22\n   Authors' Addresses ................................................22\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Splicing is a process that replaces some multimedia content
    with\n   other multimedia content and delivers the substitutive multimedia\n   content
    to the receivers for a period of time.  In some predictable\n   splicing cases,
    e.g., advertisement insertion, the splicing duration\n   needs to be inside of
    the specific pre-designated time slot.  Certain\n   timing information about when
    to start and end the splicing must be\n   first acquired by the splicer in order
    to start the splicing.  This\n   document refers to this information as the \"Splicing
    Interval\".\n   [SCTE35] provides a method that encapsulates the Splicing Interval\n
    \  inside the MPEG2-TS (MPEG2 transport stream) layer in cable TV\n   systems.
    \ When transported in RTP, a middlebox designed as the\n   splicer to decode the
    RTP packets and search for the Splicing\n   Interval inside the payloads is required.
    \ The need for such\n   processing increases the workload of the middlebox and
    limits the\n   number of RTP sessions the middlebox can support.\n   This document
    defines an RTP header extension [RFC8285] used by the\n   main RTP sender to provide
    the Splicing Interval by including it in\n   the RTP packets.\n   However, the
    Splicing Interval conveyed in the RTP header extension\n   might not reach the
    splicer successfully.  Any splicing-unaware\n   middlebox on the path between
    the RTP sender and the splicer might\n   strip this RTP header extension.\n   To
    increase robustness against such a case, this document also\n   defines a new
    RTP Control Protocol (RTCP) packet type to carry the\n   same Splicing Interval
    to the splicer.  Since RTCP is also unreliable\n   and may not be as \"immediate\"
    as the in-band technique, it's only\n   considered to be a complement to the RTP
    header extension.\n"
  - contents:
    - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
      \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\",
      \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described
      in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all\n
      \  capitals, as shown here.\n   In addition, we define the following terms:\n
      \  Main RTP Sender:\n      The sender of RTP packets carrying the main RTP stream.\n
      \  Splicer:\n      An intermediary node that inserts substitutive content into
      a main\n      RTP stream.  The splicer sends substitutive content to the RTP\n
      \     receiver instead of the main content during splicing.  It is also\n      responsible
      for processing RTCP traffic between the RTP sender and\n      the RTP receiver.\n
      \  Splicing-In Point:\n      A virtual point in the RTP stream, suitable for
      substitutive\n      content entry, typically in the boundary between two independently\n
      \     decodable frames.\n   Splicing-Out Point:\n      A virtual point in the
      RTP stream, suitable for substitutive\n      content exit, typically in the
      boundary between two independently\n      decodable frames.\n   Splicing Interval:\n
      \     The NTP timestamps, representing the main RTP sender wallclock\n      time,
      for the splicing-in point and splicing-out point per\n      [RFC6828], allowing
      the splicer to know when to start and end the\n      RTP splicing.\n   Substitutive
      RTP Sender:\n      The sender of RTP packets carrying the RTP stream that will\n
      \     replace the content in the main RTP stream.\n"
    title: 1.1.  Terminology
  title: 1.  Introduction
- contents:
  - '2.  Overview

    '
  - contents:
    - "2.1.  Overview of RTP Splicing\n   RTP splicing is intended to replace some
      multimedia content with\n   certain substitutive multimedia content and then
      forward it to the\n   receivers for a period of time.  This process is authorized
      by the\n   main RTP sender that offers a specific time window for inserting
      the\n   substitutive multimedia content in the main content.  A typical usage\n
      \  scenario is where an IPTV service provider uses its own regional\n   advertising
      content to replace national advertising content, the time\n   window of which
      is explicitly indicated by the IPTV service provider.\n   The splicer is a middlebox
      handling RTP splicing.  It receives the\n   main content and substitutive content
      simultaneously but only chooses\n   to send one of them to the receiver at any
      point in time.  When RTP\n   splicing begins, the splicer sends the substitutive
      content to the\n   receivers instead of the main content.  When RTP splicing
      ends, the\n   splicer switches back to sending the main content to the receivers.\n
      \  This implies that the receiver is explicitly configured to receive\n   the
      traffic via the splicer and will return any RTCP feedback to it\n   in the presence
      of the splicer.\n   The middlebox working as the splicer can be implemented
      as either an\n   RTP mixer or an RTP translator.  If implemented as an RTP mixer,
      the\n   splicer will use its own synchronization source (SSRC), sequence\n   number
      space, and timing model when generating the output stream to\n   receivers,
      using the contributing source (CSRC) list to indicate\n   whether the original
      content or substitutive content is being\n   delivered.  The splicer, on behalf
      of the content provider, can omit\n   the CSRC list from the RTP packets it
      generates.  This simplifies the\n   design of the receivers, since they don't
      need to parse the CSRC\n   list, but makes it harder to determine when the splicing
      is taking\n   place (it requires inspection of the RTP payload data, rather
      than\n   just the RTP headers).  A splicer working as an RTP mixer splits the\n
      \  flow between the sender and receiver into two, and it requires\n   separate
      control loops for RTCP and congestion control.  [RFC6828]\n   provides an example
      of an RTP mixer approach.\n   A splicer implemented as an RTP translator [RFC3550]
      will forward the\n   RTP packets from the original and substitutive senders
      with their\n   SSRCs intact but will need to rewrite RTCP Sender Report (SR)
      packets\n   to account for the splicing.  In this case, the congestion control\n
      \  loops run between the original sender and receiver and between the\n   substitutive
      sender and receiver.  The splicer needs to ensure that\n   the RTCP feedback
      messages from the receiver are passed to the right\n   sender to let the congestion
      control work.\n"
    title: 2.1.  Overview of RTP Splicing
  - contents:
    - "2.2.  Overview of Splicing Interval\n   To handle splicing on the RTP layer
      at the reserved time slots set by\n   the main RTP sender, the splicer must
      first know the Splicing\n   Interval from the main RTP sender before it can
      start splicing.\n   When a new splicing is forthcoming, the main RTP sender
      needs to send\n   the Splicing Interval to the splicer.  The Splicing Interval
      SHOULD\n   be sent by the RTP header extension or RTCP extension message more\n
      \  than once to mitigate possible packet loss.  To enable the splicer to\n   get
      the substitutive content before the splicing starts, the main RTP\n   sender
      MUST send the Splicing Interval well in advance.  For example,\n   the main
      RTP sender can estimate when to send the Splicing Interval\n   based on the
      round-trip time (RTT), following the mechanisms\n   described in Section 6.4.1
      of [RFC3550] when the splicer sends an\n   RTCP Receiver Report (RR) to the
      main sender.\n   The substitutive sender also needs to learn the Splicing Interval\n
      \  from the main RTP sender in advance and estimate when to transfer the\n   substitutive
      content to the splicer.  The Splicing Interval could be\n   transmitted from
      the main RTP sender to the substitutive content\n   using some out-of-band mechanisms
      -- for example, a proprietary\n   mechanism to exchange the Splicing Interval
      -- or the substitutive\n   sender is implemented together with the main RTP
      sender inside a\n   single device.  To ensure that the Splicing Interval is
      valid for\n   both the main RTP sender and the substitutive RTP sender, the
      two\n   senders MUST share a common reference clock so that the splicer can\n
      \  achieve accurate splicing.  The requirements for the common reference\n   clock
      (e.g., resolution, skew) depend on the codec used by the media\n   content.\n
      \  In this document, the main RTP sender uses a pair of NTP timestamps\n   to
      indicate when to start and end the splicing to the splicer: the\n   timestamp
      of the first substitutive RTP packet at the splicing-in\n   point and the timestamp
      of the first main RTP packet at the\n   splicing-out point.\n   When the substitutive
      RTP sender gets the Splicing Interval, it must\n   prepare the substitutive
      stream.  The main content provider and the\n   substitutive content provider
      MUST ensure that the RTP timestamp of\n   the first substitutive RTP packet
      that would be presented to the\n   receivers corresponds to the same time instant
      as the former\n   NTP timestamp in the Splicing Interval.  To enable the splicer
      to\n   know the first substitutive RTP packet it needs to send, the\n   substitutive
      RTP sender MUST send the substitutive RTP packet ahead\n   of the splicing-in
      point, allowing the splicer to find out the\n   timestamp of this first RTP
      packet in the substitutive RTP stream,\n   e.g., using a prior RTCP SR message.\n
      \  When it is time for the splicing to end, the main content provider\n   and
      the substitutive content provider MUST ensure that the RTP\n   timestamp of
      the first main RTP packet that would be presented on the\n   receivers corresponds
      to the same time instant as the latter\n   NTP timestamp in the Splicing Interval.\n"
    title: 2.2.  Overview of Splicing Interval
  title: 2.  Overview
- contents:
  - "3.  Conveying Splicing Interval in RTP/RTCP Extensions\n   This memo defines
    two backward-compatible RTP extensions to convey\n   the Splicing Interval to
    the splicer: an RTP header extension and an\n   RTCP splicing notification message.\n"
  - contents:
    - "3.1.  RTP Header Extension\n   The RTP header extension mechanism defined in
      [RFC8285] can be\n   adapted to carry the Splicing Interval, which consists
      of a pair of\n   NTP timestamps.\n   This RTP header extension carries the 7
      octets of the splicing-out\n   NTP timestamp (lower 24-bit part of the \"Seconds\"
      of an NTP timestamp\n   and the 32 bits of the \"Fraction\" of an NTP timestamp
      as defined in\n   [RFC5905]), followed by the 8 octets of the splicing-in NTP
      timestamp\n   (64-bit NTP timestamp as defined in [RFC5905]).  The top 8 bits
      of\n   the splicing-out NTP timestamp are inferred from the top 8 bits of\n
      \  the splicing-in NTP timestamp, assuming that (1) the splicing-out\n   time
      is after the splicing-in time and (2) the Splicing Interval is\n   less than
      2^25 seconds.  Therefore, if the value of the 7 octets of\n   the splicing-out
      NTP timestamp is smaller than the value of the\n   7 lower octets of the splicing-in
      NTP timestamp, it implies a wrap of\n   the 56-bit splicing-out NTP timestamp,
      which means that the top 8-bit\n   value of the 64-bit splicing-out NTP timestamp
      is equal to the top\n   8-bit value of the splicing-in NTP timestamp plus 0x01.
      \ Otherwise,\n   the top 8 bits of the splicing-out NTP timestamp are equal
      to the top\n   8 bits of the splicing-in NTP timestamp.\n   This RTP header
      extension can be encoded using either the one-byte or\n   two-byte header defined
      in [RFC8285].  Figures 1 and 2 show the\n   Splicing Interval header extension
      with each of the two header\n   formats.\n    0                   1                   2
      \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+E\n
      \  |   ID  | L=14  |    OUT NTP timestamp - Seconds (bit 8-31)     |x\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+t\n
      \  |          OUT NTP timestamp - Fraction (bit 0-31)              |e\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+n\n
      \  |           IN NTP timestamp - Seconds (bit 0-31)               |s\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+i\n
      \  |           IN NTP timestamp - Fraction (bit 0-31)              |o\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+n\n
      \      Figure 1: Splicing Interval Using the One-Byte Header Format\n    0                   1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+E\n
      \  |   ID          |    L=15       |  OUT NTP timestamp - Seconds  |x\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+t\n
      \  |OUT Secds(cont)|         OUT NTP timestamp - Fraction          |e\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+n\n
      \  |OUT Fract(cont)|          IN NTP timestamp - Seconds           |s\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+i\n
      \  | IN Secds(cont)|          IN NTP timestamp - Fraction          |o\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+n\n
      \  | IN Fract(cont)| 0 (pad)       |              ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \      Figure 2: Splicing Interval Using the Two-Byte Header Format\n   Since
      the inclusion of an RTP header extension will reduce the\n   efficiency of RTP
      header compression, it is RECOMMENDED that the main\n   sender insert the RTP
      header extensions into a number of RTP packets,\n   instead of all of the RTP
      packets, prior to the splicing-in.\n   After the splicer obtains the RTP header
      extension and derives the\n   Splicing Interval, it generates its own stream
      and is not allowed to\n   include the RTP header extension in outgoing packets;
      this reduces\n   header overhead.\n"
    title: 3.1.  RTP Header Extension
  - contents:
    - "3.2.  RTCP Splicing Notification Message\n   In addition to including the RTP
      header extension, the main RTP\n   sender includes the Splicing Interval in
      an RTCP splicing\n   notification message.  Whether or not the timestamps are
      included in\n   the RTP header extension, the main RTP sender MUST send the
      RTCP\n   splicing notification message.  This provides robustness in the case\n
      \  where a middlebox strips RTP header extensions.  The main RTP sender\n   MUST
      make sure that the splicing information contained in the RTCP\n   splicing notification
      message is consistent with the information\n   included in the RTP header extensions.\n
      \  The RTCP splicing notification message is a new RTCP packet type.  It\n   has
      a fixed header followed by a pair of NTP timestamps:\n    0                   1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |V=2|P|reserved |    PT=213   |              length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                           SSRC                                |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |             IN NTP timestamp (most significant word)          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |             IN NTP timestamp (least significant word)         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |             OUT NTP timestamp (most significant word)         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |             OUT NTP timestamp (least significant word)        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \              Figure 3: RTCP Splicing Notification Message\n   The RTCP splicing
      notification message includes the following fields:\n   Length: 16 bits\n      As
      defined in [RFC3550], the length of the RTCP packet in 32-bit\n      words minus
      one, including the header and any padding.\n   SSRC: 32 bits\n      The SSRC
      of the main RTP sender.\n   Timestamp: 64 bits\n      Indicates the wallclock
      time when this splicing starts and ends.\n      The full-resolution NTP timestamp
      is used, which is a 64-bit\n      unsigned fixed-point number with the integer
      part in the first\n      32 bits and the fractional part in the last 32 bits.
      \ This format\n      is the same as the NTP timestamp field in the RTCP SR\n
      \     (Section 6.4.1 of [RFC3550]).\n   The RTCP splicing notification message
      can be included in the RTCP\n   compound packet together with the RTCP SR generated
      at the main RTP\n   sender; hence, it follows the compound RTCP rules defined
      in\n   Section 6.1 in [RFC3550].\n   If the use of non-compound RTCP [RFC5506]
      was previously negotiated\n   between the sender and the splicer, the RTCP splicing
      notification\n   messages may be sent as non-compound RTCP packets.  In some
      cases\n   where the mapping from the RTP timestamp to the NTP timestamp\n   changes,
      e.g., clock drift happens before the splicing event, sending\n   an RTCP SR
      or even updated Splicing Interval information in a timely\n   manner might be
      required in order to update the timestamp mapping for\n   accurate splicing.\n
      \  Since the RTCP splicing notification message is intentionally sent by\n   the
      main RTP sender to the splicer, the splicer is not allowed to\n   forward this
      message to the receivers, so as to avoid useless\n   processing and additional
      RTCP bandwidth consumption in the\n   downstream receivers.\n"
    title: 3.2.  RTCP Splicing Notification Message
  title: 3.  Conveying Splicing Interval in RTP/RTCP Extensions
- contents:
  - "4.  Reducing Splicing Latency\n   When splicing starts or ends, the splicer outputs
    the multimedia\n   content from another sender to the receivers.  Given that the\n
    \  receivers must first acquire certain information ([RFC6285] refers to\n   this
    information as \"Reference Information\") to start processing the\n   multimedia
    data, either the main RTP sender or the substitutive\n   sender SHOULD provide
    the Reference Information together with its\n   multimedia content to reduce the
    delay caused by acquiring the\n   Reference Information.  The methods by which
    the Reference\n   Information is distributed to the receivers are out of scope
    for\n   this memo.\n   Another latency element is delay caused by synchronization.
    \ The\n   receivers must receive enough synchronization metadata prior to\n   synchronizing
    the separate components of the multimedia streams when\n   splicing starts or
    ends.  Either the main RTP sender or the\n   substitutive sender SHOULD send the
    synchronization metadata early\n   enough so that the receivers can play out the
    multimedia in a\n   synchronized fashion.  The main RTP sender or the substitutive
    sender\n   can estimate when to send the synchronization metadata based on, for\n
    \  example, the RTT, following the mechanisms described in Section 6.4.1\n   of
    [RFC3550] when the splicer sends an RTCP RR to the main sender or\n   the substitutive
    sender.  The main RTP sender and the substitutive\n   sender can also be coordinated
    by some proprietary out-of-band\n   mechanisms to decide when, and to whom, the
    metadata is to be sent.\n   If both send the information, the splicer SHOULD pick
    one based on\n   the current situation, e.g., choosing either (1) the main RTP
    sender\n   when synchronizing the main media content or (2) the information from\n
    \  the substitutive sender when synchronizing the spliced content.  To\n   reduce
    possible synchronization delay, it is RECOMMENDED that the\n   mechanisms defined
    in [RFC6051] be adopted.\n"
  title: 4.  Reducing Splicing Latency
- contents:
  - "5.  Failure Cases\n   This section examines the implications of losing RTCP splicing\n
    \  notification messages, e.g., the RTP header extension is stripped on\n   the
    path.\n   Given that there may be a splicing-unaware middlebox on the path\n   between
    the main RTP sender and the splicer, the main and\n   substitutive RTP senders
    can use one heuristic to verify whether or\n   not the Splicing Interval reaches
    the splicer.\n   The splicer can be implemented to have its own SSRC and send
    RTCP\n   reception reports to the senders of the main and substitutive RTP\n   streams.
    \ This allows the senders to detect problems on the path to\n   the splicer.  Alternatively,
    it is possible to implement the splicer\n   such that it has no SSRC and does
    not send RTCP reports; this\n   prevents the senders from being able to monitor
    the quality of the\n   path to the splicer.\n   If the splicer has an SSRC and
    sends its own RTCP reports, it can\n   choose not to pass RTCP reports it receives
    from the receivers to the\n   senders.  This will prevent the senders from being
    able to monitor\n   the quality of the paths from the splicer to the receivers.\n
    \  A splicer that has an SSRC can choose to pass RTCP reception reports\n   from
    the receivers back to the senders, after modifications to\n   account for the
    splicing.  This will allow the senders to monitor the\n   quality of the paths
    from the splicer to the receivers.  A splicer\n   that does not have its own SSRC
    has to forward and translate RTCP\n   reports from the receiver; otherwise, the
    senders will not see any\n   receivers in the RTP session.\n   If the splicer
    is implemented as a mixer, it will have its own SSRC,\n   send its own RTCP reports,
    and forward translated RTCP reports from\n   the receivers.\n   Upon the detection
    of a failure, the splicer can communicate with the\n   main sender and the substitutive
    sender via some out-of-band\n   signaling technique and fall back to the payload-specific
    mechanisms\n   it supports, e.g., the MPEG2-TS splicing solution defined in\n
    \  [SCTE35], or just abandon the splicing.\n"
  title: 5.  Failure Cases
- contents:
  - "6.  Session Description Protocol (SDP) Signaling\n   This document defines the
    URI for declaring this header extension in\n   an \"extmap\" attribute to be\n
    \  \"urn:ietf:params:rtp-hdrext:splicing-interval\".\n   This document extends
    the standard semantics defined in \"The Session\n   Description Protocol (SDP)
    Grouping Framework\" [RFC5888] with a new\n   semantic, called \"SPLICE\", to
    represent the relationship between the\n   main RTP stream and the substitutive
    RTP stream.  Only two \"m=\" lines\n   are allowed in the SPLICE group.  The main
    RTP stream is the one with\n   the extended \"extmap\" attribute, and the other
    one is the\n   substitutive stream.  A single \"m=\" line MUST NOT be included
    in\n   different SPLICE groups at the same time.  The main RTP sender\n   provides
    the information about both main and substitutive sources.\n   The extended SDP
    attribute specified in this document is applicable\n   for offer/answer content
    [RFC3264] and does not affect any rules when\n   negotiating offers and answers.
    \ When used with multiple \"m=\" lines,\n   substitutive RTP MUST be applied only
    to the RTP packets whose SDP\n   \"m=\" line is in the same group with the substitutive
    stream using\n   SPLICE and has the extended splicing \"extmap\" attribute.  This\n
    \  semantic is also applicable for BUNDLE cases.\n   The following examples show
    how SDP signaling could be used for\n   splicing in different cases.\n"
  - contents:
    - "6.1.  Declarative SDP\n      v=0\n      o=xia 1122334455 1122334466 IN IP4
      splicing.example.com\n      s=RTP Splicing Example\n      t=0 0\n      a=group:SPLICE
      1 2\n      m=video 30000 RTP/AVP 100\n      i=Main RTP Stream\n      c=IN IP4
      233.252.0.1/127\n      a=rtpmap:100 MP2T/90000\n      a=extmap:1 urn:ietf:params:rtp-hdrext:splicing-interval\n
      \     a=mid:1\n      m=video 30002 RTP/AVP 100\n      i=Substitutive RTP Stream\n
      \     c=IN IP4 233.252.0.2/127\n      a=sendonly\n      a=rtpmap:100 MP2T/90000\n
      \     a=mid:2\n       Figure 4: Example SDP for a Single-Channel Splicing Scenario\n
      \  The splicer receiving the SDP message above receives one MPEG2-TS\n   stream
      (payload 100) from the main RTP sender (with a multicast\n   destination address
      of 233.252.0.1) on port 30000 and/or receives\n   another MPEG2-TS stream from
      the substitutive RTP sender (with a\n   multicast destination address of 233.252.0.2)
      on port 30002.  But at\n   a particular point in time, the splicer only selects
      one stream and\n   outputs the content from the chosen stream to the downstream\n
      \  receivers.\n"
    title: 6.1.  Declarative SDP
  - contents:
    - "6.2.  Offer/Answer without BUNDLE\n   SDP Offer - from the main RTP sender:\n
      \     v=0\n      o=xia 1122334455 1122334466 IN IP4 splicing.example.com\n      s=RTP
      Splicing Example\n      t=0 0\n      a=group:SPLICE 1 2\n      m=video 30000
      RTP/AVP 31 100\n      i=Main RTP Stream\n      c=IN IP4 splicing.example.com\n
      \     a=rtpmap:31 H261/90000\n      a=rtpmap:100 MP2T/90000\n      a=extmap:1
      urn:ietf:params:rtp-hdrext:splicing-interval\n      a=sendonly\n      a=mid:1\n
      \     m=video 40000 RTP/AVP 31 100\n      i=Substitutive RTP Stream\n      c=IN
      IP4 substitutive.example.com\n      a=rtpmap:31 H261/90000\n      a=rtpmap:100
      MP2T/90000\n      a=sendonly\n      a=mid:2\n   SDP Answer - from the splicer:\n
      \     v=0\n      o=xia 1122334455 1122334466 IN IP4 splicer.example.com\n      s=RTP
      Splicing Example\n      t=0 0\n      a=group:SPLICE 1 2\n      m=video 30000
      RTP/AVP 100\n      i=Main RTP Stream\n      c=IN IP4 splicer.example.com\n      a=rtpmap:100
      MP2T/90000\n      a=extmap:1 urn:ietf:params:rtp-hdrext:splicing-interval\n
      \     a=recvonly\n      a=mid:1\n      m=video 40000 RTP/AVP 100\n      i=Substitutive
      RTP Stream\n      c=IN IP4 splicer.example.com\n      a=rtpmap:100 MP2T/90000\n
      \     a=recvonly\n      a=mid:2\n"
    title: 6.2.  Offer/Answer without BUNDLE
  - contents:
    - "6.3.  Offer/Answer with BUNDLE: All Media Are Spliced\n   In this example,
      the bundled audio and video media have their own\n   substitutive media for
      splicing:\n   1. An offer, in which the offerer assigns a unique address and
      a\n      substitutive media to each bundled \"m=\" line for splicing within\n
      \     the BUNDLE group.\n   2. An answer, in which the answerer selects its
      own BUNDLE address\n      and leaves the substitutive media untouched.\n   SDP
      Offer - from the main RTP sender:\n      v=0\n      o=alice 1122334455 1122334466
      IN IP4 splicing.example.com\n      s=RTP Splicing Example\n      c=IN IP4 splicing.example.com\n
      \     t=0 0\n      a=group:SPLICE foo 1\n      a=group:SPLICE bar 2\n      a=group:BUNDLE
      foo bar\n      m=audio 10000 RTP/AVP 0 8 97\n      a=mid:foo\n      b=AS:200\n
      \     a=rtpmap:0 PCMU/8000\n      a=rtpmap:8 PCMA/8000\n      a=rtpmap:97 iLBC/8000\n
      \     a=extmap:1 urn:ietf:params:rtp-hdrext:splicing-interval\n      a=sendonly\n
      \     m=video 10002 RTP/AVP 31 32\n      a=mid:bar\n      b=AS:1000\n      a=rtpmap:31
      H261/90000\n      a=rtpmap:32 MPV/90000\n      a=extmap:2 urn:ietf:params:rtp-hdrext:splicing-interval\n
      \     a=sendonly\n      m=audio 20000 RTP/AVP 0 8 97\n      i=Substitutive audio
      RTP Stream\n      c=IN IP4 substitutive.example.com\n      a=rtpmap:0 PCMU/8000\n
      \     a=rtpmap:8 PCMA/8000\n      a=rtpmap:97 iLBC/8000\n      a=sendonly\n
      \     a=mid:1\n      m=video 20002 RTP/AVP 31 32\n      i=Substitutive video
      RTP Stream\n      c=IN IP4 substitutive.example.com\n      a=rtpmap:31 H261/90000\n
      \     a=rtpmap:32 MPV/90000\n      a=mid:2\n      a=sendonly\n   SDP Answer
      - from the splicer:\n      v=0\n      o=bob 2808844564 2808844564 IN IP4 splicer.example.com\n
      \     s=RTP Splicing Example\n      c=IN IP4 splicer.example.com\n      t=0
      0\n      a=group:SPLICE foo 1\n      a=group:SPLICE bar 2\n      a=group:BUNDLE
      foo bar\n      m=audio 30000 RTP/AVP 0\n      a=mid:foo\n      b=AS:200\n      a=rtpmap:0
      PCMU/8000\n      a=extmap:1 urn:ietf:params:rtp-hdrext:splicing-interval\n      a=recvonly\n
      \     m=video 30000 RTP/AVP 32\n      a=mid:bar\n      b=AS:1000\n      a=rtpmap:32
      MPV/90000\n      a=extmap:2 urn:ietf:params:rtp-hdrext:splicing-interval\n      a=recvonly\n
      \     m=audio 30002 RTP/AVP 0\n      i=Substitutive audio RTP Stream\n      c=IN
      IP4 splicer.example.com\n      a=rtpmap:0 PCMU/8000\n      a=recvonly\n      a=mid:1\n
      \     m=video 30004 RTP/AVP 32\n      i=Substitutive video RTP Stream\n      c=IN
      IP4 splicer.example.com\n      a=rtpmap:32 MPV/90000\n      a=mid:2\n      a=recvonly\n"
    title: '6.3.  Offer/Answer with BUNDLE: All Media Are Spliced'
  - contents:
    - "6.4.  Offer/Answer with BUNDLE: A Subset of Media Are Spliced\n   In this example,
      the substitutive media only applies for video when\n   splicing:\n   1. An offer,
      in which the offerer assigns a unique address to each\n      bundled \"m=\"
      line within the BUNDLE group and assigns a\n      substitutive media to the
      bundled video \"m=\" line for splicing.\n   2. An answer, in which the answerer
      selects its own BUNDLE address\n      and leaves the substitutive media untouched.\n
      \  SDP Offer - from the main RTP sender:\n      v=0\n      o=alice 1122334455
      1122334466 IN IP4 splicing.example.com\n      s=RTP Splicing Example\n      c=IN
      IP4 splicing.example.com\n      t=0 0\n      a=group:SPLICE bar 2\n      a=group:BUNDLE
      foo bar\n      m=audio 10000 RTP/AVP 0 8 97\n      a=mid:foo\n      b=AS:200\n
      \     a=rtpmap:0 PCMU/8000\n      a=rtpmap:8 PCMA/8000\n      a=rtpmap:97 iLBC/8000\n
      \     a=sendonly\n      m=video 10002 RTP/AVP 31 32\n      a=mid:bar\n      b=AS:1000\n
      \     a=rtpmap:31 H261/90000\n      a=rtpmap:32 MPV/90000\n      a=extmap:2
      urn:ietf:params:rtp-hdrext:splicing-interval\n      a=sendonly\n      m=video
      20000 RTP/AVP 31 32\n      i=Substitutive video RTP Stream\n      c=IN IP4 substitutive.example.com\n
      \     a=rtpmap:31 H261/90000\n      a=rtpmap:32 MPV/90000\n      a=mid:2\n      a=sendonly\n
      \  SDP Answer - from the splicer:\n      v=0\n      o=bob 2808844564 2808844564
      IN IP4 splicer.example.com\n      s=RTP Splicing Example\n      c=IN IP4 splicer.example.com\n
      \     t=0 0\n      a=group:SPLICE bar 2\n      a=group:BUNDLE foo bar\n      m=audio
      30000 RTP/AVP 0\n      a=mid:foo\n      b=AS:200\n      a=rtpmap:0 PCMU/8000\n
      \     a=recvonly\n      m=video 30000 RTP/AVP 32\n      a=mid:bar\n      b=AS:1000\n
      \     a=rtpmap:32 MPV/90000\n      a=extmap:2 urn:ietf:params:rtp-hdrext:splicing-interval\n
      \     a=recvonly\n      m=video 30004 RTP/AVP 32\n      i=Substitutive video
      RTP Stream\n      c=IN IP4 splicer.example.com\n      a=rtpmap:32 MPV/90000\n
      \     a=mid:2\n      a=recvonly\n"
    title: '6.4.  Offer/Answer with BUNDLE: A Subset of Media Are Spliced'
  title: 6.  Session Description Protocol (SDP) Signaling
- contents:
  - "7.  Security Considerations\n   The security considerations of the RTP specification
    [RFC3550] and\n   the general mechanism for RTP header extensions [RFC8285] apply.
    \ The\n   splicer can be either a mixer or a translator, and all the security\n
    \  considerations of topologies [RFC7667] [RFC7201] for these two types\n   of
    RTP intermediaries are applicable for the splicer.\n   The splicer replaces some
    content with other content in RTP packets,\n   thus breaking any RTP-level end-to-end
    security, such as source\n   authentication and integrity protection.  End-to-end
    source\n   authentication is not possible with any known existing splicing\n   solution.
    \ A new solution can theoretically be developed that enables\n   identification
    of the participating entities and what each provides,\n   i.e., the different
    media sources -- main and substitutive -- and the\n   splicer, which provides
    the RTP-level integration of the media\n   payloads in a common timeline and synchronization
    context.\n   Since the splicer breaks RTP-level end-to-end security, it needs
    to\n   be part of the signaling context and the necessary security\n   associations
    (e.g., Secure Real-time Transport Protocol (SRTP)\n   [RFC3711] crypto contexts)
    established for the RTP session\n   participants.  When using SRTP, the splicer
    would have to be\n   provisioned with the same security association as the main
    RTP\n   sender.\n   If there are concerns about the confidentiality of the splicing
    time\n   information, the header extension defined in this document MUST also\n
    \  be protected; for example, header extension encryption [RFC6904] can\n   be
    used in this case.  However, the malicious endpoint may get the\n   splicing time
    information by other means, e.g., inferring it from the\n   communication between
    the main and substitutive content sources.  To\n   avoid the insertion of invalid
    substitutive content, the splicer MUST\n   have some mechanisms to authenticate
    the substitutive stream source.\n   For cases where the splicing time information
    is changed by a\n   malicious endpoint, the splicing, for example, may fail, since
    it\n   will not be available at the right time for the substitutive media to\n
    \  arrive.  Another case is one where an attacker may prevent the\n   receivers
    from receiving the content from the main sender by\n   inserting extra splicing
    time information.  To avoid the above\n   scenarios, the authentication of the
    RTP header extension for\n   splicing time information SHOULD be considered.\n
    \  When a splicer implemented as a mixer sends the stream to the\n   receivers,
    the CSRC list, which can be used to detect RTP-level\n   forwarding loops as defined
    in Section 8.2 of [RFC3550], may be\n   removed for simplifying the receivers
    that cannot handle multiple\n   sources in the RTP stream.  Hence, loops may occur,
    causing packets\n   to loop back to a point upstream of the splicer and possibly
    forming\n   a serious denial-of-service threat.  In such a case, non-RTP means,\n
    \  e.g., signaling among all the participants, MUST be used to detect\n   and
    resolve loops.\n"
  title: 7.  Security Considerations
- contents:
  - '8.  IANA Considerations

    '
  - contents:
    - "8.1.  RTCP Control Packet Types\n   Based on the guidelines suggested in [RFC8126],
      a new RTCP packet\n   format has been registered in the \"RTCP Control Packet
      types (PT)\"\n   registry:\n      Name: SNM\n      Long name: Splicing Notification
      Message\n      Value: 213\n      Reference: This document\n"
    title: 8.1.  RTCP Control Packet Types
  - contents:
    - "8.2.  RTP Compact Header Extensions\n   IANA has registered a new RTP Compact
      Header Extension [RFC8285],\n   according to the following:\n      Extension
      URI: urn:ietf:params:rtp-hdrext:splicing-interval\n      Description: Splicing
      Interval\n      Contact: Jinwei Xia <xiajinwei@huawei.com>\n      Reference:
      This document\n"
    title: 8.2.  RTP Compact Header Extensions
  - contents:
    - "8.3.  SDP Grouping Semantic Extension\n   IANA has registered the new SDP grouping
      semantic extension called\n   \"SPLICE\" in the \"Semantics for the 'group'
      SDP Attribute\" subregistry\n   of the \"Session Description Protocol (SDP)
      Parameters\" registry:\n      Semantics: Splice\n      Token: SPLICE\n      Reference:
      This document\n"
    title: 8.3.  SDP Grouping Semantic Extension
  title: 8.  IANA Considerations
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC3264]  Rosenberg, J. and H. Schulzrinne, \"An Offer/Answer Model\n              with
      Session Description Protocol (SDP)\", RFC 3264,\n              DOI 10.17487/RFC3264,
      June 2002,\n              <https://www.rfc-editor.org/info/rfc3264>.\n   [RFC3550]
      \ Schulzrinne, H., Casner, S., Frederick, R., and V.\n              Jacobson,
      \"RTP: A Transport Protocol for Real-Time\n              Applications\", STD
      64, RFC 3550, DOI 10.17487/RFC3550,\n              July 2003, <https://www.rfc-editor.org/info/rfc3550>.\n
      \  [RFC5888]  Camarillo, G. and H. Schulzrinne, \"The Session Description\n
      \             Protocol (SDP) Grouping Framework\", RFC 5888,\n              DOI
      10.17487/RFC5888, June 2010,\n              <https://www.rfc-editor.org/info/rfc5888>.\n
      \  [RFC5905]  Mills, D., Martin, J., Ed., Burbank, J., and W. Kasch,\n              \"Network
      Time Protocol Version 4: Protocol and Algorithms\n              Specification\",
      RFC 5905, DOI 10.17487/RFC5905, June 2010,\n              <https://www.rfc-editor.org/info/rfc5905>.\n
      \  [RFC6051]  Perkins, C. and T. Schierl, \"Rapid Synchronisation of RTP\n              Flows\",
      RFC 6051, DOI 10.17487/RFC6051, November 2010,\n              <https://www.rfc-editor.org/info/rfc6051>.\n
      \  [RFC7201]  Westerlund, M. and C. Perkins, \"Options for Securing RTP\n              Sessions\",
      RFC 7201, DOI 10.17487/RFC7201, April 2014,\n              <https://www.rfc-editor.org/info/rfc7201>.\n
      \  [RFC7667]  Westerlund, M. and S. Wenger, \"RTP Topologies\", RFC 7667,\n
      \             DOI 10.17487/RFC7667, November 2015,\n              <https://www.rfc-editor.org/info/rfc7667>.\n
      \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in\n              RFC
      2119 Key Words\", BCP 14, RFC 8174,\n              DOI 10.17487/RFC8174, May
      2017,\n              <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8285]
      \ Singer, D., Desineni, H., and R. Even, Ed., \"A General\n              Mechanism
      for RTP Header Extensions\", RFC 8285,\n              DOI 10.17487/RFC8285,
      October 2017,\n              <https://www.rfc-editor.org/info/rfc8285>.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [RFC3711]  Baugher, M., McGrew, D., Naslund,
      M., Carrara, E., and K.\n              Norrman, \"The Secure Real-time Transport
      Protocol (SRTP)\",\n              RFC 3711, DOI 10.17487/RFC3711, March 2004,\n
      \             <https://www.rfc-editor.org/info/rfc3711>.\n   [RFC5506]  Johansson,
      I. and M. Westerlund, \"Support for Reduced-Size\n              Real-Time Transport
      Control Protocol (RTCP): Opportunities\n              and Consequences\", RFC
      5506, DOI 10.17487/RFC5506,\n              April 2009, <https://www.rfc-editor.org/info/rfc5506>.\n
      \  [RFC6285]  Ver Steeg, B., Begen, A., Van Caenegem, T., and Z. Vax,\n              \"Unicast-Based
      Rapid Acquisition of Multicast RTP\n              Sessions\", RFC 6285, DOI
      10.17487/RFC6285, June 2011,\n              <https://www.rfc-editor.org/info/rfc6285>.\n
      \  [RFC6828]  Xia, J., \"Content Splicing for RTP Sessions\", RFC 6828,\n              DOI
      10.17487/RFC6828, January 2013,\n              <https://www.rfc-editor.org/info/rfc6828>.\n
      \  [RFC6904]  Lennox, J., \"Encryption of Header Extensions in the Secure\n
      \             Real-time Transport Protocol (SRTP)\", RFC 6904,\n              DOI
      10.17487/RFC6904, April 2013,\n              <https://www.rfc-editor.org/info/rfc6904>.\n
      \  [RFC8126]  Cotton, M., Leiba, B., and T. Narten, \"Guidelines for\n              Writing
      an IANA Considerations Section in RFCs\", BCP 26,\n              RFC 8126, DOI
      10.17487/RFC8126, June 2017,\n              <https://www.rfc-editor.org/info/rfc8126>.\n
      \  [SCTE35]   Society of Cable Telecommunications Engineers (SCTE),\n              \"Digital
      Program Insertion Cueing Message for Cable\",\n              2016, <http://www.scte.org/SCTEDocs/Standards/\n
      \             SCTE%2035%202016.pdf>.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Acknowledgements\n   The authors would like to thank the following individuals
    who helped\n   to review this document and provided very valuable comments: Colin\n
    \  Perkins, Bo Burman, Stephen Botzko, and Ben Campbell.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Jinwei Xia\n   Huawei\n   Email: xiajinwei@huawei.com\n
    \  Roni Even\n   Huawei\n   Email: roni.even@huawei.com\n   Rachel Huang\n   Huawei\n
    \  Email: rachel.huang@huawei.com\n   Lingli Deng\n   China Mobile\n   Email:
    denglingli@chinamobile.com\n"
  title: Authors' Addresses
