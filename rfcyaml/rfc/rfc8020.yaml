- contents:
  - '              NXDOMAIN: There Really Is Nothing Underneath

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document states clearly that when a DNS resolver receives a\n
    \  response with a response code of NXDOMAIN, it means that the domain\n   name
    which is thus denied AND ALL THE NAMES UNDER IT do not exist.\n   This document
    clarifies RFC 1034 and modifies a portion of RFC 2308:\n   it updates both of
    them.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8020.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction and Background .....................................2\n
    \     1.1. Terminology ................................................3\n   2.
    Rules ...........................................................3\n   3. Updates
    to RFCs .................................................5\n      3.1. Updates
    to RFC 1034 ........................................5\n      3.2. Updates to RFC
    2308 ........................................5\n   4. Benefits ........................................................5\n
    \  5. Possible Issues .................................................6\n   6.
    Implementation Considerations ...................................6\n   7. Security
    Considerations .........................................7\n   8. References ......................................................7\n
    \     8.1. Normative References .......................................7\n      8.2.
    Informative References .....................................8\n   Appendix A.
    Why can't we just use the owner name of the returned\n               SOA? ...................................................9\n
    \  Appendix B. Related Approaches .....................................9\n   Acknowledgments
    ....................................................9\n   Authors' Addresses ................................................10\n"
  title: Table of Contents
- contents:
  - "1.  Introduction and Background\n   The DNS protocol [RFC1035] defines response
    code 3 as \"Name Error\",\n   or \"NXDOMAIN\" [RFC2308], which means that the
    queried domain name\n   does not exist in the DNS.  Since domain names are represented
    as a\n   tree of labels ([RFC1034], Section 3.1), nonexistence of a node\n   implies
    nonexistence of the entire subtree rooted at this node.\n   The DNS iterative
    resolution algorithm precisely interprets the\n   NXDOMAIN signal in this manner.
    \ If it encounters an NXDOMAIN\n   response code from an authoritative server,
    it immediately stops\n   iteration and returns the NXDOMAIN response to the querier.\n
    \  However, in most known existing resolvers today, a cached\n   nonexistence
    for a domain is not considered \"proof\" that there can be\n   no child domains
    underneath.  This is due to an ambiguity in\n   [RFC1034] that failed to distinguish
    Empty Non-Terminal (ENT) names\n   ([RFC7719]) from nonexistent names (Section
    3.1).  The distinction\n   became especially important for the development of
    DNSSEC, which\n   provides proof of nonexistence.  [RFC4035], Section 3.1.3.2,\n
    \  describes how security-aware authoritative name servers make the\n   distinction,
    but no existing RFCs describe the behavior for recursive\n   name servers.\n   This
    document specifies that an NXDOMAIN response for a domain name\n   means that
    no child domains underneath the queried name exist either;\n   furthermore, it
    means that DNS resolvers should interpret cached\n   nonexistence in this manner.
    \ Since the domain names are organized in\n   a tree, it is a simple consequence
    of the tree structure:\n   nonexistence of a node implies nonexistence of the
    entire subtree\n   rooted at this node.\n"
  - contents:
    - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
      \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and
      \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n
      \  \"QNAME\": defined in [RFC1034] and in [RFC1035], Section 4.1.2, but,\n   because
      [RFC2308] provides a different definition, we repeat the\n   original one here:
      the QNAME is the domain name in the question\n   section.\n   \"Denied name\":
      the domain name whose existence has been denied by a\n   response RCODE of NXDOMAIN.
      \ In most cases, it is the QNAME but,\n   because of [RFC6604], it is not always
      the case.\n   Other terms are defined in [RFC1034], [RFC1035], and (like NXDOMAIN\n
      \  itself) in the more recent [RFC7719].\n   The domain name space is conceptually
      defined in terms of a tree\n   structure.  The implementation of a DNS resolver/cache
      MAY use a tree\n   or other data structures.  The cache being a subset of the
      data in\n   the domain name space, it is much easier to reason about it in terms\n
      \  of that tree structure and to describe things in those terms (names\n   under/above,
      descendant names, subtrees, etc.).  In fact, the DNS\n   algorithm description
      in [RFC1034] even states an assumption that the\n   cache is a tree structure,
      so the precedent is already well\n   established: see its Section 4.3.2, which
      says \"The following\n   algorithm assumes that the RRs are organized in several
      tree\n   structures, one for each zone, and another for the cache...\" So, in\n
      \  this document, each time we talk about a tree or tree operations,\n   we're
      referring to the model, not to the actual implementation.\n"
    title: 1.1.  Terminology
  title: 1.  Introduction and Background
- contents:
  - "2.  Rules\n   When an iterative caching DNS resolver receives an NXDOMAIN response,\n
    \  it SHOULD store it in its cache and then all names and resource\n   record
    sets (RRsets) at or below that node SHOULD be considered\n   unreachable.  Subsequent
    queries for such names SHOULD elicit an\n   NXDOMAIN response.\n   But, if a resolver
    has cached data under the NXDOMAIN cut, it MAY\n   continue to send it as a reply
    (until the TTL of this cached data\n   expires), since this may avoid additional
    processing when a query is\n   received.  Section 6 provides more information
    about this.\n   Another exception is that a validating resolver MAY decide to\n
    \  implement the \"NXDOMAIN cut\" behavior (described in the first\n   paragraph
    of this section) only when the NXDOMAIN response has been\n   validated with DNSSEC.
    \ See Section 7 for the rationale.\n   The fact that a subtree does not exist
    is not forever: [RFC2308],\n   Section 3, already describes the amount of time
    that an NXDOMAIN\n   response may be cached (the \"negative TTL\").\n   If the
    NXDOMAIN response due to a cached nonexistence is from a\n   DNSSEC-signed zone,
    then it will have accompanying NSEC or NSEC3\n   records that authenticate the
    nonexistence of the name.  For a\n   descendant name of the original NXDOMAIN
    name, the same set of NSEC\n   or NSEC3 records proves the nonexistence of the
    descendant name.  The\n   iterative, caching resolver MUST return these NSEC or
    NSEC3 records\n   in the response to the triggering query if the query had the
    DNSSEC\n   OK (DO) bit set.\n   Warning: if there is a chain of CNAME (or DNAME),
    the name that does\n   not exist is the last of the chain ([RFC6604]) and not
    the QNAME.\n   The NXDOMAIN stored in the cache is for the denied name, not always\n
    \  for the QNAME.\n   As an example of the consequence of these rules, consider
    two\n   successive queries to a resolver with a nonexisting domain\n   'foo.example':
    the first is for 'foo.example' (which results in an\n   NXDOMAIN) and the second
    for 'bar.foo.example' (which also results in\n   an NXDOMAIN).  Many resolvers
    today will forward both queries.\n   However, following the rules in this document
    (\"NXDOMAIN cut\"), a\n   resolver would cache the first NXDOMAIN response, as
    a sign of\n   nonexistence, and then immediately return an NXDOMAIN response for\n
    \  the second query, without transmitting it to an authoritative server.\n   If
    the first request is for 'bar.foo.example' and the second for\n   'baz.foo.example',
    then the first NXDOMAIN response won't tell\n   anything about 'baz.foo.example';
    therefore, the second query will be\n   transmitted as it was before the use of
    \"NXDOMAIN cut\" optimization\n   (see Appendix A).\n"
  title: 2.  Rules
- contents:
  - '3.  Updates to RFCs

    '
  - contents:
    - "3.1.  Updates to RFC 1034\n   This document clarifies possible ambiguities
      in [RFC1034] that did\n   not clearly distinguish Empty Non-Terminal (ENT) names
      ([RFC7719])\n   from nonexistent names, and it refers to subsequent documents
      that\n   do.  ENTs are nodes in the DNS that do not have resource record sets\n
      \  associated with them but have descendant nodes that do.  The correct\n   response
      to ENTs is NODATA (i.e., a response code of NOERROR and an\n   empty answer
      section).  Additional clarifying language on these\n   points is provided in
      Section 7.16 of [RFC2136] and in Sections 2.2.2\n   and 2.2.3 of [RFC4592].\n"
    title: 3.1.  Updates to RFC 1034
  - contents:
    - "3.2.  Updates to RFC 2308\n   The second paragraph of Section 5 in [RFC2308]
      states the following:\n      A negative answer that resulted from a name error
      (NXDOMAIN)\n      should be cached such that it can be retrieved and returned
      in\n      response to another query for the same <QNAME, QCLASS> that\n      resulted
      in the cached negative response.\n   This document revises that paragraph to
      the following:\n      A negative answer that resulted from a name error (NXDOMAIN)\n
      \     should be cached such that it can be retrieved and returned in\n      response
      to another query for the same <QNAME, QCLASS> that\n      resulted in the cached
      negative response, or where the QNAME is a\n      descendant of the original
      QNAME and the QCLASS is the same.\n   Section 2 above elaborates on the revised
      rule and specifies when it\n   may be reasonable to relax or ignore it.\n"
    title: 3.2.  Updates to RFC 2308
  title: 3.  Updates to RFCs
- contents:
  - "4.  Benefits\n   The main benefit is a better efficiency of the caches.  In the\n
    \  example above, the resolver sends only one query instead of two, the\n   second
    one being answered from the cache.  This will benefit the\n   entire DNS ecosystem,
    since the authoritative name servers will have\n   less unnecessary traffic to
    process.\n   The correct behavior (in [RFC1034] and made clearer in this document)\n
    \  is especially useful when combined with QNAME minimization [RFC7816]\n   since
    it will allow a resolver to stop searching as soon as an\n   NXDOMAIN is encountered.\n
    \  \"NXDOMAIN cut\" may also help mitigate certain types of random QNAME\n   attacks
    [joost-dnsterror] and [balakrichenan-dafa888], where there is\n   a fixed suffix
    that does not exist.  In these attacks against the\n   authoritative name server,
    queries are sent to resolvers for a QNAME\n   composed of a fixed suffix (\"dafa888.wf\"
    in one of the articles\n   above), which is typically nonexistent, and a random
    prefix,\n   different for each request.  A resolver receiving these requests has\n
    \  to forward them to the authoritative servers.  With \"NXDOMAIN cut\", a\n   system
    administrator would just have to send to the resolver a query\n   for the fixed
    suffix, the resolver would get a NXDOMAIN and then\n   would stop forwarding the
    queries.  (It would be better if the SOA\n   record in the NXDOMAIN response were
    sufficient to find the\n   nonexisting domain, but this is not the case, see Appendix
    A.)\n"
  title: 4.  Benefits
- contents:
  - "5.  Possible Issues\n   Let's assume that the Top-Level Domain (TLD) example
    exists, but\n   foobar.example is not delegated (so the example's name servers
    will\n   reply NXDOMAIN for a query about anything.foobar.example).  A system\n
    \  administrator decides to name the internal machines of his\n   organization
    under office.foobar.example and uses a trick of his\n   resolver to forward requests
    about this zone to his local\n   authoritative name servers.  \"NXDOMAIN cut\"
    would create problems\n   here; depending on the order of requests to the resolver,
    it may have\n   cached the nonexistence from example and therefore \"deleted\"\n
    \  everything under it.  This document assumes that such a setup is rare\n   and
    does not need to be supported.\n   Today, another possible issue exists; we see
    authoritative name\n   servers that reply to ENT ([RFC7719], Section 6) with NXDOMAIN\n
    \  instead of the normal NODATA ([RFC7719], Section 3).\n   Such name servers
    are definitely wrong and have always been.  Their\n   behaviour is incompatible
    with DNSSEC.  Given the advantages of\n   \"NXDOMAIN cut\", there is little reason
    to support this behavior.\n"
  title: 5.  Possible Issues
- contents:
  - "6.  Implementation Considerations\n   This section is non-normative and is composed
    only of various things\n   that may be useful for implementors.  A recursive resolver
    may\n   implement its cache in many ways.  The most obvious one is a tree\n   data
    structure, because it fits the data model of domain names.  But,\n   in practice,
    other implementations are possible, as well as various\n   optimizations (such
    as a tree, augmented by an index of some common\n   domain names).\n   If a resolver
    implements its cache as a tree (without any\n   optimization), one way to follow
    the rules in Section 2 is as\n   follows: when receiving the NXDOMAIN, prune the
    subtree of positive\n   cache entries at that node or delete all individual cache
    entries for\n   names below that node.  Then, when searching downward in its cache,\n
    \  this iterative caching DNS resolver will stop searching if it\n   encounters
    a cached nonexistence.\n   Some resolvers may have a cache that is NOT organized
    as a tree (but,\n   for instance, as a dictionary); therefore, they have a reason
    to\n   ignore the rules of Section 2.  So these rules use SHOULD and not\n   MUST.\n"
  title: 6.  Implementation Considerations
- contents:
  - "7.  Security Considerations\n   The technique described in this document may
    help against a denial-\n   of-service attack named \"random qnames\" described
    in Section 4.\n   If a resolver does not validate the answers with DNSSEC, or
    if the\n   zone is not signed, the resolver can of course be poisoned with a\n
    \  false NXDOMAIN, thus, \"deleting\" a part of the domain name tree.\n   This
    denial-of-service attack is already possible without the rules\n   of this document
    (but \"NXDOMAIN cut\" may increase its effects).  The\n   only solution is to
    use DNSSEC.\n"
  title: 7.  Security Considerations
- contents:
  - '8.  References

    '
  - contents:
    - "8.1.  Normative References\n   [RFC1034]  Mockapetris, P., \"Domain names -
      concepts and facilities\",\n              STD 13, RFC 1034, DOI 10.17487/RFC1034,
      November 1987,\n              <http://www.rfc-editor.org/info/rfc1034>.\n   [RFC1035]
      \ Mockapetris, P., \"Domain names - implementation and\n              specification\",
      STD 13, RFC 1035, DOI 10.17487/RFC1035,\n              November 1987, <http://www.rfc-editor.org/info/rfc1035>.\n
      \  [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n
      \             <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC2136]  Vixie,
      P., Ed., Thomson, S., Rekhter, Y., and J. Bound,\n              \"Dynamic Updates
      in the Domain Name System (DNS UPDATE)\",\n              RFC 2136, DOI 10.17487/RFC2136,
      April 1997,\n              <http://www.rfc-editor.org/info/rfc2136>.\n   [RFC2308]
      \ Andrews, M., \"Negative Caching of DNS Queries (DNS\n              NCACHE)\",
      RFC 2308, DOI 10.17487/RFC2308, March 1998,\n              <http://www.rfc-editor.org/info/rfc2308>.\n
      \  [RFC4592]  Lewis, E., \"The Role of Wildcards in the Domain Name\n              System\",
      RFC 4592, DOI 10.17487/RFC4592, July 2006,\n              <http://www.rfc-editor.org/info/rfc4592>.\n
      \  [RFC6604]  Eastlake 3rd, D., \"xNAME RCODE and Status Bits\n              Clarification\",
      RFC 6604, DOI 10.17487/RFC6604, April\n              2012, <http://www.rfc-editor.org/info/rfc6604>.\n"
    title: 8.1.  Normative References
  - contents:
    - "8.2.  Informative References\n   [RFC4035]  Arends, R., Austein, R., Larson,
      M., Massey, D., and S.\n              Rose, \"Protocol Modifications for the
      DNS Security\n              Extensions\", RFC 4035, DOI 10.17487/RFC4035, March
      2005,\n              <http://www.rfc-editor.org/info/rfc4035>.\n   [RFC7719]
      \ Hoffman, P., Sullivan, A., and K. Fujiwara, \"DNS\n              Terminology\",
      RFC 7719, DOI 10.17487/RFC7719, December\n              2015, <http://www.rfc-editor.org/info/rfc7719>.\n
      \  [RFC7816]  Bortzmeyer, S., \"DNS Query Name Minimisation to Improve\n              Privacy\",
      RFC 7816, DOI 10.17487/RFC7816, March 2016,\n              <http://www.rfc-editor.org/info/rfc7816>.\n
      \  [DNSRRR]   Vixie, P., Joffe, R., and F. Neves, \"Improvements to DNS\n              Resolvers
      for Resiliency, Robustness, and Responsiveness\",\n              Work in Progress,
      draft-vixie-dnsext-resimprove-00, June\n              2010.\n   [NSEC]     Fujiwara,
      K., Kato, A., and W. Kumari, \"Aggressive use of\n              NSEC/NSEC3\",
      Work in Progress, draft-ietf-dnsop-nsec-\n              aggressiveuse-04, September
      2016.\n   [joost-dnsterror]\n              Joost, M., \"About DNS Attacks and
      ICMP Destination\n              Unreachable Reports\", December 2014,\n              <http://www.michael-joost.de/dnsterror.html>.\n
      \  [balakrichenan-dafa888]\n              Balakrichenan, S., \"Disturbance in
      the DNS - \"Random\n              qnames\", the dafa888 DoS attack\"\", October
      2014,\n              <https://indico.dns-oarc.net/event/20/session/3/\n              contribution/3>.\n"
    title: 8.2.  Informative References
  title: 8.  References
- contents:
  - "Appendix A.  Why can't we just use the owner name of the returned SOA?\n   In
    this document, we deduce the nonexistence of a domain only for\n   NXDOMAIN answers
    where the denied name was the exact domain.  If a\n   resolver sends a query to
    the name servers of the TLD example, asking\n   for the mail exchange (MX) record
    for www.foobar.example, and\n   subsequently receives a NXDOMAIN, it can only
    register the fact that\n   www.foobar.example (and everything underneath) does
    not exist.  This\n   is true regardless of whether or not the accompanying SOA
    record is\n   for the domain example only.  One cannot infer that foobar.example
    is\n   nonexistent.  The accompanying SOA record indicates the apex of the\n   zone,
    not the closest existing domain name.  So, using the owner name\n   of the SOA
    record in the authority section to deduce \"NXDOMAIN cuts\"\n   is currently definitely
    not OK.\n   Deducing the nonexistence of a node from the SOA in the NXDOMAIN\n
    \  reply may certainly help with random qnames attacks, but this is out-\n   of-scope
    for this document.  It would require addressing the problems\n   mentioned in
    the first paragraph of this section.  A possible\n   solution is, when receiving
    a NXDOMAIN with a SOA that is more than\n   one label up in the tree, to send
    requests for the domains that are\n   between the QNAME and the owner name of
    the SOA.  (A resolver that\n   does DNSSEC validation or QNAME minimization will
    need to do it\n   anyway.)\n"
  title: Appendix A.  Why can't we just use the owner name of the returned SOA?
- contents:
  - "Appendix B.  Related Approaches\n   The document [NSEC] describes another way
    to address some of the same\n   concerns (decreasing the traffic for nonexisting
    domain names).\n   Unlike \"NXDOMAIN cut\", it requires DNSSEC, but it is more
    powerful\n   since it can synthesize NXDOMAINs for domains that were not queried.\n"
  title: Appendix B.  Related Approaches
- contents:
  - "Acknowledgments\n   The main idea in this document is taken from [DNSRRR], Section
    3,\n   \"Stopping Downward Cache Search on NXDOMAIN\".  Thanks to its authors,\n
    \  Paul Vixie, Rodney Joffe, and Frederico Neves.  Additionally, Tony\n   Finch,
    Ted Lemon, John Levine, Jinmei Tatuya, Bob Harold, and Duane\n   Wessels provided
    valuable feedback and suggestions.\n"
  title: Acknowledgments
- contents:
  - "Authors' Addresses\n   Stephane Bortzmeyer\n   AFNIC\n   1, rue Stephenson\n
    \  Montigny-le-Bretonneux  78180\n   France\n   Phone: +33 1 39 30 83 46\n   Email:
    bortzmeyer+ietf@nic.fr\n   URI:   https://www.afnic.fr/\n   Shumon Huque\n   Verisign
    Labs\n   12061 Bluemont Way\n   Reston, VA  20190\n   United States of America\n
    \  Email: shuque@verisign.com\n   URI:   http://www.verisignlabs.com/\n"
  title: Authors' Addresses
