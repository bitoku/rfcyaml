Abstract This document defines an Optional Parameter, called Capabilities, that is expected to facilitate the introduction of new capabilities in the Border Gateway Protocol (BGP) by providing graceful capability advertisement without requiring that BGP peering be terminated.
This document obsoletes RFC 3392.
The base BGP 4 specification [RFC4271] requires that when a BGP speaker receives an OPEN message with one or more unrecognized Optional Parameters, the speaker must terminate the BGP peering.
This complicates the introduction of new capabilities in BGP.
This specification defines an Optional Parameter and processing rules that allow BGP speakers to communicate capabilities in an OPEN message.
A pair of BGP speakers that supports this specification can establish the peering even when presented with unrecognized capabilities, so long as all capabilities required to support the peering are supported.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119
Overview of Operations When a BGP speaker [RFC4271] that supports capabilities advertisement sends an OPEN message to its BGP peer, the message MAY include an Optional Parameter, called Capabilities.
The parameter lists the capabilities supported by the speaker.
A BGP speaker determines the capabilities supported by its peer by examining the list of capabilities present in the Capabilities Optional Parameter carried by the OPEN message that the speaker receives from the peer.
A BGP speaker that supports a particular capability may use this capability with its peer after the speaker determines (as described above) that the peer supports this capability.
Simply put, a given capability can be used on a peering if that capability has been advertised by both peers.
If either peer has not advertised it, the capability cannot be used.
A BGP speaker determines that its peer doesn't support capabilities advertisement if, in response to an OPEN message that carries the Capabilities Optional Parameter, the speaker receives a NOTIFICATION message with the Error Subcode set to Unsupported Optional Parameter.
(This is a consequence of the base BGP 4 specification [RFC4271] and not a new requirement.)
In this case, the speaker SHOULD attempt to re establish a BGP connection with the peer without sending to the peer the Capabilities Optional Parameter.
If a BGP speaker that supports a certain capability determines that its peer doesn't support this capability, the speaker MAY send a NOTIFICATION message to the peer and terminate peering (see Section "Extensions to Error Handling" for more details).
For example, a BGP speaker may need to terminate peering if it established peering to exchange IPv6 routes and determines that its peer does not support Multiprotocol Extensions for BGP 4 [RFC4760].
The Error Subcode in the NOTIFICATION message is then set to Unsupported Capability.
The message MUST contain the capability or capabilities that cause the speaker to send the message.
The decision to send the message and terminate the peering is local to the speaker.
If terminated, such peering SHOULD NOT be re established automatically.
If a BGP speaker receives from its peer a capability that it does not itself support or recognize, it MUST ignore that capability.
In particular, the Unsupported Capability NOTIFICATION message MUST NOT be generated and the BGP session MUST NOT be terminated in response to reception of a capability that is not supported by the local speaker.
: This is an Optional Parameter that is used by a BGP speaker to convey to its BGP peer the list of capabilities supported by the speaker.
The encoding of BGP Optional Parameters is specified in Section 4.2 of [RFC4271].
The parameter type of the Capabilities Optional Parameter is 2.
The parameter contains one or more triples <Capability Code, Capability Length, Capability Value
>, where each triple is encoded as shown below:
The use and meaning of these fields are as follows:
Capability Code is a one octet unsigned binary integer that unambiguously identifies individual capabilities.
Capability Length: Capability Length is a one octet unsigned binary integer that contains the length of the Capability Value field in octets.
Capability Value is a variable length field that is interpreted according to the value of the Capability Code field.
BGP speakers SHOULD NOT include more than one instance of a capability with the same Capability Code, Capability Length, and Capability Value.
Note, however, that processing of multiple instances of such capability does not require special handling, as additional instances do not change the meaning of the announced capability; thus, a BGP speaker MUST be prepared to accept such multiple instances.
BGP speakers MAY include more than one instance of a capability (as identified by the Capability Code) with non zero Capability Length field, but with different Capability Value and either the same or different Capability Length.
Processing of these capability instances is specific to the Capability Code and MUST be described in the document introducing the new capability.
The Capabilities Optional Parameter (OPEN Optional Parameter Type 2) SHOULD only be included in the OPEN message once.
If the BGP speaker wishes to include multiple capabilities in the OPEN message, it SHOULD do so as discussed above   by listing all those capabilities as TLVs within a single Capabilities Optional Parameter.
However, for backward compatibility, a BGP speaker MUST be prepared to receive an OPEN message that contains multiple Capabilities Optional Parameters, each of which contains one or more capabilities TLVs.
The set of capabilities should be processed in the same way in either case, whether it is enumerated within a single Capabilities Optional Parameter of the OPEN message or split across multiple Capabilities Optional Parameters.
This document defines a new Error Subcode, Unsupported Capability.
The value of this Subcode is 7.
The Data field in the NOTIFICATION message MUST list the set of capabilities that causes the speaker to send the message.
Each such capability is encoded in the same way as it would be encoded in the OPEN message.
As explained in the "Overview of Operations" section, the Unsupported Capability NOTIFICATION is a way for a BGP speaker to complain that its peer does not support a required capability without which the peering cannot proceed.
It MUST NOT be used when a BGP speaker receives a capability that it does not understand; such capabilities MUST be ignored.
This document defines a Capability Optional Parameter along with a Capability Code field.
IANA maintains the registry for Capability Code values.
Capability Code value 0 is reserved.
Capability Code values 1 through 63 are to be assigned by IANA using the "IETF Review" policy defined in [RFC5226].
Capability Code values 64 through 127 are to be assigned by IANA using the "First Come First Served" policy defined in [RFC5226].
Capability Code values 128 through 255 are for "Private Use" as defined in [RFC5226].
IANA created and maintains a registry for OPEN message Optional Parameters called "BGP OPEN Optional Parameter Types".
Optional Parameters are identified by the Parameter Type, which is a one octet unsigned integer.
Values (0 reserved, 1 255) are to be allocated according to the "IETF Review" policy as defined in [RFC5226].
The registry has been populated with the two Parameter Type codes that are currently defined:
This extension to BGP does not change the underlying security issues inherent in the existing BGP [RFC4272].
Appendix A.  Comparison between RFC 2842 and RFC 3392
In addition to several minor editorial changes, RFC 3392 also clarified how to handle multiple instances of the same capability.
Appendix B.  Comparison between RFC 3392 and This Document
This document makes minor editorial changes and updated references, clarifies the use of the Unsupported Optional Parameter NOTIFICATION message, clarifies behavior when the Capabilities Parameter is included in the OPEN message multiple times, and clarifies requirements by changing a number of SHOULDs to MUSTs.
